
ESE516 BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f74  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00004f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000948  20000070  00004fe4  00020070  2**2
                  ALLOC
  3 .stack        00002000  200009b8  0000592c  00020070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003c511  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004991  00000000  00000000  0005c602  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004157  00000000  00000000  00060f93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c00  00000000  00000000  000650ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a70  00000000  00000000  00065cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001d6eb  00000000  00000000  0006675a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000129d8  00000000  00000000  00083e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00092305  00000000  00000000  0009681d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d78  00000000  00000000  00128b24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 29 00 20 09 3e 00 00 01 3f 00 00 01 3f 00 00     .). .>...?...?..
	...
      2c:	01 3f 00 00 00 00 00 00 00 00 00 00 01 3f 00 00     .?...........?..
      3c:	d1 01 00 00 01 3f 00 00 01 3f 00 00 01 3f 00 00     .....?...?...?..
      4c:	01 3f 00 00 01 3f 00 00 01 3f 00 00 01 3f 00 00     .?...?...?...?..
      5c:	01 3f 00 00 01 3f 00 00 69 17 00 00 81 17 00 00     .?...?..i.......
      6c:	99 17 00 00 b1 17 00 00 c9 17 00 00 e1 17 00 00     ................
      7c:	01 3f 00 00 01 3f 00 00 01 3f 00 00 01 3f 00 00     .?...?...?...?..
      8c:	01 3f 00 00 01 3f 00 00 00 00 00 00 00 00 00 00     .?...?..........
      9c:	01 3f 00 00 01 3f 00 00 01 3f 00 00 01 3f 00 00     .?...?...?...?..
      ac:	01 3f 00 00 00 00 00 00                             .?......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000070 	.word	0x20000070
      d4:	00000000 	.word	0x00000000
      d8:	00004f74 	.word	0x00004f74

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000074 	.word	0x20000074
     108:	00004f74 	.word	0x00004f74
     10c:	00004f74 	.word	0x00004f74
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	000039bd 	.word	0x000039bd
     190:	20000000 	.word	0x20000000
     194:	00004235 	.word	0x00004235
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1d4:	4b03      	ldr	r3, [pc, #12]	; (1e4 <SysTick_Handler+0x14>)
     1d6:	681b      	ldr	r3, [r3, #0]
     1d8:	1c5a      	adds	r2, r3, #1
     1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <SysTick_Handler+0x14>)
     1dc:	601a      	str	r2, [r3, #0]
}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	46bd      	mov	sp, r7
     1e2:	bd80      	pop	{r7, pc}
     1e4:	2000008c 	.word	0x2000008c

000001e8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1e8:	b580      	push	{r7, lr}
     1ea:	b084      	sub	sp, #16
     1ec:	af00      	add	r7, sp, #0
     1ee:	0002      	movs	r2, r0
     1f0:	1dfb      	adds	r3, r7, #7
     1f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     1f4:	230f      	movs	r3, #15
     1f6:	18fb      	adds	r3, r7, r3
     1f8:	1dfa      	adds	r2, r7, #7
     1fa:	7812      	ldrb	r2, [r2, #0]
     1fc:	09d2      	lsrs	r2, r2, #7
     1fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     200:	230e      	movs	r3, #14
     202:	18fb      	adds	r3, r7, r3
     204:	1dfa      	adds	r2, r7, #7
     206:	7812      	ldrb	r2, [r2, #0]
     208:	0952      	lsrs	r2, r2, #5
     20a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     20c:	4b0d      	ldr	r3, [pc, #52]	; (244 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     20e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     210:	230f      	movs	r3, #15
     212:	18fb      	adds	r3, r7, r3
     214:	781b      	ldrb	r3, [r3, #0]
     216:	2b00      	cmp	r3, #0
     218:	d10f      	bne.n	23a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     21a:	230f      	movs	r3, #15
     21c:	18fb      	adds	r3, r7, r3
     21e:	781b      	ldrb	r3, [r3, #0]
     220:	009b      	lsls	r3, r3, #2
     222:	2210      	movs	r2, #16
     224:	4694      	mov	ip, r2
     226:	44bc      	add	ip, r7
     228:	4463      	add	r3, ip
     22a:	3b08      	subs	r3, #8
     22c:	681a      	ldr	r2, [r3, #0]
     22e:	230e      	movs	r3, #14
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	01db      	lsls	r3, r3, #7
     236:	18d3      	adds	r3, r2, r3
     238:	e000      	b.n	23c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     23a:	2300      	movs	r3, #0
	}
}
     23c:	0018      	movs	r0, r3
     23e:	46bd      	mov	sp, r7
     240:	b004      	add	sp, #16
     242:	bd80      	pop	{r7, pc}
     244:	41004400 	.word	0x41004400

00000248 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     248:	b580      	push	{r7, lr}
     24a:	b082      	sub	sp, #8
     24c:	af00      	add	r7, sp, #0
     24e:	0002      	movs	r2, r0
     250:	1dfb      	adds	r3, r7, #7
     252:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     254:	1dfb      	adds	r3, r7, #7
     256:	781b      	ldrb	r3, [r3, #0]
     258:	0018      	movs	r0, r3
     25a:	4b03      	ldr	r3, [pc, #12]	; (268 <port_get_group_from_gpio_pin+0x20>)
     25c:	4798      	blx	r3
     25e:	0003      	movs	r3, r0
}
     260:	0018      	movs	r0, r3
     262:	46bd      	mov	sp, r7
     264:	b002      	add	sp, #8
     266:	bd80      	pop	{r7, pc}
     268:	000001e9 	.word	0x000001e9

0000026c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     26c:	b580      	push	{r7, lr}
     26e:	b082      	sub	sp, #8
     270:	af00      	add	r7, sp, #0
     272:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     274:	687b      	ldr	r3, [r7, #4]
     276:	2200      	movs	r2, #0
     278:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     27a:	687b      	ldr	r3, [r7, #4]
     27c:	2201      	movs	r2, #1
     27e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     280:	687b      	ldr	r3, [r7, #4]
     282:	2200      	movs	r2, #0
     284:	709a      	strb	r2, [r3, #2]
}
     286:	46c0      	nop			; (mov r8, r8)
     288:	46bd      	mov	sp, r7
     28a:	b002      	add	sp, #8
     28c:	bd80      	pop	{r7, pc}
	...

00000290 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     290:	b580      	push	{r7, lr}
     292:	b084      	sub	sp, #16
     294:	af00      	add	r7, sp, #0
     296:	0002      	movs	r2, r0
     298:	1dfb      	adds	r3, r7, #7
     29a:	701a      	strb	r2, [r3, #0]
     29c:	1dbb      	adds	r3, r7, #6
     29e:	1c0a      	adds	r2, r1, #0
     2a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2a2:	1dfb      	adds	r3, r7, #7
     2a4:	781b      	ldrb	r3, [r3, #0]
     2a6:	0018      	movs	r0, r3
     2a8:	4b0d      	ldr	r3, [pc, #52]	; (2e0 <port_pin_set_output_level+0x50>)
     2aa:	4798      	blx	r3
     2ac:	0003      	movs	r3, r0
     2ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2b0:	1dfb      	adds	r3, r7, #7
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	221f      	movs	r2, #31
     2b6:	4013      	ands	r3, r2
     2b8:	2201      	movs	r2, #1
     2ba:	409a      	lsls	r2, r3
     2bc:	0013      	movs	r3, r2
     2be:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2c0:	1dbb      	adds	r3, r7, #6
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	2b00      	cmp	r3, #0
     2c6:	d003      	beq.n	2d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2c8:	68fb      	ldr	r3, [r7, #12]
     2ca:	68ba      	ldr	r2, [r7, #8]
     2cc:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2ce:	e002      	b.n	2d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2d0:	68fb      	ldr	r3, [r7, #12]
     2d2:	68ba      	ldr	r2, [r7, #8]
     2d4:	615a      	str	r2, [r3, #20]
}
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	46bd      	mov	sp, r7
     2da:	b004      	add	sp, #16
     2dc:	bd80      	pop	{r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	00000249 	.word	0x00000249

000002e4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2e4:	b580      	push	{r7, lr}
     2e6:	b082      	sub	sp, #8
     2e8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2ea:	1d3b      	adds	r3, r7, #4
     2ec:	0018      	movs	r0, r3
     2ee:	4b0e      	ldr	r3, [pc, #56]	; (328 <system_board_init+0x44>)
     2f0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     2f2:	1d3b      	adds	r3, r7, #4
     2f4:	2201      	movs	r2, #1
     2f6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     2f8:	1d3b      	adds	r3, r7, #4
     2fa:	0019      	movs	r1, r3
     2fc:	2017      	movs	r0, #23
     2fe:	4b0b      	ldr	r3, [pc, #44]	; (32c <system_board_init+0x48>)
     300:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     302:	2101      	movs	r1, #1
     304:	2017      	movs	r0, #23
     306:	4b0a      	ldr	r3, [pc, #40]	; (330 <system_board_init+0x4c>)
     308:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     30a:	1d3b      	adds	r3, r7, #4
     30c:	2200      	movs	r2, #0
     30e:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     310:	1d3b      	adds	r3, r7, #4
     312:	2201      	movs	r2, #1
     314:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     316:	1d3b      	adds	r3, r7, #4
     318:	0019      	movs	r1, r3
     31a:	2037      	movs	r0, #55	; 0x37
     31c:	4b03      	ldr	r3, [pc, #12]	; (32c <system_board_init+0x48>)
     31e:	4798      	blx	r3
}
     320:	46c0      	nop			; (mov r8, r8)
     322:	46bd      	mov	sp, r7
     324:	b002      	add	sp, #8
     326:	bd80      	pop	{r7, pc}
     328:	0000026d 	.word	0x0000026d
     32c:	00001079 	.word	0x00001079
     330:	00000291 	.word	0x00000291

00000334 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     334:	b580      	push	{r7, lr}
     336:	b082      	sub	sp, #8
     338:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     33a:	4b07      	ldr	r3, [pc, #28]	; (358 <nvm_is_ready+0x24>)
     33c:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     33e:	687b      	ldr	r3, [r7, #4]
     340:	7d1b      	ldrb	r3, [r3, #20]
     342:	b2db      	uxtb	r3, r3
     344:	001a      	movs	r2, r3
     346:	2301      	movs	r3, #1
     348:	4013      	ands	r3, r2
     34a:	1e5a      	subs	r2, r3, #1
     34c:	4193      	sbcs	r3, r2
     34e:	b2db      	uxtb	r3, r3
}
     350:	0018      	movs	r0, r3
     352:	46bd      	mov	sp, r7
     354:	b002      	add	sp, #8
     356:	bd80      	pop	{r7, pc}
     358:	41004000 	.word	0x41004000

0000035c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     35c:	b580      	push	{r7, lr}
     35e:	b082      	sub	sp, #8
     360:	af00      	add	r7, sp, #0
     362:	0002      	movs	r2, r0
     364:	6039      	str	r1, [r7, #0]
     366:	1dfb      	adds	r3, r7, #7
     368:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     36a:	1dfb      	adds	r3, r7, #7
     36c:	781b      	ldrb	r3, [r3, #0]
     36e:	2b01      	cmp	r3, #1
     370:	d00a      	beq.n	388 <system_apb_clock_set_mask+0x2c>
     372:	2b02      	cmp	r3, #2
     374:	d00f      	beq.n	396 <system_apb_clock_set_mask+0x3a>
     376:	2b00      	cmp	r3, #0
     378:	d114      	bne.n	3a4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     37a:	4b0e      	ldr	r3, [pc, #56]	; (3b4 <system_apb_clock_set_mask+0x58>)
     37c:	4a0d      	ldr	r2, [pc, #52]	; (3b4 <system_apb_clock_set_mask+0x58>)
     37e:	6991      	ldr	r1, [r2, #24]
     380:	683a      	ldr	r2, [r7, #0]
     382:	430a      	orrs	r2, r1
     384:	619a      	str	r2, [r3, #24]
			break;
     386:	e00f      	b.n	3a8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     388:	4b0a      	ldr	r3, [pc, #40]	; (3b4 <system_apb_clock_set_mask+0x58>)
     38a:	4a0a      	ldr	r2, [pc, #40]	; (3b4 <system_apb_clock_set_mask+0x58>)
     38c:	69d1      	ldr	r1, [r2, #28]
     38e:	683a      	ldr	r2, [r7, #0]
     390:	430a      	orrs	r2, r1
     392:	61da      	str	r2, [r3, #28]
			break;
     394:	e008      	b.n	3a8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     396:	4b07      	ldr	r3, [pc, #28]	; (3b4 <system_apb_clock_set_mask+0x58>)
     398:	4a06      	ldr	r2, [pc, #24]	; (3b4 <system_apb_clock_set_mask+0x58>)
     39a:	6a11      	ldr	r1, [r2, #32]
     39c:	683a      	ldr	r2, [r7, #0]
     39e:	430a      	orrs	r2, r1
     3a0:	621a      	str	r2, [r3, #32]
			break;
     3a2:	e001      	b.n	3a8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     3a4:	2317      	movs	r3, #23
     3a6:	e000      	b.n	3aa <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     3a8:	2300      	movs	r3, #0
}
     3aa:	0018      	movs	r0, r3
     3ac:	46bd      	mov	sp, r7
     3ae:	b002      	add	sp, #8
     3b0:	bd80      	pop	{r7, pc}
     3b2:	46c0      	nop			; (mov r8, r8)
     3b4:	40000400 	.word	0x40000400

000003b8 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     3b8:	b580      	push	{r7, lr}
     3ba:	b084      	sub	sp, #16
     3bc:	af00      	add	r7, sp, #0
     3be:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     3c0:	4b2f      	ldr	r3, [pc, #188]	; (480 <nvm_set_config+0xc8>)
     3c2:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     3c4:	2104      	movs	r1, #4
     3c6:	2001      	movs	r0, #1
     3c8:	4b2e      	ldr	r3, [pc, #184]	; (484 <nvm_set_config+0xcc>)
     3ca:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3cc:	68fb      	ldr	r3, [r7, #12]
     3ce:	2220      	movs	r2, #32
     3d0:	32ff      	adds	r2, #255	; 0xff
     3d2:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     3d4:	4b2c      	ldr	r3, [pc, #176]	; (488 <nvm_set_config+0xd0>)
     3d6:	4798      	blx	r3
     3d8:	0003      	movs	r3, r0
     3da:	001a      	movs	r2, r3
     3dc:	2301      	movs	r3, #1
     3de:	4053      	eors	r3, r2
     3e0:	b2db      	uxtb	r3, r3
     3e2:	2b00      	cmp	r3, #0
     3e4:	d001      	beq.n	3ea <nvm_set_config+0x32>
		return STATUS_BUSY;
     3e6:	2305      	movs	r3, #5
     3e8:	e045      	b.n	476 <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     3ea:	687b      	ldr	r3, [r7, #4]
     3ec:	781b      	ldrb	r3, [r3, #0]
     3ee:	021b      	lsls	r3, r3, #8
     3f0:	001a      	movs	r2, r3
     3f2:	23c0      	movs	r3, #192	; 0xc0
     3f4:	009b      	lsls	r3, r3, #2
     3f6:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	785b      	ldrb	r3, [r3, #1]
     3fc:	01db      	lsls	r3, r3, #7
     3fe:	0019      	movs	r1, r3
     400:	23ff      	movs	r3, #255	; 0xff
     402:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     404:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     406:	687b      	ldr	r3, [r7, #4]
     408:	789b      	ldrb	r3, [r3, #2]
     40a:	005b      	lsls	r3, r3, #1
     40c:	0019      	movs	r1, r3
     40e:	231e      	movs	r3, #30
     410:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     412:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     414:	687b      	ldr	r3, [r7, #4]
     416:	78db      	ldrb	r3, [r3, #3]
     418:	049b      	lsls	r3, r3, #18
     41a:	0019      	movs	r1, r3
     41c:	2380      	movs	r3, #128	; 0x80
     41e:	02db      	lsls	r3, r3, #11
     420:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     422:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     424:	687b      	ldr	r3, [r7, #4]
     426:	791b      	ldrb	r3, [r3, #4]
     428:	041b      	lsls	r3, r3, #16
     42a:	0019      	movs	r1, r3
     42c:	23c0      	movs	r3, #192	; 0xc0
     42e:	029b      	lsls	r3, r3, #10
     430:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     432:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     434:	68fb      	ldr	r3, [r7, #12]
     436:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     438:	68fb      	ldr	r3, [r7, #12]
     43a:	689b      	ldr	r3, [r3, #8]
     43c:	035b      	lsls	r3, r3, #13
     43e:	0f5b      	lsrs	r3, r3, #29
     440:	b2db      	uxtb	r3, r3
     442:	001a      	movs	r2, r3
     444:	2308      	movs	r3, #8
     446:	4093      	lsls	r3, r2
     448:	b29a      	uxth	r2, r3
     44a:	4b10      	ldr	r3, [pc, #64]	; (48c <nvm_set_config+0xd4>)
     44c:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     44e:	68fb      	ldr	r3, [r7, #12]
     450:	689b      	ldr	r3, [r3, #8]
     452:	b29a      	uxth	r2, r3
     454:	4b0d      	ldr	r3, [pc, #52]	; (48c <nvm_set_config+0xd4>)
     456:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     458:	687b      	ldr	r3, [r7, #4]
     45a:	785a      	ldrb	r2, [r3, #1]
     45c:	4b0b      	ldr	r3, [pc, #44]	; (48c <nvm_set_config+0xd4>)
     45e:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     460:	68fb      	ldr	r3, [r7, #12]
     462:	8b1b      	ldrh	r3, [r3, #24]
     464:	b29b      	uxth	r3, r3
     466:	001a      	movs	r2, r3
     468:	2380      	movs	r3, #128	; 0x80
     46a:	005b      	lsls	r3, r3, #1
     46c:	4013      	ands	r3, r2
     46e:	d001      	beq.n	474 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     470:	2310      	movs	r3, #16
     472:	e000      	b.n	476 <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     474:	2300      	movs	r3, #0
}
     476:	0018      	movs	r0, r3
     478:	46bd      	mov	sp, r7
     47a:	b004      	add	sp, #16
     47c:	bd80      	pop	{r7, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	41004000 	.word	0x41004000
     484:	0000035d 	.word	0x0000035d
     488:	00000335 	.word	0x00000335
     48c:	20000090 	.word	0x20000090

00000490 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     490:	b580      	push	{r7, lr}
     492:	b082      	sub	sp, #8
     494:	af00      	add	r7, sp, #0
     496:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     498:	687b      	ldr	r3, [r7, #4]
     49a:	7c1b      	ldrb	r3, [r3, #16]
     49c:	2b00      	cmp	r3, #0
     49e:	d00b      	beq.n	4b8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     4a0:	687b      	ldr	r3, [r7, #4]
     4a2:	689b      	ldr	r3, [r3, #8]
     4a4:	1c5a      	adds	r2, r3, #1
     4a6:	687b      	ldr	r3, [r7, #4]
     4a8:	68d9      	ldr	r1, [r3, #12]
     4aa:	4b10      	ldr	r3, [pc, #64]	; (4ec <advance_pointer+0x5c>)
     4ac:	0010      	movs	r0, r2
     4ae:	4798      	blx	r3
     4b0:	000b      	movs	r3, r1
     4b2:	001a      	movs	r2, r3
     4b4:	687b      	ldr	r3, [r7, #4]
     4b6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     4b8:	687b      	ldr	r3, [r7, #4]
     4ba:	685b      	ldr	r3, [r3, #4]
     4bc:	1c5a      	adds	r2, r3, #1
     4be:	687b      	ldr	r3, [r7, #4]
     4c0:	68d9      	ldr	r1, [r3, #12]
     4c2:	4b0a      	ldr	r3, [pc, #40]	; (4ec <advance_pointer+0x5c>)
     4c4:	0010      	movs	r0, r2
     4c6:	4798      	blx	r3
     4c8:	000b      	movs	r3, r1
     4ca:	001a      	movs	r2, r3
     4cc:	687b      	ldr	r3, [r7, #4]
     4ce:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     4d0:	687b      	ldr	r3, [r7, #4]
     4d2:	685a      	ldr	r2, [r3, #4]
     4d4:	687b      	ldr	r3, [r7, #4]
     4d6:	689b      	ldr	r3, [r3, #8]
     4d8:	1ad3      	subs	r3, r2, r3
     4da:	425a      	negs	r2, r3
     4dc:	4153      	adcs	r3, r2
     4de:	b2da      	uxtb	r2, r3
     4e0:	687b      	ldr	r3, [r7, #4]
     4e2:	741a      	strb	r2, [r3, #16]
 }
     4e4:	46c0      	nop			; (mov r8, r8)
     4e6:	46bd      	mov	sp, r7
     4e8:	b002      	add	sp, #8
     4ea:	bd80      	pop	{r7, pc}
     4ec:	00004341 	.word	0x00004341

000004f0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     4f0:	b580      	push	{r7, lr}
     4f2:	b082      	sub	sp, #8
     4f4:	af00      	add	r7, sp, #0
     4f6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     4f8:	687b      	ldr	r3, [r7, #4]
     4fa:	2200      	movs	r2, #0
     4fc:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     4fe:	687b      	ldr	r3, [r7, #4]
     500:	689b      	ldr	r3, [r3, #8]
     502:	1c5a      	adds	r2, r3, #1
     504:	687b      	ldr	r3, [r7, #4]
     506:	68d9      	ldr	r1, [r3, #12]
     508:	4b05      	ldr	r3, [pc, #20]	; (520 <retreat_pointer+0x30>)
     50a:	0010      	movs	r0, r2
     50c:	4798      	blx	r3
     50e:	000b      	movs	r3, r1
     510:	001a      	movs	r2, r3
     512:	687b      	ldr	r3, [r7, #4]
     514:	609a      	str	r2, [r3, #8]
 }
     516:	46c0      	nop			; (mov r8, r8)
     518:	46bd      	mov	sp, r7
     51a:	b002      	add	sp, #8
     51c:	bd80      	pop	{r7, pc}
     51e:	46c0      	nop			; (mov r8, r8)
     520:	00004341 	.word	0x00004341

00000524 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     524:	b580      	push	{r7, lr}
     526:	b084      	sub	sp, #16
     528:	af00      	add	r7, sp, #0
     52a:	6078      	str	r0, [r7, #4]
     52c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     52e:	2014      	movs	r0, #20
     530:	4b09      	ldr	r3, [pc, #36]	; (558 <circular_buf_init+0x34>)
     532:	4798      	blx	r3
     534:	0003      	movs	r3, r0
     536:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     538:	68fb      	ldr	r3, [r7, #12]
     53a:	687a      	ldr	r2, [r7, #4]
     53c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     53e:	68fb      	ldr	r3, [r7, #12]
     540:	683a      	ldr	r2, [r7, #0]
     542:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     544:	68fb      	ldr	r3, [r7, #12]
     546:	0018      	movs	r0, r3
     548:	4b04      	ldr	r3, [pc, #16]	; (55c <circular_buf_init+0x38>)
     54a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     54c:	68fb      	ldr	r3, [r7, #12]
 }
     54e:	0018      	movs	r0, r3
     550:	46bd      	mov	sp, r7
     552:	b004      	add	sp, #16
     554:	bd80      	pop	{r7, pc}
     556:	46c0      	nop			; (mov r8, r8)
     558:	000043e9 	.word	0x000043e9
     55c:	00000561 	.word	0x00000561

00000560 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     560:	b580      	push	{r7, lr}
     562:	b082      	sub	sp, #8
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     568:	687b      	ldr	r3, [r7, #4]
     56a:	2200      	movs	r2, #0
     56c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     56e:	687b      	ldr	r3, [r7, #4]
     570:	2200      	movs	r2, #0
     572:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     574:	687b      	ldr	r3, [r7, #4]
     576:	2200      	movs	r2, #0
     578:	741a      	strb	r2, [r3, #16]
 }
     57a:	46c0      	nop			; (mov r8, r8)
     57c:	46bd      	mov	sp, r7
     57e:	b002      	add	sp, #8
     580:	bd80      	pop	{r7, pc}
	...

00000584 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     584:	b580      	push	{r7, lr}
     586:	b082      	sub	sp, #8
     588:	af00      	add	r7, sp, #0
     58a:	6078      	str	r0, [r7, #4]
     58c:	000a      	movs	r2, r1
     58e:	1cfb      	adds	r3, r7, #3
     590:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     592:	687b      	ldr	r3, [r7, #4]
     594:	681a      	ldr	r2, [r3, #0]
     596:	687b      	ldr	r3, [r7, #4]
     598:	685b      	ldr	r3, [r3, #4]
     59a:	18d3      	adds	r3, r2, r3
     59c:	1cfa      	adds	r2, r7, #3
     59e:	7812      	ldrb	r2, [r2, #0]
     5a0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	0018      	movs	r0, r3
     5a6:	4b03      	ldr	r3, [pc, #12]	; (5b4 <circular_buf_put+0x30>)
     5a8:	4798      	blx	r3
 }
     5aa:	46c0      	nop			; (mov r8, r8)
     5ac:	46bd      	mov	sp, r7
     5ae:	b002      	add	sp, #8
     5b0:	bd80      	pop	{r7, pc}
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	00000491 	.word	0x00000491

000005b8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     5b8:	b580      	push	{r7, lr}
     5ba:	b084      	sub	sp, #16
     5bc:	af00      	add	r7, sp, #0
     5be:	6078      	str	r0, [r7, #4]
     5c0:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     5c2:	2301      	movs	r3, #1
     5c4:	425b      	negs	r3, r3
     5c6:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     5c8:	687b      	ldr	r3, [r7, #4]
     5ca:	0018      	movs	r0, r3
     5cc:	4b0d      	ldr	r3, [pc, #52]	; (604 <circular_buf_get+0x4c>)
     5ce:	4798      	blx	r3
     5d0:	0003      	movs	r3, r0
     5d2:	001a      	movs	r2, r3
     5d4:	2301      	movs	r3, #1
     5d6:	4053      	eors	r3, r2
     5d8:	b2db      	uxtb	r3, r3
     5da:	2b00      	cmp	r3, #0
     5dc:	d00d      	beq.n	5fa <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     5de:	687b      	ldr	r3, [r7, #4]
     5e0:	681a      	ldr	r2, [r3, #0]
     5e2:	687b      	ldr	r3, [r7, #4]
     5e4:	689b      	ldr	r3, [r3, #8]
     5e6:	18d3      	adds	r3, r2, r3
     5e8:	781a      	ldrb	r2, [r3, #0]
     5ea:	683b      	ldr	r3, [r7, #0]
     5ec:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	0018      	movs	r0, r3
     5f2:	4b05      	ldr	r3, [pc, #20]	; (608 <circular_buf_get+0x50>)
     5f4:	4798      	blx	r3

		 r = 0;
     5f6:	2300      	movs	r3, #0
     5f8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     5fa:	68fb      	ldr	r3, [r7, #12]
 }
     5fc:	0018      	movs	r0, r3
     5fe:	46bd      	mov	sp, r7
     600:	b004      	add	sp, #16
     602:	bd80      	pop	{r7, pc}
     604:	0000060d 	.word	0x0000060d
     608:	000004f1 	.word	0x000004f1

0000060c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     60c:	b580      	push	{r7, lr}
     60e:	b082      	sub	sp, #8
     610:	af00      	add	r7, sp, #0
     612:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     614:	687b      	ldr	r3, [r7, #4]
     616:	7c1b      	ldrb	r3, [r3, #16]
     618:	2201      	movs	r2, #1
     61a:	4053      	eors	r3, r2
     61c:	b2db      	uxtb	r3, r3
     61e:	2b00      	cmp	r3, #0
     620:	d007      	beq.n	632 <circular_buf_empty+0x26>
     622:	687b      	ldr	r3, [r7, #4]
     624:	685a      	ldr	r2, [r3, #4]
     626:	687b      	ldr	r3, [r7, #4]
     628:	689b      	ldr	r3, [r3, #8]
     62a:	429a      	cmp	r2, r3
     62c:	d101      	bne.n	632 <circular_buf_empty+0x26>
     62e:	2301      	movs	r3, #1
     630:	e000      	b.n	634 <circular_buf_empty+0x28>
     632:	2300      	movs	r3, #0
     634:	1c1a      	adds	r2, r3, #0
     636:	2301      	movs	r3, #1
     638:	4013      	ands	r3, r2
     63a:	b2db      	uxtb	r3, r3
 }
     63c:	0018      	movs	r0, r3
     63e:	46bd      	mov	sp, r7
     640:	b002      	add	sp, #8
     642:	bd80      	pop	{r7, pc}

00000644 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     644:	b580      	push	{r7, lr}
     646:	b082      	sub	sp, #8
     648:	af00      	add	r7, sp, #0
     64a:	0002      	movs	r2, r0
     64c:	1dfb      	adds	r3, r7, #7
     64e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     650:	4b06      	ldr	r3, [pc, #24]	; (66c <system_interrupt_enable+0x28>)
     652:	1dfa      	adds	r2, r7, #7
     654:	7812      	ldrb	r2, [r2, #0]
     656:	0011      	movs	r1, r2
     658:	221f      	movs	r2, #31
     65a:	400a      	ands	r2, r1
     65c:	2101      	movs	r1, #1
     65e:	4091      	lsls	r1, r2
     660:	000a      	movs	r2, r1
     662:	601a      	str	r2, [r3, #0]
}
     664:	46c0      	nop			; (mov r8, r8)
     666:	46bd      	mov	sp, r7
     668:	b002      	add	sp, #8
     66a:	bd80      	pop	{r7, pc}
     66c:	e000e100 	.word	0xe000e100

00000670 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     670:	b580      	push	{r7, lr}
     672:	b082      	sub	sp, #8
     674:	af00      	add	r7, sp, #0
     676:	0002      	movs	r2, r0
     678:	1dfb      	adds	r3, r7, #7
     67a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     67c:	4a07      	ldr	r2, [pc, #28]	; (69c <system_interrupt_disable+0x2c>)
     67e:	1dfb      	adds	r3, r7, #7
     680:	781b      	ldrb	r3, [r3, #0]
     682:	0019      	movs	r1, r3
     684:	231f      	movs	r3, #31
     686:	400b      	ands	r3, r1
     688:	2101      	movs	r1, #1
     68a:	4099      	lsls	r1, r3
     68c:	000b      	movs	r3, r1
     68e:	0019      	movs	r1, r3
     690:	2380      	movs	r3, #128	; 0x80
     692:	50d1      	str	r1, [r2, r3]
}
     694:	46c0      	nop			; (mov r8, r8)
     696:	46bd      	mov	sp, r7
     698:	b002      	add	sp, #8
     69a:	bd80      	pop	{r7, pc}
     69c:	e000e100 	.word	0xe000e100

000006a0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     6a0:	b580      	push	{r7, lr}
     6a2:	b084      	sub	sp, #16
     6a4:	af00      	add	r7, sp, #0
     6a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     6a8:	687b      	ldr	r3, [r7, #4]
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     6ae:	68fb      	ldr	r3, [r7, #12]
     6b0:	69db      	ldr	r3, [r3, #28]
     6b2:	1e5a      	subs	r2, r3, #1
     6b4:	4193      	sbcs	r3, r2
     6b6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     6b8:	0018      	movs	r0, r3
     6ba:	46bd      	mov	sp, r7
     6bc:	b004      	add	sp, #16
     6be:	bd80      	pop	{r7, pc}

000006c0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     6c0:	b580      	push	{r7, lr}
     6c2:	b082      	sub	sp, #8
     6c4:	af00      	add	r7, sp, #0
     6c6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     6c8:	46c0      	nop			; (mov r8, r8)
     6ca:	687b      	ldr	r3, [r7, #4]
     6cc:	0018      	movs	r0, r3
     6ce:	4b04      	ldr	r3, [pc, #16]	; (6e0 <_usart_wait_for_sync+0x20>)
     6d0:	4798      	blx	r3
     6d2:	1e03      	subs	r3, r0, #0
     6d4:	d1f9      	bne.n	6ca <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	46bd      	mov	sp, r7
     6da:	b002      	add	sp, #8
     6dc:	bd80      	pop	{r7, pc}
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	000006a1 	.word	0x000006a1

000006e4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     6e4:	b580      	push	{r7, lr}
     6e6:	b082      	sub	sp, #8
     6e8:	af00      	add	r7, sp, #0
     6ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     6ec:	687b      	ldr	r3, [r7, #4]
     6ee:	2280      	movs	r2, #128	; 0x80
     6f0:	05d2      	lsls	r2, r2, #23
     6f2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	2200      	movs	r2, #0
     6f8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     6fa:	687b      	ldr	r3, [r7, #4]
     6fc:	22ff      	movs	r2, #255	; 0xff
     6fe:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     700:	687b      	ldr	r3, [r7, #4]
     702:	2200      	movs	r2, #0
     704:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     706:	687b      	ldr	r3, [r7, #4]
     708:	2200      	movs	r2, #0
     70a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     70c:	687b      	ldr	r3, [r7, #4]
     70e:	2296      	movs	r2, #150	; 0x96
     710:	0192      	lsls	r2, r2, #6
     712:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     714:	687b      	ldr	r3, [r7, #4]
     716:	2224      	movs	r2, #36	; 0x24
     718:	2101      	movs	r1, #1
     71a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	2225      	movs	r2, #37	; 0x25
     720:	2101      	movs	r1, #1
     722:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     724:	687b      	ldr	r3, [r7, #4]
     726:	2226      	movs	r2, #38	; 0x26
     728:	2100      	movs	r1, #0
     72a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	2227      	movs	r2, #39	; 0x27
     730:	2100      	movs	r1, #0
     732:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     734:	687b      	ldr	r3, [r7, #4]
     736:	2200      	movs	r2, #0
     738:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     73a:	687b      	ldr	r3, [r7, #4]
     73c:	2288      	movs	r2, #136	; 0x88
     73e:	0352      	lsls	r2, r2, #13
     740:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     742:	687b      	ldr	r3, [r7, #4]
     744:	222c      	movs	r2, #44	; 0x2c
     746:	2100      	movs	r1, #0
     748:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	222d      	movs	r2, #45	; 0x2d
     74e:	2100      	movs	r1, #0
     750:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     752:	687b      	ldr	r3, [r7, #4]
     754:	2200      	movs	r2, #0
     756:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     758:	687b      	ldr	r3, [r7, #4]
     75a:	2200      	movs	r2, #0
     75c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     75e:	687b      	ldr	r3, [r7, #4]
     760:	2200      	movs	r2, #0
     762:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     764:	687b      	ldr	r3, [r7, #4]
     766:	2200      	movs	r2, #0
     768:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     76a:	687b      	ldr	r3, [r7, #4]
     76c:	2200      	movs	r2, #0
     76e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     770:	687b      	ldr	r3, [r7, #4]
     772:	2200      	movs	r2, #0
     774:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     776:	687b      	ldr	r3, [r7, #4]
     778:	2200      	movs	r2, #0
     77a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	2200      	movs	r2, #0
     780:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     782:	687b      	ldr	r3, [r7, #4]
     784:	2200      	movs	r2, #0
     786:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     788:	687b      	ldr	r3, [r7, #4]
     78a:	2200      	movs	r2, #0
     78c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     78e:	687b      	ldr	r3, [r7, #4]
     790:	2213      	movs	r2, #19
     792:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     794:	687b      	ldr	r3, [r7, #4]
     796:	2200      	movs	r2, #0
     798:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     79a:	46c0      	nop			; (mov r8, r8)
     79c:	46bd      	mov	sp, r7
     79e:	b002      	add	sp, #8
     7a0:	bd80      	pop	{r7, pc}
	...

000007a4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     7a4:	b580      	push	{r7, lr}
     7a6:	b084      	sub	sp, #16
     7a8:	af00      	add	r7, sp, #0
     7aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	0018      	movs	r0, r3
     7b8:	4b09      	ldr	r3, [pc, #36]	; (7e0 <usart_enable+0x3c>)
     7ba:	4798      	blx	r3
     7bc:	0003      	movs	r3, r0
     7be:	0018      	movs	r0, r3
     7c0:	4b08      	ldr	r3, [pc, #32]	; (7e4 <usart_enable+0x40>)
     7c2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	0018      	movs	r0, r3
     7c8:	4b07      	ldr	r3, [pc, #28]	; (7e8 <usart_enable+0x44>)
     7ca:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     7cc:	68fb      	ldr	r3, [r7, #12]
     7ce:	681b      	ldr	r3, [r3, #0]
     7d0:	2202      	movs	r2, #2
     7d2:	431a      	orrs	r2, r3
     7d4:	68fb      	ldr	r3, [r7, #12]
     7d6:	601a      	str	r2, [r3, #0]
}
     7d8:	46c0      	nop			; (mov r8, r8)
     7da:	46bd      	mov	sp, r7
     7dc:	b004      	add	sp, #16
     7de:	bd80      	pop	{r7, pc}
     7e0:	00001725 	.word	0x00001725
     7e4:	00000645 	.word	0x00000645
     7e8:	000006c1 	.word	0x000006c1

000007ec <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     7ec:	b580      	push	{r7, lr}
     7ee:	b084      	sub	sp, #16
     7f0:	af00      	add	r7, sp, #0
     7f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7f4:	687b      	ldr	r3, [r7, #4]
     7f6:	681b      	ldr	r3, [r3, #0]
     7f8:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     7fa:	687b      	ldr	r3, [r7, #4]
     7fc:	681b      	ldr	r3, [r3, #0]
     7fe:	0018      	movs	r0, r3
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <usart_disable+0x40>)
     802:	4798      	blx	r3
     804:	0003      	movs	r3, r0
     806:	0018      	movs	r0, r3
     808:	4b09      	ldr	r3, [pc, #36]	; (830 <usart_disable+0x44>)
     80a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     80c:	687b      	ldr	r3, [r7, #4]
     80e:	0018      	movs	r0, r3
     810:	4b08      	ldr	r3, [pc, #32]	; (834 <usart_disable+0x48>)
     812:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     814:	68fb      	ldr	r3, [r7, #12]
     816:	681b      	ldr	r3, [r3, #0]
     818:	2202      	movs	r2, #2
     81a:	4393      	bics	r3, r2
     81c:	001a      	movs	r2, r3
     81e:	68fb      	ldr	r3, [r7, #12]
     820:	601a      	str	r2, [r3, #0]
}
     822:	46c0      	nop			; (mov r8, r8)
     824:	46bd      	mov	sp, r7
     826:	b004      	add	sp, #16
     828:	bd80      	pop	{r7, pc}
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	00001725 	.word	0x00001725
     830:	00000671 	.word	0x00000671
     834:	000006c1 	.word	0x000006c1

00000838 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     838:	b580      	push	{r7, lr}
     83a:	b082      	sub	sp, #8
     83c:	af00      	add	r7, sp, #0
     83e:	6078      	str	r0, [r7, #4]
     840:	000a      	movs	r2, r1
     842:	1cfb      	adds	r3, r7, #3
     844:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     846:	687b      	ldr	r3, [r7, #4]
     848:	2231      	movs	r2, #49	; 0x31
     84a:	5c9b      	ldrb	r3, [r3, r2]
     84c:	b25a      	sxtb	r2, r3
     84e:	1cfb      	adds	r3, r7, #3
     850:	781b      	ldrb	r3, [r3, #0]
     852:	2101      	movs	r1, #1
     854:	4099      	lsls	r1, r3
     856:	000b      	movs	r3, r1
     858:	b25b      	sxtb	r3, r3
     85a:	4313      	orrs	r3, r2
     85c:	b25b      	sxtb	r3, r3
     85e:	b2d9      	uxtb	r1, r3
     860:	687b      	ldr	r3, [r7, #4]
     862:	2231      	movs	r2, #49	; 0x31
     864:	5499      	strb	r1, [r3, r2]

}
     866:	46c0      	nop			; (mov r8, r8)
     868:	46bd      	mov	sp, r7
     86a:	b002      	add	sp, #8
     86c:	bd80      	pop	{r7, pc}
	...

00000870 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     870:	b580      	push	{r7, lr}
     872:	b082      	sub	sp, #8
     874:	af00      	add	r7, sp, #0
     876:	6078      	str	r0, [r7, #4]
     878:	000a      	movs	r2, r1
     87a:	1cfb      	adds	r3, r7, #3
     87c:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     87e:	46c0      	nop			; (mov r8, r8)
     880:	1cfb      	adds	r3, r7, #3
     882:	781b      	ldrb	r3, [r3, #0]
     884:	b29a      	uxth	r2, r3
     886:	687b      	ldr	r3, [r7, #4]
     888:	0011      	movs	r1, r2
     88a:	0018      	movs	r0, r3
     88c:	4b04      	ldr	r3, [pc, #16]	; (8a0 <usart_serial_putchar+0x30>)
     88e:	4798      	blx	r3
     890:	1e03      	subs	r3, r0, #0
     892:	d1f5      	bne.n	880 <usart_serial_putchar+0x10>

	return STATUS_OK;
     894:	2300      	movs	r3, #0
}
     896:	0018      	movs	r0, r3
     898:	46bd      	mov	sp, r7
     89a:	b002      	add	sp, #8
     89c:	bd80      	pop	{r7, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	00002769 	.word	0x00002769

000008a4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     8a4:	b580      	push	{r7, lr}
     8a6:	b084      	sub	sp, #16
     8a8:	af00      	add	r7, sp, #0
     8aa:	6078      	str	r0, [r7, #4]
     8ac:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     8ae:	230e      	movs	r3, #14
     8b0:	18fb      	adds	r3, r7, r3
     8b2:	2200      	movs	r2, #0
     8b4:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	230e      	movs	r3, #14
     8ba:	18fa      	adds	r2, r7, r3
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	0011      	movs	r1, r2
     8c0:	0018      	movs	r0, r3
     8c2:	4b07      	ldr	r3, [pc, #28]	; (8e0 <usart_serial_getchar+0x3c>)
     8c4:	4798      	blx	r3
     8c6:	1e03      	subs	r3, r0, #0
     8c8:	d1f6      	bne.n	8b8 <usart_serial_getchar+0x14>

	*c = temp;
     8ca:	230e      	movs	r3, #14
     8cc:	18fb      	adds	r3, r7, r3
     8ce:	881b      	ldrh	r3, [r3, #0]
     8d0:	b2da      	uxtb	r2, r3
     8d2:	683b      	ldr	r3, [r7, #0]
     8d4:	701a      	strb	r2, [r3, #0]
}
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	46bd      	mov	sp, r7
     8da:	b004      	add	sp, #16
     8dc:	bd80      	pop	{r7, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	000027cd 	.word	0x000027cd

000008e4 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     8e4:	b580      	push	{r7, lr}
     8e6:	b084      	sub	sp, #16
     8e8:	af00      	add	r7, sp, #0
     8ea:	60f8      	str	r0, [r7, #12]
     8ec:	60b9      	str	r1, [r7, #8]
     8ee:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     8f0:	4b0d      	ldr	r3, [pc, #52]	; (928 <stdio_serial_init+0x44>)
     8f2:	68fa      	ldr	r2, [r7, #12]
     8f4:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     8f6:	4b0d      	ldr	r3, [pc, #52]	; (92c <stdio_serial_init+0x48>)
     8f8:	4a0d      	ldr	r2, [pc, #52]	; (930 <stdio_serial_init+0x4c>)
     8fa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     8fc:	4b0d      	ldr	r3, [pc, #52]	; (934 <stdio_serial_init+0x50>)
     8fe:	4a0e      	ldr	r2, [pc, #56]	; (938 <stdio_serial_init+0x54>)
     900:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     902:	4b0e      	ldr	r3, [pc, #56]	; (93c <stdio_serial_init+0x58>)
     904:	681b      	ldr	r3, [r3, #0]
     906:	689b      	ldr	r3, [r3, #8]
     908:	2100      	movs	r1, #0
     90a:	0018      	movs	r0, r3
     90c:	4b0c      	ldr	r3, [pc, #48]	; (940 <stdio_serial_init+0x5c>)
     90e:	4798      	blx	r3
	setbuf(stdin, NULL);
     910:	4b0a      	ldr	r3, [pc, #40]	; (93c <stdio_serial_init+0x58>)
     912:	681b      	ldr	r3, [r3, #0]
     914:	685b      	ldr	r3, [r3, #4]
     916:	2100      	movs	r1, #0
     918:	0018      	movs	r0, r3
     91a:	4b09      	ldr	r3, [pc, #36]	; (940 <stdio_serial_init+0x5c>)
     91c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	46bd      	mov	sp, r7
     922:	b004      	add	sp, #16
     924:	bd80      	pop	{r7, pc}
     926:	46c0      	nop			; (mov r8, r8)
     928:	200009b0 	.word	0x200009b0
     92c:	200009ac 	.word	0x200009ac
     930:	00000871 	.word	0x00000871
     934:	200009a8 	.word	0x200009a8
     938:	000008a5 	.word	0x000008a5
     93c:	2000000c 	.word	0x2000000c
     940:	00004581 	.word	0x00004581

00000944 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole()
{
     944:	b580      	push	{r7, lr}
     946:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     948:	2380      	movs	r3, #128	; 0x80
     94a:	00da      	lsls	r2, r3, #3
     94c:	4b0f      	ldr	r3, [pc, #60]	; (98c <InitializeSerialConsole+0x48>)
     94e:	0011      	movs	r1, r2
     950:	0018      	movs	r0, r3
     952:	4b0f      	ldr	r3, [pc, #60]	; (990 <InitializeSerialConsole+0x4c>)
     954:	4798      	blx	r3
     956:	0002      	movs	r2, r0
     958:	4b0e      	ldr	r3, [pc, #56]	; (994 <InitializeSerialConsole+0x50>)
     95a:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, TX_BUFFER_SIZE);
     95c:	2380      	movs	r3, #128	; 0x80
     95e:	00da      	lsls	r2, r3, #3
     960:	4b0d      	ldr	r3, [pc, #52]	; (998 <InitializeSerialConsole+0x54>)
     962:	0011      	movs	r1, r2
     964:	0018      	movs	r0, r3
     966:	4b0a      	ldr	r3, [pc, #40]	; (990 <InitializeSerialConsole+0x4c>)
     968:	4798      	blx	r3
     96a:	0002      	movs	r2, r0
     96c:	4b0b      	ldr	r3, [pc, #44]	; (99c <InitializeSerialConsole+0x58>)
     96e:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
     970:	4b0b      	ldr	r3, [pc, #44]	; (9a0 <InitializeSerialConsole+0x5c>)
     972:	4798      	blx	r3
	configure_usart_callbacks();
     974:	4b0b      	ldr	r3, [pc, #44]	; (9a4 <InitializeSerialConsole+0x60>)
     976:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     978:	490b      	ldr	r1, [pc, #44]	; (9a8 <InitializeSerialConsole+0x64>)
     97a:	4b0c      	ldr	r3, [pc, #48]	; (9ac <InitializeSerialConsole+0x68>)
     97c:	2201      	movs	r2, #1
     97e:	0018      	movs	r0, r3
     980:	4b0b      	ldr	r3, [pc, #44]	; (9b0 <InitializeSerialConsole+0x6c>)
     982:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
     984:	46c0      	nop			; (mov r8, r8)
     986:	46bd      	mov	sp, r7
     988:	bd80      	pop	{r7, pc}
     98a:	46c0      	nop			; (mov r8, r8)
     98c:	20000584 	.word	0x20000584
     990:	00000525 	.word	0x00000525
     994:	2000017c 	.word	0x2000017c
     998:	20000184 	.word	0x20000184
     99c:	20000988 	.word	0x20000988
     9a0:	00000a5d 	.word	0x00000a5d
     9a4:	00000ae5 	.word	0x00000ae5
     9a8:	20000180 	.word	0x20000180
     9ac:	20000148 	.word	0x20000148
     9b0:	00002a89 	.word	0x00002a89

000009b4 <DeinitializeSerialConsole>:


void DeinitializeSerialConsole()
{
     9b4:	b580      	push	{r7, lr}
     9b6:	af00      	add	r7, sp, #0
	usart_disable(&usart_instance);
     9b8:	4b03      	ldr	r3, [pc, #12]	; (9c8 <DeinitializeSerialConsole+0x14>)
     9ba:	0018      	movs	r0, r3
     9bc:	4b03      	ldr	r3, [pc, #12]	; (9cc <DeinitializeSerialConsole+0x18>)
     9be:	4798      	blx	r3
}
     9c0:	46c0      	nop			; (mov r8, r8)
     9c2:	46bd      	mov	sp, r7
     9c4:	bd80      	pop	{r7, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	20000148 	.word	0x20000148
     9cc:	000007ed 	.word	0x000007ed

000009d0 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
     9d0:	b580      	push	{r7, lr}
     9d2:	b084      	sub	sp, #16
     9d4:	af00      	add	r7, sp, #0
     9d6:	6078      	str	r0, [r7, #4]
	if(string != NULL)
     9d8:	687b      	ldr	r3, [r7, #4]
     9da:	2b00      	cmp	r3, #0
     9dc:	d02a      	beq.n	a34 <SerialConsoleWriteString+0x64>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
     9de:	2300      	movs	r3, #0
     9e0:	60fb      	str	r3, [r7, #12]
     9e2:	e00b      	b.n	9fc <SerialConsoleWriteString+0x2c>
		{
			circular_buf_put(cbufTx, string[iter]);
     9e4:	4b15      	ldr	r3, [pc, #84]	; (a3c <SerialConsoleWriteString+0x6c>)
     9e6:	6818      	ldr	r0, [r3, #0]
     9e8:	687a      	ldr	r2, [r7, #4]
     9ea:	68fb      	ldr	r3, [r7, #12]
     9ec:	18d3      	adds	r3, r2, r3
     9ee:	781b      	ldrb	r3, [r3, #0]
     9f0:	0019      	movs	r1, r3
     9f2:	4b13      	ldr	r3, [pc, #76]	; (a40 <SerialConsoleWriteString+0x70>)
     9f4:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
     9f6:	68fb      	ldr	r3, [r7, #12]
     9f8:	3301      	adds	r3, #1
     9fa:	60fb      	str	r3, [r7, #12]
     9fc:	687b      	ldr	r3, [r7, #4]
     9fe:	0018      	movs	r0, r3
     a00:	4b10      	ldr	r3, [pc, #64]	; (a44 <SerialConsoleWriteString+0x74>)
     a02:	4798      	blx	r3
     a04:	0002      	movs	r2, r0
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	429a      	cmp	r2, r3
     a0a:	d8eb      	bhi.n	9e4 <SerialConsoleWriteString+0x14>
		}
		
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     a0c:	4b0e      	ldr	r3, [pc, #56]	; (a48 <SerialConsoleWriteString+0x78>)
     a0e:	2101      	movs	r1, #1
     a10:	0018      	movs	r0, r3
     a12:	4b0e      	ldr	r3, [pc, #56]	; (a4c <SerialConsoleWriteString+0x7c>)
     a14:	4798      	blx	r3
     a16:	1e03      	subs	r3, r0, #0
     a18:	d10c      	bne.n	a34 <SerialConsoleWriteString+0x64>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     a1a:	4b08      	ldr	r3, [pc, #32]	; (a3c <SerialConsoleWriteString+0x6c>)
     a1c:	681b      	ldr	r3, [r3, #0]
     a1e:	4a0c      	ldr	r2, [pc, #48]	; (a50 <SerialConsoleWriteString+0x80>)
     a20:	0011      	movs	r1, r2
     a22:	0018      	movs	r0, r3
     a24:	4b0b      	ldr	r3, [pc, #44]	; (a54 <SerialConsoleWriteString+0x84>)
     a26:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     a28:	4909      	ldr	r1, [pc, #36]	; (a50 <SerialConsoleWriteString+0x80>)
     a2a:	4b07      	ldr	r3, [pc, #28]	; (a48 <SerialConsoleWriteString+0x78>)
     a2c:	2201      	movs	r2, #1
     a2e:	0018      	movs	r0, r3
     a30:	4b09      	ldr	r3, [pc, #36]	; (a58 <SerialConsoleWriteString+0x88>)
     a32:	4798      	blx	r3
		}
	}
}
     a34:	46c0      	nop			; (mov r8, r8)
     a36:	46bd      	mov	sp, r7
     a38:	b004      	add	sp, #16
     a3a:	bd80      	pop	{r7, pc}
     a3c:	20000988 	.word	0x20000988
     a40:	00000585 	.word	0x00000585
     a44:	000046ed 	.word	0x000046ed
     a48:	20000148 	.word	0x20000148
     a4c:	00002ad1 	.word	0x00002ad1
     a50:	20000984 	.word	0x20000984
     a54:	000005b9 	.word	0x000005b9
     a58:	00002a41 	.word	0x00002a41

00000a5c <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
     a5c:	b580      	push	{r7, lr}
     a5e:	b090      	sub	sp, #64	; 0x40
     a60:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
     a62:	003b      	movs	r3, r7
     a64:	0018      	movs	r0, r3
     a66:	4b17      	ldr	r3, [pc, #92]	; (ac4 <configure_usart+0x68>)
     a68:	4798      	blx	r3

	config_usart.baudrate    = 115200;
     a6a:	003b      	movs	r3, r7
     a6c:	22e1      	movs	r2, #225	; 0xe1
     a6e:	0252      	lsls	r2, r2, #9
     a70:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     a72:	003b      	movs	r3, r7
     a74:	22c4      	movs	r2, #196	; 0xc4
     a76:	0392      	lsls	r2, r2, #14
     a78:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     a7a:	003b      	movs	r3, r7
     a7c:	2201      	movs	r2, #1
     a7e:	4252      	negs	r2, r2
     a80:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     a82:	003b      	movs	r3, r7
     a84:	2201      	movs	r2, #1
     a86:	4252      	negs	r2, r2
     a88:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     a8a:	003b      	movs	r3, r7
     a8c:	4a0e      	ldr	r2, [pc, #56]	; (ac8 <configure_usart+0x6c>)
     a8e:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     a90:	003b      	movs	r3, r7
     a92:	4a0e      	ldr	r2, [pc, #56]	; (acc <configure_usart+0x70>)
     a94:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	003a      	movs	r2, r7
     a9a:	490d      	ldr	r1, [pc, #52]	; (ad0 <configure_usart+0x74>)
     a9c:	4b0d      	ldr	r3, [pc, #52]	; (ad4 <configure_usart+0x78>)
     a9e:	0018      	movs	r0, r3
     aa0:	4b0d      	ldr	r3, [pc, #52]	; (ad8 <configure_usart+0x7c>)
     aa2:	4798      	blx	r3
     aa4:	1e03      	subs	r3, r0, #0
     aa6:	d1f7      	bne.n	a98 <configure_usart+0x3c>
					  EDBG_CDC_MODULE, 
					  &config_usart) != STATUS_OK) 
	{

	}
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
     aa8:	003a      	movs	r2, r7
     aaa:	4909      	ldr	r1, [pc, #36]	; (ad0 <configure_usart+0x74>)
     aac:	4b09      	ldr	r3, [pc, #36]	; (ad4 <configure_usart+0x78>)
     aae:	0018      	movs	r0, r3
     ab0:	4b0a      	ldr	r3, [pc, #40]	; (adc <configure_usart+0x80>)
     ab2:	4798      	blx	r3
	usart_enable(&usart_instance);
     ab4:	4b07      	ldr	r3, [pc, #28]	; (ad4 <configure_usart+0x78>)
     ab6:	0018      	movs	r0, r3
     ab8:	4b09      	ldr	r3, [pc, #36]	; (ae0 <configure_usart+0x84>)
     aba:	4798      	blx	r3
}
     abc:	46c0      	nop			; (mov r8, r8)
     abe:	46bd      	mov	sp, r7
     ac0:	b010      	add	sp, #64	; 0x40
     ac2:	bd80      	pop	{r7, pc}
     ac4:	000006e5 	.word	0x000006e5
     ac8:	002a0003 	.word	0x002a0003
     acc:	002b0003 	.word	0x002b0003
     ad0:	42001800 	.word	0x42001800
     ad4:	20000148 	.word	0x20000148
     ad8:	000024f5 	.word	0x000024f5
     adc:	000008e5 	.word	0x000008e5
     ae0:	000007a5 	.word	0x000007a5

00000ae4 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
     ae4:	b580      	push	{r7, lr}
     ae6:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
     ae8:	490c      	ldr	r1, [pc, #48]	; (b1c <configure_usart_callbacks+0x38>)
     aea:	4b0d      	ldr	r3, [pc, #52]	; (b20 <configure_usart_callbacks+0x3c>)
     aec:	2200      	movs	r2, #0
     aee:	0018      	movs	r0, r3
     af0:	4b0c      	ldr	r3, [pc, #48]	; (b24 <configure_usart_callbacks+0x40>)
     af2:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
     af4:	490c      	ldr	r1, [pc, #48]	; (b28 <configure_usart_callbacks+0x44>)
     af6:	4b0a      	ldr	r3, [pc, #40]	; (b20 <configure_usart_callbacks+0x3c>)
     af8:	2201      	movs	r2, #1
     afa:	0018      	movs	r0, r3
     afc:	4b09      	ldr	r3, [pc, #36]	; (b24 <configure_usart_callbacks+0x40>)
     afe:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
     b00:	4b07      	ldr	r3, [pc, #28]	; (b20 <configure_usart_callbacks+0x3c>)
     b02:	2100      	movs	r1, #0
     b04:	0018      	movs	r0, r3
     b06:	4b09      	ldr	r3, [pc, #36]	; (b2c <configure_usart_callbacks+0x48>)
     b08:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
     b0a:	4b05      	ldr	r3, [pc, #20]	; (b20 <configure_usart_callbacks+0x3c>)
     b0c:	2101      	movs	r1, #1
     b0e:	0018      	movs	r0, r3
     b10:	4b06      	ldr	r3, [pc, #24]	; (b2c <configure_usart_callbacks+0x48>)
     b12:	4798      	blx	r3
}
     b14:	46c0      	nop			; (mov r8, r8)
     b16:	46bd      	mov	sp, r7
     b18:	bd80      	pop	{r7, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	00000ba1 	.word	0x00000ba1
     b20:	20000148 	.word	0x20000148
     b24:	000029f9 	.word	0x000029f9
     b28:	00000b31 	.word	0x00000b31
     b2c:	00000839 	.word	0x00000839

00000b30 <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
     b30:	b580      	push	{r7, lr}
     b32:	b084      	sub	sp, #16
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
	//Order Echo
	SerialConsoleWriteString(&latestRx);
     b38:	4b13      	ldr	r3, [pc, #76]	; (b88 <usart_read_callback+0x58>)
     b3a:	0018      	movs	r0, r3
     b3c:	4b13      	ldr	r3, [pc, #76]	; (b8c <usart_read_callback+0x5c>)
     b3e:	4798      	blx	r3
	if(latestRx == 0x08)
     b40:	4b11      	ldr	r3, [pc, #68]	; (b88 <usart_read_callback+0x58>)
     b42:	781b      	ldrb	r3, [r3, #0]
     b44:	2b08      	cmp	r3, #8
     b46:	d10c      	bne.n	b62 <usart_read_callback+0x32>
	{
	char a[3];
	a[0] = 0x20;
     b48:	230c      	movs	r3, #12
     b4a:	18fb      	adds	r3, r7, r3
     b4c:	2220      	movs	r2, #32
     b4e:	701a      	strb	r2, [r3, #0]
	a[1]= 0x08;
     b50:	230c      	movs	r3, #12
     b52:	18fb      	adds	r3, r7, r3
     b54:	2208      	movs	r2, #8
     b56:	705a      	strb	r2, [r3, #1]
	SerialConsoleWriteString(&a);
     b58:	230c      	movs	r3, #12
     b5a:	18fb      	adds	r3, r7, r3
     b5c:	0018      	movs	r0, r3
     b5e:	4b0b      	ldr	r3, [pc, #44]	; (b8c <usart_read_callback+0x5c>)
     b60:	4798      	blx	r3
	}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     b62:	4b0b      	ldr	r3, [pc, #44]	; (b90 <usart_read_callback+0x60>)
     b64:	681a      	ldr	r2, [r3, #0]
     b66:	4b08      	ldr	r3, [pc, #32]	; (b88 <usart_read_callback+0x58>)
     b68:	781b      	ldrb	r3, [r3, #0]
     b6a:	0019      	movs	r1, r3
     b6c:	0010      	movs	r0, r2
     b6e:	4b09      	ldr	r3, [pc, #36]	; (b94 <usart_read_callback+0x64>)
     b70:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     b72:	4905      	ldr	r1, [pc, #20]	; (b88 <usart_read_callback+0x58>)
     b74:	4b08      	ldr	r3, [pc, #32]	; (b98 <usart_read_callback+0x68>)
     b76:	2201      	movs	r2, #1
     b78:	0018      	movs	r0, r3
     b7a:	4b08      	ldr	r3, [pc, #32]	; (b9c <usart_read_callback+0x6c>)
     b7c:	4798      	blx	r3
}
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	46bd      	mov	sp, r7
     b82:	b004      	add	sp, #16
     b84:	bd80      	pop	{r7, pc}
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	20000180 	.word	0x20000180
     b8c:	000009d1 	.word	0x000009d1
     b90:	2000017c 	.word	0x2000017c
     b94:	00000585 	.word	0x00000585
     b98:	20000148 	.word	0x20000148
     b9c:	00002a89 	.word	0x00002a89

00000ba0 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     ba0:	b580      	push	{r7, lr}
     ba2:	b082      	sub	sp, #8
     ba4:	af00      	add	r7, sp, #0
     ba6:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     ba8:	4b09      	ldr	r3, [pc, #36]	; (bd0 <usart_write_callback+0x30>)
     baa:	681b      	ldr	r3, [r3, #0]
     bac:	4a09      	ldr	r2, [pc, #36]	; (bd4 <usart_write_callback+0x34>)
     bae:	0011      	movs	r1, r2
     bb0:	0018      	movs	r0, r3
     bb2:	4b09      	ldr	r3, [pc, #36]	; (bd8 <usart_write_callback+0x38>)
     bb4:	4798      	blx	r3
     bb6:	0003      	movs	r3, r0
     bb8:	3301      	adds	r3, #1
     bba:	d005      	beq.n	bc8 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     bbc:	4905      	ldr	r1, [pc, #20]	; (bd4 <usart_write_callback+0x34>)
     bbe:	4b07      	ldr	r3, [pc, #28]	; (bdc <usart_write_callback+0x3c>)
     bc0:	2201      	movs	r2, #1
     bc2:	0018      	movs	r0, r3
     bc4:	4b06      	ldr	r3, [pc, #24]	; (be0 <usart_write_callback+0x40>)
     bc6:	4798      	blx	r3
	}
	
}
     bc8:	46c0      	nop			; (mov r8, r8)
     bca:	46bd      	mov	sp, r7
     bcc:	b002      	add	sp, #8
     bce:	bd80      	pop	{r7, pc}
     bd0:	20000988 	.word	0x20000988
     bd4:	20000984 	.word	0x20000984
     bd8:	000005b9 	.word	0x000005b9
     bdc:	20000148 	.word	0x20000148
     be0:	00002a41 	.word	0x00002a41

00000be4 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
     be4:	b580      	push	{r7, lr}
     be6:	b082      	sub	sp, #8
     be8:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
     bea:	1dfb      	adds	r3, r7, #7
     bec:	2200      	movs	r2, #0
     bee:	701a      	strb	r2, [r3, #0]
     bf0:	e00c      	b.n	c0c <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     bf2:	1dfb      	adds	r3, r7, #7
     bf4:	781b      	ldrb	r3, [r3, #0]
     bf6:	4a0c      	ldr	r2, [pc, #48]	; (c28 <sd_mmc_init+0x44>)
     bf8:	015b      	lsls	r3, r3, #5
     bfa:	18d3      	adds	r3, r2, r3
     bfc:	330a      	adds	r3, #10
     bfe:	2204      	movs	r2, #4
     c00:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
     c02:	1dfb      	adds	r3, r7, #7
     c04:	781a      	ldrb	r2, [r3, #0]
     c06:	1dfb      	adds	r3, r7, #7
     c08:	3201      	adds	r2, #1
     c0a:	701a      	strb	r2, [r3, #0]
     c0c:	1dfb      	adds	r3, r7, #7
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	2b00      	cmp	r3, #0
     c12:	d0ee      	beq.n	bf2 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     c14:	4b05      	ldr	r3, [pc, #20]	; (c2c <sd_mmc_init+0x48>)
     c16:	22ff      	movs	r2, #255	; 0xff
     c18:	701a      	strb	r2, [r3, #0]
	driver_init();
     c1a:	4b05      	ldr	r3, [pc, #20]	; (c30 <sd_mmc_init+0x4c>)
     c1c:	4798      	blx	r3
}
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	46bd      	mov	sp, r7
     c22:	b002      	add	sp, #8
     c24:	bd80      	pop	{r7, pc}
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	20000098 	.word	0x20000098
     c2c:	200000b8 	.word	0x200000b8
     c30:	00000ef5 	.word	0x00000ef5

00000c34 <system_pinmux_get_group_from_gpio_pin>:
{
     c34:	b580      	push	{r7, lr}
     c36:	b084      	sub	sp, #16
     c38:	af00      	add	r7, sp, #0
     c3a:	0002      	movs	r2, r0
     c3c:	1dfb      	adds	r3, r7, #7
     c3e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     c40:	230f      	movs	r3, #15
     c42:	18fb      	adds	r3, r7, r3
     c44:	1dfa      	adds	r2, r7, #7
     c46:	7812      	ldrb	r2, [r2, #0]
     c48:	09d2      	lsrs	r2, r2, #7
     c4a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     c4c:	230e      	movs	r3, #14
     c4e:	18fb      	adds	r3, r7, r3
     c50:	1dfa      	adds	r2, r7, #7
     c52:	7812      	ldrb	r2, [r2, #0]
     c54:	0952      	lsrs	r2, r2, #5
     c56:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     c58:	4b0d      	ldr	r3, [pc, #52]	; (c90 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     c5a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     c5c:	230f      	movs	r3, #15
     c5e:	18fb      	adds	r3, r7, r3
     c60:	781b      	ldrb	r3, [r3, #0]
     c62:	2b00      	cmp	r3, #0
     c64:	d10f      	bne.n	c86 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     c66:	230f      	movs	r3, #15
     c68:	18fb      	adds	r3, r7, r3
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	009b      	lsls	r3, r3, #2
     c6e:	2210      	movs	r2, #16
     c70:	4694      	mov	ip, r2
     c72:	44bc      	add	ip, r7
     c74:	4463      	add	r3, ip
     c76:	3b08      	subs	r3, #8
     c78:	681a      	ldr	r2, [r3, #0]
     c7a:	230e      	movs	r3, #14
     c7c:	18fb      	adds	r3, r7, r3
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	01db      	lsls	r3, r3, #7
     c82:	18d3      	adds	r3, r2, r3
     c84:	e000      	b.n	c88 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     c86:	2300      	movs	r3, #0
}
     c88:	0018      	movs	r0, r3
     c8a:	46bd      	mov	sp, r7
     c8c:	b004      	add	sp, #16
     c8e:	bd80      	pop	{r7, pc}
     c90:	41004400 	.word	0x41004400

00000c94 <port_get_group_from_gpio_pin>:
{
     c94:	b580      	push	{r7, lr}
     c96:	b082      	sub	sp, #8
     c98:	af00      	add	r7, sp, #0
     c9a:	0002      	movs	r2, r0
     c9c:	1dfb      	adds	r3, r7, #7
     c9e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     ca0:	1dfb      	adds	r3, r7, #7
     ca2:	781b      	ldrb	r3, [r3, #0]
     ca4:	0018      	movs	r0, r3
     ca6:	4b03      	ldr	r3, [pc, #12]	; (cb4 <port_get_group_from_gpio_pin+0x20>)
     ca8:	4798      	blx	r3
     caa:	0003      	movs	r3, r0
}
     cac:	0018      	movs	r0, r3
     cae:	46bd      	mov	sp, r7
     cb0:	b002      	add	sp, #8
     cb2:	bd80      	pop	{r7, pc}
     cb4:	00000c35 	.word	0x00000c35

00000cb8 <port_get_config_defaults>:
{
     cb8:	b580      	push	{r7, lr}
     cba:	b082      	sub	sp, #8
     cbc:	af00      	add	r7, sp, #0
     cbe:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
     cc0:	687b      	ldr	r3, [r7, #4]
     cc2:	2200      	movs	r2, #0
     cc4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	2201      	movs	r2, #1
     cca:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	2200      	movs	r2, #0
     cd0:	709a      	strb	r2, [r3, #2]
}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	46bd      	mov	sp, r7
     cd6:	b002      	add	sp, #8
     cd8:	bd80      	pop	{r7, pc}
	...

00000cdc <port_pin_set_output_level>:
{
     cdc:	b580      	push	{r7, lr}
     cde:	b084      	sub	sp, #16
     ce0:	af00      	add	r7, sp, #0
     ce2:	0002      	movs	r2, r0
     ce4:	1dfb      	adds	r3, r7, #7
     ce6:	701a      	strb	r2, [r3, #0]
     ce8:	1dbb      	adds	r3, r7, #6
     cea:	1c0a      	adds	r2, r1, #0
     cec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     cee:	1dfb      	adds	r3, r7, #7
     cf0:	781b      	ldrb	r3, [r3, #0]
     cf2:	0018      	movs	r0, r3
     cf4:	4b0d      	ldr	r3, [pc, #52]	; (d2c <port_pin_set_output_level+0x50>)
     cf6:	4798      	blx	r3
     cf8:	0003      	movs	r3, r0
     cfa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     cfc:	1dfb      	adds	r3, r7, #7
     cfe:	781b      	ldrb	r3, [r3, #0]
     d00:	221f      	movs	r2, #31
     d02:	4013      	ands	r3, r2
     d04:	2201      	movs	r2, #1
     d06:	409a      	lsls	r2, r3
     d08:	0013      	movs	r3, r2
     d0a:	60bb      	str	r3, [r7, #8]
	if (level) {
     d0c:	1dbb      	adds	r3, r7, #6
     d0e:	781b      	ldrb	r3, [r3, #0]
     d10:	2b00      	cmp	r3, #0
     d12:	d003      	beq.n	d1c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     d14:	68fb      	ldr	r3, [r7, #12]
     d16:	68ba      	ldr	r2, [r7, #8]
     d18:	619a      	str	r2, [r3, #24]
}
     d1a:	e002      	b.n	d22 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     d1c:	68fb      	ldr	r3, [r7, #12]
     d1e:	68ba      	ldr	r2, [r7, #8]
     d20:	615a      	str	r2, [r3, #20]
}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	46bd      	mov	sp, r7
     d26:	b004      	add	sp, #16
     d28:	bd80      	pop	{r7, pc}
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	00000c95 	.word	0x00000c95

00000d30 <system_interrupt_enable>:
{
     d30:	b580      	push	{r7, lr}
     d32:	b082      	sub	sp, #8
     d34:	af00      	add	r7, sp, #0
     d36:	0002      	movs	r2, r0
     d38:	1dfb      	adds	r3, r7, #7
     d3a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     d3c:	4b06      	ldr	r3, [pc, #24]	; (d58 <system_interrupt_enable+0x28>)
     d3e:	1dfa      	adds	r2, r7, #7
     d40:	7812      	ldrb	r2, [r2, #0]
     d42:	0011      	movs	r1, r2
     d44:	221f      	movs	r2, #31
     d46:	400a      	ands	r2, r1
     d48:	2101      	movs	r1, #1
     d4a:	4091      	lsls	r1, r2
     d4c:	000a      	movs	r2, r1
     d4e:	601a      	str	r2, [r3, #0]
}
     d50:	46c0      	nop			; (mov r8, r8)
     d52:	46bd      	mov	sp, r7
     d54:	b002      	add	sp, #8
     d56:	bd80      	pop	{r7, pc}
     d58:	e000e100 	.word	0xe000e100

00000d5c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     d5c:	b580      	push	{r7, lr}
     d5e:	b084      	sub	sp, #16
     d60:	af00      	add	r7, sp, #0
     d62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     d64:	687b      	ldr	r3, [r7, #4]
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     d6a:	68fb      	ldr	r3, [r7, #12]
     d6c:	69db      	ldr	r3, [r3, #28]
     d6e:	1e5a      	subs	r2, r3, #1
     d70:	4193      	sbcs	r3, r2
     d72:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     d74:	0018      	movs	r0, r3
     d76:	46bd      	mov	sp, r7
     d78:	b004      	add	sp, #16
     d7a:	bd80      	pop	{r7, pc}

00000d7c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     d7c:	b580      	push	{r7, lr}
     d7e:	b082      	sub	sp, #8
     d80:	af00      	add	r7, sp, #0
     d82:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     d84:	687b      	ldr	r3, [r7, #4]
     d86:	2201      	movs	r2, #1
     d88:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     d8a:	687b      	ldr	r3, [r7, #4]
     d8c:	2200      	movs	r2, #0
     d8e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	2200      	movs	r2, #0
     d94:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	22c0      	movs	r2, #192	; 0xc0
     d9a:	0392      	lsls	r2, r2, #14
     d9c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	2200      	movs	r2, #0
     da2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     da4:	687b      	ldr	r3, [r7, #4]
     da6:	2200      	movs	r2, #0
     da8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     daa:	687b      	ldr	r3, [r7, #4]
     dac:	2201      	movs	r2, #1
     dae:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	2201      	movs	r2, #1
     db4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     db6:	687b      	ldr	r3, [r7, #4]
     db8:	2200      	movs	r2, #0
     dba:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     dbc:	687b      	ldr	r3, [r7, #4]
     dbe:	2224      	movs	r2, #36	; 0x24
     dc0:	2100      	movs	r1, #0
     dc2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     dc4:	687b      	ldr	r3, [r7, #4]
     dc6:	3318      	adds	r3, #24
     dc8:	220c      	movs	r2, #12
     dca:	2100      	movs	r1, #0
     dcc:	0018      	movs	r0, r3
     dce:	4b0a      	ldr	r3, [pc, #40]	; (df8 <spi_get_config_defaults+0x7c>)
     dd0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     dd2:	687b      	ldr	r3, [r7, #4]
     dd4:	4a09      	ldr	r2, [pc, #36]	; (dfc <spi_get_config_defaults+0x80>)
     dd6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     dd8:	687b      	ldr	r3, [r7, #4]
     dda:	2200      	movs	r2, #0
     ddc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	2200      	movs	r2, #0
     de2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     de4:	687b      	ldr	r3, [r7, #4]
     de6:	2200      	movs	r2, #0
     de8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     dea:	687b      	ldr	r3, [r7, #4]
     dec:	2200      	movs	r2, #0
     dee:	635a      	str	r2, [r3, #52]	; 0x34

};
     df0:	46c0      	nop			; (mov r8, r8)
     df2:	46bd      	mov	sp, r7
     df4:	b002      	add	sp, #8
     df6:	bd80      	pop	{r7, pc}
     df8:	000043fd 	.word	0x000043fd
     dfc:	000186a0 	.word	0x000186a0

00000e00 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
     e00:	b580      	push	{r7, lr}
     e02:	b082      	sub	sp, #8
     e04:	af00      	add	r7, sp, #0
     e06:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
     e08:	687b      	ldr	r3, [r7, #4]
     e0a:	220a      	movs	r2, #10
     e0c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	2200      	movs	r2, #0
     e12:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
     e14:	687b      	ldr	r3, [r7, #4]
     e16:	2200      	movs	r2, #0
     e18:	709a      	strb	r2, [r3, #2]
}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	46bd      	mov	sp, r7
     e1e:	b002      	add	sp, #8
     e20:	bd80      	pop	{r7, pc}
	...

00000e24 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
     e24:	b580      	push	{r7, lr}
     e26:	b084      	sub	sp, #16
     e28:	af00      	add	r7, sp, #0
     e2a:	6078      	str	r0, [r7, #4]
     e2c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     e2e:	683b      	ldr	r3, [r7, #0]
     e30:	781a      	ldrb	r2, [r3, #0]
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
     e36:	683b      	ldr	r3, [r7, #0]
     e38:	785a      	ldrb	r2, [r3, #1]
     e3a:	687b      	ldr	r3, [r7, #4]
     e3c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
     e3e:	683b      	ldr	r3, [r7, #0]
     e40:	789a      	ldrb	r2, [r3, #2]
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     e46:	230c      	movs	r3, #12
     e48:	18fb      	adds	r3, r7, r3
     e4a:	0018      	movs	r0, r3
     e4c:	4b0b      	ldr	r3, [pc, #44]	; (e7c <spi_attach_slave+0x58>)
     e4e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     e50:	230c      	movs	r3, #12
     e52:	18fb      	adds	r3, r7, r3
     e54:	2201      	movs	r2, #1
     e56:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     e58:	687b      	ldr	r3, [r7, #4]
     e5a:	781b      	ldrb	r3, [r3, #0]
     e5c:	220c      	movs	r2, #12
     e5e:	18ba      	adds	r2, r7, r2
     e60:	0011      	movs	r1, r2
     e62:	0018      	movs	r0, r3
     e64:	4b06      	ldr	r3, [pc, #24]	; (e80 <spi_attach_slave+0x5c>)
     e66:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     e68:	687b      	ldr	r3, [r7, #4]
     e6a:	781b      	ldrb	r3, [r3, #0]
     e6c:	2101      	movs	r1, #1
     e6e:	0018      	movs	r0, r3
     e70:	4b04      	ldr	r3, [pc, #16]	; (e84 <spi_attach_slave+0x60>)
     e72:	4798      	blx	r3
}
     e74:	46c0      	nop			; (mov r8, r8)
     e76:	46bd      	mov	sp, r7
     e78:	b004      	add	sp, #16
     e7a:	bd80      	pop	{r7, pc}
     e7c:	00000cb9 	.word	0x00000cb9
     e80:	00001079 	.word	0x00001079
     e84:	00000cdd 	.word	0x00000cdd

00000e88 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     e88:	b580      	push	{r7, lr}
     e8a:	b084      	sub	sp, #16
     e8c:	af00      	add	r7, sp, #0
     e8e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     e90:	687b      	ldr	r3, [r7, #4]
     e92:	681b      	ldr	r3, [r3, #0]
     e94:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	681b      	ldr	r3, [r3, #0]
     e9a:	0018      	movs	r0, r3
     e9c:	4b0b      	ldr	r3, [pc, #44]	; (ecc <spi_enable+0x44>)
     e9e:	4798      	blx	r3
     ea0:	0003      	movs	r3, r0
     ea2:	0018      	movs	r0, r3
     ea4:	4b0a      	ldr	r3, [pc, #40]	; (ed0 <spi_enable+0x48>)
     ea6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     ea8:	46c0      	nop			; (mov r8, r8)
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	0018      	movs	r0, r3
     eae:	4b09      	ldr	r3, [pc, #36]	; (ed4 <spi_enable+0x4c>)
     eb0:	4798      	blx	r3
     eb2:	1e03      	subs	r3, r0, #0
     eb4:	d1f9      	bne.n	eaa <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     eb6:	68fb      	ldr	r3, [r7, #12]
     eb8:	681b      	ldr	r3, [r3, #0]
     eba:	2202      	movs	r2, #2
     ebc:	431a      	orrs	r2, r3
     ebe:	68fb      	ldr	r3, [r7, #12]
     ec0:	601a      	str	r2, [r3, #0]
}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	46bd      	mov	sp, r7
     ec6:	b004      	add	sp, #16
     ec8:	bd80      	pop	{r7, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	00001725 	.word	0x00001725
     ed0:	00000d31 	.word	0x00000d31
     ed4:	00000d5d 	.word	0x00000d5d

00000ed8 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
     ed8:	b580      	push	{r7, lr}
     eda:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
     edc:	4b03      	ldr	r3, [pc, #12]	; (eec <sd_mmc_deinit+0x14>)
     ede:	0018      	movs	r0, r3
     ee0:	4b03      	ldr	r3, [pc, #12]	; (ef0 <sd_mmc_deinit+0x18>)
     ee2:	4798      	blx	r3
}
     ee4:	46c0      	nop			; (mov r8, r8)
     ee6:	46bd      	mov	sp, r7
     ee8:	bd80      	pop	{r7, pc}
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	200000bc 	.word	0x200000bc
     ef0:	00001961 	.word	0x00001961

00000ef4 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
     ef4:	b580      	push	{r7, lr}
     ef6:	b090      	sub	sp, #64	; 0x40
     ef8:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
     efa:	4b1f      	ldr	r3, [pc, #124]	; (f78 <sd_mmc_spi_init+0x84>)
     efc:	2200      	movs	r2, #0
     efe:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     f00:	233c      	movs	r3, #60	; 0x3c
     f02:	18fb      	adds	r3, r7, r3
     f04:	0018      	movs	r0, r3
     f06:	4b1d      	ldr	r3, [pc, #116]	; (f7c <sd_mmc_spi_init+0x88>)
     f08:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
     f0a:	1d3b      	adds	r3, r7, #4
     f0c:	0018      	movs	r0, r3
     f0e:	4b1c      	ldr	r3, [pc, #112]	; (f80 <sd_mmc_spi_init+0x8c>)
     f10:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
     f12:	1d3b      	adds	r3, r7, #4
     f14:	2280      	movs	r2, #128	; 0x80
     f16:	0252      	lsls	r2, r2, #9
     f18:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
     f1a:	1d3b      	adds	r3, r7, #4
     f1c:	4a19      	ldr	r2, [pc, #100]	; (f84 <sd_mmc_spi_init+0x90>)
     f1e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
     f20:	1d3b      	adds	r3, r7, #4
     f22:	4a19      	ldr	r2, [pc, #100]	; (f88 <sd_mmc_spi_init+0x94>)
     f24:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
     f26:	1d3b      	adds	r3, r7, #4
     f28:	4a18      	ldr	r2, [pc, #96]	; (f8c <sd_mmc_spi_init+0x98>)
     f2a:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
     f2c:	1d3b      	adds	r3, r7, #4
     f2e:	4a18      	ldr	r2, [pc, #96]	; (f90 <sd_mmc_spi_init+0x9c>)
     f30:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
     f32:	1d3b      	adds	r3, r7, #4
     f34:	2224      	movs	r2, #36	; 0x24
     f36:	2100      	movs	r1, #0
     f38:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
     f3a:	1d3b      	adds	r3, r7, #4
     f3c:	4a15      	ldr	r2, [pc, #84]	; (f94 <sd_mmc_spi_init+0xa0>)
     f3e:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
     f40:	1d3a      	adds	r2, r7, #4
     f42:	4915      	ldr	r1, [pc, #84]	; (f98 <sd_mmc_spi_init+0xa4>)
     f44:	4b15      	ldr	r3, [pc, #84]	; (f9c <sd_mmc_spi_init+0xa8>)
     f46:	0018      	movs	r0, r3
     f48:	4b15      	ldr	r3, [pc, #84]	; (fa0 <sd_mmc_spi_init+0xac>)
     f4a:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
     f4c:	4b13      	ldr	r3, [pc, #76]	; (f9c <sd_mmc_spi_init+0xa8>)
     f4e:	0018      	movs	r0, r3
     f50:	4b14      	ldr	r3, [pc, #80]	; (fa4 <sd_mmc_spi_init+0xb0>)
     f52:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
     f54:	4b14      	ldr	r3, [pc, #80]	; (fa8 <sd_mmc_spi_init+0xb4>)
     f56:	0018      	movs	r0, r3
     f58:	4b14      	ldr	r3, [pc, #80]	; (fac <sd_mmc_spi_init+0xb8>)
     f5a:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
     f5c:	4b14      	ldr	r3, [pc, #80]	; (fb0 <sd_mmc_spi_init+0xbc>)
     f5e:	781a      	ldrb	r2, [r3, #0]
     f60:	4b11      	ldr	r3, [pc, #68]	; (fa8 <sd_mmc_spi_init+0xb4>)
     f62:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
     f64:	4a10      	ldr	r2, [pc, #64]	; (fa8 <sd_mmc_spi_init+0xb4>)
     f66:	4b13      	ldr	r3, [pc, #76]	; (fb4 <sd_mmc_spi_init+0xc0>)
     f68:	0011      	movs	r1, r2
     f6a:	0018      	movs	r0, r3
     f6c:	4b12      	ldr	r3, [pc, #72]	; (fb8 <sd_mmc_spi_init+0xc4>)
     f6e:	4798      	blx	r3
}
     f70:	46c0      	nop			; (mov r8, r8)
     f72:	46bd      	mov	sp, r7
     f74:	b010      	add	sp, #64	; 0x40
     f76:	bd80      	pop	{r7, pc}
     f78:	200000ff 	.word	0x200000ff
     f7c:	00000cb9 	.word	0x00000cb9
     f80:	00000d7d 	.word	0x00000d7d
     f84:	00100002 	.word	0x00100002
     f88:	00110002 	.word	0x00110002
     f8c:	00120002 	.word	0x00120002
     f90:	00130002 	.word	0x00130002
     f94:	00061a80 	.word	0x00061a80
     f98:	42000c00 	.word	0x42000c00
     f9c:	200000bc 	.word	0x200000bc
     fa0:	00001bb1 	.word	0x00001bb1
     fa4:	00000e89 	.word	0x00000e89
     fa8:	200000fc 	.word	0x200000fc
     fac:	00000e01 	.word	0x00000e01
     fb0:	20000008 	.word	0x20000008
     fb4:	200000f8 	.word	0x200000f8
     fb8:	00000e25 	.word	0x00000e25

00000fbc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
     fbc:	b580      	push	{r7, lr}
     fbe:	b082      	sub	sp, #8
     fc0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
     fc2:	4b10      	ldr	r3, [pc, #64]	; (1004 <cpu_irq_enter_critical+0x48>)
     fc4:	681b      	ldr	r3, [r3, #0]
     fc6:	2b00      	cmp	r3, #0
     fc8:	d112      	bne.n	ff0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     fca:	f3ef 8310 	mrs	r3, PRIMASK
     fce:	607b      	str	r3, [r7, #4]
  return(result);
     fd0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
     fd2:	2b00      	cmp	r3, #0
     fd4:	d109      	bne.n	fea <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
     fd6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     fd8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     fdc:	4b0a      	ldr	r3, [pc, #40]	; (1008 <cpu_irq_enter_critical+0x4c>)
     fde:	2200      	movs	r2, #0
     fe0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     fe2:	4b0a      	ldr	r3, [pc, #40]	; (100c <cpu_irq_enter_critical+0x50>)
     fe4:	2201      	movs	r2, #1
     fe6:	701a      	strb	r2, [r3, #0]
     fe8:	e002      	b.n	ff0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     fea:	4b08      	ldr	r3, [pc, #32]	; (100c <cpu_irq_enter_critical+0x50>)
     fec:	2200      	movs	r2, #0
     fee:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     ff0:	4b04      	ldr	r3, [pc, #16]	; (1004 <cpu_irq_enter_critical+0x48>)
     ff2:	681b      	ldr	r3, [r3, #0]
     ff4:	1c5a      	adds	r2, r3, #1
     ff6:	4b03      	ldr	r3, [pc, #12]	; (1004 <cpu_irq_enter_critical+0x48>)
     ff8:	601a      	str	r2, [r3, #0]
}
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	46bd      	mov	sp, r7
     ffe:	b002      	add	sp, #8
    1000:	bd80      	pop	{r7, pc}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	20000100 	.word	0x20000100
    1008:	20000009 	.word	0x20000009
    100c:	20000104 	.word	0x20000104

00001010 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    1010:	b580      	push	{r7, lr}
    1012:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1014:	4b0b      	ldr	r3, [pc, #44]	; (1044 <cpu_irq_leave_critical+0x34>)
    1016:	681b      	ldr	r3, [r3, #0]
    1018:	1e5a      	subs	r2, r3, #1
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <cpu_irq_leave_critical+0x34>)
    101c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    101e:	4b09      	ldr	r3, [pc, #36]	; (1044 <cpu_irq_leave_critical+0x34>)
    1020:	681b      	ldr	r3, [r3, #0]
    1022:	2b00      	cmp	r3, #0
    1024:	d10a      	bne.n	103c <cpu_irq_leave_critical+0x2c>
    1026:	4b08      	ldr	r3, [pc, #32]	; (1048 <cpu_irq_leave_critical+0x38>)
    1028:	781b      	ldrb	r3, [r3, #0]
    102a:	b2db      	uxtb	r3, r3
    102c:	2b00      	cmp	r3, #0
    102e:	d005      	beq.n	103c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    1030:	4b06      	ldr	r3, [pc, #24]	; (104c <cpu_irq_leave_critical+0x3c>)
    1032:	2201      	movs	r2, #1
    1034:	701a      	strb	r2, [r3, #0]
    1036:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    103a:	b662      	cpsie	i
	}
}
    103c:	46c0      	nop			; (mov r8, r8)
    103e:	46bd      	mov	sp, r7
    1040:	bd80      	pop	{r7, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	20000100 	.word	0x20000100
    1048:	20000104 	.word	0x20000104
    104c:	20000009 	.word	0x20000009

00001050 <system_pinmux_get_config_defaults>:
{
    1050:	b580      	push	{r7, lr}
    1052:	b082      	sub	sp, #8
    1054:	af00      	add	r7, sp, #0
    1056:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	2280      	movs	r2, #128	; 0x80
    105c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	2200      	movs	r2, #0
    1062:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1064:	687b      	ldr	r3, [r7, #4]
    1066:	2201      	movs	r2, #1
    1068:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	2200      	movs	r2, #0
    106e:	70da      	strb	r2, [r3, #3]
}
    1070:	46c0      	nop			; (mov r8, r8)
    1072:	46bd      	mov	sp, r7
    1074:	b002      	add	sp, #8
    1076:	bd80      	pop	{r7, pc}

00001078 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1078:	b580      	push	{r7, lr}
    107a:	b084      	sub	sp, #16
    107c:	af00      	add	r7, sp, #0
    107e:	0002      	movs	r2, r0
    1080:	6039      	str	r1, [r7, #0]
    1082:	1dfb      	adds	r3, r7, #7
    1084:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    1086:	230c      	movs	r3, #12
    1088:	18fb      	adds	r3, r7, r3
    108a:	0018      	movs	r0, r3
    108c:	4b10      	ldr	r3, [pc, #64]	; (10d0 <port_pin_set_config+0x58>)
    108e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    1090:	230c      	movs	r3, #12
    1092:	18fb      	adds	r3, r7, r3
    1094:	2280      	movs	r2, #128	; 0x80
    1096:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1098:	683b      	ldr	r3, [r7, #0]
    109a:	781a      	ldrb	r2, [r3, #0]
    109c:	230c      	movs	r3, #12
    109e:	18fb      	adds	r3, r7, r3
    10a0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    10a2:	683b      	ldr	r3, [r7, #0]
    10a4:	785a      	ldrb	r2, [r3, #1]
    10a6:	230c      	movs	r3, #12
    10a8:	18fb      	adds	r3, r7, r3
    10aa:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    10ac:	683b      	ldr	r3, [r7, #0]
    10ae:	789a      	ldrb	r2, [r3, #2]
    10b0:	230c      	movs	r3, #12
    10b2:	18fb      	adds	r3, r7, r3
    10b4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    10b6:	230c      	movs	r3, #12
    10b8:	18fa      	adds	r2, r7, r3
    10ba:	1dfb      	adds	r3, r7, #7
    10bc:	781b      	ldrb	r3, [r3, #0]
    10be:	0011      	movs	r1, r2
    10c0:	0018      	movs	r0, r3
    10c2:	4b04      	ldr	r3, [pc, #16]	; (10d4 <port_pin_set_config+0x5c>)
    10c4:	4798      	blx	r3
}
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	46bd      	mov	sp, r7
    10ca:	b004      	add	sp, #16
    10cc:	bd80      	pop	{r7, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	00001051 	.word	0x00001051
    10d4:	00003d81 	.word	0x00003d81

000010d8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    10d8:	b580      	push	{r7, lr}
    10da:	b082      	sub	sp, #8
    10dc:	af00      	add	r7, sp, #0
    10de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	2200      	movs	r2, #0
    10e4:	701a      	strb	r2, [r3, #0]
}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	46bd      	mov	sp, r7
    10ea:	b002      	add	sp, #8
    10ec:	bd80      	pop	{r7, pc}

000010ee <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    10ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    10f0:	b08d      	sub	sp, #52	; 0x34
    10f2:	af00      	add	r7, sp, #0
    10f4:	60b8      	str	r0, [r7, #8]
    10f6:	60f9      	str	r1, [r7, #12]
    10f8:	603a      	str	r2, [r7, #0]
    10fa:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    10fc:	2300      	movs	r3, #0
    10fe:	2400      	movs	r4, #0
    1100:	623b      	str	r3, [r7, #32]
    1102:	627c      	str	r4, [r7, #36]	; 0x24
    1104:	2300      	movs	r3, #0
    1106:	2400      	movs	r4, #0
    1108:	61bb      	str	r3, [r7, #24]
    110a:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    110c:	233f      	movs	r3, #63	; 0x3f
    110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1110:	e053      	b.n	11ba <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    1112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1114:	3b20      	subs	r3, #32
    1116:	2b00      	cmp	r3, #0
    1118:	db04      	blt.n	1124 <long_division+0x36>
    111a:	2201      	movs	r2, #1
    111c:	409a      	lsls	r2, r3
    111e:	0013      	movs	r3, r2
    1120:	617b      	str	r3, [r7, #20]
    1122:	e00b      	b.n	113c <long_division+0x4e>
    1124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1126:	2220      	movs	r2, #32
    1128:	1ad3      	subs	r3, r2, r3
    112a:	2201      	movs	r2, #1
    112c:	40da      	lsrs	r2, r3
    112e:	0013      	movs	r3, r2
    1130:	2100      	movs	r1, #0
    1132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1134:	4091      	lsls	r1, r2
    1136:	000a      	movs	r2, r1
    1138:	4313      	orrs	r3, r2
    113a:	617b      	str	r3, [r7, #20]
    113c:	2201      	movs	r2, #1
    113e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1140:	409a      	lsls	r2, r3
    1142:	0013      	movs	r3, r2
    1144:	613b      	str	r3, [r7, #16]

		r = r << 1;
    1146:	69bb      	ldr	r3, [r7, #24]
    1148:	69fc      	ldr	r4, [r7, #28]
    114a:	18db      	adds	r3, r3, r3
    114c:	4164      	adcs	r4, r4
    114e:	61bb      	str	r3, [r7, #24]
    1150:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    1152:	68bb      	ldr	r3, [r7, #8]
    1154:	693a      	ldr	r2, [r7, #16]
    1156:	401a      	ands	r2, r3
    1158:	0015      	movs	r5, r2
    115a:	68fb      	ldr	r3, [r7, #12]
    115c:	697a      	ldr	r2, [r7, #20]
    115e:	401a      	ands	r2, r3
    1160:	0016      	movs	r6, r2
    1162:	002b      	movs	r3, r5
    1164:	4333      	orrs	r3, r6
    1166:	d007      	beq.n	1178 <long_division+0x8a>
			r |= 0x01;
    1168:	69bb      	ldr	r3, [r7, #24]
    116a:	2201      	movs	r2, #1
    116c:	4313      	orrs	r3, r2
    116e:	61bb      	str	r3, [r7, #24]
    1170:	69fb      	ldr	r3, [r7, #28]
    1172:	2200      	movs	r2, #0
    1174:	4313      	orrs	r3, r2
    1176:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    1178:	687a      	ldr	r2, [r7, #4]
    117a:	69fb      	ldr	r3, [r7, #28]
    117c:	429a      	cmp	r2, r3
    117e:	d819      	bhi.n	11b4 <long_division+0xc6>
    1180:	687a      	ldr	r2, [r7, #4]
    1182:	69fb      	ldr	r3, [r7, #28]
    1184:	429a      	cmp	r2, r3
    1186:	d103      	bne.n	1190 <long_division+0xa2>
    1188:	683a      	ldr	r2, [r7, #0]
    118a:	69bb      	ldr	r3, [r7, #24]
    118c:	429a      	cmp	r2, r3
    118e:	d811      	bhi.n	11b4 <long_division+0xc6>
			r = r - d;
    1190:	69b9      	ldr	r1, [r7, #24]
    1192:	69fa      	ldr	r2, [r7, #28]
    1194:	683b      	ldr	r3, [r7, #0]
    1196:	687c      	ldr	r4, [r7, #4]
    1198:	1ac9      	subs	r1, r1, r3
    119a:	41a2      	sbcs	r2, r4
    119c:	000b      	movs	r3, r1
    119e:	0014      	movs	r4, r2
    11a0:	61bb      	str	r3, [r7, #24]
    11a2:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    11a4:	6a3a      	ldr	r2, [r7, #32]
    11a6:	693b      	ldr	r3, [r7, #16]
    11a8:	4313      	orrs	r3, r2
    11aa:	623b      	str	r3, [r7, #32]
    11ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    11ae:	697b      	ldr	r3, [r7, #20]
    11b0:	4313      	orrs	r3, r2
    11b2:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    11b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11b6:	3b01      	subs	r3, #1
    11b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    11ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    11bc:	2b00      	cmp	r3, #0
    11be:	daa8      	bge.n	1112 <long_division+0x24>
		}
	}

	return q;
    11c0:	6a3b      	ldr	r3, [r7, #32]
    11c2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    11c4:	0018      	movs	r0, r3
    11c6:	0021      	movs	r1, r4
    11c8:	46bd      	mov	sp, r7
    11ca:	b00d      	add	sp, #52	; 0x34
    11cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000011ce <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    11ce:	b580      	push	{r7, lr}
    11d0:	b086      	sub	sp, #24
    11d2:	af00      	add	r7, sp, #0
    11d4:	60f8      	str	r0, [r7, #12]
    11d6:	60b9      	str	r1, [r7, #8]
    11d8:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    11da:	2316      	movs	r3, #22
    11dc:	18fb      	adds	r3, r7, r3
    11de:	2200      	movs	r2, #0
    11e0:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    11e2:	68bb      	ldr	r3, [r7, #8]
    11e4:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    11e6:	68bb      	ldr	r3, [r7, #8]
    11e8:	085a      	lsrs	r2, r3, #1
    11ea:	68fb      	ldr	r3, [r7, #12]
    11ec:	429a      	cmp	r2, r3
    11ee:	d201      	bcs.n	11f4 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    11f0:	2340      	movs	r3, #64	; 0x40
    11f2:	e026      	b.n	1242 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    11f4:	68bb      	ldr	r3, [r7, #8]
    11f6:	085b      	lsrs	r3, r3, #1
    11f8:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    11fa:	e00a      	b.n	1212 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    11fc:	693a      	ldr	r2, [r7, #16]
    11fe:	68fb      	ldr	r3, [r7, #12]
    1200:	1ad3      	subs	r3, r2, r3
    1202:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    1204:	2316      	movs	r3, #22
    1206:	18fb      	adds	r3, r7, r3
    1208:	881a      	ldrh	r2, [r3, #0]
    120a:	2316      	movs	r3, #22
    120c:	18fb      	adds	r3, r7, r3
    120e:	3201      	adds	r2, #1
    1210:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    1212:	693a      	ldr	r2, [r7, #16]
    1214:	68fb      	ldr	r3, [r7, #12]
    1216:	429a      	cmp	r2, r3
    1218:	d2f0      	bcs.n	11fc <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    121a:	2316      	movs	r3, #22
    121c:	18fb      	adds	r3, r7, r3
    121e:	2216      	movs	r2, #22
    1220:	18ba      	adds	r2, r7, r2
    1222:	8812      	ldrh	r2, [r2, #0]
    1224:	3a01      	subs	r2, #1
    1226:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    1228:	2316      	movs	r3, #22
    122a:	18fb      	adds	r3, r7, r3
    122c:	881b      	ldrh	r3, [r3, #0]
    122e:	2bff      	cmp	r3, #255	; 0xff
    1230:	d901      	bls.n	1236 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1232:	2340      	movs	r3, #64	; 0x40
    1234:	e005      	b.n	1242 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    1236:	687b      	ldr	r3, [r7, #4]
    1238:	2216      	movs	r2, #22
    123a:	18ba      	adds	r2, r7, r2
    123c:	8812      	ldrh	r2, [r2, #0]
    123e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    1240:	2300      	movs	r3, #0
	}
}
    1242:	0018      	movs	r0, r3
    1244:	46bd      	mov	sp, r7
    1246:	b006      	add	sp, #24
    1248:	bd80      	pop	{r7, pc}
	...

0000124c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    124c:	b5f0      	push	{r4, r5, r6, r7, lr}
    124e:	b0a1      	sub	sp, #132	; 0x84
    1250:	af00      	add	r7, sp, #0
    1252:	64f8      	str	r0, [r7, #76]	; 0x4c
    1254:	64b9      	str	r1, [r7, #72]	; 0x48
    1256:	647a      	str	r2, [r7, #68]	; 0x44
    1258:	2243      	movs	r2, #67	; 0x43
    125a:	18ba      	adds	r2, r7, r2
    125c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    125e:	2300      	movs	r3, #0
    1260:	2400      	movs	r4, #0
    1262:	673b      	str	r3, [r7, #112]	; 0x70
    1264:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    1266:	2300      	movs	r3, #0
    1268:	2400      	movs	r4, #0
    126a:	66bb      	str	r3, [r7, #104]	; 0x68
    126c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    126e:	2300      	movs	r3, #0
    1270:	2400      	movs	r4, #0
    1272:	67bb      	str	r3, [r7, #120]	; 0x78
    1274:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    1276:	2300      	movs	r3, #0
    1278:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    127a:	2358      	movs	r3, #88	; 0x58
    127c:	2240      	movs	r2, #64	; 0x40
    127e:	4694      	mov	ip, r2
    1280:	44bc      	add	ip, r7
    1282:	4463      	add	r3, ip
    1284:	781a      	ldrb	r2, [r3, #0]
    1286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1288:	435a      	muls	r2, r3
    128a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    128c:	429a      	cmp	r2, r3
    128e:	d901      	bls.n	1294 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1290:	2340      	movs	r3, #64	; 0x40
    1292:	e0b3      	b.n	13fc <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1294:	2343      	movs	r3, #67	; 0x43
    1296:	18fb      	adds	r3, r7, r3
    1298:	781b      	ldrb	r3, [r3, #0]
    129a:	2b00      	cmp	r3, #0
    129c:	d13d      	bne.n	131a <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    129e:	2358      	movs	r3, #88	; 0x58
    12a0:	2240      	movs	r2, #64	; 0x40
    12a2:	4694      	mov	ip, r2
    12a4:	44bc      	add	ip, r7
    12a6:	4463      	add	r3, ip
    12a8:	781b      	ldrb	r3, [r3, #0]
    12aa:	b2db      	uxtb	r3, r3
    12ac:	613b      	str	r3, [r7, #16]
    12ae:	2300      	movs	r3, #0
    12b0:	617b      	str	r3, [r7, #20]
    12b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    12b4:	60bb      	str	r3, [r7, #8]
    12b6:	2300      	movs	r3, #0
    12b8:	60fb      	str	r3, [r7, #12]
    12ba:	4c52      	ldr	r4, [pc, #328]	; (1404 <_sercom_get_async_baud_val+0x1b8>)
    12bc:	68ba      	ldr	r2, [r7, #8]
    12be:	68fb      	ldr	r3, [r7, #12]
    12c0:	6938      	ldr	r0, [r7, #16]
    12c2:	6979      	ldr	r1, [r7, #20]
    12c4:	47a0      	blx	r4
    12c6:	0003      	movs	r3, r0
    12c8:	000c      	movs	r4, r1
    12ca:	001b      	movs	r3, r3
    12cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    12ce:	2300      	movs	r3, #0
    12d0:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    12d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    12d4:	603b      	str	r3, [r7, #0]
    12d6:	2300      	movs	r3, #0
    12d8:	607b      	str	r3, [r7, #4]
    12da:	6db8      	ldr	r0, [r7, #88]	; 0x58
    12dc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    12de:	683a      	ldr	r2, [r7, #0]
    12e0:	687b      	ldr	r3, [r7, #4]
    12e2:	4c49      	ldr	r4, [pc, #292]	; (1408 <_sercom_get_async_baud_val+0x1bc>)
    12e4:	47a0      	blx	r4
    12e6:	0003      	movs	r3, r0
    12e8:	000c      	movs	r4, r1
    12ea:	673b      	str	r3, [r7, #112]	; 0x70
    12ec:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    12ee:	2100      	movs	r1, #0
    12f0:	2201      	movs	r2, #1
    12f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    12f4:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    12f6:	1ac9      	subs	r1, r1, r3
    12f8:	41a2      	sbcs	r2, r4
    12fa:	000b      	movs	r3, r1
    12fc:	0014      	movs	r4, r2
    12fe:	66bb      	str	r3, [r7, #104]	; 0x68
    1300:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    1302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1304:	0c1b      	lsrs	r3, r3, #16
    1306:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    1308:	0416      	lsls	r6, r2, #16
    130a:	431e      	orrs	r6, r3
    130c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    130e:	041d      	lsls	r5, r3, #16
    1310:	0033      	movs	r3, r6
    1312:	67bb      	str	r3, [r7, #120]	; 0x78
    1314:	2300      	movs	r3, #0
    1316:	67fb      	str	r3, [r7, #124]	; 0x7c
    1318:	e06a      	b.n	13f0 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    131a:	2343      	movs	r3, #67	; 0x43
    131c:	18fb      	adds	r3, r7, r3
    131e:	781b      	ldrb	r3, [r3, #0]
    1320:	2b01      	cmp	r3, #1
    1322:	d165      	bne.n	13f0 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    1324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1326:	633b      	str	r3, [r7, #48]	; 0x30
    1328:	2300      	movs	r3, #0
    132a:	637b      	str	r3, [r7, #52]	; 0x34
    132c:	2358      	movs	r3, #88	; 0x58
    132e:	2240      	movs	r2, #64	; 0x40
    1330:	4694      	mov	ip, r2
    1332:	44bc      	add	ip, r7
    1334:	4463      	add	r3, ip
    1336:	781b      	ldrb	r3, [r3, #0]
    1338:	b2db      	uxtb	r3, r3
    133a:	62bb      	str	r3, [r7, #40]	; 0x28
    133c:	2300      	movs	r3, #0
    133e:	62fb      	str	r3, [r7, #44]	; 0x2c
    1340:	4c30      	ldr	r4, [pc, #192]	; (1404 <_sercom_get_async_baud_val+0x1b8>)
    1342:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1346:	6b38      	ldr	r0, [r7, #48]	; 0x30
    1348:	6b79      	ldr	r1, [r7, #52]	; 0x34
    134a:	47a0      	blx	r4
    134c:	0003      	movs	r3, r0
    134e:	000c      	movs	r4, r1
    1350:	65bb      	str	r3, [r7, #88]	; 0x58
    1352:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    1354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1356:	623b      	str	r3, [r7, #32]
    1358:	2300      	movs	r3, #0
    135a:	627b      	str	r3, [r7, #36]	; 0x24
    135c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    135e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    1360:	001a      	movs	r2, r3
    1362:	0023      	movs	r3, r4
    1364:	6a38      	ldr	r0, [r7, #32]
    1366:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1368:	4c27      	ldr	r4, [pc, #156]	; (1408 <_sercom_get_async_baud_val+0x1bc>)
    136a:	47a0      	blx	r4
    136c:	0003      	movs	r3, r0
    136e:	000c      	movs	r4, r1
    1370:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    1372:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1374:	2380      	movs	r3, #128	; 0x80
    1376:	019b      	lsls	r3, r3, #6
    1378:	429a      	cmp	r2, r3
    137a:	d901      	bls.n	1380 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    137c:	2340      	movs	r3, #64	; 0x40
    137e:	e03d      	b.n	13fc <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1382:	61bb      	str	r3, [r7, #24]
    1384:	2300      	movs	r3, #0
    1386:	61fb      	str	r3, [r7, #28]
    1388:	69b9      	ldr	r1, [r7, #24]
    138a:	69fa      	ldr	r2, [r7, #28]
    138c:	000b      	movs	r3, r1
    138e:	0f5b      	lsrs	r3, r3, #29
    1390:	0010      	movs	r0, r2
    1392:	00c0      	lsls	r0, r0, #3
    1394:	63f8      	str	r0, [r7, #60]	; 0x3c
    1396:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    1398:	4318      	orrs	r0, r3
    139a:	63f8      	str	r0, [r7, #60]	; 0x3c
    139c:	000b      	movs	r3, r1
    139e:	00db      	lsls	r3, r3, #3
    13a0:	63bb      	str	r3, [r7, #56]	; 0x38
    13a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    13a4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    13a6:	001a      	movs	r2, r3
    13a8:	0023      	movs	r3, r4
    13aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    13ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    13ae:	4c16      	ldr	r4, [pc, #88]	; (1408 <_sercom_get_async_baud_val+0x1bc>)
    13b0:	47a0      	blx	r4
    13b2:	0003      	movs	r3, r0
    13b4:	000c      	movs	r4, r1
    13b6:	65bb      	str	r3, [r7, #88]	; 0x58
    13b8:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    13ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    13bc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    13be:	b2d9      	uxtb	r1, r3
    13c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    13c2:	b2db      	uxtb	r3, r3
    13c4:	00db      	lsls	r3, r3, #3
    13c6:	b2da      	uxtb	r2, r3
    13c8:	2317      	movs	r3, #23
    13ca:	2040      	movs	r0, #64	; 0x40
    13cc:	4684      	mov	ip, r0
    13ce:	44bc      	add	ip, r7
    13d0:	4463      	add	r3, ip
    13d2:	1a8a      	subs	r2, r1, r2
    13d4:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    13d6:	2317      	movs	r3, #23
    13d8:	2240      	movs	r2, #64	; 0x40
    13da:	4694      	mov	ip, r2
    13dc:	44bc      	add	ip, r7
    13de:	4463      	add	r3, ip
    13e0:	781b      	ldrb	r3, [r3, #0]
    13e2:	035b      	lsls	r3, r3, #13
    13e4:	001a      	movs	r2, r3
    13e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    13e8:	4313      	orrs	r3, r2
    13ea:	67bb      	str	r3, [r7, #120]	; 0x78
    13ec:	2300      	movs	r3, #0
    13ee:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    13f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    13f2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    13f4:	b29a      	uxth	r2, r3
    13f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    13f8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    13fa:	2300      	movs	r3, #0
}
    13fc:	0018      	movs	r0, r3
    13fe:	46bd      	mov	sp, r7
    1400:	b021      	add	sp, #132	; 0x84
    1402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1404:	0000434d 	.word	0x0000434d
    1408:	000010ef 	.word	0x000010ef

0000140c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    140c:	b580      	push	{r7, lr}
    140e:	b084      	sub	sp, #16
    1410:	af00      	add	r7, sp, #0
    1412:	0002      	movs	r2, r0
    1414:	1dfb      	adds	r3, r7, #7
    1416:	701a      	strb	r2, [r3, #0]
    1418:	1dbb      	adds	r3, r7, #6
    141a:	1c0a      	adds	r2, r1, #0
    141c:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    141e:	4b1a      	ldr	r3, [pc, #104]	; (1488 <sercom_set_gclk_generator+0x7c>)
    1420:	781b      	ldrb	r3, [r3, #0]
    1422:	2201      	movs	r2, #1
    1424:	4053      	eors	r3, r2
    1426:	b2db      	uxtb	r3, r3
    1428:	2b00      	cmp	r3, #0
    142a:	d103      	bne.n	1434 <sercom_set_gclk_generator+0x28>
    142c:	1dbb      	adds	r3, r7, #6
    142e:	781b      	ldrb	r3, [r3, #0]
    1430:	2b00      	cmp	r3, #0
    1432:	d01b      	beq.n	146c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1434:	230c      	movs	r3, #12
    1436:	18fb      	adds	r3, r7, r3
    1438:	0018      	movs	r0, r3
    143a:	4b14      	ldr	r3, [pc, #80]	; (148c <sercom_set_gclk_generator+0x80>)
    143c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    143e:	230c      	movs	r3, #12
    1440:	18fb      	adds	r3, r7, r3
    1442:	1dfa      	adds	r2, r7, #7
    1444:	7812      	ldrb	r2, [r2, #0]
    1446:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1448:	230c      	movs	r3, #12
    144a:	18fb      	adds	r3, r7, r3
    144c:	0019      	movs	r1, r3
    144e:	2013      	movs	r0, #19
    1450:	4b0f      	ldr	r3, [pc, #60]	; (1490 <sercom_set_gclk_generator+0x84>)
    1452:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1454:	2013      	movs	r0, #19
    1456:	4b0f      	ldr	r3, [pc, #60]	; (1494 <sercom_set_gclk_generator+0x88>)
    1458:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    145a:	4b0b      	ldr	r3, [pc, #44]	; (1488 <sercom_set_gclk_generator+0x7c>)
    145c:	1dfa      	adds	r2, r7, #7
    145e:	7812      	ldrb	r2, [r2, #0]
    1460:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    1462:	4b09      	ldr	r3, [pc, #36]	; (1488 <sercom_set_gclk_generator+0x7c>)
    1464:	2201      	movs	r2, #1
    1466:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1468:	2300      	movs	r3, #0
    146a:	e008      	b.n	147e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    146c:	4b06      	ldr	r3, [pc, #24]	; (1488 <sercom_set_gclk_generator+0x7c>)
    146e:	785b      	ldrb	r3, [r3, #1]
    1470:	1dfa      	adds	r2, r7, #7
    1472:	7812      	ldrb	r2, [r2, #0]
    1474:	429a      	cmp	r2, r3
    1476:	d101      	bne.n	147c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    1478:	2300      	movs	r3, #0
    147a:	e000      	b.n	147e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    147c:	231d      	movs	r3, #29
}
    147e:	0018      	movs	r0, r3
    1480:	46bd      	mov	sp, r7
    1482:	b004      	add	sp, #16
    1484:	bd80      	pop	{r7, pc}
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	20000108 	.word	0x20000108
    148c:	000010d9 	.word	0x000010d9
    1490:	00003a95 	.word	0x00003a95
    1494:	00003ad9 	.word	0x00003ad9

00001498 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    1498:	b580      	push	{r7, lr}
    149a:	b082      	sub	sp, #8
    149c:	af00      	add	r7, sp, #0
    149e:	6078      	str	r0, [r7, #4]
    14a0:	000a      	movs	r2, r1
    14a2:	1cfb      	adds	r3, r7, #3
    14a4:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    14a6:	687b      	ldr	r3, [r7, #4]
    14a8:	4a4d      	ldr	r2, [pc, #308]	; (15e0 <_sercom_get_default_pad+0x148>)
    14aa:	4293      	cmp	r3, r2
    14ac:	d03f      	beq.n	152e <_sercom_get_default_pad+0x96>
    14ae:	4a4c      	ldr	r2, [pc, #304]	; (15e0 <_sercom_get_default_pad+0x148>)
    14b0:	4293      	cmp	r3, r2
    14b2:	d806      	bhi.n	14c2 <_sercom_get_default_pad+0x2a>
    14b4:	4a4b      	ldr	r2, [pc, #300]	; (15e4 <_sercom_get_default_pad+0x14c>)
    14b6:	4293      	cmp	r3, r2
    14b8:	d00f      	beq.n	14da <_sercom_get_default_pad+0x42>
    14ba:	4a4b      	ldr	r2, [pc, #300]	; (15e8 <_sercom_get_default_pad+0x150>)
    14bc:	4293      	cmp	r3, r2
    14be:	d021      	beq.n	1504 <_sercom_get_default_pad+0x6c>
    14c0:	e089      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    14c2:	4a4a      	ldr	r2, [pc, #296]	; (15ec <_sercom_get_default_pad+0x154>)
    14c4:	4293      	cmp	r3, r2
    14c6:	d100      	bne.n	14ca <_sercom_get_default_pad+0x32>
    14c8:	e05b      	b.n	1582 <_sercom_get_default_pad+0xea>
    14ca:	4a49      	ldr	r2, [pc, #292]	; (15f0 <_sercom_get_default_pad+0x158>)
    14cc:	4293      	cmp	r3, r2
    14ce:	d100      	bne.n	14d2 <_sercom_get_default_pad+0x3a>
    14d0:	e06c      	b.n	15ac <_sercom_get_default_pad+0x114>
    14d2:	4a48      	ldr	r2, [pc, #288]	; (15f4 <_sercom_get_default_pad+0x15c>)
    14d4:	4293      	cmp	r3, r2
    14d6:	d03f      	beq.n	1558 <_sercom_get_default_pad+0xc0>
    14d8:	e07d      	b.n	15d6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    14da:	1cfb      	adds	r3, r7, #3
    14dc:	781b      	ldrb	r3, [r3, #0]
    14de:	2b01      	cmp	r3, #1
    14e0:	d00a      	beq.n	14f8 <_sercom_get_default_pad+0x60>
    14e2:	dc02      	bgt.n	14ea <_sercom_get_default_pad+0x52>
    14e4:	2b00      	cmp	r3, #0
    14e6:	d005      	beq.n	14f4 <_sercom_get_default_pad+0x5c>
    14e8:	e075      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    14ea:	2b02      	cmp	r3, #2
    14ec:	d006      	beq.n	14fc <_sercom_get_default_pad+0x64>
    14ee:	2b03      	cmp	r3, #3
    14f0:	d006      	beq.n	1500 <_sercom_get_default_pad+0x68>
    14f2:	e070      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    14f4:	4b40      	ldr	r3, [pc, #256]	; (15f8 <_sercom_get_default_pad+0x160>)
    14f6:	e06f      	b.n	15d8 <_sercom_get_default_pad+0x140>
    14f8:	4b40      	ldr	r3, [pc, #256]	; (15fc <_sercom_get_default_pad+0x164>)
    14fa:	e06d      	b.n	15d8 <_sercom_get_default_pad+0x140>
    14fc:	4b40      	ldr	r3, [pc, #256]	; (1600 <_sercom_get_default_pad+0x168>)
    14fe:	e06b      	b.n	15d8 <_sercom_get_default_pad+0x140>
    1500:	4b40      	ldr	r3, [pc, #256]	; (1604 <_sercom_get_default_pad+0x16c>)
    1502:	e069      	b.n	15d8 <_sercom_get_default_pad+0x140>
    1504:	1cfb      	adds	r3, r7, #3
    1506:	781b      	ldrb	r3, [r3, #0]
    1508:	2b01      	cmp	r3, #1
    150a:	d00a      	beq.n	1522 <_sercom_get_default_pad+0x8a>
    150c:	dc02      	bgt.n	1514 <_sercom_get_default_pad+0x7c>
    150e:	2b00      	cmp	r3, #0
    1510:	d005      	beq.n	151e <_sercom_get_default_pad+0x86>
    1512:	e060      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    1514:	2b02      	cmp	r3, #2
    1516:	d006      	beq.n	1526 <_sercom_get_default_pad+0x8e>
    1518:	2b03      	cmp	r3, #3
    151a:	d006      	beq.n	152a <_sercom_get_default_pad+0x92>
    151c:	e05b      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    151e:	2303      	movs	r3, #3
    1520:	e05a      	b.n	15d8 <_sercom_get_default_pad+0x140>
    1522:	4b39      	ldr	r3, [pc, #228]	; (1608 <_sercom_get_default_pad+0x170>)
    1524:	e058      	b.n	15d8 <_sercom_get_default_pad+0x140>
    1526:	4b39      	ldr	r3, [pc, #228]	; (160c <_sercom_get_default_pad+0x174>)
    1528:	e056      	b.n	15d8 <_sercom_get_default_pad+0x140>
    152a:	4b39      	ldr	r3, [pc, #228]	; (1610 <_sercom_get_default_pad+0x178>)
    152c:	e054      	b.n	15d8 <_sercom_get_default_pad+0x140>
    152e:	1cfb      	adds	r3, r7, #3
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	2b01      	cmp	r3, #1
    1534:	d00a      	beq.n	154c <_sercom_get_default_pad+0xb4>
    1536:	dc02      	bgt.n	153e <_sercom_get_default_pad+0xa6>
    1538:	2b00      	cmp	r3, #0
    153a:	d005      	beq.n	1548 <_sercom_get_default_pad+0xb0>
    153c:	e04b      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    153e:	2b02      	cmp	r3, #2
    1540:	d006      	beq.n	1550 <_sercom_get_default_pad+0xb8>
    1542:	2b03      	cmp	r3, #3
    1544:	d006      	beq.n	1554 <_sercom_get_default_pad+0xbc>
    1546:	e046      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    1548:	4b32      	ldr	r3, [pc, #200]	; (1614 <_sercom_get_default_pad+0x17c>)
    154a:	e045      	b.n	15d8 <_sercom_get_default_pad+0x140>
    154c:	4b32      	ldr	r3, [pc, #200]	; (1618 <_sercom_get_default_pad+0x180>)
    154e:	e043      	b.n	15d8 <_sercom_get_default_pad+0x140>
    1550:	4b32      	ldr	r3, [pc, #200]	; (161c <_sercom_get_default_pad+0x184>)
    1552:	e041      	b.n	15d8 <_sercom_get_default_pad+0x140>
    1554:	4b32      	ldr	r3, [pc, #200]	; (1620 <_sercom_get_default_pad+0x188>)
    1556:	e03f      	b.n	15d8 <_sercom_get_default_pad+0x140>
    1558:	1cfb      	adds	r3, r7, #3
    155a:	781b      	ldrb	r3, [r3, #0]
    155c:	2b01      	cmp	r3, #1
    155e:	d00a      	beq.n	1576 <_sercom_get_default_pad+0xde>
    1560:	dc02      	bgt.n	1568 <_sercom_get_default_pad+0xd0>
    1562:	2b00      	cmp	r3, #0
    1564:	d005      	beq.n	1572 <_sercom_get_default_pad+0xda>
    1566:	e036      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    1568:	2b02      	cmp	r3, #2
    156a:	d006      	beq.n	157a <_sercom_get_default_pad+0xe2>
    156c:	2b03      	cmp	r3, #3
    156e:	d006      	beq.n	157e <_sercom_get_default_pad+0xe6>
    1570:	e031      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    1572:	4b2c      	ldr	r3, [pc, #176]	; (1624 <_sercom_get_default_pad+0x18c>)
    1574:	e030      	b.n	15d8 <_sercom_get_default_pad+0x140>
    1576:	4b2c      	ldr	r3, [pc, #176]	; (1628 <_sercom_get_default_pad+0x190>)
    1578:	e02e      	b.n	15d8 <_sercom_get_default_pad+0x140>
    157a:	4b2c      	ldr	r3, [pc, #176]	; (162c <_sercom_get_default_pad+0x194>)
    157c:	e02c      	b.n	15d8 <_sercom_get_default_pad+0x140>
    157e:	4b2c      	ldr	r3, [pc, #176]	; (1630 <_sercom_get_default_pad+0x198>)
    1580:	e02a      	b.n	15d8 <_sercom_get_default_pad+0x140>
    1582:	1cfb      	adds	r3, r7, #3
    1584:	781b      	ldrb	r3, [r3, #0]
    1586:	2b01      	cmp	r3, #1
    1588:	d00a      	beq.n	15a0 <_sercom_get_default_pad+0x108>
    158a:	dc02      	bgt.n	1592 <_sercom_get_default_pad+0xfa>
    158c:	2b00      	cmp	r3, #0
    158e:	d005      	beq.n	159c <_sercom_get_default_pad+0x104>
    1590:	e021      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    1592:	2b02      	cmp	r3, #2
    1594:	d006      	beq.n	15a4 <_sercom_get_default_pad+0x10c>
    1596:	2b03      	cmp	r3, #3
    1598:	d006      	beq.n	15a8 <_sercom_get_default_pad+0x110>
    159a:	e01c      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    159c:	4b25      	ldr	r3, [pc, #148]	; (1634 <_sercom_get_default_pad+0x19c>)
    159e:	e01b      	b.n	15d8 <_sercom_get_default_pad+0x140>
    15a0:	4b25      	ldr	r3, [pc, #148]	; (1638 <_sercom_get_default_pad+0x1a0>)
    15a2:	e019      	b.n	15d8 <_sercom_get_default_pad+0x140>
    15a4:	4b25      	ldr	r3, [pc, #148]	; (163c <_sercom_get_default_pad+0x1a4>)
    15a6:	e017      	b.n	15d8 <_sercom_get_default_pad+0x140>
    15a8:	4b25      	ldr	r3, [pc, #148]	; (1640 <_sercom_get_default_pad+0x1a8>)
    15aa:	e015      	b.n	15d8 <_sercom_get_default_pad+0x140>
    15ac:	1cfb      	adds	r3, r7, #3
    15ae:	781b      	ldrb	r3, [r3, #0]
    15b0:	2b01      	cmp	r3, #1
    15b2:	d00a      	beq.n	15ca <_sercom_get_default_pad+0x132>
    15b4:	dc02      	bgt.n	15bc <_sercom_get_default_pad+0x124>
    15b6:	2b00      	cmp	r3, #0
    15b8:	d005      	beq.n	15c6 <_sercom_get_default_pad+0x12e>
    15ba:	e00c      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    15bc:	2b02      	cmp	r3, #2
    15be:	d006      	beq.n	15ce <_sercom_get_default_pad+0x136>
    15c0:	2b03      	cmp	r3, #3
    15c2:	d006      	beq.n	15d2 <_sercom_get_default_pad+0x13a>
    15c4:	e007      	b.n	15d6 <_sercom_get_default_pad+0x13e>
    15c6:	4b1f      	ldr	r3, [pc, #124]	; (1644 <_sercom_get_default_pad+0x1ac>)
    15c8:	e006      	b.n	15d8 <_sercom_get_default_pad+0x140>
    15ca:	4b1f      	ldr	r3, [pc, #124]	; (1648 <_sercom_get_default_pad+0x1b0>)
    15cc:	e004      	b.n	15d8 <_sercom_get_default_pad+0x140>
    15ce:	4b1f      	ldr	r3, [pc, #124]	; (164c <_sercom_get_default_pad+0x1b4>)
    15d0:	e002      	b.n	15d8 <_sercom_get_default_pad+0x140>
    15d2:	4b1f      	ldr	r3, [pc, #124]	; (1650 <_sercom_get_default_pad+0x1b8>)
    15d4:	e000      	b.n	15d8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    15d6:	2300      	movs	r3, #0
}
    15d8:	0018      	movs	r0, r3
    15da:	46bd      	mov	sp, r7
    15dc:	b002      	add	sp, #8
    15de:	bd80      	pop	{r7, pc}
    15e0:	42001000 	.word	0x42001000
    15e4:	42000800 	.word	0x42000800
    15e8:	42000c00 	.word	0x42000c00
    15ec:	42001800 	.word	0x42001800
    15f0:	42001c00 	.word	0x42001c00
    15f4:	42001400 	.word	0x42001400
    15f8:	00040003 	.word	0x00040003
    15fc:	00050003 	.word	0x00050003
    1600:	00060003 	.word	0x00060003
    1604:	00070003 	.word	0x00070003
    1608:	00010003 	.word	0x00010003
    160c:	001e0003 	.word	0x001e0003
    1610:	001f0003 	.word	0x001f0003
    1614:	00080003 	.word	0x00080003
    1618:	00090003 	.word	0x00090003
    161c:	000a0003 	.word	0x000a0003
    1620:	000b0003 	.word	0x000b0003
    1624:	00100003 	.word	0x00100003
    1628:	00110003 	.word	0x00110003
    162c:	00120003 	.word	0x00120003
    1630:	00130003 	.word	0x00130003
    1634:	000c0003 	.word	0x000c0003
    1638:	000d0003 	.word	0x000d0003
    163c:	000e0003 	.word	0x000e0003
    1640:	000f0003 	.word	0x000f0003
    1644:	00160003 	.word	0x00160003
    1648:	00170003 	.word	0x00170003
    164c:	00180003 	.word	0x00180003
    1650:	00190003 	.word	0x00190003

00001654 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1654:	b590      	push	{r4, r7, lr}
    1656:	b08b      	sub	sp, #44	; 0x2c
    1658:	af00      	add	r7, sp, #0
    165a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    165c:	230c      	movs	r3, #12
    165e:	18fb      	adds	r3, r7, r3
    1660:	4a0f      	ldr	r2, [pc, #60]	; (16a0 <_sercom_get_sercom_inst_index+0x4c>)
    1662:	ca13      	ldmia	r2!, {r0, r1, r4}
    1664:	c313      	stmia	r3!, {r0, r1, r4}
    1666:	ca13      	ldmia	r2!, {r0, r1, r4}
    1668:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    166a:	2300      	movs	r3, #0
    166c:	627b      	str	r3, [r7, #36]	; 0x24
    166e:	e00e      	b.n	168e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1670:	230c      	movs	r3, #12
    1672:	18fb      	adds	r3, r7, r3
    1674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    1676:	0092      	lsls	r2, r2, #2
    1678:	58d3      	ldr	r3, [r2, r3]
    167a:	001a      	movs	r2, r3
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	429a      	cmp	r2, r3
    1680:	d102      	bne.n	1688 <_sercom_get_sercom_inst_index+0x34>
			return i;
    1682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1684:	b2db      	uxtb	r3, r3
    1686:	e006      	b.n	1696 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    168a:	3301      	adds	r3, #1
    168c:	627b      	str	r3, [r7, #36]	; 0x24
    168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1690:	2b05      	cmp	r3, #5
    1692:	d9ed      	bls.n	1670 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1694:	2300      	movs	r3, #0
}
    1696:	0018      	movs	r0, r3
    1698:	46bd      	mov	sp, r7
    169a:	b00b      	add	sp, #44	; 0x2c
    169c:	bd90      	pop	{r4, r7, pc}
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	00004bc4 	.word	0x00004bc4

000016a4 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    16a4:	b580      	push	{r7, lr}
    16a6:	b082      	sub	sp, #8
    16a8:	af00      	add	r7, sp, #0
    16aa:	0002      	movs	r2, r0
    16ac:	1dfb      	adds	r3, r7, #7
    16ae:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    16b0:	46c0      	nop			; (mov r8, r8)
    16b2:	46bd      	mov	sp, r7
    16b4:	b002      	add	sp, #8
    16b6:	bd80      	pop	{r7, pc}

000016b8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	b084      	sub	sp, #16
    16bc:	af00      	add	r7, sp, #0
    16be:	0002      	movs	r2, r0
    16c0:	6039      	str	r1, [r7, #0]
    16c2:	1dfb      	adds	r3, r7, #7
    16c4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    16c6:	4b13      	ldr	r3, [pc, #76]	; (1714 <_sercom_set_handler+0x5c>)
    16c8:	781b      	ldrb	r3, [r3, #0]
    16ca:	2201      	movs	r2, #1
    16cc:	4053      	eors	r3, r2
    16ce:	b2db      	uxtb	r3, r3
    16d0:	2b00      	cmp	r3, #0
    16d2:	d015      	beq.n	1700 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16d4:	2300      	movs	r3, #0
    16d6:	60fb      	str	r3, [r7, #12]
    16d8:	e00c      	b.n	16f4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    16da:	4b0f      	ldr	r3, [pc, #60]	; (1718 <_sercom_set_handler+0x60>)
    16dc:	68fa      	ldr	r2, [r7, #12]
    16de:	0092      	lsls	r2, r2, #2
    16e0:	490e      	ldr	r1, [pc, #56]	; (171c <_sercom_set_handler+0x64>)
    16e2:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    16e4:	4b0e      	ldr	r3, [pc, #56]	; (1720 <_sercom_set_handler+0x68>)
    16e6:	68fa      	ldr	r2, [r7, #12]
    16e8:	0092      	lsls	r2, r2, #2
    16ea:	2100      	movs	r1, #0
    16ec:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    16ee:	68fb      	ldr	r3, [r7, #12]
    16f0:	3301      	adds	r3, #1
    16f2:	60fb      	str	r3, [r7, #12]
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	2b05      	cmp	r3, #5
    16f8:	d9ef      	bls.n	16da <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    16fa:	4b06      	ldr	r3, [pc, #24]	; (1714 <_sercom_set_handler+0x5c>)
    16fc:	2201      	movs	r2, #1
    16fe:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1700:	1dfb      	adds	r3, r7, #7
    1702:	781a      	ldrb	r2, [r3, #0]
    1704:	4b04      	ldr	r3, [pc, #16]	; (1718 <_sercom_set_handler+0x60>)
    1706:	0092      	lsls	r2, r2, #2
    1708:	6839      	ldr	r1, [r7, #0]
    170a:	50d1      	str	r1, [r2, r3]
}
    170c:	46c0      	nop			; (mov r8, r8)
    170e:	46bd      	mov	sp, r7
    1710:	b004      	add	sp, #16
    1712:	bd80      	pop	{r7, pc}
    1714:	2000010a 	.word	0x2000010a
    1718:	2000010c 	.word	0x2000010c
    171c:	000016a5 	.word	0x000016a5
    1720:	2000098c 	.word	0x2000098c

00001724 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1724:	b590      	push	{r4, r7, lr}
    1726:	b085      	sub	sp, #20
    1728:	af00      	add	r7, sp, #0
    172a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    172c:	2308      	movs	r3, #8
    172e:	18fb      	adds	r3, r7, r3
    1730:	4a0b      	ldr	r2, [pc, #44]	; (1760 <_sercom_get_interrupt_vector+0x3c>)
    1732:	6811      	ldr	r1, [r2, #0]
    1734:	6019      	str	r1, [r3, #0]
    1736:	8892      	ldrh	r2, [r2, #4]
    1738:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    173a:	230f      	movs	r3, #15
    173c:	18fc      	adds	r4, r7, r3
    173e:	687b      	ldr	r3, [r7, #4]
    1740:	0018      	movs	r0, r3
    1742:	4b08      	ldr	r3, [pc, #32]	; (1764 <_sercom_get_interrupt_vector+0x40>)
    1744:	4798      	blx	r3
    1746:	0003      	movs	r3, r0
    1748:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    174a:	230f      	movs	r3, #15
    174c:	18fb      	adds	r3, r7, r3
    174e:	781b      	ldrb	r3, [r3, #0]
    1750:	2208      	movs	r2, #8
    1752:	18ba      	adds	r2, r7, r2
    1754:	5cd3      	ldrb	r3, [r2, r3]
    1756:	b25b      	sxtb	r3, r3
}
    1758:	0018      	movs	r0, r3
    175a:	46bd      	mov	sp, r7
    175c:	b005      	add	sp, #20
    175e:	bd90      	pop	{r4, r7, pc}
    1760:	00004bdc 	.word	0x00004bdc
    1764:	00001655 	.word	0x00001655

00001768 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1768:	b580      	push	{r7, lr}
    176a:	af00      	add	r7, sp, #0
    176c:	4b03      	ldr	r3, [pc, #12]	; (177c <SERCOM0_Handler+0x14>)
    176e:	681b      	ldr	r3, [r3, #0]
    1770:	2000      	movs	r0, #0
    1772:	4798      	blx	r3
    1774:	46c0      	nop			; (mov r8, r8)
    1776:	46bd      	mov	sp, r7
    1778:	bd80      	pop	{r7, pc}
    177a:	46c0      	nop			; (mov r8, r8)
    177c:	2000010c 	.word	0x2000010c

00001780 <SERCOM1_Handler>:
    1780:	b580      	push	{r7, lr}
    1782:	af00      	add	r7, sp, #0
    1784:	4b03      	ldr	r3, [pc, #12]	; (1794 <SERCOM1_Handler+0x14>)
    1786:	685b      	ldr	r3, [r3, #4]
    1788:	2001      	movs	r0, #1
    178a:	4798      	blx	r3
    178c:	46c0      	nop			; (mov r8, r8)
    178e:	46bd      	mov	sp, r7
    1790:	bd80      	pop	{r7, pc}
    1792:	46c0      	nop			; (mov r8, r8)
    1794:	2000010c 	.word	0x2000010c

00001798 <SERCOM2_Handler>:
    1798:	b580      	push	{r7, lr}
    179a:	af00      	add	r7, sp, #0
    179c:	4b03      	ldr	r3, [pc, #12]	; (17ac <SERCOM2_Handler+0x14>)
    179e:	689b      	ldr	r3, [r3, #8]
    17a0:	2002      	movs	r0, #2
    17a2:	4798      	blx	r3
    17a4:	46c0      	nop			; (mov r8, r8)
    17a6:	46bd      	mov	sp, r7
    17a8:	bd80      	pop	{r7, pc}
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	2000010c 	.word	0x2000010c

000017b0 <SERCOM3_Handler>:
    17b0:	b580      	push	{r7, lr}
    17b2:	af00      	add	r7, sp, #0
    17b4:	4b03      	ldr	r3, [pc, #12]	; (17c4 <SERCOM3_Handler+0x14>)
    17b6:	68db      	ldr	r3, [r3, #12]
    17b8:	2003      	movs	r0, #3
    17ba:	4798      	blx	r3
    17bc:	46c0      	nop			; (mov r8, r8)
    17be:	46bd      	mov	sp, r7
    17c0:	bd80      	pop	{r7, pc}
    17c2:	46c0      	nop			; (mov r8, r8)
    17c4:	2000010c 	.word	0x2000010c

000017c8 <SERCOM4_Handler>:
    17c8:	b580      	push	{r7, lr}
    17ca:	af00      	add	r7, sp, #0
    17cc:	4b03      	ldr	r3, [pc, #12]	; (17dc <SERCOM4_Handler+0x14>)
    17ce:	691b      	ldr	r3, [r3, #16]
    17d0:	2004      	movs	r0, #4
    17d2:	4798      	blx	r3
    17d4:	46c0      	nop			; (mov r8, r8)
    17d6:	46bd      	mov	sp, r7
    17d8:	bd80      	pop	{r7, pc}
    17da:	46c0      	nop			; (mov r8, r8)
    17dc:	2000010c 	.word	0x2000010c

000017e0 <SERCOM5_Handler>:
    17e0:	b580      	push	{r7, lr}
    17e2:	af00      	add	r7, sp, #0
    17e4:	4b03      	ldr	r3, [pc, #12]	; (17f4 <SERCOM5_Handler+0x14>)
    17e6:	695b      	ldr	r3, [r3, #20]
    17e8:	2005      	movs	r0, #5
    17ea:	4798      	blx	r3
    17ec:	46c0      	nop			; (mov r8, r8)
    17ee:	46bd      	mov	sp, r7
    17f0:	bd80      	pop	{r7, pc}
    17f2:	46c0      	nop			; (mov r8, r8)
    17f4:	2000010c 	.word	0x2000010c

000017f8 <system_pinmux_get_config_defaults>:
{
    17f8:	b580      	push	{r7, lr}
    17fa:	b082      	sub	sp, #8
    17fc:	af00      	add	r7, sp, #0
    17fe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	2280      	movs	r2, #128	; 0x80
    1804:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	2200      	movs	r2, #0
    180a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    180c:	687b      	ldr	r3, [r7, #4]
    180e:	2201      	movs	r2, #1
    1810:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1812:	687b      	ldr	r3, [r7, #4]
    1814:	2200      	movs	r2, #0
    1816:	70da      	strb	r2, [r3, #3]
}
    1818:	46c0      	nop			; (mov r8, r8)
    181a:	46bd      	mov	sp, r7
    181c:	b002      	add	sp, #8
    181e:	bd80      	pop	{r7, pc}

00001820 <system_gclk_chan_get_config_defaults>:
{
    1820:	b580      	push	{r7, lr}
    1822:	b082      	sub	sp, #8
    1824:	af00      	add	r7, sp, #0
    1826:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    1828:	687b      	ldr	r3, [r7, #4]
    182a:	2200      	movs	r2, #0
    182c:	701a      	strb	r2, [r3, #0]
}
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	46bd      	mov	sp, r7
    1832:	b002      	add	sp, #8
    1834:	bd80      	pop	{r7, pc}
	...

00001838 <system_apb_clock_set_mask>:
{
    1838:	b580      	push	{r7, lr}
    183a:	b082      	sub	sp, #8
    183c:	af00      	add	r7, sp, #0
    183e:	0002      	movs	r2, r0
    1840:	6039      	str	r1, [r7, #0]
    1842:	1dfb      	adds	r3, r7, #7
    1844:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1846:	1dfb      	adds	r3, r7, #7
    1848:	781b      	ldrb	r3, [r3, #0]
    184a:	2b01      	cmp	r3, #1
    184c:	d00a      	beq.n	1864 <system_apb_clock_set_mask+0x2c>
    184e:	2b02      	cmp	r3, #2
    1850:	d00f      	beq.n	1872 <system_apb_clock_set_mask+0x3a>
    1852:	2b00      	cmp	r3, #0
    1854:	d114      	bne.n	1880 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    1856:	4b0e      	ldr	r3, [pc, #56]	; (1890 <system_apb_clock_set_mask+0x58>)
    1858:	4a0d      	ldr	r2, [pc, #52]	; (1890 <system_apb_clock_set_mask+0x58>)
    185a:	6991      	ldr	r1, [r2, #24]
    185c:	683a      	ldr	r2, [r7, #0]
    185e:	430a      	orrs	r2, r1
    1860:	619a      	str	r2, [r3, #24]
			break;
    1862:	e00f      	b.n	1884 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    1864:	4b0a      	ldr	r3, [pc, #40]	; (1890 <system_apb_clock_set_mask+0x58>)
    1866:	4a0a      	ldr	r2, [pc, #40]	; (1890 <system_apb_clock_set_mask+0x58>)
    1868:	69d1      	ldr	r1, [r2, #28]
    186a:	683a      	ldr	r2, [r7, #0]
    186c:	430a      	orrs	r2, r1
    186e:	61da      	str	r2, [r3, #28]
			break;
    1870:	e008      	b.n	1884 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    1872:	4b07      	ldr	r3, [pc, #28]	; (1890 <system_apb_clock_set_mask+0x58>)
    1874:	4a06      	ldr	r2, [pc, #24]	; (1890 <system_apb_clock_set_mask+0x58>)
    1876:	6a11      	ldr	r1, [r2, #32]
    1878:	683a      	ldr	r2, [r7, #0]
    187a:	430a      	orrs	r2, r1
    187c:	621a      	str	r2, [r3, #32]
			break;
    187e:	e001      	b.n	1884 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    1880:	2317      	movs	r3, #23
    1882:	e000      	b.n	1886 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    1884:	2300      	movs	r3, #0
}
    1886:	0018      	movs	r0, r3
    1888:	46bd      	mov	sp, r7
    188a:	b002      	add	sp, #8
    188c:	bd80      	pop	{r7, pc}
    188e:	46c0      	nop			; (mov r8, r8)
    1890:	40000400 	.word	0x40000400

00001894 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    1894:	b580      	push	{r7, lr}
    1896:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1898:	4b05      	ldr	r3, [pc, #20]	; (18b0 <system_is_debugger_present+0x1c>)
    189a:	789b      	ldrb	r3, [r3, #2]
    189c:	b2db      	uxtb	r3, r3
    189e:	001a      	movs	r2, r3
    18a0:	2302      	movs	r3, #2
    18a2:	4013      	ands	r3, r2
    18a4:	1e5a      	subs	r2, r3, #1
    18a6:	4193      	sbcs	r3, r2
    18a8:	b2db      	uxtb	r3, r3
}
    18aa:	0018      	movs	r0, r3
    18ac:	46bd      	mov	sp, r7
    18ae:	bd80      	pop	{r7, pc}
    18b0:	41002000 	.word	0x41002000

000018b4 <system_interrupt_disable>:
{
    18b4:	b580      	push	{r7, lr}
    18b6:	b082      	sub	sp, #8
    18b8:	af00      	add	r7, sp, #0
    18ba:	0002      	movs	r2, r0
    18bc:	1dfb      	adds	r3, r7, #7
    18be:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    18c0:	4a07      	ldr	r2, [pc, #28]	; (18e0 <system_interrupt_disable+0x2c>)
    18c2:	1dfb      	adds	r3, r7, #7
    18c4:	781b      	ldrb	r3, [r3, #0]
    18c6:	0019      	movs	r1, r3
    18c8:	231f      	movs	r3, #31
    18ca:	400b      	ands	r3, r1
    18cc:	2101      	movs	r1, #1
    18ce:	4099      	lsls	r1, r3
    18d0:	000b      	movs	r3, r1
    18d2:	0019      	movs	r1, r3
    18d4:	2380      	movs	r3, #128	; 0x80
    18d6:	50d1      	str	r1, [r2, r3]
}
    18d8:	46c0      	nop			; (mov r8, r8)
    18da:	46bd      	mov	sp, r7
    18dc:	b002      	add	sp, #8
    18de:	bd80      	pop	{r7, pc}
    18e0:	e000e100 	.word	0xe000e100

000018e4 <spi_is_syncing>:
{
    18e4:	b580      	push	{r7, lr}
    18e6:	b084      	sub	sp, #16
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	681b      	ldr	r3, [r3, #0]
    18f0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    18f2:	68fb      	ldr	r3, [r7, #12]
    18f4:	69db      	ldr	r3, [r3, #28]
    18f6:	1e5a      	subs	r2, r3, #1
    18f8:	4193      	sbcs	r3, r2
    18fa:	b2db      	uxtb	r3, r3
}
    18fc:	0018      	movs	r0, r3
    18fe:	46bd      	mov	sp, r7
    1900:	b004      	add	sp, #16
    1902:	bd80      	pop	{r7, pc}

00001904 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    1904:	b580      	push	{r7, lr}
    1906:	b084      	sub	sp, #16
    1908:	af00      	add	r7, sp, #0
    190a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	681b      	ldr	r3, [r3, #0]
    1910:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1912:	687b      	ldr	r3, [r7, #4]
    1914:	681b      	ldr	r3, [r3, #0]
    1916:	0018      	movs	r0, r3
    1918:	4b0e      	ldr	r3, [pc, #56]	; (1954 <spi_disable+0x50>)
    191a:	4798      	blx	r3
    191c:	0003      	movs	r3, r0
    191e:	0018      	movs	r0, r3
    1920:	4b0d      	ldr	r3, [pc, #52]	; (1958 <spi_disable+0x54>)
    1922:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    1924:	46c0      	nop			; (mov r8, r8)
    1926:	687b      	ldr	r3, [r7, #4]
    1928:	0018      	movs	r0, r3
    192a:	4b0c      	ldr	r3, [pc, #48]	; (195c <spi_disable+0x58>)
    192c:	4798      	blx	r3
    192e:	1e03      	subs	r3, r0, #0
    1930:	d1f9      	bne.n	1926 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1932:	68fb      	ldr	r3, [r7, #12]
    1934:	228f      	movs	r2, #143	; 0x8f
    1936:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1938:	68fb      	ldr	r3, [r7, #12]
    193a:	228f      	movs	r2, #143	; 0x8f
    193c:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    193e:	68fb      	ldr	r3, [r7, #12]
    1940:	681b      	ldr	r3, [r3, #0]
    1942:	2202      	movs	r2, #2
    1944:	4393      	bics	r3, r2
    1946:	001a      	movs	r2, r3
    1948:	68fb      	ldr	r3, [r7, #12]
    194a:	601a      	str	r2, [r3, #0]
}
    194c:	46c0      	nop			; (mov r8, r8)
    194e:	46bd      	mov	sp, r7
    1950:	b004      	add	sp, #16
    1952:	bd80      	pop	{r7, pc}
    1954:	00001725 	.word	0x00001725
    1958:	000018b5 	.word	0x000018b5
    195c:	000018e5 	.word	0x000018e5

00001960 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    1960:	b580      	push	{r7, lr}
    1962:	b084      	sub	sp, #16
    1964:	af00      	add	r7, sp, #0
    1966:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1968:	687b      	ldr	r3, [r7, #4]
    196a:	681b      	ldr	r3, [r3, #0]
    196c:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    196e:	687b      	ldr	r3, [r7, #4]
    1970:	0018      	movs	r0, r3
    1972:	4b09      	ldr	r3, [pc, #36]	; (1998 <spi_reset+0x38>)
    1974:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    1976:	46c0      	nop			; (mov r8, r8)
    1978:	687b      	ldr	r3, [r7, #4]
    197a:	0018      	movs	r0, r3
    197c:	4b07      	ldr	r3, [pc, #28]	; (199c <spi_reset+0x3c>)
    197e:	4798      	blx	r3
    1980:	1e03      	subs	r3, r0, #0
    1982:	d1f9      	bne.n	1978 <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    1984:	68fb      	ldr	r3, [r7, #12]
    1986:	681b      	ldr	r3, [r3, #0]
    1988:	2201      	movs	r2, #1
    198a:	431a      	orrs	r2, r3
    198c:	68fb      	ldr	r3, [r7, #12]
    198e:	601a      	str	r2, [r3, #0]
}
    1990:	46c0      	nop			; (mov r8, r8)
    1992:	46bd      	mov	sp, r7
    1994:	b004      	add	sp, #16
    1996:	bd80      	pop	{r7, pc}
    1998:	00001905 	.word	0x00001905
    199c:	000018e5 	.word	0x000018e5

000019a0 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    19a0:	b590      	push	{r4, r7, lr}
    19a2:	b093      	sub	sp, #76	; 0x4c
    19a4:	af00      	add	r7, sp, #0
    19a6:	6078      	str	r0, [r7, #4]
    19a8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    19aa:	687b      	ldr	r3, [r7, #4]
    19ac:	681b      	ldr	r3, [r3, #0]
    19ae:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    19b0:	687b      	ldr	r3, [r7, #4]
    19b2:	681b      	ldr	r3, [r3, #0]
    19b4:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    19b6:	231c      	movs	r3, #28
    19b8:	18fb      	adds	r3, r7, r3
    19ba:	0018      	movs	r0, r3
    19bc:	4b75      	ldr	r3, [pc, #468]	; (1b94 <_spi_set_config+0x1f4>)
    19be:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    19c0:	231c      	movs	r3, #28
    19c2:	18fb      	adds	r3, r7, r3
    19c4:	2200      	movs	r2, #0
    19c6:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    19c8:	683b      	ldr	r3, [r7, #0]
    19ca:	781b      	ldrb	r3, [r3, #0]
    19cc:	2b00      	cmp	r3, #0
    19ce:	d103      	bne.n	19d8 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    19d0:	231c      	movs	r3, #28
    19d2:	18fb      	adds	r3, r7, r3
    19d4:	2200      	movs	r2, #0
    19d6:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    19d8:	683b      	ldr	r3, [r7, #0]
    19da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    19dc:	230c      	movs	r3, #12
    19de:	18fb      	adds	r3, r7, r3
    19e0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    19e2:	683b      	ldr	r3, [r7, #0]
    19e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    19e6:	230c      	movs	r3, #12
    19e8:	18fb      	adds	r3, r7, r3
    19ea:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    19ec:	683b      	ldr	r3, [r7, #0]
    19ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    19f0:	230c      	movs	r3, #12
    19f2:	18fb      	adds	r3, r7, r3
    19f4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    19f6:	683b      	ldr	r3, [r7, #0]
    19f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    19fa:	230c      	movs	r3, #12
    19fc:	18fb      	adds	r3, r7, r3
    19fe:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1a00:	2347      	movs	r3, #71	; 0x47
    1a02:	18fb      	adds	r3, r7, r3
    1a04:	2200      	movs	r2, #0
    1a06:	701a      	strb	r2, [r3, #0]
    1a08:	e02c      	b.n	1a64 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1a0a:	2347      	movs	r3, #71	; 0x47
    1a0c:	18fb      	adds	r3, r7, r3
    1a0e:	781a      	ldrb	r2, [r3, #0]
    1a10:	230c      	movs	r3, #12
    1a12:	18fb      	adds	r3, r7, r3
    1a14:	0092      	lsls	r2, r2, #2
    1a16:	58d3      	ldr	r3, [r2, r3]
    1a18:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    1a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d109      	bne.n	1a34 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1a20:	2347      	movs	r3, #71	; 0x47
    1a22:	18fb      	adds	r3, r7, r3
    1a24:	781a      	ldrb	r2, [r3, #0]
    1a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1a28:	0011      	movs	r1, r2
    1a2a:	0018      	movs	r0, r3
    1a2c:	4b5a      	ldr	r3, [pc, #360]	; (1b98 <_spi_set_config+0x1f8>)
    1a2e:	4798      	blx	r3
    1a30:	0003      	movs	r3, r0
    1a32:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1a36:	3301      	adds	r3, #1
    1a38:	d00d      	beq.n	1a56 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1a3c:	b2da      	uxtb	r2, r3
    1a3e:	231c      	movs	r3, #28
    1a40:	18fb      	adds	r3, r7, r3
    1a42:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1a46:	0c1b      	lsrs	r3, r3, #16
    1a48:	b2db      	uxtb	r3, r3
    1a4a:	221c      	movs	r2, #28
    1a4c:	18ba      	adds	r2, r7, r2
    1a4e:	0011      	movs	r1, r2
    1a50:	0018      	movs	r0, r3
    1a52:	4b52      	ldr	r3, [pc, #328]	; (1b9c <_spi_set_config+0x1fc>)
    1a54:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    1a56:	2347      	movs	r3, #71	; 0x47
    1a58:	18fb      	adds	r3, r7, r3
    1a5a:	781a      	ldrb	r2, [r3, #0]
    1a5c:	2347      	movs	r3, #71	; 0x47
    1a5e:	18fb      	adds	r3, r7, r3
    1a60:	3201      	adds	r2, #1
    1a62:	701a      	strb	r2, [r3, #0]
    1a64:	2347      	movs	r3, #71	; 0x47
    1a66:	18fb      	adds	r3, r7, r3
    1a68:	781b      	ldrb	r3, [r3, #0]
    1a6a:	2b03      	cmp	r3, #3
    1a6c:	d9cd      	bls.n	1a0a <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    1a6e:	683b      	ldr	r3, [r7, #0]
    1a70:	781a      	ldrb	r2, [r3, #0]
    1a72:	687b      	ldr	r3, [r7, #4]
    1a74:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    1a76:	683b      	ldr	r3, [r7, #0]
    1a78:	7c1a      	ldrb	r2, [r3, #16]
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    1a7e:	683b      	ldr	r3, [r7, #0]
    1a80:	7c9a      	ldrb	r2, [r3, #18]
    1a82:	687b      	ldr	r3, [r7, #4]
    1a84:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    1a86:	683b      	ldr	r3, [r7, #0]
    1a88:	7d1a      	ldrb	r2, [r3, #20]
    1a8a:	687b      	ldr	r3, [r7, #4]
    1a8c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    1a8e:	230a      	movs	r3, #10
    1a90:	18fb      	adds	r3, r7, r3
    1a92:	2200      	movs	r2, #0
    1a94:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    1a96:	2300      	movs	r3, #0
    1a98:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    1a9a:	2300      	movs	r3, #0
    1a9c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    1a9e:	683b      	ldr	r3, [r7, #0]
    1aa0:	781b      	ldrb	r3, [r3, #0]
    1aa2:	2b01      	cmp	r3, #1
    1aa4:	d129      	bne.n	1afa <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1aa6:	687b      	ldr	r3, [r7, #4]
    1aa8:	681b      	ldr	r3, [r3, #0]
    1aaa:	0018      	movs	r0, r3
    1aac:	4b3c      	ldr	r3, [pc, #240]	; (1ba0 <_spi_set_config+0x200>)
    1aae:	4798      	blx	r3
    1ab0:	0003      	movs	r3, r0
    1ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1ab6:	3314      	adds	r3, #20
    1ab8:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    1aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1abc:	b2db      	uxtb	r3, r3
    1abe:	0018      	movs	r0, r3
    1ac0:	4b38      	ldr	r3, [pc, #224]	; (1ba4 <_spi_set_config+0x204>)
    1ac2:	4798      	blx	r3
    1ac4:	0003      	movs	r3, r0
    1ac6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    1ac8:	683b      	ldr	r3, [r7, #0]
    1aca:	699b      	ldr	r3, [r3, #24]
    1acc:	2223      	movs	r2, #35	; 0x23
    1ace:	18bc      	adds	r4, r7, r2
    1ad0:	220a      	movs	r2, #10
    1ad2:	18ba      	adds	r2, r7, r2
    1ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1ad6:	0018      	movs	r0, r3
    1ad8:	4b33      	ldr	r3, [pc, #204]	; (1ba8 <_spi_set_config+0x208>)
    1ada:	4798      	blx	r3
    1adc:	0003      	movs	r3, r0
    1ade:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    1ae0:	2323      	movs	r3, #35	; 0x23
    1ae2:	18fb      	adds	r3, r7, r3
    1ae4:	781b      	ldrb	r3, [r3, #0]
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d001      	beq.n	1aee <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    1aea:	2317      	movs	r3, #23
    1aec:	e04e      	b.n	1b8c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    1aee:	230a      	movs	r3, #10
    1af0:	18fb      	adds	r3, r7, r3
    1af2:	881b      	ldrh	r3, [r3, #0]
    1af4:	b2da      	uxtb	r2, r3
    1af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1af8:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    1afa:	683b      	ldr	r3, [r7, #0]
    1afc:	685b      	ldr	r3, [r3, #4]
    1afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b00:	4313      	orrs	r3, r2
    1b02:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    1b04:	683b      	ldr	r3, [r7, #0]
    1b06:	689b      	ldr	r3, [r3, #8]
    1b08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b0a:	4313      	orrs	r3, r2
    1b0c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    1b0e:	683b      	ldr	r3, [r7, #0]
    1b10:	68db      	ldr	r3, [r3, #12]
    1b12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    1b14:	4313      	orrs	r3, r2
    1b16:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    1b18:	683b      	ldr	r3, [r7, #0]
    1b1a:	7c1b      	ldrb	r3, [r3, #16]
    1b1c:	001a      	movs	r2, r3
    1b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b20:	4313      	orrs	r3, r2
    1b22:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1b24:	683b      	ldr	r3, [r7, #0]
    1b26:	7c5b      	ldrb	r3, [r3, #17]
    1b28:	2b00      	cmp	r3, #0
    1b2a:	d103      	bne.n	1b34 <_spi_set_config+0x194>
    1b2c:	4b1f      	ldr	r3, [pc, #124]	; (1bac <_spi_set_config+0x20c>)
    1b2e:	4798      	blx	r3
    1b30:	1e03      	subs	r3, r0, #0
    1b32:	d003      	beq.n	1b3c <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    1b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b36:	2280      	movs	r2, #128	; 0x80
    1b38:	4313      	orrs	r3, r2
    1b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    1b3c:	683b      	ldr	r3, [r7, #0]
    1b3e:	7c9b      	ldrb	r3, [r3, #18]
    1b40:	2b00      	cmp	r3, #0
    1b42:	d004      	beq.n	1b4e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    1b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b46:	2280      	movs	r2, #128	; 0x80
    1b48:	0292      	lsls	r2, r2, #10
    1b4a:	4313      	orrs	r3, r2
    1b4c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    1b4e:	683b      	ldr	r3, [r7, #0]
    1b50:	7cdb      	ldrb	r3, [r3, #19]
    1b52:	2b00      	cmp	r3, #0
    1b54:	d004      	beq.n	1b60 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    1b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b58:	2280      	movs	r2, #128	; 0x80
    1b5a:	0092      	lsls	r2, r2, #2
    1b5c:	4313      	orrs	r3, r2
    1b5e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    1b60:	683b      	ldr	r3, [r7, #0]
    1b62:	7d1b      	ldrb	r3, [r3, #20]
    1b64:	2b00      	cmp	r3, #0
    1b66:	d004      	beq.n	1b72 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    1b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b6a:	2280      	movs	r2, #128	; 0x80
    1b6c:	0192      	lsls	r2, r2, #6
    1b6e:	4313      	orrs	r3, r2
    1b70:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    1b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b74:	681a      	ldr	r2, [r3, #0]
    1b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b78:	431a      	orrs	r2, r3
    1b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b7c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    1b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b80:	685a      	ldr	r2, [r3, #4]
    1b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1b84:	431a      	orrs	r2, r3
    1b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b88:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    1b8a:	2300      	movs	r3, #0
}
    1b8c:	0018      	movs	r0, r3
    1b8e:	46bd      	mov	sp, r7
    1b90:	b013      	add	sp, #76	; 0x4c
    1b92:	bd90      	pop	{r4, r7, pc}
    1b94:	000017f9 	.word	0x000017f9
    1b98:	00001499 	.word	0x00001499
    1b9c:	00003d81 	.word	0x00003d81
    1ba0:	00001655 	.word	0x00001655
    1ba4:	00003bb9 	.word	0x00003bb9
    1ba8:	000011cf 	.word	0x000011cf
    1bac:	00001895 	.word	0x00001895

00001bb0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1bb0:	b590      	push	{r4, r7, lr}
    1bb2:	b08b      	sub	sp, #44	; 0x2c
    1bb4:	af00      	add	r7, sp, #0
    1bb6:	60f8      	str	r0, [r7, #12]
    1bb8:	60b9      	str	r1, [r7, #8]
    1bba:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1bbc:	68fb      	ldr	r3, [r7, #12]
    1bbe:	68ba      	ldr	r2, [r7, #8]
    1bc0:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    1bc2:	68fb      	ldr	r3, [r7, #12]
    1bc4:	681b      	ldr	r3, [r3, #0]
    1bc6:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1bc8:	6a3b      	ldr	r3, [r7, #32]
    1bca:	681b      	ldr	r3, [r3, #0]
    1bcc:	2202      	movs	r2, #2
    1bce:	4013      	ands	r3, r2
    1bd0:	d001      	beq.n	1bd6 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1bd2:	231c      	movs	r3, #28
    1bd4:	e09c      	b.n	1d10 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1bd6:	6a3b      	ldr	r3, [r7, #32]
    1bd8:	681b      	ldr	r3, [r3, #0]
    1bda:	2201      	movs	r2, #1
    1bdc:	4013      	ands	r3, r2
    1bde:	d001      	beq.n	1be4 <spi_init+0x34>
		return STATUS_BUSY;
    1be0:	2305      	movs	r3, #5
    1be2:	e095      	b.n	1d10 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1be4:	68fb      	ldr	r3, [r7, #12]
    1be6:	681b      	ldr	r3, [r3, #0]
    1be8:	0018      	movs	r0, r3
    1bea:	4b4b      	ldr	r3, [pc, #300]	; (1d18 <spi_init+0x168>)
    1bec:	4798      	blx	r3
    1bee:	0003      	movs	r3, r0
    1bf0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1bf2:	69fb      	ldr	r3, [r7, #28]
    1bf4:	3302      	adds	r3, #2
    1bf6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1bf8:	69fb      	ldr	r3, [r7, #28]
    1bfa:	3314      	adds	r3, #20
    1bfc:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1bfe:	2201      	movs	r2, #1
    1c00:	69bb      	ldr	r3, [r7, #24]
    1c02:	409a      	lsls	r2, r3
    1c04:	0013      	movs	r3, r2
    1c06:	0019      	movs	r1, r3
    1c08:	2002      	movs	r0, #2
    1c0a:	4b44      	ldr	r3, [pc, #272]	; (1d1c <spi_init+0x16c>)
    1c0c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1c0e:	2310      	movs	r3, #16
    1c10:	18fb      	adds	r3, r7, r3
    1c12:	0018      	movs	r0, r3
    1c14:	4b42      	ldr	r3, [pc, #264]	; (1d20 <spi_init+0x170>)
    1c16:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    1c18:	687b      	ldr	r3, [r7, #4]
    1c1a:	2224      	movs	r2, #36	; 0x24
    1c1c:	5c9a      	ldrb	r2, [r3, r2]
    1c1e:	2310      	movs	r3, #16
    1c20:	18fb      	adds	r3, r7, r3
    1c22:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1c24:	697b      	ldr	r3, [r7, #20]
    1c26:	b2db      	uxtb	r3, r3
    1c28:	2210      	movs	r2, #16
    1c2a:	18ba      	adds	r2, r7, r2
    1c2c:	0011      	movs	r1, r2
    1c2e:	0018      	movs	r0, r3
    1c30:	4b3c      	ldr	r3, [pc, #240]	; (1d24 <spi_init+0x174>)
    1c32:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1c34:	697b      	ldr	r3, [r7, #20]
    1c36:	b2db      	uxtb	r3, r3
    1c38:	0018      	movs	r0, r3
    1c3a:	4b3b      	ldr	r3, [pc, #236]	; (1d28 <spi_init+0x178>)
    1c3c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1c3e:	687b      	ldr	r3, [r7, #4]
    1c40:	2224      	movs	r2, #36	; 0x24
    1c42:	5c9b      	ldrb	r3, [r3, r2]
    1c44:	2100      	movs	r1, #0
    1c46:	0018      	movs	r0, r3
    1c48:	4b38      	ldr	r3, [pc, #224]	; (1d2c <spi_init+0x17c>)
    1c4a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	781b      	ldrb	r3, [r3, #0]
    1c50:	2b01      	cmp	r3, #1
    1c52:	d105      	bne.n	1c60 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1c54:	6a3b      	ldr	r3, [r7, #32]
    1c56:	681b      	ldr	r3, [r3, #0]
    1c58:	220c      	movs	r2, #12
    1c5a:	431a      	orrs	r2, r3
    1c5c:	6a3b      	ldr	r3, [r7, #32]
    1c5e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1c60:	2327      	movs	r3, #39	; 0x27
    1c62:	18fb      	adds	r3, r7, r3
    1c64:	2200      	movs	r2, #0
    1c66:	701a      	strb	r2, [r3, #0]
    1c68:	e010      	b.n	1c8c <spi_init+0xdc>
		module->callback[i]        = NULL;
    1c6a:	2327      	movs	r3, #39	; 0x27
    1c6c:	18fb      	adds	r3, r7, r3
    1c6e:	781b      	ldrb	r3, [r3, #0]
    1c70:	68fa      	ldr	r2, [r7, #12]
    1c72:	3302      	adds	r3, #2
    1c74:	009b      	lsls	r3, r3, #2
    1c76:	18d3      	adds	r3, r2, r3
    1c78:	3304      	adds	r3, #4
    1c7a:	2200      	movs	r2, #0
    1c7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1c7e:	2327      	movs	r3, #39	; 0x27
    1c80:	18fb      	adds	r3, r7, r3
    1c82:	781a      	ldrb	r2, [r3, #0]
    1c84:	2327      	movs	r3, #39	; 0x27
    1c86:	18fb      	adds	r3, r7, r3
    1c88:	3201      	adds	r2, #1
    1c8a:	701a      	strb	r2, [r3, #0]
    1c8c:	2327      	movs	r3, #39	; 0x27
    1c8e:	18fb      	adds	r3, r7, r3
    1c90:	781b      	ldrb	r3, [r3, #0]
    1c92:	2b06      	cmp	r3, #6
    1c94:	d9e9      	bls.n	1c6a <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    1c96:	68fb      	ldr	r3, [r7, #12]
    1c98:	2200      	movs	r2, #0
    1c9a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1c9c:	68fb      	ldr	r3, [r7, #12]
    1c9e:	2200      	movs	r2, #0
    1ca0:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1ca2:	68fb      	ldr	r3, [r7, #12]
    1ca4:	2200      	movs	r2, #0
    1ca6:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1ca8:	68fb      	ldr	r3, [r7, #12]
    1caa:	2200      	movs	r2, #0
    1cac:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    1cae:	68fb      	ldr	r3, [r7, #12]
    1cb0:	2236      	movs	r2, #54	; 0x36
    1cb2:	2100      	movs	r1, #0
    1cb4:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    1cb6:	68fb      	ldr	r3, [r7, #12]
    1cb8:	2237      	movs	r2, #55	; 0x37
    1cba:	2100      	movs	r1, #0
    1cbc:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    1cbe:	68fb      	ldr	r3, [r7, #12]
    1cc0:	2238      	movs	r2, #56	; 0x38
    1cc2:	2100      	movs	r1, #0
    1cc4:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    1cc6:	68fb      	ldr	r3, [r7, #12]
    1cc8:	2203      	movs	r2, #3
    1cca:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    1ccc:	68fb      	ldr	r3, [r7, #12]
    1cce:	2200      	movs	r2, #0
    1cd0:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1cd2:	68fb      	ldr	r3, [r7, #12]
    1cd4:	681b      	ldr	r3, [r3, #0]
    1cd6:	2213      	movs	r2, #19
    1cd8:	18bc      	adds	r4, r7, r2
    1cda:	0018      	movs	r0, r3
    1cdc:	4b0e      	ldr	r3, [pc, #56]	; (1d18 <spi_init+0x168>)
    1cde:	4798      	blx	r3
    1ce0:	0003      	movs	r3, r0
    1ce2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1ce4:	4a12      	ldr	r2, [pc, #72]	; (1d30 <spi_init+0x180>)
    1ce6:	2313      	movs	r3, #19
    1ce8:	18fb      	adds	r3, r7, r3
    1cea:	781b      	ldrb	r3, [r3, #0]
    1cec:	0011      	movs	r1, r2
    1cee:	0018      	movs	r0, r3
    1cf0:	4b10      	ldr	r3, [pc, #64]	; (1d34 <spi_init+0x184>)
    1cf2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1cf4:	2313      	movs	r3, #19
    1cf6:	18fb      	adds	r3, r7, r3
    1cf8:	781a      	ldrb	r2, [r3, #0]
    1cfa:	4b0f      	ldr	r3, [pc, #60]	; (1d38 <spi_init+0x188>)
    1cfc:	0092      	lsls	r2, r2, #2
    1cfe:	68f9      	ldr	r1, [r7, #12]
    1d00:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    1d02:	687a      	ldr	r2, [r7, #4]
    1d04:	68fb      	ldr	r3, [r7, #12]
    1d06:	0011      	movs	r1, r2
    1d08:	0018      	movs	r0, r3
    1d0a:	4b0c      	ldr	r3, [pc, #48]	; (1d3c <spi_init+0x18c>)
    1d0c:	4798      	blx	r3
    1d0e:	0003      	movs	r3, r0
}
    1d10:	0018      	movs	r0, r3
    1d12:	46bd      	mov	sp, r7
    1d14:	b00b      	add	sp, #44	; 0x2c
    1d16:	bd90      	pop	{r4, r7, pc}
    1d18:	00001655 	.word	0x00001655
    1d1c:	00001839 	.word	0x00001839
    1d20:	00001821 	.word	0x00001821
    1d24:	00003a95 	.word	0x00003a95
    1d28:	00003ad9 	.word	0x00003ad9
    1d2c:	0000140d 	.word	0x0000140d
    1d30:	00001e99 	.word	0x00001e99
    1d34:	000016b9 	.word	0x000016b9
    1d38:	2000098c 	.word	0x2000098c
    1d3c:	000019a1 	.word	0x000019a1

00001d40 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    1d40:	b580      	push	{r7, lr}
    1d42:	b084      	sub	sp, #16
    1d44:	af00      	add	r7, sp, #0
    1d46:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1d48:	687b      	ldr	r3, [r7, #4]
    1d4a:	681b      	ldr	r3, [r3, #0]
    1d4c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    1d4e:	687b      	ldr	r3, [r7, #4]
    1d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d52:	781b      	ldrb	r3, [r3, #0]
    1d54:	b2da      	uxtb	r2, r3
    1d56:	230e      	movs	r3, #14
    1d58:	18fb      	adds	r3, r7, r3
    1d5a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    1d5c:	687b      	ldr	r3, [r7, #4]
    1d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d60:	1c5a      	adds	r2, r3, #1
    1d62:	687b      	ldr	r3, [r7, #4]
    1d64:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1d66:	687b      	ldr	r3, [r7, #4]
    1d68:	799b      	ldrb	r3, [r3, #6]
    1d6a:	2b01      	cmp	r3, #1
    1d6c:	d113      	bne.n	1d96 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d72:	781b      	ldrb	r3, [r3, #0]
    1d74:	b2db      	uxtb	r3, r3
    1d76:	021b      	lsls	r3, r3, #8
    1d78:	b21a      	sxth	r2, r3
    1d7a:	230e      	movs	r3, #14
    1d7c:	18fb      	adds	r3, r7, r3
    1d7e:	2100      	movs	r1, #0
    1d80:	5e5b      	ldrsh	r3, [r3, r1]
    1d82:	4313      	orrs	r3, r2
    1d84:	b21a      	sxth	r2, r3
    1d86:	230e      	movs	r3, #14
    1d88:	18fb      	adds	r3, r7, r3
    1d8a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1d90:	1c5a      	adds	r2, r3, #1
    1d92:	687b      	ldr	r3, [r7, #4]
    1d94:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    1d96:	230e      	movs	r3, #14
    1d98:	18fb      	adds	r3, r7, r3
    1d9a:	881b      	ldrh	r3, [r3, #0]
    1d9c:	05db      	lsls	r3, r3, #23
    1d9e:	0dda      	lsrs	r2, r3, #23
    1da0:	68bb      	ldr	r3, [r7, #8]
    1da2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    1da4:	687b      	ldr	r3, [r7, #4]
    1da6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1da8:	b29b      	uxth	r3, r3
    1daa:	3b01      	subs	r3, #1
    1dac:	b29a      	uxth	r2, r3
    1dae:	687b      	ldr	r3, [r7, #4]
    1db0:	869a      	strh	r2, [r3, #52]	; 0x34
}
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	46bd      	mov	sp, r7
    1db6:	b004      	add	sp, #16
    1db8:	bd80      	pop	{r7, pc}
	...

00001dbc <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	b084      	sub	sp, #16
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	681b      	ldr	r3, [r3, #0]
    1dc8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    1dca:	4b08      	ldr	r3, [pc, #32]	; (1dec <_spi_write_dummy+0x30>)
    1dcc:	881b      	ldrh	r3, [r3, #0]
    1dce:	001a      	movs	r2, r3
    1dd0:	68fb      	ldr	r3, [r7, #12]
    1dd2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1dd4:	687b      	ldr	r3, [r7, #4]
    1dd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1dd8:	b29b      	uxth	r3, r3
    1dda:	3b01      	subs	r3, #1
    1ddc:	b29a      	uxth	r2, r3
    1dde:	687b      	ldr	r3, [r7, #4]
    1de0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	46bd      	mov	sp, r7
    1de6:	b004      	add	sp, #16
    1de8:	bd80      	pop	{r7, pc}
    1dea:	46c0      	nop			; (mov r8, r8)
    1dec:	200009a4 	.word	0x200009a4

00001df0 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b084      	sub	sp, #16
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1df8:	687b      	ldr	r3, [r7, #4]
    1dfa:	681b      	ldr	r3, [r3, #0]
    1dfc:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    1dfe:	230a      	movs	r3, #10
    1e00:	18fb      	adds	r3, r7, r3
    1e02:	2200      	movs	r2, #0
    1e04:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    1e06:	68fb      	ldr	r3, [r7, #12]
    1e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1e0a:	230a      	movs	r3, #10
    1e0c:	18fb      	adds	r3, r7, r3
    1e0e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1e14:	b29b      	uxth	r3, r3
    1e16:	3b01      	subs	r3, #1
    1e18:	b29a      	uxth	r2, r3
    1e1a:	687b      	ldr	r3, [r7, #4]
    1e1c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	46bd      	mov	sp, r7
    1e22:	b004      	add	sp, #16
    1e24:	bd80      	pop	{r7, pc}

00001e26 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    1e26:	b580      	push	{r7, lr}
    1e28:	b084      	sub	sp, #16
    1e2a:	af00      	add	r7, sp, #0
    1e2c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1e2e:	687b      	ldr	r3, [r7, #4]
    1e30:	681b      	ldr	r3, [r3, #0]
    1e32:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    1e34:	68fb      	ldr	r3, [r7, #12]
    1e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e38:	b29a      	uxth	r2, r3
    1e3a:	230a      	movs	r3, #10
    1e3c:	18fb      	adds	r3, r7, r3
    1e3e:	05d2      	lsls	r2, r2, #23
    1e40:	0dd2      	lsrs	r2, r2, #23
    1e42:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e48:	220a      	movs	r2, #10
    1e4a:	18ba      	adds	r2, r7, r2
    1e4c:	8812      	ldrh	r2, [r2, #0]
    1e4e:	b2d2      	uxtb	r2, r2
    1e50:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    1e52:	687b      	ldr	r3, [r7, #4]
    1e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e56:	1c5a      	adds	r2, r3, #1
    1e58:	687b      	ldr	r3, [r7, #4]
    1e5a:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    1e5c:	687b      	ldr	r3, [r7, #4]
    1e5e:	799b      	ldrb	r3, [r3, #6]
    1e60:	2b01      	cmp	r3, #1
    1e62:	d10d      	bne.n	1e80 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e68:	220a      	movs	r2, #10
    1e6a:	18ba      	adds	r2, r7, r2
    1e6c:	8812      	ldrh	r2, [r2, #0]
    1e6e:	0a12      	lsrs	r2, r2, #8
    1e70:	b292      	uxth	r2, r2
    1e72:	b2d2      	uxtb	r2, r2
    1e74:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    1e76:	687b      	ldr	r3, [r7, #4]
    1e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1e7a:	1c5a      	adds	r2, r3, #1
    1e7c:	687b      	ldr	r3, [r7, #4]
    1e7e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    1e80:	687b      	ldr	r3, [r7, #4]
    1e82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    1e84:	b29b      	uxth	r3, r3
    1e86:	3b01      	subs	r3, #1
    1e88:	b29a      	uxth	r2, r3
    1e8a:	687b      	ldr	r3, [r7, #4]
    1e8c:	861a      	strh	r2, [r3, #48]	; 0x30
}
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	46bd      	mov	sp, r7
    1e92:	b004      	add	sp, #16
    1e94:	bd80      	pop	{r7, pc}
	...

00001e98 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	b086      	sub	sp, #24
    1e9c:	af00      	add	r7, sp, #0
    1e9e:	0002      	movs	r2, r0
    1ea0:	1dfb      	adds	r3, r7, #7
    1ea2:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    1ea4:	1dfb      	adds	r3, r7, #7
    1ea6:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    1ea8:	4b96      	ldr	r3, [pc, #600]	; (2104 <STACK_SIZE+0x104>)
    1eaa:	0092      	lsls	r2, r2, #2
    1eac:	58d3      	ldr	r3, [r2, r3]
    1eae:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    1eb0:	697b      	ldr	r3, [r7, #20]
    1eb2:	681b      	ldr	r3, [r3, #0]
    1eb4:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    1eb6:	697b      	ldr	r3, [r7, #20]
    1eb8:	2237      	movs	r2, #55	; 0x37
    1eba:	5c9a      	ldrb	r2, [r3, r2]
    1ebc:	697b      	ldr	r3, [r7, #20]
    1ebe:	2136      	movs	r1, #54	; 0x36
    1ec0:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    1ec2:	230f      	movs	r3, #15
    1ec4:	18fb      	adds	r3, r7, r3
    1ec6:	400a      	ands	r2, r1
    1ec8:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    1eca:	693b      	ldr	r3, [r7, #16]
    1ecc:	7e1b      	ldrb	r3, [r3, #24]
    1ece:	b2da      	uxtb	r2, r3
    1ed0:	230c      	movs	r3, #12
    1ed2:	18fb      	adds	r3, r7, r3
    1ed4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    1ed6:	693b      	ldr	r3, [r7, #16]
    1ed8:	7d9b      	ldrb	r3, [r3, #22]
    1eda:	b2db      	uxtb	r3, r3
    1edc:	b29a      	uxth	r2, r3
    1ede:	230c      	movs	r3, #12
    1ee0:	18fb      	adds	r3, r7, r3
    1ee2:	210c      	movs	r1, #12
    1ee4:	1879      	adds	r1, r7, r1
    1ee6:	8809      	ldrh	r1, [r1, #0]
    1ee8:	400a      	ands	r2, r1
    1eea:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    1eec:	230c      	movs	r3, #12
    1eee:	18fb      	adds	r3, r7, r3
    1ef0:	881b      	ldrh	r3, [r3, #0]
    1ef2:	2201      	movs	r2, #1
    1ef4:	4013      	ands	r3, r2
    1ef6:	d038      	beq.n	1f6a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    1ef8:	697b      	ldr	r3, [r7, #20]
    1efa:	795b      	ldrb	r3, [r3, #5]
    1efc:	2b01      	cmp	r3, #1
    1efe:	d110      	bne.n	1f22 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    1f00:	697b      	ldr	r3, [r7, #20]
    1f02:	7a5b      	ldrb	r3, [r3, #9]
    1f04:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    1f06:	2b00      	cmp	r3, #0
    1f08:	d10b      	bne.n	1f22 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    1f0a:	697b      	ldr	r3, [r7, #20]
    1f0c:	0018      	movs	r0, r3
    1f0e:	4b7e      	ldr	r3, [pc, #504]	; (2108 <STACK_SIZE+0x108>)
    1f10:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    1f12:	697b      	ldr	r3, [r7, #20]
    1f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1f16:	b29b      	uxth	r3, r3
    1f18:	2b00      	cmp	r3, #0
    1f1a:	d102      	bne.n	1f22 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1f1c:	693b      	ldr	r3, [r7, #16]
    1f1e:	2201      	movs	r2, #1
    1f20:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    1f22:	697b      	ldr	r3, [r7, #20]
    1f24:	795b      	ldrb	r3, [r3, #5]
		if (0
    1f26:	2b01      	cmp	r3, #1
    1f28:	d11f      	bne.n	1f6a <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    1f2a:	697b      	ldr	r3, [r7, #20]
    1f2c:	7a5b      	ldrb	r3, [r3, #9]
    1f2e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    1f30:	2b00      	cmp	r3, #0
    1f32:	d01a      	beq.n	1f6a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    1f34:	697b      	ldr	r3, [r7, #20]
    1f36:	0018      	movs	r0, r3
    1f38:	4b74      	ldr	r3, [pc, #464]	; (210c <STACK_SIZE+0x10c>)
    1f3a:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    1f3c:	697b      	ldr	r3, [r7, #20]
    1f3e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    1f40:	b29b      	uxth	r3, r3
    1f42:	2b00      	cmp	r3, #0
    1f44:	d111      	bne.n	1f6a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    1f46:	693b      	ldr	r3, [r7, #16]
    1f48:	2201      	movs	r2, #1
    1f4a:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    1f4c:	697b      	ldr	r3, [r7, #20]
    1f4e:	7a5b      	ldrb	r3, [r3, #9]
    1f50:	b2db      	uxtb	r3, r3
    1f52:	2b01      	cmp	r3, #1
    1f54:	d109      	bne.n	1f6a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    1f56:	697b      	ldr	r3, [r7, #20]
    1f58:	79db      	ldrb	r3, [r3, #7]
    1f5a:	2201      	movs	r2, #1
    1f5c:	4053      	eors	r3, r2
    1f5e:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    1f60:	2b00      	cmp	r3, #0
    1f62:	d002      	beq.n	1f6a <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    1f64:	693b      	ldr	r3, [r7, #16]
    1f66:	2202      	movs	r2, #2
    1f68:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    1f6a:	230c      	movs	r3, #12
    1f6c:	18fb      	adds	r3, r7, r3
    1f6e:	881b      	ldrh	r3, [r3, #0]
    1f70:	2204      	movs	r2, #4
    1f72:	4013      	ands	r3, r2
    1f74:	d100      	bne.n	1f78 <_spi_interrupt_handler+0xe0>
    1f76:	e07e      	b.n	2076 <STACK_SIZE+0x76>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    1f78:	693b      	ldr	r3, [r7, #16]
    1f7a:	8b5b      	ldrh	r3, [r3, #26]
    1f7c:	b29b      	uxth	r3, r3
    1f7e:	001a      	movs	r2, r3
    1f80:	2304      	movs	r3, #4
    1f82:	4013      	ands	r3, r2
    1f84:	d022      	beq.n	1fcc <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    1f86:	697b      	ldr	r3, [r7, #20]
    1f88:	7a5b      	ldrb	r3, [r3, #9]
    1f8a:	b2db      	uxtb	r3, r3
    1f8c:	2b01      	cmp	r3, #1
    1f8e:	d014      	beq.n	1fba <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    1f90:	697b      	ldr	r3, [r7, #20]
    1f92:	2238      	movs	r2, #56	; 0x38
    1f94:	211e      	movs	r1, #30
    1f96:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    1f98:	697b      	ldr	r3, [r7, #20]
    1f9a:	2203      	movs	r2, #3
    1f9c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    1f9e:	693b      	ldr	r3, [r7, #16]
    1fa0:	2205      	movs	r2, #5
    1fa2:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    1fa4:	230f      	movs	r3, #15
    1fa6:	18fb      	adds	r3, r7, r3
    1fa8:	781b      	ldrb	r3, [r3, #0]
    1faa:	2208      	movs	r2, #8
    1fac:	4013      	ands	r3, r2
    1fae:	d004      	beq.n	1fba <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    1fb0:	697b      	ldr	r3, [r7, #20]
    1fb2:	699b      	ldr	r3, [r3, #24]
    1fb4:	697a      	ldr	r2, [r7, #20]
    1fb6:	0010      	movs	r0, r2
    1fb8:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    1fba:	693b      	ldr	r3, [r7, #16]
    1fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1fbe:	230a      	movs	r3, #10
    1fc0:	18fb      	adds	r3, r7, r3
    1fc2:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    1fc4:	693b      	ldr	r3, [r7, #16]
    1fc6:	2204      	movs	r2, #4
    1fc8:	835a      	strh	r2, [r3, #26]
    1fca:	e054      	b.n	2076 <STACK_SIZE+0x76>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    1fcc:	697b      	ldr	r3, [r7, #20]
    1fce:	7a5b      	ldrb	r3, [r3, #9]
    1fd0:	b2db      	uxtb	r3, r3
    1fd2:	2b01      	cmp	r3, #1
    1fd4:	d11e      	bne.n	2014 <STACK_SIZE+0x14>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    1fd6:	697b      	ldr	r3, [r7, #20]
    1fd8:	0018      	movs	r0, r3
    1fda:	4b4d      	ldr	r3, [pc, #308]	; (2110 <STACK_SIZE+0x110>)
    1fdc:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    1fde:	697b      	ldr	r3, [r7, #20]
    1fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    1fe2:	b29b      	uxth	r3, r3
    1fe4:	2b00      	cmp	r3, #0
    1fe6:	d146      	bne.n	2076 <STACK_SIZE+0x76>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    1fe8:	693b      	ldr	r3, [r7, #16]
    1fea:	2204      	movs	r2, #4
    1fec:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    1fee:	697b      	ldr	r3, [r7, #20]
    1ff0:	2238      	movs	r2, #56	; 0x38
    1ff2:	2100      	movs	r1, #0
    1ff4:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    1ff6:	697b      	ldr	r3, [r7, #20]
    1ff8:	2203      	movs	r2, #3
    1ffa:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    1ffc:	230f      	movs	r3, #15
    1ffe:	18fb      	adds	r3, r7, r3
    2000:	781b      	ldrb	r3, [r3, #0]
    2002:	2201      	movs	r2, #1
    2004:	4013      	ands	r3, r2
    2006:	d036      	beq.n	2076 <STACK_SIZE+0x76>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    2008:	697b      	ldr	r3, [r7, #20]
    200a:	68db      	ldr	r3, [r3, #12]
    200c:	697a      	ldr	r2, [r7, #20]
    200e:	0010      	movs	r0, r2
    2010:	4798      	blx	r3
    2012:	e030      	b.n	2076 <STACK_SIZE+0x76>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    2014:	697b      	ldr	r3, [r7, #20]
    2016:	0018      	movs	r0, r3
    2018:	4b3e      	ldr	r3, [pc, #248]	; (2114 <STACK_SIZE+0x114>)
    201a:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    201c:	697b      	ldr	r3, [r7, #20]
    201e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    2020:	b29b      	uxth	r3, r3
    2022:	2b00      	cmp	r3, #0
    2024:	d127      	bne.n	2076 <STACK_SIZE+0x76>
					module->status = STATUS_OK;
    2026:	697b      	ldr	r3, [r7, #20]
    2028:	2238      	movs	r2, #56	; 0x38
    202a:	2100      	movs	r1, #0
    202c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    202e:	693b      	ldr	r3, [r7, #16]
    2030:	2204      	movs	r2, #4
    2032:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2034:	697b      	ldr	r3, [r7, #20]
    2036:	7a5b      	ldrb	r3, [r3, #9]
    2038:	b2db      	uxtb	r3, r3
    203a:	2b02      	cmp	r3, #2
    203c:	d10b      	bne.n	2056 <STACK_SIZE+0x56>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    203e:	230f      	movs	r3, #15
    2040:	18fb      	adds	r3, r7, r3
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	2204      	movs	r2, #4
    2046:	4013      	ands	r3, r2
    2048:	d015      	beq.n	2076 <STACK_SIZE+0x76>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    204a:	697b      	ldr	r3, [r7, #20]
    204c:	695b      	ldr	r3, [r3, #20]
    204e:	697a      	ldr	r2, [r7, #20]
    2050:	0010      	movs	r0, r2
    2052:	4798      	blx	r3
    2054:	e00f      	b.n	2076 <STACK_SIZE+0x76>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    2056:	697b      	ldr	r3, [r7, #20]
    2058:	7a5b      	ldrb	r3, [r3, #9]
    205a:	b2db      	uxtb	r3, r3
    205c:	2b00      	cmp	r3, #0
    205e:	d10a      	bne.n	2076 <STACK_SIZE+0x76>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2060:	230f      	movs	r3, #15
    2062:	18fb      	adds	r3, r7, r3
    2064:	781b      	ldrb	r3, [r3, #0]
    2066:	2202      	movs	r2, #2
    2068:	4013      	ands	r3, r2
    206a:	d004      	beq.n	2076 <STACK_SIZE+0x76>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    206c:	697b      	ldr	r3, [r7, #20]
    206e:	691b      	ldr	r3, [r3, #16]
    2070:	697a      	ldr	r2, [r7, #20]
    2072:	0010      	movs	r0, r2
    2074:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2076:	230c      	movs	r3, #12
    2078:	18fb      	adds	r3, r7, r3
    207a:	881b      	ldrh	r3, [r3, #0]
    207c:	2202      	movs	r2, #2
    207e:	4013      	ands	r3, r2
    2080:	d024      	beq.n	20cc <STACK_SIZE+0xcc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2082:	697b      	ldr	r3, [r7, #20]
    2084:	795b      	ldrb	r3, [r3, #5]
    2086:	2b01      	cmp	r3, #1
    2088:	d120      	bne.n	20cc <STACK_SIZE+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    208a:	697b      	ldr	r3, [r7, #20]
    208c:	7a5b      	ldrb	r3, [r3, #9]
    208e:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    2090:	2b01      	cmp	r3, #1
    2092:	d11b      	bne.n	20cc <STACK_SIZE+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2094:	697b      	ldr	r3, [r7, #20]
    2096:	79db      	ldrb	r3, [r3, #7]
    2098:	2201      	movs	r2, #1
    209a:	4053      	eors	r3, r2
    209c:	b2db      	uxtb	r3, r3
    209e:	2b00      	cmp	r3, #0
    20a0:	d014      	beq.n	20cc <STACK_SIZE+0xcc>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    20a2:	693b      	ldr	r3, [r7, #16]
    20a4:	2202      	movs	r2, #2
    20a6:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    20a8:	697b      	ldr	r3, [r7, #20]
    20aa:	2203      	movs	r2, #3
    20ac:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    20ae:	697b      	ldr	r3, [r7, #20]
    20b0:	2238      	movs	r2, #56	; 0x38
    20b2:	2100      	movs	r1, #0
    20b4:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    20b6:	230f      	movs	r3, #15
    20b8:	18fb      	adds	r3, r7, r3
    20ba:	781b      	ldrb	r3, [r3, #0]
    20bc:	2201      	movs	r2, #1
    20be:	4013      	ands	r3, r2
    20c0:	d004      	beq.n	20cc <STACK_SIZE+0xcc>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    20c2:	697b      	ldr	r3, [r7, #20]
    20c4:	68db      	ldr	r3, [r3, #12]
    20c6:	697a      	ldr	r2, [r7, #20]
    20c8:	0010      	movs	r0, r2
    20ca:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    20cc:	230c      	movs	r3, #12
    20ce:	18fb      	adds	r3, r7, r3
    20d0:	881b      	ldrh	r3, [r3, #0]
    20d2:	2280      	movs	r2, #128	; 0x80
    20d4:	4013      	ands	r3, r2
    20d6:	d010      	beq.n	20fa <STACK_SIZE+0xfa>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    20d8:	693b      	ldr	r3, [r7, #16]
    20da:	2280      	movs	r2, #128	; 0x80
    20dc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    20de:	693b      	ldr	r3, [r7, #16]
    20e0:	2280      	movs	r2, #128	; 0x80
    20e2:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    20e4:	230f      	movs	r3, #15
    20e6:	18fb      	adds	r3, r7, r3
    20e8:	781b      	ldrb	r3, [r3, #0]
    20ea:	2240      	movs	r2, #64	; 0x40
    20ec:	4013      	ands	r3, r2
    20ee:	d004      	beq.n	20fa <STACK_SIZE+0xfa>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    20f0:	697b      	ldr	r3, [r7, #20]
    20f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    20f4:	697a      	ldr	r2, [r7, #20]
    20f6:	0010      	movs	r0, r2
    20f8:	4798      	blx	r3
		}
	}
#  endif
}
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	46bd      	mov	sp, r7
    20fe:	b006      	add	sp, #24
    2100:	bd80      	pop	{r7, pc}
    2102:	46c0      	nop			; (mov r8, r8)
    2104:	2000098c 	.word	0x2000098c
    2108:	00001dbd 	.word	0x00001dbd
    210c:	00001d41 	.word	0x00001d41
    2110:	00001df1 	.word	0x00001df1
    2114:	00001e27 	.word	0x00001e27

00002118 <system_gclk_chan_get_config_defaults>:
{
    2118:	b580      	push	{r7, lr}
    211a:	b082      	sub	sp, #8
    211c:	af00      	add	r7, sp, #0
    211e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2120:	687b      	ldr	r3, [r7, #4]
    2122:	2200      	movs	r2, #0
    2124:	701a      	strb	r2, [r3, #0]
}
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	46bd      	mov	sp, r7
    212a:	b002      	add	sp, #8
    212c:	bd80      	pop	{r7, pc}
	...

00002130 <system_apb_clock_set_mask>:
{
    2130:	b580      	push	{r7, lr}
    2132:	b082      	sub	sp, #8
    2134:	af00      	add	r7, sp, #0
    2136:	0002      	movs	r2, r0
    2138:	6039      	str	r1, [r7, #0]
    213a:	1dfb      	adds	r3, r7, #7
    213c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    213e:	1dfb      	adds	r3, r7, #7
    2140:	781b      	ldrb	r3, [r3, #0]
    2142:	2b01      	cmp	r3, #1
    2144:	d00a      	beq.n	215c <system_apb_clock_set_mask+0x2c>
    2146:	2b02      	cmp	r3, #2
    2148:	d00f      	beq.n	216a <system_apb_clock_set_mask+0x3a>
    214a:	2b00      	cmp	r3, #0
    214c:	d114      	bne.n	2178 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    214e:	4b0e      	ldr	r3, [pc, #56]	; (2188 <system_apb_clock_set_mask+0x58>)
    2150:	4a0d      	ldr	r2, [pc, #52]	; (2188 <system_apb_clock_set_mask+0x58>)
    2152:	6991      	ldr	r1, [r2, #24]
    2154:	683a      	ldr	r2, [r7, #0]
    2156:	430a      	orrs	r2, r1
    2158:	619a      	str	r2, [r3, #24]
			break;
    215a:	e00f      	b.n	217c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    215c:	4b0a      	ldr	r3, [pc, #40]	; (2188 <system_apb_clock_set_mask+0x58>)
    215e:	4a0a      	ldr	r2, [pc, #40]	; (2188 <system_apb_clock_set_mask+0x58>)
    2160:	69d1      	ldr	r1, [r2, #28]
    2162:	683a      	ldr	r2, [r7, #0]
    2164:	430a      	orrs	r2, r1
    2166:	61da      	str	r2, [r3, #28]
			break;
    2168:	e008      	b.n	217c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    216a:	4b07      	ldr	r3, [pc, #28]	; (2188 <system_apb_clock_set_mask+0x58>)
    216c:	4a06      	ldr	r2, [pc, #24]	; (2188 <system_apb_clock_set_mask+0x58>)
    216e:	6a11      	ldr	r1, [r2, #32]
    2170:	683a      	ldr	r2, [r7, #0]
    2172:	430a      	orrs	r2, r1
    2174:	621a      	str	r2, [r3, #32]
			break;
    2176:	e001      	b.n	217c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2178:	2317      	movs	r3, #23
    217a:	e000      	b.n	217e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    217c:	2300      	movs	r3, #0
}
    217e:	0018      	movs	r0, r3
    2180:	46bd      	mov	sp, r7
    2182:	b002      	add	sp, #8
    2184:	bd80      	pop	{r7, pc}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	40000400 	.word	0x40000400

0000218c <system_pinmux_get_config_defaults>:
{
    218c:	b580      	push	{r7, lr}
    218e:	b082      	sub	sp, #8
    2190:	af00      	add	r7, sp, #0
    2192:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2194:	687b      	ldr	r3, [r7, #4]
    2196:	2280      	movs	r2, #128	; 0x80
    2198:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	2200      	movs	r2, #0
    219e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    21a0:	687b      	ldr	r3, [r7, #4]
    21a2:	2201      	movs	r2, #1
    21a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    21a6:	687b      	ldr	r3, [r7, #4]
    21a8:	2200      	movs	r2, #0
    21aa:	70da      	strb	r2, [r3, #3]
}
    21ac:	46c0      	nop			; (mov r8, r8)
    21ae:	46bd      	mov	sp, r7
    21b0:	b002      	add	sp, #8
    21b2:	bd80      	pop	{r7, pc}

000021b4 <system_is_debugger_present>:
{
    21b4:	b580      	push	{r7, lr}
    21b6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    21b8:	4b05      	ldr	r3, [pc, #20]	; (21d0 <system_is_debugger_present+0x1c>)
    21ba:	789b      	ldrb	r3, [r3, #2]
    21bc:	b2db      	uxtb	r3, r3
    21be:	001a      	movs	r2, r3
    21c0:	2302      	movs	r3, #2
    21c2:	4013      	ands	r3, r2
    21c4:	1e5a      	subs	r2, r3, #1
    21c6:	4193      	sbcs	r3, r2
    21c8:	b2db      	uxtb	r3, r3
}
    21ca:	0018      	movs	r0, r3
    21cc:	46bd      	mov	sp, r7
    21ce:	bd80      	pop	{r7, pc}
    21d0:	41002000 	.word	0x41002000

000021d4 <usart_is_syncing>:
{
    21d4:	b580      	push	{r7, lr}
    21d6:	b084      	sub	sp, #16
    21d8:	af00      	add	r7, sp, #0
    21da:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    21dc:	687b      	ldr	r3, [r7, #4]
    21de:	681b      	ldr	r3, [r3, #0]
    21e0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    21e2:	68fb      	ldr	r3, [r7, #12]
    21e4:	69db      	ldr	r3, [r3, #28]
    21e6:	1e5a      	subs	r2, r3, #1
    21e8:	4193      	sbcs	r3, r2
    21ea:	b2db      	uxtb	r3, r3
}
    21ec:	0018      	movs	r0, r3
    21ee:	46bd      	mov	sp, r7
    21f0:	b004      	add	sp, #16
    21f2:	bd80      	pop	{r7, pc}

000021f4 <_usart_wait_for_sync>:
{
    21f4:	b580      	push	{r7, lr}
    21f6:	b082      	sub	sp, #8
    21f8:	af00      	add	r7, sp, #0
    21fa:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    21fc:	46c0      	nop			; (mov r8, r8)
    21fe:	687b      	ldr	r3, [r7, #4]
    2200:	0018      	movs	r0, r3
    2202:	4b04      	ldr	r3, [pc, #16]	; (2214 <_usart_wait_for_sync+0x20>)
    2204:	4798      	blx	r3
    2206:	1e03      	subs	r3, r0, #0
    2208:	d1f9      	bne.n	21fe <_usart_wait_for_sync+0xa>
}
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	46bd      	mov	sp, r7
    220e:	b002      	add	sp, #8
    2210:	bd80      	pop	{r7, pc}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	000021d5 	.word	0x000021d5

00002218 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    2218:	b5b0      	push	{r4, r5, r7, lr}
    221a:	b08c      	sub	sp, #48	; 0x30
    221c:	af02      	add	r7, sp, #8
    221e:	6078      	str	r0, [r7, #4]
    2220:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2222:	687b      	ldr	r3, [r7, #4]
    2224:	681b      	ldr	r3, [r3, #0]
    2226:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2228:	687b      	ldr	r3, [r7, #4]
    222a:	681b      	ldr	r3, [r3, #0]
    222c:	0018      	movs	r0, r3
    222e:	4bab      	ldr	r3, [pc, #684]	; (24dc <_usart_set_config+0x2c4>)
    2230:	4798      	blx	r3
    2232:	0003      	movs	r3, r0
    2234:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2236:	697b      	ldr	r3, [r7, #20]
    2238:	3314      	adds	r3, #20
    223a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    223c:	2300      	movs	r3, #0
    223e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    2240:	2300      	movs	r3, #0
    2242:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    2244:	230a      	movs	r3, #10
    2246:	18fb      	adds	r3, r7, r3
    2248:	2200      	movs	r2, #0
    224a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    224c:	231f      	movs	r3, #31
    224e:	18fb      	adds	r3, r7, r3
    2250:	2200      	movs	r2, #0
    2252:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2254:	231e      	movs	r3, #30
    2256:	18fb      	adds	r3, r7, r3
    2258:	2210      	movs	r2, #16
    225a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    225c:	683b      	ldr	r3, [r7, #0]
    225e:	8a1b      	ldrh	r3, [r3, #16]
    2260:	2280      	movs	r2, #128	; 0x80
    2262:	01d2      	lsls	r2, r2, #7
    2264:	4293      	cmp	r3, r2
    2266:	d01c      	beq.n	22a2 <_usart_set_config+0x8a>
    2268:	2280      	movs	r2, #128	; 0x80
    226a:	01d2      	lsls	r2, r2, #7
    226c:	4293      	cmp	r3, r2
    226e:	dc06      	bgt.n	227e <_usart_set_config+0x66>
    2270:	2b00      	cmp	r3, #0
    2272:	d00d      	beq.n	2290 <_usart_set_config+0x78>
    2274:	2280      	movs	r2, #128	; 0x80
    2276:	0192      	lsls	r2, r2, #6
    2278:	4293      	cmp	r3, r2
    227a:	d024      	beq.n	22c6 <_usart_set_config+0xae>
    227c:	e035      	b.n	22ea <_usart_set_config+0xd2>
    227e:	22c0      	movs	r2, #192	; 0xc0
    2280:	01d2      	lsls	r2, r2, #7
    2282:	4293      	cmp	r3, r2
    2284:	d028      	beq.n	22d8 <_usart_set_config+0xc0>
    2286:	2280      	movs	r2, #128	; 0x80
    2288:	0212      	lsls	r2, r2, #8
    228a:	4293      	cmp	r3, r2
    228c:	d012      	beq.n	22b4 <_usart_set_config+0x9c>
    228e:	e02c      	b.n	22ea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2290:	231f      	movs	r3, #31
    2292:	18fb      	adds	r3, r7, r3
    2294:	2200      	movs	r2, #0
    2296:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2298:	231e      	movs	r3, #30
    229a:	18fb      	adds	r3, r7, r3
    229c:	2210      	movs	r2, #16
    229e:	701a      	strb	r2, [r3, #0]
			break;
    22a0:	e023      	b.n	22ea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    22a2:	231f      	movs	r3, #31
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	2200      	movs	r2, #0
    22a8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    22aa:	231e      	movs	r3, #30
    22ac:	18fb      	adds	r3, r7, r3
    22ae:	2208      	movs	r2, #8
    22b0:	701a      	strb	r2, [r3, #0]
			break;
    22b2:	e01a      	b.n	22ea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    22b4:	231f      	movs	r3, #31
    22b6:	18fb      	adds	r3, r7, r3
    22b8:	2200      	movs	r2, #0
    22ba:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    22bc:	231e      	movs	r3, #30
    22be:	18fb      	adds	r3, r7, r3
    22c0:	2203      	movs	r2, #3
    22c2:	701a      	strb	r2, [r3, #0]
			break;
    22c4:	e011      	b.n	22ea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    22c6:	231f      	movs	r3, #31
    22c8:	18fb      	adds	r3, r7, r3
    22ca:	2201      	movs	r2, #1
    22cc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    22ce:	231e      	movs	r3, #30
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	2210      	movs	r2, #16
    22d4:	701a      	strb	r2, [r3, #0]
			break;
    22d6:	e008      	b.n	22ea <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    22d8:	231f      	movs	r3, #31
    22da:	18fb      	adds	r3, r7, r3
    22dc:	2201      	movs	r2, #1
    22de:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    22e0:	231e      	movs	r3, #30
    22e2:	18fb      	adds	r3, r7, r3
    22e4:	2208      	movs	r2, #8
    22e6:	701a      	strb	r2, [r3, #0]
			break;
    22e8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    22ea:	683b      	ldr	r3, [r7, #0]
    22ec:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    22ee:	683b      	ldr	r3, [r7, #0]
    22f0:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    22f2:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    22f4:	683b      	ldr	r3, [r7, #0]
    22f6:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    22f8:	4313      	orrs	r3, r2
		config->sample_rate |
    22fa:	683a      	ldr	r2, [r7, #0]
    22fc:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    22fe:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2300:	683a      	ldr	r2, [r7, #0]
    2302:	7e12      	ldrb	r2, [r2, #24]
    2304:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    2306:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2308:	683a      	ldr	r2, [r7, #0]
    230a:	2126      	movs	r1, #38	; 0x26
    230c:	5c52      	ldrb	r2, [r2, r1]
    230e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    2310:	4313      	orrs	r3, r2
    2312:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    2314:	231d      	movs	r3, #29
    2316:	18fb      	adds	r3, r7, r3
    2318:	2200      	movs	r2, #0
    231a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    231c:	683b      	ldr	r3, [r7, #0]
    231e:	685b      	ldr	r3, [r3, #4]
    2320:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    2322:	68fb      	ldr	r3, [r7, #12]
    2324:	2b00      	cmp	r3, #0
    2326:	d01e      	beq.n	2366 <_usart_set_config+0x14e>
    2328:	2280      	movs	r2, #128	; 0x80
    232a:	0552      	lsls	r2, r2, #21
    232c:	4293      	cmp	r3, r2
    232e:	d14f      	bne.n	23d0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    2330:	683b      	ldr	r3, [r7, #0]
    2332:	2227      	movs	r2, #39	; 0x27
    2334:	5c9b      	ldrb	r3, [r3, r2]
    2336:	2201      	movs	r2, #1
    2338:	4053      	eors	r3, r2
    233a:	b2db      	uxtb	r3, r3
    233c:	2b00      	cmp	r3, #0
    233e:	d046      	beq.n	23ce <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    2340:	683b      	ldr	r3, [r7, #0]
    2342:	6a1d      	ldr	r5, [r3, #32]
    2344:	693b      	ldr	r3, [r7, #16]
    2346:	b2db      	uxtb	r3, r3
    2348:	0018      	movs	r0, r3
    234a:	4b65      	ldr	r3, [pc, #404]	; (24e0 <_usart_set_config+0x2c8>)
    234c:	4798      	blx	r3
    234e:	0001      	movs	r1, r0
    2350:	231d      	movs	r3, #29
    2352:	18fc      	adds	r4, r7, r3
    2354:	230a      	movs	r3, #10
    2356:	18fb      	adds	r3, r7, r3
    2358:	001a      	movs	r2, r3
    235a:	0028      	movs	r0, r5
    235c:	4b61      	ldr	r3, [pc, #388]	; (24e4 <_usart_set_config+0x2cc>)
    235e:	4798      	blx	r3
    2360:	0003      	movs	r3, r0
    2362:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    2364:	e033      	b.n	23ce <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    2366:	683b      	ldr	r3, [r7, #0]
    2368:	2227      	movs	r2, #39	; 0x27
    236a:	5c9b      	ldrb	r3, [r3, r2]
    236c:	2b00      	cmp	r3, #0
    236e:	d014      	beq.n	239a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    2370:	683b      	ldr	r3, [r7, #0]
    2372:	6a18      	ldr	r0, [r3, #32]
    2374:	683b      	ldr	r3, [r7, #0]
    2376:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    2378:	231d      	movs	r3, #29
    237a:	18fc      	adds	r4, r7, r3
    237c:	231f      	movs	r3, #31
    237e:	18fb      	adds	r3, r7, r3
    2380:	781d      	ldrb	r5, [r3, #0]
    2382:	230a      	movs	r3, #10
    2384:	18fa      	adds	r2, r7, r3
    2386:	231e      	movs	r3, #30
    2388:	18fb      	adds	r3, r7, r3
    238a:	781b      	ldrb	r3, [r3, #0]
    238c:	9300      	str	r3, [sp, #0]
    238e:	002b      	movs	r3, r5
    2390:	4d55      	ldr	r5, [pc, #340]	; (24e8 <_usart_set_config+0x2d0>)
    2392:	47a8      	blx	r5
    2394:	0003      	movs	r3, r0
    2396:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    2398:	e01a      	b.n	23d0 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    239a:	683b      	ldr	r3, [r7, #0]
    239c:	6a1d      	ldr	r5, [r3, #32]
    239e:	693b      	ldr	r3, [r7, #16]
    23a0:	b2db      	uxtb	r3, r3
    23a2:	0018      	movs	r0, r3
    23a4:	4b4e      	ldr	r3, [pc, #312]	; (24e0 <_usart_set_config+0x2c8>)
    23a6:	4798      	blx	r3
				status_code =
    23a8:	231d      	movs	r3, #29
    23aa:	18fc      	adds	r4, r7, r3
    23ac:	231f      	movs	r3, #31
    23ae:	18fb      	adds	r3, r7, r3
    23b0:	7819      	ldrb	r1, [r3, #0]
    23b2:	230a      	movs	r3, #10
    23b4:	18fa      	adds	r2, r7, r3
    23b6:	231e      	movs	r3, #30
    23b8:	18fb      	adds	r3, r7, r3
    23ba:	781b      	ldrb	r3, [r3, #0]
    23bc:	9300      	str	r3, [sp, #0]
    23be:	000b      	movs	r3, r1
    23c0:	0001      	movs	r1, r0
    23c2:	0028      	movs	r0, r5
    23c4:	4d48      	ldr	r5, [pc, #288]	; (24e8 <_usart_set_config+0x2d0>)
    23c6:	47a8      	blx	r5
    23c8:	0003      	movs	r3, r0
    23ca:	7023      	strb	r3, [r4, #0]
			break;
    23cc:	e000      	b.n	23d0 <_usart_set_config+0x1b8>
			break;
    23ce:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    23d0:	231d      	movs	r3, #29
    23d2:	18fb      	adds	r3, r7, r3
    23d4:	781b      	ldrb	r3, [r3, #0]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d003      	beq.n	23e2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    23da:	231d      	movs	r3, #29
    23dc:	18fb      	adds	r3, r7, r3
    23de:	781b      	ldrb	r3, [r3, #0]
    23e0:	e077      	b.n	24d2 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    23e2:	683b      	ldr	r3, [r7, #0]
    23e4:	7e5b      	ldrb	r3, [r3, #25]
    23e6:	2b00      	cmp	r3, #0
    23e8:	d003      	beq.n	23f2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    23ea:	683b      	ldr	r3, [r7, #0]
    23ec:	7e9a      	ldrb	r2, [r3, #26]
    23ee:	69bb      	ldr	r3, [r7, #24]
    23f0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    23f2:	687b      	ldr	r3, [r7, #4]
    23f4:	0018      	movs	r0, r3
    23f6:	4b3d      	ldr	r3, [pc, #244]	; (24ec <_usart_set_config+0x2d4>)
    23f8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    23fa:	230a      	movs	r3, #10
    23fc:	18fb      	adds	r3, r7, r3
    23fe:	881a      	ldrh	r2, [r3, #0]
    2400:	69bb      	ldr	r3, [r7, #24]
    2402:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    2404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2406:	68fb      	ldr	r3, [r7, #12]
    2408:	4313      	orrs	r3, r2
    240a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    240c:	683b      	ldr	r3, [r7, #0]
    240e:	2227      	movs	r2, #39	; 0x27
    2410:	5c9b      	ldrb	r3, [r3, r2]
    2412:	2201      	movs	r2, #1
    2414:	4053      	eors	r3, r2
    2416:	b2db      	uxtb	r3, r3
    2418:	2b00      	cmp	r3, #0
    241a:	d003      	beq.n	2424 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    241e:	2204      	movs	r2, #4
    2420:	4313      	orrs	r3, r2
    2422:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2424:	683b      	ldr	r3, [r7, #0]
    2426:	7e5b      	ldrb	r3, [r3, #25]
    2428:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    242a:	683b      	ldr	r3, [r7, #0]
    242c:	7f1b      	ldrb	r3, [r3, #28]
    242e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2430:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2432:	683b      	ldr	r3, [r7, #0]
    2434:	7f5b      	ldrb	r3, [r3, #29]
    2436:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2438:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    243a:	683b      	ldr	r3, [r7, #0]
    243c:	2124      	movs	r1, #36	; 0x24
    243e:	5c5b      	ldrb	r3, [r3, r1]
    2440:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2442:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2444:	683b      	ldr	r3, [r7, #0]
    2446:	2125      	movs	r1, #37	; 0x25
    2448:	5c5b      	ldrb	r3, [r3, r1]
    244a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    244c:	4313      	orrs	r3, r2
	ctrlb =  
    244e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    2450:	683b      	ldr	r3, [r7, #0]
    2452:	7a9b      	ldrb	r3, [r3, #10]
    2454:	001a      	movs	r2, r3
    2456:	6a3b      	ldr	r3, [r7, #32]
    2458:	4313      	orrs	r3, r2
    245a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    245c:	683b      	ldr	r3, [r7, #0]
    245e:	7adb      	ldrb	r3, [r3, #11]
    2460:	001a      	movs	r2, r3
    2462:	6a3b      	ldr	r3, [r7, #32]
    2464:	4313      	orrs	r3, r2
    2466:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    2468:	683b      	ldr	r3, [r7, #0]
    246a:	891b      	ldrh	r3, [r3, #8]
    246c:	2bff      	cmp	r3, #255	; 0xff
    246e:	d00b      	beq.n	2488 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2472:	2280      	movs	r2, #128	; 0x80
    2474:	0452      	lsls	r2, r2, #17
    2476:	4313      	orrs	r3, r2
    2478:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    247a:	683b      	ldr	r3, [r7, #0]
    247c:	891b      	ldrh	r3, [r3, #8]
    247e:	001a      	movs	r2, r3
    2480:	6a3b      	ldr	r3, [r7, #32]
    2482:	4313      	orrs	r3, r2
    2484:	623b      	str	r3, [r7, #32]
    2486:	e008      	b.n	249a <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    2488:	683b      	ldr	r3, [r7, #0]
    248a:	7edb      	ldrb	r3, [r3, #27]
    248c:	2b00      	cmp	r3, #0
    248e:	d004      	beq.n	249a <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2492:	2280      	movs	r2, #128	; 0x80
    2494:	04d2      	lsls	r2, r2, #19
    2496:	4313      	orrs	r3, r2
    2498:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    249a:	683b      	ldr	r3, [r7, #0]
    249c:	222c      	movs	r2, #44	; 0x2c
    249e:	5c9b      	ldrb	r3, [r3, r2]
    24a0:	2b00      	cmp	r3, #0
    24a2:	d103      	bne.n	24ac <_usart_set_config+0x294>
    24a4:	4b12      	ldr	r3, [pc, #72]	; (24f0 <_usart_set_config+0x2d8>)
    24a6:	4798      	blx	r3
    24a8:	1e03      	subs	r3, r0, #0
    24aa:	d003      	beq.n	24b4 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    24ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24ae:	2280      	movs	r2, #128	; 0x80
    24b0:	4313      	orrs	r3, r2
    24b2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	0018      	movs	r0, r3
    24b8:	4b0c      	ldr	r3, [pc, #48]	; (24ec <_usart_set_config+0x2d4>)
    24ba:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    24bc:	69bb      	ldr	r3, [r7, #24]
    24be:	6a3a      	ldr	r2, [r7, #32]
    24c0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    24c2:	687b      	ldr	r3, [r7, #4]
    24c4:	0018      	movs	r0, r3
    24c6:	4b09      	ldr	r3, [pc, #36]	; (24ec <_usart_set_config+0x2d4>)
    24c8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    24ca:	69bb      	ldr	r3, [r7, #24]
    24cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    24ce:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    24d0:	2300      	movs	r3, #0
}
    24d2:	0018      	movs	r0, r3
    24d4:	46bd      	mov	sp, r7
    24d6:	b00a      	add	sp, #40	; 0x28
    24d8:	bdb0      	pop	{r4, r5, r7, pc}
    24da:	46c0      	nop			; (mov r8, r8)
    24dc:	00001655 	.word	0x00001655
    24e0:	00003bb9 	.word	0x00003bb9
    24e4:	000011cf 	.word	0x000011cf
    24e8:	0000124d 	.word	0x0000124d
    24ec:	000021f5 	.word	0x000021f5
    24f0:	000021b5 	.word	0x000021b5

000024f4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    24f4:	b590      	push	{r4, r7, lr}
    24f6:	b093      	sub	sp, #76	; 0x4c
    24f8:	af00      	add	r7, sp, #0
    24fa:	60f8      	str	r0, [r7, #12]
    24fc:	60b9      	str	r1, [r7, #8]
    24fe:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    2500:	233b      	movs	r3, #59	; 0x3b
    2502:	18fb      	adds	r3, r7, r3
    2504:	2200      	movs	r2, #0
    2506:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2508:	68fb      	ldr	r3, [r7, #12]
    250a:	68ba      	ldr	r2, [r7, #8]
    250c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    250e:	68fb      	ldr	r3, [r7, #12]
    2510:	681b      	ldr	r3, [r3, #0]
    2512:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2514:	68fb      	ldr	r3, [r7, #12]
    2516:	681b      	ldr	r3, [r3, #0]
    2518:	0018      	movs	r0, r3
    251a:	4b86      	ldr	r3, [pc, #536]	; (2734 <usart_init+0x240>)
    251c:	4798      	blx	r3
    251e:	0003      	movs	r3, r0
    2520:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2524:	3302      	adds	r3, #2
    2526:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    252a:	3314      	adds	r3, #20
    252c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2530:	681b      	ldr	r3, [r3, #0]
    2532:	2201      	movs	r2, #1
    2534:	4013      	ands	r3, r2
    2536:	d001      	beq.n	253c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    2538:	2305      	movs	r3, #5
    253a:	e0f6      	b.n	272a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    253c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    253e:	681b      	ldr	r3, [r3, #0]
    2540:	2202      	movs	r2, #2
    2542:	4013      	ands	r3, r2
    2544:	d001      	beq.n	254a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    2546:	231c      	movs	r3, #28
    2548:	e0ef      	b.n	272a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    254a:	2201      	movs	r2, #1
    254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    254e:	409a      	lsls	r2, r3
    2550:	0013      	movs	r3, r2
    2552:	0019      	movs	r1, r3
    2554:	2002      	movs	r0, #2
    2556:	4b78      	ldr	r3, [pc, #480]	; (2738 <usart_init+0x244>)
    2558:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    255a:	2324      	movs	r3, #36	; 0x24
    255c:	18fb      	adds	r3, r7, r3
    255e:	0018      	movs	r0, r3
    2560:	4b76      	ldr	r3, [pc, #472]	; (273c <usart_init+0x248>)
    2562:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    2564:	687b      	ldr	r3, [r7, #4]
    2566:	222d      	movs	r2, #45	; 0x2d
    2568:	5c9a      	ldrb	r2, [r3, r2]
    256a:	2324      	movs	r3, #36	; 0x24
    256c:	18fb      	adds	r3, r7, r3
    256e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2570:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2572:	b2db      	uxtb	r3, r3
    2574:	2224      	movs	r2, #36	; 0x24
    2576:	18ba      	adds	r2, r7, r2
    2578:	0011      	movs	r1, r2
    257a:	0018      	movs	r0, r3
    257c:	4b70      	ldr	r3, [pc, #448]	; (2740 <usart_init+0x24c>)
    257e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2580:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2582:	b2db      	uxtb	r3, r3
    2584:	0018      	movs	r0, r3
    2586:	4b6f      	ldr	r3, [pc, #444]	; (2744 <usart_init+0x250>)
    2588:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    258a:	687b      	ldr	r3, [r7, #4]
    258c:	222d      	movs	r2, #45	; 0x2d
    258e:	5c9b      	ldrb	r3, [r3, r2]
    2590:	2100      	movs	r1, #0
    2592:	0018      	movs	r0, r3
    2594:	4b6c      	ldr	r3, [pc, #432]	; (2748 <usart_init+0x254>)
    2596:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    2598:	687b      	ldr	r3, [r7, #4]
    259a:	7ada      	ldrb	r2, [r3, #11]
    259c:	68fb      	ldr	r3, [r7, #12]
    259e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    25a0:	687b      	ldr	r3, [r7, #4]
    25a2:	2224      	movs	r2, #36	; 0x24
    25a4:	5c9a      	ldrb	r2, [r3, r2]
    25a6:	68fb      	ldr	r3, [r7, #12]
    25a8:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    25aa:	687b      	ldr	r3, [r7, #4]
    25ac:	2225      	movs	r2, #37	; 0x25
    25ae:	5c9a      	ldrb	r2, [r3, r2]
    25b0:	68fb      	ldr	r3, [r7, #12]
    25b2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    25b4:	687b      	ldr	r3, [r7, #4]
    25b6:	7eda      	ldrb	r2, [r3, #27]
    25b8:	68fb      	ldr	r3, [r7, #12]
    25ba:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    25bc:	687b      	ldr	r3, [r7, #4]
    25be:	7f1a      	ldrb	r2, [r3, #28]
    25c0:	68fb      	ldr	r3, [r7, #12]
    25c2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    25c4:	233b      	movs	r3, #59	; 0x3b
    25c6:	18fc      	adds	r4, r7, r3
    25c8:	687a      	ldr	r2, [r7, #4]
    25ca:	68fb      	ldr	r3, [r7, #12]
    25cc:	0011      	movs	r1, r2
    25ce:	0018      	movs	r0, r3
    25d0:	4b5e      	ldr	r3, [pc, #376]	; (274c <usart_init+0x258>)
    25d2:	4798      	blx	r3
    25d4:	0003      	movs	r3, r0
    25d6:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    25d8:	233b      	movs	r3, #59	; 0x3b
    25da:	18fb      	adds	r3, r7, r3
    25dc:	781b      	ldrb	r3, [r3, #0]
    25de:	2b00      	cmp	r3, #0
    25e0:	d003      	beq.n	25ea <usart_init+0xf6>
		return status_code;
    25e2:	233b      	movs	r3, #59	; 0x3b
    25e4:	18fb      	adds	r3, r7, r3
    25e6:	781b      	ldrb	r3, [r3, #0]
    25e8:	e09f      	b.n	272a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    25ea:	2320      	movs	r3, #32
    25ec:	18fb      	adds	r3, r7, r3
    25ee:	0018      	movs	r0, r3
    25f0:	4b57      	ldr	r3, [pc, #348]	; (2750 <usart_init+0x25c>)
    25f2:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    25f4:	2320      	movs	r3, #32
    25f6:	18fb      	adds	r3, r7, r3
    25f8:	2200      	movs	r2, #0
    25fa:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    25fc:	2320      	movs	r3, #32
    25fe:	18fb      	adds	r3, r7, r3
    2600:	2200      	movs	r2, #0
    2602:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    2604:	687b      	ldr	r3, [r7, #4]
    2606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    2608:	2310      	movs	r3, #16
    260a:	18fb      	adds	r3, r7, r3
    260c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    260e:	687b      	ldr	r3, [r7, #4]
    2610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    2612:	2310      	movs	r3, #16
    2614:	18fb      	adds	r3, r7, r3
    2616:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    2618:	687b      	ldr	r3, [r7, #4]
    261a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    261c:	2310      	movs	r3, #16
    261e:	18fb      	adds	r3, r7, r3
    2620:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    2622:	687b      	ldr	r3, [r7, #4]
    2624:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    2626:	2310      	movs	r3, #16
    2628:	18fb      	adds	r3, r7, r3
    262a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    262c:	2347      	movs	r3, #71	; 0x47
    262e:	18fb      	adds	r3, r7, r3
    2630:	2200      	movs	r2, #0
    2632:	701a      	strb	r2, [r3, #0]
    2634:	e02c      	b.n	2690 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2636:	2347      	movs	r3, #71	; 0x47
    2638:	18fb      	adds	r3, r7, r3
    263a:	781a      	ldrb	r2, [r3, #0]
    263c:	2310      	movs	r3, #16
    263e:	18fb      	adds	r3, r7, r3
    2640:	0092      	lsls	r2, r2, #2
    2642:	58d3      	ldr	r3, [r2, r3]
    2644:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    2646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2648:	2b00      	cmp	r3, #0
    264a:	d109      	bne.n	2660 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    264c:	2347      	movs	r3, #71	; 0x47
    264e:	18fb      	adds	r3, r7, r3
    2650:	781a      	ldrb	r2, [r3, #0]
    2652:	68bb      	ldr	r3, [r7, #8]
    2654:	0011      	movs	r1, r2
    2656:	0018      	movs	r0, r3
    2658:	4b3e      	ldr	r3, [pc, #248]	; (2754 <usart_init+0x260>)
    265a:	4798      	blx	r3
    265c:	0003      	movs	r3, r0
    265e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    2660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2662:	3301      	adds	r3, #1
    2664:	d00d      	beq.n	2682 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2668:	b2da      	uxtb	r2, r3
    266a:	2320      	movs	r3, #32
    266c:	18fb      	adds	r3, r7, r3
    266e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2672:	0c1b      	lsrs	r3, r3, #16
    2674:	b2db      	uxtb	r3, r3
    2676:	2220      	movs	r2, #32
    2678:	18ba      	adds	r2, r7, r2
    267a:	0011      	movs	r1, r2
    267c:	0018      	movs	r0, r3
    267e:	4b36      	ldr	r3, [pc, #216]	; (2758 <usart_init+0x264>)
    2680:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    2682:	2347      	movs	r3, #71	; 0x47
    2684:	18fb      	adds	r3, r7, r3
    2686:	781a      	ldrb	r2, [r3, #0]
    2688:	2347      	movs	r3, #71	; 0x47
    268a:	18fb      	adds	r3, r7, r3
    268c:	3201      	adds	r2, #1
    268e:	701a      	strb	r2, [r3, #0]
    2690:	2347      	movs	r3, #71	; 0x47
    2692:	18fb      	adds	r3, r7, r3
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	2b03      	cmp	r3, #3
    2698:	d9cd      	bls.n	2636 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    269a:	2300      	movs	r3, #0
    269c:	63fb      	str	r3, [r7, #60]	; 0x3c
    269e:	e00a      	b.n	26b6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    26a0:	68fa      	ldr	r2, [r7, #12]
    26a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    26a4:	3302      	adds	r3, #2
    26a6:	009b      	lsls	r3, r3, #2
    26a8:	18d3      	adds	r3, r2, r3
    26aa:	3304      	adds	r3, #4
    26ac:	2200      	movs	r2, #0
    26ae:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    26b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    26b2:	3301      	adds	r3, #1
    26b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    26b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    26b8:	2b05      	cmp	r3, #5
    26ba:	d9f1      	bls.n	26a0 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    26bc:	68fb      	ldr	r3, [r7, #12]
    26be:	2200      	movs	r2, #0
    26c0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    26c2:	68fb      	ldr	r3, [r7, #12]
    26c4:	2200      	movs	r2, #0
    26c6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    26c8:	68fb      	ldr	r3, [r7, #12]
    26ca:	2200      	movs	r2, #0
    26cc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    26ce:	68fb      	ldr	r3, [r7, #12]
    26d0:	2200      	movs	r2, #0
    26d2:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    26d4:	68fb      	ldr	r3, [r7, #12]
    26d6:	2230      	movs	r2, #48	; 0x30
    26d8:	2100      	movs	r1, #0
    26da:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    26dc:	68fb      	ldr	r3, [r7, #12]
    26de:	2231      	movs	r2, #49	; 0x31
    26e0:	2100      	movs	r1, #0
    26e2:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    26e4:	68fb      	ldr	r3, [r7, #12]
    26e6:	2232      	movs	r2, #50	; 0x32
    26e8:	2100      	movs	r1, #0
    26ea:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    26ec:	68fb      	ldr	r3, [r7, #12]
    26ee:	2233      	movs	r2, #51	; 0x33
    26f0:	2100      	movs	r1, #0
    26f2:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    26f4:	68fb      	ldr	r3, [r7, #12]
    26f6:	681b      	ldr	r3, [r3, #0]
    26f8:	2227      	movs	r2, #39	; 0x27
    26fa:	18bc      	adds	r4, r7, r2
    26fc:	0018      	movs	r0, r3
    26fe:	4b0d      	ldr	r3, [pc, #52]	; (2734 <usart_init+0x240>)
    2700:	4798      	blx	r3
    2702:	0003      	movs	r3, r0
    2704:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2706:	4a15      	ldr	r2, [pc, #84]	; (275c <usart_init+0x268>)
    2708:	2327      	movs	r3, #39	; 0x27
    270a:	18fb      	adds	r3, r7, r3
    270c:	781b      	ldrb	r3, [r3, #0]
    270e:	0011      	movs	r1, r2
    2710:	0018      	movs	r0, r3
    2712:	4b13      	ldr	r3, [pc, #76]	; (2760 <usart_init+0x26c>)
    2714:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2716:	2327      	movs	r3, #39	; 0x27
    2718:	18fb      	adds	r3, r7, r3
    271a:	781a      	ldrb	r2, [r3, #0]
    271c:	4b11      	ldr	r3, [pc, #68]	; (2764 <usart_init+0x270>)
    271e:	0092      	lsls	r2, r2, #2
    2720:	68f9      	ldr	r1, [r7, #12]
    2722:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    2724:	233b      	movs	r3, #59	; 0x3b
    2726:	18fb      	adds	r3, r7, r3
    2728:	781b      	ldrb	r3, [r3, #0]
}
    272a:	0018      	movs	r0, r3
    272c:	46bd      	mov	sp, r7
    272e:	b013      	add	sp, #76	; 0x4c
    2730:	bd90      	pop	{r4, r7, pc}
    2732:	46c0      	nop			; (mov r8, r8)
    2734:	00001655 	.word	0x00001655
    2738:	00002131 	.word	0x00002131
    273c:	00002119 	.word	0x00002119
    2740:	00003a95 	.word	0x00003a95
    2744:	00003ad9 	.word	0x00003ad9
    2748:	0000140d 	.word	0x0000140d
    274c:	00002219 	.word	0x00002219
    2750:	0000218d 	.word	0x0000218d
    2754:	00001499 	.word	0x00001499
    2758:	00003d81 	.word	0x00003d81
    275c:	00002b21 	.word	0x00002b21
    2760:	000016b9 	.word	0x000016b9
    2764:	2000098c 	.word	0x2000098c

00002768 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    2768:	b580      	push	{r7, lr}
    276a:	b084      	sub	sp, #16
    276c:	af00      	add	r7, sp, #0
    276e:	6078      	str	r0, [r7, #4]
    2770:	000a      	movs	r2, r1
    2772:	1cbb      	adds	r3, r7, #2
    2774:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2776:	687b      	ldr	r3, [r7, #4]
    2778:	681b      	ldr	r3, [r3, #0]
    277a:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    277c:	687b      	ldr	r3, [r7, #4]
    277e:	79db      	ldrb	r3, [r3, #7]
    2780:	2201      	movs	r2, #1
    2782:	4053      	eors	r3, r2
    2784:	b2db      	uxtb	r3, r3
    2786:	2b00      	cmp	r3, #0
    2788:	d001      	beq.n	278e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    278a:	231c      	movs	r3, #28
    278c:	e017      	b.n	27be <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    278e:	687b      	ldr	r3, [r7, #4]
    2790:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2792:	b29b      	uxth	r3, r3
    2794:	2b00      	cmp	r3, #0
    2796:	d001      	beq.n	279c <usart_write_wait+0x34>
		return STATUS_BUSY;
    2798:	2305      	movs	r3, #5
    279a:	e010      	b.n	27be <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    279c:	687b      	ldr	r3, [r7, #4]
    279e:	0018      	movs	r0, r3
    27a0:	4b09      	ldr	r3, [pc, #36]	; (27c8 <usart_write_wait+0x60>)
    27a2:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    27a4:	68fb      	ldr	r3, [r7, #12]
    27a6:	1cba      	adds	r2, r7, #2
    27a8:	8812      	ldrh	r2, [r2, #0]
    27aa:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    27ac:	46c0      	nop			; (mov r8, r8)
    27ae:	68fb      	ldr	r3, [r7, #12]
    27b0:	7e1b      	ldrb	r3, [r3, #24]
    27b2:	b2db      	uxtb	r3, r3
    27b4:	001a      	movs	r2, r3
    27b6:	2302      	movs	r3, #2
    27b8:	4013      	ands	r3, r2
    27ba:	d0f8      	beq.n	27ae <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    27bc:	2300      	movs	r3, #0
}
    27be:	0018      	movs	r0, r3
    27c0:	46bd      	mov	sp, r7
    27c2:	b004      	add	sp, #16
    27c4:	bd80      	pop	{r7, pc}
    27c6:	46c0      	nop			; (mov r8, r8)
    27c8:	000021f5 	.word	0x000021f5

000027cc <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    27cc:	b580      	push	{r7, lr}
    27ce:	b084      	sub	sp, #16
    27d0:	af00      	add	r7, sp, #0
    27d2:	6078      	str	r0, [r7, #4]
    27d4:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    27d6:	687b      	ldr	r3, [r7, #4]
    27d8:	681b      	ldr	r3, [r3, #0]
    27da:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    27dc:	687b      	ldr	r3, [r7, #4]
    27de:	799b      	ldrb	r3, [r3, #6]
    27e0:	2201      	movs	r2, #1
    27e2:	4053      	eors	r3, r2
    27e4:	b2db      	uxtb	r3, r3
    27e6:	2b00      	cmp	r3, #0
    27e8:	d001      	beq.n	27ee <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    27ea:	231c      	movs	r3, #28
    27ec:	e05e      	b.n	28ac <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    27ee:	687b      	ldr	r3, [r7, #4]
    27f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    27f2:	b29b      	uxth	r3, r3
    27f4:	2b00      	cmp	r3, #0
    27f6:	d001      	beq.n	27fc <usart_read_wait+0x30>
		return STATUS_BUSY;
    27f8:	2305      	movs	r3, #5
    27fa:	e057      	b.n	28ac <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    27fc:	68fb      	ldr	r3, [r7, #12]
    27fe:	7e1b      	ldrb	r3, [r3, #24]
    2800:	b2db      	uxtb	r3, r3
    2802:	001a      	movs	r2, r3
    2804:	2304      	movs	r3, #4
    2806:	4013      	ands	r3, r2
    2808:	d101      	bne.n	280e <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    280a:	2305      	movs	r3, #5
    280c:	e04e      	b.n	28ac <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    280e:	687b      	ldr	r3, [r7, #4]
    2810:	0018      	movs	r0, r3
    2812:	4b28      	ldr	r3, [pc, #160]	; (28b4 <usart_read_wait+0xe8>)
    2814:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2816:	68fb      	ldr	r3, [r7, #12]
    2818:	8b5b      	ldrh	r3, [r3, #26]
    281a:	b29b      	uxth	r3, r3
    281c:	b2da      	uxtb	r2, r3
    281e:	230b      	movs	r3, #11
    2820:	18fb      	adds	r3, r7, r3
    2822:	213f      	movs	r1, #63	; 0x3f
    2824:	400a      	ands	r2, r1
    2826:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    2828:	230b      	movs	r3, #11
    282a:	18fb      	adds	r3, r7, r3
    282c:	781b      	ldrb	r3, [r3, #0]
    282e:	2b00      	cmp	r3, #0
    2830:	d036      	beq.n	28a0 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2832:	230b      	movs	r3, #11
    2834:	18fb      	adds	r3, r7, r3
    2836:	781b      	ldrb	r3, [r3, #0]
    2838:	2202      	movs	r2, #2
    283a:	4013      	ands	r3, r2
    283c:	d004      	beq.n	2848 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    283e:	68fb      	ldr	r3, [r7, #12]
    2840:	2202      	movs	r2, #2
    2842:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    2844:	231a      	movs	r3, #26
    2846:	e031      	b.n	28ac <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2848:	230b      	movs	r3, #11
    284a:	18fb      	adds	r3, r7, r3
    284c:	781b      	ldrb	r3, [r3, #0]
    284e:	2204      	movs	r2, #4
    2850:	4013      	ands	r3, r2
    2852:	d004      	beq.n	285e <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2854:	68fb      	ldr	r3, [r7, #12]
    2856:	2204      	movs	r2, #4
    2858:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    285a:	231e      	movs	r3, #30
    285c:	e026      	b.n	28ac <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    285e:	230b      	movs	r3, #11
    2860:	18fb      	adds	r3, r7, r3
    2862:	781b      	ldrb	r3, [r3, #0]
    2864:	2201      	movs	r2, #1
    2866:	4013      	ands	r3, r2
    2868:	d004      	beq.n	2874 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    286a:	68fb      	ldr	r3, [r7, #12]
    286c:	2201      	movs	r2, #1
    286e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    2870:	2313      	movs	r3, #19
    2872:	e01b      	b.n	28ac <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2874:	230b      	movs	r3, #11
    2876:	18fb      	adds	r3, r7, r3
    2878:	781b      	ldrb	r3, [r3, #0]
    287a:	2210      	movs	r2, #16
    287c:	4013      	ands	r3, r2
    287e:	d004      	beq.n	288a <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2880:	68fb      	ldr	r3, [r7, #12]
    2882:	2210      	movs	r2, #16
    2884:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    2886:	2342      	movs	r3, #66	; 0x42
    2888:	e010      	b.n	28ac <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    288a:	230b      	movs	r3, #11
    288c:	18fb      	adds	r3, r7, r3
    288e:	781b      	ldrb	r3, [r3, #0]
    2890:	2220      	movs	r2, #32
    2892:	4013      	ands	r3, r2
    2894:	d004      	beq.n	28a0 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2896:	68fb      	ldr	r3, [r7, #12]
    2898:	2220      	movs	r2, #32
    289a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    289c:	2341      	movs	r3, #65	; 0x41
    289e:	e005      	b.n	28ac <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    28a0:	68fb      	ldr	r3, [r7, #12]
    28a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    28a4:	b29a      	uxth	r2, r3
    28a6:	683b      	ldr	r3, [r7, #0]
    28a8:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    28aa:	2300      	movs	r3, #0
}
    28ac:	0018      	movs	r0, r3
    28ae:	46bd      	mov	sp, r7
    28b0:	b004      	add	sp, #16
    28b2:	bd80      	pop	{r7, pc}
    28b4:	000021f5 	.word	0x000021f5

000028b8 <system_interrupt_enter_critical_section>:
{
    28b8:	b580      	push	{r7, lr}
    28ba:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    28bc:	4b02      	ldr	r3, [pc, #8]	; (28c8 <system_interrupt_enter_critical_section+0x10>)
    28be:	4798      	blx	r3
}
    28c0:	46c0      	nop			; (mov r8, r8)
    28c2:	46bd      	mov	sp, r7
    28c4:	bd80      	pop	{r7, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	00000fbd 	.word	0x00000fbd

000028cc <system_interrupt_leave_critical_section>:
{
    28cc:	b580      	push	{r7, lr}
    28ce:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    28d0:	4b02      	ldr	r3, [pc, #8]	; (28dc <system_interrupt_leave_critical_section+0x10>)
    28d2:	4798      	blx	r3
}
    28d4:	46c0      	nop			; (mov r8, r8)
    28d6:	46bd      	mov	sp, r7
    28d8:	bd80      	pop	{r7, pc}
    28da:	46c0      	nop			; (mov r8, r8)
    28dc:	00001011 	.word	0x00001011

000028e0 <usart_is_syncing>:
{
    28e0:	b580      	push	{r7, lr}
    28e2:	b084      	sub	sp, #16
    28e4:	af00      	add	r7, sp, #0
    28e6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    28e8:	687b      	ldr	r3, [r7, #4]
    28ea:	681b      	ldr	r3, [r3, #0]
    28ec:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    28ee:	68fb      	ldr	r3, [r7, #12]
    28f0:	69db      	ldr	r3, [r3, #28]
    28f2:	1e5a      	subs	r2, r3, #1
    28f4:	4193      	sbcs	r3, r2
    28f6:	b2db      	uxtb	r3, r3
}
    28f8:	0018      	movs	r0, r3
    28fa:	46bd      	mov	sp, r7
    28fc:	b004      	add	sp, #16
    28fe:	bd80      	pop	{r7, pc}

00002900 <_usart_wait_for_sync>:
{
    2900:	b580      	push	{r7, lr}
    2902:	b082      	sub	sp, #8
    2904:	af00      	add	r7, sp, #0
    2906:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    2908:	46c0      	nop			; (mov r8, r8)
    290a:	687b      	ldr	r3, [r7, #4]
    290c:	0018      	movs	r0, r3
    290e:	4b04      	ldr	r3, [pc, #16]	; (2920 <_usart_wait_for_sync+0x20>)
    2910:	4798      	blx	r3
    2912:	1e03      	subs	r3, r0, #0
    2914:	d1f9      	bne.n	290a <_usart_wait_for_sync+0xa>
}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	46bd      	mov	sp, r7
    291a:	b002      	add	sp, #8
    291c:	bd80      	pop	{r7, pc}
    291e:	46c0      	nop			; (mov r8, r8)
    2920:	000028e1 	.word	0x000028e1

00002924 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2924:	b580      	push	{r7, lr}
    2926:	b086      	sub	sp, #24
    2928:	af00      	add	r7, sp, #0
    292a:	60f8      	str	r0, [r7, #12]
    292c:	60b9      	str	r1, [r7, #8]
    292e:	1dbb      	adds	r3, r7, #6
    2930:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2932:	68fb      	ldr	r3, [r7, #12]
    2934:	681b      	ldr	r3, [r3, #0]
    2936:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    2938:	4b0f      	ldr	r3, [pc, #60]	; (2978 <_usart_write_buffer+0x54>)
    293a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    293c:	68fb      	ldr	r3, [r7, #12]
    293e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2940:	b29b      	uxth	r3, r3
    2942:	2b00      	cmp	r3, #0
    2944:	d003      	beq.n	294e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    2946:	4b0d      	ldr	r3, [pc, #52]	; (297c <_usart_write_buffer+0x58>)
    2948:	4798      	blx	r3
		return STATUS_BUSY;
    294a:	2305      	movs	r3, #5
    294c:	e010      	b.n	2970 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    294e:	68fb      	ldr	r3, [r7, #12]
    2950:	1dba      	adds	r2, r7, #6
    2952:	8812      	ldrh	r2, [r2, #0]
    2954:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    2956:	4b09      	ldr	r3, [pc, #36]	; (297c <_usart_write_buffer+0x58>)
    2958:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    295a:	68fb      	ldr	r3, [r7, #12]
    295c:	68ba      	ldr	r2, [r7, #8]
    295e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2960:	68fb      	ldr	r3, [r7, #12]
    2962:	2233      	movs	r2, #51	; 0x33
    2964:	2105      	movs	r1, #5
    2966:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2968:	697b      	ldr	r3, [r7, #20]
    296a:	2201      	movs	r2, #1
    296c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    296e:	2300      	movs	r3, #0
}
    2970:	0018      	movs	r0, r3
    2972:	46bd      	mov	sp, r7
    2974:	b006      	add	sp, #24
    2976:	bd80      	pop	{r7, pc}
    2978:	000028b9 	.word	0x000028b9
    297c:	000028cd 	.word	0x000028cd

00002980 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2980:	b580      	push	{r7, lr}
    2982:	b086      	sub	sp, #24
    2984:	af00      	add	r7, sp, #0
    2986:	60f8      	str	r0, [r7, #12]
    2988:	60b9      	str	r1, [r7, #8]
    298a:	1dbb      	adds	r3, r7, #6
    298c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    298e:	68fb      	ldr	r3, [r7, #12]
    2990:	681b      	ldr	r3, [r3, #0]
    2992:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    2994:	4b16      	ldr	r3, [pc, #88]	; (29f0 <_usart_read_buffer+0x70>)
    2996:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2998:	68fb      	ldr	r3, [r7, #12]
    299a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    299c:	b29b      	uxth	r3, r3
    299e:	2b00      	cmp	r3, #0
    29a0:	d003      	beq.n	29aa <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    29a2:	4b14      	ldr	r3, [pc, #80]	; (29f4 <_usart_read_buffer+0x74>)
    29a4:	4798      	blx	r3
		return STATUS_BUSY;
    29a6:	2305      	movs	r3, #5
    29a8:	e01e      	b.n	29e8 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    29aa:	68fb      	ldr	r3, [r7, #12]
    29ac:	1dba      	adds	r2, r7, #6
    29ae:	8812      	ldrh	r2, [r2, #0]
    29b0:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    29b2:	4b10      	ldr	r3, [pc, #64]	; (29f4 <_usart_read_buffer+0x74>)
    29b4:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    29b6:	68fb      	ldr	r3, [r7, #12]
    29b8:	68ba      	ldr	r2, [r7, #8]
    29ba:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    29bc:	68fb      	ldr	r3, [r7, #12]
    29be:	2232      	movs	r2, #50	; 0x32
    29c0:	2105      	movs	r1, #5
    29c2:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    29c4:	697b      	ldr	r3, [r7, #20]
    29c6:	2204      	movs	r2, #4
    29c8:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    29ca:	68fb      	ldr	r3, [r7, #12]
    29cc:	7a1b      	ldrb	r3, [r3, #8]
    29ce:	2b00      	cmp	r3, #0
    29d0:	d002      	beq.n	29d8 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    29d2:	697b      	ldr	r3, [r7, #20]
    29d4:	2220      	movs	r2, #32
    29d6:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    29d8:	68fb      	ldr	r3, [r7, #12]
    29da:	7a5b      	ldrb	r3, [r3, #9]
    29dc:	2b00      	cmp	r3, #0
    29de:	d002      	beq.n	29e6 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    29e0:	697b      	ldr	r3, [r7, #20]
    29e2:	2208      	movs	r2, #8
    29e4:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    29e6:	2300      	movs	r3, #0
}
    29e8:	0018      	movs	r0, r3
    29ea:	46bd      	mov	sp, r7
    29ec:	b006      	add	sp, #24
    29ee:	bd80      	pop	{r7, pc}
    29f0:	000028b9 	.word	0x000028b9
    29f4:	000028cd 	.word	0x000028cd

000029f8 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    29f8:	b580      	push	{r7, lr}
    29fa:	b084      	sub	sp, #16
    29fc:	af00      	add	r7, sp, #0
    29fe:	60f8      	str	r0, [r7, #12]
    2a00:	60b9      	str	r1, [r7, #8]
    2a02:	1dfb      	adds	r3, r7, #7
    2a04:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2a06:	1dfb      	adds	r3, r7, #7
    2a08:	781b      	ldrb	r3, [r3, #0]
    2a0a:	68fa      	ldr	r2, [r7, #12]
    2a0c:	3302      	adds	r3, #2
    2a0e:	009b      	lsls	r3, r3, #2
    2a10:	18d3      	adds	r3, r2, r3
    2a12:	3304      	adds	r3, #4
    2a14:	68ba      	ldr	r2, [r7, #8]
    2a16:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2a18:	68fb      	ldr	r3, [r7, #12]
    2a1a:	2230      	movs	r2, #48	; 0x30
    2a1c:	5c9b      	ldrb	r3, [r3, r2]
    2a1e:	b25a      	sxtb	r2, r3
    2a20:	1dfb      	adds	r3, r7, #7
    2a22:	781b      	ldrb	r3, [r3, #0]
    2a24:	2101      	movs	r1, #1
    2a26:	4099      	lsls	r1, r3
    2a28:	000b      	movs	r3, r1
    2a2a:	b25b      	sxtb	r3, r3
    2a2c:	4313      	orrs	r3, r2
    2a2e:	b25b      	sxtb	r3, r3
    2a30:	b2d9      	uxtb	r1, r3
    2a32:	68fb      	ldr	r3, [r7, #12]
    2a34:	2230      	movs	r2, #48	; 0x30
    2a36:	5499      	strb	r1, [r3, r2]
}
    2a38:	46c0      	nop			; (mov r8, r8)
    2a3a:	46bd      	mov	sp, r7
    2a3c:	b004      	add	sp, #16
    2a3e:	bd80      	pop	{r7, pc}

00002a40 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2a40:	b580      	push	{r7, lr}
    2a42:	b084      	sub	sp, #16
    2a44:	af00      	add	r7, sp, #0
    2a46:	60f8      	str	r0, [r7, #12]
    2a48:	60b9      	str	r1, [r7, #8]
    2a4a:	1dbb      	adds	r3, r7, #6
    2a4c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    2a4e:	1dbb      	adds	r3, r7, #6
    2a50:	881b      	ldrh	r3, [r3, #0]
    2a52:	2b00      	cmp	r3, #0
    2a54:	d101      	bne.n	2a5a <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    2a56:	2317      	movs	r3, #23
    2a58:	e010      	b.n	2a7c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2a5a:	68fb      	ldr	r3, [r7, #12]
    2a5c:	79db      	ldrb	r3, [r3, #7]
    2a5e:	2201      	movs	r2, #1
    2a60:	4053      	eors	r3, r2
    2a62:	b2db      	uxtb	r3, r3
    2a64:	2b00      	cmp	r3, #0
    2a66:	d001      	beq.n	2a6c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    2a68:	231c      	movs	r3, #28
    2a6a:	e007      	b.n	2a7c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    2a6c:	1dbb      	adds	r3, r7, #6
    2a6e:	881a      	ldrh	r2, [r3, #0]
    2a70:	68b9      	ldr	r1, [r7, #8]
    2a72:	68fb      	ldr	r3, [r7, #12]
    2a74:	0018      	movs	r0, r3
    2a76:	4b03      	ldr	r3, [pc, #12]	; (2a84 <usart_write_buffer_job+0x44>)
    2a78:	4798      	blx	r3
    2a7a:	0003      	movs	r3, r0
}
    2a7c:	0018      	movs	r0, r3
    2a7e:	46bd      	mov	sp, r7
    2a80:	b004      	add	sp, #16
    2a82:	bd80      	pop	{r7, pc}
    2a84:	00002925 	.word	0x00002925

00002a88 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2a88:	b580      	push	{r7, lr}
    2a8a:	b084      	sub	sp, #16
    2a8c:	af00      	add	r7, sp, #0
    2a8e:	60f8      	str	r0, [r7, #12]
    2a90:	60b9      	str	r1, [r7, #8]
    2a92:	1dbb      	adds	r3, r7, #6
    2a94:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    2a96:	1dbb      	adds	r3, r7, #6
    2a98:	881b      	ldrh	r3, [r3, #0]
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d101      	bne.n	2aa2 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    2a9e:	2317      	movs	r3, #23
    2aa0:	e010      	b.n	2ac4 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2aa2:	68fb      	ldr	r3, [r7, #12]
    2aa4:	799b      	ldrb	r3, [r3, #6]
    2aa6:	2201      	movs	r2, #1
    2aa8:	4053      	eors	r3, r2
    2aaa:	b2db      	uxtb	r3, r3
    2aac:	2b00      	cmp	r3, #0
    2aae:	d001      	beq.n	2ab4 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    2ab0:	231c      	movs	r3, #28
    2ab2:	e007      	b.n	2ac4 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    2ab4:	1dbb      	adds	r3, r7, #6
    2ab6:	881a      	ldrh	r2, [r3, #0]
    2ab8:	68b9      	ldr	r1, [r7, #8]
    2aba:	68fb      	ldr	r3, [r7, #12]
    2abc:	0018      	movs	r0, r3
    2abe:	4b03      	ldr	r3, [pc, #12]	; (2acc <usart_read_buffer_job+0x44>)
    2ac0:	4798      	blx	r3
    2ac2:	0003      	movs	r3, r0
}
    2ac4:	0018      	movs	r0, r3
    2ac6:	46bd      	mov	sp, r7
    2ac8:	b004      	add	sp, #16
    2aca:	bd80      	pop	{r7, pc}
    2acc:	00002981 	.word	0x00002981

00002ad0 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    2ad0:	b580      	push	{r7, lr}
    2ad2:	b084      	sub	sp, #16
    2ad4:	af00      	add	r7, sp, #0
    2ad6:	6078      	str	r0, [r7, #4]
    2ad8:	000a      	movs	r2, r1
    2ada:	1cfb      	adds	r3, r7, #3
    2adc:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2ade:	1cfb      	adds	r3, r7, #3
    2ae0:	781b      	ldrb	r3, [r3, #0]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d002      	beq.n	2aec <usart_get_job_status+0x1c>
    2ae6:	2b01      	cmp	r3, #1
    2ae8:	d007      	beq.n	2afa <usart_get_job_status+0x2a>
    2aea:	e00d      	b.n	2b08 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    2aec:	230f      	movs	r3, #15
    2aee:	18fb      	adds	r3, r7, r3
    2af0:	687a      	ldr	r2, [r7, #4]
    2af2:	2132      	movs	r1, #50	; 0x32
    2af4:	5c52      	ldrb	r2, [r2, r1]
    2af6:	701a      	strb	r2, [r3, #0]
			break;
    2af8:	e00b      	b.n	2b12 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    2afa:	230f      	movs	r3, #15
    2afc:	18fb      	adds	r3, r7, r3
    2afe:	687a      	ldr	r2, [r7, #4]
    2b00:	2133      	movs	r1, #51	; 0x33
    2b02:	5c52      	ldrb	r2, [r2, r1]
    2b04:	701a      	strb	r2, [r3, #0]
			break;
    2b06:	e004      	b.n	2b12 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2b08:	230f      	movs	r3, #15
    2b0a:	18fb      	adds	r3, r7, r3
    2b0c:	2217      	movs	r2, #23
    2b0e:	701a      	strb	r2, [r3, #0]
			break;
    2b10:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    2b12:	230f      	movs	r3, #15
    2b14:	18fb      	adds	r3, r7, r3
    2b16:	781b      	ldrb	r3, [r3, #0]
}
    2b18:	0018      	movs	r0, r3
    2b1a:	46bd      	mov	sp, r7
    2b1c:	b004      	add	sp, #16
    2b1e:	bd80      	pop	{r7, pc}

00002b20 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2b20:	b580      	push	{r7, lr}
    2b22:	b088      	sub	sp, #32
    2b24:	af00      	add	r7, sp, #0
    2b26:	0002      	movs	r2, r0
    2b28:	1dfb      	adds	r3, r7, #7
    2b2a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    2b2c:	1dfb      	adds	r3, r7, #7
    2b2e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    2b30:	4ba3      	ldr	r3, [pc, #652]	; (2dc0 <_usart_interrupt_handler+0x2a0>)
    2b32:	0092      	lsls	r2, r2, #2
    2b34:	58d3      	ldr	r3, [r2, r3]
    2b36:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2b38:	69bb      	ldr	r3, [r7, #24]
    2b3a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    2b3c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    2b3e:	69bb      	ldr	r3, [r7, #24]
    2b40:	0018      	movs	r0, r3
    2b42:	4ba0      	ldr	r3, [pc, #640]	; (2dc4 <_usart_interrupt_handler+0x2a4>)
    2b44:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2b46:	697b      	ldr	r3, [r7, #20]
    2b48:	7e1b      	ldrb	r3, [r3, #24]
    2b4a:	b2da      	uxtb	r2, r3
    2b4c:	2312      	movs	r3, #18
    2b4e:	18fb      	adds	r3, r7, r3
    2b50:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    2b52:	697b      	ldr	r3, [r7, #20]
    2b54:	7d9b      	ldrb	r3, [r3, #22]
    2b56:	b2db      	uxtb	r3, r3
    2b58:	b29a      	uxth	r2, r3
    2b5a:	2312      	movs	r3, #18
    2b5c:	18fb      	adds	r3, r7, r3
    2b5e:	2112      	movs	r1, #18
    2b60:	1879      	adds	r1, r7, r1
    2b62:	8809      	ldrh	r1, [r1, #0]
    2b64:	400a      	ands	r2, r1
    2b66:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    2b68:	69bb      	ldr	r3, [r7, #24]
    2b6a:	2230      	movs	r2, #48	; 0x30
    2b6c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    2b6e:	69ba      	ldr	r2, [r7, #24]
    2b70:	2131      	movs	r1, #49	; 0x31
    2b72:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    2b74:	4013      	ands	r3, r2
    2b76:	b2da      	uxtb	r2, r3
    2b78:	2310      	movs	r3, #16
    2b7a:	18fb      	adds	r3, r7, r3
    2b7c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2b7e:	2312      	movs	r3, #18
    2b80:	18fb      	adds	r3, r7, r3
    2b82:	881b      	ldrh	r3, [r3, #0]
    2b84:	2201      	movs	r2, #1
    2b86:	4013      	ands	r3, r2
    2b88:	d044      	beq.n	2c14 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    2b8a:	69bb      	ldr	r3, [r7, #24]
    2b8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2b8e:	b29b      	uxth	r3, r3
    2b90:	2b00      	cmp	r3, #0
    2b92:	d03c      	beq.n	2c0e <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2b94:	69bb      	ldr	r3, [r7, #24]
    2b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2b98:	781b      	ldrb	r3, [r3, #0]
    2b9a:	b2da      	uxtb	r2, r3
    2b9c:	231c      	movs	r3, #28
    2b9e:	18fb      	adds	r3, r7, r3
    2ba0:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2ba2:	69bb      	ldr	r3, [r7, #24]
    2ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ba6:	1c5a      	adds	r2, r3, #1
    2ba8:	69bb      	ldr	r3, [r7, #24]
    2baa:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2bac:	69bb      	ldr	r3, [r7, #24]
    2bae:	795b      	ldrb	r3, [r3, #5]
    2bb0:	2b01      	cmp	r3, #1
    2bb2:	d113      	bne.n	2bdc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2bb4:	69bb      	ldr	r3, [r7, #24]
    2bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bb8:	781b      	ldrb	r3, [r3, #0]
    2bba:	b2db      	uxtb	r3, r3
    2bbc:	021b      	lsls	r3, r3, #8
    2bbe:	b21a      	sxth	r2, r3
    2bc0:	231c      	movs	r3, #28
    2bc2:	18fb      	adds	r3, r7, r3
    2bc4:	2100      	movs	r1, #0
    2bc6:	5e5b      	ldrsh	r3, [r3, r1]
    2bc8:	4313      	orrs	r3, r2
    2bca:	b21a      	sxth	r2, r3
    2bcc:	231c      	movs	r3, #28
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    2bd2:	69bb      	ldr	r3, [r7, #24]
    2bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2bd6:	1c5a      	adds	r2, r3, #1
    2bd8:	69bb      	ldr	r3, [r7, #24]
    2bda:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2bdc:	231c      	movs	r3, #28
    2bde:	18fb      	adds	r3, r7, r3
    2be0:	881b      	ldrh	r3, [r3, #0]
    2be2:	05db      	lsls	r3, r3, #23
    2be4:	0ddb      	lsrs	r3, r3, #23
    2be6:	b29a      	uxth	r2, r3
    2be8:	697b      	ldr	r3, [r7, #20]
    2bea:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2bec:	69bb      	ldr	r3, [r7, #24]
    2bee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    2bf0:	b29b      	uxth	r3, r3
    2bf2:	3b01      	subs	r3, #1
    2bf4:	b29b      	uxth	r3, r3
    2bf6:	69ba      	ldr	r2, [r7, #24]
    2bf8:	1c19      	adds	r1, r3, #0
    2bfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d109      	bne.n	2c14 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2c00:	697b      	ldr	r3, [r7, #20]
    2c02:	2201      	movs	r2, #1
    2c04:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2c06:	697b      	ldr	r3, [r7, #20]
    2c08:	2202      	movs	r2, #2
    2c0a:	759a      	strb	r2, [r3, #22]
    2c0c:	e002      	b.n	2c14 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2c0e:	697b      	ldr	r3, [r7, #20]
    2c10:	2201      	movs	r2, #1
    2c12:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2c14:	2312      	movs	r3, #18
    2c16:	18fb      	adds	r3, r7, r3
    2c18:	881b      	ldrh	r3, [r3, #0]
    2c1a:	2202      	movs	r2, #2
    2c1c:	4013      	ands	r3, r2
    2c1e:	d011      	beq.n	2c44 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2c20:	697b      	ldr	r3, [r7, #20]
    2c22:	2202      	movs	r2, #2
    2c24:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    2c26:	69bb      	ldr	r3, [r7, #24]
    2c28:	2233      	movs	r2, #51	; 0x33
    2c2a:	2100      	movs	r1, #0
    2c2c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2c2e:	2310      	movs	r3, #16
    2c30:	18fb      	adds	r3, r7, r3
    2c32:	881b      	ldrh	r3, [r3, #0]
    2c34:	2201      	movs	r2, #1
    2c36:	4013      	ands	r3, r2
    2c38:	d004      	beq.n	2c44 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2c3a:	69bb      	ldr	r3, [r7, #24]
    2c3c:	68db      	ldr	r3, [r3, #12]
    2c3e:	69ba      	ldr	r2, [r7, #24]
    2c40:	0010      	movs	r0, r2
    2c42:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2c44:	2312      	movs	r3, #18
    2c46:	18fb      	adds	r3, r7, r3
    2c48:	881b      	ldrh	r3, [r3, #0]
    2c4a:	2204      	movs	r2, #4
    2c4c:	4013      	ands	r3, r2
    2c4e:	d100      	bne.n	2c52 <_usart_interrupt_handler+0x132>
    2c50:	e0bd      	b.n	2dce <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    2c52:	69bb      	ldr	r3, [r7, #24]
    2c54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2c56:	b29b      	uxth	r3, r3
    2c58:	2b00      	cmp	r3, #0
    2c5a:	d100      	bne.n	2c5e <_usart_interrupt_handler+0x13e>
    2c5c:	e0b4      	b.n	2dc8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c5e:	697b      	ldr	r3, [r7, #20]
    2c60:	8b5b      	ldrh	r3, [r3, #26]
    2c62:	b29b      	uxth	r3, r3
    2c64:	b2da      	uxtb	r2, r3
    2c66:	231f      	movs	r3, #31
    2c68:	18fb      	adds	r3, r7, r3
    2c6a:	213f      	movs	r1, #63	; 0x3f
    2c6c:	400a      	ands	r2, r1
    2c6e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2c70:	231f      	movs	r3, #31
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	781b      	ldrb	r3, [r3, #0]
    2c76:	2208      	movs	r2, #8
    2c78:	4013      	ands	r3, r2
    2c7a:	d007      	beq.n	2c8c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2c7c:	231f      	movs	r3, #31
    2c7e:	18fb      	adds	r3, r7, r3
    2c80:	221f      	movs	r2, #31
    2c82:	18ba      	adds	r2, r7, r2
    2c84:	7812      	ldrb	r2, [r2, #0]
    2c86:	2108      	movs	r1, #8
    2c88:	438a      	bics	r2, r1
    2c8a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2c8c:	231f      	movs	r3, #31
    2c8e:	18fb      	adds	r3, r7, r3
    2c90:	781b      	ldrb	r3, [r3, #0]
    2c92:	2b00      	cmp	r3, #0
    2c94:	d050      	beq.n	2d38 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2c96:	231f      	movs	r3, #31
    2c98:	18fb      	adds	r3, r7, r3
    2c9a:	781b      	ldrb	r3, [r3, #0]
    2c9c:	2202      	movs	r2, #2
    2c9e:	4013      	ands	r3, r2
    2ca0:	d007      	beq.n	2cb2 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2ca2:	69bb      	ldr	r3, [r7, #24]
    2ca4:	2232      	movs	r2, #50	; 0x32
    2ca6:	211a      	movs	r1, #26
    2ca8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2caa:	697b      	ldr	r3, [r7, #20]
    2cac:	2202      	movs	r2, #2
    2cae:	835a      	strh	r2, [r3, #26]
    2cb0:	e036      	b.n	2d20 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2cb2:	231f      	movs	r3, #31
    2cb4:	18fb      	adds	r3, r7, r3
    2cb6:	781b      	ldrb	r3, [r3, #0]
    2cb8:	2204      	movs	r2, #4
    2cba:	4013      	ands	r3, r2
    2cbc:	d007      	beq.n	2cce <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    2cbe:	69bb      	ldr	r3, [r7, #24]
    2cc0:	2232      	movs	r2, #50	; 0x32
    2cc2:	211e      	movs	r1, #30
    2cc4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2cc6:	697b      	ldr	r3, [r7, #20]
    2cc8:	2204      	movs	r2, #4
    2cca:	835a      	strh	r2, [r3, #26]
    2ccc:	e028      	b.n	2d20 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2cce:	231f      	movs	r3, #31
    2cd0:	18fb      	adds	r3, r7, r3
    2cd2:	781b      	ldrb	r3, [r3, #0]
    2cd4:	2201      	movs	r2, #1
    2cd6:	4013      	ands	r3, r2
    2cd8:	d007      	beq.n	2cea <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    2cda:	69bb      	ldr	r3, [r7, #24]
    2cdc:	2232      	movs	r2, #50	; 0x32
    2cde:	2113      	movs	r1, #19
    2ce0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2ce2:	697b      	ldr	r3, [r7, #20]
    2ce4:	2201      	movs	r2, #1
    2ce6:	835a      	strh	r2, [r3, #26]
    2ce8:	e01a      	b.n	2d20 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2cea:	231f      	movs	r3, #31
    2cec:	18fb      	adds	r3, r7, r3
    2cee:	781b      	ldrb	r3, [r3, #0]
    2cf0:	2210      	movs	r2, #16
    2cf2:	4013      	ands	r3, r2
    2cf4:	d007      	beq.n	2d06 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    2cf6:	69bb      	ldr	r3, [r7, #24]
    2cf8:	2232      	movs	r2, #50	; 0x32
    2cfa:	2142      	movs	r1, #66	; 0x42
    2cfc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2cfe:	697b      	ldr	r3, [r7, #20]
    2d00:	2210      	movs	r2, #16
    2d02:	835a      	strh	r2, [r3, #26]
    2d04:	e00c      	b.n	2d20 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2d06:	231f      	movs	r3, #31
    2d08:	18fb      	adds	r3, r7, r3
    2d0a:	781b      	ldrb	r3, [r3, #0]
    2d0c:	2220      	movs	r2, #32
    2d0e:	4013      	ands	r3, r2
    2d10:	d006      	beq.n	2d20 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2d12:	69bb      	ldr	r3, [r7, #24]
    2d14:	2232      	movs	r2, #50	; 0x32
    2d16:	2141      	movs	r1, #65	; 0x41
    2d18:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2d1a:	697b      	ldr	r3, [r7, #20]
    2d1c:	2220      	movs	r2, #32
    2d1e:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    2d20:	2310      	movs	r3, #16
    2d22:	18fb      	adds	r3, r7, r3
    2d24:	881b      	ldrh	r3, [r3, #0]
    2d26:	2204      	movs	r2, #4
    2d28:	4013      	ands	r3, r2
				if (callback_status
    2d2a:	d050      	beq.n	2dce <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2d2c:	69bb      	ldr	r3, [r7, #24]
    2d2e:	695b      	ldr	r3, [r3, #20]
    2d30:	69ba      	ldr	r2, [r7, #24]
    2d32:	0010      	movs	r0, r2
    2d34:	4798      	blx	r3
    2d36:	e04a      	b.n	2dce <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2d38:	697b      	ldr	r3, [r7, #20]
    2d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    2d3c:	b29a      	uxth	r2, r3
    2d3e:	230e      	movs	r3, #14
    2d40:	18fb      	adds	r3, r7, r3
    2d42:	05d2      	lsls	r2, r2, #23
    2d44:	0dd2      	lsrs	r2, r2, #23
    2d46:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2d48:	69bb      	ldr	r3, [r7, #24]
    2d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d4c:	220e      	movs	r2, #14
    2d4e:	18ba      	adds	r2, r7, r2
    2d50:	8812      	ldrh	r2, [r2, #0]
    2d52:	b2d2      	uxtb	r2, r2
    2d54:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2d56:	69bb      	ldr	r3, [r7, #24]
    2d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d5a:	1c5a      	adds	r2, r3, #1
    2d5c:	69bb      	ldr	r3, [r7, #24]
    2d5e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2d60:	69bb      	ldr	r3, [r7, #24]
    2d62:	795b      	ldrb	r3, [r3, #5]
    2d64:	2b01      	cmp	r3, #1
    2d66:	d10d      	bne.n	2d84 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2d68:	69bb      	ldr	r3, [r7, #24]
    2d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d6c:	220e      	movs	r2, #14
    2d6e:	18ba      	adds	r2, r7, r2
    2d70:	8812      	ldrh	r2, [r2, #0]
    2d72:	0a12      	lsrs	r2, r2, #8
    2d74:	b292      	uxth	r2, r2
    2d76:	b2d2      	uxtb	r2, r2
    2d78:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    2d7a:	69bb      	ldr	r3, [r7, #24]
    2d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2d7e:	1c5a      	adds	r2, r3, #1
    2d80:	69bb      	ldr	r3, [r7, #24]
    2d82:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2d84:	69bb      	ldr	r3, [r7, #24]
    2d86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2d88:	b29b      	uxth	r3, r3
    2d8a:	3b01      	subs	r3, #1
    2d8c:	b29b      	uxth	r3, r3
    2d8e:	69ba      	ldr	r2, [r7, #24]
    2d90:	1c19      	adds	r1, r3, #0
    2d92:	8591      	strh	r1, [r2, #44]	; 0x2c
    2d94:	2b00      	cmp	r3, #0
    2d96:	d11a      	bne.n	2dce <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2d98:	697b      	ldr	r3, [r7, #20]
    2d9a:	2204      	movs	r2, #4
    2d9c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    2d9e:	69bb      	ldr	r3, [r7, #24]
    2da0:	2232      	movs	r2, #50	; 0x32
    2da2:	2100      	movs	r1, #0
    2da4:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    2da6:	2310      	movs	r3, #16
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	881b      	ldrh	r3, [r3, #0]
    2dac:	2202      	movs	r2, #2
    2dae:	4013      	ands	r3, r2
					if (callback_status
    2db0:	d00d      	beq.n	2dce <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2db2:	69bb      	ldr	r3, [r7, #24]
    2db4:	691b      	ldr	r3, [r3, #16]
    2db6:	69ba      	ldr	r2, [r7, #24]
    2db8:	0010      	movs	r0, r2
    2dba:	4798      	blx	r3
    2dbc:	e007      	b.n	2dce <_usart_interrupt_handler+0x2ae>
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	2000098c 	.word	0x2000098c
    2dc4:	00002901 	.word	0x00002901
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2dc8:	697b      	ldr	r3, [r7, #20]
    2dca:	2204      	movs	r2, #4
    2dcc:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2dce:	2312      	movs	r3, #18
    2dd0:	18fb      	adds	r3, r7, r3
    2dd2:	881b      	ldrh	r3, [r3, #0]
    2dd4:	2210      	movs	r2, #16
    2dd6:	4013      	ands	r3, r2
    2dd8:	d010      	beq.n	2dfc <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2dda:	697b      	ldr	r3, [r7, #20]
    2ddc:	2210      	movs	r2, #16
    2dde:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2de0:	697b      	ldr	r3, [r7, #20]
    2de2:	2210      	movs	r2, #16
    2de4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2de6:	2310      	movs	r3, #16
    2de8:	18fb      	adds	r3, r7, r3
    2dea:	881b      	ldrh	r3, [r3, #0]
    2dec:	2210      	movs	r2, #16
    2dee:	4013      	ands	r3, r2
    2df0:	d004      	beq.n	2dfc <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2df2:	69bb      	ldr	r3, [r7, #24]
    2df4:	69db      	ldr	r3, [r3, #28]
    2df6:	69ba      	ldr	r2, [r7, #24]
    2df8:	0010      	movs	r0, r2
    2dfa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2dfc:	2312      	movs	r3, #18
    2dfe:	18fb      	adds	r3, r7, r3
    2e00:	881b      	ldrh	r3, [r3, #0]
    2e02:	2220      	movs	r2, #32
    2e04:	4013      	ands	r3, r2
    2e06:	d010      	beq.n	2e2a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2e08:	697b      	ldr	r3, [r7, #20]
    2e0a:	2220      	movs	r2, #32
    2e0c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2e0e:	697b      	ldr	r3, [r7, #20]
    2e10:	2220      	movs	r2, #32
    2e12:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2e14:	2310      	movs	r3, #16
    2e16:	18fb      	adds	r3, r7, r3
    2e18:	881b      	ldrh	r3, [r3, #0]
    2e1a:	2208      	movs	r2, #8
    2e1c:	4013      	ands	r3, r2
    2e1e:	d004      	beq.n	2e2a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2e20:	69bb      	ldr	r3, [r7, #24]
    2e22:	699b      	ldr	r3, [r3, #24]
    2e24:	69ba      	ldr	r2, [r7, #24]
    2e26:	0010      	movs	r0, r2
    2e28:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2e2a:	2312      	movs	r3, #18
    2e2c:	18fb      	adds	r3, r7, r3
    2e2e:	881b      	ldrh	r3, [r3, #0]
    2e30:	2208      	movs	r2, #8
    2e32:	4013      	ands	r3, r2
    2e34:	d010      	beq.n	2e58 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2e36:	697b      	ldr	r3, [r7, #20]
    2e38:	2208      	movs	r2, #8
    2e3a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2e3c:	697b      	ldr	r3, [r7, #20]
    2e3e:	2208      	movs	r2, #8
    2e40:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2e42:	2310      	movs	r3, #16
    2e44:	18fb      	adds	r3, r7, r3
    2e46:	881b      	ldrh	r3, [r3, #0]
    2e48:	2220      	movs	r2, #32
    2e4a:	4013      	ands	r3, r2
    2e4c:	d004      	beq.n	2e58 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2e4e:	69bb      	ldr	r3, [r7, #24]
    2e50:	6a1b      	ldr	r3, [r3, #32]
    2e52:	69ba      	ldr	r2, [r7, #24]
    2e54:	0010      	movs	r0, r2
    2e56:	4798      	blx	r3
		}
	}
#endif
}
    2e58:	46c0      	nop			; (mov r8, r8)
    2e5a:	46bd      	mov	sp, r7
    2e5c:	b008      	add	sp, #32
    2e5e:	bd80      	pop	{r7, pc}

00002e60 <system_gclk_gen_get_config_defaults>:
{
    2e60:	b580      	push	{r7, lr}
    2e62:	b082      	sub	sp, #8
    2e64:	af00      	add	r7, sp, #0
    2e66:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    2e68:	687b      	ldr	r3, [r7, #4]
    2e6a:	2201      	movs	r2, #1
    2e6c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	2200      	movs	r2, #0
    2e72:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2e74:	687b      	ldr	r3, [r7, #4]
    2e76:	2206      	movs	r2, #6
    2e78:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    2e7a:	687b      	ldr	r3, [r7, #4]
    2e7c:	2200      	movs	r2, #0
    2e7e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    2e80:	687b      	ldr	r3, [r7, #4]
    2e82:	2200      	movs	r2, #0
    2e84:	725a      	strb	r2, [r3, #9]
}
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	46bd      	mov	sp, r7
    2e8a:	b002      	add	sp, #8
    2e8c:	bd80      	pop	{r7, pc}

00002e8e <system_gclk_chan_get_config_defaults>:
{
    2e8e:	b580      	push	{r7, lr}
    2e90:	b082      	sub	sp, #8
    2e92:	af00      	add	r7, sp, #0
    2e94:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    2e96:	687b      	ldr	r3, [r7, #4]
    2e98:	2200      	movs	r2, #0
    2e9a:	701a      	strb	r2, [r3, #0]
}
    2e9c:	46c0      	nop			; (mov r8, r8)
    2e9e:	46bd      	mov	sp, r7
    2ea0:	b002      	add	sp, #8
    2ea2:	bd80      	pop	{r7, pc}

00002ea4 <system_clock_source_xosc32k_get_config_defaults>:
{
    2ea4:	b580      	push	{r7, lr}
    2ea6:	b082      	sub	sp, #8
    2ea8:	af00      	add	r7, sp, #0
    2eaa:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	2200      	movs	r2, #0
    2eb0:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    2eb2:	687b      	ldr	r3, [r7, #4]
    2eb4:	2204      	movs	r2, #4
    2eb6:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    2eb8:	687b      	ldr	r3, [r7, #4]
    2eba:	2200      	movs	r2, #0
    2ebc:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    2ebe:	687b      	ldr	r3, [r7, #4]
    2ec0:	2280      	movs	r2, #128	; 0x80
    2ec2:	0212      	lsls	r2, r2, #8
    2ec4:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	2200      	movs	r2, #0
    2eca:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    2ecc:	687b      	ldr	r3, [r7, #4]
    2ece:	2201      	movs	r2, #1
    2ed0:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    2ed2:	687b      	ldr	r3, [r7, #4]
    2ed4:	2200      	movs	r2, #0
    2ed6:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    2ed8:	687b      	ldr	r3, [r7, #4]
    2eda:	2201      	movs	r2, #1
    2edc:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    2ede:	687b      	ldr	r3, [r7, #4]
    2ee0:	2200      	movs	r2, #0
    2ee2:	739a      	strb	r2, [r3, #14]
}
    2ee4:	46c0      	nop			; (mov r8, r8)
    2ee6:	46bd      	mov	sp, r7
    2ee8:	b002      	add	sp, #8
    2eea:	bd80      	pop	{r7, pc}

00002eec <system_clock_source_osc8m_get_config_defaults>:
{
    2eec:	b580      	push	{r7, lr}
    2eee:	b082      	sub	sp, #8
    2ef0:	af00      	add	r7, sp, #0
    2ef2:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	2203      	movs	r2, #3
    2ef8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    2efa:	687b      	ldr	r3, [r7, #4]
    2efc:	2200      	movs	r2, #0
    2efe:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    2f00:	687b      	ldr	r3, [r7, #4]
    2f02:	2201      	movs	r2, #1
    2f04:	709a      	strb	r2, [r3, #2]
}
    2f06:	46c0      	nop			; (mov r8, r8)
    2f08:	46bd      	mov	sp, r7
    2f0a:	b002      	add	sp, #8
    2f0c:	bd80      	pop	{r7, pc}

00002f0e <system_clock_source_dfll_get_config_defaults>:
{
    2f0e:	b580      	push	{r7, lr}
    2f10:	b082      	sub	sp, #8
    2f12:	af00      	add	r7, sp, #0
    2f14:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    2f16:	687b      	ldr	r3, [r7, #4]
    2f18:	2200      	movs	r2, #0
    2f1a:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2f1c:	687b      	ldr	r3, [r7, #4]
    2f1e:	2200      	movs	r2, #0
    2f20:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2f22:	687b      	ldr	r3, [r7, #4]
    2f24:	2200      	movs	r2, #0
    2f26:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2f28:	687b      	ldr	r3, [r7, #4]
    2f2a:	2200      	movs	r2, #0
    2f2c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	2200      	movs	r2, #0
    2f32:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	2201      	movs	r2, #1
    2f38:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    2f3a:	687b      	ldr	r3, [r7, #4]
    2f3c:	2207      	movs	r2, #7
    2f3e:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	223f      	movs	r2, #63	; 0x3f
    2f44:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    2f46:	687b      	ldr	r3, [r7, #4]
    2f48:	2201      	movs	r2, #1
    2f4a:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	2201      	movs	r2, #1
    2f50:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    2f52:	687b      	ldr	r3, [r7, #4]
    2f54:	2206      	movs	r2, #6
    2f56:	821a      	strh	r2, [r3, #16]
}
    2f58:	46c0      	nop			; (mov r8, r8)
    2f5a:	46bd      	mov	sp, r7
    2f5c:	b002      	add	sp, #8
    2f5e:	bd80      	pop	{r7, pc}

00002f60 <system_cpu_clock_set_divider>:
{
    2f60:	b580      	push	{r7, lr}
    2f62:	b082      	sub	sp, #8
    2f64:	af00      	add	r7, sp, #0
    2f66:	0002      	movs	r2, r0
    2f68:	1dfb      	adds	r3, r7, #7
    2f6a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    2f6c:	4a03      	ldr	r2, [pc, #12]	; (2f7c <system_cpu_clock_set_divider+0x1c>)
    2f6e:	1dfb      	adds	r3, r7, #7
    2f70:	781b      	ldrb	r3, [r3, #0]
    2f72:	7213      	strb	r3, [r2, #8]
}
    2f74:	46c0      	nop			; (mov r8, r8)
    2f76:	46bd      	mov	sp, r7
    2f78:	b002      	add	sp, #8
    2f7a:	bd80      	pop	{r7, pc}
    2f7c:	40000400 	.word	0x40000400

00002f80 <system_apb_clock_set_divider>:
{
    2f80:	b580      	push	{r7, lr}
    2f82:	b082      	sub	sp, #8
    2f84:	af00      	add	r7, sp, #0
    2f86:	0002      	movs	r2, r0
    2f88:	1dfb      	adds	r3, r7, #7
    2f8a:	701a      	strb	r2, [r3, #0]
    2f8c:	1dbb      	adds	r3, r7, #6
    2f8e:	1c0a      	adds	r2, r1, #0
    2f90:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2f92:	1dfb      	adds	r3, r7, #7
    2f94:	781b      	ldrb	r3, [r3, #0]
    2f96:	2b01      	cmp	r3, #1
    2f98:	d008      	beq.n	2fac <system_apb_clock_set_divider+0x2c>
    2f9a:	2b02      	cmp	r3, #2
    2f9c:	d00b      	beq.n	2fb6 <system_apb_clock_set_divider+0x36>
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d10e      	bne.n	2fc0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    2fa2:	4a0b      	ldr	r2, [pc, #44]	; (2fd0 <system_apb_clock_set_divider+0x50>)
    2fa4:	1dbb      	adds	r3, r7, #6
    2fa6:	781b      	ldrb	r3, [r3, #0]
    2fa8:	7253      	strb	r3, [r2, #9]
			break;
    2faa:	e00b      	b.n	2fc4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    2fac:	4a08      	ldr	r2, [pc, #32]	; (2fd0 <system_apb_clock_set_divider+0x50>)
    2fae:	1dbb      	adds	r3, r7, #6
    2fb0:	781b      	ldrb	r3, [r3, #0]
    2fb2:	7293      	strb	r3, [r2, #10]
			break;
    2fb4:	e006      	b.n	2fc4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    2fb6:	4a06      	ldr	r2, [pc, #24]	; (2fd0 <system_apb_clock_set_divider+0x50>)
    2fb8:	1dbb      	adds	r3, r7, #6
    2fba:	781b      	ldrb	r3, [r3, #0]
    2fbc:	72d3      	strb	r3, [r2, #11]
			break;
    2fbe:	e001      	b.n	2fc4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    2fc0:	2317      	movs	r3, #23
    2fc2:	e000      	b.n	2fc6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    2fc4:	2300      	movs	r3, #0
}
    2fc6:	0018      	movs	r0, r3
    2fc8:	46bd      	mov	sp, r7
    2fca:	b002      	add	sp, #8
    2fcc:	bd80      	pop	{r7, pc}
    2fce:	46c0      	nop			; (mov r8, r8)
    2fd0:	40000400 	.word	0x40000400

00002fd4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    2fd4:	b580      	push	{r7, lr}
    2fd6:	b082      	sub	sp, #8
    2fd8:	af00      	add	r7, sp, #0
    2fda:	0002      	movs	r2, r0
    2fdc:	1dfb      	adds	r3, r7, #7
    2fde:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2fe0:	4a08      	ldr	r2, [pc, #32]	; (3004 <system_flash_set_waitstates+0x30>)
    2fe2:	1dfb      	adds	r3, r7, #7
    2fe4:	781b      	ldrb	r3, [r3, #0]
    2fe6:	210f      	movs	r1, #15
    2fe8:	400b      	ands	r3, r1
    2fea:	b2d9      	uxtb	r1, r3
    2fec:	6853      	ldr	r3, [r2, #4]
    2fee:	200f      	movs	r0, #15
    2ff0:	4001      	ands	r1, r0
    2ff2:	0049      	lsls	r1, r1, #1
    2ff4:	201e      	movs	r0, #30
    2ff6:	4383      	bics	r3, r0
    2ff8:	430b      	orrs	r3, r1
    2ffa:	6053      	str	r3, [r2, #4]
}
    2ffc:	46c0      	nop			; (mov r8, r8)
    2ffe:	46bd      	mov	sp, r7
    3000:	b002      	add	sp, #8
    3002:	bd80      	pop	{r7, pc}
    3004:	41004000 	.word	0x41004000

00003008 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    3008:	b580      	push	{r7, lr}
    300a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    300c:	46c0      	nop			; (mov r8, r8)
    300e:	4b04      	ldr	r3, [pc, #16]	; (3020 <_system_dfll_wait_for_sync+0x18>)
    3010:	68db      	ldr	r3, [r3, #12]
    3012:	2210      	movs	r2, #16
    3014:	4013      	ands	r3, r2
    3016:	d0fa      	beq.n	300e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    3018:	46c0      	nop			; (mov r8, r8)
    301a:	46bd      	mov	sp, r7
    301c:	bd80      	pop	{r7, pc}
    301e:	46c0      	nop			; (mov r8, r8)
    3020:	40000800 	.word	0x40000800

00003024 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    3024:	b580      	push	{r7, lr}
    3026:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3028:	4b0c      	ldr	r3, [pc, #48]	; (305c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    302a:	2202      	movs	r2, #2
    302c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    302e:	4b0c      	ldr	r3, [pc, #48]	; (3060 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    3030:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3032:	4a0a      	ldr	r2, [pc, #40]	; (305c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3034:	4b0b      	ldr	r3, [pc, #44]	; (3064 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3036:	689b      	ldr	r3, [r3, #8]
    3038:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    303a:	4a08      	ldr	r2, [pc, #32]	; (305c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    303c:	4b09      	ldr	r3, [pc, #36]	; (3064 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    303e:	685b      	ldr	r3, [r3, #4]
    3040:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    3042:	4b06      	ldr	r3, [pc, #24]	; (305c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    3044:	2200      	movs	r2, #0
    3046:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3048:	4b05      	ldr	r3, [pc, #20]	; (3060 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    304a:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    304c:	4a03      	ldr	r2, [pc, #12]	; (305c <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    304e:	4b05      	ldr	r3, [pc, #20]	; (3064 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    3050:	681b      	ldr	r3, [r3, #0]
    3052:	b29b      	uxth	r3, r3
    3054:	8493      	strh	r3, [r2, #36]	; 0x24
}
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	46bd      	mov	sp, r7
    305a:	bd80      	pop	{r7, pc}
    305c:	40000800 	.word	0x40000800
    3060:	00003009 	.word	0x00003009
    3064:	20000124 	.word	0x20000124

00003068 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    3068:	b580      	push	{r7, lr}
    306a:	b082      	sub	sp, #8
    306c:	af00      	add	r7, sp, #0
    306e:	0002      	movs	r2, r0
    3070:	1dfb      	adds	r3, r7, #7
    3072:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    3074:	1dfb      	adds	r3, r7, #7
    3076:	781b      	ldrb	r3, [r3, #0]
    3078:	2b08      	cmp	r3, #8
    307a:	d841      	bhi.n	3100 <system_clock_source_get_hz+0x98>
    307c:	009a      	lsls	r2, r3, #2
    307e:	4b23      	ldr	r3, [pc, #140]	; (310c <system_clock_source_get_hz+0xa4>)
    3080:	18d3      	adds	r3, r2, r3
    3082:	681b      	ldr	r3, [r3, #0]
    3084:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    3086:	4b22      	ldr	r3, [pc, #136]	; (3110 <system_clock_source_get_hz+0xa8>)
    3088:	691b      	ldr	r3, [r3, #16]
    308a:	e03a      	b.n	3102 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    308c:	4b21      	ldr	r3, [pc, #132]	; (3114 <system_clock_source_get_hz+0xac>)
    308e:	6a1b      	ldr	r3, [r3, #32]
    3090:	059b      	lsls	r3, r3, #22
    3092:	0f9b      	lsrs	r3, r3, #30
    3094:	b2db      	uxtb	r3, r3
    3096:	001a      	movs	r2, r3
    3098:	4b1f      	ldr	r3, [pc, #124]	; (3118 <system_clock_source_get_hz+0xb0>)
    309a:	40d3      	lsrs	r3, r2
    309c:	e031      	b.n	3102 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    309e:	2380      	movs	r3, #128	; 0x80
    30a0:	021b      	lsls	r3, r3, #8
    30a2:	e02e      	b.n	3102 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    30a4:	2380      	movs	r3, #128	; 0x80
    30a6:	021b      	lsls	r3, r3, #8
    30a8:	e02b      	b.n	3102 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    30aa:	4b19      	ldr	r3, [pc, #100]	; (3110 <system_clock_source_get_hz+0xa8>)
    30ac:	695b      	ldr	r3, [r3, #20]
    30ae:	e028      	b.n	3102 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    30b0:	4b17      	ldr	r3, [pc, #92]	; (3110 <system_clock_source_get_hz+0xa8>)
    30b2:	681b      	ldr	r3, [r3, #0]
    30b4:	2202      	movs	r2, #2
    30b6:	4013      	ands	r3, r2
    30b8:	d101      	bne.n	30be <system_clock_source_get_hz+0x56>
			return 0;
    30ba:	2300      	movs	r3, #0
    30bc:	e021      	b.n	3102 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    30be:	4b17      	ldr	r3, [pc, #92]	; (311c <system_clock_source_get_hz+0xb4>)
    30c0:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    30c2:	4b13      	ldr	r3, [pc, #76]	; (3110 <system_clock_source_get_hz+0xa8>)
    30c4:	681b      	ldr	r3, [r3, #0]
    30c6:	2224      	movs	r2, #36	; 0x24
    30c8:	4013      	ands	r3, r2
    30ca:	2b04      	cmp	r3, #4
    30cc:	d109      	bne.n	30e2 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    30ce:	2000      	movs	r0, #0
    30d0:	4b13      	ldr	r3, [pc, #76]	; (3120 <system_clock_source_get_hz+0xb8>)
    30d2:	4798      	blx	r3
    30d4:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    30d6:	4b0e      	ldr	r3, [pc, #56]	; (3110 <system_clock_source_get_hz+0xa8>)
    30d8:	689b      	ldr	r3, [r3, #8]
    30da:	041b      	lsls	r3, r3, #16
    30dc:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    30de:	4353      	muls	r3, r2
    30e0:	e00f      	b.n	3102 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    30e2:	4b10      	ldr	r3, [pc, #64]	; (3124 <system_clock_source_get_hz+0xbc>)
    30e4:	e00d      	b.n	3102 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    30e6:	4a0b      	ldr	r2, [pc, #44]	; (3114 <system_clock_source_get_hz+0xac>)
    30e8:	2350      	movs	r3, #80	; 0x50
    30ea:	5cd3      	ldrb	r3, [r2, r3]
    30ec:	b2db      	uxtb	r3, r3
    30ee:	001a      	movs	r2, r3
    30f0:	2304      	movs	r3, #4
    30f2:	4013      	ands	r3, r2
    30f4:	d101      	bne.n	30fa <system_clock_source_get_hz+0x92>
			return 0;
    30f6:	2300      	movs	r3, #0
    30f8:	e003      	b.n	3102 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    30fa:	4b05      	ldr	r3, [pc, #20]	; (3110 <system_clock_source_get_hz+0xa8>)
    30fc:	68db      	ldr	r3, [r3, #12]
    30fe:	e000      	b.n	3102 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    3100:	2300      	movs	r3, #0
	}
}
    3102:	0018      	movs	r0, r3
    3104:	46bd      	mov	sp, r7
    3106:	b002      	add	sp, #8
    3108:	bd80      	pop	{r7, pc}
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	00004be4 	.word	0x00004be4
    3110:	20000124 	.word	0x20000124
    3114:	40000800 	.word	0x40000800
    3118:	007a1200 	.word	0x007a1200
    311c:	00003009 	.word	0x00003009
    3120:	00003bb9 	.word	0x00003bb9
    3124:	02dc6c00 	.word	0x02dc6c00

00003128 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    3128:	b580      	push	{r7, lr}
    312a:	b084      	sub	sp, #16
    312c:	af00      	add	r7, sp, #0
    312e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    3130:	4b1a      	ldr	r3, [pc, #104]	; (319c <system_clock_source_osc8m_set_config+0x74>)
    3132:	6a1b      	ldr	r3, [r3, #32]
    3134:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    3136:	687b      	ldr	r3, [r7, #4]
    3138:	781b      	ldrb	r3, [r3, #0]
    313a:	1c1a      	adds	r2, r3, #0
    313c:	2303      	movs	r3, #3
    313e:	4013      	ands	r3, r2
    3140:	b2da      	uxtb	r2, r3
    3142:	230d      	movs	r3, #13
    3144:	18fb      	adds	r3, r7, r3
    3146:	2103      	movs	r1, #3
    3148:	400a      	ands	r2, r1
    314a:	0010      	movs	r0, r2
    314c:	781a      	ldrb	r2, [r3, #0]
    314e:	2103      	movs	r1, #3
    3150:	438a      	bics	r2, r1
    3152:	1c11      	adds	r1, r2, #0
    3154:	1c02      	adds	r2, r0, #0
    3156:	430a      	orrs	r2, r1
    3158:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    315a:	687b      	ldr	r3, [r7, #4]
    315c:	789a      	ldrb	r2, [r3, #2]
    315e:	230c      	movs	r3, #12
    3160:	18fb      	adds	r3, r7, r3
    3162:	01d0      	lsls	r0, r2, #7
    3164:	781a      	ldrb	r2, [r3, #0]
    3166:	217f      	movs	r1, #127	; 0x7f
    3168:	400a      	ands	r2, r1
    316a:	1c11      	adds	r1, r2, #0
    316c:	1c02      	adds	r2, r0, #0
    316e:	430a      	orrs	r2, r1
    3170:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3172:	687b      	ldr	r3, [r7, #4]
    3174:	785a      	ldrb	r2, [r3, #1]
    3176:	230c      	movs	r3, #12
    3178:	18fb      	adds	r3, r7, r3
    317a:	2101      	movs	r1, #1
    317c:	400a      	ands	r2, r1
    317e:	0190      	lsls	r0, r2, #6
    3180:	781a      	ldrb	r2, [r3, #0]
    3182:	2140      	movs	r1, #64	; 0x40
    3184:	438a      	bics	r2, r1
    3186:	1c11      	adds	r1, r2, #0
    3188:	1c02      	adds	r2, r0, #0
    318a:	430a      	orrs	r2, r1
    318c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    318e:	4b03      	ldr	r3, [pc, #12]	; (319c <system_clock_source_osc8m_set_config+0x74>)
    3190:	68fa      	ldr	r2, [r7, #12]
    3192:	621a      	str	r2, [r3, #32]
}
    3194:	46c0      	nop			; (mov r8, r8)
    3196:	46bd      	mov	sp, r7
    3198:	b004      	add	sp, #16
    319a:	bd80      	pop	{r7, pc}
    319c:	40000800 	.word	0x40000800

000031a0 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    31a0:	b580      	push	{r7, lr}
    31a2:	b084      	sub	sp, #16
    31a4:	af00      	add	r7, sp, #0
    31a6:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    31a8:	4a43      	ldr	r2, [pc, #268]	; (32b8 <system_clock_source_xosc32k_set_config+0x118>)
    31aa:	230c      	movs	r3, #12
    31ac:	18fb      	adds	r3, r7, r3
    31ae:	8a92      	ldrh	r2, [r2, #20]
    31b0:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    31b2:	687b      	ldr	r3, [r7, #4]
    31b4:	785b      	ldrb	r3, [r3, #1]
    31b6:	1c1a      	adds	r2, r3, #0
    31b8:	2307      	movs	r3, #7
    31ba:	4013      	ands	r3, r2
    31bc:	b2da      	uxtb	r2, r3
    31be:	230c      	movs	r3, #12
    31c0:	18fb      	adds	r3, r7, r3
    31c2:	2107      	movs	r1, #7
    31c4:	400a      	ands	r2, r1
    31c6:	0010      	movs	r0, r2
    31c8:	785a      	ldrb	r2, [r3, #1]
    31ca:	2107      	movs	r1, #7
    31cc:	438a      	bics	r2, r1
    31ce:	1c11      	adds	r1, r2, #0
    31d0:	1c02      	adds	r2, r0, #0
    31d2:	430a      	orrs	r2, r1
    31d4:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	781b      	ldrb	r3, [r3, #0]
    31da:	2b00      	cmp	r3, #0
    31dc:	d106      	bne.n	31ec <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    31de:	230c      	movs	r3, #12
    31e0:	18fb      	adds	r3, r7, r3
    31e2:	781a      	ldrb	r2, [r3, #0]
    31e4:	2104      	movs	r1, #4
    31e6:	430a      	orrs	r2, r1
    31e8:	701a      	strb	r2, [r3, #0]
    31ea:	e005      	b.n	31f8 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    31ec:	230c      	movs	r3, #12
    31ee:	18fb      	adds	r3, r7, r3
    31f0:	781a      	ldrb	r2, [r3, #0]
    31f2:	2104      	movs	r1, #4
    31f4:	438a      	bics	r2, r1
    31f6:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    31f8:	687b      	ldr	r3, [r7, #4]
    31fa:	789a      	ldrb	r2, [r3, #2]
    31fc:	230c      	movs	r3, #12
    31fe:	18fb      	adds	r3, r7, r3
    3200:	2101      	movs	r1, #1
    3202:	400a      	ands	r2, r1
    3204:	0150      	lsls	r0, r2, #5
    3206:	781a      	ldrb	r2, [r3, #0]
    3208:	2120      	movs	r1, #32
    320a:	438a      	bics	r2, r1
    320c:	1c11      	adds	r1, r2, #0
    320e:	1c02      	adds	r2, r0, #0
    3210:	430a      	orrs	r2, r1
    3212:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    3214:	687b      	ldr	r3, [r7, #4]
    3216:	78da      	ldrb	r2, [r3, #3]
    3218:	230c      	movs	r3, #12
    321a:	18fb      	adds	r3, r7, r3
    321c:	2101      	movs	r1, #1
    321e:	400a      	ands	r2, r1
    3220:	0110      	lsls	r0, r2, #4
    3222:	781a      	ldrb	r2, [r3, #0]
    3224:	2110      	movs	r1, #16
    3226:	438a      	bics	r2, r1
    3228:	1c11      	adds	r1, r2, #0
    322a:	1c02      	adds	r2, r0, #0
    322c:	430a      	orrs	r2, r1
    322e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    3230:	687b      	ldr	r3, [r7, #4]
    3232:	791a      	ldrb	r2, [r3, #4]
    3234:	230c      	movs	r3, #12
    3236:	18fb      	adds	r3, r7, r3
    3238:	2101      	movs	r1, #1
    323a:	400a      	ands	r2, r1
    323c:	00d0      	lsls	r0, r2, #3
    323e:	781a      	ldrb	r2, [r3, #0]
    3240:	2108      	movs	r1, #8
    3242:	438a      	bics	r2, r1
    3244:	1c11      	adds	r1, r2, #0
    3246:	1c02      	adds	r2, r0, #0
    3248:	430a      	orrs	r2, r1
    324a:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    324c:	687b      	ldr	r3, [r7, #4]
    324e:	7b5a      	ldrb	r2, [r3, #13]
    3250:	230c      	movs	r3, #12
    3252:	18fb      	adds	r3, r7, r3
    3254:	01d0      	lsls	r0, r2, #7
    3256:	781a      	ldrb	r2, [r3, #0]
    3258:	217f      	movs	r1, #127	; 0x7f
    325a:	400a      	ands	r2, r1
    325c:	1c11      	adds	r1, r2, #0
    325e:	1c02      	adds	r2, r0, #0
    3260:	430a      	orrs	r2, r1
    3262:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    3264:	687b      	ldr	r3, [r7, #4]
    3266:	7b1a      	ldrb	r2, [r3, #12]
    3268:	230c      	movs	r3, #12
    326a:	18fb      	adds	r3, r7, r3
    326c:	2101      	movs	r1, #1
    326e:	400a      	ands	r2, r1
    3270:	0190      	lsls	r0, r2, #6
    3272:	781a      	ldrb	r2, [r3, #0]
    3274:	2140      	movs	r1, #64	; 0x40
    3276:	438a      	bics	r2, r1
    3278:	1c11      	adds	r1, r2, #0
    327a:	1c02      	adds	r2, r0, #0
    327c:	430a      	orrs	r2, r1
    327e:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    3280:	687b      	ldr	r3, [r7, #4]
    3282:	7b9a      	ldrb	r2, [r3, #14]
    3284:	230c      	movs	r3, #12
    3286:	18fb      	adds	r3, r7, r3
    3288:	2101      	movs	r1, #1
    328a:	400a      	ands	r2, r1
    328c:	0110      	lsls	r0, r2, #4
    328e:	785a      	ldrb	r2, [r3, #1]
    3290:	2110      	movs	r1, #16
    3292:	438a      	bics	r2, r1
    3294:	1c11      	adds	r1, r2, #0
    3296:	1c02      	adds	r2, r0, #0
    3298:	430a      	orrs	r2, r1
    329a:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    329c:	687b      	ldr	r3, [r7, #4]
    329e:	689a      	ldr	r2, [r3, #8]
    32a0:	4b06      	ldr	r3, [pc, #24]	; (32bc <system_clock_source_xosc32k_set_config+0x11c>)
    32a2:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    32a4:	4a04      	ldr	r2, [pc, #16]	; (32b8 <system_clock_source_xosc32k_set_config+0x118>)
    32a6:	230c      	movs	r3, #12
    32a8:	18fb      	adds	r3, r7, r3
    32aa:	881b      	ldrh	r3, [r3, #0]
    32ac:	8293      	strh	r3, [r2, #20]
}
    32ae:	46c0      	nop			; (mov r8, r8)
    32b0:	46bd      	mov	sp, r7
    32b2:	b004      	add	sp, #16
    32b4:	bd80      	pop	{r7, pc}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	40000800 	.word	0x40000800
    32bc:	20000124 	.word	0x20000124

000032c0 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    32c0:	b580      	push	{r7, lr}
    32c2:	b082      	sub	sp, #8
    32c4:	af00      	add	r7, sp, #0
    32c6:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    32c8:	687b      	ldr	r3, [r7, #4]
    32ca:	7a1b      	ldrb	r3, [r3, #8]
    32cc:	029b      	lsls	r3, r3, #10
    32ce:	041b      	lsls	r3, r3, #16
    32d0:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    32d2:	687b      	ldr	r3, [r7, #4]
    32d4:	895b      	ldrh	r3, [r3, #10]
    32d6:	059b      	lsls	r3, r3, #22
    32d8:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    32da:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    32dc:	4b2a      	ldr	r3, [pc, #168]	; (3388 <system_clock_source_dfll_set_config+0xc8>)
    32de:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    32e0:	687b      	ldr	r3, [r7, #4]
    32e2:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    32e4:	687b      	ldr	r3, [r7, #4]
    32e6:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    32e8:	4313      	orrs	r3, r2
    32ea:	b2db      	uxtb	r3, r3
    32ec:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    32ee:	687b      	ldr	r3, [r7, #4]
    32f0:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    32f2:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    32f4:	687a      	ldr	r2, [r7, #4]
    32f6:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    32f8:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    32fa:	687b      	ldr	r3, [r7, #4]
    32fc:	785b      	ldrb	r3, [r3, #1]
    32fe:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    3300:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    3302:	4b21      	ldr	r3, [pc, #132]	; (3388 <system_clock_source_dfll_set_config+0xc8>)
    3304:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    3306:	687b      	ldr	r3, [r7, #4]
    3308:	781b      	ldrb	r3, [r3, #0]
    330a:	2b04      	cmp	r3, #4
    330c:	d116      	bne.n	333c <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    330e:	687b      	ldr	r3, [r7, #4]
    3310:	7b1b      	ldrb	r3, [r3, #12]
    3312:	069b      	lsls	r3, r3, #26
    3314:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3316:	687b      	ldr	r3, [r7, #4]
    3318:	89db      	ldrh	r3, [r3, #14]
    331a:	041b      	lsls	r3, r3, #16
    331c:	0019      	movs	r1, r3
    331e:	4b1b      	ldr	r3, [pc, #108]	; (338c <system_clock_source_dfll_set_config+0xcc>)
    3320:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3322:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    3324:	687a      	ldr	r2, [r7, #4]
    3326:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    3328:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    332a:	4b17      	ldr	r3, [pc, #92]	; (3388 <system_clock_source_dfll_set_config+0xc8>)
    332c:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    332e:	4b16      	ldr	r3, [pc, #88]	; (3388 <system_clock_source_dfll_set_config+0xc8>)
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	687a      	ldr	r2, [r7, #4]
    3334:	7812      	ldrb	r2, [r2, #0]
    3336:	431a      	orrs	r2, r3
    3338:	4b13      	ldr	r3, [pc, #76]	; (3388 <system_clock_source_dfll_set_config+0xc8>)
    333a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    333c:	687b      	ldr	r3, [r7, #4]
    333e:	781b      	ldrb	r3, [r3, #0]
    3340:	2b20      	cmp	r3, #32
    3342:	d11c      	bne.n	337e <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3344:	687b      	ldr	r3, [r7, #4]
    3346:	7b1b      	ldrb	r3, [r3, #12]
    3348:	069b      	lsls	r3, r3, #26
    334a:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    334c:	687b      	ldr	r3, [r7, #4]
    334e:	89db      	ldrh	r3, [r3, #14]
    3350:	041b      	lsls	r3, r3, #16
    3352:	0019      	movs	r1, r3
    3354:	4b0d      	ldr	r3, [pc, #52]	; (338c <system_clock_source_dfll_set_config+0xcc>)
    3356:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    3358:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    335a:	687a      	ldr	r2, [r7, #4]
    335c:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    335e:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    3360:	4b09      	ldr	r3, [pc, #36]	; (3388 <system_clock_source_dfll_set_config+0xc8>)
    3362:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    3364:	4b08      	ldr	r3, [pc, #32]	; (3388 <system_clock_source_dfll_set_config+0xc8>)
    3366:	681b      	ldr	r3, [r3, #0]
    3368:	687a      	ldr	r2, [r7, #4]
    336a:	7812      	ldrb	r2, [r2, #0]
    336c:	2104      	movs	r1, #4
    336e:	430a      	orrs	r2, r1
    3370:	b2d2      	uxtb	r2, r2
    3372:	4313      	orrs	r3, r2
    3374:	2280      	movs	r2, #128	; 0x80
    3376:	00d2      	lsls	r2, r2, #3
    3378:	431a      	orrs	r2, r3
    337a:	4b03      	ldr	r3, [pc, #12]	; (3388 <system_clock_source_dfll_set_config+0xc8>)
    337c:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	46bd      	mov	sp, r7
    3382:	b002      	add	sp, #8
    3384:	bd80      	pop	{r7, pc}
    3386:	46c0      	nop			; (mov r8, r8)
    3388:	20000124 	.word	0x20000124
    338c:	03ff0000 	.word	0x03ff0000

00003390 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    3390:	b580      	push	{r7, lr}
    3392:	b082      	sub	sp, #8
    3394:	af00      	add	r7, sp, #0
    3396:	0002      	movs	r2, r0
    3398:	1dfb      	adds	r3, r7, #7
    339a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    339c:	1dfb      	adds	r3, r7, #7
    339e:	781b      	ldrb	r3, [r3, #0]
    33a0:	2b08      	cmp	r3, #8
    33a2:	d83b      	bhi.n	341c <system_clock_source_enable+0x8c>
    33a4:	009a      	lsls	r2, r3, #2
    33a6:	4b21      	ldr	r3, [pc, #132]	; (342c <system_clock_source_enable+0x9c>)
    33a8:	18d3      	adds	r3, r2, r3
    33aa:	681b      	ldr	r3, [r3, #0]
    33ac:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    33ae:	4b20      	ldr	r3, [pc, #128]	; (3430 <system_clock_source_enable+0xa0>)
    33b0:	4a1f      	ldr	r2, [pc, #124]	; (3430 <system_clock_source_enable+0xa0>)
    33b2:	6a12      	ldr	r2, [r2, #32]
    33b4:	2102      	movs	r1, #2
    33b6:	430a      	orrs	r2, r1
    33b8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    33ba:	2300      	movs	r3, #0
    33bc:	e031      	b.n	3422 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    33be:	4b1c      	ldr	r3, [pc, #112]	; (3430 <system_clock_source_enable+0xa0>)
    33c0:	4a1b      	ldr	r2, [pc, #108]	; (3430 <system_clock_source_enable+0xa0>)
    33c2:	6992      	ldr	r2, [r2, #24]
    33c4:	2102      	movs	r1, #2
    33c6:	430a      	orrs	r2, r1
    33c8:	619a      	str	r2, [r3, #24]
		break;
    33ca:	e029      	b.n	3420 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    33cc:	4a18      	ldr	r2, [pc, #96]	; (3430 <system_clock_source_enable+0xa0>)
    33ce:	4b18      	ldr	r3, [pc, #96]	; (3430 <system_clock_source_enable+0xa0>)
    33d0:	8a1b      	ldrh	r3, [r3, #16]
    33d2:	b29b      	uxth	r3, r3
    33d4:	2102      	movs	r1, #2
    33d6:	430b      	orrs	r3, r1
    33d8:	b29b      	uxth	r3, r3
    33da:	8213      	strh	r3, [r2, #16]
		break;
    33dc:	e020      	b.n	3420 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    33de:	4a14      	ldr	r2, [pc, #80]	; (3430 <system_clock_source_enable+0xa0>)
    33e0:	4b13      	ldr	r3, [pc, #76]	; (3430 <system_clock_source_enable+0xa0>)
    33e2:	8a9b      	ldrh	r3, [r3, #20]
    33e4:	b29b      	uxth	r3, r3
    33e6:	2102      	movs	r1, #2
    33e8:	430b      	orrs	r3, r1
    33ea:	b29b      	uxth	r3, r3
    33ec:	8293      	strh	r3, [r2, #20]
		break;
    33ee:	e017      	b.n	3420 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    33f0:	4b10      	ldr	r3, [pc, #64]	; (3434 <system_clock_source_enable+0xa4>)
    33f2:	681b      	ldr	r3, [r3, #0]
    33f4:	2202      	movs	r2, #2
    33f6:	431a      	orrs	r2, r3
    33f8:	4b0e      	ldr	r3, [pc, #56]	; (3434 <system_clock_source_enable+0xa4>)
    33fa:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    33fc:	4b0e      	ldr	r3, [pc, #56]	; (3438 <system_clock_source_enable+0xa8>)
    33fe:	4798      	blx	r3
		break;
    3400:	e00e      	b.n	3420 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3402:	4a0b      	ldr	r2, [pc, #44]	; (3430 <system_clock_source_enable+0xa0>)
    3404:	490a      	ldr	r1, [pc, #40]	; (3430 <system_clock_source_enable+0xa0>)
    3406:	2344      	movs	r3, #68	; 0x44
    3408:	5ccb      	ldrb	r3, [r1, r3]
    340a:	b2db      	uxtb	r3, r3
    340c:	2102      	movs	r1, #2
    340e:	430b      	orrs	r3, r1
    3410:	b2d9      	uxtb	r1, r3
    3412:	2344      	movs	r3, #68	; 0x44
    3414:	54d1      	strb	r1, [r2, r3]
		break;
    3416:	e003      	b.n	3420 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    3418:	2300      	movs	r3, #0
    341a:	e002      	b.n	3422 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    341c:	2317      	movs	r3, #23
    341e:	e000      	b.n	3422 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    3420:	2300      	movs	r3, #0
}
    3422:	0018      	movs	r0, r3
    3424:	46bd      	mov	sp, r7
    3426:	b002      	add	sp, #8
    3428:	bd80      	pop	{r7, pc}
    342a:	46c0      	nop			; (mov r8, r8)
    342c:	00004c08 	.word	0x00004c08
    3430:	40000800 	.word	0x40000800
    3434:	20000124 	.word	0x20000124
    3438:	00003025 	.word	0x00003025

0000343c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    343c:	b580      	push	{r7, lr}
    343e:	b084      	sub	sp, #16
    3440:	af00      	add	r7, sp, #0
    3442:	0002      	movs	r2, r0
    3444:	1dfb      	adds	r3, r7, #7
    3446:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    3448:	2300      	movs	r3, #0
    344a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    344c:	1dfb      	adds	r3, r7, #7
    344e:	781b      	ldrb	r3, [r3, #0]
    3450:	2b08      	cmp	r3, #8
    3452:	d821      	bhi.n	3498 <system_clock_source_is_ready+0x5c>
    3454:	009a      	lsls	r2, r3, #2
    3456:	4b18      	ldr	r3, [pc, #96]	; (34b8 <system_clock_source_is_ready+0x7c>)
    3458:	18d3      	adds	r3, r2, r3
    345a:	681b      	ldr	r3, [r3, #0]
    345c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    345e:	2308      	movs	r3, #8
    3460:	60fb      	str	r3, [r7, #12]
		break;
    3462:	e01b      	b.n	349c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    3464:	2304      	movs	r3, #4
    3466:	60fb      	str	r3, [r7, #12]
		break;
    3468:	e018      	b.n	349c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    346a:	2301      	movs	r3, #1
    346c:	60fb      	str	r3, [r7, #12]
		break;
    346e:	e015      	b.n	349c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    3470:	2302      	movs	r3, #2
    3472:	60fb      	str	r3, [r7, #12]
		break;
    3474:	e012      	b.n	349c <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    3476:	23d0      	movs	r3, #208	; 0xd0
    3478:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    347a:	e00f      	b.n	349c <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    347c:	4a0f      	ldr	r2, [pc, #60]	; (34bc <system_clock_source_is_ready+0x80>)
    347e:	2350      	movs	r3, #80	; 0x50
    3480:	5cd3      	ldrb	r3, [r2, r3]
    3482:	b2db      	uxtb	r3, r3
    3484:	001a      	movs	r2, r3
    3486:	2303      	movs	r3, #3
    3488:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    348a:	3b03      	subs	r3, #3
    348c:	425a      	negs	r2, r3
    348e:	4153      	adcs	r3, r2
    3490:	b2db      	uxtb	r3, r3
    3492:	e00c      	b.n	34ae <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    3494:	2301      	movs	r3, #1
    3496:	e00a      	b.n	34ae <system_clock_source_is_ready+0x72>

	default:
		return false;
    3498:	2300      	movs	r3, #0
    349a:	e008      	b.n	34ae <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    349c:	4b07      	ldr	r3, [pc, #28]	; (34bc <system_clock_source_is_ready+0x80>)
    349e:	68db      	ldr	r3, [r3, #12]
    34a0:	68fa      	ldr	r2, [r7, #12]
    34a2:	401a      	ands	r2, r3
    34a4:	68fb      	ldr	r3, [r7, #12]
    34a6:	1ad3      	subs	r3, r2, r3
    34a8:	425a      	negs	r2, r3
    34aa:	4153      	adcs	r3, r2
    34ac:	b2db      	uxtb	r3, r3
}
    34ae:	0018      	movs	r0, r3
    34b0:	46bd      	mov	sp, r7
    34b2:	b004      	add	sp, #16
    34b4:	bd80      	pop	{r7, pc}
    34b6:	46c0      	nop			; (mov r8, r8)
    34b8:	00004c2c 	.word	0x00004c2c
    34bc:	40000800 	.word	0x40000800

000034c0 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    34c0:	b580      	push	{r7, lr}
    34c2:	b082      	sub	sp, #8
    34c4:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    34c6:	003b      	movs	r3, r7
    34c8:	2202      	movs	r2, #2
    34ca:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    34cc:	2300      	movs	r3, #0
    34ce:	607b      	str	r3, [r7, #4]
    34d0:	e009      	b.n	34e6 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    34d2:	687b      	ldr	r3, [r7, #4]
    34d4:	b2db      	uxtb	r3, r3
    34d6:	003a      	movs	r2, r7
    34d8:	0011      	movs	r1, r2
    34da:	0018      	movs	r0, r3
    34dc:	4b05      	ldr	r3, [pc, #20]	; (34f4 <_switch_peripheral_gclk+0x34>)
    34de:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    34e0:	687b      	ldr	r3, [r7, #4]
    34e2:	3301      	adds	r3, #1
    34e4:	607b      	str	r3, [r7, #4]
    34e6:	687b      	ldr	r3, [r7, #4]
    34e8:	2b24      	cmp	r3, #36	; 0x24
    34ea:	d9f2      	bls.n	34d2 <_switch_peripheral_gclk+0x12>
	}
}
    34ec:	46c0      	nop			; (mov r8, r8)
    34ee:	46bd      	mov	sp, r7
    34f0:	b002      	add	sp, #8
    34f2:	bd80      	pop	{r7, pc}
    34f4:	00003a95 	.word	0x00003a95

000034f8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    34f8:	b580      	push	{r7, lr}
    34fa:	b0aa      	sub	sp, #168	; 0xa8
    34fc:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    34fe:	4b85      	ldr	r3, [pc, #532]	; (3714 <system_clock_init+0x21c>)
    3500:	22c2      	movs	r2, #194	; 0xc2
    3502:	00d2      	lsls	r2, r2, #3
    3504:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    3506:	2002      	movs	r0, #2
    3508:	4b83      	ldr	r3, [pc, #524]	; (3718 <system_clock_init+0x220>)
    350a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    350c:	4b83      	ldr	r3, [pc, #524]	; (371c <system_clock_init+0x224>)
    350e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    3510:	2394      	movs	r3, #148	; 0x94
    3512:	18fb      	adds	r3, r7, r3
    3514:	0018      	movs	r0, r3
    3516:	4b82      	ldr	r3, [pc, #520]	; (3720 <system_clock_init+0x228>)
    3518:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    351a:	2394      	movs	r3, #148	; 0x94
    351c:	18fb      	adds	r3, r7, r3
    351e:	2280      	movs	r2, #128	; 0x80
    3520:	0212      	lsls	r2, r2, #8
    3522:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    3524:	2394      	movs	r3, #148	; 0x94
    3526:	18fb      	adds	r3, r7, r3
    3528:	2200      	movs	r2, #0
    352a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    352c:	2394      	movs	r3, #148	; 0x94
    352e:	18fb      	adds	r3, r7, r3
    3530:	2206      	movs	r2, #6
    3532:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    3534:	2394      	movs	r3, #148	; 0x94
    3536:	18fb      	adds	r3, r7, r3
    3538:	2200      	movs	r2, #0
    353a:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    353c:	2394      	movs	r3, #148	; 0x94
    353e:	18fb      	adds	r3, r7, r3
    3540:	2200      	movs	r2, #0
    3542:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    3544:	2394      	movs	r3, #148	; 0x94
    3546:	18fb      	adds	r3, r7, r3
    3548:	2201      	movs	r2, #1
    354a:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    354c:	2394      	movs	r3, #148	; 0x94
    354e:	18fb      	adds	r3, r7, r3
    3550:	2200      	movs	r2, #0
    3552:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    3554:	2394      	movs	r3, #148	; 0x94
    3556:	18fb      	adds	r3, r7, r3
    3558:	2201      	movs	r2, #1
    355a:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    355c:	2394      	movs	r3, #148	; 0x94
    355e:	18fb      	adds	r3, r7, r3
    3560:	0018      	movs	r0, r3
    3562:	4b70      	ldr	r3, [pc, #448]	; (3724 <system_clock_init+0x22c>)
    3564:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3566:	2005      	movs	r0, #5
    3568:	4b6f      	ldr	r3, [pc, #444]	; (3728 <system_clock_init+0x230>)
    356a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    356c:	46c0      	nop			; (mov r8, r8)
    356e:	2005      	movs	r0, #5
    3570:	4b6e      	ldr	r3, [pc, #440]	; (372c <system_clock_init+0x234>)
    3572:	4798      	blx	r3
    3574:	0003      	movs	r3, r0
    3576:	001a      	movs	r2, r3
    3578:	2301      	movs	r3, #1
    357a:	4053      	eors	r3, r2
    357c:	b2db      	uxtb	r3, r3
    357e:	2b00      	cmp	r3, #0
    3580:	d1f5      	bne.n	356e <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    3582:	2380      	movs	r3, #128	; 0x80
    3584:	18fb      	adds	r3, r7, r3
    3586:	0018      	movs	r0, r3
    3588:	4b69      	ldr	r3, [pc, #420]	; (3730 <system_clock_init+0x238>)
    358a:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    358c:	2380      	movs	r3, #128	; 0x80
    358e:	18fb      	adds	r3, r7, r3
    3590:	2204      	movs	r2, #4
    3592:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    3594:	2380      	movs	r3, #128	; 0x80
    3596:	18fb      	adds	r3, r7, r3
    3598:	2200      	movs	r2, #0
    359a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    359c:	4b65      	ldr	r3, [pc, #404]	; (3734 <system_clock_init+0x23c>)
    359e:	681b      	ldr	r3, [r3, #0]
    35a0:	0e9b      	lsrs	r3, r3, #26
    35a2:	22a4      	movs	r2, #164	; 0xa4
    35a4:	18ba      	adds	r2, r7, r2
    35a6:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    35a8:	23a4      	movs	r3, #164	; 0xa4
    35aa:	18fb      	adds	r3, r7, r3
    35ac:	681b      	ldr	r3, [r3, #0]
    35ae:	2b3f      	cmp	r3, #63	; 0x3f
    35b0:	d103      	bne.n	35ba <system_clock_init+0xc2>
		coarse = 0x1f;
    35b2:	231f      	movs	r3, #31
    35b4:	22a4      	movs	r2, #164	; 0xa4
    35b6:	18ba      	adds	r2, r7, r2
    35b8:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    35ba:	23a4      	movs	r3, #164	; 0xa4
    35bc:	18fb      	adds	r3, r7, r3
    35be:	681b      	ldr	r3, [r3, #0]
    35c0:	b2da      	uxtb	r2, r3
    35c2:	2380      	movs	r3, #128	; 0x80
    35c4:	18fb      	adds	r3, r7, r3
    35c6:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    35c8:	2380      	movs	r3, #128	; 0x80
    35ca:	18fb      	adds	r3, r7, r3
    35cc:	2200      	movs	r2, #0
    35ce:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    35d0:	2380      	movs	r3, #128	; 0x80
    35d2:	18fb      	adds	r3, r7, r3
    35d4:	2200      	movs	r2, #0
    35d6:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    35d8:	2380      	movs	r3, #128	; 0x80
    35da:	18fb      	adds	r3, r7, r3
    35dc:	2200      	movs	r2, #0
    35de:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    35e0:	2380      	movs	r3, #128	; 0x80
    35e2:	18fb      	adds	r3, r7, r3
    35e4:	2200      	movs	r2, #0
    35e6:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    35e8:	2380      	movs	r3, #128	; 0x80
    35ea:	18fb      	adds	r3, r7, r3
    35ec:	22b7      	movs	r2, #183	; 0xb7
    35ee:	00d2      	lsls	r2, r2, #3
    35f0:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    35f2:	2380      	movs	r3, #128	; 0x80
    35f4:	18fb      	adds	r3, r7, r3
    35f6:	2203      	movs	r2, #3
    35f8:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    35fa:	2380      	movs	r3, #128	; 0x80
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	221f      	movs	r2, #31
    3600:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    3602:	2380      	movs	r3, #128	; 0x80
    3604:	18fb      	adds	r3, r7, r3
    3606:	0018      	movs	r0, r3
    3608:	4b4b      	ldr	r3, [pc, #300]	; (3738 <system_clock_init+0x240>)
    360a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    360c:	237c      	movs	r3, #124	; 0x7c
    360e:	18fb      	adds	r3, r7, r3
    3610:	0018      	movs	r0, r3
    3612:	4b4a      	ldr	r3, [pc, #296]	; (373c <system_clock_init+0x244>)
    3614:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    3616:	237c      	movs	r3, #124	; 0x7c
    3618:	18fb      	adds	r3, r7, r3
    361a:	2200      	movs	r2, #0
    361c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    361e:	237c      	movs	r3, #124	; 0x7c
    3620:	18fb      	adds	r3, r7, r3
    3622:	2201      	movs	r2, #1
    3624:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    3626:	237c      	movs	r3, #124	; 0x7c
    3628:	18fb      	adds	r3, r7, r3
    362a:	2201      	movs	r2, #1
    362c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    362e:	237c      	movs	r3, #124	; 0x7c
    3630:	18fb      	adds	r3, r7, r3
    3632:	0018      	movs	r0, r3
    3634:	4b42      	ldr	r3, [pc, #264]	; (3740 <system_clock_init+0x248>)
    3636:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    3638:	2006      	movs	r0, #6
    363a:	4b3b      	ldr	r3, [pc, #236]	; (3728 <system_clock_init+0x230>)
    363c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    363e:	4b41      	ldr	r3, [pc, #260]	; (3744 <system_clock_init+0x24c>)
    3640:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    3642:	2364      	movs	r3, #100	; 0x64
    3644:	18fb      	adds	r3, r7, r3
    3646:	0018      	movs	r0, r3
    3648:	4b3f      	ldr	r3, [pc, #252]	; (3748 <system_clock_init+0x250>)
    364a:	4798      	blx	r3
    364c:	2364      	movs	r3, #100	; 0x64
    364e:	18fb      	adds	r3, r7, r3
    3650:	2205      	movs	r2, #5
    3652:	701a      	strb	r2, [r3, #0]
    3654:	2364      	movs	r3, #100	; 0x64
    3656:	18fb      	adds	r3, r7, r3
    3658:	2201      	movs	r2, #1
    365a:	605a      	str	r2, [r3, #4]
    365c:	2364      	movs	r3, #100	; 0x64
    365e:	18fb      	adds	r3, r7, r3
    3660:	2200      	movs	r2, #0
    3662:	721a      	strb	r2, [r3, #8]
    3664:	2364      	movs	r3, #100	; 0x64
    3666:	18fb      	adds	r3, r7, r3
    3668:	2200      	movs	r2, #0
    366a:	725a      	strb	r2, [r3, #9]
    366c:	2364      	movs	r3, #100	; 0x64
    366e:	18fb      	adds	r3, r7, r3
    3670:	0019      	movs	r1, r3
    3672:	2001      	movs	r0, #1
    3674:	4b35      	ldr	r3, [pc, #212]	; (374c <system_clock_init+0x254>)
    3676:	4798      	blx	r3
    3678:	2001      	movs	r0, #1
    367a:	4b35      	ldr	r3, [pc, #212]	; (3750 <system_clock_init+0x258>)
    367c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    367e:	230c      	movs	r3, #12
    3680:	18fb      	adds	r3, r7, r3
    3682:	0018      	movs	r0, r3
    3684:	4b33      	ldr	r3, [pc, #204]	; (3754 <system_clock_init+0x25c>)
    3686:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3688:	230c      	movs	r3, #12
    368a:	18fb      	adds	r3, r7, r3
    368c:	2201      	movs	r2, #1
    368e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    3690:	230c      	movs	r3, #12
    3692:	18fb      	adds	r3, r7, r3
    3694:	0019      	movs	r1, r3
    3696:	2000      	movs	r0, #0
    3698:	4b2f      	ldr	r3, [pc, #188]	; (3758 <system_clock_init+0x260>)
    369a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    369c:	2000      	movs	r0, #0
    369e:	4b2f      	ldr	r3, [pc, #188]	; (375c <system_clock_init+0x264>)
    36a0:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    36a2:	2007      	movs	r0, #7
    36a4:	4b20      	ldr	r3, [pc, #128]	; (3728 <system_clock_init+0x230>)
    36a6:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    36a8:	46c0      	nop			; (mov r8, r8)
    36aa:	2007      	movs	r0, #7
    36ac:	4b1f      	ldr	r3, [pc, #124]	; (372c <system_clock_init+0x234>)
    36ae:	4798      	blx	r3
    36b0:	0003      	movs	r3, r0
    36b2:	001a      	movs	r2, r3
    36b4:	2301      	movs	r3, #1
    36b6:	4053      	eors	r3, r2
    36b8:	b2db      	uxtb	r3, r3
    36ba:	2b00      	cmp	r3, #0
    36bc:	d1f5      	bne.n	36aa <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    36be:	2000      	movs	r0, #0
    36c0:	4b27      	ldr	r3, [pc, #156]	; (3760 <system_clock_init+0x268>)
    36c2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    36c4:	2100      	movs	r1, #0
    36c6:	2000      	movs	r0, #0
    36c8:	4b26      	ldr	r3, [pc, #152]	; (3764 <system_clock_init+0x26c>)
    36ca:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    36cc:	2100      	movs	r1, #0
    36ce:	2001      	movs	r0, #1
    36d0:	4b24      	ldr	r3, [pc, #144]	; (3764 <system_clock_init+0x26c>)
    36d2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    36d4:	2100      	movs	r1, #0
    36d6:	2002      	movs	r0, #2
    36d8:	4b22      	ldr	r3, [pc, #136]	; (3764 <system_clock_init+0x26c>)
    36da:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    36dc:	003b      	movs	r3, r7
    36de:	0018      	movs	r0, r3
    36e0:	4b19      	ldr	r3, [pc, #100]	; (3748 <system_clock_init+0x250>)
    36e2:	4798      	blx	r3
    36e4:	003b      	movs	r3, r7
    36e6:	2207      	movs	r2, #7
    36e8:	701a      	strb	r2, [r3, #0]
    36ea:	003b      	movs	r3, r7
    36ec:	2201      	movs	r2, #1
    36ee:	605a      	str	r2, [r3, #4]
    36f0:	003b      	movs	r3, r7
    36f2:	2201      	movs	r2, #1
    36f4:	721a      	strb	r2, [r3, #8]
    36f6:	003b      	movs	r3, r7
    36f8:	2200      	movs	r2, #0
    36fa:	725a      	strb	r2, [r3, #9]
    36fc:	003b      	movs	r3, r7
    36fe:	0019      	movs	r1, r3
    3700:	2000      	movs	r0, #0
    3702:	4b12      	ldr	r3, [pc, #72]	; (374c <system_clock_init+0x254>)
    3704:	4798      	blx	r3
    3706:	2000      	movs	r0, #0
    3708:	4b11      	ldr	r3, [pc, #68]	; (3750 <system_clock_init+0x258>)
    370a:	4798      	blx	r3
#endif
}
    370c:	46c0      	nop			; (mov r8, r8)
    370e:	46bd      	mov	sp, r7
    3710:	b02a      	add	sp, #168	; 0xa8
    3712:	bd80      	pop	{r7, pc}
    3714:	40000800 	.word	0x40000800
    3718:	00002fd5 	.word	0x00002fd5
    371c:	000034c1 	.word	0x000034c1
    3720:	00002ea5 	.word	0x00002ea5
    3724:	000031a1 	.word	0x000031a1
    3728:	00003391 	.word	0x00003391
    372c:	0000343d 	.word	0x0000343d
    3730:	00002f0f 	.word	0x00002f0f
    3734:	00806024 	.word	0x00806024
    3738:	000032c1 	.word	0x000032c1
    373c:	00002eed 	.word	0x00002eed
    3740:	00003129 	.word	0x00003129
    3744:	0000380d 	.word	0x0000380d
    3748:	00002e61 	.word	0x00002e61
    374c:	0000383d 	.word	0x0000383d
    3750:	00003961 	.word	0x00003961
    3754:	00002e8f 	.word	0x00002e8f
    3758:	00003a95 	.word	0x00003a95
    375c:	00003ad9 	.word	0x00003ad9
    3760:	00002f61 	.word	0x00002f61
    3764:	00002f81 	.word	0x00002f81

00003768 <system_apb_clock_set_mask>:
{
    3768:	b580      	push	{r7, lr}
    376a:	b082      	sub	sp, #8
    376c:	af00      	add	r7, sp, #0
    376e:	0002      	movs	r2, r0
    3770:	6039      	str	r1, [r7, #0]
    3772:	1dfb      	adds	r3, r7, #7
    3774:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3776:	1dfb      	adds	r3, r7, #7
    3778:	781b      	ldrb	r3, [r3, #0]
    377a:	2b01      	cmp	r3, #1
    377c:	d00a      	beq.n	3794 <system_apb_clock_set_mask+0x2c>
    377e:	2b02      	cmp	r3, #2
    3780:	d00f      	beq.n	37a2 <system_apb_clock_set_mask+0x3a>
    3782:	2b00      	cmp	r3, #0
    3784:	d114      	bne.n	37b0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3786:	4b0e      	ldr	r3, [pc, #56]	; (37c0 <system_apb_clock_set_mask+0x58>)
    3788:	4a0d      	ldr	r2, [pc, #52]	; (37c0 <system_apb_clock_set_mask+0x58>)
    378a:	6991      	ldr	r1, [r2, #24]
    378c:	683a      	ldr	r2, [r7, #0]
    378e:	430a      	orrs	r2, r1
    3790:	619a      	str	r2, [r3, #24]
			break;
    3792:	e00f      	b.n	37b4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3794:	4b0a      	ldr	r3, [pc, #40]	; (37c0 <system_apb_clock_set_mask+0x58>)
    3796:	4a0a      	ldr	r2, [pc, #40]	; (37c0 <system_apb_clock_set_mask+0x58>)
    3798:	69d1      	ldr	r1, [r2, #28]
    379a:	683a      	ldr	r2, [r7, #0]
    379c:	430a      	orrs	r2, r1
    379e:	61da      	str	r2, [r3, #28]
			break;
    37a0:	e008      	b.n	37b4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    37a2:	4b07      	ldr	r3, [pc, #28]	; (37c0 <system_apb_clock_set_mask+0x58>)
    37a4:	4a06      	ldr	r2, [pc, #24]	; (37c0 <system_apb_clock_set_mask+0x58>)
    37a6:	6a11      	ldr	r1, [r2, #32]
    37a8:	683a      	ldr	r2, [r7, #0]
    37aa:	430a      	orrs	r2, r1
    37ac:	621a      	str	r2, [r3, #32]
			break;
    37ae:	e001      	b.n	37b4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    37b0:	2317      	movs	r3, #23
    37b2:	e000      	b.n	37b6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    37b4:	2300      	movs	r3, #0
}
    37b6:	0018      	movs	r0, r3
    37b8:	46bd      	mov	sp, r7
    37ba:	b002      	add	sp, #8
    37bc:	bd80      	pop	{r7, pc}
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	40000400 	.word	0x40000400

000037c4 <system_interrupt_enter_critical_section>:
{
    37c4:	b580      	push	{r7, lr}
    37c6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    37c8:	4b02      	ldr	r3, [pc, #8]	; (37d4 <system_interrupt_enter_critical_section+0x10>)
    37ca:	4798      	blx	r3
}
    37cc:	46c0      	nop			; (mov r8, r8)
    37ce:	46bd      	mov	sp, r7
    37d0:	bd80      	pop	{r7, pc}
    37d2:	46c0      	nop			; (mov r8, r8)
    37d4:	00000fbd 	.word	0x00000fbd

000037d8 <system_interrupt_leave_critical_section>:
{
    37d8:	b580      	push	{r7, lr}
    37da:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    37dc:	4b02      	ldr	r3, [pc, #8]	; (37e8 <system_interrupt_leave_critical_section+0x10>)
    37de:	4798      	blx	r3
}
    37e0:	46c0      	nop			; (mov r8, r8)
    37e2:	46bd      	mov	sp, r7
    37e4:	bd80      	pop	{r7, pc}
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	00001011 	.word	0x00001011

000037ec <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    37ec:	b580      	push	{r7, lr}
    37ee:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    37f0:	4b05      	ldr	r3, [pc, #20]	; (3808 <system_gclk_is_syncing+0x1c>)
    37f2:	785b      	ldrb	r3, [r3, #1]
    37f4:	b2db      	uxtb	r3, r3
    37f6:	b25b      	sxtb	r3, r3
    37f8:	2b00      	cmp	r3, #0
    37fa:	da01      	bge.n	3800 <system_gclk_is_syncing+0x14>
		return true;
    37fc:	2301      	movs	r3, #1
    37fe:	e000      	b.n	3802 <system_gclk_is_syncing+0x16>
	}

	return false;
    3800:	2300      	movs	r3, #0
}
    3802:	0018      	movs	r0, r3
    3804:	46bd      	mov	sp, r7
    3806:	bd80      	pop	{r7, pc}
    3808:	40000c00 	.word	0x40000c00

0000380c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    380c:	b580      	push	{r7, lr}
    380e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    3810:	2108      	movs	r1, #8
    3812:	2000      	movs	r0, #0
    3814:	4b07      	ldr	r3, [pc, #28]	; (3834 <system_gclk_init+0x28>)
    3816:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3818:	4b07      	ldr	r3, [pc, #28]	; (3838 <system_gclk_init+0x2c>)
    381a:	2201      	movs	r2, #1
    381c:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    381e:	46c0      	nop			; (mov r8, r8)
    3820:	4b05      	ldr	r3, [pc, #20]	; (3838 <system_gclk_init+0x2c>)
    3822:	781b      	ldrb	r3, [r3, #0]
    3824:	b2db      	uxtb	r3, r3
    3826:	001a      	movs	r2, r3
    3828:	2301      	movs	r3, #1
    382a:	4013      	ands	r3, r2
    382c:	d1f8      	bne.n	3820 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	46bd      	mov	sp, r7
    3832:	bd80      	pop	{r7, pc}
    3834:	00003769 	.word	0x00003769
    3838:	40000c00 	.word	0x40000c00

0000383c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    383c:	b580      	push	{r7, lr}
    383e:	b086      	sub	sp, #24
    3840:	af00      	add	r7, sp, #0
    3842:	0002      	movs	r2, r0
    3844:	6039      	str	r1, [r7, #0]
    3846:	1dfb      	adds	r3, r7, #7
    3848:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    384a:	1dfb      	adds	r3, r7, #7
    384c:	781b      	ldrb	r3, [r3, #0]
    384e:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    3850:	1dfb      	adds	r3, r7, #7
    3852:	781b      	ldrb	r3, [r3, #0]
    3854:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3856:	683b      	ldr	r3, [r7, #0]
    3858:	781b      	ldrb	r3, [r3, #0]
    385a:	021b      	lsls	r3, r3, #8
    385c:	001a      	movs	r2, r3
    385e:	697b      	ldr	r3, [r7, #20]
    3860:	4313      	orrs	r3, r2
    3862:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    3864:	683b      	ldr	r3, [r7, #0]
    3866:	785b      	ldrb	r3, [r3, #1]
    3868:	2b00      	cmp	r3, #0
    386a:	d004      	beq.n	3876 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    386c:	697b      	ldr	r3, [r7, #20]
    386e:	2280      	movs	r2, #128	; 0x80
    3870:	02d2      	lsls	r2, r2, #11
    3872:	4313      	orrs	r3, r2
    3874:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3876:	683b      	ldr	r3, [r7, #0]
    3878:	7a5b      	ldrb	r3, [r3, #9]
    387a:	2b00      	cmp	r3, #0
    387c:	d004      	beq.n	3888 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    387e:	697b      	ldr	r3, [r7, #20]
    3880:	2280      	movs	r2, #128	; 0x80
    3882:	0312      	lsls	r2, r2, #12
    3884:	4313      	orrs	r3, r2
    3886:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3888:	683b      	ldr	r3, [r7, #0]
    388a:	685b      	ldr	r3, [r3, #4]
    388c:	2b01      	cmp	r3, #1
    388e:	d92c      	bls.n	38ea <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3890:	683b      	ldr	r3, [r7, #0]
    3892:	685a      	ldr	r2, [r3, #4]
    3894:	683b      	ldr	r3, [r7, #0]
    3896:	685b      	ldr	r3, [r3, #4]
    3898:	3b01      	subs	r3, #1
    389a:	4013      	ands	r3, r2
    389c:	d11a      	bne.n	38d4 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    389e:	2300      	movs	r3, #0
    38a0:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    38a2:	2302      	movs	r3, #2
    38a4:	60bb      	str	r3, [r7, #8]
    38a6:	e005      	b.n	38b4 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    38a8:	68fb      	ldr	r3, [r7, #12]
    38aa:	3301      	adds	r3, #1
    38ac:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    38ae:	68bb      	ldr	r3, [r7, #8]
    38b0:	005b      	lsls	r3, r3, #1
    38b2:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    38b4:	683b      	ldr	r3, [r7, #0]
    38b6:	685a      	ldr	r2, [r3, #4]
    38b8:	68bb      	ldr	r3, [r7, #8]
    38ba:	429a      	cmp	r2, r3
    38bc:	d8f4      	bhi.n	38a8 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    38be:	68fb      	ldr	r3, [r7, #12]
    38c0:	021b      	lsls	r3, r3, #8
    38c2:	693a      	ldr	r2, [r7, #16]
    38c4:	4313      	orrs	r3, r2
    38c6:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    38c8:	697b      	ldr	r3, [r7, #20]
    38ca:	2280      	movs	r2, #128	; 0x80
    38cc:	0352      	lsls	r2, r2, #13
    38ce:	4313      	orrs	r3, r2
    38d0:	617b      	str	r3, [r7, #20]
    38d2:	e00a      	b.n	38ea <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    38d4:	683b      	ldr	r3, [r7, #0]
    38d6:	685b      	ldr	r3, [r3, #4]
    38d8:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    38da:	693a      	ldr	r2, [r7, #16]
    38dc:	4313      	orrs	r3, r2
    38de:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    38e0:	697b      	ldr	r3, [r7, #20]
    38e2:	2280      	movs	r2, #128	; 0x80
    38e4:	0292      	lsls	r2, r2, #10
    38e6:	4313      	orrs	r3, r2
    38e8:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    38ea:	683b      	ldr	r3, [r7, #0]
    38ec:	7a1b      	ldrb	r3, [r3, #8]
    38ee:	2b00      	cmp	r3, #0
    38f0:	d004      	beq.n	38fc <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    38f2:	697b      	ldr	r3, [r7, #20]
    38f4:	2280      	movs	r2, #128	; 0x80
    38f6:	0392      	lsls	r2, r2, #14
    38f8:	4313      	orrs	r3, r2
    38fa:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    38fc:	46c0      	nop			; (mov r8, r8)
    38fe:	4b13      	ldr	r3, [pc, #76]	; (394c <system_gclk_gen_set_config+0x110>)
    3900:	4798      	blx	r3
    3902:	1e03      	subs	r3, r0, #0
    3904:	d1fb      	bne.n	38fe <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3906:	4b12      	ldr	r3, [pc, #72]	; (3950 <system_gclk_gen_set_config+0x114>)
    3908:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    390a:	4a12      	ldr	r2, [pc, #72]	; (3954 <system_gclk_gen_set_config+0x118>)
    390c:	1dfb      	adds	r3, r7, #7
    390e:	781b      	ldrb	r3, [r3, #0]
    3910:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    3912:	46c0      	nop			; (mov r8, r8)
    3914:	4b0d      	ldr	r3, [pc, #52]	; (394c <system_gclk_gen_set_config+0x110>)
    3916:	4798      	blx	r3
    3918:	1e03      	subs	r3, r0, #0
    391a:	d1fb      	bne.n	3914 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    391c:	4b0e      	ldr	r3, [pc, #56]	; (3958 <system_gclk_gen_set_config+0x11c>)
    391e:	693a      	ldr	r2, [r7, #16]
    3920:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    3922:	46c0      	nop			; (mov r8, r8)
    3924:	4b09      	ldr	r3, [pc, #36]	; (394c <system_gclk_gen_set_config+0x110>)
    3926:	4798      	blx	r3
    3928:	1e03      	subs	r3, r0, #0
    392a:	d1fb      	bne.n	3924 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    392c:	4b0a      	ldr	r3, [pc, #40]	; (3958 <system_gclk_gen_set_config+0x11c>)
    392e:	4a0a      	ldr	r2, [pc, #40]	; (3958 <system_gclk_gen_set_config+0x11c>)
    3930:	6851      	ldr	r1, [r2, #4]
    3932:	2280      	movs	r2, #128	; 0x80
    3934:	0252      	lsls	r2, r2, #9
    3936:	4011      	ands	r1, r2
    3938:	697a      	ldr	r2, [r7, #20]
    393a:	430a      	orrs	r2, r1
    393c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    393e:	4b07      	ldr	r3, [pc, #28]	; (395c <system_gclk_gen_set_config+0x120>)
    3940:	4798      	blx	r3
}
    3942:	46c0      	nop			; (mov r8, r8)
    3944:	46bd      	mov	sp, r7
    3946:	b006      	add	sp, #24
    3948:	bd80      	pop	{r7, pc}
    394a:	46c0      	nop			; (mov r8, r8)
    394c:	000037ed 	.word	0x000037ed
    3950:	000037c5 	.word	0x000037c5
    3954:	40000c08 	.word	0x40000c08
    3958:	40000c00 	.word	0x40000c00
    395c:	000037d9 	.word	0x000037d9

00003960 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3960:	b580      	push	{r7, lr}
    3962:	b082      	sub	sp, #8
    3964:	af00      	add	r7, sp, #0
    3966:	0002      	movs	r2, r0
    3968:	1dfb      	adds	r3, r7, #7
    396a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    396c:	46c0      	nop			; (mov r8, r8)
    396e:	4b0e      	ldr	r3, [pc, #56]	; (39a8 <system_gclk_gen_enable+0x48>)
    3970:	4798      	blx	r3
    3972:	1e03      	subs	r3, r0, #0
    3974:	d1fb      	bne.n	396e <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    3976:	4b0d      	ldr	r3, [pc, #52]	; (39ac <system_gclk_gen_enable+0x4c>)
    3978:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    397a:	4a0d      	ldr	r2, [pc, #52]	; (39b0 <system_gclk_gen_enable+0x50>)
    397c:	1dfb      	adds	r3, r7, #7
    397e:	781b      	ldrb	r3, [r3, #0]
    3980:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3982:	46c0      	nop			; (mov r8, r8)
    3984:	4b08      	ldr	r3, [pc, #32]	; (39a8 <system_gclk_gen_enable+0x48>)
    3986:	4798      	blx	r3
    3988:	1e03      	subs	r3, r0, #0
    398a:	d1fb      	bne.n	3984 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    398c:	4b09      	ldr	r3, [pc, #36]	; (39b4 <system_gclk_gen_enable+0x54>)
    398e:	4a09      	ldr	r2, [pc, #36]	; (39b4 <system_gclk_gen_enable+0x54>)
    3990:	6852      	ldr	r2, [r2, #4]
    3992:	2180      	movs	r1, #128	; 0x80
    3994:	0249      	lsls	r1, r1, #9
    3996:	430a      	orrs	r2, r1
    3998:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    399a:	4b07      	ldr	r3, [pc, #28]	; (39b8 <system_gclk_gen_enable+0x58>)
    399c:	4798      	blx	r3
}
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	46bd      	mov	sp, r7
    39a2:	b002      	add	sp, #8
    39a4:	bd80      	pop	{r7, pc}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	000037ed 	.word	0x000037ed
    39ac:	000037c5 	.word	0x000037c5
    39b0:	40000c04 	.word	0x40000c04
    39b4:	40000c00 	.word	0x40000c00
    39b8:	000037d9 	.word	0x000037d9

000039bc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    39bc:	b580      	push	{r7, lr}
    39be:	b086      	sub	sp, #24
    39c0:	af00      	add	r7, sp, #0
    39c2:	0002      	movs	r2, r0
    39c4:	1dfb      	adds	r3, r7, #7
    39c6:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    39c8:	46c0      	nop			; (mov r8, r8)
    39ca:	4b2a      	ldr	r3, [pc, #168]	; (3a74 <system_gclk_gen_get_hz+0xb8>)
    39cc:	4798      	blx	r3
    39ce:	1e03      	subs	r3, r0, #0
    39d0:	d1fb      	bne.n	39ca <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    39d2:	4b29      	ldr	r3, [pc, #164]	; (3a78 <system_gclk_gen_get_hz+0xbc>)
    39d4:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    39d6:	4a29      	ldr	r2, [pc, #164]	; (3a7c <system_gclk_gen_get_hz+0xc0>)
    39d8:	1dfb      	adds	r3, r7, #7
    39da:	781b      	ldrb	r3, [r3, #0]
    39dc:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    39de:	46c0      	nop			; (mov r8, r8)
    39e0:	4b24      	ldr	r3, [pc, #144]	; (3a74 <system_gclk_gen_get_hz+0xb8>)
    39e2:	4798      	blx	r3
    39e4:	1e03      	subs	r3, r0, #0
    39e6:	d1fb      	bne.n	39e0 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    39e8:	4b25      	ldr	r3, [pc, #148]	; (3a80 <system_gclk_gen_get_hz+0xc4>)
    39ea:	685b      	ldr	r3, [r3, #4]
    39ec:	04db      	lsls	r3, r3, #19
    39ee:	0edb      	lsrs	r3, r3, #27
    39f0:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    39f2:	0018      	movs	r0, r3
    39f4:	4b23      	ldr	r3, [pc, #140]	; (3a84 <system_gclk_gen_get_hz+0xc8>)
    39f6:	4798      	blx	r3
    39f8:	0003      	movs	r3, r0
    39fa:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    39fc:	4a1f      	ldr	r2, [pc, #124]	; (3a7c <system_gclk_gen_get_hz+0xc0>)
    39fe:	1dfb      	adds	r3, r7, #7
    3a00:	781b      	ldrb	r3, [r3, #0]
    3a02:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    3a04:	4b1e      	ldr	r3, [pc, #120]	; (3a80 <system_gclk_gen_get_hz+0xc4>)
    3a06:	685b      	ldr	r3, [r3, #4]
    3a08:	02db      	lsls	r3, r3, #11
    3a0a:	0fdb      	lsrs	r3, r3, #31
    3a0c:	b2da      	uxtb	r2, r3
    3a0e:	2313      	movs	r3, #19
    3a10:	18fb      	adds	r3, r7, r3
    3a12:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3a14:	4a1c      	ldr	r2, [pc, #112]	; (3a88 <system_gclk_gen_get_hz+0xcc>)
    3a16:	1dfb      	adds	r3, r7, #7
    3a18:	781b      	ldrb	r3, [r3, #0]
    3a1a:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    3a1c:	46c0      	nop			; (mov r8, r8)
    3a1e:	4b15      	ldr	r3, [pc, #84]	; (3a74 <system_gclk_gen_get_hz+0xb8>)
    3a20:	4798      	blx	r3
    3a22:	1e03      	subs	r3, r0, #0
    3a24:	d1fb      	bne.n	3a1e <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    3a26:	4b16      	ldr	r3, [pc, #88]	; (3a80 <system_gclk_gen_get_hz+0xc4>)
    3a28:	689b      	ldr	r3, [r3, #8]
    3a2a:	021b      	lsls	r3, r3, #8
    3a2c:	0c1b      	lsrs	r3, r3, #16
    3a2e:	b29b      	uxth	r3, r3
    3a30:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    3a32:	4b16      	ldr	r3, [pc, #88]	; (3a8c <system_gclk_gen_get_hz+0xd0>)
    3a34:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3a36:	2313      	movs	r3, #19
    3a38:	18fb      	adds	r3, r7, r3
    3a3a:	781b      	ldrb	r3, [r3, #0]
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d109      	bne.n	3a54 <system_gclk_gen_get_hz+0x98>
    3a40:	68fb      	ldr	r3, [r7, #12]
    3a42:	2b01      	cmp	r3, #1
    3a44:	d906      	bls.n	3a54 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    3a46:	4b12      	ldr	r3, [pc, #72]	; (3a90 <system_gclk_gen_get_hz+0xd4>)
    3a48:	68f9      	ldr	r1, [r7, #12]
    3a4a:	6978      	ldr	r0, [r7, #20]
    3a4c:	4798      	blx	r3
    3a4e:	0003      	movs	r3, r0
    3a50:	617b      	str	r3, [r7, #20]
    3a52:	e00a      	b.n	3a6a <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    3a54:	2313      	movs	r3, #19
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	781b      	ldrb	r3, [r3, #0]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d005      	beq.n	3a6a <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    3a5e:	68fb      	ldr	r3, [r7, #12]
    3a60:	3301      	adds	r3, #1
    3a62:	697a      	ldr	r2, [r7, #20]
    3a64:	40da      	lsrs	r2, r3
    3a66:	0013      	movs	r3, r2
    3a68:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    3a6a:	697b      	ldr	r3, [r7, #20]
}
    3a6c:	0018      	movs	r0, r3
    3a6e:	46bd      	mov	sp, r7
    3a70:	b006      	add	sp, #24
    3a72:	bd80      	pop	{r7, pc}
    3a74:	000037ed 	.word	0x000037ed
    3a78:	000037c5 	.word	0x000037c5
    3a7c:	40000c04 	.word	0x40000c04
    3a80:	40000c00 	.word	0x40000c00
    3a84:	00003069 	.word	0x00003069
    3a88:	40000c08 	.word	0x40000c08
    3a8c:	000037d9 	.word	0x000037d9
    3a90:	00004235 	.word	0x00004235

00003a94 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    3a94:	b580      	push	{r7, lr}
    3a96:	b084      	sub	sp, #16
    3a98:	af00      	add	r7, sp, #0
    3a9a:	0002      	movs	r2, r0
    3a9c:	6039      	str	r1, [r7, #0]
    3a9e:	1dfb      	adds	r3, r7, #7
    3aa0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    3aa2:	1dfb      	adds	r3, r7, #7
    3aa4:	781b      	ldrb	r3, [r3, #0]
    3aa6:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    3aa8:	683b      	ldr	r3, [r7, #0]
    3aaa:	781b      	ldrb	r3, [r3, #0]
    3aac:	021b      	lsls	r3, r3, #8
    3aae:	001a      	movs	r2, r3
    3ab0:	68fb      	ldr	r3, [r7, #12]
    3ab2:	4313      	orrs	r3, r2
    3ab4:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    3ab6:	1dfb      	adds	r3, r7, #7
    3ab8:	781b      	ldrb	r3, [r3, #0]
    3aba:	0018      	movs	r0, r3
    3abc:	4b04      	ldr	r3, [pc, #16]	; (3ad0 <system_gclk_chan_set_config+0x3c>)
    3abe:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    3ac0:	4b04      	ldr	r3, [pc, #16]	; (3ad4 <system_gclk_chan_set_config+0x40>)
    3ac2:	68fa      	ldr	r2, [r7, #12]
    3ac4:	b292      	uxth	r2, r2
    3ac6:	805a      	strh	r2, [r3, #2]
}
    3ac8:	46c0      	nop			; (mov r8, r8)
    3aca:	46bd      	mov	sp, r7
    3acc:	b004      	add	sp, #16
    3ace:	bd80      	pop	{r7, pc}
    3ad0:	00003b21 	.word	0x00003b21
    3ad4:	40000c00 	.word	0x40000c00

00003ad8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3ad8:	b580      	push	{r7, lr}
    3ada:	b082      	sub	sp, #8
    3adc:	af00      	add	r7, sp, #0
    3ade:	0002      	movs	r2, r0
    3ae0:	1dfb      	adds	r3, r7, #7
    3ae2:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3ae4:	4b0a      	ldr	r3, [pc, #40]	; (3b10 <system_gclk_chan_enable+0x38>)
    3ae6:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3ae8:	4a0a      	ldr	r2, [pc, #40]	; (3b14 <system_gclk_chan_enable+0x3c>)
    3aea:	1dfb      	adds	r3, r7, #7
    3aec:	781b      	ldrb	r3, [r3, #0]
    3aee:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3af0:	4909      	ldr	r1, [pc, #36]	; (3b18 <system_gclk_chan_enable+0x40>)
    3af2:	4b09      	ldr	r3, [pc, #36]	; (3b18 <system_gclk_chan_enable+0x40>)
    3af4:	885b      	ldrh	r3, [r3, #2]
    3af6:	b29b      	uxth	r3, r3
    3af8:	2280      	movs	r2, #128	; 0x80
    3afa:	01d2      	lsls	r2, r2, #7
    3afc:	4313      	orrs	r3, r2
    3afe:	b29b      	uxth	r3, r3
    3b00:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    3b02:	4b06      	ldr	r3, [pc, #24]	; (3b1c <system_gclk_chan_enable+0x44>)
    3b04:	4798      	blx	r3
}
    3b06:	46c0      	nop			; (mov r8, r8)
    3b08:	46bd      	mov	sp, r7
    3b0a:	b002      	add	sp, #8
    3b0c:	bd80      	pop	{r7, pc}
    3b0e:	46c0      	nop			; (mov r8, r8)
    3b10:	000037c5 	.word	0x000037c5
    3b14:	40000c02 	.word	0x40000c02
    3b18:	40000c00 	.word	0x40000c00
    3b1c:	000037d9 	.word	0x000037d9

00003b20 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3b20:	b580      	push	{r7, lr}
    3b22:	b084      	sub	sp, #16
    3b24:	af00      	add	r7, sp, #0
    3b26:	0002      	movs	r2, r0
    3b28:	1dfb      	adds	r3, r7, #7
    3b2a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    3b2c:	4b1c      	ldr	r3, [pc, #112]	; (3ba0 <system_gclk_chan_disable+0x80>)
    3b2e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3b30:	4a1c      	ldr	r2, [pc, #112]	; (3ba4 <system_gclk_chan_disable+0x84>)
    3b32:	1dfb      	adds	r3, r7, #7
    3b34:	781b      	ldrb	r3, [r3, #0]
    3b36:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3b38:	4b1b      	ldr	r3, [pc, #108]	; (3ba8 <system_gclk_chan_disable+0x88>)
    3b3a:	885b      	ldrh	r3, [r3, #2]
    3b3c:	051b      	lsls	r3, r3, #20
    3b3e:	0f1b      	lsrs	r3, r3, #28
    3b40:	b2db      	uxtb	r3, r3
    3b42:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    3b44:	4a18      	ldr	r2, [pc, #96]	; (3ba8 <system_gclk_chan_disable+0x88>)
    3b46:	8853      	ldrh	r3, [r2, #2]
    3b48:	4918      	ldr	r1, [pc, #96]	; (3bac <system_gclk_chan_disable+0x8c>)
    3b4a:	400b      	ands	r3, r1
    3b4c:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3b4e:	4a16      	ldr	r2, [pc, #88]	; (3ba8 <system_gclk_chan_disable+0x88>)
    3b50:	4b15      	ldr	r3, [pc, #84]	; (3ba8 <system_gclk_chan_disable+0x88>)
    3b52:	885b      	ldrh	r3, [r3, #2]
    3b54:	b29b      	uxth	r3, r3
    3b56:	4916      	ldr	r1, [pc, #88]	; (3bb0 <system_gclk_chan_disable+0x90>)
    3b58:	400b      	ands	r3, r1
    3b5a:	b29b      	uxth	r3, r3
    3b5c:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3b5e:	46c0      	nop			; (mov r8, r8)
    3b60:	4b11      	ldr	r3, [pc, #68]	; (3ba8 <system_gclk_chan_disable+0x88>)
    3b62:	885b      	ldrh	r3, [r3, #2]
    3b64:	b29b      	uxth	r3, r3
    3b66:	001a      	movs	r2, r3
    3b68:	2380      	movs	r3, #128	; 0x80
    3b6a:	01db      	lsls	r3, r3, #7
    3b6c:	4013      	ands	r3, r2
    3b6e:	d1f7      	bne.n	3b60 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3b70:	4a0d      	ldr	r2, [pc, #52]	; (3ba8 <system_gclk_chan_disable+0x88>)
    3b72:	68fb      	ldr	r3, [r7, #12]
    3b74:	b2db      	uxtb	r3, r3
    3b76:	1c19      	adds	r1, r3, #0
    3b78:	230f      	movs	r3, #15
    3b7a:	400b      	ands	r3, r1
    3b7c:	b2d9      	uxtb	r1, r3
    3b7e:	8853      	ldrh	r3, [r2, #2]
    3b80:	1c08      	adds	r0, r1, #0
    3b82:	210f      	movs	r1, #15
    3b84:	4001      	ands	r1, r0
    3b86:	0208      	lsls	r0, r1, #8
    3b88:	4908      	ldr	r1, [pc, #32]	; (3bac <system_gclk_chan_disable+0x8c>)
    3b8a:	400b      	ands	r3, r1
    3b8c:	1c19      	adds	r1, r3, #0
    3b8e:	1c03      	adds	r3, r0, #0
    3b90:	430b      	orrs	r3, r1
    3b92:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    3b94:	4b07      	ldr	r3, [pc, #28]	; (3bb4 <system_gclk_chan_disable+0x94>)
    3b96:	4798      	blx	r3
}
    3b98:	46c0      	nop			; (mov r8, r8)
    3b9a:	46bd      	mov	sp, r7
    3b9c:	b004      	add	sp, #16
    3b9e:	bd80      	pop	{r7, pc}
    3ba0:	000037c5 	.word	0x000037c5
    3ba4:	40000c02 	.word	0x40000c02
    3ba8:	40000c00 	.word	0x40000c00
    3bac:	fffff0ff 	.word	0xfffff0ff
    3bb0:	ffffbfff 	.word	0xffffbfff
    3bb4:	000037d9 	.word	0x000037d9

00003bb8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b084      	sub	sp, #16
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	0002      	movs	r2, r0
    3bc0:	1dfb      	adds	r3, r7, #7
    3bc2:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    3bc4:	4b0d      	ldr	r3, [pc, #52]	; (3bfc <system_gclk_chan_get_hz+0x44>)
    3bc6:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    3bc8:	4a0d      	ldr	r2, [pc, #52]	; (3c00 <system_gclk_chan_get_hz+0x48>)
    3bca:	1dfb      	adds	r3, r7, #7
    3bcc:	781b      	ldrb	r3, [r3, #0]
    3bce:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    3bd0:	4b0c      	ldr	r3, [pc, #48]	; (3c04 <system_gclk_chan_get_hz+0x4c>)
    3bd2:	885b      	ldrh	r3, [r3, #2]
    3bd4:	051b      	lsls	r3, r3, #20
    3bd6:	0f1b      	lsrs	r3, r3, #28
    3bd8:	b2da      	uxtb	r2, r3
    3bda:	230f      	movs	r3, #15
    3bdc:	18fb      	adds	r3, r7, r3
    3bde:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    3be0:	4b09      	ldr	r3, [pc, #36]	; (3c08 <system_gclk_chan_get_hz+0x50>)
    3be2:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3be4:	230f      	movs	r3, #15
    3be6:	18fb      	adds	r3, r7, r3
    3be8:	781b      	ldrb	r3, [r3, #0]
    3bea:	0018      	movs	r0, r3
    3bec:	4b07      	ldr	r3, [pc, #28]	; (3c0c <system_gclk_chan_get_hz+0x54>)
    3bee:	4798      	blx	r3
    3bf0:	0003      	movs	r3, r0
}
    3bf2:	0018      	movs	r0, r3
    3bf4:	46bd      	mov	sp, r7
    3bf6:	b004      	add	sp, #16
    3bf8:	bd80      	pop	{r7, pc}
    3bfa:	46c0      	nop			; (mov r8, r8)
    3bfc:	000037c5 	.word	0x000037c5
    3c00:	40000c02 	.word	0x40000c02
    3c04:	40000c00 	.word	0x40000c00
    3c08:	000037d9 	.word	0x000037d9
    3c0c:	000039bd 	.word	0x000039bd

00003c10 <system_pinmux_get_group_from_gpio_pin>:
{
    3c10:	b580      	push	{r7, lr}
    3c12:	b084      	sub	sp, #16
    3c14:	af00      	add	r7, sp, #0
    3c16:	0002      	movs	r2, r0
    3c18:	1dfb      	adds	r3, r7, #7
    3c1a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3c1c:	230f      	movs	r3, #15
    3c1e:	18fb      	adds	r3, r7, r3
    3c20:	1dfa      	adds	r2, r7, #7
    3c22:	7812      	ldrb	r2, [r2, #0]
    3c24:	09d2      	lsrs	r2, r2, #7
    3c26:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3c28:	230e      	movs	r3, #14
    3c2a:	18fb      	adds	r3, r7, r3
    3c2c:	1dfa      	adds	r2, r7, #7
    3c2e:	7812      	ldrb	r2, [r2, #0]
    3c30:	0952      	lsrs	r2, r2, #5
    3c32:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3c34:	4b0d      	ldr	r3, [pc, #52]	; (3c6c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3c36:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3c38:	230f      	movs	r3, #15
    3c3a:	18fb      	adds	r3, r7, r3
    3c3c:	781b      	ldrb	r3, [r3, #0]
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d10f      	bne.n	3c62 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3c42:	230f      	movs	r3, #15
    3c44:	18fb      	adds	r3, r7, r3
    3c46:	781b      	ldrb	r3, [r3, #0]
    3c48:	009b      	lsls	r3, r3, #2
    3c4a:	2210      	movs	r2, #16
    3c4c:	4694      	mov	ip, r2
    3c4e:	44bc      	add	ip, r7
    3c50:	4463      	add	r3, ip
    3c52:	3b08      	subs	r3, #8
    3c54:	681a      	ldr	r2, [r3, #0]
    3c56:	230e      	movs	r3, #14
    3c58:	18fb      	adds	r3, r7, r3
    3c5a:	781b      	ldrb	r3, [r3, #0]
    3c5c:	01db      	lsls	r3, r3, #7
    3c5e:	18d3      	adds	r3, r2, r3
    3c60:	e000      	b.n	3c64 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3c62:	2300      	movs	r3, #0
}
    3c64:	0018      	movs	r0, r3
    3c66:	46bd      	mov	sp, r7
    3c68:	b004      	add	sp, #16
    3c6a:	bd80      	pop	{r7, pc}
    3c6c:	41004400 	.word	0x41004400

00003c70 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3c70:	b580      	push	{r7, lr}
    3c72:	b088      	sub	sp, #32
    3c74:	af00      	add	r7, sp, #0
    3c76:	60f8      	str	r0, [r7, #12]
    3c78:	60b9      	str	r1, [r7, #8]
    3c7a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    3c7c:	2300      	movs	r3, #0
    3c7e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	78db      	ldrb	r3, [r3, #3]
    3c84:	2201      	movs	r2, #1
    3c86:	4053      	eors	r3, r2
    3c88:	b2db      	uxtb	r3, r3
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d035      	beq.n	3cfa <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3c8e:	687b      	ldr	r3, [r7, #4]
    3c90:	781b      	ldrb	r3, [r3, #0]
    3c92:	2b80      	cmp	r3, #128	; 0x80
    3c94:	d00b      	beq.n	3cae <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    3c96:	69fb      	ldr	r3, [r7, #28]
    3c98:	2280      	movs	r2, #128	; 0x80
    3c9a:	0252      	lsls	r2, r2, #9
    3c9c:	4313      	orrs	r3, r2
    3c9e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    3ca0:	687b      	ldr	r3, [r7, #4]
    3ca2:	781b      	ldrb	r3, [r3, #0]
    3ca4:	061b      	lsls	r3, r3, #24
    3ca6:	001a      	movs	r2, r3
    3ca8:	69fb      	ldr	r3, [r7, #28]
    3caa:	4313      	orrs	r3, r2
    3cac:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	785b      	ldrb	r3, [r3, #1]
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	d003      	beq.n	3cbe <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3cb6:	687b      	ldr	r3, [r7, #4]
    3cb8:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3cba:	2b02      	cmp	r3, #2
    3cbc:	d110      	bne.n	3ce0 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    3cbe:	69fb      	ldr	r3, [r7, #28]
    3cc0:	2280      	movs	r2, #128	; 0x80
    3cc2:	0292      	lsls	r2, r2, #10
    3cc4:	4313      	orrs	r3, r2
    3cc6:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    3cc8:	687b      	ldr	r3, [r7, #4]
    3cca:	789b      	ldrb	r3, [r3, #2]
    3ccc:	2b00      	cmp	r3, #0
    3cce:	d004      	beq.n	3cda <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3cd0:	69fb      	ldr	r3, [r7, #28]
    3cd2:	2280      	movs	r2, #128	; 0x80
    3cd4:	02d2      	lsls	r2, r2, #11
    3cd6:	4313      	orrs	r3, r2
    3cd8:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    3cda:	68fb      	ldr	r3, [r7, #12]
    3cdc:	68ba      	ldr	r2, [r7, #8]
    3cde:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3ce0:	687b      	ldr	r3, [r7, #4]
    3ce2:	785b      	ldrb	r3, [r3, #1]
    3ce4:	2b01      	cmp	r3, #1
    3ce6:	d003      	beq.n	3cf0 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3cec:	2b02      	cmp	r3, #2
    3cee:	d107      	bne.n	3d00 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    3cf0:	69fb      	ldr	r3, [r7, #28]
    3cf2:	4a22      	ldr	r2, [pc, #136]	; (3d7c <_system_pinmux_config+0x10c>)
    3cf4:	4013      	ands	r3, r2
    3cf6:	61fb      	str	r3, [r7, #28]
    3cf8:	e002      	b.n	3d00 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    3cfa:	68fb      	ldr	r3, [r7, #12]
    3cfc:	68ba      	ldr	r2, [r7, #8]
    3cfe:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3d00:	68bb      	ldr	r3, [r7, #8]
    3d02:	041b      	lsls	r3, r3, #16
    3d04:	0c1b      	lsrs	r3, r3, #16
    3d06:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3d08:	68bb      	ldr	r3, [r7, #8]
    3d0a:	0c1b      	lsrs	r3, r3, #16
    3d0c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d0e:	69ba      	ldr	r2, [r7, #24]
    3d10:	69fb      	ldr	r3, [r7, #28]
    3d12:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3d14:	22a0      	movs	r2, #160	; 0xa0
    3d16:	05d2      	lsls	r2, r2, #23
    3d18:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d1a:	68fb      	ldr	r3, [r7, #12]
    3d1c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d1e:	697a      	ldr	r2, [r7, #20]
    3d20:	69fb      	ldr	r3, [r7, #28]
    3d22:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3d24:	22d0      	movs	r2, #208	; 0xd0
    3d26:	0612      	lsls	r2, r2, #24
    3d28:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3d2a:	68fb      	ldr	r3, [r7, #12]
    3d2c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    3d2e:	687b      	ldr	r3, [r7, #4]
    3d30:	78db      	ldrb	r3, [r3, #3]
    3d32:	2201      	movs	r2, #1
    3d34:	4053      	eors	r3, r2
    3d36:	b2db      	uxtb	r3, r3
    3d38:	2b00      	cmp	r3, #0
    3d3a:	d01a      	beq.n	3d72 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3d3c:	69fa      	ldr	r2, [r7, #28]
    3d3e:	2380      	movs	r3, #128	; 0x80
    3d40:	02db      	lsls	r3, r3, #11
    3d42:	4013      	ands	r3, r2
    3d44:	d00a      	beq.n	3d5c <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3d46:	687b      	ldr	r3, [r7, #4]
    3d48:	789b      	ldrb	r3, [r3, #2]
    3d4a:	2b01      	cmp	r3, #1
    3d4c:	d103      	bne.n	3d56 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    3d4e:	68fb      	ldr	r3, [r7, #12]
    3d50:	68ba      	ldr	r2, [r7, #8]
    3d52:	619a      	str	r2, [r3, #24]
    3d54:	e002      	b.n	3d5c <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    3d56:	68fb      	ldr	r3, [r7, #12]
    3d58:	68ba      	ldr	r2, [r7, #8]
    3d5a:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3d5c:	687b      	ldr	r3, [r7, #4]
    3d5e:	785b      	ldrb	r3, [r3, #1]
    3d60:	2b01      	cmp	r3, #1
    3d62:	d003      	beq.n	3d6c <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    3d64:	687b      	ldr	r3, [r7, #4]
    3d66:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    3d68:	2b02      	cmp	r3, #2
    3d6a:	d102      	bne.n	3d72 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    3d6c:	68fb      	ldr	r3, [r7, #12]
    3d6e:	68ba      	ldr	r2, [r7, #8]
    3d70:	609a      	str	r2, [r3, #8]
		}
	}
}
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	46bd      	mov	sp, r7
    3d76:	b008      	add	sp, #32
    3d78:	bd80      	pop	{r7, pc}
    3d7a:	46c0      	nop			; (mov r8, r8)
    3d7c:	fffbffff 	.word	0xfffbffff

00003d80 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    3d80:	b580      	push	{r7, lr}
    3d82:	b084      	sub	sp, #16
    3d84:	af00      	add	r7, sp, #0
    3d86:	0002      	movs	r2, r0
    3d88:	6039      	str	r1, [r7, #0]
    3d8a:	1dfb      	adds	r3, r7, #7
    3d8c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3d8e:	1dfb      	adds	r3, r7, #7
    3d90:	781b      	ldrb	r3, [r3, #0]
    3d92:	0018      	movs	r0, r3
    3d94:	4b0a      	ldr	r3, [pc, #40]	; (3dc0 <system_pinmux_pin_set_config+0x40>)
    3d96:	4798      	blx	r3
    3d98:	0003      	movs	r3, r0
    3d9a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    3d9c:	1dfb      	adds	r3, r7, #7
    3d9e:	781b      	ldrb	r3, [r3, #0]
    3da0:	221f      	movs	r2, #31
    3da2:	4013      	ands	r3, r2
    3da4:	2201      	movs	r2, #1
    3da6:	409a      	lsls	r2, r3
    3da8:	0013      	movs	r3, r2
    3daa:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    3dac:	683a      	ldr	r2, [r7, #0]
    3dae:	68b9      	ldr	r1, [r7, #8]
    3db0:	68fb      	ldr	r3, [r7, #12]
    3db2:	0018      	movs	r0, r3
    3db4:	4b03      	ldr	r3, [pc, #12]	; (3dc4 <system_pinmux_pin_set_config+0x44>)
    3db6:	4798      	blx	r3
}
    3db8:	46c0      	nop			; (mov r8, r8)
    3dba:	46bd      	mov	sp, r7
    3dbc:	b004      	add	sp, #16
    3dbe:	bd80      	pop	{r7, pc}
    3dc0:	00003c11 	.word	0x00003c11
    3dc4:	00003c71 	.word	0x00003c71

00003dc8 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    3dc8:	b580      	push	{r7, lr}
    3dca:	af00      	add	r7, sp, #0
	return;
    3dcc:	46c0      	nop			; (mov r8, r8)
}
    3dce:	46bd      	mov	sp, r7
    3dd0:	bd80      	pop	{r7, pc}
	...

00003dd4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    3dd4:	b580      	push	{r7, lr}
    3dd6:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    3dd8:	4b06      	ldr	r3, [pc, #24]	; (3df4 <system_init+0x20>)
    3dda:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3ddc:	4b06      	ldr	r3, [pc, #24]	; (3df8 <system_init+0x24>)
    3dde:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3de0:	4b06      	ldr	r3, [pc, #24]	; (3dfc <system_init+0x28>)
    3de2:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    3de4:	4b06      	ldr	r3, [pc, #24]	; (3e00 <system_init+0x2c>)
    3de6:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    3de8:	4b06      	ldr	r3, [pc, #24]	; (3e04 <system_init+0x30>)
    3dea:	4798      	blx	r3
}
    3dec:	46c0      	nop			; (mov r8, r8)
    3dee:	46bd      	mov	sp, r7
    3df0:	bd80      	pop	{r7, pc}
    3df2:	46c0      	nop			; (mov r8, r8)
    3df4:	000034f9 	.word	0x000034f9
    3df8:	000002e5 	.word	0x000002e5
    3dfc:	00003dc9 	.word	0x00003dc9
    3e00:	00003dc9 	.word	0x00003dc9
    3e04:	00003dc9 	.word	0x00003dc9

00003e08 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3e08:	b580      	push	{r7, lr}
    3e0a:	b082      	sub	sp, #8
    3e0c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    3e0e:	4b2f      	ldr	r3, [pc, #188]	; (3ecc <Reset_Handler+0xc4>)
    3e10:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    3e12:	4b2f      	ldr	r3, [pc, #188]	; (3ed0 <Reset_Handler+0xc8>)
    3e14:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    3e16:	687a      	ldr	r2, [r7, #4]
    3e18:	683b      	ldr	r3, [r7, #0]
    3e1a:	429a      	cmp	r2, r3
    3e1c:	d00c      	beq.n	3e38 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    3e1e:	e007      	b.n	3e30 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    3e20:	683b      	ldr	r3, [r7, #0]
    3e22:	1d1a      	adds	r2, r3, #4
    3e24:	603a      	str	r2, [r7, #0]
    3e26:	687a      	ldr	r2, [r7, #4]
    3e28:	1d11      	adds	r1, r2, #4
    3e2a:	6079      	str	r1, [r7, #4]
    3e2c:	6812      	ldr	r2, [r2, #0]
    3e2e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    3e30:	683a      	ldr	r2, [r7, #0]
    3e32:	4b28      	ldr	r3, [pc, #160]	; (3ed4 <Reset_Handler+0xcc>)
    3e34:	429a      	cmp	r2, r3
    3e36:	d3f3      	bcc.n	3e20 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3e38:	4b27      	ldr	r3, [pc, #156]	; (3ed8 <Reset_Handler+0xd0>)
    3e3a:	603b      	str	r3, [r7, #0]
    3e3c:	e004      	b.n	3e48 <Reset_Handler+0x40>
                *pDest++ = 0;
    3e3e:	683b      	ldr	r3, [r7, #0]
    3e40:	1d1a      	adds	r2, r3, #4
    3e42:	603a      	str	r2, [r7, #0]
    3e44:	2200      	movs	r2, #0
    3e46:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    3e48:	683a      	ldr	r2, [r7, #0]
    3e4a:	4b24      	ldr	r3, [pc, #144]	; (3edc <Reset_Handler+0xd4>)
    3e4c:	429a      	cmp	r2, r3
    3e4e:	d3f6      	bcc.n	3e3e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    3e50:	4b23      	ldr	r3, [pc, #140]	; (3ee0 <Reset_Handler+0xd8>)
    3e52:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3e54:	4b23      	ldr	r3, [pc, #140]	; (3ee4 <Reset_Handler+0xdc>)
    3e56:	687a      	ldr	r2, [r7, #4]
    3e58:	21ff      	movs	r1, #255	; 0xff
    3e5a:	438a      	bics	r2, r1
    3e5c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3e5e:	4a22      	ldr	r2, [pc, #136]	; (3ee8 <Reset_Handler+0xe0>)
    3e60:	2390      	movs	r3, #144	; 0x90
    3e62:	005b      	lsls	r3, r3, #1
    3e64:	2102      	movs	r1, #2
    3e66:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    3e68:	4a20      	ldr	r2, [pc, #128]	; (3eec <Reset_Handler+0xe4>)
    3e6a:	78d3      	ldrb	r3, [r2, #3]
    3e6c:	2103      	movs	r1, #3
    3e6e:	438b      	bics	r3, r1
    3e70:	1c19      	adds	r1, r3, #0
    3e72:	2302      	movs	r3, #2
    3e74:	430b      	orrs	r3, r1
    3e76:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    3e78:	4a1c      	ldr	r2, [pc, #112]	; (3eec <Reset_Handler+0xe4>)
    3e7a:	78d3      	ldrb	r3, [r2, #3]
    3e7c:	210c      	movs	r1, #12
    3e7e:	438b      	bics	r3, r1
    3e80:	1c19      	adds	r1, r3, #0
    3e82:	2308      	movs	r3, #8
    3e84:	430b      	orrs	r3, r1
    3e86:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    3e88:	4a19      	ldr	r2, [pc, #100]	; (3ef0 <Reset_Handler+0xe8>)
    3e8a:	7b93      	ldrb	r3, [r2, #14]
    3e8c:	2130      	movs	r1, #48	; 0x30
    3e8e:	438b      	bics	r3, r1
    3e90:	1c19      	adds	r1, r3, #0
    3e92:	2320      	movs	r3, #32
    3e94:	430b      	orrs	r3, r1
    3e96:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    3e98:	4a15      	ldr	r2, [pc, #84]	; (3ef0 <Reset_Handler+0xe8>)
    3e9a:	7b93      	ldrb	r3, [r2, #14]
    3e9c:	210c      	movs	r1, #12
    3e9e:	438b      	bics	r3, r1
    3ea0:	1c19      	adds	r1, r3, #0
    3ea2:	2308      	movs	r3, #8
    3ea4:	430b      	orrs	r3, r1
    3ea6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    3ea8:	4a11      	ldr	r2, [pc, #68]	; (3ef0 <Reset_Handler+0xe8>)
    3eaa:	7b93      	ldrb	r3, [r2, #14]
    3eac:	2103      	movs	r1, #3
    3eae:	438b      	bics	r3, r1
    3eb0:	1c19      	adds	r1, r3, #0
    3eb2:	2302      	movs	r3, #2
    3eb4:	430b      	orrs	r3, r1
    3eb6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    3eb8:	4a0e      	ldr	r2, [pc, #56]	; (3ef4 <Reset_Handler+0xec>)
    3eba:	6853      	ldr	r3, [r2, #4]
    3ebc:	2180      	movs	r1, #128	; 0x80
    3ebe:	430b      	orrs	r3, r1
    3ec0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    3ec2:	4b0d      	ldr	r3, [pc, #52]	; (3ef8 <Reset_Handler+0xf0>)
    3ec4:	4798      	blx	r3

        /* Branch to main function */
        main();
    3ec6:	4b0d      	ldr	r3, [pc, #52]	; (3efc <Reset_Handler+0xf4>)
    3ec8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    3eca:	e7fe      	b.n	3eca <Reset_Handler+0xc2>
    3ecc:	00004f74 	.word	0x00004f74
    3ed0:	20000000 	.word	0x20000000
    3ed4:	20000070 	.word	0x20000070
    3ed8:	20000070 	.word	0x20000070
    3edc:	200009b8 	.word	0x200009b8
    3ee0:	00000000 	.word	0x00000000
    3ee4:	e000ed00 	.word	0xe000ed00
    3ee8:	41007000 	.word	0x41007000
    3eec:	41005000 	.word	0x41005000
    3ef0:	41004800 	.word	0x41004800
    3ef4:	41004000 	.word	0x41004000
    3ef8:	000043a1 	.word	0x000043a1
    3efc:	00004119 	.word	0x00004119

00003f00 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3f00:	b580      	push	{r7, lr}
    3f02:	af00      	add	r7, sp, #0
        while (1) {
    3f04:	e7fe      	b.n	3f04 <Dummy_Handler+0x4>
	...

00003f08 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    3f08:	b580      	push	{r7, lr}
    3f0a:	b086      	sub	sp, #24
    3f0c:	af00      	add	r7, sp, #0
    3f0e:	60f8      	str	r0, [r7, #12]
    3f10:	60b9      	str	r1, [r7, #8]
    3f12:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    3f14:	2300      	movs	r3, #0
    3f16:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    3f18:	68fb      	ldr	r3, [r7, #12]
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d012      	beq.n	3f44 <_read+0x3c>
		return -1;
    3f1e:	2301      	movs	r3, #1
    3f20:	425b      	negs	r3, r3
    3f22:	e013      	b.n	3f4c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    3f24:	4b0b      	ldr	r3, [pc, #44]	; (3f54 <_read+0x4c>)
    3f26:	681a      	ldr	r2, [r3, #0]
    3f28:	4b0b      	ldr	r3, [pc, #44]	; (3f58 <_read+0x50>)
    3f2a:	681b      	ldr	r3, [r3, #0]
    3f2c:	68b9      	ldr	r1, [r7, #8]
    3f2e:	0018      	movs	r0, r3
    3f30:	4790      	blx	r2
		ptr++;
    3f32:	68bb      	ldr	r3, [r7, #8]
    3f34:	3301      	adds	r3, #1
    3f36:	60bb      	str	r3, [r7, #8]
		nChars++;
    3f38:	697b      	ldr	r3, [r7, #20]
    3f3a:	3301      	adds	r3, #1
    3f3c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    3f3e:	687b      	ldr	r3, [r7, #4]
    3f40:	3b01      	subs	r3, #1
    3f42:	607b      	str	r3, [r7, #4]
    3f44:	687b      	ldr	r3, [r7, #4]
    3f46:	2b00      	cmp	r3, #0
    3f48:	dcec      	bgt.n	3f24 <_read+0x1c>
	}
	return nChars;
    3f4a:	697b      	ldr	r3, [r7, #20]
}
    3f4c:	0018      	movs	r0, r3
    3f4e:	46bd      	mov	sp, r7
    3f50:	b006      	add	sp, #24
    3f52:	bd80      	pop	{r7, pc}
    3f54:	200009a8 	.word	0x200009a8
    3f58:	200009b0 	.word	0x200009b0

00003f5c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3f5c:	b580      	push	{r7, lr}
    3f5e:	b086      	sub	sp, #24
    3f60:	af00      	add	r7, sp, #0
    3f62:	60f8      	str	r0, [r7, #12]
    3f64:	60b9      	str	r1, [r7, #8]
    3f66:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    3f68:	2300      	movs	r3, #0
    3f6a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    3f6c:	68fb      	ldr	r3, [r7, #12]
    3f6e:	2b01      	cmp	r3, #1
    3f70:	d01d      	beq.n	3fae <_write+0x52>
    3f72:	68fb      	ldr	r3, [r7, #12]
    3f74:	2b02      	cmp	r3, #2
    3f76:	d01a      	beq.n	3fae <_write+0x52>
    3f78:	68fb      	ldr	r3, [r7, #12]
    3f7a:	2b03      	cmp	r3, #3
    3f7c:	d017      	beq.n	3fae <_write+0x52>
		return -1;
    3f7e:	2301      	movs	r3, #1
    3f80:	425b      	negs	r3, r3
    3f82:	e018      	b.n	3fb6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3f84:	4b0e      	ldr	r3, [pc, #56]	; (3fc0 <_write+0x64>)
    3f86:	681a      	ldr	r2, [r3, #0]
    3f88:	4b0e      	ldr	r3, [pc, #56]	; (3fc4 <_write+0x68>)
    3f8a:	6818      	ldr	r0, [r3, #0]
    3f8c:	68bb      	ldr	r3, [r7, #8]
    3f8e:	1c59      	adds	r1, r3, #1
    3f90:	60b9      	str	r1, [r7, #8]
    3f92:	781b      	ldrb	r3, [r3, #0]
    3f94:	0019      	movs	r1, r3
    3f96:	4790      	blx	r2
    3f98:	1e03      	subs	r3, r0, #0
    3f9a:	da02      	bge.n	3fa2 <_write+0x46>
			return -1;
    3f9c:	2301      	movs	r3, #1
    3f9e:	425b      	negs	r3, r3
    3fa0:	e009      	b.n	3fb6 <_write+0x5a>
		}
		++nChars;
    3fa2:	697b      	ldr	r3, [r7, #20]
    3fa4:	3301      	adds	r3, #1
    3fa6:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    3fa8:	687b      	ldr	r3, [r7, #4]
    3faa:	3b01      	subs	r3, #1
    3fac:	607b      	str	r3, [r7, #4]
    3fae:	687b      	ldr	r3, [r7, #4]
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	d1e7      	bne.n	3f84 <_write+0x28>
	}
	return nChars;
    3fb4:	697b      	ldr	r3, [r7, #20]
}
    3fb6:	0018      	movs	r0, r3
    3fb8:	46bd      	mov	sp, r7
    3fba:	b006      	add	sp, #24
    3fbc:	bd80      	pop	{r7, pc}
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	200009ac 	.word	0x200009ac
    3fc4:	200009b0 	.word	0x200009b0

00003fc8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3fc8:	b580      	push	{r7, lr}
    3fca:	b084      	sub	sp, #16
    3fcc:	af00      	add	r7, sp, #0
    3fce:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3fd0:	4b0a      	ldr	r3, [pc, #40]	; (3ffc <_sbrk+0x34>)
    3fd2:	681b      	ldr	r3, [r3, #0]
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	d102      	bne.n	3fde <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    3fd8:	4b08      	ldr	r3, [pc, #32]	; (3ffc <_sbrk+0x34>)
    3fda:	4a09      	ldr	r2, [pc, #36]	; (4000 <_sbrk+0x38>)
    3fdc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    3fde:	4b07      	ldr	r3, [pc, #28]	; (3ffc <_sbrk+0x34>)
    3fe0:	681b      	ldr	r3, [r3, #0]
    3fe2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    3fe4:	4b05      	ldr	r3, [pc, #20]	; (3ffc <_sbrk+0x34>)
    3fe6:	681a      	ldr	r2, [r3, #0]
    3fe8:	687b      	ldr	r3, [r7, #4]
    3fea:	18d2      	adds	r2, r2, r3
    3fec:	4b03      	ldr	r3, [pc, #12]	; (3ffc <_sbrk+0x34>)
    3fee:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    3ff0:	68fb      	ldr	r3, [r7, #12]
}
    3ff2:	0018      	movs	r0, r3
    3ff4:	46bd      	mov	sp, r7
    3ff6:	b004      	add	sp, #16
    3ff8:	bd80      	pop	{r7, pc}
    3ffa:	46c0      	nop			; (mov r8, r8)
    3ffc:	2000013c 	.word	0x2000013c
    4000:	200029b8 	.word	0x200029b8

00004004 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    4004:	b580      	push	{r7, lr}
    4006:	b082      	sub	sp, #8
    4008:	af00      	add	r7, sp, #0
    400a:	6078      	str	r0, [r7, #4]
	return -1;
    400c:	2301      	movs	r3, #1
    400e:	425b      	negs	r3, r3
}
    4010:	0018      	movs	r0, r3
    4012:	46bd      	mov	sp, r7
    4014:	b002      	add	sp, #8
    4016:	bd80      	pop	{r7, pc}

00004018 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    4018:	b580      	push	{r7, lr}
    401a:	b082      	sub	sp, #8
    401c:	af00      	add	r7, sp, #0
    401e:	6078      	str	r0, [r7, #4]
    4020:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    4022:	683b      	ldr	r3, [r7, #0]
    4024:	2280      	movs	r2, #128	; 0x80
    4026:	0192      	lsls	r2, r2, #6
    4028:	605a      	str	r2, [r3, #4]

	return 0;
    402a:	2300      	movs	r3, #0
}
    402c:	0018      	movs	r0, r3
    402e:	46bd      	mov	sp, r7
    4030:	b002      	add	sp, #8
    4032:	bd80      	pop	{r7, pc}

00004034 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    4034:	b580      	push	{r7, lr}
    4036:	b084      	sub	sp, #16
    4038:	af00      	add	r7, sp, #0
    403a:	60f8      	str	r0, [r7, #12]
    403c:	60b9      	str	r1, [r7, #8]
    403e:	607a      	str	r2, [r7, #4]
	return 0;
    4040:	2300      	movs	r3, #0
}
    4042:	0018      	movs	r0, r3
    4044:	46bd      	mov	sp, r7
    4046:	b004      	add	sp, #16
    4048:	bd80      	pop	{r7, pc}
	...

0000404c <system_apb_clock_set_mask>:
{
    404c:	b580      	push	{r7, lr}
    404e:	b082      	sub	sp, #8
    4050:	af00      	add	r7, sp, #0
    4052:	0002      	movs	r2, r0
    4054:	6039      	str	r1, [r7, #0]
    4056:	1dfb      	adds	r3, r7, #7
    4058:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    405a:	1dfb      	adds	r3, r7, #7
    405c:	781b      	ldrb	r3, [r3, #0]
    405e:	2b01      	cmp	r3, #1
    4060:	d00a      	beq.n	4078 <system_apb_clock_set_mask+0x2c>
    4062:	2b02      	cmp	r3, #2
    4064:	d00f      	beq.n	4086 <system_apb_clock_set_mask+0x3a>
    4066:	2b00      	cmp	r3, #0
    4068:	d114      	bne.n	4094 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    406a:	4b0e      	ldr	r3, [pc, #56]	; (40a4 <system_apb_clock_set_mask+0x58>)
    406c:	4a0d      	ldr	r2, [pc, #52]	; (40a4 <system_apb_clock_set_mask+0x58>)
    406e:	6991      	ldr	r1, [r2, #24]
    4070:	683a      	ldr	r2, [r7, #0]
    4072:	430a      	orrs	r2, r1
    4074:	619a      	str	r2, [r3, #24]
			break;
    4076:	e00f      	b.n	4098 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4078:	4b0a      	ldr	r3, [pc, #40]	; (40a4 <system_apb_clock_set_mask+0x58>)
    407a:	4a0a      	ldr	r2, [pc, #40]	; (40a4 <system_apb_clock_set_mask+0x58>)
    407c:	69d1      	ldr	r1, [r2, #28]
    407e:	683a      	ldr	r2, [r7, #0]
    4080:	430a      	orrs	r2, r1
    4082:	61da      	str	r2, [r3, #28]
			break;
    4084:	e008      	b.n	4098 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4086:	4b07      	ldr	r3, [pc, #28]	; (40a4 <system_apb_clock_set_mask+0x58>)
    4088:	4a06      	ldr	r2, [pc, #24]	; (40a4 <system_apb_clock_set_mask+0x58>)
    408a:	6a11      	ldr	r1, [r2, #32]
    408c:	683a      	ldr	r2, [r7, #0]
    408e:	430a      	orrs	r2, r1
    4090:	621a      	str	r2, [r3, #32]
			break;
    4092:	e001      	b.n	4098 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4094:	2317      	movs	r3, #23
    4096:	e000      	b.n	409a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4098:	2300      	movs	r3, #0
}
    409a:	0018      	movs	r0, r3
    409c:	46bd      	mov	sp, r7
    409e:	b002      	add	sp, #8
    40a0:	bd80      	pop	{r7, pc}
    40a2:	46c0      	nop			; (mov r8, r8)
    40a4:	40000400 	.word	0x40000400

000040a8 <nvm_get_config_defaults>:
{
    40a8:	b580      	push	{r7, lr}
    40aa:	b082      	sub	sp, #8
    40ac:	af00      	add	r7, sp, #0
    40ae:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    40b0:	687b      	ldr	r3, [r7, #4]
    40b2:	2200      	movs	r2, #0
    40b4:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    40b6:	687b      	ldr	r3, [r7, #4]
    40b8:	2201      	movs	r2, #1
    40ba:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    40bc:	4b08      	ldr	r3, [pc, #32]	; (40e0 <nvm_get_config_defaults+0x38>)
    40be:	685b      	ldr	r3, [r3, #4]
    40c0:	06db      	lsls	r3, r3, #27
    40c2:	0f1b      	lsrs	r3, r3, #28
    40c4:	b2db      	uxtb	r3, r3
    40c6:	001a      	movs	r2, r3
    40c8:	687b      	ldr	r3, [r7, #4]
    40ca:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    40cc:	687b      	ldr	r3, [r7, #4]
    40ce:	2200      	movs	r2, #0
    40d0:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	2200      	movs	r2, #0
    40d6:	711a      	strb	r2, [r3, #4]
}
    40d8:	46c0      	nop			; (mov r8, r8)
    40da:	46bd      	mov	sp, r7
    40dc:	b002      	add	sp, #8
    40de:	bd80      	pop	{r7, pc}
    40e0:	41004000 	.word	0x41004000

000040e4 <system_interrupt_enable_global>:
{
    40e4:	b580      	push	{r7, lr}
    40e6:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    40e8:	4b04      	ldr	r3, [pc, #16]	; (40fc <system_interrupt_enable_global+0x18>)
    40ea:	2201      	movs	r2, #1
    40ec:	701a      	strb	r2, [r3, #0]
    40ee:	f3bf 8f5f 	dmb	sy
    40f2:	b662      	cpsie	i
}
    40f4:	46c0      	nop			; (mov r8, r8)
    40f6:	46bd      	mov	sp, r7
    40f8:	bd80      	pop	{r7, pc}
    40fa:	46c0      	nop			; (mov r8, r8)
    40fc:	20000009 	.word	0x20000009

00004100 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    4100:	b580      	push	{r7, lr}
    4102:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    4104:	2102      	movs	r1, #2
    4106:	2001      	movs	r0, #1
    4108:	4b02      	ldr	r3, [pc, #8]	; (4114 <dsu_crc32_init+0x14>)
    410a:	4798      	blx	r3
#endif

}
    410c:	46c0      	nop			; (mov r8, r8)
    410e:	46bd      	mov	sp, r7
    4110:	bd80      	pop	{r7, pc}
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	0000404d 	.word	0x0000404d

00004118 <main>:
* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void)
{
    4118:	b580      	push	{r7, lr}
    411a:	af00      	add	r7, sp, #0

	/*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
	system_init();
    411c:	4b1a      	ldr	r3, [pc, #104]	; (4188 <main+0x70>)
    411e:	4798      	blx	r3
	delay_init();
    4120:	4b1a      	ldr	r3, [pc, #104]	; (418c <main+0x74>)
    4122:	4798      	blx	r3
	InitializeSerialConsole();
    4124:	4b1a      	ldr	r3, [pc, #104]	; (4190 <main+0x78>)
    4126:	4798      	blx	r3
	system_interrupt_enable_global();
    4128:	4b1a      	ldr	r3, [pc, #104]	; (4194 <main+0x7c>)
    412a:	4798      	blx	r3
	/* Initialize SD MMC stack */
	sd_mmc_init();
    412c:	4b1a      	ldr	r3, [pc, #104]	; (4198 <main+0x80>)
    412e:	4798      	blx	r3

	//Initialize the NVM driver
	configure_nvm();
    4130:	4b1a      	ldr	r3, [pc, #104]	; (419c <main+0x84>)
    4132:	4798      	blx	r3

	irq_initialize_vectors();
	cpu_irq_enable();
    4134:	4b1a      	ldr	r3, [pc, #104]	; (41a0 <main+0x88>)
    4136:	2201      	movs	r2, #1
    4138:	701a      	strb	r2, [r3, #0]
    413a:	f3bf 8f5f 	dmb	sy
    413e:	b662      	cpsie	i

	//Configure CRC32
	dsu_crc32_init();
    4140:	4b18      	ldr	r3, [pc, #96]	; (41a4 <main+0x8c>)
    4142:	4798      	blx	r3

	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    4144:	4b18      	ldr	r3, [pc, #96]	; (41a8 <main+0x90>)
    4146:	0018      	movs	r0, r3
    4148:	4b18      	ldr	r3, [pc, #96]	; (41ac <main+0x94>)
    414a:	4798      	blx	r3
	/*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

	//EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
	//See function inside to see how to open a file
	
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    414c:	4b18      	ldr	r3, [pc, #96]	; (41b0 <main+0x98>)
    414e:	0018      	movs	r0, r3
    4150:	4b16      	ldr	r3, [pc, #88]	; (41ac <main+0x94>)
    4152:	4798      	blx	r3
	
	SerialConsoleWriteString("skip sd card");
    4154:	4b17      	ldr	r3, [pc, #92]	; (41b4 <main+0x9c>)
    4156:	0018      	movs	r0, r3
    4158:	4b14      	ldr	r3, [pc, #80]	; (41ac <main+0x94>)
    415a:	4798      	blx	r3
	goto exit_bootloader;
    415c:	46c0      	nop			; (mov r8, r8)
		SerialConsoleWriteString("Firmware updated!\r\n");
	}

	exit_bootloader:
	//4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
	SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    415e:	4b16      	ldr	r3, [pc, #88]	; (41b8 <main+0xa0>)
    4160:	0018      	movs	r0, r3
    4162:	4b12      	ldr	r3, [pc, #72]	; (41ac <main+0x94>)
    4164:	4798      	blx	r3
	delay_cycles_ms(100); //Delay to allow print
    4166:	2064      	movs	r0, #100	; 0x64
    4168:	4b14      	ldr	r3, [pc, #80]	; (41bc <main+0xa4>)
    416a:	4798      	blx	r3
		
	//Deinitialize HW - deinitialize started HW here!
	DeinitializeSerialConsole(); //Deinitializes UART
    416c:	4b14      	ldr	r3, [pc, #80]	; (41c0 <main+0xa8>)
    416e:	4798      	blx	r3
	
	sd_mmc_deinit(); //Deinitialize SD CARD
    4170:	4b14      	ldr	r3, [pc, #80]	; (41c4 <main+0xac>)
    4172:	4798      	blx	r3


	//Jump to application
	jumpToApplication();
    4174:	4b14      	ldr	r3, [pc, #80]	; (41c8 <main+0xb0>)
    4176:	4798      	blx	r3

	//Should not reach here! The device should have jumped to the main FW.
	
	fw_update_error:
	SerialConsoleWriteString("FW update error... please restart \r\n");
    4178:	4b14      	ldr	r3, [pc, #80]	; (41cc <main+0xb4>)
    417a:	0018      	movs	r0, r3
    417c:	4b0b      	ldr	r3, [pc, #44]	; (41ac <main+0x94>)
    417e:	4798      	blx	r3
    4180:	2300      	movs	r3, #0
	
}
    4182:	0018      	movs	r0, r3
    4184:	46bd      	mov	sp, r7
    4186:	bd80      	pop	{r7, pc}
    4188:	00003dd5 	.word	0x00003dd5
    418c:	00000149 	.word	0x00000149
    4190:	00000945 	.word	0x00000945
    4194:	000040e5 	.word	0x000040e5
    4198:	00000be5 	.word	0x00000be5
    419c:	00004209 	.word	0x00004209
    41a0:	20000009 	.word	0x20000009
    41a4:	00004101 	.word	0x00004101
    41a8:	00004c50 	.word	0x00004c50
    41ac:	000009d1 	.word	0x000009d1
    41b0:	00004c6c 	.word	0x00004c6c
    41b4:	00004c94 	.word	0x00004c94
    41b8:	00004ca4 	.word	0x00004ca4
    41bc:	000001a1 	.word	0x000001a1
    41c0:	000009b5 	.word	0x000009b5
    41c4:	00000ed9 	.word	0x00000ed9
    41c8:	000041d1 	.word	0x000041d1
    41cc:	00004cc0 	.word	0x00004cc0

000041d0 <jumpToApplication>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       
******************************************************************************/
static void jumpToApplication(void)
{
    41d0:	b580      	push	{r7, lr}
    41d2:	b082      	sub	sp, #8
    41d4:	af00      	add	r7, sp, #0
// Function pointer to application section
void (*applicationCodeEntry)(void);

// Rebase stack pointer
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    41d6:	2390      	movs	r3, #144	; 0x90
    41d8:	025b      	lsls	r3, r3, #9
    41da:	681b      	ldr	r3, [r3, #0]
    41dc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    41de:	683b      	ldr	r3, [r7, #0]
    41e0:	f383 8808 	msr	MSP, r3

// Rebase vector table
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    41e4:	4b06      	ldr	r3, [pc, #24]	; (4200 <jumpToApplication+0x30>)
    41e6:	2290      	movs	r2, #144	; 0x90
    41e8:	0252      	lsls	r2, r2, #9
    41ea:	609a      	str	r2, [r3, #8]

// Set pointer to application section
applicationCodeEntry =
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    41ec:	4b05      	ldr	r3, [pc, #20]	; (4204 <jumpToApplication+0x34>)
    41ee:	681b      	ldr	r3, [r3, #0]
applicationCodeEntry =
    41f0:	607b      	str	r3, [r7, #4]

// Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry, 
//which should be the start of the main FW.
applicationCodeEntry();
    41f2:	687b      	ldr	r3, [r7, #4]
    41f4:	4798      	blx	r3
}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	46bd      	mov	sp, r7
    41fa:	b002      	add	sp, #8
    41fc:	bd80      	pop	{r7, pc}
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	e000ed00 	.word	0xe000ed00
    4204:	00012004 	.word	0x00012004

00004208 <configure_nvm>:
* @brief        Configures the NVM driver
* @details      
* @return       
******************************************************************************/
static void configure_nvm(void)
{
    4208:	b580      	push	{r7, lr}
    420a:	b082      	sub	sp, #8
    420c:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    420e:	003b      	movs	r3, r7
    4210:	0018      	movs	r0, r3
    4212:	4b06      	ldr	r3, [pc, #24]	; (422c <configure_nvm+0x24>)
    4214:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    4216:	003b      	movs	r3, r7
    4218:	2200      	movs	r2, #0
    421a:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    421c:	003b      	movs	r3, r7
    421e:	0018      	movs	r0, r3
    4220:	4b03      	ldr	r3, [pc, #12]	; (4230 <configure_nvm+0x28>)
    4222:	4798      	blx	r3
}
    4224:	46c0      	nop			; (mov r8, r8)
    4226:	46bd      	mov	sp, r7
    4228:	b002      	add	sp, #8
    422a:	bd80      	pop	{r7, pc}
    422c:	000040a9 	.word	0x000040a9
    4230:	000003b9 	.word	0x000003b9

00004234 <__udivsi3>:
    4234:	2200      	movs	r2, #0
    4236:	0843      	lsrs	r3, r0, #1
    4238:	428b      	cmp	r3, r1
    423a:	d374      	bcc.n	4326 <__udivsi3+0xf2>
    423c:	0903      	lsrs	r3, r0, #4
    423e:	428b      	cmp	r3, r1
    4240:	d35f      	bcc.n	4302 <__udivsi3+0xce>
    4242:	0a03      	lsrs	r3, r0, #8
    4244:	428b      	cmp	r3, r1
    4246:	d344      	bcc.n	42d2 <__udivsi3+0x9e>
    4248:	0b03      	lsrs	r3, r0, #12
    424a:	428b      	cmp	r3, r1
    424c:	d328      	bcc.n	42a0 <__udivsi3+0x6c>
    424e:	0c03      	lsrs	r3, r0, #16
    4250:	428b      	cmp	r3, r1
    4252:	d30d      	bcc.n	4270 <__udivsi3+0x3c>
    4254:	22ff      	movs	r2, #255	; 0xff
    4256:	0209      	lsls	r1, r1, #8
    4258:	ba12      	rev	r2, r2
    425a:	0c03      	lsrs	r3, r0, #16
    425c:	428b      	cmp	r3, r1
    425e:	d302      	bcc.n	4266 <__udivsi3+0x32>
    4260:	1212      	asrs	r2, r2, #8
    4262:	0209      	lsls	r1, r1, #8
    4264:	d065      	beq.n	4332 <__udivsi3+0xfe>
    4266:	0b03      	lsrs	r3, r0, #12
    4268:	428b      	cmp	r3, r1
    426a:	d319      	bcc.n	42a0 <__udivsi3+0x6c>
    426c:	e000      	b.n	4270 <__udivsi3+0x3c>
    426e:	0a09      	lsrs	r1, r1, #8
    4270:	0bc3      	lsrs	r3, r0, #15
    4272:	428b      	cmp	r3, r1
    4274:	d301      	bcc.n	427a <__udivsi3+0x46>
    4276:	03cb      	lsls	r3, r1, #15
    4278:	1ac0      	subs	r0, r0, r3
    427a:	4152      	adcs	r2, r2
    427c:	0b83      	lsrs	r3, r0, #14
    427e:	428b      	cmp	r3, r1
    4280:	d301      	bcc.n	4286 <__udivsi3+0x52>
    4282:	038b      	lsls	r3, r1, #14
    4284:	1ac0      	subs	r0, r0, r3
    4286:	4152      	adcs	r2, r2
    4288:	0b43      	lsrs	r3, r0, #13
    428a:	428b      	cmp	r3, r1
    428c:	d301      	bcc.n	4292 <__udivsi3+0x5e>
    428e:	034b      	lsls	r3, r1, #13
    4290:	1ac0      	subs	r0, r0, r3
    4292:	4152      	adcs	r2, r2
    4294:	0b03      	lsrs	r3, r0, #12
    4296:	428b      	cmp	r3, r1
    4298:	d301      	bcc.n	429e <__udivsi3+0x6a>
    429a:	030b      	lsls	r3, r1, #12
    429c:	1ac0      	subs	r0, r0, r3
    429e:	4152      	adcs	r2, r2
    42a0:	0ac3      	lsrs	r3, r0, #11
    42a2:	428b      	cmp	r3, r1
    42a4:	d301      	bcc.n	42aa <__udivsi3+0x76>
    42a6:	02cb      	lsls	r3, r1, #11
    42a8:	1ac0      	subs	r0, r0, r3
    42aa:	4152      	adcs	r2, r2
    42ac:	0a83      	lsrs	r3, r0, #10
    42ae:	428b      	cmp	r3, r1
    42b0:	d301      	bcc.n	42b6 <__udivsi3+0x82>
    42b2:	028b      	lsls	r3, r1, #10
    42b4:	1ac0      	subs	r0, r0, r3
    42b6:	4152      	adcs	r2, r2
    42b8:	0a43      	lsrs	r3, r0, #9
    42ba:	428b      	cmp	r3, r1
    42bc:	d301      	bcc.n	42c2 <__udivsi3+0x8e>
    42be:	024b      	lsls	r3, r1, #9
    42c0:	1ac0      	subs	r0, r0, r3
    42c2:	4152      	adcs	r2, r2
    42c4:	0a03      	lsrs	r3, r0, #8
    42c6:	428b      	cmp	r3, r1
    42c8:	d301      	bcc.n	42ce <__udivsi3+0x9a>
    42ca:	020b      	lsls	r3, r1, #8
    42cc:	1ac0      	subs	r0, r0, r3
    42ce:	4152      	adcs	r2, r2
    42d0:	d2cd      	bcs.n	426e <__udivsi3+0x3a>
    42d2:	09c3      	lsrs	r3, r0, #7
    42d4:	428b      	cmp	r3, r1
    42d6:	d301      	bcc.n	42dc <__udivsi3+0xa8>
    42d8:	01cb      	lsls	r3, r1, #7
    42da:	1ac0      	subs	r0, r0, r3
    42dc:	4152      	adcs	r2, r2
    42de:	0983      	lsrs	r3, r0, #6
    42e0:	428b      	cmp	r3, r1
    42e2:	d301      	bcc.n	42e8 <__udivsi3+0xb4>
    42e4:	018b      	lsls	r3, r1, #6
    42e6:	1ac0      	subs	r0, r0, r3
    42e8:	4152      	adcs	r2, r2
    42ea:	0943      	lsrs	r3, r0, #5
    42ec:	428b      	cmp	r3, r1
    42ee:	d301      	bcc.n	42f4 <__udivsi3+0xc0>
    42f0:	014b      	lsls	r3, r1, #5
    42f2:	1ac0      	subs	r0, r0, r3
    42f4:	4152      	adcs	r2, r2
    42f6:	0903      	lsrs	r3, r0, #4
    42f8:	428b      	cmp	r3, r1
    42fa:	d301      	bcc.n	4300 <__udivsi3+0xcc>
    42fc:	010b      	lsls	r3, r1, #4
    42fe:	1ac0      	subs	r0, r0, r3
    4300:	4152      	adcs	r2, r2
    4302:	08c3      	lsrs	r3, r0, #3
    4304:	428b      	cmp	r3, r1
    4306:	d301      	bcc.n	430c <__udivsi3+0xd8>
    4308:	00cb      	lsls	r3, r1, #3
    430a:	1ac0      	subs	r0, r0, r3
    430c:	4152      	adcs	r2, r2
    430e:	0883      	lsrs	r3, r0, #2
    4310:	428b      	cmp	r3, r1
    4312:	d301      	bcc.n	4318 <__udivsi3+0xe4>
    4314:	008b      	lsls	r3, r1, #2
    4316:	1ac0      	subs	r0, r0, r3
    4318:	4152      	adcs	r2, r2
    431a:	0843      	lsrs	r3, r0, #1
    431c:	428b      	cmp	r3, r1
    431e:	d301      	bcc.n	4324 <__udivsi3+0xf0>
    4320:	004b      	lsls	r3, r1, #1
    4322:	1ac0      	subs	r0, r0, r3
    4324:	4152      	adcs	r2, r2
    4326:	1a41      	subs	r1, r0, r1
    4328:	d200      	bcs.n	432c <__udivsi3+0xf8>
    432a:	4601      	mov	r1, r0
    432c:	4152      	adcs	r2, r2
    432e:	4610      	mov	r0, r2
    4330:	4770      	bx	lr
    4332:	e7ff      	b.n	4334 <__udivsi3+0x100>
    4334:	b501      	push	{r0, lr}
    4336:	2000      	movs	r0, #0
    4338:	f000 f806 	bl	4348 <__aeabi_idiv0>
    433c:	bd02      	pop	{r1, pc}
    433e:	46c0      	nop			; (mov r8, r8)

00004340 <__aeabi_uidivmod>:
    4340:	2900      	cmp	r1, #0
    4342:	d0f7      	beq.n	4334 <__udivsi3+0x100>
    4344:	e776      	b.n	4234 <__udivsi3>
    4346:	4770      	bx	lr

00004348 <__aeabi_idiv0>:
    4348:	4770      	bx	lr
    434a:	46c0      	nop			; (mov r8, r8)

0000434c <__aeabi_lmul>:
    434c:	b5f0      	push	{r4, r5, r6, r7, lr}
    434e:	46ce      	mov	lr, r9
    4350:	4647      	mov	r7, r8
    4352:	0415      	lsls	r5, r2, #16
    4354:	0c2d      	lsrs	r5, r5, #16
    4356:	002e      	movs	r6, r5
    4358:	b580      	push	{r7, lr}
    435a:	0407      	lsls	r7, r0, #16
    435c:	0c14      	lsrs	r4, r2, #16
    435e:	0c3f      	lsrs	r7, r7, #16
    4360:	4699      	mov	r9, r3
    4362:	0c03      	lsrs	r3, r0, #16
    4364:	437e      	muls	r6, r7
    4366:	435d      	muls	r5, r3
    4368:	4367      	muls	r7, r4
    436a:	4363      	muls	r3, r4
    436c:	197f      	adds	r7, r7, r5
    436e:	0c34      	lsrs	r4, r6, #16
    4370:	19e4      	adds	r4, r4, r7
    4372:	469c      	mov	ip, r3
    4374:	42a5      	cmp	r5, r4
    4376:	d903      	bls.n	4380 <__aeabi_lmul+0x34>
    4378:	2380      	movs	r3, #128	; 0x80
    437a:	025b      	lsls	r3, r3, #9
    437c:	4698      	mov	r8, r3
    437e:	44c4      	add	ip, r8
    4380:	464b      	mov	r3, r9
    4382:	4351      	muls	r1, r2
    4384:	4343      	muls	r3, r0
    4386:	0436      	lsls	r6, r6, #16
    4388:	0c36      	lsrs	r6, r6, #16
    438a:	0c25      	lsrs	r5, r4, #16
    438c:	0424      	lsls	r4, r4, #16
    438e:	4465      	add	r5, ip
    4390:	19a4      	adds	r4, r4, r6
    4392:	1859      	adds	r1, r3, r1
    4394:	1949      	adds	r1, r1, r5
    4396:	0020      	movs	r0, r4
    4398:	bc0c      	pop	{r2, r3}
    439a:	4690      	mov	r8, r2
    439c:	4699      	mov	r9, r3
    439e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000043a0 <__libc_init_array>:
    43a0:	b570      	push	{r4, r5, r6, lr}
    43a2:	2600      	movs	r6, #0
    43a4:	4d0c      	ldr	r5, [pc, #48]	; (43d8 <__libc_init_array+0x38>)
    43a6:	4c0d      	ldr	r4, [pc, #52]	; (43dc <__libc_init_array+0x3c>)
    43a8:	1b64      	subs	r4, r4, r5
    43aa:	10a4      	asrs	r4, r4, #2
    43ac:	42a6      	cmp	r6, r4
    43ae:	d109      	bne.n	43c4 <__libc_init_array+0x24>
    43b0:	2600      	movs	r6, #0
    43b2:	f000 fdcf 	bl	4f54 <_init>
    43b6:	4d0a      	ldr	r5, [pc, #40]	; (43e0 <__libc_init_array+0x40>)
    43b8:	4c0a      	ldr	r4, [pc, #40]	; (43e4 <__libc_init_array+0x44>)
    43ba:	1b64      	subs	r4, r4, r5
    43bc:	10a4      	asrs	r4, r4, #2
    43be:	42a6      	cmp	r6, r4
    43c0:	d105      	bne.n	43ce <__libc_init_array+0x2e>
    43c2:	bd70      	pop	{r4, r5, r6, pc}
    43c4:	00b3      	lsls	r3, r6, #2
    43c6:	58eb      	ldr	r3, [r5, r3]
    43c8:	4798      	blx	r3
    43ca:	3601      	adds	r6, #1
    43cc:	e7ee      	b.n	43ac <__libc_init_array+0xc>
    43ce:	00b3      	lsls	r3, r6, #2
    43d0:	58eb      	ldr	r3, [r5, r3]
    43d2:	4798      	blx	r3
    43d4:	3601      	adds	r6, #1
    43d6:	e7f2      	b.n	43be <__libc_init_array+0x1e>
    43d8:	00004f60 	.word	0x00004f60
    43dc:	00004f60 	.word	0x00004f60
    43e0:	00004f60 	.word	0x00004f60
    43e4:	00004f64 	.word	0x00004f64

000043e8 <malloc>:
    43e8:	b510      	push	{r4, lr}
    43ea:	4b03      	ldr	r3, [pc, #12]	; (43f8 <malloc+0x10>)
    43ec:	0001      	movs	r1, r0
    43ee:	6818      	ldr	r0, [r3, #0]
    43f0:	f000 f856 	bl	44a0 <_malloc_r>
    43f4:	bd10      	pop	{r4, pc}
    43f6:	46c0      	nop			; (mov r8, r8)
    43f8:	2000000c 	.word	0x2000000c

000043fc <memset>:
    43fc:	0003      	movs	r3, r0
    43fe:	1882      	adds	r2, r0, r2
    4400:	4293      	cmp	r3, r2
    4402:	d100      	bne.n	4406 <memset+0xa>
    4404:	4770      	bx	lr
    4406:	7019      	strb	r1, [r3, #0]
    4408:	3301      	adds	r3, #1
    440a:	e7f9      	b.n	4400 <memset+0x4>

0000440c <_free_r>:
    440c:	b570      	push	{r4, r5, r6, lr}
    440e:	0005      	movs	r5, r0
    4410:	2900      	cmp	r1, #0
    4412:	d010      	beq.n	4436 <_free_r+0x2a>
    4414:	1f0c      	subs	r4, r1, #4
    4416:	6823      	ldr	r3, [r4, #0]
    4418:	2b00      	cmp	r3, #0
    441a:	da00      	bge.n	441e <_free_r+0x12>
    441c:	18e4      	adds	r4, r4, r3
    441e:	0028      	movs	r0, r5
    4420:	f000 fb22 	bl	4a68 <__malloc_lock>
    4424:	4a1d      	ldr	r2, [pc, #116]	; (449c <_free_r+0x90>)
    4426:	6813      	ldr	r3, [r2, #0]
    4428:	2b00      	cmp	r3, #0
    442a:	d105      	bne.n	4438 <_free_r+0x2c>
    442c:	6063      	str	r3, [r4, #4]
    442e:	6014      	str	r4, [r2, #0]
    4430:	0028      	movs	r0, r5
    4432:	f000 fb1a 	bl	4a6a <__malloc_unlock>
    4436:	bd70      	pop	{r4, r5, r6, pc}
    4438:	42a3      	cmp	r3, r4
    443a:	d909      	bls.n	4450 <_free_r+0x44>
    443c:	6821      	ldr	r1, [r4, #0]
    443e:	1860      	adds	r0, r4, r1
    4440:	4283      	cmp	r3, r0
    4442:	d1f3      	bne.n	442c <_free_r+0x20>
    4444:	6818      	ldr	r0, [r3, #0]
    4446:	685b      	ldr	r3, [r3, #4]
    4448:	1841      	adds	r1, r0, r1
    444a:	6021      	str	r1, [r4, #0]
    444c:	e7ee      	b.n	442c <_free_r+0x20>
    444e:	0013      	movs	r3, r2
    4450:	685a      	ldr	r2, [r3, #4]
    4452:	2a00      	cmp	r2, #0
    4454:	d001      	beq.n	445a <_free_r+0x4e>
    4456:	42a2      	cmp	r2, r4
    4458:	d9f9      	bls.n	444e <_free_r+0x42>
    445a:	6819      	ldr	r1, [r3, #0]
    445c:	1858      	adds	r0, r3, r1
    445e:	42a0      	cmp	r0, r4
    4460:	d10b      	bne.n	447a <_free_r+0x6e>
    4462:	6820      	ldr	r0, [r4, #0]
    4464:	1809      	adds	r1, r1, r0
    4466:	1858      	adds	r0, r3, r1
    4468:	6019      	str	r1, [r3, #0]
    446a:	4282      	cmp	r2, r0
    446c:	d1e0      	bne.n	4430 <_free_r+0x24>
    446e:	6810      	ldr	r0, [r2, #0]
    4470:	6852      	ldr	r2, [r2, #4]
    4472:	1841      	adds	r1, r0, r1
    4474:	6019      	str	r1, [r3, #0]
    4476:	605a      	str	r2, [r3, #4]
    4478:	e7da      	b.n	4430 <_free_r+0x24>
    447a:	42a0      	cmp	r0, r4
    447c:	d902      	bls.n	4484 <_free_r+0x78>
    447e:	230c      	movs	r3, #12
    4480:	602b      	str	r3, [r5, #0]
    4482:	e7d5      	b.n	4430 <_free_r+0x24>
    4484:	6821      	ldr	r1, [r4, #0]
    4486:	1860      	adds	r0, r4, r1
    4488:	4282      	cmp	r2, r0
    448a:	d103      	bne.n	4494 <_free_r+0x88>
    448c:	6810      	ldr	r0, [r2, #0]
    448e:	6852      	ldr	r2, [r2, #4]
    4490:	1841      	adds	r1, r0, r1
    4492:	6021      	str	r1, [r4, #0]
    4494:	6062      	str	r2, [r4, #4]
    4496:	605c      	str	r4, [r3, #4]
    4498:	e7ca      	b.n	4430 <_free_r+0x24>
    449a:	46c0      	nop			; (mov r8, r8)
    449c:	20000140 	.word	0x20000140

000044a0 <_malloc_r>:
    44a0:	2303      	movs	r3, #3
    44a2:	b570      	push	{r4, r5, r6, lr}
    44a4:	1ccd      	adds	r5, r1, #3
    44a6:	439d      	bics	r5, r3
    44a8:	3508      	adds	r5, #8
    44aa:	0006      	movs	r6, r0
    44ac:	2d0c      	cmp	r5, #12
    44ae:	d21e      	bcs.n	44ee <_malloc_r+0x4e>
    44b0:	250c      	movs	r5, #12
    44b2:	42a9      	cmp	r1, r5
    44b4:	d81d      	bhi.n	44f2 <_malloc_r+0x52>
    44b6:	0030      	movs	r0, r6
    44b8:	f000 fad6 	bl	4a68 <__malloc_lock>
    44bc:	4a25      	ldr	r2, [pc, #148]	; (4554 <_malloc_r+0xb4>)
    44be:	6814      	ldr	r4, [r2, #0]
    44c0:	0021      	movs	r1, r4
    44c2:	2900      	cmp	r1, #0
    44c4:	d119      	bne.n	44fa <_malloc_r+0x5a>
    44c6:	4c24      	ldr	r4, [pc, #144]	; (4558 <_malloc_r+0xb8>)
    44c8:	6823      	ldr	r3, [r4, #0]
    44ca:	2b00      	cmp	r3, #0
    44cc:	d103      	bne.n	44d6 <_malloc_r+0x36>
    44ce:	0030      	movs	r0, r6
    44d0:	f000 f844 	bl	455c <_sbrk_r>
    44d4:	6020      	str	r0, [r4, #0]
    44d6:	0029      	movs	r1, r5
    44d8:	0030      	movs	r0, r6
    44da:	f000 f83f 	bl	455c <_sbrk_r>
    44de:	1c43      	adds	r3, r0, #1
    44e0:	d12c      	bne.n	453c <_malloc_r+0x9c>
    44e2:	230c      	movs	r3, #12
    44e4:	0030      	movs	r0, r6
    44e6:	6033      	str	r3, [r6, #0]
    44e8:	f000 fabf 	bl	4a6a <__malloc_unlock>
    44ec:	e003      	b.n	44f6 <_malloc_r+0x56>
    44ee:	2d00      	cmp	r5, #0
    44f0:	dadf      	bge.n	44b2 <_malloc_r+0x12>
    44f2:	230c      	movs	r3, #12
    44f4:	6033      	str	r3, [r6, #0]
    44f6:	2000      	movs	r0, #0
    44f8:	bd70      	pop	{r4, r5, r6, pc}
    44fa:	680b      	ldr	r3, [r1, #0]
    44fc:	1b5b      	subs	r3, r3, r5
    44fe:	d41a      	bmi.n	4536 <_malloc_r+0x96>
    4500:	2b0b      	cmp	r3, #11
    4502:	d903      	bls.n	450c <_malloc_r+0x6c>
    4504:	600b      	str	r3, [r1, #0]
    4506:	18cc      	adds	r4, r1, r3
    4508:	6025      	str	r5, [r4, #0]
    450a:	e003      	b.n	4514 <_malloc_r+0x74>
    450c:	428c      	cmp	r4, r1
    450e:	d10e      	bne.n	452e <_malloc_r+0x8e>
    4510:	6863      	ldr	r3, [r4, #4]
    4512:	6013      	str	r3, [r2, #0]
    4514:	0030      	movs	r0, r6
    4516:	f000 faa8 	bl	4a6a <__malloc_unlock>
    451a:	0020      	movs	r0, r4
    451c:	2207      	movs	r2, #7
    451e:	300b      	adds	r0, #11
    4520:	1d23      	adds	r3, r4, #4
    4522:	4390      	bics	r0, r2
    4524:	1ac3      	subs	r3, r0, r3
    4526:	d0e7      	beq.n	44f8 <_malloc_r+0x58>
    4528:	425a      	negs	r2, r3
    452a:	50e2      	str	r2, [r4, r3]
    452c:	e7e4      	b.n	44f8 <_malloc_r+0x58>
    452e:	684b      	ldr	r3, [r1, #4]
    4530:	6063      	str	r3, [r4, #4]
    4532:	000c      	movs	r4, r1
    4534:	e7ee      	b.n	4514 <_malloc_r+0x74>
    4536:	000c      	movs	r4, r1
    4538:	6849      	ldr	r1, [r1, #4]
    453a:	e7c2      	b.n	44c2 <_malloc_r+0x22>
    453c:	2303      	movs	r3, #3
    453e:	1cc4      	adds	r4, r0, #3
    4540:	439c      	bics	r4, r3
    4542:	42a0      	cmp	r0, r4
    4544:	d0e0      	beq.n	4508 <_malloc_r+0x68>
    4546:	1a21      	subs	r1, r4, r0
    4548:	0030      	movs	r0, r6
    454a:	f000 f807 	bl	455c <_sbrk_r>
    454e:	1c43      	adds	r3, r0, #1
    4550:	d1da      	bne.n	4508 <_malloc_r+0x68>
    4552:	e7c6      	b.n	44e2 <_malloc_r+0x42>
    4554:	20000140 	.word	0x20000140
    4558:	20000144 	.word	0x20000144

0000455c <_sbrk_r>:
    455c:	2300      	movs	r3, #0
    455e:	b570      	push	{r4, r5, r6, lr}
    4560:	4c06      	ldr	r4, [pc, #24]	; (457c <_sbrk_r+0x20>)
    4562:	0005      	movs	r5, r0
    4564:	0008      	movs	r0, r1
    4566:	6023      	str	r3, [r4, #0]
    4568:	f7ff fd2e 	bl	3fc8 <_sbrk>
    456c:	1c43      	adds	r3, r0, #1
    456e:	d103      	bne.n	4578 <_sbrk_r+0x1c>
    4570:	6823      	ldr	r3, [r4, #0]
    4572:	2b00      	cmp	r3, #0
    4574:	d000      	beq.n	4578 <_sbrk_r+0x1c>
    4576:	602b      	str	r3, [r5, #0]
    4578:	bd70      	pop	{r4, r5, r6, pc}
    457a:	46c0      	nop			; (mov r8, r8)
    457c:	200009b4 	.word	0x200009b4

00004580 <setbuf>:
    4580:	424a      	negs	r2, r1
    4582:	414a      	adcs	r2, r1
    4584:	2380      	movs	r3, #128	; 0x80
    4586:	b510      	push	{r4, lr}
    4588:	0052      	lsls	r2, r2, #1
    458a:	00db      	lsls	r3, r3, #3
    458c:	f000 f802 	bl	4594 <setvbuf>
    4590:	bd10      	pop	{r4, pc}
	...

00004594 <setvbuf>:
    4594:	b5f0      	push	{r4, r5, r6, r7, lr}
    4596:	001d      	movs	r5, r3
    4598:	4b4f      	ldr	r3, [pc, #316]	; (46d8 <setvbuf+0x144>)
    459a:	b085      	sub	sp, #20
    459c:	681e      	ldr	r6, [r3, #0]
    459e:	0004      	movs	r4, r0
    45a0:	000f      	movs	r7, r1
    45a2:	9200      	str	r2, [sp, #0]
    45a4:	2e00      	cmp	r6, #0
    45a6:	d005      	beq.n	45b4 <setvbuf+0x20>
    45a8:	69b3      	ldr	r3, [r6, #24]
    45aa:	2b00      	cmp	r3, #0
    45ac:	d102      	bne.n	45b4 <setvbuf+0x20>
    45ae:	0030      	movs	r0, r6
    45b0:	f000 f99c 	bl	48ec <__sinit>
    45b4:	4b49      	ldr	r3, [pc, #292]	; (46dc <setvbuf+0x148>)
    45b6:	429c      	cmp	r4, r3
    45b8:	d150      	bne.n	465c <setvbuf+0xc8>
    45ba:	6874      	ldr	r4, [r6, #4]
    45bc:	9b00      	ldr	r3, [sp, #0]
    45be:	2b02      	cmp	r3, #2
    45c0:	d005      	beq.n	45ce <setvbuf+0x3a>
    45c2:	2b01      	cmp	r3, #1
    45c4:	d900      	bls.n	45c8 <setvbuf+0x34>
    45c6:	e084      	b.n	46d2 <setvbuf+0x13e>
    45c8:	2d00      	cmp	r5, #0
    45ca:	da00      	bge.n	45ce <setvbuf+0x3a>
    45cc:	e081      	b.n	46d2 <setvbuf+0x13e>
    45ce:	0021      	movs	r1, r4
    45d0:	0030      	movs	r0, r6
    45d2:	f000 f91d 	bl	4810 <_fflush_r>
    45d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    45d8:	2900      	cmp	r1, #0
    45da:	d008      	beq.n	45ee <setvbuf+0x5a>
    45dc:	0023      	movs	r3, r4
    45de:	3344      	adds	r3, #68	; 0x44
    45e0:	4299      	cmp	r1, r3
    45e2:	d002      	beq.n	45ea <setvbuf+0x56>
    45e4:	0030      	movs	r0, r6
    45e6:	f7ff ff11 	bl	440c <_free_r>
    45ea:	2300      	movs	r3, #0
    45ec:	6363      	str	r3, [r4, #52]	; 0x34
    45ee:	2300      	movs	r3, #0
    45f0:	61a3      	str	r3, [r4, #24]
    45f2:	6063      	str	r3, [r4, #4]
    45f4:	89a3      	ldrh	r3, [r4, #12]
    45f6:	061b      	lsls	r3, r3, #24
    45f8:	d503      	bpl.n	4602 <setvbuf+0x6e>
    45fa:	6921      	ldr	r1, [r4, #16]
    45fc:	0030      	movs	r0, r6
    45fe:	f7ff ff05 	bl	440c <_free_r>
    4602:	89a3      	ldrh	r3, [r4, #12]
    4604:	4a36      	ldr	r2, [pc, #216]	; (46e0 <setvbuf+0x14c>)
    4606:	4013      	ands	r3, r2
    4608:	81a3      	strh	r3, [r4, #12]
    460a:	9b00      	ldr	r3, [sp, #0]
    460c:	2b02      	cmp	r3, #2
    460e:	d05a      	beq.n	46c6 <setvbuf+0x132>
    4610:	ab03      	add	r3, sp, #12
    4612:	aa02      	add	r2, sp, #8
    4614:	0021      	movs	r1, r4
    4616:	0030      	movs	r0, r6
    4618:	f000 f9fe 	bl	4a18 <__swhatbuf_r>
    461c:	89a3      	ldrh	r3, [r4, #12]
    461e:	4318      	orrs	r0, r3
    4620:	81a0      	strh	r0, [r4, #12]
    4622:	2d00      	cmp	r5, #0
    4624:	d124      	bne.n	4670 <setvbuf+0xdc>
    4626:	9d02      	ldr	r5, [sp, #8]
    4628:	0028      	movs	r0, r5
    462a:	f7ff fedd 	bl	43e8 <malloc>
    462e:	9501      	str	r5, [sp, #4]
    4630:	1e07      	subs	r7, r0, #0
    4632:	d142      	bne.n	46ba <setvbuf+0x126>
    4634:	9b02      	ldr	r3, [sp, #8]
    4636:	9301      	str	r3, [sp, #4]
    4638:	42ab      	cmp	r3, r5
    463a:	d139      	bne.n	46b0 <setvbuf+0x11c>
    463c:	2001      	movs	r0, #1
    463e:	4240      	negs	r0, r0
    4640:	2302      	movs	r3, #2
    4642:	89a2      	ldrh	r2, [r4, #12]
    4644:	4313      	orrs	r3, r2
    4646:	81a3      	strh	r3, [r4, #12]
    4648:	2300      	movs	r3, #0
    464a:	60a3      	str	r3, [r4, #8]
    464c:	0023      	movs	r3, r4
    464e:	3347      	adds	r3, #71	; 0x47
    4650:	6023      	str	r3, [r4, #0]
    4652:	6123      	str	r3, [r4, #16]
    4654:	2301      	movs	r3, #1
    4656:	6163      	str	r3, [r4, #20]
    4658:	b005      	add	sp, #20
    465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    465c:	4b21      	ldr	r3, [pc, #132]	; (46e4 <setvbuf+0x150>)
    465e:	429c      	cmp	r4, r3
    4660:	d101      	bne.n	4666 <setvbuf+0xd2>
    4662:	68b4      	ldr	r4, [r6, #8]
    4664:	e7aa      	b.n	45bc <setvbuf+0x28>
    4666:	4b20      	ldr	r3, [pc, #128]	; (46e8 <setvbuf+0x154>)
    4668:	429c      	cmp	r4, r3
    466a:	d1a7      	bne.n	45bc <setvbuf+0x28>
    466c:	68f4      	ldr	r4, [r6, #12]
    466e:	e7a5      	b.n	45bc <setvbuf+0x28>
    4670:	2f00      	cmp	r7, #0
    4672:	d0d9      	beq.n	4628 <setvbuf+0x94>
    4674:	69b3      	ldr	r3, [r6, #24]
    4676:	2b00      	cmp	r3, #0
    4678:	d102      	bne.n	4680 <setvbuf+0xec>
    467a:	0030      	movs	r0, r6
    467c:	f000 f936 	bl	48ec <__sinit>
    4680:	9b00      	ldr	r3, [sp, #0]
    4682:	2b01      	cmp	r3, #1
    4684:	d103      	bne.n	468e <setvbuf+0xfa>
    4686:	89a3      	ldrh	r3, [r4, #12]
    4688:	9a00      	ldr	r2, [sp, #0]
    468a:	431a      	orrs	r2, r3
    468c:	81a2      	strh	r2, [r4, #12]
    468e:	2008      	movs	r0, #8
    4690:	89a3      	ldrh	r3, [r4, #12]
    4692:	6027      	str	r7, [r4, #0]
    4694:	6127      	str	r7, [r4, #16]
    4696:	6165      	str	r5, [r4, #20]
    4698:	4018      	ands	r0, r3
    469a:	d018      	beq.n	46ce <setvbuf+0x13a>
    469c:	2001      	movs	r0, #1
    469e:	4018      	ands	r0, r3
    46a0:	2300      	movs	r3, #0
    46a2:	4298      	cmp	r0, r3
    46a4:	d011      	beq.n	46ca <setvbuf+0x136>
    46a6:	426d      	negs	r5, r5
    46a8:	60a3      	str	r3, [r4, #8]
    46aa:	61a5      	str	r5, [r4, #24]
    46ac:	0018      	movs	r0, r3
    46ae:	e7d3      	b.n	4658 <setvbuf+0xc4>
    46b0:	9801      	ldr	r0, [sp, #4]
    46b2:	f7ff fe99 	bl	43e8 <malloc>
    46b6:	1e07      	subs	r7, r0, #0
    46b8:	d0c0      	beq.n	463c <setvbuf+0xa8>
    46ba:	2380      	movs	r3, #128	; 0x80
    46bc:	89a2      	ldrh	r2, [r4, #12]
    46be:	9d01      	ldr	r5, [sp, #4]
    46c0:	4313      	orrs	r3, r2
    46c2:	81a3      	strh	r3, [r4, #12]
    46c4:	e7d6      	b.n	4674 <setvbuf+0xe0>
    46c6:	2000      	movs	r0, #0
    46c8:	e7ba      	b.n	4640 <setvbuf+0xac>
    46ca:	60a5      	str	r5, [r4, #8]
    46cc:	e7c4      	b.n	4658 <setvbuf+0xc4>
    46ce:	60a0      	str	r0, [r4, #8]
    46d0:	e7c2      	b.n	4658 <setvbuf+0xc4>
    46d2:	2001      	movs	r0, #1
    46d4:	4240      	negs	r0, r0
    46d6:	e7bf      	b.n	4658 <setvbuf+0xc4>
    46d8:	2000000c 	.word	0x2000000c
    46dc:	00004f14 	.word	0x00004f14
    46e0:	fffff35c 	.word	0xfffff35c
    46e4:	00004f34 	.word	0x00004f34
    46e8:	00004ef4 	.word	0x00004ef4

000046ec <strlen>:
    46ec:	2300      	movs	r3, #0
    46ee:	5cc2      	ldrb	r2, [r0, r3]
    46f0:	3301      	adds	r3, #1
    46f2:	2a00      	cmp	r2, #0
    46f4:	d1fb      	bne.n	46ee <strlen+0x2>
    46f6:	1e58      	subs	r0, r3, #1
    46f8:	4770      	bx	lr
	...

000046fc <__sflush_r>:
    46fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    46fe:	898a      	ldrh	r2, [r1, #12]
    4700:	0005      	movs	r5, r0
    4702:	000c      	movs	r4, r1
    4704:	0713      	lsls	r3, r2, #28
    4706:	d460      	bmi.n	47ca <__sflush_r+0xce>
    4708:	684b      	ldr	r3, [r1, #4]
    470a:	2b00      	cmp	r3, #0
    470c:	dc04      	bgt.n	4718 <__sflush_r+0x1c>
    470e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    4710:	2b00      	cmp	r3, #0
    4712:	dc01      	bgt.n	4718 <__sflush_r+0x1c>
    4714:	2000      	movs	r0, #0
    4716:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4718:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    471a:	2f00      	cmp	r7, #0
    471c:	d0fa      	beq.n	4714 <__sflush_r+0x18>
    471e:	2300      	movs	r3, #0
    4720:	682e      	ldr	r6, [r5, #0]
    4722:	602b      	str	r3, [r5, #0]
    4724:	2380      	movs	r3, #128	; 0x80
    4726:	015b      	lsls	r3, r3, #5
    4728:	401a      	ands	r2, r3
    472a:	d034      	beq.n	4796 <__sflush_r+0x9a>
    472c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    472e:	89a3      	ldrh	r3, [r4, #12]
    4730:	075b      	lsls	r3, r3, #29
    4732:	d506      	bpl.n	4742 <__sflush_r+0x46>
    4734:	6863      	ldr	r3, [r4, #4]
    4736:	1ac0      	subs	r0, r0, r3
    4738:	6b63      	ldr	r3, [r4, #52]	; 0x34
    473a:	2b00      	cmp	r3, #0
    473c:	d001      	beq.n	4742 <__sflush_r+0x46>
    473e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4740:	1ac0      	subs	r0, r0, r3
    4742:	0002      	movs	r2, r0
    4744:	6a21      	ldr	r1, [r4, #32]
    4746:	2300      	movs	r3, #0
    4748:	0028      	movs	r0, r5
    474a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    474c:	47b8      	blx	r7
    474e:	89a1      	ldrh	r1, [r4, #12]
    4750:	1c43      	adds	r3, r0, #1
    4752:	d106      	bne.n	4762 <__sflush_r+0x66>
    4754:	682b      	ldr	r3, [r5, #0]
    4756:	2b1d      	cmp	r3, #29
    4758:	d831      	bhi.n	47be <__sflush_r+0xc2>
    475a:	4a2c      	ldr	r2, [pc, #176]	; (480c <__sflush_r+0x110>)
    475c:	40da      	lsrs	r2, r3
    475e:	07d3      	lsls	r3, r2, #31
    4760:	d52d      	bpl.n	47be <__sflush_r+0xc2>
    4762:	2300      	movs	r3, #0
    4764:	6063      	str	r3, [r4, #4]
    4766:	6923      	ldr	r3, [r4, #16]
    4768:	6023      	str	r3, [r4, #0]
    476a:	04cb      	lsls	r3, r1, #19
    476c:	d505      	bpl.n	477a <__sflush_r+0x7e>
    476e:	1c43      	adds	r3, r0, #1
    4770:	d102      	bne.n	4778 <__sflush_r+0x7c>
    4772:	682b      	ldr	r3, [r5, #0]
    4774:	2b00      	cmp	r3, #0
    4776:	d100      	bne.n	477a <__sflush_r+0x7e>
    4778:	6560      	str	r0, [r4, #84]	; 0x54
    477a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    477c:	602e      	str	r6, [r5, #0]
    477e:	2900      	cmp	r1, #0
    4780:	d0c8      	beq.n	4714 <__sflush_r+0x18>
    4782:	0023      	movs	r3, r4
    4784:	3344      	adds	r3, #68	; 0x44
    4786:	4299      	cmp	r1, r3
    4788:	d002      	beq.n	4790 <__sflush_r+0x94>
    478a:	0028      	movs	r0, r5
    478c:	f7ff fe3e 	bl	440c <_free_r>
    4790:	2000      	movs	r0, #0
    4792:	6360      	str	r0, [r4, #52]	; 0x34
    4794:	e7bf      	b.n	4716 <__sflush_r+0x1a>
    4796:	2301      	movs	r3, #1
    4798:	6a21      	ldr	r1, [r4, #32]
    479a:	0028      	movs	r0, r5
    479c:	47b8      	blx	r7
    479e:	1c43      	adds	r3, r0, #1
    47a0:	d1c5      	bne.n	472e <__sflush_r+0x32>
    47a2:	682b      	ldr	r3, [r5, #0]
    47a4:	2b00      	cmp	r3, #0
    47a6:	d0c2      	beq.n	472e <__sflush_r+0x32>
    47a8:	2b1d      	cmp	r3, #29
    47aa:	d001      	beq.n	47b0 <__sflush_r+0xb4>
    47ac:	2b16      	cmp	r3, #22
    47ae:	d101      	bne.n	47b4 <__sflush_r+0xb8>
    47b0:	602e      	str	r6, [r5, #0]
    47b2:	e7af      	b.n	4714 <__sflush_r+0x18>
    47b4:	2340      	movs	r3, #64	; 0x40
    47b6:	89a2      	ldrh	r2, [r4, #12]
    47b8:	4313      	orrs	r3, r2
    47ba:	81a3      	strh	r3, [r4, #12]
    47bc:	e7ab      	b.n	4716 <__sflush_r+0x1a>
    47be:	2340      	movs	r3, #64	; 0x40
    47c0:	430b      	orrs	r3, r1
    47c2:	2001      	movs	r0, #1
    47c4:	81a3      	strh	r3, [r4, #12]
    47c6:	4240      	negs	r0, r0
    47c8:	e7a5      	b.n	4716 <__sflush_r+0x1a>
    47ca:	690f      	ldr	r7, [r1, #16]
    47cc:	2f00      	cmp	r7, #0
    47ce:	d0a1      	beq.n	4714 <__sflush_r+0x18>
    47d0:	680b      	ldr	r3, [r1, #0]
    47d2:	600f      	str	r7, [r1, #0]
    47d4:	1bdb      	subs	r3, r3, r7
    47d6:	9301      	str	r3, [sp, #4]
    47d8:	2300      	movs	r3, #0
    47da:	0792      	lsls	r2, r2, #30
    47dc:	d100      	bne.n	47e0 <__sflush_r+0xe4>
    47de:	694b      	ldr	r3, [r1, #20]
    47e0:	60a3      	str	r3, [r4, #8]
    47e2:	9b01      	ldr	r3, [sp, #4]
    47e4:	2b00      	cmp	r3, #0
    47e6:	dc00      	bgt.n	47ea <__sflush_r+0xee>
    47e8:	e794      	b.n	4714 <__sflush_r+0x18>
    47ea:	9b01      	ldr	r3, [sp, #4]
    47ec:	003a      	movs	r2, r7
    47ee:	6a21      	ldr	r1, [r4, #32]
    47f0:	0028      	movs	r0, r5
    47f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    47f4:	47b0      	blx	r6
    47f6:	2800      	cmp	r0, #0
    47f8:	dc03      	bgt.n	4802 <__sflush_r+0x106>
    47fa:	2340      	movs	r3, #64	; 0x40
    47fc:	89a2      	ldrh	r2, [r4, #12]
    47fe:	4313      	orrs	r3, r2
    4800:	e7df      	b.n	47c2 <__sflush_r+0xc6>
    4802:	9b01      	ldr	r3, [sp, #4]
    4804:	183f      	adds	r7, r7, r0
    4806:	1a1b      	subs	r3, r3, r0
    4808:	9301      	str	r3, [sp, #4]
    480a:	e7ea      	b.n	47e2 <__sflush_r+0xe6>
    480c:	20400001 	.word	0x20400001

00004810 <_fflush_r>:
    4810:	690b      	ldr	r3, [r1, #16]
    4812:	b570      	push	{r4, r5, r6, lr}
    4814:	0005      	movs	r5, r0
    4816:	000c      	movs	r4, r1
    4818:	2b00      	cmp	r3, #0
    481a:	d101      	bne.n	4820 <_fflush_r+0x10>
    481c:	2000      	movs	r0, #0
    481e:	bd70      	pop	{r4, r5, r6, pc}
    4820:	2800      	cmp	r0, #0
    4822:	d004      	beq.n	482e <_fflush_r+0x1e>
    4824:	6983      	ldr	r3, [r0, #24]
    4826:	2b00      	cmp	r3, #0
    4828:	d101      	bne.n	482e <_fflush_r+0x1e>
    482a:	f000 f85f 	bl	48ec <__sinit>
    482e:	4b0b      	ldr	r3, [pc, #44]	; (485c <_fflush_r+0x4c>)
    4830:	429c      	cmp	r4, r3
    4832:	d109      	bne.n	4848 <_fflush_r+0x38>
    4834:	686c      	ldr	r4, [r5, #4]
    4836:	220c      	movs	r2, #12
    4838:	5ea3      	ldrsh	r3, [r4, r2]
    483a:	2b00      	cmp	r3, #0
    483c:	d0ee      	beq.n	481c <_fflush_r+0xc>
    483e:	0021      	movs	r1, r4
    4840:	0028      	movs	r0, r5
    4842:	f7ff ff5b 	bl	46fc <__sflush_r>
    4846:	e7ea      	b.n	481e <_fflush_r+0xe>
    4848:	4b05      	ldr	r3, [pc, #20]	; (4860 <_fflush_r+0x50>)
    484a:	429c      	cmp	r4, r3
    484c:	d101      	bne.n	4852 <_fflush_r+0x42>
    484e:	68ac      	ldr	r4, [r5, #8]
    4850:	e7f1      	b.n	4836 <_fflush_r+0x26>
    4852:	4b04      	ldr	r3, [pc, #16]	; (4864 <_fflush_r+0x54>)
    4854:	429c      	cmp	r4, r3
    4856:	d1ee      	bne.n	4836 <_fflush_r+0x26>
    4858:	68ec      	ldr	r4, [r5, #12]
    485a:	e7ec      	b.n	4836 <_fflush_r+0x26>
    485c:	00004f14 	.word	0x00004f14
    4860:	00004f34 	.word	0x00004f34
    4864:	00004ef4 	.word	0x00004ef4

00004868 <_cleanup_r>:
    4868:	b510      	push	{r4, lr}
    486a:	4902      	ldr	r1, [pc, #8]	; (4874 <_cleanup_r+0xc>)
    486c:	f000 f8b2 	bl	49d4 <_fwalk_reent>
    4870:	bd10      	pop	{r4, pc}
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	00004811 	.word	0x00004811

00004878 <std.isra.0>:
    4878:	2300      	movs	r3, #0
    487a:	b510      	push	{r4, lr}
    487c:	0004      	movs	r4, r0
    487e:	6003      	str	r3, [r0, #0]
    4880:	6043      	str	r3, [r0, #4]
    4882:	6083      	str	r3, [r0, #8]
    4884:	8181      	strh	r1, [r0, #12]
    4886:	6643      	str	r3, [r0, #100]	; 0x64
    4888:	81c2      	strh	r2, [r0, #14]
    488a:	6103      	str	r3, [r0, #16]
    488c:	6143      	str	r3, [r0, #20]
    488e:	6183      	str	r3, [r0, #24]
    4890:	0019      	movs	r1, r3
    4892:	2208      	movs	r2, #8
    4894:	305c      	adds	r0, #92	; 0x5c
    4896:	f7ff fdb1 	bl	43fc <memset>
    489a:	4b05      	ldr	r3, [pc, #20]	; (48b0 <std.isra.0+0x38>)
    489c:	6224      	str	r4, [r4, #32]
    489e:	6263      	str	r3, [r4, #36]	; 0x24
    48a0:	4b04      	ldr	r3, [pc, #16]	; (48b4 <std.isra.0+0x3c>)
    48a2:	62a3      	str	r3, [r4, #40]	; 0x28
    48a4:	4b04      	ldr	r3, [pc, #16]	; (48b8 <std.isra.0+0x40>)
    48a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    48a8:	4b04      	ldr	r3, [pc, #16]	; (48bc <std.isra.0+0x44>)
    48aa:	6323      	str	r3, [r4, #48]	; 0x30
    48ac:	bd10      	pop	{r4, pc}
    48ae:	46c0      	nop			; (mov r8, r8)
    48b0:	00004a6d 	.word	0x00004a6d
    48b4:	00004a95 	.word	0x00004a95
    48b8:	00004acd 	.word	0x00004acd
    48bc:	00004af9 	.word	0x00004af9

000048c0 <__sfmoreglue>:
    48c0:	b570      	push	{r4, r5, r6, lr}
    48c2:	2568      	movs	r5, #104	; 0x68
    48c4:	1e4a      	subs	r2, r1, #1
    48c6:	4355      	muls	r5, r2
    48c8:	000e      	movs	r6, r1
    48ca:	0029      	movs	r1, r5
    48cc:	3174      	adds	r1, #116	; 0x74
    48ce:	f7ff fde7 	bl	44a0 <_malloc_r>
    48d2:	1e04      	subs	r4, r0, #0
    48d4:	d008      	beq.n	48e8 <__sfmoreglue+0x28>
    48d6:	2100      	movs	r1, #0
    48d8:	002a      	movs	r2, r5
    48da:	6001      	str	r1, [r0, #0]
    48dc:	6046      	str	r6, [r0, #4]
    48de:	300c      	adds	r0, #12
    48e0:	60a0      	str	r0, [r4, #8]
    48e2:	3268      	adds	r2, #104	; 0x68
    48e4:	f7ff fd8a 	bl	43fc <memset>
    48e8:	0020      	movs	r0, r4
    48ea:	bd70      	pop	{r4, r5, r6, pc}

000048ec <__sinit>:
    48ec:	6983      	ldr	r3, [r0, #24]
    48ee:	b513      	push	{r0, r1, r4, lr}
    48f0:	0004      	movs	r4, r0
    48f2:	2b00      	cmp	r3, #0
    48f4:	d128      	bne.n	4948 <__sinit+0x5c>
    48f6:	6483      	str	r3, [r0, #72]	; 0x48
    48f8:	64c3      	str	r3, [r0, #76]	; 0x4c
    48fa:	6503      	str	r3, [r0, #80]	; 0x50
    48fc:	4b13      	ldr	r3, [pc, #76]	; (494c <__sinit+0x60>)
    48fe:	4a14      	ldr	r2, [pc, #80]	; (4950 <__sinit+0x64>)
    4900:	681b      	ldr	r3, [r3, #0]
    4902:	6282      	str	r2, [r0, #40]	; 0x28
    4904:	9301      	str	r3, [sp, #4]
    4906:	4298      	cmp	r0, r3
    4908:	d101      	bne.n	490e <__sinit+0x22>
    490a:	2301      	movs	r3, #1
    490c:	6183      	str	r3, [r0, #24]
    490e:	0020      	movs	r0, r4
    4910:	f000 f820 	bl	4954 <__sfp>
    4914:	6060      	str	r0, [r4, #4]
    4916:	0020      	movs	r0, r4
    4918:	f000 f81c 	bl	4954 <__sfp>
    491c:	60a0      	str	r0, [r4, #8]
    491e:	0020      	movs	r0, r4
    4920:	f000 f818 	bl	4954 <__sfp>
    4924:	2200      	movs	r2, #0
    4926:	60e0      	str	r0, [r4, #12]
    4928:	2104      	movs	r1, #4
    492a:	6860      	ldr	r0, [r4, #4]
    492c:	f7ff ffa4 	bl	4878 <std.isra.0>
    4930:	2201      	movs	r2, #1
    4932:	2109      	movs	r1, #9
    4934:	68a0      	ldr	r0, [r4, #8]
    4936:	f7ff ff9f 	bl	4878 <std.isra.0>
    493a:	2202      	movs	r2, #2
    493c:	2112      	movs	r1, #18
    493e:	68e0      	ldr	r0, [r4, #12]
    4940:	f7ff ff9a 	bl	4878 <std.isra.0>
    4944:	2301      	movs	r3, #1
    4946:	61a3      	str	r3, [r4, #24]
    4948:	bd13      	pop	{r0, r1, r4, pc}
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	00004ef0 	.word	0x00004ef0
    4950:	00004869 	.word	0x00004869

00004954 <__sfp>:
    4954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4956:	4b1e      	ldr	r3, [pc, #120]	; (49d0 <__sfp+0x7c>)
    4958:	0007      	movs	r7, r0
    495a:	681e      	ldr	r6, [r3, #0]
    495c:	69b3      	ldr	r3, [r6, #24]
    495e:	2b00      	cmp	r3, #0
    4960:	d102      	bne.n	4968 <__sfp+0x14>
    4962:	0030      	movs	r0, r6
    4964:	f7ff ffc2 	bl	48ec <__sinit>
    4968:	3648      	adds	r6, #72	; 0x48
    496a:	68b4      	ldr	r4, [r6, #8]
    496c:	6873      	ldr	r3, [r6, #4]
    496e:	3b01      	subs	r3, #1
    4970:	d504      	bpl.n	497c <__sfp+0x28>
    4972:	6833      	ldr	r3, [r6, #0]
    4974:	2b00      	cmp	r3, #0
    4976:	d007      	beq.n	4988 <__sfp+0x34>
    4978:	6836      	ldr	r6, [r6, #0]
    497a:	e7f6      	b.n	496a <__sfp+0x16>
    497c:	220c      	movs	r2, #12
    497e:	5ea5      	ldrsh	r5, [r4, r2]
    4980:	2d00      	cmp	r5, #0
    4982:	d00d      	beq.n	49a0 <__sfp+0x4c>
    4984:	3468      	adds	r4, #104	; 0x68
    4986:	e7f2      	b.n	496e <__sfp+0x1a>
    4988:	2104      	movs	r1, #4
    498a:	0038      	movs	r0, r7
    498c:	f7ff ff98 	bl	48c0 <__sfmoreglue>
    4990:	6030      	str	r0, [r6, #0]
    4992:	2800      	cmp	r0, #0
    4994:	d1f0      	bne.n	4978 <__sfp+0x24>
    4996:	230c      	movs	r3, #12
    4998:	0004      	movs	r4, r0
    499a:	603b      	str	r3, [r7, #0]
    499c:	0020      	movs	r0, r4
    499e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49a0:	2301      	movs	r3, #1
    49a2:	0020      	movs	r0, r4
    49a4:	425b      	negs	r3, r3
    49a6:	81e3      	strh	r3, [r4, #14]
    49a8:	3302      	adds	r3, #2
    49aa:	81a3      	strh	r3, [r4, #12]
    49ac:	6665      	str	r5, [r4, #100]	; 0x64
    49ae:	6025      	str	r5, [r4, #0]
    49b0:	60a5      	str	r5, [r4, #8]
    49b2:	6065      	str	r5, [r4, #4]
    49b4:	6125      	str	r5, [r4, #16]
    49b6:	6165      	str	r5, [r4, #20]
    49b8:	61a5      	str	r5, [r4, #24]
    49ba:	2208      	movs	r2, #8
    49bc:	0029      	movs	r1, r5
    49be:	305c      	adds	r0, #92	; 0x5c
    49c0:	f7ff fd1c 	bl	43fc <memset>
    49c4:	6365      	str	r5, [r4, #52]	; 0x34
    49c6:	63a5      	str	r5, [r4, #56]	; 0x38
    49c8:	64a5      	str	r5, [r4, #72]	; 0x48
    49ca:	64e5      	str	r5, [r4, #76]	; 0x4c
    49cc:	e7e6      	b.n	499c <__sfp+0x48>
    49ce:	46c0      	nop			; (mov r8, r8)
    49d0:	00004ef0 	.word	0x00004ef0

000049d4 <_fwalk_reent>:
    49d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    49d6:	0004      	movs	r4, r0
    49d8:	0007      	movs	r7, r0
    49da:	2600      	movs	r6, #0
    49dc:	9101      	str	r1, [sp, #4]
    49de:	3448      	adds	r4, #72	; 0x48
    49e0:	2c00      	cmp	r4, #0
    49e2:	d101      	bne.n	49e8 <_fwalk_reent+0x14>
    49e4:	0030      	movs	r0, r6
    49e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    49e8:	6863      	ldr	r3, [r4, #4]
    49ea:	68a5      	ldr	r5, [r4, #8]
    49ec:	9300      	str	r3, [sp, #0]
    49ee:	9b00      	ldr	r3, [sp, #0]
    49f0:	3b01      	subs	r3, #1
    49f2:	9300      	str	r3, [sp, #0]
    49f4:	d501      	bpl.n	49fa <_fwalk_reent+0x26>
    49f6:	6824      	ldr	r4, [r4, #0]
    49f8:	e7f2      	b.n	49e0 <_fwalk_reent+0xc>
    49fa:	89ab      	ldrh	r3, [r5, #12]
    49fc:	2b01      	cmp	r3, #1
    49fe:	d908      	bls.n	4a12 <_fwalk_reent+0x3e>
    4a00:	220e      	movs	r2, #14
    4a02:	5eab      	ldrsh	r3, [r5, r2]
    4a04:	3301      	adds	r3, #1
    4a06:	d004      	beq.n	4a12 <_fwalk_reent+0x3e>
    4a08:	0029      	movs	r1, r5
    4a0a:	0038      	movs	r0, r7
    4a0c:	9b01      	ldr	r3, [sp, #4]
    4a0e:	4798      	blx	r3
    4a10:	4306      	orrs	r6, r0
    4a12:	3568      	adds	r5, #104	; 0x68
    4a14:	e7eb      	b.n	49ee <_fwalk_reent+0x1a>
	...

00004a18 <__swhatbuf_r>:
    4a18:	b570      	push	{r4, r5, r6, lr}
    4a1a:	000e      	movs	r6, r1
    4a1c:	001d      	movs	r5, r3
    4a1e:	230e      	movs	r3, #14
    4a20:	5ec9      	ldrsh	r1, [r1, r3]
    4a22:	b090      	sub	sp, #64	; 0x40
    4a24:	0014      	movs	r4, r2
    4a26:	2900      	cmp	r1, #0
    4a28:	da07      	bge.n	4a3a <__swhatbuf_r+0x22>
    4a2a:	2300      	movs	r3, #0
    4a2c:	602b      	str	r3, [r5, #0]
    4a2e:	89b3      	ldrh	r3, [r6, #12]
    4a30:	061b      	lsls	r3, r3, #24
    4a32:	d411      	bmi.n	4a58 <__swhatbuf_r+0x40>
    4a34:	2380      	movs	r3, #128	; 0x80
    4a36:	00db      	lsls	r3, r3, #3
    4a38:	e00f      	b.n	4a5a <__swhatbuf_r+0x42>
    4a3a:	aa01      	add	r2, sp, #4
    4a3c:	f000 f888 	bl	4b50 <_fstat_r>
    4a40:	2800      	cmp	r0, #0
    4a42:	dbf2      	blt.n	4a2a <__swhatbuf_r+0x12>
    4a44:	22f0      	movs	r2, #240	; 0xf0
    4a46:	9b02      	ldr	r3, [sp, #8]
    4a48:	0212      	lsls	r2, r2, #8
    4a4a:	4013      	ands	r3, r2
    4a4c:	4a05      	ldr	r2, [pc, #20]	; (4a64 <__swhatbuf_r+0x4c>)
    4a4e:	189b      	adds	r3, r3, r2
    4a50:	425a      	negs	r2, r3
    4a52:	4153      	adcs	r3, r2
    4a54:	602b      	str	r3, [r5, #0]
    4a56:	e7ed      	b.n	4a34 <__swhatbuf_r+0x1c>
    4a58:	2340      	movs	r3, #64	; 0x40
    4a5a:	2000      	movs	r0, #0
    4a5c:	6023      	str	r3, [r4, #0]
    4a5e:	b010      	add	sp, #64	; 0x40
    4a60:	bd70      	pop	{r4, r5, r6, pc}
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	ffffe000 	.word	0xffffe000

00004a68 <__malloc_lock>:
    4a68:	4770      	bx	lr

00004a6a <__malloc_unlock>:
    4a6a:	4770      	bx	lr

00004a6c <__sread>:
    4a6c:	b570      	push	{r4, r5, r6, lr}
    4a6e:	000c      	movs	r4, r1
    4a70:	250e      	movs	r5, #14
    4a72:	5f49      	ldrsh	r1, [r1, r5]
    4a74:	f000 f892 	bl	4b9c <_read_r>
    4a78:	2800      	cmp	r0, #0
    4a7a:	db03      	blt.n	4a84 <__sread+0x18>
    4a7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4a7e:	181b      	adds	r3, r3, r0
    4a80:	6563      	str	r3, [r4, #84]	; 0x54
    4a82:	bd70      	pop	{r4, r5, r6, pc}
    4a84:	89a3      	ldrh	r3, [r4, #12]
    4a86:	4a02      	ldr	r2, [pc, #8]	; (4a90 <__sread+0x24>)
    4a88:	4013      	ands	r3, r2
    4a8a:	81a3      	strh	r3, [r4, #12]
    4a8c:	e7f9      	b.n	4a82 <__sread+0x16>
    4a8e:	46c0      	nop			; (mov r8, r8)
    4a90:	ffffefff 	.word	0xffffefff

00004a94 <__swrite>:
    4a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a96:	001f      	movs	r7, r3
    4a98:	898b      	ldrh	r3, [r1, #12]
    4a9a:	0005      	movs	r5, r0
    4a9c:	000c      	movs	r4, r1
    4a9e:	0016      	movs	r6, r2
    4aa0:	05db      	lsls	r3, r3, #23
    4aa2:	d505      	bpl.n	4ab0 <__swrite+0x1c>
    4aa4:	230e      	movs	r3, #14
    4aa6:	5ec9      	ldrsh	r1, [r1, r3]
    4aa8:	2200      	movs	r2, #0
    4aaa:	2302      	movs	r3, #2
    4aac:	f000 f862 	bl	4b74 <_lseek_r>
    4ab0:	89a3      	ldrh	r3, [r4, #12]
    4ab2:	4a05      	ldr	r2, [pc, #20]	; (4ac8 <__swrite+0x34>)
    4ab4:	0028      	movs	r0, r5
    4ab6:	4013      	ands	r3, r2
    4ab8:	81a3      	strh	r3, [r4, #12]
    4aba:	0032      	movs	r2, r6
    4abc:	230e      	movs	r3, #14
    4abe:	5ee1      	ldrsh	r1, [r4, r3]
    4ac0:	003b      	movs	r3, r7
    4ac2:	f000 f81f 	bl	4b04 <_write_r>
    4ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ac8:	ffffefff 	.word	0xffffefff

00004acc <__sseek>:
    4acc:	b570      	push	{r4, r5, r6, lr}
    4ace:	000c      	movs	r4, r1
    4ad0:	250e      	movs	r5, #14
    4ad2:	5f49      	ldrsh	r1, [r1, r5]
    4ad4:	f000 f84e 	bl	4b74 <_lseek_r>
    4ad8:	89a3      	ldrh	r3, [r4, #12]
    4ada:	1c42      	adds	r2, r0, #1
    4adc:	d103      	bne.n	4ae6 <__sseek+0x1a>
    4ade:	4a05      	ldr	r2, [pc, #20]	; (4af4 <__sseek+0x28>)
    4ae0:	4013      	ands	r3, r2
    4ae2:	81a3      	strh	r3, [r4, #12]
    4ae4:	bd70      	pop	{r4, r5, r6, pc}
    4ae6:	2280      	movs	r2, #128	; 0x80
    4ae8:	0152      	lsls	r2, r2, #5
    4aea:	4313      	orrs	r3, r2
    4aec:	81a3      	strh	r3, [r4, #12]
    4aee:	6560      	str	r0, [r4, #84]	; 0x54
    4af0:	e7f8      	b.n	4ae4 <__sseek+0x18>
    4af2:	46c0      	nop			; (mov r8, r8)
    4af4:	ffffefff 	.word	0xffffefff

00004af8 <__sclose>:
    4af8:	b510      	push	{r4, lr}
    4afa:	230e      	movs	r3, #14
    4afc:	5ec9      	ldrsh	r1, [r1, r3]
    4afe:	f000 f815 	bl	4b2c <_close_r>
    4b02:	bd10      	pop	{r4, pc}

00004b04 <_write_r>:
    4b04:	b570      	push	{r4, r5, r6, lr}
    4b06:	0005      	movs	r5, r0
    4b08:	0008      	movs	r0, r1
    4b0a:	0011      	movs	r1, r2
    4b0c:	2200      	movs	r2, #0
    4b0e:	4c06      	ldr	r4, [pc, #24]	; (4b28 <_write_r+0x24>)
    4b10:	6022      	str	r2, [r4, #0]
    4b12:	001a      	movs	r2, r3
    4b14:	f7ff fa22 	bl	3f5c <_write>
    4b18:	1c43      	adds	r3, r0, #1
    4b1a:	d103      	bne.n	4b24 <_write_r+0x20>
    4b1c:	6823      	ldr	r3, [r4, #0]
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d000      	beq.n	4b24 <_write_r+0x20>
    4b22:	602b      	str	r3, [r5, #0]
    4b24:	bd70      	pop	{r4, r5, r6, pc}
    4b26:	46c0      	nop			; (mov r8, r8)
    4b28:	200009b4 	.word	0x200009b4

00004b2c <_close_r>:
    4b2c:	2300      	movs	r3, #0
    4b2e:	b570      	push	{r4, r5, r6, lr}
    4b30:	4c06      	ldr	r4, [pc, #24]	; (4b4c <_close_r+0x20>)
    4b32:	0005      	movs	r5, r0
    4b34:	0008      	movs	r0, r1
    4b36:	6023      	str	r3, [r4, #0]
    4b38:	f7ff fa64 	bl	4004 <_close>
    4b3c:	1c43      	adds	r3, r0, #1
    4b3e:	d103      	bne.n	4b48 <_close_r+0x1c>
    4b40:	6823      	ldr	r3, [r4, #0]
    4b42:	2b00      	cmp	r3, #0
    4b44:	d000      	beq.n	4b48 <_close_r+0x1c>
    4b46:	602b      	str	r3, [r5, #0]
    4b48:	bd70      	pop	{r4, r5, r6, pc}
    4b4a:	46c0      	nop			; (mov r8, r8)
    4b4c:	200009b4 	.word	0x200009b4

00004b50 <_fstat_r>:
    4b50:	2300      	movs	r3, #0
    4b52:	b570      	push	{r4, r5, r6, lr}
    4b54:	4c06      	ldr	r4, [pc, #24]	; (4b70 <_fstat_r+0x20>)
    4b56:	0005      	movs	r5, r0
    4b58:	0008      	movs	r0, r1
    4b5a:	0011      	movs	r1, r2
    4b5c:	6023      	str	r3, [r4, #0]
    4b5e:	f7ff fa5b 	bl	4018 <_fstat>
    4b62:	1c43      	adds	r3, r0, #1
    4b64:	d103      	bne.n	4b6e <_fstat_r+0x1e>
    4b66:	6823      	ldr	r3, [r4, #0]
    4b68:	2b00      	cmp	r3, #0
    4b6a:	d000      	beq.n	4b6e <_fstat_r+0x1e>
    4b6c:	602b      	str	r3, [r5, #0]
    4b6e:	bd70      	pop	{r4, r5, r6, pc}
    4b70:	200009b4 	.word	0x200009b4

00004b74 <_lseek_r>:
    4b74:	b570      	push	{r4, r5, r6, lr}
    4b76:	0005      	movs	r5, r0
    4b78:	0008      	movs	r0, r1
    4b7a:	0011      	movs	r1, r2
    4b7c:	2200      	movs	r2, #0
    4b7e:	4c06      	ldr	r4, [pc, #24]	; (4b98 <_lseek_r+0x24>)
    4b80:	6022      	str	r2, [r4, #0]
    4b82:	001a      	movs	r2, r3
    4b84:	f7ff fa56 	bl	4034 <_lseek>
    4b88:	1c43      	adds	r3, r0, #1
    4b8a:	d103      	bne.n	4b94 <_lseek_r+0x20>
    4b8c:	6823      	ldr	r3, [r4, #0]
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d000      	beq.n	4b94 <_lseek_r+0x20>
    4b92:	602b      	str	r3, [r5, #0]
    4b94:	bd70      	pop	{r4, r5, r6, pc}
    4b96:	46c0      	nop			; (mov r8, r8)
    4b98:	200009b4 	.word	0x200009b4

00004b9c <_read_r>:
    4b9c:	b570      	push	{r4, r5, r6, lr}
    4b9e:	0005      	movs	r5, r0
    4ba0:	0008      	movs	r0, r1
    4ba2:	0011      	movs	r1, r2
    4ba4:	2200      	movs	r2, #0
    4ba6:	4c06      	ldr	r4, [pc, #24]	; (4bc0 <_read_r+0x24>)
    4ba8:	6022      	str	r2, [r4, #0]
    4baa:	001a      	movs	r2, r3
    4bac:	f7ff f9ac 	bl	3f08 <_read>
    4bb0:	1c43      	adds	r3, r0, #1
    4bb2:	d103      	bne.n	4bbc <_read_r+0x20>
    4bb4:	6823      	ldr	r3, [r4, #0]
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d000      	beq.n	4bbc <_read_r+0x20>
    4bba:	602b      	str	r3, [r5, #0]
    4bbc:	bd70      	pop	{r4, r5, r6, pc}
    4bbe:	46c0      	nop			; (mov r8, r8)
    4bc0:	200009b4 	.word	0x200009b4
    4bc4:	42000800 	.word	0x42000800
    4bc8:	42000c00 	.word	0x42000c00
    4bcc:	42001000 	.word	0x42001000
    4bd0:	42001400 	.word	0x42001400
    4bd4:	42001800 	.word	0x42001800
    4bd8:	42001c00 	.word	0x42001c00
    4bdc:	0c0b0a09 	.word	0x0c0b0a09
    4be0:	00000e0d 	.word	0x00000e0d
    4be4:	00003086 	.word	0x00003086
    4be8:	00003100 	.word	0x00003100
    4bec:	00003100 	.word	0x00003100
    4bf0:	000030a4 	.word	0x000030a4
    4bf4:	0000309e 	.word	0x0000309e
    4bf8:	000030aa 	.word	0x000030aa
    4bfc:	0000308c 	.word	0x0000308c
    4c00:	000030b0 	.word	0x000030b0
    4c04:	000030e6 	.word	0x000030e6
    4c08:	000033cc 	.word	0x000033cc
    4c0c:	0000341c 	.word	0x0000341c
    4c10:	0000341c 	.word	0x0000341c
    4c14:	00003418 	.word	0x00003418
    4c18:	000033be 	.word	0x000033be
    4c1c:	000033de 	.word	0x000033de
    4c20:	000033ae 	.word	0x000033ae
    4c24:	000033f0 	.word	0x000033f0
    4c28:	00003402 	.word	0x00003402
    4c2c:	0000346a 	.word	0x0000346a
    4c30:	00003498 	.word	0x00003498
    4c34:	00003498 	.word	0x00003498
    4c38:	00003494 	.word	0x00003494
    4c3c:	00003464 	.word	0x00003464
    4c40:	00003470 	.word	0x00003470
    4c44:	0000345e 	.word	0x0000345e
    4c48:	00003476 	.word	0x00003476
    4c4c:	0000347c 	.word	0x0000347c
    4c50:	35455345 	.word	0x35455345
    4c54:	2d203631 	.word	0x2d203631
    4c58:	544e4520 	.word	0x544e4520
    4c5c:	42205245 	.word	0x42205245
    4c60:	4c544f4f 	.word	0x4c544f4f
    4c64:	4544414f 	.word	0x4544414f
    4c68:	00000052 	.word	0x00000052
    4c6c:	2d0d0a0c 	.word	0x2d0d0a0c
    4c70:	4453202d 	.word	0x4453202d
    4c74:	434d4d2f 	.word	0x434d4d2f
    4c78:	72614320 	.word	0x72614320
    4c7c:	78452064 	.word	0x78452064
    4c80:	6c706d61 	.word	0x6c706d61
    4c84:	6e6f2065 	.word	0x6e6f2065
    4c88:	74614620 	.word	0x74614620
    4c8c:	2d207346 	.word	0x2d207346
    4c90:	000d0a2d 	.word	0x000d0a2d
    4c94:	70696b73 	.word	0x70696b73
    4c98:	20647320 	.word	0x20647320
    4c9c:	64726163 	.word	0x64726163
    4ca0:	00000000 	.word	0x00000000
    4ca4:	35455345 	.word	0x35455345
    4ca8:	2d203631 	.word	0x2d203631
    4cac:	49584520 	.word	0x49584520
    4cb0:	4f422054 	.word	0x4f422054
    4cb4:	4f4c544f 	.word	0x4f4c544f
    4cb8:	52454441 	.word	0x52454441
    4cbc:	00000000 	.word	0x00000000
    4cc0:	75205746 	.word	0x75205746
    4cc4:	74616470 	.word	0x74616470
    4cc8:	72652065 	.word	0x72652065
    4ccc:	2e726f72 	.word	0x2e726f72
    4cd0:	70202e2e 	.word	0x70202e2e
    4cd4:	7361656c 	.word	0x7361656c
    4cd8:	65722065 	.word	0x65722065
    4cdc:	72617473 	.word	0x72617473
    4ce0:	0a0d2074 	.word	0x0a0d2074
    4ce4:	00000000 	.word	0x00000000
    4ce8:	204d564e 	.word	0x204d564e
    4cec:	6f666e49 	.word	0x6f666e49
    4cf0:	754e203a 	.word	0x754e203a
    4cf4:	7265626d 	.word	0x7265626d
    4cf8:	20666f20 	.word	0x20666f20
    4cfc:	65676150 	.word	0x65676150
    4d00:	64252073 	.word	0x64252073
    4d04:	6953202e 	.word	0x6953202e
    4d08:	6f20657a 	.word	0x6f20657a
    4d0c:	20612066 	.word	0x20612066
    4d10:	65676170 	.word	0x65676170
    4d14:	6425203a 	.word	0x6425203a
    4d18:	74796220 	.word	0x74796220
    4d1c:	202e7365 	.word	0x202e7365
    4d20:	00000a0d 	.word	0x00000a0d
    4d24:	204d564e 	.word	0x204d564e
    4d28:	4f525245 	.word	0x4f525245
    4d2c:	45203a52 	.word	0x45203a52
    4d30:	65736172 	.word	0x65736172
    4d34:	72726520 	.word	0x72726520
    4d38:	6120726f 	.word	0x6120726f
    4d3c:	6f722074 	.word	0x6f722074
    4d40:	64252077 	.word	0x64252077
    4d44:	000a0d20 	.word	0x000a0d20
    4d48:	6c756f63 	.word	0x6c756f63
    4d4c:	6f6e2064 	.word	0x6f6e2064
    4d50:	69662074 	.word	0x69662074
    4d54:	6220646e 	.word	0x6220646e
    4d58:	66206e69 	.word	0x66206e69
    4d5c:	20656c69 	.word	0x20656c69
    4d60:	00000a0d 	.word	0x00000a0d
    4d64:	64616572 	.word	0x64616572
    4d68:	72726520 	.word	0x72726520
    4d6c:	0d20726f 	.word	0x0d20726f
    4d70:	0000000a 	.word	0x0000000a
    4d74:	20435243 	.word	0x20435243
    4d78:	4f525245 	.word	0x4f525245
    4d7c:	000a0d52 	.word	0x000a0d52
    4d80:	20435243 	.word	0x20435243
    4d84:	43204453 	.word	0x43204453
    4d88:	3a445241 	.word	0x3a445241
    4d8c:	20642520 	.word	0x20642520
    4d90:	43524320 	.word	0x43524320
    4d94:	4d564e20 	.word	0x4d564e20
    4d98:	6425203a 	.word	0x6425203a
    4d9c:	000a0d20 	.word	0x000a0d20
    4da0:	43204453 	.word	0x43204453
    4da4:	20647261 	.word	0x20647261
    4da8:	74696e69 	.word	0x74696e69
    4dac:	65746169 	.word	0x65746169
    4db0:	6f632064 	.word	0x6f632064
    4db4:	63657272 	.word	0x63657272
    4db8:	21796c74 	.word	0x21796c74
    4dbc:	00000d0a 	.word	0x00000d0a
    4dc0:	6e756f4d 	.word	0x6e756f4d
    4dc4:	69642074 	.word	0x69642074
    4dc8:	28206b73 	.word	0x28206b73
    4dcc:	6f6d5f66 	.word	0x6f6d5f66
    4dd0:	29746e75 	.word	0x29746e75
    4dd4:	0d2e2e2e 	.word	0x0d2e2e2e
    4dd8:	0000000a 	.word	0x0000000a
    4ddc:	4941465b 	.word	0x4941465b
    4de0:	72205d4c 	.word	0x72205d4c
    4de4:	25207365 	.word	0x25207365
    4de8:	000a0d64 	.word	0x000a0d64
    4dec:	5d4b4f5b 	.word	0x5d4b4f5b
    4df0:	00000a0d 	.word	0x00000a0d
    4df4:	61657243 	.word	0x61657243
    4df8:	61206574 	.word	0x61206574
    4dfc:	6c696620 	.word	0x6c696620
    4e00:	66282065 	.word	0x66282065
    4e04:	65706f5f 	.word	0x65706f5f
    4e08:	2e2e296e 	.word	0x2e2e296e
    4e0c:	000a0d2e 	.word	0x000a0d2e
    4e10:	74697257 	.word	0x74697257
    4e14:	6f742065 	.word	0x6f742065
    4e18:	73657420 	.word	0x73657420
    4e1c:	69662074 	.word	0x69662074
    4e20:	2820656c 	.word	0x2820656c
    4e24:	75705f66 	.word	0x75705f66
    4e28:	2e297374 	.word	0x2e297374
    4e2c:	0a0d2e2e 	.word	0x0a0d2e2e
    4e30:	00000000 	.word	0x00000000
    4e34:	74736554 	.word	0x74736554
    4e38:	2f445320 	.word	0x2f445320
    4e3c:	20434d4d 	.word	0x20434d4d
    4e40:	63617473 	.word	0x63617473
    4e44:	00000a6b 	.word	0x00000a6b
    4e48:	4941465b 	.word	0x4941465b
    4e4c:	0a0d5d4c 	.word	0x0a0d5d4c
    4e50:	00000000 	.word	0x00000000
    4e54:	74736554 	.word	0x74736554
    4e58:	20736920 	.word	0x20736920
    4e5c:	63637573 	.word	0x63637573
    4e60:	66737365 	.word	0x66737365
    4e64:	0a2e6c75 	.word	0x0a2e6c75
    4e68:	0000000d 	.word	0x0000000d
    4e6c:	6c756f43 	.word	0x6c756f43
    4e70:	6f6e2064 	.word	0x6f6e2064
    4e74:	706f2074 	.word	0x706f2074
    4e78:	62206e65 	.word	0x62206e65
    4e7c:	72616e69 	.word	0x72616e69
    4e80:	69662079 	.word	0x69662079
    4e84:	0d21656c 	.word	0x0d21656c
    4e88:	0000000a 	.word	0x0000000a
    4e8c:	74697257 	.word	0x74697257
    4e90:	6f742065 	.word	0x6f742065
    4e94:	73657420 	.word	0x73657420
    4e98:	69662074 	.word	0x69662074
    4e9c:	2820656c 	.word	0x2820656c
    4ea0:	72775f66 	.word	0x72775f66
    4ea4:	29657469 	.word	0x29657469
    4ea8:	0d2e2e2e 	.word	0x0d2e2e2e
    4eac:	0000000a 	.word	0x0000000a
    4eb0:	20646e45 	.word	0x20646e45
    4eb4:	5420666f 	.word	0x5420666f
    4eb8:	2e747365 	.word	0x2e747365
    4ebc:	00000d0a 	.word	0x00000d0a
    4ec0:	43204453 	.word	0x43204453
    4ec4:	20647261 	.word	0x20647261
    4ec8:	6c696166 	.word	0x6c696166
    4ecc:	69206465 	.word	0x69206465
    4ed0:	6974696e 	.word	0x6974696e
    4ed4:	6f697461 	.word	0x6f697461
    4ed8:	4320216e 	.word	0x4320216e
    4edc:	6b636568 	.word	0x6b636568
    4ee0:	6e6f6320 	.word	0x6e6f6320
    4ee4:	7463656e 	.word	0x7463656e
    4ee8:	736e6f69 	.word	0x736e6f69
    4eec:	000d0a21 	.word	0x000d0a21

00004ef0 <_global_impure_ptr>:
    4ef0:	20000010                                ... 

00004ef4 <__sf_fake_stderr>:
	...

00004f14 <__sf_fake_stdin>:
	...

00004f34 <__sf_fake_stdout>:
	...

00004f54 <_init>:
    4f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f56:	46c0      	nop			; (mov r8, r8)
    4f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4f5a:	bc08      	pop	{r3}
    4f5c:	469e      	mov	lr, r3
    4f5e:	4770      	bx	lr

00004f60 <__init_array_start>:
    4f60:	000000dd 	.word	0x000000dd

00004f64 <_fini>:
    4f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f66:	46c0      	nop			; (mov r8, r8)
    4f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4f6a:	bc08      	pop	{r3}
    4f6c:	469e      	mov	lr, r3
    4f6e:	4770      	bx	lr

00004f70 <__fini_array_start>:
    4f70:	000000b5 	.word	0x000000b5
