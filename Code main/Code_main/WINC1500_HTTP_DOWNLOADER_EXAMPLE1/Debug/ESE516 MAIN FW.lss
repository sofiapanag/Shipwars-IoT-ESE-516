
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00027b70  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002a4  20000000  00039b70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005560  200002b0  00039e20  000302a4  2**4
                  ALLOC
  3 .stack        00002000  20005810  0003f380  000302a4  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00124076  00000000  00000000  00030325  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010509  00000000  00000000  0015439b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00016427  00000000  00000000  001648a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003ba0  00000000  00000000  0017accb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000037f0  00000000  00000000  0017e86b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028e31  00000000  00000000  0018205b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005ab21  00000000  00000000  001aae8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c389c  00000000  00000000  002059ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000e178  00000000  00000000  002c924c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	10 78 00 20 fd a8 02 00 f5 a9 02 00 f5 a9 02 00     .x. ............
	...
   1202c:	4d 9e 01 00 00 00 00 00 00 00 00 00 71 9f 01 00     M...........q...
   1203c:	b9 9f 01 00 f5 a9 02 00 f5 a9 02 00 f5 a9 02 00     ................
   1204c:	4d 6a 02 00 79 5f 02 00 f5 a9 02 00 61 24 01 00     Mj..y_......a$..
   1205c:	f5 a9 02 00 a5 25 01 00 f1 70 02 00 09 71 02 00     .....%...p...q..
   1206c:	21 71 02 00 39 71 02 00 51 71 02 00 69 71 02 00     !q..9q..Qq..iq..
   1207c:	45 a8 02 00 59 a8 02 00 6d a8 02 00 89 7a 01 00     E...Y...m....z..
   1208c:	9d 7a 01 00 b1 7a 01 00 00 00 00 00 00 00 00 00     .z...z..........
   1209c:	e9 22 01 00 f5 a9 02 00 25 24 01 00 f5 a9 02 00     ."......%$......
   120ac:	f5 a9 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002b0 	.word	0x200002b0
   120d4:	00000000 	.word	0x00000000
   120d8:	00039b70 	.word	0x00039b70

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002b4 	.word	0x200002b4
   12108:	00039b70 	.word	0x00039b70
   1210c:	00039b70 	.word	0x00039b70
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	20004318 	.word	0x20004318
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	2000431c 	.word	0x2000431c
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	00025bd9 	.word	0x00025bd9

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	00025c2d 	.word	0x00025c2d

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000320 	.word	0x20000320
   12598:	20004320 	.word	0x20004320
   1259c:	200002d0 	.word	0x200002d0
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	00017a35 	.word	0x00017a35
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	000179d7 	.word	0x000179d7
   12aa4:	00017979 	.word	0x00017979

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	00017a35 	.word	0x00017a35
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005784 	.word	0x20005784
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   12e40:	b580      	push	{r7, lr}
   12e42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12e44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12e48:	4b02      	ldr	r3, [pc, #8]	; (12e54 <NVIC_SystemReset+0x14>)
   12e4a:	4a03      	ldr	r2, [pc, #12]	; (12e58 <NVIC_SystemReset+0x18>)
   12e4c:	60da      	str	r2, [r3, #12]
   12e4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   12e52:	e7fe      	b.n	12e52 <NVIC_SystemReset+0x12>
   12e54:	e000ed00 	.word	0xe000ed00
   12e58:	05fa0004 	.word	0x05fa0004

00012e5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   12e5c:	b580      	push	{r7, lr}
   12e5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   12e60:	4b02      	ldr	r3, [pc, #8]	; (12e6c <system_reset+0x10>)
   12e62:	4798      	blx	r3
}
   12e64:	46c0      	nop			; (mov r8, r8)
   12e66:	46bd      	mov	sp, r7
   12e68:	bd80      	pop	{r7, pc}
   12e6a:	46c0      	nop			; (mov r8, r8)
   12e6c:	00012e41 	.word	0x00012e41

00012e70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   12e70:	b580      	push	{r7, lr}
   12e72:	b086      	sub	sp, #24
   12e74:	af00      	add	r7, sp, #0
   12e76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   12e78:	4b9c      	ldr	r3, [pc, #624]	; (130ec <vCommandConsoleTask+0x27c>)
   12e7a:	0018      	movs	r0, r3
   12e7c:	4b9c      	ldr	r3, [pc, #624]	; (130f0 <vCommandConsoleTask+0x280>)
   12e7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   12e80:	4b9c      	ldr	r3, [pc, #624]	; (130f4 <vCommandConsoleTask+0x284>)
   12e82:	0018      	movs	r0, r3
   12e84:	4b9a      	ldr	r3, [pc, #616]	; (130f0 <vCommandConsoleTask+0x280>)
   12e86:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSHTCGetCommand);
   12e88:	4b9b      	ldr	r3, [pc, #620]	; (130f8 <vCommandConsoleTask+0x288>)
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b98      	ldr	r3, [pc, #608]	; (130f0 <vCommandConsoleTask+0x280>)
   12e8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   12e90:	4b9a      	ldr	r3, [pc, #616]	; (130fc <vCommandConsoleTask+0x28c>)
   12e92:	0018      	movs	r0, r3
   12e94:	4b96      	ldr	r3, [pc, #600]	; (130f0 <vCommandConsoleTask+0x280>)
   12e96:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   12e98:	4b99      	ldr	r3, [pc, #612]	; (13100 <vCommandConsoleTask+0x290>)
   12e9a:	0018      	movs	r0, r3
   12e9c:	4b94      	ldr	r3, [pc, #592]	; (130f0 <vCommandConsoleTask+0x280>)
   12e9e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   12ea0:	4b98      	ldr	r3, [pc, #608]	; (13104 <vCommandConsoleTask+0x294>)
   12ea2:	0018      	movs	r0, r3
   12ea4:	4b92      	ldr	r3, [pc, #584]	; (130f0 <vCommandConsoleTask+0x280>)
   12ea6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   12ea8:	4b97      	ldr	r3, [pc, #604]	; (13108 <vCommandConsoleTask+0x298>)
   12eaa:	0018      	movs	r0, r3
   12eac:	4b90      	ldr	r3, [pc, #576]	; (130f0 <vCommandConsoleTask+0x280>)
   12eae:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   12eb0:	4b96      	ldr	r3, [pc, #600]	; (1310c <vCommandConsoleTask+0x29c>)
   12eb2:	0018      	movs	r0, r3
   12eb4:	4b8e      	ldr	r3, [pc, #568]	; (130f0 <vCommandConsoleTask+0x280>)
   12eb6:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   12eb8:	2317      	movs	r3, #23
   12eba:	18fb      	adds	r3, r7, r3
   12ebc:	2200      	movs	r2, #0
   12ebe:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   12ec0:	4b93      	ldr	r3, [pc, #588]	; (13110 <vCommandConsoleTask+0x2a0>)
   12ec2:	0018      	movs	r0, r3
   12ec4:	4b93      	ldr	r3, [pc, #588]	; (13114 <vCommandConsoleTask+0x2a4>)
   12ec6:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   12ec8:	2203      	movs	r2, #3
   12eca:	2100      	movs	r1, #0
   12ecc:	2001      	movs	r0, #1
   12ece:	4b92      	ldr	r3, [pc, #584]	; (13118 <vCommandConsoleTask+0x2a8>)
   12ed0:	4798      	blx	r3
   12ed2:	0002      	movs	r2, r0
   12ed4:	4b91      	ldr	r3, [pc, #580]	; (1311c <vCommandConsoleTask+0x2ac>)
   12ed6:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   12ed8:	4b90      	ldr	r3, [pc, #576]	; (1311c <vCommandConsoleTask+0x2ac>)
   12eda:	681b      	ldr	r3, [r3, #0]
   12edc:	2b00      	cmp	r3, #0
   12ede:	d107      	bne.n	12ef0 <vCommandConsoleTask+0x80>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   12ee0:	4b8f      	ldr	r3, [pc, #572]	; (13120 <vCommandConsoleTask+0x2b0>)
   12ee2:	0019      	movs	r1, r3
   12ee4:	2003      	movs	r0, #3
   12ee6:	4b8f      	ldr	r3, [pc, #572]	; (13124 <vCommandConsoleTask+0x2b4>)
   12ee8:	4798      	blx	r3
        vTaskSuspend(NULL);
   12eea:	2000      	movs	r0, #0
   12eec:	4b8e      	ldr	r3, [pc, #568]	; (13128 <vCommandConsoleTask+0x2b8>)
   12eee:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   12ef0:	230c      	movs	r3, #12
   12ef2:	18fb      	adds	r3, r7, r3
   12ef4:	0018      	movs	r0, r3
   12ef6:	4b8d      	ldr	r3, [pc, #564]	; (1312c <vCommandConsoleTask+0x2bc>)
   12ef8:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   12efa:	230c      	movs	r3, #12
   12efc:	18fb      	adds	r3, r7, r3
   12efe:	781b      	ldrb	r3, [r3, #0]
   12f00:	2b0a      	cmp	r3, #10
   12f02:	d004      	beq.n	12f0e <vCommandConsoleTask+0x9e>
   12f04:	230c      	movs	r3, #12
   12f06:	18fb      	adds	r3, r7, r3
   12f08:	781b      	ldrb	r3, [r3, #0]
   12f0a:	2b0d      	cmp	r3, #13
   12f0c:	d137      	bne.n	12f7e <vCommandConsoleTask+0x10e>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   12f0e:	4b88      	ldr	r3, [pc, #544]	; (13130 <vCommandConsoleTask+0x2c0>)
   12f10:	0018      	movs	r0, r3
   12f12:	4b80      	ldr	r3, [pc, #512]	; (13114 <vCommandConsoleTask+0x2a4>)
   12f14:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   12f16:	4b87      	ldr	r3, [pc, #540]	; (13134 <vCommandConsoleTask+0x2c4>)
   12f18:	2200      	movs	r2, #0
   12f1a:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   12f1c:	4b86      	ldr	r3, [pc, #536]	; (13138 <vCommandConsoleTask+0x2c8>)
   12f1e:	2200      	movs	r2, #0
   12f20:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12f22:	4986      	ldr	r1, [pc, #536]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f24:	4b86      	ldr	r3, [pc, #536]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f26:	2231      	movs	r2, #49	; 0x31
   12f28:	0018      	movs	r0, r3
   12f2a:	4b86      	ldr	r3, [pc, #536]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f2c:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12f2e:	4b84      	ldr	r3, [pc, #528]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f30:	2231      	movs	r2, #49	; 0x31
   12f32:	2100      	movs	r1, #0
   12f34:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12f36:	4984      	ldr	r1, [pc, #528]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f38:	4b80      	ldr	r3, [pc, #512]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f3a:	2264      	movs	r2, #100	; 0x64
   12f3c:	0018      	movs	r0, r3
   12f3e:	4b83      	ldr	r3, [pc, #524]	; (1314c <vCommandConsoleTask+0x2dc>)
   12f40:	4798      	blx	r3
   12f42:	0003      	movs	r3, r0
   12f44:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12f46:	4b80      	ldr	r3, [pc, #512]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f48:	2263      	movs	r2, #99	; 0x63
   12f4a:	2100      	movs	r1, #0
   12f4c:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   12f4e:	4b7e      	ldr	r3, [pc, #504]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f50:	0018      	movs	r0, r3
   12f52:	4b70      	ldr	r3, [pc, #448]	; (13114 <vCommandConsoleTask+0x2a4>)
   12f54:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   12f56:	693b      	ldr	r3, [r7, #16]
   12f58:	2b00      	cmp	r3, #0
   12f5a:	d1ec      	bne.n	12f36 <vCommandConsoleTask+0xc6>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   12f5c:	2317      	movs	r3, #23
   12f5e:	18fb      	adds	r3, r7, r3
   12f60:	2200      	movs	r2, #0
   12f62:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12f64:	4b75      	ldr	r3, [pc, #468]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f66:	2232      	movs	r2, #50	; 0x32
   12f68:	2100      	movs	r1, #0
   12f6a:	0018      	movs	r0, r3
   12f6c:	4b78      	ldr	r3, [pc, #480]	; (13150 <vCommandConsoleTask+0x2e0>)
   12f6e:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   12f70:	4b75      	ldr	r3, [pc, #468]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f72:	2264      	movs	r2, #100	; 0x64
   12f74:	2100      	movs	r1, #0
   12f76:	0018      	movs	r0, r3
   12f78:	4b75      	ldr	r3, [pc, #468]	; (13150 <vCommandConsoleTask+0x2e0>)
   12f7a:	4798      	blx	r3
   12f7c:	e0b5      	b.n	130ea <vCommandConsoleTask+0x27a>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   12f7e:	4b6d      	ldr	r3, [pc, #436]	; (13134 <vCommandConsoleTask+0x2c4>)
   12f80:	781b      	ldrb	r3, [r3, #0]
   12f82:	2b00      	cmp	r3, #0
   12f84:	d059      	beq.n	1303a <vCommandConsoleTask+0x1ca>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12f86:	4b6c      	ldr	r3, [pc, #432]	; (13138 <vCommandConsoleTask+0x2c8>)
   12f88:	781b      	ldrb	r3, [r3, #0]
   12f8a:	2b03      	cmp	r3, #3
   12f8c:	d80c      	bhi.n	12fa8 <vCommandConsoleTask+0x138>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12f8e:	4b6a      	ldr	r3, [pc, #424]	; (13138 <vCommandConsoleTask+0x2c8>)
   12f90:	781b      	ldrb	r3, [r3, #0]
   12f92:	1c5a      	adds	r2, r3, #1
   12f94:	b2d1      	uxtb	r1, r2
   12f96:	4a68      	ldr	r2, [pc, #416]	; (13138 <vCommandConsoleTask+0x2c8>)
   12f98:	7011      	strb	r1, [r2, #0]
   12f9a:	001a      	movs	r2, r3
   12f9c:	230c      	movs	r3, #12
   12f9e:	18fb      	adds	r3, r7, r3
   12fa0:	7819      	ldrb	r1, [r3, #0]
   12fa2:	4b6c      	ldr	r3, [pc, #432]	; (13154 <vCommandConsoleTask+0x2e4>)
   12fa4:	5499      	strb	r1, [r3, r2]
   12fa6:	e005      	b.n	12fb4 <vCommandConsoleTask+0x144>
                } else {
                    isEscapeCode = false;
   12fa8:	4b62      	ldr	r3, [pc, #392]	; (13134 <vCommandConsoleTask+0x2c4>)
   12faa:	2200      	movs	r2, #0
   12fac:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12fae:	4b62      	ldr	r3, [pc, #392]	; (13138 <vCommandConsoleTask+0x2c8>)
   12fb0:	2200      	movs	r2, #0
   12fb2:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12fb4:	4b60      	ldr	r3, [pc, #384]	; (13138 <vCommandConsoleTask+0x2c8>)
   12fb6:	781b      	ldrb	r3, [r3, #0]
   12fb8:	2b01      	cmp	r3, #1
   12fba:	d999      	bls.n	12ef0 <vCommandConsoleTask+0x80>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   12fbc:	4a66      	ldr	r2, [pc, #408]	; (13158 <vCommandConsoleTask+0x2e8>)
   12fbe:	4b65      	ldr	r3, [pc, #404]	; (13154 <vCommandConsoleTask+0x2e4>)
   12fc0:	0011      	movs	r1, r2
   12fc2:	0018      	movs	r0, r3
   12fc4:	4b65      	ldr	r3, [pc, #404]	; (1315c <vCommandConsoleTask+0x2ec>)
   12fc6:	4798      	blx	r3
   12fc8:	1e03      	subs	r3, r0, #0
   12fca:	d02f      	beq.n	1302c <vCommandConsoleTask+0x1bc>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   12fcc:	4964      	ldr	r1, [pc, #400]	; (13160 <vCommandConsoleTask+0x2f0>)
   12fce:	4b5b      	ldr	r3, [pc, #364]	; (1313c <vCommandConsoleTask+0x2cc>)
   12fd0:	221b      	movs	r2, #27
   12fd2:	0018      	movs	r0, r3
   12fd4:	4b63      	ldr	r3, [pc, #396]	; (13164 <vCommandConsoleTask+0x2f4>)
   12fd6:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   12fd8:	4b58      	ldr	r3, [pc, #352]	; (1313c <vCommandConsoleTask+0x2cc>)
   12fda:	0018      	movs	r0, r3
   12fdc:	4b4d      	ldr	r3, [pc, #308]	; (13114 <vCommandConsoleTask+0x2a4>)
   12fde:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   12fe0:	2317      	movs	r3, #23
   12fe2:	18fb      	adds	r3, r7, r3
   12fe4:	2200      	movs	r2, #0
   12fe6:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12fe8:	4b54      	ldr	r3, [pc, #336]	; (1313c <vCommandConsoleTask+0x2cc>)
   12fea:	2232      	movs	r2, #50	; 0x32
   12fec:	2100      	movs	r1, #0
   12fee:	0018      	movs	r0, r3
   12ff0:	4b57      	ldr	r3, [pc, #348]	; (13150 <vCommandConsoleTask+0x2e0>)
   12ff2:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   12ff4:	4952      	ldr	r1, [pc, #328]	; (13140 <vCommandConsoleTask+0x2d0>)
   12ff6:	4b51      	ldr	r3, [pc, #324]	; (1313c <vCommandConsoleTask+0x2cc>)
   12ff8:	2231      	movs	r2, #49	; 0x31
   12ffa:	0018      	movs	r0, r3
   12ffc:	4b51      	ldr	r3, [pc, #324]	; (13144 <vCommandConsoleTask+0x2d4>)
   12ffe:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13000:	4b4e      	ldr	r3, [pc, #312]	; (1313c <vCommandConsoleTask+0x2cc>)
   13002:	0018      	movs	r0, r3
   13004:	4b58      	ldr	r3, [pc, #352]	; (13168 <vCommandConsoleTask+0x2f8>)
   13006:	4798      	blx	r3
   13008:	0003      	movs	r3, r0
   1300a:	2b30      	cmp	r3, #48	; 0x30
   1300c:	d806      	bhi.n	1301c <vCommandConsoleTask+0x1ac>
   1300e:	4b4c      	ldr	r3, [pc, #304]	; (13140 <vCommandConsoleTask+0x2d0>)
   13010:	0018      	movs	r0, r3
   13012:	4b55      	ldr	r3, [pc, #340]	; (13168 <vCommandConsoleTask+0x2f8>)
   13014:	4798      	blx	r3
   13016:	0003      	movs	r3, r0
   13018:	b2da      	uxtb	r2, r3
   1301a:	e000      	b.n	1301e <vCommandConsoleTask+0x1ae>
   1301c:	2231      	movs	r2, #49	; 0x31
   1301e:	2317      	movs	r3, #23
   13020:	18fb      	adds	r3, r7, r3
   13022:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   13024:	4b45      	ldr	r3, [pc, #276]	; (1313c <vCommandConsoleTask+0x2cc>)
   13026:	0018      	movs	r0, r3
   13028:	4b3a      	ldr	r3, [pc, #232]	; (13114 <vCommandConsoleTask+0x2a4>)
   1302a:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   1302c:	4b41      	ldr	r3, [pc, #260]	; (13134 <vCommandConsoleTask+0x2c4>)
   1302e:	2200      	movs	r2, #0
   13030:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13032:	4b41      	ldr	r3, [pc, #260]	; (13138 <vCommandConsoleTask+0x2c8>)
   13034:	2200      	movs	r2, #0
   13036:	701a      	strb	r2, [r3, #0]
   13038:	e75a      	b.n	12ef0 <vCommandConsoleTask+0x80>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   1303a:	230c      	movs	r3, #12
   1303c:	18fb      	adds	r3, r7, r3
   1303e:	781b      	ldrb	r3, [r3, #0]
   13040:	2b0d      	cmp	r3, #13
   13042:	d100      	bne.n	13046 <vCommandConsoleTask+0x1d6>
   13044:	e754      	b.n	12ef0 <vCommandConsoleTask+0x80>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13046:	230c      	movs	r3, #12
   13048:	18fb      	adds	r3, r7, r3
   1304a:	781b      	ldrb	r3, [r3, #0]
   1304c:	2b08      	cmp	r3, #8
   1304e:	d004      	beq.n	1305a <vCommandConsoleTask+0x1ea>
   13050:	230c      	movs	r3, #12
   13052:	18fb      	adds	r3, r7, r3
   13054:	781b      	ldrb	r3, [r3, #0]
   13056:	2b7f      	cmp	r3, #127	; 0x7f
   13058:	d11c      	bne.n	13094 <vCommandConsoleTask+0x224>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   1305a:	2308      	movs	r3, #8
   1305c:	18fb      	adds	r3, r7, r3
   1305e:	4a43      	ldr	r2, [pc, #268]	; (1316c <vCommandConsoleTask+0x2fc>)
   13060:	6812      	ldr	r2, [r2, #0]
   13062:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   13064:	2308      	movs	r3, #8
   13066:	18fb      	adds	r3, r7, r3
   13068:	0018      	movs	r0, r3
   1306a:	4b2a      	ldr	r3, [pc, #168]	; (13114 <vCommandConsoleTask+0x2a4>)
   1306c:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   1306e:	2317      	movs	r3, #23
   13070:	18fb      	adds	r3, r7, r3
   13072:	781b      	ldrb	r3, [r3, #0]
   13074:	2b00      	cmp	r3, #0
   13076:	d037      	beq.n	130e8 <vCommandConsoleTask+0x278>
                    cInputIndex--;
   13078:	2317      	movs	r3, #23
   1307a:	18fb      	adds	r3, r7, r3
   1307c:	781a      	ldrb	r2, [r3, #0]
   1307e:	2317      	movs	r3, #23
   13080:	18fb      	adds	r3, r7, r3
   13082:	3a01      	subs	r2, #1
   13084:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   13086:	2317      	movs	r3, #23
   13088:	18fb      	adds	r3, r7, r3
   1308a:	781b      	ldrb	r3, [r3, #0]
   1308c:	4a2b      	ldr	r2, [pc, #172]	; (1313c <vCommandConsoleTask+0x2cc>)
   1308e:	2100      	movs	r1, #0
   13090:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13092:	e029      	b.n	130e8 <vCommandConsoleTask+0x278>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   13094:	230c      	movs	r3, #12
   13096:	18fb      	adds	r3, r7, r3
   13098:	781b      	ldrb	r3, [r3, #0]
   1309a:	2b1b      	cmp	r3, #27
   1309c:	d106      	bne.n	130ac <vCommandConsoleTask+0x23c>
                isEscapeCode = true;  // Next characters will be code arguments
   1309e:	4b25      	ldr	r3, [pc, #148]	; (13134 <vCommandConsoleTask+0x2c4>)
   130a0:	2201      	movs	r2, #1
   130a2:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   130a4:	4b24      	ldr	r3, [pc, #144]	; (13138 <vCommandConsoleTask+0x2c8>)
   130a6:	2200      	movs	r2, #0
   130a8:	701a      	strb	r2, [r3, #0]
   130aa:	e721      	b.n	12ef0 <vCommandConsoleTask+0x80>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   130ac:	2317      	movs	r3, #23
   130ae:	18fb      	adds	r3, r7, r3
   130b0:	781b      	ldrb	r3, [r3, #0]
   130b2:	2b31      	cmp	r3, #49	; 0x31
   130b4:	d80e      	bhi.n	130d4 <vCommandConsoleTask+0x264>
                    pcInputString[cInputIndex] = cRxedChar[0];
   130b6:	2317      	movs	r3, #23
   130b8:	18fb      	adds	r3, r7, r3
   130ba:	781b      	ldrb	r3, [r3, #0]
   130bc:	220c      	movs	r2, #12
   130be:	18ba      	adds	r2, r7, r2
   130c0:	7811      	ldrb	r1, [r2, #0]
   130c2:	4a1e      	ldr	r2, [pc, #120]	; (1313c <vCommandConsoleTask+0x2cc>)
   130c4:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   130c6:	2317      	movs	r3, #23
   130c8:	18fb      	adds	r3, r7, r3
   130ca:	781a      	ldrb	r2, [r3, #0]
   130cc:	2317      	movs	r3, #23
   130ce:	18fb      	adds	r3, r7, r3
   130d0:	3201      	adds	r2, #1
   130d2:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   130d4:	230c      	movs	r3, #12
   130d6:	18fb      	adds	r3, r7, r3
   130d8:	2200      	movs	r2, #0
   130da:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   130dc:	230c      	movs	r3, #12
   130de:	18fb      	adds	r3, r7, r3
   130e0:	0018      	movs	r0, r3
   130e2:	4b0c      	ldr	r3, [pc, #48]	; (13114 <vCommandConsoleTask+0x2a4>)
   130e4:	4798      	blx	r3
   130e6:	e703      	b.n	12ef0 <vCommandConsoleTask+0x80>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   130e8:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   130ea:	e701      	b.n	12ef0 <vCommandConsoleTask+0x80>
   130ec:	00035b04 	.word	0x00035b04
   130f0:	00017b7d 	.word	0x00017b7d
   130f4:	00035af4 	.word	0x00035af4
   130f8:	00035b44 	.word	0x00035b44
   130fc:	00035b64 	.word	0x00035b64
   13100:	00035b14 	.word	0x00035b14
   13104:	00035b24 	.word	0x00035b24
   13108:	00035b34 	.word	0x00035b34
   1310c:	00035b54 	.word	0x00035b54
   13110:	0003574c 	.word	0x0003574c
   13114:	0001db55 	.word	0x0001db55
   13118:	0001a1f5 	.word	0x0001a1f5
   1311c:	20004370 	.word	0x20004370
   13120:	00035920 	.word	0x00035920
   13124:	0001dc41 	.word	0x0001dc41
   13128:	0001bfe1 	.word	0x0001bfe1
   1312c:	00013171 	.word	0x00013171
   13130:	00035940 	.word	0x00035940
   13134:	20000344 	.word	0x20000344
   13138:	20000345 	.word	0x20000345
   1313c:	2000037c 	.word	0x2000037c
   13140:	20000348 	.word	0x20000348
   13144:	00034757 	.word	0x00034757
   13148:	200003b0 	.word	0x200003b0
   1314c:	00017bed 	.word	0x00017bed
   13150:	0003438b 	.word	0x0003438b
   13154:	20000414 	.word	0x20000414
   13158:	00035944 	.word	0x00035944
   1315c:	0003468d 	.word	0x0003468d
   13160:	00035948 	.word	0x00035948
   13164:	00034649 	.word	0x00034649
   13168:	00034727 	.word	0x00034727
   1316c:	00035950 	.word	0x00035950

00013170 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13170:	b580      	push	{r7, lr}
   13172:	b084      	sub	sp, #16
   13174:	af00      	add	r7, sp, #0
   13176:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   13178:	687b      	ldr	r3, [r7, #4]
   1317a:	0018      	movs	r0, r3
   1317c:	4b0c      	ldr	r3, [pc, #48]	; (131b0 <FreeRTOS_read+0x40>)
   1317e:	4798      	blx	r3
   13180:	0003      	movs	r3, r0
   13182:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13184:	e00d      	b.n	131a2 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   13186:	4b0b      	ldr	r3, [pc, #44]	; (131b4 <FreeRTOS_read+0x44>)
   13188:	681a      	ldr	r2, [r3, #0]
   1318a:	2301      	movs	r3, #1
   1318c:	425b      	negs	r3, r3
   1318e:	0019      	movs	r1, r3
   13190:	0010      	movs	r0, r2
   13192:	4b09      	ldr	r3, [pc, #36]	; (131b8 <FreeRTOS_read+0x48>)
   13194:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   13196:	687b      	ldr	r3, [r7, #4]
   13198:	0018      	movs	r0, r3
   1319a:	4b05      	ldr	r3, [pc, #20]	; (131b0 <FreeRTOS_read+0x40>)
   1319c:	4798      	blx	r3
   1319e:	0003      	movs	r3, r0
   131a0:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   131a2:	68fb      	ldr	r3, [r7, #12]
   131a4:	3301      	adds	r3, #1
   131a6:	d0ee      	beq.n	13186 <FreeRTOS_read+0x16>
    }
}
   131a8:	46c0      	nop			; (mov r8, r8)
   131aa:	46bd      	mov	sp, r7
   131ac:	b004      	add	sp, #16
   131ae:	bd80      	pop	{r7, pc}
   131b0:	0001dbf1 	.word	0x0001dbf1
   131b4:	20004370 	.word	0x20004370
   131b8:	0001b1ad 	.word	0x0001b1ad

000131bc <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   131bc:	b580      	push	{r7, lr}
   131be:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   131c0:	4b0a      	ldr	r3, [pc, #40]	; (131ec <CliCharReadySemaphoreGiveFromISR+0x30>)
   131c2:	2200      	movs	r2, #0
   131c4:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   131c6:	4b0a      	ldr	r3, [pc, #40]	; (131f0 <CliCharReadySemaphoreGiveFromISR+0x34>)
   131c8:	681b      	ldr	r3, [r3, #0]
   131ca:	4a08      	ldr	r2, [pc, #32]	; (131ec <CliCharReadySemaphoreGiveFromISR+0x30>)
   131cc:	0011      	movs	r1, r2
   131ce:	0018      	movs	r0, r3
   131d0:	4b08      	ldr	r3, [pc, #32]	; (131f4 <CliCharReadySemaphoreGiveFromISR+0x38>)
   131d2:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   131d4:	4b05      	ldr	r3, [pc, #20]	; (131ec <CliCharReadySemaphoreGiveFromISR+0x30>)
   131d6:	681b      	ldr	r3, [r3, #0]
   131d8:	2b00      	cmp	r3, #0
   131da:	d003      	beq.n	131e4 <CliCharReadySemaphoreGiveFromISR+0x28>
   131dc:	4b06      	ldr	r3, [pc, #24]	; (131f8 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   131de:	2280      	movs	r2, #128	; 0x80
   131e0:	0552      	lsls	r2, r2, #21
   131e2:	601a      	str	r2, [r3, #0]
}
   131e4:	46c0      	nop			; (mov r8, r8)
   131e6:	46bd      	mov	sp, r7
   131e8:	bd80      	pop	{r7, pc}
   131ea:	46c0      	nop			; (mov r8, r8)
   131ec:	20000418 	.word	0x20000418
   131f0:	20004370 	.word	0x20004370
   131f4:	0001ab25 	.word	0x0001ab25
   131f8:	e000ed04 	.word	0xe000ed04

000131fc <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   131fc:	b5b0      	push	{r4, r5, r7, lr}
   131fe:	b08a      	sub	sp, #40	; 0x28
   13200:	af02      	add	r7, sp, #8
   13202:	60f8      	str	r0, [r7, #12]
   13204:	60b9      	str	r1, [r7, #8]
   13206:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   13208:	4b44      	ldr	r3, [pc, #272]	; (1331c <CLI_GetImuData+0x120>)
   1320a:	4798      	blx	r3
   1320c:	0003      	movs	r3, r0
   1320e:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13210:	231b      	movs	r3, #27
   13212:	18fa      	adds	r2, r7, r3
   13214:	69fb      	ldr	r3, [r7, #28]
   13216:	0011      	movs	r1, r2
   13218:	0018      	movs	r0, r3
   1321a:	4b41      	ldr	r3, [pc, #260]	; (13320 <CLI_GetImuData+0x124>)
   1321c:	4798      	blx	r3

    if (reg) {
   1321e:	231b      	movs	r3, #27
   13220:	18fb      	adds	r3, r7, r3
   13222:	781b      	ldrb	r3, [r3, #0]
   13224:	2b00      	cmp	r3, #0
   13226:	d05f      	beq.n	132e8 <CLI_GetImuData+0xec>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   13228:	4b3e      	ldr	r3, [pc, #248]	; (13324 <CLI_GetImuData+0x128>)
   1322a:	2206      	movs	r2, #6
   1322c:	2100      	movs	r1, #0
   1322e:	0018      	movs	r0, r3
   13230:	4b3d      	ldr	r3, [pc, #244]	; (13328 <CLI_GetImuData+0x12c>)
   13232:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13234:	4a3b      	ldr	r2, [pc, #236]	; (13324 <CLI_GetImuData+0x128>)
   13236:	69fb      	ldr	r3, [r7, #28]
   13238:	0011      	movs	r1, r2
   1323a:	0018      	movs	r0, r3
   1323c:	4b3b      	ldr	r3, [pc, #236]	; (1332c <CLI_GetImuData+0x130>)
   1323e:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13240:	4b38      	ldr	r3, [pc, #224]	; (13324 <CLI_GetImuData+0x128>)
   13242:	2200      	movs	r2, #0
   13244:	5e9b      	ldrsh	r3, [r3, r2]
   13246:	0018      	movs	r0, r3
   13248:	4b39      	ldr	r3, [pc, #228]	; (13330 <CLI_GetImuData+0x134>)
   1324a:	4798      	blx	r3
   1324c:	1c02      	adds	r2, r0, #0
   1324e:	4b39      	ldr	r3, [pc, #228]	; (13334 <CLI_GetImuData+0x138>)
   13250:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13252:	4b34      	ldr	r3, [pc, #208]	; (13324 <CLI_GetImuData+0x128>)
   13254:	2202      	movs	r2, #2
   13256:	5e9b      	ldrsh	r3, [r3, r2]
   13258:	0018      	movs	r0, r3
   1325a:	4b35      	ldr	r3, [pc, #212]	; (13330 <CLI_GetImuData+0x134>)
   1325c:	4798      	blx	r3
   1325e:	1c02      	adds	r2, r0, #0
   13260:	4b34      	ldr	r3, [pc, #208]	; (13334 <CLI_GetImuData+0x138>)
   13262:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13264:	4b2f      	ldr	r3, [pc, #188]	; (13324 <CLI_GetImuData+0x128>)
   13266:	2204      	movs	r2, #4
   13268:	5e9b      	ldrsh	r3, [r3, r2]
   1326a:	0018      	movs	r0, r3
   1326c:	4b30      	ldr	r3, [pc, #192]	; (13330 <CLI_GetImuData+0x134>)
   1326e:	4798      	blx	r3
   13270:	1c02      	adds	r2, r0, #0
   13272:	4b30      	ldr	r3, [pc, #192]	; (13334 <CLI_GetImuData+0x138>)
   13274:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   13276:	4b2f      	ldr	r3, [pc, #188]	; (13334 <CLI_GetImuData+0x138>)
   13278:	681a      	ldr	r2, [r3, #0]
   1327a:	4b2f      	ldr	r3, [pc, #188]	; (13338 <CLI_GetImuData+0x13c>)
   1327c:	1c10      	adds	r0, r2, #0
   1327e:	4798      	blx	r3
   13280:	0005      	movs	r5, r0
   13282:	4b2c      	ldr	r3, [pc, #176]	; (13334 <CLI_GetImuData+0x138>)
   13284:	685a      	ldr	r2, [r3, #4]
   13286:	4b2c      	ldr	r3, [pc, #176]	; (13338 <CLI_GetImuData+0x13c>)
   13288:	1c10      	adds	r0, r2, #0
   1328a:	4798      	blx	r3
   1328c:	0004      	movs	r4, r0
   1328e:	4b29      	ldr	r3, [pc, #164]	; (13334 <CLI_GetImuData+0x138>)
   13290:	689a      	ldr	r2, [r3, #8]
   13292:	4b29      	ldr	r3, [pc, #164]	; (13338 <CLI_GetImuData+0x13c>)
   13294:	1c10      	adds	r0, r2, #0
   13296:	4798      	blx	r3
   13298:	0003      	movs	r3, r0
   1329a:	4a28      	ldr	r2, [pc, #160]	; (1333c <CLI_GetImuData+0x140>)
   1329c:	68b9      	ldr	r1, [r7, #8]
   1329e:	68f8      	ldr	r0, [r7, #12]
   132a0:	9301      	str	r3, [sp, #4]
   132a2:	9400      	str	r4, [sp, #0]
   132a4:	002b      	movs	r3, r5
   132a6:	4c26      	ldr	r4, [pc, #152]	; (13340 <CLI_GetImuData+0x144>)
   132a8:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   132aa:	4b22      	ldr	r3, [pc, #136]	; (13334 <CLI_GetImuData+0x138>)
   132ac:	681a      	ldr	r2, [r3, #0]
   132ae:	4b22      	ldr	r3, [pc, #136]	; (13338 <CLI_GetImuData+0x13c>)
   132b0:	1c10      	adds	r0, r2, #0
   132b2:	4798      	blx	r3
   132b4:	0003      	movs	r3, r0
   132b6:	b21a      	sxth	r2, r3
   132b8:	2314      	movs	r3, #20
   132ba:	18fb      	adds	r3, r7, r3
   132bc:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   132be:	4b1d      	ldr	r3, [pc, #116]	; (13334 <CLI_GetImuData+0x138>)
   132c0:	685a      	ldr	r2, [r3, #4]
   132c2:	4b1d      	ldr	r3, [pc, #116]	; (13338 <CLI_GetImuData+0x13c>)
   132c4:	1c10      	adds	r0, r2, #0
   132c6:	4798      	blx	r3
   132c8:	0003      	movs	r3, r0
   132ca:	b21a      	sxth	r2, r3
   132cc:	2314      	movs	r3, #20
   132ce:	18fb      	adds	r3, r7, r3
   132d0:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   132d2:	4b18      	ldr	r3, [pc, #96]	; (13334 <CLI_GetImuData+0x138>)
   132d4:	689a      	ldr	r2, [r3, #8]
   132d6:	4b18      	ldr	r3, [pc, #96]	; (13338 <CLI_GetImuData+0x13c>)
   132d8:	1c10      	adds	r0, r2, #0
   132da:	4798      	blx	r3
   132dc:	0003      	movs	r3, r0
   132de:	b21a      	sxth	r2, r3
   132e0:	2314      	movs	r3, #20
   132e2:	18fb      	adds	r3, r7, r3
   132e4:	809a      	strh	r2, [r3, #4]
   132e6:	e014      	b.n	13312 <CLI_GetImuData+0x116>
		//WifiAddImuDataToQueue(&imuPacket);
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   132e8:	4a16      	ldr	r2, [pc, #88]	; (13344 <CLI_GetImuData+0x148>)
   132ea:	68b9      	ldr	r1, [r7, #8]
   132ec:	68fb      	ldr	r3, [r7, #12]
   132ee:	0018      	movs	r0, r3
   132f0:	4b13      	ldr	r3, [pc, #76]	; (13340 <CLI_GetImuData+0x144>)
   132f2:	4798      	blx	r3
		imuPacket.xmg = -1;
   132f4:	2314      	movs	r3, #20
   132f6:	18fb      	adds	r3, r7, r3
   132f8:	2201      	movs	r2, #1
   132fa:	4252      	negs	r2, r2
   132fc:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   132fe:	2314      	movs	r3, #20
   13300:	18fb      	adds	r3, r7, r3
   13302:	2202      	movs	r2, #2
   13304:	4252      	negs	r2, r2
   13306:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   13308:	2314      	movs	r3, #20
   1330a:	18fb      	adds	r3, r7, r3
   1330c:	2203      	movs	r2, #3
   1330e:	4252      	negs	r2, r2
   13310:	809a      	strh	r2, [r3, #4]
		//WifiAddImuDataToQueue(&imuPacket);
    }
    return pdFALSE;
   13312:	2300      	movs	r3, #0
}
   13314:	0018      	movs	r0, r3
   13316:	46bd      	mov	sp, r7
   13318:	b008      	add	sp, #32
   1331a:	bdb0      	pop	{r4, r5, r7, pc}
   1331c:	00014f85 	.word	0x00014f85
   13320:	00014981 	.word	0x00014981
   13324:	2000041c 	.word	0x2000041c
   13328:	0003438b 	.word	0x0003438b
   1332c:	000149bd 	.word	0x000149bd
   13330:	00014211 	.word	0x00014211
   13334:	20000424 	.word	0x20000424
   13338:	00032931 	.word	0x00032931
   1333c:	00035954 	.word	0x00035954
   13340:	000345e5 	.word	0x000345e5
   13344:	00035978 	.word	0x00035978

00013348 <CLI_GetSHTC>:


BaseType_t CLI_GetSHTC(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   13348:	b590      	push	{r4, r7, lr}
   1334a:	b087      	sub	sp, #28
   1334c:	af02      	add	r7, sp, #8
   1334e:	60f8      	str	r0, [r7, #12]
   13350:	60b9      	str	r1, [r7, #8]
   13352:	607a      	str	r2, [r7, #4]
	static int16_t ht[2];
	if( !shtc_get(ht) ){
   13354:	4b12      	ldr	r3, [pc, #72]	; (133a0 <CLI_GetSHTC+0x58>)
   13356:	0018      	movs	r0, r3
   13358:	4b12      	ldr	r3, [pc, #72]	; (133a4 <CLI_GetSHTC+0x5c>)
   1335a:	4798      	blx	r3
   1335c:	0003      	movs	r3, r0
   1335e:	001a      	movs	r2, r3
   13360:	2301      	movs	r3, #1
   13362:	4053      	eors	r3, r2
   13364:	b2db      	uxtb	r3, r3
   13366:	2b00      	cmp	r3, #0
   13368:	d007      	beq.n	1337a <CLI_GetSHTC+0x32>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "SHTC error!\r\n");
   1336a:	4a0f      	ldr	r2, [pc, #60]	; (133a8 <CLI_GetSHTC+0x60>)
   1336c:	68b9      	ldr	r1, [r7, #8]
   1336e:	68fb      	ldr	r3, [r7, #12]
   13370:	0018      	movs	r0, r3
   13372:	4b0e      	ldr	r3, [pc, #56]	; (133ac <CLI_GetSHTC+0x64>)
   13374:	4798      	blx	r3
		return pdFALSE;
   13376:	2300      	movs	r3, #0
   13378:	e00e      	b.n	13398 <CLI_GetSHTC+0x50>
	}
	
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "humidity = %d , temp = %d \r\n", (int)ht[0], (int)ht[1]);
   1337a:	4b09      	ldr	r3, [pc, #36]	; (133a0 <CLI_GetSHTC+0x58>)
   1337c:	2200      	movs	r2, #0
   1337e:	5e9b      	ldrsh	r3, [r3, r2]
   13380:	001c      	movs	r4, r3
   13382:	4b07      	ldr	r3, [pc, #28]	; (133a0 <CLI_GetSHTC+0x58>)
   13384:	2202      	movs	r2, #2
   13386:	5e9b      	ldrsh	r3, [r3, r2]
   13388:	4a09      	ldr	r2, [pc, #36]	; (133b0 <CLI_GetSHTC+0x68>)
   1338a:	68b9      	ldr	r1, [r7, #8]
   1338c:	68f8      	ldr	r0, [r7, #12]
   1338e:	9300      	str	r3, [sp, #0]
   13390:	0023      	movs	r3, r4
   13392:	4c06      	ldr	r4, [pc, #24]	; (133ac <CLI_GetSHTC+0x64>)
   13394:	47a0      	blx	r4
	return pdFALSE;
   13396:	2300      	movs	r3, #0
}
   13398:	0018      	movs	r0, r3
   1339a:	46bd      	mov	sp, r7
   1339c:	b005      	add	sp, #20
   1339e:	bd90      	pop	{r4, r7, pc}
   133a0:	20000430 	.word	0x20000430
   133a4:	00015601 	.word	0x00015601
   133a8:	000359a0 	.word	0x000359a0
   133ac:	000345e5 	.word	0x000345e5
   133b0:	000359b0 	.word	0x000359b0

000133b4 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133b4:	b590      	push	{r4, r7, lr}
   133b6:	b087      	sub	sp, #28
   133b8:	af00      	add	r7, sp, #0
   133ba:	60f8      	str	r0, [r7, #12]
   133bc:	60b9      	str	r1, [r7, #8]
   133be:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   133c0:	2317      	movs	r3, #23
   133c2:	18fb      	adds	r3, r7, r3
   133c4:	221b      	movs	r2, #27
   133c6:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   133c8:	2317      	movs	r3, #23
   133ca:	18fb      	adds	r3, r7, r3
   133cc:	781b      	ldrb	r3, [r3, #0]
   133ce:	4a08      	ldr	r2, [pc, #32]	; (133f0 <xCliClearTerminalScreen+0x3c>)
   133d0:	4808      	ldr	r0, [pc, #32]	; (133f4 <xCliClearTerminalScreen+0x40>)
   133d2:	210f      	movs	r1, #15
   133d4:	4c08      	ldr	r4, [pc, #32]	; (133f8 <xCliClearTerminalScreen+0x44>)
   133d6:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   133d8:	4a06      	ldr	r2, [pc, #24]	; (133f4 <xCliClearTerminalScreen+0x40>)
   133da:	68b9      	ldr	r1, [r7, #8]
   133dc:	68fb      	ldr	r3, [r7, #12]
   133de:	0018      	movs	r0, r3
   133e0:	4b05      	ldr	r3, [pc, #20]	; (133f8 <xCliClearTerminalScreen+0x44>)
   133e2:	4798      	blx	r3
    return pdFALSE;
   133e4:	2300      	movs	r3, #0
}
   133e6:	0018      	movs	r0, r3
   133e8:	46bd      	mov	sp, r7
   133ea:	b007      	add	sp, #28
   133ec:	bd90      	pop	{r4, r7, pc}
   133ee:	46c0      	nop			; (mov r8, r8)
   133f0:	000359d0 	.word	0x000359d0
   133f4:	20000334 	.word	0x20000334
   133f8:	000345e5 	.word	0x000345e5

000133fc <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133fc:	b580      	push	{r7, lr}
   133fe:	b084      	sub	sp, #16
   13400:	af00      	add	r7, sp, #0
   13402:	60f8      	str	r0, [r7, #12]
   13404:	60b9      	str	r1, [r7, #8]
   13406:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   13408:	2002      	movs	r0, #2
   1340a:	4b03      	ldr	r3, [pc, #12]	; (13418 <CLI_OTAU+0x1c>)
   1340c:	4798      	blx	r3

    return pdFALSE;
   1340e:	2300      	movs	r3, #0
}
   13410:	0018      	movs	r0, r3
   13412:	46bd      	mov	sp, r7
   13414:	b004      	add	sp, #16
   13416:	bd80      	pop	{r7, pc}
   13418:	000171e5 	.word	0x000171e5

0001341c <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1341c:	b580      	push	{r7, lr}
   1341e:	b084      	sub	sp, #16
   13420:	af00      	add	r7, sp, #0
   13422:	60f8      	str	r0, [r7, #12]
   13424:	60b9      	str	r1, [r7, #8]
   13426:	607a      	str	r2, [r7, #4]
    system_reset();
   13428:	4b03      	ldr	r3, [pc, #12]	; (13438 <CLI_ResetDevice+0x1c>)
   1342a:	4798      	blx	r3
    return pdFALSE;
   1342c:	2300      	movs	r3, #0
}
   1342e:	0018      	movs	r0, r3
   13430:	46bd      	mov	sp, r7
   13432:	b004      	add	sp, #16
   13434:	bd80      	pop	{r7, pc}
   13436:	46c0      	nop			; (mov r8, r8)
   13438:	00012e5d 	.word	0x00012e5d

0001343c <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1343c:	b590      	push	{r4, r7, lr}
   1343e:	b091      	sub	sp, #68	; 0x44
   13440:	af00      	add	r7, sp, #0
   13442:	60f8      	str	r0, [r7, #12]
   13444:	60b9      	str	r1, [r7, #8]
   13446:	607a      	str	r2, [r7, #4]
    int8_t *pcParameter1, *pcParameter2, *pcParameter3, *pcParameter4;
    int R,G,B, Keynum;
    BaseType_t xParameter1StringLength, xParameter2StringLength, xParameter3StringLength, xParameter4StringLength;

    pcParameter1 = FreeRTOS_CLIGetParameter( pcCommandString,
   13448:	231c      	movs	r3, #28
   1344a:	18fa      	adds	r2, r7, r3
   1344c:	687b      	ldr	r3, [r7, #4]
   1344e:	2101      	movs	r1, #1
   13450:	0018      	movs	r0, r3
   13452:	4b55      	ldr	r3, [pc, #340]	; (135a8 <CLI_NeotrellisSetLed+0x16c>)
   13454:	4798      	blx	r3
   13456:	0003      	movs	r3, r0
   13458:	63fb      	str	r3, [r7, #60]	; 0x3c
    1,
    &xParameter1StringLength);

    pcParameter2 = FreeRTOS_CLIGetParameter( pcCommandString,
   1345a:	2318      	movs	r3, #24
   1345c:	18fa      	adds	r2, r7, r3
   1345e:	687b      	ldr	r3, [r7, #4]
   13460:	2102      	movs	r1, #2
   13462:	0018      	movs	r0, r3
   13464:	4b50      	ldr	r3, [pc, #320]	; (135a8 <CLI_NeotrellisSetLed+0x16c>)
   13466:	4798      	blx	r3
   13468:	0003      	movs	r3, r0
   1346a:	63bb      	str	r3, [r7, #56]	; 0x38
    2,
    &xParameter2StringLength );
    
    pcParameter3 = FreeRTOS_CLIGetParameter( pcCommandString,
   1346c:	2314      	movs	r3, #20
   1346e:	18fa      	adds	r2, r7, r3
   13470:	687b      	ldr	r3, [r7, #4]
   13472:	2103      	movs	r1, #3
   13474:	0018      	movs	r0, r3
   13476:	4b4c      	ldr	r3, [pc, #304]	; (135a8 <CLI_NeotrellisSetLed+0x16c>)
   13478:	4798      	blx	r3
   1347a:	0003      	movs	r3, r0
   1347c:	637b      	str	r3, [r7, #52]	; 0x34
    3,
    &xParameter3StringLength );
    
    pcParameter4 = FreeRTOS_CLIGetParameter( pcCommandString,
   1347e:	2310      	movs	r3, #16
   13480:	18fa      	adds	r2, r7, r3
   13482:	687b      	ldr	r3, [r7, #4]
   13484:	2104      	movs	r1, #4
   13486:	0018      	movs	r0, r3
   13488:	4b47      	ldr	r3, [pc, #284]	; (135a8 <CLI_NeotrellisSetLed+0x16c>)
   1348a:	4798      	blx	r3
   1348c:	0003      	movs	r3, r0
   1348e:	633b      	str	r3, [r7, #48]	; 0x30
    4,
    &xParameter4StringLength );
    
    pcParameter1[ xParameter1StringLength ] = 0x00;
   13490:	69fb      	ldr	r3, [r7, #28]
   13492:	001a      	movs	r2, r3
   13494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13496:	189b      	adds	r3, r3, r2
   13498:	2200      	movs	r2, #0
   1349a:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
   1349c:	69bb      	ldr	r3, [r7, #24]
   1349e:	001a      	movs	r2, r3
   134a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   134a2:	189b      	adds	r3, r3, r2
   134a4:	2200      	movs	r2, #0
   134a6:	701a      	strb	r2, [r3, #0]
    pcParameter3[ xParameter3StringLength ] = 0x00;
   134a8:	697b      	ldr	r3, [r7, #20]
   134aa:	001a      	movs	r2, r3
   134ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   134ae:	189b      	adds	r3, r3, r2
   134b0:	2200      	movs	r2, #0
   134b2:	701a      	strb	r2, [r3, #0]
    pcParameter4[ xParameter4StringLength ] = 0x00;
   134b4:	693b      	ldr	r3, [r7, #16]
   134b6:	001a      	movs	r2, r3
   134b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   134ba:	189b      	adds	r3, r3, r2
   134bc:	2200      	movs	r2, #0
   134be:	701a      	strb	r2, [r3, #0]
    
    Keynum = atoi(pcParameter1);
   134c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   134c2:	0018      	movs	r0, r3
   134c4:	4b39      	ldr	r3, [pc, #228]	; (135ac <CLI_NeotrellisSetLed+0x170>)
   134c6:	4798      	blx	r3
   134c8:	0003      	movs	r3, r0
   134ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    R = atoi(pcParameter2);
   134cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   134ce:	0018      	movs	r0, r3
   134d0:	4b36      	ldr	r3, [pc, #216]	; (135ac <CLI_NeotrellisSetLed+0x170>)
   134d2:	4798      	blx	r3
   134d4:	0003      	movs	r3, r0
   134d6:	62bb      	str	r3, [r7, #40]	; 0x28
    G = atoi(pcParameter3);
   134d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   134da:	0018      	movs	r0, r3
   134dc:	4b33      	ldr	r3, [pc, #204]	; (135ac <CLI_NeotrellisSetLed+0x170>)
   134de:	4798      	blx	r3
   134e0:	0003      	movs	r3, r0
   134e2:	627b      	str	r3, [r7, #36]	; 0x24
    B = atoi(pcParameter4);
   134e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   134e6:	0018      	movs	r0, r3
   134e8:	4b30      	ldr	r3, [pc, #192]	; (135ac <CLI_NeotrellisSetLed+0x170>)
   134ea:	4798      	blx	r3
   134ec:	0003      	movs	r3, r0
   134ee:	623b      	str	r3, [r7, #32]
    
    //sanitize
    if(Keynum < 0 || Keynum > 15){
   134f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   134f2:	2b00      	cmp	r3, #0
   134f4:	db02      	blt.n	134fc <CLI_NeotrellisSetLed+0xc0>
   134f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   134f8:	2b0f      	cmp	r3, #15
   134fa:	dd07      	ble.n	1350c <CLI_NeotrellisSetLed+0xd0>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Keynum must be between 0 to 15\r\n");
   134fc:	4a2c      	ldr	r2, [pc, #176]	; (135b0 <CLI_NeotrellisSetLed+0x174>)
   134fe:	68b9      	ldr	r1, [r7, #8]
   13500:	68fb      	ldr	r3, [r7, #12]
   13502:	0018      	movs	r0, r3
   13504:	4b2b      	ldr	r3, [pc, #172]	; (135b4 <CLI_NeotrellisSetLed+0x178>)
   13506:	4798      	blx	r3
	    return pdFALSE;
   13508:	2300      	movs	r3, #0
   1350a:	e048      	b.n	1359e <CLI_NeotrellisSetLed+0x162>
    }
    
    if (R < 0 || R > 255){
   1350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1350e:	2b00      	cmp	r3, #0
   13510:	db02      	blt.n	13518 <CLI_NeotrellisSetLed+0xdc>
   13512:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13514:	2bff      	cmp	r3, #255	; 0xff
   13516:	dd07      	ble.n	13528 <CLI_NeotrellisSetLed+0xec>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Red must be between 0 and 255\r\n");
   13518:	4a27      	ldr	r2, [pc, #156]	; (135b8 <CLI_NeotrellisSetLed+0x17c>)
   1351a:	68b9      	ldr	r1, [r7, #8]
   1351c:	68fb      	ldr	r3, [r7, #12]
   1351e:	0018      	movs	r0, r3
   13520:	4b24      	ldr	r3, [pc, #144]	; (135b4 <CLI_NeotrellisSetLed+0x178>)
   13522:	4798      	blx	r3
	    return pdFALSE;
   13524:	2300      	movs	r3, #0
   13526:	e03a      	b.n	1359e <CLI_NeotrellisSetLed+0x162>
    }
    
    if (G < 0 || G > 255){
   13528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1352a:	2b00      	cmp	r3, #0
   1352c:	db02      	blt.n	13534 <CLI_NeotrellisSetLed+0xf8>
   1352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13530:	2bff      	cmp	r3, #255	; 0xff
   13532:	dd07      	ble.n	13544 <CLI_NeotrellisSetLed+0x108>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Green must be between 0 and 255\r\n");
   13534:	4a21      	ldr	r2, [pc, #132]	; (135bc <CLI_NeotrellisSetLed+0x180>)
   13536:	68b9      	ldr	r1, [r7, #8]
   13538:	68fb      	ldr	r3, [r7, #12]
   1353a:	0018      	movs	r0, r3
   1353c:	4b1d      	ldr	r3, [pc, #116]	; (135b4 <CLI_NeotrellisSetLed+0x178>)
   1353e:	4798      	blx	r3
	    return pdFALSE;
   13540:	2300      	movs	r3, #0
   13542:	e02c      	b.n	1359e <CLI_NeotrellisSetLed+0x162>
    }
    
    if (B < 0 || B > 255){
   13544:	6a3b      	ldr	r3, [r7, #32]
   13546:	2b00      	cmp	r3, #0
   13548:	db02      	blt.n	13550 <CLI_NeotrellisSetLed+0x114>
   1354a:	6a3b      	ldr	r3, [r7, #32]
   1354c:	2bff      	cmp	r3, #255	; 0xff
   1354e:	dd07      	ble.n	13560 <CLI_NeotrellisSetLed+0x124>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Blue must be between 0 and 255\r\n");
   13550:	4a1b      	ldr	r2, [pc, #108]	; (135c0 <CLI_NeotrellisSetLed+0x184>)
   13552:	68b9      	ldr	r1, [r7, #8]
   13554:	68fb      	ldr	r3, [r7, #12]
   13556:	0018      	movs	r0, r3
   13558:	4b16      	ldr	r3, [pc, #88]	; (135b4 <CLI_NeotrellisSetLed+0x178>)
   1355a:	4798      	blx	r3
	    return pdFALSE;
   1355c:	2300      	movs	r3, #0
   1355e:	e01e      	b.n	1359e <CLI_NeotrellisSetLed+0x162>
    }
    
    if (SeesawSetLed(Keynum, R, G, B)){
   13560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13562:	b2d8      	uxtb	r0, r3
   13564:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13566:	b2d9      	uxtb	r1, r3
   13568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1356a:	b2da      	uxtb	r2, r3
   1356c:	6a3b      	ldr	r3, [r7, #32]
   1356e:	b2db      	uxtb	r3, r3
   13570:	4c14      	ldr	r4, [pc, #80]	; (135c4 <CLI_NeotrellisSetLed+0x188>)
   13572:	47a0      	blx	r4
   13574:	1e03      	subs	r3, r0, #0
   13576:	d007      	beq.n	13588 <CLI_NeotrellisSetLed+0x14c>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "unexpected I2C error\r\n");
   13578:	4a13      	ldr	r2, [pc, #76]	; (135c8 <CLI_NeotrellisSetLed+0x18c>)
   1357a:	68b9      	ldr	r1, [r7, #8]
   1357c:	68fb      	ldr	r3, [r7, #12]
   1357e:	0018      	movs	r0, r3
   13580:	4b0c      	ldr	r3, [pc, #48]	; (135b4 <CLI_NeotrellisSetLed+0x178>)
   13582:	4798      	blx	r3
	    return pdFALSE;
   13584:	2300      	movs	r3, #0
   13586:	e00a      	b.n	1359e <CLI_NeotrellisSetLed+0x162>
    }
    
    if(SeesawOrderLedUpdate()){
   13588:	4b10      	ldr	r3, [pc, #64]	; (135cc <CLI_NeotrellisSetLed+0x190>)
   1358a:	4798      	blx	r3
   1358c:	1e03      	subs	r3, r0, #0
   1358e:	d005      	beq.n	1359c <CLI_NeotrellisSetLed+0x160>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "unexpected I2C error\r\n");
   13590:	4a0d      	ldr	r2, [pc, #52]	; (135c8 <CLI_NeotrellisSetLed+0x18c>)
   13592:	68b9      	ldr	r1, [r7, #8]
   13594:	68fb      	ldr	r3, [r7, #12]
   13596:	0018      	movs	r0, r3
   13598:	4b06      	ldr	r3, [pc, #24]	; (135b4 <CLI_NeotrellisSetLed+0x178>)
   1359a:	4798      	blx	r3
    }

    return pdFALSE;
   1359c:	2300      	movs	r3, #0
}
   1359e:	0018      	movs	r0, r3
   135a0:	46bd      	mov	sp, r7
   135a2:	b011      	add	sp, #68	; 0x44
   135a4:	bd90      	pop	{r4, r7, pc}
   135a6:	46c0      	nop			; (mov r8, r8)
   135a8:	00017d15 	.word	0x00017d15
   135ac:	000342d9 	.word	0x000342d9
   135b0:	000359d8 	.word	0x000359d8
   135b4:	000345e5 	.word	0x000345e5
   135b8:	000359fc 	.word	0x000359fc
   135bc:	00035a1c 	.word	0x00035a1c
   135c0:	00035a40 	.word	0x00035a40
   135c4:	00015339 	.word	0x00015339
   135c8:	00035a64 	.word	0x00035a64
   135cc:	00015401 	.word	0x00015401

000135d0 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   135d0:	b590      	push	{r4, r7, lr}
   135d2:	b099      	sub	sp, #100	; 0x64
   135d4:	af00      	add	r7, sp, #0
   135d6:	60f8      	str	r0, [r7, #12]
   135d8:	60b9      	str	r1, [r7, #8]
   135da:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   135dc:	235f      	movs	r3, #95	; 0x5f
   135de:	18fc      	adds	r4, r7, r3
   135e0:	4b36      	ldr	r3, [pc, #216]	; (136bc <CLI_NeotrellProcessButtonBuffer+0xec>)
   135e2:	4798      	blx	r3
   135e4:	0003      	movs	r3, r0
   135e6:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   135e8:	235f      	movs	r3, #95	; 0x5f
   135ea:	18fb      	adds	r3, r7, r3
   135ec:	781b      	ldrb	r3, [r3, #0]
   135ee:	2b00      	cmp	r3, #0
   135f0:	d05d      	beq.n	136ae <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   135f2:	2310      	movs	r3, #16
   135f4:	18fb      	adds	r3, r7, r3
   135f6:	2101      	movs	r1, #1
   135f8:	0018      	movs	r0, r3
   135fa:	4b31      	ldr	r3, [pc, #196]	; (136c0 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   135fc:	4798      	blx	r3
   135fe:	0003      	movs	r3, r0
   13600:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   13602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   13604:	2b00      	cmp	r3, #0
   13606:	d150      	bne.n	136aa <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   13608:	2310      	movs	r3, #16
   1360a:	18fb      	adds	r3, r7, r3
   1360c:	781a      	ldrb	r2, [r3, #0]
   1360e:	2357      	movs	r3, #87	; 0x57
   13610:	18fb      	adds	r3, r7, r3
   13612:	2103      	movs	r1, #3
   13614:	400a      	ands	r2, r1
   13616:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   13618:	2310      	movs	r3, #16
   1361a:	18fb      	adds	r3, r7, r3
   1361c:	781a      	ldrb	r2, [r3, #0]
   1361e:	2356      	movs	r3, #86	; 0x56
   13620:	18fb      	adds	r3, r7, r3
   13622:	0892      	lsrs	r2, r2, #2
   13624:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   13626:	2356      	movs	r3, #86	; 0x56
   13628:	18fb      	adds	r3, r7, r3
   1362a:	781b      	ldrb	r3, [r3, #0]
   1362c:	08db      	lsrs	r3, r3, #3
   1362e:	b2db      	uxtb	r3, r3
   13630:	009a      	lsls	r2, r3, #2
   13632:	2356      	movs	r3, #86	; 0x56
   13634:	18fb      	adds	r3, r7, r3
   13636:	781b      	ldrb	r3, [r3, #0]
   13638:	2107      	movs	r1, #7
   1363a:	400b      	ands	r3, r1
   1363c:	18d3      	adds	r3, r2, r3
   1363e:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   13640:	2357      	movs	r3, #87	; 0x57
   13642:	18fb      	adds	r3, r7, r3
   13644:	781b      	ldrb	r3, [r3, #0]
   13646:	2b02      	cmp	r3, #2
   13648:	d115      	bne.n	13676 <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   1364a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1364c:	2b00      	cmp	r3, #0
   1364e:	da00      	bge.n	13652 <CLI_NeotrellProcessButtonBuffer+0x82>
   13650:	3307      	adds	r3, #7
   13652:	10db      	asrs	r3, r3, #3
   13654:	009a      	lsls	r2, r3, #2
   13656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13658:	491a      	ldr	r1, [pc, #104]	; (136c4 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   1365a:	400b      	ands	r3, r1
   1365c:	d504      	bpl.n	13668 <CLI_NeotrellProcessButtonBuffer+0x98>
   1365e:	3b01      	subs	r3, #1
   13660:	2108      	movs	r1, #8
   13662:	4249      	negs	r1, r1
   13664:	430b      	orrs	r3, r1
   13666:	3301      	adds	r3, #1
   13668:	18d3      	adds	r3, r2, r3
   1366a:	4a17      	ldr	r2, [pc, #92]	; (136c8 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   1366c:	68b9      	ldr	r1, [r7, #8]
   1366e:	68f8      	ldr	r0, [r7, #12]
   13670:	4c16      	ldr	r4, [pc, #88]	; (136cc <CLI_NeotrellProcessButtonBuffer+0xfc>)
   13672:	47a0      	blx	r4
   13674:	e019      	b.n	136aa <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   13676:	2357      	movs	r3, #87	; 0x57
   13678:	18fb      	adds	r3, r7, r3
   1367a:	781b      	ldrb	r3, [r3, #0]
   1367c:	2b03      	cmp	r3, #3
   1367e:	d114      	bne.n	136aa <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   13680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   13682:	2b00      	cmp	r3, #0
   13684:	da00      	bge.n	13688 <CLI_NeotrellProcessButtonBuffer+0xb8>
   13686:	3307      	adds	r3, #7
   13688:	10db      	asrs	r3, r3, #3
   1368a:	009a      	lsls	r2, r3, #2
   1368c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1368e:	490d      	ldr	r1, [pc, #52]	; (136c4 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   13690:	400b      	ands	r3, r1
   13692:	d504      	bpl.n	1369e <CLI_NeotrellProcessButtonBuffer+0xce>
   13694:	3b01      	subs	r3, #1
   13696:	2108      	movs	r1, #8
   13698:	4249      	negs	r1, r1
   1369a:	430b      	orrs	r3, r1
   1369c:	3301      	adds	r3, #1
   1369e:	18d3      	adds	r3, r2, r3
   136a0:	4a0b      	ldr	r2, [pc, #44]	; (136d0 <CLI_NeotrellProcessButtonBuffer+0x100>)
   136a2:	68b9      	ldr	r1, [r7, #8]
   136a4:	68f8      	ldr	r0, [r7, #12]
   136a6:	4c09      	ldr	r4, [pc, #36]	; (136cc <CLI_NeotrellProcessButtonBuffer+0xfc>)
   136a8:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   136aa:	2301      	movs	r3, #1
   136ac:	e002      	b.n	136b4 <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   136ae:	2300      	movs	r3, #0
   136b0:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   136b2:	2300      	movs	r3, #0
    }
}
   136b4:	0018      	movs	r0, r3
   136b6:	46bd      	mov	sp, r7
   136b8:	b019      	add	sp, #100	; 0x64
   136ba:	bd90      	pop	{r4, r7, pc}
   136bc:	00015185 	.word	0x00015185
   136c0:	000151ed 	.word	0x000151ed
   136c4:	80000007 	.word	0x80000007
   136c8:	00035a7c 	.word	0x00035a7c
   136cc:	000345e5 	.word	0x000345e5
   136d0:	00035a98 	.word	0x00035a98

000136d4 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   136d4:	b590      	push	{r4, r7, lr}
   136d6:	b08f      	sub	sp, #60	; 0x3c
   136d8:	af00      	add	r7, sp, #0
   136da:	60f8      	str	r0, [r7, #12]
   136dc:	60b9      	str	r1, [r7, #8]
   136de:	607a      	str	r2, [r7, #4]

  I2C_Data i2cOled; 
        uint8_t address;
  //Send 0 command byte
  uint8_t dataOut[2] = {0,0};
   136e0:	2318      	movs	r3, #24
   136e2:	18fb      	adds	r3, r7, r3
   136e4:	2200      	movs	r2, #0
   136e6:	701a      	strb	r2, [r3, #0]
   136e8:	2318      	movs	r3, #24
   136ea:	18fb      	adds	r3, r7, r3
   136ec:	2200      	movs	r2, #0
   136ee:	705a      	strb	r2, [r3, #1]
  uint8_t dataIn[2];
  dataOut[0] = 0;
   136f0:	2318      	movs	r3, #24
   136f2:	18fb      	adds	r3, r7, r3
   136f4:	2200      	movs	r2, #0
   136f6:	701a      	strb	r2, [r3, #0]
  dataOut[1] = 0;
   136f8:	2318      	movs	r3, #24
   136fa:	18fb      	adds	r3, r7, r3
   136fc:	2200      	movs	r2, #0
   136fe:	705a      	strb	r2, [r3, #1]
  i2cOled.address = 0;
   13700:	231c      	movs	r3, #28
   13702:	18fb      	adds	r3, r7, r3
   13704:	2200      	movs	r2, #0
   13706:	701a      	strb	r2, [r3, #0]
  i2cOled.msgIn = (uint8_t*) &dataIn[0];
   13708:	231c      	movs	r3, #28
   1370a:	18fb      	adds	r3, r7, r3
   1370c:	2214      	movs	r2, #20
   1370e:	18ba      	adds	r2, r7, r2
   13710:	609a      	str	r2, [r3, #8]
  i2cOled.lenOut = 1;
   13712:	231c      	movs	r3, #28
   13714:	18fb      	adds	r3, r7, r3
   13716:	2201      	movs	r2, #1
   13718:	81da      	strh	r2, [r3, #14]
  i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   1371a:	231c      	movs	r3, #28
   1371c:	18fb      	adds	r3, r7, r3
   1371e:	2218      	movs	r2, #24
   13720:	18ba      	adds	r2, r7, r2
   13722:	605a      	str	r2, [r3, #4]
  i2cOled.lenIn = 1;
   13724:	231c      	movs	r3, #28
   13726:	18fb      	adds	r3, r7, r3
   13728:	2201      	movs	r2, #1
   1372a:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   1372c:	4b2a      	ldr	r3, [pc, #168]	; (137d8 <CLI_i2cScan+0x104>)
   1372e:	0018      	movs	r0, r3
   13730:	4b2a      	ldr	r3, [pc, #168]	; (137dc <CLI_i2cScan+0x108>)
   13732:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13734:	2300      	movs	r3, #0
   13736:	637b      	str	r3, [r7, #52]	; 0x34
   13738:	e042      	b.n	137c0 <CLI_i2cScan+0xec>
            {
    snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1373c:	4a28      	ldr	r2, [pc, #160]	; (137e0 <CLI_i2cScan+0x10c>)
   1373e:	4829      	ldr	r0, [pc, #164]	; (137e4 <CLI_i2cScan+0x110>)
   13740:	210f      	movs	r1, #15
   13742:	4c29      	ldr	r4, [pc, #164]	; (137e8 <CLI_i2cScan+0x114>)
   13744:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   13746:	4b27      	ldr	r3, [pc, #156]	; (137e4 <CLI_i2cScan+0x110>)
   13748:	0018      	movs	r0, r3
   1374a:	4b24      	ldr	r3, [pc, #144]	; (137dc <CLI_i2cScan+0x108>)
   1374c:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   1374e:	2300      	movs	r3, #0
   13750:	633b      	str	r3, [r7, #48]	; 0x30
   13752:	e02b      	b.n	137ac <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13756:	b2da      	uxtb	r2, r3
   13758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1375a:	b2db      	uxtb	r3, r3
   1375c:	18d3      	adds	r3, r2, r3
   1375e:	b2da      	uxtb	r2, r3
   13760:	231c      	movs	r3, #28
   13762:	18fb      	adds	r3, r7, r3
   13764:	701a      	strb	r2, [r3, #0]

                     
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   13766:	231c      	movs	r3, #28
   13768:	18fb      	adds	r3, r7, r3
   1376a:	2264      	movs	r2, #100	; 0x64
   1376c:	2164      	movs	r1, #100	; 0x64
   1376e:	0018      	movs	r0, r3
   13770:	4b1e      	ldr	r3, [pc, #120]	; (137ec <CLI_i2cScan+0x118>)
   13772:	4798      	blx	r3
   13774:	0003      	movs	r3, r0
   13776:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1377a:	2b00      	cmp	r3, #0
   1377c:	d10c      	bne.n	13798 <CLI_i2cScan+0xc4>
                    {
      snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1377e:	231c      	movs	r3, #28
   13780:	18fb      	adds	r3, r7, r3
   13782:	781b      	ldrb	r3, [r3, #0]
   13784:	4a1a      	ldr	r2, [pc, #104]	; (137f0 <CLI_i2cScan+0x11c>)
   13786:	4817      	ldr	r0, [pc, #92]	; (137e4 <CLI_i2cScan+0x110>)
   13788:	210f      	movs	r1, #15
   1378a:	4c17      	ldr	r4, [pc, #92]	; (137e8 <CLI_i2cScan+0x114>)
   1378c:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1378e:	4b15      	ldr	r3, [pc, #84]	; (137e4 <CLI_i2cScan+0x110>)
   13790:	0018      	movs	r0, r3
   13792:	4b12      	ldr	r3, [pc, #72]	; (137dc <CLI_i2cScan+0x108>)
   13794:	4798      	blx	r3
   13796:	e006      	b.n	137a6 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   13798:	4b12      	ldr	r3, [pc, #72]	; (137e4 <CLI_i2cScan+0x110>)
   1379a:	4a16      	ldr	r2, [pc, #88]	; (137f4 <CLI_i2cScan+0x120>)
   1379c:	601a      	str	r2, [r3, #0]
      SerialConsoleWriteString(bufCli);
   1379e:	4b11      	ldr	r3, [pc, #68]	; (137e4 <CLI_i2cScan+0x110>)
   137a0:	0018      	movs	r0, r3
   137a2:	4b0e      	ldr	r3, [pc, #56]	; (137dc <CLI_i2cScan+0x108>)
   137a4:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   137a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   137a8:	3301      	adds	r3, #1
   137aa:	633b      	str	r3, [r7, #48]	; 0x30
   137ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   137ae:	2b0f      	cmp	r3, #15
   137b0:	ddd0      	ble.n	13754 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   137b2:	4b11      	ldr	r3, [pc, #68]	; (137f8 <CLI_i2cScan+0x124>)
   137b4:	0018      	movs	r0, r3
   137b6:	4b09      	ldr	r3, [pc, #36]	; (137dc <CLI_i2cScan+0x108>)
   137b8:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   137ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137bc:	3310      	adds	r3, #16
   137be:	637b      	str	r3, [r7, #52]	; 0x34
   137c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137c2:	2b7f      	cmp	r3, #127	; 0x7f
   137c4:	ddb9      	ble.n	1373a <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   137c6:	4b0c      	ldr	r3, [pc, #48]	; (137f8 <CLI_i2cScan+0x124>)
   137c8:	0018      	movs	r0, r3
   137ca:	4b04      	ldr	r3, [pc, #16]	; (137dc <CLI_i2cScan+0x108>)
   137cc:	4798      	blx	r3
   return pdFALSE;
   137ce:	2300      	movs	r3, #0

   137d0:	0018      	movs	r0, r3
   137d2:	46bd      	mov	sp, r7
   137d4:	b00f      	add	sp, #60	; 0x3c
   137d6:	bd90      	pop	{r4, r7, pc}
   137d8:	00035ab0 	.word	0x00035ab0
   137dc:	0001db55 	.word	0x0001db55
   137e0:	00035ae4 	.word	0x00035ae4
   137e4:	20000334 	.word	0x20000334
   137e8:	000345e5 	.word	0x000345e5
   137ec:	000140b9 	.word	0x000140b9
   137f0:	00035aec 	.word	0x00035aec
   137f4:	00202058 	.word	0x00202058
   137f8:	00035940 	.word	0x00035940

000137fc <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   137fc:	b580      	push	{r7, lr}
   137fe:	b082      	sub	sp, #8
   13800:	af00      	add	r7, sp, #0
   13802:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   13804:	4b0b      	ldr	r3, [pc, #44]	; (13834 <vControlHandlerTask+0x38>)
   13806:	0018      	movs	r0, r3
   13808:	4b0b      	ldr	r3, [pc, #44]	; (13838 <vControlHandlerTask+0x3c>)
   1380a:	4798      	blx	r3

    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   1380c:	4b0b      	ldr	r3, [pc, #44]	; (1383c <vControlHandlerTask+0x40>)
   1380e:	2200      	movs	r2, #0
   13810:	701a      	strb	r2, [r3, #0]
	
    while (1) {
        switch (controlState) {
   13812:	4b0a      	ldr	r3, [pc, #40]	; (1383c <vControlHandlerTask+0x40>)
   13814:	781b      	ldrb	r3, [r3, #0]
   13816:	2b00      	cmp	r3, #0
   13818:	d005      	beq.n	13826 <vControlHandlerTask+0x2a>
   1381a:	2b01      	cmp	r3, #1
   1381c:	d005      	beq.n	1382a <vControlHandlerTask+0x2e>
                break;
            }


            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   1381e:	4b07      	ldr	r3, [pc, #28]	; (1383c <vControlHandlerTask+0x40>)
   13820:	2200      	movs	r2, #0
   13822:	701a      	strb	r2, [r3, #0]
                break;
   13824:	e002      	b.n	1382c <vControlHandlerTask+0x30>
                break;
   13826:	46c0      	nop			; (mov r8, r8)
   13828:	e000      	b.n	1382c <vControlHandlerTask+0x30>
                break;
   1382a:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   1382c:	2028      	movs	r0, #40	; 0x28
   1382e:	4b04      	ldr	r3, [pc, #16]	; (13840 <vControlHandlerTask+0x44>)
   13830:	4798      	blx	r3
        switch (controlState) {
   13832:	e7ee      	b.n	13812 <vControlHandlerTask+0x16>
   13834:	00035b74 	.word	0x00035b74
   13838:	0001db55 	.word	0x0001db55
   1383c:	20004374 	.word	0x20004374
   13840:	0001bf01 	.word	0x0001bf01

00013844 <ControlSetGame>:
}



void ControlSetGame(uint8_t *shiparr_in,uint8_t ship_num_in)
{
   13844:	b590      	push	{r4, r7, lr}
   13846:	b085      	sub	sp, #20
   13848:	af02      	add	r7, sp, #8
   1384a:	6078      	str	r0, [r7, #4]
   1384c:	000a      	movs	r2, r1
   1384e:	1cfb      	adds	r3, r7, #3
   13850:	701a      	strb	r2, [r3, #0]
	memcpy (ship_arr, shiparr_in, ship_num_in * sizeof (uint8_t));
   13852:	1cfb      	adds	r3, r7, #3
   13854:	781a      	ldrb	r2, [r3, #0]
   13856:	6879      	ldr	r1, [r7, #4]
   13858:	4b13      	ldr	r3, [pc, #76]	; (138a8 <ControlSetGame+0x64>)
   1385a:	0018      	movs	r0, r3
   1385c:	4b13      	ldr	r3, [pc, #76]	; (138ac <ControlSetGame+0x68>)
   1385e:	4798      	blx	r3
	ship_num = ship_num_in;
   13860:	4b13      	ldr	r3, [pc, #76]	; (138b0 <ControlSetGame+0x6c>)
   13862:	1cfa      	adds	r2, r7, #3
   13864:	7812      	ldrb	r2, [r2, #0]
   13866:	701a      	strb	r2, [r3, #0]
	placement_status = false;
   13868:	4b12      	ldr	r3, [pc, #72]	; (138b4 <ControlSetGame+0x70>)
   1386a:	2200      	movs	r2, #0
   1386c:	701a      	strb	r2, [r3, #0]
	controlState = CONTROL_WAIT_FOR_PLACE;
   1386e:	4b12      	ldr	r3, [pc, #72]	; (138b8 <ControlSetGame+0x74>)
   13870:	2201      	movs	r2, #1
   13872:	701a      	strb	r2, [r3, #0]
	LogMessage(LOG_DEBUG_LVL, "\r\nship_arr %d %d %d\r\n", ship_arr[0], ship_arr[1], ship_arr[2]);
   13874:	4b0c      	ldr	r3, [pc, #48]	; (138a8 <ControlSetGame+0x64>)
   13876:	781b      	ldrb	r3, [r3, #0]
   13878:	001a      	movs	r2, r3
   1387a:	4b0b      	ldr	r3, [pc, #44]	; (138a8 <ControlSetGame+0x64>)
   1387c:	785b      	ldrb	r3, [r3, #1]
   1387e:	0018      	movs	r0, r3
   13880:	4b09      	ldr	r3, [pc, #36]	; (138a8 <ControlSetGame+0x64>)
   13882:	789b      	ldrb	r3, [r3, #2]
   13884:	490d      	ldr	r1, [pc, #52]	; (138bc <ControlSetGame+0x78>)
   13886:	9300      	str	r3, [sp, #0]
   13888:	0003      	movs	r3, r0
   1388a:	2001      	movs	r0, #1
   1388c:	4c0c      	ldr	r4, [pc, #48]	; (138c0 <ControlSetGame+0x7c>)
   1388e:	47a0      	blx	r4
	UiPlaceInit(ship_arr, ship_num);
   13890:	4b07      	ldr	r3, [pc, #28]	; (138b0 <ControlSetGame+0x6c>)
   13892:	781a      	ldrb	r2, [r3, #0]
   13894:	4b04      	ldr	r3, [pc, #16]	; (138a8 <ControlSetGame+0x64>)
   13896:	0011      	movs	r1, r2
   13898:	0018      	movs	r0, r3
   1389a:	4b0a      	ldr	r3, [pc, #40]	; (138c4 <ControlSetGame+0x80>)
   1389c:	4798      	blx	r3
}
   1389e:	46c0      	nop			; (mov r8, r8)
   138a0:	46bd      	mov	sp, r7
   138a2:	b003      	add	sp, #12
   138a4:	bd90      	pop	{r4, r7, pc}
   138a6:	46c0      	nop			; (mov r8, r8)
   138a8:	20004378 	.word	0x20004378
   138ac:	00034355 	.word	0x00034355
   138b0:	20004375 	.word	0x20004375
   138b4:	20000434 	.word	0x20000434
   138b8:	20004374 	.word	0x20004374
   138bc:	00035b94 	.word	0x00035b94
   138c0:	0001dc41 	.word	0x0001dc41
   138c4:	00015a05 	.word	0x00015a05

000138c8 <system_interrupt_enable>:
{
   138c8:	b580      	push	{r7, lr}
   138ca:	b082      	sub	sp, #8
   138cc:	af00      	add	r7, sp, #0
   138ce:	0002      	movs	r2, r0
   138d0:	1dfb      	adds	r3, r7, #7
   138d2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   138d4:	4b06      	ldr	r3, [pc, #24]	; (138f0 <system_interrupt_enable+0x28>)
   138d6:	1dfa      	adds	r2, r7, #7
   138d8:	7812      	ldrb	r2, [r2, #0]
   138da:	0011      	movs	r1, r2
   138dc:	221f      	movs	r2, #31
   138de:	400a      	ands	r2, r1
   138e0:	2101      	movs	r1, #1
   138e2:	4091      	lsls	r1, r2
   138e4:	000a      	movs	r2, r1
   138e6:	601a      	str	r2, [r3, #0]
}
   138e8:	46c0      	nop			; (mov r8, r8)
   138ea:	46bd      	mov	sp, r7
   138ec:	b002      	add	sp, #8
   138ee:	bd80      	pop	{r7, pc}
   138f0:	e000e100 	.word	0xe000e100

000138f4 <i2c_master_is_syncing>:
{
   138f4:	b580      	push	{r7, lr}
   138f6:	b084      	sub	sp, #16
   138f8:	af00      	add	r7, sp, #0
   138fa:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   138fc:	687b      	ldr	r3, [r7, #4]
   138fe:	681b      	ldr	r3, [r3, #0]
   13900:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   13902:	68fb      	ldr	r3, [r7, #12]
   13904:	69db      	ldr	r3, [r3, #28]
   13906:	2207      	movs	r2, #7
   13908:	4013      	ands	r3, r2
   1390a:	1e5a      	subs	r2, r3, #1
   1390c:	4193      	sbcs	r3, r2
   1390e:	b2db      	uxtb	r3, r3
}
   13910:	0018      	movs	r0, r3
   13912:	46bd      	mov	sp, r7
   13914:	b004      	add	sp, #16
   13916:	bd80      	pop	{r7, pc}

00013918 <_i2c_master_wait_for_sync>:
{
   13918:	b580      	push	{r7, lr}
   1391a:	b082      	sub	sp, #8
   1391c:	af00      	add	r7, sp, #0
   1391e:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   13920:	46c0      	nop			; (mov r8, r8)
   13922:	687b      	ldr	r3, [r7, #4]
   13924:	0018      	movs	r0, r3
   13926:	4b04      	ldr	r3, [pc, #16]	; (13938 <_i2c_master_wait_for_sync+0x20>)
   13928:	4798      	blx	r3
   1392a:	1e03      	subs	r3, r0, #0
   1392c:	d1f9      	bne.n	13922 <_i2c_master_wait_for_sync+0xa>
}
   1392e:	46c0      	nop			; (mov r8, r8)
   13930:	46bd      	mov	sp, r7
   13932:	b002      	add	sp, #8
   13934:	bd80      	pop	{r7, pc}
   13936:	46c0      	nop			; (mov r8, r8)
   13938:	000138f5 	.word	0x000138f5

0001393c <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   1393c:	b580      	push	{r7, lr}
   1393e:	b082      	sub	sp, #8
   13940:	af00      	add	r7, sp, #0
   13942:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13944:	687b      	ldr	r3, [r7, #4]
   13946:	2264      	movs	r2, #100	; 0x64
   13948:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   1394a:	687b      	ldr	r3, [r7, #4]
   1394c:	4a1b      	ldr	r2, [pc, #108]	; (139bc <i2c_master_get_config_defaults+0x80>)
   1394e:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   13950:	687b      	ldr	r3, [r7, #4]
   13952:	2200      	movs	r2, #0
   13954:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   13956:	687b      	ldr	r3, [r7, #4]
   13958:	2200      	movs	r2, #0
   1395a:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   1395c:	687b      	ldr	r3, [r7, #4]
   1395e:	2200      	movs	r2, #0
   13960:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   13962:	687b      	ldr	r3, [r7, #4]
   13964:	2280      	movs	r2, #128	; 0x80
   13966:	0392      	lsls	r2, r2, #14
   13968:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   1396a:	687b      	ldr	r3, [r7, #4]
   1396c:	2201      	movs	r2, #1
   1396e:	4252      	negs	r2, r2
   13970:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   13972:	687b      	ldr	r3, [r7, #4]
   13974:	2201      	movs	r2, #1
   13976:	4252      	negs	r2, r2
   13978:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1397a:	687b      	ldr	r3, [r7, #4]
   1397c:	2200      	movs	r2, #0
   1397e:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   13980:	687b      	ldr	r3, [r7, #4]
   13982:	2200      	movs	r2, #0
   13984:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   13986:	687b      	ldr	r3, [r7, #4]
   13988:	2224      	movs	r2, #36	; 0x24
   1398a:	2100      	movs	r1, #0
   1398c:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   1398e:	687b      	ldr	r3, [r7, #4]
   13990:	2200      	movs	r2, #0
   13992:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   13994:	687b      	ldr	r3, [r7, #4]
   13996:	222c      	movs	r2, #44	; 0x2c
   13998:	2100      	movs	r1, #0
   1399a:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	222d      	movs	r2, #45	; 0x2d
   139a0:	2100      	movs	r1, #0
   139a2:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   139a4:	687b      	ldr	r3, [r7, #4]
   139a6:	222e      	movs	r2, #46	; 0x2e
   139a8:	2100      	movs	r1, #0
   139aa:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   139ac:	687b      	ldr	r3, [r7, #4]
   139ae:	22d7      	movs	r2, #215	; 0xd7
   139b0:	861a      	strh	r2, [r3, #48]	; 0x30
}
   139b2:	46c0      	nop			; (mov r8, r8)
   139b4:	46bd      	mov	sp, r7
   139b6:	b002      	add	sp, #8
   139b8:	bd80      	pop	{r7, pc}
   139ba:	46c0      	nop			; (mov r8, r8)
   139bc:	00000d48 	.word	0x00000d48

000139c0 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   139c0:	b580      	push	{r7, lr}
   139c2:	b084      	sub	sp, #16
   139c4:	af00      	add	r7, sp, #0
   139c6:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   139c8:	687b      	ldr	r3, [r7, #4]
   139ca:	681b      	ldr	r3, [r3, #0]
   139cc:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   139ce:	2300      	movs	r3, #0
   139d0:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   139d2:	687b      	ldr	r3, [r7, #4]
   139d4:	0018      	movs	r0, r3
   139d6:	4b14      	ldr	r3, [pc, #80]	; (13a28 <i2c_master_enable+0x68>)
   139d8:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   139da:	68bb      	ldr	r3, [r7, #8]
   139dc:	681b      	ldr	r3, [r3, #0]
   139de:	2202      	movs	r2, #2
   139e0:	431a      	orrs	r2, r3
   139e2:	68bb      	ldr	r3, [r7, #8]
   139e4:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   139e6:	687b      	ldr	r3, [r7, #4]
   139e8:	681b      	ldr	r3, [r3, #0]
   139ea:	0018      	movs	r0, r3
   139ec:	4b0f      	ldr	r3, [pc, #60]	; (13a2c <i2c_master_enable+0x6c>)
   139ee:	4798      	blx	r3
   139f0:	0003      	movs	r3, r0
   139f2:	0018      	movs	r0, r3
   139f4:	4b0e      	ldr	r3, [pc, #56]	; (13a30 <i2c_master_enable+0x70>)
   139f6:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   139f8:	e00c      	b.n	13a14 <i2c_master_enable+0x54>
		timeout_counter++;
   139fa:	68fb      	ldr	r3, [r7, #12]
   139fc:	3301      	adds	r3, #1
   139fe:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13a00:	687b      	ldr	r3, [r7, #4]
   13a02:	88db      	ldrh	r3, [r3, #6]
   13a04:	001a      	movs	r2, r3
   13a06:	68fb      	ldr	r3, [r7, #12]
   13a08:	429a      	cmp	r2, r3
   13a0a:	d803      	bhi.n	13a14 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   13a0c:	68bb      	ldr	r3, [r7, #8]
   13a0e:	2210      	movs	r2, #16
   13a10:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   13a12:	e006      	b.n	13a22 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13a14:	68bb      	ldr	r3, [r7, #8]
   13a16:	8b5b      	ldrh	r3, [r3, #26]
   13a18:	b29b      	uxth	r3, r3
   13a1a:	001a      	movs	r2, r3
   13a1c:	2310      	movs	r3, #16
   13a1e:	4013      	ands	r3, r2
   13a20:	d0eb      	beq.n	139fa <i2c_master_enable+0x3a>
		}
	}
}
   13a22:	46bd      	mov	sp, r7
   13a24:	b004      	add	sp, #16
   13a26:	bd80      	pop	{r7, pc}
   13a28:	00013919 	.word	0x00013919
   13a2c:	000270ad 	.word	0x000270ad
   13a30:	000138c9 	.word	0x000138c9

00013a34 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   13a34:	b580      	push	{r7, lr}
   13a36:	b082      	sub	sp, #8
   13a38:	af00      	add	r7, sp, #0
   13a3a:	6078      	str	r0, [r7, #4]
   13a3c:	000a      	movs	r2, r1
   13a3e:	1cfb      	adds	r3, r7, #3
   13a40:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   13a42:	687b      	ldr	r3, [r7, #4]
   13a44:	7e5b      	ldrb	r3, [r3, #25]
   13a46:	b2db      	uxtb	r3, r3
   13a48:	b25a      	sxtb	r2, r3
   13a4a:	1cfb      	adds	r3, r7, #3
   13a4c:	781b      	ldrb	r3, [r3, #0]
   13a4e:	2101      	movs	r1, #1
   13a50:	4099      	lsls	r1, r3
   13a52:	000b      	movs	r3, r1
   13a54:	b25b      	sxtb	r3, r3
   13a56:	4313      	orrs	r3, r2
   13a58:	b25b      	sxtb	r3, r3
   13a5a:	b2da      	uxtb	r2, r3
   13a5c:	687b      	ldr	r3, [r7, #4]
   13a5e:	765a      	strb	r2, [r3, #25]
}
   13a60:	46c0      	nop			; (mov r8, r8)
   13a62:	46bd      	mov	sp, r7
   13a64:	b002      	add	sp, #8
   13a66:	bd80      	pop	{r7, pc}

00013a68 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   13a68:	b590      	push	{r4, r7, lr}
   13a6a:	b091      	sub	sp, #68	; 0x44
   13a6c:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13a6e:	2300      	movs	r3, #0
   13a70:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   13a72:	233a      	movs	r3, #58	; 0x3a
   13a74:	18fb      	adds	r3, r7, r3
   13a76:	2200      	movs	r2, #0
   13a78:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   13a7a:	1d3b      	adds	r3, r7, #4
   13a7c:	0018      	movs	r0, r3
   13a7e:	4b21      	ldr	r3, [pc, #132]	; (13b04 <I2cDriverConfigureSensorBus+0x9c>)
   13a80:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   13a82:	1d3b      	adds	r3, r7, #4
   13a84:	4a20      	ldr	r2, [pc, #128]	; (13b08 <I2cDriverConfigureSensorBus+0xa0>)
   13a86:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   13a88:	1d3b      	adds	r3, r7, #4
   13a8a:	4a20      	ldr	r2, [pc, #128]	; (13b0c <I2cDriverConfigureSensorBus+0xa4>)
   13a8c:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   13a8e:	1d3b      	adds	r3, r7, #4
   13a90:	22fa      	movs	r2, #250	; 0xfa
   13a92:	0092      	lsls	r2, r2, #2
   13a94:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13a96:	233b      	movs	r3, #59	; 0x3b
   13a98:	18fb      	adds	r3, r7, r3
   13a9a:	2203      	movs	r2, #3
   13a9c:	701a      	strb	r2, [r3, #0]
   13a9e:	e01e      	b.n	13ade <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13aa0:	233a      	movs	r3, #58	; 0x3a
   13aa2:	18fc      	adds	r4, r7, r3
   13aa4:	1d3a      	adds	r2, r7, #4
   13aa6:	491a      	ldr	r1, [pc, #104]	; (13b10 <I2cDriverConfigureSensorBus+0xa8>)
   13aa8:	4b1a      	ldr	r3, [pc, #104]	; (13b14 <I2cDriverConfigureSensorBus+0xac>)
   13aaa:	0018      	movs	r0, r3
   13aac:	4b1a      	ldr	r3, [pc, #104]	; (13b18 <I2cDriverConfigureSensorBus+0xb0>)
   13aae:	4798      	blx	r3
   13ab0:	0003      	movs	r3, r0
   13ab2:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   13ab4:	233a      	movs	r3, #58	; 0x3a
   13ab6:	18fb      	adds	r3, r7, r3
   13ab8:	781b      	ldrb	r3, [r3, #0]
   13aba:	2b00      	cmp	r3, #0
   13abc:	d104      	bne.n	13ac8 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   13abe:	233a      	movs	r3, #58	; 0x3a
   13ac0:	18fb      	adds	r3, r7, r3
   13ac2:	781b      	ldrb	r3, [r3, #0]
   13ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   13ac6:	e00f      	b.n	13ae8 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   13ac8:	4b12      	ldr	r3, [pc, #72]	; (13b14 <I2cDriverConfigureSensorBus+0xac>)
   13aca:	0018      	movs	r0, r3
   13acc:	4b13      	ldr	r3, [pc, #76]	; (13b1c <I2cDriverConfigureSensorBus+0xb4>)
   13ace:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13ad0:	233b      	movs	r3, #59	; 0x3b
   13ad2:	18fb      	adds	r3, r7, r3
   13ad4:	781a      	ldrb	r2, [r3, #0]
   13ad6:	233b      	movs	r3, #59	; 0x3b
   13ad8:	18fb      	adds	r3, r7, r3
   13ada:	3a01      	subs	r2, #1
   13adc:	701a      	strb	r2, [r3, #0]
   13ade:	233b      	movs	r3, #59	; 0x3b
   13ae0:	18fb      	adds	r3, r7, r3
   13ae2:	781b      	ldrb	r3, [r3, #0]
   13ae4:	2b00      	cmp	r3, #0
   13ae6:	d1db      	bne.n	13aa0 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   13ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13aea:	2b00      	cmp	r3, #0
   13aec:	d104      	bne.n	13af8 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   13aee:	4b09      	ldr	r3, [pc, #36]	; (13b14 <I2cDriverConfigureSensorBus+0xac>)
   13af0:	0018      	movs	r0, r3
   13af2:	4b0b      	ldr	r3, [pc, #44]	; (13b20 <I2cDriverConfigureSensorBus+0xb8>)
   13af4:	4798      	blx	r3
   13af6:	e000      	b.n	13afa <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   13af8:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   13afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   13afc:	0018      	movs	r0, r3
   13afe:	46bd      	mov	sp, r7
   13b00:	b011      	add	sp, #68	; 0x44
   13b02:	bd90      	pop	{r4, r7, pc}
   13b04:	0001393d 	.word	0x0001393d
   13b08:	00080002 	.word	0x00080002
   13b0c:	00090002 	.word	0x00090002
   13b10:	42000800 	.word	0x42000800
   13b14:	20004384 	.word	0x20004384
   13b18:	000177dd 	.word	0x000177dd
   13b1c:	00017911 	.word	0x00017911
   13b20:	000139c1 	.word	0x000139c1

00013b24 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   13b24:	b580      	push	{r7, lr}
   13b26:	b084      	sub	sp, #16
   13b28:	af00      	add	r7, sp, #0
   13b2a:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13b2c:	4b0e      	ldr	r3, [pc, #56]	; (13b68 <I2cSensorsTxComplete+0x44>)
   13b2e:	2200      	movs	r2, #0
   13b30:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13b32:	4b0d      	ldr	r3, [pc, #52]	; (13b68 <I2cSensorsTxComplete+0x44>)
   13b34:	2201      	movs	r2, #1
   13b36:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13b38:	2300      	movs	r3, #0
   13b3a:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13b3c:	4b0b      	ldr	r3, [pc, #44]	; (13b6c <I2cSensorsTxComplete+0x48>)
   13b3e:	681b      	ldr	r3, [r3, #0]
   13b40:	220c      	movs	r2, #12
   13b42:	18ba      	adds	r2, r7, r2
   13b44:	0011      	movs	r1, r2
   13b46:	0018      	movs	r0, r3
   13b48:	4b09      	ldr	r3, [pc, #36]	; (13b70 <I2cSensorsTxComplete+0x4c>)
   13b4a:	4798      	blx	r3
    sensorTransmitError = false;
   13b4c:	4b09      	ldr	r3, [pc, #36]	; (13b74 <I2cSensorsTxComplete+0x50>)
   13b4e:	2200      	movs	r2, #0
   13b50:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b52:	68fb      	ldr	r3, [r7, #12]
   13b54:	2b00      	cmp	r3, #0
   13b56:	d003      	beq.n	13b60 <I2cSensorsTxComplete+0x3c>
   13b58:	4b07      	ldr	r3, [pc, #28]	; (13b78 <I2cSensorsTxComplete+0x54>)
   13b5a:	2280      	movs	r2, #128	; 0x80
   13b5c:	0552      	lsls	r2, r2, #21
   13b5e:	601a      	str	r2, [r3, #0]
}
   13b60:	46c0      	nop			; (mov r8, r8)
   13b62:	46bd      	mov	sp, r7
   13b64:	b004      	add	sp, #16
   13b66:	bd80      	pop	{r7, pc}
   13b68:	20000438 	.word	0x20000438
   13b6c:	200043ac 	.word	0x200043ac
   13b70:	0001ab25 	.word	0x0001ab25
   13b74:	20000435 	.word	0x20000435
   13b78:	e000ed04 	.word	0xe000ed04

00013b7c <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   13b7c:	b580      	push	{r7, lr}
   13b7e:	b084      	sub	sp, #16
   13b80:	af00      	add	r7, sp, #0
   13b82:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13b84:	4b0e      	ldr	r3, [pc, #56]	; (13bc0 <I2cSensorsRxComplete+0x44>)
   13b86:	2200      	movs	r2, #0
   13b88:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13b8a:	4b0d      	ldr	r3, [pc, #52]	; (13bc0 <I2cSensorsRxComplete+0x44>)
   13b8c:	2201      	movs	r2, #1
   13b8e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13b90:	2300      	movs	r3, #0
   13b92:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13b94:	4b0b      	ldr	r3, [pc, #44]	; (13bc4 <I2cSensorsRxComplete+0x48>)
   13b96:	681b      	ldr	r3, [r3, #0]
   13b98:	220c      	movs	r2, #12
   13b9a:	18ba      	adds	r2, r7, r2
   13b9c:	0011      	movs	r1, r2
   13b9e:	0018      	movs	r0, r3
   13ba0:	4b09      	ldr	r3, [pc, #36]	; (13bc8 <I2cSensorsRxComplete+0x4c>)
   13ba2:	4798      	blx	r3
    sensorTransmitError = false;
   13ba4:	4b09      	ldr	r3, [pc, #36]	; (13bcc <I2cSensorsRxComplete+0x50>)
   13ba6:	2200      	movs	r2, #0
   13ba8:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13baa:	68fb      	ldr	r3, [r7, #12]
   13bac:	2b00      	cmp	r3, #0
   13bae:	d003      	beq.n	13bb8 <I2cSensorsRxComplete+0x3c>
   13bb0:	4b07      	ldr	r3, [pc, #28]	; (13bd0 <I2cSensorsRxComplete+0x54>)
   13bb2:	2280      	movs	r2, #128	; 0x80
   13bb4:	0552      	lsls	r2, r2, #21
   13bb6:	601a      	str	r2, [r3, #0]
}
   13bb8:	46c0      	nop			; (mov r8, r8)
   13bba:	46bd      	mov	sp, r7
   13bbc:	b004      	add	sp, #16
   13bbe:	bd80      	pop	{r7, pc}
   13bc0:	20000438 	.word	0x20000438
   13bc4:	200043ac 	.word	0x200043ac
   13bc8:	0001ab25 	.word	0x0001ab25
   13bcc:	20000435 	.word	0x20000435
   13bd0:	e000ed04 	.word	0xe000ed04

00013bd4 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   13bd4:	b580      	push	{r7, lr}
   13bd6:	b084      	sub	sp, #16
   13bd8:	af00      	add	r7, sp, #0
   13bda:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13bdc:	4b0e      	ldr	r3, [pc, #56]	; (13c18 <I2cSensorsError+0x44>)
   13bde:	2200      	movs	r2, #0
   13be0:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   13be2:	4b0d      	ldr	r3, [pc, #52]	; (13c18 <I2cSensorsError+0x44>)
   13be4:	2201      	movs	r2, #1
   13be6:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13be8:	2300      	movs	r3, #0
   13bea:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13bec:	4b0b      	ldr	r3, [pc, #44]	; (13c1c <I2cSensorsError+0x48>)
   13bee:	681b      	ldr	r3, [r3, #0]
   13bf0:	220c      	movs	r2, #12
   13bf2:	18ba      	adds	r2, r7, r2
   13bf4:	0011      	movs	r1, r2
   13bf6:	0018      	movs	r0, r3
   13bf8:	4b09      	ldr	r3, [pc, #36]	; (13c20 <I2cSensorsError+0x4c>)
   13bfa:	4798      	blx	r3
    sensorTransmitError = true;
   13bfc:	4b09      	ldr	r3, [pc, #36]	; (13c24 <I2cSensorsError+0x50>)
   13bfe:	2201      	movs	r2, #1
   13c00:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13c02:	68fb      	ldr	r3, [r7, #12]
   13c04:	2b00      	cmp	r3, #0
   13c06:	d003      	beq.n	13c10 <I2cSensorsError+0x3c>
   13c08:	4b07      	ldr	r3, [pc, #28]	; (13c28 <I2cSensorsError+0x54>)
   13c0a:	2280      	movs	r2, #128	; 0x80
   13c0c:	0552      	lsls	r2, r2, #21
   13c0e:	601a      	str	r2, [r3, #0]
}
   13c10:	46c0      	nop			; (mov r8, r8)
   13c12:	46bd      	mov	sp, r7
   13c14:	b004      	add	sp, #16
   13c16:	bd80      	pop	{r7, pc}
   13c18:	20000438 	.word	0x20000438
   13c1c:	200043ac 	.word	0x200043ac
   13c20:	0001ab25 	.word	0x0001ab25
   13c24:	20000435 	.word	0x20000435
   13c28:	e000ed04 	.word	0xe000ed04

00013c2c <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   13c2c:	b580      	push	{r7, lr}
   13c2e:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13c30:	4911      	ldr	r1, [pc, #68]	; (13c78 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   13c32:	4b12      	ldr	r3, [pc, #72]	; (13c7c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c34:	2200      	movs	r2, #0
   13c36:	0018      	movs	r0, r3
   13c38:	4b11      	ldr	r3, [pc, #68]	; (13c80 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13c3a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13c3c:	4b0f      	ldr	r3, [pc, #60]	; (13c7c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c3e:	2100      	movs	r1, #0
   13c40:	0018      	movs	r0, r3
   13c42:	4b10      	ldr	r3, [pc, #64]	; (13c84 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13c44:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13c46:	4910      	ldr	r1, [pc, #64]	; (13c88 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   13c48:	4b0c      	ldr	r3, [pc, #48]	; (13c7c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c4a:	2201      	movs	r2, #1
   13c4c:	0018      	movs	r0, r3
   13c4e:	4b0c      	ldr	r3, [pc, #48]	; (13c80 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13c50:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13c52:	4b0a      	ldr	r3, [pc, #40]	; (13c7c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c54:	2101      	movs	r1, #1
   13c56:	0018      	movs	r0, r3
   13c58:	4b0a      	ldr	r3, [pc, #40]	; (13c84 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13c5a:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   13c5c:	490b      	ldr	r1, [pc, #44]	; (13c8c <I2cDriverRegisterSensorBusCallbacks+0x60>)
   13c5e:	4b07      	ldr	r3, [pc, #28]	; (13c7c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c60:	2202      	movs	r2, #2
   13c62:	0018      	movs	r0, r3
   13c64:	4b06      	ldr	r3, [pc, #24]	; (13c80 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13c66:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   13c68:	4b04      	ldr	r3, [pc, #16]	; (13c7c <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c6a:	2102      	movs	r1, #2
   13c6c:	0018      	movs	r0, r3
   13c6e:	4b05      	ldr	r3, [pc, #20]	; (13c84 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13c70:	4798      	blx	r3
}
   13c72:	46c0      	nop			; (mov r8, r8)
   13c74:	46bd      	mov	sp, r7
   13c76:	bd80      	pop	{r7, pc}
   13c78:	00013b25 	.word	0x00013b25
   13c7c:	20004384 	.word	0x20004384
   13c80:	00012909 	.word	0x00012909
   13c84:	00013a35 	.word	0x00013a35
   13c88:	00013b7d 	.word	0x00013b7d
   13c8c:	00013bd5 	.word	0x00013bd5

00013c90 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   13c90:	b580      	push	{r7, lr}
   13c92:	b082      	sub	sp, #8
   13c94:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13c96:	2300      	movs	r3, #0
   13c98:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   13c9a:	4b14      	ldr	r3, [pc, #80]	; (13cec <I2cInitializeDriver+0x5c>)
   13c9c:	4798      	blx	r3
   13c9e:	0003      	movs	r3, r0
   13ca0:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   13ca2:	687b      	ldr	r3, [r7, #4]
   13ca4:	2b00      	cmp	r3, #0
   13ca6:	d11a      	bne.n	13cde <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   13ca8:	4b11      	ldr	r3, [pc, #68]	; (13cf0 <I2cInitializeDriver+0x60>)
   13caa:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13cac:	2001      	movs	r0, #1
   13cae:	4b11      	ldr	r3, [pc, #68]	; (13cf4 <I2cInitializeDriver+0x64>)
   13cb0:	4798      	blx	r3
   13cb2:	0002      	movs	r2, r0
   13cb4:	4b10      	ldr	r3, [pc, #64]	; (13cf8 <I2cInitializeDriver+0x68>)
   13cb6:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   13cb8:	2203      	movs	r2, #3
   13cba:	2100      	movs	r1, #0
   13cbc:	2001      	movs	r0, #1
   13cbe:	4b0f      	ldr	r3, [pc, #60]	; (13cfc <I2cInitializeDriver+0x6c>)
   13cc0:	4798      	blx	r3
   13cc2:	0002      	movs	r2, r0
   13cc4:	4b0e      	ldr	r3, [pc, #56]	; (13d00 <I2cInitializeDriver+0x70>)
   13cc6:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   13cc8:	4b0b      	ldr	r3, [pc, #44]	; (13cf8 <I2cInitializeDriver+0x68>)
   13cca:	681b      	ldr	r3, [r3, #0]
   13ccc:	2b00      	cmp	r3, #0
   13cce:	d003      	beq.n	13cd8 <I2cInitializeDriver+0x48>
   13cd0:	4b0b      	ldr	r3, [pc, #44]	; (13d00 <I2cInitializeDriver+0x70>)
   13cd2:	681b      	ldr	r3, [r3, #0]
   13cd4:	2b00      	cmp	r3, #0
   13cd6:	d103      	bne.n	13ce0 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   13cd8:	2306      	movs	r3, #6
   13cda:	607b      	str	r3, [r7, #4]
        goto exit;
   13cdc:	e000      	b.n	13ce0 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   13cde:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13ce0:	687b      	ldr	r3, [r7, #4]
}
   13ce2:	0018      	movs	r0, r3
   13ce4:	46bd      	mov	sp, r7
   13ce6:	b002      	add	sp, #8
   13ce8:	bd80      	pop	{r7, pc}
   13cea:	46c0      	nop			; (mov r8, r8)
   13cec:	00013a69 	.word	0x00013a69
   13cf0:	00013c2d 	.word	0x00013c2d
   13cf4:	0001a45d 	.word	0x0001a45d
   13cf8:	20004380 	.word	0x20004380
   13cfc:	0001a1f5 	.word	0x0001a1f5
   13d00:	200043ac 	.word	0x200043ac

00013d04 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   13d04:	b590      	push	{r4, r7, lr}
   13d06:	b085      	sub	sp, #20
   13d08:	af00      	add	r7, sp, #0
   13d0a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13d0c:	2300      	movs	r3, #0
   13d0e:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13d10:	687b      	ldr	r3, [r7, #4]
   13d12:	2b00      	cmp	r3, #0
   13d14:	d003      	beq.n	13d1e <I2cWriteData+0x1a>
   13d16:	687b      	ldr	r3, [r7, #4]
   13d18:	685b      	ldr	r3, [r3, #4]
   13d1a:	2b00      	cmp	r3, #0
   13d1c:	d103      	bne.n	13d26 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   13d1e:	2308      	movs	r3, #8
   13d20:	425b      	negs	r3, r3
   13d22:	60fb      	str	r3, [r7, #12]
        goto exit;
   13d24:	e01f      	b.n	13d66 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   13d26:	687b      	ldr	r3, [r7, #4]
   13d28:	781b      	ldrb	r3, [r3, #0]
   13d2a:	b29a      	uxth	r2, r3
   13d2c:	4b10      	ldr	r3, [pc, #64]	; (13d70 <I2cWriteData+0x6c>)
   13d2e:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13d30:	687b      	ldr	r3, [r7, #4]
   13d32:	685a      	ldr	r2, [r3, #4]
   13d34:	4b0e      	ldr	r3, [pc, #56]	; (13d70 <I2cWriteData+0x6c>)
   13d36:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   13d38:	687b      	ldr	r3, [r7, #4]
   13d3a:	89da      	ldrh	r2, [r3, #14]
   13d3c:	4b0c      	ldr	r3, [pc, #48]	; (13d70 <I2cWriteData+0x6c>)
   13d3e:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13d40:	230b      	movs	r3, #11
   13d42:	18fc      	adds	r4, r7, r3
   13d44:	4a0a      	ldr	r2, [pc, #40]	; (13d70 <I2cWriteData+0x6c>)
   13d46:	4b0b      	ldr	r3, [pc, #44]	; (13d74 <I2cWriteData+0x70>)
   13d48:	0011      	movs	r1, r2
   13d4a:	0018      	movs	r0, r3
   13d4c:	4b0a      	ldr	r3, [pc, #40]	; (13d78 <I2cWriteData+0x74>)
   13d4e:	4798      	blx	r3
   13d50:	0003      	movs	r3, r0
   13d52:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13d54:	230b      	movs	r3, #11
   13d56:	18fb      	adds	r3, r7, r3
   13d58:	781b      	ldrb	r3, [r3, #0]
   13d5a:	2b00      	cmp	r3, #0
   13d5c:	d003      	beq.n	13d66 <I2cWriteData+0x62>
        error = ERROR_IO;
   13d5e:	2306      	movs	r3, #6
   13d60:	425b      	negs	r3, r3
   13d62:	60fb      	str	r3, [r7, #12]
        goto exit;
   13d64:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13d66:	68fb      	ldr	r3, [r7, #12]
}
   13d68:	0018      	movs	r0, r3
   13d6a:	46bd      	mov	sp, r7
   13d6c:	b005      	add	sp, #20
   13d6e:	bd90      	pop	{r4, r7, pc}
   13d70:	200043b0 	.word	0x200043b0
   13d74:	20004384 	.word	0x20004384
   13d78:	00012b8d 	.word	0x00012b8d

00013d7c <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   13d7c:	b590      	push	{r4, r7, lr}
   13d7e:	b085      	sub	sp, #20
   13d80:	af00      	add	r7, sp, #0
   13d82:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13d84:	2300      	movs	r3, #0
   13d86:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgIn == NULL) {
   13d88:	687b      	ldr	r3, [r7, #4]
   13d8a:	2b00      	cmp	r3, #0
   13d8c:	d003      	beq.n	13d96 <I2cReadData+0x1a>
   13d8e:	687b      	ldr	r3, [r7, #4]
   13d90:	689b      	ldr	r3, [r3, #8]
   13d92:	2b00      	cmp	r3, #0
   13d94:	d103      	bne.n	13d9e <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   13d96:	2308      	movs	r3, #8
   13d98:	425b      	negs	r3, r3
   13d9a:	60fb      	str	r3, [r7, #12]
        goto exit;
   13d9c:	e01f      	b.n	13dde <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   13d9e:	687b      	ldr	r3, [r7, #4]
   13da0:	781b      	ldrb	r3, [r3, #0]
   13da2:	b29a      	uxth	r2, r3
   13da4:	4b10      	ldr	r3, [pc, #64]	; (13de8 <I2cReadData+0x6c>)
   13da6:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   13da8:	687b      	ldr	r3, [r7, #4]
   13daa:	689a      	ldr	r2, [r3, #8]
   13dac:	4b0e      	ldr	r3, [pc, #56]	; (13de8 <I2cReadData+0x6c>)
   13dae:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   13db0:	687b      	ldr	r3, [r7, #4]
   13db2:	899a      	ldrh	r2, [r3, #12]
   13db4:	4b0c      	ldr	r3, [pc, #48]	; (13de8 <I2cReadData+0x6c>)
   13db6:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13db8:	230b      	movs	r3, #11
   13dba:	18fc      	adds	r4, r7, r3
   13dbc:	4a0a      	ldr	r2, [pc, #40]	; (13de8 <I2cReadData+0x6c>)
   13dbe:	4b0b      	ldr	r3, [pc, #44]	; (13dec <I2cReadData+0x70>)
   13dc0:	0011      	movs	r1, r2
   13dc2:	0018      	movs	r0, r3
   13dc4:	4b0a      	ldr	r3, [pc, #40]	; (13df0 <I2cReadData+0x74>)
   13dc6:	4798      	blx	r3
   13dc8:	0003      	movs	r3, r0
   13dca:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13dcc:	230b      	movs	r3, #11
   13dce:	18fb      	adds	r3, r7, r3
   13dd0:	781b      	ldrb	r3, [r3, #0]
   13dd2:	2b00      	cmp	r3, #0
   13dd4:	d003      	beq.n	13dde <I2cReadData+0x62>
        error = ERROR_IO;
   13dd6:	2306      	movs	r3, #6
   13dd8:	425b      	negs	r3, r3
   13dda:	60fb      	str	r3, [r7, #12]
        goto exit;
   13ddc:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13dde:	68fb      	ldr	r3, [r7, #12]
}
   13de0:	0018      	movs	r0, r3
   13de2:	46bd      	mov	sp, r7
   13de4:	b005      	add	sp, #20
   13de6:	bd90      	pop	{r4, r7, pc}
   13de8:	200043b0 	.word	0x200043b0
   13dec:	20004384 	.word	0x20004384
   13df0:	00012aa9 	.word	0x00012aa9

00013df4 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   13df4:	b590      	push	{r4, r7, lr}
   13df6:	b083      	sub	sp, #12
   13df8:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   13dfa:	2300      	movs	r3, #0
   13dfc:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   13dfe:	4b09      	ldr	r3, [pc, #36]	; (13e24 <I2cFreeMutex+0x30>)
   13e00:	6818      	ldr	r0, [r3, #0]
   13e02:	2300      	movs	r3, #0
   13e04:	2200      	movs	r2, #0
   13e06:	2100      	movs	r1, #0
   13e08:	4c07      	ldr	r4, [pc, #28]	; (13e28 <I2cFreeMutex+0x34>)
   13e0a:	47a0      	blx	r4
   13e0c:	0003      	movs	r3, r0
   13e0e:	2b01      	cmp	r3, #1
   13e10:	d002      	beq.n	13e18 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   13e12:	2314      	movs	r3, #20
   13e14:	425b      	negs	r3, r3
   13e16:	607b      	str	r3, [r7, #4]
    }
    return error;
   13e18:	687b      	ldr	r3, [r7, #4]
}
   13e1a:	0018      	movs	r0, r3
   13e1c:	46bd      	mov	sp, r7
   13e1e:	b003      	add	sp, #12
   13e20:	bd90      	pop	{r4, r7, pc}
   13e22:	46c0      	nop			; (mov r8, r8)
   13e24:	20004380 	.word	0x20004380
   13e28:	0001a49d 	.word	0x0001a49d

00013e2c <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   13e2c:	b580      	push	{r7, lr}
   13e2e:	b084      	sub	sp, #16
   13e30:	af00      	add	r7, sp, #0
   13e32:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13e34:	2300      	movs	r3, #0
   13e36:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   13e38:	4b08      	ldr	r3, [pc, #32]	; (13e5c <I2cGetMutex+0x30>)
   13e3a:	681b      	ldr	r3, [r3, #0]
   13e3c:	687a      	ldr	r2, [r7, #4]
   13e3e:	0011      	movs	r1, r2
   13e40:	0018      	movs	r0, r3
   13e42:	4b07      	ldr	r3, [pc, #28]	; (13e60 <I2cGetMutex+0x34>)
   13e44:	4798      	blx	r3
   13e46:	0003      	movs	r3, r0
   13e48:	2b01      	cmp	r3, #1
   13e4a:	d002      	beq.n	13e52 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   13e4c:	231d      	movs	r3, #29
   13e4e:	425b      	negs	r3, r3
   13e50:	60fb      	str	r3, [r7, #12]
    }
    return error;
   13e52:	68fb      	ldr	r3, [r7, #12]
}
   13e54:	0018      	movs	r0, r3
   13e56:	46bd      	mov	sp, r7
   13e58:	b004      	add	sp, #16
   13e5a:	bd80      	pop	{r7, pc}
   13e5c:	20004380 	.word	0x20004380
   13e60:	0001b1ad 	.word	0x0001b1ad

00013e64 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   13e64:	b580      	push	{r7, lr}
   13e66:	b084      	sub	sp, #16
   13e68:	af00      	add	r7, sp, #0
   13e6a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13e6c:	2300      	movs	r3, #0
   13e6e:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   13e70:	4b04      	ldr	r3, [pc, #16]	; (13e84 <I2cGetSemaphoreHandle+0x20>)
   13e72:	681a      	ldr	r2, [r3, #0]
   13e74:	687b      	ldr	r3, [r7, #4]
   13e76:	601a      	str	r2, [r3, #0]
    return error;
   13e78:	68fb      	ldr	r3, [r7, #12]
}
   13e7a:	0018      	movs	r0, r3
   13e7c:	46bd      	mov	sp, r7
   13e7e:	b004      	add	sp, #16
   13e80:	bd80      	pop	{r7, pc}
   13e82:	46c0      	nop			; (mov r8, r8)
   13e84:	200043ac 	.word	0x200043ac

00013e88 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   13e88:	b580      	push	{r7, lr}
   13e8a:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   13e8c:	4b02      	ldr	r3, [pc, #8]	; (13e98 <I2cGetTaskErrorStatus+0x10>)
   13e8e:	781b      	ldrb	r3, [r3, #0]
}
   13e90:	0018      	movs	r0, r3
   13e92:	46bd      	mov	sp, r7
   13e94:	bd80      	pop	{r7, pc}
   13e96:	46c0      	nop			; (mov r8, r8)
   13e98:	20000435 	.word	0x20000435

00013e9c <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   13e9c:	b580      	push	{r7, lr}
   13e9e:	b082      	sub	sp, #8
   13ea0:	af00      	add	r7, sp, #0
   13ea2:	0002      	movs	r2, r0
   13ea4:	1dfb      	adds	r3, r7, #7
   13ea6:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   13ea8:	4b03      	ldr	r3, [pc, #12]	; (13eb8 <I2cSetTaskErrorStatus+0x1c>)
   13eaa:	1dfa      	adds	r2, r7, #7
   13eac:	7812      	ldrb	r2, [r2, #0]
   13eae:	701a      	strb	r2, [r3, #0]
}
   13eb0:	46c0      	nop			; (mov r8, r8)
   13eb2:	46bd      	mov	sp, r7
   13eb4:	b002      	add	sp, #8
   13eb6:	bd80      	pop	{r7, pc}
   13eb8:	20000435 	.word	0x20000435

00013ebc <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   13ebc:	b580      	push	{r7, lr}
   13ebe:	b084      	sub	sp, #16
   13ec0:	af00      	add	r7, sp, #0
   13ec2:	6078      	str	r0, [r7, #4]
   13ec4:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   13ec6:	2300      	movs	r3, #0
   13ec8:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   13eca:	2300      	movs	r3, #0
   13ecc:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13ece:	2396      	movs	r3, #150	; 0x96
   13ed0:	005b      	lsls	r3, r3, #1
   13ed2:	0018      	movs	r0, r3
   13ed4:	4b28      	ldr	r3, [pc, #160]	; (13f78 <I2cWriteDataWait+0xbc>)
   13ed6:	4798      	blx	r3
   13ed8:	0003      	movs	r3, r0
   13eda:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13edc:	68fb      	ldr	r3, [r7, #12]
   13ede:	2b00      	cmp	r3, #0
   13ee0:	d138      	bne.n	13f54 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   13ee2:	2308      	movs	r3, #8
   13ee4:	18fb      	adds	r3, r7, r3
   13ee6:	0018      	movs	r0, r3
   13ee8:	4b24      	ldr	r3, [pc, #144]	; (13f7c <I2cWriteDataWait+0xc0>)
   13eea:	4798      	blx	r3
   13eec:	0003      	movs	r3, r0
   13eee:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13ef0:	68fb      	ldr	r3, [r7, #12]
   13ef2:	2b00      	cmp	r3, #0
   13ef4:	d130      	bne.n	13f58 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   13ef6:	687b      	ldr	r3, [r7, #4]
   13ef8:	0018      	movs	r0, r3
   13efa:	4b21      	ldr	r3, [pc, #132]	; (13f80 <I2cWriteDataWait+0xc4>)
   13efc:	4798      	blx	r3
   13efe:	0003      	movs	r3, r0
   13f00:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   13f02:	68fb      	ldr	r3, [r7, #12]
   13f04:	2b00      	cmp	r3, #0
   13f06:	d12a      	bne.n	13f5e <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13f08:	68bb      	ldr	r3, [r7, #8]
   13f0a:	683a      	ldr	r2, [r7, #0]
   13f0c:	0011      	movs	r1, r2
   13f0e:	0018      	movs	r0, r3
   13f10:	4b1c      	ldr	r3, [pc, #112]	; (13f84 <I2cWriteDataWait+0xc8>)
   13f12:	4798      	blx	r3
   13f14:	0003      	movs	r3, r0
   13f16:	2b01      	cmp	r3, #1
   13f18:	d111      	bne.n	13f3e <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13f1a:	4b1b      	ldr	r3, [pc, #108]	; (13f88 <I2cWriteDataWait+0xcc>)
   13f1c:	4798      	blx	r3
   13f1e:	1e03      	subs	r3, r0, #0
   13f20:	d011      	beq.n	13f46 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   13f22:	2000      	movs	r0, #0
   13f24:	4b19      	ldr	r3, [pc, #100]	; (13f8c <I2cWriteDataWait+0xd0>)
   13f26:	4798      	blx	r3
            if (error != ERROR_NONE) {
   13f28:	68fb      	ldr	r3, [r7, #12]
   13f2a:	2b00      	cmp	r3, #0
   13f2c:	d003      	beq.n	13f36 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   13f2e:	2321      	movs	r3, #33	; 0x21
   13f30:	425b      	negs	r3, r3
   13f32:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   13f34:	e014      	b.n	13f60 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   13f36:	2303      	movs	r3, #3
   13f38:	425b      	negs	r3, r3
   13f3a:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   13f3c:	e010      	b.n	13f60 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   13f3e:	2303      	movs	r3, #3
   13f40:	425b      	negs	r3, r3
   13f42:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   13f44:	e00c      	b.n	13f60 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   13f46:	4b12      	ldr	r3, [pc, #72]	; (13f90 <I2cWriteDataWait+0xd4>)
   13f48:	4798      	blx	r3
   13f4a:	0002      	movs	r2, r0
   13f4c:	68fb      	ldr	r3, [r7, #12]
   13f4e:	4313      	orrs	r3, r2
   13f50:	60fb      	str	r3, [r7, #12]
   13f52:	e002      	b.n	13f5a <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13f54:	46c0      	nop			; (mov r8, r8)
   13f56:	e000      	b.n	13f5a <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13f58:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   13f5a:	68fb      	ldr	r3, [r7, #12]
   13f5c:	e007      	b.n	13f6e <I2cWriteDataWait+0xb2>
        goto exitError0;
   13f5e:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   13f60:	4b0b      	ldr	r3, [pc, #44]	; (13f90 <I2cWriteDataWait+0xd4>)
   13f62:	4798      	blx	r3
   13f64:	0002      	movs	r2, r0
   13f66:	68fb      	ldr	r3, [r7, #12]
   13f68:	4313      	orrs	r3, r2
   13f6a:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   13f6c:	68fb      	ldr	r3, [r7, #12]
}
   13f6e:	0018      	movs	r0, r3
   13f70:	46bd      	mov	sp, r7
   13f72:	b004      	add	sp, #16
   13f74:	bd80      	pop	{r7, pc}
   13f76:	46c0      	nop			; (mov r8, r8)
   13f78:	00013e2d 	.word	0x00013e2d
   13f7c:	00013e65 	.word	0x00013e65
   13f80:	00013d05 	.word	0x00013d05
   13f84:	0001b1ad 	.word	0x0001b1ad
   13f88:	00013e89 	.word	0x00013e89
   13f8c:	00013e9d 	.word	0x00013e9d
   13f90:	00013df5 	.word	0x00013df5

00013f94 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   13f94:	b580      	push	{r7, lr}
   13f96:	b086      	sub	sp, #24
   13f98:	af00      	add	r7, sp, #0
   13f9a:	60f8      	str	r0, [r7, #12]
   13f9c:	60b9      	str	r1, [r7, #8]
   13f9e:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   13fa0:	2300      	movs	r3, #0
   13fa2:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   13fa4:	2300      	movs	r3, #0
   13fa6:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13fa8:	2396      	movs	r3, #150	; 0x96
   13faa:	005b      	lsls	r3, r3, #1
   13fac:	0018      	movs	r0, r3
   13fae:	4b39      	ldr	r3, [pc, #228]	; (14094 <I2cReadDataWait+0x100>)
   13fb0:	4798      	blx	r3
   13fb2:	0003      	movs	r3, r0
   13fb4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   13fb6:	697b      	ldr	r3, [r7, #20]
   13fb8:	2b00      	cmp	r3, #0
   13fba:	d15c      	bne.n	14076 <I2cReadDataWait+0xe2>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   13fbc:	2310      	movs	r3, #16
   13fbe:	18fb      	adds	r3, r7, r3
   13fc0:	0018      	movs	r0, r3
   13fc2:	4b35      	ldr	r3, [pc, #212]	; (14098 <I2cReadDataWait+0x104>)
   13fc4:	4798      	blx	r3
   13fc6:	0003      	movs	r3, r0
   13fc8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   13fca:	697b      	ldr	r3, [r7, #20]
   13fcc:	2b00      	cmp	r3, #0
   13fce:	d154      	bne.n	1407a <I2cReadDataWait+0xe6>

	if(data->msgOut != NULL && data->lenOut != 0 ){
   13fd0:	68fb      	ldr	r3, [r7, #12]
   13fd2:	685b      	ldr	r3, [r3, #4]
   13fd4:	2b00      	cmp	r3, #0
   13fd6:	d024      	beq.n	14022 <I2cReadDataWait+0x8e>
   13fd8:	68fb      	ldr	r3, [r7, #12]
   13fda:	89db      	ldrh	r3, [r3, #14]
   13fdc:	2b00      	cmp	r3, #0
   13fde:	d020      	beq.n	14022 <I2cReadDataWait+0x8e>
		//---2. Initiate sending data
		error = I2cWriteData(data);
   13fe0:	68fb      	ldr	r3, [r7, #12]
   13fe2:	0018      	movs	r0, r3
   13fe4:	4b2d      	ldr	r3, [pc, #180]	; (1409c <I2cReadDataWait+0x108>)
   13fe6:	4798      	blx	r3
   13fe8:	0003      	movs	r3, r0
   13fea:	617b      	str	r3, [r7, #20]
		if (ERROR_NONE != error) {
   13fec:	697b      	ldr	r3, [r7, #20]
   13fee:	2b00      	cmp	r3, #0
   13ff0:	d146      	bne.n	14080 <I2cReadDataWait+0xec>
			goto exitError0;
		}

		//---2. Wait for binary semaphore to tell us that we are done!
		if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13ff2:	693b      	ldr	r3, [r7, #16]
   13ff4:	687a      	ldr	r2, [r7, #4]
   13ff6:	0011      	movs	r1, r2
   13ff8:	0018      	movs	r0, r3
   13ffa:	4b29      	ldr	r3, [pc, #164]	; (140a0 <I2cReadDataWait+0x10c>)
   13ffc:	4798      	blx	r3
   13ffe:	0003      	movs	r3, r0
   14000:	2b01      	cmp	r3, #1
   14002:	d10a      	bne.n	1401a <I2cReadDataWait+0x86>
			/* The transmission ended as expected. We now delay until the I2C sensor is finished */
			if (I2cGetTaskErrorStatus()) {
   14004:	4b27      	ldr	r3, [pc, #156]	; (140a4 <I2cReadDataWait+0x110>)
   14006:	4798      	blx	r3
   14008:	1e03      	subs	r3, r0, #0
   1400a:	d00a      	beq.n	14022 <I2cReadDataWait+0x8e>
				I2cSetTaskErrorStatus(false);
   1400c:	2000      	movs	r0, #0
   1400e:	4b26      	ldr	r3, [pc, #152]	; (140a8 <I2cReadDataWait+0x114>)
   14010:	4798      	blx	r3
				error = ERROR_ABORTED;
   14012:	2303      	movs	r3, #3
   14014:	425b      	negs	r3, r3
   14016:	617b      	str	r3, [r7, #20]
				goto exitError0;
   14018:	e035      	b.n	14086 <I2cReadDataWait+0xf2>
			}
		} else {
			/* The call to ulTaskNotifyTake() timed out. */
			error = ERR_TIMEOUT;
   1401a:	2303      	movs	r3, #3
   1401c:	425b      	negs	r3, r3
   1401e:	617b      	str	r3, [r7, #20]
			goto exitError0;
   14020:	e031      	b.n	14086 <I2cReadDataWait+0xf2>
		}
	}
	
	vTaskDelay(delay);
   14022:	68bb      	ldr	r3, [r7, #8]
   14024:	0018      	movs	r0, r3
   14026:	4b21      	ldr	r3, [pc, #132]	; (140ac <I2cReadDataWait+0x118>)
   14028:	4798      	blx	r3
	
    //---6. Initiate Read data
    error = I2cReadData(data);
   1402a:	68fb      	ldr	r3, [r7, #12]
   1402c:	0018      	movs	r0, r3
   1402e:	4b20      	ldr	r3, [pc, #128]	; (140b0 <I2cReadDataWait+0x11c>)
   14030:	4798      	blx	r3
   14032:	0003      	movs	r3, r0
   14034:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14036:	697b      	ldr	r3, [r7, #20]
   14038:	2b00      	cmp	r3, #0
   1403a:	d123      	bne.n	14084 <I2cReadDataWait+0xf0>
        goto exitError0;
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1403c:	693b      	ldr	r3, [r7, #16]
   1403e:	687a      	ldr	r2, [r7, #4]
   14040:	0011      	movs	r1, r2
   14042:	0018      	movs	r0, r3
   14044:	4b16      	ldr	r3, [pc, #88]	; (140a0 <I2cReadDataWait+0x10c>)
   14046:	4798      	blx	r3
   14048:	0003      	movs	r3, r0
   1404a:	2b01      	cmp	r3, #1
   1404c:	d10a      	bne.n	14064 <I2cReadDataWait+0xd0>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1404e:	4b15      	ldr	r3, [pc, #84]	; (140a4 <I2cReadDataWait+0x110>)
   14050:	4798      	blx	r3
   14052:	1e03      	subs	r3, r0, #0
   14054:	d00a      	beq.n	1406c <I2cReadDataWait+0xd8>
            I2cSetTaskErrorStatus(false);
   14056:	2000      	movs	r0, #0
   14058:	4b13      	ldr	r3, [pc, #76]	; (140a8 <I2cReadDataWait+0x114>)
   1405a:	4798      	blx	r3
            error = ERROR_ABORTED;
   1405c:	2303      	movs	r3, #3
   1405e:	425b      	negs	r3, r3
   14060:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14062:	e010      	b.n	14086 <I2cReadDataWait+0xf2>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14064:	2303      	movs	r3, #3
   14066:	425b      	negs	r3, r3
   14068:	617b      	str	r3, [r7, #20]
        goto exitError0;
   1406a:	e00c      	b.n	14086 <I2cReadDataWait+0xf2>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   1406c:	4b11      	ldr	r3, [pc, #68]	; (140b4 <I2cReadDataWait+0x120>)
   1406e:	4798      	blx	r3
   14070:	0003      	movs	r3, r0
   14072:	617b      	str	r3, [r7, #20]
   14074:	e002      	b.n	1407c <I2cReadDataWait+0xe8>
    if (ERROR_NONE != error) goto exit;
   14076:	46c0      	nop			; (mov r8, r8)
   14078:	e000      	b.n	1407c <I2cReadDataWait+0xe8>
    if (ERROR_NONE != error) goto exit;
   1407a:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   1407c:	697b      	ldr	r3, [r7, #20]
   1407e:	e005      	b.n	1408c <I2cReadDataWait+0xf8>
			goto exitError0;
   14080:	46c0      	nop			; (mov r8, r8)
   14082:	e000      	b.n	14086 <I2cReadDataWait+0xf2>
        goto exitError0;
   14084:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14086:	4b0b      	ldr	r3, [pc, #44]	; (140b4 <I2cReadDataWait+0x120>)
   14088:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   1408a:	697b      	ldr	r3, [r7, #20]
}
   1408c:	0018      	movs	r0, r3
   1408e:	46bd      	mov	sp, r7
   14090:	b006      	add	sp, #24
   14092:	bd80      	pop	{r7, pc}
   14094:	00013e2d 	.word	0x00013e2d
   14098:	00013e65 	.word	0x00013e65
   1409c:	00013d05 	.word	0x00013d05
   140a0:	0001b1ad 	.word	0x0001b1ad
   140a4:	00013e89 	.word	0x00013e89
   140a8:	00013e9d 	.word	0x00013e9d
   140ac:	0001bf01 	.word	0x0001bf01
   140b0:	00013d7d 	.word	0x00013d7d
   140b4:	00013df5 	.word	0x00013df5

000140b8 <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   140b8:	b580      	push	{r7, lr}
   140ba:	b086      	sub	sp, #24
   140bc:	af00      	add	r7, sp, #0
   140be:	60f8      	str	r0, [r7, #12]
   140c0:	60b9      	str	r1, [r7, #8]
   140c2:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   140c4:	2300      	movs	r3, #0
   140c6:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   140c8:	2300      	movs	r3, #0
   140ca:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   140cc:	2396      	movs	r3, #150	; 0x96
   140ce:	005b      	lsls	r3, r3, #1
   140d0:	0018      	movs	r0, r3
   140d2:	4b24      	ldr	r3, [pc, #144]	; (14164 <I2cPingAddressWait+0xac>)
   140d4:	4798      	blx	r3
   140d6:	0003      	movs	r3, r0
   140d8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   140da:	697b      	ldr	r3, [r7, #20]
   140dc:	2b00      	cmp	r3, #0
   140de:	d133      	bne.n	14148 <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   140e0:	2310      	movs	r3, #16
   140e2:	18fb      	adds	r3, r7, r3
   140e4:	0018      	movs	r0, r3
   140e6:	4b20      	ldr	r3, [pc, #128]	; (14168 <I2cPingAddressWait+0xb0>)
   140e8:	4798      	blx	r3
   140ea:	0003      	movs	r3, r0
   140ec:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   140ee:	697b      	ldr	r3, [r7, #20]
   140f0:	2b00      	cmp	r3, #0
   140f2:	d12b      	bne.n	1414c <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   140f4:	68fb      	ldr	r3, [r7, #12]
   140f6:	0018      	movs	r0, r3
   140f8:	4b1c      	ldr	r3, [pc, #112]	; (1416c <I2cPingAddressWait+0xb4>)
   140fa:	4798      	blx	r3
   140fc:	0003      	movs	r3, r0
   140fe:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14100:	697b      	ldr	r3, [r7, #20]
   14102:	2b00      	cmp	r3, #0
   14104:	d125      	bne.n	14152 <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14106:	693b      	ldr	r3, [r7, #16]
   14108:	687a      	ldr	r2, [r7, #4]
   1410a:	0011      	movs	r1, r2
   1410c:	0018      	movs	r0, r3
   1410e:	4b18      	ldr	r3, [pc, #96]	; (14170 <I2cPingAddressWait+0xb8>)
   14110:	4798      	blx	r3
   14112:	0003      	movs	r3, r0
   14114:	2b01      	cmp	r3, #1
   14116:	d113      	bne.n	14140 <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14118:	4b16      	ldr	r3, [pc, #88]	; (14174 <I2cPingAddressWait+0xbc>)
   1411a:	4798      	blx	r3
   1411c:	1e03      	subs	r3, r0, #0
   1411e:	d006      	beq.n	1412e <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   14120:	2000      	movs	r0, #0
   14122:	4b15      	ldr	r3, [pc, #84]	; (14178 <I2cPingAddressWait+0xc0>)
   14124:	4798      	blx	r3
            error = ERROR_ABORTED;
   14126:	2303      	movs	r3, #3
   14128:	425b      	negs	r3, r3
   1412a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1412c:	e012      	b.n	14154 <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   1412e:	68bb      	ldr	r3, [r7, #8]
   14130:	0018      	movs	r0, r3
   14132:	4b12      	ldr	r3, [pc, #72]	; (1417c <I2cPingAddressWait+0xc4>)
   14134:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   14136:	4b12      	ldr	r3, [pc, #72]	; (14180 <I2cPingAddressWait+0xc8>)
   14138:	4798      	blx	r3
   1413a:	0003      	movs	r3, r0
   1413c:	617b      	str	r3, [r7, #20]
   1413e:	e006      	b.n	1414e <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   14140:	2303      	movs	r3, #3
   14142:	425b      	negs	r3, r3
   14144:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14146:	e005      	b.n	14154 <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   14148:	46c0      	nop			; (mov r8, r8)
   1414a:	e000      	b.n	1414e <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   1414c:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   1414e:	697b      	ldr	r3, [r7, #20]
   14150:	e003      	b.n	1415a <I2cPingAddressWait+0xa2>
        goto exitError0;
   14152:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   14154:	4b0a      	ldr	r3, [pc, #40]	; (14180 <I2cPingAddressWait+0xc8>)
   14156:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14158:	697b      	ldr	r3, [r7, #20]
   1415a:	0018      	movs	r0, r3
   1415c:	46bd      	mov	sp, r7
   1415e:	b006      	add	sp, #24
   14160:	bd80      	pop	{r7, pc}
   14162:	46c0      	nop			; (mov r8, r8)
   14164:	00013e2d 	.word	0x00013e2d
   14168:	00013e65 	.word	0x00013e65
   1416c:	00013d05 	.word	0x00013d05
   14170:	0001b1ad 	.word	0x0001b1ad
   14174:	00013e89 	.word	0x00013e89
   14178:	00013e9d 	.word	0x00013e9d
   1417c:	0001bf01 	.word	0x0001bf01
   14180:	00013df5 	.word	0x00013df5

00014184 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   14184:	b5b0      	push	{r4, r5, r7, lr}
   14186:	b086      	sub	sp, #24
   14188:	af00      	add	r7, sp, #0
   1418a:	60f8      	str	r0, [r7, #12]
   1418c:	0008      	movs	r0, r1
   1418e:	607a      	str	r2, [r7, #4]
   14190:	0019      	movs	r1, r3
   14192:	230b      	movs	r3, #11
   14194:	18fb      	adds	r3, r7, r3
   14196:	1c02      	adds	r2, r0, #0
   14198:	701a      	strb	r2, [r3, #0]
   1419a:	2308      	movs	r3, #8
   1419c:	18fb      	adds	r3, r7, r3
   1419e:	1c0a      	adds	r2, r1, #0
   141a0:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   141a2:	68fb      	ldr	r3, [r7, #12]
   141a4:	685c      	ldr	r4, [r3, #4]
   141a6:	68fb      	ldr	r3, [r7, #12]
   141a8:	6898      	ldr	r0, [r3, #8]
   141aa:	2308      	movs	r3, #8
   141ac:	18fb      	adds	r3, r7, r3
   141ae:	881d      	ldrh	r5, [r3, #0]
   141b0:	687a      	ldr	r2, [r7, #4]
   141b2:	230b      	movs	r3, #11
   141b4:	18fb      	adds	r3, r7, r3
   141b6:	7819      	ldrb	r1, [r3, #0]
   141b8:	002b      	movs	r3, r5
   141ba:	47a0      	blx	r4
   141bc:	0003      	movs	r3, r0
   141be:	617b      	str	r3, [r7, #20]

  return ret;
   141c0:	697b      	ldr	r3, [r7, #20]
}
   141c2:	0018      	movs	r0, r3
   141c4:	46bd      	mov	sp, r7
   141c6:	b006      	add	sp, #24
   141c8:	bdb0      	pop	{r4, r5, r7, pc}

000141ca <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   141ca:	b5b0      	push	{r4, r5, r7, lr}
   141cc:	b086      	sub	sp, #24
   141ce:	af00      	add	r7, sp, #0
   141d0:	60f8      	str	r0, [r7, #12]
   141d2:	0008      	movs	r0, r1
   141d4:	607a      	str	r2, [r7, #4]
   141d6:	0019      	movs	r1, r3
   141d8:	230b      	movs	r3, #11
   141da:	18fb      	adds	r3, r7, r3
   141dc:	1c02      	adds	r2, r0, #0
   141de:	701a      	strb	r2, [r3, #0]
   141e0:	2308      	movs	r3, #8
   141e2:	18fb      	adds	r3, r7, r3
   141e4:	1c0a      	adds	r2, r1, #0
   141e6:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   141e8:	68fb      	ldr	r3, [r7, #12]
   141ea:	681c      	ldr	r4, [r3, #0]
   141ec:	68fb      	ldr	r3, [r7, #12]
   141ee:	6898      	ldr	r0, [r3, #8]
   141f0:	2308      	movs	r3, #8
   141f2:	18fb      	adds	r3, r7, r3
   141f4:	881d      	ldrh	r5, [r3, #0]
   141f6:	687a      	ldr	r2, [r7, #4]
   141f8:	230b      	movs	r3, #11
   141fa:	18fb      	adds	r3, r7, r3
   141fc:	7819      	ldrb	r1, [r3, #0]
   141fe:	002b      	movs	r3, r5
   14200:	47a0      	blx	r4
   14202:	0003      	movs	r3, r0
   14204:	617b      	str	r3, [r7, #20]

  return ret;
   14206:	697b      	ldr	r3, [r7, #20]
}
   14208:	0018      	movs	r0, r3
   1420a:	46bd      	mov	sp, r7
   1420c:	b006      	add	sp, #24
   1420e:	bdb0      	pop	{r4, r5, r7, pc}

00014210 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   14210:	b580      	push	{r7, lr}
   14212:	b082      	sub	sp, #8
   14214:	af00      	add	r7, sp, #0
   14216:	0002      	movs	r2, r0
   14218:	1dbb      	adds	r3, r7, #6
   1421a:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   1421c:	1dbb      	adds	r3, r7, #6
   1421e:	2200      	movs	r2, #0
   14220:	5e9a      	ldrsh	r2, [r3, r2]
   14222:	4b06      	ldr	r3, [pc, #24]	; (1423c <lsm6dso_from_fs2_to_mg+0x2c>)
   14224:	0010      	movs	r0, r2
   14226:	4798      	blx	r3
   14228:	1c02      	adds	r2, r0, #0
   1422a:	4b05      	ldr	r3, [pc, #20]	; (14240 <lsm6dso_from_fs2_to_mg+0x30>)
   1422c:	4905      	ldr	r1, [pc, #20]	; (14244 <lsm6dso_from_fs2_to_mg+0x34>)
   1422e:	1c10      	adds	r0, r2, #0
   14230:	4798      	blx	r3
   14232:	1c03      	adds	r3, r0, #0
}
   14234:	1c18      	adds	r0, r3, #0
   14236:	46bd      	mov	sp, r7
   14238:	b002      	add	sp, #8
   1423a:	bd80      	pop	{r7, pc}
   1423c:	00032971 	.word	0x00032971
   14240:	000326f1 	.word	0x000326f1
   14244:	3d79db23 	.word	0x3d79db23

00014248 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   14248:	b590      	push	{r4, r7, lr}
   1424a:	b085      	sub	sp, #20
   1424c:	af00      	add	r7, sp, #0
   1424e:	6078      	str	r0, [r7, #4]
   14250:	000a      	movs	r2, r1
   14252:	1cfb      	adds	r3, r7, #3
   14254:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14256:	2308      	movs	r3, #8
   14258:	18fa      	adds	r2, r7, r3
   1425a:	6878      	ldr	r0, [r7, #4]
   1425c:	2301      	movs	r3, #1
   1425e:	2110      	movs	r1, #16
   14260:	4c12      	ldr	r4, [pc, #72]	; (142ac <lsm6dso_xl_full_scale_set+0x64>)
   14262:	47a0      	blx	r4
   14264:	0003      	movs	r3, r0
   14266:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14268:	68fb      	ldr	r3, [r7, #12]
   1426a:	2b00      	cmp	r3, #0
   1426c:	d119      	bne.n	142a2 <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   1426e:	1cfb      	adds	r3, r7, #3
   14270:	781b      	ldrb	r3, [r3, #0]
   14272:	2203      	movs	r2, #3
   14274:	4013      	ands	r3, r2
   14276:	b2da      	uxtb	r2, r3
   14278:	2308      	movs	r3, #8
   1427a:	18fb      	adds	r3, r7, r3
   1427c:	2103      	movs	r1, #3
   1427e:	400a      	ands	r2, r1
   14280:	0090      	lsls	r0, r2, #2
   14282:	781a      	ldrb	r2, [r3, #0]
   14284:	210c      	movs	r1, #12
   14286:	438a      	bics	r2, r1
   14288:	1c11      	adds	r1, r2, #0
   1428a:	1c02      	adds	r2, r0, #0
   1428c:	430a      	orrs	r2, r1
   1428e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14290:	2308      	movs	r3, #8
   14292:	18fa      	adds	r2, r7, r3
   14294:	6878      	ldr	r0, [r7, #4]
   14296:	2301      	movs	r3, #1
   14298:	2110      	movs	r1, #16
   1429a:	4c05      	ldr	r4, [pc, #20]	; (142b0 <lsm6dso_xl_full_scale_set+0x68>)
   1429c:	47a0      	blx	r4
   1429e:	0003      	movs	r3, r0
   142a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   142a2:	68fb      	ldr	r3, [r7, #12]
}
   142a4:	0018      	movs	r0, r3
   142a6:	46bd      	mov	sp, r7
   142a8:	b005      	add	sp, #20
   142aa:	bd90      	pop	{r4, r7, pc}
   142ac:	00014185 	.word	0x00014185
   142b0:	000141cb 	.word	0x000141cb

000142b4 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   142b4:	b590      	push	{r4, r7, lr}
   142b6:	b087      	sub	sp, #28
   142b8:	af00      	add	r7, sp, #0
   142ba:	6078      	str	r0, [r7, #4]
   142bc:	000a      	movs	r2, r1
   142be:	1cfb      	adds	r3, r7, #3
   142c0:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   142c2:	2317      	movs	r3, #23
   142c4:	18fb      	adds	r3, r7, r3
   142c6:	1cfa      	adds	r2, r7, #3
   142c8:	7812      	ldrb	r2, [r2, #0]
   142ca:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   142cc:	230c      	movs	r3, #12
   142ce:	18fa      	adds	r2, r7, r3
   142d0:	687b      	ldr	r3, [r7, #4]
   142d2:	0011      	movs	r1, r2
   142d4:	0018      	movs	r0, r3
   142d6:	4ba4      	ldr	r3, [pc, #656]	; (14568 <lsm6dso_xl_data_rate_set+0x2b4>)
   142d8:	4798      	blx	r3
   142da:	0003      	movs	r3, r0
   142dc:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   142de:	693b      	ldr	r3, [r7, #16]
   142e0:	2b00      	cmp	r3, #0
   142e2:	d000      	beq.n	142e6 <lsm6dso_xl_data_rate_set+0x32>
   142e4:	e113      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   142e6:	230c      	movs	r3, #12
   142e8:	18fb      	adds	r3, r7, r3
   142ea:	781b      	ldrb	r3, [r3, #0]
   142ec:	07db      	lsls	r3, r3, #31
   142ee:	0fdb      	lsrs	r3, r3, #31
   142f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   142f2:	230c      	movs	r3, #12
   142f4:	18fb      	adds	r3, r7, r3
   142f6:	781b      	ldrb	r3, [r3, #0]
   142f8:	079b      	lsls	r3, r3, #30
   142fa:	0fdb      	lsrs	r3, r3, #31
   142fc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   142fe:	4313      	orrs	r3, r2
   14300:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14302:	230c      	movs	r3, #12
   14304:	18fb      	adds	r3, r7, r3
   14306:	781b      	ldrb	r3, [r3, #0]
   14308:	075b      	lsls	r3, r3, #29
   1430a:	0fdb      	lsrs	r3, r3, #31
   1430c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1430e:	4313      	orrs	r3, r2
   14310:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14312:	230c      	movs	r3, #12
   14314:	18fb      	adds	r3, r7, r3
   14316:	781b      	ldrb	r3, [r3, #0]
   14318:	071b      	lsls	r3, r3, #28
   1431a:	0fdb      	lsrs	r3, r3, #31
   1431c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1431e:	4313      	orrs	r3, r2
   14320:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14322:	230c      	movs	r3, #12
   14324:	18fb      	adds	r3, r7, r3
   14326:	781b      	ldrb	r3, [r3, #0]
   14328:	06db      	lsls	r3, r3, #27
   1432a:	0fdb      	lsrs	r3, r3, #31
   1432c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1432e:	4313      	orrs	r3, r2
   14330:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14332:	230c      	movs	r3, #12
   14334:	18fb      	adds	r3, r7, r3
   14336:	781b      	ldrb	r3, [r3, #0]
   14338:	069b      	lsls	r3, r3, #26
   1433a:	0fdb      	lsrs	r3, r3, #31
   1433c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1433e:	4313      	orrs	r3, r2
   14340:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14342:	230c      	movs	r3, #12
   14344:	18fb      	adds	r3, r7, r3
   14346:	781b      	ldrb	r3, [r3, #0]
   14348:	065b      	lsls	r3, r3, #25
   1434a:	0fdb      	lsrs	r3, r3, #31
   1434c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1434e:	4313      	orrs	r3, r2
   14350:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14352:	230c      	movs	r3, #12
   14354:	18fb      	adds	r3, r7, r3
   14356:	781b      	ldrb	r3, [r3, #0]
   14358:	061b      	lsls	r3, r3, #24
   1435a:	0fdb      	lsrs	r3, r3, #31
   1435c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1435e:	4313      	orrs	r3, r2
   14360:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14362:	230c      	movs	r3, #12
   14364:	18fb      	adds	r3, r7, r3
   14366:	785b      	ldrb	r3, [r3, #1]
   14368:	07db      	lsls	r3, r3, #31
   1436a:	0fdb      	lsrs	r3, r3, #31
   1436c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1436e:	4313      	orrs	r3, r2
   14370:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   14372:	230c      	movs	r3, #12
   14374:	18fb      	adds	r3, r7, r3
   14376:	785b      	ldrb	r3, [r3, #1]
   14378:	079b      	lsls	r3, r3, #30
   1437a:	0fdb      	lsrs	r3, r3, #31
   1437c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1437e:	4313      	orrs	r3, r2
   14380:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   14382:	230c      	movs	r3, #12
   14384:	18fb      	adds	r3, r7, r3
   14386:	785b      	ldrb	r3, [r3, #1]
   14388:	075b      	lsls	r3, r3, #29
   1438a:	0fdb      	lsrs	r3, r3, #31
   1438c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1438e:	4313      	orrs	r3, r2
   14390:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   14392:	230c      	movs	r3, #12
   14394:	18fb      	adds	r3, r7, r3
   14396:	785b      	ldrb	r3, [r3, #1]
   14398:	071b      	lsls	r3, r3, #28
   1439a:	0fdb      	lsrs	r3, r3, #31
   1439c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1439e:	4313      	orrs	r3, r2
   143a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   143a2:	230c      	movs	r3, #12
   143a4:	18fb      	adds	r3, r7, r3
   143a6:	785b      	ldrb	r3, [r3, #1]
   143a8:	06db      	lsls	r3, r3, #27
   143aa:	0fdb      	lsrs	r3, r3, #31
   143ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   143ae:	4313      	orrs	r3, r2
   143b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   143b2:	230c      	movs	r3, #12
   143b4:	18fb      	adds	r3, r7, r3
   143b6:	785b      	ldrb	r3, [r3, #1]
   143b8:	069b      	lsls	r3, r3, #26
   143ba:	0fdb      	lsrs	r3, r3, #31
   143bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   143be:	4313      	orrs	r3, r2
   143c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   143c2:	230c      	movs	r3, #12
   143c4:	18fb      	adds	r3, r7, r3
   143c6:	785b      	ldrb	r3, [r3, #1]
   143c8:	065b      	lsls	r3, r3, #25
   143ca:	0fdb      	lsrs	r3, r3, #31
   143cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   143ce:	4313      	orrs	r3, r2
   143d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   143d2:	230c      	movs	r3, #12
   143d4:	18fb      	adds	r3, r7, r3
   143d6:	785b      	ldrb	r3, [r3, #1]
   143d8:	061b      	lsls	r3, r3, #24
   143da:	0fdb      	lsrs	r3, r3, #31
   143dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   143de:	4313      	orrs	r3, r2
   143e0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   143e2:	2b01      	cmp	r3, #1
   143e4:	d000      	beq.n	143e8 <lsm6dso_xl_data_rate_set+0x134>
   143e6:	e092      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   143e8:	230b      	movs	r3, #11
   143ea:	18fa      	adds	r2, r7, r3
   143ec:	687b      	ldr	r3, [r7, #4]
   143ee:	0011      	movs	r1, r2
   143f0:	0018      	movs	r0, r3
   143f2:	4b5e      	ldr	r3, [pc, #376]	; (1456c <lsm6dso_xl_data_rate_set+0x2b8>)
   143f4:	4798      	blx	r3
   143f6:	0003      	movs	r3, r0
   143f8:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   143fa:	693b      	ldr	r3, [r7, #16]
   143fc:	2b00      	cmp	r3, #0
   143fe:	d000      	beq.n	14402 <lsm6dso_xl_data_rate_set+0x14e>
   14400:	e085      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   14402:	230b      	movs	r3, #11
   14404:	18fb      	adds	r3, r7, r3
   14406:	781b      	ldrb	r3, [r3, #0]
   14408:	2b01      	cmp	r3, #1
   1440a:	d017      	beq.n	1443c <lsm6dso_xl_data_rate_set+0x188>
   1440c:	dc02      	bgt.n	14414 <lsm6dso_xl_data_rate_set+0x160>
   1440e:	2b00      	cmp	r3, #0
   14410:	d005      	beq.n	1441e <lsm6dso_xl_data_rate_set+0x16a>
   14412:	e076      	b.n	14502 <lsm6dso_xl_data_rate_set+0x24e>
   14414:	2b02      	cmp	r3, #2
   14416:	d029      	beq.n	1446c <lsm6dso_xl_data_rate_set+0x1b8>
   14418:	2b03      	cmp	r3, #3
   1441a:	d048      	beq.n	144ae <lsm6dso_xl_data_rate_set+0x1fa>
   1441c:	e071      	b.n	14502 <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   1441e:	1cfb      	adds	r3, r7, #3
   14420:	781b      	ldrb	r3, [r3, #0]
   14422:	2b00      	cmp	r3, #0
   14424:	d104      	bne.n	14430 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   14426:	2317      	movs	r3, #23
   14428:	18fb      	adds	r3, r7, r3
   1442a:	2201      	movs	r2, #1
   1442c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1442e:	e06e      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14430:	2317      	movs	r3, #23
   14432:	18fb      	adds	r3, r7, r3
   14434:	1cfa      	adds	r2, r7, #3
   14436:	7812      	ldrb	r2, [r2, #0]
   14438:	701a      	strb	r2, [r3, #0]
            break;
   1443a:	e068      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1443c:	1cfb      	adds	r3, r7, #3
   1443e:	781b      	ldrb	r3, [r3, #0]
   14440:	2b00      	cmp	r3, #0
   14442:	d104      	bne.n	1444e <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14444:	2317      	movs	r3, #23
   14446:	18fb      	adds	r3, r7, r3
   14448:	2202      	movs	r2, #2
   1444a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1444c:	e05f      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1444e:	1cfb      	adds	r3, r7, #3
   14450:	781b      	ldrb	r3, [r3, #0]
   14452:	2b01      	cmp	r3, #1
   14454:	d104      	bne.n	14460 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   14456:	2317      	movs	r3, #23
   14458:	18fb      	adds	r3, r7, r3
   1445a:	2202      	movs	r2, #2
   1445c:	701a      	strb	r2, [r3, #0]
            break;
   1445e:	e056      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   14460:	2317      	movs	r3, #23
   14462:	18fb      	adds	r3, r7, r3
   14464:	1cfa      	adds	r2, r7, #3
   14466:	7812      	ldrb	r2, [r2, #0]
   14468:	701a      	strb	r2, [r3, #0]
            break;
   1446a:	e050      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1446c:	1cfb      	adds	r3, r7, #3
   1446e:	781b      	ldrb	r3, [r3, #0]
   14470:	2b00      	cmp	r3, #0
   14472:	d104      	bne.n	1447e <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14474:	2317      	movs	r3, #23
   14476:	18fb      	adds	r3, r7, r3
   14478:	2203      	movs	r2, #3
   1447a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1447c:	e047      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1447e:	1cfb      	adds	r3, r7, #3
   14480:	781b      	ldrb	r3, [r3, #0]
   14482:	2b01      	cmp	r3, #1
   14484:	d104      	bne.n	14490 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14486:	2317      	movs	r3, #23
   14488:	18fb      	adds	r3, r7, r3
   1448a:	2203      	movs	r2, #3
   1448c:	701a      	strb	r2, [r3, #0]
            break;
   1448e:	e03e      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   14490:	1cfb      	adds	r3, r7, #3
   14492:	781b      	ldrb	r3, [r3, #0]
   14494:	2b02      	cmp	r3, #2
   14496:	d104      	bne.n	144a2 <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   14498:	2317      	movs	r3, #23
   1449a:	18fb      	adds	r3, r7, r3
   1449c:	2203      	movs	r2, #3
   1449e:	701a      	strb	r2, [r3, #0]
            break;
   144a0:	e035      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   144a2:	2317      	movs	r3, #23
   144a4:	18fb      	adds	r3, r7, r3
   144a6:	1cfa      	adds	r2, r7, #3
   144a8:	7812      	ldrb	r2, [r2, #0]
   144aa:	701a      	strb	r2, [r3, #0]
            break;
   144ac:	e02f      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   144ae:	1cfb      	adds	r3, r7, #3
   144b0:	781b      	ldrb	r3, [r3, #0]
   144b2:	2b00      	cmp	r3, #0
   144b4:	d104      	bne.n	144c0 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   144b6:	2317      	movs	r3, #23
   144b8:	18fb      	adds	r3, r7, r3
   144ba:	2204      	movs	r2, #4
   144bc:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   144be:	e026      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   144c0:	1cfb      	adds	r3, r7, #3
   144c2:	781b      	ldrb	r3, [r3, #0]
   144c4:	2b01      	cmp	r3, #1
   144c6:	d104      	bne.n	144d2 <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   144c8:	2317      	movs	r3, #23
   144ca:	18fb      	adds	r3, r7, r3
   144cc:	2204      	movs	r2, #4
   144ce:	701a      	strb	r2, [r3, #0]
            break;
   144d0:	e01d      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   144d2:	1cfb      	adds	r3, r7, #3
   144d4:	781b      	ldrb	r3, [r3, #0]
   144d6:	2b02      	cmp	r3, #2
   144d8:	d104      	bne.n	144e4 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   144da:	2317      	movs	r3, #23
   144dc:	18fb      	adds	r3, r7, r3
   144de:	2204      	movs	r2, #4
   144e0:	701a      	strb	r2, [r3, #0]
            break;
   144e2:	e014      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   144e4:	1cfb      	adds	r3, r7, #3
   144e6:	781b      	ldrb	r3, [r3, #0]
   144e8:	2b03      	cmp	r3, #3
   144ea:	d104      	bne.n	144f6 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   144ec:	2317      	movs	r3, #23
   144ee:	18fb      	adds	r3, r7, r3
   144f0:	2204      	movs	r2, #4
   144f2:	701a      	strb	r2, [r3, #0]
            break;
   144f4:	e00b      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   144f6:	2317      	movs	r3, #23
   144f8:	18fb      	adds	r3, r7, r3
   144fa:	1cfa      	adds	r2, r7, #3
   144fc:	7812      	ldrb	r2, [r2, #0]
   144fe:	701a      	strb	r2, [r3, #0]
            break;
   14500:	e005      	b.n	1450e <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   14502:	2317      	movs	r3, #23
   14504:	18fb      	adds	r3, r7, r3
   14506:	1cfa      	adds	r2, r7, #3
   14508:	7812      	ldrb	r2, [r2, #0]
   1450a:	701a      	strb	r2, [r3, #0]
            break;
   1450c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1450e:	693b      	ldr	r3, [r7, #16]
   14510:	2b00      	cmp	r3, #0
   14512:	d108      	bne.n	14526 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14514:	2308      	movs	r3, #8
   14516:	18fa      	adds	r2, r7, r3
   14518:	6878      	ldr	r0, [r7, #4]
   1451a:	2301      	movs	r3, #1
   1451c:	2110      	movs	r1, #16
   1451e:	4c14      	ldr	r4, [pc, #80]	; (14570 <lsm6dso_xl_data_rate_set+0x2bc>)
   14520:	47a0      	blx	r4
   14522:	0003      	movs	r3, r0
   14524:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14526:	693b      	ldr	r3, [r7, #16]
   14528:	2b00      	cmp	r3, #0
   1452a:	d118      	bne.n	1455e <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   1452c:	2317      	movs	r3, #23
   1452e:	18fb      	adds	r3, r7, r3
   14530:	781b      	ldrb	r3, [r3, #0]
   14532:	220f      	movs	r2, #15
   14534:	4013      	ands	r3, r2
   14536:	b2da      	uxtb	r2, r3
   14538:	2308      	movs	r3, #8
   1453a:	18fb      	adds	r3, r7, r3
   1453c:	0110      	lsls	r0, r2, #4
   1453e:	781a      	ldrb	r2, [r3, #0]
   14540:	210f      	movs	r1, #15
   14542:	400a      	ands	r2, r1
   14544:	1c11      	adds	r1, r2, #0
   14546:	1c02      	adds	r2, r0, #0
   14548:	430a      	orrs	r2, r1
   1454a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1454c:	2308      	movs	r3, #8
   1454e:	18fa      	adds	r2, r7, r3
   14550:	6878      	ldr	r0, [r7, #4]
   14552:	2301      	movs	r3, #1
   14554:	2110      	movs	r1, #16
   14556:	4c07      	ldr	r4, [pc, #28]	; (14574 <lsm6dso_xl_data_rate_set+0x2c0>)
   14558:	47a0      	blx	r4
   1455a:	0003      	movs	r3, r0
   1455c:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1455e:	693b      	ldr	r3, [r7, #16]
}
   14560:	0018      	movs	r0, r3
   14562:	46bd      	mov	sp, r7
   14564:	b007      	add	sp, #28
   14566:	bd90      	pop	{r4, r7, pc}
   14568:	00014d91 	.word	0x00014d91
   1456c:	00014de5 	.word	0x00014de5
   14570:	00014185 	.word	0x00014185
   14574:	000141cb 	.word	0x000141cb

00014578 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   14578:	b590      	push	{r4, r7, lr}
   1457a:	b085      	sub	sp, #20
   1457c:	af00      	add	r7, sp, #0
   1457e:	6078      	str	r0, [r7, #4]
   14580:	000a      	movs	r2, r1
   14582:	1cfb      	adds	r3, r7, #3
   14584:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14586:	2308      	movs	r3, #8
   14588:	18fa      	adds	r2, r7, r3
   1458a:	6878      	ldr	r0, [r7, #4]
   1458c:	2301      	movs	r3, #1
   1458e:	2111      	movs	r1, #17
   14590:	4c12      	ldr	r4, [pc, #72]	; (145dc <lsm6dso_gy_full_scale_set+0x64>)
   14592:	47a0      	blx	r4
   14594:	0003      	movs	r3, r0
   14596:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14598:	68fb      	ldr	r3, [r7, #12]
   1459a:	2b00      	cmp	r3, #0
   1459c:	d119      	bne.n	145d2 <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   1459e:	1cfb      	adds	r3, r7, #3
   145a0:	781b      	ldrb	r3, [r3, #0]
   145a2:	2207      	movs	r2, #7
   145a4:	4013      	ands	r3, r2
   145a6:	b2da      	uxtb	r2, r3
   145a8:	2308      	movs	r3, #8
   145aa:	18fb      	adds	r3, r7, r3
   145ac:	2107      	movs	r1, #7
   145ae:	400a      	ands	r2, r1
   145b0:	1890      	adds	r0, r2, r2
   145b2:	781a      	ldrb	r2, [r3, #0]
   145b4:	210e      	movs	r1, #14
   145b6:	438a      	bics	r2, r1
   145b8:	1c11      	adds	r1, r2, #0
   145ba:	1c02      	adds	r2, r0, #0
   145bc:	430a      	orrs	r2, r1
   145be:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   145c0:	2308      	movs	r3, #8
   145c2:	18fa      	adds	r2, r7, r3
   145c4:	6878      	ldr	r0, [r7, #4]
   145c6:	2301      	movs	r3, #1
   145c8:	2111      	movs	r1, #17
   145ca:	4c05      	ldr	r4, [pc, #20]	; (145e0 <lsm6dso_gy_full_scale_set+0x68>)
   145cc:	47a0      	blx	r4
   145ce:	0003      	movs	r3, r0
   145d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   145d2:	68fb      	ldr	r3, [r7, #12]
}
   145d4:	0018      	movs	r0, r3
   145d6:	46bd      	mov	sp, r7
   145d8:	b005      	add	sp, #20
   145da:	bd90      	pop	{r4, r7, pc}
   145dc:	00014185 	.word	0x00014185
   145e0:	000141cb 	.word	0x000141cb

000145e4 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   145e4:	b590      	push	{r4, r7, lr}
   145e6:	b087      	sub	sp, #28
   145e8:	af00      	add	r7, sp, #0
   145ea:	6078      	str	r0, [r7, #4]
   145ec:	000a      	movs	r2, r1
   145ee:	1cfb      	adds	r3, r7, #3
   145f0:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   145f2:	2317      	movs	r3, #23
   145f4:	18fb      	adds	r3, r7, r3
   145f6:	1cfa      	adds	r2, r7, #3
   145f8:	7812      	ldrb	r2, [r2, #0]
   145fa:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   145fc:	230c      	movs	r3, #12
   145fe:	18fa      	adds	r2, r7, r3
   14600:	687b      	ldr	r3, [r7, #4]
   14602:	0011      	movs	r1, r2
   14604:	0018      	movs	r0, r3
   14606:	4ba4      	ldr	r3, [pc, #656]	; (14898 <lsm6dso_gy_data_rate_set+0x2b4>)
   14608:	4798      	blx	r3
   1460a:	0003      	movs	r3, r0
   1460c:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1460e:	693b      	ldr	r3, [r7, #16]
   14610:	2b00      	cmp	r3, #0
   14612:	d000      	beq.n	14616 <lsm6dso_gy_data_rate_set+0x32>
   14614:	e113      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14616:	230c      	movs	r3, #12
   14618:	18fb      	adds	r3, r7, r3
   1461a:	781b      	ldrb	r3, [r3, #0]
   1461c:	07db      	lsls	r3, r3, #31
   1461e:	0fdb      	lsrs	r3, r3, #31
   14620:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   14622:	230c      	movs	r3, #12
   14624:	18fb      	adds	r3, r7, r3
   14626:	781b      	ldrb	r3, [r3, #0]
   14628:	079b      	lsls	r3, r3, #30
   1462a:	0fdb      	lsrs	r3, r3, #31
   1462c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1462e:	4313      	orrs	r3, r2
   14630:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   14632:	230c      	movs	r3, #12
   14634:	18fb      	adds	r3, r7, r3
   14636:	781b      	ldrb	r3, [r3, #0]
   14638:	075b      	lsls	r3, r3, #29
   1463a:	0fdb      	lsrs	r3, r3, #31
   1463c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1463e:	4313      	orrs	r3, r2
   14640:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   14642:	230c      	movs	r3, #12
   14644:	18fb      	adds	r3, r7, r3
   14646:	781b      	ldrb	r3, [r3, #0]
   14648:	071b      	lsls	r3, r3, #28
   1464a:	0fdb      	lsrs	r3, r3, #31
   1464c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1464e:	4313      	orrs	r3, r2
   14650:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   14652:	230c      	movs	r3, #12
   14654:	18fb      	adds	r3, r7, r3
   14656:	781b      	ldrb	r3, [r3, #0]
   14658:	06db      	lsls	r3, r3, #27
   1465a:	0fdb      	lsrs	r3, r3, #31
   1465c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1465e:	4313      	orrs	r3, r2
   14660:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   14662:	230c      	movs	r3, #12
   14664:	18fb      	adds	r3, r7, r3
   14666:	781b      	ldrb	r3, [r3, #0]
   14668:	069b      	lsls	r3, r3, #26
   1466a:	0fdb      	lsrs	r3, r3, #31
   1466c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1466e:	4313      	orrs	r3, r2
   14670:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   14672:	230c      	movs	r3, #12
   14674:	18fb      	adds	r3, r7, r3
   14676:	781b      	ldrb	r3, [r3, #0]
   14678:	065b      	lsls	r3, r3, #25
   1467a:	0fdb      	lsrs	r3, r3, #31
   1467c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1467e:	4313      	orrs	r3, r2
   14680:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   14682:	230c      	movs	r3, #12
   14684:	18fb      	adds	r3, r7, r3
   14686:	781b      	ldrb	r3, [r3, #0]
   14688:	061b      	lsls	r3, r3, #24
   1468a:	0fdb      	lsrs	r3, r3, #31
   1468c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1468e:	4313      	orrs	r3, r2
   14690:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   14692:	230c      	movs	r3, #12
   14694:	18fb      	adds	r3, r7, r3
   14696:	785b      	ldrb	r3, [r3, #1]
   14698:	07db      	lsls	r3, r3, #31
   1469a:	0fdb      	lsrs	r3, r3, #31
   1469c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1469e:	4313      	orrs	r3, r2
   146a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   146a2:	230c      	movs	r3, #12
   146a4:	18fb      	adds	r3, r7, r3
   146a6:	785b      	ldrb	r3, [r3, #1]
   146a8:	079b      	lsls	r3, r3, #30
   146aa:	0fdb      	lsrs	r3, r3, #31
   146ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   146ae:	4313      	orrs	r3, r2
   146b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   146b2:	230c      	movs	r3, #12
   146b4:	18fb      	adds	r3, r7, r3
   146b6:	785b      	ldrb	r3, [r3, #1]
   146b8:	075b      	lsls	r3, r3, #29
   146ba:	0fdb      	lsrs	r3, r3, #31
   146bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   146be:	4313      	orrs	r3, r2
   146c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   146c2:	230c      	movs	r3, #12
   146c4:	18fb      	adds	r3, r7, r3
   146c6:	785b      	ldrb	r3, [r3, #1]
   146c8:	071b      	lsls	r3, r3, #28
   146ca:	0fdb      	lsrs	r3, r3, #31
   146cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   146ce:	4313      	orrs	r3, r2
   146d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   146d2:	230c      	movs	r3, #12
   146d4:	18fb      	adds	r3, r7, r3
   146d6:	785b      	ldrb	r3, [r3, #1]
   146d8:	06db      	lsls	r3, r3, #27
   146da:	0fdb      	lsrs	r3, r3, #31
   146dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   146de:	4313      	orrs	r3, r2
   146e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   146e2:	230c      	movs	r3, #12
   146e4:	18fb      	adds	r3, r7, r3
   146e6:	785b      	ldrb	r3, [r3, #1]
   146e8:	069b      	lsls	r3, r3, #26
   146ea:	0fdb      	lsrs	r3, r3, #31
   146ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   146ee:	4313      	orrs	r3, r2
   146f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   146f2:	230c      	movs	r3, #12
   146f4:	18fb      	adds	r3, r7, r3
   146f6:	785b      	ldrb	r3, [r3, #1]
   146f8:	065b      	lsls	r3, r3, #25
   146fa:	0fdb      	lsrs	r3, r3, #31
   146fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   146fe:	4313      	orrs	r3, r2
   14700:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   14702:	230c      	movs	r3, #12
   14704:	18fb      	adds	r3, r7, r3
   14706:	785b      	ldrb	r3, [r3, #1]
   14708:	061b      	lsls	r3, r3, #24
   1470a:	0fdb      	lsrs	r3, r3, #31
   1470c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1470e:	4313      	orrs	r3, r2
   14710:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   14712:	2b01      	cmp	r3, #1
   14714:	d000      	beq.n	14718 <lsm6dso_gy_data_rate_set+0x134>
   14716:	e092      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   14718:	230b      	movs	r3, #11
   1471a:	18fa      	adds	r2, r7, r3
   1471c:	687b      	ldr	r3, [r7, #4]
   1471e:	0011      	movs	r1, r2
   14720:	0018      	movs	r0, r3
   14722:	4b5e      	ldr	r3, [pc, #376]	; (1489c <lsm6dso_gy_data_rate_set+0x2b8>)
   14724:	4798      	blx	r3
   14726:	0003      	movs	r3, r0
   14728:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   1472a:	693b      	ldr	r3, [r7, #16]
   1472c:	2b00      	cmp	r3, #0
   1472e:	d000      	beq.n	14732 <lsm6dso_gy_data_rate_set+0x14e>
   14730:	e085      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   14732:	230b      	movs	r3, #11
   14734:	18fb      	adds	r3, r7, r3
   14736:	781b      	ldrb	r3, [r3, #0]
   14738:	2b01      	cmp	r3, #1
   1473a:	d017      	beq.n	1476c <lsm6dso_gy_data_rate_set+0x188>
   1473c:	dc02      	bgt.n	14744 <lsm6dso_gy_data_rate_set+0x160>
   1473e:	2b00      	cmp	r3, #0
   14740:	d005      	beq.n	1474e <lsm6dso_gy_data_rate_set+0x16a>
   14742:	e076      	b.n	14832 <lsm6dso_gy_data_rate_set+0x24e>
   14744:	2b02      	cmp	r3, #2
   14746:	d029      	beq.n	1479c <lsm6dso_gy_data_rate_set+0x1b8>
   14748:	2b03      	cmp	r3, #3
   1474a:	d048      	beq.n	147de <lsm6dso_gy_data_rate_set+0x1fa>
   1474c:	e071      	b.n	14832 <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   1474e:	1cfb      	adds	r3, r7, #3
   14750:	781b      	ldrb	r3, [r3, #0]
   14752:	2b00      	cmp	r3, #0
   14754:	d104      	bne.n	14760 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   14756:	2317      	movs	r3, #23
   14758:	18fb      	adds	r3, r7, r3
   1475a:	2201      	movs	r2, #1
   1475c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1475e:	e06e      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14760:	2317      	movs	r3, #23
   14762:	18fb      	adds	r3, r7, r3
   14764:	1cfa      	adds	r2, r7, #3
   14766:	7812      	ldrb	r2, [r2, #0]
   14768:	701a      	strb	r2, [r3, #0]
            break;
   1476a:	e068      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1476c:	1cfb      	adds	r3, r7, #3
   1476e:	781b      	ldrb	r3, [r3, #0]
   14770:	2b00      	cmp	r3, #0
   14772:	d104      	bne.n	1477e <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   14774:	2317      	movs	r3, #23
   14776:	18fb      	adds	r3, r7, r3
   14778:	2202      	movs	r2, #2
   1477a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1477c:	e05f      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1477e:	1cfb      	adds	r3, r7, #3
   14780:	781b      	ldrb	r3, [r3, #0]
   14782:	2b01      	cmp	r3, #1
   14784:	d104      	bne.n	14790 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   14786:	2317      	movs	r3, #23
   14788:	18fb      	adds	r3, r7, r3
   1478a:	2202      	movs	r2, #2
   1478c:	701a      	strb	r2, [r3, #0]
            break;
   1478e:	e056      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14790:	2317      	movs	r3, #23
   14792:	18fb      	adds	r3, r7, r3
   14794:	1cfa      	adds	r2, r7, #3
   14796:	7812      	ldrb	r2, [r2, #0]
   14798:	701a      	strb	r2, [r3, #0]
            break;
   1479a:	e050      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1479c:	1cfb      	adds	r3, r7, #3
   1479e:	781b      	ldrb	r3, [r3, #0]
   147a0:	2b00      	cmp	r3, #0
   147a2:	d104      	bne.n	147ae <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   147a4:	2317      	movs	r3, #23
   147a6:	18fb      	adds	r3, r7, r3
   147a8:	2203      	movs	r2, #3
   147aa:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   147ac:	e047      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   147ae:	1cfb      	adds	r3, r7, #3
   147b0:	781b      	ldrb	r3, [r3, #0]
   147b2:	2b01      	cmp	r3, #1
   147b4:	d104      	bne.n	147c0 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   147b6:	2317      	movs	r3, #23
   147b8:	18fb      	adds	r3, r7, r3
   147ba:	2203      	movs	r2, #3
   147bc:	701a      	strb	r2, [r3, #0]
            break;
   147be:	e03e      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   147c0:	1cfb      	adds	r3, r7, #3
   147c2:	781b      	ldrb	r3, [r3, #0]
   147c4:	2b02      	cmp	r3, #2
   147c6:	d104      	bne.n	147d2 <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   147c8:	2317      	movs	r3, #23
   147ca:	18fb      	adds	r3, r7, r3
   147cc:	2203      	movs	r2, #3
   147ce:	701a      	strb	r2, [r3, #0]
            break;
   147d0:	e035      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   147d2:	2317      	movs	r3, #23
   147d4:	18fb      	adds	r3, r7, r3
   147d6:	1cfa      	adds	r2, r7, #3
   147d8:	7812      	ldrb	r2, [r2, #0]
   147da:	701a      	strb	r2, [r3, #0]
            break;
   147dc:	e02f      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   147de:	1cfb      	adds	r3, r7, #3
   147e0:	781b      	ldrb	r3, [r3, #0]
   147e2:	2b00      	cmp	r3, #0
   147e4:	d104      	bne.n	147f0 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   147e6:	2317      	movs	r3, #23
   147e8:	18fb      	adds	r3, r7, r3
   147ea:	2204      	movs	r2, #4
   147ec:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   147ee:	e026      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   147f0:	1cfb      	adds	r3, r7, #3
   147f2:	781b      	ldrb	r3, [r3, #0]
   147f4:	2b01      	cmp	r3, #1
   147f6:	d104      	bne.n	14802 <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   147f8:	2317      	movs	r3, #23
   147fa:	18fb      	adds	r3, r7, r3
   147fc:	2204      	movs	r2, #4
   147fe:	701a      	strb	r2, [r3, #0]
            break;
   14800:	e01d      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   14802:	1cfb      	adds	r3, r7, #3
   14804:	781b      	ldrb	r3, [r3, #0]
   14806:	2b02      	cmp	r3, #2
   14808:	d104      	bne.n	14814 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1480a:	2317      	movs	r3, #23
   1480c:	18fb      	adds	r3, r7, r3
   1480e:	2204      	movs	r2, #4
   14810:	701a      	strb	r2, [r3, #0]
            break;
   14812:	e014      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   14814:	1cfb      	adds	r3, r7, #3
   14816:	781b      	ldrb	r3, [r3, #0]
   14818:	2b03      	cmp	r3, #3
   1481a:	d104      	bne.n	14826 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   1481c:	2317      	movs	r3, #23
   1481e:	18fb      	adds	r3, r7, r3
   14820:	2204      	movs	r2, #4
   14822:	701a      	strb	r2, [r3, #0]
            break;
   14824:	e00b      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   14826:	2317      	movs	r3, #23
   14828:	18fb      	adds	r3, r7, r3
   1482a:	1cfa      	adds	r2, r7, #3
   1482c:	7812      	ldrb	r2, [r2, #0]
   1482e:	701a      	strb	r2, [r3, #0]
            break;
   14830:	e005      	b.n	1483e <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   14832:	2317      	movs	r3, #23
   14834:	18fb      	adds	r3, r7, r3
   14836:	1cfa      	adds	r2, r7, #3
   14838:	7812      	ldrb	r2, [r2, #0]
   1483a:	701a      	strb	r2, [r3, #0]
            break;
   1483c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1483e:	693b      	ldr	r3, [r7, #16]
   14840:	2b00      	cmp	r3, #0
   14842:	d108      	bne.n	14856 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   14844:	2308      	movs	r3, #8
   14846:	18fa      	adds	r2, r7, r3
   14848:	6878      	ldr	r0, [r7, #4]
   1484a:	2301      	movs	r3, #1
   1484c:	2111      	movs	r1, #17
   1484e:	4c14      	ldr	r4, [pc, #80]	; (148a0 <lsm6dso_gy_data_rate_set+0x2bc>)
   14850:	47a0      	blx	r4
   14852:	0003      	movs	r3, r0
   14854:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   14856:	693b      	ldr	r3, [r7, #16]
   14858:	2b00      	cmp	r3, #0
   1485a:	d118      	bne.n	1488e <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   1485c:	2317      	movs	r3, #23
   1485e:	18fb      	adds	r3, r7, r3
   14860:	781b      	ldrb	r3, [r3, #0]
   14862:	220f      	movs	r2, #15
   14864:	4013      	ands	r3, r2
   14866:	b2da      	uxtb	r2, r3
   14868:	2308      	movs	r3, #8
   1486a:	18fb      	adds	r3, r7, r3
   1486c:	0110      	lsls	r0, r2, #4
   1486e:	781a      	ldrb	r2, [r3, #0]
   14870:	210f      	movs	r1, #15
   14872:	400a      	ands	r2, r1
   14874:	1c11      	adds	r1, r2, #0
   14876:	1c02      	adds	r2, r0, #0
   14878:	430a      	orrs	r2, r1
   1487a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1487c:	2308      	movs	r3, #8
   1487e:	18fa      	adds	r2, r7, r3
   14880:	6878      	ldr	r0, [r7, #4]
   14882:	2301      	movs	r3, #1
   14884:	2111      	movs	r1, #17
   14886:	4c07      	ldr	r4, [pc, #28]	; (148a4 <lsm6dso_gy_data_rate_set+0x2c0>)
   14888:	47a0      	blx	r4
   1488a:	0003      	movs	r3, r0
   1488c:	613b      	str	r3, [r7, #16]
  }

  return ret;
   1488e:	693b      	ldr	r3, [r7, #16]
}
   14890:	0018      	movs	r0, r3
   14892:	46bd      	mov	sp, r7
   14894:	b007      	add	sp, #28
   14896:	bd90      	pop	{r4, r7, pc}
   14898:	00014d91 	.word	0x00014d91
   1489c:	00014de5 	.word	0x00014de5
   148a0:	00014185 	.word	0x00014185
   148a4:	000141cb 	.word	0x000141cb

000148a8 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   148a8:	b590      	push	{r4, r7, lr}
   148aa:	b085      	sub	sp, #20
   148ac:	af00      	add	r7, sp, #0
   148ae:	6078      	str	r0, [r7, #4]
   148b0:	000a      	movs	r2, r1
   148b2:	1cfb      	adds	r3, r7, #3
   148b4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   148b6:	2308      	movs	r3, #8
   148b8:	18fa      	adds	r2, r7, r3
   148ba:	6878      	ldr	r0, [r7, #4]
   148bc:	2301      	movs	r3, #1
   148be:	2112      	movs	r1, #18
   148c0:	4c12      	ldr	r4, [pc, #72]	; (1490c <lsm6dso_block_data_update_set+0x64>)
   148c2:	47a0      	blx	r4
   148c4:	0003      	movs	r3, r0
   148c6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   148c8:	68fb      	ldr	r3, [r7, #12]
   148ca:	2b00      	cmp	r3, #0
   148cc:	d119      	bne.n	14902 <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   148ce:	1cfb      	adds	r3, r7, #3
   148d0:	781b      	ldrb	r3, [r3, #0]
   148d2:	2201      	movs	r2, #1
   148d4:	4013      	ands	r3, r2
   148d6:	b2da      	uxtb	r2, r3
   148d8:	2308      	movs	r3, #8
   148da:	18fb      	adds	r3, r7, r3
   148dc:	2101      	movs	r1, #1
   148de:	400a      	ands	r2, r1
   148e0:	0190      	lsls	r0, r2, #6
   148e2:	781a      	ldrb	r2, [r3, #0]
   148e4:	2140      	movs	r1, #64	; 0x40
   148e6:	438a      	bics	r2, r1
   148e8:	1c11      	adds	r1, r2, #0
   148ea:	1c02      	adds	r2, r0, #0
   148ec:	430a      	orrs	r2, r1
   148ee:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   148f0:	2308      	movs	r3, #8
   148f2:	18fa      	adds	r2, r7, r3
   148f4:	6878      	ldr	r0, [r7, #4]
   148f6:	2301      	movs	r3, #1
   148f8:	2112      	movs	r1, #18
   148fa:	4c05      	ldr	r4, [pc, #20]	; (14910 <lsm6dso_block_data_update_set+0x68>)
   148fc:	47a0      	blx	r4
   148fe:	0003      	movs	r3, r0
   14900:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14902:	68fb      	ldr	r3, [r7, #12]
}
   14904:	0018      	movs	r0, r3
   14906:	46bd      	mov	sp, r7
   14908:	b005      	add	sp, #20
   1490a:	bd90      	pop	{r4, r7, pc}
   1490c:	00014185 	.word	0x00014185
   14910:	000141cb 	.word	0x000141cb

00014914 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   14914:	b590      	push	{r4, r7, lr}
   14916:	b085      	sub	sp, #20
   14918:	af00      	add	r7, sp, #0
   1491a:	6078      	str	r0, [r7, #4]
   1491c:	000a      	movs	r2, r1
   1491e:	1cfb      	adds	r3, r7, #3
   14920:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   14922:	2308      	movs	r3, #8
   14924:	18fa      	adds	r2, r7, r3
   14926:	6878      	ldr	r0, [r7, #4]
   14928:	2301      	movs	r3, #1
   1492a:	2115      	movs	r1, #21
   1492c:	4c12      	ldr	r4, [pc, #72]	; (14978 <lsm6dso_xl_offset_weight_set+0x64>)
   1492e:	47a0      	blx	r4
   14930:	0003      	movs	r3, r0
   14932:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14934:	68fb      	ldr	r3, [r7, #12]
   14936:	2b00      	cmp	r3, #0
   14938:	d119      	bne.n	1496e <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   1493a:	1cfb      	adds	r3, r7, #3
   1493c:	781b      	ldrb	r3, [r3, #0]
   1493e:	2201      	movs	r2, #1
   14940:	4013      	ands	r3, r2
   14942:	b2da      	uxtb	r2, r3
   14944:	2308      	movs	r3, #8
   14946:	18fb      	adds	r3, r7, r3
   14948:	2101      	movs	r1, #1
   1494a:	400a      	ands	r2, r1
   1494c:	00d0      	lsls	r0, r2, #3
   1494e:	781a      	ldrb	r2, [r3, #0]
   14950:	2108      	movs	r1, #8
   14952:	438a      	bics	r2, r1
   14954:	1c11      	adds	r1, r2, #0
   14956:	1c02      	adds	r2, r0, #0
   14958:	430a      	orrs	r2, r1
   1495a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   1495c:	2308      	movs	r3, #8
   1495e:	18fa      	adds	r2, r7, r3
   14960:	6878      	ldr	r0, [r7, #4]
   14962:	2301      	movs	r3, #1
   14964:	2115      	movs	r1, #21
   14966:	4c05      	ldr	r4, [pc, #20]	; (1497c <lsm6dso_xl_offset_weight_set+0x68>)
   14968:	47a0      	blx	r4
   1496a:	0003      	movs	r3, r0
   1496c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1496e:	68fb      	ldr	r3, [r7, #12]
}
   14970:	0018      	movs	r0, r3
   14972:	46bd      	mov	sp, r7
   14974:	b005      	add	sp, #20
   14976:	bd90      	pop	{r4, r7, pc}
   14978:	00014185 	.word	0x00014185
   1497c:	000141cb 	.word	0x000141cb

00014980 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   14980:	b590      	push	{r4, r7, lr}
   14982:	b085      	sub	sp, #20
   14984:	af00      	add	r7, sp, #0
   14986:	6078      	str	r0, [r7, #4]
   14988:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   1498a:	2308      	movs	r3, #8
   1498c:	18fa      	adds	r2, r7, r3
   1498e:	6878      	ldr	r0, [r7, #4]
   14990:	2301      	movs	r3, #1
   14992:	211e      	movs	r1, #30
   14994:	4c08      	ldr	r4, [pc, #32]	; (149b8 <lsm6dso_xl_flag_data_ready_get+0x38>)
   14996:	47a0      	blx	r4
   14998:	0003      	movs	r3, r0
   1499a:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   1499c:	2308      	movs	r3, #8
   1499e:	18fb      	adds	r3, r7, r3
   149a0:	781b      	ldrb	r3, [r3, #0]
   149a2:	07db      	lsls	r3, r3, #31
   149a4:	0fdb      	lsrs	r3, r3, #31
   149a6:	b2db      	uxtb	r3, r3
   149a8:	001a      	movs	r2, r3
   149aa:	683b      	ldr	r3, [r7, #0]
   149ac:	701a      	strb	r2, [r3, #0]

  return ret;
   149ae:	68fb      	ldr	r3, [r7, #12]
}
   149b0:	0018      	movs	r0, r3
   149b2:	46bd      	mov	sp, r7
   149b4:	b005      	add	sp, #20
   149b6:	bd90      	pop	{r4, r7, pc}
   149b8:	00014185 	.word	0x00014185

000149bc <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   149bc:	b590      	push	{r4, r7, lr}
   149be:	b087      	sub	sp, #28
   149c0:	af00      	add	r7, sp, #0
   149c2:	6078      	str	r0, [r7, #4]
   149c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   149c6:	230c      	movs	r3, #12
   149c8:	18fa      	adds	r2, r7, r3
   149ca:	6878      	ldr	r0, [r7, #4]
   149cc:	2306      	movs	r3, #6
   149ce:	2128      	movs	r1, #40	; 0x28
   149d0:	4c26      	ldr	r4, [pc, #152]	; (14a6c <lsm6dso_acceleration_raw_get+0xb0>)
   149d2:	47a0      	blx	r4
   149d4:	0003      	movs	r3, r0
   149d6:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   149d8:	230c      	movs	r3, #12
   149da:	18fb      	adds	r3, r7, r3
   149dc:	785b      	ldrb	r3, [r3, #1]
   149de:	b21a      	sxth	r2, r3
   149e0:	683b      	ldr	r3, [r7, #0]
   149e2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   149e4:	683b      	ldr	r3, [r7, #0]
   149e6:	2200      	movs	r2, #0
   149e8:	5e9b      	ldrsh	r3, [r3, r2]
   149ea:	b29b      	uxth	r3, r3
   149ec:	021b      	lsls	r3, r3, #8
   149ee:	b29a      	uxth	r2, r3
   149f0:	230c      	movs	r3, #12
   149f2:	18fb      	adds	r3, r7, r3
   149f4:	781b      	ldrb	r3, [r3, #0]
   149f6:	b29b      	uxth	r3, r3
   149f8:	18d3      	adds	r3, r2, r3
   149fa:	b29b      	uxth	r3, r3
   149fc:	b21a      	sxth	r2, r3
   149fe:	683b      	ldr	r3, [r7, #0]
   14a00:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   14a02:	683b      	ldr	r3, [r7, #0]
   14a04:	3302      	adds	r3, #2
   14a06:	220c      	movs	r2, #12
   14a08:	18ba      	adds	r2, r7, r2
   14a0a:	78d2      	ldrb	r2, [r2, #3]
   14a0c:	b212      	sxth	r2, r2
   14a0e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   14a10:	683b      	ldr	r3, [r7, #0]
   14a12:	3302      	adds	r3, #2
   14a14:	683a      	ldr	r2, [r7, #0]
   14a16:	3202      	adds	r2, #2
   14a18:	2100      	movs	r1, #0
   14a1a:	5e52      	ldrsh	r2, [r2, r1]
   14a1c:	b292      	uxth	r2, r2
   14a1e:	0212      	lsls	r2, r2, #8
   14a20:	b291      	uxth	r1, r2
   14a22:	220c      	movs	r2, #12
   14a24:	18ba      	adds	r2, r7, r2
   14a26:	7892      	ldrb	r2, [r2, #2]
   14a28:	b292      	uxth	r2, r2
   14a2a:	188a      	adds	r2, r1, r2
   14a2c:	b292      	uxth	r2, r2
   14a2e:	b212      	sxth	r2, r2
   14a30:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   14a32:	683b      	ldr	r3, [r7, #0]
   14a34:	3304      	adds	r3, #4
   14a36:	220c      	movs	r2, #12
   14a38:	18ba      	adds	r2, r7, r2
   14a3a:	7952      	ldrb	r2, [r2, #5]
   14a3c:	b212      	sxth	r2, r2
   14a3e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   14a40:	683b      	ldr	r3, [r7, #0]
   14a42:	3304      	adds	r3, #4
   14a44:	683a      	ldr	r2, [r7, #0]
   14a46:	3204      	adds	r2, #4
   14a48:	2100      	movs	r1, #0
   14a4a:	5e52      	ldrsh	r2, [r2, r1]
   14a4c:	b292      	uxth	r2, r2
   14a4e:	0212      	lsls	r2, r2, #8
   14a50:	b291      	uxth	r1, r2
   14a52:	220c      	movs	r2, #12
   14a54:	18ba      	adds	r2, r7, r2
   14a56:	7912      	ldrb	r2, [r2, #4]
   14a58:	b292      	uxth	r2, r2
   14a5a:	188a      	adds	r2, r1, r2
   14a5c:	b292      	uxth	r2, r2
   14a5e:	b212      	sxth	r2, r2
   14a60:	801a      	strh	r2, [r3, #0]

  return ret;
   14a62:	697b      	ldr	r3, [r7, #20]
}
   14a64:	0018      	movs	r0, r3
   14a66:	46bd      	mov	sp, r7
   14a68:	b007      	add	sp, #28
   14a6a:	bd90      	pop	{r4, r7, pc}
   14a6c:	00014185 	.word	0x00014185

00014a70 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   14a70:	b590      	push	{r4, r7, lr}
   14a72:	b085      	sub	sp, #20
   14a74:	af00      	add	r7, sp, #0
   14a76:	6078      	str	r0, [r7, #4]
   14a78:	000a      	movs	r2, r1
   14a7a:	1cfb      	adds	r3, r7, #3
   14a7c:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   14a7e:	2308      	movs	r3, #8
   14a80:	18fa      	adds	r2, r7, r3
   14a82:	6878      	ldr	r0, [r7, #4]
   14a84:	2301      	movs	r3, #1
   14a86:	2101      	movs	r1, #1
   14a88:	4c11      	ldr	r4, [pc, #68]	; (14ad0 <lsm6dso_mem_bank_set+0x60>)
   14a8a:	47a0      	blx	r4
   14a8c:	0003      	movs	r3, r0
   14a8e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14a90:	68fb      	ldr	r3, [r7, #12]
   14a92:	2b00      	cmp	r3, #0
   14a94:	d117      	bne.n	14ac6 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   14a96:	1cfb      	adds	r3, r7, #3
   14a98:	781b      	ldrb	r3, [r3, #0]
   14a9a:	2203      	movs	r2, #3
   14a9c:	4013      	ands	r3, r2
   14a9e:	b2da      	uxtb	r2, r3
   14aa0:	2308      	movs	r3, #8
   14aa2:	18fb      	adds	r3, r7, r3
   14aa4:	0190      	lsls	r0, r2, #6
   14aa6:	781a      	ldrb	r2, [r3, #0]
   14aa8:	213f      	movs	r1, #63	; 0x3f
   14aaa:	400a      	ands	r2, r1
   14aac:	1c11      	adds	r1, r2, #0
   14aae:	1c02      	adds	r2, r0, #0
   14ab0:	430a      	orrs	r2, r1
   14ab2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   14ab4:	2308      	movs	r3, #8
   14ab6:	18fa      	adds	r2, r7, r3
   14ab8:	6878      	ldr	r0, [r7, #4]
   14aba:	2301      	movs	r3, #1
   14abc:	2101      	movs	r1, #1
   14abe:	4c05      	ldr	r4, [pc, #20]	; (14ad4 <lsm6dso_mem_bank_set+0x64>)
   14ac0:	47a0      	blx	r4
   14ac2:	0003      	movs	r3, r0
   14ac4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14ac6:	68fb      	ldr	r3, [r7, #12]
}
   14ac8:	0018      	movs	r0, r3
   14aca:	46bd      	mov	sp, r7
   14acc:	b005      	add	sp, #20
   14ace:	bd90      	pop	{r4, r7, pc}
   14ad0:	00014185 	.word	0x00014185
   14ad4:	000141cb 	.word	0x000141cb

00014ad8 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   14ad8:	b590      	push	{r4, r7, lr}
   14ada:	b085      	sub	sp, #20
   14adc:	af00      	add	r7, sp, #0
   14ade:	6078      	str	r0, [r7, #4]
   14ae0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   14ae2:	683a      	ldr	r2, [r7, #0]
   14ae4:	6878      	ldr	r0, [r7, #4]
   14ae6:	2301      	movs	r3, #1
   14ae8:	210f      	movs	r1, #15
   14aea:	4c04      	ldr	r4, [pc, #16]	; (14afc <lsm6dso_device_id_get+0x24>)
   14aec:	47a0      	blx	r4
   14aee:	0003      	movs	r3, r0
   14af0:	60fb      	str	r3, [r7, #12]

  return ret;
   14af2:	68fb      	ldr	r3, [r7, #12]
}
   14af4:	0018      	movs	r0, r3
   14af6:	46bd      	mov	sp, r7
   14af8:	b005      	add	sp, #20
   14afa:	bd90      	pop	{r4, r7, pc}
   14afc:	00014185 	.word	0x00014185

00014b00 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14b00:	b590      	push	{r4, r7, lr}
   14b02:	b085      	sub	sp, #20
   14b04:	af00      	add	r7, sp, #0
   14b06:	6078      	str	r0, [r7, #4]
   14b08:	000a      	movs	r2, r1
   14b0a:	1cfb      	adds	r3, r7, #3
   14b0c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14b0e:	2308      	movs	r3, #8
   14b10:	18fa      	adds	r2, r7, r3
   14b12:	6878      	ldr	r0, [r7, #4]
   14b14:	2301      	movs	r3, #1
   14b16:	2112      	movs	r1, #18
   14b18:	4c12      	ldr	r4, [pc, #72]	; (14b64 <lsm6dso_reset_set+0x64>)
   14b1a:	47a0      	blx	r4
   14b1c:	0003      	movs	r3, r0
   14b1e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14b20:	68fb      	ldr	r3, [r7, #12]
   14b22:	2b00      	cmp	r3, #0
   14b24:	d119      	bne.n	14b5a <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   14b26:	1cfb      	adds	r3, r7, #3
   14b28:	781b      	ldrb	r3, [r3, #0]
   14b2a:	2201      	movs	r2, #1
   14b2c:	4013      	ands	r3, r2
   14b2e:	b2da      	uxtb	r2, r3
   14b30:	2308      	movs	r3, #8
   14b32:	18fb      	adds	r3, r7, r3
   14b34:	2101      	movs	r1, #1
   14b36:	400a      	ands	r2, r1
   14b38:	0010      	movs	r0, r2
   14b3a:	781a      	ldrb	r2, [r3, #0]
   14b3c:	2101      	movs	r1, #1
   14b3e:	438a      	bics	r2, r1
   14b40:	1c11      	adds	r1, r2, #0
   14b42:	1c02      	adds	r2, r0, #0
   14b44:	430a      	orrs	r2, r1
   14b46:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14b48:	2308      	movs	r3, #8
   14b4a:	18fa      	adds	r2, r7, r3
   14b4c:	6878      	ldr	r0, [r7, #4]
   14b4e:	2301      	movs	r3, #1
   14b50:	2112      	movs	r1, #18
   14b52:	4c05      	ldr	r4, [pc, #20]	; (14b68 <lsm6dso_reset_set+0x68>)
   14b54:	47a0      	blx	r4
   14b56:	0003      	movs	r3, r0
   14b58:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14b5a:	68fb      	ldr	r3, [r7, #12]
}
   14b5c:	0018      	movs	r0, r3
   14b5e:	46bd      	mov	sp, r7
   14b60:	b005      	add	sp, #20
   14b62:	bd90      	pop	{r4, r7, pc}
   14b64:	00014185 	.word	0x00014185
   14b68:	000141cb 	.word	0x000141cb

00014b6c <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   14b6c:	b590      	push	{r4, r7, lr}
   14b6e:	b085      	sub	sp, #20
   14b70:	af00      	add	r7, sp, #0
   14b72:	6078      	str	r0, [r7, #4]
   14b74:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   14b76:	2308      	movs	r3, #8
   14b78:	18fa      	adds	r2, r7, r3
   14b7a:	6878      	ldr	r0, [r7, #4]
   14b7c:	2301      	movs	r3, #1
   14b7e:	2112      	movs	r1, #18
   14b80:	4c08      	ldr	r4, [pc, #32]	; (14ba4 <lsm6dso_reset_get+0x38>)
   14b82:	47a0      	blx	r4
   14b84:	0003      	movs	r3, r0
   14b86:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   14b88:	2308      	movs	r3, #8
   14b8a:	18fb      	adds	r3, r7, r3
   14b8c:	781b      	ldrb	r3, [r3, #0]
   14b8e:	07db      	lsls	r3, r3, #31
   14b90:	0fdb      	lsrs	r3, r3, #31
   14b92:	b2db      	uxtb	r3, r3
   14b94:	001a      	movs	r2, r3
   14b96:	683b      	ldr	r3, [r7, #0]
   14b98:	701a      	strb	r2, [r3, #0]

  return ret;
   14b9a:	68fb      	ldr	r3, [r7, #12]
}
   14b9c:	0018      	movs	r0, r3
   14b9e:	46bd      	mov	sp, r7
   14ba0:	b005      	add	sp, #20
   14ba2:	bd90      	pop	{r4, r7, pc}
   14ba4:	00014185 	.word	0x00014185

00014ba8 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   14ba8:	b590      	push	{r4, r7, lr}
   14baa:	b085      	sub	sp, #20
   14bac:	af00      	add	r7, sp, #0
   14bae:	6078      	str	r0, [r7, #4]
   14bb0:	000a      	movs	r2, r1
   14bb2:	1cfb      	adds	r3, r7, #3
   14bb4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14bb6:	2308      	movs	r3, #8
   14bb8:	18fa      	adds	r2, r7, r3
   14bba:	6878      	ldr	r0, [r7, #4]
   14bbc:	2301      	movs	r3, #1
   14bbe:	2110      	movs	r1, #16
   14bc0:	4c12      	ldr	r4, [pc, #72]	; (14c0c <lsm6dso_xl_filter_lp2_set+0x64>)
   14bc2:	47a0      	blx	r4
   14bc4:	0003      	movs	r3, r0
   14bc6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14bc8:	68fb      	ldr	r3, [r7, #12]
   14bca:	2b00      	cmp	r3, #0
   14bcc:	d119      	bne.n	14c02 <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   14bce:	1cfb      	adds	r3, r7, #3
   14bd0:	781b      	ldrb	r3, [r3, #0]
   14bd2:	2201      	movs	r2, #1
   14bd4:	4013      	ands	r3, r2
   14bd6:	b2da      	uxtb	r2, r3
   14bd8:	2308      	movs	r3, #8
   14bda:	18fb      	adds	r3, r7, r3
   14bdc:	2101      	movs	r1, #1
   14bde:	400a      	ands	r2, r1
   14be0:	1890      	adds	r0, r2, r2
   14be2:	781a      	ldrb	r2, [r3, #0]
   14be4:	2102      	movs	r1, #2
   14be6:	438a      	bics	r2, r1
   14be8:	1c11      	adds	r1, r2, #0
   14bea:	1c02      	adds	r2, r0, #0
   14bec:	430a      	orrs	r2, r1
   14bee:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   14bf0:	2308      	movs	r3, #8
   14bf2:	18fa      	adds	r2, r7, r3
   14bf4:	6878      	ldr	r0, [r7, #4]
   14bf6:	2301      	movs	r3, #1
   14bf8:	2110      	movs	r1, #16
   14bfa:	4c05      	ldr	r4, [pc, #20]	; (14c10 <lsm6dso_xl_filter_lp2_set+0x68>)
   14bfc:	47a0      	blx	r4
   14bfe:	0003      	movs	r3, r0
   14c00:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14c02:	68fb      	ldr	r3, [r7, #12]
}
   14c04:	0018      	movs	r0, r3
   14c06:	46bd      	mov	sp, r7
   14c08:	b005      	add	sp, #20
   14c0a:	bd90      	pop	{r4, r7, pc}
   14c0c:	00014185 	.word	0x00014185
   14c10:	000141cb 	.word	0x000141cb

00014c14 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   14c14:	b590      	push	{r4, r7, lr}
   14c16:	b085      	sub	sp, #20
   14c18:	af00      	add	r7, sp, #0
   14c1a:	6078      	str	r0, [r7, #4]
   14c1c:	000a      	movs	r2, r1
   14c1e:	1cfb      	adds	r3, r7, #3
   14c20:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   14c22:	2308      	movs	r3, #8
   14c24:	18fa      	adds	r2, r7, r3
   14c26:	6878      	ldr	r0, [r7, #4]
   14c28:	2301      	movs	r3, #1
   14c2a:	2117      	movs	r1, #23
   14c2c:	4c25      	ldr	r4, [pc, #148]	; (14cc4 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   14c2e:	47a0      	blx	r4
   14c30:	0003      	movs	r3, r0
   14c32:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14c34:	68fb      	ldr	r3, [r7, #12]
   14c36:	2b00      	cmp	r3, #0
   14c38:	d13f      	bne.n	14cba <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   14c3a:	1cfb      	adds	r3, r7, #3
   14c3c:	781b      	ldrb	r3, [r3, #0]
   14c3e:	091b      	lsrs	r3, r3, #4
   14c40:	b2db      	uxtb	r3, r3
   14c42:	1c1a      	adds	r2, r3, #0
   14c44:	2301      	movs	r3, #1
   14c46:	4013      	ands	r3, r2
   14c48:	b2da      	uxtb	r2, r3
   14c4a:	2308      	movs	r3, #8
   14c4c:	18fb      	adds	r3, r7, r3
   14c4e:	2101      	movs	r1, #1
   14c50:	400a      	ands	r2, r1
   14c52:	0090      	lsls	r0, r2, #2
   14c54:	781a      	ldrb	r2, [r3, #0]
   14c56:	2104      	movs	r1, #4
   14c58:	438a      	bics	r2, r1
   14c5a:	1c11      	adds	r1, r2, #0
   14c5c:	1c02      	adds	r2, r0, #0
   14c5e:	430a      	orrs	r2, r1
   14c60:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   14c62:	1cfb      	adds	r3, r7, #3
   14c64:	781b      	ldrb	r3, [r3, #0]
   14c66:	095b      	lsrs	r3, r3, #5
   14c68:	b2db      	uxtb	r3, r3
   14c6a:	1c1a      	adds	r2, r3, #0
   14c6c:	2301      	movs	r3, #1
   14c6e:	4013      	ands	r3, r2
   14c70:	b2da      	uxtb	r2, r3
   14c72:	2308      	movs	r3, #8
   14c74:	18fb      	adds	r3, r7, r3
   14c76:	2101      	movs	r1, #1
   14c78:	400a      	ands	r2, r1
   14c7a:	0110      	lsls	r0, r2, #4
   14c7c:	781a      	ldrb	r2, [r3, #0]
   14c7e:	2110      	movs	r1, #16
   14c80:	438a      	bics	r2, r1
   14c82:	1c11      	adds	r1, r2, #0
   14c84:	1c02      	adds	r2, r0, #0
   14c86:	430a      	orrs	r2, r1
   14c88:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   14c8a:	1cfb      	adds	r3, r7, #3
   14c8c:	781b      	ldrb	r3, [r3, #0]
   14c8e:	2207      	movs	r2, #7
   14c90:	4013      	ands	r3, r2
   14c92:	b2da      	uxtb	r2, r3
   14c94:	2308      	movs	r3, #8
   14c96:	18fb      	adds	r3, r7, r3
   14c98:	0150      	lsls	r0, r2, #5
   14c9a:	781a      	ldrb	r2, [r3, #0]
   14c9c:	211f      	movs	r1, #31
   14c9e:	400a      	ands	r2, r1
   14ca0:	1c11      	adds	r1, r2, #0
   14ca2:	1c02      	adds	r2, r0, #0
   14ca4:	430a      	orrs	r2, r1
   14ca6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   14ca8:	2308      	movs	r3, #8
   14caa:	18fa      	adds	r2, r7, r3
   14cac:	6878      	ldr	r0, [r7, #4]
   14cae:	2301      	movs	r3, #1
   14cb0:	2117      	movs	r1, #23
   14cb2:	4c05      	ldr	r4, [pc, #20]	; (14cc8 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   14cb4:	47a0      	blx	r4
   14cb6:	0003      	movs	r3, r0
   14cb8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14cba:	68fb      	ldr	r3, [r7, #12]
}
   14cbc:	0018      	movs	r0, r3
   14cbe:	46bd      	mov	sp, r7
   14cc0:	b005      	add	sp, #20
   14cc2:	bd90      	pop	{r4, r7, pc}
   14cc4:	00014185 	.word	0x00014185
   14cc8:	000141cb 	.word	0x000141cb

00014ccc <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   14ccc:	b590      	push	{r4, r7, lr}
   14cce:	b087      	sub	sp, #28
   14cd0:	af00      	add	r7, sp, #0
   14cd2:	6078      	str	r0, [r7, #4]
   14cd4:	000a      	movs	r2, r1
   14cd6:	1cfb      	adds	r3, r7, #3
   14cd8:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   14cda:	230c      	movs	r3, #12
   14cdc:	18fa      	adds	r2, r7, r3
   14cde:	6878      	ldr	r0, [r7, #4]
   14ce0:	2301      	movs	r3, #1
   14ce2:	2118      	movs	r1, #24
   14ce4:	4c28      	ldr	r4, [pc, #160]	; (14d88 <lsm6dso_i3c_disable_set+0xbc>)
   14ce6:	47a0      	blx	r4
   14ce8:	0003      	movs	r3, r0
   14cea:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   14cec:	697b      	ldr	r3, [r7, #20]
   14cee:	2b00      	cmp	r3, #0
   14cf0:	d11c      	bne.n	14d2c <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   14cf2:	1cfb      	adds	r3, r7, #3
   14cf4:	781b      	ldrb	r3, [r3, #0]
   14cf6:	09db      	lsrs	r3, r3, #7
   14cf8:	b2db      	uxtb	r3, r3
   14cfa:	1c1a      	adds	r2, r3, #0
   14cfc:	2301      	movs	r3, #1
   14cfe:	4013      	ands	r3, r2
   14d00:	b2da      	uxtb	r2, r3
   14d02:	230c      	movs	r3, #12
   14d04:	18fb      	adds	r3, r7, r3
   14d06:	2101      	movs	r1, #1
   14d08:	400a      	ands	r2, r1
   14d0a:	1890      	adds	r0, r2, r2
   14d0c:	781a      	ldrb	r2, [r3, #0]
   14d0e:	2102      	movs	r1, #2
   14d10:	438a      	bics	r2, r1
   14d12:	1c11      	adds	r1, r2, #0
   14d14:	1c02      	adds	r2, r0, #0
   14d16:	430a      	orrs	r2, r1
   14d18:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   14d1a:	230c      	movs	r3, #12
   14d1c:	18fa      	adds	r2, r7, r3
   14d1e:	6878      	ldr	r0, [r7, #4]
   14d20:	2301      	movs	r3, #1
   14d22:	2118      	movs	r1, #24
   14d24:	4c19      	ldr	r4, [pc, #100]	; (14d8c <lsm6dso_i3c_disable_set+0xc0>)
   14d26:	47a0      	blx	r4
   14d28:	0003      	movs	r3, r0
   14d2a:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   14d2c:	697b      	ldr	r3, [r7, #20]
   14d2e:	2b00      	cmp	r3, #0
   14d30:	d108      	bne.n	14d44 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   14d32:	2310      	movs	r3, #16
   14d34:	18fa      	adds	r2, r7, r3
   14d36:	6878      	ldr	r0, [r7, #4]
   14d38:	2301      	movs	r3, #1
   14d3a:	2162      	movs	r1, #98	; 0x62
   14d3c:	4c12      	ldr	r4, [pc, #72]	; (14d88 <lsm6dso_i3c_disable_set+0xbc>)
   14d3e:	47a0      	blx	r4
   14d40:	0003      	movs	r3, r0
   14d42:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   14d44:	697b      	ldr	r3, [r7, #20]
   14d46:	2b00      	cmp	r3, #0
   14d48:	d119      	bne.n	14d7e <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   14d4a:	1cfb      	adds	r3, r7, #3
   14d4c:	781b      	ldrb	r3, [r3, #0]
   14d4e:	2203      	movs	r2, #3
   14d50:	4013      	ands	r3, r2
   14d52:	b2da      	uxtb	r2, r3
   14d54:	2310      	movs	r3, #16
   14d56:	18fb      	adds	r3, r7, r3
   14d58:	2103      	movs	r1, #3
   14d5a:	400a      	ands	r2, r1
   14d5c:	00d0      	lsls	r0, r2, #3
   14d5e:	781a      	ldrb	r2, [r3, #0]
   14d60:	2118      	movs	r1, #24
   14d62:	438a      	bics	r2, r1
   14d64:	1c11      	adds	r1, r2, #0
   14d66:	1c02      	adds	r2, r0, #0
   14d68:	430a      	orrs	r2, r1
   14d6a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   14d6c:	2310      	movs	r3, #16
   14d6e:	18fa      	adds	r2, r7, r3
   14d70:	6878      	ldr	r0, [r7, #4]
   14d72:	2301      	movs	r3, #1
   14d74:	2162      	movs	r1, #98	; 0x62
   14d76:	4c05      	ldr	r4, [pc, #20]	; (14d8c <lsm6dso_i3c_disable_set+0xc0>)
   14d78:	47a0      	blx	r4
   14d7a:	0003      	movs	r3, r0
   14d7c:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   14d7e:	697b      	ldr	r3, [r7, #20]
}
   14d80:	0018      	movs	r0, r3
   14d82:	46bd      	mov	sp, r7
   14d84:	b007      	add	sp, #28
   14d86:	bd90      	pop	{r4, r7, pc}
   14d88:	00014185 	.word	0x00014185
   14d8c:	000141cb 	.word	0x000141cb

00014d90 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   14d90:	b590      	push	{r4, r7, lr}
   14d92:	b085      	sub	sp, #20
   14d94:	af00      	add	r7, sp, #0
   14d96:	6078      	str	r0, [r7, #4]
   14d98:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   14d9a:	687b      	ldr	r3, [r7, #4]
   14d9c:	2102      	movs	r1, #2
   14d9e:	0018      	movs	r0, r3
   14da0:	4b0e      	ldr	r3, [pc, #56]	; (14ddc <lsm6dso_fsm_enable_get+0x4c>)
   14da2:	4798      	blx	r3
   14da4:	0003      	movs	r3, r0
   14da6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14da8:	68fb      	ldr	r3, [r7, #12]
   14daa:	2b00      	cmp	r3, #0
   14dac:	d107      	bne.n	14dbe <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   14dae:	683a      	ldr	r2, [r7, #0]
   14db0:	6878      	ldr	r0, [r7, #4]
   14db2:	2302      	movs	r3, #2
   14db4:	2146      	movs	r1, #70	; 0x46
   14db6:	4c0a      	ldr	r4, [pc, #40]	; (14de0 <lsm6dso_fsm_enable_get+0x50>)
   14db8:	47a0      	blx	r4
   14dba:	0003      	movs	r3, r0
   14dbc:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   14dbe:	68fb      	ldr	r3, [r7, #12]
   14dc0:	2b00      	cmp	r3, #0
   14dc2:	d106      	bne.n	14dd2 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   14dc4:	687b      	ldr	r3, [r7, #4]
   14dc6:	2100      	movs	r1, #0
   14dc8:	0018      	movs	r0, r3
   14dca:	4b04      	ldr	r3, [pc, #16]	; (14ddc <lsm6dso_fsm_enable_get+0x4c>)
   14dcc:	4798      	blx	r3
   14dce:	0003      	movs	r3, r0
   14dd0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14dd2:	68fb      	ldr	r3, [r7, #12]
}
   14dd4:	0018      	movs	r0, r3
   14dd6:	46bd      	mov	sp, r7
   14dd8:	b005      	add	sp, #20
   14dda:	bd90      	pop	{r4, r7, pc}
   14ddc:	00014a71 	.word	0x00014a71
   14de0:	00014185 	.word	0x00014185

00014de4 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   14de4:	b590      	push	{r4, r7, lr}
   14de6:	b085      	sub	sp, #20
   14de8:	af00      	add	r7, sp, #0
   14dea:	6078      	str	r0, [r7, #4]
   14dec:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   14dee:	687b      	ldr	r3, [r7, #4]
   14df0:	2102      	movs	r1, #2
   14df2:	0018      	movs	r0, r3
   14df4:	4b21      	ldr	r3, [pc, #132]	; (14e7c <lsm6dso_fsm_data_rate_get+0x98>)
   14df6:	4798      	blx	r3
   14df8:	0003      	movs	r3, r0
   14dfa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   14dfc:	68fb      	ldr	r3, [r7, #12]
   14dfe:	2b00      	cmp	r3, #0
   14e00:	d108      	bne.n	14e14 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   14e02:	2308      	movs	r3, #8
   14e04:	18fa      	adds	r2, r7, r3
   14e06:	6878      	ldr	r0, [r7, #4]
   14e08:	2301      	movs	r3, #1
   14e0a:	215f      	movs	r1, #95	; 0x5f
   14e0c:	4c1c      	ldr	r4, [pc, #112]	; (14e80 <lsm6dso_fsm_data_rate_get+0x9c>)
   14e0e:	47a0      	blx	r4
   14e10:	0003      	movs	r3, r0
   14e12:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   14e14:	68fb      	ldr	r3, [r7, #12]
   14e16:	2b00      	cmp	r3, #0
   14e18:	d12b      	bne.n	14e72 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   14e1a:	2308      	movs	r3, #8
   14e1c:	18fb      	adds	r3, r7, r3
   14e1e:	781b      	ldrb	r3, [r3, #0]
   14e20:	06db      	lsls	r3, r3, #27
   14e22:	0f9b      	lsrs	r3, r3, #30
   14e24:	b2db      	uxtb	r3, r3
   14e26:	2b01      	cmp	r3, #1
   14e28:	d00c      	beq.n	14e44 <lsm6dso_fsm_data_rate_get+0x60>
   14e2a:	dc02      	bgt.n	14e32 <lsm6dso_fsm_data_rate_get+0x4e>
   14e2c:	2b00      	cmp	r3, #0
   14e2e:	d005      	beq.n	14e3c <lsm6dso_fsm_data_rate_get+0x58>
   14e30:	e014      	b.n	14e5c <lsm6dso_fsm_data_rate_get+0x78>
   14e32:	2b02      	cmp	r3, #2
   14e34:	d00a      	beq.n	14e4c <lsm6dso_fsm_data_rate_get+0x68>
   14e36:	2b03      	cmp	r3, #3
   14e38:	d00c      	beq.n	14e54 <lsm6dso_fsm_data_rate_get+0x70>
   14e3a:	e00f      	b.n	14e5c <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   14e3c:	683b      	ldr	r3, [r7, #0]
   14e3e:	2200      	movs	r2, #0
   14e40:	701a      	strb	r2, [r3, #0]
        break;
   14e42:	e00f      	b.n	14e64 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   14e44:	683b      	ldr	r3, [r7, #0]
   14e46:	2201      	movs	r2, #1
   14e48:	701a      	strb	r2, [r3, #0]
        break;
   14e4a:	e00b      	b.n	14e64 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   14e4c:	683b      	ldr	r3, [r7, #0]
   14e4e:	2202      	movs	r2, #2
   14e50:	701a      	strb	r2, [r3, #0]
        break;
   14e52:	e007      	b.n	14e64 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   14e54:	683b      	ldr	r3, [r7, #0]
   14e56:	2203      	movs	r2, #3
   14e58:	701a      	strb	r2, [r3, #0]
        break;
   14e5a:	e003      	b.n	14e64 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   14e5c:	683b      	ldr	r3, [r7, #0]
   14e5e:	2200      	movs	r2, #0
   14e60:	701a      	strb	r2, [r3, #0]
        break;
   14e62:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   14e64:	687b      	ldr	r3, [r7, #4]
   14e66:	2100      	movs	r1, #0
   14e68:	0018      	movs	r0, r3
   14e6a:	4b04      	ldr	r3, [pc, #16]	; (14e7c <lsm6dso_fsm_data_rate_get+0x98>)
   14e6c:	4798      	blx	r3
   14e6e:	0003      	movs	r3, r0
   14e70:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   14e72:	68fb      	ldr	r3, [r7, #12]
}
   14e74:	0018      	movs	r0, r3
   14e76:	46bd      	mov	sp, r7
   14e78:	b005      	add	sp, #20
   14e7a:	bd90      	pop	{r4, r7, pc}
   14e7c:	00014a71 	.word	0x00014a71
   14e80:	00014185 	.word	0x00014185

00014e84 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   14e84:	b580      	push	{r7, lr}
   14e86:	b086      	sub	sp, #24
   14e88:	af00      	add	r7, sp, #0
   14e8a:	60f8      	str	r0, [r7, #12]
   14e8c:	0008      	movs	r0, r1
   14e8e:	607a      	str	r2, [r7, #4]
   14e90:	0019      	movs	r1, r3
   14e92:	230b      	movs	r3, #11
   14e94:	18fb      	adds	r3, r7, r3
   14e96:	1c02      	adds	r2, r0, #0
   14e98:	701a      	strb	r2, [r3, #0]
   14e9a:	2308      	movs	r3, #8
   14e9c:	18fb      	adds	r3, r7, r3
   14e9e:	1c0a      	adds	r2, r1, #0
   14ea0:	801a      	strh	r2, [r3, #0]
	if( len > 63){
   14ea2:	2308      	movs	r3, #8
   14ea4:	18fb      	adds	r3, r7, r3
   14ea6:	881b      	ldrh	r3, [r3, #0]
   14ea8:	2b3f      	cmp	r3, #63	; 0x3f
   14eaa:	d902      	bls.n	14eb2 <platform_write+0x2e>
		return ERROR_INVALID_DATA;
   14eac:	2301      	movs	r3, #1
   14eae:	425b      	negs	r3, r3
   14eb0:	e030      	b.n	14f14 <platform_write+0x90>
	}
	
	msgOutImu[0] = reg;
   14eb2:	4b1a      	ldr	r3, [pc, #104]	; (14f1c <platform_write+0x98>)
   14eb4:	220b      	movs	r2, #11
   14eb6:	18ba      	adds	r2, r7, r2
   14eb8:	7812      	ldrb	r2, [r2, #0]
   14eba:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= len; i++) {
   14ebc:	2301      	movs	r3, #1
   14ebe:	617b      	str	r3, [r7, #20]
   14ec0:	e00c      	b.n	14edc <platform_write+0x58>
		msgOutImu[i] = bufp[i-1];
   14ec2:	697b      	ldr	r3, [r7, #20]
   14ec4:	3b01      	subs	r3, #1
   14ec6:	687a      	ldr	r2, [r7, #4]
   14ec8:	18d3      	adds	r3, r2, r3
   14eca:	7819      	ldrb	r1, [r3, #0]
   14ecc:	4a13      	ldr	r2, [pc, #76]	; (14f1c <platform_write+0x98>)
   14ece:	697b      	ldr	r3, [r7, #20]
   14ed0:	18d3      	adds	r3, r2, r3
   14ed2:	1c0a      	adds	r2, r1, #0
   14ed4:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= len; i++) {
   14ed6:	697b      	ldr	r3, [r7, #20]
   14ed8:	3301      	adds	r3, #1
   14eda:	617b      	str	r3, [r7, #20]
   14edc:	2308      	movs	r3, #8
   14ede:	18fb      	adds	r3, r7, r3
   14ee0:	881a      	ldrh	r2, [r3, #0]
   14ee2:	697b      	ldr	r3, [r7, #20]
   14ee4:	429a      	cmp	r2, r3
   14ee6:	daec      	bge.n	14ec2 <platform_write+0x3e>
	}
	
	imuData.lenOut = len +1;
   14ee8:	2308      	movs	r3, #8
   14eea:	18fb      	adds	r3, r7, r3
   14eec:	881b      	ldrh	r3, [r3, #0]
   14eee:	3301      	adds	r3, #1
   14ef0:	b29a      	uxth	r2, r3
   14ef2:	4b0b      	ldr	r3, [pc, #44]	; (14f20 <platform_write+0x9c>)
   14ef4:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = msgOutImu;
   14ef6:	4b0a      	ldr	r3, [pc, #40]	; (14f20 <platform_write+0x9c>)
   14ef8:	4a08      	ldr	r2, [pc, #32]	; (14f1c <platform_write+0x98>)
   14efa:	605a      	str	r2, [r3, #4]
	imuData.msgIn = NULL;
   14efc:	4b08      	ldr	r3, [pc, #32]	; (14f20 <platform_write+0x9c>)
   14efe:	2200      	movs	r2, #0
   14f00:	609a      	str	r2, [r3, #8]
	imuData.lenIn = 0;
   14f02:	4b07      	ldr	r3, [pc, #28]	; (14f20 <platform_write+0x9c>)
   14f04:	2200      	movs	r2, #0
   14f06:	819a      	strh	r2, [r3, #12]
	
	return I2cWriteDataWait(&imuData, LSM6DSO_timeout);
   14f08:	4b05      	ldr	r3, [pc, #20]	; (14f20 <platform_write+0x9c>)
   14f0a:	21c8      	movs	r1, #200	; 0xc8
   14f0c:	0018      	movs	r0, r3
   14f0e:	4b05      	ldr	r3, [pc, #20]	; (14f24 <platform_write+0xa0>)
   14f10:	4798      	blx	r3
   14f12:	0003      	movs	r3, r0

}
   14f14:	0018      	movs	r0, r3
   14f16:	46bd      	mov	sp, r7
   14f18:	b006      	add	sp, #24
   14f1a:	bd80      	pop	{r7, pc}
   14f1c:	200043bc 	.word	0x200043bc
   14f20:	20000020 	.word	0x20000020
   14f24:	00013ebd 	.word	0x00013ebd

00014f28 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   14f28:	b580      	push	{r7, lr}
   14f2a:	b084      	sub	sp, #16
   14f2c:	af00      	add	r7, sp, #0
   14f2e:	60f8      	str	r0, [r7, #12]
   14f30:	0008      	movs	r0, r1
   14f32:	607a      	str	r2, [r7, #4]
   14f34:	0019      	movs	r1, r3
   14f36:	230b      	movs	r3, #11
   14f38:	18fb      	adds	r3, r7, r3
   14f3a:	1c02      	adds	r2, r0, #0
   14f3c:	701a      	strb	r2, [r3, #0]
   14f3e:	2308      	movs	r3, #8
   14f40:	18fb      	adds	r3, r7, r3
   14f42:	1c0a      	adds	r2, r1, #0
   14f44:	801a      	strh	r2, [r3, #0]
	imuData.lenIn = len;
   14f46:	4b0d      	ldr	r3, [pc, #52]	; (14f7c <platform_read+0x54>)
   14f48:	2208      	movs	r2, #8
   14f4a:	18ba      	adds	r2, r7, r2
   14f4c:	8812      	ldrh	r2, [r2, #0]
   14f4e:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   14f50:	4b0a      	ldr	r3, [pc, #40]	; (14f7c <platform_read+0x54>)
   14f52:	687a      	ldr	r2, [r7, #4]
   14f54:	609a      	str	r2, [r3, #8]
	imuData.lenOut = 1;
   14f56:	4b09      	ldr	r3, [pc, #36]	; (14f7c <platform_read+0x54>)
   14f58:	2201      	movs	r2, #1
   14f5a:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &reg;
   14f5c:	4b07      	ldr	r3, [pc, #28]	; (14f7c <platform_read+0x54>)
   14f5e:	220b      	movs	r2, #11
   14f60:	18ba      	adds	r2, r7, r2
   14f62:	605a      	str	r2, [r3, #4]
	
	return I2cReadDataWait(&imuData,LSM6DSO_readtime,LSM6DSO_timeout);
   14f64:	4b05      	ldr	r3, [pc, #20]	; (14f7c <platform_read+0x54>)
   14f66:	22c8      	movs	r2, #200	; 0xc8
   14f68:	2105      	movs	r1, #5
   14f6a:	0018      	movs	r0, r3
   14f6c:	4b04      	ldr	r3, [pc, #16]	; (14f80 <platform_read+0x58>)
   14f6e:	4798      	blx	r3
   14f70:	0003      	movs	r3, r0


}
   14f72:	0018      	movs	r0, r3
   14f74:	46bd      	mov	sp, r7
   14f76:	b004      	add	sp, #16
   14f78:	bd80      	pop	{r7, pc}
   14f7a:	46c0      	nop			; (mov r8, r8)
   14f7c:	20000020 	.word	0x20000020
   14f80:	00013f95 	.word	0x00013f95

00014f84 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   14f84:	b580      	push	{r7, lr}
   14f86:	af00      	add	r7, sp, #0
return &dev_ctx;
   14f88:	4b01      	ldr	r3, [pc, #4]	; (14f90 <GetImuStruct+0xc>)
}
   14f8a:	0018      	movs	r0, r3
   14f8c:	46bd      	mov	sp, r7
   14f8e:	bd80      	pop	{r7, pc}
   14f90:	20000014 	.word	0x20000014

00014f94 <InitImu>:



int32_t InitImu(void)
{
   14f94:	b580      	push	{r7, lr}
   14f96:	b082      	sub	sp, #8
   14f98:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   14f9a:	2300      	movs	r3, #0
   14f9c:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   14f9e:	4b23      	ldr	r3, [pc, #140]	; (1502c <InitImu+0x98>)
   14fa0:	2101      	movs	r1, #1
   14fa2:	0018      	movs	r0, r3
   14fa4:	4b22      	ldr	r3, [pc, #136]	; (15030 <InitImu+0x9c>)
   14fa6:	4798      	blx	r3
   14fa8:	0003      	movs	r3, r0
   14faa:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   14fac:	1cfa      	adds	r2, r7, #3
   14fae:	4b1f      	ldr	r3, [pc, #124]	; (1502c <InitImu+0x98>)
   14fb0:	0011      	movs	r1, r2
   14fb2:	0018      	movs	r0, r3
   14fb4:	4b1f      	ldr	r3, [pc, #124]	; (15034 <InitImu+0xa0>)
   14fb6:	4798      	blx	r3
   14fb8:	0002      	movs	r2, r0
   14fba:	687b      	ldr	r3, [r7, #4]
   14fbc:	4313      	orrs	r3, r2
   14fbe:	607b      	str	r3, [r7, #4]
  } while (rst);
   14fc0:	1cfb      	adds	r3, r7, #3
   14fc2:	781b      	ldrb	r3, [r3, #0]
   14fc4:	2b00      	cmp	r3, #0
   14fc6:	d1f1      	bne.n	14fac <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   14fc8:	4b18      	ldr	r3, [pc, #96]	; (1502c <InitImu+0x98>)
   14fca:	2180      	movs	r1, #128	; 0x80
   14fcc:	0018      	movs	r0, r3
   14fce:	4b1a      	ldr	r3, [pc, #104]	; (15038 <InitImu+0xa4>)
   14fd0:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   14fd2:	4b16      	ldr	r3, [pc, #88]	; (1502c <InitImu+0x98>)
   14fd4:	2101      	movs	r1, #1
   14fd6:	0018      	movs	r0, r3
   14fd8:	4b18      	ldr	r3, [pc, #96]	; (1503c <InitImu+0xa8>)
   14fda:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   14fdc:	4b13      	ldr	r3, [pc, #76]	; (1502c <InitImu+0x98>)
   14fde:	2100      	movs	r1, #0
   14fe0:	0018      	movs	r0, r3
   14fe2:	4b17      	ldr	r3, [pc, #92]	; (15040 <InitImu+0xac>)
   14fe4:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   14fe6:	4b11      	ldr	r3, [pc, #68]	; (1502c <InitImu+0x98>)
   14fe8:	2101      	movs	r1, #1
   14fea:	0018      	movs	r0, r3
   14fec:	4b15      	ldr	r3, [pc, #84]	; (15044 <InitImu+0xb0>)
   14fee:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   14ff0:	4b0e      	ldr	r3, [pc, #56]	; (1502c <InitImu+0x98>)
   14ff2:	2101      	movs	r1, #1
   14ff4:	0018      	movs	r0, r3
   14ff6:	4b14      	ldr	r3, [pc, #80]	; (15048 <InitImu+0xb4>)
   14ff8:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   14ffa:	4b0c      	ldr	r3, [pc, #48]	; (1502c <InitImu+0x98>)
   14ffc:	2100      	movs	r1, #0
   14ffe:	0018      	movs	r0, r3
   15000:	4b12      	ldr	r3, [pc, #72]	; (1504c <InitImu+0xb8>)
   15002:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   15004:	4b09      	ldr	r3, [pc, #36]	; (1502c <InitImu+0x98>)
   15006:	2106      	movs	r1, #6
   15008:	0018      	movs	r0, r3
   1500a:	4b11      	ldr	r3, [pc, #68]	; (15050 <InitImu+0xbc>)
   1500c:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   1500e:	4b07      	ldr	r3, [pc, #28]	; (1502c <InitImu+0x98>)
   15010:	2104      	movs	r1, #4
   15012:	0018      	movs	r0, r3
   15014:	4b0f      	ldr	r3, [pc, #60]	; (15054 <InitImu+0xc0>)
   15016:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   15018:	4b04      	ldr	r3, [pc, #16]	; (1502c <InitImu+0x98>)
   1501a:	2101      	movs	r1, #1
   1501c:	0018      	movs	r0, r3
   1501e:	4b0e      	ldr	r3, [pc, #56]	; (15058 <InitImu+0xc4>)
   15020:	4798      	blx	r3

  return error;
   15022:	687b      	ldr	r3, [r7, #4]
}
   15024:	0018      	movs	r0, r3
   15026:	46bd      	mov	sp, r7
   15028:	b002      	add	sp, #8
   1502a:	bd80      	pop	{r7, pc}
   1502c:	20000014 	.word	0x20000014
   15030:	00014b01 	.word	0x00014b01
   15034:	00014b6d 	.word	0x00014b6d
   15038:	00014ccd 	.word	0x00014ccd
   1503c:	000148a9 	.word	0x000148a9
   15040:	00014915 	.word	0x00014915
   15044:	000142b5 	.word	0x000142b5
   15048:	000145e5 	.word	0x000145e5
   1504c:	00014249 	.word	0x00014249
   15050:	00014579 	.word	0x00014579
   15054:	00014c15 	.word	0x00014c15
   15058:	00014ba9 	.word	0x00014ba9

0001505c <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   1505c:	b580      	push	{r7, lr}
   1505e:	b082      	sub	sp, #8
   15060:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   15062:	4b38      	ldr	r3, [pc, #224]	; (15144 <InitializeSeesaw+0xe8>)
   15064:	222e      	movs	r2, #46	; 0x2e
   15066:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   15068:	4b36      	ldr	r3, [pc, #216]	; (15144 <InitializeSeesaw+0xe8>)
   1506a:	4a37      	ldr	r2, [pc, #220]	; (15148 <InitializeSeesaw+0xec>)
   1506c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   1506e:	4b35      	ldr	r3, [pc, #212]	; (15144 <InitializeSeesaw+0xe8>)
   15070:	2202      	movs	r2, #2
   15072:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   15074:	4b33      	ldr	r3, [pc, #204]	; (15144 <InitializeSeesaw+0xe8>)
   15076:	003a      	movs	r2, r7
   15078:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   1507a:	4b32      	ldr	r3, [pc, #200]	; (15144 <InitializeSeesaw+0xe8>)
   1507c:	2201      	movs	r2, #1
   1507e:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15080:	4b30      	ldr	r3, [pc, #192]	; (15144 <InitializeSeesaw+0xe8>)
   15082:	2264      	movs	r2, #100	; 0x64
   15084:	2100      	movs	r1, #0
   15086:	0018      	movs	r0, r3
   15088:	4b30      	ldr	r3, [pc, #192]	; (1514c <InitializeSeesaw+0xf0>)
   1508a:	4798      	blx	r3
   1508c:	0003      	movs	r3, r0
   1508e:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   15090:	687b      	ldr	r3, [r7, #4]
   15092:	2b00      	cmp	r3, #0
   15094:	d004      	beq.n	150a0 <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   15096:	4b2e      	ldr	r3, [pc, #184]	; (15150 <InitializeSeesaw+0xf4>)
   15098:	0018      	movs	r0, r3
   1509a:	4b2e      	ldr	r3, [pc, #184]	; (15154 <InitializeSeesaw+0xf8>)
   1509c:	4798      	blx	r3
   1509e:	e00c      	b.n	150ba <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   150a0:	003b      	movs	r3, r7
   150a2:	781b      	ldrb	r3, [r3, #0]
   150a4:	2b55      	cmp	r3, #85	; 0x55
   150a6:	d004      	beq.n	150b2 <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   150a8:	4b2b      	ldr	r3, [pc, #172]	; (15158 <InitializeSeesaw+0xfc>)
   150aa:	0018      	movs	r0, r3
   150ac:	4b29      	ldr	r3, [pc, #164]	; (15154 <InitializeSeesaw+0xf8>)
   150ae:	4798      	blx	r3
   150b0:	e003      	b.n	150ba <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   150b2:	4b2a      	ldr	r3, [pc, #168]	; (1515c <InitializeSeesaw+0x100>)
   150b4:	0018      	movs	r0, r3
   150b6:	4b27      	ldr	r3, [pc, #156]	; (15154 <InitializeSeesaw+0xf8>)
   150b8:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   150ba:	4b22      	ldr	r3, [pc, #136]	; (15144 <InitializeSeesaw+0xe8>)
   150bc:	4a28      	ldr	r2, [pc, #160]	; (15160 <InitializeSeesaw+0x104>)
   150be:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   150c0:	4b20      	ldr	r3, [pc, #128]	; (15144 <InitializeSeesaw+0xe8>)
   150c2:	2203      	movs	r2, #3
   150c4:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   150c6:	4b1f      	ldr	r3, [pc, #124]	; (15144 <InitializeSeesaw+0xe8>)
   150c8:	2164      	movs	r1, #100	; 0x64
   150ca:	0018      	movs	r0, r3
   150cc:	4b25      	ldr	r3, [pc, #148]	; (15164 <InitializeSeesaw+0x108>)
   150ce:	4798      	blx	r3
   150d0:	0003      	movs	r3, r0
   150d2:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   150d4:	687b      	ldr	r3, [r7, #4]
   150d6:	2b00      	cmp	r3, #0
   150d8:	d003      	beq.n	150e2 <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   150da:	4b23      	ldr	r3, [pc, #140]	; (15168 <InitializeSeesaw+0x10c>)
   150dc:	0018      	movs	r0, r3
   150de:	4b1d      	ldr	r3, [pc, #116]	; (15154 <InitializeSeesaw+0xf8>)
   150e0:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   150e2:	4b18      	ldr	r3, [pc, #96]	; (15144 <InitializeSeesaw+0xe8>)
   150e4:	4a21      	ldr	r2, [pc, #132]	; (1516c <InitializeSeesaw+0x110>)
   150e6:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   150e8:	4b16      	ldr	r3, [pc, #88]	; (15144 <InitializeSeesaw+0xe8>)
   150ea:	2203      	movs	r2, #3
   150ec:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   150ee:	4b15      	ldr	r3, [pc, #84]	; (15144 <InitializeSeesaw+0xe8>)
   150f0:	2164      	movs	r1, #100	; 0x64
   150f2:	0018      	movs	r0, r3
   150f4:	4b1b      	ldr	r3, [pc, #108]	; (15164 <InitializeSeesaw+0x108>)
   150f6:	4798      	blx	r3
   150f8:	0003      	movs	r3, r0
   150fa:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   150fc:	687b      	ldr	r3, [r7, #4]
   150fe:	2b00      	cmp	r3, #0
   15100:	d003      	beq.n	1510a <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   15102:	4b1b      	ldr	r3, [pc, #108]	; (15170 <InitializeSeesaw+0x114>)
   15104:	0018      	movs	r0, r3
   15106:	4b13      	ldr	r3, [pc, #76]	; (15154 <InitializeSeesaw+0xf8>)
   15108:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   1510a:	4b0e      	ldr	r3, [pc, #56]	; (15144 <InitializeSeesaw+0xe8>)
   1510c:	4a19      	ldr	r2, [pc, #100]	; (15174 <InitializeSeesaw+0x118>)
   1510e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   15110:	4b0c      	ldr	r3, [pc, #48]	; (15144 <InitializeSeesaw+0xe8>)
   15112:	2204      	movs	r2, #4
   15114:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15116:	4b0b      	ldr	r3, [pc, #44]	; (15144 <InitializeSeesaw+0xe8>)
   15118:	2164      	movs	r1, #100	; 0x64
   1511a:	0018      	movs	r0, r3
   1511c:	4b11      	ldr	r3, [pc, #68]	; (15164 <InitializeSeesaw+0x108>)
   1511e:	4798      	blx	r3
   15120:	0003      	movs	r3, r0
   15122:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   15124:	687b      	ldr	r3, [r7, #4]
   15126:	2b00      	cmp	r3, #0
   15128:	d003      	beq.n	15132 <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   1512a:	4b13      	ldr	r3, [pc, #76]	; (15178 <InitializeSeesaw+0x11c>)
   1512c:	0018      	movs	r0, r3
   1512e:	4b09      	ldr	r3, [pc, #36]	; (15154 <InitializeSeesaw+0xf8>)
   15130:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   15132:	4b12      	ldr	r3, [pc, #72]	; (1517c <InitializeSeesaw+0x120>)
   15134:	4798      	blx	r3

    SeesawInitializeKeypad();
   15136:	4b12      	ldr	r3, [pc, #72]	; (15180 <InitializeSeesaw+0x124>)
   15138:	4798      	blx	r3
    return error;
   1513a:	687b      	ldr	r3, [r7, #4]
}
   1513c:	0018      	movs	r0, r3
   1513e:	46bd      	mov	sp, r7
   15140:	b002      	add	sp, #8
   15142:	bd80      	pop	{r7, pc}
   15144:	200043fc 	.word	0x200043fc
   15148:	00035bac 	.word	0x00035bac
   1514c:	00013f95 	.word	0x00013f95
   15150:	00035bc4 	.word	0x00035bc4
   15154:	0001db55 	.word	0x0001db55
   15158:	00035be4 	.word	0x00035be4
   1515c:	00035bf0 	.word	0x00035bf0
   15160:	00035bb0 	.word	0x00035bb0
   15164:	00013ebd 	.word	0x00013ebd
   15168:	00035c04 	.word	0x00035c04
   1516c:	00035bb4 	.word	0x00035bb4
   15170:	00035c24 	.word	0x00035c24
   15174:	00035bb8 	.word	0x00035bb8
   15178:	00035c50 	.word	0x00035c50
   1517c:	00015531 	.word	0x00015531
   15180:	00015441 	.word	0x00015441

00015184 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   15184:	b580      	push	{r7, lr}
   15186:	b082      	sub	sp, #8
   15188:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   1518a:	1cfb      	adds	r3, r7, #3
   1518c:	2200      	movs	r2, #0
   1518e:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15190:	4b11      	ldr	r3, [pc, #68]	; (151d8 <SeesawGetKeypadCount+0x54>)
   15192:	222e      	movs	r2, #46	; 0x2e
   15194:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   15196:	4b10      	ldr	r3, [pc, #64]	; (151d8 <SeesawGetKeypadCount+0x54>)
   15198:	4a10      	ldr	r2, [pc, #64]	; (151dc <SeesawGetKeypadCount+0x58>)
   1519a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   1519c:	4b0e      	ldr	r3, [pc, #56]	; (151d8 <SeesawGetKeypadCount+0x54>)
   1519e:	2202      	movs	r2, #2
   151a0:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   151a2:	4b0d      	ldr	r3, [pc, #52]	; (151d8 <SeesawGetKeypadCount+0x54>)
   151a4:	1cfa      	adds	r2, r7, #3
   151a6:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   151a8:	4b0b      	ldr	r3, [pc, #44]	; (151d8 <SeesawGetKeypadCount+0x54>)
   151aa:	2201      	movs	r2, #1
   151ac:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   151ae:	4b0a      	ldr	r3, [pc, #40]	; (151d8 <SeesawGetKeypadCount+0x54>)
   151b0:	2264      	movs	r2, #100	; 0x64
   151b2:	2100      	movs	r1, #0
   151b4:	0018      	movs	r0, r3
   151b6:	4b0a      	ldr	r3, [pc, #40]	; (151e0 <SeesawGetKeypadCount+0x5c>)
   151b8:	4798      	blx	r3
   151ba:	0003      	movs	r3, r0
   151bc:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   151be:	687b      	ldr	r3, [r7, #4]
   151c0:	2b00      	cmp	r3, #0
   151c2:	d003      	beq.n	151cc <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   151c4:	4b07      	ldr	r3, [pc, #28]	; (151e4 <SeesawGetKeypadCount+0x60>)
   151c6:	0018      	movs	r0, r3
   151c8:	4b07      	ldr	r3, [pc, #28]	; (151e8 <SeesawGetKeypadCount+0x64>)
   151ca:	4798      	blx	r3
    }
    return count;
   151cc:	1cfb      	adds	r3, r7, #3
   151ce:	781b      	ldrb	r3, [r3, #0]
}
   151d0:	0018      	movs	r0, r3
   151d2:	46bd      	mov	sp, r7
   151d4:	b002      	add	sp, #8
   151d6:	bd80      	pop	{r7, pc}
   151d8:	200043fc 	.word	0x200043fc
   151dc:	00035bc0 	.word	0x00035bc0
   151e0:	00013f95 	.word	0x00013f95
   151e4:	00035c84 	.word	0x00035c84
   151e8:	0001db55 	.word	0x0001db55

000151ec <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   151ec:	b580      	push	{r7, lr}
   151ee:	b084      	sub	sp, #16
   151f0:	af00      	add	r7, sp, #0
   151f2:	6078      	str	r0, [r7, #4]
   151f4:	000a      	movs	r2, r1
   151f6:	1cfb      	adds	r3, r7, #3
   151f8:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   151fa:	1cfb      	adds	r3, r7, #3
   151fc:	781b      	ldrb	r3, [r3, #0]
   151fe:	2b00      	cmp	r3, #0
   15200:	d101      	bne.n	15206 <SeesawReadKeypad+0x1a>
   15202:	2300      	movs	r3, #0
   15204:	e026      	b.n	15254 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   15206:	2308      	movs	r3, #8
   15208:	18fb      	adds	r3, r7, r3
   1520a:	4a14      	ldr	r2, [pc, #80]	; (1525c <SeesawReadKeypad+0x70>)
   1520c:	8812      	ldrh	r2, [r2, #0]
   1520e:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   15210:	4b13      	ldr	r3, [pc, #76]	; (15260 <SeesawReadKeypad+0x74>)
   15212:	222e      	movs	r2, #46	; 0x2e
   15214:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   15216:	4b12      	ldr	r3, [pc, #72]	; (15260 <SeesawReadKeypad+0x74>)
   15218:	2208      	movs	r2, #8
   1521a:	18ba      	adds	r2, r7, r2
   1521c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1521e:	4b10      	ldr	r3, [pc, #64]	; (15260 <SeesawReadKeypad+0x74>)
   15220:	2202      	movs	r2, #2
   15222:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   15224:	4b0e      	ldr	r3, [pc, #56]	; (15260 <SeesawReadKeypad+0x74>)
   15226:	687a      	ldr	r2, [r7, #4]
   15228:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   1522a:	1cfb      	adds	r3, r7, #3
   1522c:	781b      	ldrb	r3, [r3, #0]
   1522e:	b29a      	uxth	r2, r3
   15230:	4b0b      	ldr	r3, [pc, #44]	; (15260 <SeesawReadKeypad+0x74>)
   15232:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   15234:	4b0a      	ldr	r3, [pc, #40]	; (15260 <SeesawReadKeypad+0x74>)
   15236:	2264      	movs	r2, #100	; 0x64
   15238:	2100      	movs	r1, #0
   1523a:	0018      	movs	r0, r3
   1523c:	4b09      	ldr	r3, [pc, #36]	; (15264 <SeesawReadKeypad+0x78>)
   1523e:	4798      	blx	r3
   15240:	0003      	movs	r3, r0
   15242:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   15244:	68fb      	ldr	r3, [r7, #12]
   15246:	2b00      	cmp	r3, #0
   15248:	d003      	beq.n	15252 <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   1524a:	4b07      	ldr	r3, [pc, #28]	; (15268 <SeesawReadKeypad+0x7c>)
   1524c:	0018      	movs	r0, r3
   1524e:	4b07      	ldr	r3, [pc, #28]	; (1526c <SeesawReadKeypad+0x80>)
   15250:	4798      	blx	r3
    }
    return error;
   15252:	68fb      	ldr	r3, [r7, #12]
}
   15254:	0018      	movs	r0, r3
   15256:	46bd      	mov	sp, r7
   15258:	b004      	add	sp, #16
   1525a:	bd80      	pop	{r7, pc}
   1525c:	00035ca8 	.word	0x00035ca8
   15260:	200043fc 	.word	0x200043fc
   15264:	00013f95 	.word	0x00013f95
   15268:	00035c84 	.word	0x00035c84
   1526c:	0001db55 	.word	0x0001db55

00015270 <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   15270:	b590      	push	{r4, r7, lr}
   15272:	b087      	sub	sp, #28
   15274:	af00      	add	r7, sp, #0
   15276:	0004      	movs	r4, r0
   15278:	0008      	movs	r0, r1
   1527a:	0011      	movs	r1, r2
   1527c:	1dfb      	adds	r3, r7, #7
   1527e:	1c22      	adds	r2, r4, #0
   15280:	701a      	strb	r2, [r3, #0]
   15282:	1dbb      	adds	r3, r7, #6
   15284:	1c02      	adds	r2, r0, #0
   15286:	701a      	strb	r2, [r3, #0]
   15288:	1d7b      	adds	r3, r7, #5
   1528a:	1c0a      	adds	r2, r1, #0
   1528c:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   1528e:	2310      	movs	r3, #16
   15290:	18fb      	adds	r3, r7, r3
   15292:	1d7a      	adds	r2, r7, #5
   15294:	7812      	ldrb	r2, [r2, #0]
   15296:	2101      	movs	r1, #1
   15298:	0010      	movs	r0, r2
   1529a:	4008      	ands	r0, r1
   1529c:	781a      	ldrb	r2, [r3, #0]
   1529e:	2101      	movs	r1, #1
   152a0:	438a      	bics	r2, r1
   152a2:	1c11      	adds	r1, r2, #0
   152a4:	1c02      	adds	r2, r0, #0
   152a6:	430a      	orrs	r2, r1
   152a8:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   152aa:	1dbb      	adds	r3, r7, #6
   152ac:	781b      	ldrb	r3, [r3, #0]
   152ae:	2201      	movs	r2, #1
   152b0:	409a      	lsls	r2, r3
   152b2:	0013      	movs	r3, r2
   152b4:	b2db      	uxtb	r3, r3
   152b6:	1c1a      	adds	r2, r3, #0
   152b8:	230f      	movs	r3, #15
   152ba:	4013      	ands	r3, r2
   152bc:	b2da      	uxtb	r2, r3
   152be:	2310      	movs	r3, #16
   152c0:	18fb      	adds	r3, r7, r3
   152c2:	210f      	movs	r1, #15
   152c4:	400a      	ands	r2, r1
   152c6:	1890      	adds	r0, r2, r2
   152c8:	781a      	ldrb	r2, [r3, #0]
   152ca:	211e      	movs	r1, #30
   152cc:	438a      	bics	r2, r1
   152ce:	1c11      	adds	r1, r2, #0
   152d0:	1c02      	adds	r2, r0, #0
   152d2:	430a      	orrs	r2, r1
   152d4:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   152d6:	230c      	movs	r3, #12
   152d8:	18fb      	adds	r3, r7, r3
   152da:	2210      	movs	r2, #16
   152dc:	701a      	strb	r2, [r3, #0]
   152de:	230c      	movs	r3, #12
   152e0:	18fb      	adds	r3, r7, r3
   152e2:	2201      	movs	r2, #1
   152e4:	705a      	strb	r2, [r3, #1]
   152e6:	230c      	movs	r3, #12
   152e8:	18fb      	adds	r3, r7, r3
   152ea:	1dfa      	adds	r2, r7, #7
   152ec:	7812      	ldrb	r2, [r2, #0]
   152ee:	709a      	strb	r2, [r3, #2]
   152f0:	2310      	movs	r3, #16
   152f2:	18fb      	adds	r3, r7, r3
   152f4:	781a      	ldrb	r2, [r3, #0]
   152f6:	230c      	movs	r3, #12
   152f8:	18fb      	adds	r3, r7, r3
   152fa:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   152fc:	4b0c      	ldr	r3, [pc, #48]	; (15330 <SeesawActivateKey+0xc0>)
   152fe:	222e      	movs	r2, #46	; 0x2e
   15300:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   15302:	4b0b      	ldr	r3, [pc, #44]	; (15330 <SeesawActivateKey+0xc0>)
   15304:	220c      	movs	r2, #12
   15306:	18ba      	adds	r2, r7, r2
   15308:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1530a:	4b09      	ldr	r3, [pc, #36]	; (15330 <SeesawActivateKey+0xc0>)
   1530c:	2204      	movs	r2, #4
   1530e:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   15310:	4b07      	ldr	r3, [pc, #28]	; (15330 <SeesawActivateKey+0xc0>)
   15312:	2200      	movs	r2, #0
   15314:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   15316:	4b06      	ldr	r3, [pc, #24]	; (15330 <SeesawActivateKey+0xc0>)
   15318:	2164      	movs	r1, #100	; 0x64
   1531a:	0018      	movs	r0, r3
   1531c:	4b05      	ldr	r3, [pc, #20]	; (15334 <SeesawActivateKey+0xc4>)
   1531e:	4798      	blx	r3
   15320:	0003      	movs	r3, r0
   15322:	617b      	str	r3, [r7, #20]
    return error;
   15324:	697b      	ldr	r3, [r7, #20]
}
   15326:	0018      	movs	r0, r3
   15328:	46bd      	mov	sp, r7
   1532a:	b007      	add	sp, #28
   1532c:	bd90      	pop	{r4, r7, pc}
   1532e:	46c0      	nop			; (mov r8, r8)
   15330:	200043fc 	.word	0x200043fc
   15334:	00013ebd 	.word	0x00013ebd

00015338 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   15338:	b5b0      	push	{r4, r5, r7, lr}
   1533a:	b086      	sub	sp, #24
   1533c:	af00      	add	r7, sp, #0
   1533e:	0005      	movs	r5, r0
   15340:	000c      	movs	r4, r1
   15342:	0010      	movs	r0, r2
   15344:	0019      	movs	r1, r3
   15346:	1dfb      	adds	r3, r7, #7
   15348:	1c2a      	adds	r2, r5, #0
   1534a:	701a      	strb	r2, [r3, #0]
   1534c:	1dbb      	adds	r3, r7, #6
   1534e:	1c22      	adds	r2, r4, #0
   15350:	701a      	strb	r2, [r3, #0]
   15352:	1d7b      	adds	r3, r7, #5
   15354:	1c02      	adds	r2, r0, #0
   15356:	701a      	strb	r2, [r3, #0]
   15358:	1d3b      	adds	r3, r7, #4
   1535a:	1c0a      	adds	r2, r1, #0
   1535c:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   1535e:	2308      	movs	r3, #8
   15360:	18fb      	adds	r3, r7, r3
   15362:	220e      	movs	r2, #14
   15364:	701a      	strb	r2, [r3, #0]
   15366:	2308      	movs	r3, #8
   15368:	18fb      	adds	r3, r7, r3
   1536a:	2204      	movs	r2, #4
   1536c:	705a      	strb	r2, [r3, #1]
   1536e:	2308      	movs	r3, #8
   15370:	18fb      	adds	r3, r7, r3
   15372:	2200      	movs	r2, #0
   15374:	709a      	strb	r2, [r3, #2]
   15376:	2308      	movs	r3, #8
   15378:	18fb      	adds	r3, r7, r3
   1537a:	2200      	movs	r2, #0
   1537c:	70da      	strb	r2, [r3, #3]
   1537e:	2308      	movs	r3, #8
   15380:	18fb      	adds	r3, r7, r3
   15382:	1d7a      	adds	r2, r7, #5
   15384:	7812      	ldrb	r2, [r2, #0]
   15386:	711a      	strb	r2, [r3, #4]
   15388:	2308      	movs	r3, #8
   1538a:	18fb      	adds	r3, r7, r3
   1538c:	1dba      	adds	r2, r7, #6
   1538e:	7812      	ldrb	r2, [r2, #0]
   15390:	715a      	strb	r2, [r3, #5]
   15392:	2308      	movs	r3, #8
   15394:	18fb      	adds	r3, r7, r3
   15396:	1d3a      	adds	r2, r7, #4
   15398:	7812      	ldrb	r2, [r2, #0]
   1539a:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   1539c:	1dfb      	adds	r3, r7, #7
   1539e:	781b      	ldrb	r3, [r3, #0]
   153a0:	b29b      	uxth	r3, r3
   153a2:	2216      	movs	r2, #22
   153a4:	18ba      	adds	r2, r7, r2
   153a6:	1c19      	adds	r1, r3, #0
   153a8:	1c0b      	adds	r3, r1, #0
   153aa:	18db      	adds	r3, r3, r3
   153ac:	185b      	adds	r3, r3, r1
   153ae:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   153b0:	2316      	movs	r3, #22
   153b2:	18fb      	adds	r3, r7, r3
   153b4:	881b      	ldrh	r3, [r3, #0]
   153b6:	0a1b      	lsrs	r3, r3, #8
   153b8:	b29b      	uxth	r3, r3
   153ba:	b2da      	uxtb	r2, r3
   153bc:	2308      	movs	r3, #8
   153be:	18fb      	adds	r3, r7, r3
   153c0:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   153c2:	2316      	movs	r3, #22
   153c4:	18fb      	adds	r3, r7, r3
   153c6:	881b      	ldrh	r3, [r3, #0]
   153c8:	b2da      	uxtb	r2, r3
   153ca:	2308      	movs	r3, #8
   153cc:	18fb      	adds	r3, r7, r3
   153ce:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   153d0:	4b09      	ldr	r3, [pc, #36]	; (153f8 <SeesawSetLed+0xc0>)
   153d2:	2208      	movs	r2, #8
   153d4:	18ba      	adds	r2, r7, r2
   153d6:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   153d8:	4b07      	ldr	r3, [pc, #28]	; (153f8 <SeesawSetLed+0xc0>)
   153da:	2207      	movs	r2, #7
   153dc:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   153de:	4b06      	ldr	r3, [pc, #24]	; (153f8 <SeesawSetLed+0xc0>)
   153e0:	2164      	movs	r1, #100	; 0x64
   153e2:	0018      	movs	r0, r3
   153e4:	4b05      	ldr	r3, [pc, #20]	; (153fc <SeesawSetLed+0xc4>)
   153e6:	4798      	blx	r3
   153e8:	0003      	movs	r3, r0
   153ea:	613b      	str	r3, [r7, #16]
    return error;
   153ec:	693b      	ldr	r3, [r7, #16]
}
   153ee:	0018      	movs	r0, r3
   153f0:	46bd      	mov	sp, r7
   153f2:	b006      	add	sp, #24
   153f4:	bdb0      	pop	{r4, r5, r7, pc}
   153f6:	46c0      	nop			; (mov r8, r8)
   153f8:	200043fc 	.word	0x200043fc
   153fc:	00013ebd 	.word	0x00013ebd

00015400 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   15400:	b580      	push	{r7, lr}
   15402:	b082      	sub	sp, #8
   15404:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   15406:	003b      	movs	r3, r7
   15408:	4a0a      	ldr	r2, [pc, #40]	; (15434 <SeesawOrderLedUpdate+0x34>)
   1540a:	8812      	ldrh	r2, [r2, #0]
   1540c:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   1540e:	4b0a      	ldr	r3, [pc, #40]	; (15438 <SeesawOrderLedUpdate+0x38>)
   15410:	003a      	movs	r2, r7
   15412:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   15414:	4b08      	ldr	r3, [pc, #32]	; (15438 <SeesawOrderLedUpdate+0x38>)
   15416:	2202      	movs	r2, #2
   15418:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1541a:	4b07      	ldr	r3, [pc, #28]	; (15438 <SeesawOrderLedUpdate+0x38>)
   1541c:	2164      	movs	r1, #100	; 0x64
   1541e:	0018      	movs	r0, r3
   15420:	4b06      	ldr	r3, [pc, #24]	; (1543c <SeesawOrderLedUpdate+0x3c>)
   15422:	4798      	blx	r3
   15424:	0003      	movs	r3, r0
   15426:	607b      	str	r3, [r7, #4]
    return error;
   15428:	687b      	ldr	r3, [r7, #4]
}
   1542a:	0018      	movs	r0, r3
   1542c:	46bd      	mov	sp, r7
   1542e:	b002      	add	sp, #8
   15430:	bd80      	pop	{r7, pc}
   15432:	46c0      	nop			; (mov r8, r8)
   15434:	00035cac 	.word	0x00035cac
   15438:	200043fc 	.word	0x200043fc
   1543c:	00013ebd 	.word	0x00013ebd

00015440 <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   15440:	b580      	push	{r7, lr}
   15442:	b082      	sub	sp, #8
   15444:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   15446:	4b33      	ldr	r3, [pc, #204]	; (15514 <SeesawInitializeKeypad+0xd4>)
   15448:	222e      	movs	r2, #46	; 0x2e
   1544a:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   1544c:	4b31      	ldr	r3, [pc, #196]	; (15514 <SeesawInitializeKeypad+0xd4>)
   1544e:	4a32      	ldr	r2, [pc, #200]	; (15518 <SeesawInitializeKeypad+0xd8>)
   15450:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   15452:	4b30      	ldr	r3, [pc, #192]	; (15514 <SeesawInitializeKeypad+0xd4>)
   15454:	2203      	movs	r2, #3
   15456:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   15458:	4b2e      	ldr	r3, [pc, #184]	; (15514 <SeesawInitializeKeypad+0xd4>)
   1545a:	2200      	movs	r2, #0
   1545c:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   1545e:	4b2d      	ldr	r3, [pc, #180]	; (15514 <SeesawInitializeKeypad+0xd4>)
   15460:	2164      	movs	r1, #100	; 0x64
   15462:	0018      	movs	r0, r3
   15464:	4b2d      	ldr	r3, [pc, #180]	; (1551c <SeesawInitializeKeypad+0xdc>)
   15466:	4798      	blx	r3
   15468:	0003      	movs	r3, r0
   1546a:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   1546c:	683b      	ldr	r3, [r7, #0]
   1546e:	2b00      	cmp	r3, #0
   15470:	d003      	beq.n	1547a <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   15472:	4b2b      	ldr	r3, [pc, #172]	; (15520 <SeesawInitializeKeypad+0xe0>)
   15474:	0018      	movs	r0, r3
   15476:	4b2b      	ldr	r3, [pc, #172]	; (15524 <SeesawInitializeKeypad+0xe4>)
   15478:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   1547a:	2300      	movs	r3, #0
   1547c:	607b      	str	r3, [r7, #4]
   1547e:	e041      	b.n	15504 <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   15480:	687b      	ldr	r3, [r7, #4]
   15482:	2b00      	cmp	r3, #0
   15484:	da00      	bge.n	15488 <SeesawInitializeKeypad+0x48>
   15486:	3303      	adds	r3, #3
   15488:	109b      	asrs	r3, r3, #2
   1548a:	b2db      	uxtb	r3, r3
   1548c:	00db      	lsls	r3, r3, #3
   1548e:	b2da      	uxtb	r2, r3
   15490:	687b      	ldr	r3, [r7, #4]
   15492:	4925      	ldr	r1, [pc, #148]	; (15528 <SeesawInitializeKeypad+0xe8>)
   15494:	400b      	ands	r3, r1
   15496:	d504      	bpl.n	154a2 <SeesawInitializeKeypad+0x62>
   15498:	3b01      	subs	r3, #1
   1549a:	2104      	movs	r1, #4
   1549c:	4249      	negs	r1, r1
   1549e:	430b      	orrs	r3, r1
   154a0:	3301      	adds	r3, #1
   154a2:	b2db      	uxtb	r3, r3
   154a4:	18d3      	adds	r3, r2, r3
   154a6:	b2db      	uxtb	r3, r3
   154a8:	2201      	movs	r2, #1
   154aa:	2103      	movs	r1, #3
   154ac:	0018      	movs	r0, r3
   154ae:	4b1f      	ldr	r3, [pc, #124]	; (1552c <SeesawInitializeKeypad+0xec>)
   154b0:	4798      	blx	r3
   154b2:	0003      	movs	r3, r0
   154b4:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   154b6:	687b      	ldr	r3, [r7, #4]
   154b8:	2b00      	cmp	r3, #0
   154ba:	da00      	bge.n	154be <SeesawInitializeKeypad+0x7e>
   154bc:	3303      	adds	r3, #3
   154be:	109b      	asrs	r3, r3, #2
   154c0:	b2db      	uxtb	r3, r3
   154c2:	00db      	lsls	r3, r3, #3
   154c4:	b2da      	uxtb	r2, r3
   154c6:	687b      	ldr	r3, [r7, #4]
   154c8:	4917      	ldr	r1, [pc, #92]	; (15528 <SeesawInitializeKeypad+0xe8>)
   154ca:	400b      	ands	r3, r1
   154cc:	d504      	bpl.n	154d8 <SeesawInitializeKeypad+0x98>
   154ce:	3b01      	subs	r3, #1
   154d0:	2104      	movs	r1, #4
   154d2:	4249      	negs	r1, r1
   154d4:	430b      	orrs	r3, r1
   154d6:	3301      	adds	r3, #1
   154d8:	b2db      	uxtb	r3, r3
   154da:	18d3      	adds	r3, r2, r3
   154dc:	b2db      	uxtb	r3, r3
   154de:	2201      	movs	r2, #1
   154e0:	2102      	movs	r1, #2
   154e2:	0018      	movs	r0, r3
   154e4:	4b11      	ldr	r3, [pc, #68]	; (1552c <SeesawInitializeKeypad+0xec>)
   154e6:	4798      	blx	r3
   154e8:	0002      	movs	r2, r0
   154ea:	683b      	ldr	r3, [r7, #0]
   154ec:	4313      	orrs	r3, r2
   154ee:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   154f0:	683b      	ldr	r3, [r7, #0]
   154f2:	2b00      	cmp	r3, #0
   154f4:	d003      	beq.n	154fe <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   154f6:	4b0a      	ldr	r3, [pc, #40]	; (15520 <SeesawInitializeKeypad+0xe0>)
   154f8:	0018      	movs	r0, r3
   154fa:	4b0a      	ldr	r3, [pc, #40]	; (15524 <SeesawInitializeKeypad+0xe4>)
   154fc:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   154fe:	687b      	ldr	r3, [r7, #4]
   15500:	3301      	adds	r3, #1
   15502:	607b      	str	r3, [r7, #4]
   15504:	687b      	ldr	r3, [r7, #4]
   15506:	2b0f      	cmp	r3, #15
   15508:	ddba      	ble.n	15480 <SeesawInitializeKeypad+0x40>
        }
    }
}
   1550a:	46c0      	nop			; (mov r8, r8)
   1550c:	46bd      	mov	sp, r7
   1550e:	b002      	add	sp, #8
   15510:	bd80      	pop	{r7, pc}
   15512:	46c0      	nop			; (mov r8, r8)
   15514:	200043fc 	.word	0x200043fc
   15518:	00035bbc 	.word	0x00035bbc
   1551c:	00013ebd 	.word	0x00013ebd
   15520:	00035cb0 	.word	0x00035cb0
   15524:	0001db55 	.word	0x0001db55
   15528:	80000003 	.word	0x80000003
   1552c:	00015271 	.word	0x00015271

00015530 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   15530:	b5b0      	push	{r4, r5, r7, lr}
   15532:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   15534:	23ff      	movs	r3, #255	; 0xff
   15536:	22ff      	movs	r2, #255	; 0xff
   15538:	21ff      	movs	r1, #255	; 0xff
   1553a:	200f      	movs	r0, #15
   1553c:	4c09      	ldr	r4, [pc, #36]	; (15564 <SeesawTurnOnLedTest+0x34>)
   1553e:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   15540:	4b09      	ldr	r3, [pc, #36]	; (15568 <SeesawTurnOnLedTest+0x38>)
   15542:	4798      	blx	r3
    vTaskDelay(400);
   15544:	23c8      	movs	r3, #200	; 0xc8
   15546:	005b      	lsls	r3, r3, #1
   15548:	0018      	movs	r0, r3
   1554a:	4b08      	ldr	r3, [pc, #32]	; (1556c <SeesawTurnOnLedTest+0x3c>)
   1554c:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   1554e:	2300      	movs	r3, #0
   15550:	2200      	movs	r2, #0
   15552:	2100      	movs	r1, #0
   15554:	200f      	movs	r0, #15
   15556:	4c03      	ldr	r4, [pc, #12]	; (15564 <SeesawTurnOnLedTest+0x34>)
   15558:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   1555a:	4b03      	ldr	r3, [pc, #12]	; (15568 <SeesawTurnOnLedTest+0x38>)
   1555c:	4798      	blx	r3
   1555e:	46c0      	nop			; (mov r8, r8)
   15560:	46bd      	mov	sp, r7
   15562:	bdb0      	pop	{r4, r5, r7, pc}
   15564:	00015339 	.word	0x00015339
   15568:	00015401 	.word	0x00015401
   1556c:	0001bf01 	.word	0x0001bf01

00015570 <shtc_write>:
	.address = SHTC3_ADDRESS
};


static int32_t shtc_write(uint8_t *bufp, uint16_t len)
{
   15570:	b580      	push	{r7, lr}
   15572:	b082      	sub	sp, #8
   15574:	af00      	add	r7, sp, #0
   15576:	6078      	str	r0, [r7, #4]
   15578:	000a      	movs	r2, r1
   1557a:	1cbb      	adds	r3, r7, #2
   1557c:	801a      	strh	r2, [r3, #0]
	shtcData.lenOut = len;
   1557e:	4b0b      	ldr	r3, [pc, #44]	; (155ac <shtc_write+0x3c>)
   15580:	1cba      	adds	r2, r7, #2
   15582:	8812      	ldrh	r2, [r2, #0]
   15584:	81da      	strh	r2, [r3, #14]
	shtcData.msgOut = bufp;
   15586:	4b09      	ldr	r3, [pc, #36]	; (155ac <shtc_write+0x3c>)
   15588:	687a      	ldr	r2, [r7, #4]
   1558a:	605a      	str	r2, [r3, #4]
	shtcData.msgIn = NULL;
   1558c:	4b07      	ldr	r3, [pc, #28]	; (155ac <shtc_write+0x3c>)
   1558e:	2200      	movs	r2, #0
   15590:	609a      	str	r2, [r3, #8]
	shtcData.lenIn = 0;
   15592:	4b06      	ldr	r3, [pc, #24]	; (155ac <shtc_write+0x3c>)
   15594:	2200      	movs	r2, #0
   15596:	819a      	strh	r2, [r3, #12]
	return I2cWriteDataWait(&shtcData, SHTC3_TIMEOUT);
   15598:	4b04      	ldr	r3, [pc, #16]	; (155ac <shtc_write+0x3c>)
   1559a:	210a      	movs	r1, #10
   1559c:	0018      	movs	r0, r3
   1559e:	4b04      	ldr	r3, [pc, #16]	; (155b0 <shtc_write+0x40>)
   155a0:	4798      	blx	r3
   155a2:	0003      	movs	r3, r0
} 
   155a4:	0018      	movs	r0, r3
   155a6:	46bd      	mov	sp, r7
   155a8:	b002      	add	sp, #8
   155aa:	bd80      	pop	{r7, pc}
   155ac:	2000003c 	.word	0x2000003c
   155b0:	00013ebd 	.word	0x00013ebd

000155b4 <shtc_read>:

static int32_t shtc_read(uint8_t *bufp, uint16_t len)
{
   155b4:	b580      	push	{r7, lr}
   155b6:	b082      	sub	sp, #8
   155b8:	af00      	add	r7, sp, #0
   155ba:	6078      	str	r0, [r7, #4]
   155bc:	000a      	movs	r2, r1
   155be:	1cbb      	adds	r3, r7, #2
   155c0:	801a      	strh	r2, [r3, #0]
	shtcData.lenOut = len;
   155c2:	4b0c      	ldr	r3, [pc, #48]	; (155f4 <shtc_read+0x40>)
   155c4:	1cba      	adds	r2, r7, #2
   155c6:	8812      	ldrh	r2, [r2, #0]
   155c8:	81da      	strh	r2, [r3, #14]
	shtcData.msgOut = bufp;
   155ca:	4b0a      	ldr	r3, [pc, #40]	; (155f4 <shtc_read+0x40>)
   155cc:	687a      	ldr	r2, [r7, #4]
   155ce:	605a      	str	r2, [r3, #4]
	shtcData.msgIn = read_buffer;
   155d0:	4b08      	ldr	r3, [pc, #32]	; (155f4 <shtc_read+0x40>)
   155d2:	4a09      	ldr	r2, [pc, #36]	; (155f8 <shtc_read+0x44>)
   155d4:	609a      	str	r2, [r3, #8]
	shtcData.lenIn = READ_BUFFER_LEN;
   155d6:	4b07      	ldr	r3, [pc, #28]	; (155f4 <shtc_read+0x40>)
   155d8:	2206      	movs	r2, #6
   155da:	819a      	strh	r2, [r3, #12]
	return I2cReadDataWait(&shtcData,SHTC3_delay, SHTC3_TIMEOUT);
   155dc:	4b05      	ldr	r3, [pc, #20]	; (155f4 <shtc_read+0x40>)
   155de:	220a      	movs	r2, #10
   155e0:	21d2      	movs	r1, #210	; 0xd2
   155e2:	0018      	movs	r0, r3
   155e4:	4b05      	ldr	r3, [pc, #20]	; (155fc <shtc_read+0x48>)
   155e6:	4798      	blx	r3
   155e8:	0003      	movs	r3, r0
}
   155ea:	0018      	movs	r0, r3
   155ec:	46bd      	mov	sp, r7
   155ee:	b002      	add	sp, #8
   155f0:	bd80      	pop	{r7, pc}
   155f2:	46c0      	nop			; (mov r8, r8)
   155f4:	2000003c 	.word	0x2000003c
   155f8:	2000440c 	.word	0x2000440c
   155fc:	00013f95 	.word	0x00013f95

00015600 <shtc_get>:


bool shtc_get(uint16_t *buf){
   15600:	b580      	push	{r7, lr}
   15602:	b084      	sub	sp, #16
   15604:	af00      	add	r7, sp, #0
   15606:	6078      	str	r0, [r7, #4]
	int32_t err_ = ERROR_NONE;
   15608:	2300      	movs	r3, #0
   1560a:	60fb      	str	r3, [r7, #12]
	
	err_ = shtc_write(wake_write_buffer, WAKE_WRITE_BUFFER_LEN);
   1560c:	4b31      	ldr	r3, [pc, #196]	; (156d4 <shtc_get+0xd4>)
   1560e:	2102      	movs	r1, #2
   15610:	0018      	movs	r0, r3
   15612:	4b31      	ldr	r3, [pc, #196]	; (156d8 <shtc_get+0xd8>)
   15614:	4798      	blx	r3
   15616:	0003      	movs	r3, r0
   15618:	60fb      	str	r3, [r7, #12]
	if(err_ != ERROR_NONE) {goto exit_error;}
   1561a:	68fb      	ldr	r3, [r7, #12]
   1561c:	2b00      	cmp	r3, #0
   1561e:	d149      	bne.n	156b4 <shtc_get+0xb4>
		
	err_ = shtc_read(meas_write_buffer, MEAS_WRITE_BUFFER_LEN);
   15620:	4b2e      	ldr	r3, [pc, #184]	; (156dc <shtc_get+0xdc>)
   15622:	2102      	movs	r1, #2
   15624:	0018      	movs	r0, r3
   15626:	4b2e      	ldr	r3, [pc, #184]	; (156e0 <shtc_get+0xe0>)
   15628:	4798      	blx	r3
   1562a:	0003      	movs	r3, r0
   1562c:	60fb      	str	r3, [r7, #12]
	if(err_ != ERROR_NONE) {goto exit_error;}
   1562e:	68fb      	ldr	r3, [r7, #12]
   15630:	2b00      	cmp	r3, #0
   15632:	d141      	bne.n	156b8 <shtc_get+0xb8>
		
	shtc_write(sleep_write_buffer, SLEEP_WRITE_BUFFER_LEN);
   15634:	4b2b      	ldr	r3, [pc, #172]	; (156e4 <shtc_get+0xe4>)
   15636:	2102      	movs	r1, #2
   15638:	0018      	movs	r0, r3
   1563a:	4b27      	ldr	r3, [pc, #156]	; (156d8 <shtc_get+0xd8>)
   1563c:	4798      	blx	r3
	
	buf[0] = (read_buffer[0] << 8) | read_buffer[1] ;
   1563e:	4b2a      	ldr	r3, [pc, #168]	; (156e8 <shtc_get+0xe8>)
   15640:	781b      	ldrb	r3, [r3, #0]
   15642:	021b      	lsls	r3, r3, #8
   15644:	b21a      	sxth	r2, r3
   15646:	4b28      	ldr	r3, [pc, #160]	; (156e8 <shtc_get+0xe8>)
   15648:	785b      	ldrb	r3, [r3, #1]
   1564a:	b21b      	sxth	r3, r3
   1564c:	4313      	orrs	r3, r2
   1564e:	b21b      	sxth	r3, r3
   15650:	b29a      	uxth	r2, r3
   15652:	687b      	ldr	r3, [r7, #4]
   15654:	801a      	strh	r2, [r3, #0]
	buf[1] = (read_buffer[3] << 8) | read_buffer[4] ;
   15656:	687b      	ldr	r3, [r7, #4]
   15658:	3302      	adds	r3, #2
   1565a:	4a23      	ldr	r2, [pc, #140]	; (156e8 <shtc_get+0xe8>)
   1565c:	78d2      	ldrb	r2, [r2, #3]
   1565e:	0212      	lsls	r2, r2, #8
   15660:	b211      	sxth	r1, r2
   15662:	4a21      	ldr	r2, [pc, #132]	; (156e8 <shtc_get+0xe8>)
   15664:	7912      	ldrb	r2, [r2, #4]
   15666:	b212      	sxth	r2, r2
   15668:	430a      	orrs	r2, r1
   1566a:	b212      	sxth	r2, r2
   1566c:	b292      	uxth	r2, r2
   1566e:	801a      	strh	r2, [r3, #0]
		
	buf[0] = 100 * buf[0]/65536;
   15670:	687b      	ldr	r3, [r7, #4]
   15672:	881b      	ldrh	r3, [r3, #0]
   15674:	001a      	movs	r2, r3
   15676:	2364      	movs	r3, #100	; 0x64
   15678:	4353      	muls	r3, r2
   1567a:	2b00      	cmp	r3, #0
   1567c:	da02      	bge.n	15684 <shtc_get+0x84>
   1567e:	4a1b      	ldr	r2, [pc, #108]	; (156ec <shtc_get+0xec>)
   15680:	4694      	mov	ip, r2
   15682:	4463      	add	r3, ip
   15684:	141b      	asrs	r3, r3, #16
   15686:	b29a      	uxth	r2, r3
   15688:	687b      	ldr	r3, [r7, #4]
   1568a:	801a      	strh	r2, [r3, #0]
	buf[1] = -45 +175 * buf[1]/65536;
   1568c:	687b      	ldr	r3, [r7, #4]
   1568e:	1c9a      	adds	r2, r3, #2
   15690:	687b      	ldr	r3, [r7, #4]
   15692:	3302      	adds	r3, #2
   15694:	881b      	ldrh	r3, [r3, #0]
   15696:	0019      	movs	r1, r3
   15698:	23af      	movs	r3, #175	; 0xaf
   1569a:	434b      	muls	r3, r1
   1569c:	2b00      	cmp	r3, #0
   1569e:	da02      	bge.n	156a6 <shtc_get+0xa6>
   156a0:	4912      	ldr	r1, [pc, #72]	; (156ec <shtc_get+0xec>)
   156a2:	468c      	mov	ip, r1
   156a4:	4463      	add	r3, ip
   156a6:	141b      	asrs	r3, r3, #16
   156a8:	b29b      	uxth	r3, r3
   156aa:	3b2d      	subs	r3, #45	; 0x2d
   156ac:	b29b      	uxth	r3, r3
   156ae:	8013      	strh	r3, [r2, #0]
	
	return true;
   156b0:	2301      	movs	r3, #1
   156b2:	e00a      	b.n	156ca <shtc_get+0xca>
	if(err_ != ERROR_NONE) {goto exit_error;}
   156b4:	46c0      	nop			; (mov r8, r8)
   156b6:	e000      	b.n	156ba <shtc_get+0xba>
	if(err_ != ERROR_NONE) {goto exit_error;}
   156b8:	46c0      	nop			; (mov r8, r8)
	
	exit_error:
		buf[0] = 0;
   156ba:	687b      	ldr	r3, [r7, #4]
   156bc:	2200      	movs	r2, #0
   156be:	801a      	strh	r2, [r3, #0]
		buf[1] = 0;
   156c0:	687b      	ldr	r3, [r7, #4]
   156c2:	3302      	adds	r3, #2
   156c4:	2200      	movs	r2, #0
   156c6:	801a      	strh	r2, [r3, #0]
		return false;
   156c8:	2300      	movs	r3, #0
}
   156ca:	0018      	movs	r0, r3
   156cc:	46bd      	mov	sp, r7
   156ce:	b004      	add	sp, #16
   156d0:	bd80      	pop	{r7, pc}
   156d2:	46c0      	nop			; (mov r8, r8)
   156d4:	20000030 	.word	0x20000030
   156d8:	00015571 	.word	0x00015571
   156dc:	20000034 	.word	0x20000034
   156e0:	000155b5 	.word	0x000155b5
   156e4:	20000038 	.word	0x20000038
   156e8:	2000440c 	.word	0x2000440c
   156ec:	0000ffff 	.word	0x0000ffff

000156f0 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   156f0:	b590      	push	{r4, r7, lr}
   156f2:	b087      	sub	sp, #28
   156f4:	af00      	add	r7, sp, #0
   156f6:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   156f8:	4bb1      	ldr	r3, [pc, #708]	; (159c0 <vUiHandlerTask+0x2d0>)
   156fa:	0018      	movs	r0, r3
   156fc:	4bb1      	ldr	r3, [pc, #708]	; (159c4 <vUiHandlerTask+0x2d4>)
   156fe:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   15700:	4bb1      	ldr	r3, [pc, #708]	; (159c8 <vUiHandlerTask+0x2d8>)
   15702:	2200      	movs	r2, #0
   15704:	701a      	strb	r2, [r3, #0]

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   15706:	4bb0      	ldr	r3, [pc, #704]	; (159c8 <vUiHandlerTask+0x2d8>)
   15708:	781b      	ldrb	r3, [r3, #0]
   1570a:	2b01      	cmp	r3, #1
   1570c:	d00b      	beq.n	15726 <vUiHandlerTask+0x36>
   1570e:	2b02      	cmp	r3, #2
   15710:	d100      	bne.n	15714 <vUiHandlerTask+0x24>
   15712:	e14f      	b.n	159b4 <vUiHandlerTask+0x2c4>
   15714:	2b00      	cmp	r3, #0
   15716:	d000      	beq.n	1571a <vUiHandlerTask+0x2a>
   15718:	e148      	b.n	159ac <vUiHandlerTask+0x2bc>
            case (UI_STATE_IGNORE_PRESSES): {
				SeesawReadKeypad(&ship_loc_buffer, 1);
   1571a:	4bac      	ldr	r3, [pc, #688]	; (159cc <vUiHandlerTask+0x2dc>)
   1571c:	2101      	movs	r1, #1
   1571e:	0018      	movs	r0, r3
   15720:	4bab      	ldr	r3, [pc, #684]	; (159d0 <vUiHandlerTask+0x2e0>)
   15722:	4798      	blx	r3
                break;
   15724:	e147      	b.n	159b6 <vUiHandlerTask+0x2c6>
            }

            case (UI_STATE_PLACE_SHIP): {
				ship_loc_out_num = 0;
   15726:	4bab      	ldr	r3, [pc, #684]	; (159d4 <vUiHandlerTask+0x2e4>)
   15728:	2200      	movs	r2, #0
   1572a:	701a      	strb	r2, [r3, #0]
				
				for(int i = 0; i < ship_num; i++){
   1572c:	2300      	movs	r3, #0
   1572e:	617b      	str	r3, [r7, #20]
   15730:	e131      	b.n	15996 <vUiHandlerTask+0x2a6>
					uint8_t ship_head, ship_tail;
					uint8_t cur_ship_size = 0;
   15732:	2311      	movs	r3, #17
   15734:	18fb      	adds	r3, r7, r3
   15736:	2200      	movs	r2, #0
   15738:	701a      	strb	r2, [r3, #0]
					uint8_t cur_ship_arr[MAX_SHIP_SIZE];
					
					while(cur_ship_size < ship_arr[i]){
   1573a:	e101      	b.n	15940 <vUiHandlerTask+0x250>
						if( SeesawGetKeypadCount() == 0 ){continue;}
   1573c:	4ba6      	ldr	r3, [pc, #664]	; (159d8 <vUiHandlerTask+0x2e8>)
   1573e:	4798      	blx	r3
   15740:	1e03      	subs	r3, r0, #0
   15742:	d112      	bne.n	1576a <vUiHandlerTask+0x7a>
   15744:	2313      	movs	r3, #19
   15746:	18fb      	adds	r3, r7, r3
   15748:	2213      	movs	r2, #19
   1574a:	18ba      	adds	r2, r7, r2
   1574c:	7812      	ldrb	r2, [r2, #0]
   1574e:	701a      	strb	r2, [r3, #0]
   15750:	2312      	movs	r3, #18
   15752:	18fb      	adds	r3, r7, r3
   15754:	2212      	movs	r2, #18
   15756:	18ba      	adds	r2, r7, r2
   15758:	7812      	ldrb	r2, [r2, #0]
   1575a:	701a      	strb	r2, [r3, #0]
   1575c:	2311      	movs	r3, #17
   1575e:	18fb      	adds	r3, r7, r3
   15760:	2211      	movs	r2, #17
   15762:	18ba      	adds	r2, r7, r2
   15764:	7812      	ldrb	r2, [r2, #0]
   15766:	701a      	strb	r2, [r3, #0]
   15768:	e0ea      	b.n	15940 <vUiHandlerTask+0x250>
							
						if( ERROR_NONE == SeesawReadKeypad(&ship_loc_buffer, 1) ){
   1576a:	4b98      	ldr	r3, [pc, #608]	; (159cc <vUiHandlerTask+0x2dc>)
   1576c:	2101      	movs	r1, #1
   1576e:	0018      	movs	r0, r3
   15770:	4b97      	ldr	r3, [pc, #604]	; (159d0 <vUiHandlerTask+0x2e0>)
   15772:	4798      	blx	r3
   15774:	0001      	movs	r1, r0
   15776:	2313      	movs	r3, #19
   15778:	18fb      	adds	r3, r7, r3
   1577a:	2213      	movs	r2, #19
   1577c:	18ba      	adds	r2, r7, r2
   1577e:	7812      	ldrb	r2, [r2, #0]
   15780:	701a      	strb	r2, [r3, #0]
   15782:	2312      	movs	r3, #18
   15784:	18fb      	adds	r3, r7, r3
   15786:	2212      	movs	r2, #18
   15788:	18ba      	adds	r2, r7, r2
   1578a:	7812      	ldrb	r2, [r2, #0]
   1578c:	701a      	strb	r2, [r3, #0]
   1578e:	2311      	movs	r3, #17
   15790:	18fb      	adds	r3, r7, r3
   15792:	2211      	movs	r2, #17
   15794:	18ba      	adds	r2, r7, r2
   15796:	7812      	ldrb	r2, [r2, #0]
   15798:	701a      	strb	r2, [r3, #0]
   1579a:	2900      	cmp	r1, #0
   1579c:	d000      	beq.n	157a0 <vUiHandlerTask+0xb0>
   1579e:	e0cf      	b.n	15940 <vUiHandlerTask+0x250>
							
							ship_loc_buffer = NEO_TRELLIS_SEESAW_KEY((ship_loc_buffer & 0xFD) >> 2);
   157a0:	4b8a      	ldr	r3, [pc, #552]	; (159cc <vUiHandlerTask+0x2dc>)
   157a2:	781b      	ldrb	r3, [r3, #0]
   157a4:	089b      	lsrs	r3, r3, #2
   157a6:	b2db      	uxtb	r3, r3
   157a8:	2b00      	cmp	r3, #0
   157aa:	da00      	bge.n	157ae <vUiHandlerTask+0xbe>
   157ac:	3307      	adds	r3, #7
   157ae:	10db      	asrs	r3, r3, #3
   157b0:	b2db      	uxtb	r3, r3
   157b2:	009b      	lsls	r3, r3, #2
   157b4:	b2da      	uxtb	r2, r3
   157b6:	4b85      	ldr	r3, [pc, #532]	; (159cc <vUiHandlerTask+0x2dc>)
   157b8:	781b      	ldrb	r3, [r3, #0]
   157ba:	089b      	lsrs	r3, r3, #2
   157bc:	b2db      	uxtb	r3, r3
   157be:	2107      	movs	r1, #7
   157c0:	400b      	ands	r3, r1
   157c2:	b2db      	uxtb	r3, r3
   157c4:	18d3      	adds	r3, r2, r3
   157c6:	b2da      	uxtb	r2, r3
   157c8:	4b80      	ldr	r3, [pc, #512]	; (159cc <vUiHandlerTask+0x2dc>)
   157ca:	701a      	strb	r2, [r3, #0]
							
							if(cur_ship_size == 0){
   157cc:	2311      	movs	r3, #17
   157ce:	18fb      	adds	r3, r7, r3
   157d0:	781b      	ldrb	r3, [r3, #0]
   157d2:	2b00      	cmp	r3, #0
   157d4:	d14a      	bne.n	1586c <vUiHandlerTask+0x17c>
								if(place_tile_stat[ship_loc_buffer] == UI_PLACE_PLACED){continue;}
   157d6:	4b7d      	ldr	r3, [pc, #500]	; (159cc <vUiHandlerTask+0x2dc>)
   157d8:	781b      	ldrb	r3, [r3, #0]
   157da:	001a      	movs	r2, r3
   157dc:	4b7f      	ldr	r3, [pc, #508]	; (159dc <vUiHandlerTask+0x2ec>)
   157de:	5c9b      	ldrb	r3, [r3, r2]
   157e0:	2b01      	cmp	r3, #1
   157e2:	d112      	bne.n	1580a <vUiHandlerTask+0x11a>
   157e4:	2313      	movs	r3, #19
   157e6:	18fb      	adds	r3, r7, r3
   157e8:	2213      	movs	r2, #19
   157ea:	18ba      	adds	r2, r7, r2
   157ec:	7812      	ldrb	r2, [r2, #0]
   157ee:	701a      	strb	r2, [r3, #0]
   157f0:	2312      	movs	r3, #18
   157f2:	18fb      	adds	r3, r7, r3
   157f4:	2212      	movs	r2, #18
   157f6:	18ba      	adds	r2, r7, r2
   157f8:	7812      	ldrb	r2, [r2, #0]
   157fa:	701a      	strb	r2, [r3, #0]
   157fc:	2311      	movs	r3, #17
   157fe:	18fb      	adds	r3, r7, r3
   15800:	2211      	movs	r2, #17
   15802:	18ba      	adds	r2, r7, r2
   15804:	7812      	ldrb	r2, [r2, #0]
   15806:	701a      	strb	r2, [r3, #0]
   15808:	e09a      	b.n	15940 <vUiHandlerTask+0x250>
								cur_ship_arr[cur_ship_size] = ship_loc_buffer;
   1580a:	2311      	movs	r3, #17
   1580c:	18fb      	adds	r3, r7, r3
   1580e:	781b      	ldrb	r3, [r3, #0]
   15810:	4a6e      	ldr	r2, [pc, #440]	; (159cc <vUiHandlerTask+0x2dc>)
   15812:	7811      	ldrb	r1, [r2, #0]
   15814:	2208      	movs	r2, #8
   15816:	18ba      	adds	r2, r7, r2
   15818:	54d1      	strb	r1, [r2, r3]
								place_tile_stat[ship_loc_buffer] = UI_PLACE_PLACED;
   1581a:	4b6c      	ldr	r3, [pc, #432]	; (159cc <vUiHandlerTask+0x2dc>)
   1581c:	781b      	ldrb	r3, [r3, #0]
   1581e:	001a      	movs	r2, r3
   15820:	4b6e      	ldr	r3, [pc, #440]	; (159dc <vUiHandlerTask+0x2ec>)
   15822:	2101      	movs	r1, #1
   15824:	5499      	strb	r1, [r3, r2]
								SeesawSetLed(ship_loc_buffer, 0, 0, 50);
   15826:	4b69      	ldr	r3, [pc, #420]	; (159cc <vUiHandlerTask+0x2dc>)
   15828:	7818      	ldrb	r0, [r3, #0]
   1582a:	2332      	movs	r3, #50	; 0x32
   1582c:	2200      	movs	r2, #0
   1582e:	2100      	movs	r1, #0
   15830:	4c6b      	ldr	r4, [pc, #428]	; (159e0 <vUiHandlerTask+0x2f0>)
   15832:	47a0      	blx	r4
								SeesawOrderLedUpdate();
   15834:	4b6b      	ldr	r3, [pc, #428]	; (159e4 <vUiHandlerTask+0x2f4>)
   15836:	4798      	blx	r3
								
								ship_head = ship_loc_buffer;
   15838:	2313      	movs	r3, #19
   1583a:	18fb      	adds	r3, r7, r3
   1583c:	4a63      	ldr	r2, [pc, #396]	; (159cc <vUiHandlerTask+0x2dc>)
   1583e:	7812      	ldrb	r2, [r2, #0]
   15840:	701a      	strb	r2, [r3, #0]
								ship_tail = ship_loc_buffer;
   15842:	2312      	movs	r3, #18
   15844:	18fb      	adds	r3, r7, r3
   15846:	4a61      	ldr	r2, [pc, #388]	; (159cc <vUiHandlerTask+0x2dc>)
   15848:	7812      	ldrb	r2, [r2, #0]
   1584a:	701a      	strb	r2, [r3, #0]
								if(cur_ship_size != ship_arr[i]-1){
   1584c:	2311      	movs	r3, #17
   1584e:	18fb      	adds	r3, r7, r3
   15850:	781a      	ldrb	r2, [r3, #0]
   15852:	4965      	ldr	r1, [pc, #404]	; (159e8 <vUiHandlerTask+0x2f8>)
   15854:	697b      	ldr	r3, [r7, #20]
   15856:	18cb      	adds	r3, r1, r3
   15858:	781b      	ldrb	r3, [r3, #0]
   1585a:	3b01      	subs	r3, #1
   1585c:	429a      	cmp	r2, r3
   1585e:	d068      	beq.n	15932 <vUiHandlerTask+0x242>
									UiPlaceSuggest2(ship_loc_buffer);
   15860:	4b5a      	ldr	r3, [pc, #360]	; (159cc <vUiHandlerTask+0x2dc>)
   15862:	781b      	ldrb	r3, [r3, #0]
   15864:	0018      	movs	r0, r3
   15866:	4b61      	ldr	r3, [pc, #388]	; (159ec <vUiHandlerTask+0x2fc>)
   15868:	4798      	blx	r3
   1586a:	e062      	b.n	15932 <vUiHandlerTask+0x242>
								}
							}
							else{
								//check validity of 2nd position
								if(place_tile_stat[ship_loc_buffer] != UI_PLACE_VALID){continue;}
   1586c:	4b57      	ldr	r3, [pc, #348]	; (159cc <vUiHandlerTask+0x2dc>)
   1586e:	781b      	ldrb	r3, [r3, #0]
   15870:	001a      	movs	r2, r3
   15872:	4b5a      	ldr	r3, [pc, #360]	; (159dc <vUiHandlerTask+0x2ec>)
   15874:	5c9b      	ldrb	r3, [r3, r2]
   15876:	2b00      	cmp	r3, #0
   15878:	d012      	beq.n	158a0 <vUiHandlerTask+0x1b0>
   1587a:	2313      	movs	r3, #19
   1587c:	18fb      	adds	r3, r7, r3
   1587e:	2213      	movs	r2, #19
   15880:	18ba      	adds	r2, r7, r2
   15882:	7812      	ldrb	r2, [r2, #0]
   15884:	701a      	strb	r2, [r3, #0]
   15886:	2312      	movs	r3, #18
   15888:	18fb      	adds	r3, r7, r3
   1588a:	2212      	movs	r2, #18
   1588c:	18ba      	adds	r2, r7, r2
   1588e:	7812      	ldrb	r2, [r2, #0]
   15890:	701a      	strb	r2, [r3, #0]
   15892:	2311      	movs	r3, #17
   15894:	18fb      	adds	r3, r7, r3
   15896:	2211      	movs	r2, #17
   15898:	18ba      	adds	r2, r7, r2
   1589a:	7812      	ldrb	r2, [r2, #0]
   1589c:	701a      	strb	r2, [r3, #0]
   1589e:	e04f      	b.n	15940 <vUiHandlerTask+0x250>
									
								cur_ship_arr[cur_ship_size] = ship_loc_buffer;
   158a0:	2311      	movs	r3, #17
   158a2:	18fb      	adds	r3, r7, r3
   158a4:	781b      	ldrb	r3, [r3, #0]
   158a6:	4a49      	ldr	r2, [pc, #292]	; (159cc <vUiHandlerTask+0x2dc>)
   158a8:	7811      	ldrb	r1, [r2, #0]
   158aa:	2208      	movs	r2, #8
   158ac:	18ba      	adds	r2, r7, r2
   158ae:	54d1      	strb	r1, [r2, r3]
								place_tile_stat[ship_loc_buffer] = UI_PLACE_PLACED;
   158b0:	4b46      	ldr	r3, [pc, #280]	; (159cc <vUiHandlerTask+0x2dc>)
   158b2:	781b      	ldrb	r3, [r3, #0]
   158b4:	001a      	movs	r2, r3
   158b6:	4b49      	ldr	r3, [pc, #292]	; (159dc <vUiHandlerTask+0x2ec>)
   158b8:	2101      	movs	r1, #1
   158ba:	5499      	strb	r1, [r3, r2]
								SeesawSetLed(ship_loc_buffer, R_PLACE_PLACED, G_PLACE_PLACED, B_PLACE_PLACED);
   158bc:	4b43      	ldr	r3, [pc, #268]	; (159cc <vUiHandlerTask+0x2dc>)
   158be:	7818      	ldrb	r0, [r3, #0]
   158c0:	2332      	movs	r3, #50	; 0x32
   158c2:	2200      	movs	r2, #0
   158c4:	2100      	movs	r1, #0
   158c6:	4c46      	ldr	r4, [pc, #280]	; (159e0 <vUiHandlerTask+0x2f0>)
   158c8:	47a0      	blx	r4
								SeesawOrderLedUpdate();
   158ca:	4b46      	ldr	r3, [pc, #280]	; (159e4 <vUiHandlerTask+0x2f4>)
   158cc:	4798      	blx	r3
								
								UiRemoveSuggest(ship_head);
   158ce:	2313      	movs	r3, #19
   158d0:	18fb      	adds	r3, r7, r3
   158d2:	781b      	ldrb	r3, [r3, #0]
   158d4:	0018      	movs	r0, r3
   158d6:	4b46      	ldr	r3, [pc, #280]	; (159f0 <vUiHandlerTask+0x300>)
   158d8:	4798      	blx	r3
								UiRemoveSuggest(ship_tail);
   158da:	2312      	movs	r3, #18
   158dc:	18fb      	adds	r3, r7, r3
   158de:	781b      	ldrb	r3, [r3, #0]
   158e0:	0018      	movs	r0, r3
   158e2:	4b43      	ldr	r3, [pc, #268]	; (159f0 <vUiHandlerTask+0x300>)
   158e4:	4798      	blx	r3
								
								if(ship_loc_buffer < ship_head){ship_head = ship_loc_buffer;}
   158e6:	4b39      	ldr	r3, [pc, #228]	; (159cc <vUiHandlerTask+0x2dc>)
   158e8:	781b      	ldrb	r3, [r3, #0]
   158ea:	2213      	movs	r2, #19
   158ec:	18ba      	adds	r2, r7, r2
   158ee:	7812      	ldrb	r2, [r2, #0]
   158f0:	429a      	cmp	r2, r3
   158f2:	d905      	bls.n	15900 <vUiHandlerTask+0x210>
   158f4:	2313      	movs	r3, #19
   158f6:	18fb      	adds	r3, r7, r3
   158f8:	4a34      	ldr	r2, [pc, #208]	; (159cc <vUiHandlerTask+0x2dc>)
   158fa:	7812      	ldrb	r2, [r2, #0]
   158fc:	701a      	strb	r2, [r3, #0]
   158fe:	e004      	b.n	1590a <vUiHandlerTask+0x21a>
								else{ship_tail = ship_loc_buffer;}
   15900:	2312      	movs	r3, #18
   15902:	18fb      	adds	r3, r7, r3
   15904:	4a31      	ldr	r2, [pc, #196]	; (159cc <vUiHandlerTask+0x2dc>)
   15906:	7812      	ldrb	r2, [r2, #0]
   15908:	701a      	strb	r2, [r3, #0]
								
								if(cur_ship_size != ship_arr[i]-1){
   1590a:	2311      	movs	r3, #17
   1590c:	18fb      	adds	r3, r7, r3
   1590e:	781a      	ldrb	r2, [r3, #0]
   15910:	4935      	ldr	r1, [pc, #212]	; (159e8 <vUiHandlerTask+0x2f8>)
   15912:	697b      	ldr	r3, [r7, #20]
   15914:	18cb      	adds	r3, r1, r3
   15916:	781b      	ldrb	r3, [r3, #0]
   15918:	3b01      	subs	r3, #1
   1591a:	429a      	cmp	r2, r3
   1591c:	d009      	beq.n	15932 <vUiHandlerTask+0x242>
									UiPlaceSuggest3(ship_head,ship_tail);
   1591e:	2312      	movs	r3, #18
   15920:	18fb      	adds	r3, r7, r3
   15922:	781a      	ldrb	r2, [r3, #0]
   15924:	2313      	movs	r3, #19
   15926:	18fb      	adds	r3, r7, r3
   15928:	781b      	ldrb	r3, [r3, #0]
   1592a:	0011      	movs	r1, r2
   1592c:	0018      	movs	r0, r3
   1592e:	4b31      	ldr	r3, [pc, #196]	; (159f4 <vUiHandlerTask+0x304>)
   15930:	4798      	blx	r3
								}
							}
							cur_ship_size++;
   15932:	2311      	movs	r3, #17
   15934:	18fb      	adds	r3, r7, r3
   15936:	781a      	ldrb	r2, [r3, #0]
   15938:	2311      	movs	r3, #17
   1593a:	18fb      	adds	r3, r7, r3
   1593c:	3201      	adds	r2, #1
   1593e:	701a      	strb	r2, [r3, #0]
					while(cur_ship_size < ship_arr[i]){
   15940:	4a29      	ldr	r2, [pc, #164]	; (159e8 <vUiHandlerTask+0x2f8>)
   15942:	697b      	ldr	r3, [r7, #20]
   15944:	18d3      	adds	r3, r2, r3
   15946:	781b      	ldrb	r3, [r3, #0]
   15948:	2211      	movs	r2, #17
   1594a:	18ba      	adds	r2, r7, r2
   1594c:	7812      	ldrb	r2, [r2, #0]
   1594e:	429a      	cmp	r2, r3
   15950:	d200      	bcs.n	15954 <vUiHandlerTask+0x264>
   15952:	e6f3      	b.n	1573c <vUiHandlerTask+0x4c>
						}
							
					}
					
					for(int j = 0; j < ship_arr[i];j++){
   15954:	2300      	movs	r3, #0
   15956:	60fb      	str	r3, [r7, #12]
   15958:	e012      	b.n	15980 <vUiHandlerTask+0x290>
						ship_loc_out[ship_loc_out_num] = cur_ship_arr[j];
   1595a:	4b1e      	ldr	r3, [pc, #120]	; (159d4 <vUiHandlerTask+0x2e4>)
   1595c:	781b      	ldrb	r3, [r3, #0]
   1595e:	0019      	movs	r1, r3
   15960:	2308      	movs	r3, #8
   15962:	18fa      	adds	r2, r7, r3
   15964:	68fb      	ldr	r3, [r7, #12]
   15966:	18d3      	adds	r3, r2, r3
   15968:	781a      	ldrb	r2, [r3, #0]
   1596a:	4b23      	ldr	r3, [pc, #140]	; (159f8 <vUiHandlerTask+0x308>)
   1596c:	545a      	strb	r2, [r3, r1]
						ship_loc_out_num++;
   1596e:	4b19      	ldr	r3, [pc, #100]	; (159d4 <vUiHandlerTask+0x2e4>)
   15970:	781b      	ldrb	r3, [r3, #0]
   15972:	3301      	adds	r3, #1
   15974:	b2da      	uxtb	r2, r3
   15976:	4b17      	ldr	r3, [pc, #92]	; (159d4 <vUiHandlerTask+0x2e4>)
   15978:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < ship_arr[i];j++){
   1597a:	68fb      	ldr	r3, [r7, #12]
   1597c:	3301      	adds	r3, #1
   1597e:	60fb      	str	r3, [r7, #12]
   15980:	4a19      	ldr	r2, [pc, #100]	; (159e8 <vUiHandlerTask+0x2f8>)
   15982:	697b      	ldr	r3, [r7, #20]
   15984:	18d3      	adds	r3, r2, r3
   15986:	781b      	ldrb	r3, [r3, #0]
   15988:	001a      	movs	r2, r3
   1598a:	68fb      	ldr	r3, [r7, #12]
   1598c:	429a      	cmp	r2, r3
   1598e:	dce4      	bgt.n	1595a <vUiHandlerTask+0x26a>
				for(int i = 0; i < ship_num; i++){
   15990:	697b      	ldr	r3, [r7, #20]
   15992:	3301      	adds	r3, #1
   15994:	617b      	str	r3, [r7, #20]
   15996:	4b19      	ldr	r3, [pc, #100]	; (159fc <vUiHandlerTask+0x30c>)
   15998:	781b      	ldrb	r3, [r3, #0]
   1599a:	001a      	movs	r2, r3
   1599c:	697b      	ldr	r3, [r7, #20]
   1599e:	429a      	cmp	r2, r3
   159a0:	dd00      	ble.n	159a4 <vUiHandlerTask+0x2b4>
   159a2:	e6c6      	b.n	15732 <vUiHandlerTask+0x42>
					}
					
					
				}
				uiState = UI_STATE_IGNORE_PRESSES;
   159a4:	4b08      	ldr	r3, [pc, #32]	; (159c8 <vUiHandlerTask+0x2d8>)
   159a6:	2200      	movs	r2, #0
   159a8:	701a      	strb	r2, [r3, #0]
                break;
   159aa:	e004      	b.n	159b6 <vUiHandlerTask+0x2c6>
                break;
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_IGNORE_PRESSES;
   159ac:	4b06      	ldr	r3, [pc, #24]	; (159c8 <vUiHandlerTask+0x2d8>)
   159ae:	2200      	movs	r2, #0
   159b0:	701a      	strb	r2, [r3, #0]
                break;
   159b2:	e000      	b.n	159b6 <vUiHandlerTask+0x2c6>
                break;
   159b4:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   159b6:	2032      	movs	r0, #50	; 0x32
   159b8:	4b11      	ldr	r3, [pc, #68]	; (15a00 <vUiHandlerTask+0x310>)
   159ba:	4798      	blx	r3
        switch (uiState) {
   159bc:	e6a3      	b.n	15706 <vUiHandlerTask+0x16>
   159be:	46c0      	nop			; (mov r8, r8)
   159c0:	00035cd4 	.word	0x00035cd4
   159c4:	0001db55 	.word	0x0001db55
   159c8:	20004429 	.word	0x20004429
   159cc:	20004414 	.word	0x20004414
   159d0:	000151ed 	.word	0x000151ed
   159d4:	2000044c 	.word	0x2000044c
   159d8:	00015185 	.word	0x00015185
   159dc:	2000004c 	.word	0x2000004c
   159e0:	00015339 	.word	0x00015339
   159e4:	00015401 	.word	0x00015401
   159e8:	20004378 	.word	0x20004378
   159ec:	00015a95 	.word	0x00015a95
   159f0:	00015d4d 	.word	0x00015d4d
   159f4:	00015bbd 	.word	0x00015bbd
   159f8:	20004418 	.word	0x20004418
   159fc:	20004375 	.word	0x20004375
   15a00:	0001bf01 	.word	0x0001bf01

00015a04 <UiPlaceInit>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiPlaceInit(uint8_t *shiparr_in,uint8_t ship_num_in)
{
   15a04:	b590      	push	{r4, r7, lr}
   15a06:	b085      	sub	sp, #20
   15a08:	af00      	add	r7, sp, #0
   15a0a:	6078      	str	r0, [r7, #4]
   15a0c:	000a      	movs	r2, r1
   15a0e:	1cfb      	adds	r3, r7, #3
   15a10:	701a      	strb	r2, [r3, #0]
	LogMessage(LOG_DEBUG_LVL, "Placement started! \r\n");
   15a12:	4b17      	ldr	r3, [pc, #92]	; (15a70 <UiPlaceInit+0x6c>)
   15a14:	0019      	movs	r1, r3
   15a16:	2001      	movs	r0, #1
   15a18:	4b16      	ldr	r3, [pc, #88]	; (15a74 <UiPlaceInit+0x70>)
   15a1a:	4798      	blx	r3
	memcpy (ship_arr, shiparr_in, ship_num * sizeof (uint8_t));
   15a1c:	4b16      	ldr	r3, [pc, #88]	; (15a78 <UiPlaceInit+0x74>)
   15a1e:	781b      	ldrb	r3, [r3, #0]
   15a20:	001a      	movs	r2, r3
   15a22:	6879      	ldr	r1, [r7, #4]
   15a24:	4b15      	ldr	r3, [pc, #84]	; (15a7c <UiPlaceInit+0x78>)
   15a26:	0018      	movs	r0, r3
   15a28:	4b15      	ldr	r3, [pc, #84]	; (15a80 <UiPlaceInit+0x7c>)
   15a2a:	4798      	blx	r3
	ship_num = ship_num_in;
   15a2c:	4b12      	ldr	r3, [pc, #72]	; (15a78 <UiPlaceInit+0x74>)
   15a2e:	1cfa      	adds	r2, r7, #3
   15a30:	7812      	ldrb	r2, [r2, #0]
   15a32:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < MAX_TILE; i++){
   15a34:	2300      	movs	r3, #0
   15a36:	60fb      	str	r3, [r7, #12]
   15a38:	e00e      	b.n	15a58 <UiPlaceInit+0x54>
		SeesawSetLed(i,R_PLACE_INVALID,G_PLACE_INVALID,B_PLACE_INVALID);
   15a3a:	68fb      	ldr	r3, [r7, #12]
   15a3c:	b2d8      	uxtb	r0, r3
   15a3e:	2300      	movs	r3, #0
   15a40:	2200      	movs	r2, #0
   15a42:	2100      	movs	r1, #0
   15a44:	4c0f      	ldr	r4, [pc, #60]	; (15a84 <UiPlaceInit+0x80>)
   15a46:	47a0      	blx	r4
		place_tile_stat[i] = UI_PLACE_INVALID;
   15a48:	4a0f      	ldr	r2, [pc, #60]	; (15a88 <UiPlaceInit+0x84>)
   15a4a:	68fb      	ldr	r3, [r7, #12]
   15a4c:	18d3      	adds	r3, r2, r3
   15a4e:	2202      	movs	r2, #2
   15a50:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < MAX_TILE; i++){
   15a52:	68fb      	ldr	r3, [r7, #12]
   15a54:	3301      	adds	r3, #1
   15a56:	60fb      	str	r3, [r7, #12]
   15a58:	68fb      	ldr	r3, [r7, #12]
   15a5a:	2b0f      	cmp	r3, #15
   15a5c:	dded      	ble.n	15a3a <UiPlaceInit+0x36>
	}
	SeesawOrderLedUpdate();
   15a5e:	4b0b      	ldr	r3, [pc, #44]	; (15a8c <UiPlaceInit+0x88>)
   15a60:	4798      	blx	r3
	uiState = UI_STATE_PLACE_SHIP;
   15a62:	4b0b      	ldr	r3, [pc, #44]	; (15a90 <UiPlaceInit+0x8c>)
   15a64:	2201      	movs	r2, #1
   15a66:	701a      	strb	r2, [r3, #0]
}
   15a68:	46c0      	nop			; (mov r8, r8)
   15a6a:	46bd      	mov	sp, r7
   15a6c:	b005      	add	sp, #20
   15a6e:	bd90      	pop	{r4, r7, pc}
   15a70:	00035ce8 	.word	0x00035ce8
   15a74:	0001dc41 	.word	0x0001dc41
   15a78:	20004375 	.word	0x20004375
   15a7c:	20004378 	.word	0x20004378
   15a80:	00034355 	.word	0x00034355
   15a84:	00015339 	.word	0x00015339
   15a88:	2000004c 	.word	0x2000004c
   15a8c:	00015401 	.word	0x00015401
   15a90:	20004429 	.word	0x20004429

00015a94 <UiPlaceSuggest2>:

static void UiPlaceSuggest2(uint8_t loc)
{
   15a94:	b590      	push	{r4, r7, lr}
   15a96:	b085      	sub	sp, #20
   15a98:	af00      	add	r7, sp, #0
   15a9a:	0002      	movs	r2, r0
   15a9c:	1dfb      	adds	r3, r7, #7
   15a9e:	701a      	strb	r2, [r3, #0]
	uint8_t rec_loc;
	if(loc > 3){
   15aa0:	1dfb      	adds	r3, r7, #7
   15aa2:	781b      	ldrb	r3, [r3, #0]
   15aa4:	2b03      	cmp	r3, #3
   15aa6:	d91a      	bls.n	15ade <UiPlaceSuggest2+0x4a>
		rec_loc = loc - 4;
   15aa8:	230f      	movs	r3, #15
   15aaa:	18fb      	adds	r3, r7, r3
   15aac:	1dfa      	adds	r2, r7, #7
   15aae:	7812      	ldrb	r2, [r2, #0]
   15ab0:	3a04      	subs	r2, #4
   15ab2:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15ab4:	230f      	movs	r3, #15
   15ab6:	18fb      	adds	r3, r7, r3
   15ab8:	781b      	ldrb	r3, [r3, #0]
   15aba:	4a3d      	ldr	r2, [pc, #244]	; (15bb0 <UiPlaceSuggest2+0x11c>)
   15abc:	5cd3      	ldrb	r3, [r2, r3]
   15abe:	2b01      	cmp	r3, #1
   15ac0:	d00d      	beq.n	15ade <UiPlaceSuggest2+0x4a>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15ac2:	230f      	movs	r3, #15
   15ac4:	18fb      	adds	r3, r7, r3
   15ac6:	781b      	ldrb	r3, [r3, #0]
   15ac8:	4a39      	ldr	r2, [pc, #228]	; (15bb0 <UiPlaceSuggest2+0x11c>)
   15aca:	2100      	movs	r1, #0
   15acc:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15ace:	230f      	movs	r3, #15
   15ad0:	18fb      	adds	r3, r7, r3
   15ad2:	7818      	ldrb	r0, [r3, #0]
   15ad4:	2302      	movs	r3, #2
   15ad6:	2232      	movs	r2, #50	; 0x32
   15ad8:	2132      	movs	r1, #50	; 0x32
   15ada:	4c36      	ldr	r4, [pc, #216]	; (15bb4 <UiPlaceSuggest2+0x120>)
   15adc:	47a0      	blx	r4
		}
	}
	
	if(loc < 12){
   15ade:	1dfb      	adds	r3, r7, #7
   15ae0:	781b      	ldrb	r3, [r3, #0]
   15ae2:	2b0b      	cmp	r3, #11
   15ae4:	d81a      	bhi.n	15b1c <UiPlaceSuggest2+0x88>
		rec_loc = loc + 4;
   15ae6:	230f      	movs	r3, #15
   15ae8:	18fb      	adds	r3, r7, r3
   15aea:	1dfa      	adds	r2, r7, #7
   15aec:	7812      	ldrb	r2, [r2, #0]
   15aee:	3204      	adds	r2, #4
   15af0:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15af2:	230f      	movs	r3, #15
   15af4:	18fb      	adds	r3, r7, r3
   15af6:	781b      	ldrb	r3, [r3, #0]
   15af8:	4a2d      	ldr	r2, [pc, #180]	; (15bb0 <UiPlaceSuggest2+0x11c>)
   15afa:	5cd3      	ldrb	r3, [r2, r3]
   15afc:	2b01      	cmp	r3, #1
   15afe:	d00d      	beq.n	15b1c <UiPlaceSuggest2+0x88>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15b00:	230f      	movs	r3, #15
   15b02:	18fb      	adds	r3, r7, r3
   15b04:	781b      	ldrb	r3, [r3, #0]
   15b06:	4a2a      	ldr	r2, [pc, #168]	; (15bb0 <UiPlaceSuggest2+0x11c>)
   15b08:	2100      	movs	r1, #0
   15b0a:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15b0c:	230f      	movs	r3, #15
   15b0e:	18fb      	adds	r3, r7, r3
   15b10:	7818      	ldrb	r0, [r3, #0]
   15b12:	2302      	movs	r3, #2
   15b14:	2232      	movs	r2, #50	; 0x32
   15b16:	2132      	movs	r1, #50	; 0x32
   15b18:	4c26      	ldr	r4, [pc, #152]	; (15bb4 <UiPlaceSuggest2+0x120>)
   15b1a:	47a0      	blx	r4
		}
	}
	
	if(loc % 4 != 3){
   15b1c:	1dfb      	adds	r3, r7, #7
   15b1e:	781b      	ldrb	r3, [r3, #0]
   15b20:	2203      	movs	r2, #3
   15b22:	4013      	ands	r3, r2
   15b24:	b2db      	uxtb	r3, r3
   15b26:	2b03      	cmp	r3, #3
   15b28:	d01a      	beq.n	15b60 <UiPlaceSuggest2+0xcc>
		rec_loc = loc + 1;
   15b2a:	230f      	movs	r3, #15
   15b2c:	18fb      	adds	r3, r7, r3
   15b2e:	1dfa      	adds	r2, r7, #7
   15b30:	7812      	ldrb	r2, [r2, #0]
   15b32:	3201      	adds	r2, #1
   15b34:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15b36:	230f      	movs	r3, #15
   15b38:	18fb      	adds	r3, r7, r3
   15b3a:	781b      	ldrb	r3, [r3, #0]
   15b3c:	4a1c      	ldr	r2, [pc, #112]	; (15bb0 <UiPlaceSuggest2+0x11c>)
   15b3e:	5cd3      	ldrb	r3, [r2, r3]
   15b40:	2b01      	cmp	r3, #1
   15b42:	d00d      	beq.n	15b60 <UiPlaceSuggest2+0xcc>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15b44:	230f      	movs	r3, #15
   15b46:	18fb      	adds	r3, r7, r3
   15b48:	781b      	ldrb	r3, [r3, #0]
   15b4a:	4a19      	ldr	r2, [pc, #100]	; (15bb0 <UiPlaceSuggest2+0x11c>)
   15b4c:	2100      	movs	r1, #0
   15b4e:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15b50:	230f      	movs	r3, #15
   15b52:	18fb      	adds	r3, r7, r3
   15b54:	7818      	ldrb	r0, [r3, #0]
   15b56:	2302      	movs	r3, #2
   15b58:	2232      	movs	r2, #50	; 0x32
   15b5a:	2132      	movs	r1, #50	; 0x32
   15b5c:	4c15      	ldr	r4, [pc, #84]	; (15bb4 <UiPlaceSuggest2+0x120>)
   15b5e:	47a0      	blx	r4
		}
	}
	
	if(loc % 4 != 0){
   15b60:	1dfb      	adds	r3, r7, #7
   15b62:	781b      	ldrb	r3, [r3, #0]
   15b64:	2203      	movs	r2, #3
   15b66:	4013      	ands	r3, r2
   15b68:	b2db      	uxtb	r3, r3
   15b6a:	2b00      	cmp	r3, #0
   15b6c:	d01a      	beq.n	15ba4 <UiPlaceSuggest2+0x110>
		rec_loc = loc - 1;
   15b6e:	230f      	movs	r3, #15
   15b70:	18fb      	adds	r3, r7, r3
   15b72:	1dfa      	adds	r2, r7, #7
   15b74:	7812      	ldrb	r2, [r2, #0]
   15b76:	3a01      	subs	r2, #1
   15b78:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15b7a:	230f      	movs	r3, #15
   15b7c:	18fb      	adds	r3, r7, r3
   15b7e:	781b      	ldrb	r3, [r3, #0]
   15b80:	4a0b      	ldr	r2, [pc, #44]	; (15bb0 <UiPlaceSuggest2+0x11c>)
   15b82:	5cd3      	ldrb	r3, [r2, r3]
   15b84:	2b01      	cmp	r3, #1
   15b86:	d00d      	beq.n	15ba4 <UiPlaceSuggest2+0x110>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15b88:	230f      	movs	r3, #15
   15b8a:	18fb      	adds	r3, r7, r3
   15b8c:	781b      	ldrb	r3, [r3, #0]
   15b8e:	4a08      	ldr	r2, [pc, #32]	; (15bb0 <UiPlaceSuggest2+0x11c>)
   15b90:	2100      	movs	r1, #0
   15b92:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15b94:	230f      	movs	r3, #15
   15b96:	18fb      	adds	r3, r7, r3
   15b98:	7818      	ldrb	r0, [r3, #0]
   15b9a:	2302      	movs	r3, #2
   15b9c:	2232      	movs	r2, #50	; 0x32
   15b9e:	2132      	movs	r1, #50	; 0x32
   15ba0:	4c04      	ldr	r4, [pc, #16]	; (15bb4 <UiPlaceSuggest2+0x120>)
   15ba2:	47a0      	blx	r4
			
		}
	}
	SeesawOrderLedUpdate();
   15ba4:	4b04      	ldr	r3, [pc, #16]	; (15bb8 <UiPlaceSuggest2+0x124>)
   15ba6:	4798      	blx	r3
	
}
   15ba8:	46c0      	nop			; (mov r8, r8)
   15baa:	46bd      	mov	sp, r7
   15bac:	b005      	add	sp, #20
   15bae:	bd90      	pop	{r4, r7, pc}
   15bb0:	2000004c 	.word	0x2000004c
   15bb4:	00015339 	.word	0x00015339
   15bb8:	00015401 	.word	0x00015401

00015bbc <UiPlaceSuggest3>:

static void UiPlaceSuggest3(uint8_t loc_1, uint8_t loc_2)
{
   15bbc:	b590      	push	{r4, r7, lr}
   15bbe:	b085      	sub	sp, #20
   15bc0:	af00      	add	r7, sp, #0
   15bc2:	0002      	movs	r2, r0
   15bc4:	1dfb      	adds	r3, r7, #7
   15bc6:	701a      	strb	r2, [r3, #0]
   15bc8:	1dbb      	adds	r3, r7, #6
   15bca:	1c0a      	adds	r2, r1, #0
   15bcc:	701a      	strb	r2, [r3, #0]
	uint8_t loc_h, loc_t;
	
	if(loc_1 < loc_2){loc_h = loc_1; loc_t = loc_2;}
   15bce:	1dfa      	adds	r2, r7, #7
   15bd0:	1dbb      	adds	r3, r7, #6
   15bd2:	7812      	ldrb	r2, [r2, #0]
   15bd4:	781b      	ldrb	r3, [r3, #0]
   15bd6:	429a      	cmp	r2, r3
   15bd8:	d20a      	bcs.n	15bf0 <UiPlaceSuggest3+0x34>
   15bda:	230f      	movs	r3, #15
   15bdc:	18fb      	adds	r3, r7, r3
   15bde:	1dfa      	adds	r2, r7, #7
   15be0:	7812      	ldrb	r2, [r2, #0]
   15be2:	701a      	strb	r2, [r3, #0]
   15be4:	230e      	movs	r3, #14
   15be6:	18fb      	adds	r3, r7, r3
   15be8:	1dba      	adds	r2, r7, #6
   15bea:	7812      	ldrb	r2, [r2, #0]
   15bec:	701a      	strb	r2, [r3, #0]
   15bee:	e009      	b.n	15c04 <UiPlaceSuggest3+0x48>
	else{loc_h = loc_2; loc_t = loc_1;}
   15bf0:	230f      	movs	r3, #15
   15bf2:	18fb      	adds	r3, r7, r3
   15bf4:	1dba      	adds	r2, r7, #6
   15bf6:	7812      	ldrb	r2, [r2, #0]
   15bf8:	701a      	strb	r2, [r3, #0]
   15bfa:	230e      	movs	r3, #14
   15bfc:	18fb      	adds	r3, r7, r3
   15bfe:	1dfa      	adds	r2, r7, #7
   15c00:	7812      	ldrb	r2, [r2, #0]
   15c02:	701a      	strb	r2, [r3, #0]
	
	if(loc_h % 4 == loc_t % 4){
   15c04:	230f      	movs	r3, #15
   15c06:	18fa      	adds	r2, r7, r3
   15c08:	230e      	movs	r3, #14
   15c0a:	18fb      	adds	r3, r7, r3
   15c0c:	7812      	ldrb	r2, [r2, #0]
   15c0e:	781b      	ldrb	r3, [r3, #0]
   15c10:	4053      	eors	r3, r2
   15c12:	b2db      	uxtb	r3, r3
   15c14:	2203      	movs	r2, #3
   15c16:	4013      	ands	r3, r2
   15c18:	b2db      	uxtb	r3, r3
   15c1a:	2b00      	cmp	r3, #0
   15c1c:	d13c      	bne.n	15c98 <UiPlaceSuggest3+0xdc>
		if(loc_h > 4){
   15c1e:	230f      	movs	r3, #15
   15c20:	18fb      	adds	r3, r7, r3
   15c22:	781b      	ldrb	r3, [r3, #0]
   15c24:	2b04      	cmp	r3, #4
   15c26:	d918      	bls.n	15c5a <UiPlaceSuggest3+0x9e>
			if(place_tile_stat[loc_h - 4] == UI_PLACE_INVALID){
   15c28:	230f      	movs	r3, #15
   15c2a:	18fb      	adds	r3, r7, r3
   15c2c:	781b      	ldrb	r3, [r3, #0]
   15c2e:	3b04      	subs	r3, #4
   15c30:	4a43      	ldr	r2, [pc, #268]	; (15d40 <UiPlaceSuggest3+0x184>)
   15c32:	5cd3      	ldrb	r3, [r2, r3]
   15c34:	2b02      	cmp	r3, #2
   15c36:	d110      	bne.n	15c5a <UiPlaceSuggest3+0x9e>
				place_tile_stat[loc_h - 4] = UI_PLACE_VALID;
   15c38:	230f      	movs	r3, #15
   15c3a:	18fb      	adds	r3, r7, r3
   15c3c:	781b      	ldrb	r3, [r3, #0]
   15c3e:	3b04      	subs	r3, #4
   15c40:	4a3f      	ldr	r2, [pc, #252]	; (15d40 <UiPlaceSuggest3+0x184>)
   15c42:	2100      	movs	r1, #0
   15c44:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(loc_h - 4, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15c46:	230f      	movs	r3, #15
   15c48:	18fb      	adds	r3, r7, r3
   15c4a:	781b      	ldrb	r3, [r3, #0]
   15c4c:	3b04      	subs	r3, #4
   15c4e:	b2d8      	uxtb	r0, r3
   15c50:	2302      	movs	r3, #2
   15c52:	2232      	movs	r2, #50	; 0x32
   15c54:	2132      	movs	r1, #50	; 0x32
   15c56:	4c3b      	ldr	r4, [pc, #236]	; (15d44 <UiPlaceSuggest3+0x188>)
   15c58:	47a0      	blx	r4
			}
		}
		if(loc_t < 12){
   15c5a:	230e      	movs	r3, #14
   15c5c:	18fb      	adds	r3, r7, r3
   15c5e:	781b      	ldrb	r3, [r3, #0]
   15c60:	2b0b      	cmp	r3, #11
   15c62:	d867      	bhi.n	15d34 <UiPlaceSuggest3+0x178>
			if(place_tile_stat[loc_t + 4] == UI_PLACE_INVALID){
   15c64:	230e      	movs	r3, #14
   15c66:	18fb      	adds	r3, r7, r3
   15c68:	781b      	ldrb	r3, [r3, #0]
   15c6a:	3304      	adds	r3, #4
   15c6c:	4a34      	ldr	r2, [pc, #208]	; (15d40 <UiPlaceSuggest3+0x184>)
   15c6e:	5cd3      	ldrb	r3, [r2, r3]
   15c70:	2b02      	cmp	r3, #2
   15c72:	d15f      	bne.n	15d34 <UiPlaceSuggest3+0x178>
				place_tile_stat[loc_t + 4] = UI_PLACE_VALID;
   15c74:	230e      	movs	r3, #14
   15c76:	18fb      	adds	r3, r7, r3
   15c78:	781b      	ldrb	r3, [r3, #0]
   15c7a:	3304      	adds	r3, #4
   15c7c:	4a30      	ldr	r2, [pc, #192]	; (15d40 <UiPlaceSuggest3+0x184>)
   15c7e:	2100      	movs	r1, #0
   15c80:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(loc_t + 4, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15c82:	230e      	movs	r3, #14
   15c84:	18fb      	adds	r3, r7, r3
   15c86:	781b      	ldrb	r3, [r3, #0]
   15c88:	3304      	adds	r3, #4
   15c8a:	b2d8      	uxtb	r0, r3
   15c8c:	2302      	movs	r3, #2
   15c8e:	2232      	movs	r2, #50	; 0x32
   15c90:	2132      	movs	r1, #50	; 0x32
   15c92:	4c2c      	ldr	r4, [pc, #176]	; (15d44 <UiPlaceSuggest3+0x188>)
   15c94:	47a0      	blx	r4
   15c96:	e04d      	b.n	15d34 <UiPlaceSuggest3+0x178>
			}
		}
	}
	else if((int)loc_h/4 == (int)loc_t/4){
   15c98:	230f      	movs	r3, #15
   15c9a:	18fb      	adds	r3, r7, r3
   15c9c:	781b      	ldrb	r3, [r3, #0]
   15c9e:	089b      	lsrs	r3, r3, #2
   15ca0:	b2da      	uxtb	r2, r3
   15ca2:	230e      	movs	r3, #14
   15ca4:	18fb      	adds	r3, r7, r3
   15ca6:	781b      	ldrb	r3, [r3, #0]
   15ca8:	089b      	lsrs	r3, r3, #2
   15caa:	b2db      	uxtb	r3, r3
   15cac:	429a      	cmp	r2, r3
   15cae:	d141      	bne.n	15d34 <UiPlaceSuggest3+0x178>
		// if horizontal 
		if(loc_h % 4 != 0){
   15cb0:	230f      	movs	r3, #15
   15cb2:	18fb      	adds	r3, r7, r3
   15cb4:	781b      	ldrb	r3, [r3, #0]
   15cb6:	2203      	movs	r2, #3
   15cb8:	4013      	ands	r3, r2
   15cba:	b2db      	uxtb	r3, r3
   15cbc:	2b00      	cmp	r3, #0
   15cbe:	d018      	beq.n	15cf2 <UiPlaceSuggest3+0x136>
			if(place_tile_stat[loc_h - 1] == UI_PLACE_INVALID){
   15cc0:	230f      	movs	r3, #15
   15cc2:	18fb      	adds	r3, r7, r3
   15cc4:	781b      	ldrb	r3, [r3, #0]
   15cc6:	3b01      	subs	r3, #1
   15cc8:	4a1d      	ldr	r2, [pc, #116]	; (15d40 <UiPlaceSuggest3+0x184>)
   15cca:	5cd3      	ldrb	r3, [r2, r3]
   15ccc:	2b02      	cmp	r3, #2
   15cce:	d110      	bne.n	15cf2 <UiPlaceSuggest3+0x136>
				place_tile_stat[loc_h - 1] = UI_PLACE_VALID;
   15cd0:	230f      	movs	r3, #15
   15cd2:	18fb      	adds	r3, r7, r3
   15cd4:	781b      	ldrb	r3, [r3, #0]
   15cd6:	3b01      	subs	r3, #1
   15cd8:	4a19      	ldr	r2, [pc, #100]	; (15d40 <UiPlaceSuggest3+0x184>)
   15cda:	2100      	movs	r1, #0
   15cdc:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(loc_h - 1, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15cde:	230f      	movs	r3, #15
   15ce0:	18fb      	adds	r3, r7, r3
   15ce2:	781b      	ldrb	r3, [r3, #0]
   15ce4:	3b01      	subs	r3, #1
   15ce6:	b2d8      	uxtb	r0, r3
   15ce8:	2302      	movs	r3, #2
   15cea:	2232      	movs	r2, #50	; 0x32
   15cec:	2132      	movs	r1, #50	; 0x32
   15cee:	4c15      	ldr	r4, [pc, #84]	; (15d44 <UiPlaceSuggest3+0x188>)
   15cf0:	47a0      	blx	r4
			}
		}
		if(loc_t %4 != 3){
   15cf2:	230e      	movs	r3, #14
   15cf4:	18fb      	adds	r3, r7, r3
   15cf6:	781b      	ldrb	r3, [r3, #0]
   15cf8:	2203      	movs	r2, #3
   15cfa:	4013      	ands	r3, r2
   15cfc:	b2db      	uxtb	r3, r3
   15cfe:	2b03      	cmp	r3, #3
   15d00:	d018      	beq.n	15d34 <UiPlaceSuggest3+0x178>
			if(place_tile_stat[loc_t + 1] == UI_PLACE_INVALID){
   15d02:	230e      	movs	r3, #14
   15d04:	18fb      	adds	r3, r7, r3
   15d06:	781b      	ldrb	r3, [r3, #0]
   15d08:	3301      	adds	r3, #1
   15d0a:	4a0d      	ldr	r2, [pc, #52]	; (15d40 <UiPlaceSuggest3+0x184>)
   15d0c:	5cd3      	ldrb	r3, [r2, r3]
   15d0e:	2b02      	cmp	r3, #2
   15d10:	d110      	bne.n	15d34 <UiPlaceSuggest3+0x178>
				place_tile_stat[loc_t + 1] = UI_PLACE_VALID;
   15d12:	230e      	movs	r3, #14
   15d14:	18fb      	adds	r3, r7, r3
   15d16:	781b      	ldrb	r3, [r3, #0]
   15d18:	3301      	adds	r3, #1
   15d1a:	4a09      	ldr	r2, [pc, #36]	; (15d40 <UiPlaceSuggest3+0x184>)
   15d1c:	2100      	movs	r1, #0
   15d1e:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(loc_t + 1, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15d20:	230e      	movs	r3, #14
   15d22:	18fb      	adds	r3, r7, r3
   15d24:	781b      	ldrb	r3, [r3, #0]
   15d26:	3301      	adds	r3, #1
   15d28:	b2d8      	uxtb	r0, r3
   15d2a:	2302      	movs	r3, #2
   15d2c:	2232      	movs	r2, #50	; 0x32
   15d2e:	2132      	movs	r1, #50	; 0x32
   15d30:	4c04      	ldr	r4, [pc, #16]	; (15d44 <UiPlaceSuggest3+0x188>)
   15d32:	47a0      	blx	r4
			}
		}
		
	}
	
	SeesawOrderLedUpdate();
   15d34:	4b04      	ldr	r3, [pc, #16]	; (15d48 <UiPlaceSuggest3+0x18c>)
   15d36:	4798      	blx	r3
}
   15d38:	46c0      	nop			; (mov r8, r8)
   15d3a:	46bd      	mov	sp, r7
   15d3c:	b005      	add	sp, #20
   15d3e:	bd90      	pop	{r4, r7, pc}
   15d40:	2000004c 	.word	0x2000004c
   15d44:	00015339 	.word	0x00015339
   15d48:	00015401 	.word	0x00015401

00015d4c <UiRemoveSuggest>:


static void UiRemoveSuggest(uint8_t loc)
{
   15d4c:	b590      	push	{r4, r7, lr}
   15d4e:	b085      	sub	sp, #20
   15d50:	af00      	add	r7, sp, #0
   15d52:	0002      	movs	r2, r0
   15d54:	1dfb      	adds	r3, r7, #7
   15d56:	701a      	strb	r2, [r3, #0]
	uint8_t rec_loc;

	rec_loc = loc + 4;
   15d58:	230f      	movs	r3, #15
   15d5a:	18fb      	adds	r3, r7, r3
   15d5c:	1dfa      	adds	r2, r7, #7
   15d5e:	7812      	ldrb	r2, [r2, #0]
   15d60:	3204      	adds	r2, #4
   15d62:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   15d64:	230f      	movs	r3, #15
   15d66:	18fb      	adds	r3, r7, r3
   15d68:	781b      	ldrb	r3, [r3, #0]
   15d6a:	4a34      	ldr	r2, [pc, #208]	; (15e3c <UiRemoveSuggest+0xf0>)
   15d6c:	5cd3      	ldrb	r3, [r2, r3]
   15d6e:	2b00      	cmp	r3, #0
   15d70:	d10d      	bne.n	15d8e <UiRemoveSuggest+0x42>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   15d72:	230f      	movs	r3, #15
   15d74:	18fb      	adds	r3, r7, r3
   15d76:	781b      	ldrb	r3, [r3, #0]
   15d78:	4a30      	ldr	r2, [pc, #192]	; (15e3c <UiRemoveSuggest+0xf0>)
   15d7a:	2102      	movs	r1, #2
   15d7c:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   15d7e:	230f      	movs	r3, #15
   15d80:	18fb      	adds	r3, r7, r3
   15d82:	7818      	ldrb	r0, [r3, #0]
   15d84:	2300      	movs	r3, #0
   15d86:	2200      	movs	r2, #0
   15d88:	2100      	movs	r1, #0
   15d8a:	4c2d      	ldr	r4, [pc, #180]	; (15e40 <UiRemoveSuggest+0xf4>)
   15d8c:	47a0      	blx	r4

	}

	rec_loc = loc - 4;
   15d8e:	230f      	movs	r3, #15
   15d90:	18fb      	adds	r3, r7, r3
   15d92:	1dfa      	adds	r2, r7, #7
   15d94:	7812      	ldrb	r2, [r2, #0]
   15d96:	3a04      	subs	r2, #4
   15d98:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   15d9a:	230f      	movs	r3, #15
   15d9c:	18fb      	adds	r3, r7, r3
   15d9e:	781b      	ldrb	r3, [r3, #0]
   15da0:	4a26      	ldr	r2, [pc, #152]	; (15e3c <UiRemoveSuggest+0xf0>)
   15da2:	5cd3      	ldrb	r3, [r2, r3]
   15da4:	2b00      	cmp	r3, #0
   15da6:	d10d      	bne.n	15dc4 <UiRemoveSuggest+0x78>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   15da8:	230f      	movs	r3, #15
   15daa:	18fb      	adds	r3, r7, r3
   15dac:	781b      	ldrb	r3, [r3, #0]
   15dae:	4a23      	ldr	r2, [pc, #140]	; (15e3c <UiRemoveSuggest+0xf0>)
   15db0:	2102      	movs	r1, #2
   15db2:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   15db4:	230f      	movs	r3, #15
   15db6:	18fb      	adds	r3, r7, r3
   15db8:	7818      	ldrb	r0, [r3, #0]
   15dba:	2300      	movs	r3, #0
   15dbc:	2200      	movs	r2, #0
   15dbe:	2100      	movs	r1, #0
   15dc0:	4c1f      	ldr	r4, [pc, #124]	; (15e40 <UiRemoveSuggest+0xf4>)
   15dc2:	47a0      	blx	r4

	}

	rec_loc = loc + 1;
   15dc4:	230f      	movs	r3, #15
   15dc6:	18fb      	adds	r3, r7, r3
   15dc8:	1dfa      	adds	r2, r7, #7
   15dca:	7812      	ldrb	r2, [r2, #0]
   15dcc:	3201      	adds	r2, #1
   15dce:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   15dd0:	230f      	movs	r3, #15
   15dd2:	18fb      	adds	r3, r7, r3
   15dd4:	781b      	ldrb	r3, [r3, #0]
   15dd6:	4a19      	ldr	r2, [pc, #100]	; (15e3c <UiRemoveSuggest+0xf0>)
   15dd8:	5cd3      	ldrb	r3, [r2, r3]
   15dda:	2b00      	cmp	r3, #0
   15ddc:	d10d      	bne.n	15dfa <UiRemoveSuggest+0xae>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   15dde:	230f      	movs	r3, #15
   15de0:	18fb      	adds	r3, r7, r3
   15de2:	781b      	ldrb	r3, [r3, #0]
   15de4:	4a15      	ldr	r2, [pc, #84]	; (15e3c <UiRemoveSuggest+0xf0>)
   15de6:	2102      	movs	r1, #2
   15de8:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   15dea:	230f      	movs	r3, #15
   15dec:	18fb      	adds	r3, r7, r3
   15dee:	7818      	ldrb	r0, [r3, #0]
   15df0:	2300      	movs	r3, #0
   15df2:	2200      	movs	r2, #0
   15df4:	2100      	movs	r1, #0
   15df6:	4c12      	ldr	r4, [pc, #72]	; (15e40 <UiRemoveSuggest+0xf4>)
   15df8:	47a0      	blx	r4

	}

	rec_loc = loc - 1;
   15dfa:	230f      	movs	r3, #15
   15dfc:	18fb      	adds	r3, r7, r3
   15dfe:	1dfa      	adds	r2, r7, #7
   15e00:	7812      	ldrb	r2, [r2, #0]
   15e02:	3a01      	subs	r2, #1
   15e04:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   15e06:	230f      	movs	r3, #15
   15e08:	18fb      	adds	r3, r7, r3
   15e0a:	781b      	ldrb	r3, [r3, #0]
   15e0c:	4a0b      	ldr	r2, [pc, #44]	; (15e3c <UiRemoveSuggest+0xf0>)
   15e0e:	5cd3      	ldrb	r3, [r2, r3]
   15e10:	2b00      	cmp	r3, #0
   15e12:	d10d      	bne.n	15e30 <UiRemoveSuggest+0xe4>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   15e14:	230f      	movs	r3, #15
   15e16:	18fb      	adds	r3, r7, r3
   15e18:	781b      	ldrb	r3, [r3, #0]
   15e1a:	4a08      	ldr	r2, [pc, #32]	; (15e3c <UiRemoveSuggest+0xf0>)
   15e1c:	2102      	movs	r1, #2
   15e1e:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   15e20:	230f      	movs	r3, #15
   15e22:	18fb      	adds	r3, r7, r3
   15e24:	7818      	ldrb	r0, [r3, #0]
   15e26:	2300      	movs	r3, #0
   15e28:	2200      	movs	r2, #0
   15e2a:	2100      	movs	r1, #0
   15e2c:	4c04      	ldr	r4, [pc, #16]	; (15e40 <UiRemoveSuggest+0xf4>)
   15e2e:	47a0      	blx	r4
	}
	SeesawOrderLedUpdate();
   15e30:	4b04      	ldr	r3, [pc, #16]	; (15e44 <UiRemoveSuggest+0xf8>)
   15e32:	4798      	blx	r3

   15e34:	46c0      	nop			; (mov r8, r8)
   15e36:	46bd      	mov	sp, r7
   15e38:	b005      	add	sp, #20
   15e3a:	bd90      	pop	{r4, r7, pc}
   15e3c:	2000004c 	.word	0x2000004c
   15e40:	00015339 	.word	0x00015339
   15e44:	00015401 	.word	0x00015401

00015e48 <NVIC_SystemReset>:
{
   15e48:	b580      	push	{r7, lr}
   15e4a:	af00      	add	r7, sp, #0
   15e4c:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   15e50:	4b02      	ldr	r3, [pc, #8]	; (15e5c <NVIC_SystemReset+0x14>)
   15e52:	4a03      	ldr	r2, [pc, #12]	; (15e60 <NVIC_SystemReset+0x18>)
   15e54:	60da      	str	r2, [r3, #12]
   15e56:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   15e5a:	e7fe      	b.n	15e5a <NVIC_SystemReset+0x12>
   15e5c:	e000ed00 	.word	0xe000ed00
   15e60:	05fa0004 	.word	0x05fa0004

00015e64 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15e64:	b580      	push	{r7, lr}
   15e66:	b084      	sub	sp, #16
   15e68:	af00      	add	r7, sp, #0
   15e6a:	0002      	movs	r2, r0
   15e6c:	1dfb      	adds	r3, r7, #7
   15e6e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   15e70:	230f      	movs	r3, #15
   15e72:	18fb      	adds	r3, r7, r3
   15e74:	1dfa      	adds	r2, r7, #7
   15e76:	7812      	ldrb	r2, [r2, #0]
   15e78:	09d2      	lsrs	r2, r2, #7
   15e7a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   15e7c:	230e      	movs	r3, #14
   15e7e:	18fb      	adds	r3, r7, r3
   15e80:	1dfa      	adds	r2, r7, #7
   15e82:	7812      	ldrb	r2, [r2, #0]
   15e84:	0952      	lsrs	r2, r2, #5
   15e86:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   15e88:	4b0d      	ldr	r3, [pc, #52]	; (15ec0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   15e8a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   15e8c:	230f      	movs	r3, #15
   15e8e:	18fb      	adds	r3, r7, r3
   15e90:	781b      	ldrb	r3, [r3, #0]
   15e92:	2b00      	cmp	r3, #0
   15e94:	d10f      	bne.n	15eb6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   15e96:	230f      	movs	r3, #15
   15e98:	18fb      	adds	r3, r7, r3
   15e9a:	781b      	ldrb	r3, [r3, #0]
   15e9c:	009b      	lsls	r3, r3, #2
   15e9e:	2210      	movs	r2, #16
   15ea0:	4694      	mov	ip, r2
   15ea2:	44bc      	add	ip, r7
   15ea4:	4463      	add	r3, ip
   15ea6:	3b08      	subs	r3, #8
   15ea8:	681a      	ldr	r2, [r3, #0]
   15eaa:	230e      	movs	r3, #14
   15eac:	18fb      	adds	r3, r7, r3
   15eae:	781b      	ldrb	r3, [r3, #0]
   15eb0:	01db      	lsls	r3, r3, #7
   15eb2:	18d3      	adds	r3, r2, r3
   15eb4:	e000      	b.n	15eb8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   15eb6:	2300      	movs	r3, #0
	}
}
   15eb8:	0018      	movs	r0, r3
   15eba:	46bd      	mov	sp, r7
   15ebc:	b004      	add	sp, #16
   15ebe:	bd80      	pop	{r7, pc}
   15ec0:	41004400 	.word	0x41004400

00015ec4 <system_reset>:
{
   15ec4:	b580      	push	{r7, lr}
   15ec6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   15ec8:	4b02      	ldr	r3, [pc, #8]	; (15ed4 <system_reset+0x10>)
   15eca:	4798      	blx	r3
}
   15ecc:	46c0      	nop			; (mov r8, r8)
   15ece:	46bd      	mov	sp, r7
   15ed0:	bd80      	pop	{r7, pc}
   15ed2:	46c0      	nop			; (mov r8, r8)
   15ed4:	00015e49 	.word	0x00015e49

00015ed8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   15ed8:	b580      	push	{r7, lr}
   15eda:	b082      	sub	sp, #8
   15edc:	af00      	add	r7, sp, #0
   15ede:	0002      	movs	r2, r0
   15ee0:	1dfb      	adds	r3, r7, #7
   15ee2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   15ee4:	1dfb      	adds	r3, r7, #7
   15ee6:	781b      	ldrb	r3, [r3, #0]
   15ee8:	0018      	movs	r0, r3
   15eea:	4b03      	ldr	r3, [pc, #12]	; (15ef8 <port_get_group_from_gpio_pin+0x20>)
   15eec:	4798      	blx	r3
   15eee:	0003      	movs	r3, r0
}
   15ef0:	0018      	movs	r0, r3
   15ef2:	46bd      	mov	sp, r7
   15ef4:	b002      	add	sp, #8
   15ef6:	bd80      	pop	{r7, pc}
   15ef8:	00015e65 	.word	0x00015e65

00015efc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   15efc:	b580      	push	{r7, lr}
   15efe:	b084      	sub	sp, #16
   15f00:	af00      	add	r7, sp, #0
   15f02:	0002      	movs	r2, r0
   15f04:	1dfb      	adds	r3, r7, #7
   15f06:	701a      	strb	r2, [r3, #0]
   15f08:	1dbb      	adds	r3, r7, #6
   15f0a:	1c0a      	adds	r2, r1, #0
   15f0c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   15f0e:	1dfb      	adds	r3, r7, #7
   15f10:	781b      	ldrb	r3, [r3, #0]
   15f12:	0018      	movs	r0, r3
   15f14:	4b0d      	ldr	r3, [pc, #52]	; (15f4c <port_pin_set_output_level+0x50>)
   15f16:	4798      	blx	r3
   15f18:	0003      	movs	r3, r0
   15f1a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   15f1c:	1dfb      	adds	r3, r7, #7
   15f1e:	781b      	ldrb	r3, [r3, #0]
   15f20:	221f      	movs	r2, #31
   15f22:	4013      	ands	r3, r2
   15f24:	2201      	movs	r2, #1
   15f26:	409a      	lsls	r2, r3
   15f28:	0013      	movs	r3, r2
   15f2a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   15f2c:	1dbb      	adds	r3, r7, #6
   15f2e:	781b      	ldrb	r3, [r3, #0]
   15f30:	2b00      	cmp	r3, #0
   15f32:	d003      	beq.n	15f3c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   15f34:	68fb      	ldr	r3, [r7, #12]
   15f36:	68ba      	ldr	r2, [r7, #8]
   15f38:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   15f3a:	e002      	b.n	15f42 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   15f3c:	68fb      	ldr	r3, [r7, #12]
   15f3e:	68ba      	ldr	r2, [r7, #8]
   15f40:	615a      	str	r2, [r3, #20]
}
   15f42:	46c0      	nop			; (mov r8, r8)
   15f44:	46bd      	mov	sp, r7
   15f46:	b004      	add	sp, #16
   15f48:	bd80      	pop	{r7, pc}
   15f4a:	46c0      	nop			; (mov r8, r8)
   15f4c:	00015ed9 	.word	0x00015ed9

00015f50 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   15f50:	b580      	push	{r7, lr}
   15f52:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   15f54:	4b02      	ldr	r3, [pc, #8]	; (15f60 <init_state+0x10>)
   15f56:	2200      	movs	r2, #0
   15f58:	701a      	strb	r2, [r3, #0]
}
   15f5a:	46c0      	nop			; (mov r8, r8)
   15f5c:	46bd      	mov	sp, r7
   15f5e:	bd80      	pop	{r7, pc}
   15f60:	20000455 	.word	0x20000455

00015f64 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   15f64:	b580      	push	{r7, lr}
   15f66:	b082      	sub	sp, #8
   15f68:	af00      	add	r7, sp, #0
   15f6a:	0002      	movs	r2, r0
   15f6c:	1dfb      	adds	r3, r7, #7
   15f6e:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   15f70:	1dfb      	adds	r3, r7, #7
   15f72:	781b      	ldrb	r3, [r3, #0]
   15f74:	b25b      	sxtb	r3, r3
   15f76:	43db      	mvns	r3, r3
   15f78:	b25b      	sxtb	r3, r3
   15f7a:	4a06      	ldr	r2, [pc, #24]	; (15f94 <clear_state+0x30>)
   15f7c:	7812      	ldrb	r2, [r2, #0]
   15f7e:	b252      	sxtb	r2, r2
   15f80:	4013      	ands	r3, r2
   15f82:	b25b      	sxtb	r3, r3
   15f84:	b2da      	uxtb	r2, r3
   15f86:	4b03      	ldr	r3, [pc, #12]	; (15f94 <clear_state+0x30>)
   15f88:	701a      	strb	r2, [r3, #0]
}
   15f8a:	46c0      	nop			; (mov r8, r8)
   15f8c:	46bd      	mov	sp, r7
   15f8e:	b002      	add	sp, #8
   15f90:	bd80      	pop	{r7, pc}
   15f92:	46c0      	nop			; (mov r8, r8)
   15f94:	20000455 	.word	0x20000455

00015f98 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   15f98:	b580      	push	{r7, lr}
   15f9a:	b082      	sub	sp, #8
   15f9c:	af00      	add	r7, sp, #0
   15f9e:	0002      	movs	r2, r0
   15fa0:	1dfb      	adds	r3, r7, #7
   15fa2:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   15fa4:	4b05      	ldr	r3, [pc, #20]	; (15fbc <add_state+0x24>)
   15fa6:	781a      	ldrb	r2, [r3, #0]
   15fa8:	1dfb      	adds	r3, r7, #7
   15faa:	781b      	ldrb	r3, [r3, #0]
   15fac:	4313      	orrs	r3, r2
   15fae:	b2da      	uxtb	r2, r3
   15fb0:	4b02      	ldr	r3, [pc, #8]	; (15fbc <add_state+0x24>)
   15fb2:	701a      	strb	r2, [r3, #0]
}
   15fb4:	46c0      	nop			; (mov r8, r8)
   15fb6:	46bd      	mov	sp, r7
   15fb8:	b002      	add	sp, #8
   15fba:	bd80      	pop	{r7, pc}
   15fbc:	20000455 	.word	0x20000455

00015fc0 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   15fc0:	b580      	push	{r7, lr}
   15fc2:	b082      	sub	sp, #8
   15fc4:	af00      	add	r7, sp, #0
   15fc6:	0002      	movs	r2, r0
   15fc8:	1dfb      	adds	r3, r7, #7
   15fca:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   15fcc:	4b06      	ldr	r3, [pc, #24]	; (15fe8 <is_state_set+0x28>)
   15fce:	781b      	ldrb	r3, [r3, #0]
   15fd0:	1dfa      	adds	r2, r7, #7
   15fd2:	7812      	ldrb	r2, [r2, #0]
   15fd4:	4013      	ands	r3, r2
   15fd6:	b2db      	uxtb	r3, r3
   15fd8:	1e5a      	subs	r2, r3, #1
   15fda:	4193      	sbcs	r3, r2
   15fdc:	b2db      	uxtb	r3, r3
}
   15fde:	0018      	movs	r0, r3
   15fe0:	46bd      	mov	sp, r7
   15fe2:	b002      	add	sp, #8
   15fe4:	bd80      	pop	{r7, pc}
   15fe6:	46c0      	nop			; (mov r8, r8)
   15fe8:	20000455 	.word	0x20000455

00015fec <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   15fec:	b590      	push	{r4, r7, lr}
   15fee:	b085      	sub	sp, #20
   15ff0:	af00      	add	r7, sp, #0
   15ff2:	6078      	str	r0, [r7, #4]
   15ff4:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   15ff6:	687b      	ldr	r3, [r7, #4]
   15ff8:	2b00      	cmp	r3, #0
   15ffa:	d002      	beq.n	16002 <is_exist_file+0x16>
   15ffc:	683b      	ldr	r3, [r7, #0]
   15ffe:	2b00      	cmp	r3, #0
   16000:	d101      	bne.n	16006 <is_exist_file+0x1a>
        return false;
   16002:	2300      	movs	r3, #0
   16004:	e013      	b.n	1602e <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16006:	230f      	movs	r3, #15
   16008:	18fc      	adds	r4, r7, r3
   1600a:	6839      	ldr	r1, [r7, #0]
   1600c:	4b0a      	ldr	r3, [pc, #40]	; (16038 <is_exist_file+0x4c>)
   1600e:	2200      	movs	r2, #0
   16010:	0018      	movs	r0, r3
   16012:	4b0a      	ldr	r3, [pc, #40]	; (1603c <is_exist_file+0x50>)
   16014:	4798      	blx	r3
   16016:	0003      	movs	r3, r0
   16018:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   1601a:	4b07      	ldr	r3, [pc, #28]	; (16038 <is_exist_file+0x4c>)
   1601c:	0018      	movs	r0, r3
   1601e:	4b08      	ldr	r3, [pc, #32]	; (16040 <is_exist_file+0x54>)
   16020:	4798      	blx	r3
    return (ret == FR_OK);
   16022:	230f      	movs	r3, #15
   16024:	18fb      	adds	r3, r7, r3
   16026:	781b      	ldrb	r3, [r3, #0]
   16028:	425a      	negs	r2, r3
   1602a:	4153      	adcs	r3, r2
   1602c:	b2db      	uxtb	r3, r3
}
   1602e:	0018      	movs	r0, r3
   16030:	46bd      	mov	sp, r7
   16032:	b005      	add	sp, #20
   16034:	bd90      	pop	{r4, r7, pc}
   16036:	46c0      	nop			; (mov r8, r8)
   16038:	20000458 	.word	0x20000458
   1603c:	0002d2d9 	.word	0x0002d2d9
   16040:	0002dcd9 	.word	0x0002dcd9

00016044 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16044:	b580      	push	{r7, lr}
   16046:	b09e      	sub	sp, #120	; 0x78
   16048:	af00      	add	r7, sp, #0
   1604a:	60f8      	str	r0, [r7, #12]
   1604c:	60b9      	str	r1, [r7, #8]
   1604e:	1dfb      	adds	r3, r7, #7
   16050:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   16052:	2376      	movs	r3, #118	; 0x76
   16054:	18fb      	adds	r3, r7, r3
   16056:	2201      	movs	r2, #1
   16058:	801a      	strh	r2, [r3, #0]
   1605a:	2374      	movs	r3, #116	; 0x74
   1605c:	18fb      	adds	r3, r7, r3
   1605e:	2200      	movs	r2, #0
   16060:	801a      	strh	r2, [r3, #0]
   16062:	236e      	movs	r3, #110	; 0x6e
   16064:	18fb      	adds	r3, r7, r3
   16066:	2200      	movs	r2, #0
   16068:	801a      	strh	r2, [r3, #0]
   1606a:	2372      	movs	r3, #114	; 0x72
   1606c:	18fb      	adds	r3, r7, r3
   1606e:	2200      	movs	r2, #0
   16070:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   16072:	2324      	movs	r3, #36	; 0x24
   16074:	18fb      	adds	r3, r7, r3
   16076:	0018      	movs	r0, r3
   16078:	2341      	movs	r3, #65	; 0x41
   1607a:	001a      	movs	r2, r3
   1607c:	2100      	movs	r1, #0
   1607e:	4b92      	ldr	r3, [pc, #584]	; (162c8 <rename_to_unique+0x284>)
   16080:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   16082:	2318      	movs	r3, #24
   16084:	18fb      	adds	r3, r7, r3
   16086:	0018      	movs	r0, r3
   16088:	2309      	movs	r3, #9
   1608a:	001a      	movs	r2, r3
   1608c:	2100      	movs	r1, #0
   1608e:	4b8e      	ldr	r3, [pc, #568]	; (162c8 <rename_to_unique+0x284>)
   16090:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   16092:	2314      	movs	r3, #20
   16094:	18fb      	adds	r3, r7, r3
   16096:	2200      	movs	r2, #0
   16098:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   1609a:	2300      	movs	r3, #0
   1609c:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   1609e:	2371      	movs	r3, #113	; 0x71
   160a0:	18fb      	adds	r3, r7, r3
   160a2:	2200      	movs	r2, #0
   160a4:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   160a6:	68bb      	ldr	r3, [r7, #8]
   160a8:	2b00      	cmp	r3, #0
   160aa:	d101      	bne.n	160b0 <rename_to_unique+0x6c>
        return false;
   160ac:	2300      	movs	r3, #0
   160ae:	e106      	b.n	162be <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   160b0:	68ba      	ldr	r2, [r7, #8]
   160b2:	68fb      	ldr	r3, [r7, #12]
   160b4:	0011      	movs	r1, r2
   160b6:	0018      	movs	r0, r3
   160b8:	4b84      	ldr	r3, [pc, #528]	; (162cc <rename_to_unique+0x288>)
   160ba:	4798      	blx	r3
   160bc:	0003      	movs	r3, r0
   160be:	001a      	movs	r2, r3
   160c0:	2301      	movs	r3, #1
   160c2:	4053      	eors	r3, r2
   160c4:	b2db      	uxtb	r3, r3
   160c6:	2b00      	cmp	r3, #0
   160c8:	d001      	beq.n	160ce <rename_to_unique+0x8a>
        return true;
   160ca:	2301      	movs	r3, #1
   160cc:	e0f7      	b.n	162be <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   160ce:	68bb      	ldr	r3, [r7, #8]
   160d0:	0018      	movs	r0, r3
   160d2:	4b7f      	ldr	r3, [pc, #508]	; (162d0 <rename_to_unique+0x28c>)
   160d4:	4798      	blx	r3
   160d6:	0003      	movs	r3, r0
   160d8:	2b40      	cmp	r3, #64	; 0x40
   160da:	d901      	bls.n	160e0 <rename_to_unique+0x9c>
        return false;
   160dc:	2300      	movs	r3, #0
   160de:	e0ee      	b.n	162be <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   160e0:	68bb      	ldr	r3, [r7, #8]
   160e2:	212e      	movs	r1, #46	; 0x2e
   160e4:	0018      	movs	r0, r3
   160e6:	4b7b      	ldr	r3, [pc, #492]	; (162d4 <rename_to_unique+0x290>)
   160e8:	4798      	blx	r3
   160ea:	0003      	movs	r3, r0
   160ec:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   160ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   160f0:	2b00      	cmp	r3, #0
   160f2:	d052      	beq.n	1619a <rename_to_unique+0x156>
        ext_len = strlen(p);
   160f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   160f6:	0018      	movs	r0, r3
   160f8:	4b75      	ldr	r3, [pc, #468]	; (162d0 <rename_to_unique+0x28c>)
   160fa:	4798      	blx	r3
   160fc:	0002      	movs	r2, r0
   160fe:	236e      	movs	r3, #110	; 0x6e
   16100:	18fb      	adds	r3, r7, r3
   16102:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16104:	236e      	movs	r3, #110	; 0x6e
   16106:	18fb      	adds	r3, r7, r3
   16108:	881b      	ldrh	r3, [r3, #0]
   1610a:	2b07      	cmp	r3, #7
   1610c:	d837      	bhi.n	1617e <rename_to_unique+0x13a>
            valid_ext = true;
   1610e:	2371      	movs	r3, #113	; 0x71
   16110:	18fb      	adds	r3, r7, r3
   16112:	2201      	movs	r2, #1
   16114:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16116:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16118:	2318      	movs	r3, #24
   1611a:	18fb      	adds	r3, r7, r3
   1611c:	0011      	movs	r1, r2
   1611e:	0018      	movs	r0, r3
   16120:	4b6d      	ldr	r3, [pc, #436]	; (162d8 <rename_to_unique+0x294>)
   16122:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16124:	68bb      	ldr	r3, [r7, #8]
   16126:	0018      	movs	r0, r3
   16128:	4b69      	ldr	r3, [pc, #420]	; (162d0 <rename_to_unique+0x28c>)
   1612a:	4798      	blx	r3
   1612c:	0002      	movs	r2, r0
   1612e:	236e      	movs	r3, #110	; 0x6e
   16130:	18fb      	adds	r3, r7, r3
   16132:	881b      	ldrh	r3, [r3, #0]
   16134:	1ad3      	subs	r3, r2, r3
   16136:	2b3c      	cmp	r3, #60	; 0x3c
   16138:	d911      	bls.n	1615e <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   1613a:	2374      	movs	r3, #116	; 0x74
   1613c:	18fb      	adds	r3, r7, r3
   1613e:	226e      	movs	r2, #110	; 0x6e
   16140:	18ba      	adds	r2, r7, r2
   16142:	8812      	ldrh	r2, [r2, #0]
   16144:	213c      	movs	r1, #60	; 0x3c
   16146:	1a8a      	subs	r2, r1, r2
   16148:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   1614a:	2374      	movs	r3, #116	; 0x74
   1614c:	18fb      	adds	r3, r7, r3
   1614e:	881a      	ldrh	r2, [r3, #0]
   16150:	68b9      	ldr	r1, [r7, #8]
   16152:	2324      	movs	r3, #36	; 0x24
   16154:	18fb      	adds	r3, r7, r3
   16156:	0018      	movs	r0, r3
   16158:	4b60      	ldr	r3, [pc, #384]	; (162dc <rename_to_unique+0x298>)
   1615a:	4798      	blx	r3
   1615c:	e02a      	b.n	161b4 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   1615e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16160:	68bb      	ldr	r3, [r7, #8]
   16162:	1ad2      	subs	r2, r2, r3
   16164:	2374      	movs	r3, #116	; 0x74
   16166:	18fb      	adds	r3, r7, r3
   16168:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   1616a:	2374      	movs	r3, #116	; 0x74
   1616c:	18fb      	adds	r3, r7, r3
   1616e:	881a      	ldrh	r2, [r3, #0]
   16170:	68b9      	ldr	r1, [r7, #8]
   16172:	2324      	movs	r3, #36	; 0x24
   16174:	18fb      	adds	r3, r7, r3
   16176:	0018      	movs	r0, r3
   16178:	4b58      	ldr	r3, [pc, #352]	; (162dc <rename_to_unique+0x298>)
   1617a:	4798      	blx	r3
   1617c:	e01a      	b.n	161b4 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1617e:	2374      	movs	r3, #116	; 0x74
   16180:	18fb      	adds	r3, r7, r3
   16182:	223c      	movs	r2, #60	; 0x3c
   16184:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   16186:	2374      	movs	r3, #116	; 0x74
   16188:	18fb      	adds	r3, r7, r3
   1618a:	881a      	ldrh	r2, [r3, #0]
   1618c:	68b9      	ldr	r1, [r7, #8]
   1618e:	2324      	movs	r3, #36	; 0x24
   16190:	18fb      	adds	r3, r7, r3
   16192:	0018      	movs	r0, r3
   16194:	4b51      	ldr	r3, [pc, #324]	; (162dc <rename_to_unique+0x298>)
   16196:	4798      	blx	r3
   16198:	e00c      	b.n	161b4 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1619a:	2374      	movs	r3, #116	; 0x74
   1619c:	18fb      	adds	r3, r7, r3
   1619e:	223c      	movs	r2, #60	; 0x3c
   161a0:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   161a2:	2374      	movs	r3, #116	; 0x74
   161a4:	18fb      	adds	r3, r7, r3
   161a6:	881a      	ldrh	r2, [r3, #0]
   161a8:	68b9      	ldr	r1, [r7, #8]
   161aa:	2324      	movs	r3, #36	; 0x24
   161ac:	18fb      	adds	r3, r7, r3
   161ae:	0018      	movs	r0, r3
   161b0:	4b4a      	ldr	r3, [pc, #296]	; (162dc <rename_to_unique+0x298>)
   161b2:	4798      	blx	r3
    }

    name[name_len++] = '-';
   161b4:	2374      	movs	r3, #116	; 0x74
   161b6:	18fb      	adds	r3, r7, r3
   161b8:	881b      	ldrh	r3, [r3, #0]
   161ba:	2274      	movs	r2, #116	; 0x74
   161bc:	18ba      	adds	r2, r7, r2
   161be:	1c59      	adds	r1, r3, #1
   161c0:	8011      	strh	r1, [r2, #0]
   161c2:	001a      	movs	r2, r3
   161c4:	2324      	movs	r3, #36	; 0x24
   161c6:	18fb      	adds	r3, r7, r3
   161c8:	212d      	movs	r1, #45	; 0x2d
   161ca:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   161cc:	2376      	movs	r3, #118	; 0x76
   161ce:	18fb      	adds	r3, r7, r3
   161d0:	2200      	movs	r2, #0
   161d2:	801a      	strh	r2, [r3, #0]
   161d4:	2372      	movs	r3, #114	; 0x72
   161d6:	18fb      	adds	r3, r7, r3
   161d8:	2201      	movs	r2, #1
   161da:	801a      	strh	r2, [r3, #0]
   161dc:	e010      	b.n	16200 <rename_to_unique+0x1bc>
        count *= 10;
   161de:	2372      	movs	r3, #114	; 0x72
   161e0:	18fa      	adds	r2, r7, r3
   161e2:	2372      	movs	r3, #114	; 0x72
   161e4:	18fb      	adds	r3, r7, r3
   161e6:	881b      	ldrh	r3, [r3, #0]
   161e8:	1c19      	adds	r1, r3, #0
   161ea:	0089      	lsls	r1, r1, #2
   161ec:	18cb      	adds	r3, r1, r3
   161ee:	18db      	adds	r3, r3, r3
   161f0:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   161f2:	2376      	movs	r3, #118	; 0x76
   161f4:	18fb      	adds	r3, r7, r3
   161f6:	881a      	ldrh	r2, [r3, #0]
   161f8:	2376      	movs	r3, #118	; 0x76
   161fa:	18fb      	adds	r3, r7, r3
   161fc:	3201      	adds	r2, #1
   161fe:	801a      	strh	r2, [r3, #0]
   16200:	2376      	movs	r3, #118	; 0x76
   16202:	18fb      	adds	r3, r7, r3
   16204:	881b      	ldrh	r3, [r3, #0]
   16206:	2b02      	cmp	r3, #2
   16208:	d9e9      	bls.n	161de <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   1620a:	2376      	movs	r3, #118	; 0x76
   1620c:	18fb      	adds	r3, r7, r3
   1620e:	2201      	movs	r2, #1
   16210:	801a      	strh	r2, [r3, #0]
   16212:	e04b      	b.n	162ac <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16214:	2376      	movs	r3, #118	; 0x76
   16216:	18fb      	adds	r3, r7, r3
   16218:	881a      	ldrh	r2, [r3, #0]
   1621a:	4931      	ldr	r1, [pc, #196]	; (162e0 <rename_to_unique+0x29c>)
   1621c:	2314      	movs	r3, #20
   1621e:	18fb      	adds	r3, r7, r3
   16220:	0018      	movs	r0, r3
   16222:	4b30      	ldr	r3, [pc, #192]	; (162e4 <rename_to_unique+0x2a0>)
   16224:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16226:	2374      	movs	r3, #116	; 0x74
   16228:	18fb      	adds	r3, r7, r3
   1622a:	881b      	ldrh	r3, [r3, #0]
   1622c:	2224      	movs	r2, #36	; 0x24
   1622e:	18ba      	adds	r2, r7, r2
   16230:	18d3      	adds	r3, r2, r3
   16232:	2214      	movs	r2, #20
   16234:	18b9      	adds	r1, r7, r2
   16236:	2203      	movs	r2, #3
   16238:	0018      	movs	r0, r3
   1623a:	4b28      	ldr	r3, [pc, #160]	; (162dc <rename_to_unique+0x298>)
   1623c:	4798      	blx	r3
        if (valid_ext) {
   1623e:	2371      	movs	r3, #113	; 0x71
   16240:	18fb      	adds	r3, r7, r3
   16242:	781b      	ldrb	r3, [r3, #0]
   16244:	2b00      	cmp	r3, #0
   16246:	d00c      	beq.n	16262 <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16248:	2374      	movs	r3, #116	; 0x74
   1624a:	18fb      	adds	r3, r7, r3
   1624c:	881b      	ldrh	r3, [r3, #0]
   1624e:	3303      	adds	r3, #3
   16250:	2224      	movs	r2, #36	; 0x24
   16252:	18ba      	adds	r2, r7, r2
   16254:	18d3      	adds	r3, r2, r3
   16256:	2218      	movs	r2, #24
   16258:	18ba      	adds	r2, r7, r2
   1625a:	0011      	movs	r1, r2
   1625c:	0018      	movs	r0, r3
   1625e:	4b1e      	ldr	r3, [pc, #120]	; (162d8 <rename_to_unique+0x294>)
   16260:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   16262:	2324      	movs	r3, #36	; 0x24
   16264:	18fa      	adds	r2, r7, r3
   16266:	68fb      	ldr	r3, [r7, #12]
   16268:	0011      	movs	r1, r2
   1626a:	0018      	movs	r0, r3
   1626c:	4b17      	ldr	r3, [pc, #92]	; (162cc <rename_to_unique+0x288>)
   1626e:	4798      	blx	r3
   16270:	0003      	movs	r3, r0
   16272:	001a      	movs	r2, r3
   16274:	2301      	movs	r3, #1
   16276:	4053      	eors	r3, r2
   16278:	b2db      	uxtb	r3, r3
   1627a:	2b00      	cmp	r3, #0
   1627c:	d00f      	beq.n	1629e <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   1627e:	1dfb      	adds	r3, r7, #7
   16280:	781a      	ldrb	r2, [r3, #0]
   16282:	68bb      	ldr	r3, [r7, #8]
   16284:	2100      	movs	r1, #0
   16286:	0018      	movs	r0, r3
   16288:	4b0f      	ldr	r3, [pc, #60]	; (162c8 <rename_to_unique+0x284>)
   1628a:	4798      	blx	r3
            strcpy(file_path_name, name);
   1628c:	2324      	movs	r3, #36	; 0x24
   1628e:	18fa      	adds	r2, r7, r3
   16290:	68bb      	ldr	r3, [r7, #8]
   16292:	0011      	movs	r1, r2
   16294:	0018      	movs	r0, r3
   16296:	4b10      	ldr	r3, [pc, #64]	; (162d8 <rename_to_unique+0x294>)
   16298:	4798      	blx	r3
            return true;
   1629a:	2301      	movs	r3, #1
   1629c:	e00f      	b.n	162be <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   1629e:	2376      	movs	r3, #118	; 0x76
   162a0:	18fb      	adds	r3, r7, r3
   162a2:	881a      	ldrh	r2, [r3, #0]
   162a4:	2376      	movs	r3, #118	; 0x76
   162a6:	18fb      	adds	r3, r7, r3
   162a8:	3201      	adds	r2, #1
   162aa:	801a      	strh	r2, [r3, #0]
   162ac:	2376      	movs	r3, #118	; 0x76
   162ae:	18fa      	adds	r2, r7, r3
   162b0:	2372      	movs	r3, #114	; 0x72
   162b2:	18fb      	adds	r3, r7, r3
   162b4:	8812      	ldrh	r2, [r2, #0]
   162b6:	881b      	ldrh	r3, [r3, #0]
   162b8:	429a      	cmp	r2, r3
   162ba:	d3ab      	bcc.n	16214 <rename_to_unique+0x1d0>
        }
    }
    return false;
   162bc:	2300      	movs	r3, #0
}
   162be:	0018      	movs	r0, r3
   162c0:	46bd      	mov	sp, r7
   162c2:	b01e      	add	sp, #120	; 0x78
   162c4:	bd80      	pop	{r7, pc}
   162c6:	46c0      	nop			; (mov r8, r8)
   162c8:	0003438b 	.word	0x0003438b
   162cc:	00015fed 	.word	0x00015fed
   162d0:	00034727 	.word	0x00034727
   162d4:	00034781 	.word	0x00034781
   162d8:	000346dd 	.word	0x000346dd
   162dc:	00034757 	.word	0x00034757
   162e0:	00035d14 	.word	0x00035d14
   162e4:	00034649 	.word	0x00034649

000162e8 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   162e8:	b590      	push	{r4, r7, lr}
   162ea:	b083      	sub	sp, #12
   162ec:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   162ee:	2001      	movs	r0, #1
   162f0:	4b22      	ldr	r3, [pc, #136]	; (1637c <start_download+0x94>)
   162f2:	4798      	blx	r3
   162f4:	0003      	movs	r3, r0
   162f6:	001a      	movs	r2, r3
   162f8:	2301      	movs	r3, #1
   162fa:	4053      	eors	r3, r2
   162fc:	b2db      	uxtb	r3, r3
   162fe:	2b00      	cmp	r3, #0
   16300:	d005      	beq.n	1630e <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   16302:	4b1f      	ldr	r3, [pc, #124]	; (16380 <start_download+0x98>)
   16304:	0019      	movs	r1, r3
   16306:	2001      	movs	r0, #1
   16308:	4b1e      	ldr	r3, [pc, #120]	; (16384 <start_download+0x9c>)
   1630a:	4798      	blx	r3
        return;
   1630c:	e032      	b.n	16374 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   1630e:	2002      	movs	r0, #2
   16310:	4b1a      	ldr	r3, [pc, #104]	; (1637c <start_download+0x94>)
   16312:	4798      	blx	r3
   16314:	0003      	movs	r3, r0
   16316:	001a      	movs	r2, r3
   16318:	2301      	movs	r3, #1
   1631a:	4053      	eors	r3, r2
   1631c:	b2db      	uxtb	r3, r3
   1631e:	2b00      	cmp	r3, #0
   16320:	d005      	beq.n	1632e <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   16322:	4b19      	ldr	r3, [pc, #100]	; (16388 <start_download+0xa0>)
   16324:	0019      	movs	r1, r3
   16326:	2001      	movs	r0, #1
   16328:	4b16      	ldr	r3, [pc, #88]	; (16384 <start_download+0x9c>)
   1632a:	4798      	blx	r3
        return;
   1632c:	e022      	b.n	16374 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   1632e:	2004      	movs	r0, #4
   16330:	4b12      	ldr	r3, [pc, #72]	; (1637c <start_download+0x94>)
   16332:	4798      	blx	r3
   16334:	1e03      	subs	r3, r0, #0
   16336:	d005      	beq.n	16344 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16338:	4b14      	ldr	r3, [pc, #80]	; (1638c <start_download+0xa4>)
   1633a:	0019      	movs	r1, r3
   1633c:	2001      	movs	r0, #1
   1633e:	4b11      	ldr	r3, [pc, #68]	; (16384 <start_download+0x9c>)
   16340:	4798      	blx	r3
        return;
   16342:	e017      	b.n	16374 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16344:	2008      	movs	r0, #8
   16346:	4b0d      	ldr	r3, [pc, #52]	; (1637c <start_download+0x94>)
   16348:	4798      	blx	r3
   1634a:	1e03      	subs	r3, r0, #0
   1634c:	d005      	beq.n	1635a <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   1634e:	4b10      	ldr	r3, [pc, #64]	; (16390 <start_download+0xa8>)
   16350:	0019      	movs	r1, r3
   16352:	2001      	movs	r0, #1
   16354:	4b0b      	ldr	r3, [pc, #44]	; (16384 <start_download+0x9c>)
   16356:	4798      	blx	r3
        return;
   16358:	e00c      	b.n	16374 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   1635a:	4b0e      	ldr	r3, [pc, #56]	; (16394 <start_download+0xac>)
   1635c:	0019      	movs	r1, r3
   1635e:	2001      	movs	r0, #1
   16360:	4b08      	ldr	r3, [pc, #32]	; (16384 <start_download+0x9c>)
   16362:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16364:	490c      	ldr	r1, [pc, #48]	; (16398 <start_download+0xb0>)
   16366:	480d      	ldr	r0, [pc, #52]	; (1639c <start_download+0xb4>)
   16368:	2300      	movs	r3, #0
   1636a:	9300      	str	r3, [sp, #0]
   1636c:	2300      	movs	r3, #0
   1636e:	2201      	movs	r2, #1
   16370:	4c0b      	ldr	r4, [pc, #44]	; (163a0 <start_download+0xb8>)
   16372:	47a0      	blx	r4
}
   16374:	46bd      	mov	sp, r7
   16376:	b001      	add	sp, #4
   16378:	bd90      	pop	{r4, r7, pc}
   1637a:	46c0      	nop			; (mov r8, r8)
   1637c:	00015fc1 	.word	0x00015fc1
   16380:	00035d1c 	.word	0x00035d1c
   16384:	0001dc41 	.word	0x0001dc41
   16388:	00035d48 	.word	0x00035d48
   1638c:	00035d74 	.word	0x00035d74
   16390:	00035da0 	.word	0x00035da0
   16394:	00035dcc 	.word	0x00035dcc
   16398:	00035df8 	.word	0x00035df8
   1639c:	20004484 	.word	0x20004484
   163a0:	0003092d 	.word	0x0003092d

000163a4 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   163a4:	b5b0      	push	{r4, r5, r7, lr}
   163a6:	b086      	sub	sp, #24
   163a8:	af00      	add	r7, sp, #0
   163aa:	6078      	str	r0, [r7, #4]
   163ac:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   163ae:	687b      	ldr	r3, [r7, #4]
   163b0:	2b00      	cmp	r3, #0
   163b2:	d002      	beq.n	163ba <store_file_packet+0x16>
   163b4:	683b      	ldr	r3, [r7, #0]
   163b6:	2b00      	cmp	r3, #0
   163b8:	d105      	bne.n	163c6 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   163ba:	4b58      	ldr	r3, [pc, #352]	; (1651c <store_file_packet+0x178>)
   163bc:	0019      	movs	r1, r3
   163be:	2001      	movs	r0, #1
   163c0:	4b57      	ldr	r3, [pc, #348]	; (16520 <store_file_packet+0x17c>)
   163c2:	4798      	blx	r3
        return;
   163c4:	e0a6      	b.n	16514 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   163c6:	2008      	movs	r0, #8
   163c8:	4b56      	ldr	r3, [pc, #344]	; (16524 <store_file_packet+0x180>)
   163ca:	4798      	blx	r3
   163cc:	0003      	movs	r3, r0
   163ce:	001a      	movs	r2, r3
   163d0:	2301      	movs	r3, #1
   163d2:	4053      	eors	r3, r2
   163d4:	b2db      	uxtb	r3, r3
   163d6:	2b00      	cmp	r3, #0
   163d8:	d055      	beq.n	16486 <store_file_packet+0xe2>
        char *cp = NULL;
   163da:	2300      	movs	r3, #0
   163dc:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   163de:	4b52      	ldr	r3, [pc, #328]	; (16528 <store_file_packet+0x184>)
   163e0:	2230      	movs	r2, #48	; 0x30
   163e2:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   163e4:	4b50      	ldr	r3, [pc, #320]	; (16528 <store_file_packet+0x184>)
   163e6:	223a      	movs	r2, #58	; 0x3a
   163e8:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   163ea:	4b50      	ldr	r3, [pc, #320]	; (1652c <store_file_packet+0x188>)
   163ec:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   163ee:	e002      	b.n	163f6 <store_file_packet+0x52>
            cp--;
   163f0:	697b      	ldr	r3, [r7, #20]
   163f2:	3b01      	subs	r3, #1
   163f4:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   163f6:	697b      	ldr	r3, [r7, #20]
   163f8:	781b      	ldrb	r3, [r3, #0]
   163fa:	2b2f      	cmp	r3, #47	; 0x2f
   163fc:	d1f8      	bne.n	163f0 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   163fe:	697b      	ldr	r3, [r7, #20]
   16400:	0018      	movs	r0, r3
   16402:	4b4b      	ldr	r3, [pc, #300]	; (16530 <store_file_packet+0x18c>)
   16404:	4798      	blx	r3
   16406:	0003      	movs	r3, r0
   16408:	2b01      	cmp	r3, #1
   1640a:	d924      	bls.n	16456 <store_file_packet+0xb2>
            cp++;
   1640c:	697b      	ldr	r3, [r7, #20]
   1640e:	3301      	adds	r3, #1
   16410:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   16412:	697a      	ldr	r2, [r7, #20]
   16414:	4b47      	ldr	r3, [pc, #284]	; (16534 <store_file_packet+0x190>)
   16416:	0011      	movs	r1, r2
   16418:	0018      	movs	r0, r3
   1641a:	4b47      	ldr	r3, [pc, #284]	; (16538 <store_file_packet+0x194>)
   1641c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   1641e:	4942      	ldr	r1, [pc, #264]	; (16528 <store_file_packet+0x184>)
   16420:	4b46      	ldr	r3, [pc, #280]	; (1653c <store_file_packet+0x198>)
   16422:	2240      	movs	r2, #64	; 0x40
   16424:	0018      	movs	r0, r3
   16426:	4b46      	ldr	r3, [pc, #280]	; (16540 <store_file_packet+0x19c>)
   16428:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   1642a:	4a3f      	ldr	r2, [pc, #252]	; (16528 <store_file_packet+0x184>)
   1642c:	4b45      	ldr	r3, [pc, #276]	; (16544 <store_file_packet+0x1a0>)
   1642e:	0019      	movs	r1, r3
   16430:	2001      	movs	r0, #1
   16432:	4b3b      	ldr	r3, [pc, #236]	; (16520 <store_file_packet+0x17c>)
   16434:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16436:	2313      	movs	r3, #19
   16438:	18fc      	adds	r4, r7, r3
   1643a:	493b      	ldr	r1, [pc, #236]	; (16528 <store_file_packet+0x184>)
   1643c:	4b3f      	ldr	r3, [pc, #252]	; (1653c <store_file_packet+0x198>)
   1643e:	220a      	movs	r2, #10
   16440:	0018      	movs	r0, r3
   16442:	4b41      	ldr	r3, [pc, #260]	; (16548 <store_file_packet+0x1a4>)
   16444:	4798      	blx	r3
   16446:	0003      	movs	r3, r0
   16448:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   1644a:	2313      	movs	r3, #19
   1644c:	18fb      	adds	r3, r7, r3
   1644e:	781b      	ldrb	r3, [r3, #0]
   16450:	2b00      	cmp	r3, #0
   16452:	d012      	beq.n	1647a <store_file_packet+0xd6>
   16454:	e008      	b.n	16468 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   16456:	4b3d      	ldr	r3, [pc, #244]	; (1654c <store_file_packet+0x1a8>)
   16458:	0019      	movs	r1, r3
   1645a:	2001      	movs	r0, #1
   1645c:	4b30      	ldr	r3, [pc, #192]	; (16520 <store_file_packet+0x17c>)
   1645e:	4798      	blx	r3
            add_state(CANCELED);
   16460:	2020      	movs	r0, #32
   16462:	4b3b      	ldr	r3, [pc, #236]	; (16550 <store_file_packet+0x1ac>)
   16464:	4798      	blx	r3
            return;
   16466:	e055      	b.n	16514 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   16468:	2313      	movs	r3, #19
   1646a:	18fb      	adds	r3, r7, r3
   1646c:	781a      	ldrb	r2, [r3, #0]
   1646e:	4b39      	ldr	r3, [pc, #228]	; (16554 <store_file_packet+0x1b0>)
   16470:	0019      	movs	r1, r3
   16472:	2001      	movs	r0, #1
   16474:	4b2a      	ldr	r3, [pc, #168]	; (16520 <store_file_packet+0x17c>)
   16476:	4798      	blx	r3
            return;
   16478:	e04c      	b.n	16514 <store_file_packet+0x170>
        }

        received_file_size = 0;
   1647a:	4b37      	ldr	r3, [pc, #220]	; (16558 <store_file_packet+0x1b4>)
   1647c:	2200      	movs	r2, #0
   1647e:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   16480:	2008      	movs	r0, #8
   16482:	4b33      	ldr	r3, [pc, #204]	; (16550 <store_file_packet+0x1ac>)
   16484:	4798      	blx	r3
    }

    if (data != NULL) {
   16486:	687b      	ldr	r3, [r7, #4]
   16488:	2b00      	cmp	r3, #0
   1648a:	d043      	beq.n	16514 <store_file_packet+0x170>
        UINT wsize = 0;
   1648c:	2300      	movs	r3, #0
   1648e:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   16490:	2313      	movs	r3, #19
   16492:	18fc      	adds	r4, r7, r3
   16494:	230c      	movs	r3, #12
   16496:	18fb      	adds	r3, r7, r3
   16498:	683a      	ldr	r2, [r7, #0]
   1649a:	6879      	ldr	r1, [r7, #4]
   1649c:	4827      	ldr	r0, [pc, #156]	; (1653c <store_file_packet+0x198>)
   1649e:	4d2f      	ldr	r5, [pc, #188]	; (1655c <store_file_packet+0x1b8>)
   164a0:	47a8      	blx	r5
   164a2:	0003      	movs	r3, r0
   164a4:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   164a6:	2313      	movs	r3, #19
   164a8:	18fb      	adds	r3, r7, r3
   164aa:	781b      	ldrb	r3, [r3, #0]
   164ac:	2b00      	cmp	r3, #0
   164ae:	d00c      	beq.n	164ca <store_file_packet+0x126>
            f_close(&file_object);
   164b0:	4b22      	ldr	r3, [pc, #136]	; (1653c <store_file_packet+0x198>)
   164b2:	0018      	movs	r0, r3
   164b4:	4b2a      	ldr	r3, [pc, #168]	; (16560 <store_file_packet+0x1bc>)
   164b6:	4798      	blx	r3
            add_state(CANCELED);
   164b8:	2020      	movs	r0, #32
   164ba:	4b25      	ldr	r3, [pc, #148]	; (16550 <store_file_packet+0x1ac>)
   164bc:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   164be:	4b29      	ldr	r3, [pc, #164]	; (16564 <store_file_packet+0x1c0>)
   164c0:	0019      	movs	r1, r3
   164c2:	2001      	movs	r0, #1
   164c4:	4b16      	ldr	r3, [pc, #88]	; (16520 <store_file_packet+0x17c>)
   164c6:	4798      	blx	r3
            return;
   164c8:	e024      	b.n	16514 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   164ca:	4b23      	ldr	r3, [pc, #140]	; (16558 <store_file_packet+0x1b4>)
   164cc:	681a      	ldr	r2, [r3, #0]
   164ce:	68fb      	ldr	r3, [r7, #12]
   164d0:	18d2      	adds	r2, r2, r3
   164d2:	4b21      	ldr	r3, [pc, #132]	; (16558 <store_file_packet+0x1b4>)
   164d4:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   164d6:	4b20      	ldr	r3, [pc, #128]	; (16558 <store_file_packet+0x1b4>)
   164d8:	681a      	ldr	r2, [r3, #0]
   164da:	4b23      	ldr	r3, [pc, #140]	; (16568 <store_file_packet+0x1c4>)
   164dc:	681b      	ldr	r3, [r3, #0]
   164de:	4923      	ldr	r1, [pc, #140]	; (1656c <store_file_packet+0x1c8>)
   164e0:	2001      	movs	r0, #1
   164e2:	4c0f      	ldr	r4, [pc, #60]	; (16520 <store_file_packet+0x17c>)
   164e4:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   164e6:	4b1c      	ldr	r3, [pc, #112]	; (16558 <store_file_packet+0x1b4>)
   164e8:	681a      	ldr	r2, [r3, #0]
   164ea:	4b1f      	ldr	r3, [pc, #124]	; (16568 <store_file_packet+0x1c4>)
   164ec:	681b      	ldr	r3, [r3, #0]
   164ee:	429a      	cmp	r2, r3
   164f0:	d310      	bcc.n	16514 <store_file_packet+0x170>
            f_close(&file_object);
   164f2:	4b12      	ldr	r3, [pc, #72]	; (1653c <store_file_packet+0x198>)
   164f4:	0018      	movs	r0, r3
   164f6:	4b1a      	ldr	r3, [pc, #104]	; (16560 <store_file_packet+0x1bc>)
   164f8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   164fa:	4b1d      	ldr	r3, [pc, #116]	; (16570 <store_file_packet+0x1cc>)
   164fc:	0019      	movs	r1, r3
   164fe:	2001      	movs	r0, #1
   16500:	4b07      	ldr	r3, [pc, #28]	; (16520 <store_file_packet+0x17c>)
   16502:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   16504:	2100      	movs	r1, #0
   16506:	2017      	movs	r0, #23
   16508:	4b1a      	ldr	r3, [pc, #104]	; (16574 <store_file_packet+0x1d0>)
   1650a:	4798      	blx	r3
            add_state(COMPLETED);
   1650c:	2010      	movs	r0, #16
   1650e:	4b10      	ldr	r3, [pc, #64]	; (16550 <store_file_packet+0x1ac>)
   16510:	4798      	blx	r3
            return;
   16512:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   16514:	46bd      	mov	sp, r7
   16516:	b006      	add	sp, #24
   16518:	bdb0      	pop	{r4, r5, r7, pc}
   1651a:	46c0      	nop			; (mov r8, r8)
   1651c:	00035e24 	.word	0x00035e24
   16520:	0001dc41 	.word	0x0001dc41
   16524:	00015fc1 	.word	0x00015fc1
   16528:	2000005c 	.word	0x2000005c
   1652c:	00035e22 	.word	0x00035e22
   16530:	00034727 	.word	0x00034727
   16534:	2000005e 	.word	0x2000005e
   16538:	000346dd 	.word	0x000346dd
   1653c:	20000458 	.word	0x20000458
   16540:	00016045 	.word	0x00016045
   16544:	00035e88 	.word	0x00035e88
   16548:	0002d2d9 	.word	0x0002d2d9
   1654c:	00035e48 	.word	0x00035e48
   16550:	00015f99 	.word	0x00015f99
   16554:	00035eb0 	.word	0x00035eb0
   16558:	20000480 	.word	0x20000480
   1655c:	0002d809 	.word	0x0002d809
   16560:	0002dcd9 	.word	0x0002dcd9
   16564:	00035ee4 	.word	0x00035ee4
   16568:	2000047c 	.word	0x2000047c
   1656c:	00035f20 	.word	0x00035f20
   16570:	00035f54 	.word	0x00035f54
   16574:	00015efd 	.word	0x00015efd

00016578 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   16578:	b590      	push	{r4, r7, lr}
   1657a:	b085      	sub	sp, #20
   1657c:	af00      	add	r7, sp, #0
   1657e:	60f8      	str	r0, [r7, #12]
   16580:	60b9      	str	r1, [r7, #8]
   16582:	607a      	str	r2, [r7, #4]
    switch (type) {
   16584:	68bb      	ldr	r3, [r7, #8]
   16586:	2b04      	cmp	r3, #4
   16588:	d900      	bls.n	1658c <http_client_callback+0x14>
   1658a:	e077      	b.n	1667c <http_client_callback+0x104>
   1658c:	68bb      	ldr	r3, [r7, #8]
   1658e:	009a      	lsls	r2, r3, #2
   16590:	4b3c      	ldr	r3, [pc, #240]	; (16684 <http_client_callback+0x10c>)
   16592:	18d3      	adds	r3, r2, r3
   16594:	681b      	ldr	r3, [r3, #0]
   16596:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   16598:	4b3b      	ldr	r3, [pc, #236]	; (16688 <http_client_callback+0x110>)
   1659a:	0019      	movs	r1, r3
   1659c:	2001      	movs	r0, #1
   1659e:	4b3b      	ldr	r3, [pc, #236]	; (1668c <http_client_callback+0x114>)
   165a0:	4798      	blx	r3
            break;
   165a2:	e06b      	b.n	1667c <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   165a4:	4b3a      	ldr	r3, [pc, #232]	; (16690 <http_client_callback+0x118>)
   165a6:	0019      	movs	r1, r3
   165a8:	2001      	movs	r0, #1
   165aa:	4b38      	ldr	r3, [pc, #224]	; (1668c <http_client_callback+0x114>)
   165ac:	4798      	blx	r3
            add_state(GET_REQUESTED);
   165ae:	2004      	movs	r0, #4
   165b0:	4b38      	ldr	r3, [pc, #224]	; (16694 <http_client_callback+0x11c>)
   165b2:	4798      	blx	r3
            break;
   165b4:	e062      	b.n	1667c <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   165b6:	687b      	ldr	r3, [r7, #4]
   165b8:	881b      	ldrh	r3, [r3, #0]
   165ba:	001a      	movs	r2, r3
   165bc:	687b      	ldr	r3, [r7, #4]
   165be:	685b      	ldr	r3, [r3, #4]
   165c0:	4935      	ldr	r1, [pc, #212]	; (16698 <http_client_callback+0x120>)
   165c2:	2001      	movs	r0, #1
   165c4:	4c31      	ldr	r4, [pc, #196]	; (1668c <http_client_callback+0x114>)
   165c6:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   165c8:	687b      	ldr	r3, [r7, #4]
   165ca:	881b      	ldrh	r3, [r3, #0]
   165cc:	2bc8      	cmp	r3, #200	; 0xc8
   165ce:	d10d      	bne.n	165ec <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   165d0:	687b      	ldr	r3, [r7, #4]
   165d2:	685a      	ldr	r2, [r3, #4]
   165d4:	4b31      	ldr	r3, [pc, #196]	; (1669c <http_client_callback+0x124>)
   165d6:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   165d8:	4b31      	ldr	r3, [pc, #196]	; (166a0 <http_client_callback+0x128>)
   165da:	2200      	movs	r2, #0
   165dc:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   165de:	687b      	ldr	r3, [r7, #4]
   165e0:	685a      	ldr	r2, [r3, #4]
   165e2:	2380      	movs	r3, #128	; 0x80
   165e4:	009b      	lsls	r3, r3, #2
   165e6:	429a      	cmp	r2, r3
   165e8:	d843      	bhi.n	16672 <http_client_callback+0xfa>
   165ea:	e003      	b.n	165f4 <http_client_callback+0x7c>
                add_state(CANCELED);
   165ec:	2020      	movs	r0, #32
   165ee:	4b29      	ldr	r3, [pc, #164]	; (16694 <http_client_callback+0x11c>)
   165f0:	4798      	blx	r3
                return;
   165f2:	e043      	b.n	1667c <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   165f4:	687b      	ldr	r3, [r7, #4]
   165f6:	689a      	ldr	r2, [r3, #8]
   165f8:	687b      	ldr	r3, [r7, #4]
   165fa:	685b      	ldr	r3, [r3, #4]
   165fc:	0019      	movs	r1, r3
   165fe:	0010      	movs	r0, r2
   16600:	4b28      	ldr	r3, [pc, #160]	; (166a4 <http_client_callback+0x12c>)
   16602:	4798      	blx	r3
                add_state(COMPLETED);
   16604:	2010      	movs	r0, #16
   16606:	4b23      	ldr	r3, [pc, #140]	; (16694 <http_client_callback+0x11c>)
   16608:	4798      	blx	r3
            }
            break;
   1660a:	e032      	b.n	16672 <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   1660c:	687b      	ldr	r3, [r7, #4]
   1660e:	685a      	ldr	r2, [r3, #4]
   16610:	687b      	ldr	r3, [r7, #4]
   16612:	681b      	ldr	r3, [r3, #0]
   16614:	0019      	movs	r1, r3
   16616:	0010      	movs	r0, r2
   16618:	4b22      	ldr	r3, [pc, #136]	; (166a4 <http_client_callback+0x12c>)
   1661a:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   1661c:	687b      	ldr	r3, [r7, #4]
   1661e:	7a1b      	ldrb	r3, [r3, #8]
   16620:	2b00      	cmp	r3, #0
   16622:	d028      	beq.n	16676 <http_client_callback+0xfe>
                add_state(COMPLETED);
   16624:	2010      	movs	r0, #16
   16626:	4b1b      	ldr	r3, [pc, #108]	; (16694 <http_client_callback+0x11c>)
   16628:	4798      	blx	r3
            }

            break;
   1662a:	e024      	b.n	16676 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   1662c:	687b      	ldr	r3, [r7, #4]
   1662e:	681a      	ldr	r2, [r3, #0]
   16630:	4b1d      	ldr	r3, [pc, #116]	; (166a8 <http_client_callback+0x130>)
   16632:	0019      	movs	r1, r3
   16634:	2001      	movs	r0, #1
   16636:	4b15      	ldr	r3, [pc, #84]	; (1668c <http_client_callback+0x114>)
   16638:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   1663a:	687b      	ldr	r3, [r7, #4]
   1663c:	681b      	ldr	r3, [r3, #0]
   1663e:	330b      	adds	r3, #11
   16640:	d11b      	bne.n	1667a <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   16642:	2008      	movs	r0, #8
   16644:	4b19      	ldr	r3, [pc, #100]	; (166ac <http_client_callback+0x134>)
   16646:	4798      	blx	r3
   16648:	1e03      	subs	r3, r0, #0
   1664a:	d006      	beq.n	1665a <http_client_callback+0xe2>
                    f_close(&file_object);
   1664c:	4b18      	ldr	r3, [pc, #96]	; (166b0 <http_client_callback+0x138>)
   1664e:	0018      	movs	r0, r3
   16650:	4b18      	ldr	r3, [pc, #96]	; (166b4 <http_client_callback+0x13c>)
   16652:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16654:	2008      	movs	r0, #8
   16656:	4b18      	ldr	r3, [pc, #96]	; (166b8 <http_client_callback+0x140>)
   16658:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   1665a:	2004      	movs	r0, #4
   1665c:	4b13      	ldr	r3, [pc, #76]	; (166ac <http_client_callback+0x134>)
   1665e:	4798      	blx	r3
   16660:	1e03      	subs	r3, r0, #0
   16662:	d002      	beq.n	1666a <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   16664:	2004      	movs	r0, #4
   16666:	4b14      	ldr	r3, [pc, #80]	; (166b8 <http_client_callback+0x140>)
   16668:	4798      	blx	r3
                }

                start_download();
   1666a:	4b14      	ldr	r3, [pc, #80]	; (166bc <http_client_callback+0x144>)
   1666c:	4798      	blx	r3
            }

            break;
   1666e:	46c0      	nop			; (mov r8, r8)
   16670:	e003      	b.n	1667a <http_client_callback+0x102>
            break;
   16672:	46c0      	nop			; (mov r8, r8)
   16674:	e002      	b.n	1667c <http_client_callback+0x104>
            break;
   16676:	46c0      	nop			; (mov r8, r8)
   16678:	e000      	b.n	1667c <http_client_callback+0x104>
            break;
   1667a:	46c0      	nop			; (mov r8, r8)
    }
}
   1667c:	46bd      	mov	sp, r7
   1667e:	b005      	add	sp, #20
   16680:	bd90      	pop	{r4, r7, pc}
   16682:	46c0      	nop			; (mov r8, r8)
   16684:	0003656c 	.word	0x0003656c
   16688:	00035f88 	.word	0x00035f88
   1668c:	0001dc41 	.word	0x0001dc41
   16690:	00035fc0 	.word	0x00035fc0
   16694:	00015f99 	.word	0x00015f99
   16698:	00035fec 	.word	0x00035fec
   1669c:	2000047c 	.word	0x2000047c
   166a0:	20000480 	.word	0x20000480
   166a4:	000163a5 	.word	0x000163a5
   166a8:	00036028 	.word	0x00036028
   166ac:	00015fc1 	.word	0x00015fc1
   166b0:	20000458 	.word	0x20000458
   166b4:	0002dcd9 	.word	0x0002dcd9
   166b8:	00015f65 	.word	0x00015f65
   166bc:	000162e9 	.word	0x000162e9

000166c0 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   166c0:	b580      	push	{r7, lr}
   166c2:	b082      	sub	sp, #8
   166c4:	af00      	add	r7, sp, #0
   166c6:	603a      	str	r2, [r7, #0]
   166c8:	1dfb      	adds	r3, r7, #7
   166ca:	1c02      	adds	r2, r0, #0
   166cc:	701a      	strb	r2, [r3, #0]
   166ce:	1dbb      	adds	r3, r7, #6
   166d0:	1c0a      	adds	r2, r1, #0
   166d2:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   166d4:	683a      	ldr	r2, [r7, #0]
   166d6:	1dbb      	adds	r3, r7, #6
   166d8:	7819      	ldrb	r1, [r3, #0]
   166da:	1dfb      	adds	r3, r7, #7
   166dc:	781b      	ldrb	r3, [r3, #0]
   166de:	b25b      	sxtb	r3, r3
   166e0:	0018      	movs	r0, r3
   166e2:	4b03      	ldr	r3, [pc, #12]	; (166f0 <socket_cb+0x30>)
   166e4:	4798      	blx	r3
}
   166e6:	46c0      	nop			; (mov r8, r8)
   166e8:	46bd      	mov	sp, r7
   166ea:	b002      	add	sp, #8
   166ec:	bd80      	pop	{r7, pc}
   166ee:	46c0      	nop			; (mov r8, r8)
   166f0:	0003063d 	.word	0x0003063d

000166f4 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   166f4:	b5b0      	push	{r4, r5, r7, lr}
   166f6:	b086      	sub	sp, #24
   166f8:	af04      	add	r7, sp, #16
   166fa:	6078      	str	r0, [r7, #4]
   166fc:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   166fe:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   16700:	22ff      	movs	r2, #255	; 0xff
   16702:	4013      	ands	r3, r2
   16704:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   16706:	683b      	ldr	r3, [r7, #0]
   16708:	0a1b      	lsrs	r3, r3, #8
   1670a:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   1670c:	23ff      	movs	r3, #255	; 0xff
   1670e:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   16710:	683a      	ldr	r2, [r7, #0]
   16712:	0c12      	lsrs	r2, r2, #16
   16714:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   16716:	22ff      	movs	r2, #255	; 0xff
   16718:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   1671a:	6839      	ldr	r1, [r7, #0]
   1671c:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   1671e:	000d      	movs	r5, r1
   16720:	6878      	ldr	r0, [r7, #4]
   16722:	4909      	ldr	r1, [pc, #36]	; (16748 <resolve_cb+0x54>)
   16724:	9502      	str	r5, [sp, #8]
   16726:	9201      	str	r2, [sp, #4]
   16728:	9300      	str	r3, [sp, #0]
   1672a:	0023      	movs	r3, r4
   1672c:	0002      	movs	r2, r0
   1672e:	2001      	movs	r0, #1
   16730:	4c06      	ldr	r4, [pc, #24]	; (1674c <resolve_cb+0x58>)
   16732:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16734:	683a      	ldr	r2, [r7, #0]
   16736:	687b      	ldr	r3, [r7, #4]
   16738:	0011      	movs	r1, r2
   1673a:	0018      	movs	r0, r3
   1673c:	4b04      	ldr	r3, [pc, #16]	; (16750 <resolve_cb+0x5c>)
   1673e:	4798      	blx	r3
}
   16740:	46c0      	nop			; (mov r8, r8)
   16742:	46bd      	mov	sp, r7
   16744:	b002      	add	sp, #8
   16746:	bdb0      	pop	{r4, r5, r7, pc}
   16748:	00036058 	.word	0x00036058
   1674c:	0001dc41 	.word	0x0001dc41
   16750:	000307a1 	.word	0x000307a1

00016754 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16754:	b590      	push	{r4, r7, lr}
   16756:	b087      	sub	sp, #28
   16758:	af02      	add	r7, sp, #8
   1675a:	0002      	movs	r2, r0
   1675c:	6039      	str	r1, [r7, #0]
   1675e:	1dfb      	adds	r3, r7, #7
   16760:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   16762:	1dfb      	adds	r3, r7, #7
   16764:	781b      	ldrb	r3, [r3, #0]
   16766:	2b2c      	cmp	r3, #44	; 0x2c
   16768:	d002      	beq.n	16770 <wifi_cb+0x1c>
   1676a:	2b32      	cmp	r3, #50	; 0x32
   1676c:	d03d      	beq.n	167ea <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   1676e:	e06f      	b.n	16850 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   16770:	683b      	ldr	r3, [r7, #0]
   16772:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16774:	68fb      	ldr	r3, [r7, #12]
   16776:	781b      	ldrb	r3, [r3, #0]
   16778:	2b01      	cmp	r3, #1
   1677a:	d107      	bne.n	1678c <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   1677c:	4b36      	ldr	r3, [pc, #216]	; (16858 <wifi_cb+0x104>)
   1677e:	0019      	movs	r1, r3
   16780:	2001      	movs	r0, #1
   16782:	4b36      	ldr	r3, [pc, #216]	; (1685c <wifi_cb+0x108>)
   16784:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   16786:	4b36      	ldr	r3, [pc, #216]	; (16860 <wifi_cb+0x10c>)
   16788:	4798      	blx	r3
            break;
   1678a:	e05e      	b.n	1684a <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   1678c:	68fb      	ldr	r3, [r7, #12]
   1678e:	781b      	ldrb	r3, [r3, #0]
   16790:	2b00      	cmp	r3, #0
   16792:	d15a      	bne.n	1684a <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16794:	4b33      	ldr	r3, [pc, #204]	; (16864 <wifi_cb+0x110>)
   16796:	0019      	movs	r1, r3
   16798:	2001      	movs	r0, #1
   1679a:	4b30      	ldr	r3, [pc, #192]	; (1685c <wifi_cb+0x108>)
   1679c:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   1679e:	2002      	movs	r0, #2
   167a0:	4b31      	ldr	r3, [pc, #196]	; (16868 <wifi_cb+0x114>)
   167a2:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   167a4:	2008      	movs	r0, #8
   167a6:	4b31      	ldr	r3, [pc, #196]	; (1686c <wifi_cb+0x118>)
   167a8:	4798      	blx	r3
   167aa:	1e03      	subs	r3, r0, #0
   167ac:	d006      	beq.n	167bc <wifi_cb+0x68>
                    f_close(&file_object);
   167ae:	4b30      	ldr	r3, [pc, #192]	; (16870 <wifi_cb+0x11c>)
   167b0:	0018      	movs	r0, r3
   167b2:	4b30      	ldr	r3, [pc, #192]	; (16874 <wifi_cb+0x120>)
   167b4:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   167b6:	2008      	movs	r0, #8
   167b8:	4b2b      	ldr	r3, [pc, #172]	; (16868 <wifi_cb+0x114>)
   167ba:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   167bc:	2004      	movs	r0, #4
   167be:	4b2b      	ldr	r3, [pc, #172]	; (1686c <wifi_cb+0x118>)
   167c0:	4798      	blx	r3
   167c2:	1e03      	subs	r3, r0, #0
   167c4:	d002      	beq.n	167cc <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   167c6:	2004      	movs	r0, #4
   167c8:	4b27      	ldr	r3, [pc, #156]	; (16868 <wifi_cb+0x114>)
   167ca:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   167cc:	4b2a      	ldr	r3, [pc, #168]	; (16878 <wifi_cb+0x124>)
   167ce:	2101      	movs	r1, #1
   167d0:	0018      	movs	r0, r3
   167d2:	4b2a      	ldr	r3, [pc, #168]	; (1687c <wifi_cb+0x128>)
   167d4:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   167d6:	4a2a      	ldr	r2, [pc, #168]	; (16880 <wifi_cb+0x12c>)
   167d8:	482a      	ldr	r0, [pc, #168]	; (16884 <wifi_cb+0x130>)
   167da:	23ff      	movs	r3, #255	; 0xff
   167dc:	9300      	str	r3, [sp, #0]
   167de:	0013      	movs	r3, r2
   167e0:	2202      	movs	r2, #2
   167e2:	210b      	movs	r1, #11
   167e4:	4c28      	ldr	r4, [pc, #160]	; (16888 <wifi_cb+0x134>)
   167e6:	47a0      	blx	r4
            break;
   167e8:	e02f      	b.n	1684a <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   167ea:	683b      	ldr	r3, [r7, #0]
   167ec:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   167ee:	68bb      	ldr	r3, [r7, #8]
   167f0:	781b      	ldrb	r3, [r3, #0]
   167f2:	0018      	movs	r0, r3
   167f4:	68bb      	ldr	r3, [r7, #8]
   167f6:	3301      	adds	r3, #1
   167f8:	781b      	ldrb	r3, [r3, #0]
   167fa:	001c      	movs	r4, r3
   167fc:	68bb      	ldr	r3, [r7, #8]
   167fe:	3302      	adds	r3, #2
   16800:	781b      	ldrb	r3, [r3, #0]
   16802:	001a      	movs	r2, r3
   16804:	68bb      	ldr	r3, [r7, #8]
   16806:	3303      	adds	r3, #3
   16808:	781b      	ldrb	r3, [r3, #0]
   1680a:	4920      	ldr	r1, [pc, #128]	; (1688c <wifi_cb+0x138>)
   1680c:	9301      	str	r3, [sp, #4]
   1680e:	9200      	str	r2, [sp, #0]
   16810:	0023      	movs	r3, r4
   16812:	0002      	movs	r2, r0
   16814:	2001      	movs	r0, #1
   16816:	4c11      	ldr	r4, [pc, #68]	; (1685c <wifi_cb+0x108>)
   16818:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   1681a:	2002      	movs	r0, #2
   1681c:	4b1c      	ldr	r3, [pc, #112]	; (16890 <wifi_cb+0x13c>)
   1681e:	4798      	blx	r3
            if (do_download_flag == 1) {
   16820:	4b1c      	ldr	r3, [pc, #112]	; (16894 <wifi_cb+0x140>)
   16822:	781b      	ldrb	r3, [r3, #0]
   16824:	2b01      	cmp	r3, #1
   16826:	d102      	bne.n	1682e <wifi_cb+0xda>
                start_download();
   16828:	4b1b      	ldr	r3, [pc, #108]	; (16898 <wifi_cb+0x144>)
   1682a:	4798      	blx	r3
        } break;
   1682c:	e00f      	b.n	1684e <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   1682e:	4a1b      	ldr	r2, [pc, #108]	; (1689c <wifi_cb+0x148>)
   16830:	4b11      	ldr	r3, [pc, #68]	; (16878 <wifi_cb+0x124>)
   16832:	0011      	movs	r1, r2
   16834:	0018      	movs	r0, r3
   16836:	4b1a      	ldr	r3, [pc, #104]	; (168a0 <wifi_cb+0x14c>)
   16838:	4798      	blx	r3
   1683a:	1e03      	subs	r3, r0, #0
   1683c:	d007      	beq.n	1684e <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   1683e:	4b19      	ldr	r3, [pc, #100]	; (168a4 <wifi_cb+0x150>)
   16840:	0019      	movs	r1, r3
   16842:	2001      	movs	r0, #1
   16844:	4b05      	ldr	r3, [pc, #20]	; (1685c <wifi_cb+0x108>)
   16846:	4798      	blx	r3
        } break;
   16848:	e001      	b.n	1684e <wifi_cb+0xfa>
            break;
   1684a:	46c0      	nop			; (mov r8, r8)
   1684c:	e000      	b.n	16850 <wifi_cb+0xfc>
        } break;
   1684e:	46c0      	nop			; (mov r8, r8)
    }
}
   16850:	46c0      	nop			; (mov r8, r8)
   16852:	46bd      	mov	sp, r7
   16854:	b005      	add	sp, #20
   16856:	bd90      	pop	{r4, r7, pc}
   16858:	00036088 	.word	0x00036088
   1685c:	0001dc41 	.word	0x0001dc41
   16860:	00021e65 	.word	0x00021e65
   16864:	000360a8 	.word	0x000360a8
   16868:	00015f65 	.word	0x00015f65
   1686c:	00015fc1 	.word	0x00015fc1
   16870:	20000458 	.word	0x20000458
   16874:	0002dcd9 	.word	0x0002dcd9
   16878:	20000484 	.word	0x20000484
   1687c:	0002f2e9 	.word	0x0002f2e9
   16880:	000360cc 	.word	0x000360cc
   16884:	000360d8 	.word	0x000360d8
   16888:	00021991 	.word	0x00021991
   1688c:	000360e4 	.word	0x000360e4
   16890:	00015f99 	.word	0x00015f99
   16894:	20000454 	.word	0x20000454
   16898:	000162e9 	.word	0x000162e9
   1689c:	00035d00 	.word	0x00035d00
   168a0:	0002f1b5 	.word	0x0002f1b5
   168a4:	0003610c 	.word	0x0003610c

000168a8 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   168a8:	b580      	push	{r7, lr}
   168aa:	b082      	sub	sp, #8
   168ac:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   168ae:	1d3b      	adds	r3, r7, #4
   168b0:	0018      	movs	r0, r3
   168b2:	4b08      	ldr	r3, [pc, #32]	; (168d4 <configure_timer+0x2c>)
   168b4:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   168b6:	1d3a      	adds	r2, r7, #4
   168b8:	4b07      	ldr	r3, [pc, #28]	; (168d8 <configure_timer+0x30>)
   168ba:	0011      	movs	r1, r2
   168bc:	0018      	movs	r0, r3
   168be:	4b07      	ldr	r3, [pc, #28]	; (168dc <configure_timer+0x34>)
   168c0:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   168c2:	4b05      	ldr	r3, [pc, #20]	; (168d8 <configure_timer+0x30>)
   168c4:	0018      	movs	r0, r3
   168c6:	4b06      	ldr	r3, [pc, #24]	; (168e0 <configure_timer+0x38>)
   168c8:	4798      	blx	r3
}
   168ca:	46c0      	nop			; (mov r8, r8)
   168cc:	46bd      	mov	sp, r7
   168ce:	b002      	add	sp, #8
   168d0:	bd80      	pop	{r7, pc}
   168d2:	46c0      	nop			; (mov r8, r8)
   168d4:	00031dd1 	.word	0x00031dd1
   168d8:	2000442c 	.word	0x2000442c
   168dc:	00031df5 	.word	0x00031df5
   168e0:	00031ee1 	.word	0x00031ee1

000168e4 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   168e4:	b580      	push	{r7, lr}
   168e6:	b088      	sub	sp, #32
   168e8:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   168ea:	003b      	movs	r3, r7
   168ec:	0018      	movs	r0, r3
   168ee:	4b16      	ldr	r3, [pc, #88]	; (16948 <configure_http_client+0x64>)
   168f0:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   168f2:	003b      	movs	r3, r7
   168f4:	2280      	movs	r2, #128	; 0x80
   168f6:	0092      	lsls	r2, r2, #2
   168f8:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   168fa:	003b      	movs	r3, r7
   168fc:	4a13      	ldr	r2, [pc, #76]	; (1694c <configure_http_client+0x68>)
   168fe:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   16900:	003b      	movs	r3, r7
   16902:	22bc      	movs	r2, #188	; 0xbc
   16904:	32ff      	adds	r2, #255	; 0xff
   16906:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   16908:	003b      	movs	r3, r7
   1690a:	2201      	movs	r2, #1
   1690c:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1690e:	003a      	movs	r2, r7
   16910:	4b0f      	ldr	r3, [pc, #60]	; (16950 <configure_http_client+0x6c>)
   16912:	0011      	movs	r1, r2
   16914:	0018      	movs	r0, r3
   16916:	4b0f      	ldr	r3, [pc, #60]	; (16954 <configure_http_client+0x70>)
   16918:	4798      	blx	r3
   1691a:	0003      	movs	r3, r0
   1691c:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   1691e:	69fb      	ldr	r3, [r7, #28]
   16920:	2b00      	cmp	r3, #0
   16922:	da06      	bge.n	16932 <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16924:	69fa      	ldr	r2, [r7, #28]
   16926:	4b0c      	ldr	r3, [pc, #48]	; (16958 <configure_http_client+0x74>)
   16928:	0019      	movs	r1, r3
   1692a:	2001      	movs	r0, #1
   1692c:	4b0b      	ldr	r3, [pc, #44]	; (1695c <configure_http_client+0x78>)
   1692e:	4798      	blx	r3
        while (1) {
   16930:	e7fe      	b.n	16930 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   16932:	4a0b      	ldr	r2, [pc, #44]	; (16960 <configure_http_client+0x7c>)
   16934:	4b06      	ldr	r3, [pc, #24]	; (16950 <configure_http_client+0x6c>)
   16936:	0011      	movs	r1, r2
   16938:	0018      	movs	r0, r3
   1693a:	4b0a      	ldr	r3, [pc, #40]	; (16964 <configure_http_client+0x80>)
   1693c:	4798      	blx	r3
}
   1693e:	46c0      	nop			; (mov r8, r8)
   16940:	46bd      	mov	sp, r7
   16942:	b008      	add	sp, #32
   16944:	bd80      	pop	{r7, pc}
   16946:	46c0      	nop			; (mov r8, r8)
   16948:	00030465 	.word	0x00030465
   1694c:	2000442c 	.word	0x2000442c
   16950:	20004484 	.word	0x20004484
   16954:	000304b1 	.word	0x000304b1
   16958:	0003623c 	.word	0x0003623c
   1695c:	0001dc41 	.word	0x0001dc41
   16960:	00016579 	.word	0x00016579
   16964:	0003059d 	.word	0x0003059d

00016968 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   16968:	b580      	push	{r7, lr}
   1696a:	b082      	sub	sp, #8
   1696c:	af00      	add	r7, sp, #0
   1696e:	603a      	str	r2, [r7, #0]
   16970:	1dfb      	adds	r3, r7, #7
   16972:	1c02      	adds	r2, r0, #0
   16974:	701a      	strb	r2, [r3, #0]
   16976:	1dbb      	adds	r3, r7, #6
   16978:	1c0a      	adds	r2, r1, #0
   1697a:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   1697c:	683a      	ldr	r2, [r7, #0]
   1697e:	1dbb      	adds	r3, r7, #6
   16980:	7819      	ldrb	r1, [r3, #0]
   16982:	1dfb      	adds	r3, r7, #7
   16984:	781b      	ldrb	r3, [r3, #0]
   16986:	b25b      	sxtb	r3, r3
   16988:	0018      	movs	r0, r3
   1698a:	4b03      	ldr	r3, [pc, #12]	; (16998 <socket_event_handler+0x30>)
   1698c:	4798      	blx	r3
}
   1698e:	46c0      	nop			; (mov r8, r8)
   16990:	46bd      	mov	sp, r7
   16992:	b002      	add	sp, #8
   16994:	bd80      	pop	{r7, pc}
   16996:	46c0      	nop			; (mov r8, r8)
   16998:	0002f15d 	.word	0x0002f15d

0001699c <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   1699c:	b580      	push	{r7, lr}
   1699e:	b082      	sub	sp, #8
   169a0:	af00      	add	r7, sp, #0
   169a2:	6078      	str	r0, [r7, #4]
   169a4:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   169a6:	683a      	ldr	r2, [r7, #0]
   169a8:	687b      	ldr	r3, [r7, #4]
   169aa:	0011      	movs	r1, r2
   169ac:	0018      	movs	r0, r3
   169ae:	4b03      	ldr	r3, [pc, #12]	; (169bc <socket_resolve_handler+0x20>)
   169b0:	4798      	blx	r3
}
   169b2:	46c0      	nop			; (mov r8, r8)
   169b4:	46bd      	mov	sp, r7
   169b6:	b002      	add	sp, #8
   169b8:	bd80      	pop	{r7, pc}
   169ba:	46c0      	nop			; (mov r8, r8)
   169bc:	0002f191 	.word	0x0002f191

000169c0 <SubscribeHandlerShipSizeTopic>:
 * \param[in] msgData Data to be received.
 */


void SubscribeHandlerShipSizeTopic(MessageData *msgData)
{
   169c0:	b590      	push	{r4, r7, lr}
   169c2:	b087      	sub	sp, #28
   169c4:	af00      	add	r7, sp, #0
   169c6:	6078      	str	r0, [r7, #4]
    // Parse input. The start string must be '['
    if (strncmp(msgData->message->payload, "[", 1) == 0) {
   169c8:	687b      	ldr	r3, [r7, #4]
   169ca:	681b      	ldr	r3, [r3, #0]
   169cc:	689b      	ldr	r3, [r3, #8]
   169ce:	781a      	ldrb	r2, [r3, #0]
   169d0:	4b36      	ldr	r3, [pc, #216]	; (16aac <SubscribeHandlerShipSizeTopic+0xec>)
   169d2:	781b      	ldrb	r3, [r3, #0]
   169d4:	429a      	cmp	r2, r3
   169d6:	d165      	bne.n	16aa4 <SubscribeHandlerShipSizeTopic+0xe4>
        LogMessage(LOG_DEBUG_LVL, "\r\nship size message received!\r\n");
   169d8:	4b35      	ldr	r3, [pc, #212]	; (16ab0 <SubscribeHandlerShipSizeTopic+0xf0>)
   169da:	0019      	movs	r1, r3
   169dc:	2001      	movs	r0, #1
   169de:	4b35      	ldr	r3, [pc, #212]	; (16ab4 <SubscribeHandlerShipSizeTopic+0xf4>)
   169e0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   169e2:	687b      	ldr	r3, [r7, #4]
   169e4:	685b      	ldr	r3, [r3, #4]
   169e6:	685a      	ldr	r2, [r3, #4]
   169e8:	687b      	ldr	r3, [r7, #4]
   169ea:	685b      	ldr	r3, [r3, #4]
   169ec:	689b      	ldr	r3, [r3, #8]
   169ee:	4932      	ldr	r1, [pc, #200]	; (16ab8 <SubscribeHandlerShipSizeTopic+0xf8>)
   169f0:	2001      	movs	r0, #1
   169f2:	4c30      	ldr	r4, [pc, #192]	; (16ab4 <SubscribeHandlerShipSizeTopic+0xf4>)
   169f4:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "\r\n%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   169f6:	687b      	ldr	r3, [r7, #4]
   169f8:	681b      	ldr	r3, [r3, #0]
   169fa:	68da      	ldr	r2, [r3, #12]
   169fc:	687b      	ldr	r3, [r7, #4]
   169fe:	681b      	ldr	r3, [r3, #0]
   16a00:	689b      	ldr	r3, [r3, #8]
   16a02:	492e      	ldr	r1, [pc, #184]	; (16abc <SubscribeHandlerShipSizeTopic+0xfc>)
   16a04:	2001      	movs	r0, #1
   16a06:	4c2b      	ldr	r4, [pc, #172]	; (16ab4 <SubscribeHandlerShipSizeTopic+0xf4>)
   16a08:	47a0      	blx	r4

		if (strncmp(msgData->message->payload, "[", 1) != 0) {
   16a0a:	687b      	ldr	r3, [r7, #4]
   16a0c:	681b      	ldr	r3, [r3, #0]
   16a0e:	689b      	ldr	r3, [r3, #8]
   16a10:	781a      	ldrb	r2, [r3, #0]
   16a12:	4b26      	ldr	r3, [pc, #152]	; (16aac <SubscribeHandlerShipSizeTopic+0xec>)
   16a14:	781b      	ldrb	r3, [r3, #0]
   16a16:	429a      	cmp	r2, r3
   16a18:	d143      	bne.n	16aa2 <SubscribeHandlerShipSizeTopic+0xe2>
			return;
		}
		
		uint8_t ship_num = (msgData->message->payloadlen - 1) / 2;
   16a1a:	687b      	ldr	r3, [r7, #4]
   16a1c:	681b      	ldr	r3, [r3, #0]
   16a1e:	68db      	ldr	r3, [r3, #12]
   16a20:	3b01      	subs	r3, #1
   16a22:	085a      	lsrs	r2, r3, #1
   16a24:	2313      	movs	r3, #19
   16a26:	18fb      	adds	r3, r7, r3
   16a28:	701a      	strb	r2, [r3, #0]
		uint8_t ship_arr[MAX_SHIP];
		
		if(ship_num > MAX_SHIP){
   16a2a:	2313      	movs	r3, #19
   16a2c:	18fb      	adds	r3, r7, r3
   16a2e:	781b      	ldrb	r3, [r3, #0]
   16a30:	2b05      	cmp	r3, #5
   16a32:	d905      	bls.n	16a40 <SubscribeHandlerShipSizeTopic+0x80>
			LogMessage(LOG_INFO_LVL, "\r\n too many ship!!\r\n");
   16a34:	4b22      	ldr	r3, [pc, #136]	; (16ac0 <SubscribeHandlerShipSizeTopic+0x100>)
   16a36:	0019      	movs	r1, r3
   16a38:	2000      	movs	r0, #0
   16a3a:	4b1e      	ldr	r3, [pc, #120]	; (16ab4 <SubscribeHandlerShipSizeTopic+0xf4>)
   16a3c:	4798      	blx	r3
			return;
   16a3e:	e031      	b.n	16aa4 <SubscribeHandlerShipSizeTopic+0xe4>
		}

		char *p = (char *)&msgData->message->payload[1];
   16a40:	687b      	ldr	r3, [r7, #4]
   16a42:	681b      	ldr	r3, [r3, #0]
   16a44:	689b      	ldr	r3, [r3, #8]
   16a46:	3301      	adds	r3, #1
   16a48:	60bb      	str	r3, [r7, #8]
		int nb = 0;
   16a4a:	2300      	movs	r3, #0
   16a4c:	617b      	str	r3, [r7, #20]
		while (nb < MAX_SHIP && *p) {
   16a4e:	e015      	b.n	16a7c <SubscribeHandlerShipSizeTopic+0xbc>
			ship_arr[nb++] = strtol(p, &p, 10);
   16a50:	697c      	ldr	r4, [r7, #20]
   16a52:	1c63      	adds	r3, r4, #1
   16a54:	617b      	str	r3, [r7, #20]
   16a56:	68bb      	ldr	r3, [r7, #8]
   16a58:	2208      	movs	r2, #8
   16a5a:	18b9      	adds	r1, r7, r2
   16a5c:	220a      	movs	r2, #10
   16a5e:	0018      	movs	r0, r3
   16a60:	4b18      	ldr	r3, [pc, #96]	; (16ac4 <SubscribeHandlerShipSizeTopic+0x104>)
   16a62:	4798      	blx	r3
   16a64:	0003      	movs	r3, r0
   16a66:	b2da      	uxtb	r2, r3
   16a68:	230c      	movs	r3, #12
   16a6a:	18fb      	adds	r3, r7, r3
   16a6c:	551a      	strb	r2, [r3, r4]
			if (*p != ',') break;
   16a6e:	68bb      	ldr	r3, [r7, #8]
   16a70:	781b      	ldrb	r3, [r3, #0]
   16a72:	2b2c      	cmp	r3, #44	; 0x2c
   16a74:	d10a      	bne.n	16a8c <SubscribeHandlerShipSizeTopic+0xcc>
			p++; /* skip, */
   16a76:	68bb      	ldr	r3, [r7, #8]
   16a78:	3301      	adds	r3, #1
   16a7a:	60bb      	str	r3, [r7, #8]
		while (nb < MAX_SHIP && *p) {
   16a7c:	697b      	ldr	r3, [r7, #20]
   16a7e:	2b04      	cmp	r3, #4
   16a80:	dc05      	bgt.n	16a8e <SubscribeHandlerShipSizeTopic+0xce>
   16a82:	68bb      	ldr	r3, [r7, #8]
   16a84:	781b      	ldrb	r3, [r3, #0]
   16a86:	2b00      	cmp	r3, #0
   16a88:	d1e2      	bne.n	16a50 <SubscribeHandlerShipSizeTopic+0x90>
   16a8a:	e000      	b.n	16a8e <SubscribeHandlerShipSizeTopic+0xce>
			if (*p != ',') break;
   16a8c:	46c0      	nop			; (mov r8, r8)
		}
		
		//LogMessage(LOG_DEBUG_LVL, "\r\n ship size %d %d %d\r\n", ship_arr[0], ship_arr[1], ship_arr[2]);
			
		ControlSetGame(ship_arr, ship_num);
   16a8e:	2313      	movs	r3, #19
   16a90:	18fb      	adds	r3, r7, r3
   16a92:	781a      	ldrb	r2, [r3, #0]
   16a94:	230c      	movs	r3, #12
   16a96:	18fb      	adds	r3, r7, r3
   16a98:	0011      	movs	r1, r2
   16a9a:	0018      	movs	r0, r3
   16a9c:	4b0a      	ldr	r3, [pc, #40]	; (16ac8 <SubscribeHandlerShipSizeTopic+0x108>)
   16a9e:	4798      	blx	r3
   16aa0:	e000      	b.n	16aa4 <SubscribeHandlerShipSizeTopic+0xe4>
			return;
   16aa2:	46c0      	nop			; (mov r8, r8)
		
	}
		// send data to control thread and start/reset the ui and the game 
}
   16aa4:	46bd      	mov	sp, r7
   16aa6:	b007      	add	sp, #28
   16aa8:	bd90      	pop	{r4, r7, pc}
   16aaa:	46c0      	nop			; (mov r8, r8)
   16aac:	00036284 	.word	0x00036284
   16ab0:	00036288 	.word	0x00036288
   16ab4:	0001dc41 	.word	0x0001dc41
   16ab8:	000362a8 	.word	0x000362a8
   16abc:	000362b0 	.word	0x000362b0
   16ac0:	000362b8 	.word	0x000362b8
   16ac4:	000348e1 	.word	0x000348e1
   16ac8:	00013845 	.word	0x00013845

00016acc <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   16acc:	b590      	push	{r4, r7, lr}
   16ace:	b08b      	sub	sp, #44	; 0x2c
   16ad0:	af06      	add	r7, sp, #24
   16ad2:	60f8      	str	r0, [r7, #12]
   16ad4:	60b9      	str	r1, [r7, #8]
   16ad6:	607a      	str	r2, [r7, #4]
    switch (type) {
   16ad8:	68bb      	ldr	r3, [r7, #8]
   16ada:	2b01      	cmp	r3, #1
   16adc:	d03b      	beq.n	16b56 <mqtt_callback+0x8a>
   16ade:	2b05      	cmp	r3, #5
   16ae0:	d052      	beq.n	16b88 <mqtt_callback+0xbc>
   16ae2:	2b00      	cmp	r3, #0
   16ae4:	d000      	beq.n	16ae8 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   16ae6:	e055      	b.n	16b94 <mqtt_callback+0xc8>
            if (data->sock_connected.result >= 0) {
   16ae8:	687b      	ldr	r3, [r7, #4]
   16aea:	681b      	ldr	r3, [r3, #0]
   16aec:	2b00      	cmp	r3, #0
   16aee:	db25      	blt.n	16b3c <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   16af0:	4b2a      	ldr	r3, [pc, #168]	; (16b9c <mqtt_callback+0xd0>)
   16af2:	0019      	movs	r1, r3
   16af4:	2001      	movs	r0, #1
   16af6:	4b2a      	ldr	r3, [pc, #168]	; (16ba0 <mqtt_callback+0xd4>)
   16af8:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   16afa:	492a      	ldr	r1, [pc, #168]	; (16ba4 <mqtt_callback+0xd8>)
   16afc:	4a2a      	ldr	r2, [pc, #168]	; (16ba8 <mqtt_callback+0xdc>)
   16afe:	68f8      	ldr	r0, [r7, #12]
   16b00:	2300      	movs	r3, #0
   16b02:	9305      	str	r3, [sp, #20]
   16b04:	2300      	movs	r3, #0
   16b06:	9304      	str	r3, [sp, #16]
   16b08:	2300      	movs	r3, #0
   16b0a:	9303      	str	r3, [sp, #12]
   16b0c:	2300      	movs	r3, #0
   16b0e:	9302      	str	r3, [sp, #8]
   16b10:	2300      	movs	r3, #0
   16b12:	9301      	str	r3, [sp, #4]
   16b14:	4b24      	ldr	r3, [pc, #144]	; (16ba8 <mqtt_callback+0xdc>)
   16b16:	9300      	str	r3, [sp, #0]
   16b18:	000b      	movs	r3, r1
   16b1a:	2101      	movs	r1, #1
   16b1c:	4c23      	ldr	r4, [pc, #140]	; (16bac <mqtt_callback+0xe0>)
   16b1e:	47a0      	blx	r4
   16b20:	1e03      	subs	r3, r0, #0
   16b22:	d005      	beq.n	16b30 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   16b24:	4b22      	ldr	r3, [pc, #136]	; (16bb0 <mqtt_callback+0xe4>)
   16b26:	0019      	movs	r1, r3
   16b28:	2001      	movs	r0, #1
   16b2a:	4b1d      	ldr	r3, [pc, #116]	; (16ba0 <mqtt_callback+0xd4>)
   16b2c:	4798      	blx	r3
        } break;
   16b2e:	e031      	b.n	16b94 <mqtt_callback+0xc8>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   16b30:	4b20      	ldr	r3, [pc, #128]	; (16bb4 <mqtt_callback+0xe8>)
   16b32:	0019      	movs	r1, r3
   16b34:	2001      	movs	r0, #1
   16b36:	4b1a      	ldr	r3, [pc, #104]	; (16ba0 <mqtt_callback+0xd4>)
   16b38:	4798      	blx	r3
        } break;
   16b3a:	e02b      	b.n	16b94 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16b3c:	4a1e      	ldr	r2, [pc, #120]	; (16bb8 <mqtt_callback+0xec>)
   16b3e:	4b1f      	ldr	r3, [pc, #124]	; (16bbc <mqtt_callback+0xf0>)
   16b40:	0019      	movs	r1, r3
   16b42:	2001      	movs	r0, #1
   16b44:	4b16      	ldr	r3, [pc, #88]	; (16ba0 <mqtt_callback+0xd4>)
   16b46:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16b48:	4a1b      	ldr	r2, [pc, #108]	; (16bb8 <mqtt_callback+0xec>)
   16b4a:	68fb      	ldr	r3, [r7, #12]
   16b4c:	0011      	movs	r1, r2
   16b4e:	0018      	movs	r0, r3
   16b50:	4b1b      	ldr	r3, [pc, #108]	; (16bc0 <mqtt_callback+0xf4>)
   16b52:	4798      	blx	r3
        } break;
   16b54:	e01e      	b.n	16b94 <mqtt_callback+0xc8>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   16b56:	687b      	ldr	r3, [r7, #4]
   16b58:	781b      	ldrb	r3, [r3, #0]
   16b5a:	2b00      	cmp	r3, #0
   16b5c:	d10b      	bne.n	16b76 <mqtt_callback+0xaa>
                mqtt_subscribe(module_inst, GAME_SHIPSIZE_TOPIC_SUB, 2, SubscribeHandlerShipSizeTopic);
   16b5e:	4b19      	ldr	r3, [pc, #100]	; (16bc4 <mqtt_callback+0xf8>)
   16b60:	4919      	ldr	r1, [pc, #100]	; (16bc8 <mqtt_callback+0xfc>)
   16b62:	68f8      	ldr	r0, [r7, #12]
   16b64:	2202      	movs	r2, #2
   16b66:	4c19      	ldr	r4, [pc, #100]	; (16bcc <mqtt_callback+0x100>)
   16b68:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   16b6a:	4b19      	ldr	r3, [pc, #100]	; (16bd0 <mqtt_callback+0x104>)
   16b6c:	0019      	movs	r1, r3
   16b6e:	2001      	movs	r0, #1
   16b70:	4b0b      	ldr	r3, [pc, #44]	; (16ba0 <mqtt_callback+0xd4>)
   16b72:	4798      	blx	r3
            break;
   16b74:	e00e      	b.n	16b94 <mqtt_callback+0xc8>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   16b76:	687b      	ldr	r3, [r7, #4]
   16b78:	781b      	ldrb	r3, [r3, #0]
   16b7a:	001a      	movs	r2, r3
   16b7c:	4b15      	ldr	r3, [pc, #84]	; (16bd4 <mqtt_callback+0x108>)
   16b7e:	0019      	movs	r1, r3
   16b80:	2001      	movs	r0, #1
   16b82:	4b07      	ldr	r3, [pc, #28]	; (16ba0 <mqtt_callback+0xd4>)
   16b84:	4798      	blx	r3
            break;
   16b86:	e005      	b.n	16b94 <mqtt_callback+0xc8>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   16b88:	4b13      	ldr	r3, [pc, #76]	; (16bd8 <mqtt_callback+0x10c>)
   16b8a:	0019      	movs	r1, r3
   16b8c:	2001      	movs	r0, #1
   16b8e:	4b04      	ldr	r3, [pc, #16]	; (16ba0 <mqtt_callback+0xd4>)
   16b90:	4798      	blx	r3
            break;
   16b92:	46c0      	nop			; (mov r8, r8)
}
   16b94:	46c0      	nop			; (mov r8, r8)
   16b96:	46bd      	mov	sp, r7
   16b98:	b005      	add	sp, #20
   16b9a:	bd90      	pop	{r4, r7, pc}
   16b9c:	000362d0 	.word	0x000362d0
   16ba0:	0001dc41 	.word	0x0001dc41
   16ba4:	000362ec 	.word	0x000362ec
   16ba8:	000362fc 	.word	0x000362fc
   16bac:	0002f1fd 	.word	0x0002f1fd
   16bb0:	00036308 	.word	0x00036308
   16bb4:	00036330 	.word	0x00036330
   16bb8:	00035d00 	.word	0x00035d00
   16bbc:	0003634c 	.word	0x0003634c
   16bc0:	0002f1b5 	.word	0x0002f1b5
   16bc4:	000169c1 	.word	0x000169c1
   16bc8:	00036384 	.word	0x00036384
   16bcc:	0002f39d 	.word	0x0002f39d
   16bd0:	00036398 	.word	0x00036398
   16bd4:	000363ac 	.word	0x000363ac
   16bd8:	000363e0 	.word	0x000363e0

00016bdc <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   16bdc:	b580      	push	{r7, lr}
   16bde:	b088      	sub	sp, #32
   16be0:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   16be2:	1d3b      	adds	r3, r7, #4
   16be4:	0018      	movs	r0, r3
   16be6:	4b1f      	ldr	r3, [pc, #124]	; (16c64 <configure_mqtt+0x88>)
   16be8:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   16bea:	1d3b      	adds	r3, r7, #4
   16bec:	4a1e      	ldr	r2, [pc, #120]	; (16c68 <configure_mqtt+0x8c>)
   16bee:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16bf0:	1d3b      	adds	r3, r7, #4
   16bf2:	2280      	movs	r2, #128	; 0x80
   16bf4:	0092      	lsls	r2, r2, #2
   16bf6:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   16bf8:	1d3b      	adds	r3, r7, #4
   16bfa:	4a1c      	ldr	r2, [pc, #112]	; (16c6c <configure_mqtt+0x90>)
   16bfc:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   16bfe:	1d3b      	adds	r3, r7, #4
   16c00:	2280      	movs	r2, #128	; 0x80
   16c02:	0092      	lsls	r2, r2, #2
   16c04:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   16c06:	1d3b      	adds	r3, r7, #4
   16c08:	4a19      	ldr	r2, [pc, #100]	; (16c70 <configure_mqtt+0x94>)
   16c0a:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   16c0c:	1d3b      	adds	r3, r7, #4
   16c0e:	4a19      	ldr	r2, [pc, #100]	; (16c74 <configure_mqtt+0x98>)
   16c10:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   16c12:	1d3a      	adds	r2, r7, #4
   16c14:	4b18      	ldr	r3, [pc, #96]	; (16c78 <configure_mqtt+0x9c>)
   16c16:	0011      	movs	r1, r2
   16c18:	0018      	movs	r0, r3
   16c1a:	4b18      	ldr	r3, [pc, #96]	; (16c7c <configure_mqtt+0xa0>)
   16c1c:	4798      	blx	r3
   16c1e:	0003      	movs	r3, r0
   16c20:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16c22:	69fb      	ldr	r3, [r7, #28]
   16c24:	2b00      	cmp	r3, #0
   16c26:	da06      	bge.n	16c36 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   16c28:	69fa      	ldr	r2, [r7, #28]
   16c2a:	4b15      	ldr	r3, [pc, #84]	; (16c80 <configure_mqtt+0xa4>)
   16c2c:	0019      	movs	r1, r3
   16c2e:	2001      	movs	r0, #1
   16c30:	4b14      	ldr	r3, [pc, #80]	; (16c84 <configure_mqtt+0xa8>)
   16c32:	4798      	blx	r3
        while (1) {
   16c34:	e7fe      	b.n	16c34 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   16c36:	4a14      	ldr	r2, [pc, #80]	; (16c88 <configure_mqtt+0xac>)
   16c38:	4b0f      	ldr	r3, [pc, #60]	; (16c78 <configure_mqtt+0x9c>)
   16c3a:	0011      	movs	r1, r2
   16c3c:	0018      	movs	r0, r3
   16c3e:	4b13      	ldr	r3, [pc, #76]	; (16c8c <configure_mqtt+0xb0>)
   16c40:	4798      	blx	r3
   16c42:	0003      	movs	r3, r0
   16c44:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   16c46:	69fb      	ldr	r3, [r7, #28]
   16c48:	2b00      	cmp	r3, #0
   16c4a:	da06      	bge.n	16c5a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   16c4c:	69fa      	ldr	r2, [r7, #28]
   16c4e:	4b10      	ldr	r3, [pc, #64]	; (16c90 <configure_mqtt+0xb4>)
   16c50:	0019      	movs	r1, r3
   16c52:	2001      	movs	r0, #1
   16c54:	4b0b      	ldr	r3, [pc, #44]	; (16c84 <configure_mqtt+0xa8>)
   16c56:	4798      	blx	r3
        while (1) {
   16c58:	e7fe      	b.n	16c58 <configure_mqtt+0x7c>
        }
    }
}
   16c5a:	46c0      	nop			; (mov r8, r8)
   16c5c:	46bd      	mov	sp, r7
   16c5e:	b008      	add	sp, #32
   16c60:	bd80      	pop	{r7, pc}
   16c62:	46c0      	nop			; (mov r8, r8)
   16c64:	0002f0f5 	.word	0x0002f0f5
   16c68:	200004bc 	.word	0x200004bc
   16c6c:	200006bc 	.word	0x200006bc
   16c70:	0000075b 	.word	0x0000075b
   16c74:	00001770 	.word	0x00001770
   16c78:	20000484 	.word	0x20000484
   16c7c:	0002f045 	.word	0x0002f045
   16c80:	000363f4 	.word	0x000363f4
   16c84:	0001dc41 	.word	0x0001dc41
   16c88:	00016acd 	.word	0x00016acd
   16c8c:	0002f135 	.word	0x0002f135
   16c90:	00036428 	.word	0x00036428

00016c94 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   16c94:	b580      	push	{r7, lr}
   16c96:	b084      	sub	sp, #16
   16c98:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   16c9a:	1d3b      	adds	r3, r7, #4
   16c9c:	0018      	movs	r0, r3
   16c9e:	4b0b      	ldr	r3, [pc, #44]	; (16ccc <configure_extint_channel+0x38>)
   16ca0:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   16ca2:	1d3b      	adds	r3, r7, #4
   16ca4:	2237      	movs	r2, #55	; 0x37
   16ca6:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   16ca8:	1d3b      	adds	r3, r7, #4
   16caa:	2200      	movs	r2, #0
   16cac:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   16cae:	1d3b      	adds	r3, r7, #4
   16cb0:	2201      	movs	r2, #1
   16cb2:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   16cb4:	1d3b      	adds	r3, r7, #4
   16cb6:	2202      	movs	r2, #2
   16cb8:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   16cba:	1d3b      	adds	r3, r7, #4
   16cbc:	0019      	movs	r1, r3
   16cbe:	2007      	movs	r0, #7
   16cc0:	4b03      	ldr	r3, [pc, #12]	; (16cd0 <configure_extint_channel+0x3c>)
   16cc2:	4798      	blx	r3
}
   16cc4:	46c0      	nop			; (mov r8, r8)
   16cc6:	46bd      	mov	sp, r7
   16cc8:	b004      	add	sp, #16
   16cca:	bd80      	pop	{r7, pc}
   16ccc:	00026285 	.word	0x00026285
   16cd0:	000262b9 	.word	0x000262b9

00016cd4 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   16cd4:	b580      	push	{r7, lr}
   16cd6:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16cd8:	4b06      	ldr	r3, [pc, #24]	; (16cf4 <configure_extint_callbacks+0x20>)
   16cda:	2200      	movs	r2, #0
   16cdc:	2107      	movs	r1, #7
   16cde:	0018      	movs	r0, r3
   16ce0:	4b05      	ldr	r3, [pc, #20]	; (16cf8 <configure_extint_callbacks+0x24>)
   16ce2:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   16ce4:	2100      	movs	r1, #0
   16ce6:	2007      	movs	r0, #7
   16ce8:	4b04      	ldr	r3, [pc, #16]	; (16cfc <configure_extint_callbacks+0x28>)
   16cea:	4798      	blx	r3
}
   16cec:	46c0      	nop			; (mov r8, r8)
   16cee:	46bd      	mov	sp, r7
   16cf0:	bd80      	pop	{r7, pc}
   16cf2:	46c0      	nop			; (mov r8, r8)
   16cf4:	00016d01 	.word	0x00016d01
   16cf8:	00025e85 	.word	0x00025e85
   16cfc:	00025ee9 	.word	0x00025ee9

00016d00 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   16d00:	b580      	push	{r7, lr}
   16d02:	af00      	add	r7, sp, #0
    isPressed = true;
   16d04:	4b02      	ldr	r3, [pc, #8]	; (16d10 <extint_detection_callback+0x10>)
   16d06:	2201      	movs	r2, #1
   16d08:	701a      	strb	r2, [r3, #0]
}
   16d0a:	46c0      	nop			; (mov r8, r8)
   16d0c:	46bd      	mov	sp, r7
   16d0e:	bd80      	pop	{r7, pc}
   16d10:	200008bc 	.word	0x200008bc

00016d14 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   16d14:	b580      	push	{r7, lr}
   16d16:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   16d18:	4a15      	ldr	r2, [pc, #84]	; (16d70 <HTTP_DownloadFileInit+0x5c>)
   16d1a:	4b16      	ldr	r3, [pc, #88]	; (16d74 <HTTP_DownloadFileInit+0x60>)
   16d1c:	0011      	movs	r1, r2
   16d1e:	0018      	movs	r0, r3
   16d20:	4b15      	ldr	r3, [pc, #84]	; (16d78 <HTTP_DownloadFileInit+0x64>)
   16d22:	4798      	blx	r3
   16d24:	1e03      	subs	r3, r0, #0
   16d26:	d008      	beq.n	16d3a <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16d28:	4b14      	ldr	r3, [pc, #80]	; (16d7c <HTTP_DownloadFileInit+0x68>)
   16d2a:	0019      	movs	r1, r3
   16d2c:	2001      	movs	r0, #1
   16d2e:	4b14      	ldr	r3, [pc, #80]	; (16d80 <HTTP_DownloadFileInit+0x6c>)
   16d30:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   16d32:	e002      	b.n	16d3a <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   16d34:	2000      	movs	r0, #0
   16d36:	4b13      	ldr	r3, [pc, #76]	; (16d84 <HTTP_DownloadFileInit+0x70>)
   16d38:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   16d3a:	4b0e      	ldr	r3, [pc, #56]	; (16d74 <HTTP_DownloadFileInit+0x60>)
   16d3c:	2234      	movs	r2, #52	; 0x34
   16d3e:	5c9b      	ldrb	r3, [r3, r2]
   16d40:	2b00      	cmp	r3, #0
   16d42:	d1f7      	bne.n	16d34 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   16d44:	4b10      	ldr	r3, [pc, #64]	; (16d88 <HTTP_DownloadFileInit+0x74>)
   16d46:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   16d48:	4b10      	ldr	r3, [pc, #64]	; (16d8c <HTTP_DownloadFileInit+0x78>)
   16d4a:	2201      	movs	r2, #1
   16d4c:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   16d4e:	4a10      	ldr	r2, [pc, #64]	; (16d90 <HTTP_DownloadFileInit+0x7c>)
   16d50:	4b10      	ldr	r3, [pc, #64]	; (16d94 <HTTP_DownloadFileInit+0x80>)
   16d52:	0011      	movs	r1, r2
   16d54:	0018      	movs	r0, r3
   16d56:	4b10      	ldr	r3, [pc, #64]	; (16d98 <HTTP_DownloadFileInit+0x84>)
   16d58:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   16d5a:	4b10      	ldr	r3, [pc, #64]	; (16d9c <HTTP_DownloadFileInit+0x88>)
   16d5c:	4798      	blx	r3

    start_download();
   16d5e:	4b10      	ldr	r3, [pc, #64]	; (16da0 <HTTP_DownloadFileInit+0x8c>)
   16d60:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   16d62:	4b10      	ldr	r3, [pc, #64]	; (16da4 <HTTP_DownloadFileInit+0x90>)
   16d64:	2203      	movs	r2, #3
   16d66:	701a      	strb	r2, [r3, #0]
}
   16d68:	46c0      	nop			; (mov r8, r8)
   16d6a:	46bd      	mov	sp, r7
   16d6c:	bd80      	pop	{r7, pc}
   16d6e:	46c0      	nop			; (mov r8, r8)
   16d70:	00035d00 	.word	0x00035d00
   16d74:	20000484 	.word	0x20000484
   16d78:	0002f2e9 	.word	0x0002f2e9
   16d7c:	0003610c 	.word	0x0003610c
   16d80:	0001dc41 	.word	0x0001dc41
   16d84:	00021975 	.word	0x00021975
   16d88:	00024f31 	.word	0x00024f31
   16d8c:	20000454 	.word	0x20000454
   16d90:	000166f5 	.word	0x000166f5
   16d94:	000166c1 	.word	0x000166c1
   16d98:	00024f79 	.word	0x00024f79
   16d9c:	00024ee1 	.word	0x00024ee1
   16da0:	000162e9 	.word	0x000162e9
   16da4:	2000044d 	.word	0x2000044d

00016da8 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   16da8:	b580      	push	{r7, lr}
   16daa:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16dac:	e009      	b.n	16dc2 <HTTP_DownloadFileTransaction+0x1a>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16dae:	2000      	movs	r0, #0
   16db0:	4b16      	ldr	r3, [pc, #88]	; (16e0c <HTTP_DownloadFileTransaction+0x64>)
   16db2:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16db4:	4b16      	ldr	r3, [pc, #88]	; (16e10 <HTTP_DownloadFileTransaction+0x68>)
   16db6:	0018      	movs	r0, r3
   16db8:	4b16      	ldr	r3, [pc, #88]	; (16e14 <HTTP_DownloadFileTransaction+0x6c>)
   16dba:	4798      	blx	r3
        vTaskDelay(5);
   16dbc:	2005      	movs	r0, #5
   16dbe:	4b16      	ldr	r3, [pc, #88]	; (16e18 <HTTP_DownloadFileTransaction+0x70>)
   16dc0:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   16dc2:	2010      	movs	r0, #16
   16dc4:	4b15      	ldr	r3, [pc, #84]	; (16e1c <HTTP_DownloadFileTransaction+0x74>)
   16dc6:	4798      	blx	r3
   16dc8:	0003      	movs	r3, r0
   16dca:	001a      	movs	r2, r3
   16dcc:	2301      	movs	r3, #1
   16dce:	4053      	eors	r3, r2
   16dd0:	b2db      	uxtb	r3, r3
   16dd2:	2b00      	cmp	r3, #0
   16dd4:	d009      	beq.n	16dea <HTTP_DownloadFileTransaction+0x42>
   16dd6:	2020      	movs	r0, #32
   16dd8:	4b10      	ldr	r3, [pc, #64]	; (16e1c <HTTP_DownloadFileTransaction+0x74>)
   16dda:	4798      	blx	r3
   16ddc:	0003      	movs	r3, r0
   16dde:	001a      	movs	r2, r3
   16de0:	2301      	movs	r3, #1
   16de2:	4053      	eors	r3, r2
   16de4:	b2db      	uxtb	r3, r3
   16de6:	2b00      	cmp	r3, #0
   16de8:	d1e1      	bne.n	16dae <HTTP_DownloadFileTransaction+0x6>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   16dea:	4b0d      	ldr	r3, [pc, #52]	; (16e20 <HTTP_DownloadFileTransaction+0x78>)
   16dec:	4798      	blx	r3
    vTaskDelay(1000);
   16dee:	23fa      	movs	r3, #250	; 0xfa
   16df0:	009b      	lsls	r3, r3, #2
   16df2:	0018      	movs	r0, r3
   16df4:	4b08      	ldr	r3, [pc, #32]	; (16e18 <HTTP_DownloadFileTransaction+0x70>)
   16df6:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   16df8:	4b0a      	ldr	r3, [pc, #40]	; (16e24 <HTTP_DownloadFileTransaction+0x7c>)
   16dfa:	2200      	movs	r2, #0
   16dfc:	701a      	strb	r2, [r3, #0]
    wifiStateMachine = WIFI_MQTT_INIT;
   16dfe:	4b0a      	ldr	r3, [pc, #40]	; (16e28 <HTTP_DownloadFileTransaction+0x80>)
   16e00:	2200      	movs	r2, #0
   16e02:	701a      	strb	r2, [r3, #0]
}
   16e04:	46c0      	nop			; (mov r8, r8)
   16e06:	46bd      	mov	sp, r7
   16e08:	bd80      	pop	{r7, pc}
   16e0a:	46c0      	nop			; (mov r8, r8)
   16e0c:	00021975 	.word	0x00021975
   16e10:	2000442c 	.word	0x2000442c
   16e14:	00032011 	.word	0x00032011
   16e18:	0001bf01 	.word	0x0001bf01
   16e1c:	00015fc1 	.word	0x00015fc1
   16e20:	00024f31 	.word	0x00024f31
   16e24:	20000454 	.word	0x20000454
   16e28:	2000044d 	.word	0x2000044d

00016e2c <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   16e2c:	b580      	push	{r7, lr}
   16e2e:	af00      	add	r7, sp, #0
    socketDeinit();
   16e30:	4b18      	ldr	r3, [pc, #96]	; (16e94 <MQTT_InitRoutine+0x68>)
   16e32:	4798      	blx	r3
    configure_mqtt();
   16e34:	4b18      	ldr	r3, [pc, #96]	; (16e98 <MQTT_InitRoutine+0x6c>)
   16e36:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16e38:	4a18      	ldr	r2, [pc, #96]	; (16e9c <MQTT_InitRoutine+0x70>)
   16e3a:	4b19      	ldr	r3, [pc, #100]	; (16ea0 <MQTT_InitRoutine+0x74>)
   16e3c:	0011      	movs	r1, r2
   16e3e:	0018      	movs	r0, r3
   16e40:	4b18      	ldr	r3, [pc, #96]	; (16ea4 <MQTT_InitRoutine+0x78>)
   16e42:	4798      	blx	r3
    socketInit();
   16e44:	4b18      	ldr	r3, [pc, #96]	; (16ea8 <MQTT_InitRoutine+0x7c>)
   16e46:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   16e48:	4b18      	ldr	r3, [pc, #96]	; (16eac <MQTT_InitRoutine+0x80>)
   16e4a:	2234      	movs	r2, #52	; 0x34
   16e4c:	5c9b      	ldrb	r3, [r3, r2]
   16e4e:	2201      	movs	r2, #1
   16e50:	4053      	eors	r3, r2
   16e52:	b2db      	uxtb	r3, r3
   16e54:	2b00      	cmp	r3, #0
   16e56:	d00c      	beq.n	16e72 <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16e58:	4a15      	ldr	r2, [pc, #84]	; (16eb0 <MQTT_InitRoutine+0x84>)
   16e5a:	4b14      	ldr	r3, [pc, #80]	; (16eac <MQTT_InitRoutine+0x80>)
   16e5c:	0011      	movs	r1, r2
   16e5e:	0018      	movs	r0, r3
   16e60:	4b14      	ldr	r3, [pc, #80]	; (16eb4 <MQTT_InitRoutine+0x88>)
   16e62:	4798      	blx	r3
   16e64:	1e03      	subs	r3, r0, #0
   16e66:	d004      	beq.n	16e72 <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16e68:	4b13      	ldr	r3, [pc, #76]	; (16eb8 <MQTT_InitRoutine+0x8c>)
   16e6a:	0019      	movs	r1, r3
   16e6c:	2001      	movs	r0, #1
   16e6e:	4b13      	ldr	r3, [pc, #76]	; (16ebc <MQTT_InitRoutine+0x90>)
   16e70:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   16e72:	4b0e      	ldr	r3, [pc, #56]	; (16eac <MQTT_InitRoutine+0x80>)
   16e74:	2234      	movs	r2, #52	; 0x34
   16e76:	5c9b      	ldrb	r3, [r3, r2]
   16e78:	2b00      	cmp	r3, #0
   16e7a:	d004      	beq.n	16e86 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   16e7c:	4b10      	ldr	r3, [pc, #64]	; (16ec0 <MQTT_InitRoutine+0x94>)
   16e7e:	0019      	movs	r1, r3
   16e80:	2001      	movs	r0, #1
   16e82:	4b0e      	ldr	r3, [pc, #56]	; (16ebc <MQTT_InitRoutine+0x90>)
   16e84:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   16e86:	4b0f      	ldr	r3, [pc, #60]	; (16ec4 <MQTT_InitRoutine+0x98>)
   16e88:	2201      	movs	r2, #1
   16e8a:	701a      	strb	r2, [r3, #0]
}
   16e8c:	46c0      	nop			; (mov r8, r8)
   16e8e:	46bd      	mov	sp, r7
   16e90:	bd80      	pop	{r7, pc}
   16e92:	46c0      	nop			; (mov r8, r8)
   16e94:	00024f31 	.word	0x00024f31
   16e98:	00016bdd 	.word	0x00016bdd
   16e9c:	0001699d 	.word	0x0001699d
   16ea0:	00016969 	.word	0x00016969
   16ea4:	00024f79 	.word	0x00024f79
   16ea8:	00024ee1 	.word	0x00024ee1
   16eac:	20000484 	.word	0x20000484
   16eb0:	00035d00 	.word	0x00035d00
   16eb4:	0002f1b5 	.word	0x0002f1b5
   16eb8:	0003610c 	.word	0x0003610c
   16ebc:	0001dc41 	.word	0x0001dc41
   16ec0:	0003645c 	.word	0x0003645c
   16ec4:	2000044d 	.word	0x2000044d

00016ec8 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   16ec8:	b580      	push	{r7, lr}
   16eca:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   16ecc:	2000      	movs	r0, #0
   16ece:	4b09      	ldr	r3, [pc, #36]	; (16ef4 <MQTT_HandleTransactions+0x2c>)
   16ed0:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   16ed2:	4b09      	ldr	r3, [pc, #36]	; (16ef8 <MQTT_HandleTransactions+0x30>)
   16ed4:	0018      	movs	r0, r3
   16ed6:	4b09      	ldr	r3, [pc, #36]	; (16efc <MQTT_HandleTransactions+0x34>)
   16ed8:	4798      	blx	r3

    // Check if data has to be sent!


    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   16eda:	4b09      	ldr	r3, [pc, #36]	; (16f00 <MQTT_HandleTransactions+0x38>)
   16edc:	2234      	movs	r2, #52	; 0x34
   16ede:	5c9b      	ldrb	r3, [r3, r2]
   16ee0:	2b00      	cmp	r3, #0
   16ee2:	d004      	beq.n	16eee <MQTT_HandleTransactions+0x26>
   16ee4:	4b06      	ldr	r3, [pc, #24]	; (16f00 <MQTT_HandleTransactions+0x38>)
   16ee6:	2164      	movs	r1, #100	; 0x64
   16ee8:	0018      	movs	r0, r3
   16eea:	4b06      	ldr	r3, [pc, #24]	; (16f04 <MQTT_HandleTransactions+0x3c>)
   16eec:	4798      	blx	r3
}
   16eee:	46c0      	nop			; (mov r8, r8)
   16ef0:	46bd      	mov	sp, r7
   16ef2:	bd80      	pop	{r7, pc}
   16ef4:	00021975 	.word	0x00021975
   16ef8:	2000442c 	.word	0x2000442c
   16efc:	00032011 	.word	0x00032011
   16f00:	20000484 	.word	0x20000484
   16f04:	0002f3e5 	.word	0x0002f3e5

00016f08 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   16f08:	b590      	push	{r4, r7, lr}
   16f0a:	b08d      	sub	sp, #52	; 0x34
   16f0c:	af02      	add	r7, sp, #8
   16f0e:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   16f10:	2064      	movs	r0, #100	; 0x64
   16f12:	4b68      	ldr	r3, [pc, #416]	; (170b4 <vWifiTask+0x1ac>)
   16f14:	4798      	blx	r3
    init_state();
   16f16:	4b68      	ldr	r3, [pc, #416]	; (170b8 <vWifiTask+0x1b0>)
   16f18:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   16f1a:	2200      	movs	r2, #0
   16f1c:	2104      	movs	r1, #4
   16f1e:	2005      	movs	r0, #5
   16f20:	4b66      	ldr	r3, [pc, #408]	; (170bc <vWifiTask+0x1b4>)
   16f22:	4798      	blx	r3
   16f24:	0002      	movs	r2, r0
   16f26:	4b66      	ldr	r3, [pc, #408]	; (170c0 <vWifiTask+0x1b8>)
   16f28:	601a      	str	r2, [r3, #0]


    if (xQueueWifiState == NULL) {
   16f2a:	4b65      	ldr	r3, [pc, #404]	; (170c0 <vWifiTask+0x1b8>)
   16f2c:	681b      	ldr	r3, [r3, #0]
   16f2e:	2b00      	cmp	r3, #0
   16f30:	d103      	bne.n	16f3a <vWifiTask+0x32>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   16f32:	4b64      	ldr	r3, [pc, #400]	; (170c4 <vWifiTask+0x1bc>)
   16f34:	0018      	movs	r0, r3
   16f36:	4b64      	ldr	r3, [pc, #400]	; (170c8 <vWifiTask+0x1c0>)
   16f38:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   16f3a:	4b64      	ldr	r3, [pc, #400]	; (170cc <vWifiTask+0x1c4>)
   16f3c:	0018      	movs	r0, r3
   16f3e:	4b62      	ldr	r3, [pc, #392]	; (170c8 <vWifiTask+0x1c0>)
   16f40:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   16f42:	4b63      	ldr	r3, [pc, #396]	; (170d0 <vWifiTask+0x1c8>)
   16f44:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   16f46:	4b63      	ldr	r3, [pc, #396]	; (170d4 <vWifiTask+0x1cc>)
   16f48:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   16f4a:	4b63      	ldr	r3, [pc, #396]	; (170d8 <vWifiTask+0x1d0>)
   16f4c:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    //init_storage();

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   16f4e:	4b63      	ldr	r3, [pc, #396]	; (170dc <vWifiTask+0x1d4>)
   16f50:	4798      	blx	r3
    configure_extint_callbacks();
   16f52:	4b63      	ldr	r3, [pc, #396]	; (170e0 <vWifiTask+0x1d8>)
   16f54:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   16f56:	230c      	movs	r3, #12
   16f58:	18fb      	adds	r3, r7, r3
   16f5a:	2218      	movs	r2, #24
   16f5c:	2100      	movs	r1, #0
   16f5e:	0018      	movs	r0, r3
   16f60:	4b60      	ldr	r3, [pc, #384]	; (170e4 <vWifiTask+0x1dc>)
   16f62:	4798      	blx	r3

    nm_bsp_init();
   16f64:	4b60      	ldr	r3, [pc, #384]	; (170e8 <vWifiTask+0x1e0>)
   16f66:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   16f68:	230c      	movs	r3, #12
   16f6a:	18fb      	adds	r3, r7, r3
   16f6c:	4a5f      	ldr	r2, [pc, #380]	; (170ec <vWifiTask+0x1e4>)
   16f6e:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   16f70:	2327      	movs	r3, #39	; 0x27
   16f72:	18fc      	adds	r4, r7, r3
   16f74:	230c      	movs	r3, #12
   16f76:	18fb      	adds	r3, r7, r3
   16f78:	0018      	movs	r0, r3
   16f7a:	4b5d      	ldr	r3, [pc, #372]	; (170f0 <vWifiTask+0x1e8>)
   16f7c:	4798      	blx	r3
   16f7e:	0003      	movs	r3, r0
   16f80:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   16f82:	2327      	movs	r3, #39	; 0x27
   16f84:	18fb      	adds	r3, r7, r3
   16f86:	781b      	ldrb	r3, [r3, #0]
   16f88:	b25b      	sxtb	r3, r3
   16f8a:	2b00      	cmp	r3, #0
   16f8c:	d009      	beq.n	16fa2 <vWifiTask+0x9a>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   16f8e:	2327      	movs	r3, #39	; 0x27
   16f90:	18fb      	adds	r3, r7, r3
   16f92:	2200      	movs	r2, #0
   16f94:	569a      	ldrsb	r2, [r3, r2]
   16f96:	4b57      	ldr	r3, [pc, #348]	; (170f4 <vWifiTask+0x1ec>)
   16f98:	0019      	movs	r1, r3
   16f9a:	2001      	movs	r0, #1
   16f9c:	4b56      	ldr	r3, [pc, #344]	; (170f8 <vWifiTask+0x1f0>)
   16f9e:	4798      	blx	r3
        while (1) {
   16fa0:	e7fe      	b.n	16fa0 <vWifiTask+0x98>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   16fa2:	4a56      	ldr	r2, [pc, #344]	; (170fc <vWifiTask+0x1f4>)
   16fa4:	4b56      	ldr	r3, [pc, #344]	; (17100 <vWifiTask+0x1f8>)
   16fa6:	0019      	movs	r1, r3
   16fa8:	2001      	movs	r0, #1
   16faa:	4b53      	ldr	r3, [pc, #332]	; (170f8 <vWifiTask+0x1f0>)
   16fac:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   16fae:	4b55      	ldr	r3, [pc, #340]	; (17104 <vWifiTask+0x1fc>)
   16fb0:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   16fb2:	4a55      	ldr	r2, [pc, #340]	; (17108 <vWifiTask+0x200>)
   16fb4:	4b55      	ldr	r3, [pc, #340]	; (1710c <vWifiTask+0x204>)
   16fb6:	0011      	movs	r1, r2
   16fb8:	0018      	movs	r0, r3
   16fba:	4b55      	ldr	r3, [pc, #340]	; (17110 <vWifiTask+0x208>)
   16fbc:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16fbe:	4a55      	ldr	r2, [pc, #340]	; (17114 <vWifiTask+0x20c>)
   16fc0:	484e      	ldr	r0, [pc, #312]	; (170fc <vWifiTask+0x1f4>)
   16fc2:	23ff      	movs	r3, #255	; 0xff
   16fc4:	9300      	str	r3, [sp, #0]
   16fc6:	0013      	movs	r3, r2
   16fc8:	2202      	movs	r2, #2
   16fca:	210b      	movs	r1, #11
   16fcc:	4c52      	ldr	r4, [pc, #328]	; (17118 <vWifiTask+0x210>)
   16fce:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   16fd0:	e006      	b.n	16fe0 <vWifiTask+0xd8>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   16fd2:	2000      	movs	r0, #0
   16fd4:	4b51      	ldr	r3, [pc, #324]	; (1711c <vWifiTask+0x214>)
   16fd6:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   16fd8:	4b51      	ldr	r3, [pc, #324]	; (17120 <vWifiTask+0x218>)
   16fda:	0018      	movs	r0, r3
   16fdc:	4b51      	ldr	r3, [pc, #324]	; (17124 <vWifiTask+0x21c>)
   16fde:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   16fe0:	2002      	movs	r0, #2
   16fe2:	4b51      	ldr	r3, [pc, #324]	; (17128 <vWifiTask+0x220>)
   16fe4:	4798      	blx	r3
   16fe6:	0003      	movs	r3, r0
   16fe8:	001a      	movs	r2, r3
   16fea:	2301      	movs	r3, #1
   16fec:	4053      	eors	r3, r2
   16fee:	b2db      	uxtb	r3, r3
   16ff0:	2b00      	cmp	r3, #0
   16ff2:	d1ee      	bne.n	16fd2 <vWifiTask+0xca>
    }

    vTaskDelay(1000);
   16ff4:	23fa      	movs	r3, #250	; 0xfa
   16ff6:	009b      	lsls	r3, r3, #2
   16ff8:	0018      	movs	r0, r3
   16ffa:	4b2e      	ldr	r3, [pc, #184]	; (170b4 <vWifiTask+0x1ac>)
   16ffc:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   16ffe:	4b4b      	ldr	r3, [pc, #300]	; (1712c <vWifiTask+0x224>)
   17000:	2201      	movs	r2, #1
   17002:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   17004:	4b49      	ldr	r3, [pc, #292]	; (1712c <vWifiTask+0x224>)
   17006:	781b      	ldrb	r3, [r3, #0]
   17008:	b25b      	sxtb	r3, r3
   1700a:	2b01      	cmp	r3, #1
   1700c:	d00b      	beq.n	17026 <vWifiTask+0x11e>
   1700e:	dc02      	bgt.n	17016 <vWifiTask+0x10e>
   17010:	2b00      	cmp	r3, #0
   17012:	d005      	beq.n	17020 <vWifiTask+0x118>
   17014:	e019      	b.n	1704a <vWifiTask+0x142>
   17016:	2b02      	cmp	r3, #2
   17018:	d008      	beq.n	1702c <vWifiTask+0x124>
   1701a:	2b03      	cmp	r3, #3
   1701c:	d009      	beq.n	17032 <vWifiTask+0x12a>
   1701e:	e014      	b.n	1704a <vWifiTask+0x142>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   17020:	4b43      	ldr	r3, [pc, #268]	; (17130 <vWifiTask+0x228>)
   17022:	4798      	blx	r3

                break;
   17024:	e015      	b.n	17052 <vWifiTask+0x14a>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   17026:	4b43      	ldr	r3, [pc, #268]	; (17134 <vWifiTask+0x22c>)
   17028:	4798      	blx	r3
                break;
   1702a:	e012      	b.n	17052 <vWifiTask+0x14a>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   1702c:	4b42      	ldr	r3, [pc, #264]	; (17138 <vWifiTask+0x230>)
   1702e:	4798      	blx	r3
                break;
   17030:	e00f      	b.n	17052 <vWifiTask+0x14a>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   17032:	4b42      	ldr	r3, [pc, #264]	; (1713c <vWifiTask+0x234>)
   17034:	4798      	blx	r3
				set_update_flag();
   17036:	4b42      	ldr	r3, [pc, #264]	; (17140 <vWifiTask+0x238>)
   17038:	4798      	blx	r3
				vTaskDelay(2000);
   1703a:	23fa      	movs	r3, #250	; 0xfa
   1703c:	00db      	lsls	r3, r3, #3
   1703e:	0018      	movs	r0, r3
   17040:	4b1c      	ldr	r3, [pc, #112]	; (170b4 <vWifiTask+0x1ac>)
   17042:	4798      	blx	r3
				system_reset();
   17044:	4b3f      	ldr	r3, [pc, #252]	; (17144 <vWifiTask+0x23c>)
   17046:	4798      	blx	r3
                break;
   17048:	e003      	b.n	17052 <vWifiTask+0x14a>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   1704a:	4b38      	ldr	r3, [pc, #224]	; (1712c <vWifiTask+0x224>)
   1704c:	2200      	movs	r2, #0
   1704e:	701a      	strb	r2, [r3, #0]
                break;
   17050:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   17052:	230b      	movs	r3, #11
   17054:	18fb      	adds	r3, r7, r3
   17056:	2200      	movs	r2, #0
   17058:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   1705a:	4b19      	ldr	r3, [pc, #100]	; (170c0 <vWifiTask+0x1b8>)
   1705c:	681b      	ldr	r3, [r3, #0]
   1705e:	220b      	movs	r2, #11
   17060:	18b9      	adds	r1, r7, r2
   17062:	2200      	movs	r2, #0
   17064:	0018      	movs	r0, r3
   17066:	4b38      	ldr	r3, [pc, #224]	; (17148 <vWifiTask+0x240>)
   17068:	4798      	blx	r3
   1706a:	0003      	movs	r3, r0
   1706c:	2b01      	cmp	r3, #1
   1706e:	d105      	bne.n	1707c <vWifiTask+0x174>
            wifiStateMachine = DataToReceive;  // Update new state
   17070:	230b      	movs	r3, #11
   17072:	18fb      	adds	r3, r7, r3
   17074:	781b      	ldrb	r3, [r3, #0]
   17076:	b25a      	sxtb	r2, r3
   17078:	4b2c      	ldr	r3, [pc, #176]	; (1712c <vWifiTask+0x224>)
   1707a:	701a      	strb	r2, [r3, #0]
        }

		 if(isPressed)
   1707c:	4b33      	ldr	r3, [pc, #204]	; (1714c <vWifiTask+0x244>)
   1707e:	781b      	ldrb	r3, [r3, #0]
   17080:	b2db      	uxtb	r3, r3
   17082:	2b00      	cmp	r3, #0
   17084:	d011      	beq.n	170aa <vWifiTask+0x1a2>
		 {
			 mqtt_publish(&mqtt_inst, GAME_START_TOPIC_PUB, "1", 1, 1, 0);
   17086:	4a32      	ldr	r2, [pc, #200]	; (17150 <vWifiTask+0x248>)
   17088:	4932      	ldr	r1, [pc, #200]	; (17154 <vWifiTask+0x24c>)
   1708a:	4833      	ldr	r0, [pc, #204]	; (17158 <vWifiTask+0x250>)
   1708c:	2300      	movs	r3, #0
   1708e:	9301      	str	r3, [sp, #4]
   17090:	2301      	movs	r3, #1
   17092:	9300      	str	r3, [sp, #0]
   17094:	2301      	movs	r3, #1
   17096:	4c31      	ldr	r4, [pc, #196]	; (1715c <vWifiTask+0x254>)
   17098:	47a0      	blx	r4
			 LogMessage(LOG_DEBUG_LVL, "MQTT start signal sent");
   1709a:	4b31      	ldr	r3, [pc, #196]	; (17160 <vWifiTask+0x258>)
   1709c:	0019      	movs	r1, r3
   1709e:	2001      	movs	r0, #1
   170a0:	4b15      	ldr	r3, [pc, #84]	; (170f8 <vWifiTask+0x1f0>)
   170a2:	4798      	blx	r3
			 isPressed = false;
   170a4:	4b29      	ldr	r3, [pc, #164]	; (1714c <vWifiTask+0x244>)
   170a6:	2200      	movs	r2, #0
   170a8:	701a      	strb	r2, [r3, #0]
		 }
		 
        vTaskDelay(100);
   170aa:	2064      	movs	r0, #100	; 0x64
   170ac:	4b01      	ldr	r3, [pc, #4]	; (170b4 <vWifiTask+0x1ac>)
   170ae:	4798      	blx	r3
    while (1) {
   170b0:	e7a8      	b.n	17004 <vWifiTask+0xfc>
   170b2:	46c0      	nop			; (mov r8, r8)
   170b4:	0001bf01 	.word	0x0001bf01
   170b8:	00015f51 	.word	0x00015f51
   170bc:	0001a1f5 	.word	0x0001a1f5
   170c0:	20000450 	.word	0x20000450
   170c4:	00036478 	.word	0x00036478
   170c8:	0001db55 	.word	0x0001db55
   170cc:	000364a0 	.word	0x000364a0
   170d0:	000168a9 	.word	0x000168a9
   170d4:	000168e5 	.word	0x000168e5
   170d8:	00016bdd 	.word	0x00016bdd
   170dc:	00016c95 	.word	0x00016c95
   170e0:	00016cd5 	.word	0x00016cd5
   170e4:	0003438b 	.word	0x0003438b
   170e8:	0001fca9 	.word	0x0001fca9
   170ec:	00016755 	.word	0x00016755
   170f0:	00021781 	.word	0x00021781
   170f4:	000364bc 	.word	0x000364bc
   170f8:	0001dc41 	.word	0x0001dc41
   170fc:	000360d8 	.word	0x000360d8
   17100:	000364e8 	.word	0x000364e8
   17104:	00024ee1 	.word	0x00024ee1
   17108:	0001699d 	.word	0x0001699d
   1710c:	00016969 	.word	0x00016969
   17110:	00024f79 	.word	0x00024f79
   17114:	000360cc 	.word	0x000360cc
   17118:	00021991 	.word	0x00021991
   1711c:	00021975 	.word	0x00021975
   17120:	2000442c 	.word	0x2000442c
   17124:	00032011 	.word	0x00032011
   17128:	00015fc1 	.word	0x00015fc1
   1712c:	2000044d 	.word	0x2000044d
   17130:	00016e2d 	.word	0x00016e2d
   17134:	00016ec9 	.word	0x00016ec9
   17138:	00016d15 	.word	0x00016d15
   1713c:	00016da9 	.word	0x00016da9
   17140:	00017165 	.word	0x00017165
   17144:	00015ec5 	.word	0x00015ec5
   17148:	0001ad55 	.word	0x0001ad55
   1714c:	200008bc 	.word	0x200008bc
   17150:	0003650c 	.word	0x0003650c
   17154:	00036510 	.word	0x00036510
   17158:	20000484 	.word	0x20000484
   1715c:	0002f331 	.word	0x0002f331
   17160:	00036520 	.word	0x00036520

00017164 <set_update_flag>:
/**
 static void set_update_flag(void)
 * @brief	Set up the update flag
 * @note
*/
 static void set_update_flag(void){
   17164:	b590      	push	{r4, r7, lr}
   17166:	b08f      	sub	sp, #60	; 0x3c
   17168:	af00      	add	r7, sp, #0
	 // Write Flag
	 FIL f_obj;
	 char update_file_name[] = "0:update.txt";
   1716a:	003b      	movs	r3, r7
   1716c:	4a16      	ldr	r2, [pc, #88]	; (171c8 <set_update_flag+0x64>)
   1716e:	ca13      	ldmia	r2!, {r0, r1, r4}
   17170:	c313      	stmia	r3!, {r0, r1, r4}
   17172:	7812      	ldrb	r2, [r2, #0]
   17174:	701a      	strb	r2, [r3, #0]
	 update_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   17176:	003b      	movs	r3, r7
   17178:	2230      	movs	r2, #48	; 0x30
   1717a:	701a      	strb	r2, [r3, #0]
	 FRESULT res = f_open(&f_obj, (char const *)update_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1717c:	2337      	movs	r3, #55	; 0x37
   1717e:	18fc      	adds	r4, r7, r3
   17180:	0039      	movs	r1, r7
   17182:	2310      	movs	r3, #16
   17184:	18fb      	adds	r3, r7, r3
   17186:	220a      	movs	r2, #10
   17188:	0018      	movs	r0, r3
   1718a:	4b10      	ldr	r3, [pc, #64]	; (171cc <set_update_flag+0x68>)
   1718c:	4798      	blx	r3
   1718e:	0003      	movs	r3, r0
   17190:	7023      	strb	r3, [r4, #0]
	 f_close(&f_obj);
   17192:	2310      	movs	r3, #16
   17194:	18fb      	adds	r3, r7, r3
   17196:	0018      	movs	r0, r3
   17198:	4b0d      	ldr	r3, [pc, #52]	; (171d0 <set_update_flag+0x6c>)
   1719a:	4798      	blx	r3
	 if (res != FR_OK) {
   1719c:	2337      	movs	r3, #55	; 0x37
   1719e:	18fb      	adds	r3, r7, r3
   171a0:	781b      	ldrb	r3, [r3, #0]
   171a2:	2b00      	cmp	r3, #0
   171a4:	d008      	beq.n	171b8 <set_update_flag+0x54>
		 LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   171a6:	2337      	movs	r3, #55	; 0x37
   171a8:	18fb      	adds	r3, r7, r3
   171aa:	781a      	ldrb	r2, [r3, #0]
   171ac:	4b09      	ldr	r3, [pc, #36]	; (171d4 <set_update_flag+0x70>)
   171ae:	0019      	movs	r1, r3
   171b0:	2000      	movs	r0, #0
   171b2:	4b09      	ldr	r3, [pc, #36]	; (171d8 <set_update_flag+0x74>)
   171b4:	4798      	blx	r3
		 } else {
		 SerialConsoleWriteString("update.txt added!\r\n");
	}
 }
   171b6:	e003      	b.n	171c0 <set_update_flag+0x5c>
		 SerialConsoleWriteString("update.txt added!\r\n");
   171b8:	4b08      	ldr	r3, [pc, #32]	; (171dc <set_update_flag+0x78>)
   171ba:	0018      	movs	r0, r3
   171bc:	4b08      	ldr	r3, [pc, #32]	; (171e0 <set_update_flag+0x7c>)
   171be:	4798      	blx	r3
 }
   171c0:	46c0      	nop			; (mov r8, r8)
   171c2:	46bd      	mov	sp, r7
   171c4:	b00f      	add	sp, #60	; 0x3c
   171c6:	bd90      	pop	{r4, r7, pc}
   171c8:	0003655c 	.word	0x0003655c
   171cc:	0002d2d9 	.word	0x0002d2d9
   171d0:	0002dcd9 	.word	0x0002dcd9
   171d4:	00036538 	.word	0x00036538
   171d8:	0001dc41 	.word	0x0001dc41
   171dc:	00036548 	.word	0x00036548
   171e0:	0001db55 	.word	0x0001db55

000171e4 <WifiHandlerSetState>:
 

void WifiHandlerSetState(uint8_t state)
{
   171e4:	b590      	push	{r4, r7, lr}
   171e6:	b083      	sub	sp, #12
   171e8:	af00      	add	r7, sp, #0
   171ea:	0002      	movs	r2, r0
   171ec:	1dfb      	adds	r3, r7, #7
   171ee:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   171f0:	1dfb      	adds	r3, r7, #7
   171f2:	781b      	ldrb	r3, [r3, #0]
   171f4:	2b03      	cmp	r3, #3
   171f6:	d806      	bhi.n	17206 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   171f8:	4b05      	ldr	r3, [pc, #20]	; (17210 <WifiHandlerSetState+0x2c>)
   171fa:	6818      	ldr	r0, [r3, #0]
   171fc:	1df9      	adds	r1, r7, #7
   171fe:	2300      	movs	r3, #0
   17200:	220a      	movs	r2, #10
   17202:	4c04      	ldr	r4, [pc, #16]	; (17214 <WifiHandlerSetState+0x30>)
   17204:	47a0      	blx	r4
    }
}
   17206:	46c0      	nop			; (mov r8, r8)
   17208:	46bd      	mov	sp, r7
   1720a:	b003      	add	sp, #12
   1720c:	bd90      	pop	{r4, r7, pc}
   1720e:	46c0      	nop			; (mov r8, r8)
   17210:	20000450 	.word	0x20000450
   17214:	0001a49d 	.word	0x0001a49d

00017218 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17218:	b580      	push	{r7, lr}
   1721a:	b082      	sub	sp, #8
   1721c:	af00      	add	r7, sp, #0
   1721e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   17220:	687b      	ldr	r3, [r7, #4]
   17222:	2200      	movs	r2, #0
   17224:	701a      	strb	r2, [r3, #0]
}
   17226:	46c0      	nop			; (mov r8, r8)
   17228:	46bd      	mov	sp, r7
   1722a:	b002      	add	sp, #8
   1722c:	bd80      	pop	{r7, pc}
	...

00017230 <system_apb_clock_set_mask>:
{
   17230:	b580      	push	{r7, lr}
   17232:	b082      	sub	sp, #8
   17234:	af00      	add	r7, sp, #0
   17236:	0002      	movs	r2, r0
   17238:	6039      	str	r1, [r7, #0]
   1723a:	1dfb      	adds	r3, r7, #7
   1723c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1723e:	1dfb      	adds	r3, r7, #7
   17240:	781b      	ldrb	r3, [r3, #0]
   17242:	2b01      	cmp	r3, #1
   17244:	d00a      	beq.n	1725c <system_apb_clock_set_mask+0x2c>
   17246:	2b02      	cmp	r3, #2
   17248:	d00f      	beq.n	1726a <system_apb_clock_set_mask+0x3a>
   1724a:	2b00      	cmp	r3, #0
   1724c:	d114      	bne.n	17278 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1724e:	4b0e      	ldr	r3, [pc, #56]	; (17288 <system_apb_clock_set_mask+0x58>)
   17250:	4a0d      	ldr	r2, [pc, #52]	; (17288 <system_apb_clock_set_mask+0x58>)
   17252:	6991      	ldr	r1, [r2, #24]
   17254:	683a      	ldr	r2, [r7, #0]
   17256:	430a      	orrs	r2, r1
   17258:	619a      	str	r2, [r3, #24]
			break;
   1725a:	e00f      	b.n	1727c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1725c:	4b0a      	ldr	r3, [pc, #40]	; (17288 <system_apb_clock_set_mask+0x58>)
   1725e:	4a0a      	ldr	r2, [pc, #40]	; (17288 <system_apb_clock_set_mask+0x58>)
   17260:	69d1      	ldr	r1, [r2, #28]
   17262:	683a      	ldr	r2, [r7, #0]
   17264:	430a      	orrs	r2, r1
   17266:	61da      	str	r2, [r3, #28]
			break;
   17268:	e008      	b.n	1727c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1726a:	4b07      	ldr	r3, [pc, #28]	; (17288 <system_apb_clock_set_mask+0x58>)
   1726c:	4a06      	ldr	r2, [pc, #24]	; (17288 <system_apb_clock_set_mask+0x58>)
   1726e:	6a11      	ldr	r1, [r2, #32]
   17270:	683a      	ldr	r2, [r7, #0]
   17272:	430a      	orrs	r2, r1
   17274:	621a      	str	r2, [r3, #32]
			break;
   17276:	e001      	b.n	1727c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17278:	2317      	movs	r3, #23
   1727a:	e000      	b.n	1727e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1727c:	2300      	movs	r3, #0
}
   1727e:	0018      	movs	r0, r3
   17280:	46bd      	mov	sp, r7
   17282:	b002      	add	sp, #8
   17284:	bd80      	pop	{r7, pc}
   17286:	46c0      	nop			; (mov r8, r8)
   17288:	40000400 	.word	0x40000400

0001728c <system_pinmux_get_config_defaults>:
{
   1728c:	b580      	push	{r7, lr}
   1728e:	b082      	sub	sp, #8
   17290:	af00      	add	r7, sp, #0
   17292:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17294:	687b      	ldr	r3, [r7, #4]
   17296:	2280      	movs	r2, #128	; 0x80
   17298:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1729a:	687b      	ldr	r3, [r7, #4]
   1729c:	2200      	movs	r2, #0
   1729e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   172a0:	687b      	ldr	r3, [r7, #4]
   172a2:	2201      	movs	r2, #1
   172a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   172a6:	687b      	ldr	r3, [r7, #4]
   172a8:	2200      	movs	r2, #0
   172aa:	70da      	strb	r2, [r3, #3]
}
   172ac:	46c0      	nop			; (mov r8, r8)
   172ae:	46bd      	mov	sp, r7
   172b0:	b002      	add	sp, #8
   172b2:	bd80      	pop	{r7, pc}

000172b4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   172b4:	b580      	push	{r7, lr}
   172b6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   172b8:	4b05      	ldr	r3, [pc, #20]	; (172d0 <system_is_debugger_present+0x1c>)
   172ba:	789b      	ldrb	r3, [r3, #2]
   172bc:	b2db      	uxtb	r3, r3
   172be:	001a      	movs	r2, r3
   172c0:	2302      	movs	r3, #2
   172c2:	4013      	ands	r3, r2
   172c4:	1e5a      	subs	r2, r3, #1
   172c6:	4193      	sbcs	r3, r2
   172c8:	b2db      	uxtb	r3, r3
}
   172ca:	0018      	movs	r0, r3
   172cc:	46bd      	mov	sp, r7
   172ce:	bd80      	pop	{r7, pc}
   172d0:	41002000 	.word	0x41002000

000172d4 <system_interrupt_enter_critical_section>:
{
   172d4:	b580      	push	{r7, lr}
   172d6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   172d8:	4b02      	ldr	r3, [pc, #8]	; (172e4 <system_interrupt_enter_critical_section+0x10>)
   172da:	4798      	blx	r3
}
   172dc:	46c0      	nop			; (mov r8, r8)
   172de:	46bd      	mov	sp, r7
   172e0:	bd80      	pop	{r7, pc}
   172e2:	46c0      	nop			; (mov r8, r8)
   172e4:	00025bd9 	.word	0x00025bd9

000172e8 <system_interrupt_leave_critical_section>:
{
   172e8:	b580      	push	{r7, lr}
   172ea:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   172ec:	4b02      	ldr	r3, [pc, #8]	; (172f8 <system_interrupt_leave_critical_section+0x10>)
   172ee:	4798      	blx	r3
}
   172f0:	46c0      	nop			; (mov r8, r8)
   172f2:	46bd      	mov	sp, r7
   172f4:	bd80      	pop	{r7, pc}
   172f6:	46c0      	nop			; (mov r8, r8)
   172f8:	00025c2d 	.word	0x00025c2d

000172fc <system_interrupt_disable>:
{
   172fc:	b580      	push	{r7, lr}
   172fe:	b082      	sub	sp, #8
   17300:	af00      	add	r7, sp, #0
   17302:	0002      	movs	r2, r0
   17304:	1dfb      	adds	r3, r7, #7
   17306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17308:	4a07      	ldr	r2, [pc, #28]	; (17328 <system_interrupt_disable+0x2c>)
   1730a:	1dfb      	adds	r3, r7, #7
   1730c:	781b      	ldrb	r3, [r3, #0]
   1730e:	0019      	movs	r1, r3
   17310:	231f      	movs	r3, #31
   17312:	400b      	ands	r3, r1
   17314:	2101      	movs	r1, #1
   17316:	4099      	lsls	r1, r3
   17318:	000b      	movs	r3, r1
   1731a:	0019      	movs	r1, r3
   1731c:	2380      	movs	r3, #128	; 0x80
   1731e:	50d1      	str	r1, [r2, r3]
}
   17320:	46c0      	nop			; (mov r8, r8)
   17322:	46bd      	mov	sp, r7
   17324:	b002      	add	sp, #8
   17326:	bd80      	pop	{r7, pc}
   17328:	e000e100 	.word	0xe000e100

0001732c <i2c_master_is_syncing>:
{
   1732c:	b580      	push	{r7, lr}
   1732e:	b084      	sub	sp, #16
   17330:	af00      	add	r7, sp, #0
   17332:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   17334:	687b      	ldr	r3, [r7, #4]
   17336:	681b      	ldr	r3, [r3, #0]
   17338:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1733a:	68fb      	ldr	r3, [r7, #12]
   1733c:	69db      	ldr	r3, [r3, #28]
   1733e:	2207      	movs	r2, #7
   17340:	4013      	ands	r3, r2
   17342:	1e5a      	subs	r2, r3, #1
   17344:	4193      	sbcs	r3, r2
   17346:	b2db      	uxtb	r3, r3
}
   17348:	0018      	movs	r0, r3
   1734a:	46bd      	mov	sp, r7
   1734c:	b004      	add	sp, #16
   1734e:	bd80      	pop	{r7, pc}

00017350 <_i2c_master_wait_for_sync>:
{
   17350:	b580      	push	{r7, lr}
   17352:	b082      	sub	sp, #8
   17354:	af00      	add	r7, sp, #0
   17356:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   17358:	46c0      	nop			; (mov r8, r8)
   1735a:	687b      	ldr	r3, [r7, #4]
   1735c:	0018      	movs	r0, r3
   1735e:	4b04      	ldr	r3, [pc, #16]	; (17370 <_i2c_master_wait_for_sync+0x20>)
   17360:	4798      	blx	r3
   17362:	1e03      	subs	r3, r0, #0
   17364:	d1f9      	bne.n	1735a <_i2c_master_wait_for_sync+0xa>
}
   17366:	46c0      	nop			; (mov r8, r8)
   17368:	46bd      	mov	sp, r7
   1736a:	b002      	add	sp, #8
   1736c:	bd80      	pop	{r7, pc}
   1736e:	46c0      	nop			; (mov r8, r8)
   17370:	0001732d 	.word	0x0001732d

00017374 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   17374:	b580      	push	{r7, lr}
   17376:	b084      	sub	sp, #16
   17378:	af00      	add	r7, sp, #0
   1737a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1737c:	687b      	ldr	r3, [r7, #4]
   1737e:	681b      	ldr	r3, [r3, #0]
   17380:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   17382:	687b      	ldr	r3, [r7, #4]
   17384:	681b      	ldr	r3, [r3, #0]
   17386:	0018      	movs	r0, r3
   17388:	4b0d      	ldr	r3, [pc, #52]	; (173c0 <i2c_master_disable+0x4c>)
   1738a:	4798      	blx	r3
   1738c:	0003      	movs	r3, r0
   1738e:	0018      	movs	r0, r3
   17390:	4b0c      	ldr	r3, [pc, #48]	; (173c4 <i2c_master_disable+0x50>)
   17392:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   17394:	687b      	ldr	r3, [r7, #4]
   17396:	0018      	movs	r0, r3
   17398:	4b0b      	ldr	r3, [pc, #44]	; (173c8 <i2c_master_disable+0x54>)
   1739a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1739c:	68fb      	ldr	r3, [r7, #12]
   1739e:	2283      	movs	r2, #131	; 0x83
   173a0:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   173a2:	68fb      	ldr	r3, [r7, #12]
   173a4:	2283      	movs	r2, #131	; 0x83
   173a6:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   173a8:	68fb      	ldr	r3, [r7, #12]
   173aa:	681b      	ldr	r3, [r3, #0]
   173ac:	2202      	movs	r2, #2
   173ae:	4393      	bics	r3, r2
   173b0:	001a      	movs	r2, r3
   173b2:	68fb      	ldr	r3, [r7, #12]
   173b4:	601a      	str	r2, [r3, #0]

}
   173b6:	46c0      	nop			; (mov r8, r8)
   173b8:	46bd      	mov	sp, r7
   173ba:	b004      	add	sp, #16
   173bc:	bd80      	pop	{r7, pc}
   173be:	46c0      	nop			; (mov r8, r8)
   173c0:	000270ad 	.word	0x000270ad
   173c4:	000172fd 	.word	0x000172fd
   173c8:	00017351 	.word	0x00017351

000173cc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   173cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   173ce:	b097      	sub	sp, #92	; 0x5c
   173d0:	af00      	add	r7, sp, #0
   173d2:	6178      	str	r0, [r7, #20]
   173d4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   173d6:	2300      	movs	r3, #0
   173d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   173da:	2300      	movs	r3, #0
   173dc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   173de:	2300      	movs	r3, #0
   173e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   173e2:	233b      	movs	r3, #59	; 0x3b
   173e4:	2210      	movs	r2, #16
   173e6:	4694      	mov	ip, r2
   173e8:	44bc      	add	ip, r7
   173ea:	4463      	add	r3, ip
   173ec:	2200      	movs	r2, #0
   173ee:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   173f0:	697b      	ldr	r3, [r7, #20]
   173f2:	681b      	ldr	r3, [r3, #0]
   173f4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   173f6:	697b      	ldr	r3, [r7, #20]
   173f8:	681b      	ldr	r3, [r3, #0]
   173fa:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   173fc:	2323      	movs	r3, #35	; 0x23
   173fe:	2210      	movs	r2, #16
   17400:	18ba      	adds	r2, r7, r2
   17402:	18d4      	adds	r4, r2, r3
   17404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17406:	0018      	movs	r0, r3
   17408:	4bc0      	ldr	r3, [pc, #768]	; (1770c <_i2c_master_set_config+0x340>)
   1740a:	4798      	blx	r3
   1740c:	0003      	movs	r3, r0
   1740e:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   17410:	230c      	movs	r3, #12
   17412:	2210      	movs	r2, #16
   17414:	4694      	mov	ip, r2
   17416:	44bc      	add	ip, r7
   17418:	4463      	add	r3, ip
   1741a:	0018      	movs	r0, r3
   1741c:	4bbc      	ldr	r3, [pc, #752]	; (17710 <_i2c_master_set_config+0x344>)
   1741e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   17420:	693b      	ldr	r3, [r7, #16]
   17422:	69db      	ldr	r3, [r3, #28]
   17424:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   17426:	693b      	ldr	r3, [r7, #16]
   17428:	6a1b      	ldr	r3, [r3, #32]
   1742a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   1742c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1742e:	2b00      	cmp	r3, #0
   17430:	d106      	bne.n	17440 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   17432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17434:	2100      	movs	r1, #0
   17436:	0018      	movs	r0, r3
   17438:	4bb6      	ldr	r3, [pc, #728]	; (17714 <_i2c_master_set_config+0x348>)
   1743a:	4798      	blx	r3
   1743c:	0003      	movs	r3, r0
   1743e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   17440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17442:	b2da      	uxtb	r2, r3
   17444:	230c      	movs	r3, #12
   17446:	2110      	movs	r1, #16
   17448:	468c      	mov	ip, r1
   1744a:	44bc      	add	ip, r7
   1744c:	4463      	add	r3, ip
   1744e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17450:	230c      	movs	r3, #12
   17452:	2210      	movs	r2, #16
   17454:	4694      	mov	ip, r2
   17456:	44bc      	add	ip, r7
   17458:	4463      	add	r3, ip
   1745a:	2202      	movs	r2, #2
   1745c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1745e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17460:	0c1b      	lsrs	r3, r3, #16
   17462:	b2db      	uxtb	r3, r3
   17464:	220c      	movs	r2, #12
   17466:	2110      	movs	r1, #16
   17468:	468c      	mov	ip, r1
   1746a:	44bc      	add	ip, r7
   1746c:	4462      	add	r2, ip
   1746e:	0011      	movs	r1, r2
   17470:	0018      	movs	r0, r3
   17472:	4ba9      	ldr	r3, [pc, #676]	; (17718 <_i2c_master_set_config+0x34c>)
   17474:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   17476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17478:	2b00      	cmp	r3, #0
   1747a:	d106      	bne.n	1748a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   1747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1747e:	2101      	movs	r1, #1
   17480:	0018      	movs	r0, r3
   17482:	4ba4      	ldr	r3, [pc, #656]	; (17714 <_i2c_master_set_config+0x348>)
   17484:	4798      	blx	r3
   17486:	0003      	movs	r3, r0
   17488:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1748a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1748c:	b2da      	uxtb	r2, r3
   1748e:	230c      	movs	r3, #12
   17490:	2110      	movs	r1, #16
   17492:	468c      	mov	ip, r1
   17494:	44bc      	add	ip, r7
   17496:	4463      	add	r3, ip
   17498:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1749a:	230c      	movs	r3, #12
   1749c:	2210      	movs	r2, #16
   1749e:	4694      	mov	ip, r2
   174a0:	44bc      	add	ip, r7
   174a2:	4463      	add	r3, ip
   174a4:	2202      	movs	r2, #2
   174a6:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   174a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   174aa:	0c1b      	lsrs	r3, r3, #16
   174ac:	b2db      	uxtb	r3, r3
   174ae:	220c      	movs	r2, #12
   174b0:	2110      	movs	r1, #16
   174b2:	468c      	mov	ip, r1
   174b4:	44bc      	add	ip, r7
   174b6:	4462      	add	r2, ip
   174b8:	0011      	movs	r1, r2
   174ba:	0018      	movs	r0, r3
   174bc:	4b96      	ldr	r3, [pc, #600]	; (17718 <_i2c_master_set_config+0x34c>)
   174be:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   174c0:	693b      	ldr	r3, [r7, #16]
   174c2:	8a9a      	ldrh	r2, [r3, #20]
   174c4:	697b      	ldr	r3, [r7, #20]
   174c6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   174c8:	693b      	ldr	r3, [r7, #16]
   174ca:	8ada      	ldrh	r2, [r3, #22]
   174cc:	697b      	ldr	r3, [r7, #20]
   174ce:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   174d0:	693b      	ldr	r3, [r7, #16]
   174d2:	7e1b      	ldrb	r3, [r3, #24]
   174d4:	2b00      	cmp	r3, #0
   174d6:	d103      	bne.n	174e0 <_i2c_master_set_config+0x114>
   174d8:	4b90      	ldr	r3, [pc, #576]	; (1771c <_i2c_master_set_config+0x350>)
   174da:	4798      	blx	r3
   174dc:	1e03      	subs	r3, r0, #0
   174de:	d002      	beq.n	174e6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   174e0:	2380      	movs	r3, #128	; 0x80
   174e2:	657b      	str	r3, [r7, #84]	; 0x54
   174e4:	e001      	b.n	174ea <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   174e6:	2300      	movs	r3, #0
   174e8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   174ea:	693b      	ldr	r3, [r7, #16]
   174ec:	691b      	ldr	r3, [r3, #16]
   174ee:	2b00      	cmp	r3, #0
   174f0:	d004      	beq.n	174fc <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   174f2:	693b      	ldr	r3, [r7, #16]
   174f4:	691b      	ldr	r3, [r3, #16]
   174f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   174f8:	4313      	orrs	r3, r2
   174fa:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   174fc:	693b      	ldr	r3, [r7, #16]
   174fe:	689b      	ldr	r3, [r3, #8]
   17500:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17502:	4313      	orrs	r3, r2
   17504:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   17506:	693b      	ldr	r3, [r7, #16]
   17508:	2224      	movs	r2, #36	; 0x24
   1750a:	5c9b      	ldrb	r3, [r3, r2]
   1750c:	2b00      	cmp	r3, #0
   1750e:	d004      	beq.n	1751a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   17510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17512:	2280      	movs	r2, #128	; 0x80
   17514:	05d2      	lsls	r2, r2, #23
   17516:	4313      	orrs	r3, r2
   17518:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1751a:	693b      	ldr	r3, [r7, #16]
   1751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1751e:	2b00      	cmp	r3, #0
   17520:	d004      	beq.n	1752c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   17522:	693b      	ldr	r3, [r7, #16]
   17524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17526:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17528:	4313      	orrs	r3, r2
   1752a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   1752c:	693b      	ldr	r3, [r7, #16]
   1752e:	222c      	movs	r2, #44	; 0x2c
   17530:	5c9b      	ldrb	r3, [r3, r2]
   17532:	2b00      	cmp	r3, #0
   17534:	d105      	bne.n	17542 <_i2c_master_set_config+0x176>
   17536:	693b      	ldr	r3, [r7, #16]
   17538:	689a      	ldr	r2, [r3, #8]
   1753a:	2380      	movs	r3, #128	; 0x80
   1753c:	049b      	lsls	r3, r3, #18
   1753e:	429a      	cmp	r2, r3
   17540:	d104      	bne.n	1754c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   17542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17544:	2280      	movs	r2, #128	; 0x80
   17546:	0512      	lsls	r2, r2, #20
   17548:	4313      	orrs	r3, r2
   1754a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   1754c:	693b      	ldr	r3, [r7, #16]
   1754e:	222d      	movs	r2, #45	; 0x2d
   17550:	5c9b      	ldrb	r3, [r3, r2]
   17552:	2b00      	cmp	r3, #0
   17554:	d004      	beq.n	17560 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   17556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17558:	2280      	movs	r2, #128	; 0x80
   1755a:	0412      	lsls	r2, r2, #16
   1755c:	4313      	orrs	r3, r2
   1755e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   17560:	693b      	ldr	r3, [r7, #16]
   17562:	222e      	movs	r2, #46	; 0x2e
   17564:	5c9b      	ldrb	r3, [r3, r2]
   17566:	2b00      	cmp	r3, #0
   17568:	d004      	beq.n	17574 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1756a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1756c:	2280      	movs	r2, #128	; 0x80
   1756e:	03d2      	lsls	r2, r2, #15
   17570:	4313      	orrs	r3, r2
   17572:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   17574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17576:	681a      	ldr	r2, [r3, #0]
   17578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1757a:	431a      	orrs	r2, r3
   1757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1757e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   17580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17582:	2280      	movs	r2, #128	; 0x80
   17584:	0052      	lsls	r2, r2, #1
   17586:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   17588:	2323      	movs	r3, #35	; 0x23
   1758a:	2210      	movs	r2, #16
   1758c:	4694      	mov	ip, r2
   1758e:	44bc      	add	ip, r7
   17590:	4463      	add	r3, ip
   17592:	781b      	ldrb	r3, [r3, #0]
   17594:	3314      	adds	r3, #20
   17596:	b2db      	uxtb	r3, r3
   17598:	0018      	movs	r0, r3
   1759a:	4b61      	ldr	r3, [pc, #388]	; (17720 <_i2c_master_set_config+0x354>)
   1759c:	4798      	blx	r3
   1759e:	0003      	movs	r3, r0
   175a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   175a2:	693b      	ldr	r3, [r7, #16]
   175a4:	681b      	ldr	r3, [r3, #0]
   175a6:	22fa      	movs	r2, #250	; 0xfa
   175a8:	0092      	lsls	r2, r2, #2
   175aa:	4353      	muls	r3, r2
   175ac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   175ae:	693b      	ldr	r3, [r7, #16]
   175b0:	685b      	ldr	r3, [r3, #4]
   175b2:	22fa      	movs	r2, #250	; 0xfa
   175b4:	0092      	lsls	r2, r2, #2
   175b6:	4353      	muls	r3, r2
   175b8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   175ba:	693b      	ldr	r3, [r7, #16]
   175bc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   175be:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   175c0:	4b58      	ldr	r3, [pc, #352]	; (17724 <_i2c_master_set_config+0x358>)
   175c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   175c4:	4798      	blx	r3
   175c6:	0005      	movs	r5, r0
   175c8:	000e      	movs	r6, r1
   175ca:	4b56      	ldr	r3, [pc, #344]	; (17724 <_i2c_master_set_config+0x358>)
   175cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   175ce:	4798      	blx	r3
   175d0:	60b8      	str	r0, [r7, #8]
   175d2:	60f9      	str	r1, [r7, #12]
   175d4:	4b53      	ldr	r3, [pc, #332]	; (17724 <_i2c_master_set_config+0x358>)
   175d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   175d8:	4798      	blx	r3
   175da:	4c53      	ldr	r4, [pc, #332]	; (17728 <_i2c_master_set_config+0x35c>)
   175dc:	4a53      	ldr	r2, [pc, #332]	; (1772c <_i2c_master_set_config+0x360>)
   175de:	4b54      	ldr	r3, [pc, #336]	; (17730 <_i2c_master_set_config+0x364>)
   175e0:	47a0      	blx	r4
   175e2:	0003      	movs	r3, r0
   175e4:	000c      	movs	r4, r1
   175e6:	603b      	str	r3, [r7, #0]
   175e8:	607c      	str	r4, [r7, #4]
   175ea:	4b4e      	ldr	r3, [pc, #312]	; (17724 <_i2c_master_set_config+0x358>)
   175ec:	6a38      	ldr	r0, [r7, #32]
   175ee:	4798      	blx	r3
   175f0:	0002      	movs	r2, r0
   175f2:	000b      	movs	r3, r1
   175f4:	4c4c      	ldr	r4, [pc, #304]	; (17728 <_i2c_master_set_config+0x35c>)
   175f6:	6838      	ldr	r0, [r7, #0]
   175f8:	6879      	ldr	r1, [r7, #4]
   175fa:	47a0      	blx	r4
   175fc:	0003      	movs	r3, r0
   175fe:	000c      	movs	r4, r1
   17600:	0018      	movs	r0, r3
   17602:	0021      	movs	r1, r4
   17604:	4c4b      	ldr	r4, [pc, #300]	; (17734 <_i2c_master_set_config+0x368>)
   17606:	2200      	movs	r2, #0
   17608:	4b4b      	ldr	r3, [pc, #300]	; (17738 <_i2c_master_set_config+0x36c>)
   1760a:	47a0      	blx	r4
   1760c:	0003      	movs	r3, r0
   1760e:	000c      	movs	r4, r1
   17610:	001a      	movs	r2, r3
   17612:	0023      	movs	r3, r4
   17614:	4c44      	ldr	r4, [pc, #272]	; (17728 <_i2c_master_set_config+0x35c>)
   17616:	68b8      	ldr	r0, [r7, #8]
   17618:	68f9      	ldr	r1, [r7, #12]
   1761a:	47a0      	blx	r4
   1761c:	0003      	movs	r3, r0
   1761e:	000c      	movs	r4, r1
   17620:	001a      	movs	r2, r3
   17622:	0023      	movs	r3, r4
   17624:	4c45      	ldr	r4, [pc, #276]	; (1773c <_i2c_master_set_config+0x370>)
   17626:	0028      	movs	r0, r5
   17628:	0031      	movs	r1, r6
   1762a:	47a0      	blx	r4
   1762c:	0003      	movs	r3, r0
   1762e:	000c      	movs	r4, r1
   17630:	001d      	movs	r5, r3
   17632:	0026      	movs	r6, r4
   17634:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17636:	005a      	lsls	r2, r3, #1
   17638:	4b3a      	ldr	r3, [pc, #232]	; (17724 <_i2c_master_set_config+0x358>)
   1763a:	0010      	movs	r0, r2
   1763c:	4798      	blx	r3
   1763e:	0002      	movs	r2, r0
   17640:	000b      	movs	r3, r1
   17642:	4c3c      	ldr	r4, [pc, #240]	; (17734 <_i2c_master_set_config+0x368>)
   17644:	0028      	movs	r0, r5
   17646:	0031      	movs	r1, r6
   17648:	47a0      	blx	r4
   1764a:	0003      	movs	r3, r0
   1764c:	000c      	movs	r4, r1
   1764e:	0018      	movs	r0, r3
   17650:	0021      	movs	r1, r4
   17652:	4c3a      	ldr	r4, [pc, #232]	; (1773c <_i2c_master_set_config+0x370>)
   17654:	2200      	movs	r2, #0
   17656:	4b3a      	ldr	r3, [pc, #232]	; (17740 <_i2c_master_set_config+0x374>)
   17658:	47a0      	blx	r4
   1765a:	0003      	movs	r3, r0
   1765c:	000c      	movs	r4, r1
   1765e:	001d      	movs	r5, r3
   17660:	0026      	movs	r6, r4
   17662:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17664:	005a      	lsls	r2, r3, #1
   17666:	4b2f      	ldr	r3, [pc, #188]	; (17724 <_i2c_master_set_config+0x358>)
   17668:	0010      	movs	r0, r2
   1766a:	4798      	blx	r3
   1766c:	0002      	movs	r2, r0
   1766e:	000b      	movs	r3, r1
   17670:	4c34      	ldr	r4, [pc, #208]	; (17744 <_i2c_master_set_config+0x378>)
   17672:	0028      	movs	r0, r5
   17674:	0031      	movs	r1, r6
   17676:	47a0      	blx	r4
   17678:	0003      	movs	r3, r0
   1767a:	000c      	movs	r4, r1
   1767c:	0019      	movs	r1, r3
   1767e:	0022      	movs	r2, r4
   17680:	4b31      	ldr	r3, [pc, #196]	; (17748 <_i2c_master_set_config+0x37c>)
   17682:	0008      	movs	r0, r1
   17684:	0011      	movs	r1, r2
   17686:	4798      	blx	r3
   17688:	0003      	movs	r3, r0
   1768a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   1768c:	693b      	ldr	r3, [r7, #16]
   1768e:	689a      	ldr	r2, [r3, #8]
   17690:	2380      	movs	r3, #128	; 0x80
   17692:	049b      	lsls	r3, r3, #18
   17694:	429a      	cmp	r2, r3
   17696:	d16a      	bne.n	1776e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   17698:	4b22      	ldr	r3, [pc, #136]	; (17724 <_i2c_master_set_config+0x358>)
   1769a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1769c:	4798      	blx	r3
   1769e:	4c25      	ldr	r4, [pc, #148]	; (17734 <_i2c_master_set_config+0x368>)
   176a0:	0002      	movs	r2, r0
   176a2:	000b      	movs	r3, r1
   176a4:	47a0      	blx	r4
   176a6:	0003      	movs	r3, r0
   176a8:	000c      	movs	r4, r1
   176aa:	001d      	movs	r5, r3
   176ac:	0026      	movs	r6, r4
   176ae:	4b1d      	ldr	r3, [pc, #116]	; (17724 <_i2c_master_set_config+0x358>)
   176b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   176b2:	4798      	blx	r3
   176b4:	4c1c      	ldr	r4, [pc, #112]	; (17728 <_i2c_master_set_config+0x35c>)
   176b6:	2200      	movs	r2, #0
   176b8:	4b24      	ldr	r3, [pc, #144]	; (1774c <_i2c_master_set_config+0x380>)
   176ba:	47a0      	blx	r4
   176bc:	0003      	movs	r3, r0
   176be:	000c      	movs	r4, r1
   176c0:	001a      	movs	r2, r3
   176c2:	0023      	movs	r3, r4
   176c4:	4c1f      	ldr	r4, [pc, #124]	; (17744 <_i2c_master_set_config+0x378>)
   176c6:	0028      	movs	r0, r5
   176c8:	0031      	movs	r1, r6
   176ca:	47a0      	blx	r4
   176cc:	0003      	movs	r3, r0
   176ce:	000c      	movs	r4, r1
   176d0:	0018      	movs	r0, r3
   176d2:	0021      	movs	r1, r4
   176d4:	4c19      	ldr	r4, [pc, #100]	; (1773c <_i2c_master_set_config+0x370>)
   176d6:	2200      	movs	r2, #0
   176d8:	4b19      	ldr	r3, [pc, #100]	; (17740 <_i2c_master_set_config+0x374>)
   176da:	47a0      	blx	r4
   176dc:	0003      	movs	r3, r0
   176de:	000c      	movs	r4, r1
   176e0:	0019      	movs	r1, r3
   176e2:	0022      	movs	r2, r4
   176e4:	4b18      	ldr	r3, [pc, #96]	; (17748 <_i2c_master_set_config+0x37c>)
   176e6:	0008      	movs	r0, r1
   176e8:	0011      	movs	r1, r2
   176ea:	4798      	blx	r3
   176ec:	0003      	movs	r3, r0
   176ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   176f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   176f2:	2b00      	cmp	r3, #0
   176f4:	d02e      	beq.n	17754 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   176f6:	4b16      	ldr	r3, [pc, #88]	; (17750 <_i2c_master_set_config+0x384>)
   176f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   176fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   176fc:	4798      	blx	r3
   176fe:	0003      	movs	r3, r0
   17700:	1e9a      	subs	r2, r3, #2
   17702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17704:	1ad3      	subs	r3, r2, r3
   17706:	653b      	str	r3, [r7, #80]	; 0x50
   17708:	e031      	b.n	1776e <_i2c_master_set_config+0x3a2>
   1770a:	46c0      	nop			; (mov r8, r8)
   1770c:	00026fdd 	.word	0x00026fdd
   17710:	0001728d 	.word	0x0001728d
   17714:	00026e21 	.word	0x00026e21
   17718:	00029bcd 	.word	0x00029bcd
   1771c:	000172b5 	.word	0x000172b5
   17720:	00029991 	.word	0x00029991
   17724:	0003422d 	.word	0x0003422d
   17728:	00033699 	.word	0x00033699
   1772c:	e826d695 	.word	0xe826d695
   17730:	3e112e0b 	.word	0x3e112e0b
   17734:	00032a11 	.word	0x00032a11
   17738:	40240000 	.word	0x40240000
   1773c:	00033b99 	.word	0x00033b99
   17740:	3ff00000 	.word	0x3ff00000
   17744:	00033031 	.word	0x00033031
   17748:	000341c5 	.word	0x000341c5
   1774c:	40080000 	.word	0x40080000
   17750:	000323b1 	.word	0x000323b1
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   17754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17756:	005a      	lsls	r2, r3, #1
   17758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1775a:	18d3      	adds	r3, r2, r3
   1775c:	1e5a      	subs	r2, r3, #1
   1775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17760:	0059      	lsls	r1, r3, #1
   17762:	4b1d      	ldr	r3, [pc, #116]	; (177d8 <_i2c_master_set_config+0x40c>)
   17764:	0010      	movs	r0, r2
   17766:	4798      	blx	r3
   17768:	0003      	movs	r3, r0
   1776a:	3b01      	subs	r3, #1
   1776c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   1776e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17770:	2bff      	cmp	r3, #255	; 0xff
   17772:	dc08      	bgt.n	17786 <_i2c_master_set_config+0x3ba>
   17774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17776:	2b00      	cmp	r3, #0
   17778:	db05      	blt.n	17786 <_i2c_master_set_config+0x3ba>
   1777a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1777c:	2bff      	cmp	r3, #255	; 0xff
   1777e:	dc02      	bgt.n	17786 <_i2c_master_set_config+0x3ba>
   17780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   17782:	2b00      	cmp	r3, #0
   17784:	da06      	bge.n	17794 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   17786:	233b      	movs	r3, #59	; 0x3b
   17788:	2210      	movs	r2, #16
   1778a:	4694      	mov	ip, r2
   1778c:	44bc      	add	ip, r7
   1778e:	4463      	add	r3, ip
   17790:	2240      	movs	r2, #64	; 0x40
   17792:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   17794:	233b      	movs	r3, #59	; 0x3b
   17796:	2210      	movs	r2, #16
   17798:	4694      	mov	ip, r2
   1779a:	44bc      	add	ip, r7
   1779c:	4463      	add	r3, ip
   1779e:	781b      	ldrb	r3, [r3, #0]
   177a0:	2b40      	cmp	r3, #64	; 0x40
   177a2:	d00e      	beq.n	177c2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   177a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   177a6:	22ff      	movs	r2, #255	; 0xff
   177a8:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   177aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   177ac:	041b      	lsls	r3, r3, #16
   177ae:	0019      	movs	r1, r3
   177b0:	23ff      	movs	r3, #255	; 0xff
   177b2:	041b      	lsls	r3, r3, #16
   177b4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   177b6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   177b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   177ba:	0612      	lsls	r2, r2, #24
   177bc:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   177be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   177c0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   177c2:	233b      	movs	r3, #59	; 0x3b
   177c4:	2210      	movs	r2, #16
   177c6:	4694      	mov	ip, r2
   177c8:	44bc      	add	ip, r7
   177ca:	4463      	add	r3, ip
   177cc:	781b      	ldrb	r3, [r3, #0]
}
   177ce:	0018      	movs	r0, r3
   177d0:	46bd      	mov	sp, r7
   177d2:	b017      	add	sp, #92	; 0x5c
   177d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   177d6:	46c0      	nop			; (mov r8, r8)
   177d8:	000323b1 	.word	0x000323b1

000177dc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   177dc:	b590      	push	{r4, r7, lr}
   177de:	b08b      	sub	sp, #44	; 0x2c
   177e0:	af00      	add	r7, sp, #0
   177e2:	60f8      	str	r0, [r7, #12]
   177e4:	60b9      	str	r1, [r7, #8]
   177e6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   177e8:	68fb      	ldr	r3, [r7, #12]
   177ea:	68ba      	ldr	r2, [r7, #8]
   177ec:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   177ee:	68fb      	ldr	r3, [r7, #12]
   177f0:	681b      	ldr	r3, [r3, #0]
   177f2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   177f4:	68fb      	ldr	r3, [r7, #12]
   177f6:	681b      	ldr	r3, [r3, #0]
   177f8:	0018      	movs	r0, r3
   177fa:	4b3b      	ldr	r3, [pc, #236]	; (178e8 <i2c_master_init+0x10c>)
   177fc:	4798      	blx	r3
   177fe:	0003      	movs	r3, r0
   17800:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   17802:	6a3b      	ldr	r3, [r7, #32]
   17804:	3302      	adds	r3, #2
   17806:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   17808:	6a3b      	ldr	r3, [r7, #32]
   1780a:	3314      	adds	r3, #20
   1780c:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   1780e:	2201      	movs	r2, #1
   17810:	69fb      	ldr	r3, [r7, #28]
   17812:	409a      	lsls	r2, r3
   17814:	0013      	movs	r3, r2
   17816:	0019      	movs	r1, r3
   17818:	2002      	movs	r0, #2
   1781a:	4b34      	ldr	r3, [pc, #208]	; (178ec <i2c_master_init+0x110>)
   1781c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1781e:	2314      	movs	r3, #20
   17820:	18fb      	adds	r3, r7, r3
   17822:	0018      	movs	r0, r3
   17824:	4b32      	ldr	r3, [pc, #200]	; (178f0 <i2c_master_init+0x114>)
   17826:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   17828:	687b      	ldr	r3, [r7, #4]
   1782a:	7b1a      	ldrb	r2, [r3, #12]
   1782c:	2314      	movs	r3, #20
   1782e:	18fb      	adds	r3, r7, r3
   17830:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   17832:	69bb      	ldr	r3, [r7, #24]
   17834:	b2db      	uxtb	r3, r3
   17836:	2214      	movs	r2, #20
   17838:	18ba      	adds	r2, r7, r2
   1783a:	0011      	movs	r1, r2
   1783c:	0018      	movs	r0, r3
   1783e:	4b2d      	ldr	r3, [pc, #180]	; (178f4 <i2c_master_init+0x118>)
   17840:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   17842:	69bb      	ldr	r3, [r7, #24]
   17844:	b2db      	uxtb	r3, r3
   17846:	0018      	movs	r0, r3
   17848:	4b2b      	ldr	r3, [pc, #172]	; (178f8 <i2c_master_init+0x11c>)
   1784a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1784c:	687b      	ldr	r3, [r7, #4]
   1784e:	7b1b      	ldrb	r3, [r3, #12]
   17850:	2100      	movs	r1, #0
   17852:	0018      	movs	r0, r3
   17854:	4b29      	ldr	r3, [pc, #164]	; (178fc <i2c_master_init+0x120>)
   17856:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   17858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1785a:	681b      	ldr	r3, [r3, #0]
   1785c:	2202      	movs	r2, #2
   1785e:	4013      	ands	r3, r2
   17860:	d001      	beq.n	17866 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   17862:	231c      	movs	r3, #28
   17864:	e03b      	b.n	178de <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   17866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17868:	681b      	ldr	r3, [r3, #0]
   1786a:	2201      	movs	r2, #1
   1786c:	4013      	ands	r3, r2
   1786e:	d001      	beq.n	17874 <i2c_master_init+0x98>
		return STATUS_BUSY;
   17870:	2305      	movs	r3, #5
   17872:	e034      	b.n	178de <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   17874:	68fb      	ldr	r3, [r7, #12]
   17876:	681b      	ldr	r3, [r3, #0]
   17878:	2217      	movs	r2, #23
   1787a:	18bc      	adds	r4, r7, r2
   1787c:	0018      	movs	r0, r3
   1787e:	4b1a      	ldr	r3, [pc, #104]	; (178e8 <i2c_master_init+0x10c>)
   17880:	4798      	blx	r3
   17882:	0003      	movs	r3, r0
   17884:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   17886:	4a1e      	ldr	r2, [pc, #120]	; (17900 <i2c_master_init+0x124>)
   17888:	2317      	movs	r3, #23
   1788a:	18fb      	adds	r3, r7, r3
   1788c:	781b      	ldrb	r3, [r3, #0]
   1788e:	0011      	movs	r1, r2
   17890:	0018      	movs	r0, r3
   17892:	4b1c      	ldr	r3, [pc, #112]	; (17904 <i2c_master_init+0x128>)
   17894:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   17896:	2317      	movs	r3, #23
   17898:	18fb      	adds	r3, r7, r3
   1789a:	781a      	ldrb	r2, [r3, #0]
   1789c:	4b1a      	ldr	r3, [pc, #104]	; (17908 <i2c_master_init+0x12c>)
   1789e:	0092      	lsls	r2, r2, #2
   178a0:	68f9      	ldr	r1, [r7, #12]
   178a2:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   178a4:	68fb      	ldr	r3, [r7, #12]
   178a6:	2200      	movs	r2, #0
   178a8:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   178aa:	68fb      	ldr	r3, [r7, #12]
   178ac:	2200      	movs	r2, #0
   178ae:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   178b0:	68fb      	ldr	r3, [r7, #12]
   178b2:	2200      	movs	r2, #0
   178b4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   178b6:	68fb      	ldr	r3, [r7, #12]
   178b8:	2200      	movs	r2, #0
   178ba:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   178bc:	68fb      	ldr	r3, [r7, #12]
   178be:	2225      	movs	r2, #37	; 0x25
   178c0:	2100      	movs	r1, #0
   178c2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   178c4:	68fb      	ldr	r3, [r7, #12]
   178c6:	2200      	movs	r2, #0
   178c8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   178ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   178cc:	2214      	movs	r2, #20
   178ce:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   178d0:	687a      	ldr	r2, [r7, #4]
   178d2:	68fb      	ldr	r3, [r7, #12]
   178d4:	0011      	movs	r1, r2
   178d6:	0018      	movs	r0, r3
   178d8:	4b0c      	ldr	r3, [pc, #48]	; (1790c <i2c_master_init+0x130>)
   178da:	4798      	blx	r3
   178dc:	0003      	movs	r3, r0
}
   178de:	0018      	movs	r0, r3
   178e0:	46bd      	mov	sp, r7
   178e2:	b00b      	add	sp, #44	; 0x2c
   178e4:	bd90      	pop	{r4, r7, pc}
   178e6:	46c0      	nop			; (mov r8, r8)
   178e8:	00026fdd 	.word	0x00026fdd
   178ec:	00017231 	.word	0x00017231
   178f0:	00017219 	.word	0x00017219
   178f4:	0002986d 	.word	0x0002986d
   178f8:	000298b1 	.word	0x000298b1
   178fc:	00026d95 	.word	0x00026d95
   17900:	00012bcd 	.word	0x00012bcd
   17904:	00027041 	.word	0x00027041
   17908:	20005784 	.word	0x20005784
   1790c:	000173cd 	.word	0x000173cd

00017910 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   17910:	b580      	push	{r7, lr}
   17912:	b084      	sub	sp, #16
   17914:	af00      	add	r7, sp, #0
   17916:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17918:	687b      	ldr	r3, [r7, #4]
   1791a:	681b      	ldr	r3, [r3, #0]
   1791c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1791e:	687b      	ldr	r3, [r7, #4]
   17920:	0018      	movs	r0, r3
   17922:	4b0f      	ldr	r3, [pc, #60]	; (17960 <i2c_master_reset+0x50>)
   17924:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   17926:	687b      	ldr	r3, [r7, #4]
   17928:	0018      	movs	r0, r3
   1792a:	4b0e      	ldr	r3, [pc, #56]	; (17964 <i2c_master_reset+0x54>)
   1792c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1792e:	4b0e      	ldr	r3, [pc, #56]	; (17968 <i2c_master_reset+0x58>)
   17930:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   17932:	687b      	ldr	r3, [r7, #4]
   17934:	681b      	ldr	r3, [r3, #0]
   17936:	0018      	movs	r0, r3
   17938:	4b0c      	ldr	r3, [pc, #48]	; (1796c <i2c_master_reset+0x5c>)
   1793a:	4798      	blx	r3
   1793c:	0003      	movs	r3, r0
   1793e:	0018      	movs	r0, r3
   17940:	4b0b      	ldr	r3, [pc, #44]	; (17970 <i2c_master_reset+0x60>)
   17942:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   17944:	4b0b      	ldr	r3, [pc, #44]	; (17974 <i2c_master_reset+0x64>)
   17946:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   17948:	687b      	ldr	r3, [r7, #4]
   1794a:	0018      	movs	r0, r3
   1794c:	4b04      	ldr	r3, [pc, #16]	; (17960 <i2c_master_reset+0x50>)
   1794e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   17950:	68fb      	ldr	r3, [r7, #12]
   17952:	2201      	movs	r2, #1
   17954:	601a      	str	r2, [r3, #0]
}
   17956:	46c0      	nop			; (mov r8, r8)
   17958:	46bd      	mov	sp, r7
   1795a:	b004      	add	sp, #16
   1795c:	bd80      	pop	{r7, pc}
   1795e:	46c0      	nop			; (mov r8, r8)
   17960:	00017351 	.word	0x00017351
   17964:	00017375 	.word	0x00017375
   17968:	000172d5 	.word	0x000172d5
   1796c:	000270ad 	.word	0x000270ad
   17970:	000299e9 	.word	0x000299e9
   17974:	000172e9 	.word	0x000172e9

00017978 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   17978:	b580      	push	{r7, lr}
   1797a:	b084      	sub	sp, #16
   1797c:	af00      	add	r7, sp, #0
   1797e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17980:	687b      	ldr	r3, [r7, #4]
   17982:	681b      	ldr	r3, [r3, #0]
   17984:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   17986:	68fb      	ldr	r3, [r7, #12]
   17988:	7e1b      	ldrb	r3, [r3, #24]
   1798a:	b2db      	uxtb	r3, r3
   1798c:	001a      	movs	r2, r3
   1798e:	2302      	movs	r3, #2
   17990:	4013      	ands	r3, r2
   17992:	d00b      	beq.n	179ac <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   17994:	68fb      	ldr	r3, [r7, #12]
   17996:	2202      	movs	r2, #2
   17998:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1799a:	68fb      	ldr	r3, [r7, #12]
   1799c:	8b5b      	ldrh	r3, [r3, #26]
   1799e:	b29b      	uxth	r3, r3
   179a0:	001a      	movs	r2, r3
   179a2:	2302      	movs	r3, #2
   179a4:	4013      	ands	r3, r2
   179a6:	d011      	beq.n	179cc <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   179a8:	2341      	movs	r3, #65	; 0x41
   179aa:	e010      	b.n	179ce <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   179ac:	68fb      	ldr	r3, [r7, #12]
   179ae:	8b5b      	ldrh	r3, [r3, #26]
   179b0:	b29b      	uxth	r3, r3
   179b2:	001a      	movs	r2, r3
   179b4:	2304      	movs	r3, #4
   179b6:	4013      	ands	r3, r2
   179b8:	d008      	beq.n	179cc <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   179ba:	68fb      	ldr	r3, [r7, #12]
   179bc:	685b      	ldr	r3, [r3, #4]
   179be:	22c0      	movs	r2, #192	; 0xc0
   179c0:	0292      	lsls	r2, r2, #10
   179c2:	431a      	orrs	r2, r3
   179c4:	68fb      	ldr	r3, [r7, #12]
   179c6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   179c8:	2318      	movs	r3, #24
   179ca:	e000      	b.n	179ce <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   179cc:	2300      	movs	r3, #0
}
   179ce:	0018      	movs	r0, r3
   179d0:	46bd      	mov	sp, r7
   179d2:	b004      	add	sp, #16
   179d4:	bd80      	pop	{r7, pc}

000179d6 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   179d6:	b580      	push	{r7, lr}
   179d8:	b084      	sub	sp, #16
   179da:	af00      	add	r7, sp, #0
   179dc:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   179de:	687b      	ldr	r3, [r7, #4]
   179e0:	681b      	ldr	r3, [r3, #0]
   179e2:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   179e4:	230e      	movs	r3, #14
   179e6:	18fb      	adds	r3, r7, r3
   179e8:	2200      	movs	r2, #0
   179ea:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   179ec:	e00f      	b.n	17a0e <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   179ee:	230e      	movs	r3, #14
   179f0:	18fb      	adds	r3, r7, r3
   179f2:	220e      	movs	r2, #14
   179f4:	18ba      	adds	r2, r7, r2
   179f6:	8812      	ldrh	r2, [r2, #0]
   179f8:	3201      	adds	r2, #1
   179fa:	801a      	strh	r2, [r3, #0]
   179fc:	687b      	ldr	r3, [r7, #4]
   179fe:	891b      	ldrh	r3, [r3, #8]
   17a00:	220e      	movs	r2, #14
   17a02:	18ba      	adds	r2, r7, r2
   17a04:	8812      	ldrh	r2, [r2, #0]
   17a06:	429a      	cmp	r2, r3
   17a08:	d301      	bcc.n	17a0e <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   17a0a:	2312      	movs	r3, #18
   17a0c:	e00e      	b.n	17a2c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17a0e:	68bb      	ldr	r3, [r7, #8]
   17a10:	7e1b      	ldrb	r3, [r3, #24]
   17a12:	b2db      	uxtb	r3, r3
   17a14:	001a      	movs	r2, r3
   17a16:	2301      	movs	r3, #1
   17a18:	4013      	ands	r3, r2
   17a1a:	d106      	bne.n	17a2a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   17a1c:	68bb      	ldr	r3, [r7, #8]
   17a1e:	7e1b      	ldrb	r3, [r3, #24]
   17a20:	b2db      	uxtb	r3, r3
   17a22:	001a      	movs	r2, r3
   17a24:	2302      	movs	r3, #2
   17a26:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   17a28:	d0e1      	beq.n	179ee <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   17a2a:	2300      	movs	r3, #0
}
   17a2c:	0018      	movs	r0, r3
   17a2e:	46bd      	mov	sp, r7
   17a30:	b004      	add	sp, #16
   17a32:	bd80      	pop	{r7, pc}

00017a34 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   17a34:	b590      	push	{r4, r7, lr}
   17a36:	b085      	sub	sp, #20
   17a38:	af00      	add	r7, sp, #0
   17a3a:	6078      	str	r0, [r7, #4]
   17a3c:	000a      	movs	r2, r1
   17a3e:	1cfb      	adds	r3, r7, #3
   17a40:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17a42:	687b      	ldr	r3, [r7, #4]
   17a44:	681b      	ldr	r3, [r3, #0]
   17a46:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   17a48:	68fb      	ldr	r3, [r7, #12]
   17a4a:	685b      	ldr	r3, [r3, #4]
   17a4c:	2280      	movs	r2, #128	; 0x80
   17a4e:	02d2      	lsls	r2, r2, #11
   17a50:	431a      	orrs	r2, r3
   17a52:	68fb      	ldr	r3, [r7, #12]
   17a54:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   17a56:	1cfb      	adds	r3, r7, #3
   17a58:	781a      	ldrb	r2, [r3, #0]
   17a5a:	68fb      	ldr	r3, [r7, #12]
   17a5c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   17a5e:	230b      	movs	r3, #11
   17a60:	18fc      	adds	r4, r7, r3
   17a62:	687b      	ldr	r3, [r7, #4]
   17a64:	0018      	movs	r0, r3
   17a66:	4b07      	ldr	r3, [pc, #28]	; (17a84 <_i2c_master_send_hs_master_code+0x50>)
   17a68:	4798      	blx	r3
   17a6a:	0003      	movs	r3, r0
   17a6c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   17a6e:	68fb      	ldr	r3, [r7, #12]
   17a70:	2201      	movs	r2, #1
   17a72:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   17a74:	230b      	movs	r3, #11
   17a76:	18fb      	adds	r3, r7, r3
   17a78:	781b      	ldrb	r3, [r3, #0]
}
   17a7a:	0018      	movs	r0, r3
   17a7c:	46bd      	mov	sp, r7
   17a7e:	b005      	add	sp, #20
   17a80:	bd90      	pop	{r4, r7, pc}
   17a82:	46c0      	nop			; (mov r8, r8)
   17a84:	000179d7 	.word	0x000179d7

00017a88 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   17a88:	b580      	push	{r7, lr}
   17a8a:	af00      	add	r7, sp, #0
   17a8c:	2000      	movs	r0, #0
   17a8e:	4b02      	ldr	r3, [pc, #8]	; (17a98 <TC3_Handler+0x10>)
   17a90:	4798      	blx	r3
   17a92:	46c0      	nop			; (mov r8, r8)
   17a94:	46bd      	mov	sp, r7
   17a96:	bd80      	pop	{r7, pc}
   17a98:	00017ac5 	.word	0x00017ac5

00017a9c <TC4_Handler>:
   17a9c:	b580      	push	{r7, lr}
   17a9e:	af00      	add	r7, sp, #0
   17aa0:	2001      	movs	r0, #1
   17aa2:	4b02      	ldr	r3, [pc, #8]	; (17aac <TC4_Handler+0x10>)
   17aa4:	4798      	blx	r3
   17aa6:	46c0      	nop			; (mov r8, r8)
   17aa8:	46bd      	mov	sp, r7
   17aaa:	bd80      	pop	{r7, pc}
   17aac:	00017ac5 	.word	0x00017ac5

00017ab0 <TC5_Handler>:
   17ab0:	b580      	push	{r7, lr}
   17ab2:	af00      	add	r7, sp, #0
   17ab4:	2002      	movs	r0, #2
   17ab6:	4b02      	ldr	r3, [pc, #8]	; (17ac0 <TC5_Handler+0x10>)
   17ab8:	4798      	blx	r3
   17aba:	46c0      	nop			; (mov r8, r8)
   17abc:	46bd      	mov	sp, r7
   17abe:	bd80      	pop	{r7, pc}
   17ac0:	00017ac5 	.word	0x00017ac5

00017ac4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   17ac4:	b580      	push	{r7, lr}
   17ac6:	b084      	sub	sp, #16
   17ac8:	af00      	add	r7, sp, #0
   17aca:	0002      	movs	r2, r0
   17acc:	1dfb      	adds	r3, r7, #7
   17ace:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   17ad0:	1dfb      	adds	r3, r7, #7
   17ad2:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   17ad4:	4b28      	ldr	r3, [pc, #160]	; (17b78 <_tc_interrupt_handler+0xb4>)
   17ad6:	0092      	lsls	r2, r2, #2
   17ad8:	58d3      	ldr	r3, [r2, r3]
   17ada:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17adc:	68fb      	ldr	r3, [r7, #12]
   17ade:	681b      	ldr	r3, [r3, #0]
   17ae0:	7b9b      	ldrb	r3, [r3, #14]
   17ae2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   17ae4:	68fa      	ldr	r2, [r7, #12]
   17ae6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17ae8:	4013      	ands	r3, r2
   17aea:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   17aec:	68fb      	ldr	r3, [r7, #12]
   17aee:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   17af0:	230b      	movs	r3, #11
   17af2:	18fb      	adds	r3, r7, r3
   17af4:	400a      	ands	r2, r1
   17af6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   17af8:	230b      	movs	r3, #11
   17afa:	18fb      	adds	r3, r7, r3
   17afc:	781b      	ldrb	r3, [r3, #0]
   17afe:	2201      	movs	r2, #1
   17b00:	4013      	ands	r3, r2
   17b02:	d008      	beq.n	17b16 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   17b04:	68fb      	ldr	r3, [r7, #12]
   17b06:	689b      	ldr	r3, [r3, #8]
   17b08:	68fa      	ldr	r2, [r7, #12]
   17b0a:	0010      	movs	r0, r2
   17b0c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   17b0e:	68fb      	ldr	r3, [r7, #12]
   17b10:	681b      	ldr	r3, [r3, #0]
   17b12:	2201      	movs	r2, #1
   17b14:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   17b16:	230b      	movs	r3, #11
   17b18:	18fb      	adds	r3, r7, r3
   17b1a:	781b      	ldrb	r3, [r3, #0]
   17b1c:	2202      	movs	r2, #2
   17b1e:	4013      	ands	r3, r2
   17b20:	d008      	beq.n	17b34 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   17b22:	68fb      	ldr	r3, [r7, #12]
   17b24:	68db      	ldr	r3, [r3, #12]
   17b26:	68fa      	ldr	r2, [r7, #12]
   17b28:	0010      	movs	r0, r2
   17b2a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   17b2c:	68fb      	ldr	r3, [r7, #12]
   17b2e:	681b      	ldr	r3, [r3, #0]
   17b30:	2202      	movs	r2, #2
   17b32:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   17b34:	230b      	movs	r3, #11
   17b36:	18fb      	adds	r3, r7, r3
   17b38:	781b      	ldrb	r3, [r3, #0]
   17b3a:	2210      	movs	r2, #16
   17b3c:	4013      	ands	r3, r2
   17b3e:	d008      	beq.n	17b52 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   17b40:	68fb      	ldr	r3, [r7, #12]
   17b42:	691b      	ldr	r3, [r3, #16]
   17b44:	68fa      	ldr	r2, [r7, #12]
   17b46:	0010      	movs	r0, r2
   17b48:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   17b4a:	68fb      	ldr	r3, [r7, #12]
   17b4c:	681b      	ldr	r3, [r3, #0]
   17b4e:	2210      	movs	r2, #16
   17b50:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   17b52:	230b      	movs	r3, #11
   17b54:	18fb      	adds	r3, r7, r3
   17b56:	781b      	ldrb	r3, [r3, #0]
   17b58:	2220      	movs	r2, #32
   17b5a:	4013      	ands	r3, r2
   17b5c:	d008      	beq.n	17b70 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   17b5e:	68fb      	ldr	r3, [r7, #12]
   17b60:	695b      	ldr	r3, [r3, #20]
   17b62:	68fa      	ldr	r2, [r7, #12]
   17b64:	0010      	movs	r0, r2
   17b66:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   17b68:	68fb      	ldr	r3, [r7, #12]
   17b6a:	681b      	ldr	r3, [r3, #0]
   17b6c:	2220      	movs	r2, #32
   17b6e:	739a      	strb	r2, [r3, #14]
	}
}
   17b70:	46c0      	nop			; (mov r8, r8)
   17b72:	46bd      	mov	sp, r7
   17b74:	b004      	add	sp, #16
   17b76:	bd80      	pop	{r7, pc}
   17b78:	2000456c 	.word	0x2000456c

00017b7c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   17b7c:	b580      	push	{r7, lr}
   17b7e:	b084      	sub	sp, #16
   17b80:	af00      	add	r7, sp, #0
   17b82:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   17b84:	2300      	movs	r3, #0
   17b86:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   17b88:	687b      	ldr	r3, [r7, #4]
   17b8a:	2b00      	cmp	r3, #0
   17b8c:	d101      	bne.n	17b92 <FreeRTOS_CLIRegisterCommand+0x16>
   17b8e:	b672      	cpsid	i
   17b90:	e7fe      	b.n	17b90 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   17b92:	2008      	movs	r0, #8
   17b94:	4b11      	ldr	r3, [pc, #68]	; (17bdc <FreeRTOS_CLIRegisterCommand+0x60>)
   17b96:	4798      	blx	r3
   17b98:	0003      	movs	r3, r0
   17b9a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   17b9c:	68bb      	ldr	r3, [r7, #8]
   17b9e:	2b00      	cmp	r3, #0
   17ba0:	d101      	bne.n	17ba6 <FreeRTOS_CLIRegisterCommand+0x2a>
   17ba2:	b672      	cpsid	i
   17ba4:	e7fe      	b.n	17ba4 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   17ba6:	68bb      	ldr	r3, [r7, #8]
   17ba8:	2b00      	cmp	r3, #0
   17baa:	d012      	beq.n	17bd2 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   17bac:	4b0c      	ldr	r3, [pc, #48]	; (17be0 <FreeRTOS_CLIRegisterCommand+0x64>)
   17bae:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   17bb0:	68bb      	ldr	r3, [r7, #8]
   17bb2:	687a      	ldr	r2, [r7, #4]
   17bb4:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   17bb6:	68bb      	ldr	r3, [r7, #8]
   17bb8:	2200      	movs	r2, #0
   17bba:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   17bbc:	4b09      	ldr	r3, [pc, #36]	; (17be4 <FreeRTOS_CLIRegisterCommand+0x68>)
   17bbe:	681b      	ldr	r3, [r3, #0]
   17bc0:	68ba      	ldr	r2, [r7, #8]
   17bc2:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   17bc4:	4b07      	ldr	r3, [pc, #28]	; (17be4 <FreeRTOS_CLIRegisterCommand+0x68>)
   17bc6:	68ba      	ldr	r2, [r7, #8]
   17bc8:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   17bca:	4b07      	ldr	r3, [pc, #28]	; (17be8 <FreeRTOS_CLIRegisterCommand+0x6c>)
   17bcc:	4798      	blx	r3

		xReturn = pdPASS;
   17bce:	2301      	movs	r3, #1
   17bd0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   17bd2:	68fb      	ldr	r3, [r7, #12]
}
   17bd4:	0018      	movs	r0, r3
   17bd6:	46bd      	mov	sp, r7
   17bd8:	b004      	add	sp, #16
   17bda:	bd80      	pop	{r7, pc}
   17bdc:	0001a041 	.word	0x0001a041
   17be0:	00019f09 	.word	0x00019f09
   17be4:	200000a8 	.word	0x200000a8
   17be8:	00019f2d 	.word	0x00019f2d

00017bec <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   17bec:	b580      	push	{r7, lr}
   17bee:	b088      	sub	sp, #32
   17bf0:	af00      	add	r7, sp, #0
   17bf2:	60f8      	str	r0, [r7, #12]
   17bf4:	60b9      	str	r1, [r7, #8]
   17bf6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   17bf8:	2301      	movs	r3, #1
   17bfa:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   17bfc:	4b3d      	ldr	r3, [pc, #244]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17bfe:	681b      	ldr	r3, [r3, #0]
   17c00:	2b00      	cmp	r3, #0
   17c02:	d144      	bne.n	17c8e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17c04:	4b3b      	ldr	r3, [pc, #236]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c06:	4a3c      	ldr	r2, [pc, #240]	; (17cf8 <FreeRTOS_CLIProcessCommand+0x10c>)
   17c08:	601a      	str	r2, [r3, #0]
   17c0a:	e03a      	b.n	17c82 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   17c0c:	4b39      	ldr	r3, [pc, #228]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c0e:	681b      	ldr	r3, [r3, #0]
   17c10:	681b      	ldr	r3, [r3, #0]
   17c12:	681b      	ldr	r3, [r3, #0]
   17c14:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   17c16:	69bb      	ldr	r3, [r7, #24]
   17c18:	0018      	movs	r0, r3
   17c1a:	4b38      	ldr	r3, [pc, #224]	; (17cfc <FreeRTOS_CLIProcessCommand+0x110>)
   17c1c:	4798      	blx	r3
   17c1e:	0003      	movs	r3, r0
   17c20:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   17c22:	68fa      	ldr	r2, [r7, #12]
   17c24:	697b      	ldr	r3, [r7, #20]
   17c26:	18d3      	adds	r3, r2, r3
   17c28:	781b      	ldrb	r3, [r3, #0]
   17c2a:	2b20      	cmp	r3, #32
   17c2c:	d005      	beq.n	17c3a <FreeRTOS_CLIProcessCommand+0x4e>
   17c2e:	68fa      	ldr	r2, [r7, #12]
   17c30:	697b      	ldr	r3, [r7, #20]
   17c32:	18d3      	adds	r3, r2, r3
   17c34:	781b      	ldrb	r3, [r3, #0]
   17c36:	2b00      	cmp	r3, #0
   17c38:	d11e      	bne.n	17c78 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   17c3a:	697a      	ldr	r2, [r7, #20]
   17c3c:	69b9      	ldr	r1, [r7, #24]
   17c3e:	68fb      	ldr	r3, [r7, #12]
   17c40:	0018      	movs	r0, r3
   17c42:	4b2f      	ldr	r3, [pc, #188]	; (17d00 <FreeRTOS_CLIProcessCommand+0x114>)
   17c44:	4798      	blx	r3
   17c46:	1e03      	subs	r3, r0, #0
   17c48:	d116      	bne.n	17c78 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   17c4a:	4b2a      	ldr	r3, [pc, #168]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c4c:	681b      	ldr	r3, [r3, #0]
   17c4e:	681b      	ldr	r3, [r3, #0]
   17c50:	7b1b      	ldrb	r3, [r3, #12]
   17c52:	b25b      	sxtb	r3, r3
   17c54:	2b00      	cmp	r3, #0
   17c56:	db19      	blt.n	17c8c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   17c58:	68fb      	ldr	r3, [r7, #12]
   17c5a:	0018      	movs	r0, r3
   17c5c:	4b29      	ldr	r3, [pc, #164]	; (17d04 <FreeRTOS_CLIProcessCommand+0x118>)
   17c5e:	4798      	blx	r3
   17c60:	0003      	movs	r3, r0
   17c62:	001a      	movs	r2, r3
   17c64:	4b23      	ldr	r3, [pc, #140]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c66:	681b      	ldr	r3, [r3, #0]
   17c68:	681b      	ldr	r3, [r3, #0]
   17c6a:	7b1b      	ldrb	r3, [r3, #12]
   17c6c:	b25b      	sxtb	r3, r3
   17c6e:	429a      	cmp	r2, r3
   17c70:	d00c      	beq.n	17c8c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   17c72:	2300      	movs	r3, #0
   17c74:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   17c76:	e009      	b.n	17c8c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   17c78:	4b1e      	ldr	r3, [pc, #120]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c7a:	681b      	ldr	r3, [r3, #0]
   17c7c:	685a      	ldr	r2, [r3, #4]
   17c7e:	4b1d      	ldr	r3, [pc, #116]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c80:	601a      	str	r2, [r3, #0]
   17c82:	4b1c      	ldr	r3, [pc, #112]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c84:	681b      	ldr	r3, [r3, #0]
   17c86:	2b00      	cmp	r3, #0
   17c88:	d1c0      	bne.n	17c0c <FreeRTOS_CLIProcessCommand+0x20>
   17c8a:	e000      	b.n	17c8e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   17c8c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   17c8e:	4b19      	ldr	r3, [pc, #100]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17c90:	681b      	ldr	r3, [r3, #0]
   17c92:	2b00      	cmp	r3, #0
   17c94:	d00c      	beq.n	17cb0 <FreeRTOS_CLIProcessCommand+0xc4>
   17c96:	69fb      	ldr	r3, [r7, #28]
   17c98:	2b00      	cmp	r3, #0
   17c9a:	d109      	bne.n	17cb0 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17c9c:	687a      	ldr	r2, [r7, #4]
   17c9e:	491a      	ldr	r1, [pc, #104]	; (17d08 <FreeRTOS_CLIProcessCommand+0x11c>)
   17ca0:	68bb      	ldr	r3, [r7, #8]
   17ca2:	0018      	movs	r0, r3
   17ca4:	4b19      	ldr	r3, [pc, #100]	; (17d0c <FreeRTOS_CLIProcessCommand+0x120>)
   17ca6:	4798      	blx	r3
		pxCommand = NULL;
   17ca8:	4b12      	ldr	r3, [pc, #72]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17caa:	2200      	movs	r2, #0
   17cac:	601a      	str	r2, [r3, #0]
   17cae:	e01c      	b.n	17cea <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   17cb0:	4b10      	ldr	r3, [pc, #64]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17cb2:	681b      	ldr	r3, [r3, #0]
   17cb4:	2b00      	cmp	r3, #0
   17cb6:	d010      	beq.n	17cda <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   17cb8:	4b0e      	ldr	r3, [pc, #56]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17cba:	681b      	ldr	r3, [r3, #0]
   17cbc:	681b      	ldr	r3, [r3, #0]
   17cbe:	689b      	ldr	r3, [r3, #8]
   17cc0:	68fa      	ldr	r2, [r7, #12]
   17cc2:	6879      	ldr	r1, [r7, #4]
   17cc4:	68b8      	ldr	r0, [r7, #8]
   17cc6:	4798      	blx	r3
   17cc8:	0003      	movs	r3, r0
   17cca:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   17ccc:	69fb      	ldr	r3, [r7, #28]
   17cce:	2b00      	cmp	r3, #0
   17cd0:	d10b      	bne.n	17cea <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   17cd2:	4b08      	ldr	r3, [pc, #32]	; (17cf4 <FreeRTOS_CLIProcessCommand+0x108>)
   17cd4:	2200      	movs	r2, #0
   17cd6:	601a      	str	r2, [r3, #0]
   17cd8:	e007      	b.n	17cea <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   17cda:	687a      	ldr	r2, [r7, #4]
   17cdc:	490c      	ldr	r1, [pc, #48]	; (17d10 <FreeRTOS_CLIProcessCommand+0x124>)
   17cde:	68bb      	ldr	r3, [r7, #8]
   17ce0:	0018      	movs	r0, r3
   17ce2:	4b0a      	ldr	r3, [pc, #40]	; (17d0c <FreeRTOS_CLIProcessCommand+0x120>)
   17ce4:	4798      	blx	r3
		xReturn = pdFALSE;
   17ce6:	2300      	movs	r3, #0
   17ce8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   17cea:	69fb      	ldr	r3, [r7, #28]
}
   17cec:	0018      	movs	r0, r3
   17cee:	46bd      	mov	sp, r7
   17cf0:	b008      	add	sp, #32
   17cf2:	bd80      	pop	{r7, pc}
   17cf4:	200008c0 	.word	0x200008c0
   17cf8:	200000a0 	.word	0x200000a0
   17cfc:	00034727 	.word	0x00034727
   17d00:	00034735 	.word	0x00034735
   17d04:	00017e25 	.word	0x00017e25
   17d08:	000365b8 	.word	0x000365b8
   17d0c:	00034757 	.word	0x00034757
   17d10:	00036610 	.word	0x00036610

00017d14 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
   17d14:	b580      	push	{r7, lr}
   17d16:	b086      	sub	sp, #24
   17d18:	af00      	add	r7, sp, #0
   17d1a:	60f8      	str	r0, [r7, #12]
   17d1c:	60b9      	str	r1, [r7, #8]
   17d1e:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
   17d20:	2300      	movs	r3, #0
   17d22:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
   17d24:	2300      	movs	r3, #0
   17d26:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
   17d28:	687b      	ldr	r3, [r7, #4]
   17d2a:	2200      	movs	r2, #0
   17d2c:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
   17d2e:	e03b      	b.n	17da8 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
   17d30:	68fb      	ldr	r3, [r7, #12]
   17d32:	3301      	adds	r3, #1
   17d34:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   17d36:	68fb      	ldr	r3, [r7, #12]
   17d38:	781b      	ldrb	r3, [r3, #0]
   17d3a:	2b00      	cmp	r3, #0
   17d3c:	d007      	beq.n	17d4e <FreeRTOS_CLIGetParameter+0x3a>
   17d3e:	68fb      	ldr	r3, [r7, #12]
   17d40:	781b      	ldrb	r3, [r3, #0]
   17d42:	2b20      	cmp	r3, #32
   17d44:	d1f4      	bne.n	17d30 <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   17d46:	e002      	b.n	17d4e <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
   17d48:	68fb      	ldr	r3, [r7, #12]
   17d4a:	3301      	adds	r3, #1
   17d4c:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   17d4e:	68fb      	ldr	r3, [r7, #12]
   17d50:	781b      	ldrb	r3, [r3, #0]
   17d52:	2b00      	cmp	r3, #0
   17d54:	d003      	beq.n	17d5e <FreeRTOS_CLIGetParameter+0x4a>
   17d56:	68fb      	ldr	r3, [r7, #12]
   17d58:	781b      	ldrb	r3, [r3, #0]
   17d5a:	2b20      	cmp	r3, #32
   17d5c:	d0f4      	beq.n	17d48 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
   17d5e:	68fb      	ldr	r3, [r7, #12]
   17d60:	781b      	ldrb	r3, [r3, #0]
   17d62:	2b00      	cmp	r3, #0
   17d64:	d025      	beq.n	17db2 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
   17d66:	697b      	ldr	r3, [r7, #20]
   17d68:	3301      	adds	r3, #1
   17d6a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
   17d6c:	697a      	ldr	r2, [r7, #20]
   17d6e:	68bb      	ldr	r3, [r7, #8]
   17d70:	429a      	cmp	r2, r3
   17d72:	d119      	bne.n	17da8 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
   17d74:	68fb      	ldr	r3, [r7, #12]
   17d76:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   17d78:	e007      	b.n	17d8a <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
   17d7a:	687b      	ldr	r3, [r7, #4]
   17d7c:	681b      	ldr	r3, [r3, #0]
   17d7e:	1c5a      	adds	r2, r3, #1
   17d80:	687b      	ldr	r3, [r7, #4]
   17d82:	601a      	str	r2, [r3, #0]
					pcCommandString++;
   17d84:	68fb      	ldr	r3, [r7, #12]
   17d86:	3301      	adds	r3, #1
   17d88:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   17d8a:	68fb      	ldr	r3, [r7, #12]
   17d8c:	781b      	ldrb	r3, [r3, #0]
   17d8e:	2b00      	cmp	r3, #0
   17d90:	d003      	beq.n	17d9a <FreeRTOS_CLIGetParameter+0x86>
   17d92:	68fb      	ldr	r3, [r7, #12]
   17d94:	781b      	ldrb	r3, [r3, #0]
   17d96:	2b20      	cmp	r3, #32
   17d98:	d1ef      	bne.n	17d7a <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
   17d9a:	687b      	ldr	r3, [r7, #4]
   17d9c:	681b      	ldr	r3, [r3, #0]
   17d9e:	2b00      	cmp	r3, #0
   17da0:	d109      	bne.n	17db6 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
   17da2:	2300      	movs	r3, #0
   17da4:	613b      	str	r3, [r7, #16]
				}

				break;
   17da6:	e006      	b.n	17db6 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
   17da8:	697a      	ldr	r2, [r7, #20]
   17daa:	68bb      	ldr	r3, [r7, #8]
   17dac:	429a      	cmp	r2, r3
   17dae:	d3c2      	bcc.n	17d36 <FreeRTOS_CLIGetParameter+0x22>
   17db0:	e002      	b.n	17db8 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
   17db2:	46c0      	nop			; (mov r8, r8)
   17db4:	e000      	b.n	17db8 <FreeRTOS_CLIGetParameter+0xa4>
				break;
   17db6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return pcReturn;
   17db8:	693b      	ldr	r3, [r7, #16]
}
   17dba:	0018      	movs	r0, r3
   17dbc:	46bd      	mov	sp, r7
   17dbe:	b006      	add	sp, #24
   17dc0:	bd80      	pop	{r7, pc}
	...

00017dc4 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   17dc4:	b580      	push	{r7, lr}
   17dc6:	b086      	sub	sp, #24
   17dc8:	af00      	add	r7, sp, #0
   17dca:	60f8      	str	r0, [r7, #12]
   17dcc:	60b9      	str	r1, [r7, #8]
   17dce:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   17dd0:	4b11      	ldr	r3, [pc, #68]	; (17e18 <prvHelpCommand+0x54>)
   17dd2:	681b      	ldr	r3, [r3, #0]
   17dd4:	2b00      	cmp	r3, #0
   17dd6:	d102      	bne.n	17dde <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   17dd8:	4b0f      	ldr	r3, [pc, #60]	; (17e18 <prvHelpCommand+0x54>)
   17dda:	4a10      	ldr	r2, [pc, #64]	; (17e1c <prvHelpCommand+0x58>)
   17ddc:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   17dde:	4b0e      	ldr	r3, [pc, #56]	; (17e18 <prvHelpCommand+0x54>)
   17de0:	681b      	ldr	r3, [r3, #0]
   17de2:	681b      	ldr	r3, [r3, #0]
   17de4:	6859      	ldr	r1, [r3, #4]
   17de6:	68ba      	ldr	r2, [r7, #8]
   17de8:	68fb      	ldr	r3, [r7, #12]
   17dea:	0018      	movs	r0, r3
   17dec:	4b0c      	ldr	r3, [pc, #48]	; (17e20 <prvHelpCommand+0x5c>)
   17dee:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   17df0:	4b09      	ldr	r3, [pc, #36]	; (17e18 <prvHelpCommand+0x54>)
   17df2:	681b      	ldr	r3, [r3, #0]
   17df4:	685a      	ldr	r2, [r3, #4]
   17df6:	4b08      	ldr	r3, [pc, #32]	; (17e18 <prvHelpCommand+0x54>)
   17df8:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   17dfa:	4b07      	ldr	r3, [pc, #28]	; (17e18 <prvHelpCommand+0x54>)
   17dfc:	681b      	ldr	r3, [r3, #0]
   17dfe:	2b00      	cmp	r3, #0
   17e00:	d102      	bne.n	17e08 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   17e02:	2300      	movs	r3, #0
   17e04:	617b      	str	r3, [r7, #20]
   17e06:	e001      	b.n	17e0c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   17e08:	2301      	movs	r3, #1
   17e0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   17e0c:	697b      	ldr	r3, [r7, #20]
}
   17e0e:	0018      	movs	r0, r3
   17e10:	46bd      	mov	sp, r7
   17e12:	b006      	add	sp, #24
   17e14:	bd80      	pop	{r7, pc}
   17e16:	46c0      	nop			; (mov r8, r8)
   17e18:	200008c4 	.word	0x200008c4
   17e1c:	200000a0 	.word	0x200000a0
   17e20:	00034757 	.word	0x00034757

00017e24 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   17e24:	b580      	push	{r7, lr}
   17e26:	b084      	sub	sp, #16
   17e28:	af00      	add	r7, sp, #0
   17e2a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   17e2c:	230f      	movs	r3, #15
   17e2e:	18fb      	adds	r3, r7, r3
   17e30:	2200      	movs	r2, #0
   17e32:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   17e34:	2300      	movs	r3, #0
   17e36:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   17e38:	e018      	b.n	17e6c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   17e3a:	687b      	ldr	r3, [r7, #4]
   17e3c:	781b      	ldrb	r3, [r3, #0]
   17e3e:	2b20      	cmp	r3, #32
   17e40:	d10f      	bne.n	17e62 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   17e42:	68bb      	ldr	r3, [r7, #8]
   17e44:	2b01      	cmp	r3, #1
   17e46:	d00e      	beq.n	17e66 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   17e48:	230f      	movs	r3, #15
   17e4a:	18fb      	adds	r3, r7, r3
   17e4c:	781b      	ldrb	r3, [r3, #0]
   17e4e:	b25b      	sxtb	r3, r3
   17e50:	b2db      	uxtb	r3, r3
   17e52:	3301      	adds	r3, #1
   17e54:	b2da      	uxtb	r2, r3
   17e56:	230f      	movs	r3, #15
   17e58:	18fb      	adds	r3, r7, r3
   17e5a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   17e5c:	2301      	movs	r3, #1
   17e5e:	60bb      	str	r3, [r7, #8]
   17e60:	e001      	b.n	17e66 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   17e62:	2300      	movs	r3, #0
   17e64:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   17e66:	687b      	ldr	r3, [r7, #4]
   17e68:	3301      	adds	r3, #1
   17e6a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   17e6c:	687b      	ldr	r3, [r7, #4]
   17e6e:	781b      	ldrb	r3, [r3, #0]
   17e70:	2b00      	cmp	r3, #0
   17e72:	d1e2      	bne.n	17e3a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   17e74:	68bb      	ldr	r3, [r7, #8]
   17e76:	2b01      	cmp	r3, #1
   17e78:	d109      	bne.n	17e8e <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   17e7a:	230f      	movs	r3, #15
   17e7c:	18fb      	adds	r3, r7, r3
   17e7e:	781b      	ldrb	r3, [r3, #0]
   17e80:	b25b      	sxtb	r3, r3
   17e82:	b2db      	uxtb	r3, r3
   17e84:	3b01      	subs	r3, #1
   17e86:	b2da      	uxtb	r2, r3
   17e88:	230f      	movs	r3, #15
   17e8a:	18fb      	adds	r3, r7, r3
   17e8c:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   17e8e:	230f      	movs	r3, #15
   17e90:	18fb      	adds	r3, r7, r3
   17e92:	781b      	ldrb	r3, [r3, #0]
   17e94:	b25b      	sxtb	r3, r3
}
   17e96:	0018      	movs	r0, r3
   17e98:	46bd      	mov	sp, r7
   17e9a:	b004      	add	sp, #16
   17e9c:	bd80      	pop	{r7, pc}
	...

00017ea0 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   17ea0:	b580      	push	{r7, lr}
   17ea2:	b082      	sub	sp, #8
   17ea4:	af00      	add	r7, sp, #0
   17ea6:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   17ea8:	687b      	ldr	r3, [r7, #4]
   17eaa:	0018      	movs	r0, r3
   17eac:	4b03      	ldr	r3, [pc, #12]	; (17ebc <prvTraceGetQueueNumber+0x1c>)
   17eae:	4798      	blx	r3
   17eb0:	0003      	movs	r3, r0
}
   17eb2:	0018      	movs	r0, r3
   17eb4:	46bd      	mov	sp, r7
   17eb6:	b002      	add	sp, #8
   17eb8:	bd80      	pop	{r7, pc}
   17eba:	46c0      	nop			; (mov r8, r8)
   17ebc:	0001b665 	.word	0x0001b665

00017ec0 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   17ec0:	b580      	push	{r7, lr}
   17ec2:	b082      	sub	sp, #8
   17ec4:	af00      	add	r7, sp, #0
   17ec6:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   17ec8:	687b      	ldr	r3, [r7, #4]
   17eca:	0018      	movs	r0, r3
   17ecc:	4b03      	ldr	r3, [pc, #12]	; (17edc <prvTraceGetQueueType+0x1c>)
   17ece:	4798      	blx	r3
   17ed0:	0003      	movs	r3, r0
}
   17ed2:	0018      	movs	r0, r3
   17ed4:	46bd      	mov	sp, r7
   17ed6:	b002      	add	sp, #8
   17ed8:	bd80      	pop	{r7, pc}
   17eda:	46c0      	nop			; (mov r8, r8)
   17edc:	0001b691 	.word	0x0001b691

00017ee0 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   17ee0:	b580      	push	{r7, lr}
   17ee2:	b082      	sub	sp, #8
   17ee4:	af00      	add	r7, sp, #0
   17ee6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   17ee8:	687b      	ldr	r3, [r7, #4]
   17eea:	0018      	movs	r0, r3
   17eec:	4b03      	ldr	r3, [pc, #12]	; (17efc <prvTraceGetTaskNumberLow16+0x1c>)
   17eee:	4798      	blx	r3
   17ef0:	0003      	movs	r3, r0
   17ef2:	b29b      	uxth	r3, r3
}
   17ef4:	0018      	movs	r0, r3
   17ef6:	46bd      	mov	sp, r7
   17ef8:	b002      	add	sp, #8
   17efa:	bd80      	pop	{r7, pc}
   17efc:	0001c9c1 	.word	0x0001c9c1

00017f00 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   17f00:	b580      	push	{r7, lr}
   17f02:	b082      	sub	sp, #8
   17f04:	af00      	add	r7, sp, #0
   17f06:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   17f08:	687b      	ldr	r3, [r7, #4]
   17f0a:	0018      	movs	r0, r3
   17f0c:	4b04      	ldr	r3, [pc, #16]	; (17f20 <prvTraceGetTaskNumberHigh16+0x20>)
   17f0e:	4798      	blx	r3
   17f10:	0003      	movs	r3, r0
   17f12:	0c1b      	lsrs	r3, r3, #16
   17f14:	b29b      	uxth	r3, r3
}
   17f16:	0018      	movs	r0, r3
   17f18:	46bd      	mov	sp, r7
   17f1a:	b002      	add	sp, #8
   17f1c:	bd80      	pop	{r7, pc}
   17f1e:	46c0      	nop			; (mov r8, r8)
   17f20:	0001c9c1 	.word	0x0001c9c1

00017f24 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   17f24:	b580      	push	{r7, lr}
   17f26:	b082      	sub	sp, #8
   17f28:	af00      	add	r7, sp, #0
   17f2a:	6078      	str	r0, [r7, #4]
   17f2c:	000a      	movs	r2, r1
   17f2e:	1cbb      	adds	r3, r7, #2
   17f30:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   17f32:	687b      	ldr	r3, [r7, #4]
   17f34:	0018      	movs	r0, r3
   17f36:	4b08      	ldr	r3, [pc, #32]	; (17f58 <prvTraceSetTaskNumberLow16+0x34>)
   17f38:	4798      	blx	r3
   17f3a:	0003      	movs	r3, r0
   17f3c:	0c1b      	lsrs	r3, r3, #16
   17f3e:	041a      	lsls	r2, r3, #16
   17f40:	1cbb      	adds	r3, r7, #2
   17f42:	881b      	ldrh	r3, [r3, #0]
   17f44:	431a      	orrs	r2, r3
   17f46:	687b      	ldr	r3, [r7, #4]
   17f48:	0011      	movs	r1, r2
   17f4a:	0018      	movs	r0, r3
   17f4c:	4b03      	ldr	r3, [pc, #12]	; (17f5c <prvTraceSetTaskNumberLow16+0x38>)
   17f4e:	4798      	blx	r3
}
   17f50:	46c0      	nop			; (mov r8, r8)
   17f52:	46bd      	mov	sp, r7
   17f54:	b002      	add	sp, #8
   17f56:	bd80      	pop	{r7, pc}
   17f58:	0001c9c1 	.word	0x0001c9c1
   17f5c:	0001c9e9 	.word	0x0001c9e9

00017f60 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   17f60:	b580      	push	{r7, lr}
   17f62:	b082      	sub	sp, #8
   17f64:	af00      	add	r7, sp, #0
   17f66:	6078      	str	r0, [r7, #4]
   17f68:	000a      	movs	r2, r1
   17f6a:	1cbb      	adds	r3, r7, #2
   17f6c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   17f6e:	687b      	ldr	r3, [r7, #4]
   17f70:	0018      	movs	r0, r3
   17f72:	4b09      	ldr	r3, [pc, #36]	; (17f98 <prvTraceSetTaskNumberHigh16+0x38>)
   17f74:	4798      	blx	r3
   17f76:	0003      	movs	r3, r0
   17f78:	041b      	lsls	r3, r3, #16
   17f7a:	0c1a      	lsrs	r2, r3, #16
   17f7c:	1cbb      	adds	r3, r7, #2
   17f7e:	881b      	ldrh	r3, [r3, #0]
   17f80:	041b      	lsls	r3, r3, #16
   17f82:	431a      	orrs	r2, r3
   17f84:	687b      	ldr	r3, [r7, #4]
   17f86:	0011      	movs	r1, r2
   17f88:	0018      	movs	r0, r3
   17f8a:	4b04      	ldr	r3, [pc, #16]	; (17f9c <prvTraceSetTaskNumberHigh16+0x3c>)
   17f8c:	4798      	blx	r3
}
   17f8e:	46c0      	nop			; (mov r8, r8)
   17f90:	46bd      	mov	sp, r7
   17f92:	b002      	add	sp, #8
   17f94:	bd80      	pop	{r7, pc}
   17f96:	46c0      	nop			; (mov r8, r8)
   17f98:	0001c9c1 	.word	0x0001c9c1
   17f9c:	0001c9e9 	.word	0x0001c9e9

00017fa0 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   17fa0:	b580      	push	{r7, lr}
   17fa2:	b082      	sub	sp, #8
   17fa4:	af00      	add	r7, sp, #0
   17fa6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   17fa8:	687b      	ldr	r3, [r7, #4]
   17faa:	0018      	movs	r0, r3
   17fac:	4b03      	ldr	r3, [pc, #12]	; (17fbc <prvTraceGetQueueNumberLow16+0x1c>)
   17fae:	4798      	blx	r3
   17fb0:	0003      	movs	r3, r0
   17fb2:	b29b      	uxth	r3, r3
}
   17fb4:	0018      	movs	r0, r3
   17fb6:	46bd      	mov	sp, r7
   17fb8:	b002      	add	sp, #8
   17fba:	bd80      	pop	{r7, pc}
   17fbc:	00017ea1 	.word	0x00017ea1

00017fc0 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   17fc0:	b580      	push	{r7, lr}
   17fc2:	b082      	sub	sp, #8
   17fc4:	af00      	add	r7, sp, #0
   17fc6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   17fc8:	687b      	ldr	r3, [r7, #4]
   17fca:	0018      	movs	r0, r3
   17fcc:	4b04      	ldr	r3, [pc, #16]	; (17fe0 <prvTraceGetQueueNumberHigh16+0x20>)
   17fce:	4798      	blx	r3
   17fd0:	0003      	movs	r3, r0
   17fd2:	0c1b      	lsrs	r3, r3, #16
   17fd4:	b29b      	uxth	r3, r3
}
   17fd6:	0018      	movs	r0, r3
   17fd8:	46bd      	mov	sp, r7
   17fda:	b002      	add	sp, #8
   17fdc:	bd80      	pop	{r7, pc}
   17fde:	46c0      	nop			; (mov r8, r8)
   17fe0:	00017ea1 	.word	0x00017ea1

00017fe4 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   17fe4:	b580      	push	{r7, lr}
   17fe6:	b082      	sub	sp, #8
   17fe8:	af00      	add	r7, sp, #0
   17fea:	6078      	str	r0, [r7, #4]
   17fec:	000a      	movs	r2, r1
   17fee:	1cbb      	adds	r3, r7, #2
   17ff0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   17ff2:	687b      	ldr	r3, [r7, #4]
   17ff4:	0018      	movs	r0, r3
   17ff6:	4b08      	ldr	r3, [pc, #32]	; (18018 <prvTraceSetQueueNumberLow16+0x34>)
   17ff8:	4798      	blx	r3
   17ffa:	0003      	movs	r3, r0
   17ffc:	0c1b      	lsrs	r3, r3, #16
   17ffe:	041a      	lsls	r2, r3, #16
   18000:	1cbb      	adds	r3, r7, #2
   18002:	881b      	ldrh	r3, [r3, #0]
   18004:	431a      	orrs	r2, r3
   18006:	687b      	ldr	r3, [r7, #4]
   18008:	0011      	movs	r1, r2
   1800a:	0018      	movs	r0, r3
   1800c:	4b03      	ldr	r3, [pc, #12]	; (1801c <prvTraceSetQueueNumberLow16+0x38>)
   1800e:	4798      	blx	r3
}
   18010:	46c0      	nop			; (mov r8, r8)
   18012:	46bd      	mov	sp, r7
   18014:	b002      	add	sp, #8
   18016:	bd80      	pop	{r7, pc}
   18018:	00017ea1 	.word	0x00017ea1
   1801c:	0001b679 	.word	0x0001b679

00018020 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   18020:	b580      	push	{r7, lr}
   18022:	b082      	sub	sp, #8
   18024:	af00      	add	r7, sp, #0
   18026:	6078      	str	r0, [r7, #4]
   18028:	000a      	movs	r2, r1
   1802a:	1cbb      	adds	r3, r7, #2
   1802c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   1802e:	687b      	ldr	r3, [r7, #4]
   18030:	0018      	movs	r0, r3
   18032:	4b09      	ldr	r3, [pc, #36]	; (18058 <prvTraceSetQueueNumberHigh16+0x38>)
   18034:	4798      	blx	r3
   18036:	0003      	movs	r3, r0
   18038:	041b      	lsls	r3, r3, #16
   1803a:	0c1a      	lsrs	r2, r3, #16
   1803c:	1cbb      	adds	r3, r7, #2
   1803e:	881b      	ldrh	r3, [r3, #0]
   18040:	041b      	lsls	r3, r3, #16
   18042:	431a      	orrs	r2, r3
   18044:	687b      	ldr	r3, [r7, #4]
   18046:	0011      	movs	r1, r2
   18048:	0018      	movs	r0, r3
   1804a:	4b04      	ldr	r3, [pc, #16]	; (1805c <prvTraceSetQueueNumberHigh16+0x3c>)
   1804c:	4798      	blx	r3
}
   1804e:	46c0      	nop			; (mov r8, r8)
   18050:	46bd      	mov	sp, r7
   18052:	b002      	add	sp, #8
   18054:	bd80      	pop	{r7, pc}
   18056:	46c0      	nop			; (mov r8, r8)
   18058:	00017ea1 	.word	0x00017ea1
   1805c:	0001b679 	.word	0x0001b679

00018060 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   18060:	b580      	push	{r7, lr}
   18062:	b084      	sub	sp, #16
   18064:	af00      	add	r7, sp, #0
   18066:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18068:	2300      	movs	r3, #0
   1806a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1806c:	2300      	movs	r3, #0
   1806e:	60bb      	str	r3, [r7, #8]
   18070:	e018      	b.n	180a4 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   18072:	4b14      	ldr	r3, [pc, #80]	; (180c4 <prvAddTaskToStackMonitor+0x64>)
   18074:	68ba      	ldr	r2, [r7, #8]
   18076:	00d2      	lsls	r2, r2, #3
   18078:	58d3      	ldr	r3, [r2, r3]
   1807a:	2b00      	cmp	r3, #0
   1807c:	d10f      	bne.n	1809e <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   1807e:	4b11      	ldr	r3, [pc, #68]	; (180c4 <prvAddTaskToStackMonitor+0x64>)
   18080:	68ba      	ldr	r2, [r7, #8]
   18082:	00d2      	lsls	r2, r2, #3
   18084:	6879      	ldr	r1, [r7, #4]
   18086:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18088:	4a0e      	ldr	r2, [pc, #56]	; (180c4 <prvAddTaskToStackMonitor+0x64>)
   1808a:	68bb      	ldr	r3, [r7, #8]
   1808c:	00db      	lsls	r3, r3, #3
   1808e:	18d3      	adds	r3, r2, r3
   18090:	3304      	adds	r3, #4
   18092:	2201      	movs	r2, #1
   18094:	4252      	negs	r2, r2
   18096:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18098:	2301      	movs	r3, #1
   1809a:	60fb      	str	r3, [r7, #12]
			break;
   1809c:	e005      	b.n	180aa <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   1809e:	68bb      	ldr	r3, [r7, #8]
   180a0:	3301      	adds	r3, #1
   180a2:	60bb      	str	r3, [r7, #8]
   180a4:	68bb      	ldr	r3, [r7, #8]
   180a6:	2b09      	cmp	r3, #9
   180a8:	dde3      	ble.n	18072 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   180aa:	68fb      	ldr	r3, [r7, #12]
   180ac:	2b00      	cmp	r3, #0
   180ae:	d104      	bne.n	180ba <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   180b0:	4b05      	ldr	r3, [pc, #20]	; (180c8 <prvAddTaskToStackMonitor+0x68>)
   180b2:	681b      	ldr	r3, [r3, #0]
   180b4:	1c5a      	adds	r2, r3, #1
   180b6:	4b04      	ldr	r3, [pc, #16]	; (180c8 <prvAddTaskToStackMonitor+0x68>)
   180b8:	601a      	str	r2, [r3, #0]
	}
}
   180ba:	46c0      	nop			; (mov r8, r8)
   180bc:	46bd      	mov	sp, r7
   180be:	b004      	add	sp, #16
   180c0:	bd80      	pop	{r7, pc}
   180c2:	46c0      	nop			; (mov r8, r8)
   180c4:	200008cc 	.word	0x200008cc
   180c8:	2000091c 	.word	0x2000091c

000180cc <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   180cc:	b590      	push	{r4, r7, lr}
   180ce:	b085      	sub	sp, #20
   180d0:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   180d2:	2300      	movs	r3, #0
   180d4:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   180d6:	4b2b      	ldr	r3, [pc, #172]	; (18184 <prvReportStackUsage+0xb8>)
   180d8:	681b      	ldr	r3, [r3, #0]
   180da:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   180dc:	4b29      	ldr	r3, [pc, #164]	; (18184 <prvReportStackUsage+0xb8>)
   180de:	681a      	ldr	r2, [r3, #0]
   180e0:	4b29      	ldr	r3, [pc, #164]	; (18188 <prvReportStackUsage+0xbc>)
   180e2:	00d2      	lsls	r2, r2, #3
   180e4:	58d3      	ldr	r3, [r2, r3]
   180e6:	2b00      	cmp	r3, #0
   180e8:	d035      	beq.n	18156 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   180ea:	4b26      	ldr	r3, [pc, #152]	; (18184 <prvReportStackUsage+0xb8>)
   180ec:	681a      	ldr	r2, [r3, #0]
   180ee:	4b26      	ldr	r3, [pc, #152]	; (18188 <prvReportStackUsage+0xbc>)
   180f0:	00d2      	lsls	r2, r2, #3
   180f2:	58d3      	ldr	r3, [r2, r3]
   180f4:	0018      	movs	r0, r3
   180f6:	4b25      	ldr	r3, [pc, #148]	; (1818c <prvReportStackUsage+0xc0>)
   180f8:	4798      	blx	r3
   180fa:	0003      	movs	r3, r0
   180fc:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   180fe:	4b21      	ldr	r3, [pc, #132]	; (18184 <prvReportStackUsage+0xb8>)
   18100:	681b      	ldr	r3, [r3, #0]
   18102:	4a21      	ldr	r2, [pc, #132]	; (18188 <prvReportStackUsage+0xbc>)
   18104:	00db      	lsls	r3, r3, #3
   18106:	18d3      	adds	r3, r2, r3
   18108:	3304      	adds	r3, #4
   1810a:	681a      	ldr	r2, [r3, #0]
   1810c:	687b      	ldr	r3, [r7, #4]
   1810e:	429a      	cmp	r2, r3
   18110:	d907      	bls.n	18122 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   18112:	4b1c      	ldr	r3, [pc, #112]	; (18184 <prvReportStackUsage+0xb8>)
   18114:	681b      	ldr	r3, [r3, #0]
   18116:	4a1c      	ldr	r2, [pc, #112]	; (18188 <prvReportStackUsage+0xbc>)
   18118:	00db      	lsls	r3, r3, #3
   1811a:	18d3      	adds	r3, r2, r3
   1811c:	3304      	adds	r3, #4
   1811e:	687a      	ldr	r2, [r7, #4]
   18120:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   18122:	4b18      	ldr	r3, [pc, #96]	; (18184 <prvReportStackUsage+0xb8>)
   18124:	681a      	ldr	r2, [r3, #0]
   18126:	4b18      	ldr	r3, [pc, #96]	; (18188 <prvReportStackUsage+0xbc>)
   18128:	00d2      	lsls	r2, r2, #3
   1812a:	58d3      	ldr	r3, [r2, r3]
   1812c:	0018      	movs	r0, r3
   1812e:	4b18      	ldr	r3, [pc, #96]	; (18190 <prvReportStackUsage+0xc4>)
   18130:	4798      	blx	r3
   18132:	0003      	movs	r3, r0
   18134:	b2db      	uxtb	r3, r3
   18136:	0019      	movs	r1, r3
   18138:	4b12      	ldr	r3, [pc, #72]	; (18184 <prvReportStackUsage+0xb8>)
   1813a:	681b      	ldr	r3, [r3, #0]
   1813c:	4a12      	ldr	r2, [pc, #72]	; (18188 <prvReportStackUsage+0xbc>)
   1813e:	00db      	lsls	r3, r3, #3
   18140:	18d3      	adds	r3, r2, r3
   18142:	3304      	adds	r3, #4
   18144:	681b      	ldr	r3, [r3, #0]
   18146:	000a      	movs	r2, r1
   18148:	2103      	movs	r1, #3
   1814a:	20ea      	movs	r0, #234	; 0xea
   1814c:	4c11      	ldr	r4, [pc, #68]	; (18194 <prvReportStackUsage+0xc8>)
   1814e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   18150:	68fb      	ldr	r3, [r7, #12]
   18152:	3301      	adds	r3, #1
   18154:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   18156:	4b0b      	ldr	r3, [pc, #44]	; (18184 <prvReportStackUsage+0xb8>)
   18158:	681b      	ldr	r3, [r3, #0]
   1815a:	1c5a      	adds	r2, r3, #1
   1815c:	4b0e      	ldr	r3, [pc, #56]	; (18198 <prvReportStackUsage+0xcc>)
   1815e:	210a      	movs	r1, #10
   18160:	0010      	movs	r0, r2
   18162:	4798      	blx	r3
   18164:	000b      	movs	r3, r1
   18166:	001a      	movs	r2, r3
   18168:	4b06      	ldr	r3, [pc, #24]	; (18184 <prvReportStackUsage+0xb8>)
   1816a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1816c:	68fb      	ldr	r3, [r7, #12]
   1816e:	2b00      	cmp	r3, #0
   18170:	dc04      	bgt.n	1817c <prvReportStackUsage+0xb0>
   18172:	4b04      	ldr	r3, [pc, #16]	; (18184 <prvReportStackUsage+0xb8>)
   18174:	681a      	ldr	r2, [r3, #0]
   18176:	68bb      	ldr	r3, [r7, #8]
   18178:	429a      	cmp	r2, r3
   1817a:	d1af      	bne.n	180dc <prvReportStackUsage+0x10>
}
   1817c:	46c0      	nop			; (mov r8, r8)
   1817e:	46bd      	mov	sp, r7
   18180:	b005      	add	sp, #20
   18182:	bd90      	pop	{r4, r7, pc}
   18184:	20000920 	.word	0x20000920
   18188:	200008cc 	.word	0x200008cc
   1818c:	0001cb61 	.word	0x0001cb61
   18190:	00017ee1 	.word	0x00017ee1
   18194:	00018a29 	.word	0x00018a29
   18198:	00032691 	.word	0x00032691

0001819c <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   1819c:	b580      	push	{r7, lr}
   1819e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   181a0:	4b02      	ldr	r3, [pc, #8]	; (181ac <prvTraceGetCurrentTaskHandle+0x10>)
   181a2:	4798      	blx	r3
   181a4:	0003      	movs	r3, r0
}
   181a6:	0018      	movs	r0, r3
   181a8:	46bd      	mov	sp, r7
   181aa:	bd80      	pop	{r7, pc}
   181ac:	0001cc0d 	.word	0x0001cc0d

000181b0 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   181b0:	b590      	push	{r4, r7, lr}
   181b2:	b085      	sub	sp, #20
   181b4:	af02      	add	r7, sp, #8
   181b6:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   181b8:	4b14      	ldr	r3, [pc, #80]	; (1820c <vTraceEnable+0x5c>)
   181ba:	4798      	blx	r3

	if (startOption == TRC_START)
   181bc:	687b      	ldr	r3, [r7, #4]
   181be:	2b01      	cmp	r3, #1
   181c0:	d102      	bne.n	181c8 <vTraceEnable+0x18>
	{
		vTraceStart();
   181c2:	4b13      	ldr	r3, [pc, #76]	; (18210 <vTraceEnable+0x60>)
   181c4:	4798      	blx	r3
   181c6:	e00e      	b.n	181e6 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   181c8:	687b      	ldr	r3, [r7, #4]
   181ca:	2b02      	cmp	r3, #2
   181cc:	d104      	bne.n	181d8 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   181ce:	4b11      	ldr	r3, [pc, #68]	; (18214 <vTraceEnable+0x64>)
   181d0:	0018      	movs	r0, r3
   181d2:	4b11      	ldr	r3, [pc, #68]	; (18218 <vTraceEnable+0x68>)
   181d4:	4798      	blx	r3
   181d6:	e006      	b.n	181e6 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   181d8:	687b      	ldr	r3, [r7, #4]
   181da:	2b00      	cmp	r3, #0
   181dc:	d003      	beq.n	181e6 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   181de:	4b0f      	ldr	r3, [pc, #60]	; (1821c <vTraceEnable+0x6c>)
   181e0:	0018      	movs	r0, r3
   181e2:	4b0d      	ldr	r3, [pc, #52]	; (18218 <vTraceEnable+0x68>)
   181e4:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   181e6:	4b0e      	ldr	r3, [pc, #56]	; (18220 <vTraceEnable+0x70>)
   181e8:	681b      	ldr	r3, [r3, #0]
   181ea:	2b00      	cmp	r3, #0
   181ec:	d10a      	bne.n	18204 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   181ee:	2396      	movs	r3, #150	; 0x96
   181f0:	005a      	lsls	r2, r3, #1
   181f2:	490c      	ldr	r1, [pc, #48]	; (18224 <vTraceEnable+0x74>)
   181f4:	480c      	ldr	r0, [pc, #48]	; (18228 <vTraceEnable+0x78>)
   181f6:	4b0a      	ldr	r3, [pc, #40]	; (18220 <vTraceEnable+0x70>)
   181f8:	9301      	str	r3, [sp, #4]
   181fa:	2304      	movs	r3, #4
   181fc:	9300      	str	r3, [sp, #0]
   181fe:	2300      	movs	r3, #0
   18200:	4c0a      	ldr	r4, [pc, #40]	; (1822c <vTraceEnable+0x7c>)
   18202:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18204:	46c0      	nop			; (mov r8, r8)
   18206:	46bd      	mov	sp, r7
   18208:	b003      	add	sp, #12
   1820a:	bd90      	pop	{r4, r7, pc}
   1820c:	000190f5 	.word	0x000190f5
   18210:	0001864d 	.word	0x0001864d
   18214:	00036670 	.word	0x00036670
   18218:	0001979d 	.word	0x0001979d
   1821c:	000366b0 	.word	0x000366b0
   18220:	200008c8 	.word	0x200008c8
   18224:	000366e4 	.word	0x000366e4
   18228:	00018231 	.word	0x00018231
   1822c:	0001bb65 	.word	0x0001bb65

00018230 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   18230:	b580      	push	{r7, lr}
   18232:	b082      	sub	sp, #8
   18234:	af00      	add	r7, sp, #0
   18236:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   18238:	4b04      	ldr	r3, [pc, #16]	; (1824c <TzCtrl+0x1c>)
   1823a:	4798      	blx	r3
   1823c:	1e03      	subs	r3, r0, #0
   1823e:	d001      	beq.n	18244 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   18240:	4b03      	ldr	r3, [pc, #12]	; (18250 <TzCtrl+0x20>)
   18242:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   18244:	2004      	movs	r0, #4
   18246:	4b03      	ldr	r3, [pc, #12]	; (18254 <TzCtrl+0x24>)
   18248:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1824a:	e7f5      	b.n	18238 <TzCtrl+0x8>
   1824c:	00018691 	.word	0x00018691
   18250:	000180cd 	.word	0x000180cd
   18254:	0001bf01 	.word	0x0001bf01

00018258 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   18258:	b580      	push	{r7, lr}
   1825a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1825c:	4b60      	ldr	r3, [pc, #384]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   1825e:	681b      	ldr	r3, [r3, #0]
   18260:	2209      	movs	r2, #9
   18262:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   18264:	4b5e      	ldr	r3, [pc, #376]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18266:	681b      	ldr	r3, [r3, #0]
   18268:	2264      	movs	r2, #100	; 0x64
   1826a:	210a      	movs	r1, #10
   1826c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1826e:	4b5c      	ldr	r3, [pc, #368]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18270:	681b      	ldr	r3, [r3, #0]
   18272:	2265      	movs	r2, #101	; 0x65
   18274:	210a      	movs	r1, #10
   18276:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18278:	4b59      	ldr	r3, [pc, #356]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   1827a:	681b      	ldr	r3, [r3, #0]
   1827c:	2266      	movs	r2, #102	; 0x66
   1827e:	210a      	movs	r1, #10
   18280:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   18282:	4b57      	ldr	r3, [pc, #348]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18284:	681b      	ldr	r3, [r3, #0]
   18286:	2267      	movs	r2, #103	; 0x67
   18288:	210f      	movs	r1, #15
   1828a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   1828c:	4b54      	ldr	r3, [pc, #336]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   1828e:	681b      	ldr	r3, [r3, #0]
   18290:	2268      	movs	r2, #104	; 0x68
   18292:	2105      	movs	r1, #5
   18294:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   18296:	4b52      	ldr	r3, [pc, #328]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18298:	681b      	ldr	r3, [r3, #0]
   1829a:	2269      	movs	r2, #105	; 0x69
   1829c:	2105      	movs	r1, #5
   1829e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   182a0:	4b4f      	ldr	r3, [pc, #316]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   182a2:	681b      	ldr	r3, [r3, #0]
   182a4:	226a      	movs	r2, #106	; 0x6a
   182a6:	2105      	movs	r1, #5
   182a8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   182aa:	4b4d      	ldr	r3, [pc, #308]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   182ac:	681b      	ldr	r3, [r3, #0]
   182ae:	226b      	movs	r2, #107	; 0x6b
   182b0:	2105      	movs	r1, #5
   182b2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   182b4:	4b4a      	ldr	r3, [pc, #296]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   182b6:	681b      	ldr	r3, [r3, #0]
   182b8:	226c      	movs	r2, #108	; 0x6c
   182ba:	2105      	movs	r1, #5
   182bc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   182be:	4b48      	ldr	r3, [pc, #288]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   182c0:	681b      	ldr	r3, [r3, #0]
   182c2:	2270      	movs	r2, #112	; 0x70
   182c4:	210f      	movs	r1, #15
   182c6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   182c8:	4b45      	ldr	r3, [pc, #276]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   182ca:	681b      	ldr	r3, [r3, #0]
   182cc:	2271      	movs	r2, #113	; 0x71
   182ce:	210f      	movs	r1, #15
   182d0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   182d2:	4b43      	ldr	r3, [pc, #268]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   182d4:	681b      	ldr	r3, [r3, #0]
   182d6:	2272      	movs	r2, #114	; 0x72
   182d8:	210f      	movs	r1, #15
   182da:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   182dc:	4b40      	ldr	r3, [pc, #256]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   182de:	681b      	ldr	r3, [r3, #0]
   182e0:	2273      	movs	r2, #115	; 0x73
   182e2:	210f      	movs	r1, #15
   182e4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   182e6:	4b3e      	ldr	r3, [pc, #248]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   182e8:	681b      	ldr	r3, [r3, #0]
   182ea:	2274      	movs	r2, #116	; 0x74
   182ec:	210f      	movs	r1, #15
   182ee:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   182f0:	4b3b      	ldr	r3, [pc, #236]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   182f2:	681b      	ldr	r3, [r3, #0]
   182f4:	2275      	movs	r2, #117	; 0x75
   182f6:	210f      	movs	r1, #15
   182f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   182fa:	4b39      	ldr	r3, [pc, #228]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   182fc:	681b      	ldr	r3, [r3, #0]
   182fe:	2276      	movs	r2, #118	; 0x76
   18300:	210f      	movs	r1, #15
   18302:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   18304:	4b36      	ldr	r3, [pc, #216]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18306:	681b      	ldr	r3, [r3, #0]
   18308:	2277      	movs	r2, #119	; 0x77
   1830a:	210f      	movs	r1, #15
   1830c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1830e:	4b34      	ldr	r3, [pc, #208]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18310:	681b      	ldr	r3, [r3, #0]
   18312:	2278      	movs	r2, #120	; 0x78
   18314:	210f      	movs	r1, #15
   18316:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   18318:	4b31      	ldr	r3, [pc, #196]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   1831a:	681b      	ldr	r3, [r3, #0]
   1831c:	227c      	movs	r2, #124	; 0x7c
   1831e:	2110      	movs	r1, #16
   18320:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   18322:	4b2f      	ldr	r3, [pc, #188]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18324:	681b      	ldr	r3, [r3, #0]
   18326:	227d      	movs	r2, #125	; 0x7d
   18328:	2110      	movs	r1, #16
   1832a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1832c:	4b2c      	ldr	r3, [pc, #176]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   1832e:	681b      	ldr	r3, [r3, #0]
   18330:	227e      	movs	r2, #126	; 0x7e
   18332:	2110      	movs	r1, #16
   18334:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   18336:	4b2a      	ldr	r3, [pc, #168]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18338:	681b      	ldr	r3, [r3, #0]
   1833a:	227f      	movs	r2, #127	; 0x7f
   1833c:	2113      	movs	r1, #19
   1833e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   18340:	4b27      	ldr	r3, [pc, #156]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18342:	681b      	ldr	r3, [r3, #0]
   18344:	2280      	movs	r2, #128	; 0x80
   18346:	2111      	movs	r1, #17
   18348:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1834a:	4b25      	ldr	r3, [pc, #148]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   1834c:	681b      	ldr	r3, [r3, #0]
   1834e:	2281      	movs	r2, #129	; 0x81
   18350:	2110      	movs	r1, #16
   18352:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   18354:	4b22      	ldr	r3, [pc, #136]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18356:	681b      	ldr	r3, [r3, #0]
   18358:	2282      	movs	r2, #130	; 0x82
   1835a:	2113      	movs	r1, #19
   1835c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1835e:	4b20      	ldr	r3, [pc, #128]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18360:	681b      	ldr	r3, [r3, #0]
   18362:	2283      	movs	r2, #131	; 0x83
   18364:	2113      	movs	r1, #19
   18366:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   18368:	4b1d      	ldr	r3, [pc, #116]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   1836a:	681b      	ldr	r3, [r3, #0]
   1836c:	2284      	movs	r2, #132	; 0x84
   1836e:	2113      	movs	r1, #19
   18370:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   18372:	4b1b      	ldr	r3, [pc, #108]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18374:	681b      	ldr	r3, [r3, #0]
   18376:	2288      	movs	r2, #136	; 0x88
   18378:	2100      	movs	r1, #0
   1837a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   1837c:	4b18      	ldr	r3, [pc, #96]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   1837e:	681b      	ldr	r3, [r3, #0]
   18380:	228a      	movs	r2, #138	; 0x8a
   18382:	21a0      	movs	r1, #160	; 0xa0
   18384:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   18386:	4b16      	ldr	r3, [pc, #88]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18388:	681b      	ldr	r3, [r3, #0]
   1838a:	228c      	movs	r2, #140	; 0x8c
   1838c:	21a0      	movs	r1, #160	; 0xa0
   1838e:	0049      	lsls	r1, r1, #1
   18390:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   18392:	4b13      	ldr	r3, [pc, #76]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   18394:	681b      	ldr	r3, [r3, #0]
   18396:	228e      	movs	r2, #142	; 0x8e
   18398:	21f0      	movs	r1, #240	; 0xf0
   1839a:	0049      	lsls	r1, r1, #1
   1839c:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   1839e:	4b10      	ldr	r3, [pc, #64]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   183a0:	681b      	ldr	r3, [r3, #0]
   183a2:	2290      	movs	r2, #144	; 0x90
   183a4:	490f      	ldr	r1, [pc, #60]	; (183e4 <vTraceInitObjectPropertyTable+0x18c>)
   183a6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   183a8:	4b0d      	ldr	r3, [pc, #52]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   183aa:	681b      	ldr	r3, [r3, #0]
   183ac:	2292      	movs	r2, #146	; 0x92
   183ae:	490e      	ldr	r1, [pc, #56]	; (183e8 <vTraceInitObjectPropertyTable+0x190>)
   183b0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   183b2:	4b0b      	ldr	r3, [pc, #44]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   183b4:	681b      	ldr	r3, [r3, #0]
   183b6:	2294      	movs	r2, #148	; 0x94
   183b8:	490c      	ldr	r1, [pc, #48]	; (183ec <vTraceInitObjectPropertyTable+0x194>)
   183ba:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   183bc:	4b08      	ldr	r3, [pc, #32]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   183be:	681b      	ldr	r3, [r3, #0]
   183c0:	2296      	movs	r2, #150	; 0x96
   183c2:	490b      	ldr	r1, [pc, #44]	; (183f0 <vTraceInitObjectPropertyTable+0x198>)
   183c4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   183c6:	4b06      	ldr	r3, [pc, #24]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   183c8:	681b      	ldr	r3, [r3, #0]
   183ca:	2298      	movs	r2, #152	; 0x98
   183cc:	218c      	movs	r1, #140	; 0x8c
   183ce:	00c9      	lsls	r1, r1, #3
   183d0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   183d2:	4b03      	ldr	r3, [pc, #12]	; (183e0 <vTraceInitObjectPropertyTable+0x188>)
   183d4:	681b      	ldr	r3, [r3, #0]
   183d6:	4a07      	ldr	r2, [pc, #28]	; (183f4 <vTraceInitObjectPropertyTable+0x19c>)
   183d8:	661a      	str	r2, [r3, #96]	; 0x60
}
   183da:	46c0      	nop			; (mov r8, r8)
   183dc:	46bd      	mov	sp, r7
   183de:	bd80      	pop	{r7, pc}
   183e0:	200009e0 	.word	0x200009e0
   183e4:	000002fd 	.word	0x000002fd
   183e8:	00000352 	.word	0x00000352
   183ec:	000003a2 	.word	0x000003a2
   183f0:	00000401 	.word	0x00000401
   183f4:	000004bf 	.word	0x000004bf

000183f8 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   183f8:	b580      	push	{r7, lr}
   183fa:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   183fc:	4b2e      	ldr	r3, [pc, #184]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   183fe:	2200      	movs	r2, #0
   18400:	825a      	strh	r2, [r3, #18]
   18402:	4b2d      	ldr	r3, [pc, #180]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18404:	8a5a      	ldrh	r2, [r3, #18]
   18406:	4b2c      	ldr	r3, [pc, #176]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18408:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1840a:	4b2b      	ldr	r3, [pc, #172]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1840c:	220a      	movs	r2, #10
   1840e:	829a      	strh	r2, [r3, #20]
   18410:	4b29      	ldr	r3, [pc, #164]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18412:	8a9a      	ldrh	r2, [r3, #20]
   18414:	4b28      	ldr	r3, [pc, #160]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18416:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   18418:	4b27      	ldr	r3, [pc, #156]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1841a:	2214      	movs	r2, #20
   1841c:	82da      	strh	r2, [r3, #22]
   1841e:	4b26      	ldr	r3, [pc, #152]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18420:	8ada      	ldrh	r2, [r3, #22]
   18422:	4b25      	ldr	r3, [pc, #148]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18424:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   18426:	4b24      	ldr	r3, [pc, #144]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18428:	221e      	movs	r2, #30
   1842a:	831a      	strh	r2, [r3, #24]
   1842c:	4b22      	ldr	r3, [pc, #136]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1842e:	8b1a      	ldrh	r2, [r3, #24]
   18430:	4b21      	ldr	r3, [pc, #132]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18432:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   18434:	4b20      	ldr	r3, [pc, #128]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18436:	222d      	movs	r2, #45	; 0x2d
   18438:	835a      	strh	r2, [r3, #26]
   1843a:	4b1f      	ldr	r3, [pc, #124]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1843c:	8b5a      	ldrh	r2, [r3, #26]
   1843e:	4b1e      	ldr	r3, [pc, #120]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18440:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   18442:	4b1d      	ldr	r3, [pc, #116]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18444:	2232      	movs	r2, #50	; 0x32
   18446:	839a      	strh	r2, [r3, #28]
   18448:	4b1b      	ldr	r3, [pc, #108]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1844a:	8b9a      	ldrh	r2, [r3, #28]
   1844c:	4b1a      	ldr	r3, [pc, #104]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1844e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   18450:	4b19      	ldr	r3, [pc, #100]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18452:	2237      	movs	r2, #55	; 0x37
   18454:	83da      	strh	r2, [r3, #30]
   18456:	4b18      	ldr	r3, [pc, #96]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18458:	8bda      	ldrh	r2, [r3, #30]
   1845a:	4b17      	ldr	r3, [pc, #92]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1845c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1845e:	4b16      	ldr	r3, [pc, #88]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18460:	223c      	movs	r2, #60	; 0x3c
   18462:	841a      	strh	r2, [r3, #32]
   18464:	4b14      	ldr	r3, [pc, #80]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18466:	8c1a      	ldrh	r2, [r3, #32]
   18468:	4b13      	ldr	r3, [pc, #76]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1846a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1846c:	4b12      	ldr	r3, [pc, #72]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1846e:	2241      	movs	r2, #65	; 0x41
   18470:	845a      	strh	r2, [r3, #34]	; 0x22
   18472:	4b11      	ldr	r3, [pc, #68]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18474:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   18476:	4b10      	ldr	r3, [pc, #64]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18478:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1847a:	4b0f      	ldr	r3, [pc, #60]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1847c:	2209      	movs	r2, #9
   1847e:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   18480:	4b0d      	ldr	r3, [pc, #52]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18482:	2213      	movs	r2, #19
   18484:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   18486:	4b0c      	ldr	r3, [pc, #48]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18488:	221d      	movs	r2, #29
   1848a:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   1848c:	4b0a      	ldr	r3, [pc, #40]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1848e:	222c      	movs	r2, #44	; 0x2c
   18490:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   18492:	4b09      	ldr	r3, [pc, #36]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   18494:	2231      	movs	r2, #49	; 0x31
   18496:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   18498:	4b07      	ldr	r3, [pc, #28]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   1849a:	2236      	movs	r2, #54	; 0x36
   1849c:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   1849e:	4b06      	ldr	r3, [pc, #24]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   184a0:	223b      	movs	r2, #59	; 0x3b
   184a2:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   184a4:	4b04      	ldr	r3, [pc, #16]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   184a6:	2240      	movs	r2, #64	; 0x40
   184a8:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   184aa:	4b03      	ldr	r3, [pc, #12]	; (184b8 <vTraceInitObjectHandleStack+0xc0>)
   184ac:	2245      	movs	r2, #69	; 0x45
   184ae:	869a      	strh	r2, [r3, #52]	; 0x34
}
   184b0:	46c0      	nop			; (mov r8, r8)
   184b2:	46bd      	mov	sp, r7
   184b4:	bd80      	pop	{r7, pc}
   184b6:	46c0      	nop			; (mov r8, r8)
   184b8:	20000950 	.word	0x20000950

000184bc <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   184bc:	b580      	push	{r7, lr}
   184be:	b082      	sub	sp, #8
   184c0:	af00      	add	r7, sp, #0
   184c2:	0002      	movs	r2, r0
   184c4:	1dfb      	adds	r3, r7, #7
   184c6:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   184c8:	1dfb      	adds	r3, r7, #7
   184ca:	781b      	ldrb	r3, [r3, #0]
   184cc:	2b08      	cmp	r3, #8
   184ce:	d816      	bhi.n	184fe <pszTraceGetErrorNotEnoughHandles+0x42>
   184d0:	009a      	lsls	r2, r3, #2
   184d2:	4b0d      	ldr	r3, [pc, #52]	; (18508 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   184d4:	18d3      	adds	r3, r2, r3
   184d6:	681b      	ldr	r3, [r3, #0]
   184d8:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   184da:	4b0c      	ldr	r3, [pc, #48]	; (1850c <pszTraceGetErrorNotEnoughHandles+0x50>)
   184dc:	e010      	b.n	18500 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   184de:	4b0c      	ldr	r3, [pc, #48]	; (18510 <pszTraceGetErrorNotEnoughHandles+0x54>)
   184e0:	e00e      	b.n	18500 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   184e2:	4b0c      	ldr	r3, [pc, #48]	; (18514 <pszTraceGetErrorNotEnoughHandles+0x58>)
   184e4:	e00c      	b.n	18500 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   184e6:	4b0c      	ldr	r3, [pc, #48]	; (18518 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   184e8:	e00a      	b.n	18500 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   184ea:	4b0c      	ldr	r3, [pc, #48]	; (1851c <pszTraceGetErrorNotEnoughHandles+0x60>)
   184ec:	e008      	b.n	18500 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   184ee:	4b0c      	ldr	r3, [pc, #48]	; (18520 <pszTraceGetErrorNotEnoughHandles+0x64>)
   184f0:	e006      	b.n	18500 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   184f2:	4b0c      	ldr	r3, [pc, #48]	; (18524 <pszTraceGetErrorNotEnoughHandles+0x68>)
   184f4:	e004      	b.n	18500 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   184f6:	4b0c      	ldr	r3, [pc, #48]	; (18528 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   184f8:	e002      	b.n	18500 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   184fa:	4b0c      	ldr	r3, [pc, #48]	; (1852c <pszTraceGetErrorNotEnoughHandles+0x70>)
   184fc:	e000      	b.n	18500 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   184fe:	4b0c      	ldr	r3, [pc, #48]	; (18530 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   18500:	0018      	movs	r0, r3
   18502:	46bd      	mov	sp, r7
   18504:	b002      	add	sp, #8
   18506:	bd80      	pop	{r7, pc}
   18508:	000369ec 	.word	0x000369ec
   1850c:	000366ec 	.word	0x000366ec
   18510:	00036734 	.word	0x00036734
   18514:	0003677c 	.word	0x0003677c
   18518:	000367d0 	.word	0x000367d0
   1851c:	0003681c 	.word	0x0003681c
   18520:	00036868 	.word	0x00036868
   18524:	000368b4 	.word	0x000368b4
   18528:	00036908 	.word	0x00036908
   1852c:	00036960 	.word	0x00036960
   18530:	000369bc 	.word	0x000369bc

00018534 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   18534:	b590      	push	{r4, r7, lr}
   18536:	b087      	sub	sp, #28
   18538:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1853a:	2317      	movs	r3, #23
   1853c:	18fb      	adds	r3, r7, r3
   1853e:	2200      	movs	r2, #0
   18540:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   18542:	4b36      	ldr	r3, [pc, #216]	; (1861c <uiTraceStart+0xe8>)
   18544:	681b      	ldr	r3, [r3, #0]
   18546:	2b00      	cmp	r3, #0
   18548:	d10b      	bne.n	18562 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1854a:	4b34      	ldr	r3, [pc, #208]	; (1861c <uiTraceStart+0xe8>)
   1854c:	681b      	ldr	r3, [r3, #0]
   1854e:	2b00      	cmp	r3, #0
   18550:	d105      	bne.n	1855e <uiTraceStart+0x2a>
   18552:	4b33      	ldr	r3, [pc, #204]	; (18620 <uiTraceStart+0xec>)
   18554:	0018      	movs	r0, r3
   18556:	4b33      	ldr	r3, [pc, #204]	; (18624 <uiTraceStart+0xf0>)
   18558:	4798      	blx	r3
   1855a:	2300      	movs	r3, #0
   1855c:	e059      	b.n	18612 <uiTraceStart+0xde>
		return 0;
   1855e:	2300      	movs	r3, #0
   18560:	e057      	b.n	18612 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   18562:	4b2e      	ldr	r3, [pc, #184]	; (1861c <uiTraceStart+0xe8>)
   18564:	681b      	ldr	r3, [r3, #0]
   18566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18568:	2b01      	cmp	r3, #1
   1856a:	d101      	bne.n	18570 <uiTraceStart+0x3c>
		return 1; /* Already running */
   1856c:	2301      	movs	r3, #1
   1856e:	e050      	b.n	18612 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18570:	4b2d      	ldr	r3, [pc, #180]	; (18628 <uiTraceStart+0xf4>)
   18572:	681b      	ldr	r3, [r3, #0]
   18574:	2b00      	cmp	r3, #0
   18576:	d149      	bne.n	1860c <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18578:	f3ef 8310 	mrs	r3, PRIMASK
   1857c:	60bb      	str	r3, [r7, #8]
  return(result);
   1857e:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18580:	613b      	str	r3, [r7, #16]
   18582:	2301      	movs	r3, #1
   18584:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18586:	68fb      	ldr	r3, [r7, #12]
   18588:	f383 8810 	msr	PRIMASK, r3
   1858c:	4b27      	ldr	r3, [pc, #156]	; (1862c <uiTraceStart+0xf8>)
   1858e:	681b      	ldr	r3, [r3, #0]
   18590:	1c5a      	adds	r2, r3, #1
   18592:	4b26      	ldr	r3, [pc, #152]	; (1862c <uiTraceStart+0xf8>)
   18594:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   18596:	4b21      	ldr	r3, [pc, #132]	; (1861c <uiTraceStart+0xe8>)
   18598:	681b      	ldr	r3, [r3, #0]
   1859a:	2201      	movs	r2, #1
   1859c:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   1859e:	4b24      	ldr	r3, [pc, #144]	; (18630 <uiTraceStart+0xfc>)
   185a0:	4798      	blx	r3
   185a2:	0003      	movs	r3, r0
   185a4:	0018      	movs	r0, r3
   185a6:	4b23      	ldr	r3, [pc, #140]	; (18634 <uiTraceStart+0x100>)
   185a8:	4798      	blx	r3
   185aa:	0003      	movs	r3, r0
   185ac:	001a      	movs	r2, r3
   185ae:	2317      	movs	r3, #23
   185b0:	18fb      	adds	r3, r7, r3
   185b2:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   185b4:	2317      	movs	r3, #23
   185b6:	18fb      	adds	r3, r7, r3
   185b8:	781b      	ldrb	r3, [r3, #0]
   185ba:	2b00      	cmp	r3, #0
   185bc:	d116      	bne.n	185ec <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   185be:	2317      	movs	r3, #23
   185c0:	18fc      	adds	r4, r7, r3
   185c2:	2003      	movs	r0, #3
   185c4:	4b1c      	ldr	r3, [pc, #112]	; (18638 <uiTraceStart+0x104>)
   185c6:	4798      	blx	r3
   185c8:	0003      	movs	r3, r0
   185ca:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   185cc:	4a1b      	ldr	r2, [pc, #108]	; (1863c <uiTraceStart+0x108>)
   185ce:	2317      	movs	r3, #23
   185d0:	18fb      	adds	r3, r7, r3
   185d2:	781b      	ldrb	r3, [r3, #0]
   185d4:	0019      	movs	r1, r3
   185d6:	2003      	movs	r0, #3
   185d8:	4b19      	ldr	r3, [pc, #100]	; (18640 <uiTraceStart+0x10c>)
   185da:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   185dc:	2317      	movs	r3, #23
   185de:	18fb      	adds	r3, r7, r3
   185e0:	781b      	ldrb	r3, [r3, #0]
   185e2:	2200      	movs	r2, #0
   185e4:	0019      	movs	r1, r3
   185e6:	2003      	movs	r0, #3
   185e8:	4b16      	ldr	r3, [pc, #88]	; (18644 <uiTraceStart+0x110>)
   185ea:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   185ec:	2317      	movs	r3, #23
   185ee:	18fb      	adds	r3, r7, r3
   185f0:	781b      	ldrb	r3, [r3, #0]
   185f2:	0018      	movs	r0, r3
   185f4:	4b14      	ldr	r3, [pc, #80]	; (18648 <uiTraceStart+0x114>)
   185f6:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   185f8:	4b0c      	ldr	r3, [pc, #48]	; (1862c <uiTraceStart+0xf8>)
   185fa:	681b      	ldr	r3, [r3, #0]
   185fc:	1e5a      	subs	r2, r3, #1
   185fe:	4b0b      	ldr	r3, [pc, #44]	; (1862c <uiTraceStart+0xf8>)
   18600:	601a      	str	r2, [r3, #0]
   18602:	693b      	ldr	r3, [r7, #16]
   18604:	607b      	str	r3, [r7, #4]
   18606:	687b      	ldr	r3, [r7, #4]
   18608:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1860c:	4b03      	ldr	r3, [pc, #12]	; (1861c <uiTraceStart+0xe8>)
   1860e:	681b      	ldr	r3, [r3, #0]
   18610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   18612:	0018      	movs	r0, r3
   18614:	46bd      	mov	sp, r7
   18616:	b007      	add	sp, #28
   18618:	bd90      	pop	{r4, r7, pc}
   1861a:	46c0      	nop			; (mov r8, r8)
   1861c:	200009e0 	.word	0x200009e0
   18620:	00036a10 	.word	0x00036a10
   18624:	0001979d 	.word	0x0001979d
   18628:	20000940 	.word	0x20000940
   1862c:	20000938 	.word	0x20000938
   18630:	0001819d 	.word	0x0001819d
   18634:	00017ee1 	.word	0x00017ee1
   18638:	00019481 	.word	0x00019481
   1863c:	00036a54 	.word	0x00036a54
   18640:	000196b1 	.word	0x000196b1
   18644:	00018e15 	.word	0x00018e15
   18648:	00018cfd 	.word	0x00018cfd

0001864c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1864c:	b580      	push	{r7, lr}
   1864e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18650:	4b02      	ldr	r3, [pc, #8]	; (1865c <vTraceStart+0x10>)
   18652:	4798      	blx	r3
}
   18654:	46c0      	nop			; (mov r8, r8)
   18656:	46bd      	mov	sp, r7
   18658:	bd80      	pop	{r7, pc}
   1865a:	46c0      	nop			; (mov r8, r8)
   1865c:	00018535 	.word	0x00018535

00018660 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   18660:	b580      	push	{r7, lr}
   18662:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18664:	4b08      	ldr	r3, [pc, #32]	; (18688 <vTraceStop+0x28>)
   18666:	681b      	ldr	r3, [r3, #0]
   18668:	2b00      	cmp	r3, #0
   1866a:	d003      	beq.n	18674 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1866c:	4b06      	ldr	r3, [pc, #24]	; (18688 <vTraceStop+0x28>)
   1866e:	681b      	ldr	r3, [r3, #0]
   18670:	2200      	movs	r2, #0
   18672:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   18674:	4b05      	ldr	r3, [pc, #20]	; (1868c <vTraceStop+0x2c>)
   18676:	681b      	ldr	r3, [r3, #0]
   18678:	2b00      	cmp	r3, #0
   1867a:	d002      	beq.n	18682 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   1867c:	4b03      	ldr	r3, [pc, #12]	; (1868c <vTraceStop+0x2c>)
   1867e:	681b      	ldr	r3, [r3, #0]
   18680:	4798      	blx	r3
	}
}
   18682:	46c0      	nop			; (mov r8, r8)
   18684:	46bd      	mov	sp, r7
   18686:	bd80      	pop	{r7, pc}
   18688:	200009e0 	.word	0x200009e0
   1868c:	20000948 	.word	0x20000948

00018690 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   18690:	b580      	push	{r7, lr}
   18692:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18694:	4b05      	ldr	r3, [pc, #20]	; (186ac <xTraceIsRecordingEnabled+0x1c>)
   18696:	681b      	ldr	r3, [r3, #0]
   18698:	2b00      	cmp	r3, #0
   1869a:	d003      	beq.n	186a4 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   1869c:	4b03      	ldr	r3, [pc, #12]	; (186ac <xTraceIsRecordingEnabled+0x1c>)
   1869e:	681b      	ldr	r3, [r3, #0]
   186a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   186a2:	e000      	b.n	186a6 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   186a4:	2300      	movs	r3, #0
	}
}
   186a6:	0018      	movs	r0, r3
   186a8:	46bd      	mov	sp, r7
   186aa:	bd80      	pop	{r7, pc}
   186ac:	200009e0 	.word	0x200009e0

000186b0 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   186b0:	b590      	push	{r4, r7, lr}
   186b2:	b089      	sub	sp, #36	; 0x24
   186b4:	af00      	add	r7, sp, #0
   186b6:	0002      	movs	r2, r0
   186b8:	1dfb      	adds	r3, r7, #7
   186ba:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   186bc:	1dfb      	adds	r3, r7, #7
   186be:	781b      	ldrb	r3, [r3, #0]
   186c0:	2b00      	cmp	r3, #0
   186c2:	d057      	beq.n	18774 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   186c4:	4b2e      	ldr	r3, [pc, #184]	; (18780 <prvTraceStoreTaskReady+0xd0>)
   186c6:	681b      	ldr	r3, [r3, #0]
   186c8:	2b00      	cmp	r3, #0
   186ca:	d055      	beq.n	18778 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   186cc:	1dfb      	adds	r3, r7, #7
   186ce:	781b      	ldrb	r3, [r3, #0]
   186d0:	2b0f      	cmp	r3, #15
   186d2:	d904      	bls.n	186de <prvTraceStoreTaskReady+0x2e>
   186d4:	4b2b      	ldr	r3, [pc, #172]	; (18784 <prvTraceStoreTaskReady+0xd4>)
   186d6:	0018      	movs	r0, r3
   186d8:	4b2b      	ldr	r3, [pc, #172]	; (18788 <prvTraceStoreTaskReady+0xd8>)
   186da:	4798      	blx	r3
   186dc:	e04d      	b.n	1877a <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   186de:	4b2b      	ldr	r3, [pc, #172]	; (1878c <prvTraceStoreTaskReady+0xdc>)
   186e0:	681b      	ldr	r3, [r3, #0]
   186e2:	2b00      	cmp	r3, #0
   186e4:	d004      	beq.n	186f0 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   186e6:	4b2a      	ldr	r3, [pc, #168]	; (18790 <prvTraceStoreTaskReady+0xe0>)
   186e8:	0018      	movs	r0, r3
   186ea:	4b27      	ldr	r3, [pc, #156]	; (18788 <prvTraceStoreTaskReady+0xd8>)
   186ec:	4798      	blx	r3
		return;
   186ee:	e044      	b.n	1877a <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   186f0:	f3ef 8310 	mrs	r3, PRIMASK
   186f4:	60fb      	str	r3, [r7, #12]
  return(result);
   186f6:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   186f8:	61fb      	str	r3, [r7, #28]
   186fa:	2301      	movs	r3, #1
   186fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   186fe:	693b      	ldr	r3, [r7, #16]
   18700:	f383 8810 	msr	PRIMASK, r3
   18704:	4b21      	ldr	r3, [pc, #132]	; (1878c <prvTraceStoreTaskReady+0xdc>)
   18706:	681b      	ldr	r3, [r3, #0]
   18708:	1c5a      	adds	r2, r3, #1
   1870a:	4b20      	ldr	r3, [pc, #128]	; (1878c <prvTraceStoreTaskReady+0xdc>)
   1870c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1870e:	4b21      	ldr	r3, [pc, #132]	; (18794 <prvTraceStoreTaskReady+0xe4>)
   18710:	681b      	ldr	r3, [r3, #0]
   18712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18714:	2b00      	cmp	r3, #0
   18716:	d022      	beq.n	1875e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18718:	231a      	movs	r3, #26
   1871a:	18fc      	adds	r4, r7, r3
   1871c:	4b1e      	ldr	r3, [pc, #120]	; (18798 <prvTraceStoreTaskReady+0xe8>)
   1871e:	0018      	movs	r0, r3
   18720:	4b1e      	ldr	r3, [pc, #120]	; (1879c <prvTraceStoreTaskReady+0xec>)
   18722:	4798      	blx	r3
   18724:	0003      	movs	r3, r0
   18726:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   18728:	2319      	movs	r3, #25
   1872a:	18fb      	adds	r3, r7, r3
   1872c:	1dfa      	adds	r2, r7, #7
   1872e:	7812      	ldrb	r2, [r2, #0]
   18730:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   18732:	4b1b      	ldr	r3, [pc, #108]	; (187a0 <prvTraceStoreTaskReady+0xf0>)
   18734:	4798      	blx	r3
   18736:	0003      	movs	r3, r0
   18738:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1873a:	697b      	ldr	r3, [r7, #20]
   1873c:	2b00      	cmp	r3, #0
   1873e:	d00e      	beq.n	1875e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   18740:	697b      	ldr	r3, [r7, #20]
   18742:	2202      	movs	r2, #2
   18744:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   18746:	697b      	ldr	r3, [r7, #20]
   18748:	221a      	movs	r2, #26
   1874a:	18ba      	adds	r2, r7, r2
   1874c:	8812      	ldrh	r2, [r2, #0]
   1874e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   18750:	697b      	ldr	r3, [r7, #20]
   18752:	2219      	movs	r2, #25
   18754:	18ba      	adds	r2, r7, r2
   18756:	7812      	ldrb	r2, [r2, #0]
   18758:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1875a:	4b12      	ldr	r3, [pc, #72]	; (187a4 <prvTraceStoreTaskReady+0xf4>)
   1875c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1875e:	4b0b      	ldr	r3, [pc, #44]	; (1878c <prvTraceStoreTaskReady+0xdc>)
   18760:	681b      	ldr	r3, [r3, #0]
   18762:	1e5a      	subs	r2, r3, #1
   18764:	4b09      	ldr	r3, [pc, #36]	; (1878c <prvTraceStoreTaskReady+0xdc>)
   18766:	601a      	str	r2, [r3, #0]
   18768:	69fb      	ldr	r3, [r7, #28]
   1876a:	60bb      	str	r3, [r7, #8]
   1876c:	68bb      	ldr	r3, [r7, #8]
   1876e:	f383 8810 	msr	PRIMASK, r3
   18772:	e002      	b.n	1877a <prvTraceStoreTaskReady+0xca>
		return;
   18774:	46c0      	nop			; (mov r8, r8)
   18776:	e000      	b.n	1877a <prvTraceStoreTaskReady+0xca>
		return;
   18778:	46c0      	nop			; (mov r8, r8)
}
   1877a:	46bd      	mov	sp, r7
   1877c:	b009      	add	sp, #36	; 0x24
   1877e:	bd90      	pop	{r4, r7, pc}
   18780:	200000b4 	.word	0x200000b4
   18784:	00036dbc 	.word	0x00036dbc
   18788:	0001979d 	.word	0x0001979d
   1878c:	20000938 	.word	0x20000938
   18790:	00036dfc 	.word	0x00036dfc
   18794:	200009e0 	.word	0x200009e0
   18798:	0000ffff 	.word	0x0000ffff
   1879c:	000199b1 	.word	0x000199b1
   187a0:	00019355 	.word	0x00019355
   187a4:	00019959 	.word	0x00019959

000187a8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   187a8:	b580      	push	{r7, lr}
   187aa:	b08e      	sub	sp, #56	; 0x38
   187ac:	af00      	add	r7, sp, #0
   187ae:	60f8      	str	r0, [r7, #12]
   187b0:	60b9      	str	r1, [r7, #8]
   187b2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   187b4:	4b48      	ldr	r3, [pc, #288]	; (188d8 <vTraceStoreMemMangEvent+0x130>)
   187b6:	681b      	ldr	r3, [r3, #0]
   187b8:	2b00      	cmp	r3, #0
   187ba:	d100      	bne.n	187be <vTraceStoreMemMangEvent+0x16>
   187bc:	e088      	b.n	188d0 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   187be:	687b      	ldr	r3, [r7, #4]
   187c0:	2b00      	cmp	r3, #0
   187c2:	da03      	bge.n	187cc <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   187c4:	687b      	ldr	r3, [r7, #4]
   187c6:	425b      	negs	r3, r3
   187c8:	637b      	str	r3, [r7, #52]	; 0x34
   187ca:	e001      	b.n	187d0 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   187cc:	687b      	ldr	r3, [r7, #4]
   187ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   187d0:	f3ef 8310 	mrs	r3, PRIMASK
   187d4:	61bb      	str	r3, [r7, #24]
  return(result);
   187d6:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   187d8:	633b      	str	r3, [r7, #48]	; 0x30
   187da:	2301      	movs	r3, #1
   187dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   187de:	69fb      	ldr	r3, [r7, #28]
   187e0:	f383 8810 	msr	PRIMASK, r3
   187e4:	4b3d      	ldr	r3, [pc, #244]	; (188dc <vTraceStoreMemMangEvent+0x134>)
   187e6:	681b      	ldr	r3, [r3, #0]
   187e8:	1c5a      	adds	r2, r3, #1
   187ea:	4b3c      	ldr	r3, [pc, #240]	; (188dc <vTraceStoreMemMangEvent+0x134>)
   187ec:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   187ee:	68bb      	ldr	r3, [r7, #8]
   187f0:	2b00      	cmp	r3, #0
   187f2:	d005      	beq.n	18800 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   187f4:	4b3a      	ldr	r3, [pc, #232]	; (188e0 <vTraceStoreMemMangEvent+0x138>)
   187f6:	681a      	ldr	r2, [r3, #0]
   187f8:	687b      	ldr	r3, [r7, #4]
   187fa:	18d2      	adds	r2, r2, r3
   187fc:	4b38      	ldr	r3, [pc, #224]	; (188e0 <vTraceStoreMemMangEvent+0x138>)
   187fe:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   18800:	4b35      	ldr	r3, [pc, #212]	; (188d8 <vTraceStoreMemMangEvent+0x130>)
   18802:	681b      	ldr	r3, [r3, #0]
   18804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18806:	2b00      	cmp	r3, #0
   18808:	d057      	beq.n	188ba <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1880a:	20ff      	movs	r0, #255	; 0xff
   1880c:	4b35      	ldr	r3, [pc, #212]	; (188e4 <vTraceStoreMemMangEvent+0x13c>)
   1880e:	4798      	blx	r3
   18810:	0003      	movs	r3, r0
   18812:	001a      	movs	r2, r3
   18814:	232f      	movs	r3, #47	; 0x2f
   18816:	18fb      	adds	r3, r7, r3
   18818:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1881a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1881c:	4a32      	ldr	r2, [pc, #200]	; (188e8 <vTraceStoreMemMangEvent+0x140>)
   1881e:	0019      	movs	r1, r3
   18820:	0010      	movs	r0, r2
   18822:	4b32      	ldr	r3, [pc, #200]	; (188ec <vTraceStoreMemMangEvent+0x144>)
   18824:	4798      	blx	r3
   18826:	0002      	movs	r2, r0
   18828:	232c      	movs	r3, #44	; 0x2c
   1882a:	18fb      	adds	r3, r7, r3
   1882c:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1882e:	4b30      	ldr	r3, [pc, #192]	; (188f0 <vTraceStoreMemMangEvent+0x148>)
   18830:	4798      	blx	r3
   18832:	0003      	movs	r3, r0
   18834:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   18836:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18838:	2b00      	cmp	r3, #0
   1883a:	d03e      	beq.n	188ba <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1883e:	222f      	movs	r2, #47	; 0x2f
   18840:	18ba      	adds	r2, r7, r2
   18842:	7812      	ldrb	r2, [r2, #0]
   18844:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   18846:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18848:	2200      	movs	r2, #0
   1884a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1884e:	222c      	movs	r2, #44	; 0x2c
   18850:	18ba      	adds	r2, r7, r2
   18852:	8812      	ldrh	r2, [r2, #0]
   18854:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18856:	4b27      	ldr	r3, [pc, #156]	; (188f4 <vTraceStoreMemMangEvent+0x14c>)
   18858:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1885a:	68bb      	ldr	r3, [r7, #8]
   1885c:	4a22      	ldr	r2, [pc, #136]	; (188e8 <vTraceStoreMemMangEvent+0x140>)
   1885e:	0019      	movs	r1, r3
   18860:	0010      	movs	r0, r2
   18862:	4b22      	ldr	r3, [pc, #136]	; (188ec <vTraceStoreMemMangEvent+0x144>)
   18864:	4798      	blx	r3
   18866:	0002      	movs	r2, r0
   18868:	2326      	movs	r3, #38	; 0x26
   1886a:	18fb      	adds	r3, r7, r3
   1886c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1886e:	2325      	movs	r3, #37	; 0x25
   18870:	18fb      	adds	r3, r7, r3
   18872:	2200      	movs	r2, #0
   18874:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   18876:	4b1e      	ldr	r3, [pc, #120]	; (188f0 <vTraceStoreMemMangEvent+0x148>)
   18878:	4798      	blx	r3
   1887a:	0003      	movs	r3, r0
   1887c:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   1887e:	6a3b      	ldr	r3, [r7, #32]
   18880:	2b00      	cmp	r3, #0
   18882:	d01a      	beq.n	188ba <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   18884:	6a3b      	ldr	r3, [r7, #32]
   18886:	2226      	movs	r2, #38	; 0x26
   18888:	18ba      	adds	r2, r7, r2
   1888a:	8812      	ldrh	r2, [r2, #0]
   1888c:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   1888e:	6a3b      	ldr	r3, [r7, #32]
   18890:	2225      	movs	r2, #37	; 0x25
   18892:	18ba      	adds	r2, r7, r2
   18894:	7812      	ldrb	r2, [r2, #0]
   18896:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   18898:	68fb      	ldr	r3, [r7, #12]
   1889a:	b2db      	uxtb	r3, r3
   1889c:	3301      	adds	r3, #1
   1889e:	b2da      	uxtb	r2, r3
   188a0:	6a3b      	ldr	r3, [r7, #32]
   188a2:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   188a4:	68fb      	ldr	r3, [r7, #12]
   188a6:	b2da      	uxtb	r2, r3
   188a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   188aa:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   188ac:	4b11      	ldr	r3, [pc, #68]	; (188f4 <vTraceStoreMemMangEvent+0x14c>)
   188ae:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   188b0:	4b09      	ldr	r3, [pc, #36]	; (188d8 <vTraceStoreMemMangEvent+0x130>)
   188b2:	681b      	ldr	r3, [r3, #0]
   188b4:	4a0a      	ldr	r2, [pc, #40]	; (188e0 <vTraceStoreMemMangEvent+0x138>)
   188b6:	6812      	ldr	r2, [r2, #0]
   188b8:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   188ba:	4b08      	ldr	r3, [pc, #32]	; (188dc <vTraceStoreMemMangEvent+0x134>)
   188bc:	681b      	ldr	r3, [r3, #0]
   188be:	1e5a      	subs	r2, r3, #1
   188c0:	4b06      	ldr	r3, [pc, #24]	; (188dc <vTraceStoreMemMangEvent+0x134>)
   188c2:	601a      	str	r2, [r3, #0]
   188c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   188c6:	617b      	str	r3, [r7, #20]
   188c8:	697b      	ldr	r3, [r7, #20]
   188ca:	f383 8810 	msr	PRIMASK, r3
   188ce:	e000      	b.n	188d2 <vTraceStoreMemMangEvent+0x12a>
		return;
   188d0:	46c0      	nop			; (mov r8, r8)
}
   188d2:	46bd      	mov	sp, r7
   188d4:	b00e      	add	sp, #56	; 0x38
   188d6:	bd80      	pop	{r7, pc}
   188d8:	200009e0 	.word	0x200009e0
   188dc:	20000938 	.word	0x20000938
   188e0:	2000094c 	.word	0x2000094c
   188e4:	000199b1 	.word	0x000199b1
   188e8:	0000ffff 	.word	0x0000ffff
   188ec:	00018b75 	.word	0x00018b75
   188f0:	00019355 	.word	0x00019355
   188f4:	00019959 	.word	0x00019959

000188f8 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   188f8:	b590      	push	{r4, r7, lr}
   188fa:	b08b      	sub	sp, #44	; 0x2c
   188fc:	af00      	add	r7, sp, #0
   188fe:	60f8      	str	r0, [r7, #12]
   18900:	607a      	str	r2, [r7, #4]
   18902:	230b      	movs	r3, #11
   18904:	18fb      	adds	r3, r7, r3
   18906:	1c0a      	adds	r2, r1, #0
   18908:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1890a:	68fb      	ldr	r3, [r7, #12]
   1890c:	2bfe      	cmp	r3, #254	; 0xfe
   1890e:	d904      	bls.n	1891a <prvTraceStoreKernelCall+0x22>
   18910:	4b39      	ldr	r3, [pc, #228]	; (189f8 <prvTraceStoreKernelCall+0x100>)
   18912:	0018      	movs	r0, r3
   18914:	4b39      	ldr	r3, [pc, #228]	; (189fc <prvTraceStoreKernelCall+0x104>)
   18916:	4798      	blx	r3
   18918:	e06b      	b.n	189f2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1891a:	230b      	movs	r3, #11
   1891c:	18fb      	adds	r3, r7, r3
   1891e:	781b      	ldrb	r3, [r3, #0]
   18920:	2b08      	cmp	r3, #8
   18922:	d904      	bls.n	1892e <prvTraceStoreKernelCall+0x36>
   18924:	4b36      	ldr	r3, [pc, #216]	; (18a00 <prvTraceStoreKernelCall+0x108>)
   18926:	0018      	movs	r0, r3
   18928:	4b34      	ldr	r3, [pc, #208]	; (189fc <prvTraceStoreKernelCall+0x104>)
   1892a:	4798      	blx	r3
   1892c:	e061      	b.n	189f2 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1892e:	4b35      	ldr	r3, [pc, #212]	; (18a04 <prvTraceStoreKernelCall+0x10c>)
   18930:	681a      	ldr	r2, [r3, #0]
   18932:	230b      	movs	r3, #11
   18934:	18fb      	adds	r3, r7, r3
   18936:	781b      	ldrb	r3, [r3, #0]
   18938:	2164      	movs	r1, #100	; 0x64
   1893a:	18d3      	adds	r3, r2, r3
   1893c:	185b      	adds	r3, r3, r1
   1893e:	781b      	ldrb	r3, [r3, #0]
   18940:	001a      	movs	r2, r3
   18942:	687b      	ldr	r3, [r7, #4]
   18944:	429a      	cmp	r2, r3
   18946:	d204      	bcs.n	18952 <prvTraceStoreKernelCall+0x5a>
   18948:	4b2f      	ldr	r3, [pc, #188]	; (18a08 <prvTraceStoreKernelCall+0x110>)
   1894a:	0018      	movs	r0, r3
   1894c:	4b2b      	ldr	r3, [pc, #172]	; (189fc <prvTraceStoreKernelCall+0x104>)
   1894e:	4798      	blx	r3
   18950:	e04f      	b.n	189f2 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   18952:	4b2e      	ldr	r3, [pc, #184]	; (18a0c <prvTraceStoreKernelCall+0x114>)
   18954:	681b      	ldr	r3, [r3, #0]
   18956:	2b00      	cmp	r3, #0
   18958:	d004      	beq.n	18964 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1895a:	4b2d      	ldr	r3, [pc, #180]	; (18a10 <prvTraceStoreKernelCall+0x118>)
   1895c:	0018      	movs	r0, r3
   1895e:	4b27      	ldr	r3, [pc, #156]	; (189fc <prvTraceStoreKernelCall+0x104>)
   18960:	4798      	blx	r3
		return;
   18962:	e046      	b.n	189f2 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   18964:	4b2b      	ldr	r3, [pc, #172]	; (18a14 <prvTraceStoreKernelCall+0x11c>)
   18966:	781b      	ldrb	r3, [r3, #0]
   18968:	2b00      	cmp	r3, #0
   1896a:	d041      	beq.n	189f0 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1896c:	f3ef 8310 	mrs	r3, PRIMASK
   18970:	617b      	str	r3, [r7, #20]
  return(result);
   18972:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   18974:	627b      	str	r3, [r7, #36]	; 0x24
   18976:	2301      	movs	r3, #1
   18978:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1897a:	69bb      	ldr	r3, [r7, #24]
   1897c:	f383 8810 	msr	PRIMASK, r3
   18980:	4b22      	ldr	r3, [pc, #136]	; (18a0c <prvTraceStoreKernelCall+0x114>)
   18982:	681b      	ldr	r3, [r3, #0]
   18984:	1c5a      	adds	r2, r3, #1
   18986:	4b21      	ldr	r3, [pc, #132]	; (18a0c <prvTraceStoreKernelCall+0x114>)
   18988:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1898a:	4b1e      	ldr	r3, [pc, #120]	; (18a04 <prvTraceStoreKernelCall+0x10c>)
   1898c:	681b      	ldr	r3, [r3, #0]
   1898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18990:	2b00      	cmp	r3, #0
   18992:	d022      	beq.n	189da <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18994:	2322      	movs	r3, #34	; 0x22
   18996:	18fc      	adds	r4, r7, r3
   18998:	4b1f      	ldr	r3, [pc, #124]	; (18a18 <prvTraceStoreKernelCall+0x120>)
   1899a:	0018      	movs	r0, r3
   1899c:	4b1f      	ldr	r3, [pc, #124]	; (18a1c <prvTraceStoreKernelCall+0x124>)
   1899e:	4798      	blx	r3
   189a0:	0003      	movs	r3, r0
   189a2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   189a4:	2321      	movs	r3, #33	; 0x21
   189a6:	18fb      	adds	r3, r7, r3
   189a8:	687a      	ldr	r2, [r7, #4]
   189aa:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   189ac:	4b1c      	ldr	r3, [pc, #112]	; (18a20 <prvTraceStoreKernelCall+0x128>)
   189ae:	4798      	blx	r3
   189b0:	0003      	movs	r3, r0
   189b2:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   189b4:	69fb      	ldr	r3, [r7, #28]
   189b6:	2b00      	cmp	r3, #0
   189b8:	d00f      	beq.n	189da <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   189ba:	69fb      	ldr	r3, [r7, #28]
   189bc:	2222      	movs	r2, #34	; 0x22
   189be:	18ba      	adds	r2, r7, r2
   189c0:	8812      	ldrh	r2, [r2, #0]
   189c2:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   189c4:	68fb      	ldr	r3, [r7, #12]
   189c6:	b2da      	uxtb	r2, r3
   189c8:	69fb      	ldr	r3, [r7, #28]
   189ca:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   189cc:	69fb      	ldr	r3, [r7, #28]
   189ce:	2221      	movs	r2, #33	; 0x21
   189d0:	18ba      	adds	r2, r7, r2
   189d2:	7812      	ldrb	r2, [r2, #0]
   189d4:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   189d6:	4b13      	ldr	r3, [pc, #76]	; (18a24 <prvTraceStoreKernelCall+0x12c>)
   189d8:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   189da:	4b0c      	ldr	r3, [pc, #48]	; (18a0c <prvTraceStoreKernelCall+0x114>)
   189dc:	681b      	ldr	r3, [r3, #0]
   189de:	1e5a      	subs	r2, r3, #1
   189e0:	4b0a      	ldr	r3, [pc, #40]	; (18a0c <prvTraceStoreKernelCall+0x114>)
   189e2:	601a      	str	r2, [r3, #0]
   189e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   189e6:	613b      	str	r3, [r7, #16]
   189e8:	693b      	ldr	r3, [r7, #16]
   189ea:	f383 8810 	msr	PRIMASK, r3
   189ee:	e000      	b.n	189f2 <prvTraceStoreKernelCall+0xfa>
		return;
   189f0:	46c0      	nop			; (mov r8, r8)
}
   189f2:	46bd      	mov	sp, r7
   189f4:	b00b      	add	sp, #44	; 0x2c
   189f6:	bd90      	pop	{r4, r7, pc}
   189f8:	00036e6c 	.word	0x00036e6c
   189fc:	0001979d 	.word	0x0001979d
   18a00:	00036ea4 	.word	0x00036ea4
   18a04:	200009e0 	.word	0x200009e0
   18a08:	00036eec 	.word	0x00036eec
   18a0c:	20000938 	.word	0x20000938
   18a10:	00036f34 	.word	0x00036f34
   18a14:	20000944 	.word	0x20000944
   18a18:	0000ffff 	.word	0x0000ffff
   18a1c:	000199b1 	.word	0x000199b1
   18a20:	00019355 	.word	0x00019355
   18a24:	00019959 	.word	0x00019959

00018a28 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   18a28:	b580      	push	{r7, lr}
   18a2a:	b08a      	sub	sp, #40	; 0x28
   18a2c:	af00      	add	r7, sp, #0
   18a2e:	60f8      	str	r0, [r7, #12]
   18a30:	607a      	str	r2, [r7, #4]
   18a32:	603b      	str	r3, [r7, #0]
   18a34:	230b      	movs	r3, #11
   18a36:	18fb      	adds	r3, r7, r3
   18a38:	1c0a      	adds	r2, r1, #0
   18a3a:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   18a3c:	68fb      	ldr	r3, [r7, #12]
   18a3e:	2bfe      	cmp	r3, #254	; 0xfe
   18a40:	d904      	bls.n	18a4c <prvTraceStoreKernelCallWithParam+0x24>
   18a42:	4b40      	ldr	r3, [pc, #256]	; (18b44 <prvTraceStoreKernelCallWithParam+0x11c>)
   18a44:	0018      	movs	r0, r3
   18a46:	4b40      	ldr	r3, [pc, #256]	; (18b48 <prvTraceStoreKernelCallWithParam+0x120>)
   18a48:	4798      	blx	r3
   18a4a:	e077      	b.n	18b3c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   18a4c:	230b      	movs	r3, #11
   18a4e:	18fb      	adds	r3, r7, r3
   18a50:	781b      	ldrb	r3, [r3, #0]
   18a52:	2b08      	cmp	r3, #8
   18a54:	d904      	bls.n	18a60 <prvTraceStoreKernelCallWithParam+0x38>
   18a56:	4b3d      	ldr	r3, [pc, #244]	; (18b4c <prvTraceStoreKernelCallWithParam+0x124>)
   18a58:	0018      	movs	r0, r3
   18a5a:	4b3b      	ldr	r3, [pc, #236]	; (18b48 <prvTraceStoreKernelCallWithParam+0x120>)
   18a5c:	4798      	blx	r3
   18a5e:	e06d      	b.n	18b3c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   18a60:	4b3b      	ldr	r3, [pc, #236]	; (18b50 <prvTraceStoreKernelCallWithParam+0x128>)
   18a62:	681a      	ldr	r2, [r3, #0]
   18a64:	230b      	movs	r3, #11
   18a66:	18fb      	adds	r3, r7, r3
   18a68:	781b      	ldrb	r3, [r3, #0]
   18a6a:	2164      	movs	r1, #100	; 0x64
   18a6c:	18d3      	adds	r3, r2, r3
   18a6e:	185b      	adds	r3, r3, r1
   18a70:	781b      	ldrb	r3, [r3, #0]
   18a72:	001a      	movs	r2, r3
   18a74:	687b      	ldr	r3, [r7, #4]
   18a76:	429a      	cmp	r2, r3
   18a78:	d204      	bcs.n	18a84 <prvTraceStoreKernelCallWithParam+0x5c>
   18a7a:	4b36      	ldr	r3, [pc, #216]	; (18b54 <prvTraceStoreKernelCallWithParam+0x12c>)
   18a7c:	0018      	movs	r0, r3
   18a7e:	4b32      	ldr	r3, [pc, #200]	; (18b48 <prvTraceStoreKernelCallWithParam+0x120>)
   18a80:	4798      	blx	r3
   18a82:	e05b      	b.n	18b3c <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   18a84:	4b34      	ldr	r3, [pc, #208]	; (18b58 <prvTraceStoreKernelCallWithParam+0x130>)
   18a86:	681b      	ldr	r3, [r3, #0]
   18a88:	2b00      	cmp	r3, #0
   18a8a:	d004      	beq.n	18a96 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   18a8c:	4b33      	ldr	r3, [pc, #204]	; (18b5c <prvTraceStoreKernelCallWithParam+0x134>)
   18a8e:	0018      	movs	r0, r3
   18a90:	4b2d      	ldr	r3, [pc, #180]	; (18b48 <prvTraceStoreKernelCallWithParam+0x120>)
   18a92:	4798      	blx	r3
		return;
   18a94:	e052      	b.n	18b3c <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18a96:	f3ef 8310 	mrs	r3, PRIMASK
   18a9a:	617b      	str	r3, [r7, #20]
  return(result);
   18a9c:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   18a9e:	627b      	str	r3, [r7, #36]	; 0x24
   18aa0:	2301      	movs	r3, #1
   18aa2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18aa4:	69bb      	ldr	r3, [r7, #24]
   18aa6:	f383 8810 	msr	PRIMASK, r3
   18aaa:	4b2b      	ldr	r3, [pc, #172]	; (18b58 <prvTraceStoreKernelCallWithParam+0x130>)
   18aac:	681b      	ldr	r3, [r3, #0]
   18aae:	1c5a      	adds	r2, r3, #1
   18ab0:	4b29      	ldr	r3, [pc, #164]	; (18b58 <prvTraceStoreKernelCallWithParam+0x130>)
   18ab2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18ab4:	4b26      	ldr	r3, [pc, #152]	; (18b50 <prvTraceStoreKernelCallWithParam+0x128>)
   18ab6:	681b      	ldr	r3, [r3, #0]
   18ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18aba:	2b00      	cmp	r3, #0
   18abc:	d034      	beq.n	18b28 <prvTraceStoreKernelCallWithParam+0x100>
   18abe:	4b28      	ldr	r3, [pc, #160]	; (18b60 <prvTraceStoreKernelCallWithParam+0x138>)
   18ac0:	781b      	ldrb	r3, [r3, #0]
   18ac2:	2b00      	cmp	r3, #0
   18ac4:	d030      	beq.n	18b28 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   18ac6:	20ff      	movs	r0, #255	; 0xff
   18ac8:	4b26      	ldr	r3, [pc, #152]	; (18b64 <prvTraceStoreKernelCallWithParam+0x13c>)
   18aca:	4798      	blx	r3
   18acc:	0003      	movs	r3, r0
   18ace:	001a      	movs	r2, r3
   18ad0:	2323      	movs	r3, #35	; 0x23
   18ad2:	18fb      	adds	r3, r7, r3
   18ad4:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   18ad6:	683b      	ldr	r3, [r7, #0]
   18ad8:	0019      	movs	r1, r3
   18ada:	20ff      	movs	r0, #255	; 0xff
   18adc:	4b22      	ldr	r3, [pc, #136]	; (18b68 <prvTraceStoreKernelCallWithParam+0x140>)
   18ade:	4798      	blx	r3
   18ae0:	0002      	movs	r2, r0
   18ae2:	2322      	movs	r3, #34	; 0x22
   18ae4:	18fb      	adds	r3, r7, r3
   18ae6:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   18ae8:	2321      	movs	r3, #33	; 0x21
   18aea:	18fb      	adds	r3, r7, r3
   18aec:	687a      	ldr	r2, [r7, #4]
   18aee:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   18af0:	4b1e      	ldr	r3, [pc, #120]	; (18b6c <prvTraceStoreKernelCallWithParam+0x144>)
   18af2:	4798      	blx	r3
   18af4:	0003      	movs	r3, r0
   18af6:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   18af8:	69fb      	ldr	r3, [r7, #28]
   18afa:	2b00      	cmp	r3, #0
   18afc:	d014      	beq.n	18b28 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   18afe:	69fb      	ldr	r3, [r7, #28]
   18b00:	2223      	movs	r2, #35	; 0x23
   18b02:	18ba      	adds	r2, r7, r2
   18b04:	7812      	ldrb	r2, [r2, #0]
   18b06:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   18b08:	68fb      	ldr	r3, [r7, #12]
   18b0a:	b2da      	uxtb	r2, r3
   18b0c:	69fb      	ldr	r3, [r7, #28]
   18b0e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   18b10:	69fb      	ldr	r3, [r7, #28]
   18b12:	2221      	movs	r2, #33	; 0x21
   18b14:	18ba      	adds	r2, r7, r2
   18b16:	7812      	ldrb	r2, [r2, #0]
   18b18:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   18b1a:	69fb      	ldr	r3, [r7, #28]
   18b1c:	2222      	movs	r2, #34	; 0x22
   18b1e:	18ba      	adds	r2, r7, r2
   18b20:	7812      	ldrb	r2, [r2, #0]
   18b22:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   18b24:	4b12      	ldr	r3, [pc, #72]	; (18b70 <prvTraceStoreKernelCallWithParam+0x148>)
   18b26:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18b28:	4b0b      	ldr	r3, [pc, #44]	; (18b58 <prvTraceStoreKernelCallWithParam+0x130>)
   18b2a:	681b      	ldr	r3, [r3, #0]
   18b2c:	1e5a      	subs	r2, r3, #1
   18b2e:	4b0a      	ldr	r3, [pc, #40]	; (18b58 <prvTraceStoreKernelCallWithParam+0x130>)
   18b30:	601a      	str	r2, [r3, #0]
   18b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18b34:	613b      	str	r3, [r7, #16]
   18b36:	693b      	ldr	r3, [r7, #16]
   18b38:	f383 8810 	msr	PRIMASK, r3
}
   18b3c:	46bd      	mov	sp, r7
   18b3e:	b00a      	add	sp, #40	; 0x28
   18b40:	bd80      	pop	{r7, pc}
   18b42:	46c0      	nop			; (mov r8, r8)
   18b44:	00036f6c 	.word	0x00036f6c
   18b48:	0001979d 	.word	0x0001979d
   18b4c:	00036fac 	.word	0x00036fac
   18b50:	200009e0 	.word	0x200009e0
   18b54:	00036ffc 	.word	0x00036ffc
   18b58:	20000938 	.word	0x20000938
   18b5c:	0003704c 	.word	0x0003704c
   18b60:	20000944 	.word	0x20000944
   18b64:	000199b1 	.word	0x000199b1
   18b68:	00018b75 	.word	0x00018b75
   18b6c:	00019355 	.word	0x00019355
   18b70:	00019959 	.word	0x00019959

00018b74 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   18b74:	b580      	push	{r7, lr}
   18b76:	b084      	sub	sp, #16
   18b78:	af00      	add	r7, sp, #0
   18b7a:	6078      	str	r0, [r7, #4]
   18b7c:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   18b7e:	687b      	ldr	r3, [r7, #4]
   18b80:	2bff      	cmp	r3, #255	; 0xff
   18b82:	d009      	beq.n	18b98 <prvTraceGetParam+0x24>
   18b84:	687b      	ldr	r3, [r7, #4]
   18b86:	4a19      	ldr	r2, [pc, #100]	; (18bec <prvTraceGetParam+0x78>)
   18b88:	4293      	cmp	r3, r2
   18b8a:	d005      	beq.n	18b98 <prvTraceGetParam+0x24>
   18b8c:	4b18      	ldr	r3, [pc, #96]	; (18bf0 <prvTraceGetParam+0x7c>)
   18b8e:	0018      	movs	r0, r3
   18b90:	4b18      	ldr	r3, [pc, #96]	; (18bf4 <prvTraceGetParam+0x80>)
   18b92:	4798      	blx	r3
   18b94:	683b      	ldr	r3, [r7, #0]
   18b96:	e024      	b.n	18be2 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   18b98:	683a      	ldr	r2, [r7, #0]
   18b9a:	687b      	ldr	r3, [r7, #4]
   18b9c:	429a      	cmp	r2, r3
   18b9e:	d801      	bhi.n	18ba4 <prvTraceGetParam+0x30>
	{
		return param;
   18ba0:	683b      	ldr	r3, [r7, #0]
   18ba2:	e01e      	b.n	18be2 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   18ba4:	4b14      	ldr	r3, [pc, #80]	; (18bf8 <prvTraceGetParam+0x84>)
   18ba6:	4798      	blx	r3
   18ba8:	0003      	movs	r3, r0
   18baa:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   18bac:	68fb      	ldr	r3, [r7, #12]
   18bae:	2b00      	cmp	r3, #0
   18bb0:	d014      	beq.n	18bdc <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   18bb2:	68fb      	ldr	r3, [r7, #12]
   18bb4:	2201      	movs	r2, #1
   18bb6:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   18bb8:	687b      	ldr	r3, [r7, #4]
   18bba:	43db      	mvns	r3, r3
   18bbc:	683a      	ldr	r2, [r7, #0]
   18bbe:	4013      	ands	r3, r2
   18bc0:	0a1b      	lsrs	r3, r3, #8
   18bc2:	b2da      	uxtb	r2, r3
   18bc4:	68fb      	ldr	r3, [r7, #12]
   18bc6:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   18bc8:	687b      	ldr	r3, [r7, #4]
   18bca:	43db      	mvns	r3, r3
   18bcc:	683a      	ldr	r2, [r7, #0]
   18bce:	4013      	ands	r3, r2
   18bd0:	0c1b      	lsrs	r3, r3, #16
   18bd2:	b29a      	uxth	r2, r3
   18bd4:	68fb      	ldr	r3, [r7, #12]
   18bd6:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18bd8:	4b08      	ldr	r3, [pc, #32]	; (18bfc <prvTraceGetParam+0x88>)
   18bda:	4798      	blx	r3
		}

		return param & param_max;
   18bdc:	683b      	ldr	r3, [r7, #0]
   18bde:	687a      	ldr	r2, [r7, #4]
   18be0:	4013      	ands	r3, r2
	}
}
   18be2:	0018      	movs	r0, r3
   18be4:	46bd      	mov	sp, r7
   18be6:	b004      	add	sp, #16
   18be8:	bd80      	pop	{r7, pc}
   18bea:	46c0      	nop			; (mov r8, r8)
   18bec:	0000ffff 	.word	0x0000ffff
   18bf0:	00037084 	.word	0x00037084
   18bf4:	0001979d 	.word	0x0001979d
   18bf8:	00019355 	.word	0x00019355
   18bfc:	00019959 	.word	0x00019959

00018c00 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   18c00:	b580      	push	{r7, lr}
   18c02:	b08a      	sub	sp, #40	; 0x28
   18c04:	af00      	add	r7, sp, #0
   18c06:	6078      	str	r0, [r7, #4]
   18c08:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   18c0a:	2326      	movs	r3, #38	; 0x26
   18c0c:	18fb      	adds	r3, r7, r3
   18c0e:	2200      	movs	r2, #0
   18c10:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   18c12:	687b      	ldr	r3, [r7, #4]
   18c14:	2bfe      	cmp	r3, #254	; 0xfe
   18c16:	d904      	bls.n	18c22 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   18c18:	4b2d      	ldr	r3, [pc, #180]	; (18cd0 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   18c1a:	0018      	movs	r0, r3
   18c1c:	4b2d      	ldr	r3, [pc, #180]	; (18cd4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18c1e:	4798      	blx	r3
   18c20:	e053      	b.n	18cca <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   18c22:	4b2d      	ldr	r3, [pc, #180]	; (18cd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18c24:	681b      	ldr	r3, [r3, #0]
   18c26:	2b00      	cmp	r3, #0
   18c28:	d004      	beq.n	18c34 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   18c2a:	4b2c      	ldr	r3, [pc, #176]	; (18cdc <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   18c2c:	0018      	movs	r0, r3
   18c2e:	4b29      	ldr	r3, [pc, #164]	; (18cd4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   18c30:	4798      	blx	r3
		return;
   18c32:	e04a      	b.n	18cca <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18c34:	f3ef 8310 	mrs	r3, PRIMASK
   18c38:	613b      	str	r3, [r7, #16]
  return(result);
   18c3a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   18c3c:	623b      	str	r3, [r7, #32]
   18c3e:	2301      	movs	r3, #1
   18c40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18c42:	697b      	ldr	r3, [r7, #20]
   18c44:	f383 8810 	msr	PRIMASK, r3
   18c48:	4b23      	ldr	r3, [pc, #140]	; (18cd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18c4a:	681b      	ldr	r3, [r3, #0]
   18c4c:	1c5a      	adds	r2, r3, #1
   18c4e:	4b22      	ldr	r3, [pc, #136]	; (18cd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18c50:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   18c52:	4b23      	ldr	r3, [pc, #140]	; (18ce0 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   18c54:	681b      	ldr	r3, [r3, #0]
   18c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18c58:	2b00      	cmp	r3, #0
   18c5a:	d02c      	beq.n	18cb6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   18c5c:	4b21      	ldr	r3, [pc, #132]	; (18ce4 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   18c5e:	781b      	ldrb	r3, [r3, #0]
   18c60:	2b00      	cmp	r3, #0
   18c62:	d028      	beq.n	18cb6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   18c64:	20ff      	movs	r0, #255	; 0xff
   18c66:	4b20      	ldr	r3, [pc, #128]	; (18ce8 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   18c68:	4798      	blx	r3
   18c6a:	0003      	movs	r3, r0
   18c6c:	001a      	movs	r2, r3
   18c6e:	231f      	movs	r3, #31
   18c70:	18fb      	adds	r3, r7, r3
   18c72:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   18c74:	683b      	ldr	r3, [r7, #0]
   18c76:	4a1d      	ldr	r2, [pc, #116]	; (18cec <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   18c78:	0019      	movs	r1, r3
   18c7a:	0010      	movs	r0, r2
   18c7c:	4b1c      	ldr	r3, [pc, #112]	; (18cf0 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   18c7e:	4798      	blx	r3
   18c80:	0002      	movs	r2, r0
   18c82:	2326      	movs	r3, #38	; 0x26
   18c84:	18fb      	adds	r3, r7, r3
   18c86:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   18c88:	4b1a      	ldr	r3, [pc, #104]	; (18cf4 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   18c8a:	4798      	blx	r3
   18c8c:	0003      	movs	r3, r0
   18c8e:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   18c90:	69bb      	ldr	r3, [r7, #24]
   18c92:	2b00      	cmp	r3, #0
   18c94:	d00f      	beq.n	18cb6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   18c96:	69bb      	ldr	r3, [r7, #24]
   18c98:	221f      	movs	r2, #31
   18c9a:	18ba      	adds	r2, r7, r2
   18c9c:	7812      	ldrb	r2, [r2, #0]
   18c9e:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   18ca0:	687b      	ldr	r3, [r7, #4]
   18ca2:	b2da      	uxtb	r2, r3
   18ca4:	69bb      	ldr	r3, [r7, #24]
   18ca6:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   18ca8:	69bb      	ldr	r3, [r7, #24]
   18caa:	2226      	movs	r2, #38	; 0x26
   18cac:	18ba      	adds	r2, r7, r2
   18cae:	8812      	ldrh	r2, [r2, #0]
   18cb0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   18cb2:	4b11      	ldr	r3, [pc, #68]	; (18cf8 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   18cb4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18cb6:	4b08      	ldr	r3, [pc, #32]	; (18cd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18cb8:	681b      	ldr	r3, [r3, #0]
   18cba:	1e5a      	subs	r2, r3, #1
   18cbc:	4b06      	ldr	r3, [pc, #24]	; (18cd8 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   18cbe:	601a      	str	r2, [r3, #0]
   18cc0:	6a3b      	ldr	r3, [r7, #32]
   18cc2:	60fb      	str	r3, [r7, #12]
   18cc4:	68fb      	ldr	r3, [r7, #12]
   18cc6:	f383 8810 	msr	PRIMASK, r3
}
   18cca:	46bd      	mov	sp, r7
   18ccc:	b00a      	add	sp, #40	; 0x28
   18cce:	bd80      	pop	{r7, pc}
   18cd0:	000370c0 	.word	0x000370c0
   18cd4:	0001979d 	.word	0x0001979d
   18cd8:	20000938 	.word	0x20000938
   18cdc:	00037118 	.word	0x00037118
   18ce0:	200009e0 	.word	0x200009e0
   18ce4:	20000944 	.word	0x20000944
   18ce8:	000199b1 	.word	0x000199b1
   18cec:	0000ffff 	.word	0x0000ffff
   18cf0:	00018b75 	.word	0x00018b75
   18cf4:	00019355 	.word	0x00019355
   18cf8:	00019959 	.word	0x00019959

00018cfc <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   18cfc:	b590      	push	{r4, r7, lr}
   18cfe:	b089      	sub	sp, #36	; 0x24
   18d00:	af00      	add	r7, sp, #0
   18d02:	0002      	movs	r2, r0
   18d04:	1dfb      	adds	r3, r7, #7
   18d06:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   18d08:	1dfb      	adds	r3, r7, #7
   18d0a:	781b      	ldrb	r3, [r3, #0]
   18d0c:	2b0f      	cmp	r3, #15
   18d0e:	d904      	bls.n	18d1a <prvTraceStoreTaskswitch+0x1e>
   18d10:	4b34      	ldr	r3, [pc, #208]	; (18de4 <prvTraceStoreTaskswitch+0xe8>)
   18d12:	0018      	movs	r0, r3
   18d14:	4b34      	ldr	r3, [pc, #208]	; (18de8 <prvTraceStoreTaskswitch+0xec>)
   18d16:	4798      	blx	r3
   18d18:	e061      	b.n	18dde <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18d1a:	f3ef 8310 	mrs	r3, PRIMASK
   18d1e:	60fb      	str	r3, [r7, #12]
  return(result);
   18d20:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   18d22:	61fb      	str	r3, [r7, #28]
   18d24:	2301      	movs	r3, #1
   18d26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18d28:	693b      	ldr	r3, [r7, #16]
   18d2a:	f383 8810 	msr	PRIMASK, r3
   18d2e:	4b2f      	ldr	r3, [pc, #188]	; (18dec <prvTraceStoreTaskswitch+0xf0>)
   18d30:	681b      	ldr	r3, [r3, #0]
   18d32:	1c5a      	adds	r2, r3, #1
   18d34:	4b2d      	ldr	r3, [pc, #180]	; (18dec <prvTraceStoreTaskswitch+0xf0>)
   18d36:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   18d38:	4b2d      	ldr	r3, [pc, #180]	; (18df0 <prvTraceStoreTaskswitch+0xf4>)
   18d3a:	781b      	ldrb	r3, [r3, #0]
   18d3c:	1dfa      	adds	r2, r7, #7
   18d3e:	7812      	ldrb	r2, [r2, #0]
   18d40:	429a      	cmp	r2, r3
   18d42:	d042      	beq.n	18dca <prvTraceStoreTaskswitch+0xce>
   18d44:	4b2b      	ldr	r3, [pc, #172]	; (18df4 <prvTraceStoreTaskswitch+0xf8>)
   18d46:	681b      	ldr	r3, [r3, #0]
   18d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18d4a:	2b00      	cmp	r3, #0
   18d4c:	d03d      	beq.n	18dca <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   18d4e:	4b2a      	ldr	r3, [pc, #168]	; (18df8 <prvTraceStoreTaskswitch+0xfc>)
   18d50:	2200      	movs	r2, #0
   18d52:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18d54:	231a      	movs	r3, #26
   18d56:	18fc      	adds	r4, r7, r3
   18d58:	4b28      	ldr	r3, [pc, #160]	; (18dfc <prvTraceStoreTaskswitch+0x100>)
   18d5a:	0018      	movs	r0, r3
   18d5c:	4b28      	ldr	r3, [pc, #160]	; (18e00 <prvTraceStoreTaskswitch+0x104>)
   18d5e:	4798      	blx	r3
   18d60:	0003      	movs	r3, r0
   18d62:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   18d64:	4b22      	ldr	r3, [pc, #136]	; (18df0 <prvTraceStoreTaskswitch+0xf4>)
   18d66:	1dfa      	adds	r2, r7, #7
   18d68:	7812      	ldrb	r2, [r2, #0]
   18d6a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   18d6c:	2319      	movs	r3, #25
   18d6e:	18fb      	adds	r3, r7, r3
   18d70:	4a1f      	ldr	r2, [pc, #124]	; (18df0 <prvTraceStoreTaskswitch+0xf4>)
   18d72:	7812      	ldrb	r2, [r2, #0]
   18d74:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   18d76:	4b23      	ldr	r3, [pc, #140]	; (18e04 <prvTraceStoreTaskswitch+0x108>)
   18d78:	4798      	blx	r3
   18d7a:	0003      	movs	r3, r0
   18d7c:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   18d7e:	697b      	ldr	r3, [r7, #20]
   18d80:	2b00      	cmp	r3, #0
   18d82:	d022      	beq.n	18dca <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   18d84:	4b1a      	ldr	r3, [pc, #104]	; (18df0 <prvTraceStoreTaskswitch+0xf4>)
   18d86:	781b      	ldrb	r3, [r3, #0]
   18d88:	0019      	movs	r1, r3
   18d8a:	2003      	movs	r0, #3
   18d8c:	4b1e      	ldr	r3, [pc, #120]	; (18e08 <prvTraceStoreTaskswitch+0x10c>)
   18d8e:	4798      	blx	r3
   18d90:	0003      	movs	r3, r0
   18d92:	2b01      	cmp	r3, #1
   18d94:	d103      	bne.n	18d9e <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   18d96:	697b      	ldr	r3, [r7, #20]
   18d98:	2207      	movs	r2, #7
   18d9a:	701a      	strb	r2, [r3, #0]
   18d9c:	e002      	b.n	18da4 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   18d9e:	697b      	ldr	r3, [r7, #20]
   18da0:	2206      	movs	r2, #6
   18da2:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   18da4:	697b      	ldr	r3, [r7, #20]
   18da6:	221a      	movs	r2, #26
   18da8:	18ba      	adds	r2, r7, r2
   18daa:	8812      	ldrh	r2, [r2, #0]
   18dac:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   18dae:	697b      	ldr	r3, [r7, #20]
   18db0:	2219      	movs	r2, #25
   18db2:	18ba      	adds	r2, r7, r2
   18db4:	7812      	ldrb	r2, [r2, #0]
   18db6:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   18db8:	4b0d      	ldr	r3, [pc, #52]	; (18df0 <prvTraceStoreTaskswitch+0xf4>)
   18dba:	781b      	ldrb	r3, [r3, #0]
   18dbc:	2201      	movs	r2, #1
   18dbe:	0019      	movs	r1, r3
   18dc0:	2003      	movs	r0, #3
   18dc2:	4b12      	ldr	r3, [pc, #72]	; (18e0c <prvTraceStoreTaskswitch+0x110>)
   18dc4:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   18dc6:	4b12      	ldr	r3, [pc, #72]	; (18e10 <prvTraceStoreTaskswitch+0x114>)
   18dc8:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   18dca:	4b08      	ldr	r3, [pc, #32]	; (18dec <prvTraceStoreTaskswitch+0xf0>)
   18dcc:	681b      	ldr	r3, [r3, #0]
   18dce:	1e5a      	subs	r2, r3, #1
   18dd0:	4b06      	ldr	r3, [pc, #24]	; (18dec <prvTraceStoreTaskswitch+0xf0>)
   18dd2:	601a      	str	r2, [r3, #0]
   18dd4:	69fb      	ldr	r3, [r7, #28]
   18dd6:	60bb      	str	r3, [r7, #8]
   18dd8:	68bb      	ldr	r3, [r7, #8]
   18dda:	f383 8810 	msr	PRIMASK, r3
}
   18dde:	46bd      	mov	sp, r7
   18de0:	b009      	add	sp, #36	; 0x24
   18de2:	bd90      	pop	{r4, r7, pc}
   18de4:	00037150 	.word	0x00037150
   18de8:	0001979d 	.word	0x0001979d
   18dec:	20000938 	.word	0x20000938
   18df0:	20000944 	.word	0x20000944
   18df4:	200009e0 	.word	0x200009e0
   18df8:	20000924 	.word	0x20000924
   18dfc:	0000ffff 	.word	0x0000ffff
   18e00:	000199b1 	.word	0x000199b1
   18e04:	00019355 	.word	0x00019355
   18e08:	00018ff9 	.word	0x00018ff9
   18e0c:	00018f55 	.word	0x00018f55
   18e10:	00019959 	.word	0x00019959

00018e14 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18e14:	b590      	push	{r4, r7, lr}
   18e16:	b083      	sub	sp, #12
   18e18:	af00      	add	r7, sp, #0
   18e1a:	0004      	movs	r4, r0
   18e1c:	0008      	movs	r0, r1
   18e1e:	0011      	movs	r1, r2
   18e20:	1dfb      	adds	r3, r7, #7
   18e22:	1c22      	adds	r2, r4, #0
   18e24:	701a      	strb	r2, [r3, #0]
   18e26:	1dbb      	adds	r3, r7, #6
   18e28:	1c02      	adds	r2, r0, #0
   18e2a:	701a      	strb	r2, [r3, #0]
   18e2c:	1d7b      	adds	r3, r7, #5
   18e2e:	1c0a      	adds	r2, r1, #0
   18e30:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18e32:	1dfb      	adds	r3, r7, #7
   18e34:	781b      	ldrb	r3, [r3, #0]
   18e36:	2b08      	cmp	r3, #8
   18e38:	d904      	bls.n	18e44 <prvTraceSetPriorityProperty+0x30>
   18e3a:	4b1a      	ldr	r3, [pc, #104]	; (18ea4 <prvTraceSetPriorityProperty+0x90>)
   18e3c:	0018      	movs	r0, r3
   18e3e:	4b1a      	ldr	r3, [pc, #104]	; (18ea8 <prvTraceSetPriorityProperty+0x94>)
   18e40:	4798      	blx	r3
   18e42:	e02c      	b.n	18e9e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18e44:	4b19      	ldr	r3, [pc, #100]	; (18eac <prvTraceSetPriorityProperty+0x98>)
   18e46:	681a      	ldr	r2, [r3, #0]
   18e48:	1dfb      	adds	r3, r7, #7
   18e4a:	781b      	ldrb	r3, [r3, #0]
   18e4c:	2164      	movs	r1, #100	; 0x64
   18e4e:	18d3      	adds	r3, r2, r3
   18e50:	185b      	adds	r3, r3, r1
   18e52:	781b      	ldrb	r3, [r3, #0]
   18e54:	1dba      	adds	r2, r7, #6
   18e56:	7812      	ldrb	r2, [r2, #0]
   18e58:	429a      	cmp	r2, r3
   18e5a:	d904      	bls.n	18e66 <prvTraceSetPriorityProperty+0x52>
   18e5c:	4b14      	ldr	r3, [pc, #80]	; (18eb0 <prvTraceSetPriorityProperty+0x9c>)
   18e5e:	0018      	movs	r0, r3
   18e60:	4b11      	ldr	r3, [pc, #68]	; (18ea8 <prvTraceSetPriorityProperty+0x94>)
   18e62:	4798      	blx	r3
   18e64:	e01b      	b.n	18e9e <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   18e66:	4b11      	ldr	r3, [pc, #68]	; (18eac <prvTraceSetPriorityProperty+0x98>)
   18e68:	681c      	ldr	r4, [r3, #0]
   18e6a:	1dfb      	adds	r3, r7, #7
   18e6c:	781a      	ldrb	r2, [r3, #0]
   18e6e:	1dbb      	adds	r3, r7, #6
   18e70:	781b      	ldrb	r3, [r3, #0]
   18e72:	0011      	movs	r1, r2
   18e74:	0018      	movs	r0, r3
   18e76:	4b0f      	ldr	r3, [pc, #60]	; (18eb4 <prvTraceSetPriorityProperty+0xa0>)
   18e78:	4798      	blx	r3
   18e7a:	0003      	movs	r3, r0
   18e7c:	0018      	movs	r0, r3
   18e7e:	4b0b      	ldr	r3, [pc, #44]	; (18eac <prvTraceSetPriorityProperty+0x98>)
   18e80:	681a      	ldr	r2, [r3, #0]
   18e82:	1dfb      	adds	r3, r7, #7
   18e84:	781b      	ldrb	r3, [r3, #0]
   18e86:	2170      	movs	r1, #112	; 0x70
   18e88:	18d3      	adds	r3, r2, r3
   18e8a:	185b      	adds	r3, r3, r1
   18e8c:	781b      	ldrb	r3, [r3, #0]
   18e8e:	18c3      	adds	r3, r0, r3
   18e90:	3301      	adds	r3, #1
   18e92:	229c      	movs	r2, #156	; 0x9c
   18e94:	18e3      	adds	r3, r4, r3
   18e96:	189b      	adds	r3, r3, r2
   18e98:	1d7a      	adds	r2, r7, #5
   18e9a:	7812      	ldrb	r2, [r2, #0]
   18e9c:	701a      	strb	r2, [r3, #0]
}
   18e9e:	46bd      	mov	sp, r7
   18ea0:	b003      	add	sp, #12
   18ea2:	bd90      	pop	{r4, r7, pc}
   18ea4:	000372e4 	.word	0x000372e4
   18ea8:	0001979d 	.word	0x0001979d
   18eac:	200009e0 	.word	0x200009e0
   18eb0:	00037330 	.word	0x00037330
   18eb4:	000193a9 	.word	0x000193a9

00018eb8 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   18eb8:	b590      	push	{r4, r7, lr}
   18eba:	b083      	sub	sp, #12
   18ebc:	af00      	add	r7, sp, #0
   18ebe:	0002      	movs	r2, r0
   18ec0:	1dfb      	adds	r3, r7, #7
   18ec2:	701a      	strb	r2, [r3, #0]
   18ec4:	1dbb      	adds	r3, r7, #6
   18ec6:	1c0a      	adds	r2, r1, #0
   18ec8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18eca:	1dfb      	adds	r3, r7, #7
   18ecc:	781b      	ldrb	r3, [r3, #0]
   18ece:	2b08      	cmp	r3, #8
   18ed0:	d905      	bls.n	18ede <prvTraceGetPriorityProperty+0x26>
   18ed2:	4b1b      	ldr	r3, [pc, #108]	; (18f40 <prvTraceGetPriorityProperty+0x88>)
   18ed4:	0018      	movs	r0, r3
   18ed6:	4b1b      	ldr	r3, [pc, #108]	; (18f44 <prvTraceGetPriorityProperty+0x8c>)
   18ed8:	4798      	blx	r3
   18eda:	2300      	movs	r3, #0
   18edc:	e02b      	b.n	18f36 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18ede:	4b1a      	ldr	r3, [pc, #104]	; (18f48 <prvTraceGetPriorityProperty+0x90>)
   18ee0:	681a      	ldr	r2, [r3, #0]
   18ee2:	1dfb      	adds	r3, r7, #7
   18ee4:	781b      	ldrb	r3, [r3, #0]
   18ee6:	2164      	movs	r1, #100	; 0x64
   18ee8:	18d3      	adds	r3, r2, r3
   18eea:	185b      	adds	r3, r3, r1
   18eec:	781b      	ldrb	r3, [r3, #0]
   18eee:	1dba      	adds	r2, r7, #6
   18ef0:	7812      	ldrb	r2, [r2, #0]
   18ef2:	429a      	cmp	r2, r3
   18ef4:	d905      	bls.n	18f02 <prvTraceGetPriorityProperty+0x4a>
   18ef6:	4b15      	ldr	r3, [pc, #84]	; (18f4c <prvTraceGetPriorityProperty+0x94>)
   18ef8:	0018      	movs	r0, r3
   18efa:	4b12      	ldr	r3, [pc, #72]	; (18f44 <prvTraceGetPriorityProperty+0x8c>)
   18efc:	4798      	blx	r3
   18efe:	2300      	movs	r3, #0
   18f00:	e019      	b.n	18f36 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   18f02:	4b11      	ldr	r3, [pc, #68]	; (18f48 <prvTraceGetPriorityProperty+0x90>)
   18f04:	681c      	ldr	r4, [r3, #0]
   18f06:	1dfb      	adds	r3, r7, #7
   18f08:	781a      	ldrb	r2, [r3, #0]
   18f0a:	1dbb      	adds	r3, r7, #6
   18f0c:	781b      	ldrb	r3, [r3, #0]
   18f0e:	0011      	movs	r1, r2
   18f10:	0018      	movs	r0, r3
   18f12:	4b0f      	ldr	r3, [pc, #60]	; (18f50 <prvTraceGetPriorityProperty+0x98>)
   18f14:	4798      	blx	r3
   18f16:	0003      	movs	r3, r0
   18f18:	0018      	movs	r0, r3
   18f1a:	4b0b      	ldr	r3, [pc, #44]	; (18f48 <prvTraceGetPriorityProperty+0x90>)
   18f1c:	681a      	ldr	r2, [r3, #0]
   18f1e:	1dfb      	adds	r3, r7, #7
   18f20:	781b      	ldrb	r3, [r3, #0]
   18f22:	2170      	movs	r1, #112	; 0x70
   18f24:	18d3      	adds	r3, r2, r3
   18f26:	185b      	adds	r3, r3, r1
   18f28:	781b      	ldrb	r3, [r3, #0]
   18f2a:	18c3      	adds	r3, r0, r3
   18f2c:	3301      	adds	r3, #1
   18f2e:	229c      	movs	r2, #156	; 0x9c
   18f30:	18e3      	adds	r3, r4, r3
   18f32:	189b      	adds	r3, r3, r2
   18f34:	781b      	ldrb	r3, [r3, #0]
}
   18f36:	0018      	movs	r0, r3
   18f38:	46bd      	mov	sp, r7
   18f3a:	b003      	add	sp, #12
   18f3c:	bd90      	pop	{r4, r7, pc}
   18f3e:	46c0      	nop			; (mov r8, r8)
   18f40:	00037370 	.word	0x00037370
   18f44:	0001979d 	.word	0x0001979d
   18f48:	200009e0 	.word	0x200009e0
   18f4c:	000373bc 	.word	0x000373bc
   18f50:	000193a9 	.word	0x000193a9

00018f54 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   18f54:	b590      	push	{r4, r7, lr}
   18f56:	b083      	sub	sp, #12
   18f58:	af00      	add	r7, sp, #0
   18f5a:	0004      	movs	r4, r0
   18f5c:	0008      	movs	r0, r1
   18f5e:	0011      	movs	r1, r2
   18f60:	1dfb      	adds	r3, r7, #7
   18f62:	1c22      	adds	r2, r4, #0
   18f64:	701a      	strb	r2, [r3, #0]
   18f66:	1dbb      	adds	r3, r7, #6
   18f68:	1c02      	adds	r2, r0, #0
   18f6a:	701a      	strb	r2, [r3, #0]
   18f6c:	1d7b      	adds	r3, r7, #5
   18f6e:	1c0a      	adds	r2, r1, #0
   18f70:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   18f72:	1dfb      	adds	r3, r7, #7
   18f74:	781b      	ldrb	r3, [r3, #0]
   18f76:	2b08      	cmp	r3, #8
   18f78:	d904      	bls.n	18f84 <prvTraceSetObjectState+0x30>
   18f7a:	4b1a      	ldr	r3, [pc, #104]	; (18fe4 <prvTraceSetObjectState+0x90>)
   18f7c:	0018      	movs	r0, r3
   18f7e:	4b1a      	ldr	r3, [pc, #104]	; (18fe8 <prvTraceSetObjectState+0x94>)
   18f80:	4798      	blx	r3
   18f82:	e02b      	b.n	18fdc <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   18f84:	4b19      	ldr	r3, [pc, #100]	; (18fec <prvTraceSetObjectState+0x98>)
   18f86:	681a      	ldr	r2, [r3, #0]
   18f88:	1dfb      	adds	r3, r7, #7
   18f8a:	781b      	ldrb	r3, [r3, #0]
   18f8c:	2164      	movs	r1, #100	; 0x64
   18f8e:	18d3      	adds	r3, r2, r3
   18f90:	185b      	adds	r3, r3, r1
   18f92:	781b      	ldrb	r3, [r3, #0]
   18f94:	1dba      	adds	r2, r7, #6
   18f96:	7812      	ldrb	r2, [r2, #0]
   18f98:	429a      	cmp	r2, r3
   18f9a:	d904      	bls.n	18fa6 <prvTraceSetObjectState+0x52>
   18f9c:	4b14      	ldr	r3, [pc, #80]	; (18ff0 <prvTraceSetObjectState+0x9c>)
   18f9e:	0018      	movs	r0, r3
   18fa0:	4b11      	ldr	r3, [pc, #68]	; (18fe8 <prvTraceSetObjectState+0x94>)
   18fa2:	4798      	blx	r3
   18fa4:	e01a      	b.n	18fdc <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   18fa6:	4b11      	ldr	r3, [pc, #68]	; (18fec <prvTraceSetObjectState+0x98>)
   18fa8:	681c      	ldr	r4, [r3, #0]
   18faa:	1dfb      	adds	r3, r7, #7
   18fac:	781a      	ldrb	r2, [r3, #0]
   18fae:	1dbb      	adds	r3, r7, #6
   18fb0:	781b      	ldrb	r3, [r3, #0]
   18fb2:	0011      	movs	r1, r2
   18fb4:	0018      	movs	r0, r3
   18fb6:	4b0f      	ldr	r3, [pc, #60]	; (18ff4 <prvTraceSetObjectState+0xa0>)
   18fb8:	4798      	blx	r3
   18fba:	0003      	movs	r3, r0
   18fbc:	0018      	movs	r0, r3
   18fbe:	4b0b      	ldr	r3, [pc, #44]	; (18fec <prvTraceSetObjectState+0x98>)
   18fc0:	681a      	ldr	r2, [r3, #0]
   18fc2:	1dfb      	adds	r3, r7, #7
   18fc4:	781b      	ldrb	r3, [r3, #0]
   18fc6:	2170      	movs	r1, #112	; 0x70
   18fc8:	18d3      	adds	r3, r2, r3
   18fca:	185b      	adds	r3, r3, r1
   18fcc:	781b      	ldrb	r3, [r3, #0]
   18fce:	18c3      	adds	r3, r0, r3
   18fd0:	229c      	movs	r2, #156	; 0x9c
   18fd2:	18e3      	adds	r3, r4, r3
   18fd4:	189b      	adds	r3, r3, r2
   18fd6:	1d7a      	adds	r2, r7, #5
   18fd8:	7812      	ldrb	r2, [r2, #0]
   18fda:	701a      	strb	r2, [r3, #0]
}
   18fdc:	46bd      	mov	sp, r7
   18fde:	b003      	add	sp, #12
   18fe0:	bd90      	pop	{r4, r7, pc}
   18fe2:	46c0      	nop			; (mov r8, r8)
   18fe4:	000373fc 	.word	0x000373fc
   18fe8:	0001979d 	.word	0x0001979d
   18fec:	200009e0 	.word	0x200009e0
   18ff0:	00037440 	.word	0x00037440
   18ff4:	000193a9 	.word	0x000193a9

00018ff8 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   18ff8:	b590      	push	{r4, r7, lr}
   18ffa:	b083      	sub	sp, #12
   18ffc:	af00      	add	r7, sp, #0
   18ffe:	0002      	movs	r2, r0
   19000:	1dfb      	adds	r3, r7, #7
   19002:	701a      	strb	r2, [r3, #0]
   19004:	1dbb      	adds	r3, r7, #6
   19006:	1c0a      	adds	r2, r1, #0
   19008:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1900a:	1dfb      	adds	r3, r7, #7
   1900c:	781b      	ldrb	r3, [r3, #0]
   1900e:	2b08      	cmp	r3, #8
   19010:	d905      	bls.n	1901e <prvTraceGetObjectState+0x26>
   19012:	4b1a      	ldr	r3, [pc, #104]	; (1907c <prvTraceGetObjectState+0x84>)
   19014:	0018      	movs	r0, r3
   19016:	4b1a      	ldr	r3, [pc, #104]	; (19080 <prvTraceGetObjectState+0x88>)
   19018:	4798      	blx	r3
   1901a:	2300      	movs	r3, #0
   1901c:	e02a      	b.n	19074 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1901e:	4b19      	ldr	r3, [pc, #100]	; (19084 <prvTraceGetObjectState+0x8c>)
   19020:	681a      	ldr	r2, [r3, #0]
   19022:	1dfb      	adds	r3, r7, #7
   19024:	781b      	ldrb	r3, [r3, #0]
   19026:	2164      	movs	r1, #100	; 0x64
   19028:	18d3      	adds	r3, r2, r3
   1902a:	185b      	adds	r3, r3, r1
   1902c:	781b      	ldrb	r3, [r3, #0]
   1902e:	1dba      	adds	r2, r7, #6
   19030:	7812      	ldrb	r2, [r2, #0]
   19032:	429a      	cmp	r2, r3
   19034:	d905      	bls.n	19042 <prvTraceGetObjectState+0x4a>
   19036:	4b14      	ldr	r3, [pc, #80]	; (19088 <prvTraceGetObjectState+0x90>)
   19038:	0018      	movs	r0, r3
   1903a:	4b11      	ldr	r3, [pc, #68]	; (19080 <prvTraceGetObjectState+0x88>)
   1903c:	4798      	blx	r3
   1903e:	2300      	movs	r3, #0
   19040:	e018      	b.n	19074 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   19042:	4b10      	ldr	r3, [pc, #64]	; (19084 <prvTraceGetObjectState+0x8c>)
   19044:	681c      	ldr	r4, [r3, #0]
   19046:	1dfb      	adds	r3, r7, #7
   19048:	781a      	ldrb	r2, [r3, #0]
   1904a:	1dbb      	adds	r3, r7, #6
   1904c:	781b      	ldrb	r3, [r3, #0]
   1904e:	0011      	movs	r1, r2
   19050:	0018      	movs	r0, r3
   19052:	4b0e      	ldr	r3, [pc, #56]	; (1908c <prvTraceGetObjectState+0x94>)
   19054:	4798      	blx	r3
   19056:	0003      	movs	r3, r0
   19058:	0018      	movs	r0, r3
   1905a:	4b0a      	ldr	r3, [pc, #40]	; (19084 <prvTraceGetObjectState+0x8c>)
   1905c:	681a      	ldr	r2, [r3, #0]
   1905e:	1dfb      	adds	r3, r7, #7
   19060:	781b      	ldrb	r3, [r3, #0]
   19062:	2170      	movs	r1, #112	; 0x70
   19064:	18d3      	adds	r3, r2, r3
   19066:	185b      	adds	r3, r3, r1
   19068:	781b      	ldrb	r3, [r3, #0]
   1906a:	18c3      	adds	r3, r0, r3
   1906c:	229c      	movs	r2, #156	; 0x9c
   1906e:	18e3      	adds	r3, r4, r3
   19070:	189b      	adds	r3, r3, r2
   19072:	781b      	ldrb	r3, [r3, #0]
}
   19074:	0018      	movs	r0, r3
   19076:	46bd      	mov	sp, r7
   19078:	b003      	add	sp, #12
   1907a:	bd90      	pop	{r4, r7, pc}
   1907c:	0003747c 	.word	0x0003747c
   19080:	0001979d 	.word	0x0001979d
   19084:	200009e0 	.word	0x200009e0
   19088:	000374c0 	.word	0x000374c0
   1908c:	000193a9 	.word	0x000193a9

00019090 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19090:	b590      	push	{r4, r7, lr}
   19092:	b083      	sub	sp, #12
   19094:	af00      	add	r7, sp, #0
   19096:	0002      	movs	r2, r0
   19098:	1dfb      	adds	r3, r7, #7
   1909a:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1909c:	4b11      	ldr	r3, [pc, #68]	; (190e4 <prvTraceSetTaskInstanceFinished+0x54>)
   1909e:	681b      	ldr	r3, [r3, #0]
   190a0:	2267      	movs	r2, #103	; 0x67
   190a2:	5c9b      	ldrb	r3, [r3, r2]
   190a4:	1dfa      	adds	r2, r7, #7
   190a6:	7812      	ldrb	r2, [r2, #0]
   190a8:	429a      	cmp	r2, r3
   190aa:	d904      	bls.n	190b6 <prvTraceSetTaskInstanceFinished+0x26>
   190ac:	4b0e      	ldr	r3, [pc, #56]	; (190e8 <prvTraceSetTaskInstanceFinished+0x58>)
   190ae:	0018      	movs	r0, r3
   190b0:	4b0e      	ldr	r3, [pc, #56]	; (190ec <prvTraceSetTaskInstanceFinished+0x5c>)
   190b2:	4798      	blx	r3
   190b4:	e013      	b.n	190de <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   190b6:	4b0b      	ldr	r3, [pc, #44]	; (190e4 <prvTraceSetTaskInstanceFinished+0x54>)
   190b8:	681c      	ldr	r4, [r3, #0]
   190ba:	1dfb      	adds	r3, r7, #7
   190bc:	781b      	ldrb	r3, [r3, #0]
   190be:	2103      	movs	r1, #3
   190c0:	0018      	movs	r0, r3
   190c2:	4b0b      	ldr	r3, [pc, #44]	; (190f0 <prvTraceSetTaskInstanceFinished+0x60>)
   190c4:	4798      	blx	r3
   190c6:	0003      	movs	r3, r0
   190c8:	0019      	movs	r1, r3
   190ca:	4b06      	ldr	r3, [pc, #24]	; (190e4 <prvTraceSetTaskInstanceFinished+0x54>)
   190cc:	681b      	ldr	r3, [r3, #0]
   190ce:	2273      	movs	r2, #115	; 0x73
   190d0:	5c9b      	ldrb	r3, [r3, r2]
   190d2:	18cb      	adds	r3, r1, r3
   190d4:	229c      	movs	r2, #156	; 0x9c
   190d6:	18e3      	adds	r3, r4, r3
   190d8:	189b      	adds	r3, r3, r2
   190da:	2200      	movs	r2, #0
   190dc:	701a      	strb	r2, [r3, #0]
#endif
}
   190de:	46bd      	mov	sp, r7
   190e0:	b003      	add	sp, #12
   190e2:	bd90      	pop	{r4, r7, pc}
   190e4:	200009e0 	.word	0x200009e0
   190e8:	000374fc 	.word	0x000374fc
   190ec:	0001979d 	.word	0x0001979d
   190f0:	000193a9 	.word	0x000193a9

000190f4 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   190f4:	b580      	push	{r7, lr}
   190f6:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   190f8:	4b75      	ldr	r3, [pc, #468]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   190fa:	681b      	ldr	r3, [r3, #0]
   190fc:	2b00      	cmp	r3, #0
   190fe:	d103      	bne.n	19108 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19100:	4b73      	ldr	r3, [pc, #460]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19102:	4a74      	ldr	r2, [pc, #464]	; (192d4 <prvTraceInitTraceData+0x1e0>)
   19104:	601a      	str	r2, [r3, #0]
   19106:	e006      	b.n	19116 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   19108:	4b71      	ldr	r3, [pc, #452]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1910a:	681b      	ldr	r3, [r3, #0]
   1910c:	781b      	ldrb	r3, [r3, #0]
   1910e:	b2db      	uxtb	r3, r3
   19110:	2b01      	cmp	r3, #1
   19112:	d100      	bne.n	19116 <prvTraceInitTraceData+0x22>
   19114:	e0d8      	b.n	192c8 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   19116:	4b70      	ldr	r3, [pc, #448]	; (192d8 <prvTraceInitTraceData+0x1e4>)
   19118:	681a      	ldr	r2, [r3, #0]
   1911a:	4b70      	ldr	r3, [pc, #448]	; (192dc <prvTraceInitTraceData+0x1e8>)
   1911c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1911e:	4b6c      	ldr	r3, [pc, #432]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19120:	6818      	ldr	r0, [r3, #0]
   19122:	23bd      	movs	r3, #189	; 0xbd
   19124:	011b      	lsls	r3, r3, #4
   19126:	001a      	movs	r2, r3
   19128:	2100      	movs	r1, #0
   1912a:	4b6d      	ldr	r3, [pc, #436]	; (192e0 <prvTraceInitTraceData+0x1ec>)
   1912c:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1912e:	4b68      	ldr	r3, [pc, #416]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19130:	681b      	ldr	r3, [r3, #0]
   19132:	4a6c      	ldr	r2, [pc, #432]	; (192e4 <prvTraceInitTraceData+0x1f0>)
   19134:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   19136:	4b66      	ldr	r3, [pc, #408]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19138:	681b      	ldr	r3, [r3, #0]
   1913a:	2205      	movs	r2, #5
   1913c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1913e:	4b64      	ldr	r3, [pc, #400]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19140:	681b      	ldr	r3, [r3, #0]
   19142:	2200      	movs	r2, #0
   19144:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   19146:	4b62      	ldr	r3, [pc, #392]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19148:	681b      	ldr	r3, [r3, #0]
   1914a:	22bd      	movs	r2, #189	; 0xbd
   1914c:	0112      	lsls	r2, r2, #4
   1914e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   19150:	4b5f      	ldr	r3, [pc, #380]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19152:	681b      	ldr	r3, [r3, #0]
   19154:	2296      	movs	r2, #150	; 0x96
   19156:	0052      	lsls	r2, r2, #1
   19158:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1915a:	4b5d      	ldr	r3, [pc, #372]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1915c:	681b      	ldr	r3, [r3, #0]
   1915e:	4a62      	ldr	r2, [pc, #392]	; (192e8 <prvTraceInitTraceData+0x1f4>)
   19160:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   19162:	4b5b      	ldr	r3, [pc, #364]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19164:	681b      	ldr	r3, [r3, #0]
   19166:	2200      	movs	r2, #0
   19168:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1916a:	4b59      	ldr	r3, [pc, #356]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1916c:	681b      	ldr	r3, [r3, #0]
   1916e:	2200      	movs	r2, #0
   19170:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   19172:	4b5e      	ldr	r3, [pc, #376]	; (192ec <prvTraceInitTraceData+0x1f8>)
   19174:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   19176:	4b56      	ldr	r3, [pc, #344]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19178:	681b      	ldr	r3, [r3, #0]
   1917a:	4a5d      	ldr	r2, [pc, #372]	; (192f0 <prvTraceInitTraceData+0x1fc>)
   1917c:	495d      	ldr	r1, [pc, #372]	; (192f4 <prvTraceInitTraceData+0x200>)
   1917e:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19180:	4b53      	ldr	r3, [pc, #332]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19182:	681a      	ldr	r2, [r3, #0]
   19184:	23ac      	movs	r3, #172	; 0xac
   19186:	00db      	lsls	r3, r3, #3
   19188:	21c8      	movs	r1, #200	; 0xc8
   1918a:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1918c:	4b50      	ldr	r3, [pc, #320]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1918e:	681b      	ldr	r3, [r3, #0]
   19190:	4a59      	ldr	r2, [pc, #356]	; (192f8 <prvTraceInitTraceData+0x204>)
   19192:	2101      	movs	r1, #1
   19194:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   19196:	4b4e      	ldr	r3, [pc, #312]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19198:	681a      	ldr	r2, [r3, #0]
   1919a:	23d7      	movs	r3, #215	; 0xd7
   1919c:	00db      	lsls	r3, r3, #3
   1919e:	4957      	ldr	r1, [pc, #348]	; (192fc <prvTraceInitTraceData+0x208>)
   191a0:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   191a2:	4b4b      	ldr	r3, [pc, #300]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   191a4:	681b      	ldr	r3, [r3, #0]
   191a6:	4a56      	ldr	r2, [pc, #344]	; (19300 <prvTraceInitTraceData+0x20c>)
   191a8:	4694      	mov	ip, r2
   191aa:	4463      	add	r3, ip
   191ac:	4955      	ldr	r1, [pc, #340]	; (19304 <prvTraceInitTraceData+0x210>)
   191ae:	2250      	movs	r2, #80	; 0x50
   191b0:	0018      	movs	r0, r3
   191b2:	4b55      	ldr	r3, [pc, #340]	; (19308 <prvTraceInitTraceData+0x214>)
   191b4:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   191b6:	4b46      	ldr	r3, [pc, #280]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   191b8:	681b      	ldr	r3, [r3, #0]
   191ba:	4a54      	ldr	r2, [pc, #336]	; (1930c <prvTraceInitTraceData+0x218>)
   191bc:	4954      	ldr	r1, [pc, #336]	; (19310 <prvTraceInitTraceData+0x21c>)
   191be:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   191c0:	4b43      	ldr	r3, [pc, #268]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   191c2:	681b      	ldr	r3, [r3, #0]
   191c4:	4a53      	ldr	r2, [pc, #332]	; (19314 <prvTraceInitTraceData+0x220>)
   191c6:	210a      	movs	r1, #10
   191c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   191ca:	4b41      	ldr	r3, [pc, #260]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   191cc:	681b      	ldr	r3, [r3, #0]
   191ce:	4a52      	ldr	r2, [pc, #328]	; (19318 <prvTraceInitTraceData+0x224>)
   191d0:	210b      	movs	r1, #11
   191d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   191d4:	4b3e      	ldr	r3, [pc, #248]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   191d6:	681b      	ldr	r3, [r3, #0]
   191d8:	4a50      	ldr	r2, [pc, #320]	; (1931c <prvTraceInitTraceData+0x228>)
   191da:	210c      	movs	r1, #12
   191dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   191de:	4b3c      	ldr	r3, [pc, #240]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   191e0:	681b      	ldr	r3, [r3, #0]
   191e2:	4a4f      	ldr	r2, [pc, #316]	; (19320 <prvTraceInitTraceData+0x22c>)
   191e4:	210d      	movs	r1, #13
   191e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   191e8:	4b39      	ldr	r3, [pc, #228]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   191ea:	681b      	ldr	r3, [r3, #0]
   191ec:	4a4d      	ldr	r2, [pc, #308]	; (19324 <prvTraceInitTraceData+0x230>)
   191ee:	2171      	movs	r1, #113	; 0x71
   191f0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   191f2:	4b37      	ldr	r3, [pc, #220]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   191f4:	681b      	ldr	r3, [r3, #0]
   191f6:	4a4c      	ldr	r2, [pc, #304]	; (19328 <prvTraceInitTraceData+0x234>)
   191f8:	2172      	movs	r1, #114	; 0x72
   191fa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   191fc:	4b34      	ldr	r3, [pc, #208]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   191fe:	681b      	ldr	r3, [r3, #0]
   19200:	4a4a      	ldr	r2, [pc, #296]	; (1932c <prvTraceInitTraceData+0x238>)
   19202:	2173      	movs	r1, #115	; 0x73
   19204:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   19206:	4b32      	ldr	r3, [pc, #200]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19208:	681b      	ldr	r3, [r3, #0]
   1920a:	4a49      	ldr	r2, [pc, #292]	; (19330 <prvTraceInitTraceData+0x23c>)
   1920c:	2174      	movs	r1, #116	; 0x74
   1920e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   19210:	4b2f      	ldr	r3, [pc, #188]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19212:	681b      	ldr	r3, [r3, #0]
   19214:	4a47      	ldr	r2, [pc, #284]	; (19334 <prvTraceInitTraceData+0x240>)
   19216:	21f1      	movs	r1, #241	; 0xf1
   19218:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1921a:	4b2d      	ldr	r3, [pc, #180]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1921c:	681b      	ldr	r3, [r3, #0]
   1921e:	4a46      	ldr	r2, [pc, #280]	; (19338 <prvTraceInitTraceData+0x244>)
   19220:	21f2      	movs	r1, #242	; 0xf2
   19222:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19224:	4b2a      	ldr	r3, [pc, #168]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19226:	681b      	ldr	r3, [r3, #0]
   19228:	4a44      	ldr	r2, [pc, #272]	; (1933c <prvTraceInitTraceData+0x248>)
   1922a:	21f3      	movs	r1, #243	; 0xf3
   1922c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1922e:	4b28      	ldr	r3, [pc, #160]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19230:	681b      	ldr	r3, [r3, #0]
   19232:	4a43      	ldr	r2, [pc, #268]	; (19340 <prvTraceInitTraceData+0x24c>)
   19234:	21f4      	movs	r1, #244	; 0xf4
   19236:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   19238:	4b42      	ldr	r3, [pc, #264]	; (19344 <prvTraceInitTraceData+0x250>)
   1923a:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1923c:	4b24      	ldr	r3, [pc, #144]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1923e:	681b      	ldr	r3, [r3, #0]
   19240:	22f4      	movs	r2, #244	; 0xf4
   19242:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   19244:	4b22      	ldr	r3, [pc, #136]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19246:	681b      	ldr	r3, [r3, #0]
   19248:	22f3      	movs	r2, #243	; 0xf3
   1924a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1924c:	4b20      	ldr	r3, [pc, #128]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1924e:	681b      	ldr	r3, [r3, #0]
   19250:	22f2      	movs	r2, #242	; 0xf2
   19252:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   19254:	4b1e      	ldr	r3, [pc, #120]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19256:	681b      	ldr	r3, [r3, #0]
   19258:	22f1      	movs	r2, #241	; 0xf1
   1925a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1925c:	4b1c      	ldr	r3, [pc, #112]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1925e:	681b      	ldr	r3, [r3, #0]
   19260:	2274      	movs	r2, #116	; 0x74
   19262:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   19264:	4b1a      	ldr	r3, [pc, #104]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19266:	681b      	ldr	r3, [r3, #0]
   19268:	2273      	movs	r2, #115	; 0x73
   1926a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1926c:	4b18      	ldr	r3, [pc, #96]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1926e:	681b      	ldr	r3, [r3, #0]
   19270:	2272      	movs	r2, #114	; 0x72
   19272:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   19274:	4b16      	ldr	r3, [pc, #88]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19276:	681b      	ldr	r3, [r3, #0]
   19278:	2271      	movs	r2, #113	; 0x71
   1927a:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1927c:	4b14      	ldr	r3, [pc, #80]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1927e:	681b      	ldr	r3, [r3, #0]
   19280:	2204      	movs	r2, #4
   19282:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   19284:	4b12      	ldr	r3, [pc, #72]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19286:	681b      	ldr	r3, [r3, #0]
   19288:	2203      	movs	r2, #3
   1928a:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1928c:	4b10      	ldr	r3, [pc, #64]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   1928e:	681b      	ldr	r3, [r3, #0]
   19290:	2202      	movs	r2, #2
   19292:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   19294:	4b0e      	ldr	r3, [pc, #56]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   19296:	681b      	ldr	r3, [r3, #0]
   19298:	2201      	movs	r2, #1
   1929a:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1929c:	4b2a      	ldr	r3, [pc, #168]	; (19348 <prvTraceInitTraceData+0x254>)
   1929e:	681b      	ldr	r3, [r3, #0]
   192a0:	2b00      	cmp	r3, #0
   192a2:	d012      	beq.n	192ca <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   192a4:	4b0a      	ldr	r3, [pc, #40]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   192a6:	681b      	ldr	r3, [r3, #0]
   192a8:	4a15      	ldr	r2, [pc, #84]	; (19300 <prvTraceInitTraceData+0x20c>)
   192aa:	1898      	adds	r0, r3, r2
   192ac:	4b26      	ldr	r3, [pc, #152]	; (19348 <prvTraceInitTraceData+0x254>)
   192ae:	681b      	ldr	r3, [r3, #0]
   192b0:	2250      	movs	r2, #80	; 0x50
   192b2:	0019      	movs	r1, r3
   192b4:	4b14      	ldr	r3, [pc, #80]	; (19308 <prvTraceInitTraceData+0x214>)
   192b6:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   192b8:	4b05      	ldr	r3, [pc, #20]	; (192d0 <prvTraceInitTraceData+0x1dc>)
   192ba:	681b      	ldr	r3, [r3, #0]
   192bc:	4a23      	ldr	r2, [pc, #140]	; (1934c <prvTraceInitTraceData+0x258>)
   192be:	2101      	movs	r1, #1
   192c0:	5099      	str	r1, [r3, r2]
		vTraceStop();
   192c2:	4b23      	ldr	r3, [pc, #140]	; (19350 <prvTraceInitTraceData+0x25c>)
   192c4:	4798      	blx	r3
   192c6:	e000      	b.n	192ca <prvTraceInitTraceData+0x1d6>
			return;
   192c8:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   192ca:	46bd      	mov	sp, r7
   192cc:	bd80      	pop	{r7, pc}
   192ce:	46c0      	nop			; (mov r8, r8)
   192d0:	200009e0 	.word	0x200009e0
   192d4:	20004578 	.word	0x20004578
   192d8:	e000e018 	.word	0xe000e018
   192dc:	20005148 	.word	0x20005148
   192e0:	0003438b 	.word	0x0003438b
   192e4:	00001aa1 	.word	0x00001aa1
   192e8:	f0f0f0f0 	.word	0xf0f0f0f0
   192ec:	00018259 	.word	0x00018259
   192f0:	0000055c 	.word	0x0000055c
   192f4:	f1f1f1f1 	.word	0xf1f1f1f1
   192f8:	00000564 	.word	0x00000564
   192fc:	f2f2f2f2 	.word	0xf2f2f2f2
   19300:	000006bc 	.word	0x000006bc
   19304:	00037544 	.word	0x00037544
   19308:	00019669 	.word	0x00019669
   1930c:	0000070c 	.word	0x0000070c
   19310:	f3f3f3f3 	.word	0xf3f3f3f3
   19314:	00000bc4 	.word	0x00000bc4
   19318:	00000bc5 	.word	0x00000bc5
   1931c:	00000bc6 	.word	0x00000bc6
   19320:	00000bc7 	.word	0x00000bc7
   19324:	00000bc8 	.word	0x00000bc8
   19328:	00000bc9 	.word	0x00000bc9
   1932c:	00000bca 	.word	0x00000bca
   19330:	00000bcb 	.word	0x00000bcb
   19334:	00000bcc 	.word	0x00000bcc
   19338:	00000bcd 	.word	0x00000bcd
   1933c:	00000bce 	.word	0x00000bce
   19340:	00000bcf 	.word	0x00000bcf
   19344:	000183f9 	.word	0x000183f9
   19348:	20000940 	.word	0x20000940
   1934c:	000006b4 	.word	0x000006b4
   19350:	00018661 	.word	0x00018661

00019354 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   19354:	b580      	push	{r7, lr}
   19356:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   19358:	4b10      	ldr	r3, [pc, #64]	; (1939c <prvTraceNextFreeEventBufferSlot+0x48>)
   1935a:	681b      	ldr	r3, [r3, #0]
   1935c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1935e:	2b00      	cmp	r3, #0
   19360:	d101      	bne.n	19366 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   19362:	2300      	movs	r3, #0
   19364:	e017      	b.n	19396 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19366:	4b0d      	ldr	r3, [pc, #52]	; (1939c <prvTraceNextFreeEventBufferSlot+0x48>)
   19368:	681b      	ldr	r3, [r3, #0]
   1936a:	69da      	ldr	r2, [r3, #28]
   1936c:	232c      	movs	r3, #44	; 0x2c
   1936e:	33ff      	adds	r3, #255	; 0xff
   19370:	429a      	cmp	r2, r3
   19372:	d905      	bls.n	19380 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   19374:	4b0a      	ldr	r3, [pc, #40]	; (193a0 <prvTraceNextFreeEventBufferSlot+0x4c>)
   19376:	0018      	movs	r0, r3
   19378:	4b0a      	ldr	r3, [pc, #40]	; (193a4 <prvTraceNextFreeEventBufferSlot+0x50>)
   1937a:	4798      	blx	r3
		return NULL;
   1937c:	2300      	movs	r3, #0
   1937e:	e00a      	b.n	19396 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   19380:	4b06      	ldr	r3, [pc, #24]	; (1939c <prvTraceNextFreeEventBufferSlot+0x48>)
   19382:	681a      	ldr	r2, [r3, #0]
   19384:	4b05      	ldr	r3, [pc, #20]	; (1939c <prvTraceNextFreeEventBufferSlot+0x48>)
   19386:	681b      	ldr	r3, [r3, #0]
   19388:	69db      	ldr	r3, [r3, #28]
   1938a:	009b      	lsls	r3, r3, #2
   1938c:	21e2      	movs	r1, #226	; 0xe2
   1938e:	00c9      	lsls	r1, r1, #3
   19390:	468c      	mov	ip, r1
   19392:	4463      	add	r3, ip
   19394:	18d3      	adds	r3, r2, r3
}
   19396:	0018      	movs	r0, r3
   19398:	46bd      	mov	sp, r7
   1939a:	bd80      	pop	{r7, pc}
   1939c:	200009e0 	.word	0x200009e0
   193a0:	00037558 	.word	0x00037558
   193a4:	0001979d 	.word	0x0001979d

000193a8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   193a8:	b580      	push	{r7, lr}
   193aa:	b082      	sub	sp, #8
   193ac:	af00      	add	r7, sp, #0
   193ae:	0002      	movs	r2, r0
   193b0:	1dfb      	adds	r3, r7, #7
   193b2:	701a      	strb	r2, [r3, #0]
   193b4:	1dbb      	adds	r3, r7, #6
   193b6:	1c0a      	adds	r2, r1, #0
   193b8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   193ba:	1dbb      	adds	r3, r7, #6
   193bc:	781b      	ldrb	r3, [r3, #0]
   193be:	2b08      	cmp	r3, #8
   193c0:	d905      	bls.n	193ce <uiIndexOfObject+0x26>
   193c2:	4b2a      	ldr	r3, [pc, #168]	; (1946c <uiIndexOfObject+0xc4>)
   193c4:	0018      	movs	r0, r3
   193c6:	4b2a      	ldr	r3, [pc, #168]	; (19470 <uiIndexOfObject+0xc8>)
   193c8:	4798      	blx	r3
   193ca:	2300      	movs	r3, #0
   193cc:	e049      	b.n	19462 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   193ce:	1dfb      	adds	r3, r7, #7
   193d0:	781b      	ldrb	r3, [r3, #0]
   193d2:	2b00      	cmp	r3, #0
   193d4:	d00b      	beq.n	193ee <uiIndexOfObject+0x46>
   193d6:	4b27      	ldr	r3, [pc, #156]	; (19474 <uiIndexOfObject+0xcc>)
   193d8:	681a      	ldr	r2, [r3, #0]
   193da:	1dbb      	adds	r3, r7, #6
   193dc:	781b      	ldrb	r3, [r3, #0]
   193de:	2164      	movs	r1, #100	; 0x64
   193e0:	18d3      	adds	r3, r2, r3
   193e2:	185b      	adds	r3, r3, r1
   193e4:	781b      	ldrb	r3, [r3, #0]
   193e6:	1dfa      	adds	r2, r7, #7
   193e8:	7812      	ldrb	r2, [r2, #0]
   193ea:	429a      	cmp	r2, r3
   193ec:	d905      	bls.n	193fa <uiIndexOfObject+0x52>
   193ee:	4b22      	ldr	r3, [pc, #136]	; (19478 <uiIndexOfObject+0xd0>)
   193f0:	0018      	movs	r0, r3
   193f2:	4b1f      	ldr	r3, [pc, #124]	; (19470 <uiIndexOfObject+0xc8>)
   193f4:	4798      	blx	r3
   193f6:	2300      	movs	r3, #0
   193f8:	e033      	b.n	19462 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   193fa:	1dbb      	adds	r3, r7, #6
   193fc:	781b      	ldrb	r3, [r3, #0]
   193fe:	2b08      	cmp	r3, #8
   19400:	d82a      	bhi.n	19458 <uiIndexOfObject+0xb0>
   19402:	1dfb      	adds	r3, r7, #7
   19404:	781b      	ldrb	r3, [r3, #0]
   19406:	2b00      	cmp	r3, #0
   19408:	d026      	beq.n	19458 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1940a:	4b1a      	ldr	r3, [pc, #104]	; (19474 <uiIndexOfObject+0xcc>)
   1940c:	681a      	ldr	r2, [r3, #0]
   1940e:	1dbb      	adds	r3, r7, #6
   19410:	781b      	ldrb	r3, [r3, #0]
   19412:	2164      	movs	r1, #100	; 0x64
   19414:	18d3      	adds	r3, r2, r3
   19416:	185b      	adds	r3, r3, r1
   19418:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1941a:	1dfa      	adds	r2, r7, #7
   1941c:	7812      	ldrb	r2, [r2, #0]
   1941e:	429a      	cmp	r2, r3
   19420:	d81a      	bhi.n	19458 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19422:	4b14      	ldr	r3, [pc, #80]	; (19474 <uiIndexOfObject+0xcc>)
   19424:	681a      	ldr	r2, [r3, #0]
   19426:	1dbb      	adds	r3, r7, #6
   19428:	781b      	ldrb	r3, [r3, #0]
   1942a:	3340      	adds	r3, #64	; 0x40
   1942c:	005b      	lsls	r3, r3, #1
   1942e:	18d3      	adds	r3, r2, r3
   19430:	3308      	adds	r3, #8
   19432:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19434:	4b0f      	ldr	r3, [pc, #60]	; (19474 <uiIndexOfObject+0xcc>)
   19436:	6819      	ldr	r1, [r3, #0]
   19438:	1dbb      	adds	r3, r7, #6
   1943a:	781b      	ldrb	r3, [r3, #0]
   1943c:	207c      	movs	r0, #124	; 0x7c
   1943e:	18cb      	adds	r3, r1, r3
   19440:	181b      	adds	r3, r3, r0
   19442:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19444:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19446:	1df9      	adds	r1, r7, #7
   19448:	7809      	ldrb	r1, [r1, #0]
   1944a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1944c:	b289      	uxth	r1, r1
   1944e:	434b      	muls	r3, r1
   19450:	b29b      	uxth	r3, r3
   19452:	18d3      	adds	r3, r2, r3
   19454:	b29b      	uxth	r3, r3
   19456:	e004      	b.n	19462 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   19458:	4b08      	ldr	r3, [pc, #32]	; (1947c <uiIndexOfObject+0xd4>)
   1945a:	0018      	movs	r0, r3
   1945c:	4b04      	ldr	r3, [pc, #16]	; (19470 <uiIndexOfObject+0xc8>)
   1945e:	4798      	blx	r3
	return 0;
   19460:	2300      	movs	r3, #0
}
   19462:	0018      	movs	r0, r3
   19464:	46bd      	mov	sp, r7
   19466:	b002      	add	sp, #8
   19468:	bd80      	pop	{r7, pc}
   1946a:	46c0      	nop			; (mov r8, r8)
   1946c:	00037580 	.word	0x00037580
   19470:	0001979d 	.word	0x0001979d
   19474:	200009e0 	.word	0x200009e0
   19478:	000375c0 	.word	0x000375c0
   1947c:	00037600 	.word	0x00037600

00019480 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   19480:	b580      	push	{r7, lr}
   19482:	b088      	sub	sp, #32
   19484:	af00      	add	r7, sp, #0
   19486:	0002      	movs	r2, r0
   19488:	1dfb      	adds	r3, r7, #7
   1948a:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1948c:	4b5a      	ldr	r3, [pc, #360]	; (195f8 <prvTraceGetObjectHandle+0x178>)
   1948e:	681b      	ldr	r3, [r3, #0]
   19490:	2b00      	cmp	r3, #0
   19492:	d105      	bne.n	194a0 <prvTraceGetObjectHandle+0x20>
   19494:	4b59      	ldr	r3, [pc, #356]	; (195fc <prvTraceGetObjectHandle+0x17c>)
   19496:	0018      	movs	r0, r3
   19498:	4b59      	ldr	r3, [pc, #356]	; (19600 <prvTraceGetObjectHandle+0x180>)
   1949a:	4798      	blx	r3
   1949c:	2300      	movs	r3, #0
   1949e:	e0a7      	b.n	195f0 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   194a0:	1dfb      	adds	r3, r7, #7
   194a2:	781b      	ldrb	r3, [r3, #0]
   194a4:	2b08      	cmp	r3, #8
   194a6:	d905      	bls.n	194b4 <prvTraceGetObjectHandle+0x34>
   194a8:	4b56      	ldr	r3, [pc, #344]	; (19604 <prvTraceGetObjectHandle+0x184>)
   194aa:	0018      	movs	r0, r3
   194ac:	4b54      	ldr	r3, [pc, #336]	; (19600 <prvTraceGetObjectHandle+0x180>)
   194ae:	4798      	blx	r3
   194b0:	2300      	movs	r3, #0
   194b2:	e09d      	b.n	195f0 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   194b4:	f3ef 8310 	mrs	r3, PRIMASK
   194b8:	60fb      	str	r3, [r7, #12]
  return(result);
   194ba:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   194bc:	61bb      	str	r3, [r7, #24]
   194be:	2301      	movs	r3, #1
   194c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   194c2:	693b      	ldr	r3, [r7, #16]
   194c4:	f383 8810 	msr	PRIMASK, r3
   194c8:	4b4f      	ldr	r3, [pc, #316]	; (19608 <prvTraceGetObjectHandle+0x188>)
   194ca:	681b      	ldr	r3, [r3, #0]
   194cc:	1c5a      	adds	r2, r3, #1
   194ce:	4b4e      	ldr	r3, [pc, #312]	; (19608 <prvTraceGetObjectHandle+0x188>)
   194d0:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   194d2:	1dfb      	adds	r3, r7, #7
   194d4:	781a      	ldrb	r2, [r3, #0]
   194d6:	4b4d      	ldr	r3, [pc, #308]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   194d8:	0052      	lsls	r2, r2, #1
   194da:	5ad3      	ldrh	r3, [r2, r3]
   194dc:	001a      	movs	r2, r3
   194de:	4b4c      	ldr	r3, [pc, #304]	; (19610 <prvTraceGetObjectHandle+0x190>)
   194e0:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   194e2:	4b4b      	ldr	r3, [pc, #300]	; (19610 <prvTraceGetObjectHandle+0x190>)
   194e4:	681b      	ldr	r3, [r3, #0]
   194e6:	4a49      	ldr	r2, [pc, #292]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   194e8:	2148      	movs	r1, #72	; 0x48
   194ea:	18d3      	adds	r3, r2, r3
   194ec:	185b      	adds	r3, r3, r1
   194ee:	781b      	ldrb	r3, [r3, #0]
   194f0:	2b00      	cmp	r3, #0
   194f2:	d117      	bne.n	19524 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   194f4:	4b46      	ldr	r3, [pc, #280]	; (19610 <prvTraceGetObjectHandle+0x190>)
   194f6:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   194f8:	4b45      	ldr	r3, [pc, #276]	; (19610 <prvTraceGetObjectHandle+0x190>)
   194fa:	681b      	ldr	r3, [r3, #0]
   194fc:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   194fe:	1dfb      	adds	r3, r7, #7
   19500:	781b      	ldrb	r3, [r3, #0]
   19502:	4842      	ldr	r0, [pc, #264]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   19504:	3308      	adds	r3, #8
   19506:	005b      	lsls	r3, r3, #1
   19508:	18c3      	adds	r3, r0, r3
   1950a:	3302      	adds	r3, #2
   1950c:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1950e:	b2db      	uxtb	r3, r3
   19510:	1acb      	subs	r3, r1, r3
   19512:	b2db      	uxtb	r3, r3
   19514:	3301      	adds	r3, #1
   19516:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   19518:	4b3c      	ldr	r3, [pc, #240]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   1951a:	2148      	movs	r1, #72	; 0x48
   1951c:	189b      	adds	r3, r3, r2
   1951e:	185b      	adds	r3, r3, r1
   19520:	1c02      	adds	r2, r0, #0
   19522:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   19524:	4b3a      	ldr	r3, [pc, #232]	; (19610 <prvTraceGetObjectHandle+0x190>)
   19526:	681a      	ldr	r2, [r3, #0]
   19528:	231f      	movs	r3, #31
   1952a:	18fb      	adds	r3, r7, r3
   1952c:	4937      	ldr	r1, [pc, #220]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   1952e:	2048      	movs	r0, #72	; 0x48
   19530:	188a      	adds	r2, r1, r2
   19532:	1812      	adds	r2, r2, r0
   19534:	7812      	ldrb	r2, [r2, #0]
   19536:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19538:	1dfb      	adds	r3, r7, #7
   1953a:	781a      	ldrb	r2, [r3, #0]
   1953c:	4b33      	ldr	r3, [pc, #204]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   1953e:	0052      	lsls	r2, r2, #1
   19540:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   19542:	1dfb      	adds	r3, r7, #7
   19544:	781b      	ldrb	r3, [r3, #0]
   19546:	4931      	ldr	r1, [pc, #196]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   19548:	3310      	adds	r3, #16
   1954a:	005b      	lsls	r3, r3, #1
   1954c:	18cb      	adds	r3, r1, r3
   1954e:	3304      	adds	r3, #4
   19550:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19552:	429a      	cmp	r2, r3
   19554:	d90d      	bls.n	19572 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19556:	1dfb      	adds	r3, r7, #7
   19558:	781b      	ldrb	r3, [r3, #0]
   1955a:	0018      	movs	r0, r3
   1955c:	4b2d      	ldr	r3, [pc, #180]	; (19614 <prvTraceGetObjectHandle+0x194>)
   1955e:	4798      	blx	r3
   19560:	0003      	movs	r3, r0
   19562:	0018      	movs	r0, r3
   19564:	4b26      	ldr	r3, [pc, #152]	; (19600 <prvTraceGetObjectHandle+0x180>)
   19566:	4798      	blx	r3
		handle = 0;
   19568:	231f      	movs	r3, #31
   1956a:	18fb      	adds	r3, r7, r3
   1956c:	2200      	movs	r2, #0
   1956e:	701a      	strb	r2, [r3, #0]
   19570:	e031      	b.n	195d6 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   19572:	1dfb      	adds	r3, r7, #7
   19574:	781b      	ldrb	r3, [r3, #0]
   19576:	4a25      	ldr	r2, [pc, #148]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   19578:	0059      	lsls	r1, r3, #1
   1957a:	5a8a      	ldrh	r2, [r1, r2]
   1957c:	3201      	adds	r2, #1
   1957e:	b291      	uxth	r1, r2
   19580:	4a22      	ldr	r2, [pc, #136]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   19582:	005b      	lsls	r3, r3, #1
   19584:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19586:	1dfb      	adds	r3, r7, #7
   19588:	781a      	ldrb	r2, [r3, #0]
   1958a:	4b20      	ldr	r3, [pc, #128]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   1958c:	0052      	lsls	r2, r2, #1
   1958e:	5ad3      	ldrh	r3, [r2, r3]
   19590:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   19592:	1dfb      	adds	r3, r7, #7
   19594:	781b      	ldrb	r3, [r3, #0]
   19596:	4a1d      	ldr	r2, [pc, #116]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   19598:	3308      	adds	r3, #8
   1959a:	005b      	lsls	r3, r3, #1
   1959c:	18d3      	adds	r3, r2, r3
   1959e:	3302      	adds	r3, #2
   195a0:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   195a2:	1acb      	subs	r3, r1, r3
   195a4:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   195a6:	1dfb      	adds	r3, r7, #7
   195a8:	781b      	ldrb	r3, [r3, #0]
   195aa:	4a18      	ldr	r2, [pc, #96]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   195ac:	3318      	adds	r3, #24
   195ae:	005b      	lsls	r3, r3, #1
   195b0:	18d3      	adds	r3, r2, r3
   195b2:	3306      	adds	r3, #6
   195b4:	881b      	ldrh	r3, [r3, #0]
   195b6:	001a      	movs	r2, r3
		if (hndCount >
   195b8:	697b      	ldr	r3, [r7, #20]
   195ba:	429a      	cmp	r2, r3
   195bc:	da0b      	bge.n	195d6 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   195be:	1dfb      	adds	r3, r7, #7
   195c0:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   195c2:	697a      	ldr	r2, [r7, #20]
   195c4:	b2d2      	uxtb	r2, r2
   195c6:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   195c8:	4a10      	ldr	r2, [pc, #64]	; (1960c <prvTraceGetObjectHandle+0x18c>)
   195ca:	3318      	adds	r3, #24
   195cc:	005b      	lsls	r3, r3, #1
   195ce:	18d3      	adds	r3, r2, r3
   195d0:	3306      	adds	r3, #6
   195d2:	1c0a      	adds	r2, r1, #0
   195d4:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   195d6:	4b0c      	ldr	r3, [pc, #48]	; (19608 <prvTraceGetObjectHandle+0x188>)
   195d8:	681b      	ldr	r3, [r3, #0]
   195da:	1e5a      	subs	r2, r3, #1
   195dc:	4b0a      	ldr	r3, [pc, #40]	; (19608 <prvTraceGetObjectHandle+0x188>)
   195de:	601a      	str	r2, [r3, #0]
   195e0:	69bb      	ldr	r3, [r7, #24]
   195e2:	60bb      	str	r3, [r7, #8]
   195e4:	68bb      	ldr	r3, [r7, #8]
   195e6:	f383 8810 	msr	PRIMASK, r3

	return handle;
   195ea:	231f      	movs	r3, #31
   195ec:	18fb      	adds	r3, r7, r3
   195ee:	781b      	ldrb	r3, [r3, #0]
}
   195f0:	0018      	movs	r0, r3
   195f2:	46bd      	mov	sp, r7
   195f4:	b008      	add	sp, #32
   195f6:	bd80      	pop	{r7, pc}
   195f8:	200009e0 	.word	0x200009e0
   195fc:	00036a60 	.word	0x00036a60
   19600:	0001979d 	.word	0x0001979d
   19604:	00037640 	.word	0x00037640
   19608:	20000938 	.word	0x20000938
   1960c:	20000950 	.word	0x20000950
   19610:	200009e4 	.word	0x200009e4
   19614:	000184bd 	.word	0x000184bd

00019618 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   19618:	b590      	push	{r4, r7, lr}
   1961a:	b085      	sub	sp, #20
   1961c:	af00      	add	r7, sp, #0
   1961e:	0002      	movs	r2, r0
   19620:	1dfb      	adds	r3, r7, #7
   19622:	701a      	strb	r2, [r3, #0]
   19624:	1dbb      	adds	r3, r7, #6
   19626:	1c0a      	adds	r2, r1, #0
   19628:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1962a:	230e      	movs	r3, #14
   1962c:	18fc      	adds	r4, r7, r3
   1962e:	1dfb      	adds	r3, r7, #7
   19630:	781a      	ldrb	r2, [r3, #0]
   19632:	1dbb      	adds	r3, r7, #6
   19634:	781b      	ldrb	r3, [r3, #0]
   19636:	0011      	movs	r1, r2
   19638:	0018      	movs	r0, r3
   1963a:	4b09      	ldr	r3, [pc, #36]	; (19660 <prvMarkObjectAsUsed+0x48>)
   1963c:	4798      	blx	r3
   1963e:	0003      	movs	r3, r0
   19640:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   19642:	4b08      	ldr	r3, [pc, #32]	; (19664 <prvMarkObjectAsUsed+0x4c>)
   19644:	681a      	ldr	r2, [r3, #0]
   19646:	230e      	movs	r3, #14
   19648:	18fb      	adds	r3, r7, r3
   1964a:	881b      	ldrh	r3, [r3, #0]
   1964c:	219c      	movs	r1, #156	; 0x9c
   1964e:	18d3      	adds	r3, r2, r3
   19650:	185b      	adds	r3, r3, r1
   19652:	2201      	movs	r2, #1
   19654:	701a      	strb	r2, [r3, #0]
}
   19656:	46c0      	nop			; (mov r8, r8)
   19658:	46bd      	mov	sp, r7
   1965a:	b005      	add	sp, #20
   1965c:	bd90      	pop	{r4, r7, pc}
   1965e:	46c0      	nop			; (mov r8, r8)
   19660:	000193a9 	.word	0x000193a9
   19664:	200009e0 	.word	0x200009e0

00019668 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   19668:	b580      	push	{r7, lr}
   1966a:	b086      	sub	sp, #24
   1966c:	af00      	add	r7, sp, #0
   1966e:	60f8      	str	r0, [r7, #12]
   19670:	60b9      	str	r1, [r7, #8]
   19672:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   19674:	2300      	movs	r3, #0
   19676:	617b      	str	r3, [r7, #20]
   19678:	e010      	b.n	1969c <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1967a:	68fa      	ldr	r2, [r7, #12]
   1967c:	697b      	ldr	r3, [r7, #20]
   1967e:	18d3      	adds	r3, r2, r3
   19680:	68b9      	ldr	r1, [r7, #8]
   19682:	697a      	ldr	r2, [r7, #20]
   19684:	188a      	adds	r2, r1, r2
   19686:	7812      	ldrb	r2, [r2, #0]
   19688:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1968a:	68ba      	ldr	r2, [r7, #8]
   1968c:	697b      	ldr	r3, [r7, #20]
   1968e:	18d3      	adds	r3, r2, r3
   19690:	781b      	ldrb	r3, [r3, #0]
   19692:	2b00      	cmp	r3, #0
   19694:	d007      	beq.n	196a6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   19696:	697b      	ldr	r3, [r7, #20]
   19698:	3301      	adds	r3, #1
   1969a:	617b      	str	r3, [r7, #20]
   1969c:	697a      	ldr	r2, [r7, #20]
   1969e:	687b      	ldr	r3, [r7, #4]
   196a0:	429a      	cmp	r2, r3
   196a2:	d3ea      	bcc.n	1967a <prvStrncpy+0x12>
			break;
	}
}
   196a4:	e000      	b.n	196a8 <prvStrncpy+0x40>
			break;
   196a6:	46c0      	nop			; (mov r8, r8)
}
   196a8:	46c0      	nop			; (mov r8, r8)
   196aa:	46bd      	mov	sp, r7
   196ac:	b006      	add	sp, #24
   196ae:	bd80      	pop	{r7, pc}

000196b0 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   196b0:	b580      	push	{r7, lr}
   196b2:	b082      	sub	sp, #8
   196b4:	af00      	add	r7, sp, #0
   196b6:	603a      	str	r2, [r7, #0]
   196b8:	1dfb      	adds	r3, r7, #7
   196ba:	1c02      	adds	r2, r0, #0
   196bc:	701a      	strb	r2, [r3, #0]
   196be:	1dbb      	adds	r3, r7, #6
   196c0:	1c0a      	adds	r2, r1, #0
   196c2:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   196c4:	683b      	ldr	r3, [r7, #0]
   196c6:	2b00      	cmp	r3, #0
   196c8:	d104      	bne.n	196d4 <prvTraceSetObjectName+0x24>
   196ca:	4b2a      	ldr	r3, [pc, #168]	; (19774 <prvTraceSetObjectName+0xc4>)
   196cc:	0018      	movs	r0, r3
   196ce:	4b2a      	ldr	r3, [pc, #168]	; (19778 <prvTraceSetObjectName+0xc8>)
   196d0:	4798      	blx	r3
   196d2:	e04b      	b.n	1976c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   196d4:	1dfb      	adds	r3, r7, #7
   196d6:	781b      	ldrb	r3, [r3, #0]
   196d8:	2b08      	cmp	r3, #8
   196da:	d904      	bls.n	196e6 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   196dc:	4b27      	ldr	r3, [pc, #156]	; (1977c <prvTraceSetObjectName+0xcc>)
   196de:	0018      	movs	r0, r3
   196e0:	4b25      	ldr	r3, [pc, #148]	; (19778 <prvTraceSetObjectName+0xc8>)
   196e2:	4798      	blx	r3
		return;
   196e4:	e042      	b.n	1976c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   196e6:	1dbb      	adds	r3, r7, #6
   196e8:	781b      	ldrb	r3, [r3, #0]
   196ea:	2b00      	cmp	r3, #0
   196ec:	d104      	bne.n	196f8 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   196ee:	4b24      	ldr	r3, [pc, #144]	; (19780 <prvTraceSetObjectName+0xd0>)
   196f0:	0018      	movs	r0, r3
   196f2:	4b21      	ldr	r3, [pc, #132]	; (19778 <prvTraceSetObjectName+0xc8>)
   196f4:	4798      	blx	r3
		return;
   196f6:	e039      	b.n	1976c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   196f8:	4b22      	ldr	r3, [pc, #136]	; (19784 <prvTraceSetObjectName+0xd4>)
   196fa:	681a      	ldr	r2, [r3, #0]
   196fc:	1dfb      	adds	r3, r7, #7
   196fe:	781b      	ldrb	r3, [r3, #0]
   19700:	2164      	movs	r1, #100	; 0x64
   19702:	18d3      	adds	r3, r2, r3
   19704:	185b      	adds	r3, r3, r1
   19706:	781b      	ldrb	r3, [r3, #0]
   19708:	1dba      	adds	r2, r7, #6
   1970a:	7812      	ldrb	r2, [r2, #0]
   1970c:	429a      	cmp	r2, r3
   1970e:	d909      	bls.n	19724 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19710:	1dfb      	adds	r3, r7, #7
   19712:	781b      	ldrb	r3, [r3, #0]
   19714:	0018      	movs	r0, r3
   19716:	4b1c      	ldr	r3, [pc, #112]	; (19788 <prvTraceSetObjectName+0xd8>)
   19718:	4798      	blx	r3
   1971a:	0003      	movs	r3, r0
   1971c:	0018      	movs	r0, r3
   1971e:	4b16      	ldr	r3, [pc, #88]	; (19778 <prvTraceSetObjectName+0xc8>)
   19720:	4798      	blx	r3
   19722:	e023      	b.n	1976c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   19724:	1dfb      	adds	r3, r7, #7
   19726:	781a      	ldrb	r2, [r3, #0]
   19728:	1dbb      	adds	r3, r7, #6
   1972a:	781b      	ldrb	r3, [r3, #0]
   1972c:	0011      	movs	r1, r2
   1972e:	0018      	movs	r0, r3
   19730:	4b16      	ldr	r3, [pc, #88]	; (1978c <prvTraceSetObjectName+0xdc>)
   19732:	4798      	blx	r3
   19734:	0003      	movs	r3, r0
   19736:	001a      	movs	r2, r3
   19738:	4b15      	ldr	r3, [pc, #84]	; (19790 <prvTraceSetObjectName+0xe0>)
   1973a:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1973c:	4b15      	ldr	r3, [pc, #84]	; (19794 <prvTraceSetObjectName+0xe4>)
   1973e:	681b      	ldr	r3, [r3, #0]
   19740:	2b00      	cmp	r3, #0
   19742:	d113      	bne.n	1976c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19744:	4b0f      	ldr	r3, [pc, #60]	; (19784 <prvTraceSetObjectName+0xd4>)
   19746:	681a      	ldr	r2, [r3, #0]
   19748:	4b11      	ldr	r3, [pc, #68]	; (19790 <prvTraceSetObjectName+0xe0>)
   1974a:	881b      	ldrh	r3, [r3, #0]
   1974c:	3398      	adds	r3, #152	; 0x98
   1974e:	18d3      	adds	r3, r2, r3
   19750:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   19752:	4b0c      	ldr	r3, [pc, #48]	; (19784 <prvTraceSetObjectName+0xd4>)
   19754:	681a      	ldr	r2, [r3, #0]
   19756:	1dfb      	adds	r3, r7, #7
   19758:	781b      	ldrb	r3, [r3, #0]
   1975a:	2170      	movs	r1, #112	; 0x70
   1975c:	18d3      	adds	r3, r2, r3
   1975e:	185b      	adds	r3, r3, r1
   19760:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19762:	001a      	movs	r2, r3
   19764:	683b      	ldr	r3, [r7, #0]
   19766:	0019      	movs	r1, r3
   19768:	4b0b      	ldr	r3, [pc, #44]	; (19798 <prvTraceSetObjectName+0xe8>)
   1976a:	4798      	blx	r3
		}
	}
}
   1976c:	46bd      	mov	sp, r7
   1976e:	b002      	add	sp, #8
   19770:	bd80      	pop	{r7, pc}
   19772:	46c0      	nop			; (mov r8, r8)
   19774:	00037744 	.word	0x00037744
   19778:	0001979d 	.word	0x0001979d
   1977c:	00037778 	.word	0x00037778
   19780:	000377a8 	.word	0x000377a8
   19784:	200009e0 	.word	0x200009e0
   19788:	000184bd 	.word	0x000184bd
   1978c:	000193a9 	.word	0x000193a9
   19790:	200009e8 	.word	0x200009e8
   19794:	20000940 	.word	0x20000940
   19798:	00019669 	.word	0x00019669

0001979c <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1979c:	b580      	push	{r7, lr}
   1979e:	b082      	sub	sp, #8
   197a0:	af00      	add	r7, sp, #0
   197a2:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   197a4:	4b11      	ldr	r3, [pc, #68]	; (197ec <prvTraceError+0x50>)
   197a6:	681b      	ldr	r3, [r3, #0]
   197a8:	2b00      	cmp	r3, #0
   197aa:	d001      	beq.n	197b0 <prvTraceError+0x14>
	{
		vTraceStop();
   197ac:	4b10      	ldr	r3, [pc, #64]	; (197f0 <prvTraceError+0x54>)
   197ae:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   197b0:	4b10      	ldr	r3, [pc, #64]	; (197f4 <prvTraceError+0x58>)
   197b2:	681b      	ldr	r3, [r3, #0]
   197b4:	2b00      	cmp	r3, #0
   197b6:	d115      	bne.n	197e4 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   197b8:	4b0e      	ldr	r3, [pc, #56]	; (197f4 <prvTraceError+0x58>)
   197ba:	687a      	ldr	r2, [r7, #4]
   197bc:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   197be:	4b0b      	ldr	r3, [pc, #44]	; (197ec <prvTraceError+0x50>)
   197c0:	681b      	ldr	r3, [r3, #0]
   197c2:	2b00      	cmp	r3, #0
   197c4:	d00e      	beq.n	197e4 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   197c6:	4b09      	ldr	r3, [pc, #36]	; (197ec <prvTraceError+0x50>)
   197c8:	681b      	ldr	r3, [r3, #0]
   197ca:	4a0b      	ldr	r2, [pc, #44]	; (197f8 <prvTraceError+0x5c>)
   197cc:	1898      	adds	r0, r3, r2
   197ce:	4b09      	ldr	r3, [pc, #36]	; (197f4 <prvTraceError+0x58>)
   197d0:	681b      	ldr	r3, [r3, #0]
   197d2:	2250      	movs	r2, #80	; 0x50
   197d4:	0019      	movs	r1, r3
   197d6:	4b09      	ldr	r3, [pc, #36]	; (197fc <prvTraceError+0x60>)
   197d8:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   197da:	4b04      	ldr	r3, [pc, #16]	; (197ec <prvTraceError+0x50>)
   197dc:	681b      	ldr	r3, [r3, #0]
   197de:	4a08      	ldr	r2, [pc, #32]	; (19800 <prvTraceError+0x64>)
   197e0:	2101      	movs	r1, #1
   197e2:	5099      	str	r1, [r3, r2]
		}
	}
}
   197e4:	46c0      	nop			; (mov r8, r8)
   197e6:	46bd      	mov	sp, r7
   197e8:	b002      	add	sp, #8
   197ea:	bd80      	pop	{r7, pc}
   197ec:	200009e0 	.word	0x200009e0
   197f0:	00018661 	.word	0x00018661
   197f4:	20000940 	.word	0x20000940
   197f8:	000006bc 	.word	0x000006bc
   197fc:	00019669 	.word	0x00019669
   19800:	000006b4 	.word	0x000006b4

00019804 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   19804:	b580      	push	{r7, lr}
   19806:	b086      	sub	sp, #24
   19808:	af00      	add	r7, sp, #0
   1980a:	0002      	movs	r2, r0
   1980c:	1dfb      	adds	r3, r7, #7
   1980e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   19810:	2300      	movs	r3, #0
   19812:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   19814:	2300      	movs	r3, #0
   19816:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   19818:	1dfb      	adds	r3, r7, #7
   1981a:	781b      	ldrb	r3, [r3, #0]
   1981c:	2b00      	cmp	r3, #0
   1981e:	d000      	beq.n	19822 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   19820:	e089      	b.n	19936 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   19822:	4b49      	ldr	r3, [pc, #292]	; (19948 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   19824:	0018      	movs	r0, r3
   19826:	4b49      	ldr	r3, [pc, #292]	; (1994c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   19828:	4798      	blx	r3
   1982a:	e08a      	b.n	19942 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1982c:	4b48      	ldr	r3, [pc, #288]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1982e:	681b      	ldr	r3, [r3, #0]
   19830:	69da      	ldr	r2, [r3, #28]
   19832:	697b      	ldr	r3, [r7, #20]
   19834:	18d3      	adds	r3, r2, r3
   19836:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19838:	4b45      	ldr	r3, [pc, #276]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1983a:	6819      	ldr	r1, [r3, #0]
   1983c:	693b      	ldr	r3, [r7, #16]
   1983e:	009a      	lsls	r2, r3, #2
   19840:	23e2      	movs	r3, #226	; 0xe2
   19842:	00db      	lsls	r3, r3, #3
   19844:	188a      	adds	r2, r1, r2
   19846:	18d3      	adds	r3, r2, r3
   19848:	781b      	ldrb	r3, [r3, #0]
   1984a:	2b98      	cmp	r3, #152	; 0x98
   1984c:	d934      	bls.n	198b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1984e:	4b40      	ldr	r3, [pc, #256]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19850:	6819      	ldr	r1, [r3, #0]
   19852:	693b      	ldr	r3, [r7, #16]
   19854:	009a      	lsls	r2, r3, #2
   19856:	23e2      	movs	r3, #226	; 0xe2
   19858:	00db      	lsls	r3, r3, #3
   1985a:	188a      	adds	r2, r1, r2
   1985c:	18d3      	adds	r3, r2, r3
   1985e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   19860:	2ba7      	cmp	r3, #167	; 0xa7
   19862:	d829      	bhi.n	198b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   19864:	4b3a      	ldr	r3, [pc, #232]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19866:	6819      	ldr	r1, [r3, #0]
   19868:	693b      	ldr	r3, [r7, #16]
   1986a:	009a      	lsls	r2, r3, #2
   1986c:	23e2      	movs	r3, #226	; 0xe2
   1986e:	00db      	lsls	r3, r3, #3
   19870:	188a      	adds	r2, r1, r2
   19872:	18d3      	adds	r3, r2, r3
   19874:	781a      	ldrb	r2, [r3, #0]
   19876:	230f      	movs	r3, #15
   19878:	18fb      	adds	r3, r7, r3
   1987a:	3268      	adds	r2, #104	; 0x68
   1987c:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1987e:	230f      	movs	r3, #15
   19880:	18fb      	adds	r3, r7, r3
   19882:	781a      	ldrb	r2, [r3, #0]
   19884:	693b      	ldr	r3, [r7, #16]
   19886:	18d2      	adds	r2, r2, r3
   19888:	4b31      	ldr	r3, [pc, #196]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1988a:	681b      	ldr	r3, [r3, #0]
   1988c:	699b      	ldr	r3, [r3, #24]
   1988e:	429a      	cmp	r2, r3
   19890:	d24d      	bcs.n	1992e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   19892:	4b2f      	ldr	r3, [pc, #188]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19894:	681a      	ldr	r2, [r3, #0]
   19896:	693b      	ldr	r3, [r7, #16]
   19898:	009b      	lsls	r3, r3, #2
   1989a:	21e2      	movs	r1, #226	; 0xe2
   1989c:	00c9      	lsls	r1, r1, #3
   1989e:	468c      	mov	ip, r1
   198a0:	4463      	add	r3, ip
   198a2:	18d0      	adds	r0, r2, r3
   198a4:	230f      	movs	r3, #15
   198a6:	18fb      	adds	r3, r7, r3
   198a8:	781b      	ldrb	r3, [r3, #0]
   198aa:	3301      	adds	r3, #1
   198ac:	009b      	lsls	r3, r3, #2
   198ae:	001a      	movs	r2, r3
   198b0:	2100      	movs	r1, #0
   198b2:	4b28      	ldr	r3, [pc, #160]	; (19954 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   198b4:	4798      	blx	r3
		{
   198b6:	e03a      	b.n	1992e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   198b8:	4b25      	ldr	r3, [pc, #148]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   198ba:	6819      	ldr	r1, [r3, #0]
   198bc:	693b      	ldr	r3, [r7, #16]
   198be:	009a      	lsls	r2, r3, #2
   198c0:	23e2      	movs	r3, #226	; 0xe2
   198c2:	00db      	lsls	r3, r3, #3
   198c4:	188a      	adds	r2, r1, r2
   198c6:	18d3      	adds	r3, r2, r3
   198c8:	781b      	ldrb	r3, [r3, #0]
   198ca:	2b01      	cmp	r3, #1
   198cc:	d130      	bne.n	19930 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   198ce:	693b      	ldr	r3, [r7, #16]
   198d0:	1c5a      	adds	r2, r3, #1
   198d2:	4b1f      	ldr	r3, [pc, #124]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   198d4:	681b      	ldr	r3, [r3, #0]
   198d6:	699b      	ldr	r3, [r3, #24]
   198d8:	429a      	cmp	r2, r3
   198da:	d20e      	bcs.n	198fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   198dc:	4b1c      	ldr	r3, [pc, #112]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   198de:	681a      	ldr	r2, [r3, #0]
   198e0:	693b      	ldr	r3, [r7, #16]
   198e2:	009b      	lsls	r3, r3, #2
   198e4:	21e2      	movs	r1, #226	; 0xe2
   198e6:	00c9      	lsls	r1, r1, #3
   198e8:	468c      	mov	ip, r1
   198ea:	4463      	add	r3, ip
   198ec:	18d3      	adds	r3, r2, r3
   198ee:	2208      	movs	r2, #8
   198f0:	2100      	movs	r1, #0
   198f2:	0018      	movs	r0, r3
   198f4:	4b17      	ldr	r3, [pc, #92]	; (19954 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   198f6:	4798      	blx	r3
   198f8:	e01a      	b.n	19930 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   198fa:	4b15      	ldr	r3, [pc, #84]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   198fc:	681b      	ldr	r3, [r3, #0]
   198fe:	22e2      	movs	r2, #226	; 0xe2
   19900:	00d2      	lsls	r2, r2, #3
   19902:	4694      	mov	ip, r2
   19904:	4463      	add	r3, ip
   19906:	2204      	movs	r2, #4
   19908:	2100      	movs	r1, #0
   1990a:	0018      	movs	r0, r3
   1990c:	4b11      	ldr	r3, [pc, #68]	; (19954 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1990e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   19910:	4b0f      	ldr	r3, [pc, #60]	; (19950 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   19912:	681a      	ldr	r2, [r3, #0]
   19914:	693b      	ldr	r3, [r7, #16]
   19916:	009b      	lsls	r3, r3, #2
   19918:	21e2      	movs	r1, #226	; 0xe2
   1991a:	00c9      	lsls	r1, r1, #3
   1991c:	468c      	mov	ip, r1
   1991e:	4463      	add	r3, ip
   19920:	18d3      	adds	r3, r2, r3
   19922:	2204      	movs	r2, #4
   19924:	2100      	movs	r1, #0
   19926:	0018      	movs	r0, r3
   19928:	4b0a      	ldr	r3, [pc, #40]	; (19954 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1992a:	4798      	blx	r3
   1992c:	e000      	b.n	19930 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1992e:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   19930:	697b      	ldr	r3, [r7, #20]
   19932:	3301      	adds	r3, #1
   19934:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   19936:	1dfb      	adds	r3, r7, #7
   19938:	781a      	ldrb	r2, [r3, #0]
   1993a:	697b      	ldr	r3, [r7, #20]
   1993c:	429a      	cmp	r2, r3
   1993e:	d900      	bls.n	19942 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   19940:	e774      	b.n	1982c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   19942:	46bd      	mov	sp, r7
   19944:	b006      	add	sp, #24
   19946:	bd80      	pop	{r7, pc}
   19948:	00037808 	.word	0x00037808
   1994c:	0001979d 	.word	0x0001979d
   19950:	200009e0 	.word	0x200009e0
   19954:	0003438b 	.word	0x0003438b

00019958 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   19958:	b580      	push	{r7, lr}
   1995a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1995c:	4b12      	ldr	r3, [pc, #72]	; (199a8 <prvTraceUpdateCounters+0x50>)
   1995e:	681b      	ldr	r3, [r3, #0]
   19960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19962:	2b00      	cmp	r3, #0
   19964:	d01c      	beq.n	199a0 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   19966:	4b10      	ldr	r3, [pc, #64]	; (199a8 <prvTraceUpdateCounters+0x50>)
   19968:	681b      	ldr	r3, [r3, #0]
   1996a:	695a      	ldr	r2, [r3, #20]
   1996c:	3201      	adds	r2, #1
   1996e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   19970:	4b0d      	ldr	r3, [pc, #52]	; (199a8 <prvTraceUpdateCounters+0x50>)
   19972:	681b      	ldr	r3, [r3, #0]
   19974:	69da      	ldr	r2, [r3, #28]
   19976:	3201      	adds	r2, #1
   19978:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1997a:	4b0b      	ldr	r3, [pc, #44]	; (199a8 <prvTraceUpdateCounters+0x50>)
   1997c:	681b      	ldr	r3, [r3, #0]
   1997e:	69da      	ldr	r2, [r3, #28]
   19980:	232c      	movs	r3, #44	; 0x2c
   19982:	33ff      	adds	r3, #255	; 0xff
   19984:	429a      	cmp	r2, r3
   19986:	d907      	bls.n	19998 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   19988:	4b07      	ldr	r3, [pc, #28]	; (199a8 <prvTraceUpdateCounters+0x50>)
   1998a:	681b      	ldr	r3, [r3, #0]
   1998c:	2201      	movs	r2, #1
   1998e:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   19990:	4b05      	ldr	r3, [pc, #20]	; (199a8 <prvTraceUpdateCounters+0x50>)
   19992:	681b      	ldr	r3, [r3, #0]
   19994:	2200      	movs	r2, #0
   19996:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   19998:	2001      	movs	r0, #1
   1999a:	4b04      	ldr	r3, [pc, #16]	; (199ac <prvTraceUpdateCounters+0x54>)
   1999c:	4798      	blx	r3
   1999e:	e000      	b.n	199a2 <prvTraceUpdateCounters+0x4a>
		return;
   199a0:	46c0      	nop			; (mov r8, r8)
#endif
}
   199a2:	46bd      	mov	sp, r7
   199a4:	bd80      	pop	{r7, pc}
   199a6:	46c0      	nop			; (mov r8, r8)
   199a8:	200009e0 	.word	0x200009e0
   199ac:	00019805 	.word	0x00019805

000199b0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   199b0:	b5b0      	push	{r4, r5, r7, lr}
   199b2:	b086      	sub	sp, #24
   199b4:	af00      	add	r7, sp, #0
   199b6:	0002      	movs	r2, r0
   199b8:	1dbb      	adds	r3, r7, #6
   199ba:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   199bc:	2300      	movs	r3, #0
   199be:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   199c0:	2300      	movs	r3, #0
   199c2:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   199c4:	2300      	movs	r3, #0
   199c6:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   199c8:	1dbb      	adds	r3, r7, #6
   199ca:	881b      	ldrh	r3, [r3, #0]
   199cc:	2bff      	cmp	r3, #255	; 0xff
   199ce:	d00a      	beq.n	199e6 <prvTraceGetDTS+0x36>
   199d0:	1dbb      	adds	r3, r7, #6
   199d2:	881b      	ldrh	r3, [r3, #0]
   199d4:	4a60      	ldr	r2, [pc, #384]	; (19b58 <prvTraceGetDTS+0x1a8>)
   199d6:	4293      	cmp	r3, r2
   199d8:	d005      	beq.n	199e6 <prvTraceGetDTS+0x36>
   199da:	4b60      	ldr	r3, [pc, #384]	; (19b5c <prvTraceGetDTS+0x1ac>)
   199dc:	0018      	movs	r0, r3
   199de:	4b60      	ldr	r3, [pc, #384]	; (19b60 <prvTraceGetDTS+0x1b0>)
   199e0:	4798      	blx	r3
   199e2:	2300      	movs	r3, #0
   199e4:	e0b3      	b.n	19b4e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   199e6:	4b5f      	ldr	r3, [pc, #380]	; (19b64 <prvTraceGetDTS+0x1b4>)
   199e8:	681b      	ldr	r3, [r3, #0]
   199ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   199ec:	2b00      	cmp	r3, #0
   199ee:	d118      	bne.n	19a22 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   199f0:	4b5d      	ldr	r3, [pc, #372]	; (19b68 <prvTraceGetDTS+0x1b8>)
   199f2:	681b      	ldr	r3, [r3, #0]
   199f4:	2b00      	cmp	r3, #0
   199f6:	d006      	beq.n	19a06 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   199f8:	4b5a      	ldr	r3, [pc, #360]	; (19b64 <prvTraceGetDTS+0x1b4>)
   199fa:	681b      	ldr	r3, [r3, #0]
   199fc:	4a5a      	ldr	r2, [pc, #360]	; (19b68 <prvTraceGetDTS+0x1b8>)
   199fe:	6812      	ldr	r2, [r2, #0]
   19a00:	0892      	lsrs	r2, r2, #2
   19a02:	625a      	str	r2, [r3, #36]	; 0x24
   19a04:	e00d      	b.n	19a22 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   19a06:	4b59      	ldr	r3, [pc, #356]	; (19b6c <prvTraceGetDTS+0x1bc>)
   19a08:	681a      	ldr	r2, [r3, #0]
   19a0a:	4b59      	ldr	r3, [pc, #356]	; (19b70 <prvTraceGetDTS+0x1c0>)
   19a0c:	681b      	ldr	r3, [r3, #0]
   19a0e:	429a      	cmp	r2, r3
   19a10:	d007      	beq.n	19a22 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   19a12:	4b54      	ldr	r3, [pc, #336]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a14:	681c      	ldr	r4, [r3, #0]
   19a16:	2000      	movs	r0, #0
   19a18:	4b56      	ldr	r3, [pc, #344]	; (19b74 <prvTraceGetDTS+0x1c4>)
   19a1a:	4798      	blx	r3
   19a1c:	0003      	movs	r3, r0
   19a1e:	089b      	lsrs	r3, r3, #2
   19a20:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   19a22:	230c      	movs	r3, #12
   19a24:	18fb      	adds	r3, r7, r3
   19a26:	0018      	movs	r0, r3
   19a28:	4b53      	ldr	r3, [pc, #332]	; (19b78 <prvTraceGetDTS+0x1c8>)
   19a2a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   19a2c:	68fa      	ldr	r2, [r7, #12]
   19a2e:	4b53      	ldr	r3, [pc, #332]	; (19b7c <prvTraceGetDTS+0x1cc>)
   19a30:	681b      	ldr	r3, [r3, #0]
   19a32:	1ad3      	subs	r3, r2, r3
   19a34:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   19a36:	68fa      	ldr	r2, [r7, #12]
   19a38:	4b50      	ldr	r3, [pc, #320]	; (19b7c <prvTraceGetDTS+0x1cc>)
   19a3a:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   19a3c:	4b49      	ldr	r3, [pc, #292]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a3e:	681b      	ldr	r3, [r3, #0]
   19a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19a42:	2b00      	cmp	r3, #0
   19a44:	d044      	beq.n	19ad0 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   19a46:	4b47      	ldr	r3, [pc, #284]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a48:	681b      	ldr	r3, [r3, #0]
   19a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19a4c:	693b      	ldr	r3, [r7, #16]
   19a4e:	429a      	cmp	r2, r3
   19a50:	d21e      	bcs.n	19a90 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   19a52:	4b44      	ldr	r3, [pc, #272]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a54:	681c      	ldr	r4, [r3, #0]
   19a56:	4b43      	ldr	r3, [pc, #268]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a58:	681b      	ldr	r3, [r3, #0]
   19a5a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   19a5c:	4b41      	ldr	r3, [pc, #260]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a5e:	681b      	ldr	r3, [r3, #0]
   19a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19a62:	4b47      	ldr	r3, [pc, #284]	; (19b80 <prvTraceGetDTS+0x1d0>)
   19a64:	0011      	movs	r1, r2
   19a66:	6938      	ldr	r0, [r7, #16]
   19a68:	4798      	blx	r3
   19a6a:	0003      	movs	r3, r0
   19a6c:	18eb      	adds	r3, r5, r3
   19a6e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   19a70:	4b3c      	ldr	r3, [pc, #240]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a72:	681c      	ldr	r4, [r3, #0]
   19a74:	4b3b      	ldr	r3, [pc, #236]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a76:	681b      	ldr	r3, [r3, #0]
   19a78:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   19a7a:	4b3a      	ldr	r3, [pc, #232]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a7c:	681b      	ldr	r3, [r3, #0]
   19a7e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19a80:	693a      	ldr	r2, [r7, #16]
   19a82:	4b40      	ldr	r3, [pc, #256]	; (19b84 <prvTraceGetDTS+0x1d4>)
   19a84:	0010      	movs	r0, r2
   19a86:	4798      	blx	r3
   19a88:	000b      	movs	r3, r1
   19a8a:	18eb      	adds	r3, r5, r3
   19a8c:	62a3      	str	r3, [r4, #40]	; 0x28
   19a8e:	e007      	b.n	19aa0 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   19a90:	4b34      	ldr	r3, [pc, #208]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a92:	681b      	ldr	r3, [r3, #0]
   19a94:	4a33      	ldr	r2, [pc, #204]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19a96:	6812      	ldr	r2, [r2, #0]
   19a98:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19a9a:	693a      	ldr	r2, [r7, #16]
   19a9c:	188a      	adds	r2, r1, r2
   19a9e:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   19aa0:	4b30      	ldr	r3, [pc, #192]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19aa2:	681b      	ldr	r3, [r3, #0]
   19aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   19aa6:	4b2f      	ldr	r3, [pc, #188]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19aa8:	681b      	ldr	r3, [r3, #0]
   19aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19aac:	429a      	cmp	r2, r3
   19aae:	d313      	bcc.n	19ad8 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   19ab0:	4b2c      	ldr	r3, [pc, #176]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19ab2:	681b      	ldr	r3, [r3, #0]
   19ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   19ab6:	3201      	adds	r2, #1
   19ab8:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   19aba:	4b2a      	ldr	r3, [pc, #168]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19abc:	681b      	ldr	r3, [r3, #0]
   19abe:	4a29      	ldr	r2, [pc, #164]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19ac0:	6812      	ldr	r2, [r2, #0]
   19ac2:	6a91      	ldr	r1, [r2, #40]	; 0x28
   19ac4:	4a27      	ldr	r2, [pc, #156]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19ac6:	6812      	ldr	r2, [r2, #0]
   19ac8:	6a52      	ldr	r2, [r2, #36]	; 0x24
   19aca:	1a8a      	subs	r2, r1, r2
   19acc:	629a      	str	r2, [r3, #40]	; 0x28
   19ace:	e003      	b.n	19ad8 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   19ad0:	4b24      	ldr	r3, [pc, #144]	; (19b64 <prvTraceGetDTS+0x1b4>)
   19ad2:	681b      	ldr	r3, [r3, #0]
   19ad4:	68fa      	ldr	r2, [r7, #12]
   19ad6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   19ad8:	1dbb      	adds	r3, r7, #6
   19ada:	881a      	ldrh	r2, [r3, #0]
   19adc:	693b      	ldr	r3, [r7, #16]
   19ade:	429a      	cmp	r2, r3
   19ae0:	d22f      	bcs.n	19b42 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   19ae2:	4b29      	ldr	r3, [pc, #164]	; (19b88 <prvTraceGetDTS+0x1d8>)
   19ae4:	4798      	blx	r3
   19ae6:	0003      	movs	r3, r0
   19ae8:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   19aea:	697b      	ldr	r3, [r7, #20]
   19aec:	2b00      	cmp	r3, #0
   19aee:	d028      	beq.n	19b42 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   19af0:	1dbb      	adds	r3, r7, #6
   19af2:	881b      	ldrh	r3, [r3, #0]
   19af4:	4a18      	ldr	r2, [pc, #96]	; (19b58 <prvTraceGetDTS+0x1a8>)
   19af6:	4293      	cmp	r3, r2
   19af8:	d10b      	bne.n	19b12 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   19afa:	697b      	ldr	r3, [r7, #20]
   19afc:	22a9      	movs	r2, #169	; 0xa9
   19afe:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   19b00:	693b      	ldr	r3, [r7, #16]
   19b02:	0c1b      	lsrs	r3, r3, #16
   19b04:	b29a      	uxth	r2, r3
   19b06:	697b      	ldr	r3, [r7, #20]
   19b08:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   19b0a:	697b      	ldr	r3, [r7, #20]
   19b0c:	2200      	movs	r2, #0
   19b0e:	705a      	strb	r2, [r3, #1]
   19b10:	e015      	b.n	19b3e <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   19b12:	1dbb      	adds	r3, r7, #6
   19b14:	881b      	ldrh	r3, [r3, #0]
   19b16:	2bff      	cmp	r3, #255	; 0xff
   19b18:	d10d      	bne.n	19b36 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   19b1a:	697b      	ldr	r3, [r7, #20]
   19b1c:	22a8      	movs	r2, #168	; 0xa8
   19b1e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   19b20:	693b      	ldr	r3, [r7, #16]
   19b22:	0a1b      	lsrs	r3, r3, #8
   19b24:	b29a      	uxth	r2, r3
   19b26:	697b      	ldr	r3, [r7, #20]
   19b28:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   19b2a:	693b      	ldr	r3, [r7, #16]
   19b2c:	0e1b      	lsrs	r3, r3, #24
   19b2e:	b2da      	uxtb	r2, r3
   19b30:	697b      	ldr	r3, [r7, #20]
   19b32:	705a      	strb	r2, [r3, #1]
   19b34:	e003      	b.n	19b3e <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   19b36:	4b15      	ldr	r3, [pc, #84]	; (19b8c <prvTraceGetDTS+0x1dc>)
   19b38:	0018      	movs	r0, r3
   19b3a:	4b09      	ldr	r3, [pc, #36]	; (19b60 <prvTraceGetDTS+0x1b0>)
   19b3c:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   19b3e:	4b14      	ldr	r3, [pc, #80]	; (19b90 <prvTraceGetDTS+0x1e0>)
   19b40:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   19b42:	693b      	ldr	r3, [r7, #16]
   19b44:	b29b      	uxth	r3, r3
   19b46:	1dba      	adds	r2, r7, #6
   19b48:	8812      	ldrh	r2, [r2, #0]
   19b4a:	4013      	ands	r3, r2
   19b4c:	b29b      	uxth	r3, r3
}
   19b4e:	0018      	movs	r0, r3
   19b50:	46bd      	mov	sp, r7
   19b52:	b006      	add	sp, #24
   19b54:	bdb0      	pop	{r4, r5, r7, pc}
   19b56:	46c0      	nop			; (mov r8, r8)
   19b58:	0000ffff 	.word	0x0000ffff
   19b5c:	00037860 	.word	0x00037860
   19b60:	0001979d 	.word	0x0001979d
   19b64:	200009e0 	.word	0x200009e0
   19b68:	2000093c 	.word	0x2000093c
   19b6c:	e000e018 	.word	0xe000e018
   19b70:	20005148 	.word	0x20005148
   19b74:	00029795 	.word	0x00029795
   19b78:	00019b95 	.word	0x00019b95
   19b7c:	200009ec 	.word	0x200009ec
   19b80:	000323b1 	.word	0x000323b1
   19b84:	000324bd 	.word	0x000324bd
   19b88:	00019355 	.word	0x00019355
   19b8c:	000378a0 	.word	0x000378a0
   19b90:	00019959 	.word	0x00019959

00019b94 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   19b94:	b580      	push	{r7, lr}
   19b96:	b084      	sub	sp, #16
   19b98:	af00      	add	r7, sp, #0
   19b9a:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   19b9c:	2300      	movs	r3, #0
   19b9e:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   19ba0:	2300      	movs	r3, #0
   19ba2:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   19ba4:	4b2d      	ldr	r3, [pc, #180]	; (19c5c <prvTracePortGetTimeStamp+0xc8>)
   19ba6:	681b      	ldr	r3, [r3, #0]
   19ba8:	2b01      	cmp	r3, #1
   19baa:	d107      	bne.n	19bbc <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   19bac:	687b      	ldr	r3, [r7, #4]
   19bae:	2b00      	cmp	r3, #0
   19bb0:	d04f      	beq.n	19c52 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   19bb2:	4b2b      	ldr	r3, [pc, #172]	; (19c60 <prvTracePortGetTimeStamp+0xcc>)
   19bb4:	681a      	ldr	r2, [r3, #0]
   19bb6:	687b      	ldr	r3, [r7, #4]
   19bb8:	601a      	str	r2, [r3, #0]
		return;
   19bba:	e04a      	b.n	19c52 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   19bbc:	4b29      	ldr	r3, [pc, #164]	; (19c64 <prvTracePortGetTimeStamp+0xd0>)
   19bbe:	681a      	ldr	r2, [r3, #0]
   19bc0:	4b29      	ldr	r3, [pc, #164]	; (19c68 <prvTracePortGetTimeStamp+0xd4>)
   19bc2:	681b      	ldr	r3, [r3, #0]
   19bc4:	1ad3      	subs	r3, r2, r3
   19bc6:	3301      	adds	r3, #1
   19bc8:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   19bca:	4b28      	ldr	r3, [pc, #160]	; (19c6c <prvTracePortGetTimeStamp+0xd8>)
   19bcc:	681a      	ldr	r2, [r3, #0]
   19bce:	4b28      	ldr	r3, [pc, #160]	; (19c70 <prvTracePortGetTimeStamp+0xdc>)
   19bd0:	681b      	ldr	r3, [r3, #0]
   19bd2:	1ad3      	subs	r3, r2, r3
   19bd4:	3b01      	subs	r3, #1
   19bd6:	2b00      	cmp	r3, #0
   19bd8:	db03      	blt.n	19be2 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   19bda:	4b24      	ldr	r3, [pc, #144]	; (19c6c <prvTracePortGetTimeStamp+0xd8>)
   19bdc:	681b      	ldr	r3, [r3, #0]
   19bde:	60fb      	str	r3, [r7, #12]
   19be0:	e002      	b.n	19be8 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   19be2:	4b23      	ldr	r3, [pc, #140]	; (19c70 <prvTracePortGetTimeStamp+0xdc>)
   19be4:	681b      	ldr	r3, [r3, #0]
   19be6:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   19be8:	4b20      	ldr	r3, [pc, #128]	; (19c6c <prvTracePortGetTimeStamp+0xd8>)
   19bea:	681b      	ldr	r3, [r3, #0]
   19bec:	68fa      	ldr	r2, [r7, #12]
   19bee:	429a      	cmp	r2, r3
   19bf0:	d107      	bne.n	19c02 <prvTracePortGetTimeStamp+0x6e>
   19bf2:	4b20      	ldr	r3, [pc, #128]	; (19c74 <prvTracePortGetTimeStamp+0xe0>)
   19bf4:	681b      	ldr	r3, [r3, #0]
   19bf6:	68ba      	ldr	r2, [r7, #8]
   19bf8:	429a      	cmp	r2, r3
   19bfa:	d202      	bcs.n	19c02 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   19bfc:	68fb      	ldr	r3, [r7, #12]
   19bfe:	3301      	adds	r3, #1
   19c00:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   19c02:	687b      	ldr	r3, [r7, #4]
   19c04:	2b00      	cmp	r3, #0
   19c06:	d016      	beq.n	19c36 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   19c08:	4b16      	ldr	r3, [pc, #88]	; (19c64 <prvTracePortGetTimeStamp+0xd0>)
   19c0a:	681b      	ldr	r3, [r3, #0]
   19c0c:	3301      	adds	r3, #1
   19c0e:	089b      	lsrs	r3, r3, #2
   19c10:	68fa      	ldr	r2, [r7, #12]
   19c12:	435a      	muls	r2, r3
   19c14:	4b12      	ldr	r3, [pc, #72]	; (19c60 <prvTracePortGetTimeStamp+0xcc>)
   19c16:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   19c18:	4b12      	ldr	r3, [pc, #72]	; (19c64 <prvTracePortGetTimeStamp+0xd0>)
   19c1a:	681b      	ldr	r3, [r3, #0]
   19c1c:	3301      	adds	r3, #1
   19c1e:	2203      	movs	r2, #3
   19c20:	4013      	ands	r3, r2
   19c22:	68fa      	ldr	r2, [r7, #12]
   19c24:	435a      	muls	r2, r3
   19c26:	68bb      	ldr	r3, [r7, #8]
   19c28:	18d3      	adds	r3, r2, r3
   19c2a:	089a      	lsrs	r2, r3, #2
   19c2c:	4b0c      	ldr	r3, [pc, #48]	; (19c60 <prvTracePortGetTimeStamp+0xcc>)
   19c2e:	681b      	ldr	r3, [r3, #0]
   19c30:	18d2      	adds	r2, r2, r3
   19c32:	4b0b      	ldr	r3, [pc, #44]	; (19c60 <prvTracePortGetTimeStamp+0xcc>)
   19c34:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   19c36:	4b0d      	ldr	r3, [pc, #52]	; (19c6c <prvTracePortGetTimeStamp+0xd8>)
   19c38:	68fa      	ldr	r2, [r7, #12]
   19c3a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   19c3c:	687b      	ldr	r3, [r7, #4]
   19c3e:	2b00      	cmp	r3, #0
   19c40:	d003      	beq.n	19c4a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   19c42:	4b07      	ldr	r3, [pc, #28]	; (19c60 <prvTracePortGetTimeStamp+0xcc>)
   19c44:	681a      	ldr	r2, [r3, #0]
   19c46:	687b      	ldr	r3, [r7, #4]
   19c48:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   19c4a:	4b0a      	ldr	r3, [pc, #40]	; (19c74 <prvTracePortGetTimeStamp+0xe0>)
   19c4c:	68ba      	ldr	r2, [r7, #8]
   19c4e:	601a      	str	r2, [r3, #0]
   19c50:	e000      	b.n	19c54 <prvTracePortGetTimeStamp+0xc0>
		return;
   19c52:	46c0      	nop			; (mov r8, r8)
}
   19c54:	46bd      	mov	sp, r7
   19c56:	b004      	add	sp, #16
   19c58:	bd80      	pop	{r7, pc}
   19c5a:	46c0      	nop			; (mov r8, r8)
   19c5c:	2000092c 	.word	0x2000092c
   19c60:	20000930 	.word	0x20000930
   19c64:	e000e014 	.word	0xe000e014
   19c68:	e000e018 	.word	0xe000e018
   19c6c:	200009f0 	.word	0x200009f0
   19c70:	20000928 	.word	0x20000928
   19c74:	200009f4 	.word	0x200009f4

00019c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   19c78:	b580      	push	{r7, lr}
   19c7a:	b082      	sub	sp, #8
   19c7c:	af00      	add	r7, sp, #0
   19c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19c80:	687b      	ldr	r3, [r7, #4]
   19c82:	3308      	adds	r3, #8
   19c84:	001a      	movs	r2, r3
   19c86:	687b      	ldr	r3, [r7, #4]
   19c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   19c8a:	687b      	ldr	r3, [r7, #4]
   19c8c:	2201      	movs	r2, #1
   19c8e:	4252      	negs	r2, r2
   19c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19c92:	687b      	ldr	r3, [r7, #4]
   19c94:	3308      	adds	r3, #8
   19c96:	001a      	movs	r2, r3
   19c98:	687b      	ldr	r3, [r7, #4]
   19c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19c9c:	687b      	ldr	r3, [r7, #4]
   19c9e:	3308      	adds	r3, #8
   19ca0:	001a      	movs	r2, r3
   19ca2:	687b      	ldr	r3, [r7, #4]
   19ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   19ca6:	687b      	ldr	r3, [r7, #4]
   19ca8:	2200      	movs	r2, #0
   19caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   19cac:	46c0      	nop			; (mov r8, r8)
   19cae:	46bd      	mov	sp, r7
   19cb0:	b002      	add	sp, #8
   19cb2:	bd80      	pop	{r7, pc}

00019cb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   19cb4:	b580      	push	{r7, lr}
   19cb6:	b082      	sub	sp, #8
   19cb8:	af00      	add	r7, sp, #0
   19cba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   19cbc:	687b      	ldr	r3, [r7, #4]
   19cbe:	2200      	movs	r2, #0
   19cc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   19cc2:	46c0      	nop			; (mov r8, r8)
   19cc4:	46bd      	mov	sp, r7
   19cc6:	b002      	add	sp, #8
   19cc8:	bd80      	pop	{r7, pc}

00019cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19cca:	b580      	push	{r7, lr}
   19ccc:	b084      	sub	sp, #16
   19cce:	af00      	add	r7, sp, #0
   19cd0:	6078      	str	r0, [r7, #4]
   19cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   19cd4:	687b      	ldr	r3, [r7, #4]
   19cd6:	685b      	ldr	r3, [r3, #4]
   19cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   19cda:	683b      	ldr	r3, [r7, #0]
   19cdc:	68fa      	ldr	r2, [r7, #12]
   19cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   19ce0:	68fb      	ldr	r3, [r7, #12]
   19ce2:	689a      	ldr	r2, [r3, #8]
   19ce4:	683b      	ldr	r3, [r7, #0]
   19ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   19ce8:	68fb      	ldr	r3, [r7, #12]
   19cea:	689b      	ldr	r3, [r3, #8]
   19cec:	683a      	ldr	r2, [r7, #0]
   19cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   19cf0:	68fb      	ldr	r3, [r7, #12]
   19cf2:	683a      	ldr	r2, [r7, #0]
   19cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19cf6:	683b      	ldr	r3, [r7, #0]
   19cf8:	687a      	ldr	r2, [r7, #4]
   19cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19cfc:	687b      	ldr	r3, [r7, #4]
   19cfe:	681b      	ldr	r3, [r3, #0]
   19d00:	1c5a      	adds	r2, r3, #1
   19d02:	687b      	ldr	r3, [r7, #4]
   19d04:	601a      	str	r2, [r3, #0]
}
   19d06:	46c0      	nop			; (mov r8, r8)
   19d08:	46bd      	mov	sp, r7
   19d0a:	b004      	add	sp, #16
   19d0c:	bd80      	pop	{r7, pc}

00019d0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   19d0e:	b580      	push	{r7, lr}
   19d10:	b084      	sub	sp, #16
   19d12:	af00      	add	r7, sp, #0
   19d14:	6078      	str	r0, [r7, #4]
   19d16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   19d18:	683b      	ldr	r3, [r7, #0]
   19d1a:	681b      	ldr	r3, [r3, #0]
   19d1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   19d1e:	68bb      	ldr	r3, [r7, #8]
   19d20:	3301      	adds	r3, #1
   19d22:	d103      	bne.n	19d2c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   19d24:	687b      	ldr	r3, [r7, #4]
   19d26:	691b      	ldr	r3, [r3, #16]
   19d28:	60fb      	str	r3, [r7, #12]
   19d2a:	e00c      	b.n	19d46 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   19d2c:	687b      	ldr	r3, [r7, #4]
   19d2e:	3308      	adds	r3, #8
   19d30:	60fb      	str	r3, [r7, #12]
   19d32:	e002      	b.n	19d3a <vListInsert+0x2c>
   19d34:	68fb      	ldr	r3, [r7, #12]
   19d36:	685b      	ldr	r3, [r3, #4]
   19d38:	60fb      	str	r3, [r7, #12]
   19d3a:	68fb      	ldr	r3, [r7, #12]
   19d3c:	685b      	ldr	r3, [r3, #4]
   19d3e:	681a      	ldr	r2, [r3, #0]
   19d40:	68bb      	ldr	r3, [r7, #8]
   19d42:	429a      	cmp	r2, r3
   19d44:	d9f6      	bls.n	19d34 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   19d46:	68fb      	ldr	r3, [r7, #12]
   19d48:	685a      	ldr	r2, [r3, #4]
   19d4a:	683b      	ldr	r3, [r7, #0]
   19d4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   19d4e:	683b      	ldr	r3, [r7, #0]
   19d50:	685b      	ldr	r3, [r3, #4]
   19d52:	683a      	ldr	r2, [r7, #0]
   19d54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   19d56:	683b      	ldr	r3, [r7, #0]
   19d58:	68fa      	ldr	r2, [r7, #12]
   19d5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   19d5c:	68fb      	ldr	r3, [r7, #12]
   19d5e:	683a      	ldr	r2, [r7, #0]
   19d60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   19d62:	683b      	ldr	r3, [r7, #0]
   19d64:	687a      	ldr	r2, [r7, #4]
   19d66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   19d68:	687b      	ldr	r3, [r7, #4]
   19d6a:	681b      	ldr	r3, [r3, #0]
   19d6c:	1c5a      	adds	r2, r3, #1
   19d6e:	687b      	ldr	r3, [r7, #4]
   19d70:	601a      	str	r2, [r3, #0]
}
   19d72:	46c0      	nop			; (mov r8, r8)
   19d74:	46bd      	mov	sp, r7
   19d76:	b004      	add	sp, #16
   19d78:	bd80      	pop	{r7, pc}

00019d7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   19d7a:	b580      	push	{r7, lr}
   19d7c:	b084      	sub	sp, #16
   19d7e:	af00      	add	r7, sp, #0
   19d80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   19d82:	687b      	ldr	r3, [r7, #4]
   19d84:	691b      	ldr	r3, [r3, #16]
   19d86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   19d88:	687b      	ldr	r3, [r7, #4]
   19d8a:	685b      	ldr	r3, [r3, #4]
   19d8c:	687a      	ldr	r2, [r7, #4]
   19d8e:	6892      	ldr	r2, [r2, #8]
   19d90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   19d92:	687b      	ldr	r3, [r7, #4]
   19d94:	689b      	ldr	r3, [r3, #8]
   19d96:	687a      	ldr	r2, [r7, #4]
   19d98:	6852      	ldr	r2, [r2, #4]
   19d9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   19d9c:	68fb      	ldr	r3, [r7, #12]
   19d9e:	685a      	ldr	r2, [r3, #4]
   19da0:	687b      	ldr	r3, [r7, #4]
   19da2:	429a      	cmp	r2, r3
   19da4:	d103      	bne.n	19dae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   19da6:	687b      	ldr	r3, [r7, #4]
   19da8:	689a      	ldr	r2, [r3, #8]
   19daa:	68fb      	ldr	r3, [r7, #12]
   19dac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   19dae:	687b      	ldr	r3, [r7, #4]
   19db0:	2200      	movs	r2, #0
   19db2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   19db4:	68fb      	ldr	r3, [r7, #12]
   19db6:	681b      	ldr	r3, [r3, #0]
   19db8:	1e5a      	subs	r2, r3, #1
   19dba:	68fb      	ldr	r3, [r7, #12]
   19dbc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   19dbe:	68fb      	ldr	r3, [r7, #12]
   19dc0:	681b      	ldr	r3, [r3, #0]
}
   19dc2:	0018      	movs	r0, r3
   19dc4:	46bd      	mov	sp, r7
   19dc6:	b004      	add	sp, #16
   19dc8:	bd80      	pop	{r7, pc}
	...

00019dcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   19dcc:	b580      	push	{r7, lr}
   19dce:	b084      	sub	sp, #16
   19dd0:	af00      	add	r7, sp, #0
   19dd2:	60f8      	str	r0, [r7, #12]
   19dd4:	60b9      	str	r1, [r7, #8]
   19dd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   19dd8:	68fb      	ldr	r3, [r7, #12]
   19dda:	3b04      	subs	r3, #4
   19ddc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   19dde:	68fb      	ldr	r3, [r7, #12]
   19de0:	2280      	movs	r2, #128	; 0x80
   19de2:	0452      	lsls	r2, r2, #17
   19de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19de6:	68fb      	ldr	r3, [r7, #12]
   19de8:	3b04      	subs	r3, #4
   19dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   19dec:	68ba      	ldr	r2, [r7, #8]
   19dee:	68fb      	ldr	r3, [r7, #12]
   19df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   19df2:	68fb      	ldr	r3, [r7, #12]
   19df4:	3b04      	subs	r3, #4
   19df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   19df8:	4a08      	ldr	r2, [pc, #32]	; (19e1c <pxPortInitialiseStack+0x50>)
   19dfa:	68fb      	ldr	r3, [r7, #12]
   19dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   19dfe:	68fb      	ldr	r3, [r7, #12]
   19e00:	3b14      	subs	r3, #20
   19e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   19e04:	687a      	ldr	r2, [r7, #4]
   19e06:	68fb      	ldr	r3, [r7, #12]
   19e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   19e0a:	68fb      	ldr	r3, [r7, #12]
   19e0c:	3b20      	subs	r3, #32
   19e0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   19e10:	68fb      	ldr	r3, [r7, #12]
}
   19e12:	0018      	movs	r0, r3
   19e14:	46bd      	mov	sp, r7
   19e16:	b004      	add	sp, #16
   19e18:	bd80      	pop	{r7, pc}
   19e1a:	46c0      	nop			; (mov r8, r8)
   19e1c:	00019e21 	.word	0x00019e21

00019e20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   19e20:	b580      	push	{r7, lr}
   19e22:	b082      	sub	sp, #8
   19e24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   19e26:	2300      	movs	r3, #0
   19e28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   19e2a:	4b07      	ldr	r3, [pc, #28]	; (19e48 <prvTaskExitError+0x28>)
   19e2c:	681b      	ldr	r3, [r3, #0]
   19e2e:	3301      	adds	r3, #1
   19e30:	d001      	beq.n	19e36 <prvTaskExitError+0x16>
   19e32:	b672      	cpsid	i
   19e34:	e7fe      	b.n	19e34 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   19e36:	b672      	cpsid	i
	while( ulDummy == 0 )
   19e38:	46c0      	nop			; (mov r8, r8)
   19e3a:	687b      	ldr	r3, [r7, #4]
   19e3c:	2b00      	cmp	r3, #0
   19e3e:	d0fc      	beq.n	19e3a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   19e40:	46c0      	nop			; (mov r8, r8)
   19e42:	46bd      	mov	sp, r7
   19e44:	b002      	add	sp, #8
   19e46:	bd80      	pop	{r7, pc}
   19e48:	200000bc 	.word	0x200000bc

00019e4c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   19e4c:	b580      	push	{r7, lr}
   19e4e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   19e50:	46c0      	nop			; (mov r8, r8)
   19e52:	46bd      	mov	sp, r7
   19e54:	bd80      	pop	{r7, pc}
	...

00019e60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   19e60:	4a0b      	ldr	r2, [pc, #44]	; (19e90 <pxCurrentTCBConst2>)
   19e62:	6813      	ldr	r3, [r2, #0]
   19e64:	6818      	ldr	r0, [r3, #0]
   19e66:	3020      	adds	r0, #32
   19e68:	f380 8809 	msr	PSP, r0
   19e6c:	2002      	movs	r0, #2
   19e6e:	f380 8814 	msr	CONTROL, r0
   19e72:	f3bf 8f6f 	isb	sy
   19e76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   19e78:	46ae      	mov	lr, r5
   19e7a:	bc08      	pop	{r3}
   19e7c:	bc04      	pop	{r2}
   19e7e:	b662      	cpsie	i
   19e80:	4718      	bx	r3
   19e82:	46c0      	nop			; (mov r8, r8)
   19e84:	46c0      	nop			; (mov r8, r8)
   19e86:	46c0      	nop			; (mov r8, r8)
   19e88:	46c0      	nop			; (mov r8, r8)
   19e8a:	46c0      	nop			; (mov r8, r8)
   19e8c:	46c0      	nop			; (mov r8, r8)
   19e8e:	46c0      	nop			; (mov r8, r8)

00019e90 <pxCurrentTCBConst2>:
   19e90:	20003cc8 	.word	0x20003cc8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   19e94:	46c0      	nop			; (mov r8, r8)
   19e96:	46c0      	nop			; (mov r8, r8)

00019e98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   19e98:	b580      	push	{r7, lr}
   19e9a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   19e9c:	4b0e      	ldr	r3, [pc, #56]	; (19ed8 <xPortStartScheduler+0x40>)
   19e9e:	4a0e      	ldr	r2, [pc, #56]	; (19ed8 <xPortStartScheduler+0x40>)
   19ea0:	6812      	ldr	r2, [r2, #0]
   19ea2:	21ff      	movs	r1, #255	; 0xff
   19ea4:	0409      	lsls	r1, r1, #16
   19ea6:	430a      	orrs	r2, r1
   19ea8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   19eaa:	4b0b      	ldr	r3, [pc, #44]	; (19ed8 <xPortStartScheduler+0x40>)
   19eac:	4a0a      	ldr	r2, [pc, #40]	; (19ed8 <xPortStartScheduler+0x40>)
   19eae:	6812      	ldr	r2, [r2, #0]
   19eb0:	21ff      	movs	r1, #255	; 0xff
   19eb2:	0609      	lsls	r1, r1, #24
   19eb4:	430a      	orrs	r2, r1
   19eb6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   19eb8:	4b08      	ldr	r3, [pc, #32]	; (19edc <xPortStartScheduler+0x44>)
   19eba:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   19ebc:	4b08      	ldr	r3, [pc, #32]	; (19ee0 <xPortStartScheduler+0x48>)
   19ebe:	2200      	movs	r2, #0
   19ec0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   19ec2:	4b08      	ldr	r3, [pc, #32]	; (19ee4 <xPortStartScheduler+0x4c>)
   19ec4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   19ec6:	4b08      	ldr	r3, [pc, #32]	; (19ee8 <xPortStartScheduler+0x50>)
   19ec8:	4798      	blx	r3
	prvTaskExitError();
   19eca:	4b08      	ldr	r3, [pc, #32]	; (19eec <xPortStartScheduler+0x54>)
   19ecc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   19ece:	2300      	movs	r3, #0
}
   19ed0:	0018      	movs	r0, r3
   19ed2:	46bd      	mov	sp, r7
   19ed4:	bd80      	pop	{r7, pc}
   19ed6:	46c0      	nop			; (mov r8, r8)
   19ed8:	e000ed20 	.word	0xe000ed20
   19edc:	00019ff9 	.word	0x00019ff9
   19ee0:	200000bc 	.word	0x200000bc
   19ee4:	00019e61 	.word	0x00019e61
   19ee8:	0001c555 	.word	0x0001c555
   19eec:	00019e21 	.word	0x00019e21

00019ef0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   19ef0:	b580      	push	{r7, lr}
   19ef2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   19ef4:	4b03      	ldr	r3, [pc, #12]	; (19f04 <vPortYield+0x14>)
   19ef6:	2280      	movs	r2, #128	; 0x80
   19ef8:	0552      	lsls	r2, r2, #21
   19efa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   19efc:	46c0      	nop			; (mov r8, r8)
   19efe:	46bd      	mov	sp, r7
   19f00:	bd80      	pop	{r7, pc}
   19f02:	46c0      	nop			; (mov r8, r8)
   19f04:	e000ed04 	.word	0xe000ed04

00019f08 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   19f08:	b580      	push	{r7, lr}
   19f0a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   19f0c:	b672      	cpsid	i
    uxCriticalNesting++;
   19f0e:	4b06      	ldr	r3, [pc, #24]	; (19f28 <vPortEnterCritical+0x20>)
   19f10:	681b      	ldr	r3, [r3, #0]
   19f12:	1c5a      	adds	r2, r3, #1
   19f14:	4b04      	ldr	r3, [pc, #16]	; (19f28 <vPortEnterCritical+0x20>)
   19f16:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   19f18:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   19f1c:	f3bf 8f6f 	isb	sy
}
   19f20:	46c0      	nop			; (mov r8, r8)
   19f22:	46bd      	mov	sp, r7
   19f24:	bd80      	pop	{r7, pc}
   19f26:	46c0      	nop			; (mov r8, r8)
   19f28:	200000bc 	.word	0x200000bc

00019f2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   19f2c:	b580      	push	{r7, lr}
   19f2e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   19f30:	4b09      	ldr	r3, [pc, #36]	; (19f58 <vPortExitCritical+0x2c>)
   19f32:	681b      	ldr	r3, [r3, #0]
   19f34:	2b00      	cmp	r3, #0
   19f36:	d101      	bne.n	19f3c <vPortExitCritical+0x10>
   19f38:	b672      	cpsid	i
   19f3a:	e7fe      	b.n	19f3a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   19f3c:	4b06      	ldr	r3, [pc, #24]	; (19f58 <vPortExitCritical+0x2c>)
   19f3e:	681b      	ldr	r3, [r3, #0]
   19f40:	1e5a      	subs	r2, r3, #1
   19f42:	4b05      	ldr	r3, [pc, #20]	; (19f58 <vPortExitCritical+0x2c>)
   19f44:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   19f46:	4b04      	ldr	r3, [pc, #16]	; (19f58 <vPortExitCritical+0x2c>)
   19f48:	681b      	ldr	r3, [r3, #0]
   19f4a:	2b00      	cmp	r3, #0
   19f4c:	d100      	bne.n	19f50 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   19f4e:	b662      	cpsie	i
    }
}
   19f50:	46c0      	nop			; (mov r8, r8)
   19f52:	46bd      	mov	sp, r7
   19f54:	bd80      	pop	{r7, pc}
   19f56:	46c0      	nop			; (mov r8, r8)
   19f58:	200000bc 	.word	0x200000bc

00019f5c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   19f5c:	f3ef 8010 	mrs	r0, PRIMASK
   19f60:	b672      	cpsid	i
   19f62:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   19f64:	46c0      	nop			; (mov r8, r8)
   19f66:	0018      	movs	r0, r3

00019f68 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   19f68:	f380 8810 	msr	PRIMASK, r0
   19f6c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   19f6e:	46c0      	nop			; (mov r8, r8)

00019f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   19f70:	f3ef 8009 	mrs	r0, PSP
   19f74:	4b0e      	ldr	r3, [pc, #56]	; (19fb0 <pxCurrentTCBConst>)
   19f76:	681a      	ldr	r2, [r3, #0]
   19f78:	3820      	subs	r0, #32
   19f7a:	6010      	str	r0, [r2, #0]
   19f7c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19f7e:	4644      	mov	r4, r8
   19f80:	464d      	mov	r5, r9
   19f82:	4656      	mov	r6, sl
   19f84:	465f      	mov	r7, fp
   19f86:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   19f88:	b508      	push	{r3, lr}
   19f8a:	b672      	cpsid	i
   19f8c:	f002 fae2 	bl	1c554 <vTaskSwitchContext>
   19f90:	b662      	cpsie	i
   19f92:	bc0c      	pop	{r2, r3}
   19f94:	6811      	ldr	r1, [r2, #0]
   19f96:	6808      	ldr	r0, [r1, #0]
   19f98:	3010      	adds	r0, #16
   19f9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19f9c:	46a0      	mov	r8, r4
   19f9e:	46a9      	mov	r9, r5
   19fa0:	46b2      	mov	sl, r6
   19fa2:	46bb      	mov	fp, r7
   19fa4:	f380 8809 	msr	PSP, r0
   19fa8:	3820      	subs	r0, #32
   19faa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   19fac:	4718      	bx	r3
   19fae:	46c0      	nop			; (mov r8, r8)

00019fb0 <pxCurrentTCBConst>:
   19fb0:	20003cc8 	.word	0x20003cc8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   19fb4:	46c0      	nop			; (mov r8, r8)
   19fb6:	46c0      	nop			; (mov r8, r8)

00019fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   19fb8:	b580      	push	{r7, lr}
   19fba:	b082      	sub	sp, #8
   19fbc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   19fbe:	4b0a      	ldr	r3, [pc, #40]	; (19fe8 <SysTick_Handler+0x30>)
   19fc0:	4798      	blx	r3
   19fc2:	0003      	movs	r3, r0
   19fc4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   19fc6:	4b09      	ldr	r3, [pc, #36]	; (19fec <SysTick_Handler+0x34>)
   19fc8:	4798      	blx	r3
   19fca:	1e03      	subs	r3, r0, #0
   19fcc:	d003      	beq.n	19fd6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   19fce:	4b08      	ldr	r3, [pc, #32]	; (19ff0 <SysTick_Handler+0x38>)
   19fd0:	2280      	movs	r2, #128	; 0x80
   19fd2:	0552      	lsls	r2, r2, #21
   19fd4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   19fd6:	687b      	ldr	r3, [r7, #4]
   19fd8:	0018      	movs	r0, r3
   19fda:	4b06      	ldr	r3, [pc, #24]	; (19ff4 <SysTick_Handler+0x3c>)
   19fdc:	4798      	blx	r3
}
   19fde:	46c0      	nop			; (mov r8, r8)
   19fe0:	46bd      	mov	sp, r7
   19fe2:	b002      	add	sp, #8
   19fe4:	bd80      	pop	{r7, pc}
   19fe6:	46c0      	nop			; (mov r8, r8)
   19fe8:	00019f5d 	.word	0x00019f5d
   19fec:	0001c365 	.word	0x0001c365
   19ff0:	e000ed04 	.word	0xe000ed04
   19ff4:	00019f69 	.word	0x00019f69

00019ff8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   19ff8:	b5b0      	push	{r4, r5, r7, lr}
   19ffa:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   19ffc:	4b0b      	ldr	r3, [pc, #44]	; (1a02c <prvSetupTimerInterrupt+0x34>)
   19ffe:	2200      	movs	r2, #0
   1a000:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1a002:	4b0b      	ldr	r3, [pc, #44]	; (1a030 <prvSetupTimerInterrupt+0x38>)
   1a004:	2200      	movs	r2, #0
   1a006:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1a008:	4c0a      	ldr	r4, [pc, #40]	; (1a034 <prvSetupTimerInterrupt+0x3c>)
   1a00a:	2000      	movs	r0, #0
   1a00c:	4b0a      	ldr	r3, [pc, #40]	; (1a038 <prvSetupTimerInterrupt+0x40>)
   1a00e:	4798      	blx	r3
   1a010:	4b0a      	ldr	r3, [pc, #40]	; (1a03c <prvSetupTimerInterrupt+0x44>)
   1a012:	22fa      	movs	r2, #250	; 0xfa
   1a014:	0091      	lsls	r1, r2, #2
   1a016:	4798      	blx	r3
   1a018:	0003      	movs	r3, r0
   1a01a:	3b01      	subs	r3, #1
   1a01c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1a01e:	4b03      	ldr	r3, [pc, #12]	; (1a02c <prvSetupTimerInterrupt+0x34>)
   1a020:	2207      	movs	r2, #7
   1a022:	601a      	str	r2, [r3, #0]
}
   1a024:	46c0      	nop			; (mov r8, r8)
   1a026:	46bd      	mov	sp, r7
   1a028:	bdb0      	pop	{r4, r5, r7, pc}
   1a02a:	46c0      	nop			; (mov r8, r8)
   1a02c:	e000e010 	.word	0xe000e010
   1a030:	e000e018 	.word	0xe000e018
   1a034:	e000e014 	.word	0xe000e014
   1a038:	00029795 	.word	0x00029795
   1a03c:	000323b1 	.word	0x000323b1

0001a040 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1a040:	b580      	push	{r7, lr}
   1a042:	b084      	sub	sp, #16
   1a044:	af00      	add	r7, sp, #0
   1a046:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1a048:	2300      	movs	r3, #0
   1a04a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1a04c:	687b      	ldr	r3, [r7, #4]
   1a04e:	2207      	movs	r2, #7
   1a050:	4013      	ands	r3, r2
   1a052:	d004      	beq.n	1a05e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1a054:	687b      	ldr	r3, [r7, #4]
   1a056:	2207      	movs	r2, #7
   1a058:	4393      	bics	r3, r2
   1a05a:	3308      	adds	r3, #8
   1a05c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1a05e:	4b21      	ldr	r3, [pc, #132]	; (1a0e4 <pvPortMalloc+0xa4>)
   1a060:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1a062:	4b21      	ldr	r3, [pc, #132]	; (1a0e8 <pvPortMalloc+0xa8>)
   1a064:	681b      	ldr	r3, [r3, #0]
   1a066:	2b00      	cmp	r3, #0
   1a068:	d105      	bne.n	1a076 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1a06a:	4b20      	ldr	r3, [pc, #128]	; (1a0ec <pvPortMalloc+0xac>)
   1a06c:	2207      	movs	r2, #7
   1a06e:	4393      	bics	r3, r2
   1a070:	001a      	movs	r2, r3
   1a072:	4b1d      	ldr	r3, [pc, #116]	; (1a0e8 <pvPortMalloc+0xa8>)
   1a074:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a076:	4b1e      	ldr	r3, [pc, #120]	; (1a0f0 <pvPortMalloc+0xb0>)
   1a078:	681a      	ldr	r2, [r3, #0]
   1a07a:	687b      	ldr	r3, [r7, #4]
   1a07c:	18d3      	adds	r3, r2, r3
   1a07e:	4a1d      	ldr	r2, [pc, #116]	; (1a0f4 <pvPortMalloc+0xb4>)
   1a080:	4293      	cmp	r3, r2
   1a082:	d813      	bhi.n	1a0ac <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1a084:	4b1a      	ldr	r3, [pc, #104]	; (1a0f0 <pvPortMalloc+0xb0>)
   1a086:	681a      	ldr	r2, [r3, #0]
   1a088:	687b      	ldr	r3, [r7, #4]
   1a08a:	18d2      	adds	r2, r2, r3
   1a08c:	4b18      	ldr	r3, [pc, #96]	; (1a0f0 <pvPortMalloc+0xb0>)
   1a08e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a090:	429a      	cmp	r2, r3
   1a092:	d90b      	bls.n	1a0ac <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1a094:	4b14      	ldr	r3, [pc, #80]	; (1a0e8 <pvPortMalloc+0xa8>)
   1a096:	681a      	ldr	r2, [r3, #0]
   1a098:	4b15      	ldr	r3, [pc, #84]	; (1a0f0 <pvPortMalloc+0xb0>)
   1a09a:	681b      	ldr	r3, [r3, #0]
   1a09c:	18d3      	adds	r3, r2, r3
   1a09e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1a0a0:	4b13      	ldr	r3, [pc, #76]	; (1a0f0 <pvPortMalloc+0xb0>)
   1a0a2:	681a      	ldr	r2, [r3, #0]
   1a0a4:	687b      	ldr	r3, [r7, #4]
   1a0a6:	18d2      	adds	r2, r2, r3
   1a0a8:	4b11      	ldr	r3, [pc, #68]	; (1a0f0 <pvPortMalloc+0xb0>)
   1a0aa:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1a0ac:	68fb      	ldr	r3, [r7, #12]
   1a0ae:	2b00      	cmp	r3, #0
   1a0b0:	d006      	beq.n	1a0c0 <pvPortMalloc+0x80>
   1a0b2:	68fb      	ldr	r3, [r7, #12]
   1a0b4:	687a      	ldr	r2, [r7, #4]
   1a0b6:	0019      	movs	r1, r3
   1a0b8:	2094      	movs	r0, #148	; 0x94
   1a0ba:	4b0f      	ldr	r3, [pc, #60]	; (1a0f8 <pvPortMalloc+0xb8>)
   1a0bc:	4798      	blx	r3
   1a0be:	e005      	b.n	1a0cc <pvPortMalloc+0x8c>
   1a0c0:	68fb      	ldr	r3, [r7, #12]
   1a0c2:	687a      	ldr	r2, [r7, #4]
   1a0c4:	0019      	movs	r1, r3
   1a0c6:	20e8      	movs	r0, #232	; 0xe8
   1a0c8:	4b0b      	ldr	r3, [pc, #44]	; (1a0f8 <pvPortMalloc+0xb8>)
   1a0ca:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1a0cc:	4b0b      	ldr	r3, [pc, #44]	; (1a0fc <pvPortMalloc+0xbc>)
   1a0ce:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1a0d0:	68fb      	ldr	r3, [r7, #12]
   1a0d2:	2b00      	cmp	r3, #0
   1a0d4:	d101      	bne.n	1a0da <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1a0d6:	4b0a      	ldr	r3, [pc, #40]	; (1a100 <pvPortMalloc+0xc0>)
   1a0d8:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1a0da:	68fb      	ldr	r3, [r7, #12]
}
   1a0dc:	0018      	movs	r0, r3
   1a0de:	46bd      	mov	sp, r7
   1a0e0:	b004      	add	sp, #16
   1a0e2:	bd80      	pop	{r7, pc}
   1a0e4:	0001c1c1 	.word	0x0001c1c1
   1a0e8:	20003cc4 	.word	0x20003cc4
   1a0ec:	20000a00 	.word	0x20000a00
   1a0f0:	20003cc0 	.word	0x20003cc0
   1a0f4:	000032bf 	.word	0x000032bf
   1a0f8:	000187a9 	.word	0x000187a9
   1a0fc:	0001c1d9 	.word	0x0001c1d9
   1a100:	00032381 	.word	0x00032381

0001a104 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1a104:	b580      	push	{r7, lr}
   1a106:	b082      	sub	sp, #8
   1a108:	af00      	add	r7, sp, #0
   1a10a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1a10c:	687b      	ldr	r3, [r7, #4]
   1a10e:	2b00      	cmp	r3, #0
   1a110:	d001      	beq.n	1a116 <vPortFree+0x12>
   1a112:	b672      	cpsid	i
   1a114:	e7fe      	b.n	1a114 <vPortFree+0x10>
}
   1a116:	46c0      	nop			; (mov r8, r8)
   1a118:	46bd      	mov	sp, r7
   1a11a:	b002      	add	sp, #8
   1a11c:	bd80      	pop	{r7, pc}
	...

0001a120 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1a120:	b580      	push	{r7, lr}
   1a122:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1a124:	4b03      	ldr	r3, [pc, #12]	; (1a134 <xPortGetFreeHeapSize+0x14>)
   1a126:	681b      	ldr	r3, [r3, #0]
   1a128:	22cb      	movs	r2, #203	; 0xcb
   1a12a:	0192      	lsls	r2, r2, #6
   1a12c:	1ad3      	subs	r3, r2, r3
}
   1a12e:	0018      	movs	r0, r3
   1a130:	46bd      	mov	sp, r7
   1a132:	bd80      	pop	{r7, pc}
   1a134:	20003cc0 	.word	0x20003cc0

0001a138 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1a138:	b580      	push	{r7, lr}
   1a13a:	b084      	sub	sp, #16
   1a13c:	af00      	add	r7, sp, #0
   1a13e:	6078      	str	r0, [r7, #4]
   1a140:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a142:	687b      	ldr	r3, [r7, #4]
   1a144:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1a146:	68fb      	ldr	r3, [r7, #12]
   1a148:	2b00      	cmp	r3, #0
   1a14a:	d101      	bne.n	1a150 <xQueueGenericReset+0x18>
   1a14c:	b672      	cpsid	i
   1a14e:	e7fe      	b.n	1a14e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1a150:	4b23      	ldr	r3, [pc, #140]	; (1a1e0 <xQueueGenericReset+0xa8>)
   1a152:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1a154:	68fb      	ldr	r3, [r7, #12]
   1a156:	681a      	ldr	r2, [r3, #0]
   1a158:	68fb      	ldr	r3, [r7, #12]
   1a15a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1a15c:	68fb      	ldr	r3, [r7, #12]
   1a15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a160:	434b      	muls	r3, r1
   1a162:	18d2      	adds	r2, r2, r3
   1a164:	68fb      	ldr	r3, [r7, #12]
   1a166:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a168:	68fb      	ldr	r3, [r7, #12]
   1a16a:	2200      	movs	r2, #0
   1a16c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1a16e:	68fb      	ldr	r3, [r7, #12]
   1a170:	681a      	ldr	r2, [r3, #0]
   1a172:	68fb      	ldr	r3, [r7, #12]
   1a174:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1a176:	68fb      	ldr	r3, [r7, #12]
   1a178:	681a      	ldr	r2, [r3, #0]
   1a17a:	68fb      	ldr	r3, [r7, #12]
   1a17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a17e:	1e59      	subs	r1, r3, #1
   1a180:	68fb      	ldr	r3, [r7, #12]
   1a182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a184:	434b      	muls	r3, r1
   1a186:	18d2      	adds	r2, r2, r3
   1a188:	68fb      	ldr	r3, [r7, #12]
   1a18a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1a18c:	68fb      	ldr	r3, [r7, #12]
   1a18e:	2244      	movs	r2, #68	; 0x44
   1a190:	21ff      	movs	r1, #255	; 0xff
   1a192:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1a194:	68fb      	ldr	r3, [r7, #12]
   1a196:	2245      	movs	r2, #69	; 0x45
   1a198:	21ff      	movs	r1, #255	; 0xff
   1a19a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1a19c:	683b      	ldr	r3, [r7, #0]
   1a19e:	2b00      	cmp	r3, #0
   1a1a0:	d10d      	bne.n	1a1be <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a1a2:	68fb      	ldr	r3, [r7, #12]
   1a1a4:	691b      	ldr	r3, [r3, #16]
   1a1a6:	2b00      	cmp	r3, #0
   1a1a8:	d013      	beq.n	1a1d2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a1aa:	68fb      	ldr	r3, [r7, #12]
   1a1ac:	3310      	adds	r3, #16
   1a1ae:	0018      	movs	r0, r3
   1a1b0:	4b0c      	ldr	r3, [pc, #48]	; (1a1e4 <xQueueGenericReset+0xac>)
   1a1b2:	4798      	blx	r3
   1a1b4:	1e03      	subs	r3, r0, #0
   1a1b6:	d00c      	beq.n	1a1d2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1a1b8:	4b0b      	ldr	r3, [pc, #44]	; (1a1e8 <xQueueGenericReset+0xb0>)
   1a1ba:	4798      	blx	r3
   1a1bc:	e009      	b.n	1a1d2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1a1be:	68fb      	ldr	r3, [r7, #12]
   1a1c0:	3310      	adds	r3, #16
   1a1c2:	0018      	movs	r0, r3
   1a1c4:	4b09      	ldr	r3, [pc, #36]	; (1a1ec <xQueueGenericReset+0xb4>)
   1a1c6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1a1c8:	68fb      	ldr	r3, [r7, #12]
   1a1ca:	3324      	adds	r3, #36	; 0x24
   1a1cc:	0018      	movs	r0, r3
   1a1ce:	4b07      	ldr	r3, [pc, #28]	; (1a1ec <xQueueGenericReset+0xb4>)
   1a1d0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1a1d2:	4b07      	ldr	r3, [pc, #28]	; (1a1f0 <xQueueGenericReset+0xb8>)
   1a1d4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1a1d6:	2301      	movs	r3, #1
}
   1a1d8:	0018      	movs	r0, r3
   1a1da:	46bd      	mov	sp, r7
   1a1dc:	b004      	add	sp, #16
   1a1de:	bd80      	pop	{r7, pc}
   1a1e0:	00019f09 	.word	0x00019f09
   1a1e4:	0001c799 	.word	0x0001c799
   1a1e8:	00019ef1 	.word	0x00019ef1
   1a1ec:	00019c79 	.word	0x00019c79
   1a1f0:	00019f2d 	.word	0x00019f2d

0001a1f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1a1f4:	b590      	push	{r4, r7, lr}
   1a1f6:	b08b      	sub	sp, #44	; 0x2c
   1a1f8:	af02      	add	r7, sp, #8
   1a1fa:	60f8      	str	r0, [r7, #12]
   1a1fc:	60b9      	str	r1, [r7, #8]
   1a1fe:	1dfb      	adds	r3, r7, #7
   1a200:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1a202:	68fb      	ldr	r3, [r7, #12]
   1a204:	2b00      	cmp	r3, #0
   1a206:	d101      	bne.n	1a20c <xQueueGenericCreate+0x18>
   1a208:	b672      	cpsid	i
   1a20a:	e7fe      	b.n	1a20a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1a20c:	68bb      	ldr	r3, [r7, #8]
   1a20e:	2b00      	cmp	r3, #0
   1a210:	d102      	bne.n	1a218 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1a212:	2300      	movs	r3, #0
   1a214:	61fb      	str	r3, [r7, #28]
   1a216:	e003      	b.n	1a220 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a218:	68fb      	ldr	r3, [r7, #12]
   1a21a:	68ba      	ldr	r2, [r7, #8]
   1a21c:	4353      	muls	r3, r2
   1a21e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1a220:	69fb      	ldr	r3, [r7, #28]
   1a222:	3354      	adds	r3, #84	; 0x54
   1a224:	0018      	movs	r0, r3
   1a226:	4b19      	ldr	r3, [pc, #100]	; (1a28c <xQueueGenericCreate+0x98>)
   1a228:	4798      	blx	r3
   1a22a:	0003      	movs	r3, r0
   1a22c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1a22e:	69bb      	ldr	r3, [r7, #24]
   1a230:	2b00      	cmp	r3, #0
   1a232:	d00d      	beq.n	1a250 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1a234:	69bb      	ldr	r3, [r7, #24]
   1a236:	3354      	adds	r3, #84	; 0x54
   1a238:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1a23a:	1dfb      	adds	r3, r7, #7
   1a23c:	781c      	ldrb	r4, [r3, #0]
   1a23e:	697a      	ldr	r2, [r7, #20]
   1a240:	68b9      	ldr	r1, [r7, #8]
   1a242:	68f8      	ldr	r0, [r7, #12]
   1a244:	69bb      	ldr	r3, [r7, #24]
   1a246:	9300      	str	r3, [sp, #0]
   1a248:	0023      	movs	r3, r4
   1a24a:	4c11      	ldr	r4, [pc, #68]	; (1a290 <xQueueGenericCreate+0x9c>)
   1a24c:	47a0      	blx	r4
   1a24e:	e017      	b.n	1a280 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1a250:	4b10      	ldr	r3, [pc, #64]	; (1a294 <xQueueGenericCreate+0xa0>)
   1a252:	4798      	blx	r3
   1a254:	0003      	movs	r3, r0
   1a256:	0018      	movs	r0, r3
   1a258:	4b0f      	ldr	r3, [pc, #60]	; (1a298 <xQueueGenericCreate+0xa4>)
   1a25a:	4798      	blx	r3
   1a25c:	0003      	movs	r3, r0
   1a25e:	001a      	movs	r2, r3
   1a260:	4b0e      	ldr	r3, [pc, #56]	; (1a29c <xQueueGenericCreate+0xa8>)
   1a262:	881b      	ldrh	r3, [r3, #0]
   1a264:	4013      	ands	r3, r2
   1a266:	b29b      	uxth	r3, r3
   1a268:	2b00      	cmp	r3, #0
   1a26a:	d009      	beq.n	1a280 <xQueueGenericCreate+0x8c>
   1a26c:	1dfb      	adds	r3, r7, #7
   1a26e:	781b      	ldrb	r3, [r3, #0]
   1a270:	4a0b      	ldr	r2, [pc, #44]	; (1a2a0 <xQueueGenericCreate+0xac>)
   1a272:	5cd3      	ldrb	r3, [r2, r3]
   1a274:	3340      	adds	r3, #64	; 0x40
   1a276:	b2db      	uxtb	r3, r3
   1a278:	2100      	movs	r1, #0
   1a27a:	0018      	movs	r0, r3
   1a27c:	4b09      	ldr	r3, [pc, #36]	; (1a2a4 <xQueueGenericCreate+0xb0>)
   1a27e:	4798      	blx	r3
		}

		return pxNewQueue;
   1a280:	69bb      	ldr	r3, [r7, #24]
	}
   1a282:	0018      	movs	r0, r3
   1a284:	46bd      	mov	sp, r7
   1a286:	b009      	add	sp, #36	; 0x24
   1a288:	bd90      	pop	{r4, r7, pc}
   1a28a:	46c0      	nop			; (mov r8, r8)
   1a28c:	0001a041 	.word	0x0001a041
   1a290:	0001a2a9 	.word	0x0001a2a9
   1a294:	0001819d 	.word	0x0001819d
   1a298:	00017f01 	.word	0x00017f01
   1a29c:	200000b8 	.word	0x200000b8
   1a2a0:	200000ac 	.word	0x200000ac
   1a2a4:	00018c01 	.word	0x00018c01

0001a2a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1a2a8:	b5b0      	push	{r4, r5, r7, lr}
   1a2aa:	b084      	sub	sp, #16
   1a2ac:	af00      	add	r7, sp, #0
   1a2ae:	60f8      	str	r0, [r7, #12]
   1a2b0:	60b9      	str	r1, [r7, #8]
   1a2b2:	607a      	str	r2, [r7, #4]
   1a2b4:	001a      	movs	r2, r3
   1a2b6:	1cfb      	adds	r3, r7, #3
   1a2b8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1a2ba:	68bb      	ldr	r3, [r7, #8]
   1a2bc:	2b00      	cmp	r3, #0
   1a2be:	d103      	bne.n	1a2c8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1a2c0:	6a3b      	ldr	r3, [r7, #32]
   1a2c2:	6a3a      	ldr	r2, [r7, #32]
   1a2c4:	601a      	str	r2, [r3, #0]
   1a2c6:	e002      	b.n	1a2ce <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1a2c8:	6a3b      	ldr	r3, [r7, #32]
   1a2ca:	687a      	ldr	r2, [r7, #4]
   1a2cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1a2ce:	6a3b      	ldr	r3, [r7, #32]
   1a2d0:	68fa      	ldr	r2, [r7, #12]
   1a2d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1a2d4:	6a3b      	ldr	r3, [r7, #32]
   1a2d6:	68ba      	ldr	r2, [r7, #8]
   1a2d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1a2da:	6a3b      	ldr	r3, [r7, #32]
   1a2dc:	2101      	movs	r1, #1
   1a2de:	0018      	movs	r0, r3
   1a2e0:	4b41      	ldr	r3, [pc, #260]	; (1a3e8 <prvInitialiseNewQueue+0x140>)
   1a2e2:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1a2e4:	6a3b      	ldr	r3, [r7, #32]
   1a2e6:	1cfa      	adds	r2, r7, #3
   1a2e8:	2150      	movs	r1, #80	; 0x50
   1a2ea:	7812      	ldrb	r2, [r2, #0]
   1a2ec:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1a2ee:	6a3b      	ldr	r3, [r7, #32]
   1a2f0:	2200      	movs	r2, #0
   1a2f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1a2f4:	6a3b      	ldr	r3, [r7, #32]
   1a2f6:	0018      	movs	r0, r3
   1a2f8:	4b3c      	ldr	r3, [pc, #240]	; (1a3ec <prvInitialiseNewQueue+0x144>)
   1a2fa:	4798      	blx	r3
   1a2fc:	0003      	movs	r3, r0
   1a2fe:	001a      	movs	r2, r3
   1a300:	4b3b      	ldr	r3, [pc, #236]	; (1a3f0 <prvInitialiseNewQueue+0x148>)
   1a302:	5c9b      	ldrb	r3, [r3, r2]
   1a304:	0018      	movs	r0, r3
   1a306:	4b3b      	ldr	r3, [pc, #236]	; (1a3f4 <prvInitialiseNewQueue+0x14c>)
   1a308:	4798      	blx	r3
   1a30a:	0003      	movs	r3, r0
   1a30c:	b29a      	uxth	r2, r3
   1a30e:	6a3b      	ldr	r3, [r7, #32]
   1a310:	0011      	movs	r1, r2
   1a312:	0018      	movs	r0, r3
   1a314:	4b38      	ldr	r3, [pc, #224]	; (1a3f8 <prvInitialiseNewQueue+0x150>)
   1a316:	4798      	blx	r3
   1a318:	4b38      	ldr	r3, [pc, #224]	; (1a3fc <prvInitialiseNewQueue+0x154>)
   1a31a:	881a      	ldrh	r2, [r3, #0]
   1a31c:	6a3b      	ldr	r3, [r7, #32]
   1a31e:	0011      	movs	r1, r2
   1a320:	0018      	movs	r0, r3
   1a322:	4b37      	ldr	r3, [pc, #220]	; (1a400 <prvInitialiseNewQueue+0x158>)
   1a324:	4798      	blx	r3
   1a326:	6a3b      	ldr	r3, [r7, #32]
   1a328:	0018      	movs	r0, r3
   1a32a:	4b30      	ldr	r3, [pc, #192]	; (1a3ec <prvInitialiseNewQueue+0x144>)
   1a32c:	4798      	blx	r3
   1a32e:	0003      	movs	r3, r0
   1a330:	001a      	movs	r2, r3
   1a332:	4b2f      	ldr	r3, [pc, #188]	; (1a3f0 <prvInitialiseNewQueue+0x148>)
   1a334:	5c9c      	ldrb	r4, [r3, r2]
   1a336:	6a3b      	ldr	r3, [r7, #32]
   1a338:	0018      	movs	r0, r3
   1a33a:	4b32      	ldr	r3, [pc, #200]	; (1a404 <prvInitialiseNewQueue+0x15c>)
   1a33c:	4798      	blx	r3
   1a33e:	0003      	movs	r3, r0
   1a340:	b2db      	uxtb	r3, r3
   1a342:	0019      	movs	r1, r3
   1a344:	0020      	movs	r0, r4
   1a346:	4b30      	ldr	r3, [pc, #192]	; (1a408 <prvInitialiseNewQueue+0x160>)
   1a348:	4798      	blx	r3
   1a34a:	4b30      	ldr	r3, [pc, #192]	; (1a40c <prvInitialiseNewQueue+0x164>)
   1a34c:	4798      	blx	r3
   1a34e:	0003      	movs	r3, r0
   1a350:	0018      	movs	r0, r3
   1a352:	4b2f      	ldr	r3, [pc, #188]	; (1a410 <prvInitialiseNewQueue+0x168>)
   1a354:	4798      	blx	r3
   1a356:	0003      	movs	r3, r0
   1a358:	001a      	movs	r2, r3
   1a35a:	4b2e      	ldr	r3, [pc, #184]	; (1a414 <prvInitialiseNewQueue+0x16c>)
   1a35c:	881b      	ldrh	r3, [r3, #0]
   1a35e:	4013      	ands	r3, r2
   1a360:	b29b      	uxth	r3, r3
   1a362:	2b00      	cmp	r3, #0
   1a364:	d029      	beq.n	1a3ba <prvInitialiseNewQueue+0x112>
   1a366:	6a3b      	ldr	r3, [r7, #32]
   1a368:	0018      	movs	r0, r3
   1a36a:	4b2b      	ldr	r3, [pc, #172]	; (1a418 <prvInitialiseNewQueue+0x170>)
   1a36c:	4798      	blx	r3
   1a36e:	0003      	movs	r3, r0
   1a370:	001a      	movs	r2, r3
   1a372:	4b28      	ldr	r3, [pc, #160]	; (1a414 <prvInitialiseNewQueue+0x16c>)
   1a374:	881b      	ldrh	r3, [r3, #0]
   1a376:	4013      	ands	r3, r2
   1a378:	b29b      	uxth	r3, r3
   1a37a:	2b00      	cmp	r3, #0
   1a37c:	d01d      	beq.n	1a3ba <prvInitialiseNewQueue+0x112>
   1a37e:	6a3b      	ldr	r3, [r7, #32]
   1a380:	0018      	movs	r0, r3
   1a382:	4b1a      	ldr	r3, [pc, #104]	; (1a3ec <prvInitialiseNewQueue+0x144>)
   1a384:	4798      	blx	r3
   1a386:	0003      	movs	r3, r0
   1a388:	001a      	movs	r2, r3
   1a38a:	4b19      	ldr	r3, [pc, #100]	; (1a3f0 <prvInitialiseNewQueue+0x148>)
   1a38c:	5c9b      	ldrb	r3, [r3, r2]
   1a38e:	3318      	adds	r3, #24
   1a390:	b2db      	uxtb	r3, r3
   1a392:	001d      	movs	r5, r3
   1a394:	6a3b      	ldr	r3, [r7, #32]
   1a396:	0018      	movs	r0, r3
   1a398:	4b14      	ldr	r3, [pc, #80]	; (1a3ec <prvInitialiseNewQueue+0x144>)
   1a39a:	4798      	blx	r3
   1a39c:	0003      	movs	r3, r0
   1a39e:	001a      	movs	r2, r3
   1a3a0:	4b13      	ldr	r3, [pc, #76]	; (1a3f0 <prvInitialiseNewQueue+0x148>)
   1a3a2:	5c9c      	ldrb	r4, [r3, r2]
   1a3a4:	6a3b      	ldr	r3, [r7, #32]
   1a3a6:	0018      	movs	r0, r3
   1a3a8:	4b16      	ldr	r3, [pc, #88]	; (1a404 <prvInitialiseNewQueue+0x15c>)
   1a3aa:	4798      	blx	r3
   1a3ac:	0003      	movs	r3, r0
   1a3ae:	b2db      	uxtb	r3, r3
   1a3b0:	001a      	movs	r2, r3
   1a3b2:	0021      	movs	r1, r4
   1a3b4:	0028      	movs	r0, r5
   1a3b6:	4b19      	ldr	r3, [pc, #100]	; (1a41c <prvInitialiseNewQueue+0x174>)
   1a3b8:	4798      	blx	r3
   1a3ba:	6a3b      	ldr	r3, [r7, #32]
   1a3bc:	0018      	movs	r0, r3
   1a3be:	4b0b      	ldr	r3, [pc, #44]	; (1a3ec <prvInitialiseNewQueue+0x144>)
   1a3c0:	4798      	blx	r3
   1a3c2:	0003      	movs	r3, r0
   1a3c4:	001a      	movs	r2, r3
   1a3c6:	4b0a      	ldr	r3, [pc, #40]	; (1a3f0 <prvInitialiseNewQueue+0x148>)
   1a3c8:	5c9c      	ldrb	r4, [r3, r2]
   1a3ca:	6a3b      	ldr	r3, [r7, #32]
   1a3cc:	0018      	movs	r0, r3
   1a3ce:	4b0d      	ldr	r3, [pc, #52]	; (1a404 <prvInitialiseNewQueue+0x15c>)
   1a3d0:	4798      	blx	r3
   1a3d2:	0003      	movs	r3, r0
   1a3d4:	b2db      	uxtb	r3, r3
   1a3d6:	2200      	movs	r2, #0
   1a3d8:	0019      	movs	r1, r3
   1a3da:	0020      	movs	r0, r4
   1a3dc:	4b10      	ldr	r3, [pc, #64]	; (1a420 <prvInitialiseNewQueue+0x178>)
   1a3de:	4798      	blx	r3
}
   1a3e0:	46c0      	nop			; (mov r8, r8)
   1a3e2:	46bd      	mov	sp, r7
   1a3e4:	b004      	add	sp, #16
   1a3e6:	bdb0      	pop	{r4, r5, r7, pc}
   1a3e8:	0001a139 	.word	0x0001a139
   1a3ec:	00017ec1 	.word	0x00017ec1
   1a3f0:	200000ac 	.word	0x200000ac
   1a3f4:	00019481 	.word	0x00019481
   1a3f8:	00017fe5 	.word	0x00017fe5
   1a3fc:	200000ba 	.word	0x200000ba
   1a400:	00018021 	.word	0x00018021
   1a404:	00017fa1 	.word	0x00017fa1
   1a408:	00019619 	.word	0x00019619
   1a40c:	0001819d 	.word	0x0001819d
   1a410:	00017f01 	.word	0x00017f01
   1a414:	200000b8 	.word	0x200000b8
   1a418:	00017fc1 	.word	0x00017fc1
   1a41c:	000188f9 	.word	0x000188f9
   1a420:	00018f55 	.word	0x00018f55

0001a424 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1a424:	b590      	push	{r4, r7, lr}
   1a426:	b083      	sub	sp, #12
   1a428:	af00      	add	r7, sp, #0
   1a42a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1a42c:	687b      	ldr	r3, [r7, #4]
   1a42e:	2b00      	cmp	r3, #0
   1a430:	d00e      	beq.n	1a450 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1a432:	687b      	ldr	r3, [r7, #4]
   1a434:	2200      	movs	r2, #0
   1a436:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1a438:	687b      	ldr	r3, [r7, #4]
   1a43a:	2200      	movs	r2, #0
   1a43c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1a43e:	687b      	ldr	r3, [r7, #4]
   1a440:	2200      	movs	r2, #0
   1a442:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1a444:	6878      	ldr	r0, [r7, #4]
   1a446:	2300      	movs	r3, #0
   1a448:	2200      	movs	r2, #0
   1a44a:	2100      	movs	r1, #0
   1a44c:	4c02      	ldr	r4, [pc, #8]	; (1a458 <prvInitialiseMutex+0x34>)
   1a44e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1a450:	46c0      	nop			; (mov r8, r8)
   1a452:	46bd      	mov	sp, r7
   1a454:	b003      	add	sp, #12
   1a456:	bd90      	pop	{r4, r7, pc}
   1a458:	0001a49d 	.word	0x0001a49d

0001a45c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1a45c:	b580      	push	{r7, lr}
   1a45e:	b086      	sub	sp, #24
   1a460:	af00      	add	r7, sp, #0
   1a462:	0002      	movs	r2, r0
   1a464:	1dfb      	adds	r3, r7, #7
   1a466:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1a468:	2301      	movs	r3, #1
   1a46a:	617b      	str	r3, [r7, #20]
   1a46c:	2300      	movs	r3, #0
   1a46e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1a470:	1dfb      	adds	r3, r7, #7
   1a472:	781a      	ldrb	r2, [r3, #0]
   1a474:	6939      	ldr	r1, [r7, #16]
   1a476:	697b      	ldr	r3, [r7, #20]
   1a478:	0018      	movs	r0, r3
   1a47a:	4b06      	ldr	r3, [pc, #24]	; (1a494 <xQueueCreateMutex+0x38>)
   1a47c:	4798      	blx	r3
   1a47e:	0003      	movs	r3, r0
   1a480:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1a482:	68fb      	ldr	r3, [r7, #12]
   1a484:	0018      	movs	r0, r3
   1a486:	4b04      	ldr	r3, [pc, #16]	; (1a498 <xQueueCreateMutex+0x3c>)
   1a488:	4798      	blx	r3

		return pxNewQueue;
   1a48a:	68fb      	ldr	r3, [r7, #12]
	}
   1a48c:	0018      	movs	r0, r3
   1a48e:	46bd      	mov	sp, r7
   1a490:	b006      	add	sp, #24
   1a492:	bd80      	pop	{r7, pc}
   1a494:	0001a1f5 	.word	0x0001a1f5
   1a498:	0001a425 	.word	0x0001a425

0001a49c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1a49c:	b5b0      	push	{r4, r5, r7, lr}
   1a49e:	b08a      	sub	sp, #40	; 0x28
   1a4a0:	af00      	add	r7, sp, #0
   1a4a2:	60f8      	str	r0, [r7, #12]
   1a4a4:	60b9      	str	r1, [r7, #8]
   1a4a6:	607a      	str	r2, [r7, #4]
   1a4a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1a4aa:	2300      	movs	r3, #0
   1a4ac:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a4ae:	68fb      	ldr	r3, [r7, #12]
   1a4b0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1a4b2:	6a3b      	ldr	r3, [r7, #32]
   1a4b4:	2b00      	cmp	r3, #0
   1a4b6:	d101      	bne.n	1a4bc <xQueueGenericSend+0x20>
   1a4b8:	b672      	cpsid	i
   1a4ba:	e7fe      	b.n	1a4ba <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a4bc:	68bb      	ldr	r3, [r7, #8]
   1a4be:	2b00      	cmp	r3, #0
   1a4c0:	d103      	bne.n	1a4ca <xQueueGenericSend+0x2e>
   1a4c2:	6a3b      	ldr	r3, [r7, #32]
   1a4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a4c6:	2b00      	cmp	r3, #0
   1a4c8:	d101      	bne.n	1a4ce <xQueueGenericSend+0x32>
   1a4ca:	2301      	movs	r3, #1
   1a4cc:	e000      	b.n	1a4d0 <xQueueGenericSend+0x34>
   1a4ce:	2300      	movs	r3, #0
   1a4d0:	2b00      	cmp	r3, #0
   1a4d2:	d101      	bne.n	1a4d8 <xQueueGenericSend+0x3c>
   1a4d4:	b672      	cpsid	i
   1a4d6:	e7fe      	b.n	1a4d6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a4d8:	683b      	ldr	r3, [r7, #0]
   1a4da:	2b02      	cmp	r3, #2
   1a4dc:	d103      	bne.n	1a4e6 <xQueueGenericSend+0x4a>
   1a4de:	6a3b      	ldr	r3, [r7, #32]
   1a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a4e2:	2b01      	cmp	r3, #1
   1a4e4:	d101      	bne.n	1a4ea <xQueueGenericSend+0x4e>
   1a4e6:	2301      	movs	r3, #1
   1a4e8:	e000      	b.n	1a4ec <xQueueGenericSend+0x50>
   1a4ea:	2300      	movs	r3, #0
   1a4ec:	2b00      	cmp	r3, #0
   1a4ee:	d101      	bne.n	1a4f4 <xQueueGenericSend+0x58>
   1a4f0:	b672      	cpsid	i
   1a4f2:	e7fe      	b.n	1a4f2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1a4f4:	4bbc      	ldr	r3, [pc, #752]	; (1a7e8 <xQueueGenericSend+0x34c>)
   1a4f6:	4798      	blx	r3
   1a4f8:	1e03      	subs	r3, r0, #0
   1a4fa:	d102      	bne.n	1a502 <xQueueGenericSend+0x66>
   1a4fc:	687b      	ldr	r3, [r7, #4]
   1a4fe:	2b00      	cmp	r3, #0
   1a500:	d101      	bne.n	1a506 <xQueueGenericSend+0x6a>
   1a502:	2301      	movs	r3, #1
   1a504:	e000      	b.n	1a508 <xQueueGenericSend+0x6c>
   1a506:	2300      	movs	r3, #0
   1a508:	2b00      	cmp	r3, #0
   1a50a:	d101      	bne.n	1a510 <xQueueGenericSend+0x74>
   1a50c:	b672      	cpsid	i
   1a50e:	e7fe      	b.n	1a50e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1a510:	4bb6      	ldr	r3, [pc, #728]	; (1a7ec <xQueueGenericSend+0x350>)
   1a512:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a514:	6a3b      	ldr	r3, [r7, #32]
   1a516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a518:	6a3b      	ldr	r3, [r7, #32]
   1a51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a51c:	429a      	cmp	r2, r3
   1a51e:	d303      	bcc.n	1a528 <xQueueGenericSend+0x8c>
   1a520:	683b      	ldr	r3, [r7, #0]
   1a522:	2b02      	cmp	r3, #2
   1a524:	d000      	beq.n	1a528 <xQueueGenericSend+0x8c>
   1a526:	e08e      	b.n	1a646 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1a528:	4bb1      	ldr	r3, [pc, #708]	; (1a7f0 <xQueueGenericSend+0x354>)
   1a52a:	4798      	blx	r3
   1a52c:	0003      	movs	r3, r0
   1a52e:	0018      	movs	r0, r3
   1a530:	4bb0      	ldr	r3, [pc, #704]	; (1a7f4 <xQueueGenericSend+0x358>)
   1a532:	4798      	blx	r3
   1a534:	0003      	movs	r3, r0
   1a536:	001a      	movs	r2, r3
   1a538:	4baf      	ldr	r3, [pc, #700]	; (1a7f8 <xQueueGenericSend+0x35c>)
   1a53a:	881b      	ldrh	r3, [r3, #0]
   1a53c:	4013      	ands	r3, r2
   1a53e:	b29b      	uxth	r3, r3
   1a540:	2b00      	cmp	r3, #0
   1a542:	d02e      	beq.n	1a5a2 <xQueueGenericSend+0x106>
   1a544:	6a3b      	ldr	r3, [r7, #32]
   1a546:	0018      	movs	r0, r3
   1a548:	4bac      	ldr	r3, [pc, #688]	; (1a7fc <xQueueGenericSend+0x360>)
   1a54a:	4798      	blx	r3
   1a54c:	0003      	movs	r3, r0
   1a54e:	001a      	movs	r2, r3
   1a550:	4ba9      	ldr	r3, [pc, #676]	; (1a7f8 <xQueueGenericSend+0x35c>)
   1a552:	881b      	ldrh	r3, [r3, #0]
   1a554:	4013      	ands	r3, r2
   1a556:	b29b      	uxth	r3, r3
   1a558:	2b00      	cmp	r3, #0
   1a55a:	d022      	beq.n	1a5a2 <xQueueGenericSend+0x106>
   1a55c:	683b      	ldr	r3, [r7, #0]
   1a55e:	2b00      	cmp	r3, #0
   1a560:	d10b      	bne.n	1a57a <xQueueGenericSend+0xde>
   1a562:	6a3b      	ldr	r3, [r7, #32]
   1a564:	0018      	movs	r0, r3
   1a566:	4ba6      	ldr	r3, [pc, #664]	; (1a800 <xQueueGenericSend+0x364>)
   1a568:	4798      	blx	r3
   1a56a:	0003      	movs	r3, r0
   1a56c:	001a      	movs	r2, r3
   1a56e:	4ba5      	ldr	r3, [pc, #660]	; (1a804 <xQueueGenericSend+0x368>)
   1a570:	5c9b      	ldrb	r3, [r3, r2]
   1a572:	3320      	adds	r3, #32
   1a574:	b2db      	uxtb	r3, r3
   1a576:	001d      	movs	r5, r3
   1a578:	e000      	b.n	1a57c <xQueueGenericSend+0xe0>
   1a57a:	2525      	movs	r5, #37	; 0x25
   1a57c:	6a3b      	ldr	r3, [r7, #32]
   1a57e:	0018      	movs	r0, r3
   1a580:	4b9f      	ldr	r3, [pc, #636]	; (1a800 <xQueueGenericSend+0x364>)
   1a582:	4798      	blx	r3
   1a584:	0003      	movs	r3, r0
   1a586:	001a      	movs	r2, r3
   1a588:	4b9e      	ldr	r3, [pc, #632]	; (1a804 <xQueueGenericSend+0x368>)
   1a58a:	5c9c      	ldrb	r4, [r3, r2]
   1a58c:	6a3b      	ldr	r3, [r7, #32]
   1a58e:	0018      	movs	r0, r3
   1a590:	4b9d      	ldr	r3, [pc, #628]	; (1a808 <xQueueGenericSend+0x36c>)
   1a592:	4798      	blx	r3
   1a594:	0003      	movs	r3, r0
   1a596:	b2db      	uxtb	r3, r3
   1a598:	001a      	movs	r2, r3
   1a59a:	0021      	movs	r1, r4
   1a59c:	0028      	movs	r0, r5
   1a59e:	4b9b      	ldr	r3, [pc, #620]	; (1a80c <xQueueGenericSend+0x370>)
   1a5a0:	4798      	blx	r3
   1a5a2:	6a3b      	ldr	r3, [r7, #32]
   1a5a4:	0018      	movs	r0, r3
   1a5a6:	4b96      	ldr	r3, [pc, #600]	; (1a800 <xQueueGenericSend+0x364>)
   1a5a8:	4798      	blx	r3
   1a5aa:	0003      	movs	r3, r0
   1a5ac:	001a      	movs	r2, r3
   1a5ae:	4b95      	ldr	r3, [pc, #596]	; (1a804 <xQueueGenericSend+0x368>)
   1a5b0:	5c9c      	ldrb	r4, [r3, r2]
   1a5b2:	6a3b      	ldr	r3, [r7, #32]
   1a5b4:	0018      	movs	r0, r3
   1a5b6:	4b94      	ldr	r3, [pc, #592]	; (1a808 <xQueueGenericSend+0x36c>)
   1a5b8:	4798      	blx	r3
   1a5ba:	0003      	movs	r3, r0
   1a5bc:	b2dd      	uxtb	r5, r3
   1a5be:	6a3b      	ldr	r3, [r7, #32]
   1a5c0:	0018      	movs	r0, r3
   1a5c2:	4b8f      	ldr	r3, [pc, #572]	; (1a800 <xQueueGenericSend+0x364>)
   1a5c4:	4798      	blx	r3
   1a5c6:	0003      	movs	r3, r0
   1a5c8:	001a      	movs	r2, r3
   1a5ca:	4b8e      	ldr	r3, [pc, #568]	; (1a804 <xQueueGenericSend+0x368>)
   1a5cc:	5c9b      	ldrb	r3, [r3, r2]
   1a5ce:	2b02      	cmp	r3, #2
   1a5d0:	d005      	beq.n	1a5de <xQueueGenericSend+0x142>
   1a5d2:	6a3b      	ldr	r3, [r7, #32]
   1a5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a5d6:	b2db      	uxtb	r3, r3
   1a5d8:	3301      	adds	r3, #1
   1a5da:	b2db      	uxtb	r3, r3
   1a5dc:	e000      	b.n	1a5e0 <xQueueGenericSend+0x144>
   1a5de:	2300      	movs	r3, #0
   1a5e0:	001a      	movs	r2, r3
   1a5e2:	0029      	movs	r1, r5
   1a5e4:	0020      	movs	r0, r4
   1a5e6:	4b8a      	ldr	r3, [pc, #552]	; (1a810 <xQueueGenericSend+0x374>)
   1a5e8:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1a5ea:	683a      	ldr	r2, [r7, #0]
   1a5ec:	68b9      	ldr	r1, [r7, #8]
   1a5ee:	6a3b      	ldr	r3, [r7, #32]
   1a5f0:	0018      	movs	r0, r3
   1a5f2:	4b88      	ldr	r3, [pc, #544]	; (1a814 <xQueueGenericSend+0x378>)
   1a5f4:	4798      	blx	r3
   1a5f6:	0003      	movs	r3, r0
   1a5f8:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1a5fa:	6a3b      	ldr	r3, [r7, #32]
   1a5fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a5fe:	2b00      	cmp	r3, #0
   1a600:	d00a      	beq.n	1a618 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1a602:	683a      	ldr	r2, [r7, #0]
   1a604:	6a3b      	ldr	r3, [r7, #32]
   1a606:	0011      	movs	r1, r2
   1a608:	0018      	movs	r0, r3
   1a60a:	4b83      	ldr	r3, [pc, #524]	; (1a818 <xQueueGenericSend+0x37c>)
   1a60c:	4798      	blx	r3
   1a60e:	1e03      	subs	r3, r0, #0
   1a610:	d015      	beq.n	1a63e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1a612:	4b82      	ldr	r3, [pc, #520]	; (1a81c <xQueueGenericSend+0x380>)
   1a614:	4798      	blx	r3
   1a616:	e012      	b.n	1a63e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a618:	6a3b      	ldr	r3, [r7, #32]
   1a61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a61c:	2b00      	cmp	r3, #0
   1a61e:	d009      	beq.n	1a634 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a620:	6a3b      	ldr	r3, [r7, #32]
   1a622:	3324      	adds	r3, #36	; 0x24
   1a624:	0018      	movs	r0, r3
   1a626:	4b7e      	ldr	r3, [pc, #504]	; (1a820 <xQueueGenericSend+0x384>)
   1a628:	4798      	blx	r3
   1a62a:	1e03      	subs	r3, r0, #0
   1a62c:	d007      	beq.n	1a63e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1a62e:	4b7b      	ldr	r3, [pc, #492]	; (1a81c <xQueueGenericSend+0x380>)
   1a630:	4798      	blx	r3
   1a632:	e004      	b.n	1a63e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1a634:	69fb      	ldr	r3, [r7, #28]
   1a636:	2b00      	cmp	r3, #0
   1a638:	d001      	beq.n	1a63e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1a63a:	4b78      	ldr	r3, [pc, #480]	; (1a81c <xQueueGenericSend+0x380>)
   1a63c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1a63e:	4b79      	ldr	r3, [pc, #484]	; (1a824 <xQueueGenericSend+0x388>)
   1a640:	4798      	blx	r3
				return pdPASS;
   1a642:	2301      	movs	r3, #1
   1a644:	e142      	b.n	1a8cc <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1a646:	687b      	ldr	r3, [r7, #4]
   1a648:	2b00      	cmp	r3, #0
   1a64a:	d140      	bne.n	1a6ce <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1a64c:	4b75      	ldr	r3, [pc, #468]	; (1a824 <xQueueGenericSend+0x388>)
   1a64e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1a650:	4b67      	ldr	r3, [pc, #412]	; (1a7f0 <xQueueGenericSend+0x354>)
   1a652:	4798      	blx	r3
   1a654:	0003      	movs	r3, r0
   1a656:	0018      	movs	r0, r3
   1a658:	4b66      	ldr	r3, [pc, #408]	; (1a7f4 <xQueueGenericSend+0x358>)
   1a65a:	4798      	blx	r3
   1a65c:	0003      	movs	r3, r0
   1a65e:	001a      	movs	r2, r3
   1a660:	4b65      	ldr	r3, [pc, #404]	; (1a7f8 <xQueueGenericSend+0x35c>)
   1a662:	881b      	ldrh	r3, [r3, #0]
   1a664:	4013      	ands	r3, r2
   1a666:	b29b      	uxth	r3, r3
   1a668:	2b00      	cmp	r3, #0
   1a66a:	d02e      	beq.n	1a6ca <xQueueGenericSend+0x22e>
   1a66c:	6a3b      	ldr	r3, [r7, #32]
   1a66e:	0018      	movs	r0, r3
   1a670:	4b62      	ldr	r3, [pc, #392]	; (1a7fc <xQueueGenericSend+0x360>)
   1a672:	4798      	blx	r3
   1a674:	0003      	movs	r3, r0
   1a676:	001a      	movs	r2, r3
   1a678:	4b5f      	ldr	r3, [pc, #380]	; (1a7f8 <xQueueGenericSend+0x35c>)
   1a67a:	881b      	ldrh	r3, [r3, #0]
   1a67c:	4013      	ands	r3, r2
   1a67e:	b29b      	uxth	r3, r3
   1a680:	2b00      	cmp	r3, #0
   1a682:	d022      	beq.n	1a6ca <xQueueGenericSend+0x22e>
   1a684:	683b      	ldr	r3, [r7, #0]
   1a686:	2b00      	cmp	r3, #0
   1a688:	d10b      	bne.n	1a6a2 <xQueueGenericSend+0x206>
   1a68a:	6a3b      	ldr	r3, [r7, #32]
   1a68c:	0018      	movs	r0, r3
   1a68e:	4b5c      	ldr	r3, [pc, #368]	; (1a800 <xQueueGenericSend+0x364>)
   1a690:	4798      	blx	r3
   1a692:	0003      	movs	r3, r0
   1a694:	001a      	movs	r2, r3
   1a696:	4b5b      	ldr	r3, [pc, #364]	; (1a804 <xQueueGenericSend+0x368>)
   1a698:	5c9b      	ldrb	r3, [r3, r2]
   1a69a:	3348      	adds	r3, #72	; 0x48
   1a69c:	b2db      	uxtb	r3, r3
   1a69e:	001d      	movs	r5, r3
   1a6a0:	e000      	b.n	1a6a4 <xQueueGenericSend+0x208>
   1a6a2:	254d      	movs	r5, #77	; 0x4d
   1a6a4:	6a3b      	ldr	r3, [r7, #32]
   1a6a6:	0018      	movs	r0, r3
   1a6a8:	4b55      	ldr	r3, [pc, #340]	; (1a800 <xQueueGenericSend+0x364>)
   1a6aa:	4798      	blx	r3
   1a6ac:	0003      	movs	r3, r0
   1a6ae:	001a      	movs	r2, r3
   1a6b0:	4b54      	ldr	r3, [pc, #336]	; (1a804 <xQueueGenericSend+0x368>)
   1a6b2:	5c9c      	ldrb	r4, [r3, r2]
   1a6b4:	6a3b      	ldr	r3, [r7, #32]
   1a6b6:	0018      	movs	r0, r3
   1a6b8:	4b53      	ldr	r3, [pc, #332]	; (1a808 <xQueueGenericSend+0x36c>)
   1a6ba:	4798      	blx	r3
   1a6bc:	0003      	movs	r3, r0
   1a6be:	b2db      	uxtb	r3, r3
   1a6c0:	001a      	movs	r2, r3
   1a6c2:	0021      	movs	r1, r4
   1a6c4:	0028      	movs	r0, r5
   1a6c6:	4b51      	ldr	r3, [pc, #324]	; (1a80c <xQueueGenericSend+0x370>)
   1a6c8:	4798      	blx	r3
					return errQUEUE_FULL;
   1a6ca:	2300      	movs	r3, #0
   1a6cc:	e0fe      	b.n	1a8cc <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1a6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a6d0:	2b00      	cmp	r3, #0
   1a6d2:	d106      	bne.n	1a6e2 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1a6d4:	2314      	movs	r3, #20
   1a6d6:	18fb      	adds	r3, r7, r3
   1a6d8:	0018      	movs	r0, r3
   1a6da:	4b53      	ldr	r3, [pc, #332]	; (1a828 <xQueueGenericSend+0x38c>)
   1a6dc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1a6de:	2301      	movs	r3, #1
   1a6e0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1a6e2:	4b50      	ldr	r3, [pc, #320]	; (1a824 <xQueueGenericSend+0x388>)
   1a6e4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1a6e6:	4b51      	ldr	r3, [pc, #324]	; (1a82c <xQueueGenericSend+0x390>)
   1a6e8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1a6ea:	4b40      	ldr	r3, [pc, #256]	; (1a7ec <xQueueGenericSend+0x350>)
   1a6ec:	4798      	blx	r3
   1a6ee:	6a3b      	ldr	r3, [r7, #32]
   1a6f0:	2244      	movs	r2, #68	; 0x44
   1a6f2:	5c9b      	ldrb	r3, [r3, r2]
   1a6f4:	b25b      	sxtb	r3, r3
   1a6f6:	3301      	adds	r3, #1
   1a6f8:	d103      	bne.n	1a702 <xQueueGenericSend+0x266>
   1a6fa:	6a3b      	ldr	r3, [r7, #32]
   1a6fc:	2244      	movs	r2, #68	; 0x44
   1a6fe:	2100      	movs	r1, #0
   1a700:	5499      	strb	r1, [r3, r2]
   1a702:	6a3b      	ldr	r3, [r7, #32]
   1a704:	2245      	movs	r2, #69	; 0x45
   1a706:	5c9b      	ldrb	r3, [r3, r2]
   1a708:	b25b      	sxtb	r3, r3
   1a70a:	3301      	adds	r3, #1
   1a70c:	d103      	bne.n	1a716 <xQueueGenericSend+0x27a>
   1a70e:	6a3b      	ldr	r3, [r7, #32]
   1a710:	2245      	movs	r2, #69	; 0x45
   1a712:	2100      	movs	r1, #0
   1a714:	5499      	strb	r1, [r3, r2]
   1a716:	4b43      	ldr	r3, [pc, #268]	; (1a824 <xQueueGenericSend+0x388>)
   1a718:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1a71a:	1d3a      	adds	r2, r7, #4
   1a71c:	2314      	movs	r3, #20
   1a71e:	18fb      	adds	r3, r7, r3
   1a720:	0011      	movs	r1, r2
   1a722:	0018      	movs	r0, r3
   1a724:	4b42      	ldr	r3, [pc, #264]	; (1a830 <xQueueGenericSend+0x394>)
   1a726:	4798      	blx	r3
   1a728:	1e03      	subs	r3, r0, #0
   1a72a:	d000      	beq.n	1a72e <xQueueGenericSend+0x292>
   1a72c:	e08a      	b.n	1a844 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1a72e:	6a3b      	ldr	r3, [r7, #32]
   1a730:	0018      	movs	r0, r3
   1a732:	4b40      	ldr	r3, [pc, #256]	; (1a834 <xQueueGenericSend+0x398>)
   1a734:	4798      	blx	r3
   1a736:	1e03      	subs	r3, r0, #0
   1a738:	d04f      	beq.n	1a7da <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1a73a:	4b2d      	ldr	r3, [pc, #180]	; (1a7f0 <xQueueGenericSend+0x354>)
   1a73c:	4798      	blx	r3
   1a73e:	0003      	movs	r3, r0
   1a740:	0018      	movs	r0, r3
   1a742:	4b2c      	ldr	r3, [pc, #176]	; (1a7f4 <xQueueGenericSend+0x358>)
   1a744:	4798      	blx	r3
   1a746:	0003      	movs	r3, r0
   1a748:	001a      	movs	r2, r3
   1a74a:	4b2b      	ldr	r3, [pc, #172]	; (1a7f8 <xQueueGenericSend+0x35c>)
   1a74c:	881b      	ldrh	r3, [r3, #0]
   1a74e:	4013      	ands	r3, r2
   1a750:	b29b      	uxth	r3, r3
   1a752:	2b00      	cmp	r3, #0
   1a754:	d02e      	beq.n	1a7b4 <xQueueGenericSend+0x318>
   1a756:	6a3b      	ldr	r3, [r7, #32]
   1a758:	0018      	movs	r0, r3
   1a75a:	4b28      	ldr	r3, [pc, #160]	; (1a7fc <xQueueGenericSend+0x360>)
   1a75c:	4798      	blx	r3
   1a75e:	0003      	movs	r3, r0
   1a760:	001a      	movs	r2, r3
   1a762:	4b25      	ldr	r3, [pc, #148]	; (1a7f8 <xQueueGenericSend+0x35c>)
   1a764:	881b      	ldrh	r3, [r3, #0]
   1a766:	4013      	ands	r3, r2
   1a768:	b29b      	uxth	r3, r3
   1a76a:	2b00      	cmp	r3, #0
   1a76c:	d022      	beq.n	1a7b4 <xQueueGenericSend+0x318>
   1a76e:	683b      	ldr	r3, [r7, #0]
   1a770:	2b00      	cmp	r3, #0
   1a772:	d10b      	bne.n	1a78c <xQueueGenericSend+0x2f0>
   1a774:	6a3b      	ldr	r3, [r7, #32]
   1a776:	0018      	movs	r0, r3
   1a778:	4b21      	ldr	r3, [pc, #132]	; (1a800 <xQueueGenericSend+0x364>)
   1a77a:	4798      	blx	r3
   1a77c:	0003      	movs	r3, r0
   1a77e:	001a      	movs	r2, r3
   1a780:	4b20      	ldr	r3, [pc, #128]	; (1a804 <xQueueGenericSend+0x368>)
   1a782:	5c9b      	ldrb	r3, [r3, r2]
   1a784:	3370      	adds	r3, #112	; 0x70
   1a786:	b2db      	uxtb	r3, r3
   1a788:	001d      	movs	r5, r3
   1a78a:	e000      	b.n	1a78e <xQueueGenericSend+0x2f2>
   1a78c:	2575      	movs	r5, #117	; 0x75
   1a78e:	6a3b      	ldr	r3, [r7, #32]
   1a790:	0018      	movs	r0, r3
   1a792:	4b1b      	ldr	r3, [pc, #108]	; (1a800 <xQueueGenericSend+0x364>)
   1a794:	4798      	blx	r3
   1a796:	0003      	movs	r3, r0
   1a798:	001a      	movs	r2, r3
   1a79a:	4b1a      	ldr	r3, [pc, #104]	; (1a804 <xQueueGenericSend+0x368>)
   1a79c:	5c9c      	ldrb	r4, [r3, r2]
   1a79e:	6a3b      	ldr	r3, [r7, #32]
   1a7a0:	0018      	movs	r0, r3
   1a7a2:	4b19      	ldr	r3, [pc, #100]	; (1a808 <xQueueGenericSend+0x36c>)
   1a7a4:	4798      	blx	r3
   1a7a6:	0003      	movs	r3, r0
   1a7a8:	b2db      	uxtb	r3, r3
   1a7aa:	001a      	movs	r2, r3
   1a7ac:	0021      	movs	r1, r4
   1a7ae:	0028      	movs	r0, r5
   1a7b0:	4b16      	ldr	r3, [pc, #88]	; (1a80c <xQueueGenericSend+0x370>)
   1a7b2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1a7b4:	6a3b      	ldr	r3, [r7, #32]
   1a7b6:	3310      	adds	r3, #16
   1a7b8:	687a      	ldr	r2, [r7, #4]
   1a7ba:	0011      	movs	r1, r2
   1a7bc:	0018      	movs	r0, r3
   1a7be:	4b1e      	ldr	r3, [pc, #120]	; (1a838 <xQueueGenericSend+0x39c>)
   1a7c0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1a7c2:	6a3b      	ldr	r3, [r7, #32]
   1a7c4:	0018      	movs	r0, r3
   1a7c6:	4b1d      	ldr	r3, [pc, #116]	; (1a83c <xQueueGenericSend+0x3a0>)
   1a7c8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1a7ca:	4b1d      	ldr	r3, [pc, #116]	; (1a840 <xQueueGenericSend+0x3a4>)
   1a7cc:	4798      	blx	r3
   1a7ce:	1e03      	subs	r3, r0, #0
   1a7d0:	d000      	beq.n	1a7d4 <xQueueGenericSend+0x338>
   1a7d2:	e69d      	b.n	1a510 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1a7d4:	4b11      	ldr	r3, [pc, #68]	; (1a81c <xQueueGenericSend+0x380>)
   1a7d6:	4798      	blx	r3
   1a7d8:	e69a      	b.n	1a510 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1a7da:	6a3b      	ldr	r3, [r7, #32]
   1a7dc:	0018      	movs	r0, r3
   1a7de:	4b17      	ldr	r3, [pc, #92]	; (1a83c <xQueueGenericSend+0x3a0>)
   1a7e0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a7e2:	4b17      	ldr	r3, [pc, #92]	; (1a840 <xQueueGenericSend+0x3a4>)
   1a7e4:	4798      	blx	r3
   1a7e6:	e693      	b.n	1a510 <xQueueGenericSend+0x74>
   1a7e8:	0001cc29 	.word	0x0001cc29
   1a7ec:	00019f09 	.word	0x00019f09
   1a7f0:	0001819d 	.word	0x0001819d
   1a7f4:	00017f01 	.word	0x00017f01
   1a7f8:	200000b8 	.word	0x200000b8
   1a7fc:	00017fc1 	.word	0x00017fc1
   1a800:	00017ec1 	.word	0x00017ec1
   1a804:	200000ac 	.word	0x200000ac
   1a808:	00017fa1 	.word	0x00017fa1
   1a80c:	000188f9 	.word	0x000188f9
   1a810:	00018f55 	.word	0x00018f55
   1a814:	0001b6d5 	.word	0x0001b6d5
   1a818:	0001b9d9 	.word	0x0001b9d9
   1a81c:	00019ef1 	.word	0x00019ef1
   1a820:	0001c799 	.word	0x0001c799
   1a824:	00019f2d 	.word	0x00019f2d
   1a828:	0001c8d9 	.word	0x0001c8d9
   1a82c:	0001c1c1 	.word	0x0001c1c1
   1a830:	0001c901 	.word	0x0001c901
   1a834:	0001b929 	.word	0x0001b929
   1a838:	0001c675 	.word	0x0001c675
   1a83c:	0001b805 	.word	0x0001b805
   1a840:	0001c1d9 	.word	0x0001c1d9
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1a844:	6a3b      	ldr	r3, [r7, #32]
   1a846:	0018      	movs	r0, r3
   1a848:	4b22      	ldr	r3, [pc, #136]	; (1a8d4 <xQueueGenericSend+0x438>)
   1a84a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a84c:	4b22      	ldr	r3, [pc, #136]	; (1a8d8 <xQueueGenericSend+0x43c>)
   1a84e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1a850:	4b22      	ldr	r3, [pc, #136]	; (1a8dc <xQueueGenericSend+0x440>)
   1a852:	4798      	blx	r3
   1a854:	0003      	movs	r3, r0
   1a856:	0018      	movs	r0, r3
   1a858:	4b21      	ldr	r3, [pc, #132]	; (1a8e0 <xQueueGenericSend+0x444>)
   1a85a:	4798      	blx	r3
   1a85c:	0003      	movs	r3, r0
   1a85e:	001a      	movs	r2, r3
   1a860:	4b20      	ldr	r3, [pc, #128]	; (1a8e4 <xQueueGenericSend+0x448>)
   1a862:	881b      	ldrh	r3, [r3, #0]
   1a864:	4013      	ands	r3, r2
   1a866:	b29b      	uxth	r3, r3
   1a868:	2b00      	cmp	r3, #0
   1a86a:	d02e      	beq.n	1a8ca <xQueueGenericSend+0x42e>
   1a86c:	6a3b      	ldr	r3, [r7, #32]
   1a86e:	0018      	movs	r0, r3
   1a870:	4b1d      	ldr	r3, [pc, #116]	; (1a8e8 <xQueueGenericSend+0x44c>)
   1a872:	4798      	blx	r3
   1a874:	0003      	movs	r3, r0
   1a876:	001a      	movs	r2, r3
   1a878:	4b1a      	ldr	r3, [pc, #104]	; (1a8e4 <xQueueGenericSend+0x448>)
   1a87a:	881b      	ldrh	r3, [r3, #0]
   1a87c:	4013      	ands	r3, r2
   1a87e:	b29b      	uxth	r3, r3
   1a880:	2b00      	cmp	r3, #0
   1a882:	d022      	beq.n	1a8ca <xQueueGenericSend+0x42e>
   1a884:	683b      	ldr	r3, [r7, #0]
   1a886:	2b00      	cmp	r3, #0
   1a888:	d10b      	bne.n	1a8a2 <xQueueGenericSend+0x406>
   1a88a:	6a3b      	ldr	r3, [r7, #32]
   1a88c:	0018      	movs	r0, r3
   1a88e:	4b17      	ldr	r3, [pc, #92]	; (1a8ec <xQueueGenericSend+0x450>)
   1a890:	4798      	blx	r3
   1a892:	0003      	movs	r3, r0
   1a894:	001a      	movs	r2, r3
   1a896:	4b16      	ldr	r3, [pc, #88]	; (1a8f0 <xQueueGenericSend+0x454>)
   1a898:	5c9b      	ldrb	r3, [r3, r2]
   1a89a:	3348      	adds	r3, #72	; 0x48
   1a89c:	b2db      	uxtb	r3, r3
   1a89e:	001d      	movs	r5, r3
   1a8a0:	e000      	b.n	1a8a4 <xQueueGenericSend+0x408>
   1a8a2:	254d      	movs	r5, #77	; 0x4d
   1a8a4:	6a3b      	ldr	r3, [r7, #32]
   1a8a6:	0018      	movs	r0, r3
   1a8a8:	4b10      	ldr	r3, [pc, #64]	; (1a8ec <xQueueGenericSend+0x450>)
   1a8aa:	4798      	blx	r3
   1a8ac:	0003      	movs	r3, r0
   1a8ae:	001a      	movs	r2, r3
   1a8b0:	4b0f      	ldr	r3, [pc, #60]	; (1a8f0 <xQueueGenericSend+0x454>)
   1a8b2:	5c9c      	ldrb	r4, [r3, r2]
   1a8b4:	6a3b      	ldr	r3, [r7, #32]
   1a8b6:	0018      	movs	r0, r3
   1a8b8:	4b0e      	ldr	r3, [pc, #56]	; (1a8f4 <xQueueGenericSend+0x458>)
   1a8ba:	4798      	blx	r3
   1a8bc:	0003      	movs	r3, r0
   1a8be:	b2db      	uxtb	r3, r3
   1a8c0:	001a      	movs	r2, r3
   1a8c2:	0021      	movs	r1, r4
   1a8c4:	0028      	movs	r0, r5
   1a8c6:	4b0c      	ldr	r3, [pc, #48]	; (1a8f8 <xQueueGenericSend+0x45c>)
   1a8c8:	4798      	blx	r3
			return errQUEUE_FULL;
   1a8ca:	2300      	movs	r3, #0
		}
	}
}
   1a8cc:	0018      	movs	r0, r3
   1a8ce:	46bd      	mov	sp, r7
   1a8d0:	b00a      	add	sp, #40	; 0x28
   1a8d2:	bdb0      	pop	{r4, r5, r7, pc}
   1a8d4:	0001b805 	.word	0x0001b805
   1a8d8:	0001c1d9 	.word	0x0001c1d9
   1a8dc:	0001819d 	.word	0x0001819d
   1a8e0:	00017f01 	.word	0x00017f01
   1a8e4:	200000b8 	.word	0x200000b8
   1a8e8:	00017fc1 	.word	0x00017fc1
   1a8ec:	00017ec1 	.word	0x00017ec1
   1a8f0:	200000ac 	.word	0x200000ac
   1a8f4:	00017fa1 	.word	0x00017fa1
   1a8f8:	000188f9 	.word	0x000188f9

0001a8fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1a8fc:	b5b0      	push	{r4, r5, r7, lr}
   1a8fe:	b088      	sub	sp, #32
   1a900:	af00      	add	r7, sp, #0
   1a902:	60f8      	str	r0, [r7, #12]
   1a904:	60b9      	str	r1, [r7, #8]
   1a906:	607a      	str	r2, [r7, #4]
   1a908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a90a:	68fb      	ldr	r3, [r7, #12]
   1a90c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1a90e:	69bb      	ldr	r3, [r7, #24]
   1a910:	2b00      	cmp	r3, #0
   1a912:	d101      	bne.n	1a918 <xQueueGenericSendFromISR+0x1c>
   1a914:	b672      	cpsid	i
   1a916:	e7fe      	b.n	1a916 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1a918:	68bb      	ldr	r3, [r7, #8]
   1a91a:	2b00      	cmp	r3, #0
   1a91c:	d103      	bne.n	1a926 <xQueueGenericSendFromISR+0x2a>
   1a91e:	69bb      	ldr	r3, [r7, #24]
   1a920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a922:	2b00      	cmp	r3, #0
   1a924:	d101      	bne.n	1a92a <xQueueGenericSendFromISR+0x2e>
   1a926:	2301      	movs	r3, #1
   1a928:	e000      	b.n	1a92c <xQueueGenericSendFromISR+0x30>
   1a92a:	2300      	movs	r3, #0
   1a92c:	2b00      	cmp	r3, #0
   1a92e:	d101      	bne.n	1a934 <xQueueGenericSendFromISR+0x38>
   1a930:	b672      	cpsid	i
   1a932:	e7fe      	b.n	1a932 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1a934:	683b      	ldr	r3, [r7, #0]
   1a936:	2b02      	cmp	r3, #2
   1a938:	d103      	bne.n	1a942 <xQueueGenericSendFromISR+0x46>
   1a93a:	69bb      	ldr	r3, [r7, #24]
   1a93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a93e:	2b01      	cmp	r3, #1
   1a940:	d101      	bne.n	1a946 <xQueueGenericSendFromISR+0x4a>
   1a942:	2301      	movs	r3, #1
   1a944:	e000      	b.n	1a948 <xQueueGenericSendFromISR+0x4c>
   1a946:	2300      	movs	r3, #0
   1a948:	2b00      	cmp	r3, #0
   1a94a:	d101      	bne.n	1a950 <xQueueGenericSendFromISR+0x54>
   1a94c:	b672      	cpsid	i
   1a94e:	e7fe      	b.n	1a94e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1a950:	4b68      	ldr	r3, [pc, #416]	; (1aaf4 <xQueueGenericSendFromISR+0x1f8>)
   1a952:	4798      	blx	r3
   1a954:	0003      	movs	r3, r0
   1a956:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1a958:	69bb      	ldr	r3, [r7, #24]
   1a95a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a95c:	69bb      	ldr	r3, [r7, #24]
   1a95e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a960:	429a      	cmp	r2, r3
   1a962:	d303      	bcc.n	1a96c <xQueueGenericSendFromISR+0x70>
   1a964:	683b      	ldr	r3, [r7, #0]
   1a966:	2b02      	cmp	r3, #2
   1a968:	d000      	beq.n	1a96c <xQueueGenericSendFromISR+0x70>
   1a96a:	e088      	b.n	1aa7e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1a96c:	2313      	movs	r3, #19
   1a96e:	18fb      	adds	r3, r7, r3
   1a970:	69ba      	ldr	r2, [r7, #24]
   1a972:	2145      	movs	r1, #69	; 0x45
   1a974:	5c52      	ldrb	r2, [r2, r1]
   1a976:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1a978:	69bb      	ldr	r3, [r7, #24]
   1a97a:	0018      	movs	r0, r3
   1a97c:	4b5e      	ldr	r3, [pc, #376]	; (1aaf8 <xQueueGenericSendFromISR+0x1fc>)
   1a97e:	4798      	blx	r3
   1a980:	0003      	movs	r3, r0
   1a982:	001a      	movs	r2, r3
   1a984:	4b5d      	ldr	r3, [pc, #372]	; (1aafc <xQueueGenericSendFromISR+0x200>)
   1a986:	881b      	ldrh	r3, [r3, #0]
   1a988:	4013      	ands	r3, r2
   1a98a:	b29b      	uxth	r3, r3
   1a98c:	2b00      	cmp	r3, #0
   1a98e:	d022      	beq.n	1a9d6 <xQueueGenericSendFromISR+0xda>
   1a990:	683b      	ldr	r3, [r7, #0]
   1a992:	2b00      	cmp	r3, #0
   1a994:	d10b      	bne.n	1a9ae <xQueueGenericSendFromISR+0xb2>
   1a996:	69bb      	ldr	r3, [r7, #24]
   1a998:	0018      	movs	r0, r3
   1a99a:	4b59      	ldr	r3, [pc, #356]	; (1ab00 <xQueueGenericSendFromISR+0x204>)
   1a99c:	4798      	blx	r3
   1a99e:	0003      	movs	r3, r0
   1a9a0:	001a      	movs	r2, r3
   1a9a2:	4b58      	ldr	r3, [pc, #352]	; (1ab04 <xQueueGenericSendFromISR+0x208>)
   1a9a4:	5c9b      	ldrb	r3, [r3, r2]
   1a9a6:	3330      	adds	r3, #48	; 0x30
   1a9a8:	b2db      	uxtb	r3, r3
   1a9aa:	001d      	movs	r5, r3
   1a9ac:	e000      	b.n	1a9b0 <xQueueGenericSendFromISR+0xb4>
   1a9ae:	2535      	movs	r5, #53	; 0x35
   1a9b0:	69bb      	ldr	r3, [r7, #24]
   1a9b2:	0018      	movs	r0, r3
   1a9b4:	4b52      	ldr	r3, [pc, #328]	; (1ab00 <xQueueGenericSendFromISR+0x204>)
   1a9b6:	4798      	blx	r3
   1a9b8:	0003      	movs	r3, r0
   1a9ba:	001a      	movs	r2, r3
   1a9bc:	4b51      	ldr	r3, [pc, #324]	; (1ab04 <xQueueGenericSendFromISR+0x208>)
   1a9be:	5c9c      	ldrb	r4, [r3, r2]
   1a9c0:	69bb      	ldr	r3, [r7, #24]
   1a9c2:	0018      	movs	r0, r3
   1a9c4:	4b50      	ldr	r3, [pc, #320]	; (1ab08 <xQueueGenericSendFromISR+0x20c>)
   1a9c6:	4798      	blx	r3
   1a9c8:	0003      	movs	r3, r0
   1a9ca:	b2db      	uxtb	r3, r3
   1a9cc:	001a      	movs	r2, r3
   1a9ce:	0021      	movs	r1, r4
   1a9d0:	0028      	movs	r0, r5
   1a9d2:	4b4e      	ldr	r3, [pc, #312]	; (1ab0c <xQueueGenericSendFromISR+0x210>)
   1a9d4:	4798      	blx	r3
   1a9d6:	69bb      	ldr	r3, [r7, #24]
   1a9d8:	0018      	movs	r0, r3
   1a9da:	4b49      	ldr	r3, [pc, #292]	; (1ab00 <xQueueGenericSendFromISR+0x204>)
   1a9dc:	4798      	blx	r3
   1a9de:	0003      	movs	r3, r0
   1a9e0:	001a      	movs	r2, r3
   1a9e2:	4b48      	ldr	r3, [pc, #288]	; (1ab04 <xQueueGenericSendFromISR+0x208>)
   1a9e4:	5c9c      	ldrb	r4, [r3, r2]
   1a9e6:	69bb      	ldr	r3, [r7, #24]
   1a9e8:	0018      	movs	r0, r3
   1a9ea:	4b47      	ldr	r3, [pc, #284]	; (1ab08 <xQueueGenericSendFromISR+0x20c>)
   1a9ec:	4798      	blx	r3
   1a9ee:	0003      	movs	r3, r0
   1a9f0:	b2d9      	uxtb	r1, r3
   1a9f2:	69bb      	ldr	r3, [r7, #24]
   1a9f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a9f6:	b2db      	uxtb	r3, r3
   1a9f8:	3301      	adds	r3, #1
   1a9fa:	b2db      	uxtb	r3, r3
   1a9fc:	001a      	movs	r2, r3
   1a9fe:	0020      	movs	r0, r4
   1aa00:	4b43      	ldr	r3, [pc, #268]	; (1ab10 <xQueueGenericSendFromISR+0x214>)
   1aa02:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1aa04:	683a      	ldr	r2, [r7, #0]
   1aa06:	68b9      	ldr	r1, [r7, #8]
   1aa08:	69bb      	ldr	r3, [r7, #24]
   1aa0a:	0018      	movs	r0, r3
   1aa0c:	4b41      	ldr	r3, [pc, #260]	; (1ab14 <xQueueGenericSendFromISR+0x218>)
   1aa0e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1aa10:	2313      	movs	r3, #19
   1aa12:	18fb      	adds	r3, r7, r3
   1aa14:	781b      	ldrb	r3, [r3, #0]
   1aa16:	b25b      	sxtb	r3, r3
   1aa18:	3301      	adds	r3, #1
   1aa1a:	d124      	bne.n	1aa66 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1aa1c:	69bb      	ldr	r3, [r7, #24]
   1aa1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1aa20:	2b00      	cmp	r3, #0
   1aa22:	d00e      	beq.n	1aa42 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1aa24:	683a      	ldr	r2, [r7, #0]
   1aa26:	69bb      	ldr	r3, [r7, #24]
   1aa28:	0011      	movs	r1, r2
   1aa2a:	0018      	movs	r0, r3
   1aa2c:	4b3a      	ldr	r3, [pc, #232]	; (1ab18 <xQueueGenericSendFromISR+0x21c>)
   1aa2e:	4798      	blx	r3
   1aa30:	1e03      	subs	r3, r0, #0
   1aa32:	d021      	beq.n	1aa78 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1aa34:	687b      	ldr	r3, [r7, #4]
   1aa36:	2b00      	cmp	r3, #0
   1aa38:	d01e      	beq.n	1aa78 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1aa3a:	687b      	ldr	r3, [r7, #4]
   1aa3c:	2201      	movs	r2, #1
   1aa3e:	601a      	str	r2, [r3, #0]
   1aa40:	e01a      	b.n	1aa78 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1aa42:	69bb      	ldr	r3, [r7, #24]
   1aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aa46:	2b00      	cmp	r3, #0
   1aa48:	d016      	beq.n	1aa78 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1aa4a:	69bb      	ldr	r3, [r7, #24]
   1aa4c:	3324      	adds	r3, #36	; 0x24
   1aa4e:	0018      	movs	r0, r3
   1aa50:	4b32      	ldr	r3, [pc, #200]	; (1ab1c <xQueueGenericSendFromISR+0x220>)
   1aa52:	4798      	blx	r3
   1aa54:	1e03      	subs	r3, r0, #0
   1aa56:	d00f      	beq.n	1aa78 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1aa58:	687b      	ldr	r3, [r7, #4]
   1aa5a:	2b00      	cmp	r3, #0
   1aa5c:	d00c      	beq.n	1aa78 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1aa5e:	687b      	ldr	r3, [r7, #4]
   1aa60:	2201      	movs	r2, #1
   1aa62:	601a      	str	r2, [r3, #0]
   1aa64:	e008      	b.n	1aa78 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1aa66:	2313      	movs	r3, #19
   1aa68:	18fb      	adds	r3, r7, r3
   1aa6a:	781b      	ldrb	r3, [r3, #0]
   1aa6c:	3301      	adds	r3, #1
   1aa6e:	b2db      	uxtb	r3, r3
   1aa70:	b259      	sxtb	r1, r3
   1aa72:	69bb      	ldr	r3, [r7, #24]
   1aa74:	2245      	movs	r2, #69	; 0x45
   1aa76:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1aa78:	2301      	movs	r3, #1
   1aa7a:	61fb      	str	r3, [r7, #28]
		{
   1aa7c:	e030      	b.n	1aae0 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1aa7e:	69bb      	ldr	r3, [r7, #24]
   1aa80:	0018      	movs	r0, r3
   1aa82:	4b1d      	ldr	r3, [pc, #116]	; (1aaf8 <xQueueGenericSendFromISR+0x1fc>)
   1aa84:	4798      	blx	r3
   1aa86:	0003      	movs	r3, r0
   1aa88:	001a      	movs	r2, r3
   1aa8a:	4b1c      	ldr	r3, [pc, #112]	; (1aafc <xQueueGenericSendFromISR+0x200>)
   1aa8c:	881b      	ldrh	r3, [r3, #0]
   1aa8e:	4013      	ands	r3, r2
   1aa90:	b29b      	uxth	r3, r3
   1aa92:	2b00      	cmp	r3, #0
   1aa94:	d022      	beq.n	1aadc <xQueueGenericSendFromISR+0x1e0>
   1aa96:	683b      	ldr	r3, [r7, #0]
   1aa98:	2b00      	cmp	r3, #0
   1aa9a:	d10b      	bne.n	1aab4 <xQueueGenericSendFromISR+0x1b8>
   1aa9c:	69bb      	ldr	r3, [r7, #24]
   1aa9e:	0018      	movs	r0, r3
   1aaa0:	4b17      	ldr	r3, [pc, #92]	; (1ab00 <xQueueGenericSendFromISR+0x204>)
   1aaa2:	4798      	blx	r3
   1aaa4:	0003      	movs	r3, r0
   1aaa6:	001a      	movs	r2, r3
   1aaa8:	4b16      	ldr	r3, [pc, #88]	; (1ab04 <xQueueGenericSendFromISR+0x208>)
   1aaaa:	5c9b      	ldrb	r3, [r3, r2]
   1aaac:	3358      	adds	r3, #88	; 0x58
   1aaae:	b2db      	uxtb	r3, r3
   1aab0:	001d      	movs	r5, r3
   1aab2:	e000      	b.n	1aab6 <xQueueGenericSendFromISR+0x1ba>
   1aab4:	255d      	movs	r5, #93	; 0x5d
   1aab6:	69bb      	ldr	r3, [r7, #24]
   1aab8:	0018      	movs	r0, r3
   1aaba:	4b11      	ldr	r3, [pc, #68]	; (1ab00 <xQueueGenericSendFromISR+0x204>)
   1aabc:	4798      	blx	r3
   1aabe:	0003      	movs	r3, r0
   1aac0:	001a      	movs	r2, r3
   1aac2:	4b10      	ldr	r3, [pc, #64]	; (1ab04 <xQueueGenericSendFromISR+0x208>)
   1aac4:	5c9c      	ldrb	r4, [r3, r2]
   1aac6:	69bb      	ldr	r3, [r7, #24]
   1aac8:	0018      	movs	r0, r3
   1aaca:	4b0f      	ldr	r3, [pc, #60]	; (1ab08 <xQueueGenericSendFromISR+0x20c>)
   1aacc:	4798      	blx	r3
   1aace:	0003      	movs	r3, r0
   1aad0:	b2db      	uxtb	r3, r3
   1aad2:	001a      	movs	r2, r3
   1aad4:	0021      	movs	r1, r4
   1aad6:	0028      	movs	r0, r5
   1aad8:	4b0c      	ldr	r3, [pc, #48]	; (1ab0c <xQueueGenericSendFromISR+0x210>)
   1aada:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1aadc:	2300      	movs	r3, #0
   1aade:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1aae0:	697b      	ldr	r3, [r7, #20]
   1aae2:	0018      	movs	r0, r3
   1aae4:	4b0e      	ldr	r3, [pc, #56]	; (1ab20 <xQueueGenericSendFromISR+0x224>)
   1aae6:	4798      	blx	r3

	return xReturn;
   1aae8:	69fb      	ldr	r3, [r7, #28]
}
   1aaea:	0018      	movs	r0, r3
   1aaec:	46bd      	mov	sp, r7
   1aaee:	b008      	add	sp, #32
   1aaf0:	bdb0      	pop	{r4, r5, r7, pc}
   1aaf2:	46c0      	nop			; (mov r8, r8)
   1aaf4:	00019f5d 	.word	0x00019f5d
   1aaf8:	00017fc1 	.word	0x00017fc1
   1aafc:	200000b8 	.word	0x200000b8
   1ab00:	00017ec1 	.word	0x00017ec1
   1ab04:	200000ac 	.word	0x200000ac
   1ab08:	00017fa1 	.word	0x00017fa1
   1ab0c:	000188f9 	.word	0x000188f9
   1ab10:	00018f55 	.word	0x00018f55
   1ab14:	0001b6d5 	.word	0x0001b6d5
   1ab18:	0001b9d9 	.word	0x0001b9d9
   1ab1c:	0001c799 	.word	0x0001c799
   1ab20:	00019f69 	.word	0x00019f69

0001ab24 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1ab24:	b580      	push	{r7, lr}
   1ab26:	b082      	sub	sp, #8
   1ab28:	af00      	add	r7, sp, #0
   1ab2a:	6078      	str	r0, [r7, #4]
   1ab2c:	6039      	str	r1, [r7, #0]
   1ab2e:	6839      	ldr	r1, [r7, #0]
   1ab30:	687b      	ldr	r3, [r7, #4]
   1ab32:	2200      	movs	r2, #0
   1ab34:	0018      	movs	r0, r3
   1ab36:	4b03      	ldr	r3, [pc, #12]	; (1ab44 <xQueueGiveFromISR+0x20>)
   1ab38:	4798      	blx	r3
   1ab3a:	0003      	movs	r3, r0
   1ab3c:	0018      	movs	r0, r3
   1ab3e:	46bd      	mov	sp, r7
   1ab40:	b002      	add	sp, #8
   1ab42:	bd80      	pop	{r7, pc}
   1ab44:	0001ab49 	.word	0x0001ab49

0001ab48 <MyWrapper>:
{
   1ab48:	b5b0      	push	{r4, r5, r7, lr}
   1ab4a:	b08a      	sub	sp, #40	; 0x28
   1ab4c:	af00      	add	r7, sp, #0
   1ab4e:	60f8      	str	r0, [r7, #12]
   1ab50:	60b9      	str	r1, [r7, #8]
   1ab52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ab54:	68fb      	ldr	r3, [r7, #12]
   1ab56:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1ab58:	6a3b      	ldr	r3, [r7, #32]
   1ab5a:	2b00      	cmp	r3, #0
   1ab5c:	d101      	bne.n	1ab62 <MyWrapper+0x1a>
   1ab5e:	b672      	cpsid	i
   1ab60:	e7fe      	b.n	1ab60 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1ab62:	6a3b      	ldr	r3, [r7, #32]
   1ab64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ab66:	2b00      	cmp	r3, #0
   1ab68:	d001      	beq.n	1ab6e <MyWrapper+0x26>
   1ab6a:	b672      	cpsid	i
   1ab6c:	e7fe      	b.n	1ab6c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1ab6e:	6a3b      	ldr	r3, [r7, #32]
   1ab70:	681b      	ldr	r3, [r3, #0]
   1ab72:	2b00      	cmp	r3, #0
   1ab74:	d103      	bne.n	1ab7e <MyWrapper+0x36>
   1ab76:	6a3b      	ldr	r3, [r7, #32]
   1ab78:	685b      	ldr	r3, [r3, #4]
   1ab7a:	2b00      	cmp	r3, #0
   1ab7c:	d101      	bne.n	1ab82 <MyWrapper+0x3a>
   1ab7e:	2301      	movs	r3, #1
   1ab80:	e000      	b.n	1ab84 <MyWrapper+0x3c>
   1ab82:	2300      	movs	r3, #0
   1ab84:	2b00      	cmp	r3, #0
   1ab86:	d101      	bne.n	1ab8c <MyWrapper+0x44>
   1ab88:	b672      	cpsid	i
   1ab8a:	e7fe      	b.n	1ab8a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1ab8c:	4b66      	ldr	r3, [pc, #408]	; (1ad28 <MyWrapper+0x1e0>)
   1ab8e:	4798      	blx	r3
   1ab90:	0003      	movs	r3, r0
   1ab92:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1ab94:	6a3b      	ldr	r3, [r7, #32]
   1ab96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ab98:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1ab9a:	6a3b      	ldr	r3, [r7, #32]
   1ab9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1ab9e:	69bb      	ldr	r3, [r7, #24]
   1aba0:	429a      	cmp	r2, r3
   1aba2:	d800      	bhi.n	1aba6 <MyWrapper+0x5e>
   1aba4:	e085      	b.n	1acb2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1aba6:	2317      	movs	r3, #23
   1aba8:	18fb      	adds	r3, r7, r3
   1abaa:	6a3a      	ldr	r2, [r7, #32]
   1abac:	2145      	movs	r1, #69	; 0x45
   1abae:	5c52      	ldrb	r2, [r2, r1]
   1abb0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1abb2:	6a3b      	ldr	r3, [r7, #32]
   1abb4:	0018      	movs	r0, r3
   1abb6:	4b5d      	ldr	r3, [pc, #372]	; (1ad2c <MyWrapper+0x1e4>)
   1abb8:	4798      	blx	r3
   1abba:	0003      	movs	r3, r0
   1abbc:	001a      	movs	r2, r3
   1abbe:	4b5c      	ldr	r3, [pc, #368]	; (1ad30 <MyWrapper+0x1e8>)
   1abc0:	881b      	ldrh	r3, [r3, #0]
   1abc2:	4013      	ands	r3, r2
   1abc4:	b29b      	uxth	r3, r3
   1abc6:	2b00      	cmp	r3, #0
   1abc8:	d022      	beq.n	1ac10 <MyWrapper+0xc8>
   1abca:	687b      	ldr	r3, [r7, #4]
   1abcc:	2b00      	cmp	r3, #0
   1abce:	d10b      	bne.n	1abe8 <MyWrapper+0xa0>
   1abd0:	6a3b      	ldr	r3, [r7, #32]
   1abd2:	0018      	movs	r0, r3
   1abd4:	4b57      	ldr	r3, [pc, #348]	; (1ad34 <MyWrapper+0x1ec>)
   1abd6:	4798      	blx	r3
   1abd8:	0003      	movs	r3, r0
   1abda:	001a      	movs	r2, r3
   1abdc:	4b56      	ldr	r3, [pc, #344]	; (1ad38 <MyWrapper+0x1f0>)
   1abde:	5c9b      	ldrb	r3, [r3, r2]
   1abe0:	3330      	adds	r3, #48	; 0x30
   1abe2:	b2db      	uxtb	r3, r3
   1abe4:	001d      	movs	r5, r3
   1abe6:	e000      	b.n	1abea <MyWrapper+0xa2>
   1abe8:	2535      	movs	r5, #53	; 0x35
   1abea:	6a3b      	ldr	r3, [r7, #32]
   1abec:	0018      	movs	r0, r3
   1abee:	4b51      	ldr	r3, [pc, #324]	; (1ad34 <MyWrapper+0x1ec>)
   1abf0:	4798      	blx	r3
   1abf2:	0003      	movs	r3, r0
   1abf4:	001a      	movs	r2, r3
   1abf6:	4b50      	ldr	r3, [pc, #320]	; (1ad38 <MyWrapper+0x1f0>)
   1abf8:	5c9c      	ldrb	r4, [r3, r2]
   1abfa:	6a3b      	ldr	r3, [r7, #32]
   1abfc:	0018      	movs	r0, r3
   1abfe:	4b4f      	ldr	r3, [pc, #316]	; (1ad3c <MyWrapper+0x1f4>)
   1ac00:	4798      	blx	r3
   1ac02:	0003      	movs	r3, r0
   1ac04:	b2db      	uxtb	r3, r3
   1ac06:	001a      	movs	r2, r3
   1ac08:	0021      	movs	r1, r4
   1ac0a:	0028      	movs	r0, r5
   1ac0c:	4b4c      	ldr	r3, [pc, #304]	; (1ad40 <MyWrapper+0x1f8>)
   1ac0e:	4798      	blx	r3
   1ac10:	6a3b      	ldr	r3, [r7, #32]
   1ac12:	0018      	movs	r0, r3
   1ac14:	4b47      	ldr	r3, [pc, #284]	; (1ad34 <MyWrapper+0x1ec>)
   1ac16:	4798      	blx	r3
   1ac18:	0003      	movs	r3, r0
   1ac1a:	001a      	movs	r2, r3
   1ac1c:	4b46      	ldr	r3, [pc, #280]	; (1ad38 <MyWrapper+0x1f0>)
   1ac1e:	5c9c      	ldrb	r4, [r3, r2]
   1ac20:	6a3b      	ldr	r3, [r7, #32]
   1ac22:	0018      	movs	r0, r3
   1ac24:	4b45      	ldr	r3, [pc, #276]	; (1ad3c <MyWrapper+0x1f4>)
   1ac26:	4798      	blx	r3
   1ac28:	0003      	movs	r3, r0
   1ac2a:	b2d9      	uxtb	r1, r3
   1ac2c:	6a3b      	ldr	r3, [r7, #32]
   1ac2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ac30:	b2db      	uxtb	r3, r3
   1ac32:	3301      	adds	r3, #1
   1ac34:	b2db      	uxtb	r3, r3
   1ac36:	001a      	movs	r2, r3
   1ac38:	0020      	movs	r0, r4
   1ac3a:	4b42      	ldr	r3, [pc, #264]	; (1ad44 <MyWrapper+0x1fc>)
   1ac3c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1ac3e:	69bb      	ldr	r3, [r7, #24]
   1ac40:	1c5a      	adds	r2, r3, #1
   1ac42:	6a3b      	ldr	r3, [r7, #32]
   1ac44:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1ac46:	2317      	movs	r3, #23
   1ac48:	18fb      	adds	r3, r7, r3
   1ac4a:	781b      	ldrb	r3, [r3, #0]
   1ac4c:	b25b      	sxtb	r3, r3
   1ac4e:	3301      	adds	r3, #1
   1ac50:	d123      	bne.n	1ac9a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ac52:	6a3b      	ldr	r3, [r7, #32]
   1ac54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ac56:	2b00      	cmp	r3, #0
   1ac58:	d00d      	beq.n	1ac76 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1ac5a:	6a3b      	ldr	r3, [r7, #32]
   1ac5c:	2100      	movs	r1, #0
   1ac5e:	0018      	movs	r0, r3
   1ac60:	4b39      	ldr	r3, [pc, #228]	; (1ad48 <MyWrapper+0x200>)
   1ac62:	4798      	blx	r3
   1ac64:	1e03      	subs	r3, r0, #0
   1ac66:	d021      	beq.n	1acac <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1ac68:	68bb      	ldr	r3, [r7, #8]
   1ac6a:	2b00      	cmp	r3, #0
   1ac6c:	d01e      	beq.n	1acac <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1ac6e:	68bb      	ldr	r3, [r7, #8]
   1ac70:	2201      	movs	r2, #1
   1ac72:	601a      	str	r2, [r3, #0]
   1ac74:	e01a      	b.n	1acac <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1ac76:	6a3b      	ldr	r3, [r7, #32]
   1ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ac7a:	2b00      	cmp	r3, #0
   1ac7c:	d016      	beq.n	1acac <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1ac7e:	6a3b      	ldr	r3, [r7, #32]
   1ac80:	3324      	adds	r3, #36	; 0x24
   1ac82:	0018      	movs	r0, r3
   1ac84:	4b31      	ldr	r3, [pc, #196]	; (1ad4c <MyWrapper+0x204>)
   1ac86:	4798      	blx	r3
   1ac88:	1e03      	subs	r3, r0, #0
   1ac8a:	d00f      	beq.n	1acac <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1ac8c:	68bb      	ldr	r3, [r7, #8]
   1ac8e:	2b00      	cmp	r3, #0
   1ac90:	d00c      	beq.n	1acac <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1ac92:	68bb      	ldr	r3, [r7, #8]
   1ac94:	2201      	movs	r2, #1
   1ac96:	601a      	str	r2, [r3, #0]
   1ac98:	e008      	b.n	1acac <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ac9a:	2317      	movs	r3, #23
   1ac9c:	18fb      	adds	r3, r7, r3
   1ac9e:	781b      	ldrb	r3, [r3, #0]
   1aca0:	3301      	adds	r3, #1
   1aca2:	b2db      	uxtb	r3, r3
   1aca4:	b259      	sxtb	r1, r3
   1aca6:	6a3b      	ldr	r3, [r7, #32]
   1aca8:	2245      	movs	r2, #69	; 0x45
   1acaa:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1acac:	2301      	movs	r3, #1
   1acae:	627b      	str	r3, [r7, #36]	; 0x24
   1acb0:	e030      	b.n	1ad14 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1acb2:	6a3b      	ldr	r3, [r7, #32]
   1acb4:	0018      	movs	r0, r3
   1acb6:	4b1d      	ldr	r3, [pc, #116]	; (1ad2c <MyWrapper+0x1e4>)
   1acb8:	4798      	blx	r3
   1acba:	0003      	movs	r3, r0
   1acbc:	001a      	movs	r2, r3
   1acbe:	4b1c      	ldr	r3, [pc, #112]	; (1ad30 <MyWrapper+0x1e8>)
   1acc0:	881b      	ldrh	r3, [r3, #0]
   1acc2:	4013      	ands	r3, r2
   1acc4:	b29b      	uxth	r3, r3
   1acc6:	2b00      	cmp	r3, #0
   1acc8:	d022      	beq.n	1ad10 <MyWrapper+0x1c8>
   1acca:	687b      	ldr	r3, [r7, #4]
   1accc:	2b00      	cmp	r3, #0
   1acce:	d10b      	bne.n	1ace8 <MyWrapper+0x1a0>
   1acd0:	6a3b      	ldr	r3, [r7, #32]
   1acd2:	0018      	movs	r0, r3
   1acd4:	4b17      	ldr	r3, [pc, #92]	; (1ad34 <MyWrapper+0x1ec>)
   1acd6:	4798      	blx	r3
   1acd8:	0003      	movs	r3, r0
   1acda:	001a      	movs	r2, r3
   1acdc:	4b16      	ldr	r3, [pc, #88]	; (1ad38 <MyWrapper+0x1f0>)
   1acde:	5c9b      	ldrb	r3, [r3, r2]
   1ace0:	3358      	adds	r3, #88	; 0x58
   1ace2:	b2db      	uxtb	r3, r3
   1ace4:	001d      	movs	r5, r3
   1ace6:	e000      	b.n	1acea <MyWrapper+0x1a2>
   1ace8:	255d      	movs	r5, #93	; 0x5d
   1acea:	6a3b      	ldr	r3, [r7, #32]
   1acec:	0018      	movs	r0, r3
   1acee:	4b11      	ldr	r3, [pc, #68]	; (1ad34 <MyWrapper+0x1ec>)
   1acf0:	4798      	blx	r3
   1acf2:	0003      	movs	r3, r0
   1acf4:	001a      	movs	r2, r3
   1acf6:	4b10      	ldr	r3, [pc, #64]	; (1ad38 <MyWrapper+0x1f0>)
   1acf8:	5c9c      	ldrb	r4, [r3, r2]
   1acfa:	6a3b      	ldr	r3, [r7, #32]
   1acfc:	0018      	movs	r0, r3
   1acfe:	4b0f      	ldr	r3, [pc, #60]	; (1ad3c <MyWrapper+0x1f4>)
   1ad00:	4798      	blx	r3
   1ad02:	0003      	movs	r3, r0
   1ad04:	b2db      	uxtb	r3, r3
   1ad06:	001a      	movs	r2, r3
   1ad08:	0021      	movs	r1, r4
   1ad0a:	0028      	movs	r0, r5
   1ad0c:	4b0c      	ldr	r3, [pc, #48]	; (1ad40 <MyWrapper+0x1f8>)
   1ad0e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1ad10:	2300      	movs	r3, #0
   1ad12:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1ad14:	69fb      	ldr	r3, [r7, #28]
   1ad16:	0018      	movs	r0, r3
   1ad18:	4b0d      	ldr	r3, [pc, #52]	; (1ad50 <MyWrapper+0x208>)
   1ad1a:	4798      	blx	r3

	return xReturn;
   1ad1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1ad1e:	0018      	movs	r0, r3
   1ad20:	46bd      	mov	sp, r7
   1ad22:	b00a      	add	sp, #40	; 0x28
   1ad24:	bdb0      	pop	{r4, r5, r7, pc}
   1ad26:	46c0      	nop			; (mov r8, r8)
   1ad28:	00019f5d 	.word	0x00019f5d
   1ad2c:	00017fc1 	.word	0x00017fc1
   1ad30:	200000b8 	.word	0x200000b8
   1ad34:	00017ec1 	.word	0x00017ec1
   1ad38:	200000ac 	.word	0x200000ac
   1ad3c:	00017fa1 	.word	0x00017fa1
   1ad40:	000188f9 	.word	0x000188f9
   1ad44:	00018f55 	.word	0x00018f55
   1ad48:	0001b9d9 	.word	0x0001b9d9
   1ad4c:	0001c799 	.word	0x0001c799
   1ad50:	00019f69 	.word	0x00019f69

0001ad54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1ad54:	b5b0      	push	{r4, r5, r7, lr}
   1ad56:	b08a      	sub	sp, #40	; 0x28
   1ad58:	af00      	add	r7, sp, #0
   1ad5a:	60f8      	str	r0, [r7, #12]
   1ad5c:	60b9      	str	r1, [r7, #8]
   1ad5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1ad60:	2300      	movs	r3, #0
   1ad62:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ad64:	68fb      	ldr	r3, [r7, #12]
   1ad66:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1ad68:	6a3b      	ldr	r3, [r7, #32]
   1ad6a:	2b00      	cmp	r3, #0
   1ad6c:	d101      	bne.n	1ad72 <xQueueReceive+0x1e>
   1ad6e:	b672      	cpsid	i
   1ad70:	e7fe      	b.n	1ad70 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ad72:	68bb      	ldr	r3, [r7, #8]
   1ad74:	2b00      	cmp	r3, #0
   1ad76:	d103      	bne.n	1ad80 <xQueueReceive+0x2c>
   1ad78:	6a3b      	ldr	r3, [r7, #32]
   1ad7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad7c:	2b00      	cmp	r3, #0
   1ad7e:	d101      	bne.n	1ad84 <xQueueReceive+0x30>
   1ad80:	2301      	movs	r3, #1
   1ad82:	e000      	b.n	1ad86 <xQueueReceive+0x32>
   1ad84:	2300      	movs	r3, #0
   1ad86:	2b00      	cmp	r3, #0
   1ad88:	d101      	bne.n	1ad8e <xQueueReceive+0x3a>
   1ad8a:	b672      	cpsid	i
   1ad8c:	e7fe      	b.n	1ad8c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ad8e:	4bbf      	ldr	r3, [pc, #764]	; (1b08c <xQueueReceive+0x338>)
   1ad90:	4798      	blx	r3
   1ad92:	1e03      	subs	r3, r0, #0
   1ad94:	d102      	bne.n	1ad9c <xQueueReceive+0x48>
   1ad96:	687b      	ldr	r3, [r7, #4]
   1ad98:	2b00      	cmp	r3, #0
   1ad9a:	d101      	bne.n	1ada0 <xQueueReceive+0x4c>
   1ad9c:	2301      	movs	r3, #1
   1ad9e:	e000      	b.n	1ada2 <xQueueReceive+0x4e>
   1ada0:	2300      	movs	r3, #0
   1ada2:	2b00      	cmp	r3, #0
   1ada4:	d101      	bne.n	1adaa <xQueueReceive+0x56>
   1ada6:	b672      	cpsid	i
   1ada8:	e7fe      	b.n	1ada8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1adaa:	4bb9      	ldr	r3, [pc, #740]	; (1b090 <xQueueReceive+0x33c>)
   1adac:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1adae:	6a3b      	ldr	r3, [r7, #32]
   1adb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1adb2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1adb4:	69fb      	ldr	r3, [r7, #28]
   1adb6:	2b00      	cmp	r3, #0
   1adb8:	d100      	bne.n	1adbc <xQueueReceive+0x68>
   1adba:	e07d      	b.n	1aeb8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1adbc:	68ba      	ldr	r2, [r7, #8]
   1adbe:	6a3b      	ldr	r3, [r7, #32]
   1adc0:	0011      	movs	r1, r2
   1adc2:	0018      	movs	r0, r3
   1adc4:	4bb3      	ldr	r3, [pc, #716]	; (1b094 <xQueueReceive+0x340>)
   1adc6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1adc8:	4bb3      	ldr	r3, [pc, #716]	; (1b098 <xQueueReceive+0x344>)
   1adca:	4798      	blx	r3
   1adcc:	0003      	movs	r3, r0
   1adce:	0018      	movs	r0, r3
   1add0:	4bb2      	ldr	r3, [pc, #712]	; (1b09c <xQueueReceive+0x348>)
   1add2:	4798      	blx	r3
   1add4:	0003      	movs	r3, r0
   1add6:	001a      	movs	r2, r3
   1add8:	4bb1      	ldr	r3, [pc, #708]	; (1b0a0 <xQueueReceive+0x34c>)
   1adda:	881b      	ldrh	r3, [r3, #0]
   1addc:	4013      	ands	r3, r2
   1adde:	b29b      	uxth	r3, r3
   1ade0:	2b00      	cmp	r3, #0
   1ade2:	d029      	beq.n	1ae38 <xQueueReceive+0xe4>
   1ade4:	6a3b      	ldr	r3, [r7, #32]
   1ade6:	0018      	movs	r0, r3
   1ade8:	4bae      	ldr	r3, [pc, #696]	; (1b0a4 <xQueueReceive+0x350>)
   1adea:	4798      	blx	r3
   1adec:	0003      	movs	r3, r0
   1adee:	001a      	movs	r2, r3
   1adf0:	4bab      	ldr	r3, [pc, #684]	; (1b0a0 <xQueueReceive+0x34c>)
   1adf2:	881b      	ldrh	r3, [r3, #0]
   1adf4:	4013      	ands	r3, r2
   1adf6:	b29b      	uxth	r3, r3
   1adf8:	2b00      	cmp	r3, #0
   1adfa:	d01d      	beq.n	1ae38 <xQueueReceive+0xe4>
   1adfc:	6a3b      	ldr	r3, [r7, #32]
   1adfe:	0018      	movs	r0, r3
   1ae00:	4ba9      	ldr	r3, [pc, #676]	; (1b0a8 <xQueueReceive+0x354>)
   1ae02:	4798      	blx	r3
   1ae04:	0003      	movs	r3, r0
   1ae06:	001a      	movs	r2, r3
   1ae08:	4ba8      	ldr	r3, [pc, #672]	; (1b0ac <xQueueReceive+0x358>)
   1ae0a:	5c9b      	ldrb	r3, [r3, r2]
   1ae0c:	3328      	adds	r3, #40	; 0x28
   1ae0e:	b2db      	uxtb	r3, r3
   1ae10:	001d      	movs	r5, r3
   1ae12:	6a3b      	ldr	r3, [r7, #32]
   1ae14:	0018      	movs	r0, r3
   1ae16:	4ba4      	ldr	r3, [pc, #656]	; (1b0a8 <xQueueReceive+0x354>)
   1ae18:	4798      	blx	r3
   1ae1a:	0003      	movs	r3, r0
   1ae1c:	001a      	movs	r2, r3
   1ae1e:	4ba3      	ldr	r3, [pc, #652]	; (1b0ac <xQueueReceive+0x358>)
   1ae20:	5c9c      	ldrb	r4, [r3, r2]
   1ae22:	6a3b      	ldr	r3, [r7, #32]
   1ae24:	0018      	movs	r0, r3
   1ae26:	4ba2      	ldr	r3, [pc, #648]	; (1b0b0 <xQueueReceive+0x35c>)
   1ae28:	4798      	blx	r3
   1ae2a:	0003      	movs	r3, r0
   1ae2c:	b2db      	uxtb	r3, r3
   1ae2e:	001a      	movs	r2, r3
   1ae30:	0021      	movs	r1, r4
   1ae32:	0028      	movs	r0, r5
   1ae34:	4b9f      	ldr	r3, [pc, #636]	; (1b0b4 <xQueueReceive+0x360>)
   1ae36:	4798      	blx	r3
   1ae38:	6a3b      	ldr	r3, [r7, #32]
   1ae3a:	0018      	movs	r0, r3
   1ae3c:	4b9a      	ldr	r3, [pc, #616]	; (1b0a8 <xQueueReceive+0x354>)
   1ae3e:	4798      	blx	r3
   1ae40:	0003      	movs	r3, r0
   1ae42:	001a      	movs	r2, r3
   1ae44:	4b99      	ldr	r3, [pc, #612]	; (1b0ac <xQueueReceive+0x358>)
   1ae46:	5c9c      	ldrb	r4, [r3, r2]
   1ae48:	6a3b      	ldr	r3, [r7, #32]
   1ae4a:	0018      	movs	r0, r3
   1ae4c:	4b98      	ldr	r3, [pc, #608]	; (1b0b0 <xQueueReceive+0x35c>)
   1ae4e:	4798      	blx	r3
   1ae50:	0003      	movs	r3, r0
   1ae52:	b2dd      	uxtb	r5, r3
   1ae54:	6a3b      	ldr	r3, [r7, #32]
   1ae56:	0018      	movs	r0, r3
   1ae58:	4b93      	ldr	r3, [pc, #588]	; (1b0a8 <xQueueReceive+0x354>)
   1ae5a:	4798      	blx	r3
   1ae5c:	0003      	movs	r3, r0
   1ae5e:	001a      	movs	r2, r3
   1ae60:	4b92      	ldr	r3, [pc, #584]	; (1b0ac <xQueueReceive+0x358>)
   1ae62:	5c9b      	ldrb	r3, [r3, r2]
   1ae64:	2b02      	cmp	r3, #2
   1ae66:	d108      	bne.n	1ae7a <xQueueReceive+0x126>
   1ae68:	4b8b      	ldr	r3, [pc, #556]	; (1b098 <xQueueReceive+0x344>)
   1ae6a:	4798      	blx	r3
   1ae6c:	0003      	movs	r3, r0
   1ae6e:	0018      	movs	r0, r3
   1ae70:	4b91      	ldr	r3, [pc, #580]	; (1b0b8 <xQueueReceive+0x364>)
   1ae72:	4798      	blx	r3
   1ae74:	0003      	movs	r3, r0
   1ae76:	b2db      	uxtb	r3, r3
   1ae78:	e004      	b.n	1ae84 <xQueueReceive+0x130>
   1ae7a:	6a3b      	ldr	r3, [r7, #32]
   1ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ae7e:	b2db      	uxtb	r3, r3
   1ae80:	3b01      	subs	r3, #1
   1ae82:	b2db      	uxtb	r3, r3
   1ae84:	001a      	movs	r2, r3
   1ae86:	0029      	movs	r1, r5
   1ae88:	0020      	movs	r0, r4
   1ae8a:	4b8c      	ldr	r3, [pc, #560]	; (1b0bc <xQueueReceive+0x368>)
   1ae8c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1ae8e:	69fb      	ldr	r3, [r7, #28]
   1ae90:	1e5a      	subs	r2, r3, #1
   1ae92:	6a3b      	ldr	r3, [r7, #32]
   1ae94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1ae96:	6a3b      	ldr	r3, [r7, #32]
   1ae98:	691b      	ldr	r3, [r3, #16]
   1ae9a:	2b00      	cmp	r3, #0
   1ae9c:	d008      	beq.n	1aeb0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1ae9e:	6a3b      	ldr	r3, [r7, #32]
   1aea0:	3310      	adds	r3, #16
   1aea2:	0018      	movs	r0, r3
   1aea4:	4b86      	ldr	r3, [pc, #536]	; (1b0c0 <xQueueReceive+0x36c>)
   1aea6:	4798      	blx	r3
   1aea8:	1e03      	subs	r3, r0, #0
   1aeaa:	d001      	beq.n	1aeb0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1aeac:	4b85      	ldr	r3, [pc, #532]	; (1b0c4 <xQueueReceive+0x370>)
   1aeae:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1aeb0:	4b85      	ldr	r3, [pc, #532]	; (1b0c8 <xQueueReceive+0x374>)
   1aeb2:	4798      	blx	r3
				return pdPASS;
   1aeb4:	2301      	movs	r3, #1
   1aeb6:	e15f      	b.n	1b178 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1aeb8:	687b      	ldr	r3, [r7, #4]
   1aeba:	2b00      	cmp	r3, #0
   1aebc:	d13b      	bne.n	1af36 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1aebe:	4b82      	ldr	r3, [pc, #520]	; (1b0c8 <xQueueReceive+0x374>)
   1aec0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1aec2:	4b75      	ldr	r3, [pc, #468]	; (1b098 <xQueueReceive+0x344>)
   1aec4:	4798      	blx	r3
   1aec6:	0003      	movs	r3, r0
   1aec8:	0018      	movs	r0, r3
   1aeca:	4b74      	ldr	r3, [pc, #464]	; (1b09c <xQueueReceive+0x348>)
   1aecc:	4798      	blx	r3
   1aece:	0003      	movs	r3, r0
   1aed0:	001a      	movs	r2, r3
   1aed2:	4b73      	ldr	r3, [pc, #460]	; (1b0a0 <xQueueReceive+0x34c>)
   1aed4:	881b      	ldrh	r3, [r3, #0]
   1aed6:	4013      	ands	r3, r2
   1aed8:	b29b      	uxth	r3, r3
   1aeda:	2b00      	cmp	r3, #0
   1aedc:	d029      	beq.n	1af32 <xQueueReceive+0x1de>
   1aede:	6a3b      	ldr	r3, [r7, #32]
   1aee0:	0018      	movs	r0, r3
   1aee2:	4b70      	ldr	r3, [pc, #448]	; (1b0a4 <xQueueReceive+0x350>)
   1aee4:	4798      	blx	r3
   1aee6:	0003      	movs	r3, r0
   1aee8:	001a      	movs	r2, r3
   1aeea:	4b6d      	ldr	r3, [pc, #436]	; (1b0a0 <xQueueReceive+0x34c>)
   1aeec:	881b      	ldrh	r3, [r3, #0]
   1aeee:	4013      	ands	r3, r2
   1aef0:	b29b      	uxth	r3, r3
   1aef2:	2b00      	cmp	r3, #0
   1aef4:	d01d      	beq.n	1af32 <xQueueReceive+0x1de>
   1aef6:	6a3b      	ldr	r3, [r7, #32]
   1aef8:	0018      	movs	r0, r3
   1aefa:	4b6b      	ldr	r3, [pc, #428]	; (1b0a8 <xQueueReceive+0x354>)
   1aefc:	4798      	blx	r3
   1aefe:	0003      	movs	r3, r0
   1af00:	001a      	movs	r2, r3
   1af02:	4b6a      	ldr	r3, [pc, #424]	; (1b0ac <xQueueReceive+0x358>)
   1af04:	5c9b      	ldrb	r3, [r3, r2]
   1af06:	3350      	adds	r3, #80	; 0x50
   1af08:	b2db      	uxtb	r3, r3
   1af0a:	001d      	movs	r5, r3
   1af0c:	6a3b      	ldr	r3, [r7, #32]
   1af0e:	0018      	movs	r0, r3
   1af10:	4b65      	ldr	r3, [pc, #404]	; (1b0a8 <xQueueReceive+0x354>)
   1af12:	4798      	blx	r3
   1af14:	0003      	movs	r3, r0
   1af16:	001a      	movs	r2, r3
   1af18:	4b64      	ldr	r3, [pc, #400]	; (1b0ac <xQueueReceive+0x358>)
   1af1a:	5c9c      	ldrb	r4, [r3, r2]
   1af1c:	6a3b      	ldr	r3, [r7, #32]
   1af1e:	0018      	movs	r0, r3
   1af20:	4b63      	ldr	r3, [pc, #396]	; (1b0b0 <xQueueReceive+0x35c>)
   1af22:	4798      	blx	r3
   1af24:	0003      	movs	r3, r0
   1af26:	b2db      	uxtb	r3, r3
   1af28:	001a      	movs	r2, r3
   1af2a:	0021      	movs	r1, r4
   1af2c:	0028      	movs	r0, r5
   1af2e:	4b61      	ldr	r3, [pc, #388]	; (1b0b4 <xQueueReceive+0x360>)
   1af30:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1af32:	2300      	movs	r3, #0
   1af34:	e120      	b.n	1b178 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af38:	2b00      	cmp	r3, #0
   1af3a:	d106      	bne.n	1af4a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1af3c:	2314      	movs	r3, #20
   1af3e:	18fb      	adds	r3, r7, r3
   1af40:	0018      	movs	r0, r3
   1af42:	4b62      	ldr	r3, [pc, #392]	; (1b0cc <xQueueReceive+0x378>)
   1af44:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1af46:	2301      	movs	r3, #1
   1af48:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1af4a:	4b5f      	ldr	r3, [pc, #380]	; (1b0c8 <xQueueReceive+0x374>)
   1af4c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1af4e:	4b60      	ldr	r3, [pc, #384]	; (1b0d0 <xQueueReceive+0x37c>)
   1af50:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1af52:	4b4f      	ldr	r3, [pc, #316]	; (1b090 <xQueueReceive+0x33c>)
   1af54:	4798      	blx	r3
   1af56:	6a3b      	ldr	r3, [r7, #32]
   1af58:	2244      	movs	r2, #68	; 0x44
   1af5a:	5c9b      	ldrb	r3, [r3, r2]
   1af5c:	b25b      	sxtb	r3, r3
   1af5e:	3301      	adds	r3, #1
   1af60:	d103      	bne.n	1af6a <xQueueReceive+0x216>
   1af62:	6a3b      	ldr	r3, [r7, #32]
   1af64:	2244      	movs	r2, #68	; 0x44
   1af66:	2100      	movs	r1, #0
   1af68:	5499      	strb	r1, [r3, r2]
   1af6a:	6a3b      	ldr	r3, [r7, #32]
   1af6c:	2245      	movs	r2, #69	; 0x45
   1af6e:	5c9b      	ldrb	r3, [r3, r2]
   1af70:	b25b      	sxtb	r3, r3
   1af72:	3301      	adds	r3, #1
   1af74:	d103      	bne.n	1af7e <xQueueReceive+0x22a>
   1af76:	6a3b      	ldr	r3, [r7, #32]
   1af78:	2245      	movs	r2, #69	; 0x45
   1af7a:	2100      	movs	r1, #0
   1af7c:	5499      	strb	r1, [r3, r2]
   1af7e:	4b52      	ldr	r3, [pc, #328]	; (1b0c8 <xQueueReceive+0x374>)
   1af80:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1af82:	1d3a      	adds	r2, r7, #4
   1af84:	2314      	movs	r3, #20
   1af86:	18fb      	adds	r3, r7, r3
   1af88:	0011      	movs	r1, r2
   1af8a:	0018      	movs	r0, r3
   1af8c:	4b51      	ldr	r3, [pc, #324]	; (1b0d4 <xQueueReceive+0x380>)
   1af8e:	4798      	blx	r3
   1af90:	1e03      	subs	r3, r0, #0
   1af92:	d000      	beq.n	1af96 <xQueueReceive+0x242>
   1af94:	e0aa      	b.n	1b0ec <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1af96:	6a3b      	ldr	r3, [r7, #32]
   1af98:	0018      	movs	r0, r3
   1af9a:	4b4f      	ldr	r3, [pc, #316]	; (1b0d8 <xQueueReceive+0x384>)
   1af9c:	4798      	blx	r3
   1af9e:	1e03      	subs	r3, r0, #0
   1afa0:	d06d      	beq.n	1b07e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1afa2:	4b3d      	ldr	r3, [pc, #244]	; (1b098 <xQueueReceive+0x344>)
   1afa4:	4798      	blx	r3
   1afa6:	0003      	movs	r3, r0
   1afa8:	0018      	movs	r0, r3
   1afaa:	4b3c      	ldr	r3, [pc, #240]	; (1b09c <xQueueReceive+0x348>)
   1afac:	4798      	blx	r3
   1afae:	0003      	movs	r3, r0
   1afb0:	001a      	movs	r2, r3
   1afb2:	4b3b      	ldr	r3, [pc, #236]	; (1b0a0 <xQueueReceive+0x34c>)
   1afb4:	881b      	ldrh	r3, [r3, #0]
   1afb6:	4013      	ands	r3, r2
   1afb8:	b29b      	uxth	r3, r3
   1afba:	2b00      	cmp	r3, #0
   1afbc:	d029      	beq.n	1b012 <xQueueReceive+0x2be>
   1afbe:	6a3b      	ldr	r3, [r7, #32]
   1afc0:	0018      	movs	r0, r3
   1afc2:	4b38      	ldr	r3, [pc, #224]	; (1b0a4 <xQueueReceive+0x350>)
   1afc4:	4798      	blx	r3
   1afc6:	0003      	movs	r3, r0
   1afc8:	001a      	movs	r2, r3
   1afca:	4b35      	ldr	r3, [pc, #212]	; (1b0a0 <xQueueReceive+0x34c>)
   1afcc:	881b      	ldrh	r3, [r3, #0]
   1afce:	4013      	ands	r3, r2
   1afd0:	b29b      	uxth	r3, r3
   1afd2:	2b00      	cmp	r3, #0
   1afd4:	d01d      	beq.n	1b012 <xQueueReceive+0x2be>
   1afd6:	6a3b      	ldr	r3, [r7, #32]
   1afd8:	0018      	movs	r0, r3
   1afda:	4b33      	ldr	r3, [pc, #204]	; (1b0a8 <xQueueReceive+0x354>)
   1afdc:	4798      	blx	r3
   1afde:	0003      	movs	r3, r0
   1afe0:	001a      	movs	r2, r3
   1afe2:	4b32      	ldr	r3, [pc, #200]	; (1b0ac <xQueueReceive+0x358>)
   1afe4:	5c9b      	ldrb	r3, [r3, r2]
   1afe6:	3368      	adds	r3, #104	; 0x68
   1afe8:	b2db      	uxtb	r3, r3
   1afea:	001d      	movs	r5, r3
   1afec:	6a3b      	ldr	r3, [r7, #32]
   1afee:	0018      	movs	r0, r3
   1aff0:	4b2d      	ldr	r3, [pc, #180]	; (1b0a8 <xQueueReceive+0x354>)
   1aff2:	4798      	blx	r3
   1aff4:	0003      	movs	r3, r0
   1aff6:	001a      	movs	r2, r3
   1aff8:	4b2c      	ldr	r3, [pc, #176]	; (1b0ac <xQueueReceive+0x358>)
   1affa:	5c9c      	ldrb	r4, [r3, r2]
   1affc:	6a3b      	ldr	r3, [r7, #32]
   1affe:	0018      	movs	r0, r3
   1b000:	4b2b      	ldr	r3, [pc, #172]	; (1b0b0 <xQueueReceive+0x35c>)
   1b002:	4798      	blx	r3
   1b004:	0003      	movs	r3, r0
   1b006:	b2db      	uxtb	r3, r3
   1b008:	001a      	movs	r2, r3
   1b00a:	0021      	movs	r1, r4
   1b00c:	0028      	movs	r0, r5
   1b00e:	4b29      	ldr	r3, [pc, #164]	; (1b0b4 <xQueueReceive+0x360>)
   1b010:	4798      	blx	r3
   1b012:	6a3b      	ldr	r3, [r7, #32]
   1b014:	0018      	movs	r0, r3
   1b016:	4b24      	ldr	r3, [pc, #144]	; (1b0a8 <xQueueReceive+0x354>)
   1b018:	4798      	blx	r3
   1b01a:	0003      	movs	r3, r0
   1b01c:	001a      	movs	r2, r3
   1b01e:	4b23      	ldr	r3, [pc, #140]	; (1b0ac <xQueueReceive+0x358>)
   1b020:	5c9b      	ldrb	r3, [r3, r2]
   1b022:	2b02      	cmp	r3, #2
   1b024:	d018      	beq.n	1b058 <xQueueReceive+0x304>
   1b026:	4b1c      	ldr	r3, [pc, #112]	; (1b098 <xQueueReceive+0x344>)
   1b028:	4798      	blx	r3
   1b02a:	0003      	movs	r3, r0
   1b02c:	0018      	movs	r0, r3
   1b02e:	4b1b      	ldr	r3, [pc, #108]	; (1b09c <xQueueReceive+0x348>)
   1b030:	4798      	blx	r3
   1b032:	0003      	movs	r3, r0
   1b034:	001a      	movs	r2, r3
   1b036:	4b1a      	ldr	r3, [pc, #104]	; (1b0a0 <xQueueReceive+0x34c>)
   1b038:	881b      	ldrh	r3, [r3, #0]
   1b03a:	4013      	ands	r3, r2
   1b03c:	b29b      	uxth	r3, r3
   1b03e:	2b00      	cmp	r3, #0
   1b040:	d00a      	beq.n	1b058 <xQueueReceive+0x304>
   1b042:	4b15      	ldr	r3, [pc, #84]	; (1b098 <xQueueReceive+0x344>)
   1b044:	4798      	blx	r3
   1b046:	0003      	movs	r3, r0
   1b048:	0018      	movs	r0, r3
   1b04a:	4b1b      	ldr	r3, [pc, #108]	; (1b0b8 <xQueueReceive+0x364>)
   1b04c:	4798      	blx	r3
   1b04e:	0003      	movs	r3, r0
   1b050:	b2db      	uxtb	r3, r3
   1b052:	0018      	movs	r0, r3
   1b054:	4b21      	ldr	r3, [pc, #132]	; (1b0dc <xQueueReceive+0x388>)
   1b056:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b058:	6a3b      	ldr	r3, [r7, #32]
   1b05a:	3324      	adds	r3, #36	; 0x24
   1b05c:	687a      	ldr	r2, [r7, #4]
   1b05e:	0011      	movs	r1, r2
   1b060:	0018      	movs	r0, r3
   1b062:	4b1f      	ldr	r3, [pc, #124]	; (1b0e0 <xQueueReceive+0x38c>)
   1b064:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b066:	6a3b      	ldr	r3, [r7, #32]
   1b068:	0018      	movs	r0, r3
   1b06a:	4b1e      	ldr	r3, [pc, #120]	; (1b0e4 <xQueueReceive+0x390>)
   1b06c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b06e:	4b1e      	ldr	r3, [pc, #120]	; (1b0e8 <xQueueReceive+0x394>)
   1b070:	4798      	blx	r3
   1b072:	1e03      	subs	r3, r0, #0
   1b074:	d000      	beq.n	1b078 <xQueueReceive+0x324>
   1b076:	e698      	b.n	1adaa <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1b078:	4b12      	ldr	r3, [pc, #72]	; (1b0c4 <xQueueReceive+0x370>)
   1b07a:	4798      	blx	r3
   1b07c:	e695      	b.n	1adaa <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1b07e:	6a3b      	ldr	r3, [r7, #32]
   1b080:	0018      	movs	r0, r3
   1b082:	4b18      	ldr	r3, [pc, #96]	; (1b0e4 <xQueueReceive+0x390>)
   1b084:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b086:	4b18      	ldr	r3, [pc, #96]	; (1b0e8 <xQueueReceive+0x394>)
   1b088:	4798      	blx	r3
   1b08a:	e68e      	b.n	1adaa <xQueueReceive+0x56>
   1b08c:	0001cc29 	.word	0x0001cc29
   1b090:	00019f09 	.word	0x00019f09
   1b094:	0001b7b5 	.word	0x0001b7b5
   1b098:	0001819d 	.word	0x0001819d
   1b09c:	00017f01 	.word	0x00017f01
   1b0a0:	200000b8 	.word	0x200000b8
   1b0a4:	00017fc1 	.word	0x00017fc1
   1b0a8:	00017ec1 	.word	0x00017ec1
   1b0ac:	200000ac 	.word	0x200000ac
   1b0b0:	00017fa1 	.word	0x00017fa1
   1b0b4:	000188f9 	.word	0x000188f9
   1b0b8:	00017ee1 	.word	0x00017ee1
   1b0bc:	00018f55 	.word	0x00018f55
   1b0c0:	0001c799 	.word	0x0001c799
   1b0c4:	00019ef1 	.word	0x00019ef1
   1b0c8:	00019f2d 	.word	0x00019f2d
   1b0cc:	0001c8d9 	.word	0x0001c8d9
   1b0d0:	0001c1c1 	.word	0x0001c1c1
   1b0d4:	0001c901 	.word	0x0001c901
   1b0d8:	0001b8f5 	.word	0x0001b8f5
   1b0dc:	00019091 	.word	0x00019091
   1b0e0:	0001c675 	.word	0x0001c675
   1b0e4:	0001b805 	.word	0x0001b805
   1b0e8:	0001c1d9 	.word	0x0001c1d9
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1b0ec:	6a3b      	ldr	r3, [r7, #32]
   1b0ee:	0018      	movs	r0, r3
   1b0f0:	4b23      	ldr	r3, [pc, #140]	; (1b180 <xQueueReceive+0x42c>)
   1b0f2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b0f4:	4b23      	ldr	r3, [pc, #140]	; (1b184 <xQueueReceive+0x430>)
   1b0f6:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b0f8:	6a3b      	ldr	r3, [r7, #32]
   1b0fa:	0018      	movs	r0, r3
   1b0fc:	4b22      	ldr	r3, [pc, #136]	; (1b188 <xQueueReceive+0x434>)
   1b0fe:	4798      	blx	r3
   1b100:	1e03      	subs	r3, r0, #0
   1b102:	d100      	bne.n	1b106 <xQueueReceive+0x3b2>
   1b104:	e651      	b.n	1adaa <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b106:	4b21      	ldr	r3, [pc, #132]	; (1b18c <xQueueReceive+0x438>)
   1b108:	4798      	blx	r3
   1b10a:	0003      	movs	r3, r0
   1b10c:	0018      	movs	r0, r3
   1b10e:	4b20      	ldr	r3, [pc, #128]	; (1b190 <xQueueReceive+0x43c>)
   1b110:	4798      	blx	r3
   1b112:	0003      	movs	r3, r0
   1b114:	001a      	movs	r2, r3
   1b116:	4b1f      	ldr	r3, [pc, #124]	; (1b194 <xQueueReceive+0x440>)
   1b118:	881b      	ldrh	r3, [r3, #0]
   1b11a:	4013      	ands	r3, r2
   1b11c:	b29b      	uxth	r3, r3
   1b11e:	2b00      	cmp	r3, #0
   1b120:	d029      	beq.n	1b176 <xQueueReceive+0x422>
   1b122:	6a3b      	ldr	r3, [r7, #32]
   1b124:	0018      	movs	r0, r3
   1b126:	4b1c      	ldr	r3, [pc, #112]	; (1b198 <xQueueReceive+0x444>)
   1b128:	4798      	blx	r3
   1b12a:	0003      	movs	r3, r0
   1b12c:	001a      	movs	r2, r3
   1b12e:	4b19      	ldr	r3, [pc, #100]	; (1b194 <xQueueReceive+0x440>)
   1b130:	881b      	ldrh	r3, [r3, #0]
   1b132:	4013      	ands	r3, r2
   1b134:	b29b      	uxth	r3, r3
   1b136:	2b00      	cmp	r3, #0
   1b138:	d01d      	beq.n	1b176 <xQueueReceive+0x422>
   1b13a:	6a3b      	ldr	r3, [r7, #32]
   1b13c:	0018      	movs	r0, r3
   1b13e:	4b17      	ldr	r3, [pc, #92]	; (1b19c <xQueueReceive+0x448>)
   1b140:	4798      	blx	r3
   1b142:	0003      	movs	r3, r0
   1b144:	001a      	movs	r2, r3
   1b146:	4b16      	ldr	r3, [pc, #88]	; (1b1a0 <xQueueReceive+0x44c>)
   1b148:	5c9b      	ldrb	r3, [r3, r2]
   1b14a:	3350      	adds	r3, #80	; 0x50
   1b14c:	b2db      	uxtb	r3, r3
   1b14e:	001d      	movs	r5, r3
   1b150:	6a3b      	ldr	r3, [r7, #32]
   1b152:	0018      	movs	r0, r3
   1b154:	4b11      	ldr	r3, [pc, #68]	; (1b19c <xQueueReceive+0x448>)
   1b156:	4798      	blx	r3
   1b158:	0003      	movs	r3, r0
   1b15a:	001a      	movs	r2, r3
   1b15c:	4b10      	ldr	r3, [pc, #64]	; (1b1a0 <xQueueReceive+0x44c>)
   1b15e:	5c9c      	ldrb	r4, [r3, r2]
   1b160:	6a3b      	ldr	r3, [r7, #32]
   1b162:	0018      	movs	r0, r3
   1b164:	4b0f      	ldr	r3, [pc, #60]	; (1b1a4 <xQueueReceive+0x450>)
   1b166:	4798      	blx	r3
   1b168:	0003      	movs	r3, r0
   1b16a:	b2db      	uxtb	r3, r3
   1b16c:	001a      	movs	r2, r3
   1b16e:	0021      	movs	r1, r4
   1b170:	0028      	movs	r0, r5
   1b172:	4b0d      	ldr	r3, [pc, #52]	; (1b1a8 <xQueueReceive+0x454>)
   1b174:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b176:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b178:	0018      	movs	r0, r3
   1b17a:	46bd      	mov	sp, r7
   1b17c:	b00a      	add	sp, #40	; 0x28
   1b17e:	bdb0      	pop	{r4, r5, r7, pc}
   1b180:	0001b805 	.word	0x0001b805
   1b184:	0001c1d9 	.word	0x0001c1d9
   1b188:	0001b8f5 	.word	0x0001b8f5
   1b18c:	0001819d 	.word	0x0001819d
   1b190:	00017f01 	.word	0x00017f01
   1b194:	200000b8 	.word	0x200000b8
   1b198:	00017fc1 	.word	0x00017fc1
   1b19c:	00017ec1 	.word	0x00017ec1
   1b1a0:	200000ac 	.word	0x200000ac
   1b1a4:	00017fa1 	.word	0x00017fa1
   1b1a8:	000188f9 	.word	0x000188f9

0001b1ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1b1ac:	b5b0      	push	{r4, r5, r7, lr}
   1b1ae:	b08a      	sub	sp, #40	; 0x28
   1b1b0:	af00      	add	r7, sp, #0
   1b1b2:	6078      	str	r0, [r7, #4]
   1b1b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1b1b6:	2300      	movs	r3, #0
   1b1b8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b1ba:	687b      	ldr	r3, [r7, #4]
   1b1bc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1b1be:	2300      	movs	r3, #0
   1b1c0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b1c2:	69fb      	ldr	r3, [r7, #28]
   1b1c4:	2b00      	cmp	r3, #0
   1b1c6:	d101      	bne.n	1b1cc <xQueueSemaphoreTake+0x20>
   1b1c8:	b672      	cpsid	i
   1b1ca:	e7fe      	b.n	1b1ca <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b1cc:	69fb      	ldr	r3, [r7, #28]
   1b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b1d0:	2b00      	cmp	r3, #0
   1b1d2:	d001      	beq.n	1b1d8 <xQueueSemaphoreTake+0x2c>
   1b1d4:	b672      	cpsid	i
   1b1d6:	e7fe      	b.n	1b1d6 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b1d8:	4bcb      	ldr	r3, [pc, #812]	; (1b508 <xQueueSemaphoreTake+0x35c>)
   1b1da:	4798      	blx	r3
   1b1dc:	1e03      	subs	r3, r0, #0
   1b1de:	d102      	bne.n	1b1e6 <xQueueSemaphoreTake+0x3a>
   1b1e0:	683b      	ldr	r3, [r7, #0]
   1b1e2:	2b00      	cmp	r3, #0
   1b1e4:	d101      	bne.n	1b1ea <xQueueSemaphoreTake+0x3e>
   1b1e6:	2301      	movs	r3, #1
   1b1e8:	e000      	b.n	1b1ec <xQueueSemaphoreTake+0x40>
   1b1ea:	2300      	movs	r3, #0
   1b1ec:	2b00      	cmp	r3, #0
   1b1ee:	d101      	bne.n	1b1f4 <xQueueSemaphoreTake+0x48>
   1b1f0:	b672      	cpsid	i
   1b1f2:	e7fe      	b.n	1b1f2 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b1f4:	4bc5      	ldr	r3, [pc, #788]	; (1b50c <xQueueSemaphoreTake+0x360>)
   1b1f6:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1b1f8:	69fb      	ldr	r3, [r7, #28]
   1b1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b1fc:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1b1fe:	69bb      	ldr	r3, [r7, #24]
   1b200:	2b00      	cmp	r3, #0
   1b202:	d100      	bne.n	1b206 <xQueueSemaphoreTake+0x5a>
   1b204:	e080      	b.n	1b308 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1b206:	4bc2      	ldr	r3, [pc, #776]	; (1b510 <xQueueSemaphoreTake+0x364>)
   1b208:	4798      	blx	r3
   1b20a:	0003      	movs	r3, r0
   1b20c:	0018      	movs	r0, r3
   1b20e:	4bc1      	ldr	r3, [pc, #772]	; (1b514 <xQueueSemaphoreTake+0x368>)
   1b210:	4798      	blx	r3
   1b212:	0003      	movs	r3, r0
   1b214:	001a      	movs	r2, r3
   1b216:	4bc0      	ldr	r3, [pc, #768]	; (1b518 <xQueueSemaphoreTake+0x36c>)
   1b218:	881b      	ldrh	r3, [r3, #0]
   1b21a:	4013      	ands	r3, r2
   1b21c:	b29b      	uxth	r3, r3
   1b21e:	2b00      	cmp	r3, #0
   1b220:	d029      	beq.n	1b276 <xQueueSemaphoreTake+0xca>
   1b222:	69fb      	ldr	r3, [r7, #28]
   1b224:	0018      	movs	r0, r3
   1b226:	4bbd      	ldr	r3, [pc, #756]	; (1b51c <xQueueSemaphoreTake+0x370>)
   1b228:	4798      	blx	r3
   1b22a:	0003      	movs	r3, r0
   1b22c:	001a      	movs	r2, r3
   1b22e:	4bba      	ldr	r3, [pc, #744]	; (1b518 <xQueueSemaphoreTake+0x36c>)
   1b230:	881b      	ldrh	r3, [r3, #0]
   1b232:	4013      	ands	r3, r2
   1b234:	b29b      	uxth	r3, r3
   1b236:	2b00      	cmp	r3, #0
   1b238:	d01d      	beq.n	1b276 <xQueueSemaphoreTake+0xca>
   1b23a:	69fb      	ldr	r3, [r7, #28]
   1b23c:	0018      	movs	r0, r3
   1b23e:	4bb8      	ldr	r3, [pc, #736]	; (1b520 <xQueueSemaphoreTake+0x374>)
   1b240:	4798      	blx	r3
   1b242:	0003      	movs	r3, r0
   1b244:	001a      	movs	r2, r3
   1b246:	4bb7      	ldr	r3, [pc, #732]	; (1b524 <xQueueSemaphoreTake+0x378>)
   1b248:	5c9b      	ldrb	r3, [r3, r2]
   1b24a:	3328      	adds	r3, #40	; 0x28
   1b24c:	b2db      	uxtb	r3, r3
   1b24e:	001d      	movs	r5, r3
   1b250:	69fb      	ldr	r3, [r7, #28]
   1b252:	0018      	movs	r0, r3
   1b254:	4bb2      	ldr	r3, [pc, #712]	; (1b520 <xQueueSemaphoreTake+0x374>)
   1b256:	4798      	blx	r3
   1b258:	0003      	movs	r3, r0
   1b25a:	001a      	movs	r2, r3
   1b25c:	4bb1      	ldr	r3, [pc, #708]	; (1b524 <xQueueSemaphoreTake+0x378>)
   1b25e:	5c9c      	ldrb	r4, [r3, r2]
   1b260:	69fb      	ldr	r3, [r7, #28]
   1b262:	0018      	movs	r0, r3
   1b264:	4bb0      	ldr	r3, [pc, #704]	; (1b528 <xQueueSemaphoreTake+0x37c>)
   1b266:	4798      	blx	r3
   1b268:	0003      	movs	r3, r0
   1b26a:	b2db      	uxtb	r3, r3
   1b26c:	001a      	movs	r2, r3
   1b26e:	0021      	movs	r1, r4
   1b270:	0028      	movs	r0, r5
   1b272:	4bae      	ldr	r3, [pc, #696]	; (1b52c <xQueueSemaphoreTake+0x380>)
   1b274:	4798      	blx	r3
   1b276:	69fb      	ldr	r3, [r7, #28]
   1b278:	0018      	movs	r0, r3
   1b27a:	4ba9      	ldr	r3, [pc, #676]	; (1b520 <xQueueSemaphoreTake+0x374>)
   1b27c:	4798      	blx	r3
   1b27e:	0003      	movs	r3, r0
   1b280:	001a      	movs	r2, r3
   1b282:	4ba8      	ldr	r3, [pc, #672]	; (1b524 <xQueueSemaphoreTake+0x378>)
   1b284:	5c9c      	ldrb	r4, [r3, r2]
   1b286:	69fb      	ldr	r3, [r7, #28]
   1b288:	0018      	movs	r0, r3
   1b28a:	4ba7      	ldr	r3, [pc, #668]	; (1b528 <xQueueSemaphoreTake+0x37c>)
   1b28c:	4798      	blx	r3
   1b28e:	0003      	movs	r3, r0
   1b290:	b2dd      	uxtb	r5, r3
   1b292:	69fb      	ldr	r3, [r7, #28]
   1b294:	0018      	movs	r0, r3
   1b296:	4ba2      	ldr	r3, [pc, #648]	; (1b520 <xQueueSemaphoreTake+0x374>)
   1b298:	4798      	blx	r3
   1b29a:	0003      	movs	r3, r0
   1b29c:	001a      	movs	r2, r3
   1b29e:	4ba1      	ldr	r3, [pc, #644]	; (1b524 <xQueueSemaphoreTake+0x378>)
   1b2a0:	5c9b      	ldrb	r3, [r3, r2]
   1b2a2:	2b02      	cmp	r3, #2
   1b2a4:	d108      	bne.n	1b2b8 <xQueueSemaphoreTake+0x10c>
   1b2a6:	4b9a      	ldr	r3, [pc, #616]	; (1b510 <xQueueSemaphoreTake+0x364>)
   1b2a8:	4798      	blx	r3
   1b2aa:	0003      	movs	r3, r0
   1b2ac:	0018      	movs	r0, r3
   1b2ae:	4ba0      	ldr	r3, [pc, #640]	; (1b530 <xQueueSemaphoreTake+0x384>)
   1b2b0:	4798      	blx	r3
   1b2b2:	0003      	movs	r3, r0
   1b2b4:	b2db      	uxtb	r3, r3
   1b2b6:	e004      	b.n	1b2c2 <xQueueSemaphoreTake+0x116>
   1b2b8:	69fb      	ldr	r3, [r7, #28]
   1b2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b2bc:	b2db      	uxtb	r3, r3
   1b2be:	3b01      	subs	r3, #1
   1b2c0:	b2db      	uxtb	r3, r3
   1b2c2:	001a      	movs	r2, r3
   1b2c4:	0029      	movs	r1, r5
   1b2c6:	0020      	movs	r0, r4
   1b2c8:	4b9a      	ldr	r3, [pc, #616]	; (1b534 <xQueueSemaphoreTake+0x388>)
   1b2ca:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1b2cc:	69bb      	ldr	r3, [r7, #24]
   1b2ce:	1e5a      	subs	r2, r3, #1
   1b2d0:	69fb      	ldr	r3, [r7, #28]
   1b2d2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b2d4:	69fb      	ldr	r3, [r7, #28]
   1b2d6:	681b      	ldr	r3, [r3, #0]
   1b2d8:	2b00      	cmp	r3, #0
   1b2da:	d104      	bne.n	1b2e6 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1b2dc:	4b96      	ldr	r3, [pc, #600]	; (1b538 <xQueueSemaphoreTake+0x38c>)
   1b2de:	4798      	blx	r3
   1b2e0:	0002      	movs	r2, r0
   1b2e2:	69fb      	ldr	r3, [r7, #28]
   1b2e4:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b2e6:	69fb      	ldr	r3, [r7, #28]
   1b2e8:	691b      	ldr	r3, [r3, #16]
   1b2ea:	2b00      	cmp	r3, #0
   1b2ec:	d008      	beq.n	1b300 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b2ee:	69fb      	ldr	r3, [r7, #28]
   1b2f0:	3310      	adds	r3, #16
   1b2f2:	0018      	movs	r0, r3
   1b2f4:	4b91      	ldr	r3, [pc, #580]	; (1b53c <xQueueSemaphoreTake+0x390>)
   1b2f6:	4798      	blx	r3
   1b2f8:	1e03      	subs	r3, r0, #0
   1b2fa:	d001      	beq.n	1b300 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b2fc:	4b90      	ldr	r3, [pc, #576]	; (1b540 <xQueueSemaphoreTake+0x394>)
   1b2fe:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b300:	4b90      	ldr	r3, [pc, #576]	; (1b544 <xQueueSemaphoreTake+0x398>)
   1b302:	4798      	blx	r3
				return pdPASS;
   1b304:	2301      	movs	r3, #1
   1b306:	e18b      	b.n	1b620 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b308:	683b      	ldr	r3, [r7, #0]
   1b30a:	2b00      	cmp	r3, #0
   1b30c:	d140      	bne.n	1b390 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1b30e:	6a3b      	ldr	r3, [r7, #32]
   1b310:	2b00      	cmp	r3, #0
   1b312:	d001      	beq.n	1b318 <xQueueSemaphoreTake+0x16c>
   1b314:	b672      	cpsid	i
   1b316:	e7fe      	b.n	1b316 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1b318:	4b8a      	ldr	r3, [pc, #552]	; (1b544 <xQueueSemaphoreTake+0x398>)
   1b31a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b31c:	4b7c      	ldr	r3, [pc, #496]	; (1b510 <xQueueSemaphoreTake+0x364>)
   1b31e:	4798      	blx	r3
   1b320:	0003      	movs	r3, r0
   1b322:	0018      	movs	r0, r3
   1b324:	4b7b      	ldr	r3, [pc, #492]	; (1b514 <xQueueSemaphoreTake+0x368>)
   1b326:	4798      	blx	r3
   1b328:	0003      	movs	r3, r0
   1b32a:	001a      	movs	r2, r3
   1b32c:	4b7a      	ldr	r3, [pc, #488]	; (1b518 <xQueueSemaphoreTake+0x36c>)
   1b32e:	881b      	ldrh	r3, [r3, #0]
   1b330:	4013      	ands	r3, r2
   1b332:	b29b      	uxth	r3, r3
   1b334:	2b00      	cmp	r3, #0
   1b336:	d029      	beq.n	1b38c <xQueueSemaphoreTake+0x1e0>
   1b338:	69fb      	ldr	r3, [r7, #28]
   1b33a:	0018      	movs	r0, r3
   1b33c:	4b77      	ldr	r3, [pc, #476]	; (1b51c <xQueueSemaphoreTake+0x370>)
   1b33e:	4798      	blx	r3
   1b340:	0003      	movs	r3, r0
   1b342:	001a      	movs	r2, r3
   1b344:	4b74      	ldr	r3, [pc, #464]	; (1b518 <xQueueSemaphoreTake+0x36c>)
   1b346:	881b      	ldrh	r3, [r3, #0]
   1b348:	4013      	ands	r3, r2
   1b34a:	b29b      	uxth	r3, r3
   1b34c:	2b00      	cmp	r3, #0
   1b34e:	d01d      	beq.n	1b38c <xQueueSemaphoreTake+0x1e0>
   1b350:	69fb      	ldr	r3, [r7, #28]
   1b352:	0018      	movs	r0, r3
   1b354:	4b72      	ldr	r3, [pc, #456]	; (1b520 <xQueueSemaphoreTake+0x374>)
   1b356:	4798      	blx	r3
   1b358:	0003      	movs	r3, r0
   1b35a:	001a      	movs	r2, r3
   1b35c:	4b71      	ldr	r3, [pc, #452]	; (1b524 <xQueueSemaphoreTake+0x378>)
   1b35e:	5c9b      	ldrb	r3, [r3, r2]
   1b360:	3350      	adds	r3, #80	; 0x50
   1b362:	b2db      	uxtb	r3, r3
   1b364:	001d      	movs	r5, r3
   1b366:	69fb      	ldr	r3, [r7, #28]
   1b368:	0018      	movs	r0, r3
   1b36a:	4b6d      	ldr	r3, [pc, #436]	; (1b520 <xQueueSemaphoreTake+0x374>)
   1b36c:	4798      	blx	r3
   1b36e:	0003      	movs	r3, r0
   1b370:	001a      	movs	r2, r3
   1b372:	4b6c      	ldr	r3, [pc, #432]	; (1b524 <xQueueSemaphoreTake+0x378>)
   1b374:	5c9c      	ldrb	r4, [r3, r2]
   1b376:	69fb      	ldr	r3, [r7, #28]
   1b378:	0018      	movs	r0, r3
   1b37a:	4b6b      	ldr	r3, [pc, #428]	; (1b528 <xQueueSemaphoreTake+0x37c>)
   1b37c:	4798      	blx	r3
   1b37e:	0003      	movs	r3, r0
   1b380:	b2db      	uxtb	r3, r3
   1b382:	001a      	movs	r2, r3
   1b384:	0021      	movs	r1, r4
   1b386:	0028      	movs	r0, r5
   1b388:	4b68      	ldr	r3, [pc, #416]	; (1b52c <xQueueSemaphoreTake+0x380>)
   1b38a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b38c:	2300      	movs	r3, #0
   1b38e:	e147      	b.n	1b620 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b392:	2b00      	cmp	r3, #0
   1b394:	d106      	bne.n	1b3a4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b396:	230c      	movs	r3, #12
   1b398:	18fb      	adds	r3, r7, r3
   1b39a:	0018      	movs	r0, r3
   1b39c:	4b6a      	ldr	r3, [pc, #424]	; (1b548 <xQueueSemaphoreTake+0x39c>)
   1b39e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b3a0:	2301      	movs	r3, #1
   1b3a2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b3a4:	4b67      	ldr	r3, [pc, #412]	; (1b544 <xQueueSemaphoreTake+0x398>)
   1b3a6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b3a8:	4b68      	ldr	r3, [pc, #416]	; (1b54c <xQueueSemaphoreTake+0x3a0>)
   1b3aa:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b3ac:	4b57      	ldr	r3, [pc, #348]	; (1b50c <xQueueSemaphoreTake+0x360>)
   1b3ae:	4798      	blx	r3
   1b3b0:	69fb      	ldr	r3, [r7, #28]
   1b3b2:	2244      	movs	r2, #68	; 0x44
   1b3b4:	5c9b      	ldrb	r3, [r3, r2]
   1b3b6:	b25b      	sxtb	r3, r3
   1b3b8:	3301      	adds	r3, #1
   1b3ba:	d103      	bne.n	1b3c4 <xQueueSemaphoreTake+0x218>
   1b3bc:	69fb      	ldr	r3, [r7, #28]
   1b3be:	2244      	movs	r2, #68	; 0x44
   1b3c0:	2100      	movs	r1, #0
   1b3c2:	5499      	strb	r1, [r3, r2]
   1b3c4:	69fb      	ldr	r3, [r7, #28]
   1b3c6:	2245      	movs	r2, #69	; 0x45
   1b3c8:	5c9b      	ldrb	r3, [r3, r2]
   1b3ca:	b25b      	sxtb	r3, r3
   1b3cc:	3301      	adds	r3, #1
   1b3ce:	d103      	bne.n	1b3d8 <xQueueSemaphoreTake+0x22c>
   1b3d0:	69fb      	ldr	r3, [r7, #28]
   1b3d2:	2245      	movs	r2, #69	; 0x45
   1b3d4:	2100      	movs	r1, #0
   1b3d6:	5499      	strb	r1, [r3, r2]
   1b3d8:	4b5a      	ldr	r3, [pc, #360]	; (1b544 <xQueueSemaphoreTake+0x398>)
   1b3da:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b3dc:	003a      	movs	r2, r7
   1b3de:	230c      	movs	r3, #12
   1b3e0:	18fb      	adds	r3, r7, r3
   1b3e2:	0011      	movs	r1, r2
   1b3e4:	0018      	movs	r0, r3
   1b3e6:	4b5a      	ldr	r3, [pc, #360]	; (1b550 <xQueueSemaphoreTake+0x3a4>)
   1b3e8:	4798      	blx	r3
   1b3ea:	1e03      	subs	r3, r0, #0
   1b3ec:	d000      	beq.n	1b3f0 <xQueueSemaphoreTake+0x244>
   1b3ee:	e0bd      	b.n	1b56c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b3f0:	69fb      	ldr	r3, [r7, #28]
   1b3f2:	0018      	movs	r0, r3
   1b3f4:	4b57      	ldr	r3, [pc, #348]	; (1b554 <xQueueSemaphoreTake+0x3a8>)
   1b3f6:	4798      	blx	r3
   1b3f8:	1e03      	subs	r3, r0, #0
   1b3fa:	d100      	bne.n	1b3fe <xQueueSemaphoreTake+0x252>
   1b3fc:	e07c      	b.n	1b4f8 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b3fe:	4b44      	ldr	r3, [pc, #272]	; (1b510 <xQueueSemaphoreTake+0x364>)
   1b400:	4798      	blx	r3
   1b402:	0003      	movs	r3, r0
   1b404:	0018      	movs	r0, r3
   1b406:	4b43      	ldr	r3, [pc, #268]	; (1b514 <xQueueSemaphoreTake+0x368>)
   1b408:	4798      	blx	r3
   1b40a:	0003      	movs	r3, r0
   1b40c:	001a      	movs	r2, r3
   1b40e:	4b42      	ldr	r3, [pc, #264]	; (1b518 <xQueueSemaphoreTake+0x36c>)
   1b410:	881b      	ldrh	r3, [r3, #0]
   1b412:	4013      	ands	r3, r2
   1b414:	b29b      	uxth	r3, r3
   1b416:	2b00      	cmp	r3, #0
   1b418:	d029      	beq.n	1b46e <xQueueSemaphoreTake+0x2c2>
   1b41a:	69fb      	ldr	r3, [r7, #28]
   1b41c:	0018      	movs	r0, r3
   1b41e:	4b3f      	ldr	r3, [pc, #252]	; (1b51c <xQueueSemaphoreTake+0x370>)
   1b420:	4798      	blx	r3
   1b422:	0003      	movs	r3, r0
   1b424:	001a      	movs	r2, r3
   1b426:	4b3c      	ldr	r3, [pc, #240]	; (1b518 <xQueueSemaphoreTake+0x36c>)
   1b428:	881b      	ldrh	r3, [r3, #0]
   1b42a:	4013      	ands	r3, r2
   1b42c:	b29b      	uxth	r3, r3
   1b42e:	2b00      	cmp	r3, #0
   1b430:	d01d      	beq.n	1b46e <xQueueSemaphoreTake+0x2c2>
   1b432:	69fb      	ldr	r3, [r7, #28]
   1b434:	0018      	movs	r0, r3
   1b436:	4b3a      	ldr	r3, [pc, #232]	; (1b520 <xQueueSemaphoreTake+0x374>)
   1b438:	4798      	blx	r3
   1b43a:	0003      	movs	r3, r0
   1b43c:	001a      	movs	r2, r3
   1b43e:	4b39      	ldr	r3, [pc, #228]	; (1b524 <xQueueSemaphoreTake+0x378>)
   1b440:	5c9b      	ldrb	r3, [r3, r2]
   1b442:	3368      	adds	r3, #104	; 0x68
   1b444:	b2db      	uxtb	r3, r3
   1b446:	001d      	movs	r5, r3
   1b448:	69fb      	ldr	r3, [r7, #28]
   1b44a:	0018      	movs	r0, r3
   1b44c:	4b34      	ldr	r3, [pc, #208]	; (1b520 <xQueueSemaphoreTake+0x374>)
   1b44e:	4798      	blx	r3
   1b450:	0003      	movs	r3, r0
   1b452:	001a      	movs	r2, r3
   1b454:	4b33      	ldr	r3, [pc, #204]	; (1b524 <xQueueSemaphoreTake+0x378>)
   1b456:	5c9c      	ldrb	r4, [r3, r2]
   1b458:	69fb      	ldr	r3, [r7, #28]
   1b45a:	0018      	movs	r0, r3
   1b45c:	4b32      	ldr	r3, [pc, #200]	; (1b528 <xQueueSemaphoreTake+0x37c>)
   1b45e:	4798      	blx	r3
   1b460:	0003      	movs	r3, r0
   1b462:	b2db      	uxtb	r3, r3
   1b464:	001a      	movs	r2, r3
   1b466:	0021      	movs	r1, r4
   1b468:	0028      	movs	r0, r5
   1b46a:	4b30      	ldr	r3, [pc, #192]	; (1b52c <xQueueSemaphoreTake+0x380>)
   1b46c:	4798      	blx	r3
   1b46e:	69fb      	ldr	r3, [r7, #28]
   1b470:	0018      	movs	r0, r3
   1b472:	4b2b      	ldr	r3, [pc, #172]	; (1b520 <xQueueSemaphoreTake+0x374>)
   1b474:	4798      	blx	r3
   1b476:	0003      	movs	r3, r0
   1b478:	001a      	movs	r2, r3
   1b47a:	4b2a      	ldr	r3, [pc, #168]	; (1b524 <xQueueSemaphoreTake+0x378>)
   1b47c:	5c9b      	ldrb	r3, [r3, r2]
   1b47e:	2b02      	cmp	r3, #2
   1b480:	d018      	beq.n	1b4b4 <xQueueSemaphoreTake+0x308>
   1b482:	4b23      	ldr	r3, [pc, #140]	; (1b510 <xQueueSemaphoreTake+0x364>)
   1b484:	4798      	blx	r3
   1b486:	0003      	movs	r3, r0
   1b488:	0018      	movs	r0, r3
   1b48a:	4b22      	ldr	r3, [pc, #136]	; (1b514 <xQueueSemaphoreTake+0x368>)
   1b48c:	4798      	blx	r3
   1b48e:	0003      	movs	r3, r0
   1b490:	001a      	movs	r2, r3
   1b492:	4b21      	ldr	r3, [pc, #132]	; (1b518 <xQueueSemaphoreTake+0x36c>)
   1b494:	881b      	ldrh	r3, [r3, #0]
   1b496:	4013      	ands	r3, r2
   1b498:	b29b      	uxth	r3, r3
   1b49a:	2b00      	cmp	r3, #0
   1b49c:	d00a      	beq.n	1b4b4 <xQueueSemaphoreTake+0x308>
   1b49e:	4b1c      	ldr	r3, [pc, #112]	; (1b510 <xQueueSemaphoreTake+0x364>)
   1b4a0:	4798      	blx	r3
   1b4a2:	0003      	movs	r3, r0
   1b4a4:	0018      	movs	r0, r3
   1b4a6:	4b22      	ldr	r3, [pc, #136]	; (1b530 <xQueueSemaphoreTake+0x384>)
   1b4a8:	4798      	blx	r3
   1b4aa:	0003      	movs	r3, r0
   1b4ac:	b2db      	uxtb	r3, r3
   1b4ae:	0018      	movs	r0, r3
   1b4b0:	4b29      	ldr	r3, [pc, #164]	; (1b558 <xQueueSemaphoreTake+0x3ac>)
   1b4b2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b4b4:	69fb      	ldr	r3, [r7, #28]
   1b4b6:	681b      	ldr	r3, [r3, #0]
   1b4b8:	2b00      	cmp	r3, #0
   1b4ba:	d10a      	bne.n	1b4d2 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1b4bc:	4b13      	ldr	r3, [pc, #76]	; (1b50c <xQueueSemaphoreTake+0x360>)
   1b4be:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1b4c0:	69fb      	ldr	r3, [r7, #28]
   1b4c2:	685b      	ldr	r3, [r3, #4]
   1b4c4:	0018      	movs	r0, r3
   1b4c6:	4b25      	ldr	r3, [pc, #148]	; (1b55c <xQueueSemaphoreTake+0x3b0>)
   1b4c8:	4798      	blx	r3
   1b4ca:	0003      	movs	r3, r0
   1b4cc:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1b4ce:	4b1d      	ldr	r3, [pc, #116]	; (1b544 <xQueueSemaphoreTake+0x398>)
   1b4d0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b4d2:	69fb      	ldr	r3, [r7, #28]
   1b4d4:	3324      	adds	r3, #36	; 0x24
   1b4d6:	683a      	ldr	r2, [r7, #0]
   1b4d8:	0011      	movs	r1, r2
   1b4da:	0018      	movs	r0, r3
   1b4dc:	4b20      	ldr	r3, [pc, #128]	; (1b560 <xQueueSemaphoreTake+0x3b4>)
   1b4de:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b4e0:	69fb      	ldr	r3, [r7, #28]
   1b4e2:	0018      	movs	r0, r3
   1b4e4:	4b1f      	ldr	r3, [pc, #124]	; (1b564 <xQueueSemaphoreTake+0x3b8>)
   1b4e6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b4e8:	4b1f      	ldr	r3, [pc, #124]	; (1b568 <xQueueSemaphoreTake+0x3bc>)
   1b4ea:	4798      	blx	r3
   1b4ec:	1e03      	subs	r3, r0, #0
   1b4ee:	d000      	beq.n	1b4f2 <xQueueSemaphoreTake+0x346>
   1b4f0:	e680      	b.n	1b1f4 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1b4f2:	4b13      	ldr	r3, [pc, #76]	; (1b540 <xQueueSemaphoreTake+0x394>)
   1b4f4:	4798      	blx	r3
   1b4f6:	e67d      	b.n	1b1f4 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1b4f8:	69fb      	ldr	r3, [r7, #28]
   1b4fa:	0018      	movs	r0, r3
   1b4fc:	4b19      	ldr	r3, [pc, #100]	; (1b564 <xQueueSemaphoreTake+0x3b8>)
   1b4fe:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b500:	4b19      	ldr	r3, [pc, #100]	; (1b568 <xQueueSemaphoreTake+0x3bc>)
   1b502:	4798      	blx	r3
   1b504:	e676      	b.n	1b1f4 <xQueueSemaphoreTake+0x48>
   1b506:	46c0      	nop			; (mov r8, r8)
   1b508:	0001cc29 	.word	0x0001cc29
   1b50c:	00019f09 	.word	0x00019f09
   1b510:	0001819d 	.word	0x0001819d
   1b514:	00017f01 	.word	0x00017f01
   1b518:	200000b8 	.word	0x200000b8
   1b51c:	00017fc1 	.word	0x00017fc1
   1b520:	00017ec1 	.word	0x00017ec1
   1b524:	200000ac 	.word	0x200000ac
   1b528:	00017fa1 	.word	0x00017fa1
   1b52c:	000188f9 	.word	0x000188f9
   1b530:	00017ee1 	.word	0x00017ee1
   1b534:	00018f55 	.word	0x00018f55
   1b538:	0001d0f5 	.word	0x0001d0f5
   1b53c:	0001c799 	.word	0x0001c799
   1b540:	00019ef1 	.word	0x00019ef1
   1b544:	00019f2d 	.word	0x00019f2d
   1b548:	0001c8d9 	.word	0x0001c8d9
   1b54c:	0001c1c1 	.word	0x0001c1c1
   1b550:	0001c901 	.word	0x0001c901
   1b554:	0001b8f5 	.word	0x0001b8f5
   1b558:	00019091 	.word	0x00019091
   1b55c:	0001cc61 	.word	0x0001cc61
   1b560:	0001c675 	.word	0x0001c675
   1b564:	0001b805 	.word	0x0001b805
   1b568:	0001c1d9 	.word	0x0001c1d9
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1b56c:	69fb      	ldr	r3, [r7, #28]
   1b56e:	0018      	movs	r0, r3
   1b570:	4b2d      	ldr	r3, [pc, #180]	; (1b628 <xQueueSemaphoreTake+0x47c>)
   1b572:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b574:	4b2d      	ldr	r3, [pc, #180]	; (1b62c <xQueueSemaphoreTake+0x480>)
   1b576:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b578:	69fb      	ldr	r3, [r7, #28]
   1b57a:	0018      	movs	r0, r3
   1b57c:	4b2c      	ldr	r3, [pc, #176]	; (1b630 <xQueueSemaphoreTake+0x484>)
   1b57e:	4798      	blx	r3
   1b580:	1e03      	subs	r3, r0, #0
   1b582:	d100      	bne.n	1b586 <xQueueSemaphoreTake+0x3da>
   1b584:	e636      	b.n	1b1f4 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1b586:	6a3b      	ldr	r3, [r7, #32]
   1b588:	2b00      	cmp	r3, #0
   1b58a:	d010      	beq.n	1b5ae <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1b58c:	4b29      	ldr	r3, [pc, #164]	; (1b634 <xQueueSemaphoreTake+0x488>)
   1b58e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1b590:	69fb      	ldr	r3, [r7, #28]
   1b592:	0018      	movs	r0, r3
   1b594:	4b28      	ldr	r3, [pc, #160]	; (1b638 <xQueueSemaphoreTake+0x48c>)
   1b596:	4798      	blx	r3
   1b598:	0003      	movs	r3, r0
   1b59a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1b59c:	69fb      	ldr	r3, [r7, #28]
   1b59e:	685b      	ldr	r3, [r3, #4]
   1b5a0:	697a      	ldr	r2, [r7, #20]
   1b5a2:	0011      	movs	r1, r2
   1b5a4:	0018      	movs	r0, r3
   1b5a6:	4b25      	ldr	r3, [pc, #148]	; (1b63c <xQueueSemaphoreTake+0x490>)
   1b5a8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1b5aa:	4b25      	ldr	r3, [pc, #148]	; (1b640 <xQueueSemaphoreTake+0x494>)
   1b5ac:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b5ae:	4b25      	ldr	r3, [pc, #148]	; (1b644 <xQueueSemaphoreTake+0x498>)
   1b5b0:	4798      	blx	r3
   1b5b2:	0003      	movs	r3, r0
   1b5b4:	0018      	movs	r0, r3
   1b5b6:	4b24      	ldr	r3, [pc, #144]	; (1b648 <xQueueSemaphoreTake+0x49c>)
   1b5b8:	4798      	blx	r3
   1b5ba:	0003      	movs	r3, r0
   1b5bc:	001a      	movs	r2, r3
   1b5be:	4b23      	ldr	r3, [pc, #140]	; (1b64c <xQueueSemaphoreTake+0x4a0>)
   1b5c0:	881b      	ldrh	r3, [r3, #0]
   1b5c2:	4013      	ands	r3, r2
   1b5c4:	b29b      	uxth	r3, r3
   1b5c6:	2b00      	cmp	r3, #0
   1b5c8:	d029      	beq.n	1b61e <xQueueSemaphoreTake+0x472>
   1b5ca:	69fb      	ldr	r3, [r7, #28]
   1b5cc:	0018      	movs	r0, r3
   1b5ce:	4b20      	ldr	r3, [pc, #128]	; (1b650 <xQueueSemaphoreTake+0x4a4>)
   1b5d0:	4798      	blx	r3
   1b5d2:	0003      	movs	r3, r0
   1b5d4:	001a      	movs	r2, r3
   1b5d6:	4b1d      	ldr	r3, [pc, #116]	; (1b64c <xQueueSemaphoreTake+0x4a0>)
   1b5d8:	881b      	ldrh	r3, [r3, #0]
   1b5da:	4013      	ands	r3, r2
   1b5dc:	b29b      	uxth	r3, r3
   1b5de:	2b00      	cmp	r3, #0
   1b5e0:	d01d      	beq.n	1b61e <xQueueSemaphoreTake+0x472>
   1b5e2:	69fb      	ldr	r3, [r7, #28]
   1b5e4:	0018      	movs	r0, r3
   1b5e6:	4b1b      	ldr	r3, [pc, #108]	; (1b654 <xQueueSemaphoreTake+0x4a8>)
   1b5e8:	4798      	blx	r3
   1b5ea:	0003      	movs	r3, r0
   1b5ec:	001a      	movs	r2, r3
   1b5ee:	4b1a      	ldr	r3, [pc, #104]	; (1b658 <xQueueSemaphoreTake+0x4ac>)
   1b5f0:	5c9b      	ldrb	r3, [r3, r2]
   1b5f2:	3350      	adds	r3, #80	; 0x50
   1b5f4:	b2db      	uxtb	r3, r3
   1b5f6:	001d      	movs	r5, r3
   1b5f8:	69fb      	ldr	r3, [r7, #28]
   1b5fa:	0018      	movs	r0, r3
   1b5fc:	4b15      	ldr	r3, [pc, #84]	; (1b654 <xQueueSemaphoreTake+0x4a8>)
   1b5fe:	4798      	blx	r3
   1b600:	0003      	movs	r3, r0
   1b602:	001a      	movs	r2, r3
   1b604:	4b14      	ldr	r3, [pc, #80]	; (1b658 <xQueueSemaphoreTake+0x4ac>)
   1b606:	5c9c      	ldrb	r4, [r3, r2]
   1b608:	69fb      	ldr	r3, [r7, #28]
   1b60a:	0018      	movs	r0, r3
   1b60c:	4b13      	ldr	r3, [pc, #76]	; (1b65c <xQueueSemaphoreTake+0x4b0>)
   1b60e:	4798      	blx	r3
   1b610:	0003      	movs	r3, r0
   1b612:	b2db      	uxtb	r3, r3
   1b614:	001a      	movs	r2, r3
   1b616:	0021      	movs	r1, r4
   1b618:	0028      	movs	r0, r5
   1b61a:	4b11      	ldr	r3, [pc, #68]	; (1b660 <xQueueSemaphoreTake+0x4b4>)
   1b61c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1b61e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1b620:	0018      	movs	r0, r3
   1b622:	46bd      	mov	sp, r7
   1b624:	b00a      	add	sp, #40	; 0x28
   1b626:	bdb0      	pop	{r4, r5, r7, pc}
   1b628:	0001b805 	.word	0x0001b805
   1b62c:	0001c1d9 	.word	0x0001c1d9
   1b630:	0001b8f5 	.word	0x0001b8f5
   1b634:	00019f09 	.word	0x00019f09
   1b638:	0001b6a7 	.word	0x0001b6a7
   1b63c:	0001cf59 	.word	0x0001cf59
   1b640:	00019f2d 	.word	0x00019f2d
   1b644:	0001819d 	.word	0x0001819d
   1b648:	00017f01 	.word	0x00017f01
   1b64c:	200000b8 	.word	0x200000b8
   1b650:	00017fc1 	.word	0x00017fc1
   1b654:	00017ec1 	.word	0x00017ec1
   1b658:	200000ac 	.word	0x200000ac
   1b65c:	00017fa1 	.word	0x00017fa1
   1b660:	000188f9 	.word	0x000188f9

0001b664 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1b664:	b580      	push	{r7, lr}
   1b666:	b082      	sub	sp, #8
   1b668:	af00      	add	r7, sp, #0
   1b66a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1b66c:	687b      	ldr	r3, [r7, #4]
   1b66e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1b670:	0018      	movs	r0, r3
   1b672:	46bd      	mov	sp, r7
   1b674:	b002      	add	sp, #8
   1b676:	bd80      	pop	{r7, pc}

0001b678 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1b678:	b580      	push	{r7, lr}
   1b67a:	b082      	sub	sp, #8
   1b67c:	af00      	add	r7, sp, #0
   1b67e:	6078      	str	r0, [r7, #4]
   1b680:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1b682:	687b      	ldr	r3, [r7, #4]
   1b684:	683a      	ldr	r2, [r7, #0]
   1b686:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1b688:	46c0      	nop			; (mov r8, r8)
   1b68a:	46bd      	mov	sp, r7
   1b68c:	b002      	add	sp, #8
   1b68e:	bd80      	pop	{r7, pc}

0001b690 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1b690:	b580      	push	{r7, lr}
   1b692:	b082      	sub	sp, #8
   1b694:	af00      	add	r7, sp, #0
   1b696:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1b698:	687b      	ldr	r3, [r7, #4]
   1b69a:	2250      	movs	r2, #80	; 0x50
   1b69c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1b69e:	0018      	movs	r0, r3
   1b6a0:	46bd      	mov	sp, r7
   1b6a2:	b002      	add	sp, #8
   1b6a4:	bd80      	pop	{r7, pc}

0001b6a6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1b6a6:	b580      	push	{r7, lr}
   1b6a8:	b084      	sub	sp, #16
   1b6aa:	af00      	add	r7, sp, #0
   1b6ac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1b6ae:	687b      	ldr	r3, [r7, #4]
   1b6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b6b2:	2b00      	cmp	r3, #0
   1b6b4:	d006      	beq.n	1b6c4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1b6b6:	687b      	ldr	r3, [r7, #4]
   1b6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b6ba:	681b      	ldr	r3, [r3, #0]
   1b6bc:	2205      	movs	r2, #5
   1b6be:	1ad3      	subs	r3, r2, r3
   1b6c0:	60fb      	str	r3, [r7, #12]
   1b6c2:	e001      	b.n	1b6c8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1b6c4:	2300      	movs	r3, #0
   1b6c6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1b6c8:	68fb      	ldr	r3, [r7, #12]
	}
   1b6ca:	0018      	movs	r0, r3
   1b6cc:	46bd      	mov	sp, r7
   1b6ce:	b004      	add	sp, #16
   1b6d0:	bd80      	pop	{r7, pc}
	...

0001b6d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1b6d4:	b580      	push	{r7, lr}
   1b6d6:	b086      	sub	sp, #24
   1b6d8:	af00      	add	r7, sp, #0
   1b6da:	60f8      	str	r0, [r7, #12]
   1b6dc:	60b9      	str	r1, [r7, #8]
   1b6de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1b6e0:	2300      	movs	r3, #0
   1b6e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b6e4:	68fb      	ldr	r3, [r7, #12]
   1b6e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b6e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1b6ea:	68fb      	ldr	r3, [r7, #12]
   1b6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b6ee:	2b00      	cmp	r3, #0
   1b6f0:	d10e      	bne.n	1b710 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1b6f2:	68fb      	ldr	r3, [r7, #12]
   1b6f4:	681b      	ldr	r3, [r3, #0]
   1b6f6:	2b00      	cmp	r3, #0
   1b6f8:	d14e      	bne.n	1b798 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1b6fa:	68fb      	ldr	r3, [r7, #12]
   1b6fc:	685b      	ldr	r3, [r3, #4]
   1b6fe:	0018      	movs	r0, r3
   1b700:	4b2a      	ldr	r3, [pc, #168]	; (1b7ac <prvCopyDataToQueue+0xd8>)
   1b702:	4798      	blx	r3
   1b704:	0003      	movs	r3, r0
   1b706:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1b708:	68fb      	ldr	r3, [r7, #12]
   1b70a:	2200      	movs	r2, #0
   1b70c:	605a      	str	r2, [r3, #4]
   1b70e:	e043      	b.n	1b798 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1b710:	687b      	ldr	r3, [r7, #4]
   1b712:	2b00      	cmp	r3, #0
   1b714:	d119      	bne.n	1b74a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1b716:	68fb      	ldr	r3, [r7, #12]
   1b718:	6898      	ldr	r0, [r3, #8]
   1b71a:	68fb      	ldr	r3, [r7, #12]
   1b71c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b71e:	68bb      	ldr	r3, [r7, #8]
   1b720:	0019      	movs	r1, r3
   1b722:	4b23      	ldr	r3, [pc, #140]	; (1b7b0 <prvCopyDataToQueue+0xdc>)
   1b724:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1b726:	68fb      	ldr	r3, [r7, #12]
   1b728:	689a      	ldr	r2, [r3, #8]
   1b72a:	68fb      	ldr	r3, [r7, #12]
   1b72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b72e:	18d2      	adds	r2, r2, r3
   1b730:	68fb      	ldr	r3, [r7, #12]
   1b732:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b734:	68fb      	ldr	r3, [r7, #12]
   1b736:	689a      	ldr	r2, [r3, #8]
   1b738:	68fb      	ldr	r3, [r7, #12]
   1b73a:	685b      	ldr	r3, [r3, #4]
   1b73c:	429a      	cmp	r2, r3
   1b73e:	d32b      	bcc.n	1b798 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1b740:	68fb      	ldr	r3, [r7, #12]
   1b742:	681a      	ldr	r2, [r3, #0]
   1b744:	68fb      	ldr	r3, [r7, #12]
   1b746:	609a      	str	r2, [r3, #8]
   1b748:	e026      	b.n	1b798 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b74a:	68fb      	ldr	r3, [r7, #12]
   1b74c:	68d8      	ldr	r0, [r3, #12]
   1b74e:	68fb      	ldr	r3, [r7, #12]
   1b750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b752:	68bb      	ldr	r3, [r7, #8]
   1b754:	0019      	movs	r1, r3
   1b756:	4b16      	ldr	r3, [pc, #88]	; (1b7b0 <prvCopyDataToQueue+0xdc>)
   1b758:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1b75a:	68fb      	ldr	r3, [r7, #12]
   1b75c:	68da      	ldr	r2, [r3, #12]
   1b75e:	68fb      	ldr	r3, [r7, #12]
   1b760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b762:	425b      	negs	r3, r3
   1b764:	18d2      	adds	r2, r2, r3
   1b766:	68fb      	ldr	r3, [r7, #12]
   1b768:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1b76a:	68fb      	ldr	r3, [r7, #12]
   1b76c:	68da      	ldr	r2, [r3, #12]
   1b76e:	68fb      	ldr	r3, [r7, #12]
   1b770:	681b      	ldr	r3, [r3, #0]
   1b772:	429a      	cmp	r2, r3
   1b774:	d207      	bcs.n	1b786 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1b776:	68fb      	ldr	r3, [r7, #12]
   1b778:	685a      	ldr	r2, [r3, #4]
   1b77a:	68fb      	ldr	r3, [r7, #12]
   1b77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b77e:	425b      	negs	r3, r3
   1b780:	18d2      	adds	r2, r2, r3
   1b782:	68fb      	ldr	r3, [r7, #12]
   1b784:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1b786:	687b      	ldr	r3, [r7, #4]
   1b788:	2b02      	cmp	r3, #2
   1b78a:	d105      	bne.n	1b798 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b78c:	693b      	ldr	r3, [r7, #16]
   1b78e:	2b00      	cmp	r3, #0
   1b790:	d002      	beq.n	1b798 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1b792:	693b      	ldr	r3, [r7, #16]
   1b794:	3b01      	subs	r3, #1
   1b796:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b798:	693b      	ldr	r3, [r7, #16]
   1b79a:	1c5a      	adds	r2, r3, #1
   1b79c:	68fb      	ldr	r3, [r7, #12]
   1b79e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1b7a0:	697b      	ldr	r3, [r7, #20]
}
   1b7a2:	0018      	movs	r0, r3
   1b7a4:	46bd      	mov	sp, r7
   1b7a6:	b006      	add	sp, #24
   1b7a8:	bd80      	pop	{r7, pc}
   1b7aa:	46c0      	nop			; (mov r8, r8)
   1b7ac:	0001cdf1 	.word	0x0001cdf1
   1b7b0:	00034355 	.word	0x00034355

0001b7b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1b7b4:	b580      	push	{r7, lr}
   1b7b6:	b082      	sub	sp, #8
   1b7b8:	af00      	add	r7, sp, #0
   1b7ba:	6078      	str	r0, [r7, #4]
   1b7bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1b7be:	687b      	ldr	r3, [r7, #4]
   1b7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b7c2:	2b00      	cmp	r3, #0
   1b7c4:	d018      	beq.n	1b7f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1b7c6:	687b      	ldr	r3, [r7, #4]
   1b7c8:	68da      	ldr	r2, [r3, #12]
   1b7ca:	687b      	ldr	r3, [r7, #4]
   1b7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b7ce:	18d2      	adds	r2, r2, r3
   1b7d0:	687b      	ldr	r3, [r7, #4]
   1b7d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1b7d4:	687b      	ldr	r3, [r7, #4]
   1b7d6:	68da      	ldr	r2, [r3, #12]
   1b7d8:	687b      	ldr	r3, [r7, #4]
   1b7da:	685b      	ldr	r3, [r3, #4]
   1b7dc:	429a      	cmp	r2, r3
   1b7de:	d303      	bcc.n	1b7e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1b7e0:	687b      	ldr	r3, [r7, #4]
   1b7e2:	681a      	ldr	r2, [r3, #0]
   1b7e4:	687b      	ldr	r3, [r7, #4]
   1b7e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1b7e8:	687b      	ldr	r3, [r7, #4]
   1b7ea:	68d9      	ldr	r1, [r3, #12]
   1b7ec:	687b      	ldr	r3, [r7, #4]
   1b7ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1b7f0:	683b      	ldr	r3, [r7, #0]
   1b7f2:	0018      	movs	r0, r3
   1b7f4:	4b02      	ldr	r3, [pc, #8]	; (1b800 <prvCopyDataFromQueue+0x4c>)
   1b7f6:	4798      	blx	r3
	}
}
   1b7f8:	46c0      	nop			; (mov r8, r8)
   1b7fa:	46bd      	mov	sp, r7
   1b7fc:	b002      	add	sp, #8
   1b7fe:	bd80      	pop	{r7, pc}
   1b800:	00034355 	.word	0x00034355

0001b804 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1b804:	b580      	push	{r7, lr}
   1b806:	b084      	sub	sp, #16
   1b808:	af00      	add	r7, sp, #0
   1b80a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1b80c:	4b34      	ldr	r3, [pc, #208]	; (1b8e0 <prvUnlockQueue+0xdc>)
   1b80e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1b810:	230f      	movs	r3, #15
   1b812:	18fb      	adds	r3, r7, r3
   1b814:	687a      	ldr	r2, [r7, #4]
   1b816:	2145      	movs	r1, #69	; 0x45
   1b818:	5c52      	ldrb	r2, [r2, r1]
   1b81a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b81c:	e022      	b.n	1b864 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1b81e:	687b      	ldr	r3, [r7, #4]
   1b820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b822:	2b00      	cmp	r3, #0
   1b824:	d009      	beq.n	1b83a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b826:	687b      	ldr	r3, [r7, #4]
   1b828:	2100      	movs	r1, #0
   1b82a:	0018      	movs	r0, r3
   1b82c:	4b2d      	ldr	r3, [pc, #180]	; (1b8e4 <prvUnlockQueue+0xe0>)
   1b82e:	4798      	blx	r3
   1b830:	1e03      	subs	r3, r0, #0
   1b832:	d00f      	beq.n	1b854 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1b834:	4b2c      	ldr	r3, [pc, #176]	; (1b8e8 <prvUnlockQueue+0xe4>)
   1b836:	4798      	blx	r3
   1b838:	e00c      	b.n	1b854 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b83a:	687b      	ldr	r3, [r7, #4]
   1b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b83e:	2b00      	cmp	r3, #0
   1b840:	d017      	beq.n	1b872 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b842:	687b      	ldr	r3, [r7, #4]
   1b844:	3324      	adds	r3, #36	; 0x24
   1b846:	0018      	movs	r0, r3
   1b848:	4b28      	ldr	r3, [pc, #160]	; (1b8ec <prvUnlockQueue+0xe8>)
   1b84a:	4798      	blx	r3
   1b84c:	1e03      	subs	r3, r0, #0
   1b84e:	d001      	beq.n	1b854 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1b850:	4b25      	ldr	r3, [pc, #148]	; (1b8e8 <prvUnlockQueue+0xe4>)
   1b852:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1b854:	230f      	movs	r3, #15
   1b856:	18fb      	adds	r3, r7, r3
   1b858:	781b      	ldrb	r3, [r3, #0]
   1b85a:	3b01      	subs	r3, #1
   1b85c:	b2da      	uxtb	r2, r3
   1b85e:	230f      	movs	r3, #15
   1b860:	18fb      	adds	r3, r7, r3
   1b862:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1b864:	230f      	movs	r3, #15
   1b866:	18fb      	adds	r3, r7, r3
   1b868:	781b      	ldrb	r3, [r3, #0]
   1b86a:	b25b      	sxtb	r3, r3
   1b86c:	2b00      	cmp	r3, #0
   1b86e:	dcd6      	bgt.n	1b81e <prvUnlockQueue+0x1a>
   1b870:	e000      	b.n	1b874 <prvUnlockQueue+0x70>
						break;
   1b872:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1b874:	687b      	ldr	r3, [r7, #4]
   1b876:	2245      	movs	r2, #69	; 0x45
   1b878:	21ff      	movs	r1, #255	; 0xff
   1b87a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b87c:	4b1c      	ldr	r3, [pc, #112]	; (1b8f0 <prvUnlockQueue+0xec>)
   1b87e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1b880:	4b17      	ldr	r3, [pc, #92]	; (1b8e0 <prvUnlockQueue+0xdc>)
   1b882:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1b884:	230e      	movs	r3, #14
   1b886:	18fb      	adds	r3, r7, r3
   1b888:	687a      	ldr	r2, [r7, #4]
   1b88a:	2144      	movs	r1, #68	; 0x44
   1b88c:	5c52      	ldrb	r2, [r2, r1]
   1b88e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b890:	e014      	b.n	1b8bc <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b892:	687b      	ldr	r3, [r7, #4]
   1b894:	691b      	ldr	r3, [r3, #16]
   1b896:	2b00      	cmp	r3, #0
   1b898:	d017      	beq.n	1b8ca <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b89a:	687b      	ldr	r3, [r7, #4]
   1b89c:	3310      	adds	r3, #16
   1b89e:	0018      	movs	r0, r3
   1b8a0:	4b12      	ldr	r3, [pc, #72]	; (1b8ec <prvUnlockQueue+0xe8>)
   1b8a2:	4798      	blx	r3
   1b8a4:	1e03      	subs	r3, r0, #0
   1b8a6:	d001      	beq.n	1b8ac <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1b8a8:	4b0f      	ldr	r3, [pc, #60]	; (1b8e8 <prvUnlockQueue+0xe4>)
   1b8aa:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1b8ac:	230e      	movs	r3, #14
   1b8ae:	18fb      	adds	r3, r7, r3
   1b8b0:	781b      	ldrb	r3, [r3, #0]
   1b8b2:	3b01      	subs	r3, #1
   1b8b4:	b2da      	uxtb	r2, r3
   1b8b6:	230e      	movs	r3, #14
   1b8b8:	18fb      	adds	r3, r7, r3
   1b8ba:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1b8bc:	230e      	movs	r3, #14
   1b8be:	18fb      	adds	r3, r7, r3
   1b8c0:	781b      	ldrb	r3, [r3, #0]
   1b8c2:	b25b      	sxtb	r3, r3
   1b8c4:	2b00      	cmp	r3, #0
   1b8c6:	dce4      	bgt.n	1b892 <prvUnlockQueue+0x8e>
   1b8c8:	e000      	b.n	1b8cc <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1b8ca:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1b8cc:	687b      	ldr	r3, [r7, #4]
   1b8ce:	2244      	movs	r2, #68	; 0x44
   1b8d0:	21ff      	movs	r1, #255	; 0xff
   1b8d2:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1b8d4:	4b06      	ldr	r3, [pc, #24]	; (1b8f0 <prvUnlockQueue+0xec>)
   1b8d6:	4798      	blx	r3
}
   1b8d8:	46c0      	nop			; (mov r8, r8)
   1b8da:	46bd      	mov	sp, r7
   1b8dc:	b004      	add	sp, #16
   1b8de:	bd80      	pop	{r7, pc}
   1b8e0:	00019f09 	.word	0x00019f09
   1b8e4:	0001b9d9 	.word	0x0001b9d9
   1b8e8:	0001c9ad 	.word	0x0001c9ad
   1b8ec:	0001c799 	.word	0x0001c799
   1b8f0:	00019f2d 	.word	0x00019f2d

0001b8f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1b8f4:	b580      	push	{r7, lr}
   1b8f6:	b084      	sub	sp, #16
   1b8f8:	af00      	add	r7, sp, #0
   1b8fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b8fc:	4b08      	ldr	r3, [pc, #32]	; (1b920 <prvIsQueueEmpty+0x2c>)
   1b8fe:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1b900:	687b      	ldr	r3, [r7, #4]
   1b902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b904:	2b00      	cmp	r3, #0
   1b906:	d102      	bne.n	1b90e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1b908:	2301      	movs	r3, #1
   1b90a:	60fb      	str	r3, [r7, #12]
   1b90c:	e001      	b.n	1b912 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1b90e:	2300      	movs	r3, #0
   1b910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b912:	4b04      	ldr	r3, [pc, #16]	; (1b924 <prvIsQueueEmpty+0x30>)
   1b914:	4798      	blx	r3

	return xReturn;
   1b916:	68fb      	ldr	r3, [r7, #12]
}
   1b918:	0018      	movs	r0, r3
   1b91a:	46bd      	mov	sp, r7
   1b91c:	b004      	add	sp, #16
   1b91e:	bd80      	pop	{r7, pc}
   1b920:	00019f09 	.word	0x00019f09
   1b924:	00019f2d 	.word	0x00019f2d

0001b928 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1b928:	b580      	push	{r7, lr}
   1b92a:	b084      	sub	sp, #16
   1b92c:	af00      	add	r7, sp, #0
   1b92e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1b930:	4b09      	ldr	r3, [pc, #36]	; (1b958 <prvIsQueueFull+0x30>)
   1b932:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1b934:	687b      	ldr	r3, [r7, #4]
   1b936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b938:	687b      	ldr	r3, [r7, #4]
   1b93a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b93c:	429a      	cmp	r2, r3
   1b93e:	d102      	bne.n	1b946 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1b940:	2301      	movs	r3, #1
   1b942:	60fb      	str	r3, [r7, #12]
   1b944:	e001      	b.n	1b94a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1b946:	2300      	movs	r3, #0
   1b948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1b94a:	4b04      	ldr	r3, [pc, #16]	; (1b95c <prvIsQueueFull+0x34>)
   1b94c:	4798      	blx	r3

	return xReturn;
   1b94e:	68fb      	ldr	r3, [r7, #12]
}
   1b950:	0018      	movs	r0, r3
   1b952:	46bd      	mov	sp, r7
   1b954:	b004      	add	sp, #16
   1b956:	bd80      	pop	{r7, pc}
   1b958:	00019f09 	.word	0x00019f09
   1b95c:	00019f2d 	.word	0x00019f2d

0001b960 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b960:	b580      	push	{r7, lr}
   1b962:	b086      	sub	sp, #24
   1b964:	af00      	add	r7, sp, #0
   1b966:	60f8      	str	r0, [r7, #12]
   1b968:	60b9      	str	r1, [r7, #8]
   1b96a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b96c:	68fb      	ldr	r3, [r7, #12]
   1b96e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1b970:	4b15      	ldr	r3, [pc, #84]	; (1b9c8 <vQueueWaitForMessageRestricted+0x68>)
   1b972:	4798      	blx	r3
   1b974:	697b      	ldr	r3, [r7, #20]
   1b976:	2244      	movs	r2, #68	; 0x44
   1b978:	5c9b      	ldrb	r3, [r3, r2]
   1b97a:	b25b      	sxtb	r3, r3
   1b97c:	3301      	adds	r3, #1
   1b97e:	d103      	bne.n	1b988 <vQueueWaitForMessageRestricted+0x28>
   1b980:	697b      	ldr	r3, [r7, #20]
   1b982:	2244      	movs	r2, #68	; 0x44
   1b984:	2100      	movs	r1, #0
   1b986:	5499      	strb	r1, [r3, r2]
   1b988:	697b      	ldr	r3, [r7, #20]
   1b98a:	2245      	movs	r2, #69	; 0x45
   1b98c:	5c9b      	ldrb	r3, [r3, r2]
   1b98e:	b25b      	sxtb	r3, r3
   1b990:	3301      	adds	r3, #1
   1b992:	d103      	bne.n	1b99c <vQueueWaitForMessageRestricted+0x3c>
   1b994:	697b      	ldr	r3, [r7, #20]
   1b996:	2245      	movs	r2, #69	; 0x45
   1b998:	2100      	movs	r1, #0
   1b99a:	5499      	strb	r1, [r3, r2]
   1b99c:	4b0b      	ldr	r3, [pc, #44]	; (1b9cc <vQueueWaitForMessageRestricted+0x6c>)
   1b99e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1b9a0:	697b      	ldr	r3, [r7, #20]
   1b9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b9a4:	2b00      	cmp	r3, #0
   1b9a6:	d106      	bne.n	1b9b6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1b9a8:	697b      	ldr	r3, [r7, #20]
   1b9aa:	3324      	adds	r3, #36	; 0x24
   1b9ac:	687a      	ldr	r2, [r7, #4]
   1b9ae:	68b9      	ldr	r1, [r7, #8]
   1b9b0:	0018      	movs	r0, r3
   1b9b2:	4b07      	ldr	r3, [pc, #28]	; (1b9d0 <vQueueWaitForMessageRestricted+0x70>)
   1b9b4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1b9b6:	697b      	ldr	r3, [r7, #20]
   1b9b8:	0018      	movs	r0, r3
   1b9ba:	4b06      	ldr	r3, [pc, #24]	; (1b9d4 <vQueueWaitForMessageRestricted+0x74>)
   1b9bc:	4798      	blx	r3
	}
   1b9be:	46c0      	nop			; (mov r8, r8)
   1b9c0:	46bd      	mov	sp, r7
   1b9c2:	b006      	add	sp, #24
   1b9c4:	bd80      	pop	{r7, pc}
   1b9c6:	46c0      	nop			; (mov r8, r8)
   1b9c8:	00019f09 	.word	0x00019f09
   1b9cc:	00019f2d 	.word	0x00019f2d
   1b9d0:	0001c6b9 	.word	0x0001c6b9
   1b9d4:	0001b805 	.word	0x0001b805

0001b9d8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1b9d8:	b5b0      	push	{r4, r5, r7, lr}
   1b9da:	b086      	sub	sp, #24
   1b9dc:	af00      	add	r7, sp, #0
   1b9de:	6078      	str	r0, [r7, #4]
   1b9e0:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1b9e2:	687b      	ldr	r3, [r7, #4]
   1b9e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b9e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1b9e8:	2300      	movs	r3, #0
   1b9ea:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1b9ec:	693b      	ldr	r3, [r7, #16]
   1b9ee:	2b00      	cmp	r3, #0
   1b9f0:	d101      	bne.n	1b9f6 <prvNotifyQueueSetContainer+0x1e>
   1b9f2:	b672      	cpsid	i
   1b9f4:	e7fe      	b.n	1b9f4 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1b9f6:	693b      	ldr	r3, [r7, #16]
   1b9f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b9fa:	693b      	ldr	r3, [r7, #16]
   1b9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b9fe:	429a      	cmp	r2, r3
   1ba00:	d301      	bcc.n	1ba06 <prvNotifyQueueSetContainer+0x2e>
   1ba02:	b672      	cpsid	i
   1ba04:	e7fe      	b.n	1ba04 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1ba06:	693b      	ldr	r3, [r7, #16]
   1ba08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ba0a:	693b      	ldr	r3, [r7, #16]
   1ba0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ba0e:	429a      	cmp	r2, r3
   1ba10:	d300      	bcc.n	1ba14 <prvNotifyQueueSetContainer+0x3c>
   1ba12:	e08b      	b.n	1bb2c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1ba14:	230f      	movs	r3, #15
   1ba16:	18fb      	adds	r3, r7, r3
   1ba18:	693a      	ldr	r2, [r7, #16]
   1ba1a:	2145      	movs	r1, #69	; 0x45
   1ba1c:	5c52      	ldrb	r2, [r2, r1]
   1ba1e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1ba20:	4b45      	ldr	r3, [pc, #276]	; (1bb38 <prvNotifyQueueSetContainer+0x160>)
   1ba22:	4798      	blx	r3
   1ba24:	0003      	movs	r3, r0
   1ba26:	0018      	movs	r0, r3
   1ba28:	4b44      	ldr	r3, [pc, #272]	; (1bb3c <prvNotifyQueueSetContainer+0x164>)
   1ba2a:	4798      	blx	r3
   1ba2c:	0003      	movs	r3, r0
   1ba2e:	001a      	movs	r2, r3
   1ba30:	4b43      	ldr	r3, [pc, #268]	; (1bb40 <prvNotifyQueueSetContainer+0x168>)
   1ba32:	881b      	ldrh	r3, [r3, #0]
   1ba34:	4013      	ands	r3, r2
   1ba36:	b29b      	uxth	r3, r3
   1ba38:	2b00      	cmp	r3, #0
   1ba3a:	d02e      	beq.n	1ba9a <prvNotifyQueueSetContainer+0xc2>
   1ba3c:	693b      	ldr	r3, [r7, #16]
   1ba3e:	0018      	movs	r0, r3
   1ba40:	4b40      	ldr	r3, [pc, #256]	; (1bb44 <prvNotifyQueueSetContainer+0x16c>)
   1ba42:	4798      	blx	r3
   1ba44:	0003      	movs	r3, r0
   1ba46:	001a      	movs	r2, r3
   1ba48:	4b3d      	ldr	r3, [pc, #244]	; (1bb40 <prvNotifyQueueSetContainer+0x168>)
   1ba4a:	881b      	ldrh	r3, [r3, #0]
   1ba4c:	4013      	ands	r3, r2
   1ba4e:	b29b      	uxth	r3, r3
   1ba50:	2b00      	cmp	r3, #0
   1ba52:	d022      	beq.n	1ba9a <prvNotifyQueueSetContainer+0xc2>
   1ba54:	683b      	ldr	r3, [r7, #0]
   1ba56:	2b00      	cmp	r3, #0
   1ba58:	d10b      	bne.n	1ba72 <prvNotifyQueueSetContainer+0x9a>
   1ba5a:	693b      	ldr	r3, [r7, #16]
   1ba5c:	0018      	movs	r0, r3
   1ba5e:	4b3a      	ldr	r3, [pc, #232]	; (1bb48 <prvNotifyQueueSetContainer+0x170>)
   1ba60:	4798      	blx	r3
   1ba62:	0003      	movs	r3, r0
   1ba64:	001a      	movs	r2, r3
   1ba66:	4b39      	ldr	r3, [pc, #228]	; (1bb4c <prvNotifyQueueSetContainer+0x174>)
   1ba68:	5c9b      	ldrb	r3, [r3, r2]
   1ba6a:	3320      	adds	r3, #32
   1ba6c:	b2db      	uxtb	r3, r3
   1ba6e:	001d      	movs	r5, r3
   1ba70:	e000      	b.n	1ba74 <prvNotifyQueueSetContainer+0x9c>
   1ba72:	2525      	movs	r5, #37	; 0x25
   1ba74:	693b      	ldr	r3, [r7, #16]
   1ba76:	0018      	movs	r0, r3
   1ba78:	4b33      	ldr	r3, [pc, #204]	; (1bb48 <prvNotifyQueueSetContainer+0x170>)
   1ba7a:	4798      	blx	r3
   1ba7c:	0003      	movs	r3, r0
   1ba7e:	001a      	movs	r2, r3
   1ba80:	4b32      	ldr	r3, [pc, #200]	; (1bb4c <prvNotifyQueueSetContainer+0x174>)
   1ba82:	5c9c      	ldrb	r4, [r3, r2]
   1ba84:	693b      	ldr	r3, [r7, #16]
   1ba86:	0018      	movs	r0, r3
   1ba88:	4b31      	ldr	r3, [pc, #196]	; (1bb50 <prvNotifyQueueSetContainer+0x178>)
   1ba8a:	4798      	blx	r3
   1ba8c:	0003      	movs	r3, r0
   1ba8e:	b2db      	uxtb	r3, r3
   1ba90:	001a      	movs	r2, r3
   1ba92:	0021      	movs	r1, r4
   1ba94:	0028      	movs	r0, r5
   1ba96:	4b2f      	ldr	r3, [pc, #188]	; (1bb54 <prvNotifyQueueSetContainer+0x17c>)
   1ba98:	4798      	blx	r3
   1ba9a:	693b      	ldr	r3, [r7, #16]
   1ba9c:	0018      	movs	r0, r3
   1ba9e:	4b2a      	ldr	r3, [pc, #168]	; (1bb48 <prvNotifyQueueSetContainer+0x170>)
   1baa0:	4798      	blx	r3
   1baa2:	0003      	movs	r3, r0
   1baa4:	001a      	movs	r2, r3
   1baa6:	4b29      	ldr	r3, [pc, #164]	; (1bb4c <prvNotifyQueueSetContainer+0x174>)
   1baa8:	5c9c      	ldrb	r4, [r3, r2]
   1baaa:	693b      	ldr	r3, [r7, #16]
   1baac:	0018      	movs	r0, r3
   1baae:	4b28      	ldr	r3, [pc, #160]	; (1bb50 <prvNotifyQueueSetContainer+0x178>)
   1bab0:	4798      	blx	r3
   1bab2:	0003      	movs	r3, r0
   1bab4:	b2dd      	uxtb	r5, r3
   1bab6:	693b      	ldr	r3, [r7, #16]
   1bab8:	0018      	movs	r0, r3
   1baba:	4b23      	ldr	r3, [pc, #140]	; (1bb48 <prvNotifyQueueSetContainer+0x170>)
   1babc:	4798      	blx	r3
   1babe:	0003      	movs	r3, r0
   1bac0:	001a      	movs	r2, r3
   1bac2:	4b22      	ldr	r3, [pc, #136]	; (1bb4c <prvNotifyQueueSetContainer+0x174>)
   1bac4:	5c9b      	ldrb	r3, [r3, r2]
   1bac6:	2b02      	cmp	r3, #2
   1bac8:	d005      	beq.n	1bad6 <prvNotifyQueueSetContainer+0xfe>
   1baca:	693b      	ldr	r3, [r7, #16]
   1bacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bace:	b2db      	uxtb	r3, r3
   1bad0:	3301      	adds	r3, #1
   1bad2:	b2db      	uxtb	r3, r3
   1bad4:	e000      	b.n	1bad8 <prvNotifyQueueSetContainer+0x100>
   1bad6:	2300      	movs	r3, #0
   1bad8:	001a      	movs	r2, r3
   1bada:	0029      	movs	r1, r5
   1badc:	0020      	movs	r0, r4
   1bade:	4b1e      	ldr	r3, [pc, #120]	; (1bb58 <prvNotifyQueueSetContainer+0x180>)
   1bae0:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1bae2:	683a      	ldr	r2, [r7, #0]
   1bae4:	1d39      	adds	r1, r7, #4
   1bae6:	693b      	ldr	r3, [r7, #16]
   1bae8:	0018      	movs	r0, r3
   1baea:	4b1c      	ldr	r3, [pc, #112]	; (1bb5c <prvNotifyQueueSetContainer+0x184>)
   1baec:	4798      	blx	r3
   1baee:	0003      	movs	r3, r0
   1baf0:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1baf2:	230f      	movs	r3, #15
   1baf4:	18fb      	adds	r3, r7, r3
   1baf6:	781b      	ldrb	r3, [r3, #0]
   1baf8:	b25b      	sxtb	r3, r3
   1bafa:	3301      	adds	r3, #1
   1bafc:	d10d      	bne.n	1bb1a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1bafe:	693b      	ldr	r3, [r7, #16]
   1bb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bb02:	2b00      	cmp	r3, #0
   1bb04:	d012      	beq.n	1bb2c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1bb06:	693b      	ldr	r3, [r7, #16]
   1bb08:	3324      	adds	r3, #36	; 0x24
   1bb0a:	0018      	movs	r0, r3
   1bb0c:	4b14      	ldr	r3, [pc, #80]	; (1bb60 <prvNotifyQueueSetContainer+0x188>)
   1bb0e:	4798      	blx	r3
   1bb10:	1e03      	subs	r3, r0, #0
   1bb12:	d00b      	beq.n	1bb2c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1bb14:	2301      	movs	r3, #1
   1bb16:	617b      	str	r3, [r7, #20]
   1bb18:	e008      	b.n	1bb2c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1bb1a:	230f      	movs	r3, #15
   1bb1c:	18fb      	adds	r3, r7, r3
   1bb1e:	781b      	ldrb	r3, [r3, #0]
   1bb20:	3301      	adds	r3, #1
   1bb22:	b2db      	uxtb	r3, r3
   1bb24:	b259      	sxtb	r1, r3
   1bb26:	693b      	ldr	r3, [r7, #16]
   1bb28:	2245      	movs	r2, #69	; 0x45
   1bb2a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1bb2c:	697b      	ldr	r3, [r7, #20]
	}
   1bb2e:	0018      	movs	r0, r3
   1bb30:	46bd      	mov	sp, r7
   1bb32:	b006      	add	sp, #24
   1bb34:	bdb0      	pop	{r4, r5, r7, pc}
   1bb36:	46c0      	nop			; (mov r8, r8)
   1bb38:	0001819d 	.word	0x0001819d
   1bb3c:	00017f01 	.word	0x00017f01
   1bb40:	200000b8 	.word	0x200000b8
   1bb44:	00017fc1 	.word	0x00017fc1
   1bb48:	00017ec1 	.word	0x00017ec1
   1bb4c:	200000ac 	.word	0x200000ac
   1bb50:	00017fa1 	.word	0x00017fa1
   1bb54:	000188f9 	.word	0x000188f9
   1bb58:	00018f55 	.word	0x00018f55
   1bb5c:	0001b6d5 	.word	0x0001b6d5
   1bb60:	0001c799 	.word	0x0001c799

0001bb64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1bb64:	b590      	push	{r4, r7, lr}
   1bb66:	b08d      	sub	sp, #52	; 0x34
   1bb68:	af04      	add	r7, sp, #16
   1bb6a:	60f8      	str	r0, [r7, #12]
   1bb6c:	60b9      	str	r1, [r7, #8]
   1bb6e:	603b      	str	r3, [r7, #0]
   1bb70:	1dbb      	adds	r3, r7, #6
   1bb72:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bb74:	1dbb      	adds	r3, r7, #6
   1bb76:	881b      	ldrh	r3, [r3, #0]
   1bb78:	009b      	lsls	r3, r3, #2
   1bb7a:	0018      	movs	r0, r3
   1bb7c:	4b1d      	ldr	r3, [pc, #116]	; (1bbf4 <xTaskCreate+0x90>)
   1bb7e:	4798      	blx	r3
   1bb80:	0003      	movs	r3, r0
   1bb82:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1bb84:	697b      	ldr	r3, [r7, #20]
   1bb86:	2b00      	cmp	r3, #0
   1bb88:	d010      	beq.n	1bbac <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1bb8a:	2054      	movs	r0, #84	; 0x54
   1bb8c:	4b19      	ldr	r3, [pc, #100]	; (1bbf4 <xTaskCreate+0x90>)
   1bb8e:	4798      	blx	r3
   1bb90:	0003      	movs	r3, r0
   1bb92:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1bb94:	69fb      	ldr	r3, [r7, #28]
   1bb96:	2b00      	cmp	r3, #0
   1bb98:	d003      	beq.n	1bba2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1bb9a:	69fb      	ldr	r3, [r7, #28]
   1bb9c:	697a      	ldr	r2, [r7, #20]
   1bb9e:	631a      	str	r2, [r3, #48]	; 0x30
   1bba0:	e006      	b.n	1bbb0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1bba2:	697b      	ldr	r3, [r7, #20]
   1bba4:	0018      	movs	r0, r3
   1bba6:	4b14      	ldr	r3, [pc, #80]	; (1bbf8 <xTaskCreate+0x94>)
   1bba8:	4798      	blx	r3
   1bbaa:	e001      	b.n	1bbb0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1bbac:	2300      	movs	r3, #0
   1bbae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1bbb0:	69fb      	ldr	r3, [r7, #28]
   1bbb2:	2b00      	cmp	r3, #0
   1bbb4:	d016      	beq.n	1bbe4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1bbb6:	1dbb      	adds	r3, r7, #6
   1bbb8:	881a      	ldrh	r2, [r3, #0]
   1bbba:	683c      	ldr	r4, [r7, #0]
   1bbbc:	68b9      	ldr	r1, [r7, #8]
   1bbbe:	68f8      	ldr	r0, [r7, #12]
   1bbc0:	2300      	movs	r3, #0
   1bbc2:	9303      	str	r3, [sp, #12]
   1bbc4:	69fb      	ldr	r3, [r7, #28]
   1bbc6:	9302      	str	r3, [sp, #8]
   1bbc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1bbca:	9301      	str	r3, [sp, #4]
   1bbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1bbce:	9300      	str	r3, [sp, #0]
   1bbd0:	0023      	movs	r3, r4
   1bbd2:	4c0a      	ldr	r4, [pc, #40]	; (1bbfc <xTaskCreate+0x98>)
   1bbd4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1bbd6:	69fb      	ldr	r3, [r7, #28]
   1bbd8:	0018      	movs	r0, r3
   1bbda:	4b09      	ldr	r3, [pc, #36]	; (1bc00 <xTaskCreate+0x9c>)
   1bbdc:	4798      	blx	r3
			xReturn = pdPASS;
   1bbde:	2301      	movs	r3, #1
   1bbe0:	61bb      	str	r3, [r7, #24]
   1bbe2:	e002      	b.n	1bbea <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1bbe4:	2301      	movs	r3, #1
   1bbe6:	425b      	negs	r3, r3
   1bbe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1bbea:	69bb      	ldr	r3, [r7, #24]
	}
   1bbec:	0018      	movs	r0, r3
   1bbee:	46bd      	mov	sp, r7
   1bbf0:	b009      	add	sp, #36	; 0x24
   1bbf2:	bd90      	pop	{r4, r7, pc}
   1bbf4:	0001a041 	.word	0x0001a041
   1bbf8:	0001a105 	.word	0x0001a105
   1bbfc:	0001bc05 	.word	0x0001bc05
   1bc00:	0001bd15 	.word	0x0001bd15

0001bc04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1bc04:	b580      	push	{r7, lr}
   1bc06:	b086      	sub	sp, #24
   1bc08:	af00      	add	r7, sp, #0
   1bc0a:	60f8      	str	r0, [r7, #12]
   1bc0c:	60b9      	str	r1, [r7, #8]
   1bc0e:	607a      	str	r2, [r7, #4]
   1bc10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1bc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc14:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1bc16:	687b      	ldr	r3, [r7, #4]
   1bc18:	009b      	lsls	r3, r3, #2
   1bc1a:	001a      	movs	r2, r3
   1bc1c:	21a5      	movs	r1, #165	; 0xa5
   1bc1e:	4b39      	ldr	r3, [pc, #228]	; (1bd04 <prvInitialiseNewTask+0x100>)
   1bc20:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1bc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bc26:	687b      	ldr	r3, [r7, #4]
   1bc28:	4937      	ldr	r1, [pc, #220]	; (1bd08 <prvInitialiseNewTask+0x104>)
   1bc2a:	468c      	mov	ip, r1
   1bc2c:	4463      	add	r3, ip
   1bc2e:	009b      	lsls	r3, r3, #2
   1bc30:	18d3      	adds	r3, r2, r3
   1bc32:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1bc34:	693b      	ldr	r3, [r7, #16]
   1bc36:	2207      	movs	r2, #7
   1bc38:	4393      	bics	r3, r2
   1bc3a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1bc3c:	693b      	ldr	r3, [r7, #16]
   1bc3e:	2207      	movs	r2, #7
   1bc40:	4013      	ands	r3, r2
   1bc42:	d001      	beq.n	1bc48 <prvInitialiseNewTask+0x44>
   1bc44:	b672      	cpsid	i
   1bc46:	e7fe      	b.n	1bc46 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bc48:	2300      	movs	r3, #0
   1bc4a:	617b      	str	r3, [r7, #20]
   1bc4c:	e013      	b.n	1bc76 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1bc4e:	68ba      	ldr	r2, [r7, #8]
   1bc50:	697b      	ldr	r3, [r7, #20]
   1bc52:	18d3      	adds	r3, r2, r3
   1bc54:	7818      	ldrb	r0, [r3, #0]
   1bc56:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bc58:	2134      	movs	r1, #52	; 0x34
   1bc5a:	697b      	ldr	r3, [r7, #20]
   1bc5c:	18d3      	adds	r3, r2, r3
   1bc5e:	185b      	adds	r3, r3, r1
   1bc60:	1c02      	adds	r2, r0, #0
   1bc62:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1bc64:	68ba      	ldr	r2, [r7, #8]
   1bc66:	697b      	ldr	r3, [r7, #20]
   1bc68:	18d3      	adds	r3, r2, r3
   1bc6a:	781b      	ldrb	r3, [r3, #0]
   1bc6c:	2b00      	cmp	r3, #0
   1bc6e:	d006      	beq.n	1bc7e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1bc70:	697b      	ldr	r3, [r7, #20]
   1bc72:	3301      	adds	r3, #1
   1bc74:	617b      	str	r3, [r7, #20]
   1bc76:	697b      	ldr	r3, [r7, #20]
   1bc78:	2b07      	cmp	r3, #7
   1bc7a:	d9e8      	bls.n	1bc4e <prvInitialiseNewTask+0x4a>
   1bc7c:	e000      	b.n	1bc80 <prvInitialiseNewTask+0x7c>
		{
			break;
   1bc7e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc82:	223b      	movs	r2, #59	; 0x3b
   1bc84:	2100      	movs	r1, #0
   1bc86:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1bc88:	6a3b      	ldr	r3, [r7, #32]
   1bc8a:	2b04      	cmp	r3, #4
   1bc8c:	d901      	bls.n	1bc92 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1bc8e:	2304      	movs	r3, #4
   1bc90:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1bc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc94:	6a3a      	ldr	r2, [r7, #32]
   1bc96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bc9a:	6a3a      	ldr	r2, [r7, #32]
   1bc9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bca0:	2200      	movs	r2, #0
   1bca2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bca6:	3304      	adds	r3, #4
   1bca8:	0018      	movs	r0, r3
   1bcaa:	4b18      	ldr	r3, [pc, #96]	; (1bd0c <prvInitialiseNewTask+0x108>)
   1bcac:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bcb0:	3318      	adds	r3, #24
   1bcb2:	0018      	movs	r0, r3
   1bcb4:	4b15      	ldr	r3, [pc, #84]	; (1bd0c <prvInitialiseNewTask+0x108>)
   1bcb6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1bcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bcba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bcbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bcbe:	6a3b      	ldr	r3, [r7, #32]
   1bcc0:	2205      	movs	r2, #5
   1bcc2:	1ad2      	subs	r2, r2, r3
   1bcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bcc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bcca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bccc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bcd0:	2200      	movs	r2, #0
   1bcd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1bcd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bcd6:	2250      	movs	r2, #80	; 0x50
   1bcd8:	2100      	movs	r1, #0
   1bcda:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1bcdc:	683a      	ldr	r2, [r7, #0]
   1bcde:	68f9      	ldr	r1, [r7, #12]
   1bce0:	693b      	ldr	r3, [r7, #16]
   1bce2:	0018      	movs	r0, r3
   1bce4:	4b0a      	ldr	r3, [pc, #40]	; (1bd10 <prvInitialiseNewTask+0x10c>)
   1bce6:	4798      	blx	r3
   1bce8:	0002      	movs	r2, r0
   1bcea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1bcec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bcf0:	2b00      	cmp	r3, #0
   1bcf2:	d002      	beq.n	1bcfa <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bcf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1bcf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1bcfa:	46c0      	nop			; (mov r8, r8)
   1bcfc:	46bd      	mov	sp, r7
   1bcfe:	b006      	add	sp, #24
   1bd00:	bd80      	pop	{r7, pc}
   1bd02:	46c0      	nop			; (mov r8, r8)
   1bd04:	0003438b 	.word	0x0003438b
   1bd08:	3fffffff 	.word	0x3fffffff
   1bd0c:	00019cb5 	.word	0x00019cb5
   1bd10:	00019dcd 	.word	0x00019dcd

0001bd14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1bd14:	b580      	push	{r7, lr}
   1bd16:	b082      	sub	sp, #8
   1bd18:	af00      	add	r7, sp, #0
   1bd1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1bd1c:	4b60      	ldr	r3, [pc, #384]	; (1bea0 <prvAddNewTaskToReadyList+0x18c>)
   1bd1e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1bd20:	4b60      	ldr	r3, [pc, #384]	; (1bea4 <prvAddNewTaskToReadyList+0x190>)
   1bd22:	681b      	ldr	r3, [r3, #0]
   1bd24:	1c5a      	adds	r2, r3, #1
   1bd26:	4b5f      	ldr	r3, [pc, #380]	; (1bea4 <prvAddNewTaskToReadyList+0x190>)
   1bd28:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1bd2a:	4b5f      	ldr	r3, [pc, #380]	; (1bea8 <prvAddNewTaskToReadyList+0x194>)
   1bd2c:	681b      	ldr	r3, [r3, #0]
   1bd2e:	2b00      	cmp	r3, #0
   1bd30:	d109      	bne.n	1bd46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1bd32:	4b5d      	ldr	r3, [pc, #372]	; (1bea8 <prvAddNewTaskToReadyList+0x194>)
   1bd34:	687a      	ldr	r2, [r7, #4]
   1bd36:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1bd38:	4b5a      	ldr	r3, [pc, #360]	; (1bea4 <prvAddNewTaskToReadyList+0x190>)
   1bd3a:	681b      	ldr	r3, [r3, #0]
   1bd3c:	2b01      	cmp	r3, #1
   1bd3e:	d110      	bne.n	1bd62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1bd40:	4b5a      	ldr	r3, [pc, #360]	; (1beac <prvAddNewTaskToReadyList+0x198>)
   1bd42:	4798      	blx	r3
   1bd44:	e00d      	b.n	1bd62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1bd46:	4b5a      	ldr	r3, [pc, #360]	; (1beb0 <prvAddNewTaskToReadyList+0x19c>)
   1bd48:	681b      	ldr	r3, [r3, #0]
   1bd4a:	2b00      	cmp	r3, #0
   1bd4c:	d109      	bne.n	1bd62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1bd4e:	4b56      	ldr	r3, [pc, #344]	; (1bea8 <prvAddNewTaskToReadyList+0x194>)
   1bd50:	681b      	ldr	r3, [r3, #0]
   1bd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bd54:	687b      	ldr	r3, [r7, #4]
   1bd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bd58:	429a      	cmp	r2, r3
   1bd5a:	d802      	bhi.n	1bd62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1bd5c:	4b52      	ldr	r3, [pc, #328]	; (1bea8 <prvAddNewTaskToReadyList+0x194>)
   1bd5e:	687a      	ldr	r2, [r7, #4]
   1bd60:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1bd62:	4b54      	ldr	r3, [pc, #336]	; (1beb4 <prvAddNewTaskToReadyList+0x1a0>)
   1bd64:	681b      	ldr	r3, [r3, #0]
   1bd66:	1c5a      	adds	r2, r3, #1
   1bd68:	4b52      	ldr	r3, [pc, #328]	; (1beb4 <prvAddNewTaskToReadyList+0x1a0>)
   1bd6a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1bd6c:	4b51      	ldr	r3, [pc, #324]	; (1beb4 <prvAddNewTaskToReadyList+0x1a0>)
   1bd6e:	681a      	ldr	r2, [r3, #0]
   1bd70:	687b      	ldr	r3, [r7, #4]
   1bd72:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1bd74:	687b      	ldr	r3, [r7, #4]
   1bd76:	2b00      	cmp	r3, #0
   1bd78:	d052      	beq.n	1be20 <prvAddNewTaskToReadyList+0x10c>
   1bd7a:	2003      	movs	r0, #3
   1bd7c:	4b4e      	ldr	r3, [pc, #312]	; (1beb8 <prvAddNewTaskToReadyList+0x1a4>)
   1bd7e:	4798      	blx	r3
   1bd80:	0003      	movs	r3, r0
   1bd82:	b29a      	uxth	r2, r3
   1bd84:	687b      	ldr	r3, [r7, #4]
   1bd86:	0011      	movs	r1, r2
   1bd88:	0018      	movs	r0, r3
   1bd8a:	4b4c      	ldr	r3, [pc, #304]	; (1bebc <prvAddNewTaskToReadyList+0x1a8>)
   1bd8c:	4798      	blx	r3
   1bd8e:	4b4c      	ldr	r3, [pc, #304]	; (1bec0 <prvAddNewTaskToReadyList+0x1ac>)
   1bd90:	881a      	ldrh	r2, [r3, #0]
   1bd92:	687b      	ldr	r3, [r7, #4]
   1bd94:	0011      	movs	r1, r2
   1bd96:	0018      	movs	r0, r3
   1bd98:	4b4a      	ldr	r3, [pc, #296]	; (1bec4 <prvAddNewTaskToReadyList+0x1b0>)
   1bd9a:	4798      	blx	r3
   1bd9c:	687b      	ldr	r3, [r7, #4]
   1bd9e:	0018      	movs	r0, r3
   1bda0:	4b49      	ldr	r3, [pc, #292]	; (1bec8 <prvAddNewTaskToReadyList+0x1b4>)
   1bda2:	4798      	blx	r3
   1bda4:	0003      	movs	r3, r0
   1bda6:	b2d9      	uxtb	r1, r3
   1bda8:	687b      	ldr	r3, [r7, #4]
   1bdaa:	3334      	adds	r3, #52	; 0x34
   1bdac:	001a      	movs	r2, r3
   1bdae:	2003      	movs	r0, #3
   1bdb0:	4b46      	ldr	r3, [pc, #280]	; (1becc <prvAddNewTaskToReadyList+0x1b8>)
   1bdb2:	4798      	blx	r3
   1bdb4:	687b      	ldr	r3, [r7, #4]
   1bdb6:	0018      	movs	r0, r3
   1bdb8:	4b43      	ldr	r3, [pc, #268]	; (1bec8 <prvAddNewTaskToReadyList+0x1b4>)
   1bdba:	4798      	blx	r3
   1bdbc:	0003      	movs	r3, r0
   1bdbe:	b2d9      	uxtb	r1, r3
   1bdc0:	687b      	ldr	r3, [r7, #4]
   1bdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bdc4:	b2db      	uxtb	r3, r3
   1bdc6:	001a      	movs	r2, r3
   1bdc8:	2003      	movs	r0, #3
   1bdca:	4b41      	ldr	r3, [pc, #260]	; (1bed0 <prvAddNewTaskToReadyList+0x1bc>)
   1bdcc:	4798      	blx	r3
   1bdce:	4b41      	ldr	r3, [pc, #260]	; (1bed4 <prvAddNewTaskToReadyList+0x1c0>)
   1bdd0:	4798      	blx	r3
   1bdd2:	0003      	movs	r3, r0
   1bdd4:	0018      	movs	r0, r3
   1bdd6:	4b40      	ldr	r3, [pc, #256]	; (1bed8 <prvAddNewTaskToReadyList+0x1c4>)
   1bdd8:	4798      	blx	r3
   1bdda:	0003      	movs	r3, r0
   1bddc:	001a      	movs	r2, r3
   1bdde:	4b3f      	ldr	r3, [pc, #252]	; (1bedc <prvAddNewTaskToReadyList+0x1c8>)
   1bde0:	881b      	ldrh	r3, [r3, #0]
   1bde2:	4013      	ands	r3, r2
   1bde4:	b29b      	uxth	r3, r3
   1bde6:	2b00      	cmp	r3, #0
   1bde8:	d016      	beq.n	1be18 <prvAddNewTaskToReadyList+0x104>
   1bdea:	687b      	ldr	r3, [r7, #4]
   1bdec:	0018      	movs	r0, r3
   1bdee:	4b3a      	ldr	r3, [pc, #232]	; (1bed8 <prvAddNewTaskToReadyList+0x1c4>)
   1bdf0:	4798      	blx	r3
   1bdf2:	0003      	movs	r3, r0
   1bdf4:	001a      	movs	r2, r3
   1bdf6:	4b39      	ldr	r3, [pc, #228]	; (1bedc <prvAddNewTaskToReadyList+0x1c8>)
   1bdf8:	881b      	ldrh	r3, [r3, #0]
   1bdfa:	4013      	ands	r3, r2
   1bdfc:	b29b      	uxth	r3, r3
   1bdfe:	2b00      	cmp	r3, #0
   1be00:	d00a      	beq.n	1be18 <prvAddNewTaskToReadyList+0x104>
   1be02:	687b      	ldr	r3, [r7, #4]
   1be04:	0018      	movs	r0, r3
   1be06:	4b30      	ldr	r3, [pc, #192]	; (1bec8 <prvAddNewTaskToReadyList+0x1b4>)
   1be08:	4798      	blx	r3
   1be0a:	0003      	movs	r3, r0
   1be0c:	b2db      	uxtb	r3, r3
   1be0e:	001a      	movs	r2, r3
   1be10:	2103      	movs	r1, #3
   1be12:	201b      	movs	r0, #27
   1be14:	4b32      	ldr	r3, [pc, #200]	; (1bee0 <prvAddNewTaskToReadyList+0x1cc>)
   1be16:	4798      	blx	r3
   1be18:	687b      	ldr	r3, [r7, #4]
   1be1a:	0018      	movs	r0, r3
   1be1c:	4b31      	ldr	r3, [pc, #196]	; (1bee4 <prvAddNewTaskToReadyList+0x1d0>)
   1be1e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1be20:	687b      	ldr	r3, [r7, #4]
   1be22:	0018      	movs	r0, r3
   1be24:	4b2c      	ldr	r3, [pc, #176]	; (1bed8 <prvAddNewTaskToReadyList+0x1c4>)
   1be26:	4798      	blx	r3
   1be28:	0003      	movs	r3, r0
   1be2a:	001a      	movs	r2, r3
   1be2c:	4b2b      	ldr	r3, [pc, #172]	; (1bedc <prvAddNewTaskToReadyList+0x1c8>)
   1be2e:	881b      	ldrh	r3, [r3, #0]
   1be30:	4013      	ands	r3, r2
   1be32:	b29b      	uxth	r3, r3
   1be34:	2b00      	cmp	r3, #0
   1be36:	d008      	beq.n	1be4a <prvAddNewTaskToReadyList+0x136>
   1be38:	687b      	ldr	r3, [r7, #4]
   1be3a:	0018      	movs	r0, r3
   1be3c:	4b22      	ldr	r3, [pc, #136]	; (1bec8 <prvAddNewTaskToReadyList+0x1b4>)
   1be3e:	4798      	blx	r3
   1be40:	0003      	movs	r3, r0
   1be42:	b2db      	uxtb	r3, r3
   1be44:	0018      	movs	r0, r3
   1be46:	4b28      	ldr	r3, [pc, #160]	; (1bee8 <prvAddNewTaskToReadyList+0x1d4>)
   1be48:	4798      	blx	r3
   1be4a:	687b      	ldr	r3, [r7, #4]
   1be4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be4e:	4b27      	ldr	r3, [pc, #156]	; (1beec <prvAddNewTaskToReadyList+0x1d8>)
   1be50:	681b      	ldr	r3, [r3, #0]
   1be52:	429a      	cmp	r2, r3
   1be54:	d903      	bls.n	1be5e <prvAddNewTaskToReadyList+0x14a>
   1be56:	687b      	ldr	r3, [r7, #4]
   1be58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be5a:	4b24      	ldr	r3, [pc, #144]	; (1beec <prvAddNewTaskToReadyList+0x1d8>)
   1be5c:	601a      	str	r2, [r3, #0]
   1be5e:	687b      	ldr	r3, [r7, #4]
   1be60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be62:	0013      	movs	r3, r2
   1be64:	009b      	lsls	r3, r3, #2
   1be66:	189b      	adds	r3, r3, r2
   1be68:	009b      	lsls	r3, r3, #2
   1be6a:	4a21      	ldr	r2, [pc, #132]	; (1bef0 <prvAddNewTaskToReadyList+0x1dc>)
   1be6c:	189a      	adds	r2, r3, r2
   1be6e:	687b      	ldr	r3, [r7, #4]
   1be70:	3304      	adds	r3, #4
   1be72:	0019      	movs	r1, r3
   1be74:	0010      	movs	r0, r2
   1be76:	4b1f      	ldr	r3, [pc, #124]	; (1bef4 <prvAddNewTaskToReadyList+0x1e0>)
   1be78:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1be7a:	4b1f      	ldr	r3, [pc, #124]	; (1bef8 <prvAddNewTaskToReadyList+0x1e4>)
   1be7c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1be7e:	4b0c      	ldr	r3, [pc, #48]	; (1beb0 <prvAddNewTaskToReadyList+0x19c>)
   1be80:	681b      	ldr	r3, [r3, #0]
   1be82:	2b00      	cmp	r3, #0
   1be84:	d008      	beq.n	1be98 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1be86:	4b08      	ldr	r3, [pc, #32]	; (1bea8 <prvAddNewTaskToReadyList+0x194>)
   1be88:	681b      	ldr	r3, [r3, #0]
   1be8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1be8c:	687b      	ldr	r3, [r7, #4]
   1be8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1be90:	429a      	cmp	r2, r3
   1be92:	d201      	bcs.n	1be98 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1be94:	4b19      	ldr	r3, [pc, #100]	; (1befc <prvAddNewTaskToReadyList+0x1e8>)
   1be96:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1be98:	46c0      	nop			; (mov r8, r8)
   1be9a:	46bd      	mov	sp, r7
   1be9c:	b002      	add	sp, #8
   1be9e:	bd80      	pop	{r7, pc}
   1bea0:	00019f09 	.word	0x00019f09
   1bea4:	20003da0 	.word	0x20003da0
   1bea8:	20003cc8 	.word	0x20003cc8
   1beac:	0001ca35 	.word	0x0001ca35
   1beb0:	20003dac 	.word	0x20003dac
   1beb4:	20003dbc 	.word	0x20003dbc
   1beb8:	00019481 	.word	0x00019481
   1bebc:	00017f25 	.word	0x00017f25
   1bec0:	200000ba 	.word	0x200000ba
   1bec4:	00017f61 	.word	0x00017f61
   1bec8:	00017ee1 	.word	0x00017ee1
   1becc:	000196b1 	.word	0x000196b1
   1bed0:	00018e15 	.word	0x00018e15
   1bed4:	0001819d 	.word	0x0001819d
   1bed8:	00017f01 	.word	0x00017f01
   1bedc:	200000b8 	.word	0x200000b8
   1bee0:	000188f9 	.word	0x000188f9
   1bee4:	00018061 	.word	0x00018061
   1bee8:	000186b1 	.word	0x000186b1
   1beec:	20003da8 	.word	0x20003da8
   1bef0:	20003ccc 	.word	0x20003ccc
   1bef4:	00019ccb 	.word	0x00019ccb
   1bef8:	00019f2d 	.word	0x00019f2d
   1befc:	00019ef1 	.word	0x00019ef1

0001bf00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1bf00:	b580      	push	{r7, lr}
   1bf02:	b084      	sub	sp, #16
   1bf04:	af00      	add	r7, sp, #0
   1bf06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1bf08:	2300      	movs	r3, #0
   1bf0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1bf0c:	687b      	ldr	r3, [r7, #4]
   1bf0e:	2b00      	cmp	r3, #0
   1bf10:	d045      	beq.n	1bf9e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1bf12:	4b27      	ldr	r3, [pc, #156]	; (1bfb0 <vTaskDelay+0xb0>)
   1bf14:	681b      	ldr	r3, [r3, #0]
   1bf16:	2b00      	cmp	r3, #0
   1bf18:	d001      	beq.n	1bf1e <vTaskDelay+0x1e>
   1bf1a:	b672      	cpsid	i
   1bf1c:	e7fe      	b.n	1bf1c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1bf1e:	4b25      	ldr	r3, [pc, #148]	; (1bfb4 <vTaskDelay+0xb4>)
   1bf20:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1bf22:	4b25      	ldr	r3, [pc, #148]	; (1bfb8 <vTaskDelay+0xb8>)
   1bf24:	681b      	ldr	r3, [r3, #0]
   1bf26:	0018      	movs	r0, r3
   1bf28:	4b24      	ldr	r3, [pc, #144]	; (1bfbc <vTaskDelay+0xbc>)
   1bf2a:	4798      	blx	r3
   1bf2c:	0003      	movs	r3, r0
   1bf2e:	001a      	movs	r2, r3
   1bf30:	4b23      	ldr	r3, [pc, #140]	; (1bfc0 <vTaskDelay+0xc0>)
   1bf32:	881b      	ldrh	r3, [r3, #0]
   1bf34:	4013      	ands	r3, r2
   1bf36:	b29b      	uxth	r3, r3
   1bf38:	2b00      	cmp	r3, #0
   1bf3a:	d00e      	beq.n	1bf5a <vTaskDelay+0x5a>
   1bf3c:	687b      	ldr	r3, [r7, #4]
   1bf3e:	0019      	movs	r1, r3
   1bf40:	2089      	movs	r0, #137	; 0x89
   1bf42:	4b20      	ldr	r3, [pc, #128]	; (1bfc4 <vTaskDelay+0xc4>)
   1bf44:	4798      	blx	r3
   1bf46:	4b1c      	ldr	r3, [pc, #112]	; (1bfb8 <vTaskDelay+0xb8>)
   1bf48:	681b      	ldr	r3, [r3, #0]
   1bf4a:	0018      	movs	r0, r3
   1bf4c:	4b1e      	ldr	r3, [pc, #120]	; (1bfc8 <vTaskDelay+0xc8>)
   1bf4e:	4798      	blx	r3
   1bf50:	0003      	movs	r3, r0
   1bf52:	b2db      	uxtb	r3, r3
   1bf54:	0018      	movs	r0, r3
   1bf56:	4b1d      	ldr	r3, [pc, #116]	; (1bfcc <vTaskDelay+0xcc>)
   1bf58:	4798      	blx	r3
   1bf5a:	4b1d      	ldr	r3, [pc, #116]	; (1bfd0 <vTaskDelay+0xd0>)
   1bf5c:	4798      	blx	r3
   1bf5e:	0003      	movs	r3, r0
   1bf60:	0018      	movs	r0, r3
   1bf62:	4b16      	ldr	r3, [pc, #88]	; (1bfbc <vTaskDelay+0xbc>)
   1bf64:	4798      	blx	r3
   1bf66:	0003      	movs	r3, r0
   1bf68:	001a      	movs	r2, r3
   1bf6a:	4b15      	ldr	r3, [pc, #84]	; (1bfc0 <vTaskDelay+0xc0>)
   1bf6c:	881b      	ldrh	r3, [r3, #0]
   1bf6e:	4013      	ands	r3, r2
   1bf70:	b29b      	uxth	r3, r3
   1bf72:	2b00      	cmp	r3, #0
   1bf74:	d00a      	beq.n	1bf8c <vTaskDelay+0x8c>
   1bf76:	4b16      	ldr	r3, [pc, #88]	; (1bfd0 <vTaskDelay+0xd0>)
   1bf78:	4798      	blx	r3
   1bf7a:	0003      	movs	r3, r0
   1bf7c:	0018      	movs	r0, r3
   1bf7e:	4b12      	ldr	r3, [pc, #72]	; (1bfc8 <vTaskDelay+0xc8>)
   1bf80:	4798      	blx	r3
   1bf82:	0003      	movs	r3, r0
   1bf84:	b2db      	uxtb	r3, r3
   1bf86:	0018      	movs	r0, r3
   1bf88:	4b10      	ldr	r3, [pc, #64]	; (1bfcc <vTaskDelay+0xcc>)
   1bf8a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1bf8c:	687b      	ldr	r3, [r7, #4]
   1bf8e:	2100      	movs	r1, #0
   1bf90:	0018      	movs	r0, r3
   1bf92:	4b10      	ldr	r3, [pc, #64]	; (1bfd4 <vTaskDelay+0xd4>)
   1bf94:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1bf96:	4b10      	ldr	r3, [pc, #64]	; (1bfd8 <vTaskDelay+0xd8>)
   1bf98:	4798      	blx	r3
   1bf9a:	0003      	movs	r3, r0
   1bf9c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1bf9e:	68fb      	ldr	r3, [r7, #12]
   1bfa0:	2b00      	cmp	r3, #0
   1bfa2:	d101      	bne.n	1bfa8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1bfa4:	4b0d      	ldr	r3, [pc, #52]	; (1bfdc <vTaskDelay+0xdc>)
   1bfa6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1bfa8:	46c0      	nop			; (mov r8, r8)
   1bfaa:	46bd      	mov	sp, r7
   1bfac:	b004      	add	sp, #16
   1bfae:	bd80      	pop	{r7, pc}
   1bfb0:	20003dc8 	.word	0x20003dc8
   1bfb4:	0001c1c1 	.word	0x0001c1c1
   1bfb8:	20003cc8 	.word	0x20003cc8
   1bfbc:	00017f01 	.word	0x00017f01
   1bfc0:	200000b8 	.word	0x200000b8
   1bfc4:	00018c01 	.word	0x00018c01
   1bfc8:	00017ee1 	.word	0x00017ee1
   1bfcc:	00019091 	.word	0x00019091
   1bfd0:	0001819d 	.word	0x0001819d
   1bfd4:	0001d119 	.word	0x0001d119
   1bfd8:	0001c1d9 	.word	0x0001c1d9
   1bfdc:	00019ef1 	.word	0x00019ef1

0001bfe0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1bfe0:	b580      	push	{r7, lr}
   1bfe2:	b084      	sub	sp, #16
   1bfe4:	af00      	add	r7, sp, #0
   1bfe6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1bfe8:	4b42      	ldr	r3, [pc, #264]	; (1c0f4 <vTaskSuspend+0x114>)
   1bfea:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1bfec:	687b      	ldr	r3, [r7, #4]
   1bfee:	2b00      	cmp	r3, #0
   1bff0:	d102      	bne.n	1bff8 <vTaskSuspend+0x18>
   1bff2:	4b41      	ldr	r3, [pc, #260]	; (1c0f8 <vTaskSuspend+0x118>)
   1bff4:	681b      	ldr	r3, [r3, #0]
   1bff6:	e000      	b.n	1bffa <vTaskSuspend+0x1a>
   1bff8:	687b      	ldr	r3, [r7, #4]
   1bffa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1bffc:	4b3f      	ldr	r3, [pc, #252]	; (1c0fc <vTaskSuspend+0x11c>)
   1bffe:	4798      	blx	r3
   1c000:	0003      	movs	r3, r0
   1c002:	0018      	movs	r0, r3
   1c004:	4b3e      	ldr	r3, [pc, #248]	; (1c100 <vTaskSuspend+0x120>)
   1c006:	4798      	blx	r3
   1c008:	0003      	movs	r3, r0
   1c00a:	001a      	movs	r2, r3
   1c00c:	4b3d      	ldr	r3, [pc, #244]	; (1c104 <vTaskSuspend+0x124>)
   1c00e:	881b      	ldrh	r3, [r3, #0]
   1c010:	4013      	ands	r3, r2
   1c012:	b29b      	uxth	r3, r3
   1c014:	2b00      	cmp	r3, #0
   1c016:	d016      	beq.n	1c046 <vTaskSuspend+0x66>
   1c018:	68fb      	ldr	r3, [r7, #12]
   1c01a:	0018      	movs	r0, r3
   1c01c:	4b38      	ldr	r3, [pc, #224]	; (1c100 <vTaskSuspend+0x120>)
   1c01e:	4798      	blx	r3
   1c020:	0003      	movs	r3, r0
   1c022:	001a      	movs	r2, r3
   1c024:	4b37      	ldr	r3, [pc, #220]	; (1c104 <vTaskSuspend+0x124>)
   1c026:	881b      	ldrh	r3, [r3, #0]
   1c028:	4013      	ands	r3, r2
   1c02a:	b29b      	uxth	r3, r3
   1c02c:	2b00      	cmp	r3, #0
   1c02e:	d00a      	beq.n	1c046 <vTaskSuspend+0x66>
   1c030:	68fb      	ldr	r3, [r7, #12]
   1c032:	0018      	movs	r0, r3
   1c034:	4b34      	ldr	r3, [pc, #208]	; (1c108 <vTaskSuspend+0x128>)
   1c036:	4798      	blx	r3
   1c038:	0003      	movs	r3, r0
   1c03a:	b2db      	uxtb	r3, r3
   1c03c:	001a      	movs	r2, r3
   1c03e:	2103      	movs	r1, #3
   1c040:	208a      	movs	r0, #138	; 0x8a
   1c042:	4b32      	ldr	r3, [pc, #200]	; (1c10c <vTaskSuspend+0x12c>)
   1c044:	4798      	blx	r3
   1c046:	68fb      	ldr	r3, [r7, #12]
   1c048:	0018      	movs	r0, r3
   1c04a:	4b2f      	ldr	r3, [pc, #188]	; (1c108 <vTaskSuspend+0x128>)
   1c04c:	4798      	blx	r3
   1c04e:	0003      	movs	r3, r0
   1c050:	b2db      	uxtb	r3, r3
   1c052:	0018      	movs	r0, r3
   1c054:	4b2e      	ldr	r3, [pc, #184]	; (1c110 <vTaskSuspend+0x130>)
   1c056:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c058:	68fb      	ldr	r3, [r7, #12]
   1c05a:	3304      	adds	r3, #4
   1c05c:	0018      	movs	r0, r3
   1c05e:	4b2d      	ldr	r3, [pc, #180]	; (1c114 <vTaskSuspend+0x134>)
   1c060:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c062:	68fb      	ldr	r3, [r7, #12]
   1c064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c066:	2b00      	cmp	r3, #0
   1c068:	d004      	beq.n	1c074 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c06a:	68fb      	ldr	r3, [r7, #12]
   1c06c:	3318      	adds	r3, #24
   1c06e:	0018      	movs	r0, r3
   1c070:	4b28      	ldr	r3, [pc, #160]	; (1c114 <vTaskSuspend+0x134>)
   1c072:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1c074:	68fb      	ldr	r3, [r7, #12]
   1c076:	1d1a      	adds	r2, r3, #4
   1c078:	4b27      	ldr	r3, [pc, #156]	; (1c118 <vTaskSuspend+0x138>)
   1c07a:	0011      	movs	r1, r2
   1c07c:	0018      	movs	r0, r3
   1c07e:	4b27      	ldr	r3, [pc, #156]	; (1c11c <vTaskSuspend+0x13c>)
   1c080:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1c082:	68fb      	ldr	r3, [r7, #12]
   1c084:	2250      	movs	r2, #80	; 0x50
   1c086:	5c9b      	ldrb	r3, [r3, r2]
   1c088:	b2db      	uxtb	r3, r3
   1c08a:	2b01      	cmp	r3, #1
   1c08c:	d103      	bne.n	1c096 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c08e:	68fb      	ldr	r3, [r7, #12]
   1c090:	2250      	movs	r2, #80	; 0x50
   1c092:	2100      	movs	r1, #0
   1c094:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1c096:	4b22      	ldr	r3, [pc, #136]	; (1c120 <vTaskSuspend+0x140>)
   1c098:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1c09a:	4b22      	ldr	r3, [pc, #136]	; (1c124 <vTaskSuspend+0x144>)
   1c09c:	681b      	ldr	r3, [r3, #0]
   1c09e:	2b00      	cmp	r3, #0
   1c0a0:	d005      	beq.n	1c0ae <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1c0a2:	4b14      	ldr	r3, [pc, #80]	; (1c0f4 <vTaskSuspend+0x114>)
   1c0a4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1c0a6:	4b20      	ldr	r3, [pc, #128]	; (1c128 <vTaskSuspend+0x148>)
   1c0a8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1c0aa:	4b1d      	ldr	r3, [pc, #116]	; (1c120 <vTaskSuspend+0x140>)
   1c0ac:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1c0ae:	4b12      	ldr	r3, [pc, #72]	; (1c0f8 <vTaskSuspend+0x118>)
   1c0b0:	681b      	ldr	r3, [r3, #0]
   1c0b2:	68fa      	ldr	r2, [r7, #12]
   1c0b4:	429a      	cmp	r2, r3
   1c0b6:	d118      	bne.n	1c0ea <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1c0b8:	4b1a      	ldr	r3, [pc, #104]	; (1c124 <vTaskSuspend+0x144>)
   1c0ba:	681b      	ldr	r3, [r3, #0]
   1c0bc:	2b00      	cmp	r3, #0
   1c0be:	d008      	beq.n	1c0d2 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c0c0:	4b1a      	ldr	r3, [pc, #104]	; (1c12c <vTaskSuspend+0x14c>)
   1c0c2:	681b      	ldr	r3, [r3, #0]
   1c0c4:	2b00      	cmp	r3, #0
   1c0c6:	d001      	beq.n	1c0cc <vTaskSuspend+0xec>
   1c0c8:	b672      	cpsid	i
   1c0ca:	e7fe      	b.n	1c0ca <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1c0cc:	4b18      	ldr	r3, [pc, #96]	; (1c130 <vTaskSuspend+0x150>)
   1c0ce:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c0d0:	e00b      	b.n	1c0ea <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1c0d2:	4b11      	ldr	r3, [pc, #68]	; (1c118 <vTaskSuspend+0x138>)
   1c0d4:	681a      	ldr	r2, [r3, #0]
   1c0d6:	4b17      	ldr	r3, [pc, #92]	; (1c134 <vTaskSuspend+0x154>)
   1c0d8:	681b      	ldr	r3, [r3, #0]
   1c0da:	429a      	cmp	r2, r3
   1c0dc:	d103      	bne.n	1c0e6 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1c0de:	4b06      	ldr	r3, [pc, #24]	; (1c0f8 <vTaskSuspend+0x118>)
   1c0e0:	2200      	movs	r2, #0
   1c0e2:	601a      	str	r2, [r3, #0]
	}
   1c0e4:	e001      	b.n	1c0ea <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1c0e6:	4b14      	ldr	r3, [pc, #80]	; (1c138 <vTaskSuspend+0x158>)
   1c0e8:	4798      	blx	r3
	}
   1c0ea:	46c0      	nop			; (mov r8, r8)
   1c0ec:	46bd      	mov	sp, r7
   1c0ee:	b004      	add	sp, #16
   1c0f0:	bd80      	pop	{r7, pc}
   1c0f2:	46c0      	nop			; (mov r8, r8)
   1c0f4:	00019f09 	.word	0x00019f09
   1c0f8:	20003cc8 	.word	0x20003cc8
   1c0fc:	0001819d 	.word	0x0001819d
   1c100:	00017f01 	.word	0x00017f01
   1c104:	200000b8 	.word	0x200000b8
   1c108:	00017ee1 	.word	0x00017ee1
   1c10c:	000188f9 	.word	0x000188f9
   1c110:	00019091 	.word	0x00019091
   1c114:	00019d7b 	.word	0x00019d7b
   1c118:	20003d8c 	.word	0x20003d8c
   1c11c:	00019ccb 	.word	0x00019ccb
   1c120:	00019f2d 	.word	0x00019f2d
   1c124:	20003dac 	.word	0x20003dac
   1c128:	0001cbc5 	.word	0x0001cbc5
   1c12c:	20003dc8 	.word	0x20003dc8
   1c130:	00019ef1 	.word	0x00019ef1
   1c134:	20003da0 	.word	0x20003da0
   1c138:	0001c555 	.word	0x0001c555

0001c13c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c13c:	b590      	push	{r4, r7, lr}
   1c13e:	b085      	sub	sp, #20
   1c140:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c142:	4916      	ldr	r1, [pc, #88]	; (1c19c <vTaskStartScheduler+0x60>)
   1c144:	4816      	ldr	r0, [pc, #88]	; (1c1a0 <vTaskStartScheduler+0x64>)
   1c146:	4b17      	ldr	r3, [pc, #92]	; (1c1a4 <vTaskStartScheduler+0x68>)
   1c148:	9301      	str	r3, [sp, #4]
   1c14a:	2300      	movs	r3, #0
   1c14c:	9300      	str	r3, [sp, #0]
   1c14e:	2300      	movs	r3, #0
   1c150:	2296      	movs	r2, #150	; 0x96
   1c152:	4c15      	ldr	r4, [pc, #84]	; (1c1a8 <vTaskStartScheduler+0x6c>)
   1c154:	47a0      	blx	r4
   1c156:	0003      	movs	r3, r0
   1c158:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c15a:	687b      	ldr	r3, [r7, #4]
   1c15c:	2b01      	cmp	r3, #1
   1c15e:	d103      	bne.n	1c168 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1c160:	4b12      	ldr	r3, [pc, #72]	; (1c1ac <vTaskStartScheduler+0x70>)
   1c162:	4798      	blx	r3
   1c164:	0003      	movs	r3, r0
   1c166:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c168:	687b      	ldr	r3, [r7, #4]
   1c16a:	2b01      	cmp	r3, #1
   1c16c:	d10d      	bne.n	1c18a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1c16e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1c170:	4b0f      	ldr	r3, [pc, #60]	; (1c1b0 <vTaskStartScheduler+0x74>)
   1c172:	2201      	movs	r2, #1
   1c174:	4252      	negs	r2, r2
   1c176:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1c178:	4b0e      	ldr	r3, [pc, #56]	; (1c1b4 <vTaskStartScheduler+0x78>)
   1c17a:	2201      	movs	r2, #1
   1c17c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1c17e:	4b0e      	ldr	r3, [pc, #56]	; (1c1b8 <vTaskStartScheduler+0x7c>)
   1c180:	2200      	movs	r2, #0
   1c182:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1c184:	4b0d      	ldr	r3, [pc, #52]	; (1c1bc <vTaskStartScheduler+0x80>)
   1c186:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1c188:	e004      	b.n	1c194 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1c18a:	687b      	ldr	r3, [r7, #4]
   1c18c:	3301      	adds	r3, #1
   1c18e:	d101      	bne.n	1c194 <vTaskStartScheduler+0x58>
   1c190:	b672      	cpsid	i
   1c192:	e7fe      	b.n	1c192 <vTaskStartScheduler+0x56>
}
   1c194:	46c0      	nop			; (mov r8, r8)
   1c196:	46bd      	mov	sp, r7
   1c198:	b003      	add	sp, #12
   1c19a:	bd90      	pop	{r4, r7, pc}
   1c19c:	00037a8c 	.word	0x00037a8c
   1c1a0:	0001ca0d 	.word	0x0001ca0d
   1c1a4:	20003dc4 	.word	0x20003dc4
   1c1a8:	0001bb65 	.word	0x0001bb65
   1c1ac:	0001d1cd 	.word	0x0001d1cd
   1c1b0:	20003dc0 	.word	0x20003dc0
   1c1b4:	20003dac 	.word	0x20003dac
   1c1b8:	20003da4 	.word	0x20003da4
   1c1bc:	00019e99 	.word	0x00019e99

0001c1c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1c1c0:	b580      	push	{r7, lr}
   1c1c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1c1c4:	4b03      	ldr	r3, [pc, #12]	; (1c1d4 <vTaskSuspendAll+0x14>)
   1c1c6:	681b      	ldr	r3, [r3, #0]
   1c1c8:	1c5a      	adds	r2, r3, #1
   1c1ca:	4b02      	ldr	r3, [pc, #8]	; (1c1d4 <vTaskSuspendAll+0x14>)
   1c1cc:	601a      	str	r2, [r3, #0]
}
   1c1ce:	46c0      	nop			; (mov r8, r8)
   1c1d0:	46bd      	mov	sp, r7
   1c1d2:	bd80      	pop	{r7, pc}
   1c1d4:	20003dc8 	.word	0x20003dc8

0001c1d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1c1d8:	b580      	push	{r7, lr}
   1c1da:	b084      	sub	sp, #16
   1c1dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1c1de:	2300      	movs	r3, #0
   1c1e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1c1e2:	2300      	movs	r3, #0
   1c1e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1c1e6:	4b45      	ldr	r3, [pc, #276]	; (1c2fc <xTaskResumeAll+0x124>)
   1c1e8:	681b      	ldr	r3, [r3, #0]
   1c1ea:	2b00      	cmp	r3, #0
   1c1ec:	d101      	bne.n	1c1f2 <xTaskResumeAll+0x1a>
   1c1ee:	b672      	cpsid	i
   1c1f0:	e7fe      	b.n	1c1f0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1c1f2:	4b43      	ldr	r3, [pc, #268]	; (1c300 <xTaskResumeAll+0x128>)
   1c1f4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1c1f6:	4b41      	ldr	r3, [pc, #260]	; (1c2fc <xTaskResumeAll+0x124>)
   1c1f8:	681b      	ldr	r3, [r3, #0]
   1c1fa:	1e5a      	subs	r2, r3, #1
   1c1fc:	4b3f      	ldr	r3, [pc, #252]	; (1c2fc <xTaskResumeAll+0x124>)
   1c1fe:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c200:	4b3e      	ldr	r3, [pc, #248]	; (1c2fc <xTaskResumeAll+0x124>)
   1c202:	681b      	ldr	r3, [r3, #0]
   1c204:	2b00      	cmp	r3, #0
   1c206:	d000      	beq.n	1c20a <xTaskResumeAll+0x32>
   1c208:	e071      	b.n	1c2ee <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1c20a:	4b3e      	ldr	r3, [pc, #248]	; (1c304 <xTaskResumeAll+0x12c>)
   1c20c:	681b      	ldr	r3, [r3, #0]
   1c20e:	2b00      	cmp	r3, #0
   1c210:	d100      	bne.n	1c214 <xTaskResumeAll+0x3c>
   1c212:	e06c      	b.n	1c2ee <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c214:	e044      	b.n	1c2a0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1c216:	4b3c      	ldr	r3, [pc, #240]	; (1c308 <xTaskResumeAll+0x130>)
   1c218:	68db      	ldr	r3, [r3, #12]
   1c21a:	68db      	ldr	r3, [r3, #12]
   1c21c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c21e:	68fb      	ldr	r3, [r7, #12]
   1c220:	3318      	adds	r3, #24
   1c222:	0018      	movs	r0, r3
   1c224:	4b39      	ldr	r3, [pc, #228]	; (1c30c <xTaskResumeAll+0x134>)
   1c226:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c228:	68fb      	ldr	r3, [r7, #12]
   1c22a:	3304      	adds	r3, #4
   1c22c:	0018      	movs	r0, r3
   1c22e:	4b37      	ldr	r3, [pc, #220]	; (1c30c <xTaskResumeAll+0x134>)
   1c230:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1c232:	68fb      	ldr	r3, [r7, #12]
   1c234:	0018      	movs	r0, r3
   1c236:	4b36      	ldr	r3, [pc, #216]	; (1c310 <xTaskResumeAll+0x138>)
   1c238:	4798      	blx	r3
   1c23a:	0003      	movs	r3, r0
   1c23c:	001a      	movs	r2, r3
   1c23e:	4b35      	ldr	r3, [pc, #212]	; (1c314 <xTaskResumeAll+0x13c>)
   1c240:	881b      	ldrh	r3, [r3, #0]
   1c242:	4013      	ands	r3, r2
   1c244:	b29b      	uxth	r3, r3
   1c246:	2b00      	cmp	r3, #0
   1c248:	d008      	beq.n	1c25c <xTaskResumeAll+0x84>
   1c24a:	68fb      	ldr	r3, [r7, #12]
   1c24c:	0018      	movs	r0, r3
   1c24e:	4b32      	ldr	r3, [pc, #200]	; (1c318 <xTaskResumeAll+0x140>)
   1c250:	4798      	blx	r3
   1c252:	0003      	movs	r3, r0
   1c254:	b2db      	uxtb	r3, r3
   1c256:	0018      	movs	r0, r3
   1c258:	4b30      	ldr	r3, [pc, #192]	; (1c31c <xTaskResumeAll+0x144>)
   1c25a:	4798      	blx	r3
   1c25c:	68fb      	ldr	r3, [r7, #12]
   1c25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c260:	4b2f      	ldr	r3, [pc, #188]	; (1c320 <xTaskResumeAll+0x148>)
   1c262:	681b      	ldr	r3, [r3, #0]
   1c264:	429a      	cmp	r2, r3
   1c266:	d903      	bls.n	1c270 <xTaskResumeAll+0x98>
   1c268:	68fb      	ldr	r3, [r7, #12]
   1c26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c26c:	4b2c      	ldr	r3, [pc, #176]	; (1c320 <xTaskResumeAll+0x148>)
   1c26e:	601a      	str	r2, [r3, #0]
   1c270:	68fb      	ldr	r3, [r7, #12]
   1c272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c274:	0013      	movs	r3, r2
   1c276:	009b      	lsls	r3, r3, #2
   1c278:	189b      	adds	r3, r3, r2
   1c27a:	009b      	lsls	r3, r3, #2
   1c27c:	4a29      	ldr	r2, [pc, #164]	; (1c324 <xTaskResumeAll+0x14c>)
   1c27e:	189a      	adds	r2, r3, r2
   1c280:	68fb      	ldr	r3, [r7, #12]
   1c282:	3304      	adds	r3, #4
   1c284:	0019      	movs	r1, r3
   1c286:	0010      	movs	r0, r2
   1c288:	4b27      	ldr	r3, [pc, #156]	; (1c328 <xTaskResumeAll+0x150>)
   1c28a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c28c:	68fb      	ldr	r3, [r7, #12]
   1c28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c290:	4b26      	ldr	r3, [pc, #152]	; (1c32c <xTaskResumeAll+0x154>)
   1c292:	681b      	ldr	r3, [r3, #0]
   1c294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c296:	429a      	cmp	r2, r3
   1c298:	d302      	bcc.n	1c2a0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1c29a:	4b25      	ldr	r3, [pc, #148]	; (1c330 <xTaskResumeAll+0x158>)
   1c29c:	2201      	movs	r2, #1
   1c29e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1c2a0:	4b19      	ldr	r3, [pc, #100]	; (1c308 <xTaskResumeAll+0x130>)
   1c2a2:	681b      	ldr	r3, [r3, #0]
   1c2a4:	2b00      	cmp	r3, #0
   1c2a6:	d1b6      	bne.n	1c216 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1c2a8:	68fb      	ldr	r3, [r7, #12]
   1c2aa:	2b00      	cmp	r3, #0
   1c2ac:	d001      	beq.n	1c2b2 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1c2ae:	4b21      	ldr	r3, [pc, #132]	; (1c334 <xTaskResumeAll+0x15c>)
   1c2b0:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1c2b2:	4b21      	ldr	r3, [pc, #132]	; (1c338 <xTaskResumeAll+0x160>)
   1c2b4:	681b      	ldr	r3, [r3, #0]
   1c2b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1c2b8:	687b      	ldr	r3, [r7, #4]
   1c2ba:	2b00      	cmp	r3, #0
   1c2bc:	d00f      	beq.n	1c2de <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1c2be:	4b1f      	ldr	r3, [pc, #124]	; (1c33c <xTaskResumeAll+0x164>)
   1c2c0:	4798      	blx	r3
   1c2c2:	1e03      	subs	r3, r0, #0
   1c2c4:	d002      	beq.n	1c2cc <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1c2c6:	4b1a      	ldr	r3, [pc, #104]	; (1c330 <xTaskResumeAll+0x158>)
   1c2c8:	2201      	movs	r2, #1
   1c2ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1c2cc:	687b      	ldr	r3, [r7, #4]
   1c2ce:	3b01      	subs	r3, #1
   1c2d0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1c2d2:	687b      	ldr	r3, [r7, #4]
   1c2d4:	2b00      	cmp	r3, #0
   1c2d6:	d1f2      	bne.n	1c2be <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1c2d8:	4b17      	ldr	r3, [pc, #92]	; (1c338 <xTaskResumeAll+0x160>)
   1c2da:	2200      	movs	r2, #0
   1c2dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1c2de:	4b14      	ldr	r3, [pc, #80]	; (1c330 <xTaskResumeAll+0x158>)
   1c2e0:	681b      	ldr	r3, [r3, #0]
   1c2e2:	2b00      	cmp	r3, #0
   1c2e4:	d003      	beq.n	1c2ee <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1c2e6:	2301      	movs	r3, #1
   1c2e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1c2ea:	4b15      	ldr	r3, [pc, #84]	; (1c340 <xTaskResumeAll+0x168>)
   1c2ec:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c2ee:	4b15      	ldr	r3, [pc, #84]	; (1c344 <xTaskResumeAll+0x16c>)
   1c2f0:	4798      	blx	r3

	return xAlreadyYielded;
   1c2f2:	68bb      	ldr	r3, [r7, #8]
}
   1c2f4:	0018      	movs	r0, r3
   1c2f6:	46bd      	mov	sp, r7
   1c2f8:	b004      	add	sp, #16
   1c2fa:	bd80      	pop	{r7, pc}
   1c2fc:	20003dc8 	.word	0x20003dc8
   1c300:	00019f09 	.word	0x00019f09
   1c304:	20003da0 	.word	0x20003da0
   1c308:	20003d60 	.word	0x20003d60
   1c30c:	00019d7b 	.word	0x00019d7b
   1c310:	00017f01 	.word	0x00017f01
   1c314:	200000b8 	.word	0x200000b8
   1c318:	00017ee1 	.word	0x00017ee1
   1c31c:	000186b1 	.word	0x000186b1
   1c320:	20003da8 	.word	0x20003da8
   1c324:	20003ccc 	.word	0x20003ccc
   1c328:	00019ccb 	.word	0x00019ccb
   1c32c:	20003cc8 	.word	0x20003cc8
   1c330:	20003db4 	.word	0x20003db4
   1c334:	0001cbc5 	.word	0x0001cbc5
   1c338:	20003db0 	.word	0x20003db0
   1c33c:	0001c365 	.word	0x0001c365
   1c340:	00019ef1 	.word	0x00019ef1
   1c344:	00019f2d 	.word	0x00019f2d

0001c348 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1c348:	b580      	push	{r7, lr}
   1c34a:	b082      	sub	sp, #8
   1c34c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1c34e:	4b04      	ldr	r3, [pc, #16]	; (1c360 <xTaskGetTickCount+0x18>)
   1c350:	681b      	ldr	r3, [r3, #0]
   1c352:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1c354:	687b      	ldr	r3, [r7, #4]
}
   1c356:	0018      	movs	r0, r3
   1c358:	46bd      	mov	sp, r7
   1c35a:	b002      	add	sp, #8
   1c35c:	bd80      	pop	{r7, pc}
   1c35e:	46c0      	nop			; (mov r8, r8)
   1c360:	20003da4 	.word	0x20003da4

0001c364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1c364:	b580      	push	{r7, lr}
   1c366:	b086      	sub	sp, #24
   1c368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1c36a:	2300      	movs	r3, #0
   1c36c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1c36e:	4b64      	ldr	r3, [pc, #400]	; (1c500 <xTaskIncrementTick+0x19c>)
   1c370:	681b      	ldr	r3, [r3, #0]
   1c372:	2b01      	cmp	r3, #1
   1c374:	d003      	beq.n	1c37e <xTaskIncrementTick+0x1a>
   1c376:	4b63      	ldr	r3, [pc, #396]	; (1c504 <xTaskIncrementTick+0x1a0>)
   1c378:	681b      	ldr	r3, [r3, #0]
   1c37a:	2b00      	cmp	r3, #0
   1c37c:	d107      	bne.n	1c38e <xTaskIncrementTick+0x2a>
   1c37e:	4b62      	ldr	r3, [pc, #392]	; (1c508 <xTaskIncrementTick+0x1a4>)
   1c380:	681b      	ldr	r3, [r3, #0]
   1c382:	1c5a      	adds	r2, r3, #1
   1c384:	4b60      	ldr	r3, [pc, #384]	; (1c508 <xTaskIncrementTick+0x1a4>)
   1c386:	601a      	str	r2, [r3, #0]
   1c388:	2000      	movs	r0, #0
   1c38a:	4b60      	ldr	r3, [pc, #384]	; (1c50c <xTaskIncrementTick+0x1a8>)
   1c38c:	4798      	blx	r3
   1c38e:	4b5c      	ldr	r3, [pc, #368]	; (1c500 <xTaskIncrementTick+0x19c>)
   1c390:	681b      	ldr	r3, [r3, #0]
   1c392:	2b00      	cmp	r3, #0
   1c394:	d106      	bne.n	1c3a4 <xTaskIncrementTick+0x40>
   1c396:	4b5e      	ldr	r3, [pc, #376]	; (1c510 <xTaskIncrementTick+0x1ac>)
   1c398:	681b      	ldr	r3, [r3, #0]
   1c39a:	3301      	adds	r3, #1
   1c39c:	0019      	movs	r1, r3
   1c39e:	2003      	movs	r0, #3
   1c3a0:	4b5c      	ldr	r3, [pc, #368]	; (1c514 <xTaskIncrementTick+0x1b0>)
   1c3a2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c3a4:	4b56      	ldr	r3, [pc, #344]	; (1c500 <xTaskIncrementTick+0x19c>)
   1c3a6:	681b      	ldr	r3, [r3, #0]
   1c3a8:	2b00      	cmp	r3, #0
   1c3aa:	d000      	beq.n	1c3ae <xTaskIncrementTick+0x4a>
   1c3ac:	e098      	b.n	1c4e0 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1c3ae:	4b58      	ldr	r3, [pc, #352]	; (1c510 <xTaskIncrementTick+0x1ac>)
   1c3b0:	681b      	ldr	r3, [r3, #0]
   1c3b2:	3301      	adds	r3, #1
   1c3b4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1c3b6:	4b56      	ldr	r3, [pc, #344]	; (1c510 <xTaskIncrementTick+0x1ac>)
   1c3b8:	693a      	ldr	r2, [r7, #16]
   1c3ba:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1c3bc:	693b      	ldr	r3, [r7, #16]
   1c3be:	2b00      	cmp	r3, #0
   1c3c0:	d117      	bne.n	1c3f2 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1c3c2:	4b55      	ldr	r3, [pc, #340]	; (1c518 <xTaskIncrementTick+0x1b4>)
   1c3c4:	681b      	ldr	r3, [r3, #0]
   1c3c6:	681b      	ldr	r3, [r3, #0]
   1c3c8:	2b00      	cmp	r3, #0
   1c3ca:	d001      	beq.n	1c3d0 <xTaskIncrementTick+0x6c>
   1c3cc:	b672      	cpsid	i
   1c3ce:	e7fe      	b.n	1c3ce <xTaskIncrementTick+0x6a>
   1c3d0:	4b51      	ldr	r3, [pc, #324]	; (1c518 <xTaskIncrementTick+0x1b4>)
   1c3d2:	681b      	ldr	r3, [r3, #0]
   1c3d4:	60fb      	str	r3, [r7, #12]
   1c3d6:	4b51      	ldr	r3, [pc, #324]	; (1c51c <xTaskIncrementTick+0x1b8>)
   1c3d8:	681a      	ldr	r2, [r3, #0]
   1c3da:	4b4f      	ldr	r3, [pc, #316]	; (1c518 <xTaskIncrementTick+0x1b4>)
   1c3dc:	601a      	str	r2, [r3, #0]
   1c3de:	4b4f      	ldr	r3, [pc, #316]	; (1c51c <xTaskIncrementTick+0x1b8>)
   1c3e0:	68fa      	ldr	r2, [r7, #12]
   1c3e2:	601a      	str	r2, [r3, #0]
   1c3e4:	4b4e      	ldr	r3, [pc, #312]	; (1c520 <xTaskIncrementTick+0x1bc>)
   1c3e6:	681b      	ldr	r3, [r3, #0]
   1c3e8:	1c5a      	adds	r2, r3, #1
   1c3ea:	4b4d      	ldr	r3, [pc, #308]	; (1c520 <xTaskIncrementTick+0x1bc>)
   1c3ec:	601a      	str	r2, [r3, #0]
   1c3ee:	4b4d      	ldr	r3, [pc, #308]	; (1c524 <xTaskIncrementTick+0x1c0>)
   1c3f0:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1c3f2:	4b4d      	ldr	r3, [pc, #308]	; (1c528 <xTaskIncrementTick+0x1c4>)
   1c3f4:	681b      	ldr	r3, [r3, #0]
   1c3f6:	693a      	ldr	r2, [r7, #16]
   1c3f8:	429a      	cmp	r2, r3
   1c3fa:	d363      	bcc.n	1c4c4 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c3fc:	4b46      	ldr	r3, [pc, #280]	; (1c518 <xTaskIncrementTick+0x1b4>)
   1c3fe:	681b      	ldr	r3, [r3, #0]
   1c400:	681b      	ldr	r3, [r3, #0]
   1c402:	2b00      	cmp	r3, #0
   1c404:	d101      	bne.n	1c40a <xTaskIncrementTick+0xa6>
   1c406:	2301      	movs	r3, #1
   1c408:	e000      	b.n	1c40c <xTaskIncrementTick+0xa8>
   1c40a:	2300      	movs	r3, #0
   1c40c:	2b00      	cmp	r3, #0
   1c40e:	d004      	beq.n	1c41a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c410:	4b45      	ldr	r3, [pc, #276]	; (1c528 <xTaskIncrementTick+0x1c4>)
   1c412:	2201      	movs	r2, #1
   1c414:	4252      	negs	r2, r2
   1c416:	601a      	str	r2, [r3, #0]
					break;
   1c418:	e054      	b.n	1c4c4 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1c41a:	4b3f      	ldr	r3, [pc, #252]	; (1c518 <xTaskIncrementTick+0x1b4>)
   1c41c:	681b      	ldr	r3, [r3, #0]
   1c41e:	68db      	ldr	r3, [r3, #12]
   1c420:	68db      	ldr	r3, [r3, #12]
   1c422:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1c424:	68bb      	ldr	r3, [r7, #8]
   1c426:	685b      	ldr	r3, [r3, #4]
   1c428:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1c42a:	693a      	ldr	r2, [r7, #16]
   1c42c:	687b      	ldr	r3, [r7, #4]
   1c42e:	429a      	cmp	r2, r3
   1c430:	d203      	bcs.n	1c43a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1c432:	4b3d      	ldr	r3, [pc, #244]	; (1c528 <xTaskIncrementTick+0x1c4>)
   1c434:	687a      	ldr	r2, [r7, #4]
   1c436:	601a      	str	r2, [r3, #0]
						break;
   1c438:	e044      	b.n	1c4c4 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1c43a:	68bb      	ldr	r3, [r7, #8]
   1c43c:	3304      	adds	r3, #4
   1c43e:	0018      	movs	r0, r3
   1c440:	4b3a      	ldr	r3, [pc, #232]	; (1c52c <xTaskIncrementTick+0x1c8>)
   1c442:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c444:	68bb      	ldr	r3, [r7, #8]
   1c446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c448:	2b00      	cmp	r3, #0
   1c44a:	d004      	beq.n	1c456 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c44c:	68bb      	ldr	r3, [r7, #8]
   1c44e:	3318      	adds	r3, #24
   1c450:	0018      	movs	r0, r3
   1c452:	4b36      	ldr	r3, [pc, #216]	; (1c52c <xTaskIncrementTick+0x1c8>)
   1c454:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1c456:	68bb      	ldr	r3, [r7, #8]
   1c458:	0018      	movs	r0, r3
   1c45a:	4b35      	ldr	r3, [pc, #212]	; (1c530 <xTaskIncrementTick+0x1cc>)
   1c45c:	4798      	blx	r3
   1c45e:	0003      	movs	r3, r0
   1c460:	001a      	movs	r2, r3
   1c462:	4b34      	ldr	r3, [pc, #208]	; (1c534 <xTaskIncrementTick+0x1d0>)
   1c464:	881b      	ldrh	r3, [r3, #0]
   1c466:	4013      	ands	r3, r2
   1c468:	b29b      	uxth	r3, r3
   1c46a:	2b00      	cmp	r3, #0
   1c46c:	d008      	beq.n	1c480 <xTaskIncrementTick+0x11c>
   1c46e:	68bb      	ldr	r3, [r7, #8]
   1c470:	0018      	movs	r0, r3
   1c472:	4b31      	ldr	r3, [pc, #196]	; (1c538 <xTaskIncrementTick+0x1d4>)
   1c474:	4798      	blx	r3
   1c476:	0003      	movs	r3, r0
   1c478:	b2db      	uxtb	r3, r3
   1c47a:	0018      	movs	r0, r3
   1c47c:	4b2f      	ldr	r3, [pc, #188]	; (1c53c <xTaskIncrementTick+0x1d8>)
   1c47e:	4798      	blx	r3
   1c480:	68bb      	ldr	r3, [r7, #8]
   1c482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c484:	4b2e      	ldr	r3, [pc, #184]	; (1c540 <xTaskIncrementTick+0x1dc>)
   1c486:	681b      	ldr	r3, [r3, #0]
   1c488:	429a      	cmp	r2, r3
   1c48a:	d903      	bls.n	1c494 <xTaskIncrementTick+0x130>
   1c48c:	68bb      	ldr	r3, [r7, #8]
   1c48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c490:	4b2b      	ldr	r3, [pc, #172]	; (1c540 <xTaskIncrementTick+0x1dc>)
   1c492:	601a      	str	r2, [r3, #0]
   1c494:	68bb      	ldr	r3, [r7, #8]
   1c496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c498:	0013      	movs	r3, r2
   1c49a:	009b      	lsls	r3, r3, #2
   1c49c:	189b      	adds	r3, r3, r2
   1c49e:	009b      	lsls	r3, r3, #2
   1c4a0:	4a28      	ldr	r2, [pc, #160]	; (1c544 <xTaskIncrementTick+0x1e0>)
   1c4a2:	189a      	adds	r2, r3, r2
   1c4a4:	68bb      	ldr	r3, [r7, #8]
   1c4a6:	3304      	adds	r3, #4
   1c4a8:	0019      	movs	r1, r3
   1c4aa:	0010      	movs	r0, r2
   1c4ac:	4b26      	ldr	r3, [pc, #152]	; (1c548 <xTaskIncrementTick+0x1e4>)
   1c4ae:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1c4b0:	68bb      	ldr	r3, [r7, #8]
   1c4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c4b4:	4b25      	ldr	r3, [pc, #148]	; (1c54c <xTaskIncrementTick+0x1e8>)
   1c4b6:	681b      	ldr	r3, [r3, #0]
   1c4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c4ba:	429a      	cmp	r2, r3
   1c4bc:	d39e      	bcc.n	1c3fc <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1c4be:	2301      	movs	r3, #1
   1c4c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1c4c2:	e79b      	b.n	1c3fc <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1c4c4:	4b21      	ldr	r3, [pc, #132]	; (1c54c <xTaskIncrementTick+0x1e8>)
   1c4c6:	681b      	ldr	r3, [r3, #0]
   1c4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c4ca:	491e      	ldr	r1, [pc, #120]	; (1c544 <xTaskIncrementTick+0x1e0>)
   1c4cc:	0013      	movs	r3, r2
   1c4ce:	009b      	lsls	r3, r3, #2
   1c4d0:	189b      	adds	r3, r3, r2
   1c4d2:	009b      	lsls	r3, r3, #2
   1c4d4:	585b      	ldr	r3, [r3, r1]
   1c4d6:	2b01      	cmp	r3, #1
   1c4d8:	d907      	bls.n	1c4ea <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1c4da:	2301      	movs	r3, #1
   1c4dc:	617b      	str	r3, [r7, #20]
   1c4de:	e004      	b.n	1c4ea <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1c4e0:	4b08      	ldr	r3, [pc, #32]	; (1c504 <xTaskIncrementTick+0x1a0>)
   1c4e2:	681b      	ldr	r3, [r3, #0]
   1c4e4:	1c5a      	adds	r2, r3, #1
   1c4e6:	4b07      	ldr	r3, [pc, #28]	; (1c504 <xTaskIncrementTick+0x1a0>)
   1c4e8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1c4ea:	4b19      	ldr	r3, [pc, #100]	; (1c550 <xTaskIncrementTick+0x1ec>)
   1c4ec:	681b      	ldr	r3, [r3, #0]
   1c4ee:	2b00      	cmp	r3, #0
   1c4f0:	d001      	beq.n	1c4f6 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1c4f2:	2301      	movs	r3, #1
   1c4f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1c4f6:	697b      	ldr	r3, [r7, #20]
}
   1c4f8:	0018      	movs	r0, r3
   1c4fa:	46bd      	mov	sp, r7
   1c4fc:	b006      	add	sp, #24
   1c4fe:	bd80      	pop	{r7, pc}
   1c500:	20003dc8 	.word	0x20003dc8
   1c504:	20003db0 	.word	0x20003db0
   1c508:	20000928 	.word	0x20000928
   1c50c:	00019b95 	.word	0x00019b95
   1c510:	20003da4 	.word	0x20003da4
   1c514:	00018c01 	.word	0x00018c01
   1c518:	20003d58 	.word	0x20003d58
   1c51c:	20003d5c 	.word	0x20003d5c
   1c520:	20003db8 	.word	0x20003db8
   1c524:	0001cbc5 	.word	0x0001cbc5
   1c528:	20003dc0 	.word	0x20003dc0
   1c52c:	00019d7b 	.word	0x00019d7b
   1c530:	00017f01 	.word	0x00017f01
   1c534:	200000b8 	.word	0x200000b8
   1c538:	00017ee1 	.word	0x00017ee1
   1c53c:	000186b1 	.word	0x000186b1
   1c540:	20003da8 	.word	0x20003da8
   1c544:	20003ccc 	.word	0x20003ccc
   1c548:	00019ccb 	.word	0x00019ccb
   1c54c:	20003cc8 	.word	0x20003cc8
   1c550:	20003db4 	.word	0x20003db4

0001c554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1c554:	b580      	push	{r7, lr}
   1c556:	b082      	sub	sp, #8
   1c558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1c55a:	4b3a      	ldr	r3, [pc, #232]	; (1c644 <vTaskSwitchContext+0xf0>)
   1c55c:	681b      	ldr	r3, [r3, #0]
   1c55e:	2b00      	cmp	r3, #0
   1c560:	d003      	beq.n	1c56a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1c562:	4b39      	ldr	r3, [pc, #228]	; (1c648 <vTaskSwitchContext+0xf4>)
   1c564:	2201      	movs	r2, #1
   1c566:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1c568:	e067      	b.n	1c63a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1c56a:	4b37      	ldr	r3, [pc, #220]	; (1c648 <vTaskSwitchContext+0xf4>)
   1c56c:	2200      	movs	r2, #0
   1c56e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1c570:	4b36      	ldr	r3, [pc, #216]	; (1c64c <vTaskSwitchContext+0xf8>)
   1c572:	681b      	ldr	r3, [r3, #0]
   1c574:	681a      	ldr	r2, [r3, #0]
   1c576:	4b35      	ldr	r3, [pc, #212]	; (1c64c <vTaskSwitchContext+0xf8>)
   1c578:	681b      	ldr	r3, [r3, #0]
   1c57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c57c:	429a      	cmp	r2, r3
   1c57e:	d808      	bhi.n	1c592 <vTaskSwitchContext+0x3e>
   1c580:	4b32      	ldr	r3, [pc, #200]	; (1c64c <vTaskSwitchContext+0xf8>)
   1c582:	681a      	ldr	r2, [r3, #0]
   1c584:	4b31      	ldr	r3, [pc, #196]	; (1c64c <vTaskSwitchContext+0xf8>)
   1c586:	681b      	ldr	r3, [r3, #0]
   1c588:	3334      	adds	r3, #52	; 0x34
   1c58a:	0019      	movs	r1, r3
   1c58c:	0010      	movs	r0, r2
   1c58e:	4b30      	ldr	r3, [pc, #192]	; (1c650 <vTaskSwitchContext+0xfc>)
   1c590:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1c592:	4b30      	ldr	r3, [pc, #192]	; (1c654 <vTaskSwitchContext+0x100>)
   1c594:	681b      	ldr	r3, [r3, #0]
   1c596:	607b      	str	r3, [r7, #4]
   1c598:	e007      	b.n	1c5aa <vTaskSwitchContext+0x56>
   1c59a:	687b      	ldr	r3, [r7, #4]
   1c59c:	2b00      	cmp	r3, #0
   1c59e:	d101      	bne.n	1c5a4 <vTaskSwitchContext+0x50>
   1c5a0:	b672      	cpsid	i
   1c5a2:	e7fe      	b.n	1c5a2 <vTaskSwitchContext+0x4e>
   1c5a4:	687b      	ldr	r3, [r7, #4]
   1c5a6:	3b01      	subs	r3, #1
   1c5a8:	607b      	str	r3, [r7, #4]
   1c5aa:	492b      	ldr	r1, [pc, #172]	; (1c658 <vTaskSwitchContext+0x104>)
   1c5ac:	687a      	ldr	r2, [r7, #4]
   1c5ae:	0013      	movs	r3, r2
   1c5b0:	009b      	lsls	r3, r3, #2
   1c5b2:	189b      	adds	r3, r3, r2
   1c5b4:	009b      	lsls	r3, r3, #2
   1c5b6:	585b      	ldr	r3, [r3, r1]
   1c5b8:	2b00      	cmp	r3, #0
   1c5ba:	d0ee      	beq.n	1c59a <vTaskSwitchContext+0x46>
   1c5bc:	687a      	ldr	r2, [r7, #4]
   1c5be:	0013      	movs	r3, r2
   1c5c0:	009b      	lsls	r3, r3, #2
   1c5c2:	189b      	adds	r3, r3, r2
   1c5c4:	009b      	lsls	r3, r3, #2
   1c5c6:	4a24      	ldr	r2, [pc, #144]	; (1c658 <vTaskSwitchContext+0x104>)
   1c5c8:	189b      	adds	r3, r3, r2
   1c5ca:	603b      	str	r3, [r7, #0]
   1c5cc:	683b      	ldr	r3, [r7, #0]
   1c5ce:	685b      	ldr	r3, [r3, #4]
   1c5d0:	685a      	ldr	r2, [r3, #4]
   1c5d2:	683b      	ldr	r3, [r7, #0]
   1c5d4:	605a      	str	r2, [r3, #4]
   1c5d6:	683b      	ldr	r3, [r7, #0]
   1c5d8:	685a      	ldr	r2, [r3, #4]
   1c5da:	683b      	ldr	r3, [r7, #0]
   1c5dc:	3308      	adds	r3, #8
   1c5de:	429a      	cmp	r2, r3
   1c5e0:	d104      	bne.n	1c5ec <vTaskSwitchContext+0x98>
   1c5e2:	683b      	ldr	r3, [r7, #0]
   1c5e4:	685b      	ldr	r3, [r3, #4]
   1c5e6:	685a      	ldr	r2, [r3, #4]
   1c5e8:	683b      	ldr	r3, [r7, #0]
   1c5ea:	605a      	str	r2, [r3, #4]
   1c5ec:	683b      	ldr	r3, [r7, #0]
   1c5ee:	685b      	ldr	r3, [r3, #4]
   1c5f0:	68da      	ldr	r2, [r3, #12]
   1c5f2:	4b16      	ldr	r3, [pc, #88]	; (1c64c <vTaskSwitchContext+0xf8>)
   1c5f4:	601a      	str	r2, [r3, #0]
   1c5f6:	4b17      	ldr	r3, [pc, #92]	; (1c654 <vTaskSwitchContext+0x100>)
   1c5f8:	687a      	ldr	r2, [r7, #4]
   1c5fa:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1c5fc:	4b17      	ldr	r3, [pc, #92]	; (1c65c <vTaskSwitchContext+0x108>)
   1c5fe:	2201      	movs	r2, #1
   1c600:	601a      	str	r2, [r3, #0]
   1c602:	4b17      	ldr	r3, [pc, #92]	; (1c660 <vTaskSwitchContext+0x10c>)
   1c604:	4798      	blx	r3
   1c606:	0003      	movs	r3, r0
   1c608:	0018      	movs	r0, r3
   1c60a:	4b16      	ldr	r3, [pc, #88]	; (1c664 <vTaskSwitchContext+0x110>)
   1c60c:	4798      	blx	r3
   1c60e:	0003      	movs	r3, r0
   1c610:	001a      	movs	r2, r3
   1c612:	4b15      	ldr	r3, [pc, #84]	; (1c668 <vTaskSwitchContext+0x114>)
   1c614:	881b      	ldrh	r3, [r3, #0]
   1c616:	4013      	ands	r3, r2
   1c618:	b29b      	uxth	r3, r3
   1c61a:	2b00      	cmp	r3, #0
   1c61c:	d00a      	beq.n	1c634 <vTaskSwitchContext+0xe0>
   1c61e:	4b10      	ldr	r3, [pc, #64]	; (1c660 <vTaskSwitchContext+0x10c>)
   1c620:	4798      	blx	r3
   1c622:	0003      	movs	r3, r0
   1c624:	0018      	movs	r0, r3
   1c626:	4b11      	ldr	r3, [pc, #68]	; (1c66c <vTaskSwitchContext+0x118>)
   1c628:	4798      	blx	r3
   1c62a:	0003      	movs	r3, r0
   1c62c:	b2db      	uxtb	r3, r3
   1c62e:	0018      	movs	r0, r3
   1c630:	4b0f      	ldr	r3, [pc, #60]	; (1c670 <vTaskSwitchContext+0x11c>)
   1c632:	4798      	blx	r3
   1c634:	4b09      	ldr	r3, [pc, #36]	; (1c65c <vTaskSwitchContext+0x108>)
   1c636:	2202      	movs	r2, #2
   1c638:	601a      	str	r2, [r3, #0]
}
   1c63a:	46c0      	nop			; (mov r8, r8)
   1c63c:	46bd      	mov	sp, r7
   1c63e:	b002      	add	sp, #8
   1c640:	bd80      	pop	{r7, pc}
   1c642:	46c0      	nop			; (mov r8, r8)
   1c644:	20003dc8 	.word	0x20003dc8
   1c648:	20003db4 	.word	0x20003db4
   1c64c:	20003cc8 	.word	0x20003cc8
   1c650:	00032399 	.word	0x00032399
   1c654:	20003da8 	.word	0x20003da8
   1c658:	20003ccc 	.word	0x20003ccc
   1c65c:	20000934 	.word	0x20000934
   1c660:	0001819d 	.word	0x0001819d
   1c664:	00017f01 	.word	0x00017f01
   1c668:	200000b8 	.word	0x200000b8
   1c66c:	00017ee1 	.word	0x00017ee1
   1c670:	00018cfd 	.word	0x00018cfd

0001c674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1c674:	b580      	push	{r7, lr}
   1c676:	b082      	sub	sp, #8
   1c678:	af00      	add	r7, sp, #0
   1c67a:	6078      	str	r0, [r7, #4]
   1c67c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1c67e:	687b      	ldr	r3, [r7, #4]
   1c680:	2b00      	cmp	r3, #0
   1c682:	d101      	bne.n	1c688 <vTaskPlaceOnEventList+0x14>
   1c684:	b672      	cpsid	i
   1c686:	e7fe      	b.n	1c686 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c688:	4b08      	ldr	r3, [pc, #32]	; (1c6ac <vTaskPlaceOnEventList+0x38>)
   1c68a:	681b      	ldr	r3, [r3, #0]
   1c68c:	3318      	adds	r3, #24
   1c68e:	001a      	movs	r2, r3
   1c690:	687b      	ldr	r3, [r7, #4]
   1c692:	0011      	movs	r1, r2
   1c694:	0018      	movs	r0, r3
   1c696:	4b06      	ldr	r3, [pc, #24]	; (1c6b0 <vTaskPlaceOnEventList+0x3c>)
   1c698:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1c69a:	683b      	ldr	r3, [r7, #0]
   1c69c:	2101      	movs	r1, #1
   1c69e:	0018      	movs	r0, r3
   1c6a0:	4b04      	ldr	r3, [pc, #16]	; (1c6b4 <vTaskPlaceOnEventList+0x40>)
   1c6a2:	4798      	blx	r3
}
   1c6a4:	46c0      	nop			; (mov r8, r8)
   1c6a6:	46bd      	mov	sp, r7
   1c6a8:	b002      	add	sp, #8
   1c6aa:	bd80      	pop	{r7, pc}
   1c6ac:	20003cc8 	.word	0x20003cc8
   1c6b0:	00019d0f 	.word	0x00019d0f
   1c6b4:	0001d119 	.word	0x0001d119

0001c6b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c6b8:	b580      	push	{r7, lr}
   1c6ba:	b084      	sub	sp, #16
   1c6bc:	af00      	add	r7, sp, #0
   1c6be:	60f8      	str	r0, [r7, #12]
   1c6c0:	60b9      	str	r1, [r7, #8]
   1c6c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1c6c4:	68fb      	ldr	r3, [r7, #12]
   1c6c6:	2b00      	cmp	r3, #0
   1c6c8:	d101      	bne.n	1c6ce <vTaskPlaceOnEventListRestricted+0x16>
   1c6ca:	b672      	cpsid	i
   1c6cc:	e7fe      	b.n	1c6cc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1c6ce:	4b28      	ldr	r3, [pc, #160]	; (1c770 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c6d0:	681b      	ldr	r3, [r3, #0]
   1c6d2:	3318      	adds	r3, #24
   1c6d4:	001a      	movs	r2, r3
   1c6d6:	68fb      	ldr	r3, [r7, #12]
   1c6d8:	0011      	movs	r1, r2
   1c6da:	0018      	movs	r0, r3
   1c6dc:	4b25      	ldr	r3, [pc, #148]	; (1c774 <vTaskPlaceOnEventListRestricted+0xbc>)
   1c6de:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1c6e0:	687b      	ldr	r3, [r7, #4]
   1c6e2:	2b00      	cmp	r3, #0
   1c6e4:	d002      	beq.n	1c6ec <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1c6e6:	2301      	movs	r3, #1
   1c6e8:	425b      	negs	r3, r3
   1c6ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1c6ec:	4b20      	ldr	r3, [pc, #128]	; (1c770 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c6ee:	681b      	ldr	r3, [r3, #0]
   1c6f0:	0018      	movs	r0, r3
   1c6f2:	4b21      	ldr	r3, [pc, #132]	; (1c778 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c6f4:	4798      	blx	r3
   1c6f6:	0003      	movs	r3, r0
   1c6f8:	001a      	movs	r2, r3
   1c6fa:	4b20      	ldr	r3, [pc, #128]	; (1c77c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c6fc:	881b      	ldrh	r3, [r3, #0]
   1c6fe:	4013      	ands	r3, r2
   1c700:	b29b      	uxth	r3, r3
   1c702:	2b00      	cmp	r3, #0
   1c704:	d011      	beq.n	1c72a <vTaskPlaceOnEventListRestricted+0x72>
   1c706:	4b1e      	ldr	r3, [pc, #120]	; (1c780 <vTaskPlaceOnEventListRestricted+0xc8>)
   1c708:	681a      	ldr	r2, [r3, #0]
   1c70a:	68bb      	ldr	r3, [r7, #8]
   1c70c:	18d3      	adds	r3, r2, r3
   1c70e:	0019      	movs	r1, r3
   1c710:	2088      	movs	r0, #136	; 0x88
   1c712:	4b1c      	ldr	r3, [pc, #112]	; (1c784 <vTaskPlaceOnEventListRestricted+0xcc>)
   1c714:	4798      	blx	r3
   1c716:	4b16      	ldr	r3, [pc, #88]	; (1c770 <vTaskPlaceOnEventListRestricted+0xb8>)
   1c718:	681b      	ldr	r3, [r3, #0]
   1c71a:	0018      	movs	r0, r3
   1c71c:	4b1a      	ldr	r3, [pc, #104]	; (1c788 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c71e:	4798      	blx	r3
   1c720:	0003      	movs	r3, r0
   1c722:	b2db      	uxtb	r3, r3
   1c724:	0018      	movs	r0, r3
   1c726:	4b19      	ldr	r3, [pc, #100]	; (1c78c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c728:	4798      	blx	r3
   1c72a:	4b19      	ldr	r3, [pc, #100]	; (1c790 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c72c:	4798      	blx	r3
   1c72e:	0003      	movs	r3, r0
   1c730:	0018      	movs	r0, r3
   1c732:	4b11      	ldr	r3, [pc, #68]	; (1c778 <vTaskPlaceOnEventListRestricted+0xc0>)
   1c734:	4798      	blx	r3
   1c736:	0003      	movs	r3, r0
   1c738:	001a      	movs	r2, r3
   1c73a:	4b10      	ldr	r3, [pc, #64]	; (1c77c <vTaskPlaceOnEventListRestricted+0xc4>)
   1c73c:	881b      	ldrh	r3, [r3, #0]
   1c73e:	4013      	ands	r3, r2
   1c740:	b29b      	uxth	r3, r3
   1c742:	2b00      	cmp	r3, #0
   1c744:	d00a      	beq.n	1c75c <vTaskPlaceOnEventListRestricted+0xa4>
   1c746:	4b12      	ldr	r3, [pc, #72]	; (1c790 <vTaskPlaceOnEventListRestricted+0xd8>)
   1c748:	4798      	blx	r3
   1c74a:	0003      	movs	r3, r0
   1c74c:	0018      	movs	r0, r3
   1c74e:	4b0e      	ldr	r3, [pc, #56]	; (1c788 <vTaskPlaceOnEventListRestricted+0xd0>)
   1c750:	4798      	blx	r3
   1c752:	0003      	movs	r3, r0
   1c754:	b2db      	uxtb	r3, r3
   1c756:	0018      	movs	r0, r3
   1c758:	4b0c      	ldr	r3, [pc, #48]	; (1c78c <vTaskPlaceOnEventListRestricted+0xd4>)
   1c75a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1c75c:	687a      	ldr	r2, [r7, #4]
   1c75e:	68bb      	ldr	r3, [r7, #8]
   1c760:	0011      	movs	r1, r2
   1c762:	0018      	movs	r0, r3
   1c764:	4b0b      	ldr	r3, [pc, #44]	; (1c794 <vTaskPlaceOnEventListRestricted+0xdc>)
   1c766:	4798      	blx	r3
	}
   1c768:	46c0      	nop			; (mov r8, r8)
   1c76a:	46bd      	mov	sp, r7
   1c76c:	b004      	add	sp, #16
   1c76e:	bd80      	pop	{r7, pc}
   1c770:	20003cc8 	.word	0x20003cc8
   1c774:	00019ccb 	.word	0x00019ccb
   1c778:	00017f01 	.word	0x00017f01
   1c77c:	200000b8 	.word	0x200000b8
   1c780:	20003da4 	.word	0x20003da4
   1c784:	00018c01 	.word	0x00018c01
   1c788:	00017ee1 	.word	0x00017ee1
   1c78c:	00019091 	.word	0x00019091
   1c790:	0001819d 	.word	0x0001819d
   1c794:	0001d119 	.word	0x0001d119

0001c798 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1c798:	b580      	push	{r7, lr}
   1c79a:	b084      	sub	sp, #16
   1c79c:	af00      	add	r7, sp, #0
   1c79e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1c7a0:	687b      	ldr	r3, [r7, #4]
   1c7a2:	68db      	ldr	r3, [r3, #12]
   1c7a4:	68db      	ldr	r3, [r3, #12]
   1c7a6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1c7a8:	68bb      	ldr	r3, [r7, #8]
   1c7aa:	2b00      	cmp	r3, #0
   1c7ac:	d101      	bne.n	1c7b2 <xTaskRemoveFromEventList+0x1a>
   1c7ae:	b672      	cpsid	i
   1c7b0:	e7fe      	b.n	1c7b0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1c7b2:	68bb      	ldr	r3, [r7, #8]
   1c7b4:	3318      	adds	r3, #24
   1c7b6:	0018      	movs	r0, r3
   1c7b8:	4b2a      	ldr	r3, [pc, #168]	; (1c864 <xTaskRemoveFromEventList+0xcc>)
   1c7ba:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1c7bc:	4b2a      	ldr	r3, [pc, #168]	; (1c868 <xTaskRemoveFromEventList+0xd0>)
   1c7be:	681b      	ldr	r3, [r3, #0]
   1c7c0:	2b00      	cmp	r3, #0
   1c7c2:	d132      	bne.n	1c82a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1c7c4:	68bb      	ldr	r3, [r7, #8]
   1c7c6:	3304      	adds	r3, #4
   1c7c8:	0018      	movs	r0, r3
   1c7ca:	4b26      	ldr	r3, [pc, #152]	; (1c864 <xTaskRemoveFromEventList+0xcc>)
   1c7cc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1c7ce:	68bb      	ldr	r3, [r7, #8]
   1c7d0:	0018      	movs	r0, r3
   1c7d2:	4b26      	ldr	r3, [pc, #152]	; (1c86c <xTaskRemoveFromEventList+0xd4>)
   1c7d4:	4798      	blx	r3
   1c7d6:	0003      	movs	r3, r0
   1c7d8:	001a      	movs	r2, r3
   1c7da:	4b25      	ldr	r3, [pc, #148]	; (1c870 <xTaskRemoveFromEventList+0xd8>)
   1c7dc:	881b      	ldrh	r3, [r3, #0]
   1c7de:	4013      	ands	r3, r2
   1c7e0:	b29b      	uxth	r3, r3
   1c7e2:	2b00      	cmp	r3, #0
   1c7e4:	d008      	beq.n	1c7f8 <xTaskRemoveFromEventList+0x60>
   1c7e6:	68bb      	ldr	r3, [r7, #8]
   1c7e8:	0018      	movs	r0, r3
   1c7ea:	4b22      	ldr	r3, [pc, #136]	; (1c874 <xTaskRemoveFromEventList+0xdc>)
   1c7ec:	4798      	blx	r3
   1c7ee:	0003      	movs	r3, r0
   1c7f0:	b2db      	uxtb	r3, r3
   1c7f2:	0018      	movs	r0, r3
   1c7f4:	4b20      	ldr	r3, [pc, #128]	; (1c878 <xTaskRemoveFromEventList+0xe0>)
   1c7f6:	4798      	blx	r3
   1c7f8:	68bb      	ldr	r3, [r7, #8]
   1c7fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c7fc:	4b1f      	ldr	r3, [pc, #124]	; (1c87c <xTaskRemoveFromEventList+0xe4>)
   1c7fe:	681b      	ldr	r3, [r3, #0]
   1c800:	429a      	cmp	r2, r3
   1c802:	d903      	bls.n	1c80c <xTaskRemoveFromEventList+0x74>
   1c804:	68bb      	ldr	r3, [r7, #8]
   1c806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c808:	4b1c      	ldr	r3, [pc, #112]	; (1c87c <xTaskRemoveFromEventList+0xe4>)
   1c80a:	601a      	str	r2, [r3, #0]
   1c80c:	68bb      	ldr	r3, [r7, #8]
   1c80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c810:	0013      	movs	r3, r2
   1c812:	009b      	lsls	r3, r3, #2
   1c814:	189b      	adds	r3, r3, r2
   1c816:	009b      	lsls	r3, r3, #2
   1c818:	4a19      	ldr	r2, [pc, #100]	; (1c880 <xTaskRemoveFromEventList+0xe8>)
   1c81a:	189a      	adds	r2, r3, r2
   1c81c:	68bb      	ldr	r3, [r7, #8]
   1c81e:	3304      	adds	r3, #4
   1c820:	0019      	movs	r1, r3
   1c822:	0010      	movs	r0, r2
   1c824:	4b17      	ldr	r3, [pc, #92]	; (1c884 <xTaskRemoveFromEventList+0xec>)
   1c826:	4798      	blx	r3
   1c828:	e007      	b.n	1c83a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1c82a:	68bb      	ldr	r3, [r7, #8]
   1c82c:	3318      	adds	r3, #24
   1c82e:	001a      	movs	r2, r3
   1c830:	4b15      	ldr	r3, [pc, #84]	; (1c888 <xTaskRemoveFromEventList+0xf0>)
   1c832:	0011      	movs	r1, r2
   1c834:	0018      	movs	r0, r3
   1c836:	4b13      	ldr	r3, [pc, #76]	; (1c884 <xTaskRemoveFromEventList+0xec>)
   1c838:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1c83a:	68bb      	ldr	r3, [r7, #8]
   1c83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c83e:	4b13      	ldr	r3, [pc, #76]	; (1c88c <xTaskRemoveFromEventList+0xf4>)
   1c840:	681b      	ldr	r3, [r3, #0]
   1c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c844:	429a      	cmp	r2, r3
   1c846:	d905      	bls.n	1c854 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1c848:	2301      	movs	r3, #1
   1c84a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1c84c:	4b10      	ldr	r3, [pc, #64]	; (1c890 <xTaskRemoveFromEventList+0xf8>)
   1c84e:	2201      	movs	r2, #1
   1c850:	601a      	str	r2, [r3, #0]
   1c852:	e001      	b.n	1c858 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1c854:	2300      	movs	r3, #0
   1c856:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1c858:	68fb      	ldr	r3, [r7, #12]
}
   1c85a:	0018      	movs	r0, r3
   1c85c:	46bd      	mov	sp, r7
   1c85e:	b004      	add	sp, #16
   1c860:	bd80      	pop	{r7, pc}
   1c862:	46c0      	nop			; (mov r8, r8)
   1c864:	00019d7b 	.word	0x00019d7b
   1c868:	20003dc8 	.word	0x20003dc8
   1c86c:	00017f01 	.word	0x00017f01
   1c870:	200000b8 	.word	0x200000b8
   1c874:	00017ee1 	.word	0x00017ee1
   1c878:	000186b1 	.word	0x000186b1
   1c87c:	20003da8 	.word	0x20003da8
   1c880:	20003ccc 	.word	0x20003ccc
   1c884:	00019ccb 	.word	0x00019ccb
   1c888:	20003d60 	.word	0x20003d60
   1c88c:	20003cc8 	.word	0x20003cc8
   1c890:	20003db4 	.word	0x20003db4

0001c894 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c894:	b580      	push	{r7, lr}
   1c896:	b082      	sub	sp, #8
   1c898:	af00      	add	r7, sp, #0
   1c89a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1c89c:	687b      	ldr	r3, [r7, #4]
   1c89e:	2b00      	cmp	r3, #0
   1c8a0:	d101      	bne.n	1c8a6 <vTaskSetTimeOutState+0x12>
   1c8a2:	b672      	cpsid	i
   1c8a4:	e7fe      	b.n	1c8a4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1c8a6:	4b08      	ldr	r3, [pc, #32]	; (1c8c8 <vTaskSetTimeOutState+0x34>)
   1c8a8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c8aa:	4b08      	ldr	r3, [pc, #32]	; (1c8cc <vTaskSetTimeOutState+0x38>)
   1c8ac:	681a      	ldr	r2, [r3, #0]
   1c8ae:	687b      	ldr	r3, [r7, #4]
   1c8b0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1c8b2:	4b07      	ldr	r3, [pc, #28]	; (1c8d0 <vTaskSetTimeOutState+0x3c>)
   1c8b4:	681a      	ldr	r2, [r3, #0]
   1c8b6:	687b      	ldr	r3, [r7, #4]
   1c8b8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1c8ba:	4b06      	ldr	r3, [pc, #24]	; (1c8d4 <vTaskSetTimeOutState+0x40>)
   1c8bc:	4798      	blx	r3
}
   1c8be:	46c0      	nop			; (mov r8, r8)
   1c8c0:	46bd      	mov	sp, r7
   1c8c2:	b002      	add	sp, #8
   1c8c4:	bd80      	pop	{r7, pc}
   1c8c6:	46c0      	nop			; (mov r8, r8)
   1c8c8:	00019f09 	.word	0x00019f09
   1c8cc:	20003db8 	.word	0x20003db8
   1c8d0:	20003da4 	.word	0x20003da4
   1c8d4:	00019f2d 	.word	0x00019f2d

0001c8d8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1c8d8:	b580      	push	{r7, lr}
   1c8da:	b082      	sub	sp, #8
   1c8dc:	af00      	add	r7, sp, #0
   1c8de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1c8e0:	4b05      	ldr	r3, [pc, #20]	; (1c8f8 <vTaskInternalSetTimeOutState+0x20>)
   1c8e2:	681a      	ldr	r2, [r3, #0]
   1c8e4:	687b      	ldr	r3, [r7, #4]
   1c8e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1c8e8:	4b04      	ldr	r3, [pc, #16]	; (1c8fc <vTaskInternalSetTimeOutState+0x24>)
   1c8ea:	681a      	ldr	r2, [r3, #0]
   1c8ec:	687b      	ldr	r3, [r7, #4]
   1c8ee:	605a      	str	r2, [r3, #4]
}
   1c8f0:	46c0      	nop			; (mov r8, r8)
   1c8f2:	46bd      	mov	sp, r7
   1c8f4:	b002      	add	sp, #8
   1c8f6:	bd80      	pop	{r7, pc}
   1c8f8:	20003db8 	.word	0x20003db8
   1c8fc:	20003da4 	.word	0x20003da4

0001c900 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1c900:	b580      	push	{r7, lr}
   1c902:	b086      	sub	sp, #24
   1c904:	af00      	add	r7, sp, #0
   1c906:	6078      	str	r0, [r7, #4]
   1c908:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1c90a:	687b      	ldr	r3, [r7, #4]
   1c90c:	2b00      	cmp	r3, #0
   1c90e:	d101      	bne.n	1c914 <xTaskCheckForTimeOut+0x14>
   1c910:	b672      	cpsid	i
   1c912:	e7fe      	b.n	1c912 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1c914:	683b      	ldr	r3, [r7, #0]
   1c916:	2b00      	cmp	r3, #0
   1c918:	d101      	bne.n	1c91e <xTaskCheckForTimeOut+0x1e>
   1c91a:	b672      	cpsid	i
   1c91c:	e7fe      	b.n	1c91c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1c91e:	4b1e      	ldr	r3, [pc, #120]	; (1c998 <xTaskCheckForTimeOut+0x98>)
   1c920:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1c922:	4b1e      	ldr	r3, [pc, #120]	; (1c99c <xTaskCheckForTimeOut+0x9c>)
   1c924:	681b      	ldr	r3, [r3, #0]
   1c926:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1c928:	687b      	ldr	r3, [r7, #4]
   1c92a:	685b      	ldr	r3, [r3, #4]
   1c92c:	693a      	ldr	r2, [r7, #16]
   1c92e:	1ad3      	subs	r3, r2, r3
   1c930:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1c932:	683b      	ldr	r3, [r7, #0]
   1c934:	681b      	ldr	r3, [r3, #0]
   1c936:	3301      	adds	r3, #1
   1c938:	d102      	bne.n	1c940 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1c93a:	2300      	movs	r3, #0
   1c93c:	617b      	str	r3, [r7, #20]
   1c93e:	e024      	b.n	1c98a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1c940:	687b      	ldr	r3, [r7, #4]
   1c942:	681a      	ldr	r2, [r3, #0]
   1c944:	4b16      	ldr	r3, [pc, #88]	; (1c9a0 <xTaskCheckForTimeOut+0xa0>)
   1c946:	681b      	ldr	r3, [r3, #0]
   1c948:	429a      	cmp	r2, r3
   1c94a:	d007      	beq.n	1c95c <xTaskCheckForTimeOut+0x5c>
   1c94c:	687b      	ldr	r3, [r7, #4]
   1c94e:	685a      	ldr	r2, [r3, #4]
   1c950:	693b      	ldr	r3, [r7, #16]
   1c952:	429a      	cmp	r2, r3
   1c954:	d802      	bhi.n	1c95c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1c956:	2301      	movs	r3, #1
   1c958:	617b      	str	r3, [r7, #20]
   1c95a:	e016      	b.n	1c98a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1c95c:	683b      	ldr	r3, [r7, #0]
   1c95e:	681a      	ldr	r2, [r3, #0]
   1c960:	68fb      	ldr	r3, [r7, #12]
   1c962:	429a      	cmp	r2, r3
   1c964:	d90c      	bls.n	1c980 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1c966:	683b      	ldr	r3, [r7, #0]
   1c968:	681a      	ldr	r2, [r3, #0]
   1c96a:	68fb      	ldr	r3, [r7, #12]
   1c96c:	1ad2      	subs	r2, r2, r3
   1c96e:	683b      	ldr	r3, [r7, #0]
   1c970:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1c972:	687b      	ldr	r3, [r7, #4]
   1c974:	0018      	movs	r0, r3
   1c976:	4b0b      	ldr	r3, [pc, #44]	; (1c9a4 <xTaskCheckForTimeOut+0xa4>)
   1c978:	4798      	blx	r3
			xReturn = pdFALSE;
   1c97a:	2300      	movs	r3, #0
   1c97c:	617b      	str	r3, [r7, #20]
   1c97e:	e004      	b.n	1c98a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1c980:	683b      	ldr	r3, [r7, #0]
   1c982:	2200      	movs	r2, #0
   1c984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1c986:	2301      	movs	r3, #1
   1c988:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1c98a:	4b07      	ldr	r3, [pc, #28]	; (1c9a8 <xTaskCheckForTimeOut+0xa8>)
   1c98c:	4798      	blx	r3

	return xReturn;
   1c98e:	697b      	ldr	r3, [r7, #20]
}
   1c990:	0018      	movs	r0, r3
   1c992:	46bd      	mov	sp, r7
   1c994:	b006      	add	sp, #24
   1c996:	bd80      	pop	{r7, pc}
   1c998:	00019f09 	.word	0x00019f09
   1c99c:	20003da4 	.word	0x20003da4
   1c9a0:	20003db8 	.word	0x20003db8
   1c9a4:	0001c8d9 	.word	0x0001c8d9
   1c9a8:	00019f2d 	.word	0x00019f2d

0001c9ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1c9ac:	b580      	push	{r7, lr}
   1c9ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1c9b0:	4b02      	ldr	r3, [pc, #8]	; (1c9bc <vTaskMissedYield+0x10>)
   1c9b2:	2201      	movs	r2, #1
   1c9b4:	601a      	str	r2, [r3, #0]
}
   1c9b6:	46c0      	nop			; (mov r8, r8)
   1c9b8:	46bd      	mov	sp, r7
   1c9ba:	bd80      	pop	{r7, pc}
   1c9bc:	20003db4 	.word	0x20003db4

0001c9c0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1c9c0:	b580      	push	{r7, lr}
   1c9c2:	b084      	sub	sp, #16
   1c9c4:	af00      	add	r7, sp, #0
   1c9c6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c9c8:	687b      	ldr	r3, [r7, #4]
   1c9ca:	2b00      	cmp	r3, #0
   1c9cc:	d005      	beq.n	1c9da <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c9ce:	687b      	ldr	r3, [r7, #4]
   1c9d0:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1c9d2:	68bb      	ldr	r3, [r7, #8]
   1c9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c9d6:	60fb      	str	r3, [r7, #12]
   1c9d8:	e001      	b.n	1c9de <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1c9da:	2300      	movs	r3, #0
   1c9dc:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1c9de:	68fb      	ldr	r3, [r7, #12]
	}
   1c9e0:	0018      	movs	r0, r3
   1c9e2:	46bd      	mov	sp, r7
   1c9e4:	b004      	add	sp, #16
   1c9e6:	bd80      	pop	{r7, pc}

0001c9e8 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1c9e8:	b580      	push	{r7, lr}
   1c9ea:	b084      	sub	sp, #16
   1c9ec:	af00      	add	r7, sp, #0
   1c9ee:	6078      	str	r0, [r7, #4]
   1c9f0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1c9f2:	687b      	ldr	r3, [r7, #4]
   1c9f4:	2b00      	cmp	r3, #0
   1c9f6:	d004      	beq.n	1ca02 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1c9f8:	687b      	ldr	r3, [r7, #4]
   1c9fa:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1c9fc:	68fb      	ldr	r3, [r7, #12]
   1c9fe:	683a      	ldr	r2, [r7, #0]
   1ca00:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1ca02:	46c0      	nop			; (mov r8, r8)
   1ca04:	46bd      	mov	sp, r7
   1ca06:	b004      	add	sp, #16
   1ca08:	bd80      	pop	{r7, pc}
	...

0001ca0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1ca0c:	b580      	push	{r7, lr}
   1ca0e:	b082      	sub	sp, #8
   1ca10:	af00      	add	r7, sp, #0
   1ca12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1ca14:	4b04      	ldr	r3, [pc, #16]	; (1ca28 <prvIdleTask+0x1c>)
   1ca16:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1ca18:	4b04      	ldr	r3, [pc, #16]	; (1ca2c <prvIdleTask+0x20>)
   1ca1a:	681b      	ldr	r3, [r3, #0]
   1ca1c:	2b01      	cmp	r3, #1
   1ca1e:	d9f9      	bls.n	1ca14 <prvIdleTask+0x8>
			{
				taskYIELD();
   1ca20:	4b03      	ldr	r3, [pc, #12]	; (1ca30 <prvIdleTask+0x24>)
   1ca22:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1ca24:	e7f6      	b.n	1ca14 <prvIdleTask+0x8>
   1ca26:	46c0      	nop			; (mov r8, r8)
   1ca28:	0001cac1 	.word	0x0001cac1
   1ca2c:	20003ccc 	.word	0x20003ccc
   1ca30:	00019ef1 	.word	0x00019ef1

0001ca34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1ca34:	b580      	push	{r7, lr}
   1ca36:	b082      	sub	sp, #8
   1ca38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1ca3a:	2300      	movs	r3, #0
   1ca3c:	607b      	str	r3, [r7, #4]
   1ca3e:	e00c      	b.n	1ca5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1ca40:	687a      	ldr	r2, [r7, #4]
   1ca42:	0013      	movs	r3, r2
   1ca44:	009b      	lsls	r3, r3, #2
   1ca46:	189b      	adds	r3, r3, r2
   1ca48:	009b      	lsls	r3, r3, #2
   1ca4a:	4a14      	ldr	r2, [pc, #80]	; (1ca9c <prvInitialiseTaskLists+0x68>)
   1ca4c:	189b      	adds	r3, r3, r2
   1ca4e:	0018      	movs	r0, r3
   1ca50:	4b13      	ldr	r3, [pc, #76]	; (1caa0 <prvInitialiseTaskLists+0x6c>)
   1ca52:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1ca54:	687b      	ldr	r3, [r7, #4]
   1ca56:	3301      	adds	r3, #1
   1ca58:	607b      	str	r3, [r7, #4]
   1ca5a:	687b      	ldr	r3, [r7, #4]
   1ca5c:	2b04      	cmp	r3, #4
   1ca5e:	d9ef      	bls.n	1ca40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1ca60:	4b10      	ldr	r3, [pc, #64]	; (1caa4 <prvInitialiseTaskLists+0x70>)
   1ca62:	0018      	movs	r0, r3
   1ca64:	4b0e      	ldr	r3, [pc, #56]	; (1caa0 <prvInitialiseTaskLists+0x6c>)
   1ca66:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1ca68:	4b0f      	ldr	r3, [pc, #60]	; (1caa8 <prvInitialiseTaskLists+0x74>)
   1ca6a:	0018      	movs	r0, r3
   1ca6c:	4b0c      	ldr	r3, [pc, #48]	; (1caa0 <prvInitialiseTaskLists+0x6c>)
   1ca6e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1ca70:	4b0e      	ldr	r3, [pc, #56]	; (1caac <prvInitialiseTaskLists+0x78>)
   1ca72:	0018      	movs	r0, r3
   1ca74:	4b0a      	ldr	r3, [pc, #40]	; (1caa0 <prvInitialiseTaskLists+0x6c>)
   1ca76:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1ca78:	4b0d      	ldr	r3, [pc, #52]	; (1cab0 <prvInitialiseTaskLists+0x7c>)
   1ca7a:	0018      	movs	r0, r3
   1ca7c:	4b08      	ldr	r3, [pc, #32]	; (1caa0 <prvInitialiseTaskLists+0x6c>)
   1ca7e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1ca80:	4b0c      	ldr	r3, [pc, #48]	; (1cab4 <prvInitialiseTaskLists+0x80>)
   1ca82:	0018      	movs	r0, r3
   1ca84:	4b06      	ldr	r3, [pc, #24]	; (1caa0 <prvInitialiseTaskLists+0x6c>)
   1ca86:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1ca88:	4b0b      	ldr	r3, [pc, #44]	; (1cab8 <prvInitialiseTaskLists+0x84>)
   1ca8a:	4a06      	ldr	r2, [pc, #24]	; (1caa4 <prvInitialiseTaskLists+0x70>)
   1ca8c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1ca8e:	4b0b      	ldr	r3, [pc, #44]	; (1cabc <prvInitialiseTaskLists+0x88>)
   1ca90:	4a05      	ldr	r2, [pc, #20]	; (1caa8 <prvInitialiseTaskLists+0x74>)
   1ca92:	601a      	str	r2, [r3, #0]
}
   1ca94:	46c0      	nop			; (mov r8, r8)
   1ca96:	46bd      	mov	sp, r7
   1ca98:	b002      	add	sp, #8
   1ca9a:	bd80      	pop	{r7, pc}
   1ca9c:	20003ccc 	.word	0x20003ccc
   1caa0:	00019c79 	.word	0x00019c79
   1caa4:	20003d30 	.word	0x20003d30
   1caa8:	20003d44 	.word	0x20003d44
   1caac:	20003d60 	.word	0x20003d60
   1cab0:	20003d74 	.word	0x20003d74
   1cab4:	20003d8c 	.word	0x20003d8c
   1cab8:	20003d58 	.word	0x20003d58
   1cabc:	20003d5c 	.word	0x20003d5c

0001cac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1cac0:	b580      	push	{r7, lr}
   1cac2:	b082      	sub	sp, #8
   1cac4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1cac6:	e01a      	b.n	1cafe <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1cac8:	4b11      	ldr	r3, [pc, #68]	; (1cb10 <prvCheckTasksWaitingTermination+0x50>)
   1caca:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1cacc:	4b11      	ldr	r3, [pc, #68]	; (1cb14 <prvCheckTasksWaitingTermination+0x54>)
   1cace:	68db      	ldr	r3, [r3, #12]
   1cad0:	68db      	ldr	r3, [r3, #12]
   1cad2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cad4:	687b      	ldr	r3, [r7, #4]
   1cad6:	3304      	adds	r3, #4
   1cad8:	0018      	movs	r0, r3
   1cada:	4b0f      	ldr	r3, [pc, #60]	; (1cb18 <prvCheckTasksWaitingTermination+0x58>)
   1cadc:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1cade:	4b0f      	ldr	r3, [pc, #60]	; (1cb1c <prvCheckTasksWaitingTermination+0x5c>)
   1cae0:	681b      	ldr	r3, [r3, #0]
   1cae2:	1e5a      	subs	r2, r3, #1
   1cae4:	4b0d      	ldr	r3, [pc, #52]	; (1cb1c <prvCheckTasksWaitingTermination+0x5c>)
   1cae6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1cae8:	4b0d      	ldr	r3, [pc, #52]	; (1cb20 <prvCheckTasksWaitingTermination+0x60>)
   1caea:	681b      	ldr	r3, [r3, #0]
   1caec:	1e5a      	subs	r2, r3, #1
   1caee:	4b0c      	ldr	r3, [pc, #48]	; (1cb20 <prvCheckTasksWaitingTermination+0x60>)
   1caf0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1caf2:	4b0c      	ldr	r3, [pc, #48]	; (1cb24 <prvCheckTasksWaitingTermination+0x64>)
   1caf4:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1caf6:	687b      	ldr	r3, [r7, #4]
   1caf8:	0018      	movs	r0, r3
   1cafa:	4b0b      	ldr	r3, [pc, #44]	; (1cb28 <prvCheckTasksWaitingTermination+0x68>)
   1cafc:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1cafe:	4b08      	ldr	r3, [pc, #32]	; (1cb20 <prvCheckTasksWaitingTermination+0x60>)
   1cb00:	681b      	ldr	r3, [r3, #0]
   1cb02:	2b00      	cmp	r3, #0
   1cb04:	d1e0      	bne.n	1cac8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1cb06:	46c0      	nop			; (mov r8, r8)
   1cb08:	46bd      	mov	sp, r7
   1cb0a:	b002      	add	sp, #8
   1cb0c:	bd80      	pop	{r7, pc}
   1cb0e:	46c0      	nop			; (mov r8, r8)
   1cb10:	00019f09 	.word	0x00019f09
   1cb14:	20003d74 	.word	0x20003d74
   1cb18:	00019d7b 	.word	0x00019d7b
   1cb1c:	20003da0 	.word	0x20003da0
   1cb20:	20003d88 	.word	0x20003d88
   1cb24:	00019f2d 	.word	0x00019f2d
   1cb28:	0001cb9d 	.word	0x0001cb9d

0001cb2c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1cb2c:	b580      	push	{r7, lr}
   1cb2e:	b084      	sub	sp, #16
   1cb30:	af00      	add	r7, sp, #0
   1cb32:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1cb34:	2300      	movs	r3, #0
   1cb36:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1cb38:	e005      	b.n	1cb46 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1cb3a:	687b      	ldr	r3, [r7, #4]
   1cb3c:	3301      	adds	r3, #1
   1cb3e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1cb40:	68fb      	ldr	r3, [r7, #12]
   1cb42:	3301      	adds	r3, #1
   1cb44:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1cb46:	687b      	ldr	r3, [r7, #4]
   1cb48:	781b      	ldrb	r3, [r3, #0]
   1cb4a:	2ba5      	cmp	r3, #165	; 0xa5
   1cb4c:	d0f5      	beq.n	1cb3a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1cb4e:	68fb      	ldr	r3, [r7, #12]
   1cb50:	089b      	lsrs	r3, r3, #2
   1cb52:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1cb54:	68fb      	ldr	r3, [r7, #12]
   1cb56:	b29b      	uxth	r3, r3
	}
   1cb58:	0018      	movs	r0, r3
   1cb5a:	46bd      	mov	sp, r7
   1cb5c:	b004      	add	sp, #16
   1cb5e:	bd80      	pop	{r7, pc}

0001cb60 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1cb60:	b580      	push	{r7, lr}
   1cb62:	b086      	sub	sp, #24
   1cb64:	af00      	add	r7, sp, #0
   1cb66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1cb68:	687b      	ldr	r3, [r7, #4]
   1cb6a:	2b00      	cmp	r3, #0
   1cb6c:	d102      	bne.n	1cb74 <uxTaskGetStackHighWaterMark+0x14>
   1cb6e:	4b09      	ldr	r3, [pc, #36]	; (1cb94 <uxTaskGetStackHighWaterMark+0x34>)
   1cb70:	681b      	ldr	r3, [r3, #0]
   1cb72:	e000      	b.n	1cb76 <uxTaskGetStackHighWaterMark+0x16>
   1cb74:	687b      	ldr	r3, [r7, #4]
   1cb76:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1cb78:	697b      	ldr	r3, [r7, #20]
   1cb7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cb7c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1cb7e:	693b      	ldr	r3, [r7, #16]
   1cb80:	0018      	movs	r0, r3
   1cb82:	4b05      	ldr	r3, [pc, #20]	; (1cb98 <uxTaskGetStackHighWaterMark+0x38>)
   1cb84:	4798      	blx	r3
   1cb86:	0003      	movs	r3, r0
   1cb88:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1cb8a:	68fb      	ldr	r3, [r7, #12]
	}
   1cb8c:	0018      	movs	r0, r3
   1cb8e:	46bd      	mov	sp, r7
   1cb90:	b006      	add	sp, #24
   1cb92:	bd80      	pop	{r7, pc}
   1cb94:	20003cc8 	.word	0x20003cc8
   1cb98:	0001cb2d 	.word	0x0001cb2d

0001cb9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1cb9c:	b580      	push	{r7, lr}
   1cb9e:	b082      	sub	sp, #8
   1cba0:	af00      	add	r7, sp, #0
   1cba2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1cba4:	687b      	ldr	r3, [r7, #4]
   1cba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1cba8:	0018      	movs	r0, r3
   1cbaa:	4b05      	ldr	r3, [pc, #20]	; (1cbc0 <prvDeleteTCB+0x24>)
   1cbac:	4798      	blx	r3
			vPortFree( pxTCB );
   1cbae:	687b      	ldr	r3, [r7, #4]
   1cbb0:	0018      	movs	r0, r3
   1cbb2:	4b03      	ldr	r3, [pc, #12]	; (1cbc0 <prvDeleteTCB+0x24>)
   1cbb4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1cbb6:	46c0      	nop			; (mov r8, r8)
   1cbb8:	46bd      	mov	sp, r7
   1cbba:	b002      	add	sp, #8
   1cbbc:	bd80      	pop	{r7, pc}
   1cbbe:	46c0      	nop			; (mov r8, r8)
   1cbc0:	0001a105 	.word	0x0001a105

0001cbc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1cbc4:	b580      	push	{r7, lr}
   1cbc6:	b082      	sub	sp, #8
   1cbc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cbca:	4b0e      	ldr	r3, [pc, #56]	; (1cc04 <prvResetNextTaskUnblockTime+0x40>)
   1cbcc:	681b      	ldr	r3, [r3, #0]
   1cbce:	681b      	ldr	r3, [r3, #0]
   1cbd0:	2b00      	cmp	r3, #0
   1cbd2:	d101      	bne.n	1cbd8 <prvResetNextTaskUnblockTime+0x14>
   1cbd4:	2301      	movs	r3, #1
   1cbd6:	e000      	b.n	1cbda <prvResetNextTaskUnblockTime+0x16>
   1cbd8:	2300      	movs	r3, #0
   1cbda:	2b00      	cmp	r3, #0
   1cbdc:	d004      	beq.n	1cbe8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1cbde:	4b0a      	ldr	r3, [pc, #40]	; (1cc08 <prvResetNextTaskUnblockTime+0x44>)
   1cbe0:	2201      	movs	r2, #1
   1cbe2:	4252      	negs	r2, r2
   1cbe4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1cbe6:	e008      	b.n	1cbfa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1cbe8:	4b06      	ldr	r3, [pc, #24]	; (1cc04 <prvResetNextTaskUnblockTime+0x40>)
   1cbea:	681b      	ldr	r3, [r3, #0]
   1cbec:	68db      	ldr	r3, [r3, #12]
   1cbee:	68db      	ldr	r3, [r3, #12]
   1cbf0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1cbf2:	687b      	ldr	r3, [r7, #4]
   1cbf4:	685a      	ldr	r2, [r3, #4]
   1cbf6:	4b04      	ldr	r3, [pc, #16]	; (1cc08 <prvResetNextTaskUnblockTime+0x44>)
   1cbf8:	601a      	str	r2, [r3, #0]
}
   1cbfa:	46c0      	nop			; (mov r8, r8)
   1cbfc:	46bd      	mov	sp, r7
   1cbfe:	b002      	add	sp, #8
   1cc00:	bd80      	pop	{r7, pc}
   1cc02:	46c0      	nop			; (mov r8, r8)
   1cc04:	20003d58 	.word	0x20003d58
   1cc08:	20003dc0 	.word	0x20003dc0

0001cc0c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1cc0c:	b580      	push	{r7, lr}
   1cc0e:	b082      	sub	sp, #8
   1cc10:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1cc12:	4b04      	ldr	r3, [pc, #16]	; (1cc24 <xTaskGetCurrentTaskHandle+0x18>)
   1cc14:	681b      	ldr	r3, [r3, #0]
   1cc16:	607b      	str	r3, [r7, #4]

		return xReturn;
   1cc18:	687b      	ldr	r3, [r7, #4]
	}
   1cc1a:	0018      	movs	r0, r3
   1cc1c:	46bd      	mov	sp, r7
   1cc1e:	b002      	add	sp, #8
   1cc20:	bd80      	pop	{r7, pc}
   1cc22:	46c0      	nop			; (mov r8, r8)
   1cc24:	20003cc8 	.word	0x20003cc8

0001cc28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1cc28:	b580      	push	{r7, lr}
   1cc2a:	b082      	sub	sp, #8
   1cc2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1cc2e:	4b0a      	ldr	r3, [pc, #40]	; (1cc58 <xTaskGetSchedulerState+0x30>)
   1cc30:	681b      	ldr	r3, [r3, #0]
   1cc32:	2b00      	cmp	r3, #0
   1cc34:	d102      	bne.n	1cc3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1cc36:	2301      	movs	r3, #1
   1cc38:	607b      	str	r3, [r7, #4]
   1cc3a:	e008      	b.n	1cc4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cc3c:	4b07      	ldr	r3, [pc, #28]	; (1cc5c <xTaskGetSchedulerState+0x34>)
   1cc3e:	681b      	ldr	r3, [r3, #0]
   1cc40:	2b00      	cmp	r3, #0
   1cc42:	d102      	bne.n	1cc4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1cc44:	2302      	movs	r3, #2
   1cc46:	607b      	str	r3, [r7, #4]
   1cc48:	e001      	b.n	1cc4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1cc4a:	2300      	movs	r3, #0
   1cc4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1cc4e:	687b      	ldr	r3, [r7, #4]
	}
   1cc50:	0018      	movs	r0, r3
   1cc52:	46bd      	mov	sp, r7
   1cc54:	b002      	add	sp, #8
   1cc56:	bd80      	pop	{r7, pc}
   1cc58:	20003dac 	.word	0x20003dac
   1cc5c:	20003dc8 	.word	0x20003dc8

0001cc60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1cc60:	b590      	push	{r4, r7, lr}
   1cc62:	b085      	sub	sp, #20
   1cc64:	af00      	add	r7, sp, #0
   1cc66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1cc68:	687b      	ldr	r3, [r7, #4]
   1cc6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cc6c:	2300      	movs	r3, #0
   1cc6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1cc70:	687b      	ldr	r3, [r7, #4]
   1cc72:	2b00      	cmp	r3, #0
   1cc74:	d100      	bne.n	1cc78 <xTaskPriorityInherit+0x18>
   1cc76:	e09d      	b.n	1cdb4 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1cc78:	68bb      	ldr	r3, [r7, #8]
   1cc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc7c:	4b50      	ldr	r3, [pc, #320]	; (1cdc0 <xTaskPriorityInherit+0x160>)
   1cc7e:	681b      	ldr	r3, [r3, #0]
   1cc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc82:	429a      	cmp	r2, r3
   1cc84:	d300      	bcc.n	1cc88 <xTaskPriorityInherit+0x28>
   1cc86:	e08c      	b.n	1cda2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1cc88:	68bb      	ldr	r3, [r7, #8]
   1cc8a:	699b      	ldr	r3, [r3, #24]
   1cc8c:	2b00      	cmp	r3, #0
   1cc8e:	db06      	blt.n	1cc9e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cc90:	4b4b      	ldr	r3, [pc, #300]	; (1cdc0 <xTaskPriorityInherit+0x160>)
   1cc92:	681b      	ldr	r3, [r3, #0]
   1cc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc96:	2205      	movs	r2, #5
   1cc98:	1ad2      	subs	r2, r2, r3
   1cc9a:	68bb      	ldr	r3, [r7, #8]
   1cc9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1cc9e:	68bb      	ldr	r3, [r7, #8]
   1cca0:	6959      	ldr	r1, [r3, #20]
   1cca2:	68bb      	ldr	r3, [r7, #8]
   1cca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cca6:	0013      	movs	r3, r2
   1cca8:	009b      	lsls	r3, r3, #2
   1ccaa:	189b      	adds	r3, r3, r2
   1ccac:	009b      	lsls	r3, r3, #2
   1ccae:	4a45      	ldr	r2, [pc, #276]	; (1cdc4 <xTaskPriorityInherit+0x164>)
   1ccb0:	189b      	adds	r3, r3, r2
   1ccb2:	4299      	cmp	r1, r3
   1ccb4:	d101      	bne.n	1ccba <xTaskPriorityInherit+0x5a>
   1ccb6:	2301      	movs	r3, #1
   1ccb8:	e000      	b.n	1ccbc <xTaskPriorityInherit+0x5c>
   1ccba:	2300      	movs	r3, #0
   1ccbc:	2b00      	cmp	r3, #0
   1ccbe:	d037      	beq.n	1cd30 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ccc0:	68bb      	ldr	r3, [r7, #8]
   1ccc2:	3304      	adds	r3, #4
   1ccc4:	0018      	movs	r0, r3
   1ccc6:	4b40      	ldr	r3, [pc, #256]	; (1cdc8 <xTaskPriorityInherit+0x168>)
   1ccc8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1ccca:	4b3d      	ldr	r3, [pc, #244]	; (1cdc0 <xTaskPriorityInherit+0x160>)
   1cccc:	681b      	ldr	r3, [r3, #0]
   1ccce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ccd0:	68bb      	ldr	r3, [r7, #8]
   1ccd2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1ccd4:	68bb      	ldr	r3, [r7, #8]
   1ccd6:	0018      	movs	r0, r3
   1ccd8:	4b3c      	ldr	r3, [pc, #240]	; (1cdcc <xTaskPriorityInherit+0x16c>)
   1ccda:	4798      	blx	r3
   1ccdc:	0003      	movs	r3, r0
   1ccde:	001a      	movs	r2, r3
   1cce0:	4b3b      	ldr	r3, [pc, #236]	; (1cdd0 <xTaskPriorityInherit+0x170>)
   1cce2:	881b      	ldrh	r3, [r3, #0]
   1cce4:	4013      	ands	r3, r2
   1cce6:	b29b      	uxth	r3, r3
   1cce8:	2b00      	cmp	r3, #0
   1ccea:	d008      	beq.n	1ccfe <xTaskPriorityInherit+0x9e>
   1ccec:	68bb      	ldr	r3, [r7, #8]
   1ccee:	0018      	movs	r0, r3
   1ccf0:	4b38      	ldr	r3, [pc, #224]	; (1cdd4 <xTaskPriorityInherit+0x174>)
   1ccf2:	4798      	blx	r3
   1ccf4:	0003      	movs	r3, r0
   1ccf6:	b2db      	uxtb	r3, r3
   1ccf8:	0018      	movs	r0, r3
   1ccfa:	4b37      	ldr	r3, [pc, #220]	; (1cdd8 <xTaskPriorityInherit+0x178>)
   1ccfc:	4798      	blx	r3
   1ccfe:	68bb      	ldr	r3, [r7, #8]
   1cd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd02:	4b36      	ldr	r3, [pc, #216]	; (1cddc <xTaskPriorityInherit+0x17c>)
   1cd04:	681b      	ldr	r3, [r3, #0]
   1cd06:	429a      	cmp	r2, r3
   1cd08:	d903      	bls.n	1cd12 <xTaskPriorityInherit+0xb2>
   1cd0a:	68bb      	ldr	r3, [r7, #8]
   1cd0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd0e:	4b33      	ldr	r3, [pc, #204]	; (1cddc <xTaskPriorityInherit+0x17c>)
   1cd10:	601a      	str	r2, [r3, #0]
   1cd12:	68bb      	ldr	r3, [r7, #8]
   1cd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd16:	0013      	movs	r3, r2
   1cd18:	009b      	lsls	r3, r3, #2
   1cd1a:	189b      	adds	r3, r3, r2
   1cd1c:	009b      	lsls	r3, r3, #2
   1cd1e:	4a29      	ldr	r2, [pc, #164]	; (1cdc4 <xTaskPriorityInherit+0x164>)
   1cd20:	189a      	adds	r2, r3, r2
   1cd22:	68bb      	ldr	r3, [r7, #8]
   1cd24:	3304      	adds	r3, #4
   1cd26:	0019      	movs	r1, r3
   1cd28:	0010      	movs	r0, r2
   1cd2a:	4b2d      	ldr	r3, [pc, #180]	; (1cde0 <xTaskPriorityInherit+0x180>)
   1cd2c:	4798      	blx	r3
   1cd2e:	e004      	b.n	1cd3a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1cd30:	4b23      	ldr	r3, [pc, #140]	; (1cdc0 <xTaskPriorityInherit+0x160>)
   1cd32:	681b      	ldr	r3, [r3, #0]
   1cd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd36:	68bb      	ldr	r3, [r7, #8]
   1cd38:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1cd3a:	68bb      	ldr	r3, [r7, #8]
   1cd3c:	0018      	movs	r0, r3
   1cd3e:	4b23      	ldr	r3, [pc, #140]	; (1cdcc <xTaskPriorityInherit+0x16c>)
   1cd40:	4798      	blx	r3
   1cd42:	0003      	movs	r3, r0
   1cd44:	001a      	movs	r2, r3
   1cd46:	4b22      	ldr	r3, [pc, #136]	; (1cdd0 <xTaskPriorityInherit+0x170>)
   1cd48:	881b      	ldrh	r3, [r3, #0]
   1cd4a:	4013      	ands	r3, r2
   1cd4c:	b29b      	uxth	r3, r3
   1cd4e:	2b00      	cmp	r3, #0
   1cd50:	d024      	beq.n	1cd9c <xTaskPriorityInherit+0x13c>
   1cd52:	68bb      	ldr	r3, [r7, #8]
   1cd54:	0018      	movs	r0, r3
   1cd56:	4b1f      	ldr	r3, [pc, #124]	; (1cdd4 <xTaskPriorityInherit+0x174>)
   1cd58:	4798      	blx	r3
   1cd5a:	0003      	movs	r3, r0
   1cd5c:	b2db      	uxtb	r3, r3
   1cd5e:	001c      	movs	r4, r3
   1cd60:	68bb      	ldr	r3, [r7, #8]
   1cd62:	0018      	movs	r0, r3
   1cd64:	4b1b      	ldr	r3, [pc, #108]	; (1cdd4 <xTaskPriorityInherit+0x174>)
   1cd66:	4798      	blx	r3
   1cd68:	0003      	movs	r3, r0
   1cd6a:	b2db      	uxtb	r3, r3
   1cd6c:	0019      	movs	r1, r3
   1cd6e:	2003      	movs	r0, #3
   1cd70:	4b1c      	ldr	r3, [pc, #112]	; (1cde4 <xTaskPriorityInherit+0x184>)
   1cd72:	4798      	blx	r3
   1cd74:	0003      	movs	r3, r0
   1cd76:	0022      	movs	r2, r4
   1cd78:	2103      	movs	r1, #3
   1cd7a:	208e      	movs	r0, #142	; 0x8e
   1cd7c:	4c1a      	ldr	r4, [pc, #104]	; (1cde8 <xTaskPriorityInherit+0x188>)
   1cd7e:	47a0      	blx	r4
   1cd80:	68bb      	ldr	r3, [r7, #8]
   1cd82:	0018      	movs	r0, r3
   1cd84:	4b13      	ldr	r3, [pc, #76]	; (1cdd4 <xTaskPriorityInherit+0x174>)
   1cd86:	4798      	blx	r3
   1cd88:	0003      	movs	r3, r0
   1cd8a:	b2d9      	uxtb	r1, r3
   1cd8c:	4b0c      	ldr	r3, [pc, #48]	; (1cdc0 <xTaskPriorityInherit+0x160>)
   1cd8e:	681b      	ldr	r3, [r3, #0]
   1cd90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cd92:	b2db      	uxtb	r3, r3
   1cd94:	001a      	movs	r2, r3
   1cd96:	2003      	movs	r0, #3
   1cd98:	4b14      	ldr	r3, [pc, #80]	; (1cdec <xTaskPriorityInherit+0x18c>)
   1cd9a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1cd9c:	2301      	movs	r3, #1
   1cd9e:	60fb      	str	r3, [r7, #12]
   1cda0:	e008      	b.n	1cdb4 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1cda2:	68bb      	ldr	r3, [r7, #8]
   1cda4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cda6:	4b06      	ldr	r3, [pc, #24]	; (1cdc0 <xTaskPriorityInherit+0x160>)
   1cda8:	681b      	ldr	r3, [r3, #0]
   1cdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cdac:	429a      	cmp	r2, r3
   1cdae:	d201      	bcs.n	1cdb4 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1cdb0:	2301      	movs	r3, #1
   1cdb2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1cdb4:	68fb      	ldr	r3, [r7, #12]
	}
   1cdb6:	0018      	movs	r0, r3
   1cdb8:	46bd      	mov	sp, r7
   1cdba:	b005      	add	sp, #20
   1cdbc:	bd90      	pop	{r4, r7, pc}
   1cdbe:	46c0      	nop			; (mov r8, r8)
   1cdc0:	20003cc8 	.word	0x20003cc8
   1cdc4:	20003ccc 	.word	0x20003ccc
   1cdc8:	00019d7b 	.word	0x00019d7b
   1cdcc:	00017f01 	.word	0x00017f01
   1cdd0:	200000b8 	.word	0x200000b8
   1cdd4:	00017ee1 	.word	0x00017ee1
   1cdd8:	000186b1 	.word	0x000186b1
   1cddc:	20003da8 	.word	0x20003da8
   1cde0:	00019ccb 	.word	0x00019ccb
   1cde4:	00018eb9 	.word	0x00018eb9
   1cde8:	00018a29 	.word	0x00018a29
   1cdec:	00018e15 	.word	0x00018e15

0001cdf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1cdf0:	b590      	push	{r4, r7, lr}
   1cdf2:	b085      	sub	sp, #20
   1cdf4:	af00      	add	r7, sp, #0
   1cdf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1cdf8:	687b      	ldr	r3, [r7, #4]
   1cdfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1cdfc:	2300      	movs	r3, #0
   1cdfe:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1ce00:	687b      	ldr	r3, [r7, #4]
   1ce02:	2b00      	cmp	r3, #0
   1ce04:	d100      	bne.n	1ce08 <xTaskPriorityDisinherit+0x18>
   1ce06:	e089      	b.n	1cf1c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1ce08:	4b47      	ldr	r3, [pc, #284]	; (1cf28 <xTaskPriorityDisinherit+0x138>)
   1ce0a:	681b      	ldr	r3, [r3, #0]
   1ce0c:	68ba      	ldr	r2, [r7, #8]
   1ce0e:	429a      	cmp	r2, r3
   1ce10:	d001      	beq.n	1ce16 <xTaskPriorityDisinherit+0x26>
   1ce12:	b672      	cpsid	i
   1ce14:	e7fe      	b.n	1ce14 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1ce16:	68bb      	ldr	r3, [r7, #8]
   1ce18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ce1a:	2b00      	cmp	r3, #0
   1ce1c:	d101      	bne.n	1ce22 <xTaskPriorityDisinherit+0x32>
   1ce1e:	b672      	cpsid	i
   1ce20:	e7fe      	b.n	1ce20 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1ce22:	68bb      	ldr	r3, [r7, #8]
   1ce24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ce26:	1e5a      	subs	r2, r3, #1
   1ce28:	68bb      	ldr	r3, [r7, #8]
   1ce2a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1ce2c:	68bb      	ldr	r3, [r7, #8]
   1ce2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ce30:	68bb      	ldr	r3, [r7, #8]
   1ce32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ce34:	429a      	cmp	r2, r3
   1ce36:	d071      	beq.n	1cf1c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1ce38:	68bb      	ldr	r3, [r7, #8]
   1ce3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ce3c:	2b00      	cmp	r3, #0
   1ce3e:	d16d      	bne.n	1cf1c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ce40:	68bb      	ldr	r3, [r7, #8]
   1ce42:	3304      	adds	r3, #4
   1ce44:	0018      	movs	r0, r3
   1ce46:	4b39      	ldr	r3, [pc, #228]	; (1cf2c <xTaskPriorityDisinherit+0x13c>)
   1ce48:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1ce4a:	68bb      	ldr	r3, [r7, #8]
   1ce4c:	0018      	movs	r0, r3
   1ce4e:	4b38      	ldr	r3, [pc, #224]	; (1cf30 <xTaskPriorityDisinherit+0x140>)
   1ce50:	4798      	blx	r3
   1ce52:	0003      	movs	r3, r0
   1ce54:	001a      	movs	r2, r3
   1ce56:	4b37      	ldr	r3, [pc, #220]	; (1cf34 <xTaskPriorityDisinherit+0x144>)
   1ce58:	881b      	ldrh	r3, [r3, #0]
   1ce5a:	4013      	ands	r3, r2
   1ce5c:	b29b      	uxth	r3, r3
   1ce5e:	2b00      	cmp	r3, #0
   1ce60:	d023      	beq.n	1ceaa <xTaskPriorityDisinherit+0xba>
   1ce62:	68bb      	ldr	r3, [r7, #8]
   1ce64:	0018      	movs	r0, r3
   1ce66:	4b34      	ldr	r3, [pc, #208]	; (1cf38 <xTaskPriorityDisinherit+0x148>)
   1ce68:	4798      	blx	r3
   1ce6a:	0003      	movs	r3, r0
   1ce6c:	b2db      	uxtb	r3, r3
   1ce6e:	001c      	movs	r4, r3
   1ce70:	68bb      	ldr	r3, [r7, #8]
   1ce72:	0018      	movs	r0, r3
   1ce74:	4b30      	ldr	r3, [pc, #192]	; (1cf38 <xTaskPriorityDisinherit+0x148>)
   1ce76:	4798      	blx	r3
   1ce78:	0003      	movs	r3, r0
   1ce7a:	b2db      	uxtb	r3, r3
   1ce7c:	0019      	movs	r1, r3
   1ce7e:	2003      	movs	r0, #3
   1ce80:	4b2e      	ldr	r3, [pc, #184]	; (1cf3c <xTaskPriorityDisinherit+0x14c>)
   1ce82:	4798      	blx	r3
   1ce84:	0003      	movs	r3, r0
   1ce86:	0022      	movs	r2, r4
   1ce88:	2103      	movs	r1, #3
   1ce8a:	208f      	movs	r0, #143	; 0x8f
   1ce8c:	4c2c      	ldr	r4, [pc, #176]	; (1cf40 <xTaskPriorityDisinherit+0x150>)
   1ce8e:	47a0      	blx	r4
   1ce90:	68bb      	ldr	r3, [r7, #8]
   1ce92:	0018      	movs	r0, r3
   1ce94:	4b28      	ldr	r3, [pc, #160]	; (1cf38 <xTaskPriorityDisinherit+0x148>)
   1ce96:	4798      	blx	r3
   1ce98:	0003      	movs	r3, r0
   1ce9a:	b2d9      	uxtb	r1, r3
   1ce9c:	68bb      	ldr	r3, [r7, #8]
   1ce9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cea0:	b2db      	uxtb	r3, r3
   1cea2:	001a      	movs	r2, r3
   1cea4:	2003      	movs	r0, #3
   1cea6:	4b27      	ldr	r3, [pc, #156]	; (1cf44 <xTaskPriorityDisinherit+0x154>)
   1cea8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1ceaa:	68bb      	ldr	r3, [r7, #8]
   1ceac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ceae:	68bb      	ldr	r3, [r7, #8]
   1ceb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1ceb2:	68bb      	ldr	r3, [r7, #8]
   1ceb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ceb6:	2205      	movs	r2, #5
   1ceb8:	1ad2      	subs	r2, r2, r3
   1ceba:	68bb      	ldr	r3, [r7, #8]
   1cebc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1cebe:	68bb      	ldr	r3, [r7, #8]
   1cec0:	0018      	movs	r0, r3
   1cec2:	4b1b      	ldr	r3, [pc, #108]	; (1cf30 <xTaskPriorityDisinherit+0x140>)
   1cec4:	4798      	blx	r3
   1cec6:	0003      	movs	r3, r0
   1cec8:	001a      	movs	r2, r3
   1ceca:	4b1a      	ldr	r3, [pc, #104]	; (1cf34 <xTaskPriorityDisinherit+0x144>)
   1cecc:	881b      	ldrh	r3, [r3, #0]
   1cece:	4013      	ands	r3, r2
   1ced0:	b29b      	uxth	r3, r3
   1ced2:	2b00      	cmp	r3, #0
   1ced4:	d008      	beq.n	1cee8 <xTaskPriorityDisinherit+0xf8>
   1ced6:	68bb      	ldr	r3, [r7, #8]
   1ced8:	0018      	movs	r0, r3
   1ceda:	4b17      	ldr	r3, [pc, #92]	; (1cf38 <xTaskPriorityDisinherit+0x148>)
   1cedc:	4798      	blx	r3
   1cede:	0003      	movs	r3, r0
   1cee0:	b2db      	uxtb	r3, r3
   1cee2:	0018      	movs	r0, r3
   1cee4:	4b18      	ldr	r3, [pc, #96]	; (1cf48 <xTaskPriorityDisinherit+0x158>)
   1cee6:	4798      	blx	r3
   1cee8:	68bb      	ldr	r3, [r7, #8]
   1ceea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ceec:	4b17      	ldr	r3, [pc, #92]	; (1cf4c <xTaskPriorityDisinherit+0x15c>)
   1ceee:	681b      	ldr	r3, [r3, #0]
   1cef0:	429a      	cmp	r2, r3
   1cef2:	d903      	bls.n	1cefc <xTaskPriorityDisinherit+0x10c>
   1cef4:	68bb      	ldr	r3, [r7, #8]
   1cef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cef8:	4b14      	ldr	r3, [pc, #80]	; (1cf4c <xTaskPriorityDisinherit+0x15c>)
   1cefa:	601a      	str	r2, [r3, #0]
   1cefc:	68bb      	ldr	r3, [r7, #8]
   1cefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf00:	0013      	movs	r3, r2
   1cf02:	009b      	lsls	r3, r3, #2
   1cf04:	189b      	adds	r3, r3, r2
   1cf06:	009b      	lsls	r3, r3, #2
   1cf08:	4a11      	ldr	r2, [pc, #68]	; (1cf50 <xTaskPriorityDisinherit+0x160>)
   1cf0a:	189a      	adds	r2, r3, r2
   1cf0c:	68bb      	ldr	r3, [r7, #8]
   1cf0e:	3304      	adds	r3, #4
   1cf10:	0019      	movs	r1, r3
   1cf12:	0010      	movs	r0, r2
   1cf14:	4b0f      	ldr	r3, [pc, #60]	; (1cf54 <xTaskPriorityDisinherit+0x164>)
   1cf16:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1cf18:	2301      	movs	r3, #1
   1cf1a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1cf1c:	68fb      	ldr	r3, [r7, #12]
	}
   1cf1e:	0018      	movs	r0, r3
   1cf20:	46bd      	mov	sp, r7
   1cf22:	b005      	add	sp, #20
   1cf24:	bd90      	pop	{r4, r7, pc}
   1cf26:	46c0      	nop			; (mov r8, r8)
   1cf28:	20003cc8 	.word	0x20003cc8
   1cf2c:	00019d7b 	.word	0x00019d7b
   1cf30:	00017f01 	.word	0x00017f01
   1cf34:	200000b8 	.word	0x200000b8
   1cf38:	00017ee1 	.word	0x00017ee1
   1cf3c:	00018eb9 	.word	0x00018eb9
   1cf40:	00018a29 	.word	0x00018a29
   1cf44:	00018e15 	.word	0x00018e15
   1cf48:	000186b1 	.word	0x000186b1
   1cf4c:	20003da8 	.word	0x20003da8
   1cf50:	20003ccc 	.word	0x20003ccc
   1cf54:	00019ccb 	.word	0x00019ccb

0001cf58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1cf58:	b590      	push	{r4, r7, lr}
   1cf5a:	b087      	sub	sp, #28
   1cf5c:	af00      	add	r7, sp, #0
   1cf5e:	6078      	str	r0, [r7, #4]
   1cf60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1cf62:	687b      	ldr	r3, [r7, #4]
   1cf64:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1cf66:	2301      	movs	r3, #1
   1cf68:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1cf6a:	687b      	ldr	r3, [r7, #4]
   1cf6c:	2b00      	cmp	r3, #0
   1cf6e:	d100      	bne.n	1cf72 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1cf70:	e0a4      	b.n	1d0bc <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1cf72:	693b      	ldr	r3, [r7, #16]
   1cf74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1cf76:	2b00      	cmp	r3, #0
   1cf78:	d101      	bne.n	1cf7e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1cf7a:	b672      	cpsid	i
   1cf7c:	e7fe      	b.n	1cf7c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1cf7e:	693b      	ldr	r3, [r7, #16]
   1cf80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1cf82:	683b      	ldr	r3, [r7, #0]
   1cf84:	429a      	cmp	r2, r3
   1cf86:	d202      	bcs.n	1cf8e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1cf88:	683b      	ldr	r3, [r7, #0]
   1cf8a:	617b      	str	r3, [r7, #20]
   1cf8c:	e002      	b.n	1cf94 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1cf8e:	693b      	ldr	r3, [r7, #16]
   1cf90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1cf92:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1cf94:	693b      	ldr	r3, [r7, #16]
   1cf96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf98:	697b      	ldr	r3, [r7, #20]
   1cf9a:	429a      	cmp	r2, r3
   1cf9c:	d100      	bne.n	1cfa0 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1cf9e:	e08d      	b.n	1d0bc <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1cfa0:	693b      	ldr	r3, [r7, #16]
   1cfa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1cfa4:	68fb      	ldr	r3, [r7, #12]
   1cfa6:	429a      	cmp	r2, r3
   1cfa8:	d000      	beq.n	1cfac <vTaskPriorityDisinheritAfterTimeout+0x54>
   1cfaa:	e087      	b.n	1d0bc <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1cfac:	4b45      	ldr	r3, [pc, #276]	; (1d0c4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1cfae:	681b      	ldr	r3, [r3, #0]
   1cfb0:	693a      	ldr	r2, [r7, #16]
   1cfb2:	429a      	cmp	r2, r3
   1cfb4:	d101      	bne.n	1cfba <vTaskPriorityDisinheritAfterTimeout+0x62>
   1cfb6:	b672      	cpsid	i
   1cfb8:	e7fe      	b.n	1cfb8 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1cfba:	693b      	ldr	r3, [r7, #16]
   1cfbc:	0018      	movs	r0, r3
   1cfbe:	4b42      	ldr	r3, [pc, #264]	; (1d0c8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1cfc0:	4798      	blx	r3
   1cfc2:	0003      	movs	r3, r0
   1cfc4:	001a      	movs	r2, r3
   1cfc6:	4b41      	ldr	r3, [pc, #260]	; (1d0cc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1cfc8:	881b      	ldrh	r3, [r3, #0]
   1cfca:	4013      	ands	r3, r2
   1cfcc:	b29b      	uxth	r3, r3
   1cfce:	2b00      	cmp	r3, #0
   1cfd0:	d023      	beq.n	1d01a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1cfd2:	693b      	ldr	r3, [r7, #16]
   1cfd4:	0018      	movs	r0, r3
   1cfd6:	4b3e      	ldr	r3, [pc, #248]	; (1d0d0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cfd8:	4798      	blx	r3
   1cfda:	0003      	movs	r3, r0
   1cfdc:	b2db      	uxtb	r3, r3
   1cfde:	001c      	movs	r4, r3
   1cfe0:	693b      	ldr	r3, [r7, #16]
   1cfe2:	0018      	movs	r0, r3
   1cfe4:	4b3a      	ldr	r3, [pc, #232]	; (1d0d0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1cfe6:	4798      	blx	r3
   1cfe8:	0003      	movs	r3, r0
   1cfea:	b2db      	uxtb	r3, r3
   1cfec:	0019      	movs	r1, r3
   1cfee:	2003      	movs	r0, #3
   1cff0:	4b38      	ldr	r3, [pc, #224]	; (1d0d4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1cff2:	4798      	blx	r3
   1cff4:	0003      	movs	r3, r0
   1cff6:	0022      	movs	r2, r4
   1cff8:	2103      	movs	r1, #3
   1cffa:	208f      	movs	r0, #143	; 0x8f
   1cffc:	4c36      	ldr	r4, [pc, #216]	; (1d0d8 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1cffe:	47a0      	blx	r4
   1d000:	693b      	ldr	r3, [r7, #16]
   1d002:	0018      	movs	r0, r3
   1d004:	4b32      	ldr	r3, [pc, #200]	; (1d0d0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d006:	4798      	blx	r3
   1d008:	0003      	movs	r3, r0
   1d00a:	b2d9      	uxtb	r1, r3
   1d00c:	693b      	ldr	r3, [r7, #16]
   1d00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d010:	b2db      	uxtb	r3, r3
   1d012:	001a      	movs	r2, r3
   1d014:	2003      	movs	r0, #3
   1d016:	4b31      	ldr	r3, [pc, #196]	; (1d0dc <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1d018:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1d01a:	693b      	ldr	r3, [r7, #16]
   1d01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d01e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1d020:	693b      	ldr	r3, [r7, #16]
   1d022:	697a      	ldr	r2, [r7, #20]
   1d024:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d026:	693b      	ldr	r3, [r7, #16]
   1d028:	699b      	ldr	r3, [r3, #24]
   1d02a:	2b00      	cmp	r3, #0
   1d02c:	db04      	blt.n	1d038 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d02e:	697b      	ldr	r3, [r7, #20]
   1d030:	2205      	movs	r2, #5
   1d032:	1ad2      	subs	r2, r2, r3
   1d034:	693b      	ldr	r3, [r7, #16]
   1d036:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1d038:	693b      	ldr	r3, [r7, #16]
   1d03a:	6959      	ldr	r1, [r3, #20]
   1d03c:	68ba      	ldr	r2, [r7, #8]
   1d03e:	0013      	movs	r3, r2
   1d040:	009b      	lsls	r3, r3, #2
   1d042:	189b      	adds	r3, r3, r2
   1d044:	009b      	lsls	r3, r3, #2
   1d046:	4a26      	ldr	r2, [pc, #152]	; (1d0e0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d048:	189b      	adds	r3, r3, r2
   1d04a:	4299      	cmp	r1, r3
   1d04c:	d101      	bne.n	1d052 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1d04e:	2301      	movs	r3, #1
   1d050:	e000      	b.n	1d054 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1d052:	2300      	movs	r3, #0
   1d054:	2b00      	cmp	r3, #0
   1d056:	d031      	beq.n	1d0bc <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d058:	693b      	ldr	r3, [r7, #16]
   1d05a:	3304      	adds	r3, #4
   1d05c:	0018      	movs	r0, r3
   1d05e:	4b21      	ldr	r3, [pc, #132]	; (1d0e4 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1d060:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1d062:	693b      	ldr	r3, [r7, #16]
   1d064:	0018      	movs	r0, r3
   1d066:	4b18      	ldr	r3, [pc, #96]	; (1d0c8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d068:	4798      	blx	r3
   1d06a:	0003      	movs	r3, r0
   1d06c:	001a      	movs	r2, r3
   1d06e:	4b17      	ldr	r3, [pc, #92]	; (1d0cc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d070:	881b      	ldrh	r3, [r3, #0]
   1d072:	4013      	ands	r3, r2
   1d074:	b29b      	uxth	r3, r3
   1d076:	2b00      	cmp	r3, #0
   1d078:	d008      	beq.n	1d08c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1d07a:	693b      	ldr	r3, [r7, #16]
   1d07c:	0018      	movs	r0, r3
   1d07e:	4b14      	ldr	r3, [pc, #80]	; (1d0d0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d080:	4798      	blx	r3
   1d082:	0003      	movs	r3, r0
   1d084:	b2db      	uxtb	r3, r3
   1d086:	0018      	movs	r0, r3
   1d088:	4b17      	ldr	r3, [pc, #92]	; (1d0e8 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1d08a:	4798      	blx	r3
   1d08c:	693b      	ldr	r3, [r7, #16]
   1d08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d090:	4b16      	ldr	r3, [pc, #88]	; (1d0ec <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d092:	681b      	ldr	r3, [r3, #0]
   1d094:	429a      	cmp	r2, r3
   1d096:	d903      	bls.n	1d0a0 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1d098:	693b      	ldr	r3, [r7, #16]
   1d09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d09c:	4b13      	ldr	r3, [pc, #76]	; (1d0ec <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d09e:	601a      	str	r2, [r3, #0]
   1d0a0:	693b      	ldr	r3, [r7, #16]
   1d0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d0a4:	0013      	movs	r3, r2
   1d0a6:	009b      	lsls	r3, r3, #2
   1d0a8:	189b      	adds	r3, r3, r2
   1d0aa:	009b      	lsls	r3, r3, #2
   1d0ac:	4a0c      	ldr	r2, [pc, #48]	; (1d0e0 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d0ae:	189a      	adds	r2, r3, r2
   1d0b0:	693b      	ldr	r3, [r7, #16]
   1d0b2:	3304      	adds	r3, #4
   1d0b4:	0019      	movs	r1, r3
   1d0b6:	0010      	movs	r0, r2
   1d0b8:	4b0d      	ldr	r3, [pc, #52]	; (1d0f0 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1d0ba:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d0bc:	46c0      	nop			; (mov r8, r8)
   1d0be:	46bd      	mov	sp, r7
   1d0c0:	b007      	add	sp, #28
   1d0c2:	bd90      	pop	{r4, r7, pc}
   1d0c4:	20003cc8 	.word	0x20003cc8
   1d0c8:	00017f01 	.word	0x00017f01
   1d0cc:	200000b8 	.word	0x200000b8
   1d0d0:	00017ee1 	.word	0x00017ee1
   1d0d4:	00018eb9 	.word	0x00018eb9
   1d0d8:	00018a29 	.word	0x00018a29
   1d0dc:	00018e15 	.word	0x00018e15
   1d0e0:	20003ccc 	.word	0x20003ccc
   1d0e4:	00019d7b 	.word	0x00019d7b
   1d0e8:	000186b1 	.word	0x000186b1
   1d0ec:	20003da8 	.word	0x20003da8
   1d0f0:	00019ccb 	.word	0x00019ccb

0001d0f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1d0f4:	b580      	push	{r7, lr}
   1d0f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1d0f8:	4b06      	ldr	r3, [pc, #24]	; (1d114 <pvTaskIncrementMutexHeldCount+0x20>)
   1d0fa:	681b      	ldr	r3, [r3, #0]
   1d0fc:	2b00      	cmp	r3, #0
   1d0fe:	d004      	beq.n	1d10a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1d100:	4b04      	ldr	r3, [pc, #16]	; (1d114 <pvTaskIncrementMutexHeldCount+0x20>)
   1d102:	681b      	ldr	r3, [r3, #0]
   1d104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d106:	3201      	adds	r2, #1
   1d108:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1d10a:	4b02      	ldr	r3, [pc, #8]	; (1d114 <pvTaskIncrementMutexHeldCount+0x20>)
   1d10c:	681b      	ldr	r3, [r3, #0]
	}
   1d10e:	0018      	movs	r0, r3
   1d110:	46bd      	mov	sp, r7
   1d112:	bd80      	pop	{r7, pc}
   1d114:	20003cc8 	.word	0x20003cc8

0001d118 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d118:	b580      	push	{r7, lr}
   1d11a:	b084      	sub	sp, #16
   1d11c:	af00      	add	r7, sp, #0
   1d11e:	6078      	str	r0, [r7, #4]
   1d120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d122:	4b21      	ldr	r3, [pc, #132]	; (1d1a8 <prvAddCurrentTaskToDelayedList+0x90>)
   1d124:	681b      	ldr	r3, [r3, #0]
   1d126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d128:	4b20      	ldr	r3, [pc, #128]	; (1d1ac <prvAddCurrentTaskToDelayedList+0x94>)
   1d12a:	681b      	ldr	r3, [r3, #0]
   1d12c:	3304      	adds	r3, #4
   1d12e:	0018      	movs	r0, r3
   1d130:	4b1f      	ldr	r3, [pc, #124]	; (1d1b0 <prvAddCurrentTaskToDelayedList+0x98>)
   1d132:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d134:	687b      	ldr	r3, [r7, #4]
   1d136:	3301      	adds	r3, #1
   1d138:	d10b      	bne.n	1d152 <prvAddCurrentTaskToDelayedList+0x3a>
   1d13a:	683b      	ldr	r3, [r7, #0]
   1d13c:	2b00      	cmp	r3, #0
   1d13e:	d008      	beq.n	1d152 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d140:	4b1a      	ldr	r3, [pc, #104]	; (1d1ac <prvAddCurrentTaskToDelayedList+0x94>)
   1d142:	681b      	ldr	r3, [r3, #0]
   1d144:	1d1a      	adds	r2, r3, #4
   1d146:	4b1b      	ldr	r3, [pc, #108]	; (1d1b4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d148:	0011      	movs	r1, r2
   1d14a:	0018      	movs	r0, r3
   1d14c:	4b1a      	ldr	r3, [pc, #104]	; (1d1b8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1d14e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d150:	e026      	b.n	1d1a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d152:	68fa      	ldr	r2, [r7, #12]
   1d154:	687b      	ldr	r3, [r7, #4]
   1d156:	18d3      	adds	r3, r2, r3
   1d158:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d15a:	4b14      	ldr	r3, [pc, #80]	; (1d1ac <prvAddCurrentTaskToDelayedList+0x94>)
   1d15c:	681b      	ldr	r3, [r3, #0]
   1d15e:	68ba      	ldr	r2, [r7, #8]
   1d160:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d162:	68ba      	ldr	r2, [r7, #8]
   1d164:	68fb      	ldr	r3, [r7, #12]
   1d166:	429a      	cmp	r2, r3
   1d168:	d209      	bcs.n	1d17e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d16a:	4b14      	ldr	r3, [pc, #80]	; (1d1bc <prvAddCurrentTaskToDelayedList+0xa4>)
   1d16c:	681a      	ldr	r2, [r3, #0]
   1d16e:	4b0f      	ldr	r3, [pc, #60]	; (1d1ac <prvAddCurrentTaskToDelayedList+0x94>)
   1d170:	681b      	ldr	r3, [r3, #0]
   1d172:	3304      	adds	r3, #4
   1d174:	0019      	movs	r1, r3
   1d176:	0010      	movs	r0, r2
   1d178:	4b11      	ldr	r3, [pc, #68]	; (1d1c0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d17a:	4798      	blx	r3
}
   1d17c:	e010      	b.n	1d1a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d17e:	4b11      	ldr	r3, [pc, #68]	; (1d1c4 <prvAddCurrentTaskToDelayedList+0xac>)
   1d180:	681a      	ldr	r2, [r3, #0]
   1d182:	4b0a      	ldr	r3, [pc, #40]	; (1d1ac <prvAddCurrentTaskToDelayedList+0x94>)
   1d184:	681b      	ldr	r3, [r3, #0]
   1d186:	3304      	adds	r3, #4
   1d188:	0019      	movs	r1, r3
   1d18a:	0010      	movs	r0, r2
   1d18c:	4b0c      	ldr	r3, [pc, #48]	; (1d1c0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1d18e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1d190:	4b0d      	ldr	r3, [pc, #52]	; (1d1c8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d192:	681b      	ldr	r3, [r3, #0]
   1d194:	68ba      	ldr	r2, [r7, #8]
   1d196:	429a      	cmp	r2, r3
   1d198:	d202      	bcs.n	1d1a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1d19a:	4b0b      	ldr	r3, [pc, #44]	; (1d1c8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1d19c:	68ba      	ldr	r2, [r7, #8]
   1d19e:	601a      	str	r2, [r3, #0]
}
   1d1a0:	46c0      	nop			; (mov r8, r8)
   1d1a2:	46bd      	mov	sp, r7
   1d1a4:	b004      	add	sp, #16
   1d1a6:	bd80      	pop	{r7, pc}
   1d1a8:	20003da4 	.word	0x20003da4
   1d1ac:	20003cc8 	.word	0x20003cc8
   1d1b0:	00019d7b 	.word	0x00019d7b
   1d1b4:	20003d8c 	.word	0x20003d8c
   1d1b8:	00019ccb 	.word	0x00019ccb
   1d1bc:	20003d5c 	.word	0x20003d5c
   1d1c0:	00019d0f 	.word	0x00019d0f
   1d1c4:	20003d58 	.word	0x20003d58
   1d1c8:	20003dc0 	.word	0x20003dc0

0001d1cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1d1cc:	b590      	push	{r4, r7, lr}
   1d1ce:	b085      	sub	sp, #20
   1d1d0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1d1d2:	2300      	movs	r3, #0
   1d1d4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1d1d6:	4b0e      	ldr	r3, [pc, #56]	; (1d210 <xTimerCreateTimerTask+0x44>)
   1d1d8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1d1da:	4b0e      	ldr	r3, [pc, #56]	; (1d214 <xTimerCreateTimerTask+0x48>)
   1d1dc:	681b      	ldr	r3, [r3, #0]
   1d1de:	2b00      	cmp	r3, #0
   1d1e0:	d00b      	beq.n	1d1fa <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1d1e2:	490d      	ldr	r1, [pc, #52]	; (1d218 <xTimerCreateTimerTask+0x4c>)
   1d1e4:	480d      	ldr	r0, [pc, #52]	; (1d21c <xTimerCreateTimerTask+0x50>)
   1d1e6:	4b0e      	ldr	r3, [pc, #56]	; (1d220 <xTimerCreateTimerTask+0x54>)
   1d1e8:	9301      	str	r3, [sp, #4]
   1d1ea:	2302      	movs	r3, #2
   1d1ec:	9300      	str	r3, [sp, #0]
   1d1ee:	2300      	movs	r3, #0
   1d1f0:	2280      	movs	r2, #128	; 0x80
   1d1f2:	4c0c      	ldr	r4, [pc, #48]	; (1d224 <xTimerCreateTimerTask+0x58>)
   1d1f4:	47a0      	blx	r4
   1d1f6:	0003      	movs	r3, r0
   1d1f8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1d1fa:	687b      	ldr	r3, [r7, #4]
   1d1fc:	2b00      	cmp	r3, #0
   1d1fe:	d101      	bne.n	1d204 <xTimerCreateTimerTask+0x38>
   1d200:	b672      	cpsid	i
   1d202:	e7fe      	b.n	1d202 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1d204:	687b      	ldr	r3, [r7, #4]
}
   1d206:	0018      	movs	r0, r3
   1d208:	46bd      	mov	sp, r7
   1d20a:	b003      	add	sp, #12
   1d20c:	bd90      	pop	{r4, r7, pc}
   1d20e:	46c0      	nop			; (mov r8, r8)
   1d210:	0001d715 	.word	0x0001d715
   1d214:	20003dfc 	.word	0x20003dfc
   1d218:	00037a94 	.word	0x00037a94
   1d21c:	0001d34d 	.word	0x0001d34d
   1d220:	20003e00 	.word	0x20003e00
   1d224:	0001bb65 	.word	0x0001bb65

0001d228 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1d228:	b590      	push	{r4, r7, lr}
   1d22a:	b089      	sub	sp, #36	; 0x24
   1d22c:	af00      	add	r7, sp, #0
   1d22e:	60f8      	str	r0, [r7, #12]
   1d230:	60b9      	str	r1, [r7, #8]
   1d232:	607a      	str	r2, [r7, #4]
   1d234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1d236:	2300      	movs	r3, #0
   1d238:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1d23a:	68fb      	ldr	r3, [r7, #12]
   1d23c:	2b00      	cmp	r3, #0
   1d23e:	d101      	bne.n	1d244 <xTimerGenericCommand+0x1c>
   1d240:	b672      	cpsid	i
   1d242:	e7fe      	b.n	1d242 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1d244:	4b1e      	ldr	r3, [pc, #120]	; (1d2c0 <xTimerGenericCommand+0x98>)
   1d246:	681b      	ldr	r3, [r3, #0]
   1d248:	2b00      	cmp	r3, #0
   1d24a:	d033      	beq.n	1d2b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1d24c:	2310      	movs	r3, #16
   1d24e:	18fb      	adds	r3, r7, r3
   1d250:	68ba      	ldr	r2, [r7, #8]
   1d252:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1d254:	2310      	movs	r3, #16
   1d256:	18fb      	adds	r3, r7, r3
   1d258:	687a      	ldr	r2, [r7, #4]
   1d25a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1d25c:	2310      	movs	r3, #16
   1d25e:	18fb      	adds	r3, r7, r3
   1d260:	68fa      	ldr	r2, [r7, #12]
   1d262:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1d264:	68bb      	ldr	r3, [r7, #8]
   1d266:	2b05      	cmp	r3, #5
   1d268:	dc1a      	bgt.n	1d2a0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1d26a:	4b16      	ldr	r3, [pc, #88]	; (1d2c4 <xTimerGenericCommand+0x9c>)
   1d26c:	4798      	blx	r3
   1d26e:	0003      	movs	r3, r0
   1d270:	2b02      	cmp	r3, #2
   1d272:	d10a      	bne.n	1d28a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1d274:	4b12      	ldr	r3, [pc, #72]	; (1d2c0 <xTimerGenericCommand+0x98>)
   1d276:	6818      	ldr	r0, [r3, #0]
   1d278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1d27a:	2310      	movs	r3, #16
   1d27c:	18f9      	adds	r1, r7, r3
   1d27e:	2300      	movs	r3, #0
   1d280:	4c11      	ldr	r4, [pc, #68]	; (1d2c8 <xTimerGenericCommand+0xa0>)
   1d282:	47a0      	blx	r4
   1d284:	0003      	movs	r3, r0
   1d286:	61fb      	str	r3, [r7, #28]
   1d288:	e014      	b.n	1d2b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1d28a:	4b0d      	ldr	r3, [pc, #52]	; (1d2c0 <xTimerGenericCommand+0x98>)
   1d28c:	6818      	ldr	r0, [r3, #0]
   1d28e:	2310      	movs	r3, #16
   1d290:	18f9      	adds	r1, r7, r3
   1d292:	2300      	movs	r3, #0
   1d294:	2200      	movs	r2, #0
   1d296:	4c0c      	ldr	r4, [pc, #48]	; (1d2c8 <xTimerGenericCommand+0xa0>)
   1d298:	47a0      	blx	r4
   1d29a:	0003      	movs	r3, r0
   1d29c:	61fb      	str	r3, [r7, #28]
   1d29e:	e009      	b.n	1d2b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1d2a0:	4b07      	ldr	r3, [pc, #28]	; (1d2c0 <xTimerGenericCommand+0x98>)
   1d2a2:	6818      	ldr	r0, [r3, #0]
   1d2a4:	683a      	ldr	r2, [r7, #0]
   1d2a6:	2310      	movs	r3, #16
   1d2a8:	18f9      	adds	r1, r7, r3
   1d2aa:	2300      	movs	r3, #0
   1d2ac:	4c07      	ldr	r4, [pc, #28]	; (1d2cc <xTimerGenericCommand+0xa4>)
   1d2ae:	47a0      	blx	r4
   1d2b0:	0003      	movs	r3, r0
   1d2b2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1d2b4:	69fb      	ldr	r3, [r7, #28]
}
   1d2b6:	0018      	movs	r0, r3
   1d2b8:	46bd      	mov	sp, r7
   1d2ba:	b009      	add	sp, #36	; 0x24
   1d2bc:	bd90      	pop	{r4, r7, pc}
   1d2be:	46c0      	nop			; (mov r8, r8)
   1d2c0:	20003dfc 	.word	0x20003dfc
   1d2c4:	0001cc29 	.word	0x0001cc29
   1d2c8:	0001a49d 	.word	0x0001a49d
   1d2cc:	0001a8fd 	.word	0x0001a8fd

0001d2d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1d2d0:	b590      	push	{r4, r7, lr}
   1d2d2:	b087      	sub	sp, #28
   1d2d4:	af02      	add	r7, sp, #8
   1d2d6:	6078      	str	r0, [r7, #4]
   1d2d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d2da:	4b18      	ldr	r3, [pc, #96]	; (1d33c <prvProcessExpiredTimer+0x6c>)
   1d2dc:	681b      	ldr	r3, [r3, #0]
   1d2de:	68db      	ldr	r3, [r3, #12]
   1d2e0:	68db      	ldr	r3, [r3, #12]
   1d2e2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d2e4:	68fb      	ldr	r3, [r7, #12]
   1d2e6:	3304      	adds	r3, #4
   1d2e8:	0018      	movs	r0, r3
   1d2ea:	4b15      	ldr	r3, [pc, #84]	; (1d340 <prvProcessExpiredTimer+0x70>)
   1d2ec:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d2ee:	68fb      	ldr	r3, [r7, #12]
   1d2f0:	69db      	ldr	r3, [r3, #28]
   1d2f2:	2b01      	cmp	r3, #1
   1d2f4:	d119      	bne.n	1d32a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1d2f6:	68fb      	ldr	r3, [r7, #12]
   1d2f8:	699a      	ldr	r2, [r3, #24]
   1d2fa:	687b      	ldr	r3, [r7, #4]
   1d2fc:	18d1      	adds	r1, r2, r3
   1d2fe:	687b      	ldr	r3, [r7, #4]
   1d300:	683a      	ldr	r2, [r7, #0]
   1d302:	68f8      	ldr	r0, [r7, #12]
   1d304:	4c0f      	ldr	r4, [pc, #60]	; (1d344 <prvProcessExpiredTimer+0x74>)
   1d306:	47a0      	blx	r4
   1d308:	1e03      	subs	r3, r0, #0
   1d30a:	d00e      	beq.n	1d32a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d30c:	687a      	ldr	r2, [r7, #4]
   1d30e:	68f8      	ldr	r0, [r7, #12]
   1d310:	2300      	movs	r3, #0
   1d312:	9300      	str	r3, [sp, #0]
   1d314:	2300      	movs	r3, #0
   1d316:	2100      	movs	r1, #0
   1d318:	4c0b      	ldr	r4, [pc, #44]	; (1d348 <prvProcessExpiredTimer+0x78>)
   1d31a:	47a0      	blx	r4
   1d31c:	0003      	movs	r3, r0
   1d31e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1d320:	68bb      	ldr	r3, [r7, #8]
   1d322:	2b00      	cmp	r3, #0
   1d324:	d101      	bne.n	1d32a <prvProcessExpiredTimer+0x5a>
   1d326:	b672      	cpsid	i
   1d328:	e7fe      	b.n	1d328 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d32a:	68fb      	ldr	r3, [r7, #12]
   1d32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d32e:	68fa      	ldr	r2, [r7, #12]
   1d330:	0010      	movs	r0, r2
   1d332:	4798      	blx	r3
}
   1d334:	46c0      	nop			; (mov r8, r8)
   1d336:	46bd      	mov	sp, r7
   1d338:	b005      	add	sp, #20
   1d33a:	bd90      	pop	{r4, r7, pc}
   1d33c:	20003df4 	.word	0x20003df4
   1d340:	00019d7b 	.word	0x00019d7b
   1d344:	0001d4b5 	.word	0x0001d4b5
   1d348:	0001d229 	.word	0x0001d229

0001d34c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1d34c:	b580      	push	{r7, lr}
   1d34e:	b084      	sub	sp, #16
   1d350:	af00      	add	r7, sp, #0
   1d352:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1d354:	4b08      	ldr	r3, [pc, #32]	; (1d378 <prvTimerTask+0x2c>)
   1d356:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d358:	2308      	movs	r3, #8
   1d35a:	18fb      	adds	r3, r7, r3
   1d35c:	0018      	movs	r0, r3
   1d35e:	4b07      	ldr	r3, [pc, #28]	; (1d37c <prvTimerTask+0x30>)
   1d360:	4798      	blx	r3
   1d362:	0003      	movs	r3, r0
   1d364:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1d366:	68ba      	ldr	r2, [r7, #8]
   1d368:	68fb      	ldr	r3, [r7, #12]
   1d36a:	0011      	movs	r1, r2
   1d36c:	0018      	movs	r0, r3
   1d36e:	4b04      	ldr	r3, [pc, #16]	; (1d380 <prvTimerTask+0x34>)
   1d370:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1d372:	4b04      	ldr	r3, [pc, #16]	; (1d384 <prvTimerTask+0x38>)
   1d374:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1d376:	e7ef      	b.n	1d358 <prvTimerTask+0xc>
   1d378:	00032109 	.word	0x00032109
   1d37c:	0001d42d 	.word	0x0001d42d
   1d380:	0001d389 	.word	0x0001d389
   1d384:	0001d53d 	.word	0x0001d53d

0001d388 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1d388:	b580      	push	{r7, lr}
   1d38a:	b084      	sub	sp, #16
   1d38c:	af00      	add	r7, sp, #0
   1d38e:	6078      	str	r0, [r7, #4]
   1d390:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1d392:	4b1e      	ldr	r3, [pc, #120]	; (1d40c <prvProcessTimerOrBlockTask+0x84>)
   1d394:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d396:	2308      	movs	r3, #8
   1d398:	18fb      	adds	r3, r7, r3
   1d39a:	0018      	movs	r0, r3
   1d39c:	4b1c      	ldr	r3, [pc, #112]	; (1d410 <prvProcessTimerOrBlockTask+0x88>)
   1d39e:	4798      	blx	r3
   1d3a0:	0003      	movs	r3, r0
   1d3a2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1d3a4:	68bb      	ldr	r3, [r7, #8]
   1d3a6:	2b00      	cmp	r3, #0
   1d3a8:	d129      	bne.n	1d3fe <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1d3aa:	683b      	ldr	r3, [r7, #0]
   1d3ac:	2b00      	cmp	r3, #0
   1d3ae:	d10c      	bne.n	1d3ca <prvProcessTimerOrBlockTask+0x42>
   1d3b0:	687a      	ldr	r2, [r7, #4]
   1d3b2:	68fb      	ldr	r3, [r7, #12]
   1d3b4:	429a      	cmp	r2, r3
   1d3b6:	d808      	bhi.n	1d3ca <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1d3b8:	4b16      	ldr	r3, [pc, #88]	; (1d414 <prvProcessTimerOrBlockTask+0x8c>)
   1d3ba:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1d3bc:	68fa      	ldr	r2, [r7, #12]
   1d3be:	687b      	ldr	r3, [r7, #4]
   1d3c0:	0011      	movs	r1, r2
   1d3c2:	0018      	movs	r0, r3
   1d3c4:	4b14      	ldr	r3, [pc, #80]	; (1d418 <prvProcessTimerOrBlockTask+0x90>)
   1d3c6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1d3c8:	e01b      	b.n	1d402 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1d3ca:	683b      	ldr	r3, [r7, #0]
   1d3cc:	2b00      	cmp	r3, #0
   1d3ce:	d006      	beq.n	1d3de <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1d3d0:	4b12      	ldr	r3, [pc, #72]	; (1d41c <prvProcessTimerOrBlockTask+0x94>)
   1d3d2:	681b      	ldr	r3, [r3, #0]
   1d3d4:	681b      	ldr	r3, [r3, #0]
   1d3d6:	425a      	negs	r2, r3
   1d3d8:	4153      	adcs	r3, r2
   1d3da:	b2db      	uxtb	r3, r3
   1d3dc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1d3de:	4b10      	ldr	r3, [pc, #64]	; (1d420 <prvProcessTimerOrBlockTask+0x98>)
   1d3e0:	6818      	ldr	r0, [r3, #0]
   1d3e2:	687a      	ldr	r2, [r7, #4]
   1d3e4:	68fb      	ldr	r3, [r7, #12]
   1d3e6:	1ad3      	subs	r3, r2, r3
   1d3e8:	683a      	ldr	r2, [r7, #0]
   1d3ea:	0019      	movs	r1, r3
   1d3ec:	4b0d      	ldr	r3, [pc, #52]	; (1d424 <prvProcessTimerOrBlockTask+0x9c>)
   1d3ee:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1d3f0:	4b08      	ldr	r3, [pc, #32]	; (1d414 <prvProcessTimerOrBlockTask+0x8c>)
   1d3f2:	4798      	blx	r3
   1d3f4:	1e03      	subs	r3, r0, #0
   1d3f6:	d104      	bne.n	1d402 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1d3f8:	4b0b      	ldr	r3, [pc, #44]	; (1d428 <prvProcessTimerOrBlockTask+0xa0>)
   1d3fa:	4798      	blx	r3
}
   1d3fc:	e001      	b.n	1d402 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1d3fe:	4b05      	ldr	r3, [pc, #20]	; (1d414 <prvProcessTimerOrBlockTask+0x8c>)
   1d400:	4798      	blx	r3
}
   1d402:	46c0      	nop			; (mov r8, r8)
   1d404:	46bd      	mov	sp, r7
   1d406:	b004      	add	sp, #16
   1d408:	bd80      	pop	{r7, pc}
   1d40a:	46c0      	nop			; (mov r8, r8)
   1d40c:	0001c1c1 	.word	0x0001c1c1
   1d410:	0001d46d 	.word	0x0001d46d
   1d414:	0001c1d9 	.word	0x0001c1d9
   1d418:	0001d2d1 	.word	0x0001d2d1
   1d41c:	20003df8 	.word	0x20003df8
   1d420:	20003dfc 	.word	0x20003dfc
   1d424:	0001b961 	.word	0x0001b961
   1d428:	00019ef1 	.word	0x00019ef1

0001d42c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1d42c:	b580      	push	{r7, lr}
   1d42e:	b084      	sub	sp, #16
   1d430:	af00      	add	r7, sp, #0
   1d432:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1d434:	4b0c      	ldr	r3, [pc, #48]	; (1d468 <prvGetNextExpireTime+0x3c>)
   1d436:	681b      	ldr	r3, [r3, #0]
   1d438:	681b      	ldr	r3, [r3, #0]
   1d43a:	425a      	negs	r2, r3
   1d43c:	4153      	adcs	r3, r2
   1d43e:	b2db      	uxtb	r3, r3
   1d440:	001a      	movs	r2, r3
   1d442:	687b      	ldr	r3, [r7, #4]
   1d444:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1d446:	687b      	ldr	r3, [r7, #4]
   1d448:	681b      	ldr	r3, [r3, #0]
   1d44a:	2b00      	cmp	r3, #0
   1d44c:	d105      	bne.n	1d45a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d44e:	4b06      	ldr	r3, [pc, #24]	; (1d468 <prvGetNextExpireTime+0x3c>)
   1d450:	681b      	ldr	r3, [r3, #0]
   1d452:	68db      	ldr	r3, [r3, #12]
   1d454:	681b      	ldr	r3, [r3, #0]
   1d456:	60fb      	str	r3, [r7, #12]
   1d458:	e001      	b.n	1d45e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1d45a:	2300      	movs	r3, #0
   1d45c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1d45e:	68fb      	ldr	r3, [r7, #12]
}
   1d460:	0018      	movs	r0, r3
   1d462:	46bd      	mov	sp, r7
   1d464:	b004      	add	sp, #16
   1d466:	bd80      	pop	{r7, pc}
   1d468:	20003df4 	.word	0x20003df4

0001d46c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1d46c:	b580      	push	{r7, lr}
   1d46e:	b084      	sub	sp, #16
   1d470:	af00      	add	r7, sp, #0
   1d472:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1d474:	4b0c      	ldr	r3, [pc, #48]	; (1d4a8 <prvSampleTimeNow+0x3c>)
   1d476:	4798      	blx	r3
   1d478:	0003      	movs	r3, r0
   1d47a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1d47c:	4b0b      	ldr	r3, [pc, #44]	; (1d4ac <prvSampleTimeNow+0x40>)
   1d47e:	681b      	ldr	r3, [r3, #0]
   1d480:	68fa      	ldr	r2, [r7, #12]
   1d482:	429a      	cmp	r2, r3
   1d484:	d205      	bcs.n	1d492 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1d486:	4b0a      	ldr	r3, [pc, #40]	; (1d4b0 <prvSampleTimeNow+0x44>)
   1d488:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1d48a:	687b      	ldr	r3, [r7, #4]
   1d48c:	2201      	movs	r2, #1
   1d48e:	601a      	str	r2, [r3, #0]
   1d490:	e002      	b.n	1d498 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1d492:	687b      	ldr	r3, [r7, #4]
   1d494:	2200      	movs	r2, #0
   1d496:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1d498:	4b04      	ldr	r3, [pc, #16]	; (1d4ac <prvSampleTimeNow+0x40>)
   1d49a:	68fa      	ldr	r2, [r7, #12]
   1d49c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1d49e:	68fb      	ldr	r3, [r7, #12]
}
   1d4a0:	0018      	movs	r0, r3
   1d4a2:	46bd      	mov	sp, r7
   1d4a4:	b004      	add	sp, #16
   1d4a6:	bd80      	pop	{r7, pc}
   1d4a8:	0001c349 	.word	0x0001c349
   1d4ac:	20003e04 	.word	0x20003e04
   1d4b0:	0001d655 	.word	0x0001d655

0001d4b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1d4b4:	b580      	push	{r7, lr}
   1d4b6:	b086      	sub	sp, #24
   1d4b8:	af00      	add	r7, sp, #0
   1d4ba:	60f8      	str	r0, [r7, #12]
   1d4bc:	60b9      	str	r1, [r7, #8]
   1d4be:	607a      	str	r2, [r7, #4]
   1d4c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1d4c2:	2300      	movs	r3, #0
   1d4c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1d4c6:	68fb      	ldr	r3, [r7, #12]
   1d4c8:	68ba      	ldr	r2, [r7, #8]
   1d4ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d4cc:	68fb      	ldr	r3, [r7, #12]
   1d4ce:	68fa      	ldr	r2, [r7, #12]
   1d4d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1d4d2:	68ba      	ldr	r2, [r7, #8]
   1d4d4:	687b      	ldr	r3, [r7, #4]
   1d4d6:	429a      	cmp	r2, r3
   1d4d8:	d812      	bhi.n	1d500 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d4da:	687a      	ldr	r2, [r7, #4]
   1d4dc:	683b      	ldr	r3, [r7, #0]
   1d4de:	1ad2      	subs	r2, r2, r3
   1d4e0:	68fb      	ldr	r3, [r7, #12]
   1d4e2:	699b      	ldr	r3, [r3, #24]
   1d4e4:	429a      	cmp	r2, r3
   1d4e6:	d302      	bcc.n	1d4ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1d4e8:	2301      	movs	r3, #1
   1d4ea:	617b      	str	r3, [r7, #20]
   1d4ec:	e01b      	b.n	1d526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1d4ee:	4b10      	ldr	r3, [pc, #64]	; (1d530 <prvInsertTimerInActiveList+0x7c>)
   1d4f0:	681a      	ldr	r2, [r3, #0]
   1d4f2:	68fb      	ldr	r3, [r7, #12]
   1d4f4:	3304      	adds	r3, #4
   1d4f6:	0019      	movs	r1, r3
   1d4f8:	0010      	movs	r0, r2
   1d4fa:	4b0e      	ldr	r3, [pc, #56]	; (1d534 <prvInsertTimerInActiveList+0x80>)
   1d4fc:	4798      	blx	r3
   1d4fe:	e012      	b.n	1d526 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1d500:	687a      	ldr	r2, [r7, #4]
   1d502:	683b      	ldr	r3, [r7, #0]
   1d504:	429a      	cmp	r2, r3
   1d506:	d206      	bcs.n	1d516 <prvInsertTimerInActiveList+0x62>
   1d508:	68ba      	ldr	r2, [r7, #8]
   1d50a:	683b      	ldr	r3, [r7, #0]
   1d50c:	429a      	cmp	r2, r3
   1d50e:	d302      	bcc.n	1d516 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1d510:	2301      	movs	r3, #1
   1d512:	617b      	str	r3, [r7, #20]
   1d514:	e007      	b.n	1d526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d516:	4b08      	ldr	r3, [pc, #32]	; (1d538 <prvInsertTimerInActiveList+0x84>)
   1d518:	681a      	ldr	r2, [r3, #0]
   1d51a:	68fb      	ldr	r3, [r7, #12]
   1d51c:	3304      	adds	r3, #4
   1d51e:	0019      	movs	r1, r3
   1d520:	0010      	movs	r0, r2
   1d522:	4b04      	ldr	r3, [pc, #16]	; (1d534 <prvInsertTimerInActiveList+0x80>)
   1d524:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1d526:	697b      	ldr	r3, [r7, #20]
}
   1d528:	0018      	movs	r0, r3
   1d52a:	46bd      	mov	sp, r7
   1d52c:	b006      	add	sp, #24
   1d52e:	bd80      	pop	{r7, pc}
   1d530:	20003df8 	.word	0x20003df8
   1d534:	00019d0f 	.word	0x00019d0f
   1d538:	20003df4 	.word	0x20003df4

0001d53c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1d53c:	b590      	push	{r4, r7, lr}
   1d53e:	b08b      	sub	sp, #44	; 0x2c
   1d540:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d542:	e068      	b.n	1d616 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1d544:	2308      	movs	r3, #8
   1d546:	18fb      	adds	r3, r7, r3
   1d548:	681b      	ldr	r3, [r3, #0]
   1d54a:	2b00      	cmp	r3, #0
   1d54c:	db63      	blt.n	1d616 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1d54e:	2308      	movs	r3, #8
   1d550:	18fb      	adds	r3, r7, r3
   1d552:	689b      	ldr	r3, [r3, #8]
   1d554:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1d556:	69fb      	ldr	r3, [r7, #28]
   1d558:	695b      	ldr	r3, [r3, #20]
   1d55a:	2b00      	cmp	r3, #0
   1d55c:	d004      	beq.n	1d568 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d55e:	69fb      	ldr	r3, [r7, #28]
   1d560:	3304      	adds	r3, #4
   1d562:	0018      	movs	r0, r3
   1d564:	4b33      	ldr	r3, [pc, #204]	; (1d634 <prvProcessReceivedCommands+0xf8>)
   1d566:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1d568:	1d3b      	adds	r3, r7, #4
   1d56a:	0018      	movs	r0, r3
   1d56c:	4b32      	ldr	r3, [pc, #200]	; (1d638 <prvProcessReceivedCommands+0xfc>)
   1d56e:	4798      	blx	r3
   1d570:	0003      	movs	r3, r0
   1d572:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1d574:	2308      	movs	r3, #8
   1d576:	18fb      	adds	r3, r7, r3
   1d578:	681b      	ldr	r3, [r3, #0]
   1d57a:	2b09      	cmp	r3, #9
   1d57c:	d84a      	bhi.n	1d614 <prvProcessReceivedCommands+0xd8>
   1d57e:	009a      	lsls	r2, r3, #2
   1d580:	4b2e      	ldr	r3, [pc, #184]	; (1d63c <prvProcessReceivedCommands+0x100>)
   1d582:	18d3      	adds	r3, r2, r3
   1d584:	681b      	ldr	r3, [r3, #0]
   1d586:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1d588:	2308      	movs	r3, #8
   1d58a:	18fb      	adds	r3, r7, r3
   1d58c:	685a      	ldr	r2, [r3, #4]
   1d58e:	69fb      	ldr	r3, [r7, #28]
   1d590:	699b      	ldr	r3, [r3, #24]
   1d592:	18d1      	adds	r1, r2, r3
   1d594:	2308      	movs	r3, #8
   1d596:	18fb      	adds	r3, r7, r3
   1d598:	685b      	ldr	r3, [r3, #4]
   1d59a:	69ba      	ldr	r2, [r7, #24]
   1d59c:	69f8      	ldr	r0, [r7, #28]
   1d59e:	4c28      	ldr	r4, [pc, #160]	; (1d640 <prvProcessReceivedCommands+0x104>)
   1d5a0:	47a0      	blx	r4
   1d5a2:	1e03      	subs	r3, r0, #0
   1d5a4:	d037      	beq.n	1d616 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d5a6:	69fb      	ldr	r3, [r7, #28]
   1d5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d5aa:	69fa      	ldr	r2, [r7, #28]
   1d5ac:	0010      	movs	r0, r2
   1d5ae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d5b0:	69fb      	ldr	r3, [r7, #28]
   1d5b2:	69db      	ldr	r3, [r3, #28]
   1d5b4:	2b01      	cmp	r3, #1
   1d5b6:	d12e      	bne.n	1d616 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1d5b8:	2308      	movs	r3, #8
   1d5ba:	18fb      	adds	r3, r7, r3
   1d5bc:	685a      	ldr	r2, [r3, #4]
   1d5be:	69fb      	ldr	r3, [r7, #28]
   1d5c0:	699b      	ldr	r3, [r3, #24]
   1d5c2:	18d2      	adds	r2, r2, r3
   1d5c4:	69f8      	ldr	r0, [r7, #28]
   1d5c6:	2300      	movs	r3, #0
   1d5c8:	9300      	str	r3, [sp, #0]
   1d5ca:	2300      	movs	r3, #0
   1d5cc:	2100      	movs	r1, #0
   1d5ce:	4c1d      	ldr	r4, [pc, #116]	; (1d644 <prvProcessReceivedCommands+0x108>)
   1d5d0:	47a0      	blx	r4
   1d5d2:	0003      	movs	r3, r0
   1d5d4:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1d5d6:	697b      	ldr	r3, [r7, #20]
   1d5d8:	2b00      	cmp	r3, #0
   1d5da:	d11c      	bne.n	1d616 <prvProcessReceivedCommands+0xda>
   1d5dc:	b672      	cpsid	i
   1d5de:	e7fe      	b.n	1d5de <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1d5e0:	2308      	movs	r3, #8
   1d5e2:	18fb      	adds	r3, r7, r3
   1d5e4:	685a      	ldr	r2, [r3, #4]
   1d5e6:	69fb      	ldr	r3, [r7, #28]
   1d5e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1d5ea:	69fb      	ldr	r3, [r7, #28]
   1d5ec:	699b      	ldr	r3, [r3, #24]
   1d5ee:	2b00      	cmp	r3, #0
   1d5f0:	d101      	bne.n	1d5f6 <prvProcessReceivedCommands+0xba>
   1d5f2:	b672      	cpsid	i
   1d5f4:	e7fe      	b.n	1d5f4 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1d5f6:	69fb      	ldr	r3, [r7, #28]
   1d5f8:	699a      	ldr	r2, [r3, #24]
   1d5fa:	69bb      	ldr	r3, [r7, #24]
   1d5fc:	18d1      	adds	r1, r2, r3
   1d5fe:	69bb      	ldr	r3, [r7, #24]
   1d600:	69ba      	ldr	r2, [r7, #24]
   1d602:	69f8      	ldr	r0, [r7, #28]
   1d604:	4c0e      	ldr	r4, [pc, #56]	; (1d640 <prvProcessReceivedCommands+0x104>)
   1d606:	47a0      	blx	r4
					break;
   1d608:	e005      	b.n	1d616 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1d60a:	69fb      	ldr	r3, [r7, #28]
   1d60c:	0018      	movs	r0, r3
   1d60e:	4b0e      	ldr	r3, [pc, #56]	; (1d648 <prvProcessReceivedCommands+0x10c>)
   1d610:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1d612:	e000      	b.n	1d616 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1d614:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1d616:	4b0d      	ldr	r3, [pc, #52]	; (1d64c <prvProcessReceivedCommands+0x110>)
   1d618:	681b      	ldr	r3, [r3, #0]
   1d61a:	2208      	movs	r2, #8
   1d61c:	18b9      	adds	r1, r7, r2
   1d61e:	2200      	movs	r2, #0
   1d620:	0018      	movs	r0, r3
   1d622:	4b0b      	ldr	r3, [pc, #44]	; (1d650 <prvProcessReceivedCommands+0x114>)
   1d624:	4798      	blx	r3
   1d626:	1e03      	subs	r3, r0, #0
   1d628:	d18c      	bne.n	1d544 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1d62a:	46c0      	nop			; (mov r8, r8)
   1d62c:	46bd      	mov	sp, r7
   1d62e:	b009      	add	sp, #36	; 0x24
   1d630:	bd90      	pop	{r4, r7, pc}
   1d632:	46c0      	nop			; (mov r8, r8)
   1d634:	00019d7b 	.word	0x00019d7b
   1d638:	0001d46d 	.word	0x0001d46d
   1d63c:	00037a9c 	.word	0x00037a9c
   1d640:	0001d4b5 	.word	0x0001d4b5
   1d644:	0001d229 	.word	0x0001d229
   1d648:	0001a105 	.word	0x0001a105
   1d64c:	20003dfc 	.word	0x20003dfc
   1d650:	0001ad55 	.word	0x0001ad55

0001d654 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1d654:	b590      	push	{r4, r7, lr}
   1d656:	b089      	sub	sp, #36	; 0x24
   1d658:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d65a:	e03e      	b.n	1d6da <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d65c:	4b28      	ldr	r3, [pc, #160]	; (1d700 <prvSwitchTimerLists+0xac>)
   1d65e:	681b      	ldr	r3, [r3, #0]
   1d660:	68db      	ldr	r3, [r3, #12]
   1d662:	681b      	ldr	r3, [r3, #0]
   1d664:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1d666:	4b26      	ldr	r3, [pc, #152]	; (1d700 <prvSwitchTimerLists+0xac>)
   1d668:	681b      	ldr	r3, [r3, #0]
   1d66a:	68db      	ldr	r3, [r3, #12]
   1d66c:	68db      	ldr	r3, [r3, #12]
   1d66e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1d670:	693b      	ldr	r3, [r7, #16]
   1d672:	3304      	adds	r3, #4
   1d674:	0018      	movs	r0, r3
   1d676:	4b23      	ldr	r3, [pc, #140]	; (1d704 <prvSwitchTimerLists+0xb0>)
   1d678:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1d67a:	693b      	ldr	r3, [r7, #16]
   1d67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d67e:	693a      	ldr	r2, [r7, #16]
   1d680:	0010      	movs	r0, r2
   1d682:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1d684:	693b      	ldr	r3, [r7, #16]
   1d686:	69db      	ldr	r3, [r3, #28]
   1d688:	2b01      	cmp	r3, #1
   1d68a:	d126      	bne.n	1d6da <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1d68c:	693b      	ldr	r3, [r7, #16]
   1d68e:	699a      	ldr	r2, [r3, #24]
   1d690:	697b      	ldr	r3, [r7, #20]
   1d692:	18d3      	adds	r3, r2, r3
   1d694:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1d696:	68fa      	ldr	r2, [r7, #12]
   1d698:	697b      	ldr	r3, [r7, #20]
   1d69a:	429a      	cmp	r2, r3
   1d69c:	d90e      	bls.n	1d6bc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1d69e:	693b      	ldr	r3, [r7, #16]
   1d6a0:	68fa      	ldr	r2, [r7, #12]
   1d6a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1d6a4:	693b      	ldr	r3, [r7, #16]
   1d6a6:	693a      	ldr	r2, [r7, #16]
   1d6a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1d6aa:	4b15      	ldr	r3, [pc, #84]	; (1d700 <prvSwitchTimerLists+0xac>)
   1d6ac:	681a      	ldr	r2, [r3, #0]
   1d6ae:	693b      	ldr	r3, [r7, #16]
   1d6b0:	3304      	adds	r3, #4
   1d6b2:	0019      	movs	r1, r3
   1d6b4:	0010      	movs	r0, r2
   1d6b6:	4b14      	ldr	r3, [pc, #80]	; (1d708 <prvSwitchTimerLists+0xb4>)
   1d6b8:	4798      	blx	r3
   1d6ba:	e00e      	b.n	1d6da <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1d6bc:	697a      	ldr	r2, [r7, #20]
   1d6be:	6938      	ldr	r0, [r7, #16]
   1d6c0:	2300      	movs	r3, #0
   1d6c2:	9300      	str	r3, [sp, #0]
   1d6c4:	2300      	movs	r3, #0
   1d6c6:	2100      	movs	r1, #0
   1d6c8:	4c10      	ldr	r4, [pc, #64]	; (1d70c <prvSwitchTimerLists+0xb8>)
   1d6ca:	47a0      	blx	r4
   1d6cc:	0003      	movs	r3, r0
   1d6ce:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1d6d0:	68bb      	ldr	r3, [r7, #8]
   1d6d2:	2b00      	cmp	r3, #0
   1d6d4:	d101      	bne.n	1d6da <prvSwitchTimerLists+0x86>
   1d6d6:	b672      	cpsid	i
   1d6d8:	e7fe      	b.n	1d6d8 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1d6da:	4b09      	ldr	r3, [pc, #36]	; (1d700 <prvSwitchTimerLists+0xac>)
   1d6dc:	681b      	ldr	r3, [r3, #0]
   1d6de:	681b      	ldr	r3, [r3, #0]
   1d6e0:	2b00      	cmp	r3, #0
   1d6e2:	d1bb      	bne.n	1d65c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1d6e4:	4b06      	ldr	r3, [pc, #24]	; (1d700 <prvSwitchTimerLists+0xac>)
   1d6e6:	681b      	ldr	r3, [r3, #0]
   1d6e8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1d6ea:	4b09      	ldr	r3, [pc, #36]	; (1d710 <prvSwitchTimerLists+0xbc>)
   1d6ec:	681a      	ldr	r2, [r3, #0]
   1d6ee:	4b04      	ldr	r3, [pc, #16]	; (1d700 <prvSwitchTimerLists+0xac>)
   1d6f0:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1d6f2:	4b07      	ldr	r3, [pc, #28]	; (1d710 <prvSwitchTimerLists+0xbc>)
   1d6f4:	687a      	ldr	r2, [r7, #4]
   1d6f6:	601a      	str	r2, [r3, #0]
}
   1d6f8:	46c0      	nop			; (mov r8, r8)
   1d6fa:	46bd      	mov	sp, r7
   1d6fc:	b007      	add	sp, #28
   1d6fe:	bd90      	pop	{r4, r7, pc}
   1d700:	20003df4 	.word	0x20003df4
   1d704:	00019d7b 	.word	0x00019d7b
   1d708:	00019d0f 	.word	0x00019d0f
   1d70c:	0001d229 	.word	0x0001d229
   1d710:	20003df8 	.word	0x20003df8

0001d714 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1d714:	b580      	push	{r7, lr}
   1d716:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1d718:	4b10      	ldr	r3, [pc, #64]	; (1d75c <prvCheckForValidListAndQueue+0x48>)
   1d71a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1d71c:	4b10      	ldr	r3, [pc, #64]	; (1d760 <prvCheckForValidListAndQueue+0x4c>)
   1d71e:	681b      	ldr	r3, [r3, #0]
   1d720:	2b00      	cmp	r3, #0
   1d722:	d115      	bne.n	1d750 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1d724:	4b0f      	ldr	r3, [pc, #60]	; (1d764 <prvCheckForValidListAndQueue+0x50>)
   1d726:	0018      	movs	r0, r3
   1d728:	4b0f      	ldr	r3, [pc, #60]	; (1d768 <prvCheckForValidListAndQueue+0x54>)
   1d72a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1d72c:	4b0f      	ldr	r3, [pc, #60]	; (1d76c <prvCheckForValidListAndQueue+0x58>)
   1d72e:	0018      	movs	r0, r3
   1d730:	4b0d      	ldr	r3, [pc, #52]	; (1d768 <prvCheckForValidListAndQueue+0x54>)
   1d732:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1d734:	4b0e      	ldr	r3, [pc, #56]	; (1d770 <prvCheckForValidListAndQueue+0x5c>)
   1d736:	4a0b      	ldr	r2, [pc, #44]	; (1d764 <prvCheckForValidListAndQueue+0x50>)
   1d738:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1d73a:	4b0e      	ldr	r3, [pc, #56]	; (1d774 <prvCheckForValidListAndQueue+0x60>)
   1d73c:	4a0b      	ldr	r2, [pc, #44]	; (1d76c <prvCheckForValidListAndQueue+0x58>)
   1d73e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1d740:	2200      	movs	r2, #0
   1d742:	210c      	movs	r1, #12
   1d744:	2005      	movs	r0, #5
   1d746:	4b0c      	ldr	r3, [pc, #48]	; (1d778 <prvCheckForValidListAndQueue+0x64>)
   1d748:	4798      	blx	r3
   1d74a:	0002      	movs	r2, r0
   1d74c:	4b04      	ldr	r3, [pc, #16]	; (1d760 <prvCheckForValidListAndQueue+0x4c>)
   1d74e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d750:	4b0a      	ldr	r3, [pc, #40]	; (1d77c <prvCheckForValidListAndQueue+0x68>)
   1d752:	4798      	blx	r3
}
   1d754:	46c0      	nop			; (mov r8, r8)
   1d756:	46bd      	mov	sp, r7
   1d758:	bd80      	pop	{r7, pc}
   1d75a:	46c0      	nop			; (mov r8, r8)
   1d75c:	00019f09 	.word	0x00019f09
   1d760:	20003dfc 	.word	0x20003dfc
   1d764:	20003dcc 	.word	0x20003dcc
   1d768:	00019c79 	.word	0x00019c79
   1d76c:	20003de0 	.word	0x20003de0
   1d770:	20003df4 	.word	0x20003df4
   1d774:	20003df8 	.word	0x20003df8
   1d778:	0001a1f5 	.word	0x0001a1f5
   1d77c:	00019f2d 	.word	0x00019f2d

0001d780 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1d780:	b580      	push	{r7, lr}
   1d782:	b082      	sub	sp, #8
   1d784:	af00      	add	r7, sp, #0
   1d786:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1d788:	687b      	ldr	r3, [r7, #4]
   1d78a:	7c1b      	ldrb	r3, [r3, #16]
   1d78c:	2b00      	cmp	r3, #0
   1d78e:	d00b      	beq.n	1d7a8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d790:	687b      	ldr	r3, [r7, #4]
   1d792:	689b      	ldr	r3, [r3, #8]
   1d794:	1c5a      	adds	r2, r3, #1
   1d796:	687b      	ldr	r3, [r7, #4]
   1d798:	68d9      	ldr	r1, [r3, #12]
   1d79a:	4b10      	ldr	r3, [pc, #64]	; (1d7dc <advance_pointer+0x5c>)
   1d79c:	0010      	movs	r0, r2
   1d79e:	4798      	blx	r3
   1d7a0:	000b      	movs	r3, r1
   1d7a2:	001a      	movs	r2, r3
   1d7a4:	687b      	ldr	r3, [r7, #4]
   1d7a6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1d7a8:	687b      	ldr	r3, [r7, #4]
   1d7aa:	685b      	ldr	r3, [r3, #4]
   1d7ac:	1c5a      	adds	r2, r3, #1
   1d7ae:	687b      	ldr	r3, [r7, #4]
   1d7b0:	68d9      	ldr	r1, [r3, #12]
   1d7b2:	4b0a      	ldr	r3, [pc, #40]	; (1d7dc <advance_pointer+0x5c>)
   1d7b4:	0010      	movs	r0, r2
   1d7b6:	4798      	blx	r3
   1d7b8:	000b      	movs	r3, r1
   1d7ba:	001a      	movs	r2, r3
   1d7bc:	687b      	ldr	r3, [r7, #4]
   1d7be:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1d7c0:	687b      	ldr	r3, [r7, #4]
   1d7c2:	685a      	ldr	r2, [r3, #4]
   1d7c4:	687b      	ldr	r3, [r7, #4]
   1d7c6:	689b      	ldr	r3, [r3, #8]
   1d7c8:	1ad3      	subs	r3, r2, r3
   1d7ca:	425a      	negs	r2, r3
   1d7cc:	4153      	adcs	r3, r2
   1d7ce:	b2da      	uxtb	r2, r3
   1d7d0:	687b      	ldr	r3, [r7, #4]
   1d7d2:	741a      	strb	r2, [r3, #16]
 }
   1d7d4:	46c0      	nop			; (mov r8, r8)
   1d7d6:	46bd      	mov	sp, r7
   1d7d8:	b002      	add	sp, #8
   1d7da:	bd80      	pop	{r7, pc}
   1d7dc:	000324bd 	.word	0x000324bd

0001d7e0 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1d7e0:	b580      	push	{r7, lr}
   1d7e2:	b082      	sub	sp, #8
   1d7e4:	af00      	add	r7, sp, #0
   1d7e6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1d7e8:	687b      	ldr	r3, [r7, #4]
   1d7ea:	2200      	movs	r2, #0
   1d7ec:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1d7ee:	687b      	ldr	r3, [r7, #4]
   1d7f0:	689b      	ldr	r3, [r3, #8]
   1d7f2:	1c5a      	adds	r2, r3, #1
   1d7f4:	687b      	ldr	r3, [r7, #4]
   1d7f6:	68d9      	ldr	r1, [r3, #12]
   1d7f8:	4b05      	ldr	r3, [pc, #20]	; (1d810 <retreat_pointer+0x30>)
   1d7fa:	0010      	movs	r0, r2
   1d7fc:	4798      	blx	r3
   1d7fe:	000b      	movs	r3, r1
   1d800:	001a      	movs	r2, r3
   1d802:	687b      	ldr	r3, [r7, #4]
   1d804:	609a      	str	r2, [r3, #8]
 }
   1d806:	46c0      	nop			; (mov r8, r8)
   1d808:	46bd      	mov	sp, r7
   1d80a:	b002      	add	sp, #8
   1d80c:	bd80      	pop	{r7, pc}
   1d80e:	46c0      	nop			; (mov r8, r8)
   1d810:	000324bd 	.word	0x000324bd

0001d814 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1d814:	b580      	push	{r7, lr}
   1d816:	b084      	sub	sp, #16
   1d818:	af00      	add	r7, sp, #0
   1d81a:	6078      	str	r0, [r7, #4]
   1d81c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1d81e:	2014      	movs	r0, #20
   1d820:	4b09      	ldr	r3, [pc, #36]	; (1d848 <circular_buf_init+0x34>)
   1d822:	4798      	blx	r3
   1d824:	0003      	movs	r3, r0
   1d826:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1d828:	68fb      	ldr	r3, [r7, #12]
   1d82a:	687a      	ldr	r2, [r7, #4]
   1d82c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1d82e:	68fb      	ldr	r3, [r7, #12]
   1d830:	683a      	ldr	r2, [r7, #0]
   1d832:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1d834:	68fb      	ldr	r3, [r7, #12]
   1d836:	0018      	movs	r0, r3
   1d838:	4b04      	ldr	r3, [pc, #16]	; (1d84c <circular_buf_init+0x38>)
   1d83a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1d83c:	68fb      	ldr	r3, [r7, #12]
 }
   1d83e:	0018      	movs	r0, r3
   1d840:	46bd      	mov	sp, r7
   1d842:	b004      	add	sp, #16
   1d844:	bd80      	pop	{r7, pc}
   1d846:	46c0      	nop			; (mov r8, r8)
   1d848:	0003432d 	.word	0x0003432d
   1d84c:	0001d851 	.word	0x0001d851

0001d850 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1d850:	b580      	push	{r7, lr}
   1d852:	b082      	sub	sp, #8
   1d854:	af00      	add	r7, sp, #0
   1d856:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1d858:	687b      	ldr	r3, [r7, #4]
   1d85a:	2200      	movs	r2, #0
   1d85c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1d85e:	687b      	ldr	r3, [r7, #4]
   1d860:	2200      	movs	r2, #0
   1d862:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1d864:	687b      	ldr	r3, [r7, #4]
   1d866:	2200      	movs	r2, #0
   1d868:	741a      	strb	r2, [r3, #16]
 }
   1d86a:	46c0      	nop			; (mov r8, r8)
   1d86c:	46bd      	mov	sp, r7
   1d86e:	b002      	add	sp, #8
   1d870:	bd80      	pop	{r7, pc}
	...

0001d874 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1d874:	b580      	push	{r7, lr}
   1d876:	b082      	sub	sp, #8
   1d878:	af00      	add	r7, sp, #0
   1d87a:	6078      	str	r0, [r7, #4]
   1d87c:	000a      	movs	r2, r1
   1d87e:	1cfb      	adds	r3, r7, #3
   1d880:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1d882:	687b      	ldr	r3, [r7, #4]
   1d884:	681a      	ldr	r2, [r3, #0]
   1d886:	687b      	ldr	r3, [r7, #4]
   1d888:	685b      	ldr	r3, [r3, #4]
   1d88a:	18d3      	adds	r3, r2, r3
   1d88c:	1cfa      	adds	r2, r7, #3
   1d88e:	7812      	ldrb	r2, [r2, #0]
   1d890:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1d892:	687b      	ldr	r3, [r7, #4]
   1d894:	0018      	movs	r0, r3
   1d896:	4b03      	ldr	r3, [pc, #12]	; (1d8a4 <circular_buf_put+0x30>)
   1d898:	4798      	blx	r3
 }
   1d89a:	46c0      	nop			; (mov r8, r8)
   1d89c:	46bd      	mov	sp, r7
   1d89e:	b002      	add	sp, #8
   1d8a0:	bd80      	pop	{r7, pc}
   1d8a2:	46c0      	nop			; (mov r8, r8)
   1d8a4:	0001d781 	.word	0x0001d781

0001d8a8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1d8a8:	b580      	push	{r7, lr}
   1d8aa:	b084      	sub	sp, #16
   1d8ac:	af00      	add	r7, sp, #0
   1d8ae:	6078      	str	r0, [r7, #4]
   1d8b0:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1d8b2:	2301      	movs	r3, #1
   1d8b4:	425b      	negs	r3, r3
   1d8b6:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1d8b8:	687b      	ldr	r3, [r7, #4]
   1d8ba:	0018      	movs	r0, r3
   1d8bc:	4b0d      	ldr	r3, [pc, #52]	; (1d8f4 <circular_buf_get+0x4c>)
   1d8be:	4798      	blx	r3
   1d8c0:	0003      	movs	r3, r0
   1d8c2:	001a      	movs	r2, r3
   1d8c4:	2301      	movs	r3, #1
   1d8c6:	4053      	eors	r3, r2
   1d8c8:	b2db      	uxtb	r3, r3
   1d8ca:	2b00      	cmp	r3, #0
   1d8cc:	d00d      	beq.n	1d8ea <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1d8ce:	687b      	ldr	r3, [r7, #4]
   1d8d0:	681a      	ldr	r2, [r3, #0]
   1d8d2:	687b      	ldr	r3, [r7, #4]
   1d8d4:	689b      	ldr	r3, [r3, #8]
   1d8d6:	18d3      	adds	r3, r2, r3
   1d8d8:	781a      	ldrb	r2, [r3, #0]
   1d8da:	683b      	ldr	r3, [r7, #0]
   1d8dc:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1d8de:	687b      	ldr	r3, [r7, #4]
   1d8e0:	0018      	movs	r0, r3
   1d8e2:	4b05      	ldr	r3, [pc, #20]	; (1d8f8 <circular_buf_get+0x50>)
   1d8e4:	4798      	blx	r3

		 r = 0;
   1d8e6:	2300      	movs	r3, #0
   1d8e8:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1d8ea:	68fb      	ldr	r3, [r7, #12]
 }
   1d8ec:	0018      	movs	r0, r3
   1d8ee:	46bd      	mov	sp, r7
   1d8f0:	b004      	add	sp, #16
   1d8f2:	bd80      	pop	{r7, pc}
   1d8f4:	0001d8fd 	.word	0x0001d8fd
   1d8f8:	0001d7e1 	.word	0x0001d7e1

0001d8fc <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1d8fc:	b580      	push	{r7, lr}
   1d8fe:	b082      	sub	sp, #8
   1d900:	af00      	add	r7, sp, #0
   1d902:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1d904:	687b      	ldr	r3, [r7, #4]
   1d906:	7c1b      	ldrb	r3, [r3, #16]
   1d908:	2201      	movs	r2, #1
   1d90a:	4053      	eors	r3, r2
   1d90c:	b2db      	uxtb	r3, r3
   1d90e:	2b00      	cmp	r3, #0
   1d910:	d007      	beq.n	1d922 <circular_buf_empty+0x26>
   1d912:	687b      	ldr	r3, [r7, #4]
   1d914:	685a      	ldr	r2, [r3, #4]
   1d916:	687b      	ldr	r3, [r7, #4]
   1d918:	689b      	ldr	r3, [r3, #8]
   1d91a:	429a      	cmp	r2, r3
   1d91c:	d101      	bne.n	1d922 <circular_buf_empty+0x26>
   1d91e:	2301      	movs	r3, #1
   1d920:	e000      	b.n	1d924 <circular_buf_empty+0x28>
   1d922:	2300      	movs	r3, #0
   1d924:	1c1a      	adds	r2, r3, #0
   1d926:	2301      	movs	r3, #1
   1d928:	4013      	ands	r3, r2
   1d92a:	b2db      	uxtb	r3, r3
 }
   1d92c:	0018      	movs	r0, r3
   1d92e:	46bd      	mov	sp, r7
   1d930:	b002      	add	sp, #8
   1d932:	bd80      	pop	{r7, pc}

0001d934 <system_interrupt_enable>:
{
   1d934:	b580      	push	{r7, lr}
   1d936:	b082      	sub	sp, #8
   1d938:	af00      	add	r7, sp, #0
   1d93a:	0002      	movs	r2, r0
   1d93c:	1dfb      	adds	r3, r7, #7
   1d93e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1d940:	4b06      	ldr	r3, [pc, #24]	; (1d95c <system_interrupt_enable+0x28>)
   1d942:	1dfa      	adds	r2, r7, #7
   1d944:	7812      	ldrb	r2, [r2, #0]
   1d946:	0011      	movs	r1, r2
   1d948:	221f      	movs	r2, #31
   1d94a:	400a      	ands	r2, r1
   1d94c:	2101      	movs	r1, #1
   1d94e:	4091      	lsls	r1, r2
   1d950:	000a      	movs	r2, r1
   1d952:	601a      	str	r2, [r3, #0]
}
   1d954:	46c0      	nop			; (mov r8, r8)
   1d956:	46bd      	mov	sp, r7
   1d958:	b002      	add	sp, #8
   1d95a:	bd80      	pop	{r7, pc}
   1d95c:	e000e100 	.word	0xe000e100

0001d960 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1d960:	b580      	push	{r7, lr}
   1d962:	b084      	sub	sp, #16
   1d964:	af00      	add	r7, sp, #0
   1d966:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1d968:	687b      	ldr	r3, [r7, #4]
   1d96a:	681b      	ldr	r3, [r3, #0]
   1d96c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1d96e:	68fb      	ldr	r3, [r7, #12]
   1d970:	69db      	ldr	r3, [r3, #28]
   1d972:	1e5a      	subs	r2, r3, #1
   1d974:	4193      	sbcs	r3, r2
   1d976:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1d978:	0018      	movs	r0, r3
   1d97a:	46bd      	mov	sp, r7
   1d97c:	b004      	add	sp, #16
   1d97e:	bd80      	pop	{r7, pc}

0001d980 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1d980:	b580      	push	{r7, lr}
   1d982:	b082      	sub	sp, #8
   1d984:	af00      	add	r7, sp, #0
   1d986:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1d988:	46c0      	nop			; (mov r8, r8)
   1d98a:	687b      	ldr	r3, [r7, #4]
   1d98c:	0018      	movs	r0, r3
   1d98e:	4b04      	ldr	r3, [pc, #16]	; (1d9a0 <_usart_wait_for_sync+0x20>)
   1d990:	4798      	blx	r3
   1d992:	1e03      	subs	r3, r0, #0
   1d994:	d1f9      	bne.n	1d98a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1d996:	46c0      	nop			; (mov r8, r8)
   1d998:	46bd      	mov	sp, r7
   1d99a:	b002      	add	sp, #8
   1d99c:	bd80      	pop	{r7, pc}
   1d99e:	46c0      	nop			; (mov r8, r8)
   1d9a0:	0001d961 	.word	0x0001d961

0001d9a4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1d9a4:	b580      	push	{r7, lr}
   1d9a6:	b082      	sub	sp, #8
   1d9a8:	af00      	add	r7, sp, #0
   1d9aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1d9ac:	687b      	ldr	r3, [r7, #4]
   1d9ae:	2280      	movs	r2, #128	; 0x80
   1d9b0:	05d2      	lsls	r2, r2, #23
   1d9b2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1d9b4:	687b      	ldr	r3, [r7, #4]
   1d9b6:	2200      	movs	r2, #0
   1d9b8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1d9ba:	687b      	ldr	r3, [r7, #4]
   1d9bc:	22ff      	movs	r2, #255	; 0xff
   1d9be:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1d9c0:	687b      	ldr	r3, [r7, #4]
   1d9c2:	2200      	movs	r2, #0
   1d9c4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1d9c6:	687b      	ldr	r3, [r7, #4]
   1d9c8:	2200      	movs	r2, #0
   1d9ca:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1d9cc:	687b      	ldr	r3, [r7, #4]
   1d9ce:	2296      	movs	r2, #150	; 0x96
   1d9d0:	0192      	lsls	r2, r2, #6
   1d9d2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1d9d4:	687b      	ldr	r3, [r7, #4]
   1d9d6:	2224      	movs	r2, #36	; 0x24
   1d9d8:	2101      	movs	r1, #1
   1d9da:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1d9dc:	687b      	ldr	r3, [r7, #4]
   1d9de:	2225      	movs	r2, #37	; 0x25
   1d9e0:	2101      	movs	r1, #1
   1d9e2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1d9e4:	687b      	ldr	r3, [r7, #4]
   1d9e6:	2226      	movs	r2, #38	; 0x26
   1d9e8:	2100      	movs	r1, #0
   1d9ea:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1d9ec:	687b      	ldr	r3, [r7, #4]
   1d9ee:	2227      	movs	r2, #39	; 0x27
   1d9f0:	2100      	movs	r1, #0
   1d9f2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1d9f4:	687b      	ldr	r3, [r7, #4]
   1d9f6:	2200      	movs	r2, #0
   1d9f8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1d9fa:	687b      	ldr	r3, [r7, #4]
   1d9fc:	2288      	movs	r2, #136	; 0x88
   1d9fe:	0352      	lsls	r2, r2, #13
   1da00:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1da02:	687b      	ldr	r3, [r7, #4]
   1da04:	222c      	movs	r2, #44	; 0x2c
   1da06:	2100      	movs	r1, #0
   1da08:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1da0a:	687b      	ldr	r3, [r7, #4]
   1da0c:	222d      	movs	r2, #45	; 0x2d
   1da0e:	2100      	movs	r1, #0
   1da10:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1da12:	687b      	ldr	r3, [r7, #4]
   1da14:	2200      	movs	r2, #0
   1da16:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1da18:	687b      	ldr	r3, [r7, #4]
   1da1a:	2200      	movs	r2, #0
   1da1c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1da1e:	687b      	ldr	r3, [r7, #4]
   1da20:	2200      	movs	r2, #0
   1da22:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1da24:	687b      	ldr	r3, [r7, #4]
   1da26:	2200      	movs	r2, #0
   1da28:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1da2a:	687b      	ldr	r3, [r7, #4]
   1da2c:	2200      	movs	r2, #0
   1da2e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1da30:	687b      	ldr	r3, [r7, #4]
   1da32:	2200      	movs	r2, #0
   1da34:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1da36:	687b      	ldr	r3, [r7, #4]
   1da38:	2200      	movs	r2, #0
   1da3a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1da3c:	687b      	ldr	r3, [r7, #4]
   1da3e:	2200      	movs	r2, #0
   1da40:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1da42:	687b      	ldr	r3, [r7, #4]
   1da44:	2200      	movs	r2, #0
   1da46:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1da48:	687b      	ldr	r3, [r7, #4]
   1da4a:	2200      	movs	r2, #0
   1da4c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1da4e:	687b      	ldr	r3, [r7, #4]
   1da50:	2213      	movs	r2, #19
   1da52:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1da54:	687b      	ldr	r3, [r7, #4]
   1da56:	2200      	movs	r2, #0
   1da58:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1da5a:	46c0      	nop			; (mov r8, r8)
   1da5c:	46bd      	mov	sp, r7
   1da5e:	b002      	add	sp, #8
   1da60:	bd80      	pop	{r7, pc}
	...

0001da64 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1da64:	b580      	push	{r7, lr}
   1da66:	b084      	sub	sp, #16
   1da68:	af00      	add	r7, sp, #0
   1da6a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1da6c:	687b      	ldr	r3, [r7, #4]
   1da6e:	681b      	ldr	r3, [r3, #0]
   1da70:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1da72:	687b      	ldr	r3, [r7, #4]
   1da74:	681b      	ldr	r3, [r3, #0]
   1da76:	0018      	movs	r0, r3
   1da78:	4b09      	ldr	r3, [pc, #36]	; (1daa0 <usart_enable+0x3c>)
   1da7a:	4798      	blx	r3
   1da7c:	0003      	movs	r3, r0
   1da7e:	0018      	movs	r0, r3
   1da80:	4b08      	ldr	r3, [pc, #32]	; (1daa4 <usart_enable+0x40>)
   1da82:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1da84:	687b      	ldr	r3, [r7, #4]
   1da86:	0018      	movs	r0, r3
   1da88:	4b07      	ldr	r3, [pc, #28]	; (1daa8 <usart_enable+0x44>)
   1da8a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1da8c:	68fb      	ldr	r3, [r7, #12]
   1da8e:	681b      	ldr	r3, [r3, #0]
   1da90:	2202      	movs	r2, #2
   1da92:	431a      	orrs	r2, r3
   1da94:	68fb      	ldr	r3, [r7, #12]
   1da96:	601a      	str	r2, [r3, #0]
}
   1da98:	46c0      	nop			; (mov r8, r8)
   1da9a:	46bd      	mov	sp, r7
   1da9c:	b004      	add	sp, #16
   1da9e:	bd80      	pop	{r7, pc}
   1daa0:	000270ad 	.word	0x000270ad
   1daa4:	0001d935 	.word	0x0001d935
   1daa8:	0001d981 	.word	0x0001d981

0001daac <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1daac:	b580      	push	{r7, lr}
   1daae:	b082      	sub	sp, #8
   1dab0:	af00      	add	r7, sp, #0
   1dab2:	6078      	str	r0, [r7, #4]
   1dab4:	000a      	movs	r2, r1
   1dab6:	1cfb      	adds	r3, r7, #3
   1dab8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1daba:	687b      	ldr	r3, [r7, #4]
   1dabc:	2231      	movs	r2, #49	; 0x31
   1dabe:	5c9b      	ldrb	r3, [r3, r2]
   1dac0:	b25a      	sxtb	r2, r3
   1dac2:	1cfb      	adds	r3, r7, #3
   1dac4:	781b      	ldrb	r3, [r3, #0]
   1dac6:	2101      	movs	r1, #1
   1dac8:	4099      	lsls	r1, r3
   1daca:	000b      	movs	r3, r1
   1dacc:	b25b      	sxtb	r3, r3
   1dace:	4313      	orrs	r3, r2
   1dad0:	b25b      	sxtb	r3, r3
   1dad2:	b2d9      	uxtb	r1, r3
   1dad4:	687b      	ldr	r3, [r7, #4]
   1dad6:	2231      	movs	r2, #49	; 0x31
   1dad8:	5499      	strb	r1, [r3, r2]

}
   1dada:	46c0      	nop			; (mov r8, r8)
   1dadc:	46bd      	mov	sp, r7
   1dade:	b002      	add	sp, #8
   1dae0:	bd80      	pop	{r7, pc}
	...

0001dae4 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1dae4:	b580      	push	{r7, lr}
   1dae6:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1dae8:	2380      	movs	r3, #128	; 0x80
   1daea:	009a      	lsls	r2, r3, #2
   1daec:	4b0f      	ldr	r3, [pc, #60]	; (1db2c <InitializeSerialConsole+0x48>)
   1daee:	0011      	movs	r1, r2
   1daf0:	0018      	movs	r0, r3
   1daf2:	4b0f      	ldr	r3, [pc, #60]	; (1db30 <InitializeSerialConsole+0x4c>)
   1daf4:	4798      	blx	r3
   1daf6:	0002      	movs	r2, r0
   1daf8:	4b0e      	ldr	r3, [pc, #56]	; (1db34 <InitializeSerialConsole+0x50>)
   1dafa:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1dafc:	2380      	movs	r3, #128	; 0x80
   1dafe:	009a      	lsls	r2, r3, #2
   1db00:	4b0d      	ldr	r3, [pc, #52]	; (1db38 <InitializeSerialConsole+0x54>)
   1db02:	0011      	movs	r1, r2
   1db04:	0018      	movs	r0, r3
   1db06:	4b0a      	ldr	r3, [pc, #40]	; (1db30 <InitializeSerialConsole+0x4c>)
   1db08:	4798      	blx	r3
   1db0a:	0002      	movs	r2, r0
   1db0c:	4b0b      	ldr	r3, [pc, #44]	; (1db3c <InitializeSerialConsole+0x58>)
   1db0e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1db10:	4b0b      	ldr	r3, [pc, #44]	; (1db40 <InitializeSerialConsole+0x5c>)
   1db12:	4798      	blx	r3
    configure_usart_callbacks();
   1db14:	4b0b      	ldr	r3, [pc, #44]	; (1db44 <InitializeSerialConsole+0x60>)
   1db16:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1db18:	490b      	ldr	r1, [pc, #44]	; (1db48 <InitializeSerialConsole+0x64>)
   1db1a:	4b0c      	ldr	r3, [pc, #48]	; (1db4c <InitializeSerialConsole+0x68>)
   1db1c:	2201      	movs	r2, #1
   1db1e:	0018      	movs	r0, r3
   1db20:	4b0b      	ldr	r3, [pc, #44]	; (1db50 <InitializeSerialConsole+0x6c>)
   1db22:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1db24:	46c0      	nop			; (mov r8, r8)
   1db26:	46bd      	mov	sp, r7
   1db28:	bd80      	pop	{r7, pc}
   1db2a:	46c0      	nop			; (mov r8, r8)
   1db2c:	20005408 	.word	0x20005408
   1db30:	0001d815 	.word	0x0001d815
   1db34:	20005200 	.word	0x20005200
   1db38:	20005208 	.word	0x20005208
   1db3c:	2000560c 	.word	0x2000560c
   1db40:	0001dcb9 	.word	0x0001dcb9
   1db44:	0001dd31 	.word	0x0001dd31
   1db48:	20005204 	.word	0x20005204
   1db4c:	200051cc 	.word	0x200051cc
   1db50:	00028955 	.word	0x00028955

0001db54 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1db54:	b580      	push	{r7, lr}
   1db56:	b084      	sub	sp, #16
   1db58:	af00      	add	r7, sp, #0
   1db5a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1db5c:	4b1a      	ldr	r3, [pc, #104]	; (1dbc8 <SerialConsoleWriteString+0x74>)
   1db5e:	4798      	blx	r3
    if (string != NULL) {
   1db60:	687b      	ldr	r3, [r7, #4]
   1db62:	2b00      	cmp	r3, #0
   1db64:	d02a      	beq.n	1dbbc <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1db66:	2300      	movs	r3, #0
   1db68:	60fb      	str	r3, [r7, #12]
   1db6a:	e00b      	b.n	1db84 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1db6c:	4b17      	ldr	r3, [pc, #92]	; (1dbcc <SerialConsoleWriteString+0x78>)
   1db6e:	6818      	ldr	r0, [r3, #0]
   1db70:	687a      	ldr	r2, [r7, #4]
   1db72:	68fb      	ldr	r3, [r7, #12]
   1db74:	18d3      	adds	r3, r2, r3
   1db76:	781b      	ldrb	r3, [r3, #0]
   1db78:	0019      	movs	r1, r3
   1db7a:	4b15      	ldr	r3, [pc, #84]	; (1dbd0 <SerialConsoleWriteString+0x7c>)
   1db7c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1db7e:	68fb      	ldr	r3, [r7, #12]
   1db80:	3301      	adds	r3, #1
   1db82:	60fb      	str	r3, [r7, #12]
   1db84:	687b      	ldr	r3, [r7, #4]
   1db86:	0018      	movs	r0, r3
   1db88:	4b12      	ldr	r3, [pc, #72]	; (1dbd4 <SerialConsoleWriteString+0x80>)
   1db8a:	4798      	blx	r3
   1db8c:	0002      	movs	r2, r0
   1db8e:	68fb      	ldr	r3, [r7, #12]
   1db90:	429a      	cmp	r2, r3
   1db92:	d8eb      	bhi.n	1db6c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1db94:	4b10      	ldr	r3, [pc, #64]	; (1dbd8 <SerialConsoleWriteString+0x84>)
   1db96:	2101      	movs	r1, #1
   1db98:	0018      	movs	r0, r3
   1db9a:	4b10      	ldr	r3, [pc, #64]	; (1dbdc <SerialConsoleWriteString+0x88>)
   1db9c:	4798      	blx	r3
   1db9e:	1e03      	subs	r3, r0, #0
   1dba0:	d10c      	bne.n	1dbbc <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1dba2:	4b0a      	ldr	r3, [pc, #40]	; (1dbcc <SerialConsoleWriteString+0x78>)
   1dba4:	681b      	ldr	r3, [r3, #0]
   1dba6:	4a0e      	ldr	r2, [pc, #56]	; (1dbe0 <SerialConsoleWriteString+0x8c>)
   1dba8:	0011      	movs	r1, r2
   1dbaa:	0018      	movs	r0, r3
   1dbac:	4b0d      	ldr	r3, [pc, #52]	; (1dbe4 <SerialConsoleWriteString+0x90>)
   1dbae:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1dbb0:	490b      	ldr	r1, [pc, #44]	; (1dbe0 <SerialConsoleWriteString+0x8c>)
   1dbb2:	4b09      	ldr	r3, [pc, #36]	; (1dbd8 <SerialConsoleWriteString+0x84>)
   1dbb4:	2201      	movs	r2, #1
   1dbb6:	0018      	movs	r0, r3
   1dbb8:	4b0b      	ldr	r3, [pc, #44]	; (1dbe8 <SerialConsoleWriteString+0x94>)
   1dbba:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1dbbc:	4b0b      	ldr	r3, [pc, #44]	; (1dbec <SerialConsoleWriteString+0x98>)
   1dbbe:	4798      	blx	r3
}
   1dbc0:	46c0      	nop			; (mov r8, r8)
   1dbc2:	46bd      	mov	sp, r7
   1dbc4:	b004      	add	sp, #16
   1dbc6:	bd80      	pop	{r7, pc}
   1dbc8:	0001c1c1 	.word	0x0001c1c1
   1dbcc:	2000560c 	.word	0x2000560c
   1dbd0:	0001d875 	.word	0x0001d875
   1dbd4:	00034727 	.word	0x00034727
   1dbd8:	200051cc 	.word	0x200051cc
   1dbdc:	0002899d 	.word	0x0002899d
   1dbe0:	20005608 	.word	0x20005608
   1dbe4:	0001d8a9 	.word	0x0001d8a9
   1dbe8:	0002890d 	.word	0x0002890d
   1dbec:	0001c1d9 	.word	0x0001c1d9

0001dbf0 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1dbf0:	b580      	push	{r7, lr}
   1dbf2:	b084      	sub	sp, #16
   1dbf4:	af00      	add	r7, sp, #0
   1dbf6:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1dbf8:	4b08      	ldr	r3, [pc, #32]	; (1dc1c <SerialConsoleReadCharacter+0x2c>)
   1dbfa:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1dbfc:	4b08      	ldr	r3, [pc, #32]	; (1dc20 <SerialConsoleReadCharacter+0x30>)
   1dbfe:	681b      	ldr	r3, [r3, #0]
   1dc00:	687a      	ldr	r2, [r7, #4]
   1dc02:	0011      	movs	r1, r2
   1dc04:	0018      	movs	r0, r3
   1dc06:	4b07      	ldr	r3, [pc, #28]	; (1dc24 <SerialConsoleReadCharacter+0x34>)
   1dc08:	4798      	blx	r3
   1dc0a:	0003      	movs	r3, r0
   1dc0c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1dc0e:	4b06      	ldr	r3, [pc, #24]	; (1dc28 <SerialConsoleReadCharacter+0x38>)
   1dc10:	4798      	blx	r3
    return a;
   1dc12:	68fb      	ldr	r3, [r7, #12]
}
   1dc14:	0018      	movs	r0, r3
   1dc16:	46bd      	mov	sp, r7
   1dc18:	b004      	add	sp, #16
   1dc1a:	bd80      	pop	{r7, pc}
   1dc1c:	0001c1c1 	.word	0x0001c1c1
   1dc20:	20005200 	.word	0x20005200
   1dc24:	0001d8a9 	.word	0x0001d8a9
   1dc28:	0001c1d9 	.word	0x0001c1d9

0001dc2c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1dc2c:	b580      	push	{r7, lr}
   1dc2e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1dc30:	4b02      	ldr	r3, [pc, #8]	; (1dc3c <getLogLevel+0x10>)
   1dc32:	781b      	ldrb	r3, [r3, #0]
}
   1dc34:	0018      	movs	r0, r3
   1dc36:	46bd      	mov	sp, r7
   1dc38:	bd80      	pop	{r7, pc}
   1dc3a:	46c0      	nop			; (mov r8, r8)
   1dc3c:	20003e08 	.word	0x20003e08

0001dc40 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1dc40:	b40e      	push	{r1, r2, r3}
   1dc42:	b590      	push	{r4, r7, lr}
   1dc44:	b084      	sub	sp, #16
   1dc46:	af00      	add	r7, sp, #0
   1dc48:	0002      	movs	r2, r0
   1dc4a:	1dfb      	adds	r3, r7, #7
   1dc4c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1dc4e:	4b0e      	ldr	r3, [pc, #56]	; (1dc88 <LogMessage+0x48>)
   1dc50:	4798      	blx	r3
   1dc52:	0003      	movs	r3, r0
   1dc54:	001a      	movs	r2, r3
   1dc56:	1dfb      	adds	r3, r7, #7
   1dc58:	781b      	ldrb	r3, [r3, #0]
   1dc5a:	4293      	cmp	r3, r2
   1dc5c:	d30c      	bcc.n	1dc78 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1dc5e:	2320      	movs	r3, #32
   1dc60:	18fb      	adds	r3, r7, r3
   1dc62:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1dc64:	68fb      	ldr	r3, [r7, #12]
   1dc66:	69fa      	ldr	r2, [r7, #28]
   1dc68:	4808      	ldr	r0, [pc, #32]	; (1dc8c <LogMessage+0x4c>)
   1dc6a:	217f      	movs	r1, #127	; 0x7f
   1dc6c:	4c08      	ldr	r4, [pc, #32]	; (1dc90 <LogMessage+0x50>)
   1dc6e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1dc70:	4b06      	ldr	r3, [pc, #24]	; (1dc8c <LogMessage+0x4c>)
   1dc72:	0018      	movs	r0, r3
   1dc74:	4b07      	ldr	r3, [pc, #28]	; (1dc94 <LogMessage+0x54>)
   1dc76:	4798      	blx	r3
        va_end(ap);
    }
};
   1dc78:	46c0      	nop			; (mov r8, r8)
   1dc7a:	46bd      	mov	sp, r7
   1dc7c:	b004      	add	sp, #16
   1dc7e:	bc90      	pop	{r4, r7}
   1dc80:	bc08      	pop	{r3}
   1dc82:	b003      	add	sp, #12
   1dc84:	4718      	bx	r3
   1dc86:	46c0      	nop			; (mov r8, r8)
   1dc88:	0001dc2d 	.word	0x0001dc2d
   1dc8c:	2000514c 	.word	0x2000514c
   1dc90:	00034961 	.word	0x00034961
   1dc94:	0001db55 	.word	0x0001db55

0001dc98 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1dc98:	b40f      	push	{r0, r1, r2, r3}
   1dc9a:	b580      	push	{r7, lr}
   1dc9c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1dc9e:	68bb      	ldr	r3, [r7, #8]
   1dca0:	0019      	movs	r1, r3
   1dca2:	2001      	movs	r0, #1
   1dca4:	4b03      	ldr	r3, [pc, #12]	; (1dcb4 <LogMessageDebug+0x1c>)
   1dca6:	4798      	blx	r3
};
   1dca8:	46c0      	nop			; (mov r8, r8)
   1dcaa:	46bd      	mov	sp, r7
   1dcac:	bc80      	pop	{r7}
   1dcae:	bc08      	pop	{r3}
   1dcb0:	b004      	add	sp, #16
   1dcb2:	4718      	bx	r3
   1dcb4:	0001dc41 	.word	0x0001dc41

0001dcb8 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1dcb8:	b580      	push	{r7, lr}
   1dcba:	b090      	sub	sp, #64	; 0x40
   1dcbc:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1dcbe:	003b      	movs	r3, r7
   1dcc0:	0018      	movs	r0, r3
   1dcc2:	4b14      	ldr	r3, [pc, #80]	; (1dd14 <configure_usart+0x5c>)
   1dcc4:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1dcc6:	003b      	movs	r3, r7
   1dcc8:	22e1      	movs	r2, #225	; 0xe1
   1dcca:	0252      	lsls	r2, r2, #9
   1dccc:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1dcce:	003b      	movs	r3, r7
   1dcd0:	22c4      	movs	r2, #196	; 0xc4
   1dcd2:	0392      	lsls	r2, r2, #14
   1dcd4:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1dcd6:	003b      	movs	r3, r7
   1dcd8:	2201      	movs	r2, #1
   1dcda:	4252      	negs	r2, r2
   1dcdc:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1dcde:	003b      	movs	r3, r7
   1dce0:	2201      	movs	r2, #1
   1dce2:	4252      	negs	r2, r2
   1dce4:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1dce6:	003b      	movs	r3, r7
   1dce8:	4a0b      	ldr	r2, [pc, #44]	; (1dd18 <configure_usart+0x60>)
   1dcea:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1dcec:	003b      	movs	r3, r7
   1dcee:	4a0b      	ldr	r2, [pc, #44]	; (1dd1c <configure_usart+0x64>)
   1dcf0:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1dcf2:	46c0      	nop			; (mov r8, r8)
   1dcf4:	003a      	movs	r2, r7
   1dcf6:	490a      	ldr	r1, [pc, #40]	; (1dd20 <configure_usart+0x68>)
   1dcf8:	4b0a      	ldr	r3, [pc, #40]	; (1dd24 <configure_usart+0x6c>)
   1dcfa:	0018      	movs	r0, r3
   1dcfc:	4b0a      	ldr	r3, [pc, #40]	; (1dd28 <configure_usart+0x70>)
   1dcfe:	4798      	blx	r3
   1dd00:	1e03      	subs	r3, r0, #0
   1dd02:	d1f7      	bne.n	1dcf4 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1dd04:	4b07      	ldr	r3, [pc, #28]	; (1dd24 <configure_usart+0x6c>)
   1dd06:	0018      	movs	r0, r3
   1dd08:	4b08      	ldr	r3, [pc, #32]	; (1dd2c <configure_usart+0x74>)
   1dd0a:	4798      	blx	r3
}
   1dd0c:	46c0      	nop			; (mov r8, r8)
   1dd0e:	46bd      	mov	sp, r7
   1dd10:	b010      	add	sp, #64	; 0x40
   1dd12:	bd80      	pop	{r7, pc}
   1dd14:	0001d9a5 	.word	0x0001d9a5
   1dd18:	002a0003 	.word	0x002a0003
   1dd1c:	002b0003 	.word	0x002b0003
   1dd20:	42001800 	.word	0x42001800
   1dd24:	200051cc 	.word	0x200051cc
   1dd28:	00028511 	.word	0x00028511
   1dd2c:	0001da65 	.word	0x0001da65

0001dd30 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1dd30:	b580      	push	{r7, lr}
   1dd32:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1dd34:	490c      	ldr	r1, [pc, #48]	; (1dd68 <configure_usart_callbacks+0x38>)
   1dd36:	4b0d      	ldr	r3, [pc, #52]	; (1dd6c <configure_usart_callbacks+0x3c>)
   1dd38:	2200      	movs	r2, #0
   1dd3a:	0018      	movs	r0, r3
   1dd3c:	4b0c      	ldr	r3, [pc, #48]	; (1dd70 <configure_usart_callbacks+0x40>)
   1dd3e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1dd40:	490c      	ldr	r1, [pc, #48]	; (1dd74 <configure_usart_callbacks+0x44>)
   1dd42:	4b0a      	ldr	r3, [pc, #40]	; (1dd6c <configure_usart_callbacks+0x3c>)
   1dd44:	2201      	movs	r2, #1
   1dd46:	0018      	movs	r0, r3
   1dd48:	4b09      	ldr	r3, [pc, #36]	; (1dd70 <configure_usart_callbacks+0x40>)
   1dd4a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1dd4c:	4b07      	ldr	r3, [pc, #28]	; (1dd6c <configure_usart_callbacks+0x3c>)
   1dd4e:	2100      	movs	r1, #0
   1dd50:	0018      	movs	r0, r3
   1dd52:	4b09      	ldr	r3, [pc, #36]	; (1dd78 <configure_usart_callbacks+0x48>)
   1dd54:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1dd56:	4b05      	ldr	r3, [pc, #20]	; (1dd6c <configure_usart_callbacks+0x3c>)
   1dd58:	2101      	movs	r1, #1
   1dd5a:	0018      	movs	r0, r3
   1dd5c:	4b06      	ldr	r3, [pc, #24]	; (1dd78 <configure_usart_callbacks+0x48>)
   1dd5e:	4798      	blx	r3
}
   1dd60:	46c0      	nop			; (mov r8, r8)
   1dd62:	46bd      	mov	sp, r7
   1dd64:	bd80      	pop	{r7, pc}
   1dd66:	46c0      	nop			; (mov r8, r8)
   1dd68:	0001ddc5 	.word	0x0001ddc5
   1dd6c:	200051cc 	.word	0x200051cc
   1dd70:	000288c5 	.word	0x000288c5
   1dd74:	0001dd7d 	.word	0x0001dd7d
   1dd78:	0001daad 	.word	0x0001daad

0001dd7c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1dd7c:	b580      	push	{r7, lr}
   1dd7e:	b082      	sub	sp, #8
   1dd80:	af00      	add	r7, sp, #0
   1dd82:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1dd84:	4b09      	ldr	r3, [pc, #36]	; (1ddac <usart_read_callback+0x30>)
   1dd86:	681a      	ldr	r2, [r3, #0]
   1dd88:	4b09      	ldr	r3, [pc, #36]	; (1ddb0 <usart_read_callback+0x34>)
   1dd8a:	781b      	ldrb	r3, [r3, #0]
   1dd8c:	0019      	movs	r1, r3
   1dd8e:	0010      	movs	r0, r2
   1dd90:	4b08      	ldr	r3, [pc, #32]	; (1ddb4 <usart_read_callback+0x38>)
   1dd92:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1dd94:	4906      	ldr	r1, [pc, #24]	; (1ddb0 <usart_read_callback+0x34>)
   1dd96:	4b08      	ldr	r3, [pc, #32]	; (1ddb8 <usart_read_callback+0x3c>)
   1dd98:	2201      	movs	r2, #1
   1dd9a:	0018      	movs	r0, r3
   1dd9c:	4b07      	ldr	r3, [pc, #28]	; (1ddbc <usart_read_callback+0x40>)
   1dd9e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1dda0:	4b07      	ldr	r3, [pc, #28]	; (1ddc0 <usart_read_callback+0x44>)
   1dda2:	4798      	blx	r3
}
   1dda4:	46c0      	nop			; (mov r8, r8)
   1dda6:	46bd      	mov	sp, r7
   1dda8:	b002      	add	sp, #8
   1ddaa:	bd80      	pop	{r7, pc}
   1ddac:	20005200 	.word	0x20005200
   1ddb0:	20005204 	.word	0x20005204
   1ddb4:	0001d875 	.word	0x0001d875
   1ddb8:	200051cc 	.word	0x200051cc
   1ddbc:	00028955 	.word	0x00028955
   1ddc0:	000131bd 	.word	0x000131bd

0001ddc4 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1ddc4:	b580      	push	{r7, lr}
   1ddc6:	b082      	sub	sp, #8
   1ddc8:	af00      	add	r7, sp, #0
   1ddca:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1ddcc:	4b09      	ldr	r3, [pc, #36]	; (1ddf4 <usart_write_callback+0x30>)
   1ddce:	681b      	ldr	r3, [r3, #0]
   1ddd0:	4a09      	ldr	r2, [pc, #36]	; (1ddf8 <usart_write_callback+0x34>)
   1ddd2:	0011      	movs	r1, r2
   1ddd4:	0018      	movs	r0, r3
   1ddd6:	4b09      	ldr	r3, [pc, #36]	; (1ddfc <usart_write_callback+0x38>)
   1ddd8:	4798      	blx	r3
   1ddda:	0003      	movs	r3, r0
   1dddc:	3301      	adds	r3, #1
   1ddde:	d005      	beq.n	1ddec <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1dde0:	4905      	ldr	r1, [pc, #20]	; (1ddf8 <usart_write_callback+0x34>)
   1dde2:	4b07      	ldr	r3, [pc, #28]	; (1de00 <usart_write_callback+0x3c>)
   1dde4:	2201      	movs	r2, #1
   1dde6:	0018      	movs	r0, r3
   1dde8:	4b06      	ldr	r3, [pc, #24]	; (1de04 <usart_write_callback+0x40>)
   1ddea:	4798      	blx	r3
    }
}
   1ddec:	46c0      	nop			; (mov r8, r8)
   1ddee:	46bd      	mov	sp, r7
   1ddf0:	b002      	add	sp, #8
   1ddf2:	bd80      	pop	{r7, pc}
   1ddf4:	2000560c 	.word	0x2000560c
   1ddf8:	20005608 	.word	0x20005608
   1ddfc:	0001d8a9 	.word	0x0001d8a9
   1de00:	200051cc 	.word	0x200051cc
   1de04:	0002890d 	.word	0x0002890d

0001de08 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1de08:	b590      	push	{r4, r7, lr}
   1de0a:	b087      	sub	sp, #28
   1de0c:	af00      	add	r7, sp, #0
   1de0e:	60f8      	str	r0, [r7, #12]
   1de10:	000c      	movs	r4, r1
   1de12:	0010      	movs	r0, r2
   1de14:	0019      	movs	r1, r3
   1de16:	230a      	movs	r3, #10
   1de18:	18fb      	adds	r3, r7, r3
   1de1a:	1c22      	adds	r2, r4, #0
   1de1c:	801a      	strh	r2, [r3, #0]
   1de1e:	2308      	movs	r3, #8
   1de20:	18fb      	adds	r3, r7, r3
   1de22:	1c02      	adds	r2, r0, #0
   1de24:	801a      	strh	r2, [r3, #0]
   1de26:	1dfb      	adds	r3, r7, #7
   1de28:	1c0a      	adds	r2, r1, #0
   1de2a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1de2c:	230a      	movs	r3, #10
   1de2e:	18fb      	adds	r3, r7, r3
   1de30:	881a      	ldrh	r2, [r3, #0]
   1de32:	2308      	movs	r3, #8
   1de34:	18fb      	adds	r3, r7, r3
   1de36:	881b      	ldrh	r3, [r3, #0]
   1de38:	1ad3      	subs	r3, r2, r3
   1de3a:	3307      	adds	r3, #7
   1de3c:	2b00      	cmp	r3, #0
   1de3e:	da00      	bge.n	1de42 <SDMMC_UNSTUFF_BITS+0x3a>
   1de40:	3307      	adds	r3, #7
   1de42:	10db      	asrs	r3, r3, #3
   1de44:	3b01      	subs	r3, #1
   1de46:	68fa      	ldr	r2, [r7, #12]
   1de48:	18d3      	adds	r3, r2, r3
   1de4a:	781b      	ldrb	r3, [r3, #0]
   1de4c:	0019      	movs	r1, r3
   1de4e:	2308      	movs	r3, #8
   1de50:	18fb      	adds	r3, r7, r3
   1de52:	881b      	ldrh	r3, [r3, #0]
   1de54:	2207      	movs	r2, #7
   1de56:	4013      	ands	r3, r2
   1de58:	4119      	asrs	r1, r3
   1de5a:	000b      	movs	r3, r1
   1de5c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1de5e:	2308      	movs	r3, #8
   1de60:	18fb      	adds	r3, r7, r3
   1de62:	881b      	ldrh	r3, [r3, #0]
   1de64:	2207      	movs	r2, #7
   1de66:	401a      	ands	r2, r3
   1de68:	1dfb      	adds	r3, r7, #7
   1de6a:	781b      	ldrb	r3, [r3, #0]
   1de6c:	18d3      	adds	r3, r2, r3
   1de6e:	2b08      	cmp	r3, #8
   1de70:	dd1c      	ble.n	1deac <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1de72:	230a      	movs	r3, #10
   1de74:	18fb      	adds	r3, r7, r3
   1de76:	881a      	ldrh	r2, [r3, #0]
   1de78:	2308      	movs	r3, #8
   1de7a:	18fb      	adds	r3, r7, r3
   1de7c:	881b      	ldrh	r3, [r3, #0]
   1de7e:	1ad3      	subs	r3, r2, r3
   1de80:	3307      	adds	r3, #7
   1de82:	2b00      	cmp	r3, #0
   1de84:	da00      	bge.n	1de88 <SDMMC_UNSTUFF_BITS+0x80>
   1de86:	3307      	adds	r3, #7
   1de88:	10db      	asrs	r3, r3, #3
   1de8a:	3b02      	subs	r3, #2
   1de8c:	68fa      	ldr	r2, [r7, #12]
   1de8e:	18d3      	adds	r3, r2, r3
   1de90:	781b      	ldrb	r3, [r3, #0]
   1de92:	0019      	movs	r1, r3
   1de94:	2308      	movs	r3, #8
   1de96:	18fb      	adds	r3, r7, r3
   1de98:	881b      	ldrh	r3, [r3, #0]
   1de9a:	2207      	movs	r2, #7
   1de9c:	4013      	ands	r3, r2
   1de9e:	2208      	movs	r2, #8
   1dea0:	1ad3      	subs	r3, r2, r3
   1dea2:	4099      	lsls	r1, r3
   1dea4:	000b      	movs	r3, r1
   1dea6:	697a      	ldr	r2, [r7, #20]
   1dea8:	4313      	orrs	r3, r2
   1deaa:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1deac:	2308      	movs	r3, #8
   1deae:	18fb      	adds	r3, r7, r3
   1deb0:	881b      	ldrh	r3, [r3, #0]
   1deb2:	2207      	movs	r2, #7
   1deb4:	401a      	ands	r2, r3
   1deb6:	1dfb      	adds	r3, r7, #7
   1deb8:	781b      	ldrb	r3, [r3, #0]
   1deba:	18d3      	adds	r3, r2, r3
   1debc:	2b10      	cmp	r3, #16
   1debe:	dd1c      	ble.n	1defa <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1dec0:	230a      	movs	r3, #10
   1dec2:	18fb      	adds	r3, r7, r3
   1dec4:	881a      	ldrh	r2, [r3, #0]
   1dec6:	2308      	movs	r3, #8
   1dec8:	18fb      	adds	r3, r7, r3
   1deca:	881b      	ldrh	r3, [r3, #0]
   1decc:	1ad3      	subs	r3, r2, r3
   1dece:	3307      	adds	r3, #7
   1ded0:	2b00      	cmp	r3, #0
   1ded2:	da00      	bge.n	1ded6 <SDMMC_UNSTUFF_BITS+0xce>
   1ded4:	3307      	adds	r3, #7
   1ded6:	10db      	asrs	r3, r3, #3
   1ded8:	3b03      	subs	r3, #3
   1deda:	68fa      	ldr	r2, [r7, #12]
   1dedc:	18d3      	adds	r3, r2, r3
   1dede:	781b      	ldrb	r3, [r3, #0]
   1dee0:	0019      	movs	r1, r3
   1dee2:	2308      	movs	r3, #8
   1dee4:	18fb      	adds	r3, r7, r3
   1dee6:	881b      	ldrh	r3, [r3, #0]
   1dee8:	2207      	movs	r2, #7
   1deea:	4013      	ands	r3, r2
   1deec:	2210      	movs	r2, #16
   1deee:	1ad3      	subs	r3, r2, r3
   1def0:	4099      	lsls	r1, r3
   1def2:	000b      	movs	r3, r1
   1def4:	697a      	ldr	r2, [r7, #20]
   1def6:	4313      	orrs	r3, r2
   1def8:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1defa:	2308      	movs	r3, #8
   1defc:	18fb      	adds	r3, r7, r3
   1defe:	881b      	ldrh	r3, [r3, #0]
   1df00:	2207      	movs	r2, #7
   1df02:	401a      	ands	r2, r3
   1df04:	1dfb      	adds	r3, r7, #7
   1df06:	781b      	ldrb	r3, [r3, #0]
   1df08:	18d3      	adds	r3, r2, r3
   1df0a:	2b10      	cmp	r3, #16
   1df0c:	dd1c      	ble.n	1df48 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1df0e:	230a      	movs	r3, #10
   1df10:	18fb      	adds	r3, r7, r3
   1df12:	881a      	ldrh	r2, [r3, #0]
   1df14:	2308      	movs	r3, #8
   1df16:	18fb      	adds	r3, r7, r3
   1df18:	881b      	ldrh	r3, [r3, #0]
   1df1a:	1ad3      	subs	r3, r2, r3
   1df1c:	3307      	adds	r3, #7
   1df1e:	2b00      	cmp	r3, #0
   1df20:	da00      	bge.n	1df24 <SDMMC_UNSTUFF_BITS+0x11c>
   1df22:	3307      	adds	r3, #7
   1df24:	10db      	asrs	r3, r3, #3
   1df26:	3b03      	subs	r3, #3
   1df28:	68fa      	ldr	r2, [r7, #12]
   1df2a:	18d3      	adds	r3, r2, r3
   1df2c:	781b      	ldrb	r3, [r3, #0]
   1df2e:	0019      	movs	r1, r3
   1df30:	2308      	movs	r3, #8
   1df32:	18fb      	adds	r3, r7, r3
   1df34:	881b      	ldrh	r3, [r3, #0]
   1df36:	2207      	movs	r2, #7
   1df38:	4013      	ands	r3, r2
   1df3a:	2210      	movs	r2, #16
   1df3c:	1ad3      	subs	r3, r2, r3
   1df3e:	4099      	lsls	r1, r3
   1df40:	000b      	movs	r3, r1
   1df42:	697a      	ldr	r2, [r7, #20]
   1df44:	4313      	orrs	r3, r2
   1df46:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1df48:	1dfb      	adds	r3, r7, #7
   1df4a:	781b      	ldrb	r3, [r3, #0]
   1df4c:	2201      	movs	r2, #1
   1df4e:	409a      	lsls	r2, r3
   1df50:	0013      	movs	r3, r2
   1df52:	1e5a      	subs	r2, r3, #1
   1df54:	697b      	ldr	r3, [r7, #20]
   1df56:	4013      	ands	r3, r2
   1df58:	617b      	str	r3, [r7, #20]
	return value;
   1df5a:	697b      	ldr	r3, [r7, #20]
}
   1df5c:	0018      	movs	r0, r3
   1df5e:	46bd      	mov	sp, r7
   1df60:	b007      	add	sp, #28
   1df62:	bd90      	pop	{r4, r7, pc}

0001df64 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1df64:	b580      	push	{r7, lr}
   1df66:	b082      	sub	sp, #8
   1df68:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1df6a:	4b23      	ldr	r3, [pc, #140]	; (1dff8 <mmc_spi_op_cond+0x94>)
   1df6c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1df6e:	4b23      	ldr	r3, [pc, #140]	; (1dffc <mmc_spi_op_cond+0x98>)
   1df70:	2100      	movs	r1, #0
   1df72:	0018      	movs	r0, r3
   1df74:	4b22      	ldr	r3, [pc, #136]	; (1e000 <mmc_spi_op_cond+0x9c>)
   1df76:	4798      	blx	r3
   1df78:	0003      	movs	r3, r0
   1df7a:	001a      	movs	r2, r3
   1df7c:	2301      	movs	r3, #1
   1df7e:	4053      	eors	r3, r2
   1df80:	b2db      	uxtb	r3, r3
   1df82:	2b00      	cmp	r3, #0
   1df84:	d001      	beq.n	1df8a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1df86:	2300      	movs	r3, #0
   1df88:	e031      	b.n	1dfee <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1df8a:	4b1e      	ldr	r3, [pc, #120]	; (1e004 <mmc_spi_op_cond+0xa0>)
   1df8c:	4798      	blx	r3
   1df8e:	0003      	movs	r3, r0
   1df90:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1df92:	683b      	ldr	r3, [r7, #0]
   1df94:	2201      	movs	r2, #1
   1df96:	4013      	ands	r3, r2
   1df98:	d006      	beq.n	1dfa8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1df9a:	687b      	ldr	r3, [r7, #4]
   1df9c:	1e5a      	subs	r2, r3, #1
   1df9e:	607a      	str	r2, [r7, #4]
   1dfa0:	2b00      	cmp	r3, #0
   1dfa2:	d1e4      	bne.n	1df6e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1dfa4:	2300      	movs	r3, #0
   1dfa6:	e022      	b.n	1dfee <mmc_spi_op_cond+0x8a>
			break;
   1dfa8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1dfaa:	4b17      	ldr	r3, [pc, #92]	; (1e008 <mmc_spi_op_cond+0xa4>)
   1dfac:	2100      	movs	r1, #0
   1dfae:	0018      	movs	r0, r3
   1dfb0:	4b13      	ldr	r3, [pc, #76]	; (1e000 <mmc_spi_op_cond+0x9c>)
   1dfb2:	4798      	blx	r3
   1dfb4:	0003      	movs	r3, r0
   1dfb6:	001a      	movs	r2, r3
   1dfb8:	2301      	movs	r3, #1
   1dfba:	4053      	eors	r3, r2
   1dfbc:	b2db      	uxtb	r3, r3
   1dfbe:	2b00      	cmp	r3, #0
   1dfc0:	d001      	beq.n	1dfc6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1dfc2:	2300      	movs	r3, #0
   1dfc4:	e013      	b.n	1dfee <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1dfc6:	4b0f      	ldr	r3, [pc, #60]	; (1e004 <mmc_spi_op_cond+0xa0>)
   1dfc8:	4798      	blx	r3
   1dfca:	0002      	movs	r2, r0
   1dfcc:	23c0      	movs	r3, #192	; 0xc0
   1dfce:	05db      	lsls	r3, r3, #23
   1dfd0:	401a      	ands	r2, r3
   1dfd2:	2380      	movs	r3, #128	; 0x80
   1dfd4:	05db      	lsls	r3, r3, #23
   1dfd6:	429a      	cmp	r2, r3
   1dfd8:	d108      	bne.n	1dfec <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1dfda:	4b0c      	ldr	r3, [pc, #48]	; (1e00c <mmc_spi_op_cond+0xa8>)
   1dfdc:	681a      	ldr	r2, [r3, #0]
   1dfde:	4b0b      	ldr	r3, [pc, #44]	; (1e00c <mmc_spi_op_cond+0xa8>)
   1dfe0:	681b      	ldr	r3, [r3, #0]
   1dfe2:	7adb      	ldrb	r3, [r3, #11]
   1dfe4:	2108      	movs	r1, #8
   1dfe6:	430b      	orrs	r3, r1
   1dfe8:	b2db      	uxtb	r3, r3
   1dfea:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1dfec:	2301      	movs	r3, #1
}
   1dfee:	0018      	movs	r0, r3
   1dff0:	46bd      	mov	sp, r7
   1dff2:	b002      	add	sp, #8
   1dff4:	bd80      	pop	{r7, pc}
   1dff6:	46c0      	nop			; (mov r8, r8)
   1dff8:	00001bee 	.word	0x00001bee
   1dffc:	00001101 	.word	0x00001101
   1e000:	0001f625 	.word	0x0001f625
   1e004:	0001f865 	.word	0x0001f865
   1e008:	0000053a 	.word	0x0000053a
   1e00c:	20003e30 	.word	0x20003e30

0001e010 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1e010:	b580      	push	{r7, lr}
   1e012:	b086      	sub	sp, #24
   1e014:	af00      	add	r7, sp, #0
   1e016:	0002      	movs	r2, r0
   1e018:	1dfb      	adds	r3, r7, #7
   1e01a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e01c:	4b2e      	ldr	r3, [pc, #184]	; (1e0d8 <sd_spi_op_cond+0xc8>)
   1e01e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1e020:	4b2e      	ldr	r3, [pc, #184]	; (1e0dc <sd_spi_op_cond+0xcc>)
   1e022:	2100      	movs	r1, #0
   1e024:	0018      	movs	r0, r3
   1e026:	4b2e      	ldr	r3, [pc, #184]	; (1e0e0 <sd_spi_op_cond+0xd0>)
   1e028:	4798      	blx	r3
   1e02a:	0003      	movs	r3, r0
   1e02c:	001a      	movs	r2, r3
   1e02e:	2301      	movs	r3, #1
   1e030:	4053      	eors	r3, r2
   1e032:	b2db      	uxtb	r3, r3
   1e034:	2b00      	cmp	r3, #0
   1e036:	d001      	beq.n	1e03c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1e038:	2300      	movs	r3, #0
   1e03a:	e048      	b.n	1e0ce <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1e03c:	2300      	movs	r3, #0
   1e03e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1e040:	1dfb      	adds	r3, r7, #7
   1e042:	781b      	ldrb	r3, [r3, #0]
   1e044:	2b00      	cmp	r3, #0
   1e046:	d004      	beq.n	1e052 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1e048:	697b      	ldr	r3, [r7, #20]
   1e04a:	2280      	movs	r2, #128	; 0x80
   1e04c:	05d2      	lsls	r2, r2, #23
   1e04e:	4313      	orrs	r3, r2
   1e050:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1e052:	697b      	ldr	r3, [r7, #20]
   1e054:	4a23      	ldr	r2, [pc, #140]	; (1e0e4 <sd_spi_op_cond+0xd4>)
   1e056:	0019      	movs	r1, r3
   1e058:	0010      	movs	r0, r2
   1e05a:	4b21      	ldr	r3, [pc, #132]	; (1e0e0 <sd_spi_op_cond+0xd0>)
   1e05c:	4798      	blx	r3
   1e05e:	0003      	movs	r3, r0
   1e060:	001a      	movs	r2, r3
   1e062:	2301      	movs	r3, #1
   1e064:	4053      	eors	r3, r2
   1e066:	b2db      	uxtb	r3, r3
   1e068:	2b00      	cmp	r3, #0
   1e06a:	d001      	beq.n	1e070 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1e06c:	2300      	movs	r3, #0
   1e06e:	e02e      	b.n	1e0ce <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1e070:	4b1d      	ldr	r3, [pc, #116]	; (1e0e8 <sd_spi_op_cond+0xd8>)
   1e072:	4798      	blx	r3
   1e074:	0003      	movs	r3, r0
   1e076:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1e078:	68fb      	ldr	r3, [r7, #12]
   1e07a:	2201      	movs	r2, #1
   1e07c:	4013      	ands	r3, r2
   1e07e:	d006      	beq.n	1e08e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1e080:	693b      	ldr	r3, [r7, #16]
   1e082:	1e5a      	subs	r2, r3, #1
   1e084:	613a      	str	r2, [r7, #16]
   1e086:	2b00      	cmp	r3, #0
   1e088:	d1ca      	bne.n	1e020 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1e08a:	2300      	movs	r3, #0
   1e08c:	e01f      	b.n	1e0ce <sd_spi_op_cond+0xbe>
			break;
   1e08e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e090:	4b16      	ldr	r3, [pc, #88]	; (1e0ec <sd_spi_op_cond+0xdc>)
   1e092:	2100      	movs	r1, #0
   1e094:	0018      	movs	r0, r3
   1e096:	4b12      	ldr	r3, [pc, #72]	; (1e0e0 <sd_spi_op_cond+0xd0>)
   1e098:	4798      	blx	r3
   1e09a:	0003      	movs	r3, r0
   1e09c:	001a      	movs	r2, r3
   1e09e:	2301      	movs	r3, #1
   1e0a0:	4053      	eors	r3, r2
   1e0a2:	b2db      	uxtb	r3, r3
   1e0a4:	2b00      	cmp	r3, #0
   1e0a6:	d001      	beq.n	1e0ac <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e0a8:	2300      	movs	r3, #0
   1e0aa:	e010      	b.n	1e0ce <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1e0ac:	4b0e      	ldr	r3, [pc, #56]	; (1e0e8 <sd_spi_op_cond+0xd8>)
   1e0ae:	4798      	blx	r3
   1e0b0:	0002      	movs	r2, r0
   1e0b2:	2380      	movs	r3, #128	; 0x80
   1e0b4:	05db      	lsls	r3, r3, #23
   1e0b6:	4013      	ands	r3, r2
   1e0b8:	d008      	beq.n	1e0cc <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e0ba:	4b0d      	ldr	r3, [pc, #52]	; (1e0f0 <sd_spi_op_cond+0xe0>)
   1e0bc:	681a      	ldr	r2, [r3, #0]
   1e0be:	4b0c      	ldr	r3, [pc, #48]	; (1e0f0 <sd_spi_op_cond+0xe0>)
   1e0c0:	681b      	ldr	r3, [r3, #0]
   1e0c2:	7adb      	ldrb	r3, [r3, #11]
   1e0c4:	2108      	movs	r1, #8
   1e0c6:	430b      	orrs	r3, r1
   1e0c8:	b2db      	uxtb	r3, r3
   1e0ca:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e0cc:	2301      	movs	r3, #1
}
   1e0ce:	0018      	movs	r0, r3
   1e0d0:	46bd      	mov	sp, r7
   1e0d2:	b006      	add	sp, #24
   1e0d4:	bd80      	pop	{r7, pc}
   1e0d6:	46c0      	nop			; (mov r8, r8)
   1e0d8:	00001bee 	.word	0x00001bee
   1e0dc:	00001137 	.word	0x00001137
   1e0e0:	0001f625 	.word	0x0001f625
   1e0e4:	00001129 	.word	0x00001129
   1e0e8:	0001f865 	.word	0x0001f865
   1e0ec:	0000053a 	.word	0x0000053a
   1e0f0:	20003e30 	.word	0x20003e30

0001e0f4 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1e0f4:	b580      	push	{r7, lr}
   1e0f6:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1e0f8:	2301      	movs	r3, #1
}
   1e0fa:	0018      	movs	r0, r3
   1e0fc:	46bd      	mov	sp, r7
   1e0fe:	bd80      	pop	{r7, pc}

0001e100 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1e100:	b580      	push	{r7, lr}
   1e102:	b084      	sub	sp, #16
   1e104:	af00      	add	r7, sp, #0
   1e106:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1e108:	687b      	ldr	r3, [r7, #4]
   1e10a:	2200      	movs	r2, #0
   1e10c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1e10e:	23d5      	movs	r3, #213	; 0xd5
   1e110:	005b      	lsls	r3, r3, #1
   1e112:	4a14      	ldr	r2, [pc, #80]	; (1e164 <sd_cmd8+0x64>)
   1e114:	0019      	movs	r1, r3
   1e116:	0010      	movs	r0, r2
   1e118:	4b13      	ldr	r3, [pc, #76]	; (1e168 <sd_cmd8+0x68>)
   1e11a:	4798      	blx	r3
   1e11c:	0003      	movs	r3, r0
   1e11e:	001a      	movs	r2, r3
   1e120:	2301      	movs	r3, #1
   1e122:	4053      	eors	r3, r2
   1e124:	b2db      	uxtb	r3, r3
   1e126:	2b00      	cmp	r3, #0
   1e128:	d001      	beq.n	1e12e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1e12a:	2301      	movs	r3, #1
   1e12c:	e015      	b.n	1e15a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1e12e:	4b0f      	ldr	r3, [pc, #60]	; (1e16c <sd_cmd8+0x6c>)
   1e130:	4798      	blx	r3
   1e132:	0003      	movs	r3, r0
   1e134:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1e136:	68fb      	ldr	r3, [r7, #12]
   1e138:	3301      	adds	r3, #1
   1e13a:	d101      	bne.n	1e140 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1e13c:	2301      	movs	r3, #1
   1e13e:	e00c      	b.n	1e15a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1e140:	68fb      	ldr	r3, [r7, #12]
   1e142:	051b      	lsls	r3, r3, #20
   1e144:	0d1a      	lsrs	r2, r3, #20
   1e146:	23d5      	movs	r3, #213	; 0xd5
   1e148:	005b      	lsls	r3, r3, #1
   1e14a:	429a      	cmp	r2, r3
   1e14c:	d001      	beq.n	1e152 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1e14e:	2300      	movs	r3, #0
   1e150:	e003      	b.n	1e15a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1e152:	687b      	ldr	r3, [r7, #4]
   1e154:	2201      	movs	r2, #1
   1e156:	701a      	strb	r2, [r3, #0]
	return true;
   1e158:	2301      	movs	r3, #1
}
   1e15a:	0018      	movs	r0, r3
   1e15c:	46bd      	mov	sp, r7
   1e15e:	b004      	add	sp, #16
   1e160:	bd80      	pop	{r7, pc}
   1e162:	46c0      	nop			; (mov r8, r8)
   1e164:	00005508 	.word	0x00005508
   1e168:	0001f625 	.word	0x0001f625
   1e16c:	0001f865 	.word	0x0001f865

0001e170 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1e170:	b590      	push	{r4, r7, lr}
   1e172:	b089      	sub	sp, #36	; 0x24
   1e174:	af02      	add	r7, sp, #8
   1e176:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1e178:	2380      	movs	r3, #128	; 0x80
   1e17a:	009a      	lsls	r2, r3, #2
   1e17c:	4841      	ldr	r0, [pc, #260]	; (1e284 <mmc_cmd8+0x114>)
   1e17e:	2300      	movs	r3, #0
   1e180:	9300      	str	r3, [sp, #0]
   1e182:	2301      	movs	r3, #1
   1e184:	2100      	movs	r1, #0
   1e186:	4c40      	ldr	r4, [pc, #256]	; (1e288 <mmc_cmd8+0x118>)
   1e188:	47a0      	blx	r4
   1e18a:	0003      	movs	r3, r0
   1e18c:	001a      	movs	r2, r3
   1e18e:	2301      	movs	r3, #1
   1e190:	4053      	eors	r3, r2
   1e192:	b2db      	uxtb	r3, r3
   1e194:	2b00      	cmp	r3, #0
   1e196:	d001      	beq.n	1e19c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1e198:	2300      	movs	r3, #0
   1e19a:	e06e      	b.n	1e27a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e19c:	2316      	movs	r3, #22
   1e19e:	18fb      	adds	r3, r7, r3
   1e1a0:	2200      	movs	r2, #0
   1e1a2:	801a      	strh	r2, [r3, #0]
   1e1a4:	e014      	b.n	1e1d0 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1e1a6:	2310      	movs	r3, #16
   1e1a8:	18fb      	adds	r3, r7, r3
   1e1aa:	0018      	movs	r0, r3
   1e1ac:	4b37      	ldr	r3, [pc, #220]	; (1e28c <mmc_cmd8+0x11c>)
   1e1ae:	4798      	blx	r3
   1e1b0:	0003      	movs	r3, r0
   1e1b2:	001a      	movs	r2, r3
   1e1b4:	2301      	movs	r3, #1
   1e1b6:	4053      	eors	r3, r2
   1e1b8:	b2db      	uxtb	r3, r3
   1e1ba:	2b00      	cmp	r3, #0
   1e1bc:	d001      	beq.n	1e1c2 <mmc_cmd8+0x52>
			return false;
   1e1be:	2300      	movs	r3, #0
   1e1c0:	e05b      	b.n	1e27a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1e1c2:	2316      	movs	r3, #22
   1e1c4:	18fb      	adds	r3, r7, r3
   1e1c6:	881a      	ldrh	r2, [r3, #0]
   1e1c8:	2316      	movs	r3, #22
   1e1ca:	18fb      	adds	r3, r7, r3
   1e1cc:	3201      	adds	r2, #1
   1e1ce:	801a      	strh	r2, [r3, #0]
   1e1d0:	2316      	movs	r3, #22
   1e1d2:	18fb      	adds	r3, r7, r3
   1e1d4:	881b      	ldrh	r3, [r3, #0]
   1e1d6:	2b31      	cmp	r3, #49	; 0x31
   1e1d8:	d9e5      	bls.n	1e1a6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1e1da:	693b      	ldr	r3, [r7, #16]
   1e1dc:	b2db      	uxtb	r3, r3
   1e1de:	2202      	movs	r2, #2
   1e1e0:	4013      	ands	r3, r2
   1e1e2:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1e1e4:	687b      	ldr	r3, [r7, #4]
   1e1e6:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1e1e8:	4b29      	ldr	r3, [pc, #164]	; (1e290 <mmc_cmd8+0x120>)
   1e1ea:	681b      	ldr	r3, [r3, #0]
   1e1ec:	330e      	adds	r3, #14
   1e1ee:	0018      	movs	r0, r3
   1e1f0:	230c      	movs	r3, #12
   1e1f2:	223e      	movs	r2, #62	; 0x3e
   1e1f4:	2180      	movs	r1, #128	; 0x80
   1e1f6:	4c27      	ldr	r4, [pc, #156]	; (1e294 <mmc_cmd8+0x124>)
   1e1f8:	47a0      	blx	r4
   1e1fa:	0002      	movs	r2, r0
   1e1fc:	4b26      	ldr	r3, [pc, #152]	; (1e298 <mmc_cmd8+0x128>)
   1e1fe:	429a      	cmp	r2, r3
   1e200:	d135      	bne.n	1e26e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e202:	e014      	b.n	1e22e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1e204:	230c      	movs	r3, #12
   1e206:	18fb      	adds	r3, r7, r3
   1e208:	0018      	movs	r0, r3
   1e20a:	4b20      	ldr	r3, [pc, #128]	; (1e28c <mmc_cmd8+0x11c>)
   1e20c:	4798      	blx	r3
   1e20e:	0003      	movs	r3, r0
   1e210:	001a      	movs	r2, r3
   1e212:	2301      	movs	r3, #1
   1e214:	4053      	eors	r3, r2
   1e216:	b2db      	uxtb	r3, r3
   1e218:	2b00      	cmp	r3, #0
   1e21a:	d001      	beq.n	1e220 <mmc_cmd8+0xb0>
				return false;
   1e21c:	2300      	movs	r3, #0
   1e21e:	e02c      	b.n	1e27a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1e220:	2316      	movs	r3, #22
   1e222:	18fb      	adds	r3, r7, r3
   1e224:	881a      	ldrh	r2, [r3, #0]
   1e226:	2316      	movs	r3, #22
   1e228:	18fb      	adds	r3, r7, r3
   1e22a:	3201      	adds	r2, #1
   1e22c:	801a      	strh	r2, [r3, #0]
   1e22e:	2316      	movs	r3, #22
   1e230:	18fb      	adds	r3, r7, r3
   1e232:	881b      	ldrh	r3, [r3, #0]
   1e234:	2b35      	cmp	r3, #53	; 0x35
   1e236:	d9e5      	bls.n	1e204 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1e238:	4b15      	ldr	r3, [pc, #84]	; (1e290 <mmc_cmd8+0x120>)
   1e23a:	681b      	ldr	r3, [r3, #0]
   1e23c:	68fa      	ldr	r2, [r7, #12]
   1e23e:	0852      	lsrs	r2, r2, #1
   1e240:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e242:	e014      	b.n	1e26e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1e244:	230c      	movs	r3, #12
   1e246:	18fb      	adds	r3, r7, r3
   1e248:	0018      	movs	r0, r3
   1e24a:	4b10      	ldr	r3, [pc, #64]	; (1e28c <mmc_cmd8+0x11c>)
   1e24c:	4798      	blx	r3
   1e24e:	0003      	movs	r3, r0
   1e250:	001a      	movs	r2, r3
   1e252:	2301      	movs	r3, #1
   1e254:	4053      	eors	r3, r2
   1e256:	b2db      	uxtb	r3, r3
   1e258:	2b00      	cmp	r3, #0
   1e25a:	d001      	beq.n	1e260 <mmc_cmd8+0xf0>
			return false;
   1e25c:	2300      	movs	r3, #0
   1e25e:	e00c      	b.n	1e27a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1e260:	2316      	movs	r3, #22
   1e262:	18fb      	adds	r3, r7, r3
   1e264:	881a      	ldrh	r2, [r3, #0]
   1e266:	2316      	movs	r3, #22
   1e268:	18fb      	adds	r3, r7, r3
   1e26a:	3201      	adds	r2, #1
   1e26c:	801a      	strh	r2, [r3, #0]
   1e26e:	2316      	movs	r3, #22
   1e270:	18fb      	adds	r3, r7, r3
   1e272:	881b      	ldrh	r3, [r3, #0]
   1e274:	2b7f      	cmp	r3, #127	; 0x7f
   1e276:	d9e5      	bls.n	1e244 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1e278:	2301      	movs	r3, #1
}
   1e27a:	0018      	movs	r0, r3
   1e27c:	46bd      	mov	sp, r7
   1e27e:	b007      	add	sp, #28
   1e280:	bd90      	pop	{r4, r7, pc}
   1e282:	46c0      	nop			; (mov r8, r8)
   1e284:	00081108 	.word	0x00081108
   1e288:	0001f64d 	.word	0x0001f64d
   1e28c:	0001f879 	.word	0x0001f879
   1e290:	20003e30 	.word	0x20003e30
   1e294:	0001de09 	.word	0x0001de09
   1e298:	00000fff 	.word	0x00000fff

0001e29c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1e29c:	b590      	push	{r4, r7, lr}
   1e29e:	b083      	sub	sp, #12
   1e2a0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1e2a2:	4b15      	ldr	r3, [pc, #84]	; (1e2f8 <sd_mmc_cmd9_spi+0x5c>)
   1e2a4:	681b      	ldr	r3, [r3, #0]
   1e2a6:	891b      	ldrh	r3, [r3, #8]
   1e2a8:	0419      	lsls	r1, r3, #16
   1e2aa:	4814      	ldr	r0, [pc, #80]	; (1e2fc <sd_mmc_cmd9_spi+0x60>)
   1e2ac:	2301      	movs	r3, #1
   1e2ae:	9300      	str	r3, [sp, #0]
   1e2b0:	2301      	movs	r3, #1
   1e2b2:	2210      	movs	r2, #16
   1e2b4:	4c12      	ldr	r4, [pc, #72]	; (1e300 <sd_mmc_cmd9_spi+0x64>)
   1e2b6:	47a0      	blx	r4
   1e2b8:	0003      	movs	r3, r0
   1e2ba:	001a      	movs	r2, r3
   1e2bc:	2301      	movs	r3, #1
   1e2be:	4053      	eors	r3, r2
   1e2c0:	b2db      	uxtb	r3, r3
   1e2c2:	2b00      	cmp	r3, #0
   1e2c4:	d001      	beq.n	1e2ca <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1e2c6:	2300      	movs	r3, #0
   1e2c8:	e012      	b.n	1e2f0 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1e2ca:	4b0b      	ldr	r3, [pc, #44]	; (1e2f8 <sd_mmc_cmd9_spi+0x5c>)
   1e2cc:	681b      	ldr	r3, [r3, #0]
   1e2ce:	330e      	adds	r3, #14
   1e2d0:	2101      	movs	r1, #1
   1e2d2:	0018      	movs	r0, r3
   1e2d4:	4b0b      	ldr	r3, [pc, #44]	; (1e304 <sd_mmc_cmd9_spi+0x68>)
   1e2d6:	4798      	blx	r3
   1e2d8:	0003      	movs	r3, r0
   1e2da:	001a      	movs	r2, r3
   1e2dc:	2301      	movs	r3, #1
   1e2de:	4053      	eors	r3, r2
   1e2e0:	b2db      	uxtb	r3, r3
   1e2e2:	2b00      	cmp	r3, #0
   1e2e4:	d001      	beq.n	1e2ea <sd_mmc_cmd9_spi+0x4e>
		return false;
   1e2e6:	2300      	movs	r3, #0
   1e2e8:	e002      	b.n	1e2f0 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1e2ea:	4b07      	ldr	r3, [pc, #28]	; (1e308 <sd_mmc_cmd9_spi+0x6c>)
   1e2ec:	4798      	blx	r3
   1e2ee:	0003      	movs	r3, r0
}
   1e2f0:	0018      	movs	r0, r3
   1e2f2:	46bd      	mov	sp, r7
   1e2f4:	b001      	add	sp, #4
   1e2f6:	bd90      	pop	{r4, r7, pc}
   1e2f8:	20003e30 	.word	0x20003e30
   1e2fc:	00081109 	.word	0x00081109
   1e300:	0001f64d 	.word	0x0001f64d
   1e304:	0001f91d 	.word	0x0001f91d
   1e308:	0001f9c1 	.word	0x0001f9c1

0001e30c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1e30c:	b5b0      	push	{r4, r5, r7, lr}
   1e30e:	b084      	sub	sp, #16
   1e310:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1e312:	4b45      	ldr	r3, [pc, #276]	; (1e428 <mmc_decode_csd+0x11c>)
   1e314:	681b      	ldr	r3, [r3, #0]
   1e316:	330e      	adds	r3, #14
   1e318:	0018      	movs	r0, r3
   1e31a:	2304      	movs	r3, #4
   1e31c:	227a      	movs	r2, #122	; 0x7a
   1e31e:	2180      	movs	r1, #128	; 0x80
   1e320:	4c42      	ldr	r4, [pc, #264]	; (1e42c <mmc_decode_csd+0x120>)
   1e322:	47a0      	blx	r4
   1e324:	0003      	movs	r3, r0
   1e326:	2b02      	cmp	r3, #2
   1e328:	d011      	beq.n	1e34e <mmc_decode_csd+0x42>
   1e32a:	d802      	bhi.n	1e332 <mmc_decode_csd+0x26>
   1e32c:	2b01      	cmp	r3, #1
   1e32e:	d009      	beq.n	1e344 <mmc_decode_csd+0x38>
   1e330:	e003      	b.n	1e33a <mmc_decode_csd+0x2e>
   1e332:	2b03      	cmp	r3, #3
   1e334:	d010      	beq.n	1e358 <mmc_decode_csd+0x4c>
   1e336:	2b04      	cmp	r3, #4
   1e338:	d013      	beq.n	1e362 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1e33a:	4b3b      	ldr	r3, [pc, #236]	; (1e428 <mmc_decode_csd+0x11c>)
   1e33c:	681b      	ldr	r3, [r3, #0]
   1e33e:	2212      	movs	r2, #18
   1e340:	731a      	strb	r2, [r3, #12]
		break;
   1e342:	e013      	b.n	1e36c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1e344:	4b38      	ldr	r3, [pc, #224]	; (1e428 <mmc_decode_csd+0x11c>)
   1e346:	681b      	ldr	r3, [r3, #0]
   1e348:	2214      	movs	r2, #20
   1e34a:	731a      	strb	r2, [r3, #12]
		break;
   1e34c:	e00e      	b.n	1e36c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1e34e:	4b36      	ldr	r3, [pc, #216]	; (1e428 <mmc_decode_csd+0x11c>)
   1e350:	681b      	ldr	r3, [r3, #0]
   1e352:	2222      	movs	r2, #34	; 0x22
   1e354:	731a      	strb	r2, [r3, #12]
		break;
   1e356:	e009      	b.n	1e36c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1e358:	4b33      	ldr	r3, [pc, #204]	; (1e428 <mmc_decode_csd+0x11c>)
   1e35a:	681b      	ldr	r3, [r3, #0]
   1e35c:	2230      	movs	r2, #48	; 0x30
   1e35e:	731a      	strb	r2, [r3, #12]
		break;
   1e360:	e004      	b.n	1e36c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1e362:	4b31      	ldr	r3, [pc, #196]	; (1e428 <mmc_decode_csd+0x11c>)
   1e364:	681b      	ldr	r3, [r3, #0]
   1e366:	2240      	movs	r2, #64	; 0x40
   1e368:	731a      	strb	r2, [r3, #12]
		break;
   1e36a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e36c:	4b2e      	ldr	r3, [pc, #184]	; (1e428 <mmc_decode_csd+0x11c>)
   1e36e:	681b      	ldr	r3, [r3, #0]
   1e370:	330e      	adds	r3, #14
   1e372:	0018      	movs	r0, r3
   1e374:	2308      	movs	r3, #8
   1e376:	2260      	movs	r2, #96	; 0x60
   1e378:	2180      	movs	r1, #128	; 0x80
   1e37a:	4c2c      	ldr	r4, [pc, #176]	; (1e42c <mmc_decode_csd+0x120>)
   1e37c:	47a0      	blx	r4
   1e37e:	0003      	movs	r3, r0
   1e380:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e382:	68fb      	ldr	r3, [r7, #12]
   1e384:	2207      	movs	r2, #7
   1e386:	401a      	ands	r2, r3
   1e388:	4b29      	ldr	r3, [pc, #164]	; (1e430 <mmc_decode_csd+0x124>)
   1e38a:	0092      	lsls	r2, r2, #2
   1e38c:	58d3      	ldr	r3, [r2, r3]
   1e38e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e390:	68fb      	ldr	r3, [r7, #12]
   1e392:	08db      	lsrs	r3, r3, #3
   1e394:	220f      	movs	r2, #15
   1e396:	401a      	ands	r2, r3
   1e398:	4b26      	ldr	r3, [pc, #152]	; (1e434 <mmc_decode_csd+0x128>)
   1e39a:	0092      	lsls	r2, r2, #2
   1e39c:	58d3      	ldr	r3, [r2, r3]
   1e39e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e3a0:	4b21      	ldr	r3, [pc, #132]	; (1e428 <mmc_decode_csd+0x11c>)
   1e3a2:	681b      	ldr	r3, [r3, #0]
   1e3a4:	68ba      	ldr	r2, [r7, #8]
   1e3a6:	6879      	ldr	r1, [r7, #4]
   1e3a8:	434a      	muls	r2, r1
   1e3aa:	21fa      	movs	r1, #250	; 0xfa
   1e3ac:	0089      	lsls	r1, r1, #2
   1e3ae:	434a      	muls	r2, r1
   1e3b0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1e3b2:	4b1d      	ldr	r3, [pc, #116]	; (1e428 <mmc_decode_csd+0x11c>)
   1e3b4:	681b      	ldr	r3, [r3, #0]
   1e3b6:	330e      	adds	r3, #14
   1e3b8:	0018      	movs	r0, r3
   1e3ba:	230c      	movs	r3, #12
   1e3bc:	223e      	movs	r2, #62	; 0x3e
   1e3be:	2180      	movs	r1, #128	; 0x80
   1e3c0:	4c1a      	ldr	r4, [pc, #104]	; (1e42c <mmc_decode_csd+0x120>)
   1e3c2:	47a0      	blx	r4
   1e3c4:	0002      	movs	r2, r0
   1e3c6:	4b1c      	ldr	r3, [pc, #112]	; (1e438 <mmc_decode_csd+0x12c>)
   1e3c8:	429a      	cmp	r2, r3
   1e3ca:	d028      	beq.n	1e41e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e3cc:	4b16      	ldr	r3, [pc, #88]	; (1e428 <mmc_decode_csd+0x11c>)
   1e3ce:	681b      	ldr	r3, [r3, #0]
   1e3d0:	330e      	adds	r3, #14
   1e3d2:	0018      	movs	r0, r3
   1e3d4:	230c      	movs	r3, #12
   1e3d6:	223e      	movs	r2, #62	; 0x3e
   1e3d8:	2180      	movs	r1, #128	; 0x80
   1e3da:	4c14      	ldr	r4, [pc, #80]	; (1e42c <mmc_decode_csd+0x120>)
   1e3dc:	47a0      	blx	r4
   1e3de:	0003      	movs	r3, r0
   1e3e0:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e3e2:	4b11      	ldr	r3, [pc, #68]	; (1e428 <mmc_decode_csd+0x11c>)
   1e3e4:	681b      	ldr	r3, [r3, #0]
   1e3e6:	330e      	adds	r3, #14
   1e3e8:	0018      	movs	r0, r3
   1e3ea:	2303      	movs	r3, #3
   1e3ec:	222f      	movs	r2, #47	; 0x2f
   1e3ee:	2180      	movs	r1, #128	; 0x80
   1e3f0:	4d0e      	ldr	r5, [pc, #56]	; (1e42c <mmc_decode_csd+0x120>)
   1e3f2:	47a8      	blx	r5
   1e3f4:	0003      	movs	r3, r0
   1e3f6:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1e3f8:	409c      	lsls	r4, r3
   1e3fa:	0023      	movs	r3, r4
   1e3fc:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e3fe:	4b0a      	ldr	r3, [pc, #40]	; (1e428 <mmc_decode_csd+0x11c>)
   1e400:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e402:	4b09      	ldr	r3, [pc, #36]	; (1e428 <mmc_decode_csd+0x11c>)
   1e404:	681b      	ldr	r3, [r3, #0]
   1e406:	330e      	adds	r3, #14
   1e408:	0018      	movs	r0, r3
   1e40a:	2304      	movs	r3, #4
   1e40c:	2250      	movs	r2, #80	; 0x50
   1e40e:	2180      	movs	r1, #128	; 0x80
   1e410:	4d06      	ldr	r5, [pc, #24]	; (1e42c <mmc_decode_csd+0x120>)
   1e412:	47a8      	blx	r5
   1e414:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e416:	683b      	ldr	r3, [r7, #0]
   1e418:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1e41a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e41c:	6063      	str	r3, [r4, #4]
	}
}
   1e41e:	46c0      	nop			; (mov r8, r8)
   1e420:	46bd      	mov	sp, r7
   1e422:	b004      	add	sp, #16
   1e424:	bdb0      	pop	{r4, r5, r7, pc}
   1e426:	46c0      	nop			; (mov r8, r8)
   1e428:	20003e30 	.word	0x20003e30
   1e42c:	0001de09 	.word	0x0001de09
   1e430:	00037ac4 	.word	0x00037ac4
   1e434:	00037b20 	.word	0x00037b20
   1e438:	00000fff 	.word	0x00000fff

0001e43c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1e43c:	b5b0      	push	{r4, r5, r7, lr}
   1e43e:	b084      	sub	sp, #16
   1e440:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1e442:	4b35      	ldr	r3, [pc, #212]	; (1e518 <sd_decode_csd+0xdc>)
   1e444:	681b      	ldr	r3, [r3, #0]
   1e446:	330e      	adds	r3, #14
   1e448:	0018      	movs	r0, r3
   1e44a:	2308      	movs	r3, #8
   1e44c:	2260      	movs	r2, #96	; 0x60
   1e44e:	2180      	movs	r1, #128	; 0x80
   1e450:	4c32      	ldr	r4, [pc, #200]	; (1e51c <sd_decode_csd+0xe0>)
   1e452:	47a0      	blx	r4
   1e454:	0003      	movs	r3, r0
   1e456:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1e458:	68fb      	ldr	r3, [r7, #12]
   1e45a:	2207      	movs	r2, #7
   1e45c:	401a      	ands	r2, r3
   1e45e:	4b30      	ldr	r3, [pc, #192]	; (1e520 <sd_decode_csd+0xe4>)
   1e460:	0092      	lsls	r2, r2, #2
   1e462:	58d3      	ldr	r3, [r2, r3]
   1e464:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1e466:	68fb      	ldr	r3, [r7, #12]
   1e468:	08db      	lsrs	r3, r3, #3
   1e46a:	220f      	movs	r2, #15
   1e46c:	401a      	ands	r2, r3
   1e46e:	4b2d      	ldr	r3, [pc, #180]	; (1e524 <sd_decode_csd+0xe8>)
   1e470:	0092      	lsls	r2, r2, #2
   1e472:	58d3      	ldr	r3, [r2, r3]
   1e474:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1e476:	4b28      	ldr	r3, [pc, #160]	; (1e518 <sd_decode_csd+0xdc>)
   1e478:	681b      	ldr	r3, [r3, #0]
   1e47a:	68ba      	ldr	r2, [r7, #8]
   1e47c:	6879      	ldr	r1, [r7, #4]
   1e47e:	434a      	muls	r2, r1
   1e480:	21fa      	movs	r1, #250	; 0xfa
   1e482:	0089      	lsls	r1, r1, #2
   1e484:	434a      	muls	r2, r1
   1e486:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1e488:	4b23      	ldr	r3, [pc, #140]	; (1e518 <sd_decode_csd+0xdc>)
   1e48a:	681b      	ldr	r3, [r3, #0]
   1e48c:	330e      	adds	r3, #14
   1e48e:	0018      	movs	r0, r3
   1e490:	2302      	movs	r3, #2
   1e492:	227e      	movs	r2, #126	; 0x7e
   1e494:	2180      	movs	r1, #128	; 0x80
   1e496:	4c21      	ldr	r4, [pc, #132]	; (1e51c <sd_decode_csd+0xe0>)
   1e498:	47a0      	blx	r4
   1e49a:	1e03      	subs	r3, r0, #0
   1e49c:	d00f      	beq.n	1e4be <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1e49e:	4b1e      	ldr	r3, [pc, #120]	; (1e518 <sd_decode_csd+0xdc>)
   1e4a0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1e4a2:	4b1d      	ldr	r3, [pc, #116]	; (1e518 <sd_decode_csd+0xdc>)
   1e4a4:	681b      	ldr	r3, [r3, #0]
   1e4a6:	330e      	adds	r3, #14
   1e4a8:	0018      	movs	r0, r3
   1e4aa:	2316      	movs	r3, #22
   1e4ac:	2230      	movs	r2, #48	; 0x30
   1e4ae:	2180      	movs	r1, #128	; 0x80
   1e4b0:	4d1a      	ldr	r5, [pc, #104]	; (1e51c <sd_decode_csd+0xe0>)
   1e4b2:	47a8      	blx	r5
   1e4b4:	0003      	movs	r3, r0
				* 512;
   1e4b6:	3301      	adds	r3, #1
   1e4b8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1e4ba:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1e4bc:	e028      	b.n	1e510 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e4be:	4b16      	ldr	r3, [pc, #88]	; (1e518 <sd_decode_csd+0xdc>)
   1e4c0:	681b      	ldr	r3, [r3, #0]
   1e4c2:	330e      	adds	r3, #14
   1e4c4:	0018      	movs	r0, r3
   1e4c6:	230c      	movs	r3, #12
   1e4c8:	223e      	movs	r2, #62	; 0x3e
   1e4ca:	2180      	movs	r1, #128	; 0x80
   1e4cc:	4c13      	ldr	r4, [pc, #76]	; (1e51c <sd_decode_csd+0xe0>)
   1e4ce:	47a0      	blx	r4
   1e4d0:	0003      	movs	r3, r0
   1e4d2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1e4d4:	4b10      	ldr	r3, [pc, #64]	; (1e518 <sd_decode_csd+0xdc>)
   1e4d6:	681b      	ldr	r3, [r3, #0]
   1e4d8:	330e      	adds	r3, #14
   1e4da:	0018      	movs	r0, r3
   1e4dc:	2303      	movs	r3, #3
   1e4de:	222f      	movs	r2, #47	; 0x2f
   1e4e0:	2180      	movs	r1, #128	; 0x80
   1e4e2:	4d0e      	ldr	r5, [pc, #56]	; (1e51c <sd_decode_csd+0xe0>)
   1e4e4:	47a8      	blx	r5
   1e4e6:	0003      	movs	r3, r0
   1e4e8:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1e4ea:	409c      	lsls	r4, r3
   1e4ec:	0023      	movs	r3, r4
   1e4ee:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1e4f0:	4b09      	ldr	r3, [pc, #36]	; (1e518 <sd_decode_csd+0xdc>)
   1e4f2:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1e4f4:	4b08      	ldr	r3, [pc, #32]	; (1e518 <sd_decode_csd+0xdc>)
   1e4f6:	681b      	ldr	r3, [r3, #0]
   1e4f8:	330e      	adds	r3, #14
   1e4fa:	0018      	movs	r0, r3
   1e4fc:	2304      	movs	r3, #4
   1e4fe:	2250      	movs	r2, #80	; 0x50
   1e500:	2180      	movs	r1, #128	; 0x80
   1e502:	4d06      	ldr	r5, [pc, #24]	; (1e51c <sd_decode_csd+0xe0>)
   1e504:	47a8      	blx	r5
   1e506:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1e508:	683b      	ldr	r3, [r7, #0]
   1e50a:	4093      	lsls	r3, r2
				/ 1024;
   1e50c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1e50e:	6063      	str	r3, [r4, #4]
}
   1e510:	46c0      	nop			; (mov r8, r8)
   1e512:	46bd      	mov	sp, r7
   1e514:	b004      	add	sp, #16
   1e516:	bdb0      	pop	{r4, r5, r7, pc}
   1e518:	20003e30 	.word	0x20003e30
   1e51c:	0001de09 	.word	0x0001de09
   1e520:	00037ac4 	.word	0x00037ac4
   1e524:	00037ae0 	.word	0x00037ae0

0001e528 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1e528:	b580      	push	{r7, lr}
   1e52a:	b082      	sub	sp, #8
   1e52c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1e52e:	4b11      	ldr	r3, [pc, #68]	; (1e574 <sd_mmc_cmd13+0x4c>)
   1e530:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1e532:	4b11      	ldr	r3, [pc, #68]	; (1e578 <sd_mmc_cmd13+0x50>)
   1e534:	2100      	movs	r1, #0
   1e536:	0018      	movs	r0, r3
   1e538:	4b10      	ldr	r3, [pc, #64]	; (1e57c <sd_mmc_cmd13+0x54>)
   1e53a:	4798      	blx	r3
   1e53c:	0003      	movs	r3, r0
   1e53e:	001a      	movs	r2, r3
   1e540:	2301      	movs	r3, #1
   1e542:	4053      	eors	r3, r2
   1e544:	b2db      	uxtb	r3, r3
   1e546:	2b00      	cmp	r3, #0
   1e548:	d001      	beq.n	1e54e <sd_mmc_cmd13+0x26>
				return false;
   1e54a:	2300      	movs	r3, #0
   1e54c:	e00e      	b.n	1e56c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1e54e:	4b0c      	ldr	r3, [pc, #48]	; (1e580 <sd_mmc_cmd13+0x58>)
   1e550:	4798      	blx	r3
   1e552:	0002      	movs	r2, r0
   1e554:	23ff      	movs	r3, #255	; 0xff
   1e556:	4013      	ands	r3, r2
   1e558:	d006      	beq.n	1e568 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1e55a:	687b      	ldr	r3, [r7, #4]
   1e55c:	1e5a      	subs	r2, r3, #1
   1e55e:	607a      	str	r2, [r7, #4]
   1e560:	2b00      	cmp	r3, #0
   1e562:	d1e6      	bne.n	1e532 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1e564:	2300      	movs	r3, #0
   1e566:	e001      	b.n	1e56c <sd_mmc_cmd13+0x44>
				break;
   1e568:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1e56a:	2301      	movs	r3, #1
}
   1e56c:	0018      	movs	r0, r3
   1e56e:	46bd      	mov	sp, r7
   1e570:	b002      	add	sp, #8
   1e572:	bd80      	pop	{r7, pc}
   1e574:	00030d40 	.word	0x00030d40
   1e578:	00001b0d 	.word	0x00001b0d
   1e57c:	0001f625 	.word	0x0001f625
   1e580:	0001f865 	.word	0x0001f865

0001e584 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1e584:	b590      	push	{r4, r7, lr}
   1e586:	b085      	sub	sp, #20
   1e588:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1e58a:	4b38      	ldr	r3, [pc, #224]	; (1e66c <sd_acmd51+0xe8>)
   1e58c:	681b      	ldr	r3, [r3, #0]
   1e58e:	891b      	ldrh	r3, [r3, #8]
   1e590:	041b      	lsls	r3, r3, #16
   1e592:	4a37      	ldr	r2, [pc, #220]	; (1e670 <sd_acmd51+0xec>)
   1e594:	0019      	movs	r1, r3
   1e596:	0010      	movs	r0, r2
   1e598:	4b36      	ldr	r3, [pc, #216]	; (1e674 <sd_acmd51+0xf0>)
   1e59a:	4798      	blx	r3
   1e59c:	0003      	movs	r3, r0
   1e59e:	001a      	movs	r2, r3
   1e5a0:	2301      	movs	r3, #1
   1e5a2:	4053      	eors	r3, r2
   1e5a4:	b2db      	uxtb	r3, r3
   1e5a6:	2b00      	cmp	r3, #0
   1e5a8:	d001      	beq.n	1e5ae <sd_acmd51+0x2a>
		return false;
   1e5aa:	2300      	movs	r3, #0
   1e5ac:	e059      	b.n	1e662 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1e5ae:	4832      	ldr	r0, [pc, #200]	; (1e678 <sd_acmd51+0xf4>)
   1e5b0:	2301      	movs	r3, #1
   1e5b2:	9300      	str	r3, [sp, #0]
   1e5b4:	2301      	movs	r3, #1
   1e5b6:	2208      	movs	r2, #8
   1e5b8:	2100      	movs	r1, #0
   1e5ba:	4c30      	ldr	r4, [pc, #192]	; (1e67c <sd_acmd51+0xf8>)
   1e5bc:	47a0      	blx	r4
   1e5be:	0003      	movs	r3, r0
   1e5c0:	001a      	movs	r2, r3
   1e5c2:	2301      	movs	r3, #1
   1e5c4:	4053      	eors	r3, r2
   1e5c6:	b2db      	uxtb	r3, r3
   1e5c8:	2b00      	cmp	r3, #0
   1e5ca:	d001      	beq.n	1e5d0 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1e5cc:	2300      	movs	r3, #0
   1e5ce:	e048      	b.n	1e662 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1e5d0:	003b      	movs	r3, r7
   1e5d2:	2101      	movs	r1, #1
   1e5d4:	0018      	movs	r0, r3
   1e5d6:	4b2a      	ldr	r3, [pc, #168]	; (1e680 <sd_acmd51+0xfc>)
   1e5d8:	4798      	blx	r3
   1e5da:	0003      	movs	r3, r0
   1e5dc:	001a      	movs	r2, r3
   1e5de:	2301      	movs	r3, #1
   1e5e0:	4053      	eors	r3, r2
   1e5e2:	b2db      	uxtb	r3, r3
   1e5e4:	2b00      	cmp	r3, #0
   1e5e6:	d001      	beq.n	1e5ec <sd_acmd51+0x68>
		return false;
   1e5e8:	2300      	movs	r3, #0
   1e5ea:	e03a      	b.n	1e662 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1e5ec:	4b25      	ldr	r3, [pc, #148]	; (1e684 <sd_acmd51+0x100>)
   1e5ee:	4798      	blx	r3
   1e5f0:	0003      	movs	r3, r0
   1e5f2:	001a      	movs	r2, r3
   1e5f4:	2301      	movs	r3, #1
   1e5f6:	4053      	eors	r3, r2
   1e5f8:	b2db      	uxtb	r3, r3
   1e5fa:	2b00      	cmp	r3, #0
   1e5fc:	d001      	beq.n	1e602 <sd_acmd51+0x7e>
		return false;
   1e5fe:	2300      	movs	r3, #0
   1e600:	e02f      	b.n	1e662 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1e602:	0038      	movs	r0, r7
   1e604:	2304      	movs	r3, #4
   1e606:	2238      	movs	r2, #56	; 0x38
   1e608:	2140      	movs	r1, #64	; 0x40
   1e60a:	4c1f      	ldr	r4, [pc, #124]	; (1e688 <sd_acmd51+0x104>)
   1e60c:	47a0      	blx	r4
   1e60e:	0003      	movs	r3, r0
   1e610:	2b01      	cmp	r3, #1
   1e612:	d008      	beq.n	1e626 <sd_acmd51+0xa2>
   1e614:	d302      	bcc.n	1e61c <sd_acmd51+0x98>
   1e616:	2b02      	cmp	r3, #2
   1e618:	d00a      	beq.n	1e630 <sd_acmd51+0xac>
   1e61a:	e01c      	b.n	1e656 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e61c:	4b13      	ldr	r3, [pc, #76]	; (1e66c <sd_acmd51+0xe8>)
   1e61e:	681b      	ldr	r3, [r3, #0]
   1e620:	2210      	movs	r2, #16
   1e622:	731a      	strb	r2, [r3, #12]
		break;
   1e624:	e01c      	b.n	1e660 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1e626:	4b11      	ldr	r3, [pc, #68]	; (1e66c <sd_acmd51+0xe8>)
   1e628:	681b      	ldr	r3, [r3, #0]
   1e62a:	221a      	movs	r2, #26
   1e62c:	731a      	strb	r2, [r3, #12]
		break;
   1e62e:	e017      	b.n	1e660 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1e630:	0038      	movs	r0, r7
   1e632:	2301      	movs	r3, #1
   1e634:	222f      	movs	r2, #47	; 0x2f
   1e636:	2140      	movs	r1, #64	; 0x40
   1e638:	4c13      	ldr	r4, [pc, #76]	; (1e688 <sd_acmd51+0x104>)
   1e63a:	47a0      	blx	r4
   1e63c:	0003      	movs	r3, r0
   1e63e:	2b01      	cmp	r3, #1
   1e640:	d104      	bne.n	1e64c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1e642:	4b0a      	ldr	r3, [pc, #40]	; (1e66c <sd_acmd51+0xe8>)
   1e644:	681b      	ldr	r3, [r3, #0]
   1e646:	2230      	movs	r2, #48	; 0x30
   1e648:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1e64a:	e009      	b.n	1e660 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1e64c:	4b07      	ldr	r3, [pc, #28]	; (1e66c <sd_acmd51+0xe8>)
   1e64e:	681b      	ldr	r3, [r3, #0]
   1e650:	2220      	movs	r2, #32
   1e652:	731a      	strb	r2, [r3, #12]
		break;
   1e654:	e004      	b.n	1e660 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1e656:	4b05      	ldr	r3, [pc, #20]	; (1e66c <sd_acmd51+0xe8>)
   1e658:	681b      	ldr	r3, [r3, #0]
   1e65a:	2210      	movs	r2, #16
   1e65c:	731a      	strb	r2, [r3, #12]
		break;
   1e65e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e660:	2301      	movs	r3, #1
}
   1e662:	0018      	movs	r0, r3
   1e664:	46bd      	mov	sp, r7
   1e666:	b003      	add	sp, #12
   1e668:	bd90      	pop	{r4, r7, pc}
   1e66a:	46c0      	nop			; (mov r8, r8)
   1e66c:	20003e30 	.word	0x20003e30
   1e670:	00001137 	.word	0x00001137
   1e674:	0001f625 	.word	0x0001f625
   1e678:	00081133 	.word	0x00081133
   1e67c:	0001f64d 	.word	0x0001f64d
   1e680:	0001f91d 	.word	0x0001f91d
   1e684:	0001f9c1 	.word	0x0001f9c1
   1e688:	0001de09 	.word	0x0001de09

0001e68c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1e68c:	b580      	push	{r7, lr}
   1e68e:	b082      	sub	sp, #8
   1e690:	af00      	add	r7, sp, #0
   1e692:	0002      	movs	r2, r0
   1e694:	1dfb      	adds	r3, r7, #7
   1e696:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1e698:	1dfb      	adds	r3, r7, #7
   1e69a:	781b      	ldrb	r3, [r3, #0]
   1e69c:	2b00      	cmp	r3, #0
   1e69e:	d001      	beq.n	1e6a4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1e6a0:	2304      	movs	r3, #4
   1e6a2:	e047      	b.n	1e734 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1e6a4:	1dfb      	adds	r3, r7, #7
   1e6a6:	781b      	ldrb	r3, [r3, #0]
   1e6a8:	4a24      	ldr	r2, [pc, #144]	; (1e73c <sd_mmc_select_slot+0xb0>)
   1e6aa:	015b      	lsls	r3, r3, #5
   1e6ac:	18d3      	adds	r3, r2, r3
   1e6ae:	330a      	adds	r3, #10
   1e6b0:	781b      	ldrb	r3, [r3, #0]
   1e6b2:	2b04      	cmp	r3, #4
   1e6b4:	d008      	beq.n	1e6c8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1e6b6:	1dfb      	adds	r3, r7, #7
   1e6b8:	781b      	ldrb	r3, [r3, #0]
   1e6ba:	4a20      	ldr	r2, [pc, #128]	; (1e73c <sd_mmc_select_slot+0xb0>)
   1e6bc:	015b      	lsls	r3, r3, #5
   1e6be:	18d3      	adds	r3, r2, r3
   1e6c0:	330a      	adds	r3, #10
   1e6c2:	781b      	ldrb	r3, [r3, #0]
   1e6c4:	2b03      	cmp	r3, #3
   1e6c6:	d11d      	bne.n	1e704 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1e6c8:	1dfb      	adds	r3, r7, #7
   1e6ca:	781b      	ldrb	r3, [r3, #0]
   1e6cc:	4a1b      	ldr	r2, [pc, #108]	; (1e73c <sd_mmc_select_slot+0xb0>)
   1e6ce:	015b      	lsls	r3, r3, #5
   1e6d0:	18d3      	adds	r3, r2, r3
   1e6d2:	330a      	adds	r3, #10
   1e6d4:	2202      	movs	r2, #2
   1e6d6:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1e6d8:	1dfb      	adds	r3, r7, #7
   1e6da:	781a      	ldrb	r2, [r3, #0]
   1e6dc:	4b17      	ldr	r3, [pc, #92]	; (1e73c <sd_mmc_select_slot+0xb0>)
   1e6de:	0152      	lsls	r2, r2, #5
   1e6e0:	4917      	ldr	r1, [pc, #92]	; (1e740 <sd_mmc_select_slot+0xb4>)
   1e6e2:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1e6e4:	1dfb      	adds	r3, r7, #7
   1e6e6:	781b      	ldrb	r3, [r3, #0]
   1e6e8:	4a14      	ldr	r2, [pc, #80]	; (1e73c <sd_mmc_select_slot+0xb0>)
   1e6ea:	015b      	lsls	r3, r3, #5
   1e6ec:	18d3      	adds	r3, r2, r3
   1e6ee:	330d      	adds	r3, #13
   1e6f0:	2201      	movs	r2, #1
   1e6f2:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1e6f4:	1dfb      	adds	r3, r7, #7
   1e6f6:	781b      	ldrb	r3, [r3, #0]
   1e6f8:	4a10      	ldr	r2, [pc, #64]	; (1e73c <sd_mmc_select_slot+0xb0>)
   1e6fa:	015b      	lsls	r3, r3, #5
   1e6fc:	18d3      	adds	r3, r2, r3
   1e6fe:	331e      	adds	r3, #30
   1e700:	2200      	movs	r2, #0
   1e702:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1e704:	4b0f      	ldr	r3, [pc, #60]	; (1e744 <sd_mmc_select_slot+0xb8>)
   1e706:	1dfa      	adds	r2, r7, #7
   1e708:	7812      	ldrb	r2, [r2, #0]
   1e70a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1e70c:	1dfb      	adds	r3, r7, #7
   1e70e:	781b      	ldrb	r3, [r3, #0]
   1e710:	015a      	lsls	r2, r3, #5
   1e712:	4b0a      	ldr	r3, [pc, #40]	; (1e73c <sd_mmc_select_slot+0xb0>)
   1e714:	18d2      	adds	r2, r2, r3
   1e716:	4b0c      	ldr	r3, [pc, #48]	; (1e748 <sd_mmc_select_slot+0xbc>)
   1e718:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1e71a:	4b0c      	ldr	r3, [pc, #48]	; (1e74c <sd_mmc_select_slot+0xc0>)
   1e71c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1e71e:	1dfb      	adds	r3, r7, #7
   1e720:	781b      	ldrb	r3, [r3, #0]
   1e722:	4a06      	ldr	r2, [pc, #24]	; (1e73c <sd_mmc_select_slot+0xb0>)
   1e724:	015b      	lsls	r3, r3, #5
   1e726:	18d3      	adds	r3, r2, r3
   1e728:	330a      	adds	r3, #10
   1e72a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1e72c:	3b02      	subs	r3, #2
   1e72e:	425a      	negs	r2, r3
   1e730:	4153      	adcs	r3, r2
   1e732:	b2db      	uxtb	r3, r3
}
   1e734:	0018      	movs	r0, r3
   1e736:	46bd      	mov	sp, r7
   1e738:	b002      	add	sp, #8
   1e73a:	bd80      	pop	{r7, pc}
   1e73c:	20003e0c 	.word	0x20003e0c
   1e740:	00061a80 	.word	0x00061a80
   1e744:	20003e2c 	.word	0x20003e2c
   1e748:	20003e30 	.word	0x20003e30
   1e74c:	0001e751 	.word	0x0001e751

0001e750 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1e750:	b5b0      	push	{r4, r5, r7, lr}
   1e752:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e754:	4b09      	ldr	r3, [pc, #36]	; (1e77c <sd_mmc_configure_slot+0x2c>)
   1e756:	7818      	ldrb	r0, [r3, #0]
   1e758:	4b09      	ldr	r3, [pc, #36]	; (1e780 <sd_mmc_configure_slot+0x30>)
   1e75a:	681b      	ldr	r3, [r3, #0]
   1e75c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e75e:	4b08      	ldr	r3, [pc, #32]	; (1e780 <sd_mmc_configure_slot+0x30>)
   1e760:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e762:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1e764:	4b06      	ldr	r3, [pc, #24]	; (1e780 <sd_mmc_configure_slot+0x30>)
   1e766:	681b      	ldr	r3, [r3, #0]
   1e768:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1e76a:	1e5c      	subs	r4, r3, #1
   1e76c:	41a3      	sbcs	r3, r4
   1e76e:	b2db      	uxtb	r3, r3
   1e770:	4c04      	ldr	r4, [pc, #16]	; (1e784 <sd_mmc_configure_slot+0x34>)
   1e772:	47a0      	blx	r4
}
   1e774:	46c0      	nop			; (mov r8, r8)
   1e776:	46bd      	mov	sp, r7
   1e778:	bdb0      	pop	{r4, r5, r7, pc}
   1e77a:	46c0      	nop			; (mov r8, r8)
   1e77c:	20003e2c 	.word	0x20003e2c
   1e780:	20003e30 	.word	0x20003e30
   1e784:	0001f50d 	.word	0x0001f50d

0001e788 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1e788:	b580      	push	{r7, lr}
   1e78a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1e78c:	4b05      	ldr	r3, [pc, #20]	; (1e7a4 <sd_mmc_deselect_slot+0x1c>)
   1e78e:	781b      	ldrb	r3, [r3, #0]
   1e790:	2b00      	cmp	r3, #0
   1e792:	d104      	bne.n	1e79e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1e794:	4b03      	ldr	r3, [pc, #12]	; (1e7a4 <sd_mmc_deselect_slot+0x1c>)
   1e796:	781b      	ldrb	r3, [r3, #0]
   1e798:	0018      	movs	r0, r3
   1e79a:	4b03      	ldr	r3, [pc, #12]	; (1e7a8 <sd_mmc_deselect_slot+0x20>)
   1e79c:	4798      	blx	r3
	}
}
   1e79e:	46c0      	nop			; (mov r8, r8)
   1e7a0:	46bd      	mov	sp, r7
   1e7a2:	bd80      	pop	{r7, pc}
   1e7a4:	20003e2c 	.word	0x20003e2c
   1e7a8:	0001f595 	.word	0x0001f595

0001e7ac <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1e7ac:	b580      	push	{r7, lr}
   1e7ae:	b082      	sub	sp, #8
   1e7b0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1e7b2:	1dfb      	adds	r3, r7, #7
   1e7b4:	2200      	movs	r2, #0
   1e7b6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1e7b8:	4b59      	ldr	r3, [pc, #356]	; (1e920 <sd_mmc_spi_card_init+0x174>)
   1e7ba:	681b      	ldr	r3, [r3, #0]
   1e7bc:	2201      	movs	r2, #1
   1e7be:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1e7c0:	4b57      	ldr	r3, [pc, #348]	; (1e920 <sd_mmc_spi_card_init+0x174>)
   1e7c2:	681b      	ldr	r3, [r3, #0]
   1e7c4:	2200      	movs	r2, #0
   1e7c6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1e7c8:	4b55      	ldr	r3, [pc, #340]	; (1e920 <sd_mmc_spi_card_init+0x174>)
   1e7ca:	681b      	ldr	r3, [r3, #0]
   1e7cc:	2200      	movs	r2, #0
   1e7ce:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1e7d0:	4b54      	ldr	r3, [pc, #336]	; (1e924 <sd_mmc_spi_card_init+0x178>)
   1e7d2:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e7d4:	2388      	movs	r3, #136	; 0x88
   1e7d6:	015b      	lsls	r3, r3, #5
   1e7d8:	2100      	movs	r1, #0
   1e7da:	0018      	movs	r0, r3
   1e7dc:	4b52      	ldr	r3, [pc, #328]	; (1e928 <sd_mmc_spi_card_init+0x17c>)
   1e7de:	4798      	blx	r3
   1e7e0:	0003      	movs	r3, r0
   1e7e2:	001a      	movs	r2, r3
   1e7e4:	2301      	movs	r3, #1
   1e7e6:	4053      	eors	r3, r2
   1e7e8:	b2db      	uxtb	r3, r3
   1e7ea:	2b00      	cmp	r3, #0
   1e7ec:	d001      	beq.n	1e7f2 <sd_mmc_spi_card_init+0x46>
		return false;
   1e7ee:	2300      	movs	r3, #0
   1e7f0:	e092      	b.n	1e918 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1e7f2:	1dfb      	adds	r3, r7, #7
   1e7f4:	0018      	movs	r0, r3
   1e7f6:	4b4d      	ldr	r3, [pc, #308]	; (1e92c <sd_mmc_spi_card_init+0x180>)
   1e7f8:	4798      	blx	r3
   1e7fa:	0003      	movs	r3, r0
   1e7fc:	001a      	movs	r2, r3
   1e7fe:	2301      	movs	r3, #1
   1e800:	4053      	eors	r3, r2
   1e802:	b2db      	uxtb	r3, r3
   1e804:	2b00      	cmp	r3, #0
   1e806:	d001      	beq.n	1e80c <sd_mmc_spi_card_init+0x60>
		return false;
   1e808:	2300      	movs	r3, #0
   1e80a:	e085      	b.n	1e918 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1e80c:	4b48      	ldr	r3, [pc, #288]	; (1e930 <sd_mmc_spi_card_init+0x184>)
   1e80e:	4798      	blx	r3
   1e810:	0003      	movs	r3, r0
   1e812:	001a      	movs	r2, r3
   1e814:	2301      	movs	r3, #1
   1e816:	4053      	eors	r3, r2
   1e818:	b2db      	uxtb	r3, r3
   1e81a:	2b00      	cmp	r3, #0
   1e81c:	d001      	beq.n	1e822 <sd_mmc_spi_card_init+0x76>
		return false;
   1e81e:	2300      	movs	r3, #0
   1e820:	e07a      	b.n	1e918 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e822:	4b3f      	ldr	r3, [pc, #252]	; (1e920 <sd_mmc_spi_card_init+0x174>)
   1e824:	681b      	ldr	r3, [r3, #0]
   1e826:	7adb      	ldrb	r3, [r3, #11]
   1e828:	001a      	movs	r2, r3
   1e82a:	2301      	movs	r3, #1
   1e82c:	4013      	ands	r3, r2
   1e82e:	d021      	beq.n	1e874 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1e830:	1dfb      	adds	r3, r7, #7
   1e832:	781b      	ldrb	r3, [r3, #0]
   1e834:	0018      	movs	r0, r3
   1e836:	4b3f      	ldr	r3, [pc, #252]	; (1e934 <sd_mmc_spi_card_init+0x188>)
   1e838:	4798      	blx	r3
   1e83a:	0003      	movs	r3, r0
   1e83c:	001a      	movs	r2, r3
   1e83e:	2301      	movs	r3, #1
   1e840:	4053      	eors	r3, r2
   1e842:	b2db      	uxtb	r3, r3
   1e844:	2b00      	cmp	r3, #0
   1e846:	d007      	beq.n	1e858 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1e848:	4b35      	ldr	r3, [pc, #212]	; (1e920 <sd_mmc_spi_card_init+0x174>)
   1e84a:	681b      	ldr	r3, [r3, #0]
   1e84c:	2202      	movs	r2, #2
   1e84e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1e850:	4b39      	ldr	r3, [pc, #228]	; (1e938 <sd_mmc_spi_card_init+0x18c>)
   1e852:	4798      	blx	r3
   1e854:	0003      	movs	r3, r0
   1e856:	e05f      	b.n	1e918 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e858:	4b38      	ldr	r3, [pc, #224]	; (1e93c <sd_mmc_spi_card_init+0x190>)
   1e85a:	2100      	movs	r1, #0
   1e85c:	0018      	movs	r0, r3
   1e85e:	4b32      	ldr	r3, [pc, #200]	; (1e928 <sd_mmc_spi_card_init+0x17c>)
   1e860:	4798      	blx	r3
   1e862:	0003      	movs	r3, r0
   1e864:	001a      	movs	r2, r3
   1e866:	2301      	movs	r3, #1
   1e868:	4053      	eors	r3, r2
   1e86a:	b2db      	uxtb	r3, r3
   1e86c:	2b00      	cmp	r3, #0
   1e86e:	d001      	beq.n	1e874 <sd_mmc_spi_card_init+0xc8>
			return false;
   1e870:	2300      	movs	r3, #0
   1e872:	e051      	b.n	1e918 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e874:	4b2a      	ldr	r3, [pc, #168]	; (1e920 <sd_mmc_spi_card_init+0x174>)
   1e876:	681b      	ldr	r3, [r3, #0]
   1e878:	7adb      	ldrb	r3, [r3, #11]
   1e87a:	001a      	movs	r2, r3
   1e87c:	2301      	movs	r3, #1
   1e87e:	4013      	ands	r3, r2
   1e880:	d017      	beq.n	1e8b2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1e882:	4b2f      	ldr	r3, [pc, #188]	; (1e940 <sd_mmc_spi_card_init+0x194>)
   1e884:	4798      	blx	r3
   1e886:	0003      	movs	r3, r0
   1e888:	001a      	movs	r2, r3
   1e88a:	2301      	movs	r3, #1
   1e88c:	4053      	eors	r3, r2
   1e88e:	b2db      	uxtb	r3, r3
   1e890:	2b00      	cmp	r3, #0
   1e892:	d001      	beq.n	1e898 <sd_mmc_spi_card_init+0xec>
			return false;
   1e894:	2300      	movs	r3, #0
   1e896:	e03f      	b.n	1e918 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1e898:	4b2a      	ldr	r3, [pc, #168]	; (1e944 <sd_mmc_spi_card_init+0x198>)
   1e89a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1e89c:	4b2a      	ldr	r3, [pc, #168]	; (1e948 <sd_mmc_spi_card_init+0x19c>)
   1e89e:	4798      	blx	r3
   1e8a0:	0003      	movs	r3, r0
   1e8a2:	001a      	movs	r2, r3
   1e8a4:	2301      	movs	r3, #1
   1e8a6:	4053      	eors	r3, r2
   1e8a8:	b2db      	uxtb	r3, r3
   1e8aa:	2b00      	cmp	r3, #0
   1e8ac:	d001      	beq.n	1e8b2 <sd_mmc_spi_card_init+0x106>
			return false;
   1e8ae:	2300      	movs	r3, #0
   1e8b0:	e032      	b.n	1e918 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e8b2:	4b1b      	ldr	r3, [pc, #108]	; (1e920 <sd_mmc_spi_card_init+0x174>)
   1e8b4:	681b      	ldr	r3, [r3, #0]
   1e8b6:	7adb      	ldrb	r3, [r3, #11]
   1e8b8:	001a      	movs	r2, r3
   1e8ba:	2301      	movs	r3, #1
   1e8bc:	4013      	ands	r3, r2
   1e8be:	d016      	beq.n	1e8ee <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1e8c0:	4b17      	ldr	r3, [pc, #92]	; (1e920 <sd_mmc_spi_card_init+0x174>)
   1e8c2:	681b      	ldr	r3, [r3, #0]
   1e8c4:	7adb      	ldrb	r3, [r3, #11]
   1e8c6:	001a      	movs	r2, r3
   1e8c8:	2308      	movs	r3, #8
   1e8ca:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1e8cc:	d10f      	bne.n	1e8ee <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e8ce:	2380      	movs	r3, #128	; 0x80
   1e8d0:	009b      	lsls	r3, r3, #2
   1e8d2:	4a1e      	ldr	r2, [pc, #120]	; (1e94c <sd_mmc_spi_card_init+0x1a0>)
   1e8d4:	0019      	movs	r1, r3
   1e8d6:	0010      	movs	r0, r2
   1e8d8:	4b13      	ldr	r3, [pc, #76]	; (1e928 <sd_mmc_spi_card_init+0x17c>)
   1e8da:	4798      	blx	r3
   1e8dc:	0003      	movs	r3, r0
   1e8de:	001a      	movs	r2, r3
   1e8e0:	2301      	movs	r3, #1
   1e8e2:	4053      	eors	r3, r2
   1e8e4:	b2db      	uxtb	r3, r3
   1e8e6:	2b00      	cmp	r3, #0
   1e8e8:	d001      	beq.n	1e8ee <sd_mmc_spi_card_init+0x142>
			return false;
   1e8ea:	2300      	movs	r3, #0
   1e8ec:	e014      	b.n	1e918 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1e8ee:	4b0c      	ldr	r3, [pc, #48]	; (1e920 <sd_mmc_spi_card_init+0x174>)
   1e8f0:	681b      	ldr	r3, [r3, #0]
   1e8f2:	7adb      	ldrb	r3, [r3, #11]
   1e8f4:	001a      	movs	r2, r3
   1e8f6:	2301      	movs	r3, #1
   1e8f8:	4013      	ands	r3, r2
   1e8fa:	d00a      	beq.n	1e912 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1e8fc:	4b14      	ldr	r3, [pc, #80]	; (1e950 <sd_mmc_spi_card_init+0x1a4>)
   1e8fe:	4798      	blx	r3
   1e900:	0003      	movs	r3, r0
   1e902:	001a      	movs	r2, r3
   1e904:	2301      	movs	r3, #1
   1e906:	4053      	eors	r3, r2
   1e908:	b2db      	uxtb	r3, r3
   1e90a:	2b00      	cmp	r3, #0
   1e90c:	d001      	beq.n	1e912 <sd_mmc_spi_card_init+0x166>
			return false;
   1e90e:	2300      	movs	r3, #0
   1e910:	e002      	b.n	1e918 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1e912:	4b10      	ldr	r3, [pc, #64]	; (1e954 <sd_mmc_spi_card_init+0x1a8>)
   1e914:	4798      	blx	r3
	return true;
   1e916:	2301      	movs	r3, #1
}
   1e918:	0018      	movs	r0, r3
   1e91a:	46bd      	mov	sp, r7
   1e91c:	b002      	add	sp, #8
   1e91e:	bd80      	pop	{r7, pc}
   1e920:	20003e30 	.word	0x20003e30
   1e924:	0001f5d9 	.word	0x0001f5d9
   1e928:	0001f625 	.word	0x0001f625
   1e92c:	0001e101 	.word	0x0001e101
   1e930:	0001e0f5 	.word	0x0001e0f5
   1e934:	0001e011 	.word	0x0001e011
   1e938:	0001e959 	.word	0x0001e959
   1e93c:	0000113b 	.word	0x0000113b
   1e940:	0001e29d 	.word	0x0001e29d
   1e944:	0001e43d 	.word	0x0001e43d
   1e948:	0001e585 	.word	0x0001e585
   1e94c:	00001110 	.word	0x00001110
   1e950:	0001e529 	.word	0x0001e529
   1e954:	0001e751 	.word	0x0001e751

0001e958 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1e958:	b580      	push	{r7, lr}
   1e95a:	b082      	sub	sp, #8
   1e95c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1e95e:	2388      	movs	r3, #136	; 0x88
   1e960:	015b      	lsls	r3, r3, #5
   1e962:	2100      	movs	r1, #0
   1e964:	0018      	movs	r0, r3
   1e966:	4b32      	ldr	r3, [pc, #200]	; (1ea30 <sd_mmc_spi_install_mmc+0xd8>)
   1e968:	4798      	blx	r3
   1e96a:	0003      	movs	r3, r0
   1e96c:	001a      	movs	r2, r3
   1e96e:	2301      	movs	r3, #1
   1e970:	4053      	eors	r3, r2
   1e972:	b2db      	uxtb	r3, r3
   1e974:	2b00      	cmp	r3, #0
   1e976:	d001      	beq.n	1e97c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1e978:	2300      	movs	r3, #0
   1e97a:	e055      	b.n	1ea28 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1e97c:	4b2d      	ldr	r3, [pc, #180]	; (1ea34 <sd_mmc_spi_install_mmc+0xdc>)
   1e97e:	4798      	blx	r3
   1e980:	0003      	movs	r3, r0
   1e982:	001a      	movs	r2, r3
   1e984:	2301      	movs	r3, #1
   1e986:	4053      	eors	r3, r2
   1e988:	b2db      	uxtb	r3, r3
   1e98a:	2b00      	cmp	r3, #0
   1e98c:	d001      	beq.n	1e992 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1e98e:	2300      	movs	r3, #0
   1e990:	e04a      	b.n	1ea28 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1e992:	4b29      	ldr	r3, [pc, #164]	; (1ea38 <sd_mmc_spi_install_mmc+0xe0>)
   1e994:	2100      	movs	r1, #0
   1e996:	0018      	movs	r0, r3
   1e998:	4b25      	ldr	r3, [pc, #148]	; (1ea30 <sd_mmc_spi_install_mmc+0xd8>)
   1e99a:	4798      	blx	r3
   1e99c:	0003      	movs	r3, r0
   1e99e:	001a      	movs	r2, r3
   1e9a0:	2301      	movs	r3, #1
   1e9a2:	4053      	eors	r3, r2
   1e9a4:	b2db      	uxtb	r3, r3
   1e9a6:	2b00      	cmp	r3, #0
   1e9a8:	d001      	beq.n	1e9ae <sd_mmc_spi_install_mmc+0x56>
		return false;
   1e9aa:	2300      	movs	r3, #0
   1e9ac:	e03c      	b.n	1ea28 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1e9ae:	4b23      	ldr	r3, [pc, #140]	; (1ea3c <sd_mmc_spi_install_mmc+0xe4>)
   1e9b0:	4798      	blx	r3
   1e9b2:	0003      	movs	r3, r0
   1e9b4:	001a      	movs	r2, r3
   1e9b6:	2301      	movs	r3, #1
   1e9b8:	4053      	eors	r3, r2
   1e9ba:	b2db      	uxtb	r3, r3
   1e9bc:	2b00      	cmp	r3, #0
   1e9be:	d001      	beq.n	1e9c4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1e9c0:	2300      	movs	r3, #0
   1e9c2:	e031      	b.n	1ea28 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1e9c4:	4b1e      	ldr	r3, [pc, #120]	; (1ea40 <sd_mmc_spi_install_mmc+0xe8>)
   1e9c6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1e9c8:	4b1e      	ldr	r3, [pc, #120]	; (1ea44 <sd_mmc_spi_install_mmc+0xec>)
   1e9ca:	681b      	ldr	r3, [r3, #0]
   1e9cc:	7b1b      	ldrb	r3, [r3, #12]
   1e9ce:	2b3f      	cmp	r3, #63	; 0x3f
   1e9d0:	d90c      	bls.n	1e9ec <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1e9d2:	1dfb      	adds	r3, r7, #7
   1e9d4:	0018      	movs	r0, r3
   1e9d6:	4b1c      	ldr	r3, [pc, #112]	; (1ea48 <sd_mmc_spi_install_mmc+0xf0>)
   1e9d8:	4798      	blx	r3
   1e9da:	0003      	movs	r3, r0
   1e9dc:	001a      	movs	r2, r3
   1e9de:	2301      	movs	r3, #1
   1e9e0:	4053      	eors	r3, r2
   1e9e2:	b2db      	uxtb	r3, r3
   1e9e4:	2b00      	cmp	r3, #0
   1e9e6:	d001      	beq.n	1e9ec <sd_mmc_spi_install_mmc+0x94>
			return false;
   1e9e8:	2300      	movs	r3, #0
   1e9ea:	e01d      	b.n	1ea28 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1e9ec:	2380      	movs	r3, #128	; 0x80
   1e9ee:	009b      	lsls	r3, r3, #2
   1e9f0:	4a16      	ldr	r2, [pc, #88]	; (1ea4c <sd_mmc_spi_install_mmc+0xf4>)
   1e9f2:	0019      	movs	r1, r3
   1e9f4:	0010      	movs	r0, r2
   1e9f6:	4b0e      	ldr	r3, [pc, #56]	; (1ea30 <sd_mmc_spi_install_mmc+0xd8>)
   1e9f8:	4798      	blx	r3
   1e9fa:	0003      	movs	r3, r0
   1e9fc:	001a      	movs	r2, r3
   1e9fe:	2301      	movs	r3, #1
   1ea00:	4053      	eors	r3, r2
   1ea02:	b2db      	uxtb	r3, r3
   1ea04:	2b00      	cmp	r3, #0
   1ea06:	d001      	beq.n	1ea0c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1ea08:	2300      	movs	r3, #0
   1ea0a:	e00d      	b.n	1ea28 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1ea0c:	4b10      	ldr	r3, [pc, #64]	; (1ea50 <sd_mmc_spi_install_mmc+0xf8>)
   1ea0e:	4798      	blx	r3
   1ea10:	0003      	movs	r3, r0
   1ea12:	001a      	movs	r2, r3
   1ea14:	2301      	movs	r3, #1
   1ea16:	4053      	eors	r3, r2
   1ea18:	b2db      	uxtb	r3, r3
   1ea1a:	2b00      	cmp	r3, #0
   1ea1c:	d001      	beq.n	1ea22 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1ea1e:	2300      	movs	r3, #0
   1ea20:	e002      	b.n	1ea28 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1ea22:	4b0c      	ldr	r3, [pc, #48]	; (1ea54 <sd_mmc_spi_install_mmc+0xfc>)
   1ea24:	4798      	blx	r3
	return true;
   1ea26:	2301      	movs	r3, #1
}
   1ea28:	0018      	movs	r0, r3
   1ea2a:	46bd      	mov	sp, r7
   1ea2c:	b002      	add	sp, #8
   1ea2e:	bd80      	pop	{r7, pc}
   1ea30:	0001f625 	.word	0x0001f625
   1ea34:	0001df65 	.word	0x0001df65
   1ea38:	0000113b 	.word	0x0000113b
   1ea3c:	0001e29d 	.word	0x0001e29d
   1ea40:	0001e30d 	.word	0x0001e30d
   1ea44:	20003e30 	.word	0x20003e30
   1ea48:	0001e171 	.word	0x0001e171
   1ea4c:	00001110 	.word	0x00001110
   1ea50:	0001e529 	.word	0x0001e529
   1ea54:	0001e751 	.word	0x0001e751

0001ea58 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1ea58:	b590      	push	{r4, r7, lr}
   1ea5a:	b085      	sub	sp, #20
   1ea5c:	af00      	add	r7, sp, #0
   1ea5e:	0002      	movs	r2, r0
   1ea60:	1dfb      	adds	r3, r7, #7
   1ea62:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ea64:	230f      	movs	r3, #15
   1ea66:	18fc      	adds	r4, r7, r3
   1ea68:	1dfb      	adds	r3, r7, #7
   1ea6a:	781b      	ldrb	r3, [r3, #0]
   1ea6c:	0018      	movs	r0, r3
   1ea6e:	4b13      	ldr	r3, [pc, #76]	; (1eabc <sd_mmc_check+0x64>)
   1ea70:	4798      	blx	r3
   1ea72:	0003      	movs	r3, r0
   1ea74:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1ea76:	230f      	movs	r3, #15
   1ea78:	18fb      	adds	r3, r7, r3
   1ea7a:	781b      	ldrb	r3, [r3, #0]
   1ea7c:	2b01      	cmp	r3, #1
   1ea7e:	d005      	beq.n	1ea8c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1ea80:	4b0f      	ldr	r3, [pc, #60]	; (1eac0 <sd_mmc_check+0x68>)
   1ea82:	4798      	blx	r3
		return sd_mmc_err;
   1ea84:	230f      	movs	r3, #15
   1ea86:	18fb      	adds	r3, r7, r3
   1ea88:	781b      	ldrb	r3, [r3, #0]
   1ea8a:	e012      	b.n	1eab2 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1ea8c:	4b0d      	ldr	r3, [pc, #52]	; (1eac4 <sd_mmc_check+0x6c>)
   1ea8e:	4798      	blx	r3
   1ea90:	1e03      	subs	r3, r0, #0
   1ea92:	d007      	beq.n	1eaa4 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1ea94:	4b0c      	ldr	r3, [pc, #48]	; (1eac8 <sd_mmc_check+0x70>)
   1ea96:	681b      	ldr	r3, [r3, #0]
   1ea98:	2200      	movs	r2, #0
   1ea9a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1ea9c:	4b08      	ldr	r3, [pc, #32]	; (1eac0 <sd_mmc_check+0x68>)
   1ea9e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1eaa0:	2301      	movs	r3, #1
   1eaa2:	e006      	b.n	1eab2 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1eaa4:	4b08      	ldr	r3, [pc, #32]	; (1eac8 <sd_mmc_check+0x70>)
   1eaa6:	681b      	ldr	r3, [r3, #0]
   1eaa8:	2203      	movs	r2, #3
   1eaaa:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1eaac:	4b04      	ldr	r3, [pc, #16]	; (1eac0 <sd_mmc_check+0x68>)
   1eaae:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1eab0:	2303      	movs	r3, #3
}
   1eab2:	0018      	movs	r0, r3
   1eab4:	46bd      	mov	sp, r7
   1eab6:	b005      	add	sp, #20
   1eab8:	bd90      	pop	{r4, r7, pc}
   1eaba:	46c0      	nop			; (mov r8, r8)
   1eabc:	0001e68d 	.word	0x0001e68d
   1eac0:	0001e789 	.word	0x0001e789
   1eac4:	0001e7ad 	.word	0x0001e7ad
   1eac8:	20003e30 	.word	0x20003e30

0001eacc <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1eacc:	b580      	push	{r7, lr}
   1eace:	b082      	sub	sp, #8
   1ead0:	af00      	add	r7, sp, #0
   1ead2:	0002      	movs	r2, r0
   1ead4:	1dfb      	adds	r3, r7, #7
   1ead6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1ead8:	1dfb      	adds	r3, r7, #7
   1eada:	781b      	ldrb	r3, [r3, #0]
   1eadc:	0018      	movs	r0, r3
   1eade:	4b07      	ldr	r3, [pc, #28]	; (1eafc <sd_mmc_get_type+0x30>)
   1eae0:	4798      	blx	r3
   1eae2:	1e03      	subs	r3, r0, #0
   1eae4:	d001      	beq.n	1eaea <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1eae6:	2300      	movs	r3, #0
   1eae8:	e004      	b.n	1eaf4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1eaea:	4b05      	ldr	r3, [pc, #20]	; (1eb00 <sd_mmc_get_type+0x34>)
   1eaec:	4798      	blx	r3
	return sd_mmc_card->type;
   1eaee:	4b05      	ldr	r3, [pc, #20]	; (1eb04 <sd_mmc_get_type+0x38>)
   1eaf0:	681b      	ldr	r3, [r3, #0]
   1eaf2:	7adb      	ldrb	r3, [r3, #11]
}
   1eaf4:	0018      	movs	r0, r3
   1eaf6:	46bd      	mov	sp, r7
   1eaf8:	b002      	add	sp, #8
   1eafa:	bd80      	pop	{r7, pc}
   1eafc:	0001e68d 	.word	0x0001e68d
   1eb00:	0001e789 	.word	0x0001e789
   1eb04:	20003e30 	.word	0x20003e30

0001eb08 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1eb08:	b580      	push	{r7, lr}
   1eb0a:	b082      	sub	sp, #8
   1eb0c:	af00      	add	r7, sp, #0
   1eb0e:	0002      	movs	r2, r0
   1eb10:	1dfb      	adds	r3, r7, #7
   1eb12:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1eb14:	1dfb      	adds	r3, r7, #7
   1eb16:	781b      	ldrb	r3, [r3, #0]
   1eb18:	0018      	movs	r0, r3
   1eb1a:	4b07      	ldr	r3, [pc, #28]	; (1eb38 <sd_mmc_get_capacity+0x30>)
   1eb1c:	4798      	blx	r3
   1eb1e:	1e03      	subs	r3, r0, #0
   1eb20:	d001      	beq.n	1eb26 <sd_mmc_get_capacity+0x1e>
		return 0;
   1eb22:	2300      	movs	r3, #0
   1eb24:	e004      	b.n	1eb30 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1eb26:	4b05      	ldr	r3, [pc, #20]	; (1eb3c <sd_mmc_get_capacity+0x34>)
   1eb28:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1eb2a:	4b05      	ldr	r3, [pc, #20]	; (1eb40 <sd_mmc_get_capacity+0x38>)
   1eb2c:	681b      	ldr	r3, [r3, #0]
   1eb2e:	685b      	ldr	r3, [r3, #4]
}
   1eb30:	0018      	movs	r0, r3
   1eb32:	46bd      	mov	sp, r7
   1eb34:	b002      	add	sp, #8
   1eb36:	bd80      	pop	{r7, pc}
   1eb38:	0001e68d 	.word	0x0001e68d
   1eb3c:	0001e789 	.word	0x0001e789
   1eb40:	20003e30 	.word	0x20003e30

0001eb44 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1eb44:	b580      	push	{r7, lr}
   1eb46:	b082      	sub	sp, #8
   1eb48:	af00      	add	r7, sp, #0
   1eb4a:	0002      	movs	r2, r0
   1eb4c:	1dfb      	adds	r3, r7, #7
   1eb4e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1eb50:	2300      	movs	r3, #0
}
   1eb52:	0018      	movs	r0, r3
   1eb54:	46bd      	mov	sp, r7
   1eb56:	b002      	add	sp, #8
   1eb58:	bd80      	pop	{r7, pc}
	...

0001eb5c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1eb5c:	b590      	push	{r4, r7, lr}
   1eb5e:	b089      	sub	sp, #36	; 0x24
   1eb60:	af02      	add	r7, sp, #8
   1eb62:	6039      	str	r1, [r7, #0]
   1eb64:	0011      	movs	r1, r2
   1eb66:	1dfb      	adds	r3, r7, #7
   1eb68:	1c02      	adds	r2, r0, #0
   1eb6a:	701a      	strb	r2, [r3, #0]
   1eb6c:	1d3b      	adds	r3, r7, #4
   1eb6e:	1c0a      	adds	r2, r1, #0
   1eb70:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1eb72:	230f      	movs	r3, #15
   1eb74:	18fc      	adds	r4, r7, r3
   1eb76:	1dfb      	adds	r3, r7, #7
   1eb78:	781b      	ldrb	r3, [r3, #0]
   1eb7a:	0018      	movs	r0, r3
   1eb7c:	4b29      	ldr	r3, [pc, #164]	; (1ec24 <sd_mmc_init_read_blocks+0xc8>)
   1eb7e:	4798      	blx	r3
   1eb80:	0003      	movs	r3, r0
   1eb82:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1eb84:	230f      	movs	r3, #15
   1eb86:	18fb      	adds	r3, r7, r3
   1eb88:	781b      	ldrb	r3, [r3, #0]
   1eb8a:	2b00      	cmp	r3, #0
   1eb8c:	d003      	beq.n	1eb96 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1eb8e:	230f      	movs	r3, #15
   1eb90:	18fb      	adds	r3, r7, r3
   1eb92:	781b      	ldrb	r3, [r3, #0]
   1eb94:	e041      	b.n	1ec1a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1eb96:	4b24      	ldr	r3, [pc, #144]	; (1ec28 <sd_mmc_init_read_blocks+0xcc>)
   1eb98:	4798      	blx	r3
   1eb9a:	0003      	movs	r3, r0
   1eb9c:	001a      	movs	r2, r3
   1eb9e:	2301      	movs	r3, #1
   1eba0:	4053      	eors	r3, r2
   1eba2:	b2db      	uxtb	r3, r3
   1eba4:	2b00      	cmp	r3, #0
   1eba6:	d003      	beq.n	1ebb0 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1eba8:	4b20      	ldr	r3, [pc, #128]	; (1ec2c <sd_mmc_init_read_blocks+0xd0>)
   1ebaa:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ebac:	2305      	movs	r3, #5
   1ebae:	e034      	b.n	1ec1a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1ebb0:	1d3b      	adds	r3, r7, #4
   1ebb2:	881b      	ldrh	r3, [r3, #0]
   1ebb4:	2b01      	cmp	r3, #1
   1ebb6:	d902      	bls.n	1ebbe <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1ebb8:	4b1d      	ldr	r3, [pc, #116]	; (1ec30 <sd_mmc_init_read_blocks+0xd4>)
   1ebba:	617b      	str	r3, [r7, #20]
   1ebbc:	e001      	b.n	1ebc2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1ebbe:	4b1d      	ldr	r3, [pc, #116]	; (1ec34 <sd_mmc_init_read_blocks+0xd8>)
   1ebc0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1ebc2:	4b1d      	ldr	r3, [pc, #116]	; (1ec38 <sd_mmc_init_read_blocks+0xdc>)
   1ebc4:	681b      	ldr	r3, [r3, #0]
   1ebc6:	7adb      	ldrb	r3, [r3, #11]
   1ebc8:	001a      	movs	r2, r3
   1ebca:	2308      	movs	r3, #8
   1ebcc:	4013      	ands	r3, r2
   1ebce:	d002      	beq.n	1ebd6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1ebd0:	683b      	ldr	r3, [r7, #0]
   1ebd2:	613b      	str	r3, [r7, #16]
   1ebd4:	e002      	b.n	1ebdc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1ebd6:	683b      	ldr	r3, [r7, #0]
   1ebd8:	025b      	lsls	r3, r3, #9
   1ebda:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1ebdc:	1d3b      	adds	r3, r7, #4
   1ebde:	881c      	ldrh	r4, [r3, #0]
   1ebe0:	2380      	movs	r3, #128	; 0x80
   1ebe2:	009a      	lsls	r2, r3, #2
   1ebe4:	6939      	ldr	r1, [r7, #16]
   1ebe6:	6978      	ldr	r0, [r7, #20]
   1ebe8:	2301      	movs	r3, #1
   1ebea:	9300      	str	r3, [sp, #0]
   1ebec:	0023      	movs	r3, r4
   1ebee:	4c13      	ldr	r4, [pc, #76]	; (1ec3c <sd_mmc_init_read_blocks+0xe0>)
   1ebf0:	47a0      	blx	r4
   1ebf2:	0003      	movs	r3, r0
   1ebf4:	001a      	movs	r2, r3
   1ebf6:	2301      	movs	r3, #1
   1ebf8:	4053      	eors	r3, r2
   1ebfa:	b2db      	uxtb	r3, r3
   1ebfc:	2b00      	cmp	r3, #0
   1ebfe:	d003      	beq.n	1ec08 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1ec00:	4b0a      	ldr	r3, [pc, #40]	; (1ec2c <sd_mmc_init_read_blocks+0xd0>)
   1ec02:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1ec04:	2305      	movs	r3, #5
   1ec06:	e008      	b.n	1ec1a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1ec08:	4b0d      	ldr	r3, [pc, #52]	; (1ec40 <sd_mmc_init_read_blocks+0xe4>)
   1ec0a:	1d3a      	adds	r2, r7, #4
   1ec0c:	8812      	ldrh	r2, [r2, #0]
   1ec0e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1ec10:	4b0c      	ldr	r3, [pc, #48]	; (1ec44 <sd_mmc_init_read_blocks+0xe8>)
   1ec12:	1d3a      	adds	r2, r7, #4
   1ec14:	8812      	ldrh	r2, [r2, #0]
   1ec16:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ec18:	2300      	movs	r3, #0
}
   1ec1a:	0018      	movs	r0, r3
   1ec1c:	46bd      	mov	sp, r7
   1ec1e:	b007      	add	sp, #28
   1ec20:	bd90      	pop	{r4, r7, pc}
   1ec22:	46c0      	nop			; (mov r8, r8)
   1ec24:	0001e68d 	.word	0x0001e68d
   1ec28:	0001e529 	.word	0x0001e529
   1ec2c:	0001e789 	.word	0x0001e789
   1ec30:	00101112 	.word	0x00101112
   1ec34:	00081111 	.word	0x00081111
   1ec38:	20003e30 	.word	0x20003e30
   1ec3c:	0001f64d 	.word	0x0001f64d
   1ec40:	20003e36 	.word	0x20003e36
   1ec44:	20003e34 	.word	0x20003e34

0001ec48 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1ec48:	b580      	push	{r7, lr}
   1ec4a:	b082      	sub	sp, #8
   1ec4c:	af00      	add	r7, sp, #0
   1ec4e:	6078      	str	r0, [r7, #4]
   1ec50:	000a      	movs	r2, r1
   1ec52:	1cbb      	adds	r3, r7, #2
   1ec54:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1ec56:	1cbb      	adds	r3, r7, #2
   1ec58:	881a      	ldrh	r2, [r3, #0]
   1ec5a:	687b      	ldr	r3, [r7, #4]
   1ec5c:	0011      	movs	r1, r2
   1ec5e:	0018      	movs	r0, r3
   1ec60:	4b0d      	ldr	r3, [pc, #52]	; (1ec98 <sd_mmc_start_read_blocks+0x50>)
   1ec62:	4798      	blx	r3
   1ec64:	0003      	movs	r3, r0
   1ec66:	001a      	movs	r2, r3
   1ec68:	2301      	movs	r3, #1
   1ec6a:	4053      	eors	r3, r2
   1ec6c:	b2db      	uxtb	r3, r3
   1ec6e:	2b00      	cmp	r3, #0
   1ec70:	d004      	beq.n	1ec7c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ec72:	4b0a      	ldr	r3, [pc, #40]	; (1ec9c <sd_mmc_start_read_blocks+0x54>)
   1ec74:	2200      	movs	r2, #0
   1ec76:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ec78:	2305      	movs	r3, #5
   1ec7a:	e008      	b.n	1ec8e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ec7c:	4b07      	ldr	r3, [pc, #28]	; (1ec9c <sd_mmc_start_read_blocks+0x54>)
   1ec7e:	881a      	ldrh	r2, [r3, #0]
   1ec80:	1cbb      	adds	r3, r7, #2
   1ec82:	881b      	ldrh	r3, [r3, #0]
   1ec84:	1ad3      	subs	r3, r2, r3
   1ec86:	b29a      	uxth	r2, r3
   1ec88:	4b04      	ldr	r3, [pc, #16]	; (1ec9c <sd_mmc_start_read_blocks+0x54>)
   1ec8a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ec8c:	2300      	movs	r3, #0
}
   1ec8e:	0018      	movs	r0, r3
   1ec90:	46bd      	mov	sp, r7
   1ec92:	b002      	add	sp, #8
   1ec94:	bd80      	pop	{r7, pc}
   1ec96:	46c0      	nop			; (mov r8, r8)
   1ec98:	0001f91d 	.word	0x0001f91d
   1ec9c:	20003e36 	.word	0x20003e36

0001eca0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1eca0:	b580      	push	{r7, lr}
   1eca2:	b082      	sub	sp, #8
   1eca4:	af00      	add	r7, sp, #0
   1eca6:	0002      	movs	r2, r0
   1eca8:	1dfb      	adds	r3, r7, #7
   1ecaa:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1ecac:	4b1c      	ldr	r3, [pc, #112]	; (1ed20 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1ecae:	4798      	blx	r3
   1ecb0:	0003      	movs	r3, r0
   1ecb2:	001a      	movs	r2, r3
   1ecb4:	2301      	movs	r3, #1
   1ecb6:	4053      	eors	r3, r2
   1ecb8:	b2db      	uxtb	r3, r3
   1ecba:	2b00      	cmp	r3, #0
   1ecbc:	d001      	beq.n	1ecc2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ecbe:	2305      	movs	r3, #5
   1ecc0:	e029      	b.n	1ed16 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1ecc2:	1dfb      	adds	r3, r7, #7
   1ecc4:	781b      	ldrb	r3, [r3, #0]
   1ecc6:	2b00      	cmp	r3, #0
   1ecc8:	d003      	beq.n	1ecd2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ecca:	4b16      	ldr	r3, [pc, #88]	; (1ed24 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1eccc:	2200      	movs	r2, #0
   1ecce:	801a      	strh	r2, [r3, #0]
   1ecd0:	e005      	b.n	1ecde <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ecd2:	4b14      	ldr	r3, [pc, #80]	; (1ed24 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1ecd4:	881b      	ldrh	r3, [r3, #0]
   1ecd6:	2b00      	cmp	r3, #0
   1ecd8:	d001      	beq.n	1ecde <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1ecda:	2300      	movs	r3, #0
   1ecdc:	e01b      	b.n	1ed16 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ecde:	4b12      	ldr	r3, [pc, #72]	; (1ed28 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1ece0:	881b      	ldrh	r3, [r3, #0]
   1ece2:	2b01      	cmp	r3, #1
   1ece4:	d103      	bne.n	1ecee <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ece6:	4b11      	ldr	r3, [pc, #68]	; (1ed2c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1ece8:	4798      	blx	r3
		return SD_MMC_OK;
   1ecea:	2300      	movs	r3, #0
   1ecec:	e013      	b.n	1ed16 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1ecee:	4b10      	ldr	r3, [pc, #64]	; (1ed30 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1ecf0:	2100      	movs	r1, #0
   1ecf2:	0018      	movs	r0, r3
   1ecf4:	4b0f      	ldr	r3, [pc, #60]	; (1ed34 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1ecf6:	4798      	blx	r3
   1ecf8:	0003      	movs	r3, r0
   1ecfa:	001a      	movs	r2, r3
   1ecfc:	2301      	movs	r3, #1
   1ecfe:	4053      	eors	r3, r2
   1ed00:	b2db      	uxtb	r3, r3
   1ed02:	2b00      	cmp	r3, #0
   1ed04:	d004      	beq.n	1ed10 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1ed06:	4b0a      	ldr	r3, [pc, #40]	; (1ed30 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1ed08:	2100      	movs	r1, #0
   1ed0a:	0018      	movs	r0, r3
   1ed0c:	4b09      	ldr	r3, [pc, #36]	; (1ed34 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1ed0e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1ed10:	4b06      	ldr	r3, [pc, #24]	; (1ed2c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1ed12:	4798      	blx	r3
	return SD_MMC_OK;
   1ed14:	2300      	movs	r3, #0
}
   1ed16:	0018      	movs	r0, r3
   1ed18:	46bd      	mov	sp, r7
   1ed1a:	b002      	add	sp, #8
   1ed1c:	bd80      	pop	{r7, pc}
   1ed1e:	46c0      	nop			; (mov r8, r8)
   1ed20:	0001f9c1 	.word	0x0001f9c1
   1ed24:	20003e36 	.word	0x20003e36
   1ed28:	20003e34 	.word	0x20003e34
   1ed2c:	0001e789 	.word	0x0001e789
   1ed30:	0000310c 	.word	0x0000310c
   1ed34:	0001f625 	.word	0x0001f625

0001ed38 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1ed38:	b590      	push	{r4, r7, lr}
   1ed3a:	b089      	sub	sp, #36	; 0x24
   1ed3c:	af02      	add	r7, sp, #8
   1ed3e:	6039      	str	r1, [r7, #0]
   1ed40:	0011      	movs	r1, r2
   1ed42:	1dfb      	adds	r3, r7, #7
   1ed44:	1c02      	adds	r2, r0, #0
   1ed46:	701a      	strb	r2, [r3, #0]
   1ed48:	1d3b      	adds	r3, r7, #4
   1ed4a:	1c0a      	adds	r2, r1, #0
   1ed4c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1ed4e:	230f      	movs	r3, #15
   1ed50:	18fc      	adds	r4, r7, r3
   1ed52:	1dfb      	adds	r3, r7, #7
   1ed54:	781b      	ldrb	r3, [r3, #0]
   1ed56:	0018      	movs	r0, r3
   1ed58:	4b28      	ldr	r3, [pc, #160]	; (1edfc <sd_mmc_init_write_blocks+0xc4>)
   1ed5a:	4798      	blx	r3
   1ed5c:	0003      	movs	r3, r0
   1ed5e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1ed60:	230f      	movs	r3, #15
   1ed62:	18fb      	adds	r3, r7, r3
   1ed64:	781b      	ldrb	r3, [r3, #0]
   1ed66:	2b00      	cmp	r3, #0
   1ed68:	d003      	beq.n	1ed72 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1ed6a:	230f      	movs	r3, #15
   1ed6c:	18fb      	adds	r3, r7, r3
   1ed6e:	781b      	ldrb	r3, [r3, #0]
   1ed70:	e03f      	b.n	1edf2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1ed72:	1dfb      	adds	r3, r7, #7
   1ed74:	781b      	ldrb	r3, [r3, #0]
   1ed76:	0018      	movs	r0, r3
   1ed78:	4b21      	ldr	r3, [pc, #132]	; (1ee00 <sd_mmc_init_write_blocks+0xc8>)
   1ed7a:	4798      	blx	r3
   1ed7c:	1e03      	subs	r3, r0, #0
   1ed7e:	d003      	beq.n	1ed88 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1ed80:	4b20      	ldr	r3, [pc, #128]	; (1ee04 <sd_mmc_init_write_blocks+0xcc>)
   1ed82:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1ed84:	2307      	movs	r3, #7
   1ed86:	e034      	b.n	1edf2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1ed88:	1d3b      	adds	r3, r7, #4
   1ed8a:	881b      	ldrh	r3, [r3, #0]
   1ed8c:	2b01      	cmp	r3, #1
   1ed8e:	d902      	bls.n	1ed96 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1ed90:	4b1d      	ldr	r3, [pc, #116]	; (1ee08 <sd_mmc_init_write_blocks+0xd0>)
   1ed92:	617b      	str	r3, [r7, #20]
   1ed94:	e001      	b.n	1ed9a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1ed96:	4b1d      	ldr	r3, [pc, #116]	; (1ee0c <sd_mmc_init_write_blocks+0xd4>)
   1ed98:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1ed9a:	4b1d      	ldr	r3, [pc, #116]	; (1ee10 <sd_mmc_init_write_blocks+0xd8>)
   1ed9c:	681b      	ldr	r3, [r3, #0]
   1ed9e:	7adb      	ldrb	r3, [r3, #11]
   1eda0:	001a      	movs	r2, r3
   1eda2:	2308      	movs	r3, #8
   1eda4:	4013      	ands	r3, r2
   1eda6:	d002      	beq.n	1edae <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1eda8:	683b      	ldr	r3, [r7, #0]
   1edaa:	613b      	str	r3, [r7, #16]
   1edac:	e002      	b.n	1edb4 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1edae:	683b      	ldr	r3, [r7, #0]
   1edb0:	025b      	lsls	r3, r3, #9
   1edb2:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1edb4:	1d3b      	adds	r3, r7, #4
   1edb6:	881c      	ldrh	r4, [r3, #0]
   1edb8:	2380      	movs	r3, #128	; 0x80
   1edba:	009a      	lsls	r2, r3, #2
   1edbc:	6939      	ldr	r1, [r7, #16]
   1edbe:	6978      	ldr	r0, [r7, #20]
   1edc0:	2301      	movs	r3, #1
   1edc2:	9300      	str	r3, [sp, #0]
   1edc4:	0023      	movs	r3, r4
   1edc6:	4c13      	ldr	r4, [pc, #76]	; (1ee14 <sd_mmc_init_write_blocks+0xdc>)
   1edc8:	47a0      	blx	r4
   1edca:	0003      	movs	r3, r0
   1edcc:	001a      	movs	r2, r3
   1edce:	2301      	movs	r3, #1
   1edd0:	4053      	eors	r3, r2
   1edd2:	b2db      	uxtb	r3, r3
   1edd4:	2b00      	cmp	r3, #0
   1edd6:	d003      	beq.n	1ede0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1edd8:	4b0a      	ldr	r3, [pc, #40]	; (1ee04 <sd_mmc_init_write_blocks+0xcc>)
   1edda:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1eddc:	2305      	movs	r3, #5
   1edde:	e008      	b.n	1edf2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1ede0:	4b0d      	ldr	r3, [pc, #52]	; (1ee18 <sd_mmc_init_write_blocks+0xe0>)
   1ede2:	1d3a      	adds	r2, r7, #4
   1ede4:	8812      	ldrh	r2, [r2, #0]
   1ede6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1ede8:	4b0c      	ldr	r3, [pc, #48]	; (1ee1c <sd_mmc_init_write_blocks+0xe4>)
   1edea:	1d3a      	adds	r2, r7, #4
   1edec:	8812      	ldrh	r2, [r2, #0]
   1edee:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1edf0:	2300      	movs	r3, #0
}
   1edf2:	0018      	movs	r0, r3
   1edf4:	46bd      	mov	sp, r7
   1edf6:	b007      	add	sp, #28
   1edf8:	bd90      	pop	{r4, r7, pc}
   1edfa:	46c0      	nop			; (mov r8, r8)
   1edfc:	0001e68d 	.word	0x0001e68d
   1ee00:	0001eb45 	.word	0x0001eb45
   1ee04:	0001e789 	.word	0x0001e789
   1ee08:	00109119 	.word	0x00109119
   1ee0c:	00089118 	.word	0x00089118
   1ee10:	20003e30 	.word	0x20003e30
   1ee14:	0001f64d 	.word	0x0001f64d
   1ee18:	20003e36 	.word	0x20003e36
   1ee1c:	20003e34 	.word	0x20003e34

0001ee20 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1ee20:	b580      	push	{r7, lr}
   1ee22:	b082      	sub	sp, #8
   1ee24:	af00      	add	r7, sp, #0
   1ee26:	6078      	str	r0, [r7, #4]
   1ee28:	000a      	movs	r2, r1
   1ee2a:	1cbb      	adds	r3, r7, #2
   1ee2c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1ee2e:	1cbb      	adds	r3, r7, #2
   1ee30:	881a      	ldrh	r2, [r3, #0]
   1ee32:	687b      	ldr	r3, [r7, #4]
   1ee34:	0011      	movs	r1, r2
   1ee36:	0018      	movs	r0, r3
   1ee38:	4b0d      	ldr	r3, [pc, #52]	; (1ee70 <sd_mmc_start_write_blocks+0x50>)
   1ee3a:	4798      	blx	r3
   1ee3c:	0003      	movs	r3, r0
   1ee3e:	001a      	movs	r2, r3
   1ee40:	2301      	movs	r3, #1
   1ee42:	4053      	eors	r3, r2
   1ee44:	b2db      	uxtb	r3, r3
   1ee46:	2b00      	cmp	r3, #0
   1ee48:	d004      	beq.n	1ee54 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ee4a:	4b0a      	ldr	r3, [pc, #40]	; (1ee74 <sd_mmc_start_write_blocks+0x54>)
   1ee4c:	2200      	movs	r2, #0
   1ee4e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ee50:	2305      	movs	r3, #5
   1ee52:	e008      	b.n	1ee66 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ee54:	4b07      	ldr	r3, [pc, #28]	; (1ee74 <sd_mmc_start_write_blocks+0x54>)
   1ee56:	881a      	ldrh	r2, [r3, #0]
   1ee58:	1cbb      	adds	r3, r7, #2
   1ee5a:	881b      	ldrh	r3, [r3, #0]
   1ee5c:	1ad3      	subs	r3, r2, r3
   1ee5e:	b29a      	uxth	r2, r3
   1ee60:	4b04      	ldr	r3, [pc, #16]	; (1ee74 <sd_mmc_start_write_blocks+0x54>)
   1ee62:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ee64:	2300      	movs	r3, #0
}
   1ee66:	0018      	movs	r0, r3
   1ee68:	46bd      	mov	sp, r7
   1ee6a:	b002      	add	sp, #8
   1ee6c:	bd80      	pop	{r7, pc}
   1ee6e:	46c0      	nop			; (mov r8, r8)
   1ee70:	0001f9cd 	.word	0x0001f9cd
   1ee74:	20003e36 	.word	0x20003e36

0001ee78 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1ee78:	b580      	push	{r7, lr}
   1ee7a:	b082      	sub	sp, #8
   1ee7c:	af00      	add	r7, sp, #0
   1ee7e:	0002      	movs	r2, r0
   1ee80:	1dfb      	adds	r3, r7, #7
   1ee82:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1ee84:	4b13      	ldr	r3, [pc, #76]	; (1eed4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1ee86:	4798      	blx	r3
   1ee88:	0003      	movs	r3, r0
   1ee8a:	001a      	movs	r2, r3
   1ee8c:	2301      	movs	r3, #1
   1ee8e:	4053      	eors	r3, r2
   1ee90:	b2db      	uxtb	r3, r3
   1ee92:	2b00      	cmp	r3, #0
   1ee94:	d001      	beq.n	1ee9a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ee96:	2305      	movs	r3, #5
   1ee98:	e018      	b.n	1eecc <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1ee9a:	1dfb      	adds	r3, r7, #7
   1ee9c:	781b      	ldrb	r3, [r3, #0]
   1ee9e:	2b00      	cmp	r3, #0
   1eea0:	d003      	beq.n	1eeaa <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1eea2:	4b0d      	ldr	r3, [pc, #52]	; (1eed8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1eea4:	2200      	movs	r2, #0
   1eea6:	801a      	strh	r2, [r3, #0]
   1eea8:	e005      	b.n	1eeb6 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1eeaa:	4b0b      	ldr	r3, [pc, #44]	; (1eed8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1eeac:	881b      	ldrh	r3, [r3, #0]
   1eeae:	2b00      	cmp	r3, #0
   1eeb0:	d001      	beq.n	1eeb6 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1eeb2:	2300      	movs	r3, #0
   1eeb4:	e00a      	b.n	1eecc <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1eeb6:	4b09      	ldr	r3, [pc, #36]	; (1eedc <sd_mmc_wait_end_of_write_blocks+0x64>)
   1eeb8:	881b      	ldrh	r3, [r3, #0]
   1eeba:	2b01      	cmp	r3, #1
   1eebc:	d103      	bne.n	1eec6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1eebe:	4b08      	ldr	r3, [pc, #32]	; (1eee0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1eec0:	4798      	blx	r3
		return SD_MMC_OK;
   1eec2:	2300      	movs	r3, #0
   1eec4:	e002      	b.n	1eecc <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1eec6:	4b06      	ldr	r3, [pc, #24]	; (1eee0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1eec8:	4798      	blx	r3
	return SD_MMC_OK;
   1eeca:	2300      	movs	r3, #0
}
   1eecc:	0018      	movs	r0, r3
   1eece:	46bd      	mov	sp, r7
   1eed0:	b002      	add	sp, #8
   1eed2:	bd80      	pop	{r7, pc}
   1eed4:	0001fa8d 	.word	0x0001fa8d
   1eed8:	20003e36 	.word	0x20003e36
   1eedc:	20003e34 	.word	0x20003e34
   1eee0:	0001e789 	.word	0x0001e789

0001eee4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1eee4:	b580      	push	{r7, lr}
   1eee6:	b082      	sub	sp, #8
   1eee8:	af00      	add	r7, sp, #0
   1eeea:	0002      	movs	r2, r0
   1eeec:	1dfb      	adds	r3, r7, #7
   1eeee:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1eef0:	1dfb      	adds	r3, r7, #7
   1eef2:	781b      	ldrb	r3, [r3, #0]
   1eef4:	0018      	movs	r0, r3
   1eef6:	4b16      	ldr	r3, [pc, #88]	; (1ef50 <sd_mmc_test_unit_ready+0x6c>)
   1eef8:	4798      	blx	r3
   1eefa:	0003      	movs	r3, r0
   1eefc:	2b01      	cmp	r3, #1
   1eefe:	d019      	beq.n	1ef34 <sd_mmc_test_unit_ready+0x50>
   1ef00:	2b02      	cmp	r3, #2
   1ef02:	d019      	beq.n	1ef38 <sd_mmc_test_unit_ready+0x54>
   1ef04:	2b00      	cmp	r3, #0
   1ef06:	d11e      	bne.n	1ef46 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1ef08:	1dfb      	adds	r3, r7, #7
   1ef0a:	781b      	ldrb	r3, [r3, #0]
   1ef0c:	4a11      	ldr	r2, [pc, #68]	; (1ef54 <sd_mmc_test_unit_ready+0x70>)
   1ef0e:	5cd3      	ldrb	r3, [r2, r3]
   1ef10:	2b00      	cmp	r3, #0
   1ef12:	d001      	beq.n	1ef18 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1ef14:	2302      	movs	r3, #2
   1ef16:	e017      	b.n	1ef48 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1ef18:	1dfb      	adds	r3, r7, #7
   1ef1a:	781b      	ldrb	r3, [r3, #0]
   1ef1c:	0018      	movs	r0, r3
   1ef1e:	4b0e      	ldr	r3, [pc, #56]	; (1ef58 <sd_mmc_test_unit_ready+0x74>)
   1ef20:	4798      	blx	r3
   1ef22:	0003      	movs	r3, r0
   1ef24:	001a      	movs	r2, r3
   1ef26:	2303      	movs	r3, #3
   1ef28:	4013      	ands	r3, r2
   1ef2a:	d001      	beq.n	1ef30 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1ef2c:	2300      	movs	r3, #0
   1ef2e:	e00b      	b.n	1ef48 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1ef30:	2302      	movs	r3, #2
   1ef32:	e009      	b.n	1ef48 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1ef34:	2303      	movs	r3, #3
   1ef36:	e007      	b.n	1ef48 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1ef38:	1dfb      	adds	r3, r7, #7
   1ef3a:	781b      	ldrb	r3, [r3, #0]
   1ef3c:	4a05      	ldr	r2, [pc, #20]	; (1ef54 <sd_mmc_test_unit_ready+0x70>)
   1ef3e:	2100      	movs	r1, #0
   1ef40:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1ef42:	2302      	movs	r3, #2
   1ef44:	e000      	b.n	1ef48 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1ef46:	2301      	movs	r3, #1
	}
}
   1ef48:	0018      	movs	r0, r3
   1ef4a:	46bd      	mov	sp, r7
   1ef4c:	b002      	add	sp, #8
   1ef4e:	bd80      	pop	{r7, pc}
   1ef50:	0001ea59 	.word	0x0001ea59
   1ef54:	20003e38 	.word	0x20003e38
   1ef58:	0001eacd 	.word	0x0001eacd

0001ef5c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1ef5c:	b580      	push	{r7, lr}
   1ef5e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1ef60:	2000      	movs	r0, #0
   1ef62:	4b03      	ldr	r3, [pc, #12]	; (1ef70 <sd_mmc_test_unit_ready_0+0x14>)
   1ef64:	4798      	blx	r3
   1ef66:	0003      	movs	r3, r0
}
   1ef68:	0018      	movs	r0, r3
   1ef6a:	46bd      	mov	sp, r7
   1ef6c:	bd80      	pop	{r7, pc}
   1ef6e:	46c0      	nop			; (mov r8, r8)
   1ef70:	0001eee5 	.word	0x0001eee5

0001ef74 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1ef74:	b580      	push	{r7, lr}
   1ef76:	b082      	sub	sp, #8
   1ef78:	af00      	add	r7, sp, #0
   1ef7a:	0002      	movs	r2, r0
   1ef7c:	6039      	str	r1, [r7, #0]
   1ef7e:	1dfb      	adds	r3, r7, #7
   1ef80:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1ef82:	1dfb      	adds	r3, r7, #7
   1ef84:	781b      	ldrb	r3, [r3, #0]
   1ef86:	0018      	movs	r0, r3
   1ef88:	4b08      	ldr	r3, [pc, #32]	; (1efac <sd_mmc_read_capacity+0x38>)
   1ef8a:	4798      	blx	r3
   1ef8c:	0003      	movs	r3, r0
   1ef8e:	005b      	lsls	r3, r3, #1
   1ef90:	1e5a      	subs	r2, r3, #1
   1ef92:	683b      	ldr	r3, [r7, #0]
   1ef94:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1ef96:	1dfb      	adds	r3, r7, #7
   1ef98:	781b      	ldrb	r3, [r3, #0]
   1ef9a:	0018      	movs	r0, r3
   1ef9c:	4b04      	ldr	r3, [pc, #16]	; (1efb0 <sd_mmc_read_capacity+0x3c>)
   1ef9e:	4798      	blx	r3
   1efa0:	0003      	movs	r3, r0
}
   1efa2:	0018      	movs	r0, r3
   1efa4:	46bd      	mov	sp, r7
   1efa6:	b002      	add	sp, #8
   1efa8:	bd80      	pop	{r7, pc}
   1efaa:	46c0      	nop			; (mov r8, r8)
   1efac:	0001eb09 	.word	0x0001eb09
   1efb0:	0001eee5 	.word	0x0001eee5

0001efb4 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1efb4:	b580      	push	{r7, lr}
   1efb6:	b082      	sub	sp, #8
   1efb8:	af00      	add	r7, sp, #0
   1efba:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1efbc:	687b      	ldr	r3, [r7, #4]
   1efbe:	0019      	movs	r1, r3
   1efc0:	2000      	movs	r0, #0
   1efc2:	4b03      	ldr	r3, [pc, #12]	; (1efd0 <sd_mmc_read_capacity_0+0x1c>)
   1efc4:	4798      	blx	r3
   1efc6:	0003      	movs	r3, r0
}
   1efc8:	0018      	movs	r0, r3
   1efca:	46bd      	mov	sp, r7
   1efcc:	b002      	add	sp, #8
   1efce:	bd80      	pop	{r7, pc}
   1efd0:	0001ef75 	.word	0x0001ef75

0001efd4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1efd4:	b580      	push	{r7, lr}
   1efd6:	b082      	sub	sp, #8
   1efd8:	af00      	add	r7, sp, #0
   1efda:	0002      	movs	r2, r0
   1efdc:	1dfb      	adds	r3, r7, #7
   1efde:	701a      	strb	r2, [r3, #0]
   1efe0:	1dbb      	adds	r3, r7, #6
   1efe2:	1c0a      	adds	r2, r1, #0
   1efe4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1efe6:	1dfb      	adds	r3, r7, #7
   1efe8:	781b      	ldrb	r3, [r3, #0]
   1efea:	4a04      	ldr	r2, [pc, #16]	; (1effc <sd_mmc_unload+0x28>)
   1efec:	1db9      	adds	r1, r7, #6
   1efee:	7809      	ldrb	r1, [r1, #0]
   1eff0:	54d1      	strb	r1, [r2, r3]
	return true;
   1eff2:	2301      	movs	r3, #1
}
   1eff4:	0018      	movs	r0, r3
   1eff6:	46bd      	mov	sp, r7
   1eff8:	b002      	add	sp, #8
   1effa:	bd80      	pop	{r7, pc}
   1effc:	20003e38 	.word	0x20003e38

0001f000 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1f000:	b580      	push	{r7, lr}
   1f002:	b082      	sub	sp, #8
   1f004:	af00      	add	r7, sp, #0
   1f006:	0002      	movs	r2, r0
   1f008:	1dfb      	adds	r3, r7, #7
   1f00a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1f00c:	1dfb      	adds	r3, r7, #7
   1f00e:	781b      	ldrb	r3, [r3, #0]
   1f010:	0019      	movs	r1, r3
   1f012:	2000      	movs	r0, #0
   1f014:	4b03      	ldr	r3, [pc, #12]	; (1f024 <sd_mmc_unload_0+0x24>)
   1f016:	4798      	blx	r3
   1f018:	0003      	movs	r3, r0
}
   1f01a:	0018      	movs	r0, r3
   1f01c:	46bd      	mov	sp, r7
   1f01e:	b002      	add	sp, #8
   1f020:	bd80      	pop	{r7, pc}
   1f022:	46c0      	nop			; (mov r8, r8)
   1f024:	0001efd5 	.word	0x0001efd5

0001f028 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1f028:	b580      	push	{r7, lr}
   1f02a:	b082      	sub	sp, #8
   1f02c:	af00      	add	r7, sp, #0
   1f02e:	0002      	movs	r2, r0
   1f030:	1dfb      	adds	r3, r7, #7
   1f032:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1f034:	1dfb      	adds	r3, r7, #7
   1f036:	781b      	ldrb	r3, [r3, #0]
   1f038:	0018      	movs	r0, r3
   1f03a:	4b03      	ldr	r3, [pc, #12]	; (1f048 <sd_mmc_wr_protect+0x20>)
   1f03c:	4798      	blx	r3
   1f03e:	0003      	movs	r3, r0
}
   1f040:	0018      	movs	r0, r3
   1f042:	46bd      	mov	sp, r7
   1f044:	b002      	add	sp, #8
   1f046:	bd80      	pop	{r7, pc}
   1f048:	0001eb45 	.word	0x0001eb45

0001f04c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1f04c:	b580      	push	{r7, lr}
   1f04e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1f050:	2000      	movs	r0, #0
   1f052:	4b03      	ldr	r3, [pc, #12]	; (1f060 <sd_mmc_wr_protect_0+0x14>)
   1f054:	4798      	blx	r3
   1f056:	0003      	movs	r3, r0
}
   1f058:	0018      	movs	r0, r3
   1f05a:	46bd      	mov	sp, r7
   1f05c:	bd80      	pop	{r7, pc}
   1f05e:	46c0      	nop			; (mov r8, r8)
   1f060:	0001f029 	.word	0x0001f029

0001f064 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1f064:	b580      	push	{r7, lr}
   1f066:	b082      	sub	sp, #8
   1f068:	af00      	add	r7, sp, #0
   1f06a:	0002      	movs	r2, r0
   1f06c:	1dfb      	adds	r3, r7, #7
   1f06e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1f070:	2301      	movs	r3, #1
}
   1f072:	0018      	movs	r0, r3
   1f074:	46bd      	mov	sp, r7
   1f076:	b002      	add	sp, #8
   1f078:	bd80      	pop	{r7, pc}
	...

0001f07c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1f07c:	b580      	push	{r7, lr}
   1f07e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1f080:	2000      	movs	r0, #0
   1f082:	4b03      	ldr	r3, [pc, #12]	; (1f090 <sd_mmc_removal_0+0x14>)
   1f084:	4798      	blx	r3
   1f086:	0003      	movs	r3, r0
}
   1f088:	0018      	movs	r0, r3
   1f08a:	46bd      	mov	sp, r7
   1f08c:	bd80      	pop	{r7, pc}
   1f08e:	46c0      	nop			; (mov r8, r8)
   1f090:	0001f065 	.word	0x0001f065

0001f094 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1f094:	b580      	push	{r7, lr}
   1f096:	b084      	sub	sp, #16
   1f098:	af00      	add	r7, sp, #0
   1f09a:	60b9      	str	r1, [r7, #8]
   1f09c:	607a      	str	r2, [r7, #4]
   1f09e:	230f      	movs	r3, #15
   1f0a0:	18fb      	adds	r3, r7, r3
   1f0a2:	1c02      	adds	r2, r0, #0
   1f0a4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1f0a6:	68b9      	ldr	r1, [r7, #8]
   1f0a8:	230f      	movs	r3, #15
   1f0aa:	18fb      	adds	r3, r7, r3
   1f0ac:	781b      	ldrb	r3, [r3, #0]
   1f0ae:	2201      	movs	r2, #1
   1f0b0:	0018      	movs	r0, r3
   1f0b2:	4b10      	ldr	r3, [pc, #64]	; (1f0f4 <sd_mmc_mem_2_ram+0x60>)
   1f0b4:	4798      	blx	r3
   1f0b6:	1e03      	subs	r3, r0, #0
   1f0b8:	d005      	beq.n	1f0c6 <sd_mmc_mem_2_ram+0x32>
   1f0ba:	2b02      	cmp	r3, #2
   1f0bc:	d101      	bne.n	1f0c2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f0be:	2302      	movs	r3, #2
   1f0c0:	e013      	b.n	1f0ea <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1f0c2:	2301      	movs	r3, #1
   1f0c4:	e011      	b.n	1f0ea <sd_mmc_mem_2_ram+0x56>
		break;
   1f0c6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1f0c8:	687b      	ldr	r3, [r7, #4]
   1f0ca:	2101      	movs	r1, #1
   1f0cc:	0018      	movs	r0, r3
   1f0ce:	4b0a      	ldr	r3, [pc, #40]	; (1f0f8 <sd_mmc_mem_2_ram+0x64>)
   1f0d0:	4798      	blx	r3
   1f0d2:	1e03      	subs	r3, r0, #0
   1f0d4:	d001      	beq.n	1f0da <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1f0d6:	2301      	movs	r3, #1
   1f0d8:	e007      	b.n	1f0ea <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1f0da:	2000      	movs	r0, #0
   1f0dc:	4b07      	ldr	r3, [pc, #28]	; (1f0fc <sd_mmc_mem_2_ram+0x68>)
   1f0de:	4798      	blx	r3
   1f0e0:	1e03      	subs	r3, r0, #0
   1f0e2:	d001      	beq.n	1f0e8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1f0e4:	2301      	movs	r3, #1
   1f0e6:	e000      	b.n	1f0ea <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1f0e8:	2300      	movs	r3, #0
}
   1f0ea:	0018      	movs	r0, r3
   1f0ec:	46bd      	mov	sp, r7
   1f0ee:	b004      	add	sp, #16
   1f0f0:	bd80      	pop	{r7, pc}
   1f0f2:	46c0      	nop			; (mov r8, r8)
   1f0f4:	0001eb5d 	.word	0x0001eb5d
   1f0f8:	0001ec49 	.word	0x0001ec49
   1f0fc:	0001eca1 	.word	0x0001eca1

0001f100 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1f100:	b580      	push	{r7, lr}
   1f102:	b082      	sub	sp, #8
   1f104:	af00      	add	r7, sp, #0
   1f106:	6078      	str	r0, [r7, #4]
   1f108:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1f10a:	683a      	ldr	r2, [r7, #0]
   1f10c:	687b      	ldr	r3, [r7, #4]
   1f10e:	0019      	movs	r1, r3
   1f110:	2000      	movs	r0, #0
   1f112:	4b03      	ldr	r3, [pc, #12]	; (1f120 <sd_mmc_mem_2_ram_0+0x20>)
   1f114:	4798      	blx	r3
   1f116:	0003      	movs	r3, r0
}
   1f118:	0018      	movs	r0, r3
   1f11a:	46bd      	mov	sp, r7
   1f11c:	b002      	add	sp, #8
   1f11e:	bd80      	pop	{r7, pc}
   1f120:	0001f095 	.word	0x0001f095

0001f124 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1f124:	b580      	push	{r7, lr}
   1f126:	b084      	sub	sp, #16
   1f128:	af00      	add	r7, sp, #0
   1f12a:	60b9      	str	r1, [r7, #8]
   1f12c:	607a      	str	r2, [r7, #4]
   1f12e:	230f      	movs	r3, #15
   1f130:	18fb      	adds	r3, r7, r3
   1f132:	1c02      	adds	r2, r0, #0
   1f134:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1f136:	68b9      	ldr	r1, [r7, #8]
   1f138:	230f      	movs	r3, #15
   1f13a:	18fb      	adds	r3, r7, r3
   1f13c:	781b      	ldrb	r3, [r3, #0]
   1f13e:	2201      	movs	r2, #1
   1f140:	0018      	movs	r0, r3
   1f142:	4b10      	ldr	r3, [pc, #64]	; (1f184 <sd_mmc_ram_2_mem+0x60>)
   1f144:	4798      	blx	r3
   1f146:	1e03      	subs	r3, r0, #0
   1f148:	d005      	beq.n	1f156 <sd_mmc_ram_2_mem+0x32>
   1f14a:	2b02      	cmp	r3, #2
   1f14c:	d101      	bne.n	1f152 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f14e:	2302      	movs	r3, #2
   1f150:	e013      	b.n	1f17a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1f152:	2301      	movs	r3, #1
   1f154:	e011      	b.n	1f17a <sd_mmc_ram_2_mem+0x56>
		break;
   1f156:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1f158:	687b      	ldr	r3, [r7, #4]
   1f15a:	2101      	movs	r1, #1
   1f15c:	0018      	movs	r0, r3
   1f15e:	4b0a      	ldr	r3, [pc, #40]	; (1f188 <sd_mmc_ram_2_mem+0x64>)
   1f160:	4798      	blx	r3
   1f162:	1e03      	subs	r3, r0, #0
   1f164:	d001      	beq.n	1f16a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1f166:	2301      	movs	r3, #1
   1f168:	e007      	b.n	1f17a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1f16a:	2000      	movs	r0, #0
   1f16c:	4b07      	ldr	r3, [pc, #28]	; (1f18c <sd_mmc_ram_2_mem+0x68>)
   1f16e:	4798      	blx	r3
   1f170:	1e03      	subs	r3, r0, #0
   1f172:	d001      	beq.n	1f178 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1f174:	2301      	movs	r3, #1
   1f176:	e000      	b.n	1f17a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1f178:	2300      	movs	r3, #0
}
   1f17a:	0018      	movs	r0, r3
   1f17c:	46bd      	mov	sp, r7
   1f17e:	b004      	add	sp, #16
   1f180:	bd80      	pop	{r7, pc}
   1f182:	46c0      	nop			; (mov r8, r8)
   1f184:	0001ed39 	.word	0x0001ed39
   1f188:	0001ee21 	.word	0x0001ee21
   1f18c:	0001ee79 	.word	0x0001ee79

0001f190 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1f190:	b580      	push	{r7, lr}
   1f192:	b082      	sub	sp, #8
   1f194:	af00      	add	r7, sp, #0
   1f196:	6078      	str	r0, [r7, #4]
   1f198:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1f19a:	683a      	ldr	r2, [r7, #0]
   1f19c:	687b      	ldr	r3, [r7, #4]
   1f19e:	0019      	movs	r1, r3
   1f1a0:	2000      	movs	r0, #0
   1f1a2:	4b03      	ldr	r3, [pc, #12]	; (1f1b0 <sd_mmc_ram_2_mem_0+0x20>)
   1f1a4:	4798      	blx	r3
   1f1a6:	0003      	movs	r3, r0
}
   1f1a8:	0018      	movs	r0, r3
   1f1aa:	46bd      	mov	sp, r7
   1f1ac:	b002      	add	sp, #8
   1f1ae:	bd80      	pop	{r7, pc}
   1f1b0:	0001f125 	.word	0x0001f125

0001f1b4 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1f1b4:	b580      	push	{r7, lr}
   1f1b6:	b084      	sub	sp, #16
   1f1b8:	af00      	add	r7, sp, #0
   1f1ba:	6078      	str	r0, [r7, #4]
   1f1bc:	000a      	movs	r2, r1
   1f1be:	1cfb      	adds	r3, r7, #3
   1f1c0:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1f1c2:	230f      	movs	r3, #15
   1f1c4:	18fb      	adds	r3, r7, r3
   1f1c6:	2200      	movs	r2, #0
   1f1c8:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1f1ca:	e038      	b.n	1f23e <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1f1cc:	687b      	ldr	r3, [r7, #4]
   1f1ce:	1c5a      	adds	r2, r3, #1
   1f1d0:	607a      	str	r2, [r7, #4]
   1f1d2:	220e      	movs	r2, #14
   1f1d4:	18ba      	adds	r2, r7, r2
   1f1d6:	781b      	ldrb	r3, [r3, #0]
   1f1d8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f1da:	230d      	movs	r3, #13
   1f1dc:	18fb      	adds	r3, r7, r3
   1f1de:	2200      	movs	r2, #0
   1f1e0:	701a      	strb	r2, [r3, #0]
   1f1e2:	e027      	b.n	1f234 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1f1e4:	230f      	movs	r3, #15
   1f1e6:	18fa      	adds	r2, r7, r3
   1f1e8:	230f      	movs	r3, #15
   1f1ea:	18fb      	adds	r3, r7, r3
   1f1ec:	781b      	ldrb	r3, [r3, #0]
   1f1ee:	18db      	adds	r3, r3, r3
   1f1f0:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1f1f2:	230e      	movs	r3, #14
   1f1f4:	18fa      	adds	r2, r7, r3
   1f1f6:	230f      	movs	r3, #15
   1f1f8:	18fb      	adds	r3, r7, r3
   1f1fa:	7812      	ldrb	r2, [r2, #0]
   1f1fc:	781b      	ldrb	r3, [r3, #0]
   1f1fe:	4053      	eors	r3, r2
   1f200:	b2db      	uxtb	r3, r3
   1f202:	b25b      	sxtb	r3, r3
   1f204:	2b00      	cmp	r3, #0
   1f206:	da07      	bge.n	1f218 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1f208:	230f      	movs	r3, #15
   1f20a:	18fb      	adds	r3, r7, r3
   1f20c:	220f      	movs	r2, #15
   1f20e:	18ba      	adds	r2, r7, r2
   1f210:	7812      	ldrb	r2, [r2, #0]
   1f212:	2109      	movs	r1, #9
   1f214:	404a      	eors	r2, r1
   1f216:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1f218:	230e      	movs	r3, #14
   1f21a:	18fa      	adds	r2, r7, r3
   1f21c:	230e      	movs	r3, #14
   1f21e:	18fb      	adds	r3, r7, r3
   1f220:	781b      	ldrb	r3, [r3, #0]
   1f222:	18db      	adds	r3, r3, r3
   1f224:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1f226:	230d      	movs	r3, #13
   1f228:	18fb      	adds	r3, r7, r3
   1f22a:	781a      	ldrb	r2, [r3, #0]
   1f22c:	230d      	movs	r3, #13
   1f22e:	18fb      	adds	r3, r7, r3
   1f230:	3201      	adds	r2, #1
   1f232:	701a      	strb	r2, [r3, #0]
   1f234:	230d      	movs	r3, #13
   1f236:	18fb      	adds	r3, r7, r3
   1f238:	781b      	ldrb	r3, [r3, #0]
   1f23a:	2b07      	cmp	r3, #7
   1f23c:	d9d2      	bls.n	1f1e4 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1f23e:	1cfb      	adds	r3, r7, #3
   1f240:	781b      	ldrb	r3, [r3, #0]
   1f242:	1cfa      	adds	r2, r7, #3
   1f244:	1e59      	subs	r1, r3, #1
   1f246:	7011      	strb	r1, [r2, #0]
   1f248:	2b00      	cmp	r3, #0
   1f24a:	d1bf      	bne.n	1f1cc <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1f24c:	230f      	movs	r3, #15
   1f24e:	18fb      	adds	r3, r7, r3
   1f250:	781b      	ldrb	r3, [r3, #0]
   1f252:	005b      	lsls	r3, r3, #1
   1f254:	b25b      	sxtb	r3, r3
   1f256:	2201      	movs	r2, #1
   1f258:	4313      	orrs	r3, r2
   1f25a:	b25a      	sxtb	r2, r3
   1f25c:	230f      	movs	r3, #15
   1f25e:	18fb      	adds	r3, r7, r3
   1f260:	701a      	strb	r2, [r3, #0]
	return crc;
   1f262:	230f      	movs	r3, #15
   1f264:	18fb      	adds	r3, r7, r3
   1f266:	781b      	ldrb	r3, [r3, #0]
}
   1f268:	0018      	movs	r0, r3
   1f26a:	46bd      	mov	sp, r7
   1f26c:	b004      	add	sp, #16
   1f26e:	bd80      	pop	{r7, pc}

0001f270 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1f270:	b590      	push	{r4, r7, lr}
   1f272:	b083      	sub	sp, #12
   1f274:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1f276:	1c7b      	adds	r3, r7, #1
   1f278:	22ff      	movs	r2, #255	; 0xff
   1f27a:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1f27c:	1cbb      	adds	r3, r7, #2
   1f27e:	22ff      	movs	r2, #255	; 0xff
   1f280:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f282:	1cbb      	adds	r3, r7, #2
   1f284:	881b      	ldrh	r3, [r3, #0]
   1f286:	1c79      	adds	r1, r7, #1
   1f288:	4811      	ldr	r0, [pc, #68]	; (1f2d0 <sd_mmc_spi_wait_busy+0x60>)
   1f28a:	2201      	movs	r2, #1
   1f28c:	4c11      	ldr	r4, [pc, #68]	; (1f2d4 <sd_mmc_spi_wait_busy+0x64>)
   1f28e:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1f290:	4b11      	ldr	r3, [pc, #68]	; (1f2d8 <sd_mmc_spi_wait_busy+0x68>)
   1f292:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f294:	1cbb      	adds	r3, r7, #2
   1f296:	881b      	ldrh	r3, [r3, #0]
   1f298:	1c79      	adds	r1, r7, #1
   1f29a:	480d      	ldr	r0, [pc, #52]	; (1f2d0 <sd_mmc_spi_wait_busy+0x60>)
   1f29c:	2201      	movs	r2, #1
   1f29e:	4c0d      	ldr	r4, [pc, #52]	; (1f2d4 <sd_mmc_spi_wait_busy+0x64>)
   1f2a0:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1f2a2:	1cbb      	adds	r3, r7, #2
   1f2a4:	881b      	ldrh	r3, [r3, #0]
   1f2a6:	1c79      	adds	r1, r7, #1
   1f2a8:	4809      	ldr	r0, [pc, #36]	; (1f2d0 <sd_mmc_spi_wait_busy+0x60>)
   1f2aa:	2201      	movs	r2, #1
   1f2ac:	4c09      	ldr	r4, [pc, #36]	; (1f2d4 <sd_mmc_spi_wait_busy+0x64>)
   1f2ae:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1f2b0:	687b      	ldr	r3, [r7, #4]
   1f2b2:	1e5a      	subs	r2, r3, #1
   1f2b4:	607a      	str	r2, [r7, #4]
   1f2b6:	2b00      	cmp	r3, #0
   1f2b8:	d101      	bne.n	1f2be <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1f2ba:	2300      	movs	r3, #0
   1f2bc:	e004      	b.n	1f2c8 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1f2be:	1c7b      	adds	r3, r7, #1
   1f2c0:	781b      	ldrb	r3, [r3, #0]
   1f2c2:	2bff      	cmp	r3, #255	; 0xff
   1f2c4:	d1ed      	bne.n	1f2a2 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1f2c6:	2301      	movs	r3, #1
}
   1f2c8:	0018      	movs	r0, r3
   1f2ca:	46bd      	mov	sp, r7
   1f2cc:	b003      	add	sp, #12
   1f2ce:	bd90      	pop	{r4, r7, pc}
   1f2d0:	20003e3c 	.word	0x20003e3c
   1f2d4:	000279ed 	.word	0x000279ed
   1f2d8:	00030d40 	.word	0x00030d40

0001f2dc <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1f2dc:	b590      	push	{r4, r7, lr}
   1f2de:	b083      	sub	sp, #12
   1f2e0:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1f2e2:	1cbb      	adds	r3, r7, #2
   1f2e4:	22ff      	movs	r2, #255	; 0xff
   1f2e6:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1f2e8:	1c7b      	adds	r3, r7, #1
   1f2ea:	2200      	movs	r2, #0
   1f2ec:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1f2ee:	4b18      	ldr	r3, [pc, #96]	; (1f350 <sd_mmc_spi_start_read_block+0x74>)
   1f2f0:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1f2f2:	687b      	ldr	r3, [r7, #4]
   1f2f4:	1e5a      	subs	r2, r3, #1
   1f2f6:	607a      	str	r2, [r7, #4]
   1f2f8:	2b00      	cmp	r3, #0
   1f2fa:	d104      	bne.n	1f306 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1f2fc:	4b15      	ldr	r3, [pc, #84]	; (1f354 <sd_mmc_spi_start_read_block+0x78>)
   1f2fe:	2204      	movs	r2, #4
   1f300:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1f302:	2300      	movs	r3, #0
   1f304:	e020      	b.n	1f348 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1f306:	1cbb      	adds	r3, r7, #2
   1f308:	881b      	ldrh	r3, [r3, #0]
   1f30a:	1c79      	adds	r1, r7, #1
   1f30c:	4812      	ldr	r0, [pc, #72]	; (1f358 <sd_mmc_spi_start_read_block+0x7c>)
   1f30e:	2201      	movs	r2, #1
   1f310:	4c12      	ldr	r4, [pc, #72]	; (1f35c <sd_mmc_spi_start_read_block+0x80>)
   1f312:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1f314:	1c7b      	adds	r3, r7, #1
   1f316:	781b      	ldrb	r3, [r3, #0]
   1f318:	001a      	movs	r2, r3
   1f31a:	23f0      	movs	r3, #240	; 0xf0
   1f31c:	4013      	ands	r3, r2
   1f31e:	d10e      	bne.n	1f33e <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1f320:	1c7b      	adds	r3, r7, #1
   1f322:	781b      	ldrb	r3, [r3, #0]
   1f324:	001a      	movs	r2, r3
   1f326:	2307      	movs	r3, #7
   1f328:	4013      	ands	r3, r2
   1f32a:	d003      	beq.n	1f334 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1f32c:	4b09      	ldr	r3, [pc, #36]	; (1f354 <sd_mmc_spi_start_read_block+0x78>)
   1f32e:	2207      	movs	r2, #7
   1f330:	701a      	strb	r2, [r3, #0]
   1f332:	e002      	b.n	1f33a <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1f334:	4b07      	ldr	r3, [pc, #28]	; (1f354 <sd_mmc_spi_start_read_block+0x78>)
   1f336:	220b      	movs	r2, #11
   1f338:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1f33a:	2300      	movs	r3, #0
   1f33c:	e004      	b.n	1f348 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1f33e:	1c7b      	adds	r3, r7, #1
   1f340:	781b      	ldrb	r3, [r3, #0]
   1f342:	2bfe      	cmp	r3, #254	; 0xfe
   1f344:	d1d5      	bne.n	1f2f2 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1f346:	2301      	movs	r3, #1
}
   1f348:	0018      	movs	r0, r3
   1f34a:	46bd      	mov	sp, r7
   1f34c:	b003      	add	sp, #12
   1f34e:	bd90      	pop	{r4, r7, pc}
   1f350:	0007a120 	.word	0x0007a120
   1f354:	20003e7b 	.word	0x20003e7b
   1f358:	20003e3c 	.word	0x20003e3c
   1f35c:	000279ed 	.word	0x000279ed

0001f360 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1f360:	b590      	push	{r4, r7, lr}
   1f362:	b083      	sub	sp, #12
   1f364:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1f366:	1dbb      	adds	r3, r7, #6
   1f368:	22ff      	movs	r2, #255	; 0xff
   1f36a:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1f36c:	1dbb      	adds	r3, r7, #6
   1f36e:	881b      	ldrh	r3, [r3, #0]
   1f370:	1d39      	adds	r1, r7, #4
   1f372:	4804      	ldr	r0, [pc, #16]	; (1f384 <sd_mmc_spi_stop_read_block+0x24>)
   1f374:	2202      	movs	r2, #2
   1f376:	4c04      	ldr	r4, [pc, #16]	; (1f388 <sd_mmc_spi_stop_read_block+0x28>)
   1f378:	47a0      	blx	r4
			dummy);
}
   1f37a:	46c0      	nop			; (mov r8, r8)
   1f37c:	46bd      	mov	sp, r7
   1f37e:	b003      	add	sp, #12
   1f380:	bd90      	pop	{r4, r7, pc}
   1f382:	46c0      	nop			; (mov r8, r8)
   1f384:	20003e3c 	.word	0x20003e3c
   1f388:	000279ed 	.word	0x000279ed

0001f38c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1f38c:	b580      	push	{r7, lr}
   1f38e:	b082      	sub	sp, #8
   1f390:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1f392:	1dfb      	adds	r3, r7, #7
   1f394:	22ff      	movs	r2, #255	; 0xff
   1f396:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1f398:	1df9      	adds	r1, r7, #7
   1f39a:	4b0d      	ldr	r3, [pc, #52]	; (1f3d0 <sd_mmc_spi_start_write_block+0x44>)
   1f39c:	2201      	movs	r2, #1
   1f39e:	0018      	movs	r0, r3
   1f3a0:	4b0c      	ldr	r3, [pc, #48]	; (1f3d4 <sd_mmc_spi_start_write_block+0x48>)
   1f3a2:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1f3a4:	4b0c      	ldr	r3, [pc, #48]	; (1f3d8 <sd_mmc_spi_start_write_block+0x4c>)
   1f3a6:	881b      	ldrh	r3, [r3, #0]
   1f3a8:	2b01      	cmp	r3, #1
   1f3aa:	d103      	bne.n	1f3b4 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1f3ac:	1dbb      	adds	r3, r7, #6
   1f3ae:	22fe      	movs	r2, #254	; 0xfe
   1f3b0:	701a      	strb	r2, [r3, #0]
   1f3b2:	e002      	b.n	1f3ba <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1f3b4:	1dbb      	adds	r3, r7, #6
   1f3b6:	22fc      	movs	r2, #252	; 0xfc
   1f3b8:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1f3ba:	1db9      	adds	r1, r7, #6
   1f3bc:	4b04      	ldr	r3, [pc, #16]	; (1f3d0 <sd_mmc_spi_start_write_block+0x44>)
   1f3be:	2201      	movs	r2, #1
   1f3c0:	0018      	movs	r0, r3
   1f3c2:	4b04      	ldr	r3, [pc, #16]	; (1f3d4 <sd_mmc_spi_start_write_block+0x48>)
   1f3c4:	4798      	blx	r3
}
   1f3c6:	46c0      	nop			; (mov r8, r8)
   1f3c8:	46bd      	mov	sp, r7
   1f3ca:	b002      	add	sp, #8
   1f3cc:	bd80      	pop	{r7, pc}
   1f3ce:	46c0      	nop			; (mov r8, r8)
   1f3d0:	20003e3c 	.word	0x20003e3c
   1f3d4:	00027c11 	.word	0x00027c11
   1f3d8:	20003e86 	.word	0x20003e86

0001f3dc <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1f3dc:	b590      	push	{r4, r7, lr}
   1f3de:	b083      	sub	sp, #12
   1f3e0:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1f3e2:	1dbb      	adds	r3, r7, #6
   1f3e4:	22ff      	movs	r2, #255	; 0xff
   1f3e6:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1f3e8:	1cbb      	adds	r3, r7, #2
   1f3ea:	2201      	movs	r2, #1
   1f3ec:	4252      	negs	r2, r2
   1f3ee:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1f3f0:	1cb9      	adds	r1, r7, #2
   1f3f2:	4b1b      	ldr	r3, [pc, #108]	; (1f460 <sd_mmc_spi_stop_write_block+0x84>)
   1f3f4:	2202      	movs	r2, #2
   1f3f6:	0018      	movs	r0, r3
   1f3f8:	4b1a      	ldr	r3, [pc, #104]	; (1f464 <sd_mmc_spi_stop_write_block+0x88>)
   1f3fa:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1f3fc:	1dbb      	adds	r3, r7, #6
   1f3fe:	881b      	ldrh	r3, [r3, #0]
   1f400:	1d79      	adds	r1, r7, #5
   1f402:	4817      	ldr	r0, [pc, #92]	; (1f460 <sd_mmc_spi_stop_write_block+0x84>)
   1f404:	2201      	movs	r2, #1
   1f406:	4c18      	ldr	r4, [pc, #96]	; (1f468 <sd_mmc_spi_stop_write_block+0x8c>)
   1f408:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1f40a:	1d7b      	adds	r3, r7, #5
   1f40c:	781b      	ldrb	r3, [r3, #0]
   1f40e:	001a      	movs	r2, r3
   1f410:	2310      	movs	r3, #16
   1f412:	4013      	ands	r3, r2
   1f414:	d105      	bne.n	1f422 <sd_mmc_spi_stop_write_block+0x46>
   1f416:	1d7b      	adds	r3, r7, #5
   1f418:	781b      	ldrb	r3, [r3, #0]
   1f41a:	001a      	movs	r2, r3
   1f41c:	2301      	movs	r3, #1
   1f41e:	4013      	ands	r3, r2
   1f420:	d104      	bne.n	1f42c <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f422:	4b12      	ldr	r3, [pc, #72]	; (1f46c <sd_mmc_spi_stop_write_block+0x90>)
   1f424:	2201      	movs	r2, #1
   1f426:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1f428:	2300      	movs	r3, #0
   1f42a:	e014      	b.n	1f456 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1f42c:	1d7b      	adds	r3, r7, #5
   1f42e:	781b      	ldrb	r3, [r3, #0]
   1f430:	001a      	movs	r2, r3
   1f432:	231e      	movs	r3, #30
   1f434:	4013      	ands	r3, r2
   1f436:	2b04      	cmp	r3, #4
   1f438:	d00b      	beq.n	1f452 <sd_mmc_spi_stop_write_block+0x76>
   1f43a:	2b0a      	cmp	r3, #10
   1f43c:	d104      	bne.n	1f448 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1f43e:	4b0b      	ldr	r3, [pc, #44]	; (1f46c <sd_mmc_spi_stop_write_block+0x90>)
   1f440:	2208      	movs	r2, #8
   1f442:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f444:	2300      	movs	r3, #0
   1f446:	e006      	b.n	1f456 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1f448:	4b08      	ldr	r3, [pc, #32]	; (1f46c <sd_mmc_spi_stop_write_block+0x90>)
   1f44a:	220a      	movs	r2, #10
   1f44c:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1f44e:	2300      	movs	r3, #0
   1f450:	e001      	b.n	1f456 <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1f452:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f454:	2301      	movs	r3, #1
}
   1f456:	0018      	movs	r0, r3
   1f458:	46bd      	mov	sp, r7
   1f45a:	b003      	add	sp, #12
   1f45c:	bd90      	pop	{r4, r7, pc}
   1f45e:	46c0      	nop			; (mov r8, r8)
   1f460:	20003e3c 	.word	0x20003e3c
   1f464:	00027c11 	.word	0x00027c11
   1f468:	000279ed 	.word	0x000279ed
   1f46c:	20003e7b 	.word	0x20003e7b

0001f470 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1f470:	b590      	push	{r4, r7, lr}
   1f472:	b083      	sub	sp, #12
   1f474:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1f476:	4b1d      	ldr	r3, [pc, #116]	; (1f4ec <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f478:	881b      	ldrh	r3, [r3, #0]
   1f47a:	2b01      	cmp	r3, #1
   1f47c:	d101      	bne.n	1f482 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1f47e:	2301      	movs	r3, #1
   1f480:	e030      	b.n	1f4e4 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1f482:	4b1a      	ldr	r3, [pc, #104]	; (1f4ec <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1f484:	881b      	ldrh	r3, [r3, #0]
   1f486:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1f488:	4b19      	ldr	r3, [pc, #100]	; (1f4f0 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1f48a:	681a      	ldr	r2, [r3, #0]
   1f48c:	4b19      	ldr	r3, [pc, #100]	; (1f4f4 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1f48e:	881b      	ldrh	r3, [r3, #0]
   1f490:	0019      	movs	r1, r3
   1f492:	4b19      	ldr	r3, [pc, #100]	; (1f4f8 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1f494:	0010      	movs	r0, r2
   1f496:	4798      	blx	r3
   1f498:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1f49a:	429c      	cmp	r4, r3
   1f49c:	d901      	bls.n	1f4a2 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1f49e:	2301      	movs	r3, #1
   1f4a0:	e020      	b.n	1f4e4 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1f4a2:	1dfb      	adds	r3, r7, #7
   1f4a4:	22ff      	movs	r2, #255	; 0xff
   1f4a6:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f4a8:	1df9      	adds	r1, r7, #7
   1f4aa:	4b14      	ldr	r3, [pc, #80]	; (1f4fc <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f4ac:	2201      	movs	r2, #1
   1f4ae:	0018      	movs	r0, r3
   1f4b0:	4b13      	ldr	r3, [pc, #76]	; (1f500 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f4b2:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1f4b4:	1dfb      	adds	r3, r7, #7
   1f4b6:	22fd      	movs	r2, #253	; 0xfd
   1f4b8:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1f4ba:	1df9      	adds	r1, r7, #7
   1f4bc:	4b0f      	ldr	r3, [pc, #60]	; (1f4fc <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1f4be:	2201      	movs	r2, #1
   1f4c0:	0018      	movs	r0, r3
   1f4c2:	4b0f      	ldr	r3, [pc, #60]	; (1f500 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1f4c4:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1f4c6:	4b0f      	ldr	r3, [pc, #60]	; (1f504 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1f4c8:	4798      	blx	r3
   1f4ca:	0003      	movs	r3, r0
   1f4cc:	001a      	movs	r2, r3
   1f4ce:	2301      	movs	r3, #1
   1f4d0:	4053      	eors	r3, r2
   1f4d2:	b2db      	uxtb	r3, r3
   1f4d4:	2b00      	cmp	r3, #0
   1f4d6:	d004      	beq.n	1f4e2 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1f4d8:	4b0b      	ldr	r3, [pc, #44]	; (1f508 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1f4da:	2205      	movs	r2, #5
   1f4dc:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1f4de:	2300      	movs	r3, #0
   1f4e0:	e000      	b.n	1f4e4 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1f4e2:	2301      	movs	r3, #1
}
   1f4e4:	0018      	movs	r0, r3
   1f4e6:	46bd      	mov	sp, r7
   1f4e8:	b003      	add	sp, #12
   1f4ea:	bd90      	pop	{r4, r7, pc}
   1f4ec:	20003e86 	.word	0x20003e86
   1f4f0:	20003e80 	.word	0x20003e80
   1f4f4:	20003e84 	.word	0x20003e84
   1f4f8:	000323b1 	.word	0x000323b1
   1f4fc:	20003e3c 	.word	0x20003e3c
   1f500:	00027c11 	.word	0x00027c11
   1f504:	0001f271 	.word	0x0001f271
   1f508:	20003e7b 	.word	0x20003e7b

0001f50c <sd_mmc_spi_select_device>:
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1f50c:	b590      	push	{r4, r7, lr}
   1f50e:	b083      	sub	sp, #12
   1f510:	af00      	add	r7, sp, #0
   1f512:	0004      	movs	r4, r0
   1f514:	6039      	str	r1, [r7, #0]
   1f516:	0010      	movs	r0, r2
   1f518:	0019      	movs	r1, r3
   1f51a:	1dfb      	adds	r3, r7, #7
   1f51c:	1c22      	adds	r2, r4, #0
   1f51e:	701a      	strb	r2, [r3, #0]
   1f520:	1dbb      	adds	r3, r7, #6
   1f522:	1c02      	adds	r2, r0, #0
   1f524:	701a      	strb	r2, [r3, #0]
   1f526:	1d7b      	adds	r3, r7, #5
   1f528:	1c0a      	adds	r2, r1, #0
   1f52a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f52c:	4b13      	ldr	r3, [pc, #76]	; (1f57c <sd_mmc_spi_select_device+0x70>)
   1f52e:	2200      	movs	r2, #0
   1f530:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1f532:	683b      	ldr	r3, [r7, #0]
   1f534:	4a12      	ldr	r2, [pc, #72]	; (1f580 <sd_mmc_spi_select_device+0x74>)
   1f536:	4293      	cmp	r3, r2
   1f538:	d907      	bls.n	1f54a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1f53a:	4b11      	ldr	r3, [pc, #68]	; (1f580 <sd_mmc_spi_select_device+0x74>)
   1f53c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f53e:	e004      	b.n	1f54a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1f540:	683b      	ldr	r3, [r7, #0]
   1f542:	08db      	lsrs	r3, r3, #3
   1f544:	683a      	ldr	r2, [r7, #0]
   1f546:	1ad3      	subs	r3, r2, r3
   1f548:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1f54a:	683a      	ldr	r2, [r7, #0]
   1f54c:	4b0d      	ldr	r3, [pc, #52]	; (1f584 <sd_mmc_spi_select_device+0x78>)
   1f54e:	0011      	movs	r1, r2
   1f550:	0018      	movs	r0, r3
   1f552:	4b0d      	ldr	r3, [pc, #52]	; (1f588 <sd_mmc_spi_select_device+0x7c>)
   1f554:	4798      	blx	r3
   1f556:	0003      	movs	r3, r0
   1f558:	2b17      	cmp	r3, #23
   1f55a:	d0f1      	beq.n	1f540 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1f55c:	1dfb      	adds	r3, r7, #7
   1f55e:	781a      	ldrb	r2, [r3, #0]
   1f560:	0013      	movs	r3, r2
   1f562:	005b      	lsls	r3, r3, #1
   1f564:	189b      	adds	r3, r3, r2
   1f566:	4a09      	ldr	r2, [pc, #36]	; (1f58c <sd_mmc_spi_select_device+0x80>)
   1f568:	1899      	adds	r1, r3, r2
   1f56a:	4b06      	ldr	r3, [pc, #24]	; (1f584 <sd_mmc_spi_select_device+0x78>)
   1f56c:	2201      	movs	r2, #1
   1f56e:	0018      	movs	r0, r3
   1f570:	4b07      	ldr	r3, [pc, #28]	; (1f590 <sd_mmc_spi_select_device+0x84>)
   1f572:	4798      	blx	r3
}
   1f574:	46c0      	nop			; (mov r8, r8)
   1f576:	46bd      	mov	sp, r7
   1f578:	b003      	add	sp, #12
   1f57a:	bd90      	pop	{r4, r7, pc}
   1f57c:	20003e7b 	.word	0x20003e7b
   1f580:	00989680 	.word	0x00989680
   1f584:	20003e3c 	.word	0x20003e3c
   1f588:	00027585 	.word	0x00027585
   1f58c:	20003e78 	.word	0x20003e78
   1f590:	00027b21 	.word	0x00027b21

0001f594 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1f594:	b580      	push	{r7, lr}
   1f596:	b082      	sub	sp, #8
   1f598:	af00      	add	r7, sp, #0
   1f59a:	0002      	movs	r2, r0
   1f59c:	1dfb      	adds	r3, r7, #7
   1f59e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f5a0:	4b09      	ldr	r3, [pc, #36]	; (1f5c8 <sd_mmc_spi_deselect_device+0x34>)
   1f5a2:	2200      	movs	r2, #0
   1f5a4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1f5a6:	1dfb      	adds	r3, r7, #7
   1f5a8:	781a      	ldrb	r2, [r3, #0]
   1f5aa:	0013      	movs	r3, r2
   1f5ac:	005b      	lsls	r3, r3, #1
   1f5ae:	189b      	adds	r3, r3, r2
   1f5b0:	4a06      	ldr	r2, [pc, #24]	; (1f5cc <sd_mmc_spi_deselect_device+0x38>)
   1f5b2:	1899      	adds	r1, r3, r2
   1f5b4:	4b06      	ldr	r3, [pc, #24]	; (1f5d0 <sd_mmc_spi_deselect_device+0x3c>)
   1f5b6:	2200      	movs	r2, #0
   1f5b8:	0018      	movs	r0, r3
   1f5ba:	4b06      	ldr	r3, [pc, #24]	; (1f5d4 <sd_mmc_spi_deselect_device+0x40>)
   1f5bc:	4798      	blx	r3
}
   1f5be:	46c0      	nop			; (mov r8, r8)
   1f5c0:	46bd      	mov	sp, r7
   1f5c2:	b002      	add	sp, #8
   1f5c4:	bd80      	pop	{r7, pc}
   1f5c6:	46c0      	nop			; (mov r8, r8)
   1f5c8:	20003e7b 	.word	0x20003e7b
   1f5cc:	20003e78 	.word	0x20003e78
   1f5d0:	20003e3c 	.word	0x20003e3c
   1f5d4:	00027b21 	.word	0x00027b21

0001f5d8 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1f5d8:	b580      	push	{r7, lr}
   1f5da:	b082      	sub	sp, #8
   1f5dc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1f5de:	1dbb      	adds	r3, r7, #6
   1f5e0:	22ff      	movs	r2, #255	; 0xff
   1f5e2:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f5e4:	4b0c      	ldr	r3, [pc, #48]	; (1f618 <sd_mmc_spi_send_clock+0x40>)
   1f5e6:	2200      	movs	r2, #0
   1f5e8:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1f5ea:	1dfb      	adds	r3, r7, #7
   1f5ec:	2200      	movs	r2, #0
   1f5ee:	701a      	strb	r2, [r3, #0]
   1f5f0:	e00a      	b.n	1f608 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1f5f2:	1db9      	adds	r1, r7, #6
   1f5f4:	4b09      	ldr	r3, [pc, #36]	; (1f61c <sd_mmc_spi_send_clock+0x44>)
   1f5f6:	2201      	movs	r2, #1
   1f5f8:	0018      	movs	r0, r3
   1f5fa:	4b09      	ldr	r3, [pc, #36]	; (1f620 <sd_mmc_spi_send_clock+0x48>)
   1f5fc:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1f5fe:	1dfb      	adds	r3, r7, #7
   1f600:	781a      	ldrb	r2, [r3, #0]
   1f602:	1dfb      	adds	r3, r7, #7
   1f604:	3201      	adds	r2, #1
   1f606:	701a      	strb	r2, [r3, #0]
   1f608:	1dfb      	adds	r3, r7, #7
   1f60a:	781b      	ldrb	r3, [r3, #0]
   1f60c:	2b09      	cmp	r3, #9
   1f60e:	d9f0      	bls.n	1f5f2 <sd_mmc_spi_send_clock+0x1a>
	}
}
   1f610:	46c0      	nop			; (mov r8, r8)
   1f612:	46bd      	mov	sp, r7
   1f614:	b002      	add	sp, #8
   1f616:	bd80      	pop	{r7, pc}
   1f618:	20003e7b 	.word	0x20003e7b
   1f61c:	20003e3c 	.word	0x20003e3c
   1f620:	00027c11 	.word	0x00027c11

0001f624 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1f624:	b590      	push	{r4, r7, lr}
   1f626:	b085      	sub	sp, #20
   1f628:	af02      	add	r7, sp, #8
   1f62a:	6078      	str	r0, [r7, #4]
   1f62c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1f62e:	6839      	ldr	r1, [r7, #0]
   1f630:	6878      	ldr	r0, [r7, #4]
   1f632:	2300      	movs	r3, #0
   1f634:	9300      	str	r3, [sp, #0]
   1f636:	2300      	movs	r3, #0
   1f638:	2200      	movs	r2, #0
   1f63a:	4c03      	ldr	r4, [pc, #12]	; (1f648 <sd_mmc_spi_send_cmd+0x24>)
   1f63c:	47a0      	blx	r4
   1f63e:	0003      	movs	r3, r0
}
   1f640:	0018      	movs	r0, r3
   1f642:	46bd      	mov	sp, r7
   1f644:	b003      	add	sp, #12
   1f646:	bd90      	pop	{r4, r7, pc}
   1f648:	0001f64d 	.word	0x0001f64d

0001f64c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1f64c:	b590      	push	{r4, r7, lr}
   1f64e:	b089      	sub	sp, #36	; 0x24
   1f650:	af00      	add	r7, sp, #0
   1f652:	60f8      	str	r0, [r7, #12]
   1f654:	60b9      	str	r1, [r7, #8]
   1f656:	0019      	movs	r1, r3
   1f658:	1dbb      	adds	r3, r7, #6
   1f65a:	801a      	strh	r2, [r3, #0]
   1f65c:	1d3b      	adds	r3, r7, #4
   1f65e:	1c0a      	adds	r2, r1, #0
   1f660:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1f662:	231b      	movs	r3, #27
   1f664:	18fb      	adds	r3, r7, r3
   1f666:	22ff      	movs	r2, #255	; 0xff
   1f668:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1f66a:	231c      	movs	r3, #28
   1f66c:	18fb      	adds	r3, r7, r3
   1f66e:	22ff      	movs	r2, #255	; 0xff
   1f670:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f672:	4b72      	ldr	r3, [pc, #456]	; (1f83c <sd_mmc_spi_adtc_start+0x1f0>)
   1f674:	2200      	movs	r2, #0
   1f676:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1f678:	68fb      	ldr	r3, [r7, #12]
   1f67a:	b2db      	uxtb	r3, r3
   1f67c:	223f      	movs	r2, #63	; 0x3f
   1f67e:	4013      	ands	r3, r2
   1f680:	b2db      	uxtb	r3, r3
   1f682:	2240      	movs	r2, #64	; 0x40
   1f684:	4313      	orrs	r3, r2
   1f686:	b2da      	uxtb	r2, r3
   1f688:	2314      	movs	r3, #20
   1f68a:	18fb      	adds	r3, r7, r3
   1f68c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1f68e:	68bb      	ldr	r3, [r7, #8]
   1f690:	0e1b      	lsrs	r3, r3, #24
   1f692:	b2da      	uxtb	r2, r3
   1f694:	2314      	movs	r3, #20
   1f696:	18fb      	adds	r3, r7, r3
   1f698:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1f69a:	68bb      	ldr	r3, [r7, #8]
   1f69c:	0c1b      	lsrs	r3, r3, #16
   1f69e:	b2da      	uxtb	r2, r3
   1f6a0:	2314      	movs	r3, #20
   1f6a2:	18fb      	adds	r3, r7, r3
   1f6a4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1f6a6:	68bb      	ldr	r3, [r7, #8]
   1f6a8:	0a1b      	lsrs	r3, r3, #8
   1f6aa:	b2da      	uxtb	r2, r3
   1f6ac:	2314      	movs	r3, #20
   1f6ae:	18fb      	adds	r3, r7, r3
   1f6b0:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1f6b2:	68bb      	ldr	r3, [r7, #8]
   1f6b4:	b2da      	uxtb	r2, r3
   1f6b6:	2314      	movs	r3, #20
   1f6b8:	18fb      	adds	r3, r7, r3
   1f6ba:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1f6bc:	2314      	movs	r3, #20
   1f6be:	18fb      	adds	r3, r7, r3
   1f6c0:	2105      	movs	r1, #5
   1f6c2:	0018      	movs	r0, r3
   1f6c4:	4b5e      	ldr	r3, [pc, #376]	; (1f840 <sd_mmc_spi_adtc_start+0x1f4>)
   1f6c6:	4798      	blx	r3
   1f6c8:	0003      	movs	r3, r0
   1f6ca:	001a      	movs	r2, r3
   1f6cc:	2314      	movs	r3, #20
   1f6ce:	18fb      	adds	r3, r7, r3
   1f6d0:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1f6d2:	231b      	movs	r3, #27
   1f6d4:	18f9      	adds	r1, r7, r3
   1f6d6:	4b5b      	ldr	r3, [pc, #364]	; (1f844 <sd_mmc_spi_adtc_start+0x1f8>)
   1f6d8:	2201      	movs	r2, #1
   1f6da:	0018      	movs	r0, r3
   1f6dc:	4b5a      	ldr	r3, [pc, #360]	; (1f848 <sd_mmc_spi_adtc_start+0x1fc>)
   1f6de:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1f6e0:	2314      	movs	r3, #20
   1f6e2:	18f9      	adds	r1, r7, r3
   1f6e4:	4b57      	ldr	r3, [pc, #348]	; (1f844 <sd_mmc_spi_adtc_start+0x1f8>)
   1f6e6:	2206      	movs	r2, #6
   1f6e8:	0018      	movs	r0, r3
   1f6ea:	4b57      	ldr	r3, [pc, #348]	; (1f848 <sd_mmc_spi_adtc_start+0x1fc>)
   1f6ec:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1f6ee:	2313      	movs	r3, #19
   1f6f0:	18fb      	adds	r3, r7, r3
   1f6f2:	22ff      	movs	r2, #255	; 0xff
   1f6f4:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f6f6:	231c      	movs	r3, #28
   1f6f8:	18fb      	adds	r3, r7, r3
   1f6fa:	881b      	ldrh	r3, [r3, #0]
   1f6fc:	2213      	movs	r2, #19
   1f6fe:	18b9      	adds	r1, r7, r2
   1f700:	4850      	ldr	r0, [pc, #320]	; (1f844 <sd_mmc_spi_adtc_start+0x1f8>)
   1f702:	2201      	movs	r2, #1
   1f704:	4c51      	ldr	r4, [pc, #324]	; (1f84c <sd_mmc_spi_adtc_start+0x200>)
   1f706:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1f708:	231f      	movs	r3, #31
   1f70a:	18fb      	adds	r3, r7, r3
   1f70c:	2207      	movs	r2, #7
   1f70e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1f710:	231c      	movs	r3, #28
   1f712:	18fb      	adds	r3, r7, r3
   1f714:	881b      	ldrh	r3, [r3, #0]
   1f716:	2213      	movs	r2, #19
   1f718:	18b9      	adds	r1, r7, r2
   1f71a:	484a      	ldr	r0, [pc, #296]	; (1f844 <sd_mmc_spi_adtc_start+0x1f8>)
   1f71c:	2201      	movs	r2, #1
   1f71e:	4c4b      	ldr	r4, [pc, #300]	; (1f84c <sd_mmc_spi_adtc_start+0x200>)
   1f720:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1f722:	2313      	movs	r3, #19
   1f724:	18fb      	adds	r3, r7, r3
   1f726:	781b      	ldrb	r3, [r3, #0]
   1f728:	b25b      	sxtb	r3, r3
   1f72a:	2b00      	cmp	r3, #0
   1f72c:	da10      	bge.n	1f750 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1f72e:	231f      	movs	r3, #31
   1f730:	18fb      	adds	r3, r7, r3
   1f732:	221f      	movs	r2, #31
   1f734:	18ba      	adds	r2, r7, r2
   1f736:	7812      	ldrb	r2, [r2, #0]
   1f738:	3a01      	subs	r2, #1
   1f73a:	701a      	strb	r2, [r3, #0]
   1f73c:	231f      	movs	r3, #31
   1f73e:	18fb      	adds	r3, r7, r3
   1f740:	781b      	ldrb	r3, [r3, #0]
   1f742:	2b00      	cmp	r3, #0
   1f744:	d1e4      	bne.n	1f710 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1f746:	4b3d      	ldr	r3, [pc, #244]	; (1f83c <sd_mmc_spi_adtc_start+0x1f0>)
   1f748:	2202      	movs	r2, #2
   1f74a:	701a      	strb	r2, [r3, #0]
			return false;
   1f74c:	2300      	movs	r3, #0
   1f74e:	e070      	b.n	1f832 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1f750:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1f752:	2313      	movs	r3, #19
   1f754:	18fb      	adds	r3, r7, r3
   1f756:	781b      	ldrb	r3, [r3, #0]
   1f758:	001a      	movs	r2, r3
   1f75a:	4b3d      	ldr	r3, [pc, #244]	; (1f850 <sd_mmc_spi_adtc_start+0x204>)
   1f75c:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1f75e:	2313      	movs	r3, #19
   1f760:	18fb      	adds	r3, r7, r3
   1f762:	781b      	ldrb	r3, [r3, #0]
   1f764:	001a      	movs	r2, r3
   1f766:	2308      	movs	r3, #8
   1f768:	4013      	ands	r3, r2
   1f76a:	d004      	beq.n	1f776 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1f76c:	4b33      	ldr	r3, [pc, #204]	; (1f83c <sd_mmc_spi_adtc_start+0x1f0>)
   1f76e:	2206      	movs	r2, #6
   1f770:	701a      	strb	r2, [r3, #0]
		return false;
   1f772:	2300      	movs	r3, #0
   1f774:	e05d      	b.n	1f832 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1f776:	2313      	movs	r3, #19
   1f778:	18fb      	adds	r3, r7, r3
   1f77a:	781b      	ldrb	r3, [r3, #0]
   1f77c:	001a      	movs	r2, r3
   1f77e:	2304      	movs	r3, #4
   1f780:	4013      	ands	r3, r2
   1f782:	d004      	beq.n	1f78e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1f784:	4b2d      	ldr	r3, [pc, #180]	; (1f83c <sd_mmc_spi_adtc_start+0x1f0>)
   1f786:	2209      	movs	r2, #9
   1f788:	701a      	strb	r2, [r3, #0]
		return false;
   1f78a:	2300      	movs	r3, #0
   1f78c:	e051      	b.n	1f832 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1f78e:	2313      	movs	r3, #19
   1f790:	18fb      	adds	r3, r7, r3
   1f792:	781b      	ldrb	r3, [r3, #0]
   1f794:	001a      	movs	r2, r3
   1f796:	2301      	movs	r3, #1
   1f798:	439a      	bics	r2, r3
   1f79a:	1e13      	subs	r3, r2, #0
   1f79c:	d004      	beq.n	1f7a8 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1f79e:	4b27      	ldr	r3, [pc, #156]	; (1f83c <sd_mmc_spi_adtc_start+0x1f0>)
   1f7a0:	2201      	movs	r2, #1
   1f7a2:	701a      	strb	r2, [r3, #0]
		return false;
   1f7a4:	2300      	movs	r3, #0
   1f7a6:	e044      	b.n	1f832 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1f7a8:	68fa      	ldr	r2, [r7, #12]
   1f7aa:	2380      	movs	r3, #128	; 0x80
   1f7ac:	019b      	lsls	r3, r3, #6
   1f7ae:	4013      	ands	r3, r2
   1f7b0:	d00d      	beq.n	1f7ce <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1f7b2:	4b28      	ldr	r3, [pc, #160]	; (1f854 <sd_mmc_spi_adtc_start+0x208>)
   1f7b4:	4798      	blx	r3
   1f7b6:	0003      	movs	r3, r0
   1f7b8:	001a      	movs	r2, r3
   1f7ba:	2301      	movs	r3, #1
   1f7bc:	4053      	eors	r3, r2
   1f7be:	b2db      	uxtb	r3, r3
   1f7c0:	2b00      	cmp	r3, #0
   1f7c2:	d004      	beq.n	1f7ce <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1f7c4:	4b1d      	ldr	r3, [pc, #116]	; (1f83c <sd_mmc_spi_adtc_start+0x1f0>)
   1f7c6:	2203      	movs	r2, #3
   1f7c8:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1f7ca:	2300      	movs	r3, #0
   1f7cc:	e031      	b.n	1f832 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1f7ce:	68fa      	ldr	r2, [r7, #12]
   1f7d0:	2380      	movs	r3, #128	; 0x80
   1f7d2:	009b      	lsls	r3, r3, #2
   1f7d4:	4013      	ands	r3, r2
   1f7d6:	d00e      	beq.n	1f7f6 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1f7d8:	4b1d      	ldr	r3, [pc, #116]	; (1f850 <sd_mmc_spi_adtc_start+0x204>)
   1f7da:	2200      	movs	r2, #0
   1f7dc:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1f7de:	231c      	movs	r3, #28
   1f7e0:	18fb      	adds	r3, r7, r3
   1f7e2:	881b      	ldrh	r3, [r3, #0]
   1f7e4:	491a      	ldr	r1, [pc, #104]	; (1f850 <sd_mmc_spi_adtc_start+0x204>)
   1f7e6:	4817      	ldr	r0, [pc, #92]	; (1f844 <sd_mmc_spi_adtc_start+0x1f8>)
   1f7e8:	2201      	movs	r2, #1
   1f7ea:	4c18      	ldr	r4, [pc, #96]	; (1f84c <sd_mmc_spi_adtc_start+0x200>)
   1f7ec:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1f7ee:	4b18      	ldr	r3, [pc, #96]	; (1f850 <sd_mmc_spi_adtc_start+0x204>)
   1f7f0:	681a      	ldr	r2, [r3, #0]
   1f7f2:	4b17      	ldr	r3, [pc, #92]	; (1f850 <sd_mmc_spi_adtc_start+0x204>)
   1f7f4:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1f7f6:	68fa      	ldr	r2, [r7, #12]
   1f7f8:	2380      	movs	r3, #128	; 0x80
   1f7fa:	00db      	lsls	r3, r3, #3
   1f7fc:	4013      	ands	r3, r2
   1f7fe:	d00c      	beq.n	1f81a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1f800:	231c      	movs	r3, #28
   1f802:	18fb      	adds	r3, r7, r3
   1f804:	881b      	ldrh	r3, [r3, #0]
   1f806:	4912      	ldr	r1, [pc, #72]	; (1f850 <sd_mmc_spi_adtc_start+0x204>)
   1f808:	480e      	ldr	r0, [pc, #56]	; (1f844 <sd_mmc_spi_adtc_start+0x1f8>)
   1f80a:	2204      	movs	r2, #4
   1f80c:	4c0f      	ldr	r4, [pc, #60]	; (1f84c <sd_mmc_spi_adtc_start+0x200>)
   1f80e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1f810:	4b0f      	ldr	r3, [pc, #60]	; (1f850 <sd_mmc_spi_adtc_start+0x204>)
   1f812:	681b      	ldr	r3, [r3, #0]
   1f814:	ba1a      	rev	r2, r3
   1f816:	4b0e      	ldr	r3, [pc, #56]	; (1f850 <sd_mmc_spi_adtc_start+0x204>)
   1f818:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1f81a:	4b0f      	ldr	r3, [pc, #60]	; (1f858 <sd_mmc_spi_adtc_start+0x20c>)
   1f81c:	1dba      	adds	r2, r7, #6
   1f81e:	8812      	ldrh	r2, [r2, #0]
   1f820:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1f822:	4b0e      	ldr	r3, [pc, #56]	; (1f85c <sd_mmc_spi_adtc_start+0x210>)
   1f824:	1d3a      	adds	r2, r7, #4
   1f826:	8812      	ldrh	r2, [r2, #0]
   1f828:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1f82a:	4b0d      	ldr	r3, [pc, #52]	; (1f860 <sd_mmc_spi_adtc_start+0x214>)
   1f82c:	2200      	movs	r2, #0
   1f82e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1f830:	2301      	movs	r3, #1
}
   1f832:	0018      	movs	r0, r3
   1f834:	46bd      	mov	sp, r7
   1f836:	b009      	add	sp, #36	; 0x24
   1f838:	bd90      	pop	{r4, r7, pc}
   1f83a:	46c0      	nop			; (mov r8, r8)
   1f83c:	20003e7b 	.word	0x20003e7b
   1f840:	0001f1b5 	.word	0x0001f1b5
   1f844:	20003e3c 	.word	0x20003e3c
   1f848:	00027c11 	.word	0x00027c11
   1f84c:	000279ed 	.word	0x000279ed
   1f850:	20003e7c 	.word	0x20003e7c
   1f854:	0001f271 	.word	0x0001f271
   1f858:	20003e84 	.word	0x20003e84
   1f85c:	20003e86 	.word	0x20003e86
   1f860:	20003e80 	.word	0x20003e80

0001f864 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1f864:	b580      	push	{r7, lr}
   1f866:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1f868:	4b02      	ldr	r3, [pc, #8]	; (1f874 <sd_mmc_spi_get_response+0x10>)
   1f86a:	681b      	ldr	r3, [r3, #0]
}
   1f86c:	0018      	movs	r0, r3
   1f86e:	46bd      	mov	sp, r7
   1f870:	bd80      	pop	{r7, pc}
   1f872:	46c0      	nop			; (mov r8, r8)
   1f874:	20003e7c 	.word	0x20003e7c

0001f878 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1f878:	b590      	push	{r4, r7, lr}
   1f87a:	b085      	sub	sp, #20
   1f87c:	af00      	add	r7, sp, #0
   1f87e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1f880:	230e      	movs	r3, #14
   1f882:	18fb      	adds	r3, r7, r3
   1f884:	22ff      	movs	r2, #255	; 0xff
   1f886:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f888:	4b1c      	ldr	r3, [pc, #112]	; (1f8fc <sd_mmc_spi_read_word+0x84>)
   1f88a:	2200      	movs	r2, #0
   1f88c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f88e:	4b1c      	ldr	r3, [pc, #112]	; (1f900 <sd_mmc_spi_read_word+0x88>)
   1f890:	681a      	ldr	r2, [r3, #0]
   1f892:	4b1c      	ldr	r3, [pc, #112]	; (1f904 <sd_mmc_spi_read_word+0x8c>)
   1f894:	881b      	ldrh	r3, [r3, #0]
   1f896:	0019      	movs	r1, r3
   1f898:	4b1b      	ldr	r3, [pc, #108]	; (1f908 <sd_mmc_spi_read_word+0x90>)
   1f89a:	0010      	movs	r0, r2
   1f89c:	4798      	blx	r3
   1f89e:	1e0b      	subs	r3, r1, #0
   1f8a0:	d10a      	bne.n	1f8b8 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1f8a2:	4b1a      	ldr	r3, [pc, #104]	; (1f90c <sd_mmc_spi_read_word+0x94>)
   1f8a4:	4798      	blx	r3
   1f8a6:	0003      	movs	r3, r0
   1f8a8:	001a      	movs	r2, r3
   1f8aa:	2301      	movs	r3, #1
   1f8ac:	4053      	eors	r3, r2
   1f8ae:	b2db      	uxtb	r3, r3
   1f8b0:	2b00      	cmp	r3, #0
   1f8b2:	d001      	beq.n	1f8b8 <sd_mmc_spi_read_word+0x40>
			return false;
   1f8b4:	2300      	movs	r3, #0
   1f8b6:	e01d      	b.n	1f8f4 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1f8b8:	230e      	movs	r3, #14
   1f8ba:	18fb      	adds	r3, r7, r3
   1f8bc:	881b      	ldrh	r3, [r3, #0]
   1f8be:	1d39      	adds	r1, r7, #4
   1f8c0:	4813      	ldr	r0, [pc, #76]	; (1f910 <sd_mmc_spi_read_word+0x98>)
   1f8c2:	2204      	movs	r2, #4
   1f8c4:	4c13      	ldr	r4, [pc, #76]	; (1f914 <sd_mmc_spi_read_word+0x9c>)
   1f8c6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1f8c8:	687b      	ldr	r3, [r7, #4]
   1f8ca:	687a      	ldr	r2, [r7, #4]
   1f8cc:	6812      	ldr	r2, [r2, #0]
   1f8ce:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1f8d0:	4b0b      	ldr	r3, [pc, #44]	; (1f900 <sd_mmc_spi_read_word+0x88>)
   1f8d2:	681b      	ldr	r3, [r3, #0]
   1f8d4:	1d1a      	adds	r2, r3, #4
   1f8d6:	4b0a      	ldr	r3, [pc, #40]	; (1f900 <sd_mmc_spi_read_word+0x88>)
   1f8d8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1f8da:	4b09      	ldr	r3, [pc, #36]	; (1f900 <sd_mmc_spi_read_word+0x88>)
   1f8dc:	681a      	ldr	r2, [r3, #0]
   1f8de:	4b09      	ldr	r3, [pc, #36]	; (1f904 <sd_mmc_spi_read_word+0x8c>)
   1f8e0:	881b      	ldrh	r3, [r3, #0]
   1f8e2:	0019      	movs	r1, r3
   1f8e4:	4b08      	ldr	r3, [pc, #32]	; (1f908 <sd_mmc_spi_read_word+0x90>)
   1f8e6:	0010      	movs	r0, r2
   1f8e8:	4798      	blx	r3
   1f8ea:	1e0b      	subs	r3, r1, #0
   1f8ec:	d101      	bne.n	1f8f2 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1f8ee:	4b0a      	ldr	r3, [pc, #40]	; (1f918 <sd_mmc_spi_read_word+0xa0>)
   1f8f0:	4798      	blx	r3
	}
	return true;
   1f8f2:	2301      	movs	r3, #1
}
   1f8f4:	0018      	movs	r0, r3
   1f8f6:	46bd      	mov	sp, r7
   1f8f8:	b005      	add	sp, #20
   1f8fa:	bd90      	pop	{r4, r7, pc}
   1f8fc:	20003e7b 	.word	0x20003e7b
   1f900:	20003e80 	.word	0x20003e80
   1f904:	20003e84 	.word	0x20003e84
   1f908:	000324bd 	.word	0x000324bd
   1f90c:	0001f2dd 	.word	0x0001f2dd
   1f910:	20003e3c 	.word	0x20003e3c
   1f914:	000279ed 	.word	0x000279ed
   1f918:	0001f361 	.word	0x0001f361

0001f91c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f91c:	b590      	push	{r4, r7, lr}
   1f91e:	b085      	sub	sp, #20
   1f920:	af00      	add	r7, sp, #0
   1f922:	6078      	str	r0, [r7, #4]
   1f924:	000a      	movs	r2, r1
   1f926:	1cbb      	adds	r3, r7, #2
   1f928:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1f92a:	230a      	movs	r3, #10
   1f92c:	18fb      	adds	r3, r7, r3
   1f92e:	22ff      	movs	r2, #255	; 0xff
   1f930:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f932:	4b1c      	ldr	r3, [pc, #112]	; (1f9a4 <sd_mmc_spi_start_read_blocks+0x88>)
   1f934:	2200      	movs	r2, #0
   1f936:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f938:	2300      	movs	r3, #0
   1f93a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f93c:	e025      	b.n	1f98a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1f93e:	4b1a      	ldr	r3, [pc, #104]	; (1f9a8 <sd_mmc_spi_start_read_blocks+0x8c>)
   1f940:	4798      	blx	r3
   1f942:	0003      	movs	r3, r0
   1f944:	001a      	movs	r2, r3
   1f946:	2301      	movs	r3, #1
   1f948:	4053      	eors	r3, r2
   1f94a:	b2db      	uxtb	r3, r3
   1f94c:	2b00      	cmp	r3, #0
   1f94e:	d001      	beq.n	1f954 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1f950:	2300      	movs	r3, #0
   1f952:	e022      	b.n	1f99a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1f954:	687a      	ldr	r2, [r7, #4]
   1f956:	68fb      	ldr	r3, [r7, #12]
   1f958:	18d1      	adds	r1, r2, r3
   1f95a:	4b14      	ldr	r3, [pc, #80]	; (1f9ac <sd_mmc_spi_start_read_blocks+0x90>)
   1f95c:	881a      	ldrh	r2, [r3, #0]
   1f95e:	230a      	movs	r3, #10
   1f960:	18fb      	adds	r3, r7, r3
   1f962:	881b      	ldrh	r3, [r3, #0]
   1f964:	4812      	ldr	r0, [pc, #72]	; (1f9b0 <sd_mmc_spi_start_read_blocks+0x94>)
   1f966:	4c13      	ldr	r4, [pc, #76]	; (1f9b4 <sd_mmc_spi_start_read_blocks+0x98>)
   1f968:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1f96a:	4b10      	ldr	r3, [pc, #64]	; (1f9ac <sd_mmc_spi_start_read_blocks+0x90>)
   1f96c:	881b      	ldrh	r3, [r3, #0]
   1f96e:	001a      	movs	r2, r3
   1f970:	68fb      	ldr	r3, [r7, #12]
   1f972:	189b      	adds	r3, r3, r2
   1f974:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1f976:	4b0d      	ldr	r3, [pc, #52]	; (1f9ac <sd_mmc_spi_start_read_blocks+0x90>)
   1f978:	881b      	ldrh	r3, [r3, #0]
   1f97a:	001a      	movs	r2, r3
   1f97c:	4b0e      	ldr	r3, [pc, #56]	; (1f9b8 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f97e:	681b      	ldr	r3, [r3, #0]
   1f980:	18d2      	adds	r2, r2, r3
   1f982:	4b0d      	ldr	r3, [pc, #52]	; (1f9b8 <sd_mmc_spi_start_read_blocks+0x9c>)
   1f984:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1f986:	4b0d      	ldr	r3, [pc, #52]	; (1f9bc <sd_mmc_spi_start_read_blocks+0xa0>)
   1f988:	4798      	blx	r3
	while (nb_block--) {
   1f98a:	1cbb      	adds	r3, r7, #2
   1f98c:	881b      	ldrh	r3, [r3, #0]
   1f98e:	1cba      	adds	r2, r7, #2
   1f990:	1e59      	subs	r1, r3, #1
   1f992:	8011      	strh	r1, [r2, #0]
   1f994:	2b00      	cmp	r3, #0
   1f996:	d1d2      	bne.n	1f93e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1f998:	2301      	movs	r3, #1
}
   1f99a:	0018      	movs	r0, r3
   1f99c:	46bd      	mov	sp, r7
   1f99e:	b005      	add	sp, #20
   1f9a0:	bd90      	pop	{r4, r7, pc}
   1f9a2:	46c0      	nop			; (mov r8, r8)
   1f9a4:	20003e7b 	.word	0x20003e7b
   1f9a8:	0001f2dd 	.word	0x0001f2dd
   1f9ac:	20003e84 	.word	0x20003e84
   1f9b0:	20003e3c 	.word	0x20003e3c
   1f9b4:	000279ed 	.word	0x000279ed
   1f9b8:	20003e80 	.word	0x20003e80
   1f9bc:	0001f361 	.word	0x0001f361

0001f9c0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1f9c0:	b580      	push	{r7, lr}
   1f9c2:	af00      	add	r7, sp, #0
	return true;
   1f9c4:	2301      	movs	r3, #1
}
   1f9c6:	0018      	movs	r0, r3
   1f9c8:	46bd      	mov	sp, r7
   1f9ca:	bd80      	pop	{r7, pc}

0001f9cc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f9cc:	b580      	push	{r7, lr}
   1f9ce:	b084      	sub	sp, #16
   1f9d0:	af00      	add	r7, sp, #0
   1f9d2:	6078      	str	r0, [r7, #4]
   1f9d4:	000a      	movs	r2, r1
   1f9d6:	1cbb      	adds	r3, r7, #2
   1f9d8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1f9da:	4b24      	ldr	r3, [pc, #144]	; (1fa6c <sd_mmc_spi_start_write_blocks+0xa0>)
   1f9dc:	2200      	movs	r2, #0
   1f9de:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1f9e0:	2300      	movs	r3, #0
   1f9e2:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1f9e4:	e035      	b.n	1fa52 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1f9e6:	4b22      	ldr	r3, [pc, #136]	; (1fa70 <sd_mmc_spi_start_write_blocks+0xa4>)
   1f9e8:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1f9ea:	687a      	ldr	r2, [r7, #4]
   1f9ec:	68fb      	ldr	r3, [r7, #12]
   1f9ee:	18d1      	adds	r1, r2, r3
   1f9f0:	4b20      	ldr	r3, [pc, #128]	; (1fa74 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f9f2:	881a      	ldrh	r2, [r3, #0]
   1f9f4:	4b20      	ldr	r3, [pc, #128]	; (1fa78 <sd_mmc_spi_start_write_blocks+0xac>)
   1f9f6:	0018      	movs	r0, r3
   1f9f8:	4b20      	ldr	r3, [pc, #128]	; (1fa7c <sd_mmc_spi_start_write_blocks+0xb0>)
   1f9fa:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1f9fc:	4b1d      	ldr	r3, [pc, #116]	; (1fa74 <sd_mmc_spi_start_write_blocks+0xa8>)
   1f9fe:	881b      	ldrh	r3, [r3, #0]
   1fa00:	001a      	movs	r2, r3
   1fa02:	68fb      	ldr	r3, [r7, #12]
   1fa04:	189b      	adds	r3, r3, r2
   1fa06:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1fa08:	4b1a      	ldr	r3, [pc, #104]	; (1fa74 <sd_mmc_spi_start_write_blocks+0xa8>)
   1fa0a:	881b      	ldrh	r3, [r3, #0]
   1fa0c:	001a      	movs	r2, r3
   1fa0e:	4b1c      	ldr	r3, [pc, #112]	; (1fa80 <sd_mmc_spi_start_write_blocks+0xb4>)
   1fa10:	681b      	ldr	r3, [r3, #0]
   1fa12:	18d2      	adds	r2, r2, r3
   1fa14:	4b1a      	ldr	r3, [pc, #104]	; (1fa80 <sd_mmc_spi_start_write_blocks+0xb4>)
   1fa16:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1fa18:	4b1a      	ldr	r3, [pc, #104]	; (1fa84 <sd_mmc_spi_start_write_blocks+0xb8>)
   1fa1a:	4798      	blx	r3
   1fa1c:	0003      	movs	r3, r0
   1fa1e:	001a      	movs	r2, r3
   1fa20:	2301      	movs	r3, #1
   1fa22:	4053      	eors	r3, r2
   1fa24:	b2db      	uxtb	r3, r3
   1fa26:	2b00      	cmp	r3, #0
   1fa28:	d001      	beq.n	1fa2e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1fa2a:	2300      	movs	r3, #0
   1fa2c:	e019      	b.n	1fa62 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1fa2e:	1cbb      	adds	r3, r7, #2
   1fa30:	881b      	ldrh	r3, [r3, #0]
   1fa32:	2b00      	cmp	r3, #0
   1fa34:	d00d      	beq.n	1fa52 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1fa36:	4b14      	ldr	r3, [pc, #80]	; (1fa88 <sd_mmc_spi_start_write_blocks+0xbc>)
   1fa38:	4798      	blx	r3
   1fa3a:	0003      	movs	r3, r0
   1fa3c:	001a      	movs	r2, r3
   1fa3e:	2301      	movs	r3, #1
   1fa40:	4053      	eors	r3, r2
   1fa42:	b2db      	uxtb	r3, r3
   1fa44:	2b00      	cmp	r3, #0
   1fa46:	d004      	beq.n	1fa52 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fa48:	4b08      	ldr	r3, [pc, #32]	; (1fa6c <sd_mmc_spi_start_write_blocks+0xa0>)
   1fa4a:	2205      	movs	r2, #5
   1fa4c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1fa4e:	2300      	movs	r3, #0
   1fa50:	e007      	b.n	1fa62 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1fa52:	1cbb      	adds	r3, r7, #2
   1fa54:	881b      	ldrh	r3, [r3, #0]
   1fa56:	1cba      	adds	r2, r7, #2
   1fa58:	1e59      	subs	r1, r3, #1
   1fa5a:	8011      	strh	r1, [r2, #0]
   1fa5c:	2b00      	cmp	r3, #0
   1fa5e:	d1c2      	bne.n	1f9e6 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1fa60:	2301      	movs	r3, #1
}
   1fa62:	0018      	movs	r0, r3
   1fa64:	46bd      	mov	sp, r7
   1fa66:	b004      	add	sp, #16
   1fa68:	bd80      	pop	{r7, pc}
   1fa6a:	46c0      	nop			; (mov r8, r8)
   1fa6c:	20003e7b 	.word	0x20003e7b
   1fa70:	0001f38d 	.word	0x0001f38d
   1fa74:	20003e84 	.word	0x20003e84
   1fa78:	20003e3c 	.word	0x20003e3c
   1fa7c:	00027c11 	.word	0x00027c11
   1fa80:	20003e80 	.word	0x20003e80
   1fa84:	0001f3dd 	.word	0x0001f3dd
   1fa88:	0001f271 	.word	0x0001f271

0001fa8c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1fa8c:	b580      	push	{r7, lr}
   1fa8e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1fa90:	4b09      	ldr	r3, [pc, #36]	; (1fab8 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1fa92:	4798      	blx	r3
   1fa94:	0003      	movs	r3, r0
   1fa96:	001a      	movs	r2, r3
   1fa98:	2301      	movs	r3, #1
   1fa9a:	4053      	eors	r3, r2
   1fa9c:	b2db      	uxtb	r3, r3
   1fa9e:	2b00      	cmp	r3, #0
   1faa0:	d004      	beq.n	1faac <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1faa2:	4b06      	ldr	r3, [pc, #24]	; (1fabc <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1faa4:	2205      	movs	r2, #5
   1faa6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1faa8:	2300      	movs	r3, #0
   1faaa:	e002      	b.n	1fab2 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1faac:	4b04      	ldr	r3, [pc, #16]	; (1fac0 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1faae:	4798      	blx	r3
   1fab0:	0003      	movs	r3, r0
}
   1fab2:	0018      	movs	r0, r3
   1fab4:	46bd      	mov	sp, r7
   1fab6:	bd80      	pop	{r7, pc}
   1fab8:	0001f271 	.word	0x0001f271
   1fabc:	20003e7b 	.word	0x20003e7b
   1fac0:	0001f471 	.word	0x0001f471

0001fac4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1fac4:	b580      	push	{r7, lr}
   1fac6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1fac8:	2000      	movs	r0, #0
   1faca:	4b0f      	ldr	r3, [pc, #60]	; (1fb08 <delay_init+0x44>)
   1facc:	4798      	blx	r3
   1face:	0002      	movs	r2, r0
   1fad0:	4b0e      	ldr	r3, [pc, #56]	; (1fb0c <delay_init+0x48>)
   1fad2:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1fad4:	4b0d      	ldr	r3, [pc, #52]	; (1fb0c <delay_init+0x48>)
   1fad6:	6818      	ldr	r0, [r3, #0]
   1fad8:	4b0d      	ldr	r3, [pc, #52]	; (1fb10 <delay_init+0x4c>)
   1fada:	22fa      	movs	r2, #250	; 0xfa
   1fadc:	0091      	lsls	r1, r2, #2
   1fade:	4798      	blx	r3
   1fae0:	0003      	movs	r3, r0
   1fae2:	001a      	movs	r2, r3
   1fae4:	4b09      	ldr	r3, [pc, #36]	; (1fb0c <delay_init+0x48>)
   1fae6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1fae8:	4b08      	ldr	r3, [pc, #32]	; (1fb0c <delay_init+0x48>)
   1faea:	6818      	ldr	r0, [r3, #0]
   1faec:	4b08      	ldr	r3, [pc, #32]	; (1fb10 <delay_init+0x4c>)
   1faee:	22fa      	movs	r2, #250	; 0xfa
   1faf0:	0091      	lsls	r1, r2, #2
   1faf2:	4798      	blx	r3
   1faf4:	0003      	movs	r3, r0
   1faf6:	001a      	movs	r2, r3
   1faf8:	4b06      	ldr	r3, [pc, #24]	; (1fb14 <delay_init+0x50>)
   1fafa:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1fafc:	4b06      	ldr	r3, [pc, #24]	; (1fb18 <delay_init+0x54>)
   1fafe:	2205      	movs	r2, #5
   1fb00:	601a      	str	r2, [r3, #0]
}
   1fb02:	46c0      	nop			; (mov r8, r8)
   1fb04:	46bd      	mov	sp, r7
   1fb06:	bd80      	pop	{r7, pc}
   1fb08:	00029795 	.word	0x00029795
   1fb0c:	200000c0 	.word	0x200000c0
   1fb10:	000323b1 	.word	0x000323b1
   1fb14:	200000c4 	.word	0x200000c4
   1fb18:	e000e010 	.word	0xe000e010

0001fb1c <system_pinmux_get_group_from_gpio_pin>:
{
   1fb1c:	b580      	push	{r7, lr}
   1fb1e:	b084      	sub	sp, #16
   1fb20:	af00      	add	r7, sp, #0
   1fb22:	0002      	movs	r2, r0
   1fb24:	1dfb      	adds	r3, r7, #7
   1fb26:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1fb28:	230f      	movs	r3, #15
   1fb2a:	18fb      	adds	r3, r7, r3
   1fb2c:	1dfa      	adds	r2, r7, #7
   1fb2e:	7812      	ldrb	r2, [r2, #0]
   1fb30:	09d2      	lsrs	r2, r2, #7
   1fb32:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fb34:	230e      	movs	r3, #14
   1fb36:	18fb      	adds	r3, r7, r3
   1fb38:	1dfa      	adds	r2, r7, #7
   1fb3a:	7812      	ldrb	r2, [r2, #0]
   1fb3c:	0952      	lsrs	r2, r2, #5
   1fb3e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fb40:	4b0d      	ldr	r3, [pc, #52]	; (1fb78 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fb42:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fb44:	230f      	movs	r3, #15
   1fb46:	18fb      	adds	r3, r7, r3
   1fb48:	781b      	ldrb	r3, [r3, #0]
   1fb4a:	2b00      	cmp	r3, #0
   1fb4c:	d10f      	bne.n	1fb6e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fb4e:	230f      	movs	r3, #15
   1fb50:	18fb      	adds	r3, r7, r3
   1fb52:	781b      	ldrb	r3, [r3, #0]
   1fb54:	009b      	lsls	r3, r3, #2
   1fb56:	2210      	movs	r2, #16
   1fb58:	4694      	mov	ip, r2
   1fb5a:	44bc      	add	ip, r7
   1fb5c:	4463      	add	r3, ip
   1fb5e:	3b08      	subs	r3, #8
   1fb60:	681a      	ldr	r2, [r3, #0]
   1fb62:	230e      	movs	r3, #14
   1fb64:	18fb      	adds	r3, r7, r3
   1fb66:	781b      	ldrb	r3, [r3, #0]
   1fb68:	01db      	lsls	r3, r3, #7
   1fb6a:	18d3      	adds	r3, r2, r3
   1fb6c:	e000      	b.n	1fb70 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fb6e:	2300      	movs	r3, #0
}
   1fb70:	0018      	movs	r0, r3
   1fb72:	46bd      	mov	sp, r7
   1fb74:	b004      	add	sp, #16
   1fb76:	bd80      	pop	{r7, pc}
   1fb78:	41004400 	.word	0x41004400

0001fb7c <system_interrupt_enable_global>:
{
   1fb7c:	b580      	push	{r7, lr}
   1fb7e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1fb80:	4b04      	ldr	r3, [pc, #16]	; (1fb94 <system_interrupt_enable_global+0x18>)
   1fb82:	2201      	movs	r2, #1
   1fb84:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1fb86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1fb8a:	b662      	cpsie	i
}
   1fb8c:	46c0      	nop			; (mov r8, r8)
   1fb8e:	46bd      	mov	sp, r7
   1fb90:	bd80      	pop	{r7, pc}
   1fb92:	46c0      	nop			; (mov r8, r8)
   1fb94:	200000ca 	.word	0x200000ca

0001fb98 <port_get_group_from_gpio_pin>:
{
   1fb98:	b580      	push	{r7, lr}
   1fb9a:	b082      	sub	sp, #8
   1fb9c:	af00      	add	r7, sp, #0
   1fb9e:	0002      	movs	r2, r0
   1fba0:	1dfb      	adds	r3, r7, #7
   1fba2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fba4:	1dfb      	adds	r3, r7, #7
   1fba6:	781b      	ldrb	r3, [r3, #0]
   1fba8:	0018      	movs	r0, r3
   1fbaa:	4b03      	ldr	r3, [pc, #12]	; (1fbb8 <port_get_group_from_gpio_pin+0x20>)
   1fbac:	4798      	blx	r3
   1fbae:	0003      	movs	r3, r0
}
   1fbb0:	0018      	movs	r0, r3
   1fbb2:	46bd      	mov	sp, r7
   1fbb4:	b002      	add	sp, #8
   1fbb6:	bd80      	pop	{r7, pc}
   1fbb8:	0001fb1d 	.word	0x0001fb1d

0001fbbc <port_get_config_defaults>:
{
   1fbbc:	b580      	push	{r7, lr}
   1fbbe:	b082      	sub	sp, #8
   1fbc0:	af00      	add	r7, sp, #0
   1fbc2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fbc4:	687b      	ldr	r3, [r7, #4]
   1fbc6:	2200      	movs	r2, #0
   1fbc8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1fbca:	687b      	ldr	r3, [r7, #4]
   1fbcc:	2201      	movs	r2, #1
   1fbce:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1fbd0:	687b      	ldr	r3, [r7, #4]
   1fbd2:	2200      	movs	r2, #0
   1fbd4:	709a      	strb	r2, [r3, #2]
}
   1fbd6:	46c0      	nop			; (mov r8, r8)
   1fbd8:	46bd      	mov	sp, r7
   1fbda:	b002      	add	sp, #8
   1fbdc:	bd80      	pop	{r7, pc}
	...

0001fbe0 <port_pin_set_output_level>:
{
   1fbe0:	b580      	push	{r7, lr}
   1fbe2:	b084      	sub	sp, #16
   1fbe4:	af00      	add	r7, sp, #0
   1fbe6:	0002      	movs	r2, r0
   1fbe8:	1dfb      	adds	r3, r7, #7
   1fbea:	701a      	strb	r2, [r3, #0]
   1fbec:	1dbb      	adds	r3, r7, #6
   1fbee:	1c0a      	adds	r2, r1, #0
   1fbf0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1fbf2:	1dfb      	adds	r3, r7, #7
   1fbf4:	781b      	ldrb	r3, [r3, #0]
   1fbf6:	0018      	movs	r0, r3
   1fbf8:	4b0d      	ldr	r3, [pc, #52]	; (1fc30 <port_pin_set_output_level+0x50>)
   1fbfa:	4798      	blx	r3
   1fbfc:	0003      	movs	r3, r0
   1fbfe:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1fc00:	1dfb      	adds	r3, r7, #7
   1fc02:	781b      	ldrb	r3, [r3, #0]
   1fc04:	221f      	movs	r2, #31
   1fc06:	4013      	ands	r3, r2
   1fc08:	2201      	movs	r2, #1
   1fc0a:	409a      	lsls	r2, r3
   1fc0c:	0013      	movs	r3, r2
   1fc0e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1fc10:	1dbb      	adds	r3, r7, #6
   1fc12:	781b      	ldrb	r3, [r3, #0]
   1fc14:	2b00      	cmp	r3, #0
   1fc16:	d003      	beq.n	1fc20 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1fc18:	68fb      	ldr	r3, [r7, #12]
   1fc1a:	68ba      	ldr	r2, [r7, #8]
   1fc1c:	619a      	str	r2, [r3, #24]
}
   1fc1e:	e002      	b.n	1fc26 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1fc20:	68fb      	ldr	r3, [r7, #12]
   1fc22:	68ba      	ldr	r2, [r7, #8]
   1fc24:	615a      	str	r2, [r3, #20]
}
   1fc26:	46c0      	nop			; (mov r8, r8)
   1fc28:	46bd      	mov	sp, r7
   1fc2a:	b004      	add	sp, #16
   1fc2c:	bd80      	pop	{r7, pc}
   1fc2e:	46c0      	nop			; (mov r8, r8)
   1fc30:	0001fb99 	.word	0x0001fb99

0001fc34 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1fc34:	b580      	push	{r7, lr}
   1fc36:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1fc38:	4b04      	ldr	r3, [pc, #16]	; (1fc4c <chip_isr+0x18>)
   1fc3a:	681b      	ldr	r3, [r3, #0]
   1fc3c:	2b00      	cmp	r3, #0
   1fc3e:	d002      	beq.n	1fc46 <chip_isr+0x12>
		gpfIsr();
   1fc40:	4b02      	ldr	r3, [pc, #8]	; (1fc4c <chip_isr+0x18>)
   1fc42:	681b      	ldr	r3, [r3, #0]
   1fc44:	4798      	blx	r3
	}
}
   1fc46:	46c0      	nop			; (mov r8, r8)
   1fc48:	46bd      	mov	sp, r7
   1fc4a:	bd80      	pop	{r7, pc}
   1fc4c:	20003e88 	.word	0x20003e88

0001fc50 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1fc50:	b580      	push	{r7, lr}
   1fc52:	b082      	sub	sp, #8
   1fc54:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1fc56:	1d3b      	adds	r3, r7, #4
   1fc58:	0018      	movs	r0, r3
   1fc5a:	4b10      	ldr	r3, [pc, #64]	; (1fc9c <init_chip_pins+0x4c>)
   1fc5c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1fc5e:	1d3b      	adds	r3, r7, #4
   1fc60:	2201      	movs	r2, #1
   1fc62:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1fc64:	1d3b      	adds	r3, r7, #4
   1fc66:	0019      	movs	r1, r3
   1fc68:	201b      	movs	r0, #27
   1fc6a:	4b0d      	ldr	r3, [pc, #52]	; (1fca0 <init_chip_pins+0x50>)
   1fc6c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1fc6e:	1d3b      	adds	r3, r7, #4
   1fc70:	0019      	movs	r1, r3
   1fc72:	201c      	movs	r0, #28
   1fc74:	4b0a      	ldr	r3, [pc, #40]	; (1fca0 <init_chip_pins+0x50>)
   1fc76:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1fc78:	1d3b      	adds	r3, r7, #4
   1fc7a:	0019      	movs	r1, r3
   1fc7c:	2028      	movs	r0, #40	; 0x28
   1fc7e:	4b08      	ldr	r3, [pc, #32]	; (1fca0 <init_chip_pins+0x50>)
   1fc80:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1fc82:	2100      	movs	r1, #0
   1fc84:	201c      	movs	r0, #28
   1fc86:	4b07      	ldr	r3, [pc, #28]	; (1fca4 <init_chip_pins+0x54>)
   1fc88:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1fc8a:	2100      	movs	r1, #0
   1fc8c:	201b      	movs	r0, #27
   1fc8e:	4b05      	ldr	r3, [pc, #20]	; (1fca4 <init_chip_pins+0x54>)
   1fc90:	4798      	blx	r3
}
   1fc92:	46c0      	nop			; (mov r8, r8)
   1fc94:	46bd      	mov	sp, r7
   1fc96:	b002      	add	sp, #8
   1fc98:	bd80      	pop	{r7, pc}
   1fc9a:	46c0      	nop			; (mov r8, r8)
   1fc9c:	0001fbbd 	.word	0x0001fbbd
   1fca0:	000263dd 	.word	0x000263dd
   1fca4:	0001fbe1 	.word	0x0001fbe1

0001fca8 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1fca8:	b580      	push	{r7, lr}
   1fcaa:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1fcac:	4b0b      	ldr	r3, [pc, #44]	; (1fcdc <nm_bsp_init+0x34>)
   1fcae:	2200      	movs	r2, #0
   1fcb0:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1fcb2:	4b0b      	ldr	r3, [pc, #44]	; (1fce0 <nm_bsp_init+0x38>)
   1fcb4:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1fcb6:	4b0b      	ldr	r3, [pc, #44]	; (1fce4 <nm_bsp_init+0x3c>)
   1fcb8:	681b      	ldr	r3, [r3, #0]
   1fcba:	2201      	movs	r2, #1
   1fcbc:	4013      	ands	r3, r2
   1fcbe:	d004      	beq.n	1fcca <nm_bsp_init+0x22>
   1fcc0:	4b08      	ldr	r3, [pc, #32]	; (1fce4 <nm_bsp_init+0x3c>)
   1fcc2:	681b      	ldr	r3, [r3, #0]
   1fcc4:	2202      	movs	r2, #2
   1fcc6:	4013      	ands	r3, r2
   1fcc8:	d101      	bne.n	1fcce <nm_bsp_init+0x26>
	    delay_init();
   1fcca:	4b07      	ldr	r3, [pc, #28]	; (1fce8 <nm_bsp_init+0x40>)
   1fccc:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1fcce:	4b07      	ldr	r3, [pc, #28]	; (1fcec <nm_bsp_init+0x44>)
   1fcd0:	4798      	blx	r3

	return M2M_SUCCESS;
   1fcd2:	2300      	movs	r3, #0
}
   1fcd4:	0018      	movs	r0, r3
   1fcd6:	46bd      	mov	sp, r7
   1fcd8:	bd80      	pop	{r7, pc}
   1fcda:	46c0      	nop			; (mov r8, r8)
   1fcdc:	20003e88 	.word	0x20003e88
   1fce0:	0001fc51 	.word	0x0001fc51
   1fce4:	e000e010 	.word	0xe000e010
   1fce8:	0001fac5 	.word	0x0001fac5
   1fcec:	0001fb7d 	.word	0x0001fb7d

0001fcf0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1fcf0:	b580      	push	{r7, lr}
   1fcf2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1fcf4:	2100      	movs	r1, #0
   1fcf6:	201c      	movs	r0, #28
   1fcf8:	4b0b      	ldr	r3, [pc, #44]	; (1fd28 <nm_bsp_reset+0x38>)
   1fcfa:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1fcfc:	2100      	movs	r1, #0
   1fcfe:	201b      	movs	r0, #27
   1fd00:	4b09      	ldr	r3, [pc, #36]	; (1fd28 <nm_bsp_reset+0x38>)
   1fd02:	4798      	blx	r3
	nm_bsp_sleep(1);
   1fd04:	2001      	movs	r0, #1
   1fd06:	4b09      	ldr	r3, [pc, #36]	; (1fd2c <nm_bsp_reset+0x3c>)
   1fd08:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1fd0a:	2101      	movs	r1, #1
   1fd0c:	201c      	movs	r0, #28
   1fd0e:	4b06      	ldr	r3, [pc, #24]	; (1fd28 <nm_bsp_reset+0x38>)
   1fd10:	4798      	blx	r3
	nm_bsp_sleep(10);
   1fd12:	200a      	movs	r0, #10
   1fd14:	4b05      	ldr	r3, [pc, #20]	; (1fd2c <nm_bsp_reset+0x3c>)
   1fd16:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1fd18:	2101      	movs	r1, #1
   1fd1a:	201b      	movs	r0, #27
   1fd1c:	4b02      	ldr	r3, [pc, #8]	; (1fd28 <nm_bsp_reset+0x38>)
   1fd1e:	4798      	blx	r3
}
   1fd20:	46c0      	nop			; (mov r8, r8)
   1fd22:	46bd      	mov	sp, r7
   1fd24:	bd80      	pop	{r7, pc}
   1fd26:	46c0      	nop			; (mov r8, r8)
   1fd28:	0001fbe1 	.word	0x0001fbe1
   1fd2c:	0001fd31 	.word	0x0001fd31

0001fd30 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1fd30:	b580      	push	{r7, lr}
   1fd32:	b082      	sub	sp, #8
   1fd34:	af00      	add	r7, sp, #0
   1fd36:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1fd38:	687b      	ldr	r3, [r7, #4]
   1fd3a:	0018      	movs	r0, r3
   1fd3c:	4b02      	ldr	r3, [pc, #8]	; (1fd48 <nm_bsp_sleep+0x18>)
   1fd3e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1fd40:	46c0      	nop			; (mov r8, r8)
   1fd42:	46bd      	mov	sp, r7
   1fd44:	b002      	add	sp, #8
   1fd46:	bd80      	pop	{r7, pc}
   1fd48:	0001bf01 	.word	0x0001bf01

0001fd4c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1fd4c:	b580      	push	{r7, lr}
   1fd4e:	b086      	sub	sp, #24
   1fd50:	af00      	add	r7, sp, #0
   1fd52:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1fd54:	4b15      	ldr	r3, [pc, #84]	; (1fdac <nm_bsp_register_isr+0x60>)
   1fd56:	687a      	ldr	r2, [r7, #4]
   1fd58:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1fd5a:	230c      	movs	r3, #12
   1fd5c:	18fb      	adds	r3, r7, r3
   1fd5e:	0018      	movs	r0, r3
   1fd60:	4b13      	ldr	r3, [pc, #76]	; (1fdb0 <nm_bsp_register_isr+0x64>)
   1fd62:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1fd64:	230c      	movs	r3, #12
   1fd66:	18fb      	adds	r3, r7, r3
   1fd68:	2229      	movs	r2, #41	; 0x29
   1fd6a:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1fd6c:	230c      	movs	r3, #12
   1fd6e:	18fb      	adds	r3, r7, r3
   1fd70:	2200      	movs	r2, #0
   1fd72:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1fd74:	230c      	movs	r3, #12
   1fd76:	18fb      	adds	r3, r7, r3
   1fd78:	2201      	movs	r2, #1
   1fd7a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1fd7c:	230c      	movs	r3, #12
   1fd7e:	18fb      	adds	r3, r7, r3
   1fd80:	2202      	movs	r2, #2
   1fd82:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1fd84:	230c      	movs	r3, #12
   1fd86:	18fb      	adds	r3, r7, r3
   1fd88:	0019      	movs	r1, r3
   1fd8a:	2009      	movs	r0, #9
   1fd8c:	4b09      	ldr	r3, [pc, #36]	; (1fdb4 <nm_bsp_register_isr+0x68>)
   1fd8e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1fd90:	4b09      	ldr	r3, [pc, #36]	; (1fdb8 <nm_bsp_register_isr+0x6c>)
   1fd92:	2200      	movs	r2, #0
   1fd94:	2109      	movs	r1, #9
   1fd96:	0018      	movs	r0, r3
   1fd98:	4b08      	ldr	r3, [pc, #32]	; (1fdbc <nm_bsp_register_isr+0x70>)
   1fd9a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1fd9c:	2100      	movs	r1, #0
   1fd9e:	2009      	movs	r0, #9
   1fda0:	4b07      	ldr	r3, [pc, #28]	; (1fdc0 <nm_bsp_register_isr+0x74>)
   1fda2:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1fda4:	46c0      	nop			; (mov r8, r8)
   1fda6:	46bd      	mov	sp, r7
   1fda8:	b006      	add	sp, #24
   1fdaa:	bd80      	pop	{r7, pc}
   1fdac:	20003e88 	.word	0x20003e88
   1fdb0:	00026285 	.word	0x00026285
   1fdb4:	000262b9 	.word	0x000262b9
   1fdb8:	0001fc35 	.word	0x0001fc35
   1fdbc:	00025e85 	.word	0x00025e85
   1fdc0:	00025ee9 	.word	0x00025ee9

0001fdc4 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1fdc4:	b580      	push	{r7, lr}
   1fdc6:	b082      	sub	sp, #8
   1fdc8:	af00      	add	r7, sp, #0
   1fdca:	0002      	movs	r2, r0
   1fdcc:	1dfb      	adds	r3, r7, #7
   1fdce:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1fdd0:	1dfb      	adds	r3, r7, #7
   1fdd2:	781b      	ldrb	r3, [r3, #0]
   1fdd4:	2b00      	cmp	r3, #0
   1fdd6:	d004      	beq.n	1fde2 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1fdd8:	2100      	movs	r1, #0
   1fdda:	2009      	movs	r0, #9
   1fddc:	4b05      	ldr	r3, [pc, #20]	; (1fdf4 <nm_bsp_interrupt_ctrl+0x30>)
   1fdde:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1fde0:	e003      	b.n	1fdea <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1fde2:	2100      	movs	r1, #0
   1fde4:	2009      	movs	r0, #9
   1fde6:	4b04      	ldr	r3, [pc, #16]	; (1fdf8 <nm_bsp_interrupt_ctrl+0x34>)
   1fde8:	4798      	blx	r3
}
   1fdea:	46c0      	nop			; (mov r8, r8)
   1fdec:	46bd      	mov	sp, r7
   1fdee:	b002      	add	sp, #8
   1fdf0:	bd80      	pop	{r7, pc}
   1fdf2:	46c0      	nop			; (mov r8, r8)
   1fdf4:	00025ee9 	.word	0x00025ee9
   1fdf8:	00025f31 	.word	0x00025f31

0001fdfc <system_pinmux_get_group_from_gpio_pin>:
{
   1fdfc:	b580      	push	{r7, lr}
   1fdfe:	b084      	sub	sp, #16
   1fe00:	af00      	add	r7, sp, #0
   1fe02:	0002      	movs	r2, r0
   1fe04:	1dfb      	adds	r3, r7, #7
   1fe06:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1fe08:	230f      	movs	r3, #15
   1fe0a:	18fb      	adds	r3, r7, r3
   1fe0c:	1dfa      	adds	r2, r7, #7
   1fe0e:	7812      	ldrb	r2, [r2, #0]
   1fe10:	09d2      	lsrs	r2, r2, #7
   1fe12:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1fe14:	230e      	movs	r3, #14
   1fe16:	18fb      	adds	r3, r7, r3
   1fe18:	1dfa      	adds	r2, r7, #7
   1fe1a:	7812      	ldrb	r2, [r2, #0]
   1fe1c:	0952      	lsrs	r2, r2, #5
   1fe1e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1fe20:	4b0d      	ldr	r3, [pc, #52]	; (1fe58 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1fe22:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1fe24:	230f      	movs	r3, #15
   1fe26:	18fb      	adds	r3, r7, r3
   1fe28:	781b      	ldrb	r3, [r3, #0]
   1fe2a:	2b00      	cmp	r3, #0
   1fe2c:	d10f      	bne.n	1fe4e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1fe2e:	230f      	movs	r3, #15
   1fe30:	18fb      	adds	r3, r7, r3
   1fe32:	781b      	ldrb	r3, [r3, #0]
   1fe34:	009b      	lsls	r3, r3, #2
   1fe36:	2210      	movs	r2, #16
   1fe38:	4694      	mov	ip, r2
   1fe3a:	44bc      	add	ip, r7
   1fe3c:	4463      	add	r3, ip
   1fe3e:	3b08      	subs	r3, #8
   1fe40:	681a      	ldr	r2, [r3, #0]
   1fe42:	230e      	movs	r3, #14
   1fe44:	18fb      	adds	r3, r7, r3
   1fe46:	781b      	ldrb	r3, [r3, #0]
   1fe48:	01db      	lsls	r3, r3, #7
   1fe4a:	18d3      	adds	r3, r2, r3
   1fe4c:	e000      	b.n	1fe50 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1fe4e:	2300      	movs	r3, #0
}
   1fe50:	0018      	movs	r0, r3
   1fe52:	46bd      	mov	sp, r7
   1fe54:	b004      	add	sp, #16
   1fe56:	bd80      	pop	{r7, pc}
   1fe58:	41004400 	.word	0x41004400

0001fe5c <system_interrupt_enable>:
{
   1fe5c:	b580      	push	{r7, lr}
   1fe5e:	b082      	sub	sp, #8
   1fe60:	af00      	add	r7, sp, #0
   1fe62:	0002      	movs	r2, r0
   1fe64:	1dfb      	adds	r3, r7, #7
   1fe66:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fe68:	4b06      	ldr	r3, [pc, #24]	; (1fe84 <system_interrupt_enable+0x28>)
   1fe6a:	1dfa      	adds	r2, r7, #7
   1fe6c:	7812      	ldrb	r2, [r2, #0]
   1fe6e:	0011      	movs	r1, r2
   1fe70:	221f      	movs	r2, #31
   1fe72:	400a      	ands	r2, r1
   1fe74:	2101      	movs	r1, #1
   1fe76:	4091      	lsls	r1, r2
   1fe78:	000a      	movs	r2, r1
   1fe7a:	601a      	str	r2, [r3, #0]
}
   1fe7c:	46c0      	nop			; (mov r8, r8)
   1fe7e:	46bd      	mov	sp, r7
   1fe80:	b002      	add	sp, #8
   1fe82:	bd80      	pop	{r7, pc}
   1fe84:	e000e100 	.word	0xe000e100

0001fe88 <system_interrupt_disable>:
{
   1fe88:	b580      	push	{r7, lr}
   1fe8a:	b082      	sub	sp, #8
   1fe8c:	af00      	add	r7, sp, #0
   1fe8e:	0002      	movs	r2, r0
   1fe90:	1dfb      	adds	r3, r7, #7
   1fe92:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1fe94:	4a07      	ldr	r2, [pc, #28]	; (1feb4 <system_interrupt_disable+0x2c>)
   1fe96:	1dfb      	adds	r3, r7, #7
   1fe98:	781b      	ldrb	r3, [r3, #0]
   1fe9a:	0019      	movs	r1, r3
   1fe9c:	231f      	movs	r3, #31
   1fe9e:	400b      	ands	r3, r1
   1fea0:	2101      	movs	r1, #1
   1fea2:	4099      	lsls	r1, r3
   1fea4:	000b      	movs	r3, r1
   1fea6:	0019      	movs	r1, r3
   1fea8:	2380      	movs	r3, #128	; 0x80
   1feaa:	50d1      	str	r1, [r2, r3]
}
   1feac:	46c0      	nop			; (mov r8, r8)
   1feae:	46bd      	mov	sp, r7
   1feb0:	b002      	add	sp, #8
   1feb2:	bd80      	pop	{r7, pc}
   1feb4:	e000e100 	.word	0xe000e100

0001feb8 <port_get_group_from_gpio_pin>:
{
   1feb8:	b580      	push	{r7, lr}
   1feba:	b082      	sub	sp, #8
   1febc:	af00      	add	r7, sp, #0
   1febe:	0002      	movs	r2, r0
   1fec0:	1dfb      	adds	r3, r7, #7
   1fec2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1fec4:	1dfb      	adds	r3, r7, #7
   1fec6:	781b      	ldrb	r3, [r3, #0]
   1fec8:	0018      	movs	r0, r3
   1feca:	4b03      	ldr	r3, [pc, #12]	; (1fed8 <port_get_group_from_gpio_pin+0x20>)
   1fecc:	4798      	blx	r3
   1fece:	0003      	movs	r3, r0
}
   1fed0:	0018      	movs	r0, r3
   1fed2:	46bd      	mov	sp, r7
   1fed4:	b002      	add	sp, #8
   1fed6:	bd80      	pop	{r7, pc}
   1fed8:	0001fdfd 	.word	0x0001fdfd

0001fedc <port_get_config_defaults>:
{
   1fedc:	b580      	push	{r7, lr}
   1fede:	b082      	sub	sp, #8
   1fee0:	af00      	add	r7, sp, #0
   1fee2:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1fee4:	687b      	ldr	r3, [r7, #4]
   1fee6:	2200      	movs	r2, #0
   1fee8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1feea:	687b      	ldr	r3, [r7, #4]
   1feec:	2201      	movs	r2, #1
   1feee:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1fef0:	687b      	ldr	r3, [r7, #4]
   1fef2:	2200      	movs	r2, #0
   1fef4:	709a      	strb	r2, [r3, #2]
}
   1fef6:	46c0      	nop			; (mov r8, r8)
   1fef8:	46bd      	mov	sp, r7
   1fefa:	b002      	add	sp, #8
   1fefc:	bd80      	pop	{r7, pc}
	...

0001ff00 <port_pin_set_output_level>:
{
   1ff00:	b580      	push	{r7, lr}
   1ff02:	b084      	sub	sp, #16
   1ff04:	af00      	add	r7, sp, #0
   1ff06:	0002      	movs	r2, r0
   1ff08:	1dfb      	adds	r3, r7, #7
   1ff0a:	701a      	strb	r2, [r3, #0]
   1ff0c:	1dbb      	adds	r3, r7, #6
   1ff0e:	1c0a      	adds	r2, r1, #0
   1ff10:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1ff12:	1dfb      	adds	r3, r7, #7
   1ff14:	781b      	ldrb	r3, [r3, #0]
   1ff16:	0018      	movs	r0, r3
   1ff18:	4b0d      	ldr	r3, [pc, #52]	; (1ff50 <port_pin_set_output_level+0x50>)
   1ff1a:	4798      	blx	r3
   1ff1c:	0003      	movs	r3, r0
   1ff1e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ff20:	1dfb      	adds	r3, r7, #7
   1ff22:	781b      	ldrb	r3, [r3, #0]
   1ff24:	221f      	movs	r2, #31
   1ff26:	4013      	ands	r3, r2
   1ff28:	2201      	movs	r2, #1
   1ff2a:	409a      	lsls	r2, r3
   1ff2c:	0013      	movs	r3, r2
   1ff2e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1ff30:	1dbb      	adds	r3, r7, #6
   1ff32:	781b      	ldrb	r3, [r3, #0]
   1ff34:	2b00      	cmp	r3, #0
   1ff36:	d003      	beq.n	1ff40 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1ff38:	68fb      	ldr	r3, [r7, #12]
   1ff3a:	68ba      	ldr	r2, [r7, #8]
   1ff3c:	619a      	str	r2, [r3, #24]
}
   1ff3e:	e002      	b.n	1ff46 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1ff40:	68fb      	ldr	r3, [r7, #12]
   1ff42:	68ba      	ldr	r2, [r7, #8]
   1ff44:	615a      	str	r2, [r3, #20]
}
   1ff46:	46c0      	nop			; (mov r8, r8)
   1ff48:	46bd      	mov	sp, r7
   1ff4a:	b004      	add	sp, #16
   1ff4c:	bd80      	pop	{r7, pc}
   1ff4e:	46c0      	nop			; (mov r8, r8)
   1ff50:	0001feb9 	.word	0x0001feb9

0001ff54 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1ff54:	b580      	push	{r7, lr}
   1ff56:	b084      	sub	sp, #16
   1ff58:	af00      	add	r7, sp, #0
   1ff5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1ff5c:	687b      	ldr	r3, [r7, #4]
   1ff5e:	681b      	ldr	r3, [r3, #0]
   1ff60:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1ff62:	68fb      	ldr	r3, [r7, #12]
   1ff64:	69db      	ldr	r3, [r3, #28]
   1ff66:	1e5a      	subs	r2, r3, #1
   1ff68:	4193      	sbcs	r3, r2
   1ff6a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1ff6c:	0018      	movs	r0, r3
   1ff6e:	46bd      	mov	sp, r7
   1ff70:	b004      	add	sp, #16
   1ff72:	bd80      	pop	{r7, pc}

0001ff74 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1ff74:	b580      	push	{r7, lr}
   1ff76:	b082      	sub	sp, #8
   1ff78:	af00      	add	r7, sp, #0
   1ff7a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1ff7c:	687b      	ldr	r3, [r7, #4]
   1ff7e:	2201      	movs	r2, #1
   1ff80:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1ff82:	687b      	ldr	r3, [r7, #4]
   1ff84:	2200      	movs	r2, #0
   1ff86:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1ff88:	687b      	ldr	r3, [r7, #4]
   1ff8a:	2200      	movs	r2, #0
   1ff8c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1ff8e:	687b      	ldr	r3, [r7, #4]
   1ff90:	22c0      	movs	r2, #192	; 0xc0
   1ff92:	0392      	lsls	r2, r2, #14
   1ff94:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1ff96:	687b      	ldr	r3, [r7, #4]
   1ff98:	2200      	movs	r2, #0
   1ff9a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1ff9c:	687b      	ldr	r3, [r7, #4]
   1ff9e:	2200      	movs	r2, #0
   1ffa0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1ffa2:	687b      	ldr	r3, [r7, #4]
   1ffa4:	2201      	movs	r2, #1
   1ffa6:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1ffa8:	687b      	ldr	r3, [r7, #4]
   1ffaa:	2201      	movs	r2, #1
   1ffac:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1ffae:	687b      	ldr	r3, [r7, #4]
   1ffb0:	2200      	movs	r2, #0
   1ffb2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1ffb4:	687b      	ldr	r3, [r7, #4]
   1ffb6:	2224      	movs	r2, #36	; 0x24
   1ffb8:	2100      	movs	r1, #0
   1ffba:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1ffbc:	687b      	ldr	r3, [r7, #4]
   1ffbe:	3318      	adds	r3, #24
   1ffc0:	220c      	movs	r2, #12
   1ffc2:	2100      	movs	r1, #0
   1ffc4:	0018      	movs	r0, r3
   1ffc6:	4b0a      	ldr	r3, [pc, #40]	; (1fff0 <spi_get_config_defaults+0x7c>)
   1ffc8:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1ffca:	687b      	ldr	r3, [r7, #4]
   1ffcc:	4a09      	ldr	r2, [pc, #36]	; (1fff4 <spi_get_config_defaults+0x80>)
   1ffce:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1ffd0:	687b      	ldr	r3, [r7, #4]
   1ffd2:	2200      	movs	r2, #0
   1ffd4:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1ffd6:	687b      	ldr	r3, [r7, #4]
   1ffd8:	2200      	movs	r2, #0
   1ffda:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1ffdc:	687b      	ldr	r3, [r7, #4]
   1ffde:	2200      	movs	r2, #0
   1ffe0:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1ffe2:	687b      	ldr	r3, [r7, #4]
   1ffe4:	2200      	movs	r2, #0
   1ffe6:	635a      	str	r2, [r3, #52]	; 0x34

};
   1ffe8:	46c0      	nop			; (mov r8, r8)
   1ffea:	46bd      	mov	sp, r7
   1ffec:	b002      	add	sp, #8
   1ffee:	bd80      	pop	{r7, pc}
   1fff0:	0003438b 	.word	0x0003438b
   1fff4:	000186a0 	.word	0x000186a0

0001fff8 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1fff8:	b580      	push	{r7, lr}
   1fffa:	b082      	sub	sp, #8
   1fffc:	af00      	add	r7, sp, #0
   1fffe:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   20000:	687b      	ldr	r3, [r7, #4]
   20002:	220a      	movs	r2, #10
   20004:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20006:	687b      	ldr	r3, [r7, #4]
   20008:	2200      	movs	r2, #0
   2000a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   2000c:	687b      	ldr	r3, [r7, #4]
   2000e:	2200      	movs	r2, #0
   20010:	709a      	strb	r2, [r3, #2]
}
   20012:	46c0      	nop			; (mov r8, r8)
   20014:	46bd      	mov	sp, r7
   20016:	b002      	add	sp, #8
   20018:	bd80      	pop	{r7, pc}
	...

0002001c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   2001c:	b580      	push	{r7, lr}
   2001e:	b084      	sub	sp, #16
   20020:	af00      	add	r7, sp, #0
   20022:	6078      	str	r0, [r7, #4]
   20024:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   20026:	683b      	ldr	r3, [r7, #0]
   20028:	781a      	ldrb	r2, [r3, #0]
   2002a:	687b      	ldr	r3, [r7, #4]
   2002c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2002e:	683b      	ldr	r3, [r7, #0]
   20030:	785a      	ldrb	r2, [r3, #1]
   20032:	687b      	ldr	r3, [r7, #4]
   20034:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   20036:	683b      	ldr	r3, [r7, #0]
   20038:	789a      	ldrb	r2, [r3, #2]
   2003a:	687b      	ldr	r3, [r7, #4]
   2003c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2003e:	230c      	movs	r3, #12
   20040:	18fb      	adds	r3, r7, r3
   20042:	0018      	movs	r0, r3
   20044:	4b0b      	ldr	r3, [pc, #44]	; (20074 <spi_attach_slave+0x58>)
   20046:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20048:	230c      	movs	r3, #12
   2004a:	18fb      	adds	r3, r7, r3
   2004c:	2201      	movs	r2, #1
   2004e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   20050:	687b      	ldr	r3, [r7, #4]
   20052:	781b      	ldrb	r3, [r3, #0]
   20054:	220c      	movs	r2, #12
   20056:	18ba      	adds	r2, r7, r2
   20058:	0011      	movs	r1, r2
   2005a:	0018      	movs	r0, r3
   2005c:	4b06      	ldr	r3, [pc, #24]	; (20078 <spi_attach_slave+0x5c>)
   2005e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   20060:	687b      	ldr	r3, [r7, #4]
   20062:	781b      	ldrb	r3, [r3, #0]
   20064:	2101      	movs	r1, #1
   20066:	0018      	movs	r0, r3
   20068:	4b04      	ldr	r3, [pc, #16]	; (2007c <spi_attach_slave+0x60>)
   2006a:	4798      	blx	r3
}
   2006c:	46c0      	nop			; (mov r8, r8)
   2006e:	46bd      	mov	sp, r7
   20070:	b004      	add	sp, #16
   20072:	bd80      	pop	{r7, pc}
   20074:	0001fedd 	.word	0x0001fedd
   20078:	000263dd 	.word	0x000263dd
   2007c:	0001ff01 	.word	0x0001ff01

00020080 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   20080:	b580      	push	{r7, lr}
   20082:	b084      	sub	sp, #16
   20084:	af00      	add	r7, sp, #0
   20086:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20088:	687b      	ldr	r3, [r7, #4]
   2008a:	681b      	ldr	r3, [r3, #0]
   2008c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2008e:	687b      	ldr	r3, [r7, #4]
   20090:	681b      	ldr	r3, [r3, #0]
   20092:	0018      	movs	r0, r3
   20094:	4b0b      	ldr	r3, [pc, #44]	; (200c4 <spi_enable+0x44>)
   20096:	4798      	blx	r3
   20098:	0003      	movs	r3, r0
   2009a:	0018      	movs	r0, r3
   2009c:	4b0a      	ldr	r3, [pc, #40]	; (200c8 <spi_enable+0x48>)
   2009e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   200a0:	46c0      	nop			; (mov r8, r8)
   200a2:	687b      	ldr	r3, [r7, #4]
   200a4:	0018      	movs	r0, r3
   200a6:	4b09      	ldr	r3, [pc, #36]	; (200cc <spi_enable+0x4c>)
   200a8:	4798      	blx	r3
   200aa:	1e03      	subs	r3, r0, #0
   200ac:	d1f9      	bne.n	200a2 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   200ae:	68fb      	ldr	r3, [r7, #12]
   200b0:	681b      	ldr	r3, [r3, #0]
   200b2:	2202      	movs	r2, #2
   200b4:	431a      	orrs	r2, r3
   200b6:	68fb      	ldr	r3, [r7, #12]
   200b8:	601a      	str	r2, [r3, #0]
}
   200ba:	46c0      	nop			; (mov r8, r8)
   200bc:	46bd      	mov	sp, r7
   200be:	b004      	add	sp, #16
   200c0:	bd80      	pop	{r7, pc}
   200c2:	46c0      	nop			; (mov r8, r8)
   200c4:	000270ad 	.word	0x000270ad
   200c8:	0001fe5d 	.word	0x0001fe5d
   200cc:	0001ff55 	.word	0x0001ff55

000200d0 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   200d0:	b580      	push	{r7, lr}
   200d2:	b084      	sub	sp, #16
   200d4:	af00      	add	r7, sp, #0
   200d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   200d8:	687b      	ldr	r3, [r7, #4]
   200da:	681b      	ldr	r3, [r3, #0]
   200dc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   200de:	687b      	ldr	r3, [r7, #4]
   200e0:	681b      	ldr	r3, [r3, #0]
   200e2:	0018      	movs	r0, r3
   200e4:	4b0e      	ldr	r3, [pc, #56]	; (20120 <spi_disable+0x50>)
   200e6:	4798      	blx	r3
   200e8:	0003      	movs	r3, r0
   200ea:	0018      	movs	r0, r3
   200ec:	4b0d      	ldr	r3, [pc, #52]	; (20124 <spi_disable+0x54>)
   200ee:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   200f0:	46c0      	nop			; (mov r8, r8)
   200f2:	687b      	ldr	r3, [r7, #4]
   200f4:	0018      	movs	r0, r3
   200f6:	4b0c      	ldr	r3, [pc, #48]	; (20128 <spi_disable+0x58>)
   200f8:	4798      	blx	r3
   200fa:	1e03      	subs	r3, r0, #0
   200fc:	d1f9      	bne.n	200f2 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   200fe:	68fb      	ldr	r3, [r7, #12]
   20100:	228f      	movs	r2, #143	; 0x8f
   20102:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   20104:	68fb      	ldr	r3, [r7, #12]
   20106:	228f      	movs	r2, #143	; 0x8f
   20108:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2010a:	68fb      	ldr	r3, [r7, #12]
   2010c:	681b      	ldr	r3, [r3, #0]
   2010e:	2202      	movs	r2, #2
   20110:	4393      	bics	r3, r2
   20112:	001a      	movs	r2, r3
   20114:	68fb      	ldr	r3, [r7, #12]
   20116:	601a      	str	r2, [r3, #0]
}
   20118:	46c0      	nop			; (mov r8, r8)
   2011a:	46bd      	mov	sp, r7
   2011c:	b004      	add	sp, #16
   2011e:	bd80      	pop	{r7, pc}
   20120:	000270ad 	.word	0x000270ad
   20124:	0001fe89 	.word	0x0001fe89
   20128:	0001ff55 	.word	0x0001ff55

0002012c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   2012c:	b580      	push	{r7, lr}
   2012e:	b084      	sub	sp, #16
   20130:	af00      	add	r7, sp, #0
   20132:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20134:	687b      	ldr	r3, [r7, #4]
   20136:	681b      	ldr	r3, [r3, #0]
   20138:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2013a:	68fb      	ldr	r3, [r7, #12]
   2013c:	7e1b      	ldrb	r3, [r3, #24]
   2013e:	b2db      	uxtb	r3, r3
   20140:	001a      	movs	r2, r3
   20142:	2302      	movs	r3, #2
   20144:	4013      	ands	r3, r2
   20146:	1e5a      	subs	r2, r3, #1
   20148:	4193      	sbcs	r3, r2
   2014a:	b2db      	uxtb	r3, r3
}
   2014c:	0018      	movs	r0, r3
   2014e:	46bd      	mov	sp, r7
   20150:	b004      	add	sp, #16
   20152:	bd80      	pop	{r7, pc}

00020154 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   20154:	b580      	push	{r7, lr}
   20156:	b084      	sub	sp, #16
   20158:	af00      	add	r7, sp, #0
   2015a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2015c:	687b      	ldr	r3, [r7, #4]
   2015e:	681b      	ldr	r3, [r3, #0]
   20160:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   20162:	68fb      	ldr	r3, [r7, #12]
   20164:	7e1b      	ldrb	r3, [r3, #24]
   20166:	b2db      	uxtb	r3, r3
   20168:	001a      	movs	r2, r3
   2016a:	2301      	movs	r3, #1
   2016c:	4013      	ands	r3, r2
   2016e:	1e5a      	subs	r2, r3, #1
   20170:	4193      	sbcs	r3, r2
   20172:	b2db      	uxtb	r3, r3
}
   20174:	0018      	movs	r0, r3
   20176:	46bd      	mov	sp, r7
   20178:	b004      	add	sp, #16
   2017a:	bd80      	pop	{r7, pc}

0002017c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   2017c:	b580      	push	{r7, lr}
   2017e:	b084      	sub	sp, #16
   20180:	af00      	add	r7, sp, #0
   20182:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20184:	687b      	ldr	r3, [r7, #4]
   20186:	681b      	ldr	r3, [r3, #0]
   20188:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2018a:	68fb      	ldr	r3, [r7, #12]
   2018c:	7e1b      	ldrb	r3, [r3, #24]
   2018e:	b2db      	uxtb	r3, r3
   20190:	001a      	movs	r2, r3
   20192:	2304      	movs	r3, #4
   20194:	4013      	ands	r3, r2
   20196:	1e5a      	subs	r2, r3, #1
   20198:	4193      	sbcs	r3, r2
   2019a:	b2db      	uxtb	r3, r3
}
   2019c:	0018      	movs	r0, r3
   2019e:	46bd      	mov	sp, r7
   201a0:	b004      	add	sp, #16
   201a2:	bd80      	pop	{r7, pc}

000201a4 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   201a4:	b580      	push	{r7, lr}
   201a6:	b084      	sub	sp, #16
   201a8:	af00      	add	r7, sp, #0
   201aa:	6078      	str	r0, [r7, #4]
   201ac:	000a      	movs	r2, r1
   201ae:	1cbb      	adds	r3, r7, #2
   201b0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   201b2:	687b      	ldr	r3, [r7, #4]
   201b4:	681b      	ldr	r3, [r3, #0]
   201b6:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   201b8:	687b      	ldr	r3, [r7, #4]
   201ba:	0018      	movs	r0, r3
   201bc:	4b0a      	ldr	r3, [pc, #40]	; (201e8 <spi_write+0x44>)
   201be:	4798      	blx	r3
   201c0:	0003      	movs	r3, r0
   201c2:	001a      	movs	r2, r3
   201c4:	2301      	movs	r3, #1
   201c6:	4053      	eors	r3, r2
   201c8:	b2db      	uxtb	r3, r3
   201ca:	2b00      	cmp	r3, #0
   201cc:	d001      	beq.n	201d2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   201ce:	2305      	movs	r3, #5
   201d0:	e006      	b.n	201e0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   201d2:	1cbb      	adds	r3, r7, #2
   201d4:	881b      	ldrh	r3, [r3, #0]
   201d6:	05db      	lsls	r3, r3, #23
   201d8:	0dda      	lsrs	r2, r3, #23
   201da:	68fb      	ldr	r3, [r7, #12]
   201dc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   201de:	2300      	movs	r3, #0
}
   201e0:	0018      	movs	r0, r3
   201e2:	46bd      	mov	sp, r7
   201e4:	b004      	add	sp, #16
   201e6:	bd80      	pop	{r7, pc}
   201e8:	00020155 	.word	0x00020155

000201ec <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   201ec:	b580      	push	{r7, lr}
   201ee:	b084      	sub	sp, #16
   201f0:	af00      	add	r7, sp, #0
   201f2:	6078      	str	r0, [r7, #4]
   201f4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   201f6:	687b      	ldr	r3, [r7, #4]
   201f8:	681b      	ldr	r3, [r3, #0]
   201fa:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   201fc:	687b      	ldr	r3, [r7, #4]
   201fe:	0018      	movs	r0, r3
   20200:	4b1b      	ldr	r3, [pc, #108]	; (20270 <spi_read+0x84>)
   20202:	4798      	blx	r3
   20204:	0003      	movs	r3, r0
   20206:	001a      	movs	r2, r3
   20208:	2301      	movs	r3, #1
   2020a:	4053      	eors	r3, r2
   2020c:	b2db      	uxtb	r3, r3
   2020e:	2b00      	cmp	r3, #0
   20210:	d001      	beq.n	20216 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   20212:	2310      	movs	r3, #16
   20214:	e027      	b.n	20266 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20216:	230f      	movs	r3, #15
   20218:	18fb      	adds	r3, r7, r3
   2021a:	2200      	movs	r2, #0
   2021c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2021e:	68bb      	ldr	r3, [r7, #8]
   20220:	8b5b      	ldrh	r3, [r3, #26]
   20222:	b29b      	uxth	r3, r3
   20224:	001a      	movs	r2, r3
   20226:	2304      	movs	r3, #4
   20228:	4013      	ands	r3, r2
   2022a:	d006      	beq.n	2023a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2022c:	230f      	movs	r3, #15
   2022e:	18fb      	adds	r3, r7, r3
   20230:	221e      	movs	r2, #30
   20232:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20234:	68bb      	ldr	r3, [r7, #8]
   20236:	2204      	movs	r2, #4
   20238:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2023a:	687b      	ldr	r3, [r7, #4]
   2023c:	799b      	ldrb	r3, [r3, #6]
   2023e:	2b01      	cmp	r3, #1
   20240:	d108      	bne.n	20254 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   20242:	68bb      	ldr	r3, [r7, #8]
   20244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20246:	b29b      	uxth	r3, r3
   20248:	05db      	lsls	r3, r3, #23
   2024a:	0ddb      	lsrs	r3, r3, #23
   2024c:	b29a      	uxth	r2, r3
   2024e:	683b      	ldr	r3, [r7, #0]
   20250:	801a      	strh	r2, [r3, #0]
   20252:	e005      	b.n	20260 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   20254:	68bb      	ldr	r3, [r7, #8]
   20256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20258:	b2db      	uxtb	r3, r3
   2025a:	b29a      	uxth	r2, r3
   2025c:	683b      	ldr	r3, [r7, #0]
   2025e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   20260:	230f      	movs	r3, #15
   20262:	18fb      	adds	r3, r7, r3
   20264:	781b      	ldrb	r3, [r3, #0]
}
   20266:	0018      	movs	r0, r3
   20268:	46bd      	mov	sp, r7
   2026a:	b004      	add	sp, #16
   2026c:	bd80      	pop	{r7, pc}
   2026e:	46c0      	nop			; (mov r8, r8)
   20270:	0002017d 	.word	0x0002017d

00020274 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   20274:	b580      	push	{r7, lr}
   20276:	b086      	sub	sp, #24
   20278:	af00      	add	r7, sp, #0
   2027a:	60f8      	str	r0, [r7, #12]
   2027c:	60b9      	str	r1, [r7, #8]
   2027e:	1dbb      	adds	r3, r7, #6
   20280:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   20282:	2313      	movs	r3, #19
   20284:	18fb      	adds	r3, r7, r3
   20286:	22ff      	movs	r2, #255	; 0xff
   20288:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   2028a:	2317      	movs	r3, #23
   2028c:	18fb      	adds	r3, r7, r3
   2028e:	2200      	movs	r2, #0
   20290:	701a      	strb	r2, [r3, #0]
   20292:	2316      	movs	r3, #22
   20294:	18fb      	adds	r3, r7, r3
   20296:	2200      	movs	r2, #0
   20298:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   2029a:	2314      	movs	r3, #20
   2029c:	18fb      	adds	r3, r7, r3
   2029e:	2200      	movs	r2, #0
   202a0:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   202a2:	2310      	movs	r3, #16
   202a4:	18fb      	adds	r3, r7, r3
   202a6:	2200      	movs	r2, #0
   202a8:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   202aa:	68bb      	ldr	r3, [r7, #8]
   202ac:	2b00      	cmp	r3, #0
   202ae:	d102      	bne.n	202b6 <spi_rw+0x42>
   202b0:	68fb      	ldr	r3, [r7, #12]
   202b2:	2b00      	cmp	r3, #0
   202b4:	d003      	beq.n	202be <spi_rw+0x4a>
   202b6:	1dbb      	adds	r3, r7, #6
   202b8:	881b      	ldrh	r3, [r3, #0]
   202ba:	2b00      	cmp	r3, #0
   202bc:	d102      	bne.n	202c4 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   202be:	230f      	movs	r3, #15
   202c0:	425b      	negs	r3, r3
   202c2:	e07e      	b.n	203c2 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   202c4:	68fb      	ldr	r3, [r7, #12]
   202c6:	2b00      	cmp	r3, #0
   202c8:	d106      	bne.n	202d8 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   202ca:	2313      	movs	r3, #19
   202cc:	18fb      	adds	r3, r7, r3
   202ce:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   202d0:	2317      	movs	r3, #23
   202d2:	18fb      	adds	r3, r7, r3
   202d4:	2201      	movs	r2, #1
   202d6:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   202d8:	68bb      	ldr	r3, [r7, #8]
   202da:	2b00      	cmp	r3, #0
   202dc:	d106      	bne.n	202ec <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   202de:	2313      	movs	r3, #19
   202e0:	18fb      	adds	r3, r7, r3
   202e2:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   202e4:	2316      	movs	r3, #22
   202e6:	18fb      	adds	r3, r7, r3
   202e8:	2201      	movs	r2, #1
   202ea:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   202ec:	4937      	ldr	r1, [pc, #220]	; (203cc <spi_rw+0x158>)
   202ee:	4b38      	ldr	r3, [pc, #224]	; (203d0 <spi_rw+0x15c>)
   202f0:	2201      	movs	r2, #1
   202f2:	0018      	movs	r0, r3
   202f4:	4b37      	ldr	r3, [pc, #220]	; (203d4 <spi_rw+0x160>)
   202f6:	4798      	blx	r3

	while (u16Sz) {
   202f8:	e04c      	b.n	20394 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   202fa:	68fb      	ldr	r3, [r7, #12]
   202fc:	781a      	ldrb	r2, [r3, #0]
   202fe:	2314      	movs	r3, #20
   20300:	18fb      	adds	r3, r7, r3
   20302:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   20304:	46c0      	nop			; (mov r8, r8)
   20306:	4b32      	ldr	r3, [pc, #200]	; (203d0 <spi_rw+0x15c>)
   20308:	0018      	movs	r0, r3
   2030a:	4b33      	ldr	r3, [pc, #204]	; (203d8 <spi_rw+0x164>)
   2030c:	4798      	blx	r3
   2030e:	0003      	movs	r3, r0
   20310:	001a      	movs	r2, r3
   20312:	2301      	movs	r3, #1
   20314:	4053      	eors	r3, r2
   20316:	b2db      	uxtb	r3, r3
   20318:	2b00      	cmp	r3, #0
   2031a:	d1f4      	bne.n	20306 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   2031c:	46c0      	nop			; (mov r8, r8)
   2031e:	2314      	movs	r3, #20
   20320:	18fb      	adds	r3, r7, r3
   20322:	881a      	ldrh	r2, [r3, #0]
   20324:	4b2a      	ldr	r3, [pc, #168]	; (203d0 <spi_rw+0x15c>)
   20326:	0011      	movs	r1, r2
   20328:	0018      	movs	r0, r3
   2032a:	4b2c      	ldr	r3, [pc, #176]	; (203dc <spi_rw+0x168>)
   2032c:	4798      	blx	r3
   2032e:	1e03      	subs	r3, r0, #0
   20330:	d1f5      	bne.n	2031e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   20332:	46c0      	nop			; (mov r8, r8)
   20334:	4b26      	ldr	r3, [pc, #152]	; (203d0 <spi_rw+0x15c>)
   20336:	0018      	movs	r0, r3
   20338:	4b29      	ldr	r3, [pc, #164]	; (203e0 <spi_rw+0x16c>)
   2033a:	4798      	blx	r3
   2033c:	0003      	movs	r3, r0
   2033e:	001a      	movs	r2, r3
   20340:	2301      	movs	r3, #1
   20342:	4053      	eors	r3, r2
   20344:	b2db      	uxtb	r3, r3
   20346:	2b00      	cmp	r3, #0
   20348:	d1f4      	bne.n	20334 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   2034a:	46c0      	nop			; (mov r8, r8)
   2034c:	2310      	movs	r3, #16
   2034e:	18fa      	adds	r2, r7, r3
   20350:	4b1f      	ldr	r3, [pc, #124]	; (203d0 <spi_rw+0x15c>)
   20352:	0011      	movs	r1, r2
   20354:	0018      	movs	r0, r3
   20356:	4b23      	ldr	r3, [pc, #140]	; (203e4 <spi_rw+0x170>)
   20358:	4798      	blx	r3
   2035a:	1e03      	subs	r3, r0, #0
   2035c:	d1f6      	bne.n	2034c <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2035e:	2310      	movs	r3, #16
   20360:	18fb      	adds	r3, r7, r3
   20362:	881b      	ldrh	r3, [r3, #0]
   20364:	b2da      	uxtb	r2, r3
   20366:	68bb      	ldr	r3, [r7, #8]
   20368:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   2036a:	1dbb      	adds	r3, r7, #6
   2036c:	881a      	ldrh	r2, [r3, #0]
   2036e:	1dbb      	adds	r3, r7, #6
   20370:	3a01      	subs	r2, #1
   20372:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   20374:	2316      	movs	r3, #22
   20376:	18fb      	adds	r3, r7, r3
   20378:	781b      	ldrb	r3, [r3, #0]
   2037a:	2b00      	cmp	r3, #0
   2037c:	d102      	bne.n	20384 <spi_rw+0x110>
			pu8Miso++;
   2037e:	68bb      	ldr	r3, [r7, #8]
   20380:	3301      	adds	r3, #1
   20382:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   20384:	2317      	movs	r3, #23
   20386:	18fb      	adds	r3, r7, r3
   20388:	781b      	ldrb	r3, [r3, #0]
   2038a:	2b00      	cmp	r3, #0
   2038c:	d102      	bne.n	20394 <spi_rw+0x120>
			pu8Mosi++;
   2038e:	68fb      	ldr	r3, [r7, #12]
   20390:	3301      	adds	r3, #1
   20392:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   20394:	1dbb      	adds	r3, r7, #6
   20396:	881b      	ldrh	r3, [r3, #0]
   20398:	2b00      	cmp	r3, #0
   2039a:	d1ae      	bne.n	202fa <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   2039c:	46c0      	nop			; (mov r8, r8)
   2039e:	4b0c      	ldr	r3, [pc, #48]	; (203d0 <spi_rw+0x15c>)
   203a0:	0018      	movs	r0, r3
   203a2:	4b11      	ldr	r3, [pc, #68]	; (203e8 <spi_rw+0x174>)
   203a4:	4798      	blx	r3
   203a6:	0003      	movs	r3, r0
   203a8:	001a      	movs	r2, r3
   203aa:	2301      	movs	r3, #1
   203ac:	4053      	eors	r3, r2
   203ae:	b2db      	uxtb	r3, r3
   203b0:	2b00      	cmp	r3, #0
   203b2:	d1f4      	bne.n	2039e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   203b4:	4905      	ldr	r1, [pc, #20]	; (203cc <spi_rw+0x158>)
   203b6:	4b06      	ldr	r3, [pc, #24]	; (203d0 <spi_rw+0x15c>)
   203b8:	2200      	movs	r2, #0
   203ba:	0018      	movs	r0, r3
   203bc:	4b05      	ldr	r3, [pc, #20]	; (203d4 <spi_rw+0x160>)
   203be:	4798      	blx	r3

	return M2M_SUCCESS;
   203c0:	2300      	movs	r3, #0
}
   203c2:	0018      	movs	r0, r3
   203c4:	46bd      	mov	sp, r7
   203c6:	b006      	add	sp, #24
   203c8:	bd80      	pop	{r7, pc}
   203ca:	46c0      	nop			; (mov r8, r8)
   203cc:	20005610 	.word	0x20005610
   203d0:	20005614 	.word	0x20005614
   203d4:	00027b21 	.word	0x00027b21
   203d8:	00020155 	.word	0x00020155
   203dc:	000201a5 	.word	0x000201a5
   203e0:	0002017d 	.word	0x0002017d
   203e4:	000201ed 	.word	0x000201ed
   203e8:	0002012d 	.word	0x0002012d

000203ec <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   203ec:	b580      	push	{r7, lr}
   203ee:	b092      	sub	sp, #72	; 0x48
   203f0:	af00      	add	r7, sp, #0
   203f2:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   203f4:	2347      	movs	r3, #71	; 0x47
   203f6:	18fb      	adds	r3, r7, r3
   203f8:	2200      	movs	r2, #0
   203fa:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   203fc:	2308      	movs	r3, #8
   203fe:	18fb      	adds	r3, r7, r3
   20400:	0018      	movs	r0, r3
   20402:	4b26      	ldr	r3, [pc, #152]	; (2049c <nm_bus_init+0xb0>)
   20404:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   20406:	2308      	movs	r3, #8
   20408:	18fb      	adds	r3, r7, r3
   2040a:	220e      	movs	r2, #14
   2040c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2040e:	2308      	movs	r3, #8
   20410:	18fa      	adds	r2, r7, r3
   20412:	4b23      	ldr	r3, [pc, #140]	; (204a0 <nm_bus_init+0xb4>)
   20414:	0011      	movs	r1, r2
   20416:	0018      	movs	r0, r3
   20418:	4b22      	ldr	r3, [pc, #136]	; (204a4 <nm_bus_init+0xb8>)
   2041a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   2041c:	230c      	movs	r3, #12
   2041e:	18fb      	adds	r3, r7, r3
   20420:	0018      	movs	r0, r3
   20422:	4b21      	ldr	r3, [pc, #132]	; (204a8 <nm_bus_init+0xbc>)
   20424:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   20426:	230c      	movs	r3, #12
   20428:	18fb      	adds	r3, r7, r3
   2042a:	22c0      	movs	r2, #192	; 0xc0
   2042c:	0392      	lsls	r2, r2, #14
   2042e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   20430:	230c      	movs	r3, #12
   20432:	18fb      	adds	r3, r7, r3
   20434:	4a1d      	ldr	r2, [pc, #116]	; (204ac <nm_bus_init+0xc0>)
   20436:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20438:	230c      	movs	r3, #12
   2043a:	18fb      	adds	r3, r7, r3
   2043c:	4a1c      	ldr	r2, [pc, #112]	; (204b0 <nm_bus_init+0xc4>)
   2043e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   20440:	230c      	movs	r3, #12
   20442:	18fb      	adds	r3, r7, r3
   20444:	2201      	movs	r2, #1
   20446:	4252      	negs	r2, r2
   20448:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   2044a:	230c      	movs	r3, #12
   2044c:	18fb      	adds	r3, r7, r3
   2044e:	4a19      	ldr	r2, [pc, #100]	; (204b4 <nm_bus_init+0xc8>)
   20450:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   20452:	230c      	movs	r3, #12
   20454:	18fb      	adds	r3, r7, r3
   20456:	2200      	movs	r2, #0
   20458:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   2045a:	230c      	movs	r3, #12
   2045c:	18fb      	adds	r3, r7, r3
   2045e:	4a16      	ldr	r2, [pc, #88]	; (204b8 <nm_bus_init+0xcc>)
   20460:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   20462:	230c      	movs	r3, #12
   20464:	18fa      	adds	r2, r7, r3
   20466:	4915      	ldr	r1, [pc, #84]	; (204bc <nm_bus_init+0xd0>)
   20468:	4b15      	ldr	r3, [pc, #84]	; (204c0 <nm_bus_init+0xd4>)
   2046a:	0018      	movs	r0, r3
   2046c:	4b15      	ldr	r3, [pc, #84]	; (204c4 <nm_bus_init+0xd8>)
   2046e:	4798      	blx	r3
   20470:	1e03      	subs	r3, r0, #0
   20472:	d002      	beq.n	2047a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   20474:	2306      	movs	r3, #6
   20476:	425b      	negs	r3, r3
   20478:	e00c      	b.n	20494 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   2047a:	4b11      	ldr	r3, [pc, #68]	; (204c0 <nm_bus_init+0xd4>)
   2047c:	0018      	movs	r0, r3
   2047e:	4b12      	ldr	r3, [pc, #72]	; (204c8 <nm_bus_init+0xdc>)
   20480:	4798      	blx	r3

	nm_bsp_reset();
   20482:	4b12      	ldr	r3, [pc, #72]	; (204cc <nm_bus_init+0xe0>)
   20484:	4798      	blx	r3
	nm_bsp_sleep(1);
   20486:	2001      	movs	r0, #1
   20488:	4b11      	ldr	r3, [pc, #68]	; (204d0 <nm_bus_init+0xe4>)
   2048a:	4798      	blx	r3
#endif
	return result;
   2048c:	2347      	movs	r3, #71	; 0x47
   2048e:	18fb      	adds	r3, r7, r3
   20490:	781b      	ldrb	r3, [r3, #0]
   20492:	b25b      	sxtb	r3, r3
}
   20494:	0018      	movs	r0, r3
   20496:	46bd      	mov	sp, r7
   20498:	b012      	add	sp, #72	; 0x48
   2049a:	bd80      	pop	{r7, pc}
   2049c:	0001fff9 	.word	0x0001fff9
   204a0:	20005610 	.word	0x20005610
   204a4:	0002001d 	.word	0x0002001d
   204a8:	0001ff75 	.word	0x0001ff75
   204ac:	000c0002 	.word	0x000c0002
   204b0:	000d0002 	.word	0x000d0002
   204b4:	000f0002 	.word	0x000f0002
   204b8:	00124f80 	.word	0x00124f80
   204bc:	42001000 	.word	0x42001000
   204c0:	20005614 	.word	0x20005614
   204c4:	0002785d 	.word	0x0002785d
   204c8:	00020081 	.word	0x00020081
   204cc:	0001fcf1 	.word	0x0001fcf1
   204d0:	0001fd31 	.word	0x0001fd31

000204d4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   204d4:	b590      	push	{r4, r7, lr}
   204d6:	b085      	sub	sp, #20
   204d8:	af00      	add	r7, sp, #0
   204da:	0002      	movs	r2, r0
   204dc:	6039      	str	r1, [r7, #0]
   204de:	1dfb      	adds	r3, r7, #7
   204e0:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   204e2:	230f      	movs	r3, #15
   204e4:	18fb      	adds	r3, r7, r3
   204e6:	2200      	movs	r2, #0
   204e8:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   204ea:	1dfb      	adds	r3, r7, #7
   204ec:	781b      	ldrb	r3, [r3, #0]
   204ee:	2b03      	cmp	r3, #3
   204f0:	d10f      	bne.n	20512 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   204f2:	683b      	ldr	r3, [r7, #0]
   204f4:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   204f6:	68bb      	ldr	r3, [r7, #8]
   204f8:	6818      	ldr	r0, [r3, #0]
   204fa:	68bb      	ldr	r3, [r7, #8]
   204fc:	6859      	ldr	r1, [r3, #4]
   204fe:	68bb      	ldr	r3, [r7, #8]
   20500:	891b      	ldrh	r3, [r3, #8]
   20502:	220f      	movs	r2, #15
   20504:	18bc      	adds	r4, r7, r2
   20506:	001a      	movs	r2, r3
   20508:	4b10      	ldr	r3, [pc, #64]	; (2054c <nm_bus_ioctl+0x78>)
   2050a:	4798      	blx	r3
   2050c:	0003      	movs	r3, r0
   2050e:	7023      	strb	r3, [r4, #0]
		}
		break;
   20510:	e013      	b.n	2053a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   20512:	230f      	movs	r3, #15
   20514:	18fb      	adds	r3, r7, r3
   20516:	22ff      	movs	r2, #255	; 0xff
   20518:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   2051a:	2383      	movs	r3, #131	; 0x83
   2051c:	005a      	lsls	r2, r3, #1
   2051e:	490c      	ldr	r1, [pc, #48]	; (20550 <nm_bus_ioctl+0x7c>)
   20520:	4b0c      	ldr	r3, [pc, #48]	; (20554 <nm_bus_ioctl+0x80>)
   20522:	0018      	movs	r0, r3
   20524:	4b0c      	ldr	r3, [pc, #48]	; (20558 <nm_bus_ioctl+0x84>)
   20526:	4798      	blx	r3
   20528:	4b0c      	ldr	r3, [pc, #48]	; (2055c <nm_bus_ioctl+0x88>)
   2052a:	0018      	movs	r0, r3
   2052c:	4b0a      	ldr	r3, [pc, #40]	; (20558 <nm_bus_ioctl+0x84>)
   2052e:	4798      	blx	r3
   20530:	4b0b      	ldr	r3, [pc, #44]	; (20560 <nm_bus_ioctl+0x8c>)
   20532:	0018      	movs	r0, r3
   20534:	4b08      	ldr	r3, [pc, #32]	; (20558 <nm_bus_ioctl+0x84>)
   20536:	4798      	blx	r3
			break;
   20538:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   2053a:	230f      	movs	r3, #15
   2053c:	18fb      	adds	r3, r7, r3
   2053e:	781b      	ldrb	r3, [r3, #0]
   20540:	b25b      	sxtb	r3, r3
}
   20542:	0018      	movs	r0, r3
   20544:	46bd      	mov	sp, r7
   20546:	b005      	add	sp, #20
   20548:	bd90      	pop	{r4, r7, pc}
   2054a:	46c0      	nop			; (mov r8, r8)
   2054c:	00020275 	.word	0x00020275
   20550:	00037b8c 	.word	0x00037b8c
   20554:	00037b60 	.word	0x00037b60
   20558:	0001dc99 	.word	0x0001dc99
   2055c:	00037b74 	.word	0x00037b74
   20560:	00037b88 	.word	0x00037b88

00020564 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   20564:	b580      	push	{r7, lr}
   20566:	b082      	sub	sp, #8
   20568:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   2056a:	1dfb      	adds	r3, r7, #7
   2056c:	2200      	movs	r2, #0
   2056e:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   20570:	1d3b      	adds	r3, r7, #4
   20572:	0018      	movs	r0, r3
   20574:	4b13      	ldr	r3, [pc, #76]	; (205c4 <nm_bus_deinit+0x60>)
   20576:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   20578:	1d3b      	adds	r3, r7, #4
   2057a:	2200      	movs	r2, #0
   2057c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   2057e:	1d3b      	adds	r3, r7, #4
   20580:	2200      	movs	r2, #0
   20582:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   20584:	4b10      	ldr	r3, [pc, #64]	; (205c8 <nm_bus_deinit+0x64>)
   20586:	0018      	movs	r0, r3
   20588:	4b10      	ldr	r3, [pc, #64]	; (205cc <nm_bus_deinit+0x68>)
   2058a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   2058c:	1d3b      	adds	r3, r7, #4
   2058e:	0019      	movs	r1, r3
   20590:	200c      	movs	r0, #12
   20592:	4b0f      	ldr	r3, [pc, #60]	; (205d0 <nm_bus_deinit+0x6c>)
   20594:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   20596:	1d3b      	adds	r3, r7, #4
   20598:	0019      	movs	r1, r3
   2059a:	200f      	movs	r0, #15
   2059c:	4b0c      	ldr	r3, [pc, #48]	; (205d0 <nm_bus_deinit+0x6c>)
   2059e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   205a0:	1d3b      	adds	r3, r7, #4
   205a2:	0019      	movs	r1, r3
   205a4:	200d      	movs	r0, #13
   205a6:	4b0a      	ldr	r3, [pc, #40]	; (205d0 <nm_bus_deinit+0x6c>)
   205a8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   205aa:	1d3b      	adds	r3, r7, #4
   205ac:	0019      	movs	r1, r3
   205ae:	200e      	movs	r0, #14
   205b0:	4b07      	ldr	r3, [pc, #28]	; (205d0 <nm_bus_deinit+0x6c>)
   205b2:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   205b4:	1dfb      	adds	r3, r7, #7
   205b6:	781b      	ldrb	r3, [r3, #0]
   205b8:	b25b      	sxtb	r3, r3
}
   205ba:	0018      	movs	r0, r3
   205bc:	46bd      	mov	sp, r7
   205be:	b002      	add	sp, #8
   205c0:	bd80      	pop	{r7, pc}
   205c2:	46c0      	nop			; (mov r8, r8)
   205c4:	0001fedd 	.word	0x0001fedd
   205c8:	20005614 	.word	0x20005614
   205cc:	000200d1 	.word	0x000200d1
   205d0:	000263dd 	.word	0x000263dd

000205d4 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   205d4:	b580      	push	{r7, lr}
   205d6:	b084      	sub	sp, #16
   205d8:	af00      	add	r7, sp, #0
   205da:	60f8      	str	r0, [r7, #12]
   205dc:	60b9      	str	r1, [r7, #8]
   205de:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   205e0:	687b      	ldr	r3, [r7, #4]
   205e2:	2b00      	cmp	r3, #0
   205e4:	d010      	beq.n	20608 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   205e6:	68bb      	ldr	r3, [r7, #8]
   205e8:	781a      	ldrb	r2, [r3, #0]
   205ea:	68fb      	ldr	r3, [r7, #12]
   205ec:	701a      	strb	r2, [r3, #0]
		pDst++;
   205ee:	68fb      	ldr	r3, [r7, #12]
   205f0:	3301      	adds	r3, #1
   205f2:	60fb      	str	r3, [r7, #12]
		pSrc++;
   205f4:	68bb      	ldr	r3, [r7, #8]
   205f6:	3301      	adds	r3, #1
   205f8:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   205fa:	687b      	ldr	r3, [r7, #4]
   205fc:	3b01      	subs	r3, #1
   205fe:	607b      	str	r3, [r7, #4]
   20600:	687b      	ldr	r3, [r7, #4]
   20602:	2b00      	cmp	r3, #0
   20604:	d1ef      	bne.n	205e6 <m2m_memcpy+0x12>
   20606:	e000      	b.n	2060a <m2m_memcpy+0x36>
	if(sz == 0) return;
   20608:	46c0      	nop			; (mov r8, r8)
}
   2060a:	46bd      	mov	sp, r7
   2060c:	b004      	add	sp, #16
   2060e:	bd80      	pop	{r7, pc}

00020610 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   20610:	b580      	push	{r7, lr}
   20612:	b084      	sub	sp, #16
   20614:	af00      	add	r7, sp, #0
   20616:	60f8      	str	r0, [r7, #12]
   20618:	607a      	str	r2, [r7, #4]
   2061a:	230b      	movs	r3, #11
   2061c:	18fb      	adds	r3, r7, r3
   2061e:	1c0a      	adds	r2, r1, #0
   20620:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   20622:	687b      	ldr	r3, [r7, #4]
   20624:	2b00      	cmp	r3, #0
   20626:	d00e      	beq.n	20646 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   20628:	68fb      	ldr	r3, [r7, #12]
   2062a:	220b      	movs	r2, #11
   2062c:	18ba      	adds	r2, r7, r2
   2062e:	7812      	ldrb	r2, [r2, #0]
   20630:	701a      	strb	r2, [r3, #0]
		pBuf++;
   20632:	68fb      	ldr	r3, [r7, #12]
   20634:	3301      	adds	r3, #1
   20636:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20638:	687b      	ldr	r3, [r7, #4]
   2063a:	3b01      	subs	r3, #1
   2063c:	607b      	str	r3, [r7, #4]
   2063e:	687b      	ldr	r3, [r7, #4]
   20640:	2b00      	cmp	r3, #0
   20642:	d1f1      	bne.n	20628 <m2m_memset+0x18>
   20644:	e000      	b.n	20648 <m2m_memset+0x38>
	if(sz == 0) return;
   20646:	46c0      	nop			; (mov r8, r8)
}
   20648:	46bd      	mov	sp, r7
   2064a:	b004      	add	sp, #16
   2064c:	bd80      	pop	{r7, pc}

0002064e <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2064e:	b580      	push	{r7, lr}
   20650:	b084      	sub	sp, #16
   20652:	af00      	add	r7, sp, #0
   20654:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   20656:	230e      	movs	r3, #14
   20658:	18fb      	adds	r3, r7, r3
   2065a:	2200      	movs	r2, #0
   2065c:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2065e:	e009      	b.n	20674 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   20660:	230e      	movs	r3, #14
   20662:	18fb      	adds	r3, r7, r3
   20664:	881a      	ldrh	r2, [r3, #0]
   20666:	230e      	movs	r3, #14
   20668:	18fb      	adds	r3, r7, r3
   2066a:	3201      	adds	r2, #1
   2066c:	801a      	strh	r2, [r3, #0]
		pcStr++;
   2066e:	687b      	ldr	r3, [r7, #4]
   20670:	3301      	adds	r3, #1
   20672:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   20674:	687b      	ldr	r3, [r7, #4]
   20676:	781b      	ldrb	r3, [r3, #0]
   20678:	2b00      	cmp	r3, #0
   2067a:	d1f1      	bne.n	20660 <m2m_strlen+0x12>
	}
	return u16StrLen;
   2067c:	230e      	movs	r3, #14
   2067e:	18fb      	adds	r3, r7, r3
   20680:	881b      	ldrh	r3, [r3, #0]
}
   20682:	0018      	movs	r0, r3
   20684:	46bd      	mov	sp, r7
   20686:	b004      	add	sp, #16
   20688:	bd80      	pop	{r7, pc}
	...

0002068c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   2068c:	b580      	push	{r7, lr}
   2068e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   20690:	4b04      	ldr	r3, [pc, #16]	; (206a4 <isr+0x18>)
   20692:	78db      	ldrb	r3, [r3, #3]
   20694:	b2db      	uxtb	r3, r3
   20696:	3301      	adds	r3, #1
   20698:	b2da      	uxtb	r2, r3
   2069a:	4b02      	ldr	r3, [pc, #8]	; (206a4 <isr+0x18>)
   2069c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   2069e:	46c0      	nop			; (mov r8, r8)
   206a0:	46bd      	mov	sp, r7
   206a2:	bd80      	pop	{r7, pc}
   206a4:	20005650 	.word	0x20005650

000206a8 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   206a8:	b590      	push	{r4, r7, lr}
   206aa:	b083      	sub	sp, #12
   206ac:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   206ae:	1dfb      	adds	r3, r7, #7
   206b0:	2200      	movs	r2, #0
   206b2:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   206b4:	4b14      	ldr	r3, [pc, #80]	; (20708 <hif_set_rx_done+0x60>)
   206b6:	2200      	movs	r2, #0
   206b8:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   206ba:	2001      	movs	r0, #1
   206bc:	4b13      	ldr	r3, [pc, #76]	; (2070c <hif_set_rx_done+0x64>)
   206be:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   206c0:	1dfc      	adds	r4, r7, #7
   206c2:	003b      	movs	r3, r7
   206c4:	4a12      	ldr	r2, [pc, #72]	; (20710 <hif_set_rx_done+0x68>)
   206c6:	0019      	movs	r1, r3
   206c8:	0010      	movs	r0, r2
   206ca:	4b12      	ldr	r3, [pc, #72]	; (20714 <hif_set_rx_done+0x6c>)
   206cc:	4798      	blx	r3
   206ce:	0003      	movs	r3, r0
   206d0:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   206d2:	1dfb      	adds	r3, r7, #7
   206d4:	781b      	ldrb	r3, [r3, #0]
   206d6:	b25b      	sxtb	r3, r3
   206d8:	2b00      	cmp	r3, #0
   206da:	d10d      	bne.n	206f8 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   206dc:	683b      	ldr	r3, [r7, #0]
   206de:	2202      	movs	r2, #2
   206e0:	4313      	orrs	r3, r2
   206e2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   206e4:	683b      	ldr	r3, [r7, #0]
   206e6:	1dfc      	adds	r4, r7, #7
   206e8:	4a09      	ldr	r2, [pc, #36]	; (20710 <hif_set_rx_done+0x68>)
   206ea:	0019      	movs	r1, r3
   206ec:	0010      	movs	r0, r2
   206ee:	4b0a      	ldr	r3, [pc, #40]	; (20718 <hif_set_rx_done+0x70>)
   206f0:	4798      	blx	r3
   206f2:	0003      	movs	r3, r0
   206f4:	7023      	strb	r3, [r4, #0]
   206f6:	e000      	b.n	206fa <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   206f8:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   206fa:	1dfb      	adds	r3, r7, #7
   206fc:	781b      	ldrb	r3, [r3, #0]
   206fe:	b25b      	sxtb	r3, r3

}
   20700:	0018      	movs	r0, r3
   20702:	46bd      	mov	sp, r7
   20704:	b003      	add	sp, #12
   20706:	bd90      	pop	{r4, r7, pc}
   20708:	20005650 	.word	0x20005650
   2070c:	0001fdc5 	.word	0x0001fdc5
   20710:	00001070 	.word	0x00001070
   20714:	000226a1 	.word	0x000226a1
   20718:	000226c5 	.word	0x000226c5

0002071c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   2071c:	b580      	push	{r7, lr}
   2071e:	b082      	sub	sp, #8
   20720:	af00      	add	r7, sp, #0
   20722:	603a      	str	r2, [r7, #0]
   20724:	1dfb      	adds	r3, r7, #7
   20726:	1c02      	adds	r2, r0, #0
   20728:	701a      	strb	r2, [r3, #0]
   2072a:	1d3b      	adds	r3, r7, #4
   2072c:	1c0a      	adds	r2, r1, #0
   2072e:	801a      	strh	r2, [r3, #0]


}
   20730:	46c0      	nop			; (mov r8, r8)
   20732:	46bd      	mov	sp, r7
   20734:	b002      	add	sp, #8
   20736:	bd80      	pop	{r7, pc}

00020738 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20738:	b590      	push	{r4, r7, lr}
   2073a:	b083      	sub	sp, #12
   2073c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2073e:	1dfb      	adds	r3, r7, #7
   20740:	2200      	movs	r2, #0
   20742:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20744:	4b16      	ldr	r3, [pc, #88]	; (207a0 <hif_chip_wake+0x68>)
   20746:	789b      	ldrb	r3, [r3, #2]
   20748:	b2db      	uxtb	r3, r3
   2074a:	2b00      	cmp	r3, #0
   2074c:	d003      	beq.n	20756 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   2074e:	1dfb      	adds	r3, r7, #7
   20750:	781b      	ldrb	r3, [r3, #0]
   20752:	b25b      	sxtb	r3, r3
   20754:	e01f      	b.n	20796 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   20756:	4b12      	ldr	r3, [pc, #72]	; (207a0 <hif_chip_wake+0x68>)
   20758:	785b      	ldrb	r3, [r3, #1]
   2075a:	b2db      	uxtb	r3, r3
   2075c:	2b00      	cmp	r3, #0
   2075e:	d10e      	bne.n	2077e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20760:	4b0f      	ldr	r3, [pc, #60]	; (207a0 <hif_chip_wake+0x68>)
   20762:	781b      	ldrb	r3, [r3, #0]
   20764:	b2db      	uxtb	r3, r3
   20766:	2b00      	cmp	r3, #0
   20768:	d009      	beq.n	2077e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   2076a:	1dfc      	adds	r4, r7, #7
   2076c:	4b0d      	ldr	r3, [pc, #52]	; (207a4 <hif_chip_wake+0x6c>)
   2076e:	4798      	blx	r3
   20770:	0003      	movs	r3, r0
   20772:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20774:	1dfb      	adds	r3, r7, #7
   20776:	781b      	ldrb	r3, [r3, #0]
   20778:	b25b      	sxtb	r3, r3
   2077a:	2b00      	cmp	r3, #0
   2077c:	d107      	bne.n	2078e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   2077e:	4b08      	ldr	r3, [pc, #32]	; (207a0 <hif_chip_wake+0x68>)
   20780:	785b      	ldrb	r3, [r3, #1]
   20782:	b2db      	uxtb	r3, r3
   20784:	3301      	adds	r3, #1
   20786:	b2da      	uxtb	r2, r3
   20788:	4b05      	ldr	r3, [pc, #20]	; (207a0 <hif_chip_wake+0x68>)
   2078a:	705a      	strb	r2, [r3, #1]
   2078c:	e000      	b.n	20790 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   2078e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   20790:	1dfb      	adds	r3, r7, #7
   20792:	781b      	ldrb	r3, [r3, #0]
   20794:	b25b      	sxtb	r3, r3
}
   20796:	0018      	movs	r0, r3
   20798:	46bd      	mov	sp, r7
   2079a:	b003      	add	sp, #12
   2079c:	bd90      	pop	{r4, r7, pc}
   2079e:	46c0      	nop			; (mov r8, r8)
   207a0:	20005650 	.word	0x20005650
   207a4:	00022171 	.word	0x00022171

000207a8 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   207a8:	b580      	push	{r7, lr}
   207aa:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   207ac:	4b07      	ldr	r3, [pc, #28]	; (207cc <hif_chip_sleep_sc+0x24>)
   207ae:	785b      	ldrb	r3, [r3, #1]
   207b0:	b2db      	uxtb	r3, r3
   207b2:	2b00      	cmp	r3, #0
   207b4:	d006      	beq.n	207c4 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   207b6:	4b05      	ldr	r3, [pc, #20]	; (207cc <hif_chip_sleep_sc+0x24>)
   207b8:	785b      	ldrb	r3, [r3, #1]
   207ba:	b2db      	uxtb	r3, r3
   207bc:	3b01      	subs	r3, #1
   207be:	b2da      	uxtb	r2, r3
   207c0:	4b02      	ldr	r3, [pc, #8]	; (207cc <hif_chip_sleep_sc+0x24>)
   207c2:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   207c4:	2300      	movs	r3, #0
}
   207c6:	0018      	movs	r0, r3
   207c8:	46bd      	mov	sp, r7
   207ca:	bd80      	pop	{r7, pc}
   207cc:	20005650 	.word	0x20005650

000207d0 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   207d0:	b590      	push	{r4, r7, lr}
   207d2:	b083      	sub	sp, #12
   207d4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   207d6:	1dfb      	adds	r3, r7, #7
   207d8:	2200      	movs	r2, #0
   207da:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   207dc:	4b10      	ldr	r3, [pc, #64]	; (20820 <hif_chip_sleep+0x50>)
   207de:	785b      	ldrb	r3, [r3, #1]
   207e0:	b2db      	uxtb	r3, r3
   207e2:	2b00      	cmp	r3, #0
   207e4:	d006      	beq.n	207f4 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   207e6:	4b0e      	ldr	r3, [pc, #56]	; (20820 <hif_chip_sleep+0x50>)
   207e8:	785b      	ldrb	r3, [r3, #1]
   207ea:	b2db      	uxtb	r3, r3
   207ec:	3b01      	subs	r3, #1
   207ee:	b2da      	uxtb	r2, r3
   207f0:	4b0b      	ldr	r3, [pc, #44]	; (20820 <hif_chip_sleep+0x50>)
   207f2:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   207f4:	4b0a      	ldr	r3, [pc, #40]	; (20820 <hif_chip_sleep+0x50>)
   207f6:	785b      	ldrb	r3, [r3, #1]
   207f8:	b2db      	uxtb	r3, r3
   207fa:	2b00      	cmp	r3, #0
   207fc:	d109      	bne.n	20812 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   207fe:	4b08      	ldr	r3, [pc, #32]	; (20820 <hif_chip_sleep+0x50>)
   20800:	781b      	ldrb	r3, [r3, #0]
   20802:	b2db      	uxtb	r3, r3
   20804:	2b00      	cmp	r3, #0
   20806:	d004      	beq.n	20812 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   20808:	1dfc      	adds	r4, r7, #7
   2080a:	4b06      	ldr	r3, [pc, #24]	; (20824 <hif_chip_sleep+0x54>)
   2080c:	4798      	blx	r3
   2080e:	0003      	movs	r3, r0
   20810:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   20812:	1dfb      	adds	r3, r7, #7
   20814:	781b      	ldrb	r3, [r3, #0]
   20816:	b25b      	sxtb	r3, r3
}
   20818:	0018      	movs	r0, r3
   2081a:	46bd      	mov	sp, r7
   2081c:	b003      	add	sp, #12
   2081e:	bd90      	pop	{r4, r7, pc}
   20820:	20005650 	.word	0x20005650
   20824:	00022099 	.word	0x00022099

00020828 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   20828:	b580      	push	{r7, lr}
   2082a:	b082      	sub	sp, #8
   2082c:	af00      	add	r7, sp, #0
   2082e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   20830:	4b09      	ldr	r3, [pc, #36]	; (20858 <hif_init+0x30>)
   20832:	222c      	movs	r2, #44	; 0x2c
   20834:	2100      	movs	r1, #0
   20836:	0018      	movs	r0, r3
   20838:	4b08      	ldr	r3, [pc, #32]	; (2085c <hif_init+0x34>)
   2083a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   2083c:	4b08      	ldr	r3, [pc, #32]	; (20860 <hif_init+0x38>)
   2083e:	0018      	movs	r0, r3
   20840:	4b08      	ldr	r3, [pc, #32]	; (20864 <hif_init+0x3c>)
   20842:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   20844:	4b08      	ldr	r3, [pc, #32]	; (20868 <hif_init+0x40>)
   20846:	0019      	movs	r1, r3
   20848:	2003      	movs	r0, #3
   2084a:	4b08      	ldr	r3, [pc, #32]	; (2086c <hif_init+0x44>)
   2084c:	4798      	blx	r3
	return M2M_SUCCESS;
   2084e:	2300      	movs	r3, #0
}
   20850:	0018      	movs	r0, r3
   20852:	46bd      	mov	sp, r7
   20854:	b002      	add	sp, #8
   20856:	bd80      	pop	{r7, pc}
   20858:	20005650 	.word	0x20005650
   2085c:	00020611 	.word	0x00020611
   20860:	0002068d 	.word	0x0002068d
   20864:	0001fd4d 	.word	0x0001fd4d
   20868:	0002071d 	.word	0x0002071d
   2086c:	0002130d 	.word	0x0002130d

00020870 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   20870:	b590      	push	{r4, r7, lr}
   20872:	b089      	sub	sp, #36	; 0x24
   20874:	af00      	add	r7, sp, #0
   20876:	0004      	movs	r4, r0
   20878:	0008      	movs	r0, r1
   2087a:	603a      	str	r2, [r7, #0]
   2087c:	0019      	movs	r1, r3
   2087e:	1dfb      	adds	r3, r7, #7
   20880:	1c22      	adds	r2, r4, #0
   20882:	701a      	strb	r2, [r3, #0]
   20884:	1dbb      	adds	r3, r7, #6
   20886:	1c02      	adds	r2, r0, #0
   20888:	701a      	strb	r2, [r3, #0]
   2088a:	1d3b      	adds	r3, r7, #4
   2088c:	1c0a      	adds	r2, r1, #0
   2088e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   20890:	231f      	movs	r3, #31
   20892:	18fb      	adds	r3, r7, r3
   20894:	22ff      	movs	r2, #255	; 0xff
   20896:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   20898:	1dbb      	adds	r3, r7, #6
   2089a:	781b      	ldrb	r3, [r3, #0]
   2089c:	227f      	movs	r2, #127	; 0x7f
   2089e:	4013      	ands	r3, r2
   208a0:	b2da      	uxtb	r2, r3
   208a2:	2318      	movs	r3, #24
   208a4:	18fb      	adds	r3, r7, r3
   208a6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   208a8:	2318      	movs	r3, #24
   208aa:	18fb      	adds	r3, r7, r3
   208ac:	1dfa      	adds	r2, r7, #7
   208ae:	7812      	ldrb	r2, [r2, #0]
   208b0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   208b2:	2318      	movs	r3, #24
   208b4:	18fb      	adds	r3, r7, r3
   208b6:	2208      	movs	r2, #8
   208b8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   208ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   208bc:	2b00      	cmp	r3, #0
   208be:	d011      	beq.n	208e4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   208c0:	2318      	movs	r3, #24
   208c2:	18fb      	adds	r3, r7, r3
   208c4:	885b      	ldrh	r3, [r3, #2]
   208c6:	b29a      	uxth	r2, r3
   208c8:	2338      	movs	r3, #56	; 0x38
   208ca:	18f9      	adds	r1, r7, r3
   208cc:	2334      	movs	r3, #52	; 0x34
   208ce:	18fb      	adds	r3, r7, r3
   208d0:	8809      	ldrh	r1, [r1, #0]
   208d2:	881b      	ldrh	r3, [r3, #0]
   208d4:	18cb      	adds	r3, r1, r3
   208d6:	b29b      	uxth	r3, r3
   208d8:	18d3      	adds	r3, r2, r3
   208da:	b29a      	uxth	r2, r3
   208dc:	2318      	movs	r3, #24
   208de:	18fb      	adds	r3, r7, r3
   208e0:	805a      	strh	r2, [r3, #2]
   208e2:	e00a      	b.n	208fa <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   208e4:	2318      	movs	r3, #24
   208e6:	18fb      	adds	r3, r7, r3
   208e8:	885b      	ldrh	r3, [r3, #2]
   208ea:	b29a      	uxth	r2, r3
   208ec:	1d3b      	adds	r3, r7, #4
   208ee:	881b      	ldrh	r3, [r3, #0]
   208f0:	18d3      	adds	r3, r2, r3
   208f2:	b29a      	uxth	r2, r3
   208f4:	2318      	movs	r3, #24
   208f6:	18fb      	adds	r3, r7, r3
   208f8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   208fa:	231f      	movs	r3, #31
   208fc:	18fc      	adds	r4, r7, r3
   208fe:	4bb2      	ldr	r3, [pc, #712]	; (20bc8 <hif_send+0x358>)
   20900:	4798      	blx	r3
   20902:	0003      	movs	r3, r0
   20904:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   20906:	231f      	movs	r3, #31
   20908:	18fb      	adds	r3, r7, r3
   2090a:	781b      	ldrb	r3, [r3, #0]
   2090c:	b25b      	sxtb	r3, r3
   2090e:	2b00      	cmp	r3, #0
   20910:	d000      	beq.n	20914 <hif_send+0xa4>
   20912:	e129      	b.n	20b68 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   20914:	2300      	movs	r3, #0
   20916:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   20918:	230e      	movs	r3, #14
   2091a:	18fb      	adds	r3, r7, r3
   2091c:	2200      	movs	r2, #0
   2091e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   20920:	2300      	movs	r3, #0
   20922:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   20924:	1dfb      	adds	r3, r7, #7
   20926:	781a      	ldrb	r2, [r3, #0]
   20928:	697b      	ldr	r3, [r7, #20]
   2092a:	4313      	orrs	r3, r2
   2092c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   2092e:	1dbb      	adds	r3, r7, #6
   20930:	781b      	ldrb	r3, [r3, #0]
   20932:	021a      	lsls	r2, r3, #8
   20934:	697b      	ldr	r3, [r7, #20]
   20936:	4313      	orrs	r3, r2
   20938:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   2093a:	2318      	movs	r3, #24
   2093c:	18fb      	adds	r3, r7, r3
   2093e:	885b      	ldrh	r3, [r3, #2]
   20940:	b29b      	uxth	r3, r3
   20942:	041a      	lsls	r2, r3, #16
   20944:	697b      	ldr	r3, [r7, #20]
   20946:	4313      	orrs	r3, r2
   20948:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   2094a:	697b      	ldr	r3, [r7, #20]
   2094c:	221f      	movs	r2, #31
   2094e:	18bc      	adds	r4, r7, r2
   20950:	4a9e      	ldr	r2, [pc, #632]	; (20bcc <hif_send+0x35c>)
   20952:	0019      	movs	r1, r3
   20954:	0010      	movs	r0, r2
   20956:	4b9e      	ldr	r3, [pc, #632]	; (20bd0 <hif_send+0x360>)
   20958:	4798      	blx	r3
   2095a:	0003      	movs	r3, r0
   2095c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2095e:	231f      	movs	r3, #31
   20960:	18fb      	adds	r3, r7, r3
   20962:	781b      	ldrb	r3, [r3, #0]
   20964:	b25b      	sxtb	r3, r3
   20966:	2b00      	cmp	r3, #0
   20968:	d000      	beq.n	2096c <hif_send+0xfc>
   2096a:	e119      	b.n	20ba0 <hif_send+0x330>

		reg = 0UL;
   2096c:	2300      	movs	r3, #0
   2096e:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   20970:	697b      	ldr	r3, [r7, #20]
   20972:	2202      	movs	r2, #2
   20974:	4313      	orrs	r3, r2
   20976:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   20978:	697b      	ldr	r3, [r7, #20]
   2097a:	221f      	movs	r2, #31
   2097c:	18bc      	adds	r4, r7, r2
   2097e:	4a95      	ldr	r2, [pc, #596]	; (20bd4 <hif_send+0x364>)
   20980:	0019      	movs	r1, r3
   20982:	0010      	movs	r0, r2
   20984:	4b92      	ldr	r3, [pc, #584]	; (20bd0 <hif_send+0x360>)
   20986:	4798      	blx	r3
   20988:	0003      	movs	r3, r0
   2098a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2098c:	231f      	movs	r3, #31
   2098e:	18fb      	adds	r3, r7, r3
   20990:	781b      	ldrb	r3, [r3, #0]
   20992:	b25b      	sxtb	r3, r3
   20994:	2b00      	cmp	r3, #0
   20996:	d000      	beq.n	2099a <hif_send+0x12a>
   20998:	e104      	b.n	20ba4 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   2099a:	2300      	movs	r3, #0
   2099c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   2099e:	230e      	movs	r3, #14
   209a0:	18fb      	adds	r3, r7, r3
   209a2:	2200      	movs	r2, #0
   209a4:	801a      	strh	r2, [r3, #0]
   209a6:	e050      	b.n	20a4a <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   209a8:	231f      	movs	r3, #31
   209aa:	18fc      	adds	r4, r7, r3
   209ac:	2314      	movs	r3, #20
   209ae:	18fb      	adds	r3, r7, r3
   209b0:	4a88      	ldr	r2, [pc, #544]	; (20bd4 <hif_send+0x364>)
   209b2:	0019      	movs	r1, r3
   209b4:	0010      	movs	r0, r2
   209b6:	4b88      	ldr	r3, [pc, #544]	; (20bd8 <hif_send+0x368>)
   209b8:	4798      	blx	r3
   209ba:	0003      	movs	r3, r0
   209bc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   209be:	231f      	movs	r3, #31
   209c0:	18fb      	adds	r3, r7, r3
   209c2:	781b      	ldrb	r3, [r3, #0]
   209c4:	b25b      	sxtb	r3, r3
   209c6:	2b00      	cmp	r3, #0
   209c8:	d147      	bne.n	20a5a <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   209ca:	230e      	movs	r3, #14
   209cc:	18fb      	adds	r3, r7, r3
   209ce:	881b      	ldrh	r3, [r3, #0]
   209d0:	b29a      	uxth	r2, r3
   209d2:	23f4      	movs	r3, #244	; 0xf4
   209d4:	33ff      	adds	r3, #255	; 0xff
   209d6:	429a      	cmp	r2, r3
   209d8:	d916      	bls.n	20a08 <hif_send+0x198>
				if(cnt < 501) {
   209da:	230e      	movs	r3, #14
   209dc:	18fb      	adds	r3, r7, r3
   209de:	881b      	ldrh	r3, [r3, #0]
   209e0:	b29a      	uxth	r2, r3
   209e2:	23fa      	movs	r3, #250	; 0xfa
   209e4:	005b      	lsls	r3, r3, #1
   209e6:	429a      	cmp	r2, r3
   209e8:	d80b      	bhi.n	20a02 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   209ea:	4b7c      	ldr	r3, [pc, #496]	; (20bdc <hif_send+0x36c>)
   209ec:	0018      	movs	r0, r3
   209ee:	4b7c      	ldr	r3, [pc, #496]	; (20be0 <hif_send+0x370>)
   209f0:	4798      	blx	r3
   209f2:	4b7c      	ldr	r3, [pc, #496]	; (20be4 <hif_send+0x374>)
   209f4:	0018      	movs	r0, r3
   209f6:	4b7a      	ldr	r3, [pc, #488]	; (20be0 <hif_send+0x370>)
   209f8:	4798      	blx	r3
   209fa:	4b7b      	ldr	r3, [pc, #492]	; (20be8 <hif_send+0x378>)
   209fc:	0018      	movs	r0, r3
   209fe:	4b78      	ldr	r3, [pc, #480]	; (20be0 <hif_send+0x370>)
   20a00:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   20a02:	2001      	movs	r0, #1
   20a04:	4b79      	ldr	r3, [pc, #484]	; (20bec <hif_send+0x37c>)
   20a06:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   20a08:	697b      	ldr	r3, [r7, #20]
   20a0a:	2202      	movs	r2, #2
   20a0c:	4013      	ands	r3, r2
   20a0e:	d113      	bne.n	20a38 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   20a10:	231f      	movs	r3, #31
   20a12:	18fc      	adds	r4, r7, r3
   20a14:	2310      	movs	r3, #16
   20a16:	18fb      	adds	r3, r7, r3
   20a18:	4a75      	ldr	r2, [pc, #468]	; (20bf0 <hif_send+0x380>)
   20a1a:	0019      	movs	r1, r3
   20a1c:	0010      	movs	r0, r2
   20a1e:	4b6e      	ldr	r3, [pc, #440]	; (20bd8 <hif_send+0x368>)
   20a20:	4798      	blx	r3
   20a22:	0003      	movs	r3, r0
   20a24:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   20a26:	231f      	movs	r3, #31
   20a28:	18fb      	adds	r3, r7, r3
   20a2a:	781b      	ldrb	r3, [r3, #0]
   20a2c:	b25b      	sxtb	r3, r3
   20a2e:	2b00      	cmp	r3, #0
   20a30:	d015      	beq.n	20a5e <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   20a32:	2300      	movs	r3, #0
   20a34:	613b      	str	r3, [r7, #16]
					goto ERR1;
   20a36:	e0bc      	b.n	20bb2 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   20a38:	230e      	movs	r3, #14
   20a3a:	18fb      	adds	r3, r7, r3
   20a3c:	881b      	ldrh	r3, [r3, #0]
   20a3e:	b29b      	uxth	r3, r3
   20a40:	3301      	adds	r3, #1
   20a42:	b29a      	uxth	r2, r3
   20a44:	230e      	movs	r3, #14
   20a46:	18fb      	adds	r3, r7, r3
   20a48:	801a      	strh	r2, [r3, #0]
   20a4a:	230e      	movs	r3, #14
   20a4c:	18fb      	adds	r3, r7, r3
   20a4e:	881b      	ldrh	r3, [r3, #0]
   20a50:	b29b      	uxth	r3, r3
   20a52:	4a68      	ldr	r2, [pc, #416]	; (20bf4 <hif_send+0x384>)
   20a54:	4293      	cmp	r3, r2
   20a56:	d9a7      	bls.n	209a8 <hif_send+0x138>
   20a58:	e002      	b.n	20a60 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   20a5a:	46c0      	nop			; (mov r8, r8)
   20a5c:	e000      	b.n	20a60 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   20a5e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   20a60:	693b      	ldr	r3, [r7, #16]
   20a62:	2b00      	cmp	r3, #0
   20a64:	d100      	bne.n	20a68 <hif_send+0x1f8>
   20a66:	e074      	b.n	20b52 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   20a68:	693b      	ldr	r3, [r7, #16]
   20a6a:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   20a6c:	2318      	movs	r3, #24
   20a6e:	18fb      	adds	r3, r7, r3
   20a70:	885b      	ldrh	r3, [r3, #2]
   20a72:	b29a      	uxth	r2, r3
   20a74:	2318      	movs	r3, #24
   20a76:	18fb      	adds	r3, r7, r3
   20a78:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   20a7a:	68bb      	ldr	r3, [r7, #8]
   20a7c:	221f      	movs	r2, #31
   20a7e:	18bc      	adds	r4, r7, r2
   20a80:	2218      	movs	r2, #24
   20a82:	18b9      	adds	r1, r7, r2
   20a84:	2208      	movs	r2, #8
   20a86:	0018      	movs	r0, r3
   20a88:	4b5b      	ldr	r3, [pc, #364]	; (20bf8 <hif_send+0x388>)
   20a8a:	4798      	blx	r3
   20a8c:	0003      	movs	r3, r0
   20a8e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20a90:	231f      	movs	r3, #31
   20a92:	18fb      	adds	r3, r7, r3
   20a94:	781b      	ldrb	r3, [r3, #0]
   20a96:	b25b      	sxtb	r3, r3
   20a98:	2b00      	cmp	r3, #0
   20a9a:	d000      	beq.n	20a9e <hif_send+0x22e>
   20a9c:	e084      	b.n	20ba8 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   20a9e:	68bb      	ldr	r3, [r7, #8]
   20aa0:	3308      	adds	r3, #8
   20aa2:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   20aa4:	683b      	ldr	r3, [r7, #0]
   20aa6:	2b00      	cmp	r3, #0
   20aa8:	d016      	beq.n	20ad8 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   20aaa:	68b8      	ldr	r0, [r7, #8]
   20aac:	1d3b      	adds	r3, r7, #4
   20aae:	881a      	ldrh	r2, [r3, #0]
   20ab0:	231f      	movs	r3, #31
   20ab2:	18fc      	adds	r4, r7, r3
   20ab4:	683b      	ldr	r3, [r7, #0]
   20ab6:	0019      	movs	r1, r3
   20ab8:	4b4f      	ldr	r3, [pc, #316]	; (20bf8 <hif_send+0x388>)
   20aba:	4798      	blx	r3
   20abc:	0003      	movs	r3, r0
   20abe:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20ac0:	231f      	movs	r3, #31
   20ac2:	18fb      	adds	r3, r7, r3
   20ac4:	781b      	ldrb	r3, [r3, #0]
   20ac6:	b25b      	sxtb	r3, r3
   20ac8:	2b00      	cmp	r3, #0
   20aca:	d000      	beq.n	20ace <hif_send+0x25e>
   20acc:	e06e      	b.n	20bac <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   20ace:	1d3b      	adds	r3, r7, #4
   20ad0:	881a      	ldrh	r2, [r3, #0]
   20ad2:	68bb      	ldr	r3, [r7, #8]
   20ad4:	18d3      	adds	r3, r2, r3
   20ad6:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   20ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20ada:	2b00      	cmp	r3, #0
   20adc:	d021      	beq.n	20b22 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   20ade:	2338      	movs	r3, #56	; 0x38
   20ae0:	18fb      	adds	r3, r7, r3
   20ae2:	881a      	ldrh	r2, [r3, #0]
   20ae4:	1d3b      	adds	r3, r7, #4
   20ae6:	881b      	ldrh	r3, [r3, #0]
   20ae8:	1ad3      	subs	r3, r2, r3
   20aea:	001a      	movs	r2, r3
   20aec:	68bb      	ldr	r3, [r7, #8]
   20aee:	18d3      	adds	r3, r2, r3
   20af0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   20af2:	68b8      	ldr	r0, [r7, #8]
   20af4:	2334      	movs	r3, #52	; 0x34
   20af6:	18fb      	adds	r3, r7, r3
   20af8:	881a      	ldrh	r2, [r3, #0]
   20afa:	231f      	movs	r3, #31
   20afc:	18fc      	adds	r4, r7, r3
   20afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   20b00:	0019      	movs	r1, r3
   20b02:	4b3d      	ldr	r3, [pc, #244]	; (20bf8 <hif_send+0x388>)
   20b04:	4798      	blx	r3
   20b06:	0003      	movs	r3, r0
   20b08:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   20b0a:	231f      	movs	r3, #31
   20b0c:	18fb      	adds	r3, r7, r3
   20b0e:	781b      	ldrb	r3, [r3, #0]
   20b10:	b25b      	sxtb	r3, r3
   20b12:	2b00      	cmp	r3, #0
   20b14:	d14c      	bne.n	20bb0 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   20b16:	2334      	movs	r3, #52	; 0x34
   20b18:	18fb      	adds	r3, r7, r3
   20b1a:	881a      	ldrh	r2, [r3, #0]
   20b1c:	68bb      	ldr	r3, [r7, #8]
   20b1e:	18d3      	adds	r3, r2, r3
   20b20:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   20b22:	693b      	ldr	r3, [r7, #16]
   20b24:	009b      	lsls	r3, r3, #2
   20b26:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   20b28:	697b      	ldr	r3, [r7, #20]
   20b2a:	2202      	movs	r2, #2
   20b2c:	4313      	orrs	r3, r2
   20b2e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   20b30:	697b      	ldr	r3, [r7, #20]
   20b32:	221f      	movs	r2, #31
   20b34:	18bc      	adds	r4, r7, r2
   20b36:	4a31      	ldr	r2, [pc, #196]	; (20bfc <hif_send+0x38c>)
   20b38:	0019      	movs	r1, r3
   20b3a:	0010      	movs	r0, r2
   20b3c:	4b24      	ldr	r3, [pc, #144]	; (20bd0 <hif_send+0x360>)
   20b3e:	4798      	blx	r3
   20b40:	0003      	movs	r3, r0
   20b42:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   20b44:	231f      	movs	r3, #31
   20b46:	18fb      	adds	r3, r7, r3
   20b48:	781b      	ldrb	r3, [r3, #0]
   20b4a:	b25b      	sxtb	r3, r3
   20b4c:	2b00      	cmp	r3, #0
   20b4e:	d01c      	beq.n	20b8a <hif_send+0x31a>
   20b50:	e02f      	b.n	20bb2 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   20b52:	231f      	movs	r3, #31
   20b54:	18fc      	adds	r4, r7, r3
   20b56:	4b2a      	ldr	r3, [pc, #168]	; (20c00 <hif_send+0x390>)
   20b58:	4798      	blx	r3
   20b5a:	0003      	movs	r3, r0
   20b5c:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   20b5e:	231f      	movs	r3, #31
   20b60:	18fb      	adds	r3, r7, r3
   20b62:	22fd      	movs	r2, #253	; 0xfd
   20b64:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   20b66:	e026      	b.n	20bb6 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   20b68:	2398      	movs	r3, #152	; 0x98
   20b6a:	33ff      	adds	r3, #255	; 0xff
   20b6c:	001a      	movs	r2, r3
   20b6e:	4925      	ldr	r1, [pc, #148]	; (20c04 <hif_send+0x394>)
   20b70:	4b25      	ldr	r3, [pc, #148]	; (20c08 <hif_send+0x398>)
   20b72:	0018      	movs	r0, r3
   20b74:	4b1a      	ldr	r3, [pc, #104]	; (20be0 <hif_send+0x370>)
   20b76:	4798      	blx	r3
   20b78:	4b24      	ldr	r3, [pc, #144]	; (20c0c <hif_send+0x39c>)
   20b7a:	0018      	movs	r0, r3
   20b7c:	4b18      	ldr	r3, [pc, #96]	; (20be0 <hif_send+0x370>)
   20b7e:	4798      	blx	r3
   20b80:	4b19      	ldr	r3, [pc, #100]	; (20be8 <hif_send+0x378>)
   20b82:	0018      	movs	r0, r3
   20b84:	4b16      	ldr	r3, [pc, #88]	; (20be0 <hif_send+0x370>)
   20b86:	4798      	blx	r3
		goto ERR2;
   20b88:	e015      	b.n	20bb6 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   20b8a:	231f      	movs	r3, #31
   20b8c:	18fc      	adds	r4, r7, r3
   20b8e:	4b1c      	ldr	r3, [pc, #112]	; (20c00 <hif_send+0x390>)
   20b90:	4798      	blx	r3
   20b92:	0003      	movs	r3, r0
   20b94:	7023      	strb	r3, [r4, #0]
	return ret;
   20b96:	231f      	movs	r3, #31
   20b98:	18fb      	adds	r3, r7, r3
   20b9a:	781b      	ldrb	r3, [r3, #0]
   20b9c:	b25b      	sxtb	r3, r3
   20b9e:	e00e      	b.n	20bbe <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   20ba0:	46c0      	nop			; (mov r8, r8)
   20ba2:	e006      	b.n	20bb2 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   20ba4:	46c0      	nop			; (mov r8, r8)
   20ba6:	e004      	b.n	20bb2 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   20ba8:	46c0      	nop			; (mov r8, r8)
   20baa:	e002      	b.n	20bb2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20bac:	46c0      	nop			; (mov r8, r8)
   20bae:	e000      	b.n	20bb2 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   20bb0:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   20bb2:	4b17      	ldr	r3, [pc, #92]	; (20c10 <hif_send+0x3a0>)
   20bb4:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   20bb6:	231f      	movs	r3, #31
   20bb8:	18fb      	adds	r3, r7, r3
   20bba:	781b      	ldrb	r3, [r3, #0]
   20bbc:	b25b      	sxtb	r3, r3
}
   20bbe:	0018      	movs	r0, r3
   20bc0:	46bd      	mov	sp, r7
   20bc2:	b009      	add	sp, #36	; 0x24
   20bc4:	bd90      	pop	{r4, r7, pc}
   20bc6:	46c0      	nop			; (mov r8, r8)
   20bc8:	00020739 	.word	0x00020739
   20bcc:	0000108c 	.word	0x0000108c
   20bd0:	000226c5 	.word	0x000226c5
   20bd4:	00001078 	.word	0x00001078
   20bd8:	000226a1 	.word	0x000226a1
   20bdc:	00037b9c 	.word	0x00037b9c
   20be0:	0001dc99 	.word	0x0001dc99
   20be4:	00037ba8 	.word	0x00037ba8
   20be8:	00037bbc 	.word	0x00037bbc
   20bec:	0001fd31 	.word	0x0001fd31
   20bf0:	00150400 	.word	0x00150400
   20bf4:	000003e7 	.word	0x000003e7
   20bf8:	0002280d 	.word	0x0002280d
   20bfc:	0000106c 	.word	0x0000106c
   20c00:	000207d1 	.word	0x000207d1
   20c04:	00037ec4 	.word	0x00037ec4
   20c08:	00037bc0 	.word	0x00037bc0
   20c0c:	00037bd4 	.word	0x00037bd4
   20c10:	000207a9 	.word	0x000207a9

00020c14 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   20c14:	b590      	push	{r4, r7, lr}
   20c16:	b087      	sub	sp, #28
   20c18:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   20c1a:	230f      	movs	r3, #15
   20c1c:	18fb      	adds	r3, r7, r3
   20c1e:	2200      	movs	r2, #0
   20c20:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   20c22:	230f      	movs	r3, #15
   20c24:	18fc      	adds	r4, r7, r3
   20c26:	2308      	movs	r3, #8
   20c28:	18fb      	adds	r3, r7, r3
   20c2a:	4adc      	ldr	r2, [pc, #880]	; (20f9c <hif_isr+0x388>)
   20c2c:	0019      	movs	r1, r3
   20c2e:	0010      	movs	r0, r2
   20c30:	4bdb      	ldr	r3, [pc, #876]	; (20fa0 <hif_isr+0x38c>)
   20c32:	4798      	blx	r3
   20c34:	0003      	movs	r3, r0
   20c36:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   20c38:	230f      	movs	r3, #15
   20c3a:	18fb      	adds	r3, r7, r3
   20c3c:	781b      	ldrb	r3, [r3, #0]
   20c3e:	b25b      	sxtb	r3, r3
   20c40:	2b00      	cmp	r3, #0
   20c42:	d000      	beq.n	20c46 <hif_isr+0x32>
   20c44:	e21e      	b.n	21084 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   20c46:	68bb      	ldr	r3, [r7, #8]
   20c48:	2201      	movs	r2, #1
   20c4a:	4013      	ands	r3, r2
   20c4c:	d100      	bne.n	20c50 <hif_isr+0x3c>
   20c4e:	e204      	b.n	2105a <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   20c50:	2000      	movs	r0, #0
   20c52:	4bd4      	ldr	r3, [pc, #848]	; (20fa4 <hif_isr+0x390>)
   20c54:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   20c56:	68bb      	ldr	r3, [r7, #8]
   20c58:	2201      	movs	r2, #1
   20c5a:	4393      	bics	r3, r2
   20c5c:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20c5e:	68bb      	ldr	r3, [r7, #8]
   20c60:	220f      	movs	r2, #15
   20c62:	18bc      	adds	r4, r7, r2
   20c64:	4acd      	ldr	r2, [pc, #820]	; (20f9c <hif_isr+0x388>)
   20c66:	0019      	movs	r1, r3
   20c68:	0010      	movs	r0, r2
   20c6a:	4bcf      	ldr	r3, [pc, #828]	; (20fa8 <hif_isr+0x394>)
   20c6c:	4798      	blx	r3
   20c6e:	0003      	movs	r3, r0
   20c70:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   20c72:	230f      	movs	r3, #15
   20c74:	18fb      	adds	r3, r7, r3
   20c76:	781b      	ldrb	r3, [r3, #0]
   20c78:	b25b      	sxtb	r3, r3
   20c7a:	2b00      	cmp	r3, #0
   20c7c:	d000      	beq.n	20c80 <hif_isr+0x6c>
   20c7e:	e210      	b.n	210a2 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   20c80:	4bca      	ldr	r3, [pc, #808]	; (20fac <hif_isr+0x398>)
   20c82:	2201      	movs	r2, #1
   20c84:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   20c86:	68bb      	ldr	r3, [r7, #8]
   20c88:	089b      	lsrs	r3, r3, #2
   20c8a:	b29a      	uxth	r2, r3
   20c8c:	230c      	movs	r3, #12
   20c8e:	18fb      	adds	r3, r7, r3
   20c90:	0512      	lsls	r2, r2, #20
   20c92:	0d12      	lsrs	r2, r2, #20
   20c94:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   20c96:	230c      	movs	r3, #12
   20c98:	18fb      	adds	r3, r7, r3
   20c9a:	881b      	ldrh	r3, [r3, #0]
   20c9c:	2b00      	cmp	r3, #0
   20c9e:	d100      	bne.n	20ca2 <hif_isr+0x8e>
   20ca0:	e1c8      	b.n	21034 <hif_isr+0x420>
				uint32 address = 0;
   20ca2:	2300      	movs	r3, #0
   20ca4:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   20ca6:	230f      	movs	r3, #15
   20ca8:	18fc      	adds	r4, r7, r3
   20caa:	003b      	movs	r3, r7
   20cac:	4ac0      	ldr	r2, [pc, #768]	; (20fb0 <hif_isr+0x39c>)
   20cae:	0019      	movs	r1, r3
   20cb0:	0010      	movs	r0, r2
   20cb2:	4bbb      	ldr	r3, [pc, #748]	; (20fa0 <hif_isr+0x38c>)
   20cb4:	4798      	blx	r3
   20cb6:	0003      	movs	r3, r0
   20cb8:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   20cba:	230f      	movs	r3, #15
   20cbc:	18fb      	adds	r3, r7, r3
   20cbe:	781b      	ldrb	r3, [r3, #0]
   20cc0:	b25b      	sxtb	r3, r3
   20cc2:	2b00      	cmp	r3, #0
   20cc4:	d012      	beq.n	20cec <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   20cc6:	23e4      	movs	r3, #228	; 0xe4
   20cc8:	005a      	lsls	r2, r3, #1
   20cca:	49ba      	ldr	r1, [pc, #744]	; (20fb4 <hif_isr+0x3a0>)
   20ccc:	4bba      	ldr	r3, [pc, #744]	; (20fb8 <hif_isr+0x3a4>)
   20cce:	0018      	movs	r0, r3
   20cd0:	4bba      	ldr	r3, [pc, #744]	; (20fbc <hif_isr+0x3a8>)
   20cd2:	4798      	blx	r3
   20cd4:	4bba      	ldr	r3, [pc, #744]	; (20fc0 <hif_isr+0x3ac>)
   20cd6:	0018      	movs	r0, r3
   20cd8:	4bb8      	ldr	r3, [pc, #736]	; (20fbc <hif_isr+0x3a8>)
   20cda:	4798      	blx	r3
   20cdc:	4bb9      	ldr	r3, [pc, #740]	; (20fc4 <hif_isr+0x3b0>)
   20cde:	0018      	movs	r0, r3
   20ce0:	4bb6      	ldr	r3, [pc, #728]	; (20fbc <hif_isr+0x3a8>)
   20ce2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20ce4:	2001      	movs	r0, #1
   20ce6:	4baf      	ldr	r3, [pc, #700]	; (20fa4 <hif_isr+0x390>)
   20ce8:	4798      	blx	r3
					goto ERR1;
   20cea:	e1db      	b.n	210a4 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   20cec:	683a      	ldr	r2, [r7, #0]
   20cee:	4baf      	ldr	r3, [pc, #700]	; (20fac <hif_isr+0x398>)
   20cf0:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   20cf2:	230c      	movs	r3, #12
   20cf4:	18fb      	adds	r3, r7, r3
   20cf6:	881a      	ldrh	r2, [r3, #0]
   20cf8:	4bac      	ldr	r3, [pc, #688]	; (20fac <hif_isr+0x398>)
   20cfa:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   20cfc:	683b      	ldr	r3, [r7, #0]
   20cfe:	220f      	movs	r2, #15
   20d00:	18bc      	adds	r4, r7, r2
   20d02:	1d39      	adds	r1, r7, #4
   20d04:	2204      	movs	r2, #4
   20d06:	0018      	movs	r0, r3
   20d08:	4baf      	ldr	r3, [pc, #700]	; (20fc8 <hif_isr+0x3b4>)
   20d0a:	4798      	blx	r3
   20d0c:	0003      	movs	r3, r0
   20d0e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   20d10:	1d3b      	adds	r3, r7, #4
   20d12:	885b      	ldrh	r3, [r3, #2]
   20d14:	b29a      	uxth	r2, r3
   20d16:	1d3b      	adds	r3, r7, #4
   20d18:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   20d1a:	230f      	movs	r3, #15
   20d1c:	18fb      	adds	r3, r7, r3
   20d1e:	781b      	ldrb	r3, [r3, #0]
   20d20:	b25b      	sxtb	r3, r3
   20d22:	2b00      	cmp	r3, #0
   20d24:	d012      	beq.n	20d4c <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   20d26:	23e9      	movs	r3, #233	; 0xe9
   20d28:	005a      	lsls	r2, r3, #1
   20d2a:	49a2      	ldr	r1, [pc, #648]	; (20fb4 <hif_isr+0x3a0>)
   20d2c:	4ba2      	ldr	r3, [pc, #648]	; (20fb8 <hif_isr+0x3a4>)
   20d2e:	0018      	movs	r0, r3
   20d30:	4ba2      	ldr	r3, [pc, #648]	; (20fbc <hif_isr+0x3a8>)
   20d32:	4798      	blx	r3
   20d34:	4ba5      	ldr	r3, [pc, #660]	; (20fcc <hif_isr+0x3b8>)
   20d36:	0018      	movs	r0, r3
   20d38:	4ba0      	ldr	r3, [pc, #640]	; (20fbc <hif_isr+0x3a8>)
   20d3a:	4798      	blx	r3
   20d3c:	4ba1      	ldr	r3, [pc, #644]	; (20fc4 <hif_isr+0x3b0>)
   20d3e:	0018      	movs	r0, r3
   20d40:	4b9e      	ldr	r3, [pc, #632]	; (20fbc <hif_isr+0x3a8>)
   20d42:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   20d44:	2001      	movs	r0, #1
   20d46:	4b97      	ldr	r3, [pc, #604]	; (20fa4 <hif_isr+0x390>)
   20d48:	4798      	blx	r3
					goto ERR1;
   20d4a:	e1ab      	b.n	210a4 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   20d4c:	1d3b      	adds	r3, r7, #4
   20d4e:	885b      	ldrh	r3, [r3, #2]
   20d50:	b29b      	uxth	r3, r3
   20d52:	220c      	movs	r2, #12
   20d54:	18ba      	adds	r2, r7, r2
   20d56:	8812      	ldrh	r2, [r2, #0]
   20d58:	429a      	cmp	r2, r3
   20d5a:	d02f      	beq.n	20dbc <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   20d5c:	230c      	movs	r3, #12
   20d5e:	18fb      	adds	r3, r7, r3
   20d60:	881b      	ldrh	r3, [r3, #0]
   20d62:	1d3a      	adds	r2, r7, #4
   20d64:	8852      	ldrh	r2, [r2, #2]
   20d66:	b292      	uxth	r2, r2
   20d68:	1a9b      	subs	r3, r3, r2
   20d6a:	2b04      	cmp	r3, #4
   20d6c:	dd26      	ble.n	20dbc <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   20d6e:	23dc      	movs	r3, #220	; 0xdc
   20d70:	33ff      	adds	r3, #255	; 0xff
   20d72:	001a      	movs	r2, r3
   20d74:	498f      	ldr	r1, [pc, #572]	; (20fb4 <hif_isr+0x3a0>)
   20d76:	4b90      	ldr	r3, [pc, #576]	; (20fb8 <hif_isr+0x3a4>)
   20d78:	0018      	movs	r0, r3
   20d7a:	4b90      	ldr	r3, [pc, #576]	; (20fbc <hif_isr+0x3a8>)
   20d7c:	4798      	blx	r3
   20d7e:	230c      	movs	r3, #12
   20d80:	18fb      	adds	r3, r7, r3
   20d82:	8819      	ldrh	r1, [r3, #0]
   20d84:	1d3b      	adds	r3, r7, #4
   20d86:	885b      	ldrh	r3, [r3, #2]
   20d88:	b29b      	uxth	r3, r3
   20d8a:	001a      	movs	r2, r3
   20d8c:	1d3b      	adds	r3, r7, #4
   20d8e:	781b      	ldrb	r3, [r3, #0]
   20d90:	b2db      	uxtb	r3, r3
   20d92:	001c      	movs	r4, r3
   20d94:	1d3b      	adds	r3, r7, #4
   20d96:	785b      	ldrb	r3, [r3, #1]
   20d98:	b2db      	uxtb	r3, r3
   20d9a:	488d      	ldr	r0, [pc, #564]	; (20fd0 <hif_isr+0x3bc>)
   20d9c:	9300      	str	r3, [sp, #0]
   20d9e:	0023      	movs	r3, r4
   20da0:	4c86      	ldr	r4, [pc, #536]	; (20fbc <hif_isr+0x3a8>)
   20da2:	47a0      	blx	r4
   20da4:	4b87      	ldr	r3, [pc, #540]	; (20fc4 <hif_isr+0x3b0>)
   20da6:	0018      	movs	r0, r3
   20da8:	4b84      	ldr	r3, [pc, #528]	; (20fbc <hif_isr+0x3a8>)
   20daa:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   20dac:	2001      	movs	r0, #1
   20dae:	4b7d      	ldr	r3, [pc, #500]	; (20fa4 <hif_isr+0x390>)
   20db0:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   20db2:	230f      	movs	r3, #15
   20db4:	18fb      	adds	r3, r7, r3
   20db6:	22fa      	movs	r2, #250	; 0xfa
   20db8:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   20dba:	e173      	b.n	210a4 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   20dbc:	1d3b      	adds	r3, r7, #4
   20dbe:	781b      	ldrb	r3, [r3, #0]
   20dc0:	b2db      	uxtb	r3, r3
   20dc2:	2b01      	cmp	r3, #1
   20dc4:	d122      	bne.n	20e0c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   20dc6:	4b79      	ldr	r3, [pc, #484]	; (20fac <hif_isr+0x398>)
   20dc8:	691b      	ldr	r3, [r3, #16]
   20dca:	2b00      	cmp	r3, #0
   20dcc:	d00d      	beq.n	20dea <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20dce:	4b77      	ldr	r3, [pc, #476]	; (20fac <hif_isr+0x398>)
   20dd0:	691b      	ldr	r3, [r3, #16]
   20dd2:	1d3a      	adds	r2, r7, #4
   20dd4:	7852      	ldrb	r2, [r2, #1]
   20dd6:	b2d0      	uxtb	r0, r2
   20dd8:	1d3a      	adds	r2, r7, #4
   20dda:	8852      	ldrh	r2, [r2, #2]
   20ddc:	b292      	uxth	r2, r2
   20dde:	3a08      	subs	r2, #8
   20de0:	b291      	uxth	r1, r2
   20de2:	683a      	ldr	r2, [r7, #0]
   20de4:	3208      	adds	r2, #8
   20de6:	4798      	blx	r3
   20de8:	e102      	b.n	20ff0 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   20dea:	23e8      	movs	r3, #232	; 0xe8
   20dec:	33ff      	adds	r3, #255	; 0xff
   20dee:	001a      	movs	r2, r3
   20df0:	4970      	ldr	r1, [pc, #448]	; (20fb4 <hif_isr+0x3a0>)
   20df2:	4b71      	ldr	r3, [pc, #452]	; (20fb8 <hif_isr+0x3a4>)
   20df4:	0018      	movs	r0, r3
   20df6:	4b71      	ldr	r3, [pc, #452]	; (20fbc <hif_isr+0x3a8>)
   20df8:	4798      	blx	r3
   20dfa:	4b76      	ldr	r3, [pc, #472]	; (20fd4 <hif_isr+0x3c0>)
   20dfc:	0018      	movs	r0, r3
   20dfe:	4b6f      	ldr	r3, [pc, #444]	; (20fbc <hif_isr+0x3a8>)
   20e00:	4798      	blx	r3
   20e02:	4b70      	ldr	r3, [pc, #448]	; (20fc4 <hif_isr+0x3b0>)
   20e04:	0018      	movs	r0, r3
   20e06:	4b6d      	ldr	r3, [pc, #436]	; (20fbc <hif_isr+0x3a8>)
   20e08:	4798      	blx	r3
   20e0a:	e0f1      	b.n	20ff0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   20e0c:	1d3b      	adds	r3, r7, #4
   20e0e:	781b      	ldrb	r3, [r3, #0]
   20e10:	b2db      	uxtb	r3, r3
   20e12:	2b02      	cmp	r3, #2
   20e14:	d122      	bne.n	20e5c <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   20e16:	4b65      	ldr	r3, [pc, #404]	; (20fac <hif_isr+0x398>)
   20e18:	695b      	ldr	r3, [r3, #20]
   20e1a:	2b00      	cmp	r3, #0
   20e1c:	d00d      	beq.n	20e3a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20e1e:	4b63      	ldr	r3, [pc, #396]	; (20fac <hif_isr+0x398>)
   20e20:	695b      	ldr	r3, [r3, #20]
   20e22:	1d3a      	adds	r2, r7, #4
   20e24:	7852      	ldrb	r2, [r2, #1]
   20e26:	b2d0      	uxtb	r0, r2
   20e28:	1d3a      	adds	r2, r7, #4
   20e2a:	8852      	ldrh	r2, [r2, #2]
   20e2c:	b292      	uxth	r2, r2
   20e2e:	3a08      	subs	r2, #8
   20e30:	b291      	uxth	r1, r2
   20e32:	683a      	ldr	r2, [r7, #0]
   20e34:	3208      	adds	r2, #8
   20e36:	4798      	blx	r3
   20e38:	e0da      	b.n	20ff0 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   20e3a:	23f0      	movs	r3, #240	; 0xf0
   20e3c:	33ff      	adds	r3, #255	; 0xff
   20e3e:	001a      	movs	r2, r3
   20e40:	495c      	ldr	r1, [pc, #368]	; (20fb4 <hif_isr+0x3a0>)
   20e42:	4b5d      	ldr	r3, [pc, #372]	; (20fb8 <hif_isr+0x3a4>)
   20e44:	0018      	movs	r0, r3
   20e46:	4b5d      	ldr	r3, [pc, #372]	; (20fbc <hif_isr+0x3a8>)
   20e48:	4798      	blx	r3
   20e4a:	4b63      	ldr	r3, [pc, #396]	; (20fd8 <hif_isr+0x3c4>)
   20e4c:	0018      	movs	r0, r3
   20e4e:	4b5b      	ldr	r3, [pc, #364]	; (20fbc <hif_isr+0x3a8>)
   20e50:	4798      	blx	r3
   20e52:	4b5c      	ldr	r3, [pc, #368]	; (20fc4 <hif_isr+0x3b0>)
   20e54:	0018      	movs	r0, r3
   20e56:	4b59      	ldr	r3, [pc, #356]	; (20fbc <hif_isr+0x3a8>)
   20e58:	4798      	blx	r3
   20e5a:	e0c9      	b.n	20ff0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   20e5c:	1d3b      	adds	r3, r7, #4
   20e5e:	781b      	ldrb	r3, [r3, #0]
   20e60:	b2db      	uxtb	r3, r3
   20e62:	2b04      	cmp	r3, #4
   20e64:	d122      	bne.n	20eac <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   20e66:	4b51      	ldr	r3, [pc, #324]	; (20fac <hif_isr+0x398>)
   20e68:	699b      	ldr	r3, [r3, #24]
   20e6a:	2b00      	cmp	r3, #0
   20e6c:	d00d      	beq.n	20e8a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20e6e:	4b4f      	ldr	r3, [pc, #316]	; (20fac <hif_isr+0x398>)
   20e70:	699b      	ldr	r3, [r3, #24]
   20e72:	1d3a      	adds	r2, r7, #4
   20e74:	7852      	ldrb	r2, [r2, #1]
   20e76:	b2d0      	uxtb	r0, r2
   20e78:	1d3a      	adds	r2, r7, #4
   20e7a:	8852      	ldrh	r2, [r2, #2]
   20e7c:	b292      	uxth	r2, r2
   20e7e:	3a08      	subs	r2, #8
   20e80:	b291      	uxth	r1, r2
   20e82:	683a      	ldr	r2, [r7, #0]
   20e84:	3208      	adds	r2, #8
   20e86:	4798      	blx	r3
   20e88:	e0b2      	b.n	20ff0 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   20e8a:	23f8      	movs	r3, #248	; 0xf8
   20e8c:	33ff      	adds	r3, #255	; 0xff
   20e8e:	001a      	movs	r2, r3
   20e90:	4948      	ldr	r1, [pc, #288]	; (20fb4 <hif_isr+0x3a0>)
   20e92:	4b49      	ldr	r3, [pc, #292]	; (20fb8 <hif_isr+0x3a4>)
   20e94:	0018      	movs	r0, r3
   20e96:	4b49      	ldr	r3, [pc, #292]	; (20fbc <hif_isr+0x3a8>)
   20e98:	4798      	blx	r3
   20e9a:	4b50      	ldr	r3, [pc, #320]	; (20fdc <hif_isr+0x3c8>)
   20e9c:	0018      	movs	r0, r3
   20e9e:	4b47      	ldr	r3, [pc, #284]	; (20fbc <hif_isr+0x3a8>)
   20ea0:	4798      	blx	r3
   20ea2:	4b48      	ldr	r3, [pc, #288]	; (20fc4 <hif_isr+0x3b0>)
   20ea4:	0018      	movs	r0, r3
   20ea6:	4b45      	ldr	r3, [pc, #276]	; (20fbc <hif_isr+0x3a8>)
   20ea8:	4798      	blx	r3
   20eaa:	e0a1      	b.n	20ff0 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   20eac:	1d3b      	adds	r3, r7, #4
   20eae:	781b      	ldrb	r3, [r3, #0]
   20eb0:	b2db      	uxtb	r3, r3
   20eb2:	2b06      	cmp	r3, #6
   20eb4:	d121      	bne.n	20efa <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   20eb6:	4b3d      	ldr	r3, [pc, #244]	; (20fac <hif_isr+0x398>)
   20eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20eba:	2b00      	cmp	r3, #0
   20ebc:	d00d      	beq.n	20eda <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20ebe:	4b3b      	ldr	r3, [pc, #236]	; (20fac <hif_isr+0x398>)
   20ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20ec2:	1d3a      	adds	r2, r7, #4
   20ec4:	7852      	ldrb	r2, [r2, #1]
   20ec6:	b2d0      	uxtb	r0, r2
   20ec8:	1d3a      	adds	r2, r7, #4
   20eca:	8852      	ldrh	r2, [r2, #2]
   20ecc:	b292      	uxth	r2, r2
   20ece:	3a08      	subs	r2, #8
   20ed0:	b291      	uxth	r1, r2
   20ed2:	683a      	ldr	r2, [r7, #0]
   20ed4:	3208      	adds	r2, #8
   20ed6:	4798      	blx	r3
   20ed8:	e08a      	b.n	20ff0 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   20eda:	2380      	movs	r3, #128	; 0x80
   20edc:	009a      	lsls	r2, r3, #2
   20ede:	4935      	ldr	r1, [pc, #212]	; (20fb4 <hif_isr+0x3a0>)
   20ee0:	4b35      	ldr	r3, [pc, #212]	; (20fb8 <hif_isr+0x3a4>)
   20ee2:	0018      	movs	r0, r3
   20ee4:	4b35      	ldr	r3, [pc, #212]	; (20fbc <hif_isr+0x3a8>)
   20ee6:	4798      	blx	r3
   20ee8:	4b3d      	ldr	r3, [pc, #244]	; (20fe0 <hif_isr+0x3cc>)
   20eea:	0018      	movs	r0, r3
   20eec:	4b33      	ldr	r3, [pc, #204]	; (20fbc <hif_isr+0x3a8>)
   20eee:	4798      	blx	r3
   20ef0:	4b34      	ldr	r3, [pc, #208]	; (20fc4 <hif_isr+0x3b0>)
   20ef2:	0018      	movs	r0, r3
   20ef4:	4b31      	ldr	r3, [pc, #196]	; (20fbc <hif_isr+0x3a8>)
   20ef6:	4798      	blx	r3
   20ef8:	e07a      	b.n	20ff0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   20efa:	1d3b      	adds	r3, r7, #4
   20efc:	781b      	ldrb	r3, [r3, #0]
   20efe:	b2db      	uxtb	r3, r3
   20f00:	2b07      	cmp	r3, #7
   20f02:	d120      	bne.n	20f46 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   20f04:	4b29      	ldr	r3, [pc, #164]	; (20fac <hif_isr+0x398>)
   20f06:	69db      	ldr	r3, [r3, #28]
   20f08:	2b00      	cmp	r3, #0
   20f0a:	d00d      	beq.n	20f28 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20f0c:	4b27      	ldr	r3, [pc, #156]	; (20fac <hif_isr+0x398>)
   20f0e:	69db      	ldr	r3, [r3, #28]
   20f10:	1d3a      	adds	r2, r7, #4
   20f12:	7852      	ldrb	r2, [r2, #1]
   20f14:	b2d0      	uxtb	r0, r2
   20f16:	1d3a      	adds	r2, r7, #4
   20f18:	8852      	ldrh	r2, [r2, #2]
   20f1a:	b292      	uxth	r2, r2
   20f1c:	3a08      	subs	r2, #8
   20f1e:	b291      	uxth	r1, r2
   20f20:	683a      	ldr	r2, [r7, #0]
   20f22:	3208      	adds	r2, #8
   20f24:	4798      	blx	r3
   20f26:	e063      	b.n	20ff0 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   20f28:	4a2e      	ldr	r2, [pc, #184]	; (20fe4 <hif_isr+0x3d0>)
   20f2a:	4922      	ldr	r1, [pc, #136]	; (20fb4 <hif_isr+0x3a0>)
   20f2c:	4b22      	ldr	r3, [pc, #136]	; (20fb8 <hif_isr+0x3a4>)
   20f2e:	0018      	movs	r0, r3
   20f30:	4b22      	ldr	r3, [pc, #136]	; (20fbc <hif_isr+0x3a8>)
   20f32:	4798      	blx	r3
   20f34:	4b2c      	ldr	r3, [pc, #176]	; (20fe8 <hif_isr+0x3d4>)
   20f36:	0018      	movs	r0, r3
   20f38:	4b20      	ldr	r3, [pc, #128]	; (20fbc <hif_isr+0x3a8>)
   20f3a:	4798      	blx	r3
   20f3c:	4b21      	ldr	r3, [pc, #132]	; (20fc4 <hif_isr+0x3b0>)
   20f3e:	0018      	movs	r0, r3
   20f40:	4b1e      	ldr	r3, [pc, #120]	; (20fbc <hif_isr+0x3a8>)
   20f42:	4798      	blx	r3
   20f44:	e054      	b.n	20ff0 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   20f46:	1d3b      	adds	r3, r7, #4
   20f48:	781b      	ldrb	r3, [r3, #0]
   20f4a:	b2db      	uxtb	r3, r3
   20f4c:	2b05      	cmp	r3, #5
   20f4e:	d111      	bne.n	20f74 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   20f50:	4b16      	ldr	r3, [pc, #88]	; (20fac <hif_isr+0x398>)
   20f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20f54:	2b00      	cmp	r3, #0
   20f56:	d04b      	beq.n	20ff0 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   20f58:	4b14      	ldr	r3, [pc, #80]	; (20fac <hif_isr+0x398>)
   20f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20f5c:	1d3a      	adds	r2, r7, #4
   20f5e:	7852      	ldrb	r2, [r2, #1]
   20f60:	b2d0      	uxtb	r0, r2
   20f62:	1d3a      	adds	r2, r7, #4
   20f64:	8852      	ldrh	r2, [r2, #2]
   20f66:	b292      	uxth	r2, r2
   20f68:	3a08      	subs	r2, #8
   20f6a:	b291      	uxth	r1, r2
   20f6c:	683a      	ldr	r2, [r7, #0]
   20f6e:	3208      	adds	r2, #8
   20f70:	4798      	blx	r3
   20f72:	e03d      	b.n	20ff0 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   20f74:	2384      	movs	r3, #132	; 0x84
   20f76:	009a      	lsls	r2, r3, #2
   20f78:	490e      	ldr	r1, [pc, #56]	; (20fb4 <hif_isr+0x3a0>)
   20f7a:	4b0f      	ldr	r3, [pc, #60]	; (20fb8 <hif_isr+0x3a4>)
   20f7c:	0018      	movs	r0, r3
   20f7e:	4b0f      	ldr	r3, [pc, #60]	; (20fbc <hif_isr+0x3a8>)
   20f80:	4798      	blx	r3
   20f82:	4b1a      	ldr	r3, [pc, #104]	; (20fec <hif_isr+0x3d8>)
   20f84:	0018      	movs	r0, r3
   20f86:	4b0d      	ldr	r3, [pc, #52]	; (20fbc <hif_isr+0x3a8>)
   20f88:	4798      	blx	r3
   20f8a:	4b0e      	ldr	r3, [pc, #56]	; (20fc4 <hif_isr+0x3b0>)
   20f8c:	0018      	movs	r0, r3
   20f8e:	4b0b      	ldr	r3, [pc, #44]	; (20fbc <hif_isr+0x3a8>)
   20f90:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   20f92:	230f      	movs	r3, #15
   20f94:	18fb      	adds	r3, r7, r3
   20f96:	22fa      	movs	r2, #250	; 0xfa
   20f98:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   20f9a:	e083      	b.n	210a4 <hif_isr+0x490>
   20f9c:	00001070 	.word	0x00001070
   20fa0:	000226a1 	.word	0x000226a1
   20fa4:	0001fdc5 	.word	0x0001fdc5
   20fa8:	000226c5 	.word	0x000226c5
   20fac:	20005650 	.word	0x20005650
   20fb0:	00001084 	.word	0x00001084
   20fb4:	00037ed0 	.word	0x00037ed0
   20fb8:	00037bc0 	.word	0x00037bc0
   20fbc:	0001dc99 	.word	0x0001dc99
   20fc0:	00037bf4 	.word	0x00037bf4
   20fc4:	00037bbc 	.word	0x00037bbc
   20fc8:	00022715 	.word	0x00022715
   20fcc:	00037c1c 	.word	0x00037c1c
   20fd0:	00037c34 	.word	0x00037c34
   20fd4:	00037c74 	.word	0x00037c74
   20fd8:	00037c98 	.word	0x00037c98
   20fdc:	00037cbc 	.word	0x00037cbc
   20fe0:	00037cdc 	.word	0x00037cdc
   20fe4:	00000207 	.word	0x00000207
   20fe8:	00037d00 	.word	0x00037d00
   20fec:	00037d24 	.word	0x00037d24
				}
				if(gstrHifCxt.u8HifRXDone)
   20ff0:	4b30      	ldr	r3, [pc, #192]	; (210b4 <hif_isr+0x4a0>)
   20ff2:	789b      	ldrb	r3, [r3, #2]
   20ff4:	b2db      	uxtb	r3, r3
   20ff6:	2b00      	cmp	r3, #0
   20ff8:	d054      	beq.n	210a4 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   20ffa:	4a2f      	ldr	r2, [pc, #188]	; (210b8 <hif_isr+0x4a4>)
   20ffc:	492f      	ldr	r1, [pc, #188]	; (210bc <hif_isr+0x4a8>)
   20ffe:	4b30      	ldr	r3, [pc, #192]	; (210c0 <hif_isr+0x4ac>)
   21000:	0018      	movs	r0, r3
   21002:	4b30      	ldr	r3, [pc, #192]	; (210c4 <hif_isr+0x4b0>)
   21004:	4798      	blx	r3
   21006:	1d3b      	adds	r3, r7, #4
   21008:	781b      	ldrb	r3, [r3, #0]
   2100a:	b2db      	uxtb	r3, r3
   2100c:	0019      	movs	r1, r3
   2100e:	1d3b      	adds	r3, r7, #4
   21010:	785b      	ldrb	r3, [r3, #1]
   21012:	b2db      	uxtb	r3, r3
   21014:	001a      	movs	r2, r3
   21016:	4b2c      	ldr	r3, [pc, #176]	; (210c8 <hif_isr+0x4b4>)
   21018:	0018      	movs	r0, r3
   2101a:	4b2a      	ldr	r3, [pc, #168]	; (210c4 <hif_isr+0x4b0>)
   2101c:	4798      	blx	r3
   2101e:	4b2b      	ldr	r3, [pc, #172]	; (210cc <hif_isr+0x4b8>)
   21020:	0018      	movs	r0, r3
   21022:	4b28      	ldr	r3, [pc, #160]	; (210c4 <hif_isr+0x4b0>)
   21024:	4798      	blx	r3
					ret = hif_set_rx_done();
   21026:	230f      	movs	r3, #15
   21028:	18fc      	adds	r4, r7, r3
   2102a:	4b29      	ldr	r3, [pc, #164]	; (210d0 <hif_isr+0x4bc>)
   2102c:	4798      	blx	r3
   2102e:	0003      	movs	r3, r0
   21030:	7023      	strb	r3, [r4, #0]
   21032:	e037      	b.n	210a4 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   21034:	4a27      	ldr	r2, [pc, #156]	; (210d4 <hif_isr+0x4c0>)
   21036:	4921      	ldr	r1, [pc, #132]	; (210bc <hif_isr+0x4a8>)
   21038:	4b21      	ldr	r3, [pc, #132]	; (210c0 <hif_isr+0x4ac>)
   2103a:	0018      	movs	r0, r3
   2103c:	4b21      	ldr	r3, [pc, #132]	; (210c4 <hif_isr+0x4b0>)
   2103e:	4798      	blx	r3
   21040:	4b25      	ldr	r3, [pc, #148]	; (210d8 <hif_isr+0x4c4>)
   21042:	0018      	movs	r0, r3
   21044:	4b1f      	ldr	r3, [pc, #124]	; (210c4 <hif_isr+0x4b0>)
   21046:	4798      	blx	r3
   21048:	4b20      	ldr	r3, [pc, #128]	; (210cc <hif_isr+0x4b8>)
   2104a:	0018      	movs	r0, r3
   2104c:	4b1d      	ldr	r3, [pc, #116]	; (210c4 <hif_isr+0x4b0>)
   2104e:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   21050:	230f      	movs	r3, #15
   21052:	18fb      	adds	r3, r7, r3
   21054:	22fe      	movs	r2, #254	; 0xfe
   21056:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   21058:	e024      	b.n	210a4 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   2105a:	4a20      	ldr	r2, [pc, #128]	; (210dc <hif_isr+0x4c8>)
   2105c:	4917      	ldr	r1, [pc, #92]	; (210bc <hif_isr+0x4a8>)
   2105e:	4b18      	ldr	r3, [pc, #96]	; (210c0 <hif_isr+0x4ac>)
   21060:	0018      	movs	r0, r3
   21062:	4b18      	ldr	r3, [pc, #96]	; (210c4 <hif_isr+0x4b0>)
   21064:	4798      	blx	r3
   21066:	68ba      	ldr	r2, [r7, #8]
   21068:	4b1d      	ldr	r3, [pc, #116]	; (210e0 <hif_isr+0x4cc>)
   2106a:	0011      	movs	r1, r2
   2106c:	0018      	movs	r0, r3
   2106e:	4b15      	ldr	r3, [pc, #84]	; (210c4 <hif_isr+0x4b0>)
   21070:	4798      	blx	r3
   21072:	4b16      	ldr	r3, [pc, #88]	; (210cc <hif_isr+0x4b8>)
   21074:	0018      	movs	r0, r3
   21076:	4b13      	ldr	r3, [pc, #76]	; (210c4 <hif_isr+0x4b0>)
   21078:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2107a:	230f      	movs	r3, #15
   2107c:	18fb      	adds	r3, r7, r3
   2107e:	22f4      	movs	r2, #244	; 0xf4
   21080:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21082:	e00f      	b.n	210a4 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   21084:	4a17      	ldr	r2, [pc, #92]	; (210e4 <hif_isr+0x4d0>)
   21086:	490d      	ldr	r1, [pc, #52]	; (210bc <hif_isr+0x4a8>)
   21088:	4b0d      	ldr	r3, [pc, #52]	; (210c0 <hif_isr+0x4ac>)
   2108a:	0018      	movs	r0, r3
   2108c:	4b0d      	ldr	r3, [pc, #52]	; (210c4 <hif_isr+0x4b0>)
   2108e:	4798      	blx	r3
   21090:	4b15      	ldr	r3, [pc, #84]	; (210e8 <hif_isr+0x4d4>)
   21092:	0018      	movs	r0, r3
   21094:	4b0b      	ldr	r3, [pc, #44]	; (210c4 <hif_isr+0x4b0>)
   21096:	4798      	blx	r3
   21098:	4b0c      	ldr	r3, [pc, #48]	; (210cc <hif_isr+0x4b8>)
   2109a:	0018      	movs	r0, r3
   2109c:	4b09      	ldr	r3, [pc, #36]	; (210c4 <hif_isr+0x4b0>)
   2109e:	4798      	blx	r3
		goto ERR1;
   210a0:	e000      	b.n	210a4 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   210a2:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   210a4:	230f      	movs	r3, #15
   210a6:	18fb      	adds	r3, r7, r3
   210a8:	781b      	ldrb	r3, [r3, #0]
   210aa:	b25b      	sxtb	r3, r3
}
   210ac:	0018      	movs	r0, r3
   210ae:	46bd      	mov	sp, r7
   210b0:	b005      	add	sp, #20
   210b2:	bd90      	pop	{r4, r7, pc}
   210b4:	20005650 	.word	0x20005650
   210b8:	00000216 	.word	0x00000216
   210bc:	00037ed0 	.word	0x00037ed0
   210c0:	00037bc0 	.word	0x00037bc0
   210c4:	0001dc99 	.word	0x0001dc99
   210c8:	00037d3c 	.word	0x00037d3c
   210cc:	00037bbc 	.word	0x00037bbc
   210d0:	000206a9 	.word	0x000206a9
   210d4:	0000021d 	.word	0x0000021d
   210d8:	00037d68 	.word	0x00037d68
   210dc:	00000225 	.word	0x00000225
   210e0:	00037d7c 	.word	0x00037d7c
   210e4:	0000022e 	.word	0x0000022e
   210e8:	00037d98 	.word	0x00037d98

000210ec <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   210ec:	b590      	push	{r4, r7, lr}
   210ee:	b083      	sub	sp, #12
   210f0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   210f2:	1dfb      	adds	r3, r7, #7
   210f4:	2200      	movs	r2, #0
   210f6:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   210f8:	4b1c      	ldr	r3, [pc, #112]	; (2116c <hif_handle_isr+0x80>)
   210fa:	2200      	movs	r2, #0
   210fc:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   210fe:	e024      	b.n	2114a <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   21100:	4b1a      	ldr	r3, [pc, #104]	; (2116c <hif_handle_isr+0x80>)
   21102:	78db      	ldrb	r3, [r3, #3]
   21104:	b2db      	uxtb	r3, r3
   21106:	3b01      	subs	r3, #1
   21108:	b2da      	uxtb	r2, r3
   2110a:	4b18      	ldr	r3, [pc, #96]	; (2116c <hif_handle_isr+0x80>)
   2110c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2110e:	1dfc      	adds	r4, r7, #7
   21110:	4b17      	ldr	r3, [pc, #92]	; (21170 <hif_handle_isr+0x84>)
   21112:	4798      	blx	r3
   21114:	0003      	movs	r3, r0
   21116:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21118:	1dfb      	adds	r3, r7, #7
   2111a:	781b      	ldrb	r3, [r3, #0]
   2111c:	b25b      	sxtb	r3, r3
   2111e:	2b00      	cmp	r3, #0
   21120:	d100      	bne.n	21124 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   21122:	e012      	b.n	2114a <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   21124:	4a13      	ldr	r2, [pc, #76]	; (21174 <hif_handle_isr+0x88>)
   21126:	4914      	ldr	r1, [pc, #80]	; (21178 <hif_handle_isr+0x8c>)
   21128:	4b14      	ldr	r3, [pc, #80]	; (2117c <hif_handle_isr+0x90>)
   2112a:	0018      	movs	r0, r3
   2112c:	4b14      	ldr	r3, [pc, #80]	; (21180 <hif_handle_isr+0x94>)
   2112e:	4798      	blx	r3
   21130:	1dfb      	adds	r3, r7, #7
   21132:	2200      	movs	r2, #0
   21134:	569a      	ldrsb	r2, [r3, r2]
   21136:	4b13      	ldr	r3, [pc, #76]	; (21184 <hif_handle_isr+0x98>)
   21138:	0011      	movs	r1, r2
   2113a:	0018      	movs	r0, r3
   2113c:	4b10      	ldr	r3, [pc, #64]	; (21180 <hif_handle_isr+0x94>)
   2113e:	4798      	blx	r3
   21140:	4b11      	ldr	r3, [pc, #68]	; (21188 <hif_handle_isr+0x9c>)
   21142:	0018      	movs	r0, r3
   21144:	4b0e      	ldr	r3, [pc, #56]	; (21180 <hif_handle_isr+0x94>)
   21146:	4798      	blx	r3
			ret = hif_isr();
   21148:	e7e1      	b.n	2110e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2114a:	4b08      	ldr	r3, [pc, #32]	; (2116c <hif_handle_isr+0x80>)
   2114c:	78db      	ldrb	r3, [r3, #3]
   2114e:	b2db      	uxtb	r3, r3
   21150:	2b00      	cmp	r3, #0
   21152:	d004      	beq.n	2115e <hif_handle_isr+0x72>
   21154:	4b05      	ldr	r3, [pc, #20]	; (2116c <hif_handle_isr+0x80>)
   21156:	791b      	ldrb	r3, [r3, #4]
   21158:	b2db      	uxtb	r3, r3
   2115a:	2b00      	cmp	r3, #0
   2115c:	d0d0      	beq.n	21100 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2115e:	1dfb      	adds	r3, r7, #7
   21160:	781b      	ldrb	r3, [r3, #0]
   21162:	b25b      	sxtb	r3, r3
}
   21164:	0018      	movs	r0, r3
   21166:	46bd      	mov	sp, r7
   21168:	b003      	add	sp, #12
   2116a:	bd90      	pop	{r4, r7, pc}
   2116c:	20005650 	.word	0x20005650
   21170:	00020c15 	.word	0x00020c15
   21174:	00000257 	.word	0x00000257
   21178:	00037ed8 	.word	0x00037ed8
   2117c:	00037bc0 	.word	0x00037bc0
   21180:	0001dc99 	.word	0x0001dc99
   21184:	00037dbc 	.word	0x00037dbc
   21188:	00037bbc 	.word	0x00037bbc

0002118c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   2118c:	b590      	push	{r4, r7, lr}
   2118e:	b087      	sub	sp, #28
   21190:	af00      	add	r7, sp, #0
   21192:	60f8      	str	r0, [r7, #12]
   21194:	60b9      	str	r1, [r7, #8]
   21196:	0019      	movs	r1, r3
   21198:	1dbb      	adds	r3, r7, #6
   2119a:	801a      	strh	r2, [r3, #0]
   2119c:	1d7b      	adds	r3, r7, #5
   2119e:	1c0a      	adds	r2, r1, #0
   211a0:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   211a2:	2317      	movs	r3, #23
   211a4:	18fb      	adds	r3, r7, r3
   211a6:	2200      	movs	r2, #0
   211a8:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   211aa:	68fb      	ldr	r3, [r7, #12]
   211ac:	2b00      	cmp	r3, #0
   211ae:	d006      	beq.n	211be <hif_receive+0x32>
   211b0:	68bb      	ldr	r3, [r7, #8]
   211b2:	2b00      	cmp	r3, #0
   211b4:	d003      	beq.n	211be <hif_receive+0x32>
   211b6:	1dbb      	adds	r3, r7, #6
   211b8:	881b      	ldrh	r3, [r3, #0]
   211ba:	2b00      	cmp	r3, #0
   211bc:	d11e      	bne.n	211fc <hif_receive+0x70>
	{
		if(isDone)
   211be:	1d7b      	adds	r3, r7, #5
   211c0:	781b      	ldrb	r3, [r3, #0]
   211c2:	2b00      	cmp	r3, #0
   211c4:	d006      	beq.n	211d4 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   211c6:	2317      	movs	r3, #23
   211c8:	18fc      	adds	r4, r7, r3
   211ca:	4b45      	ldr	r3, [pc, #276]	; (212e0 <hif_receive+0x154>)
   211cc:	4798      	blx	r3
   211ce:	0003      	movs	r3, r0
   211d0:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   211d2:	e07c      	b.n	212ce <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   211d4:	2317      	movs	r3, #23
   211d6:	18fb      	adds	r3, r7, r3
   211d8:	22f4      	movs	r2, #244	; 0xf4
   211da:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   211dc:	239e      	movs	r3, #158	; 0x9e
   211de:	009a      	lsls	r2, r3, #2
   211e0:	4940      	ldr	r1, [pc, #256]	; (212e4 <hif_receive+0x158>)
   211e2:	4b41      	ldr	r3, [pc, #260]	; (212e8 <hif_receive+0x15c>)
   211e4:	0018      	movs	r0, r3
   211e6:	4b41      	ldr	r3, [pc, #260]	; (212ec <hif_receive+0x160>)
   211e8:	4798      	blx	r3
   211ea:	4b41      	ldr	r3, [pc, #260]	; (212f0 <hif_receive+0x164>)
   211ec:	0018      	movs	r0, r3
   211ee:	4b3f      	ldr	r3, [pc, #252]	; (212ec <hif_receive+0x160>)
   211f0:	4798      	blx	r3
   211f2:	4b40      	ldr	r3, [pc, #256]	; (212f4 <hif_receive+0x168>)
   211f4:	0018      	movs	r0, r3
   211f6:	4b3d      	ldr	r3, [pc, #244]	; (212ec <hif_receive+0x160>)
   211f8:	4798      	blx	r3
		goto ERR1;
   211fa:	e068      	b.n	212ce <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   211fc:	1dbb      	adds	r3, r7, #6
   211fe:	881a      	ldrh	r2, [r3, #0]
   21200:	4b3d      	ldr	r3, [pc, #244]	; (212f8 <hif_receive+0x16c>)
   21202:	68db      	ldr	r3, [r3, #12]
   21204:	429a      	cmp	r2, r3
   21206:	d917      	bls.n	21238 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   21208:	2317      	movs	r3, #23
   2120a:	18fb      	adds	r3, r7, r3
   2120c:	22f4      	movs	r2, #244	; 0xf4
   2120e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   21210:	23a0      	movs	r3, #160	; 0xa0
   21212:	009a      	lsls	r2, r3, #2
   21214:	4933      	ldr	r1, [pc, #204]	; (212e4 <hif_receive+0x158>)
   21216:	4b34      	ldr	r3, [pc, #208]	; (212e8 <hif_receive+0x15c>)
   21218:	0018      	movs	r0, r3
   2121a:	4b34      	ldr	r3, [pc, #208]	; (212ec <hif_receive+0x160>)
   2121c:	4798      	blx	r3
   2121e:	1dbb      	adds	r3, r7, #6
   21220:	8819      	ldrh	r1, [r3, #0]
   21222:	4b35      	ldr	r3, [pc, #212]	; (212f8 <hif_receive+0x16c>)
   21224:	68da      	ldr	r2, [r3, #12]
   21226:	4b35      	ldr	r3, [pc, #212]	; (212fc <hif_receive+0x170>)
   21228:	0018      	movs	r0, r3
   2122a:	4b30      	ldr	r3, [pc, #192]	; (212ec <hif_receive+0x160>)
   2122c:	4798      	blx	r3
   2122e:	4b31      	ldr	r3, [pc, #196]	; (212f4 <hif_receive+0x168>)
   21230:	0018      	movs	r0, r3
   21232:	4b2e      	ldr	r3, [pc, #184]	; (212ec <hif_receive+0x160>)
   21234:	4798      	blx	r3
		goto ERR1;
   21236:	e04a      	b.n	212ce <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21238:	4b2f      	ldr	r3, [pc, #188]	; (212f8 <hif_receive+0x16c>)
   2123a:	689a      	ldr	r2, [r3, #8]
   2123c:	68fb      	ldr	r3, [r7, #12]
   2123e:	429a      	cmp	r2, r3
   21240:	d80a      	bhi.n	21258 <hif_receive+0xcc>
   21242:	1dbb      	adds	r3, r7, #6
   21244:	881a      	ldrh	r2, [r3, #0]
   21246:	68fb      	ldr	r3, [r7, #12]
   21248:	18d2      	adds	r2, r2, r3
   2124a:	4b2b      	ldr	r3, [pc, #172]	; (212f8 <hif_receive+0x16c>)
   2124c:	6899      	ldr	r1, [r3, #8]
   2124e:	4b2a      	ldr	r3, [pc, #168]	; (212f8 <hif_receive+0x16c>)
   21250:	68db      	ldr	r3, [r3, #12]
   21252:	18cb      	adds	r3, r1, r3
   21254:	429a      	cmp	r2, r3
   21256:	d912      	bls.n	2127e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   21258:	2317      	movs	r3, #23
   2125a:	18fb      	adds	r3, r7, r3
   2125c:	22f4      	movs	r2, #244	; 0xf4
   2125e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   21260:	4a27      	ldr	r2, [pc, #156]	; (21300 <hif_receive+0x174>)
   21262:	4920      	ldr	r1, [pc, #128]	; (212e4 <hif_receive+0x158>)
   21264:	4b20      	ldr	r3, [pc, #128]	; (212e8 <hif_receive+0x15c>)
   21266:	0018      	movs	r0, r3
   21268:	4b20      	ldr	r3, [pc, #128]	; (212ec <hif_receive+0x160>)
   2126a:	4798      	blx	r3
   2126c:	4b25      	ldr	r3, [pc, #148]	; (21304 <hif_receive+0x178>)
   2126e:	0018      	movs	r0, r3
   21270:	4b1e      	ldr	r3, [pc, #120]	; (212ec <hif_receive+0x160>)
   21272:	4798      	blx	r3
   21274:	4b1f      	ldr	r3, [pc, #124]	; (212f4 <hif_receive+0x168>)
   21276:	0018      	movs	r0, r3
   21278:	4b1c      	ldr	r3, [pc, #112]	; (212ec <hif_receive+0x160>)
   2127a:	4798      	blx	r3
		goto ERR1;
   2127c:	e027      	b.n	212ce <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2127e:	1dbb      	adds	r3, r7, #6
   21280:	881a      	ldrh	r2, [r3, #0]
   21282:	2317      	movs	r3, #23
   21284:	18fc      	adds	r4, r7, r3
   21286:	68b9      	ldr	r1, [r7, #8]
   21288:	68fb      	ldr	r3, [r7, #12]
   2128a:	0018      	movs	r0, r3
   2128c:	4b1e      	ldr	r3, [pc, #120]	; (21308 <hif_receive+0x17c>)
   2128e:	4798      	blx	r3
   21290:	0003      	movs	r3, r0
   21292:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21294:	2317      	movs	r3, #23
   21296:	18fb      	adds	r3, r7, r3
   21298:	781b      	ldrb	r3, [r3, #0]
   2129a:	b25b      	sxtb	r3, r3
   2129c:	2b00      	cmp	r3, #0
   2129e:	d115      	bne.n	212cc <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   212a0:	4b15      	ldr	r3, [pc, #84]	; (212f8 <hif_receive+0x16c>)
   212a2:	689a      	ldr	r2, [r3, #8]
   212a4:	4b14      	ldr	r3, [pc, #80]	; (212f8 <hif_receive+0x16c>)
   212a6:	68db      	ldr	r3, [r3, #12]
   212a8:	18d2      	adds	r2, r2, r3
   212aa:	1dbb      	adds	r3, r7, #6
   212ac:	8819      	ldrh	r1, [r3, #0]
   212ae:	68fb      	ldr	r3, [r7, #12]
   212b0:	18cb      	adds	r3, r1, r3
   212b2:	429a      	cmp	r2, r3
   212b4:	d003      	beq.n	212be <hif_receive+0x132>
   212b6:	1d7b      	adds	r3, r7, #5
   212b8:	781b      	ldrb	r3, [r3, #0]
   212ba:	2b00      	cmp	r3, #0
   212bc:	d007      	beq.n	212ce <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   212be:	2317      	movs	r3, #23
   212c0:	18fc      	adds	r4, r7, r3
   212c2:	4b07      	ldr	r3, [pc, #28]	; (212e0 <hif_receive+0x154>)
   212c4:	4798      	blx	r3
   212c6:	0003      	movs	r3, r0
   212c8:	7023      	strb	r3, [r4, #0]
   212ca:	e000      	b.n	212ce <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   212cc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   212ce:	2317      	movs	r3, #23
   212d0:	18fb      	adds	r3, r7, r3
   212d2:	781b      	ldrb	r3, [r3, #0]
   212d4:	b25b      	sxtb	r3, r3
}
   212d6:	0018      	movs	r0, r3
   212d8:	46bd      	mov	sp, r7
   212da:	b007      	add	sp, #28
   212dc:	bd90      	pop	{r4, r7, pc}
   212de:	46c0      	nop			; (mov r8, r8)
   212e0:	000206a9 	.word	0x000206a9
   212e4:	00037ee8 	.word	0x00037ee8
   212e8:	00037bc0 	.word	0x00037bc0
   212ec:	0001dc99 	.word	0x0001dc99
   212f0:	00037dec 	.word	0x00037dec
   212f4:	00037bbc 	.word	0x00037bbc
   212f8:	20005650 	.word	0x20005650
   212fc:	00037e0c 	.word	0x00037e0c
   21300:	00000286 	.word	0x00000286
   21304:	00037e54 	.word	0x00037e54
   21308:	00022715 	.word	0x00022715

0002130c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   2130c:	b580      	push	{r7, lr}
   2130e:	b084      	sub	sp, #16
   21310:	af00      	add	r7, sp, #0
   21312:	0002      	movs	r2, r0
   21314:	6039      	str	r1, [r7, #0]
   21316:	1dfb      	adds	r3, r7, #7
   21318:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2131a:	230f      	movs	r3, #15
   2131c:	18fb      	adds	r3, r7, r3
   2131e:	2200      	movs	r2, #0
   21320:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   21322:	1dfb      	adds	r3, r7, #7
   21324:	781b      	ldrb	r3, [r3, #0]
   21326:	2b07      	cmp	r3, #7
   21328:	d820      	bhi.n	2136c <hif_register_cb+0x60>
   2132a:	009a      	lsls	r2, r3, #2
   2132c:	4b1e      	ldr	r3, [pc, #120]	; (213a8 <hif_register_cb+0x9c>)
   2132e:	18d3      	adds	r3, r2, r3
   21330:	681b      	ldr	r3, [r3, #0]
   21332:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21334:	4b1d      	ldr	r3, [pc, #116]	; (213ac <hif_register_cb+0xa0>)
   21336:	683a      	ldr	r2, [r7, #0]
   21338:	615a      	str	r2, [r3, #20]
			break;
   2133a:	e02d      	b.n	21398 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   2133c:	4b1b      	ldr	r3, [pc, #108]	; (213ac <hif_register_cb+0xa0>)
   2133e:	683a      	ldr	r2, [r7, #0]
   21340:	611a      	str	r2, [r3, #16]
			break;
   21342:	e029      	b.n	21398 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21344:	4b19      	ldr	r3, [pc, #100]	; (213ac <hif_register_cb+0xa0>)
   21346:	683a      	ldr	r2, [r7, #0]
   21348:	619a      	str	r2, [r3, #24]
			break;
   2134a:	e025      	b.n	21398 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   2134c:	4b17      	ldr	r3, [pc, #92]	; (213ac <hif_register_cb+0xa0>)
   2134e:	683a      	ldr	r2, [r7, #0]
   21350:	621a      	str	r2, [r3, #32]
			break;
   21352:	e021      	b.n	21398 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   21354:	4b15      	ldr	r3, [pc, #84]	; (213ac <hif_register_cb+0xa0>)
   21356:	683a      	ldr	r2, [r7, #0]
   21358:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   2135a:	e01d      	b.n	21398 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   2135c:	4b13      	ldr	r3, [pc, #76]	; (213ac <hif_register_cb+0xa0>)
   2135e:	683a      	ldr	r2, [r7, #0]
   21360:	61da      	str	r2, [r3, #28]
			break;
   21362:	e019      	b.n	21398 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   21364:	4b11      	ldr	r3, [pc, #68]	; (213ac <hif_register_cb+0xa0>)
   21366:	683a      	ldr	r2, [r7, #0]
   21368:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   2136a:	e015      	b.n	21398 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   2136c:	4a10      	ldr	r2, [pc, #64]	; (213b0 <hif_register_cb+0xa4>)
   2136e:	4911      	ldr	r1, [pc, #68]	; (213b4 <hif_register_cb+0xa8>)
   21370:	4b11      	ldr	r3, [pc, #68]	; (213b8 <hif_register_cb+0xac>)
   21372:	0018      	movs	r0, r3
   21374:	4b11      	ldr	r3, [pc, #68]	; (213bc <hif_register_cb+0xb0>)
   21376:	4798      	blx	r3
   21378:	1dfb      	adds	r3, r7, #7
   2137a:	781a      	ldrb	r2, [r3, #0]
   2137c:	4b10      	ldr	r3, [pc, #64]	; (213c0 <hif_register_cb+0xb4>)
   2137e:	0011      	movs	r1, r2
   21380:	0018      	movs	r0, r3
   21382:	4b0e      	ldr	r3, [pc, #56]	; (213bc <hif_register_cb+0xb0>)
   21384:	4798      	blx	r3
   21386:	4b0f      	ldr	r3, [pc, #60]	; (213c4 <hif_register_cb+0xb8>)
   21388:	0018      	movs	r0, r3
   2138a:	4b0c      	ldr	r3, [pc, #48]	; (213bc <hif_register_cb+0xb0>)
   2138c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2138e:	230f      	movs	r3, #15
   21390:	18fb      	adds	r3, r7, r3
   21392:	22f4      	movs	r2, #244	; 0xf4
   21394:	701a      	strb	r2, [r3, #0]
			break;
   21396:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   21398:	230f      	movs	r3, #15
   2139a:	18fb      	adds	r3, r7, r3
   2139c:	781b      	ldrb	r3, [r3, #0]
   2139e:	b25b      	sxtb	r3, r3
}
   213a0:	0018      	movs	r0, r3
   213a2:	46bd      	mov	sp, r7
   213a4:	b004      	add	sp, #16
   213a6:	bd80      	pop	{r7, pc}
   213a8:	00037ea4 	.word	0x00037ea4
   213ac:	20005650 	.word	0x20005650
   213b0:	000002be 	.word	0x000002be
   213b4:	00037ef4 	.word	0x00037ef4
   213b8:	00037bc0 	.word	0x00037bc0
   213bc:	0001dc99 	.word	0x0001dc99
   213c0:	00037e98 	.word	0x00037e98
   213c4:	00037bbc 	.word	0x00037bbc

000213c8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   213c8:	b590      	push	{r4, r7, lr}
   213ca:	b0af      	sub	sp, #188	; 0xbc
   213cc:	af02      	add	r7, sp, #8
   213ce:	603a      	str	r2, [r7, #0]
   213d0:	1dfb      	adds	r3, r7, #7
   213d2:	1c02      	adds	r2, r0, #0
   213d4:	701a      	strb	r2, [r3, #0]
   213d6:	1d3b      	adds	r3, r7, #4
   213d8:	1c0a      	adds	r2, r1, #0
   213da:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   213dc:	1dfb      	adds	r3, r7, #7
   213de:	781b      	ldrb	r3, [r3, #0]
   213e0:	2b2c      	cmp	r3, #44	; 0x2c
   213e2:	d116      	bne.n	21412 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   213e4:	23a4      	movs	r3, #164	; 0xa4
   213e6:	18f9      	adds	r1, r7, r3
   213e8:	6838      	ldr	r0, [r7, #0]
   213ea:	2300      	movs	r3, #0
   213ec:	2204      	movs	r2, #4
   213ee:	4cca      	ldr	r4, [pc, #808]	; (21718 <m2m_wifi_cb+0x350>)
   213f0:	47a0      	blx	r4
   213f2:	1e03      	subs	r3, r0, #0
   213f4:	d000      	beq.n	213f8 <m2m_wifi_cb+0x30>
   213f6:	e1b4      	b.n	21762 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   213f8:	4bc8      	ldr	r3, [pc, #800]	; (2171c <m2m_wifi_cb+0x354>)
   213fa:	681b      	ldr	r3, [r3, #0]
   213fc:	2b00      	cmp	r3, #0
   213fe:	d100      	bne.n	21402 <m2m_wifi_cb+0x3a>
   21400:	e1af      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   21402:	4bc6      	ldr	r3, [pc, #792]	; (2171c <m2m_wifi_cb+0x354>)
   21404:	681b      	ldr	r3, [r3, #0]
   21406:	22a4      	movs	r2, #164	; 0xa4
   21408:	18ba      	adds	r2, r7, r2
   2140a:	0011      	movs	r1, r2
   2140c:	202c      	movs	r0, #44	; 0x2c
   2140e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   21410:	e1a7      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   21412:	1dfb      	adds	r3, r7, #7
   21414:	781b      	ldrb	r3, [r3, #0]
   21416:	2b1b      	cmp	r3, #27
   21418:	d116      	bne.n	21448 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2141a:	239c      	movs	r3, #156	; 0x9c
   2141c:	18f9      	adds	r1, r7, r3
   2141e:	6838      	ldr	r0, [r7, #0]
   21420:	2300      	movs	r3, #0
   21422:	2208      	movs	r2, #8
   21424:	4cbc      	ldr	r4, [pc, #752]	; (21718 <m2m_wifi_cb+0x350>)
   21426:	47a0      	blx	r4
   21428:	1e03      	subs	r3, r0, #0
   2142a:	d000      	beq.n	2142e <m2m_wifi_cb+0x66>
   2142c:	e199      	b.n	21762 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2142e:	4bbb      	ldr	r3, [pc, #748]	; (2171c <m2m_wifi_cb+0x354>)
   21430:	681b      	ldr	r3, [r3, #0]
   21432:	2b00      	cmp	r3, #0
   21434:	d100      	bne.n	21438 <m2m_wifi_cb+0x70>
   21436:	e194      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21438:	4bb8      	ldr	r3, [pc, #736]	; (2171c <m2m_wifi_cb+0x354>)
   2143a:	681b      	ldr	r3, [r3, #0]
   2143c:	229c      	movs	r2, #156	; 0x9c
   2143e:	18ba      	adds	r2, r7, r2
   21440:	0011      	movs	r1, r2
   21442:	201b      	movs	r0, #27
   21444:	4798      	blx	r3
}
   21446:	e18c      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21448:	1dfb      	adds	r3, r7, #7
   2144a:	781b      	ldrb	r3, [r3, #0]
   2144c:	2b06      	cmp	r3, #6
   2144e:	d116      	bne.n	2147e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   21450:	230c      	movs	r3, #12
   21452:	18f9      	adds	r1, r7, r3
   21454:	6838      	ldr	r0, [r7, #0]
   21456:	2301      	movs	r3, #1
   21458:	2230      	movs	r2, #48	; 0x30
   2145a:	4caf      	ldr	r4, [pc, #700]	; (21718 <m2m_wifi_cb+0x350>)
   2145c:	47a0      	blx	r4
   2145e:	1e03      	subs	r3, r0, #0
   21460:	d000      	beq.n	21464 <m2m_wifi_cb+0x9c>
   21462:	e17e      	b.n	21762 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21464:	4bad      	ldr	r3, [pc, #692]	; (2171c <m2m_wifi_cb+0x354>)
   21466:	681b      	ldr	r3, [r3, #0]
   21468:	2b00      	cmp	r3, #0
   2146a:	d100      	bne.n	2146e <m2m_wifi_cb+0xa6>
   2146c:	e179      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   2146e:	4bab      	ldr	r3, [pc, #684]	; (2171c <m2m_wifi_cb+0x354>)
   21470:	681b      	ldr	r3, [r3, #0]
   21472:	220c      	movs	r2, #12
   21474:	18ba      	adds	r2, r7, r2
   21476:	0011      	movs	r1, r2
   21478:	2006      	movs	r0, #6
   2147a:	4798      	blx	r3
}
   2147c:	e171      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   2147e:	1dfb      	adds	r3, r7, #7
   21480:	781b      	ldrb	r3, [r3, #0]
   21482:	2b0e      	cmp	r3, #14
   21484:	d100      	bne.n	21488 <m2m_wifi_cb+0xc0>
   21486:	e16c      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   21488:	1dfb      	adds	r3, r7, #7
   2148a:	781b      	ldrb	r3, [r3, #0]
   2148c:	2b32      	cmp	r3, #50	; 0x32
   2148e:	d116      	bne.n	214be <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   21490:	2384      	movs	r3, #132	; 0x84
   21492:	18f9      	adds	r1, r7, r3
   21494:	6838      	ldr	r0, [r7, #0]
   21496:	2300      	movs	r3, #0
   21498:	2218      	movs	r2, #24
   2149a:	4c9f      	ldr	r4, [pc, #636]	; (21718 <m2m_wifi_cb+0x350>)
   2149c:	47a0      	blx	r4
   2149e:	1e03      	subs	r3, r0, #0
   214a0:	d000      	beq.n	214a4 <m2m_wifi_cb+0xdc>
   214a2:	e15e      	b.n	21762 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   214a4:	4b9d      	ldr	r3, [pc, #628]	; (2171c <m2m_wifi_cb+0x354>)
   214a6:	681b      	ldr	r3, [r3, #0]
   214a8:	2b00      	cmp	r3, #0
   214aa:	d100      	bne.n	214ae <m2m_wifi_cb+0xe6>
   214ac:	e159      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   214ae:	4b9b      	ldr	r3, [pc, #620]	; (2171c <m2m_wifi_cb+0x354>)
   214b0:	681b      	ldr	r3, [r3, #0]
   214b2:	2284      	movs	r2, #132	; 0x84
   214b4:	18ba      	adds	r2, r7, r2
   214b6:	0011      	movs	r1, r2
   214b8:	2032      	movs	r0, #50	; 0x32
   214ba:	4798      	blx	r3
}
   214bc:	e151      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   214be:	1dfb      	adds	r3, r7, #7
   214c0:	781b      	ldrb	r3, [r3, #0]
   214c2:	2b2f      	cmp	r3, #47	; 0x2f
   214c4:	d11d      	bne.n	21502 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   214c6:	230c      	movs	r3, #12
   214c8:	18fb      	adds	r3, r7, r3
   214ca:	2264      	movs	r2, #100	; 0x64
   214cc:	2100      	movs	r1, #0
   214ce:	0018      	movs	r0, r3
   214d0:	4b93      	ldr	r3, [pc, #588]	; (21720 <m2m_wifi_cb+0x358>)
   214d2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   214d4:	230c      	movs	r3, #12
   214d6:	18f9      	adds	r1, r7, r3
   214d8:	6838      	ldr	r0, [r7, #0]
   214da:	2300      	movs	r3, #0
   214dc:	2264      	movs	r2, #100	; 0x64
   214de:	4c8e      	ldr	r4, [pc, #568]	; (21718 <m2m_wifi_cb+0x350>)
   214e0:	47a0      	blx	r4
   214e2:	1e03      	subs	r3, r0, #0
   214e4:	d000      	beq.n	214e8 <m2m_wifi_cb+0x120>
   214e6:	e13c      	b.n	21762 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   214e8:	4b8c      	ldr	r3, [pc, #560]	; (2171c <m2m_wifi_cb+0x354>)
   214ea:	681b      	ldr	r3, [r3, #0]
   214ec:	2b00      	cmp	r3, #0
   214ee:	d100      	bne.n	214f2 <m2m_wifi_cb+0x12a>
   214f0:	e137      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   214f2:	4b8a      	ldr	r3, [pc, #552]	; (2171c <m2m_wifi_cb+0x354>)
   214f4:	681b      	ldr	r3, [r3, #0]
   214f6:	220c      	movs	r2, #12
   214f8:	18ba      	adds	r2, r7, r2
   214fa:	0011      	movs	r1, r2
   214fc:	202f      	movs	r0, #47	; 0x2f
   214fe:	4798      	blx	r3
}
   21500:	e12f      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   21502:	1dfb      	adds	r3, r7, #7
   21504:	781b      	ldrb	r3, [r3, #0]
   21506:	2b34      	cmp	r3, #52	; 0x34
   21508:	d137      	bne.n	2157a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2150a:	2380      	movs	r3, #128	; 0x80
   2150c:	18f9      	adds	r1, r7, r3
   2150e:	6838      	ldr	r0, [r7, #0]
   21510:	2300      	movs	r3, #0
   21512:	2204      	movs	r2, #4
   21514:	4c80      	ldr	r4, [pc, #512]	; (21718 <m2m_wifi_cb+0x350>)
   21516:	47a0      	blx	r4
   21518:	1e03      	subs	r3, r0, #0
   2151a:	d000      	beq.n	2151e <m2m_wifi_cb+0x156>
   2151c:	e121      	b.n	21762 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2151e:	4b81      	ldr	r3, [pc, #516]	; (21724 <m2m_wifi_cb+0x35c>)
   21520:	0018      	movs	r0, r3
   21522:	4b81      	ldr	r3, [pc, #516]	; (21728 <m2m_wifi_cb+0x360>)
   21524:	4798      	blx	r3
   21526:	2380      	movs	r3, #128	; 0x80
   21528:	18fb      	adds	r3, r7, r3
   2152a:	681b      	ldr	r3, [r3, #0]
   2152c:	0e1b      	lsrs	r3, r3, #24
   2152e:	b2db      	uxtb	r3, r3
   21530:	0019      	movs	r1, r3
   21532:	2380      	movs	r3, #128	; 0x80
   21534:	18fb      	adds	r3, r7, r3
   21536:	681b      	ldr	r3, [r3, #0]
   21538:	0c1b      	lsrs	r3, r3, #16
   2153a:	b2db      	uxtb	r3, r3
   2153c:	001a      	movs	r2, r3
   2153e:	2380      	movs	r3, #128	; 0x80
   21540:	18fb      	adds	r3, r7, r3
   21542:	681b      	ldr	r3, [r3, #0]
   21544:	0a1b      	lsrs	r3, r3, #8
   21546:	b2db      	uxtb	r3, r3
   21548:	001c      	movs	r4, r3
   2154a:	2380      	movs	r3, #128	; 0x80
   2154c:	18fb      	adds	r3, r7, r3
   2154e:	681b      	ldr	r3, [r3, #0]
   21550:	b2db      	uxtb	r3, r3
   21552:	4876      	ldr	r0, [pc, #472]	; (2172c <m2m_wifi_cb+0x364>)
   21554:	9300      	str	r3, [sp, #0]
   21556:	0023      	movs	r3, r4
   21558:	4c73      	ldr	r4, [pc, #460]	; (21728 <m2m_wifi_cb+0x360>)
   2155a:	47a0      	blx	r4
   2155c:	4b74      	ldr	r3, [pc, #464]	; (21730 <m2m_wifi_cb+0x368>)
   2155e:	0018      	movs	r0, r3
   21560:	4b71      	ldr	r3, [pc, #452]	; (21728 <m2m_wifi_cb+0x360>)
   21562:	4798      	blx	r3
			if (gpfAppWifiCb)
   21564:	4b6d      	ldr	r3, [pc, #436]	; (2171c <m2m_wifi_cb+0x354>)
   21566:	681b      	ldr	r3, [r3, #0]
   21568:	2b00      	cmp	r3, #0
   2156a:	d100      	bne.n	2156e <m2m_wifi_cb+0x1a6>
   2156c:	e0f9      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   2156e:	4b6b      	ldr	r3, [pc, #428]	; (2171c <m2m_wifi_cb+0x354>)
   21570:	681b      	ldr	r3, [r3, #0]
   21572:	2100      	movs	r1, #0
   21574:	2034      	movs	r0, #52	; 0x34
   21576:	4798      	blx	r3
}
   21578:	e0f3      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   2157a:	1dfb      	adds	r3, r7, #7
   2157c:	781b      	ldrb	r3, [r3, #0]
   2157e:	2b11      	cmp	r3, #17
   21580:	d11e      	bne.n	215c0 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   21582:	4b6c      	ldr	r3, [pc, #432]	; (21734 <m2m_wifi_cb+0x36c>)
   21584:	2200      	movs	r2, #0
   21586:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   21588:	237c      	movs	r3, #124	; 0x7c
   2158a:	18f9      	adds	r1, r7, r3
   2158c:	6838      	ldr	r0, [r7, #0]
   2158e:	2300      	movs	r3, #0
   21590:	2204      	movs	r2, #4
   21592:	4c61      	ldr	r4, [pc, #388]	; (21718 <m2m_wifi_cb+0x350>)
   21594:	47a0      	blx	r4
   21596:	1e03      	subs	r3, r0, #0
   21598:	d000      	beq.n	2159c <m2m_wifi_cb+0x1d4>
   2159a:	e0e2      	b.n	21762 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   2159c:	237c      	movs	r3, #124	; 0x7c
   2159e:	18fb      	adds	r3, r7, r3
   215a0:	781a      	ldrb	r2, [r3, #0]
   215a2:	4b65      	ldr	r3, [pc, #404]	; (21738 <m2m_wifi_cb+0x370>)
   215a4:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   215a6:	4b5d      	ldr	r3, [pc, #372]	; (2171c <m2m_wifi_cb+0x354>)
   215a8:	681b      	ldr	r3, [r3, #0]
   215aa:	2b00      	cmp	r3, #0
   215ac:	d100      	bne.n	215b0 <m2m_wifi_cb+0x1e8>
   215ae:	e0d8      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   215b0:	4b5a      	ldr	r3, [pc, #360]	; (2171c <m2m_wifi_cb+0x354>)
   215b2:	681b      	ldr	r3, [r3, #0]
   215b4:	227c      	movs	r2, #124	; 0x7c
   215b6:	18ba      	adds	r2, r7, r2
   215b8:	0011      	movs	r1, r2
   215ba:	2011      	movs	r0, #17
   215bc:	4798      	blx	r3
}
   215be:	e0d0      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   215c0:	1dfb      	adds	r3, r7, #7
   215c2:	781b      	ldrb	r3, [r3, #0]
   215c4:	2b13      	cmp	r3, #19
   215c6:	d116      	bne.n	215f6 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   215c8:	230c      	movs	r3, #12
   215ca:	18f9      	adds	r1, r7, r3
   215cc:	6838      	ldr	r0, [r7, #0]
   215ce:	2300      	movs	r3, #0
   215d0:	222c      	movs	r2, #44	; 0x2c
   215d2:	4c51      	ldr	r4, [pc, #324]	; (21718 <m2m_wifi_cb+0x350>)
   215d4:	47a0      	blx	r4
   215d6:	1e03      	subs	r3, r0, #0
   215d8:	d000      	beq.n	215dc <m2m_wifi_cb+0x214>
   215da:	e0c2      	b.n	21762 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   215dc:	4b4f      	ldr	r3, [pc, #316]	; (2171c <m2m_wifi_cb+0x354>)
   215de:	681b      	ldr	r3, [r3, #0]
   215e0:	2b00      	cmp	r3, #0
   215e2:	d100      	bne.n	215e6 <m2m_wifi_cb+0x21e>
   215e4:	e0bd      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   215e6:	4b4d      	ldr	r3, [pc, #308]	; (2171c <m2m_wifi_cb+0x354>)
   215e8:	681b      	ldr	r3, [r3, #0]
   215ea:	220c      	movs	r2, #12
   215ec:	18ba      	adds	r2, r7, r2
   215ee:	0011      	movs	r1, r2
   215f0:	2013      	movs	r0, #19
   215f2:	4798      	blx	r3
}
   215f4:	e0b5      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   215f6:	1dfb      	adds	r3, r7, #7
   215f8:	781b      	ldrb	r3, [r3, #0]
   215fa:	2b04      	cmp	r3, #4
   215fc:	d116      	bne.n	2162c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   215fe:	23a8      	movs	r3, #168	; 0xa8
   21600:	18f9      	adds	r1, r7, r3
   21602:	6838      	ldr	r0, [r7, #0]
   21604:	2300      	movs	r3, #0
   21606:	2204      	movs	r2, #4
   21608:	4c43      	ldr	r4, [pc, #268]	; (21718 <m2m_wifi_cb+0x350>)
   2160a:	47a0      	blx	r4
   2160c:	1e03      	subs	r3, r0, #0
   2160e:	d000      	beq.n	21612 <m2m_wifi_cb+0x24a>
   21610:	e0a7      	b.n	21762 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21612:	4b42      	ldr	r3, [pc, #264]	; (2171c <m2m_wifi_cb+0x354>)
   21614:	681b      	ldr	r3, [r3, #0]
   21616:	2b00      	cmp	r3, #0
   21618:	d100      	bne.n	2161c <m2m_wifi_cb+0x254>
   2161a:	e0a2      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   2161c:	4b3f      	ldr	r3, [pc, #252]	; (2171c <m2m_wifi_cb+0x354>)
   2161e:	681b      	ldr	r3, [r3, #0]
   21620:	22a8      	movs	r2, #168	; 0xa8
   21622:	18ba      	adds	r2, r7, r2
   21624:	0011      	movs	r1, r2
   21626:	2004      	movs	r0, #4
   21628:	4798      	blx	r3
}
   2162a:	e09a      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   2162c:	1dfb      	adds	r3, r7, #7
   2162e:	781b      	ldrb	r3, [r3, #0]
   21630:	2b65      	cmp	r3, #101	; 0x65
   21632:	d116      	bne.n	21662 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21634:	23a8      	movs	r3, #168	; 0xa8
   21636:	18f9      	adds	r1, r7, r3
   21638:	6838      	ldr	r0, [r7, #0]
   2163a:	2300      	movs	r3, #0
   2163c:	2204      	movs	r2, #4
   2163e:	4c36      	ldr	r4, [pc, #216]	; (21718 <m2m_wifi_cb+0x350>)
   21640:	47a0      	blx	r4
   21642:	1e03      	subs	r3, r0, #0
   21644:	d000      	beq.n	21648 <m2m_wifi_cb+0x280>
   21646:	e08c      	b.n	21762 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21648:	4b34      	ldr	r3, [pc, #208]	; (2171c <m2m_wifi_cb+0x354>)
   2164a:	681b      	ldr	r3, [r3, #0]
   2164c:	2b00      	cmp	r3, #0
   2164e:	d100      	bne.n	21652 <m2m_wifi_cb+0x28a>
   21650:	e087      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   21652:	4b32      	ldr	r3, [pc, #200]	; (2171c <m2m_wifi_cb+0x354>)
   21654:	681b      	ldr	r3, [r3, #0]
   21656:	22a8      	movs	r2, #168	; 0xa8
   21658:	18ba      	adds	r2, r7, r2
   2165a:	0011      	movs	r1, r2
   2165c:	2065      	movs	r0, #101	; 0x65
   2165e:	4798      	blx	r3
}
   21660:	e07f      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   21662:	1dfb      	adds	r3, r7, #7
   21664:	781b      	ldrb	r3, [r3, #0]
   21666:	2b09      	cmp	r3, #9
   21668:	d116      	bne.n	21698 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   2166a:	230c      	movs	r3, #12
   2166c:	18f9      	adds	r1, r7, r3
   2166e:	6838      	ldr	r0, [r7, #0]
   21670:	2301      	movs	r3, #1
   21672:	2264      	movs	r2, #100	; 0x64
   21674:	4c28      	ldr	r4, [pc, #160]	; (21718 <m2m_wifi_cb+0x350>)
   21676:	47a0      	blx	r4
   21678:	1e03      	subs	r3, r0, #0
   2167a:	d000      	beq.n	2167e <m2m_wifi_cb+0x2b6>
   2167c:	e071      	b.n	21762 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2167e:	4b27      	ldr	r3, [pc, #156]	; (2171c <m2m_wifi_cb+0x354>)
   21680:	681b      	ldr	r3, [r3, #0]
   21682:	2b00      	cmp	r3, #0
   21684:	d100      	bne.n	21688 <m2m_wifi_cb+0x2c0>
   21686:	e06c      	b.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21688:	4b24      	ldr	r3, [pc, #144]	; (2171c <m2m_wifi_cb+0x354>)
   2168a:	681b      	ldr	r3, [r3, #0]
   2168c:	220c      	movs	r2, #12
   2168e:	18ba      	adds	r2, r7, r2
   21690:	0011      	movs	r1, r2
   21692:	2009      	movs	r0, #9
   21694:	4798      	blx	r3
}
   21696:	e064      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   21698:	1dfb      	adds	r3, r7, #7
   2169a:	781b      	ldrb	r3, [r3, #0]
   2169c:	2b2a      	cmp	r3, #42	; 0x2a
   2169e:	d114      	bne.n	216ca <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   216a0:	2378      	movs	r3, #120	; 0x78
   216a2:	18f9      	adds	r1, r7, r3
   216a4:	6838      	ldr	r0, [r7, #0]
   216a6:	2301      	movs	r3, #1
   216a8:	2204      	movs	r2, #4
   216aa:	4c1b      	ldr	r4, [pc, #108]	; (21718 <m2m_wifi_cb+0x350>)
   216ac:	47a0      	blx	r4
   216ae:	1e03      	subs	r3, r0, #0
   216b0:	d157      	bne.n	21762 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   216b2:	4b1a      	ldr	r3, [pc, #104]	; (2171c <m2m_wifi_cb+0x354>)
   216b4:	681b      	ldr	r3, [r3, #0]
   216b6:	2b00      	cmp	r3, #0
   216b8:	d053      	beq.n	21762 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   216ba:	4b18      	ldr	r3, [pc, #96]	; (2171c <m2m_wifi_cb+0x354>)
   216bc:	681b      	ldr	r3, [r3, #0]
   216be:	2278      	movs	r2, #120	; 0x78
   216c0:	18ba      	adds	r2, r7, r2
   216c2:	0011      	movs	r1, r2
   216c4:	202a      	movs	r0, #42	; 0x2a
   216c6:	4798      	blx	r3
}
   216c8:	e04b      	b.n	21762 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   216ca:	1dfb      	adds	r3, r7, #7
   216cc:	781b      	ldrb	r3, [r3, #0]
   216ce:	2b20      	cmp	r3, #32
   216d0:	d134      	bne.n	2173c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   216d2:	2370      	movs	r3, #112	; 0x70
   216d4:	18f9      	adds	r1, r7, r3
   216d6:	6838      	ldr	r0, [r7, #0]
   216d8:	2300      	movs	r3, #0
   216da:	2208      	movs	r2, #8
   216dc:	4c0e      	ldr	r4, [pc, #56]	; (21718 <m2m_wifi_cb+0x350>)
   216de:	47a0      	blx	r4
   216e0:	1e03      	subs	r3, r0, #0
   216e2:	d13e      	bne.n	21762 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   216e4:	683b      	ldr	r3, [r7, #0]
   216e6:	3308      	adds	r3, #8
   216e8:	0018      	movs	r0, r3
   216ea:	2370      	movs	r3, #112	; 0x70
   216ec:	18fb      	adds	r3, r7, r3
   216ee:	6819      	ldr	r1, [r3, #0]
   216f0:	2370      	movs	r3, #112	; 0x70
   216f2:	18fb      	adds	r3, r7, r3
   216f4:	889a      	ldrh	r2, [r3, #4]
   216f6:	2301      	movs	r3, #1
   216f8:	4c07      	ldr	r4, [pc, #28]	; (21718 <m2m_wifi_cb+0x350>)
   216fa:	47a0      	blx	r4
   216fc:	1e03      	subs	r3, r0, #0
   216fe:	d130      	bne.n	21762 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   21700:	4b06      	ldr	r3, [pc, #24]	; (2171c <m2m_wifi_cb+0x354>)
   21702:	681b      	ldr	r3, [r3, #0]
   21704:	2b00      	cmp	r3, #0
   21706:	d02c      	beq.n	21762 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   21708:	4b04      	ldr	r3, [pc, #16]	; (2171c <m2m_wifi_cb+0x354>)
   2170a:	681b      	ldr	r3, [r3, #0]
   2170c:	2270      	movs	r2, #112	; 0x70
   2170e:	18ba      	adds	r2, r7, r2
   21710:	0011      	movs	r1, r2
   21712:	2020      	movs	r0, #32
   21714:	4798      	blx	r3
}
   21716:	e024      	b.n	21762 <m2m_wifi_cb+0x39a>
   21718:	0002118d 	.word	0x0002118d
   2171c:	20003e90 	.word	0x20003e90
   21720:	00020611 	.word	0x00020611
   21724:	00037f04 	.word	0x00037f04
   21728:	0001dc99 	.word	0x0001dc99
   2172c:	00037f10 	.word	0x00037f10
   21730:	00037f30 	.word	0x00037f30
   21734:	20003e8d 	.word	0x20003e8d
   21738:	20003e8c 	.word	0x20003e8c
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   2173c:	2324      	movs	r3, #36	; 0x24
   2173e:	33ff      	adds	r3, #255	; 0xff
   21740:	001a      	movs	r2, r3
   21742:	490a      	ldr	r1, [pc, #40]	; (2176c <m2m_wifi_cb+0x3a4>)
   21744:	4b0a      	ldr	r3, [pc, #40]	; (21770 <m2m_wifi_cb+0x3a8>)
   21746:	0018      	movs	r0, r3
   21748:	4b0a      	ldr	r3, [pc, #40]	; (21774 <m2m_wifi_cb+0x3ac>)
   2174a:	4798      	blx	r3
   2174c:	1dfb      	adds	r3, r7, #7
   2174e:	781a      	ldrb	r2, [r3, #0]
   21750:	4b09      	ldr	r3, [pc, #36]	; (21778 <m2m_wifi_cb+0x3b0>)
   21752:	0011      	movs	r1, r2
   21754:	0018      	movs	r0, r3
   21756:	4b07      	ldr	r3, [pc, #28]	; (21774 <m2m_wifi_cb+0x3ac>)
   21758:	4798      	blx	r3
   2175a:	4b08      	ldr	r3, [pc, #32]	; (2177c <m2m_wifi_cb+0x3b4>)
   2175c:	0018      	movs	r0, r3
   2175e:	4b05      	ldr	r3, [pc, #20]	; (21774 <m2m_wifi_cb+0x3ac>)
   21760:	4798      	blx	r3
}
   21762:	46c0      	nop			; (mov r8, r8)
   21764:	46bd      	mov	sp, r7
   21766:	b02d      	add	sp, #180	; 0xb4
   21768:	bd90      	pop	{r4, r7, pc}
   2176a:	46c0      	nop			; (mov r8, r8)
   2176c:	000382d0 	.word	0x000382d0
   21770:	00037f34 	.word	0x00037f34
   21774:	0001dc99 	.word	0x0001dc99
   21778:	00037f48 	.word	0x00037f48
   2177c:	00037f30 	.word	0x00037f30

00021780 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   21780:	b590      	push	{r4, r7, lr}
   21782:	b091      	sub	sp, #68	; 0x44
   21784:	af02      	add	r7, sp, #8
   21786:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   21788:	2337      	movs	r3, #55	; 0x37
   2178a:	18fb      	adds	r3, r7, r3
   2178c:	2200      	movs	r2, #0
   2178e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   21790:	230b      	movs	r3, #11
   21792:	18fb      	adds	r3, r7, r3
   21794:	2201      	movs	r2, #1
   21796:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   21798:	687b      	ldr	r3, [r7, #4]
   2179a:	2b00      	cmp	r3, #0
   2179c:	d104      	bne.n	217a8 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   2179e:	2337      	movs	r3, #55	; 0x37
   217a0:	18fb      	adds	r3, r7, r3
   217a2:	22f4      	movs	r2, #244	; 0xf4
   217a4:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   217a6:	e0b3      	b.n	21910 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   217a8:	687b      	ldr	r3, [r7, #4]
   217aa:	681a      	ldr	r2, [r3, #0]
   217ac:	4b5c      	ldr	r3, [pc, #368]	; (21920 <m2m_wifi_init+0x1a0>)
   217ae:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   217b0:	4b5c      	ldr	r3, [pc, #368]	; (21924 <m2m_wifi_init+0x1a4>)
   217b2:	2200      	movs	r2, #0
   217b4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   217b6:	2337      	movs	r3, #55	; 0x37
   217b8:	18fc      	adds	r4, r7, r3
   217ba:	230b      	movs	r3, #11
   217bc:	18fb      	adds	r3, r7, r3
   217be:	0018      	movs	r0, r3
   217c0:	4b59      	ldr	r3, [pc, #356]	; (21928 <m2m_wifi_init+0x1a8>)
   217c2:	4798      	blx	r3
   217c4:	0003      	movs	r3, r0
   217c6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   217c8:	2337      	movs	r3, #55	; 0x37
   217ca:	18fb      	adds	r3, r7, r3
   217cc:	781b      	ldrb	r3, [r3, #0]
   217ce:	b25b      	sxtb	r3, r3
   217d0:	2b00      	cmp	r3, #0
   217d2:	d000      	beq.n	217d6 <m2m_wifi_init+0x56>
   217d4:	e099      	b.n	2190a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   217d6:	2337      	movs	r3, #55	; 0x37
   217d8:	18fc      	adds	r4, r7, r3
   217da:	2000      	movs	r0, #0
   217dc:	4b53      	ldr	r3, [pc, #332]	; (2192c <m2m_wifi_init+0x1ac>)
   217de:	4798      	blx	r3
   217e0:	0003      	movs	r3, r0
   217e2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   217e4:	2337      	movs	r3, #55	; 0x37
   217e6:	18fb      	adds	r3, r7, r3
   217e8:	781b      	ldrb	r3, [r3, #0]
   217ea:	b25b      	sxtb	r3, r3
   217ec:	2b00      	cmp	r3, #0
   217ee:	d000      	beq.n	217f2 <m2m_wifi_init+0x72>
   217f0:	e086      	b.n	21900 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   217f2:	4b4f      	ldr	r3, [pc, #316]	; (21930 <m2m_wifi_init+0x1b0>)
   217f4:	0019      	movs	r1, r3
   217f6:	2001      	movs	r0, #1
   217f8:	4b4e      	ldr	r3, [pc, #312]	; (21934 <m2m_wifi_init+0x1b4>)
   217fa:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   217fc:	2337      	movs	r3, #55	; 0x37
   217fe:	18fc      	adds	r4, r7, r3
   21800:	230c      	movs	r3, #12
   21802:	18fb      	adds	r3, r7, r3
   21804:	0018      	movs	r0, r3
   21806:	4b4c      	ldr	r3, [pc, #304]	; (21938 <m2m_wifi_init+0x1b8>)
   21808:	4798      	blx	r3
   2180a:	0003      	movs	r3, r0
   2180c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   2180e:	4b4b      	ldr	r3, [pc, #300]	; (2193c <m2m_wifi_init+0x1bc>)
   21810:	0018      	movs	r0, r3
   21812:	4b4b      	ldr	r3, [pc, #300]	; (21940 <m2m_wifi_init+0x1c0>)
   21814:	4798      	blx	r3
   21816:	230c      	movs	r3, #12
   21818:	18fb      	adds	r3, r7, r3
   2181a:	791b      	ldrb	r3, [r3, #4]
   2181c:	0019      	movs	r1, r3
   2181e:	230c      	movs	r3, #12
   21820:	18fb      	adds	r3, r7, r3
   21822:	795b      	ldrb	r3, [r3, #5]
   21824:	001a      	movs	r2, r3
   21826:	230c      	movs	r3, #12
   21828:	18fb      	adds	r3, r7, r3
   2182a:	799b      	ldrb	r3, [r3, #6]
   2182c:	001c      	movs	r4, r3
   2182e:	230c      	movs	r3, #12
   21830:	18fb      	adds	r3, r7, r3
   21832:	8c1b      	ldrh	r3, [r3, #32]
   21834:	4843      	ldr	r0, [pc, #268]	; (21944 <m2m_wifi_init+0x1c4>)
   21836:	9300      	str	r3, [sp, #0]
   21838:	0023      	movs	r3, r4
   2183a:	4c41      	ldr	r4, [pc, #260]	; (21940 <m2m_wifi_init+0x1c0>)
   2183c:	47a0      	blx	r4
   2183e:	4b42      	ldr	r3, [pc, #264]	; (21948 <m2m_wifi_init+0x1c8>)
   21840:	0018      	movs	r0, r3
   21842:	4b3f      	ldr	r3, [pc, #252]	; (21940 <m2m_wifi_init+0x1c0>)
   21844:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   21846:	4b3d      	ldr	r3, [pc, #244]	; (2193c <m2m_wifi_init+0x1bc>)
   21848:	0018      	movs	r0, r3
   2184a:	4b3d      	ldr	r3, [pc, #244]	; (21940 <m2m_wifi_init+0x1c0>)
   2184c:	4798      	blx	r3
   2184e:	230c      	movs	r3, #12
   21850:	18fb      	adds	r3, r7, r3
   21852:	3316      	adds	r3, #22
   21854:	001a      	movs	r2, r3
   21856:	230c      	movs	r3, #12
   21858:	18fb      	adds	r3, r7, r3
   2185a:	330a      	adds	r3, #10
   2185c:	0019      	movs	r1, r3
   2185e:	4b3b      	ldr	r3, [pc, #236]	; (2194c <m2m_wifi_init+0x1cc>)
   21860:	0018      	movs	r0, r3
   21862:	4b37      	ldr	r3, [pc, #220]	; (21940 <m2m_wifi_init+0x1c0>)
   21864:	4798      	blx	r3
   21866:	4b38      	ldr	r3, [pc, #224]	; (21948 <m2m_wifi_init+0x1c8>)
   21868:	0018      	movs	r0, r3
   2186a:	4b35      	ldr	r3, [pc, #212]	; (21940 <m2m_wifi_init+0x1c0>)
   2186c:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   2186e:	4b33      	ldr	r3, [pc, #204]	; (2193c <m2m_wifi_init+0x1bc>)
   21870:	0018      	movs	r0, r3
   21872:	4b33      	ldr	r3, [pc, #204]	; (21940 <m2m_wifi_init+0x1c0>)
   21874:	4798      	blx	r3
   21876:	230c      	movs	r3, #12
   21878:	18fb      	adds	r3, r7, r3
   2187a:	79db      	ldrb	r3, [r3, #7]
   2187c:	0019      	movs	r1, r3
   2187e:	230c      	movs	r3, #12
   21880:	18fb      	adds	r3, r7, r3
   21882:	7a1b      	ldrb	r3, [r3, #8]
   21884:	001a      	movs	r2, r3
   21886:	230c      	movs	r3, #12
   21888:	18fb      	adds	r3, r7, r3
   2188a:	7a5b      	ldrb	r3, [r3, #9]
   2188c:	4830      	ldr	r0, [pc, #192]	; (21950 <m2m_wifi_init+0x1d0>)
   2188e:	4c2c      	ldr	r4, [pc, #176]	; (21940 <m2m_wifi_init+0x1c0>)
   21890:	47a0      	blx	r4
   21892:	4b2d      	ldr	r3, [pc, #180]	; (21948 <m2m_wifi_init+0x1c8>)
   21894:	0018      	movs	r0, r3
   21896:	4b2a      	ldr	r3, [pc, #168]	; (21940 <m2m_wifi_init+0x1c0>)
   21898:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   2189a:	4b28      	ldr	r3, [pc, #160]	; (2193c <m2m_wifi_init+0x1bc>)
   2189c:	0018      	movs	r0, r3
   2189e:	4b28      	ldr	r3, [pc, #160]	; (21940 <m2m_wifi_init+0x1c0>)
   218a0:	4798      	blx	r3
   218a2:	482c      	ldr	r0, [pc, #176]	; (21954 <m2m_wifi_init+0x1d4>)
   218a4:	2304      	movs	r3, #4
   218a6:	2205      	movs	r2, #5
   218a8:	2113      	movs	r1, #19
   218aa:	4c25      	ldr	r4, [pc, #148]	; (21940 <m2m_wifi_init+0x1c0>)
   218ac:	47a0      	blx	r4
   218ae:	4b26      	ldr	r3, [pc, #152]	; (21948 <m2m_wifi_init+0x1c8>)
   218b0:	0018      	movs	r0, r3
   218b2:	4b23      	ldr	r3, [pc, #140]	; (21940 <m2m_wifi_init+0x1c0>)
   218b4:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   218b6:	4b21      	ldr	r3, [pc, #132]	; (2193c <m2m_wifi_init+0x1bc>)
   218b8:	0018      	movs	r0, r3
   218ba:	4b21      	ldr	r3, [pc, #132]	; (21940 <m2m_wifi_init+0x1c0>)
   218bc:	4798      	blx	r3
   218be:	4a26      	ldr	r2, [pc, #152]	; (21958 <m2m_wifi_init+0x1d8>)
   218c0:	4926      	ldr	r1, [pc, #152]	; (2195c <m2m_wifi_init+0x1dc>)
   218c2:	4b27      	ldr	r3, [pc, #156]	; (21960 <m2m_wifi_init+0x1e0>)
   218c4:	0018      	movs	r0, r3
   218c6:	4b1e      	ldr	r3, [pc, #120]	; (21940 <m2m_wifi_init+0x1c0>)
   218c8:	4798      	blx	r3
   218ca:	4b1f      	ldr	r3, [pc, #124]	; (21948 <m2m_wifi_init+0x1c8>)
   218cc:	0018      	movs	r0, r3
   218ce:	4b1c      	ldr	r3, [pc, #112]	; (21940 <m2m_wifi_init+0x1c0>)
   218d0:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   218d2:	2337      	movs	r3, #55	; 0x37
   218d4:	18fb      	adds	r3, r7, r3
   218d6:	781b      	ldrb	r3, [r3, #0]
   218d8:	b25b      	sxtb	r3, r3
   218da:	330d      	adds	r3, #13
   218dc:	d117      	bne.n	2190e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   218de:	23e8      	movs	r3, #232	; 0xe8
   218e0:	33ff      	adds	r3, #255	; 0xff
   218e2:	001a      	movs	r2, r3
   218e4:	491f      	ldr	r1, [pc, #124]	; (21964 <m2m_wifi_init+0x1e4>)
   218e6:	4b20      	ldr	r3, [pc, #128]	; (21968 <m2m_wifi_init+0x1e8>)
   218e8:	0018      	movs	r0, r3
   218ea:	4b15      	ldr	r3, [pc, #84]	; (21940 <m2m_wifi_init+0x1c0>)
   218ec:	4798      	blx	r3
   218ee:	4b1f      	ldr	r3, [pc, #124]	; (2196c <m2m_wifi_init+0x1ec>)
   218f0:	0018      	movs	r0, r3
   218f2:	4b13      	ldr	r3, [pc, #76]	; (21940 <m2m_wifi_init+0x1c0>)
   218f4:	4798      	blx	r3
   218f6:	4b14      	ldr	r3, [pc, #80]	; (21948 <m2m_wifi_init+0x1c8>)
   218f8:	0018      	movs	r0, r3
   218fa:	4b11      	ldr	r3, [pc, #68]	; (21940 <m2m_wifi_init+0x1c0>)
   218fc:	4798      	blx	r3
	}

	goto _EXIT0;
   218fe:	e006      	b.n	2190e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   21900:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   21902:	2000      	movs	r0, #0
   21904:	4b1a      	ldr	r3, [pc, #104]	; (21970 <m2m_wifi_init+0x1f0>)
   21906:	4798      	blx	r3
   21908:	e002      	b.n	21910 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   2190a:	46c0      	nop			; (mov r8, r8)
   2190c:	e000      	b.n	21910 <m2m_wifi_init+0x190>
	goto _EXIT0;
   2190e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   21910:	2337      	movs	r3, #55	; 0x37
   21912:	18fb      	adds	r3, r7, r3
   21914:	781b      	ldrb	r3, [r3, #0]
   21916:	b25b      	sxtb	r3, r3
}
   21918:	0018      	movs	r0, r3
   2191a:	46bd      	mov	sp, r7
   2191c:	b00f      	add	sp, #60	; 0x3c
   2191e:	bd90      	pop	{r4, r7, pc}
   21920:	20003e90 	.word	0x20003e90
   21924:	20003e8d 	.word	0x20003e8d
   21928:	00022aa5 	.word	0x00022aa5
   2192c:	00020829 	.word	0x00020829
   21930:	000213c9 	.word	0x000213c9
   21934:	0002130d 	.word	0x0002130d
   21938:	000228d9 	.word	0x000228d9
   2193c:	00037f04 	.word	0x00037f04
   21940:	0001dc99 	.word	0x0001dc99
   21944:	000380a8 	.word	0x000380a8
   21948:	00037f30 	.word	0x00037f30
   2194c:	000380d0 	.word	0x000380d0
   21950:	000380ec 	.word	0x000380ec
   21954:	00038110 	.word	0x00038110
   21958:	00038128 	.word	0x00038128
   2195c:	00038134 	.word	0x00038134
   21960:	00038140 	.word	0x00038140
   21964:	000382dc 	.word	0x000382dc
   21968:	00037f34 	.word	0x00037f34
   2196c:	00038158 	.word	0x00038158
   21970:	00022c35 	.word	0x00022c35

00021974 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   21974:	b580      	push	{r7, lr}
   21976:	b082      	sub	sp, #8
   21978:	af00      	add	r7, sp, #0
   2197a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   2197c:	4b03      	ldr	r3, [pc, #12]	; (2198c <m2m_wifi_handle_events+0x18>)
   2197e:	4798      	blx	r3
   21980:	0003      	movs	r3, r0
}
   21982:	0018      	movs	r0, r3
   21984:	46bd      	mov	sp, r7
   21986:	b002      	add	sp, #8
   21988:	bd80      	pop	{r7, pc}
   2198a:	46c0      	nop			; (mov r8, r8)
   2198c:	000210ed 	.word	0x000210ed

00021990 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   21990:	b590      	push	{r4, r7, lr}
   21992:	b087      	sub	sp, #28
   21994:	af02      	add	r7, sp, #8
   21996:	60f8      	str	r0, [r7, #12]
   21998:	0008      	movs	r0, r1
   2199a:	0011      	movs	r1, r2
   2199c:	607b      	str	r3, [r7, #4]
   2199e:	230b      	movs	r3, #11
   219a0:	18fb      	adds	r3, r7, r3
   219a2:	1c02      	adds	r2, r0, #0
   219a4:	701a      	strb	r2, [r3, #0]
   219a6:	230a      	movs	r3, #10
   219a8:	18fb      	adds	r3, r7, r3
   219aa:	1c0a      	adds	r2, r1, #0
   219ac:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   219ae:	687c      	ldr	r4, [r7, #4]
   219b0:	230a      	movs	r3, #10
   219b2:	18fb      	adds	r3, r7, r3
   219b4:	781a      	ldrb	r2, [r3, #0]
   219b6:	230b      	movs	r3, #11
   219b8:	18fb      	adds	r3, r7, r3
   219ba:	7819      	ldrb	r1, [r3, #0]
   219bc:	68f8      	ldr	r0, [r7, #12]
   219be:	2300      	movs	r3, #0
   219c0:	9301      	str	r3, [sp, #4]
   219c2:	2320      	movs	r3, #32
   219c4:	18fb      	adds	r3, r7, r3
   219c6:	881b      	ldrh	r3, [r3, #0]
   219c8:	9300      	str	r3, [sp, #0]
   219ca:	0023      	movs	r3, r4
   219cc:	4c03      	ldr	r4, [pc, #12]	; (219dc <m2m_wifi_connect+0x4c>)
   219ce:	47a0      	blx	r4
   219d0:	0003      	movs	r3, r0
}
   219d2:	0018      	movs	r0, r3
   219d4:	46bd      	mov	sp, r7
   219d6:	b005      	add	sp, #20
   219d8:	bd90      	pop	{r4, r7, pc}
   219da:	46c0      	nop			; (mov r8, r8)
   219dc:	000219e1 	.word	0x000219e1

000219e0 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   219e0:	b5b0      	push	{r4, r5, r7, lr}
   219e2:	b0aa      	sub	sp, #168	; 0xa8
   219e4:	af04      	add	r7, sp, #16
   219e6:	60f8      	str	r0, [r7, #12]
   219e8:	0008      	movs	r0, r1
   219ea:	0011      	movs	r1, r2
   219ec:	607b      	str	r3, [r7, #4]
   219ee:	230b      	movs	r3, #11
   219f0:	18fb      	adds	r3, r7, r3
   219f2:	1c02      	adds	r2, r0, #0
   219f4:	701a      	strb	r2, [r3, #0]
   219f6:	230a      	movs	r3, #10
   219f8:	18fb      	adds	r3, r7, r3
   219fa:	1c0a      	adds	r2, r1, #0
   219fc:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   219fe:	2397      	movs	r3, #151	; 0x97
   21a00:	18fb      	adds	r3, r7, r3
   21a02:	2200      	movs	r2, #0
   21a04:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   21a06:	230a      	movs	r3, #10
   21a08:	18fb      	adds	r3, r7, r3
   21a0a:	781b      	ldrb	r3, [r3, #0]
   21a0c:	2b01      	cmp	r3, #1
   21a0e:	d100      	bne.n	21a12 <m2m_wifi_connect_sc+0x32>
   21a10:	e085      	b.n	21b1e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   21a12:	687b      	ldr	r3, [r7, #4]
   21a14:	2b00      	cmp	r3, #0
   21a16:	d112      	bne.n	21a3e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   21a18:	4ad8      	ldr	r2, [pc, #864]	; (21d7c <m2m_wifi_connect_sc+0x39c>)
   21a1a:	49d9      	ldr	r1, [pc, #868]	; (21d80 <m2m_wifi_connect_sc+0x3a0>)
   21a1c:	4bd9      	ldr	r3, [pc, #868]	; (21d84 <m2m_wifi_connect_sc+0x3a4>)
   21a1e:	0018      	movs	r0, r3
   21a20:	4bd9      	ldr	r3, [pc, #868]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21a22:	4798      	blx	r3
   21a24:	4bd9      	ldr	r3, [pc, #868]	; (21d8c <m2m_wifi_connect_sc+0x3ac>)
   21a26:	0018      	movs	r0, r3
   21a28:	4bd7      	ldr	r3, [pc, #860]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21a2a:	4798      	blx	r3
   21a2c:	4bd8      	ldr	r3, [pc, #864]	; (21d90 <m2m_wifi_connect_sc+0x3b0>)
   21a2e:	0018      	movs	r0, r3
   21a30:	4bd5      	ldr	r3, [pc, #852]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21a32:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21a34:	2397      	movs	r3, #151	; 0x97
   21a36:	18fb      	adds	r3, r7, r3
   21a38:	22f4      	movs	r2, #244	; 0xf4
   21a3a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21a3c:	e1f9      	b.n	21e32 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   21a3e:	230a      	movs	r3, #10
   21a40:	18fb      	adds	r3, r7, r3
   21a42:	781b      	ldrb	r3, [r3, #0]
   21a44:	2b02      	cmp	r3, #2
   21a46:	d16a      	bne.n	21b1e <m2m_wifi_connect_sc+0x13e>
   21a48:	687b      	ldr	r3, [r7, #4]
   21a4a:	0018      	movs	r0, r3
   21a4c:	4bd1      	ldr	r3, [pc, #836]	; (21d94 <m2m_wifi_connect_sc+0x3b4>)
   21a4e:	4798      	blx	r3
   21a50:	0003      	movs	r3, r0
   21a52:	2b40      	cmp	r3, #64	; 0x40
   21a54:	d163      	bne.n	21b1e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   21a56:	2396      	movs	r3, #150	; 0x96
   21a58:	18fb      	adds	r3, r7, r3
   21a5a:	2200      	movs	r2, #0
   21a5c:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   21a5e:	687b      	ldr	r3, [r7, #4]
   21a60:	2290      	movs	r2, #144	; 0x90
   21a62:	18ba      	adds	r2, r7, r2
   21a64:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21a66:	e055      	b.n	21b14 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   21a68:	2396      	movs	r3, #150	; 0x96
   21a6a:	18fb      	adds	r3, r7, r3
   21a6c:	781b      	ldrb	r3, [r3, #0]
   21a6e:	2290      	movs	r2, #144	; 0x90
   21a70:	18ba      	adds	r2, r7, r2
   21a72:	6812      	ldr	r2, [r2, #0]
   21a74:	18d3      	adds	r3, r2, r3
   21a76:	781b      	ldrb	r3, [r3, #0]
   21a78:	2b2f      	cmp	r3, #47	; 0x2f
   21a7a:	d931      	bls.n	21ae0 <m2m_wifi_connect_sc+0x100>
   21a7c:	2396      	movs	r3, #150	; 0x96
   21a7e:	18fb      	adds	r3, r7, r3
   21a80:	781b      	ldrb	r3, [r3, #0]
   21a82:	2290      	movs	r2, #144	; 0x90
   21a84:	18ba      	adds	r2, r7, r2
   21a86:	6812      	ldr	r2, [r2, #0]
   21a88:	18d3      	adds	r3, r2, r3
   21a8a:	781b      	ldrb	r3, [r3, #0]
   21a8c:	2b39      	cmp	r3, #57	; 0x39
   21a8e:	d909      	bls.n	21aa4 <m2m_wifi_connect_sc+0xc4>
   21a90:	2396      	movs	r3, #150	; 0x96
   21a92:	18fb      	adds	r3, r7, r3
   21a94:	781b      	ldrb	r3, [r3, #0]
   21a96:	2290      	movs	r2, #144	; 0x90
   21a98:	18ba      	adds	r2, r7, r2
   21a9a:	6812      	ldr	r2, [r2, #0]
   21a9c:	18d3      	adds	r3, r2, r3
   21a9e:	781b      	ldrb	r3, [r3, #0]
   21aa0:	2b40      	cmp	r3, #64	; 0x40
   21aa2:	d91d      	bls.n	21ae0 <m2m_wifi_connect_sc+0x100>
   21aa4:	2396      	movs	r3, #150	; 0x96
   21aa6:	18fb      	adds	r3, r7, r3
   21aa8:	781b      	ldrb	r3, [r3, #0]
   21aaa:	2290      	movs	r2, #144	; 0x90
   21aac:	18ba      	adds	r2, r7, r2
   21aae:	6812      	ldr	r2, [r2, #0]
   21ab0:	18d3      	adds	r3, r2, r3
   21ab2:	781b      	ldrb	r3, [r3, #0]
   21ab4:	2b46      	cmp	r3, #70	; 0x46
   21ab6:	d909      	bls.n	21acc <m2m_wifi_connect_sc+0xec>
   21ab8:	2396      	movs	r3, #150	; 0x96
   21aba:	18fb      	adds	r3, r7, r3
   21abc:	781b      	ldrb	r3, [r3, #0]
   21abe:	2290      	movs	r2, #144	; 0x90
   21ac0:	18ba      	adds	r2, r7, r2
   21ac2:	6812      	ldr	r2, [r2, #0]
   21ac4:	18d3      	adds	r3, r2, r3
   21ac6:	781b      	ldrb	r3, [r3, #0]
   21ac8:	2b60      	cmp	r3, #96	; 0x60
   21aca:	d909      	bls.n	21ae0 <m2m_wifi_connect_sc+0x100>
   21acc:	2396      	movs	r3, #150	; 0x96
   21ace:	18fb      	adds	r3, r7, r3
   21ad0:	781b      	ldrb	r3, [r3, #0]
   21ad2:	2290      	movs	r2, #144	; 0x90
   21ad4:	18ba      	adds	r2, r7, r2
   21ad6:	6812      	ldr	r2, [r2, #0]
   21ad8:	18d3      	adds	r3, r2, r3
   21ada:	781b      	ldrb	r3, [r3, #0]
   21adc:	2b66      	cmp	r3, #102	; 0x66
   21ade:	d912      	bls.n	21b06 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   21ae0:	4aad      	ldr	r2, [pc, #692]	; (21d98 <m2m_wifi_connect_sc+0x3b8>)
   21ae2:	49a7      	ldr	r1, [pc, #668]	; (21d80 <m2m_wifi_connect_sc+0x3a0>)
   21ae4:	4ba7      	ldr	r3, [pc, #668]	; (21d84 <m2m_wifi_connect_sc+0x3a4>)
   21ae6:	0018      	movs	r0, r3
   21ae8:	4ba7      	ldr	r3, [pc, #668]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21aea:	4798      	blx	r3
   21aec:	4bab      	ldr	r3, [pc, #684]	; (21d9c <m2m_wifi_connect_sc+0x3bc>)
   21aee:	0018      	movs	r0, r3
   21af0:	4ba5      	ldr	r3, [pc, #660]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21af2:	4798      	blx	r3
   21af4:	4ba6      	ldr	r3, [pc, #664]	; (21d90 <m2m_wifi_connect_sc+0x3b0>)
   21af6:	0018      	movs	r0, r3
   21af8:	4ba3      	ldr	r3, [pc, #652]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21afa:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   21afc:	2397      	movs	r3, #151	; 0x97
   21afe:	18fb      	adds	r3, r7, r3
   21b00:	22f4      	movs	r2, #244	; 0xf4
   21b02:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   21b04:	e195      	b.n	21e32 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   21b06:	2396      	movs	r3, #150	; 0x96
   21b08:	18fb      	adds	r3, r7, r3
   21b0a:	781a      	ldrb	r2, [r3, #0]
   21b0c:	2396      	movs	r3, #150	; 0x96
   21b0e:	18fb      	adds	r3, r7, r3
   21b10:	3201      	adds	r2, #1
   21b12:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   21b14:	2396      	movs	r3, #150	; 0x96
   21b16:	18fb      	adds	r3, r7, r3
   21b18:	781b      	ldrb	r3, [r3, #0]
   21b1a:	2b3f      	cmp	r3, #63	; 0x3f
   21b1c:	d9a4      	bls.n	21a68 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   21b1e:	230b      	movs	r3, #11
   21b20:	18fb      	adds	r3, r7, r3
   21b22:	781b      	ldrb	r3, [r3, #0]
   21b24:	2b00      	cmp	r3, #0
   21b26:	d004      	beq.n	21b32 <m2m_wifi_connect_sc+0x152>
   21b28:	230b      	movs	r3, #11
   21b2a:	18fb      	adds	r3, r7, r3
   21b2c:	781b      	ldrb	r3, [r3, #0]
   21b2e:	2b20      	cmp	r3, #32
   21b30:	d913      	bls.n	21b5a <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   21b32:	238c      	movs	r3, #140	; 0x8c
   21b34:	009a      	lsls	r2, r3, #2
   21b36:	4992      	ldr	r1, [pc, #584]	; (21d80 <m2m_wifi_connect_sc+0x3a0>)
   21b38:	4b92      	ldr	r3, [pc, #584]	; (21d84 <m2m_wifi_connect_sc+0x3a4>)
   21b3a:	0018      	movs	r0, r3
   21b3c:	4b92      	ldr	r3, [pc, #584]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21b3e:	4798      	blx	r3
   21b40:	4b97      	ldr	r3, [pc, #604]	; (21da0 <m2m_wifi_connect_sc+0x3c0>)
   21b42:	0018      	movs	r0, r3
   21b44:	4b90      	ldr	r3, [pc, #576]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21b46:	4798      	blx	r3
   21b48:	4b91      	ldr	r3, [pc, #580]	; (21d90 <m2m_wifi_connect_sc+0x3b0>)
   21b4a:	0018      	movs	r0, r3
   21b4c:	4b8e      	ldr	r3, [pc, #568]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21b4e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21b50:	2397      	movs	r3, #151	; 0x97
   21b52:	18fb      	adds	r3, r7, r3
   21b54:	22f4      	movs	r2, #244	; 0xf4
   21b56:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21b58:	e16b      	b.n	21e32 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   21b5a:	23a8      	movs	r3, #168	; 0xa8
   21b5c:	18fb      	adds	r3, r7, r3
   21b5e:	881b      	ldrh	r3, [r3, #0]
   21b60:	2b00      	cmp	r3, #0
   21b62:	d004      	beq.n	21b6e <m2m_wifi_connect_sc+0x18e>
   21b64:	23a8      	movs	r3, #168	; 0xa8
   21b66:	18fb      	adds	r3, r7, r3
   21b68:	881b      	ldrh	r3, [r3, #0]
   21b6a:	2b0e      	cmp	r3, #14
   21b6c:	d917      	bls.n	21b9e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   21b6e:	23a8      	movs	r3, #168	; 0xa8
   21b70:	18fb      	adds	r3, r7, r3
   21b72:	881b      	ldrh	r3, [r3, #0]
   21b74:	2bff      	cmp	r3, #255	; 0xff
   21b76:	d012      	beq.n	21b9e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   21b78:	4a8a      	ldr	r2, [pc, #552]	; (21da4 <m2m_wifi_connect_sc+0x3c4>)
   21b7a:	4981      	ldr	r1, [pc, #516]	; (21d80 <m2m_wifi_connect_sc+0x3a0>)
   21b7c:	4b81      	ldr	r3, [pc, #516]	; (21d84 <m2m_wifi_connect_sc+0x3a4>)
   21b7e:	0018      	movs	r0, r3
   21b80:	4b81      	ldr	r3, [pc, #516]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21b82:	4798      	blx	r3
   21b84:	4b88      	ldr	r3, [pc, #544]	; (21da8 <m2m_wifi_connect_sc+0x3c8>)
   21b86:	0018      	movs	r0, r3
   21b88:	4b7f      	ldr	r3, [pc, #508]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21b8a:	4798      	blx	r3
   21b8c:	4b80      	ldr	r3, [pc, #512]	; (21d90 <m2m_wifi_connect_sc+0x3b0>)
   21b8e:	0018      	movs	r0, r3
   21b90:	4b7d      	ldr	r3, [pc, #500]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21b92:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21b94:	2397      	movs	r3, #151	; 0x97
   21b96:	18fb      	adds	r3, r7, r3
   21b98:	22f4      	movs	r2, #244	; 0xf4
   21b9a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21b9c:	e149      	b.n	21e32 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   21b9e:	230b      	movs	r3, #11
   21ba0:	18fb      	adds	r3, r7, r3
   21ba2:	781a      	ldrb	r2, [r3, #0]
   21ba4:	68f9      	ldr	r1, [r7, #12]
   21ba6:	2314      	movs	r3, #20
   21ba8:	18fb      	adds	r3, r7, r3
   21baa:	3346      	adds	r3, #70	; 0x46
   21bac:	0018      	movs	r0, r3
   21bae:	4b7f      	ldr	r3, [pc, #508]	; (21dac <m2m_wifi_connect_sc+0x3cc>)
   21bb0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   21bb2:	230b      	movs	r3, #11
   21bb4:	18fb      	adds	r3, r7, r3
   21bb6:	781b      	ldrb	r3, [r3, #0]
   21bb8:	2214      	movs	r2, #20
   21bba:	18ba      	adds	r2, r7, r2
   21bbc:	2146      	movs	r1, #70	; 0x46
   21bbe:	18d3      	adds	r3, r2, r3
   21bc0:	185b      	adds	r3, r3, r1
   21bc2:	2200      	movs	r2, #0
   21bc4:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   21bc6:	2314      	movs	r3, #20
   21bc8:	18fb      	adds	r3, r7, r3
   21bca:	22a8      	movs	r2, #168	; 0xa8
   21bcc:	18ba      	adds	r2, r7, r2
   21bce:	2144      	movs	r1, #68	; 0x44
   21bd0:	8812      	ldrh	r2, [r2, #0]
   21bd2:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   21bd4:	23ac      	movs	r3, #172	; 0xac
   21bd6:	18fb      	adds	r3, r7, r3
   21bd8:	781b      	ldrb	r3, [r3, #0]
   21bda:	1e5a      	subs	r2, r3, #1
   21bdc:	4193      	sbcs	r3, r2
   21bde:	b2db      	uxtb	r3, r3
   21be0:	0019      	movs	r1, r3
   21be2:	2314      	movs	r3, #20
   21be4:	18fb      	adds	r3, r7, r3
   21be6:	2267      	movs	r2, #103	; 0x67
   21be8:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   21bea:	2314      	movs	r3, #20
   21bec:	18fb      	adds	r3, r7, r3
   21bee:	228c      	movs	r2, #140	; 0x8c
   21bf0:	18ba      	adds	r2, r7, r2
   21bf2:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   21bf4:	238c      	movs	r3, #140	; 0x8c
   21bf6:	18fb      	adds	r3, r7, r3
   21bf8:	681b      	ldr	r3, [r3, #0]
   21bfa:	220a      	movs	r2, #10
   21bfc:	18ba      	adds	r2, r7, r2
   21bfe:	2141      	movs	r1, #65	; 0x41
   21c00:	7812      	ldrb	r2, [r2, #0]
   21c02:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   21c04:	230a      	movs	r3, #10
   21c06:	18fb      	adds	r3, r7, r3
   21c08:	781b      	ldrb	r3, [r3, #0]
   21c0a:	2b03      	cmp	r3, #3
   21c0c:	d000      	beq.n	21c10 <m2m_wifi_connect_sc+0x230>
   21c0e:	e07d      	b.n	21d0c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   21c10:	687b      	ldr	r3, [r7, #4]
   21c12:	2288      	movs	r2, #136	; 0x88
   21c14:	18ba      	adds	r2, r7, r2
   21c16:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   21c18:	238c      	movs	r3, #140	; 0x8c
   21c1a:	18fb      	adds	r3, r7, r3
   21c1c:	681b      	ldr	r3, [r3, #0]
   21c1e:	2284      	movs	r2, #132	; 0x84
   21c20:	18ba      	adds	r2, r7, r2
   21c22:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   21c24:	2388      	movs	r3, #136	; 0x88
   21c26:	18fb      	adds	r3, r7, r3
   21c28:	681b      	ldr	r3, [r3, #0]
   21c2a:	781b      	ldrb	r3, [r3, #0]
   21c2c:	3b01      	subs	r3, #1
   21c2e:	b2da      	uxtb	r2, r3
   21c30:	2384      	movs	r3, #132	; 0x84
   21c32:	18fb      	adds	r3, r7, r3
   21c34:	681b      	ldr	r3, [r3, #0]
   21c36:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   21c38:	2384      	movs	r3, #132	; 0x84
   21c3a:	18fb      	adds	r3, r7, r3
   21c3c:	681b      	ldr	r3, [r3, #0]
   21c3e:	781b      	ldrb	r3, [r3, #0]
   21c40:	2b03      	cmp	r3, #3
   21c42:	d919      	bls.n	21c78 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   21c44:	2394      	movs	r3, #148	; 0x94
   21c46:	009a      	lsls	r2, r3, #2
   21c48:	494d      	ldr	r1, [pc, #308]	; (21d80 <m2m_wifi_connect_sc+0x3a0>)
   21c4a:	4b4e      	ldr	r3, [pc, #312]	; (21d84 <m2m_wifi_connect_sc+0x3a4>)
   21c4c:	0018      	movs	r0, r3
   21c4e:	4b4e      	ldr	r3, [pc, #312]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21c50:	4798      	blx	r3
   21c52:	2384      	movs	r3, #132	; 0x84
   21c54:	18fb      	adds	r3, r7, r3
   21c56:	681b      	ldr	r3, [r3, #0]
   21c58:	781b      	ldrb	r3, [r3, #0]
   21c5a:	001a      	movs	r2, r3
   21c5c:	4b54      	ldr	r3, [pc, #336]	; (21db0 <m2m_wifi_connect_sc+0x3d0>)
   21c5e:	0011      	movs	r1, r2
   21c60:	0018      	movs	r0, r3
   21c62:	4b49      	ldr	r3, [pc, #292]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21c64:	4798      	blx	r3
   21c66:	4b4a      	ldr	r3, [pc, #296]	; (21d90 <m2m_wifi_connect_sc+0x3b0>)
   21c68:	0018      	movs	r0, r3
   21c6a:	4b47      	ldr	r3, [pc, #284]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21c6c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21c6e:	2397      	movs	r3, #151	; 0x97
   21c70:	18fb      	adds	r3, r7, r3
   21c72:	22f4      	movs	r2, #244	; 0xf4
   21c74:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21c76:	e0dc      	b.n	21e32 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   21c78:	2388      	movs	r3, #136	; 0x88
   21c7a:	18fb      	adds	r3, r7, r3
   21c7c:	681b      	ldr	r3, [r3, #0]
   21c7e:	785b      	ldrb	r3, [r3, #1]
   21c80:	3b01      	subs	r3, #1
   21c82:	b2da      	uxtb	r2, r3
   21c84:	2384      	movs	r3, #132	; 0x84
   21c86:	18fb      	adds	r3, r7, r3
   21c88:	681b      	ldr	r3, [r3, #0]
   21c8a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   21c8c:	2384      	movs	r3, #132	; 0x84
   21c8e:	18fb      	adds	r3, r7, r3
   21c90:	681b      	ldr	r3, [r3, #0]
   21c92:	785b      	ldrb	r3, [r3, #1]
   21c94:	2b0a      	cmp	r3, #10
   21c96:	d01e      	beq.n	21cd6 <m2m_wifi_connect_sc+0x2f6>
   21c98:	2384      	movs	r3, #132	; 0x84
   21c9a:	18fb      	adds	r3, r7, r3
   21c9c:	681b      	ldr	r3, [r3, #0]
   21c9e:	785b      	ldrb	r3, [r3, #1]
   21ca0:	2b1a      	cmp	r3, #26
   21ca2:	d018      	beq.n	21cd6 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   21ca4:	4a43      	ldr	r2, [pc, #268]	; (21db4 <m2m_wifi_connect_sc+0x3d4>)
   21ca6:	4936      	ldr	r1, [pc, #216]	; (21d80 <m2m_wifi_connect_sc+0x3a0>)
   21ca8:	4b36      	ldr	r3, [pc, #216]	; (21d84 <m2m_wifi_connect_sc+0x3a4>)
   21caa:	0018      	movs	r0, r3
   21cac:	4b36      	ldr	r3, [pc, #216]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21cae:	4798      	blx	r3
   21cb0:	2384      	movs	r3, #132	; 0x84
   21cb2:	18fb      	adds	r3, r7, r3
   21cb4:	681b      	ldr	r3, [r3, #0]
   21cb6:	785b      	ldrb	r3, [r3, #1]
   21cb8:	001a      	movs	r2, r3
   21cba:	4b3f      	ldr	r3, [pc, #252]	; (21db8 <m2m_wifi_connect_sc+0x3d8>)
   21cbc:	0011      	movs	r1, r2
   21cbe:	0018      	movs	r0, r3
   21cc0:	4b31      	ldr	r3, [pc, #196]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21cc2:	4798      	blx	r3
   21cc4:	4b32      	ldr	r3, [pc, #200]	; (21d90 <m2m_wifi_connect_sc+0x3b0>)
   21cc6:	0018      	movs	r0, r3
   21cc8:	4b2f      	ldr	r3, [pc, #188]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21cca:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21ccc:	2397      	movs	r3, #151	; 0x97
   21cce:	18fb      	adds	r3, r7, r3
   21cd0:	22f4      	movs	r2, #244	; 0xf4
   21cd2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21cd4:	e0ad      	b.n	21e32 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   21cd6:	2384      	movs	r3, #132	; 0x84
   21cd8:	18fb      	adds	r3, r7, r3
   21cda:	681b      	ldr	r3, [r3, #0]
   21cdc:	1c98      	adds	r0, r3, #2
   21cde:	2388      	movs	r3, #136	; 0x88
   21ce0:	18fb      	adds	r3, r7, r3
   21ce2:	681b      	ldr	r3, [r3, #0]
   21ce4:	1c99      	adds	r1, r3, #2
   21ce6:	2388      	movs	r3, #136	; 0x88
   21ce8:	18fb      	adds	r3, r7, r3
   21cea:	681b      	ldr	r3, [r3, #0]
   21cec:	785b      	ldrb	r3, [r3, #1]
   21cee:	001a      	movs	r2, r3
   21cf0:	4b2e      	ldr	r3, [pc, #184]	; (21dac <m2m_wifi_connect_sc+0x3cc>)
   21cf2:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   21cf4:	2388      	movs	r3, #136	; 0x88
   21cf6:	18fb      	adds	r3, r7, r3
   21cf8:	681b      	ldr	r3, [r3, #0]
   21cfa:	785b      	ldrb	r3, [r3, #1]
   21cfc:	001a      	movs	r2, r3
   21cfe:	2384      	movs	r3, #132	; 0x84
   21d00:	18fb      	adds	r3, r7, r3
   21d02:	681b      	ldr	r3, [r3, #0]
   21d04:	189b      	adds	r3, r3, r2
   21d06:	2200      	movs	r2, #0
   21d08:	709a      	strb	r2, [r3, #2]
   21d0a:	e081      	b.n	21e10 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   21d0c:	230a      	movs	r3, #10
   21d0e:	18fb      	adds	r3, r7, r3
   21d10:	781b      	ldrb	r3, [r3, #0]
   21d12:	2b02      	cmp	r3, #2
   21d14:	d156      	bne.n	21dc4 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   21d16:	2382      	movs	r3, #130	; 0x82
   21d18:	18fc      	adds	r4, r7, r3
   21d1a:	687b      	ldr	r3, [r7, #4]
   21d1c:	0018      	movs	r0, r3
   21d1e:	4b1d      	ldr	r3, [pc, #116]	; (21d94 <m2m_wifi_connect_sc+0x3b4>)
   21d20:	4798      	blx	r3
   21d22:	0003      	movs	r3, r0
   21d24:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   21d26:	2382      	movs	r3, #130	; 0x82
   21d28:	18fb      	adds	r3, r7, r3
   21d2a:	881b      	ldrh	r3, [r3, #0]
   21d2c:	2b00      	cmp	r3, #0
   21d2e:	d004      	beq.n	21d3a <m2m_wifi_connect_sc+0x35a>
   21d30:	2382      	movs	r3, #130	; 0x82
   21d32:	18fb      	adds	r3, r7, r3
   21d34:	881b      	ldrh	r3, [r3, #0]
   21d36:	2b40      	cmp	r3, #64	; 0x40
   21d38:	d912      	bls.n	21d60 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   21d3a:	4a20      	ldr	r2, [pc, #128]	; (21dbc <m2m_wifi_connect_sc+0x3dc>)
   21d3c:	4910      	ldr	r1, [pc, #64]	; (21d80 <m2m_wifi_connect_sc+0x3a0>)
   21d3e:	4b11      	ldr	r3, [pc, #68]	; (21d84 <m2m_wifi_connect_sc+0x3a4>)
   21d40:	0018      	movs	r0, r3
   21d42:	4b11      	ldr	r3, [pc, #68]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21d44:	4798      	blx	r3
   21d46:	4b1e      	ldr	r3, [pc, #120]	; (21dc0 <m2m_wifi_connect_sc+0x3e0>)
   21d48:	0018      	movs	r0, r3
   21d4a:	4b0f      	ldr	r3, [pc, #60]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21d4c:	4798      	blx	r3
   21d4e:	4b10      	ldr	r3, [pc, #64]	; (21d90 <m2m_wifi_connect_sc+0x3b0>)
   21d50:	0018      	movs	r0, r3
   21d52:	4b0d      	ldr	r3, [pc, #52]	; (21d88 <m2m_wifi_connect_sc+0x3a8>)
   21d54:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21d56:	2397      	movs	r3, #151	; 0x97
   21d58:	18fb      	adds	r3, r7, r3
   21d5a:	22f4      	movs	r2, #244	; 0xf4
   21d5c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21d5e:	e068      	b.n	21e32 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   21d60:	238c      	movs	r3, #140	; 0x8c
   21d62:	18fb      	adds	r3, r7, r3
   21d64:	6818      	ldr	r0, [r3, #0]
   21d66:	2382      	movs	r3, #130	; 0x82
   21d68:	18fb      	adds	r3, r7, r3
   21d6a:	881b      	ldrh	r3, [r3, #0]
   21d6c:	3301      	adds	r3, #1
   21d6e:	001a      	movs	r2, r3
   21d70:	687b      	ldr	r3, [r7, #4]
   21d72:	0019      	movs	r1, r3
   21d74:	4b0d      	ldr	r3, [pc, #52]	; (21dac <m2m_wifi_connect_sc+0x3cc>)
   21d76:	4798      	blx	r3
   21d78:	e04a      	b.n	21e10 <m2m_wifi_connect_sc+0x430>
   21d7a:	46c0      	nop			; (mov r8, r8)
   21d7c:	0000021a 	.word	0x0000021a
   21d80:	000382ec 	.word	0x000382ec
   21d84:	00037f34 	.word	0x00037f34
   21d88:	0001dc99 	.word	0x0001dc99
   21d8c:	00038174 	.word	0x00038174
   21d90:	00037f30 	.word	0x00037f30
   21d94:	0002064f 	.word	0x0002064f
   21d98:	00000226 	.word	0x00000226
   21d9c:	00038188 	.word	0x00038188
   21da0:	00038198 	.word	0x00038198
   21da4:	00000239 	.word	0x00000239
   21da8:	000381ac 	.word	0x000381ac
   21dac:	000205d5 	.word	0x000205d5
   21db0:	000381b8 	.word	0x000381b8
   21db4:	00000257 	.word	0x00000257
   21db8:	000381d4 	.word	0x000381d4
   21dbc:	00000266 	.word	0x00000266
   21dc0:	000381f0 	.word	0x000381f0
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   21dc4:	230a      	movs	r3, #10
   21dc6:	18fb      	adds	r3, r7, r3
   21dc8:	781b      	ldrb	r3, [r3, #0]
   21dca:	2b04      	cmp	r3, #4
   21dcc:	d108      	bne.n	21de0 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   21dce:	238c      	movs	r3, #140	; 0x8c
   21dd0:	18fb      	adds	r3, r7, r3
   21dd2:	681b      	ldr	r3, [r3, #0]
   21dd4:	6879      	ldr	r1, [r7, #4]
   21dd6:	223e      	movs	r2, #62	; 0x3e
   21dd8:	0018      	movs	r0, r3
   21dda:	4b1a      	ldr	r3, [pc, #104]	; (21e44 <m2m_wifi_connect_sc+0x464>)
   21ddc:	4798      	blx	r3
   21dde:	e017      	b.n	21e10 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   21de0:	230a      	movs	r3, #10
   21de2:	18fb      	adds	r3, r7, r3
   21de4:	781b      	ldrb	r3, [r3, #0]
   21de6:	2b01      	cmp	r3, #1
   21de8:	d012      	beq.n	21e10 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   21dea:	4a17      	ldr	r2, [pc, #92]	; (21e48 <m2m_wifi_connect_sc+0x468>)
   21dec:	4917      	ldr	r1, [pc, #92]	; (21e4c <m2m_wifi_connect_sc+0x46c>)
   21dee:	4b18      	ldr	r3, [pc, #96]	; (21e50 <m2m_wifi_connect_sc+0x470>)
   21df0:	0018      	movs	r0, r3
   21df2:	4b18      	ldr	r3, [pc, #96]	; (21e54 <m2m_wifi_connect_sc+0x474>)
   21df4:	4798      	blx	r3
   21df6:	4b18      	ldr	r3, [pc, #96]	; (21e58 <m2m_wifi_connect_sc+0x478>)
   21df8:	0018      	movs	r0, r3
   21dfa:	4b16      	ldr	r3, [pc, #88]	; (21e54 <m2m_wifi_connect_sc+0x474>)
   21dfc:	4798      	blx	r3
   21dfe:	4b17      	ldr	r3, [pc, #92]	; (21e5c <m2m_wifi_connect_sc+0x47c>)
   21e00:	0018      	movs	r0, r3
   21e02:	4b14      	ldr	r3, [pc, #80]	; (21e54 <m2m_wifi_connect_sc+0x474>)
   21e04:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   21e06:	2397      	movs	r3, #151	; 0x97
   21e08:	18fb      	adds	r3, r7, r3
   21e0a:	22f4      	movs	r2, #244	; 0xf4
   21e0c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   21e0e:	e010      	b.n	21e32 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   21e10:	2397      	movs	r3, #151	; 0x97
   21e12:	18fc      	adds	r4, r7, r3
   21e14:	2314      	movs	r3, #20
   21e16:	18fa      	adds	r2, r7, r3
   21e18:	2300      	movs	r3, #0
   21e1a:	9302      	str	r3, [sp, #8]
   21e1c:	2300      	movs	r3, #0
   21e1e:	9301      	str	r3, [sp, #4]
   21e20:	2300      	movs	r3, #0
   21e22:	9300      	str	r3, [sp, #0]
   21e24:	236c      	movs	r3, #108	; 0x6c
   21e26:	2128      	movs	r1, #40	; 0x28
   21e28:	2001      	movs	r0, #1
   21e2a:	4d0d      	ldr	r5, [pc, #52]	; (21e60 <m2m_wifi_connect_sc+0x480>)
   21e2c:	47a8      	blx	r5
   21e2e:	0003      	movs	r3, r0
   21e30:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   21e32:	2397      	movs	r3, #151	; 0x97
   21e34:	18fb      	adds	r3, r7, r3
   21e36:	781b      	ldrb	r3, [r3, #0]
   21e38:	b25b      	sxtb	r3, r3
}
   21e3a:	0018      	movs	r0, r3
   21e3c:	46bd      	mov	sp, r7
   21e3e:	b026      	add	sp, #152	; 0x98
   21e40:	bdb0      	pop	{r4, r5, r7, pc}
   21e42:	46c0      	nop			; (mov r8, r8)
   21e44:	000205d5 	.word	0x000205d5
   21e48:	00000276 	.word	0x00000276
   21e4c:	000382ec 	.word	0x000382ec
   21e50:	00037f34 	.word	0x00037f34
   21e54:	0001dc99 	.word	0x0001dc99
   21e58:	0003820c 	.word	0x0003820c
   21e5c:	00037f30 	.word	0x00037f30
   21e60:	00020871 	.word	0x00020871

00021e64 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   21e64:	b580      	push	{r7, lr}
   21e66:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   21e68:	2300      	movs	r3, #0
}
   21e6a:	0018      	movs	r0, r3
   21e6c:	46bd      	mov	sp, r7
   21e6e:	bd80      	pop	{r7, pc}

00021e70 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   21e70:	b590      	push	{r4, r7, lr}
   21e72:	b087      	sub	sp, #28
   21e74:	af00      	add	r7, sp, #0
   21e76:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21e78:	2317      	movs	r3, #23
   21e7a:	18fb      	adds	r3, r7, r3
   21e7c:	2200      	movs	r2, #0
   21e7e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   21e80:	687b      	ldr	r3, [r7, #4]
   21e82:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   21e84:	693b      	ldr	r3, [r7, #16]
   21e86:	2280      	movs	r2, #128	; 0x80
   21e88:	0052      	lsls	r2, r2, #1
   21e8a:	4313      	orrs	r3, r2
   21e8c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   21e8e:	693a      	ldr	r2, [r7, #16]
   21e90:	23a5      	movs	r3, #165	; 0xa5
   21e92:	015b      	lsls	r3, r3, #5
   21e94:	0011      	movs	r1, r2
   21e96:	0018      	movs	r0, r3
   21e98:	4b12      	ldr	r3, [pc, #72]	; (21ee4 <chip_apply_conf+0x74>)
   21e9a:	4798      	blx	r3
		if(val32 != 0) {		
   21e9c:	693b      	ldr	r3, [r7, #16]
   21e9e:	2b00      	cmp	r3, #0
   21ea0:	d018      	beq.n	21ed4 <chip_apply_conf+0x64>
			uint32 reg = 0;
   21ea2:	2300      	movs	r3, #0
   21ea4:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   21ea6:	2317      	movs	r3, #23
   21ea8:	18fc      	adds	r4, r7, r3
   21eaa:	230c      	movs	r3, #12
   21eac:	18fa      	adds	r2, r7, r3
   21eae:	23a5      	movs	r3, #165	; 0xa5
   21eb0:	015b      	lsls	r3, r3, #5
   21eb2:	0011      	movs	r1, r2
   21eb4:	0018      	movs	r0, r3
   21eb6:	4b0c      	ldr	r3, [pc, #48]	; (21ee8 <chip_apply_conf+0x78>)
   21eb8:	4798      	blx	r3
   21eba:	0003      	movs	r3, r0
   21ebc:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   21ebe:	2317      	movs	r3, #23
   21ec0:	18fb      	adds	r3, r7, r3
   21ec2:	781b      	ldrb	r3, [r3, #0]
   21ec4:	b25b      	sxtb	r3, r3
   21ec6:	2b00      	cmp	r3, #0
   21ec8:	d1e1      	bne.n	21e8e <chip_apply_conf+0x1e>
				if(reg == val32)
   21eca:	68fa      	ldr	r2, [r7, #12]
   21ecc:	693b      	ldr	r3, [r7, #16]
   21ece:	429a      	cmp	r2, r3
   21ed0:	d002      	beq.n	21ed8 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   21ed2:	e7dc      	b.n	21e8e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   21ed4:	46c0      	nop			; (mov r8, r8)
   21ed6:	e000      	b.n	21eda <chip_apply_conf+0x6a>
					break;
   21ed8:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   21eda:	2300      	movs	r3, #0
}
   21edc:	0018      	movs	r0, r3
   21ede:	46bd      	mov	sp, r7
   21ee0:	b007      	add	sp, #28
   21ee2:	bd90      	pop	{r4, r7, pc}
   21ee4:	000226c5 	.word	0x000226c5
   21ee8:	000226a1 	.word	0x000226a1

00021eec <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   21eec:	b590      	push	{r4, r7, lr}
   21eee:	b083      	sub	sp, #12
   21ef0:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   21ef2:	2300      	movs	r3, #0
   21ef4:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   21ef6:	1dfb      	adds	r3, r7, #7
   21ef8:	2200      	movs	r2, #0
   21efa:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   21efc:	1dfc      	adds	r4, r7, #7
   21efe:	003b      	movs	r3, r7
   21f00:	4a24      	ldr	r2, [pc, #144]	; (21f94 <enable_interrupts+0xa8>)
   21f02:	0019      	movs	r1, r3
   21f04:	0010      	movs	r0, r2
   21f06:	4b24      	ldr	r3, [pc, #144]	; (21f98 <enable_interrupts+0xac>)
   21f08:	4798      	blx	r3
   21f0a:	0003      	movs	r3, r0
   21f0c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21f0e:	1dfb      	adds	r3, r7, #7
   21f10:	781b      	ldrb	r3, [r3, #0]
   21f12:	b25b      	sxtb	r3, r3
   21f14:	2b00      	cmp	r3, #0
   21f16:	d131      	bne.n	21f7c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   21f18:	683b      	ldr	r3, [r7, #0]
   21f1a:	2280      	movs	r2, #128	; 0x80
   21f1c:	0052      	lsls	r2, r2, #1
   21f1e:	4313      	orrs	r3, r2
   21f20:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   21f22:	683b      	ldr	r3, [r7, #0]
   21f24:	1dfc      	adds	r4, r7, #7
   21f26:	4a1b      	ldr	r2, [pc, #108]	; (21f94 <enable_interrupts+0xa8>)
   21f28:	0019      	movs	r1, r3
   21f2a:	0010      	movs	r0, r2
   21f2c:	4b1b      	ldr	r3, [pc, #108]	; (21f9c <enable_interrupts+0xb0>)
   21f2e:	4798      	blx	r3
   21f30:	0003      	movs	r3, r0
   21f32:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21f34:	1dfb      	adds	r3, r7, #7
   21f36:	781b      	ldrb	r3, [r3, #0]
   21f38:	b25b      	sxtb	r3, r3
   21f3a:	2b00      	cmp	r3, #0
   21f3c:	d120      	bne.n	21f80 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   21f3e:	1dfc      	adds	r4, r7, #7
   21f40:	003a      	movs	r2, r7
   21f42:	23d0      	movs	r3, #208	; 0xd0
   21f44:	015b      	lsls	r3, r3, #5
   21f46:	0011      	movs	r1, r2
   21f48:	0018      	movs	r0, r3
   21f4a:	4b13      	ldr	r3, [pc, #76]	; (21f98 <enable_interrupts+0xac>)
   21f4c:	4798      	blx	r3
   21f4e:	0003      	movs	r3, r0
   21f50:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   21f52:	1dfb      	adds	r3, r7, #7
   21f54:	781b      	ldrb	r3, [r3, #0]
   21f56:	b25b      	sxtb	r3, r3
   21f58:	2b00      	cmp	r3, #0
   21f5a:	d113      	bne.n	21f84 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   21f5c:	683b      	ldr	r3, [r7, #0]
   21f5e:	2280      	movs	r2, #128	; 0x80
   21f60:	0252      	lsls	r2, r2, #9
   21f62:	4313      	orrs	r3, r2
   21f64:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   21f66:	683a      	ldr	r2, [r7, #0]
   21f68:	1dfc      	adds	r4, r7, #7
   21f6a:	23d0      	movs	r3, #208	; 0xd0
   21f6c:	015b      	lsls	r3, r3, #5
   21f6e:	0011      	movs	r1, r2
   21f70:	0018      	movs	r0, r3
   21f72:	4b0a      	ldr	r3, [pc, #40]	; (21f9c <enable_interrupts+0xb0>)
   21f74:	4798      	blx	r3
   21f76:	0003      	movs	r3, r0
   21f78:	7023      	strb	r3, [r4, #0]
   21f7a:	e004      	b.n	21f86 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21f7c:	46c0      	nop			; (mov r8, r8)
   21f7e:	e002      	b.n	21f86 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21f80:	46c0      	nop			; (mov r8, r8)
   21f82:	e000      	b.n	21f86 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   21f84:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   21f86:	1dfb      	adds	r3, r7, #7
   21f88:	781b      	ldrb	r3, [r3, #0]
   21f8a:	b25b      	sxtb	r3, r3
}
   21f8c:	0018      	movs	r0, r3
   21f8e:	46bd      	mov	sp, r7
   21f90:	b003      	add	sp, #12
   21f92:	bd90      	pop	{r4, r7, pc}
   21f94:	00001408 	.word	0x00001408
   21f98:	000226a1 	.word	0x000226a1
   21f9c:	000226c5 	.word	0x000226c5

00021fa0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   21fa0:	b580      	push	{r7, lr}
   21fa2:	b082      	sub	sp, #8
   21fa4:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   21fa6:	4b32      	ldr	r3, [pc, #200]	; (22070 <nmi_get_chipid+0xd0>)
   21fa8:	681b      	ldr	r3, [r3, #0]
   21faa:	2b00      	cmp	r3, #0
   21fac:	d159      	bne.n	22062 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   21fae:	4a30      	ldr	r2, [pc, #192]	; (22070 <nmi_get_chipid+0xd0>)
   21fb0:	2380      	movs	r3, #128	; 0x80
   21fb2:	015b      	lsls	r3, r3, #5
   21fb4:	0011      	movs	r1, r2
   21fb6:	0018      	movs	r0, r3
   21fb8:	4b2e      	ldr	r3, [pc, #184]	; (22074 <nmi_get_chipid+0xd4>)
   21fba:	4798      	blx	r3
   21fbc:	1e03      	subs	r3, r0, #0
   21fbe:	d004      	beq.n	21fca <nmi_get_chipid+0x2a>
			chipid = 0;
   21fc0:	4b2b      	ldr	r3, [pc, #172]	; (22070 <nmi_get_chipid+0xd0>)
   21fc2:	2200      	movs	r2, #0
   21fc4:	601a      	str	r2, [r3, #0]
			return 0;
   21fc6:	2300      	movs	r3, #0
   21fc8:	e04d      	b.n	22066 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   21fca:	1d3b      	adds	r3, r7, #4
   21fcc:	4a2a      	ldr	r2, [pc, #168]	; (22078 <nmi_get_chipid+0xd8>)
   21fce:	0019      	movs	r1, r3
   21fd0:	0010      	movs	r0, r2
   21fd2:	4b28      	ldr	r3, [pc, #160]	; (22074 <nmi_get_chipid+0xd4>)
   21fd4:	4798      	blx	r3
   21fd6:	1e03      	subs	r3, r0, #0
   21fd8:	d004      	beq.n	21fe4 <nmi_get_chipid+0x44>
			chipid = 0;
   21fda:	4b25      	ldr	r3, [pc, #148]	; (22070 <nmi_get_chipid+0xd0>)
   21fdc:	2200      	movs	r2, #0
   21fde:	601a      	str	r2, [r3, #0]
			return 0;
   21fe0:	2300      	movs	r3, #0
   21fe2:	e040      	b.n	22066 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   21fe4:	4b22      	ldr	r3, [pc, #136]	; (22070 <nmi_get_chipid+0xd0>)
   21fe6:	681b      	ldr	r3, [r3, #0]
   21fe8:	4a24      	ldr	r2, [pc, #144]	; (2207c <nmi_get_chipid+0xdc>)
   21fea:	4293      	cmp	r3, r2
   21fec:	d106      	bne.n	21ffc <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   21fee:	687b      	ldr	r3, [r7, #4]
   21ff0:	2b01      	cmp	r3, #1
   21ff2:	d029      	beq.n	22048 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   21ff4:	4b1e      	ldr	r3, [pc, #120]	; (22070 <nmi_get_chipid+0xd0>)
   21ff6:	4a22      	ldr	r2, [pc, #136]	; (22080 <nmi_get_chipid+0xe0>)
   21ff8:	601a      	str	r2, [r3, #0]
   21ffa:	e025      	b.n	22048 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   21ffc:	4b1c      	ldr	r3, [pc, #112]	; (22070 <nmi_get_chipid+0xd0>)
   21ffe:	681b      	ldr	r3, [r3, #0]
   22000:	4a20      	ldr	r2, [pc, #128]	; (22084 <nmi_get_chipid+0xe4>)
   22002:	4293      	cmp	r3, r2
   22004:	d10d      	bne.n	22022 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   22006:	687b      	ldr	r3, [r7, #4]
   22008:	2b03      	cmp	r3, #3
   2200a:	d01d      	beq.n	22048 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2200c:	687b      	ldr	r3, [r7, #4]
   2200e:	2b04      	cmp	r3, #4
   22010:	d103      	bne.n	2201a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   22012:	4b17      	ldr	r3, [pc, #92]	; (22070 <nmi_get_chipid+0xd0>)
   22014:	4a1c      	ldr	r2, [pc, #112]	; (22088 <nmi_get_chipid+0xe8>)
   22016:	601a      	str	r2, [r3, #0]
   22018:	e016      	b.n	22048 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2201a:	4b15      	ldr	r3, [pc, #84]	; (22070 <nmi_get_chipid+0xd0>)
   2201c:	4a1b      	ldr	r2, [pc, #108]	; (2208c <nmi_get_chipid+0xec>)
   2201e:	601a      	str	r2, [r3, #0]
   22020:	e012      	b.n	22048 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   22022:	4b13      	ldr	r3, [pc, #76]	; (22070 <nmi_get_chipid+0xd0>)
   22024:	681b      	ldr	r3, [r3, #0]
   22026:	4a1a      	ldr	r2, [pc, #104]	; (22090 <nmi_get_chipid+0xf0>)
   22028:	4293      	cmp	r3, r2
   2202a:	d10d      	bne.n	22048 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   2202c:	4a10      	ldr	r2, [pc, #64]	; (22070 <nmi_get_chipid+0xd0>)
   2202e:	23ec      	movs	r3, #236	; 0xec
   22030:	039b      	lsls	r3, r3, #14
   22032:	0011      	movs	r1, r2
   22034:	0018      	movs	r0, r3
   22036:	4b0f      	ldr	r3, [pc, #60]	; (22074 <nmi_get_chipid+0xd4>)
   22038:	4798      	blx	r3
   2203a:	1e03      	subs	r3, r0, #0
   2203c:	d004      	beq.n	22048 <nmi_get_chipid+0xa8>
			chipid = 0;
   2203e:	4b0c      	ldr	r3, [pc, #48]	; (22070 <nmi_get_chipid+0xd0>)
   22040:	2200      	movs	r2, #0
   22042:	601a      	str	r2, [r3, #0]
			return 0;
   22044:	2300      	movs	r3, #0
   22046:	e00e      	b.n	22066 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   22048:	4b09      	ldr	r3, [pc, #36]	; (22070 <nmi_get_chipid+0xd0>)
   2204a:	681b      	ldr	r3, [r3, #0]
   2204c:	4a11      	ldr	r2, [pc, #68]	; (22094 <nmi_get_chipid+0xf4>)
   2204e:	401a      	ands	r2, r3
   22050:	4b07      	ldr	r3, [pc, #28]	; (22070 <nmi_get_chipid+0xd0>)
   22052:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   22054:	4b06      	ldr	r3, [pc, #24]	; (22070 <nmi_get_chipid+0xd0>)
   22056:	681b      	ldr	r3, [r3, #0]
   22058:	22a0      	movs	r2, #160	; 0xa0
   2205a:	02d2      	lsls	r2, r2, #11
   2205c:	431a      	orrs	r2, r3
   2205e:	4b04      	ldr	r3, [pc, #16]	; (22070 <nmi_get_chipid+0xd0>)
   22060:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   22062:	4b03      	ldr	r3, [pc, #12]	; (22070 <nmi_get_chipid+0xd0>)
   22064:	681b      	ldr	r3, [r3, #0]
}
   22066:	0018      	movs	r0, r3
   22068:	46bd      	mov	sp, r7
   2206a:	b002      	add	sp, #8
   2206c:	bd80      	pop	{r7, pc}
   2206e:	46c0      	nop			; (mov r8, r8)
   22070:	20003e94 	.word	0x20003e94
   22074:	000226a1 	.word	0x000226a1
   22078:	000013f4 	.word	0x000013f4
   2207c:	001002a0 	.word	0x001002a0
   22080:	001002a1 	.word	0x001002a1
   22084:	001002b0 	.word	0x001002b0
   22088:	001002b1 	.word	0x001002b1
   2208c:	001002b2 	.word	0x001002b2
   22090:	001000f0 	.word	0x001000f0
   22094:	fff0ffff 	.word	0xfff0ffff

00022098 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   22098:	b590      	push	{r4, r7, lr}
   2209a:	b083      	sub	sp, #12
   2209c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2209e:	1dfb      	adds	r3, r7, #7
   220a0:	2200      	movs	r2, #0
   220a2:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   220a4:	1dfc      	adds	r4, r7, #7
   220a6:	003b      	movs	r3, r7
   220a8:	0019      	movs	r1, r3
   220aa:	2010      	movs	r0, #16
   220ac:	4b2e      	ldr	r3, [pc, #184]	; (22168 <chip_sleep+0xd0>)
   220ae:	4798      	blx	r3
   220b0:	0003      	movs	r3, r0
   220b2:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   220b4:	1dfb      	adds	r3, r7, #7
   220b6:	781b      	ldrb	r3, [r3, #0]
   220b8:	b25b      	sxtb	r3, r3
   220ba:	2b00      	cmp	r3, #0
   220bc:	d145      	bne.n	2214a <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   220be:	683b      	ldr	r3, [r7, #0]
   220c0:	2201      	movs	r2, #1
   220c2:	4013      	ands	r3, r2
   220c4:	d000      	beq.n	220c8 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   220c6:	e7ed      	b.n	220a4 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   220c8:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   220ca:	1dfc      	adds	r4, r7, #7
   220cc:	003b      	movs	r3, r7
   220ce:	0019      	movs	r1, r3
   220d0:	2001      	movs	r0, #1
   220d2:	4b25      	ldr	r3, [pc, #148]	; (22168 <chip_sleep+0xd0>)
   220d4:	4798      	blx	r3
   220d6:	0003      	movs	r3, r0
   220d8:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   220da:	1dfb      	adds	r3, r7, #7
   220dc:	781b      	ldrb	r3, [r3, #0]
   220de:	b25b      	sxtb	r3, r3
   220e0:	2b00      	cmp	r3, #0
   220e2:	d134      	bne.n	2214e <chip_sleep+0xb6>
	if(reg & NBIT1)
   220e4:	683b      	ldr	r3, [r7, #0]
   220e6:	2202      	movs	r2, #2
   220e8:	4013      	ands	r3, r2
   220ea:	d010      	beq.n	2210e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   220ec:	683b      	ldr	r3, [r7, #0]
   220ee:	2202      	movs	r2, #2
   220f0:	4393      	bics	r3, r2
   220f2:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   220f4:	683b      	ldr	r3, [r7, #0]
   220f6:	1dfc      	adds	r4, r7, #7
   220f8:	0019      	movs	r1, r3
   220fa:	2001      	movs	r0, #1
   220fc:	4b1b      	ldr	r3, [pc, #108]	; (2216c <chip_sleep+0xd4>)
   220fe:	4798      	blx	r3
   22100:	0003      	movs	r3, r0
   22102:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   22104:	1dfb      	adds	r3, r7, #7
   22106:	781b      	ldrb	r3, [r3, #0]
   22108:	b25b      	sxtb	r3, r3
   2210a:	2b00      	cmp	r3, #0
   2210c:	d121      	bne.n	22152 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2210e:	1dfc      	adds	r4, r7, #7
   22110:	003b      	movs	r3, r7
   22112:	0019      	movs	r1, r3
   22114:	200b      	movs	r0, #11
   22116:	4b14      	ldr	r3, [pc, #80]	; (22168 <chip_sleep+0xd0>)
   22118:	4798      	blx	r3
   2211a:	0003      	movs	r3, r0
   2211c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2211e:	1dfb      	adds	r3, r7, #7
   22120:	781b      	ldrb	r3, [r3, #0]
   22122:	b25b      	sxtb	r3, r3
   22124:	2b00      	cmp	r3, #0
   22126:	d116      	bne.n	22156 <chip_sleep+0xbe>
	if(reg & NBIT0)
   22128:	683b      	ldr	r3, [r7, #0]
   2212a:	2201      	movs	r2, #1
   2212c:	4013      	ands	r3, r2
   2212e:	d013      	beq.n	22158 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   22130:	683b      	ldr	r3, [r7, #0]
   22132:	2201      	movs	r2, #1
   22134:	4393      	bics	r3, r2
   22136:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   22138:	683b      	ldr	r3, [r7, #0]
   2213a:	1dfc      	adds	r4, r7, #7
   2213c:	0019      	movs	r1, r3
   2213e:	200b      	movs	r0, #11
   22140:	4b0a      	ldr	r3, [pc, #40]	; (2216c <chip_sleep+0xd4>)
   22142:	4798      	blx	r3
   22144:	0003      	movs	r3, r0
   22146:	7023      	strb	r3, [r4, #0]
   22148:	e006      	b.n	22158 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2214a:	46c0      	nop			; (mov r8, r8)
   2214c:	e004      	b.n	22158 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2214e:	46c0      	nop			; (mov r8, r8)
   22150:	e002      	b.n	22158 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   22152:	46c0      	nop			; (mov r8, r8)
   22154:	e000      	b.n	22158 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   22156:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   22158:	1dfb      	adds	r3, r7, #7
   2215a:	781b      	ldrb	r3, [r3, #0]
   2215c:	b25b      	sxtb	r3, r3
}
   2215e:	0018      	movs	r0, r3
   22160:	46bd      	mov	sp, r7
   22162:	b003      	add	sp, #12
   22164:	bd90      	pop	{r4, r7, pc}
   22166:	46c0      	nop			; (mov r8, r8)
   22168:	000226a1 	.word	0x000226a1
   2216c:	000226c5 	.word	0x000226c5

00022170 <chip_wake>:
sint8 chip_wake(void)
{
   22170:	b590      	push	{r4, r7, lr}
   22172:	b085      	sub	sp, #20
   22174:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22176:	230f      	movs	r3, #15
   22178:	18fb      	adds	r3, r7, r3
   2217a:	2200      	movs	r2, #0
   2217c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   2217e:	2300      	movs	r3, #0
   22180:	607b      	str	r3, [r7, #4]
   22182:	2300      	movs	r3, #0
   22184:	603b      	str	r3, [r7, #0]
   22186:	2300      	movs	r3, #0
   22188:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2218a:	230f      	movs	r3, #15
   2218c:	18fc      	adds	r4, r7, r3
   2218e:	1d3b      	adds	r3, r7, #4
   22190:	0019      	movs	r1, r3
   22192:	200b      	movs	r0, #11
   22194:	4b4e      	ldr	r3, [pc, #312]	; (222d0 <chip_wake+0x160>)
   22196:	4798      	blx	r3
   22198:	0003      	movs	r3, r0
   2219a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   2219c:	230f      	movs	r3, #15
   2219e:	18fb      	adds	r3, r7, r3
   221a0:	781b      	ldrb	r3, [r3, #0]
   221a2:	b25b      	sxtb	r3, r3
   221a4:	2b00      	cmp	r3, #0
   221a6:	d000      	beq.n	221aa <chip_wake+0x3a>
   221a8:	e082      	b.n	222b0 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   221aa:	687b      	ldr	r3, [r7, #4]
   221ac:	2201      	movs	r2, #1
   221ae:	4013      	ands	r3, r2
   221b0:	d111      	bne.n	221d6 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   221b2:	687b      	ldr	r3, [r7, #4]
   221b4:	2201      	movs	r2, #1
   221b6:	4313      	orrs	r3, r2
   221b8:	220f      	movs	r2, #15
   221ba:	18bc      	adds	r4, r7, r2
   221bc:	0019      	movs	r1, r3
   221be:	200b      	movs	r0, #11
   221c0:	4b44      	ldr	r3, [pc, #272]	; (222d4 <chip_wake+0x164>)
   221c2:	4798      	blx	r3
   221c4:	0003      	movs	r3, r0
   221c6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   221c8:	230f      	movs	r3, #15
   221ca:	18fb      	adds	r3, r7, r3
   221cc:	781b      	ldrb	r3, [r3, #0]
   221ce:	b25b      	sxtb	r3, r3
   221d0:	2b00      	cmp	r3, #0
   221d2:	d000      	beq.n	221d6 <chip_wake+0x66>
   221d4:	e06e      	b.n	222b4 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   221d6:	230f      	movs	r3, #15
   221d8:	18fc      	adds	r4, r7, r3
   221da:	1d3b      	adds	r3, r7, #4
   221dc:	0019      	movs	r1, r3
   221de:	2001      	movs	r0, #1
   221e0:	4b3b      	ldr	r3, [pc, #236]	; (222d0 <chip_wake+0x160>)
   221e2:	4798      	blx	r3
   221e4:	0003      	movs	r3, r0
   221e6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   221e8:	230f      	movs	r3, #15
   221ea:	18fb      	adds	r3, r7, r3
   221ec:	781b      	ldrb	r3, [r3, #0]
   221ee:	b25b      	sxtb	r3, r3
   221f0:	2b00      	cmp	r3, #0
   221f2:	d161      	bne.n	222b8 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   221f4:	687b      	ldr	r3, [r7, #4]
   221f6:	2202      	movs	r2, #2
   221f8:	4013      	ands	r3, r2
   221fa:	d110      	bne.n	2221e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   221fc:	687b      	ldr	r3, [r7, #4]
   221fe:	2202      	movs	r2, #2
   22200:	4313      	orrs	r3, r2
   22202:	220f      	movs	r2, #15
   22204:	18bc      	adds	r4, r7, r2
   22206:	0019      	movs	r1, r3
   22208:	2001      	movs	r0, #1
   2220a:	4b32      	ldr	r3, [pc, #200]	; (222d4 <chip_wake+0x164>)
   2220c:	4798      	blx	r3
   2220e:	0003      	movs	r3, r0
   22210:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22212:	230f      	movs	r3, #15
   22214:	18fb      	adds	r3, r7, r3
   22216:	781b      	ldrb	r3, [r3, #0]
   22218:	b25b      	sxtb	r3, r3
   2221a:	2b00      	cmp	r3, #0
   2221c:	d14e      	bne.n	222bc <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2221e:	230f      	movs	r3, #15
   22220:	18fc      	adds	r4, r7, r3
   22222:	003b      	movs	r3, r7
   22224:	0019      	movs	r1, r3
   22226:	200f      	movs	r0, #15
   22228:	4b29      	ldr	r3, [pc, #164]	; (222d0 <chip_wake+0x160>)
   2222a:	4798      	blx	r3
   2222c:	0003      	movs	r3, r0
   2222e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   22230:	230f      	movs	r3, #15
   22232:	18fb      	adds	r3, r7, r3
   22234:	781b      	ldrb	r3, [r3, #0]
   22236:	b25b      	sxtb	r3, r3
   22238:	2b00      	cmp	r3, #0
   2223a:	d014      	beq.n	22266 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2223c:	23a8      	movs	r3, #168	; 0xa8
   2223e:	005a      	lsls	r2, r3, #1
   22240:	4925      	ldr	r1, [pc, #148]	; (222d8 <chip_wake+0x168>)
   22242:	4b26      	ldr	r3, [pc, #152]	; (222dc <chip_wake+0x16c>)
   22244:	0018      	movs	r0, r3
   22246:	4b26      	ldr	r3, [pc, #152]	; (222e0 <chip_wake+0x170>)
   22248:	4798      	blx	r3
   2224a:	230f      	movs	r3, #15
   2224c:	18fb      	adds	r3, r7, r3
   2224e:	2100      	movs	r1, #0
   22250:	5659      	ldrsb	r1, [r3, r1]
   22252:	683a      	ldr	r2, [r7, #0]
   22254:	4b23      	ldr	r3, [pc, #140]	; (222e4 <chip_wake+0x174>)
   22256:	0018      	movs	r0, r3
   22258:	4b21      	ldr	r3, [pc, #132]	; (222e0 <chip_wake+0x170>)
   2225a:	4798      	blx	r3
   2225c:	4b22      	ldr	r3, [pc, #136]	; (222e8 <chip_wake+0x178>)
   2225e:	0018      	movs	r0, r3
   22260:	4b1f      	ldr	r3, [pc, #124]	; (222e0 <chip_wake+0x170>)
   22262:	4798      	blx	r3
			goto _WAKE_EXIT;
   22264:	e02b      	b.n	222be <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   22266:	683b      	ldr	r3, [r7, #0]
   22268:	2204      	movs	r2, #4
   2226a:	4013      	ands	r3, r2
   2226c:	d11c      	bne.n	222a8 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   2226e:	2002      	movs	r0, #2
   22270:	4b1e      	ldr	r3, [pc, #120]	; (222ec <chip_wake+0x17c>)
   22272:	4798      	blx	r3
		trials++;
   22274:	68bb      	ldr	r3, [r7, #8]
   22276:	3301      	adds	r3, #1
   22278:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2227a:	68bb      	ldr	r3, [r7, #8]
   2227c:	2b04      	cmp	r3, #4
   2227e:	d9ce      	bls.n	2221e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   22280:	23ad      	movs	r3, #173	; 0xad
   22282:	005a      	lsls	r2, r3, #1
   22284:	4914      	ldr	r1, [pc, #80]	; (222d8 <chip_wake+0x168>)
   22286:	4b15      	ldr	r3, [pc, #84]	; (222dc <chip_wake+0x16c>)
   22288:	0018      	movs	r0, r3
   2228a:	4b15      	ldr	r3, [pc, #84]	; (222e0 <chip_wake+0x170>)
   2228c:	4798      	blx	r3
   2228e:	4b18      	ldr	r3, [pc, #96]	; (222f0 <chip_wake+0x180>)
   22290:	0018      	movs	r0, r3
   22292:	4b13      	ldr	r3, [pc, #76]	; (222e0 <chip_wake+0x170>)
   22294:	4798      	blx	r3
   22296:	4b14      	ldr	r3, [pc, #80]	; (222e8 <chip_wake+0x178>)
   22298:	0018      	movs	r0, r3
   2229a:	4b11      	ldr	r3, [pc, #68]	; (222e0 <chip_wake+0x170>)
   2229c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   2229e:	230f      	movs	r3, #15
   222a0:	18fb      	adds	r3, r7, r3
   222a2:	22fc      	movs	r2, #252	; 0xfc
   222a4:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   222a6:	e00a      	b.n	222be <chip_wake+0x14e>
			break;
   222a8:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   222aa:	4b12      	ldr	r3, [pc, #72]	; (222f4 <chip_wake+0x184>)
   222ac:	4798      	blx	r3
   222ae:	e006      	b.n	222be <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   222b0:	46c0      	nop			; (mov r8, r8)
   222b2:	e004      	b.n	222be <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   222b4:	46c0      	nop			; (mov r8, r8)
   222b6:	e002      	b.n	222be <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   222b8:	46c0      	nop			; (mov r8, r8)
   222ba:	e000      	b.n	222be <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   222bc:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   222be:	230f      	movs	r3, #15
   222c0:	18fb      	adds	r3, r7, r3
   222c2:	781b      	ldrb	r3, [r3, #0]
   222c4:	b25b      	sxtb	r3, r3
}
   222c6:	0018      	movs	r0, r3
   222c8:	46bd      	mov	sp, r7
   222ca:	b005      	add	sp, #20
   222cc:	bd90      	pop	{r4, r7, pc}
   222ce:	46c0      	nop			; (mov r8, r8)
   222d0:	000226a1 	.word	0x000226a1
   222d4:	000226c5 	.word	0x000226c5
   222d8:	0003838c 	.word	0x0003838c
   222dc:	00038300 	.word	0x00038300
   222e0:	0001dc99 	.word	0x0001dc99
   222e4:	00038314 	.word	0x00038314
   222e8:	0003832c 	.word	0x0003832c
   222ec:	0001fd31 	.word	0x0001fd31
   222f0:	00038330 	.word	0x00038330
   222f4:	00022661 	.word	0x00022661

000222f8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   222f8:	b580      	push	{r7, lr}
   222fa:	b088      	sub	sp, #32
   222fc:	af00      	add	r7, sp, #0
   222fe:	0002      	movs	r2, r0
   22300:	1dfb      	adds	r3, r7, #7
   22302:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22304:	2313      	movs	r3, #19
   22306:	18fb      	adds	r3, r7, r3
   22308:	2200      	movs	r2, #0
   2230a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   2230c:	2300      	movs	r3, #0
   2230e:	61fb      	str	r3, [r7, #28]
   22310:	2300      	movs	r3, #0
   22312:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22314:	2300      	movs	r3, #0
   22316:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   22318:	4b4a      	ldr	r3, [pc, #296]	; (22444 <wait_for_bootrom+0x14c>)
   2231a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2231c:	2300      	movs	r3, #0
   2231e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22320:	4b49      	ldr	r3, [pc, #292]	; (22448 <wait_for_bootrom+0x150>)
   22322:	0018      	movs	r0, r3
   22324:	4b49      	ldr	r3, [pc, #292]	; (2244c <wait_for_bootrom+0x154>)
   22326:	4798      	blx	r3
   22328:	0003      	movs	r3, r0
   2232a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2232c:	69fb      	ldr	r3, [r7, #28]
   2232e:	2b00      	cmp	r3, #0
   22330:	db03      	blt.n	2233a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   22332:	2001      	movs	r0, #1
   22334:	4b46      	ldr	r3, [pc, #280]	; (22450 <wait_for_bootrom+0x158>)
   22336:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22338:	e7f2      	b.n	22320 <wait_for_bootrom+0x28>
			break;
   2233a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   2233c:	4b45      	ldr	r3, [pc, #276]	; (22454 <wait_for_bootrom+0x15c>)
   2233e:	0018      	movs	r0, r3
   22340:	4b42      	ldr	r3, [pc, #264]	; (2244c <wait_for_bootrom+0x154>)
   22342:	4798      	blx	r3
   22344:	0003      	movs	r3, r0
   22346:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22348:	69fb      	ldr	r3, [r7, #28]
   2234a:	2201      	movs	r2, #1
   2234c:	4013      	ands	r3, r2
   2234e:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   22350:	69fb      	ldr	r3, [r7, #28]
   22352:	2b00      	cmp	r3, #0
   22354:	d112      	bne.n	2237c <wait_for_bootrom+0x84>
	{
		reg = 0;
   22356:	2300      	movs	r3, #0
   22358:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2235a:	e00b      	b.n	22374 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   2235c:	2001      	movs	r0, #1
   2235e:	4b3c      	ldr	r3, [pc, #240]	; (22450 <wait_for_bootrom+0x158>)
   22360:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   22362:	4b3d      	ldr	r3, [pc, #244]	; (22458 <wait_for_bootrom+0x160>)
   22364:	0018      	movs	r0, r3
   22366:	4b39      	ldr	r3, [pc, #228]	; (2244c <wait_for_bootrom+0x154>)
   22368:	4798      	blx	r3
   2236a:	0003      	movs	r3, r0
   2236c:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   2236e:	69bb      	ldr	r3, [r7, #24]
   22370:	3301      	adds	r3, #1
   22372:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   22374:	69fb      	ldr	r3, [r7, #28]
   22376:	4a39      	ldr	r2, [pc, #228]	; (2245c <wait_for_bootrom+0x164>)
   22378:	4293      	cmp	r3, r2
   2237a:	d1ef      	bne.n	2235c <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   2237c:	1dfb      	adds	r3, r7, #7
   2237e:	781b      	ldrb	r3, [r3, #0]
   22380:	2b02      	cmp	r3, #2
   22382:	d10d      	bne.n	223a0 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22384:	4a36      	ldr	r2, [pc, #216]	; (22460 <wait_for_bootrom+0x168>)
   22386:	4b37      	ldr	r3, [pc, #220]	; (22464 <wait_for_bootrom+0x16c>)
   22388:	0011      	movs	r1, r2
   2238a:	0018      	movs	r0, r3
   2238c:	4b36      	ldr	r3, [pc, #216]	; (22468 <wait_for_bootrom+0x170>)
   2238e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   22390:	2380      	movs	r3, #128	; 0x80
   22392:	035b      	lsls	r3, r3, #13
   22394:	4a35      	ldr	r2, [pc, #212]	; (2246c <wait_for_bootrom+0x174>)
   22396:	0019      	movs	r1, r3
   22398:	0010      	movs	r0, r2
   2239a:	4b33      	ldr	r3, [pc, #204]	; (22468 <wait_for_bootrom+0x170>)
   2239c:	4798      	blx	r3
   2239e:	e022      	b.n	223e6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   223a0:	1dfb      	adds	r3, r7, #7
   223a2:	781b      	ldrb	r3, [r3, #0]
   223a4:	2b03      	cmp	r3, #3
   223a6:	d10b      	bne.n	223c0 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   223a8:	4a2d      	ldr	r2, [pc, #180]	; (22460 <wait_for_bootrom+0x168>)
   223aa:	4b2e      	ldr	r3, [pc, #184]	; (22464 <wait_for_bootrom+0x16c>)
   223ac:	0011      	movs	r1, r2
   223ae:	0018      	movs	r0, r3
   223b0:	4b2d      	ldr	r3, [pc, #180]	; (22468 <wait_for_bootrom+0x170>)
   223b2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   223b4:	4b2d      	ldr	r3, [pc, #180]	; (2246c <wait_for_bootrom+0x174>)
   223b6:	2100      	movs	r1, #0
   223b8:	0018      	movs	r0, r3
   223ba:	4b2b      	ldr	r3, [pc, #172]	; (22468 <wait_for_bootrom+0x170>)
   223bc:	4798      	blx	r3
   223be:	e012      	b.n	223e6 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   223c0:	1dfb      	adds	r3, r7, #7
   223c2:	781b      	ldrb	r3, [r3, #0]
   223c4:	2b04      	cmp	r3, #4
   223c6:	d108      	bne.n	223da <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   223c8:	2380      	movs	r3, #128	; 0x80
   223ca:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   223cc:	68fb      	ldr	r3, [r7, #12]
   223ce:	4a27      	ldr	r2, [pc, #156]	; (2246c <wait_for_bootrom+0x174>)
   223d0:	0019      	movs	r1, r3
   223d2:	0010      	movs	r0, r2
   223d4:	4b24      	ldr	r3, [pc, #144]	; (22468 <wait_for_bootrom+0x170>)
   223d6:	4798      	blx	r3
   223d8:	e005      	b.n	223e6 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   223da:	68fb      	ldr	r3, [r7, #12]
   223dc:	4a23      	ldr	r2, [pc, #140]	; (2246c <wait_for_bootrom+0x174>)
   223de:	0019      	movs	r1, r3
   223e0:	0010      	movs	r0, r2
   223e2:	4b21      	ldr	r3, [pc, #132]	; (22468 <wait_for_bootrom+0x170>)
   223e4:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   223e6:	4b22      	ldr	r3, [pc, #136]	; (22470 <wait_for_bootrom+0x178>)
   223e8:	4798      	blx	r3
   223ea:	0003      	movs	r3, r0
   223ec:	051b      	lsls	r3, r3, #20
   223ee:	0d1b      	lsrs	r3, r3, #20
   223f0:	4a20      	ldr	r2, [pc, #128]	; (22474 <wait_for_bootrom+0x17c>)
   223f2:	4293      	cmp	r3, r2
   223f4:	d906      	bls.n	22404 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   223f6:	697b      	ldr	r3, [r7, #20]
   223f8:	2202      	movs	r2, #2
   223fa:	4313      	orrs	r3, r2
   223fc:	0018      	movs	r0, r3
   223fe:	4b1e      	ldr	r3, [pc, #120]	; (22478 <wait_for_bootrom+0x180>)
   22400:	4798      	blx	r3
   22402:	e003      	b.n	2240c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   22404:	697b      	ldr	r3, [r7, #20]
   22406:	0018      	movs	r0, r3
   22408:	4b1b      	ldr	r3, [pc, #108]	; (22478 <wait_for_bootrom+0x180>)
   2240a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   2240c:	4b1b      	ldr	r3, [pc, #108]	; (2247c <wait_for_bootrom+0x184>)
   2240e:	0018      	movs	r0, r3
   22410:	4b1b      	ldr	r3, [pc, #108]	; (22480 <wait_for_bootrom+0x188>)
   22412:	4798      	blx	r3
   22414:	68fa      	ldr	r2, [r7, #12]
   22416:	4b1b      	ldr	r3, [pc, #108]	; (22484 <wait_for_bootrom+0x18c>)
   22418:	0011      	movs	r1, r2
   2241a:	0018      	movs	r0, r3
   2241c:	4b18      	ldr	r3, [pc, #96]	; (22480 <wait_for_bootrom+0x188>)
   2241e:	4798      	blx	r3
   22420:	4b19      	ldr	r3, [pc, #100]	; (22488 <wait_for_bootrom+0x190>)
   22422:	0018      	movs	r0, r3
   22424:	4b16      	ldr	r3, [pc, #88]	; (22480 <wait_for_bootrom+0x188>)
   22426:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   22428:	4a18      	ldr	r2, [pc, #96]	; (2248c <wait_for_bootrom+0x194>)
   2242a:	4b0b      	ldr	r3, [pc, #44]	; (22458 <wait_for_bootrom+0x160>)
   2242c:	0011      	movs	r1, r2
   2242e:	0018      	movs	r0, r3
   22430:	4b0d      	ldr	r3, [pc, #52]	; (22468 <wait_for_bootrom+0x170>)
   22432:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22434:	2313      	movs	r3, #19
   22436:	18fb      	adds	r3, r7, r3
   22438:	781b      	ldrb	r3, [r3, #0]
   2243a:	b25b      	sxtb	r3, r3
}
   2243c:	0018      	movs	r0, r3
   2243e:	46bd      	mov	sp, r7
   22440:	b008      	add	sp, #32
   22442:	bd80      	pop	{r7, pc}
   22444:	13301354 	.word	0x13301354
   22448:	00001014 	.word	0x00001014
   2244c:	00022681 	.word	0x00022681
   22450:	0001fd31 	.word	0x0001fd31
   22454:	000207bc 	.word	0x000207bc
   22458:	000c000c 	.word	0x000c000c
   2245c:	10add09e 	.word	0x10add09e
   22460:	3c1cd57d 	.word	0x3c1cd57d
   22464:	000207ac 	.word	0x000207ac
   22468:	000226c5 	.word	0x000226c5
   2246c:	0000108c 	.word	0x0000108c
   22470:	00021fa1 	.word	0x00021fa1
   22474:	0000039f 	.word	0x0000039f
   22478:	00021e71 	.word	0x00021e71
   2247c:	0003834c 	.word	0x0003834c
   22480:	0001dc99 	.word	0x0001dc99
   22484:	00038358 	.word	0x00038358
   22488:	0003832c 	.word	0x0003832c
   2248c:	ef522f61 	.word	0xef522f61

00022490 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   22490:	b580      	push	{r7, lr}
   22492:	b088      	sub	sp, #32
   22494:	af00      	add	r7, sp, #0
   22496:	0002      	movs	r2, r0
   22498:	1dfb      	adds	r3, r7, #7
   2249a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2249c:	231f      	movs	r3, #31
   2249e:	18fb      	adds	r3, r7, r3
   224a0:	2200      	movs	r2, #0
   224a2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   224a4:	2300      	movs	r3, #0
   224a6:	61bb      	str	r3, [r7, #24]
   224a8:	2300      	movs	r3, #0
   224aa:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   224ac:	2301      	movs	r3, #1
   224ae:	425b      	negs	r3, r3
   224b0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   224b2:	4b1d      	ldr	r3, [pc, #116]	; (22528 <wait_for_firmware_start+0x98>)
   224b4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   224b6:	4b1d      	ldr	r3, [pc, #116]	; (2252c <wait_for_firmware_start+0x9c>)
   224b8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   224ba:	1dfb      	adds	r3, r7, #7
   224bc:	781b      	ldrb	r3, [r3, #0]
   224be:	2b02      	cmp	r3, #2
   224c0:	d003      	beq.n	224ca <wait_for_firmware_start+0x3a>
   224c2:	1dfb      	adds	r3, r7, #7
   224c4:	781b      	ldrb	r3, [r3, #0]
   224c6:	2b03      	cmp	r3, #3
   224c8:	d119      	bne.n	224fe <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   224ca:	4b19      	ldr	r3, [pc, #100]	; (22530 <wait_for_firmware_start+0xa0>)
   224cc:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   224ce:	4b19      	ldr	r3, [pc, #100]	; (22534 <wait_for_firmware_start+0xa4>)
   224d0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   224d2:	e014      	b.n	224fe <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   224d4:	2002      	movs	r0, #2
   224d6:	4b18      	ldr	r3, [pc, #96]	; (22538 <wait_for_firmware_start+0xa8>)
   224d8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   224da:	68fb      	ldr	r3, [r7, #12]
   224dc:	0018      	movs	r0, r3
   224de:	4b17      	ldr	r3, [pc, #92]	; (2253c <wait_for_firmware_start+0xac>)
   224e0:	4798      	blx	r3
   224e2:	0003      	movs	r3, r0
   224e4:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   224e6:	697b      	ldr	r3, [r7, #20]
   224e8:	3301      	adds	r3, #1
   224ea:	617b      	str	r3, [r7, #20]
   224ec:	697a      	ldr	r2, [r7, #20]
   224ee:	693b      	ldr	r3, [r7, #16]
   224f0:	429a      	cmp	r2, r3
   224f2:	d304      	bcc.n	224fe <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   224f4:	231f      	movs	r3, #31
   224f6:	18fb      	adds	r3, r7, r3
   224f8:	22fb      	movs	r2, #251	; 0xfb
   224fa:	701a      	strb	r2, [r3, #0]
			goto ERR;
   224fc:	e00c      	b.n	22518 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   224fe:	68ba      	ldr	r2, [r7, #8]
   22500:	69bb      	ldr	r3, [r7, #24]
   22502:	429a      	cmp	r2, r3
   22504:	d1e6      	bne.n	224d4 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   22506:	68bb      	ldr	r3, [r7, #8]
   22508:	4a08      	ldr	r2, [pc, #32]	; (2252c <wait_for_firmware_start+0x9c>)
   2250a:	4293      	cmp	r3, r2
   2250c:	d104      	bne.n	22518 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2250e:	4b06      	ldr	r3, [pc, #24]	; (22528 <wait_for_firmware_start+0x98>)
   22510:	2100      	movs	r1, #0
   22512:	0018      	movs	r0, r3
   22514:	4b0a      	ldr	r3, [pc, #40]	; (22540 <wait_for_firmware_start+0xb0>)
   22516:	4798      	blx	r3
	}
ERR:
	return ret;
   22518:	231f      	movs	r3, #31
   2251a:	18fb      	adds	r3, r7, r3
   2251c:	781b      	ldrb	r3, [r3, #0]
   2251e:	b25b      	sxtb	r3, r3
}
   22520:	0018      	movs	r0, r3
   22522:	46bd      	mov	sp, r7
   22524:	b008      	add	sp, #32
   22526:	bd80      	pop	{r7, pc}
   22528:	0000108c 	.word	0x0000108c
   2252c:	02532636 	.word	0x02532636
   22530:	000207ac 	.word	0x000207ac
   22534:	d75dc1c3 	.word	0xd75dc1c3
   22538:	0001fd31 	.word	0x0001fd31
   2253c:	00022681 	.word	0x00022681
   22540:	000226c5 	.word	0x000226c5

00022544 <chip_deinit>:

sint8 chip_deinit(void)
{
   22544:	b590      	push	{r4, r7, lr}
   22546:	b083      	sub	sp, #12
   22548:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2254a:	2300      	movs	r3, #0
   2254c:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2254e:	1dfc      	adds	r4, r7, #7
   22550:	003a      	movs	r2, r7
   22552:	23a0      	movs	r3, #160	; 0xa0
   22554:	015b      	lsls	r3, r3, #5
   22556:	0011      	movs	r1, r2
   22558:	0018      	movs	r0, r3
   2255a:	4b20      	ldr	r3, [pc, #128]	; (225dc <chip_deinit+0x98>)
   2255c:	4798      	blx	r3
   2255e:	0003      	movs	r3, r0
   22560:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22562:	1dfb      	adds	r3, r7, #7
   22564:	781b      	ldrb	r3, [r3, #0]
   22566:	b25b      	sxtb	r3, r3
   22568:	2b00      	cmp	r3, #0
   2256a:	d00e      	beq.n	2258a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   2256c:	4a1c      	ldr	r2, [pc, #112]	; (225e0 <chip_deinit+0x9c>)
   2256e:	491d      	ldr	r1, [pc, #116]	; (225e4 <chip_deinit+0xa0>)
   22570:	4b1d      	ldr	r3, [pc, #116]	; (225e8 <chip_deinit+0xa4>)
   22572:	0018      	movs	r0, r3
   22574:	4b1d      	ldr	r3, [pc, #116]	; (225ec <chip_deinit+0xa8>)
   22576:	4798      	blx	r3
   22578:	4b1d      	ldr	r3, [pc, #116]	; (225f0 <chip_deinit+0xac>)
   2257a:	0018      	movs	r0, r3
   2257c:	4b1b      	ldr	r3, [pc, #108]	; (225ec <chip_deinit+0xa8>)
   2257e:	4798      	blx	r3
   22580:	4b1c      	ldr	r3, [pc, #112]	; (225f4 <chip_deinit+0xb0>)
   22582:	0018      	movs	r0, r3
   22584:	4b19      	ldr	r3, [pc, #100]	; (225ec <chip_deinit+0xa8>)
   22586:	4798      	blx	r3
		goto ERR1;
   22588:	e021      	b.n	225ce <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2258a:	683b      	ldr	r3, [r7, #0]
   2258c:	4a1a      	ldr	r2, [pc, #104]	; (225f8 <chip_deinit+0xb4>)
   2258e:	4013      	ands	r3, r2
   22590:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   22592:	683a      	ldr	r2, [r7, #0]
   22594:	1dfc      	adds	r4, r7, #7
   22596:	23a0      	movs	r3, #160	; 0xa0
   22598:	015b      	lsls	r3, r3, #5
   2259a:	0011      	movs	r1, r2
   2259c:	0018      	movs	r0, r3
   2259e:	4b17      	ldr	r3, [pc, #92]	; (225fc <chip_deinit+0xb8>)
   225a0:	4798      	blx	r3
   225a2:	0003      	movs	r3, r0
   225a4:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   225a6:	1dfb      	adds	r3, r7, #7
   225a8:	781b      	ldrb	r3, [r3, #0]
   225aa:	b25b      	sxtb	r3, r3
   225ac:	2b00      	cmp	r3, #0
   225ae:	d00e      	beq.n	225ce <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   225b0:	4a13      	ldr	r2, [pc, #76]	; (22600 <chip_deinit+0xbc>)
   225b2:	490c      	ldr	r1, [pc, #48]	; (225e4 <chip_deinit+0xa0>)
   225b4:	4b0c      	ldr	r3, [pc, #48]	; (225e8 <chip_deinit+0xa4>)
   225b6:	0018      	movs	r0, r3
   225b8:	4b0c      	ldr	r3, [pc, #48]	; (225ec <chip_deinit+0xa8>)
   225ba:	4798      	blx	r3
   225bc:	4b0c      	ldr	r3, [pc, #48]	; (225f0 <chip_deinit+0xac>)
   225be:	0018      	movs	r0, r3
   225c0:	4b0a      	ldr	r3, [pc, #40]	; (225ec <chip_deinit+0xa8>)
   225c2:	4798      	blx	r3
   225c4:	4b0b      	ldr	r3, [pc, #44]	; (225f4 <chip_deinit+0xb0>)
   225c6:	0018      	movs	r0, r3
   225c8:	4b08      	ldr	r3, [pc, #32]	; (225ec <chip_deinit+0xa8>)
   225ca:	4798      	blx	r3
		goto ERR1;
   225cc:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   225ce:	1dfb      	adds	r3, r7, #7
   225d0:	781b      	ldrb	r3, [r3, #0]
   225d2:	b25b      	sxtb	r3, r3
}
   225d4:	0018      	movs	r0, r3
   225d6:	46bd      	mov	sp, r7
   225d8:	b003      	add	sp, #12
   225da:	bd90      	pop	{r4, r7, pc}
   225dc:	000226a1 	.word	0x000226a1
   225e0:	00000201 	.word	0x00000201
   225e4:	00038398 	.word	0x00038398
   225e8:	00038300 	.word	0x00038300
   225ec:	0001dc99 	.word	0x0001dc99
   225f0:	00038370 	.word	0x00038370
   225f4:	0003832c 	.word	0x0003832c
   225f8:	fffffbff 	.word	0xfffffbff
   225fc:	000226c5 	.word	0x000226c5
   22600:	00000207 	.word	0x00000207

00022604 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   22604:	b590      	push	{r4, r7, lr}
   22606:	b085      	sub	sp, #20
   22608:	af00      	add	r7, sp, #0
   2260a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2260c:	230f      	movs	r3, #15
   2260e:	18fb      	adds	r3, r7, r3
   22610:	2200      	movs	r2, #0
   22612:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   22614:	230f      	movs	r3, #15
   22616:	18fc      	adds	r4, r7, r3
   22618:	687b      	ldr	r3, [r7, #4]
   2261a:	0018      	movs	r0, r3
   2261c:	4b05      	ldr	r3, [pc, #20]	; (22634 <nm_bus_iface_init+0x30>)
   2261e:	4798      	blx	r3
   22620:	0003      	movs	r3, r0
   22622:	7023      	strb	r3, [r4, #0]
	return ret;
   22624:	230f      	movs	r3, #15
   22626:	18fb      	adds	r3, r7, r3
   22628:	781b      	ldrb	r3, [r3, #0]
   2262a:	b25b      	sxtb	r3, r3
}
   2262c:	0018      	movs	r0, r3
   2262e:	46bd      	mov	sp, r7
   22630:	b005      	add	sp, #20
   22632:	bd90      	pop	{r4, r7, pc}
   22634:	000203ed 	.word	0x000203ed

00022638 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22638:	b590      	push	{r4, r7, lr}
   2263a:	b083      	sub	sp, #12
   2263c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2263e:	1dfb      	adds	r3, r7, #7
   22640:	2200      	movs	r2, #0
   22642:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22644:	1dfc      	adds	r4, r7, #7
   22646:	4b05      	ldr	r3, [pc, #20]	; (2265c <nm_bus_iface_deinit+0x24>)
   22648:	4798      	blx	r3
   2264a:	0003      	movs	r3, r0
   2264c:	7023      	strb	r3, [r4, #0]

	return ret;
   2264e:	1dfb      	adds	r3, r7, #7
   22650:	781b      	ldrb	r3, [r3, #0]
   22652:	b25b      	sxtb	r3, r3
}
   22654:	0018      	movs	r0, r3
   22656:	46bd      	mov	sp, r7
   22658:	b003      	add	sp, #12
   2265a:	bd90      	pop	{r4, r7, pc}
   2265c:	00020565 	.word	0x00020565

00022660 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   22660:	b580      	push	{r7, lr}
   22662:	b082      	sub	sp, #8
   22664:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22666:	1dfb      	adds	r3, r7, #7
   22668:	2200      	movs	r2, #0
   2266a:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   2266c:	4b03      	ldr	r3, [pc, #12]	; (2267c <nm_bus_reset+0x1c>)
   2266e:	4798      	blx	r3
   22670:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   22672:	0018      	movs	r0, r3
   22674:	46bd      	mov	sp, r7
   22676:	b002      	add	sp, #8
   22678:	bd80      	pop	{r7, pc}
   2267a:	46c0      	nop			; (mov r8, r8)
   2267c:	0002448d 	.word	0x0002448d

00022680 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   22680:	b580      	push	{r7, lr}
   22682:	b082      	sub	sp, #8
   22684:	af00      	add	r7, sp, #0
   22686:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22688:	687b      	ldr	r3, [r7, #4]
   2268a:	0018      	movs	r0, r3
   2268c:	4b03      	ldr	r3, [pc, #12]	; (2269c <nm_read_reg+0x1c>)
   2268e:	4798      	blx	r3
   22690:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   22692:	0018      	movs	r0, r3
   22694:	46bd      	mov	sp, r7
   22696:	b002      	add	sp, #8
   22698:	bd80      	pop	{r7, pc}
   2269a:	46c0      	nop			; (mov r8, r8)
   2269c:	00024621 	.word	0x00024621

000226a0 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   226a0:	b580      	push	{r7, lr}
   226a2:	b082      	sub	sp, #8
   226a4:	af00      	add	r7, sp, #0
   226a6:	6078      	str	r0, [r7, #4]
   226a8:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   226aa:	683a      	ldr	r2, [r7, #0]
   226ac:	687b      	ldr	r3, [r7, #4]
   226ae:	0011      	movs	r1, r2
   226b0:	0018      	movs	r0, r3
   226b2:	4b03      	ldr	r3, [pc, #12]	; (226c0 <nm_read_reg_with_ret+0x20>)
   226b4:	4798      	blx	r3
   226b6:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   226b8:	0018      	movs	r0, r3
   226ba:	46bd      	mov	sp, r7
   226bc:	b002      	add	sp, #8
   226be:	bd80      	pop	{r7, pc}
   226c0:	00024645 	.word	0x00024645

000226c4 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   226c4:	b580      	push	{r7, lr}
   226c6:	b082      	sub	sp, #8
   226c8:	af00      	add	r7, sp, #0
   226ca:	6078      	str	r0, [r7, #4]
   226cc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   226ce:	683a      	ldr	r2, [r7, #0]
   226d0:	687b      	ldr	r3, [r7, #4]
   226d2:	0011      	movs	r1, r2
   226d4:	0018      	movs	r0, r3
   226d6:	4b03      	ldr	r3, [pc, #12]	; (226e4 <nm_write_reg+0x20>)
   226d8:	4798      	blx	r3
   226da:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   226dc:	0018      	movs	r0, r3
   226de:	46bd      	mov	sp, r7
   226e0:	b002      	add	sp, #8
   226e2:	bd80      	pop	{r7, pc}
   226e4:	00024695 	.word	0x00024695

000226e8 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   226e8:	b580      	push	{r7, lr}
   226ea:	b084      	sub	sp, #16
   226ec:	af00      	add	r7, sp, #0
   226ee:	60f8      	str	r0, [r7, #12]
   226f0:	60b9      	str	r1, [r7, #8]
   226f2:	1dbb      	adds	r3, r7, #6
   226f4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   226f6:	1dbb      	adds	r3, r7, #6
   226f8:	881a      	ldrh	r2, [r3, #0]
   226fa:	68b9      	ldr	r1, [r7, #8]
   226fc:	68fb      	ldr	r3, [r7, #12]
   226fe:	0018      	movs	r0, r3
   22700:	4b03      	ldr	r3, [pc, #12]	; (22710 <p_nm_read_block+0x28>)
   22702:	4798      	blx	r3
   22704:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22706:	0018      	movs	r0, r3
   22708:	46bd      	mov	sp, r7
   2270a:	b004      	add	sp, #16
   2270c:	bd80      	pop	{r7, pc}
   2270e:	46c0      	nop			; (mov r8, r8)
   22710:	000246e5 	.word	0x000246e5

00022714 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22714:	b580      	push	{r7, lr}
   22716:	b086      	sub	sp, #24
   22718:	af00      	add	r7, sp, #0
   2271a:	60f8      	str	r0, [r7, #12]
   2271c:	60b9      	str	r1, [r7, #8]
   2271e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22720:	4b2d      	ldr	r3, [pc, #180]	; (227d8 <nm_read_block+0xc4>)
   22722:	881a      	ldrh	r2, [r3, #0]
   22724:	2310      	movs	r3, #16
   22726:	18fb      	adds	r3, r7, r3
   22728:	3a08      	subs	r2, #8
   2272a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2272c:	2300      	movs	r3, #0
   2272e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22730:	2313      	movs	r3, #19
   22732:	18fb      	adds	r3, r7, r3
   22734:	2200      	movs	r2, #0
   22736:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22738:	2310      	movs	r3, #16
   2273a:	18fb      	adds	r3, r7, r3
   2273c:	881a      	ldrh	r2, [r3, #0]
   2273e:	687b      	ldr	r3, [r7, #4]
   22740:	429a      	cmp	r2, r3
   22742:	d313      	bcc.n	2276c <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22744:	68ba      	ldr	r2, [r7, #8]
   22746:	697b      	ldr	r3, [r7, #20]
   22748:	18d1      	adds	r1, r2, r3
   2274a:	687b      	ldr	r3, [r7, #4]
   2274c:	b29a      	uxth	r2, r3
   2274e:	68fb      	ldr	r3, [r7, #12]
   22750:	0018      	movs	r0, r3
   22752:	4b22      	ldr	r3, [pc, #136]	; (227dc <nm_read_block+0xc8>)
   22754:	4798      	blx	r3
   22756:	0003      	movs	r3, r0
   22758:	b2da      	uxtb	r2, r3
   2275a:	2313      	movs	r3, #19
   2275c:	18fb      	adds	r3, r7, r3
   2275e:	781b      	ldrb	r3, [r3, #0]
   22760:	18d3      	adds	r3, r2, r3
   22762:	b2da      	uxtb	r2, r3
   22764:	2313      	movs	r3, #19
   22766:	18fb      	adds	r3, r7, r3
   22768:	701a      	strb	r2, [r3, #0]
			break;
   2276a:	e02d      	b.n	227c8 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   2276c:	68ba      	ldr	r2, [r7, #8]
   2276e:	697b      	ldr	r3, [r7, #20]
   22770:	18d1      	adds	r1, r2, r3
   22772:	2310      	movs	r3, #16
   22774:	18fb      	adds	r3, r7, r3
   22776:	881a      	ldrh	r2, [r3, #0]
   22778:	68fb      	ldr	r3, [r7, #12]
   2277a:	0018      	movs	r0, r3
   2277c:	4b17      	ldr	r3, [pc, #92]	; (227dc <nm_read_block+0xc8>)
   2277e:	4798      	blx	r3
   22780:	0003      	movs	r3, r0
   22782:	b2da      	uxtb	r2, r3
   22784:	2313      	movs	r3, #19
   22786:	18fb      	adds	r3, r7, r3
   22788:	781b      	ldrb	r3, [r3, #0]
   2278a:	18d3      	adds	r3, r2, r3
   2278c:	b2da      	uxtb	r2, r3
   2278e:	2313      	movs	r3, #19
   22790:	18fb      	adds	r3, r7, r3
   22792:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   22794:	2313      	movs	r3, #19
   22796:	18fb      	adds	r3, r7, r3
   22798:	781b      	ldrb	r3, [r3, #0]
   2279a:	b25b      	sxtb	r3, r3
   2279c:	2b00      	cmp	r3, #0
   2279e:	d112      	bne.n	227c6 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   227a0:	2310      	movs	r3, #16
   227a2:	18fb      	adds	r3, r7, r3
   227a4:	881b      	ldrh	r3, [r3, #0]
   227a6:	687a      	ldr	r2, [r7, #4]
   227a8:	1ad3      	subs	r3, r2, r3
   227aa:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   227ac:	2310      	movs	r3, #16
   227ae:	18fb      	adds	r3, r7, r3
   227b0:	881b      	ldrh	r3, [r3, #0]
   227b2:	697a      	ldr	r2, [r7, #20]
   227b4:	18d3      	adds	r3, r2, r3
   227b6:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   227b8:	2310      	movs	r3, #16
   227ba:	18fb      	adds	r3, r7, r3
   227bc:	881b      	ldrh	r3, [r3, #0]
   227be:	68fa      	ldr	r2, [r7, #12]
   227c0:	18d3      	adds	r3, r2, r3
   227c2:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   227c4:	e7b8      	b.n	22738 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   227c6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   227c8:	2313      	movs	r3, #19
   227ca:	18fb      	adds	r3, r7, r3
   227cc:	781b      	ldrb	r3, [r3, #0]
   227ce:	b25b      	sxtb	r3, r3
}
   227d0:	0018      	movs	r0, r3
   227d2:	46bd      	mov	sp, r7
   227d4:	b006      	add	sp, #24
   227d6:	bd80      	pop	{r7, pc}
   227d8:	200000c8 	.word	0x200000c8
   227dc:	000226e9 	.word	0x000226e9

000227e0 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   227e0:	b580      	push	{r7, lr}
   227e2:	b084      	sub	sp, #16
   227e4:	af00      	add	r7, sp, #0
   227e6:	60f8      	str	r0, [r7, #12]
   227e8:	60b9      	str	r1, [r7, #8]
   227ea:	1dbb      	adds	r3, r7, #6
   227ec:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   227ee:	1dbb      	adds	r3, r7, #6
   227f0:	881a      	ldrh	r2, [r3, #0]
   227f2:	68b9      	ldr	r1, [r7, #8]
   227f4:	68fb      	ldr	r3, [r7, #12]
   227f6:	0018      	movs	r0, r3
   227f8:	4b03      	ldr	r3, [pc, #12]	; (22808 <p_nm_write_block+0x28>)
   227fa:	4798      	blx	r3
   227fc:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   227fe:	0018      	movs	r0, r3
   22800:	46bd      	mov	sp, r7
   22802:	b004      	add	sp, #16
   22804:	bd80      	pop	{r7, pc}
   22806:	46c0      	nop			; (mov r8, r8)
   22808:	0002473d 	.word	0x0002473d

0002280c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   2280c:	b580      	push	{r7, lr}
   2280e:	b086      	sub	sp, #24
   22810:	af00      	add	r7, sp, #0
   22812:	60f8      	str	r0, [r7, #12]
   22814:	60b9      	str	r1, [r7, #8]
   22816:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22818:	4b2d      	ldr	r3, [pc, #180]	; (228d0 <nm_write_block+0xc4>)
   2281a:	881a      	ldrh	r2, [r3, #0]
   2281c:	2310      	movs	r3, #16
   2281e:	18fb      	adds	r3, r7, r3
   22820:	3a08      	subs	r2, #8
   22822:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22824:	2300      	movs	r3, #0
   22826:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22828:	2313      	movs	r3, #19
   2282a:	18fb      	adds	r3, r7, r3
   2282c:	2200      	movs	r2, #0
   2282e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22830:	2310      	movs	r3, #16
   22832:	18fb      	adds	r3, r7, r3
   22834:	881a      	ldrh	r2, [r3, #0]
   22836:	687b      	ldr	r3, [r7, #4]
   22838:	429a      	cmp	r2, r3
   2283a:	d313      	bcc.n	22864 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   2283c:	68ba      	ldr	r2, [r7, #8]
   2283e:	697b      	ldr	r3, [r7, #20]
   22840:	18d1      	adds	r1, r2, r3
   22842:	687b      	ldr	r3, [r7, #4]
   22844:	b29a      	uxth	r2, r3
   22846:	68fb      	ldr	r3, [r7, #12]
   22848:	0018      	movs	r0, r3
   2284a:	4b22      	ldr	r3, [pc, #136]	; (228d4 <nm_write_block+0xc8>)
   2284c:	4798      	blx	r3
   2284e:	0003      	movs	r3, r0
   22850:	b2da      	uxtb	r2, r3
   22852:	2313      	movs	r3, #19
   22854:	18fb      	adds	r3, r7, r3
   22856:	781b      	ldrb	r3, [r3, #0]
   22858:	18d3      	adds	r3, r2, r3
   2285a:	b2da      	uxtb	r2, r3
   2285c:	2313      	movs	r3, #19
   2285e:	18fb      	adds	r3, r7, r3
   22860:	701a      	strb	r2, [r3, #0]
			break;
   22862:	e02d      	b.n	228c0 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22864:	68ba      	ldr	r2, [r7, #8]
   22866:	697b      	ldr	r3, [r7, #20]
   22868:	18d1      	adds	r1, r2, r3
   2286a:	2310      	movs	r3, #16
   2286c:	18fb      	adds	r3, r7, r3
   2286e:	881a      	ldrh	r2, [r3, #0]
   22870:	68fb      	ldr	r3, [r7, #12]
   22872:	0018      	movs	r0, r3
   22874:	4b17      	ldr	r3, [pc, #92]	; (228d4 <nm_write_block+0xc8>)
   22876:	4798      	blx	r3
   22878:	0003      	movs	r3, r0
   2287a:	b2da      	uxtb	r2, r3
   2287c:	2313      	movs	r3, #19
   2287e:	18fb      	adds	r3, r7, r3
   22880:	781b      	ldrb	r3, [r3, #0]
   22882:	18d3      	adds	r3, r2, r3
   22884:	b2da      	uxtb	r2, r3
   22886:	2313      	movs	r3, #19
   22888:	18fb      	adds	r3, r7, r3
   2288a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   2288c:	2313      	movs	r3, #19
   2288e:	18fb      	adds	r3, r7, r3
   22890:	781b      	ldrb	r3, [r3, #0]
   22892:	b25b      	sxtb	r3, r3
   22894:	2b00      	cmp	r3, #0
   22896:	d112      	bne.n	228be <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   22898:	2310      	movs	r3, #16
   2289a:	18fb      	adds	r3, r7, r3
   2289c:	881b      	ldrh	r3, [r3, #0]
   2289e:	687a      	ldr	r2, [r7, #4]
   228a0:	1ad3      	subs	r3, r2, r3
   228a2:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   228a4:	2310      	movs	r3, #16
   228a6:	18fb      	adds	r3, r7, r3
   228a8:	881b      	ldrh	r3, [r3, #0]
   228aa:	697a      	ldr	r2, [r7, #20]
   228ac:	18d3      	adds	r3, r2, r3
   228ae:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   228b0:	2310      	movs	r3, #16
   228b2:	18fb      	adds	r3, r7, r3
   228b4:	881b      	ldrh	r3, [r3, #0]
   228b6:	68fa      	ldr	r2, [r7, #12]
   228b8:	18d3      	adds	r3, r2, r3
   228ba:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   228bc:	e7b8      	b.n	22830 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   228be:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   228c0:	2313      	movs	r3, #19
   228c2:	18fb      	adds	r3, r7, r3
   228c4:	781b      	ldrb	r3, [r3, #0]
   228c6:	b25b      	sxtb	r3, r3
}
   228c8:	0018      	movs	r0, r3
   228ca:	46bd      	mov	sp, r7
   228cc:	b006      	add	sp, #24
   228ce:	bd80      	pop	{r7, pc}
   228d0:	200000c8 	.word	0x200000c8
   228d4:	000227e1 	.word	0x000227e1

000228d8 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   228d8:	b590      	push	{r4, r7, lr}
   228da:	b089      	sub	sp, #36	; 0x24
   228dc:	af00      	add	r7, sp, #0
   228de:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   228e0:	2300      	movs	r3, #0
   228e2:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   228e4:	231f      	movs	r3, #31
   228e6:	18fb      	adds	r3, r7, r3
   228e8:	2200      	movs	r2, #0
   228ea:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   228ec:	230c      	movs	r3, #12
   228ee:	18fb      	adds	r3, r7, r3
   228f0:	0018      	movs	r0, r3
   228f2:	2308      	movs	r3, #8
   228f4:	001a      	movs	r2, r3
   228f6:	2100      	movs	r1, #0
   228f8:	4b64      	ldr	r3, [pc, #400]	; (22a8c <nm_get_firmware_full_info+0x1b4>)
   228fa:	4798      	blx	r3
	if (pstrRev != NULL)
   228fc:	687b      	ldr	r3, [r7, #4]
   228fe:	2b00      	cmp	r3, #0
   22900:	d100      	bne.n	22904 <nm_get_firmware_full_info+0x2c>
   22902:	e0ba      	b.n	22a7a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   22904:	687b      	ldr	r3, [r7, #4]
   22906:	2228      	movs	r2, #40	; 0x28
   22908:	2100      	movs	r1, #0
   2290a:	0018      	movs	r0, r3
   2290c:	4b60      	ldr	r3, [pc, #384]	; (22a90 <nm_get_firmware_full_info+0x1b8>)
   2290e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   22910:	231f      	movs	r3, #31
   22912:	18fc      	adds	r4, r7, r3
   22914:	2314      	movs	r3, #20
   22916:	18fb      	adds	r3, r7, r3
   22918:	4a5e      	ldr	r2, [pc, #376]	; (22a94 <nm_get_firmware_full_info+0x1bc>)
   2291a:	0019      	movs	r1, r3
   2291c:	0010      	movs	r0, r2
   2291e:	4b5e      	ldr	r3, [pc, #376]	; (22a98 <nm_get_firmware_full_info+0x1c0>)
   22920:	4798      	blx	r3
   22922:	0003      	movs	r3, r0
   22924:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   22926:	231f      	movs	r3, #31
   22928:	18fb      	adds	r3, r7, r3
   2292a:	781b      	ldrb	r3, [r3, #0]
   2292c:	b25b      	sxtb	r3, r3
   2292e:	2b00      	cmp	r3, #0
   22930:	d000      	beq.n	22934 <nm_get_firmware_full_info+0x5c>
   22932:	e0a2      	b.n	22a7a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   22934:	697b      	ldr	r3, [r7, #20]
   22936:	2b00      	cmp	r3, #0
   22938:	d100      	bne.n	2293c <nm_get_firmware_full_info+0x64>
   2293a:	e09a      	b.n	22a72 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   2293c:	697b      	ldr	r3, [r7, #20]
   2293e:	22c0      	movs	r2, #192	; 0xc0
   22940:	0292      	lsls	r2, r2, #10
   22942:	4313      	orrs	r3, r2
   22944:	221f      	movs	r2, #31
   22946:	18bc      	adds	r4, r7, r2
   22948:	220c      	movs	r2, #12
   2294a:	18b9      	adds	r1, r7, r2
   2294c:	2208      	movs	r2, #8
   2294e:	0018      	movs	r0, r3
   22950:	4b52      	ldr	r3, [pc, #328]	; (22a9c <nm_get_firmware_full_info+0x1c4>)
   22952:	4798      	blx	r3
   22954:	0003      	movs	r3, r0
   22956:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   22958:	231f      	movs	r3, #31
   2295a:	18fb      	adds	r3, r7, r3
   2295c:	781b      	ldrb	r3, [r3, #0]
   2295e:	b25b      	sxtb	r3, r3
   22960:	2b00      	cmp	r3, #0
   22962:	d000      	beq.n	22966 <nm_get_firmware_full_info+0x8e>
   22964:	e089      	b.n	22a7a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   22966:	230c      	movs	r3, #12
   22968:	18fb      	adds	r3, r7, r3
   2296a:	685b      	ldr	r3, [r3, #4]
   2296c:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   2296e:	697b      	ldr	r3, [r7, #20]
   22970:	041b      	lsls	r3, r3, #16
   22972:	0c1b      	lsrs	r3, r3, #16
   22974:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   22976:	697b      	ldr	r3, [r7, #20]
   22978:	2b00      	cmp	r3, #0
   2297a:	d100      	bne.n	2297e <nm_get_firmware_full_info+0xa6>
   2297c:	e074      	b.n	22a68 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   2297e:	697b      	ldr	r3, [r7, #20]
   22980:	22c0      	movs	r2, #192	; 0xc0
   22982:	0292      	lsls	r2, r2, #10
   22984:	4313      	orrs	r3, r2
   22986:	221f      	movs	r2, #31
   22988:	18bc      	adds	r4, r7, r2
   2298a:	6879      	ldr	r1, [r7, #4]
   2298c:	2228      	movs	r2, #40	; 0x28
   2298e:	0018      	movs	r0, r3
   22990:	4b42      	ldr	r3, [pc, #264]	; (22a9c <nm_get_firmware_full_info+0x1c4>)
   22992:	4798      	blx	r3
   22994:	0003      	movs	r3, r0
   22996:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   22998:	231f      	movs	r3, #31
   2299a:	18fb      	adds	r3, r7, r3
   2299c:	781b      	ldrb	r3, [r3, #0]
   2299e:	b25b      	sxtb	r3, r3
   229a0:	2b00      	cmp	r3, #0
   229a2:	d16a      	bne.n	22a7a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   229a4:	687b      	ldr	r3, [r7, #4]
   229a6:	791b      	ldrb	r3, [r3, #4]
   229a8:	021b      	lsls	r3, r3, #8
   229aa:	b21a      	sxth	r2, r3
   229ac:	687b      	ldr	r3, [r7, #4]
   229ae:	795b      	ldrb	r3, [r3, #5]
   229b0:	011b      	lsls	r3, r3, #4
   229b2:	b21b      	sxth	r3, r3
   229b4:	21ff      	movs	r1, #255	; 0xff
   229b6:	400b      	ands	r3, r1
   229b8:	b21b      	sxth	r3, r3
   229ba:	4313      	orrs	r3, r2
   229bc:	b21a      	sxth	r2, r3
   229be:	687b      	ldr	r3, [r7, #4]
   229c0:	799b      	ldrb	r3, [r3, #6]
   229c2:	b21b      	sxth	r3, r3
   229c4:	210f      	movs	r1, #15
   229c6:	400b      	ands	r3, r1
   229c8:	b21b      	sxth	r3, r3
   229ca:	4313      	orrs	r3, r2
   229cc:	b21a      	sxth	r2, r3
   229ce:	231c      	movs	r3, #28
   229d0:	18fb      	adds	r3, r7, r3
   229d2:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   229d4:	231a      	movs	r3, #26
   229d6:	18fb      	adds	r3, r7, r3
   229d8:	4a31      	ldr	r2, [pc, #196]	; (22aa0 <nm_get_firmware_full_info+0x1c8>)
   229da:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   229dc:	687b      	ldr	r3, [r7, #4]
   229de:	79db      	ldrb	r3, [r3, #7]
   229e0:	021b      	lsls	r3, r3, #8
   229e2:	b21a      	sxth	r2, r3
   229e4:	687b      	ldr	r3, [r7, #4]
   229e6:	7a1b      	ldrb	r3, [r3, #8]
   229e8:	011b      	lsls	r3, r3, #4
   229ea:	b21b      	sxth	r3, r3
   229ec:	21ff      	movs	r1, #255	; 0xff
   229ee:	400b      	ands	r3, r1
   229f0:	b21b      	sxth	r3, r3
   229f2:	4313      	orrs	r3, r2
   229f4:	b21a      	sxth	r2, r3
   229f6:	687b      	ldr	r3, [r7, #4]
   229f8:	7a5b      	ldrb	r3, [r3, #9]
   229fa:	b21b      	sxth	r3, r3
   229fc:	210f      	movs	r1, #15
   229fe:	400b      	ands	r3, r1
   22a00:	b21b      	sxth	r3, r3
   22a02:	4313      	orrs	r3, r2
   22a04:	b21a      	sxth	r2, r3
   22a06:	2318      	movs	r3, #24
   22a08:	18fb      	adds	r3, r7, r3
   22a0a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   22a0c:	231c      	movs	r3, #28
   22a0e:	18fb      	adds	r3, r7, r3
   22a10:	881b      	ldrh	r3, [r3, #0]
   22a12:	2b00      	cmp	r3, #0
   22a14:	d009      	beq.n	22a2a <nm_get_firmware_full_info+0x152>
   22a16:	2318      	movs	r3, #24
   22a18:	18fb      	adds	r3, r7, r3
   22a1a:	881b      	ldrh	r3, [r3, #0]
   22a1c:	2b00      	cmp	r3, #0
   22a1e:	d004      	beq.n	22a2a <nm_get_firmware_full_info+0x152>
   22a20:	2318      	movs	r3, #24
   22a22:	18fb      	adds	r3, r7, r3
   22a24:	881b      	ldrh	r3, [r3, #0]
   22a26:	2b00      	cmp	r3, #0
   22a28:	d104      	bne.n	22a34 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   22a2a:	231f      	movs	r3, #31
   22a2c:	18fb      	adds	r3, r7, r3
   22a2e:	22f4      	movs	r2, #244	; 0xf4
   22a30:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22a32:	e022      	b.n	22a7a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   22a34:	231a      	movs	r3, #26
   22a36:	18fa      	adds	r2, r7, r3
   22a38:	2318      	movs	r3, #24
   22a3a:	18fb      	adds	r3, r7, r3
   22a3c:	8812      	ldrh	r2, [r2, #0]
   22a3e:	881b      	ldrh	r3, [r3, #0]
   22a40:	429a      	cmp	r2, r3
   22a42:	d204      	bcs.n	22a4e <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   22a44:	231f      	movs	r3, #31
   22a46:	18fb      	adds	r3, r7, r3
   22a48:	22f3      	movs	r2, #243	; 0xf3
   22a4a:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22a4c:	e015      	b.n	22a7a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   22a4e:	231a      	movs	r3, #26
   22a50:	18fa      	adds	r2, r7, r3
   22a52:	231c      	movs	r3, #28
   22a54:	18fb      	adds	r3, r7, r3
   22a56:	8812      	ldrh	r2, [r2, #0]
   22a58:	881b      	ldrh	r3, [r3, #0]
   22a5a:	429a      	cmp	r2, r3
   22a5c:	d90d      	bls.n	22a7a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   22a5e:	231f      	movs	r3, #31
   22a60:	18fb      	adds	r3, r7, r3
   22a62:	22f3      	movs	r2, #243	; 0xf3
   22a64:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   22a66:	e008      	b.n	22a7a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   22a68:	231f      	movs	r3, #31
   22a6a:	18fb      	adds	r3, r7, r3
   22a6c:	22f4      	movs	r2, #244	; 0xf4
   22a6e:	701a      	strb	r2, [r3, #0]
   22a70:	e003      	b.n	22a7a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   22a72:	231f      	movs	r3, #31
   22a74:	18fb      	adds	r3, r7, r3
   22a76:	22f4      	movs	r2, #244	; 0xf4
   22a78:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   22a7a:	231f      	movs	r3, #31
   22a7c:	18fb      	adds	r3, r7, r3
   22a7e:	781b      	ldrb	r3, [r3, #0]
   22a80:	b25b      	sxtb	r3, r3
}
   22a82:	0018      	movs	r0, r3
   22a84:	46bd      	mov	sp, r7
   22a86:	b009      	add	sp, #36	; 0x24
   22a88:	bd90      	pop	{r4, r7, pc}
   22a8a:	46c0      	nop			; (mov r8, r8)
   22a8c:	0003438b 	.word	0x0003438b
   22a90:	00020611 	.word	0x00020611
   22a94:	000c0008 	.word	0x000c0008
   22a98:	000226a1 	.word	0x000226a1
   22a9c:	00022715 	.word	0x00022715
   22aa0:	00001354 	.word	0x00001354

00022aa4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   22aa4:	b590      	push	{r4, r7, lr}
   22aa6:	b085      	sub	sp, #20
   22aa8:	af00      	add	r7, sp, #0
   22aaa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22aac:	230f      	movs	r3, #15
   22aae:	18fb      	adds	r3, r7, r3
   22ab0:	2200      	movs	r2, #0
   22ab2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   22ab4:	687b      	ldr	r3, [r7, #4]
   22ab6:	2b00      	cmp	r3, #0
   22ab8:	d013      	beq.n	22ae2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   22aba:	230e      	movs	r3, #14
   22abc:	18fb      	adds	r3, r7, r3
   22abe:	687a      	ldr	r2, [r7, #4]
   22ac0:	7812      	ldrb	r2, [r2, #0]
   22ac2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   22ac4:	230e      	movs	r3, #14
   22ac6:	18fb      	adds	r3, r7, r3
   22ac8:	781b      	ldrb	r3, [r3, #0]
   22aca:	2b00      	cmp	r3, #0
   22acc:	d004      	beq.n	22ad8 <nm_drv_init+0x34>
   22ace:	230e      	movs	r3, #14
   22ad0:	18fb      	adds	r3, r7, r3
   22ad2:	781b      	ldrb	r3, [r3, #0]
   22ad4:	2b04      	cmp	r3, #4
   22ad6:	d908      	bls.n	22aea <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   22ad8:	230e      	movs	r3, #14
   22ada:	18fb      	adds	r3, r7, r3
   22adc:	2201      	movs	r2, #1
   22ade:	701a      	strb	r2, [r3, #0]
   22ae0:	e003      	b.n	22aea <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   22ae2:	230e      	movs	r3, #14
   22ae4:	18fb      	adds	r3, r7, r3
   22ae6:	2201      	movs	r2, #1
   22ae8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   22aea:	230f      	movs	r3, #15
   22aec:	18fc      	adds	r4, r7, r3
   22aee:	2000      	movs	r0, #0
   22af0:	4b41      	ldr	r3, [pc, #260]	; (22bf8 <nm_drv_init+0x154>)
   22af2:	4798      	blx	r3
   22af4:	0003      	movs	r3, r0
   22af6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22af8:	230f      	movs	r3, #15
   22afa:	18fb      	adds	r3, r7, r3
   22afc:	781b      	ldrb	r3, [r3, #0]
   22afe:	b25b      	sxtb	r3, r3
   22b00:	2b00      	cmp	r3, #0
   22b02:	d00f      	beq.n	22b24 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   22b04:	2390      	movs	r3, #144	; 0x90
   22b06:	005a      	lsls	r2, r3, #1
   22b08:	493c      	ldr	r1, [pc, #240]	; (22bfc <nm_drv_init+0x158>)
   22b0a:	4b3d      	ldr	r3, [pc, #244]	; (22c00 <nm_drv_init+0x15c>)
   22b0c:	0018      	movs	r0, r3
   22b0e:	4b3d      	ldr	r3, [pc, #244]	; (22c04 <nm_drv_init+0x160>)
   22b10:	4798      	blx	r3
   22b12:	4b3d      	ldr	r3, [pc, #244]	; (22c08 <nm_drv_init+0x164>)
   22b14:	0018      	movs	r0, r3
   22b16:	4b3b      	ldr	r3, [pc, #236]	; (22c04 <nm_drv_init+0x160>)
   22b18:	4798      	blx	r3
   22b1a:	4b3c      	ldr	r3, [pc, #240]	; (22c0c <nm_drv_init+0x168>)
   22b1c:	0018      	movs	r0, r3
   22b1e:	4b39      	ldr	r3, [pc, #228]	; (22c04 <nm_drv_init+0x160>)
   22b20:	4798      	blx	r3
		goto ERR1;
   22b22:	e061      	b.n	22be8 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   22b24:	4b3a      	ldr	r3, [pc, #232]	; (22c10 <nm_drv_init+0x16c>)
   22b26:	0018      	movs	r0, r3
   22b28:	4b36      	ldr	r3, [pc, #216]	; (22c04 <nm_drv_init+0x160>)
   22b2a:	4798      	blx	r3
   22b2c:	4b39      	ldr	r3, [pc, #228]	; (22c14 <nm_drv_init+0x170>)
   22b2e:	4798      	blx	r3
   22b30:	0002      	movs	r2, r0
   22b32:	4b39      	ldr	r3, [pc, #228]	; (22c18 <nm_drv_init+0x174>)
   22b34:	0011      	movs	r1, r2
   22b36:	0018      	movs	r0, r3
   22b38:	4b32      	ldr	r3, [pc, #200]	; (22c04 <nm_drv_init+0x160>)
   22b3a:	4798      	blx	r3
   22b3c:	4b33      	ldr	r3, [pc, #204]	; (22c0c <nm_drv_init+0x168>)
   22b3e:	0018      	movs	r0, r3
   22b40:	4b30      	ldr	r3, [pc, #192]	; (22c04 <nm_drv_init+0x160>)
   22b42:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   22b44:	4b35      	ldr	r3, [pc, #212]	; (22c1c <nm_drv_init+0x178>)
   22b46:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   22b48:	230f      	movs	r3, #15
   22b4a:	18fc      	adds	r4, r7, r3
   22b4c:	230e      	movs	r3, #14
   22b4e:	18fb      	adds	r3, r7, r3
   22b50:	781b      	ldrb	r3, [r3, #0]
   22b52:	0018      	movs	r0, r3
   22b54:	4b32      	ldr	r3, [pc, #200]	; (22c20 <nm_drv_init+0x17c>)
   22b56:	4798      	blx	r3
   22b58:	0003      	movs	r3, r0
   22b5a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b5c:	230f      	movs	r3, #15
   22b5e:	18fb      	adds	r3, r7, r3
   22b60:	781b      	ldrb	r3, [r3, #0]
   22b62:	b25b      	sxtb	r3, r3
   22b64:	2b00      	cmp	r3, #0
   22b66:	d13a      	bne.n	22bde <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   22b68:	230f      	movs	r3, #15
   22b6a:	18fc      	adds	r4, r7, r3
   22b6c:	230e      	movs	r3, #14
   22b6e:	18fb      	adds	r3, r7, r3
   22b70:	781b      	ldrb	r3, [r3, #0]
   22b72:	0018      	movs	r0, r3
   22b74:	4b2b      	ldr	r3, [pc, #172]	; (22c24 <nm_drv_init+0x180>)
   22b76:	4798      	blx	r3
   22b78:	0003      	movs	r3, r0
   22b7a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22b7c:	230f      	movs	r3, #15
   22b7e:	18fb      	adds	r3, r7, r3
   22b80:	781b      	ldrb	r3, [r3, #0]
   22b82:	b25b      	sxtb	r3, r3
   22b84:	2b00      	cmp	r3, #0
   22b86:	d12c      	bne.n	22be2 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   22b88:	230e      	movs	r3, #14
   22b8a:	18fb      	adds	r3, r7, r3
   22b8c:	781b      	ldrb	r3, [r3, #0]
   22b8e:	2b02      	cmp	r3, #2
   22b90:	d02a      	beq.n	22be8 <nm_drv_init+0x144>
   22b92:	230e      	movs	r3, #14
   22b94:	18fb      	adds	r3, r7, r3
   22b96:	781b      	ldrb	r3, [r3, #0]
   22b98:	2b03      	cmp	r3, #3
   22b9a:	d025      	beq.n	22be8 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   22b9c:	230f      	movs	r3, #15
   22b9e:	18fc      	adds	r4, r7, r3
   22ba0:	4b21      	ldr	r3, [pc, #132]	; (22c28 <nm_drv_init+0x184>)
   22ba2:	4798      	blx	r3
   22ba4:	0003      	movs	r3, r0
   22ba6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22ba8:	230f      	movs	r3, #15
   22baa:	18fb      	adds	r3, r7, r3
   22bac:	781b      	ldrb	r3, [r3, #0]
   22bae:	b25b      	sxtb	r3, r3
   22bb0:	2b00      	cmp	r3, #0
   22bb2:	d00f      	beq.n	22bd4 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   22bb4:	23a7      	movs	r3, #167	; 0xa7
   22bb6:	005a      	lsls	r2, r3, #1
   22bb8:	4910      	ldr	r1, [pc, #64]	; (22bfc <nm_drv_init+0x158>)
   22bba:	4b11      	ldr	r3, [pc, #68]	; (22c00 <nm_drv_init+0x15c>)
   22bbc:	0018      	movs	r0, r3
   22bbe:	4b11      	ldr	r3, [pc, #68]	; (22c04 <nm_drv_init+0x160>)
   22bc0:	4798      	blx	r3
   22bc2:	4b1a      	ldr	r3, [pc, #104]	; (22c2c <nm_drv_init+0x188>)
   22bc4:	0018      	movs	r0, r3
   22bc6:	4b0f      	ldr	r3, [pc, #60]	; (22c04 <nm_drv_init+0x160>)
   22bc8:	4798      	blx	r3
   22bca:	4b10      	ldr	r3, [pc, #64]	; (22c0c <nm_drv_init+0x168>)
   22bcc:	0018      	movs	r0, r3
   22bce:	4b0d      	ldr	r3, [pc, #52]	; (22c04 <nm_drv_init+0x160>)
   22bd0:	4798      	blx	r3
		goto ERR2;
   22bd2:	e007      	b.n	22be4 <nm_drv_init+0x140>
	}
	return ret;
   22bd4:	230f      	movs	r3, #15
   22bd6:	18fb      	adds	r3, r7, r3
   22bd8:	781b      	ldrb	r3, [r3, #0]
   22bda:	b25b      	sxtb	r3, r3
   22bdc:	e008      	b.n	22bf0 <nm_drv_init+0x14c>
		goto ERR2;
   22bde:	46c0      	nop			; (mov r8, r8)
   22be0:	e000      	b.n	22be4 <nm_drv_init+0x140>
		goto ERR2;
   22be2:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   22be4:	4b12      	ldr	r3, [pc, #72]	; (22c30 <nm_drv_init+0x18c>)
   22be6:	4798      	blx	r3
ERR1:
	return ret;
   22be8:	230f      	movs	r3, #15
   22bea:	18fb      	adds	r3, r7, r3
   22bec:	781b      	ldrb	r3, [r3, #0]
   22bee:	b25b      	sxtb	r3, r3
}
   22bf0:	0018      	movs	r0, r3
   22bf2:	46bd      	mov	sp, r7
   22bf4:	b005      	add	sp, #20
   22bf6:	bd90      	pop	{r4, r7, pc}
   22bf8:	00022605 	.word	0x00022605
   22bfc:	00038474 	.word	0x00038474
   22c00:	000383a4 	.word	0x000383a4
   22c04:	0001dc99 	.word	0x0001dc99
   22c08:	000383b8 	.word	0x000383b8
   22c0c:	000383d4 	.word	0x000383d4
   22c10:	000383d8 	.word	0x000383d8
   22c14:	00021fa1 	.word	0x00021fa1
   22c18:	000383e4 	.word	0x000383e4
   22c1c:	000244bd 	.word	0x000244bd
   22c20:	000222f9 	.word	0x000222f9
   22c24:	00022491 	.word	0x00022491
   22c28:	00021eed 	.word	0x00021eed
   22c2c:	000383f4 	.word	0x000383f4
   22c30:	00022639 	.word	0x00022639

00022c34 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   22c34:	b590      	push	{r4, r7, lr}
   22c36:	b085      	sub	sp, #20
   22c38:	af00      	add	r7, sp, #0
   22c3a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   22c3c:	230f      	movs	r3, #15
   22c3e:	18fc      	adds	r4, r7, r3
   22c40:	4b2e      	ldr	r3, [pc, #184]	; (22cfc <nm_drv_deinit+0xc8>)
   22c42:	4798      	blx	r3
   22c44:	0003      	movs	r3, r0
   22c46:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22c48:	230f      	movs	r3, #15
   22c4a:	18fb      	adds	r3, r7, r3
   22c4c:	781b      	ldrb	r3, [r3, #0]
   22c4e:	b25b      	sxtb	r3, r3
   22c50:	2b00      	cmp	r3, #0
   22c52:	d010      	beq.n	22c76 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   22c54:	2366      	movs	r3, #102	; 0x66
   22c56:	33ff      	adds	r3, #255	; 0xff
   22c58:	001a      	movs	r2, r3
   22c5a:	4929      	ldr	r1, [pc, #164]	; (22d00 <nm_drv_deinit+0xcc>)
   22c5c:	4b29      	ldr	r3, [pc, #164]	; (22d04 <nm_drv_deinit+0xd0>)
   22c5e:	0018      	movs	r0, r3
   22c60:	4b29      	ldr	r3, [pc, #164]	; (22d08 <nm_drv_deinit+0xd4>)
   22c62:	4798      	blx	r3
   22c64:	4b29      	ldr	r3, [pc, #164]	; (22d0c <nm_drv_deinit+0xd8>)
   22c66:	0018      	movs	r0, r3
   22c68:	4b27      	ldr	r3, [pc, #156]	; (22d08 <nm_drv_deinit+0xd4>)
   22c6a:	4798      	blx	r3
   22c6c:	4b28      	ldr	r3, [pc, #160]	; (22d10 <nm_drv_deinit+0xdc>)
   22c6e:	0018      	movs	r0, r3
   22c70:	4b25      	ldr	r3, [pc, #148]	; (22d08 <nm_drv_deinit+0xd4>)
   22c72:	4798      	blx	r3
		goto ERR1;
   22c74:	e03a      	b.n	22cec <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   22c76:	230f      	movs	r3, #15
   22c78:	18fc      	adds	r4, r7, r3
   22c7a:	2000      	movs	r0, #0
   22c7c:	4b25      	ldr	r3, [pc, #148]	; (22d14 <nm_drv_deinit+0xe0>)
   22c7e:	4798      	blx	r3
   22c80:	0003      	movs	r3, r0
   22c82:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22c84:	230f      	movs	r3, #15
   22c86:	18fb      	adds	r3, r7, r3
   22c88:	781b      	ldrb	r3, [r3, #0]
   22c8a:	b25b      	sxtb	r3, r3
   22c8c:	2b00      	cmp	r3, #0
   22c8e:	d00f      	beq.n	22cb0 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   22c90:	23b6      	movs	r3, #182	; 0xb6
   22c92:	005a      	lsls	r2, r3, #1
   22c94:	491a      	ldr	r1, [pc, #104]	; (22d00 <nm_drv_deinit+0xcc>)
   22c96:	4b1b      	ldr	r3, [pc, #108]	; (22d04 <nm_drv_deinit+0xd0>)
   22c98:	0018      	movs	r0, r3
   22c9a:	4b1b      	ldr	r3, [pc, #108]	; (22d08 <nm_drv_deinit+0xd4>)
   22c9c:	4798      	blx	r3
   22c9e:	4b1e      	ldr	r3, [pc, #120]	; (22d18 <nm_drv_deinit+0xe4>)
   22ca0:	0018      	movs	r0, r3
   22ca2:	4b19      	ldr	r3, [pc, #100]	; (22d08 <nm_drv_deinit+0xd4>)
   22ca4:	4798      	blx	r3
   22ca6:	4b1a      	ldr	r3, [pc, #104]	; (22d10 <nm_drv_deinit+0xdc>)
   22ca8:	0018      	movs	r0, r3
   22caa:	4b17      	ldr	r3, [pc, #92]	; (22d08 <nm_drv_deinit+0xd4>)
   22cac:	4798      	blx	r3
		goto ERR1;
   22cae:	e01d      	b.n	22cec <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   22cb0:	230f      	movs	r3, #15
   22cb2:	18fc      	adds	r4, r7, r3
   22cb4:	4b19      	ldr	r3, [pc, #100]	; (22d1c <nm_drv_deinit+0xe8>)
   22cb6:	4798      	blx	r3
   22cb8:	0003      	movs	r3, r0
   22cba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   22cbc:	230f      	movs	r3, #15
   22cbe:	18fb      	adds	r3, r7, r3
   22cc0:	781b      	ldrb	r3, [r3, #0]
   22cc2:	b25b      	sxtb	r3, r3
   22cc4:	2b00      	cmp	r3, #0
   22cc6:	d00f      	beq.n	22ce8 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   22cc8:	23b9      	movs	r3, #185	; 0xb9
   22cca:	005a      	lsls	r2, r3, #1
   22ccc:	490c      	ldr	r1, [pc, #48]	; (22d00 <nm_drv_deinit+0xcc>)
   22cce:	4b0d      	ldr	r3, [pc, #52]	; (22d04 <nm_drv_deinit+0xd0>)
   22cd0:	0018      	movs	r0, r3
   22cd2:	4b0d      	ldr	r3, [pc, #52]	; (22d08 <nm_drv_deinit+0xd4>)
   22cd4:	4798      	blx	r3
   22cd6:	4b12      	ldr	r3, [pc, #72]	; (22d20 <nm_drv_deinit+0xec>)
   22cd8:	0018      	movs	r0, r3
   22cda:	4b0b      	ldr	r3, [pc, #44]	; (22d08 <nm_drv_deinit+0xd4>)
   22cdc:	4798      	blx	r3
   22cde:	4b0c      	ldr	r3, [pc, #48]	; (22d10 <nm_drv_deinit+0xdc>)
   22ce0:	0018      	movs	r0, r3
   22ce2:	4b09      	ldr	r3, [pc, #36]	; (22d08 <nm_drv_deinit+0xd4>)
   22ce4:	4798      	blx	r3
		goto ERR1;
   22ce6:	e001      	b.n	22cec <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   22ce8:	4b0e      	ldr	r3, [pc, #56]	; (22d24 <nm_drv_deinit+0xf0>)
   22cea:	4798      	blx	r3
#endif

ERR1:
	return ret;
   22cec:	230f      	movs	r3, #15
   22cee:	18fb      	adds	r3, r7, r3
   22cf0:	781b      	ldrb	r3, [r3, #0]
   22cf2:	b25b      	sxtb	r3, r3
}
   22cf4:	0018      	movs	r0, r3
   22cf6:	46bd      	mov	sp, r7
   22cf8:	b005      	add	sp, #20
   22cfa:	bd90      	pop	{r4, r7, pc}
   22cfc:	00022545 	.word	0x00022545
   22d00:	00038480 	.word	0x00038480
   22d04:	000383a4 	.word	0x000383a4
   22d08:	0001dc99 	.word	0x0001dc99
   22d0c:	00038414 	.word	0x00038414
   22d10:	000383d4 	.word	0x000383d4
   22d14:	00025965 	.word	0x00025965
   22d18:	00038434 	.word	0x00038434
   22d1c:	00022639 	.word	0x00022639
   22d20:	00038458 	.word	0x00038458
   22d24:	00024609 	.word	0x00024609

00022d28 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   22d28:	b580      	push	{r7, lr}
   22d2a:	b086      	sub	sp, #24
   22d2c:	af00      	add	r7, sp, #0
   22d2e:	6078      	str	r0, [r7, #4]
   22d30:	000a      	movs	r2, r1
   22d32:	1cbb      	adds	r3, r7, #2
   22d34:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   22d36:	230c      	movs	r3, #12
   22d38:	18fb      	adds	r3, r7, r3
   22d3a:	2200      	movs	r2, #0
   22d3c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   22d3e:	230c      	movs	r3, #12
   22d40:	18fb      	adds	r3, r7, r3
   22d42:	687a      	ldr	r2, [r7, #4]
   22d44:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22d46:	230c      	movs	r3, #12
   22d48:	18fb      	adds	r3, r7, r3
   22d4a:	1cba      	adds	r2, r7, #2
   22d4c:	8812      	ldrh	r2, [r2, #0]
   22d4e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22d50:	230c      	movs	r3, #12
   22d52:	18fb      	adds	r3, r7, r3
   22d54:	0019      	movs	r1, r3
   22d56:	2003      	movs	r0, #3
   22d58:	4b03      	ldr	r3, [pc, #12]	; (22d68 <nmi_spi_read+0x40>)
   22d5a:	4798      	blx	r3
   22d5c:	0003      	movs	r3, r0
}
   22d5e:	0018      	movs	r0, r3
   22d60:	46bd      	mov	sp, r7
   22d62:	b006      	add	sp, #24
   22d64:	bd80      	pop	{r7, pc}
   22d66:	46c0      	nop			; (mov r8, r8)
   22d68:	000204d5 	.word	0x000204d5

00022d6c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   22d6c:	b580      	push	{r7, lr}
   22d6e:	b086      	sub	sp, #24
   22d70:	af00      	add	r7, sp, #0
   22d72:	6078      	str	r0, [r7, #4]
   22d74:	000a      	movs	r2, r1
   22d76:	1cbb      	adds	r3, r7, #2
   22d78:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   22d7a:	230c      	movs	r3, #12
   22d7c:	18fb      	adds	r3, r7, r3
   22d7e:	687a      	ldr	r2, [r7, #4]
   22d80:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   22d82:	230c      	movs	r3, #12
   22d84:	18fb      	adds	r3, r7, r3
   22d86:	2200      	movs	r2, #0
   22d88:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22d8a:	230c      	movs	r3, #12
   22d8c:	18fb      	adds	r3, r7, r3
   22d8e:	1cba      	adds	r2, r7, #2
   22d90:	8812      	ldrh	r2, [r2, #0]
   22d92:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   22d94:	230c      	movs	r3, #12
   22d96:	18fb      	adds	r3, r7, r3
   22d98:	0019      	movs	r1, r3
   22d9a:	2003      	movs	r0, #3
   22d9c:	4b03      	ldr	r3, [pc, #12]	; (22dac <nmi_spi_write+0x40>)
   22d9e:	4798      	blx	r3
   22da0:	0003      	movs	r3, r0
}
   22da2:	0018      	movs	r0, r3
   22da4:	46bd      	mov	sp, r7
   22da6:	b006      	add	sp, #24
   22da8:	bd80      	pop	{r7, pc}
   22daa:	46c0      	nop			; (mov r8, r8)
   22dac:	000204d5 	.word	0x000204d5

00022db0 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   22db0:	b580      	push	{r7, lr}
   22db2:	b088      	sub	sp, #32
   22db4:	af00      	add	r7, sp, #0
   22db6:	60f8      	str	r0, [r7, #12]
   22db8:	60b9      	str	r1, [r7, #8]
   22dba:	1dbb      	adds	r3, r7, #6
   22dbc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   22dbe:	2314      	movs	r3, #20
   22dc0:	18fb      	adds	r3, r7, r3
   22dc2:	68fa      	ldr	r2, [r7, #12]
   22dc4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   22dc6:	2314      	movs	r3, #20
   22dc8:	18fb      	adds	r3, r7, r3
   22dca:	68ba      	ldr	r2, [r7, #8]
   22dcc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   22dce:	2314      	movs	r3, #20
   22dd0:	18fb      	adds	r3, r7, r3
   22dd2:	1dba      	adds	r2, r7, #6
   22dd4:	8812      	ldrh	r2, [r2, #0]
   22dd6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   22dd8:	2314      	movs	r3, #20
   22dda:	18fb      	adds	r3, r7, r3
   22ddc:	0019      	movs	r1, r3
   22dde:	2003      	movs	r0, #3
   22de0:	4b03      	ldr	r3, [pc, #12]	; (22df0 <nmi_spi_rw+0x40>)
   22de2:	4798      	blx	r3
   22de4:	0003      	movs	r3, r0
}
   22de6:	0018      	movs	r0, r3
   22de8:	46bd      	mov	sp, r7
   22dea:	b008      	add	sp, #32
   22dec:	bd80      	pop	{r7, pc}
   22dee:	46c0      	nop			; (mov r8, r8)
   22df0:	000204d5 	.word	0x000204d5

00022df4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   22df4:	b580      	push	{r7, lr}
   22df6:	b082      	sub	sp, #8
   22df8:	af00      	add	r7, sp, #0
   22dfa:	0002      	movs	r2, r0
   22dfc:	1dfb      	adds	r3, r7, #7
   22dfe:	701a      	strb	r2, [r3, #0]
   22e00:	1dbb      	adds	r3, r7, #6
   22e02:	1c0a      	adds	r2, r1, #0
   22e04:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   22e06:	1dfb      	adds	r3, r7, #7
   22e08:	781b      	ldrb	r3, [r3, #0]
   22e0a:	005a      	lsls	r2, r3, #1
   22e0c:	1dbb      	adds	r3, r7, #6
   22e0e:	781b      	ldrb	r3, [r3, #0]
   22e10:	4053      	eors	r3, r2
   22e12:	4a03      	ldr	r2, [pc, #12]	; (22e20 <crc7_byte+0x2c>)
   22e14:	5cd3      	ldrb	r3, [r2, r3]
}
   22e16:	0018      	movs	r0, r3
   22e18:	46bd      	mov	sp, r7
   22e1a:	b002      	add	sp, #8
   22e1c:	bd80      	pop	{r7, pc}
   22e1e:	46c0      	nop			; (mov r8, r8)
   22e20:	00038490 	.word	0x00038490

00022e24 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   22e24:	b590      	push	{r4, r7, lr}
   22e26:	b085      	sub	sp, #20
   22e28:	af00      	add	r7, sp, #0
   22e2a:	60b9      	str	r1, [r7, #8]
   22e2c:	607a      	str	r2, [r7, #4]
   22e2e:	230f      	movs	r3, #15
   22e30:	18fb      	adds	r3, r7, r3
   22e32:	1c02      	adds	r2, r0, #0
   22e34:	701a      	strb	r2, [r3, #0]
	while (len--)
   22e36:	e00e      	b.n	22e56 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   22e38:	68bb      	ldr	r3, [r7, #8]
   22e3a:	1c5a      	adds	r2, r3, #1
   22e3c:	60ba      	str	r2, [r7, #8]
   22e3e:	781a      	ldrb	r2, [r3, #0]
   22e40:	230f      	movs	r3, #15
   22e42:	18fc      	adds	r4, r7, r3
   22e44:	230f      	movs	r3, #15
   22e46:	18fb      	adds	r3, r7, r3
   22e48:	781b      	ldrb	r3, [r3, #0]
   22e4a:	0011      	movs	r1, r2
   22e4c:	0018      	movs	r0, r3
   22e4e:	4b08      	ldr	r3, [pc, #32]	; (22e70 <crc7+0x4c>)
   22e50:	4798      	blx	r3
   22e52:	0003      	movs	r3, r0
   22e54:	7023      	strb	r3, [r4, #0]
	while (len--)
   22e56:	687b      	ldr	r3, [r7, #4]
   22e58:	1e5a      	subs	r2, r3, #1
   22e5a:	607a      	str	r2, [r7, #4]
   22e5c:	2b00      	cmp	r3, #0
   22e5e:	d1eb      	bne.n	22e38 <crc7+0x14>
	return crc;
   22e60:	230f      	movs	r3, #15
   22e62:	18fb      	adds	r3, r7, r3
   22e64:	781b      	ldrb	r3, [r3, #0]
}
   22e66:	0018      	movs	r0, r3
   22e68:	46bd      	mov	sp, r7
   22e6a:	b005      	add	sp, #20
   22e6c:	bd90      	pop	{r4, r7, pc}
   22e6e:	46c0      	nop			; (mov r8, r8)
   22e70:	00022df5 	.word	0x00022df5

00022e74 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   22e74:	b590      	push	{r4, r7, lr}
   22e76:	b089      	sub	sp, #36	; 0x24
   22e78:	af00      	add	r7, sp, #0
   22e7a:	60b9      	str	r1, [r7, #8]
   22e7c:	607a      	str	r2, [r7, #4]
   22e7e:	603b      	str	r3, [r7, #0]
   22e80:	230f      	movs	r3, #15
   22e82:	18fb      	adds	r3, r7, r3
   22e84:	1c02      	adds	r2, r0, #0
   22e86:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   22e88:	231f      	movs	r3, #31
   22e8a:	18fb      	adds	r3, r7, r3
   22e8c:	2205      	movs	r2, #5
   22e8e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22e90:	231e      	movs	r3, #30
   22e92:	18fb      	adds	r3, r7, r3
   22e94:	2201      	movs	r2, #1
   22e96:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   22e98:	2314      	movs	r3, #20
   22e9a:	18fb      	adds	r3, r7, r3
   22e9c:	220f      	movs	r2, #15
   22e9e:	18ba      	adds	r2, r7, r2
   22ea0:	7812      	ldrb	r2, [r2, #0]
   22ea2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22ea4:	230f      	movs	r3, #15
   22ea6:	18fb      	adds	r3, r7, r3
   22ea8:	781b      	ldrb	r3, [r3, #0]
   22eaa:	3bc1      	subs	r3, #193	; 0xc1
   22eac:	2b0e      	cmp	r3, #14
   22eae:	d900      	bls.n	22eb2 <spi_cmd+0x3e>
   22eb0:	e11b      	b.n	230ea <spi_cmd+0x276>
   22eb2:	009a      	lsls	r2, r3, #2
   22eb4:	4bb6      	ldr	r3, [pc, #728]	; (23190 <spi_cmd+0x31c>)
   22eb6:	18d3      	adds	r3, r2, r3
   22eb8:	681b      	ldr	r3, [r3, #0]
   22eba:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   22ebc:	68bb      	ldr	r3, [r7, #8]
   22ebe:	0c1b      	lsrs	r3, r3, #16
   22ec0:	b2da      	uxtb	r2, r3
   22ec2:	2314      	movs	r3, #20
   22ec4:	18fb      	adds	r3, r7, r3
   22ec6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22ec8:	68bb      	ldr	r3, [r7, #8]
   22eca:	0a1b      	lsrs	r3, r3, #8
   22ecc:	b2da      	uxtb	r2, r3
   22ece:	2314      	movs	r3, #20
   22ed0:	18fb      	adds	r3, r7, r3
   22ed2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22ed4:	68bb      	ldr	r3, [r7, #8]
   22ed6:	b2da      	uxtb	r2, r3
   22ed8:	2314      	movs	r3, #20
   22eda:	18fb      	adds	r3, r7, r3
   22edc:	70da      	strb	r2, [r3, #3]
		len = 5;
   22ede:	231f      	movs	r3, #31
   22ee0:	18fb      	adds	r3, r7, r3
   22ee2:	2205      	movs	r2, #5
   22ee4:	701a      	strb	r2, [r3, #0]
		break;
   22ee6:	e105      	b.n	230f4 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   22ee8:	68bb      	ldr	r3, [r7, #8]
   22eea:	0a1b      	lsrs	r3, r3, #8
   22eec:	b2da      	uxtb	r2, r3
   22eee:	2314      	movs	r3, #20
   22ef0:	18fb      	adds	r3, r7, r3
   22ef2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   22ef4:	2330      	movs	r3, #48	; 0x30
   22ef6:	18fb      	adds	r3, r7, r3
   22ef8:	781b      	ldrb	r3, [r3, #0]
   22efa:	2b00      	cmp	r3, #0
   22efc:	d009      	beq.n	22f12 <spi_cmd+0x9e>
   22efe:	2314      	movs	r3, #20
   22f00:	18fb      	adds	r3, r7, r3
   22f02:	785b      	ldrb	r3, [r3, #1]
   22f04:	2280      	movs	r2, #128	; 0x80
   22f06:	4252      	negs	r2, r2
   22f08:	4313      	orrs	r3, r2
   22f0a:	b2da      	uxtb	r2, r3
   22f0c:	2314      	movs	r3, #20
   22f0e:	18fb      	adds	r3, r7, r3
   22f10:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   22f12:	68bb      	ldr	r3, [r7, #8]
   22f14:	b2da      	uxtb	r2, r3
   22f16:	2314      	movs	r3, #20
   22f18:	18fb      	adds	r3, r7, r3
   22f1a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22f1c:	2314      	movs	r3, #20
   22f1e:	18fb      	adds	r3, r7, r3
   22f20:	2200      	movs	r2, #0
   22f22:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f24:	231f      	movs	r3, #31
   22f26:	18fb      	adds	r3, r7, r3
   22f28:	2205      	movs	r2, #5
   22f2a:	701a      	strb	r2, [r3, #0]
		break;
   22f2c:	e0e2      	b.n	230f4 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   22f2e:	2314      	movs	r3, #20
   22f30:	18fb      	adds	r3, r7, r3
   22f32:	2200      	movs	r2, #0
   22f34:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22f36:	2314      	movs	r3, #20
   22f38:	18fb      	adds	r3, r7, r3
   22f3a:	2200      	movs	r2, #0
   22f3c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22f3e:	2314      	movs	r3, #20
   22f40:	18fb      	adds	r3, r7, r3
   22f42:	2200      	movs	r2, #0
   22f44:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f46:	231f      	movs	r3, #31
   22f48:	18fb      	adds	r3, r7, r3
   22f4a:	2205      	movs	r2, #5
   22f4c:	701a      	strb	r2, [r3, #0]
		break;
   22f4e:	e0d1      	b.n	230f4 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   22f50:	2314      	movs	r3, #20
   22f52:	18fb      	adds	r3, r7, r3
   22f54:	2200      	movs	r2, #0
   22f56:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   22f58:	2314      	movs	r3, #20
   22f5a:	18fb      	adds	r3, r7, r3
   22f5c:	2200      	movs	r2, #0
   22f5e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   22f60:	2314      	movs	r3, #20
   22f62:	18fb      	adds	r3, r7, r3
   22f64:	2200      	movs	r2, #0
   22f66:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f68:	231f      	movs	r3, #31
   22f6a:	18fb      	adds	r3, r7, r3
   22f6c:	2205      	movs	r2, #5
   22f6e:	701a      	strb	r2, [r3, #0]
		break;
   22f70:	e0c0      	b.n	230f4 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   22f72:	2314      	movs	r3, #20
   22f74:	18fb      	adds	r3, r7, r3
   22f76:	22ff      	movs	r2, #255	; 0xff
   22f78:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   22f7a:	2314      	movs	r3, #20
   22f7c:	18fb      	adds	r3, r7, r3
   22f7e:	22ff      	movs	r2, #255	; 0xff
   22f80:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   22f82:	2314      	movs	r3, #20
   22f84:	18fb      	adds	r3, r7, r3
   22f86:	22ff      	movs	r2, #255	; 0xff
   22f88:	70da      	strb	r2, [r3, #3]
		len = 5;
   22f8a:	231f      	movs	r3, #31
   22f8c:	18fb      	adds	r3, r7, r3
   22f8e:	2205      	movs	r2, #5
   22f90:	701a      	strb	r2, [r3, #0]
		break;
   22f92:	e0af      	b.n	230f4 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   22f94:	68bb      	ldr	r3, [r7, #8]
   22f96:	0c1b      	lsrs	r3, r3, #16
   22f98:	b2da      	uxtb	r2, r3
   22f9a:	2314      	movs	r3, #20
   22f9c:	18fb      	adds	r3, r7, r3
   22f9e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22fa0:	68bb      	ldr	r3, [r7, #8]
   22fa2:	0a1b      	lsrs	r3, r3, #8
   22fa4:	b2da      	uxtb	r2, r3
   22fa6:	2314      	movs	r3, #20
   22fa8:	18fb      	adds	r3, r7, r3
   22faa:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22fac:	68bb      	ldr	r3, [r7, #8]
   22fae:	b2da      	uxtb	r2, r3
   22fb0:	2314      	movs	r3, #20
   22fb2:	18fb      	adds	r3, r7, r3
   22fb4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   22fb6:	683b      	ldr	r3, [r7, #0]
   22fb8:	0a1b      	lsrs	r3, r3, #8
   22fba:	b2da      	uxtb	r2, r3
   22fbc:	2314      	movs	r3, #20
   22fbe:	18fb      	adds	r3, r7, r3
   22fc0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   22fc2:	683b      	ldr	r3, [r7, #0]
   22fc4:	b2da      	uxtb	r2, r3
   22fc6:	2314      	movs	r3, #20
   22fc8:	18fb      	adds	r3, r7, r3
   22fca:	715a      	strb	r2, [r3, #5]
		len = 7;
   22fcc:	231f      	movs	r3, #31
   22fce:	18fb      	adds	r3, r7, r3
   22fd0:	2207      	movs	r2, #7
   22fd2:	701a      	strb	r2, [r3, #0]
		break;
   22fd4:	e08e      	b.n	230f4 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   22fd6:	68bb      	ldr	r3, [r7, #8]
   22fd8:	0c1b      	lsrs	r3, r3, #16
   22fda:	b2da      	uxtb	r2, r3
   22fdc:	2314      	movs	r3, #20
   22fde:	18fb      	adds	r3, r7, r3
   22fe0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   22fe2:	68bb      	ldr	r3, [r7, #8]
   22fe4:	0a1b      	lsrs	r3, r3, #8
   22fe6:	b2da      	uxtb	r2, r3
   22fe8:	2314      	movs	r3, #20
   22fea:	18fb      	adds	r3, r7, r3
   22fec:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   22fee:	68bb      	ldr	r3, [r7, #8]
   22ff0:	b2da      	uxtb	r2, r3
   22ff2:	2314      	movs	r3, #20
   22ff4:	18fb      	adds	r3, r7, r3
   22ff6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   22ff8:	683b      	ldr	r3, [r7, #0]
   22ffa:	0c1b      	lsrs	r3, r3, #16
   22ffc:	b2da      	uxtb	r2, r3
   22ffe:	2314      	movs	r3, #20
   23000:	18fb      	adds	r3, r7, r3
   23002:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   23004:	683b      	ldr	r3, [r7, #0]
   23006:	0a1b      	lsrs	r3, r3, #8
   23008:	b2da      	uxtb	r2, r3
   2300a:	2314      	movs	r3, #20
   2300c:	18fb      	adds	r3, r7, r3
   2300e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   23010:	683b      	ldr	r3, [r7, #0]
   23012:	b2da      	uxtb	r2, r3
   23014:	2314      	movs	r3, #20
   23016:	18fb      	adds	r3, r7, r3
   23018:	719a      	strb	r2, [r3, #6]
		len = 8;
   2301a:	231f      	movs	r3, #31
   2301c:	18fb      	adds	r3, r7, r3
   2301e:	2208      	movs	r2, #8
   23020:	701a      	strb	r2, [r3, #0]
		break;
   23022:	e067      	b.n	230f4 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   23024:	68bb      	ldr	r3, [r7, #8]
   23026:	0a1b      	lsrs	r3, r3, #8
   23028:	b2da      	uxtb	r2, r3
   2302a:	2314      	movs	r3, #20
   2302c:	18fb      	adds	r3, r7, r3
   2302e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23030:	2330      	movs	r3, #48	; 0x30
   23032:	18fb      	adds	r3, r7, r3
   23034:	781b      	ldrb	r3, [r3, #0]
   23036:	2b00      	cmp	r3, #0
   23038:	d009      	beq.n	2304e <spi_cmd+0x1da>
   2303a:	2314      	movs	r3, #20
   2303c:	18fb      	adds	r3, r7, r3
   2303e:	785b      	ldrb	r3, [r3, #1]
   23040:	2280      	movs	r2, #128	; 0x80
   23042:	4252      	negs	r2, r2
   23044:	4313      	orrs	r3, r2
   23046:	b2da      	uxtb	r2, r3
   23048:	2314      	movs	r3, #20
   2304a:	18fb      	adds	r3, r7, r3
   2304c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2304e:	68bb      	ldr	r3, [r7, #8]
   23050:	b2da      	uxtb	r2, r3
   23052:	2314      	movs	r3, #20
   23054:	18fb      	adds	r3, r7, r3
   23056:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   23058:	687b      	ldr	r3, [r7, #4]
   2305a:	0e1b      	lsrs	r3, r3, #24
   2305c:	b2da      	uxtb	r2, r3
   2305e:	2314      	movs	r3, #20
   23060:	18fb      	adds	r3, r7, r3
   23062:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   23064:	687b      	ldr	r3, [r7, #4]
   23066:	0c1b      	lsrs	r3, r3, #16
   23068:	b2da      	uxtb	r2, r3
   2306a:	2314      	movs	r3, #20
   2306c:	18fb      	adds	r3, r7, r3
   2306e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   23070:	687b      	ldr	r3, [r7, #4]
   23072:	0a1b      	lsrs	r3, r3, #8
   23074:	b2da      	uxtb	r2, r3
   23076:	2314      	movs	r3, #20
   23078:	18fb      	adds	r3, r7, r3
   2307a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2307c:	687b      	ldr	r3, [r7, #4]
   2307e:	b2da      	uxtb	r2, r3
   23080:	2314      	movs	r3, #20
   23082:	18fb      	adds	r3, r7, r3
   23084:	719a      	strb	r2, [r3, #6]
		len = 8;
   23086:	231f      	movs	r3, #31
   23088:	18fb      	adds	r3, r7, r3
   2308a:	2208      	movs	r2, #8
   2308c:	701a      	strb	r2, [r3, #0]
		break;
   2308e:	e031      	b.n	230f4 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   23090:	68bb      	ldr	r3, [r7, #8]
   23092:	0c1b      	lsrs	r3, r3, #16
   23094:	b2da      	uxtb	r2, r3
   23096:	2314      	movs	r3, #20
   23098:	18fb      	adds	r3, r7, r3
   2309a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2309c:	68bb      	ldr	r3, [r7, #8]
   2309e:	0a1b      	lsrs	r3, r3, #8
   230a0:	b2da      	uxtb	r2, r3
   230a2:	2314      	movs	r3, #20
   230a4:	18fb      	adds	r3, r7, r3
   230a6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   230a8:	68bb      	ldr	r3, [r7, #8]
   230aa:	b2da      	uxtb	r2, r3
   230ac:	2314      	movs	r3, #20
   230ae:	18fb      	adds	r3, r7, r3
   230b0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   230b2:	687b      	ldr	r3, [r7, #4]
   230b4:	0e1b      	lsrs	r3, r3, #24
   230b6:	b2da      	uxtb	r2, r3
   230b8:	2314      	movs	r3, #20
   230ba:	18fb      	adds	r3, r7, r3
   230bc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   230be:	687b      	ldr	r3, [r7, #4]
   230c0:	0c1b      	lsrs	r3, r3, #16
   230c2:	b2da      	uxtb	r2, r3
   230c4:	2314      	movs	r3, #20
   230c6:	18fb      	adds	r3, r7, r3
   230c8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   230ca:	687b      	ldr	r3, [r7, #4]
   230cc:	0a1b      	lsrs	r3, r3, #8
   230ce:	b2da      	uxtb	r2, r3
   230d0:	2314      	movs	r3, #20
   230d2:	18fb      	adds	r3, r7, r3
   230d4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   230d6:	687b      	ldr	r3, [r7, #4]
   230d8:	b2da      	uxtb	r2, r3
   230da:	2314      	movs	r3, #20
   230dc:	18fb      	adds	r3, r7, r3
   230de:	71da      	strb	r2, [r3, #7]
		len = 9;
   230e0:	231f      	movs	r3, #31
   230e2:	18fb      	adds	r3, r7, r3
   230e4:	2209      	movs	r2, #9
   230e6:	701a      	strb	r2, [r3, #0]
		break;
   230e8:	e004      	b.n	230f4 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   230ea:	231e      	movs	r3, #30
   230ec:	18fb      	adds	r3, r7, r3
   230ee:	2200      	movs	r2, #0
   230f0:	701a      	strb	r2, [r3, #0]
		break;
   230f2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   230f4:	231e      	movs	r3, #30
   230f6:	18fb      	adds	r3, r7, r3
   230f8:	781b      	ldrb	r3, [r3, #0]
   230fa:	b25b      	sxtb	r3, r3
   230fc:	2b00      	cmp	r3, #0
   230fe:	d03f      	beq.n	23180 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   23100:	4b24      	ldr	r3, [pc, #144]	; (23194 <spi_cmd+0x320>)
   23102:	781b      	ldrb	r3, [r3, #0]
   23104:	2b00      	cmp	r3, #0
   23106:	d115      	bne.n	23134 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   23108:	231f      	movs	r3, #31
   2310a:	18fb      	adds	r3, r7, r3
   2310c:	781b      	ldrb	r3, [r3, #0]
   2310e:	1e5c      	subs	r4, r3, #1
   23110:	231f      	movs	r3, #31
   23112:	18fb      	adds	r3, r7, r3
   23114:	781b      	ldrb	r3, [r3, #0]
   23116:	3b01      	subs	r3, #1
   23118:	001a      	movs	r2, r3
   2311a:	2314      	movs	r3, #20
   2311c:	18fb      	adds	r3, r7, r3
   2311e:	0019      	movs	r1, r3
   23120:	207f      	movs	r0, #127	; 0x7f
   23122:	4b1d      	ldr	r3, [pc, #116]	; (23198 <spi_cmd+0x324>)
   23124:	4798      	blx	r3
   23126:	0003      	movs	r3, r0
   23128:	18db      	adds	r3, r3, r3
   2312a:	b2da      	uxtb	r2, r3
   2312c:	2314      	movs	r3, #20
   2312e:	18fb      	adds	r3, r7, r3
   23130:	551a      	strb	r2, [r3, r4]
   23132:	e006      	b.n	23142 <spi_cmd+0x2ce>
		else
			len-=1;
   23134:	231f      	movs	r3, #31
   23136:	18fb      	adds	r3, r7, r3
   23138:	221f      	movs	r2, #31
   2313a:	18ba      	adds	r2, r7, r2
   2313c:	7812      	ldrb	r2, [r2, #0]
   2313e:	3a01      	subs	r2, #1
   23140:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   23142:	231f      	movs	r3, #31
   23144:	18fb      	adds	r3, r7, r3
   23146:	781b      	ldrb	r3, [r3, #0]
   23148:	b29a      	uxth	r2, r3
   2314a:	2314      	movs	r3, #20
   2314c:	18fb      	adds	r3, r7, r3
   2314e:	0011      	movs	r1, r2
   23150:	0018      	movs	r0, r3
   23152:	4b12      	ldr	r3, [pc, #72]	; (2319c <spi_cmd+0x328>)
   23154:	4798      	blx	r3
   23156:	1e03      	subs	r3, r0, #0
   23158:	d012      	beq.n	23180 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2315a:	2390      	movs	r3, #144	; 0x90
   2315c:	005a      	lsls	r2, r3, #1
   2315e:	4910      	ldr	r1, [pc, #64]	; (231a0 <spi_cmd+0x32c>)
   23160:	4b10      	ldr	r3, [pc, #64]	; (231a4 <spi_cmd+0x330>)
   23162:	0018      	movs	r0, r3
   23164:	4b10      	ldr	r3, [pc, #64]	; (231a8 <spi_cmd+0x334>)
   23166:	4798      	blx	r3
   23168:	4b10      	ldr	r3, [pc, #64]	; (231ac <spi_cmd+0x338>)
   2316a:	0018      	movs	r0, r3
   2316c:	4b0e      	ldr	r3, [pc, #56]	; (231a8 <spi_cmd+0x334>)
   2316e:	4798      	blx	r3
   23170:	4b0f      	ldr	r3, [pc, #60]	; (231b0 <spi_cmd+0x33c>)
   23172:	0018      	movs	r0, r3
   23174:	4b0c      	ldr	r3, [pc, #48]	; (231a8 <spi_cmd+0x334>)
   23176:	4798      	blx	r3
			result = N_FAIL;
   23178:	231e      	movs	r3, #30
   2317a:	18fb      	adds	r3, r7, r3
   2317c:	2200      	movs	r2, #0
   2317e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   23180:	231e      	movs	r3, #30
   23182:	18fb      	adds	r3, r7, r3
   23184:	781b      	ldrb	r3, [r3, #0]
   23186:	b25b      	sxtb	r3, r3
}
   23188:	0018      	movs	r0, r3
   2318a:	46bd      	mov	sp, r7
   2318c:	b009      	add	sp, #36	; 0x24
   2318e:	bd90      	pop	{r4, r7, pc}
   23190:	00038b08 	.word	0x00038b08
   23194:	20003e98 	.word	0x20003e98
   23198:	00022e25 	.word	0x00022e25
   2319c:	00022d6d 	.word	0x00022d6d
   231a0:	00038b80 	.word	0x00038b80
   231a4:	00038590 	.word	0x00038590
   231a8:	0001dc99 	.word	0x0001dc99
   231ac:	000385a4 	.word	0x000385a4
   231b0:	000385d0 	.word	0x000385d0

000231b4 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   231b4:	b590      	push	{r4, r7, lr}
   231b6:	b085      	sub	sp, #20
   231b8:	af00      	add	r7, sp, #0
   231ba:	0002      	movs	r2, r0
   231bc:	1dfb      	adds	r3, r7, #7
   231be:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   231c0:	230e      	movs	r3, #14
   231c2:	18fb      	adds	r3, r7, r3
   231c4:	2201      	movs	r2, #1
   231c6:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   231c8:	4b32      	ldr	r3, [pc, #200]	; (23294 <spi_data_rsp+0xe0>)
   231ca:	781b      	ldrb	r3, [r3, #0]
   231cc:	2b00      	cmp	r3, #0
   231ce:	d104      	bne.n	231da <spi_data_rsp+0x26>
		len = 2;
   231d0:	230f      	movs	r3, #15
   231d2:	18fb      	adds	r3, r7, r3
   231d4:	2202      	movs	r2, #2
   231d6:	701a      	strb	r2, [r3, #0]
   231d8:	e003      	b.n	231e2 <spi_data_rsp+0x2e>
	else
		len = 3;
   231da:	230f      	movs	r3, #15
   231dc:	18fb      	adds	r3, r7, r3
   231de:	2203      	movs	r2, #3
   231e0:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   231e2:	230f      	movs	r3, #15
   231e4:	18fb      	adds	r3, r7, r3
   231e6:	781b      	ldrb	r3, [r3, #0]
   231e8:	b29a      	uxth	r2, r3
   231ea:	2308      	movs	r3, #8
   231ec:	18fb      	adds	r3, r7, r3
   231ee:	0011      	movs	r1, r2
   231f0:	0018      	movs	r0, r3
   231f2:	4b29      	ldr	r3, [pc, #164]	; (23298 <spi_data_rsp+0xe4>)
   231f4:	4798      	blx	r3
   231f6:	1e03      	subs	r3, r0, #0
   231f8:	d013      	beq.n	23222 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   231fa:	239a      	movs	r3, #154	; 0x9a
   231fc:	005a      	lsls	r2, r3, #1
   231fe:	4927      	ldr	r1, [pc, #156]	; (2329c <spi_data_rsp+0xe8>)
   23200:	4b27      	ldr	r3, [pc, #156]	; (232a0 <spi_data_rsp+0xec>)
   23202:	0018      	movs	r0, r3
   23204:	4b27      	ldr	r3, [pc, #156]	; (232a4 <spi_data_rsp+0xf0>)
   23206:	4798      	blx	r3
   23208:	4b27      	ldr	r3, [pc, #156]	; (232a8 <spi_data_rsp+0xf4>)
   2320a:	0018      	movs	r0, r3
   2320c:	4b25      	ldr	r3, [pc, #148]	; (232a4 <spi_data_rsp+0xf0>)
   2320e:	4798      	blx	r3
   23210:	4b26      	ldr	r3, [pc, #152]	; (232ac <spi_data_rsp+0xf8>)
   23212:	0018      	movs	r0, r3
   23214:	4b23      	ldr	r3, [pc, #140]	; (232a4 <spi_data_rsp+0xf0>)
   23216:	4798      	blx	r3
		result = N_FAIL;
   23218:	230e      	movs	r3, #14
   2321a:	18fb      	adds	r3, r7, r3
   2321c:	2200      	movs	r2, #0
   2321e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23220:	e030      	b.n	23284 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   23222:	230f      	movs	r3, #15
   23224:	18fb      	adds	r3, r7, r3
   23226:	781b      	ldrb	r3, [r3, #0]
   23228:	3b01      	subs	r3, #1
   2322a:	2208      	movs	r2, #8
   2322c:	18ba      	adds	r2, r7, r2
   2322e:	5cd3      	ldrb	r3, [r2, r3]
   23230:	2b00      	cmp	r3, #0
   23232:	d108      	bne.n	23246 <spi_data_rsp+0x92>
   23234:	230f      	movs	r3, #15
   23236:	18fb      	adds	r3, r7, r3
   23238:	781b      	ldrb	r3, [r3, #0]
   2323a:	3b02      	subs	r3, #2
   2323c:	2208      	movs	r2, #8
   2323e:	18ba      	adds	r2, r7, r2
   23240:	5cd3      	ldrb	r3, [r2, r3]
   23242:	2bc3      	cmp	r3, #195	; 0xc3
   23244:	d01e      	beq.n	23284 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23246:	233c      	movs	r3, #60	; 0x3c
   23248:	33ff      	adds	r3, #255	; 0xff
   2324a:	001a      	movs	r2, r3
   2324c:	4913      	ldr	r1, [pc, #76]	; (2329c <spi_data_rsp+0xe8>)
   2324e:	4b14      	ldr	r3, [pc, #80]	; (232a0 <spi_data_rsp+0xec>)
   23250:	0018      	movs	r0, r3
   23252:	4b14      	ldr	r3, [pc, #80]	; (232a4 <spi_data_rsp+0xf0>)
   23254:	4798      	blx	r3
   23256:	2308      	movs	r3, #8
   23258:	18fb      	adds	r3, r7, r3
   2325a:	781b      	ldrb	r3, [r3, #0]
   2325c:	0019      	movs	r1, r3
   2325e:	2308      	movs	r3, #8
   23260:	18fb      	adds	r3, r7, r3
   23262:	785b      	ldrb	r3, [r3, #1]
   23264:	001a      	movs	r2, r3
   23266:	2308      	movs	r3, #8
   23268:	18fb      	adds	r3, r7, r3
   2326a:	789b      	ldrb	r3, [r3, #2]
   2326c:	4810      	ldr	r0, [pc, #64]	; (232b0 <spi_data_rsp+0xfc>)
   2326e:	4c0d      	ldr	r4, [pc, #52]	; (232a4 <spi_data_rsp+0xf0>)
   23270:	47a0      	blx	r4
   23272:	4b0e      	ldr	r3, [pc, #56]	; (232ac <spi_data_rsp+0xf8>)
   23274:	0018      	movs	r0, r3
   23276:	4b0b      	ldr	r3, [pc, #44]	; (232a4 <spi_data_rsp+0xf0>)
   23278:	4798      	blx	r3
		result = N_FAIL;
   2327a:	230e      	movs	r3, #14
   2327c:	18fb      	adds	r3, r7, r3
   2327e:	2200      	movs	r2, #0
   23280:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23282:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23284:	230e      	movs	r3, #14
   23286:	18fb      	adds	r3, r7, r3
   23288:	781b      	ldrb	r3, [r3, #0]
   2328a:	b25b      	sxtb	r3, r3
}
   2328c:	0018      	movs	r0, r3
   2328e:	46bd      	mov	sp, r7
   23290:	b005      	add	sp, #20
   23292:	bd90      	pop	{r4, r7, pc}
   23294:	20003e98 	.word	0x20003e98
   23298:	00022d29 	.word	0x00022d29
   2329c:	00038b88 	.word	0x00038b88
   232a0:	00038590 	.word	0x00038590
   232a4:	0001dc99 	.word	0x0001dc99
   232a8:	000385d4 	.word	0x000385d4
   232ac:	000385d0 	.word	0x000385d0
   232b0:	000385f4 	.word	0x000385f4

000232b4 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   232b4:	b580      	push	{r7, lr}
   232b6:	b084      	sub	sp, #16
   232b8:	af00      	add	r7, sp, #0
   232ba:	0002      	movs	r2, r0
   232bc:	1dfb      	adds	r3, r7, #7
   232be:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   232c0:	230f      	movs	r3, #15
   232c2:	18fb      	adds	r3, r7, r3
   232c4:	2201      	movs	r2, #1
   232c6:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   232c8:	1dfb      	adds	r3, r7, #7
   232ca:	781b      	ldrb	r3, [r3, #0]
   232cc:	2bcf      	cmp	r3, #207	; 0xcf
   232ce:	d007      	beq.n	232e0 <spi_cmd_rsp+0x2c>
   232d0:	1dfb      	adds	r3, r7, #7
   232d2:	781b      	ldrb	r3, [r3, #0]
   232d4:	2bc5      	cmp	r3, #197	; 0xc5
   232d6:	d003      	beq.n	232e0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   232d8:	1dfb      	adds	r3, r7, #7
   232da:	781b      	ldrb	r3, [r3, #0]
   232dc:	2bc6      	cmp	r3, #198	; 0xc6
   232de:	d10c      	bne.n	232fa <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   232e0:	230d      	movs	r3, #13
   232e2:	18fb      	adds	r3, r7, r3
   232e4:	2101      	movs	r1, #1
   232e6:	0018      	movs	r0, r3
   232e8:	4b3b      	ldr	r3, [pc, #236]	; (233d8 <spi_cmd_rsp+0x124>)
   232ea:	4798      	blx	r3
   232ec:	1e03      	subs	r3, r0, #0
   232ee:	d004      	beq.n	232fa <spi_cmd_rsp+0x46>
			result = N_FAIL;
   232f0:	230f      	movs	r3, #15
   232f2:	18fb      	adds	r3, r7, r3
   232f4:	2200      	movs	r2, #0
   232f6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   232f8:	e065      	b.n	233c6 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   232fa:	230e      	movs	r3, #14
   232fc:	18fb      	adds	r3, r7, r3
   232fe:	220a      	movs	r2, #10
   23300:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23302:	230d      	movs	r3, #13
   23304:	18fb      	adds	r3, r7, r3
   23306:	2101      	movs	r1, #1
   23308:	0018      	movs	r0, r3
   2330a:	4b33      	ldr	r3, [pc, #204]	; (233d8 <spi_cmd_rsp+0x124>)
   2330c:	4798      	blx	r3
   2330e:	1e03      	subs	r3, r0, #0
   23310:	d014      	beq.n	2333c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23312:	235c      	movs	r3, #92	; 0x5c
   23314:	33ff      	adds	r3, #255	; 0xff
   23316:	001a      	movs	r2, r3
   23318:	4930      	ldr	r1, [pc, #192]	; (233dc <spi_cmd_rsp+0x128>)
   2331a:	4b31      	ldr	r3, [pc, #196]	; (233e0 <spi_cmd_rsp+0x12c>)
   2331c:	0018      	movs	r0, r3
   2331e:	4b31      	ldr	r3, [pc, #196]	; (233e4 <spi_cmd_rsp+0x130>)
   23320:	4798      	blx	r3
   23322:	4b31      	ldr	r3, [pc, #196]	; (233e8 <spi_cmd_rsp+0x134>)
   23324:	0018      	movs	r0, r3
   23326:	4b2f      	ldr	r3, [pc, #188]	; (233e4 <spi_cmd_rsp+0x130>)
   23328:	4798      	blx	r3
   2332a:	4b30      	ldr	r3, [pc, #192]	; (233ec <spi_cmd_rsp+0x138>)
   2332c:	0018      	movs	r0, r3
   2332e:	4b2d      	ldr	r3, [pc, #180]	; (233e4 <spi_cmd_rsp+0x130>)
   23330:	4798      	blx	r3
			result = N_FAIL;
   23332:	230f      	movs	r3, #15
   23334:	18fb      	adds	r3, r7, r3
   23336:	2200      	movs	r2, #0
   23338:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2333a:	e044      	b.n	233c6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2333c:	230d      	movs	r3, #13
   2333e:	18fb      	adds	r3, r7, r3
   23340:	781b      	ldrb	r3, [r3, #0]
   23342:	1dfa      	adds	r2, r7, #7
   23344:	7812      	ldrb	r2, [r2, #0]
   23346:	429a      	cmp	r2, r3
   23348:	d00b      	beq.n	23362 <spi_cmd_rsp+0xae>
   2334a:	230e      	movs	r3, #14
   2334c:	18fb      	adds	r3, r7, r3
   2334e:	781b      	ldrb	r3, [r3, #0]
   23350:	b25b      	sxtb	r3, r3
   23352:	b2da      	uxtb	r2, r3
   23354:	3a01      	subs	r2, #1
   23356:	b2d1      	uxtb	r1, r2
   23358:	220e      	movs	r2, #14
   2335a:	18ba      	adds	r2, r7, r2
   2335c:	7011      	strb	r1, [r2, #0]
   2335e:	2b00      	cmp	r3, #0
   23360:	dccf      	bgt.n	23302 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23362:	230e      	movs	r3, #14
   23364:	18fb      	adds	r3, r7, r3
   23366:	220a      	movs	r2, #10
   23368:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2336a:	230d      	movs	r3, #13
   2336c:	18fb      	adds	r3, r7, r3
   2336e:	2101      	movs	r1, #1
   23370:	0018      	movs	r0, r3
   23372:	4b19      	ldr	r3, [pc, #100]	; (233d8 <spi_cmd_rsp+0x124>)
   23374:	4798      	blx	r3
   23376:	1e03      	subs	r3, r0, #0
   23378:	d014      	beq.n	233a4 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2337a:	236a      	movs	r3, #106	; 0x6a
   2337c:	33ff      	adds	r3, #255	; 0xff
   2337e:	001a      	movs	r2, r3
   23380:	4916      	ldr	r1, [pc, #88]	; (233dc <spi_cmd_rsp+0x128>)
   23382:	4b17      	ldr	r3, [pc, #92]	; (233e0 <spi_cmd_rsp+0x12c>)
   23384:	0018      	movs	r0, r3
   23386:	4b17      	ldr	r3, [pc, #92]	; (233e4 <spi_cmd_rsp+0x130>)
   23388:	4798      	blx	r3
   2338a:	4b17      	ldr	r3, [pc, #92]	; (233e8 <spi_cmd_rsp+0x134>)
   2338c:	0018      	movs	r0, r3
   2338e:	4b15      	ldr	r3, [pc, #84]	; (233e4 <spi_cmd_rsp+0x130>)
   23390:	4798      	blx	r3
   23392:	4b16      	ldr	r3, [pc, #88]	; (233ec <spi_cmd_rsp+0x138>)
   23394:	0018      	movs	r0, r3
   23396:	4b13      	ldr	r3, [pc, #76]	; (233e4 <spi_cmd_rsp+0x130>)
   23398:	4798      	blx	r3
			result = N_FAIL;
   2339a:	230f      	movs	r3, #15
   2339c:	18fb      	adds	r3, r7, r3
   2339e:	2200      	movs	r2, #0
   233a0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   233a2:	e010      	b.n	233c6 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   233a4:	230d      	movs	r3, #13
   233a6:	18fb      	adds	r3, r7, r3
   233a8:	781b      	ldrb	r3, [r3, #0]
   233aa:	2b00      	cmp	r3, #0
   233ac:	d00b      	beq.n	233c6 <spi_cmd_rsp+0x112>
   233ae:	230e      	movs	r3, #14
   233b0:	18fb      	adds	r3, r7, r3
   233b2:	781b      	ldrb	r3, [r3, #0]
   233b4:	b25b      	sxtb	r3, r3
   233b6:	b2da      	uxtb	r2, r3
   233b8:	3a01      	subs	r2, #1
   233ba:	b2d1      	uxtb	r1, r2
   233bc:	220e      	movs	r2, #14
   233be:	18ba      	adds	r2, r7, r2
   233c0:	7011      	strb	r1, [r2, #0]
   233c2:	2b00      	cmp	r3, #0
   233c4:	dcd1      	bgt.n	2336a <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   233c6:	230f      	movs	r3, #15
   233c8:	18fb      	adds	r3, r7, r3
   233ca:	781b      	ldrb	r3, [r3, #0]
   233cc:	b25b      	sxtb	r3, r3
}
   233ce:	0018      	movs	r0, r3
   233d0:	46bd      	mov	sp, r7
   233d2:	b004      	add	sp, #16
   233d4:	bd80      	pop	{r7, pc}
   233d6:	46c0      	nop			; (mov r8, r8)
   233d8:	00022d29 	.word	0x00022d29
   233dc:	00038b98 	.word	0x00038b98
   233e0:	00038590 	.word	0x00038590
   233e4:	0001dc99 	.word	0x0001dc99
   233e8:	00038624 	.word	0x00038624
   233ec:	000385d0 	.word	0x000385d0

000233f0 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   233f0:	b590      	push	{r4, r7, lr}
   233f2:	b09f      	sub	sp, #124	; 0x7c
   233f4:	af00      	add	r7, sp, #0
   233f6:	60b9      	str	r1, [r7, #8]
   233f8:	607a      	str	r2, [r7, #4]
   233fa:	603b      	str	r3, [r7, #0]
   233fc:	230f      	movs	r3, #15
   233fe:	18fb      	adds	r3, r7, r3
   23400:	1c02      	adds	r2, r0, #0
   23402:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   23404:	2300      	movs	r3, #0
   23406:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   23408:	2301      	movs	r3, #1
   2340a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   2340c:	2338      	movs	r3, #56	; 0x38
   2340e:	18fb      	adds	r3, r7, r3
   23410:	220f      	movs	r2, #15
   23412:	18ba      	adds	r2, r7, r2
   23414:	7812      	ldrb	r2, [r2, #0]
   23416:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23418:	230f      	movs	r3, #15
   2341a:	18fb      	adds	r3, r7, r3
   2341c:	781b      	ldrb	r3, [r3, #0]
   2341e:	3bc1      	subs	r3, #193	; 0xc1
   23420:	2b0e      	cmp	r3, #14
   23422:	d900      	bls.n	23426 <spi_cmd_complete+0x36>
   23424:	e103      	b.n	2362e <spi_cmd_complete+0x23e>
   23426:	009a      	lsls	r2, r3, #2
   23428:	4bd1      	ldr	r3, [pc, #836]	; (23770 <spi_cmd_complete+0x380>)
   2342a:	18d3      	adds	r3, r2, r3
   2342c:	681b      	ldr	r3, [r3, #0]
   2342e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   23430:	68bb      	ldr	r3, [r7, #8]
   23432:	0c1b      	lsrs	r3, r3, #16
   23434:	b2da      	uxtb	r2, r3
   23436:	2338      	movs	r3, #56	; 0x38
   23438:	18fb      	adds	r3, r7, r3
   2343a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2343c:	68bb      	ldr	r3, [r7, #8]
   2343e:	0a1b      	lsrs	r3, r3, #8
   23440:	b2da      	uxtb	r2, r3
   23442:	2338      	movs	r3, #56	; 0x38
   23444:	18fb      	adds	r3, r7, r3
   23446:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23448:	68bb      	ldr	r3, [r7, #8]
   2344a:	b2da      	uxtb	r2, r3
   2344c:	2338      	movs	r3, #56	; 0x38
   2344e:	18fb      	adds	r3, r7, r3
   23450:	70da      	strb	r2, [r3, #3]
		len = 5;
   23452:	2305      	movs	r3, #5
   23454:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   23456:	e0ed      	b.n	23634 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   23458:	68bb      	ldr	r3, [r7, #8]
   2345a:	0a1b      	lsrs	r3, r3, #8
   2345c:	b2da      	uxtb	r2, r3
   2345e:	2338      	movs	r3, #56	; 0x38
   23460:	18fb      	adds	r3, r7, r3
   23462:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23464:	2388      	movs	r3, #136	; 0x88
   23466:	18fb      	adds	r3, r7, r3
   23468:	781b      	ldrb	r3, [r3, #0]
   2346a:	2b01      	cmp	r3, #1
   2346c:	d109      	bne.n	23482 <spi_cmd_complete+0x92>
   2346e:	2338      	movs	r3, #56	; 0x38
   23470:	18fb      	adds	r3, r7, r3
   23472:	785b      	ldrb	r3, [r3, #1]
   23474:	2280      	movs	r2, #128	; 0x80
   23476:	4252      	negs	r2, r2
   23478:	4313      	orrs	r3, r2
   2347a:	b2da      	uxtb	r2, r3
   2347c:	2338      	movs	r3, #56	; 0x38
   2347e:	18fb      	adds	r3, r7, r3
   23480:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   23482:	68bb      	ldr	r3, [r7, #8]
   23484:	b2da      	uxtb	r2, r3
   23486:	2338      	movs	r3, #56	; 0x38
   23488:	18fb      	adds	r3, r7, r3
   2348a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2348c:	2338      	movs	r3, #56	; 0x38
   2348e:	18fb      	adds	r3, r7, r3
   23490:	2200      	movs	r2, #0
   23492:	70da      	strb	r2, [r3, #3]
		len = 5;
   23494:	2305      	movs	r3, #5
   23496:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23498:	e0cc      	b.n	23634 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   2349a:	2338      	movs	r3, #56	; 0x38
   2349c:	18fb      	adds	r3, r7, r3
   2349e:	2200      	movs	r2, #0
   234a0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   234a2:	2338      	movs	r3, #56	; 0x38
   234a4:	18fb      	adds	r3, r7, r3
   234a6:	2200      	movs	r2, #0
   234a8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   234aa:	2338      	movs	r3, #56	; 0x38
   234ac:	18fb      	adds	r3, r7, r3
   234ae:	2200      	movs	r2, #0
   234b0:	70da      	strb	r2, [r3, #3]
		len = 5;
   234b2:	2305      	movs	r3, #5
   234b4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234b6:	e0bd      	b.n	23634 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   234b8:	2338      	movs	r3, #56	; 0x38
   234ba:	18fb      	adds	r3, r7, r3
   234bc:	2200      	movs	r2, #0
   234be:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   234c0:	2338      	movs	r3, #56	; 0x38
   234c2:	18fb      	adds	r3, r7, r3
   234c4:	2200      	movs	r2, #0
   234c6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   234c8:	2338      	movs	r3, #56	; 0x38
   234ca:	18fb      	adds	r3, r7, r3
   234cc:	2200      	movs	r2, #0
   234ce:	70da      	strb	r2, [r3, #3]
		len = 5;
   234d0:	2305      	movs	r3, #5
   234d2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234d4:	e0ae      	b.n	23634 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   234d6:	2338      	movs	r3, #56	; 0x38
   234d8:	18fb      	adds	r3, r7, r3
   234da:	22ff      	movs	r2, #255	; 0xff
   234dc:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   234de:	2338      	movs	r3, #56	; 0x38
   234e0:	18fb      	adds	r3, r7, r3
   234e2:	22ff      	movs	r2, #255	; 0xff
   234e4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   234e6:	2338      	movs	r3, #56	; 0x38
   234e8:	18fb      	adds	r3, r7, r3
   234ea:	22ff      	movs	r2, #255	; 0xff
   234ec:	70da      	strb	r2, [r3, #3]
		len = 5;
   234ee:	2305      	movs	r3, #5
   234f0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   234f2:	e09f      	b.n	23634 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   234f4:	68bb      	ldr	r3, [r7, #8]
   234f6:	0c1b      	lsrs	r3, r3, #16
   234f8:	b2da      	uxtb	r2, r3
   234fa:	2338      	movs	r3, #56	; 0x38
   234fc:	18fb      	adds	r3, r7, r3
   234fe:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23500:	68bb      	ldr	r3, [r7, #8]
   23502:	0a1b      	lsrs	r3, r3, #8
   23504:	b2da      	uxtb	r2, r3
   23506:	2338      	movs	r3, #56	; 0x38
   23508:	18fb      	adds	r3, r7, r3
   2350a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2350c:	68bb      	ldr	r3, [r7, #8]
   2350e:	b2da      	uxtb	r2, r3
   23510:	2338      	movs	r3, #56	; 0x38
   23512:	18fb      	adds	r3, r7, r3
   23514:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   23516:	683b      	ldr	r3, [r7, #0]
   23518:	0a1b      	lsrs	r3, r3, #8
   2351a:	b2da      	uxtb	r2, r3
   2351c:	2338      	movs	r3, #56	; 0x38
   2351e:	18fb      	adds	r3, r7, r3
   23520:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   23522:	683b      	ldr	r3, [r7, #0]
   23524:	b2da      	uxtb	r2, r3
   23526:	2338      	movs	r3, #56	; 0x38
   23528:	18fb      	adds	r3, r7, r3
   2352a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2352c:	2307      	movs	r3, #7
   2352e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23530:	e080      	b.n	23634 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   23532:	68bb      	ldr	r3, [r7, #8]
   23534:	0c1b      	lsrs	r3, r3, #16
   23536:	b2da      	uxtb	r2, r3
   23538:	2338      	movs	r3, #56	; 0x38
   2353a:	18fb      	adds	r3, r7, r3
   2353c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2353e:	68bb      	ldr	r3, [r7, #8]
   23540:	0a1b      	lsrs	r3, r3, #8
   23542:	b2da      	uxtb	r2, r3
   23544:	2338      	movs	r3, #56	; 0x38
   23546:	18fb      	adds	r3, r7, r3
   23548:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2354a:	68bb      	ldr	r3, [r7, #8]
   2354c:	b2da      	uxtb	r2, r3
   2354e:	2338      	movs	r3, #56	; 0x38
   23550:	18fb      	adds	r3, r7, r3
   23552:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   23554:	683b      	ldr	r3, [r7, #0]
   23556:	0c1b      	lsrs	r3, r3, #16
   23558:	b2da      	uxtb	r2, r3
   2355a:	2338      	movs	r3, #56	; 0x38
   2355c:	18fb      	adds	r3, r7, r3
   2355e:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   23560:	683b      	ldr	r3, [r7, #0]
   23562:	0a1b      	lsrs	r3, r3, #8
   23564:	b2da      	uxtb	r2, r3
   23566:	2338      	movs	r3, #56	; 0x38
   23568:	18fb      	adds	r3, r7, r3
   2356a:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   2356c:	683b      	ldr	r3, [r7, #0]
   2356e:	b2da      	uxtb	r2, r3
   23570:	2338      	movs	r3, #56	; 0x38
   23572:	18fb      	adds	r3, r7, r3
   23574:	719a      	strb	r2, [r3, #6]
		len = 8;
   23576:	2308      	movs	r3, #8
   23578:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2357a:	e05b      	b.n	23634 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   2357c:	68bb      	ldr	r3, [r7, #8]
   2357e:	0a1b      	lsrs	r3, r3, #8
   23580:	b2da      	uxtb	r2, r3
   23582:	2338      	movs	r3, #56	; 0x38
   23584:	18fb      	adds	r3, r7, r3
   23586:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23588:	2388      	movs	r3, #136	; 0x88
   2358a:	18fb      	adds	r3, r7, r3
   2358c:	781b      	ldrb	r3, [r3, #0]
   2358e:	2b01      	cmp	r3, #1
   23590:	d109      	bne.n	235a6 <spi_cmd_complete+0x1b6>
   23592:	2338      	movs	r3, #56	; 0x38
   23594:	18fb      	adds	r3, r7, r3
   23596:	785b      	ldrb	r3, [r3, #1]
   23598:	2280      	movs	r2, #128	; 0x80
   2359a:	4252      	negs	r2, r2
   2359c:	4313      	orrs	r3, r2
   2359e:	b2da      	uxtb	r2, r3
   235a0:	2338      	movs	r3, #56	; 0x38
   235a2:	18fb      	adds	r3, r7, r3
   235a4:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   235a6:	68bb      	ldr	r3, [r7, #8]
   235a8:	b2da      	uxtb	r2, r3
   235aa:	2338      	movs	r3, #56	; 0x38
   235ac:	18fb      	adds	r3, r7, r3
   235ae:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   235b0:	687b      	ldr	r3, [r7, #4]
   235b2:	78da      	ldrb	r2, [r3, #3]
   235b4:	2338      	movs	r3, #56	; 0x38
   235b6:	18fb      	adds	r3, r7, r3
   235b8:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   235ba:	687b      	ldr	r3, [r7, #4]
   235bc:	789a      	ldrb	r2, [r3, #2]
   235be:	2338      	movs	r3, #56	; 0x38
   235c0:	18fb      	adds	r3, r7, r3
   235c2:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   235c4:	687b      	ldr	r3, [r7, #4]
   235c6:	785a      	ldrb	r2, [r3, #1]
   235c8:	2338      	movs	r3, #56	; 0x38
   235ca:	18fb      	adds	r3, r7, r3
   235cc:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   235ce:	687b      	ldr	r3, [r7, #4]
   235d0:	781a      	ldrb	r2, [r3, #0]
   235d2:	2338      	movs	r3, #56	; 0x38
   235d4:	18fb      	adds	r3, r7, r3
   235d6:	719a      	strb	r2, [r3, #6]
		len = 8;
   235d8:	2308      	movs	r3, #8
   235da:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   235dc:	e02a      	b.n	23634 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   235de:	68bb      	ldr	r3, [r7, #8]
   235e0:	0c1b      	lsrs	r3, r3, #16
   235e2:	b2da      	uxtb	r2, r3
   235e4:	2338      	movs	r3, #56	; 0x38
   235e6:	18fb      	adds	r3, r7, r3
   235e8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   235ea:	68bb      	ldr	r3, [r7, #8]
   235ec:	0a1b      	lsrs	r3, r3, #8
   235ee:	b2da      	uxtb	r2, r3
   235f0:	2338      	movs	r3, #56	; 0x38
   235f2:	18fb      	adds	r3, r7, r3
   235f4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   235f6:	68bb      	ldr	r3, [r7, #8]
   235f8:	b2da      	uxtb	r2, r3
   235fa:	2338      	movs	r3, #56	; 0x38
   235fc:	18fb      	adds	r3, r7, r3
   235fe:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   23600:	687b      	ldr	r3, [r7, #4]
   23602:	78da      	ldrb	r2, [r3, #3]
   23604:	2338      	movs	r3, #56	; 0x38
   23606:	18fb      	adds	r3, r7, r3
   23608:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2360a:	687b      	ldr	r3, [r7, #4]
   2360c:	789a      	ldrb	r2, [r3, #2]
   2360e:	2338      	movs	r3, #56	; 0x38
   23610:	18fb      	adds	r3, r7, r3
   23612:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   23614:	687b      	ldr	r3, [r7, #4]
   23616:	785a      	ldrb	r2, [r3, #1]
   23618:	2338      	movs	r3, #56	; 0x38
   2361a:	18fb      	adds	r3, r7, r3
   2361c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2361e:	687b      	ldr	r3, [r7, #4]
   23620:	781a      	ldrb	r2, [r3, #0]
   23622:	2338      	movs	r3, #56	; 0x38
   23624:	18fb      	adds	r3, r7, r3
   23626:	71da      	strb	r2, [r3, #7]
		len = 9;
   23628:	2309      	movs	r3, #9
   2362a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2362c:	e002      	b.n	23634 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2362e:	2300      	movs	r3, #0
   23630:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   23632:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23636:	2b01      	cmp	r3, #1
   23638:	d001      	beq.n	2363e <spi_cmd_complete+0x24e>
		return result;
   2363a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2363c:	e33a      	b.n	23cb4 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2363e:	4b4d      	ldr	r3, [pc, #308]	; (23774 <spi_cmd_complete+0x384>)
   23640:	781b      	ldrb	r3, [r3, #0]
   23642:	2b00      	cmp	r3, #0
   23644:	d111      	bne.n	2366a <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23648:	1e5c      	subs	r4, r3, #1
   2364a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2364c:	3b01      	subs	r3, #1
   2364e:	001a      	movs	r2, r3
   23650:	2338      	movs	r3, #56	; 0x38
   23652:	18fb      	adds	r3, r7, r3
   23654:	0019      	movs	r1, r3
   23656:	207f      	movs	r0, #127	; 0x7f
   23658:	4b47      	ldr	r3, [pc, #284]	; (23778 <spi_cmd_complete+0x388>)
   2365a:	4798      	blx	r3
   2365c:	0003      	movs	r3, r0
   2365e:	18db      	adds	r3, r3, r3
   23660:	b2da      	uxtb	r2, r3
   23662:	2338      	movs	r3, #56	; 0x38
   23664:	18fb      	adds	r3, r7, r3
   23666:	551a      	strb	r2, [r3, r4]
   23668:	e002      	b.n	23670 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2366a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2366c:	3b01      	subs	r3, #1
   2366e:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   23670:	230f      	movs	r3, #15
   23672:	18fb      	adds	r3, r7, r3
   23674:	781b      	ldrb	r3, [r3, #0]
   23676:	2bcf      	cmp	r3, #207	; 0xcf
   23678:	d009      	beq.n	2368e <spi_cmd_complete+0x29e>
   2367a:	230f      	movs	r3, #15
   2367c:	18fb      	adds	r3, r7, r3
   2367e:	781b      	ldrb	r3, [r3, #0]
   23680:	2bc5      	cmp	r3, #197	; 0xc5
   23682:	d004      	beq.n	2368e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   23684:	230f      	movs	r3, #15
   23686:	18fb      	adds	r3, r7, r3
   23688:	781b      	ldrb	r3, [r3, #0]
   2368a:	2bc6      	cmp	r3, #198	; 0xc6
   2368c:	d103      	bne.n	23696 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   2368e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23690:	3306      	adds	r3, #6
   23692:	673b      	str	r3, [r7, #112]	; 0x70
   23694:	e018      	b.n	236c8 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23696:	230f      	movs	r3, #15
   23698:	18fb      	adds	r3, r7, r3
   2369a:	781b      	ldrb	r3, [r3, #0]
   2369c:	2bc4      	cmp	r3, #196	; 0xc4
   2369e:	d004      	beq.n	236aa <spi_cmd_complete+0x2ba>
   236a0:	230f      	movs	r3, #15
   236a2:	18fb      	adds	r3, r7, r3
   236a4:	781b      	ldrb	r3, [r3, #0]
   236a6:	2bca      	cmp	r3, #202	; 0xca
   236a8:	d10b      	bne.n	236c2 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   236aa:	4b32      	ldr	r3, [pc, #200]	; (23774 <spi_cmd_complete+0x384>)
   236ac:	781b      	ldrb	r3, [r3, #0]
   236ae:	2b00      	cmp	r3, #0
   236b0:	d103      	bne.n	236ba <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   236b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   236b4:	330c      	adds	r3, #12
   236b6:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   236b8:	e006      	b.n	236c8 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   236ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   236bc:	330a      	adds	r3, #10
   236be:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   236c0:	e002      	b.n	236c8 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   236c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   236c4:	3305      	adds	r3, #5
   236c6:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   236c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   236ca:	2b20      	cmp	r3, #32
   236cc:	d914      	bls.n	236f8 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   236ce:	23f7      	movs	r3, #247	; 0xf7
   236d0:	005a      	lsls	r2, r3, #1
   236d2:	492a      	ldr	r1, [pc, #168]	; (2377c <spi_cmd_complete+0x38c>)
   236d4:	4b2a      	ldr	r3, [pc, #168]	; (23780 <spi_cmd_complete+0x390>)
   236d6:	0018      	movs	r0, r3
   236d8:	4b2a      	ldr	r3, [pc, #168]	; (23784 <spi_cmd_complete+0x394>)
   236da:	4798      	blx	r3
   236dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
   236de:	4b2a      	ldr	r3, [pc, #168]	; (23788 <spi_cmd_complete+0x398>)
   236e0:	2220      	movs	r2, #32
   236e2:	0018      	movs	r0, r3
   236e4:	4b27      	ldr	r3, [pc, #156]	; (23784 <spi_cmd_complete+0x394>)
   236e6:	4798      	blx	r3
   236e8:	4b28      	ldr	r3, [pc, #160]	; (2378c <spi_cmd_complete+0x39c>)
   236ea:	0018      	movs	r0, r3
   236ec:	4b25      	ldr	r3, [pc, #148]	; (23784 <spi_cmd_complete+0x394>)
   236ee:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   236f0:	2300      	movs	r3, #0
   236f2:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   236f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   236f6:	e2dd      	b.n	23cb4 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   236f8:	2377      	movs	r3, #119	; 0x77
   236fa:	18fb      	adds	r3, r7, r3
   236fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   236fe:	701a      	strb	r2, [r3, #0]
   23700:	e00d      	b.n	2371e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   23702:	2377      	movs	r3, #119	; 0x77
   23704:	18fb      	adds	r3, r7, r3
   23706:	781b      	ldrb	r3, [r3, #0]
   23708:	2238      	movs	r2, #56	; 0x38
   2370a:	18ba      	adds	r2, r7, r2
   2370c:	2100      	movs	r1, #0
   2370e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   23710:	2377      	movs	r3, #119	; 0x77
   23712:	18fb      	adds	r3, r7, r3
   23714:	781a      	ldrb	r2, [r3, #0]
   23716:	2377      	movs	r3, #119	; 0x77
   23718:	18fb      	adds	r3, r7, r3
   2371a:	3201      	adds	r2, #1
   2371c:	701a      	strb	r2, [r3, #0]
   2371e:	2377      	movs	r3, #119	; 0x77
   23720:	18fb      	adds	r3, r7, r3
   23722:	781a      	ldrb	r2, [r3, #0]
   23724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23726:	429a      	cmp	r2, r3
   23728:	d3eb      	bcc.n	23702 <spi_cmd_complete+0x312>
	}
	rix = len;
   2372a:	2376      	movs	r3, #118	; 0x76
   2372c:	18fb      	adds	r3, r7, r3
   2372e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23730:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   23732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23734:	b29a      	uxth	r2, r3
   23736:	2318      	movs	r3, #24
   23738:	18f9      	adds	r1, r7, r3
   2373a:	2338      	movs	r3, #56	; 0x38
   2373c:	18fb      	adds	r3, r7, r3
   2373e:	0018      	movs	r0, r3
   23740:	4b13      	ldr	r3, [pc, #76]	; (23790 <spi_cmd_complete+0x3a0>)
   23742:	4798      	blx	r3
   23744:	1e03      	subs	r3, r0, #0
   23746:	d027      	beq.n	23798 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23748:	23fa      	movs	r3, #250	; 0xfa
   2374a:	33ff      	adds	r3, #255	; 0xff
   2374c:	001a      	movs	r2, r3
   2374e:	490b      	ldr	r1, [pc, #44]	; (2377c <spi_cmd_complete+0x38c>)
   23750:	4b0b      	ldr	r3, [pc, #44]	; (23780 <spi_cmd_complete+0x390>)
   23752:	0018      	movs	r0, r3
   23754:	4b0b      	ldr	r3, [pc, #44]	; (23784 <spi_cmd_complete+0x394>)
   23756:	4798      	blx	r3
   23758:	4b0e      	ldr	r3, [pc, #56]	; (23794 <spi_cmd_complete+0x3a4>)
   2375a:	0018      	movs	r0, r3
   2375c:	4b09      	ldr	r3, [pc, #36]	; (23784 <spi_cmd_complete+0x394>)
   2375e:	4798      	blx	r3
   23760:	4b0a      	ldr	r3, [pc, #40]	; (2378c <spi_cmd_complete+0x39c>)
   23762:	0018      	movs	r0, r3
   23764:	4b07      	ldr	r3, [pc, #28]	; (23784 <spi_cmd_complete+0x394>)
   23766:	4798      	blx	r3
		result = N_FAIL;
   23768:	2300      	movs	r3, #0
   2376a:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2376c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2376e:	e2a1      	b.n	23cb4 <spi_cmd_complete+0x8c4>
   23770:	00038b44 	.word	0x00038b44
   23774:	20003e98 	.word	0x20003e98
   23778:	00022e25 	.word	0x00022e25
   2377c:	00038ba4 	.word	0x00038ba4
   23780:	00038590 	.word	0x00038590
   23784:	0001dc99 	.word	0x0001dc99
   23788:	00038658 	.word	0x00038658
   2378c:	000385d0 	.word	0x000385d0
   23790:	00022db1 	.word	0x00022db1
   23794:	000385a4 	.word	0x000385a4
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23798:	230f      	movs	r3, #15
   2379a:	18fb      	adds	r3, r7, r3
   2379c:	781b      	ldrb	r3, [r3, #0]
   2379e:	2bcf      	cmp	r3, #207	; 0xcf
   237a0:	d009      	beq.n	237b6 <spi_cmd_complete+0x3c6>
   237a2:	230f      	movs	r3, #15
   237a4:	18fb      	adds	r3, r7, r3
   237a6:	781b      	ldrb	r3, [r3, #0]
   237a8:	2bc5      	cmp	r3, #197	; 0xc5
   237aa:	d004      	beq.n	237b6 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   237ac:	230f      	movs	r3, #15
   237ae:	18fb      	adds	r3, r7, r3
   237b0:	781b      	ldrb	r3, [r3, #0]
   237b2:	2bc6      	cmp	r3, #198	; 0xc6
   237b4:	d106      	bne.n	237c4 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   237b6:	2376      	movs	r3, #118	; 0x76
   237b8:	18fb      	adds	r3, r7, r3
   237ba:	781a      	ldrb	r2, [r3, #0]
   237bc:	2376      	movs	r3, #118	; 0x76
   237be:	18fb      	adds	r3, r7, r3
   237c0:	3201      	adds	r2, #1
   237c2:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   237c4:	2376      	movs	r3, #118	; 0x76
   237c6:	18fb      	adds	r3, r7, r3
   237c8:	781b      	ldrb	r3, [r3, #0]
   237ca:	2276      	movs	r2, #118	; 0x76
   237cc:	18ba      	adds	r2, r7, r2
   237ce:	1c59      	adds	r1, r3, #1
   237d0:	7011      	strb	r1, [r2, #0]
   237d2:	001a      	movs	r2, r3
   237d4:	2318      	movs	r3, #24
   237d6:	18fb      	adds	r3, r7, r3
   237d8:	5c9a      	ldrb	r2, [r3, r2]
   237da:	2317      	movs	r3, #23
   237dc:	18fb      	adds	r3, r7, r3
   237de:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   237e0:	2317      	movs	r3, #23
   237e2:	18fb      	adds	r3, r7, r3
   237e4:	781b      	ldrb	r3, [r3, #0]
   237e6:	220f      	movs	r2, #15
   237e8:	18ba      	adds	r2, r7, r2
   237ea:	7812      	ldrb	r2, [r2, #0]
   237ec:	429a      	cmp	r2, r3
   237ee:	d018      	beq.n	23822 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   237f0:	4add      	ldr	r2, [pc, #884]	; (23b68 <spi_cmd_complete+0x778>)
   237f2:	49de      	ldr	r1, [pc, #888]	; (23b6c <spi_cmd_complete+0x77c>)
   237f4:	4bde      	ldr	r3, [pc, #888]	; (23b70 <spi_cmd_complete+0x780>)
   237f6:	0018      	movs	r0, r3
   237f8:	4bde      	ldr	r3, [pc, #888]	; (23b74 <spi_cmd_complete+0x784>)
   237fa:	4798      	blx	r3
   237fc:	230f      	movs	r3, #15
   237fe:	18fb      	adds	r3, r7, r3
   23800:	7819      	ldrb	r1, [r3, #0]
   23802:	2317      	movs	r3, #23
   23804:	18fb      	adds	r3, r7, r3
   23806:	781b      	ldrb	r3, [r3, #0]
   23808:	001a      	movs	r2, r3
   2380a:	4bdb      	ldr	r3, [pc, #876]	; (23b78 <spi_cmd_complete+0x788>)
   2380c:	0018      	movs	r0, r3
   2380e:	4bd9      	ldr	r3, [pc, #868]	; (23b74 <spi_cmd_complete+0x784>)
   23810:	4798      	blx	r3
   23812:	4bda      	ldr	r3, [pc, #872]	; (23b7c <spi_cmd_complete+0x78c>)
   23814:	0018      	movs	r0, r3
   23816:	4bd7      	ldr	r3, [pc, #860]	; (23b74 <spi_cmd_complete+0x784>)
   23818:	4798      	blx	r3
		result = N_FAIL;
   2381a:	2300      	movs	r3, #0
   2381c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2381e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23820:	e248      	b.n	23cb4 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   23822:	2376      	movs	r3, #118	; 0x76
   23824:	18fb      	adds	r3, r7, r3
   23826:	781b      	ldrb	r3, [r3, #0]
   23828:	2276      	movs	r2, #118	; 0x76
   2382a:	18ba      	adds	r2, r7, r2
   2382c:	1c59      	adds	r1, r3, #1
   2382e:	7011      	strb	r1, [r2, #0]
   23830:	001a      	movs	r2, r3
   23832:	2318      	movs	r3, #24
   23834:	18fb      	adds	r3, r7, r3
   23836:	5c9a      	ldrb	r2, [r3, r2]
   23838:	2317      	movs	r3, #23
   2383a:	18fb      	adds	r3, r7, r3
   2383c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   2383e:	2317      	movs	r3, #23
   23840:	18fb      	adds	r3, r7, r3
   23842:	781b      	ldrb	r3, [r3, #0]
   23844:	2b00      	cmp	r3, #0
   23846:	d016      	beq.n	23876 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   23848:	4acd      	ldr	r2, [pc, #820]	; (23b80 <spi_cmd_complete+0x790>)
   2384a:	49c8      	ldr	r1, [pc, #800]	; (23b6c <spi_cmd_complete+0x77c>)
   2384c:	4bc8      	ldr	r3, [pc, #800]	; (23b70 <spi_cmd_complete+0x780>)
   2384e:	0018      	movs	r0, r3
   23850:	4bc8      	ldr	r3, [pc, #800]	; (23b74 <spi_cmd_complete+0x784>)
   23852:	4798      	blx	r3
   23854:	2317      	movs	r3, #23
   23856:	18fb      	adds	r3, r7, r3
   23858:	781b      	ldrb	r3, [r3, #0]
   2385a:	001a      	movs	r2, r3
   2385c:	4bc9      	ldr	r3, [pc, #804]	; (23b84 <spi_cmd_complete+0x794>)
   2385e:	0011      	movs	r1, r2
   23860:	0018      	movs	r0, r3
   23862:	4bc4      	ldr	r3, [pc, #784]	; (23b74 <spi_cmd_complete+0x784>)
   23864:	4798      	blx	r3
   23866:	4bc5      	ldr	r3, [pc, #788]	; (23b7c <spi_cmd_complete+0x78c>)
   23868:	0018      	movs	r0, r3
   2386a:	4bc2      	ldr	r3, [pc, #776]	; (23b74 <spi_cmd_complete+0x784>)
   2386c:	4798      	blx	r3
		result = N_FAIL;
   2386e:	2300      	movs	r3, #0
   23870:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23872:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23874:	e21e      	b.n	23cb4 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   23876:	230f      	movs	r3, #15
   23878:	18fb      	adds	r3, r7, r3
   2387a:	781b      	ldrb	r3, [r3, #0]
   2387c:	2bc4      	cmp	r3, #196	; 0xc4
   2387e:	d00f      	beq.n	238a0 <spi_cmd_complete+0x4b0>
   23880:	230f      	movs	r3, #15
   23882:	18fb      	adds	r3, r7, r3
   23884:	781b      	ldrb	r3, [r3, #0]
   23886:	2bca      	cmp	r3, #202	; 0xca
   23888:	d00a      	beq.n	238a0 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2388a:	230f      	movs	r3, #15
   2388c:	18fb      	adds	r3, r7, r3
   2388e:	781b      	ldrb	r3, [r3, #0]
   23890:	2bc2      	cmp	r3, #194	; 0xc2
   23892:	d005      	beq.n	238a0 <spi_cmd_complete+0x4b0>
   23894:	230f      	movs	r3, #15
   23896:	18fb      	adds	r3, r7, r3
   23898:	781b      	ldrb	r3, [r3, #0]
   2389a:	2bc8      	cmp	r3, #200	; 0xc8
   2389c:	d000      	beq.n	238a0 <spi_cmd_complete+0x4b0>
   2389e:	e208      	b.n	23cb2 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   238a0:	230a      	movs	r3, #10
   238a2:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   238a4:	2376      	movs	r3, #118	; 0x76
   238a6:	18fb      	adds	r3, r7, r3
   238a8:	781a      	ldrb	r2, [r3, #0]
   238aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   238ac:	429a      	cmp	r2, r3
   238ae:	d218      	bcs.n	238e2 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   238b0:	2376      	movs	r3, #118	; 0x76
   238b2:	18fb      	adds	r3, r7, r3
   238b4:	781b      	ldrb	r3, [r3, #0]
   238b6:	2276      	movs	r2, #118	; 0x76
   238b8:	18ba      	adds	r2, r7, r2
   238ba:	1c59      	adds	r1, r3, #1
   238bc:	7011      	strb	r1, [r2, #0]
   238be:	001a      	movs	r2, r3
   238c0:	2318      	movs	r3, #24
   238c2:	18fb      	adds	r3, r7, r3
   238c4:	5c9a      	ldrb	r2, [r3, r2]
   238c6:	2317      	movs	r3, #23
   238c8:	18fb      	adds	r3, r7, r3
   238ca:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   238cc:	2317      	movs	r3, #23
   238ce:	18fb      	adds	r3, r7, r3
   238d0:	781b      	ldrb	r3, [r3, #0]
   238d2:	091b      	lsrs	r3, r3, #4
   238d4:	b2db      	uxtb	r3, r3
   238d6:	001a      	movs	r2, r3
   238d8:	230f      	movs	r3, #15
   238da:	4013      	ands	r3, r2
   238dc:	2b0f      	cmp	r3, #15
   238de:	d103      	bne.n	238e8 <spi_cmd_complete+0x4f8>
					break;
   238e0:	e007      	b.n	238f2 <spi_cmd_complete+0x502>
					retry = 0;
   238e2:	2300      	movs	r3, #0
   238e4:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   238e6:	e004      	b.n	238f2 <spi_cmd_complete+0x502>
			} while (retry--);
   238e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   238ea:	1e5a      	subs	r2, r3, #1
   238ec:	667a      	str	r2, [r7, #100]	; 0x64
   238ee:	2b00      	cmp	r3, #0
   238f0:	d1d8      	bne.n	238a4 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   238f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   238f4:	2b00      	cmp	r3, #0
   238f6:	dc18      	bgt.n	2392a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   238f8:	2395      	movs	r3, #149	; 0x95
   238fa:	009a      	lsls	r2, r3, #2
   238fc:	499b      	ldr	r1, [pc, #620]	; (23b6c <spi_cmd_complete+0x77c>)
   238fe:	4b9c      	ldr	r3, [pc, #624]	; (23b70 <spi_cmd_complete+0x780>)
   23900:	0018      	movs	r0, r3
   23902:	4b9c      	ldr	r3, [pc, #624]	; (23b74 <spi_cmd_complete+0x784>)
   23904:	4798      	blx	r3
   23906:	2317      	movs	r3, #23
   23908:	18fb      	adds	r3, r7, r3
   2390a:	781b      	ldrb	r3, [r3, #0]
   2390c:	001a      	movs	r2, r3
   2390e:	4b9e      	ldr	r3, [pc, #632]	; (23b88 <spi_cmd_complete+0x798>)
   23910:	0011      	movs	r1, r2
   23912:	0018      	movs	r0, r3
   23914:	4b97      	ldr	r3, [pc, #604]	; (23b74 <spi_cmd_complete+0x784>)
   23916:	4798      	blx	r3
   23918:	4b98      	ldr	r3, [pc, #608]	; (23b7c <spi_cmd_complete+0x78c>)
   2391a:	0018      	movs	r0, r3
   2391c:	4b95      	ldr	r3, [pc, #596]	; (23b74 <spi_cmd_complete+0x784>)
   2391e:	4798      	blx	r3
				result = N_RESET;
   23920:	2301      	movs	r3, #1
   23922:	425b      	negs	r3, r3
   23924:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   23926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23928:	e1c4      	b.n	23cb4 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2392a:	230f      	movs	r3, #15
   2392c:	18fb      	adds	r3, r7, r3
   2392e:	781b      	ldrb	r3, [r3, #0]
   23930:	2bc4      	cmp	r3, #196	; 0xc4
   23932:	d005      	beq.n	23940 <spi_cmd_complete+0x550>
   23934:	230f      	movs	r3, #15
   23936:	18fb      	adds	r3, r7, r3
   23938:	781b      	ldrb	r3, [r3, #0]
   2393a:	2bca      	cmp	r3, #202	; 0xca
   2393c:	d000      	beq.n	23940 <spi_cmd_complete+0x550>
   2393e:	e08e      	b.n	23a5e <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   23940:	2376      	movs	r3, #118	; 0x76
   23942:	18fb      	adds	r3, r7, r3
   23944:	781b      	ldrb	r3, [r3, #0]
   23946:	3303      	adds	r3, #3
   23948:	001a      	movs	r2, r3
   2394a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2394c:	429a      	cmp	r2, r3
   2394e:	d23c      	bcs.n	239ca <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   23950:	2376      	movs	r3, #118	; 0x76
   23952:	18fb      	adds	r3, r7, r3
   23954:	781b      	ldrb	r3, [r3, #0]
   23956:	2276      	movs	r2, #118	; 0x76
   23958:	18ba      	adds	r2, r7, r2
   2395a:	1c59      	adds	r1, r3, #1
   2395c:	7011      	strb	r1, [r2, #0]
   2395e:	001a      	movs	r2, r3
   23960:	2318      	movs	r3, #24
   23962:	18fb      	adds	r3, r7, r3
   23964:	5c9a      	ldrb	r2, [r3, r2]
   23966:	687b      	ldr	r3, [r7, #4]
   23968:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   2396a:	687b      	ldr	r3, [r7, #4]
   2396c:	1c5a      	adds	r2, r3, #1
   2396e:	2376      	movs	r3, #118	; 0x76
   23970:	18fb      	adds	r3, r7, r3
   23972:	781b      	ldrb	r3, [r3, #0]
   23974:	2176      	movs	r1, #118	; 0x76
   23976:	1879      	adds	r1, r7, r1
   23978:	1c58      	adds	r0, r3, #1
   2397a:	7008      	strb	r0, [r1, #0]
   2397c:	0019      	movs	r1, r3
   2397e:	2318      	movs	r3, #24
   23980:	18fb      	adds	r3, r7, r3
   23982:	5c5b      	ldrb	r3, [r3, r1]
   23984:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   23986:	687b      	ldr	r3, [r7, #4]
   23988:	1c9a      	adds	r2, r3, #2
   2398a:	2376      	movs	r3, #118	; 0x76
   2398c:	18fb      	adds	r3, r7, r3
   2398e:	781b      	ldrb	r3, [r3, #0]
   23990:	2176      	movs	r1, #118	; 0x76
   23992:	1879      	adds	r1, r7, r1
   23994:	1c58      	adds	r0, r3, #1
   23996:	7008      	strb	r0, [r1, #0]
   23998:	0019      	movs	r1, r3
   2399a:	2318      	movs	r3, #24
   2399c:	18fb      	adds	r3, r7, r3
   2399e:	5c5b      	ldrb	r3, [r3, r1]
   239a0:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   239a2:	687b      	ldr	r3, [r7, #4]
   239a4:	1cda      	adds	r2, r3, #3
   239a6:	2376      	movs	r3, #118	; 0x76
   239a8:	18fb      	adds	r3, r7, r3
   239aa:	781b      	ldrb	r3, [r3, #0]
   239ac:	2176      	movs	r1, #118	; 0x76
   239ae:	1879      	adds	r1, r7, r1
   239b0:	1c58      	adds	r0, r3, #1
   239b2:	7008      	strb	r0, [r1, #0]
   239b4:	0019      	movs	r1, r3
   239b6:	2318      	movs	r3, #24
   239b8:	18fb      	adds	r3, r7, r3
   239ba:	5c5b      	ldrb	r3, [r3, r1]
   239bc:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   239be:	4b73      	ldr	r3, [pc, #460]	; (23b8c <spi_cmd_complete+0x79c>)
   239c0:	781b      	ldrb	r3, [r3, #0]
   239c2:	2b00      	cmp	r3, #0
   239c4:	d000      	beq.n	239c8 <spi_cmd_complete+0x5d8>
   239c6:	e174      	b.n	23cb2 <spi_cmd_complete+0x8c2>
   239c8:	e011      	b.n	239ee <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   239ca:	4a71      	ldr	r2, [pc, #452]	; (23b90 <spi_cmd_complete+0x7a0>)
   239cc:	4967      	ldr	r1, [pc, #412]	; (23b6c <spi_cmd_complete+0x77c>)
   239ce:	4b68      	ldr	r3, [pc, #416]	; (23b70 <spi_cmd_complete+0x780>)
   239d0:	0018      	movs	r0, r3
   239d2:	4b68      	ldr	r3, [pc, #416]	; (23b74 <spi_cmd_complete+0x784>)
   239d4:	4798      	blx	r3
   239d6:	4b6f      	ldr	r3, [pc, #444]	; (23b94 <spi_cmd_complete+0x7a4>)
   239d8:	0018      	movs	r0, r3
   239da:	4b66      	ldr	r3, [pc, #408]	; (23b74 <spi_cmd_complete+0x784>)
   239dc:	4798      	blx	r3
   239de:	4b67      	ldr	r3, [pc, #412]	; (23b7c <spi_cmd_complete+0x78c>)
   239e0:	0018      	movs	r0, r3
   239e2:	4b64      	ldr	r3, [pc, #400]	; (23b74 <spi_cmd_complete+0x784>)
   239e4:	4798      	blx	r3
					result = N_FAIL;
   239e6:	2300      	movs	r3, #0
   239e8:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   239ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   239ec:	e162      	b.n	23cb4 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   239ee:	2376      	movs	r3, #118	; 0x76
   239f0:	18fb      	adds	r3, r7, r3
   239f2:	781b      	ldrb	r3, [r3, #0]
   239f4:	3301      	adds	r3, #1
   239f6:	001a      	movs	r2, r3
   239f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   239fa:	429a      	cmp	r2, r3
   239fc:	d21c      	bcs.n	23a38 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   239fe:	2376      	movs	r3, #118	; 0x76
   23a00:	18fb      	adds	r3, r7, r3
   23a02:	781b      	ldrb	r3, [r3, #0]
   23a04:	2276      	movs	r2, #118	; 0x76
   23a06:	18ba      	adds	r2, r7, r2
   23a08:	1c59      	adds	r1, r3, #1
   23a0a:	7011      	strb	r1, [r2, #0]
   23a0c:	001a      	movs	r2, r3
   23a0e:	2318      	movs	r3, #24
   23a10:	18fb      	adds	r3, r7, r3
   23a12:	5c9a      	ldrb	r2, [r3, r2]
   23a14:	2314      	movs	r3, #20
   23a16:	18fb      	adds	r3, r7, r3
   23a18:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   23a1a:	2376      	movs	r3, #118	; 0x76
   23a1c:	18fb      	adds	r3, r7, r3
   23a1e:	781b      	ldrb	r3, [r3, #0]
   23a20:	2276      	movs	r2, #118	; 0x76
   23a22:	18ba      	adds	r2, r7, r2
   23a24:	1c59      	adds	r1, r3, #1
   23a26:	7011      	strb	r1, [r2, #0]
   23a28:	001a      	movs	r2, r3
   23a2a:	2318      	movs	r3, #24
   23a2c:	18fb      	adds	r3, r7, r3
   23a2e:	5c9a      	ldrb	r2, [r3, r2]
   23a30:	2314      	movs	r3, #20
   23a32:	18fb      	adds	r3, r7, r3
   23a34:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   23a36:	e13c      	b.n	23cb2 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   23a38:	239c      	movs	r3, #156	; 0x9c
   23a3a:	009a      	lsls	r2, r3, #2
   23a3c:	494b      	ldr	r1, [pc, #300]	; (23b6c <spi_cmd_complete+0x77c>)
   23a3e:	4b4c      	ldr	r3, [pc, #304]	; (23b70 <spi_cmd_complete+0x780>)
   23a40:	0018      	movs	r0, r3
   23a42:	4b4c      	ldr	r3, [pc, #304]	; (23b74 <spi_cmd_complete+0x784>)
   23a44:	4798      	blx	r3
   23a46:	4b54      	ldr	r3, [pc, #336]	; (23b98 <spi_cmd_complete+0x7a8>)
   23a48:	0018      	movs	r0, r3
   23a4a:	4b4a      	ldr	r3, [pc, #296]	; (23b74 <spi_cmd_complete+0x784>)
   23a4c:	4798      	blx	r3
   23a4e:	4b4b      	ldr	r3, [pc, #300]	; (23b7c <spi_cmd_complete+0x78c>)
   23a50:	0018      	movs	r0, r3
   23a52:	4b48      	ldr	r3, [pc, #288]	; (23b74 <spi_cmd_complete+0x784>)
   23a54:	4798      	blx	r3
						result = N_FAIL;
   23a56:	2300      	movs	r3, #0
   23a58:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   23a5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23a5c:	e12a      	b.n	23cb4 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   23a5e:	230f      	movs	r3, #15
   23a60:	18fb      	adds	r3, r7, r3
   23a62:	781b      	ldrb	r3, [r3, #0]
   23a64:	2bc2      	cmp	r3, #194	; 0xc2
   23a66:	d005      	beq.n	23a74 <spi_cmd_complete+0x684>
   23a68:	230f      	movs	r3, #15
   23a6a:	18fb      	adds	r3, r7, r3
   23a6c:	781b      	ldrb	r3, [r3, #0]
   23a6e:	2bc8      	cmp	r3, #200	; 0xc8
   23a70:	d000      	beq.n	23a74 <spi_cmd_complete+0x684>
   23a72:	e11e      	b.n	23cb2 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   23a74:	2300      	movs	r3, #0
   23a76:	663b      	str	r3, [r7, #96]	; 0x60
   23a78:	e011      	b.n	23a9e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   23a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23a7c:	1c5a      	adds	r2, r3, #1
   23a7e:	663a      	str	r2, [r7, #96]	; 0x60
   23a80:	001a      	movs	r2, r3
   23a82:	687b      	ldr	r3, [r7, #4]
   23a84:	189a      	adds	r2, r3, r2
   23a86:	2376      	movs	r3, #118	; 0x76
   23a88:	18fb      	adds	r3, r7, r3
   23a8a:	781b      	ldrb	r3, [r3, #0]
   23a8c:	2176      	movs	r1, #118	; 0x76
   23a8e:	1879      	adds	r1, r7, r1
   23a90:	1c58      	adds	r0, r3, #1
   23a92:	7008      	strb	r0, [r1, #0]
   23a94:	0019      	movs	r1, r3
   23a96:	2318      	movs	r3, #24
   23a98:	18fb      	adds	r3, r7, r3
   23a9a:	5c5b      	ldrb	r3, [r3, r1]
   23a9c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   23a9e:	2376      	movs	r3, #118	; 0x76
   23aa0:	18fb      	adds	r3, r7, r3
   23aa2:	781a      	ldrb	r2, [r3, #0]
   23aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23aa6:	429a      	cmp	r2, r3
   23aa8:	d203      	bcs.n	23ab2 <spi_cmd_complete+0x6c2>
   23aaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23aac:	683b      	ldr	r3, [r7, #0]
   23aae:	429a      	cmp	r2, r3
   23ab0:	d3e3      	bcc.n	23a7a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   23ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23ab4:	683a      	ldr	r2, [r7, #0]
   23ab6:	1ad3      	subs	r3, r2, r3
   23ab8:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   23aba:	683b      	ldr	r3, [r7, #0]
   23abc:	2b00      	cmp	r3, #0
   23abe:	d100      	bne.n	23ac2 <spi_cmd_complete+0x6d2>
   23ac0:	e0f1      	b.n	23ca6 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   23ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23ac4:	2280      	movs	r2, #128	; 0x80
   23ac6:	0192      	lsls	r2, r2, #6
   23ac8:	1ad3      	subs	r3, r2, r3
   23aca:	001a      	movs	r2, r3
   23acc:	683b      	ldr	r3, [r7, #0]
   23ace:	429a      	cmp	r2, r3
   23ad0:	d302      	bcc.n	23ad8 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   23ad2:	683b      	ldr	r3, [r7, #0]
   23ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
   23ad6:	e004      	b.n	23ae2 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   23ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23ada:	2280      	movs	r2, #128	; 0x80
   23adc:	0192      	lsls	r2, r2, #6
   23ade:	1ad3      	subs	r3, r2, r3
   23ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23ae4:	687a      	ldr	r2, [r7, #4]
   23ae6:	18d3      	adds	r3, r2, r3
   23ae8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   23aea:	b292      	uxth	r2, r2
   23aec:	0011      	movs	r1, r2
   23aee:	0018      	movs	r0, r3
   23af0:	4b2a      	ldr	r3, [pc, #168]	; (23b9c <spi_cmd_complete+0x7ac>)
   23af2:	4798      	blx	r3
   23af4:	1e03      	subs	r3, r0, #0
   23af6:	d010      	beq.n	23b1a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23af8:	4a29      	ldr	r2, [pc, #164]	; (23ba0 <spi_cmd_complete+0x7b0>)
   23afa:	491c      	ldr	r1, [pc, #112]	; (23b6c <spi_cmd_complete+0x77c>)
   23afc:	4b1c      	ldr	r3, [pc, #112]	; (23b70 <spi_cmd_complete+0x780>)
   23afe:	0018      	movs	r0, r3
   23b00:	4b1c      	ldr	r3, [pc, #112]	; (23b74 <spi_cmd_complete+0x784>)
   23b02:	4798      	blx	r3
   23b04:	4b27      	ldr	r3, [pc, #156]	; (23ba4 <spi_cmd_complete+0x7b4>)
   23b06:	0018      	movs	r0, r3
   23b08:	4b1a      	ldr	r3, [pc, #104]	; (23b74 <spi_cmd_complete+0x784>)
   23b0a:	4798      	blx	r3
   23b0c:	4b1b      	ldr	r3, [pc, #108]	; (23b7c <spi_cmd_complete+0x78c>)
   23b0e:	0018      	movs	r0, r3
   23b10:	4b18      	ldr	r3, [pc, #96]	; (23b74 <spi_cmd_complete+0x784>)
   23b12:	4798      	blx	r3
						result = N_FAIL;
   23b14:	2300      	movs	r3, #0
   23b16:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   23b18:	e0cb      	b.n	23cb2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23b1a:	4b1c      	ldr	r3, [pc, #112]	; (23b8c <spi_cmd_complete+0x79c>)
   23b1c:	781b      	ldrb	r3, [r3, #0]
   23b1e:	2b00      	cmp	r3, #0
   23b20:	d119      	bne.n	23b56 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23b22:	2314      	movs	r3, #20
   23b24:	18fb      	adds	r3, r7, r3
   23b26:	2102      	movs	r1, #2
   23b28:	0018      	movs	r0, r3
   23b2a:	4b1c      	ldr	r3, [pc, #112]	; (23b9c <spi_cmd_complete+0x7ac>)
   23b2c:	4798      	blx	r3
   23b2e:	1e03      	subs	r3, r0, #0
   23b30:	d011      	beq.n	23b56 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23b32:	23a6      	movs	r3, #166	; 0xa6
   23b34:	009a      	lsls	r2, r3, #2
   23b36:	490d      	ldr	r1, [pc, #52]	; (23b6c <spi_cmd_complete+0x77c>)
   23b38:	4b0d      	ldr	r3, [pc, #52]	; (23b70 <spi_cmd_complete+0x780>)
   23b3a:	0018      	movs	r0, r3
   23b3c:	4b0d      	ldr	r3, [pc, #52]	; (23b74 <spi_cmd_complete+0x784>)
   23b3e:	4798      	blx	r3
   23b40:	4b19      	ldr	r3, [pc, #100]	; (23ba8 <spi_cmd_complete+0x7b8>)
   23b42:	0018      	movs	r0, r3
   23b44:	4b0b      	ldr	r3, [pc, #44]	; (23b74 <spi_cmd_complete+0x784>)
   23b46:	4798      	blx	r3
   23b48:	4b0c      	ldr	r3, [pc, #48]	; (23b7c <spi_cmd_complete+0x78c>)
   23b4a:	0018      	movs	r0, r3
   23b4c:	4b09      	ldr	r3, [pc, #36]	; (23b74 <spi_cmd_complete+0x784>)
   23b4e:	4798      	blx	r3
							result = N_FAIL;
   23b50:	2300      	movs	r3, #0
   23b52:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   23b54:	e0ad      	b.n	23cb2 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   23b56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23b5a:	18d3      	adds	r3, r2, r3
   23b5c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   23b60:	683a      	ldr	r2, [r7, #0]
   23b62:	1ad3      	subs	r3, r2, r3
   23b64:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   23b66:	e09e      	b.n	23ca6 <spi_cmd_complete+0x8b6>
   23b68:	0000022f 	.word	0x0000022f
   23b6c:	00038ba4 	.word	0x00038ba4
   23b70:	00038590 	.word	0x00038590
   23b74:	0001dc99 	.word	0x0001dc99
   23b78:	00038688 	.word	0x00038688
   23b7c:	000385d0 	.word	0x000385d0
   23b80:	00000239 	.word	0x00000239
   23b84:	000386c4 	.word	0x000386c4
   23b88:	000386f8 	.word	0x000386f8
   23b8c:	20003e98 	.word	0x20003e98
   23b90:	00000263 	.word	0x00000263
   23b94:	00038728 	.word	0x00038728
   23b98:	00038758 	.word	0x00038758
   23b9c:	00022d29 	.word	0x00022d29
   23ba0:	0000028e 	.word	0x0000028e
   23ba4:	00038788 	.word	0x00038788
   23ba8:	000387bc 	.word	0x000387bc
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   23bac:	683a      	ldr	r2, [r7, #0]
   23bae:	2380      	movs	r3, #128	; 0x80
   23bb0:	019b      	lsls	r3, r3, #6
   23bb2:	429a      	cmp	r2, r3
   23bb4:	d802      	bhi.n	23bbc <spi_cmd_complete+0x7cc>
						nbytes = sz;
   23bb6:	683b      	ldr	r3, [r7, #0]
   23bb8:	65bb      	str	r3, [r7, #88]	; 0x58
   23bba:	e002      	b.n	23bc2 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   23bbc:	2380      	movs	r3, #128	; 0x80
   23bbe:	019b      	lsls	r3, r3, #6
   23bc0:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   23bc2:	230a      	movs	r3, #10
   23bc4:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   23bc6:	2317      	movs	r3, #23
   23bc8:	18fb      	adds	r3, r7, r3
   23bca:	2101      	movs	r1, #1
   23bcc:	0018      	movs	r0, r3
   23bce:	4b3b      	ldr	r3, [pc, #236]	; (23cbc <spi_cmd_complete+0x8cc>)
   23bd0:	4798      	blx	r3
   23bd2:	1e03      	subs	r3, r0, #0
   23bd4:	d011      	beq.n	23bfa <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   23bd6:	23ae      	movs	r3, #174	; 0xae
   23bd8:	009a      	lsls	r2, r3, #2
   23bda:	4939      	ldr	r1, [pc, #228]	; (23cc0 <spi_cmd_complete+0x8d0>)
   23bdc:	4b39      	ldr	r3, [pc, #228]	; (23cc4 <spi_cmd_complete+0x8d4>)
   23bde:	0018      	movs	r0, r3
   23be0:	4b39      	ldr	r3, [pc, #228]	; (23cc8 <spi_cmd_complete+0x8d8>)
   23be2:	4798      	blx	r3
   23be4:	4b39      	ldr	r3, [pc, #228]	; (23ccc <spi_cmd_complete+0x8dc>)
   23be6:	0018      	movs	r0, r3
   23be8:	4b37      	ldr	r3, [pc, #220]	; (23cc8 <spi_cmd_complete+0x8d8>)
   23bea:	4798      	blx	r3
   23bec:	4b38      	ldr	r3, [pc, #224]	; (23cd0 <spi_cmd_complete+0x8e0>)
   23bee:	0018      	movs	r0, r3
   23bf0:	4b35      	ldr	r3, [pc, #212]	; (23cc8 <spi_cmd_complete+0x8d8>)
   23bf2:	4798      	blx	r3
							result = N_FAIL;
   23bf4:	2300      	movs	r3, #0
   23bf6:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23bf8:	e010      	b.n	23c1c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   23bfa:	2317      	movs	r3, #23
   23bfc:	18fb      	adds	r3, r7, r3
   23bfe:	781b      	ldrb	r3, [r3, #0]
   23c00:	091b      	lsrs	r3, r3, #4
   23c02:	b2db      	uxtb	r3, r3
   23c04:	001a      	movs	r2, r3
   23c06:	230f      	movs	r3, #15
   23c08:	4013      	ands	r3, r2
   23c0a:	2b0f      	cmp	r3, #15
   23c0c:	d005      	beq.n	23c1a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   23c0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   23c10:	1e5a      	subs	r2, r3, #1
   23c12:	667a      	str	r2, [r7, #100]	; 0x64
   23c14:	2b00      	cmp	r3, #0
   23c16:	d1d6      	bne.n	23bc6 <spi_cmd_complete+0x7d6>
   23c18:	e000      	b.n	23c1c <spi_cmd_complete+0x82c>
							break;
   23c1a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   23c1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23c1e:	2b00      	cmp	r3, #0
   23c20:	d046      	beq.n	23cb0 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   23c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   23c24:	687a      	ldr	r2, [r7, #4]
   23c26:	18d3      	adds	r3, r2, r3
   23c28:	6dba      	ldr	r2, [r7, #88]	; 0x58
   23c2a:	b292      	uxth	r2, r2
   23c2c:	0011      	movs	r1, r2
   23c2e:	0018      	movs	r0, r3
   23c30:	4b22      	ldr	r3, [pc, #136]	; (23cbc <spi_cmd_complete+0x8cc>)
   23c32:	4798      	blx	r3
   23c34:	1e03      	subs	r3, r0, #0
   23c36:	d011      	beq.n	23c5c <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   23c38:	23b2      	movs	r3, #178	; 0xb2
   23c3a:	009a      	lsls	r2, r3, #2
   23c3c:	4920      	ldr	r1, [pc, #128]	; (23cc0 <spi_cmd_complete+0x8d0>)
   23c3e:	4b21      	ldr	r3, [pc, #132]	; (23cc4 <spi_cmd_complete+0x8d4>)
   23c40:	0018      	movs	r0, r3
   23c42:	4b21      	ldr	r3, [pc, #132]	; (23cc8 <spi_cmd_complete+0x8d8>)
   23c44:	4798      	blx	r3
   23c46:	4b23      	ldr	r3, [pc, #140]	; (23cd4 <spi_cmd_complete+0x8e4>)
   23c48:	0018      	movs	r0, r3
   23c4a:	4b1f      	ldr	r3, [pc, #124]	; (23cc8 <spi_cmd_complete+0x8d8>)
   23c4c:	4798      	blx	r3
   23c4e:	4b20      	ldr	r3, [pc, #128]	; (23cd0 <spi_cmd_complete+0x8e0>)
   23c50:	0018      	movs	r0, r3
   23c52:	4b1d      	ldr	r3, [pc, #116]	; (23cc8 <spi_cmd_complete+0x8d8>)
   23c54:	4798      	blx	r3
						result = N_FAIL;
   23c56:	2300      	movs	r3, #0
   23c58:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   23c5a:	e02a      	b.n	23cb2 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   23c5c:	4b1e      	ldr	r3, [pc, #120]	; (23cd8 <spi_cmd_complete+0x8e8>)
   23c5e:	781b      	ldrb	r3, [r3, #0]
   23c60:	2b00      	cmp	r3, #0
   23c62:	d118      	bne.n	23c96 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   23c64:	2314      	movs	r3, #20
   23c66:	18fb      	adds	r3, r7, r3
   23c68:	2102      	movs	r1, #2
   23c6a:	0018      	movs	r0, r3
   23c6c:	4b13      	ldr	r3, [pc, #76]	; (23cbc <spi_cmd_complete+0x8cc>)
   23c6e:	4798      	blx	r3
   23c70:	1e03      	subs	r3, r0, #0
   23c72:	d010      	beq.n	23c96 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   23c74:	4a19      	ldr	r2, [pc, #100]	; (23cdc <spi_cmd_complete+0x8ec>)
   23c76:	4912      	ldr	r1, [pc, #72]	; (23cc0 <spi_cmd_complete+0x8d0>)
   23c78:	4b12      	ldr	r3, [pc, #72]	; (23cc4 <spi_cmd_complete+0x8d4>)
   23c7a:	0018      	movs	r0, r3
   23c7c:	4b12      	ldr	r3, [pc, #72]	; (23cc8 <spi_cmd_complete+0x8d8>)
   23c7e:	4798      	blx	r3
   23c80:	4b17      	ldr	r3, [pc, #92]	; (23ce0 <spi_cmd_complete+0x8f0>)
   23c82:	0018      	movs	r0, r3
   23c84:	4b10      	ldr	r3, [pc, #64]	; (23cc8 <spi_cmd_complete+0x8d8>)
   23c86:	4798      	blx	r3
   23c88:	4b11      	ldr	r3, [pc, #68]	; (23cd0 <spi_cmd_complete+0x8e0>)
   23c8a:	0018      	movs	r0, r3
   23c8c:	4b0e      	ldr	r3, [pc, #56]	; (23cc8 <spi_cmd_complete+0x8d8>)
   23c8e:	4798      	blx	r3
							result = N_FAIL;
   23c90:	2300      	movs	r3, #0
   23c92:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   23c94:	e00d      	b.n	23cb2 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   23c96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   23c98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23c9a:	18d3      	adds	r3, r2, r3
   23c9c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   23c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   23ca0:	683a      	ldr	r2, [r7, #0]
   23ca2:	1ad3      	subs	r3, r2, r3
   23ca4:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   23ca6:	683b      	ldr	r3, [r7, #0]
   23ca8:	2b00      	cmp	r3, #0
   23caa:	d000      	beq.n	23cae <spi_cmd_complete+0x8be>
   23cac:	e77e      	b.n	23bac <spi_cmd_complete+0x7bc>
   23cae:	e000      	b.n	23cb2 <spi_cmd_complete+0x8c2>
						break;
   23cb0:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   23cb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   23cb4:	0018      	movs	r0, r3
   23cb6:	46bd      	mov	sp, r7
   23cb8:	b01f      	add	sp, #124	; 0x7c
   23cba:	bd90      	pop	{r4, r7, pc}
   23cbc:	00022d29 	.word	0x00022d29
   23cc0:	00038ba4 	.word	0x00038ba4
   23cc4:	00038590 	.word	0x00038590
   23cc8:	0001dc99 	.word	0x0001dc99
   23ccc:	000387f4 	.word	0x000387f4
   23cd0:	000385d0 	.word	0x000385d0
   23cd4:	00038788 	.word	0x00038788
   23cd8:	20003e98 	.word	0x20003e98
   23cdc:	000002d2 	.word	0x000002d2
   23ce0:	000387bc 	.word	0x000387bc

00023ce4 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   23ce4:	b580      	push	{r7, lr}
   23ce6:	b086      	sub	sp, #24
   23ce8:	af00      	add	r7, sp, #0
   23cea:	6078      	str	r0, [r7, #4]
   23cec:	000a      	movs	r2, r1
   23cee:	1cbb      	adds	r3, r7, #2
   23cf0:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   23cf2:	2313      	movs	r3, #19
   23cf4:	18fb      	adds	r3, r7, r3
   23cf6:	2201      	movs	r2, #1
   23cf8:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   23cfa:	230c      	movs	r3, #12
   23cfc:	18fb      	adds	r3, r7, r3
   23cfe:	2200      	movs	r2, #0
   23d00:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   23d02:	2316      	movs	r3, #22
   23d04:	18fb      	adds	r3, r7, r3
   23d06:	2200      	movs	r2, #0
   23d08:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   23d0a:	1cbb      	adds	r3, r7, #2
   23d0c:	881a      	ldrh	r2, [r3, #0]
   23d0e:	2380      	movs	r3, #128	; 0x80
   23d10:	019b      	lsls	r3, r3, #6
   23d12:	429a      	cmp	r2, r3
   23d14:	d805      	bhi.n	23d22 <spi_data_write+0x3e>
			nbytes = sz;
   23d16:	2314      	movs	r3, #20
   23d18:	18fb      	adds	r3, r7, r3
   23d1a:	1cba      	adds	r2, r7, #2
   23d1c:	8812      	ldrh	r2, [r2, #0]
   23d1e:	801a      	strh	r2, [r3, #0]
   23d20:	e004      	b.n	23d2c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   23d22:	2314      	movs	r3, #20
   23d24:	18fb      	adds	r3, r7, r3
   23d26:	2280      	movs	r2, #128	; 0x80
   23d28:	0192      	lsls	r2, r2, #6
   23d2a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   23d2c:	2311      	movs	r3, #17
   23d2e:	18fb      	adds	r3, r7, r3
   23d30:	22f0      	movs	r2, #240	; 0xf0
   23d32:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   23d34:	2316      	movs	r3, #22
   23d36:	18fb      	adds	r3, r7, r3
   23d38:	2200      	movs	r2, #0
   23d3a:	5e9b      	ldrsh	r3, [r3, r2]
   23d3c:	2b00      	cmp	r3, #0
   23d3e:	d10f      	bne.n	23d60 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   23d40:	1cbb      	adds	r3, r7, #2
   23d42:	881a      	ldrh	r2, [r3, #0]
   23d44:	2380      	movs	r3, #128	; 0x80
   23d46:	019b      	lsls	r3, r3, #6
   23d48:	429a      	cmp	r2, r3
   23d4a:	d804      	bhi.n	23d56 <spi_data_write+0x72>
				order = 0x3;
   23d4c:	2312      	movs	r3, #18
   23d4e:	18fb      	adds	r3, r7, r3
   23d50:	2203      	movs	r2, #3
   23d52:	701a      	strb	r2, [r3, #0]
   23d54:	e013      	b.n	23d7e <spi_data_write+0x9a>
			else
				order = 0x1;
   23d56:	2312      	movs	r3, #18
   23d58:	18fb      	adds	r3, r7, r3
   23d5a:	2201      	movs	r2, #1
   23d5c:	701a      	strb	r2, [r3, #0]
   23d5e:	e00e      	b.n	23d7e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   23d60:	1cbb      	adds	r3, r7, #2
   23d62:	881a      	ldrh	r2, [r3, #0]
   23d64:	2380      	movs	r3, #128	; 0x80
   23d66:	019b      	lsls	r3, r3, #6
   23d68:	429a      	cmp	r2, r3
   23d6a:	d804      	bhi.n	23d76 <spi_data_write+0x92>
				order = 0x3;
   23d6c:	2312      	movs	r3, #18
   23d6e:	18fb      	adds	r3, r7, r3
   23d70:	2203      	movs	r2, #3
   23d72:	701a      	strb	r2, [r3, #0]
   23d74:	e003      	b.n	23d7e <spi_data_write+0x9a>
			else
				order = 0x2;
   23d76:	2312      	movs	r3, #18
   23d78:	18fb      	adds	r3, r7, r3
   23d7a:	2202      	movs	r2, #2
   23d7c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   23d7e:	2311      	movs	r3, #17
   23d80:	18fb      	adds	r3, r7, r3
   23d82:	781a      	ldrb	r2, [r3, #0]
   23d84:	2312      	movs	r3, #18
   23d86:	18fb      	adds	r3, r7, r3
   23d88:	781b      	ldrb	r3, [r3, #0]
   23d8a:	4313      	orrs	r3, r2
   23d8c:	b2da      	uxtb	r2, r3
   23d8e:	2311      	movs	r3, #17
   23d90:	18fb      	adds	r3, r7, r3
   23d92:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   23d94:	2311      	movs	r3, #17
   23d96:	18fb      	adds	r3, r7, r3
   23d98:	2101      	movs	r1, #1
   23d9a:	0018      	movs	r0, r3
   23d9c:	4b3c      	ldr	r3, [pc, #240]	; (23e90 <spi_data_write+0x1ac>)
   23d9e:	4798      	blx	r3
   23da0:	1e03      	subs	r3, r0, #0
   23da2:	d012      	beq.n	23dca <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   23da4:	4a3b      	ldr	r2, [pc, #236]	; (23e94 <spi_data_write+0x1b0>)
   23da6:	493c      	ldr	r1, [pc, #240]	; (23e98 <spi_data_write+0x1b4>)
   23da8:	4b3c      	ldr	r3, [pc, #240]	; (23e9c <spi_data_write+0x1b8>)
   23daa:	0018      	movs	r0, r3
   23dac:	4b3c      	ldr	r3, [pc, #240]	; (23ea0 <spi_data_write+0x1bc>)
   23dae:	4798      	blx	r3
   23db0:	4b3c      	ldr	r3, [pc, #240]	; (23ea4 <spi_data_write+0x1c0>)
   23db2:	0018      	movs	r0, r3
   23db4:	4b3a      	ldr	r3, [pc, #232]	; (23ea0 <spi_data_write+0x1bc>)
   23db6:	4798      	blx	r3
   23db8:	4b3b      	ldr	r3, [pc, #236]	; (23ea8 <spi_data_write+0x1c4>)
   23dba:	0018      	movs	r0, r3
   23dbc:	4b38      	ldr	r3, [pc, #224]	; (23ea0 <spi_data_write+0x1bc>)
   23dbe:	4798      	blx	r3
			result = N_FAIL;
   23dc0:	2313      	movs	r3, #19
   23dc2:	18fb      	adds	r3, r7, r3
   23dc4:	2200      	movs	r2, #0
   23dc6:	701a      	strb	r2, [r3, #0]
			break;
   23dc8:	e059      	b.n	23e7e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   23dca:	2316      	movs	r3, #22
   23dcc:	18fb      	adds	r3, r7, r3
   23dce:	2200      	movs	r2, #0
   23dd0:	5e9b      	ldrsh	r3, [r3, r2]
   23dd2:	687a      	ldr	r2, [r7, #4]
   23dd4:	18d2      	adds	r2, r2, r3
   23dd6:	2314      	movs	r3, #20
   23dd8:	18fb      	adds	r3, r7, r3
   23dda:	881b      	ldrh	r3, [r3, #0]
   23ddc:	0019      	movs	r1, r3
   23dde:	0010      	movs	r0, r2
   23de0:	4b2b      	ldr	r3, [pc, #172]	; (23e90 <spi_data_write+0x1ac>)
   23de2:	4798      	blx	r3
   23de4:	1e03      	subs	r3, r0, #0
   23de6:	d012      	beq.n	23e0e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   23de8:	4a30      	ldr	r2, [pc, #192]	; (23eac <spi_data_write+0x1c8>)
   23dea:	492b      	ldr	r1, [pc, #172]	; (23e98 <spi_data_write+0x1b4>)
   23dec:	4b2b      	ldr	r3, [pc, #172]	; (23e9c <spi_data_write+0x1b8>)
   23dee:	0018      	movs	r0, r3
   23df0:	4b2b      	ldr	r3, [pc, #172]	; (23ea0 <spi_data_write+0x1bc>)
   23df2:	4798      	blx	r3
   23df4:	4b2e      	ldr	r3, [pc, #184]	; (23eb0 <spi_data_write+0x1cc>)
   23df6:	0018      	movs	r0, r3
   23df8:	4b29      	ldr	r3, [pc, #164]	; (23ea0 <spi_data_write+0x1bc>)
   23dfa:	4798      	blx	r3
   23dfc:	4b2a      	ldr	r3, [pc, #168]	; (23ea8 <spi_data_write+0x1c4>)
   23dfe:	0018      	movs	r0, r3
   23e00:	4b27      	ldr	r3, [pc, #156]	; (23ea0 <spi_data_write+0x1bc>)
   23e02:	4798      	blx	r3
			result = N_FAIL;
   23e04:	2313      	movs	r3, #19
   23e06:	18fb      	adds	r3, r7, r3
   23e08:	2200      	movs	r2, #0
   23e0a:	701a      	strb	r2, [r3, #0]
			break;
   23e0c:	e037      	b.n	23e7e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   23e0e:	4b29      	ldr	r3, [pc, #164]	; (23eb4 <spi_data_write+0x1d0>)
   23e10:	781b      	ldrb	r3, [r3, #0]
   23e12:	2b00      	cmp	r3, #0
   23e14:	d11b      	bne.n	23e4e <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   23e16:	230c      	movs	r3, #12
   23e18:	18fb      	adds	r3, r7, r3
   23e1a:	2102      	movs	r1, #2
   23e1c:	0018      	movs	r0, r3
   23e1e:	4b1c      	ldr	r3, [pc, #112]	; (23e90 <spi_data_write+0x1ac>)
   23e20:	4798      	blx	r3
   23e22:	1e03      	subs	r3, r0, #0
   23e24:	d013      	beq.n	23e4e <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   23e26:	23d7      	movs	r3, #215	; 0xd7
   23e28:	009a      	lsls	r2, r3, #2
   23e2a:	491b      	ldr	r1, [pc, #108]	; (23e98 <spi_data_write+0x1b4>)
   23e2c:	4b1b      	ldr	r3, [pc, #108]	; (23e9c <spi_data_write+0x1b8>)
   23e2e:	0018      	movs	r0, r3
   23e30:	4b1b      	ldr	r3, [pc, #108]	; (23ea0 <spi_data_write+0x1bc>)
   23e32:	4798      	blx	r3
   23e34:	4b20      	ldr	r3, [pc, #128]	; (23eb8 <spi_data_write+0x1d4>)
   23e36:	0018      	movs	r0, r3
   23e38:	4b19      	ldr	r3, [pc, #100]	; (23ea0 <spi_data_write+0x1bc>)
   23e3a:	4798      	blx	r3
   23e3c:	4b1a      	ldr	r3, [pc, #104]	; (23ea8 <spi_data_write+0x1c4>)
   23e3e:	0018      	movs	r0, r3
   23e40:	4b17      	ldr	r3, [pc, #92]	; (23ea0 <spi_data_write+0x1bc>)
   23e42:	4798      	blx	r3
				result = N_FAIL;
   23e44:	2313      	movs	r3, #19
   23e46:	18fb      	adds	r3, r7, r3
   23e48:	2200      	movs	r2, #0
   23e4a:	701a      	strb	r2, [r3, #0]
				break;
   23e4c:	e017      	b.n	23e7e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   23e4e:	2316      	movs	r3, #22
   23e50:	18fb      	adds	r3, r7, r3
   23e52:	881a      	ldrh	r2, [r3, #0]
   23e54:	2314      	movs	r3, #20
   23e56:	18fb      	adds	r3, r7, r3
   23e58:	881b      	ldrh	r3, [r3, #0]
   23e5a:	18d3      	adds	r3, r2, r3
   23e5c:	b29a      	uxth	r2, r3
   23e5e:	2316      	movs	r3, #22
   23e60:	18fb      	adds	r3, r7, r3
   23e62:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   23e64:	1cbb      	adds	r3, r7, #2
   23e66:	1cb9      	adds	r1, r7, #2
   23e68:	2214      	movs	r2, #20
   23e6a:	18ba      	adds	r2, r7, r2
   23e6c:	8809      	ldrh	r1, [r1, #0]
   23e6e:	8812      	ldrh	r2, [r2, #0]
   23e70:	1a8a      	subs	r2, r1, r2
   23e72:	801a      	strh	r2, [r3, #0]
	} while (sz);
   23e74:	1cbb      	adds	r3, r7, #2
   23e76:	881b      	ldrh	r3, [r3, #0]
   23e78:	2b00      	cmp	r3, #0
   23e7a:	d000      	beq.n	23e7e <spi_data_write+0x19a>
   23e7c:	e745      	b.n	23d0a <spi_data_write+0x26>


	return result;
   23e7e:	2313      	movs	r3, #19
   23e80:	18fb      	adds	r3, r7, r3
   23e82:	781b      	ldrb	r3, [r3, #0]
   23e84:	b25b      	sxtb	r3, r3
}
   23e86:	0018      	movs	r0, r3
   23e88:	46bd      	mov	sp, r7
   23e8a:	b006      	add	sp, #24
   23e8c:	bd80      	pop	{r7, pc}
   23e8e:	46c0      	nop			; (mov r8, r8)
   23e90:	00022d6d 	.word	0x00022d6d
   23e94:	00000349 	.word	0x00000349
   23e98:	00038bb8 	.word	0x00038bb8
   23e9c:	00038590 	.word	0x00038590
   23ea0:	0001dc99 	.word	0x0001dc99
   23ea4:	00038858 	.word	0x00038858
   23ea8:	000385d0 	.word	0x000385d0
   23eac:	00000352 	.word	0x00000352
   23eb0:	00038890 	.word	0x00038890
   23eb4:	20003e98 	.word	0x20003e98
   23eb8:	000388c4 	.word	0x000388c4

00023ebc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   23ebc:	b590      	push	{r4, r7, lr}
   23ebe:	b087      	sub	sp, #28
   23ec0:	af02      	add	r7, sp, #8
   23ec2:	6078      	str	r0, [r7, #4]
   23ec4:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   23ec6:	230f      	movs	r3, #15
   23ec8:	18fb      	adds	r3, r7, r3
   23eca:	220a      	movs	r2, #10
   23ecc:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23ece:	230c      	movs	r3, #12
   23ed0:	18fb      	adds	r3, r7, r3
   23ed2:	2201      	movs	r2, #1
   23ed4:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   23ed6:	230e      	movs	r3, #14
   23ed8:	18fb      	adds	r3, r7, r3
   23eda:	22c9      	movs	r2, #201	; 0xc9
   23edc:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   23ede:	230d      	movs	r3, #13
   23ee0:	18fb      	adds	r3, r7, r3
   23ee2:	2200      	movs	r2, #0
   23ee4:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   23ee6:	687b      	ldr	r3, [r7, #4]
   23ee8:	2b30      	cmp	r3, #48	; 0x30
   23eea:	d808      	bhi.n	23efe <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   23eec:	230e      	movs	r3, #14
   23eee:	18fb      	adds	r3, r7, r3
   23ef0:	22c3      	movs	r2, #195	; 0xc3
   23ef2:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   23ef4:	230d      	movs	r3, #13
   23ef6:	18fb      	adds	r3, r7, r3
   23ef8:	2201      	movs	r2, #1
   23efa:	701a      	strb	r2, [r3, #0]
   23efc:	e007      	b.n	23f0e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   23efe:	230e      	movs	r3, #14
   23f00:	18fb      	adds	r3, r7, r3
   23f02:	22c9      	movs	r2, #201	; 0xc9
   23f04:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   23f06:	230d      	movs	r3, #13
   23f08:	18fb      	adds	r3, r7, r3
   23f0a:	2200      	movs	r2, #0
   23f0c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   23f0e:	003a      	movs	r2, r7
   23f10:	6879      	ldr	r1, [r7, #4]
   23f12:	230e      	movs	r3, #14
   23f14:	18fb      	adds	r3, r7, r3
   23f16:	7818      	ldrb	r0, [r3, #0]
   23f18:	230d      	movs	r3, #13
   23f1a:	18fb      	adds	r3, r7, r3
   23f1c:	781b      	ldrb	r3, [r3, #0]
   23f1e:	9300      	str	r3, [sp, #0]
   23f20:	2304      	movs	r3, #4
   23f22:	4c2e      	ldr	r4, [pc, #184]	; (23fdc <spi_write_reg+0x120>)
   23f24:	47a0      	blx	r4
   23f26:	0002      	movs	r2, r0
   23f28:	230c      	movs	r3, #12
   23f2a:	18fb      	adds	r3, r7, r3
   23f2c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23f2e:	230c      	movs	r3, #12
   23f30:	18fb      	adds	r3, r7, r3
   23f32:	781b      	ldrb	r3, [r3, #0]
   23f34:	b25b      	sxtb	r3, r3
   23f36:	2b01      	cmp	r3, #1
   23f38:	d010      	beq.n	23f5c <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   23f3a:	4a29      	ldr	r2, [pc, #164]	; (23fe0 <spi_write_reg+0x124>)
   23f3c:	4929      	ldr	r1, [pc, #164]	; (23fe4 <spi_write_reg+0x128>)
   23f3e:	4b2a      	ldr	r3, [pc, #168]	; (23fe8 <spi_write_reg+0x12c>)
   23f40:	0018      	movs	r0, r3
   23f42:	4b2a      	ldr	r3, [pc, #168]	; (23fec <spi_write_reg+0x130>)
   23f44:	4798      	blx	r3
   23f46:	687a      	ldr	r2, [r7, #4]
   23f48:	4b29      	ldr	r3, [pc, #164]	; (23ff0 <spi_write_reg+0x134>)
   23f4a:	0011      	movs	r1, r2
   23f4c:	0018      	movs	r0, r3
   23f4e:	4b27      	ldr	r3, [pc, #156]	; (23fec <spi_write_reg+0x130>)
   23f50:	4798      	blx	r3
   23f52:	4b28      	ldr	r3, [pc, #160]	; (23ff4 <spi_write_reg+0x138>)
   23f54:	0018      	movs	r0, r3
   23f56:	4b25      	ldr	r3, [pc, #148]	; (23fec <spi_write_reg+0x130>)
   23f58:	4798      	blx	r3
		goto _FAIL_;
   23f5a:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   23f5c:	230c      	movs	r3, #12
   23f5e:	18fb      	adds	r3, r7, r3
   23f60:	781b      	ldrb	r3, [r3, #0]
   23f62:	b25b      	sxtb	r3, r3
   23f64:	2b01      	cmp	r3, #1
   23f66:	d030      	beq.n	23fca <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   23f68:	2001      	movs	r0, #1
   23f6a:	4b23      	ldr	r3, [pc, #140]	; (23ff8 <spi_write_reg+0x13c>)
   23f6c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23f6e:	2300      	movs	r3, #0
   23f70:	9300      	str	r3, [sp, #0]
   23f72:	2300      	movs	r3, #0
   23f74:	2200      	movs	r2, #0
   23f76:	2100      	movs	r1, #0
   23f78:	20cf      	movs	r0, #207	; 0xcf
   23f7a:	4c20      	ldr	r4, [pc, #128]	; (23ffc <spi_write_reg+0x140>)
   23f7c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23f7e:	20cf      	movs	r0, #207	; 0xcf
   23f80:	4b1f      	ldr	r3, [pc, #124]	; (24000 <spi_write_reg+0x144>)
   23f82:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   23f84:	23ea      	movs	r3, #234	; 0xea
   23f86:	009a      	lsls	r2, r3, #2
   23f88:	4916      	ldr	r1, [pc, #88]	; (23fe4 <spi_write_reg+0x128>)
   23f8a:	4b17      	ldr	r3, [pc, #92]	; (23fe8 <spi_write_reg+0x12c>)
   23f8c:	0018      	movs	r0, r3
   23f8e:	4b17      	ldr	r3, [pc, #92]	; (23fec <spi_write_reg+0x130>)
   23f90:	4798      	blx	r3
   23f92:	230f      	movs	r3, #15
   23f94:	18fb      	adds	r3, r7, r3
   23f96:	7819      	ldrb	r1, [r3, #0]
   23f98:	683b      	ldr	r3, [r7, #0]
   23f9a:	687a      	ldr	r2, [r7, #4]
   23f9c:	4819      	ldr	r0, [pc, #100]	; (24004 <spi_write_reg+0x148>)
   23f9e:	4c13      	ldr	r4, [pc, #76]	; (23fec <spi_write_reg+0x130>)
   23fa0:	47a0      	blx	r4
   23fa2:	4b14      	ldr	r3, [pc, #80]	; (23ff4 <spi_write_reg+0x138>)
   23fa4:	0018      	movs	r0, r3
   23fa6:	4b11      	ldr	r3, [pc, #68]	; (23fec <spi_write_reg+0x130>)
   23fa8:	4798      	blx	r3
		nm_bsp_sleep(1);
   23faa:	2001      	movs	r0, #1
   23fac:	4b12      	ldr	r3, [pc, #72]	; (23ff8 <spi_write_reg+0x13c>)
   23fae:	4798      	blx	r3
		retry--;
   23fb0:	230f      	movs	r3, #15
   23fb2:	18fb      	adds	r3, r7, r3
   23fb4:	781a      	ldrb	r2, [r3, #0]
   23fb6:	230f      	movs	r3, #15
   23fb8:	18fb      	adds	r3, r7, r3
   23fba:	3a01      	subs	r2, #1
   23fbc:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23fbe:	230f      	movs	r3, #15
   23fc0:	18fb      	adds	r3, r7, r3
   23fc2:	781b      	ldrb	r3, [r3, #0]
   23fc4:	2b00      	cmp	r3, #0
   23fc6:	d000      	beq.n	23fca <spi_write_reg+0x10e>
   23fc8:	e78d      	b.n	23ee6 <spi_write_reg+0x2a>
	}

	return result;
   23fca:	230c      	movs	r3, #12
   23fcc:	18fb      	adds	r3, r7, r3
   23fce:	781b      	ldrb	r3, [r3, #0]
   23fd0:	b25b      	sxtb	r3, r3
}
   23fd2:	0018      	movs	r0, r3
   23fd4:	46bd      	mov	sp, r7
   23fd6:	b005      	add	sp, #20
   23fd8:	bd90      	pop	{r4, r7, pc}
   23fda:	46c0      	nop			; (mov r8, r8)
   23fdc:	000233f1 	.word	0x000233f1
   23fe0:	0000039d 	.word	0x0000039d
   23fe4:	00038bc8 	.word	0x00038bc8
   23fe8:	00038590 	.word	0x00038590
   23fec:	0001dc99 	.word	0x0001dc99
   23ff0:	000388fc 	.word	0x000388fc
   23ff4:	000385d0 	.word	0x000385d0
   23ff8:	0001fd31 	.word	0x0001fd31
   23ffc:	00022e75 	.word	0x00022e75
   24000:	000232b5 	.word	0x000232b5
   24004:	00038928 	.word	0x00038928

00024008 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   24008:	b590      	push	{r4, r7, lr}
   2400a:	b089      	sub	sp, #36	; 0x24
   2400c:	af02      	add	r7, sp, #8
   2400e:	60f8      	str	r0, [r7, #12]
   24010:	60b9      	str	r1, [r7, #8]
   24012:	1dbb      	adds	r3, r7, #6
   24014:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24016:	2316      	movs	r3, #22
   24018:	18fb      	adds	r3, r7, r3
   2401a:	220a      	movs	r2, #10
   2401c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2401e:	2315      	movs	r3, #21
   24020:	18fb      	adds	r3, r7, r3
   24022:	22c7      	movs	r2, #199	; 0xc7
   24024:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   24026:	1dbb      	adds	r3, r7, #6
   24028:	881a      	ldrh	r2, [r3, #0]
   2402a:	68f9      	ldr	r1, [r7, #12]
   2402c:	2315      	movs	r3, #21
   2402e:	18fb      	adds	r3, r7, r3
   24030:	7818      	ldrb	r0, [r3, #0]
   24032:	2300      	movs	r3, #0
   24034:	9300      	str	r3, [sp, #0]
   24036:	0013      	movs	r3, r2
   24038:	2200      	movs	r2, #0
   2403a:	4c4d      	ldr	r4, [pc, #308]	; (24170 <nm_spi_write+0x168>)
   2403c:	47a0      	blx	r4
   2403e:	0002      	movs	r2, r0
   24040:	2317      	movs	r3, #23
   24042:	18fb      	adds	r3, r7, r3
   24044:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24046:	2317      	movs	r3, #23
   24048:	18fb      	adds	r3, r7, r3
   2404a:	781b      	ldrb	r3, [r3, #0]
   2404c:	b25b      	sxtb	r3, r3
   2404e:	2b01      	cmp	r3, #1
   24050:	d010      	beq.n	24074 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   24052:	4a48      	ldr	r2, [pc, #288]	; (24174 <nm_spi_write+0x16c>)
   24054:	4948      	ldr	r1, [pc, #288]	; (24178 <nm_spi_write+0x170>)
   24056:	4b49      	ldr	r3, [pc, #292]	; (2417c <nm_spi_write+0x174>)
   24058:	0018      	movs	r0, r3
   2405a:	4b49      	ldr	r3, [pc, #292]	; (24180 <nm_spi_write+0x178>)
   2405c:	4798      	blx	r3
   2405e:	68fa      	ldr	r2, [r7, #12]
   24060:	4b48      	ldr	r3, [pc, #288]	; (24184 <nm_spi_write+0x17c>)
   24062:	0011      	movs	r1, r2
   24064:	0018      	movs	r0, r3
   24066:	4b46      	ldr	r3, [pc, #280]	; (24180 <nm_spi_write+0x178>)
   24068:	4798      	blx	r3
   2406a:	4b47      	ldr	r3, [pc, #284]	; (24188 <nm_spi_write+0x180>)
   2406c:	0018      	movs	r0, r3
   2406e:	4b44      	ldr	r3, [pc, #272]	; (24180 <nm_spi_write+0x178>)
   24070:	4798      	blx	r3
		goto _FAIL_;
   24072:	e03e      	b.n	240f2 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   24074:	2317      	movs	r3, #23
   24076:	18fc      	adds	r4, r7, r3
   24078:	1dbb      	adds	r3, r7, #6
   2407a:	881a      	ldrh	r2, [r3, #0]
   2407c:	68bb      	ldr	r3, [r7, #8]
   2407e:	0011      	movs	r1, r2
   24080:	0018      	movs	r0, r3
   24082:	4b42      	ldr	r3, [pc, #264]	; (2418c <nm_spi_write+0x184>)
   24084:	4798      	blx	r3
   24086:	0003      	movs	r3, r0
   24088:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2408a:	2317      	movs	r3, #23
   2408c:	18fb      	adds	r3, r7, r3
   2408e:	781b      	ldrb	r3, [r3, #0]
   24090:	b25b      	sxtb	r3, r3
   24092:	2b01      	cmp	r3, #1
   24094:	d00e      	beq.n	240b4 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24096:	4a3e      	ldr	r2, [pc, #248]	; (24190 <nm_spi_write+0x188>)
   24098:	4937      	ldr	r1, [pc, #220]	; (24178 <nm_spi_write+0x170>)
   2409a:	4b38      	ldr	r3, [pc, #224]	; (2417c <nm_spi_write+0x174>)
   2409c:	0018      	movs	r0, r3
   2409e:	4b38      	ldr	r3, [pc, #224]	; (24180 <nm_spi_write+0x178>)
   240a0:	4798      	blx	r3
   240a2:	4b3c      	ldr	r3, [pc, #240]	; (24194 <nm_spi_write+0x18c>)
   240a4:	0018      	movs	r0, r3
   240a6:	4b36      	ldr	r3, [pc, #216]	; (24180 <nm_spi_write+0x178>)
   240a8:	4798      	blx	r3
   240aa:	4b37      	ldr	r3, [pc, #220]	; (24188 <nm_spi_write+0x180>)
   240ac:	0018      	movs	r0, r3
   240ae:	4b34      	ldr	r3, [pc, #208]	; (24180 <nm_spi_write+0x178>)
   240b0:	4798      	blx	r3
		goto _FAIL_;
   240b2:	e01e      	b.n	240f2 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   240b4:	2317      	movs	r3, #23
   240b6:	18fc      	adds	r4, r7, r3
   240b8:	2315      	movs	r3, #21
   240ba:	18fb      	adds	r3, r7, r3
   240bc:	781b      	ldrb	r3, [r3, #0]
   240be:	0018      	movs	r0, r3
   240c0:	4b35      	ldr	r3, [pc, #212]	; (24198 <nm_spi_write+0x190>)
   240c2:	4798      	blx	r3
   240c4:	0003      	movs	r3, r0
   240c6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   240c8:	2317      	movs	r3, #23
   240ca:	18fb      	adds	r3, r7, r3
   240cc:	781b      	ldrb	r3, [r3, #0]
   240ce:	b25b      	sxtb	r3, r3
   240d0:	2b01      	cmp	r3, #1
   240d2:	d00e      	beq.n	240f2 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   240d4:	4a31      	ldr	r2, [pc, #196]	; (2419c <nm_spi_write+0x194>)
   240d6:	4928      	ldr	r1, [pc, #160]	; (24178 <nm_spi_write+0x170>)
   240d8:	4b28      	ldr	r3, [pc, #160]	; (2417c <nm_spi_write+0x174>)
   240da:	0018      	movs	r0, r3
   240dc:	4b28      	ldr	r3, [pc, #160]	; (24180 <nm_spi_write+0x178>)
   240de:	4798      	blx	r3
   240e0:	4b2c      	ldr	r3, [pc, #176]	; (24194 <nm_spi_write+0x18c>)
   240e2:	0018      	movs	r0, r3
   240e4:	4b26      	ldr	r3, [pc, #152]	; (24180 <nm_spi_write+0x178>)
   240e6:	4798      	blx	r3
   240e8:	4b27      	ldr	r3, [pc, #156]	; (24188 <nm_spi_write+0x180>)
   240ea:	0018      	movs	r0, r3
   240ec:	4b24      	ldr	r3, [pc, #144]	; (24180 <nm_spi_write+0x178>)
   240ee:	4798      	blx	r3
		goto _FAIL_;
   240f0:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   240f2:	2317      	movs	r3, #23
   240f4:	18fb      	adds	r3, r7, r3
   240f6:	781b      	ldrb	r3, [r3, #0]
   240f8:	b25b      	sxtb	r3, r3
   240fa:	2b01      	cmp	r3, #1
   240fc:	d030      	beq.n	24160 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   240fe:	2001      	movs	r0, #1
   24100:	4b27      	ldr	r3, [pc, #156]	; (241a0 <nm_spi_write+0x198>)
   24102:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24104:	2300      	movs	r3, #0
   24106:	9300      	str	r3, [sp, #0]
   24108:	2300      	movs	r3, #0
   2410a:	2200      	movs	r2, #0
   2410c:	2100      	movs	r1, #0
   2410e:	20cf      	movs	r0, #207	; 0xcf
   24110:	4c24      	ldr	r4, [pc, #144]	; (241a4 <nm_spi_write+0x19c>)
   24112:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24114:	20cf      	movs	r0, #207	; 0xcf
   24116:	4b24      	ldr	r3, [pc, #144]	; (241a8 <nm_spi_write+0x1a0>)
   24118:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2411a:	4a24      	ldr	r2, [pc, #144]	; (241ac <nm_spi_write+0x1a4>)
   2411c:	4916      	ldr	r1, [pc, #88]	; (24178 <nm_spi_write+0x170>)
   2411e:	4b17      	ldr	r3, [pc, #92]	; (2417c <nm_spi_write+0x174>)
   24120:	0018      	movs	r0, r3
   24122:	4b17      	ldr	r3, [pc, #92]	; (24180 <nm_spi_write+0x178>)
   24124:	4798      	blx	r3
   24126:	2316      	movs	r3, #22
   24128:	18fb      	adds	r3, r7, r3
   2412a:	7819      	ldrb	r1, [r3, #0]
   2412c:	1dbb      	adds	r3, r7, #6
   2412e:	881b      	ldrh	r3, [r3, #0]
   24130:	68fa      	ldr	r2, [r7, #12]
   24132:	481f      	ldr	r0, [pc, #124]	; (241b0 <nm_spi_write+0x1a8>)
   24134:	4c12      	ldr	r4, [pc, #72]	; (24180 <nm_spi_write+0x178>)
   24136:	47a0      	blx	r4
   24138:	4b13      	ldr	r3, [pc, #76]	; (24188 <nm_spi_write+0x180>)
   2413a:	0018      	movs	r0, r3
   2413c:	4b10      	ldr	r3, [pc, #64]	; (24180 <nm_spi_write+0x178>)
   2413e:	4798      	blx	r3
		nm_bsp_sleep(1);
   24140:	2001      	movs	r0, #1
   24142:	4b17      	ldr	r3, [pc, #92]	; (241a0 <nm_spi_write+0x198>)
   24144:	4798      	blx	r3
		retry--;
   24146:	2316      	movs	r3, #22
   24148:	18fb      	adds	r3, r7, r3
   2414a:	781a      	ldrb	r2, [r3, #0]
   2414c:	2316      	movs	r3, #22
   2414e:	18fb      	adds	r3, r7, r3
   24150:	3a01      	subs	r2, #1
   24152:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24154:	2316      	movs	r3, #22
   24156:	18fb      	adds	r3, r7, r3
   24158:	781b      	ldrb	r3, [r3, #0]
   2415a:	2b00      	cmp	r3, #0
   2415c:	d000      	beq.n	24160 <nm_spi_write+0x158>
   2415e:	e762      	b.n	24026 <nm_spi_write+0x1e>
	}


	return result;
   24160:	2317      	movs	r3, #23
   24162:	18fb      	adds	r3, r7, r3
   24164:	781b      	ldrb	r3, [r3, #0]
   24166:	b25b      	sxtb	r3, r3
}
   24168:	0018      	movs	r0, r3
   2416a:	46bd      	mov	sp, r7
   2416c:	b007      	add	sp, #28
   2416e:	bd90      	pop	{r4, r7, pc}
   24170:	000233f1 	.word	0x000233f1
   24174:	000003cf 	.word	0x000003cf
   24178:	00038bd8 	.word	0x00038bd8
   2417c:	00038590 	.word	0x00038590
   24180:	0001dc99 	.word	0x0001dc99
   24184:	00038944 	.word	0x00038944
   24188:	000385d0 	.word	0x000385d0
   2418c:	00023ce5 	.word	0x00023ce5
   24190:	000003d9 	.word	0x000003d9
   24194:	00038974 	.word	0x00038974
   24198:	000231b5 	.word	0x000231b5
   2419c:	000003e1 	.word	0x000003e1
   241a0:	0001fd31 	.word	0x0001fd31
   241a4:	00022e75 	.word	0x00022e75
   241a8:	000232b5 	.word	0x000232b5
   241ac:	000003eb 	.word	0x000003eb
   241b0:	0003899c 	.word	0x0003899c

000241b4 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   241b4:	b590      	push	{r4, r7, lr}
   241b6:	b087      	sub	sp, #28
   241b8:	af02      	add	r7, sp, #8
   241ba:	6078      	str	r0, [r7, #4]
   241bc:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   241be:	230f      	movs	r3, #15
   241c0:	18fb      	adds	r3, r7, r3
   241c2:	220a      	movs	r2, #10
   241c4:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   241c6:	230c      	movs	r3, #12
   241c8:	18fb      	adds	r3, r7, r3
   241ca:	2201      	movs	r2, #1
   241cc:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   241ce:	230e      	movs	r3, #14
   241d0:	18fb      	adds	r3, r7, r3
   241d2:	22ca      	movs	r2, #202	; 0xca
   241d4:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   241d6:	230d      	movs	r3, #13
   241d8:	18fb      	adds	r3, r7, r3
   241da:	2200      	movs	r2, #0
   241dc:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   241de:	687b      	ldr	r3, [r7, #4]
   241e0:	2bff      	cmp	r3, #255	; 0xff
   241e2:	d808      	bhi.n	241f6 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   241e4:	230e      	movs	r3, #14
   241e6:	18fb      	adds	r3, r7, r3
   241e8:	22c4      	movs	r2, #196	; 0xc4
   241ea:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   241ec:	230d      	movs	r3, #13
   241ee:	18fb      	adds	r3, r7, r3
   241f0:	2201      	movs	r2, #1
   241f2:	701a      	strb	r2, [r3, #0]
   241f4:	e007      	b.n	24206 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   241f6:	230e      	movs	r3, #14
   241f8:	18fb      	adds	r3, r7, r3
   241fa:	22ca      	movs	r2, #202	; 0xca
   241fc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   241fe:	230d      	movs	r3, #13
   24200:	18fb      	adds	r3, r7, r3
   24202:	2200      	movs	r2, #0
   24204:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   24206:	2308      	movs	r3, #8
   24208:	18fa      	adds	r2, r7, r3
   2420a:	6879      	ldr	r1, [r7, #4]
   2420c:	230e      	movs	r3, #14
   2420e:	18fb      	adds	r3, r7, r3
   24210:	7818      	ldrb	r0, [r3, #0]
   24212:	230d      	movs	r3, #13
   24214:	18fb      	adds	r3, r7, r3
   24216:	781b      	ldrb	r3, [r3, #0]
   24218:	9300      	str	r3, [sp, #0]
   2421a:	2304      	movs	r3, #4
   2421c:	4c37      	ldr	r4, [pc, #220]	; (242fc <spi_read_reg+0x148>)
   2421e:	47a0      	blx	r4
   24220:	0002      	movs	r2, r0
   24222:	230c      	movs	r3, #12
   24224:	18fb      	adds	r3, r7, r3
   24226:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24228:	230c      	movs	r3, #12
   2422a:	18fb      	adds	r3, r7, r3
   2422c:	781b      	ldrb	r3, [r3, #0]
   2422e:	b25b      	sxtb	r3, r3
   24230:	2b01      	cmp	r3, #1
   24232:	d010      	beq.n	24256 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24234:	4a32      	ldr	r2, [pc, #200]	; (24300 <spi_read_reg+0x14c>)
   24236:	4933      	ldr	r1, [pc, #204]	; (24304 <spi_read_reg+0x150>)
   24238:	4b33      	ldr	r3, [pc, #204]	; (24308 <spi_read_reg+0x154>)
   2423a:	0018      	movs	r0, r3
   2423c:	4b33      	ldr	r3, [pc, #204]	; (2430c <spi_read_reg+0x158>)
   2423e:	4798      	blx	r3
   24240:	687a      	ldr	r2, [r7, #4]
   24242:	4b33      	ldr	r3, [pc, #204]	; (24310 <spi_read_reg+0x15c>)
   24244:	0011      	movs	r1, r2
   24246:	0018      	movs	r0, r3
   24248:	4b30      	ldr	r3, [pc, #192]	; (2430c <spi_read_reg+0x158>)
   2424a:	4798      	blx	r3
   2424c:	4b31      	ldr	r3, [pc, #196]	; (24314 <spi_read_reg+0x160>)
   2424e:	0018      	movs	r0, r3
   24250:	4b2e      	ldr	r3, [pc, #184]	; (2430c <spi_read_reg+0x158>)
   24252:	4798      	blx	r3
		goto _FAIL_;
   24254:	e014      	b.n	24280 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   24256:	2308      	movs	r3, #8
   24258:	18fb      	adds	r3, r7, r3
   2425a:	781b      	ldrb	r3, [r3, #0]
   2425c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   2425e:	2308      	movs	r3, #8
   24260:	18fb      	adds	r3, r7, r3
   24262:	785b      	ldrb	r3, [r3, #1]
   24264:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   24266:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   24268:	2308      	movs	r3, #8
   2426a:	18fb      	adds	r3, r7, r3
   2426c:	789b      	ldrb	r3, [r3, #2]
   2426e:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   24270:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   24272:	2308      	movs	r3, #8
   24274:	18fb      	adds	r3, r7, r3
   24276:	78db      	ldrb	r3, [r3, #3]
   24278:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2427a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   2427c:	683b      	ldr	r3, [r7, #0]
   2427e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   24280:	230c      	movs	r3, #12
   24282:	18fb      	adds	r3, r7, r3
   24284:	781b      	ldrb	r3, [r3, #0]
   24286:	b25b      	sxtb	r3, r3
   24288:	2b01      	cmp	r3, #1
   2428a:	d02f      	beq.n	242ec <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   2428c:	2001      	movs	r0, #1
   2428e:	4b22      	ldr	r3, [pc, #136]	; (24318 <spi_read_reg+0x164>)
   24290:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24292:	2300      	movs	r3, #0
   24294:	9300      	str	r3, [sp, #0]
   24296:	2300      	movs	r3, #0
   24298:	2200      	movs	r2, #0
   2429a:	2100      	movs	r1, #0
   2429c:	20cf      	movs	r0, #207	; 0xcf
   2429e:	4c1f      	ldr	r4, [pc, #124]	; (2431c <spi_read_reg+0x168>)
   242a0:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   242a2:	20cf      	movs	r0, #207	; 0xcf
   242a4:	4b1e      	ldr	r3, [pc, #120]	; (24320 <spi_read_reg+0x16c>)
   242a6:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   242a8:	4a1e      	ldr	r2, [pc, #120]	; (24324 <spi_read_reg+0x170>)
   242aa:	4916      	ldr	r1, [pc, #88]	; (24304 <spi_read_reg+0x150>)
   242ac:	4b16      	ldr	r3, [pc, #88]	; (24308 <spi_read_reg+0x154>)
   242ae:	0018      	movs	r0, r3
   242b0:	4b16      	ldr	r3, [pc, #88]	; (2430c <spi_read_reg+0x158>)
   242b2:	4798      	blx	r3
   242b4:	230f      	movs	r3, #15
   242b6:	18fb      	adds	r3, r7, r3
   242b8:	7819      	ldrb	r1, [r3, #0]
   242ba:	687a      	ldr	r2, [r7, #4]
   242bc:	4b1a      	ldr	r3, [pc, #104]	; (24328 <spi_read_reg+0x174>)
   242be:	0018      	movs	r0, r3
   242c0:	4b12      	ldr	r3, [pc, #72]	; (2430c <spi_read_reg+0x158>)
   242c2:	4798      	blx	r3
   242c4:	4b13      	ldr	r3, [pc, #76]	; (24314 <spi_read_reg+0x160>)
   242c6:	0018      	movs	r0, r3
   242c8:	4b10      	ldr	r3, [pc, #64]	; (2430c <spi_read_reg+0x158>)
   242ca:	4798      	blx	r3
		nm_bsp_sleep(1);
   242cc:	2001      	movs	r0, #1
   242ce:	4b12      	ldr	r3, [pc, #72]	; (24318 <spi_read_reg+0x164>)
   242d0:	4798      	blx	r3
		retry--;
   242d2:	230f      	movs	r3, #15
   242d4:	18fb      	adds	r3, r7, r3
   242d6:	781a      	ldrb	r2, [r3, #0]
   242d8:	230f      	movs	r3, #15
   242da:	18fb      	adds	r3, r7, r3
   242dc:	3a01      	subs	r2, #1
   242de:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   242e0:	230f      	movs	r3, #15
   242e2:	18fb      	adds	r3, r7, r3
   242e4:	781b      	ldrb	r3, [r3, #0]
   242e6:	2b00      	cmp	r3, #0
   242e8:	d000      	beq.n	242ec <spi_read_reg+0x138>
   242ea:	e778      	b.n	241de <spi_read_reg+0x2a>
	}
		
	return result;
   242ec:	230c      	movs	r3, #12
   242ee:	18fb      	adds	r3, r7, r3
   242f0:	781b      	ldrb	r3, [r3, #0]
   242f2:	b25b      	sxtb	r3, r3
}
   242f4:	0018      	movs	r0, r3
   242f6:	46bd      	mov	sp, r7
   242f8:	b005      	add	sp, #20
   242fa:	bd90      	pop	{r4, r7, pc}
   242fc:	000233f1 	.word	0x000233f1
   24300:	00000423 	.word	0x00000423
   24304:	00038be8 	.word	0x00038be8
   24308:	00038590 	.word	0x00038590
   2430c:	0001dc99 	.word	0x0001dc99
   24310:	000389b8 	.word	0x000389b8
   24314:	000385d0 	.word	0x000385d0
   24318:	0001fd31 	.word	0x0001fd31
   2431c:	00022e75 	.word	0x00022e75
   24320:	000232b5 	.word	0x000232b5
   24324:	00000435 	.word	0x00000435
   24328:	000389e4 	.word	0x000389e4

0002432c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2432c:	b590      	push	{r4, r7, lr}
   2432e:	b089      	sub	sp, #36	; 0x24
   24330:	af02      	add	r7, sp, #8
   24332:	60f8      	str	r0, [r7, #12]
   24334:	60b9      	str	r1, [r7, #8]
   24336:	1dbb      	adds	r3, r7, #6
   24338:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2433a:	2316      	movs	r3, #22
   2433c:	18fb      	adds	r3, r7, r3
   2433e:	22c8      	movs	r2, #200	; 0xc8
   24340:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24342:	2317      	movs	r3, #23
   24344:	18fb      	adds	r3, r7, r3
   24346:	220a      	movs	r2, #10
   24348:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2434a:	1dbb      	adds	r3, r7, #6
   2434c:	881c      	ldrh	r4, [r3, #0]
   2434e:	68ba      	ldr	r2, [r7, #8]
   24350:	68f9      	ldr	r1, [r7, #12]
   24352:	2316      	movs	r3, #22
   24354:	18fb      	adds	r3, r7, r3
   24356:	7818      	ldrb	r0, [r3, #0]
   24358:	2300      	movs	r3, #0
   2435a:	9300      	str	r3, [sp, #0]
   2435c:	0023      	movs	r3, r4
   2435e:	4c2e      	ldr	r4, [pc, #184]	; (24418 <nm_spi_read+0xec>)
   24360:	47a0      	blx	r4
   24362:	0002      	movs	r2, r0
   24364:	2315      	movs	r3, #21
   24366:	18fb      	adds	r3, r7, r3
   24368:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2436a:	2315      	movs	r3, #21
   2436c:	18fb      	adds	r3, r7, r3
   2436e:	781b      	ldrb	r3, [r3, #0]
   24370:	b25b      	sxtb	r3, r3
   24372:	2b01      	cmp	r3, #1
   24374:	d010      	beq.n	24398 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   24376:	4a29      	ldr	r2, [pc, #164]	; (2441c <nm_spi_read+0xf0>)
   24378:	4929      	ldr	r1, [pc, #164]	; (24420 <nm_spi_read+0xf4>)
   2437a:	4b2a      	ldr	r3, [pc, #168]	; (24424 <nm_spi_read+0xf8>)
   2437c:	0018      	movs	r0, r3
   2437e:	4b2a      	ldr	r3, [pc, #168]	; (24428 <nm_spi_read+0xfc>)
   24380:	4798      	blx	r3
   24382:	68fa      	ldr	r2, [r7, #12]
   24384:	4b29      	ldr	r3, [pc, #164]	; (2442c <nm_spi_read+0x100>)
   24386:	0011      	movs	r1, r2
   24388:	0018      	movs	r0, r3
   2438a:	4b27      	ldr	r3, [pc, #156]	; (24428 <nm_spi_read+0xfc>)
   2438c:	4798      	blx	r3
   2438e:	4b28      	ldr	r3, [pc, #160]	; (24430 <nm_spi_read+0x104>)
   24390:	0018      	movs	r0, r3
   24392:	4b25      	ldr	r3, [pc, #148]	; (24428 <nm_spi_read+0xfc>)
   24394:	4798      	blx	r3
		goto _FAIL_;
   24396:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   24398:	2315      	movs	r3, #21
   2439a:	18fb      	adds	r3, r7, r3
   2439c:	781b      	ldrb	r3, [r3, #0]
   2439e:	b25b      	sxtb	r3, r3
   243a0:	2b01      	cmp	r3, #1
   243a2:	d030      	beq.n	24406 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   243a4:	2001      	movs	r0, #1
   243a6:	4b23      	ldr	r3, [pc, #140]	; (24434 <nm_spi_read+0x108>)
   243a8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   243aa:	2300      	movs	r3, #0
   243ac:	9300      	str	r3, [sp, #0]
   243ae:	2300      	movs	r3, #0
   243b0:	2200      	movs	r2, #0
   243b2:	2100      	movs	r1, #0
   243b4:	20cf      	movs	r0, #207	; 0xcf
   243b6:	4c20      	ldr	r4, [pc, #128]	; (24438 <nm_spi_read+0x10c>)
   243b8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   243ba:	20cf      	movs	r0, #207	; 0xcf
   243bc:	4b1f      	ldr	r3, [pc, #124]	; (2443c <nm_spi_read+0x110>)
   243be:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   243c0:	4a1f      	ldr	r2, [pc, #124]	; (24440 <nm_spi_read+0x114>)
   243c2:	4917      	ldr	r1, [pc, #92]	; (24420 <nm_spi_read+0xf4>)
   243c4:	4b17      	ldr	r3, [pc, #92]	; (24424 <nm_spi_read+0xf8>)
   243c6:	0018      	movs	r0, r3
   243c8:	4b17      	ldr	r3, [pc, #92]	; (24428 <nm_spi_read+0xfc>)
   243ca:	4798      	blx	r3
   243cc:	2317      	movs	r3, #23
   243ce:	18fb      	adds	r3, r7, r3
   243d0:	7819      	ldrb	r1, [r3, #0]
   243d2:	1dbb      	adds	r3, r7, #6
   243d4:	881b      	ldrh	r3, [r3, #0]
   243d6:	68fa      	ldr	r2, [r7, #12]
   243d8:	481a      	ldr	r0, [pc, #104]	; (24444 <nm_spi_read+0x118>)
   243da:	4c13      	ldr	r4, [pc, #76]	; (24428 <nm_spi_read+0xfc>)
   243dc:	47a0      	blx	r4
   243de:	4b14      	ldr	r3, [pc, #80]	; (24430 <nm_spi_read+0x104>)
   243e0:	0018      	movs	r0, r3
   243e2:	4b11      	ldr	r3, [pc, #68]	; (24428 <nm_spi_read+0xfc>)
   243e4:	4798      	blx	r3
		nm_bsp_sleep(1);
   243e6:	2001      	movs	r0, #1
   243e8:	4b12      	ldr	r3, [pc, #72]	; (24434 <nm_spi_read+0x108>)
   243ea:	4798      	blx	r3
		retry--;
   243ec:	2317      	movs	r3, #23
   243ee:	18fb      	adds	r3, r7, r3
   243f0:	781a      	ldrb	r2, [r3, #0]
   243f2:	2317      	movs	r3, #23
   243f4:	18fb      	adds	r3, r7, r3
   243f6:	3a01      	subs	r2, #1
   243f8:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   243fa:	2317      	movs	r3, #23
   243fc:	18fb      	adds	r3, r7, r3
   243fe:	781b      	ldrb	r3, [r3, #0]
   24400:	2b00      	cmp	r3, #0
   24402:	d000      	beq.n	24406 <nm_spi_read+0xda>
   24404:	e7a1      	b.n	2434a <nm_spi_read+0x1e>
	}

	return result;
   24406:	2315      	movs	r3, #21
   24408:	18fb      	adds	r3, r7, r3
   2440a:	781b      	ldrb	r3, [r3, #0]
   2440c:	b25b      	sxtb	r3, r3
}
   2440e:	0018      	movs	r0, r3
   24410:	46bd      	mov	sp, r7
   24412:	b007      	add	sp, #28
   24414:	bd90      	pop	{r4, r7, pc}
   24416:	46c0      	nop			; (mov r8, r8)
   24418:	000233f1 	.word	0x000233f1
   2441c:	00000472 	.word	0x00000472
   24420:	00038bf8 	.word	0x00038bf8
   24424:	00038590 	.word	0x00038590
   24428:	0001dc99 	.word	0x0001dc99
   2442c:	000389fc 	.word	0x000389fc
   24430:	000385d0 	.word	0x000385d0
   24434:	0001fd31 	.word	0x0001fd31
   24438:	00022e75 	.word	0x00022e75
   2443c:	000232b5 	.word	0x000232b5
   24440:	0000047d 	.word	0x0000047d
   24444:	0003899c 	.word	0x0003899c

00024448 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24448:	b580      	push	{r7, lr}
   2444a:	b082      	sub	sp, #8
   2444c:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2444e:	4b0c      	ldr	r3, [pc, #48]	; (24480 <spi_init_pkt_sz+0x38>)
   24450:	0018      	movs	r0, r3
   24452:	4b0c      	ldr	r3, [pc, #48]	; (24484 <spi_init_pkt_sz+0x3c>)
   24454:	4798      	blx	r3
   24456:	0003      	movs	r3, r0
   24458:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2445a:	687b      	ldr	r3, [r7, #4]
   2445c:	2270      	movs	r2, #112	; 0x70
   2445e:	4393      	bics	r3, r2
   24460:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   24462:	687b      	ldr	r3, [r7, #4]
   24464:	2250      	movs	r2, #80	; 0x50
   24466:	4313      	orrs	r3, r2
   24468:	607b      	str	r3, [r7, #4]
   2446a:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   2446c:	687b      	ldr	r3, [r7, #4]
   2446e:	4a04      	ldr	r2, [pc, #16]	; (24480 <spi_init_pkt_sz+0x38>)
   24470:	0019      	movs	r1, r3
   24472:	0010      	movs	r0, r2
   24474:	4b04      	ldr	r3, [pc, #16]	; (24488 <spi_init_pkt_sz+0x40>)
   24476:	4798      	blx	r3
}
   24478:	46c0      	nop			; (mov r8, r8)
   2447a:	46bd      	mov	sp, r7
   2447c:	b002      	add	sp, #8
   2447e:	bd80      	pop	{r7, pc}
   24480:	0000e824 	.word	0x0000e824
   24484:	00024621 	.word	0x00024621
   24488:	00024695 	.word	0x00024695

0002448c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   2448c:	b590      	push	{r4, r7, lr}
   2448e:	b083      	sub	sp, #12
   24490:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24492:	2300      	movs	r3, #0
   24494:	9300      	str	r3, [sp, #0]
   24496:	2300      	movs	r3, #0
   24498:	2200      	movs	r2, #0
   2449a:	2100      	movs	r1, #0
   2449c:	20cf      	movs	r0, #207	; 0xcf
   2449e:	4c05      	ldr	r4, [pc, #20]	; (244b4 <nm_spi_reset+0x28>)
   244a0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   244a2:	20cf      	movs	r0, #207	; 0xcf
   244a4:	4b04      	ldr	r3, [pc, #16]	; (244b8 <nm_spi_reset+0x2c>)
   244a6:	4798      	blx	r3
	return M2M_SUCCESS;
   244a8:	2300      	movs	r3, #0
}
   244aa:	0018      	movs	r0, r3
   244ac:	46bd      	mov	sp, r7
   244ae:	b001      	add	sp, #4
   244b0:	bd90      	pop	{r4, r7, pc}
   244b2:	46c0      	nop			; (mov r8, r8)
   244b4:	00022e75 	.word	0x00022e75
   244b8:	000232b5 	.word	0x000232b5

000244bc <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   244bc:	b580      	push	{r7, lr}
   244be:	b082      	sub	sp, #8
   244c0:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   244c2:	2300      	movs	r3, #0
   244c4:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   244c6:	4b40      	ldr	r3, [pc, #256]	; (245c8 <nm_spi_init+0x10c>)
   244c8:	2200      	movs	r2, #0
   244ca:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   244cc:	003b      	movs	r3, r7
   244ce:	4a3f      	ldr	r2, [pc, #252]	; (245cc <nm_spi_init+0x110>)
   244d0:	0019      	movs	r1, r3
   244d2:	0010      	movs	r0, r2
   244d4:	4b3e      	ldr	r3, [pc, #248]	; (245d0 <nm_spi_init+0x114>)
   244d6:	4798      	blx	r3
   244d8:	1e03      	subs	r3, r0, #0
   244da:	d129      	bne.n	24530 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   244dc:	4b3a      	ldr	r3, [pc, #232]	; (245c8 <nm_spi_init+0x10c>)
   244de:	2201      	movs	r2, #1
   244e0:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   244e2:	2398      	movs	r3, #152	; 0x98
   244e4:	00da      	lsls	r2, r3, #3
   244e6:	493b      	ldr	r1, [pc, #236]	; (245d4 <nm_spi_init+0x118>)
   244e8:	4b3b      	ldr	r3, [pc, #236]	; (245d8 <nm_spi_init+0x11c>)
   244ea:	0018      	movs	r0, r3
   244ec:	4b3b      	ldr	r3, [pc, #236]	; (245dc <nm_spi_init+0x120>)
   244ee:	4798      	blx	r3
   244f0:	4b3b      	ldr	r3, [pc, #236]	; (245e0 <nm_spi_init+0x124>)
   244f2:	0018      	movs	r0, r3
   244f4:	4b39      	ldr	r3, [pc, #228]	; (245dc <nm_spi_init+0x120>)
   244f6:	4798      	blx	r3
   244f8:	4b3a      	ldr	r3, [pc, #232]	; (245e4 <nm_spi_init+0x128>)
   244fa:	0018      	movs	r0, r3
   244fc:	4b37      	ldr	r3, [pc, #220]	; (245dc <nm_spi_init+0x120>)
   244fe:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   24500:	003b      	movs	r3, r7
   24502:	4a32      	ldr	r2, [pc, #200]	; (245cc <nm_spi_init+0x110>)
   24504:	0019      	movs	r1, r3
   24506:	0010      	movs	r0, r2
   24508:	4b31      	ldr	r3, [pc, #196]	; (245d0 <nm_spi_init+0x114>)
   2450a:	4798      	blx	r3
   2450c:	1e03      	subs	r3, r0, #0
   2450e:	d10f      	bne.n	24530 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   24510:	4a35      	ldr	r2, [pc, #212]	; (245e8 <nm_spi_init+0x12c>)
   24512:	4930      	ldr	r1, [pc, #192]	; (245d4 <nm_spi_init+0x118>)
   24514:	4b30      	ldr	r3, [pc, #192]	; (245d8 <nm_spi_init+0x11c>)
   24516:	0018      	movs	r0, r3
   24518:	4b30      	ldr	r3, [pc, #192]	; (245dc <nm_spi_init+0x120>)
   2451a:	4798      	blx	r3
   2451c:	4b33      	ldr	r3, [pc, #204]	; (245ec <nm_spi_init+0x130>)
   2451e:	0018      	movs	r0, r3
   24520:	4b2e      	ldr	r3, [pc, #184]	; (245dc <nm_spi_init+0x120>)
   24522:	4798      	blx	r3
   24524:	4b2f      	ldr	r3, [pc, #188]	; (245e4 <nm_spi_init+0x128>)
   24526:	0018      	movs	r0, r3
   24528:	4b2c      	ldr	r3, [pc, #176]	; (245dc <nm_spi_init+0x120>)
   2452a:	4798      	blx	r3
			return 0;
   2452c:	2300      	movs	r3, #0
   2452e:	e047      	b.n	245c0 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   24530:	4b25      	ldr	r3, [pc, #148]	; (245c8 <nm_spi_init+0x10c>)
   24532:	781b      	ldrb	r3, [r3, #0]
   24534:	2b00      	cmp	r3, #0
   24536:	d126      	bne.n	24586 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   24538:	683b      	ldr	r3, [r7, #0]
   2453a:	220c      	movs	r2, #12
   2453c:	4393      	bics	r3, r2
   2453e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   24540:	683b      	ldr	r3, [r7, #0]
   24542:	2270      	movs	r2, #112	; 0x70
   24544:	4393      	bics	r3, r2
   24546:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   24548:	683b      	ldr	r3, [r7, #0]
   2454a:	2250      	movs	r2, #80	; 0x50
   2454c:	4313      	orrs	r3, r2
   2454e:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   24550:	683b      	ldr	r3, [r7, #0]
   24552:	4a1e      	ldr	r2, [pc, #120]	; (245cc <nm_spi_init+0x110>)
   24554:	0019      	movs	r1, r3
   24556:	0010      	movs	r0, r2
   24558:	4b25      	ldr	r3, [pc, #148]	; (245f0 <nm_spi_init+0x134>)
   2455a:	4798      	blx	r3
   2455c:	1e03      	subs	r3, r0, #0
   2455e:	d10f      	bne.n	24580 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   24560:	4a24      	ldr	r2, [pc, #144]	; (245f4 <nm_spi_init+0x138>)
   24562:	491c      	ldr	r1, [pc, #112]	; (245d4 <nm_spi_init+0x118>)
   24564:	4b1c      	ldr	r3, [pc, #112]	; (245d8 <nm_spi_init+0x11c>)
   24566:	0018      	movs	r0, r3
   24568:	4b1c      	ldr	r3, [pc, #112]	; (245dc <nm_spi_init+0x120>)
   2456a:	4798      	blx	r3
   2456c:	4b22      	ldr	r3, [pc, #136]	; (245f8 <nm_spi_init+0x13c>)
   2456e:	0018      	movs	r0, r3
   24570:	4b1a      	ldr	r3, [pc, #104]	; (245dc <nm_spi_init+0x120>)
   24572:	4798      	blx	r3
   24574:	4b1b      	ldr	r3, [pc, #108]	; (245e4 <nm_spi_init+0x128>)
   24576:	0018      	movs	r0, r3
   24578:	4b18      	ldr	r3, [pc, #96]	; (245dc <nm_spi_init+0x120>)
   2457a:	4798      	blx	r3
			return 0;
   2457c:	2300      	movs	r3, #0
   2457e:	e01f      	b.n	245c0 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   24580:	4b11      	ldr	r3, [pc, #68]	; (245c8 <nm_spi_init+0x10c>)
   24582:	2201      	movs	r2, #1
   24584:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   24586:	1d3a      	adds	r2, r7, #4
   24588:	2380      	movs	r3, #128	; 0x80
   2458a:	015b      	lsls	r3, r3, #5
   2458c:	0011      	movs	r1, r2
   2458e:	0018      	movs	r0, r3
   24590:	4b0f      	ldr	r3, [pc, #60]	; (245d0 <nm_spi_init+0x114>)
   24592:	4798      	blx	r3
   24594:	1e03      	subs	r3, r0, #0
   24596:	d110      	bne.n	245ba <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   24598:	4a18      	ldr	r2, [pc, #96]	; (245fc <nm_spi_init+0x140>)
   2459a:	490e      	ldr	r1, [pc, #56]	; (245d4 <nm_spi_init+0x118>)
   2459c:	4b0e      	ldr	r3, [pc, #56]	; (245d8 <nm_spi_init+0x11c>)
   2459e:	0018      	movs	r0, r3
   245a0:	4b0e      	ldr	r3, [pc, #56]	; (245dc <nm_spi_init+0x120>)
   245a2:	4798      	blx	r3
   245a4:	4b16      	ldr	r3, [pc, #88]	; (24600 <nm_spi_init+0x144>)
   245a6:	0018      	movs	r0, r3
   245a8:	4b0c      	ldr	r3, [pc, #48]	; (245dc <nm_spi_init+0x120>)
   245aa:	4798      	blx	r3
   245ac:	4b0d      	ldr	r3, [pc, #52]	; (245e4 <nm_spi_init+0x128>)
   245ae:	0018      	movs	r0, r3
   245b0:	4b0a      	ldr	r3, [pc, #40]	; (245dc <nm_spi_init+0x120>)
   245b2:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   245b4:	2306      	movs	r3, #6
   245b6:	425b      	negs	r3, r3
   245b8:	e002      	b.n	245c0 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   245ba:	4b12      	ldr	r3, [pc, #72]	; (24604 <nm_spi_init+0x148>)
   245bc:	4798      	blx	r3


	return M2M_SUCCESS;
   245be:	2300      	movs	r3, #0
}
   245c0:	0018      	movs	r0, r3
   245c2:	46bd      	mov	sp, r7
   245c4:	b002      	add	sp, #8
   245c6:	bd80      	pop	{r7, pc}
   245c8:	20003e98 	.word	0x20003e98
   245cc:	0000e824 	.word	0x0000e824
   245d0:	000241b5 	.word	0x000241b5
   245d4:	00038c04 	.word	0x00038c04
   245d8:	00038590 	.word	0x00038590
   245dc:	0001dc99 	.word	0x0001dc99
   245e0:	00038a2c 	.word	0x00038a2c
   245e4:	000385d0 	.word	0x000385d0
   245e8:	000004c3 	.word	0x000004c3
   245ec:	00038a7c 	.word	0x00038a7c
   245f0:	00023ebd 	.word	0x00023ebd
   245f4:	000004cd 	.word	0x000004cd
   245f8:	00038aac 	.word	0x00038aac
   245fc:	000004d7 	.word	0x000004d7
   24600:	00038ae0 	.word	0x00038ae0
   24604:	00024449 	.word	0x00024449

00024608 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   24608:	b580      	push	{r7, lr}
   2460a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2460c:	4b03      	ldr	r3, [pc, #12]	; (2461c <nm_spi_deinit+0x14>)
   2460e:	2200      	movs	r2, #0
   24610:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   24612:	2300      	movs	r3, #0
}
   24614:	0018      	movs	r0, r3
   24616:	46bd      	mov	sp, r7
   24618:	bd80      	pop	{r7, pc}
   2461a:	46c0      	nop			; (mov r8, r8)
   2461c:	20003e98 	.word	0x20003e98

00024620 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   24620:	b580      	push	{r7, lr}
   24622:	b084      	sub	sp, #16
   24624:	af00      	add	r7, sp, #0
   24626:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   24628:	230c      	movs	r3, #12
   2462a:	18fa      	adds	r2, r7, r3
   2462c:	687b      	ldr	r3, [r7, #4]
   2462e:	0011      	movs	r1, r2
   24630:	0018      	movs	r0, r3
   24632:	4b03      	ldr	r3, [pc, #12]	; (24640 <nm_spi_read_reg+0x20>)
   24634:	4798      	blx	r3

	return u32Val;
   24636:	68fb      	ldr	r3, [r7, #12]
}
   24638:	0018      	movs	r0, r3
   2463a:	46bd      	mov	sp, r7
   2463c:	b004      	add	sp, #16
   2463e:	bd80      	pop	{r7, pc}
   24640:	000241b5 	.word	0x000241b5

00024644 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24644:	b590      	push	{r4, r7, lr}
   24646:	b085      	sub	sp, #20
   24648:	af00      	add	r7, sp, #0
   2464a:	6078      	str	r0, [r7, #4]
   2464c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   2464e:	230f      	movs	r3, #15
   24650:	18fc      	adds	r4, r7, r3
   24652:	683a      	ldr	r2, [r7, #0]
   24654:	687b      	ldr	r3, [r7, #4]
   24656:	0011      	movs	r1, r2
   24658:	0018      	movs	r0, r3
   2465a:	4b0d      	ldr	r3, [pc, #52]	; (24690 <nm_spi_read_reg_with_ret+0x4c>)
   2465c:	4798      	blx	r3
   2465e:	0003      	movs	r3, r0
   24660:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24662:	230f      	movs	r3, #15
   24664:	18fb      	adds	r3, r7, r3
   24666:	781b      	ldrb	r3, [r3, #0]
   24668:	b25b      	sxtb	r3, r3
   2466a:	2b01      	cmp	r3, #1
   2466c:	d104      	bne.n	24678 <nm_spi_read_reg_with_ret+0x34>
   2466e:	230f      	movs	r3, #15
   24670:	18fb      	adds	r3, r7, r3
   24672:	2200      	movs	r2, #0
   24674:	701a      	strb	r2, [r3, #0]
   24676:	e003      	b.n	24680 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24678:	230f      	movs	r3, #15
   2467a:	18fb      	adds	r3, r7, r3
   2467c:	22fa      	movs	r2, #250	; 0xfa
   2467e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24680:	230f      	movs	r3, #15
   24682:	18fb      	adds	r3, r7, r3
   24684:	781b      	ldrb	r3, [r3, #0]
   24686:	b25b      	sxtb	r3, r3
}
   24688:	0018      	movs	r0, r3
   2468a:	46bd      	mov	sp, r7
   2468c:	b005      	add	sp, #20
   2468e:	bd90      	pop	{r4, r7, pc}
   24690:	000241b5 	.word	0x000241b5

00024694 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   24694:	b590      	push	{r4, r7, lr}
   24696:	b085      	sub	sp, #20
   24698:	af00      	add	r7, sp, #0
   2469a:	6078      	str	r0, [r7, #4]
   2469c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   2469e:	230f      	movs	r3, #15
   246a0:	18fc      	adds	r4, r7, r3
   246a2:	683a      	ldr	r2, [r7, #0]
   246a4:	687b      	ldr	r3, [r7, #4]
   246a6:	0011      	movs	r1, r2
   246a8:	0018      	movs	r0, r3
   246aa:	4b0d      	ldr	r3, [pc, #52]	; (246e0 <nm_spi_write_reg+0x4c>)
   246ac:	4798      	blx	r3
   246ae:	0003      	movs	r3, r0
   246b0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   246b2:	230f      	movs	r3, #15
   246b4:	18fb      	adds	r3, r7, r3
   246b6:	781b      	ldrb	r3, [r3, #0]
   246b8:	b25b      	sxtb	r3, r3
   246ba:	2b01      	cmp	r3, #1
   246bc:	d104      	bne.n	246c8 <nm_spi_write_reg+0x34>
   246be:	230f      	movs	r3, #15
   246c0:	18fb      	adds	r3, r7, r3
   246c2:	2200      	movs	r2, #0
   246c4:	701a      	strb	r2, [r3, #0]
   246c6:	e003      	b.n	246d0 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   246c8:	230f      	movs	r3, #15
   246ca:	18fb      	adds	r3, r7, r3
   246cc:	22fa      	movs	r2, #250	; 0xfa
   246ce:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   246d0:	230f      	movs	r3, #15
   246d2:	18fb      	adds	r3, r7, r3
   246d4:	781b      	ldrb	r3, [r3, #0]
   246d6:	b25b      	sxtb	r3, r3
}
   246d8:	0018      	movs	r0, r3
   246da:	46bd      	mov	sp, r7
   246dc:	b005      	add	sp, #20
   246de:	bd90      	pop	{r4, r7, pc}
   246e0:	00023ebd 	.word	0x00023ebd

000246e4 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   246e4:	b590      	push	{r4, r7, lr}
   246e6:	b087      	sub	sp, #28
   246e8:	af00      	add	r7, sp, #0
   246ea:	60f8      	str	r0, [r7, #12]
   246ec:	60b9      	str	r1, [r7, #8]
   246ee:	1dbb      	adds	r3, r7, #6
   246f0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   246f2:	2317      	movs	r3, #23
   246f4:	18fc      	adds	r4, r7, r3
   246f6:	1dbb      	adds	r3, r7, #6
   246f8:	881a      	ldrh	r2, [r3, #0]
   246fa:	68b9      	ldr	r1, [r7, #8]
   246fc:	68fb      	ldr	r3, [r7, #12]
   246fe:	0018      	movs	r0, r3
   24700:	4b0d      	ldr	r3, [pc, #52]	; (24738 <nm_spi_read_block+0x54>)
   24702:	4798      	blx	r3
   24704:	0003      	movs	r3, r0
   24706:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24708:	2317      	movs	r3, #23
   2470a:	18fb      	adds	r3, r7, r3
   2470c:	781b      	ldrb	r3, [r3, #0]
   2470e:	b25b      	sxtb	r3, r3
   24710:	2b01      	cmp	r3, #1
   24712:	d104      	bne.n	2471e <nm_spi_read_block+0x3a>
   24714:	2317      	movs	r3, #23
   24716:	18fb      	adds	r3, r7, r3
   24718:	2200      	movs	r2, #0
   2471a:	701a      	strb	r2, [r3, #0]
   2471c:	e003      	b.n	24726 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2471e:	2317      	movs	r3, #23
   24720:	18fb      	adds	r3, r7, r3
   24722:	22fa      	movs	r2, #250	; 0xfa
   24724:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24726:	2317      	movs	r3, #23
   24728:	18fb      	adds	r3, r7, r3
   2472a:	781b      	ldrb	r3, [r3, #0]
   2472c:	b25b      	sxtb	r3, r3
}
   2472e:	0018      	movs	r0, r3
   24730:	46bd      	mov	sp, r7
   24732:	b007      	add	sp, #28
   24734:	bd90      	pop	{r4, r7, pc}
   24736:	46c0      	nop			; (mov r8, r8)
   24738:	0002432d 	.word	0x0002432d

0002473c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2473c:	b590      	push	{r4, r7, lr}
   2473e:	b087      	sub	sp, #28
   24740:	af00      	add	r7, sp, #0
   24742:	60f8      	str	r0, [r7, #12]
   24744:	60b9      	str	r1, [r7, #8]
   24746:	1dbb      	adds	r3, r7, #6
   24748:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2474a:	2317      	movs	r3, #23
   2474c:	18fc      	adds	r4, r7, r3
   2474e:	1dbb      	adds	r3, r7, #6
   24750:	881a      	ldrh	r2, [r3, #0]
   24752:	68b9      	ldr	r1, [r7, #8]
   24754:	68fb      	ldr	r3, [r7, #12]
   24756:	0018      	movs	r0, r3
   24758:	4b0d      	ldr	r3, [pc, #52]	; (24790 <nm_spi_write_block+0x54>)
   2475a:	4798      	blx	r3
   2475c:	0003      	movs	r3, r0
   2475e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24760:	2317      	movs	r3, #23
   24762:	18fb      	adds	r3, r7, r3
   24764:	781b      	ldrb	r3, [r3, #0]
   24766:	b25b      	sxtb	r3, r3
   24768:	2b01      	cmp	r3, #1
   2476a:	d104      	bne.n	24776 <nm_spi_write_block+0x3a>
   2476c:	2317      	movs	r3, #23
   2476e:	18fb      	adds	r3, r7, r3
   24770:	2200      	movs	r2, #0
   24772:	701a      	strb	r2, [r3, #0]
   24774:	e003      	b.n	2477e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24776:	2317      	movs	r3, #23
   24778:	18fb      	adds	r3, r7, r3
   2477a:	22fa      	movs	r2, #250	; 0xfa
   2477c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2477e:	2317      	movs	r3, #23
   24780:	18fb      	adds	r3, r7, r3
   24782:	781b      	ldrb	r3, [r3, #0]
   24784:	b25b      	sxtb	r3, r3
}
   24786:	0018      	movs	r0, r3
   24788:	46bd      	mov	sp, r7
   2478a:	b007      	add	sp, #28
   2478c:	bd90      	pop	{r4, r7, pc}
   2478e:	46c0      	nop			; (mov r8, r8)
   24790:	00024009 	.word	0x00024009

00024794 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   24794:	b590      	push	{r4, r7, lr}
   24796:	b089      	sub	sp, #36	; 0x24
   24798:	af00      	add	r7, sp, #0
   2479a:	60b9      	str	r1, [r7, #8]
   2479c:	0011      	movs	r1, r2
   2479e:	607b      	str	r3, [r7, #4]
   247a0:	230f      	movs	r3, #15
   247a2:	18fb      	adds	r3, r7, r3
   247a4:	1c02      	adds	r2, r0, #0
   247a6:	701a      	strb	r2, [r3, #0]
   247a8:	230e      	movs	r3, #14
   247aa:	18fb      	adds	r3, r7, r3
   247ac:	1c0a      	adds	r2, r1, #0
   247ae:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   247b0:	2330      	movs	r3, #48	; 0x30
   247b2:	18fb      	adds	r3, r7, r3
   247b4:	881b      	ldrh	r3, [r3, #0]
   247b6:	2b00      	cmp	r3, #0
   247b8:	d100      	bne.n	247bc <Socket_ReadSocketData+0x28>
   247ba:	e0d7      	b.n	2496c <Socket_ReadSocketData+0x1d8>
   247bc:	230f      	movs	r3, #15
   247be:	18fb      	adds	r3, r7, r3
   247c0:	2200      	movs	r2, #0
   247c2:	569a      	ldrsb	r2, [r3, r2]
   247c4:	4b6b      	ldr	r3, [pc, #428]	; (24974 <Socket_ReadSocketData+0x1e0>)
   247c6:	0112      	lsls	r2, r2, #4
   247c8:	58d3      	ldr	r3, [r2, r3]
   247ca:	2b00      	cmp	r3, #0
   247cc:	d100      	bne.n	247d0 <Socket_ReadSocketData+0x3c>
   247ce:	e0cd      	b.n	2496c <Socket_ReadSocketData+0x1d8>
   247d0:	230f      	movs	r3, #15
   247d2:	18fb      	adds	r3, r7, r3
   247d4:	781b      	ldrb	r3, [r3, #0]
   247d6:	b25b      	sxtb	r3, r3
   247d8:	4a66      	ldr	r2, [pc, #408]	; (24974 <Socket_ReadSocketData+0x1e0>)
   247da:	011b      	lsls	r3, r3, #4
   247dc:	18d3      	adds	r3, r2, r3
   247de:	3304      	adds	r3, #4
   247e0:	881b      	ldrh	r3, [r3, #0]
   247e2:	b29b      	uxth	r3, r3
   247e4:	2b00      	cmp	r3, #0
   247e6:	d100      	bne.n	247ea <Socket_ReadSocketData+0x56>
   247e8:	e0c0      	b.n	2496c <Socket_ReadSocketData+0x1d8>
   247ea:	230f      	movs	r3, #15
   247ec:	18fb      	adds	r3, r7, r3
   247ee:	781b      	ldrb	r3, [r3, #0]
   247f0:	b25b      	sxtb	r3, r3
   247f2:	4a60      	ldr	r2, [pc, #384]	; (24974 <Socket_ReadSocketData+0x1e0>)
   247f4:	011b      	lsls	r3, r3, #4
   247f6:	18d3      	adds	r3, r2, r3
   247f8:	330a      	adds	r3, #10
   247fa:	781b      	ldrb	r3, [r3, #0]
   247fc:	b2db      	uxtb	r3, r3
   247fe:	2b01      	cmp	r3, #1
   24800:	d000      	beq.n	24804 <Socket_ReadSocketData+0x70>
   24802:	e0b3      	b.n	2496c <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   24804:	687b      	ldr	r3, [r7, #4]
   24806:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   24808:	68bb      	ldr	r3, [r7, #8]
   2480a:	2230      	movs	r2, #48	; 0x30
   2480c:	18ba      	adds	r2, r7, r2
   2480e:	8812      	ldrh	r2, [r2, #0]
   24810:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   24812:	2319      	movs	r3, #25
   24814:	18fb      	adds	r3, r7, r3
   24816:	2201      	movs	r2, #1
   24818:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2481a:	231a      	movs	r3, #26
   2481c:	18fb      	adds	r3, r7, r3
   2481e:	2230      	movs	r2, #48	; 0x30
   24820:	18ba      	adds	r2, r7, r2
   24822:	8812      	ldrh	r2, [r2, #0]
   24824:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   24826:	230f      	movs	r3, #15
   24828:	18fb      	adds	r3, r7, r3
   2482a:	781b      	ldrb	r3, [r3, #0]
   2482c:	b25b      	sxtb	r3, r3
   2482e:	4a51      	ldr	r2, [pc, #324]	; (24974 <Socket_ReadSocketData+0x1e0>)
   24830:	011b      	lsls	r3, r3, #4
   24832:	18d3      	adds	r3, r2, r3
   24834:	3304      	adds	r3, #4
   24836:	881b      	ldrh	r3, [r3, #0]
   24838:	b29b      	uxth	r3, r3
   2483a:	221a      	movs	r2, #26
   2483c:	18ba      	adds	r2, r7, r2
   2483e:	8812      	ldrh	r2, [r2, #0]
   24840:	1ad3      	subs	r3, r2, r3
   24842:	b29a      	uxth	r2, r3
   24844:	2316      	movs	r3, #22
   24846:	18fb      	adds	r3, r7, r3
   24848:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   2484a:	2316      	movs	r3, #22
   2484c:	18fb      	adds	r3, r7, r3
   2484e:	2200      	movs	r2, #0
   24850:	5e9b      	ldrsh	r3, [r3, r2]
   24852:	2b00      	cmp	r3, #0
   24854:	dd0f      	ble.n	24876 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   24856:	2319      	movs	r3, #25
   24858:	18fb      	adds	r3, r7, r3
   2485a:	2200      	movs	r2, #0
   2485c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   2485e:	230f      	movs	r3, #15
   24860:	18fb      	adds	r3, r7, r3
   24862:	2200      	movs	r2, #0
   24864:	569a      	ldrsb	r2, [r3, r2]
   24866:	231a      	movs	r3, #26
   24868:	18fb      	adds	r3, r7, r3
   2486a:	4942      	ldr	r1, [pc, #264]	; (24974 <Socket_ReadSocketData+0x1e0>)
   2486c:	0112      	lsls	r2, r2, #4
   2486e:	188a      	adds	r2, r1, r2
   24870:	3204      	adds	r2, #4
   24872:	8812      	ldrh	r2, [r2, #0]
   24874:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   24876:	230f      	movs	r3, #15
   24878:	18fb      	adds	r3, r7, r3
   2487a:	2200      	movs	r2, #0
   2487c:	569a      	ldrsb	r2, [r3, r2]
   2487e:	4b3d      	ldr	r3, [pc, #244]	; (24974 <Socket_ReadSocketData+0x1e0>)
   24880:	0112      	lsls	r2, r2, #4
   24882:	58d1      	ldr	r1, [r2, r3]
   24884:	2319      	movs	r3, #25
   24886:	18fb      	adds	r3, r7, r3
   24888:	781c      	ldrb	r4, [r3, #0]
   2488a:	231a      	movs	r3, #26
   2488c:	18fb      	adds	r3, r7, r3
   2488e:	881a      	ldrh	r2, [r3, #0]
   24890:	69f8      	ldr	r0, [r7, #28]
   24892:	0023      	movs	r3, r4
   24894:	4c38      	ldr	r4, [pc, #224]	; (24978 <Socket_ReadSocketData+0x1e4>)
   24896:	47a0      	blx	r4
   24898:	1e03      	subs	r3, r0, #0
   2489a:	d14f      	bne.n	2493c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   2489c:	230f      	movs	r3, #15
   2489e:	18fb      	adds	r3, r7, r3
   248a0:	2200      	movs	r2, #0
   248a2:	569a      	ldrsb	r2, [r3, r2]
   248a4:	4b33      	ldr	r3, [pc, #204]	; (24974 <Socket_ReadSocketData+0x1e0>)
   248a6:	0112      	lsls	r2, r2, #4
   248a8:	58d2      	ldr	r2, [r2, r3]
   248aa:	68bb      	ldr	r3, [r7, #8]
   248ac:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   248ae:	231a      	movs	r3, #26
   248b0:	18fb      	adds	r3, r7, r3
   248b2:	2200      	movs	r2, #0
   248b4:	5e9a      	ldrsh	r2, [r3, r2]
   248b6:	68bb      	ldr	r3, [r7, #8]
   248b8:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   248ba:	68bb      	ldr	r3, [r7, #8]
   248bc:	88da      	ldrh	r2, [r3, #6]
   248be:	231a      	movs	r3, #26
   248c0:	18fb      	adds	r3, r7, r3
   248c2:	881b      	ldrh	r3, [r3, #0]
   248c4:	1ad3      	subs	r3, r2, r3
   248c6:	b29a      	uxth	r2, r3
   248c8:	68bb      	ldr	r3, [r7, #8]
   248ca:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   248cc:	4b2b      	ldr	r3, [pc, #172]	; (2497c <Socket_ReadSocketData+0x1e8>)
   248ce:	681b      	ldr	r3, [r3, #0]
   248d0:	2b00      	cmp	r3, #0
   248d2:	d00b      	beq.n	248ec <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   248d4:	4b29      	ldr	r3, [pc, #164]	; (2497c <Socket_ReadSocketData+0x1e8>)
   248d6:	681b      	ldr	r3, [r3, #0]
   248d8:	68bc      	ldr	r4, [r7, #8]
   248da:	220e      	movs	r2, #14
   248dc:	18ba      	adds	r2, r7, r2
   248de:	7811      	ldrb	r1, [r2, #0]
   248e0:	220f      	movs	r2, #15
   248e2:	18ba      	adds	r2, r7, r2
   248e4:	2000      	movs	r0, #0
   248e6:	5610      	ldrsb	r0, [r2, r0]
   248e8:	0022      	movs	r2, r4
   248ea:	4798      	blx	r3

				u16ReadCount -= u16Read;
   248ec:	2330      	movs	r3, #48	; 0x30
   248ee:	18f9      	adds	r1, r7, r3
   248f0:	2330      	movs	r3, #48	; 0x30
   248f2:	18fa      	adds	r2, r7, r3
   248f4:	231a      	movs	r3, #26
   248f6:	18fb      	adds	r3, r7, r3
   248f8:	8812      	ldrh	r2, [r2, #0]
   248fa:	881b      	ldrh	r3, [r3, #0]
   248fc:	1ad3      	subs	r3, r2, r3
   248fe:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   24900:	231a      	movs	r3, #26
   24902:	18fb      	adds	r3, r7, r3
   24904:	881b      	ldrh	r3, [r3, #0]
   24906:	69fa      	ldr	r2, [r7, #28]
   24908:	18d3      	adds	r3, r2, r3
   2490a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   2490c:	230f      	movs	r3, #15
   2490e:	18fb      	adds	r3, r7, r3
   24910:	781b      	ldrb	r3, [r3, #0]
   24912:	b25b      	sxtb	r3, r3
   24914:	4a17      	ldr	r2, [pc, #92]	; (24974 <Socket_ReadSocketData+0x1e0>)
   24916:	011b      	lsls	r3, r3, #4
   24918:	18d3      	adds	r3, r2, r3
   2491a:	330a      	adds	r3, #10
   2491c:	781b      	ldrb	r3, [r3, #0]
   2491e:	b2db      	uxtb	r3, r3
   24920:	2b00      	cmp	r3, #0
   24922:	d11c      	bne.n	2495e <Socket_ReadSocketData+0x1ca>
   24924:	2330      	movs	r3, #48	; 0x30
   24926:	18fb      	adds	r3, r7, r3
   24928:	881b      	ldrh	r3, [r3, #0]
   2492a:	2b00      	cmp	r3, #0
   2492c:	d017      	beq.n	2495e <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2492e:	2301      	movs	r3, #1
   24930:	2200      	movs	r2, #0
   24932:	2100      	movs	r1, #0
   24934:	2000      	movs	r0, #0
   24936:	4c10      	ldr	r4, [pc, #64]	; (24978 <Socket_ReadSocketData+0x1e4>)
   24938:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   2493a:	e017      	b.n	2496c <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   2493c:	4b10      	ldr	r3, [pc, #64]	; (24980 <Socket_ReadSocketData+0x1ec>)
   2493e:	0018      	movs	r0, r3
   24940:	4b10      	ldr	r3, [pc, #64]	; (24984 <Socket_ReadSocketData+0x1f0>)
   24942:	4798      	blx	r3
   24944:	2330      	movs	r3, #48	; 0x30
   24946:	18fb      	adds	r3, r7, r3
   24948:	881a      	ldrh	r2, [r3, #0]
   2494a:	4b0f      	ldr	r3, [pc, #60]	; (24988 <Socket_ReadSocketData+0x1f4>)
   2494c:	0011      	movs	r1, r2
   2494e:	0018      	movs	r0, r3
   24950:	4b0c      	ldr	r3, [pc, #48]	; (24984 <Socket_ReadSocketData+0x1f0>)
   24952:	4798      	blx	r3
   24954:	4b0d      	ldr	r3, [pc, #52]	; (2498c <Socket_ReadSocketData+0x1f8>)
   24956:	0018      	movs	r0, r3
   24958:	4b0a      	ldr	r3, [pc, #40]	; (24984 <Socket_ReadSocketData+0x1f0>)
   2495a:	4798      	blx	r3
				break;
   2495c:	e006      	b.n	2496c <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   2495e:	2330      	movs	r3, #48	; 0x30
   24960:	18fb      	adds	r3, r7, r3
   24962:	881b      	ldrh	r3, [r3, #0]
   24964:	2b00      	cmp	r3, #0
   24966:	d000      	beq.n	2496a <Socket_ReadSocketData+0x1d6>
   24968:	e753      	b.n	24812 <Socket_ReadSocketData+0x7e>
	}
}
   2496a:	e7ff      	b.n	2496c <Socket_ReadSocketData+0x1d8>
   2496c:	46c0      	nop			; (mov r8, r8)
   2496e:	46bd      	mov	sp, r7
   24970:	b009      	add	sp, #36	; 0x24
   24972:	bd90      	pop	{r4, r7, pc}
   24974:	20005680 	.word	0x20005680
   24978:	0002118d 	.word	0x0002118d
   2497c:	20005730 	.word	0x20005730
   24980:	00038c10 	.word	0x00038c10
   24984:	0001dc99 	.word	0x0001dc99
   24988:	00038c1c 	.word	0x00038c1c
   2498c:	00038c30 	.word	0x00038c30

00024990 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   24990:	b590      	push	{r4, r7, lr}
   24992:	b0bb      	sub	sp, #236	; 0xec
   24994:	af02      	add	r7, sp, #8
   24996:	603a      	str	r2, [r7, #0]
   24998:	1dfb      	adds	r3, r7, #7
   2499a:	1c02      	adds	r2, r0, #0
   2499c:	701a      	strb	r2, [r3, #0]
   2499e:	1d3b      	adds	r3, r7, #4
   249a0:	1c0a      	adds	r2, r1, #0
   249a2:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   249a4:	1dfb      	adds	r3, r7, #7
   249a6:	781b      	ldrb	r3, [r3, #0]
   249a8:	2b41      	cmp	r3, #65	; 0x41
   249aa:	d003      	beq.n	249b4 <m2m_ip_cb+0x24>
   249ac:	1dfb      	adds	r3, r7, #7
   249ae:	781b      	ldrb	r3, [r3, #0]
   249b0:	2b54      	cmp	r3, #84	; 0x54
   249b2:	d120      	bne.n	249f6 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   249b4:	23cc      	movs	r3, #204	; 0xcc
   249b6:	18f9      	adds	r1, r7, r3
   249b8:	6838      	ldr	r0, [r7, #0]
   249ba:	2300      	movs	r3, #0
   249bc:	2204      	movs	r2, #4
   249be:	4c98      	ldr	r4, [pc, #608]	; (24c20 <m2m_ip_cb+0x290>)
   249c0:	47a0      	blx	r4
   249c2:	1e03      	subs	r3, r0, #0
   249c4:	d000      	beq.n	249c8 <m2m_ip_cb+0x38>
   249c6:	e275      	b.n	24eb4 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   249c8:	23cc      	movs	r3, #204	; 0xcc
   249ca:	18fb      	adds	r3, r7, r3
   249cc:	2201      	movs	r2, #1
   249ce:	569a      	ldrsb	r2, [r3, r2]
   249d0:	23c8      	movs	r3, #200	; 0xc8
   249d2:	18fb      	adds	r3, r7, r3
   249d4:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   249d6:	4b93      	ldr	r3, [pc, #588]	; (24c24 <m2m_ip_cb+0x294>)
   249d8:	681b      	ldr	r3, [r3, #0]
   249da:	2b00      	cmp	r3, #0
   249dc:	d100      	bne.n	249e0 <m2m_ip_cb+0x50>
   249de:	e269      	b.n	24eb4 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   249e0:	4b90      	ldr	r3, [pc, #576]	; (24c24 <m2m_ip_cb+0x294>)
   249e2:	681b      	ldr	r3, [r3, #0]
   249e4:	22cc      	movs	r2, #204	; 0xcc
   249e6:	18ba      	adds	r2, r7, r2
   249e8:	2000      	movs	r0, #0
   249ea:	5610      	ldrsb	r0, [r2, r0]
   249ec:	22c8      	movs	r2, #200	; 0xc8
   249ee:	18ba      	adds	r2, r7, r2
   249f0:	2101      	movs	r1, #1
   249f2:	4798      	blx	r3
	{
   249f4:	e25e      	b.n	24eb4 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   249f6:	1dfb      	adds	r3, r7, #7
   249f8:	781b      	ldrb	r3, [r3, #0]
   249fa:	2b42      	cmp	r3, #66	; 0x42
   249fc:	d120      	bne.n	24a40 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   249fe:	23c4      	movs	r3, #196	; 0xc4
   24a00:	18f9      	adds	r1, r7, r3
   24a02:	6838      	ldr	r0, [r7, #0]
   24a04:	2300      	movs	r3, #0
   24a06:	2204      	movs	r2, #4
   24a08:	4c85      	ldr	r4, [pc, #532]	; (24c20 <m2m_ip_cb+0x290>)
   24a0a:	47a0      	blx	r4
   24a0c:	1e03      	subs	r3, r0, #0
   24a0e:	d000      	beq.n	24a12 <m2m_ip_cb+0x82>
   24a10:	e257      	b.n	24ec2 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   24a12:	23c4      	movs	r3, #196	; 0xc4
   24a14:	18fb      	adds	r3, r7, r3
   24a16:	2201      	movs	r2, #1
   24a18:	569a      	ldrsb	r2, [r3, r2]
   24a1a:	23c0      	movs	r3, #192	; 0xc0
   24a1c:	18fb      	adds	r3, r7, r3
   24a1e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   24a20:	4b80      	ldr	r3, [pc, #512]	; (24c24 <m2m_ip_cb+0x294>)
   24a22:	681b      	ldr	r3, [r3, #0]
   24a24:	2b00      	cmp	r3, #0
   24a26:	d100      	bne.n	24a2a <m2m_ip_cb+0x9a>
   24a28:	e24b      	b.n	24ec2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   24a2a:	4b7e      	ldr	r3, [pc, #504]	; (24c24 <m2m_ip_cb+0x294>)
   24a2c:	681b      	ldr	r3, [r3, #0]
   24a2e:	22c4      	movs	r2, #196	; 0xc4
   24a30:	18ba      	adds	r2, r7, r2
   24a32:	2000      	movs	r0, #0
   24a34:	5610      	ldrsb	r0, [r2, r0]
   24a36:	22c0      	movs	r2, #192	; 0xc0
   24a38:	18ba      	adds	r2, r7, r2
   24a3a:	2102      	movs	r1, #2
   24a3c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   24a3e:	e240      	b.n	24ec2 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   24a40:	1dfb      	adds	r3, r7, #7
   24a42:	781b      	ldrb	r3, [r3, #0]
   24a44:	2b43      	cmp	r3, #67	; 0x43
   24a46:	d000      	beq.n	24a4a <m2m_ip_cb+0xba>
   24a48:	e086      	b.n	24b58 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   24a4a:	23b4      	movs	r3, #180	; 0xb4
   24a4c:	18f9      	adds	r1, r7, r3
   24a4e:	6838      	ldr	r0, [r7, #0]
   24a50:	2300      	movs	r3, #0
   24a52:	220c      	movs	r2, #12
   24a54:	4c72      	ldr	r4, [pc, #456]	; (24c20 <m2m_ip_cb+0x290>)
   24a56:	47a0      	blx	r4
   24a58:	1e03      	subs	r3, r0, #0
   24a5a:	d000      	beq.n	24a5e <m2m_ip_cb+0xce>
   24a5c:	e231      	b.n	24ec2 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   24a5e:	23b4      	movs	r3, #180	; 0xb4
   24a60:	18fb      	adds	r3, r7, r3
   24a62:	7a5b      	ldrb	r3, [r3, #9]
   24a64:	b25b      	sxtb	r3, r3
   24a66:	2b00      	cmp	r3, #0
   24a68:	db4f      	blt.n	24b0a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   24a6a:	23b4      	movs	r3, #180	; 0xb4
   24a6c:	18fb      	adds	r3, r7, r3
   24a6e:	7a5b      	ldrb	r3, [r3, #9]
   24a70:	b25b      	sxtb	r3, r3
   24a72:	0018      	movs	r0, r3
   24a74:	23b4      	movs	r3, #180	; 0xb4
   24a76:	18fb      	adds	r3, r7, r3
   24a78:	7a1b      	ldrb	r3, [r3, #8]
   24a7a:	b25b      	sxtb	r3, r3
   24a7c:	4a6a      	ldr	r2, [pc, #424]	; (24c28 <m2m_ip_cb+0x298>)
   24a7e:	011b      	lsls	r3, r3, #4
   24a80:	18d3      	adds	r3, r2, r3
   24a82:	330b      	adds	r3, #11
   24a84:	781b      	ldrb	r3, [r3, #0]
   24a86:	b2d9      	uxtb	r1, r3
   24a88:	4a67      	ldr	r2, [pc, #412]	; (24c28 <m2m_ip_cb+0x298>)
   24a8a:	0103      	lsls	r3, r0, #4
   24a8c:	18d3      	adds	r3, r2, r3
   24a8e:	330b      	adds	r3, #11
   24a90:	1c0a      	adds	r2, r1, #0
   24a92:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   24a94:	23b4      	movs	r3, #180	; 0xb4
   24a96:	18fb      	adds	r3, r7, r3
   24a98:	7a5b      	ldrb	r3, [r3, #9]
   24a9a:	b25b      	sxtb	r3, r3
   24a9c:	4a62      	ldr	r2, [pc, #392]	; (24c28 <m2m_ip_cb+0x298>)
   24a9e:	011b      	lsls	r3, r3, #4
   24aa0:	18d3      	adds	r3, r2, r3
   24aa2:	330a      	adds	r3, #10
   24aa4:	2201      	movs	r2, #1
   24aa6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24aa8:	23b4      	movs	r3, #180	; 0xb4
   24aaa:	18fb      	adds	r3, r7, r3
   24aac:	7a5b      	ldrb	r3, [r3, #9]
   24aae:	b25b      	sxtb	r3, r3
   24ab0:	0018      	movs	r0, r3
   24ab2:	23b4      	movs	r3, #180	; 0xb4
   24ab4:	18fb      	adds	r3, r7, r3
   24ab6:	895b      	ldrh	r3, [r3, #10]
   24ab8:	3b08      	subs	r3, #8
   24aba:	b299      	uxth	r1, r3
   24abc:	4a5a      	ldr	r2, [pc, #360]	; (24c28 <m2m_ip_cb+0x298>)
   24abe:	0103      	lsls	r3, r0, #4
   24ac0:	18d3      	adds	r3, r2, r3
   24ac2:	3308      	adds	r3, #8
   24ac4:	1c0a      	adds	r2, r1, #0
   24ac6:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   24ac8:	4b58      	ldr	r3, [pc, #352]	; (24c2c <m2m_ip_cb+0x29c>)
   24aca:	881b      	ldrh	r3, [r3, #0]
   24acc:	b29b      	uxth	r3, r3
   24ace:	3301      	adds	r3, #1
   24ad0:	b29a      	uxth	r2, r3
   24ad2:	4b56      	ldr	r3, [pc, #344]	; (24c2c <m2m_ip_cb+0x29c>)
   24ad4:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   24ad6:	4b55      	ldr	r3, [pc, #340]	; (24c2c <m2m_ip_cb+0x29c>)
   24ad8:	881b      	ldrh	r3, [r3, #0]
   24ada:	b29b      	uxth	r3, r3
   24adc:	2b00      	cmp	r3, #0
   24ade:	d106      	bne.n	24aee <m2m_ip_cb+0x15e>
					++gu16SessionID;
   24ae0:	4b52      	ldr	r3, [pc, #328]	; (24c2c <m2m_ip_cb+0x29c>)
   24ae2:	881b      	ldrh	r3, [r3, #0]
   24ae4:	b29b      	uxth	r3, r3
   24ae6:	3301      	adds	r3, #1
   24ae8:	b29a      	uxth	r2, r3
   24aea:	4b50      	ldr	r3, [pc, #320]	; (24c2c <m2m_ip_cb+0x29c>)
   24aec:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   24aee:	23b4      	movs	r3, #180	; 0xb4
   24af0:	18fb      	adds	r3, r7, r3
   24af2:	7a5b      	ldrb	r3, [r3, #9]
   24af4:	b25b      	sxtb	r3, r3
   24af6:	0018      	movs	r0, r3
   24af8:	4b4c      	ldr	r3, [pc, #304]	; (24c2c <m2m_ip_cb+0x29c>)
   24afa:	881b      	ldrh	r3, [r3, #0]
   24afc:	b299      	uxth	r1, r3
   24afe:	4a4a      	ldr	r2, [pc, #296]	; (24c28 <m2m_ip_cb+0x298>)
   24b00:	0103      	lsls	r3, r0, #4
   24b02:	18d3      	adds	r3, r2, r3
   24b04:	3306      	adds	r3, #6
   24b06:	1c0a      	adds	r2, r1, #0
   24b08:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   24b0a:	23b4      	movs	r3, #180	; 0xb4
   24b0c:	18fb      	adds	r3, r7, r3
   24b0e:	2209      	movs	r2, #9
   24b10:	569a      	ldrsb	r2, [r3, r2]
   24b12:	23a0      	movs	r3, #160	; 0xa0
   24b14:	18fb      	adds	r3, r7, r3
   24b16:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   24b18:	23a0      	movs	r3, #160	; 0xa0
   24b1a:	18fb      	adds	r3, r7, r3
   24b1c:	2202      	movs	r2, #2
   24b1e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   24b20:	23b4      	movs	r3, #180	; 0xb4
   24b22:	18fb      	adds	r3, r7, r3
   24b24:	885a      	ldrh	r2, [r3, #2]
   24b26:	23a0      	movs	r3, #160	; 0xa0
   24b28:	18fb      	adds	r3, r7, r3
   24b2a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   24b2c:	23b4      	movs	r3, #180	; 0xb4
   24b2e:	18fb      	adds	r3, r7, r3
   24b30:	685a      	ldr	r2, [r3, #4]
   24b32:	23a0      	movs	r3, #160	; 0xa0
   24b34:	18fb      	adds	r3, r7, r3
   24b36:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   24b38:	4b3a      	ldr	r3, [pc, #232]	; (24c24 <m2m_ip_cb+0x294>)
   24b3a:	681b      	ldr	r3, [r3, #0]
   24b3c:	2b00      	cmp	r3, #0
   24b3e:	d100      	bne.n	24b42 <m2m_ip_cb+0x1b2>
   24b40:	e1bf      	b.n	24ec2 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   24b42:	4b38      	ldr	r3, [pc, #224]	; (24c24 <m2m_ip_cb+0x294>)
   24b44:	681b      	ldr	r3, [r3, #0]
   24b46:	22b4      	movs	r2, #180	; 0xb4
   24b48:	18ba      	adds	r2, r7, r2
   24b4a:	2008      	movs	r0, #8
   24b4c:	5610      	ldrsb	r0, [r2, r0]
   24b4e:	22a0      	movs	r2, #160	; 0xa0
   24b50:	18ba      	adds	r2, r7, r2
   24b52:	2104      	movs	r1, #4
   24b54:	4798      	blx	r3
}
   24b56:	e1b4      	b.n	24ec2 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   24b58:	1dfb      	adds	r3, r7, #7
   24b5a:	781b      	ldrb	r3, [r3, #0]
   24b5c:	2b44      	cmp	r3, #68	; 0x44
   24b5e:	d003      	beq.n	24b68 <m2m_ip_cb+0x1d8>
   24b60:	1dfb      	adds	r3, r7, #7
   24b62:	781b      	ldrb	r3, [r3, #0]
   24b64:	2b4b      	cmp	r3, #75	; 0x4b
   24b66:	d13d      	bne.n	24be4 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   24b68:	239c      	movs	r3, #156	; 0x9c
   24b6a:	18f9      	adds	r1, r7, r3
   24b6c:	6838      	ldr	r0, [r7, #0]
   24b6e:	2300      	movs	r3, #0
   24b70:	2204      	movs	r2, #4
   24b72:	4c2b      	ldr	r4, [pc, #172]	; (24c20 <m2m_ip_cb+0x290>)
   24b74:	47a0      	blx	r4
   24b76:	1e03      	subs	r3, r0, #0
   24b78:	d000      	beq.n	24b7c <m2m_ip_cb+0x1ec>
   24b7a:	e19d      	b.n	24eb8 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   24b7c:	239c      	movs	r3, #156	; 0x9c
   24b7e:	18fb      	adds	r3, r7, r3
   24b80:	2200      	movs	r2, #0
   24b82:	569a      	ldrsb	r2, [r3, r2]
   24b84:	2398      	movs	r3, #152	; 0x98
   24b86:	18fb      	adds	r3, r7, r3
   24b88:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   24b8a:	239c      	movs	r3, #156	; 0x9c
   24b8c:	18fb      	adds	r3, r7, r3
   24b8e:	2201      	movs	r2, #1
   24b90:	569a      	ldrsb	r2, [r3, r2]
   24b92:	2398      	movs	r3, #152	; 0x98
   24b94:	18fb      	adds	r3, r7, r3
   24b96:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   24b98:	239c      	movs	r3, #156	; 0x9c
   24b9a:	18fb      	adds	r3, r7, r3
   24b9c:	785b      	ldrb	r3, [r3, #1]
   24b9e:	b25b      	sxtb	r3, r3
   24ba0:	2b00      	cmp	r3, #0
   24ba2:	d10f      	bne.n	24bc4 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   24ba4:	239c      	movs	r3, #156	; 0x9c
   24ba6:	18fb      	adds	r3, r7, r3
   24ba8:	781b      	ldrb	r3, [r3, #0]
   24baa:	b25b      	sxtb	r3, r3
   24bac:	0018      	movs	r0, r3
   24bae:	239c      	movs	r3, #156	; 0x9c
   24bb0:	18fb      	adds	r3, r7, r3
   24bb2:	885b      	ldrh	r3, [r3, #2]
   24bb4:	3b08      	subs	r3, #8
   24bb6:	b299      	uxth	r1, r3
   24bb8:	4a1b      	ldr	r2, [pc, #108]	; (24c28 <m2m_ip_cb+0x298>)
   24bba:	0103      	lsls	r3, r0, #4
   24bbc:	18d3      	adds	r3, r2, r3
   24bbe:	3308      	adds	r3, #8
   24bc0:	1c0a      	adds	r2, r1, #0
   24bc2:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   24bc4:	4b17      	ldr	r3, [pc, #92]	; (24c24 <m2m_ip_cb+0x294>)
   24bc6:	681b      	ldr	r3, [r3, #0]
   24bc8:	2b00      	cmp	r3, #0
   24bca:	d100      	bne.n	24bce <m2m_ip_cb+0x23e>
   24bcc:	e174      	b.n	24eb8 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   24bce:	4b15      	ldr	r3, [pc, #84]	; (24c24 <m2m_ip_cb+0x294>)
   24bd0:	681b      	ldr	r3, [r3, #0]
   24bd2:	229c      	movs	r2, #156	; 0x9c
   24bd4:	18ba      	adds	r2, r7, r2
   24bd6:	2000      	movs	r0, #0
   24bd8:	5610      	ldrsb	r0, [r2, r0]
   24bda:	2298      	movs	r2, #152	; 0x98
   24bdc:	18ba      	adds	r2, r7, r2
   24bde:	2105      	movs	r1, #5
   24be0:	4798      	blx	r3
	{
   24be2:	e169      	b.n	24eb8 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   24be4:	1dfb      	adds	r3, r7, #7
   24be6:	781b      	ldrb	r3, [r3, #0]
   24be8:	2b4a      	cmp	r3, #74	; 0x4a
   24bea:	d123      	bne.n	24c34 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   24bec:	230c      	movs	r3, #12
   24bee:	18f9      	adds	r1, r7, r3
   24bf0:	6838      	ldr	r0, [r7, #0]
   24bf2:	2300      	movs	r3, #0
   24bf4:	2244      	movs	r2, #68	; 0x44
   24bf6:	4c0a      	ldr	r4, [pc, #40]	; (24c20 <m2m_ip_cb+0x290>)
   24bf8:	47a0      	blx	r4
   24bfa:	1e03      	subs	r3, r0, #0
   24bfc:	d000      	beq.n	24c00 <m2m_ip_cb+0x270>
   24bfe:	e160      	b.n	24ec2 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   24c00:	4b0b      	ldr	r3, [pc, #44]	; (24c30 <m2m_ip_cb+0x2a0>)
   24c02:	681b      	ldr	r3, [r3, #0]
   24c04:	2b00      	cmp	r3, #0
   24c06:	d100      	bne.n	24c0a <m2m_ip_cb+0x27a>
   24c08:	e15b      	b.n	24ec2 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   24c0a:	4b09      	ldr	r3, [pc, #36]	; (24c30 <m2m_ip_cb+0x2a0>)
   24c0c:	681a      	ldr	r2, [r3, #0]
   24c0e:	230c      	movs	r3, #12
   24c10:	18fb      	adds	r3, r7, r3
   24c12:	6c19      	ldr	r1, [r3, #64]	; 0x40
   24c14:	230c      	movs	r3, #12
   24c16:	18fb      	adds	r3, r7, r3
   24c18:	0018      	movs	r0, r3
   24c1a:	4790      	blx	r2
}
   24c1c:	e151      	b.n	24ec2 <m2m_ip_cb+0x532>
   24c1e:	46c0      	nop			; (mov r8, r8)
   24c20:	0002118d 	.word	0x0002118d
   24c24:	20005730 	.word	0x20005730
   24c28:	20005680 	.word	0x20005680
   24c2c:	20003e9a 	.word	0x20003e9a
   24c30:	20005738 	.word	0x20005738
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   24c34:	1dfb      	adds	r3, r7, #7
   24c36:	781b      	ldrb	r3, [r3, #0]
   24c38:	2b46      	cmp	r3, #70	; 0x46
   24c3a:	d008      	beq.n	24c4e <m2m_ip_cb+0x2be>
   24c3c:	1dfb      	adds	r3, r7, #7
   24c3e:	781b      	ldrb	r3, [r3, #0]
   24c40:	2b48      	cmp	r3, #72	; 0x48
   24c42:	d004      	beq.n	24c4e <m2m_ip_cb+0x2be>
   24c44:	1dfb      	adds	r3, r7, #7
   24c46:	781b      	ldrb	r3, [r3, #0]
   24c48:	2b4d      	cmp	r3, #77	; 0x4d
   24c4a:	d000      	beq.n	24c4e <m2m_ip_cb+0x2be>
   24c4c:	e0b4      	b.n	24db8 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   24c4e:	23df      	movs	r3, #223	; 0xdf
   24c50:	18fb      	adds	r3, r7, r3
   24c52:	2206      	movs	r2, #6
   24c54:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   24c56:	1dfb      	adds	r3, r7, #7
   24c58:	781b      	ldrb	r3, [r3, #0]
   24c5a:	2b48      	cmp	r3, #72	; 0x48
   24c5c:	d103      	bne.n	24c66 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   24c5e:	23df      	movs	r3, #223	; 0xdf
   24c60:	18fb      	adds	r3, r7, r3
   24c62:	2209      	movs	r2, #9
   24c64:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   24c66:	23d8      	movs	r3, #216	; 0xd8
   24c68:	18fb      	adds	r3, r7, r3
   24c6a:	2210      	movs	r2, #16
   24c6c:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   24c6e:	23d8      	movs	r3, #216	; 0xd8
   24c70:	18fb      	adds	r3, r7, r3
   24c72:	881a      	ldrh	r2, [r3, #0]
   24c74:	2388      	movs	r3, #136	; 0x88
   24c76:	18f9      	adds	r1, r7, r3
   24c78:	6838      	ldr	r0, [r7, #0]
   24c7a:	2300      	movs	r3, #0
   24c7c:	4c93      	ldr	r4, [pc, #588]	; (24ecc <m2m_ip_cb+0x53c>)
   24c7e:	47a0      	blx	r4
   24c80:	1e03      	subs	r3, r0, #0
   24c82:	d000      	beq.n	24c86 <m2m_ip_cb+0x2f6>
   24c84:	e11a      	b.n	24ebc <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   24c86:	23d6      	movs	r3, #214	; 0xd6
   24c88:	18fb      	adds	r3, r7, r3
   24c8a:	2200      	movs	r2, #0
   24c8c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   24c8e:	23d5      	movs	r3, #213	; 0xd5
   24c90:	18fb      	adds	r3, r7, r3
   24c92:	2288      	movs	r2, #136	; 0x88
   24c94:	18ba      	adds	r2, r7, r2
   24c96:	7b12      	ldrb	r2, [r2, #12]
   24c98:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   24c9a:	23d6      	movs	r3, #214	; 0xd6
   24c9c:	18fb      	adds	r3, r7, r3
   24c9e:	2288      	movs	r2, #136	; 0x88
   24ca0:	18ba      	adds	r2, r7, r2
   24ca2:	89d2      	ldrh	r2, [r2, #14]
   24ca4:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   24ca6:	23d5      	movs	r3, #213	; 0xd5
   24ca8:	18fb      	adds	r3, r7, r3
   24caa:	781b      	ldrb	r3, [r3, #0]
   24cac:	b25b      	sxtb	r3, r3
   24cae:	4a88      	ldr	r2, [pc, #544]	; (24ed0 <m2m_ip_cb+0x540>)
   24cb0:	011b      	lsls	r3, r3, #4
   24cb2:	18d3      	adds	r3, r2, r3
   24cb4:	330c      	adds	r3, #12
   24cb6:	2200      	movs	r2, #0
   24cb8:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   24cba:	23d2      	movs	r3, #210	; 0xd2
   24cbc:	18fb      	adds	r3, r7, r3
   24cbe:	2288      	movs	r2, #136	; 0x88
   24cc0:	18ba      	adds	r2, r7, r2
   24cc2:	8912      	ldrh	r2, [r2, #8]
   24cc4:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   24cc6:	23d0      	movs	r3, #208	; 0xd0
   24cc8:	18fb      	adds	r3, r7, r3
   24cca:	2288      	movs	r2, #136	; 0x88
   24ccc:	18ba      	adds	r2, r7, r2
   24cce:	8952      	ldrh	r2, [r2, #10]
   24cd0:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   24cd2:	2388      	movs	r3, #136	; 0x88
   24cd4:	18fb      	adds	r3, r7, r3
   24cd6:	885a      	ldrh	r2, [r3, #2]
   24cd8:	2370      	movs	r3, #112	; 0x70
   24cda:	18fb      	adds	r3, r7, r3
   24cdc:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   24cde:	2388      	movs	r3, #136	; 0x88
   24ce0:	18fb      	adds	r3, r7, r3
   24ce2:	685a      	ldr	r2, [r3, #4]
   24ce4:	2370      	movs	r3, #112	; 0x70
   24ce6:	18fb      	adds	r3, r7, r3
   24ce8:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24cea:	23d5      	movs	r3, #213	; 0xd5
   24cec:	18fb      	adds	r3, r7, r3
   24cee:	781b      	ldrb	r3, [r3, #0]
   24cf0:	b25b      	sxtb	r3, r3
   24cf2:	4a77      	ldr	r2, [pc, #476]	; (24ed0 <m2m_ip_cb+0x540>)
   24cf4:	011b      	lsls	r3, r3, #4
   24cf6:	18d3      	adds	r3, r2, r3
   24cf8:	3306      	adds	r3, #6
   24cfa:	881b      	ldrh	r3, [r3, #0]
   24cfc:	b29b      	uxth	r3, r3
   24cfe:	22d6      	movs	r2, #214	; 0xd6
   24d00:	18ba      	adds	r2, r7, r2
   24d02:	8812      	ldrh	r2, [r2, #0]
   24d04:	429a      	cmp	r2, r3
   24d06:	d148      	bne.n	24d9a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   24d08:	23d2      	movs	r3, #210	; 0xd2
   24d0a:	18fb      	adds	r3, r7, r3
   24d0c:	2200      	movs	r2, #0
   24d0e:	5e9b      	ldrsh	r3, [r3, r2]
   24d10:	2b00      	cmp	r3, #0
   24d12:	dd25      	ble.n	24d60 <m2m_ip_cb+0x3d0>
   24d14:	23d2      	movs	r3, #210	; 0xd2
   24d16:	18fb      	adds	r3, r7, r3
   24d18:	2200      	movs	r2, #0
   24d1a:	5e9a      	ldrsh	r2, [r3, r2]
   24d1c:	1d3b      	adds	r3, r7, #4
   24d1e:	881b      	ldrh	r3, [r3, #0]
   24d20:	429a      	cmp	r2, r3
   24d22:	da1d      	bge.n	24d60 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   24d24:	23d0      	movs	r3, #208	; 0xd0
   24d26:	18fb      	adds	r3, r7, r3
   24d28:	881b      	ldrh	r3, [r3, #0]
   24d2a:	683a      	ldr	r2, [r7, #0]
   24d2c:	18d3      	adds	r3, r2, r3
   24d2e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   24d30:	23d8      	movs	r3, #216	; 0xd8
   24d32:	18fb      	adds	r3, r7, r3
   24d34:	22d2      	movs	r2, #210	; 0xd2
   24d36:	18ba      	adds	r2, r7, r2
   24d38:	8812      	ldrh	r2, [r2, #0]
   24d3a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   24d3c:	683c      	ldr	r4, [r7, #0]
   24d3e:	23df      	movs	r3, #223	; 0xdf
   24d40:	18fb      	adds	r3, r7, r3
   24d42:	781a      	ldrb	r2, [r3, #0]
   24d44:	2370      	movs	r3, #112	; 0x70
   24d46:	18f9      	adds	r1, r7, r3
   24d48:	23d5      	movs	r3, #213	; 0xd5
   24d4a:	18fb      	adds	r3, r7, r3
   24d4c:	2000      	movs	r0, #0
   24d4e:	5618      	ldrsb	r0, [r3, r0]
   24d50:	23d8      	movs	r3, #216	; 0xd8
   24d52:	18fb      	adds	r3, r7, r3
   24d54:	881b      	ldrh	r3, [r3, #0]
   24d56:	9300      	str	r3, [sp, #0]
   24d58:	0023      	movs	r3, r4
   24d5a:	4c5e      	ldr	r4, [pc, #376]	; (24ed4 <m2m_ip_cb+0x544>)
   24d5c:	47a0      	blx	r4
	{
   24d5e:	e0ad      	b.n	24ebc <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   24d60:	2370      	movs	r3, #112	; 0x70
   24d62:	18fb      	adds	r3, r7, r3
   24d64:	22d2      	movs	r2, #210	; 0xd2
   24d66:	18ba      	adds	r2, r7, r2
   24d68:	8812      	ldrh	r2, [r2, #0]
   24d6a:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   24d6c:	2370      	movs	r3, #112	; 0x70
   24d6e:	18fb      	adds	r3, r7, r3
   24d70:	2200      	movs	r2, #0
   24d72:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   24d74:	4b58      	ldr	r3, [pc, #352]	; (24ed8 <m2m_ip_cb+0x548>)
   24d76:	681b      	ldr	r3, [r3, #0]
   24d78:	2b00      	cmp	r3, #0
   24d7a:	d100      	bne.n	24d7e <m2m_ip_cb+0x3ee>
   24d7c:	e09e      	b.n	24ebc <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   24d7e:	4b56      	ldr	r3, [pc, #344]	; (24ed8 <m2m_ip_cb+0x548>)
   24d80:	681b      	ldr	r3, [r3, #0]
   24d82:	2270      	movs	r2, #112	; 0x70
   24d84:	18bc      	adds	r4, r7, r2
   24d86:	22df      	movs	r2, #223	; 0xdf
   24d88:	18ba      	adds	r2, r7, r2
   24d8a:	7811      	ldrb	r1, [r2, #0]
   24d8c:	22d5      	movs	r2, #213	; 0xd5
   24d8e:	18ba      	adds	r2, r7, r2
   24d90:	2000      	movs	r0, #0
   24d92:	5610      	ldrsb	r0, [r2, r0]
   24d94:	0022      	movs	r2, r4
   24d96:	4798      	blx	r3
	{
   24d98:	e090      	b.n	24ebc <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   24d9a:	23d8      	movs	r3, #216	; 0xd8
   24d9c:	18fa      	adds	r2, r7, r3
   24d9e:	1d3b      	adds	r3, r7, #4
   24da0:	8812      	ldrh	r2, [r2, #0]
   24da2:	881b      	ldrh	r3, [r3, #0]
   24da4:	429a      	cmp	r2, r3
   24da6:	d300      	bcc.n	24daa <m2m_ip_cb+0x41a>
   24da8:	e088      	b.n	24ebc <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   24daa:	2301      	movs	r3, #1
   24dac:	2200      	movs	r2, #0
   24dae:	2100      	movs	r1, #0
   24db0:	2000      	movs	r0, #0
   24db2:	4c46      	ldr	r4, [pc, #280]	; (24ecc <m2m_ip_cb+0x53c>)
   24db4:	47a0      	blx	r4
	{
   24db6:	e081      	b.n	24ebc <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   24db8:	1dfb      	adds	r3, r7, #7
   24dba:	781b      	ldrb	r3, [r3, #0]
   24dbc:	2b45      	cmp	r3, #69	; 0x45
   24dbe:	d007      	beq.n	24dd0 <m2m_ip_cb+0x440>
   24dc0:	1dfb      	adds	r3, r7, #7
   24dc2:	781b      	ldrb	r3, [r3, #0]
   24dc4:	2b47      	cmp	r3, #71	; 0x47
   24dc6:	d003      	beq.n	24dd0 <m2m_ip_cb+0x440>
   24dc8:	1dfb      	adds	r3, r7, #7
   24dca:	781b      	ldrb	r3, [r3, #0]
   24dcc:	2b4c      	cmp	r3, #76	; 0x4c
   24dce:	d14c      	bne.n	24e6a <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   24dd0:	23de      	movs	r3, #222	; 0xde
   24dd2:	18fb      	adds	r3, r7, r3
   24dd4:	2207      	movs	r2, #7
   24dd6:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   24dd8:	1dfb      	adds	r3, r7, #7
   24dda:	781b      	ldrb	r3, [r3, #0]
   24ddc:	2b47      	cmp	r3, #71	; 0x47
   24dde:	d103      	bne.n	24de8 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   24de0:	23de      	movs	r3, #222	; 0xde
   24de2:	18fb      	adds	r3, r7, r3
   24de4:	2208      	movs	r2, #8
   24de6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   24de8:	2364      	movs	r3, #100	; 0x64
   24dea:	18f9      	adds	r1, r7, r3
   24dec:	6838      	ldr	r0, [r7, #0]
   24dee:	2300      	movs	r3, #0
   24df0:	2208      	movs	r2, #8
   24df2:	4c36      	ldr	r4, [pc, #216]	; (24ecc <m2m_ip_cb+0x53c>)
   24df4:	47a0      	blx	r4
   24df6:	1e03      	subs	r3, r0, #0
   24df8:	d162      	bne.n	24ec0 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   24dfa:	23dc      	movs	r3, #220	; 0xdc
   24dfc:	18fb      	adds	r3, r7, r3
   24dfe:	2200      	movs	r2, #0
   24e00:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   24e02:	23db      	movs	r3, #219	; 0xdb
   24e04:	18fb      	adds	r3, r7, r3
   24e06:	2264      	movs	r2, #100	; 0x64
   24e08:	18ba      	adds	r2, r7, r2
   24e0a:	7812      	ldrb	r2, [r2, #0]
   24e0c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   24e0e:	23dc      	movs	r3, #220	; 0xdc
   24e10:	18fb      	adds	r3, r7, r3
   24e12:	2264      	movs	r2, #100	; 0x64
   24e14:	18ba      	adds	r2, r7, r2
   24e16:	8892      	ldrh	r2, [r2, #4]
   24e18:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   24e1a:	2364      	movs	r3, #100	; 0x64
   24e1c:	18fb      	adds	r3, r7, r3
   24e1e:	2202      	movs	r2, #2
   24e20:	5e9a      	ldrsh	r2, [r3, r2]
   24e22:	236e      	movs	r3, #110	; 0x6e
   24e24:	18fb      	adds	r3, r7, r3
   24e26:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   24e28:	23db      	movs	r3, #219	; 0xdb
   24e2a:	18fb      	adds	r3, r7, r3
   24e2c:	781b      	ldrb	r3, [r3, #0]
   24e2e:	b25b      	sxtb	r3, r3
   24e30:	4a27      	ldr	r2, [pc, #156]	; (24ed0 <m2m_ip_cb+0x540>)
   24e32:	011b      	lsls	r3, r3, #4
   24e34:	18d3      	adds	r3, r2, r3
   24e36:	3306      	adds	r3, #6
   24e38:	881b      	ldrh	r3, [r3, #0]
   24e3a:	b29b      	uxth	r3, r3
   24e3c:	22dc      	movs	r2, #220	; 0xdc
   24e3e:	18ba      	adds	r2, r7, r2
   24e40:	8812      	ldrh	r2, [r2, #0]
   24e42:	429a      	cmp	r2, r3
   24e44:	d13c      	bne.n	24ec0 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   24e46:	4b24      	ldr	r3, [pc, #144]	; (24ed8 <m2m_ip_cb+0x548>)
   24e48:	681b      	ldr	r3, [r3, #0]
   24e4a:	2b00      	cmp	r3, #0
   24e4c:	d038      	beq.n	24ec0 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   24e4e:	4b22      	ldr	r3, [pc, #136]	; (24ed8 <m2m_ip_cb+0x548>)
   24e50:	681b      	ldr	r3, [r3, #0]
   24e52:	226e      	movs	r2, #110	; 0x6e
   24e54:	18bc      	adds	r4, r7, r2
   24e56:	22de      	movs	r2, #222	; 0xde
   24e58:	18ba      	adds	r2, r7, r2
   24e5a:	7811      	ldrb	r1, [r2, #0]
   24e5c:	22db      	movs	r2, #219	; 0xdb
   24e5e:	18ba      	adds	r2, r7, r2
   24e60:	2000      	movs	r0, #0
   24e62:	5610      	ldrsb	r0, [r2, r0]
   24e64:	0022      	movs	r2, r4
   24e66:	4798      	blx	r3
	{
   24e68:	e02a      	b.n	24ec0 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   24e6a:	1dfb      	adds	r3, r7, #7
   24e6c:	781b      	ldrb	r3, [r3, #0]
   24e6e:	2b52      	cmp	r3, #82	; 0x52
   24e70:	d127      	bne.n	24ec2 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   24e72:	2350      	movs	r3, #80	; 0x50
   24e74:	18f9      	adds	r1, r7, r3
   24e76:	6838      	ldr	r0, [r7, #0]
   24e78:	2301      	movs	r3, #1
   24e7a:	2214      	movs	r2, #20
   24e7c:	4c13      	ldr	r4, [pc, #76]	; (24ecc <m2m_ip_cb+0x53c>)
   24e7e:	47a0      	blx	r4
   24e80:	1e03      	subs	r3, r0, #0
   24e82:	d11e      	bne.n	24ec2 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   24e84:	2350      	movs	r3, #80	; 0x50
   24e86:	18fb      	adds	r3, r7, r3
   24e88:	685b      	ldr	r3, [r3, #4]
   24e8a:	001a      	movs	r2, r3
   24e8c:	4b13      	ldr	r3, [pc, #76]	; (24edc <m2m_ip_cb+0x54c>)
   24e8e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   24e90:	4b12      	ldr	r3, [pc, #72]	; (24edc <m2m_ip_cb+0x54c>)
   24e92:	681b      	ldr	r3, [r3, #0]
   24e94:	2b00      	cmp	r3, #0
   24e96:	d014      	beq.n	24ec2 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   24e98:	4b10      	ldr	r3, [pc, #64]	; (24edc <m2m_ip_cb+0x54c>)
   24e9a:	681c      	ldr	r4, [r3, #0]
   24e9c:	2350      	movs	r3, #80	; 0x50
   24e9e:	18fb      	adds	r3, r7, r3
   24ea0:	6818      	ldr	r0, [r3, #0]
   24ea2:	2350      	movs	r3, #80	; 0x50
   24ea4:	18fb      	adds	r3, r7, r3
   24ea6:	6899      	ldr	r1, [r3, #8]
   24ea8:	2350      	movs	r3, #80	; 0x50
   24eaa:	18fb      	adds	r3, r7, r3
   24eac:	7c1b      	ldrb	r3, [r3, #16]
   24eae:	001a      	movs	r2, r3
   24eb0:	47a0      	blx	r4
}
   24eb2:	e006      	b.n	24ec2 <m2m_ip_cb+0x532>
	{
   24eb4:	46c0      	nop			; (mov r8, r8)
   24eb6:	e004      	b.n	24ec2 <m2m_ip_cb+0x532>
	{
   24eb8:	46c0      	nop			; (mov r8, r8)
   24eba:	e002      	b.n	24ec2 <m2m_ip_cb+0x532>
	{
   24ebc:	46c0      	nop			; (mov r8, r8)
   24ebe:	e000      	b.n	24ec2 <m2m_ip_cb+0x532>
	{
   24ec0:	46c0      	nop			; (mov r8, r8)
}
   24ec2:	46c0      	nop			; (mov r8, r8)
   24ec4:	46bd      	mov	sp, r7
   24ec6:	b039      	add	sp, #228	; 0xe4
   24ec8:	bd90      	pop	{r4, r7, pc}
   24eca:	46c0      	nop			; (mov r8, r8)
   24ecc:	0002118d 	.word	0x0002118d
   24ed0:	20005680 	.word	0x20005680
   24ed4:	00024795 	.word	0x00024795
   24ed8:	20005730 	.word	0x20005730
   24edc:	20005734 	.word	0x20005734

00024ee0 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   24ee0:	b580      	push	{r7, lr}
   24ee2:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   24ee4:	4b0c      	ldr	r3, [pc, #48]	; (24f18 <socketInit+0x38>)
   24ee6:	781b      	ldrb	r3, [r3, #0]
   24ee8:	b2db      	uxtb	r3, r3
   24eea:	2b00      	cmp	r3, #0
   24eec:	d110      	bne.n	24f10 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24eee:	4b0b      	ldr	r3, [pc, #44]	; (24f1c <socketInit+0x3c>)
   24ef0:	22b0      	movs	r2, #176	; 0xb0
   24ef2:	2100      	movs	r1, #0
   24ef4:	0018      	movs	r0, r3
   24ef6:	4b0a      	ldr	r3, [pc, #40]	; (24f20 <socketInit+0x40>)
   24ef8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   24efa:	4b0a      	ldr	r3, [pc, #40]	; (24f24 <socketInit+0x44>)
   24efc:	0019      	movs	r1, r3
   24efe:	2002      	movs	r0, #2
   24f00:	4b09      	ldr	r3, [pc, #36]	; (24f28 <socketInit+0x48>)
   24f02:	4798      	blx	r3
		gbSocketInit	= 1;
   24f04:	4b04      	ldr	r3, [pc, #16]	; (24f18 <socketInit+0x38>)
   24f06:	2201      	movs	r2, #1
   24f08:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   24f0a:	4b08      	ldr	r3, [pc, #32]	; (24f2c <socketInit+0x4c>)
   24f0c:	2200      	movs	r2, #0
   24f0e:	801a      	strh	r2, [r3, #0]
	}
}
   24f10:	46c0      	nop			; (mov r8, r8)
   24f12:	46bd      	mov	sp, r7
   24f14:	bd80      	pop	{r7, pc}
   24f16:	46c0      	nop			; (mov r8, r8)
   24f18:	20003e9c 	.word	0x20003e9c
   24f1c:	20005680 	.word	0x20005680
   24f20:	00020611 	.word	0x00020611
   24f24:	00024991 	.word	0x00024991
   24f28:	0002130d 	.word	0x0002130d
   24f2c:	20003e9a 	.word	0x20003e9a

00024f30 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   24f30:	b580      	push	{r7, lr}
   24f32:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   24f34:	4b0a      	ldr	r3, [pc, #40]	; (24f60 <socketDeinit+0x30>)
   24f36:	22b0      	movs	r2, #176	; 0xb0
   24f38:	2100      	movs	r1, #0
   24f3a:	0018      	movs	r0, r3
   24f3c:	4b09      	ldr	r3, [pc, #36]	; (24f64 <socketDeinit+0x34>)
   24f3e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   24f40:	2100      	movs	r1, #0
   24f42:	2002      	movs	r0, #2
   24f44:	4b08      	ldr	r3, [pc, #32]	; (24f68 <socketDeinit+0x38>)
   24f46:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   24f48:	4b08      	ldr	r3, [pc, #32]	; (24f6c <socketDeinit+0x3c>)
   24f4a:	2200      	movs	r2, #0
   24f4c:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   24f4e:	4b08      	ldr	r3, [pc, #32]	; (24f70 <socketDeinit+0x40>)
   24f50:	2200      	movs	r2, #0
   24f52:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   24f54:	4b07      	ldr	r3, [pc, #28]	; (24f74 <socketDeinit+0x44>)
   24f56:	2200      	movs	r2, #0
   24f58:	701a      	strb	r2, [r3, #0]
}
   24f5a:	46c0      	nop			; (mov r8, r8)
   24f5c:	46bd      	mov	sp, r7
   24f5e:	bd80      	pop	{r7, pc}
   24f60:	20005680 	.word	0x20005680
   24f64:	00020611 	.word	0x00020611
   24f68:	0002130d 	.word	0x0002130d
   24f6c:	20005730 	.word	0x20005730
   24f70:	20005738 	.word	0x20005738
   24f74:	20003e9c 	.word	0x20003e9c

00024f78 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   24f78:	b580      	push	{r7, lr}
   24f7a:	b082      	sub	sp, #8
   24f7c:	af00      	add	r7, sp, #0
   24f7e:	6078      	str	r0, [r7, #4]
   24f80:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   24f82:	4b05      	ldr	r3, [pc, #20]	; (24f98 <registerSocketCallback+0x20>)
   24f84:	687a      	ldr	r2, [r7, #4]
   24f86:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   24f88:	4b04      	ldr	r3, [pc, #16]	; (24f9c <registerSocketCallback+0x24>)
   24f8a:	683a      	ldr	r2, [r7, #0]
   24f8c:	601a      	str	r2, [r3, #0]
}
   24f8e:	46c0      	nop			; (mov r8, r8)
   24f90:	46bd      	mov	sp, r7
   24f92:	b002      	add	sp, #8
   24f94:	bd80      	pop	{r7, pc}
   24f96:	46c0      	nop			; (mov r8, r8)
   24f98:	20005730 	.word	0x20005730
   24f9c:	20005738 	.word	0x20005738

00024fa0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   24fa0:	b590      	push	{r4, r7, lr}
   24fa2:	b08d      	sub	sp, #52	; 0x34
   24fa4:	af04      	add	r7, sp, #16
   24fa6:	0004      	movs	r4, r0
   24fa8:	0008      	movs	r0, r1
   24faa:	0011      	movs	r1, r2
   24fac:	1dbb      	adds	r3, r7, #6
   24fae:	1c22      	adds	r2, r4, #0
   24fb0:	801a      	strh	r2, [r3, #0]
   24fb2:	1d7b      	adds	r3, r7, #5
   24fb4:	1c02      	adds	r2, r0, #0
   24fb6:	701a      	strb	r2, [r3, #0]
   24fb8:	1d3b      	adds	r3, r7, #4
   24fba:	1c0a      	adds	r2, r1, #0
   24fbc:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   24fbe:	231f      	movs	r3, #31
   24fc0:	18fb      	adds	r3, r7, r3
   24fc2:	22ff      	movs	r2, #255	; 0xff
   24fc4:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   24fc6:	1dbb      	adds	r3, r7, #6
   24fc8:	881b      	ldrh	r3, [r3, #0]
   24fca:	2b02      	cmp	r3, #2
   24fcc:	d000      	beq.n	24fd0 <socket+0x30>
   24fce:	e0ce      	b.n	2516e <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   24fd0:	1d7b      	adds	r3, r7, #5
   24fd2:	781b      	ldrb	r3, [r3, #0]
   24fd4:	2b01      	cmp	r3, #1
   24fd6:	d135      	bne.n	25044 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   24fd8:	231e      	movs	r3, #30
   24fda:	18fb      	adds	r3, r7, r3
   24fdc:	2200      	movs	r2, #0
   24fde:	701a      	strb	r2, [r3, #0]
   24fe0:	e02a      	b.n	25038 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   24fe2:	2317      	movs	r3, #23
   24fe4:	18fb      	adds	r3, r7, r3
   24fe6:	4a66      	ldr	r2, [pc, #408]	; (25180 <socket+0x1e0>)
   24fe8:	7812      	ldrb	r2, [r2, #0]
   24fea:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   24fec:	4b64      	ldr	r3, [pc, #400]	; (25180 <socket+0x1e0>)
   24fee:	781b      	ldrb	r3, [r3, #0]
   24ff0:	b2db      	uxtb	r3, r3
   24ff2:	011a      	lsls	r2, r3, #4
   24ff4:	4b63      	ldr	r3, [pc, #396]	; (25184 <socket+0x1e4>)
   24ff6:	18d3      	adds	r3, r2, r3
   24ff8:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   24ffa:	4b61      	ldr	r3, [pc, #388]	; (25180 <socket+0x1e0>)
   24ffc:	781b      	ldrb	r3, [r3, #0]
   24ffe:	b2db      	uxtb	r3, r3
   25000:	1c5a      	adds	r2, r3, #1
   25002:	4b61      	ldr	r3, [pc, #388]	; (25188 <socket+0x1e8>)
   25004:	2107      	movs	r1, #7
   25006:	0010      	movs	r0, r2
   25008:	4798      	blx	r3
   2500a:	000b      	movs	r3, r1
   2500c:	b2da      	uxtb	r2, r3
   2500e:	4b5c      	ldr	r3, [pc, #368]	; (25180 <socket+0x1e0>)
   25010:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25012:	69bb      	ldr	r3, [r7, #24]
   25014:	7a9b      	ldrb	r3, [r3, #10]
   25016:	b2db      	uxtb	r3, r3
   25018:	2b00      	cmp	r3, #0
   2501a:	d106      	bne.n	2502a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   2501c:	231f      	movs	r3, #31
   2501e:	18fb      	adds	r3, r7, r3
   25020:	2217      	movs	r2, #23
   25022:	18ba      	adds	r2, r7, r2
   25024:	7812      	ldrb	r2, [r2, #0]
   25026:	701a      	strb	r2, [r3, #0]
					break;
   25028:	e04c      	b.n	250c4 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2502a:	231e      	movs	r3, #30
   2502c:	18fb      	adds	r3, r7, r3
   2502e:	781a      	ldrb	r2, [r3, #0]
   25030:	231e      	movs	r3, #30
   25032:	18fb      	adds	r3, r7, r3
   25034:	3201      	adds	r2, #1
   25036:	701a      	strb	r2, [r3, #0]
   25038:	231e      	movs	r3, #30
   2503a:	18fb      	adds	r3, r7, r3
   2503c:	781b      	ldrb	r3, [r3, #0]
   2503e:	2b06      	cmp	r3, #6
   25040:	d9cf      	bls.n	24fe2 <socket+0x42>
   25042:	e03f      	b.n	250c4 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   25044:	1d7b      	adds	r3, r7, #5
   25046:	781b      	ldrb	r3, [r3, #0]
   25048:	2b02      	cmp	r3, #2
   2504a:	d13b      	bne.n	250c4 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   2504c:	4b4f      	ldr	r3, [pc, #316]	; (2518c <socket+0x1ec>)
   2504e:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   25050:	231e      	movs	r3, #30
   25052:	18fb      	adds	r3, r7, r3
   25054:	2200      	movs	r2, #0
   25056:	701a      	strb	r2, [r3, #0]
   25058:	e02f      	b.n	250ba <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2505a:	2317      	movs	r3, #23
   2505c:	18fb      	adds	r3, r7, r3
   2505e:	4a4c      	ldr	r2, [pc, #304]	; (25190 <socket+0x1f0>)
   25060:	7812      	ldrb	r2, [r2, #0]
   25062:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   25064:	4b4a      	ldr	r3, [pc, #296]	; (25190 <socket+0x1f0>)
   25066:	781b      	ldrb	r3, [r3, #0]
   25068:	b2db      	uxtb	r3, r3
   2506a:	011b      	lsls	r3, r3, #4
   2506c:	693a      	ldr	r2, [r7, #16]
   2506e:	18d3      	adds	r3, r2, r3
   25070:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   25072:	4b47      	ldr	r3, [pc, #284]	; (25190 <socket+0x1f0>)
   25074:	781b      	ldrb	r3, [r3, #0]
   25076:	b2db      	uxtb	r3, r3
   25078:	3301      	adds	r3, #1
   2507a:	4a46      	ldr	r2, [pc, #280]	; (25194 <socket+0x1f4>)
   2507c:	4013      	ands	r3, r2
   2507e:	d504      	bpl.n	2508a <socket+0xea>
   25080:	3b01      	subs	r3, #1
   25082:	2204      	movs	r2, #4
   25084:	4252      	negs	r2, r2
   25086:	4313      	orrs	r3, r2
   25088:	3301      	adds	r3, #1
   2508a:	b2da      	uxtb	r2, r3
   2508c:	4b40      	ldr	r3, [pc, #256]	; (25190 <socket+0x1f0>)
   2508e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25090:	69bb      	ldr	r3, [r7, #24]
   25092:	7a9b      	ldrb	r3, [r3, #10]
   25094:	b2db      	uxtb	r3, r3
   25096:	2b00      	cmp	r3, #0
   25098:	d108      	bne.n	250ac <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2509a:	2317      	movs	r3, #23
   2509c:	18fb      	adds	r3, r7, r3
   2509e:	781b      	ldrb	r3, [r3, #0]
   250a0:	3307      	adds	r3, #7
   250a2:	b2da      	uxtb	r2, r3
   250a4:	231f      	movs	r3, #31
   250a6:	18fb      	adds	r3, r7, r3
   250a8:	701a      	strb	r2, [r3, #0]
					break;
   250aa:	e00b      	b.n	250c4 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   250ac:	231e      	movs	r3, #30
   250ae:	18fb      	adds	r3, r7, r3
   250b0:	781a      	ldrb	r2, [r3, #0]
   250b2:	231e      	movs	r3, #30
   250b4:	18fb      	adds	r3, r7, r3
   250b6:	3201      	adds	r2, #1
   250b8:	701a      	strb	r2, [r3, #0]
   250ba:	231e      	movs	r3, #30
   250bc:	18fb      	adds	r3, r7, r3
   250be:	781b      	ldrb	r3, [r3, #0]
   250c0:	2b03      	cmp	r3, #3
   250c2:	d9ca      	bls.n	2505a <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   250c4:	231f      	movs	r3, #31
   250c6:	18fb      	adds	r3, r7, r3
   250c8:	781b      	ldrb	r3, [r3, #0]
   250ca:	2b7f      	cmp	r3, #127	; 0x7f
   250cc:	d84f      	bhi.n	2516e <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   250ce:	69bb      	ldr	r3, [r7, #24]
   250d0:	2210      	movs	r2, #16
   250d2:	2100      	movs	r1, #0
   250d4:	0018      	movs	r0, r3
   250d6:	4b30      	ldr	r3, [pc, #192]	; (25198 <socket+0x1f8>)
   250d8:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   250da:	69bb      	ldr	r3, [r7, #24]
   250dc:	2201      	movs	r2, #1
   250de:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   250e0:	4b2e      	ldr	r3, [pc, #184]	; (2519c <socket+0x1fc>)
   250e2:	881b      	ldrh	r3, [r3, #0]
   250e4:	b29b      	uxth	r3, r3
   250e6:	3301      	adds	r3, #1
   250e8:	b29a      	uxth	r2, r3
   250ea:	4b2c      	ldr	r3, [pc, #176]	; (2519c <socket+0x1fc>)
   250ec:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   250ee:	4b2b      	ldr	r3, [pc, #172]	; (2519c <socket+0x1fc>)
   250f0:	881b      	ldrh	r3, [r3, #0]
   250f2:	b29b      	uxth	r3, r3
   250f4:	2b00      	cmp	r3, #0
   250f6:	d106      	bne.n	25106 <socket+0x166>
				++gu16SessionID;
   250f8:	4b28      	ldr	r3, [pc, #160]	; (2519c <socket+0x1fc>)
   250fa:	881b      	ldrh	r3, [r3, #0]
   250fc:	b29b      	uxth	r3, r3
   250fe:	3301      	adds	r3, #1
   25100:	b29a      	uxth	r2, r3
   25102:	4b26      	ldr	r3, [pc, #152]	; (2519c <socket+0x1fc>)
   25104:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   25106:	4b25      	ldr	r3, [pc, #148]	; (2519c <socket+0x1fc>)
   25108:	881b      	ldrh	r3, [r3, #0]
   2510a:	b29a      	uxth	r2, r3
   2510c:	69bb      	ldr	r3, [r7, #24]
   2510e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   25110:	4b23      	ldr	r3, [pc, #140]	; (251a0 <socket+0x200>)
   25112:	0018      	movs	r0, r3
   25114:	4b23      	ldr	r3, [pc, #140]	; (251a4 <socket+0x204>)
   25116:	4798      	blx	r3
   25118:	231f      	movs	r3, #31
   2511a:	18fb      	adds	r3, r7, r3
   2511c:	2100      	movs	r1, #0
   2511e:	5659      	ldrsb	r1, [r3, r1]
   25120:	4b1e      	ldr	r3, [pc, #120]	; (2519c <socket+0x1fc>)
   25122:	881b      	ldrh	r3, [r3, #0]
   25124:	b29b      	uxth	r3, r3
   25126:	001a      	movs	r2, r3
   25128:	4b1f      	ldr	r3, [pc, #124]	; (251a8 <socket+0x208>)
   2512a:	0018      	movs	r0, r3
   2512c:	4b1d      	ldr	r3, [pc, #116]	; (251a4 <socket+0x204>)
   2512e:	4798      	blx	r3
   25130:	4b1e      	ldr	r3, [pc, #120]	; (251ac <socket+0x20c>)
   25132:	0018      	movs	r0, r3
   25134:	4b1b      	ldr	r3, [pc, #108]	; (251a4 <socket+0x204>)
   25136:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   25138:	1d3b      	adds	r3, r7, #4
   2513a:	781b      	ldrb	r3, [r3, #0]
   2513c:	2201      	movs	r2, #1
   2513e:	4013      	ands	r3, r2
   25140:	d015      	beq.n	2516e <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   25142:	230c      	movs	r3, #12
   25144:	18fb      	adds	r3, r7, r3
   25146:	221f      	movs	r2, #31
   25148:	18ba      	adds	r2, r7, r2
   2514a:	7812      	ldrb	r2, [r2, #0]
   2514c:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2514e:	69bb      	ldr	r3, [r7, #24]
   25150:	2221      	movs	r2, #33	; 0x21
   25152:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   25154:	230c      	movs	r3, #12
   25156:	18fa      	adds	r2, r7, r3
   25158:	2300      	movs	r3, #0
   2515a:	9302      	str	r3, [sp, #8]
   2515c:	2300      	movs	r3, #0
   2515e:	9301      	str	r3, [sp, #4]
   25160:	2300      	movs	r3, #0
   25162:	9300      	str	r3, [sp, #0]
   25164:	2304      	movs	r3, #4
   25166:	2150      	movs	r1, #80	; 0x50
   25168:	2002      	movs	r0, #2
   2516a:	4c11      	ldr	r4, [pc, #68]	; (251b0 <socket+0x210>)
   2516c:	47a0      	blx	r4
			}
		}
	}
	return sock;
   2516e:	231f      	movs	r3, #31
   25170:	18fb      	adds	r3, r7, r3
   25172:	781b      	ldrb	r3, [r3, #0]
   25174:	b25b      	sxtb	r3, r3
}
   25176:	0018      	movs	r0, r3
   25178:	46bd      	mov	sp, r7
   2517a:	b009      	add	sp, #36	; 0x24
   2517c:	bd90      	pop	{r4, r7, pc}
   2517e:	46c0      	nop			; (mov r8, r8)
   25180:	20003e9d 	.word	0x20003e9d
   25184:	20005680 	.word	0x20005680
   25188:	00032691 	.word	0x00032691
   2518c:	200056f0 	.word	0x200056f0
   25190:	20003e9e 	.word	0x20003e9e
   25194:	80000003 	.word	0x80000003
   25198:	00020611 	.word	0x00020611
   2519c:	20003e9a 	.word	0x20003e9a
   251a0:	00038c10 	.word	0x00038c10
   251a4:	0001dc99 	.word	0x0001dc99
   251a8:	00038c34 	.word	0x00038c34
   251ac:	00038c30 	.word	0x00038c30
   251b0:	00020871 	.word	0x00020871

000251b4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   251b4:	b5b0      	push	{r4, r5, r7, lr}
   251b6:	b08a      	sub	sp, #40	; 0x28
   251b8:	af04      	add	r7, sp, #16
   251ba:	6039      	str	r1, [r7, #0]
   251bc:	0011      	movs	r1, r2
   251be:	1dfb      	adds	r3, r7, #7
   251c0:	1c02      	adds	r2, r0, #0
   251c2:	701a      	strb	r2, [r3, #0]
   251c4:	1dbb      	adds	r3, r7, #6
   251c6:	1c0a      	adds	r2, r1, #0
   251c8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   251ca:	2317      	movs	r3, #23
   251cc:	18fb      	adds	r3, r7, r3
   251ce:	22fa      	movs	r2, #250	; 0xfa
   251d0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   251d2:	1dfb      	adds	r3, r7, #7
   251d4:	781b      	ldrb	r3, [r3, #0]
   251d6:	2b7f      	cmp	r3, #127	; 0x7f
   251d8:	d867      	bhi.n	252aa <connect+0xf6>
   251da:	683b      	ldr	r3, [r7, #0]
   251dc:	2b00      	cmp	r3, #0
   251de:	d064      	beq.n	252aa <connect+0xf6>
   251e0:	1dfb      	adds	r3, r7, #7
   251e2:	781b      	ldrb	r3, [r3, #0]
   251e4:	b25b      	sxtb	r3, r3
   251e6:	4a35      	ldr	r2, [pc, #212]	; (252bc <connect+0x108>)
   251e8:	011b      	lsls	r3, r3, #4
   251ea:	18d3      	adds	r3, r2, r3
   251ec:	330a      	adds	r3, #10
   251ee:	781b      	ldrb	r3, [r3, #0]
   251f0:	b2db      	uxtb	r3, r3
   251f2:	2b01      	cmp	r3, #1
   251f4:	d159      	bne.n	252aa <connect+0xf6>
   251f6:	1dbb      	adds	r3, r7, #6
   251f8:	781b      	ldrb	r3, [r3, #0]
   251fa:	2b00      	cmp	r3, #0
   251fc:	d055      	beq.n	252aa <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   251fe:	2316      	movs	r3, #22
   25200:	18fb      	adds	r3, r7, r3
   25202:	2244      	movs	r2, #68	; 0x44
   25204:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   25206:	1dfb      	adds	r3, r7, #7
   25208:	781b      	ldrb	r3, [r3, #0]
   2520a:	b25b      	sxtb	r3, r3
   2520c:	4a2b      	ldr	r2, [pc, #172]	; (252bc <connect+0x108>)
   2520e:	011b      	lsls	r3, r3, #4
   25210:	18d3      	adds	r3, r2, r3
   25212:	330b      	adds	r3, #11
   25214:	781b      	ldrb	r3, [r3, #0]
   25216:	b2db      	uxtb	r3, r3
   25218:	001a      	movs	r2, r3
   2521a:	2301      	movs	r3, #1
   2521c:	4013      	ands	r3, r2
   2521e:	d00f      	beq.n	25240 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   25220:	2316      	movs	r3, #22
   25222:	18fb      	adds	r3, r7, r3
   25224:	224b      	movs	r2, #75	; 0x4b
   25226:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   25228:	1dfb      	adds	r3, r7, #7
   2522a:	781b      	ldrb	r3, [r3, #0]
   2522c:	b25b      	sxtb	r3, r3
   2522e:	4a23      	ldr	r2, [pc, #140]	; (252bc <connect+0x108>)
   25230:	011b      	lsls	r3, r3, #4
   25232:	18d3      	adds	r3, r2, r3
   25234:	330b      	adds	r3, #11
   25236:	781b      	ldrb	r3, [r3, #0]
   25238:	b2da      	uxtb	r2, r3
   2523a:	2308      	movs	r3, #8
   2523c:	18fb      	adds	r3, r7, r3
   2523e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   25240:	2308      	movs	r3, #8
   25242:	18fb      	adds	r3, r7, r3
   25244:	1dfa      	adds	r2, r7, #7
   25246:	7812      	ldrb	r2, [r2, #0]
   25248:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2524a:	6839      	ldr	r1, [r7, #0]
   2524c:	2308      	movs	r3, #8
   2524e:	18fb      	adds	r3, r7, r3
   25250:	2208      	movs	r2, #8
   25252:	0018      	movs	r0, r3
   25254:	4b1a      	ldr	r3, [pc, #104]	; (252c0 <connect+0x10c>)
   25256:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   25258:	1dfb      	adds	r3, r7, #7
   2525a:	781b      	ldrb	r3, [r3, #0]
   2525c:	b25b      	sxtb	r3, r3
   2525e:	4a17      	ldr	r2, [pc, #92]	; (252bc <connect+0x108>)
   25260:	011b      	lsls	r3, r3, #4
   25262:	18d3      	adds	r3, r2, r3
   25264:	3306      	adds	r3, #6
   25266:	881b      	ldrh	r3, [r3, #0]
   25268:	b29a      	uxth	r2, r3
   2526a:	2308      	movs	r3, #8
   2526c:	18fb      	adds	r3, r7, r3
   2526e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   25270:	2317      	movs	r3, #23
   25272:	18fc      	adds	r4, r7, r3
   25274:	2308      	movs	r3, #8
   25276:	18fa      	adds	r2, r7, r3
   25278:	2316      	movs	r3, #22
   2527a:	18fb      	adds	r3, r7, r3
   2527c:	7819      	ldrb	r1, [r3, #0]
   2527e:	2300      	movs	r3, #0
   25280:	9302      	str	r3, [sp, #8]
   25282:	2300      	movs	r3, #0
   25284:	9301      	str	r3, [sp, #4]
   25286:	2300      	movs	r3, #0
   25288:	9300      	str	r3, [sp, #0]
   2528a:	230c      	movs	r3, #12
   2528c:	2002      	movs	r0, #2
   2528e:	4d0d      	ldr	r5, [pc, #52]	; (252c4 <connect+0x110>)
   25290:	47a8      	blx	r5
   25292:	0003      	movs	r3, r0
   25294:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25296:	2317      	movs	r3, #23
   25298:	18fb      	adds	r3, r7, r3
   2529a:	781b      	ldrb	r3, [r3, #0]
   2529c:	b25b      	sxtb	r3, r3
   2529e:	2b00      	cmp	r3, #0
   252a0:	d003      	beq.n	252aa <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   252a2:	2317      	movs	r3, #23
   252a4:	18fb      	adds	r3, r7, r3
   252a6:	22f7      	movs	r2, #247	; 0xf7
   252a8:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   252aa:	2317      	movs	r3, #23
   252ac:	18fb      	adds	r3, r7, r3
   252ae:	781b      	ldrb	r3, [r3, #0]
   252b0:	b25b      	sxtb	r3, r3
}
   252b2:	0018      	movs	r0, r3
   252b4:	46bd      	mov	sp, r7
   252b6:	b006      	add	sp, #24
   252b8:	bdb0      	pop	{r4, r5, r7, pc}
   252ba:	46c0      	nop			; (mov r8, r8)
   252bc:	20005680 	.word	0x20005680
   252c0:	000205d5 	.word	0x000205d5
   252c4:	00020871 	.word	0x00020871

000252c8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   252c8:	b590      	push	{r4, r7, lr}
   252ca:	b08f      	sub	sp, #60	; 0x3c
   252cc:	af04      	add	r7, sp, #16
   252ce:	0004      	movs	r4, r0
   252d0:	60b9      	str	r1, [r7, #8]
   252d2:	0010      	movs	r0, r2
   252d4:	0019      	movs	r1, r3
   252d6:	230f      	movs	r3, #15
   252d8:	18fb      	adds	r3, r7, r3
   252da:	1c22      	adds	r2, r4, #0
   252dc:	701a      	strb	r2, [r3, #0]
   252de:	230c      	movs	r3, #12
   252e0:	18fb      	adds	r3, r7, r3
   252e2:	1c02      	adds	r2, r0, #0
   252e4:	801a      	strh	r2, [r3, #0]
   252e6:	1dbb      	adds	r3, r7, #6
   252e8:	1c0a      	adds	r2, r1, #0
   252ea:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   252ec:	2326      	movs	r3, #38	; 0x26
   252ee:	18fb      	adds	r3, r7, r3
   252f0:	2206      	movs	r2, #6
   252f2:	4252      	negs	r2, r2
   252f4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   252f6:	230f      	movs	r3, #15
   252f8:	18fb      	adds	r3, r7, r3
   252fa:	781b      	ldrb	r3, [r3, #0]
   252fc:	2b7f      	cmp	r3, #127	; 0x7f
   252fe:	d900      	bls.n	25302 <send+0x3a>
   25300:	e087      	b.n	25412 <send+0x14a>
   25302:	68bb      	ldr	r3, [r7, #8]
   25304:	2b00      	cmp	r3, #0
   25306:	d100      	bne.n	2530a <send+0x42>
   25308:	e083      	b.n	25412 <send+0x14a>
   2530a:	230c      	movs	r3, #12
   2530c:	18fb      	adds	r3, r7, r3
   2530e:	881a      	ldrh	r2, [r3, #0]
   25310:	23af      	movs	r3, #175	; 0xaf
   25312:	00db      	lsls	r3, r3, #3
   25314:	429a      	cmp	r2, r3
   25316:	d900      	bls.n	2531a <send+0x52>
   25318:	e07b      	b.n	25412 <send+0x14a>
   2531a:	230f      	movs	r3, #15
   2531c:	18fb      	adds	r3, r7, r3
   2531e:	781b      	ldrb	r3, [r3, #0]
   25320:	b25b      	sxtb	r3, r3
   25322:	4a40      	ldr	r2, [pc, #256]	; (25424 <send+0x15c>)
   25324:	011b      	lsls	r3, r3, #4
   25326:	18d3      	adds	r3, r2, r3
   25328:	330a      	adds	r3, #10
   2532a:	781b      	ldrb	r3, [r3, #0]
   2532c:	b2db      	uxtb	r3, r3
   2532e:	2b01      	cmp	r3, #1
   25330:	d16f      	bne.n	25412 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   25332:	2323      	movs	r3, #35	; 0x23
   25334:	18fb      	adds	r3, r7, r3
   25336:	2245      	movs	r2, #69	; 0x45
   25338:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2533a:	2324      	movs	r3, #36	; 0x24
   2533c:	18fb      	adds	r3, r7, r3
   2533e:	2250      	movs	r2, #80	; 0x50
   25340:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   25342:	2310      	movs	r3, #16
   25344:	18fb      	adds	r3, r7, r3
   25346:	220f      	movs	r2, #15
   25348:	18ba      	adds	r2, r7, r2
   2534a:	7812      	ldrb	r2, [r2, #0]
   2534c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2534e:	2310      	movs	r3, #16
   25350:	18fb      	adds	r3, r7, r3
   25352:	220c      	movs	r2, #12
   25354:	18ba      	adds	r2, r7, r2
   25356:	8812      	ldrh	r2, [r2, #0]
   25358:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2535a:	230f      	movs	r3, #15
   2535c:	18fb      	adds	r3, r7, r3
   2535e:	781b      	ldrb	r3, [r3, #0]
   25360:	b25b      	sxtb	r3, r3
   25362:	4a30      	ldr	r2, [pc, #192]	; (25424 <send+0x15c>)
   25364:	011b      	lsls	r3, r3, #4
   25366:	18d3      	adds	r3, r2, r3
   25368:	3306      	adds	r3, #6
   2536a:	881b      	ldrh	r3, [r3, #0]
   2536c:	b29a      	uxth	r2, r3
   2536e:	2310      	movs	r3, #16
   25370:	18fb      	adds	r3, r7, r3
   25372:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   25374:	230f      	movs	r3, #15
   25376:	18fb      	adds	r3, r7, r3
   25378:	781b      	ldrb	r3, [r3, #0]
   2537a:	b25b      	sxtb	r3, r3
   2537c:	2b06      	cmp	r3, #6
   2537e:	dd03      	ble.n	25388 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   25380:	2324      	movs	r3, #36	; 0x24
   25382:	18fb      	adds	r3, r7, r3
   25384:	2244      	movs	r2, #68	; 0x44
   25386:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25388:	230f      	movs	r3, #15
   2538a:	18fb      	adds	r3, r7, r3
   2538c:	781b      	ldrb	r3, [r3, #0]
   2538e:	b25b      	sxtb	r3, r3
   25390:	4a24      	ldr	r2, [pc, #144]	; (25424 <send+0x15c>)
   25392:	011b      	lsls	r3, r3, #4
   25394:	18d3      	adds	r3, r2, r3
   25396:	330b      	adds	r3, #11
   25398:	781b      	ldrb	r3, [r3, #0]
   2539a:	b2db      	uxtb	r3, r3
   2539c:	001a      	movs	r2, r3
   2539e:	2301      	movs	r3, #1
   253a0:	4013      	ands	r3, r2
   253a2:	d00f      	beq.n	253c4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   253a4:	2323      	movs	r3, #35	; 0x23
   253a6:	18fb      	adds	r3, r7, r3
   253a8:	224c      	movs	r2, #76	; 0x4c
   253aa:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   253ac:	230f      	movs	r3, #15
   253ae:	18fb      	adds	r3, r7, r3
   253b0:	2200      	movs	r2, #0
   253b2:	569a      	ldrsb	r2, [r3, r2]
   253b4:	2324      	movs	r3, #36	; 0x24
   253b6:	18fb      	adds	r3, r7, r3
   253b8:	491a      	ldr	r1, [pc, #104]	; (25424 <send+0x15c>)
   253ba:	0112      	lsls	r2, r2, #4
   253bc:	188a      	adds	r2, r1, r2
   253be:	3208      	adds	r2, #8
   253c0:	8812      	ldrh	r2, [r2, #0]
   253c2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   253c4:	2323      	movs	r3, #35	; 0x23
   253c6:	18fb      	adds	r3, r7, r3
   253c8:	781b      	ldrb	r3, [r3, #0]
   253ca:	2280      	movs	r2, #128	; 0x80
   253cc:	4252      	negs	r2, r2
   253ce:	4313      	orrs	r3, r2
   253d0:	b2d9      	uxtb	r1, r3
   253d2:	2310      	movs	r3, #16
   253d4:	18fa      	adds	r2, r7, r3
   253d6:	2324      	movs	r3, #36	; 0x24
   253d8:	18fb      	adds	r3, r7, r3
   253da:	881b      	ldrh	r3, [r3, #0]
   253dc:	9302      	str	r3, [sp, #8]
   253de:	230c      	movs	r3, #12
   253e0:	18fb      	adds	r3, r7, r3
   253e2:	881b      	ldrh	r3, [r3, #0]
   253e4:	9301      	str	r3, [sp, #4]
   253e6:	68bb      	ldr	r3, [r7, #8]
   253e8:	9300      	str	r3, [sp, #0]
   253ea:	2310      	movs	r3, #16
   253ec:	2002      	movs	r0, #2
   253ee:	4c0e      	ldr	r4, [pc, #56]	; (25428 <send+0x160>)
   253f0:	47a0      	blx	r4
   253f2:	0003      	movs	r3, r0
   253f4:	001a      	movs	r2, r3
   253f6:	2326      	movs	r3, #38	; 0x26
   253f8:	18fb      	adds	r3, r7, r3
   253fa:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   253fc:	2326      	movs	r3, #38	; 0x26
   253fe:	18fb      	adds	r3, r7, r3
   25400:	2200      	movs	r2, #0
   25402:	5e9b      	ldrsh	r3, [r3, r2]
   25404:	2b00      	cmp	r3, #0
   25406:	d004      	beq.n	25412 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   25408:	2326      	movs	r3, #38	; 0x26
   2540a:	18fb      	adds	r3, r7, r3
   2540c:	220e      	movs	r2, #14
   2540e:	4252      	negs	r2, r2
   25410:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   25412:	2326      	movs	r3, #38	; 0x26
   25414:	18fb      	adds	r3, r7, r3
   25416:	2200      	movs	r2, #0
   25418:	5e9b      	ldrsh	r3, [r3, r2]
}
   2541a:	0018      	movs	r0, r3
   2541c:	46bd      	mov	sp, r7
   2541e:	b00b      	add	sp, #44	; 0x2c
   25420:	bd90      	pop	{r4, r7, pc}
   25422:	46c0      	nop			; (mov r8, r8)
   25424:	20005680 	.word	0x20005680
   25428:	00020871 	.word	0x00020871

0002542c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2542c:	b590      	push	{r4, r7, lr}
   2542e:	b08d      	sub	sp, #52	; 0x34
   25430:	af04      	add	r7, sp, #16
   25432:	60b9      	str	r1, [r7, #8]
   25434:	0011      	movs	r1, r2
   25436:	607b      	str	r3, [r7, #4]
   25438:	230f      	movs	r3, #15
   2543a:	18fb      	adds	r3, r7, r3
   2543c:	1c02      	adds	r2, r0, #0
   2543e:	701a      	strb	r2, [r3, #0]
   25440:	230c      	movs	r3, #12
   25442:	18fb      	adds	r3, r7, r3
   25444:	1c0a      	adds	r2, r1, #0
   25446:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25448:	231e      	movs	r3, #30
   2544a:	18fb      	adds	r3, r7, r3
   2544c:	2206      	movs	r2, #6
   2544e:	4252      	negs	r2, r2
   25450:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   25452:	230f      	movs	r3, #15
   25454:	18fb      	adds	r3, r7, r3
   25456:	781b      	ldrb	r3, [r3, #0]
   25458:	2b7f      	cmp	r3, #127	; 0x7f
   2545a:	d900      	bls.n	2545e <recv+0x32>
   2545c:	e099      	b.n	25592 <recv+0x166>
   2545e:	68bb      	ldr	r3, [r7, #8]
   25460:	2b00      	cmp	r3, #0
   25462:	d100      	bne.n	25466 <recv+0x3a>
   25464:	e095      	b.n	25592 <recv+0x166>
   25466:	230c      	movs	r3, #12
   25468:	18fb      	adds	r3, r7, r3
   2546a:	881b      	ldrh	r3, [r3, #0]
   2546c:	2b00      	cmp	r3, #0
   2546e:	d100      	bne.n	25472 <recv+0x46>
   25470:	e08f      	b.n	25592 <recv+0x166>
   25472:	230f      	movs	r3, #15
   25474:	18fb      	adds	r3, r7, r3
   25476:	781b      	ldrb	r3, [r3, #0]
   25478:	b25b      	sxtb	r3, r3
   2547a:	4a4a      	ldr	r2, [pc, #296]	; (255a4 <recv+0x178>)
   2547c:	011b      	lsls	r3, r3, #4
   2547e:	18d3      	adds	r3, r2, r3
   25480:	330a      	adds	r3, #10
   25482:	781b      	ldrb	r3, [r3, #0]
   25484:	b2db      	uxtb	r3, r3
   25486:	2b01      	cmp	r3, #1
   25488:	d000      	beq.n	2548c <recv+0x60>
   2548a:	e082      	b.n	25592 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   2548c:	231e      	movs	r3, #30
   2548e:	18fb      	adds	r3, r7, r3
   25490:	2200      	movs	r2, #0
   25492:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   25494:	230f      	movs	r3, #15
   25496:	18fb      	adds	r3, r7, r3
   25498:	2200      	movs	r2, #0
   2549a:	569a      	ldrsb	r2, [r3, r2]
   2549c:	4b41      	ldr	r3, [pc, #260]	; (255a4 <recv+0x178>)
   2549e:	0112      	lsls	r2, r2, #4
   254a0:	68b9      	ldr	r1, [r7, #8]
   254a2:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   254a4:	230f      	movs	r3, #15
   254a6:	18fb      	adds	r3, r7, r3
   254a8:	781b      	ldrb	r3, [r3, #0]
   254aa:	b25b      	sxtb	r3, r3
   254ac:	4a3d      	ldr	r2, [pc, #244]	; (255a4 <recv+0x178>)
   254ae:	011b      	lsls	r3, r3, #4
   254b0:	18d3      	adds	r3, r2, r3
   254b2:	3304      	adds	r3, #4
   254b4:	220c      	movs	r2, #12
   254b6:	18ba      	adds	r2, r7, r2
   254b8:	8812      	ldrh	r2, [r2, #0]
   254ba:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   254bc:	230f      	movs	r3, #15
   254be:	18fb      	adds	r3, r7, r3
   254c0:	781b      	ldrb	r3, [r3, #0]
   254c2:	b25b      	sxtb	r3, r3
   254c4:	4a37      	ldr	r2, [pc, #220]	; (255a4 <recv+0x178>)
   254c6:	011b      	lsls	r3, r3, #4
   254c8:	18d3      	adds	r3, r2, r3
   254ca:	330c      	adds	r3, #12
   254cc:	781b      	ldrb	r3, [r3, #0]
   254ce:	b2db      	uxtb	r3, r3
   254d0:	2b00      	cmp	r3, #0
   254d2:	d15e      	bne.n	25592 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   254d4:	231d      	movs	r3, #29
   254d6:	18fb      	adds	r3, r7, r3
   254d8:	2246      	movs	r2, #70	; 0x46
   254da:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   254dc:	230f      	movs	r3, #15
   254de:	18fb      	adds	r3, r7, r3
   254e0:	781b      	ldrb	r3, [r3, #0]
   254e2:	b25b      	sxtb	r3, r3
   254e4:	4a2f      	ldr	r2, [pc, #188]	; (255a4 <recv+0x178>)
   254e6:	011b      	lsls	r3, r3, #4
   254e8:	18d3      	adds	r3, r2, r3
   254ea:	330c      	adds	r3, #12
   254ec:	2201      	movs	r2, #1
   254ee:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   254f0:	230f      	movs	r3, #15
   254f2:	18fb      	adds	r3, r7, r3
   254f4:	781b      	ldrb	r3, [r3, #0]
   254f6:	b25b      	sxtb	r3, r3
   254f8:	4a2a      	ldr	r2, [pc, #168]	; (255a4 <recv+0x178>)
   254fa:	011b      	lsls	r3, r3, #4
   254fc:	18d3      	adds	r3, r2, r3
   254fe:	330b      	adds	r3, #11
   25500:	781b      	ldrb	r3, [r3, #0]
   25502:	b2db      	uxtb	r3, r3
   25504:	001a      	movs	r2, r3
   25506:	2301      	movs	r3, #1
   25508:	4013      	ands	r3, r2
   2550a:	d003      	beq.n	25514 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2550c:	231d      	movs	r3, #29
   2550e:	18fb      	adds	r3, r7, r3
   25510:	224d      	movs	r2, #77	; 0x4d
   25512:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   25514:	687b      	ldr	r3, [r7, #4]
   25516:	2b00      	cmp	r3, #0
   25518:	d105      	bne.n	25526 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2551a:	2314      	movs	r3, #20
   2551c:	18fb      	adds	r3, r7, r3
   2551e:	2201      	movs	r2, #1
   25520:	4252      	negs	r2, r2
   25522:	601a      	str	r2, [r3, #0]
   25524:	e003      	b.n	2552e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   25526:	2314      	movs	r3, #20
   25528:	18fb      	adds	r3, r7, r3
   2552a:	687a      	ldr	r2, [r7, #4]
   2552c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2552e:	2314      	movs	r3, #20
   25530:	18fb      	adds	r3, r7, r3
   25532:	220f      	movs	r2, #15
   25534:	18ba      	adds	r2, r7, r2
   25536:	7812      	ldrb	r2, [r2, #0]
   25538:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2553a:	230f      	movs	r3, #15
   2553c:	18fb      	adds	r3, r7, r3
   2553e:	781b      	ldrb	r3, [r3, #0]
   25540:	b25b      	sxtb	r3, r3
   25542:	4a18      	ldr	r2, [pc, #96]	; (255a4 <recv+0x178>)
   25544:	011b      	lsls	r3, r3, #4
   25546:	18d3      	adds	r3, r2, r3
   25548:	3306      	adds	r3, #6
   2554a:	881b      	ldrh	r3, [r3, #0]
   2554c:	b29a      	uxth	r2, r3
   2554e:	2314      	movs	r3, #20
   25550:	18fb      	adds	r3, r7, r3
   25552:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   25554:	2314      	movs	r3, #20
   25556:	18fa      	adds	r2, r7, r3
   25558:	231d      	movs	r3, #29
   2555a:	18fb      	adds	r3, r7, r3
   2555c:	7819      	ldrb	r1, [r3, #0]
   2555e:	2300      	movs	r3, #0
   25560:	9302      	str	r3, [sp, #8]
   25562:	2300      	movs	r3, #0
   25564:	9301      	str	r3, [sp, #4]
   25566:	2300      	movs	r3, #0
   25568:	9300      	str	r3, [sp, #0]
   2556a:	2308      	movs	r3, #8
   2556c:	2002      	movs	r0, #2
   2556e:	4c0e      	ldr	r4, [pc, #56]	; (255a8 <recv+0x17c>)
   25570:	47a0      	blx	r4
   25572:	0003      	movs	r3, r0
   25574:	001a      	movs	r2, r3
   25576:	231e      	movs	r3, #30
   25578:	18fb      	adds	r3, r7, r3
   2557a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   2557c:	231e      	movs	r3, #30
   2557e:	18fb      	adds	r3, r7, r3
   25580:	2200      	movs	r2, #0
   25582:	5e9b      	ldrsh	r3, [r3, r2]
   25584:	2b00      	cmp	r3, #0
   25586:	d004      	beq.n	25592 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   25588:	231e      	movs	r3, #30
   2558a:	18fb      	adds	r3, r7, r3
   2558c:	220e      	movs	r2, #14
   2558e:	4252      	negs	r2, r2
   25590:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   25592:	231e      	movs	r3, #30
   25594:	18fb      	adds	r3, r7, r3
   25596:	2200      	movs	r2, #0
   25598:	5e9b      	ldrsh	r3, [r3, r2]
}
   2559a:	0018      	movs	r0, r3
   2559c:	46bd      	mov	sp, r7
   2559e:	b009      	add	sp, #36	; 0x24
   255a0:	bd90      	pop	{r4, r7, pc}
   255a2:	46c0      	nop			; (mov r8, r8)
   255a4:	20005680 	.word	0x20005680
   255a8:	00020871 	.word	0x00020871

000255ac <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   255ac:	b5b0      	push	{r4, r5, r7, lr}
   255ae:	b088      	sub	sp, #32
   255b0:	af04      	add	r7, sp, #16
   255b2:	0002      	movs	r2, r0
   255b4:	1dfb      	adds	r3, r7, #7
   255b6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   255b8:	230f      	movs	r3, #15
   255ba:	18fb      	adds	r3, r7, r3
   255bc:	22fa      	movs	r2, #250	; 0xfa
   255be:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   255c0:	4b43      	ldr	r3, [pc, #268]	; (256d0 <close+0x124>)
   255c2:	0018      	movs	r0, r3
   255c4:	4b43      	ldr	r3, [pc, #268]	; (256d4 <close+0x128>)
   255c6:	4798      	blx	r3
   255c8:	1dfb      	adds	r3, r7, #7
   255ca:	2200      	movs	r2, #0
   255cc:	569a      	ldrsb	r2, [r3, r2]
   255ce:	4b42      	ldr	r3, [pc, #264]	; (256d8 <close+0x12c>)
   255d0:	0011      	movs	r1, r2
   255d2:	0018      	movs	r0, r3
   255d4:	4b3f      	ldr	r3, [pc, #252]	; (256d4 <close+0x128>)
   255d6:	4798      	blx	r3
   255d8:	4b40      	ldr	r3, [pc, #256]	; (256dc <close+0x130>)
   255da:	0018      	movs	r0, r3
   255dc:	4b3d      	ldr	r3, [pc, #244]	; (256d4 <close+0x128>)
   255de:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   255e0:	1dfb      	adds	r3, r7, #7
   255e2:	781b      	ldrb	r3, [r3, #0]
   255e4:	2b7f      	cmp	r3, #127	; 0x7f
   255e6:	d86a      	bhi.n	256be <close+0x112>
   255e8:	1dfb      	adds	r3, r7, #7
   255ea:	781b      	ldrb	r3, [r3, #0]
   255ec:	b25b      	sxtb	r3, r3
   255ee:	4a3c      	ldr	r2, [pc, #240]	; (256e0 <close+0x134>)
   255f0:	011b      	lsls	r3, r3, #4
   255f2:	18d3      	adds	r3, r2, r3
   255f4:	330a      	adds	r3, #10
   255f6:	781b      	ldrb	r3, [r3, #0]
   255f8:	b2db      	uxtb	r3, r3
   255fa:	2b01      	cmp	r3, #1
   255fc:	d15f      	bne.n	256be <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   255fe:	230e      	movs	r3, #14
   25600:	18fb      	adds	r3, r7, r3
   25602:	2249      	movs	r2, #73	; 0x49
   25604:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   25606:	2308      	movs	r3, #8
   25608:	18fb      	adds	r3, r7, r3
   2560a:	1dfa      	adds	r2, r7, #7
   2560c:	7812      	ldrb	r2, [r2, #0]
   2560e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   25610:	1dfb      	adds	r3, r7, #7
   25612:	781b      	ldrb	r3, [r3, #0]
   25614:	b25b      	sxtb	r3, r3
   25616:	4a32      	ldr	r2, [pc, #200]	; (256e0 <close+0x134>)
   25618:	011b      	lsls	r3, r3, #4
   2561a:	18d3      	adds	r3, r2, r3
   2561c:	3306      	adds	r3, #6
   2561e:	881b      	ldrh	r3, [r3, #0]
   25620:	b29a      	uxth	r2, r3
   25622:	2308      	movs	r3, #8
   25624:	18fb      	adds	r3, r7, r3
   25626:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   25628:	1dfb      	adds	r3, r7, #7
   2562a:	781b      	ldrb	r3, [r3, #0]
   2562c:	b25b      	sxtb	r3, r3
   2562e:	4a2c      	ldr	r2, [pc, #176]	; (256e0 <close+0x134>)
   25630:	011b      	lsls	r3, r3, #4
   25632:	18d3      	adds	r3, r2, r3
   25634:	330a      	adds	r3, #10
   25636:	2200      	movs	r2, #0
   25638:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2563a:	1dfb      	adds	r3, r7, #7
   2563c:	781b      	ldrb	r3, [r3, #0]
   2563e:	b25b      	sxtb	r3, r3
   25640:	4a27      	ldr	r2, [pc, #156]	; (256e0 <close+0x134>)
   25642:	011b      	lsls	r3, r3, #4
   25644:	18d3      	adds	r3, r2, r3
   25646:	3306      	adds	r3, #6
   25648:	2200      	movs	r2, #0
   2564a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2564c:	1dfb      	adds	r3, r7, #7
   2564e:	781b      	ldrb	r3, [r3, #0]
   25650:	b25b      	sxtb	r3, r3
   25652:	4a23      	ldr	r2, [pc, #140]	; (256e0 <close+0x134>)
   25654:	011b      	lsls	r3, r3, #4
   25656:	18d3      	adds	r3, r2, r3
   25658:	330b      	adds	r3, #11
   2565a:	781b      	ldrb	r3, [r3, #0]
   2565c:	b2db      	uxtb	r3, r3
   2565e:	001a      	movs	r2, r3
   25660:	2301      	movs	r3, #1
   25662:	4013      	ands	r3, r2
   25664:	d003      	beq.n	2566e <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   25666:	230e      	movs	r3, #14
   25668:	18fb      	adds	r3, r7, r3
   2566a:	224e      	movs	r2, #78	; 0x4e
   2566c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   2566e:	230f      	movs	r3, #15
   25670:	18fc      	adds	r4, r7, r3
   25672:	2308      	movs	r3, #8
   25674:	18fa      	adds	r2, r7, r3
   25676:	230e      	movs	r3, #14
   25678:	18fb      	adds	r3, r7, r3
   2567a:	7819      	ldrb	r1, [r3, #0]
   2567c:	2300      	movs	r3, #0
   2567e:	9302      	str	r3, [sp, #8]
   25680:	2300      	movs	r3, #0
   25682:	9301      	str	r3, [sp, #4]
   25684:	2300      	movs	r3, #0
   25686:	9300      	str	r3, [sp, #0]
   25688:	2304      	movs	r3, #4
   2568a:	2002      	movs	r0, #2
   2568c:	4d15      	ldr	r5, [pc, #84]	; (256e4 <close+0x138>)
   2568e:	47a8      	blx	r5
   25690:	0003      	movs	r3, r0
   25692:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25694:	230f      	movs	r3, #15
   25696:	18fb      	adds	r3, r7, r3
   25698:	781b      	ldrb	r3, [r3, #0]
   2569a:	b25b      	sxtb	r3, r3
   2569c:	2b00      	cmp	r3, #0
   2569e:	d003      	beq.n	256a8 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   256a0:	230f      	movs	r3, #15
   256a2:	18fb      	adds	r3, r7, r3
   256a4:	22f7      	movs	r2, #247	; 0xf7
   256a6:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   256a8:	1dfb      	adds	r3, r7, #7
   256aa:	781b      	ldrb	r3, [r3, #0]
   256ac:	b25b      	sxtb	r3, r3
   256ae:	011a      	lsls	r2, r3, #4
   256b0:	4b0b      	ldr	r3, [pc, #44]	; (256e0 <close+0x134>)
   256b2:	18d3      	adds	r3, r2, r3
   256b4:	2210      	movs	r2, #16
   256b6:	2100      	movs	r1, #0
   256b8:	0018      	movs	r0, r3
   256ba:	4b0b      	ldr	r3, [pc, #44]	; (256e8 <close+0x13c>)
   256bc:	4798      	blx	r3
	}
	return s8Ret;
   256be:	230f      	movs	r3, #15
   256c0:	18fb      	adds	r3, r7, r3
   256c2:	781b      	ldrb	r3, [r3, #0]
   256c4:	b25b      	sxtb	r3, r3
}
   256c6:	0018      	movs	r0, r3
   256c8:	46bd      	mov	sp, r7
   256ca:	b004      	add	sp, #16
   256cc:	bdb0      	pop	{r4, r5, r7, pc}
   256ce:	46c0      	nop			; (mov r8, r8)
   256d0:	00038c10 	.word	0x00038c10
   256d4:	0001dc99 	.word	0x0001dc99
   256d8:	00038c50 	.word	0x00038c50
   256dc:	00038c30 	.word	0x00038c30
   256e0:	20005680 	.word	0x20005680
   256e4:	00020871 	.word	0x00020871
   256e8:	00020611 	.word	0x00020611

000256ec <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   256ec:	b580      	push	{r7, lr}
   256ee:	b086      	sub	sp, #24
   256f0:	af00      	add	r7, sp, #0
   256f2:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   256f4:	2300      	movs	r3, #0
   256f6:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   256f8:	2317      	movs	r3, #23
   256fa:	18fb      	adds	r3, r7, r3
   256fc:	2200      	movs	r2, #0
   256fe:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   25700:	2316      	movs	r3, #22
   25702:	18fb      	adds	r3, r7, r3
   25704:	2200      	movs	r2, #0
   25706:	701a      	strb	r2, [r3, #0]
   25708:	e060      	b.n	257cc <nmi_inet_addr+0xe0>
	{
		j = 0;
   2570a:	2315      	movs	r3, #21
   2570c:	18fb      	adds	r3, r7, r3
   2570e:	2200      	movs	r2, #0
   25710:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   25712:	2314      	movs	r3, #20
   25714:	18fb      	adds	r3, r7, r3
   25716:	687a      	ldr	r2, [r7, #4]
   25718:	7812      	ldrb	r2, [r2, #0]
   2571a:	701a      	strb	r2, [r3, #0]
			++j;
   2571c:	2315      	movs	r3, #21
   2571e:	18fb      	adds	r3, r7, r3
   25720:	2215      	movs	r2, #21
   25722:	18ba      	adds	r2, r7, r2
   25724:	7812      	ldrb	r2, [r2, #0]
   25726:	3201      	adds	r2, #1
   25728:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2572a:	2315      	movs	r3, #21
   2572c:	18fb      	adds	r3, r7, r3
   2572e:	781b      	ldrb	r3, [r3, #0]
   25730:	2b04      	cmp	r3, #4
   25732:	d901      	bls.n	25738 <nmi_inet_addr+0x4c>
			{
				return 0;
   25734:	2300      	movs	r3, #0
   25736:	e057      	b.n	257e8 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25738:	2314      	movs	r3, #20
   2573a:	18fb      	adds	r3, r7, r3
   2573c:	781b      	ldrb	r3, [r3, #0]
   2573e:	2b2e      	cmp	r3, #46	; 0x2e
   25740:	d004      	beq.n	2574c <nmi_inet_addr+0x60>
   25742:	2314      	movs	r3, #20
   25744:	18fb      	adds	r3, r7, r3
   25746:	781b      	ldrb	r3, [r3, #0]
   25748:	2b00      	cmp	r3, #0
   2574a:	d10d      	bne.n	25768 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   2574c:	2316      	movs	r3, #22
   2574e:	18fb      	adds	r3, r7, r3
   25750:	781b      	ldrb	r3, [r3, #0]
   25752:	220c      	movs	r2, #12
   25754:	18ba      	adds	r2, r7, r2
   25756:	2117      	movs	r1, #23
   25758:	1879      	adds	r1, r7, r1
   2575a:	7809      	ldrb	r1, [r1, #0]
   2575c:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   2575e:	2317      	movs	r3, #23
   25760:	18fb      	adds	r3, r7, r3
   25762:	2200      	movs	r2, #0
   25764:	701a      	strb	r2, [r3, #0]
   25766:	e01d      	b.n	257a4 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25768:	2314      	movs	r3, #20
   2576a:	18fb      	adds	r3, r7, r3
   2576c:	781b      	ldrb	r3, [r3, #0]
   2576e:	2b2f      	cmp	r3, #47	; 0x2f
   25770:	d916      	bls.n	257a0 <nmi_inet_addr+0xb4>
   25772:	2314      	movs	r3, #20
   25774:	18fb      	adds	r3, r7, r3
   25776:	781b      	ldrb	r3, [r3, #0]
   25778:	2b39      	cmp	r3, #57	; 0x39
   2577a:	d811      	bhi.n	257a0 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   2577c:	2317      	movs	r3, #23
   2577e:	18fb      	adds	r3, r7, r3
   25780:	781b      	ldrb	r3, [r3, #0]
   25782:	1c1a      	adds	r2, r3, #0
   25784:	0092      	lsls	r2, r2, #2
   25786:	18d3      	adds	r3, r2, r3
   25788:	18db      	adds	r3, r3, r3
   2578a:	b2da      	uxtb	r2, r3
   2578c:	2314      	movs	r3, #20
   2578e:	18fb      	adds	r3, r7, r3
   25790:	781b      	ldrb	r3, [r3, #0]
   25792:	18d3      	adds	r3, r2, r3
   25794:	b2da      	uxtb	r2, r3
   25796:	2317      	movs	r3, #23
   25798:	18fb      	adds	r3, r7, r3
   2579a:	3a30      	subs	r2, #48	; 0x30
   2579c:	701a      	strb	r2, [r3, #0]
   2579e:	e001      	b.n	257a4 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   257a0:	2300      	movs	r3, #0
   257a2:	e021      	b.n	257e8 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   257a4:	687b      	ldr	r3, [r7, #4]
   257a6:	3301      	adds	r3, #1
   257a8:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   257aa:	2314      	movs	r3, #20
   257ac:	18fb      	adds	r3, r7, r3
   257ae:	781b      	ldrb	r3, [r3, #0]
   257b0:	2b2e      	cmp	r3, #46	; 0x2e
   257b2:	d004      	beq.n	257be <nmi_inet_addr+0xd2>
   257b4:	2314      	movs	r3, #20
   257b6:	18fb      	adds	r3, r7, r3
   257b8:	781b      	ldrb	r3, [r3, #0]
   257ba:	2b00      	cmp	r3, #0
   257bc:	d1a9      	bne.n	25712 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   257be:	2316      	movs	r3, #22
   257c0:	18fb      	adds	r3, r7, r3
   257c2:	2216      	movs	r2, #22
   257c4:	18ba      	adds	r2, r7, r2
   257c6:	7812      	ldrb	r2, [r2, #0]
   257c8:	3201      	adds	r2, #1
   257ca:	701a      	strb	r2, [r3, #0]
   257cc:	2316      	movs	r3, #22
   257ce:	18fb      	adds	r3, r7, r3
   257d0:	781b      	ldrb	r3, [r3, #0]
   257d2:	2b03      	cmp	r3, #3
   257d4:	d999      	bls.n	2570a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   257d6:	230c      	movs	r3, #12
   257d8:	18f9      	adds	r1, r7, r3
   257da:	2310      	movs	r3, #16
   257dc:	18fb      	adds	r3, r7, r3
   257de:	2204      	movs	r2, #4
   257e0:	0018      	movs	r0, r3
   257e2:	4b03      	ldr	r3, [pc, #12]	; (257f0 <nmi_inet_addr+0x104>)
   257e4:	4798      	blx	r3
	return u32IP;
   257e6:	693b      	ldr	r3, [r7, #16]
}
   257e8:	0018      	movs	r0, r3
   257ea:	46bd      	mov	sp, r7
   257ec:	b006      	add	sp, #24
   257ee:	bd80      	pop	{r7, pc}
   257f0:	000205d5 	.word	0x000205d5

000257f4 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   257f4:	b5b0      	push	{r4, r5, r7, lr}
   257f6:	b088      	sub	sp, #32
   257f8:	af04      	add	r7, sp, #16
   257fa:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   257fc:	230f      	movs	r3, #15
   257fe:	18fb      	adds	r3, r7, r3
   25800:	22fa      	movs	r2, #250	; 0xfa
   25802:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   25804:	687b      	ldr	r3, [r7, #4]
   25806:	0018      	movs	r0, r3
   25808:	4b14      	ldr	r3, [pc, #80]	; (2585c <gethostbyname+0x68>)
   2580a:	4798      	blx	r3
   2580c:	0003      	movs	r3, r0
   2580e:	001a      	movs	r2, r3
   25810:	230e      	movs	r3, #14
   25812:	18fb      	adds	r3, r7, r3
   25814:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   25816:	230e      	movs	r3, #14
   25818:	18fb      	adds	r3, r7, r3
   2581a:	781b      	ldrb	r3, [r3, #0]
   2581c:	2b40      	cmp	r3, #64	; 0x40
   2581e:	d815      	bhi.n	2584c <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   25820:	230e      	movs	r3, #14
   25822:	18fb      	adds	r3, r7, r3
   25824:	781b      	ldrb	r3, [r3, #0]
   25826:	b29b      	uxth	r3, r3
   25828:	3301      	adds	r3, #1
   2582a:	b299      	uxth	r1, r3
   2582c:	230f      	movs	r3, #15
   2582e:	18fc      	adds	r4, r7, r3
   25830:	687a      	ldr	r2, [r7, #4]
   25832:	2300      	movs	r3, #0
   25834:	9302      	str	r3, [sp, #8]
   25836:	2300      	movs	r3, #0
   25838:	9301      	str	r3, [sp, #4]
   2583a:	2300      	movs	r3, #0
   2583c:	9300      	str	r3, [sp, #0]
   2583e:	000b      	movs	r3, r1
   25840:	214a      	movs	r1, #74	; 0x4a
   25842:	2002      	movs	r0, #2
   25844:	4d06      	ldr	r5, [pc, #24]	; (25860 <gethostbyname+0x6c>)
   25846:	47a8      	blx	r5
   25848:	0003      	movs	r3, r0
   2584a:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   2584c:	230f      	movs	r3, #15
   2584e:	18fb      	adds	r3, r7, r3
   25850:	781b      	ldrb	r3, [r3, #0]
   25852:	b25b      	sxtb	r3, r3
}
   25854:	0018      	movs	r0, r3
   25856:	46bd      	mov	sp, r7
   25858:	b004      	add	sp, #16
   2585a:	bdb0      	pop	{r4, r5, r7, pc}
   2585c:	0002064f 	.word	0x0002064f
   25860:	00020871 	.word	0x00020871

00025864 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   25864:	b580      	push	{r7, lr}
   25866:	b082      	sub	sp, #8
   25868:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2586a:	003b      	movs	r3, r7
   2586c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   2586e:	687b      	ldr	r3, [r7, #4]
   25870:	22b9      	movs	r2, #185	; 0xb9
   25872:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   25874:	4b13      	ldr	r3, [pc, #76]	; (258c4 <spi_flash_enter_low_power_mode+0x60>)
   25876:	2100      	movs	r1, #0
   25878:	0018      	movs	r0, r3
   2587a:	4b13      	ldr	r3, [pc, #76]	; (258c8 <spi_flash_enter_low_power_mode+0x64>)
   2587c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2587e:	687b      	ldr	r3, [r7, #4]
   25880:	781b      	ldrb	r3, [r3, #0]
   25882:	001a      	movs	r2, r3
   25884:	4b11      	ldr	r3, [pc, #68]	; (258cc <spi_flash_enter_low_power_mode+0x68>)
   25886:	0011      	movs	r1, r2
   25888:	0018      	movs	r0, r3
   2588a:	4b0f      	ldr	r3, [pc, #60]	; (258c8 <spi_flash_enter_low_power_mode+0x64>)
   2588c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2588e:	4b10      	ldr	r3, [pc, #64]	; (258d0 <spi_flash_enter_low_power_mode+0x6c>)
   25890:	2101      	movs	r1, #1
   25892:	0018      	movs	r0, r3
   25894:	4b0c      	ldr	r3, [pc, #48]	; (258c8 <spi_flash_enter_low_power_mode+0x64>)
   25896:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25898:	4b0e      	ldr	r3, [pc, #56]	; (258d4 <spi_flash_enter_low_power_mode+0x70>)
   2589a:	2100      	movs	r1, #0
   2589c:	0018      	movs	r0, r3
   2589e:	4b0a      	ldr	r3, [pc, #40]	; (258c8 <spi_flash_enter_low_power_mode+0x64>)
   258a0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   258a2:	4b0d      	ldr	r3, [pc, #52]	; (258d8 <spi_flash_enter_low_power_mode+0x74>)
   258a4:	2181      	movs	r1, #129	; 0x81
   258a6:	0018      	movs	r0, r3
   258a8:	4b07      	ldr	r3, [pc, #28]	; (258c8 <spi_flash_enter_low_power_mode+0x64>)
   258aa:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   258ac:	46c0      	nop			; (mov r8, r8)
   258ae:	4b0b      	ldr	r3, [pc, #44]	; (258dc <spi_flash_enter_low_power_mode+0x78>)
   258b0:	0018      	movs	r0, r3
   258b2:	4b0b      	ldr	r3, [pc, #44]	; (258e0 <spi_flash_enter_low_power_mode+0x7c>)
   258b4:	4798      	blx	r3
   258b6:	0003      	movs	r3, r0
   258b8:	2b01      	cmp	r3, #1
   258ba:	d1f8      	bne.n	258ae <spi_flash_enter_low_power_mode+0x4a>
}
   258bc:	46c0      	nop			; (mov r8, r8)
   258be:	46bd      	mov	sp, r7
   258c0:	b002      	add	sp, #8
   258c2:	bd80      	pop	{r7, pc}
   258c4:	00010208 	.word	0x00010208
   258c8:	000226c5 	.word	0x000226c5
   258cc:	0001020c 	.word	0x0001020c
   258d0:	00010214 	.word	0x00010214
   258d4:	0001021c 	.word	0x0001021c
   258d8:	00010204 	.word	0x00010204
   258dc:	00010218 	.word	0x00010218
   258e0:	00022681 	.word	0x00022681

000258e4 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   258e4:	b580      	push	{r7, lr}
   258e6:	b082      	sub	sp, #8
   258e8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   258ea:	003b      	movs	r3, r7
   258ec:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   258ee:	687b      	ldr	r3, [r7, #4]
   258f0:	22ab      	movs	r2, #171	; 0xab
   258f2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   258f4:	4b13      	ldr	r3, [pc, #76]	; (25944 <spi_flash_leave_low_power_mode+0x60>)
   258f6:	2100      	movs	r1, #0
   258f8:	0018      	movs	r0, r3
   258fa:	4b13      	ldr	r3, [pc, #76]	; (25948 <spi_flash_leave_low_power_mode+0x64>)
   258fc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   258fe:	687b      	ldr	r3, [r7, #4]
   25900:	781b      	ldrb	r3, [r3, #0]
   25902:	001a      	movs	r2, r3
   25904:	4b11      	ldr	r3, [pc, #68]	; (2594c <spi_flash_leave_low_power_mode+0x68>)
   25906:	0011      	movs	r1, r2
   25908:	0018      	movs	r0, r3
   2590a:	4b0f      	ldr	r3, [pc, #60]	; (25948 <spi_flash_leave_low_power_mode+0x64>)
   2590c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2590e:	4b10      	ldr	r3, [pc, #64]	; (25950 <spi_flash_leave_low_power_mode+0x6c>)
   25910:	2101      	movs	r1, #1
   25912:	0018      	movs	r0, r3
   25914:	4b0c      	ldr	r3, [pc, #48]	; (25948 <spi_flash_leave_low_power_mode+0x64>)
   25916:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   25918:	4b0e      	ldr	r3, [pc, #56]	; (25954 <spi_flash_leave_low_power_mode+0x70>)
   2591a:	2100      	movs	r1, #0
   2591c:	0018      	movs	r0, r3
   2591e:	4b0a      	ldr	r3, [pc, #40]	; (25948 <spi_flash_leave_low_power_mode+0x64>)
   25920:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   25922:	4b0d      	ldr	r3, [pc, #52]	; (25958 <spi_flash_leave_low_power_mode+0x74>)
   25924:	2181      	movs	r1, #129	; 0x81
   25926:	0018      	movs	r0, r3
   25928:	4b07      	ldr	r3, [pc, #28]	; (25948 <spi_flash_leave_low_power_mode+0x64>)
   2592a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   2592c:	46c0      	nop			; (mov r8, r8)
   2592e:	4b0b      	ldr	r3, [pc, #44]	; (2595c <spi_flash_leave_low_power_mode+0x78>)
   25930:	0018      	movs	r0, r3
   25932:	4b0b      	ldr	r3, [pc, #44]	; (25960 <spi_flash_leave_low_power_mode+0x7c>)
   25934:	4798      	blx	r3
   25936:	0003      	movs	r3, r0
   25938:	2b01      	cmp	r3, #1
   2593a:	d1f8      	bne.n	2592e <spi_flash_leave_low_power_mode+0x4a>
}
   2593c:	46c0      	nop			; (mov r8, r8)
   2593e:	46bd      	mov	sp, r7
   25940:	b002      	add	sp, #8
   25942:	bd80      	pop	{r7, pc}
   25944:	00010208 	.word	0x00010208
   25948:	000226c5 	.word	0x000226c5
   2594c:	0001020c 	.word	0x0001020c
   25950:	00010214 	.word	0x00010214
   25954:	0001021c 	.word	0x0001021c
   25958:	00010204 	.word	0x00010204
   2595c:	00010218 	.word	0x00010218
   25960:	00022681 	.word	0x00022681

00025964 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   25964:	b590      	push	{r4, r7, lr}
   25966:	b085      	sub	sp, #20
   25968:	af00      	add	r7, sp, #0
   2596a:	0002      	movs	r2, r0
   2596c:	1dfb      	adds	r3, r7, #7
   2596e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   25970:	230f      	movs	r3, #15
   25972:	18fb      	adds	r3, r7, r3
   25974:	2200      	movs	r2, #0
   25976:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   25978:	4b24      	ldr	r3, [pc, #144]	; (25a0c <spi_flash_enable+0xa8>)
   2597a:	4798      	blx	r3
   2597c:	0003      	movs	r3, r0
   2597e:	051b      	lsls	r3, r3, #20
   25980:	0d1b      	lsrs	r3, r3, #20
   25982:	4a23      	ldr	r2, [pc, #140]	; (25a10 <spi_flash_enable+0xac>)
   25984:	4293      	cmp	r3, r2
   25986:	d938      	bls.n	259fa <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   25988:	230f      	movs	r3, #15
   2598a:	18fc      	adds	r4, r7, r3
   2598c:	2308      	movs	r3, #8
   2598e:	18fb      	adds	r3, r7, r3
   25990:	4a20      	ldr	r2, [pc, #128]	; (25a14 <spi_flash_enable+0xb0>)
   25992:	0019      	movs	r1, r3
   25994:	0010      	movs	r0, r2
   25996:	4b20      	ldr	r3, [pc, #128]	; (25a18 <spi_flash_enable+0xb4>)
   25998:	4798      	blx	r3
   2599a:	0003      	movs	r3, r0
   2599c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   2599e:	230f      	movs	r3, #15
   259a0:	18fb      	adds	r3, r7, r3
   259a2:	781b      	ldrb	r3, [r3, #0]
   259a4:	b25b      	sxtb	r3, r3
   259a6:	2b00      	cmp	r3, #0
   259a8:	d126      	bne.n	259f8 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   259aa:	68bb      	ldr	r3, [r7, #8]
   259ac:	4a1b      	ldr	r2, [pc, #108]	; (25a1c <spi_flash_enable+0xb8>)
   259ae:	4013      	ands	r3, r2
   259b0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   259b2:	68bb      	ldr	r3, [r7, #8]
   259b4:	4a1a      	ldr	r2, [pc, #104]	; (25a20 <spi_flash_enable+0xbc>)
   259b6:	4313      	orrs	r3, r2
   259b8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   259ba:	68bb      	ldr	r3, [r7, #8]
   259bc:	4a15      	ldr	r2, [pc, #84]	; (25a14 <spi_flash_enable+0xb0>)
   259be:	0019      	movs	r1, r3
   259c0:	0010      	movs	r0, r2
   259c2:	4b18      	ldr	r3, [pc, #96]	; (25a24 <spi_flash_enable+0xc0>)
   259c4:	4798      	blx	r3
		if(enable) {
   259c6:	1dfb      	adds	r3, r7, #7
   259c8:	781b      	ldrb	r3, [r3, #0]
   259ca:	2b00      	cmp	r3, #0
   259cc:	d002      	beq.n	259d4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   259ce:	4b16      	ldr	r3, [pc, #88]	; (25a28 <spi_flash_enable+0xc4>)
   259d0:	4798      	blx	r3
   259d2:	e001      	b.n	259d8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   259d4:	4b15      	ldr	r3, [pc, #84]	; (25a2c <spi_flash_enable+0xc8>)
   259d6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   259d8:	68bb      	ldr	r3, [r7, #8]
   259da:	4a10      	ldr	r2, [pc, #64]	; (25a1c <spi_flash_enable+0xb8>)
   259dc:	4013      	ands	r3, r2
   259de:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   259e0:	68bb      	ldr	r3, [r7, #8]
   259e2:	2280      	movs	r2, #128	; 0x80
   259e4:	0252      	lsls	r2, r2, #9
   259e6:	4313      	orrs	r3, r2
   259e8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   259ea:	68bb      	ldr	r3, [r7, #8]
   259ec:	4a09      	ldr	r2, [pc, #36]	; (25a14 <spi_flash_enable+0xb0>)
   259ee:	0019      	movs	r1, r3
   259f0:	0010      	movs	r0, r2
   259f2:	4b0c      	ldr	r3, [pc, #48]	; (25a24 <spi_flash_enable+0xc0>)
   259f4:	4798      	blx	r3
   259f6:	e000      	b.n	259fa <spi_flash_enable+0x96>
			goto ERR1;
   259f8:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   259fa:	230f      	movs	r3, #15
   259fc:	18fb      	adds	r3, r7, r3
   259fe:	781b      	ldrb	r3, [r3, #0]
   25a00:	b25b      	sxtb	r3, r3
}
   25a02:	0018      	movs	r0, r3
   25a04:	46bd      	mov	sp, r7
   25a06:	b005      	add	sp, #20
   25a08:	bd90      	pop	{r4, r7, pc}
   25a0a:	46c0      	nop			; (mov r8, r8)
   25a0c:	00021fa1 	.word	0x00021fa1
   25a10:	0000039f 	.word	0x0000039f
   25a14:	00001410 	.word	0x00001410
   25a18:	000226a1 	.word	0x000226a1
   25a1c:	f8888fff 	.word	0xf8888fff
   25a20:	01111000 	.word	0x01111000
   25a24:	000226c5 	.word	0x000226c5
   25a28:	000258e5 	.word	0x000258e5
   25a2c:	00025865 	.word	0x00025865

00025a30 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   25a30:	b580      	push	{r7, lr}
   25a32:	b084      	sub	sp, #16
   25a34:	af00      	add	r7, sp, #0
   25a36:	0002      	movs	r2, r0
   25a38:	1dfb      	adds	r3, r7, #7
   25a3a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   25a3c:	1dfb      	adds	r3, r7, #7
   25a3e:	781b      	ldrb	r3, [r3, #0]
   25a40:	2b00      	cmp	r3, #0
   25a42:	d108      	bne.n	25a56 <mem_test_unit_ready+0x26>
   25a44:	1dfb      	adds	r3, r7, #7
   25a46:	781a      	ldrb	r2, [r3, #0]
   25a48:	4b08      	ldr	r3, [pc, #32]	; (25a6c <mem_test_unit_ready+0x3c>)
   25a4a:	0152      	lsls	r2, r2, #5
   25a4c:	58d3      	ldr	r3, [r2, r3]
   25a4e:	4798      	blx	r3
   25a50:	0003      	movs	r3, r0
   25a52:	001a      	movs	r2, r3
   25a54:	e000      	b.n	25a58 <mem_test_unit_ready+0x28>
   25a56:	2201      	movs	r2, #1
  status =
   25a58:	230f      	movs	r3, #15
   25a5a:	18fb      	adds	r3, r7, r3
   25a5c:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25a5e:	230f      	movs	r3, #15
   25a60:	18fb      	adds	r3, r7, r3
   25a62:	781b      	ldrb	r3, [r3, #0]
}
   25a64:	0018      	movs	r0, r3
   25a66:	46bd      	mov	sp, r7
   25a68:	b004      	add	sp, #16
   25a6a:	bd80      	pop	{r7, pc}
   25a6c:	00038cdc 	.word	0x00038cdc

00025a70 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   25a70:	b580      	push	{r7, lr}
   25a72:	b084      	sub	sp, #16
   25a74:	af00      	add	r7, sp, #0
   25a76:	0002      	movs	r2, r0
   25a78:	6039      	str	r1, [r7, #0]
   25a7a:	1dfb      	adds	r3, r7, #7
   25a7c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   25a7e:	1dfb      	adds	r3, r7, #7
   25a80:	781b      	ldrb	r3, [r3, #0]
   25a82:	2b00      	cmp	r3, #0
   25a84:	d10c      	bne.n	25aa0 <mem_read_capacity+0x30>
   25a86:	1dfb      	adds	r3, r7, #7
   25a88:	781b      	ldrb	r3, [r3, #0]
   25a8a:	4a0b      	ldr	r2, [pc, #44]	; (25ab8 <mem_read_capacity+0x48>)
   25a8c:	015b      	lsls	r3, r3, #5
   25a8e:	18d3      	adds	r3, r2, r3
   25a90:	3304      	adds	r3, #4
   25a92:	681b      	ldr	r3, [r3, #0]
   25a94:	683a      	ldr	r2, [r7, #0]
   25a96:	0010      	movs	r0, r2
   25a98:	4798      	blx	r3
   25a9a:	0003      	movs	r3, r0
   25a9c:	001a      	movs	r2, r3
   25a9e:	e000      	b.n	25aa2 <mem_read_capacity+0x32>
   25aa0:	2201      	movs	r2, #1
  status =
   25aa2:	230f      	movs	r3, #15
   25aa4:	18fb      	adds	r3, r7, r3
   25aa6:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   25aa8:	230f      	movs	r3, #15
   25aaa:	18fb      	adds	r3, r7, r3
   25aac:	781b      	ldrb	r3, [r3, #0]
}
   25aae:	0018      	movs	r0, r3
   25ab0:	46bd      	mov	sp, r7
   25ab2:	b004      	add	sp, #16
   25ab4:	bd80      	pop	{r7, pc}
   25ab6:	46c0      	nop			; (mov r8, r8)
   25ab8:	00038cdc 	.word	0x00038cdc

00025abc <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   25abc:	b580      	push	{r7, lr}
   25abe:	b084      	sub	sp, #16
   25ac0:	af00      	add	r7, sp, #0
   25ac2:	0002      	movs	r2, r0
   25ac4:	1dfb      	adds	r3, r7, #7
   25ac6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   25ac8:	1dfb      	adds	r3, r7, #7
   25aca:	781b      	ldrb	r3, [r3, #0]
   25acc:	425a      	negs	r2, r3
   25ace:	4153      	adcs	r3, r2
   25ad0:	b2da      	uxtb	r2, r3
  sector_size =
   25ad2:	230f      	movs	r3, #15
   25ad4:	18fb      	adds	r3, r7, r3
   25ad6:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   25ad8:	230f      	movs	r3, #15
   25ada:	18fb      	adds	r3, r7, r3
   25adc:	781b      	ldrb	r3, [r3, #0]
}
   25ade:	0018      	movs	r0, r3
   25ae0:	46bd      	mov	sp, r7
   25ae2:	b004      	add	sp, #16
   25ae4:	bd80      	pop	{r7, pc}
	...

00025ae8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   25ae8:	b580      	push	{r7, lr}
   25aea:	b084      	sub	sp, #16
   25aec:	af00      	add	r7, sp, #0
   25aee:	0002      	movs	r2, r0
   25af0:	1dfb      	adds	r3, r7, #7
   25af2:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   25af4:	1dfb      	adds	r3, r7, #7
   25af6:	781b      	ldrb	r3, [r3, #0]
   25af8:	2b00      	cmp	r3, #0
   25afa:	d109      	bne.n	25b10 <mem_wr_protect+0x28>
   25afc:	1dfb      	adds	r3, r7, #7
   25afe:	781b      	ldrb	r3, [r3, #0]
   25b00:	4a0a      	ldr	r2, [pc, #40]	; (25b2c <mem_wr_protect+0x44>)
   25b02:	015b      	lsls	r3, r3, #5
   25b04:	18d3      	adds	r3, r2, r3
   25b06:	330c      	adds	r3, #12
   25b08:	681b      	ldr	r3, [r3, #0]
   25b0a:	4798      	blx	r3
   25b0c:	1e03      	subs	r3, r0, #0
   25b0e:	d001      	beq.n	25b14 <mem_wr_protect+0x2c>
   25b10:	2201      	movs	r2, #1
   25b12:	e000      	b.n	25b16 <mem_wr_protect+0x2e>
   25b14:	2200      	movs	r2, #0
  wr_protect =
   25b16:	230f      	movs	r3, #15
   25b18:	18fb      	adds	r3, r7, r3
   25b1a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   25b1c:	230f      	movs	r3, #15
   25b1e:	18fb      	adds	r3, r7, r3
   25b20:	781b      	ldrb	r3, [r3, #0]
}
   25b22:	0018      	movs	r0, r3
   25b24:	46bd      	mov	sp, r7
   25b26:	b004      	add	sp, #16
   25b28:	bd80      	pop	{r7, pc}
   25b2a:	46c0      	nop			; (mov r8, r8)
   25b2c:	00038cdc 	.word	0x00038cdc

00025b30 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   25b30:	b580      	push	{r7, lr}
   25b32:	b086      	sub	sp, #24
   25b34:	af00      	add	r7, sp, #0
   25b36:	60b9      	str	r1, [r7, #8]
   25b38:	607a      	str	r2, [r7, #4]
   25b3a:	230f      	movs	r3, #15
   25b3c:	18fb      	adds	r3, r7, r3
   25b3e:	1c02      	adds	r2, r0, #0
   25b40:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   25b42:	230f      	movs	r3, #15
   25b44:	18fb      	adds	r3, r7, r3
   25b46:	781b      	ldrb	r3, [r3, #0]
   25b48:	2b00      	cmp	r3, #0
   25b4a:	d10e      	bne.n	25b6a <memory_2_ram+0x3a>
   25b4c:	230f      	movs	r3, #15
   25b4e:	18fb      	adds	r3, r7, r3
   25b50:	781b      	ldrb	r3, [r3, #0]
   25b52:	4a0b      	ldr	r2, [pc, #44]	; (25b80 <memory_2_ram+0x50>)
   25b54:	015b      	lsls	r3, r3, #5
   25b56:	18d3      	adds	r3, r2, r3
   25b58:	3314      	adds	r3, #20
   25b5a:	681b      	ldr	r3, [r3, #0]
   25b5c:	6879      	ldr	r1, [r7, #4]
   25b5e:	68ba      	ldr	r2, [r7, #8]
   25b60:	0010      	movs	r0, r2
   25b62:	4798      	blx	r3
   25b64:	0003      	movs	r3, r0
   25b66:	001a      	movs	r2, r3
   25b68:	e000      	b.n	25b6c <memory_2_ram+0x3c>
   25b6a:	2201      	movs	r2, #1
  status =
   25b6c:	2317      	movs	r3, #23
   25b6e:	18fb      	adds	r3, r7, r3
   25b70:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   25b72:	2317      	movs	r3, #23
   25b74:	18fb      	adds	r3, r7, r3
   25b76:	781b      	ldrb	r3, [r3, #0]
}
   25b78:	0018      	movs	r0, r3
   25b7a:	46bd      	mov	sp, r7
   25b7c:	b006      	add	sp, #24
   25b7e:	bd80      	pop	{r7, pc}
   25b80:	00038cdc 	.word	0x00038cdc

00025b84 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   25b84:	b580      	push	{r7, lr}
   25b86:	b086      	sub	sp, #24
   25b88:	af00      	add	r7, sp, #0
   25b8a:	60b9      	str	r1, [r7, #8]
   25b8c:	607a      	str	r2, [r7, #4]
   25b8e:	230f      	movs	r3, #15
   25b90:	18fb      	adds	r3, r7, r3
   25b92:	1c02      	adds	r2, r0, #0
   25b94:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   25b96:	230f      	movs	r3, #15
   25b98:	18fb      	adds	r3, r7, r3
   25b9a:	781b      	ldrb	r3, [r3, #0]
   25b9c:	2b00      	cmp	r3, #0
   25b9e:	d10e      	bne.n	25bbe <ram_2_memory+0x3a>
   25ba0:	230f      	movs	r3, #15
   25ba2:	18fb      	adds	r3, r7, r3
   25ba4:	781b      	ldrb	r3, [r3, #0]
   25ba6:	4a0b      	ldr	r2, [pc, #44]	; (25bd4 <ram_2_memory+0x50>)
   25ba8:	015b      	lsls	r3, r3, #5
   25baa:	18d3      	adds	r3, r2, r3
   25bac:	3318      	adds	r3, #24
   25bae:	681b      	ldr	r3, [r3, #0]
   25bb0:	6879      	ldr	r1, [r7, #4]
   25bb2:	68ba      	ldr	r2, [r7, #8]
   25bb4:	0010      	movs	r0, r2
   25bb6:	4798      	blx	r3
   25bb8:	0003      	movs	r3, r0
   25bba:	001a      	movs	r2, r3
   25bbc:	e000      	b.n	25bc0 <ram_2_memory+0x3c>
   25bbe:	2201      	movs	r2, #1
  status =
   25bc0:	2317      	movs	r3, #23
   25bc2:	18fb      	adds	r3, r7, r3
   25bc4:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   25bc6:	2317      	movs	r3, #23
   25bc8:	18fb      	adds	r3, r7, r3
   25bca:	781b      	ldrb	r3, [r3, #0]
}
   25bcc:	0018      	movs	r0, r3
   25bce:	46bd      	mov	sp, r7
   25bd0:	b006      	add	sp, #24
   25bd2:	bd80      	pop	{r7, pc}
   25bd4:	00038cdc 	.word	0x00038cdc

00025bd8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   25bd8:	b580      	push	{r7, lr}
   25bda:	b082      	sub	sp, #8
   25bdc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   25bde:	4b10      	ldr	r3, [pc, #64]	; (25c20 <cpu_irq_enter_critical+0x48>)
   25be0:	681b      	ldr	r3, [r3, #0]
   25be2:	2b00      	cmp	r3, #0
   25be4:	d112      	bne.n	25c0c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   25be6:	f3ef 8310 	mrs	r3, PRIMASK
   25bea:	607b      	str	r3, [r7, #4]
  return(result);
   25bec:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   25bee:	2b00      	cmp	r3, #0
   25bf0:	d109      	bne.n	25c06 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   25bf2:	b672      	cpsid	i
   25bf4:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   25bf8:	4b0a      	ldr	r3, [pc, #40]	; (25c24 <cpu_irq_enter_critical+0x4c>)
   25bfa:	2200      	movs	r2, #0
   25bfc:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   25bfe:	4b0a      	ldr	r3, [pc, #40]	; (25c28 <cpu_irq_enter_critical+0x50>)
   25c00:	2201      	movs	r2, #1
   25c02:	701a      	strb	r2, [r3, #0]
   25c04:	e002      	b.n	25c0c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   25c06:	4b08      	ldr	r3, [pc, #32]	; (25c28 <cpu_irq_enter_critical+0x50>)
   25c08:	2200      	movs	r2, #0
   25c0a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   25c0c:	4b04      	ldr	r3, [pc, #16]	; (25c20 <cpu_irq_enter_critical+0x48>)
   25c0e:	681b      	ldr	r3, [r3, #0]
   25c10:	1c5a      	adds	r2, r3, #1
   25c12:	4b03      	ldr	r3, [pc, #12]	; (25c20 <cpu_irq_enter_critical+0x48>)
   25c14:	601a      	str	r2, [r3, #0]
}
   25c16:	46c0      	nop			; (mov r8, r8)
   25c18:	46bd      	mov	sp, r7
   25c1a:	b002      	add	sp, #8
   25c1c:	bd80      	pop	{r7, pc}
   25c1e:	46c0      	nop			; (mov r8, r8)
   25c20:	20003ea0 	.word	0x20003ea0
   25c24:	200000ca 	.word	0x200000ca
   25c28:	20003ea4 	.word	0x20003ea4

00025c2c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   25c2c:	b580      	push	{r7, lr}
   25c2e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   25c30:	4b0b      	ldr	r3, [pc, #44]	; (25c60 <cpu_irq_leave_critical+0x34>)
   25c32:	681b      	ldr	r3, [r3, #0]
   25c34:	1e5a      	subs	r2, r3, #1
   25c36:	4b0a      	ldr	r3, [pc, #40]	; (25c60 <cpu_irq_leave_critical+0x34>)
   25c38:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   25c3a:	4b09      	ldr	r3, [pc, #36]	; (25c60 <cpu_irq_leave_critical+0x34>)
   25c3c:	681b      	ldr	r3, [r3, #0]
   25c3e:	2b00      	cmp	r3, #0
   25c40:	d10a      	bne.n	25c58 <cpu_irq_leave_critical+0x2c>
   25c42:	4b08      	ldr	r3, [pc, #32]	; (25c64 <cpu_irq_leave_critical+0x38>)
   25c44:	781b      	ldrb	r3, [r3, #0]
   25c46:	b2db      	uxtb	r3, r3
   25c48:	2b00      	cmp	r3, #0
   25c4a:	d005      	beq.n	25c58 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   25c4c:	4b06      	ldr	r3, [pc, #24]	; (25c68 <cpu_irq_leave_critical+0x3c>)
   25c4e:	2201      	movs	r2, #1
   25c50:	701a      	strb	r2, [r3, #0]
   25c52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   25c56:	b662      	cpsie	i
	}
}
   25c58:	46c0      	nop			; (mov r8, r8)
   25c5a:	46bd      	mov	sp, r7
   25c5c:	bd80      	pop	{r7, pc}
   25c5e:	46c0      	nop			; (mov r8, r8)
   25c60:	20003ea0 	.word	0x20003ea0
   25c64:	20003ea4 	.word	0x20003ea4
   25c68:	200000ca 	.word	0x200000ca

00025c6c <system_pinmux_get_group_from_gpio_pin>:
{
   25c6c:	b580      	push	{r7, lr}
   25c6e:	b084      	sub	sp, #16
   25c70:	af00      	add	r7, sp, #0
   25c72:	0002      	movs	r2, r0
   25c74:	1dfb      	adds	r3, r7, #7
   25c76:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   25c78:	230f      	movs	r3, #15
   25c7a:	18fb      	adds	r3, r7, r3
   25c7c:	1dfa      	adds	r2, r7, #7
   25c7e:	7812      	ldrb	r2, [r2, #0]
   25c80:	09d2      	lsrs	r2, r2, #7
   25c82:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   25c84:	230e      	movs	r3, #14
   25c86:	18fb      	adds	r3, r7, r3
   25c88:	1dfa      	adds	r2, r7, #7
   25c8a:	7812      	ldrb	r2, [r2, #0]
   25c8c:	0952      	lsrs	r2, r2, #5
   25c8e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   25c90:	4b0d      	ldr	r3, [pc, #52]	; (25cc8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   25c92:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   25c94:	230f      	movs	r3, #15
   25c96:	18fb      	adds	r3, r7, r3
   25c98:	781b      	ldrb	r3, [r3, #0]
   25c9a:	2b00      	cmp	r3, #0
   25c9c:	d10f      	bne.n	25cbe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   25c9e:	230f      	movs	r3, #15
   25ca0:	18fb      	adds	r3, r7, r3
   25ca2:	781b      	ldrb	r3, [r3, #0]
   25ca4:	009b      	lsls	r3, r3, #2
   25ca6:	2210      	movs	r2, #16
   25ca8:	4694      	mov	ip, r2
   25caa:	44bc      	add	ip, r7
   25cac:	4463      	add	r3, ip
   25cae:	3b08      	subs	r3, #8
   25cb0:	681a      	ldr	r2, [r3, #0]
   25cb2:	230e      	movs	r3, #14
   25cb4:	18fb      	adds	r3, r7, r3
   25cb6:	781b      	ldrb	r3, [r3, #0]
   25cb8:	01db      	lsls	r3, r3, #7
   25cba:	18d3      	adds	r3, r2, r3
   25cbc:	e000      	b.n	25cc0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   25cbe:	2300      	movs	r3, #0
}
   25cc0:	0018      	movs	r0, r3
   25cc2:	46bd      	mov	sp, r7
   25cc4:	b004      	add	sp, #16
   25cc6:	bd80      	pop	{r7, pc}
   25cc8:	41004400 	.word	0x41004400

00025ccc <port_get_group_from_gpio_pin>:
{
   25ccc:	b580      	push	{r7, lr}
   25cce:	b082      	sub	sp, #8
   25cd0:	af00      	add	r7, sp, #0
   25cd2:	0002      	movs	r2, r0
   25cd4:	1dfb      	adds	r3, r7, #7
   25cd6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   25cd8:	1dfb      	adds	r3, r7, #7
   25cda:	781b      	ldrb	r3, [r3, #0]
   25cdc:	0018      	movs	r0, r3
   25cde:	4b03      	ldr	r3, [pc, #12]	; (25cec <port_get_group_from_gpio_pin+0x20>)
   25ce0:	4798      	blx	r3
   25ce2:	0003      	movs	r3, r0
}
   25ce4:	0018      	movs	r0, r3
   25ce6:	46bd      	mov	sp, r7
   25ce8:	b002      	add	sp, #8
   25cea:	bd80      	pop	{r7, pc}
   25cec:	00025c6d 	.word	0x00025c6d

00025cf0 <port_get_config_defaults>:
{
   25cf0:	b580      	push	{r7, lr}
   25cf2:	b082      	sub	sp, #8
   25cf4:	af00      	add	r7, sp, #0
   25cf6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   25cf8:	687b      	ldr	r3, [r7, #4]
   25cfa:	2200      	movs	r2, #0
   25cfc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   25cfe:	687b      	ldr	r3, [r7, #4]
   25d00:	2201      	movs	r2, #1
   25d02:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   25d04:	687b      	ldr	r3, [r7, #4]
   25d06:	2200      	movs	r2, #0
   25d08:	709a      	strb	r2, [r3, #2]
}
   25d0a:	46c0      	nop			; (mov r8, r8)
   25d0c:	46bd      	mov	sp, r7
   25d0e:	b002      	add	sp, #8
   25d10:	bd80      	pop	{r7, pc}
	...

00025d14 <port_pin_set_output_level>:
{
   25d14:	b580      	push	{r7, lr}
   25d16:	b084      	sub	sp, #16
   25d18:	af00      	add	r7, sp, #0
   25d1a:	0002      	movs	r2, r0
   25d1c:	1dfb      	adds	r3, r7, #7
   25d1e:	701a      	strb	r2, [r3, #0]
   25d20:	1dbb      	adds	r3, r7, #6
   25d22:	1c0a      	adds	r2, r1, #0
   25d24:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   25d26:	1dfb      	adds	r3, r7, #7
   25d28:	781b      	ldrb	r3, [r3, #0]
   25d2a:	0018      	movs	r0, r3
   25d2c:	4b0d      	ldr	r3, [pc, #52]	; (25d64 <port_pin_set_output_level+0x50>)
   25d2e:	4798      	blx	r3
   25d30:	0003      	movs	r3, r0
   25d32:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   25d34:	1dfb      	adds	r3, r7, #7
   25d36:	781b      	ldrb	r3, [r3, #0]
   25d38:	221f      	movs	r2, #31
   25d3a:	4013      	ands	r3, r2
   25d3c:	2201      	movs	r2, #1
   25d3e:	409a      	lsls	r2, r3
   25d40:	0013      	movs	r3, r2
   25d42:	60bb      	str	r3, [r7, #8]
	if (level) {
   25d44:	1dbb      	adds	r3, r7, #6
   25d46:	781b      	ldrb	r3, [r3, #0]
   25d48:	2b00      	cmp	r3, #0
   25d4a:	d003      	beq.n	25d54 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   25d4c:	68fb      	ldr	r3, [r7, #12]
   25d4e:	68ba      	ldr	r2, [r7, #8]
   25d50:	619a      	str	r2, [r3, #24]
}
   25d52:	e002      	b.n	25d5a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   25d54:	68fb      	ldr	r3, [r7, #12]
   25d56:	68ba      	ldr	r2, [r7, #8]
   25d58:	615a      	str	r2, [r3, #20]
}
   25d5a:	46c0      	nop			; (mov r8, r8)
   25d5c:	46bd      	mov	sp, r7
   25d5e:	b004      	add	sp, #16
   25d60:	bd80      	pop	{r7, pc}
   25d62:	46c0      	nop			; (mov r8, r8)
   25d64:	00025ccd 	.word	0x00025ccd

00025d68 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   25d68:	b580      	push	{r7, lr}
   25d6a:	b082      	sub	sp, #8
   25d6c:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   25d6e:	1d3b      	adds	r3, r7, #4
   25d70:	0018      	movs	r0, r3
   25d72:	4b0e      	ldr	r3, [pc, #56]	; (25dac <system_board_init+0x44>)
   25d74:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   25d76:	1d3b      	adds	r3, r7, #4
   25d78:	2201      	movs	r2, #1
   25d7a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   25d7c:	1d3b      	adds	r3, r7, #4
   25d7e:	0019      	movs	r1, r3
   25d80:	2017      	movs	r0, #23
   25d82:	4b0b      	ldr	r3, [pc, #44]	; (25db0 <system_board_init+0x48>)
   25d84:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   25d86:	2101      	movs	r1, #1
   25d88:	2017      	movs	r0, #23
   25d8a:	4b0a      	ldr	r3, [pc, #40]	; (25db4 <system_board_init+0x4c>)
   25d8c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   25d8e:	1d3b      	adds	r3, r7, #4
   25d90:	2200      	movs	r2, #0
   25d92:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   25d94:	1d3b      	adds	r3, r7, #4
   25d96:	2201      	movs	r2, #1
   25d98:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   25d9a:	1d3b      	adds	r3, r7, #4
   25d9c:	0019      	movs	r1, r3
   25d9e:	2037      	movs	r0, #55	; 0x37
   25da0:	4b03      	ldr	r3, [pc, #12]	; (25db0 <system_board_init+0x48>)
   25da2:	4798      	blx	r3
}
   25da4:	46c0      	nop			; (mov r8, r8)
   25da6:	46bd      	mov	sp, r7
   25da8:	b002      	add	sp, #8
   25daa:	bd80      	pop	{r7, pc}
   25dac:	00025cf1 	.word	0x00025cf1
   25db0:	000263dd 	.word	0x000263dd
   25db4:	00025d15 	.word	0x00025d15

00025db8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   25db8:	b580      	push	{r7, lr}
   25dba:	b084      	sub	sp, #16
   25dbc:	af00      	add	r7, sp, #0
   25dbe:	0002      	movs	r2, r0
   25dc0:	1dfb      	adds	r3, r7, #7
   25dc2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25dc4:	230f      	movs	r3, #15
   25dc6:	18fb      	adds	r3, r7, r3
   25dc8:	1dfa      	adds	r2, r7, #7
   25dca:	7812      	ldrb	r2, [r2, #0]
   25dcc:	0952      	lsrs	r2, r2, #5
   25dce:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   25dd0:	230f      	movs	r3, #15
   25dd2:	18fb      	adds	r3, r7, r3
   25dd4:	781b      	ldrb	r3, [r3, #0]
   25dd6:	2b00      	cmp	r3, #0
   25dd8:	d10c      	bne.n	25df4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25dda:	4b09      	ldr	r3, [pc, #36]	; (25e00 <_extint_get_eic_from_channel+0x48>)
   25ddc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   25dde:	230f      	movs	r3, #15
   25de0:	18fb      	adds	r3, r7, r3
   25de2:	781b      	ldrb	r3, [r3, #0]
   25de4:	009b      	lsls	r3, r3, #2
   25de6:	2210      	movs	r2, #16
   25de8:	4694      	mov	ip, r2
   25dea:	44bc      	add	ip, r7
   25dec:	4463      	add	r3, ip
   25dee:	3b08      	subs	r3, #8
   25df0:	681b      	ldr	r3, [r3, #0]
   25df2:	e000      	b.n	25df6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   25df4:	2300      	movs	r3, #0
	}
}
   25df6:	0018      	movs	r0, r3
   25df8:	46bd      	mov	sp, r7
   25dfa:	b004      	add	sp, #16
   25dfc:	bd80      	pop	{r7, pc}
   25dfe:	46c0      	nop			; (mov r8, r8)
   25e00:	40001800 	.word	0x40001800

00025e04 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   25e04:	b580      	push	{r7, lr}
   25e06:	b084      	sub	sp, #16
   25e08:	af00      	add	r7, sp, #0
   25e0a:	0002      	movs	r2, r0
   25e0c:	1dfb      	adds	r3, r7, #7
   25e0e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25e10:	1dfb      	adds	r3, r7, #7
   25e12:	781b      	ldrb	r3, [r3, #0]
   25e14:	0018      	movs	r0, r3
   25e16:	4b0b      	ldr	r3, [pc, #44]	; (25e44 <extint_chan_is_detected+0x40>)
   25e18:	4798      	blx	r3
   25e1a:	0003      	movs	r3, r0
   25e1c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   25e1e:	1dfb      	adds	r3, r7, #7
   25e20:	781b      	ldrb	r3, [r3, #0]
   25e22:	221f      	movs	r2, #31
   25e24:	4013      	ands	r3, r2
   25e26:	2201      	movs	r2, #1
   25e28:	409a      	lsls	r2, r3
   25e2a:	0013      	movs	r3, r2
   25e2c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   25e2e:	68fb      	ldr	r3, [r7, #12]
   25e30:	691b      	ldr	r3, [r3, #16]
   25e32:	68ba      	ldr	r2, [r7, #8]
   25e34:	4013      	ands	r3, r2
   25e36:	1e5a      	subs	r2, r3, #1
   25e38:	4193      	sbcs	r3, r2
   25e3a:	b2db      	uxtb	r3, r3
}
   25e3c:	0018      	movs	r0, r3
   25e3e:	46bd      	mov	sp, r7
   25e40:	b004      	add	sp, #16
   25e42:	bd80      	pop	{r7, pc}
   25e44:	00025db9 	.word	0x00025db9

00025e48 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   25e48:	b580      	push	{r7, lr}
   25e4a:	b084      	sub	sp, #16
   25e4c:	af00      	add	r7, sp, #0
   25e4e:	0002      	movs	r2, r0
   25e50:	1dfb      	adds	r3, r7, #7
   25e52:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   25e54:	1dfb      	adds	r3, r7, #7
   25e56:	781b      	ldrb	r3, [r3, #0]
   25e58:	0018      	movs	r0, r3
   25e5a:	4b09      	ldr	r3, [pc, #36]	; (25e80 <extint_chan_clear_detected+0x38>)
   25e5c:	4798      	blx	r3
   25e5e:	0003      	movs	r3, r0
   25e60:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   25e62:	1dfb      	adds	r3, r7, #7
   25e64:	781b      	ldrb	r3, [r3, #0]
   25e66:	221f      	movs	r2, #31
   25e68:	4013      	ands	r3, r2
   25e6a:	2201      	movs	r2, #1
   25e6c:	409a      	lsls	r2, r3
   25e6e:	0013      	movs	r3, r2
   25e70:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   25e72:	68fb      	ldr	r3, [r7, #12]
   25e74:	68ba      	ldr	r2, [r7, #8]
   25e76:	611a      	str	r2, [r3, #16]
}
   25e78:	46c0      	nop			; (mov r8, r8)
   25e7a:	46bd      	mov	sp, r7
   25e7c:	b004      	add	sp, #16
   25e7e:	bd80      	pop	{r7, pc}
   25e80:	00025db9 	.word	0x00025db9

00025e84 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25e84:	b580      	push	{r7, lr}
   25e86:	b082      	sub	sp, #8
   25e88:	af00      	add	r7, sp, #0
   25e8a:	6078      	str	r0, [r7, #4]
   25e8c:	0008      	movs	r0, r1
   25e8e:	0011      	movs	r1, r2
   25e90:	1cfb      	adds	r3, r7, #3
   25e92:	1c02      	adds	r2, r0, #0
   25e94:	701a      	strb	r2, [r3, #0]
   25e96:	1cbb      	adds	r3, r7, #2
   25e98:	1c0a      	adds	r2, r1, #0
   25e9a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   25e9c:	1cbb      	adds	r3, r7, #2
   25e9e:	781b      	ldrb	r3, [r3, #0]
   25ea0:	2b00      	cmp	r3, #0
   25ea2:	d001      	beq.n	25ea8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   25ea4:	2317      	movs	r3, #23
   25ea6:	e019      	b.n	25edc <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   25ea8:	1cfb      	adds	r3, r7, #3
   25eaa:	781a      	ldrb	r2, [r3, #0]
   25eac:	4b0d      	ldr	r3, [pc, #52]	; (25ee4 <extint_register_callback+0x60>)
   25eae:	0092      	lsls	r2, r2, #2
   25eb0:	58d3      	ldr	r3, [r2, r3]
   25eb2:	2b00      	cmp	r3, #0
   25eb4:	d107      	bne.n	25ec6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   25eb6:	1cfb      	adds	r3, r7, #3
   25eb8:	781a      	ldrb	r2, [r3, #0]
   25eba:	4b0a      	ldr	r3, [pc, #40]	; (25ee4 <extint_register_callback+0x60>)
   25ebc:	0092      	lsls	r2, r2, #2
   25ebe:	6879      	ldr	r1, [r7, #4]
   25ec0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   25ec2:	2300      	movs	r3, #0
   25ec4:	e00a      	b.n	25edc <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   25ec6:	1cfb      	adds	r3, r7, #3
   25ec8:	781a      	ldrb	r2, [r3, #0]
   25eca:	4b06      	ldr	r3, [pc, #24]	; (25ee4 <extint_register_callback+0x60>)
   25ecc:	0092      	lsls	r2, r2, #2
   25ece:	58d2      	ldr	r2, [r2, r3]
   25ed0:	687b      	ldr	r3, [r7, #4]
   25ed2:	429a      	cmp	r2, r3
   25ed4:	d101      	bne.n	25eda <extint_register_callback+0x56>
		return STATUS_OK;
   25ed6:	2300      	movs	r3, #0
   25ed8:	e000      	b.n	25edc <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   25eda:	231d      	movs	r3, #29
}
   25edc:	0018      	movs	r0, r3
   25ede:	46bd      	mov	sp, r7
   25ee0:	b002      	add	sp, #8
   25ee2:	bd80      	pop	{r7, pc}
   25ee4:	20005740 	.word	0x20005740

00025ee8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25ee8:	b580      	push	{r7, lr}
   25eea:	b084      	sub	sp, #16
   25eec:	af00      	add	r7, sp, #0
   25eee:	0002      	movs	r2, r0
   25ef0:	1dfb      	adds	r3, r7, #7
   25ef2:	701a      	strb	r2, [r3, #0]
   25ef4:	1dbb      	adds	r3, r7, #6
   25ef6:	1c0a      	adds	r2, r1, #0
   25ef8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25efa:	1dbb      	adds	r3, r7, #6
   25efc:	781b      	ldrb	r3, [r3, #0]
   25efe:	2b00      	cmp	r3, #0
   25f00:	d10e      	bne.n	25f20 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25f02:	1dfb      	adds	r3, r7, #7
   25f04:	781b      	ldrb	r3, [r3, #0]
   25f06:	0018      	movs	r0, r3
   25f08:	4b08      	ldr	r3, [pc, #32]	; (25f2c <extint_chan_enable_callback+0x44>)
   25f0a:	4798      	blx	r3
   25f0c:	0003      	movs	r3, r0
   25f0e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   25f10:	1dfb      	adds	r3, r7, #7
   25f12:	781b      	ldrb	r3, [r3, #0]
   25f14:	2201      	movs	r2, #1
   25f16:	409a      	lsls	r2, r3
   25f18:	68fb      	ldr	r3, [r7, #12]
   25f1a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25f1c:	2300      	movs	r3, #0
   25f1e:	e000      	b.n	25f22 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25f20:	2317      	movs	r3, #23
}
   25f22:	0018      	movs	r0, r3
   25f24:	46bd      	mov	sp, r7
   25f26:	b004      	add	sp, #16
   25f28:	bd80      	pop	{r7, pc}
   25f2a:	46c0      	nop			; (mov r8, r8)
   25f2c:	00025db9 	.word	0x00025db9

00025f30 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   25f30:	b580      	push	{r7, lr}
   25f32:	b084      	sub	sp, #16
   25f34:	af00      	add	r7, sp, #0
   25f36:	0002      	movs	r2, r0
   25f38:	1dfb      	adds	r3, r7, #7
   25f3a:	701a      	strb	r2, [r3, #0]
   25f3c:	1dbb      	adds	r3, r7, #6
   25f3e:	1c0a      	adds	r2, r1, #0
   25f40:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   25f42:	1dbb      	adds	r3, r7, #6
   25f44:	781b      	ldrb	r3, [r3, #0]
   25f46:	2b00      	cmp	r3, #0
   25f48:	d10e      	bne.n	25f68 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   25f4a:	1dfb      	adds	r3, r7, #7
   25f4c:	781b      	ldrb	r3, [r3, #0]
   25f4e:	0018      	movs	r0, r3
   25f50:	4b08      	ldr	r3, [pc, #32]	; (25f74 <extint_chan_disable_callback+0x44>)
   25f52:	4798      	blx	r3
   25f54:	0003      	movs	r3, r0
   25f56:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   25f58:	1dfb      	adds	r3, r7, #7
   25f5a:	781b      	ldrb	r3, [r3, #0]
   25f5c:	2201      	movs	r2, #1
   25f5e:	409a      	lsls	r2, r3
   25f60:	68fb      	ldr	r3, [r7, #12]
   25f62:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   25f64:	2300      	movs	r3, #0
   25f66:	e000      	b.n	25f6a <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   25f68:	2317      	movs	r3, #23
}
   25f6a:	0018      	movs	r0, r3
   25f6c:	46bd      	mov	sp, r7
   25f6e:	b004      	add	sp, #16
   25f70:	bd80      	pop	{r7, pc}
   25f72:	46c0      	nop			; (mov r8, r8)
   25f74:	00025db9 	.word	0x00025db9

00025f78 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   25f78:	b580      	push	{r7, lr}
   25f7a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25f7c:	4b15      	ldr	r3, [pc, #84]	; (25fd4 <EIC_Handler+0x5c>)
   25f7e:	2200      	movs	r2, #0
   25f80:	701a      	strb	r2, [r3, #0]
   25f82:	e020      	b.n	25fc6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   25f84:	4b13      	ldr	r3, [pc, #76]	; (25fd4 <EIC_Handler+0x5c>)
   25f86:	781b      	ldrb	r3, [r3, #0]
   25f88:	0018      	movs	r0, r3
   25f8a:	4b13      	ldr	r3, [pc, #76]	; (25fd8 <EIC_Handler+0x60>)
   25f8c:	4798      	blx	r3
   25f8e:	1e03      	subs	r3, r0, #0
   25f90:	d013      	beq.n	25fba <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   25f92:	4b10      	ldr	r3, [pc, #64]	; (25fd4 <EIC_Handler+0x5c>)
   25f94:	781b      	ldrb	r3, [r3, #0]
   25f96:	0018      	movs	r0, r3
   25f98:	4b10      	ldr	r3, [pc, #64]	; (25fdc <EIC_Handler+0x64>)
   25f9a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   25f9c:	4b0d      	ldr	r3, [pc, #52]	; (25fd4 <EIC_Handler+0x5c>)
   25f9e:	781b      	ldrb	r3, [r3, #0]
   25fa0:	001a      	movs	r2, r3
   25fa2:	4b0f      	ldr	r3, [pc, #60]	; (25fe0 <EIC_Handler+0x68>)
   25fa4:	0092      	lsls	r2, r2, #2
   25fa6:	58d3      	ldr	r3, [r2, r3]
   25fa8:	2b00      	cmp	r3, #0
   25faa:	d006      	beq.n	25fba <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   25fac:	4b09      	ldr	r3, [pc, #36]	; (25fd4 <EIC_Handler+0x5c>)
   25fae:	781b      	ldrb	r3, [r3, #0]
   25fb0:	001a      	movs	r2, r3
   25fb2:	4b0b      	ldr	r3, [pc, #44]	; (25fe0 <EIC_Handler+0x68>)
   25fb4:	0092      	lsls	r2, r2, #2
   25fb6:	58d3      	ldr	r3, [r2, r3]
   25fb8:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   25fba:	4b06      	ldr	r3, [pc, #24]	; (25fd4 <EIC_Handler+0x5c>)
   25fbc:	781b      	ldrb	r3, [r3, #0]
   25fbe:	3301      	adds	r3, #1
   25fc0:	b2da      	uxtb	r2, r3
   25fc2:	4b04      	ldr	r3, [pc, #16]	; (25fd4 <EIC_Handler+0x5c>)
   25fc4:	701a      	strb	r2, [r3, #0]
   25fc6:	4b03      	ldr	r3, [pc, #12]	; (25fd4 <EIC_Handler+0x5c>)
   25fc8:	781b      	ldrb	r3, [r3, #0]
   25fca:	2b0f      	cmp	r3, #15
   25fcc:	d9da      	bls.n	25f84 <EIC_Handler+0xc>
			}
		}
	}
}
   25fce:	46c0      	nop			; (mov r8, r8)
   25fd0:	46bd      	mov	sp, r7
   25fd2:	bd80      	pop	{r7, pc}
   25fd4:	2000573c 	.word	0x2000573c
   25fd8:	00025e05 	.word	0x00025e05
   25fdc:	00025e49 	.word	0x00025e49
   25fe0:	20005740 	.word	0x20005740

00025fe4 <system_gclk_chan_get_config_defaults>:
{
   25fe4:	b580      	push	{r7, lr}
   25fe6:	b082      	sub	sp, #8
   25fe8:	af00      	add	r7, sp, #0
   25fea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   25fec:	687b      	ldr	r3, [r7, #4]
   25fee:	2200      	movs	r2, #0
   25ff0:	701a      	strb	r2, [r3, #0]
}
   25ff2:	46c0      	nop			; (mov r8, r8)
   25ff4:	46bd      	mov	sp, r7
   25ff6:	b002      	add	sp, #8
   25ff8:	bd80      	pop	{r7, pc}
	...

00025ffc <system_apb_clock_set_mask>:
{
   25ffc:	b580      	push	{r7, lr}
   25ffe:	b082      	sub	sp, #8
   26000:	af00      	add	r7, sp, #0
   26002:	0002      	movs	r2, r0
   26004:	6039      	str	r1, [r7, #0]
   26006:	1dfb      	adds	r3, r7, #7
   26008:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2600a:	1dfb      	adds	r3, r7, #7
   2600c:	781b      	ldrb	r3, [r3, #0]
   2600e:	2b01      	cmp	r3, #1
   26010:	d00a      	beq.n	26028 <system_apb_clock_set_mask+0x2c>
   26012:	2b02      	cmp	r3, #2
   26014:	d00f      	beq.n	26036 <system_apb_clock_set_mask+0x3a>
   26016:	2b00      	cmp	r3, #0
   26018:	d114      	bne.n	26044 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2601a:	4b0e      	ldr	r3, [pc, #56]	; (26054 <system_apb_clock_set_mask+0x58>)
   2601c:	4a0d      	ldr	r2, [pc, #52]	; (26054 <system_apb_clock_set_mask+0x58>)
   2601e:	6991      	ldr	r1, [r2, #24]
   26020:	683a      	ldr	r2, [r7, #0]
   26022:	430a      	orrs	r2, r1
   26024:	619a      	str	r2, [r3, #24]
			break;
   26026:	e00f      	b.n	26048 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26028:	4b0a      	ldr	r3, [pc, #40]	; (26054 <system_apb_clock_set_mask+0x58>)
   2602a:	4a0a      	ldr	r2, [pc, #40]	; (26054 <system_apb_clock_set_mask+0x58>)
   2602c:	69d1      	ldr	r1, [r2, #28]
   2602e:	683a      	ldr	r2, [r7, #0]
   26030:	430a      	orrs	r2, r1
   26032:	61da      	str	r2, [r3, #28]
			break;
   26034:	e008      	b.n	26048 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26036:	4b07      	ldr	r3, [pc, #28]	; (26054 <system_apb_clock_set_mask+0x58>)
   26038:	4a06      	ldr	r2, [pc, #24]	; (26054 <system_apb_clock_set_mask+0x58>)
   2603a:	6a11      	ldr	r1, [r2, #32]
   2603c:	683a      	ldr	r2, [r7, #0]
   2603e:	430a      	orrs	r2, r1
   26040:	621a      	str	r2, [r3, #32]
			break;
   26042:	e001      	b.n	26048 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26044:	2317      	movs	r3, #23
   26046:	e000      	b.n	2604a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26048:	2300      	movs	r3, #0
}
   2604a:	0018      	movs	r0, r3
   2604c:	46bd      	mov	sp, r7
   2604e:	b002      	add	sp, #8
   26050:	bd80      	pop	{r7, pc}
   26052:	46c0      	nop			; (mov r8, r8)
   26054:	40000400 	.word	0x40000400

00026058 <system_pinmux_get_config_defaults>:
{
   26058:	b580      	push	{r7, lr}
   2605a:	b082      	sub	sp, #8
   2605c:	af00      	add	r7, sp, #0
   2605e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26060:	687b      	ldr	r3, [r7, #4]
   26062:	2280      	movs	r2, #128	; 0x80
   26064:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26066:	687b      	ldr	r3, [r7, #4]
   26068:	2200      	movs	r2, #0
   2606a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2606c:	687b      	ldr	r3, [r7, #4]
   2606e:	2201      	movs	r2, #1
   26070:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26072:	687b      	ldr	r3, [r7, #4]
   26074:	2200      	movs	r2, #0
   26076:	70da      	strb	r2, [r3, #3]
}
   26078:	46c0      	nop			; (mov r8, r8)
   2607a:	46bd      	mov	sp, r7
   2607c:	b002      	add	sp, #8
   2607e:	bd80      	pop	{r7, pc}

00026080 <system_interrupt_enable>:
{
   26080:	b580      	push	{r7, lr}
   26082:	b082      	sub	sp, #8
   26084:	af00      	add	r7, sp, #0
   26086:	0002      	movs	r2, r0
   26088:	1dfb      	adds	r3, r7, #7
   2608a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2608c:	4b06      	ldr	r3, [pc, #24]	; (260a8 <system_interrupt_enable+0x28>)
   2608e:	1dfa      	adds	r2, r7, #7
   26090:	7812      	ldrb	r2, [r2, #0]
   26092:	0011      	movs	r1, r2
   26094:	221f      	movs	r2, #31
   26096:	400a      	ands	r2, r1
   26098:	2101      	movs	r1, #1
   2609a:	4091      	lsls	r1, r2
   2609c:	000a      	movs	r2, r1
   2609e:	601a      	str	r2, [r3, #0]
}
   260a0:	46c0      	nop			; (mov r8, r8)
   260a2:	46bd      	mov	sp, r7
   260a4:	b002      	add	sp, #8
   260a6:	bd80      	pop	{r7, pc}
   260a8:	e000e100 	.word	0xe000e100

000260ac <_extint_get_eic_from_channel>:
{
   260ac:	b580      	push	{r7, lr}
   260ae:	b084      	sub	sp, #16
   260b0:	af00      	add	r7, sp, #0
   260b2:	0002      	movs	r2, r0
   260b4:	1dfb      	adds	r3, r7, #7
   260b6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   260b8:	230f      	movs	r3, #15
   260ba:	18fb      	adds	r3, r7, r3
   260bc:	1dfa      	adds	r2, r7, #7
   260be:	7812      	ldrb	r2, [r2, #0]
   260c0:	0952      	lsrs	r2, r2, #5
   260c2:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   260c4:	230f      	movs	r3, #15
   260c6:	18fb      	adds	r3, r7, r3
   260c8:	781b      	ldrb	r3, [r3, #0]
   260ca:	2b00      	cmp	r3, #0
   260cc:	d10c      	bne.n	260e8 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   260ce:	4b09      	ldr	r3, [pc, #36]	; (260f4 <_extint_get_eic_from_channel+0x48>)
   260d0:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   260d2:	230f      	movs	r3, #15
   260d4:	18fb      	adds	r3, r7, r3
   260d6:	781b      	ldrb	r3, [r3, #0]
   260d8:	009b      	lsls	r3, r3, #2
   260da:	2210      	movs	r2, #16
   260dc:	4694      	mov	ip, r2
   260de:	44bc      	add	ip, r7
   260e0:	4463      	add	r3, ip
   260e2:	3b08      	subs	r3, #8
   260e4:	681b      	ldr	r3, [r3, #0]
   260e6:	e000      	b.n	260ea <_extint_get_eic_from_channel+0x3e>
		return NULL;
   260e8:	2300      	movs	r3, #0
}
   260ea:	0018      	movs	r0, r3
   260ec:	46bd      	mov	sp, r7
   260ee:	b004      	add	sp, #16
   260f0:	bd80      	pop	{r7, pc}
   260f2:	46c0      	nop			; (mov r8, r8)
   260f4:	40001800 	.word	0x40001800

000260f8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   260f8:	b580      	push	{r7, lr}
   260fa:	b082      	sub	sp, #8
   260fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   260fe:	4b0f      	ldr	r3, [pc, #60]	; (2613c <extint_is_syncing+0x44>)
   26100:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26102:	2300      	movs	r3, #0
   26104:	607b      	str	r3, [r7, #4]
   26106:	e011      	b.n	2612c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   26108:	687b      	ldr	r3, [r7, #4]
   2610a:	009b      	lsls	r3, r3, #2
   2610c:	2208      	movs	r2, #8
   2610e:	4694      	mov	ip, r2
   26110:	44bc      	add	ip, r7
   26112:	4463      	add	r3, ip
   26114:	3b08      	subs	r3, #8
   26116:	681b      	ldr	r3, [r3, #0]
   26118:	785b      	ldrb	r3, [r3, #1]
   2611a:	b2db      	uxtb	r3, r3
   2611c:	b25b      	sxtb	r3, r3
   2611e:	2b00      	cmp	r3, #0
   26120:	da01      	bge.n	26126 <extint_is_syncing+0x2e>
			return true;
   26122:	2301      	movs	r3, #1
   26124:	e006      	b.n	26134 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26126:	687b      	ldr	r3, [r7, #4]
   26128:	3301      	adds	r3, #1
   2612a:	607b      	str	r3, [r7, #4]
   2612c:	687b      	ldr	r3, [r7, #4]
   2612e:	2b00      	cmp	r3, #0
   26130:	d0ea      	beq.n	26108 <extint_is_syncing+0x10>
		}
	}
	return false;
   26132:	2300      	movs	r3, #0
}
   26134:	0018      	movs	r0, r3
   26136:	46bd      	mov	sp, r7
   26138:	b002      	add	sp, #8
   2613a:	bd80      	pop	{r7, pc}
   2613c:	40001800 	.word	0x40001800

00026140 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   26140:	b580      	push	{r7, lr}
   26142:	b084      	sub	sp, #16
   26144:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26146:	4b2d      	ldr	r3, [pc, #180]	; (261fc <_system_extint_init+0xbc>)
   26148:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2614a:	2140      	movs	r1, #64	; 0x40
   2614c:	2000      	movs	r0, #0
   2614e:	4b2c      	ldr	r3, [pc, #176]	; (26200 <_system_extint_init+0xc0>)
   26150:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26152:	003b      	movs	r3, r7
   26154:	0018      	movs	r0, r3
   26156:	4b2b      	ldr	r3, [pc, #172]	; (26204 <_system_extint_init+0xc4>)
   26158:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2615a:	003b      	movs	r3, r7
   2615c:	2200      	movs	r2, #0
   2615e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   26160:	003b      	movs	r3, r7
   26162:	0019      	movs	r1, r3
   26164:	2005      	movs	r0, #5
   26166:	4b28      	ldr	r3, [pc, #160]	; (26208 <_system_extint_init+0xc8>)
   26168:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2616a:	2005      	movs	r0, #5
   2616c:	4b27      	ldr	r3, [pc, #156]	; (2620c <_system_extint_init+0xcc>)
   2616e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26170:	2300      	movs	r3, #0
   26172:	60fb      	str	r3, [r7, #12]
   26174:	e018      	b.n	261a8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   26176:	68fb      	ldr	r3, [r7, #12]
   26178:	009b      	lsls	r3, r3, #2
   2617a:	2210      	movs	r2, #16
   2617c:	4694      	mov	ip, r2
   2617e:	44bc      	add	ip, r7
   26180:	4463      	add	r3, ip
   26182:	3b0c      	subs	r3, #12
   26184:	681a      	ldr	r2, [r3, #0]
   26186:	68fb      	ldr	r3, [r7, #12]
   26188:	009b      	lsls	r3, r3, #2
   2618a:	2110      	movs	r1, #16
   2618c:	468c      	mov	ip, r1
   2618e:	44bc      	add	ip, r7
   26190:	4463      	add	r3, ip
   26192:	3b0c      	subs	r3, #12
   26194:	681b      	ldr	r3, [r3, #0]
   26196:	781b      	ldrb	r3, [r3, #0]
   26198:	b2db      	uxtb	r3, r3
   2619a:	2101      	movs	r1, #1
   2619c:	430b      	orrs	r3, r1
   2619e:	b2db      	uxtb	r3, r3
   261a0:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   261a2:	68fb      	ldr	r3, [r7, #12]
   261a4:	3301      	adds	r3, #1
   261a6:	60fb      	str	r3, [r7, #12]
   261a8:	68fb      	ldr	r3, [r7, #12]
   261aa:	2b00      	cmp	r3, #0
   261ac:	d0e3      	beq.n	26176 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   261ae:	46c0      	nop			; (mov r8, r8)
   261b0:	4b17      	ldr	r3, [pc, #92]	; (26210 <_system_extint_init+0xd0>)
   261b2:	4798      	blx	r3
   261b4:	1e03      	subs	r3, r0, #0
   261b6:	d1fb      	bne.n	261b0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   261b8:	230b      	movs	r3, #11
   261ba:	18fb      	adds	r3, r7, r3
   261bc:	2200      	movs	r2, #0
   261be:	701a      	strb	r2, [r3, #0]
   261c0:	e00d      	b.n	261de <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   261c2:	230b      	movs	r3, #11
   261c4:	18fb      	adds	r3, r7, r3
   261c6:	781a      	ldrb	r2, [r3, #0]
   261c8:	4b12      	ldr	r3, [pc, #72]	; (26214 <_system_extint_init+0xd4>)
   261ca:	0092      	lsls	r2, r2, #2
   261cc:	2100      	movs	r1, #0
   261ce:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   261d0:	230b      	movs	r3, #11
   261d2:	18fb      	adds	r3, r7, r3
   261d4:	781a      	ldrb	r2, [r3, #0]
   261d6:	230b      	movs	r3, #11
   261d8:	18fb      	adds	r3, r7, r3
   261da:	3201      	adds	r2, #1
   261dc:	701a      	strb	r2, [r3, #0]
   261de:	230b      	movs	r3, #11
   261e0:	18fb      	adds	r3, r7, r3
   261e2:	781b      	ldrb	r3, [r3, #0]
   261e4:	2b0f      	cmp	r3, #15
   261e6:	d9ec      	bls.n	261c2 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   261e8:	2004      	movs	r0, #4
   261ea:	4b0b      	ldr	r3, [pc, #44]	; (26218 <_system_extint_init+0xd8>)
   261ec:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   261ee:	4b0b      	ldr	r3, [pc, #44]	; (2621c <_system_extint_init+0xdc>)
   261f0:	4798      	blx	r3
}
   261f2:	46c0      	nop			; (mov r8, r8)
   261f4:	46bd      	mov	sp, r7
   261f6:	b004      	add	sp, #16
   261f8:	bd80      	pop	{r7, pc}
   261fa:	46c0      	nop			; (mov r8, r8)
   261fc:	40001800 	.word	0x40001800
   26200:	00025ffd 	.word	0x00025ffd
   26204:	00025fe5 	.word	0x00025fe5
   26208:	0002986d 	.word	0x0002986d
   2620c:	000298b1 	.word	0x000298b1
   26210:	000260f9 	.word	0x000260f9
   26214:	20005740 	.word	0x20005740
   26218:	00026081 	.word	0x00026081
   2621c:	00026221 	.word	0x00026221

00026220 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   26220:	b580      	push	{r7, lr}
   26222:	b082      	sub	sp, #8
   26224:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26226:	4b15      	ldr	r3, [pc, #84]	; (2627c <_extint_enable+0x5c>)
   26228:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2622a:	2300      	movs	r3, #0
   2622c:	607b      	str	r3, [r7, #4]
   2622e:	e018      	b.n	26262 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   26230:	687b      	ldr	r3, [r7, #4]
   26232:	009b      	lsls	r3, r3, #2
   26234:	2208      	movs	r2, #8
   26236:	4694      	mov	ip, r2
   26238:	44bc      	add	ip, r7
   2623a:	4463      	add	r3, ip
   2623c:	3b08      	subs	r3, #8
   2623e:	681a      	ldr	r2, [r3, #0]
   26240:	687b      	ldr	r3, [r7, #4]
   26242:	009b      	lsls	r3, r3, #2
   26244:	2108      	movs	r1, #8
   26246:	468c      	mov	ip, r1
   26248:	44bc      	add	ip, r7
   2624a:	4463      	add	r3, ip
   2624c:	3b08      	subs	r3, #8
   2624e:	681b      	ldr	r3, [r3, #0]
   26250:	781b      	ldrb	r3, [r3, #0]
   26252:	b2db      	uxtb	r3, r3
   26254:	2102      	movs	r1, #2
   26256:	430b      	orrs	r3, r1
   26258:	b2db      	uxtb	r3, r3
   2625a:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2625c:	687b      	ldr	r3, [r7, #4]
   2625e:	3301      	adds	r3, #1
   26260:	607b      	str	r3, [r7, #4]
   26262:	687b      	ldr	r3, [r7, #4]
   26264:	2b00      	cmp	r3, #0
   26266:	d0e3      	beq.n	26230 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   26268:	46c0      	nop			; (mov r8, r8)
   2626a:	4b05      	ldr	r3, [pc, #20]	; (26280 <_extint_enable+0x60>)
   2626c:	4798      	blx	r3
   2626e:	1e03      	subs	r3, r0, #0
   26270:	d1fb      	bne.n	2626a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   26272:	46c0      	nop			; (mov r8, r8)
   26274:	46bd      	mov	sp, r7
   26276:	b002      	add	sp, #8
   26278:	bd80      	pop	{r7, pc}
   2627a:	46c0      	nop			; (mov r8, r8)
   2627c:	40001800 	.word	0x40001800
   26280:	000260f9 	.word	0x000260f9

00026284 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26284:	b580      	push	{r7, lr}
   26286:	b082      	sub	sp, #8
   26288:	af00      	add	r7, sp, #0
   2628a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   2628c:	687b      	ldr	r3, [r7, #4]
   2628e:	2200      	movs	r2, #0
   26290:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   26292:	687b      	ldr	r3, [r7, #4]
   26294:	2200      	movs	r2, #0
   26296:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   26298:	687b      	ldr	r3, [r7, #4]
   2629a:	2201      	movs	r2, #1
   2629c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   2629e:	687b      	ldr	r3, [r7, #4]
   262a0:	2201      	movs	r2, #1
   262a2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   262a4:	687b      	ldr	r3, [r7, #4]
   262a6:	2200      	movs	r2, #0
   262a8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   262aa:	687b      	ldr	r3, [r7, #4]
   262ac:	2202      	movs	r2, #2
   262ae:	72da      	strb	r2, [r3, #11]
}
   262b0:	46c0      	nop			; (mov r8, r8)
   262b2:	46bd      	mov	sp, r7
   262b4:	b002      	add	sp, #8
   262b6:	bd80      	pop	{r7, pc}

000262b8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   262b8:	b580      	push	{r7, lr}
   262ba:	b086      	sub	sp, #24
   262bc:	af00      	add	r7, sp, #0
   262be:	0002      	movs	r2, r0
   262c0:	6039      	str	r1, [r7, #0]
   262c2:	1dfb      	adds	r3, r7, #7
   262c4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   262c6:	2308      	movs	r3, #8
   262c8:	18fb      	adds	r3, r7, r3
   262ca:	0018      	movs	r0, r3
   262cc:	4b36      	ldr	r3, [pc, #216]	; (263a8 <extint_chan_set_config+0xf0>)
   262ce:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   262d0:	683b      	ldr	r3, [r7, #0]
   262d2:	685b      	ldr	r3, [r3, #4]
   262d4:	b2da      	uxtb	r2, r3
   262d6:	2308      	movs	r3, #8
   262d8:	18fb      	adds	r3, r7, r3
   262da:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   262dc:	2308      	movs	r3, #8
   262de:	18fb      	adds	r3, r7, r3
   262e0:	2200      	movs	r2, #0
   262e2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   262e4:	683b      	ldr	r3, [r7, #0]
   262e6:	7a1a      	ldrb	r2, [r3, #8]
   262e8:	2308      	movs	r3, #8
   262ea:	18fb      	adds	r3, r7, r3
   262ec:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   262ee:	683b      	ldr	r3, [r7, #0]
   262f0:	681b      	ldr	r3, [r3, #0]
   262f2:	b2db      	uxtb	r3, r3
   262f4:	2208      	movs	r2, #8
   262f6:	18ba      	adds	r2, r7, r2
   262f8:	0011      	movs	r1, r2
   262fa:	0018      	movs	r0, r3
   262fc:	4b2b      	ldr	r3, [pc, #172]	; (263ac <extint_chan_set_config+0xf4>)
   262fe:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   26300:	1dfb      	adds	r3, r7, #7
   26302:	781b      	ldrb	r3, [r3, #0]
   26304:	0018      	movs	r0, r3
   26306:	4b2a      	ldr	r3, [pc, #168]	; (263b0 <extint_chan_set_config+0xf8>)
   26308:	4798      	blx	r3
   2630a:	0003      	movs	r3, r0
   2630c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2630e:	1dfb      	adds	r3, r7, #7
   26310:	781b      	ldrb	r3, [r3, #0]
   26312:	2207      	movs	r2, #7
   26314:	4013      	ands	r3, r2
   26316:	009b      	lsls	r3, r3, #2
   26318:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2631a:	683b      	ldr	r3, [r7, #0]
   2631c:	7adb      	ldrb	r3, [r3, #11]
   2631e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   26320:	683b      	ldr	r3, [r7, #0]
   26322:	7a9b      	ldrb	r3, [r3, #10]
   26324:	2b00      	cmp	r3, #0
   26326:	d003      	beq.n	26330 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   26328:	697b      	ldr	r3, [r7, #20]
   2632a:	2208      	movs	r2, #8
   2632c:	4313      	orrs	r3, r2
   2632e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   26330:	1dfb      	adds	r3, r7, #7
   26332:	781b      	ldrb	r3, [r3, #0]
   26334:	08db      	lsrs	r3, r3, #3
   26336:	b2db      	uxtb	r3, r3
   26338:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2633a:	1dfb      	adds	r3, r7, #7
   2633c:	781b      	ldrb	r3, [r3, #0]
   2633e:	08db      	lsrs	r3, r3, #3
   26340:	b2db      	uxtb	r3, r3
   26342:	001a      	movs	r2, r3
   26344:	693b      	ldr	r3, [r7, #16]
   26346:	3206      	adds	r2, #6
   26348:	0092      	lsls	r2, r2, #2
   2634a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   2634c:	210f      	movs	r1, #15
   2634e:	68fa      	ldr	r2, [r7, #12]
   26350:	4091      	lsls	r1, r2
   26352:	000a      	movs	r2, r1
   26354:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26356:	401a      	ands	r2, r3
			(new_config << config_pos);
   26358:	6979      	ldr	r1, [r7, #20]
   2635a:	68fb      	ldr	r3, [r7, #12]
   2635c:	4099      	lsls	r1, r3
   2635e:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26360:	431a      	orrs	r2, r3
   26362:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26364:	693b      	ldr	r3, [r7, #16]
   26366:	1d82      	adds	r2, r0, #6
   26368:	0092      	lsls	r2, r2, #2
   2636a:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   2636c:	683b      	ldr	r3, [r7, #0]
   2636e:	7a5b      	ldrb	r3, [r3, #9]
   26370:	2b00      	cmp	r3, #0
   26372:	d00a      	beq.n	2638a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   26374:	693b      	ldr	r3, [r7, #16]
   26376:	695a      	ldr	r2, [r3, #20]
   26378:	1dfb      	adds	r3, r7, #7
   2637a:	781b      	ldrb	r3, [r3, #0]
   2637c:	2101      	movs	r1, #1
   2637e:	4099      	lsls	r1, r3
   26380:	000b      	movs	r3, r1
   26382:	431a      	orrs	r2, r3
   26384:	693b      	ldr	r3, [r7, #16]
   26386:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   26388:	e00a      	b.n	263a0 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2638a:	693b      	ldr	r3, [r7, #16]
   2638c:	695b      	ldr	r3, [r3, #20]
   2638e:	1dfa      	adds	r2, r7, #7
   26390:	7812      	ldrb	r2, [r2, #0]
   26392:	2101      	movs	r1, #1
   26394:	4091      	lsls	r1, r2
   26396:	000a      	movs	r2, r1
   26398:	43d2      	mvns	r2, r2
   2639a:	401a      	ands	r2, r3
   2639c:	693b      	ldr	r3, [r7, #16]
   2639e:	615a      	str	r2, [r3, #20]
}
   263a0:	46c0      	nop			; (mov r8, r8)
   263a2:	46bd      	mov	sp, r7
   263a4:	b006      	add	sp, #24
   263a6:	bd80      	pop	{r7, pc}
   263a8:	00026059 	.word	0x00026059
   263ac:	00029bcd 	.word	0x00029bcd
   263b0:	000260ad 	.word	0x000260ad

000263b4 <system_pinmux_get_config_defaults>:
{
   263b4:	b580      	push	{r7, lr}
   263b6:	b082      	sub	sp, #8
   263b8:	af00      	add	r7, sp, #0
   263ba:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   263bc:	687b      	ldr	r3, [r7, #4]
   263be:	2280      	movs	r2, #128	; 0x80
   263c0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   263c2:	687b      	ldr	r3, [r7, #4]
   263c4:	2200      	movs	r2, #0
   263c6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   263c8:	687b      	ldr	r3, [r7, #4]
   263ca:	2201      	movs	r2, #1
   263cc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   263ce:	687b      	ldr	r3, [r7, #4]
   263d0:	2200      	movs	r2, #0
   263d2:	70da      	strb	r2, [r3, #3]
}
   263d4:	46c0      	nop			; (mov r8, r8)
   263d6:	46bd      	mov	sp, r7
   263d8:	b002      	add	sp, #8
   263da:	bd80      	pop	{r7, pc}

000263dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   263dc:	b580      	push	{r7, lr}
   263de:	b084      	sub	sp, #16
   263e0:	af00      	add	r7, sp, #0
   263e2:	0002      	movs	r2, r0
   263e4:	6039      	str	r1, [r7, #0]
   263e6:	1dfb      	adds	r3, r7, #7
   263e8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   263ea:	230c      	movs	r3, #12
   263ec:	18fb      	adds	r3, r7, r3
   263ee:	0018      	movs	r0, r3
   263f0:	4b10      	ldr	r3, [pc, #64]	; (26434 <port_pin_set_config+0x58>)
   263f2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   263f4:	230c      	movs	r3, #12
   263f6:	18fb      	adds	r3, r7, r3
   263f8:	2280      	movs	r2, #128	; 0x80
   263fa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   263fc:	683b      	ldr	r3, [r7, #0]
   263fe:	781a      	ldrb	r2, [r3, #0]
   26400:	230c      	movs	r3, #12
   26402:	18fb      	adds	r3, r7, r3
   26404:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   26406:	683b      	ldr	r3, [r7, #0]
   26408:	785a      	ldrb	r2, [r3, #1]
   2640a:	230c      	movs	r3, #12
   2640c:	18fb      	adds	r3, r7, r3
   2640e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   26410:	683b      	ldr	r3, [r7, #0]
   26412:	789a      	ldrb	r2, [r3, #2]
   26414:	230c      	movs	r3, #12
   26416:	18fb      	adds	r3, r7, r3
   26418:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2641a:	230c      	movs	r3, #12
   2641c:	18fa      	adds	r2, r7, r3
   2641e:	1dfb      	adds	r3, r7, #7
   26420:	781b      	ldrb	r3, [r3, #0]
   26422:	0011      	movs	r1, r2
   26424:	0018      	movs	r0, r3
   26426:	4b04      	ldr	r3, [pc, #16]	; (26438 <port_pin_set_config+0x5c>)
   26428:	4798      	blx	r3
}
   2642a:	46c0      	nop			; (mov r8, r8)
   2642c:	46bd      	mov	sp, r7
   2642e:	b004      	add	sp, #16
   26430:	bd80      	pop	{r7, pc}
   26432:	46c0      	nop			; (mov r8, r8)
   26434:	000263b5 	.word	0x000263b5
   26438:	00029bcd 	.word	0x00029bcd

0002643c <system_gclk_chan_get_config_defaults>:
{
   2643c:	b580      	push	{r7, lr}
   2643e:	b082      	sub	sp, #8
   26440:	af00      	add	r7, sp, #0
   26442:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26444:	687b      	ldr	r3, [r7, #4]
   26446:	2200      	movs	r2, #0
   26448:	701a      	strb	r2, [r3, #0]
}
   2644a:	46c0      	nop			; (mov r8, r8)
   2644c:	46bd      	mov	sp, r7
   2644e:	b002      	add	sp, #8
   26450:	bd80      	pop	{r7, pc}
	...

00026454 <system_apb_clock_set_mask>:
{
   26454:	b580      	push	{r7, lr}
   26456:	b082      	sub	sp, #8
   26458:	af00      	add	r7, sp, #0
   2645a:	0002      	movs	r2, r0
   2645c:	6039      	str	r1, [r7, #0]
   2645e:	1dfb      	adds	r3, r7, #7
   26460:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26462:	1dfb      	adds	r3, r7, #7
   26464:	781b      	ldrb	r3, [r3, #0]
   26466:	2b01      	cmp	r3, #1
   26468:	d00a      	beq.n	26480 <system_apb_clock_set_mask+0x2c>
   2646a:	2b02      	cmp	r3, #2
   2646c:	d00f      	beq.n	2648e <system_apb_clock_set_mask+0x3a>
   2646e:	2b00      	cmp	r3, #0
   26470:	d114      	bne.n	2649c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26472:	4b0e      	ldr	r3, [pc, #56]	; (264ac <system_apb_clock_set_mask+0x58>)
   26474:	4a0d      	ldr	r2, [pc, #52]	; (264ac <system_apb_clock_set_mask+0x58>)
   26476:	6991      	ldr	r1, [r2, #24]
   26478:	683a      	ldr	r2, [r7, #0]
   2647a:	430a      	orrs	r2, r1
   2647c:	619a      	str	r2, [r3, #24]
			break;
   2647e:	e00f      	b.n	264a0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26480:	4b0a      	ldr	r3, [pc, #40]	; (264ac <system_apb_clock_set_mask+0x58>)
   26482:	4a0a      	ldr	r2, [pc, #40]	; (264ac <system_apb_clock_set_mask+0x58>)
   26484:	69d1      	ldr	r1, [r2, #28]
   26486:	683a      	ldr	r2, [r7, #0]
   26488:	430a      	orrs	r2, r1
   2648a:	61da      	str	r2, [r3, #28]
			break;
   2648c:	e008      	b.n	264a0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2648e:	4b07      	ldr	r3, [pc, #28]	; (264ac <system_apb_clock_set_mask+0x58>)
   26490:	4a06      	ldr	r2, [pc, #24]	; (264ac <system_apb_clock_set_mask+0x58>)
   26492:	6a11      	ldr	r1, [r2, #32]
   26494:	683a      	ldr	r2, [r7, #0]
   26496:	430a      	orrs	r2, r1
   26498:	621a      	str	r2, [r3, #32]
			break;
   2649a:	e001      	b.n	264a0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2649c:	2317      	movs	r3, #23
   2649e:	e000      	b.n	264a2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   264a0:	2300      	movs	r3, #0
}
   264a2:	0018      	movs	r0, r3
   264a4:	46bd      	mov	sp, r7
   264a6:	b002      	add	sp, #8
   264a8:	bd80      	pop	{r7, pc}
   264aa:	46c0      	nop			; (mov r8, r8)
   264ac:	40000400 	.word	0x40000400

000264b0 <system_interrupt_enable>:
{
   264b0:	b580      	push	{r7, lr}
   264b2:	b082      	sub	sp, #8
   264b4:	af00      	add	r7, sp, #0
   264b6:	0002      	movs	r2, r0
   264b8:	1dfb      	adds	r3, r7, #7
   264ba:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   264bc:	4b06      	ldr	r3, [pc, #24]	; (264d8 <system_interrupt_enable+0x28>)
   264be:	1dfa      	adds	r2, r7, #7
   264c0:	7812      	ldrb	r2, [r2, #0]
   264c2:	0011      	movs	r1, r2
   264c4:	221f      	movs	r2, #31
   264c6:	400a      	ands	r2, r1
   264c8:	2101      	movs	r1, #1
   264ca:	4091      	lsls	r1, r2
   264cc:	000a      	movs	r2, r1
   264ce:	601a      	str	r2, [r3, #0]
}
   264d0:	46c0      	nop			; (mov r8, r8)
   264d2:	46bd      	mov	sp, r7
   264d4:	b002      	add	sp, #8
   264d6:	bd80      	pop	{r7, pc}
   264d8:	e000e100 	.word	0xe000e100

000264dc <system_interrupt_disable>:
{
   264dc:	b580      	push	{r7, lr}
   264de:	b082      	sub	sp, #8
   264e0:	af00      	add	r7, sp, #0
   264e2:	0002      	movs	r2, r0
   264e4:	1dfb      	adds	r3, r7, #7
   264e6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   264e8:	4a07      	ldr	r2, [pc, #28]	; (26508 <system_interrupt_disable+0x2c>)
   264ea:	1dfb      	adds	r3, r7, #7
   264ec:	781b      	ldrb	r3, [r3, #0]
   264ee:	0019      	movs	r1, r3
   264f0:	231f      	movs	r3, #31
   264f2:	400b      	ands	r3, r1
   264f4:	2101      	movs	r1, #1
   264f6:	4099      	lsls	r1, r3
   264f8:	000b      	movs	r3, r1
   264fa:	0019      	movs	r1, r3
   264fc:	2380      	movs	r3, #128	; 0x80
   264fe:	50d1      	str	r1, [r2, r3]
}
   26500:	46c0      	nop			; (mov r8, r8)
   26502:	46bd      	mov	sp, r7
   26504:	b002      	add	sp, #8
   26506:	bd80      	pop	{r7, pc}
   26508:	e000e100 	.word	0xe000e100

0002650c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   2650c:	b580      	push	{r7, lr}
   2650e:	b084      	sub	sp, #16
   26510:	af00      	add	r7, sp, #0
   26512:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26514:	687b      	ldr	r3, [r7, #4]
   26516:	681b      	ldr	r3, [r3, #0]
   26518:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2651a:	68fb      	ldr	r3, [r7, #12]
   2651c:	7a9b      	ldrb	r3, [r3, #10]
   2651e:	b2db      	uxtb	r3, r3
   26520:	b25b      	sxtb	r3, r3
   26522:	2b00      	cmp	r3, #0
   26524:	da01      	bge.n	2652a <rtc_calendar_is_syncing+0x1e>
                return true;
   26526:	2301      	movs	r3, #1
   26528:	e000      	b.n	2652c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2652a:	2300      	movs	r3, #0
}
   2652c:	0018      	movs	r0, r3
   2652e:	46bd      	mov	sp, r7
   26530:	b004      	add	sp, #16
   26532:	bd80      	pop	{r7, pc}

00026534 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   26534:	b580      	push	{r7, lr}
   26536:	b084      	sub	sp, #16
   26538:	af00      	add	r7, sp, #0
   2653a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2653c:	687b      	ldr	r3, [r7, #4]
   2653e:	681b      	ldr	r3, [r3, #0]
   26540:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   26542:	2003      	movs	r0, #3
   26544:	4b0a      	ldr	r3, [pc, #40]	; (26570 <rtc_calendar_enable+0x3c>)
   26546:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26548:	46c0      	nop			; (mov r8, r8)
   2654a:	687b      	ldr	r3, [r7, #4]
   2654c:	0018      	movs	r0, r3
   2654e:	4b09      	ldr	r3, [pc, #36]	; (26574 <rtc_calendar_enable+0x40>)
   26550:	4798      	blx	r3
   26552:	1e03      	subs	r3, r0, #0
   26554:	d1f9      	bne.n	2654a <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   26556:	68fb      	ldr	r3, [r7, #12]
   26558:	881b      	ldrh	r3, [r3, #0]
   2655a:	b29b      	uxth	r3, r3
   2655c:	2202      	movs	r2, #2
   2655e:	4313      	orrs	r3, r2
   26560:	b29a      	uxth	r2, r3
   26562:	68fb      	ldr	r3, [r7, #12]
   26564:	801a      	strh	r2, [r3, #0]
}
   26566:	46c0      	nop			; (mov r8, r8)
   26568:	46bd      	mov	sp, r7
   2656a:	b004      	add	sp, #16
   2656c:	bd80      	pop	{r7, pc}
   2656e:	46c0      	nop			; (mov r8, r8)
   26570:	000264b1 	.word	0x000264b1
   26574:	0002650d 	.word	0x0002650d

00026578 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   26578:	b580      	push	{r7, lr}
   2657a:	b084      	sub	sp, #16
   2657c:	af00      	add	r7, sp, #0
   2657e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26580:	687b      	ldr	r3, [r7, #4]
   26582:	681b      	ldr	r3, [r3, #0]
   26584:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   26586:	2003      	movs	r0, #3
   26588:	4b0d      	ldr	r3, [pc, #52]	; (265c0 <rtc_calendar_disable+0x48>)
   2658a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   2658c:	46c0      	nop			; (mov r8, r8)
   2658e:	687b      	ldr	r3, [r7, #4]
   26590:	0018      	movs	r0, r3
   26592:	4b0c      	ldr	r3, [pc, #48]	; (265c4 <rtc_calendar_disable+0x4c>)
   26594:	4798      	blx	r3
   26596:	1e03      	subs	r3, r0, #0
   26598:	d1f9      	bne.n	2658e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   2659a:	68fb      	ldr	r3, [r7, #12]
   2659c:	22c1      	movs	r2, #193	; 0xc1
   2659e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   265a0:	68fb      	ldr	r3, [r7, #12]
   265a2:	22c1      	movs	r2, #193	; 0xc1
   265a4:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   265a6:	68fb      	ldr	r3, [r7, #12]
   265a8:	881b      	ldrh	r3, [r3, #0]
   265aa:	b29b      	uxth	r3, r3
   265ac:	2202      	movs	r2, #2
   265ae:	4393      	bics	r3, r2
   265b0:	b29a      	uxth	r2, r3
   265b2:	68fb      	ldr	r3, [r7, #12]
   265b4:	801a      	strh	r2, [r3, #0]
}
   265b6:	46c0      	nop			; (mov r8, r8)
   265b8:	46bd      	mov	sp, r7
   265ba:	b004      	add	sp, #16
   265bc:	bd80      	pop	{r7, pc}
   265be:	46c0      	nop			; (mov r8, r8)
   265c0:	000264dd 	.word	0x000264dd
   265c4:	0002650d 	.word	0x0002650d

000265c8 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   265c8:	b580      	push	{r7, lr}
   265ca:	b084      	sub	sp, #16
   265cc:	af00      	add	r7, sp, #0
   265ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   265d0:	687b      	ldr	r3, [r7, #4]
   265d2:	681b      	ldr	r3, [r3, #0]
   265d4:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   265d6:	687b      	ldr	r3, [r7, #4]
   265d8:	0018      	movs	r0, r3
   265da:	4b0d      	ldr	r3, [pc, #52]	; (26610 <rtc_calendar_reset+0x48>)
   265dc:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   265de:	687b      	ldr	r3, [r7, #4]
   265e0:	2200      	movs	r2, #0
   265e2:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   265e4:	687b      	ldr	r3, [r7, #4]
   265e6:	2200      	movs	r2, #0
   265e8:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   265ea:	46c0      	nop			; (mov r8, r8)
   265ec:	687b      	ldr	r3, [r7, #4]
   265ee:	0018      	movs	r0, r3
   265f0:	4b08      	ldr	r3, [pc, #32]	; (26614 <rtc_calendar_reset+0x4c>)
   265f2:	4798      	blx	r3
   265f4:	1e03      	subs	r3, r0, #0
   265f6:	d1f9      	bne.n	265ec <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   265f8:	68fb      	ldr	r3, [r7, #12]
   265fa:	881b      	ldrh	r3, [r3, #0]
   265fc:	b29b      	uxth	r3, r3
   265fe:	2201      	movs	r2, #1
   26600:	4313      	orrs	r3, r2
   26602:	b29a      	uxth	r2, r3
   26604:	68fb      	ldr	r3, [r7, #12]
   26606:	801a      	strh	r2, [r3, #0]
}
   26608:	46c0      	nop			; (mov r8, r8)
   2660a:	46bd      	mov	sp, r7
   2660c:	b004      	add	sp, #16
   2660e:	bd80      	pop	{r7, pc}
   26610:	00026579 	.word	0x00026579
   26614:	0002650d 	.word	0x0002650d

00026618 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   26618:	b580      	push	{r7, lr}
   2661a:	b084      	sub	sp, #16
   2661c:	af00      	add	r7, sp, #0
   2661e:	6078      	str	r0, [r7, #4]
   26620:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   26622:	683b      	ldr	r3, [r7, #0]
   26624:	88db      	ldrh	r3, [r3, #6]
   26626:	001a      	movs	r2, r3
   26628:	687b      	ldr	r3, [r7, #4]
   2662a:	88db      	ldrh	r3, [r3, #6]
   2662c:	1ad3      	subs	r3, r2, r3
   2662e:	069b      	lsls	r3, r3, #26
   26630:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   26632:	683b      	ldr	r3, [r7, #0]
   26634:	795b      	ldrb	r3, [r3, #5]
   26636:	059b      	lsls	r3, r3, #22
   26638:	001a      	movs	r2, r3
   2663a:	68fb      	ldr	r3, [r7, #12]
   2663c:	4313      	orrs	r3, r2
   2663e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   26640:	683b      	ldr	r3, [r7, #0]
   26642:	791b      	ldrb	r3, [r3, #4]
   26644:	045b      	lsls	r3, r3, #17
   26646:	001a      	movs	r2, r3
   26648:	68fb      	ldr	r3, [r7, #12]
   2664a:	4313      	orrs	r3, r2
   2664c:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   2664e:	683b      	ldr	r3, [r7, #0]
   26650:	789b      	ldrb	r3, [r3, #2]
   26652:	031b      	lsls	r3, r3, #12
   26654:	001a      	movs	r2, r3
   26656:	68fb      	ldr	r3, [r7, #12]
   26658:	4313      	orrs	r3, r2
   2665a:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   2665c:	687b      	ldr	r3, [r7, #4]
   2665e:	791b      	ldrb	r3, [r3, #4]
   26660:	2201      	movs	r2, #1
   26662:	4053      	eors	r3, r2
   26664:	b2db      	uxtb	r3, r3
   26666:	2b00      	cmp	r3, #0
   26668:	d008      	beq.n	2667c <rtc_calendar_time_to_register_value+0x64>
   2666a:	683b      	ldr	r3, [r7, #0]
   2666c:	78db      	ldrb	r3, [r3, #3]
   2666e:	2b00      	cmp	r3, #0
   26670:	d004      	beq.n	2667c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   26672:	68fb      	ldr	r3, [r7, #12]
   26674:	2280      	movs	r2, #128	; 0x80
   26676:	0252      	lsls	r2, r2, #9
   26678:	4313      	orrs	r3, r2
   2667a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   2667c:	683b      	ldr	r3, [r7, #0]
   2667e:	785b      	ldrb	r3, [r3, #1]
   26680:	019b      	lsls	r3, r3, #6
   26682:	001a      	movs	r2, r3
   26684:	68fb      	ldr	r3, [r7, #12]
   26686:	4313      	orrs	r3, r2
   26688:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   2668a:	683b      	ldr	r3, [r7, #0]
   2668c:	781b      	ldrb	r3, [r3, #0]
   2668e:	001a      	movs	r2, r3
   26690:	68fb      	ldr	r3, [r7, #12]
   26692:	4313      	orrs	r3, r2
   26694:	60fb      	str	r3, [r7, #12]

	return register_value;
   26696:	68fb      	ldr	r3, [r7, #12]
}
   26698:	0018      	movs	r0, r3
   2669a:	46bd      	mov	sp, r7
   2669c:	b004      	add	sp, #16
   2669e:	bd80      	pop	{r7, pc}

000266a0 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   266a0:	b580      	push	{r7, lr}
   266a2:	b084      	sub	sp, #16
   266a4:	af00      	add	r7, sp, #0
   266a6:	60f8      	str	r0, [r7, #12]
   266a8:	60b9      	str	r1, [r7, #8]
   266aa:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   266ac:	68bb      	ldr	r3, [r7, #8]
   266ae:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   266b0:	b29a      	uxth	r2, r3
   266b2:	68fb      	ldr	r3, [r7, #12]
   266b4:	88db      	ldrh	r3, [r3, #6]
   266b6:	18d3      	adds	r3, r2, r3
   266b8:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   266ba:	687b      	ldr	r3, [r7, #4]
   266bc:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   266be:	68bb      	ldr	r3, [r7, #8]
   266c0:	0d9b      	lsrs	r3, r3, #22
   266c2:	b2db      	uxtb	r3, r3
   266c4:	220f      	movs	r2, #15
   266c6:	4013      	ands	r3, r2
   266c8:	b2da      	uxtb	r2, r3
   266ca:	687b      	ldr	r3, [r7, #4]
   266cc:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   266ce:	68bb      	ldr	r3, [r7, #8]
   266d0:	0c5b      	lsrs	r3, r3, #17
   266d2:	b2db      	uxtb	r3, r3
   266d4:	221f      	movs	r2, #31
   266d6:	4013      	ands	r3, r2
   266d8:	b2da      	uxtb	r2, r3
   266da:	687b      	ldr	r3, [r7, #4]
   266dc:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   266de:	68fb      	ldr	r3, [r7, #12]
   266e0:	791b      	ldrb	r3, [r3, #4]
   266e2:	2b00      	cmp	r3, #0
   266e4:	d008      	beq.n	266f8 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   266e6:	68bb      	ldr	r3, [r7, #8]
   266e8:	0b1b      	lsrs	r3, r3, #12
   266ea:	b2db      	uxtb	r3, r3
   266ec:	221f      	movs	r2, #31
   266ee:	4013      	ands	r3, r2
   266f0:	b2da      	uxtb	r2, r3
   266f2:	687b      	ldr	r3, [r7, #4]
   266f4:	709a      	strb	r2, [r3, #2]
   266f6:	e010      	b.n	2671a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   266f8:	68bb      	ldr	r3, [r7, #8]
   266fa:	0b1b      	lsrs	r3, r3, #12
   266fc:	b2db      	uxtb	r3, r3
   266fe:	220f      	movs	r2, #15
   26700:	4013      	ands	r3, r2
   26702:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   26704:	687b      	ldr	r3, [r7, #4]
   26706:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   26708:	68ba      	ldr	r2, [r7, #8]
   2670a:	2380      	movs	r3, #128	; 0x80
   2670c:	025b      	lsls	r3, r3, #9
   2670e:	4013      	ands	r3, r2
   26710:	1e5a      	subs	r2, r3, #1
   26712:	4193      	sbcs	r3, r2
   26714:	b2da      	uxtb	r2, r3
   26716:	687b      	ldr	r3, [r7, #4]
   26718:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2671a:	68bb      	ldr	r3, [r7, #8]
   2671c:	099b      	lsrs	r3, r3, #6
   2671e:	b2db      	uxtb	r3, r3
   26720:	223f      	movs	r2, #63	; 0x3f
   26722:	4013      	ands	r3, r2
   26724:	b2da      	uxtb	r2, r3
   26726:	687b      	ldr	r3, [r7, #4]
   26728:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2672a:	68bb      	ldr	r3, [r7, #8]
   2672c:	b2db      	uxtb	r3, r3
   2672e:	223f      	movs	r2, #63	; 0x3f
   26730:	4013      	ands	r3, r2
   26732:	b2da      	uxtb	r2, r3
   26734:	687b      	ldr	r3, [r7, #4]
   26736:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26738:	46c0      	nop			; (mov r8, r8)
   2673a:	46bd      	mov	sp, r7
   2673c:	b004      	add	sp, #16
   2673e:	bd80      	pop	{r7, pc}

00026740 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   26740:	b580      	push	{r7, lr}
   26742:	b084      	sub	sp, #16
   26744:	af00      	add	r7, sp, #0
   26746:	6078      	str	r0, [r7, #4]
   26748:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2674a:	687b      	ldr	r3, [r7, #4]
   2674c:	681b      	ldr	r3, [r3, #0]
   2674e:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   26750:	683b      	ldr	r3, [r7, #0]
   26752:	881a      	ldrh	r2, [r3, #0]
   26754:	230e      	movs	r3, #14
   26756:	18fb      	adds	r3, r7, r3
   26758:	2108      	movs	r1, #8
   2675a:	430a      	orrs	r2, r1
   2675c:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   2675e:	683b      	ldr	r3, [r7, #0]
   26760:	791b      	ldrb	r3, [r3, #4]
   26762:	2201      	movs	r2, #1
   26764:	4053      	eors	r3, r2
   26766:	b2db      	uxtb	r3, r3
   26768:	2b00      	cmp	r3, #0
   2676a:	d007      	beq.n	2677c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   2676c:	230e      	movs	r3, #14
   2676e:	18fb      	adds	r3, r7, r3
   26770:	220e      	movs	r2, #14
   26772:	18ba      	adds	r2, r7, r2
   26774:	8812      	ldrh	r2, [r2, #0]
   26776:	2140      	movs	r1, #64	; 0x40
   26778:	430a      	orrs	r2, r1
   2677a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   2677c:	683b      	ldr	r3, [r7, #0]
   2677e:	789b      	ldrb	r3, [r3, #2]
   26780:	2b00      	cmp	r3, #0
   26782:	d007      	beq.n	26794 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   26784:	230e      	movs	r3, #14
   26786:	18fb      	adds	r3, r7, r3
   26788:	220e      	movs	r2, #14
   2678a:	18ba      	adds	r2, r7, r2
   2678c:	8812      	ldrh	r2, [r2, #0]
   2678e:	2180      	movs	r1, #128	; 0x80
   26790:	430a      	orrs	r2, r1
   26792:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   26794:	68bb      	ldr	r3, [r7, #8]
   26796:	220e      	movs	r2, #14
   26798:	18ba      	adds	r2, r7, r2
   2679a:	8812      	ldrh	r2, [r2, #0]
   2679c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   2679e:	683b      	ldr	r3, [r7, #0]
   267a0:	78db      	ldrb	r3, [r3, #3]
   267a2:	2b00      	cmp	r3, #0
   267a4:	d008      	beq.n	267b8 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   267a6:	68bb      	ldr	r3, [r7, #8]
   267a8:	885b      	ldrh	r3, [r3, #2]
   267aa:	b29b      	uxth	r3, r3
   267ac:	2280      	movs	r2, #128	; 0x80
   267ae:	01d2      	lsls	r2, r2, #7
   267b0:	4313      	orrs	r3, r2
   267b2:	b29a      	uxth	r2, r3
   267b4:	68bb      	ldr	r3, [r7, #8]
   267b6:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   267b8:	230d      	movs	r3, #13
   267ba:	18fb      	adds	r3, r7, r3
   267bc:	2200      	movs	r2, #0
   267be:	701a      	strb	r2, [r3, #0]
   267c0:	e017      	b.n	267f2 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   267c2:	230d      	movs	r3, #13
   267c4:	18fb      	adds	r3, r7, r3
   267c6:	781a      	ldrb	r2, [r3, #0]
   267c8:	0013      	movs	r3, r2
   267ca:	009b      	lsls	r3, r3, #2
   267cc:	189b      	adds	r3, r3, r2
   267ce:	005b      	lsls	r3, r3, #1
   267d0:	3308      	adds	r3, #8
   267d2:	683a      	ldr	r2, [r7, #0]
   267d4:	18d1      	adds	r1, r2, r3
   267d6:	230d      	movs	r3, #13
   267d8:	18fb      	adds	r3, r7, r3
   267da:	781a      	ldrb	r2, [r3, #0]
   267dc:	687b      	ldr	r3, [r7, #4]
   267de:	0018      	movs	r0, r3
   267e0:	4b08      	ldr	r3, [pc, #32]	; (26804 <_rtc_calendar_set_config+0xc4>)
   267e2:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   267e4:	230d      	movs	r3, #13
   267e6:	18fb      	adds	r3, r7, r3
   267e8:	781a      	ldrb	r2, [r3, #0]
   267ea:	230d      	movs	r3, #13
   267ec:	18fb      	adds	r3, r7, r3
   267ee:	3201      	adds	r2, #1
   267f0:	701a      	strb	r2, [r3, #0]
   267f2:	230d      	movs	r3, #13
   267f4:	18fb      	adds	r3, r7, r3
   267f6:	781b      	ldrb	r3, [r3, #0]
   267f8:	2b00      	cmp	r3, #0
   267fa:	d0e2      	beq.n	267c2 <_rtc_calendar_set_config+0x82>
	}
}
   267fc:	46c0      	nop			; (mov r8, r8)
   267fe:	46bd      	mov	sp, r7
   26800:	b004      	add	sp, #16
   26802:	bd80      	pop	{r7, pc}
   26804:	00026929 	.word	0x00026929

00026808 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   26808:	b580      	push	{r7, lr}
   2680a:	b086      	sub	sp, #24
   2680c:	af00      	add	r7, sp, #0
   2680e:	60f8      	str	r0, [r7, #12]
   26810:	60b9      	str	r1, [r7, #8]
   26812:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   26814:	68fb      	ldr	r3, [r7, #12]
   26816:	68ba      	ldr	r2, [r7, #8]
   26818:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2681a:	2120      	movs	r1, #32
   2681c:	2000      	movs	r0, #0
   2681e:	4b18      	ldr	r3, [pc, #96]	; (26880 <rtc_calendar_init+0x78>)
   26820:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26822:	2314      	movs	r3, #20
   26824:	18fb      	adds	r3, r7, r3
   26826:	0018      	movs	r0, r3
   26828:	4b16      	ldr	r3, [pc, #88]	; (26884 <rtc_calendar_init+0x7c>)
   2682a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   2682c:	2314      	movs	r3, #20
   2682e:	18fb      	adds	r3, r7, r3
   26830:	2202      	movs	r2, #2
   26832:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   26834:	2314      	movs	r3, #20
   26836:	18fb      	adds	r3, r7, r3
   26838:	0019      	movs	r1, r3
   2683a:	2004      	movs	r0, #4
   2683c:	4b12      	ldr	r3, [pc, #72]	; (26888 <rtc_calendar_init+0x80>)
   2683e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   26840:	2004      	movs	r0, #4
   26842:	4b12      	ldr	r3, [pc, #72]	; (2688c <rtc_calendar_init+0x84>)
   26844:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   26846:	68fb      	ldr	r3, [r7, #12]
   26848:	0018      	movs	r0, r3
   2684a:	4b11      	ldr	r3, [pc, #68]	; (26890 <rtc_calendar_init+0x88>)
   2684c:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   2684e:	687b      	ldr	r3, [r7, #4]
   26850:	791a      	ldrb	r2, [r3, #4]
   26852:	68fb      	ldr	r3, [r7, #12]
   26854:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   26856:	687b      	ldr	r3, [r7, #4]
   26858:	78da      	ldrb	r2, [r3, #3]
   2685a:	68fb      	ldr	r3, [r7, #12]
   2685c:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   2685e:	687b      	ldr	r3, [r7, #4]
   26860:	88da      	ldrh	r2, [r3, #6]
   26862:	68fb      	ldr	r3, [r7, #12]
   26864:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   26866:	4b0b      	ldr	r3, [pc, #44]	; (26894 <rtc_calendar_init+0x8c>)
   26868:	68fa      	ldr	r2, [r7, #12]
   2686a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   2686c:	687a      	ldr	r2, [r7, #4]
   2686e:	68fb      	ldr	r3, [r7, #12]
   26870:	0011      	movs	r1, r2
   26872:	0018      	movs	r0, r3
   26874:	4b08      	ldr	r3, [pc, #32]	; (26898 <rtc_calendar_init+0x90>)
   26876:	4798      	blx	r3
}
   26878:	46c0      	nop			; (mov r8, r8)
   2687a:	46bd      	mov	sp, r7
   2687c:	b006      	add	sp, #24
   2687e:	bd80      	pop	{r7, pc}
   26880:	00026455 	.word	0x00026455
   26884:	0002643d 	.word	0x0002643d
   26888:	0002986d 	.word	0x0002986d
   2688c:	000298b1 	.word	0x000298b1
   26890:	000265c9 	.word	0x000265c9
   26894:	20005780 	.word	0x20005780
   26898:	00026741 	.word	0x00026741

0002689c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   2689c:	b580      	push	{r7, lr}
   2689e:	b084      	sub	sp, #16
   268a0:	af00      	add	r7, sp, #0
   268a2:	6078      	str	r0, [r7, #4]
   268a4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   268a6:	687b      	ldr	r3, [r7, #4]
   268a8:	681b      	ldr	r3, [r3, #0]
   268aa:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   268ac:	687b      	ldr	r3, [r7, #4]
   268ae:	795b      	ldrb	r3, [r3, #5]
   268b0:	2201      	movs	r2, #1
   268b2:	4053      	eors	r3, r2
   268b4:	b2db      	uxtb	r3, r3
   268b6:	2b00      	cmp	r3, #0
   268b8:	d00a      	beq.n	268d0 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   268ba:	68fb      	ldr	r3, [r7, #12]
   268bc:	4a16      	ldr	r2, [pc, #88]	; (26918 <rtc_calendar_get_time+0x7c>)
   268be:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   268c0:	46c0      	nop			; (mov r8, r8)
   268c2:	687b      	ldr	r3, [r7, #4]
   268c4:	0018      	movs	r0, r3
   268c6:	4b15      	ldr	r3, [pc, #84]	; (2691c <rtc_calendar_get_time+0x80>)
   268c8:	4798      	blx	r3
   268ca:	1e03      	subs	r3, r0, #0
   268cc:	d1f9      	bne.n	268c2 <rtc_calendar_get_time+0x26>
   268ce:	e016      	b.n	268fe <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   268d0:	68fb      	ldr	r3, [r7, #12]
   268d2:	885b      	ldrh	r3, [r3, #2]
   268d4:	b29b      	uxth	r3, r3
   268d6:	001a      	movs	r2, r3
   268d8:	2380      	movs	r3, #128	; 0x80
   268da:	01db      	lsls	r3, r3, #7
   268dc:	4013      	ands	r3, r2
   268de:	d10e      	bne.n	268fe <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   268e0:	68fb      	ldr	r3, [r7, #12]
   268e2:	885b      	ldrh	r3, [r3, #2]
   268e4:	b29b      	uxth	r3, r3
   268e6:	4a0e      	ldr	r2, [pc, #56]	; (26920 <rtc_calendar_get_time+0x84>)
   268e8:	4313      	orrs	r3, r2
   268ea:	b29a      	uxth	r2, r3
   268ec:	68fb      	ldr	r3, [r7, #12]
   268ee:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   268f0:	46c0      	nop			; (mov r8, r8)
   268f2:	687b      	ldr	r3, [r7, #4]
   268f4:	0018      	movs	r0, r3
   268f6:	4b09      	ldr	r3, [pc, #36]	; (2691c <rtc_calendar_get_time+0x80>)
   268f8:	4798      	blx	r3
   268fa:	1e03      	subs	r3, r0, #0
   268fc:	d1f9      	bne.n	268f2 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   268fe:	68fb      	ldr	r3, [r7, #12]
   26900:	691b      	ldr	r3, [r3, #16]
   26902:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   26904:	683a      	ldr	r2, [r7, #0]
   26906:	68b9      	ldr	r1, [r7, #8]
   26908:	687b      	ldr	r3, [r7, #4]
   2690a:	0018      	movs	r0, r3
   2690c:	4b05      	ldr	r3, [pc, #20]	; (26924 <rtc_calendar_get_time+0x88>)
   2690e:	4798      	blx	r3
}
   26910:	46c0      	nop			; (mov r8, r8)
   26912:	46bd      	mov	sp, r7
   26914:	b004      	add	sp, #16
   26916:	bd80      	pop	{r7, pc}
   26918:	ffff8000 	.word	0xffff8000
   2691c:	0002650d 	.word	0x0002650d
   26920:	ffffc000 	.word	0xffffc000
   26924:	000266a1 	.word	0x000266a1

00026928 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   26928:	b580      	push	{r7, lr}
   2692a:	b086      	sub	sp, #24
   2692c:	af00      	add	r7, sp, #0
   2692e:	60f8      	str	r0, [r7, #12]
   26930:	60b9      	str	r1, [r7, #8]
   26932:	1dfb      	adds	r3, r7, #7
   26934:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26936:	68fb      	ldr	r3, [r7, #12]
   26938:	681b      	ldr	r3, [r3, #0]
   2693a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   2693c:	1dfb      	adds	r3, r7, #7
   2693e:	781b      	ldrb	r3, [r3, #0]
   26940:	2b01      	cmp	r3, #1
   26942:	d901      	bls.n	26948 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   26944:	2317      	movs	r3, #23
   26946:	e021      	b.n	2698c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   26948:	68ba      	ldr	r2, [r7, #8]
   2694a:	68fb      	ldr	r3, [r7, #12]
   2694c:	0011      	movs	r1, r2
   2694e:	0018      	movs	r0, r3
   26950:	4b10      	ldr	r3, [pc, #64]	; (26994 <rtc_calendar_set_alarm+0x6c>)
   26952:	4798      	blx	r3
   26954:	0003      	movs	r3, r0
   26956:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   26958:	46c0      	nop			; (mov r8, r8)
   2695a:	68fb      	ldr	r3, [r7, #12]
   2695c:	0018      	movs	r0, r3
   2695e:	4b0e      	ldr	r3, [pc, #56]	; (26998 <rtc_calendar_set_alarm+0x70>)
   26960:	4798      	blx	r3
   26962:	1e03      	subs	r3, r0, #0
   26964:	d1f9      	bne.n	2695a <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   26966:	1dfb      	adds	r3, r7, #7
   26968:	781a      	ldrb	r2, [r3, #0]
   2696a:	697b      	ldr	r3, [r7, #20]
   2696c:	3203      	adds	r2, #3
   2696e:	00d2      	lsls	r2, r2, #3
   26970:	6939      	ldr	r1, [r7, #16]
   26972:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   26974:	1dfb      	adds	r3, r7, #7
   26976:	781b      	ldrb	r3, [r3, #0]
   26978:	68ba      	ldr	r2, [r7, #8]
   2697a:	7a11      	ldrb	r1, [r2, #8]
   2697c:	697a      	ldr	r2, [r7, #20]
   2697e:	3303      	adds	r3, #3
   26980:	00db      	lsls	r3, r3, #3
   26982:	18d3      	adds	r3, r2, r3
   26984:	3304      	adds	r3, #4
   26986:	1c0a      	adds	r2, r1, #0
   26988:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   2698a:	2300      	movs	r3, #0
}
   2698c:	0018      	movs	r0, r3
   2698e:	46bd      	mov	sp, r7
   26990:	b006      	add	sp, #24
   26992:	bd80      	pop	{r7, pc}
   26994:	00026619 	.word	0x00026619
   26998:	0002650d 	.word	0x0002650d

0002699c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   2699c:	b580      	push	{r7, lr}
   2699e:	b086      	sub	sp, #24
   269a0:	af00      	add	r7, sp, #0
   269a2:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   269a4:	4b28      	ldr	r3, [pc, #160]	; (26a48 <_rtc_interrupt_handler+0xac>)
   269a6:	687a      	ldr	r2, [r7, #4]
   269a8:	0092      	lsls	r2, r2, #2
   269aa:	58d3      	ldr	r3, [r2, r3]
   269ac:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   269ae:	697b      	ldr	r3, [r7, #20]
   269b0:	681b      	ldr	r3, [r3, #0]
   269b2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   269b4:	230e      	movs	r3, #14
   269b6:	18fb      	adds	r3, r7, r3
   269b8:	697a      	ldr	r2, [r7, #20]
   269ba:	8a52      	ldrh	r2, [r2, #18]
   269bc:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   269be:	697b      	ldr	r3, [r7, #20]
   269c0:	8a1b      	ldrh	r3, [r3, #16]
   269c2:	b29a      	uxth	r2, r3
   269c4:	230e      	movs	r3, #14
   269c6:	18fb      	adds	r3, r7, r3
   269c8:	210e      	movs	r1, #14
   269ca:	1879      	adds	r1, r7, r1
   269cc:	8809      	ldrh	r1, [r1, #0]
   269ce:	400a      	ands	r2, r1
   269d0:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   269d2:	693b      	ldr	r3, [r7, #16]
   269d4:	7a1b      	ldrb	r3, [r3, #8]
   269d6:	b2da      	uxtb	r2, r3
   269d8:	230c      	movs	r3, #12
   269da:	18fb      	adds	r3, r7, r3
   269dc:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   269de:	693b      	ldr	r3, [r7, #16]
   269e0:	79db      	ldrb	r3, [r3, #7]
   269e2:	b2db      	uxtb	r3, r3
   269e4:	b29a      	uxth	r2, r3
   269e6:	230c      	movs	r3, #12
   269e8:	18fb      	adds	r3, r7, r3
   269ea:	210c      	movs	r1, #12
   269ec:	1879      	adds	r1, r7, r1
   269ee:	8809      	ldrh	r1, [r1, #0]
   269f0:	400a      	ands	r2, r1
   269f2:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   269f4:	230c      	movs	r3, #12
   269f6:	18fb      	adds	r3, r7, r3
   269f8:	881b      	ldrh	r3, [r3, #0]
   269fa:	2280      	movs	r2, #128	; 0x80
   269fc:	4013      	ands	r3, r2
   269fe:	d00c      	beq.n	26a1a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   26a00:	230e      	movs	r3, #14
   26a02:	18fb      	adds	r3, r7, r3
   26a04:	881b      	ldrh	r3, [r3, #0]
   26a06:	2202      	movs	r2, #2
   26a08:	4013      	ands	r3, r2
   26a0a:	d002      	beq.n	26a12 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   26a0c:	697b      	ldr	r3, [r7, #20]
   26a0e:	68db      	ldr	r3, [r3, #12]
   26a10:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   26a12:	693b      	ldr	r3, [r7, #16]
   26a14:	2280      	movs	r2, #128	; 0x80
   26a16:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   26a18:	e011      	b.n	26a3e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   26a1a:	230c      	movs	r3, #12
   26a1c:	18fb      	adds	r3, r7, r3
   26a1e:	881b      	ldrh	r3, [r3, #0]
   26a20:	2201      	movs	r2, #1
   26a22:	4013      	ands	r3, r2
   26a24:	d00b      	beq.n	26a3e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   26a26:	230e      	movs	r3, #14
   26a28:	18fb      	adds	r3, r7, r3
   26a2a:	881b      	ldrh	r3, [r3, #0]
   26a2c:	2201      	movs	r2, #1
   26a2e:	4013      	ands	r3, r2
   26a30:	d002      	beq.n	26a38 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   26a32:	697b      	ldr	r3, [r7, #20]
   26a34:	689b      	ldr	r3, [r3, #8]
   26a36:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   26a38:	693b      	ldr	r3, [r7, #16]
   26a3a:	2201      	movs	r2, #1
   26a3c:	721a      	strb	r2, [r3, #8]
}
   26a3e:	46c0      	nop			; (mov r8, r8)
   26a40:	46bd      	mov	sp, r7
   26a42:	b006      	add	sp, #24
   26a44:	bd80      	pop	{r7, pc}
   26a46:	46c0      	nop			; (mov r8, r8)
   26a48:	20005780 	.word	0x20005780

00026a4c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   26a4c:	b580      	push	{r7, lr}
   26a4e:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   26a50:	2000      	movs	r0, #0
   26a52:	4b02      	ldr	r3, [pc, #8]	; (26a5c <RTC_Handler+0x10>)
   26a54:	4798      	blx	r3
}
   26a56:	46c0      	nop			; (mov r8, r8)
   26a58:	46bd      	mov	sp, r7
   26a5a:	bd80      	pop	{r7, pc}
   26a5c:	0002699d 	.word	0x0002699d

00026a60 <system_gclk_chan_get_config_defaults>:
{
   26a60:	b580      	push	{r7, lr}
   26a62:	b082      	sub	sp, #8
   26a64:	af00      	add	r7, sp, #0
   26a66:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26a68:	687b      	ldr	r3, [r7, #4]
   26a6a:	2200      	movs	r2, #0
   26a6c:	701a      	strb	r2, [r3, #0]
}
   26a6e:	46c0      	nop			; (mov r8, r8)
   26a70:	46bd      	mov	sp, r7
   26a72:	b002      	add	sp, #8
   26a74:	bd80      	pop	{r7, pc}

00026a76 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   26a76:	b5f0      	push	{r4, r5, r6, r7, lr}
   26a78:	b08d      	sub	sp, #52	; 0x34
   26a7a:	af00      	add	r7, sp, #0
   26a7c:	60b8      	str	r0, [r7, #8]
   26a7e:	60f9      	str	r1, [r7, #12]
   26a80:	603a      	str	r2, [r7, #0]
   26a82:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   26a84:	2300      	movs	r3, #0
   26a86:	2400      	movs	r4, #0
   26a88:	623b      	str	r3, [r7, #32]
   26a8a:	627c      	str	r4, [r7, #36]	; 0x24
   26a8c:	2300      	movs	r3, #0
   26a8e:	2400      	movs	r4, #0
   26a90:	61bb      	str	r3, [r7, #24]
   26a92:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   26a94:	233f      	movs	r3, #63	; 0x3f
   26a96:	62fb      	str	r3, [r7, #44]	; 0x2c
   26a98:	e053      	b.n	26b42 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   26a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26a9c:	3b20      	subs	r3, #32
   26a9e:	2b00      	cmp	r3, #0
   26aa0:	db04      	blt.n	26aac <long_division+0x36>
   26aa2:	2201      	movs	r2, #1
   26aa4:	409a      	lsls	r2, r3
   26aa6:	0013      	movs	r3, r2
   26aa8:	617b      	str	r3, [r7, #20]
   26aaa:	e00b      	b.n	26ac4 <long_division+0x4e>
   26aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26aae:	2220      	movs	r2, #32
   26ab0:	1ad3      	subs	r3, r2, r3
   26ab2:	2201      	movs	r2, #1
   26ab4:	40da      	lsrs	r2, r3
   26ab6:	0013      	movs	r3, r2
   26ab8:	2100      	movs	r1, #0
   26aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   26abc:	4091      	lsls	r1, r2
   26abe:	000a      	movs	r2, r1
   26ac0:	4313      	orrs	r3, r2
   26ac2:	617b      	str	r3, [r7, #20]
   26ac4:	2201      	movs	r2, #1
   26ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26ac8:	409a      	lsls	r2, r3
   26aca:	0013      	movs	r3, r2
   26acc:	613b      	str	r3, [r7, #16]

		r = r << 1;
   26ace:	69bb      	ldr	r3, [r7, #24]
   26ad0:	69fc      	ldr	r4, [r7, #28]
   26ad2:	18db      	adds	r3, r3, r3
   26ad4:	4164      	adcs	r4, r4
   26ad6:	61bb      	str	r3, [r7, #24]
   26ad8:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   26ada:	68bb      	ldr	r3, [r7, #8]
   26adc:	693a      	ldr	r2, [r7, #16]
   26ade:	401a      	ands	r2, r3
   26ae0:	0015      	movs	r5, r2
   26ae2:	68fb      	ldr	r3, [r7, #12]
   26ae4:	697a      	ldr	r2, [r7, #20]
   26ae6:	401a      	ands	r2, r3
   26ae8:	0016      	movs	r6, r2
   26aea:	002b      	movs	r3, r5
   26aec:	4333      	orrs	r3, r6
   26aee:	d007      	beq.n	26b00 <long_division+0x8a>
			r |= 0x01;
   26af0:	69bb      	ldr	r3, [r7, #24]
   26af2:	2201      	movs	r2, #1
   26af4:	4313      	orrs	r3, r2
   26af6:	61bb      	str	r3, [r7, #24]
   26af8:	69fb      	ldr	r3, [r7, #28]
   26afa:	2200      	movs	r2, #0
   26afc:	4313      	orrs	r3, r2
   26afe:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   26b00:	687a      	ldr	r2, [r7, #4]
   26b02:	69fb      	ldr	r3, [r7, #28]
   26b04:	429a      	cmp	r2, r3
   26b06:	d819      	bhi.n	26b3c <long_division+0xc6>
   26b08:	687a      	ldr	r2, [r7, #4]
   26b0a:	69fb      	ldr	r3, [r7, #28]
   26b0c:	429a      	cmp	r2, r3
   26b0e:	d103      	bne.n	26b18 <long_division+0xa2>
   26b10:	683a      	ldr	r2, [r7, #0]
   26b12:	69bb      	ldr	r3, [r7, #24]
   26b14:	429a      	cmp	r2, r3
   26b16:	d811      	bhi.n	26b3c <long_division+0xc6>
			r = r - d;
   26b18:	69b9      	ldr	r1, [r7, #24]
   26b1a:	69fa      	ldr	r2, [r7, #28]
   26b1c:	683b      	ldr	r3, [r7, #0]
   26b1e:	687c      	ldr	r4, [r7, #4]
   26b20:	1ac9      	subs	r1, r1, r3
   26b22:	41a2      	sbcs	r2, r4
   26b24:	000b      	movs	r3, r1
   26b26:	0014      	movs	r4, r2
   26b28:	61bb      	str	r3, [r7, #24]
   26b2a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   26b2c:	6a3a      	ldr	r2, [r7, #32]
   26b2e:	693b      	ldr	r3, [r7, #16]
   26b30:	4313      	orrs	r3, r2
   26b32:	623b      	str	r3, [r7, #32]
   26b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26b36:	697b      	ldr	r3, [r7, #20]
   26b38:	4313      	orrs	r3, r2
   26b3a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   26b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26b3e:	3b01      	subs	r3, #1
   26b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   26b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26b44:	2b00      	cmp	r3, #0
   26b46:	daa8      	bge.n	26a9a <long_division+0x24>
		}
	}

	return q;
   26b48:	6a3b      	ldr	r3, [r7, #32]
   26b4a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   26b4c:	0018      	movs	r0, r3
   26b4e:	0021      	movs	r1, r4
   26b50:	46bd      	mov	sp, r7
   26b52:	b00d      	add	sp, #52	; 0x34
   26b54:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026b56 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   26b56:	b580      	push	{r7, lr}
   26b58:	b086      	sub	sp, #24
   26b5a:	af00      	add	r7, sp, #0
   26b5c:	60f8      	str	r0, [r7, #12]
   26b5e:	60b9      	str	r1, [r7, #8]
   26b60:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   26b62:	2316      	movs	r3, #22
   26b64:	18fb      	adds	r3, r7, r3
   26b66:	2200      	movs	r2, #0
   26b68:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   26b6a:	68bb      	ldr	r3, [r7, #8]
   26b6c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   26b6e:	68bb      	ldr	r3, [r7, #8]
   26b70:	085a      	lsrs	r2, r3, #1
   26b72:	68fb      	ldr	r3, [r7, #12]
   26b74:	429a      	cmp	r2, r3
   26b76:	d201      	bcs.n	26b7c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26b78:	2340      	movs	r3, #64	; 0x40
   26b7a:	e026      	b.n	26bca <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   26b7c:	68bb      	ldr	r3, [r7, #8]
   26b7e:	085b      	lsrs	r3, r3, #1
   26b80:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   26b82:	e00a      	b.n	26b9a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   26b84:	693a      	ldr	r2, [r7, #16]
   26b86:	68fb      	ldr	r3, [r7, #12]
   26b88:	1ad3      	subs	r3, r2, r3
   26b8a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   26b8c:	2316      	movs	r3, #22
   26b8e:	18fb      	adds	r3, r7, r3
   26b90:	881a      	ldrh	r2, [r3, #0]
   26b92:	2316      	movs	r3, #22
   26b94:	18fb      	adds	r3, r7, r3
   26b96:	3201      	adds	r2, #1
   26b98:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   26b9a:	693a      	ldr	r2, [r7, #16]
   26b9c:	68fb      	ldr	r3, [r7, #12]
   26b9e:	429a      	cmp	r2, r3
   26ba0:	d2f0      	bcs.n	26b84 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   26ba2:	2316      	movs	r3, #22
   26ba4:	18fb      	adds	r3, r7, r3
   26ba6:	2216      	movs	r2, #22
   26ba8:	18ba      	adds	r2, r7, r2
   26baa:	8812      	ldrh	r2, [r2, #0]
   26bac:	3a01      	subs	r2, #1
   26bae:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   26bb0:	2316      	movs	r3, #22
   26bb2:	18fb      	adds	r3, r7, r3
   26bb4:	881b      	ldrh	r3, [r3, #0]
   26bb6:	2bff      	cmp	r3, #255	; 0xff
   26bb8:	d901      	bls.n	26bbe <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26bba:	2340      	movs	r3, #64	; 0x40
   26bbc:	e005      	b.n	26bca <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   26bbe:	687b      	ldr	r3, [r7, #4]
   26bc0:	2216      	movs	r2, #22
   26bc2:	18ba      	adds	r2, r7, r2
   26bc4:	8812      	ldrh	r2, [r2, #0]
   26bc6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   26bc8:	2300      	movs	r3, #0
	}
}
   26bca:	0018      	movs	r0, r3
   26bcc:	46bd      	mov	sp, r7
   26bce:	b006      	add	sp, #24
   26bd0:	bd80      	pop	{r7, pc}
	...

00026bd4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   26bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   26bd6:	b0a1      	sub	sp, #132	; 0x84
   26bd8:	af00      	add	r7, sp, #0
   26bda:	64f8      	str	r0, [r7, #76]	; 0x4c
   26bdc:	64b9      	str	r1, [r7, #72]	; 0x48
   26bde:	647a      	str	r2, [r7, #68]	; 0x44
   26be0:	2243      	movs	r2, #67	; 0x43
   26be2:	18ba      	adds	r2, r7, r2
   26be4:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   26be6:	2300      	movs	r3, #0
   26be8:	2400      	movs	r4, #0
   26bea:	673b      	str	r3, [r7, #112]	; 0x70
   26bec:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   26bee:	2300      	movs	r3, #0
   26bf0:	2400      	movs	r4, #0
   26bf2:	66bb      	str	r3, [r7, #104]	; 0x68
   26bf4:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   26bf6:	2300      	movs	r3, #0
   26bf8:	2400      	movs	r4, #0
   26bfa:	67bb      	str	r3, [r7, #120]	; 0x78
   26bfc:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   26bfe:	2300      	movs	r3, #0
   26c00:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   26c02:	2358      	movs	r3, #88	; 0x58
   26c04:	2240      	movs	r2, #64	; 0x40
   26c06:	4694      	mov	ip, r2
   26c08:	44bc      	add	ip, r7
   26c0a:	4463      	add	r3, ip
   26c0c:	781a      	ldrb	r2, [r3, #0]
   26c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26c10:	435a      	muls	r2, r3
   26c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26c14:	429a      	cmp	r2, r3
   26c16:	d901      	bls.n	26c1c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26c18:	2340      	movs	r3, #64	; 0x40
   26c1a:	e0b3      	b.n	26d84 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   26c1c:	2343      	movs	r3, #67	; 0x43
   26c1e:	18fb      	adds	r3, r7, r3
   26c20:	781b      	ldrb	r3, [r3, #0]
   26c22:	2b00      	cmp	r3, #0
   26c24:	d13d      	bne.n	26ca2 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   26c26:	2358      	movs	r3, #88	; 0x58
   26c28:	2240      	movs	r2, #64	; 0x40
   26c2a:	4694      	mov	ip, r2
   26c2c:	44bc      	add	ip, r7
   26c2e:	4463      	add	r3, ip
   26c30:	781b      	ldrb	r3, [r3, #0]
   26c32:	b2db      	uxtb	r3, r3
   26c34:	613b      	str	r3, [r7, #16]
   26c36:	2300      	movs	r3, #0
   26c38:	617b      	str	r3, [r7, #20]
   26c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26c3c:	60bb      	str	r3, [r7, #8]
   26c3e:	2300      	movs	r3, #0
   26c40:	60fb      	str	r3, [r7, #12]
   26c42:	4c52      	ldr	r4, [pc, #328]	; (26d8c <_sercom_get_async_baud_val+0x1b8>)
   26c44:	68ba      	ldr	r2, [r7, #8]
   26c46:	68fb      	ldr	r3, [r7, #12]
   26c48:	6938      	ldr	r0, [r7, #16]
   26c4a:	6979      	ldr	r1, [r7, #20]
   26c4c:	47a0      	blx	r4
   26c4e:	0003      	movs	r3, r0
   26c50:	000c      	movs	r4, r1
   26c52:	001b      	movs	r3, r3
   26c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   26c56:	2300      	movs	r3, #0
   26c58:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   26c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26c5c:	603b      	str	r3, [r7, #0]
   26c5e:	2300      	movs	r3, #0
   26c60:	607b      	str	r3, [r7, #4]
   26c62:	6db8      	ldr	r0, [r7, #88]	; 0x58
   26c64:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   26c66:	683a      	ldr	r2, [r7, #0]
   26c68:	687b      	ldr	r3, [r7, #4]
   26c6a:	4c49      	ldr	r4, [pc, #292]	; (26d90 <_sercom_get_async_baud_val+0x1bc>)
   26c6c:	47a0      	blx	r4
   26c6e:	0003      	movs	r3, r0
   26c70:	000c      	movs	r4, r1
   26c72:	673b      	str	r3, [r7, #112]	; 0x70
   26c74:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   26c76:	2100      	movs	r1, #0
   26c78:	2201      	movs	r2, #1
   26c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   26c7c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   26c7e:	1ac9      	subs	r1, r1, r3
   26c80:	41a2      	sbcs	r2, r4
   26c82:	000b      	movs	r3, r1
   26c84:	0014      	movs	r4, r2
   26c86:	66bb      	str	r3, [r7, #104]	; 0x68
   26c88:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   26c8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26c8c:	0c1b      	lsrs	r3, r3, #16
   26c8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   26c90:	0416      	lsls	r6, r2, #16
   26c92:	431e      	orrs	r6, r3
   26c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   26c96:	041d      	lsls	r5, r3, #16
   26c98:	0033      	movs	r3, r6
   26c9a:	67bb      	str	r3, [r7, #120]	; 0x78
   26c9c:	2300      	movs	r3, #0
   26c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   26ca0:	e06a      	b.n	26d78 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   26ca2:	2343      	movs	r3, #67	; 0x43
   26ca4:	18fb      	adds	r3, r7, r3
   26ca6:	781b      	ldrb	r3, [r3, #0]
   26ca8:	2b01      	cmp	r3, #1
   26caa:	d165      	bne.n	26d78 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   26cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   26cae:	633b      	str	r3, [r7, #48]	; 0x30
   26cb0:	2300      	movs	r3, #0
   26cb2:	637b      	str	r3, [r7, #52]	; 0x34
   26cb4:	2358      	movs	r3, #88	; 0x58
   26cb6:	2240      	movs	r2, #64	; 0x40
   26cb8:	4694      	mov	ip, r2
   26cba:	44bc      	add	ip, r7
   26cbc:	4463      	add	r3, ip
   26cbe:	781b      	ldrb	r3, [r3, #0]
   26cc0:	b2db      	uxtb	r3, r3
   26cc2:	62bb      	str	r3, [r7, #40]	; 0x28
   26cc4:	2300      	movs	r3, #0
   26cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   26cc8:	4c30      	ldr	r4, [pc, #192]	; (26d8c <_sercom_get_async_baud_val+0x1b8>)
   26cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   26ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   26cce:	6b38      	ldr	r0, [r7, #48]	; 0x30
   26cd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
   26cd2:	47a0      	blx	r4
   26cd4:	0003      	movs	r3, r0
   26cd6:	000c      	movs	r4, r1
   26cd8:	65bb      	str	r3, [r7, #88]	; 0x58
   26cda:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   26cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26cde:	623b      	str	r3, [r7, #32]
   26ce0:	2300      	movs	r3, #0
   26ce2:	627b      	str	r3, [r7, #36]	; 0x24
   26ce4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26ce6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26ce8:	001a      	movs	r2, r3
   26cea:	0023      	movs	r3, r4
   26cec:	6a38      	ldr	r0, [r7, #32]
   26cee:	6a79      	ldr	r1, [r7, #36]	; 0x24
   26cf0:	4c27      	ldr	r4, [pc, #156]	; (26d90 <_sercom_get_async_baud_val+0x1bc>)
   26cf2:	47a0      	blx	r4
   26cf4:	0003      	movs	r3, r0
   26cf6:	000c      	movs	r4, r1
   26cf8:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   26cfa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   26cfc:	2380      	movs	r3, #128	; 0x80
   26cfe:	019b      	lsls	r3, r3, #6
   26d00:	429a      	cmp	r2, r3
   26d02:	d901      	bls.n	26d08 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   26d04:	2340      	movs	r3, #64	; 0x40
   26d06:	e03d      	b.n	26d84 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   26d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26d0a:	61bb      	str	r3, [r7, #24]
   26d0c:	2300      	movs	r3, #0
   26d0e:	61fb      	str	r3, [r7, #28]
   26d10:	69b9      	ldr	r1, [r7, #24]
   26d12:	69fa      	ldr	r2, [r7, #28]
   26d14:	000b      	movs	r3, r1
   26d16:	0f5b      	lsrs	r3, r3, #29
   26d18:	0010      	movs	r0, r2
   26d1a:	00c0      	lsls	r0, r0, #3
   26d1c:	63f8      	str	r0, [r7, #60]	; 0x3c
   26d1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   26d20:	4318      	orrs	r0, r3
   26d22:	63f8      	str	r0, [r7, #60]	; 0x3c
   26d24:	000b      	movs	r3, r1
   26d26:	00db      	lsls	r3, r3, #3
   26d28:	63bb      	str	r3, [r7, #56]	; 0x38
   26d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26d2c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26d2e:	001a      	movs	r2, r3
   26d30:	0023      	movs	r3, r4
   26d32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   26d34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   26d36:	4c16      	ldr	r4, [pc, #88]	; (26d90 <_sercom_get_async_baud_val+0x1bc>)
   26d38:	47a0      	blx	r4
   26d3a:	0003      	movs	r3, r0
   26d3c:	000c      	movs	r4, r1
   26d3e:	65bb      	str	r3, [r7, #88]	; 0x58
   26d40:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   26d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   26d44:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   26d46:	b2d9      	uxtb	r1, r3
   26d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26d4a:	b2db      	uxtb	r3, r3
   26d4c:	00db      	lsls	r3, r3, #3
   26d4e:	b2da      	uxtb	r2, r3
   26d50:	2317      	movs	r3, #23
   26d52:	2040      	movs	r0, #64	; 0x40
   26d54:	4684      	mov	ip, r0
   26d56:	44bc      	add	ip, r7
   26d58:	4463      	add	r3, ip
   26d5a:	1a8a      	subs	r2, r1, r2
   26d5c:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   26d5e:	2317      	movs	r3, #23
   26d60:	2240      	movs	r2, #64	; 0x40
   26d62:	4694      	mov	ip, r2
   26d64:	44bc      	add	ip, r7
   26d66:	4463      	add	r3, ip
   26d68:	781b      	ldrb	r3, [r3, #0]
   26d6a:	035b      	lsls	r3, r3, #13
   26d6c:	001a      	movs	r2, r3
   26d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   26d70:	4313      	orrs	r3, r2
   26d72:	67bb      	str	r3, [r7, #120]	; 0x78
   26d74:	2300      	movs	r3, #0
   26d76:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   26d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   26d7a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   26d7c:	b29a      	uxth	r2, r3
   26d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   26d80:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   26d82:	2300      	movs	r3, #0
}
   26d84:	0018      	movs	r0, r3
   26d86:	46bd      	mov	sp, r7
   26d88:	b021      	add	sp, #132	; 0x84
   26d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26d8c:	0003269d 	.word	0x0003269d
   26d90:	00026a77 	.word	0x00026a77

00026d94 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   26d94:	b580      	push	{r7, lr}
   26d96:	b084      	sub	sp, #16
   26d98:	af00      	add	r7, sp, #0
   26d9a:	0002      	movs	r2, r0
   26d9c:	1dfb      	adds	r3, r7, #7
   26d9e:	701a      	strb	r2, [r3, #0]
   26da0:	1dbb      	adds	r3, r7, #6
   26da2:	1c0a      	adds	r2, r1, #0
   26da4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   26da6:	4b1a      	ldr	r3, [pc, #104]	; (26e10 <sercom_set_gclk_generator+0x7c>)
   26da8:	781b      	ldrb	r3, [r3, #0]
   26daa:	2201      	movs	r2, #1
   26dac:	4053      	eors	r3, r2
   26dae:	b2db      	uxtb	r3, r3
   26db0:	2b00      	cmp	r3, #0
   26db2:	d103      	bne.n	26dbc <sercom_set_gclk_generator+0x28>
   26db4:	1dbb      	adds	r3, r7, #6
   26db6:	781b      	ldrb	r3, [r3, #0]
   26db8:	2b00      	cmp	r3, #0
   26dba:	d01b      	beq.n	26df4 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   26dbc:	230c      	movs	r3, #12
   26dbe:	18fb      	adds	r3, r7, r3
   26dc0:	0018      	movs	r0, r3
   26dc2:	4b14      	ldr	r3, [pc, #80]	; (26e14 <sercom_set_gclk_generator+0x80>)
   26dc4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   26dc6:	230c      	movs	r3, #12
   26dc8:	18fb      	adds	r3, r7, r3
   26dca:	1dfa      	adds	r2, r7, #7
   26dcc:	7812      	ldrb	r2, [r2, #0]
   26dce:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   26dd0:	230c      	movs	r3, #12
   26dd2:	18fb      	adds	r3, r7, r3
   26dd4:	0019      	movs	r1, r3
   26dd6:	2013      	movs	r0, #19
   26dd8:	4b0f      	ldr	r3, [pc, #60]	; (26e18 <sercom_set_gclk_generator+0x84>)
   26dda:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   26ddc:	2013      	movs	r0, #19
   26dde:	4b0f      	ldr	r3, [pc, #60]	; (26e1c <sercom_set_gclk_generator+0x88>)
   26de0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   26de2:	4b0b      	ldr	r3, [pc, #44]	; (26e10 <sercom_set_gclk_generator+0x7c>)
   26de4:	1dfa      	adds	r2, r7, #7
   26de6:	7812      	ldrb	r2, [r2, #0]
   26de8:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   26dea:	4b09      	ldr	r3, [pc, #36]	; (26e10 <sercom_set_gclk_generator+0x7c>)
   26dec:	2201      	movs	r2, #1
   26dee:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   26df0:	2300      	movs	r3, #0
   26df2:	e008      	b.n	26e06 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   26df4:	4b06      	ldr	r3, [pc, #24]	; (26e10 <sercom_set_gclk_generator+0x7c>)
   26df6:	785b      	ldrb	r3, [r3, #1]
   26df8:	1dfa      	adds	r2, r7, #7
   26dfa:	7812      	ldrb	r2, [r2, #0]
   26dfc:	429a      	cmp	r2, r3
   26dfe:	d101      	bne.n	26e04 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   26e00:	2300      	movs	r3, #0
   26e02:	e000      	b.n	26e06 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   26e04:	231d      	movs	r3, #29
}
   26e06:	0018      	movs	r0, r3
   26e08:	46bd      	mov	sp, r7
   26e0a:	b004      	add	sp, #16
   26e0c:	bd80      	pop	{r7, pc}
   26e0e:	46c0      	nop			; (mov r8, r8)
   26e10:	20003ea8 	.word	0x20003ea8
   26e14:	00026a61 	.word	0x00026a61
   26e18:	0002986d 	.word	0x0002986d
   26e1c:	000298b1 	.word	0x000298b1

00026e20 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   26e20:	b580      	push	{r7, lr}
   26e22:	b082      	sub	sp, #8
   26e24:	af00      	add	r7, sp, #0
   26e26:	6078      	str	r0, [r7, #4]
   26e28:	000a      	movs	r2, r1
   26e2a:	1cfb      	adds	r3, r7, #3
   26e2c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   26e2e:	687b      	ldr	r3, [r7, #4]
   26e30:	4a4d      	ldr	r2, [pc, #308]	; (26f68 <_sercom_get_default_pad+0x148>)
   26e32:	4293      	cmp	r3, r2
   26e34:	d03f      	beq.n	26eb6 <_sercom_get_default_pad+0x96>
   26e36:	4a4c      	ldr	r2, [pc, #304]	; (26f68 <_sercom_get_default_pad+0x148>)
   26e38:	4293      	cmp	r3, r2
   26e3a:	d806      	bhi.n	26e4a <_sercom_get_default_pad+0x2a>
   26e3c:	4a4b      	ldr	r2, [pc, #300]	; (26f6c <_sercom_get_default_pad+0x14c>)
   26e3e:	4293      	cmp	r3, r2
   26e40:	d00f      	beq.n	26e62 <_sercom_get_default_pad+0x42>
   26e42:	4a4b      	ldr	r2, [pc, #300]	; (26f70 <_sercom_get_default_pad+0x150>)
   26e44:	4293      	cmp	r3, r2
   26e46:	d021      	beq.n	26e8c <_sercom_get_default_pad+0x6c>
   26e48:	e089      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26e4a:	4a4a      	ldr	r2, [pc, #296]	; (26f74 <_sercom_get_default_pad+0x154>)
   26e4c:	4293      	cmp	r3, r2
   26e4e:	d100      	bne.n	26e52 <_sercom_get_default_pad+0x32>
   26e50:	e05b      	b.n	26f0a <_sercom_get_default_pad+0xea>
   26e52:	4a49      	ldr	r2, [pc, #292]	; (26f78 <_sercom_get_default_pad+0x158>)
   26e54:	4293      	cmp	r3, r2
   26e56:	d100      	bne.n	26e5a <_sercom_get_default_pad+0x3a>
   26e58:	e06c      	b.n	26f34 <_sercom_get_default_pad+0x114>
   26e5a:	4a48      	ldr	r2, [pc, #288]	; (26f7c <_sercom_get_default_pad+0x15c>)
   26e5c:	4293      	cmp	r3, r2
   26e5e:	d03f      	beq.n	26ee0 <_sercom_get_default_pad+0xc0>
   26e60:	e07d      	b.n	26f5e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   26e62:	1cfb      	adds	r3, r7, #3
   26e64:	781b      	ldrb	r3, [r3, #0]
   26e66:	2b01      	cmp	r3, #1
   26e68:	d00a      	beq.n	26e80 <_sercom_get_default_pad+0x60>
   26e6a:	dc02      	bgt.n	26e72 <_sercom_get_default_pad+0x52>
   26e6c:	2b00      	cmp	r3, #0
   26e6e:	d005      	beq.n	26e7c <_sercom_get_default_pad+0x5c>
   26e70:	e075      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26e72:	2b02      	cmp	r3, #2
   26e74:	d006      	beq.n	26e84 <_sercom_get_default_pad+0x64>
   26e76:	2b03      	cmp	r3, #3
   26e78:	d006      	beq.n	26e88 <_sercom_get_default_pad+0x68>
   26e7a:	e070      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26e7c:	4b40      	ldr	r3, [pc, #256]	; (26f80 <_sercom_get_default_pad+0x160>)
   26e7e:	e06f      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26e80:	4b40      	ldr	r3, [pc, #256]	; (26f84 <_sercom_get_default_pad+0x164>)
   26e82:	e06d      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26e84:	4b40      	ldr	r3, [pc, #256]	; (26f88 <_sercom_get_default_pad+0x168>)
   26e86:	e06b      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26e88:	4b40      	ldr	r3, [pc, #256]	; (26f8c <_sercom_get_default_pad+0x16c>)
   26e8a:	e069      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26e8c:	1cfb      	adds	r3, r7, #3
   26e8e:	781b      	ldrb	r3, [r3, #0]
   26e90:	2b01      	cmp	r3, #1
   26e92:	d00a      	beq.n	26eaa <_sercom_get_default_pad+0x8a>
   26e94:	dc02      	bgt.n	26e9c <_sercom_get_default_pad+0x7c>
   26e96:	2b00      	cmp	r3, #0
   26e98:	d005      	beq.n	26ea6 <_sercom_get_default_pad+0x86>
   26e9a:	e060      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26e9c:	2b02      	cmp	r3, #2
   26e9e:	d006      	beq.n	26eae <_sercom_get_default_pad+0x8e>
   26ea0:	2b03      	cmp	r3, #3
   26ea2:	d006      	beq.n	26eb2 <_sercom_get_default_pad+0x92>
   26ea4:	e05b      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26ea6:	2303      	movs	r3, #3
   26ea8:	e05a      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26eaa:	4b39      	ldr	r3, [pc, #228]	; (26f90 <_sercom_get_default_pad+0x170>)
   26eac:	e058      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26eae:	4b39      	ldr	r3, [pc, #228]	; (26f94 <_sercom_get_default_pad+0x174>)
   26eb0:	e056      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26eb2:	4b39      	ldr	r3, [pc, #228]	; (26f98 <_sercom_get_default_pad+0x178>)
   26eb4:	e054      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26eb6:	1cfb      	adds	r3, r7, #3
   26eb8:	781b      	ldrb	r3, [r3, #0]
   26eba:	2b01      	cmp	r3, #1
   26ebc:	d00a      	beq.n	26ed4 <_sercom_get_default_pad+0xb4>
   26ebe:	dc02      	bgt.n	26ec6 <_sercom_get_default_pad+0xa6>
   26ec0:	2b00      	cmp	r3, #0
   26ec2:	d005      	beq.n	26ed0 <_sercom_get_default_pad+0xb0>
   26ec4:	e04b      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26ec6:	2b02      	cmp	r3, #2
   26ec8:	d006      	beq.n	26ed8 <_sercom_get_default_pad+0xb8>
   26eca:	2b03      	cmp	r3, #3
   26ecc:	d006      	beq.n	26edc <_sercom_get_default_pad+0xbc>
   26ece:	e046      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26ed0:	4b32      	ldr	r3, [pc, #200]	; (26f9c <_sercom_get_default_pad+0x17c>)
   26ed2:	e045      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26ed4:	4b32      	ldr	r3, [pc, #200]	; (26fa0 <_sercom_get_default_pad+0x180>)
   26ed6:	e043      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26ed8:	4b32      	ldr	r3, [pc, #200]	; (26fa4 <_sercom_get_default_pad+0x184>)
   26eda:	e041      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26edc:	4b32      	ldr	r3, [pc, #200]	; (26fa8 <_sercom_get_default_pad+0x188>)
   26ede:	e03f      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26ee0:	1cfb      	adds	r3, r7, #3
   26ee2:	781b      	ldrb	r3, [r3, #0]
   26ee4:	2b01      	cmp	r3, #1
   26ee6:	d00a      	beq.n	26efe <_sercom_get_default_pad+0xde>
   26ee8:	dc02      	bgt.n	26ef0 <_sercom_get_default_pad+0xd0>
   26eea:	2b00      	cmp	r3, #0
   26eec:	d005      	beq.n	26efa <_sercom_get_default_pad+0xda>
   26eee:	e036      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26ef0:	2b02      	cmp	r3, #2
   26ef2:	d006      	beq.n	26f02 <_sercom_get_default_pad+0xe2>
   26ef4:	2b03      	cmp	r3, #3
   26ef6:	d006      	beq.n	26f06 <_sercom_get_default_pad+0xe6>
   26ef8:	e031      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26efa:	4b2c      	ldr	r3, [pc, #176]	; (26fac <_sercom_get_default_pad+0x18c>)
   26efc:	e030      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26efe:	4b2c      	ldr	r3, [pc, #176]	; (26fb0 <_sercom_get_default_pad+0x190>)
   26f00:	e02e      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26f02:	4b2c      	ldr	r3, [pc, #176]	; (26fb4 <_sercom_get_default_pad+0x194>)
   26f04:	e02c      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26f06:	4b2c      	ldr	r3, [pc, #176]	; (26fb8 <_sercom_get_default_pad+0x198>)
   26f08:	e02a      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26f0a:	1cfb      	adds	r3, r7, #3
   26f0c:	781b      	ldrb	r3, [r3, #0]
   26f0e:	2b01      	cmp	r3, #1
   26f10:	d00a      	beq.n	26f28 <_sercom_get_default_pad+0x108>
   26f12:	dc02      	bgt.n	26f1a <_sercom_get_default_pad+0xfa>
   26f14:	2b00      	cmp	r3, #0
   26f16:	d005      	beq.n	26f24 <_sercom_get_default_pad+0x104>
   26f18:	e021      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26f1a:	2b02      	cmp	r3, #2
   26f1c:	d006      	beq.n	26f2c <_sercom_get_default_pad+0x10c>
   26f1e:	2b03      	cmp	r3, #3
   26f20:	d006      	beq.n	26f30 <_sercom_get_default_pad+0x110>
   26f22:	e01c      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26f24:	4b25      	ldr	r3, [pc, #148]	; (26fbc <_sercom_get_default_pad+0x19c>)
   26f26:	e01b      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26f28:	4b25      	ldr	r3, [pc, #148]	; (26fc0 <_sercom_get_default_pad+0x1a0>)
   26f2a:	e019      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26f2c:	4b25      	ldr	r3, [pc, #148]	; (26fc4 <_sercom_get_default_pad+0x1a4>)
   26f2e:	e017      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26f30:	4b25      	ldr	r3, [pc, #148]	; (26fc8 <_sercom_get_default_pad+0x1a8>)
   26f32:	e015      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26f34:	1cfb      	adds	r3, r7, #3
   26f36:	781b      	ldrb	r3, [r3, #0]
   26f38:	2b01      	cmp	r3, #1
   26f3a:	d00a      	beq.n	26f52 <_sercom_get_default_pad+0x132>
   26f3c:	dc02      	bgt.n	26f44 <_sercom_get_default_pad+0x124>
   26f3e:	2b00      	cmp	r3, #0
   26f40:	d005      	beq.n	26f4e <_sercom_get_default_pad+0x12e>
   26f42:	e00c      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26f44:	2b02      	cmp	r3, #2
   26f46:	d006      	beq.n	26f56 <_sercom_get_default_pad+0x136>
   26f48:	2b03      	cmp	r3, #3
   26f4a:	d006      	beq.n	26f5a <_sercom_get_default_pad+0x13a>
   26f4c:	e007      	b.n	26f5e <_sercom_get_default_pad+0x13e>
   26f4e:	4b1f      	ldr	r3, [pc, #124]	; (26fcc <_sercom_get_default_pad+0x1ac>)
   26f50:	e006      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26f52:	4b1f      	ldr	r3, [pc, #124]	; (26fd0 <_sercom_get_default_pad+0x1b0>)
   26f54:	e004      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26f56:	4b1f      	ldr	r3, [pc, #124]	; (26fd4 <_sercom_get_default_pad+0x1b4>)
   26f58:	e002      	b.n	26f60 <_sercom_get_default_pad+0x140>
   26f5a:	4b1f      	ldr	r3, [pc, #124]	; (26fd8 <_sercom_get_default_pad+0x1b8>)
   26f5c:	e000      	b.n	26f60 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   26f5e:	2300      	movs	r3, #0
}
   26f60:	0018      	movs	r0, r3
   26f62:	46bd      	mov	sp, r7
   26f64:	b002      	add	sp, #8
   26f66:	bd80      	pop	{r7, pc}
   26f68:	42001000 	.word	0x42001000
   26f6c:	42000800 	.word	0x42000800
   26f70:	42000c00 	.word	0x42000c00
   26f74:	42001800 	.word	0x42001800
   26f78:	42001c00 	.word	0x42001c00
   26f7c:	42001400 	.word	0x42001400
   26f80:	00040003 	.word	0x00040003
   26f84:	00050003 	.word	0x00050003
   26f88:	00060003 	.word	0x00060003
   26f8c:	00070003 	.word	0x00070003
   26f90:	00010003 	.word	0x00010003
   26f94:	001e0003 	.word	0x001e0003
   26f98:	001f0003 	.word	0x001f0003
   26f9c:	00080003 	.word	0x00080003
   26fa0:	00090003 	.word	0x00090003
   26fa4:	000a0003 	.word	0x000a0003
   26fa8:	000b0003 	.word	0x000b0003
   26fac:	00100003 	.word	0x00100003
   26fb0:	00110003 	.word	0x00110003
   26fb4:	00120003 	.word	0x00120003
   26fb8:	00130003 	.word	0x00130003
   26fbc:	000c0003 	.word	0x000c0003
   26fc0:	000d0003 	.word	0x000d0003
   26fc4:	000e0003 	.word	0x000e0003
   26fc8:	000f0003 	.word	0x000f0003
   26fcc:	00160003 	.word	0x00160003
   26fd0:	00170003 	.word	0x00170003
   26fd4:	00180003 	.word	0x00180003
   26fd8:	00190003 	.word	0x00190003

00026fdc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   26fdc:	b590      	push	{r4, r7, lr}
   26fde:	b08b      	sub	sp, #44	; 0x2c
   26fe0:	af00      	add	r7, sp, #0
   26fe2:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   26fe4:	230c      	movs	r3, #12
   26fe6:	18fb      	adds	r3, r7, r3
   26fe8:	4a0f      	ldr	r2, [pc, #60]	; (27028 <_sercom_get_sercom_inst_index+0x4c>)
   26fea:	ca13      	ldmia	r2!, {r0, r1, r4}
   26fec:	c313      	stmia	r3!, {r0, r1, r4}
   26fee:	ca13      	ldmia	r2!, {r0, r1, r4}
   26ff0:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   26ff2:	2300      	movs	r3, #0
   26ff4:	627b      	str	r3, [r7, #36]	; 0x24
   26ff6:	e00e      	b.n	27016 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   26ff8:	230c      	movs	r3, #12
   26ffa:	18fb      	adds	r3, r7, r3
   26ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26ffe:	0092      	lsls	r2, r2, #2
   27000:	58d3      	ldr	r3, [r2, r3]
   27002:	001a      	movs	r2, r3
   27004:	687b      	ldr	r3, [r7, #4]
   27006:	429a      	cmp	r2, r3
   27008:	d102      	bne.n	27010 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2700c:	b2db      	uxtb	r3, r3
   2700e:	e006      	b.n	2701e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27012:	3301      	adds	r3, #1
   27014:	627b      	str	r3, [r7, #36]	; 0x24
   27016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27018:	2b05      	cmp	r3, #5
   2701a:	d9ed      	bls.n	26ff8 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   2701c:	2300      	movs	r3, #0
}
   2701e:	0018      	movs	r0, r3
   27020:	46bd      	mov	sp, r7
   27022:	b00b      	add	sp, #44	; 0x2c
   27024:	bd90      	pop	{r4, r7, pc}
   27026:	46c0      	nop			; (mov r8, r8)
   27028:	00038cfc 	.word	0x00038cfc

0002702c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   2702c:	b580      	push	{r7, lr}
   2702e:	b082      	sub	sp, #8
   27030:	af00      	add	r7, sp, #0
   27032:	0002      	movs	r2, r0
   27034:	1dfb      	adds	r3, r7, #7
   27036:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   27038:	46c0      	nop			; (mov r8, r8)
   2703a:	46bd      	mov	sp, r7
   2703c:	b002      	add	sp, #8
   2703e:	bd80      	pop	{r7, pc}

00027040 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   27040:	b580      	push	{r7, lr}
   27042:	b084      	sub	sp, #16
   27044:	af00      	add	r7, sp, #0
   27046:	0002      	movs	r2, r0
   27048:	6039      	str	r1, [r7, #0]
   2704a:	1dfb      	adds	r3, r7, #7
   2704c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2704e:	4b13      	ldr	r3, [pc, #76]	; (2709c <_sercom_set_handler+0x5c>)
   27050:	781b      	ldrb	r3, [r3, #0]
   27052:	2201      	movs	r2, #1
   27054:	4053      	eors	r3, r2
   27056:	b2db      	uxtb	r3, r3
   27058:	2b00      	cmp	r3, #0
   2705a:	d015      	beq.n	27088 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2705c:	2300      	movs	r3, #0
   2705e:	60fb      	str	r3, [r7, #12]
   27060:	e00c      	b.n	2707c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   27062:	4b0f      	ldr	r3, [pc, #60]	; (270a0 <_sercom_set_handler+0x60>)
   27064:	68fa      	ldr	r2, [r7, #12]
   27066:	0092      	lsls	r2, r2, #2
   27068:	490e      	ldr	r1, [pc, #56]	; (270a4 <_sercom_set_handler+0x64>)
   2706a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   2706c:	4b0e      	ldr	r3, [pc, #56]	; (270a8 <_sercom_set_handler+0x68>)
   2706e:	68fa      	ldr	r2, [r7, #12]
   27070:	0092      	lsls	r2, r2, #2
   27072:	2100      	movs	r1, #0
   27074:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27076:	68fb      	ldr	r3, [r7, #12]
   27078:	3301      	adds	r3, #1
   2707a:	60fb      	str	r3, [r7, #12]
   2707c:	68fb      	ldr	r3, [r7, #12]
   2707e:	2b05      	cmp	r3, #5
   27080:	d9ef      	bls.n	27062 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   27082:	4b06      	ldr	r3, [pc, #24]	; (2709c <_sercom_set_handler+0x5c>)
   27084:	2201      	movs	r2, #1
   27086:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   27088:	1dfb      	adds	r3, r7, #7
   2708a:	781a      	ldrb	r2, [r3, #0]
   2708c:	4b04      	ldr	r3, [pc, #16]	; (270a0 <_sercom_set_handler+0x60>)
   2708e:	0092      	lsls	r2, r2, #2
   27090:	6839      	ldr	r1, [r7, #0]
   27092:	50d1      	str	r1, [r2, r3]
}
   27094:	46c0      	nop			; (mov r8, r8)
   27096:	46bd      	mov	sp, r7
   27098:	b004      	add	sp, #16
   2709a:	bd80      	pop	{r7, pc}
   2709c:	20003eaa 	.word	0x20003eaa
   270a0:	20003eac 	.word	0x20003eac
   270a4:	0002702d 	.word	0x0002702d
   270a8:	20005784 	.word	0x20005784

000270ac <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   270ac:	b590      	push	{r4, r7, lr}
   270ae:	b085      	sub	sp, #20
   270b0:	af00      	add	r7, sp, #0
   270b2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   270b4:	2308      	movs	r3, #8
   270b6:	18fb      	adds	r3, r7, r3
   270b8:	4a0b      	ldr	r2, [pc, #44]	; (270e8 <_sercom_get_interrupt_vector+0x3c>)
   270ba:	6811      	ldr	r1, [r2, #0]
   270bc:	6019      	str	r1, [r3, #0]
   270be:	8892      	ldrh	r2, [r2, #4]
   270c0:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   270c2:	230f      	movs	r3, #15
   270c4:	18fc      	adds	r4, r7, r3
   270c6:	687b      	ldr	r3, [r7, #4]
   270c8:	0018      	movs	r0, r3
   270ca:	4b08      	ldr	r3, [pc, #32]	; (270ec <_sercom_get_interrupt_vector+0x40>)
   270cc:	4798      	blx	r3
   270ce:	0003      	movs	r3, r0
   270d0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   270d2:	230f      	movs	r3, #15
   270d4:	18fb      	adds	r3, r7, r3
   270d6:	781b      	ldrb	r3, [r3, #0]
   270d8:	2208      	movs	r2, #8
   270da:	18ba      	adds	r2, r7, r2
   270dc:	5cd3      	ldrb	r3, [r2, r3]
   270de:	b25b      	sxtb	r3, r3
}
   270e0:	0018      	movs	r0, r3
   270e2:	46bd      	mov	sp, r7
   270e4:	b005      	add	sp, #20
   270e6:	bd90      	pop	{r4, r7, pc}
   270e8:	00038d14 	.word	0x00038d14
   270ec:	00026fdd 	.word	0x00026fdd

000270f0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   270f0:	b580      	push	{r7, lr}
   270f2:	af00      	add	r7, sp, #0
   270f4:	4b03      	ldr	r3, [pc, #12]	; (27104 <SERCOM0_Handler+0x14>)
   270f6:	681b      	ldr	r3, [r3, #0]
   270f8:	2000      	movs	r0, #0
   270fa:	4798      	blx	r3
   270fc:	46c0      	nop			; (mov r8, r8)
   270fe:	46bd      	mov	sp, r7
   27100:	bd80      	pop	{r7, pc}
   27102:	46c0      	nop			; (mov r8, r8)
   27104:	20003eac 	.word	0x20003eac

00027108 <SERCOM1_Handler>:
   27108:	b580      	push	{r7, lr}
   2710a:	af00      	add	r7, sp, #0
   2710c:	4b03      	ldr	r3, [pc, #12]	; (2711c <SERCOM1_Handler+0x14>)
   2710e:	685b      	ldr	r3, [r3, #4]
   27110:	2001      	movs	r0, #1
   27112:	4798      	blx	r3
   27114:	46c0      	nop			; (mov r8, r8)
   27116:	46bd      	mov	sp, r7
   27118:	bd80      	pop	{r7, pc}
   2711a:	46c0      	nop			; (mov r8, r8)
   2711c:	20003eac 	.word	0x20003eac

00027120 <SERCOM2_Handler>:
   27120:	b580      	push	{r7, lr}
   27122:	af00      	add	r7, sp, #0
   27124:	4b03      	ldr	r3, [pc, #12]	; (27134 <SERCOM2_Handler+0x14>)
   27126:	689b      	ldr	r3, [r3, #8]
   27128:	2002      	movs	r0, #2
   2712a:	4798      	blx	r3
   2712c:	46c0      	nop			; (mov r8, r8)
   2712e:	46bd      	mov	sp, r7
   27130:	bd80      	pop	{r7, pc}
   27132:	46c0      	nop			; (mov r8, r8)
   27134:	20003eac 	.word	0x20003eac

00027138 <SERCOM3_Handler>:
   27138:	b580      	push	{r7, lr}
   2713a:	af00      	add	r7, sp, #0
   2713c:	4b03      	ldr	r3, [pc, #12]	; (2714c <SERCOM3_Handler+0x14>)
   2713e:	68db      	ldr	r3, [r3, #12]
   27140:	2003      	movs	r0, #3
   27142:	4798      	blx	r3
   27144:	46c0      	nop			; (mov r8, r8)
   27146:	46bd      	mov	sp, r7
   27148:	bd80      	pop	{r7, pc}
   2714a:	46c0      	nop			; (mov r8, r8)
   2714c:	20003eac 	.word	0x20003eac

00027150 <SERCOM4_Handler>:
   27150:	b580      	push	{r7, lr}
   27152:	af00      	add	r7, sp, #0
   27154:	4b03      	ldr	r3, [pc, #12]	; (27164 <SERCOM4_Handler+0x14>)
   27156:	691b      	ldr	r3, [r3, #16]
   27158:	2004      	movs	r0, #4
   2715a:	4798      	blx	r3
   2715c:	46c0      	nop			; (mov r8, r8)
   2715e:	46bd      	mov	sp, r7
   27160:	bd80      	pop	{r7, pc}
   27162:	46c0      	nop			; (mov r8, r8)
   27164:	20003eac 	.word	0x20003eac

00027168 <SERCOM5_Handler>:
   27168:	b580      	push	{r7, lr}
   2716a:	af00      	add	r7, sp, #0
   2716c:	4b03      	ldr	r3, [pc, #12]	; (2717c <SERCOM5_Handler+0x14>)
   2716e:	695b      	ldr	r3, [r3, #20]
   27170:	2005      	movs	r0, #5
   27172:	4798      	blx	r3
   27174:	46c0      	nop			; (mov r8, r8)
   27176:	46bd      	mov	sp, r7
   27178:	bd80      	pop	{r7, pc}
   2717a:	46c0      	nop			; (mov r8, r8)
   2717c:	20003eac 	.word	0x20003eac

00027180 <system_pinmux_get_config_defaults>:
{
   27180:	b580      	push	{r7, lr}
   27182:	b082      	sub	sp, #8
   27184:	af00      	add	r7, sp, #0
   27186:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27188:	687b      	ldr	r3, [r7, #4]
   2718a:	2280      	movs	r2, #128	; 0x80
   2718c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2718e:	687b      	ldr	r3, [r7, #4]
   27190:	2200      	movs	r2, #0
   27192:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27194:	687b      	ldr	r3, [r7, #4]
   27196:	2201      	movs	r2, #1
   27198:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2719a:	687b      	ldr	r3, [r7, #4]
   2719c:	2200      	movs	r2, #0
   2719e:	70da      	strb	r2, [r3, #3]
}
   271a0:	46c0      	nop			; (mov r8, r8)
   271a2:	46bd      	mov	sp, r7
   271a4:	b002      	add	sp, #8
   271a6:	bd80      	pop	{r7, pc}

000271a8 <system_pinmux_get_group_from_gpio_pin>:
{
   271a8:	b580      	push	{r7, lr}
   271aa:	b084      	sub	sp, #16
   271ac:	af00      	add	r7, sp, #0
   271ae:	0002      	movs	r2, r0
   271b0:	1dfb      	adds	r3, r7, #7
   271b2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   271b4:	230f      	movs	r3, #15
   271b6:	18fb      	adds	r3, r7, r3
   271b8:	1dfa      	adds	r2, r7, #7
   271ba:	7812      	ldrb	r2, [r2, #0]
   271bc:	09d2      	lsrs	r2, r2, #7
   271be:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   271c0:	230e      	movs	r3, #14
   271c2:	18fb      	adds	r3, r7, r3
   271c4:	1dfa      	adds	r2, r7, #7
   271c6:	7812      	ldrb	r2, [r2, #0]
   271c8:	0952      	lsrs	r2, r2, #5
   271ca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   271cc:	4b0d      	ldr	r3, [pc, #52]	; (27204 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   271ce:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   271d0:	230f      	movs	r3, #15
   271d2:	18fb      	adds	r3, r7, r3
   271d4:	781b      	ldrb	r3, [r3, #0]
   271d6:	2b00      	cmp	r3, #0
   271d8:	d10f      	bne.n	271fa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   271da:	230f      	movs	r3, #15
   271dc:	18fb      	adds	r3, r7, r3
   271de:	781b      	ldrb	r3, [r3, #0]
   271e0:	009b      	lsls	r3, r3, #2
   271e2:	2210      	movs	r2, #16
   271e4:	4694      	mov	ip, r2
   271e6:	44bc      	add	ip, r7
   271e8:	4463      	add	r3, ip
   271ea:	3b08      	subs	r3, #8
   271ec:	681a      	ldr	r2, [r3, #0]
   271ee:	230e      	movs	r3, #14
   271f0:	18fb      	adds	r3, r7, r3
   271f2:	781b      	ldrb	r3, [r3, #0]
   271f4:	01db      	lsls	r3, r3, #7
   271f6:	18d3      	adds	r3, r2, r3
   271f8:	e000      	b.n	271fc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   271fa:	2300      	movs	r3, #0
}
   271fc:	0018      	movs	r0, r3
   271fe:	46bd      	mov	sp, r7
   27200:	b004      	add	sp, #16
   27202:	bd80      	pop	{r7, pc}
   27204:	41004400 	.word	0x41004400

00027208 <port_get_group_from_gpio_pin>:
{
   27208:	b580      	push	{r7, lr}
   2720a:	b082      	sub	sp, #8
   2720c:	af00      	add	r7, sp, #0
   2720e:	0002      	movs	r2, r0
   27210:	1dfb      	adds	r3, r7, #7
   27212:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27214:	1dfb      	adds	r3, r7, #7
   27216:	781b      	ldrb	r3, [r3, #0]
   27218:	0018      	movs	r0, r3
   2721a:	4b03      	ldr	r3, [pc, #12]	; (27228 <port_get_group_from_gpio_pin+0x20>)
   2721c:	4798      	blx	r3
   2721e:	0003      	movs	r3, r0
}
   27220:	0018      	movs	r0, r3
   27222:	46bd      	mov	sp, r7
   27224:	b002      	add	sp, #8
   27226:	bd80      	pop	{r7, pc}
   27228:	000271a9 	.word	0x000271a9

0002722c <port_pin_set_output_level>:
{
   2722c:	b580      	push	{r7, lr}
   2722e:	b084      	sub	sp, #16
   27230:	af00      	add	r7, sp, #0
   27232:	0002      	movs	r2, r0
   27234:	1dfb      	adds	r3, r7, #7
   27236:	701a      	strb	r2, [r3, #0]
   27238:	1dbb      	adds	r3, r7, #6
   2723a:	1c0a      	adds	r2, r1, #0
   2723c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2723e:	1dfb      	adds	r3, r7, #7
   27240:	781b      	ldrb	r3, [r3, #0]
   27242:	0018      	movs	r0, r3
   27244:	4b0d      	ldr	r3, [pc, #52]	; (2727c <port_pin_set_output_level+0x50>)
   27246:	4798      	blx	r3
   27248:	0003      	movs	r3, r0
   2724a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2724c:	1dfb      	adds	r3, r7, #7
   2724e:	781b      	ldrb	r3, [r3, #0]
   27250:	221f      	movs	r2, #31
   27252:	4013      	ands	r3, r2
   27254:	2201      	movs	r2, #1
   27256:	409a      	lsls	r2, r3
   27258:	0013      	movs	r3, r2
   2725a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2725c:	1dbb      	adds	r3, r7, #6
   2725e:	781b      	ldrb	r3, [r3, #0]
   27260:	2b00      	cmp	r3, #0
   27262:	d003      	beq.n	2726c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27264:	68fb      	ldr	r3, [r7, #12]
   27266:	68ba      	ldr	r2, [r7, #8]
   27268:	619a      	str	r2, [r3, #24]
}
   2726a:	e002      	b.n	27272 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2726c:	68fb      	ldr	r3, [r7, #12]
   2726e:	68ba      	ldr	r2, [r7, #8]
   27270:	615a      	str	r2, [r3, #20]
}
   27272:	46c0      	nop			; (mov r8, r8)
   27274:	46bd      	mov	sp, r7
   27276:	b004      	add	sp, #16
   27278:	bd80      	pop	{r7, pc}
   2727a:	46c0      	nop			; (mov r8, r8)
   2727c:	00027209 	.word	0x00027209

00027280 <system_gclk_chan_get_config_defaults>:
{
   27280:	b580      	push	{r7, lr}
   27282:	b082      	sub	sp, #8
   27284:	af00      	add	r7, sp, #0
   27286:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27288:	687b      	ldr	r3, [r7, #4]
   2728a:	2200      	movs	r2, #0
   2728c:	701a      	strb	r2, [r3, #0]
}
   2728e:	46c0      	nop			; (mov r8, r8)
   27290:	46bd      	mov	sp, r7
   27292:	b002      	add	sp, #8
   27294:	bd80      	pop	{r7, pc}
	...

00027298 <system_apb_clock_set_mask>:
{
   27298:	b580      	push	{r7, lr}
   2729a:	b082      	sub	sp, #8
   2729c:	af00      	add	r7, sp, #0
   2729e:	0002      	movs	r2, r0
   272a0:	6039      	str	r1, [r7, #0]
   272a2:	1dfb      	adds	r3, r7, #7
   272a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   272a6:	1dfb      	adds	r3, r7, #7
   272a8:	781b      	ldrb	r3, [r3, #0]
   272aa:	2b01      	cmp	r3, #1
   272ac:	d00a      	beq.n	272c4 <system_apb_clock_set_mask+0x2c>
   272ae:	2b02      	cmp	r3, #2
   272b0:	d00f      	beq.n	272d2 <system_apb_clock_set_mask+0x3a>
   272b2:	2b00      	cmp	r3, #0
   272b4:	d114      	bne.n	272e0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   272b6:	4b0e      	ldr	r3, [pc, #56]	; (272f0 <system_apb_clock_set_mask+0x58>)
   272b8:	4a0d      	ldr	r2, [pc, #52]	; (272f0 <system_apb_clock_set_mask+0x58>)
   272ba:	6991      	ldr	r1, [r2, #24]
   272bc:	683a      	ldr	r2, [r7, #0]
   272be:	430a      	orrs	r2, r1
   272c0:	619a      	str	r2, [r3, #24]
			break;
   272c2:	e00f      	b.n	272e4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   272c4:	4b0a      	ldr	r3, [pc, #40]	; (272f0 <system_apb_clock_set_mask+0x58>)
   272c6:	4a0a      	ldr	r2, [pc, #40]	; (272f0 <system_apb_clock_set_mask+0x58>)
   272c8:	69d1      	ldr	r1, [r2, #28]
   272ca:	683a      	ldr	r2, [r7, #0]
   272cc:	430a      	orrs	r2, r1
   272ce:	61da      	str	r2, [r3, #28]
			break;
   272d0:	e008      	b.n	272e4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   272d2:	4b07      	ldr	r3, [pc, #28]	; (272f0 <system_apb_clock_set_mask+0x58>)
   272d4:	4a06      	ldr	r2, [pc, #24]	; (272f0 <system_apb_clock_set_mask+0x58>)
   272d6:	6a11      	ldr	r1, [r2, #32]
   272d8:	683a      	ldr	r2, [r7, #0]
   272da:	430a      	orrs	r2, r1
   272dc:	621a      	str	r2, [r3, #32]
			break;
   272de:	e001      	b.n	272e4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   272e0:	2317      	movs	r3, #23
   272e2:	e000      	b.n	272e6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   272e4:	2300      	movs	r3, #0
}
   272e6:	0018      	movs	r0, r3
   272e8:	46bd      	mov	sp, r7
   272ea:	b002      	add	sp, #8
   272ec:	bd80      	pop	{r7, pc}
   272ee:	46c0      	nop			; (mov r8, r8)
   272f0:	40000400 	.word	0x40000400

000272f4 <system_is_debugger_present>:
{
   272f4:	b580      	push	{r7, lr}
   272f6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   272f8:	4b05      	ldr	r3, [pc, #20]	; (27310 <system_is_debugger_present+0x1c>)
   272fa:	789b      	ldrb	r3, [r3, #2]
   272fc:	b2db      	uxtb	r3, r3
   272fe:	001a      	movs	r2, r3
   27300:	2302      	movs	r3, #2
   27302:	4013      	ands	r3, r2
   27304:	1e5a      	subs	r2, r3, #1
   27306:	4193      	sbcs	r3, r2
   27308:	b2db      	uxtb	r3, r3
}
   2730a:	0018      	movs	r0, r3
   2730c:	46bd      	mov	sp, r7
   2730e:	bd80      	pop	{r7, pc}
   27310:	41002000 	.word	0x41002000

00027314 <system_interrupt_enable>:
{
   27314:	b580      	push	{r7, lr}
   27316:	b082      	sub	sp, #8
   27318:	af00      	add	r7, sp, #0
   2731a:	0002      	movs	r2, r0
   2731c:	1dfb      	adds	r3, r7, #7
   2731e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27320:	4b06      	ldr	r3, [pc, #24]	; (2733c <system_interrupt_enable+0x28>)
   27322:	1dfa      	adds	r2, r7, #7
   27324:	7812      	ldrb	r2, [r2, #0]
   27326:	0011      	movs	r1, r2
   27328:	221f      	movs	r2, #31
   2732a:	400a      	ands	r2, r1
   2732c:	2101      	movs	r1, #1
   2732e:	4091      	lsls	r1, r2
   27330:	000a      	movs	r2, r1
   27332:	601a      	str	r2, [r3, #0]
}
   27334:	46c0      	nop			; (mov r8, r8)
   27336:	46bd      	mov	sp, r7
   27338:	b002      	add	sp, #8
   2733a:	bd80      	pop	{r7, pc}
   2733c:	e000e100 	.word	0xe000e100

00027340 <system_interrupt_disable>:
{
   27340:	b580      	push	{r7, lr}
   27342:	b082      	sub	sp, #8
   27344:	af00      	add	r7, sp, #0
   27346:	0002      	movs	r2, r0
   27348:	1dfb      	adds	r3, r7, #7
   2734a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2734c:	4a07      	ldr	r2, [pc, #28]	; (2736c <system_interrupt_disable+0x2c>)
   2734e:	1dfb      	adds	r3, r7, #7
   27350:	781b      	ldrb	r3, [r3, #0]
   27352:	0019      	movs	r1, r3
   27354:	231f      	movs	r3, #31
   27356:	400b      	ands	r3, r1
   27358:	2101      	movs	r1, #1
   2735a:	4099      	lsls	r1, r3
   2735c:	000b      	movs	r3, r1
   2735e:	0019      	movs	r1, r3
   27360:	2380      	movs	r3, #128	; 0x80
   27362:	50d1      	str	r1, [r2, r3]
}
   27364:	46c0      	nop			; (mov r8, r8)
   27366:	46bd      	mov	sp, r7
   27368:	b002      	add	sp, #8
   2736a:	bd80      	pop	{r7, pc}
   2736c:	e000e100 	.word	0xe000e100

00027370 <spi_is_syncing>:
{
   27370:	b580      	push	{r7, lr}
   27372:	b084      	sub	sp, #16
   27374:	af00      	add	r7, sp, #0
   27376:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27378:	687b      	ldr	r3, [r7, #4]
   2737a:	681b      	ldr	r3, [r3, #0]
   2737c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2737e:	68fb      	ldr	r3, [r7, #12]
   27380:	69db      	ldr	r3, [r3, #28]
   27382:	1e5a      	subs	r2, r3, #1
   27384:	4193      	sbcs	r3, r2
   27386:	b2db      	uxtb	r3, r3
}
   27388:	0018      	movs	r0, r3
   2738a:	46bd      	mov	sp, r7
   2738c:	b004      	add	sp, #16
   2738e:	bd80      	pop	{r7, pc}

00027390 <spi_enable>:
{
   27390:	b580      	push	{r7, lr}
   27392:	b084      	sub	sp, #16
   27394:	af00      	add	r7, sp, #0
   27396:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27398:	687b      	ldr	r3, [r7, #4]
   2739a:	681b      	ldr	r3, [r3, #0]
   2739c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2739e:	687b      	ldr	r3, [r7, #4]
   273a0:	681b      	ldr	r3, [r3, #0]
   273a2:	0018      	movs	r0, r3
   273a4:	4b0b      	ldr	r3, [pc, #44]	; (273d4 <spi_enable+0x44>)
   273a6:	4798      	blx	r3
   273a8:	0003      	movs	r3, r0
   273aa:	0018      	movs	r0, r3
   273ac:	4b0a      	ldr	r3, [pc, #40]	; (273d8 <spi_enable+0x48>)
   273ae:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   273b0:	46c0      	nop			; (mov r8, r8)
   273b2:	687b      	ldr	r3, [r7, #4]
   273b4:	0018      	movs	r0, r3
   273b6:	4b09      	ldr	r3, [pc, #36]	; (273dc <spi_enable+0x4c>)
   273b8:	4798      	blx	r3
   273ba:	1e03      	subs	r3, r0, #0
   273bc:	d1f9      	bne.n	273b2 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   273be:	68fb      	ldr	r3, [r7, #12]
   273c0:	681b      	ldr	r3, [r3, #0]
   273c2:	2202      	movs	r2, #2
   273c4:	431a      	orrs	r2, r3
   273c6:	68fb      	ldr	r3, [r7, #12]
   273c8:	601a      	str	r2, [r3, #0]
}
   273ca:	46c0      	nop			; (mov r8, r8)
   273cc:	46bd      	mov	sp, r7
   273ce:	b004      	add	sp, #16
   273d0:	bd80      	pop	{r7, pc}
   273d2:	46c0      	nop			; (mov r8, r8)
   273d4:	000270ad 	.word	0x000270ad
   273d8:	00027315 	.word	0x00027315
   273dc:	00027371 	.word	0x00027371

000273e0 <spi_disable>:
{
   273e0:	b580      	push	{r7, lr}
   273e2:	b084      	sub	sp, #16
   273e4:	af00      	add	r7, sp, #0
   273e6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   273e8:	687b      	ldr	r3, [r7, #4]
   273ea:	681b      	ldr	r3, [r3, #0]
   273ec:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   273ee:	687b      	ldr	r3, [r7, #4]
   273f0:	681b      	ldr	r3, [r3, #0]
   273f2:	0018      	movs	r0, r3
   273f4:	4b0e      	ldr	r3, [pc, #56]	; (27430 <spi_disable+0x50>)
   273f6:	4798      	blx	r3
   273f8:	0003      	movs	r3, r0
   273fa:	0018      	movs	r0, r3
   273fc:	4b0d      	ldr	r3, [pc, #52]	; (27434 <spi_disable+0x54>)
   273fe:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27400:	46c0      	nop			; (mov r8, r8)
   27402:	687b      	ldr	r3, [r7, #4]
   27404:	0018      	movs	r0, r3
   27406:	4b0c      	ldr	r3, [pc, #48]	; (27438 <spi_disable+0x58>)
   27408:	4798      	blx	r3
   2740a:	1e03      	subs	r3, r0, #0
   2740c:	d1f9      	bne.n	27402 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2740e:	68fb      	ldr	r3, [r7, #12]
   27410:	228f      	movs	r2, #143	; 0x8f
   27412:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   27414:	68fb      	ldr	r3, [r7, #12]
   27416:	228f      	movs	r2, #143	; 0x8f
   27418:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2741a:	68fb      	ldr	r3, [r7, #12]
   2741c:	681b      	ldr	r3, [r3, #0]
   2741e:	2202      	movs	r2, #2
   27420:	4393      	bics	r3, r2
   27422:	001a      	movs	r2, r3
   27424:	68fb      	ldr	r3, [r7, #12]
   27426:	601a      	str	r2, [r3, #0]
}
   27428:	46c0      	nop			; (mov r8, r8)
   2742a:	46bd      	mov	sp, r7
   2742c:	b004      	add	sp, #16
   2742e:	bd80      	pop	{r7, pc}
   27430:	000270ad 	.word	0x000270ad
   27434:	00027341 	.word	0x00027341
   27438:	00027371 	.word	0x00027371

0002743c <spi_is_write_complete>:
{
   2743c:	b580      	push	{r7, lr}
   2743e:	b084      	sub	sp, #16
   27440:	af00      	add	r7, sp, #0
   27442:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27444:	687b      	ldr	r3, [r7, #4]
   27446:	681b      	ldr	r3, [r3, #0]
   27448:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2744a:	68fb      	ldr	r3, [r7, #12]
   2744c:	7e1b      	ldrb	r3, [r3, #24]
   2744e:	b2db      	uxtb	r3, r3
   27450:	001a      	movs	r2, r3
   27452:	2302      	movs	r3, #2
   27454:	4013      	ands	r3, r2
   27456:	1e5a      	subs	r2, r3, #1
   27458:	4193      	sbcs	r3, r2
   2745a:	b2db      	uxtb	r3, r3
}
   2745c:	0018      	movs	r0, r3
   2745e:	46bd      	mov	sp, r7
   27460:	b004      	add	sp, #16
   27462:	bd80      	pop	{r7, pc}

00027464 <spi_is_ready_to_write>:
{
   27464:	b580      	push	{r7, lr}
   27466:	b084      	sub	sp, #16
   27468:	af00      	add	r7, sp, #0
   2746a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2746c:	687b      	ldr	r3, [r7, #4]
   2746e:	681b      	ldr	r3, [r3, #0]
   27470:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   27472:	68fb      	ldr	r3, [r7, #12]
   27474:	7e1b      	ldrb	r3, [r3, #24]
   27476:	b2db      	uxtb	r3, r3
   27478:	001a      	movs	r2, r3
   2747a:	2301      	movs	r3, #1
   2747c:	4013      	ands	r3, r2
   2747e:	1e5a      	subs	r2, r3, #1
   27480:	4193      	sbcs	r3, r2
   27482:	b2db      	uxtb	r3, r3
}
   27484:	0018      	movs	r0, r3
   27486:	46bd      	mov	sp, r7
   27488:	b004      	add	sp, #16
   2748a:	bd80      	pop	{r7, pc}

0002748c <spi_is_ready_to_read>:
{
   2748c:	b580      	push	{r7, lr}
   2748e:	b084      	sub	sp, #16
   27490:	af00      	add	r7, sp, #0
   27492:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27494:	687b      	ldr	r3, [r7, #4]
   27496:	681b      	ldr	r3, [r3, #0]
   27498:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   2749a:	68fb      	ldr	r3, [r7, #12]
   2749c:	7e1b      	ldrb	r3, [r3, #24]
   2749e:	b2db      	uxtb	r3, r3
   274a0:	001a      	movs	r2, r3
   274a2:	2304      	movs	r3, #4
   274a4:	4013      	ands	r3, r2
   274a6:	1e5a      	subs	r2, r3, #1
   274a8:	4193      	sbcs	r3, r2
   274aa:	b2db      	uxtb	r3, r3
}
   274ac:	0018      	movs	r0, r3
   274ae:	46bd      	mov	sp, r7
   274b0:	b004      	add	sp, #16
   274b2:	bd80      	pop	{r7, pc}

000274b4 <spi_write>:
{
   274b4:	b580      	push	{r7, lr}
   274b6:	b084      	sub	sp, #16
   274b8:	af00      	add	r7, sp, #0
   274ba:	6078      	str	r0, [r7, #4]
   274bc:	000a      	movs	r2, r1
   274be:	1cbb      	adds	r3, r7, #2
   274c0:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   274c2:	687b      	ldr	r3, [r7, #4]
   274c4:	681b      	ldr	r3, [r3, #0]
   274c6:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   274c8:	687b      	ldr	r3, [r7, #4]
   274ca:	0018      	movs	r0, r3
   274cc:	4b0a      	ldr	r3, [pc, #40]	; (274f8 <spi_write+0x44>)
   274ce:	4798      	blx	r3
   274d0:	0003      	movs	r3, r0
   274d2:	001a      	movs	r2, r3
   274d4:	2301      	movs	r3, #1
   274d6:	4053      	eors	r3, r2
   274d8:	b2db      	uxtb	r3, r3
   274da:	2b00      	cmp	r3, #0
   274dc:	d001      	beq.n	274e2 <spi_write+0x2e>
		return STATUS_BUSY;
   274de:	2305      	movs	r3, #5
   274e0:	e006      	b.n	274f0 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   274e2:	1cbb      	adds	r3, r7, #2
   274e4:	881b      	ldrh	r3, [r3, #0]
   274e6:	05db      	lsls	r3, r3, #23
   274e8:	0dda      	lsrs	r2, r3, #23
   274ea:	68fb      	ldr	r3, [r7, #12]
   274ec:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   274ee:	2300      	movs	r3, #0
}
   274f0:	0018      	movs	r0, r3
   274f2:	46bd      	mov	sp, r7
   274f4:	b004      	add	sp, #16
   274f6:	bd80      	pop	{r7, pc}
   274f8:	00027465 	.word	0x00027465

000274fc <spi_read>:
{
   274fc:	b580      	push	{r7, lr}
   274fe:	b084      	sub	sp, #16
   27500:	af00      	add	r7, sp, #0
   27502:	6078      	str	r0, [r7, #4]
   27504:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27506:	687b      	ldr	r3, [r7, #4]
   27508:	681b      	ldr	r3, [r3, #0]
   2750a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   2750c:	687b      	ldr	r3, [r7, #4]
   2750e:	0018      	movs	r0, r3
   27510:	4b1b      	ldr	r3, [pc, #108]	; (27580 <spi_read+0x84>)
   27512:	4798      	blx	r3
   27514:	0003      	movs	r3, r0
   27516:	001a      	movs	r2, r3
   27518:	2301      	movs	r3, #1
   2751a:	4053      	eors	r3, r2
   2751c:	b2db      	uxtb	r3, r3
   2751e:	2b00      	cmp	r3, #0
   27520:	d001      	beq.n	27526 <spi_read+0x2a>
		return STATUS_ERR_IO;
   27522:	2310      	movs	r3, #16
   27524:	e027      	b.n	27576 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   27526:	230f      	movs	r3, #15
   27528:	18fb      	adds	r3, r7, r3
   2752a:	2200      	movs	r2, #0
   2752c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2752e:	68bb      	ldr	r3, [r7, #8]
   27530:	8b5b      	ldrh	r3, [r3, #26]
   27532:	b29b      	uxth	r3, r3
   27534:	001a      	movs	r2, r3
   27536:	2304      	movs	r3, #4
   27538:	4013      	ands	r3, r2
   2753a:	d006      	beq.n	2754a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2753c:	230f      	movs	r3, #15
   2753e:	18fb      	adds	r3, r7, r3
   27540:	221e      	movs	r2, #30
   27542:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27544:	68bb      	ldr	r3, [r7, #8]
   27546:	2204      	movs	r2, #4
   27548:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2754a:	687b      	ldr	r3, [r7, #4]
   2754c:	799b      	ldrb	r3, [r3, #6]
   2754e:	2b01      	cmp	r3, #1
   27550:	d108      	bne.n	27564 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   27552:	68bb      	ldr	r3, [r7, #8]
   27554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27556:	b29b      	uxth	r3, r3
   27558:	05db      	lsls	r3, r3, #23
   2755a:	0ddb      	lsrs	r3, r3, #23
   2755c:	b29a      	uxth	r2, r3
   2755e:	683b      	ldr	r3, [r7, #0]
   27560:	801a      	strh	r2, [r3, #0]
   27562:	e005      	b.n	27570 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   27564:	68bb      	ldr	r3, [r7, #8]
   27566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27568:	b2db      	uxtb	r3, r3
   2756a:	b29a      	uxth	r2, r3
   2756c:	683b      	ldr	r3, [r7, #0]
   2756e:	801a      	strh	r2, [r3, #0]
	return retval;
   27570:	230f      	movs	r3, #15
   27572:	18fb      	adds	r3, r7, r3
   27574:	781b      	ldrb	r3, [r3, #0]
}
   27576:	0018      	movs	r0, r3
   27578:	46bd      	mov	sp, r7
   2757a:	b004      	add	sp, #16
   2757c:	bd80      	pop	{r7, pc}
   2757e:	46c0      	nop			; (mov r8, r8)
   27580:	0002748d 	.word	0x0002748d

00027584 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   27584:	b590      	push	{r4, r7, lr}
   27586:	b089      	sub	sp, #36	; 0x24
   27588:	af00      	add	r7, sp, #0
   2758a:	6078      	str	r0, [r7, #4]
   2758c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2758e:	230c      	movs	r3, #12
   27590:	18fb      	adds	r3, r7, r3
   27592:	2200      	movs	r2, #0
   27594:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27596:	687b      	ldr	r3, [r7, #4]
   27598:	681b      	ldr	r3, [r3, #0]
   2759a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   2759c:	687b      	ldr	r3, [r7, #4]
   2759e:	0018      	movs	r0, r3
   275a0:	4b24      	ldr	r3, [pc, #144]	; (27634 <spi_set_baudrate+0xb0>)
   275a2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   275a4:	46c0      	nop			; (mov r8, r8)
   275a6:	687b      	ldr	r3, [r7, #4]
   275a8:	0018      	movs	r0, r3
   275aa:	4b23      	ldr	r3, [pc, #140]	; (27638 <spi_set_baudrate+0xb4>)
   275ac:	4798      	blx	r3
   275ae:	1e03      	subs	r3, r0, #0
   275b0:	d1f9      	bne.n	275a6 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   275b2:	687b      	ldr	r3, [r7, #4]
   275b4:	681b      	ldr	r3, [r3, #0]
   275b6:	0018      	movs	r0, r3
   275b8:	4b20      	ldr	r3, [pc, #128]	; (2763c <spi_set_baudrate+0xb8>)
   275ba:	4798      	blx	r3
   275bc:	0003      	movs	r3, r0
   275be:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   275c0:	69bb      	ldr	r3, [r7, #24]
   275c2:	3314      	adds	r3, #20
   275c4:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   275c6:	697b      	ldr	r3, [r7, #20]
   275c8:	b2db      	uxtb	r3, r3
   275ca:	0018      	movs	r0, r3
   275cc:	4b1c      	ldr	r3, [pc, #112]	; (27640 <spi_set_baudrate+0xbc>)
   275ce:	4798      	blx	r3
   275d0:	0003      	movs	r3, r0
   275d2:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   275d4:	230f      	movs	r3, #15
   275d6:	18fc      	adds	r4, r7, r3
   275d8:	230c      	movs	r3, #12
   275da:	18fa      	adds	r2, r7, r3
   275dc:	6939      	ldr	r1, [r7, #16]
   275de:	683b      	ldr	r3, [r7, #0]
   275e0:	0018      	movs	r0, r3
   275e2:	4b18      	ldr	r3, [pc, #96]	; (27644 <spi_set_baudrate+0xc0>)
   275e4:	4798      	blx	r3
   275e6:	0003      	movs	r3, r0
   275e8:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   275ea:	230f      	movs	r3, #15
   275ec:	18fb      	adds	r3, r7, r3
   275ee:	781b      	ldrb	r3, [r3, #0]
   275f0:	2b00      	cmp	r3, #0
   275f2:	d001      	beq.n	275f8 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   275f4:	2317      	movs	r3, #23
   275f6:	e018      	b.n	2762a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   275f8:	230c      	movs	r3, #12
   275fa:	18fb      	adds	r3, r7, r3
   275fc:	881b      	ldrh	r3, [r3, #0]
   275fe:	b2da      	uxtb	r2, r3
   27600:	69fb      	ldr	r3, [r7, #28]
   27602:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   27604:	46c0      	nop			; (mov r8, r8)
   27606:	687b      	ldr	r3, [r7, #4]
   27608:	0018      	movs	r0, r3
   2760a:	4b0b      	ldr	r3, [pc, #44]	; (27638 <spi_set_baudrate+0xb4>)
   2760c:	4798      	blx	r3
   2760e:	1e03      	subs	r3, r0, #0
   27610:	d1f9      	bne.n	27606 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   27612:	687b      	ldr	r3, [r7, #4]
   27614:	0018      	movs	r0, r3
   27616:	4b0c      	ldr	r3, [pc, #48]	; (27648 <spi_set_baudrate+0xc4>)
   27618:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2761a:	46c0      	nop			; (mov r8, r8)
   2761c:	687b      	ldr	r3, [r7, #4]
   2761e:	0018      	movs	r0, r3
   27620:	4b05      	ldr	r3, [pc, #20]	; (27638 <spi_set_baudrate+0xb4>)
   27622:	4798      	blx	r3
   27624:	1e03      	subs	r3, r0, #0
   27626:	d1f9      	bne.n	2761c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   27628:	2300      	movs	r3, #0
}
   2762a:	0018      	movs	r0, r3
   2762c:	46bd      	mov	sp, r7
   2762e:	b009      	add	sp, #36	; 0x24
   27630:	bd90      	pop	{r4, r7, pc}
   27632:	46c0      	nop			; (mov r8, r8)
   27634:	000273e1 	.word	0x000273e1
   27638:	00027371 	.word	0x00027371
   2763c:	00026fdd 	.word	0x00026fdd
   27640:	00029991 	.word	0x00029991
   27644:	00026b57 	.word	0x00026b57
   27648:	00027391 	.word	0x00027391

0002764c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   2764c:	b590      	push	{r4, r7, lr}
   2764e:	b093      	sub	sp, #76	; 0x4c
   27650:	af00      	add	r7, sp, #0
   27652:	6078      	str	r0, [r7, #4]
   27654:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27656:	687b      	ldr	r3, [r7, #4]
   27658:	681b      	ldr	r3, [r3, #0]
   2765a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   2765c:	687b      	ldr	r3, [r7, #4]
   2765e:	681b      	ldr	r3, [r3, #0]
   27660:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27662:	231c      	movs	r3, #28
   27664:	18fb      	adds	r3, r7, r3
   27666:	0018      	movs	r0, r3
   27668:	4b75      	ldr	r3, [pc, #468]	; (27840 <_spi_set_config+0x1f4>)
   2766a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2766c:	231c      	movs	r3, #28
   2766e:	18fb      	adds	r3, r7, r3
   27670:	2200      	movs	r2, #0
   27672:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   27674:	683b      	ldr	r3, [r7, #0]
   27676:	781b      	ldrb	r3, [r3, #0]
   27678:	2b00      	cmp	r3, #0
   2767a:	d103      	bne.n	27684 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2767c:	231c      	movs	r3, #28
   2767e:	18fb      	adds	r3, r7, r3
   27680:	2200      	movs	r2, #0
   27682:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27684:	683b      	ldr	r3, [r7, #0]
   27686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27688:	230c      	movs	r3, #12
   2768a:	18fb      	adds	r3, r7, r3
   2768c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2768e:	683b      	ldr	r3, [r7, #0]
   27690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   27692:	230c      	movs	r3, #12
   27694:	18fb      	adds	r3, r7, r3
   27696:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27698:	683b      	ldr	r3, [r7, #0]
   2769a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   2769c:	230c      	movs	r3, #12
   2769e:	18fb      	adds	r3, r7, r3
   276a0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   276a2:	683b      	ldr	r3, [r7, #0]
   276a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   276a6:	230c      	movs	r3, #12
   276a8:	18fb      	adds	r3, r7, r3
   276aa:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   276ac:	2347      	movs	r3, #71	; 0x47
   276ae:	18fb      	adds	r3, r7, r3
   276b0:	2200      	movs	r2, #0
   276b2:	701a      	strb	r2, [r3, #0]
   276b4:	e02c      	b.n	27710 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   276b6:	2347      	movs	r3, #71	; 0x47
   276b8:	18fb      	adds	r3, r7, r3
   276ba:	781a      	ldrb	r2, [r3, #0]
   276bc:	230c      	movs	r3, #12
   276be:	18fb      	adds	r3, r7, r3
   276c0:	0092      	lsls	r2, r2, #2
   276c2:	58d3      	ldr	r3, [r2, r3]
   276c4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   276c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   276c8:	2b00      	cmp	r3, #0
   276ca:	d109      	bne.n	276e0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   276cc:	2347      	movs	r3, #71	; 0x47
   276ce:	18fb      	adds	r3, r7, r3
   276d0:	781a      	ldrb	r2, [r3, #0]
   276d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   276d4:	0011      	movs	r1, r2
   276d6:	0018      	movs	r0, r3
   276d8:	4b5a      	ldr	r3, [pc, #360]	; (27844 <_spi_set_config+0x1f8>)
   276da:	4798      	blx	r3
   276dc:	0003      	movs	r3, r0
   276de:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   276e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   276e2:	3301      	adds	r3, #1
   276e4:	d00d      	beq.n	27702 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   276e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   276e8:	b2da      	uxtb	r2, r3
   276ea:	231c      	movs	r3, #28
   276ec:	18fb      	adds	r3, r7, r3
   276ee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   276f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   276f2:	0c1b      	lsrs	r3, r3, #16
   276f4:	b2db      	uxtb	r3, r3
   276f6:	221c      	movs	r2, #28
   276f8:	18ba      	adds	r2, r7, r2
   276fa:	0011      	movs	r1, r2
   276fc:	0018      	movs	r0, r3
   276fe:	4b52      	ldr	r3, [pc, #328]	; (27848 <_spi_set_config+0x1fc>)
   27700:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   27702:	2347      	movs	r3, #71	; 0x47
   27704:	18fb      	adds	r3, r7, r3
   27706:	781a      	ldrb	r2, [r3, #0]
   27708:	2347      	movs	r3, #71	; 0x47
   2770a:	18fb      	adds	r3, r7, r3
   2770c:	3201      	adds	r2, #1
   2770e:	701a      	strb	r2, [r3, #0]
   27710:	2347      	movs	r3, #71	; 0x47
   27712:	18fb      	adds	r3, r7, r3
   27714:	781b      	ldrb	r3, [r3, #0]
   27716:	2b03      	cmp	r3, #3
   27718:	d9cd      	bls.n	276b6 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2771a:	683b      	ldr	r3, [r7, #0]
   2771c:	781a      	ldrb	r2, [r3, #0]
   2771e:	687b      	ldr	r3, [r7, #4]
   27720:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   27722:	683b      	ldr	r3, [r7, #0]
   27724:	7c1a      	ldrb	r2, [r3, #16]
   27726:	687b      	ldr	r3, [r7, #4]
   27728:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2772a:	683b      	ldr	r3, [r7, #0]
   2772c:	7c9a      	ldrb	r2, [r3, #18]
   2772e:	687b      	ldr	r3, [r7, #4]
   27730:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   27732:	683b      	ldr	r3, [r7, #0]
   27734:	7d1a      	ldrb	r2, [r3, #20]
   27736:	687b      	ldr	r3, [r7, #4]
   27738:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2773a:	230a      	movs	r3, #10
   2773c:	18fb      	adds	r3, r7, r3
   2773e:	2200      	movs	r2, #0
   27740:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   27742:	2300      	movs	r3, #0
   27744:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27746:	2300      	movs	r3, #0
   27748:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2774a:	683b      	ldr	r3, [r7, #0]
   2774c:	781b      	ldrb	r3, [r3, #0]
   2774e:	2b01      	cmp	r3, #1
   27750:	d129      	bne.n	277a6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27752:	687b      	ldr	r3, [r7, #4]
   27754:	681b      	ldr	r3, [r3, #0]
   27756:	0018      	movs	r0, r3
   27758:	4b3c      	ldr	r3, [pc, #240]	; (2784c <_spi_set_config+0x200>)
   2775a:	4798      	blx	r3
   2775c:	0003      	movs	r3, r0
   2775e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27762:	3314      	adds	r3, #20
   27764:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27766:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27768:	b2db      	uxtb	r3, r3
   2776a:	0018      	movs	r0, r3
   2776c:	4b38      	ldr	r3, [pc, #224]	; (27850 <_spi_set_config+0x204>)
   2776e:	4798      	blx	r3
   27770:	0003      	movs	r3, r0
   27772:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   27774:	683b      	ldr	r3, [r7, #0]
   27776:	699b      	ldr	r3, [r3, #24]
   27778:	2223      	movs	r2, #35	; 0x23
   2777a:	18bc      	adds	r4, r7, r2
   2777c:	220a      	movs	r2, #10
   2777e:	18ba      	adds	r2, r7, r2
   27780:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27782:	0018      	movs	r0, r3
   27784:	4b33      	ldr	r3, [pc, #204]	; (27854 <_spi_set_config+0x208>)
   27786:	4798      	blx	r3
   27788:	0003      	movs	r3, r0
   2778a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   2778c:	2323      	movs	r3, #35	; 0x23
   2778e:	18fb      	adds	r3, r7, r3
   27790:	781b      	ldrb	r3, [r3, #0]
   27792:	2b00      	cmp	r3, #0
   27794:	d001      	beq.n	2779a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   27796:	2317      	movs	r3, #23
   27798:	e04e      	b.n	27838 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2779a:	230a      	movs	r3, #10
   2779c:	18fb      	adds	r3, r7, r3
   2779e:	881b      	ldrh	r3, [r3, #0]
   277a0:	b2da      	uxtb	r2, r3
   277a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   277a4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   277a6:	683b      	ldr	r3, [r7, #0]
   277a8:	685b      	ldr	r3, [r3, #4]
   277aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   277ac:	4313      	orrs	r3, r2
   277ae:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   277b0:	683b      	ldr	r3, [r7, #0]
   277b2:	689b      	ldr	r3, [r3, #8]
   277b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   277b6:	4313      	orrs	r3, r2
   277b8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   277ba:	683b      	ldr	r3, [r7, #0]
   277bc:	68db      	ldr	r3, [r3, #12]
   277be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   277c0:	4313      	orrs	r3, r2
   277c2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   277c4:	683b      	ldr	r3, [r7, #0]
   277c6:	7c1b      	ldrb	r3, [r3, #16]
   277c8:	001a      	movs	r2, r3
   277ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   277cc:	4313      	orrs	r3, r2
   277ce:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   277d0:	683b      	ldr	r3, [r7, #0]
   277d2:	7c5b      	ldrb	r3, [r3, #17]
   277d4:	2b00      	cmp	r3, #0
   277d6:	d103      	bne.n	277e0 <_spi_set_config+0x194>
   277d8:	4b1f      	ldr	r3, [pc, #124]	; (27858 <_spi_set_config+0x20c>)
   277da:	4798      	blx	r3
   277dc:	1e03      	subs	r3, r0, #0
   277de:	d003      	beq.n	277e8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   277e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   277e2:	2280      	movs	r2, #128	; 0x80
   277e4:	4313      	orrs	r3, r2
   277e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   277e8:	683b      	ldr	r3, [r7, #0]
   277ea:	7c9b      	ldrb	r3, [r3, #18]
   277ec:	2b00      	cmp	r3, #0
   277ee:	d004      	beq.n	277fa <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   277f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   277f2:	2280      	movs	r2, #128	; 0x80
   277f4:	0292      	lsls	r2, r2, #10
   277f6:	4313      	orrs	r3, r2
   277f8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   277fa:	683b      	ldr	r3, [r7, #0]
   277fc:	7cdb      	ldrb	r3, [r3, #19]
   277fe:	2b00      	cmp	r3, #0
   27800:	d004      	beq.n	2780c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   27802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27804:	2280      	movs	r2, #128	; 0x80
   27806:	0092      	lsls	r2, r2, #2
   27808:	4313      	orrs	r3, r2
   2780a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2780c:	683b      	ldr	r3, [r7, #0]
   2780e:	7d1b      	ldrb	r3, [r3, #20]
   27810:	2b00      	cmp	r3, #0
   27812:	d004      	beq.n	2781e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   27814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27816:	2280      	movs	r2, #128	; 0x80
   27818:	0192      	lsls	r2, r2, #6
   2781a:	4313      	orrs	r3, r2
   2781c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2781e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27820:	681a      	ldr	r2, [r3, #0]
   27822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27824:	431a      	orrs	r2, r3
   27826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27828:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2782a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2782c:	685a      	ldr	r2, [r3, #4]
   2782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   27830:	431a      	orrs	r2, r3
   27832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   27834:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   27836:	2300      	movs	r3, #0
}
   27838:	0018      	movs	r0, r3
   2783a:	46bd      	mov	sp, r7
   2783c:	b013      	add	sp, #76	; 0x4c
   2783e:	bd90      	pop	{r4, r7, pc}
   27840:	00027181 	.word	0x00027181
   27844:	00026e21 	.word	0x00026e21
   27848:	00029bcd 	.word	0x00029bcd
   2784c:	00026fdd 	.word	0x00026fdd
   27850:	00029991 	.word	0x00029991
   27854:	00026b57 	.word	0x00026b57
   27858:	000272f5 	.word	0x000272f5

0002785c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   2785c:	b590      	push	{r4, r7, lr}
   2785e:	b08b      	sub	sp, #44	; 0x2c
   27860:	af00      	add	r7, sp, #0
   27862:	60f8      	str	r0, [r7, #12]
   27864:	60b9      	str	r1, [r7, #8]
   27866:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27868:	68fb      	ldr	r3, [r7, #12]
   2786a:	68ba      	ldr	r2, [r7, #8]
   2786c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   2786e:	68fb      	ldr	r3, [r7, #12]
   27870:	681b      	ldr	r3, [r3, #0]
   27872:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   27874:	6a3b      	ldr	r3, [r7, #32]
   27876:	681b      	ldr	r3, [r3, #0]
   27878:	2202      	movs	r2, #2
   2787a:	4013      	ands	r3, r2
   2787c:	d001      	beq.n	27882 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   2787e:	231c      	movs	r3, #28
   27880:	e09c      	b.n	279bc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   27882:	6a3b      	ldr	r3, [r7, #32]
   27884:	681b      	ldr	r3, [r3, #0]
   27886:	2201      	movs	r2, #1
   27888:	4013      	ands	r3, r2
   2788a:	d001      	beq.n	27890 <spi_init+0x34>
		return STATUS_BUSY;
   2788c:	2305      	movs	r3, #5
   2788e:	e095      	b.n	279bc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27890:	68fb      	ldr	r3, [r7, #12]
   27892:	681b      	ldr	r3, [r3, #0]
   27894:	0018      	movs	r0, r3
   27896:	4b4b      	ldr	r3, [pc, #300]	; (279c4 <spi_init+0x168>)
   27898:	4798      	blx	r3
   2789a:	0003      	movs	r3, r0
   2789c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2789e:	69fb      	ldr	r3, [r7, #28]
   278a0:	3302      	adds	r3, #2
   278a2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   278a4:	69fb      	ldr	r3, [r7, #28]
   278a6:	3314      	adds	r3, #20
   278a8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   278aa:	2201      	movs	r2, #1
   278ac:	69bb      	ldr	r3, [r7, #24]
   278ae:	409a      	lsls	r2, r3
   278b0:	0013      	movs	r3, r2
   278b2:	0019      	movs	r1, r3
   278b4:	2002      	movs	r0, #2
   278b6:	4b44      	ldr	r3, [pc, #272]	; (279c8 <spi_init+0x16c>)
   278b8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   278ba:	2310      	movs	r3, #16
   278bc:	18fb      	adds	r3, r7, r3
   278be:	0018      	movs	r0, r3
   278c0:	4b42      	ldr	r3, [pc, #264]	; (279cc <spi_init+0x170>)
   278c2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   278c4:	687b      	ldr	r3, [r7, #4]
   278c6:	2224      	movs	r2, #36	; 0x24
   278c8:	5c9a      	ldrb	r2, [r3, r2]
   278ca:	2310      	movs	r3, #16
   278cc:	18fb      	adds	r3, r7, r3
   278ce:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   278d0:	697b      	ldr	r3, [r7, #20]
   278d2:	b2db      	uxtb	r3, r3
   278d4:	2210      	movs	r2, #16
   278d6:	18ba      	adds	r2, r7, r2
   278d8:	0011      	movs	r1, r2
   278da:	0018      	movs	r0, r3
   278dc:	4b3c      	ldr	r3, [pc, #240]	; (279d0 <spi_init+0x174>)
   278de:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   278e0:	697b      	ldr	r3, [r7, #20]
   278e2:	b2db      	uxtb	r3, r3
   278e4:	0018      	movs	r0, r3
   278e6:	4b3b      	ldr	r3, [pc, #236]	; (279d4 <spi_init+0x178>)
   278e8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   278ea:	687b      	ldr	r3, [r7, #4]
   278ec:	2224      	movs	r2, #36	; 0x24
   278ee:	5c9b      	ldrb	r3, [r3, r2]
   278f0:	2100      	movs	r1, #0
   278f2:	0018      	movs	r0, r3
   278f4:	4b38      	ldr	r3, [pc, #224]	; (279d8 <spi_init+0x17c>)
   278f6:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   278f8:	687b      	ldr	r3, [r7, #4]
   278fa:	781b      	ldrb	r3, [r3, #0]
   278fc:	2b01      	cmp	r3, #1
   278fe:	d105      	bne.n	2790c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   27900:	6a3b      	ldr	r3, [r7, #32]
   27902:	681b      	ldr	r3, [r3, #0]
   27904:	220c      	movs	r2, #12
   27906:	431a      	orrs	r2, r3
   27908:	6a3b      	ldr	r3, [r7, #32]
   2790a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2790c:	2327      	movs	r3, #39	; 0x27
   2790e:	18fb      	adds	r3, r7, r3
   27910:	2200      	movs	r2, #0
   27912:	701a      	strb	r2, [r3, #0]
   27914:	e010      	b.n	27938 <spi_init+0xdc>
		module->callback[i]        = NULL;
   27916:	2327      	movs	r3, #39	; 0x27
   27918:	18fb      	adds	r3, r7, r3
   2791a:	781b      	ldrb	r3, [r3, #0]
   2791c:	68fa      	ldr	r2, [r7, #12]
   2791e:	3302      	adds	r3, #2
   27920:	009b      	lsls	r3, r3, #2
   27922:	18d3      	adds	r3, r2, r3
   27924:	3304      	adds	r3, #4
   27926:	2200      	movs	r2, #0
   27928:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2792a:	2327      	movs	r3, #39	; 0x27
   2792c:	18fb      	adds	r3, r7, r3
   2792e:	781a      	ldrb	r2, [r3, #0]
   27930:	2327      	movs	r3, #39	; 0x27
   27932:	18fb      	adds	r3, r7, r3
   27934:	3201      	adds	r2, #1
   27936:	701a      	strb	r2, [r3, #0]
   27938:	2327      	movs	r3, #39	; 0x27
   2793a:	18fb      	adds	r3, r7, r3
   2793c:	781b      	ldrb	r3, [r3, #0]
   2793e:	2b06      	cmp	r3, #6
   27940:	d9e9      	bls.n	27916 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   27942:	68fb      	ldr	r3, [r7, #12]
   27944:	2200      	movs	r2, #0
   27946:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   27948:	68fb      	ldr	r3, [r7, #12]
   2794a:	2200      	movs	r2, #0
   2794c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   2794e:	68fb      	ldr	r3, [r7, #12]
   27950:	2200      	movs	r2, #0
   27952:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   27954:	68fb      	ldr	r3, [r7, #12]
   27956:	2200      	movs	r2, #0
   27958:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   2795a:	68fb      	ldr	r3, [r7, #12]
   2795c:	2236      	movs	r2, #54	; 0x36
   2795e:	2100      	movs	r1, #0
   27960:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   27962:	68fb      	ldr	r3, [r7, #12]
   27964:	2237      	movs	r2, #55	; 0x37
   27966:	2100      	movs	r1, #0
   27968:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   2796a:	68fb      	ldr	r3, [r7, #12]
   2796c:	2238      	movs	r2, #56	; 0x38
   2796e:	2100      	movs	r1, #0
   27970:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   27972:	68fb      	ldr	r3, [r7, #12]
   27974:	2203      	movs	r2, #3
   27976:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   27978:	68fb      	ldr	r3, [r7, #12]
   2797a:	2200      	movs	r2, #0
   2797c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   2797e:	68fb      	ldr	r3, [r7, #12]
   27980:	681b      	ldr	r3, [r3, #0]
   27982:	2213      	movs	r2, #19
   27984:	18bc      	adds	r4, r7, r2
   27986:	0018      	movs	r0, r3
   27988:	4b0e      	ldr	r3, [pc, #56]	; (279c4 <spi_init+0x168>)
   2798a:	4798      	blx	r3
   2798c:	0003      	movs	r3, r0
   2798e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   27990:	4a12      	ldr	r2, [pc, #72]	; (279dc <spi_init+0x180>)
   27992:	2313      	movs	r3, #19
   27994:	18fb      	adds	r3, r7, r3
   27996:	781b      	ldrb	r3, [r3, #0]
   27998:	0011      	movs	r1, r2
   2799a:	0018      	movs	r0, r3
   2799c:	4b10      	ldr	r3, [pc, #64]	; (279e0 <spi_init+0x184>)
   2799e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   279a0:	2313      	movs	r3, #19
   279a2:	18fb      	adds	r3, r7, r3
   279a4:	781a      	ldrb	r2, [r3, #0]
   279a6:	4b0f      	ldr	r3, [pc, #60]	; (279e4 <spi_init+0x188>)
   279a8:	0092      	lsls	r2, r2, #2
   279aa:	68f9      	ldr	r1, [r7, #12]
   279ac:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   279ae:	687a      	ldr	r2, [r7, #4]
   279b0:	68fb      	ldr	r3, [r7, #12]
   279b2:	0011      	movs	r1, r2
   279b4:	0018      	movs	r0, r3
   279b6:	4b0c      	ldr	r3, [pc, #48]	; (279e8 <spi_init+0x18c>)
   279b8:	4798      	blx	r3
   279ba:	0003      	movs	r3, r0
}
   279bc:	0018      	movs	r0, r3
   279be:	46bd      	mov	sp, r7
   279c0:	b00b      	add	sp, #44	; 0x2c
   279c2:	bd90      	pop	{r4, r7, pc}
   279c4:	00026fdd 	.word	0x00026fdd
   279c8:	00027299 	.word	0x00027299
   279cc:	00027281 	.word	0x00027281
   279d0:	0002986d 	.word	0x0002986d
   279d4:	000298b1 	.word	0x000298b1
   279d8:	00026d95 	.word	0x00026d95
   279dc:	00027eb5 	.word	0x00027eb5
   279e0:	00027041 	.word	0x00027041
   279e4:	20005784 	.word	0x20005784
   279e8:	0002764d 	.word	0x0002764d

000279ec <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   279ec:	b590      	push	{r4, r7, lr}
   279ee:	b087      	sub	sp, #28
   279f0:	af00      	add	r7, sp, #0
   279f2:	60f8      	str	r0, [r7, #12]
   279f4:	60b9      	str	r1, [r7, #8]
   279f6:	0019      	movs	r1, r3
   279f8:	1dbb      	adds	r3, r7, #6
   279fa:	801a      	strh	r2, [r3, #0]
   279fc:	1d3b      	adds	r3, r7, #4
   279fe:	1c0a      	adds	r2, r1, #0
   27a00:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27a02:	68fb      	ldr	r3, [r7, #12]
   27a04:	2238      	movs	r2, #56	; 0x38
   27a06:	5c9b      	ldrb	r3, [r3, r2]
   27a08:	b2db      	uxtb	r3, r3
   27a0a:	2b05      	cmp	r3, #5
   27a0c:	d101      	bne.n	27a12 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27a0e:	2305      	movs	r3, #5
   27a10:	e07a      	b.n	27b08 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   27a12:	1dbb      	adds	r3, r7, #6
   27a14:	881b      	ldrh	r3, [r3, #0]
   27a16:	2b00      	cmp	r3, #0
   27a18:	d101      	bne.n	27a1e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   27a1a:	2317      	movs	r3, #23
   27a1c:	e074      	b.n	27b08 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   27a1e:	68fb      	ldr	r3, [r7, #12]
   27a20:	79db      	ldrb	r3, [r3, #7]
   27a22:	2201      	movs	r2, #1
   27a24:	4053      	eors	r3, r2
   27a26:	b2db      	uxtb	r3, r3
   27a28:	2b00      	cmp	r3, #0
   27a2a:	d001      	beq.n	27a30 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   27a2c:	231c      	movs	r3, #28
   27a2e:	e06b      	b.n	27b08 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   27a30:	2316      	movs	r3, #22
   27a32:	18fb      	adds	r3, r7, r3
   27a34:	2200      	movs	r2, #0
   27a36:	801a      	strh	r2, [r3, #0]

	while (length--) {
   27a38:	e05e      	b.n	27af8 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   27a3a:	68fb      	ldr	r3, [r7, #12]
   27a3c:	795b      	ldrb	r3, [r3, #5]
   27a3e:	2b01      	cmp	r3, #1
   27a40:	d112      	bne.n	27a68 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   27a42:	46c0      	nop			; (mov r8, r8)
   27a44:	68fb      	ldr	r3, [r7, #12]
   27a46:	0018      	movs	r0, r3
   27a48:	4b31      	ldr	r3, [pc, #196]	; (27b10 <spi_read_buffer_wait+0x124>)
   27a4a:	4798      	blx	r3
   27a4c:	0003      	movs	r3, r0
   27a4e:	001a      	movs	r2, r3
   27a50:	2301      	movs	r3, #1
   27a52:	4053      	eors	r3, r2
   27a54:	b2db      	uxtb	r3, r3
   27a56:	2b00      	cmp	r3, #0
   27a58:	d1f4      	bne.n	27a44 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   27a5a:	1d3b      	adds	r3, r7, #4
   27a5c:	881a      	ldrh	r2, [r3, #0]
   27a5e:	68fb      	ldr	r3, [r7, #12]
   27a60:	0011      	movs	r1, r2
   27a62:	0018      	movs	r0, r3
   27a64:	4b2b      	ldr	r3, [pc, #172]	; (27b14 <spi_read_buffer_wait+0x128>)
   27a66:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   27a68:	46c0      	nop			; (mov r8, r8)
   27a6a:	68fb      	ldr	r3, [r7, #12]
   27a6c:	0018      	movs	r0, r3
   27a6e:	4b2a      	ldr	r3, [pc, #168]	; (27b18 <spi_read_buffer_wait+0x12c>)
   27a70:	4798      	blx	r3
   27a72:	0003      	movs	r3, r0
   27a74:	001a      	movs	r2, r3
   27a76:	2301      	movs	r3, #1
   27a78:	4053      	eors	r3, r2
   27a7a:	b2db      	uxtb	r3, r3
   27a7c:	2b00      	cmp	r3, #0
   27a7e:	d1f4      	bne.n	27a6a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   27a80:	2312      	movs	r3, #18
   27a82:	18fb      	adds	r3, r7, r3
   27a84:	2200      	movs	r2, #0
   27a86:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   27a88:	2315      	movs	r3, #21
   27a8a:	18fc      	adds	r4, r7, r3
   27a8c:	2312      	movs	r3, #18
   27a8e:	18fa      	adds	r2, r7, r3
   27a90:	68fb      	ldr	r3, [r7, #12]
   27a92:	0011      	movs	r1, r2
   27a94:	0018      	movs	r0, r3
   27a96:	4b21      	ldr	r3, [pc, #132]	; (27b1c <spi_read_buffer_wait+0x130>)
   27a98:	4798      	blx	r3
   27a9a:	0003      	movs	r3, r0
   27a9c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   27a9e:	2315      	movs	r3, #21
   27aa0:	18fb      	adds	r3, r7, r3
   27aa2:	781b      	ldrb	r3, [r3, #0]
   27aa4:	2b00      	cmp	r3, #0
   27aa6:	d003      	beq.n	27ab0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   27aa8:	2315      	movs	r3, #21
   27aaa:	18fb      	adds	r3, r7, r3
   27aac:	781b      	ldrb	r3, [r3, #0]
   27aae:	e02b      	b.n	27b08 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   27ab0:	2316      	movs	r3, #22
   27ab2:	18fb      	adds	r3, r7, r3
   27ab4:	881b      	ldrh	r3, [r3, #0]
   27ab6:	2216      	movs	r2, #22
   27ab8:	18ba      	adds	r2, r7, r2
   27aba:	1c59      	adds	r1, r3, #1
   27abc:	8011      	strh	r1, [r2, #0]
   27abe:	001a      	movs	r2, r3
   27ac0:	68bb      	ldr	r3, [r7, #8]
   27ac2:	189b      	adds	r3, r3, r2
   27ac4:	2212      	movs	r2, #18
   27ac6:	18ba      	adds	r2, r7, r2
   27ac8:	8812      	ldrh	r2, [r2, #0]
   27aca:	b2d2      	uxtb	r2, r2
   27acc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27ace:	68fb      	ldr	r3, [r7, #12]
   27ad0:	799b      	ldrb	r3, [r3, #6]
   27ad2:	2b01      	cmp	r3, #1
   27ad4:	d110      	bne.n	27af8 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   27ad6:	2316      	movs	r3, #22
   27ad8:	18fb      	adds	r3, r7, r3
   27ada:	881b      	ldrh	r3, [r3, #0]
   27adc:	2216      	movs	r2, #22
   27ade:	18ba      	adds	r2, r7, r2
   27ae0:	1c59      	adds	r1, r3, #1
   27ae2:	8011      	strh	r1, [r2, #0]
   27ae4:	001a      	movs	r2, r3
   27ae6:	68bb      	ldr	r3, [r7, #8]
   27ae8:	189b      	adds	r3, r3, r2
   27aea:	2212      	movs	r2, #18
   27aec:	18ba      	adds	r2, r7, r2
   27aee:	8812      	ldrh	r2, [r2, #0]
   27af0:	0a12      	lsrs	r2, r2, #8
   27af2:	b292      	uxth	r2, r2
   27af4:	b2d2      	uxtb	r2, r2
   27af6:	701a      	strb	r2, [r3, #0]
	while (length--) {
   27af8:	1dbb      	adds	r3, r7, #6
   27afa:	881b      	ldrh	r3, [r3, #0]
   27afc:	1dba      	adds	r2, r7, #6
   27afe:	1e59      	subs	r1, r3, #1
   27b00:	8011      	strh	r1, [r2, #0]
   27b02:	2b00      	cmp	r3, #0
   27b04:	d199      	bne.n	27a3a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   27b06:	2300      	movs	r3, #0
}
   27b08:	0018      	movs	r0, r3
   27b0a:	46bd      	mov	sp, r7
   27b0c:	b007      	add	sp, #28
   27b0e:	bd90      	pop	{r4, r7, pc}
   27b10:	00027465 	.word	0x00027465
   27b14:	000274b5 	.word	0x000274b5
   27b18:	0002748d 	.word	0x0002748d
   27b1c:	000274fd 	.word	0x000274fd

00027b20 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   27b20:	b580      	push	{r7, lr}
   27b22:	b086      	sub	sp, #24
   27b24:	af00      	add	r7, sp, #0
   27b26:	60f8      	str	r0, [r7, #12]
   27b28:	60b9      	str	r1, [r7, #8]
   27b2a:	1dfb      	adds	r3, r7, #7
   27b2c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   27b2e:	68fb      	ldr	r3, [r7, #12]
   27b30:	795b      	ldrb	r3, [r3, #5]
   27b32:	2b01      	cmp	r3, #1
   27b34:	d001      	beq.n	27b3a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   27b36:	2315      	movs	r3, #21
   27b38:	e05c      	b.n	27bf4 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   27b3a:	68fb      	ldr	r3, [r7, #12]
   27b3c:	7a1b      	ldrb	r3, [r3, #8]
   27b3e:	2201      	movs	r2, #1
   27b40:	4053      	eors	r3, r2
   27b42:	b2db      	uxtb	r3, r3
   27b44:	2b00      	cmp	r3, #0
   27b46:	d054      	beq.n	27bf2 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   27b48:	1dfb      	adds	r3, r7, #7
   27b4a:	781b      	ldrb	r3, [r3, #0]
   27b4c:	2b00      	cmp	r3, #0
   27b4e:	d04a      	beq.n	27be6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   27b50:	68bb      	ldr	r3, [r7, #8]
   27b52:	785b      	ldrb	r3, [r3, #1]
   27b54:	2b00      	cmp	r3, #0
   27b56:	d03f      	beq.n	27bd8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   27b58:	68fb      	ldr	r3, [r7, #12]
   27b5a:	0018      	movs	r0, r3
   27b5c:	4b27      	ldr	r3, [pc, #156]	; (27bfc <spi_select_slave+0xdc>)
   27b5e:	4798      	blx	r3
   27b60:	0003      	movs	r3, r0
   27b62:	001a      	movs	r2, r3
   27b64:	2301      	movs	r3, #1
   27b66:	4053      	eors	r3, r2
   27b68:	b2db      	uxtb	r3, r3
   27b6a:	2b00      	cmp	r3, #0
   27b6c:	d007      	beq.n	27b7e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   27b6e:	68bb      	ldr	r3, [r7, #8]
   27b70:	781b      	ldrb	r3, [r3, #0]
   27b72:	2101      	movs	r1, #1
   27b74:	0018      	movs	r0, r3
   27b76:	4b22      	ldr	r3, [pc, #136]	; (27c00 <spi_select_slave+0xe0>)
   27b78:	4798      	blx	r3
					return STATUS_BUSY;
   27b7a:	2305      	movs	r3, #5
   27b7c:	e03a      	b.n	27bf4 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27b7e:	68bb      	ldr	r3, [r7, #8]
   27b80:	781b      	ldrb	r3, [r3, #0]
   27b82:	2100      	movs	r1, #0
   27b84:	0018      	movs	r0, r3
   27b86:	4b1e      	ldr	r3, [pc, #120]	; (27c00 <spi_select_slave+0xe0>)
   27b88:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   27b8a:	68bb      	ldr	r3, [r7, #8]
   27b8c:	789b      	ldrb	r3, [r3, #2]
   27b8e:	b29a      	uxth	r2, r3
   27b90:	68fb      	ldr	r3, [r7, #12]
   27b92:	0011      	movs	r1, r2
   27b94:	0018      	movs	r0, r3
   27b96:	4b1b      	ldr	r3, [pc, #108]	; (27c04 <spi_select_slave+0xe4>)
   27b98:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   27b9a:	68fb      	ldr	r3, [r7, #12]
   27b9c:	79db      	ldrb	r3, [r3, #7]
   27b9e:	2201      	movs	r2, #1
   27ba0:	4053      	eors	r3, r2
   27ba2:	b2db      	uxtb	r3, r3
   27ba4:	2b00      	cmp	r3, #0
   27ba6:	d024      	beq.n	27bf2 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   27ba8:	46c0      	nop			; (mov r8, r8)
   27baa:	68fb      	ldr	r3, [r7, #12]
   27bac:	0018      	movs	r0, r3
   27bae:	4b16      	ldr	r3, [pc, #88]	; (27c08 <spi_select_slave+0xe8>)
   27bb0:	4798      	blx	r3
   27bb2:	0003      	movs	r3, r0
   27bb4:	001a      	movs	r2, r3
   27bb6:	2301      	movs	r3, #1
   27bb8:	4053      	eors	r3, r2
   27bba:	b2db      	uxtb	r3, r3
   27bbc:	2b00      	cmp	r3, #0
   27bbe:	d1f4      	bne.n	27baa <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   27bc0:	2316      	movs	r3, #22
   27bc2:	18fb      	adds	r3, r7, r3
   27bc4:	2200      	movs	r2, #0
   27bc6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   27bc8:	2316      	movs	r3, #22
   27bca:	18fa      	adds	r2, r7, r3
   27bcc:	68fb      	ldr	r3, [r7, #12]
   27bce:	0011      	movs	r1, r2
   27bd0:	0018      	movs	r0, r3
   27bd2:	4b0e      	ldr	r3, [pc, #56]	; (27c0c <spi_select_slave+0xec>)
   27bd4:	4798      	blx	r3
   27bd6:	e00c      	b.n	27bf2 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   27bd8:	68bb      	ldr	r3, [r7, #8]
   27bda:	781b      	ldrb	r3, [r3, #0]
   27bdc:	2100      	movs	r1, #0
   27bde:	0018      	movs	r0, r3
   27be0:	4b07      	ldr	r3, [pc, #28]	; (27c00 <spi_select_slave+0xe0>)
   27be2:	4798      	blx	r3
   27be4:	e005      	b.n	27bf2 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   27be6:	68bb      	ldr	r3, [r7, #8]
   27be8:	781b      	ldrb	r3, [r3, #0]
   27bea:	2101      	movs	r1, #1
   27bec:	0018      	movs	r0, r3
   27bee:	4b04      	ldr	r3, [pc, #16]	; (27c00 <spi_select_slave+0xe0>)
   27bf0:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   27bf2:	2300      	movs	r3, #0
}
   27bf4:	0018      	movs	r0, r3
   27bf6:	46bd      	mov	sp, r7
   27bf8:	b006      	add	sp, #24
   27bfa:	bd80      	pop	{r7, pc}
   27bfc:	00027465 	.word	0x00027465
   27c00:	0002722d 	.word	0x0002722d
   27c04:	000274b5 	.word	0x000274b5
   27c08:	0002748d 	.word	0x0002748d
   27c0c:	000274fd 	.word	0x000274fd

00027c10 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   27c10:	b580      	push	{r7, lr}
   27c12:	b086      	sub	sp, #24
   27c14:	af00      	add	r7, sp, #0
   27c16:	60f8      	str	r0, [r7, #12]
   27c18:	60b9      	str	r1, [r7, #8]
   27c1a:	1dbb      	adds	r3, r7, #6
   27c1c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   27c1e:	68fb      	ldr	r3, [r7, #12]
   27c20:	2238      	movs	r2, #56	; 0x38
   27c22:	5c9b      	ldrb	r3, [r3, r2]
   27c24:	b2db      	uxtb	r3, r3
   27c26:	2b05      	cmp	r3, #5
   27c28:	d101      	bne.n	27c2e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   27c2a:	2305      	movs	r3, #5
   27c2c:	e087      	b.n	27d3e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   27c2e:	1dbb      	adds	r3, r7, #6
   27c30:	881b      	ldrh	r3, [r3, #0]
   27c32:	2b00      	cmp	r3, #0
   27c34:	d101      	bne.n	27c3a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   27c36:	2317      	movs	r3, #23
   27c38:	e081      	b.n	27d3e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   27c3a:	2316      	movs	r3, #22
   27c3c:	18fb      	adds	r3, r7, r3
   27c3e:	2200      	movs	r2, #0
   27c40:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   27c42:	2314      	movs	r3, #20
   27c44:	18fb      	adds	r3, r7, r3
   27c46:	1dba      	adds	r2, r7, #6
   27c48:	8812      	ldrh	r2, [r2, #0]
   27c4a:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   27c4c:	e05f      	b.n	27d0e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   27c4e:	46c0      	nop			; (mov r8, r8)
   27c50:	68fb      	ldr	r3, [r7, #12]
   27c52:	0018      	movs	r0, r3
   27c54:	4b3c      	ldr	r3, [pc, #240]	; (27d48 <spi_write_buffer_wait+0x138>)
   27c56:	4798      	blx	r3
   27c58:	0003      	movs	r3, r0
   27c5a:	001a      	movs	r2, r3
   27c5c:	2301      	movs	r3, #1
   27c5e:	4053      	eors	r3, r2
   27c60:	b2db      	uxtb	r3, r3
   27c62:	2b00      	cmp	r3, #0
   27c64:	d1f4      	bne.n	27c50 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   27c66:	2316      	movs	r3, #22
   27c68:	18fb      	adds	r3, r7, r3
   27c6a:	881b      	ldrh	r3, [r3, #0]
   27c6c:	2216      	movs	r2, #22
   27c6e:	18ba      	adds	r2, r7, r2
   27c70:	1c59      	adds	r1, r3, #1
   27c72:	8011      	strh	r1, [r2, #0]
   27c74:	001a      	movs	r2, r3
   27c76:	68bb      	ldr	r3, [r7, #8]
   27c78:	189b      	adds	r3, r3, r2
   27c7a:	781a      	ldrb	r2, [r3, #0]
   27c7c:	2312      	movs	r3, #18
   27c7e:	18fb      	adds	r3, r7, r3
   27c80:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27c82:	68fb      	ldr	r3, [r7, #12]
   27c84:	799b      	ldrb	r3, [r3, #6]
   27c86:	2b01      	cmp	r3, #1
   27c88:	d115      	bne.n	27cb6 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   27c8a:	2316      	movs	r3, #22
   27c8c:	18fb      	adds	r3, r7, r3
   27c8e:	881b      	ldrh	r3, [r3, #0]
   27c90:	2216      	movs	r2, #22
   27c92:	18ba      	adds	r2, r7, r2
   27c94:	1c59      	adds	r1, r3, #1
   27c96:	8011      	strh	r1, [r2, #0]
   27c98:	001a      	movs	r2, r3
   27c9a:	68bb      	ldr	r3, [r7, #8]
   27c9c:	189b      	adds	r3, r3, r2
   27c9e:	781b      	ldrb	r3, [r3, #0]
   27ca0:	021b      	lsls	r3, r3, #8
   27ca2:	b21a      	sxth	r2, r3
   27ca4:	2312      	movs	r3, #18
   27ca6:	18fb      	adds	r3, r7, r3
   27ca8:	2100      	movs	r1, #0
   27caa:	5e5b      	ldrsh	r3, [r3, r1]
   27cac:	4313      	orrs	r3, r2
   27cae:	b21a      	sxth	r2, r3
   27cb0:	2312      	movs	r3, #18
   27cb2:	18fb      	adds	r3, r7, r3
   27cb4:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   27cb6:	2312      	movs	r3, #18
   27cb8:	18fb      	adds	r3, r7, r3
   27cba:	881a      	ldrh	r2, [r3, #0]
   27cbc:	68fb      	ldr	r3, [r7, #12]
   27cbe:	0011      	movs	r1, r2
   27cc0:	0018      	movs	r0, r3
   27cc2:	4b22      	ldr	r3, [pc, #136]	; (27d4c <spi_write_buffer_wait+0x13c>)
   27cc4:	4798      	blx	r3

		if (module->receiver_enabled) {
   27cc6:	68fb      	ldr	r3, [r7, #12]
   27cc8:	79db      	ldrb	r3, [r3, #7]
   27cca:	2214      	movs	r2, #20
   27ccc:	18ba      	adds	r2, r7, r2
   27cce:	2114      	movs	r1, #20
   27cd0:	1879      	adds	r1, r7, r1
   27cd2:	8809      	ldrh	r1, [r1, #0]
   27cd4:	8011      	strh	r1, [r2, #0]
   27cd6:	2b00      	cmp	r3, #0
   27cd8:	d019      	beq.n	27d0e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   27cda:	46c0      	nop			; (mov r8, r8)
   27cdc:	68fb      	ldr	r3, [r7, #12]
   27cde:	0018      	movs	r0, r3
   27ce0:	4b1b      	ldr	r3, [pc, #108]	; (27d50 <spi_write_buffer_wait+0x140>)
   27ce2:	4798      	blx	r3
   27ce4:	0003      	movs	r3, r0
   27ce6:	001a      	movs	r2, r3
   27ce8:	2301      	movs	r3, #1
   27cea:	4053      	eors	r3, r2
   27cec:	b2db      	uxtb	r3, r3
   27cee:	2b00      	cmp	r3, #0
   27cf0:	d1f4      	bne.n	27cdc <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   27cf2:	2310      	movs	r3, #16
   27cf4:	18fa      	adds	r2, r7, r3
   27cf6:	68fb      	ldr	r3, [r7, #12]
   27cf8:	0011      	movs	r1, r2
   27cfa:	0018      	movs	r0, r3
   27cfc:	4b15      	ldr	r3, [pc, #84]	; (27d54 <spi_write_buffer_wait+0x144>)
   27cfe:	4798      	blx	r3
			flush_length--;
   27d00:	2314      	movs	r3, #20
   27d02:	18fb      	adds	r3, r7, r3
   27d04:	881a      	ldrh	r2, [r3, #0]
   27d06:	2314      	movs	r3, #20
   27d08:	18fb      	adds	r3, r7, r3
   27d0a:	3a01      	subs	r2, #1
   27d0c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   27d0e:	1dbb      	adds	r3, r7, #6
   27d10:	881b      	ldrh	r3, [r3, #0]
   27d12:	1dba      	adds	r2, r7, #6
   27d14:	1e59      	subs	r1, r3, #1
   27d16:	8011      	strh	r1, [r2, #0]
   27d18:	2b00      	cmp	r3, #0
   27d1a:	d198      	bne.n	27c4e <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   27d1c:	68fb      	ldr	r3, [r7, #12]
   27d1e:	795b      	ldrb	r3, [r3, #5]
   27d20:	2b01      	cmp	r3, #1
   27d22:	d10b      	bne.n	27d3c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   27d24:	46c0      	nop			; (mov r8, r8)
   27d26:	68fb      	ldr	r3, [r7, #12]
   27d28:	0018      	movs	r0, r3
   27d2a:	4b0b      	ldr	r3, [pc, #44]	; (27d58 <spi_write_buffer_wait+0x148>)
   27d2c:	4798      	blx	r3
   27d2e:	0003      	movs	r3, r0
   27d30:	001a      	movs	r2, r3
   27d32:	2301      	movs	r3, #1
   27d34:	4053      	eors	r3, r2
   27d36:	b2db      	uxtb	r3, r3
   27d38:	2b00      	cmp	r3, #0
   27d3a:	d1f4      	bne.n	27d26 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   27d3c:	2300      	movs	r3, #0
}
   27d3e:	0018      	movs	r0, r3
   27d40:	46bd      	mov	sp, r7
   27d42:	b006      	add	sp, #24
   27d44:	bd80      	pop	{r7, pc}
   27d46:	46c0      	nop			; (mov r8, r8)
   27d48:	00027465 	.word	0x00027465
   27d4c:	000274b5 	.word	0x000274b5
   27d50:	0002748d 	.word	0x0002748d
   27d54:	000274fd 	.word	0x000274fd
   27d58:	0002743d 	.word	0x0002743d

00027d5c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   27d5c:	b580      	push	{r7, lr}
   27d5e:	b084      	sub	sp, #16
   27d60:	af00      	add	r7, sp, #0
   27d62:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27d64:	687b      	ldr	r3, [r7, #4]
   27d66:	681b      	ldr	r3, [r3, #0]
   27d68:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   27d6a:	687b      	ldr	r3, [r7, #4]
   27d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27d6e:	781b      	ldrb	r3, [r3, #0]
   27d70:	b2da      	uxtb	r2, r3
   27d72:	230e      	movs	r3, #14
   27d74:	18fb      	adds	r3, r7, r3
   27d76:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   27d78:	687b      	ldr	r3, [r7, #4]
   27d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27d7c:	1c5a      	adds	r2, r3, #1
   27d7e:	687b      	ldr	r3, [r7, #4]
   27d80:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27d82:	687b      	ldr	r3, [r7, #4]
   27d84:	799b      	ldrb	r3, [r3, #6]
   27d86:	2b01      	cmp	r3, #1
   27d88:	d113      	bne.n	27db2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   27d8a:	687b      	ldr	r3, [r7, #4]
   27d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27d8e:	781b      	ldrb	r3, [r3, #0]
   27d90:	b2db      	uxtb	r3, r3
   27d92:	021b      	lsls	r3, r3, #8
   27d94:	b21a      	sxth	r2, r3
   27d96:	230e      	movs	r3, #14
   27d98:	18fb      	adds	r3, r7, r3
   27d9a:	2100      	movs	r1, #0
   27d9c:	5e5b      	ldrsh	r3, [r3, r1]
   27d9e:	4313      	orrs	r3, r2
   27da0:	b21a      	sxth	r2, r3
   27da2:	230e      	movs	r3, #14
   27da4:	18fb      	adds	r3, r7, r3
   27da6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   27da8:	687b      	ldr	r3, [r7, #4]
   27daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27dac:	1c5a      	adds	r2, r3, #1
   27dae:	687b      	ldr	r3, [r7, #4]
   27db0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   27db2:	230e      	movs	r3, #14
   27db4:	18fb      	adds	r3, r7, r3
   27db6:	881b      	ldrh	r3, [r3, #0]
   27db8:	05db      	lsls	r3, r3, #23
   27dba:	0dda      	lsrs	r2, r3, #23
   27dbc:	68bb      	ldr	r3, [r7, #8]
   27dbe:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   27dc0:	687b      	ldr	r3, [r7, #4]
   27dc2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27dc4:	b29b      	uxth	r3, r3
   27dc6:	3b01      	subs	r3, #1
   27dc8:	b29a      	uxth	r2, r3
   27dca:	687b      	ldr	r3, [r7, #4]
   27dcc:	869a      	strh	r2, [r3, #52]	; 0x34
}
   27dce:	46c0      	nop			; (mov r8, r8)
   27dd0:	46bd      	mov	sp, r7
   27dd2:	b004      	add	sp, #16
   27dd4:	bd80      	pop	{r7, pc}
	...

00027dd8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   27dd8:	b580      	push	{r7, lr}
   27dda:	b084      	sub	sp, #16
   27ddc:	af00      	add	r7, sp, #0
   27dde:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27de0:	687b      	ldr	r3, [r7, #4]
   27de2:	681b      	ldr	r3, [r3, #0]
   27de4:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   27de6:	4b08      	ldr	r3, [pc, #32]	; (27e08 <_spi_write_dummy+0x30>)
   27de8:	881b      	ldrh	r3, [r3, #0]
   27dea:	001a      	movs	r2, r3
   27dec:	68fb      	ldr	r3, [r7, #12]
   27dee:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27df0:	687b      	ldr	r3, [r7, #4]
   27df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27df4:	b29b      	uxth	r3, r3
   27df6:	3b01      	subs	r3, #1
   27df8:	b29a      	uxth	r2, r3
   27dfa:	687b      	ldr	r3, [r7, #4]
   27dfc:	865a      	strh	r2, [r3, #50]	; 0x32
}
   27dfe:	46c0      	nop			; (mov r8, r8)
   27e00:	46bd      	mov	sp, r7
   27e02:	b004      	add	sp, #16
   27e04:	bd80      	pop	{r7, pc}
   27e06:	46c0      	nop			; (mov r8, r8)
   27e08:	2000579c 	.word	0x2000579c

00027e0c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   27e0c:	b580      	push	{r7, lr}
   27e0e:	b084      	sub	sp, #16
   27e10:	af00      	add	r7, sp, #0
   27e12:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27e14:	687b      	ldr	r3, [r7, #4]
   27e16:	681b      	ldr	r3, [r3, #0]
   27e18:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   27e1a:	230a      	movs	r3, #10
   27e1c:	18fb      	adds	r3, r7, r3
   27e1e:	2200      	movs	r2, #0
   27e20:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   27e22:	68fb      	ldr	r3, [r7, #12]
   27e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27e26:	230a      	movs	r3, #10
   27e28:	18fb      	adds	r3, r7, r3
   27e2a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   27e2c:	687b      	ldr	r3, [r7, #4]
   27e2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27e30:	b29b      	uxth	r3, r3
   27e32:	3b01      	subs	r3, #1
   27e34:	b29a      	uxth	r2, r3
   27e36:	687b      	ldr	r3, [r7, #4]
   27e38:	865a      	strh	r2, [r3, #50]	; 0x32
}
   27e3a:	46c0      	nop			; (mov r8, r8)
   27e3c:	46bd      	mov	sp, r7
   27e3e:	b004      	add	sp, #16
   27e40:	bd80      	pop	{r7, pc}

00027e42 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   27e42:	b580      	push	{r7, lr}
   27e44:	b084      	sub	sp, #16
   27e46:	af00      	add	r7, sp, #0
   27e48:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27e4a:	687b      	ldr	r3, [r7, #4]
   27e4c:	681b      	ldr	r3, [r3, #0]
   27e4e:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   27e50:	68fb      	ldr	r3, [r7, #12]
   27e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e54:	b29a      	uxth	r2, r3
   27e56:	230a      	movs	r3, #10
   27e58:	18fb      	adds	r3, r7, r3
   27e5a:	05d2      	lsls	r2, r2, #23
   27e5c:	0dd2      	lsrs	r2, r2, #23
   27e5e:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   27e60:	687b      	ldr	r3, [r7, #4]
   27e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e64:	220a      	movs	r2, #10
   27e66:	18ba      	adds	r2, r7, r2
   27e68:	8812      	ldrh	r2, [r2, #0]
   27e6a:	b2d2      	uxtb	r2, r2
   27e6c:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   27e6e:	687b      	ldr	r3, [r7, #4]
   27e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e72:	1c5a      	adds	r2, r3, #1
   27e74:	687b      	ldr	r3, [r7, #4]
   27e76:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27e78:	687b      	ldr	r3, [r7, #4]
   27e7a:	799b      	ldrb	r3, [r3, #6]
   27e7c:	2b01      	cmp	r3, #1
   27e7e:	d10d      	bne.n	27e9c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   27e80:	687b      	ldr	r3, [r7, #4]
   27e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e84:	220a      	movs	r2, #10
   27e86:	18ba      	adds	r2, r7, r2
   27e88:	8812      	ldrh	r2, [r2, #0]
   27e8a:	0a12      	lsrs	r2, r2, #8
   27e8c:	b292      	uxth	r2, r2
   27e8e:	b2d2      	uxtb	r2, r2
   27e90:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   27e92:	687b      	ldr	r3, [r7, #4]
   27e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e96:	1c5a      	adds	r2, r3, #1
   27e98:	687b      	ldr	r3, [r7, #4]
   27e9a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   27e9c:	687b      	ldr	r3, [r7, #4]
   27e9e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   27ea0:	b29b      	uxth	r3, r3
   27ea2:	3b01      	subs	r3, #1
   27ea4:	b29a      	uxth	r2, r3
   27ea6:	687b      	ldr	r3, [r7, #4]
   27ea8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   27eaa:	46c0      	nop			; (mov r8, r8)
   27eac:	46bd      	mov	sp, r7
   27eae:	b004      	add	sp, #16
   27eb0:	bd80      	pop	{r7, pc}
	...

00027eb4 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   27eb4:	b580      	push	{r7, lr}
   27eb6:	b086      	sub	sp, #24
   27eb8:	af00      	add	r7, sp, #0
   27eba:	0002      	movs	r2, r0
   27ebc:	1dfb      	adds	r3, r7, #7
   27ebe:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   27ec0:	1dfb      	adds	r3, r7, #7
   27ec2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   27ec4:	4b96      	ldr	r3, [pc, #600]	; (28120 <_spi_interrupt_handler+0x26c>)
   27ec6:	0092      	lsls	r2, r2, #2
   27ec8:	58d3      	ldr	r3, [r2, r3]
   27eca:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   27ecc:	697b      	ldr	r3, [r7, #20]
   27ece:	681b      	ldr	r3, [r3, #0]
   27ed0:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   27ed2:	697b      	ldr	r3, [r7, #20]
   27ed4:	2237      	movs	r2, #55	; 0x37
   27ed6:	5c9a      	ldrb	r2, [r3, r2]
   27ed8:	697b      	ldr	r3, [r7, #20]
   27eda:	2136      	movs	r1, #54	; 0x36
   27edc:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   27ede:	230f      	movs	r3, #15
   27ee0:	18fb      	adds	r3, r7, r3
   27ee2:	400a      	ands	r2, r1
   27ee4:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   27ee6:	693b      	ldr	r3, [r7, #16]
   27ee8:	7e1b      	ldrb	r3, [r3, #24]
   27eea:	b2da      	uxtb	r2, r3
   27eec:	230c      	movs	r3, #12
   27eee:	18fb      	adds	r3, r7, r3
   27ef0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   27ef2:	693b      	ldr	r3, [r7, #16]
   27ef4:	7d9b      	ldrb	r3, [r3, #22]
   27ef6:	b2db      	uxtb	r3, r3
   27ef8:	b29a      	uxth	r2, r3
   27efa:	230c      	movs	r3, #12
   27efc:	18fb      	adds	r3, r7, r3
   27efe:	210c      	movs	r1, #12
   27f00:	1879      	adds	r1, r7, r1
   27f02:	8809      	ldrh	r1, [r1, #0]
   27f04:	400a      	ands	r2, r1
   27f06:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   27f08:	230c      	movs	r3, #12
   27f0a:	18fb      	adds	r3, r7, r3
   27f0c:	881b      	ldrh	r3, [r3, #0]
   27f0e:	2201      	movs	r2, #1
   27f10:	4013      	ands	r3, r2
   27f12:	d038      	beq.n	27f86 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   27f14:	697b      	ldr	r3, [r7, #20]
   27f16:	795b      	ldrb	r3, [r3, #5]
   27f18:	2b01      	cmp	r3, #1
   27f1a:	d110      	bne.n	27f3e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   27f1c:	697b      	ldr	r3, [r7, #20]
   27f1e:	7a5b      	ldrb	r3, [r3, #9]
   27f20:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   27f22:	2b00      	cmp	r3, #0
   27f24:	d10b      	bne.n	27f3e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   27f26:	697b      	ldr	r3, [r7, #20]
   27f28:	0018      	movs	r0, r3
   27f2a:	4b7e      	ldr	r3, [pc, #504]	; (28124 <_spi_interrupt_handler+0x270>)
   27f2c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   27f2e:	697b      	ldr	r3, [r7, #20]
   27f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27f32:	b29b      	uxth	r3, r3
   27f34:	2b00      	cmp	r3, #0
   27f36:	d102      	bne.n	27f3e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27f38:	693b      	ldr	r3, [r7, #16]
   27f3a:	2201      	movs	r2, #1
   27f3c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   27f3e:	697b      	ldr	r3, [r7, #20]
   27f40:	795b      	ldrb	r3, [r3, #5]
		if (0
   27f42:	2b01      	cmp	r3, #1
   27f44:	d11f      	bne.n	27f86 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   27f46:	697b      	ldr	r3, [r7, #20]
   27f48:	7a5b      	ldrb	r3, [r3, #9]
   27f4a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   27f4c:	2b00      	cmp	r3, #0
   27f4e:	d01a      	beq.n	27f86 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   27f50:	697b      	ldr	r3, [r7, #20]
   27f52:	0018      	movs	r0, r3
   27f54:	4b74      	ldr	r3, [pc, #464]	; (28128 <_spi_interrupt_handler+0x274>)
   27f56:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   27f58:	697b      	ldr	r3, [r7, #20]
   27f5a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   27f5c:	b29b      	uxth	r3, r3
   27f5e:	2b00      	cmp	r3, #0
   27f60:	d111      	bne.n	27f86 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   27f62:	693b      	ldr	r3, [r7, #16]
   27f64:	2201      	movs	r2, #1
   27f66:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   27f68:	697b      	ldr	r3, [r7, #20]
   27f6a:	7a5b      	ldrb	r3, [r3, #9]
   27f6c:	b2db      	uxtb	r3, r3
   27f6e:	2b01      	cmp	r3, #1
   27f70:	d109      	bne.n	27f86 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   27f72:	697b      	ldr	r3, [r7, #20]
   27f74:	79db      	ldrb	r3, [r3, #7]
   27f76:	2201      	movs	r2, #1
   27f78:	4053      	eors	r3, r2
   27f7a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   27f7c:	2b00      	cmp	r3, #0
   27f7e:	d002      	beq.n	27f86 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   27f80:	693b      	ldr	r3, [r7, #16]
   27f82:	2202      	movs	r2, #2
   27f84:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   27f86:	230c      	movs	r3, #12
   27f88:	18fb      	adds	r3, r7, r3
   27f8a:	881b      	ldrh	r3, [r3, #0]
   27f8c:	2204      	movs	r2, #4
   27f8e:	4013      	ands	r3, r2
   27f90:	d100      	bne.n	27f94 <_spi_interrupt_handler+0xe0>
   27f92:	e07e      	b.n	28092 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27f94:	693b      	ldr	r3, [r7, #16]
   27f96:	8b5b      	ldrh	r3, [r3, #26]
   27f98:	b29b      	uxth	r3, r3
   27f9a:	001a      	movs	r2, r3
   27f9c:	2304      	movs	r3, #4
   27f9e:	4013      	ands	r3, r2
   27fa0:	d022      	beq.n	27fe8 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   27fa2:	697b      	ldr	r3, [r7, #20]
   27fa4:	7a5b      	ldrb	r3, [r3, #9]
   27fa6:	b2db      	uxtb	r3, r3
   27fa8:	2b01      	cmp	r3, #1
   27faa:	d014      	beq.n	27fd6 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   27fac:	697b      	ldr	r3, [r7, #20]
   27fae:	2238      	movs	r2, #56	; 0x38
   27fb0:	211e      	movs	r1, #30
   27fb2:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   27fb4:	697b      	ldr	r3, [r7, #20]
   27fb6:	2203      	movs	r2, #3
   27fb8:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   27fba:	693b      	ldr	r3, [r7, #16]
   27fbc:	2205      	movs	r2, #5
   27fbe:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   27fc0:	230f      	movs	r3, #15
   27fc2:	18fb      	adds	r3, r7, r3
   27fc4:	781b      	ldrb	r3, [r3, #0]
   27fc6:	2208      	movs	r2, #8
   27fc8:	4013      	ands	r3, r2
   27fca:	d004      	beq.n	27fd6 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   27fcc:	697b      	ldr	r3, [r7, #20]
   27fce:	699b      	ldr	r3, [r3, #24]
   27fd0:	697a      	ldr	r2, [r7, #20]
   27fd2:	0010      	movs	r0, r2
   27fd4:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   27fd6:	693b      	ldr	r3, [r7, #16]
   27fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27fda:	230a      	movs	r3, #10
   27fdc:	18fb      	adds	r3, r7, r3
   27fde:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27fe0:	693b      	ldr	r3, [r7, #16]
   27fe2:	2204      	movs	r2, #4
   27fe4:	835a      	strh	r2, [r3, #26]
   27fe6:	e054      	b.n	28092 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   27fe8:	697b      	ldr	r3, [r7, #20]
   27fea:	7a5b      	ldrb	r3, [r3, #9]
   27fec:	b2db      	uxtb	r3, r3
   27fee:	2b01      	cmp	r3, #1
   27ff0:	d11e      	bne.n	28030 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   27ff2:	697b      	ldr	r3, [r7, #20]
   27ff4:	0018      	movs	r0, r3
   27ff6:	4b4d      	ldr	r3, [pc, #308]	; (2812c <_spi_interrupt_handler+0x278>)
   27ff8:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   27ffa:	697b      	ldr	r3, [r7, #20]
   27ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   27ffe:	b29b      	uxth	r3, r3
   28000:	2b00      	cmp	r3, #0
   28002:	d146      	bne.n	28092 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28004:	693b      	ldr	r3, [r7, #16]
   28006:	2204      	movs	r2, #4
   28008:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2800a:	697b      	ldr	r3, [r7, #20]
   2800c:	2238      	movs	r2, #56	; 0x38
   2800e:	2100      	movs	r1, #0
   28010:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   28012:	697b      	ldr	r3, [r7, #20]
   28014:	2203      	movs	r2, #3
   28016:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   28018:	230f      	movs	r3, #15
   2801a:	18fb      	adds	r3, r7, r3
   2801c:	781b      	ldrb	r3, [r3, #0]
   2801e:	2201      	movs	r2, #1
   28020:	4013      	ands	r3, r2
   28022:	d036      	beq.n	28092 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   28024:	697b      	ldr	r3, [r7, #20]
   28026:	68db      	ldr	r3, [r3, #12]
   28028:	697a      	ldr	r2, [r7, #20]
   2802a:	0010      	movs	r0, r2
   2802c:	4798      	blx	r3
   2802e:	e030      	b.n	28092 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   28030:	697b      	ldr	r3, [r7, #20]
   28032:	0018      	movs	r0, r3
   28034:	4b3e      	ldr	r3, [pc, #248]	; (28130 <_spi_interrupt_handler+0x27c>)
   28036:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   28038:	697b      	ldr	r3, [r7, #20]
   2803a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   2803c:	b29b      	uxth	r3, r3
   2803e:	2b00      	cmp	r3, #0
   28040:	d127      	bne.n	28092 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   28042:	697b      	ldr	r3, [r7, #20]
   28044:	2238      	movs	r2, #56	; 0x38
   28046:	2100      	movs	r1, #0
   28048:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2804a:	693b      	ldr	r3, [r7, #16]
   2804c:	2204      	movs	r2, #4
   2804e:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   28050:	697b      	ldr	r3, [r7, #20]
   28052:	7a5b      	ldrb	r3, [r3, #9]
   28054:	b2db      	uxtb	r3, r3
   28056:	2b02      	cmp	r3, #2
   28058:	d10b      	bne.n	28072 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2805a:	230f      	movs	r3, #15
   2805c:	18fb      	adds	r3, r7, r3
   2805e:	781b      	ldrb	r3, [r3, #0]
   28060:	2204      	movs	r2, #4
   28062:	4013      	ands	r3, r2
   28064:	d015      	beq.n	28092 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   28066:	697b      	ldr	r3, [r7, #20]
   28068:	695b      	ldr	r3, [r3, #20]
   2806a:	697a      	ldr	r2, [r7, #20]
   2806c:	0010      	movs	r0, r2
   2806e:	4798      	blx	r3
   28070:	e00f      	b.n	28092 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   28072:	697b      	ldr	r3, [r7, #20]
   28074:	7a5b      	ldrb	r3, [r3, #9]
   28076:	b2db      	uxtb	r3, r3
   28078:	2b00      	cmp	r3, #0
   2807a:	d10a      	bne.n	28092 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2807c:	230f      	movs	r3, #15
   2807e:	18fb      	adds	r3, r7, r3
   28080:	781b      	ldrb	r3, [r3, #0]
   28082:	2202      	movs	r2, #2
   28084:	4013      	ands	r3, r2
   28086:	d004      	beq.n	28092 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   28088:	697b      	ldr	r3, [r7, #20]
   2808a:	691b      	ldr	r3, [r3, #16]
   2808c:	697a      	ldr	r2, [r7, #20]
   2808e:	0010      	movs	r0, r2
   28090:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   28092:	230c      	movs	r3, #12
   28094:	18fb      	adds	r3, r7, r3
   28096:	881b      	ldrh	r3, [r3, #0]
   28098:	2202      	movs	r2, #2
   2809a:	4013      	ands	r3, r2
   2809c:	d024      	beq.n	280e8 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2809e:	697b      	ldr	r3, [r7, #20]
   280a0:	795b      	ldrb	r3, [r3, #5]
   280a2:	2b01      	cmp	r3, #1
   280a4:	d120      	bne.n	280e8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   280a6:	697b      	ldr	r3, [r7, #20]
   280a8:	7a5b      	ldrb	r3, [r3, #9]
   280aa:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   280ac:	2b01      	cmp	r3, #1
   280ae:	d11b      	bne.n	280e8 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   280b0:	697b      	ldr	r3, [r7, #20]
   280b2:	79db      	ldrb	r3, [r3, #7]
   280b4:	2201      	movs	r2, #1
   280b6:	4053      	eors	r3, r2
   280b8:	b2db      	uxtb	r3, r3
   280ba:	2b00      	cmp	r3, #0
   280bc:	d014      	beq.n	280e8 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   280be:	693b      	ldr	r3, [r7, #16]
   280c0:	2202      	movs	r2, #2
   280c2:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   280c4:	697b      	ldr	r3, [r7, #20]
   280c6:	2203      	movs	r2, #3
   280c8:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   280ca:	697b      	ldr	r3, [r7, #20]
   280cc:	2238      	movs	r2, #56	; 0x38
   280ce:	2100      	movs	r1, #0
   280d0:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   280d2:	230f      	movs	r3, #15
   280d4:	18fb      	adds	r3, r7, r3
   280d6:	781b      	ldrb	r3, [r3, #0]
   280d8:	2201      	movs	r2, #1
   280da:	4013      	ands	r3, r2
   280dc:	d004      	beq.n	280e8 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   280de:	697b      	ldr	r3, [r7, #20]
   280e0:	68db      	ldr	r3, [r3, #12]
   280e2:	697a      	ldr	r2, [r7, #20]
   280e4:	0010      	movs	r0, r2
   280e6:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   280e8:	230c      	movs	r3, #12
   280ea:	18fb      	adds	r3, r7, r3
   280ec:	881b      	ldrh	r3, [r3, #0]
   280ee:	2280      	movs	r2, #128	; 0x80
   280f0:	4013      	ands	r3, r2
   280f2:	d010      	beq.n	28116 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   280f4:	693b      	ldr	r3, [r7, #16]
   280f6:	2280      	movs	r2, #128	; 0x80
   280f8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   280fa:	693b      	ldr	r3, [r7, #16]
   280fc:	2280      	movs	r2, #128	; 0x80
   280fe:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   28100:	230f      	movs	r3, #15
   28102:	18fb      	adds	r3, r7, r3
   28104:	781b      	ldrb	r3, [r3, #0]
   28106:	2240      	movs	r2, #64	; 0x40
   28108:	4013      	ands	r3, r2
   2810a:	d004      	beq.n	28116 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2810c:	697b      	ldr	r3, [r7, #20]
   2810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28110:	697a      	ldr	r2, [r7, #20]
   28112:	0010      	movs	r0, r2
   28114:	4798      	blx	r3
		}
	}
#  endif
}
   28116:	46c0      	nop			; (mov r8, r8)
   28118:	46bd      	mov	sp, r7
   2811a:	b006      	add	sp, #24
   2811c:	bd80      	pop	{r7, pc}
   2811e:	46c0      	nop			; (mov r8, r8)
   28120:	20005784 	.word	0x20005784
   28124:	00027dd9 	.word	0x00027dd9
   28128:	00027d5d 	.word	0x00027d5d
   2812c:	00027e0d 	.word	0x00027e0d
   28130:	00027e43 	.word	0x00027e43

00028134 <system_gclk_chan_get_config_defaults>:
{
   28134:	b580      	push	{r7, lr}
   28136:	b082      	sub	sp, #8
   28138:	af00      	add	r7, sp, #0
   2813a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2813c:	687b      	ldr	r3, [r7, #4]
   2813e:	2200      	movs	r2, #0
   28140:	701a      	strb	r2, [r3, #0]
}
   28142:	46c0      	nop			; (mov r8, r8)
   28144:	46bd      	mov	sp, r7
   28146:	b002      	add	sp, #8
   28148:	bd80      	pop	{r7, pc}
	...

0002814c <system_apb_clock_set_mask>:
{
   2814c:	b580      	push	{r7, lr}
   2814e:	b082      	sub	sp, #8
   28150:	af00      	add	r7, sp, #0
   28152:	0002      	movs	r2, r0
   28154:	6039      	str	r1, [r7, #0]
   28156:	1dfb      	adds	r3, r7, #7
   28158:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2815a:	1dfb      	adds	r3, r7, #7
   2815c:	781b      	ldrb	r3, [r3, #0]
   2815e:	2b01      	cmp	r3, #1
   28160:	d00a      	beq.n	28178 <system_apb_clock_set_mask+0x2c>
   28162:	2b02      	cmp	r3, #2
   28164:	d00f      	beq.n	28186 <system_apb_clock_set_mask+0x3a>
   28166:	2b00      	cmp	r3, #0
   28168:	d114      	bne.n	28194 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2816a:	4b0e      	ldr	r3, [pc, #56]	; (281a4 <system_apb_clock_set_mask+0x58>)
   2816c:	4a0d      	ldr	r2, [pc, #52]	; (281a4 <system_apb_clock_set_mask+0x58>)
   2816e:	6991      	ldr	r1, [r2, #24]
   28170:	683a      	ldr	r2, [r7, #0]
   28172:	430a      	orrs	r2, r1
   28174:	619a      	str	r2, [r3, #24]
			break;
   28176:	e00f      	b.n	28198 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28178:	4b0a      	ldr	r3, [pc, #40]	; (281a4 <system_apb_clock_set_mask+0x58>)
   2817a:	4a0a      	ldr	r2, [pc, #40]	; (281a4 <system_apb_clock_set_mask+0x58>)
   2817c:	69d1      	ldr	r1, [r2, #28]
   2817e:	683a      	ldr	r2, [r7, #0]
   28180:	430a      	orrs	r2, r1
   28182:	61da      	str	r2, [r3, #28]
			break;
   28184:	e008      	b.n	28198 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28186:	4b07      	ldr	r3, [pc, #28]	; (281a4 <system_apb_clock_set_mask+0x58>)
   28188:	4a06      	ldr	r2, [pc, #24]	; (281a4 <system_apb_clock_set_mask+0x58>)
   2818a:	6a11      	ldr	r1, [r2, #32]
   2818c:	683a      	ldr	r2, [r7, #0]
   2818e:	430a      	orrs	r2, r1
   28190:	621a      	str	r2, [r3, #32]
			break;
   28192:	e001      	b.n	28198 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28194:	2317      	movs	r3, #23
   28196:	e000      	b.n	2819a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28198:	2300      	movs	r3, #0
}
   2819a:	0018      	movs	r0, r3
   2819c:	46bd      	mov	sp, r7
   2819e:	b002      	add	sp, #8
   281a0:	bd80      	pop	{r7, pc}
   281a2:	46c0      	nop			; (mov r8, r8)
   281a4:	40000400 	.word	0x40000400

000281a8 <system_pinmux_get_config_defaults>:
{
   281a8:	b580      	push	{r7, lr}
   281aa:	b082      	sub	sp, #8
   281ac:	af00      	add	r7, sp, #0
   281ae:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   281b0:	687b      	ldr	r3, [r7, #4]
   281b2:	2280      	movs	r2, #128	; 0x80
   281b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   281b6:	687b      	ldr	r3, [r7, #4]
   281b8:	2200      	movs	r2, #0
   281ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   281bc:	687b      	ldr	r3, [r7, #4]
   281be:	2201      	movs	r2, #1
   281c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   281c2:	687b      	ldr	r3, [r7, #4]
   281c4:	2200      	movs	r2, #0
   281c6:	70da      	strb	r2, [r3, #3]
}
   281c8:	46c0      	nop			; (mov r8, r8)
   281ca:	46bd      	mov	sp, r7
   281cc:	b002      	add	sp, #8
   281ce:	bd80      	pop	{r7, pc}

000281d0 <system_is_debugger_present>:
{
   281d0:	b580      	push	{r7, lr}
   281d2:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   281d4:	4b05      	ldr	r3, [pc, #20]	; (281ec <system_is_debugger_present+0x1c>)
   281d6:	789b      	ldrb	r3, [r3, #2]
   281d8:	b2db      	uxtb	r3, r3
   281da:	001a      	movs	r2, r3
   281dc:	2302      	movs	r3, #2
   281de:	4013      	ands	r3, r2
   281e0:	1e5a      	subs	r2, r3, #1
   281e2:	4193      	sbcs	r3, r2
   281e4:	b2db      	uxtb	r3, r3
}
   281e6:	0018      	movs	r0, r3
   281e8:	46bd      	mov	sp, r7
   281ea:	bd80      	pop	{r7, pc}
   281ec:	41002000 	.word	0x41002000

000281f0 <usart_is_syncing>:
{
   281f0:	b580      	push	{r7, lr}
   281f2:	b084      	sub	sp, #16
   281f4:	af00      	add	r7, sp, #0
   281f6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   281f8:	687b      	ldr	r3, [r7, #4]
   281fa:	681b      	ldr	r3, [r3, #0]
   281fc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   281fe:	68fb      	ldr	r3, [r7, #12]
   28200:	69db      	ldr	r3, [r3, #28]
   28202:	1e5a      	subs	r2, r3, #1
   28204:	4193      	sbcs	r3, r2
   28206:	b2db      	uxtb	r3, r3
}
   28208:	0018      	movs	r0, r3
   2820a:	46bd      	mov	sp, r7
   2820c:	b004      	add	sp, #16
   2820e:	bd80      	pop	{r7, pc}

00028210 <_usart_wait_for_sync>:
{
   28210:	b580      	push	{r7, lr}
   28212:	b082      	sub	sp, #8
   28214:	af00      	add	r7, sp, #0
   28216:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28218:	46c0      	nop			; (mov r8, r8)
   2821a:	687b      	ldr	r3, [r7, #4]
   2821c:	0018      	movs	r0, r3
   2821e:	4b04      	ldr	r3, [pc, #16]	; (28230 <_usart_wait_for_sync+0x20>)
   28220:	4798      	blx	r3
   28222:	1e03      	subs	r3, r0, #0
   28224:	d1f9      	bne.n	2821a <_usart_wait_for_sync+0xa>
}
   28226:	46c0      	nop			; (mov r8, r8)
   28228:	46bd      	mov	sp, r7
   2822a:	b002      	add	sp, #8
   2822c:	bd80      	pop	{r7, pc}
   2822e:	46c0      	nop			; (mov r8, r8)
   28230:	000281f1 	.word	0x000281f1

00028234 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28234:	b5b0      	push	{r4, r5, r7, lr}
   28236:	b08c      	sub	sp, #48	; 0x30
   28238:	af02      	add	r7, sp, #8
   2823a:	6078      	str	r0, [r7, #4]
   2823c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2823e:	687b      	ldr	r3, [r7, #4]
   28240:	681b      	ldr	r3, [r3, #0]
   28242:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28244:	687b      	ldr	r3, [r7, #4]
   28246:	681b      	ldr	r3, [r3, #0]
   28248:	0018      	movs	r0, r3
   2824a:	4bab      	ldr	r3, [pc, #684]	; (284f8 <_usart_set_config+0x2c4>)
   2824c:	4798      	blx	r3
   2824e:	0003      	movs	r3, r0
   28250:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28252:	697b      	ldr	r3, [r7, #20]
   28254:	3314      	adds	r3, #20
   28256:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   28258:	2300      	movs	r3, #0
   2825a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   2825c:	2300      	movs	r3, #0
   2825e:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   28260:	230a      	movs	r3, #10
   28262:	18fb      	adds	r3, r7, r3
   28264:	2200      	movs	r2, #0
   28266:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28268:	231f      	movs	r3, #31
   2826a:	18fb      	adds	r3, r7, r3
   2826c:	2200      	movs	r2, #0
   2826e:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28270:	231e      	movs	r3, #30
   28272:	18fb      	adds	r3, r7, r3
   28274:	2210      	movs	r2, #16
   28276:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   28278:	683b      	ldr	r3, [r7, #0]
   2827a:	8a1b      	ldrh	r3, [r3, #16]
   2827c:	2280      	movs	r2, #128	; 0x80
   2827e:	01d2      	lsls	r2, r2, #7
   28280:	4293      	cmp	r3, r2
   28282:	d01c      	beq.n	282be <_usart_set_config+0x8a>
   28284:	2280      	movs	r2, #128	; 0x80
   28286:	01d2      	lsls	r2, r2, #7
   28288:	4293      	cmp	r3, r2
   2828a:	dc06      	bgt.n	2829a <_usart_set_config+0x66>
   2828c:	2b00      	cmp	r3, #0
   2828e:	d00d      	beq.n	282ac <_usart_set_config+0x78>
   28290:	2280      	movs	r2, #128	; 0x80
   28292:	0192      	lsls	r2, r2, #6
   28294:	4293      	cmp	r3, r2
   28296:	d024      	beq.n	282e2 <_usart_set_config+0xae>
   28298:	e035      	b.n	28306 <_usart_set_config+0xd2>
   2829a:	22c0      	movs	r2, #192	; 0xc0
   2829c:	01d2      	lsls	r2, r2, #7
   2829e:	4293      	cmp	r3, r2
   282a0:	d028      	beq.n	282f4 <_usart_set_config+0xc0>
   282a2:	2280      	movs	r2, #128	; 0x80
   282a4:	0212      	lsls	r2, r2, #8
   282a6:	4293      	cmp	r3, r2
   282a8:	d012      	beq.n	282d0 <_usart_set_config+0x9c>
   282aa:	e02c      	b.n	28306 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   282ac:	231f      	movs	r3, #31
   282ae:	18fb      	adds	r3, r7, r3
   282b0:	2200      	movs	r2, #0
   282b2:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   282b4:	231e      	movs	r3, #30
   282b6:	18fb      	adds	r3, r7, r3
   282b8:	2210      	movs	r2, #16
   282ba:	701a      	strb	r2, [r3, #0]
			break;
   282bc:	e023      	b.n	28306 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   282be:	231f      	movs	r3, #31
   282c0:	18fb      	adds	r3, r7, r3
   282c2:	2200      	movs	r2, #0
   282c4:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   282c6:	231e      	movs	r3, #30
   282c8:	18fb      	adds	r3, r7, r3
   282ca:	2208      	movs	r2, #8
   282cc:	701a      	strb	r2, [r3, #0]
			break;
   282ce:	e01a      	b.n	28306 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   282d0:	231f      	movs	r3, #31
   282d2:	18fb      	adds	r3, r7, r3
   282d4:	2200      	movs	r2, #0
   282d6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   282d8:	231e      	movs	r3, #30
   282da:	18fb      	adds	r3, r7, r3
   282dc:	2203      	movs	r2, #3
   282de:	701a      	strb	r2, [r3, #0]
			break;
   282e0:	e011      	b.n	28306 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   282e2:	231f      	movs	r3, #31
   282e4:	18fb      	adds	r3, r7, r3
   282e6:	2201      	movs	r2, #1
   282e8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   282ea:	231e      	movs	r3, #30
   282ec:	18fb      	adds	r3, r7, r3
   282ee:	2210      	movs	r2, #16
   282f0:	701a      	strb	r2, [r3, #0]
			break;
   282f2:	e008      	b.n	28306 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   282f4:	231f      	movs	r3, #31
   282f6:	18fb      	adds	r3, r7, r3
   282f8:	2201      	movs	r2, #1
   282fa:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   282fc:	231e      	movs	r3, #30
   282fe:	18fb      	adds	r3, r7, r3
   28300:	2208      	movs	r2, #8
   28302:	701a      	strb	r2, [r3, #0]
			break;
   28304:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   28306:	683b      	ldr	r3, [r7, #0]
   28308:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2830a:	683b      	ldr	r3, [r7, #0]
   2830c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2830e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   28310:	683b      	ldr	r3, [r7, #0]
   28312:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28314:	4313      	orrs	r3, r2
		config->sample_rate |
   28316:	683a      	ldr	r2, [r7, #0]
   28318:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2831a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2831c:	683a      	ldr	r2, [r7, #0]
   2831e:	7e12      	ldrb	r2, [r2, #24]
   28320:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   28322:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   28324:	683a      	ldr	r2, [r7, #0]
   28326:	2126      	movs	r1, #38	; 0x26
   28328:	5c52      	ldrb	r2, [r2, r1]
   2832a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2832c:	4313      	orrs	r3, r2
   2832e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   28330:	231d      	movs	r3, #29
   28332:	18fb      	adds	r3, r7, r3
   28334:	2200      	movs	r2, #0
   28336:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28338:	683b      	ldr	r3, [r7, #0]
   2833a:	685b      	ldr	r3, [r3, #4]
   2833c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2833e:	68fb      	ldr	r3, [r7, #12]
   28340:	2b00      	cmp	r3, #0
   28342:	d01e      	beq.n	28382 <_usart_set_config+0x14e>
   28344:	2280      	movs	r2, #128	; 0x80
   28346:	0552      	lsls	r2, r2, #21
   28348:	4293      	cmp	r3, r2
   2834a:	d14f      	bne.n	283ec <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   2834c:	683b      	ldr	r3, [r7, #0]
   2834e:	2227      	movs	r2, #39	; 0x27
   28350:	5c9b      	ldrb	r3, [r3, r2]
   28352:	2201      	movs	r2, #1
   28354:	4053      	eors	r3, r2
   28356:	b2db      	uxtb	r3, r3
   28358:	2b00      	cmp	r3, #0
   2835a:	d046      	beq.n	283ea <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   2835c:	683b      	ldr	r3, [r7, #0]
   2835e:	6a1d      	ldr	r5, [r3, #32]
   28360:	693b      	ldr	r3, [r7, #16]
   28362:	b2db      	uxtb	r3, r3
   28364:	0018      	movs	r0, r3
   28366:	4b65      	ldr	r3, [pc, #404]	; (284fc <_usart_set_config+0x2c8>)
   28368:	4798      	blx	r3
   2836a:	0001      	movs	r1, r0
   2836c:	231d      	movs	r3, #29
   2836e:	18fc      	adds	r4, r7, r3
   28370:	230a      	movs	r3, #10
   28372:	18fb      	adds	r3, r7, r3
   28374:	001a      	movs	r2, r3
   28376:	0028      	movs	r0, r5
   28378:	4b61      	ldr	r3, [pc, #388]	; (28500 <_usart_set_config+0x2cc>)
   2837a:	4798      	blx	r3
   2837c:	0003      	movs	r3, r0
   2837e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   28380:	e033      	b.n	283ea <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   28382:	683b      	ldr	r3, [r7, #0]
   28384:	2227      	movs	r2, #39	; 0x27
   28386:	5c9b      	ldrb	r3, [r3, r2]
   28388:	2b00      	cmp	r3, #0
   2838a:	d014      	beq.n	283b6 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   2838c:	683b      	ldr	r3, [r7, #0]
   2838e:	6a18      	ldr	r0, [r3, #32]
   28390:	683b      	ldr	r3, [r7, #0]
   28392:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   28394:	231d      	movs	r3, #29
   28396:	18fc      	adds	r4, r7, r3
   28398:	231f      	movs	r3, #31
   2839a:	18fb      	adds	r3, r7, r3
   2839c:	781d      	ldrb	r5, [r3, #0]
   2839e:	230a      	movs	r3, #10
   283a0:	18fa      	adds	r2, r7, r3
   283a2:	231e      	movs	r3, #30
   283a4:	18fb      	adds	r3, r7, r3
   283a6:	781b      	ldrb	r3, [r3, #0]
   283a8:	9300      	str	r3, [sp, #0]
   283aa:	002b      	movs	r3, r5
   283ac:	4d55      	ldr	r5, [pc, #340]	; (28504 <_usart_set_config+0x2d0>)
   283ae:	47a8      	blx	r5
   283b0:	0003      	movs	r3, r0
   283b2:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   283b4:	e01a      	b.n	283ec <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   283b6:	683b      	ldr	r3, [r7, #0]
   283b8:	6a1d      	ldr	r5, [r3, #32]
   283ba:	693b      	ldr	r3, [r7, #16]
   283bc:	b2db      	uxtb	r3, r3
   283be:	0018      	movs	r0, r3
   283c0:	4b4e      	ldr	r3, [pc, #312]	; (284fc <_usart_set_config+0x2c8>)
   283c2:	4798      	blx	r3
				status_code =
   283c4:	231d      	movs	r3, #29
   283c6:	18fc      	adds	r4, r7, r3
   283c8:	231f      	movs	r3, #31
   283ca:	18fb      	adds	r3, r7, r3
   283cc:	7819      	ldrb	r1, [r3, #0]
   283ce:	230a      	movs	r3, #10
   283d0:	18fa      	adds	r2, r7, r3
   283d2:	231e      	movs	r3, #30
   283d4:	18fb      	adds	r3, r7, r3
   283d6:	781b      	ldrb	r3, [r3, #0]
   283d8:	9300      	str	r3, [sp, #0]
   283da:	000b      	movs	r3, r1
   283dc:	0001      	movs	r1, r0
   283de:	0028      	movs	r0, r5
   283e0:	4d48      	ldr	r5, [pc, #288]	; (28504 <_usart_set_config+0x2d0>)
   283e2:	47a8      	blx	r5
   283e4:	0003      	movs	r3, r0
   283e6:	7023      	strb	r3, [r4, #0]
			break;
   283e8:	e000      	b.n	283ec <_usart_set_config+0x1b8>
			break;
   283ea:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   283ec:	231d      	movs	r3, #29
   283ee:	18fb      	adds	r3, r7, r3
   283f0:	781b      	ldrb	r3, [r3, #0]
   283f2:	2b00      	cmp	r3, #0
   283f4:	d003      	beq.n	283fe <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   283f6:	231d      	movs	r3, #29
   283f8:	18fb      	adds	r3, r7, r3
   283fa:	781b      	ldrb	r3, [r3, #0]
   283fc:	e077      	b.n	284ee <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   283fe:	683b      	ldr	r3, [r7, #0]
   28400:	7e5b      	ldrb	r3, [r3, #25]
   28402:	2b00      	cmp	r3, #0
   28404:	d003      	beq.n	2840e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   28406:	683b      	ldr	r3, [r7, #0]
   28408:	7e9a      	ldrb	r2, [r3, #26]
   2840a:	69bb      	ldr	r3, [r7, #24]
   2840c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2840e:	687b      	ldr	r3, [r7, #4]
   28410:	0018      	movs	r0, r3
   28412:	4b3d      	ldr	r3, [pc, #244]	; (28508 <_usart_set_config+0x2d4>)
   28414:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   28416:	230a      	movs	r3, #10
   28418:	18fb      	adds	r3, r7, r3
   2841a:	881a      	ldrh	r2, [r3, #0]
   2841c:	69bb      	ldr	r3, [r7, #24]
   2841e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   28420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28422:	68fb      	ldr	r3, [r7, #12]
   28424:	4313      	orrs	r3, r2
   28426:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   28428:	683b      	ldr	r3, [r7, #0]
   2842a:	2227      	movs	r2, #39	; 0x27
   2842c:	5c9b      	ldrb	r3, [r3, r2]
   2842e:	2201      	movs	r2, #1
   28430:	4053      	eors	r3, r2
   28432:	b2db      	uxtb	r3, r3
   28434:	2b00      	cmp	r3, #0
   28436:	d003      	beq.n	28440 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2843a:	2204      	movs	r2, #4
   2843c:	4313      	orrs	r3, r2
   2843e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28440:	683b      	ldr	r3, [r7, #0]
   28442:	7e5b      	ldrb	r3, [r3, #25]
   28444:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28446:	683b      	ldr	r3, [r7, #0]
   28448:	7f1b      	ldrb	r3, [r3, #28]
   2844a:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2844c:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2844e:	683b      	ldr	r3, [r7, #0]
   28450:	7f5b      	ldrb	r3, [r3, #29]
   28452:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28454:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28456:	683b      	ldr	r3, [r7, #0]
   28458:	2124      	movs	r1, #36	; 0x24
   2845a:	5c5b      	ldrb	r3, [r3, r1]
   2845c:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2845e:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   28460:	683b      	ldr	r3, [r7, #0]
   28462:	2125      	movs	r1, #37	; 0x25
   28464:	5c5b      	ldrb	r3, [r3, r1]
   28466:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28468:	4313      	orrs	r3, r2
	ctrlb =  
   2846a:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   2846c:	683b      	ldr	r3, [r7, #0]
   2846e:	7a9b      	ldrb	r3, [r3, #10]
   28470:	001a      	movs	r2, r3
   28472:	6a3b      	ldr	r3, [r7, #32]
   28474:	4313      	orrs	r3, r2
   28476:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   28478:	683b      	ldr	r3, [r7, #0]
   2847a:	7adb      	ldrb	r3, [r3, #11]
   2847c:	001a      	movs	r2, r3
   2847e:	6a3b      	ldr	r3, [r7, #32]
   28480:	4313      	orrs	r3, r2
   28482:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   28484:	683b      	ldr	r3, [r7, #0]
   28486:	891b      	ldrh	r3, [r3, #8]
   28488:	2bff      	cmp	r3, #255	; 0xff
   2848a:	d00b      	beq.n	284a4 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   2848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2848e:	2280      	movs	r2, #128	; 0x80
   28490:	0452      	lsls	r2, r2, #17
   28492:	4313      	orrs	r3, r2
   28494:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   28496:	683b      	ldr	r3, [r7, #0]
   28498:	891b      	ldrh	r3, [r3, #8]
   2849a:	001a      	movs	r2, r3
   2849c:	6a3b      	ldr	r3, [r7, #32]
   2849e:	4313      	orrs	r3, r2
   284a0:	623b      	str	r3, [r7, #32]
   284a2:	e008      	b.n	284b6 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   284a4:	683b      	ldr	r3, [r7, #0]
   284a6:	7edb      	ldrb	r3, [r3, #27]
   284a8:	2b00      	cmp	r3, #0
   284aa:	d004      	beq.n	284b6 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   284ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   284ae:	2280      	movs	r2, #128	; 0x80
   284b0:	04d2      	lsls	r2, r2, #19
   284b2:	4313      	orrs	r3, r2
   284b4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   284b6:	683b      	ldr	r3, [r7, #0]
   284b8:	222c      	movs	r2, #44	; 0x2c
   284ba:	5c9b      	ldrb	r3, [r3, r2]
   284bc:	2b00      	cmp	r3, #0
   284be:	d103      	bne.n	284c8 <_usart_set_config+0x294>
   284c0:	4b12      	ldr	r3, [pc, #72]	; (2850c <_usart_set_config+0x2d8>)
   284c2:	4798      	blx	r3
   284c4:	1e03      	subs	r3, r0, #0
   284c6:	d003      	beq.n	284d0 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   284c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   284ca:	2280      	movs	r2, #128	; 0x80
   284cc:	4313      	orrs	r3, r2
   284ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   284d0:	687b      	ldr	r3, [r7, #4]
   284d2:	0018      	movs	r0, r3
   284d4:	4b0c      	ldr	r3, [pc, #48]	; (28508 <_usart_set_config+0x2d4>)
   284d6:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   284d8:	69bb      	ldr	r3, [r7, #24]
   284da:	6a3a      	ldr	r2, [r7, #32]
   284dc:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   284de:	687b      	ldr	r3, [r7, #4]
   284e0:	0018      	movs	r0, r3
   284e2:	4b09      	ldr	r3, [pc, #36]	; (28508 <_usart_set_config+0x2d4>)
   284e4:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   284e6:	69bb      	ldr	r3, [r7, #24]
   284e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   284ea:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   284ec:	2300      	movs	r3, #0
}
   284ee:	0018      	movs	r0, r3
   284f0:	46bd      	mov	sp, r7
   284f2:	b00a      	add	sp, #40	; 0x28
   284f4:	bdb0      	pop	{r4, r5, r7, pc}
   284f6:	46c0      	nop			; (mov r8, r8)
   284f8:	00026fdd 	.word	0x00026fdd
   284fc:	00029991 	.word	0x00029991
   28500:	00026b57 	.word	0x00026b57
   28504:	00026bd5 	.word	0x00026bd5
   28508:	00028211 	.word	0x00028211
   2850c:	000281d1 	.word	0x000281d1

00028510 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   28510:	b590      	push	{r4, r7, lr}
   28512:	b093      	sub	sp, #76	; 0x4c
   28514:	af00      	add	r7, sp, #0
   28516:	60f8      	str	r0, [r7, #12]
   28518:	60b9      	str	r1, [r7, #8]
   2851a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2851c:	233b      	movs	r3, #59	; 0x3b
   2851e:	18fb      	adds	r3, r7, r3
   28520:	2200      	movs	r2, #0
   28522:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   28524:	68fb      	ldr	r3, [r7, #12]
   28526:	68ba      	ldr	r2, [r7, #8]
   28528:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2852a:	68fb      	ldr	r3, [r7, #12]
   2852c:	681b      	ldr	r3, [r3, #0]
   2852e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28530:	68fb      	ldr	r3, [r7, #12]
   28532:	681b      	ldr	r3, [r3, #0]
   28534:	0018      	movs	r0, r3
   28536:	4b86      	ldr	r3, [pc, #536]	; (28750 <usart_init+0x240>)
   28538:	4798      	blx	r3
   2853a:	0003      	movs	r3, r0
   2853c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28540:	3302      	adds	r3, #2
   28542:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28546:	3314      	adds	r3, #20
   28548:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2854a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2854c:	681b      	ldr	r3, [r3, #0]
   2854e:	2201      	movs	r2, #1
   28550:	4013      	ands	r3, r2
   28552:	d001      	beq.n	28558 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   28554:	2305      	movs	r3, #5
   28556:	e0f6      	b.n	28746 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   28558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2855a:	681b      	ldr	r3, [r3, #0]
   2855c:	2202      	movs	r2, #2
   2855e:	4013      	ands	r3, r2
   28560:	d001      	beq.n	28566 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   28562:	231c      	movs	r3, #28
   28564:	e0ef      	b.n	28746 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28566:	2201      	movs	r2, #1
   28568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2856a:	409a      	lsls	r2, r3
   2856c:	0013      	movs	r3, r2
   2856e:	0019      	movs	r1, r3
   28570:	2002      	movs	r0, #2
   28572:	4b78      	ldr	r3, [pc, #480]	; (28754 <usart_init+0x244>)
   28574:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28576:	2324      	movs	r3, #36	; 0x24
   28578:	18fb      	adds	r3, r7, r3
   2857a:	0018      	movs	r0, r3
   2857c:	4b76      	ldr	r3, [pc, #472]	; (28758 <usart_init+0x248>)
   2857e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28580:	687b      	ldr	r3, [r7, #4]
   28582:	222d      	movs	r2, #45	; 0x2d
   28584:	5c9a      	ldrb	r2, [r3, r2]
   28586:	2324      	movs	r3, #36	; 0x24
   28588:	18fb      	adds	r3, r7, r3
   2858a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   2858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2858e:	b2db      	uxtb	r3, r3
   28590:	2224      	movs	r2, #36	; 0x24
   28592:	18ba      	adds	r2, r7, r2
   28594:	0011      	movs	r1, r2
   28596:	0018      	movs	r0, r3
   28598:	4b70      	ldr	r3, [pc, #448]	; (2875c <usart_init+0x24c>)
   2859a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   2859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2859e:	b2db      	uxtb	r3, r3
   285a0:	0018      	movs	r0, r3
   285a2:	4b6f      	ldr	r3, [pc, #444]	; (28760 <usart_init+0x250>)
   285a4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   285a6:	687b      	ldr	r3, [r7, #4]
   285a8:	222d      	movs	r2, #45	; 0x2d
   285aa:	5c9b      	ldrb	r3, [r3, r2]
   285ac:	2100      	movs	r1, #0
   285ae:	0018      	movs	r0, r3
   285b0:	4b6c      	ldr	r3, [pc, #432]	; (28764 <usart_init+0x254>)
   285b2:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   285b4:	687b      	ldr	r3, [r7, #4]
   285b6:	7ada      	ldrb	r2, [r3, #11]
   285b8:	68fb      	ldr	r3, [r7, #12]
   285ba:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   285bc:	687b      	ldr	r3, [r7, #4]
   285be:	2224      	movs	r2, #36	; 0x24
   285c0:	5c9a      	ldrb	r2, [r3, r2]
   285c2:	68fb      	ldr	r3, [r7, #12]
   285c4:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   285c6:	687b      	ldr	r3, [r7, #4]
   285c8:	2225      	movs	r2, #37	; 0x25
   285ca:	5c9a      	ldrb	r2, [r3, r2]
   285cc:	68fb      	ldr	r3, [r7, #12]
   285ce:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   285d0:	687b      	ldr	r3, [r7, #4]
   285d2:	7eda      	ldrb	r2, [r3, #27]
   285d4:	68fb      	ldr	r3, [r7, #12]
   285d6:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   285d8:	687b      	ldr	r3, [r7, #4]
   285da:	7f1a      	ldrb	r2, [r3, #28]
   285dc:	68fb      	ldr	r3, [r7, #12]
   285de:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   285e0:	233b      	movs	r3, #59	; 0x3b
   285e2:	18fc      	adds	r4, r7, r3
   285e4:	687a      	ldr	r2, [r7, #4]
   285e6:	68fb      	ldr	r3, [r7, #12]
   285e8:	0011      	movs	r1, r2
   285ea:	0018      	movs	r0, r3
   285ec:	4b5e      	ldr	r3, [pc, #376]	; (28768 <usart_init+0x258>)
   285ee:	4798      	blx	r3
   285f0:	0003      	movs	r3, r0
   285f2:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   285f4:	233b      	movs	r3, #59	; 0x3b
   285f6:	18fb      	adds	r3, r7, r3
   285f8:	781b      	ldrb	r3, [r3, #0]
   285fa:	2b00      	cmp	r3, #0
   285fc:	d003      	beq.n	28606 <usart_init+0xf6>
		return status_code;
   285fe:	233b      	movs	r3, #59	; 0x3b
   28600:	18fb      	adds	r3, r7, r3
   28602:	781b      	ldrb	r3, [r3, #0]
   28604:	e09f      	b.n	28746 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28606:	2320      	movs	r3, #32
   28608:	18fb      	adds	r3, r7, r3
   2860a:	0018      	movs	r0, r3
   2860c:	4b57      	ldr	r3, [pc, #348]	; (2876c <usart_init+0x25c>)
   2860e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28610:	2320      	movs	r3, #32
   28612:	18fb      	adds	r3, r7, r3
   28614:	2200      	movs	r2, #0
   28616:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28618:	2320      	movs	r3, #32
   2861a:	18fb      	adds	r3, r7, r3
   2861c:	2200      	movs	r2, #0
   2861e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28620:	687b      	ldr	r3, [r7, #4]
   28622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28624:	2310      	movs	r3, #16
   28626:	18fb      	adds	r3, r7, r3
   28628:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2862a:	687b      	ldr	r3, [r7, #4]
   2862c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2862e:	2310      	movs	r3, #16
   28630:	18fb      	adds	r3, r7, r3
   28632:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28634:	687b      	ldr	r3, [r7, #4]
   28636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28638:	2310      	movs	r3, #16
   2863a:	18fb      	adds	r3, r7, r3
   2863c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2863e:	687b      	ldr	r3, [r7, #4]
   28640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   28642:	2310      	movs	r3, #16
   28644:	18fb      	adds	r3, r7, r3
   28646:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28648:	2347      	movs	r3, #71	; 0x47
   2864a:	18fb      	adds	r3, r7, r3
   2864c:	2200      	movs	r2, #0
   2864e:	701a      	strb	r2, [r3, #0]
   28650:	e02c      	b.n	286ac <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28652:	2347      	movs	r3, #71	; 0x47
   28654:	18fb      	adds	r3, r7, r3
   28656:	781a      	ldrb	r2, [r3, #0]
   28658:	2310      	movs	r3, #16
   2865a:	18fb      	adds	r3, r7, r3
   2865c:	0092      	lsls	r2, r2, #2
   2865e:	58d3      	ldr	r3, [r2, r3]
   28660:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28664:	2b00      	cmp	r3, #0
   28666:	d109      	bne.n	2867c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28668:	2347      	movs	r3, #71	; 0x47
   2866a:	18fb      	adds	r3, r7, r3
   2866c:	781a      	ldrb	r2, [r3, #0]
   2866e:	68bb      	ldr	r3, [r7, #8]
   28670:	0011      	movs	r1, r2
   28672:	0018      	movs	r0, r3
   28674:	4b3e      	ldr	r3, [pc, #248]	; (28770 <usart_init+0x260>)
   28676:	4798      	blx	r3
   28678:	0003      	movs	r3, r0
   2867a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   2867c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2867e:	3301      	adds	r3, #1
   28680:	d00d      	beq.n	2869e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28684:	b2da      	uxtb	r2, r3
   28686:	2320      	movs	r3, #32
   28688:	18fb      	adds	r3, r7, r3
   2868a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   2868c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2868e:	0c1b      	lsrs	r3, r3, #16
   28690:	b2db      	uxtb	r3, r3
   28692:	2220      	movs	r2, #32
   28694:	18ba      	adds	r2, r7, r2
   28696:	0011      	movs	r1, r2
   28698:	0018      	movs	r0, r3
   2869a:	4b36      	ldr	r3, [pc, #216]	; (28774 <usart_init+0x264>)
   2869c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   2869e:	2347      	movs	r3, #71	; 0x47
   286a0:	18fb      	adds	r3, r7, r3
   286a2:	781a      	ldrb	r2, [r3, #0]
   286a4:	2347      	movs	r3, #71	; 0x47
   286a6:	18fb      	adds	r3, r7, r3
   286a8:	3201      	adds	r2, #1
   286aa:	701a      	strb	r2, [r3, #0]
   286ac:	2347      	movs	r3, #71	; 0x47
   286ae:	18fb      	adds	r3, r7, r3
   286b0:	781b      	ldrb	r3, [r3, #0]
   286b2:	2b03      	cmp	r3, #3
   286b4:	d9cd      	bls.n	28652 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   286b6:	2300      	movs	r3, #0
   286b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   286ba:	e00a      	b.n	286d2 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   286bc:	68fa      	ldr	r2, [r7, #12]
   286be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   286c0:	3302      	adds	r3, #2
   286c2:	009b      	lsls	r3, r3, #2
   286c4:	18d3      	adds	r3, r2, r3
   286c6:	3304      	adds	r3, #4
   286c8:	2200      	movs	r2, #0
   286ca:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   286cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   286ce:	3301      	adds	r3, #1
   286d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   286d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   286d4:	2b05      	cmp	r3, #5
   286d6:	d9f1      	bls.n	286bc <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   286d8:	68fb      	ldr	r3, [r7, #12]
   286da:	2200      	movs	r2, #0
   286dc:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   286de:	68fb      	ldr	r3, [r7, #12]
   286e0:	2200      	movs	r2, #0
   286e2:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   286e4:	68fb      	ldr	r3, [r7, #12]
   286e6:	2200      	movs	r2, #0
   286e8:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   286ea:	68fb      	ldr	r3, [r7, #12]
   286ec:	2200      	movs	r2, #0
   286ee:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   286f0:	68fb      	ldr	r3, [r7, #12]
   286f2:	2230      	movs	r2, #48	; 0x30
   286f4:	2100      	movs	r1, #0
   286f6:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   286f8:	68fb      	ldr	r3, [r7, #12]
   286fa:	2231      	movs	r2, #49	; 0x31
   286fc:	2100      	movs	r1, #0
   286fe:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   28700:	68fb      	ldr	r3, [r7, #12]
   28702:	2232      	movs	r2, #50	; 0x32
   28704:	2100      	movs	r1, #0
   28706:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   28708:	68fb      	ldr	r3, [r7, #12]
   2870a:	2233      	movs	r2, #51	; 0x33
   2870c:	2100      	movs	r1, #0
   2870e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   28710:	68fb      	ldr	r3, [r7, #12]
   28712:	681b      	ldr	r3, [r3, #0]
   28714:	2227      	movs	r2, #39	; 0x27
   28716:	18bc      	adds	r4, r7, r2
   28718:	0018      	movs	r0, r3
   2871a:	4b0d      	ldr	r3, [pc, #52]	; (28750 <usart_init+0x240>)
   2871c:	4798      	blx	r3
   2871e:	0003      	movs	r3, r0
   28720:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   28722:	4a15      	ldr	r2, [pc, #84]	; (28778 <usart_init+0x268>)
   28724:	2327      	movs	r3, #39	; 0x27
   28726:	18fb      	adds	r3, r7, r3
   28728:	781b      	ldrb	r3, [r3, #0]
   2872a:	0011      	movs	r1, r2
   2872c:	0018      	movs	r0, r3
   2872e:	4b13      	ldr	r3, [pc, #76]	; (2877c <usart_init+0x26c>)
   28730:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28732:	2327      	movs	r3, #39	; 0x27
   28734:	18fb      	adds	r3, r7, r3
   28736:	781a      	ldrb	r2, [r3, #0]
   28738:	4b11      	ldr	r3, [pc, #68]	; (28780 <usart_init+0x270>)
   2873a:	0092      	lsls	r2, r2, #2
   2873c:	68f9      	ldr	r1, [r7, #12]
   2873e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   28740:	233b      	movs	r3, #59	; 0x3b
   28742:	18fb      	adds	r3, r7, r3
   28744:	781b      	ldrb	r3, [r3, #0]
}
   28746:	0018      	movs	r0, r3
   28748:	46bd      	mov	sp, r7
   2874a:	b013      	add	sp, #76	; 0x4c
   2874c:	bd90      	pop	{r4, r7, pc}
   2874e:	46c0      	nop			; (mov r8, r8)
   28750:	00026fdd 	.word	0x00026fdd
   28754:	0002814d 	.word	0x0002814d
   28758:	00028135 	.word	0x00028135
   2875c:	0002986d 	.word	0x0002986d
   28760:	000298b1 	.word	0x000298b1
   28764:	00026d95 	.word	0x00026d95
   28768:	00028235 	.word	0x00028235
   2876c:	000281a9 	.word	0x000281a9
   28770:	00026e21 	.word	0x00026e21
   28774:	00029bcd 	.word	0x00029bcd
   28778:	000289ed 	.word	0x000289ed
   2877c:	00027041 	.word	0x00027041
   28780:	20005784 	.word	0x20005784

00028784 <system_interrupt_enter_critical_section>:
{
   28784:	b580      	push	{r7, lr}
   28786:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28788:	4b02      	ldr	r3, [pc, #8]	; (28794 <system_interrupt_enter_critical_section+0x10>)
   2878a:	4798      	blx	r3
}
   2878c:	46c0      	nop			; (mov r8, r8)
   2878e:	46bd      	mov	sp, r7
   28790:	bd80      	pop	{r7, pc}
   28792:	46c0      	nop			; (mov r8, r8)
   28794:	00025bd9 	.word	0x00025bd9

00028798 <system_interrupt_leave_critical_section>:
{
   28798:	b580      	push	{r7, lr}
   2879a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2879c:	4b02      	ldr	r3, [pc, #8]	; (287a8 <system_interrupt_leave_critical_section+0x10>)
   2879e:	4798      	blx	r3
}
   287a0:	46c0      	nop			; (mov r8, r8)
   287a2:	46bd      	mov	sp, r7
   287a4:	bd80      	pop	{r7, pc}
   287a6:	46c0      	nop			; (mov r8, r8)
   287a8:	00025c2d 	.word	0x00025c2d

000287ac <usart_is_syncing>:
{
   287ac:	b580      	push	{r7, lr}
   287ae:	b084      	sub	sp, #16
   287b0:	af00      	add	r7, sp, #0
   287b2:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   287b4:	687b      	ldr	r3, [r7, #4]
   287b6:	681b      	ldr	r3, [r3, #0]
   287b8:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   287ba:	68fb      	ldr	r3, [r7, #12]
   287bc:	69db      	ldr	r3, [r3, #28]
   287be:	1e5a      	subs	r2, r3, #1
   287c0:	4193      	sbcs	r3, r2
   287c2:	b2db      	uxtb	r3, r3
}
   287c4:	0018      	movs	r0, r3
   287c6:	46bd      	mov	sp, r7
   287c8:	b004      	add	sp, #16
   287ca:	bd80      	pop	{r7, pc}

000287cc <_usart_wait_for_sync>:
{
   287cc:	b580      	push	{r7, lr}
   287ce:	b082      	sub	sp, #8
   287d0:	af00      	add	r7, sp, #0
   287d2:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   287d4:	46c0      	nop			; (mov r8, r8)
   287d6:	687b      	ldr	r3, [r7, #4]
   287d8:	0018      	movs	r0, r3
   287da:	4b04      	ldr	r3, [pc, #16]	; (287ec <_usart_wait_for_sync+0x20>)
   287dc:	4798      	blx	r3
   287de:	1e03      	subs	r3, r0, #0
   287e0:	d1f9      	bne.n	287d6 <_usart_wait_for_sync+0xa>
}
   287e2:	46c0      	nop			; (mov r8, r8)
   287e4:	46bd      	mov	sp, r7
   287e6:	b002      	add	sp, #8
   287e8:	bd80      	pop	{r7, pc}
   287ea:	46c0      	nop			; (mov r8, r8)
   287ec:	000287ad 	.word	0x000287ad

000287f0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   287f0:	b580      	push	{r7, lr}
   287f2:	b086      	sub	sp, #24
   287f4:	af00      	add	r7, sp, #0
   287f6:	60f8      	str	r0, [r7, #12]
   287f8:	60b9      	str	r1, [r7, #8]
   287fa:	1dbb      	adds	r3, r7, #6
   287fc:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   287fe:	68fb      	ldr	r3, [r7, #12]
   28800:	681b      	ldr	r3, [r3, #0]
   28802:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28804:	4b0f      	ldr	r3, [pc, #60]	; (28844 <_usart_write_buffer+0x54>)
   28806:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   28808:	68fb      	ldr	r3, [r7, #12]
   2880a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2880c:	b29b      	uxth	r3, r3
   2880e:	2b00      	cmp	r3, #0
   28810:	d003      	beq.n	2881a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   28812:	4b0d      	ldr	r3, [pc, #52]	; (28848 <_usart_write_buffer+0x58>)
   28814:	4798      	blx	r3
		return STATUS_BUSY;
   28816:	2305      	movs	r3, #5
   28818:	e010      	b.n	2883c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2881a:	68fb      	ldr	r3, [r7, #12]
   2881c:	1dba      	adds	r2, r7, #6
   2881e:	8812      	ldrh	r2, [r2, #0]
   28820:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   28822:	4b09      	ldr	r3, [pc, #36]	; (28848 <_usart_write_buffer+0x58>)
   28824:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   28826:	68fb      	ldr	r3, [r7, #12]
   28828:	68ba      	ldr	r2, [r7, #8]
   2882a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2882c:	68fb      	ldr	r3, [r7, #12]
   2882e:	2233      	movs	r2, #51	; 0x33
   28830:	2105      	movs	r1, #5
   28832:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   28834:	697b      	ldr	r3, [r7, #20]
   28836:	2201      	movs	r2, #1
   28838:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2883a:	2300      	movs	r3, #0
}
   2883c:	0018      	movs	r0, r3
   2883e:	46bd      	mov	sp, r7
   28840:	b006      	add	sp, #24
   28842:	bd80      	pop	{r7, pc}
   28844:	00028785 	.word	0x00028785
   28848:	00028799 	.word	0x00028799

0002884c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   2884c:	b580      	push	{r7, lr}
   2884e:	b086      	sub	sp, #24
   28850:	af00      	add	r7, sp, #0
   28852:	60f8      	str	r0, [r7, #12]
   28854:	60b9      	str	r1, [r7, #8]
   28856:	1dbb      	adds	r3, r7, #6
   28858:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2885a:	68fb      	ldr	r3, [r7, #12]
   2885c:	681b      	ldr	r3, [r3, #0]
   2885e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   28860:	4b16      	ldr	r3, [pc, #88]	; (288bc <_usart_read_buffer+0x70>)
   28862:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   28864:	68fb      	ldr	r3, [r7, #12]
   28866:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28868:	b29b      	uxth	r3, r3
   2886a:	2b00      	cmp	r3, #0
   2886c:	d003      	beq.n	28876 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   2886e:	4b14      	ldr	r3, [pc, #80]	; (288c0 <_usart_read_buffer+0x74>)
   28870:	4798      	blx	r3
		return STATUS_BUSY;
   28872:	2305      	movs	r3, #5
   28874:	e01e      	b.n	288b4 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   28876:	68fb      	ldr	r3, [r7, #12]
   28878:	1dba      	adds	r2, r7, #6
   2887a:	8812      	ldrh	r2, [r2, #0]
   2887c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2887e:	4b10      	ldr	r3, [pc, #64]	; (288c0 <_usart_read_buffer+0x74>)
   28880:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   28882:	68fb      	ldr	r3, [r7, #12]
   28884:	68ba      	ldr	r2, [r7, #8]
   28886:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   28888:	68fb      	ldr	r3, [r7, #12]
   2888a:	2232      	movs	r2, #50	; 0x32
   2888c:	2105      	movs	r1, #5
   2888e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   28890:	697b      	ldr	r3, [r7, #20]
   28892:	2204      	movs	r2, #4
   28894:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   28896:	68fb      	ldr	r3, [r7, #12]
   28898:	7a1b      	ldrb	r3, [r3, #8]
   2889a:	2b00      	cmp	r3, #0
   2889c:	d002      	beq.n	288a4 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2889e:	697b      	ldr	r3, [r7, #20]
   288a0:	2220      	movs	r2, #32
   288a2:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   288a4:	68fb      	ldr	r3, [r7, #12]
   288a6:	7a5b      	ldrb	r3, [r3, #9]
   288a8:	2b00      	cmp	r3, #0
   288aa:	d002      	beq.n	288b2 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   288ac:	697b      	ldr	r3, [r7, #20]
   288ae:	2208      	movs	r2, #8
   288b0:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   288b2:	2300      	movs	r3, #0
}
   288b4:	0018      	movs	r0, r3
   288b6:	46bd      	mov	sp, r7
   288b8:	b006      	add	sp, #24
   288ba:	bd80      	pop	{r7, pc}
   288bc:	00028785 	.word	0x00028785
   288c0:	00028799 	.word	0x00028799

000288c4 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   288c4:	b580      	push	{r7, lr}
   288c6:	b084      	sub	sp, #16
   288c8:	af00      	add	r7, sp, #0
   288ca:	60f8      	str	r0, [r7, #12]
   288cc:	60b9      	str	r1, [r7, #8]
   288ce:	1dfb      	adds	r3, r7, #7
   288d0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   288d2:	1dfb      	adds	r3, r7, #7
   288d4:	781b      	ldrb	r3, [r3, #0]
   288d6:	68fa      	ldr	r2, [r7, #12]
   288d8:	3302      	adds	r3, #2
   288da:	009b      	lsls	r3, r3, #2
   288dc:	18d3      	adds	r3, r2, r3
   288de:	3304      	adds	r3, #4
   288e0:	68ba      	ldr	r2, [r7, #8]
   288e2:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   288e4:	68fb      	ldr	r3, [r7, #12]
   288e6:	2230      	movs	r2, #48	; 0x30
   288e8:	5c9b      	ldrb	r3, [r3, r2]
   288ea:	b25a      	sxtb	r2, r3
   288ec:	1dfb      	adds	r3, r7, #7
   288ee:	781b      	ldrb	r3, [r3, #0]
   288f0:	2101      	movs	r1, #1
   288f2:	4099      	lsls	r1, r3
   288f4:	000b      	movs	r3, r1
   288f6:	b25b      	sxtb	r3, r3
   288f8:	4313      	orrs	r3, r2
   288fa:	b25b      	sxtb	r3, r3
   288fc:	b2d9      	uxtb	r1, r3
   288fe:	68fb      	ldr	r3, [r7, #12]
   28900:	2230      	movs	r2, #48	; 0x30
   28902:	5499      	strb	r1, [r3, r2]
}
   28904:	46c0      	nop			; (mov r8, r8)
   28906:	46bd      	mov	sp, r7
   28908:	b004      	add	sp, #16
   2890a:	bd80      	pop	{r7, pc}

0002890c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2890c:	b580      	push	{r7, lr}
   2890e:	b084      	sub	sp, #16
   28910:	af00      	add	r7, sp, #0
   28912:	60f8      	str	r0, [r7, #12]
   28914:	60b9      	str	r1, [r7, #8]
   28916:	1dbb      	adds	r3, r7, #6
   28918:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2891a:	1dbb      	adds	r3, r7, #6
   2891c:	881b      	ldrh	r3, [r3, #0]
   2891e:	2b00      	cmp	r3, #0
   28920:	d101      	bne.n	28926 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   28922:	2317      	movs	r3, #23
   28924:	e010      	b.n	28948 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   28926:	68fb      	ldr	r3, [r7, #12]
   28928:	79db      	ldrb	r3, [r3, #7]
   2892a:	2201      	movs	r2, #1
   2892c:	4053      	eors	r3, r2
   2892e:	b2db      	uxtb	r3, r3
   28930:	2b00      	cmp	r3, #0
   28932:	d001      	beq.n	28938 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   28934:	231c      	movs	r3, #28
   28936:	e007      	b.n	28948 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   28938:	1dbb      	adds	r3, r7, #6
   2893a:	881a      	ldrh	r2, [r3, #0]
   2893c:	68b9      	ldr	r1, [r7, #8]
   2893e:	68fb      	ldr	r3, [r7, #12]
   28940:	0018      	movs	r0, r3
   28942:	4b03      	ldr	r3, [pc, #12]	; (28950 <usart_write_buffer_job+0x44>)
   28944:	4798      	blx	r3
   28946:	0003      	movs	r3, r0
}
   28948:	0018      	movs	r0, r3
   2894a:	46bd      	mov	sp, r7
   2894c:	b004      	add	sp, #16
   2894e:	bd80      	pop	{r7, pc}
   28950:	000287f1 	.word	0x000287f1

00028954 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   28954:	b580      	push	{r7, lr}
   28956:	b084      	sub	sp, #16
   28958:	af00      	add	r7, sp, #0
   2895a:	60f8      	str	r0, [r7, #12]
   2895c:	60b9      	str	r1, [r7, #8]
   2895e:	1dbb      	adds	r3, r7, #6
   28960:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   28962:	1dbb      	adds	r3, r7, #6
   28964:	881b      	ldrh	r3, [r3, #0]
   28966:	2b00      	cmp	r3, #0
   28968:	d101      	bne.n	2896e <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   2896a:	2317      	movs	r3, #23
   2896c:	e010      	b.n	28990 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   2896e:	68fb      	ldr	r3, [r7, #12]
   28970:	799b      	ldrb	r3, [r3, #6]
   28972:	2201      	movs	r2, #1
   28974:	4053      	eors	r3, r2
   28976:	b2db      	uxtb	r3, r3
   28978:	2b00      	cmp	r3, #0
   2897a:	d001      	beq.n	28980 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2897c:	231c      	movs	r3, #28
   2897e:	e007      	b.n	28990 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   28980:	1dbb      	adds	r3, r7, #6
   28982:	881a      	ldrh	r2, [r3, #0]
   28984:	68b9      	ldr	r1, [r7, #8]
   28986:	68fb      	ldr	r3, [r7, #12]
   28988:	0018      	movs	r0, r3
   2898a:	4b03      	ldr	r3, [pc, #12]	; (28998 <usart_read_buffer_job+0x44>)
   2898c:	4798      	blx	r3
   2898e:	0003      	movs	r3, r0
}
   28990:	0018      	movs	r0, r3
   28992:	46bd      	mov	sp, r7
   28994:	b004      	add	sp, #16
   28996:	bd80      	pop	{r7, pc}
   28998:	0002884d 	.word	0x0002884d

0002899c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2899c:	b580      	push	{r7, lr}
   2899e:	b084      	sub	sp, #16
   289a0:	af00      	add	r7, sp, #0
   289a2:	6078      	str	r0, [r7, #4]
   289a4:	000a      	movs	r2, r1
   289a6:	1cfb      	adds	r3, r7, #3
   289a8:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   289aa:	1cfb      	adds	r3, r7, #3
   289ac:	781b      	ldrb	r3, [r3, #0]
   289ae:	2b00      	cmp	r3, #0
   289b0:	d002      	beq.n	289b8 <usart_get_job_status+0x1c>
   289b2:	2b01      	cmp	r3, #1
   289b4:	d007      	beq.n	289c6 <usart_get_job_status+0x2a>
   289b6:	e00d      	b.n	289d4 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   289b8:	230f      	movs	r3, #15
   289ba:	18fb      	adds	r3, r7, r3
   289bc:	687a      	ldr	r2, [r7, #4]
   289be:	2132      	movs	r1, #50	; 0x32
   289c0:	5c52      	ldrb	r2, [r2, r1]
   289c2:	701a      	strb	r2, [r3, #0]
			break;
   289c4:	e00b      	b.n	289de <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   289c6:	230f      	movs	r3, #15
   289c8:	18fb      	adds	r3, r7, r3
   289ca:	687a      	ldr	r2, [r7, #4]
   289cc:	2133      	movs	r1, #51	; 0x33
   289ce:	5c52      	ldrb	r2, [r2, r1]
   289d0:	701a      	strb	r2, [r3, #0]
			break;
   289d2:	e004      	b.n	289de <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   289d4:	230f      	movs	r3, #15
   289d6:	18fb      	adds	r3, r7, r3
   289d8:	2217      	movs	r2, #23
   289da:	701a      	strb	r2, [r3, #0]
			break;
   289dc:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   289de:	230f      	movs	r3, #15
   289e0:	18fb      	adds	r3, r7, r3
   289e2:	781b      	ldrb	r3, [r3, #0]
}
   289e4:	0018      	movs	r0, r3
   289e6:	46bd      	mov	sp, r7
   289e8:	b004      	add	sp, #16
   289ea:	bd80      	pop	{r7, pc}

000289ec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   289ec:	b580      	push	{r7, lr}
   289ee:	b088      	sub	sp, #32
   289f0:	af00      	add	r7, sp, #0
   289f2:	0002      	movs	r2, r0
   289f4:	1dfb      	adds	r3, r7, #7
   289f6:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   289f8:	1dfb      	adds	r3, r7, #7
   289fa:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   289fc:	4ba3      	ldr	r3, [pc, #652]	; (28c8c <_usart_interrupt_handler+0x2a0>)
   289fe:	0092      	lsls	r2, r2, #2
   28a00:	58d3      	ldr	r3, [r2, r3]
   28a02:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   28a04:	69bb      	ldr	r3, [r7, #24]
   28a06:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   28a08:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   28a0a:	69bb      	ldr	r3, [r7, #24]
   28a0c:	0018      	movs	r0, r3
   28a0e:	4ba0      	ldr	r3, [pc, #640]	; (28c90 <_usart_interrupt_handler+0x2a4>)
   28a10:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   28a12:	697b      	ldr	r3, [r7, #20]
   28a14:	7e1b      	ldrb	r3, [r3, #24]
   28a16:	b2da      	uxtb	r2, r3
   28a18:	2312      	movs	r3, #18
   28a1a:	18fb      	adds	r3, r7, r3
   28a1c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   28a1e:	697b      	ldr	r3, [r7, #20]
   28a20:	7d9b      	ldrb	r3, [r3, #22]
   28a22:	b2db      	uxtb	r3, r3
   28a24:	b29a      	uxth	r2, r3
   28a26:	2312      	movs	r3, #18
   28a28:	18fb      	adds	r3, r7, r3
   28a2a:	2112      	movs	r1, #18
   28a2c:	1879      	adds	r1, r7, r1
   28a2e:	8809      	ldrh	r1, [r1, #0]
   28a30:	400a      	ands	r2, r1
   28a32:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   28a34:	69bb      	ldr	r3, [r7, #24]
   28a36:	2230      	movs	r2, #48	; 0x30
   28a38:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   28a3a:	69ba      	ldr	r2, [r7, #24]
   28a3c:	2131      	movs	r1, #49	; 0x31
   28a3e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   28a40:	4013      	ands	r3, r2
   28a42:	b2da      	uxtb	r2, r3
   28a44:	2310      	movs	r3, #16
   28a46:	18fb      	adds	r3, r7, r3
   28a48:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   28a4a:	2312      	movs	r3, #18
   28a4c:	18fb      	adds	r3, r7, r3
   28a4e:	881b      	ldrh	r3, [r3, #0]
   28a50:	2201      	movs	r2, #1
   28a52:	4013      	ands	r3, r2
   28a54:	d044      	beq.n	28ae0 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   28a56:	69bb      	ldr	r3, [r7, #24]
   28a58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28a5a:	b29b      	uxth	r3, r3
   28a5c:	2b00      	cmp	r3, #0
   28a5e:	d03c      	beq.n	28ada <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   28a60:	69bb      	ldr	r3, [r7, #24]
   28a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a64:	781b      	ldrb	r3, [r3, #0]
   28a66:	b2da      	uxtb	r2, r3
   28a68:	231c      	movs	r3, #28
   28a6a:	18fb      	adds	r3, r7, r3
   28a6c:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   28a6e:	69bb      	ldr	r3, [r7, #24]
   28a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a72:	1c5a      	adds	r2, r3, #1
   28a74:	69bb      	ldr	r3, [r7, #24]
   28a76:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28a78:	69bb      	ldr	r3, [r7, #24]
   28a7a:	795b      	ldrb	r3, [r3, #5]
   28a7c:	2b01      	cmp	r3, #1
   28a7e:	d113      	bne.n	28aa8 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   28a80:	69bb      	ldr	r3, [r7, #24]
   28a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28a84:	781b      	ldrb	r3, [r3, #0]
   28a86:	b2db      	uxtb	r3, r3
   28a88:	021b      	lsls	r3, r3, #8
   28a8a:	b21a      	sxth	r2, r3
   28a8c:	231c      	movs	r3, #28
   28a8e:	18fb      	adds	r3, r7, r3
   28a90:	2100      	movs	r1, #0
   28a92:	5e5b      	ldrsh	r3, [r3, r1]
   28a94:	4313      	orrs	r3, r2
   28a96:	b21a      	sxth	r2, r3
   28a98:	231c      	movs	r3, #28
   28a9a:	18fb      	adds	r3, r7, r3
   28a9c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   28a9e:	69bb      	ldr	r3, [r7, #24]
   28aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28aa2:	1c5a      	adds	r2, r3, #1
   28aa4:	69bb      	ldr	r3, [r7, #24]
   28aa6:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   28aa8:	231c      	movs	r3, #28
   28aaa:	18fb      	adds	r3, r7, r3
   28aac:	881b      	ldrh	r3, [r3, #0]
   28aae:	05db      	lsls	r3, r3, #23
   28ab0:	0ddb      	lsrs	r3, r3, #23
   28ab2:	b29a      	uxth	r2, r3
   28ab4:	697b      	ldr	r3, [r7, #20]
   28ab6:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   28ab8:	69bb      	ldr	r3, [r7, #24]
   28aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   28abc:	b29b      	uxth	r3, r3
   28abe:	3b01      	subs	r3, #1
   28ac0:	b29b      	uxth	r3, r3
   28ac2:	69ba      	ldr	r2, [r7, #24]
   28ac4:	1c19      	adds	r1, r3, #0
   28ac6:	85d1      	strh	r1, [r2, #46]	; 0x2e
   28ac8:	2b00      	cmp	r3, #0
   28aca:	d109      	bne.n	28ae0 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28acc:	697b      	ldr	r3, [r7, #20]
   28ace:	2201      	movs	r2, #1
   28ad0:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   28ad2:	697b      	ldr	r3, [r7, #20]
   28ad4:	2202      	movs	r2, #2
   28ad6:	759a      	strb	r2, [r3, #22]
   28ad8:	e002      	b.n	28ae0 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   28ada:	697b      	ldr	r3, [r7, #20]
   28adc:	2201      	movs	r2, #1
   28ade:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   28ae0:	2312      	movs	r3, #18
   28ae2:	18fb      	adds	r3, r7, r3
   28ae4:	881b      	ldrh	r3, [r3, #0]
   28ae6:	2202      	movs	r2, #2
   28ae8:	4013      	ands	r3, r2
   28aea:	d011      	beq.n	28b10 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   28aec:	697b      	ldr	r3, [r7, #20]
   28aee:	2202      	movs	r2, #2
   28af0:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   28af2:	69bb      	ldr	r3, [r7, #24]
   28af4:	2233      	movs	r2, #51	; 0x33
   28af6:	2100      	movs	r1, #0
   28af8:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   28afa:	2310      	movs	r3, #16
   28afc:	18fb      	adds	r3, r7, r3
   28afe:	881b      	ldrh	r3, [r3, #0]
   28b00:	2201      	movs	r2, #1
   28b02:	4013      	ands	r3, r2
   28b04:	d004      	beq.n	28b10 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   28b06:	69bb      	ldr	r3, [r7, #24]
   28b08:	68db      	ldr	r3, [r3, #12]
   28b0a:	69ba      	ldr	r2, [r7, #24]
   28b0c:	0010      	movs	r0, r2
   28b0e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   28b10:	2312      	movs	r3, #18
   28b12:	18fb      	adds	r3, r7, r3
   28b14:	881b      	ldrh	r3, [r3, #0]
   28b16:	2204      	movs	r2, #4
   28b18:	4013      	ands	r3, r2
   28b1a:	d100      	bne.n	28b1e <_usart_interrupt_handler+0x132>
   28b1c:	e0bd      	b.n	28c9a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   28b1e:	69bb      	ldr	r3, [r7, #24]
   28b20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28b22:	b29b      	uxth	r3, r3
   28b24:	2b00      	cmp	r3, #0
   28b26:	d100      	bne.n	28b2a <_usart_interrupt_handler+0x13e>
   28b28:	e0b4      	b.n	28c94 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   28b2a:	697b      	ldr	r3, [r7, #20]
   28b2c:	8b5b      	ldrh	r3, [r3, #26]
   28b2e:	b29b      	uxth	r3, r3
   28b30:	b2da      	uxtb	r2, r3
   28b32:	231f      	movs	r3, #31
   28b34:	18fb      	adds	r3, r7, r3
   28b36:	213f      	movs	r1, #63	; 0x3f
   28b38:	400a      	ands	r2, r1
   28b3a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   28b3c:	231f      	movs	r3, #31
   28b3e:	18fb      	adds	r3, r7, r3
   28b40:	781b      	ldrb	r3, [r3, #0]
   28b42:	2208      	movs	r2, #8
   28b44:	4013      	ands	r3, r2
   28b46:	d007      	beq.n	28b58 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   28b48:	231f      	movs	r3, #31
   28b4a:	18fb      	adds	r3, r7, r3
   28b4c:	221f      	movs	r2, #31
   28b4e:	18ba      	adds	r2, r7, r2
   28b50:	7812      	ldrb	r2, [r2, #0]
   28b52:	2108      	movs	r1, #8
   28b54:	438a      	bics	r2, r1
   28b56:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   28b58:	231f      	movs	r3, #31
   28b5a:	18fb      	adds	r3, r7, r3
   28b5c:	781b      	ldrb	r3, [r3, #0]
   28b5e:	2b00      	cmp	r3, #0
   28b60:	d050      	beq.n	28c04 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   28b62:	231f      	movs	r3, #31
   28b64:	18fb      	adds	r3, r7, r3
   28b66:	781b      	ldrb	r3, [r3, #0]
   28b68:	2202      	movs	r2, #2
   28b6a:	4013      	ands	r3, r2
   28b6c:	d007      	beq.n	28b7e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   28b6e:	69bb      	ldr	r3, [r7, #24]
   28b70:	2232      	movs	r2, #50	; 0x32
   28b72:	211a      	movs	r1, #26
   28b74:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   28b76:	697b      	ldr	r3, [r7, #20]
   28b78:	2202      	movs	r2, #2
   28b7a:	835a      	strh	r2, [r3, #26]
   28b7c:	e036      	b.n	28bec <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   28b7e:	231f      	movs	r3, #31
   28b80:	18fb      	adds	r3, r7, r3
   28b82:	781b      	ldrb	r3, [r3, #0]
   28b84:	2204      	movs	r2, #4
   28b86:	4013      	ands	r3, r2
   28b88:	d007      	beq.n	28b9a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   28b8a:	69bb      	ldr	r3, [r7, #24]
   28b8c:	2232      	movs	r2, #50	; 0x32
   28b8e:	211e      	movs	r1, #30
   28b90:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   28b92:	697b      	ldr	r3, [r7, #20]
   28b94:	2204      	movs	r2, #4
   28b96:	835a      	strh	r2, [r3, #26]
   28b98:	e028      	b.n	28bec <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   28b9a:	231f      	movs	r3, #31
   28b9c:	18fb      	adds	r3, r7, r3
   28b9e:	781b      	ldrb	r3, [r3, #0]
   28ba0:	2201      	movs	r2, #1
   28ba2:	4013      	ands	r3, r2
   28ba4:	d007      	beq.n	28bb6 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   28ba6:	69bb      	ldr	r3, [r7, #24]
   28ba8:	2232      	movs	r2, #50	; 0x32
   28baa:	2113      	movs	r1, #19
   28bac:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   28bae:	697b      	ldr	r3, [r7, #20]
   28bb0:	2201      	movs	r2, #1
   28bb2:	835a      	strh	r2, [r3, #26]
   28bb4:	e01a      	b.n	28bec <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   28bb6:	231f      	movs	r3, #31
   28bb8:	18fb      	adds	r3, r7, r3
   28bba:	781b      	ldrb	r3, [r3, #0]
   28bbc:	2210      	movs	r2, #16
   28bbe:	4013      	ands	r3, r2
   28bc0:	d007      	beq.n	28bd2 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   28bc2:	69bb      	ldr	r3, [r7, #24]
   28bc4:	2232      	movs	r2, #50	; 0x32
   28bc6:	2142      	movs	r1, #66	; 0x42
   28bc8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   28bca:	697b      	ldr	r3, [r7, #20]
   28bcc:	2210      	movs	r2, #16
   28bce:	835a      	strh	r2, [r3, #26]
   28bd0:	e00c      	b.n	28bec <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   28bd2:	231f      	movs	r3, #31
   28bd4:	18fb      	adds	r3, r7, r3
   28bd6:	781b      	ldrb	r3, [r3, #0]
   28bd8:	2220      	movs	r2, #32
   28bda:	4013      	ands	r3, r2
   28bdc:	d006      	beq.n	28bec <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   28bde:	69bb      	ldr	r3, [r7, #24]
   28be0:	2232      	movs	r2, #50	; 0x32
   28be2:	2141      	movs	r1, #65	; 0x41
   28be4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   28be6:	697b      	ldr	r3, [r7, #20]
   28be8:	2220      	movs	r2, #32
   28bea:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   28bec:	2310      	movs	r3, #16
   28bee:	18fb      	adds	r3, r7, r3
   28bf0:	881b      	ldrh	r3, [r3, #0]
   28bf2:	2204      	movs	r2, #4
   28bf4:	4013      	ands	r3, r2
				if (callback_status
   28bf6:	d050      	beq.n	28c9a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   28bf8:	69bb      	ldr	r3, [r7, #24]
   28bfa:	695b      	ldr	r3, [r3, #20]
   28bfc:	69ba      	ldr	r2, [r7, #24]
   28bfe:	0010      	movs	r0, r2
   28c00:	4798      	blx	r3
   28c02:	e04a      	b.n	28c9a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   28c04:	697b      	ldr	r3, [r7, #20]
   28c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   28c08:	b29a      	uxth	r2, r3
   28c0a:	230e      	movs	r3, #14
   28c0c:	18fb      	adds	r3, r7, r3
   28c0e:	05d2      	lsls	r2, r2, #23
   28c10:	0dd2      	lsrs	r2, r2, #23
   28c12:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   28c14:	69bb      	ldr	r3, [r7, #24]
   28c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c18:	220e      	movs	r2, #14
   28c1a:	18ba      	adds	r2, r7, r2
   28c1c:	8812      	ldrh	r2, [r2, #0]
   28c1e:	b2d2      	uxtb	r2, r2
   28c20:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   28c22:	69bb      	ldr	r3, [r7, #24]
   28c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c26:	1c5a      	adds	r2, r3, #1
   28c28:	69bb      	ldr	r3, [r7, #24]
   28c2a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   28c2c:	69bb      	ldr	r3, [r7, #24]
   28c2e:	795b      	ldrb	r3, [r3, #5]
   28c30:	2b01      	cmp	r3, #1
   28c32:	d10d      	bne.n	28c50 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   28c34:	69bb      	ldr	r3, [r7, #24]
   28c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c38:	220e      	movs	r2, #14
   28c3a:	18ba      	adds	r2, r7, r2
   28c3c:	8812      	ldrh	r2, [r2, #0]
   28c3e:	0a12      	lsrs	r2, r2, #8
   28c40:	b292      	uxth	r2, r2
   28c42:	b2d2      	uxtb	r2, r2
   28c44:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   28c46:	69bb      	ldr	r3, [r7, #24]
   28c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28c4a:	1c5a      	adds	r2, r3, #1
   28c4c:	69bb      	ldr	r3, [r7, #24]
   28c4e:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   28c50:	69bb      	ldr	r3, [r7, #24]
   28c52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   28c54:	b29b      	uxth	r3, r3
   28c56:	3b01      	subs	r3, #1
   28c58:	b29b      	uxth	r3, r3
   28c5a:	69ba      	ldr	r2, [r7, #24]
   28c5c:	1c19      	adds	r1, r3, #0
   28c5e:	8591      	strh	r1, [r2, #44]	; 0x2c
   28c60:	2b00      	cmp	r3, #0
   28c62:	d11a      	bne.n	28c9a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28c64:	697b      	ldr	r3, [r7, #20]
   28c66:	2204      	movs	r2, #4
   28c68:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   28c6a:	69bb      	ldr	r3, [r7, #24]
   28c6c:	2232      	movs	r2, #50	; 0x32
   28c6e:	2100      	movs	r1, #0
   28c70:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   28c72:	2310      	movs	r3, #16
   28c74:	18fb      	adds	r3, r7, r3
   28c76:	881b      	ldrh	r3, [r3, #0]
   28c78:	2202      	movs	r2, #2
   28c7a:	4013      	ands	r3, r2
					if (callback_status
   28c7c:	d00d      	beq.n	28c9a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   28c7e:	69bb      	ldr	r3, [r7, #24]
   28c80:	691b      	ldr	r3, [r3, #16]
   28c82:	69ba      	ldr	r2, [r7, #24]
   28c84:	0010      	movs	r0, r2
   28c86:	4798      	blx	r3
   28c88:	e007      	b.n	28c9a <_usart_interrupt_handler+0x2ae>
   28c8a:	46c0      	nop			; (mov r8, r8)
   28c8c:	20005784 	.word	0x20005784
   28c90:	000287cd 	.word	0x000287cd
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   28c94:	697b      	ldr	r3, [r7, #20]
   28c96:	2204      	movs	r2, #4
   28c98:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   28c9a:	2312      	movs	r3, #18
   28c9c:	18fb      	adds	r3, r7, r3
   28c9e:	881b      	ldrh	r3, [r3, #0]
   28ca0:	2210      	movs	r2, #16
   28ca2:	4013      	ands	r3, r2
   28ca4:	d010      	beq.n	28cc8 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   28ca6:	697b      	ldr	r3, [r7, #20]
   28ca8:	2210      	movs	r2, #16
   28caa:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   28cac:	697b      	ldr	r3, [r7, #20]
   28cae:	2210      	movs	r2, #16
   28cb0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   28cb2:	2310      	movs	r3, #16
   28cb4:	18fb      	adds	r3, r7, r3
   28cb6:	881b      	ldrh	r3, [r3, #0]
   28cb8:	2210      	movs	r2, #16
   28cba:	4013      	ands	r3, r2
   28cbc:	d004      	beq.n	28cc8 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   28cbe:	69bb      	ldr	r3, [r7, #24]
   28cc0:	69db      	ldr	r3, [r3, #28]
   28cc2:	69ba      	ldr	r2, [r7, #24]
   28cc4:	0010      	movs	r0, r2
   28cc6:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   28cc8:	2312      	movs	r3, #18
   28cca:	18fb      	adds	r3, r7, r3
   28ccc:	881b      	ldrh	r3, [r3, #0]
   28cce:	2220      	movs	r2, #32
   28cd0:	4013      	ands	r3, r2
   28cd2:	d010      	beq.n	28cf6 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   28cd4:	697b      	ldr	r3, [r7, #20]
   28cd6:	2220      	movs	r2, #32
   28cd8:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   28cda:	697b      	ldr	r3, [r7, #20]
   28cdc:	2220      	movs	r2, #32
   28cde:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   28ce0:	2310      	movs	r3, #16
   28ce2:	18fb      	adds	r3, r7, r3
   28ce4:	881b      	ldrh	r3, [r3, #0]
   28ce6:	2208      	movs	r2, #8
   28ce8:	4013      	ands	r3, r2
   28cea:	d004      	beq.n	28cf6 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   28cec:	69bb      	ldr	r3, [r7, #24]
   28cee:	699b      	ldr	r3, [r3, #24]
   28cf0:	69ba      	ldr	r2, [r7, #24]
   28cf2:	0010      	movs	r0, r2
   28cf4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   28cf6:	2312      	movs	r3, #18
   28cf8:	18fb      	adds	r3, r7, r3
   28cfa:	881b      	ldrh	r3, [r3, #0]
   28cfc:	2208      	movs	r2, #8
   28cfe:	4013      	ands	r3, r2
   28d00:	d010      	beq.n	28d24 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   28d02:	697b      	ldr	r3, [r7, #20]
   28d04:	2208      	movs	r2, #8
   28d06:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   28d08:	697b      	ldr	r3, [r7, #20]
   28d0a:	2208      	movs	r2, #8
   28d0c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   28d0e:	2310      	movs	r3, #16
   28d10:	18fb      	adds	r3, r7, r3
   28d12:	881b      	ldrh	r3, [r3, #0]
   28d14:	2220      	movs	r2, #32
   28d16:	4013      	ands	r3, r2
   28d18:	d004      	beq.n	28d24 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   28d1a:	69bb      	ldr	r3, [r7, #24]
   28d1c:	6a1b      	ldr	r3, [r3, #32]
   28d1e:	69ba      	ldr	r2, [r7, #24]
   28d20:	0010      	movs	r0, r2
   28d22:	4798      	blx	r3
		}
	}
#endif
}
   28d24:	46c0      	nop			; (mov r8, r8)
   28d26:	46bd      	mov	sp, r7
   28d28:	b008      	add	sp, #32
   28d2a:	bd80      	pop	{r7, pc}

00028d2c <system_gclk_gen_get_config_defaults>:
{
   28d2c:	b580      	push	{r7, lr}
   28d2e:	b082      	sub	sp, #8
   28d30:	af00      	add	r7, sp, #0
   28d32:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   28d34:	687b      	ldr	r3, [r7, #4]
   28d36:	2201      	movs	r2, #1
   28d38:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   28d3a:	687b      	ldr	r3, [r7, #4]
   28d3c:	2200      	movs	r2, #0
   28d3e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   28d40:	687b      	ldr	r3, [r7, #4]
   28d42:	2206      	movs	r2, #6
   28d44:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   28d46:	687b      	ldr	r3, [r7, #4]
   28d48:	2200      	movs	r2, #0
   28d4a:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   28d4c:	687b      	ldr	r3, [r7, #4]
   28d4e:	2200      	movs	r2, #0
   28d50:	725a      	strb	r2, [r3, #9]
}
   28d52:	46c0      	nop			; (mov r8, r8)
   28d54:	46bd      	mov	sp, r7
   28d56:	b002      	add	sp, #8
   28d58:	bd80      	pop	{r7, pc}

00028d5a <system_gclk_chan_get_config_defaults>:
{
   28d5a:	b580      	push	{r7, lr}
   28d5c:	b082      	sub	sp, #8
   28d5e:	af00      	add	r7, sp, #0
   28d60:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28d62:	687b      	ldr	r3, [r7, #4]
   28d64:	2200      	movs	r2, #0
   28d66:	701a      	strb	r2, [r3, #0]
}
   28d68:	46c0      	nop			; (mov r8, r8)
   28d6a:	46bd      	mov	sp, r7
   28d6c:	b002      	add	sp, #8
   28d6e:	bd80      	pop	{r7, pc}

00028d70 <system_clock_source_osc8m_get_config_defaults>:
{
   28d70:	b580      	push	{r7, lr}
   28d72:	b082      	sub	sp, #8
   28d74:	af00      	add	r7, sp, #0
   28d76:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   28d78:	687b      	ldr	r3, [r7, #4]
   28d7a:	2203      	movs	r2, #3
   28d7c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   28d7e:	687b      	ldr	r3, [r7, #4]
   28d80:	2200      	movs	r2, #0
   28d82:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   28d84:	687b      	ldr	r3, [r7, #4]
   28d86:	2201      	movs	r2, #1
   28d88:	709a      	strb	r2, [r3, #2]
}
   28d8a:	46c0      	nop			; (mov r8, r8)
   28d8c:	46bd      	mov	sp, r7
   28d8e:	b002      	add	sp, #8
   28d90:	bd80      	pop	{r7, pc}
	...

00028d94 <system_cpu_clock_set_divider>:
{
   28d94:	b580      	push	{r7, lr}
   28d96:	b082      	sub	sp, #8
   28d98:	af00      	add	r7, sp, #0
   28d9a:	0002      	movs	r2, r0
   28d9c:	1dfb      	adds	r3, r7, #7
   28d9e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   28da0:	4a03      	ldr	r2, [pc, #12]	; (28db0 <system_cpu_clock_set_divider+0x1c>)
   28da2:	1dfb      	adds	r3, r7, #7
   28da4:	781b      	ldrb	r3, [r3, #0]
   28da6:	7213      	strb	r3, [r2, #8]
}
   28da8:	46c0      	nop			; (mov r8, r8)
   28daa:	46bd      	mov	sp, r7
   28dac:	b002      	add	sp, #8
   28dae:	bd80      	pop	{r7, pc}
   28db0:	40000400 	.word	0x40000400

00028db4 <system_apb_clock_set_divider>:
{
   28db4:	b580      	push	{r7, lr}
   28db6:	b082      	sub	sp, #8
   28db8:	af00      	add	r7, sp, #0
   28dba:	0002      	movs	r2, r0
   28dbc:	1dfb      	adds	r3, r7, #7
   28dbe:	701a      	strb	r2, [r3, #0]
   28dc0:	1dbb      	adds	r3, r7, #6
   28dc2:	1c0a      	adds	r2, r1, #0
   28dc4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28dc6:	1dfb      	adds	r3, r7, #7
   28dc8:	781b      	ldrb	r3, [r3, #0]
   28dca:	2b01      	cmp	r3, #1
   28dcc:	d008      	beq.n	28de0 <system_apb_clock_set_divider+0x2c>
   28dce:	2b02      	cmp	r3, #2
   28dd0:	d00b      	beq.n	28dea <system_apb_clock_set_divider+0x36>
   28dd2:	2b00      	cmp	r3, #0
   28dd4:	d10e      	bne.n	28df4 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   28dd6:	4a0b      	ldr	r2, [pc, #44]	; (28e04 <system_apb_clock_set_divider+0x50>)
   28dd8:	1dbb      	adds	r3, r7, #6
   28dda:	781b      	ldrb	r3, [r3, #0]
   28ddc:	7253      	strb	r3, [r2, #9]
			break;
   28dde:	e00b      	b.n	28df8 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   28de0:	4a08      	ldr	r2, [pc, #32]	; (28e04 <system_apb_clock_set_divider+0x50>)
   28de2:	1dbb      	adds	r3, r7, #6
   28de4:	781b      	ldrb	r3, [r3, #0]
   28de6:	7293      	strb	r3, [r2, #10]
			break;
   28de8:	e006      	b.n	28df8 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   28dea:	4a06      	ldr	r2, [pc, #24]	; (28e04 <system_apb_clock_set_divider+0x50>)
   28dec:	1dbb      	adds	r3, r7, #6
   28dee:	781b      	ldrb	r3, [r3, #0]
   28df0:	72d3      	strb	r3, [r2, #11]
			break;
   28df2:	e001      	b.n	28df8 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   28df4:	2317      	movs	r3, #23
   28df6:	e000      	b.n	28dfa <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   28df8:	2300      	movs	r3, #0
}
   28dfa:	0018      	movs	r0, r3
   28dfc:	46bd      	mov	sp, r7
   28dfe:	b002      	add	sp, #8
   28e00:	bd80      	pop	{r7, pc}
   28e02:	46c0      	nop			; (mov r8, r8)
   28e04:	40000400 	.word	0x40000400

00028e08 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   28e08:	b580      	push	{r7, lr}
   28e0a:	b082      	sub	sp, #8
   28e0c:	af00      	add	r7, sp, #0
   28e0e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   28e10:	687b      	ldr	r3, [r7, #4]
   28e12:	2201      	movs	r2, #1
   28e14:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   28e16:	687b      	ldr	r3, [r7, #4]
   28e18:	2200      	movs	r2, #0
   28e1a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   28e1c:	687b      	ldr	r3, [r7, #4]
   28e1e:	2200      	movs	r2, #0
   28e20:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   28e22:	687b      	ldr	r3, [r7, #4]
   28e24:	2200      	movs	r2, #0
   28e26:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   28e28:	687b      	ldr	r3, [r7, #4]
   28e2a:	2200      	movs	r2, #0
   28e2c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   28e2e:	687b      	ldr	r3, [r7, #4]
   28e30:	4a0a      	ldr	r2, [pc, #40]	; (28e5c <system_clock_source_dpll_get_config_defaults+0x54>)
   28e32:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   28e34:	687b      	ldr	r3, [r7, #4]
   28e36:	2280      	movs	r2, #128	; 0x80
   28e38:	0212      	lsls	r2, r2, #8
   28e3a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   28e3c:	687b      	ldr	r3, [r7, #4]
   28e3e:	2201      	movs	r2, #1
   28e40:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   28e42:	687b      	ldr	r3, [r7, #4]
   28e44:	2200      	movs	r2, #0
   28e46:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   28e48:	687b      	ldr	r3, [r7, #4]
   28e4a:	2200      	movs	r2, #0
   28e4c:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   28e4e:	687b      	ldr	r3, [r7, #4]
   28e50:	2200      	movs	r2, #0
   28e52:	749a      	strb	r2, [r3, #18]
};
   28e54:	46c0      	nop			; (mov r8, r8)
   28e56:	46bd      	mov	sp, r7
   28e58:	b002      	add	sp, #8
   28e5a:	bd80      	pop	{r7, pc}
   28e5c:	02dc6c00 	.word	0x02dc6c00

00028e60 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   28e60:	b580      	push	{r7, lr}
   28e62:	b082      	sub	sp, #8
   28e64:	af00      	add	r7, sp, #0
   28e66:	0002      	movs	r2, r0
   28e68:	1dfb      	adds	r3, r7, #7
   28e6a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   28e6c:	4a08      	ldr	r2, [pc, #32]	; (28e90 <system_flash_set_waitstates+0x30>)
   28e6e:	1dfb      	adds	r3, r7, #7
   28e70:	781b      	ldrb	r3, [r3, #0]
   28e72:	210f      	movs	r1, #15
   28e74:	400b      	ands	r3, r1
   28e76:	b2d9      	uxtb	r1, r3
   28e78:	6853      	ldr	r3, [r2, #4]
   28e7a:	200f      	movs	r0, #15
   28e7c:	4001      	ands	r1, r0
   28e7e:	0049      	lsls	r1, r1, #1
   28e80:	201e      	movs	r0, #30
   28e82:	4383      	bics	r3, r0
   28e84:	430b      	orrs	r3, r1
   28e86:	6053      	str	r3, [r2, #4]
}
   28e88:	46c0      	nop			; (mov r8, r8)
   28e8a:	46bd      	mov	sp, r7
   28e8c:	b002      	add	sp, #8
   28e8e:	bd80      	pop	{r7, pc}
   28e90:	41004000 	.word	0x41004000

00028e94 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   28e94:	b580      	push	{r7, lr}
   28e96:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   28e98:	46c0      	nop			; (mov r8, r8)
   28e9a:	4b04      	ldr	r3, [pc, #16]	; (28eac <_system_dfll_wait_for_sync+0x18>)
   28e9c:	68db      	ldr	r3, [r3, #12]
   28e9e:	2210      	movs	r2, #16
   28ea0:	4013      	ands	r3, r2
   28ea2:	d0fa      	beq.n	28e9a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   28ea4:	46c0      	nop			; (mov r8, r8)
   28ea6:	46bd      	mov	sp, r7
   28ea8:	bd80      	pop	{r7, pc}
   28eaa:	46c0      	nop			; (mov r8, r8)
   28eac:	40000800 	.word	0x40000800

00028eb0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   28eb0:	b580      	push	{r7, lr}
   28eb2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   28eb4:	4b0c      	ldr	r3, [pc, #48]	; (28ee8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28eb6:	2202      	movs	r2, #2
   28eb8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   28eba:	4b0c      	ldr	r3, [pc, #48]	; (28eec <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   28ebc:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   28ebe:	4a0a      	ldr	r2, [pc, #40]	; (28ee8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28ec0:	4b0b      	ldr	r3, [pc, #44]	; (28ef0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28ec2:	689b      	ldr	r3, [r3, #8]
   28ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   28ec6:	4a08      	ldr	r2, [pc, #32]	; (28ee8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28ec8:	4b09      	ldr	r3, [pc, #36]	; (28ef0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28eca:	685b      	ldr	r3, [r3, #4]
   28ecc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   28ece:	4b06      	ldr	r3, [pc, #24]	; (28ee8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28ed0:	2200      	movs	r2, #0
   28ed2:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   28ed4:	4b05      	ldr	r3, [pc, #20]	; (28eec <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   28ed6:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   28ed8:	4a03      	ldr	r2, [pc, #12]	; (28ee8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   28eda:	4b05      	ldr	r3, [pc, #20]	; (28ef0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   28edc:	681b      	ldr	r3, [r3, #0]
   28ede:	b29b      	uxth	r3, r3
   28ee0:	8493      	strh	r3, [r2, #36]	; 0x24
}
   28ee2:	46c0      	nop			; (mov r8, r8)
   28ee4:	46bd      	mov	sp, r7
   28ee6:	bd80      	pop	{r7, pc}
   28ee8:	40000800 	.word	0x40000800
   28eec:	00028e95 	.word	0x00028e95
   28ef0:	20003ec4 	.word	0x20003ec4

00028ef4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   28ef4:	b580      	push	{r7, lr}
   28ef6:	b082      	sub	sp, #8
   28ef8:	af00      	add	r7, sp, #0
   28efa:	0002      	movs	r2, r0
   28efc:	1dfb      	adds	r3, r7, #7
   28efe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   28f00:	1dfb      	adds	r3, r7, #7
   28f02:	781b      	ldrb	r3, [r3, #0]
   28f04:	2b08      	cmp	r3, #8
   28f06:	d841      	bhi.n	28f8c <system_clock_source_get_hz+0x98>
   28f08:	009a      	lsls	r2, r3, #2
   28f0a:	4b23      	ldr	r3, [pc, #140]	; (28f98 <system_clock_source_get_hz+0xa4>)
   28f0c:	18d3      	adds	r3, r2, r3
   28f0e:	681b      	ldr	r3, [r3, #0]
   28f10:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   28f12:	4b22      	ldr	r3, [pc, #136]	; (28f9c <system_clock_source_get_hz+0xa8>)
   28f14:	691b      	ldr	r3, [r3, #16]
   28f16:	e03a      	b.n	28f8e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   28f18:	4b21      	ldr	r3, [pc, #132]	; (28fa0 <system_clock_source_get_hz+0xac>)
   28f1a:	6a1b      	ldr	r3, [r3, #32]
   28f1c:	059b      	lsls	r3, r3, #22
   28f1e:	0f9b      	lsrs	r3, r3, #30
   28f20:	b2db      	uxtb	r3, r3
   28f22:	001a      	movs	r2, r3
   28f24:	4b1f      	ldr	r3, [pc, #124]	; (28fa4 <system_clock_source_get_hz+0xb0>)
   28f26:	40d3      	lsrs	r3, r2
   28f28:	e031      	b.n	28f8e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   28f2a:	2380      	movs	r3, #128	; 0x80
   28f2c:	021b      	lsls	r3, r3, #8
   28f2e:	e02e      	b.n	28f8e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   28f30:	2380      	movs	r3, #128	; 0x80
   28f32:	021b      	lsls	r3, r3, #8
   28f34:	e02b      	b.n	28f8e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   28f36:	4b19      	ldr	r3, [pc, #100]	; (28f9c <system_clock_source_get_hz+0xa8>)
   28f38:	695b      	ldr	r3, [r3, #20]
   28f3a:	e028      	b.n	28f8e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   28f3c:	4b17      	ldr	r3, [pc, #92]	; (28f9c <system_clock_source_get_hz+0xa8>)
   28f3e:	681b      	ldr	r3, [r3, #0]
   28f40:	2202      	movs	r2, #2
   28f42:	4013      	ands	r3, r2
   28f44:	d101      	bne.n	28f4a <system_clock_source_get_hz+0x56>
			return 0;
   28f46:	2300      	movs	r3, #0
   28f48:	e021      	b.n	28f8e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   28f4a:	4b17      	ldr	r3, [pc, #92]	; (28fa8 <system_clock_source_get_hz+0xb4>)
   28f4c:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   28f4e:	4b13      	ldr	r3, [pc, #76]	; (28f9c <system_clock_source_get_hz+0xa8>)
   28f50:	681b      	ldr	r3, [r3, #0]
   28f52:	2224      	movs	r2, #36	; 0x24
   28f54:	4013      	ands	r3, r2
   28f56:	2b04      	cmp	r3, #4
   28f58:	d109      	bne.n	28f6e <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28f5a:	2000      	movs	r0, #0
   28f5c:	4b13      	ldr	r3, [pc, #76]	; (28fac <system_clock_source_get_hz+0xb8>)
   28f5e:	4798      	blx	r3
   28f60:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   28f62:	4b0e      	ldr	r3, [pc, #56]	; (28f9c <system_clock_source_get_hz+0xa8>)
   28f64:	689b      	ldr	r3, [r3, #8]
   28f66:	041b      	lsls	r3, r3, #16
   28f68:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   28f6a:	4353      	muls	r3, r2
   28f6c:	e00f      	b.n	28f8e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   28f6e:	4b10      	ldr	r3, [pc, #64]	; (28fb0 <system_clock_source_get_hz+0xbc>)
   28f70:	e00d      	b.n	28f8e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   28f72:	4a0b      	ldr	r2, [pc, #44]	; (28fa0 <system_clock_source_get_hz+0xac>)
   28f74:	2350      	movs	r3, #80	; 0x50
   28f76:	5cd3      	ldrb	r3, [r2, r3]
   28f78:	b2db      	uxtb	r3, r3
   28f7a:	001a      	movs	r2, r3
   28f7c:	2304      	movs	r3, #4
   28f7e:	4013      	ands	r3, r2
   28f80:	d101      	bne.n	28f86 <system_clock_source_get_hz+0x92>
			return 0;
   28f82:	2300      	movs	r3, #0
   28f84:	e003      	b.n	28f8e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   28f86:	4b05      	ldr	r3, [pc, #20]	; (28f9c <system_clock_source_get_hz+0xa8>)
   28f88:	68db      	ldr	r3, [r3, #12]
   28f8a:	e000      	b.n	28f8e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   28f8c:	2300      	movs	r3, #0
	}
}
   28f8e:	0018      	movs	r0, r3
   28f90:	46bd      	mov	sp, r7
   28f92:	b002      	add	sp, #8
   28f94:	bd80      	pop	{r7, pc}
   28f96:	46c0      	nop			; (mov r8, r8)
   28f98:	00038d1c 	.word	0x00038d1c
   28f9c:	20003ec4 	.word	0x20003ec4
   28fa0:	40000800 	.word	0x40000800
   28fa4:	007a1200 	.word	0x007a1200
   28fa8:	00028e95 	.word	0x00028e95
   28fac:	00029991 	.word	0x00029991
   28fb0:	02dc6c00 	.word	0x02dc6c00

00028fb4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   28fb4:	b580      	push	{r7, lr}
   28fb6:	b084      	sub	sp, #16
   28fb8:	af00      	add	r7, sp, #0
   28fba:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   28fbc:	4b1a      	ldr	r3, [pc, #104]	; (29028 <system_clock_source_osc8m_set_config+0x74>)
   28fbe:	6a1b      	ldr	r3, [r3, #32]
   28fc0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   28fc2:	687b      	ldr	r3, [r7, #4]
   28fc4:	781b      	ldrb	r3, [r3, #0]
   28fc6:	1c1a      	adds	r2, r3, #0
   28fc8:	2303      	movs	r3, #3
   28fca:	4013      	ands	r3, r2
   28fcc:	b2da      	uxtb	r2, r3
   28fce:	230d      	movs	r3, #13
   28fd0:	18fb      	adds	r3, r7, r3
   28fd2:	2103      	movs	r1, #3
   28fd4:	400a      	ands	r2, r1
   28fd6:	0010      	movs	r0, r2
   28fd8:	781a      	ldrb	r2, [r3, #0]
   28fda:	2103      	movs	r1, #3
   28fdc:	438a      	bics	r2, r1
   28fde:	1c11      	adds	r1, r2, #0
   28fe0:	1c02      	adds	r2, r0, #0
   28fe2:	430a      	orrs	r2, r1
   28fe4:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   28fe6:	687b      	ldr	r3, [r7, #4]
   28fe8:	789a      	ldrb	r2, [r3, #2]
   28fea:	230c      	movs	r3, #12
   28fec:	18fb      	adds	r3, r7, r3
   28fee:	01d0      	lsls	r0, r2, #7
   28ff0:	781a      	ldrb	r2, [r3, #0]
   28ff2:	217f      	movs	r1, #127	; 0x7f
   28ff4:	400a      	ands	r2, r1
   28ff6:	1c11      	adds	r1, r2, #0
   28ff8:	1c02      	adds	r2, r0, #0
   28ffa:	430a      	orrs	r2, r1
   28ffc:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   28ffe:	687b      	ldr	r3, [r7, #4]
   29000:	785a      	ldrb	r2, [r3, #1]
   29002:	230c      	movs	r3, #12
   29004:	18fb      	adds	r3, r7, r3
   29006:	2101      	movs	r1, #1
   29008:	400a      	ands	r2, r1
   2900a:	0190      	lsls	r0, r2, #6
   2900c:	781a      	ldrb	r2, [r3, #0]
   2900e:	2140      	movs	r1, #64	; 0x40
   29010:	438a      	bics	r2, r1
   29012:	1c11      	adds	r1, r2, #0
   29014:	1c02      	adds	r2, r0, #0
   29016:	430a      	orrs	r2, r1
   29018:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2901a:	4b03      	ldr	r3, [pc, #12]	; (29028 <system_clock_source_osc8m_set_config+0x74>)
   2901c:	68fa      	ldr	r2, [r7, #12]
   2901e:	621a      	str	r2, [r3, #32]
}
   29020:	46c0      	nop			; (mov r8, r8)
   29022:	46bd      	mov	sp, r7
   29024:	b004      	add	sp, #16
   29026:	bd80      	pop	{r7, pc}
   29028:	40000800 	.word	0x40000800

0002902c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2902c:	b580      	push	{r7, lr}
   2902e:	b086      	sub	sp, #24
   29030:	af00      	add	r7, sp, #0
   29032:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   29034:	687b      	ldr	r3, [r7, #4]
   29036:	68db      	ldr	r3, [r3, #12]
   29038:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2903a:	687b      	ldr	r3, [r7, #4]
   2903c:	7d1b      	ldrb	r3, [r3, #20]
   2903e:	2b01      	cmp	r3, #1
   29040:	d10a      	bne.n	29058 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   29042:	687b      	ldr	r3, [r7, #4]
   29044:	8a1b      	ldrh	r3, [r3, #16]
   29046:	3301      	adds	r3, #1
   29048:	005b      	lsls	r3, r3, #1
   2904a:	001a      	movs	r2, r3
   2904c:	4b36      	ldr	r3, [pc, #216]	; (29128 <system_clock_source_dpll_set_config+0xfc>)
   2904e:	0011      	movs	r1, r2
   29050:	6978      	ldr	r0, [r7, #20]
   29052:	4798      	blx	r3
   29054:	0003      	movs	r3, r0
   29056:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   29058:	687b      	ldr	r3, [r7, #4]
   2905a:	689b      	ldr	r3, [r3, #8]
   2905c:	011a      	lsls	r2, r3, #4
   2905e:	4b32      	ldr	r3, [pc, #200]	; (29128 <system_clock_source_dpll_set_config+0xfc>)
   29060:	6979      	ldr	r1, [r7, #20]
   29062:	0010      	movs	r0, r2
   29064:	4798      	blx	r3
   29066:	0003      	movs	r3, r0
   29068:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2906a:	693b      	ldr	r3, [r7, #16]
   2906c:	b2da      	uxtb	r2, r3
   2906e:	230f      	movs	r3, #15
   29070:	18fb      	adds	r3, r7, r3
   29072:	210f      	movs	r1, #15
   29074:	400a      	ands	r2, r1
   29076:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   29078:	693b      	ldr	r3, [r7, #16]
   2907a:	091b      	lsrs	r3, r3, #4
   2907c:	3b01      	subs	r3, #1
   2907e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   29080:	492a      	ldr	r1, [pc, #168]	; (2912c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29082:	687b      	ldr	r3, [r7, #4]
   29084:	781b      	ldrb	r3, [r3, #0]
   29086:	01db      	lsls	r3, r3, #7
   29088:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2908a:	687b      	ldr	r3, [r7, #4]
   2908c:	785b      	ldrb	r3, [r3, #1]
   2908e:	019b      	lsls	r3, r3, #6
   29090:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29092:	4313      	orrs	r3, r2
   29094:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   29096:	2344      	movs	r3, #68	; 0x44
   29098:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2909a:	4b24      	ldr	r3, [pc, #144]	; (2912c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2909c:	220f      	movs	r2, #15
   2909e:	18ba      	adds	r2, r7, r2
   290a0:	7812      	ldrb	r2, [r2, #0]
   290a2:	0412      	lsls	r2, r2, #16
   290a4:	0011      	movs	r1, r2
   290a6:	22f0      	movs	r2, #240	; 0xf0
   290a8:	0312      	lsls	r2, r2, #12
   290aa:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   290ac:	693a      	ldr	r2, [r7, #16]
   290ae:	0512      	lsls	r2, r2, #20
   290b0:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   290b2:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   290b4:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   290b6:	4b1d      	ldr	r3, [pc, #116]	; (2912c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   290b8:	687a      	ldr	r2, [r7, #4]
   290ba:	8a12      	ldrh	r2, [r2, #16]
   290bc:	0412      	lsls	r2, r2, #16
   290be:	0011      	movs	r1, r2
   290c0:	4a1b      	ldr	r2, [pc, #108]	; (29130 <system_clock_source_dpll_set_config+0x104>)
   290c2:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   290c4:	687a      	ldr	r2, [r7, #4]
   290c6:	7892      	ldrb	r2, [r2, #2]
   290c8:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   290ca:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   290cc:	687a      	ldr	r2, [r7, #4]
   290ce:	7cd2      	ldrb	r2, [r2, #19]
   290d0:	0212      	lsls	r2, r2, #8
   290d2:	0010      	movs	r0, r2
   290d4:	22e0      	movs	r2, #224	; 0xe0
   290d6:	00d2      	lsls	r2, r2, #3
   290d8:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   290da:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   290dc:	687a      	ldr	r2, [r7, #4]
   290de:	7d12      	ldrb	r2, [r2, #20]
   290e0:	0112      	lsls	r2, r2, #4
   290e2:	0010      	movs	r0, r2
   290e4:	2230      	movs	r2, #48	; 0x30
   290e6:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   290e8:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   290ea:	687a      	ldr	r2, [r7, #4]
   290ec:	78d2      	ldrb	r2, [r2, #3]
   290ee:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   290f0:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   290f2:	687a      	ldr	r2, [r7, #4]
   290f4:	7912      	ldrb	r2, [r2, #4]
   290f6:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   290f8:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   290fa:	687a      	ldr	r2, [r7, #4]
   290fc:	7c92      	ldrb	r2, [r2, #18]
   290fe:	0010      	movs	r0, r2
   29100:	2203      	movs	r2, #3
   29102:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29104:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   29106:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   29108:	693b      	ldr	r3, [r7, #16]
   2910a:	3301      	adds	r3, #1
   2910c:	011a      	lsls	r2, r3, #4
   2910e:	230f      	movs	r3, #15
   29110:	18fb      	adds	r3, r7, r3
   29112:	781b      	ldrb	r3, [r3, #0]
   29114:	18d3      	adds	r3, r2, r3
   29116:	697a      	ldr	r2, [r7, #20]
   29118:	4353      	muls	r3, r2
   2911a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2911c:	4b05      	ldr	r3, [pc, #20]	; (29134 <system_clock_source_dpll_set_config+0x108>)
   2911e:	60da      	str	r2, [r3, #12]
}
   29120:	46c0      	nop			; (mov r8, r8)
   29122:	46bd      	mov	sp, r7
   29124:	b006      	add	sp, #24
   29126:	bd80      	pop	{r7, pc}
   29128:	000323b1 	.word	0x000323b1
   2912c:	40000800 	.word	0x40000800
   29130:	07ff0000 	.word	0x07ff0000
   29134:	20003ec4 	.word	0x20003ec4

00029138 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   29138:	b580      	push	{r7, lr}
   2913a:	b082      	sub	sp, #8
   2913c:	af00      	add	r7, sp, #0
   2913e:	0002      	movs	r2, r0
   29140:	1dfb      	adds	r3, r7, #7
   29142:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29144:	1dfb      	adds	r3, r7, #7
   29146:	781b      	ldrb	r3, [r3, #0]
   29148:	2b08      	cmp	r3, #8
   2914a:	d83b      	bhi.n	291c4 <system_clock_source_enable+0x8c>
   2914c:	009a      	lsls	r2, r3, #2
   2914e:	4b21      	ldr	r3, [pc, #132]	; (291d4 <system_clock_source_enable+0x9c>)
   29150:	18d3      	adds	r3, r2, r3
   29152:	681b      	ldr	r3, [r3, #0]
   29154:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   29156:	4b20      	ldr	r3, [pc, #128]	; (291d8 <system_clock_source_enable+0xa0>)
   29158:	4a1f      	ldr	r2, [pc, #124]	; (291d8 <system_clock_source_enable+0xa0>)
   2915a:	6a12      	ldr	r2, [r2, #32]
   2915c:	2102      	movs	r1, #2
   2915e:	430a      	orrs	r2, r1
   29160:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   29162:	2300      	movs	r3, #0
   29164:	e031      	b.n	291ca <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   29166:	4b1c      	ldr	r3, [pc, #112]	; (291d8 <system_clock_source_enable+0xa0>)
   29168:	4a1b      	ldr	r2, [pc, #108]	; (291d8 <system_clock_source_enable+0xa0>)
   2916a:	6992      	ldr	r2, [r2, #24]
   2916c:	2102      	movs	r1, #2
   2916e:	430a      	orrs	r2, r1
   29170:	619a      	str	r2, [r3, #24]
		break;
   29172:	e029      	b.n	291c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   29174:	4a18      	ldr	r2, [pc, #96]	; (291d8 <system_clock_source_enable+0xa0>)
   29176:	4b18      	ldr	r3, [pc, #96]	; (291d8 <system_clock_source_enable+0xa0>)
   29178:	8a1b      	ldrh	r3, [r3, #16]
   2917a:	b29b      	uxth	r3, r3
   2917c:	2102      	movs	r1, #2
   2917e:	430b      	orrs	r3, r1
   29180:	b29b      	uxth	r3, r3
   29182:	8213      	strh	r3, [r2, #16]
		break;
   29184:	e020      	b.n	291c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29186:	4a14      	ldr	r2, [pc, #80]	; (291d8 <system_clock_source_enable+0xa0>)
   29188:	4b13      	ldr	r3, [pc, #76]	; (291d8 <system_clock_source_enable+0xa0>)
   2918a:	8a9b      	ldrh	r3, [r3, #20]
   2918c:	b29b      	uxth	r3, r3
   2918e:	2102      	movs	r1, #2
   29190:	430b      	orrs	r3, r1
   29192:	b29b      	uxth	r3, r3
   29194:	8293      	strh	r3, [r2, #20]
		break;
   29196:	e017      	b.n	291c8 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   29198:	4b10      	ldr	r3, [pc, #64]	; (291dc <system_clock_source_enable+0xa4>)
   2919a:	681b      	ldr	r3, [r3, #0]
   2919c:	2202      	movs	r2, #2
   2919e:	431a      	orrs	r2, r3
   291a0:	4b0e      	ldr	r3, [pc, #56]	; (291dc <system_clock_source_enable+0xa4>)
   291a2:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   291a4:	4b0e      	ldr	r3, [pc, #56]	; (291e0 <system_clock_source_enable+0xa8>)
   291a6:	4798      	blx	r3
		break;
   291a8:	e00e      	b.n	291c8 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   291aa:	4a0b      	ldr	r2, [pc, #44]	; (291d8 <system_clock_source_enable+0xa0>)
   291ac:	490a      	ldr	r1, [pc, #40]	; (291d8 <system_clock_source_enable+0xa0>)
   291ae:	2344      	movs	r3, #68	; 0x44
   291b0:	5ccb      	ldrb	r3, [r1, r3]
   291b2:	b2db      	uxtb	r3, r3
   291b4:	2102      	movs	r1, #2
   291b6:	430b      	orrs	r3, r1
   291b8:	b2d9      	uxtb	r1, r3
   291ba:	2344      	movs	r3, #68	; 0x44
   291bc:	54d1      	strb	r1, [r2, r3]
		break;
   291be:	e003      	b.n	291c8 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   291c0:	2300      	movs	r3, #0
   291c2:	e002      	b.n	291ca <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   291c4:	2317      	movs	r3, #23
   291c6:	e000      	b.n	291ca <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   291c8:	2300      	movs	r3, #0
}
   291ca:	0018      	movs	r0, r3
   291cc:	46bd      	mov	sp, r7
   291ce:	b002      	add	sp, #8
   291d0:	bd80      	pop	{r7, pc}
   291d2:	46c0      	nop			; (mov r8, r8)
   291d4:	00038d40 	.word	0x00038d40
   291d8:	40000800 	.word	0x40000800
   291dc:	20003ec4 	.word	0x20003ec4
   291e0:	00028eb1 	.word	0x00028eb1

000291e4 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   291e4:	b580      	push	{r7, lr}
   291e6:	b084      	sub	sp, #16
   291e8:	af00      	add	r7, sp, #0
   291ea:	0002      	movs	r2, r0
   291ec:	1dfb      	adds	r3, r7, #7
   291ee:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   291f0:	2300      	movs	r3, #0
   291f2:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   291f4:	1dfb      	adds	r3, r7, #7
   291f6:	781b      	ldrb	r3, [r3, #0]
   291f8:	2b08      	cmp	r3, #8
   291fa:	d821      	bhi.n	29240 <system_clock_source_is_ready+0x5c>
   291fc:	009a      	lsls	r2, r3, #2
   291fe:	4b18      	ldr	r3, [pc, #96]	; (29260 <system_clock_source_is_ready+0x7c>)
   29200:	18d3      	adds	r3, r2, r3
   29202:	681b      	ldr	r3, [r3, #0]
   29204:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   29206:	2308      	movs	r3, #8
   29208:	60fb      	str	r3, [r7, #12]
		break;
   2920a:	e01b      	b.n	29244 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2920c:	2304      	movs	r3, #4
   2920e:	60fb      	str	r3, [r7, #12]
		break;
   29210:	e018      	b.n	29244 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   29212:	2301      	movs	r3, #1
   29214:	60fb      	str	r3, [r7, #12]
		break;
   29216:	e015      	b.n	29244 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   29218:	2302      	movs	r3, #2
   2921a:	60fb      	str	r3, [r7, #12]
		break;
   2921c:	e012      	b.n	29244 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2921e:	2310      	movs	r3, #16
   29220:	60fb      	str	r3, [r7, #12]
		}
		break;
   29222:	e00f      	b.n	29244 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   29224:	4a0f      	ldr	r2, [pc, #60]	; (29264 <system_clock_source_is_ready+0x80>)
   29226:	2350      	movs	r3, #80	; 0x50
   29228:	5cd3      	ldrb	r3, [r2, r3]
   2922a:	b2db      	uxtb	r3, r3
   2922c:	001a      	movs	r2, r3
   2922e:	2303      	movs	r3, #3
   29230:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   29232:	3b03      	subs	r3, #3
   29234:	425a      	negs	r2, r3
   29236:	4153      	adcs	r3, r2
   29238:	b2db      	uxtb	r3, r3
   2923a:	e00c      	b.n	29256 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2923c:	2301      	movs	r3, #1
   2923e:	e00a      	b.n	29256 <system_clock_source_is_ready+0x72>

	default:
		return false;
   29240:	2300      	movs	r3, #0
   29242:	e008      	b.n	29256 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29244:	4b07      	ldr	r3, [pc, #28]	; (29264 <system_clock_source_is_ready+0x80>)
   29246:	68db      	ldr	r3, [r3, #12]
   29248:	68fa      	ldr	r2, [r7, #12]
   2924a:	401a      	ands	r2, r3
   2924c:	68fb      	ldr	r3, [r7, #12]
   2924e:	1ad3      	subs	r3, r2, r3
   29250:	425a      	negs	r2, r3
   29252:	4153      	adcs	r3, r2
   29254:	b2db      	uxtb	r3, r3
}
   29256:	0018      	movs	r0, r3
   29258:	46bd      	mov	sp, r7
   2925a:	b004      	add	sp, #16
   2925c:	bd80      	pop	{r7, pc}
   2925e:	46c0      	nop			; (mov r8, r8)
   29260:	00038d64 	.word	0x00038d64
   29264:	40000800 	.word	0x40000800

00029268 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   29268:	b580      	push	{r7, lr}
   2926a:	b082      	sub	sp, #8
   2926c:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2926e:	003b      	movs	r3, r7
   29270:	2203      	movs	r2, #3
   29272:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29274:	2300      	movs	r3, #0
   29276:	607b      	str	r3, [r7, #4]
   29278:	e009      	b.n	2928e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2927a:	687b      	ldr	r3, [r7, #4]
   2927c:	b2db      	uxtb	r3, r3
   2927e:	003a      	movs	r2, r7
   29280:	0011      	movs	r1, r2
   29282:	0018      	movs	r0, r3
   29284:	4b05      	ldr	r3, [pc, #20]	; (2929c <_switch_peripheral_gclk+0x34>)
   29286:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29288:	687b      	ldr	r3, [r7, #4]
   2928a:	3301      	adds	r3, #1
   2928c:	607b      	str	r3, [r7, #4]
   2928e:	687b      	ldr	r3, [r7, #4]
   29290:	2b24      	cmp	r3, #36	; 0x24
   29292:	d9f2      	bls.n	2927a <_switch_peripheral_gclk+0x12>
	}
}
   29294:	46c0      	nop			; (mov r8, r8)
   29296:	46bd      	mov	sp, r7
   29298:	b002      	add	sp, #8
   2929a:	bd80      	pop	{r7, pc}
   2929c:	0002986d 	.word	0x0002986d

000292a0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   292a0:	b580      	push	{r7, lr}
   292a2:	b0a6      	sub	sp, #152	; 0x98
   292a4:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   292a6:	4b92      	ldr	r3, [pc, #584]	; (294f0 <system_clock_init+0x250>)
   292a8:	22c2      	movs	r2, #194	; 0xc2
   292aa:	00d2      	lsls	r2, r2, #3
   292ac:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   292ae:	2003      	movs	r0, #3
   292b0:	4b90      	ldr	r3, [pc, #576]	; (294f4 <system_clock_init+0x254>)
   292b2:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   292b4:	4b90      	ldr	r3, [pc, #576]	; (294f8 <system_clock_init+0x258>)
   292b6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   292b8:	2394      	movs	r3, #148	; 0x94
   292ba:	18fb      	adds	r3, r7, r3
   292bc:	0018      	movs	r0, r3
   292be:	4b8f      	ldr	r3, [pc, #572]	; (294fc <system_clock_init+0x25c>)
   292c0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   292c2:	2394      	movs	r3, #148	; 0x94
   292c4:	18fb      	adds	r3, r7, r3
   292c6:	2200      	movs	r2, #0
   292c8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   292ca:	2394      	movs	r3, #148	; 0x94
   292cc:	18fb      	adds	r3, r7, r3
   292ce:	2201      	movs	r2, #1
   292d0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   292d2:	2394      	movs	r3, #148	; 0x94
   292d4:	18fb      	adds	r3, r7, r3
   292d6:	2200      	movs	r2, #0
   292d8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   292da:	2394      	movs	r3, #148	; 0x94
   292dc:	18fb      	adds	r3, r7, r3
   292de:	0018      	movs	r0, r3
   292e0:	4b87      	ldr	r3, [pc, #540]	; (29500 <system_clock_init+0x260>)
   292e2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   292e4:	2006      	movs	r0, #6
   292e6:	4b87      	ldr	r3, [pc, #540]	; (29504 <system_clock_init+0x264>)
   292e8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   292ea:	4b87      	ldr	r3, [pc, #540]	; (29508 <system_clock_init+0x268>)
   292ec:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   292ee:	2360      	movs	r3, #96	; 0x60
   292f0:	18fb      	adds	r3, r7, r3
   292f2:	0018      	movs	r0, r3
   292f4:	4b85      	ldr	r3, [pc, #532]	; (2950c <system_clock_init+0x26c>)
   292f6:	4798      	blx	r3
   292f8:	2360      	movs	r3, #96	; 0x60
   292fa:	18fb      	adds	r3, r7, r3
   292fc:	2206      	movs	r2, #6
   292fe:	701a      	strb	r2, [r3, #0]
   29300:	2360      	movs	r3, #96	; 0x60
   29302:	18fb      	adds	r3, r7, r3
   29304:	2208      	movs	r2, #8
   29306:	605a      	str	r2, [r3, #4]
   29308:	2360      	movs	r3, #96	; 0x60
   2930a:	18fb      	adds	r3, r7, r3
   2930c:	2200      	movs	r2, #0
   2930e:	721a      	strb	r2, [r3, #8]
   29310:	2360      	movs	r3, #96	; 0x60
   29312:	18fb      	adds	r3, r7, r3
   29314:	2200      	movs	r2, #0
   29316:	725a      	strb	r2, [r3, #9]
   29318:	2360      	movs	r3, #96	; 0x60
   2931a:	18fb      	adds	r3, r7, r3
   2931c:	0019      	movs	r1, r3
   2931e:	2001      	movs	r0, #1
   29320:	4b7b      	ldr	r3, [pc, #492]	; (29510 <system_clock_init+0x270>)
   29322:	4798      	blx	r3
   29324:	2001      	movs	r0, #1
   29326:	4b7b      	ldr	r3, [pc, #492]	; (29514 <system_clock_init+0x274>)
   29328:	4798      	blx	r3
   2932a:	2354      	movs	r3, #84	; 0x54
   2932c:	18fb      	adds	r3, r7, r3
   2932e:	0018      	movs	r0, r3
   29330:	4b76      	ldr	r3, [pc, #472]	; (2950c <system_clock_init+0x26c>)
   29332:	4798      	blx	r3
   29334:	2354      	movs	r3, #84	; 0x54
   29336:	18fb      	adds	r3, r7, r3
   29338:	2203      	movs	r2, #3
   2933a:	701a      	strb	r2, [r3, #0]
   2933c:	2354      	movs	r3, #84	; 0x54
   2933e:	18fb      	adds	r3, r7, r3
   29340:	2201      	movs	r2, #1
   29342:	605a      	str	r2, [r3, #4]
   29344:	2354      	movs	r3, #84	; 0x54
   29346:	18fb      	adds	r3, r7, r3
   29348:	2201      	movs	r2, #1
   2934a:	721a      	strb	r2, [r3, #8]
   2934c:	2354      	movs	r3, #84	; 0x54
   2934e:	18fb      	adds	r3, r7, r3
   29350:	2200      	movs	r2, #0
   29352:	725a      	strb	r2, [r3, #9]
   29354:	2354      	movs	r3, #84	; 0x54
   29356:	18fb      	adds	r3, r7, r3
   29358:	0019      	movs	r1, r3
   2935a:	2002      	movs	r0, #2
   2935c:	4b6c      	ldr	r3, [pc, #432]	; (29510 <system_clock_init+0x270>)
   2935e:	4798      	blx	r3
   29360:	2002      	movs	r0, #2
   29362:	4b6c      	ldr	r3, [pc, #432]	; (29514 <system_clock_init+0x274>)
   29364:	4798      	blx	r3
   29366:	233c      	movs	r3, #60	; 0x3c
   29368:	18fb      	adds	r3, r7, r3
   2936a:	0018      	movs	r0, r3
   2936c:	4b67      	ldr	r3, [pc, #412]	; (2950c <system_clock_init+0x26c>)
   2936e:	4798      	blx	r3
   29370:	233c      	movs	r3, #60	; 0x3c
   29372:	18fb      	adds	r3, r7, r3
   29374:	2203      	movs	r2, #3
   29376:	701a      	strb	r2, [r3, #0]
   29378:	233c      	movs	r3, #60	; 0x3c
   2937a:	18fb      	adds	r3, r7, r3
   2937c:	2220      	movs	r2, #32
   2937e:	605a      	str	r2, [r3, #4]
   29380:	233c      	movs	r3, #60	; 0x3c
   29382:	18fb      	adds	r3, r7, r3
   29384:	2200      	movs	r2, #0
   29386:	721a      	strb	r2, [r3, #8]
   29388:	233c      	movs	r3, #60	; 0x3c
   2938a:	18fb      	adds	r3, r7, r3
   2938c:	2200      	movs	r2, #0
   2938e:	725a      	strb	r2, [r3, #9]
   29390:	233c      	movs	r3, #60	; 0x3c
   29392:	18fb      	adds	r3, r7, r3
   29394:	0019      	movs	r1, r3
   29396:	2004      	movs	r0, #4
   29398:	4b5d      	ldr	r3, [pc, #372]	; (29510 <system_clock_init+0x270>)
   2939a:	4798      	blx	r3
   2939c:	2004      	movs	r0, #4
   2939e:	4b5d      	ldr	r3, [pc, #372]	; (29514 <system_clock_init+0x274>)
   293a0:	4798      	blx	r3
   293a2:	2330      	movs	r3, #48	; 0x30
   293a4:	18fb      	adds	r3, r7, r3
   293a6:	0018      	movs	r0, r3
   293a8:	4b58      	ldr	r3, [pc, #352]	; (2950c <system_clock_init+0x26c>)
   293aa:	4798      	blx	r3
   293ac:	2330      	movs	r3, #48	; 0x30
   293ae:	18fb      	adds	r3, r7, r3
   293b0:	2206      	movs	r2, #6
   293b2:	701a      	strb	r2, [r3, #0]
   293b4:	2330      	movs	r3, #48	; 0x30
   293b6:	18fb      	adds	r3, r7, r3
   293b8:	2201      	movs	r2, #1
   293ba:	605a      	str	r2, [r3, #4]
   293bc:	2330      	movs	r3, #48	; 0x30
   293be:	18fb      	adds	r3, r7, r3
   293c0:	2200      	movs	r2, #0
   293c2:	721a      	strb	r2, [r3, #8]
   293c4:	2330      	movs	r3, #48	; 0x30
   293c6:	18fb      	adds	r3, r7, r3
   293c8:	2200      	movs	r2, #0
   293ca:	725a      	strb	r2, [r3, #9]
   293cc:	2330      	movs	r3, #48	; 0x30
   293ce:	18fb      	adds	r3, r7, r3
   293d0:	0019      	movs	r1, r3
   293d2:	2005      	movs	r0, #5
   293d4:	4b4e      	ldr	r3, [pc, #312]	; (29510 <system_clock_init+0x270>)
   293d6:	4798      	blx	r3
   293d8:	2005      	movs	r0, #5
   293da:	4b4e      	ldr	r3, [pc, #312]	; (29514 <system_clock_init+0x274>)
   293dc:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   293de:	2390      	movs	r3, #144	; 0x90
   293e0:	18fb      	adds	r3, r7, r3
   293e2:	0018      	movs	r0, r3
   293e4:	4b4c      	ldr	r3, [pc, #304]	; (29518 <system_clock_init+0x278>)
   293e6:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   293e8:	2390      	movs	r3, #144	; 0x90
   293ea:	18fb      	adds	r3, r7, r3
   293ec:	2201      	movs	r2, #1
   293ee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   293f0:	2390      	movs	r3, #144	; 0x90
   293f2:	18fb      	adds	r3, r7, r3
   293f4:	0019      	movs	r1, r3
   293f6:	2001      	movs	r0, #1
   293f8:	4b48      	ldr	r3, [pc, #288]	; (2951c <system_clock_init+0x27c>)
   293fa:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   293fc:	2001      	movs	r0, #1
   293fe:	4b48      	ldr	r3, [pc, #288]	; (29520 <system_clock_init+0x280>)
   29400:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   29402:	2378      	movs	r3, #120	; 0x78
   29404:	18fb      	adds	r3, r7, r3
   29406:	0018      	movs	r0, r3
   29408:	4b46      	ldr	r3, [pc, #280]	; (29524 <system_clock_init+0x284>)
   2940a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2940c:	2378      	movs	r3, #120	; 0x78
   2940e:	18fb      	adds	r3, r7, r3
   29410:	2200      	movs	r2, #0
   29412:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   29414:	2378      	movs	r3, #120	; 0x78
   29416:	18fb      	adds	r3, r7, r3
   29418:	2200      	movs	r2, #0
   2941a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2941c:	2378      	movs	r3, #120	; 0x78
   2941e:	18fb      	adds	r3, r7, r3
   29420:	2200      	movs	r2, #0
   29422:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   29424:	2378      	movs	r3, #120	; 0x78
   29426:	18fb      	adds	r3, r7, r3
   29428:	2200      	movs	r2, #0
   2942a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2942c:	2378      	movs	r3, #120	; 0x78
   2942e:	18fb      	adds	r3, r7, r3
   29430:	2200      	movs	r2, #0
   29432:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29434:	2378      	movs	r3, #120	; 0x78
   29436:	18fb      	adds	r3, r7, r3
   29438:	2200      	movs	r2, #0
   2943a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2943c:	2378      	movs	r3, #120	; 0x78
   2943e:	18fb      	adds	r3, r7, r3
   29440:	2200      	movs	r2, #0
   29442:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29444:	2378      	movs	r3, #120	; 0x78
   29446:	18fb      	adds	r3, r7, r3
   29448:	2202      	movs	r2, #2
   2944a:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2944c:	2378      	movs	r3, #120	; 0x78
   2944e:	18fb      	adds	r3, r7, r3
   29450:	4a35      	ldr	r2, [pc, #212]	; (29528 <system_clock_init+0x288>)
   29452:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   29454:	2378      	movs	r3, #120	; 0x78
   29456:	18fb      	adds	r3, r7, r3
   29458:	2201      	movs	r2, #1
   2945a:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2945c:	2378      	movs	r3, #120	; 0x78
   2945e:	18fb      	adds	r3, r7, r3
   29460:	4a32      	ldr	r2, [pc, #200]	; (2952c <system_clock_init+0x28c>)
   29462:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   29464:	2378      	movs	r3, #120	; 0x78
   29466:	18fb      	adds	r3, r7, r3
   29468:	0018      	movs	r0, r3
   2946a:	4b31      	ldr	r3, [pc, #196]	; (29530 <system_clock_init+0x290>)
   2946c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2946e:	2008      	movs	r0, #8
   29470:	4b24      	ldr	r3, [pc, #144]	; (29504 <system_clock_init+0x264>)
   29472:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   29474:	46c0      	nop			; (mov r8, r8)
   29476:	2008      	movs	r0, #8
   29478:	4b2e      	ldr	r3, [pc, #184]	; (29534 <system_clock_init+0x294>)
   2947a:	4798      	blx	r3
   2947c:	0003      	movs	r3, r0
   2947e:	001a      	movs	r2, r3
   29480:	2301      	movs	r3, #1
   29482:	4053      	eors	r3, r2
   29484:	b2db      	uxtb	r3, r3
   29486:	2b00      	cmp	r3, #0
   29488:	d1f5      	bne.n	29476 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2948a:	4919      	ldr	r1, [pc, #100]	; (294f0 <system_clock_init+0x250>)
   2948c:	2244      	movs	r2, #68	; 0x44
   2948e:	5c8b      	ldrb	r3, [r1, r2]
   29490:	2080      	movs	r0, #128	; 0x80
   29492:	4240      	negs	r0, r0
   29494:	4303      	orrs	r3, r0
   29496:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   29498:	2000      	movs	r0, #0
   2949a:	4b27      	ldr	r3, [pc, #156]	; (29538 <system_clock_init+0x298>)
   2949c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2949e:	2100      	movs	r1, #0
   294a0:	2000      	movs	r0, #0
   294a2:	4b26      	ldr	r3, [pc, #152]	; (2953c <system_clock_init+0x29c>)
   294a4:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   294a6:	2100      	movs	r1, #0
   294a8:	2001      	movs	r0, #1
   294aa:	4b24      	ldr	r3, [pc, #144]	; (2953c <system_clock_init+0x29c>)
   294ac:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   294ae:	2100      	movs	r1, #0
   294b0:	2002      	movs	r0, #2
   294b2:	4b22      	ldr	r3, [pc, #136]	; (2953c <system_clock_init+0x29c>)
   294b4:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   294b6:	003b      	movs	r3, r7
   294b8:	0018      	movs	r0, r3
   294ba:	4b14      	ldr	r3, [pc, #80]	; (2950c <system_clock_init+0x26c>)
   294bc:	4798      	blx	r3
   294be:	003b      	movs	r3, r7
   294c0:	2208      	movs	r2, #8
   294c2:	701a      	strb	r2, [r3, #0]
   294c4:	003b      	movs	r3, r7
   294c6:	2201      	movs	r2, #1
   294c8:	605a      	str	r2, [r3, #4]
   294ca:	003b      	movs	r3, r7
   294cc:	2200      	movs	r2, #0
   294ce:	721a      	strb	r2, [r3, #8]
   294d0:	003b      	movs	r3, r7
   294d2:	2201      	movs	r2, #1
   294d4:	725a      	strb	r2, [r3, #9]
   294d6:	003b      	movs	r3, r7
   294d8:	0019      	movs	r1, r3
   294da:	2000      	movs	r0, #0
   294dc:	4b0c      	ldr	r3, [pc, #48]	; (29510 <system_clock_init+0x270>)
   294de:	4798      	blx	r3
   294e0:	2000      	movs	r0, #0
   294e2:	4b0c      	ldr	r3, [pc, #48]	; (29514 <system_clock_init+0x274>)
   294e4:	4798      	blx	r3
#endif
}
   294e6:	46c0      	nop			; (mov r8, r8)
   294e8:	46bd      	mov	sp, r7
   294ea:	b026      	add	sp, #152	; 0x98
   294ec:	bd80      	pop	{r7, pc}
   294ee:	46c0      	nop			; (mov r8, r8)
   294f0:	40000800 	.word	0x40000800
   294f4:	00028e61 	.word	0x00028e61
   294f8:	00029269 	.word	0x00029269
   294fc:	00028d71 	.word	0x00028d71
   29500:	00028fb5 	.word	0x00028fb5
   29504:	00029139 	.word	0x00029139
   29508:	000295e5 	.word	0x000295e5
   2950c:	00028d2d 	.word	0x00028d2d
   29510:	00029615 	.word	0x00029615
   29514:	00029739 	.word	0x00029739
   29518:	00028d5b 	.word	0x00028d5b
   2951c:	0002986d 	.word	0x0002986d
   29520:	000298b1 	.word	0x000298b1
   29524:	00028e09 	.word	0x00028e09
   29528:	000f4240 	.word	0x000f4240
   2952c:	02dc6c00 	.word	0x02dc6c00
   29530:	0002902d 	.word	0x0002902d
   29534:	000291e5 	.word	0x000291e5
   29538:	00028d95 	.word	0x00028d95
   2953c:	00028db5 	.word	0x00028db5

00029540 <system_apb_clock_set_mask>:
{
   29540:	b580      	push	{r7, lr}
   29542:	b082      	sub	sp, #8
   29544:	af00      	add	r7, sp, #0
   29546:	0002      	movs	r2, r0
   29548:	6039      	str	r1, [r7, #0]
   2954a:	1dfb      	adds	r3, r7, #7
   2954c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2954e:	1dfb      	adds	r3, r7, #7
   29550:	781b      	ldrb	r3, [r3, #0]
   29552:	2b01      	cmp	r3, #1
   29554:	d00a      	beq.n	2956c <system_apb_clock_set_mask+0x2c>
   29556:	2b02      	cmp	r3, #2
   29558:	d00f      	beq.n	2957a <system_apb_clock_set_mask+0x3a>
   2955a:	2b00      	cmp	r3, #0
   2955c:	d114      	bne.n	29588 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2955e:	4b0e      	ldr	r3, [pc, #56]	; (29598 <system_apb_clock_set_mask+0x58>)
   29560:	4a0d      	ldr	r2, [pc, #52]	; (29598 <system_apb_clock_set_mask+0x58>)
   29562:	6991      	ldr	r1, [r2, #24]
   29564:	683a      	ldr	r2, [r7, #0]
   29566:	430a      	orrs	r2, r1
   29568:	619a      	str	r2, [r3, #24]
			break;
   2956a:	e00f      	b.n	2958c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2956c:	4b0a      	ldr	r3, [pc, #40]	; (29598 <system_apb_clock_set_mask+0x58>)
   2956e:	4a0a      	ldr	r2, [pc, #40]	; (29598 <system_apb_clock_set_mask+0x58>)
   29570:	69d1      	ldr	r1, [r2, #28]
   29572:	683a      	ldr	r2, [r7, #0]
   29574:	430a      	orrs	r2, r1
   29576:	61da      	str	r2, [r3, #28]
			break;
   29578:	e008      	b.n	2958c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2957a:	4b07      	ldr	r3, [pc, #28]	; (29598 <system_apb_clock_set_mask+0x58>)
   2957c:	4a06      	ldr	r2, [pc, #24]	; (29598 <system_apb_clock_set_mask+0x58>)
   2957e:	6a11      	ldr	r1, [r2, #32]
   29580:	683a      	ldr	r2, [r7, #0]
   29582:	430a      	orrs	r2, r1
   29584:	621a      	str	r2, [r3, #32]
			break;
   29586:	e001      	b.n	2958c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29588:	2317      	movs	r3, #23
   2958a:	e000      	b.n	2958e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2958c:	2300      	movs	r3, #0
}
   2958e:	0018      	movs	r0, r3
   29590:	46bd      	mov	sp, r7
   29592:	b002      	add	sp, #8
   29594:	bd80      	pop	{r7, pc}
   29596:	46c0      	nop			; (mov r8, r8)
   29598:	40000400 	.word	0x40000400

0002959c <system_interrupt_enter_critical_section>:
{
   2959c:	b580      	push	{r7, lr}
   2959e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   295a0:	4b02      	ldr	r3, [pc, #8]	; (295ac <system_interrupt_enter_critical_section+0x10>)
   295a2:	4798      	blx	r3
}
   295a4:	46c0      	nop			; (mov r8, r8)
   295a6:	46bd      	mov	sp, r7
   295a8:	bd80      	pop	{r7, pc}
   295aa:	46c0      	nop			; (mov r8, r8)
   295ac:	00025bd9 	.word	0x00025bd9

000295b0 <system_interrupt_leave_critical_section>:
{
   295b0:	b580      	push	{r7, lr}
   295b2:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   295b4:	4b02      	ldr	r3, [pc, #8]	; (295c0 <system_interrupt_leave_critical_section+0x10>)
   295b6:	4798      	blx	r3
}
   295b8:	46c0      	nop			; (mov r8, r8)
   295ba:	46bd      	mov	sp, r7
   295bc:	bd80      	pop	{r7, pc}
   295be:	46c0      	nop			; (mov r8, r8)
   295c0:	00025c2d 	.word	0x00025c2d

000295c4 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   295c4:	b580      	push	{r7, lr}
   295c6:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   295c8:	4b05      	ldr	r3, [pc, #20]	; (295e0 <system_gclk_is_syncing+0x1c>)
   295ca:	785b      	ldrb	r3, [r3, #1]
   295cc:	b2db      	uxtb	r3, r3
   295ce:	b25b      	sxtb	r3, r3
   295d0:	2b00      	cmp	r3, #0
   295d2:	da01      	bge.n	295d8 <system_gclk_is_syncing+0x14>
		return true;
   295d4:	2301      	movs	r3, #1
   295d6:	e000      	b.n	295da <system_gclk_is_syncing+0x16>
	}

	return false;
   295d8:	2300      	movs	r3, #0
}
   295da:	0018      	movs	r0, r3
   295dc:	46bd      	mov	sp, r7
   295de:	bd80      	pop	{r7, pc}
   295e0:	40000c00 	.word	0x40000c00

000295e4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   295e4:	b580      	push	{r7, lr}
   295e6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   295e8:	2108      	movs	r1, #8
   295ea:	2000      	movs	r0, #0
   295ec:	4b07      	ldr	r3, [pc, #28]	; (2960c <system_gclk_init+0x28>)
   295ee:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   295f0:	4b07      	ldr	r3, [pc, #28]	; (29610 <system_gclk_init+0x2c>)
   295f2:	2201      	movs	r2, #1
   295f4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   295f6:	46c0      	nop			; (mov r8, r8)
   295f8:	4b05      	ldr	r3, [pc, #20]	; (29610 <system_gclk_init+0x2c>)
   295fa:	781b      	ldrb	r3, [r3, #0]
   295fc:	b2db      	uxtb	r3, r3
   295fe:	001a      	movs	r2, r3
   29600:	2301      	movs	r3, #1
   29602:	4013      	ands	r3, r2
   29604:	d1f8      	bne.n	295f8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   29606:	46c0      	nop			; (mov r8, r8)
   29608:	46bd      	mov	sp, r7
   2960a:	bd80      	pop	{r7, pc}
   2960c:	00029541 	.word	0x00029541
   29610:	40000c00 	.word	0x40000c00

00029614 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   29614:	b580      	push	{r7, lr}
   29616:	b086      	sub	sp, #24
   29618:	af00      	add	r7, sp, #0
   2961a:	0002      	movs	r2, r0
   2961c:	6039      	str	r1, [r7, #0]
   2961e:	1dfb      	adds	r3, r7, #7
   29620:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   29622:	1dfb      	adds	r3, r7, #7
   29624:	781b      	ldrb	r3, [r3, #0]
   29626:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   29628:	1dfb      	adds	r3, r7, #7
   2962a:	781b      	ldrb	r3, [r3, #0]
   2962c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2962e:	683b      	ldr	r3, [r7, #0]
   29630:	781b      	ldrb	r3, [r3, #0]
   29632:	021b      	lsls	r3, r3, #8
   29634:	001a      	movs	r2, r3
   29636:	697b      	ldr	r3, [r7, #20]
   29638:	4313      	orrs	r3, r2
   2963a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2963c:	683b      	ldr	r3, [r7, #0]
   2963e:	785b      	ldrb	r3, [r3, #1]
   29640:	2b00      	cmp	r3, #0
   29642:	d004      	beq.n	2964e <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29644:	697b      	ldr	r3, [r7, #20]
   29646:	2280      	movs	r2, #128	; 0x80
   29648:	02d2      	lsls	r2, r2, #11
   2964a:	4313      	orrs	r3, r2
   2964c:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2964e:	683b      	ldr	r3, [r7, #0]
   29650:	7a5b      	ldrb	r3, [r3, #9]
   29652:	2b00      	cmp	r3, #0
   29654:	d004      	beq.n	29660 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   29656:	697b      	ldr	r3, [r7, #20]
   29658:	2280      	movs	r2, #128	; 0x80
   2965a:	0312      	lsls	r2, r2, #12
   2965c:	4313      	orrs	r3, r2
   2965e:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   29660:	683b      	ldr	r3, [r7, #0]
   29662:	685b      	ldr	r3, [r3, #4]
   29664:	2b01      	cmp	r3, #1
   29666:	d92c      	bls.n	296c2 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29668:	683b      	ldr	r3, [r7, #0]
   2966a:	685a      	ldr	r2, [r3, #4]
   2966c:	683b      	ldr	r3, [r7, #0]
   2966e:	685b      	ldr	r3, [r3, #4]
   29670:	3b01      	subs	r3, #1
   29672:	4013      	ands	r3, r2
   29674:	d11a      	bne.n	296ac <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   29676:	2300      	movs	r3, #0
   29678:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2967a:	2302      	movs	r3, #2
   2967c:	60bb      	str	r3, [r7, #8]
   2967e:	e005      	b.n	2968c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   29680:	68fb      	ldr	r3, [r7, #12]
   29682:	3301      	adds	r3, #1
   29684:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   29686:	68bb      	ldr	r3, [r7, #8]
   29688:	005b      	lsls	r3, r3, #1
   2968a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2968c:	683b      	ldr	r3, [r7, #0]
   2968e:	685a      	ldr	r2, [r3, #4]
   29690:	68bb      	ldr	r3, [r7, #8]
   29692:	429a      	cmp	r2, r3
   29694:	d8f4      	bhi.n	29680 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   29696:	68fb      	ldr	r3, [r7, #12]
   29698:	021b      	lsls	r3, r3, #8
   2969a:	693a      	ldr	r2, [r7, #16]
   2969c:	4313      	orrs	r3, r2
   2969e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   296a0:	697b      	ldr	r3, [r7, #20]
   296a2:	2280      	movs	r2, #128	; 0x80
   296a4:	0352      	lsls	r2, r2, #13
   296a6:	4313      	orrs	r3, r2
   296a8:	617b      	str	r3, [r7, #20]
   296aa:	e00a      	b.n	296c2 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   296ac:	683b      	ldr	r3, [r7, #0]
   296ae:	685b      	ldr	r3, [r3, #4]
   296b0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   296b2:	693a      	ldr	r2, [r7, #16]
   296b4:	4313      	orrs	r3, r2
   296b6:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   296b8:	697b      	ldr	r3, [r7, #20]
   296ba:	2280      	movs	r2, #128	; 0x80
   296bc:	0292      	lsls	r2, r2, #10
   296be:	4313      	orrs	r3, r2
   296c0:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   296c2:	683b      	ldr	r3, [r7, #0]
   296c4:	7a1b      	ldrb	r3, [r3, #8]
   296c6:	2b00      	cmp	r3, #0
   296c8:	d004      	beq.n	296d4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   296ca:	697b      	ldr	r3, [r7, #20]
   296cc:	2280      	movs	r2, #128	; 0x80
   296ce:	0392      	lsls	r2, r2, #14
   296d0:	4313      	orrs	r3, r2
   296d2:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   296d4:	46c0      	nop			; (mov r8, r8)
   296d6:	4b13      	ldr	r3, [pc, #76]	; (29724 <system_gclk_gen_set_config+0x110>)
   296d8:	4798      	blx	r3
   296da:	1e03      	subs	r3, r0, #0
   296dc:	d1fb      	bne.n	296d6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   296de:	4b12      	ldr	r3, [pc, #72]	; (29728 <system_gclk_gen_set_config+0x114>)
   296e0:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   296e2:	4a12      	ldr	r2, [pc, #72]	; (2972c <system_gclk_gen_set_config+0x118>)
   296e4:	1dfb      	adds	r3, r7, #7
   296e6:	781b      	ldrb	r3, [r3, #0]
   296e8:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   296ea:	46c0      	nop			; (mov r8, r8)
   296ec:	4b0d      	ldr	r3, [pc, #52]	; (29724 <system_gclk_gen_set_config+0x110>)
   296ee:	4798      	blx	r3
   296f0:	1e03      	subs	r3, r0, #0
   296f2:	d1fb      	bne.n	296ec <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   296f4:	4b0e      	ldr	r3, [pc, #56]	; (29730 <system_gclk_gen_set_config+0x11c>)
   296f6:	693a      	ldr	r2, [r7, #16]
   296f8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   296fa:	46c0      	nop			; (mov r8, r8)
   296fc:	4b09      	ldr	r3, [pc, #36]	; (29724 <system_gclk_gen_set_config+0x110>)
   296fe:	4798      	blx	r3
   29700:	1e03      	subs	r3, r0, #0
   29702:	d1fb      	bne.n	296fc <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   29704:	4b0a      	ldr	r3, [pc, #40]	; (29730 <system_gclk_gen_set_config+0x11c>)
   29706:	4a0a      	ldr	r2, [pc, #40]	; (29730 <system_gclk_gen_set_config+0x11c>)
   29708:	6851      	ldr	r1, [r2, #4]
   2970a:	2280      	movs	r2, #128	; 0x80
   2970c:	0252      	lsls	r2, r2, #9
   2970e:	4011      	ands	r1, r2
   29710:	697a      	ldr	r2, [r7, #20]
   29712:	430a      	orrs	r2, r1
   29714:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29716:	4b07      	ldr	r3, [pc, #28]	; (29734 <system_gclk_gen_set_config+0x120>)
   29718:	4798      	blx	r3
}
   2971a:	46c0      	nop			; (mov r8, r8)
   2971c:	46bd      	mov	sp, r7
   2971e:	b006      	add	sp, #24
   29720:	bd80      	pop	{r7, pc}
   29722:	46c0      	nop			; (mov r8, r8)
   29724:	000295c5 	.word	0x000295c5
   29728:	0002959d 	.word	0x0002959d
   2972c:	40000c08 	.word	0x40000c08
   29730:	40000c00 	.word	0x40000c00
   29734:	000295b1 	.word	0x000295b1

00029738 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29738:	b580      	push	{r7, lr}
   2973a:	b082      	sub	sp, #8
   2973c:	af00      	add	r7, sp, #0
   2973e:	0002      	movs	r2, r0
   29740:	1dfb      	adds	r3, r7, #7
   29742:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29744:	46c0      	nop			; (mov r8, r8)
   29746:	4b0e      	ldr	r3, [pc, #56]	; (29780 <system_gclk_gen_enable+0x48>)
   29748:	4798      	blx	r3
   2974a:	1e03      	subs	r3, r0, #0
   2974c:	d1fb      	bne.n	29746 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2974e:	4b0d      	ldr	r3, [pc, #52]	; (29784 <system_gclk_gen_enable+0x4c>)
   29750:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29752:	4a0d      	ldr	r2, [pc, #52]	; (29788 <system_gclk_gen_enable+0x50>)
   29754:	1dfb      	adds	r3, r7, #7
   29756:	781b      	ldrb	r3, [r3, #0]
   29758:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2975a:	46c0      	nop			; (mov r8, r8)
   2975c:	4b08      	ldr	r3, [pc, #32]	; (29780 <system_gclk_gen_enable+0x48>)
   2975e:	4798      	blx	r3
   29760:	1e03      	subs	r3, r0, #0
   29762:	d1fb      	bne.n	2975c <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   29764:	4b09      	ldr	r3, [pc, #36]	; (2978c <system_gclk_gen_enable+0x54>)
   29766:	4a09      	ldr	r2, [pc, #36]	; (2978c <system_gclk_gen_enable+0x54>)
   29768:	6852      	ldr	r2, [r2, #4]
   2976a:	2180      	movs	r1, #128	; 0x80
   2976c:	0249      	lsls	r1, r1, #9
   2976e:	430a      	orrs	r2, r1
   29770:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29772:	4b07      	ldr	r3, [pc, #28]	; (29790 <system_gclk_gen_enable+0x58>)
   29774:	4798      	blx	r3
}
   29776:	46c0      	nop			; (mov r8, r8)
   29778:	46bd      	mov	sp, r7
   2977a:	b002      	add	sp, #8
   2977c:	bd80      	pop	{r7, pc}
   2977e:	46c0      	nop			; (mov r8, r8)
   29780:	000295c5 	.word	0x000295c5
   29784:	0002959d 	.word	0x0002959d
   29788:	40000c04 	.word	0x40000c04
   2978c:	40000c00 	.word	0x40000c00
   29790:	000295b1 	.word	0x000295b1

00029794 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   29794:	b580      	push	{r7, lr}
   29796:	b086      	sub	sp, #24
   29798:	af00      	add	r7, sp, #0
   2979a:	0002      	movs	r2, r0
   2979c:	1dfb      	adds	r3, r7, #7
   2979e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   297a0:	46c0      	nop			; (mov r8, r8)
   297a2:	4b2a      	ldr	r3, [pc, #168]	; (2984c <system_gclk_gen_get_hz+0xb8>)
   297a4:	4798      	blx	r3
   297a6:	1e03      	subs	r3, r0, #0
   297a8:	d1fb      	bne.n	297a2 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   297aa:	4b29      	ldr	r3, [pc, #164]	; (29850 <system_gclk_gen_get_hz+0xbc>)
   297ac:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   297ae:	4a29      	ldr	r2, [pc, #164]	; (29854 <system_gclk_gen_get_hz+0xc0>)
   297b0:	1dfb      	adds	r3, r7, #7
   297b2:	781b      	ldrb	r3, [r3, #0]
   297b4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   297b6:	46c0      	nop			; (mov r8, r8)
   297b8:	4b24      	ldr	r3, [pc, #144]	; (2984c <system_gclk_gen_get_hz+0xb8>)
   297ba:	4798      	blx	r3
   297bc:	1e03      	subs	r3, r0, #0
   297be:	d1fb      	bne.n	297b8 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   297c0:	4b25      	ldr	r3, [pc, #148]	; (29858 <system_gclk_gen_get_hz+0xc4>)
   297c2:	685b      	ldr	r3, [r3, #4]
   297c4:	04db      	lsls	r3, r3, #19
   297c6:	0edb      	lsrs	r3, r3, #27
   297c8:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   297ca:	0018      	movs	r0, r3
   297cc:	4b23      	ldr	r3, [pc, #140]	; (2985c <system_gclk_gen_get_hz+0xc8>)
   297ce:	4798      	blx	r3
   297d0:	0003      	movs	r3, r0
   297d2:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   297d4:	4a1f      	ldr	r2, [pc, #124]	; (29854 <system_gclk_gen_get_hz+0xc0>)
   297d6:	1dfb      	adds	r3, r7, #7
   297d8:	781b      	ldrb	r3, [r3, #0]
   297da:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   297dc:	4b1e      	ldr	r3, [pc, #120]	; (29858 <system_gclk_gen_get_hz+0xc4>)
   297de:	685b      	ldr	r3, [r3, #4]
   297e0:	02db      	lsls	r3, r3, #11
   297e2:	0fdb      	lsrs	r3, r3, #31
   297e4:	b2da      	uxtb	r2, r3
   297e6:	2313      	movs	r3, #19
   297e8:	18fb      	adds	r3, r7, r3
   297ea:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   297ec:	4a1c      	ldr	r2, [pc, #112]	; (29860 <system_gclk_gen_get_hz+0xcc>)
   297ee:	1dfb      	adds	r3, r7, #7
   297f0:	781b      	ldrb	r3, [r3, #0]
   297f2:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   297f4:	46c0      	nop			; (mov r8, r8)
   297f6:	4b15      	ldr	r3, [pc, #84]	; (2984c <system_gclk_gen_get_hz+0xb8>)
   297f8:	4798      	blx	r3
   297fa:	1e03      	subs	r3, r0, #0
   297fc:	d1fb      	bne.n	297f6 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   297fe:	4b16      	ldr	r3, [pc, #88]	; (29858 <system_gclk_gen_get_hz+0xc4>)
   29800:	689b      	ldr	r3, [r3, #8]
   29802:	021b      	lsls	r3, r3, #8
   29804:	0c1b      	lsrs	r3, r3, #16
   29806:	b29b      	uxth	r3, r3
   29808:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2980a:	4b16      	ldr	r3, [pc, #88]	; (29864 <system_gclk_gen_get_hz+0xd0>)
   2980c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2980e:	2313      	movs	r3, #19
   29810:	18fb      	adds	r3, r7, r3
   29812:	781b      	ldrb	r3, [r3, #0]
   29814:	2b00      	cmp	r3, #0
   29816:	d109      	bne.n	2982c <system_gclk_gen_get_hz+0x98>
   29818:	68fb      	ldr	r3, [r7, #12]
   2981a:	2b01      	cmp	r3, #1
   2981c:	d906      	bls.n	2982c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2981e:	4b12      	ldr	r3, [pc, #72]	; (29868 <system_gclk_gen_get_hz+0xd4>)
   29820:	68f9      	ldr	r1, [r7, #12]
   29822:	6978      	ldr	r0, [r7, #20]
   29824:	4798      	blx	r3
   29826:	0003      	movs	r3, r0
   29828:	617b      	str	r3, [r7, #20]
   2982a:	e00a      	b.n	29842 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2982c:	2313      	movs	r3, #19
   2982e:	18fb      	adds	r3, r7, r3
   29830:	781b      	ldrb	r3, [r3, #0]
   29832:	2b00      	cmp	r3, #0
   29834:	d005      	beq.n	29842 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   29836:	68fb      	ldr	r3, [r7, #12]
   29838:	3301      	adds	r3, #1
   2983a:	697a      	ldr	r2, [r7, #20]
   2983c:	40da      	lsrs	r2, r3
   2983e:	0013      	movs	r3, r2
   29840:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   29842:	697b      	ldr	r3, [r7, #20]
}
   29844:	0018      	movs	r0, r3
   29846:	46bd      	mov	sp, r7
   29848:	b006      	add	sp, #24
   2984a:	bd80      	pop	{r7, pc}
   2984c:	000295c5 	.word	0x000295c5
   29850:	0002959d 	.word	0x0002959d
   29854:	40000c04 	.word	0x40000c04
   29858:	40000c00 	.word	0x40000c00
   2985c:	00028ef5 	.word	0x00028ef5
   29860:	40000c08 	.word	0x40000c08
   29864:	000295b1 	.word	0x000295b1
   29868:	000323b1 	.word	0x000323b1

0002986c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2986c:	b580      	push	{r7, lr}
   2986e:	b084      	sub	sp, #16
   29870:	af00      	add	r7, sp, #0
   29872:	0002      	movs	r2, r0
   29874:	6039      	str	r1, [r7, #0]
   29876:	1dfb      	adds	r3, r7, #7
   29878:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2987a:	1dfb      	adds	r3, r7, #7
   2987c:	781b      	ldrb	r3, [r3, #0]
   2987e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   29880:	683b      	ldr	r3, [r7, #0]
   29882:	781b      	ldrb	r3, [r3, #0]
   29884:	021b      	lsls	r3, r3, #8
   29886:	001a      	movs	r2, r3
   29888:	68fb      	ldr	r3, [r7, #12]
   2988a:	4313      	orrs	r3, r2
   2988c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2988e:	1dfb      	adds	r3, r7, #7
   29890:	781b      	ldrb	r3, [r3, #0]
   29892:	0018      	movs	r0, r3
   29894:	4b04      	ldr	r3, [pc, #16]	; (298a8 <system_gclk_chan_set_config+0x3c>)
   29896:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   29898:	4b04      	ldr	r3, [pc, #16]	; (298ac <system_gclk_chan_set_config+0x40>)
   2989a:	68fa      	ldr	r2, [r7, #12]
   2989c:	b292      	uxth	r2, r2
   2989e:	805a      	strh	r2, [r3, #2]
}
   298a0:	46c0      	nop			; (mov r8, r8)
   298a2:	46bd      	mov	sp, r7
   298a4:	b004      	add	sp, #16
   298a6:	bd80      	pop	{r7, pc}
   298a8:	000298f9 	.word	0x000298f9
   298ac:	40000c00 	.word	0x40000c00

000298b0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   298b0:	b580      	push	{r7, lr}
   298b2:	b082      	sub	sp, #8
   298b4:	af00      	add	r7, sp, #0
   298b6:	0002      	movs	r2, r0
   298b8:	1dfb      	adds	r3, r7, #7
   298ba:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   298bc:	4b0a      	ldr	r3, [pc, #40]	; (298e8 <system_gclk_chan_enable+0x38>)
   298be:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   298c0:	4a0a      	ldr	r2, [pc, #40]	; (298ec <system_gclk_chan_enable+0x3c>)
   298c2:	1dfb      	adds	r3, r7, #7
   298c4:	781b      	ldrb	r3, [r3, #0]
   298c6:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   298c8:	4909      	ldr	r1, [pc, #36]	; (298f0 <system_gclk_chan_enable+0x40>)
   298ca:	4b09      	ldr	r3, [pc, #36]	; (298f0 <system_gclk_chan_enable+0x40>)
   298cc:	885b      	ldrh	r3, [r3, #2]
   298ce:	b29b      	uxth	r3, r3
   298d0:	2280      	movs	r2, #128	; 0x80
   298d2:	01d2      	lsls	r2, r2, #7
   298d4:	4313      	orrs	r3, r2
   298d6:	b29b      	uxth	r3, r3
   298d8:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   298da:	4b06      	ldr	r3, [pc, #24]	; (298f4 <system_gclk_chan_enable+0x44>)
   298dc:	4798      	blx	r3
}
   298de:	46c0      	nop			; (mov r8, r8)
   298e0:	46bd      	mov	sp, r7
   298e2:	b002      	add	sp, #8
   298e4:	bd80      	pop	{r7, pc}
   298e6:	46c0      	nop			; (mov r8, r8)
   298e8:	0002959d 	.word	0x0002959d
   298ec:	40000c02 	.word	0x40000c02
   298f0:	40000c00 	.word	0x40000c00
   298f4:	000295b1 	.word	0x000295b1

000298f8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   298f8:	b580      	push	{r7, lr}
   298fa:	b084      	sub	sp, #16
   298fc:	af00      	add	r7, sp, #0
   298fe:	0002      	movs	r2, r0
   29900:	1dfb      	adds	r3, r7, #7
   29902:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   29904:	4b1c      	ldr	r3, [pc, #112]	; (29978 <system_gclk_chan_disable+0x80>)
   29906:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   29908:	4a1c      	ldr	r2, [pc, #112]	; (2997c <system_gclk_chan_disable+0x84>)
   2990a:	1dfb      	adds	r3, r7, #7
   2990c:	781b      	ldrb	r3, [r3, #0]
   2990e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   29910:	4b1b      	ldr	r3, [pc, #108]	; (29980 <system_gclk_chan_disable+0x88>)
   29912:	885b      	ldrh	r3, [r3, #2]
   29914:	051b      	lsls	r3, r3, #20
   29916:	0f1b      	lsrs	r3, r3, #28
   29918:	b2db      	uxtb	r3, r3
   2991a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2991c:	4a18      	ldr	r2, [pc, #96]	; (29980 <system_gclk_chan_disable+0x88>)
   2991e:	8853      	ldrh	r3, [r2, #2]
   29920:	4918      	ldr	r1, [pc, #96]	; (29984 <system_gclk_chan_disable+0x8c>)
   29922:	400b      	ands	r3, r1
   29924:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   29926:	4a16      	ldr	r2, [pc, #88]	; (29980 <system_gclk_chan_disable+0x88>)
   29928:	4b15      	ldr	r3, [pc, #84]	; (29980 <system_gclk_chan_disable+0x88>)
   2992a:	885b      	ldrh	r3, [r3, #2]
   2992c:	b29b      	uxth	r3, r3
   2992e:	4916      	ldr	r1, [pc, #88]	; (29988 <system_gclk_chan_disable+0x90>)
   29930:	400b      	ands	r3, r1
   29932:	b29b      	uxth	r3, r3
   29934:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   29936:	46c0      	nop			; (mov r8, r8)
   29938:	4b11      	ldr	r3, [pc, #68]	; (29980 <system_gclk_chan_disable+0x88>)
   2993a:	885b      	ldrh	r3, [r3, #2]
   2993c:	b29b      	uxth	r3, r3
   2993e:	001a      	movs	r2, r3
   29940:	2380      	movs	r3, #128	; 0x80
   29942:	01db      	lsls	r3, r3, #7
   29944:	4013      	ands	r3, r2
   29946:	d1f7      	bne.n	29938 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   29948:	4a0d      	ldr	r2, [pc, #52]	; (29980 <system_gclk_chan_disable+0x88>)
   2994a:	68fb      	ldr	r3, [r7, #12]
   2994c:	b2db      	uxtb	r3, r3
   2994e:	1c19      	adds	r1, r3, #0
   29950:	230f      	movs	r3, #15
   29952:	400b      	ands	r3, r1
   29954:	b2d9      	uxtb	r1, r3
   29956:	8853      	ldrh	r3, [r2, #2]
   29958:	1c08      	adds	r0, r1, #0
   2995a:	210f      	movs	r1, #15
   2995c:	4001      	ands	r1, r0
   2995e:	0208      	lsls	r0, r1, #8
   29960:	4908      	ldr	r1, [pc, #32]	; (29984 <system_gclk_chan_disable+0x8c>)
   29962:	400b      	ands	r3, r1
   29964:	1c19      	adds	r1, r3, #0
   29966:	1c03      	adds	r3, r0, #0
   29968:	430b      	orrs	r3, r1
   2996a:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2996c:	4b07      	ldr	r3, [pc, #28]	; (2998c <system_gclk_chan_disable+0x94>)
   2996e:	4798      	blx	r3
}
   29970:	46c0      	nop			; (mov r8, r8)
   29972:	46bd      	mov	sp, r7
   29974:	b004      	add	sp, #16
   29976:	bd80      	pop	{r7, pc}
   29978:	0002959d 	.word	0x0002959d
   2997c:	40000c02 	.word	0x40000c02
   29980:	40000c00 	.word	0x40000c00
   29984:	fffff0ff 	.word	0xfffff0ff
   29988:	ffffbfff 	.word	0xffffbfff
   2998c:	000295b1 	.word	0x000295b1

00029990 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   29990:	b580      	push	{r7, lr}
   29992:	b084      	sub	sp, #16
   29994:	af00      	add	r7, sp, #0
   29996:	0002      	movs	r2, r0
   29998:	1dfb      	adds	r3, r7, #7
   2999a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2999c:	4b0d      	ldr	r3, [pc, #52]	; (299d4 <system_gclk_chan_get_hz+0x44>)
   2999e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   299a0:	4a0d      	ldr	r2, [pc, #52]	; (299d8 <system_gclk_chan_get_hz+0x48>)
   299a2:	1dfb      	adds	r3, r7, #7
   299a4:	781b      	ldrb	r3, [r3, #0]
   299a6:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   299a8:	4b0c      	ldr	r3, [pc, #48]	; (299dc <system_gclk_chan_get_hz+0x4c>)
   299aa:	885b      	ldrh	r3, [r3, #2]
   299ac:	051b      	lsls	r3, r3, #20
   299ae:	0f1b      	lsrs	r3, r3, #28
   299b0:	b2da      	uxtb	r2, r3
   299b2:	230f      	movs	r3, #15
   299b4:	18fb      	adds	r3, r7, r3
   299b6:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   299b8:	4b09      	ldr	r3, [pc, #36]	; (299e0 <system_gclk_chan_get_hz+0x50>)
   299ba:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   299bc:	230f      	movs	r3, #15
   299be:	18fb      	adds	r3, r7, r3
   299c0:	781b      	ldrb	r3, [r3, #0]
   299c2:	0018      	movs	r0, r3
   299c4:	4b07      	ldr	r3, [pc, #28]	; (299e4 <system_gclk_chan_get_hz+0x54>)
   299c6:	4798      	blx	r3
   299c8:	0003      	movs	r3, r0
}
   299ca:	0018      	movs	r0, r3
   299cc:	46bd      	mov	sp, r7
   299ce:	b004      	add	sp, #16
   299d0:	bd80      	pop	{r7, pc}
   299d2:	46c0      	nop			; (mov r8, r8)
   299d4:	0002959d 	.word	0x0002959d
   299d8:	40000c02 	.word	0x40000c02
   299dc:	40000c00 	.word	0x40000c00
   299e0:	000295b1 	.word	0x000295b1
   299e4:	00029795 	.word	0x00029795

000299e8 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   299e8:	b580      	push	{r7, lr}
   299ea:	b084      	sub	sp, #16
   299ec:	af00      	add	r7, sp, #0
   299ee:	0002      	movs	r2, r0
   299f0:	1dfb      	adds	r3, r7, #7
   299f2:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   299f4:	230f      	movs	r3, #15
   299f6:	18fb      	adds	r3, r7, r3
   299f8:	2200      	movs	r2, #0
   299fa:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   299fc:	1dfb      	adds	r3, r7, #7
   299fe:	781b      	ldrb	r3, [r3, #0]
   29a00:	2b7f      	cmp	r3, #127	; 0x7f
   29a02:	d80b      	bhi.n	29a1c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   29a04:	4a13      	ldr	r2, [pc, #76]	; (29a54 <system_interrupt_clear_pending+0x6c>)
   29a06:	1dfb      	adds	r3, r7, #7
   29a08:	781b      	ldrb	r3, [r3, #0]
   29a0a:	b25b      	sxtb	r3, r3
   29a0c:	2101      	movs	r1, #1
   29a0e:	4099      	lsls	r1, r3
   29a10:	000b      	movs	r3, r1
   29a12:	0019      	movs	r1, r3
   29a14:	23c0      	movs	r3, #192	; 0xc0
   29a16:	005b      	lsls	r3, r3, #1
   29a18:	50d1      	str	r1, [r2, r3]
   29a1a:	e014      	b.n	29a46 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   29a1c:	1dfb      	adds	r3, r7, #7
   29a1e:	781b      	ldrb	r3, [r3, #0]
   29a20:	b25b      	sxtb	r3, r3
   29a22:	330e      	adds	r3, #14
   29a24:	d101      	bne.n	29a2a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   29a26:	2317      	movs	r3, #23
   29a28:	e010      	b.n	29a4c <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   29a2a:	1dfb      	adds	r3, r7, #7
   29a2c:	781b      	ldrb	r3, [r3, #0]
   29a2e:	b25b      	sxtb	r3, r3
   29a30:	3301      	adds	r3, #1
   29a32:	d104      	bne.n	29a3e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   29a34:	4b08      	ldr	r3, [pc, #32]	; (29a58 <system_interrupt_clear_pending+0x70>)
   29a36:	2280      	movs	r2, #128	; 0x80
   29a38:	0492      	lsls	r2, r2, #18
   29a3a:	605a      	str	r2, [r3, #4]
   29a3c:	e003      	b.n	29a46 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   29a3e:	230f      	movs	r3, #15
   29a40:	18fb      	adds	r3, r7, r3
   29a42:	2217      	movs	r2, #23
   29a44:	701a      	strb	r2, [r3, #0]
	}

	return status;
   29a46:	230f      	movs	r3, #15
   29a48:	18fb      	adds	r3, r7, r3
   29a4a:	781b      	ldrb	r3, [r3, #0]
}
   29a4c:	0018      	movs	r0, r3
   29a4e:	46bd      	mov	sp, r7
   29a50:	b004      	add	sp, #16
   29a52:	bd80      	pop	{r7, pc}
   29a54:	e000e100 	.word	0xe000e100
   29a58:	e000ed00 	.word	0xe000ed00

00029a5c <system_pinmux_get_group_from_gpio_pin>:
{
   29a5c:	b580      	push	{r7, lr}
   29a5e:	b084      	sub	sp, #16
   29a60:	af00      	add	r7, sp, #0
   29a62:	0002      	movs	r2, r0
   29a64:	1dfb      	adds	r3, r7, #7
   29a66:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   29a68:	230f      	movs	r3, #15
   29a6a:	18fb      	adds	r3, r7, r3
   29a6c:	1dfa      	adds	r2, r7, #7
   29a6e:	7812      	ldrb	r2, [r2, #0]
   29a70:	09d2      	lsrs	r2, r2, #7
   29a72:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   29a74:	230e      	movs	r3, #14
   29a76:	18fb      	adds	r3, r7, r3
   29a78:	1dfa      	adds	r2, r7, #7
   29a7a:	7812      	ldrb	r2, [r2, #0]
   29a7c:	0952      	lsrs	r2, r2, #5
   29a7e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   29a80:	4b0d      	ldr	r3, [pc, #52]	; (29ab8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   29a82:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   29a84:	230f      	movs	r3, #15
   29a86:	18fb      	adds	r3, r7, r3
   29a88:	781b      	ldrb	r3, [r3, #0]
   29a8a:	2b00      	cmp	r3, #0
   29a8c:	d10f      	bne.n	29aae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   29a8e:	230f      	movs	r3, #15
   29a90:	18fb      	adds	r3, r7, r3
   29a92:	781b      	ldrb	r3, [r3, #0]
   29a94:	009b      	lsls	r3, r3, #2
   29a96:	2210      	movs	r2, #16
   29a98:	4694      	mov	ip, r2
   29a9a:	44bc      	add	ip, r7
   29a9c:	4463      	add	r3, ip
   29a9e:	3b08      	subs	r3, #8
   29aa0:	681a      	ldr	r2, [r3, #0]
   29aa2:	230e      	movs	r3, #14
   29aa4:	18fb      	adds	r3, r7, r3
   29aa6:	781b      	ldrb	r3, [r3, #0]
   29aa8:	01db      	lsls	r3, r3, #7
   29aaa:	18d3      	adds	r3, r2, r3
   29aac:	e000      	b.n	29ab0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   29aae:	2300      	movs	r3, #0
}
   29ab0:	0018      	movs	r0, r3
   29ab2:	46bd      	mov	sp, r7
   29ab4:	b004      	add	sp, #16
   29ab6:	bd80      	pop	{r7, pc}
   29ab8:	41004400 	.word	0x41004400

00029abc <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   29abc:	b580      	push	{r7, lr}
   29abe:	b088      	sub	sp, #32
   29ac0:	af00      	add	r7, sp, #0
   29ac2:	60f8      	str	r0, [r7, #12]
   29ac4:	60b9      	str	r1, [r7, #8]
   29ac6:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   29ac8:	2300      	movs	r3, #0
   29aca:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   29acc:	687b      	ldr	r3, [r7, #4]
   29ace:	78db      	ldrb	r3, [r3, #3]
   29ad0:	2201      	movs	r2, #1
   29ad2:	4053      	eors	r3, r2
   29ad4:	b2db      	uxtb	r3, r3
   29ad6:	2b00      	cmp	r3, #0
   29ad8:	d035      	beq.n	29b46 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   29ada:	687b      	ldr	r3, [r7, #4]
   29adc:	781b      	ldrb	r3, [r3, #0]
   29ade:	2b80      	cmp	r3, #128	; 0x80
   29ae0:	d00b      	beq.n	29afa <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   29ae2:	69fb      	ldr	r3, [r7, #28]
   29ae4:	2280      	movs	r2, #128	; 0x80
   29ae6:	0252      	lsls	r2, r2, #9
   29ae8:	4313      	orrs	r3, r2
   29aea:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   29aec:	687b      	ldr	r3, [r7, #4]
   29aee:	781b      	ldrb	r3, [r3, #0]
   29af0:	061b      	lsls	r3, r3, #24
   29af2:	001a      	movs	r2, r3
   29af4:	69fb      	ldr	r3, [r7, #28]
   29af6:	4313      	orrs	r3, r2
   29af8:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29afa:	687b      	ldr	r3, [r7, #4]
   29afc:	785b      	ldrb	r3, [r3, #1]
   29afe:	2b00      	cmp	r3, #0
   29b00:	d003      	beq.n	29b0a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29b02:	687b      	ldr	r3, [r7, #4]
   29b04:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   29b06:	2b02      	cmp	r3, #2
   29b08:	d110      	bne.n	29b2c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   29b0a:	69fb      	ldr	r3, [r7, #28]
   29b0c:	2280      	movs	r2, #128	; 0x80
   29b0e:	0292      	lsls	r2, r2, #10
   29b10:	4313      	orrs	r3, r2
   29b12:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   29b14:	687b      	ldr	r3, [r7, #4]
   29b16:	789b      	ldrb	r3, [r3, #2]
   29b18:	2b00      	cmp	r3, #0
   29b1a:	d004      	beq.n	29b26 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   29b1c:	69fb      	ldr	r3, [r7, #28]
   29b1e:	2280      	movs	r2, #128	; 0x80
   29b20:	02d2      	lsls	r2, r2, #11
   29b22:	4313      	orrs	r3, r2
   29b24:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   29b26:	68fb      	ldr	r3, [r7, #12]
   29b28:	68ba      	ldr	r2, [r7, #8]
   29b2a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29b2c:	687b      	ldr	r3, [r7, #4]
   29b2e:	785b      	ldrb	r3, [r3, #1]
   29b30:	2b01      	cmp	r3, #1
   29b32:	d003      	beq.n	29b3c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29b34:	687b      	ldr	r3, [r7, #4]
   29b36:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29b38:	2b02      	cmp	r3, #2
   29b3a:	d107      	bne.n	29b4c <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   29b3c:	69fb      	ldr	r3, [r7, #28]
   29b3e:	4a22      	ldr	r2, [pc, #136]	; (29bc8 <_system_pinmux_config+0x10c>)
   29b40:	4013      	ands	r3, r2
   29b42:	61fb      	str	r3, [r7, #28]
   29b44:	e002      	b.n	29b4c <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   29b46:	68fb      	ldr	r3, [r7, #12]
   29b48:	68ba      	ldr	r2, [r7, #8]
   29b4a:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   29b4c:	68bb      	ldr	r3, [r7, #8]
   29b4e:	041b      	lsls	r3, r3, #16
   29b50:	0c1b      	lsrs	r3, r3, #16
   29b52:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   29b54:	68bb      	ldr	r3, [r7, #8]
   29b56:	0c1b      	lsrs	r3, r3, #16
   29b58:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b5a:	69ba      	ldr	r2, [r7, #24]
   29b5c:	69fb      	ldr	r3, [r7, #28]
   29b5e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   29b60:	22a0      	movs	r2, #160	; 0xa0
   29b62:	05d2      	lsls	r2, r2, #23
   29b64:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b66:	68fb      	ldr	r3, [r7, #12]
   29b68:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b6a:	697a      	ldr	r2, [r7, #20]
   29b6c:	69fb      	ldr	r3, [r7, #28]
   29b6e:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   29b70:	22d0      	movs	r2, #208	; 0xd0
   29b72:	0612      	lsls	r2, r2, #24
   29b74:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   29b76:	68fb      	ldr	r3, [r7, #12]
   29b78:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   29b7a:	687b      	ldr	r3, [r7, #4]
   29b7c:	78db      	ldrb	r3, [r3, #3]
   29b7e:	2201      	movs	r2, #1
   29b80:	4053      	eors	r3, r2
   29b82:	b2db      	uxtb	r3, r3
   29b84:	2b00      	cmp	r3, #0
   29b86:	d01a      	beq.n	29bbe <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   29b88:	69fa      	ldr	r2, [r7, #28]
   29b8a:	2380      	movs	r3, #128	; 0x80
   29b8c:	02db      	lsls	r3, r3, #11
   29b8e:	4013      	ands	r3, r2
   29b90:	d00a      	beq.n	29ba8 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   29b92:	687b      	ldr	r3, [r7, #4]
   29b94:	789b      	ldrb	r3, [r3, #2]
   29b96:	2b01      	cmp	r3, #1
   29b98:	d103      	bne.n	29ba2 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   29b9a:	68fb      	ldr	r3, [r7, #12]
   29b9c:	68ba      	ldr	r2, [r7, #8]
   29b9e:	619a      	str	r2, [r3, #24]
   29ba0:	e002      	b.n	29ba8 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   29ba2:	68fb      	ldr	r3, [r7, #12]
   29ba4:	68ba      	ldr	r2, [r7, #8]
   29ba6:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29ba8:	687b      	ldr	r3, [r7, #4]
   29baa:	785b      	ldrb	r3, [r3, #1]
   29bac:	2b01      	cmp	r3, #1
   29bae:	d003      	beq.n	29bb8 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   29bb0:	687b      	ldr	r3, [r7, #4]
   29bb2:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   29bb4:	2b02      	cmp	r3, #2
   29bb6:	d102      	bne.n	29bbe <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   29bb8:	68fb      	ldr	r3, [r7, #12]
   29bba:	68ba      	ldr	r2, [r7, #8]
   29bbc:	609a      	str	r2, [r3, #8]
		}
	}
}
   29bbe:	46c0      	nop			; (mov r8, r8)
   29bc0:	46bd      	mov	sp, r7
   29bc2:	b008      	add	sp, #32
   29bc4:	bd80      	pop	{r7, pc}
   29bc6:	46c0      	nop			; (mov r8, r8)
   29bc8:	fffbffff 	.word	0xfffbffff

00029bcc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   29bcc:	b580      	push	{r7, lr}
   29bce:	b084      	sub	sp, #16
   29bd0:	af00      	add	r7, sp, #0
   29bd2:	0002      	movs	r2, r0
   29bd4:	6039      	str	r1, [r7, #0]
   29bd6:	1dfb      	adds	r3, r7, #7
   29bd8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   29bda:	1dfb      	adds	r3, r7, #7
   29bdc:	781b      	ldrb	r3, [r3, #0]
   29bde:	0018      	movs	r0, r3
   29be0:	4b0a      	ldr	r3, [pc, #40]	; (29c0c <system_pinmux_pin_set_config+0x40>)
   29be2:	4798      	blx	r3
   29be4:	0003      	movs	r3, r0
   29be6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   29be8:	1dfb      	adds	r3, r7, #7
   29bea:	781b      	ldrb	r3, [r3, #0]
   29bec:	221f      	movs	r2, #31
   29bee:	4013      	ands	r3, r2
   29bf0:	2201      	movs	r2, #1
   29bf2:	409a      	lsls	r2, r3
   29bf4:	0013      	movs	r3, r2
   29bf6:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   29bf8:	683a      	ldr	r2, [r7, #0]
   29bfa:	68b9      	ldr	r1, [r7, #8]
   29bfc:	68fb      	ldr	r3, [r7, #12]
   29bfe:	0018      	movs	r0, r3
   29c00:	4b03      	ldr	r3, [pc, #12]	; (29c10 <system_pinmux_pin_set_config+0x44>)
   29c02:	4798      	blx	r3
}
   29c04:	46c0      	nop			; (mov r8, r8)
   29c06:	46bd      	mov	sp, r7
   29c08:	b004      	add	sp, #16
   29c0a:	bd80      	pop	{r7, pc}
   29c0c:	00029a5d 	.word	0x00029a5d
   29c10:	00029abd 	.word	0x00029abd

00029c14 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   29c14:	b580      	push	{r7, lr}
   29c16:	af00      	add	r7, sp, #0
	return;
   29c18:	46c0      	nop			; (mov r8, r8)
}
   29c1a:	46bd      	mov	sp, r7
   29c1c:	bd80      	pop	{r7, pc}
	...

00029c20 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   29c20:	b580      	push	{r7, lr}
   29c22:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   29c24:	4b06      	ldr	r3, [pc, #24]	; (29c40 <system_init+0x20>)
   29c26:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   29c28:	4b06      	ldr	r3, [pc, #24]	; (29c44 <system_init+0x24>)
   29c2a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   29c2c:	4b06      	ldr	r3, [pc, #24]	; (29c48 <system_init+0x28>)
   29c2e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   29c30:	4b06      	ldr	r3, [pc, #24]	; (29c4c <system_init+0x2c>)
   29c32:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   29c34:	4b06      	ldr	r3, [pc, #24]	; (29c50 <system_init+0x30>)
   29c36:	4798      	blx	r3
}
   29c38:	46c0      	nop			; (mov r8, r8)
   29c3a:	46bd      	mov	sp, r7
   29c3c:	bd80      	pop	{r7, pc}
   29c3e:	46c0      	nop			; (mov r8, r8)
   29c40:	000292a1 	.word	0x000292a1
   29c44:	00025d69 	.word	0x00025d69
   29c48:	00012669 	.word	0x00012669
   29c4c:	00026141 	.word	0x00026141
   29c50:	00029c15 	.word	0x00029c15

00029c54 <system_gclk_chan_get_config_defaults>:
{
   29c54:	b580      	push	{r7, lr}
   29c56:	b082      	sub	sp, #8
   29c58:	af00      	add	r7, sp, #0
   29c5a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29c5c:	687b      	ldr	r3, [r7, #4]
   29c5e:	2200      	movs	r2, #0
   29c60:	701a      	strb	r2, [r3, #0]
}
   29c62:	46c0      	nop			; (mov r8, r8)
   29c64:	46bd      	mov	sp, r7
   29c66:	b002      	add	sp, #8
   29c68:	bd80      	pop	{r7, pc}
	...

00029c6c <system_apb_clock_set_mask>:
{
   29c6c:	b580      	push	{r7, lr}
   29c6e:	b082      	sub	sp, #8
   29c70:	af00      	add	r7, sp, #0
   29c72:	0002      	movs	r2, r0
   29c74:	6039      	str	r1, [r7, #0]
   29c76:	1dfb      	adds	r3, r7, #7
   29c78:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29c7a:	1dfb      	adds	r3, r7, #7
   29c7c:	781b      	ldrb	r3, [r3, #0]
   29c7e:	2b01      	cmp	r3, #1
   29c80:	d00a      	beq.n	29c98 <system_apb_clock_set_mask+0x2c>
   29c82:	2b02      	cmp	r3, #2
   29c84:	d00f      	beq.n	29ca6 <system_apb_clock_set_mask+0x3a>
   29c86:	2b00      	cmp	r3, #0
   29c88:	d114      	bne.n	29cb4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29c8a:	4b0e      	ldr	r3, [pc, #56]	; (29cc4 <system_apb_clock_set_mask+0x58>)
   29c8c:	4a0d      	ldr	r2, [pc, #52]	; (29cc4 <system_apb_clock_set_mask+0x58>)
   29c8e:	6991      	ldr	r1, [r2, #24]
   29c90:	683a      	ldr	r2, [r7, #0]
   29c92:	430a      	orrs	r2, r1
   29c94:	619a      	str	r2, [r3, #24]
			break;
   29c96:	e00f      	b.n	29cb8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29c98:	4b0a      	ldr	r3, [pc, #40]	; (29cc4 <system_apb_clock_set_mask+0x58>)
   29c9a:	4a0a      	ldr	r2, [pc, #40]	; (29cc4 <system_apb_clock_set_mask+0x58>)
   29c9c:	69d1      	ldr	r1, [r2, #28]
   29c9e:	683a      	ldr	r2, [r7, #0]
   29ca0:	430a      	orrs	r2, r1
   29ca2:	61da      	str	r2, [r3, #28]
			break;
   29ca4:	e008      	b.n	29cb8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29ca6:	4b07      	ldr	r3, [pc, #28]	; (29cc4 <system_apb_clock_set_mask+0x58>)
   29ca8:	4a06      	ldr	r2, [pc, #24]	; (29cc4 <system_apb_clock_set_mask+0x58>)
   29caa:	6a11      	ldr	r1, [r2, #32]
   29cac:	683a      	ldr	r2, [r7, #0]
   29cae:	430a      	orrs	r2, r1
   29cb0:	621a      	str	r2, [r3, #32]
			break;
   29cb2:	e001      	b.n	29cb8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29cb4:	2317      	movs	r3, #23
   29cb6:	e000      	b.n	29cba <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29cb8:	2300      	movs	r3, #0
}
   29cba:	0018      	movs	r0, r3
   29cbc:	46bd      	mov	sp, r7
   29cbe:	b002      	add	sp, #8
   29cc0:	bd80      	pop	{r7, pc}
   29cc2:	46c0      	nop			; (mov r8, r8)
   29cc4:	40000400 	.word	0x40000400

00029cc8 <system_pinmux_get_config_defaults>:
{
   29cc8:	b580      	push	{r7, lr}
   29cca:	b082      	sub	sp, #8
   29ccc:	af00      	add	r7, sp, #0
   29cce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   29cd0:	687b      	ldr	r3, [r7, #4]
   29cd2:	2280      	movs	r2, #128	; 0x80
   29cd4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29cd6:	687b      	ldr	r3, [r7, #4]
   29cd8:	2200      	movs	r2, #0
   29cda:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29cdc:	687b      	ldr	r3, [r7, #4]
   29cde:	2201      	movs	r2, #1
   29ce0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   29ce2:	687b      	ldr	r3, [r7, #4]
   29ce4:	2200      	movs	r2, #0
   29ce6:	70da      	strb	r2, [r3, #3]
}
   29ce8:	46c0      	nop			; (mov r8, r8)
   29cea:	46bd      	mov	sp, r7
   29cec:	b002      	add	sp, #8
   29cee:	bd80      	pop	{r7, pc}

00029cf0 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   29cf0:	b580      	push	{r7, lr}
   29cf2:	b084      	sub	sp, #16
   29cf4:	af00      	add	r7, sp, #0
   29cf6:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29cf8:	2300      	movs	r3, #0
   29cfa:	60fb      	str	r3, [r7, #12]
   29cfc:	e00c      	b.n	29d18 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   29cfe:	4b0a      	ldr	r3, [pc, #40]	; (29d28 <_tcc_get_inst_index+0x38>)
   29d00:	68fa      	ldr	r2, [r7, #12]
   29d02:	0092      	lsls	r2, r2, #2
   29d04:	58d2      	ldr	r2, [r2, r3]
   29d06:	687b      	ldr	r3, [r7, #4]
   29d08:	429a      	cmp	r2, r3
   29d0a:	d102      	bne.n	29d12 <_tcc_get_inst_index+0x22>
			return i;
   29d0c:	68fb      	ldr	r3, [r7, #12]
   29d0e:	b2db      	uxtb	r3, r3
   29d10:	e006      	b.n	29d20 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   29d12:	68fb      	ldr	r3, [r7, #12]
   29d14:	3301      	adds	r3, #1
   29d16:	60fb      	str	r3, [r7, #12]
   29d18:	68fb      	ldr	r3, [r7, #12]
   29d1a:	2b02      	cmp	r3, #2
   29d1c:	d9ef      	bls.n	29cfe <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   29d1e:	2300      	movs	r3, #0
}
   29d20:	0018      	movs	r0, r3
   29d22:	46bd      	mov	sp, r7
   29d24:	b004      	add	sp, #16
   29d26:	bd80      	pop	{r7, pc}
   29d28:	00038d88 	.word	0x00038d88

00029d2c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   29d2c:	b590      	push	{r4, r7, lr}
   29d2e:	b085      	sub	sp, #20
   29d30:	af00      	add	r7, sp, #0
   29d32:	6078      	str	r0, [r7, #4]
   29d34:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   29d36:	230f      	movs	r3, #15
   29d38:	18fc      	adds	r4, r7, r3
   29d3a:	683b      	ldr	r3, [r7, #0]
   29d3c:	0018      	movs	r0, r3
   29d3e:	4bad      	ldr	r3, [pc, #692]	; (29ff4 <tcc_get_config_defaults+0x2c8>)
   29d40:	4798      	blx	r3
   29d42:	0003      	movs	r3, r0
   29d44:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   29d46:	687b      	ldr	r3, [r7, #4]
   29d48:	2200      	movs	r2, #0
   29d4a:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   29d4c:	230f      	movs	r3, #15
   29d4e:	18fb      	adds	r3, r7, r3
   29d50:	781a      	ldrb	r2, [r3, #0]
   29d52:	4ba9      	ldr	r3, [pc, #676]	; (29ff8 <tcc_get_config_defaults+0x2cc>)
   29d54:	0092      	lsls	r2, r2, #2
   29d56:	58d2      	ldr	r2, [r2, r3]
   29d58:	687b      	ldr	r3, [r7, #4]
   29d5a:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   29d5c:	687b      	ldr	r3, [r7, #4]
   29d5e:	2200      	movs	r2, #0
   29d60:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   29d62:	687b      	ldr	r3, [r7, #4]
   29d64:	2200      	movs	r2, #0
   29d66:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   29d68:	687b      	ldr	r3, [r7, #4]
   29d6a:	2200      	movs	r2, #0
   29d6c:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   29d6e:	687b      	ldr	r3, [r7, #4]
   29d70:	2200      	movs	r2, #0
   29d72:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   29d74:	687b      	ldr	r3, [r7, #4]
   29d76:	2200      	movs	r2, #0
   29d78:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29d7a:	687b      	ldr	r3, [r7, #4]
   29d7c:	2200      	movs	r2, #0
   29d7e:	61da      	str	r2, [r3, #28]
   29d80:	687b      	ldr	r3, [r7, #4]
   29d82:	2200      	movs	r2, #0
   29d84:	621a      	str	r2, [r3, #32]
   29d86:	687b      	ldr	r3, [r7, #4]
   29d88:	2200      	movs	r2, #0
   29d8a:	625a      	str	r2, [r3, #36]	; 0x24
   29d8c:	687b      	ldr	r3, [r7, #4]
   29d8e:	2200      	movs	r2, #0
   29d90:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29d92:	687b      	ldr	r3, [r7, #4]
   29d94:	2200      	movs	r2, #0
   29d96:	751a      	strb	r2, [r3, #20]
   29d98:	687b      	ldr	r3, [r7, #4]
   29d9a:	2200      	movs	r2, #0
   29d9c:	755a      	strb	r2, [r3, #21]
   29d9e:	687b      	ldr	r3, [r7, #4]
   29da0:	2200      	movs	r2, #0
   29da2:	759a      	strb	r2, [r3, #22]
   29da4:	687b      	ldr	r3, [r7, #4]
   29da6:	2200      	movs	r2, #0
   29da8:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   29daa:	687b      	ldr	r3, [r7, #4]
   29dac:	2200      	movs	r2, #0
   29dae:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   29db0:	687b      	ldr	r3, [r7, #4]
   29db2:	2200      	movs	r2, #0
   29db4:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   29db6:	687b      	ldr	r3, [r7, #4]
   29db8:	2200      	movs	r2, #0
   29dba:	741a      	strb	r2, [r3, #16]
   29dbc:	687b      	ldr	r3, [r7, #4]
   29dbe:	2200      	movs	r2, #0
   29dc0:	745a      	strb	r2, [r3, #17]
   29dc2:	687b      	ldr	r3, [r7, #4]
   29dc4:	2200      	movs	r2, #0
   29dc6:	749a      	strb	r2, [r3, #18]
   29dc8:	687b      	ldr	r3, [r7, #4]
   29dca:	2200      	movs	r2, #0
   29dcc:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   29dce:	687b      	ldr	r3, [r7, #4]
   29dd0:	222c      	movs	r2, #44	; 0x2c
   29dd2:	2100      	movs	r1, #0
   29dd4:	5499      	strb	r1, [r3, r2]
   29dd6:	687b      	ldr	r3, [r7, #4]
   29dd8:	222d      	movs	r2, #45	; 0x2d
   29dda:	2100      	movs	r1, #0
   29ddc:	5499      	strb	r1, [r3, r2]
   29dde:	687b      	ldr	r3, [r7, #4]
   29de0:	222e      	movs	r2, #46	; 0x2e
   29de2:	2100      	movs	r1, #0
   29de4:	5499      	strb	r1, [r3, r2]
   29de6:	687b      	ldr	r3, [r7, #4]
   29de8:	222f      	movs	r2, #47	; 0x2f
   29dea:	2100      	movs	r1, #0
   29dec:	5499      	strb	r1, [r3, r2]
   29dee:	687b      	ldr	r3, [r7, #4]
   29df0:	2230      	movs	r2, #48	; 0x30
   29df2:	2100      	movs	r1, #0
   29df4:	5499      	strb	r1, [r3, r2]
   29df6:	687b      	ldr	r3, [r7, #4]
   29df8:	2231      	movs	r2, #49	; 0x31
   29dfa:	2100      	movs	r1, #0
   29dfc:	5499      	strb	r1, [r3, r2]
   29dfe:	687b      	ldr	r3, [r7, #4]
   29e00:	2232      	movs	r2, #50	; 0x32
   29e02:	2100      	movs	r1, #0
   29e04:	5499      	strb	r1, [r3, r2]
   29e06:	687b      	ldr	r3, [r7, #4]
   29e08:	2233      	movs	r2, #51	; 0x33
   29e0a:	2100      	movs	r1, #0
   29e0c:	5499      	strb	r1, [r3, r2]
   29e0e:	687b      	ldr	r3, [r7, #4]
   29e10:	2234      	movs	r2, #52	; 0x34
   29e12:	2100      	movs	r1, #0
   29e14:	5499      	strb	r1, [r3, r2]
   29e16:	687b      	ldr	r3, [r7, #4]
   29e18:	2235      	movs	r2, #53	; 0x35
   29e1a:	2100      	movs	r1, #0
   29e1c:	5499      	strb	r1, [r3, r2]
   29e1e:	687b      	ldr	r3, [r7, #4]
   29e20:	2236      	movs	r2, #54	; 0x36
   29e22:	2100      	movs	r1, #0
   29e24:	5499      	strb	r1, [r3, r2]
   29e26:	687b      	ldr	r3, [r7, #4]
   29e28:	2237      	movs	r2, #55	; 0x37
   29e2a:	2100      	movs	r1, #0
   29e2c:	5499      	strb	r1, [r3, r2]
   29e2e:	687b      	ldr	r3, [r7, #4]
   29e30:	2238      	movs	r2, #56	; 0x38
   29e32:	2100      	movs	r1, #0
   29e34:	5499      	strb	r1, [r3, r2]
   29e36:	687b      	ldr	r3, [r7, #4]
   29e38:	2239      	movs	r2, #57	; 0x39
   29e3a:	2100      	movs	r1, #0
   29e3c:	5499      	strb	r1, [r3, r2]
   29e3e:	687b      	ldr	r3, [r7, #4]
   29e40:	223a      	movs	r2, #58	; 0x3a
   29e42:	2100      	movs	r1, #0
   29e44:	5499      	strb	r1, [r3, r2]
   29e46:	687b      	ldr	r3, [r7, #4]
   29e48:	223b      	movs	r2, #59	; 0x3b
   29e4a:	2100      	movs	r1, #0
   29e4c:	5499      	strb	r1, [r3, r2]
   29e4e:	687b      	ldr	r3, [r7, #4]
   29e50:	223c      	movs	r2, #60	; 0x3c
   29e52:	2100      	movs	r1, #0
   29e54:	5499      	strb	r1, [r3, r2]
   29e56:	687b      	ldr	r3, [r7, #4]
   29e58:	223d      	movs	r2, #61	; 0x3d
   29e5a:	2100      	movs	r1, #0
   29e5c:	5499      	strb	r1, [r3, r2]
   29e5e:	687b      	ldr	r3, [r7, #4]
   29e60:	223e      	movs	r2, #62	; 0x3e
   29e62:	2100      	movs	r1, #0
   29e64:	5499      	strb	r1, [r3, r2]
   29e66:	687b      	ldr	r3, [r7, #4]
   29e68:	223f      	movs	r2, #63	; 0x3f
   29e6a:	2100      	movs	r1, #0
   29e6c:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   29e6e:	687b      	ldr	r3, [r7, #4]
   29e70:	2240      	movs	r2, #64	; 0x40
   29e72:	2100      	movs	r1, #0
   29e74:	5499      	strb	r1, [r3, r2]
   29e76:	687b      	ldr	r3, [r7, #4]
   29e78:	2241      	movs	r2, #65	; 0x41
   29e7a:	2100      	movs	r1, #0
   29e7c:	5499      	strb	r1, [r3, r2]
   29e7e:	687b      	ldr	r3, [r7, #4]
   29e80:	2242      	movs	r2, #66	; 0x42
   29e82:	2100      	movs	r1, #0
   29e84:	5499      	strb	r1, [r3, r2]
   29e86:	687b      	ldr	r3, [r7, #4]
   29e88:	2243      	movs	r2, #67	; 0x43
   29e8a:	2100      	movs	r1, #0
   29e8c:	5499      	strb	r1, [r3, r2]
   29e8e:	687b      	ldr	r3, [r7, #4]
   29e90:	2244      	movs	r2, #68	; 0x44
   29e92:	2100      	movs	r1, #0
   29e94:	5499      	strb	r1, [r3, r2]
   29e96:	687b      	ldr	r3, [r7, #4]
   29e98:	2245      	movs	r2, #69	; 0x45
   29e9a:	2100      	movs	r1, #0
   29e9c:	5499      	strb	r1, [r3, r2]
   29e9e:	687b      	ldr	r3, [r7, #4]
   29ea0:	2246      	movs	r2, #70	; 0x46
   29ea2:	2100      	movs	r1, #0
   29ea4:	5499      	strb	r1, [r3, r2]
   29ea6:	687b      	ldr	r3, [r7, #4]
   29ea8:	2247      	movs	r2, #71	; 0x47
   29eaa:	2100      	movs	r1, #0
   29eac:	5499      	strb	r1, [r3, r2]
   29eae:	687b      	ldr	r3, [r7, #4]
   29eb0:	2248      	movs	r2, #72	; 0x48
   29eb2:	2100      	movs	r1, #0
   29eb4:	5499      	strb	r1, [r3, r2]
   29eb6:	687b      	ldr	r3, [r7, #4]
   29eb8:	2249      	movs	r2, #73	; 0x49
   29eba:	2100      	movs	r1, #0
   29ebc:	5499      	strb	r1, [r3, r2]
   29ebe:	687b      	ldr	r3, [r7, #4]
   29ec0:	224a      	movs	r2, #74	; 0x4a
   29ec2:	2100      	movs	r1, #0
   29ec4:	5499      	strb	r1, [r3, r2]
   29ec6:	687b      	ldr	r3, [r7, #4]
   29ec8:	224b      	movs	r2, #75	; 0x4b
   29eca:	2100      	movs	r1, #0
   29ecc:	5499      	strb	r1, [r3, r2]
   29ece:	687b      	ldr	r3, [r7, #4]
   29ed0:	224c      	movs	r2, #76	; 0x4c
   29ed2:	2100      	movs	r1, #0
   29ed4:	5499      	strb	r1, [r3, r2]
   29ed6:	687b      	ldr	r3, [r7, #4]
   29ed8:	224d      	movs	r2, #77	; 0x4d
   29eda:	2100      	movs	r1, #0
   29edc:	5499      	strb	r1, [r3, r2]
   29ede:	687b      	ldr	r3, [r7, #4]
   29ee0:	224e      	movs	r2, #78	; 0x4e
   29ee2:	2100      	movs	r1, #0
   29ee4:	5499      	strb	r1, [r3, r2]
   29ee6:	687b      	ldr	r3, [r7, #4]
   29ee8:	224f      	movs	r2, #79	; 0x4f
   29eea:	2100      	movs	r1, #0
   29eec:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   29eee:	687b      	ldr	r3, [r7, #4]
   29ef0:	2250      	movs	r2, #80	; 0x50
   29ef2:	2100      	movs	r1, #0
   29ef4:	5499      	strb	r1, [r3, r2]
   29ef6:	687b      	ldr	r3, [r7, #4]
   29ef8:	2251      	movs	r2, #81	; 0x51
   29efa:	2100      	movs	r1, #0
   29efc:	5499      	strb	r1, [r3, r2]
   29efe:	687b      	ldr	r3, [r7, #4]
   29f00:	2252      	movs	r2, #82	; 0x52
   29f02:	2100      	movs	r1, #0
   29f04:	5499      	strb	r1, [r3, r2]
   29f06:	687b      	ldr	r3, [r7, #4]
   29f08:	2253      	movs	r2, #83	; 0x53
   29f0a:	2100      	movs	r1, #0
   29f0c:	5499      	strb	r1, [r3, r2]
   29f0e:	687b      	ldr	r3, [r7, #4]
   29f10:	2254      	movs	r2, #84	; 0x54
   29f12:	2100      	movs	r1, #0
   29f14:	5499      	strb	r1, [r3, r2]
   29f16:	687b      	ldr	r3, [r7, #4]
   29f18:	2255      	movs	r2, #85	; 0x55
   29f1a:	2100      	movs	r1, #0
   29f1c:	5499      	strb	r1, [r3, r2]
   29f1e:	687b      	ldr	r3, [r7, #4]
   29f20:	2256      	movs	r2, #86	; 0x56
   29f22:	2100      	movs	r1, #0
   29f24:	5499      	strb	r1, [r3, r2]
   29f26:	687b      	ldr	r3, [r7, #4]
   29f28:	2257      	movs	r2, #87	; 0x57
   29f2a:	2100      	movs	r1, #0
   29f2c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   29f2e:	687b      	ldr	r3, [r7, #4]
   29f30:	2298      	movs	r2, #152	; 0x98
   29f32:	2100      	movs	r1, #0
   29f34:	5499      	strb	r1, [r3, r2]
   29f36:	687b      	ldr	r3, [r7, #4]
   29f38:	2200      	movs	r2, #0
   29f3a:	659a      	str	r2, [r3, #88]	; 0x58
   29f3c:	687b      	ldr	r3, [r7, #4]
   29f3e:	2200      	movs	r2, #0
   29f40:	679a      	str	r2, [r3, #120]	; 0x78
   29f42:	687b      	ldr	r3, [r7, #4]
   29f44:	2299      	movs	r2, #153	; 0x99
   29f46:	2100      	movs	r1, #0
   29f48:	5499      	strb	r1, [r3, r2]
   29f4a:	687b      	ldr	r3, [r7, #4]
   29f4c:	2200      	movs	r2, #0
   29f4e:	65da      	str	r2, [r3, #92]	; 0x5c
   29f50:	687b      	ldr	r3, [r7, #4]
   29f52:	2200      	movs	r2, #0
   29f54:	67da      	str	r2, [r3, #124]	; 0x7c
   29f56:	687b      	ldr	r3, [r7, #4]
   29f58:	229a      	movs	r2, #154	; 0x9a
   29f5a:	2100      	movs	r1, #0
   29f5c:	5499      	strb	r1, [r3, r2]
   29f5e:	687b      	ldr	r3, [r7, #4]
   29f60:	2200      	movs	r2, #0
   29f62:	661a      	str	r2, [r3, #96]	; 0x60
   29f64:	687b      	ldr	r3, [r7, #4]
   29f66:	2280      	movs	r2, #128	; 0x80
   29f68:	2100      	movs	r1, #0
   29f6a:	5099      	str	r1, [r3, r2]
   29f6c:	687b      	ldr	r3, [r7, #4]
   29f6e:	229b      	movs	r2, #155	; 0x9b
   29f70:	2100      	movs	r1, #0
   29f72:	5499      	strb	r1, [r3, r2]
   29f74:	687b      	ldr	r3, [r7, #4]
   29f76:	2200      	movs	r2, #0
   29f78:	665a      	str	r2, [r3, #100]	; 0x64
   29f7a:	687b      	ldr	r3, [r7, #4]
   29f7c:	2284      	movs	r2, #132	; 0x84
   29f7e:	2100      	movs	r1, #0
   29f80:	5099      	str	r1, [r3, r2]
   29f82:	687b      	ldr	r3, [r7, #4]
   29f84:	229c      	movs	r2, #156	; 0x9c
   29f86:	2100      	movs	r1, #0
   29f88:	5499      	strb	r1, [r3, r2]
   29f8a:	687b      	ldr	r3, [r7, #4]
   29f8c:	2200      	movs	r2, #0
   29f8e:	669a      	str	r2, [r3, #104]	; 0x68
   29f90:	687b      	ldr	r3, [r7, #4]
   29f92:	2288      	movs	r2, #136	; 0x88
   29f94:	2100      	movs	r1, #0
   29f96:	5099      	str	r1, [r3, r2]
   29f98:	687b      	ldr	r3, [r7, #4]
   29f9a:	229d      	movs	r2, #157	; 0x9d
   29f9c:	2100      	movs	r1, #0
   29f9e:	5499      	strb	r1, [r3, r2]
   29fa0:	687b      	ldr	r3, [r7, #4]
   29fa2:	2200      	movs	r2, #0
   29fa4:	66da      	str	r2, [r3, #108]	; 0x6c
   29fa6:	687b      	ldr	r3, [r7, #4]
   29fa8:	228c      	movs	r2, #140	; 0x8c
   29faa:	2100      	movs	r1, #0
   29fac:	5099      	str	r1, [r3, r2]
   29fae:	687b      	ldr	r3, [r7, #4]
   29fb0:	229e      	movs	r2, #158	; 0x9e
   29fb2:	2100      	movs	r1, #0
   29fb4:	5499      	strb	r1, [r3, r2]
   29fb6:	687b      	ldr	r3, [r7, #4]
   29fb8:	2200      	movs	r2, #0
   29fba:	671a      	str	r2, [r3, #112]	; 0x70
   29fbc:	687b      	ldr	r3, [r7, #4]
   29fbe:	2290      	movs	r2, #144	; 0x90
   29fc0:	2100      	movs	r1, #0
   29fc2:	5099      	str	r1, [r3, r2]
   29fc4:	687b      	ldr	r3, [r7, #4]
   29fc6:	229f      	movs	r2, #159	; 0x9f
   29fc8:	2100      	movs	r1, #0
   29fca:	5499      	strb	r1, [r3, r2]
   29fcc:	687b      	ldr	r3, [r7, #4]
   29fce:	2200      	movs	r2, #0
   29fd0:	675a      	str	r2, [r3, #116]	; 0x74
   29fd2:	687b      	ldr	r3, [r7, #4]
   29fd4:	2294      	movs	r2, #148	; 0x94
   29fd6:	2100      	movs	r1, #0
   29fd8:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   29fda:	687b      	ldr	r3, [r7, #4]
   29fdc:	22a0      	movs	r2, #160	; 0xa0
   29fde:	2101      	movs	r1, #1
   29fe0:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   29fe2:	687b      	ldr	r3, [r7, #4]
   29fe4:	22a1      	movs	r2, #161	; 0xa1
   29fe6:	2100      	movs	r1, #0
   29fe8:	5499      	strb	r1, [r3, r2]
}
   29fea:	46c0      	nop			; (mov r8, r8)
   29fec:	46bd      	mov	sp, r7
   29fee:	b005      	add	sp, #20
   29ff0:	bd90      	pop	{r4, r7, pc}
   29ff2:	46c0      	nop			; (mov r8, r8)
   29ff4:	00029cf1 	.word	0x00029cf1
   29ff8:	00038da4 	.word	0x00038da4

00029ffc <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29ffc:	b580      	push	{r7, lr}
   29ffe:	b086      	sub	sp, #24
   2a000:	af00      	add	r7, sp, #0
   2a002:	60b9      	str	r1, [r7, #8]
   2a004:	607a      	str	r2, [r7, #4]
   2a006:	230f      	movs	r3, #15
   2a008:	18fb      	adds	r3, r7, r3
   2a00a:	1c02      	adds	r2, r0, #0
   2a00c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2a00e:	2300      	movs	r3, #0
   2a010:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a012:	2300      	movs	r3, #0
   2a014:	613b      	str	r3, [r7, #16]
   2a016:	e01d      	b.n	2a054 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2a018:	68ba      	ldr	r2, [r7, #8]
   2a01a:	693b      	ldr	r3, [r7, #16]
   2a01c:	18d3      	adds	r3, r2, r3
   2a01e:	3310      	adds	r3, #16
   2a020:	781b      	ldrb	r3, [r3, #0]
   2a022:	2b01      	cmp	r3, #1
   2a024:	d113      	bne.n	2a04e <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2a026:	230f      	movs	r3, #15
   2a028:	18fb      	adds	r3, r7, r3
   2a02a:	781b      	ldrb	r3, [r3, #0]
   2a02c:	4a1b      	ldr	r2, [pc, #108]	; (2a09c <_tcc_build_ctrla+0xa0>)
   2a02e:	5cd3      	ldrb	r3, [r2, r3]
   2a030:	001a      	movs	r2, r3
   2a032:	693b      	ldr	r3, [r7, #16]
   2a034:	429a      	cmp	r2, r3
   2a036:	da01      	bge.n	2a03c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2a038:	2317      	movs	r3, #23
   2a03a:	e02a      	b.n	2a092 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2a03c:	2380      	movs	r3, #128	; 0x80
   2a03e:	045a      	lsls	r2, r3, #17
   2a040:	693b      	ldr	r3, [r7, #16]
   2a042:	409a      	lsls	r2, r3
   2a044:	0013      	movs	r3, r2
   2a046:	001a      	movs	r2, r3
   2a048:	697b      	ldr	r3, [r7, #20]
   2a04a:	4313      	orrs	r3, r2
   2a04c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a04e:	693b      	ldr	r3, [r7, #16]
   2a050:	3301      	adds	r3, #1
   2a052:	613b      	str	r3, [r7, #16]
   2a054:	693b      	ldr	r3, [r7, #16]
   2a056:	2b03      	cmp	r3, #3
   2a058:	ddde      	ble.n	2a018 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2a05a:	68bb      	ldr	r3, [r7, #8]
   2a05c:	22a1      	movs	r2, #161	; 0xa1
   2a05e:	5c9b      	ldrb	r3, [r3, r2]
   2a060:	2b00      	cmp	r3, #0
   2a062:	d004      	beq.n	2a06e <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2a064:	697b      	ldr	r3, [r7, #20]
   2a066:	2280      	movs	r2, #128	; 0x80
   2a068:	0112      	lsls	r2, r2, #4
   2a06a:	4313      	orrs	r3, r2
   2a06c:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2a06e:	68bb      	ldr	r3, [r7, #8]
   2a070:	7b1b      	ldrb	r3, [r3, #12]
   2a072:	031b      	lsls	r3, r3, #12
   2a074:	001a      	movs	r2, r3
   2a076:	697b      	ldr	r3, [r7, #20]
   2a078:	4313      	orrs	r3, r2
   2a07a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2a07c:	68bb      	ldr	r3, [r7, #8]
   2a07e:	7adb      	ldrb	r3, [r3, #11]
   2a080:	021b      	lsls	r3, r3, #8
   2a082:	001a      	movs	r2, r3
   2a084:	697b      	ldr	r3, [r7, #20]
   2a086:	4313      	orrs	r3, r2
   2a088:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2a08a:	687b      	ldr	r3, [r7, #4]
   2a08c:	697a      	ldr	r2, [r7, #20]
   2a08e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a090:	2300      	movs	r3, #0
}
   2a092:	0018      	movs	r0, r3
   2a094:	46bd      	mov	sp, r7
   2a096:	b006      	add	sp, #24
   2a098:	bd80      	pop	{r7, pc}
   2a09a:	46c0      	nop			; (mov r8, r8)
   2a09c:	00038db0 	.word	0x00038db0

0002a0a0 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2a0a0:	b580      	push	{r7, lr}
   2a0a2:	b086      	sub	sp, #24
   2a0a4:	af00      	add	r7, sp, #0
   2a0a6:	60b9      	str	r1, [r7, #8]
   2a0a8:	607a      	str	r2, [r7, #4]
   2a0aa:	230f      	movs	r3, #15
   2a0ac:	18fb      	adds	r3, r7, r3
   2a0ae:	1c02      	adds	r2, r0, #0
   2a0b0:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2a0b2:	2317      	movs	r3, #23
   2a0b4:	18fb      	adds	r3, r7, r3
   2a0b6:	2200      	movs	r2, #0
   2a0b8:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2a0ba:	68bb      	ldr	r3, [r7, #8]
   2a0bc:	7a1b      	ldrb	r3, [r3, #8]
   2a0be:	2b00      	cmp	r3, #0
   2a0c0:	d007      	beq.n	2a0d2 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2a0c2:	2317      	movs	r3, #23
   2a0c4:	18fb      	adds	r3, r7, r3
   2a0c6:	2217      	movs	r2, #23
   2a0c8:	18ba      	adds	r2, r7, r2
   2a0ca:	7812      	ldrb	r2, [r2, #0]
   2a0cc:	2104      	movs	r1, #4
   2a0ce:	430a      	orrs	r2, r1
   2a0d0:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2a0d2:	68bb      	ldr	r3, [r7, #8]
   2a0d4:	7a5b      	ldrb	r3, [r3, #9]
   2a0d6:	2b01      	cmp	r3, #1
   2a0d8:	d107      	bne.n	2a0ea <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2a0da:	2317      	movs	r3, #23
   2a0dc:	18fb      	adds	r3, r7, r3
   2a0de:	2217      	movs	r2, #23
   2a0e0:	18ba      	adds	r2, r7, r2
   2a0e2:	7812      	ldrb	r2, [r2, #0]
   2a0e4:	2101      	movs	r1, #1
   2a0e6:	430a      	orrs	r2, r1
   2a0e8:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2a0ea:	687b      	ldr	r3, [r7, #4]
   2a0ec:	2217      	movs	r2, #23
   2a0ee:	18ba      	adds	r2, r7, r2
   2a0f0:	7812      	ldrb	r2, [r2, #0]
   2a0f2:	701a      	strb	r2, [r3, #0]
}
   2a0f4:	46c0      	nop			; (mov r8, r8)
   2a0f6:	46bd      	mov	sp, r7
   2a0f8:	b006      	add	sp, #24
   2a0fa:	bd80      	pop	{r7, pc}

0002a0fc <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a0fc:	b580      	push	{r7, lr}
   2a0fe:	b088      	sub	sp, #32
   2a100:	af00      	add	r7, sp, #0
   2a102:	60b9      	str	r1, [r7, #8]
   2a104:	607a      	str	r2, [r7, #4]
   2a106:	230f      	movs	r3, #15
   2a108:	18fb      	adds	r3, r7, r3
   2a10a:	1c02      	adds	r2, r0, #0
   2a10c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a10e:	230f      	movs	r3, #15
   2a110:	18fb      	adds	r3, r7, r3
   2a112:	781a      	ldrb	r2, [r3, #0]
   2a114:	231b      	movs	r3, #27
   2a116:	18fb      	adds	r3, r7, r3
   2a118:	493e      	ldr	r1, [pc, #248]	; (2a214 <_tcc_build_faults+0x118>)
   2a11a:	5c8a      	ldrb	r2, [r1, r2]
   2a11c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a11e:	2300      	movs	r3, #0
   2a120:	61fb      	str	r3, [r7, #28]
   2a122:	e06e      	b.n	2a202 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2a124:	69fa      	ldr	r2, [r7, #28]
   2a126:	0013      	movs	r3, r2
   2a128:	009b      	lsls	r3, r3, #2
   2a12a:	189b      	adds	r3, r3, r2
   2a12c:	005b      	lsls	r3, r3, #1
   2a12e:	3328      	adds	r3, #40	; 0x28
   2a130:	68ba      	ldr	r2, [r7, #8]
   2a132:	18d3      	adds	r3, r2, r3
   2a134:	3304      	adds	r3, #4
   2a136:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2a138:	697b      	ldr	r3, [r7, #20]
   2a13a:	7a5b      	ldrb	r3, [r3, #9]
   2a13c:	221b      	movs	r2, #27
   2a13e:	18ba      	adds	r2, r7, r2
   2a140:	7812      	ldrb	r2, [r2, #0]
   2a142:	429a      	cmp	r2, r3
   2a144:	d801      	bhi.n	2a14a <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2a146:	2317      	movs	r3, #23
   2a148:	e05f      	b.n	2a20a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2a14a:	697b      	ldr	r3, [r7, #20]
   2a14c:	781b      	ldrb	r3, [r3, #0]
   2a14e:	2b0f      	cmp	r3, #15
   2a150:	d901      	bls.n	2a156 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2a152:	2317      	movs	r3, #23
   2a154:	e059      	b.n	2a20a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a156:	697b      	ldr	r3, [r7, #20]
   2a158:	781b      	ldrb	r3, [r3, #0]
   2a15a:	061b      	lsls	r3, r3, #24
   2a15c:	001a      	movs	r2, r3
   2a15e:	23f0      	movs	r3, #240	; 0xf0
   2a160:	051b      	lsls	r3, r3, #20
   2a162:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2a164:	697b      	ldr	r3, [r7, #20]
   2a166:	785b      	ldrb	r3, [r3, #1]
   2a168:	041b      	lsls	r3, r3, #16
   2a16a:	0019      	movs	r1, r3
   2a16c:	23ff      	movs	r3, #255	; 0xff
   2a16e:	041b      	lsls	r3, r3, #16
   2a170:	400b      	ands	r3, r1
   2a172:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2a174:	697b      	ldr	r3, [r7, #20]
   2a176:	789b      	ldrb	r3, [r3, #2]
   2a178:	2b00      	cmp	r3, #0
   2a17a:	d001      	beq.n	2a180 <_tcc_build_faults+0x84>
   2a17c:	2380      	movs	r3, #128	; 0x80
   2a17e:	e000      	b.n	2a182 <_tcc_build_faults+0x86>
   2a180:	2300      	movs	r3, #0
   2a182:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2a184:	697b      	ldr	r3, [r7, #20]
   2a186:	78db      	ldrb	r3, [r3, #3]
   2a188:	2b00      	cmp	r3, #0
   2a18a:	d001      	beq.n	2a190 <_tcc_build_faults+0x94>
   2a18c:	2308      	movs	r3, #8
   2a18e:	e000      	b.n	2a192 <_tcc_build_faults+0x96>
   2a190:	2300      	movs	r3, #0
   2a192:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2a194:	697b      	ldr	r3, [r7, #20]
   2a196:	791b      	ldrb	r3, [r3, #4]
   2a198:	2b00      	cmp	r3, #0
   2a19a:	d001      	beq.n	2a1a0 <_tcc_build_faults+0xa4>
   2a19c:	2310      	movs	r3, #16
   2a19e:	e000      	b.n	2a1a2 <_tcc_build_faults+0xa6>
   2a1a0:	2300      	movs	r3, #0
   2a1a2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2a1a4:	697b      	ldr	r3, [r7, #20]
   2a1a6:	795b      	ldrb	r3, [r3, #5]
   2a1a8:	0019      	movs	r1, r3
   2a1aa:	2303      	movs	r3, #3
   2a1ac:	400b      	ands	r3, r1
   2a1ae:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2a1b0:	697b      	ldr	r3, [r7, #20]
   2a1b2:	799b      	ldrb	r3, [r3, #6]
   2a1b4:	015b      	lsls	r3, r3, #5
   2a1b6:	0019      	movs	r1, r3
   2a1b8:	2360      	movs	r3, #96	; 0x60
   2a1ba:	400b      	ands	r3, r1
   2a1bc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2a1be:	697b      	ldr	r3, [r7, #20]
   2a1c0:	79db      	ldrb	r3, [r3, #7]
   2a1c2:	021b      	lsls	r3, r3, #8
   2a1c4:	0019      	movs	r1, r3
   2a1c6:	23c0      	movs	r3, #192	; 0xc0
   2a1c8:	009b      	lsls	r3, r3, #2
   2a1ca:	400b      	ands	r3, r1
   2a1cc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2a1ce:	697b      	ldr	r3, [r7, #20]
   2a1d0:	7a1b      	ldrb	r3, [r3, #8]
   2a1d2:	031b      	lsls	r3, r3, #12
   2a1d4:	0019      	movs	r1, r3
   2a1d6:	23e0      	movs	r3, #224	; 0xe0
   2a1d8:	01db      	lsls	r3, r3, #7
   2a1da:	400b      	ands	r3, r1
   2a1dc:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2a1de:	697b      	ldr	r3, [r7, #20]
   2a1e0:	7a5b      	ldrb	r3, [r3, #9]
   2a1e2:	029b      	lsls	r3, r3, #10
   2a1e4:	0019      	movs	r1, r3
   2a1e6:	23c0      	movs	r3, #192	; 0xc0
   2a1e8:	011b      	lsls	r3, r3, #4
   2a1ea:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a1ec:	4313      	orrs	r3, r2
   2a1ee:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2a1f0:	69fb      	ldr	r3, [r7, #28]
   2a1f2:	009b      	lsls	r3, r3, #2
   2a1f4:	687a      	ldr	r2, [r7, #4]
   2a1f6:	18d3      	adds	r3, r2, r3
   2a1f8:	693a      	ldr	r2, [r7, #16]
   2a1fa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a1fc:	69fb      	ldr	r3, [r7, #28]
   2a1fe:	3301      	adds	r3, #1
   2a200:	61fb      	str	r3, [r7, #28]
   2a202:	69fb      	ldr	r3, [r7, #28]
   2a204:	2b01      	cmp	r3, #1
   2a206:	dd8d      	ble.n	2a124 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2a208:	2300      	movs	r3, #0
}
   2a20a:	0018      	movs	r0, r3
   2a20c:	46bd      	mov	sp, r7
   2a20e:	b008      	add	sp, #32
   2a210:	bd80      	pop	{r7, pc}
   2a212:	46c0      	nop			; (mov r8, r8)
   2a214:	00038db0 	.word	0x00038db0

0002a218 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a218:	b580      	push	{r7, lr}
   2a21a:	b088      	sub	sp, #32
   2a21c:	af00      	add	r7, sp, #0
   2a21e:	60b9      	str	r1, [r7, #8]
   2a220:	607a      	str	r2, [r7, #4]
   2a222:	230f      	movs	r3, #15
   2a224:	18fb      	adds	r3, r7, r3
   2a226:	1c02      	adds	r2, r0, #0
   2a228:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2a22a:	230f      	movs	r3, #15
   2a22c:	18fb      	adds	r3, r7, r3
   2a22e:	781a      	ldrb	r2, [r3, #0]
   2a230:	2317      	movs	r3, #23
   2a232:	18fb      	adds	r3, r7, r3
   2a234:	492d      	ldr	r1, [pc, #180]	; (2a2ec <_tcc_build_drvctrl+0xd4>)
   2a236:	5c8a      	ldrb	r2, [r1, r2]
   2a238:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2a23a:	2300      	movs	r3, #0
   2a23c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a23e:	2300      	movs	r3, #0
   2a240:	61fb      	str	r3, [r7, #28]
   2a242:	e048      	b.n	2a2d6 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2a244:	68ba      	ldr	r2, [r7, #8]
   2a246:	2150      	movs	r1, #80	; 0x50
   2a248:	69fb      	ldr	r3, [r7, #28]
   2a24a:	18d3      	adds	r3, r2, r3
   2a24c:	185b      	adds	r3, r3, r1
   2a24e:	781b      	ldrb	r3, [r3, #0]
   2a250:	2b00      	cmp	r3, #0
   2a252:	d010      	beq.n	2a276 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2a254:	2317      	movs	r3, #23
   2a256:	18fb      	adds	r3, r7, r3
   2a258:	781a      	ldrb	r2, [r3, #0]
   2a25a:	69fb      	ldr	r3, [r7, #28]
   2a25c:	429a      	cmp	r2, r3
   2a25e:	d801      	bhi.n	2a264 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2a260:	2317      	movs	r3, #23
   2a262:	e03f      	b.n	2a2e4 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2a264:	2380      	movs	r3, #128	; 0x80
   2a266:	025a      	lsls	r2, r3, #9
   2a268:	69fb      	ldr	r3, [r7, #28]
   2a26a:	409a      	lsls	r2, r3
   2a26c:	0013      	movs	r3, r2
   2a26e:	001a      	movs	r2, r3
   2a270:	69bb      	ldr	r3, [r7, #24]
   2a272:	4313      	orrs	r3, r2
   2a274:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2a276:	68ba      	ldr	r2, [r7, #8]
   2a278:	69fb      	ldr	r3, [r7, #28]
   2a27a:	331c      	adds	r3, #28
   2a27c:	005b      	lsls	r3, r3, #1
   2a27e:	18d3      	adds	r3, r2, r3
   2a280:	3309      	adds	r3, #9
   2a282:	781b      	ldrb	r3, [r3, #0]
   2a284:	2b00      	cmp	r3, #0
   2a286:	d023      	beq.n	2a2d0 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2a288:	2317      	movs	r3, #23
   2a28a:	18fb      	adds	r3, r7, r3
   2a28c:	781a      	ldrb	r2, [r3, #0]
   2a28e:	69fb      	ldr	r3, [r7, #28]
   2a290:	429a      	cmp	r2, r3
   2a292:	d801      	bhi.n	2a298 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2a294:	2317      	movs	r3, #23
   2a296:	e025      	b.n	2a2e4 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2a298:	68ba      	ldr	r2, [r7, #8]
   2a29a:	69fb      	ldr	r3, [r7, #28]
   2a29c:	331c      	adds	r3, #28
   2a29e:	005b      	lsls	r3, r3, #1
   2a2a0:	18d3      	adds	r3, r2, r3
   2a2a2:	3309      	adds	r3, #9
   2a2a4:	781b      	ldrb	r3, [r3, #0]
   2a2a6:	2b02      	cmp	r3, #2
   2a2a8:	d10a      	bne.n	2a2c0 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2a2aa:	2302      	movs	r3, #2
   2a2ac:	33ff      	adds	r3, #255	; 0xff
   2a2ae:	001a      	movs	r2, r3
   2a2b0:	69fb      	ldr	r3, [r7, #28]
   2a2b2:	409a      	lsls	r2, r3
   2a2b4:	0013      	movs	r3, r2
   2a2b6:	001a      	movs	r2, r3
   2a2b8:	69bb      	ldr	r3, [r7, #24]
   2a2ba:	4313      	orrs	r3, r2
   2a2bc:	61bb      	str	r3, [r7, #24]
   2a2be:	e007      	b.n	2a2d0 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2a2c0:	2201      	movs	r2, #1
   2a2c2:	69fb      	ldr	r3, [r7, #28]
   2a2c4:	409a      	lsls	r2, r3
   2a2c6:	0013      	movs	r3, r2
   2a2c8:	001a      	movs	r2, r3
   2a2ca:	69bb      	ldr	r3, [r7, #24]
   2a2cc:	4313      	orrs	r3, r2
   2a2ce:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a2d0:	69fb      	ldr	r3, [r7, #28]
   2a2d2:	3301      	adds	r3, #1
   2a2d4:	61fb      	str	r3, [r7, #28]
   2a2d6:	69fb      	ldr	r3, [r7, #28]
   2a2d8:	2b07      	cmp	r3, #7
   2a2da:	d9b3      	bls.n	2a244 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2a2dc:	687b      	ldr	r3, [r7, #4]
   2a2de:	69ba      	ldr	r2, [r7, #24]
   2a2e0:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a2e2:	2300      	movs	r3, #0
}
   2a2e4:	0018      	movs	r0, r3
   2a2e6:	46bd      	mov	sp, r7
   2a2e8:	b008      	add	sp, #32
   2a2ea:	bd80      	pop	{r7, pc}
   2a2ec:	00038db4 	.word	0x00038db4

0002a2f0 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a2f0:	b580      	push	{r7, lr}
   2a2f2:	b088      	sub	sp, #32
   2a2f4:	af00      	add	r7, sp, #0
   2a2f6:	60b9      	str	r1, [r7, #8]
   2a2f8:	607a      	str	r2, [r7, #4]
   2a2fa:	230f      	movs	r3, #15
   2a2fc:	18fb      	adds	r3, r7, r3
   2a2fe:	1c02      	adds	r2, r0, #0
   2a300:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a302:	230f      	movs	r3, #15
   2a304:	18fb      	adds	r3, r7, r3
   2a306:	781a      	ldrb	r2, [r3, #0]
   2a308:	2317      	movs	r3, #23
   2a30a:	18fb      	adds	r3, r7, r3
   2a30c:	491d      	ldr	r1, [pc, #116]	; (2a384 <_tcc_build_waves+0x94>)
   2a30e:	5c8a      	ldrb	r2, [r1, r2]
   2a310:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2a312:	68bb      	ldr	r3, [r7, #8]
   2a314:	3310      	adds	r3, #16
   2a316:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a318:	693b      	ldr	r3, [r7, #16]
   2a31a:	7a5b      	ldrb	r3, [r3, #9]
   2a31c:	011b      	lsls	r3, r3, #4
   2a31e:	001a      	movs	r2, r3
   2a320:	2330      	movs	r3, #48	; 0x30
   2a322:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2a324:	693b      	ldr	r3, [r7, #16]
   2a326:	7a1b      	ldrb	r3, [r3, #8]
   2a328:	0019      	movs	r1, r3
   2a32a:	2307      	movs	r3, #7
   2a32c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2a32e:	4313      	orrs	r3, r2
   2a330:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a332:	2300      	movs	r3, #0
   2a334:	61fb      	str	r3, [r7, #28]
   2a336:	e01a      	b.n	2a36e <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2a338:	693a      	ldr	r2, [r7, #16]
   2a33a:	69fb      	ldr	r3, [r7, #28]
   2a33c:	18d3      	adds	r3, r2, r3
   2a33e:	3304      	adds	r3, #4
   2a340:	781b      	ldrb	r3, [r3, #0]
   2a342:	2b00      	cmp	r3, #0
   2a344:	d010      	beq.n	2a368 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2a346:	2317      	movs	r3, #23
   2a348:	18fb      	adds	r3, r7, r3
   2a34a:	781a      	ldrb	r2, [r3, #0]
   2a34c:	69fb      	ldr	r3, [r7, #28]
   2a34e:	429a      	cmp	r2, r3
   2a350:	dc01      	bgt.n	2a356 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2a352:	2317      	movs	r3, #23
   2a354:	e012      	b.n	2a37c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2a356:	2380      	movs	r3, #128	; 0x80
   2a358:	025a      	lsls	r2, r3, #9
   2a35a:	69fb      	ldr	r3, [r7, #28]
   2a35c:	409a      	lsls	r2, r3
   2a35e:	0013      	movs	r3, r2
   2a360:	001a      	movs	r2, r3
   2a362:	69bb      	ldr	r3, [r7, #24]
   2a364:	4313      	orrs	r3, r2
   2a366:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2a368:	69fb      	ldr	r3, [r7, #28]
   2a36a:	3301      	adds	r3, #1
   2a36c:	61fb      	str	r3, [r7, #28]
   2a36e:	69fb      	ldr	r3, [r7, #28]
   2a370:	2b03      	cmp	r3, #3
   2a372:	dde1      	ble.n	2a338 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2a374:	687b      	ldr	r3, [r7, #4]
   2a376:	69ba      	ldr	r2, [r7, #24]
   2a378:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2a37a:	2300      	movs	r3, #0
}
   2a37c:	0018      	movs	r0, r3
   2a37e:	46bd      	mov	sp, r7
   2a380:	b008      	add	sp, #32
   2a382:	bd80      	pop	{r7, pc}
   2a384:	00038db0 	.word	0x00038db0

0002a388 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2a388:	b590      	push	{r4, r7, lr}
   2a38a:	b091      	sub	sp, #68	; 0x44
   2a38c:	af00      	add	r7, sp, #0
   2a38e:	60f8      	str	r0, [r7, #12]
   2a390:	60b9      	str	r1, [r7, #8]
   2a392:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a394:	233b      	movs	r3, #59	; 0x3b
   2a396:	18fc      	adds	r4, r7, r3
   2a398:	68bb      	ldr	r3, [r7, #8]
   2a39a:	0018      	movs	r0, r3
   2a39c:	4bc4      	ldr	r3, [pc, #784]	; (2a6b0 <tcc_init+0x328>)
   2a39e:	4798      	blx	r3
   2a3a0:	0003      	movs	r3, r0
   2a3a2:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2a3a4:	233b      	movs	r3, #59	; 0x3b
   2a3a6:	18fb      	adds	r3, r7, r3
   2a3a8:	781a      	ldrb	r2, [r3, #0]
   2a3aa:	4bc2      	ldr	r3, [pc, #776]	; (2a6b4 <tcc_init+0x32c>)
   2a3ac:	0092      	lsls	r2, r2, #2
   2a3ae:	58d3      	ldr	r3, [r2, r3]
   2a3b0:	0019      	movs	r1, r3
   2a3b2:	2002      	movs	r0, #2
   2a3b4:	4bc0      	ldr	r3, [pc, #768]	; (2a6b8 <tcc_init+0x330>)
   2a3b6:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2a3b8:	68bb      	ldr	r3, [r7, #8]
   2a3ba:	681b      	ldr	r3, [r3, #0]
   2a3bc:	2202      	movs	r2, #2
   2a3be:	4013      	ands	r3, r2
   2a3c0:	d001      	beq.n	2a3c6 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2a3c2:	231c      	movs	r3, #28
   2a3c4:	e1be      	b.n	2a744 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2a3c6:	68bb      	ldr	r3, [r7, #8]
   2a3c8:	681b      	ldr	r3, [r3, #0]
   2a3ca:	2201      	movs	r2, #1
   2a3cc:	4013      	ands	r3, r2
   2a3ce:	d001      	beq.n	2a3d4 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2a3d0:	231c      	movs	r3, #28
   2a3d2:	e1b7      	b.n	2a744 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2a3d4:	233b      	movs	r3, #59	; 0x3b
   2a3d6:	18fb      	adds	r3, r7, r3
   2a3d8:	781a      	ldrb	r2, [r3, #0]
   2a3da:	4bb8      	ldr	r3, [pc, #736]	; (2a6bc <tcc_init+0x334>)
   2a3dc:	0092      	lsls	r2, r2, #2
   2a3de:	58d3      	ldr	r3, [r2, r3]
   2a3e0:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2a3e2:	687b      	ldr	r3, [r7, #4]
   2a3e4:	681a      	ldr	r2, [r3, #0]
   2a3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a3e8:	429a      	cmp	r2, r3
   2a3ea:	d804      	bhi.n	2a3f6 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2a3ec:	687b      	ldr	r3, [r7, #4]
   2a3ee:	685a      	ldr	r2, [r3, #4]
   2a3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a3f2:	429a      	cmp	r2, r3
   2a3f4:	d901      	bls.n	2a3fa <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2a3f6:	2317      	movs	r3, #23
   2a3f8:	e1a4      	b.n	2a744 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a3fa:	2300      	movs	r3, #0
   2a3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a3fe:	e00e      	b.n	2a41e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2a400:	687a      	ldr	r2, [r7, #4]
   2a402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a404:	3306      	adds	r3, #6
   2a406:	009b      	lsls	r3, r3, #2
   2a408:	18d3      	adds	r3, r2, r3
   2a40a:	3304      	adds	r3, #4
   2a40c:	681a      	ldr	r2, [r3, #0]
   2a40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2a410:	429a      	cmp	r2, r3
   2a412:	d901      	bls.n	2a418 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2a414:	2317      	movs	r3, #23
   2a416:	e195      	b.n	2a744 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a41a:	3301      	adds	r3, #1
   2a41c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a41e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a420:	2b03      	cmp	r3, #3
   2a422:	dded      	ble.n	2a400 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a424:	2300      	movs	r3, #0
   2a426:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a428:	e019      	b.n	2a45e <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a42a:	687a      	ldr	r2, [r7, #4]
   2a42c:	2198      	movs	r1, #152	; 0x98
   2a42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a430:	18d3      	adds	r3, r2, r3
   2a432:	185b      	adds	r3, r3, r1
   2a434:	781b      	ldrb	r3, [r3, #0]
   2a436:	2201      	movs	r2, #1
   2a438:	4053      	eors	r3, r2
   2a43a:	b2db      	uxtb	r3, r3
   2a43c:	2b00      	cmp	r3, #0
   2a43e:	d10a      	bne.n	2a456 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2a440:	233b      	movs	r3, #59	; 0x3b
   2a442:	18fb      	adds	r3, r7, r3
   2a444:	781b      	ldrb	r3, [r3, #0]
   2a446:	4a9e      	ldr	r2, [pc, #632]	; (2a6c0 <tcc_init+0x338>)
   2a448:	5cd3      	ldrb	r3, [r2, r3]
   2a44a:	001a      	movs	r2, r3
   2a44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a44e:	429a      	cmp	r2, r3
   2a450:	dc02      	bgt.n	2a458 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2a452:	2317      	movs	r3, #23
   2a454:	e176      	b.n	2a744 <tcc_init+0x3bc>
			continue;
   2a456:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2a458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a45a:	3301      	adds	r3, #1
   2a45c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a460:	2b07      	cmp	r3, #7
   2a462:	dde2      	ble.n	2a42a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2a464:	2300      	movs	r3, #0
   2a466:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2a468:	2333      	movs	r3, #51	; 0x33
   2a46a:	18fc      	adds	r4, r7, r3
   2a46c:	232c      	movs	r3, #44	; 0x2c
   2a46e:	18fa      	adds	r2, r7, r3
   2a470:	6879      	ldr	r1, [r7, #4]
   2a472:	233b      	movs	r3, #59	; 0x3b
   2a474:	18fb      	adds	r3, r7, r3
   2a476:	781b      	ldrb	r3, [r3, #0]
   2a478:	0018      	movs	r0, r3
   2a47a:	4b92      	ldr	r3, [pc, #584]	; (2a6c4 <tcc_init+0x33c>)
   2a47c:	4798      	blx	r3
   2a47e:	0003      	movs	r3, r0
   2a480:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a482:	2333      	movs	r3, #51	; 0x33
   2a484:	18fb      	adds	r3, r7, r3
   2a486:	781b      	ldrb	r3, [r3, #0]
   2a488:	2b00      	cmp	r3, #0
   2a48a:	d003      	beq.n	2a494 <tcc_init+0x10c>
		return status;
   2a48c:	2333      	movs	r3, #51	; 0x33
   2a48e:	18fb      	adds	r3, r7, r3
   2a490:	781b      	ldrb	r3, [r3, #0]
   2a492:	e157      	b.n	2a744 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2a494:	232b      	movs	r3, #43	; 0x2b
   2a496:	18fa      	adds	r2, r7, r3
   2a498:	6879      	ldr	r1, [r7, #4]
   2a49a:	233b      	movs	r3, #59	; 0x3b
   2a49c:	18fb      	adds	r3, r7, r3
   2a49e:	781b      	ldrb	r3, [r3, #0]
   2a4a0:	0018      	movs	r0, r3
   2a4a2:	4b89      	ldr	r3, [pc, #548]	; (2a6c8 <tcc_init+0x340>)
   2a4a4:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2a4a6:	2333      	movs	r3, #51	; 0x33
   2a4a8:	18fc      	adds	r4, r7, r3
   2a4aa:	2320      	movs	r3, #32
   2a4ac:	18fa      	adds	r2, r7, r3
   2a4ae:	6879      	ldr	r1, [r7, #4]
   2a4b0:	233b      	movs	r3, #59	; 0x3b
   2a4b2:	18fb      	adds	r3, r7, r3
   2a4b4:	781b      	ldrb	r3, [r3, #0]
   2a4b6:	0018      	movs	r0, r3
   2a4b8:	4b84      	ldr	r3, [pc, #528]	; (2a6cc <tcc_init+0x344>)
   2a4ba:	4798      	blx	r3
   2a4bc:	0003      	movs	r3, r0
   2a4be:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a4c0:	2333      	movs	r3, #51	; 0x33
   2a4c2:	18fb      	adds	r3, r7, r3
   2a4c4:	781b      	ldrb	r3, [r3, #0]
   2a4c6:	2b00      	cmp	r3, #0
   2a4c8:	d003      	beq.n	2a4d2 <tcc_init+0x14a>
		return status;
   2a4ca:	2333      	movs	r3, #51	; 0x33
   2a4cc:	18fb      	adds	r3, r7, r3
   2a4ce:	781b      	ldrb	r3, [r3, #0]
   2a4d0:	e138      	b.n	2a744 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2a4d2:	2300      	movs	r3, #0
   2a4d4:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2a4d6:	2333      	movs	r3, #51	; 0x33
   2a4d8:	18fc      	adds	r4, r7, r3
   2a4da:	231c      	movs	r3, #28
   2a4dc:	18fa      	adds	r2, r7, r3
   2a4de:	6879      	ldr	r1, [r7, #4]
   2a4e0:	233b      	movs	r3, #59	; 0x3b
   2a4e2:	18fb      	adds	r3, r7, r3
   2a4e4:	781b      	ldrb	r3, [r3, #0]
   2a4e6:	0018      	movs	r0, r3
   2a4e8:	4b79      	ldr	r3, [pc, #484]	; (2a6d0 <tcc_init+0x348>)
   2a4ea:	4798      	blx	r3
   2a4ec:	0003      	movs	r3, r0
   2a4ee:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a4f0:	2333      	movs	r3, #51	; 0x33
   2a4f2:	18fb      	adds	r3, r7, r3
   2a4f4:	781b      	ldrb	r3, [r3, #0]
   2a4f6:	2b00      	cmp	r3, #0
   2a4f8:	d003      	beq.n	2a502 <tcc_init+0x17a>
		return status;
   2a4fa:	2333      	movs	r3, #51	; 0x33
   2a4fc:	18fb      	adds	r3, r7, r3
   2a4fe:	781b      	ldrb	r3, [r3, #0]
   2a500:	e120      	b.n	2a744 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2a502:	2333      	movs	r3, #51	; 0x33
   2a504:	18fc      	adds	r4, r7, r3
   2a506:	2318      	movs	r3, #24
   2a508:	18fa      	adds	r2, r7, r3
   2a50a:	6879      	ldr	r1, [r7, #4]
   2a50c:	233b      	movs	r3, #59	; 0x3b
   2a50e:	18fb      	adds	r3, r7, r3
   2a510:	781b      	ldrb	r3, [r3, #0]
   2a512:	0018      	movs	r0, r3
   2a514:	4b6f      	ldr	r3, [pc, #444]	; (2a6d4 <tcc_init+0x34c>)
   2a516:	4798      	blx	r3
   2a518:	0003      	movs	r3, r0
   2a51a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2a51c:	2333      	movs	r3, #51	; 0x33
   2a51e:	18fb      	adds	r3, r7, r3
   2a520:	781b      	ldrb	r3, [r3, #0]
   2a522:	2b00      	cmp	r3, #0
   2a524:	d003      	beq.n	2a52e <tcc_init+0x1a6>
		return status;
   2a526:	2333      	movs	r3, #51	; 0x33
   2a528:	18fb      	adds	r3, r7, r3
   2a52a:	781b      	ldrb	r3, [r3, #0]
   2a52c:	e10a      	b.n	2a744 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a52e:	2300      	movs	r3, #0
   2a530:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a532:	e009      	b.n	2a548 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2a534:	68fa      	ldr	r2, [r7, #12]
   2a536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a538:	009b      	lsls	r3, r3, #2
   2a53a:	18d3      	adds	r3, r2, r3
   2a53c:	3304      	adds	r3, #4
   2a53e:	2200      	movs	r2, #0
   2a540:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a544:	3301      	adds	r3, #1
   2a546:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a54a:	2b0b      	cmp	r3, #11
   2a54c:	ddf2      	ble.n	2a534 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2a54e:	68fb      	ldr	r3, [r7, #12]
   2a550:	2200      	movs	r2, #0
   2a552:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2a554:	68fb      	ldr	r3, [r7, #12]
   2a556:	2200      	movs	r2, #0
   2a558:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2a55a:	233b      	movs	r3, #59	; 0x3b
   2a55c:	18fb      	adds	r3, r7, r3
   2a55e:	781a      	ldrb	r2, [r3, #0]
   2a560:	4b5d      	ldr	r3, [pc, #372]	; (2a6d8 <tcc_init+0x350>)
   2a562:	0092      	lsls	r2, r2, #2
   2a564:	68f9      	ldr	r1, [r7, #12]
   2a566:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2a568:	68fb      	ldr	r3, [r7, #12]
   2a56a:	68ba      	ldr	r2, [r7, #8]
   2a56c:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2a56e:	687b      	ldr	r3, [r7, #4]
   2a570:	22a0      	movs	r2, #160	; 0xa0
   2a572:	5c99      	ldrb	r1, [r3, r2]
   2a574:	68fb      	ldr	r3, [r7, #12]
   2a576:	223c      	movs	r2, #60	; 0x3c
   2a578:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2a57a:	2314      	movs	r3, #20
   2a57c:	18fb      	adds	r3, r7, r3
   2a57e:	0018      	movs	r0, r3
   2a580:	4b56      	ldr	r3, [pc, #344]	; (2a6dc <tcc_init+0x354>)
   2a582:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2a584:	687b      	ldr	r3, [r7, #4]
   2a586:	7a9a      	ldrb	r2, [r3, #10]
   2a588:	2314      	movs	r3, #20
   2a58a:	18fb      	adds	r3, r7, r3
   2a58c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2a58e:	233b      	movs	r3, #59	; 0x3b
   2a590:	18fb      	adds	r3, r7, r3
   2a592:	781b      	ldrb	r3, [r3, #0]
   2a594:	4a52      	ldr	r2, [pc, #328]	; (2a6e0 <tcc_init+0x358>)
   2a596:	5cd3      	ldrb	r3, [r2, r3]
   2a598:	2214      	movs	r2, #20
   2a59a:	18ba      	adds	r2, r7, r2
   2a59c:	0011      	movs	r1, r2
   2a59e:	0018      	movs	r0, r3
   2a5a0:	4b50      	ldr	r3, [pc, #320]	; (2a6e4 <tcc_init+0x35c>)
   2a5a2:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2a5a4:	233b      	movs	r3, #59	; 0x3b
   2a5a6:	18fb      	adds	r3, r7, r3
   2a5a8:	781b      	ldrb	r3, [r3, #0]
   2a5aa:	4a4d      	ldr	r2, [pc, #308]	; (2a6e0 <tcc_init+0x358>)
   2a5ac:	5cd3      	ldrb	r3, [r2, r3]
   2a5ae:	0018      	movs	r0, r3
   2a5b0:	4b4d      	ldr	r3, [pc, #308]	; (2a6e8 <tcc_init+0x360>)
   2a5b2:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a5b4:	2300      	movs	r3, #0
   2a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a5b8:	e02d      	b.n	2a616 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2a5ba:	687a      	ldr	r2, [r7, #4]
   2a5bc:	2198      	movs	r1, #152	; 0x98
   2a5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a5c0:	18d3      	adds	r3, r2, r3
   2a5c2:	185b      	adds	r3, r3, r1
   2a5c4:	781b      	ldrb	r3, [r3, #0]
   2a5c6:	2201      	movs	r2, #1
   2a5c8:	4053      	eors	r3, r2
   2a5ca:	b2db      	uxtb	r3, r3
   2a5cc:	2b00      	cmp	r3, #0
   2a5ce:	d11e      	bne.n	2a60e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2a5d0:	2310      	movs	r3, #16
   2a5d2:	18fb      	adds	r3, r7, r3
   2a5d4:	0018      	movs	r0, r3
   2a5d6:	4b45      	ldr	r3, [pc, #276]	; (2a6ec <tcc_init+0x364>)
   2a5d8:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2a5da:	687b      	ldr	r3, [r7, #4]
   2a5dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a5de:	321e      	adds	r2, #30
   2a5e0:	0092      	lsls	r2, r2, #2
   2a5e2:	58d3      	ldr	r3, [r2, r3]
   2a5e4:	b2da      	uxtb	r2, r3
   2a5e6:	2310      	movs	r3, #16
   2a5e8:	18fb      	adds	r3, r7, r3
   2a5ea:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2a5ec:	2310      	movs	r3, #16
   2a5ee:	18fb      	adds	r3, r7, r3
   2a5f0:	2201      	movs	r2, #1
   2a5f2:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2a5f4:	687b      	ldr	r3, [r7, #4]
   2a5f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a5f8:	3216      	adds	r2, #22
   2a5fa:	0092      	lsls	r2, r2, #2
   2a5fc:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2a5fe:	b2db      	uxtb	r3, r3
   2a600:	2210      	movs	r2, #16
   2a602:	18ba      	adds	r2, r7, r2
   2a604:	0011      	movs	r1, r2
   2a606:	0018      	movs	r0, r3
   2a608:	4b39      	ldr	r3, [pc, #228]	; (2a6f0 <tcc_init+0x368>)
   2a60a:	4798      	blx	r3
   2a60c:	e000      	b.n	2a610 <tcc_init+0x288>
			continue;
   2a60e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2a610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a612:	3301      	adds	r3, #1
   2a614:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a616:	233b      	movs	r3, #59	; 0x3b
   2a618:	18fb      	adds	r3, r7, r3
   2a61a:	781b      	ldrb	r3, [r3, #0]
   2a61c:	4a28      	ldr	r2, [pc, #160]	; (2a6c0 <tcc_init+0x338>)
   2a61e:	5cd3      	ldrb	r3, [r2, r3]
   2a620:	001a      	movs	r2, r3
   2a622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a624:	429a      	cmp	r2, r3
   2a626:	dcc8      	bgt.n	2a5ba <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2a628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2a62a:	68bb      	ldr	r3, [r7, #8]
   2a62c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a62e:	46c0      	nop			; (mov r8, r8)
   2a630:	68bb      	ldr	r3, [r7, #8]
   2a632:	689b      	ldr	r3, [r3, #8]
   2a634:	2204      	movs	r2, #4
   2a636:	4013      	ands	r3, r2
   2a638:	d1fa      	bne.n	2a630 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2a63a:	68bb      	ldr	r3, [r7, #8]
   2a63c:	22ff      	movs	r2, #255	; 0xff
   2a63e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2a640:	46c0      	nop			; (mov r8, r8)
   2a642:	68bb      	ldr	r3, [r7, #8]
   2a644:	689b      	ldr	r3, [r3, #8]
   2a646:	2204      	movs	r2, #4
   2a648:	4013      	ands	r3, r2
   2a64a:	d1fa      	bne.n	2a642 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2a64c:	232b      	movs	r3, #43	; 0x2b
   2a64e:	18fb      	adds	r3, r7, r3
   2a650:	781a      	ldrb	r2, [r3, #0]
   2a652:	68bb      	ldr	r3, [r7, #8]
   2a654:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2a656:	2320      	movs	r3, #32
   2a658:	18fb      	adds	r3, r7, r3
   2a65a:	681a      	ldr	r2, [r3, #0]
   2a65c:	68bb      	ldr	r3, [r7, #8]
   2a65e:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2a660:	2320      	movs	r3, #32
   2a662:	18fb      	adds	r3, r7, r3
   2a664:	685a      	ldr	r2, [r3, #4]
   2a666:	68bb      	ldr	r3, [r7, #8]
   2a668:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2a66a:	69fa      	ldr	r2, [r7, #28]
   2a66c:	68bb      	ldr	r3, [r7, #8]
   2a66e:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2a670:	46c0      	nop			; (mov r8, r8)
   2a672:	68bb      	ldr	r3, [r7, #8]
   2a674:	689b      	ldr	r3, [r3, #8]
   2a676:	4a1f      	ldr	r2, [pc, #124]	; (2a6f4 <tcc_init+0x36c>)
   2a678:	4013      	ands	r3, r2
   2a67a:	d1fa      	bne.n	2a672 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2a67c:	69ba      	ldr	r2, [r7, #24]
   2a67e:	68bb      	ldr	r3, [r7, #8]
   2a680:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2a682:	46c0      	nop			; (mov r8, r8)
   2a684:	68bb      	ldr	r3, [r7, #8]
   2a686:	689b      	ldr	r3, [r3, #8]
   2a688:	2210      	movs	r2, #16
   2a68a:	4013      	ands	r3, r2
   2a68c:	d1fa      	bne.n	2a684 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2a68e:	687b      	ldr	r3, [r7, #4]
   2a690:	681a      	ldr	r2, [r3, #0]
   2a692:	68bb      	ldr	r3, [r7, #8]
   2a694:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2a696:	46c0      	nop			; (mov r8, r8)
   2a698:	68bb      	ldr	r3, [r7, #8]
   2a69a:	689b      	ldr	r3, [r3, #8]
   2a69c:	4a16      	ldr	r2, [pc, #88]	; (2a6f8 <tcc_init+0x370>)
   2a69e:	4013      	ands	r3, r2
   2a6a0:	d1fa      	bne.n	2a698 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2a6a2:	687b      	ldr	r3, [r7, #4]
   2a6a4:	685a      	ldr	r2, [r3, #4]
   2a6a6:	68bb      	ldr	r3, [r7, #8]
   2a6a8:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a6aa:	2300      	movs	r3, #0
   2a6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a6ae:	e03f      	b.n	2a730 <tcc_init+0x3a8>
   2a6b0:	00029cf1 	.word	0x00029cf1
   2a6b4:	00038d98 	.word	0x00038d98
   2a6b8:	00029c6d 	.word	0x00029c6d
   2a6bc:	00038da4 	.word	0x00038da4
   2a6c0:	00038db4 	.word	0x00038db4
   2a6c4:	00029ffd 	.word	0x00029ffd
   2a6c8:	0002a0a1 	.word	0x0002a0a1
   2a6cc:	0002a0fd 	.word	0x0002a0fd
   2a6d0:	0002a219 	.word	0x0002a219
   2a6d4:	0002a2f1 	.word	0x0002a2f1
   2a6d8:	200057a0 	.word	0x200057a0
   2a6dc:	00029c55 	.word	0x00029c55
   2a6e0:	00038d94 	.word	0x00038d94
   2a6e4:	0002986d 	.word	0x0002986d
   2a6e8:	000298b1 	.word	0x000298b1
   2a6ec:	00029cc9 	.word	0x00029cc9
   2a6f0:	00029bcd 	.word	0x00029bcd
   2a6f4:	00020040 	.word	0x00020040
   2a6f8:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2a6fc:	46c0      	nop			; (mov r8, r8)
   2a6fe:	68bb      	ldr	r3, [r7, #8]
   2a700:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2a702:	4912      	ldr	r1, [pc, #72]	; (2a74c <tcc_init+0x3c4>)
   2a704:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2a706:	4091      	lsls	r1, r2
   2a708:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2a70a:	4013      	ands	r3, r2
   2a70c:	d1f7      	bne.n	2a6fe <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2a70e:	687a      	ldr	r2, [r7, #4]
   2a710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a712:	3306      	adds	r3, #6
   2a714:	009b      	lsls	r3, r3, #2
   2a716:	18d3      	adds	r3, r2, r3
   2a718:	3304      	adds	r3, #4
   2a71a:	681a      	ldr	r2, [r3, #0]
   2a71c:	68b9      	ldr	r1, [r7, #8]
   2a71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a720:	3310      	adds	r3, #16
   2a722:	009b      	lsls	r3, r3, #2
   2a724:	18cb      	adds	r3, r1, r3
   2a726:	3304      	adds	r3, #4
   2a728:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2a72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a72c:	3301      	adds	r3, #1
   2a72e:	63fb      	str	r3, [r7, #60]	; 0x3c
   2a730:	233b      	movs	r3, #59	; 0x3b
   2a732:	18fb      	adds	r3, r7, r3
   2a734:	781b      	ldrb	r3, [r3, #0]
   2a736:	4a06      	ldr	r2, [pc, #24]	; (2a750 <tcc_init+0x3c8>)
   2a738:	5cd3      	ldrb	r3, [r2, r3]
   2a73a:	001a      	movs	r2, r3
   2a73c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2a73e:	429a      	cmp	r2, r3
   2a740:	dcdc      	bgt.n	2a6fc <tcc_init+0x374>
	}

	return STATUS_OK;
   2a742:	2300      	movs	r3, #0
}
   2a744:	0018      	movs	r0, r3
   2a746:	46bd      	mov	sp, r7
   2a748:	b011      	add	sp, #68	; 0x44
   2a74a:	bd90      	pop	{r4, r7, pc}
   2a74c:	00080100 	.word	0x00080100
   2a750:	00038db0 	.word	0x00038db0

0002a754 <system_interrupt_enable>:
{
   2a754:	b580      	push	{r7, lr}
   2a756:	b082      	sub	sp, #8
   2a758:	af00      	add	r7, sp, #0
   2a75a:	0002      	movs	r2, r0
   2a75c:	1dfb      	adds	r3, r7, #7
   2a75e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2a760:	4b06      	ldr	r3, [pc, #24]	; (2a77c <system_interrupt_enable+0x28>)
   2a762:	1dfa      	adds	r2, r7, #7
   2a764:	7812      	ldrb	r2, [r2, #0]
   2a766:	0011      	movs	r1, r2
   2a768:	221f      	movs	r2, #31
   2a76a:	400a      	ands	r2, r1
   2a76c:	2101      	movs	r1, #1
   2a76e:	4091      	lsls	r1, r2
   2a770:	000a      	movs	r2, r1
   2a772:	601a      	str	r2, [r3, #0]
}
   2a774:	46c0      	nop			; (mov r8, r8)
   2a776:	46bd      	mov	sp, r7
   2a778:	b002      	add	sp, #8
   2a77a:	bd80      	pop	{r7, pc}
   2a77c:	e000e100 	.word	0xe000e100

0002a780 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2a780:	b580      	push	{r7, lr}
   2a782:	b082      	sub	sp, #8
   2a784:	af00      	add	r7, sp, #0
   2a786:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2a788:	4a04      	ldr	r2, [pc, #16]	; (2a79c <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2a78a:	687b      	ldr	r3, [r7, #4]
   2a78c:	18d3      	adds	r3, r2, r3
   2a78e:	781b      	ldrb	r3, [r3, #0]
   2a790:	b25b      	sxtb	r3, r3
}
   2a792:	0018      	movs	r0, r3
   2a794:	46bd      	mov	sp, r7
   2a796:	b002      	add	sp, #8
   2a798:	bd80      	pop	{r7, pc}
   2a79a:	46c0      	nop			; (mov r8, r8)
   2a79c:	200000cc 	.word	0x200000cc

0002a7a0 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2a7a0:	b580      	push	{r7, lr}
   2a7a2:	b084      	sub	sp, #16
   2a7a4:	af00      	add	r7, sp, #0
   2a7a6:	60f8      	str	r0, [r7, #12]
   2a7a8:	60b9      	str	r1, [r7, #8]
   2a7aa:	1dfb      	adds	r3, r7, #7
   2a7ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2a7ae:	1dfb      	adds	r3, r7, #7
   2a7b0:	781b      	ldrb	r3, [r3, #0]
   2a7b2:	68fa      	ldr	r2, [r7, #12]
   2a7b4:	009b      	lsls	r3, r3, #2
   2a7b6:	18d3      	adds	r3, r2, r3
   2a7b8:	3304      	adds	r3, #4
   2a7ba:	68ba      	ldr	r2, [r7, #8]
   2a7bc:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2a7be:	68fb      	ldr	r3, [r7, #12]
   2a7c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2a7c2:	1dfb      	adds	r3, r7, #7
   2a7c4:	7819      	ldrb	r1, [r3, #0]
   2a7c6:	4b05      	ldr	r3, [pc, #20]	; (2a7dc <tcc_register_callback+0x3c>)
   2a7c8:	0089      	lsls	r1, r1, #2
   2a7ca:	58cb      	ldr	r3, [r1, r3]
   2a7cc:	431a      	orrs	r2, r3
   2a7ce:	68fb      	ldr	r3, [r7, #12]
   2a7d0:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2a7d2:	2300      	movs	r3, #0
}
   2a7d4:	0018      	movs	r0, r3
   2a7d6:	46bd      	mov	sp, r7
   2a7d8:	b004      	add	sp, #16
   2a7da:	bd80      	pop	{r7, pc}
   2a7dc:	00038db8 	.word	0x00038db8

0002a7e0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2a7e0:	b580      	push	{r7, lr}
   2a7e2:	b082      	sub	sp, #8
   2a7e4:	af00      	add	r7, sp, #0
   2a7e6:	6078      	str	r0, [r7, #4]
   2a7e8:	000a      	movs	r2, r1
   2a7ea:	1cfb      	adds	r3, r7, #3
   2a7ec:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2a7ee:	687b      	ldr	r3, [r7, #4]
   2a7f0:	681b      	ldr	r3, [r3, #0]
   2a7f2:	0018      	movs	r0, r3
   2a7f4:	4b0f      	ldr	r3, [pc, #60]	; (2a834 <tcc_enable_callback+0x54>)
   2a7f6:	4798      	blx	r3
   2a7f8:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2a7fa:	0018      	movs	r0, r3
   2a7fc:	4b0e      	ldr	r3, [pc, #56]	; (2a838 <tcc_enable_callback+0x58>)
   2a7fe:	4798      	blx	r3
   2a800:	0003      	movs	r3, r0
   2a802:	0018      	movs	r0, r3
   2a804:	4b0d      	ldr	r3, [pc, #52]	; (2a83c <tcc_enable_callback+0x5c>)
   2a806:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2a808:	687b      	ldr	r3, [r7, #4]
   2a80a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2a80c:	1cfb      	adds	r3, r7, #3
   2a80e:	7819      	ldrb	r1, [r3, #0]
   2a810:	4b0b      	ldr	r3, [pc, #44]	; (2a840 <tcc_enable_callback+0x60>)
   2a812:	0089      	lsls	r1, r1, #2
   2a814:	58cb      	ldr	r3, [r1, r3]
   2a816:	431a      	orrs	r2, r3
   2a818:	687b      	ldr	r3, [r7, #4]
   2a81a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2a81c:	687b      	ldr	r3, [r7, #4]
   2a81e:	681b      	ldr	r3, [r3, #0]
   2a820:	1cfa      	adds	r2, r7, #3
   2a822:	7811      	ldrb	r1, [r2, #0]
   2a824:	4a06      	ldr	r2, [pc, #24]	; (2a840 <tcc_enable_callback+0x60>)
   2a826:	0089      	lsls	r1, r1, #2
   2a828:	588a      	ldr	r2, [r1, r2]
   2a82a:	629a      	str	r2, [r3, #40]	; 0x28
}
   2a82c:	46c0      	nop			; (mov r8, r8)
   2a82e:	46bd      	mov	sp, r7
   2a830:	b002      	add	sp, #8
   2a832:	bd80      	pop	{r7, pc}
   2a834:	00029cf1 	.word	0x00029cf1
   2a838:	0002a781 	.word	0x0002a781
   2a83c:	0002a755 	.word	0x0002a755
   2a840:	00038db8 	.word	0x00038db8

0002a844 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2a844:	b580      	push	{r7, lr}
   2a846:	af00      	add	r7, sp, #0
   2a848:	2000      	movs	r0, #0
   2a84a:	4b02      	ldr	r3, [pc, #8]	; (2a854 <TCC0_Handler+0x10>)
   2a84c:	4798      	blx	r3
   2a84e:	46c0      	nop			; (mov r8, r8)
   2a850:	46bd      	mov	sp, r7
   2a852:	bd80      	pop	{r7, pc}
   2a854:	0002a881 	.word	0x0002a881

0002a858 <TCC1_Handler>:
   2a858:	b580      	push	{r7, lr}
   2a85a:	af00      	add	r7, sp, #0
   2a85c:	2001      	movs	r0, #1
   2a85e:	4b02      	ldr	r3, [pc, #8]	; (2a868 <TCC1_Handler+0x10>)
   2a860:	4798      	blx	r3
   2a862:	46c0      	nop			; (mov r8, r8)
   2a864:	46bd      	mov	sp, r7
   2a866:	bd80      	pop	{r7, pc}
   2a868:	0002a881 	.word	0x0002a881

0002a86c <TCC2_Handler>:
   2a86c:	b580      	push	{r7, lr}
   2a86e:	af00      	add	r7, sp, #0
   2a870:	2002      	movs	r0, #2
   2a872:	4b02      	ldr	r3, [pc, #8]	; (2a87c <TCC2_Handler+0x10>)
   2a874:	4798      	blx	r3
   2a876:	46c0      	nop			; (mov r8, r8)
   2a878:	46bd      	mov	sp, r7
   2a87a:	bd80      	pop	{r7, pc}
   2a87c:	0002a881 	.word	0x0002a881

0002a880 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2a880:	b580      	push	{r7, lr}
   2a882:	b086      	sub	sp, #24
   2a884:	af00      	add	r7, sp, #0
   2a886:	0002      	movs	r2, r0
   2a888:	1dfb      	adds	r3, r7, #7
   2a88a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2a88c:	1dfb      	adds	r3, r7, #7
   2a88e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2a890:	4b18      	ldr	r3, [pc, #96]	; (2a8f4 <_tcc_interrupt_handler+0x74>)
   2a892:	0092      	lsls	r2, r2, #2
   2a894:	58d3      	ldr	r3, [r2, r3]
   2a896:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a898:	693b      	ldr	r3, [r7, #16]
   2a89a:	681b      	ldr	r3, [r3, #0]
   2a89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2a89e:	693b      	ldr	r3, [r7, #16]
   2a8a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a8a2:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2a8a4:	693b      	ldr	r3, [r7, #16]
   2a8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2a8a8:	4013      	ands	r3, r2
   2a8aa:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a8ac:	2300      	movs	r3, #0
   2a8ae:	617b      	str	r3, [r7, #20]
   2a8b0:	e019      	b.n	2a8e6 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2a8b2:	4b11      	ldr	r3, [pc, #68]	; (2a8f8 <_tcc_interrupt_handler+0x78>)
   2a8b4:	697a      	ldr	r2, [r7, #20]
   2a8b6:	0092      	lsls	r2, r2, #2
   2a8b8:	58d3      	ldr	r3, [r2, r3]
   2a8ba:	68fa      	ldr	r2, [r7, #12]
   2a8bc:	4013      	ands	r3, r2
   2a8be:	d00f      	beq.n	2a8e0 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2a8c0:	693a      	ldr	r2, [r7, #16]
   2a8c2:	697b      	ldr	r3, [r7, #20]
   2a8c4:	009b      	lsls	r3, r3, #2
   2a8c6:	18d3      	adds	r3, r2, r3
   2a8c8:	3304      	adds	r3, #4
   2a8ca:	681b      	ldr	r3, [r3, #0]
   2a8cc:	693a      	ldr	r2, [r7, #16]
   2a8ce:	0010      	movs	r0, r2
   2a8d0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2a8d2:	693b      	ldr	r3, [r7, #16]
   2a8d4:	681b      	ldr	r3, [r3, #0]
   2a8d6:	4a08      	ldr	r2, [pc, #32]	; (2a8f8 <_tcc_interrupt_handler+0x78>)
   2a8d8:	6979      	ldr	r1, [r7, #20]
   2a8da:	0089      	lsls	r1, r1, #2
   2a8dc:	588a      	ldr	r2, [r1, r2]
   2a8de:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2a8e0:	697b      	ldr	r3, [r7, #20]
   2a8e2:	3301      	adds	r3, #1
   2a8e4:	617b      	str	r3, [r7, #20]
   2a8e6:	697b      	ldr	r3, [r7, #20]
   2a8e8:	2b0b      	cmp	r3, #11
   2a8ea:	dde2      	ble.n	2a8b2 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2a8ec:	46c0      	nop			; (mov r8, r8)
   2a8ee:	46bd      	mov	sp, r7
   2a8f0:	b006      	add	sp, #24
   2a8f2:	bd80      	pop	{r7, pc}
   2a8f4:	200057a0 	.word	0x200057a0
   2a8f8:	00038db8 	.word	0x00038db8

0002a8fc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2a8fc:	b580      	push	{r7, lr}
   2a8fe:	b082      	sub	sp, #8
   2a900:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2a902:	4b2f      	ldr	r3, [pc, #188]	; (2a9c0 <Reset_Handler+0xc4>)
   2a904:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2a906:	4b2f      	ldr	r3, [pc, #188]	; (2a9c4 <Reset_Handler+0xc8>)
   2a908:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2a90a:	687a      	ldr	r2, [r7, #4]
   2a90c:	683b      	ldr	r3, [r7, #0]
   2a90e:	429a      	cmp	r2, r3
   2a910:	d00c      	beq.n	2a92c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2a912:	e007      	b.n	2a924 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2a914:	683b      	ldr	r3, [r7, #0]
   2a916:	1d1a      	adds	r2, r3, #4
   2a918:	603a      	str	r2, [r7, #0]
   2a91a:	687a      	ldr	r2, [r7, #4]
   2a91c:	1d11      	adds	r1, r2, #4
   2a91e:	6079      	str	r1, [r7, #4]
   2a920:	6812      	ldr	r2, [r2, #0]
   2a922:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2a924:	683a      	ldr	r2, [r7, #0]
   2a926:	4b28      	ldr	r3, [pc, #160]	; (2a9c8 <Reset_Handler+0xcc>)
   2a928:	429a      	cmp	r2, r3
   2a92a:	d3f3      	bcc.n	2a914 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2a92c:	4b27      	ldr	r3, [pc, #156]	; (2a9cc <Reset_Handler+0xd0>)
   2a92e:	603b      	str	r3, [r7, #0]
   2a930:	e004      	b.n	2a93c <Reset_Handler+0x40>
                *pDest++ = 0;
   2a932:	683b      	ldr	r3, [r7, #0]
   2a934:	1d1a      	adds	r2, r3, #4
   2a936:	603a      	str	r2, [r7, #0]
   2a938:	2200      	movs	r2, #0
   2a93a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2a93c:	683a      	ldr	r2, [r7, #0]
   2a93e:	4b24      	ldr	r3, [pc, #144]	; (2a9d0 <Reset_Handler+0xd4>)
   2a940:	429a      	cmp	r2, r3
   2a942:	d3f6      	bcc.n	2a932 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2a944:	4b23      	ldr	r3, [pc, #140]	; (2a9d4 <Reset_Handler+0xd8>)
   2a946:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2a948:	4b23      	ldr	r3, [pc, #140]	; (2a9d8 <Reset_Handler+0xdc>)
   2a94a:	687a      	ldr	r2, [r7, #4]
   2a94c:	21ff      	movs	r1, #255	; 0xff
   2a94e:	438a      	bics	r2, r1
   2a950:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2a952:	4a22      	ldr	r2, [pc, #136]	; (2a9dc <Reset_Handler+0xe0>)
   2a954:	2390      	movs	r3, #144	; 0x90
   2a956:	005b      	lsls	r3, r3, #1
   2a958:	2102      	movs	r1, #2
   2a95a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2a95c:	4a20      	ldr	r2, [pc, #128]	; (2a9e0 <Reset_Handler+0xe4>)
   2a95e:	78d3      	ldrb	r3, [r2, #3]
   2a960:	2103      	movs	r1, #3
   2a962:	438b      	bics	r3, r1
   2a964:	1c19      	adds	r1, r3, #0
   2a966:	2302      	movs	r3, #2
   2a968:	430b      	orrs	r3, r1
   2a96a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2a96c:	4a1c      	ldr	r2, [pc, #112]	; (2a9e0 <Reset_Handler+0xe4>)
   2a96e:	78d3      	ldrb	r3, [r2, #3]
   2a970:	210c      	movs	r1, #12
   2a972:	438b      	bics	r3, r1
   2a974:	1c19      	adds	r1, r3, #0
   2a976:	2308      	movs	r3, #8
   2a978:	430b      	orrs	r3, r1
   2a97a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2a97c:	4a19      	ldr	r2, [pc, #100]	; (2a9e4 <Reset_Handler+0xe8>)
   2a97e:	7b93      	ldrb	r3, [r2, #14]
   2a980:	2130      	movs	r1, #48	; 0x30
   2a982:	438b      	bics	r3, r1
   2a984:	1c19      	adds	r1, r3, #0
   2a986:	2320      	movs	r3, #32
   2a988:	430b      	orrs	r3, r1
   2a98a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2a98c:	4a15      	ldr	r2, [pc, #84]	; (2a9e4 <Reset_Handler+0xe8>)
   2a98e:	7b93      	ldrb	r3, [r2, #14]
   2a990:	210c      	movs	r1, #12
   2a992:	438b      	bics	r3, r1
   2a994:	1c19      	adds	r1, r3, #0
   2a996:	2308      	movs	r3, #8
   2a998:	430b      	orrs	r3, r1
   2a99a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2a99c:	4a11      	ldr	r2, [pc, #68]	; (2a9e4 <Reset_Handler+0xe8>)
   2a99e:	7b93      	ldrb	r3, [r2, #14]
   2a9a0:	2103      	movs	r1, #3
   2a9a2:	438b      	bics	r3, r1
   2a9a4:	1c19      	adds	r1, r3, #0
   2a9a6:	2302      	movs	r3, #2
   2a9a8:	430b      	orrs	r3, r1
   2a9aa:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2a9ac:	4a0e      	ldr	r2, [pc, #56]	; (2a9e8 <Reset_Handler+0xec>)
   2a9ae:	6853      	ldr	r3, [r2, #4]
   2a9b0:	2180      	movs	r1, #128	; 0x80
   2a9b2:	430b      	orrs	r3, r1
   2a9b4:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2a9b6:	4b0d      	ldr	r3, [pc, #52]	; (2a9ec <Reset_Handler+0xf0>)
   2a9b8:	4798      	blx	r3

        /* Branch to main function */
        main();
   2a9ba:	4b0d      	ldr	r3, [pc, #52]	; (2a9f0 <Reset_Handler+0xf4>)
   2a9bc:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2a9be:	e7fe      	b.n	2a9be <Reset_Handler+0xc2>
   2a9c0:	00039b70 	.word	0x00039b70
   2a9c4:	20000000 	.word	0x20000000
   2a9c8:	200002a4 	.word	0x200002a4
   2a9cc:	200002b0 	.word	0x200002b0
   2a9d0:	20005810 	.word	0x20005810
   2a9d4:	00012000 	.word	0x00012000
   2a9d8:	e000ed00 	.word	0xe000ed00
   2a9dc:	41007000 	.word	0x41007000
   2a9e0:	41005000 	.word	0x41005000
   2a9e4:	41004800 	.word	0x41004800
   2a9e8:	41004000 	.word	0x41004000
   2a9ec:	000342e5 	.word	0x000342e5
   2a9f0:	000320d9 	.word	0x000320d9

0002a9f4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2a9f4:	b580      	push	{r7, lr}
   2a9f6:	af00      	add	r7, sp, #0
  __asm volatile (
   2a9f8:	2004      	movs	r0, #4
   2a9fa:	4671      	mov	r1, lr
   2a9fc:	4208      	tst	r0, r1
   2a9fe:	d002      	beq.n	2aa06 <_MSP>
   2aa00:	f3ef 8009 	mrs	r0, PSP
   2aa04:	e001      	b.n	2aa0a <_HALT>

0002aa06 <_MSP>:
   2aa06:	f3ef 8008 	mrs	r0, MSP

0002aa0a <_HALT>:
   2aa0a:	6941      	ldr	r1, [r0, #20]
   2aa0c:	e004      	b.n	2aa18 <HardFault_HandlerC>
   2aa0e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2aa10:	46c0      	nop			; (mov r8, r8)
   2aa12:	46bd      	mov	sp, r7
   2aa14:	bd80      	pop	{r7, pc}
	...

0002aa18 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2aa18:	b580      	push	{r7, lr}
   2aa1a:	b090      	sub	sp, #64	; 0x40
   2aa1c:	af00      	add	r7, sp, #0
   2aa1e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2aa20:	687b      	ldr	r3, [r7, #4]
   2aa22:	681b      	ldr	r3, [r3, #0]
   2aa24:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2aa26:	687b      	ldr	r3, [r7, #4]
   2aa28:	685b      	ldr	r3, [r3, #4]
   2aa2a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2aa2c:	687b      	ldr	r3, [r7, #4]
   2aa2e:	689b      	ldr	r3, [r3, #8]
   2aa30:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2aa32:	687b      	ldr	r3, [r7, #4]
   2aa34:	68db      	ldr	r3, [r3, #12]
   2aa36:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2aa38:	687b      	ldr	r3, [r7, #4]
   2aa3a:	691b      	ldr	r3, [r3, #16]
   2aa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2aa3e:	687b      	ldr	r3, [r7, #4]
   2aa40:	695b      	ldr	r3, [r3, #20]
   2aa42:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2aa44:	687b      	ldr	r3, [r7, #4]
   2aa46:	699b      	ldr	r3, [r3, #24]
   2aa48:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2aa4a:	687b      	ldr	r3, [r7, #4]
   2aa4c:	69db      	ldr	r3, [r3, #28]
   2aa4e:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2aa50:	4b0b      	ldr	r3, [pc, #44]	; (2aa80 <HardFault_HandlerC+0x68>)
   2aa52:	681b      	ldr	r3, [r3, #0]
   2aa54:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2aa56:	4b0b      	ldr	r3, [pc, #44]	; (2aa84 <HardFault_HandlerC+0x6c>)
   2aa58:	681b      	ldr	r3, [r3, #0]
   2aa5a:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2aa5c:	4b0a      	ldr	r3, [pc, #40]	; (2aa88 <HardFault_HandlerC+0x70>)
   2aa5e:	681b      	ldr	r3, [r3, #0]
   2aa60:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2aa62:	4b0a      	ldr	r3, [pc, #40]	; (2aa8c <HardFault_HandlerC+0x74>)
   2aa64:	681b      	ldr	r3, [r3, #0]
   2aa66:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2aa68:	4b09      	ldr	r3, [pc, #36]	; (2aa90 <HardFault_HandlerC+0x78>)
   2aa6a:	681b      	ldr	r3, [r3, #0]
   2aa6c:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2aa6e:	4b09      	ldr	r3, [pc, #36]	; (2aa94 <HardFault_HandlerC+0x7c>)
   2aa70:	681b      	ldr	r3, [r3, #0]
   2aa72:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2aa74:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2aa76:	46c0      	nop			; (mov r8, r8)
   2aa78:	46bd      	mov	sp, r7
   2aa7a:	b010      	add	sp, #64	; 0x40
   2aa7c:	bd80      	pop	{r7, pc}
   2aa7e:	46c0      	nop			; (mov r8, r8)
   2aa80:	e000ed28 	.word	0xe000ed28
   2aa84:	e000ed2c 	.word	0xe000ed2c
   2aa88:	e000ed30 	.word	0xe000ed30
   2aa8c:	e000ed3c 	.word	0xe000ed3c
   2aa90:	e000ed34 	.word	0xe000ed34
   2aa94:	e000ed38 	.word	0xe000ed38

0002aa98 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2aa98:	b580      	push	{r7, lr}
   2aa9a:	b086      	sub	sp, #24
   2aa9c:	af00      	add	r7, sp, #0
   2aa9e:	60f8      	str	r0, [r7, #12]
   2aaa0:	60b9      	str	r1, [r7, #8]
   2aaa2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2aaa4:	2300      	movs	r3, #0
   2aaa6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2aaa8:	68fb      	ldr	r3, [r7, #12]
   2aaaa:	2b00      	cmp	r3, #0
   2aaac:	d012      	beq.n	2aad4 <_read+0x3c>
		return -1;
   2aaae:	2301      	movs	r3, #1
   2aab0:	425b      	negs	r3, r3
   2aab2:	e013      	b.n	2aadc <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2aab4:	4b0b      	ldr	r3, [pc, #44]	; (2aae4 <_read+0x4c>)
   2aab6:	681a      	ldr	r2, [r3, #0]
   2aab8:	4b0b      	ldr	r3, [pc, #44]	; (2aae8 <_read+0x50>)
   2aaba:	681b      	ldr	r3, [r3, #0]
   2aabc:	68b9      	ldr	r1, [r7, #8]
   2aabe:	0018      	movs	r0, r3
   2aac0:	4790      	blx	r2
		ptr++;
   2aac2:	68bb      	ldr	r3, [r7, #8]
   2aac4:	3301      	adds	r3, #1
   2aac6:	60bb      	str	r3, [r7, #8]
		nChars++;
   2aac8:	697b      	ldr	r3, [r7, #20]
   2aaca:	3301      	adds	r3, #1
   2aacc:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2aace:	687b      	ldr	r3, [r7, #4]
   2aad0:	3b01      	subs	r3, #1
   2aad2:	607b      	str	r3, [r7, #4]
   2aad4:	687b      	ldr	r3, [r7, #4]
   2aad6:	2b00      	cmp	r3, #0
   2aad8:	dcec      	bgt.n	2aab4 <_read+0x1c>
	}
	return nChars;
   2aada:	697b      	ldr	r3, [r7, #20]
}
   2aadc:	0018      	movs	r0, r3
   2aade:	46bd      	mov	sp, r7
   2aae0:	b006      	add	sp, #24
   2aae2:	bd80      	pop	{r7, pc}
   2aae4:	200057ac 	.word	0x200057ac
   2aae8:	200057b4 	.word	0x200057b4

0002aaec <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2aaec:	b580      	push	{r7, lr}
   2aaee:	b086      	sub	sp, #24
   2aaf0:	af00      	add	r7, sp, #0
   2aaf2:	60f8      	str	r0, [r7, #12]
   2aaf4:	60b9      	str	r1, [r7, #8]
   2aaf6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2aaf8:	2300      	movs	r3, #0
   2aafa:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2aafc:	68fb      	ldr	r3, [r7, #12]
   2aafe:	2b01      	cmp	r3, #1
   2ab00:	d01d      	beq.n	2ab3e <_write+0x52>
   2ab02:	68fb      	ldr	r3, [r7, #12]
   2ab04:	2b02      	cmp	r3, #2
   2ab06:	d01a      	beq.n	2ab3e <_write+0x52>
   2ab08:	68fb      	ldr	r3, [r7, #12]
   2ab0a:	2b03      	cmp	r3, #3
   2ab0c:	d017      	beq.n	2ab3e <_write+0x52>
		return -1;
   2ab0e:	2301      	movs	r3, #1
   2ab10:	425b      	negs	r3, r3
   2ab12:	e018      	b.n	2ab46 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2ab14:	4b0e      	ldr	r3, [pc, #56]	; (2ab50 <_write+0x64>)
   2ab16:	681a      	ldr	r2, [r3, #0]
   2ab18:	4b0e      	ldr	r3, [pc, #56]	; (2ab54 <_write+0x68>)
   2ab1a:	6818      	ldr	r0, [r3, #0]
   2ab1c:	68bb      	ldr	r3, [r7, #8]
   2ab1e:	1c59      	adds	r1, r3, #1
   2ab20:	60b9      	str	r1, [r7, #8]
   2ab22:	781b      	ldrb	r3, [r3, #0]
   2ab24:	0019      	movs	r1, r3
   2ab26:	4790      	blx	r2
   2ab28:	1e03      	subs	r3, r0, #0
   2ab2a:	da02      	bge.n	2ab32 <_write+0x46>
			return -1;
   2ab2c:	2301      	movs	r3, #1
   2ab2e:	425b      	negs	r3, r3
   2ab30:	e009      	b.n	2ab46 <_write+0x5a>
		}
		++nChars;
   2ab32:	697b      	ldr	r3, [r7, #20]
   2ab34:	3301      	adds	r3, #1
   2ab36:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2ab38:	687b      	ldr	r3, [r7, #4]
   2ab3a:	3b01      	subs	r3, #1
   2ab3c:	607b      	str	r3, [r7, #4]
   2ab3e:	687b      	ldr	r3, [r7, #4]
   2ab40:	2b00      	cmp	r3, #0
   2ab42:	d1e7      	bne.n	2ab14 <_write+0x28>
	}
	return nChars;
   2ab44:	697b      	ldr	r3, [r7, #20]
}
   2ab46:	0018      	movs	r0, r3
   2ab48:	46bd      	mov	sp, r7
   2ab4a:	b006      	add	sp, #24
   2ab4c:	bd80      	pop	{r7, pc}
   2ab4e:	46c0      	nop			; (mov r8, r8)
   2ab50:	200057b0 	.word	0x200057b0
   2ab54:	200057b4 	.word	0x200057b4

0002ab58 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2ab58:	b580      	push	{r7, lr}
   2ab5a:	b084      	sub	sp, #16
   2ab5c:	af00      	add	r7, sp, #0
   2ab5e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2ab60:	4b0a      	ldr	r3, [pc, #40]	; (2ab8c <_sbrk+0x34>)
   2ab62:	681b      	ldr	r3, [r3, #0]
   2ab64:	2b00      	cmp	r3, #0
   2ab66:	d102      	bne.n	2ab6e <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2ab68:	4b08      	ldr	r3, [pc, #32]	; (2ab8c <_sbrk+0x34>)
   2ab6a:	4a09      	ldr	r2, [pc, #36]	; (2ab90 <_sbrk+0x38>)
   2ab6c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2ab6e:	4b07      	ldr	r3, [pc, #28]	; (2ab8c <_sbrk+0x34>)
   2ab70:	681b      	ldr	r3, [r3, #0]
   2ab72:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2ab74:	4b05      	ldr	r3, [pc, #20]	; (2ab8c <_sbrk+0x34>)
   2ab76:	681a      	ldr	r2, [r3, #0]
   2ab78:	687b      	ldr	r3, [r7, #4]
   2ab7a:	18d2      	adds	r2, r2, r3
   2ab7c:	4b03      	ldr	r3, [pc, #12]	; (2ab8c <_sbrk+0x34>)
   2ab7e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2ab80:	68fb      	ldr	r3, [r7, #12]
}
   2ab82:	0018      	movs	r0, r3
   2ab84:	46bd      	mov	sp, r7
   2ab86:	b004      	add	sp, #16
   2ab88:	bd80      	pop	{r7, pc}
   2ab8a:	46c0      	nop			; (mov r8, r8)
   2ab8c:	20003edc 	.word	0x20003edc
   2ab90:	20007810 	.word	0x20007810

0002ab94 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2ab94:	b580      	push	{r7, lr}
   2ab96:	b082      	sub	sp, #8
   2ab98:	af00      	add	r7, sp, #0
   2ab9a:	6078      	str	r0, [r7, #4]
	return -1;
   2ab9c:	2301      	movs	r3, #1
   2ab9e:	425b      	negs	r3, r3
}
   2aba0:	0018      	movs	r0, r3
   2aba2:	46bd      	mov	sp, r7
   2aba4:	b002      	add	sp, #8
   2aba6:	bd80      	pop	{r7, pc}

0002aba8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2aba8:	b580      	push	{r7, lr}
   2abaa:	b082      	sub	sp, #8
   2abac:	af00      	add	r7, sp, #0
   2abae:	6078      	str	r0, [r7, #4]
   2abb0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2abb2:	683b      	ldr	r3, [r7, #0]
   2abb4:	2280      	movs	r2, #128	; 0x80
   2abb6:	0192      	lsls	r2, r2, #6
   2abb8:	605a      	str	r2, [r3, #4]

	return 0;
   2abba:	2300      	movs	r3, #0
}
   2abbc:	0018      	movs	r0, r3
   2abbe:	46bd      	mov	sp, r7
   2abc0:	b002      	add	sp, #8
   2abc2:	bd80      	pop	{r7, pc}

0002abc4 <_isatty>:

extern int _isatty(int file)
{
   2abc4:	b580      	push	{r7, lr}
   2abc6:	b082      	sub	sp, #8
   2abc8:	af00      	add	r7, sp, #0
   2abca:	6078      	str	r0, [r7, #4]
	return 1;
   2abcc:	2301      	movs	r3, #1
}
   2abce:	0018      	movs	r0, r3
   2abd0:	46bd      	mov	sp, r7
   2abd2:	b002      	add	sp, #8
   2abd4:	bd80      	pop	{r7, pc}

0002abd6 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2abd6:	b580      	push	{r7, lr}
   2abd8:	b084      	sub	sp, #16
   2abda:	af00      	add	r7, sp, #0
   2abdc:	60f8      	str	r0, [r7, #12]
   2abde:	60b9      	str	r1, [r7, #8]
   2abe0:	607a      	str	r2, [r7, #4]
	return 0;
   2abe2:	2300      	movs	r3, #0
}
   2abe4:	0018      	movs	r0, r3
   2abe6:	46bd      	mov	sp, r7
   2abe8:	b004      	add	sp, #16
   2abea:	bd80      	pop	{r7, pc}

0002abec <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2abec:	b580      	push	{r7, lr}
   2abee:	b082      	sub	sp, #8
   2abf0:	af00      	add	r7, sp, #0
   2abf2:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2abf4:	687b      	ldr	r3, [r7, #4]
   2abf6:	2200      	movs	r2, #0
   2abf8:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2abfa:	687b      	ldr	r3, [r7, #4]
   2abfc:	2200      	movs	r2, #0
   2abfe:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2ac00:	687b      	ldr	r3, [r7, #4]
   2ac02:	2200      	movs	r2, #0
   2ac04:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2ac06:	687b      	ldr	r3, [r7, #4]
   2ac08:	2200      	movs	r2, #0
   2ac0a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2ac0c:	687b      	ldr	r3, [r7, #4]
   2ac0e:	2201      	movs	r2, #1
   2ac10:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2ac12:	687b      	ldr	r3, [r7, #4]
   2ac14:	2201      	movs	r2, #1
   2ac16:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2ac18:	687b      	ldr	r3, [r7, #4]
   2ac1a:	22fa      	movs	r2, #250	; 0xfa
   2ac1c:	00d2      	lsls	r2, r2, #3
   2ac1e:	80da      	strh	r2, [r3, #6]
}
   2ac20:	46c0      	nop			; (mov r8, r8)
   2ac22:	46bd      	mov	sp, r7
   2ac24:	b002      	add	sp, #8
   2ac26:	bd80      	pop	{r7, pc}

0002ac28 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2ac28:	b580      	push	{r7, lr}
   2ac2a:	b086      	sub	sp, #24
   2ac2c:	af00      	add	r7, sp, #0
   2ac2e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2ac30:	230c      	movs	r3, #12
   2ac32:	18fb      	adds	r3, r7, r3
   2ac34:	0018      	movs	r0, r3
   2ac36:	4b23      	ldr	r3, [pc, #140]	; (2acc4 <rtc_calendar_get_config_defaults+0x9c>)
   2ac38:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2ac3a:	687b      	ldr	r3, [r7, #4]
   2ac3c:	22a0      	movs	r2, #160	; 0xa0
   2ac3e:	0112      	lsls	r2, r2, #4
   2ac40:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2ac42:	687b      	ldr	r3, [r7, #4]
   2ac44:	2200      	movs	r2, #0
   2ac46:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2ac48:	687b      	ldr	r3, [r7, #4]
   2ac4a:	2200      	movs	r2, #0
   2ac4c:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2ac4e:	687b      	ldr	r3, [r7, #4]
   2ac50:	2200      	movs	r2, #0
   2ac52:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2ac54:	687b      	ldr	r3, [r7, #4]
   2ac56:	22fa      	movs	r2, #250	; 0xfa
   2ac58:	00d2      	lsls	r2, r2, #3
   2ac5a:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2ac5c:	2317      	movs	r3, #23
   2ac5e:	18fb      	adds	r3, r7, r3
   2ac60:	2200      	movs	r2, #0
   2ac62:	701a      	strb	r2, [r3, #0]
   2ac64:	e025      	b.n	2acb2 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2ac66:	2317      	movs	r3, #23
   2ac68:	18fb      	adds	r3, r7, r3
   2ac6a:	781a      	ldrb	r2, [r3, #0]
   2ac6c:	6879      	ldr	r1, [r7, #4]
   2ac6e:	2008      	movs	r0, #8
   2ac70:	0013      	movs	r3, r2
   2ac72:	009b      	lsls	r3, r3, #2
   2ac74:	189b      	adds	r3, r3, r2
   2ac76:	005b      	lsls	r3, r3, #1
   2ac78:	18cb      	adds	r3, r1, r3
   2ac7a:	181a      	adds	r2, r3, r0
   2ac7c:	230c      	movs	r3, #12
   2ac7e:	18fb      	adds	r3, r7, r3
   2ac80:	0010      	movs	r0, r2
   2ac82:	0019      	movs	r1, r3
   2ac84:	2308      	movs	r3, #8
   2ac86:	001a      	movs	r2, r3
   2ac88:	4b0f      	ldr	r3, [pc, #60]	; (2acc8 <rtc_calendar_get_config_defaults+0xa0>)
   2ac8a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2ac8c:	2317      	movs	r3, #23
   2ac8e:	18fb      	adds	r3, r7, r3
   2ac90:	781a      	ldrb	r2, [r3, #0]
   2ac92:	6879      	ldr	r1, [r7, #4]
   2ac94:	0013      	movs	r3, r2
   2ac96:	009b      	lsls	r3, r3, #2
   2ac98:	189b      	adds	r3, r3, r2
   2ac9a:	005b      	lsls	r3, r3, #1
   2ac9c:	18cb      	adds	r3, r1, r3
   2ac9e:	3310      	adds	r3, #16
   2aca0:	2206      	movs	r2, #6
   2aca2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2aca4:	2317      	movs	r3, #23
   2aca6:	18fb      	adds	r3, r7, r3
   2aca8:	781a      	ldrb	r2, [r3, #0]
   2acaa:	2317      	movs	r3, #23
   2acac:	18fb      	adds	r3, r7, r3
   2acae:	3201      	adds	r2, #1
   2acb0:	701a      	strb	r2, [r3, #0]
   2acb2:	2317      	movs	r3, #23
   2acb4:	18fb      	adds	r3, r7, r3
   2acb6:	781b      	ldrb	r3, [r3, #0]
   2acb8:	2b00      	cmp	r3, #0
   2acba:	d0d4      	beq.n	2ac66 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2acbc:	46c0      	nop			; (mov r8, r8)
   2acbe:	46bd      	mov	sp, r7
   2acc0:	b006      	add	sp, #24
   2acc2:	bd80      	pop	{r7, pc}
   2acc4:	0002abed 	.word	0x0002abed
   2acc8:	00034355 	.word	0x00034355

0002accc <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2accc:	b580      	push	{r7, lr}
   2acce:	b088      	sub	sp, #32
   2acd0:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2acd2:	230c      	movs	r3, #12
   2acd4:	18fb      	adds	r3, r7, r3
   2acd6:	0018      	movs	r0, r3
   2acd8:	4b1a      	ldr	r3, [pc, #104]	; (2ad44 <configure_rtc_calendar+0x78>)
   2acda:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2acdc:	1d3b      	adds	r3, r7, #4
   2acde:	0018      	movs	r0, r3
   2ace0:	4b19      	ldr	r3, [pc, #100]	; (2ad48 <configure_rtc_calendar+0x7c>)
   2ace2:	4798      	blx	r3
	init_time.year   = 2014;
   2ace4:	1d3b      	adds	r3, r7, #4
   2ace6:	4a19      	ldr	r2, [pc, #100]	; (2ad4c <configure_rtc_calendar+0x80>)
   2ace8:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2acea:	1d3b      	adds	r3, r7, #4
   2acec:	2201      	movs	r2, #1
   2acee:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2acf0:	1d3b      	adds	r3, r7, #4
   2acf2:	2201      	movs	r2, #1
   2acf4:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2acf6:	1d3b      	adds	r3, r7, #4
   2acf8:	2200      	movs	r2, #0
   2acfa:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2acfc:	1d3b      	adds	r3, r7, #4
   2acfe:	2200      	movs	r2, #0
   2ad00:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2ad02:	1d3b      	adds	r3, r7, #4
   2ad04:	2204      	movs	r2, #4
   2ad06:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2ad08:	230c      	movs	r3, #12
   2ad0a:	18fb      	adds	r3, r7, r3
   2ad0c:	2201      	movs	r2, #1
   2ad0e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2ad10:	230c      	movs	r3, #12
   2ad12:	18fb      	adds	r3, r7, r3
   2ad14:	1d3a      	adds	r2, r7, #4
   2ad16:	3308      	adds	r3, #8
   2ad18:	ca03      	ldmia	r2!, {r0, r1}
   2ad1a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2ad1c:	230c      	movs	r3, #12
   2ad1e:	18fb      	adds	r3, r7, r3
   2ad20:	2206      	movs	r2, #6
   2ad22:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2ad24:	230c      	movs	r3, #12
   2ad26:	18fa      	adds	r2, r7, r3
   2ad28:	4909      	ldr	r1, [pc, #36]	; (2ad50 <configure_rtc_calendar+0x84>)
   2ad2a:	4b0a      	ldr	r3, [pc, #40]	; (2ad54 <configure_rtc_calendar+0x88>)
   2ad2c:	0018      	movs	r0, r3
   2ad2e:	4b0a      	ldr	r3, [pc, #40]	; (2ad58 <configure_rtc_calendar+0x8c>)
   2ad30:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2ad32:	4b08      	ldr	r3, [pc, #32]	; (2ad54 <configure_rtc_calendar+0x88>)
   2ad34:	0018      	movs	r0, r3
   2ad36:	4b09      	ldr	r3, [pc, #36]	; (2ad5c <configure_rtc_calendar+0x90>)
   2ad38:	4798      	blx	r3
}
   2ad3a:	46c0      	nop			; (mov r8, r8)
   2ad3c:	46bd      	mov	sp, r7
   2ad3e:	b008      	add	sp, #32
   2ad40:	bd80      	pop	{r7, pc}
   2ad42:	46c0      	nop			; (mov r8, r8)
   2ad44:	0002ac29 	.word	0x0002ac29
   2ad48:	0002abed 	.word	0x0002abed
   2ad4c:	000007de 	.word	0x000007de
   2ad50:	40001400 	.word	0x40001400
   2ad54:	200057b8 	.word	0x200057b8
   2ad58:	00026809 	.word	0x00026809
   2ad5c:	00026535 	.word	0x00026535

0002ad60 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2ad60:	b590      	push	{r4, r7, lr}
   2ad62:	b085      	sub	sp, #20
   2ad64:	af00      	add	r7, sp, #0
   2ad66:	0002      	movs	r2, r0
   2ad68:	1dfb      	adds	r3, r7, #7
   2ad6a:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2ad6c:	4b1a      	ldr	r3, [pc, #104]	; (2add8 <disk_initialize+0x78>)
   2ad6e:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2ad70:	1dfb      	adds	r3, r7, #7
   2ad72:	781b      	ldrb	r3, [r3, #0]
   2ad74:	2b01      	cmp	r3, #1
   2ad76:	d901      	bls.n	2ad7c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2ad78:	2301      	movs	r3, #1
   2ad7a:	e029      	b.n	2add0 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2ad7c:	2300      	movs	r3, #0
   2ad7e:	60fb      	str	r3, [r7, #12]
   2ad80:	e010      	b.n	2ada4 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2ad82:	230b      	movs	r3, #11
   2ad84:	18fc      	adds	r4, r7, r3
   2ad86:	1dfb      	adds	r3, r7, #7
   2ad88:	781b      	ldrb	r3, [r3, #0]
   2ad8a:	0018      	movs	r0, r3
   2ad8c:	4b13      	ldr	r3, [pc, #76]	; (2addc <disk_initialize+0x7c>)
   2ad8e:	4798      	blx	r3
   2ad90:	0003      	movs	r3, r0
   2ad92:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2ad94:	230b      	movs	r3, #11
   2ad96:	18fb      	adds	r3, r7, r3
   2ad98:	781b      	ldrb	r3, [r3, #0]
   2ad9a:	2b03      	cmp	r3, #3
   2ad9c:	d106      	bne.n	2adac <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2ad9e:	68fb      	ldr	r3, [r7, #12]
   2ada0:	3301      	adds	r3, #1
   2ada2:	60fb      	str	r3, [r7, #12]
   2ada4:	68fb      	ldr	r3, [r7, #12]
   2ada6:	2b01      	cmp	r3, #1
   2ada8:	ddeb      	ble.n	2ad82 <disk_initialize+0x22>
   2adaa:	e000      	b.n	2adae <disk_initialize+0x4e>
			break;
   2adac:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2adae:	230b      	movs	r3, #11
   2adb0:	18fb      	adds	r3, r7, r3
   2adb2:	781b      	ldrb	r3, [r3, #0]
   2adb4:	2b00      	cmp	r3, #0
   2adb6:	d001      	beq.n	2adbc <disk_initialize+0x5c>
		return STA_NOINIT;
   2adb8:	2301      	movs	r3, #1
   2adba:	e009      	b.n	2add0 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2adbc:	1dfb      	adds	r3, r7, #7
   2adbe:	781b      	ldrb	r3, [r3, #0]
   2adc0:	0018      	movs	r0, r3
   2adc2:	4b07      	ldr	r3, [pc, #28]	; (2ade0 <disk_initialize+0x80>)
   2adc4:	4798      	blx	r3
   2adc6:	1e03      	subs	r3, r0, #0
   2adc8:	d001      	beq.n	2adce <disk_initialize+0x6e>
		return STA_PROTECT;
   2adca:	2304      	movs	r3, #4
   2adcc:	e000      	b.n	2add0 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2adce:	2300      	movs	r3, #0
}
   2add0:	0018      	movs	r0, r3
   2add2:	46bd      	mov	sp, r7
   2add4:	b005      	add	sp, #20
   2add6:	bd90      	pop	{r4, r7, pc}
   2add8:	0002accd 	.word	0x0002accd
   2addc:	00025a31 	.word	0x00025a31
   2ade0:	00025ae9 	.word	0x00025ae9

0002ade4 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2ade4:	b580      	push	{r7, lr}
   2ade6:	b082      	sub	sp, #8
   2ade8:	af00      	add	r7, sp, #0
   2adea:	0002      	movs	r2, r0
   2adec:	1dfb      	adds	r3, r7, #7
   2adee:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2adf0:	1dfb      	adds	r3, r7, #7
   2adf2:	781b      	ldrb	r3, [r3, #0]
   2adf4:	0018      	movs	r0, r3
   2adf6:	4b08      	ldr	r3, [pc, #32]	; (2ae18 <disk_status+0x34>)
   2adf8:	4798      	blx	r3
   2adfa:	1e03      	subs	r3, r0, #0
   2adfc:	d002      	beq.n	2ae04 <disk_status+0x20>
   2adfe:	2b02      	cmp	r3, #2
   2ae00:	d002      	beq.n	2ae08 <disk_status+0x24>
   2ae02:	e003      	b.n	2ae0c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2ae04:	2300      	movs	r3, #0
   2ae06:	e002      	b.n	2ae0e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2ae08:	2303      	movs	r3, #3
   2ae0a:	e000      	b.n	2ae0e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2ae0c:	2301      	movs	r3, #1
	}
}
   2ae0e:	0018      	movs	r0, r3
   2ae10:	46bd      	mov	sp, r7
   2ae12:	b002      	add	sp, #8
   2ae14:	bd80      	pop	{r7, pc}
   2ae16:	46c0      	nop			; (mov r8, r8)
   2ae18:	00025a31 	.word	0x00025a31

0002ae1c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2ae1c:	b590      	push	{r4, r7, lr}
   2ae1e:	b089      	sub	sp, #36	; 0x24
   2ae20:	af00      	add	r7, sp, #0
   2ae22:	60b9      	str	r1, [r7, #8]
   2ae24:	607a      	str	r2, [r7, #4]
   2ae26:	0019      	movs	r1, r3
   2ae28:	230f      	movs	r3, #15
   2ae2a:	18fb      	adds	r3, r7, r3
   2ae2c:	1c02      	adds	r2, r0, #0
   2ae2e:	701a      	strb	r2, [r3, #0]
   2ae30:	230e      	movs	r3, #14
   2ae32:	18fb      	adds	r3, r7, r3
   2ae34:	1c0a      	adds	r2, r1, #0
   2ae36:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2ae38:	231b      	movs	r3, #27
   2ae3a:	18fc      	adds	r4, r7, r3
   2ae3c:	230f      	movs	r3, #15
   2ae3e:	18fb      	adds	r3, r7, r3
   2ae40:	781b      	ldrb	r3, [r3, #0]
   2ae42:	0018      	movs	r0, r3
   2ae44:	4b28      	ldr	r3, [pc, #160]	; (2aee8 <disk_read+0xcc>)
   2ae46:	4798      	blx	r3
   2ae48:	0003      	movs	r3, r0
   2ae4a:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2ae4c:	231b      	movs	r3, #27
   2ae4e:	18fb      	adds	r3, r7, r3
   2ae50:	781b      	ldrb	r3, [r3, #0]
   2ae52:	2b00      	cmp	r3, #0
   2ae54:	d101      	bne.n	2ae5a <disk_read+0x3e>
		return RES_ERROR;
   2ae56:	2301      	movs	r3, #1
   2ae58:	e042      	b.n	2aee0 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2ae5a:	2314      	movs	r3, #20
   2ae5c:	18fa      	adds	r2, r7, r3
   2ae5e:	230f      	movs	r3, #15
   2ae60:	18fb      	adds	r3, r7, r3
   2ae62:	781b      	ldrb	r3, [r3, #0]
   2ae64:	0011      	movs	r1, r2
   2ae66:	0018      	movs	r0, r3
   2ae68:	4b20      	ldr	r3, [pc, #128]	; (2aeec <disk_read+0xd0>)
   2ae6a:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2ae6c:	230e      	movs	r3, #14
   2ae6e:	18fb      	adds	r3, r7, r3
   2ae70:	781b      	ldrb	r3, [r3, #0]
   2ae72:	221b      	movs	r2, #27
   2ae74:	18ba      	adds	r2, r7, r2
   2ae76:	7812      	ldrb	r2, [r2, #0]
   2ae78:	4353      	muls	r3, r2
   2ae7a:	001a      	movs	r2, r3
   2ae7c:	687b      	ldr	r3, [r7, #4]
   2ae7e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2ae80:	697b      	ldr	r3, [r7, #20]
   2ae82:	3301      	adds	r3, #1
   2ae84:	211b      	movs	r1, #27
   2ae86:	1879      	adds	r1, r7, r1
   2ae88:	7809      	ldrb	r1, [r1, #0]
   2ae8a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2ae8c:	429a      	cmp	r2, r3
   2ae8e:	d901      	bls.n	2ae94 <disk_read+0x78>
		return RES_PARERR;
   2ae90:	2304      	movs	r3, #4
   2ae92:	e025      	b.n	2aee0 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2ae94:	2300      	movs	r3, #0
   2ae96:	61fb      	str	r3, [r7, #28]
   2ae98:	e01b      	b.n	2aed2 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2ae9a:	231b      	movs	r3, #27
   2ae9c:	18fb      	adds	r3, r7, r3
   2ae9e:	781b      	ldrb	r3, [r3, #0]
   2aea0:	69fa      	ldr	r2, [r7, #28]
   2aea2:	435a      	muls	r2, r3
   2aea4:	687b      	ldr	r3, [r7, #4]
   2aea6:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2aea8:	231b      	movs	r3, #27
   2aeaa:	18fb      	adds	r3, r7, r3
   2aeac:	781b      	ldrb	r3, [r3, #0]
   2aeae:	69fa      	ldr	r2, [r7, #28]
   2aeb0:	4353      	muls	r3, r2
   2aeb2:	025b      	lsls	r3, r3, #9
   2aeb4:	68ba      	ldr	r2, [r7, #8]
   2aeb6:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2aeb8:	230f      	movs	r3, #15
   2aeba:	18fb      	adds	r3, r7, r3
   2aebc:	781b      	ldrb	r3, [r3, #0]
   2aebe:	0018      	movs	r0, r3
   2aec0:	4b0b      	ldr	r3, [pc, #44]	; (2aef0 <disk_read+0xd4>)
   2aec2:	4798      	blx	r3
   2aec4:	1e03      	subs	r3, r0, #0
   2aec6:	d001      	beq.n	2aecc <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2aec8:	2301      	movs	r3, #1
   2aeca:	e009      	b.n	2aee0 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2aecc:	69fb      	ldr	r3, [r7, #28]
   2aece:	3301      	adds	r3, #1
   2aed0:	61fb      	str	r3, [r7, #28]
   2aed2:	230e      	movs	r3, #14
   2aed4:	18fb      	adds	r3, r7, r3
   2aed6:	781a      	ldrb	r2, [r3, #0]
   2aed8:	69fb      	ldr	r3, [r7, #28]
   2aeda:	429a      	cmp	r2, r3
   2aedc:	d8dd      	bhi.n	2ae9a <disk_read+0x7e>
		}
	}

	return RES_OK;
   2aede:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2aee0:	0018      	movs	r0, r3
   2aee2:	46bd      	mov	sp, r7
   2aee4:	b009      	add	sp, #36	; 0x24
   2aee6:	bd90      	pop	{r4, r7, pc}
   2aee8:	00025abd 	.word	0x00025abd
   2aeec:	00025a71 	.word	0x00025a71
   2aef0:	00025b31 	.word	0x00025b31

0002aef4 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2aef4:	b590      	push	{r4, r7, lr}
   2aef6:	b089      	sub	sp, #36	; 0x24
   2aef8:	af00      	add	r7, sp, #0
   2aefa:	60b9      	str	r1, [r7, #8]
   2aefc:	607a      	str	r2, [r7, #4]
   2aefe:	0019      	movs	r1, r3
   2af00:	230f      	movs	r3, #15
   2af02:	18fb      	adds	r3, r7, r3
   2af04:	1c02      	adds	r2, r0, #0
   2af06:	701a      	strb	r2, [r3, #0]
   2af08:	230e      	movs	r3, #14
   2af0a:	18fb      	adds	r3, r7, r3
   2af0c:	1c0a      	adds	r2, r1, #0
   2af0e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2af10:	231b      	movs	r3, #27
   2af12:	18fc      	adds	r4, r7, r3
   2af14:	230f      	movs	r3, #15
   2af16:	18fb      	adds	r3, r7, r3
   2af18:	781b      	ldrb	r3, [r3, #0]
   2af1a:	0018      	movs	r0, r3
   2af1c:	4b28      	ldr	r3, [pc, #160]	; (2afc0 <disk_write+0xcc>)
   2af1e:	4798      	blx	r3
   2af20:	0003      	movs	r3, r0
   2af22:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2af24:	231b      	movs	r3, #27
   2af26:	18fb      	adds	r3, r7, r3
   2af28:	781b      	ldrb	r3, [r3, #0]
   2af2a:	2b00      	cmp	r3, #0
   2af2c:	d101      	bne.n	2af32 <disk_write+0x3e>
		return RES_ERROR;
   2af2e:	2301      	movs	r3, #1
   2af30:	e042      	b.n	2afb8 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2af32:	2314      	movs	r3, #20
   2af34:	18fa      	adds	r2, r7, r3
   2af36:	230f      	movs	r3, #15
   2af38:	18fb      	adds	r3, r7, r3
   2af3a:	781b      	ldrb	r3, [r3, #0]
   2af3c:	0011      	movs	r1, r2
   2af3e:	0018      	movs	r0, r3
   2af40:	4b20      	ldr	r3, [pc, #128]	; (2afc4 <disk_write+0xd0>)
   2af42:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2af44:	230e      	movs	r3, #14
   2af46:	18fb      	adds	r3, r7, r3
   2af48:	781b      	ldrb	r3, [r3, #0]
   2af4a:	221b      	movs	r2, #27
   2af4c:	18ba      	adds	r2, r7, r2
   2af4e:	7812      	ldrb	r2, [r2, #0]
   2af50:	4353      	muls	r3, r2
   2af52:	001a      	movs	r2, r3
   2af54:	687b      	ldr	r3, [r7, #4]
   2af56:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2af58:	697b      	ldr	r3, [r7, #20]
   2af5a:	3301      	adds	r3, #1
   2af5c:	211b      	movs	r1, #27
   2af5e:	1879      	adds	r1, r7, r1
   2af60:	7809      	ldrb	r1, [r1, #0]
   2af62:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2af64:	429a      	cmp	r2, r3
   2af66:	d901      	bls.n	2af6c <disk_write+0x78>
		return RES_PARERR;
   2af68:	2304      	movs	r3, #4
   2af6a:	e025      	b.n	2afb8 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2af6c:	2300      	movs	r3, #0
   2af6e:	61fb      	str	r3, [r7, #28]
   2af70:	e01b      	b.n	2afaa <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2af72:	231b      	movs	r3, #27
   2af74:	18fb      	adds	r3, r7, r3
   2af76:	781b      	ldrb	r3, [r3, #0]
   2af78:	69fa      	ldr	r2, [r7, #28]
   2af7a:	435a      	muls	r2, r3
   2af7c:	687b      	ldr	r3, [r7, #4]
   2af7e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2af80:	231b      	movs	r3, #27
   2af82:	18fb      	adds	r3, r7, r3
   2af84:	781b      	ldrb	r3, [r3, #0]
   2af86:	69fa      	ldr	r2, [r7, #28]
   2af88:	4353      	muls	r3, r2
   2af8a:	025b      	lsls	r3, r3, #9
   2af8c:	68ba      	ldr	r2, [r7, #8]
   2af8e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2af90:	230f      	movs	r3, #15
   2af92:	18fb      	adds	r3, r7, r3
   2af94:	781b      	ldrb	r3, [r3, #0]
   2af96:	0018      	movs	r0, r3
   2af98:	4b0b      	ldr	r3, [pc, #44]	; (2afc8 <disk_write+0xd4>)
   2af9a:	4798      	blx	r3
   2af9c:	1e03      	subs	r3, r0, #0
   2af9e:	d001      	beq.n	2afa4 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2afa0:	2301      	movs	r3, #1
   2afa2:	e009      	b.n	2afb8 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2afa4:	69fb      	ldr	r3, [r7, #28]
   2afa6:	3301      	adds	r3, #1
   2afa8:	61fb      	str	r3, [r7, #28]
   2afaa:	230e      	movs	r3, #14
   2afac:	18fb      	adds	r3, r7, r3
   2afae:	781a      	ldrb	r2, [r3, #0]
   2afb0:	69fb      	ldr	r3, [r7, #28]
   2afb2:	429a      	cmp	r2, r3
   2afb4:	d8dd      	bhi.n	2af72 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2afb6:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2afb8:	0018      	movs	r0, r3
   2afba:	46bd      	mov	sp, r7
   2afbc:	b009      	add	sp, #36	; 0x24
   2afbe:	bd90      	pop	{r4, r7, pc}
   2afc0:	00025abd 	.word	0x00025abd
   2afc4:	00025a71 	.word	0x00025a71
   2afc8:	00025b85 	.word	0x00025b85

0002afcc <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2afcc:	b590      	push	{r4, r7, lr}
   2afce:	b085      	sub	sp, #20
   2afd0:	af00      	add	r7, sp, #0
   2afd2:	603a      	str	r2, [r7, #0]
   2afd4:	1dfb      	adds	r3, r7, #7
   2afd6:	1c02      	adds	r2, r0, #0
   2afd8:	701a      	strb	r2, [r3, #0]
   2afda:	1dbb      	adds	r3, r7, #6
   2afdc:	1c0a      	adds	r2, r1, #0
   2afde:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2afe0:	230f      	movs	r3, #15
   2afe2:	18fb      	adds	r3, r7, r3
   2afe4:	2204      	movs	r2, #4
   2afe6:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2afe8:	1dbb      	adds	r3, r7, #6
   2afea:	781b      	ldrb	r3, [r3, #0]
   2afec:	2b01      	cmp	r3, #1
   2afee:	d00f      	beq.n	2b010 <disk_ioctl+0x44>
   2aff0:	dc02      	bgt.n	2aff8 <disk_ioctl+0x2c>
   2aff2:	2b00      	cmp	r3, #0
   2aff4:	d044      	beq.n	2b080 <disk_ioctl+0xb4>
   2aff6:	e054      	b.n	2b0a2 <disk_ioctl+0xd6>
   2aff8:	2b02      	cmp	r3, #2
   2affa:	d01a      	beq.n	2b032 <disk_ioctl+0x66>
   2affc:	2b03      	cmp	r3, #3
   2affe:	d150      	bne.n	2b0a2 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2b000:	683b      	ldr	r3, [r7, #0]
   2b002:	2201      	movs	r2, #1
   2b004:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2b006:	230f      	movs	r3, #15
   2b008:	18fb      	adds	r3, r7, r3
   2b00a:	2200      	movs	r2, #0
   2b00c:	701a      	strb	r2, [r3, #0]
		break;
   2b00e:	e04c      	b.n	2b0aa <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2b010:	2308      	movs	r3, #8
   2b012:	18fa      	adds	r2, r7, r3
   2b014:	1dfb      	adds	r3, r7, #7
   2b016:	781b      	ldrb	r3, [r3, #0]
   2b018:	0011      	movs	r1, r2
   2b01a:	0018      	movs	r0, r3
   2b01c:	4b26      	ldr	r3, [pc, #152]	; (2b0b8 <disk_ioctl+0xec>)
   2b01e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2b020:	68bb      	ldr	r3, [r7, #8]
   2b022:	1c5a      	adds	r2, r3, #1
   2b024:	683b      	ldr	r3, [r7, #0]
   2b026:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2b028:	230f      	movs	r3, #15
   2b02a:	18fb      	adds	r3, r7, r3
   2b02c:	2200      	movs	r2, #0
   2b02e:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b030:	e03b      	b.n	2b0aa <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2b032:	230e      	movs	r3, #14
   2b034:	18fc      	adds	r4, r7, r3
   2b036:	1dfb      	adds	r3, r7, #7
   2b038:	781b      	ldrb	r3, [r3, #0]
   2b03a:	0018      	movs	r0, r3
   2b03c:	4b1f      	ldr	r3, [pc, #124]	; (2b0bc <disk_ioctl+0xf0>)
   2b03e:	4798      	blx	r3
   2b040:	0003      	movs	r3, r0
   2b042:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2b044:	230e      	movs	r3, #14
   2b046:	18fb      	adds	r3, r7, r3
   2b048:	781b      	ldrb	r3, [r3, #0]
   2b04a:	2b01      	cmp	r3, #1
   2b04c:	d010      	beq.n	2b070 <disk_ioctl+0xa4>
   2b04e:	230e      	movs	r3, #14
   2b050:	18fb      	adds	r3, r7, r3
   2b052:	781b      	ldrb	r3, [r3, #0]
   2b054:	2b02      	cmp	r3, #2
   2b056:	d00b      	beq.n	2b070 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2b058:	230e      	movs	r3, #14
   2b05a:	18fb      	adds	r3, r7, r3
   2b05c:	781b      	ldrb	r3, [r3, #0]
   2b05e:	2b04      	cmp	r3, #4
   2b060:	d006      	beq.n	2b070 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2b062:	230e      	movs	r3, #14
   2b064:	18fb      	adds	r3, r7, r3
   2b066:	781b      	ldrb	r3, [r3, #0]
   2b068:	2b08      	cmp	r3, #8
   2b06a:	d001      	beq.n	2b070 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2b06c:	2301      	movs	r3, #1
   2b06e:	e01f      	b.n	2b0b0 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2b070:	683b      	ldr	r3, [r7, #0]
   2b072:	2200      	movs	r2, #0
   2b074:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2b076:	230f      	movs	r3, #15
   2b078:	18fb      	adds	r3, r7, r3
   2b07a:	2200      	movs	r2, #0
   2b07c:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b07e:	e014      	b.n	2b0aa <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2b080:	1dfb      	adds	r3, r7, #7
   2b082:	781b      	ldrb	r3, [r3, #0]
   2b084:	0018      	movs	r0, r3
   2b086:	4b0e      	ldr	r3, [pc, #56]	; (2b0c0 <disk_ioctl+0xf4>)
   2b088:	4798      	blx	r3
   2b08a:	1e03      	subs	r3, r0, #0
   2b08c:	d104      	bne.n	2b098 <disk_ioctl+0xcc>
			res = RES_OK;
   2b08e:	230f      	movs	r3, #15
   2b090:	18fb      	adds	r3, r7, r3
   2b092:	2200      	movs	r2, #0
   2b094:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2b096:	e008      	b.n	2b0aa <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2b098:	230f      	movs	r3, #15
   2b09a:	18fb      	adds	r3, r7, r3
   2b09c:	2203      	movs	r2, #3
   2b09e:	701a      	strb	r2, [r3, #0]
		break;
   2b0a0:	e003      	b.n	2b0aa <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2b0a2:	230f      	movs	r3, #15
   2b0a4:	18fb      	adds	r3, r7, r3
   2b0a6:	2204      	movs	r2, #4
   2b0a8:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b0aa:	230f      	movs	r3, #15
   2b0ac:	18fb      	adds	r3, r7, r3
   2b0ae:	781b      	ldrb	r3, [r3, #0]
}
   2b0b0:	0018      	movs	r0, r3
   2b0b2:	46bd      	mov	sp, r7
   2b0b4:	b005      	add	sp, #20
   2b0b6:	bd90      	pop	{r4, r7, pc}
   2b0b8:	00025a71 	.word	0x00025a71
   2b0bc:	00025abd 	.word	0x00025abd
   2b0c0:	00025a31 	.word	0x00025a31

0002b0c4 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2b0c4:	b580      	push	{r7, lr}
   2b0c6:	b084      	sub	sp, #16
   2b0c8:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2b0ca:	1d3a      	adds	r2, r7, #4
   2b0cc:	4b12      	ldr	r3, [pc, #72]	; (2b118 <get_fattime+0x54>)
   2b0ce:	0011      	movs	r1, r2
   2b0d0:	0018      	movs	r0, r3
   2b0d2:	4b12      	ldr	r3, [pc, #72]	; (2b11c <get_fattime+0x58>)
   2b0d4:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2b0d6:	1d3b      	adds	r3, r7, #4
   2b0d8:	88db      	ldrh	r3, [r3, #6]
   2b0da:	4a11      	ldr	r2, [pc, #68]	; (2b120 <get_fattime+0x5c>)
   2b0dc:	4694      	mov	ip, r2
   2b0de:	4463      	add	r3, ip
   2b0e0:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2b0e2:	1d3b      	adds	r3, r7, #4
   2b0e4:	795b      	ldrb	r3, [r3, #5]
   2b0e6:	055b      	lsls	r3, r3, #21
   2b0e8:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2b0ea:	1d3b      	adds	r3, r7, #4
   2b0ec:	791b      	ldrb	r3, [r3, #4]
   2b0ee:	041b      	lsls	r3, r3, #16
   2b0f0:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2b0f2:	1d3b      	adds	r3, r7, #4
   2b0f4:	789b      	ldrb	r3, [r3, #2]
   2b0f6:	02db      	lsls	r3, r3, #11
   2b0f8:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2b0fa:	1d3b      	adds	r3, r7, #4
   2b0fc:	785b      	ldrb	r3, [r3, #1]
   2b0fe:	015b      	lsls	r3, r3, #5
   2b100:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2b102:	1d3a      	adds	r2, r7, #4
   2b104:	7812      	ldrb	r2, [r2, #0]
   2b106:	0852      	lsrs	r2, r2, #1
   2b108:	b2d2      	uxtb	r2, r2
   2b10a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2b10c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2b10e:	68fb      	ldr	r3, [r7, #12]
}
   2b110:	0018      	movs	r0, r3
   2b112:	46bd      	mov	sp, r7
   2b114:	b004      	add	sp, #16
   2b116:	bd80      	pop	{r7, pc}
   2b118:	200057b8 	.word	0x200057b8
   2b11c:	0002689d 	.word	0x0002689d
   2b120:	fffff844 	.word	0xfffff844

0002b124 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2b124:	b580      	push	{r7, lr}
   2b126:	b086      	sub	sp, #24
   2b128:	af00      	add	r7, sp, #0
   2b12a:	60f8      	str	r0, [r7, #12]
   2b12c:	60b9      	str	r1, [r7, #8]
   2b12e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b130:	68fb      	ldr	r3, [r7, #12]
   2b132:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2b134:	68bb      	ldr	r3, [r7, #8]
   2b136:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2b138:	e007      	b.n	2b14a <mem_cpy+0x26>
		*d++ = *s++;
   2b13a:	697b      	ldr	r3, [r7, #20]
   2b13c:	1c5a      	adds	r2, r3, #1
   2b13e:	617a      	str	r2, [r7, #20]
   2b140:	693a      	ldr	r2, [r7, #16]
   2b142:	1c51      	adds	r1, r2, #1
   2b144:	6139      	str	r1, [r7, #16]
   2b146:	7812      	ldrb	r2, [r2, #0]
   2b148:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b14a:	687b      	ldr	r3, [r7, #4]
   2b14c:	1e5a      	subs	r2, r3, #1
   2b14e:	607a      	str	r2, [r7, #4]
   2b150:	2b00      	cmp	r3, #0
   2b152:	d1f2      	bne.n	2b13a <mem_cpy+0x16>
}
   2b154:	46c0      	nop			; (mov r8, r8)
   2b156:	46bd      	mov	sp, r7
   2b158:	b006      	add	sp, #24
   2b15a:	bd80      	pop	{r7, pc}

0002b15c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2b15c:	b580      	push	{r7, lr}
   2b15e:	b086      	sub	sp, #24
   2b160:	af00      	add	r7, sp, #0
   2b162:	60f8      	str	r0, [r7, #12]
   2b164:	60b9      	str	r1, [r7, #8]
   2b166:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b168:	68fb      	ldr	r3, [r7, #12]
   2b16a:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2b16c:	e005      	b.n	2b17a <mem_set+0x1e>
		*d++ = (BYTE)val;
   2b16e:	697b      	ldr	r3, [r7, #20]
   2b170:	1c5a      	adds	r2, r3, #1
   2b172:	617a      	str	r2, [r7, #20]
   2b174:	68ba      	ldr	r2, [r7, #8]
   2b176:	b2d2      	uxtb	r2, r2
   2b178:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b17a:	687b      	ldr	r3, [r7, #4]
   2b17c:	1e5a      	subs	r2, r3, #1
   2b17e:	607a      	str	r2, [r7, #4]
   2b180:	2b00      	cmp	r3, #0
   2b182:	d1f4      	bne.n	2b16e <mem_set+0x12>
}
   2b184:	46c0      	nop			; (mov r8, r8)
   2b186:	46bd      	mov	sp, r7
   2b188:	b006      	add	sp, #24
   2b18a:	bd80      	pop	{r7, pc}

0002b18c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2b18c:	b580      	push	{r7, lr}
   2b18e:	b088      	sub	sp, #32
   2b190:	af00      	add	r7, sp, #0
   2b192:	60f8      	str	r0, [r7, #12]
   2b194:	60b9      	str	r1, [r7, #8]
   2b196:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2b198:	68fb      	ldr	r3, [r7, #12]
   2b19a:	61fb      	str	r3, [r7, #28]
   2b19c:	68bb      	ldr	r3, [r7, #8]
   2b19e:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2b1a0:	2300      	movs	r3, #0
   2b1a2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2b1a4:	46c0      	nop			; (mov r8, r8)
   2b1a6:	687b      	ldr	r3, [r7, #4]
   2b1a8:	1e5a      	subs	r2, r3, #1
   2b1aa:	607a      	str	r2, [r7, #4]
   2b1ac:	2b00      	cmp	r3, #0
   2b1ae:	d00d      	beq.n	2b1cc <mem_cmp+0x40>
   2b1b0:	69fb      	ldr	r3, [r7, #28]
   2b1b2:	1c5a      	adds	r2, r3, #1
   2b1b4:	61fa      	str	r2, [r7, #28]
   2b1b6:	781b      	ldrb	r3, [r3, #0]
   2b1b8:	0019      	movs	r1, r3
   2b1ba:	69bb      	ldr	r3, [r7, #24]
   2b1bc:	1c5a      	adds	r2, r3, #1
   2b1be:	61ba      	str	r2, [r7, #24]
   2b1c0:	781b      	ldrb	r3, [r3, #0]
   2b1c2:	1acb      	subs	r3, r1, r3
   2b1c4:	617b      	str	r3, [r7, #20]
   2b1c6:	697b      	ldr	r3, [r7, #20]
   2b1c8:	2b00      	cmp	r3, #0
   2b1ca:	d0ec      	beq.n	2b1a6 <mem_cmp+0x1a>
	return r;
   2b1cc:	697b      	ldr	r3, [r7, #20]
}
   2b1ce:	0018      	movs	r0, r3
   2b1d0:	46bd      	mov	sp, r7
   2b1d2:	b008      	add	sp, #32
   2b1d4:	bd80      	pop	{r7, pc}

0002b1d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2b1d6:	b580      	push	{r7, lr}
   2b1d8:	b082      	sub	sp, #8
   2b1da:	af00      	add	r7, sp, #0
   2b1dc:	6078      	str	r0, [r7, #4]
   2b1de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2b1e0:	e002      	b.n	2b1e8 <chk_chr+0x12>
   2b1e2:	687b      	ldr	r3, [r7, #4]
   2b1e4:	3301      	adds	r3, #1
   2b1e6:	607b      	str	r3, [r7, #4]
   2b1e8:	687b      	ldr	r3, [r7, #4]
   2b1ea:	781b      	ldrb	r3, [r3, #0]
   2b1ec:	2b00      	cmp	r3, #0
   2b1ee:	d005      	beq.n	2b1fc <chk_chr+0x26>
   2b1f0:	687b      	ldr	r3, [r7, #4]
   2b1f2:	781b      	ldrb	r3, [r3, #0]
   2b1f4:	001a      	movs	r2, r3
   2b1f6:	683b      	ldr	r3, [r7, #0]
   2b1f8:	429a      	cmp	r2, r3
   2b1fa:	d1f2      	bne.n	2b1e2 <chk_chr+0xc>
	return *str;
   2b1fc:	687b      	ldr	r3, [r7, #4]
   2b1fe:	781b      	ldrb	r3, [r3, #0]
}
   2b200:	0018      	movs	r0, r3
   2b202:	46bd      	mov	sp, r7
   2b204:	b002      	add	sp, #8
   2b206:	bd80      	pop	{r7, pc}

0002b208 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2b208:	b590      	push	{r4, r7, lr}
   2b20a:	b085      	sub	sp, #20
   2b20c:	af00      	add	r7, sp, #0
   2b20e:	6078      	str	r0, [r7, #4]
   2b210:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2b212:	687b      	ldr	r3, [r7, #4]
   2b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b216:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2b218:	68fa      	ldr	r2, [r7, #12]
   2b21a:	683b      	ldr	r3, [r7, #0]
   2b21c:	429a      	cmp	r2, r3
   2b21e:	d04e      	beq.n	2b2be <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2b220:	687b      	ldr	r3, [r7, #4]
   2b222:	791b      	ldrb	r3, [r3, #4]
   2b224:	2b00      	cmp	r3, #0
   2b226:	d037      	beq.n	2b298 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2b228:	687b      	ldr	r3, [r7, #4]
   2b22a:	7858      	ldrb	r0, [r3, #1]
   2b22c:	687b      	ldr	r3, [r7, #4]
   2b22e:	3330      	adds	r3, #48	; 0x30
   2b230:	0019      	movs	r1, r3
   2b232:	68fa      	ldr	r2, [r7, #12]
   2b234:	2301      	movs	r3, #1
   2b236:	4c24      	ldr	r4, [pc, #144]	; (2b2c8 <move_window+0xc0>)
   2b238:	47a0      	blx	r4
   2b23a:	1e03      	subs	r3, r0, #0
   2b23c:	d001      	beq.n	2b242 <move_window+0x3a>
				return FR_DISK_ERR;
   2b23e:	2301      	movs	r3, #1
   2b240:	e03e      	b.n	2b2c0 <move_window+0xb8>
			fs->wflag = 0;
   2b242:	687b      	ldr	r3, [r7, #4]
   2b244:	2200      	movs	r2, #0
   2b246:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2b248:	687b      	ldr	r3, [r7, #4]
   2b24a:	6a1a      	ldr	r2, [r3, #32]
   2b24c:	687b      	ldr	r3, [r7, #4]
   2b24e:	69db      	ldr	r3, [r3, #28]
   2b250:	18d2      	adds	r2, r2, r3
   2b252:	68fb      	ldr	r3, [r7, #12]
   2b254:	429a      	cmp	r2, r3
   2b256:	d91f      	bls.n	2b298 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b258:	230b      	movs	r3, #11
   2b25a:	18fb      	adds	r3, r7, r3
   2b25c:	687a      	ldr	r2, [r7, #4]
   2b25e:	78d2      	ldrb	r2, [r2, #3]
   2b260:	701a      	strb	r2, [r3, #0]
   2b262:	e014      	b.n	2b28e <move_window+0x86>
					wsect += fs->fsize;
   2b264:	687b      	ldr	r3, [r7, #4]
   2b266:	69db      	ldr	r3, [r3, #28]
   2b268:	68fa      	ldr	r2, [r7, #12]
   2b26a:	18d3      	adds	r3, r2, r3
   2b26c:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2b26e:	687b      	ldr	r3, [r7, #4]
   2b270:	7858      	ldrb	r0, [r3, #1]
   2b272:	687b      	ldr	r3, [r7, #4]
   2b274:	3330      	adds	r3, #48	; 0x30
   2b276:	0019      	movs	r1, r3
   2b278:	68fa      	ldr	r2, [r7, #12]
   2b27a:	2301      	movs	r3, #1
   2b27c:	4c12      	ldr	r4, [pc, #72]	; (2b2c8 <move_window+0xc0>)
   2b27e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2b280:	230b      	movs	r3, #11
   2b282:	18fb      	adds	r3, r7, r3
   2b284:	781a      	ldrb	r2, [r3, #0]
   2b286:	230b      	movs	r3, #11
   2b288:	18fb      	adds	r3, r7, r3
   2b28a:	3a01      	subs	r2, #1
   2b28c:	701a      	strb	r2, [r3, #0]
   2b28e:	230b      	movs	r3, #11
   2b290:	18fb      	adds	r3, r7, r3
   2b292:	781b      	ldrb	r3, [r3, #0]
   2b294:	2b01      	cmp	r3, #1
   2b296:	d8e5      	bhi.n	2b264 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2b298:	683b      	ldr	r3, [r7, #0]
   2b29a:	2b00      	cmp	r3, #0
   2b29c:	d00f      	beq.n	2b2be <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2b29e:	687b      	ldr	r3, [r7, #4]
   2b2a0:	7858      	ldrb	r0, [r3, #1]
   2b2a2:	687b      	ldr	r3, [r7, #4]
   2b2a4:	3330      	adds	r3, #48	; 0x30
   2b2a6:	0019      	movs	r1, r3
   2b2a8:	683a      	ldr	r2, [r7, #0]
   2b2aa:	2301      	movs	r3, #1
   2b2ac:	4c07      	ldr	r4, [pc, #28]	; (2b2cc <move_window+0xc4>)
   2b2ae:	47a0      	blx	r4
   2b2b0:	1e03      	subs	r3, r0, #0
   2b2b2:	d001      	beq.n	2b2b8 <move_window+0xb0>
				return FR_DISK_ERR;
   2b2b4:	2301      	movs	r3, #1
   2b2b6:	e003      	b.n	2b2c0 <move_window+0xb8>
			fs->winsect = sector;
   2b2b8:	687b      	ldr	r3, [r7, #4]
   2b2ba:	683a      	ldr	r2, [r7, #0]
   2b2bc:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2b2be:	2300      	movs	r3, #0
}
   2b2c0:	0018      	movs	r0, r3
   2b2c2:	46bd      	mov	sp, r7
   2b2c4:	b005      	add	sp, #20
   2b2c6:	bd90      	pop	{r4, r7, pc}
   2b2c8:	0002aef5 	.word	0x0002aef5
   2b2cc:	0002ae1d 	.word	0x0002ae1d

0002b2d0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2b2d0:	b590      	push	{r4, r7, lr}
   2b2d2:	b085      	sub	sp, #20
   2b2d4:	af00      	add	r7, sp, #0
   2b2d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2b2d8:	230f      	movs	r3, #15
   2b2da:	18fc      	adds	r4, r7, r3
   2b2dc:	687b      	ldr	r3, [r7, #4]
   2b2de:	2100      	movs	r1, #0
   2b2e0:	0018      	movs	r0, r3
   2b2e2:	4b52      	ldr	r3, [pc, #328]	; (2b42c <sync+0x15c>)
   2b2e4:	4798      	blx	r3
   2b2e6:	0003      	movs	r3, r0
   2b2e8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2b2ea:	230f      	movs	r3, #15
   2b2ec:	18fb      	adds	r3, r7, r3
   2b2ee:	781b      	ldrb	r3, [r3, #0]
   2b2f0:	2b00      	cmp	r3, #0
   2b2f2:	d000      	beq.n	2b2f6 <sync+0x26>
   2b2f4:	e093      	b.n	2b41e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2b2f6:	687b      	ldr	r3, [r7, #4]
   2b2f8:	781b      	ldrb	r3, [r3, #0]
   2b2fa:	2b03      	cmp	r3, #3
   2b2fc:	d000      	beq.n	2b300 <sync+0x30>
   2b2fe:	e081      	b.n	2b404 <sync+0x134>
   2b300:	687b      	ldr	r3, [r7, #4]
   2b302:	795b      	ldrb	r3, [r3, #5]
   2b304:	2b00      	cmp	r3, #0
   2b306:	d07d      	beq.n	2b404 <sync+0x134>
			fs->winsect = 0;
   2b308:	687b      	ldr	r3, [r7, #4]
   2b30a:	2200      	movs	r2, #0
   2b30c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2b30e:	687b      	ldr	r3, [r7, #4]
   2b310:	3330      	adds	r3, #48	; 0x30
   2b312:	0018      	movs	r0, r3
   2b314:	2380      	movs	r3, #128	; 0x80
   2b316:	009b      	lsls	r3, r3, #2
   2b318:	001a      	movs	r2, r3
   2b31a:	2100      	movs	r1, #0
   2b31c:	4b44      	ldr	r3, [pc, #272]	; (2b430 <sync+0x160>)
   2b31e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2b320:	687b      	ldr	r3, [r7, #4]
   2b322:	4a44      	ldr	r2, [pc, #272]	; (2b434 <sync+0x164>)
   2b324:	2155      	movs	r1, #85	; 0x55
   2b326:	5499      	strb	r1, [r3, r2]
   2b328:	687b      	ldr	r3, [r7, #4]
   2b32a:	4a43      	ldr	r2, [pc, #268]	; (2b438 <sync+0x168>)
   2b32c:	21aa      	movs	r1, #170	; 0xaa
   2b32e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2b330:	687b      	ldr	r3, [r7, #4]
   2b332:	2230      	movs	r2, #48	; 0x30
   2b334:	2152      	movs	r1, #82	; 0x52
   2b336:	5499      	strb	r1, [r3, r2]
   2b338:	687b      	ldr	r3, [r7, #4]
   2b33a:	2231      	movs	r2, #49	; 0x31
   2b33c:	2152      	movs	r1, #82	; 0x52
   2b33e:	5499      	strb	r1, [r3, r2]
   2b340:	687b      	ldr	r3, [r7, #4]
   2b342:	2232      	movs	r2, #50	; 0x32
   2b344:	2161      	movs	r1, #97	; 0x61
   2b346:	5499      	strb	r1, [r3, r2]
   2b348:	687b      	ldr	r3, [r7, #4]
   2b34a:	2233      	movs	r2, #51	; 0x33
   2b34c:	2141      	movs	r1, #65	; 0x41
   2b34e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2b350:	687a      	ldr	r2, [r7, #4]
   2b352:	2385      	movs	r3, #133	; 0x85
   2b354:	009b      	lsls	r3, r3, #2
   2b356:	2172      	movs	r1, #114	; 0x72
   2b358:	54d1      	strb	r1, [r2, r3]
   2b35a:	687b      	ldr	r3, [r7, #4]
   2b35c:	4a37      	ldr	r2, [pc, #220]	; (2b43c <sync+0x16c>)
   2b35e:	2172      	movs	r1, #114	; 0x72
   2b360:	5499      	strb	r1, [r3, r2]
   2b362:	687b      	ldr	r3, [r7, #4]
   2b364:	4a36      	ldr	r2, [pc, #216]	; (2b440 <sync+0x170>)
   2b366:	2141      	movs	r1, #65	; 0x41
   2b368:	5499      	strb	r1, [r3, r2]
   2b36a:	687b      	ldr	r3, [r7, #4]
   2b36c:	4a35      	ldr	r2, [pc, #212]	; (2b444 <sync+0x174>)
   2b36e:	2161      	movs	r1, #97	; 0x61
   2b370:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2b372:	687b      	ldr	r3, [r7, #4]
   2b374:	691b      	ldr	r3, [r3, #16]
   2b376:	b2d9      	uxtb	r1, r3
   2b378:	687a      	ldr	r2, [r7, #4]
   2b37a:	2386      	movs	r3, #134	; 0x86
   2b37c:	009b      	lsls	r3, r3, #2
   2b37e:	54d1      	strb	r1, [r2, r3]
   2b380:	687b      	ldr	r3, [r7, #4]
   2b382:	691b      	ldr	r3, [r3, #16]
   2b384:	b29b      	uxth	r3, r3
   2b386:	0a1b      	lsrs	r3, r3, #8
   2b388:	b29b      	uxth	r3, r3
   2b38a:	b2d9      	uxtb	r1, r3
   2b38c:	687b      	ldr	r3, [r7, #4]
   2b38e:	4a2e      	ldr	r2, [pc, #184]	; (2b448 <sync+0x178>)
   2b390:	5499      	strb	r1, [r3, r2]
   2b392:	687b      	ldr	r3, [r7, #4]
   2b394:	691b      	ldr	r3, [r3, #16]
   2b396:	0c1b      	lsrs	r3, r3, #16
   2b398:	b2d9      	uxtb	r1, r3
   2b39a:	687b      	ldr	r3, [r7, #4]
   2b39c:	4a2b      	ldr	r2, [pc, #172]	; (2b44c <sync+0x17c>)
   2b39e:	5499      	strb	r1, [r3, r2]
   2b3a0:	687b      	ldr	r3, [r7, #4]
   2b3a2:	691b      	ldr	r3, [r3, #16]
   2b3a4:	0e1b      	lsrs	r3, r3, #24
   2b3a6:	b2d9      	uxtb	r1, r3
   2b3a8:	687b      	ldr	r3, [r7, #4]
   2b3aa:	4a29      	ldr	r2, [pc, #164]	; (2b450 <sync+0x180>)
   2b3ac:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2b3ae:	687b      	ldr	r3, [r7, #4]
   2b3b0:	68db      	ldr	r3, [r3, #12]
   2b3b2:	b2d9      	uxtb	r1, r3
   2b3b4:	687a      	ldr	r2, [r7, #4]
   2b3b6:	2387      	movs	r3, #135	; 0x87
   2b3b8:	009b      	lsls	r3, r3, #2
   2b3ba:	54d1      	strb	r1, [r2, r3]
   2b3bc:	687b      	ldr	r3, [r7, #4]
   2b3be:	68db      	ldr	r3, [r3, #12]
   2b3c0:	b29b      	uxth	r3, r3
   2b3c2:	0a1b      	lsrs	r3, r3, #8
   2b3c4:	b29b      	uxth	r3, r3
   2b3c6:	b2d9      	uxtb	r1, r3
   2b3c8:	687b      	ldr	r3, [r7, #4]
   2b3ca:	4a22      	ldr	r2, [pc, #136]	; (2b454 <sync+0x184>)
   2b3cc:	5499      	strb	r1, [r3, r2]
   2b3ce:	687b      	ldr	r3, [r7, #4]
   2b3d0:	68db      	ldr	r3, [r3, #12]
   2b3d2:	0c1b      	lsrs	r3, r3, #16
   2b3d4:	b2d9      	uxtb	r1, r3
   2b3d6:	687b      	ldr	r3, [r7, #4]
   2b3d8:	4a1f      	ldr	r2, [pc, #124]	; (2b458 <sync+0x188>)
   2b3da:	5499      	strb	r1, [r3, r2]
   2b3dc:	687b      	ldr	r3, [r7, #4]
   2b3de:	68db      	ldr	r3, [r3, #12]
   2b3e0:	0e1b      	lsrs	r3, r3, #24
   2b3e2:	b2d9      	uxtb	r1, r3
   2b3e4:	687b      	ldr	r3, [r7, #4]
   2b3e6:	4a1d      	ldr	r2, [pc, #116]	; (2b45c <sync+0x18c>)
   2b3e8:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2b3ea:	687b      	ldr	r3, [r7, #4]
   2b3ec:	7858      	ldrb	r0, [r3, #1]
   2b3ee:	687b      	ldr	r3, [r7, #4]
   2b3f0:	3330      	adds	r3, #48	; 0x30
   2b3f2:	0019      	movs	r1, r3
   2b3f4:	687b      	ldr	r3, [r7, #4]
   2b3f6:	695a      	ldr	r2, [r3, #20]
   2b3f8:	2301      	movs	r3, #1
   2b3fa:	4c19      	ldr	r4, [pc, #100]	; (2b460 <sync+0x190>)
   2b3fc:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2b3fe:	687b      	ldr	r3, [r7, #4]
   2b400:	2200      	movs	r2, #0
   2b402:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2b404:	687b      	ldr	r3, [r7, #4]
   2b406:	785b      	ldrb	r3, [r3, #1]
   2b408:	2200      	movs	r2, #0
   2b40a:	2100      	movs	r1, #0
   2b40c:	0018      	movs	r0, r3
   2b40e:	4b15      	ldr	r3, [pc, #84]	; (2b464 <sync+0x194>)
   2b410:	4798      	blx	r3
   2b412:	1e03      	subs	r3, r0, #0
   2b414:	d003      	beq.n	2b41e <sync+0x14e>
			res = FR_DISK_ERR;
   2b416:	230f      	movs	r3, #15
   2b418:	18fb      	adds	r3, r7, r3
   2b41a:	2201      	movs	r2, #1
   2b41c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b41e:	230f      	movs	r3, #15
   2b420:	18fb      	adds	r3, r7, r3
   2b422:	781b      	ldrb	r3, [r3, #0]
}
   2b424:	0018      	movs	r0, r3
   2b426:	46bd      	mov	sp, r7
   2b428:	b005      	add	sp, #20
   2b42a:	bd90      	pop	{r4, r7, pc}
   2b42c:	0002b209 	.word	0x0002b209
   2b430:	0002b15d 	.word	0x0002b15d
   2b434:	0000022e 	.word	0x0000022e
   2b438:	0000022f 	.word	0x0000022f
   2b43c:	00000215 	.word	0x00000215
   2b440:	00000216 	.word	0x00000216
   2b444:	00000217 	.word	0x00000217
   2b448:	00000219 	.word	0x00000219
   2b44c:	0000021a 	.word	0x0000021a
   2b450:	0000021b 	.word	0x0000021b
   2b454:	0000021d 	.word	0x0000021d
   2b458:	0000021e 	.word	0x0000021e
   2b45c:	0000021f 	.word	0x0000021f
   2b460:	0002aef5 	.word	0x0002aef5
   2b464:	0002afcd 	.word	0x0002afcd

0002b468 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2b468:	b580      	push	{r7, lr}
   2b46a:	b082      	sub	sp, #8
   2b46c:	af00      	add	r7, sp, #0
   2b46e:	6078      	str	r0, [r7, #4]
   2b470:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2b472:	683b      	ldr	r3, [r7, #0]
   2b474:	3b02      	subs	r3, #2
   2b476:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2b478:	687b      	ldr	r3, [r7, #4]
   2b47a:	699b      	ldr	r3, [r3, #24]
   2b47c:	1e9a      	subs	r2, r3, #2
   2b47e:	683b      	ldr	r3, [r7, #0]
   2b480:	429a      	cmp	r2, r3
   2b482:	d801      	bhi.n	2b488 <clust2sect+0x20>
   2b484:	2300      	movs	r3, #0
   2b486:	e007      	b.n	2b498 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2b488:	687b      	ldr	r3, [r7, #4]
   2b48a:	789b      	ldrb	r3, [r3, #2]
   2b48c:	001a      	movs	r2, r3
   2b48e:	683b      	ldr	r3, [r7, #0]
   2b490:	435a      	muls	r2, r3
   2b492:	687b      	ldr	r3, [r7, #4]
   2b494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2b496:	18d3      	adds	r3, r2, r3
}
   2b498:	0018      	movs	r0, r3
   2b49a:	46bd      	mov	sp, r7
   2b49c:	b002      	add	sp, #8
   2b49e:	bd80      	pop	{r7, pc}

0002b4a0 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2b4a0:	b580      	push	{r7, lr}
   2b4a2:	b086      	sub	sp, #24
   2b4a4:	af00      	add	r7, sp, #0
   2b4a6:	6078      	str	r0, [r7, #4]
   2b4a8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2b4aa:	683b      	ldr	r3, [r7, #0]
   2b4ac:	2b01      	cmp	r3, #1
   2b4ae:	d904      	bls.n	2b4ba <get_fat+0x1a>
   2b4b0:	687b      	ldr	r3, [r7, #4]
   2b4b2:	699a      	ldr	r2, [r3, #24]
   2b4b4:	683b      	ldr	r3, [r7, #0]
   2b4b6:	429a      	cmp	r2, r3
   2b4b8:	d801      	bhi.n	2b4be <get_fat+0x1e>
		return 1;
   2b4ba:	2301      	movs	r3, #1
   2b4bc:	e09f      	b.n	2b5fe <get_fat+0x15e>

	switch (fs->fs_type) {
   2b4be:	687b      	ldr	r3, [r7, #4]
   2b4c0:	781b      	ldrb	r3, [r3, #0]
   2b4c2:	2b02      	cmp	r3, #2
   2b4c4:	d048      	beq.n	2b558 <get_fat+0xb8>
   2b4c6:	2b03      	cmp	r3, #3
   2b4c8:	d067      	beq.n	2b59a <get_fat+0xfa>
   2b4ca:	2b01      	cmp	r3, #1
   2b4cc:	d000      	beq.n	2b4d0 <get_fat+0x30>
   2b4ce:	e094      	b.n	2b5fa <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2b4d0:	683b      	ldr	r3, [r7, #0]
   2b4d2:	617b      	str	r3, [r7, #20]
   2b4d4:	697b      	ldr	r3, [r7, #20]
   2b4d6:	085b      	lsrs	r3, r3, #1
   2b4d8:	697a      	ldr	r2, [r7, #20]
   2b4da:	18d3      	adds	r3, r2, r3
   2b4dc:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b4de:	687b      	ldr	r3, [r7, #4]
   2b4e0:	6a1a      	ldr	r2, [r3, #32]
   2b4e2:	697b      	ldr	r3, [r7, #20]
   2b4e4:	0a5b      	lsrs	r3, r3, #9
   2b4e6:	18d2      	adds	r2, r2, r3
   2b4e8:	687b      	ldr	r3, [r7, #4]
   2b4ea:	0011      	movs	r1, r2
   2b4ec:	0018      	movs	r0, r3
   2b4ee:	4b46      	ldr	r3, [pc, #280]	; (2b608 <get_fat+0x168>)
   2b4f0:	4798      	blx	r3
   2b4f2:	1e03      	subs	r3, r0, #0
   2b4f4:	d000      	beq.n	2b4f8 <get_fat+0x58>
   2b4f6:	e079      	b.n	2b5ec <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2b4f8:	697b      	ldr	r3, [r7, #20]
   2b4fa:	05db      	lsls	r3, r3, #23
   2b4fc:	0ddb      	lsrs	r3, r3, #23
   2b4fe:	687a      	ldr	r2, [r7, #4]
   2b500:	2130      	movs	r1, #48	; 0x30
   2b502:	18d3      	adds	r3, r2, r3
   2b504:	185b      	adds	r3, r3, r1
   2b506:	781b      	ldrb	r3, [r3, #0]
   2b508:	613b      	str	r3, [r7, #16]
   2b50a:	697b      	ldr	r3, [r7, #20]
   2b50c:	3301      	adds	r3, #1
   2b50e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b510:	687b      	ldr	r3, [r7, #4]
   2b512:	6a1a      	ldr	r2, [r3, #32]
   2b514:	697b      	ldr	r3, [r7, #20]
   2b516:	0a5b      	lsrs	r3, r3, #9
   2b518:	18d2      	adds	r2, r2, r3
   2b51a:	687b      	ldr	r3, [r7, #4]
   2b51c:	0011      	movs	r1, r2
   2b51e:	0018      	movs	r0, r3
   2b520:	4b39      	ldr	r3, [pc, #228]	; (2b608 <get_fat+0x168>)
   2b522:	4798      	blx	r3
   2b524:	1e03      	subs	r3, r0, #0
   2b526:	d163      	bne.n	2b5f0 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2b528:	697b      	ldr	r3, [r7, #20]
   2b52a:	05db      	lsls	r3, r3, #23
   2b52c:	0ddb      	lsrs	r3, r3, #23
   2b52e:	687a      	ldr	r2, [r7, #4]
   2b530:	2130      	movs	r1, #48	; 0x30
   2b532:	18d3      	adds	r3, r2, r3
   2b534:	185b      	adds	r3, r3, r1
   2b536:	781b      	ldrb	r3, [r3, #0]
   2b538:	021b      	lsls	r3, r3, #8
   2b53a:	001a      	movs	r2, r3
   2b53c:	693b      	ldr	r3, [r7, #16]
   2b53e:	4313      	orrs	r3, r2
   2b540:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2b542:	683b      	ldr	r3, [r7, #0]
   2b544:	2201      	movs	r2, #1
   2b546:	4013      	ands	r3, r2
   2b548:	d002      	beq.n	2b550 <get_fat+0xb0>
   2b54a:	693b      	ldr	r3, [r7, #16]
   2b54c:	091b      	lsrs	r3, r3, #4
   2b54e:	e056      	b.n	2b5fe <get_fat+0x15e>
   2b550:	693b      	ldr	r3, [r7, #16]
   2b552:	051b      	lsls	r3, r3, #20
   2b554:	0d1b      	lsrs	r3, r3, #20
   2b556:	e052      	b.n	2b5fe <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b558:	687b      	ldr	r3, [r7, #4]
   2b55a:	6a1a      	ldr	r2, [r3, #32]
   2b55c:	683b      	ldr	r3, [r7, #0]
   2b55e:	0a1b      	lsrs	r3, r3, #8
   2b560:	18d2      	adds	r2, r2, r3
   2b562:	687b      	ldr	r3, [r7, #4]
   2b564:	0011      	movs	r1, r2
   2b566:	0018      	movs	r0, r3
   2b568:	4b27      	ldr	r3, [pc, #156]	; (2b608 <get_fat+0x168>)
   2b56a:	4798      	blx	r3
   2b56c:	1e03      	subs	r3, r0, #0
   2b56e:	d141      	bne.n	2b5f4 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2b570:	683b      	ldr	r3, [r7, #0]
   2b572:	005a      	lsls	r2, r3, #1
   2b574:	23ff      	movs	r3, #255	; 0xff
   2b576:	005b      	lsls	r3, r3, #1
   2b578:	4013      	ands	r3, r2
   2b57a:	3330      	adds	r3, #48	; 0x30
   2b57c:	687a      	ldr	r2, [r7, #4]
   2b57e:	18d3      	adds	r3, r2, r3
   2b580:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2b582:	68fb      	ldr	r3, [r7, #12]
   2b584:	3301      	adds	r3, #1
   2b586:	781b      	ldrb	r3, [r3, #0]
   2b588:	021b      	lsls	r3, r3, #8
   2b58a:	b21a      	sxth	r2, r3
   2b58c:	68fb      	ldr	r3, [r7, #12]
   2b58e:	781b      	ldrb	r3, [r3, #0]
   2b590:	b21b      	sxth	r3, r3
   2b592:	4313      	orrs	r3, r2
   2b594:	b21b      	sxth	r3, r3
   2b596:	b29b      	uxth	r3, r3
   2b598:	e031      	b.n	2b5fe <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b59a:	687b      	ldr	r3, [r7, #4]
   2b59c:	6a1a      	ldr	r2, [r3, #32]
   2b59e:	683b      	ldr	r3, [r7, #0]
   2b5a0:	09db      	lsrs	r3, r3, #7
   2b5a2:	18d2      	adds	r2, r2, r3
   2b5a4:	687b      	ldr	r3, [r7, #4]
   2b5a6:	0011      	movs	r1, r2
   2b5a8:	0018      	movs	r0, r3
   2b5aa:	4b17      	ldr	r3, [pc, #92]	; (2b608 <get_fat+0x168>)
   2b5ac:	4798      	blx	r3
   2b5ae:	1e03      	subs	r3, r0, #0
   2b5b0:	d122      	bne.n	2b5f8 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2b5b2:	683b      	ldr	r3, [r7, #0]
   2b5b4:	009a      	lsls	r2, r3, #2
   2b5b6:	23fe      	movs	r3, #254	; 0xfe
   2b5b8:	005b      	lsls	r3, r3, #1
   2b5ba:	4013      	ands	r3, r2
   2b5bc:	3330      	adds	r3, #48	; 0x30
   2b5be:	687a      	ldr	r2, [r7, #4]
   2b5c0:	18d3      	adds	r3, r2, r3
   2b5c2:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2b5c4:	68fb      	ldr	r3, [r7, #12]
   2b5c6:	3303      	adds	r3, #3
   2b5c8:	781b      	ldrb	r3, [r3, #0]
   2b5ca:	061a      	lsls	r2, r3, #24
   2b5cc:	68fb      	ldr	r3, [r7, #12]
   2b5ce:	3302      	adds	r3, #2
   2b5d0:	781b      	ldrb	r3, [r3, #0]
   2b5d2:	041b      	lsls	r3, r3, #16
   2b5d4:	4313      	orrs	r3, r2
   2b5d6:	68fa      	ldr	r2, [r7, #12]
   2b5d8:	3201      	adds	r2, #1
   2b5da:	7812      	ldrb	r2, [r2, #0]
   2b5dc:	0212      	lsls	r2, r2, #8
   2b5de:	4313      	orrs	r3, r2
   2b5e0:	68fa      	ldr	r2, [r7, #12]
   2b5e2:	7812      	ldrb	r2, [r2, #0]
   2b5e4:	4313      	orrs	r3, r2
   2b5e6:	011b      	lsls	r3, r3, #4
   2b5e8:	091b      	lsrs	r3, r3, #4
   2b5ea:	e008      	b.n	2b5fe <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b5ec:	46c0      	nop			; (mov r8, r8)
   2b5ee:	e004      	b.n	2b5fa <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2b5f0:	46c0      	nop			; (mov r8, r8)
   2b5f2:	e002      	b.n	2b5fa <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2b5f4:	46c0      	nop			; (mov r8, r8)
   2b5f6:	e000      	b.n	2b5fa <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2b5f8:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2b5fa:	2301      	movs	r3, #1
   2b5fc:	425b      	negs	r3, r3
}
   2b5fe:	0018      	movs	r0, r3
   2b600:	46bd      	mov	sp, r7
   2b602:	b006      	add	sp, #24
   2b604:	bd80      	pop	{r7, pc}
   2b606:	46c0      	nop			; (mov r8, r8)
   2b608:	0002b209 	.word	0x0002b209

0002b60c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2b60c:	b590      	push	{r4, r7, lr}
   2b60e:	b089      	sub	sp, #36	; 0x24
   2b610:	af00      	add	r7, sp, #0
   2b612:	60f8      	str	r0, [r7, #12]
   2b614:	60b9      	str	r1, [r7, #8]
   2b616:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b618:	68bb      	ldr	r3, [r7, #8]
   2b61a:	2b01      	cmp	r3, #1
   2b61c:	d904      	bls.n	2b628 <put_fat+0x1c>
   2b61e:	68fb      	ldr	r3, [r7, #12]
   2b620:	699a      	ldr	r2, [r3, #24]
   2b622:	68bb      	ldr	r3, [r7, #8]
   2b624:	429a      	cmp	r2, r3
   2b626:	d804      	bhi.n	2b632 <put_fat+0x26>
		res = FR_INT_ERR;
   2b628:	231f      	movs	r3, #31
   2b62a:	18fb      	adds	r3, r7, r3
   2b62c:	2202      	movs	r2, #2
   2b62e:	701a      	strb	r2, [r3, #0]
   2b630:	e100      	b.n	2b834 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2b632:	68fb      	ldr	r3, [r7, #12]
   2b634:	781b      	ldrb	r3, [r3, #0]
   2b636:	2b02      	cmp	r3, #2
   2b638:	d100      	bne.n	2b63c <put_fat+0x30>
   2b63a:	e078      	b.n	2b72e <put_fat+0x122>
   2b63c:	2b03      	cmp	r3, #3
   2b63e:	d100      	bne.n	2b642 <put_fat+0x36>
   2b640:	e09e      	b.n	2b780 <put_fat+0x174>
   2b642:	2b01      	cmp	r3, #1
   2b644:	d000      	beq.n	2b648 <put_fat+0x3c>
   2b646:	e0e6      	b.n	2b816 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2b648:	68bb      	ldr	r3, [r7, #8]
   2b64a:	61bb      	str	r3, [r7, #24]
   2b64c:	69bb      	ldr	r3, [r7, #24]
   2b64e:	085b      	lsrs	r3, r3, #1
   2b650:	69ba      	ldr	r2, [r7, #24]
   2b652:	18d3      	adds	r3, r2, r3
   2b654:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b656:	68fb      	ldr	r3, [r7, #12]
   2b658:	6a1a      	ldr	r2, [r3, #32]
   2b65a:	69bb      	ldr	r3, [r7, #24]
   2b65c:	0a5b      	lsrs	r3, r3, #9
   2b65e:	18d2      	adds	r2, r2, r3
   2b660:	231f      	movs	r3, #31
   2b662:	18fc      	adds	r4, r7, r3
   2b664:	68fb      	ldr	r3, [r7, #12]
   2b666:	0011      	movs	r1, r2
   2b668:	0018      	movs	r0, r3
   2b66a:	4b76      	ldr	r3, [pc, #472]	; (2b844 <put_fat+0x238>)
   2b66c:	4798      	blx	r3
   2b66e:	0003      	movs	r3, r0
   2b670:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b672:	231f      	movs	r3, #31
   2b674:	18fb      	adds	r3, r7, r3
   2b676:	781b      	ldrb	r3, [r3, #0]
   2b678:	2b00      	cmp	r3, #0
   2b67a:	d000      	beq.n	2b67e <put_fat+0x72>
   2b67c:	e0d0      	b.n	2b820 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2b67e:	69bb      	ldr	r3, [r7, #24]
   2b680:	05db      	lsls	r3, r3, #23
   2b682:	0ddb      	lsrs	r3, r3, #23
   2b684:	3330      	adds	r3, #48	; 0x30
   2b686:	68fa      	ldr	r2, [r7, #12]
   2b688:	18d3      	adds	r3, r2, r3
   2b68a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2b68c:	68bb      	ldr	r3, [r7, #8]
   2b68e:	2201      	movs	r2, #1
   2b690:	4013      	ands	r3, r2
   2b692:	d00d      	beq.n	2b6b0 <put_fat+0xa4>
   2b694:	697b      	ldr	r3, [r7, #20]
   2b696:	781b      	ldrb	r3, [r3, #0]
   2b698:	b25b      	sxtb	r3, r3
   2b69a:	220f      	movs	r2, #15
   2b69c:	4013      	ands	r3, r2
   2b69e:	b25a      	sxtb	r2, r3
   2b6a0:	687b      	ldr	r3, [r7, #4]
   2b6a2:	b2db      	uxtb	r3, r3
   2b6a4:	011b      	lsls	r3, r3, #4
   2b6a6:	b25b      	sxtb	r3, r3
   2b6a8:	4313      	orrs	r3, r2
   2b6aa:	b25b      	sxtb	r3, r3
   2b6ac:	b2db      	uxtb	r3, r3
   2b6ae:	e001      	b.n	2b6b4 <put_fat+0xa8>
   2b6b0:	687b      	ldr	r3, [r7, #4]
   2b6b2:	b2db      	uxtb	r3, r3
   2b6b4:	697a      	ldr	r2, [r7, #20]
   2b6b6:	7013      	strb	r3, [r2, #0]
			bc++;
   2b6b8:	69bb      	ldr	r3, [r7, #24]
   2b6ba:	3301      	adds	r3, #1
   2b6bc:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2b6be:	68fb      	ldr	r3, [r7, #12]
   2b6c0:	2201      	movs	r2, #1
   2b6c2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2b6c4:	68fb      	ldr	r3, [r7, #12]
   2b6c6:	6a1a      	ldr	r2, [r3, #32]
   2b6c8:	69bb      	ldr	r3, [r7, #24]
   2b6ca:	0a5b      	lsrs	r3, r3, #9
   2b6cc:	18d2      	adds	r2, r2, r3
   2b6ce:	231f      	movs	r3, #31
   2b6d0:	18fc      	adds	r4, r7, r3
   2b6d2:	68fb      	ldr	r3, [r7, #12]
   2b6d4:	0011      	movs	r1, r2
   2b6d6:	0018      	movs	r0, r3
   2b6d8:	4b5a      	ldr	r3, [pc, #360]	; (2b844 <put_fat+0x238>)
   2b6da:	4798      	blx	r3
   2b6dc:	0003      	movs	r3, r0
   2b6de:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b6e0:	231f      	movs	r3, #31
   2b6e2:	18fb      	adds	r3, r7, r3
   2b6e4:	781b      	ldrb	r3, [r3, #0]
   2b6e6:	2b00      	cmp	r3, #0
   2b6e8:	d000      	beq.n	2b6ec <put_fat+0xe0>
   2b6ea:	e09b      	b.n	2b824 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2b6ec:	69bb      	ldr	r3, [r7, #24]
   2b6ee:	05db      	lsls	r3, r3, #23
   2b6f0:	0ddb      	lsrs	r3, r3, #23
   2b6f2:	3330      	adds	r3, #48	; 0x30
   2b6f4:	68fa      	ldr	r2, [r7, #12]
   2b6f6:	18d3      	adds	r3, r2, r3
   2b6f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2b6fa:	68bb      	ldr	r3, [r7, #8]
   2b6fc:	2201      	movs	r2, #1
   2b6fe:	4013      	ands	r3, r2
   2b700:	d003      	beq.n	2b70a <put_fat+0xfe>
   2b702:	687b      	ldr	r3, [r7, #4]
   2b704:	091b      	lsrs	r3, r3, #4
   2b706:	b2db      	uxtb	r3, r3
   2b708:	e00e      	b.n	2b728 <put_fat+0x11c>
   2b70a:	697b      	ldr	r3, [r7, #20]
   2b70c:	781b      	ldrb	r3, [r3, #0]
   2b70e:	b25b      	sxtb	r3, r3
   2b710:	220f      	movs	r2, #15
   2b712:	4393      	bics	r3, r2
   2b714:	b25a      	sxtb	r2, r3
   2b716:	687b      	ldr	r3, [r7, #4]
   2b718:	0a1b      	lsrs	r3, r3, #8
   2b71a:	b25b      	sxtb	r3, r3
   2b71c:	210f      	movs	r1, #15
   2b71e:	400b      	ands	r3, r1
   2b720:	b25b      	sxtb	r3, r3
   2b722:	4313      	orrs	r3, r2
   2b724:	b25b      	sxtb	r3, r3
   2b726:	b2db      	uxtb	r3, r3
   2b728:	697a      	ldr	r2, [r7, #20]
   2b72a:	7013      	strb	r3, [r2, #0]
			break;
   2b72c:	e07f      	b.n	2b82e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2b72e:	68fb      	ldr	r3, [r7, #12]
   2b730:	6a1a      	ldr	r2, [r3, #32]
   2b732:	68bb      	ldr	r3, [r7, #8]
   2b734:	0a1b      	lsrs	r3, r3, #8
   2b736:	18d2      	adds	r2, r2, r3
   2b738:	231f      	movs	r3, #31
   2b73a:	18fc      	adds	r4, r7, r3
   2b73c:	68fb      	ldr	r3, [r7, #12]
   2b73e:	0011      	movs	r1, r2
   2b740:	0018      	movs	r0, r3
   2b742:	4b40      	ldr	r3, [pc, #256]	; (2b844 <put_fat+0x238>)
   2b744:	4798      	blx	r3
   2b746:	0003      	movs	r3, r0
   2b748:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b74a:	231f      	movs	r3, #31
   2b74c:	18fb      	adds	r3, r7, r3
   2b74e:	781b      	ldrb	r3, [r3, #0]
   2b750:	2b00      	cmp	r3, #0
   2b752:	d169      	bne.n	2b828 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2b754:	68bb      	ldr	r3, [r7, #8]
   2b756:	005a      	lsls	r2, r3, #1
   2b758:	23ff      	movs	r3, #255	; 0xff
   2b75a:	005b      	lsls	r3, r3, #1
   2b75c:	4013      	ands	r3, r2
   2b75e:	3330      	adds	r3, #48	; 0x30
   2b760:	68fa      	ldr	r2, [r7, #12]
   2b762:	18d3      	adds	r3, r2, r3
   2b764:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2b766:	687b      	ldr	r3, [r7, #4]
   2b768:	b2da      	uxtb	r2, r3
   2b76a:	697b      	ldr	r3, [r7, #20]
   2b76c:	701a      	strb	r2, [r3, #0]
   2b76e:	697b      	ldr	r3, [r7, #20]
   2b770:	3301      	adds	r3, #1
   2b772:	687a      	ldr	r2, [r7, #4]
   2b774:	b292      	uxth	r2, r2
   2b776:	0a12      	lsrs	r2, r2, #8
   2b778:	b292      	uxth	r2, r2
   2b77a:	b2d2      	uxtb	r2, r2
   2b77c:	701a      	strb	r2, [r3, #0]
			break;
   2b77e:	e056      	b.n	2b82e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2b780:	68fb      	ldr	r3, [r7, #12]
   2b782:	6a1a      	ldr	r2, [r3, #32]
   2b784:	68bb      	ldr	r3, [r7, #8]
   2b786:	09db      	lsrs	r3, r3, #7
   2b788:	18d2      	adds	r2, r2, r3
   2b78a:	231f      	movs	r3, #31
   2b78c:	18fc      	adds	r4, r7, r3
   2b78e:	68fb      	ldr	r3, [r7, #12]
   2b790:	0011      	movs	r1, r2
   2b792:	0018      	movs	r0, r3
   2b794:	4b2b      	ldr	r3, [pc, #172]	; (2b844 <put_fat+0x238>)
   2b796:	4798      	blx	r3
   2b798:	0003      	movs	r3, r0
   2b79a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b79c:	231f      	movs	r3, #31
   2b79e:	18fb      	adds	r3, r7, r3
   2b7a0:	781b      	ldrb	r3, [r3, #0]
   2b7a2:	2b00      	cmp	r3, #0
   2b7a4:	d142      	bne.n	2b82c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2b7a6:	68bb      	ldr	r3, [r7, #8]
   2b7a8:	009a      	lsls	r2, r3, #2
   2b7aa:	23fe      	movs	r3, #254	; 0xfe
   2b7ac:	005b      	lsls	r3, r3, #1
   2b7ae:	4013      	ands	r3, r2
   2b7b0:	3330      	adds	r3, #48	; 0x30
   2b7b2:	68fa      	ldr	r2, [r7, #12]
   2b7b4:	18d3      	adds	r3, r2, r3
   2b7b6:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2b7b8:	697b      	ldr	r3, [r7, #20]
   2b7ba:	3303      	adds	r3, #3
   2b7bc:	781b      	ldrb	r3, [r3, #0]
   2b7be:	061a      	lsls	r2, r3, #24
   2b7c0:	697b      	ldr	r3, [r7, #20]
   2b7c2:	3302      	adds	r3, #2
   2b7c4:	781b      	ldrb	r3, [r3, #0]
   2b7c6:	041b      	lsls	r3, r3, #16
   2b7c8:	4313      	orrs	r3, r2
   2b7ca:	697a      	ldr	r2, [r7, #20]
   2b7cc:	3201      	adds	r2, #1
   2b7ce:	7812      	ldrb	r2, [r2, #0]
   2b7d0:	0212      	lsls	r2, r2, #8
   2b7d2:	4313      	orrs	r3, r2
   2b7d4:	697a      	ldr	r2, [r7, #20]
   2b7d6:	7812      	ldrb	r2, [r2, #0]
   2b7d8:	4313      	orrs	r3, r2
   2b7da:	0f1b      	lsrs	r3, r3, #28
   2b7dc:	071b      	lsls	r3, r3, #28
   2b7de:	687a      	ldr	r2, [r7, #4]
   2b7e0:	4313      	orrs	r3, r2
   2b7e2:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2b7e4:	687b      	ldr	r3, [r7, #4]
   2b7e6:	b2da      	uxtb	r2, r3
   2b7e8:	697b      	ldr	r3, [r7, #20]
   2b7ea:	701a      	strb	r2, [r3, #0]
   2b7ec:	697b      	ldr	r3, [r7, #20]
   2b7ee:	3301      	adds	r3, #1
   2b7f0:	687a      	ldr	r2, [r7, #4]
   2b7f2:	b292      	uxth	r2, r2
   2b7f4:	0a12      	lsrs	r2, r2, #8
   2b7f6:	b292      	uxth	r2, r2
   2b7f8:	b2d2      	uxtb	r2, r2
   2b7fa:	701a      	strb	r2, [r3, #0]
   2b7fc:	697b      	ldr	r3, [r7, #20]
   2b7fe:	3302      	adds	r3, #2
   2b800:	687a      	ldr	r2, [r7, #4]
   2b802:	0c12      	lsrs	r2, r2, #16
   2b804:	b2d2      	uxtb	r2, r2
   2b806:	701a      	strb	r2, [r3, #0]
   2b808:	697b      	ldr	r3, [r7, #20]
   2b80a:	3303      	adds	r3, #3
   2b80c:	687a      	ldr	r2, [r7, #4]
   2b80e:	0e12      	lsrs	r2, r2, #24
   2b810:	b2d2      	uxtb	r2, r2
   2b812:	701a      	strb	r2, [r3, #0]
			break;
   2b814:	e00b      	b.n	2b82e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2b816:	231f      	movs	r3, #31
   2b818:	18fb      	adds	r3, r7, r3
   2b81a:	2202      	movs	r2, #2
   2b81c:	701a      	strb	r2, [r3, #0]
   2b81e:	e006      	b.n	2b82e <put_fat+0x222>
			if (res != FR_OK) break;
   2b820:	46c0      	nop			; (mov r8, r8)
   2b822:	e004      	b.n	2b82e <put_fat+0x222>
			if (res != FR_OK) break;
   2b824:	46c0      	nop			; (mov r8, r8)
   2b826:	e002      	b.n	2b82e <put_fat+0x222>
			if (res != FR_OK) break;
   2b828:	46c0      	nop			; (mov r8, r8)
   2b82a:	e000      	b.n	2b82e <put_fat+0x222>
			if (res != FR_OK) break;
   2b82c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2b82e:	68fb      	ldr	r3, [r7, #12]
   2b830:	2201      	movs	r2, #1
   2b832:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2b834:	231f      	movs	r3, #31
   2b836:	18fb      	adds	r3, r7, r3
   2b838:	781b      	ldrb	r3, [r3, #0]
}
   2b83a:	0018      	movs	r0, r3
   2b83c:	46bd      	mov	sp, r7
   2b83e:	b009      	add	sp, #36	; 0x24
   2b840:	bd90      	pop	{r4, r7, pc}
   2b842:	46c0      	nop			; (mov r8, r8)
   2b844:	0002b209 	.word	0x0002b209

0002b848 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2b848:	b590      	push	{r4, r7, lr}
   2b84a:	b085      	sub	sp, #20
   2b84c:	af00      	add	r7, sp, #0
   2b84e:	6078      	str	r0, [r7, #4]
   2b850:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2b852:	683b      	ldr	r3, [r7, #0]
   2b854:	2b01      	cmp	r3, #1
   2b856:	d904      	bls.n	2b862 <remove_chain+0x1a>
   2b858:	687b      	ldr	r3, [r7, #4]
   2b85a:	699a      	ldr	r2, [r3, #24]
   2b85c:	683b      	ldr	r3, [r7, #0]
   2b85e:	429a      	cmp	r2, r3
   2b860:	d804      	bhi.n	2b86c <remove_chain+0x24>
		res = FR_INT_ERR;
   2b862:	230f      	movs	r3, #15
   2b864:	18fb      	adds	r3, r7, r3
   2b866:	2202      	movs	r2, #2
   2b868:	701a      	strb	r2, [r3, #0]
   2b86a:	e045      	b.n	2b8f8 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2b86c:	230f      	movs	r3, #15
   2b86e:	18fb      	adds	r3, r7, r3
   2b870:	2200      	movs	r2, #0
   2b872:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b874:	e037      	b.n	2b8e6 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2b876:	683a      	ldr	r2, [r7, #0]
   2b878:	687b      	ldr	r3, [r7, #4]
   2b87a:	0011      	movs	r1, r2
   2b87c:	0018      	movs	r0, r3
   2b87e:	4b22      	ldr	r3, [pc, #136]	; (2b908 <remove_chain+0xc0>)
   2b880:	4798      	blx	r3
   2b882:	0003      	movs	r3, r0
   2b884:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2b886:	68bb      	ldr	r3, [r7, #8]
   2b888:	2b00      	cmp	r3, #0
   2b88a:	d032      	beq.n	2b8f2 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2b88c:	68bb      	ldr	r3, [r7, #8]
   2b88e:	2b01      	cmp	r3, #1
   2b890:	d104      	bne.n	2b89c <remove_chain+0x54>
   2b892:	230f      	movs	r3, #15
   2b894:	18fb      	adds	r3, r7, r3
   2b896:	2202      	movs	r2, #2
   2b898:	701a      	strb	r2, [r3, #0]
   2b89a:	e02d      	b.n	2b8f8 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2b89c:	68bb      	ldr	r3, [r7, #8]
   2b89e:	3301      	adds	r3, #1
   2b8a0:	d104      	bne.n	2b8ac <remove_chain+0x64>
   2b8a2:	230f      	movs	r3, #15
   2b8a4:	18fb      	adds	r3, r7, r3
   2b8a6:	2201      	movs	r2, #1
   2b8a8:	701a      	strb	r2, [r3, #0]
   2b8aa:	e025      	b.n	2b8f8 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2b8ac:	230f      	movs	r3, #15
   2b8ae:	18fc      	adds	r4, r7, r3
   2b8b0:	6839      	ldr	r1, [r7, #0]
   2b8b2:	687b      	ldr	r3, [r7, #4]
   2b8b4:	2200      	movs	r2, #0
   2b8b6:	0018      	movs	r0, r3
   2b8b8:	4b14      	ldr	r3, [pc, #80]	; (2b90c <remove_chain+0xc4>)
   2b8ba:	4798      	blx	r3
   2b8bc:	0003      	movs	r3, r0
   2b8be:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b8c0:	230f      	movs	r3, #15
   2b8c2:	18fb      	adds	r3, r7, r3
   2b8c4:	781b      	ldrb	r3, [r3, #0]
   2b8c6:	2b00      	cmp	r3, #0
   2b8c8:	d115      	bne.n	2b8f6 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2b8ca:	687b      	ldr	r3, [r7, #4]
   2b8cc:	691b      	ldr	r3, [r3, #16]
   2b8ce:	3301      	adds	r3, #1
   2b8d0:	d007      	beq.n	2b8e2 <remove_chain+0x9a>
				fs->free_clust++;
   2b8d2:	687b      	ldr	r3, [r7, #4]
   2b8d4:	691b      	ldr	r3, [r3, #16]
   2b8d6:	1c5a      	adds	r2, r3, #1
   2b8d8:	687b      	ldr	r3, [r7, #4]
   2b8da:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2b8dc:	687b      	ldr	r3, [r7, #4]
   2b8de:	2201      	movs	r2, #1
   2b8e0:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2b8e2:	68bb      	ldr	r3, [r7, #8]
   2b8e4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2b8e6:	687b      	ldr	r3, [r7, #4]
   2b8e8:	699a      	ldr	r2, [r3, #24]
   2b8ea:	683b      	ldr	r3, [r7, #0]
   2b8ec:	429a      	cmp	r2, r3
   2b8ee:	d8c2      	bhi.n	2b876 <remove_chain+0x2e>
   2b8f0:	e002      	b.n	2b8f8 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2b8f2:	46c0      	nop			; (mov r8, r8)
   2b8f4:	e000      	b.n	2b8f8 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2b8f6:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2b8f8:	230f      	movs	r3, #15
   2b8fa:	18fb      	adds	r3, r7, r3
   2b8fc:	781b      	ldrb	r3, [r3, #0]
}
   2b8fe:	0018      	movs	r0, r3
   2b900:	46bd      	mov	sp, r7
   2b902:	b005      	add	sp, #20
   2b904:	bd90      	pop	{r4, r7, pc}
   2b906:	46c0      	nop			; (mov r8, r8)
   2b908:	0002b4a1 	.word	0x0002b4a1
   2b90c:	0002b60d 	.word	0x0002b60d

0002b910 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2b910:	b590      	push	{r4, r7, lr}
   2b912:	b087      	sub	sp, #28
   2b914:	af00      	add	r7, sp, #0
   2b916:	6078      	str	r0, [r7, #4]
   2b918:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2b91a:	683b      	ldr	r3, [r7, #0]
   2b91c:	2b00      	cmp	r3, #0
   2b91e:	d10d      	bne.n	2b93c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2b920:	687b      	ldr	r3, [r7, #4]
   2b922:	68db      	ldr	r3, [r3, #12]
   2b924:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2b926:	693b      	ldr	r3, [r7, #16]
   2b928:	2b00      	cmp	r3, #0
   2b92a:	d004      	beq.n	2b936 <create_chain+0x26>
   2b92c:	687b      	ldr	r3, [r7, #4]
   2b92e:	699a      	ldr	r2, [r3, #24]
   2b930:	693b      	ldr	r3, [r7, #16]
   2b932:	429a      	cmp	r2, r3
   2b934:	d818      	bhi.n	2b968 <create_chain+0x58>
   2b936:	2301      	movs	r3, #1
   2b938:	613b      	str	r3, [r7, #16]
   2b93a:	e015      	b.n	2b968 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2b93c:	683a      	ldr	r2, [r7, #0]
   2b93e:	687b      	ldr	r3, [r7, #4]
   2b940:	0011      	movs	r1, r2
   2b942:	0018      	movs	r0, r3
   2b944:	4b3e      	ldr	r3, [pc, #248]	; (2ba40 <create_chain+0x130>)
   2b946:	4798      	blx	r3
   2b948:	0003      	movs	r3, r0
   2b94a:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2b94c:	68bb      	ldr	r3, [r7, #8]
   2b94e:	2b01      	cmp	r3, #1
   2b950:	d801      	bhi.n	2b956 <create_chain+0x46>
   2b952:	2301      	movs	r3, #1
   2b954:	e070      	b.n	2ba38 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2b956:	687b      	ldr	r3, [r7, #4]
   2b958:	699a      	ldr	r2, [r3, #24]
   2b95a:	68bb      	ldr	r3, [r7, #8]
   2b95c:	429a      	cmp	r2, r3
   2b95e:	d901      	bls.n	2b964 <create_chain+0x54>
   2b960:	68bb      	ldr	r3, [r7, #8]
   2b962:	e069      	b.n	2ba38 <create_chain+0x128>
		scl = clst;
   2b964:	683b      	ldr	r3, [r7, #0]
   2b966:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2b968:	693b      	ldr	r3, [r7, #16]
   2b96a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2b96c:	697b      	ldr	r3, [r7, #20]
   2b96e:	3301      	adds	r3, #1
   2b970:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2b972:	687b      	ldr	r3, [r7, #4]
   2b974:	699a      	ldr	r2, [r3, #24]
   2b976:	697b      	ldr	r3, [r7, #20]
   2b978:	429a      	cmp	r2, r3
   2b97a:	d807      	bhi.n	2b98c <create_chain+0x7c>
			ncl = 2;
   2b97c:	2302      	movs	r3, #2
   2b97e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2b980:	697a      	ldr	r2, [r7, #20]
   2b982:	693b      	ldr	r3, [r7, #16]
   2b984:	429a      	cmp	r2, r3
   2b986:	d901      	bls.n	2b98c <create_chain+0x7c>
   2b988:	2300      	movs	r3, #0
   2b98a:	e055      	b.n	2ba38 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2b98c:	697a      	ldr	r2, [r7, #20]
   2b98e:	687b      	ldr	r3, [r7, #4]
   2b990:	0011      	movs	r1, r2
   2b992:	0018      	movs	r0, r3
   2b994:	4b2a      	ldr	r3, [pc, #168]	; (2ba40 <create_chain+0x130>)
   2b996:	4798      	blx	r3
   2b998:	0003      	movs	r3, r0
   2b99a:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2b99c:	68bb      	ldr	r3, [r7, #8]
   2b99e:	2b00      	cmp	r3, #0
   2b9a0:	d00d      	beq.n	2b9be <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2b9a2:	68bb      	ldr	r3, [r7, #8]
   2b9a4:	3301      	adds	r3, #1
   2b9a6:	d002      	beq.n	2b9ae <create_chain+0x9e>
   2b9a8:	68bb      	ldr	r3, [r7, #8]
   2b9aa:	2b01      	cmp	r3, #1
   2b9ac:	d101      	bne.n	2b9b2 <create_chain+0xa2>
			return cs;
   2b9ae:	68bb      	ldr	r3, [r7, #8]
   2b9b0:	e042      	b.n	2ba38 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2b9b2:	697a      	ldr	r2, [r7, #20]
   2b9b4:	693b      	ldr	r3, [r7, #16]
   2b9b6:	429a      	cmp	r2, r3
   2b9b8:	d1d8      	bne.n	2b96c <create_chain+0x5c>
   2b9ba:	2300      	movs	r3, #0
   2b9bc:	e03c      	b.n	2ba38 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2b9be:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2b9c0:	230f      	movs	r3, #15
   2b9c2:	18fc      	adds	r4, r7, r3
   2b9c4:	4a1f      	ldr	r2, [pc, #124]	; (2ba44 <create_chain+0x134>)
   2b9c6:	6979      	ldr	r1, [r7, #20]
   2b9c8:	687b      	ldr	r3, [r7, #4]
   2b9ca:	0018      	movs	r0, r3
   2b9cc:	4b1e      	ldr	r3, [pc, #120]	; (2ba48 <create_chain+0x138>)
   2b9ce:	4798      	blx	r3
   2b9d0:	0003      	movs	r3, r0
   2b9d2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2b9d4:	230f      	movs	r3, #15
   2b9d6:	18fb      	adds	r3, r7, r3
   2b9d8:	781b      	ldrb	r3, [r3, #0]
   2b9da:	2b00      	cmp	r3, #0
   2b9dc:	d10c      	bne.n	2b9f8 <create_chain+0xe8>
   2b9de:	683b      	ldr	r3, [r7, #0]
   2b9e0:	2b00      	cmp	r3, #0
   2b9e2:	d009      	beq.n	2b9f8 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2b9e4:	230f      	movs	r3, #15
   2b9e6:	18fc      	adds	r4, r7, r3
   2b9e8:	697a      	ldr	r2, [r7, #20]
   2b9ea:	6839      	ldr	r1, [r7, #0]
   2b9ec:	687b      	ldr	r3, [r7, #4]
   2b9ee:	0018      	movs	r0, r3
   2b9f0:	4b15      	ldr	r3, [pc, #84]	; (2ba48 <create_chain+0x138>)
   2b9f2:	4798      	blx	r3
   2b9f4:	0003      	movs	r3, r0
   2b9f6:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2b9f8:	230f      	movs	r3, #15
   2b9fa:	18fb      	adds	r3, r7, r3
   2b9fc:	781b      	ldrb	r3, [r3, #0]
   2b9fe:	2b00      	cmp	r3, #0
   2ba00:	d10f      	bne.n	2ba22 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2ba02:	687b      	ldr	r3, [r7, #4]
   2ba04:	697a      	ldr	r2, [r7, #20]
   2ba06:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2ba08:	687b      	ldr	r3, [r7, #4]
   2ba0a:	691b      	ldr	r3, [r3, #16]
   2ba0c:	3301      	adds	r3, #1
   2ba0e:	d012      	beq.n	2ba36 <create_chain+0x126>
			fs->free_clust--;
   2ba10:	687b      	ldr	r3, [r7, #4]
   2ba12:	691b      	ldr	r3, [r3, #16]
   2ba14:	1e5a      	subs	r2, r3, #1
   2ba16:	687b      	ldr	r3, [r7, #4]
   2ba18:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2ba1a:	687b      	ldr	r3, [r7, #4]
   2ba1c:	2201      	movs	r2, #1
   2ba1e:	715a      	strb	r2, [r3, #5]
   2ba20:	e009      	b.n	2ba36 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2ba22:	230f      	movs	r3, #15
   2ba24:	18fb      	adds	r3, r7, r3
   2ba26:	781b      	ldrb	r3, [r3, #0]
   2ba28:	2b01      	cmp	r3, #1
   2ba2a:	d102      	bne.n	2ba32 <create_chain+0x122>
   2ba2c:	2301      	movs	r3, #1
   2ba2e:	425b      	negs	r3, r3
   2ba30:	e000      	b.n	2ba34 <create_chain+0x124>
   2ba32:	2301      	movs	r3, #1
   2ba34:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2ba36:	697b      	ldr	r3, [r7, #20]
}
   2ba38:	0018      	movs	r0, r3
   2ba3a:	46bd      	mov	sp, r7
   2ba3c:	b007      	add	sp, #28
   2ba3e:	bd90      	pop	{r4, r7, pc}
   2ba40:	0002b4a1 	.word	0x0002b4a1
   2ba44:	0fffffff 	.word	0x0fffffff
   2ba48:	0002b60d 	.word	0x0002b60d

0002ba4c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2ba4c:	b580      	push	{r7, lr}
   2ba4e:	b084      	sub	sp, #16
   2ba50:	af00      	add	r7, sp, #0
   2ba52:	6078      	str	r0, [r7, #4]
   2ba54:	000a      	movs	r2, r1
   2ba56:	1cbb      	adds	r3, r7, #2
   2ba58:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2ba5a:	687b      	ldr	r3, [r7, #4]
   2ba5c:	1cba      	adds	r2, r7, #2
   2ba5e:	8812      	ldrh	r2, [r2, #0]
   2ba60:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2ba62:	687b      	ldr	r3, [r7, #4]
   2ba64:	689b      	ldr	r3, [r3, #8]
   2ba66:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2ba68:	68fb      	ldr	r3, [r7, #12]
   2ba6a:	2b01      	cmp	r3, #1
   2ba6c:	d005      	beq.n	2ba7a <dir_sdi+0x2e>
   2ba6e:	687b      	ldr	r3, [r7, #4]
   2ba70:	681b      	ldr	r3, [r3, #0]
   2ba72:	699a      	ldr	r2, [r3, #24]
   2ba74:	68fb      	ldr	r3, [r7, #12]
   2ba76:	429a      	cmp	r2, r3
   2ba78:	d801      	bhi.n	2ba7e <dir_sdi+0x32>
		return FR_INT_ERR;
   2ba7a:	2302      	movs	r3, #2
   2ba7c:	e075      	b.n	2bb6a <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2ba7e:	68fb      	ldr	r3, [r7, #12]
   2ba80:	2b00      	cmp	r3, #0
   2ba82:	d108      	bne.n	2ba96 <dir_sdi+0x4a>
   2ba84:	687b      	ldr	r3, [r7, #4]
   2ba86:	681b      	ldr	r3, [r3, #0]
   2ba88:	781b      	ldrb	r3, [r3, #0]
   2ba8a:	2b03      	cmp	r3, #3
   2ba8c:	d103      	bne.n	2ba96 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2ba8e:	687b      	ldr	r3, [r7, #4]
   2ba90:	681b      	ldr	r3, [r3, #0]
   2ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ba94:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2ba96:	68fb      	ldr	r3, [r7, #12]
   2ba98:	2b00      	cmp	r3, #0
   2ba9a:	d116      	bne.n	2baca <dir_sdi+0x7e>
		dj->clust = clst;
   2ba9c:	687b      	ldr	r3, [r7, #4]
   2ba9e:	68fa      	ldr	r2, [r7, #12]
   2baa0:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2baa2:	687b      	ldr	r3, [r7, #4]
   2baa4:	681b      	ldr	r3, [r3, #0]
   2baa6:	891b      	ldrh	r3, [r3, #8]
   2baa8:	1cba      	adds	r2, r7, #2
   2baaa:	8812      	ldrh	r2, [r2, #0]
   2baac:	429a      	cmp	r2, r3
   2baae:	d301      	bcc.n	2bab4 <dir_sdi+0x68>
			return FR_INT_ERR;
   2bab0:	2302      	movs	r3, #2
   2bab2:	e05a      	b.n	2bb6a <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bab4:	687b      	ldr	r3, [r7, #4]
   2bab6:	681b      	ldr	r3, [r3, #0]
   2bab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2baba:	1cba      	adds	r2, r7, #2
   2babc:	8812      	ldrh	r2, [r2, #0]
   2babe:	0912      	lsrs	r2, r2, #4
   2bac0:	b292      	uxth	r2, r2
   2bac2:	189a      	adds	r2, r3, r2
   2bac4:	687b      	ldr	r3, [r7, #4]
   2bac6:	611a      	str	r2, [r3, #16]
   2bac8:	e042      	b.n	2bb50 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2baca:	687b      	ldr	r3, [r7, #4]
   2bacc:	681b      	ldr	r3, [r3, #0]
   2bace:	789b      	ldrb	r3, [r3, #2]
   2bad0:	b29a      	uxth	r2, r3
   2bad2:	230a      	movs	r3, #10
   2bad4:	18fb      	adds	r3, r7, r3
   2bad6:	0112      	lsls	r2, r2, #4
   2bad8:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2bada:	e020      	b.n	2bb1e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2badc:	687b      	ldr	r3, [r7, #4]
   2bade:	681b      	ldr	r3, [r3, #0]
   2bae0:	68fa      	ldr	r2, [r7, #12]
   2bae2:	0011      	movs	r1, r2
   2bae4:	0018      	movs	r0, r3
   2bae6:	4b23      	ldr	r3, [pc, #140]	; (2bb74 <dir_sdi+0x128>)
   2bae8:	4798      	blx	r3
   2baea:	0003      	movs	r3, r0
   2baec:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2baee:	68fb      	ldr	r3, [r7, #12]
   2baf0:	3301      	adds	r3, #1
   2baf2:	d101      	bne.n	2baf8 <dir_sdi+0xac>
   2baf4:	2301      	movs	r3, #1
   2baf6:	e038      	b.n	2bb6a <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2baf8:	68fb      	ldr	r3, [r7, #12]
   2bafa:	2b01      	cmp	r3, #1
   2bafc:	d905      	bls.n	2bb0a <dir_sdi+0xbe>
   2bafe:	687b      	ldr	r3, [r7, #4]
   2bb00:	681b      	ldr	r3, [r3, #0]
   2bb02:	699a      	ldr	r2, [r3, #24]
   2bb04:	68fb      	ldr	r3, [r7, #12]
   2bb06:	429a      	cmp	r2, r3
   2bb08:	d801      	bhi.n	2bb0e <dir_sdi+0xc2>
				return FR_INT_ERR;
   2bb0a:	2302      	movs	r3, #2
   2bb0c:	e02d      	b.n	2bb6a <dir_sdi+0x11e>
			idx -= ic;
   2bb0e:	1cbb      	adds	r3, r7, #2
   2bb10:	1cb9      	adds	r1, r7, #2
   2bb12:	220a      	movs	r2, #10
   2bb14:	18ba      	adds	r2, r7, r2
   2bb16:	8809      	ldrh	r1, [r1, #0]
   2bb18:	8812      	ldrh	r2, [r2, #0]
   2bb1a:	1a8a      	subs	r2, r1, r2
   2bb1c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2bb1e:	1cba      	adds	r2, r7, #2
   2bb20:	230a      	movs	r3, #10
   2bb22:	18fb      	adds	r3, r7, r3
   2bb24:	8812      	ldrh	r2, [r2, #0]
   2bb26:	881b      	ldrh	r3, [r3, #0]
   2bb28:	429a      	cmp	r2, r3
   2bb2a:	d2d7      	bcs.n	2badc <dir_sdi+0x90>
		}
		dj->clust = clst;
   2bb2c:	687b      	ldr	r3, [r7, #4]
   2bb2e:	68fa      	ldr	r2, [r7, #12]
   2bb30:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2bb32:	687b      	ldr	r3, [r7, #4]
   2bb34:	681b      	ldr	r3, [r3, #0]
   2bb36:	68fa      	ldr	r2, [r7, #12]
   2bb38:	0011      	movs	r1, r2
   2bb3a:	0018      	movs	r0, r3
   2bb3c:	4b0e      	ldr	r3, [pc, #56]	; (2bb78 <dir_sdi+0x12c>)
   2bb3e:	4798      	blx	r3
   2bb40:	0002      	movs	r2, r0
   2bb42:	1cbb      	adds	r3, r7, #2
   2bb44:	881b      	ldrh	r3, [r3, #0]
   2bb46:	091b      	lsrs	r3, r3, #4
   2bb48:	b29b      	uxth	r3, r3
   2bb4a:	18d2      	adds	r2, r2, r3
   2bb4c:	687b      	ldr	r3, [r7, #4]
   2bb4e:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2bb50:	687b      	ldr	r3, [r7, #4]
   2bb52:	681b      	ldr	r3, [r3, #0]
   2bb54:	3330      	adds	r3, #48	; 0x30
   2bb56:	001a      	movs	r2, r3
   2bb58:	1cbb      	adds	r3, r7, #2
   2bb5a:	881b      	ldrh	r3, [r3, #0]
   2bb5c:	210f      	movs	r1, #15
   2bb5e:	400b      	ands	r3, r1
   2bb60:	015b      	lsls	r3, r3, #5
   2bb62:	18d2      	adds	r2, r2, r3
   2bb64:	687b      	ldr	r3, [r7, #4]
   2bb66:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2bb68:	2300      	movs	r3, #0
}
   2bb6a:	0018      	movs	r0, r3
   2bb6c:	46bd      	mov	sp, r7
   2bb6e:	b004      	add	sp, #16
   2bb70:	bd80      	pop	{r7, pc}
   2bb72:	46c0      	nop			; (mov r8, r8)
   2bb74:	0002b4a1 	.word	0x0002b4a1
   2bb78:	0002b469 	.word	0x0002b469

0002bb7c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2bb7c:	b590      	push	{r4, r7, lr}
   2bb7e:	b085      	sub	sp, #20
   2bb80:	af00      	add	r7, sp, #0
   2bb82:	6078      	str	r0, [r7, #4]
   2bb84:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2bb86:	687b      	ldr	r3, [r7, #4]
   2bb88:	88da      	ldrh	r2, [r3, #6]
   2bb8a:	2308      	movs	r3, #8
   2bb8c:	18fb      	adds	r3, r7, r3
   2bb8e:	3201      	adds	r2, #1
   2bb90:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2bb92:	2308      	movs	r3, #8
   2bb94:	18fb      	adds	r3, r7, r3
   2bb96:	881b      	ldrh	r3, [r3, #0]
   2bb98:	2b00      	cmp	r3, #0
   2bb9a:	d003      	beq.n	2bba4 <dir_next+0x28>
   2bb9c:	687b      	ldr	r3, [r7, #4]
   2bb9e:	691b      	ldr	r3, [r3, #16]
   2bba0:	2b00      	cmp	r3, #0
   2bba2:	d101      	bne.n	2bba8 <dir_next+0x2c>
		return FR_NO_FILE;
   2bba4:	2304      	movs	r3, #4
   2bba6:	e0d2      	b.n	2bd4e <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2bba8:	2308      	movs	r3, #8
   2bbaa:	18fb      	adds	r3, r7, r3
   2bbac:	881b      	ldrh	r3, [r3, #0]
   2bbae:	220f      	movs	r2, #15
   2bbb0:	4013      	ands	r3, r2
   2bbb2:	b29b      	uxth	r3, r3
   2bbb4:	2b00      	cmp	r3, #0
   2bbb6:	d000      	beq.n	2bbba <dir_next+0x3e>
   2bbb8:	e0b6      	b.n	2bd28 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2bbba:	687b      	ldr	r3, [r7, #4]
   2bbbc:	691b      	ldr	r3, [r3, #16]
   2bbbe:	1c5a      	adds	r2, r3, #1
   2bbc0:	687b      	ldr	r3, [r7, #4]
   2bbc2:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2bbc4:	687b      	ldr	r3, [r7, #4]
   2bbc6:	68db      	ldr	r3, [r3, #12]
   2bbc8:	2b00      	cmp	r3, #0
   2bbca:	d10a      	bne.n	2bbe2 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2bbcc:	687b      	ldr	r3, [r7, #4]
   2bbce:	681b      	ldr	r3, [r3, #0]
   2bbd0:	891b      	ldrh	r3, [r3, #8]
   2bbd2:	2208      	movs	r2, #8
   2bbd4:	18ba      	adds	r2, r7, r2
   2bbd6:	8812      	ldrh	r2, [r2, #0]
   2bbd8:	429a      	cmp	r2, r3
   2bbda:	d200      	bcs.n	2bbde <dir_next+0x62>
   2bbdc:	e0a4      	b.n	2bd28 <dir_next+0x1ac>
				return FR_NO_FILE;
   2bbde:	2304      	movs	r3, #4
   2bbe0:	e0b5      	b.n	2bd4e <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2bbe2:	2308      	movs	r3, #8
   2bbe4:	18fb      	adds	r3, r7, r3
   2bbe6:	881b      	ldrh	r3, [r3, #0]
   2bbe8:	091b      	lsrs	r3, r3, #4
   2bbea:	b29b      	uxth	r3, r3
   2bbec:	001a      	movs	r2, r3
   2bbee:	687b      	ldr	r3, [r7, #4]
   2bbf0:	681b      	ldr	r3, [r3, #0]
   2bbf2:	789b      	ldrb	r3, [r3, #2]
   2bbf4:	3b01      	subs	r3, #1
   2bbf6:	4013      	ands	r3, r2
   2bbf8:	d000      	beq.n	2bbfc <dir_next+0x80>
   2bbfa:	e095      	b.n	2bd28 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2bbfc:	687b      	ldr	r3, [r7, #4]
   2bbfe:	681a      	ldr	r2, [r3, #0]
   2bc00:	687b      	ldr	r3, [r7, #4]
   2bc02:	68db      	ldr	r3, [r3, #12]
   2bc04:	0019      	movs	r1, r3
   2bc06:	0010      	movs	r0, r2
   2bc08:	4b53      	ldr	r3, [pc, #332]	; (2bd58 <dir_next+0x1dc>)
   2bc0a:	4798      	blx	r3
   2bc0c:	0003      	movs	r3, r0
   2bc0e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2bc10:	68fb      	ldr	r3, [r7, #12]
   2bc12:	2b01      	cmp	r3, #1
   2bc14:	d801      	bhi.n	2bc1a <dir_next+0x9e>
   2bc16:	2302      	movs	r3, #2
   2bc18:	e099      	b.n	2bd4e <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2bc1a:	68fb      	ldr	r3, [r7, #12]
   2bc1c:	3301      	adds	r3, #1
   2bc1e:	d101      	bne.n	2bc24 <dir_next+0xa8>
   2bc20:	2301      	movs	r3, #1
   2bc22:	e094      	b.n	2bd4e <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2bc24:	687b      	ldr	r3, [r7, #4]
   2bc26:	681b      	ldr	r3, [r3, #0]
   2bc28:	699a      	ldr	r2, [r3, #24]
   2bc2a:	68fb      	ldr	r3, [r7, #12]
   2bc2c:	429a      	cmp	r2, r3
   2bc2e:	d900      	bls.n	2bc32 <dir_next+0xb6>
   2bc30:	e06d      	b.n	2bd0e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2bc32:	683b      	ldr	r3, [r7, #0]
   2bc34:	2b00      	cmp	r3, #0
   2bc36:	d101      	bne.n	2bc3c <dir_next+0xc0>
   2bc38:	2304      	movs	r3, #4
   2bc3a:	e088      	b.n	2bd4e <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2bc3c:	687b      	ldr	r3, [r7, #4]
   2bc3e:	681a      	ldr	r2, [r3, #0]
   2bc40:	687b      	ldr	r3, [r7, #4]
   2bc42:	68db      	ldr	r3, [r3, #12]
   2bc44:	0019      	movs	r1, r3
   2bc46:	0010      	movs	r0, r2
   2bc48:	4b44      	ldr	r3, [pc, #272]	; (2bd5c <dir_next+0x1e0>)
   2bc4a:	4798      	blx	r3
   2bc4c:	0003      	movs	r3, r0
   2bc4e:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2bc50:	68fb      	ldr	r3, [r7, #12]
   2bc52:	2b00      	cmp	r3, #0
   2bc54:	d101      	bne.n	2bc5a <dir_next+0xde>
   2bc56:	2307      	movs	r3, #7
   2bc58:	e079      	b.n	2bd4e <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2bc5a:	68fb      	ldr	r3, [r7, #12]
   2bc5c:	2b01      	cmp	r3, #1
   2bc5e:	d101      	bne.n	2bc64 <dir_next+0xe8>
   2bc60:	2302      	movs	r3, #2
   2bc62:	e074      	b.n	2bd4e <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2bc64:	68fb      	ldr	r3, [r7, #12]
   2bc66:	3301      	adds	r3, #1
   2bc68:	d101      	bne.n	2bc6e <dir_next+0xf2>
   2bc6a:	2301      	movs	r3, #1
   2bc6c:	e06f      	b.n	2bd4e <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2bc6e:	687b      	ldr	r3, [r7, #4]
   2bc70:	681b      	ldr	r3, [r3, #0]
   2bc72:	2100      	movs	r1, #0
   2bc74:	0018      	movs	r0, r3
   2bc76:	4b3a      	ldr	r3, [pc, #232]	; (2bd60 <dir_next+0x1e4>)
   2bc78:	4798      	blx	r3
   2bc7a:	1e03      	subs	r3, r0, #0
   2bc7c:	d001      	beq.n	2bc82 <dir_next+0x106>
   2bc7e:	2301      	movs	r3, #1
   2bc80:	e065      	b.n	2bd4e <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2bc82:	687b      	ldr	r3, [r7, #4]
   2bc84:	681b      	ldr	r3, [r3, #0]
   2bc86:	3330      	adds	r3, #48	; 0x30
   2bc88:	0018      	movs	r0, r3
   2bc8a:	2380      	movs	r3, #128	; 0x80
   2bc8c:	009b      	lsls	r3, r3, #2
   2bc8e:	001a      	movs	r2, r3
   2bc90:	2100      	movs	r1, #0
   2bc92:	4b34      	ldr	r3, [pc, #208]	; (2bd64 <dir_next+0x1e8>)
   2bc94:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2bc96:	687b      	ldr	r3, [r7, #4]
   2bc98:	681c      	ldr	r4, [r3, #0]
   2bc9a:	687b      	ldr	r3, [r7, #4]
   2bc9c:	681b      	ldr	r3, [r3, #0]
   2bc9e:	68fa      	ldr	r2, [r7, #12]
   2bca0:	0011      	movs	r1, r2
   2bca2:	0018      	movs	r0, r3
   2bca4:	4b30      	ldr	r3, [pc, #192]	; (2bd68 <dir_next+0x1ec>)
   2bca6:	4798      	blx	r3
   2bca8:	0003      	movs	r3, r0
   2bcaa:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bcac:	230b      	movs	r3, #11
   2bcae:	18fb      	adds	r3, r7, r3
   2bcb0:	2200      	movs	r2, #0
   2bcb2:	701a      	strb	r2, [r3, #0]
   2bcb4:	e019      	b.n	2bcea <dir_next+0x16e>
						dj->fs->wflag = 1;
   2bcb6:	687b      	ldr	r3, [r7, #4]
   2bcb8:	681b      	ldr	r3, [r3, #0]
   2bcba:	2201      	movs	r2, #1
   2bcbc:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2bcbe:	687b      	ldr	r3, [r7, #4]
   2bcc0:	681b      	ldr	r3, [r3, #0]
   2bcc2:	2100      	movs	r1, #0
   2bcc4:	0018      	movs	r0, r3
   2bcc6:	4b26      	ldr	r3, [pc, #152]	; (2bd60 <dir_next+0x1e4>)
   2bcc8:	4798      	blx	r3
   2bcca:	1e03      	subs	r3, r0, #0
   2bccc:	d001      	beq.n	2bcd2 <dir_next+0x156>
   2bcce:	2301      	movs	r3, #1
   2bcd0:	e03d      	b.n	2bd4e <dir_next+0x1d2>
						dj->fs->winsect++;
   2bcd2:	687b      	ldr	r3, [r7, #4]
   2bcd4:	681b      	ldr	r3, [r3, #0]
   2bcd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2bcd8:	3201      	adds	r2, #1
   2bcda:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2bcdc:	230b      	movs	r3, #11
   2bcde:	18fb      	adds	r3, r7, r3
   2bce0:	781a      	ldrb	r2, [r3, #0]
   2bce2:	230b      	movs	r3, #11
   2bce4:	18fb      	adds	r3, r7, r3
   2bce6:	3201      	adds	r2, #1
   2bce8:	701a      	strb	r2, [r3, #0]
   2bcea:	687b      	ldr	r3, [r7, #4]
   2bcec:	681b      	ldr	r3, [r3, #0]
   2bcee:	789b      	ldrb	r3, [r3, #2]
   2bcf0:	220b      	movs	r2, #11
   2bcf2:	18ba      	adds	r2, r7, r2
   2bcf4:	7812      	ldrb	r2, [r2, #0]
   2bcf6:	429a      	cmp	r2, r3
   2bcf8:	d3dd      	bcc.n	2bcb6 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2bcfa:	687b      	ldr	r3, [r7, #4]
   2bcfc:	681b      	ldr	r3, [r3, #0]
   2bcfe:	687a      	ldr	r2, [r7, #4]
   2bd00:	6812      	ldr	r2, [r2, #0]
   2bd02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2bd04:	220b      	movs	r2, #11
   2bd06:	18ba      	adds	r2, r7, r2
   2bd08:	7812      	ldrb	r2, [r2, #0]
   2bd0a:	1a8a      	subs	r2, r1, r2
   2bd0c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2bd0e:	687b      	ldr	r3, [r7, #4]
   2bd10:	68fa      	ldr	r2, [r7, #12]
   2bd12:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2bd14:	687b      	ldr	r3, [r7, #4]
   2bd16:	681b      	ldr	r3, [r3, #0]
   2bd18:	68fa      	ldr	r2, [r7, #12]
   2bd1a:	0011      	movs	r1, r2
   2bd1c:	0018      	movs	r0, r3
   2bd1e:	4b12      	ldr	r3, [pc, #72]	; (2bd68 <dir_next+0x1ec>)
   2bd20:	4798      	blx	r3
   2bd22:	0002      	movs	r2, r0
   2bd24:	687b      	ldr	r3, [r7, #4]
   2bd26:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2bd28:	687b      	ldr	r3, [r7, #4]
   2bd2a:	2208      	movs	r2, #8
   2bd2c:	18ba      	adds	r2, r7, r2
   2bd2e:	8812      	ldrh	r2, [r2, #0]
   2bd30:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2bd32:	687b      	ldr	r3, [r7, #4]
   2bd34:	681b      	ldr	r3, [r3, #0]
   2bd36:	3330      	adds	r3, #48	; 0x30
   2bd38:	001a      	movs	r2, r3
   2bd3a:	2308      	movs	r3, #8
   2bd3c:	18fb      	adds	r3, r7, r3
   2bd3e:	881b      	ldrh	r3, [r3, #0]
   2bd40:	210f      	movs	r1, #15
   2bd42:	400b      	ands	r3, r1
   2bd44:	015b      	lsls	r3, r3, #5
   2bd46:	18d2      	adds	r2, r2, r3
   2bd48:	687b      	ldr	r3, [r7, #4]
   2bd4a:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2bd4c:	2300      	movs	r3, #0
}
   2bd4e:	0018      	movs	r0, r3
   2bd50:	46bd      	mov	sp, r7
   2bd52:	b005      	add	sp, #20
   2bd54:	bd90      	pop	{r4, r7, pc}
   2bd56:	46c0      	nop			; (mov r8, r8)
   2bd58:	0002b4a1 	.word	0x0002b4a1
   2bd5c:	0002b911 	.word	0x0002b911
   2bd60:	0002b209 	.word	0x0002b209
   2bd64:	0002b15d 	.word	0x0002b15d
   2bd68:	0002b469 	.word	0x0002b469

0002bd6c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2bd6c:	b590      	push	{r4, r7, lr}
   2bd6e:	b087      	sub	sp, #28
   2bd70:	af00      	add	r7, sp, #0
   2bd72:	6078      	str	r0, [r7, #4]
   2bd74:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2bd76:	683b      	ldr	r3, [r7, #0]
   2bd78:	781b      	ldrb	r3, [r3, #0]
   2bd7a:	001a      	movs	r2, r3
   2bd7c:	2340      	movs	r3, #64	; 0x40
   2bd7e:	439a      	bics	r2, r3
   2bd80:	0013      	movs	r3, r2
   2bd82:	1e5a      	subs	r2, r3, #1
   2bd84:	0013      	movs	r3, r2
   2bd86:	005b      	lsls	r3, r3, #1
   2bd88:	189b      	adds	r3, r3, r2
   2bd8a:	009b      	lsls	r3, r3, #2
   2bd8c:	189b      	adds	r3, r3, r2
   2bd8e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2bd90:	2300      	movs	r3, #0
   2bd92:	613b      	str	r3, [r7, #16]
   2bd94:	230e      	movs	r3, #14
   2bd96:	18fb      	adds	r3, r7, r3
   2bd98:	2201      	movs	r2, #1
   2bd9a:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2bd9c:	4a31      	ldr	r2, [pc, #196]	; (2be64 <cmp_lfn+0xf8>)
   2bd9e:	693b      	ldr	r3, [r7, #16]
   2bda0:	18d3      	adds	r3, r2, r3
   2bda2:	781b      	ldrb	r3, [r3, #0]
   2bda4:	3301      	adds	r3, #1
   2bda6:	683a      	ldr	r2, [r7, #0]
   2bda8:	18d3      	adds	r3, r2, r3
   2bdaa:	781b      	ldrb	r3, [r3, #0]
   2bdac:	021b      	lsls	r3, r3, #8
   2bdae:	b21a      	sxth	r2, r3
   2bdb0:	492c      	ldr	r1, [pc, #176]	; (2be64 <cmp_lfn+0xf8>)
   2bdb2:	693b      	ldr	r3, [r7, #16]
   2bdb4:	18cb      	adds	r3, r1, r3
   2bdb6:	781b      	ldrb	r3, [r3, #0]
   2bdb8:	0019      	movs	r1, r3
   2bdba:	683b      	ldr	r3, [r7, #0]
   2bdbc:	185b      	adds	r3, r3, r1
   2bdbe:	781b      	ldrb	r3, [r3, #0]
   2bdc0:	b21b      	sxth	r3, r3
   2bdc2:	4313      	orrs	r3, r2
   2bdc4:	b21a      	sxth	r2, r3
   2bdc6:	230c      	movs	r3, #12
   2bdc8:	18fb      	adds	r3, r7, r3
   2bdca:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2bdcc:	230e      	movs	r3, #14
   2bdce:	18fb      	adds	r3, r7, r3
   2bdd0:	881b      	ldrh	r3, [r3, #0]
   2bdd2:	2b00      	cmp	r3, #0
   2bdd4:	d01f      	beq.n	2be16 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2bdd6:	230e      	movs	r3, #14
   2bdd8:	18fc      	adds	r4, r7, r3
   2bdda:	230c      	movs	r3, #12
   2bddc:	18fb      	adds	r3, r7, r3
   2bdde:	881b      	ldrh	r3, [r3, #0]
   2bde0:	0018      	movs	r0, r3
   2bde2:	4b21      	ldr	r3, [pc, #132]	; (2be68 <cmp_lfn+0xfc>)
   2bde4:	4798      	blx	r3
   2bde6:	0003      	movs	r3, r0
   2bde8:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2bdea:	697b      	ldr	r3, [r7, #20]
   2bdec:	2bfe      	cmp	r3, #254	; 0xfe
   2bdee:	d810      	bhi.n	2be12 <cmp_lfn+0xa6>
   2bdf0:	697b      	ldr	r3, [r7, #20]
   2bdf2:	1c5a      	adds	r2, r3, #1
   2bdf4:	617a      	str	r2, [r7, #20]
   2bdf6:	005b      	lsls	r3, r3, #1
   2bdf8:	687a      	ldr	r2, [r7, #4]
   2bdfa:	18d3      	adds	r3, r2, r3
   2bdfc:	881b      	ldrh	r3, [r3, #0]
   2bdfe:	0018      	movs	r0, r3
   2be00:	4b19      	ldr	r3, [pc, #100]	; (2be68 <cmp_lfn+0xfc>)
   2be02:	4798      	blx	r3
   2be04:	0003      	movs	r3, r0
   2be06:	001a      	movs	r2, r3
   2be08:	230e      	movs	r3, #14
   2be0a:	18fb      	adds	r3, r7, r3
   2be0c:	881b      	ldrh	r3, [r3, #0]
   2be0e:	4293      	cmp	r3, r2
   2be10:	d009      	beq.n	2be26 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2be12:	2300      	movs	r3, #0
   2be14:	e022      	b.n	2be5c <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2be16:	230c      	movs	r3, #12
   2be18:	18fb      	adds	r3, r7, r3
   2be1a:	881b      	ldrh	r3, [r3, #0]
   2be1c:	4a13      	ldr	r2, [pc, #76]	; (2be6c <cmp_lfn+0x100>)
   2be1e:	4293      	cmp	r3, r2
   2be20:	d001      	beq.n	2be26 <cmp_lfn+0xba>
   2be22:	2300      	movs	r3, #0
   2be24:	e01a      	b.n	2be5c <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2be26:	693b      	ldr	r3, [r7, #16]
   2be28:	3301      	adds	r3, #1
   2be2a:	613b      	str	r3, [r7, #16]
   2be2c:	693b      	ldr	r3, [r7, #16]
   2be2e:	2b0c      	cmp	r3, #12
   2be30:	d9b4      	bls.n	2bd9c <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2be32:	683b      	ldr	r3, [r7, #0]
   2be34:	781b      	ldrb	r3, [r3, #0]
   2be36:	001a      	movs	r2, r3
   2be38:	2340      	movs	r3, #64	; 0x40
   2be3a:	4013      	ands	r3, r2
   2be3c:	d00d      	beq.n	2be5a <cmp_lfn+0xee>
   2be3e:	230e      	movs	r3, #14
   2be40:	18fb      	adds	r3, r7, r3
   2be42:	881b      	ldrh	r3, [r3, #0]
   2be44:	2b00      	cmp	r3, #0
   2be46:	d008      	beq.n	2be5a <cmp_lfn+0xee>
   2be48:	697b      	ldr	r3, [r7, #20]
   2be4a:	005b      	lsls	r3, r3, #1
   2be4c:	687a      	ldr	r2, [r7, #4]
   2be4e:	18d3      	adds	r3, r2, r3
   2be50:	881b      	ldrh	r3, [r3, #0]
   2be52:	2b00      	cmp	r3, #0
   2be54:	d001      	beq.n	2be5a <cmp_lfn+0xee>
		return 0;
   2be56:	2300      	movs	r3, #0
   2be58:	e000      	b.n	2be5c <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2be5a:	2301      	movs	r3, #1
}
   2be5c:	0018      	movs	r0, r3
   2be5e:	46bd      	mov	sp, r7
   2be60:	b007      	add	sp, #28
   2be62:	bd90      	pop	{r4, r7, pc}
   2be64:	00038de8 	.word	0x00038de8
   2be68:	0002ddc1 	.word	0x0002ddc1
   2be6c:	0000ffff 	.word	0x0000ffff

0002be70 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2be70:	b580      	push	{r7, lr}
   2be72:	b088      	sub	sp, #32
   2be74:	af00      	add	r7, sp, #0
   2be76:	60f8      	str	r0, [r7, #12]
   2be78:	60b9      	str	r1, [r7, #8]
   2be7a:	0019      	movs	r1, r3
   2be7c:	1dfb      	adds	r3, r7, #7
   2be7e:	701a      	strb	r2, [r3, #0]
   2be80:	1dbb      	adds	r3, r7, #6
   2be82:	1c0a      	adds	r2, r1, #0
   2be84:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2be86:	68bb      	ldr	r3, [r7, #8]
   2be88:	330d      	adds	r3, #13
   2be8a:	1dba      	adds	r2, r7, #6
   2be8c:	7812      	ldrb	r2, [r2, #0]
   2be8e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2be90:	68bb      	ldr	r3, [r7, #8]
   2be92:	330b      	adds	r3, #11
   2be94:	220f      	movs	r2, #15
   2be96:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2be98:	68bb      	ldr	r3, [r7, #8]
   2be9a:	330c      	adds	r3, #12
   2be9c:	2200      	movs	r2, #0
   2be9e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2bea0:	68bb      	ldr	r3, [r7, #8]
   2bea2:	331a      	adds	r3, #26
   2bea4:	2200      	movs	r2, #0
   2bea6:	701a      	strb	r2, [r3, #0]
   2bea8:	68bb      	ldr	r3, [r7, #8]
   2beaa:	331b      	adds	r3, #27
   2beac:	2200      	movs	r2, #0
   2beae:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2beb0:	1dfb      	adds	r3, r7, #7
   2beb2:	781b      	ldrb	r3, [r3, #0]
   2beb4:	1e5a      	subs	r2, r3, #1
   2beb6:	0013      	movs	r3, r2
   2beb8:	005b      	lsls	r3, r3, #1
   2beba:	189b      	adds	r3, r3, r2
   2bebc:	009b      	lsls	r3, r3, #2
   2bebe:	189b      	adds	r3, r3, r2
   2bec0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2bec2:	2316      	movs	r3, #22
   2bec4:	18fb      	adds	r3, r7, r3
   2bec6:	2200      	movs	r2, #0
   2bec8:	801a      	strh	r2, [r3, #0]
   2beca:	2300      	movs	r3, #0
   2becc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2bece:	2316      	movs	r3, #22
   2bed0:	18fb      	adds	r3, r7, r3
   2bed2:	881b      	ldrh	r3, [r3, #0]
   2bed4:	4a28      	ldr	r2, [pc, #160]	; (2bf78 <fit_lfn+0x108>)
   2bed6:	4293      	cmp	r3, r2
   2bed8:	d009      	beq.n	2beee <fit_lfn+0x7e>
   2beda:	69fb      	ldr	r3, [r7, #28]
   2bedc:	1c5a      	adds	r2, r3, #1
   2bede:	61fa      	str	r2, [r7, #28]
   2bee0:	005b      	lsls	r3, r3, #1
   2bee2:	68fa      	ldr	r2, [r7, #12]
   2bee4:	18d2      	adds	r2, r2, r3
   2bee6:	2316      	movs	r3, #22
   2bee8:	18fb      	adds	r3, r7, r3
   2beea:	8812      	ldrh	r2, [r2, #0]
   2beec:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2beee:	4a23      	ldr	r2, [pc, #140]	; (2bf7c <fit_lfn+0x10c>)
   2bef0:	69bb      	ldr	r3, [r7, #24]
   2bef2:	18d3      	adds	r3, r2, r3
   2bef4:	781b      	ldrb	r3, [r3, #0]
   2bef6:	001a      	movs	r2, r3
   2bef8:	68bb      	ldr	r3, [r7, #8]
   2befa:	189b      	adds	r3, r3, r2
   2befc:	2216      	movs	r2, #22
   2befe:	18ba      	adds	r2, r7, r2
   2bf00:	8812      	ldrh	r2, [r2, #0]
   2bf02:	b2d2      	uxtb	r2, r2
   2bf04:	701a      	strb	r2, [r3, #0]
   2bf06:	4a1d      	ldr	r2, [pc, #116]	; (2bf7c <fit_lfn+0x10c>)
   2bf08:	69bb      	ldr	r3, [r7, #24]
   2bf0a:	18d3      	adds	r3, r2, r3
   2bf0c:	781b      	ldrb	r3, [r3, #0]
   2bf0e:	3301      	adds	r3, #1
   2bf10:	68ba      	ldr	r2, [r7, #8]
   2bf12:	18d3      	adds	r3, r2, r3
   2bf14:	2216      	movs	r2, #22
   2bf16:	18ba      	adds	r2, r7, r2
   2bf18:	8812      	ldrh	r2, [r2, #0]
   2bf1a:	0a12      	lsrs	r2, r2, #8
   2bf1c:	b292      	uxth	r2, r2
   2bf1e:	b2d2      	uxtb	r2, r2
   2bf20:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2bf22:	2316      	movs	r3, #22
   2bf24:	18fb      	adds	r3, r7, r3
   2bf26:	881b      	ldrh	r3, [r3, #0]
   2bf28:	2b00      	cmp	r3, #0
   2bf2a:	d104      	bne.n	2bf36 <fit_lfn+0xc6>
   2bf2c:	2316      	movs	r3, #22
   2bf2e:	18fb      	adds	r3, r7, r3
   2bf30:	2201      	movs	r2, #1
   2bf32:	4252      	negs	r2, r2
   2bf34:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2bf36:	69bb      	ldr	r3, [r7, #24]
   2bf38:	3301      	adds	r3, #1
   2bf3a:	61bb      	str	r3, [r7, #24]
   2bf3c:	69bb      	ldr	r3, [r7, #24]
   2bf3e:	2b0c      	cmp	r3, #12
   2bf40:	d9c5      	bls.n	2bece <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2bf42:	2316      	movs	r3, #22
   2bf44:	18fb      	adds	r3, r7, r3
   2bf46:	881b      	ldrh	r3, [r3, #0]
   2bf48:	4a0b      	ldr	r2, [pc, #44]	; (2bf78 <fit_lfn+0x108>)
   2bf4a:	4293      	cmp	r3, r2
   2bf4c:	d006      	beq.n	2bf5c <fit_lfn+0xec>
   2bf4e:	69fb      	ldr	r3, [r7, #28]
   2bf50:	005b      	lsls	r3, r3, #1
   2bf52:	68fa      	ldr	r2, [r7, #12]
   2bf54:	18d3      	adds	r3, r2, r3
   2bf56:	881b      	ldrh	r3, [r3, #0]
   2bf58:	2b00      	cmp	r3, #0
   2bf5a:	d105      	bne.n	2bf68 <fit_lfn+0xf8>
   2bf5c:	1dfb      	adds	r3, r7, #7
   2bf5e:	1dfa      	adds	r2, r7, #7
   2bf60:	7812      	ldrb	r2, [r2, #0]
   2bf62:	2140      	movs	r1, #64	; 0x40
   2bf64:	430a      	orrs	r2, r1
   2bf66:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2bf68:	68bb      	ldr	r3, [r7, #8]
   2bf6a:	1dfa      	adds	r2, r7, #7
   2bf6c:	7812      	ldrb	r2, [r2, #0]
   2bf6e:	701a      	strb	r2, [r3, #0]
}
   2bf70:	46c0      	nop			; (mov r8, r8)
   2bf72:	46bd      	mov	sp, r7
   2bf74:	b008      	add	sp, #32
   2bf76:	bd80      	pop	{r7, pc}
   2bf78:	0000ffff 	.word	0x0000ffff
   2bf7c:	00038de8 	.word	0x00038de8

0002bf80 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2bf80:	b580      	push	{r7, lr}
   2bf82:	b08a      	sub	sp, #40	; 0x28
   2bf84:	af00      	add	r7, sp, #0
   2bf86:	60f8      	str	r0, [r7, #12]
   2bf88:	60b9      	str	r1, [r7, #8]
   2bf8a:	607a      	str	r2, [r7, #4]
   2bf8c:	001a      	movs	r2, r3
   2bf8e:	1cbb      	adds	r3, r7, #2
   2bf90:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2bf92:	68b9      	ldr	r1, [r7, #8]
   2bf94:	68fb      	ldr	r3, [r7, #12]
   2bf96:	220b      	movs	r2, #11
   2bf98:	0018      	movs	r0, r3
   2bf9a:	4b38      	ldr	r3, [pc, #224]	; (2c07c <gen_numname+0xfc>)
   2bf9c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2bf9e:	1cbb      	adds	r3, r7, #2
   2bfa0:	881b      	ldrh	r3, [r3, #0]
   2bfa2:	2b05      	cmp	r3, #5
   2bfa4:	d911      	bls.n	2bfca <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2bfa6:	1cbb      	adds	r3, r7, #2
   2bfa8:	881b      	ldrh	r3, [r3, #0]
   2bfaa:	b29a      	uxth	r2, r3
   2bfac:	0852      	lsrs	r2, r2, #1
   2bfae:	03db      	lsls	r3, r3, #15
   2bfb0:	4313      	orrs	r3, r2
   2bfb2:	b299      	uxth	r1, r3
   2bfb4:	687b      	ldr	r3, [r7, #4]
   2bfb6:	1c9a      	adds	r2, r3, #2
   2bfb8:	607a      	str	r2, [r7, #4]
   2bfba:	881a      	ldrh	r2, [r3, #0]
   2bfbc:	1cbb      	adds	r3, r7, #2
   2bfbe:	188a      	adds	r2, r1, r2
   2bfc0:	801a      	strh	r2, [r3, #0]
   2bfc2:	687b      	ldr	r3, [r7, #4]
   2bfc4:	881b      	ldrh	r3, [r3, #0]
   2bfc6:	2b00      	cmp	r3, #0
   2bfc8:	d1ed      	bne.n	2bfa6 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2bfca:	2307      	movs	r3, #7
   2bfcc:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2bfce:	1cbb      	adds	r3, r7, #2
   2bfd0:	881b      	ldrh	r3, [r3, #0]
   2bfd2:	b2db      	uxtb	r3, r3
   2bfd4:	220f      	movs	r2, #15
   2bfd6:	4013      	ands	r3, r2
   2bfd8:	b2da      	uxtb	r2, r3
   2bfda:	2327      	movs	r3, #39	; 0x27
   2bfdc:	18fb      	adds	r3, r7, r3
   2bfde:	3230      	adds	r2, #48	; 0x30
   2bfe0:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2bfe2:	2327      	movs	r3, #39	; 0x27
   2bfe4:	18fb      	adds	r3, r7, r3
   2bfe6:	781b      	ldrb	r3, [r3, #0]
   2bfe8:	2b39      	cmp	r3, #57	; 0x39
   2bfea:	d906      	bls.n	2bffa <gen_numname+0x7a>
   2bfec:	2327      	movs	r3, #39	; 0x27
   2bfee:	18fb      	adds	r3, r7, r3
   2bff0:	2227      	movs	r2, #39	; 0x27
   2bff2:	18ba      	adds	r2, r7, r2
   2bff4:	7812      	ldrb	r2, [r2, #0]
   2bff6:	3207      	adds	r2, #7
   2bff8:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2bffa:	6a3b      	ldr	r3, [r7, #32]
   2bffc:	1e5a      	subs	r2, r3, #1
   2bffe:	623a      	str	r2, [r7, #32]
   2c000:	2214      	movs	r2, #20
   2c002:	18ba      	adds	r2, r7, r2
   2c004:	2127      	movs	r1, #39	; 0x27
   2c006:	1879      	adds	r1, r7, r1
   2c008:	7809      	ldrb	r1, [r1, #0]
   2c00a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2c00c:	1cbb      	adds	r3, r7, #2
   2c00e:	1cba      	adds	r2, r7, #2
   2c010:	8812      	ldrh	r2, [r2, #0]
   2c012:	0912      	lsrs	r2, r2, #4
   2c014:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2c016:	1cbb      	adds	r3, r7, #2
   2c018:	881b      	ldrh	r3, [r3, #0]
   2c01a:	2b00      	cmp	r3, #0
   2c01c:	d1d7      	bne.n	2bfce <gen_numname+0x4e>
	ns[i] = '~';
   2c01e:	2314      	movs	r3, #20
   2c020:	18fa      	adds	r2, r7, r3
   2c022:	6a3b      	ldr	r3, [r7, #32]
   2c024:	18d3      	adds	r3, r2, r3
   2c026:	227e      	movs	r2, #126	; 0x7e
   2c028:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2c02a:	2300      	movs	r3, #0
   2c02c:	61fb      	str	r3, [r7, #28]
   2c02e:	e002      	b.n	2c036 <gen_numname+0xb6>
   2c030:	69fb      	ldr	r3, [r7, #28]
   2c032:	3301      	adds	r3, #1
   2c034:	61fb      	str	r3, [r7, #28]
   2c036:	69fa      	ldr	r2, [r7, #28]
   2c038:	6a3b      	ldr	r3, [r7, #32]
   2c03a:	429a      	cmp	r2, r3
   2c03c:	d205      	bcs.n	2c04a <gen_numname+0xca>
   2c03e:	68fa      	ldr	r2, [r7, #12]
   2c040:	69fb      	ldr	r3, [r7, #28]
   2c042:	18d3      	adds	r3, r2, r3
   2c044:	781b      	ldrb	r3, [r3, #0]
   2c046:	2b20      	cmp	r3, #32
   2c048:	d1f2      	bne.n	2c030 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2c04a:	69fb      	ldr	r3, [r7, #28]
   2c04c:	1c5a      	adds	r2, r3, #1
   2c04e:	61fa      	str	r2, [r7, #28]
   2c050:	68fa      	ldr	r2, [r7, #12]
   2c052:	18d2      	adds	r2, r2, r3
   2c054:	6a3b      	ldr	r3, [r7, #32]
   2c056:	2b07      	cmp	r3, #7
   2c058:	d806      	bhi.n	2c068 <gen_numname+0xe8>
   2c05a:	6a3b      	ldr	r3, [r7, #32]
   2c05c:	1c59      	adds	r1, r3, #1
   2c05e:	6239      	str	r1, [r7, #32]
   2c060:	2114      	movs	r1, #20
   2c062:	1879      	adds	r1, r7, r1
   2c064:	5ccb      	ldrb	r3, [r1, r3]
   2c066:	e000      	b.n	2c06a <gen_numname+0xea>
   2c068:	2320      	movs	r3, #32
   2c06a:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2c06c:	69fb      	ldr	r3, [r7, #28]
   2c06e:	2b07      	cmp	r3, #7
   2c070:	d9eb      	bls.n	2c04a <gen_numname+0xca>
}
   2c072:	46c0      	nop			; (mov r8, r8)
   2c074:	46bd      	mov	sp, r7
   2c076:	b00a      	add	sp, #40	; 0x28
   2c078:	bd80      	pop	{r7, pc}
   2c07a:	46c0      	nop			; (mov r8, r8)
   2c07c:	0002b125 	.word	0x0002b125

0002c080 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2c080:	b580      	push	{r7, lr}
   2c082:	b084      	sub	sp, #16
   2c084:	af00      	add	r7, sp, #0
   2c086:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2c088:	230f      	movs	r3, #15
   2c08a:	18fb      	adds	r3, r7, r3
   2c08c:	2200      	movs	r2, #0
   2c08e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2c090:	230b      	movs	r3, #11
   2c092:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2c094:	230f      	movs	r3, #15
   2c096:	18fb      	adds	r3, r7, r3
   2c098:	781b      	ldrb	r3, [r3, #0]
   2c09a:	b2da      	uxtb	r2, r3
   2c09c:	0852      	lsrs	r2, r2, #1
   2c09e:	01db      	lsls	r3, r3, #7
   2c0a0:	4313      	orrs	r3, r2
   2c0a2:	b2d9      	uxtb	r1, r3
   2c0a4:	687b      	ldr	r3, [r7, #4]
   2c0a6:	1c5a      	adds	r2, r3, #1
   2c0a8:	607a      	str	r2, [r7, #4]
   2c0aa:	781a      	ldrb	r2, [r3, #0]
   2c0ac:	230f      	movs	r3, #15
   2c0ae:	18fb      	adds	r3, r7, r3
   2c0b0:	188a      	adds	r2, r1, r2
   2c0b2:	701a      	strb	r2, [r3, #0]
   2c0b4:	68bb      	ldr	r3, [r7, #8]
   2c0b6:	3b01      	subs	r3, #1
   2c0b8:	60bb      	str	r3, [r7, #8]
   2c0ba:	68bb      	ldr	r3, [r7, #8]
   2c0bc:	2b00      	cmp	r3, #0
   2c0be:	d1e9      	bne.n	2c094 <sum_sfn+0x14>
	return sum;
   2c0c0:	230f      	movs	r3, #15
   2c0c2:	18fb      	adds	r3, r7, r3
   2c0c4:	781b      	ldrb	r3, [r3, #0]
}
   2c0c6:	0018      	movs	r0, r3
   2c0c8:	46bd      	mov	sp, r7
   2c0ca:	b004      	add	sp, #16
   2c0cc:	bd80      	pop	{r7, pc}
	...

0002c0d0 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2c0d0:	b590      	push	{r4, r7, lr}
   2c0d2:	b087      	sub	sp, #28
   2c0d4:	af00      	add	r7, sp, #0
   2c0d6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2c0d8:	2317      	movs	r3, #23
   2c0da:	18fc      	adds	r4, r7, r3
   2c0dc:	687b      	ldr	r3, [r7, #4]
   2c0de:	2100      	movs	r1, #0
   2c0e0:	0018      	movs	r0, r3
   2c0e2:	4b74      	ldr	r3, [pc, #464]	; (2c2b4 <dir_find+0x1e4>)
   2c0e4:	4798      	blx	r3
   2c0e6:	0003      	movs	r3, r0
   2c0e8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c0ea:	2317      	movs	r3, #23
   2c0ec:	18fb      	adds	r3, r7, r3
   2c0ee:	781b      	ldrb	r3, [r3, #0]
   2c0f0:	2b00      	cmp	r3, #0
   2c0f2:	d003      	beq.n	2c0fc <dir_find+0x2c>
   2c0f4:	2317      	movs	r3, #23
   2c0f6:	18fb      	adds	r3, r7, r3
   2c0f8:	781b      	ldrb	r3, [r3, #0]
   2c0fa:	e0d6      	b.n	2c2aa <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2c0fc:	2314      	movs	r3, #20
   2c0fe:	18fb      	adds	r3, r7, r3
   2c100:	22ff      	movs	r2, #255	; 0xff
   2c102:	701a      	strb	r2, [r3, #0]
   2c104:	2315      	movs	r3, #21
   2c106:	18fb      	adds	r3, r7, r3
   2c108:	2214      	movs	r2, #20
   2c10a:	18ba      	adds	r2, r7, r2
   2c10c:	7812      	ldrb	r2, [r2, #0]
   2c10e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2c110:	687b      	ldr	r3, [r7, #4]
   2c112:	681a      	ldr	r2, [r3, #0]
   2c114:	687b      	ldr	r3, [r7, #4]
   2c116:	691b      	ldr	r3, [r3, #16]
   2c118:	2117      	movs	r1, #23
   2c11a:	187c      	adds	r4, r7, r1
   2c11c:	0019      	movs	r1, r3
   2c11e:	0010      	movs	r0, r2
   2c120:	4b65      	ldr	r3, [pc, #404]	; (2c2b8 <dir_find+0x1e8>)
   2c122:	4798      	blx	r3
   2c124:	0003      	movs	r3, r0
   2c126:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c128:	2317      	movs	r3, #23
   2c12a:	18fb      	adds	r3, r7, r3
   2c12c:	781b      	ldrb	r3, [r3, #0]
   2c12e:	2b00      	cmp	r3, #0
   2c130:	d000      	beq.n	2c134 <dir_find+0x64>
   2c132:	e0b2      	b.n	2c29a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2c134:	687b      	ldr	r3, [r7, #4]
   2c136:	695b      	ldr	r3, [r3, #20]
   2c138:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2c13a:	2316      	movs	r3, #22
   2c13c:	18fb      	adds	r3, r7, r3
   2c13e:	693a      	ldr	r2, [r7, #16]
   2c140:	7812      	ldrb	r2, [r2, #0]
   2c142:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2c144:	2316      	movs	r3, #22
   2c146:	18fb      	adds	r3, r7, r3
   2c148:	781b      	ldrb	r3, [r3, #0]
   2c14a:	2b00      	cmp	r3, #0
   2c14c:	d104      	bne.n	2c158 <dir_find+0x88>
   2c14e:	2317      	movs	r3, #23
   2c150:	18fb      	adds	r3, r7, r3
   2c152:	2204      	movs	r2, #4
   2c154:	701a      	strb	r2, [r3, #0]
   2c156:	e0a5      	b.n	2c2a4 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2c158:	693b      	ldr	r3, [r7, #16]
   2c15a:	330b      	adds	r3, #11
   2c15c:	781a      	ldrb	r2, [r3, #0]
   2c15e:	230f      	movs	r3, #15
   2c160:	18fb      	adds	r3, r7, r3
   2c162:	213f      	movs	r1, #63	; 0x3f
   2c164:	400a      	ands	r2, r1
   2c166:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2c168:	2316      	movs	r3, #22
   2c16a:	18fb      	adds	r3, r7, r3
   2c16c:	781b      	ldrb	r3, [r3, #0]
   2c16e:	2be5      	cmp	r3, #229	; 0xe5
   2c170:	d00a      	beq.n	2c188 <dir_find+0xb8>
   2c172:	230f      	movs	r3, #15
   2c174:	18fb      	adds	r3, r7, r3
   2c176:	781b      	ldrb	r3, [r3, #0]
   2c178:	2208      	movs	r2, #8
   2c17a:	4013      	ands	r3, r2
   2c17c:	d009      	beq.n	2c192 <dir_find+0xc2>
   2c17e:	230f      	movs	r3, #15
   2c180:	18fb      	adds	r3, r7, r3
   2c182:	781b      	ldrb	r3, [r3, #0]
   2c184:	2b0f      	cmp	r3, #15
   2c186:	d004      	beq.n	2c192 <dir_find+0xc2>
			ord = 0xFF;
   2c188:	2315      	movs	r3, #21
   2c18a:	18fb      	adds	r3, r7, r3
   2c18c:	22ff      	movs	r2, #255	; 0xff
   2c18e:	701a      	strb	r2, [r3, #0]
   2c190:	e073      	b.n	2c27a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2c192:	230f      	movs	r3, #15
   2c194:	18fb      	adds	r3, r7, r3
   2c196:	781b      	ldrb	r3, [r3, #0]
   2c198:	2b0f      	cmp	r3, #15
   2c19a:	d145      	bne.n	2c228 <dir_find+0x158>
				if (dj->lfn) {
   2c19c:	687b      	ldr	r3, [r7, #4]
   2c19e:	69db      	ldr	r3, [r3, #28]
   2c1a0:	2b00      	cmp	r3, #0
   2c1a2:	d100      	bne.n	2c1a6 <dir_find+0xd6>
   2c1a4:	e069      	b.n	2c27a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2c1a6:	2316      	movs	r3, #22
   2c1a8:	18fb      	adds	r3, r7, r3
   2c1aa:	781b      	ldrb	r3, [r3, #0]
   2c1ac:	2240      	movs	r2, #64	; 0x40
   2c1ae:	4013      	ands	r3, r2
   2c1b0:	d016      	beq.n	2c1e0 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2c1b2:	2314      	movs	r3, #20
   2c1b4:	18fb      	adds	r3, r7, r3
   2c1b6:	693a      	ldr	r2, [r7, #16]
   2c1b8:	7b52      	ldrb	r2, [r2, #13]
   2c1ba:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2c1bc:	2316      	movs	r3, #22
   2c1be:	18fb      	adds	r3, r7, r3
   2c1c0:	2216      	movs	r2, #22
   2c1c2:	18ba      	adds	r2, r7, r2
   2c1c4:	7812      	ldrb	r2, [r2, #0]
   2c1c6:	2140      	movs	r1, #64	; 0x40
   2c1c8:	438a      	bics	r2, r1
   2c1ca:	701a      	strb	r2, [r3, #0]
   2c1cc:	2315      	movs	r3, #21
   2c1ce:	18fb      	adds	r3, r7, r3
   2c1d0:	2216      	movs	r2, #22
   2c1d2:	18ba      	adds	r2, r7, r2
   2c1d4:	7812      	ldrb	r2, [r2, #0]
   2c1d6:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2c1d8:	687b      	ldr	r3, [r7, #4]
   2c1da:	88da      	ldrh	r2, [r3, #6]
   2c1dc:	687b      	ldr	r3, [r7, #4]
   2c1de:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2c1e0:	2316      	movs	r3, #22
   2c1e2:	18fa      	adds	r2, r7, r3
   2c1e4:	2315      	movs	r3, #21
   2c1e6:	18fb      	adds	r3, r7, r3
   2c1e8:	7812      	ldrb	r2, [r2, #0]
   2c1ea:	781b      	ldrb	r3, [r3, #0]
   2c1ec:	429a      	cmp	r2, r3
   2c1ee:	d116      	bne.n	2c21e <dir_find+0x14e>
   2c1f0:	693b      	ldr	r3, [r7, #16]
   2c1f2:	330d      	adds	r3, #13
   2c1f4:	781b      	ldrb	r3, [r3, #0]
   2c1f6:	2214      	movs	r2, #20
   2c1f8:	18ba      	adds	r2, r7, r2
   2c1fa:	7812      	ldrb	r2, [r2, #0]
   2c1fc:	429a      	cmp	r2, r3
   2c1fe:	d10e      	bne.n	2c21e <dir_find+0x14e>
   2c200:	687b      	ldr	r3, [r7, #4]
   2c202:	69db      	ldr	r3, [r3, #28]
   2c204:	693a      	ldr	r2, [r7, #16]
   2c206:	0011      	movs	r1, r2
   2c208:	0018      	movs	r0, r3
   2c20a:	4b2c      	ldr	r3, [pc, #176]	; (2c2bc <dir_find+0x1ec>)
   2c20c:	4798      	blx	r3
   2c20e:	1e03      	subs	r3, r0, #0
   2c210:	d005      	beq.n	2c21e <dir_find+0x14e>
   2c212:	2315      	movs	r3, #21
   2c214:	18fb      	adds	r3, r7, r3
   2c216:	781b      	ldrb	r3, [r3, #0]
   2c218:	3b01      	subs	r3, #1
   2c21a:	b2da      	uxtb	r2, r3
   2c21c:	e000      	b.n	2c220 <dir_find+0x150>
   2c21e:	22ff      	movs	r2, #255	; 0xff
   2c220:	2315      	movs	r3, #21
   2c222:	18fb      	adds	r3, r7, r3
   2c224:	701a      	strb	r2, [r3, #0]
   2c226:	e028      	b.n	2c27a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c228:	2315      	movs	r3, #21
   2c22a:	18fb      	adds	r3, r7, r3
   2c22c:	781b      	ldrb	r3, [r3, #0]
   2c22e:	2b00      	cmp	r3, #0
   2c230:	d10a      	bne.n	2c248 <dir_find+0x178>
   2c232:	693b      	ldr	r3, [r7, #16]
   2c234:	0018      	movs	r0, r3
   2c236:	4b22      	ldr	r3, [pc, #136]	; (2c2c0 <dir_find+0x1f0>)
   2c238:	4798      	blx	r3
   2c23a:	0003      	movs	r3, r0
   2c23c:	001a      	movs	r2, r3
   2c23e:	2314      	movs	r3, #20
   2c240:	18fb      	adds	r3, r7, r3
   2c242:	781b      	ldrb	r3, [r3, #0]
   2c244:	4293      	cmp	r3, r2
   2c246:	d02a      	beq.n	2c29e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2c248:	2315      	movs	r3, #21
   2c24a:	18fb      	adds	r3, r7, r3
   2c24c:	22ff      	movs	r2, #255	; 0xff
   2c24e:	701a      	strb	r2, [r3, #0]
   2c250:	687b      	ldr	r3, [r7, #4]
   2c252:	2201      	movs	r2, #1
   2c254:	4252      	negs	r2, r2
   2c256:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c258:	687b      	ldr	r3, [r7, #4]
   2c25a:	699b      	ldr	r3, [r3, #24]
   2c25c:	330b      	adds	r3, #11
   2c25e:	781b      	ldrb	r3, [r3, #0]
   2c260:	001a      	movs	r2, r3
   2c262:	2301      	movs	r3, #1
   2c264:	4013      	ands	r3, r2
   2c266:	d108      	bne.n	2c27a <dir_find+0x1aa>
   2c268:	687b      	ldr	r3, [r7, #4]
   2c26a:	6999      	ldr	r1, [r3, #24]
   2c26c:	693b      	ldr	r3, [r7, #16]
   2c26e:	220b      	movs	r2, #11
   2c270:	0018      	movs	r0, r3
   2c272:	4b14      	ldr	r3, [pc, #80]	; (2c2c4 <dir_find+0x1f4>)
   2c274:	4798      	blx	r3
   2c276:	1e03      	subs	r3, r0, #0
   2c278:	d013      	beq.n	2c2a2 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2c27a:	2317      	movs	r3, #23
   2c27c:	18fc      	adds	r4, r7, r3
   2c27e:	687b      	ldr	r3, [r7, #4]
   2c280:	2100      	movs	r1, #0
   2c282:	0018      	movs	r0, r3
   2c284:	4b10      	ldr	r3, [pc, #64]	; (2c2c8 <dir_find+0x1f8>)
   2c286:	4798      	blx	r3
   2c288:	0003      	movs	r3, r0
   2c28a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c28c:	2317      	movs	r3, #23
   2c28e:	18fb      	adds	r3, r7, r3
   2c290:	781b      	ldrb	r3, [r3, #0]
   2c292:	2b00      	cmp	r3, #0
   2c294:	d100      	bne.n	2c298 <dir_find+0x1c8>
   2c296:	e73b      	b.n	2c110 <dir_find+0x40>
   2c298:	e004      	b.n	2c2a4 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2c29a:	46c0      	nop			; (mov r8, r8)
   2c29c:	e002      	b.n	2c2a4 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2c29e:	46c0      	nop			; (mov r8, r8)
   2c2a0:	e000      	b.n	2c2a4 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2c2a2:	46c0      	nop			; (mov r8, r8)

	return res;
   2c2a4:	2317      	movs	r3, #23
   2c2a6:	18fb      	adds	r3, r7, r3
   2c2a8:	781b      	ldrb	r3, [r3, #0]
}
   2c2aa:	0018      	movs	r0, r3
   2c2ac:	46bd      	mov	sp, r7
   2c2ae:	b007      	add	sp, #28
   2c2b0:	bd90      	pop	{r4, r7, pc}
   2c2b2:	46c0      	nop			; (mov r8, r8)
   2c2b4:	0002ba4d 	.word	0x0002ba4d
   2c2b8:	0002b209 	.word	0x0002b209
   2c2bc:	0002bd6d 	.word	0x0002bd6d
   2c2c0:	0002c081 	.word	0x0002c081
   2c2c4:	0002b18d 	.word	0x0002b18d
   2c2c8:	0002bb7d 	.word	0x0002bb7d

0002c2cc <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2c2cc:	b590      	push	{r4, r7, lr}
   2c2ce:	b08d      	sub	sp, #52	; 0x34
   2c2d0:	af00      	add	r7, sp, #0
   2c2d2:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2c2d4:	687b      	ldr	r3, [r7, #4]
   2c2d6:	699b      	ldr	r3, [r3, #24]
   2c2d8:	627b      	str	r3, [r7, #36]	; 0x24
   2c2da:	687b      	ldr	r3, [r7, #4]
   2c2dc:	69db      	ldr	r3, [r3, #28]
   2c2de:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2c2e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2c2e2:	230c      	movs	r3, #12
   2c2e4:	18fb      	adds	r3, r7, r3
   2c2e6:	220c      	movs	r2, #12
   2c2e8:	0018      	movs	r0, r3
   2c2ea:	4bc8      	ldr	r3, [pc, #800]	; (2c60c <dir_register+0x340>)
   2c2ec:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2c2ee:	230c      	movs	r3, #12
   2c2f0:	18fb      	adds	r3, r7, r3
   2c2f2:	7adb      	ldrb	r3, [r3, #11]
   2c2f4:	001a      	movs	r2, r3
   2c2f6:	2301      	movs	r3, #1
   2c2f8:	4013      	ands	r3, r2
   2c2fa:	d048      	beq.n	2c38e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2c2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c2fe:	330b      	adds	r3, #11
   2c300:	2200      	movs	r2, #0
   2c302:	701a      	strb	r2, [r3, #0]
   2c304:	687b      	ldr	r3, [r7, #4]
   2c306:	2200      	movs	r2, #0
   2c308:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2c30a:	232c      	movs	r3, #44	; 0x2c
   2c30c:	18fb      	adds	r3, r7, r3
   2c30e:	2201      	movs	r2, #1
   2c310:	801a      	strh	r2, [r3, #0]
   2c312:	e01c      	b.n	2c34e <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2c314:	232c      	movs	r3, #44	; 0x2c
   2c316:	18fb      	adds	r3, r7, r3
   2c318:	881b      	ldrh	r3, [r3, #0]
   2c31a:	6a3a      	ldr	r2, [r7, #32]
   2c31c:	210c      	movs	r1, #12
   2c31e:	1879      	adds	r1, r7, r1
   2c320:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2c322:	4cbb      	ldr	r4, [pc, #748]	; (2c610 <dir_register+0x344>)
   2c324:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2c326:	232f      	movs	r3, #47	; 0x2f
   2c328:	18fc      	adds	r4, r7, r3
   2c32a:	687b      	ldr	r3, [r7, #4]
   2c32c:	0018      	movs	r0, r3
   2c32e:	4bb9      	ldr	r3, [pc, #740]	; (2c614 <dir_register+0x348>)
   2c330:	4798      	blx	r3
   2c332:	0003      	movs	r3, r0
   2c334:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c336:	232f      	movs	r3, #47	; 0x2f
   2c338:	18fb      	adds	r3, r7, r3
   2c33a:	781b      	ldrb	r3, [r3, #0]
   2c33c:	2b00      	cmp	r3, #0
   2c33e:	d10c      	bne.n	2c35a <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2c340:	232c      	movs	r3, #44	; 0x2c
   2c342:	18fb      	adds	r3, r7, r3
   2c344:	881a      	ldrh	r2, [r3, #0]
   2c346:	232c      	movs	r3, #44	; 0x2c
   2c348:	18fb      	adds	r3, r7, r3
   2c34a:	3201      	adds	r2, #1
   2c34c:	801a      	strh	r2, [r3, #0]
   2c34e:	232c      	movs	r3, #44	; 0x2c
   2c350:	18fb      	adds	r3, r7, r3
   2c352:	881b      	ldrh	r3, [r3, #0]
   2c354:	2b63      	cmp	r3, #99	; 0x63
   2c356:	d9dd      	bls.n	2c314 <dir_register+0x48>
   2c358:	e000      	b.n	2c35c <dir_register+0x90>
			if (res != FR_OK) break;
   2c35a:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2c35c:	232c      	movs	r3, #44	; 0x2c
   2c35e:	18fb      	adds	r3, r7, r3
   2c360:	881b      	ldrh	r3, [r3, #0]
   2c362:	2b64      	cmp	r3, #100	; 0x64
   2c364:	d101      	bne.n	2c36a <dir_register+0x9e>
   2c366:	2307      	movs	r3, #7
   2c368:	e14c      	b.n	2c604 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2c36a:	232f      	movs	r3, #47	; 0x2f
   2c36c:	18fb      	adds	r3, r7, r3
   2c36e:	781b      	ldrb	r3, [r3, #0]
   2c370:	2b04      	cmp	r3, #4
   2c372:	d003      	beq.n	2c37c <dir_register+0xb0>
   2c374:	232f      	movs	r3, #47	; 0x2f
   2c376:	18fb      	adds	r3, r7, r3
   2c378:	781b      	ldrb	r3, [r3, #0]
   2c37a:	e143      	b.n	2c604 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c37e:	330b      	adds	r3, #11
   2c380:	220c      	movs	r2, #12
   2c382:	18ba      	adds	r2, r7, r2
   2c384:	7ad2      	ldrb	r2, [r2, #11]
   2c386:	701a      	strb	r2, [r3, #0]
   2c388:	687b      	ldr	r3, [r7, #4]
   2c38a:	6a3a      	ldr	r2, [r7, #32]
   2c38c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2c38e:	230c      	movs	r3, #12
   2c390:	18fb      	adds	r3, r7, r3
   2c392:	7adb      	ldrb	r3, [r3, #11]
   2c394:	001a      	movs	r2, r3
   2c396:	2302      	movs	r3, #2
   2c398:	4013      	ands	r3, r2
   2c39a:	d023      	beq.n	2c3e4 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2c39c:	232a      	movs	r3, #42	; 0x2a
   2c39e:	18fb      	adds	r3, r7, r3
   2c3a0:	2200      	movs	r2, #0
   2c3a2:	801a      	strh	r2, [r3, #0]
   2c3a4:	e006      	b.n	2c3b4 <dir_register+0xe8>
   2c3a6:	232a      	movs	r3, #42	; 0x2a
   2c3a8:	18fb      	adds	r3, r7, r3
   2c3aa:	881a      	ldrh	r2, [r3, #0]
   2c3ac:	232a      	movs	r3, #42	; 0x2a
   2c3ae:	18fb      	adds	r3, r7, r3
   2c3b0:	3201      	adds	r2, #1
   2c3b2:	801a      	strh	r2, [r3, #0]
   2c3b4:	232a      	movs	r3, #42	; 0x2a
   2c3b6:	18fb      	adds	r3, r7, r3
   2c3b8:	881b      	ldrh	r3, [r3, #0]
   2c3ba:	005b      	lsls	r3, r3, #1
   2c3bc:	6a3a      	ldr	r2, [r7, #32]
   2c3be:	18d3      	adds	r3, r2, r3
   2c3c0:	881b      	ldrh	r3, [r3, #0]
   2c3c2:	2b00      	cmp	r3, #0
   2c3c4:	d1ef      	bne.n	2c3a6 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2c3c6:	232a      	movs	r3, #42	; 0x2a
   2c3c8:	18fb      	adds	r3, r7, r3
   2c3ca:	881b      	ldrh	r3, [r3, #0]
   2c3cc:	3319      	adds	r3, #25
   2c3ce:	001a      	movs	r2, r3
   2c3d0:	4b91      	ldr	r3, [pc, #580]	; (2c618 <dir_register+0x34c>)
   2c3d2:	210d      	movs	r1, #13
   2c3d4:	0010      	movs	r0, r2
   2c3d6:	4798      	blx	r3
   2c3d8:	0003      	movs	r3, r0
   2c3da:	001a      	movs	r2, r3
   2c3dc:	232a      	movs	r3, #42	; 0x2a
   2c3de:	18fb      	adds	r3, r7, r3
   2c3e0:	801a      	strh	r2, [r3, #0]
   2c3e2:	e003      	b.n	2c3ec <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2c3e4:	232a      	movs	r3, #42	; 0x2a
   2c3e6:	18fb      	adds	r3, r7, r3
   2c3e8:	2201      	movs	r2, #1
   2c3ea:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2c3ec:	232f      	movs	r3, #47	; 0x2f
   2c3ee:	18fc      	adds	r4, r7, r3
   2c3f0:	687b      	ldr	r3, [r7, #4]
   2c3f2:	2100      	movs	r1, #0
   2c3f4:	0018      	movs	r0, r3
   2c3f6:	4b89      	ldr	r3, [pc, #548]	; (2c61c <dir_register+0x350>)
   2c3f8:	4798      	blx	r3
   2c3fa:	0003      	movs	r3, r0
   2c3fc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c3fe:	232f      	movs	r3, #47	; 0x2f
   2c400:	18fb      	adds	r3, r7, r3
   2c402:	781b      	ldrb	r3, [r3, #0]
   2c404:	2b00      	cmp	r3, #0
   2c406:	d003      	beq.n	2c410 <dir_register+0x144>
   2c408:	232f      	movs	r3, #47	; 0x2f
   2c40a:	18fb      	adds	r3, r7, r3
   2c40c:	781b      	ldrb	r3, [r3, #0]
   2c40e:	e0f9      	b.n	2c604 <dir_register+0x338>
	n = is = 0;
   2c410:	2328      	movs	r3, #40	; 0x28
   2c412:	18fb      	adds	r3, r7, r3
   2c414:	2200      	movs	r2, #0
   2c416:	801a      	strh	r2, [r3, #0]
   2c418:	232c      	movs	r3, #44	; 0x2c
   2c41a:	18fb      	adds	r3, r7, r3
   2c41c:	2228      	movs	r2, #40	; 0x28
   2c41e:	18ba      	adds	r2, r7, r2
   2c420:	8812      	ldrh	r2, [r2, #0]
   2c422:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2c424:	687b      	ldr	r3, [r7, #4]
   2c426:	681a      	ldr	r2, [r3, #0]
   2c428:	687b      	ldr	r3, [r7, #4]
   2c42a:	691b      	ldr	r3, [r3, #16]
   2c42c:	212f      	movs	r1, #47	; 0x2f
   2c42e:	187c      	adds	r4, r7, r1
   2c430:	0019      	movs	r1, r3
   2c432:	0010      	movs	r0, r2
   2c434:	4b7a      	ldr	r3, [pc, #488]	; (2c620 <dir_register+0x354>)
   2c436:	4798      	blx	r3
   2c438:	0003      	movs	r3, r0
   2c43a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c43c:	232f      	movs	r3, #47	; 0x2f
   2c43e:	18fb      	adds	r3, r7, r3
   2c440:	781b      	ldrb	r3, [r3, #0]
   2c442:	2b00      	cmp	r3, #0
   2c444:	d13c      	bne.n	2c4c0 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2c446:	687b      	ldr	r3, [r7, #4]
   2c448:	695a      	ldr	r2, [r3, #20]
   2c44a:	231f      	movs	r3, #31
   2c44c:	18fb      	adds	r3, r7, r3
   2c44e:	7812      	ldrb	r2, [r2, #0]
   2c450:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2c452:	231f      	movs	r3, #31
   2c454:	18fb      	adds	r3, r7, r3
   2c456:	781b      	ldrb	r3, [r3, #0]
   2c458:	2be5      	cmp	r3, #229	; 0xe5
   2c45a:	d004      	beq.n	2c466 <dir_register+0x19a>
   2c45c:	231f      	movs	r3, #31
   2c45e:	18fb      	adds	r3, r7, r3
   2c460:	781b      	ldrb	r3, [r3, #0]
   2c462:	2b00      	cmp	r3, #0
   2c464:	d119      	bne.n	2c49a <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2c466:	232c      	movs	r3, #44	; 0x2c
   2c468:	18fb      	adds	r3, r7, r3
   2c46a:	881b      	ldrh	r3, [r3, #0]
   2c46c:	2b00      	cmp	r3, #0
   2c46e:	d104      	bne.n	2c47a <dir_register+0x1ae>
   2c470:	2328      	movs	r3, #40	; 0x28
   2c472:	18fb      	adds	r3, r7, r3
   2c474:	687a      	ldr	r2, [r7, #4]
   2c476:	88d2      	ldrh	r2, [r2, #6]
   2c478:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2c47a:	232c      	movs	r3, #44	; 0x2c
   2c47c:	18fb      	adds	r3, r7, r3
   2c47e:	222c      	movs	r2, #44	; 0x2c
   2c480:	18ba      	adds	r2, r7, r2
   2c482:	8812      	ldrh	r2, [r2, #0]
   2c484:	3201      	adds	r2, #1
   2c486:	801a      	strh	r2, [r3, #0]
   2c488:	232c      	movs	r3, #44	; 0x2c
   2c48a:	18fa      	adds	r2, r7, r3
   2c48c:	232a      	movs	r3, #42	; 0x2a
   2c48e:	18fb      	adds	r3, r7, r3
   2c490:	8812      	ldrh	r2, [r2, #0]
   2c492:	881b      	ldrh	r3, [r3, #0]
   2c494:	429a      	cmp	r2, r3
   2c496:	d104      	bne.n	2c4a2 <dir_register+0x1d6>
   2c498:	e013      	b.n	2c4c2 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2c49a:	232c      	movs	r3, #44	; 0x2c
   2c49c:	18fb      	adds	r3, r7, r3
   2c49e:	2200      	movs	r2, #0
   2c4a0:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2c4a2:	232f      	movs	r3, #47	; 0x2f
   2c4a4:	18fc      	adds	r4, r7, r3
   2c4a6:	687b      	ldr	r3, [r7, #4]
   2c4a8:	2101      	movs	r1, #1
   2c4aa:	0018      	movs	r0, r3
   2c4ac:	4b5d      	ldr	r3, [pc, #372]	; (2c624 <dir_register+0x358>)
   2c4ae:	4798      	blx	r3
   2c4b0:	0003      	movs	r3, r0
   2c4b2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2c4b4:	232f      	movs	r3, #47	; 0x2f
   2c4b6:	18fb      	adds	r3, r7, r3
   2c4b8:	781b      	ldrb	r3, [r3, #0]
   2c4ba:	2b00      	cmp	r3, #0
   2c4bc:	d0b2      	beq.n	2c424 <dir_register+0x158>
   2c4be:	e000      	b.n	2c4c2 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2c4c0:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2c4c2:	232f      	movs	r3, #47	; 0x2f
   2c4c4:	18fb      	adds	r3, r7, r3
   2c4c6:	781b      	ldrb	r3, [r3, #0]
   2c4c8:	2b00      	cmp	r3, #0
   2c4ca:	d163      	bne.n	2c594 <dir_register+0x2c8>
   2c4cc:	232a      	movs	r3, #42	; 0x2a
   2c4ce:	18fb      	adds	r3, r7, r3
   2c4d0:	881b      	ldrh	r3, [r3, #0]
   2c4d2:	2b01      	cmp	r3, #1
   2c4d4:	d95e      	bls.n	2c594 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2c4d6:	232f      	movs	r3, #47	; 0x2f
   2c4d8:	18fc      	adds	r4, r7, r3
   2c4da:	2328      	movs	r3, #40	; 0x28
   2c4dc:	18fb      	adds	r3, r7, r3
   2c4de:	881a      	ldrh	r2, [r3, #0]
   2c4e0:	687b      	ldr	r3, [r7, #4]
   2c4e2:	0011      	movs	r1, r2
   2c4e4:	0018      	movs	r0, r3
   2c4e6:	4b4d      	ldr	r3, [pc, #308]	; (2c61c <dir_register+0x350>)
   2c4e8:	4798      	blx	r3
   2c4ea:	0003      	movs	r3, r0
   2c4ec:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c4ee:	232f      	movs	r3, #47	; 0x2f
   2c4f0:	18fb      	adds	r3, r7, r3
   2c4f2:	781b      	ldrb	r3, [r3, #0]
   2c4f4:	2b00      	cmp	r3, #0
   2c4f6:	d14d      	bne.n	2c594 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2c4f8:	687b      	ldr	r3, [r7, #4]
   2c4fa:	699b      	ldr	r3, [r3, #24]
   2c4fc:	221e      	movs	r2, #30
   2c4fe:	18bc      	adds	r4, r7, r2
   2c500:	0018      	movs	r0, r3
   2c502:	4b49      	ldr	r3, [pc, #292]	; (2c628 <dir_register+0x35c>)
   2c504:	4798      	blx	r3
   2c506:	0003      	movs	r3, r0
   2c508:	7023      	strb	r3, [r4, #0]
			ne--;
   2c50a:	232a      	movs	r3, #42	; 0x2a
   2c50c:	18fb      	adds	r3, r7, r3
   2c50e:	881a      	ldrh	r2, [r3, #0]
   2c510:	232a      	movs	r3, #42	; 0x2a
   2c512:	18fb      	adds	r3, r7, r3
   2c514:	3a01      	subs	r2, #1
   2c516:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2c518:	687b      	ldr	r3, [r7, #4]
   2c51a:	681a      	ldr	r2, [r3, #0]
   2c51c:	687b      	ldr	r3, [r7, #4]
   2c51e:	691b      	ldr	r3, [r3, #16]
   2c520:	212f      	movs	r1, #47	; 0x2f
   2c522:	187c      	adds	r4, r7, r1
   2c524:	0019      	movs	r1, r3
   2c526:	0010      	movs	r0, r2
   2c528:	4b3d      	ldr	r3, [pc, #244]	; (2c620 <dir_register+0x354>)
   2c52a:	4798      	blx	r3
   2c52c:	0003      	movs	r3, r0
   2c52e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2c530:	232f      	movs	r3, #47	; 0x2f
   2c532:	18fb      	adds	r3, r7, r3
   2c534:	781b      	ldrb	r3, [r3, #0]
   2c536:	2b00      	cmp	r3, #0
   2c538:	d12b      	bne.n	2c592 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2c53a:	687b      	ldr	r3, [r7, #4]
   2c53c:	69d8      	ldr	r0, [r3, #28]
   2c53e:	687b      	ldr	r3, [r7, #4]
   2c540:	6959      	ldr	r1, [r3, #20]
   2c542:	232a      	movs	r3, #42	; 0x2a
   2c544:	18fb      	adds	r3, r7, r3
   2c546:	881b      	ldrh	r3, [r3, #0]
   2c548:	b2da      	uxtb	r2, r3
   2c54a:	231e      	movs	r3, #30
   2c54c:	18fb      	adds	r3, r7, r3
   2c54e:	781b      	ldrb	r3, [r3, #0]
   2c550:	4c36      	ldr	r4, [pc, #216]	; (2c62c <dir_register+0x360>)
   2c552:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2c554:	687b      	ldr	r3, [r7, #4]
   2c556:	681b      	ldr	r3, [r3, #0]
   2c558:	2201      	movs	r2, #1
   2c55a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2c55c:	232f      	movs	r3, #47	; 0x2f
   2c55e:	18fc      	adds	r4, r7, r3
   2c560:	687b      	ldr	r3, [r7, #4]
   2c562:	2100      	movs	r1, #0
   2c564:	0018      	movs	r0, r3
   2c566:	4b2f      	ldr	r3, [pc, #188]	; (2c624 <dir_register+0x358>)
   2c568:	4798      	blx	r3
   2c56a:	0003      	movs	r3, r0
   2c56c:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2c56e:	232f      	movs	r3, #47	; 0x2f
   2c570:	18fb      	adds	r3, r7, r3
   2c572:	781b      	ldrb	r3, [r3, #0]
   2c574:	2b00      	cmp	r3, #0
   2c576:	d10d      	bne.n	2c594 <dir_register+0x2c8>
   2c578:	232a      	movs	r3, #42	; 0x2a
   2c57a:	18fb      	adds	r3, r7, r3
   2c57c:	222a      	movs	r2, #42	; 0x2a
   2c57e:	18ba      	adds	r2, r7, r2
   2c580:	8812      	ldrh	r2, [r2, #0]
   2c582:	3a01      	subs	r2, #1
   2c584:	801a      	strh	r2, [r3, #0]
   2c586:	232a      	movs	r3, #42	; 0x2a
   2c588:	18fb      	adds	r3, r7, r3
   2c58a:	881b      	ldrh	r3, [r3, #0]
   2c58c:	2b00      	cmp	r3, #0
   2c58e:	d1c3      	bne.n	2c518 <dir_register+0x24c>
   2c590:	e000      	b.n	2c594 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2c592:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2c594:	232f      	movs	r3, #47	; 0x2f
   2c596:	18fb      	adds	r3, r7, r3
   2c598:	781b      	ldrb	r3, [r3, #0]
   2c59a:	2b00      	cmp	r3, #0
   2c59c:	d12f      	bne.n	2c5fe <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2c59e:	687b      	ldr	r3, [r7, #4]
   2c5a0:	681a      	ldr	r2, [r3, #0]
   2c5a2:	687b      	ldr	r3, [r7, #4]
   2c5a4:	691b      	ldr	r3, [r3, #16]
   2c5a6:	212f      	movs	r1, #47	; 0x2f
   2c5a8:	187c      	adds	r4, r7, r1
   2c5aa:	0019      	movs	r1, r3
   2c5ac:	0010      	movs	r0, r2
   2c5ae:	4b1c      	ldr	r3, [pc, #112]	; (2c620 <dir_register+0x354>)
   2c5b0:	4798      	blx	r3
   2c5b2:	0003      	movs	r3, r0
   2c5b4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2c5b6:	232f      	movs	r3, #47	; 0x2f
   2c5b8:	18fb      	adds	r3, r7, r3
   2c5ba:	781b      	ldrb	r3, [r3, #0]
   2c5bc:	2b00      	cmp	r3, #0
   2c5be:	d11e      	bne.n	2c5fe <dir_register+0x332>
			dir = dj->dir;
   2c5c0:	687b      	ldr	r3, [r7, #4]
   2c5c2:	695b      	ldr	r3, [r3, #20]
   2c5c4:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2c5c6:	69bb      	ldr	r3, [r7, #24]
   2c5c8:	2220      	movs	r2, #32
   2c5ca:	2100      	movs	r1, #0
   2c5cc:	0018      	movs	r0, r3
   2c5ce:	4b18      	ldr	r3, [pc, #96]	; (2c630 <dir_register+0x364>)
   2c5d0:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2c5d2:	687b      	ldr	r3, [r7, #4]
   2c5d4:	6999      	ldr	r1, [r3, #24]
   2c5d6:	69bb      	ldr	r3, [r7, #24]
   2c5d8:	220b      	movs	r2, #11
   2c5da:	0018      	movs	r0, r3
   2c5dc:	4b0b      	ldr	r3, [pc, #44]	; (2c60c <dir_register+0x340>)
   2c5de:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2c5e0:	69bb      	ldr	r3, [r7, #24]
   2c5e2:	330c      	adds	r3, #12
   2c5e4:	001a      	movs	r2, r3
   2c5e6:	687b      	ldr	r3, [r7, #4]
   2c5e8:	699b      	ldr	r3, [r3, #24]
   2c5ea:	330b      	adds	r3, #11
   2c5ec:	781b      	ldrb	r3, [r3, #0]
   2c5ee:	2118      	movs	r1, #24
   2c5f0:	400b      	ands	r3, r1
   2c5f2:	b2db      	uxtb	r3, r3
   2c5f4:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2c5f6:	687b      	ldr	r3, [r7, #4]
   2c5f8:	681b      	ldr	r3, [r3, #0]
   2c5fa:	2201      	movs	r2, #1
   2c5fc:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2c5fe:	232f      	movs	r3, #47	; 0x2f
   2c600:	18fb      	adds	r3, r7, r3
   2c602:	781b      	ldrb	r3, [r3, #0]
}
   2c604:	0018      	movs	r0, r3
   2c606:	46bd      	mov	sp, r7
   2c608:	b00d      	add	sp, #52	; 0x34
   2c60a:	bd90      	pop	{r4, r7, pc}
   2c60c:	0002b125 	.word	0x0002b125
   2c610:	0002bf81 	.word	0x0002bf81
   2c614:	0002c0d1 	.word	0x0002c0d1
   2c618:	000324c5 	.word	0x000324c5
   2c61c:	0002ba4d 	.word	0x0002ba4d
   2c620:	0002b209 	.word	0x0002b209
   2c624:	0002bb7d 	.word	0x0002bb7d
   2c628:	0002c081 	.word	0x0002c081
   2c62c:	0002be71 	.word	0x0002be71
   2c630:	0002b15d 	.word	0x0002b15d

0002c634 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2c634:	b590      	push	{r4, r7, lr}
   2c636:	b08b      	sub	sp, #44	; 0x2c
   2c638:	af00      	add	r7, sp, #0
   2c63a:	6078      	str	r0, [r7, #4]
   2c63c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2c63e:	683b      	ldr	r3, [r7, #0]
   2c640:	681b      	ldr	r3, [r3, #0]
   2c642:	613b      	str	r3, [r7, #16]
   2c644:	e002      	b.n	2c64c <create_name+0x18>
   2c646:	693b      	ldr	r3, [r7, #16]
   2c648:	3301      	adds	r3, #1
   2c64a:	613b      	str	r3, [r7, #16]
   2c64c:	693b      	ldr	r3, [r7, #16]
   2c64e:	781b      	ldrb	r3, [r3, #0]
   2c650:	2b2f      	cmp	r3, #47	; 0x2f
   2c652:	d0f8      	beq.n	2c646 <create_name+0x12>
   2c654:	693b      	ldr	r3, [r7, #16]
   2c656:	781b      	ldrb	r3, [r3, #0]
   2c658:	2b5c      	cmp	r3, #92	; 0x5c
   2c65a:	d0f4      	beq.n	2c646 <create_name+0x12>
	lfn = dj->lfn;
   2c65c:	687b      	ldr	r3, [r7, #4]
   2c65e:	69db      	ldr	r3, [r3, #28]
   2c660:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2c662:	2300      	movs	r3, #0
   2c664:	617b      	str	r3, [r7, #20]
   2c666:	697b      	ldr	r3, [r7, #20]
   2c668:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2c66a:	69bb      	ldr	r3, [r7, #24]
   2c66c:	1c5a      	adds	r2, r3, #1
   2c66e:	61ba      	str	r2, [r7, #24]
   2c670:	693a      	ldr	r2, [r7, #16]
   2c672:	18d3      	adds	r3, r2, r3
   2c674:	781a      	ldrb	r2, [r3, #0]
   2c676:	2324      	movs	r3, #36	; 0x24
   2c678:	18fb      	adds	r3, r7, r3
   2c67a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2c67c:	2324      	movs	r3, #36	; 0x24
   2c67e:	18fb      	adds	r3, r7, r3
   2c680:	881b      	ldrh	r3, [r3, #0]
   2c682:	2b1f      	cmp	r3, #31
   2c684:	d944      	bls.n	2c710 <create_name+0xdc>
   2c686:	2324      	movs	r3, #36	; 0x24
   2c688:	18fb      	adds	r3, r7, r3
   2c68a:	881b      	ldrh	r3, [r3, #0]
   2c68c:	2b2f      	cmp	r3, #47	; 0x2f
   2c68e:	d03f      	beq.n	2c710 <create_name+0xdc>
   2c690:	2324      	movs	r3, #36	; 0x24
   2c692:	18fb      	adds	r3, r7, r3
   2c694:	881b      	ldrh	r3, [r3, #0]
   2c696:	2b5c      	cmp	r3, #92	; 0x5c
   2c698:	d03a      	beq.n	2c710 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2c69a:	697b      	ldr	r3, [r7, #20]
   2c69c:	2bfe      	cmp	r3, #254	; 0xfe
   2c69e:	d901      	bls.n	2c6a4 <create_name+0x70>
			return FR_INVALID_NAME;
   2c6a0:	2306      	movs	r3, #6
   2c6a2:	e1e7      	b.n	2ca74 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2c6a4:	2324      	movs	r3, #36	; 0x24
   2c6a6:	18fb      	adds	r3, r7, r3
   2c6a8:	2224      	movs	r2, #36	; 0x24
   2c6aa:	18ba      	adds	r2, r7, r2
   2c6ac:	8812      	ldrh	r2, [r2, #0]
   2c6ae:	21ff      	movs	r1, #255	; 0xff
   2c6b0:	400a      	ands	r2, r1
   2c6b2:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2c6b4:	2324      	movs	r3, #36	; 0x24
   2c6b6:	18fc      	adds	r4, r7, r3
   2c6b8:	2324      	movs	r3, #36	; 0x24
   2c6ba:	18fb      	adds	r3, r7, r3
   2c6bc:	881b      	ldrh	r3, [r3, #0]
   2c6be:	2101      	movs	r1, #1
   2c6c0:	0018      	movs	r0, r3
   2c6c2:	4bba      	ldr	r3, [pc, #744]	; (2c9ac <create_name+0x378>)
   2c6c4:	4798      	blx	r3
   2c6c6:	0003      	movs	r3, r0
   2c6c8:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2c6ca:	2324      	movs	r3, #36	; 0x24
   2c6cc:	18fb      	adds	r3, r7, r3
   2c6ce:	881b      	ldrh	r3, [r3, #0]
   2c6d0:	2b00      	cmp	r3, #0
   2c6d2:	d101      	bne.n	2c6d8 <create_name+0xa4>
   2c6d4:	2306      	movs	r3, #6
   2c6d6:	e1cd      	b.n	2ca74 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2c6d8:	2324      	movs	r3, #36	; 0x24
   2c6da:	18fb      	adds	r3, r7, r3
   2c6dc:	881b      	ldrh	r3, [r3, #0]
   2c6de:	2b7f      	cmp	r3, #127	; 0x7f
   2c6e0:	d80b      	bhi.n	2c6fa <create_name+0xc6>
   2c6e2:	2324      	movs	r3, #36	; 0x24
   2c6e4:	18fb      	adds	r3, r7, r3
   2c6e6:	881a      	ldrh	r2, [r3, #0]
   2c6e8:	4bb1      	ldr	r3, [pc, #708]	; (2c9b0 <create_name+0x37c>)
   2c6ea:	0011      	movs	r1, r2
   2c6ec:	0018      	movs	r0, r3
   2c6ee:	4bb1      	ldr	r3, [pc, #708]	; (2c9b4 <create_name+0x380>)
   2c6f0:	4798      	blx	r3
   2c6f2:	1e03      	subs	r3, r0, #0
   2c6f4:	d001      	beq.n	2c6fa <create_name+0xc6>
			return FR_INVALID_NAME;
   2c6f6:	2306      	movs	r3, #6
   2c6f8:	e1bc      	b.n	2ca74 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2c6fa:	697b      	ldr	r3, [r7, #20]
   2c6fc:	1c5a      	adds	r2, r3, #1
   2c6fe:	617a      	str	r2, [r7, #20]
   2c700:	005b      	lsls	r3, r3, #1
   2c702:	68fa      	ldr	r2, [r7, #12]
   2c704:	18d3      	adds	r3, r2, r3
   2c706:	2224      	movs	r2, #36	; 0x24
   2c708:	18ba      	adds	r2, r7, r2
   2c70a:	8812      	ldrh	r2, [r2, #0]
   2c70c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2c70e:	e7ac      	b.n	2c66a <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2c710:	693a      	ldr	r2, [r7, #16]
   2c712:	69bb      	ldr	r3, [r7, #24]
   2c714:	18d2      	adds	r2, r2, r3
   2c716:	683b      	ldr	r3, [r7, #0]
   2c718:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2c71a:	2324      	movs	r3, #36	; 0x24
   2c71c:	18fb      	adds	r3, r7, r3
   2c71e:	881b      	ldrh	r3, [r3, #0]
   2c720:	2b1f      	cmp	r3, #31
   2c722:	d801      	bhi.n	2c728 <create_name+0xf4>
   2c724:	2204      	movs	r2, #4
   2c726:	e000      	b.n	2c72a <create_name+0xf6>
   2c728:	2200      	movs	r2, #0
   2c72a:	2326      	movs	r3, #38	; 0x26
   2c72c:	18fb      	adds	r3, r7, r3
   2c72e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2c730:	e017      	b.n	2c762 <create_name+0x12e>
		w = lfn[di-1];
   2c732:	697b      	ldr	r3, [r7, #20]
   2c734:	4aa0      	ldr	r2, [pc, #640]	; (2c9b8 <create_name+0x384>)
   2c736:	4694      	mov	ip, r2
   2c738:	4463      	add	r3, ip
   2c73a:	005b      	lsls	r3, r3, #1
   2c73c:	68fa      	ldr	r2, [r7, #12]
   2c73e:	18d2      	adds	r2, r2, r3
   2c740:	2324      	movs	r3, #36	; 0x24
   2c742:	18fb      	adds	r3, r7, r3
   2c744:	8812      	ldrh	r2, [r2, #0]
   2c746:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2c748:	2324      	movs	r3, #36	; 0x24
   2c74a:	18fb      	adds	r3, r7, r3
   2c74c:	881b      	ldrh	r3, [r3, #0]
   2c74e:	2b20      	cmp	r3, #32
   2c750:	d004      	beq.n	2c75c <create_name+0x128>
   2c752:	2324      	movs	r3, #36	; 0x24
   2c754:	18fb      	adds	r3, r7, r3
   2c756:	881b      	ldrh	r3, [r3, #0]
   2c758:	2b2e      	cmp	r3, #46	; 0x2e
   2c75a:	d106      	bne.n	2c76a <create_name+0x136>
		di--;
   2c75c:	697b      	ldr	r3, [r7, #20]
   2c75e:	3b01      	subs	r3, #1
   2c760:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2c762:	697b      	ldr	r3, [r7, #20]
   2c764:	2b00      	cmp	r3, #0
   2c766:	d1e4      	bne.n	2c732 <create_name+0xfe>
   2c768:	e000      	b.n	2c76c <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2c76a:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2c76c:	697b      	ldr	r3, [r7, #20]
   2c76e:	2b00      	cmp	r3, #0
   2c770:	d101      	bne.n	2c776 <create_name+0x142>
   2c772:	2306      	movs	r3, #6
   2c774:	e17e      	b.n	2ca74 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2c776:	697b      	ldr	r3, [r7, #20]
   2c778:	005b      	lsls	r3, r3, #1
   2c77a:	68fa      	ldr	r2, [r7, #12]
   2c77c:	18d3      	adds	r3, r2, r3
   2c77e:	2200      	movs	r2, #0
   2c780:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2c782:	687b      	ldr	r3, [r7, #4]
   2c784:	699b      	ldr	r3, [r3, #24]
   2c786:	220b      	movs	r2, #11
   2c788:	2120      	movs	r1, #32
   2c78a:	0018      	movs	r0, r3
   2c78c:	4b8b      	ldr	r3, [pc, #556]	; (2c9bc <create_name+0x388>)
   2c78e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2c790:	2300      	movs	r3, #0
   2c792:	61bb      	str	r3, [r7, #24]
   2c794:	e002      	b.n	2c79c <create_name+0x168>
   2c796:	69bb      	ldr	r3, [r7, #24]
   2c798:	3301      	adds	r3, #1
   2c79a:	61bb      	str	r3, [r7, #24]
   2c79c:	69bb      	ldr	r3, [r7, #24]
   2c79e:	005b      	lsls	r3, r3, #1
   2c7a0:	68fa      	ldr	r2, [r7, #12]
   2c7a2:	18d3      	adds	r3, r2, r3
   2c7a4:	881b      	ldrh	r3, [r3, #0]
   2c7a6:	2b20      	cmp	r3, #32
   2c7a8:	d0f5      	beq.n	2c796 <create_name+0x162>
   2c7aa:	69bb      	ldr	r3, [r7, #24]
   2c7ac:	005b      	lsls	r3, r3, #1
   2c7ae:	68fa      	ldr	r2, [r7, #12]
   2c7b0:	18d3      	adds	r3, r2, r3
   2c7b2:	881b      	ldrh	r3, [r3, #0]
   2c7b4:	2b2e      	cmp	r3, #46	; 0x2e
   2c7b6:	d0ee      	beq.n	2c796 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2c7b8:	69bb      	ldr	r3, [r7, #24]
   2c7ba:	2b00      	cmp	r3, #0
   2c7bc:	d00b      	beq.n	2c7d6 <create_name+0x1a2>
   2c7be:	2326      	movs	r3, #38	; 0x26
   2c7c0:	18fb      	adds	r3, r7, r3
   2c7c2:	2226      	movs	r2, #38	; 0x26
   2c7c4:	18ba      	adds	r2, r7, r2
   2c7c6:	7812      	ldrb	r2, [r2, #0]
   2c7c8:	2103      	movs	r1, #3
   2c7ca:	430a      	orrs	r2, r1
   2c7cc:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2c7ce:	e002      	b.n	2c7d6 <create_name+0x1a2>
   2c7d0:	697b      	ldr	r3, [r7, #20]
   2c7d2:	3b01      	subs	r3, #1
   2c7d4:	617b      	str	r3, [r7, #20]
   2c7d6:	697b      	ldr	r3, [r7, #20]
   2c7d8:	2b00      	cmp	r3, #0
   2c7da:	d009      	beq.n	2c7f0 <create_name+0x1bc>
   2c7dc:	697b      	ldr	r3, [r7, #20]
   2c7de:	4a76      	ldr	r2, [pc, #472]	; (2c9b8 <create_name+0x384>)
   2c7e0:	4694      	mov	ip, r2
   2c7e2:	4463      	add	r3, ip
   2c7e4:	005b      	lsls	r3, r3, #1
   2c7e6:	68fa      	ldr	r2, [r7, #12]
   2c7e8:	18d3      	adds	r3, r2, r3
   2c7ea:	881b      	ldrh	r3, [r3, #0]
   2c7ec:	2b2e      	cmp	r3, #46	; 0x2e
   2c7ee:	d1ef      	bne.n	2c7d0 <create_name+0x19c>

	b = i = 0; ni = 8;
   2c7f0:	2300      	movs	r3, #0
   2c7f2:	623b      	str	r3, [r7, #32]
   2c7f4:	2327      	movs	r3, #39	; 0x27
   2c7f6:	18fb      	adds	r3, r7, r3
   2c7f8:	2200      	movs	r2, #0
   2c7fa:	701a      	strb	r2, [r3, #0]
   2c7fc:	2308      	movs	r3, #8
   2c7fe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2c800:	69bb      	ldr	r3, [r7, #24]
   2c802:	1c5a      	adds	r2, r3, #1
   2c804:	61ba      	str	r2, [r7, #24]
   2c806:	005b      	lsls	r3, r3, #1
   2c808:	68fa      	ldr	r2, [r7, #12]
   2c80a:	18d2      	adds	r2, r2, r3
   2c80c:	2324      	movs	r3, #36	; 0x24
   2c80e:	18fb      	adds	r3, r7, r3
   2c810:	8812      	ldrh	r2, [r2, #0]
   2c812:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2c814:	2324      	movs	r3, #36	; 0x24
   2c816:	18fb      	adds	r3, r7, r3
   2c818:	881b      	ldrh	r3, [r3, #0]
   2c81a:	2b00      	cmp	r3, #0
   2c81c:	d100      	bne.n	2c820 <create_name+0x1ec>
   2c81e:	e0c3      	b.n	2c9a8 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2c820:	2324      	movs	r3, #36	; 0x24
   2c822:	18fb      	adds	r3, r7, r3
   2c824:	881b      	ldrh	r3, [r3, #0]
   2c826:	2b20      	cmp	r3, #32
   2c828:	d008      	beq.n	2c83c <create_name+0x208>
   2c82a:	2324      	movs	r3, #36	; 0x24
   2c82c:	18fb      	adds	r3, r7, r3
   2c82e:	881b      	ldrh	r3, [r3, #0]
   2c830:	2b2e      	cmp	r3, #46	; 0x2e
   2c832:	d10c      	bne.n	2c84e <create_name+0x21a>
   2c834:	69ba      	ldr	r2, [r7, #24]
   2c836:	697b      	ldr	r3, [r7, #20]
   2c838:	429a      	cmp	r2, r3
   2c83a:	d008      	beq.n	2c84e <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2c83c:	2326      	movs	r3, #38	; 0x26
   2c83e:	18fb      	adds	r3, r7, r3
   2c840:	2226      	movs	r2, #38	; 0x26
   2c842:	18ba      	adds	r2, r7, r2
   2c844:	7812      	ldrb	r2, [r2, #0]
   2c846:	2103      	movs	r1, #3
   2c848:	430a      	orrs	r2, r1
   2c84a:	701a      	strb	r2, [r3, #0]
   2c84c:	e0ab      	b.n	2c9a6 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2c84e:	6a3a      	ldr	r2, [r7, #32]
   2c850:	69fb      	ldr	r3, [r7, #28]
   2c852:	429a      	cmp	r2, r3
   2c854:	d203      	bcs.n	2c85e <create_name+0x22a>
   2c856:	69ba      	ldr	r2, [r7, #24]
   2c858:	697b      	ldr	r3, [r7, #20]
   2c85a:	429a      	cmp	r2, r3
   2c85c:	d12a      	bne.n	2c8b4 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2c85e:	69fb      	ldr	r3, [r7, #28]
   2c860:	2b0b      	cmp	r3, #11
   2c862:	d108      	bne.n	2c876 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2c864:	2326      	movs	r3, #38	; 0x26
   2c866:	18fb      	adds	r3, r7, r3
   2c868:	2226      	movs	r2, #38	; 0x26
   2c86a:	18ba      	adds	r2, r7, r2
   2c86c:	7812      	ldrb	r2, [r2, #0]
   2c86e:	2103      	movs	r1, #3
   2c870:	430a      	orrs	r2, r1
   2c872:	701a      	strb	r2, [r3, #0]
   2c874:	e0a9      	b.n	2c9ca <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2c876:	69ba      	ldr	r2, [r7, #24]
   2c878:	697b      	ldr	r3, [r7, #20]
   2c87a:	429a      	cmp	r2, r3
   2c87c:	d007      	beq.n	2c88e <create_name+0x25a>
   2c87e:	2326      	movs	r3, #38	; 0x26
   2c880:	18fb      	adds	r3, r7, r3
   2c882:	2226      	movs	r2, #38	; 0x26
   2c884:	18ba      	adds	r2, r7, r2
   2c886:	7812      	ldrb	r2, [r2, #0]
   2c888:	2103      	movs	r1, #3
   2c88a:	430a      	orrs	r2, r1
   2c88c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2c88e:	69ba      	ldr	r2, [r7, #24]
   2c890:	697b      	ldr	r3, [r7, #20]
   2c892:	429a      	cmp	r2, r3
   2c894:	d900      	bls.n	2c898 <create_name+0x264>
   2c896:	e097      	b.n	2c9c8 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2c898:	697b      	ldr	r3, [r7, #20]
   2c89a:	61bb      	str	r3, [r7, #24]
   2c89c:	2308      	movs	r3, #8
   2c89e:	623b      	str	r3, [r7, #32]
   2c8a0:	230b      	movs	r3, #11
   2c8a2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2c8a4:	2327      	movs	r3, #39	; 0x27
   2c8a6:	18fb      	adds	r3, r7, r3
   2c8a8:	2227      	movs	r2, #39	; 0x27
   2c8aa:	18ba      	adds	r2, r7, r2
   2c8ac:	7812      	ldrb	r2, [r2, #0]
   2c8ae:	0092      	lsls	r2, r2, #2
   2c8b0:	701a      	strb	r2, [r3, #0]
   2c8b2:	e078      	b.n	2c9a6 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2c8b4:	2324      	movs	r3, #36	; 0x24
   2c8b6:	18fb      	adds	r3, r7, r3
   2c8b8:	881b      	ldrh	r3, [r3, #0]
   2c8ba:	2b7f      	cmp	r3, #127	; 0x7f
   2c8bc:	d920      	bls.n	2c900 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2c8be:	2324      	movs	r3, #36	; 0x24
   2c8c0:	18fc      	adds	r4, r7, r3
   2c8c2:	2324      	movs	r3, #36	; 0x24
   2c8c4:	18fb      	adds	r3, r7, r3
   2c8c6:	881b      	ldrh	r3, [r3, #0]
   2c8c8:	2100      	movs	r1, #0
   2c8ca:	0018      	movs	r0, r3
   2c8cc:	4b37      	ldr	r3, [pc, #220]	; (2c9ac <create_name+0x378>)
   2c8ce:	4798      	blx	r3
   2c8d0:	0003      	movs	r3, r0
   2c8d2:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2c8d4:	2324      	movs	r3, #36	; 0x24
   2c8d6:	18fb      	adds	r3, r7, r3
   2c8d8:	881b      	ldrh	r3, [r3, #0]
   2c8da:	2b00      	cmp	r3, #0
   2c8dc:	d008      	beq.n	2c8f0 <create_name+0x2bc>
   2c8de:	2324      	movs	r3, #36	; 0x24
   2c8e0:	18fb      	adds	r3, r7, r3
   2c8e2:	881b      	ldrh	r3, [r3, #0]
   2c8e4:	3b80      	subs	r3, #128	; 0x80
   2c8e6:	4a36      	ldr	r2, [pc, #216]	; (2c9c0 <create_name+0x38c>)
   2c8e8:	5cd2      	ldrb	r2, [r2, r3]
   2c8ea:	2324      	movs	r3, #36	; 0x24
   2c8ec:	18fb      	adds	r3, r7, r3
   2c8ee:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2c8f0:	2326      	movs	r3, #38	; 0x26
   2c8f2:	18fb      	adds	r3, r7, r3
   2c8f4:	2226      	movs	r2, #38	; 0x26
   2c8f6:	18ba      	adds	r2, r7, r2
   2c8f8:	7812      	ldrb	r2, [r2, #0]
   2c8fa:	2102      	movs	r1, #2
   2c8fc:	430a      	orrs	r2, r1
   2c8fe:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2c900:	2324      	movs	r3, #36	; 0x24
   2c902:	18fb      	adds	r3, r7, r3
   2c904:	881b      	ldrh	r3, [r3, #0]
   2c906:	2b00      	cmp	r3, #0
   2c908:	d009      	beq.n	2c91e <create_name+0x2ea>
   2c90a:	2324      	movs	r3, #36	; 0x24
   2c90c:	18fb      	adds	r3, r7, r3
   2c90e:	881a      	ldrh	r2, [r3, #0]
   2c910:	4b2c      	ldr	r3, [pc, #176]	; (2c9c4 <create_name+0x390>)
   2c912:	0011      	movs	r1, r2
   2c914:	0018      	movs	r0, r3
   2c916:	4b27      	ldr	r3, [pc, #156]	; (2c9b4 <create_name+0x380>)
   2c918:	4798      	blx	r3
   2c91a:	1e03      	subs	r3, r0, #0
   2c91c:	d00c      	beq.n	2c938 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2c91e:	2324      	movs	r3, #36	; 0x24
   2c920:	18fb      	adds	r3, r7, r3
   2c922:	225f      	movs	r2, #95	; 0x5f
   2c924:	801a      	strh	r2, [r3, #0]
   2c926:	2326      	movs	r3, #38	; 0x26
   2c928:	18fb      	adds	r3, r7, r3
   2c92a:	2226      	movs	r2, #38	; 0x26
   2c92c:	18ba      	adds	r2, r7, r2
   2c92e:	7812      	ldrb	r2, [r2, #0]
   2c930:	2103      	movs	r1, #3
   2c932:	430a      	orrs	r2, r1
   2c934:	701a      	strb	r2, [r3, #0]
   2c936:	e02b      	b.n	2c990 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2c938:	2324      	movs	r3, #36	; 0x24
   2c93a:	18fb      	adds	r3, r7, r3
   2c93c:	881b      	ldrh	r3, [r3, #0]
   2c93e:	2b40      	cmp	r3, #64	; 0x40
   2c940:	d90d      	bls.n	2c95e <create_name+0x32a>
   2c942:	2324      	movs	r3, #36	; 0x24
   2c944:	18fb      	adds	r3, r7, r3
   2c946:	881b      	ldrh	r3, [r3, #0]
   2c948:	2b5a      	cmp	r3, #90	; 0x5a
   2c94a:	d808      	bhi.n	2c95e <create_name+0x32a>
					b |= 2;
   2c94c:	2327      	movs	r3, #39	; 0x27
   2c94e:	18fb      	adds	r3, r7, r3
   2c950:	2227      	movs	r2, #39	; 0x27
   2c952:	18ba      	adds	r2, r7, r2
   2c954:	7812      	ldrb	r2, [r2, #0]
   2c956:	2102      	movs	r1, #2
   2c958:	430a      	orrs	r2, r1
   2c95a:	701a      	strb	r2, [r3, #0]
   2c95c:	e018      	b.n	2c990 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2c95e:	2324      	movs	r3, #36	; 0x24
   2c960:	18fb      	adds	r3, r7, r3
   2c962:	881b      	ldrh	r3, [r3, #0]
   2c964:	2b60      	cmp	r3, #96	; 0x60
   2c966:	d913      	bls.n	2c990 <create_name+0x35c>
   2c968:	2324      	movs	r3, #36	; 0x24
   2c96a:	18fb      	adds	r3, r7, r3
   2c96c:	881b      	ldrh	r3, [r3, #0]
   2c96e:	2b7a      	cmp	r3, #122	; 0x7a
   2c970:	d80e      	bhi.n	2c990 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2c972:	2327      	movs	r3, #39	; 0x27
   2c974:	18fb      	adds	r3, r7, r3
   2c976:	2227      	movs	r2, #39	; 0x27
   2c978:	18ba      	adds	r2, r7, r2
   2c97a:	7812      	ldrb	r2, [r2, #0]
   2c97c:	2101      	movs	r1, #1
   2c97e:	430a      	orrs	r2, r1
   2c980:	701a      	strb	r2, [r3, #0]
   2c982:	2324      	movs	r3, #36	; 0x24
   2c984:	18fb      	adds	r3, r7, r3
   2c986:	2224      	movs	r2, #36	; 0x24
   2c988:	18ba      	adds	r2, r7, r2
   2c98a:	8812      	ldrh	r2, [r2, #0]
   2c98c:	3a20      	subs	r2, #32
   2c98e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2c990:	687b      	ldr	r3, [r7, #4]
   2c992:	699a      	ldr	r2, [r3, #24]
   2c994:	6a3b      	ldr	r3, [r7, #32]
   2c996:	1c59      	adds	r1, r3, #1
   2c998:	6239      	str	r1, [r7, #32]
   2c99a:	18d3      	adds	r3, r2, r3
   2c99c:	2224      	movs	r2, #36	; 0x24
   2c99e:	18ba      	adds	r2, r7, r2
   2c9a0:	8812      	ldrh	r2, [r2, #0]
   2c9a2:	b2d2      	uxtb	r2, r2
   2c9a4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2c9a6:	e72b      	b.n	2c800 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2c9a8:	46c0      	nop			; (mov r8, r8)
   2c9aa:	e00e      	b.n	2c9ca <create_name+0x396>
   2c9ac:	0002dd15 	.word	0x0002dd15
   2c9b0:	00038df8 	.word	0x00038df8
   2c9b4:	0002b1d7 	.word	0x0002b1d7
   2c9b8:	7fffffff 	.word	0x7fffffff
   2c9bc:	0002b15d 	.word	0x0002b15d
   2c9c0:	00038e40 	.word	0x00038e40
   2c9c4:	00038e04 	.word	0x00038e04
			if (si > di) break;			/* No extension */
   2c9c8:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2c9ca:	687b      	ldr	r3, [r7, #4]
   2c9cc:	699b      	ldr	r3, [r3, #24]
   2c9ce:	781b      	ldrb	r3, [r3, #0]
   2c9d0:	2be5      	cmp	r3, #229	; 0xe5
   2c9d2:	d103      	bne.n	2c9dc <create_name+0x3a8>
   2c9d4:	687b      	ldr	r3, [r7, #4]
   2c9d6:	699b      	ldr	r3, [r3, #24]
   2c9d8:	2205      	movs	r2, #5
   2c9da:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2c9dc:	69fb      	ldr	r3, [r7, #28]
   2c9de:	2b08      	cmp	r3, #8
   2c9e0:	d106      	bne.n	2c9f0 <create_name+0x3bc>
   2c9e2:	2327      	movs	r3, #39	; 0x27
   2c9e4:	18fb      	adds	r3, r7, r3
   2c9e6:	2227      	movs	r2, #39	; 0x27
   2c9e8:	18ba      	adds	r2, r7, r2
   2c9ea:	7812      	ldrb	r2, [r2, #0]
   2c9ec:	0092      	lsls	r2, r2, #2
   2c9ee:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2c9f0:	2327      	movs	r3, #39	; 0x27
   2c9f2:	18fb      	adds	r3, r7, r3
   2c9f4:	781b      	ldrb	r3, [r3, #0]
   2c9f6:	220c      	movs	r2, #12
   2c9f8:	4013      	ands	r3, r2
   2c9fa:	2b0c      	cmp	r3, #12
   2c9fc:	d006      	beq.n	2ca0c <create_name+0x3d8>
   2c9fe:	2327      	movs	r3, #39	; 0x27
   2ca00:	18fb      	adds	r3, r7, r3
   2ca02:	781b      	ldrb	r3, [r3, #0]
   2ca04:	2203      	movs	r2, #3
   2ca06:	4013      	ands	r3, r2
   2ca08:	2b03      	cmp	r3, #3
   2ca0a:	d107      	bne.n	2ca1c <create_name+0x3e8>
		cf |= NS_LFN;
   2ca0c:	2326      	movs	r3, #38	; 0x26
   2ca0e:	18fb      	adds	r3, r7, r3
   2ca10:	2226      	movs	r2, #38	; 0x26
   2ca12:	18ba      	adds	r2, r7, r2
   2ca14:	7812      	ldrb	r2, [r2, #0]
   2ca16:	2102      	movs	r1, #2
   2ca18:	430a      	orrs	r2, r1
   2ca1a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2ca1c:	2326      	movs	r3, #38	; 0x26
   2ca1e:	18fb      	adds	r3, r7, r3
   2ca20:	781b      	ldrb	r3, [r3, #0]
   2ca22:	2202      	movs	r2, #2
   2ca24:	4013      	ands	r3, r2
   2ca26:	d11d      	bne.n	2ca64 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2ca28:	2327      	movs	r3, #39	; 0x27
   2ca2a:	18fb      	adds	r3, r7, r3
   2ca2c:	781b      	ldrb	r3, [r3, #0]
   2ca2e:	2203      	movs	r2, #3
   2ca30:	4013      	ands	r3, r2
   2ca32:	2b01      	cmp	r3, #1
   2ca34:	d107      	bne.n	2ca46 <create_name+0x412>
   2ca36:	2326      	movs	r3, #38	; 0x26
   2ca38:	18fb      	adds	r3, r7, r3
   2ca3a:	2226      	movs	r2, #38	; 0x26
   2ca3c:	18ba      	adds	r2, r7, r2
   2ca3e:	7812      	ldrb	r2, [r2, #0]
   2ca40:	2110      	movs	r1, #16
   2ca42:	430a      	orrs	r2, r1
   2ca44:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2ca46:	2327      	movs	r3, #39	; 0x27
   2ca48:	18fb      	adds	r3, r7, r3
   2ca4a:	781b      	ldrb	r3, [r3, #0]
   2ca4c:	220c      	movs	r2, #12
   2ca4e:	4013      	ands	r3, r2
   2ca50:	2b04      	cmp	r3, #4
   2ca52:	d107      	bne.n	2ca64 <create_name+0x430>
   2ca54:	2326      	movs	r3, #38	; 0x26
   2ca56:	18fb      	adds	r3, r7, r3
   2ca58:	2226      	movs	r2, #38	; 0x26
   2ca5a:	18ba      	adds	r2, r7, r2
   2ca5c:	7812      	ldrb	r2, [r2, #0]
   2ca5e:	2108      	movs	r1, #8
   2ca60:	430a      	orrs	r2, r1
   2ca62:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2ca64:	687b      	ldr	r3, [r7, #4]
   2ca66:	699b      	ldr	r3, [r3, #24]
   2ca68:	330b      	adds	r3, #11
   2ca6a:	2226      	movs	r2, #38	; 0x26
   2ca6c:	18ba      	adds	r2, r7, r2
   2ca6e:	7812      	ldrb	r2, [r2, #0]
   2ca70:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2ca72:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2ca74:	0018      	movs	r0, r3
   2ca76:	46bd      	mov	sp, r7
   2ca78:	b00b      	add	sp, #44	; 0x2c
   2ca7a:	bd90      	pop	{r4, r7, pc}

0002ca7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2ca7c:	b590      	push	{r4, r7, lr}
   2ca7e:	b085      	sub	sp, #20
   2ca80:	af00      	add	r7, sp, #0
   2ca82:	6078      	str	r0, [r7, #4]
   2ca84:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2ca86:	683b      	ldr	r3, [r7, #0]
   2ca88:	781b      	ldrb	r3, [r3, #0]
   2ca8a:	2b2f      	cmp	r3, #47	; 0x2f
   2ca8c:	d003      	beq.n	2ca96 <follow_path+0x1a>
   2ca8e:	683b      	ldr	r3, [r7, #0]
   2ca90:	781b      	ldrb	r3, [r3, #0]
   2ca92:	2b5c      	cmp	r3, #92	; 0x5c
   2ca94:	d102      	bne.n	2ca9c <follow_path+0x20>
		path++;
   2ca96:	683b      	ldr	r3, [r7, #0]
   2ca98:	3301      	adds	r3, #1
   2ca9a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2ca9c:	687b      	ldr	r3, [r7, #4]
   2ca9e:	2200      	movs	r2, #0
   2caa0:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2caa2:	683b      	ldr	r3, [r7, #0]
   2caa4:	781b      	ldrb	r3, [r3, #0]
   2caa6:	2b1f      	cmp	r3, #31
   2caa8:	d80c      	bhi.n	2cac4 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2caaa:	230f      	movs	r3, #15
   2caac:	18fc      	adds	r4, r7, r3
   2caae:	687b      	ldr	r3, [r7, #4]
   2cab0:	2100      	movs	r1, #0
   2cab2:	0018      	movs	r0, r3
   2cab4:	4b3c      	ldr	r3, [pc, #240]	; (2cba8 <follow_path+0x12c>)
   2cab6:	4798      	blx	r3
   2cab8:	0003      	movs	r3, r0
   2caba:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2cabc:	687b      	ldr	r3, [r7, #4]
   2cabe:	2200      	movs	r2, #0
   2cac0:	615a      	str	r2, [r3, #20]
   2cac2:	e06a      	b.n	2cb9a <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2cac4:	230f      	movs	r3, #15
   2cac6:	18fc      	adds	r4, r7, r3
   2cac8:	003a      	movs	r2, r7
   2caca:	687b      	ldr	r3, [r7, #4]
   2cacc:	0011      	movs	r1, r2
   2cace:	0018      	movs	r0, r3
   2cad0:	4b36      	ldr	r3, [pc, #216]	; (2cbac <follow_path+0x130>)
   2cad2:	4798      	blx	r3
   2cad4:	0003      	movs	r3, r0
   2cad6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cad8:	230f      	movs	r3, #15
   2cada:	18fb      	adds	r3, r7, r3
   2cadc:	781b      	ldrb	r3, [r3, #0]
   2cade:	2b00      	cmp	r3, #0
   2cae0:	d154      	bne.n	2cb8c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2cae2:	230f      	movs	r3, #15
   2cae4:	18fc      	adds	r4, r7, r3
   2cae6:	687b      	ldr	r3, [r7, #4]
   2cae8:	0018      	movs	r0, r3
   2caea:	4b31      	ldr	r3, [pc, #196]	; (2cbb0 <follow_path+0x134>)
   2caec:	4798      	blx	r3
   2caee:	0003      	movs	r3, r0
   2caf0:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2caf2:	687b      	ldr	r3, [r7, #4]
   2caf4:	699a      	ldr	r2, [r3, #24]
   2caf6:	230e      	movs	r3, #14
   2caf8:	18fb      	adds	r3, r7, r3
   2cafa:	7ad2      	ldrb	r2, [r2, #11]
   2cafc:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2cafe:	230f      	movs	r3, #15
   2cb00:	18fb      	adds	r3, r7, r3
   2cb02:	781b      	ldrb	r3, [r3, #0]
   2cb04:	2b00      	cmp	r3, #0
   2cb06:	d00f      	beq.n	2cb28 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2cb08:	230f      	movs	r3, #15
   2cb0a:	18fb      	adds	r3, r7, r3
   2cb0c:	781b      	ldrb	r3, [r3, #0]
   2cb0e:	2b04      	cmp	r3, #4
   2cb10:	d13e      	bne.n	2cb90 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2cb12:	230e      	movs	r3, #14
   2cb14:	18fb      	adds	r3, r7, r3
   2cb16:	781b      	ldrb	r3, [r3, #0]
   2cb18:	2204      	movs	r2, #4
   2cb1a:	4013      	ands	r3, r2
   2cb1c:	d13a      	bne.n	2cb94 <follow_path+0x118>
   2cb1e:	230f      	movs	r3, #15
   2cb20:	18fb      	adds	r3, r7, r3
   2cb22:	2205      	movs	r2, #5
   2cb24:	701a      	strb	r2, [r3, #0]
				}
				break;
   2cb26:	e035      	b.n	2cb94 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2cb28:	230e      	movs	r3, #14
   2cb2a:	18fb      	adds	r3, r7, r3
   2cb2c:	781b      	ldrb	r3, [r3, #0]
   2cb2e:	2204      	movs	r2, #4
   2cb30:	4013      	ands	r3, r2
   2cb32:	d131      	bne.n	2cb98 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2cb34:	687b      	ldr	r3, [r7, #4]
   2cb36:	695b      	ldr	r3, [r3, #20]
   2cb38:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2cb3a:	68bb      	ldr	r3, [r7, #8]
   2cb3c:	330b      	adds	r3, #11
   2cb3e:	781b      	ldrb	r3, [r3, #0]
   2cb40:	001a      	movs	r2, r3
   2cb42:	2310      	movs	r3, #16
   2cb44:	4013      	ands	r3, r2
   2cb46:	d104      	bne.n	2cb52 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2cb48:	230f      	movs	r3, #15
   2cb4a:	18fb      	adds	r3, r7, r3
   2cb4c:	2205      	movs	r2, #5
   2cb4e:	701a      	strb	r2, [r3, #0]
   2cb50:	e023      	b.n	2cb9a <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2cb52:	68bb      	ldr	r3, [r7, #8]
   2cb54:	3315      	adds	r3, #21
   2cb56:	781b      	ldrb	r3, [r3, #0]
   2cb58:	021b      	lsls	r3, r3, #8
   2cb5a:	b21a      	sxth	r2, r3
   2cb5c:	68bb      	ldr	r3, [r7, #8]
   2cb5e:	3314      	adds	r3, #20
   2cb60:	781b      	ldrb	r3, [r3, #0]
   2cb62:	b21b      	sxth	r3, r3
   2cb64:	4313      	orrs	r3, r2
   2cb66:	b21b      	sxth	r3, r3
   2cb68:	b29b      	uxth	r3, r3
   2cb6a:	041b      	lsls	r3, r3, #16
   2cb6c:	68ba      	ldr	r2, [r7, #8]
   2cb6e:	321b      	adds	r2, #27
   2cb70:	7812      	ldrb	r2, [r2, #0]
   2cb72:	0212      	lsls	r2, r2, #8
   2cb74:	b211      	sxth	r1, r2
   2cb76:	68ba      	ldr	r2, [r7, #8]
   2cb78:	321a      	adds	r2, #26
   2cb7a:	7812      	ldrb	r2, [r2, #0]
   2cb7c:	b212      	sxth	r2, r2
   2cb7e:	430a      	orrs	r2, r1
   2cb80:	b212      	sxth	r2, r2
   2cb82:	b292      	uxth	r2, r2
   2cb84:	431a      	orrs	r2, r3
   2cb86:	687b      	ldr	r3, [r7, #4]
   2cb88:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2cb8a:	e79b      	b.n	2cac4 <follow_path+0x48>
			if (res != FR_OK) break;
   2cb8c:	46c0      	nop			; (mov r8, r8)
   2cb8e:	e004      	b.n	2cb9a <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2cb90:	46c0      	nop			; (mov r8, r8)
   2cb92:	e002      	b.n	2cb9a <follow_path+0x11e>
				break;
   2cb94:	46c0      	nop			; (mov r8, r8)
   2cb96:	e000      	b.n	2cb9a <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2cb98:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cb9a:	230f      	movs	r3, #15
   2cb9c:	18fb      	adds	r3, r7, r3
   2cb9e:	781b      	ldrb	r3, [r3, #0]
}
   2cba0:	0018      	movs	r0, r3
   2cba2:	46bd      	mov	sp, r7
   2cba4:	b005      	add	sp, #20
   2cba6:	bd90      	pop	{r4, r7, pc}
   2cba8:	0002ba4d 	.word	0x0002ba4d
   2cbac:	0002c635 	.word	0x0002c635
   2cbb0:	0002c0d1 	.word	0x0002c0d1

0002cbb4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2cbb4:	b590      	push	{r4, r7, lr}
   2cbb6:	b083      	sub	sp, #12
   2cbb8:	af00      	add	r7, sp, #0
   2cbba:	6078      	str	r0, [r7, #4]
   2cbbc:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2cbbe:	687b      	ldr	r3, [r7, #4]
   2cbc0:	7858      	ldrb	r0, [r3, #1]
   2cbc2:	687b      	ldr	r3, [r7, #4]
   2cbc4:	3330      	adds	r3, #48	; 0x30
   2cbc6:	0019      	movs	r1, r3
   2cbc8:	683a      	ldr	r2, [r7, #0]
   2cbca:	2301      	movs	r3, #1
   2cbcc:	4c2a      	ldr	r4, [pc, #168]	; (2cc78 <check_fs+0xc4>)
   2cbce:	47a0      	blx	r4
   2cbd0:	1e03      	subs	r3, r0, #0
   2cbd2:	d001      	beq.n	2cbd8 <check_fs+0x24>
		return 3;
   2cbd4:	2303      	movs	r3, #3
   2cbd6:	e04b      	b.n	2cc70 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2cbd8:	687b      	ldr	r3, [r7, #4]
   2cbda:	4a28      	ldr	r2, [pc, #160]	; (2cc7c <check_fs+0xc8>)
   2cbdc:	4694      	mov	ip, r2
   2cbde:	4463      	add	r3, ip
   2cbe0:	3301      	adds	r3, #1
   2cbe2:	781b      	ldrb	r3, [r3, #0]
   2cbe4:	021b      	lsls	r3, r3, #8
   2cbe6:	b21a      	sxth	r2, r3
   2cbe8:	687b      	ldr	r3, [r7, #4]
   2cbea:	4924      	ldr	r1, [pc, #144]	; (2cc7c <check_fs+0xc8>)
   2cbec:	5c5b      	ldrb	r3, [r3, r1]
   2cbee:	b21b      	sxth	r3, r3
   2cbf0:	4313      	orrs	r3, r2
   2cbf2:	b21b      	sxth	r3, r3
   2cbf4:	4a22      	ldr	r2, [pc, #136]	; (2cc80 <check_fs+0xcc>)
   2cbf6:	4293      	cmp	r3, r2
   2cbf8:	d001      	beq.n	2cbfe <check_fs+0x4a>
		return 2;
   2cbfa:	2302      	movs	r3, #2
   2cbfc:	e038      	b.n	2cc70 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2cbfe:	687b      	ldr	r3, [r7, #4]
   2cc00:	3366      	adds	r3, #102	; 0x66
   2cc02:	3303      	adds	r3, #3
   2cc04:	781b      	ldrb	r3, [r3, #0]
   2cc06:	061a      	lsls	r2, r3, #24
   2cc08:	687b      	ldr	r3, [r7, #4]
   2cc0a:	3366      	adds	r3, #102	; 0x66
   2cc0c:	3302      	adds	r3, #2
   2cc0e:	781b      	ldrb	r3, [r3, #0]
   2cc10:	041b      	lsls	r3, r3, #16
   2cc12:	4313      	orrs	r3, r2
   2cc14:	687a      	ldr	r2, [r7, #4]
   2cc16:	3266      	adds	r2, #102	; 0x66
   2cc18:	3201      	adds	r2, #1
   2cc1a:	7812      	ldrb	r2, [r2, #0]
   2cc1c:	0212      	lsls	r2, r2, #8
   2cc1e:	4313      	orrs	r3, r2
   2cc20:	687a      	ldr	r2, [r7, #4]
   2cc22:	2166      	movs	r1, #102	; 0x66
   2cc24:	5c52      	ldrb	r2, [r2, r1]
   2cc26:	4313      	orrs	r3, r2
   2cc28:	021b      	lsls	r3, r3, #8
   2cc2a:	0a1b      	lsrs	r3, r3, #8
   2cc2c:	4a15      	ldr	r2, [pc, #84]	; (2cc84 <check_fs+0xd0>)
   2cc2e:	4293      	cmp	r3, r2
   2cc30:	d101      	bne.n	2cc36 <check_fs+0x82>
		return 0;
   2cc32:	2300      	movs	r3, #0
   2cc34:	e01c      	b.n	2cc70 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2cc36:	687b      	ldr	r3, [r7, #4]
   2cc38:	3382      	adds	r3, #130	; 0x82
   2cc3a:	3303      	adds	r3, #3
   2cc3c:	781b      	ldrb	r3, [r3, #0]
   2cc3e:	061a      	lsls	r2, r3, #24
   2cc40:	687b      	ldr	r3, [r7, #4]
   2cc42:	3382      	adds	r3, #130	; 0x82
   2cc44:	3302      	adds	r3, #2
   2cc46:	781b      	ldrb	r3, [r3, #0]
   2cc48:	041b      	lsls	r3, r3, #16
   2cc4a:	4313      	orrs	r3, r2
   2cc4c:	687a      	ldr	r2, [r7, #4]
   2cc4e:	3282      	adds	r2, #130	; 0x82
   2cc50:	3201      	adds	r2, #1
   2cc52:	7812      	ldrb	r2, [r2, #0]
   2cc54:	0212      	lsls	r2, r2, #8
   2cc56:	4313      	orrs	r3, r2
   2cc58:	687a      	ldr	r2, [r7, #4]
   2cc5a:	2182      	movs	r1, #130	; 0x82
   2cc5c:	5c52      	ldrb	r2, [r2, r1]
   2cc5e:	4313      	orrs	r3, r2
   2cc60:	021b      	lsls	r3, r3, #8
   2cc62:	0a1b      	lsrs	r3, r3, #8
   2cc64:	4a07      	ldr	r2, [pc, #28]	; (2cc84 <check_fs+0xd0>)
   2cc66:	4293      	cmp	r3, r2
   2cc68:	d101      	bne.n	2cc6e <check_fs+0xba>
		return 0;
   2cc6a:	2300      	movs	r3, #0
   2cc6c:	e000      	b.n	2cc70 <check_fs+0xbc>

	return 1;
   2cc6e:	2301      	movs	r3, #1
}
   2cc70:	0018      	movs	r0, r3
   2cc72:	46bd      	mov	sp, r7
   2cc74:	b003      	add	sp, #12
   2cc76:	bd90      	pop	{r4, r7, pc}
   2cc78:	0002ae1d 	.word	0x0002ae1d
   2cc7c:	0000022e 	.word	0x0000022e
   2cc80:	ffffaa55 	.word	0xffffaa55
   2cc84:	00544146 	.word	0x00544146

0002cc88 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2cc88:	b590      	push	{r4, r7, lr}
   2cc8a:	b093      	sub	sp, #76	; 0x4c
   2cc8c:	af00      	add	r7, sp, #0
   2cc8e:	60f8      	str	r0, [r7, #12]
   2cc90:	60b9      	str	r1, [r7, #8]
   2cc92:	1dfb      	adds	r3, r7, #7
   2cc94:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2cc96:	68fb      	ldr	r3, [r7, #12]
   2cc98:	681b      	ldr	r3, [r3, #0]
   2cc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2cc9e:	781b      	ldrb	r3, [r3, #0]
   2cca0:	3b30      	subs	r3, #48	; 0x30
   2cca2:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2cca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cca6:	2b09      	cmp	r3, #9
   2cca8:	d80b      	bhi.n	2ccc2 <chk_mounted+0x3a>
   2ccaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ccac:	3301      	adds	r3, #1
   2ccae:	781b      	ldrb	r3, [r3, #0]
   2ccb0:	2b3a      	cmp	r3, #58	; 0x3a
   2ccb2:	d106      	bne.n	2ccc2 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2ccb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2ccb6:	3302      	adds	r3, #2
   2ccb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   2ccba:	68fb      	ldr	r3, [r7, #12]
   2ccbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2ccbe:	601a      	str	r2, [r3, #0]
   2ccc0:	e001      	b.n	2ccc6 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2ccc2:	2300      	movs	r3, #0
   2ccc4:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2ccc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2ccc8:	2b07      	cmp	r3, #7
   2ccca:	d901      	bls.n	2ccd0 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2cccc:	230b      	movs	r3, #11
   2ccce:	e2af      	b.n	2d230 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2ccd0:	4bc5      	ldr	r3, [pc, #788]	; (2cfe8 <chk_mounted+0x360>)
   2ccd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2ccd4:	0092      	lsls	r2, r2, #2
   2ccd6:	58d3      	ldr	r3, [r2, r3]
   2ccd8:	62bb      	str	r3, [r7, #40]	; 0x28
   2ccda:	68bb      	ldr	r3, [r7, #8]
   2ccdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ccde:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cce2:	2b00      	cmp	r3, #0
   2cce4:	d101      	bne.n	2ccea <chk_mounted+0x62>
   2cce6:	230c      	movs	r3, #12
   2cce8:	e2a2      	b.n	2d230 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2ccea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ccec:	781b      	ldrb	r3, [r3, #0]
   2ccee:	2b00      	cmp	r3, #0
   2ccf0:	d01c      	beq.n	2cd2c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2ccf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ccf4:	785b      	ldrb	r3, [r3, #1]
   2ccf6:	2227      	movs	r2, #39	; 0x27
   2ccf8:	18bc      	adds	r4, r7, r2
   2ccfa:	0018      	movs	r0, r3
   2ccfc:	4bbb      	ldr	r3, [pc, #748]	; (2cfec <chk_mounted+0x364>)
   2ccfe:	4798      	blx	r3
   2cd00:	0003      	movs	r3, r0
   2cd02:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2cd04:	2327      	movs	r3, #39	; 0x27
   2cd06:	18fb      	adds	r3, r7, r3
   2cd08:	781b      	ldrb	r3, [r3, #0]
   2cd0a:	2201      	movs	r2, #1
   2cd0c:	4013      	ands	r3, r2
   2cd0e:	d10d      	bne.n	2cd2c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2cd10:	1dfb      	adds	r3, r7, #7
   2cd12:	781b      	ldrb	r3, [r3, #0]
   2cd14:	2b00      	cmp	r3, #0
   2cd16:	d007      	beq.n	2cd28 <chk_mounted+0xa0>
   2cd18:	2327      	movs	r3, #39	; 0x27
   2cd1a:	18fb      	adds	r3, r7, r3
   2cd1c:	781b      	ldrb	r3, [r3, #0]
   2cd1e:	2204      	movs	r2, #4
   2cd20:	4013      	ands	r3, r2
   2cd22:	d001      	beq.n	2cd28 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2cd24:	230a      	movs	r3, #10
   2cd26:	e283      	b.n	2d230 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2cd28:	2300      	movs	r3, #0
   2cd2a:	e281      	b.n	2d230 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2cd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd2e:	2200      	movs	r2, #0
   2cd30:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2cd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2cd34:	b2da      	uxtb	r2, r3
   2cd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd38:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2cd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd3c:	785b      	ldrb	r3, [r3, #1]
   2cd3e:	2227      	movs	r2, #39	; 0x27
   2cd40:	18bc      	adds	r4, r7, r2
   2cd42:	0018      	movs	r0, r3
   2cd44:	4baa      	ldr	r3, [pc, #680]	; (2cff0 <chk_mounted+0x368>)
   2cd46:	4798      	blx	r3
   2cd48:	0003      	movs	r3, r0
   2cd4a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2cd4c:	2327      	movs	r3, #39	; 0x27
   2cd4e:	18fb      	adds	r3, r7, r3
   2cd50:	781b      	ldrb	r3, [r3, #0]
   2cd52:	2201      	movs	r2, #1
   2cd54:	4013      	ands	r3, r2
   2cd56:	d001      	beq.n	2cd5c <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2cd58:	2303      	movs	r3, #3
   2cd5a:	e269      	b.n	2d230 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2cd5c:	1dfb      	adds	r3, r7, #7
   2cd5e:	781b      	ldrb	r3, [r3, #0]
   2cd60:	2b00      	cmp	r3, #0
   2cd62:	d007      	beq.n	2cd74 <chk_mounted+0xec>
   2cd64:	2327      	movs	r3, #39	; 0x27
   2cd66:	18fb      	adds	r3, r7, r3
   2cd68:	781b      	ldrb	r3, [r3, #0]
   2cd6a:	2204      	movs	r2, #4
   2cd6c:	4013      	ands	r3, r2
   2cd6e:	d001      	beq.n	2cd74 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2cd70:	230a      	movs	r3, #10
   2cd72:	e25d      	b.n	2d230 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2cd74:	2300      	movs	r3, #0
   2cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
   2cd78:	2347      	movs	r3, #71	; 0x47
   2cd7a:	18fc      	adds	r4, r7, r3
   2cd7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2cd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cd80:	0011      	movs	r1, r2
   2cd82:	0018      	movs	r0, r3
   2cd84:	4b9b      	ldr	r3, [pc, #620]	; (2cff4 <chk_mounted+0x36c>)
   2cd86:	4798      	blx	r3
   2cd88:	0003      	movs	r3, r0
   2cd8a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2cd8c:	2347      	movs	r3, #71	; 0x47
   2cd8e:	18fb      	adds	r3, r7, r3
   2cd90:	781b      	ldrb	r3, [r3, #0]
   2cd92:	2b01      	cmp	r3, #1
   2cd94:	d13b      	bne.n	2ce0e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2cd96:	2346      	movs	r3, #70	; 0x46
   2cd98:	18fb      	adds	r3, r7, r3
   2cd9a:	2200      	movs	r2, #0
   2cd9c:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2cd9e:	2346      	movs	r3, #70	; 0x46
   2cda0:	18fb      	adds	r3, r7, r3
   2cda2:	781b      	ldrb	r3, [r3, #0]
   2cda4:	2b00      	cmp	r3, #0
   2cda6:	d006      	beq.n	2cdb6 <chk_mounted+0x12e>
   2cda8:	2346      	movs	r3, #70	; 0x46
   2cdaa:	18fb      	adds	r3, r7, r3
   2cdac:	781a      	ldrb	r2, [r3, #0]
   2cdae:	2346      	movs	r3, #70	; 0x46
   2cdb0:	18fb      	adds	r3, r7, r3
   2cdb2:	3a01      	subs	r2, #1
   2cdb4:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2cdb6:	2346      	movs	r3, #70	; 0x46
   2cdb8:	18fb      	adds	r3, r7, r3
   2cdba:	781b      	ldrb	r3, [r3, #0]
   2cdbc:	011b      	lsls	r3, r3, #4
   2cdbe:	33bf      	adds	r3, #191	; 0xbf
   2cdc0:	33ff      	adds	r3, #255	; 0xff
   2cdc2:	3330      	adds	r3, #48	; 0x30
   2cdc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cdc6:	18d3      	adds	r3, r2, r3
   2cdc8:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2cdca:	6a3b      	ldr	r3, [r7, #32]
   2cdcc:	3304      	adds	r3, #4
   2cdce:	781b      	ldrb	r3, [r3, #0]
   2cdd0:	2b00      	cmp	r3, #0
   2cdd2:	d01c      	beq.n	2ce0e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2cdd4:	6a3b      	ldr	r3, [r7, #32]
   2cdd6:	330b      	adds	r3, #11
   2cdd8:	781b      	ldrb	r3, [r3, #0]
   2cdda:	061a      	lsls	r2, r3, #24
   2cddc:	6a3b      	ldr	r3, [r7, #32]
   2cdde:	330a      	adds	r3, #10
   2cde0:	781b      	ldrb	r3, [r3, #0]
   2cde2:	041b      	lsls	r3, r3, #16
   2cde4:	4313      	orrs	r3, r2
   2cde6:	6a3a      	ldr	r2, [r7, #32]
   2cde8:	3209      	adds	r2, #9
   2cdea:	7812      	ldrb	r2, [r2, #0]
   2cdec:	0212      	lsls	r2, r2, #8
   2cdee:	4313      	orrs	r3, r2
   2cdf0:	6a3a      	ldr	r2, [r7, #32]
   2cdf2:	3208      	adds	r2, #8
   2cdf4:	7812      	ldrb	r2, [r2, #0]
   2cdf6:	4313      	orrs	r3, r2
   2cdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2cdfa:	2347      	movs	r3, #71	; 0x47
   2cdfc:	18fc      	adds	r4, r7, r3
   2cdfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce02:	0011      	movs	r1, r2
   2ce04:	0018      	movs	r0, r3
   2ce06:	4b7b      	ldr	r3, [pc, #492]	; (2cff4 <chk_mounted+0x36c>)
   2ce08:	4798      	blx	r3
   2ce0a:	0003      	movs	r3, r0
   2ce0c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2ce0e:	2347      	movs	r3, #71	; 0x47
   2ce10:	18fb      	adds	r3, r7, r3
   2ce12:	781b      	ldrb	r3, [r3, #0]
   2ce14:	2b03      	cmp	r3, #3
   2ce16:	d101      	bne.n	2ce1c <chk_mounted+0x194>
   2ce18:	2301      	movs	r3, #1
   2ce1a:	e209      	b.n	2d230 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2ce1c:	2347      	movs	r3, #71	; 0x47
   2ce1e:	18fb      	adds	r3, r7, r3
   2ce20:	781b      	ldrb	r3, [r3, #0]
   2ce22:	2b00      	cmp	r3, #0
   2ce24:	d001      	beq.n	2ce2a <chk_mounted+0x1a2>
   2ce26:	230d      	movs	r3, #13
   2ce28:	e202      	b.n	2d230 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2ce2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce2c:	223c      	movs	r2, #60	; 0x3c
   2ce2e:	5c9b      	ldrb	r3, [r3, r2]
   2ce30:	021b      	lsls	r3, r3, #8
   2ce32:	b21a      	sxth	r2, r3
   2ce34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce36:	213b      	movs	r1, #59	; 0x3b
   2ce38:	5c5b      	ldrb	r3, [r3, r1]
   2ce3a:	b21b      	sxth	r3, r3
   2ce3c:	4313      	orrs	r3, r2
   2ce3e:	b21a      	sxth	r2, r3
   2ce40:	2380      	movs	r3, #128	; 0x80
   2ce42:	009b      	lsls	r3, r3, #2
   2ce44:	429a      	cmp	r2, r3
   2ce46:	d001      	beq.n	2ce4c <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2ce48:	230d      	movs	r3, #13
   2ce4a:	e1f1      	b.n	2d230 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2ce4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce4e:	2247      	movs	r2, #71	; 0x47
   2ce50:	5c9b      	ldrb	r3, [r3, r2]
   2ce52:	021b      	lsls	r3, r3, #8
   2ce54:	b21a      	sxth	r2, r3
   2ce56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce58:	2146      	movs	r1, #70	; 0x46
   2ce5a:	5c5b      	ldrb	r3, [r3, r1]
   2ce5c:	b21b      	sxth	r3, r3
   2ce5e:	4313      	orrs	r3, r2
   2ce60:	b21b      	sxth	r3, r3
   2ce62:	b29b      	uxth	r3, r3
   2ce64:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2ce66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2ce68:	2b00      	cmp	r3, #0
   2ce6a:	d112      	bne.n	2ce92 <chk_mounted+0x20a>
   2ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce6e:	2257      	movs	r2, #87	; 0x57
   2ce70:	5c9b      	ldrb	r3, [r3, r2]
   2ce72:	061a      	lsls	r2, r3, #24
   2ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce76:	2156      	movs	r1, #86	; 0x56
   2ce78:	5c5b      	ldrb	r3, [r3, r1]
   2ce7a:	041b      	lsls	r3, r3, #16
   2ce7c:	4313      	orrs	r3, r2
   2ce7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce80:	2155      	movs	r1, #85	; 0x55
   2ce82:	5c52      	ldrb	r2, [r2, r1]
   2ce84:	0212      	lsls	r2, r2, #8
   2ce86:	4313      	orrs	r3, r2
   2ce88:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce8a:	2154      	movs	r1, #84	; 0x54
   2ce8c:	5c52      	ldrb	r2, [r2, r1]
   2ce8e:	4313      	orrs	r3, r2
   2ce90:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2ce94:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2ce96:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2ce98:	231f      	movs	r3, #31
   2ce9a:	18fb      	adds	r3, r7, r3
   2ce9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ce9e:	2140      	movs	r1, #64	; 0x40
   2cea0:	5c52      	ldrb	r2, [r2, r1]
   2cea2:	701a      	strb	r2, [r3, #0]
   2cea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cea6:	221f      	movs	r2, #31
   2cea8:	18ba      	adds	r2, r7, r2
   2ceaa:	7812      	ldrb	r2, [r2, #0]
   2ceac:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2ceae:	231f      	movs	r3, #31
   2ceb0:	18fb      	adds	r3, r7, r3
   2ceb2:	781b      	ldrb	r3, [r3, #0]
   2ceb4:	2b01      	cmp	r3, #1
   2ceb6:	d006      	beq.n	2cec6 <chk_mounted+0x23e>
   2ceb8:	231f      	movs	r3, #31
   2ceba:	18fb      	adds	r3, r7, r3
   2cebc:	781b      	ldrb	r3, [r3, #0]
   2cebe:	2b02      	cmp	r3, #2
   2cec0:	d001      	beq.n	2cec6 <chk_mounted+0x23e>
   2cec2:	230d      	movs	r3, #13
   2cec4:	e1b4      	b.n	2d230 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2cec6:	231f      	movs	r3, #31
   2cec8:	18fb      	adds	r3, r7, r3
   2ceca:	781a      	ldrb	r2, [r3, #0]
   2cecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2cece:	4353      	muls	r3, r2
   2ced0:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2ced2:	231f      	movs	r3, #31
   2ced4:	18fb      	adds	r3, r7, r3
   2ced6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2ced8:	213d      	movs	r1, #61	; 0x3d
   2ceda:	5c52      	ldrb	r2, [r2, r1]
   2cedc:	701a      	strb	r2, [r3, #0]
   2cede:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cee0:	221f      	movs	r2, #31
   2cee2:	18ba      	adds	r2, r7, r2
   2cee4:	7812      	ldrb	r2, [r2, #0]
   2cee6:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2cee8:	231f      	movs	r3, #31
   2ceea:	18fb      	adds	r3, r7, r3
   2ceec:	781b      	ldrb	r3, [r3, #0]
   2ceee:	2b00      	cmp	r3, #0
   2cef0:	d008      	beq.n	2cf04 <chk_mounted+0x27c>
   2cef2:	231f      	movs	r3, #31
   2cef4:	18fb      	adds	r3, r7, r3
   2cef6:	781b      	ldrb	r3, [r3, #0]
   2cef8:	221f      	movs	r2, #31
   2cefa:	18ba      	adds	r2, r7, r2
   2cefc:	7812      	ldrb	r2, [r2, #0]
   2cefe:	3a01      	subs	r2, #1
   2cf00:	4013      	ands	r3, r2
   2cf02:	d001      	beq.n	2cf08 <chk_mounted+0x280>
   2cf04:	230d      	movs	r3, #13
   2cf06:	e193      	b.n	2d230 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2cf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf0a:	2242      	movs	r2, #66	; 0x42
   2cf0c:	5c9b      	ldrb	r3, [r3, r2]
   2cf0e:	021b      	lsls	r3, r3, #8
   2cf10:	b21a      	sxth	r2, r3
   2cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf14:	2141      	movs	r1, #65	; 0x41
   2cf16:	5c5b      	ldrb	r3, [r3, r1]
   2cf18:	b21b      	sxth	r3, r3
   2cf1a:	4313      	orrs	r3, r2
   2cf1c:	b21b      	sxth	r3, r3
   2cf1e:	b29a      	uxth	r2, r3
   2cf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf22:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2cf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf26:	891b      	ldrh	r3, [r3, #8]
   2cf28:	220f      	movs	r2, #15
   2cf2a:	4013      	ands	r3, r2
   2cf2c:	b29b      	uxth	r3, r3
   2cf2e:	2b00      	cmp	r3, #0
   2cf30:	d001      	beq.n	2cf36 <chk_mounted+0x2ae>
   2cf32:	230d      	movs	r3, #13
   2cf34:	e17c      	b.n	2d230 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2cf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf38:	2244      	movs	r2, #68	; 0x44
   2cf3a:	5c9b      	ldrb	r3, [r3, r2]
   2cf3c:	021b      	lsls	r3, r3, #8
   2cf3e:	b21a      	sxth	r2, r3
   2cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf42:	2143      	movs	r1, #67	; 0x43
   2cf44:	5c5b      	ldrb	r3, [r3, r1]
   2cf46:	b21b      	sxth	r3, r3
   2cf48:	4313      	orrs	r3, r2
   2cf4a:	b21b      	sxth	r3, r3
   2cf4c:	b29b      	uxth	r3, r3
   2cf4e:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2cf50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2cf52:	2b00      	cmp	r3, #0
   2cf54:	d112      	bne.n	2cf7c <chk_mounted+0x2f4>
   2cf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf58:	2253      	movs	r2, #83	; 0x53
   2cf5a:	5c9b      	ldrb	r3, [r3, r2]
   2cf5c:	061a      	lsls	r2, r3, #24
   2cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf60:	2152      	movs	r1, #82	; 0x52
   2cf62:	5c5b      	ldrb	r3, [r3, r1]
   2cf64:	041b      	lsls	r3, r3, #16
   2cf66:	4313      	orrs	r3, r2
   2cf68:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf6a:	2151      	movs	r1, #81	; 0x51
   2cf6c:	5c52      	ldrb	r2, [r2, r1]
   2cf6e:	0212      	lsls	r2, r2, #8
   2cf70:	4313      	orrs	r3, r2
   2cf72:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf74:	2150      	movs	r1, #80	; 0x50
   2cf76:	5c52      	ldrb	r2, [r2, r1]
   2cf78:	4313      	orrs	r3, r2
   2cf7a:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2cf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf7e:	223f      	movs	r2, #63	; 0x3f
   2cf80:	5c9b      	ldrb	r3, [r3, r2]
   2cf82:	021b      	lsls	r3, r3, #8
   2cf84:	b21a      	sxth	r2, r3
   2cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cf88:	213e      	movs	r1, #62	; 0x3e
   2cf8a:	5c5b      	ldrb	r3, [r3, r1]
   2cf8c:	b21b      	sxth	r3, r3
   2cf8e:	4313      	orrs	r3, r2
   2cf90:	b21a      	sxth	r2, r3
   2cf92:	231c      	movs	r3, #28
   2cf94:	18fb      	adds	r3, r7, r3
   2cf96:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2cf98:	231c      	movs	r3, #28
   2cf9a:	18fb      	adds	r3, r7, r3
   2cf9c:	881b      	ldrh	r3, [r3, #0]
   2cf9e:	2b00      	cmp	r3, #0
   2cfa0:	d101      	bne.n	2cfa6 <chk_mounted+0x31e>
   2cfa2:	230d      	movs	r3, #13
   2cfa4:	e144      	b.n	2d230 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2cfa6:	231c      	movs	r3, #28
   2cfa8:	18fb      	adds	r3, r7, r3
   2cfaa:	881a      	ldrh	r2, [r3, #0]
   2cfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2cfae:	18d3      	adds	r3, r2, r3
   2cfb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cfb2:	8912      	ldrh	r2, [r2, #8]
   2cfb4:	0912      	lsrs	r2, r2, #4
   2cfb6:	b292      	uxth	r2, r2
   2cfb8:	189b      	adds	r3, r3, r2
   2cfba:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2cfbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2cfbe:	69bb      	ldr	r3, [r7, #24]
   2cfc0:	429a      	cmp	r2, r3
   2cfc2:	d201      	bcs.n	2cfc8 <chk_mounted+0x340>
   2cfc4:	230d      	movs	r3, #13
   2cfc6:	e133      	b.n	2d230 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2cfc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2cfca:	69bb      	ldr	r3, [r7, #24]
   2cfcc:	1ad2      	subs	r2, r2, r3
   2cfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2cfd0:	789b      	ldrb	r3, [r3, #2]
   2cfd2:	0019      	movs	r1, r3
   2cfd4:	4b08      	ldr	r3, [pc, #32]	; (2cff8 <chk_mounted+0x370>)
   2cfd6:	0010      	movs	r0, r2
   2cfd8:	4798      	blx	r3
   2cfda:	0003      	movs	r3, r0
   2cfdc:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2cfde:	697b      	ldr	r3, [r7, #20]
   2cfe0:	2b00      	cmp	r3, #0
   2cfe2:	d10b      	bne.n	2cffc <chk_mounted+0x374>
   2cfe4:	230d      	movs	r3, #13
   2cfe6:	e123      	b.n	2d230 <chk_mounted+0x5a8>
   2cfe8:	20003ee0 	.word	0x20003ee0
   2cfec:	0002ade5 	.word	0x0002ade5
   2cff0:	0002ad61 	.word	0x0002ad61
   2cff4:	0002cbb5 	.word	0x0002cbb5
   2cff8:	000323b1 	.word	0x000323b1
	fmt = FS_FAT12;
   2cffc:	2347      	movs	r3, #71	; 0x47
   2cffe:	18fb      	adds	r3, r7, r3
   2d000:	2201      	movs	r2, #1
   2d002:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2d004:	697b      	ldr	r3, [r7, #20]
   2d006:	4a8c      	ldr	r2, [pc, #560]	; (2d238 <chk_mounted+0x5b0>)
   2d008:	4293      	cmp	r3, r2
   2d00a:	d903      	bls.n	2d014 <chk_mounted+0x38c>
   2d00c:	2347      	movs	r3, #71	; 0x47
   2d00e:	18fb      	adds	r3, r7, r3
   2d010:	2202      	movs	r2, #2
   2d012:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2d014:	697b      	ldr	r3, [r7, #20]
   2d016:	4a89      	ldr	r2, [pc, #548]	; (2d23c <chk_mounted+0x5b4>)
   2d018:	4293      	cmp	r3, r2
   2d01a:	d903      	bls.n	2d024 <chk_mounted+0x39c>
   2d01c:	2347      	movs	r3, #71	; 0x47
   2d01e:	18fb      	adds	r3, r7, r3
   2d020:	2203      	movs	r2, #3
   2d022:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2d024:	697b      	ldr	r3, [r7, #20]
   2d026:	1c9a      	adds	r2, r3, #2
   2d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d02a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2d02c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d02e:	69bb      	ldr	r3, [r7, #24]
   2d030:	18d2      	adds	r2, r2, r3
   2d032:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d034:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2d036:	231c      	movs	r3, #28
   2d038:	18fb      	adds	r3, r7, r3
   2d03a:	881a      	ldrh	r2, [r3, #0]
   2d03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d03e:	18d2      	adds	r2, r2, r3
   2d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d042:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2d044:	2347      	movs	r3, #71	; 0x47
   2d046:	18fb      	adds	r3, r7, r3
   2d048:	781b      	ldrb	r3, [r3, #0]
   2d04a:	2b03      	cmp	r3, #3
   2d04c:	d11e      	bne.n	2d08c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d050:	891b      	ldrh	r3, [r3, #8]
   2d052:	2b00      	cmp	r3, #0
   2d054:	d001      	beq.n	2d05a <chk_mounted+0x3d2>
   2d056:	230d      	movs	r3, #13
   2d058:	e0ea      	b.n	2d230 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d05c:	225f      	movs	r2, #95	; 0x5f
   2d05e:	5c9b      	ldrb	r3, [r3, r2]
   2d060:	061a      	lsls	r2, r3, #24
   2d062:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d064:	215e      	movs	r1, #94	; 0x5e
   2d066:	5c5b      	ldrb	r3, [r3, r1]
   2d068:	041b      	lsls	r3, r3, #16
   2d06a:	4313      	orrs	r3, r2
   2d06c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d06e:	215d      	movs	r1, #93	; 0x5d
   2d070:	5c52      	ldrb	r2, [r2, r1]
   2d072:	0212      	lsls	r2, r2, #8
   2d074:	4313      	orrs	r3, r2
   2d076:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d078:	215c      	movs	r1, #92	; 0x5c
   2d07a:	5c52      	ldrb	r2, [r2, r1]
   2d07c:	431a      	orrs	r2, r3
   2d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d080:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2d082:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d084:	699b      	ldr	r3, [r3, #24]
   2d086:	009b      	lsls	r3, r3, #2
   2d088:	633b      	str	r3, [r7, #48]	; 0x30
   2d08a:	e020      	b.n	2d0ce <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d08e:	891b      	ldrh	r3, [r3, #8]
   2d090:	2b00      	cmp	r3, #0
   2d092:	d101      	bne.n	2d098 <chk_mounted+0x410>
   2d094:	230d      	movs	r3, #13
   2d096:	e0cb      	b.n	2d230 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d09a:	6a1a      	ldr	r2, [r3, #32]
   2d09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d09e:	18d2      	adds	r2, r2, r3
   2d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0a2:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2d0a4:	2347      	movs	r3, #71	; 0x47
   2d0a6:	18fb      	adds	r3, r7, r3
   2d0a8:	781b      	ldrb	r3, [r3, #0]
   2d0aa:	2b02      	cmp	r3, #2
   2d0ac:	d103      	bne.n	2d0b6 <chk_mounted+0x42e>
   2d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0b0:	699b      	ldr	r3, [r3, #24]
   2d0b2:	005b      	lsls	r3, r3, #1
   2d0b4:	e00a      	b.n	2d0cc <chk_mounted+0x444>
   2d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0b8:	699a      	ldr	r2, [r3, #24]
   2d0ba:	0013      	movs	r3, r2
   2d0bc:	005b      	lsls	r3, r3, #1
   2d0be:	189b      	adds	r3, r3, r2
   2d0c0:	085a      	lsrs	r2, r3, #1
   2d0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0c4:	699b      	ldr	r3, [r3, #24]
   2d0c6:	2101      	movs	r1, #1
   2d0c8:	400b      	ands	r3, r1
   2d0ca:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2d0cc:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2d0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0d0:	69da      	ldr	r2, [r3, #28]
   2d0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d0d4:	495a      	ldr	r1, [pc, #360]	; (2d240 <chk_mounted+0x5b8>)
   2d0d6:	468c      	mov	ip, r1
   2d0d8:	4463      	add	r3, ip
   2d0da:	0a5b      	lsrs	r3, r3, #9
   2d0dc:	429a      	cmp	r2, r3
   2d0de:	d201      	bcs.n	2d0e4 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2d0e0:	230d      	movs	r3, #13
   2d0e2:	e0a5      	b.n	2d230 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0e6:	2201      	movs	r2, #1
   2d0e8:	4252      	negs	r2, r2
   2d0ea:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d0ee:	2200      	movs	r2, #0
   2d0f0:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2d0f2:	2347      	movs	r3, #71	; 0x47
   2d0f4:	18fb      	adds	r3, r7, r3
   2d0f6:	781b      	ldrb	r3, [r3, #0]
   2d0f8:	2b03      	cmp	r3, #3
   2d0fa:	d000      	beq.n	2d0fe <chk_mounted+0x476>
   2d0fc:	e082      	b.n	2d204 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2d0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d100:	2200      	movs	r2, #0
   2d102:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d106:	2261      	movs	r2, #97	; 0x61
   2d108:	5c9b      	ldrb	r3, [r3, r2]
   2d10a:	021b      	lsls	r3, r3, #8
   2d10c:	b21a      	sxth	r2, r3
   2d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d110:	2160      	movs	r1, #96	; 0x60
   2d112:	5c5b      	ldrb	r3, [r3, r1]
   2d114:	b21b      	sxth	r3, r3
   2d116:	4313      	orrs	r3, r2
   2d118:	b21b      	sxth	r3, r3
   2d11a:	b29b      	uxth	r3, r3
   2d11c:	001a      	movs	r2, r3
   2d11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d120:	18d2      	adds	r2, r2, r3
   2d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d124:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d128:	7858      	ldrb	r0, [r3, #1]
   2d12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d12c:	3330      	adds	r3, #48	; 0x30
   2d12e:	0019      	movs	r1, r3
   2d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d132:	695a      	ldr	r2, [r3, #20]
   2d134:	2301      	movs	r3, #1
   2d136:	4c43      	ldr	r4, [pc, #268]	; (2d244 <chk_mounted+0x5bc>)
   2d138:	47a0      	blx	r4
   2d13a:	1e03      	subs	r3, r0, #0
   2d13c:	d162      	bne.n	2d204 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d140:	4a41      	ldr	r2, [pc, #260]	; (2d248 <chk_mounted+0x5c0>)
   2d142:	5c9b      	ldrb	r3, [r3, r2]
   2d144:	021b      	lsls	r3, r3, #8
   2d146:	b21a      	sxth	r2, r3
   2d148:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d14a:	4940      	ldr	r1, [pc, #256]	; (2d24c <chk_mounted+0x5c4>)
   2d14c:	5c5b      	ldrb	r3, [r3, r1]
   2d14e:	b21b      	sxth	r3, r3
   2d150:	4313      	orrs	r3, r2
   2d152:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d154:	4a3e      	ldr	r2, [pc, #248]	; (2d250 <chk_mounted+0x5c8>)
   2d156:	4293      	cmp	r3, r2
   2d158:	d154      	bne.n	2d204 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d15c:	2233      	movs	r2, #51	; 0x33
   2d15e:	5c9b      	ldrb	r3, [r3, r2]
   2d160:	061a      	lsls	r2, r3, #24
   2d162:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d164:	2132      	movs	r1, #50	; 0x32
   2d166:	5c5b      	ldrb	r3, [r3, r1]
   2d168:	041b      	lsls	r3, r3, #16
   2d16a:	4313      	orrs	r3, r2
   2d16c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d16e:	2131      	movs	r1, #49	; 0x31
   2d170:	5c52      	ldrb	r2, [r2, r1]
   2d172:	0212      	lsls	r2, r2, #8
   2d174:	4313      	orrs	r3, r2
   2d176:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d178:	2130      	movs	r1, #48	; 0x30
   2d17a:	5c52      	ldrb	r2, [r2, r1]
   2d17c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d17e:	4a35      	ldr	r2, [pc, #212]	; (2d254 <chk_mounted+0x5cc>)
   2d180:	4293      	cmp	r3, r2
   2d182:	d13f      	bne.n	2d204 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2d184:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d186:	4a34      	ldr	r2, [pc, #208]	; (2d258 <chk_mounted+0x5d0>)
   2d188:	5c9b      	ldrb	r3, [r3, r2]
   2d18a:	061a      	lsls	r2, r3, #24
   2d18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d18e:	4933      	ldr	r1, [pc, #204]	; (2d25c <chk_mounted+0x5d4>)
   2d190:	5c5b      	ldrb	r3, [r3, r1]
   2d192:	041b      	lsls	r3, r3, #16
   2d194:	4313      	orrs	r3, r2
   2d196:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d198:	4931      	ldr	r1, [pc, #196]	; (2d260 <chk_mounted+0x5d8>)
   2d19a:	5c52      	ldrb	r2, [r2, r1]
   2d19c:	0212      	lsls	r2, r2, #8
   2d19e:	4313      	orrs	r3, r2
   2d1a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d1a2:	2285      	movs	r2, #133	; 0x85
   2d1a4:	0092      	lsls	r2, r2, #2
   2d1a6:	5c8a      	ldrb	r2, [r1, r2]
   2d1a8:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d1aa:	4a2e      	ldr	r2, [pc, #184]	; (2d264 <chk_mounted+0x5dc>)
   2d1ac:	4293      	cmp	r3, r2
   2d1ae:	d129      	bne.n	2d204 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1b2:	4a2d      	ldr	r2, [pc, #180]	; (2d268 <chk_mounted+0x5e0>)
   2d1b4:	5c9b      	ldrb	r3, [r3, r2]
   2d1b6:	061a      	lsls	r2, r3, #24
   2d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1ba:	492c      	ldr	r1, [pc, #176]	; (2d26c <chk_mounted+0x5e4>)
   2d1bc:	5c5b      	ldrb	r3, [r3, r1]
   2d1be:	041b      	lsls	r3, r3, #16
   2d1c0:	4313      	orrs	r3, r2
   2d1c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1c4:	492a      	ldr	r1, [pc, #168]	; (2d270 <chk_mounted+0x5e8>)
   2d1c6:	5c52      	ldrb	r2, [r2, r1]
   2d1c8:	0212      	lsls	r2, r2, #8
   2d1ca:	4313      	orrs	r3, r2
   2d1cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d1ce:	2287      	movs	r2, #135	; 0x87
   2d1d0:	0092      	lsls	r2, r2, #2
   2d1d2:	5c8a      	ldrb	r2, [r1, r2]
   2d1d4:	431a      	orrs	r2, r3
   2d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1d8:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1dc:	4a25      	ldr	r2, [pc, #148]	; (2d274 <chk_mounted+0x5ec>)
   2d1de:	5c9b      	ldrb	r3, [r3, r2]
   2d1e0:	061a      	lsls	r2, r3, #24
   2d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d1e4:	4924      	ldr	r1, [pc, #144]	; (2d278 <chk_mounted+0x5f0>)
   2d1e6:	5c5b      	ldrb	r3, [r3, r1]
   2d1e8:	041b      	lsls	r3, r3, #16
   2d1ea:	4313      	orrs	r3, r2
   2d1ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d1ee:	4923      	ldr	r1, [pc, #140]	; (2d27c <chk_mounted+0x5f4>)
   2d1f0:	5c52      	ldrb	r2, [r2, r1]
   2d1f2:	0212      	lsls	r2, r2, #8
   2d1f4:	4313      	orrs	r3, r2
   2d1f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2d1f8:	2286      	movs	r2, #134	; 0x86
   2d1fa:	0092      	lsls	r2, r2, #2
   2d1fc:	5c8a      	ldrb	r2, [r1, r2]
   2d1fe:	431a      	orrs	r2, r3
   2d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d202:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2d204:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d206:	2247      	movs	r2, #71	; 0x47
   2d208:	18ba      	adds	r2, r7, r2
   2d20a:	7812      	ldrb	r2, [r2, #0]
   2d20c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2d20e:	4b1c      	ldr	r3, [pc, #112]	; (2d280 <chk_mounted+0x5f8>)
   2d210:	881b      	ldrh	r3, [r3, #0]
   2d212:	3301      	adds	r3, #1
   2d214:	b29a      	uxth	r2, r3
   2d216:	4b1a      	ldr	r3, [pc, #104]	; (2d280 <chk_mounted+0x5f8>)
   2d218:	801a      	strh	r2, [r3, #0]
   2d21a:	4b19      	ldr	r3, [pc, #100]	; (2d280 <chk_mounted+0x5f8>)
   2d21c:	881a      	ldrh	r2, [r3, #0]
   2d21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d220:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2d222:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d224:	2200      	movs	r2, #0
   2d226:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2d228:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d22a:	2200      	movs	r2, #0
   2d22c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2d22e:	2300      	movs	r3, #0
}
   2d230:	0018      	movs	r0, r3
   2d232:	46bd      	mov	sp, r7
   2d234:	b013      	add	sp, #76	; 0x4c
   2d236:	bd90      	pop	{r4, r7, pc}
   2d238:	00000ff5 	.word	0x00000ff5
   2d23c:	0000fff5 	.word	0x0000fff5
   2d240:	000001ff 	.word	0x000001ff
   2d244:	0002ae1d 	.word	0x0002ae1d
   2d248:	0000022f 	.word	0x0000022f
   2d24c:	0000022e 	.word	0x0000022e
   2d250:	ffffaa55 	.word	0xffffaa55
   2d254:	41615252 	.word	0x41615252
   2d258:	00000217 	.word	0x00000217
   2d25c:	00000216 	.word	0x00000216
   2d260:	00000215 	.word	0x00000215
   2d264:	61417272 	.word	0x61417272
   2d268:	0000021f 	.word	0x0000021f
   2d26c:	0000021e 	.word	0x0000021e
   2d270:	0000021d 	.word	0x0000021d
   2d274:	0000021b 	.word	0x0000021b
   2d278:	0000021a 	.word	0x0000021a
   2d27c:	00000219 	.word	0x00000219
   2d280:	20003f00 	.word	0x20003f00

0002d284 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2d284:	b580      	push	{r7, lr}
   2d286:	b082      	sub	sp, #8
   2d288:	af00      	add	r7, sp, #0
   2d28a:	6078      	str	r0, [r7, #4]
   2d28c:	000a      	movs	r2, r1
   2d28e:	1cbb      	adds	r3, r7, #2
   2d290:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2d292:	687b      	ldr	r3, [r7, #4]
   2d294:	2b00      	cmp	r3, #0
   2d296:	d009      	beq.n	2d2ac <validate+0x28>
   2d298:	687b      	ldr	r3, [r7, #4]
   2d29a:	781b      	ldrb	r3, [r3, #0]
   2d29c:	2b00      	cmp	r3, #0
   2d29e:	d005      	beq.n	2d2ac <validate+0x28>
   2d2a0:	687b      	ldr	r3, [r7, #4]
   2d2a2:	88db      	ldrh	r3, [r3, #6]
   2d2a4:	1cba      	adds	r2, r7, #2
   2d2a6:	8812      	ldrh	r2, [r2, #0]
   2d2a8:	429a      	cmp	r2, r3
   2d2aa:	d001      	beq.n	2d2b0 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2d2ac:	2309      	movs	r3, #9
   2d2ae:	e00c      	b.n	2d2ca <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2d2b0:	687b      	ldr	r3, [r7, #4]
   2d2b2:	785b      	ldrb	r3, [r3, #1]
   2d2b4:	0018      	movs	r0, r3
   2d2b6:	4b07      	ldr	r3, [pc, #28]	; (2d2d4 <validate+0x50>)
   2d2b8:	4798      	blx	r3
   2d2ba:	0003      	movs	r3, r0
   2d2bc:	001a      	movs	r2, r3
   2d2be:	2301      	movs	r3, #1
   2d2c0:	4013      	ands	r3, r2
   2d2c2:	d001      	beq.n	2d2c8 <validate+0x44>
		return FR_NOT_READY;
   2d2c4:	2303      	movs	r3, #3
   2d2c6:	e000      	b.n	2d2ca <validate+0x46>

	return FR_OK;
   2d2c8:	2300      	movs	r3, #0
}
   2d2ca:	0018      	movs	r0, r3
   2d2cc:	46bd      	mov	sp, r7
   2d2ce:	b002      	add	sp, #8
   2d2d0:	bd80      	pop	{r7, pc}
   2d2d2:	46c0      	nop			; (mov r8, r8)
   2d2d4:	0002ade5 	.word	0x0002ade5

0002d2d8 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2d2d8:	b590      	push	{r4, r7, lr}
   2d2da:	4ce5      	ldr	r4, [pc, #916]	; (2d670 <f_open+0x398>)
   2d2dc:	44a5      	add	sp, r4
   2d2de:	af00      	add	r7, sp, #0
   2d2e0:	60f8      	str	r0, [r7, #12]
   2d2e2:	60b9      	str	r1, [r7, #8]
   2d2e4:	4be3      	ldr	r3, [pc, #908]	; (2d674 <f_open+0x39c>)
   2d2e6:	2194      	movs	r1, #148	; 0x94
   2d2e8:	0089      	lsls	r1, r1, #2
   2d2ea:	468c      	mov	ip, r1
   2d2ec:	44bc      	add	ip, r7
   2d2ee:	4463      	add	r3, ip
   2d2f0:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2d2f2:	68fb      	ldr	r3, [r7, #12]
   2d2f4:	2200      	movs	r2, #0
   2d2f6:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2d2f8:	4bde      	ldr	r3, [pc, #888]	; (2d674 <f_open+0x39c>)
   2d2fa:	2294      	movs	r2, #148	; 0x94
   2d2fc:	0092      	lsls	r2, r2, #2
   2d2fe:	4694      	mov	ip, r2
   2d300:	44bc      	add	ip, r7
   2d302:	4463      	add	r3, ip
   2d304:	4adb      	ldr	r2, [pc, #876]	; (2d674 <f_open+0x39c>)
   2d306:	2194      	movs	r1, #148	; 0x94
   2d308:	0089      	lsls	r1, r1, #2
   2d30a:	468c      	mov	ip, r1
   2d30c:	44bc      	add	ip, r7
   2d30e:	4462      	add	r2, ip
   2d310:	7812      	ldrb	r2, [r2, #0]
   2d312:	211f      	movs	r1, #31
   2d314:	400a      	ands	r2, r1
   2d316:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2d318:	4bd6      	ldr	r3, [pc, #856]	; (2d674 <f_open+0x39c>)
   2d31a:	2294      	movs	r2, #148	; 0x94
   2d31c:	0092      	lsls	r2, r2, #2
   2d31e:	4694      	mov	ip, r2
   2d320:	44bc      	add	ip, r7
   2d322:	4463      	add	r3, ip
   2d324:	781b      	ldrb	r3, [r3, #0]
   2d326:	2201      	movs	r2, #1
   2d328:	4393      	bics	r3, r2
   2d32a:	b2da      	uxtb	r2, r3
   2d32c:	4bd2      	ldr	r3, [pc, #840]	; (2d678 <f_open+0x3a0>)
   2d32e:	18fc      	adds	r4, r7, r3
   2d330:	2387      	movs	r3, #135	; 0x87
   2d332:	009b      	lsls	r3, r3, #2
   2d334:	18f9      	adds	r1, r7, r3
   2d336:	2308      	movs	r3, #8
   2d338:	18fb      	adds	r3, r7, r3
   2d33a:	0018      	movs	r0, r3
   2d33c:	4bcf      	ldr	r3, [pc, #828]	; (2d67c <f_open+0x3a4>)
   2d33e:	4798      	blx	r3
   2d340:	0003      	movs	r3, r0
   2d342:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2d344:	2387      	movs	r3, #135	; 0x87
   2d346:	009b      	lsls	r3, r3, #2
   2d348:	18fb      	adds	r3, r7, r3
   2d34a:	2284      	movs	r2, #132	; 0x84
   2d34c:	0092      	lsls	r2, r2, #2
   2d34e:	18ba      	adds	r2, r7, r2
   2d350:	619a      	str	r2, [r3, #24]
   2d352:	2387      	movs	r3, #135	; 0x87
   2d354:	009b      	lsls	r3, r3, #2
   2d356:	18fb      	adds	r3, r7, r3
   2d358:	2210      	movs	r2, #16
   2d35a:	18ba      	adds	r2, r7, r2
   2d35c:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2d35e:	4bc6      	ldr	r3, [pc, #792]	; (2d678 <f_open+0x3a0>)
   2d360:	18fb      	adds	r3, r7, r3
   2d362:	781b      	ldrb	r3, [r3, #0]
   2d364:	2b00      	cmp	r3, #0
   2d366:	d10b      	bne.n	2d380 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2d368:	68ba      	ldr	r2, [r7, #8]
   2d36a:	4bc3      	ldr	r3, [pc, #780]	; (2d678 <f_open+0x3a0>)
   2d36c:	18fc      	adds	r4, r7, r3
   2d36e:	2387      	movs	r3, #135	; 0x87
   2d370:	009b      	lsls	r3, r3, #2
   2d372:	18fb      	adds	r3, r7, r3
   2d374:	0011      	movs	r1, r2
   2d376:	0018      	movs	r0, r3
   2d378:	4bc1      	ldr	r3, [pc, #772]	; (2d680 <f_open+0x3a8>)
   2d37a:	4798      	blx	r3
   2d37c:	0003      	movs	r3, r0
   2d37e:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2d380:	2387      	movs	r3, #135	; 0x87
   2d382:	009b      	lsls	r3, r3, #2
   2d384:	18fb      	adds	r3, r7, r3
   2d386:	695b      	ldr	r3, [r3, #20]
   2d388:	2292      	movs	r2, #146	; 0x92
   2d38a:	0092      	lsls	r2, r2, #2
   2d38c:	18ba      	adds	r2, r7, r2
   2d38e:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2d390:	4bb9      	ldr	r3, [pc, #740]	; (2d678 <f_open+0x3a0>)
   2d392:	18fb      	adds	r3, r7, r3
   2d394:	781b      	ldrb	r3, [r3, #0]
   2d396:	2b00      	cmp	r3, #0
   2d398:	d109      	bne.n	2d3ae <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2d39a:	2392      	movs	r3, #146	; 0x92
   2d39c:	009b      	lsls	r3, r3, #2
   2d39e:	18fb      	adds	r3, r7, r3
   2d3a0:	681b      	ldr	r3, [r3, #0]
   2d3a2:	2b00      	cmp	r3, #0
   2d3a4:	d103      	bne.n	2d3ae <f_open+0xd6>
			res = FR_INVALID_NAME;
   2d3a6:	4bb4      	ldr	r3, [pc, #720]	; (2d678 <f_open+0x3a0>)
   2d3a8:	18fb      	adds	r3, r7, r3
   2d3aa:	2206      	movs	r2, #6
   2d3ac:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2d3ae:	4bb1      	ldr	r3, [pc, #708]	; (2d674 <f_open+0x39c>)
   2d3b0:	2294      	movs	r2, #148	; 0x94
   2d3b2:	0092      	lsls	r2, r2, #2
   2d3b4:	4694      	mov	ip, r2
   2d3b6:	44bc      	add	ip, r7
   2d3b8:	4463      	add	r3, ip
   2d3ba:	781b      	ldrb	r3, [r3, #0]
   2d3bc:	221c      	movs	r2, #28
   2d3be:	4013      	ands	r3, r2
   2d3c0:	d100      	bne.n	2d3c4 <f_open+0xec>
   2d3c2:	e141      	b.n	2d648 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2d3c4:	4bac      	ldr	r3, [pc, #688]	; (2d678 <f_open+0x3a0>)
   2d3c6:	18fb      	adds	r3, r7, r3
   2d3c8:	781b      	ldrb	r3, [r3, #0]
   2d3ca:	2b00      	cmp	r3, #0
   2d3cc:	d027      	beq.n	2d41e <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2d3ce:	4baa      	ldr	r3, [pc, #680]	; (2d678 <f_open+0x3a0>)
   2d3d0:	18fb      	adds	r3, r7, r3
   2d3d2:	781b      	ldrb	r3, [r3, #0]
   2d3d4:	2b04      	cmp	r3, #4
   2d3d6:	d109      	bne.n	2d3ec <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2d3d8:	4ba7      	ldr	r3, [pc, #668]	; (2d678 <f_open+0x3a0>)
   2d3da:	18fc      	adds	r4, r7, r3
   2d3dc:	2387      	movs	r3, #135	; 0x87
   2d3de:	009b      	lsls	r3, r3, #2
   2d3e0:	18fb      	adds	r3, r7, r3
   2d3e2:	0018      	movs	r0, r3
   2d3e4:	4ba7      	ldr	r3, [pc, #668]	; (2d684 <f_open+0x3ac>)
   2d3e6:	4798      	blx	r3
   2d3e8:	0003      	movs	r3, r0
   2d3ea:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2d3ec:	4ba1      	ldr	r3, [pc, #644]	; (2d674 <f_open+0x39c>)
   2d3ee:	2294      	movs	r2, #148	; 0x94
   2d3f0:	0092      	lsls	r2, r2, #2
   2d3f2:	4694      	mov	ip, r2
   2d3f4:	44bc      	add	ip, r7
   2d3f6:	4463      	add	r3, ip
   2d3f8:	4a9e      	ldr	r2, [pc, #632]	; (2d674 <f_open+0x39c>)
   2d3fa:	2194      	movs	r1, #148	; 0x94
   2d3fc:	0089      	lsls	r1, r1, #2
   2d3fe:	468c      	mov	ip, r1
   2d400:	44bc      	add	ip, r7
   2d402:	4462      	add	r2, ip
   2d404:	7812      	ldrb	r2, [r2, #0]
   2d406:	2108      	movs	r1, #8
   2d408:	430a      	orrs	r2, r1
   2d40a:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2d40c:	2387      	movs	r3, #135	; 0x87
   2d40e:	009b      	lsls	r3, r3, #2
   2d410:	18fb      	adds	r3, r7, r3
   2d412:	695b      	ldr	r3, [r3, #20]
   2d414:	2292      	movs	r2, #146	; 0x92
   2d416:	0092      	lsls	r2, r2, #2
   2d418:	18ba      	adds	r2, r7, r2
   2d41a:	6013      	str	r3, [r2, #0]
   2d41c:	e01c      	b.n	2d458 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2d41e:	2392      	movs	r3, #146	; 0x92
   2d420:	009b      	lsls	r3, r3, #2
   2d422:	18fb      	adds	r3, r7, r3
   2d424:	681b      	ldr	r3, [r3, #0]
   2d426:	330b      	adds	r3, #11
   2d428:	781b      	ldrb	r3, [r3, #0]
   2d42a:	001a      	movs	r2, r3
   2d42c:	2311      	movs	r3, #17
   2d42e:	4013      	ands	r3, r2
   2d430:	d004      	beq.n	2d43c <f_open+0x164>
				res = FR_DENIED;
   2d432:	4b91      	ldr	r3, [pc, #580]	; (2d678 <f_open+0x3a0>)
   2d434:	18fb      	adds	r3, r7, r3
   2d436:	2207      	movs	r2, #7
   2d438:	701a      	strb	r2, [r3, #0]
   2d43a:	e00d      	b.n	2d458 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2d43c:	4b8d      	ldr	r3, [pc, #564]	; (2d674 <f_open+0x39c>)
   2d43e:	2294      	movs	r2, #148	; 0x94
   2d440:	0092      	lsls	r2, r2, #2
   2d442:	4694      	mov	ip, r2
   2d444:	44bc      	add	ip, r7
   2d446:	4463      	add	r3, ip
   2d448:	781b      	ldrb	r3, [r3, #0]
   2d44a:	2204      	movs	r2, #4
   2d44c:	4013      	ands	r3, r2
   2d44e:	d003      	beq.n	2d458 <f_open+0x180>
					res = FR_EXIST;
   2d450:	4b89      	ldr	r3, [pc, #548]	; (2d678 <f_open+0x3a0>)
   2d452:	18fb      	adds	r3, r7, r3
   2d454:	2208      	movs	r2, #8
   2d456:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2d458:	4b87      	ldr	r3, [pc, #540]	; (2d678 <f_open+0x3a0>)
   2d45a:	18fb      	adds	r3, r7, r3
   2d45c:	781b      	ldrb	r3, [r3, #0]
   2d45e:	2b00      	cmp	r3, #0
   2d460:	d000      	beq.n	2d464 <f_open+0x18c>
   2d462:	e12f      	b.n	2d6c4 <f_open+0x3ec>
   2d464:	4b83      	ldr	r3, [pc, #524]	; (2d674 <f_open+0x39c>)
   2d466:	2294      	movs	r2, #148	; 0x94
   2d468:	0092      	lsls	r2, r2, #2
   2d46a:	4694      	mov	ip, r2
   2d46c:	44bc      	add	ip, r7
   2d46e:	4463      	add	r3, ip
   2d470:	781b      	ldrb	r3, [r3, #0]
   2d472:	2208      	movs	r2, #8
   2d474:	4013      	ands	r3, r2
   2d476:	d100      	bne.n	2d47a <f_open+0x1a2>
   2d478:	e124      	b.n	2d6c4 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2d47a:	4b83      	ldr	r3, [pc, #524]	; (2d688 <f_open+0x3b0>)
   2d47c:	4798      	blx	r3
   2d47e:	0003      	movs	r3, r0
   2d480:	2291      	movs	r2, #145	; 0x91
   2d482:	0092      	lsls	r2, r2, #2
   2d484:	18ba      	adds	r2, r7, r2
   2d486:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2d488:	2392      	movs	r3, #146	; 0x92
   2d48a:	009b      	lsls	r3, r3, #2
   2d48c:	18fb      	adds	r3, r7, r3
   2d48e:	681b      	ldr	r3, [r3, #0]
   2d490:	330e      	adds	r3, #14
   2d492:	2291      	movs	r2, #145	; 0x91
   2d494:	0092      	lsls	r2, r2, #2
   2d496:	18ba      	adds	r2, r7, r2
   2d498:	6812      	ldr	r2, [r2, #0]
   2d49a:	b2d2      	uxtb	r2, r2
   2d49c:	701a      	strb	r2, [r3, #0]
   2d49e:	2392      	movs	r3, #146	; 0x92
   2d4a0:	009b      	lsls	r3, r3, #2
   2d4a2:	18fb      	adds	r3, r7, r3
   2d4a4:	681b      	ldr	r3, [r3, #0]
   2d4a6:	330f      	adds	r3, #15
   2d4a8:	2291      	movs	r2, #145	; 0x91
   2d4aa:	0092      	lsls	r2, r2, #2
   2d4ac:	18ba      	adds	r2, r7, r2
   2d4ae:	6812      	ldr	r2, [r2, #0]
   2d4b0:	b292      	uxth	r2, r2
   2d4b2:	0a12      	lsrs	r2, r2, #8
   2d4b4:	b292      	uxth	r2, r2
   2d4b6:	b2d2      	uxtb	r2, r2
   2d4b8:	701a      	strb	r2, [r3, #0]
   2d4ba:	2392      	movs	r3, #146	; 0x92
   2d4bc:	009b      	lsls	r3, r3, #2
   2d4be:	18fb      	adds	r3, r7, r3
   2d4c0:	681b      	ldr	r3, [r3, #0]
   2d4c2:	3310      	adds	r3, #16
   2d4c4:	2291      	movs	r2, #145	; 0x91
   2d4c6:	0092      	lsls	r2, r2, #2
   2d4c8:	18ba      	adds	r2, r7, r2
   2d4ca:	6812      	ldr	r2, [r2, #0]
   2d4cc:	0c12      	lsrs	r2, r2, #16
   2d4ce:	b2d2      	uxtb	r2, r2
   2d4d0:	701a      	strb	r2, [r3, #0]
   2d4d2:	2392      	movs	r3, #146	; 0x92
   2d4d4:	009b      	lsls	r3, r3, #2
   2d4d6:	18fb      	adds	r3, r7, r3
   2d4d8:	681b      	ldr	r3, [r3, #0]
   2d4da:	3311      	adds	r3, #17
   2d4dc:	2291      	movs	r2, #145	; 0x91
   2d4de:	0092      	lsls	r2, r2, #2
   2d4e0:	18ba      	adds	r2, r7, r2
   2d4e2:	6812      	ldr	r2, [r2, #0]
   2d4e4:	0e12      	lsrs	r2, r2, #24
   2d4e6:	b2d2      	uxtb	r2, r2
   2d4e8:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2d4ea:	2392      	movs	r3, #146	; 0x92
   2d4ec:	009b      	lsls	r3, r3, #2
   2d4ee:	18fb      	adds	r3, r7, r3
   2d4f0:	681b      	ldr	r3, [r3, #0]
   2d4f2:	330b      	adds	r3, #11
   2d4f4:	2200      	movs	r2, #0
   2d4f6:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2d4f8:	2392      	movs	r3, #146	; 0x92
   2d4fa:	009b      	lsls	r3, r3, #2
   2d4fc:	18fb      	adds	r3, r7, r3
   2d4fe:	681b      	ldr	r3, [r3, #0]
   2d500:	331c      	adds	r3, #28
   2d502:	2200      	movs	r2, #0
   2d504:	701a      	strb	r2, [r3, #0]
   2d506:	2392      	movs	r3, #146	; 0x92
   2d508:	009b      	lsls	r3, r3, #2
   2d50a:	18fb      	adds	r3, r7, r3
   2d50c:	681b      	ldr	r3, [r3, #0]
   2d50e:	331d      	adds	r3, #29
   2d510:	2200      	movs	r2, #0
   2d512:	701a      	strb	r2, [r3, #0]
   2d514:	2392      	movs	r3, #146	; 0x92
   2d516:	009b      	lsls	r3, r3, #2
   2d518:	18fb      	adds	r3, r7, r3
   2d51a:	681b      	ldr	r3, [r3, #0]
   2d51c:	331e      	adds	r3, #30
   2d51e:	2200      	movs	r2, #0
   2d520:	701a      	strb	r2, [r3, #0]
   2d522:	2392      	movs	r3, #146	; 0x92
   2d524:	009b      	lsls	r3, r3, #2
   2d526:	18fb      	adds	r3, r7, r3
   2d528:	681b      	ldr	r3, [r3, #0]
   2d52a:	331f      	adds	r3, #31
   2d52c:	2200      	movs	r2, #0
   2d52e:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2d530:	2392      	movs	r3, #146	; 0x92
   2d532:	009b      	lsls	r3, r3, #2
   2d534:	18fb      	adds	r3, r7, r3
   2d536:	681b      	ldr	r3, [r3, #0]
   2d538:	3315      	adds	r3, #21
   2d53a:	781b      	ldrb	r3, [r3, #0]
   2d53c:	021b      	lsls	r3, r3, #8
   2d53e:	b21a      	sxth	r2, r3
   2d540:	2392      	movs	r3, #146	; 0x92
   2d542:	009b      	lsls	r3, r3, #2
   2d544:	18fb      	adds	r3, r7, r3
   2d546:	681b      	ldr	r3, [r3, #0]
   2d548:	3314      	adds	r3, #20
   2d54a:	781b      	ldrb	r3, [r3, #0]
   2d54c:	b21b      	sxth	r3, r3
   2d54e:	4313      	orrs	r3, r2
   2d550:	b21b      	sxth	r3, r3
   2d552:	b29b      	uxth	r3, r3
   2d554:	041b      	lsls	r3, r3, #16
   2d556:	2292      	movs	r2, #146	; 0x92
   2d558:	0092      	lsls	r2, r2, #2
   2d55a:	18ba      	adds	r2, r7, r2
   2d55c:	6812      	ldr	r2, [r2, #0]
   2d55e:	321b      	adds	r2, #27
   2d560:	7812      	ldrb	r2, [r2, #0]
   2d562:	0212      	lsls	r2, r2, #8
   2d564:	b211      	sxth	r1, r2
   2d566:	2292      	movs	r2, #146	; 0x92
   2d568:	0092      	lsls	r2, r2, #2
   2d56a:	18ba      	adds	r2, r7, r2
   2d56c:	6812      	ldr	r2, [r2, #0]
   2d56e:	321a      	adds	r2, #26
   2d570:	7812      	ldrb	r2, [r2, #0]
   2d572:	b212      	sxth	r2, r2
   2d574:	430a      	orrs	r2, r1
   2d576:	b212      	sxth	r2, r2
   2d578:	b292      	uxth	r2, r2
   2d57a:	4313      	orrs	r3, r2
   2d57c:	2290      	movs	r2, #144	; 0x90
   2d57e:	0092      	lsls	r2, r2, #2
   2d580:	18ba      	adds	r2, r7, r2
   2d582:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2d584:	2392      	movs	r3, #146	; 0x92
   2d586:	009b      	lsls	r3, r3, #2
   2d588:	18fb      	adds	r3, r7, r3
   2d58a:	681b      	ldr	r3, [r3, #0]
   2d58c:	331a      	adds	r3, #26
   2d58e:	2200      	movs	r2, #0
   2d590:	701a      	strb	r2, [r3, #0]
   2d592:	2392      	movs	r3, #146	; 0x92
   2d594:	009b      	lsls	r3, r3, #2
   2d596:	18fb      	adds	r3, r7, r3
   2d598:	681b      	ldr	r3, [r3, #0]
   2d59a:	331b      	adds	r3, #27
   2d59c:	2200      	movs	r2, #0
   2d59e:	701a      	strb	r2, [r3, #0]
   2d5a0:	2392      	movs	r3, #146	; 0x92
   2d5a2:	009b      	lsls	r3, r3, #2
   2d5a4:	18fb      	adds	r3, r7, r3
   2d5a6:	681b      	ldr	r3, [r3, #0]
   2d5a8:	3314      	adds	r3, #20
   2d5aa:	2200      	movs	r2, #0
   2d5ac:	701a      	strb	r2, [r3, #0]
   2d5ae:	2392      	movs	r3, #146	; 0x92
   2d5b0:	009b      	lsls	r3, r3, #2
   2d5b2:	18fb      	adds	r3, r7, r3
   2d5b4:	681b      	ldr	r3, [r3, #0]
   2d5b6:	3315      	adds	r3, #21
   2d5b8:	2200      	movs	r2, #0
   2d5ba:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2d5bc:	2387      	movs	r3, #135	; 0x87
   2d5be:	009b      	lsls	r3, r3, #2
   2d5c0:	18fb      	adds	r3, r7, r3
   2d5c2:	681b      	ldr	r3, [r3, #0]
   2d5c4:	2201      	movs	r2, #1
   2d5c6:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2d5c8:	2390      	movs	r3, #144	; 0x90
   2d5ca:	009b      	lsls	r3, r3, #2
   2d5cc:	18fb      	adds	r3, r7, r3
   2d5ce:	681b      	ldr	r3, [r3, #0]
   2d5d0:	2b00      	cmp	r3, #0
   2d5d2:	d100      	bne.n	2d5d6 <f_open+0x2fe>
   2d5d4:	e076      	b.n	2d6c4 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2d5d6:	2387      	movs	r3, #135	; 0x87
   2d5d8:	009b      	lsls	r3, r3, #2
   2d5da:	18fb      	adds	r3, r7, r3
   2d5dc:	681b      	ldr	r3, [r3, #0]
   2d5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2d5e0:	2291      	movs	r2, #145	; 0x91
   2d5e2:	0092      	lsls	r2, r2, #2
   2d5e4:	18ba      	adds	r2, r7, r2
   2d5e6:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2d5e8:	2387      	movs	r3, #135	; 0x87
   2d5ea:	009b      	lsls	r3, r3, #2
   2d5ec:	18fb      	adds	r3, r7, r3
   2d5ee:	681b      	ldr	r3, [r3, #0]
   2d5f0:	4a21      	ldr	r2, [pc, #132]	; (2d678 <f_open+0x3a0>)
   2d5f2:	18bc      	adds	r4, r7, r2
   2d5f4:	2290      	movs	r2, #144	; 0x90
   2d5f6:	0092      	lsls	r2, r2, #2
   2d5f8:	18ba      	adds	r2, r7, r2
   2d5fa:	6812      	ldr	r2, [r2, #0]
   2d5fc:	0011      	movs	r1, r2
   2d5fe:	0018      	movs	r0, r3
   2d600:	4b22      	ldr	r3, [pc, #136]	; (2d68c <f_open+0x3b4>)
   2d602:	4798      	blx	r3
   2d604:	0003      	movs	r3, r0
   2d606:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2d608:	4b1b      	ldr	r3, [pc, #108]	; (2d678 <f_open+0x3a0>)
   2d60a:	18fb      	adds	r3, r7, r3
   2d60c:	781b      	ldrb	r3, [r3, #0]
   2d60e:	2b00      	cmp	r3, #0
   2d610:	d158      	bne.n	2d6c4 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2d612:	2387      	movs	r3, #135	; 0x87
   2d614:	009b      	lsls	r3, r3, #2
   2d616:	18fb      	adds	r3, r7, r3
   2d618:	681b      	ldr	r3, [r3, #0]
   2d61a:	2290      	movs	r2, #144	; 0x90
   2d61c:	0092      	lsls	r2, r2, #2
   2d61e:	18ba      	adds	r2, r7, r2
   2d620:	6812      	ldr	r2, [r2, #0]
   2d622:	3a01      	subs	r2, #1
   2d624:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2d626:	2387      	movs	r3, #135	; 0x87
   2d628:	009b      	lsls	r3, r3, #2
   2d62a:	18fb      	adds	r3, r7, r3
   2d62c:	681b      	ldr	r3, [r3, #0]
   2d62e:	4a12      	ldr	r2, [pc, #72]	; (2d678 <f_open+0x3a0>)
   2d630:	18bc      	adds	r4, r7, r2
   2d632:	2291      	movs	r2, #145	; 0x91
   2d634:	0092      	lsls	r2, r2, #2
   2d636:	18ba      	adds	r2, r7, r2
   2d638:	6812      	ldr	r2, [r2, #0]
   2d63a:	0011      	movs	r1, r2
   2d63c:	0018      	movs	r0, r3
   2d63e:	4b14      	ldr	r3, [pc, #80]	; (2d690 <f_open+0x3b8>)
   2d640:	4798      	blx	r3
   2d642:	0003      	movs	r3, r0
   2d644:	7023      	strb	r3, [r4, #0]
   2d646:	e03d      	b.n	2d6c4 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2d648:	4b0b      	ldr	r3, [pc, #44]	; (2d678 <f_open+0x3a0>)
   2d64a:	18fb      	adds	r3, r7, r3
   2d64c:	781b      	ldrb	r3, [r3, #0]
   2d64e:	2b00      	cmp	r3, #0
   2d650:	d138      	bne.n	2d6c4 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2d652:	2392      	movs	r3, #146	; 0x92
   2d654:	009b      	lsls	r3, r3, #2
   2d656:	18fb      	adds	r3, r7, r3
   2d658:	681b      	ldr	r3, [r3, #0]
   2d65a:	330b      	adds	r3, #11
   2d65c:	781b      	ldrb	r3, [r3, #0]
   2d65e:	001a      	movs	r2, r3
   2d660:	2310      	movs	r3, #16
   2d662:	4013      	ands	r3, r2
   2d664:	d016      	beq.n	2d694 <f_open+0x3bc>
				res = FR_NO_FILE;
   2d666:	4b04      	ldr	r3, [pc, #16]	; (2d678 <f_open+0x3a0>)
   2d668:	18fb      	adds	r3, r7, r3
   2d66a:	2204      	movs	r2, #4
   2d66c:	701a      	strb	r2, [r3, #0]
   2d66e:	e029      	b.n	2d6c4 <f_open+0x3ec>
   2d670:	fffffdac 	.word	0xfffffdac
   2d674:	fffffdb7 	.word	0xfffffdb7
   2d678:	0000024f 	.word	0x0000024f
   2d67c:	0002cc89 	.word	0x0002cc89
   2d680:	0002ca7d 	.word	0x0002ca7d
   2d684:	0002c2cd 	.word	0x0002c2cd
   2d688:	0002b0c5 	.word	0x0002b0c5
   2d68c:	0002b849 	.word	0x0002b849
   2d690:	0002b209 	.word	0x0002b209
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2d694:	4b5a      	ldr	r3, [pc, #360]	; (2d800 <f_open+0x528>)
   2d696:	2294      	movs	r2, #148	; 0x94
   2d698:	0092      	lsls	r2, r2, #2
   2d69a:	4694      	mov	ip, r2
   2d69c:	44bc      	add	ip, r7
   2d69e:	4463      	add	r3, ip
   2d6a0:	781b      	ldrb	r3, [r3, #0]
   2d6a2:	2202      	movs	r2, #2
   2d6a4:	4013      	ands	r3, r2
   2d6a6:	d00d      	beq.n	2d6c4 <f_open+0x3ec>
   2d6a8:	2392      	movs	r3, #146	; 0x92
   2d6aa:	009b      	lsls	r3, r3, #2
   2d6ac:	18fb      	adds	r3, r7, r3
   2d6ae:	681b      	ldr	r3, [r3, #0]
   2d6b0:	330b      	adds	r3, #11
   2d6b2:	781b      	ldrb	r3, [r3, #0]
   2d6b4:	001a      	movs	r2, r3
   2d6b6:	2301      	movs	r3, #1
   2d6b8:	4013      	ands	r3, r2
   2d6ba:	d003      	beq.n	2d6c4 <f_open+0x3ec>
					res = FR_DENIED;
   2d6bc:	4b51      	ldr	r3, [pc, #324]	; (2d804 <f_open+0x52c>)
   2d6be:	18fb      	adds	r3, r7, r3
   2d6c0:	2207      	movs	r2, #7
   2d6c2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2d6c4:	4b4f      	ldr	r3, [pc, #316]	; (2d804 <f_open+0x52c>)
   2d6c6:	18fb      	adds	r3, r7, r3
   2d6c8:	781b      	ldrb	r3, [r3, #0]
   2d6ca:	2b00      	cmp	r3, #0
   2d6cc:	d126      	bne.n	2d71c <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2d6ce:	4b4c      	ldr	r3, [pc, #304]	; (2d800 <f_open+0x528>)
   2d6d0:	2294      	movs	r2, #148	; 0x94
   2d6d2:	0092      	lsls	r2, r2, #2
   2d6d4:	4694      	mov	ip, r2
   2d6d6:	44bc      	add	ip, r7
   2d6d8:	4463      	add	r3, ip
   2d6da:	781b      	ldrb	r3, [r3, #0]
   2d6dc:	2208      	movs	r2, #8
   2d6de:	4013      	ands	r3, r2
   2d6e0:	d00f      	beq.n	2d702 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2d6e2:	4b47      	ldr	r3, [pc, #284]	; (2d800 <f_open+0x528>)
   2d6e4:	2294      	movs	r2, #148	; 0x94
   2d6e6:	0092      	lsls	r2, r2, #2
   2d6e8:	4694      	mov	ip, r2
   2d6ea:	44bc      	add	ip, r7
   2d6ec:	4463      	add	r3, ip
   2d6ee:	4a44      	ldr	r2, [pc, #272]	; (2d800 <f_open+0x528>)
   2d6f0:	2194      	movs	r1, #148	; 0x94
   2d6f2:	0089      	lsls	r1, r1, #2
   2d6f4:	468c      	mov	ip, r1
   2d6f6:	44bc      	add	ip, r7
   2d6f8:	4462      	add	r2, ip
   2d6fa:	7812      	ldrb	r2, [r2, #0]
   2d6fc:	2120      	movs	r1, #32
   2d6fe:	430a      	orrs	r2, r1
   2d700:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2d702:	2387      	movs	r3, #135	; 0x87
   2d704:	009b      	lsls	r3, r3, #2
   2d706:	18fb      	adds	r3, r7, r3
   2d708:	681b      	ldr	r3, [r3, #0]
   2d70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d70c:	68fb      	ldr	r3, [r7, #12]
   2d70e:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2d710:	68fb      	ldr	r3, [r7, #12]
   2d712:	2292      	movs	r2, #146	; 0x92
   2d714:	0092      	lsls	r2, r2, #2
   2d716:	18ba      	adds	r2, r7, r2
   2d718:	6812      	ldr	r2, [r2, #0]
   2d71a:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2d71c:	4b39      	ldr	r3, [pc, #228]	; (2d804 <f_open+0x52c>)
   2d71e:	18fb      	adds	r3, r7, r3
   2d720:	781b      	ldrb	r3, [r3, #0]
   2d722:	2b00      	cmp	r3, #0
   2d724:	d163      	bne.n	2d7ee <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2d726:	68fb      	ldr	r3, [r7, #12]
   2d728:	4a35      	ldr	r2, [pc, #212]	; (2d800 <f_open+0x528>)
   2d72a:	2194      	movs	r1, #148	; 0x94
   2d72c:	0089      	lsls	r1, r1, #2
   2d72e:	468c      	mov	ip, r1
   2d730:	44bc      	add	ip, r7
   2d732:	4462      	add	r2, ip
   2d734:	7812      	ldrb	r2, [r2, #0]
   2d736:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2d738:	2392      	movs	r3, #146	; 0x92
   2d73a:	009b      	lsls	r3, r3, #2
   2d73c:	18fb      	adds	r3, r7, r3
   2d73e:	681b      	ldr	r3, [r3, #0]
   2d740:	3315      	adds	r3, #21
   2d742:	781b      	ldrb	r3, [r3, #0]
   2d744:	021b      	lsls	r3, r3, #8
   2d746:	b21a      	sxth	r2, r3
   2d748:	2392      	movs	r3, #146	; 0x92
   2d74a:	009b      	lsls	r3, r3, #2
   2d74c:	18fb      	adds	r3, r7, r3
   2d74e:	681b      	ldr	r3, [r3, #0]
   2d750:	3314      	adds	r3, #20
   2d752:	781b      	ldrb	r3, [r3, #0]
   2d754:	b21b      	sxth	r3, r3
   2d756:	4313      	orrs	r3, r2
   2d758:	b21b      	sxth	r3, r3
   2d75a:	b29b      	uxth	r3, r3
   2d75c:	041b      	lsls	r3, r3, #16
   2d75e:	2292      	movs	r2, #146	; 0x92
   2d760:	0092      	lsls	r2, r2, #2
   2d762:	18ba      	adds	r2, r7, r2
   2d764:	6812      	ldr	r2, [r2, #0]
   2d766:	321b      	adds	r2, #27
   2d768:	7812      	ldrb	r2, [r2, #0]
   2d76a:	0212      	lsls	r2, r2, #8
   2d76c:	b211      	sxth	r1, r2
   2d76e:	2292      	movs	r2, #146	; 0x92
   2d770:	0092      	lsls	r2, r2, #2
   2d772:	18ba      	adds	r2, r7, r2
   2d774:	6812      	ldr	r2, [r2, #0]
   2d776:	321a      	adds	r2, #26
   2d778:	7812      	ldrb	r2, [r2, #0]
   2d77a:	b212      	sxth	r2, r2
   2d77c:	430a      	orrs	r2, r1
   2d77e:	b212      	sxth	r2, r2
   2d780:	b292      	uxth	r2, r2
   2d782:	431a      	orrs	r2, r3
   2d784:	68fb      	ldr	r3, [r7, #12]
   2d786:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2d788:	2392      	movs	r3, #146	; 0x92
   2d78a:	009b      	lsls	r3, r3, #2
   2d78c:	18fb      	adds	r3, r7, r3
   2d78e:	681b      	ldr	r3, [r3, #0]
   2d790:	331f      	adds	r3, #31
   2d792:	781b      	ldrb	r3, [r3, #0]
   2d794:	061a      	lsls	r2, r3, #24
   2d796:	2392      	movs	r3, #146	; 0x92
   2d798:	009b      	lsls	r3, r3, #2
   2d79a:	18fb      	adds	r3, r7, r3
   2d79c:	681b      	ldr	r3, [r3, #0]
   2d79e:	331e      	adds	r3, #30
   2d7a0:	781b      	ldrb	r3, [r3, #0]
   2d7a2:	041b      	lsls	r3, r3, #16
   2d7a4:	4313      	orrs	r3, r2
   2d7a6:	2292      	movs	r2, #146	; 0x92
   2d7a8:	0092      	lsls	r2, r2, #2
   2d7aa:	18ba      	adds	r2, r7, r2
   2d7ac:	6812      	ldr	r2, [r2, #0]
   2d7ae:	321d      	adds	r2, #29
   2d7b0:	7812      	ldrb	r2, [r2, #0]
   2d7b2:	0212      	lsls	r2, r2, #8
   2d7b4:	4313      	orrs	r3, r2
   2d7b6:	2292      	movs	r2, #146	; 0x92
   2d7b8:	0092      	lsls	r2, r2, #2
   2d7ba:	18ba      	adds	r2, r7, r2
   2d7bc:	6812      	ldr	r2, [r2, #0]
   2d7be:	321c      	adds	r2, #28
   2d7c0:	7812      	ldrb	r2, [r2, #0]
   2d7c2:	431a      	orrs	r2, r3
   2d7c4:	68fb      	ldr	r3, [r7, #12]
   2d7c6:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2d7c8:	68fb      	ldr	r3, [r7, #12]
   2d7ca:	2200      	movs	r2, #0
   2d7cc:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2d7ce:	68fb      	ldr	r3, [r7, #12]
   2d7d0:	2200      	movs	r2, #0
   2d7d2:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2d7d4:	2387      	movs	r3, #135	; 0x87
   2d7d6:	009b      	lsls	r3, r3, #2
   2d7d8:	18fb      	adds	r3, r7, r3
   2d7da:	681a      	ldr	r2, [r3, #0]
   2d7dc:	68fb      	ldr	r3, [r7, #12]
   2d7de:	601a      	str	r2, [r3, #0]
   2d7e0:	2387      	movs	r3, #135	; 0x87
   2d7e2:	009b      	lsls	r3, r3, #2
   2d7e4:	18fb      	adds	r3, r7, r3
   2d7e6:	681b      	ldr	r3, [r3, #0]
   2d7e8:	88da      	ldrh	r2, [r3, #6]
   2d7ea:	68fb      	ldr	r3, [r7, #12]
   2d7ec:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2d7ee:	4b05      	ldr	r3, [pc, #20]	; (2d804 <f_open+0x52c>)
   2d7f0:	18fb      	adds	r3, r7, r3
   2d7f2:	781b      	ldrb	r3, [r3, #0]
}
   2d7f4:	0018      	movs	r0, r3
   2d7f6:	46bd      	mov	sp, r7
   2d7f8:	2395      	movs	r3, #149	; 0x95
   2d7fa:	009b      	lsls	r3, r3, #2
   2d7fc:	449d      	add	sp, r3
   2d7fe:	bd90      	pop	{r4, r7, pc}
   2d800:	fffffdb7 	.word	0xfffffdb7
   2d804:	0000024f 	.word	0x0000024f

0002d808 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2d808:	b590      	push	{r4, r7, lr}
   2d80a:	b08b      	sub	sp, #44	; 0x2c
   2d80c:	af00      	add	r7, sp, #0
   2d80e:	60f8      	str	r0, [r7, #12]
   2d810:	60b9      	str	r1, [r7, #8]
   2d812:	607a      	str	r2, [r7, #4]
   2d814:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2d816:	68bb      	ldr	r3, [r7, #8]
   2d818:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2d81a:	683b      	ldr	r3, [r7, #0]
   2d81c:	2200      	movs	r2, #0
   2d81e:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2d820:	68fb      	ldr	r3, [r7, #12]
   2d822:	681a      	ldr	r2, [r3, #0]
   2d824:	68fb      	ldr	r3, [r7, #12]
   2d826:	889b      	ldrh	r3, [r3, #4]
   2d828:	2117      	movs	r1, #23
   2d82a:	187c      	adds	r4, r7, r1
   2d82c:	0019      	movs	r1, r3
   2d82e:	0010      	movs	r0, r2
   2d830:	4bc3      	ldr	r3, [pc, #780]	; (2db40 <f_write+0x338>)
   2d832:	4798      	blx	r3
   2d834:	0003      	movs	r3, r0
   2d836:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2d838:	2317      	movs	r3, #23
   2d83a:	18fb      	adds	r3, r7, r3
   2d83c:	781b      	ldrb	r3, [r3, #0]
   2d83e:	2b00      	cmp	r3, #0
   2d840:	d003      	beq.n	2d84a <f_write+0x42>
   2d842:	2317      	movs	r3, #23
   2d844:	18fb      	adds	r3, r7, r3
   2d846:	781b      	ldrb	r3, [r3, #0]
   2d848:	e176      	b.n	2db38 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2d84a:	68fb      	ldr	r3, [r7, #12]
   2d84c:	799b      	ldrb	r3, [r3, #6]
   2d84e:	b25b      	sxtb	r3, r3
   2d850:	2b00      	cmp	r3, #0
   2d852:	da01      	bge.n	2d858 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2d854:	2302      	movs	r3, #2
   2d856:	e16f      	b.n	2db38 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2d858:	68fb      	ldr	r3, [r7, #12]
   2d85a:	799b      	ldrb	r3, [r3, #6]
   2d85c:	001a      	movs	r2, r3
   2d85e:	2302      	movs	r3, #2
   2d860:	4013      	ands	r3, r2
   2d862:	d101      	bne.n	2d868 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2d864:	2307      	movs	r3, #7
   2d866:	e167      	b.n	2db38 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2d868:	68fb      	ldr	r3, [r7, #12]
   2d86a:	68da      	ldr	r2, [r3, #12]
   2d86c:	687b      	ldr	r3, [r7, #4]
   2d86e:	18d2      	adds	r2, r2, r3
   2d870:	68fb      	ldr	r3, [r7, #12]
   2d872:	68db      	ldr	r3, [r3, #12]
   2d874:	429a      	cmp	r2, r3
   2d876:	d300      	bcc.n	2d87a <f_write+0x72>
   2d878:	e146      	b.n	2db08 <f_write+0x300>
   2d87a:	2300      	movs	r3, #0
   2d87c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2d87e:	e143      	b.n	2db08 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2d880:	68fb      	ldr	r3, [r7, #12]
   2d882:	689b      	ldr	r3, [r3, #8]
   2d884:	05db      	lsls	r3, r3, #23
   2d886:	0ddb      	lsrs	r3, r3, #23
   2d888:	d000      	beq.n	2d88c <f_write+0x84>
   2d88a:	e0f6      	b.n	2da7a <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2d88c:	68fb      	ldr	r3, [r7, #12]
   2d88e:	689b      	ldr	r3, [r3, #8]
   2d890:	0a5b      	lsrs	r3, r3, #9
   2d892:	b2da      	uxtb	r2, r3
   2d894:	68fb      	ldr	r3, [r7, #12]
   2d896:	681b      	ldr	r3, [r3, #0]
   2d898:	789b      	ldrb	r3, [r3, #2]
   2d89a:	3b01      	subs	r3, #1
   2d89c:	b2d9      	uxtb	r1, r3
   2d89e:	2316      	movs	r3, #22
   2d8a0:	18fb      	adds	r3, r7, r3
   2d8a2:	400a      	ands	r2, r1
   2d8a4:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2d8a6:	2316      	movs	r3, #22
   2d8a8:	18fb      	adds	r3, r7, r3
   2d8aa:	781b      	ldrb	r3, [r3, #0]
   2d8ac:	2b00      	cmp	r3, #0
   2d8ae:	d140      	bne.n	2d932 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2d8b0:	68fb      	ldr	r3, [r7, #12]
   2d8b2:	689b      	ldr	r3, [r3, #8]
   2d8b4:	2b00      	cmp	r3, #0
   2d8b6:	d111      	bne.n	2d8dc <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2d8b8:	68fb      	ldr	r3, [r7, #12]
   2d8ba:	691b      	ldr	r3, [r3, #16]
   2d8bc:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2d8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d8c0:	2b00      	cmp	r3, #0
   2d8c2:	d115      	bne.n	2d8f0 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2d8c4:	68fb      	ldr	r3, [r7, #12]
   2d8c6:	681b      	ldr	r3, [r3, #0]
   2d8c8:	2100      	movs	r1, #0
   2d8ca:	0018      	movs	r0, r3
   2d8cc:	4b9d      	ldr	r3, [pc, #628]	; (2db44 <f_write+0x33c>)
   2d8ce:	4798      	blx	r3
   2d8d0:	0003      	movs	r3, r0
   2d8d2:	627b      	str	r3, [r7, #36]	; 0x24
   2d8d4:	68fb      	ldr	r3, [r7, #12]
   2d8d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d8d8:	611a      	str	r2, [r3, #16]
   2d8da:	e009      	b.n	2d8f0 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2d8dc:	68fb      	ldr	r3, [r7, #12]
   2d8de:	681a      	ldr	r2, [r3, #0]
   2d8e0:	68fb      	ldr	r3, [r7, #12]
   2d8e2:	695b      	ldr	r3, [r3, #20]
   2d8e4:	0019      	movs	r1, r3
   2d8e6:	0010      	movs	r0, r2
   2d8e8:	4b96      	ldr	r3, [pc, #600]	; (2db44 <f_write+0x33c>)
   2d8ea:	4798      	blx	r3
   2d8ec:	0003      	movs	r3, r0
   2d8ee:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2d8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d8f2:	2b00      	cmp	r3, #0
   2d8f4:	d100      	bne.n	2d8f8 <f_write+0xf0>
   2d8f6:	e10c      	b.n	2db12 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d8fa:	2b01      	cmp	r3, #1
   2d8fc:	d109      	bne.n	2d912 <f_write+0x10a>
   2d8fe:	68fb      	ldr	r3, [r7, #12]
   2d900:	799b      	ldrb	r3, [r3, #6]
   2d902:	2280      	movs	r2, #128	; 0x80
   2d904:	4252      	negs	r2, r2
   2d906:	4313      	orrs	r3, r2
   2d908:	b2da      	uxtb	r2, r3
   2d90a:	68fb      	ldr	r3, [r7, #12]
   2d90c:	719a      	strb	r2, [r3, #6]
   2d90e:	2302      	movs	r3, #2
   2d910:	e112      	b.n	2db38 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2d912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d914:	3301      	adds	r3, #1
   2d916:	d109      	bne.n	2d92c <f_write+0x124>
   2d918:	68fb      	ldr	r3, [r7, #12]
   2d91a:	799b      	ldrb	r3, [r3, #6]
   2d91c:	2280      	movs	r2, #128	; 0x80
   2d91e:	4252      	negs	r2, r2
   2d920:	4313      	orrs	r3, r2
   2d922:	b2da      	uxtb	r2, r3
   2d924:	68fb      	ldr	r3, [r7, #12]
   2d926:	719a      	strb	r2, [r3, #6]
   2d928:	2301      	movs	r3, #1
   2d92a:	e105      	b.n	2db38 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2d92c:	68fb      	ldr	r3, [r7, #12]
   2d92e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2d930:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2d932:	68fb      	ldr	r3, [r7, #12]
   2d934:	681b      	ldr	r3, [r3, #0]
   2d936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d938:	68fb      	ldr	r3, [r7, #12]
   2d93a:	699b      	ldr	r3, [r3, #24]
   2d93c:	429a      	cmp	r2, r3
   2d93e:	d111      	bne.n	2d964 <f_write+0x15c>
   2d940:	68fb      	ldr	r3, [r7, #12]
   2d942:	681b      	ldr	r3, [r3, #0]
   2d944:	2100      	movs	r1, #0
   2d946:	0018      	movs	r0, r3
   2d948:	4b7f      	ldr	r3, [pc, #508]	; (2db48 <f_write+0x340>)
   2d94a:	4798      	blx	r3
   2d94c:	1e03      	subs	r3, r0, #0
   2d94e:	d009      	beq.n	2d964 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2d950:	68fb      	ldr	r3, [r7, #12]
   2d952:	799b      	ldrb	r3, [r3, #6]
   2d954:	2280      	movs	r2, #128	; 0x80
   2d956:	4252      	negs	r2, r2
   2d958:	4313      	orrs	r3, r2
   2d95a:	b2da      	uxtb	r2, r3
   2d95c:	68fb      	ldr	r3, [r7, #12]
   2d95e:	719a      	strb	r2, [r3, #6]
   2d960:	2301      	movs	r3, #1
   2d962:	e0e9      	b.n	2db38 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2d964:	68fb      	ldr	r3, [r7, #12]
   2d966:	681a      	ldr	r2, [r3, #0]
   2d968:	68fb      	ldr	r3, [r7, #12]
   2d96a:	695b      	ldr	r3, [r3, #20]
   2d96c:	0019      	movs	r1, r3
   2d96e:	0010      	movs	r0, r2
   2d970:	4b76      	ldr	r3, [pc, #472]	; (2db4c <f_write+0x344>)
   2d972:	4798      	blx	r3
   2d974:	0003      	movs	r3, r0
   2d976:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2d978:	693b      	ldr	r3, [r7, #16]
   2d97a:	2b00      	cmp	r3, #0
   2d97c:	d109      	bne.n	2d992 <f_write+0x18a>
   2d97e:	68fb      	ldr	r3, [r7, #12]
   2d980:	799b      	ldrb	r3, [r3, #6]
   2d982:	2280      	movs	r2, #128	; 0x80
   2d984:	4252      	negs	r2, r2
   2d986:	4313      	orrs	r3, r2
   2d988:	b2da      	uxtb	r2, r3
   2d98a:	68fb      	ldr	r3, [r7, #12]
   2d98c:	719a      	strb	r2, [r3, #6]
   2d98e:	2302      	movs	r3, #2
   2d990:	e0d2      	b.n	2db38 <f_write+0x330>
			sect += csect;
   2d992:	2316      	movs	r3, #22
   2d994:	18fb      	adds	r3, r7, r3
   2d996:	781b      	ldrb	r3, [r3, #0]
   2d998:	693a      	ldr	r2, [r7, #16]
   2d99a:	18d3      	adds	r3, r2, r3
   2d99c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2d99e:	687b      	ldr	r3, [r7, #4]
   2d9a0:	0a5b      	lsrs	r3, r3, #9
   2d9a2:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2d9a4:	69fb      	ldr	r3, [r7, #28]
   2d9a6:	2b00      	cmp	r3, #0
   2d9a8:	d048      	beq.n	2da3c <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2d9aa:	2316      	movs	r3, #22
   2d9ac:	18fb      	adds	r3, r7, r3
   2d9ae:	781a      	ldrb	r2, [r3, #0]
   2d9b0:	69fb      	ldr	r3, [r7, #28]
   2d9b2:	18d2      	adds	r2, r2, r3
   2d9b4:	68fb      	ldr	r3, [r7, #12]
   2d9b6:	681b      	ldr	r3, [r3, #0]
   2d9b8:	789b      	ldrb	r3, [r3, #2]
   2d9ba:	429a      	cmp	r2, r3
   2d9bc:	d908      	bls.n	2d9d0 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2d9be:	68fb      	ldr	r3, [r7, #12]
   2d9c0:	681b      	ldr	r3, [r3, #0]
   2d9c2:	789b      	ldrb	r3, [r3, #2]
   2d9c4:	001a      	movs	r2, r3
   2d9c6:	2316      	movs	r3, #22
   2d9c8:	18fb      	adds	r3, r7, r3
   2d9ca:	781b      	ldrb	r3, [r3, #0]
   2d9cc:	1ad3      	subs	r3, r2, r3
   2d9ce:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2d9d0:	68fb      	ldr	r3, [r7, #12]
   2d9d2:	681b      	ldr	r3, [r3, #0]
   2d9d4:	7858      	ldrb	r0, [r3, #1]
   2d9d6:	69fb      	ldr	r3, [r7, #28]
   2d9d8:	b2db      	uxtb	r3, r3
   2d9da:	693a      	ldr	r2, [r7, #16]
   2d9dc:	69b9      	ldr	r1, [r7, #24]
   2d9de:	4c5c      	ldr	r4, [pc, #368]	; (2db50 <f_write+0x348>)
   2d9e0:	47a0      	blx	r4
   2d9e2:	1e03      	subs	r3, r0, #0
   2d9e4:	d009      	beq.n	2d9fa <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2d9e6:	68fb      	ldr	r3, [r7, #12]
   2d9e8:	799b      	ldrb	r3, [r3, #6]
   2d9ea:	2280      	movs	r2, #128	; 0x80
   2d9ec:	4252      	negs	r2, r2
   2d9ee:	4313      	orrs	r3, r2
   2d9f0:	b2da      	uxtb	r2, r3
   2d9f2:	68fb      	ldr	r3, [r7, #12]
   2d9f4:	719a      	strb	r2, [r3, #6]
   2d9f6:	2301      	movs	r3, #1
   2d9f8:	e09e      	b.n	2db38 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2d9fa:	68fb      	ldr	r3, [r7, #12]
   2d9fc:	681b      	ldr	r3, [r3, #0]
   2d9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2da00:	693b      	ldr	r3, [r7, #16]
   2da02:	1ad2      	subs	r2, r2, r3
   2da04:	69fb      	ldr	r3, [r7, #28]
   2da06:	429a      	cmp	r2, r3
   2da08:	d214      	bcs.n	2da34 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2da0a:	68fb      	ldr	r3, [r7, #12]
   2da0c:	681b      	ldr	r3, [r3, #0]
   2da0e:	3330      	adds	r3, #48	; 0x30
   2da10:	0018      	movs	r0, r3
   2da12:	68fb      	ldr	r3, [r7, #12]
   2da14:	681b      	ldr	r3, [r3, #0]
   2da16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2da18:	693b      	ldr	r3, [r7, #16]
   2da1a:	1ad3      	subs	r3, r2, r3
   2da1c:	025b      	lsls	r3, r3, #9
   2da1e:	69ba      	ldr	r2, [r7, #24]
   2da20:	18d1      	adds	r1, r2, r3
   2da22:	2380      	movs	r3, #128	; 0x80
   2da24:	009b      	lsls	r3, r3, #2
   2da26:	001a      	movs	r2, r3
   2da28:	4b4a      	ldr	r3, [pc, #296]	; (2db54 <f_write+0x34c>)
   2da2a:	4798      	blx	r3
					fp->fs->wflag = 0;
   2da2c:	68fb      	ldr	r3, [r7, #12]
   2da2e:	681b      	ldr	r3, [r3, #0]
   2da30:	2200      	movs	r2, #0
   2da32:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2da34:	69fb      	ldr	r3, [r7, #28]
   2da36:	025b      	lsls	r3, r3, #9
   2da38:	623b      	str	r3, [r7, #32]
				continue;
   2da3a:	e051      	b.n	2dae0 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2da3c:	68fb      	ldr	r3, [r7, #12]
   2da3e:	689a      	ldr	r2, [r3, #8]
   2da40:	68fb      	ldr	r3, [r7, #12]
   2da42:	68db      	ldr	r3, [r3, #12]
   2da44:	429a      	cmp	r2, r3
   2da46:	d315      	bcc.n	2da74 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2da48:	68fb      	ldr	r3, [r7, #12]
   2da4a:	681b      	ldr	r3, [r3, #0]
   2da4c:	2100      	movs	r1, #0
   2da4e:	0018      	movs	r0, r3
   2da50:	4b3d      	ldr	r3, [pc, #244]	; (2db48 <f_write+0x340>)
   2da52:	4798      	blx	r3
   2da54:	1e03      	subs	r3, r0, #0
   2da56:	d009      	beq.n	2da6c <f_write+0x264>
   2da58:	68fb      	ldr	r3, [r7, #12]
   2da5a:	799b      	ldrb	r3, [r3, #6]
   2da5c:	2280      	movs	r2, #128	; 0x80
   2da5e:	4252      	negs	r2, r2
   2da60:	4313      	orrs	r3, r2
   2da62:	b2da      	uxtb	r2, r3
   2da64:	68fb      	ldr	r3, [r7, #12]
   2da66:	719a      	strb	r2, [r3, #6]
   2da68:	2301      	movs	r3, #1
   2da6a:	e065      	b.n	2db38 <f_write+0x330>
				fp->fs->winsect = sect;
   2da6c:	68fb      	ldr	r3, [r7, #12]
   2da6e:	681b      	ldr	r3, [r3, #0]
   2da70:	693a      	ldr	r2, [r7, #16]
   2da72:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2da74:	68fb      	ldr	r3, [r7, #12]
   2da76:	693a      	ldr	r2, [r7, #16]
   2da78:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2da7a:	68fb      	ldr	r3, [r7, #12]
   2da7c:	689b      	ldr	r3, [r3, #8]
   2da7e:	05db      	lsls	r3, r3, #23
   2da80:	0ddb      	lsrs	r3, r3, #23
   2da82:	2280      	movs	r2, #128	; 0x80
   2da84:	0092      	lsls	r2, r2, #2
   2da86:	1ad3      	subs	r3, r2, r3
   2da88:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2da8a:	6a3a      	ldr	r2, [r7, #32]
   2da8c:	687b      	ldr	r3, [r7, #4]
   2da8e:	429a      	cmp	r2, r3
   2da90:	d901      	bls.n	2da96 <f_write+0x28e>
   2da92:	687b      	ldr	r3, [r7, #4]
   2da94:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2da96:	68fb      	ldr	r3, [r7, #12]
   2da98:	681a      	ldr	r2, [r3, #0]
   2da9a:	68fb      	ldr	r3, [r7, #12]
   2da9c:	699b      	ldr	r3, [r3, #24]
   2da9e:	0019      	movs	r1, r3
   2daa0:	0010      	movs	r0, r2
   2daa2:	4b29      	ldr	r3, [pc, #164]	; (2db48 <f_write+0x340>)
   2daa4:	4798      	blx	r3
   2daa6:	1e03      	subs	r3, r0, #0
   2daa8:	d009      	beq.n	2dabe <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2daaa:	68fb      	ldr	r3, [r7, #12]
   2daac:	799b      	ldrb	r3, [r3, #6]
   2daae:	2280      	movs	r2, #128	; 0x80
   2dab0:	4252      	negs	r2, r2
   2dab2:	4313      	orrs	r3, r2
   2dab4:	b2da      	uxtb	r2, r3
   2dab6:	68fb      	ldr	r3, [r7, #12]
   2dab8:	719a      	strb	r2, [r3, #6]
   2daba:	2301      	movs	r3, #1
   2dabc:	e03c      	b.n	2db38 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2dabe:	68fb      	ldr	r3, [r7, #12]
   2dac0:	681a      	ldr	r2, [r3, #0]
   2dac2:	68fb      	ldr	r3, [r7, #12]
   2dac4:	689b      	ldr	r3, [r3, #8]
   2dac6:	05db      	lsls	r3, r3, #23
   2dac8:	0ddb      	lsrs	r3, r3, #23
   2daca:	3330      	adds	r3, #48	; 0x30
   2dacc:	18d3      	adds	r3, r2, r3
   2dace:	6a3a      	ldr	r2, [r7, #32]
   2dad0:	69b9      	ldr	r1, [r7, #24]
   2dad2:	0018      	movs	r0, r3
   2dad4:	4b1f      	ldr	r3, [pc, #124]	; (2db54 <f_write+0x34c>)
   2dad6:	4798      	blx	r3
		fp->fs->wflag = 1;
   2dad8:	68fb      	ldr	r3, [r7, #12]
   2dada:	681b      	ldr	r3, [r3, #0]
   2dadc:	2201      	movs	r2, #1
   2dade:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2dae0:	69ba      	ldr	r2, [r7, #24]
   2dae2:	6a3b      	ldr	r3, [r7, #32]
   2dae4:	18d3      	adds	r3, r2, r3
   2dae6:	61bb      	str	r3, [r7, #24]
   2dae8:	68fb      	ldr	r3, [r7, #12]
   2daea:	689a      	ldr	r2, [r3, #8]
   2daec:	6a3b      	ldr	r3, [r7, #32]
   2daee:	18d2      	adds	r2, r2, r3
   2daf0:	68fb      	ldr	r3, [r7, #12]
   2daf2:	609a      	str	r2, [r3, #8]
   2daf4:	683b      	ldr	r3, [r7, #0]
   2daf6:	681a      	ldr	r2, [r3, #0]
   2daf8:	6a3b      	ldr	r3, [r7, #32]
   2dafa:	18d2      	adds	r2, r2, r3
   2dafc:	683b      	ldr	r3, [r7, #0]
   2dafe:	601a      	str	r2, [r3, #0]
   2db00:	687a      	ldr	r2, [r7, #4]
   2db02:	6a3b      	ldr	r3, [r7, #32]
   2db04:	1ad3      	subs	r3, r2, r3
   2db06:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2db08:	687b      	ldr	r3, [r7, #4]
   2db0a:	2b00      	cmp	r3, #0
   2db0c:	d000      	beq.n	2db10 <f_write+0x308>
   2db0e:	e6b7      	b.n	2d880 <f_write+0x78>
   2db10:	e000      	b.n	2db14 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2db12:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2db14:	68fb      	ldr	r3, [r7, #12]
   2db16:	689a      	ldr	r2, [r3, #8]
   2db18:	68fb      	ldr	r3, [r7, #12]
   2db1a:	68db      	ldr	r3, [r3, #12]
   2db1c:	429a      	cmp	r2, r3
   2db1e:	d903      	bls.n	2db28 <f_write+0x320>
   2db20:	68fb      	ldr	r3, [r7, #12]
   2db22:	689a      	ldr	r2, [r3, #8]
   2db24:	68fb      	ldr	r3, [r7, #12]
   2db26:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2db28:	68fb      	ldr	r3, [r7, #12]
   2db2a:	799b      	ldrb	r3, [r3, #6]
   2db2c:	2220      	movs	r2, #32
   2db2e:	4313      	orrs	r3, r2
   2db30:	b2da      	uxtb	r2, r3
   2db32:	68fb      	ldr	r3, [r7, #12]
   2db34:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2db36:	2300      	movs	r3, #0
}
   2db38:	0018      	movs	r0, r3
   2db3a:	46bd      	mov	sp, r7
   2db3c:	b00b      	add	sp, #44	; 0x2c
   2db3e:	bd90      	pop	{r4, r7, pc}
   2db40:	0002d285 	.word	0x0002d285
   2db44:	0002b911 	.word	0x0002b911
   2db48:	0002b209 	.word	0x0002b209
   2db4c:	0002b469 	.word	0x0002b469
   2db50:	0002aef5 	.word	0x0002aef5
   2db54:	0002b125 	.word	0x0002b125

0002db58 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2db58:	b590      	push	{r4, r7, lr}
   2db5a:	b087      	sub	sp, #28
   2db5c:	af00      	add	r7, sp, #0
   2db5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2db60:	687b      	ldr	r3, [r7, #4]
   2db62:	681a      	ldr	r2, [r3, #0]
   2db64:	687b      	ldr	r3, [r7, #4]
   2db66:	889b      	ldrh	r3, [r3, #4]
   2db68:	2117      	movs	r1, #23
   2db6a:	187c      	adds	r4, r7, r1
   2db6c:	0019      	movs	r1, r3
   2db6e:	0010      	movs	r0, r2
   2db70:	4b55      	ldr	r3, [pc, #340]	; (2dcc8 <f_sync+0x170>)
   2db72:	4798      	blx	r3
   2db74:	0003      	movs	r3, r0
   2db76:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2db78:	2317      	movs	r3, #23
   2db7a:	18fb      	adds	r3, r7, r3
   2db7c:	781b      	ldrb	r3, [r3, #0]
   2db7e:	2b00      	cmp	r3, #0
   2db80:	d000      	beq.n	2db84 <f_sync+0x2c>
   2db82:	e09a      	b.n	2dcba <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2db84:	687b      	ldr	r3, [r7, #4]
   2db86:	799b      	ldrb	r3, [r3, #6]
   2db88:	001a      	movs	r2, r3
   2db8a:	2320      	movs	r3, #32
   2db8c:	4013      	ands	r3, r2
   2db8e:	d100      	bne.n	2db92 <f_sync+0x3a>
   2db90:	e093      	b.n	2dcba <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2db92:	687b      	ldr	r3, [r7, #4]
   2db94:	681a      	ldr	r2, [r3, #0]
   2db96:	687b      	ldr	r3, [r7, #4]
   2db98:	69db      	ldr	r3, [r3, #28]
   2db9a:	2117      	movs	r1, #23
   2db9c:	187c      	adds	r4, r7, r1
   2db9e:	0019      	movs	r1, r3
   2dba0:	0010      	movs	r0, r2
   2dba2:	4b4a      	ldr	r3, [pc, #296]	; (2dccc <f_sync+0x174>)
   2dba4:	4798      	blx	r3
   2dba6:	0003      	movs	r3, r0
   2dba8:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2dbaa:	2317      	movs	r3, #23
   2dbac:	18fb      	adds	r3, r7, r3
   2dbae:	781b      	ldrb	r3, [r3, #0]
   2dbb0:	2b00      	cmp	r3, #0
   2dbb2:	d000      	beq.n	2dbb6 <f_sync+0x5e>
   2dbb4:	e081      	b.n	2dcba <f_sync+0x162>
				dir = fp->dir_ptr;
   2dbb6:	687b      	ldr	r3, [r7, #4]
   2dbb8:	6a1b      	ldr	r3, [r3, #32]
   2dbba:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2dbbc:	693b      	ldr	r3, [r7, #16]
   2dbbe:	330b      	adds	r3, #11
   2dbc0:	693a      	ldr	r2, [r7, #16]
   2dbc2:	320b      	adds	r2, #11
   2dbc4:	7812      	ldrb	r2, [r2, #0]
   2dbc6:	2120      	movs	r1, #32
   2dbc8:	430a      	orrs	r2, r1
   2dbca:	b2d2      	uxtb	r2, r2
   2dbcc:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2dbce:	693b      	ldr	r3, [r7, #16]
   2dbd0:	331c      	adds	r3, #28
   2dbd2:	001a      	movs	r2, r3
   2dbd4:	687b      	ldr	r3, [r7, #4]
   2dbd6:	68db      	ldr	r3, [r3, #12]
   2dbd8:	b2db      	uxtb	r3, r3
   2dbda:	7013      	strb	r3, [r2, #0]
   2dbdc:	693b      	ldr	r3, [r7, #16]
   2dbde:	331d      	adds	r3, #29
   2dbe0:	001a      	movs	r2, r3
   2dbe2:	687b      	ldr	r3, [r7, #4]
   2dbe4:	68db      	ldr	r3, [r3, #12]
   2dbe6:	b29b      	uxth	r3, r3
   2dbe8:	0a1b      	lsrs	r3, r3, #8
   2dbea:	b29b      	uxth	r3, r3
   2dbec:	b2db      	uxtb	r3, r3
   2dbee:	7013      	strb	r3, [r2, #0]
   2dbf0:	693b      	ldr	r3, [r7, #16]
   2dbf2:	331e      	adds	r3, #30
   2dbf4:	001a      	movs	r2, r3
   2dbf6:	687b      	ldr	r3, [r7, #4]
   2dbf8:	68db      	ldr	r3, [r3, #12]
   2dbfa:	0c1b      	lsrs	r3, r3, #16
   2dbfc:	b2db      	uxtb	r3, r3
   2dbfe:	7013      	strb	r3, [r2, #0]
   2dc00:	693b      	ldr	r3, [r7, #16]
   2dc02:	331f      	adds	r3, #31
   2dc04:	001a      	movs	r2, r3
   2dc06:	687b      	ldr	r3, [r7, #4]
   2dc08:	68db      	ldr	r3, [r3, #12]
   2dc0a:	0e1b      	lsrs	r3, r3, #24
   2dc0c:	b2db      	uxtb	r3, r3
   2dc0e:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2dc10:	693b      	ldr	r3, [r7, #16]
   2dc12:	331a      	adds	r3, #26
   2dc14:	001a      	movs	r2, r3
   2dc16:	687b      	ldr	r3, [r7, #4]
   2dc18:	691b      	ldr	r3, [r3, #16]
   2dc1a:	b2db      	uxtb	r3, r3
   2dc1c:	7013      	strb	r3, [r2, #0]
   2dc1e:	693b      	ldr	r3, [r7, #16]
   2dc20:	331b      	adds	r3, #27
   2dc22:	001a      	movs	r2, r3
   2dc24:	687b      	ldr	r3, [r7, #4]
   2dc26:	691b      	ldr	r3, [r3, #16]
   2dc28:	b29b      	uxth	r3, r3
   2dc2a:	0a1b      	lsrs	r3, r3, #8
   2dc2c:	b29b      	uxth	r3, r3
   2dc2e:	b2db      	uxtb	r3, r3
   2dc30:	7013      	strb	r3, [r2, #0]
   2dc32:	693b      	ldr	r3, [r7, #16]
   2dc34:	3314      	adds	r3, #20
   2dc36:	001a      	movs	r2, r3
   2dc38:	687b      	ldr	r3, [r7, #4]
   2dc3a:	691b      	ldr	r3, [r3, #16]
   2dc3c:	0c1b      	lsrs	r3, r3, #16
   2dc3e:	b2db      	uxtb	r3, r3
   2dc40:	7013      	strb	r3, [r2, #0]
   2dc42:	693b      	ldr	r3, [r7, #16]
   2dc44:	3315      	adds	r3, #21
   2dc46:	001a      	movs	r2, r3
   2dc48:	687b      	ldr	r3, [r7, #4]
   2dc4a:	691b      	ldr	r3, [r3, #16]
   2dc4c:	0c1b      	lsrs	r3, r3, #16
   2dc4e:	b29b      	uxth	r3, r3
   2dc50:	0a1b      	lsrs	r3, r3, #8
   2dc52:	b29b      	uxth	r3, r3
   2dc54:	b2db      	uxtb	r3, r3
   2dc56:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2dc58:	4b1d      	ldr	r3, [pc, #116]	; (2dcd0 <f_sync+0x178>)
   2dc5a:	4798      	blx	r3
   2dc5c:	0003      	movs	r3, r0
   2dc5e:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2dc60:	693b      	ldr	r3, [r7, #16]
   2dc62:	3316      	adds	r3, #22
   2dc64:	68fa      	ldr	r2, [r7, #12]
   2dc66:	b2d2      	uxtb	r2, r2
   2dc68:	701a      	strb	r2, [r3, #0]
   2dc6a:	693b      	ldr	r3, [r7, #16]
   2dc6c:	3317      	adds	r3, #23
   2dc6e:	68fa      	ldr	r2, [r7, #12]
   2dc70:	b292      	uxth	r2, r2
   2dc72:	0a12      	lsrs	r2, r2, #8
   2dc74:	b292      	uxth	r2, r2
   2dc76:	b2d2      	uxtb	r2, r2
   2dc78:	701a      	strb	r2, [r3, #0]
   2dc7a:	693b      	ldr	r3, [r7, #16]
   2dc7c:	3318      	adds	r3, #24
   2dc7e:	68fa      	ldr	r2, [r7, #12]
   2dc80:	0c12      	lsrs	r2, r2, #16
   2dc82:	b2d2      	uxtb	r2, r2
   2dc84:	701a      	strb	r2, [r3, #0]
   2dc86:	693b      	ldr	r3, [r7, #16]
   2dc88:	3319      	adds	r3, #25
   2dc8a:	68fa      	ldr	r2, [r7, #12]
   2dc8c:	0e12      	lsrs	r2, r2, #24
   2dc8e:	b2d2      	uxtb	r2, r2
   2dc90:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2dc92:	687b      	ldr	r3, [r7, #4]
   2dc94:	799b      	ldrb	r3, [r3, #6]
   2dc96:	2220      	movs	r2, #32
   2dc98:	4393      	bics	r3, r2
   2dc9a:	b2da      	uxtb	r2, r3
   2dc9c:	687b      	ldr	r3, [r7, #4]
   2dc9e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2dca0:	687b      	ldr	r3, [r7, #4]
   2dca2:	681b      	ldr	r3, [r3, #0]
   2dca4:	2201      	movs	r2, #1
   2dca6:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2dca8:	687b      	ldr	r3, [r7, #4]
   2dcaa:	681b      	ldr	r3, [r3, #0]
   2dcac:	2217      	movs	r2, #23
   2dcae:	18bc      	adds	r4, r7, r2
   2dcb0:	0018      	movs	r0, r3
   2dcb2:	4b08      	ldr	r3, [pc, #32]	; (2dcd4 <f_sync+0x17c>)
   2dcb4:	4798      	blx	r3
   2dcb6:	0003      	movs	r3, r0
   2dcb8:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2dcba:	2317      	movs	r3, #23
   2dcbc:	18fb      	adds	r3, r7, r3
   2dcbe:	781b      	ldrb	r3, [r3, #0]
}
   2dcc0:	0018      	movs	r0, r3
   2dcc2:	46bd      	mov	sp, r7
   2dcc4:	b007      	add	sp, #28
   2dcc6:	bd90      	pop	{r4, r7, pc}
   2dcc8:	0002d285 	.word	0x0002d285
   2dccc:	0002b209 	.word	0x0002b209
   2dcd0:	0002b0c5 	.word	0x0002b0c5
   2dcd4:	0002b2d1 	.word	0x0002b2d1

0002dcd8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2dcd8:	b590      	push	{r4, r7, lr}
   2dcda:	b085      	sub	sp, #20
   2dcdc:	af00      	add	r7, sp, #0
   2dcde:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2dce0:	230f      	movs	r3, #15
   2dce2:	18fc      	adds	r4, r7, r3
   2dce4:	687b      	ldr	r3, [r7, #4]
   2dce6:	0018      	movs	r0, r3
   2dce8:	4b09      	ldr	r3, [pc, #36]	; (2dd10 <f_close+0x38>)
   2dcea:	4798      	blx	r3
   2dcec:	0003      	movs	r3, r0
   2dcee:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2dcf0:	230f      	movs	r3, #15
   2dcf2:	18fb      	adds	r3, r7, r3
   2dcf4:	781b      	ldrb	r3, [r3, #0]
   2dcf6:	2b00      	cmp	r3, #0
   2dcf8:	d102      	bne.n	2dd00 <f_close+0x28>
   2dcfa:	687b      	ldr	r3, [r7, #4]
   2dcfc:	2200      	movs	r2, #0
   2dcfe:	601a      	str	r2, [r3, #0]
	return res;
   2dd00:	230f      	movs	r3, #15
   2dd02:	18fb      	adds	r3, r7, r3
   2dd04:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2dd06:	0018      	movs	r0, r3
   2dd08:	46bd      	mov	sp, r7
   2dd0a:	b005      	add	sp, #20
   2dd0c:	bd90      	pop	{r4, r7, pc}
   2dd0e:	46c0      	nop			; (mov r8, r8)
   2dd10:	0002db59 	.word	0x0002db59

0002dd14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2dd14:	b580      	push	{r7, lr}
   2dd16:	b084      	sub	sp, #16
   2dd18:	af00      	add	r7, sp, #0
   2dd1a:	0002      	movs	r2, r0
   2dd1c:	6039      	str	r1, [r7, #0]
   2dd1e:	1dbb      	adds	r3, r7, #6
   2dd20:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2dd22:	1dbb      	adds	r3, r7, #6
   2dd24:	881b      	ldrh	r3, [r3, #0]
   2dd26:	2b7f      	cmp	r3, #127	; 0x7f
   2dd28:	d805      	bhi.n	2dd36 <ff_convert+0x22>
		c = src;
   2dd2a:	230e      	movs	r3, #14
   2dd2c:	18fb      	adds	r3, r7, r3
   2dd2e:	1dba      	adds	r2, r7, #6
   2dd30:	8812      	ldrh	r2, [r2, #0]
   2dd32:	801a      	strh	r2, [r3, #0]
   2dd34:	e03a      	b.n	2ddac <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2dd36:	683b      	ldr	r3, [r7, #0]
   2dd38:	2b00      	cmp	r3, #0
   2dd3a:	d010      	beq.n	2dd5e <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2dd3c:	1dbb      	adds	r3, r7, #6
   2dd3e:	881b      	ldrh	r3, [r3, #0]
   2dd40:	2bff      	cmp	r3, #255	; 0xff
   2dd42:	d807      	bhi.n	2dd54 <ff_convert+0x40>
   2dd44:	1dbb      	adds	r3, r7, #6
   2dd46:	881b      	ldrh	r3, [r3, #0]
   2dd48:	3b80      	subs	r3, #128	; 0x80
   2dd4a:	001a      	movs	r2, r3
   2dd4c:	4b1b      	ldr	r3, [pc, #108]	; (2ddbc <ff_convert+0xa8>)
   2dd4e:	0052      	lsls	r2, r2, #1
   2dd50:	5ad2      	ldrh	r2, [r2, r3]
   2dd52:	e000      	b.n	2dd56 <ff_convert+0x42>
   2dd54:	2200      	movs	r2, #0
   2dd56:	230e      	movs	r3, #14
   2dd58:	18fb      	adds	r3, r7, r3
   2dd5a:	801a      	strh	r2, [r3, #0]
   2dd5c:	e026      	b.n	2ddac <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2dd5e:	230e      	movs	r3, #14
   2dd60:	18fb      	adds	r3, r7, r3
   2dd62:	2200      	movs	r2, #0
   2dd64:	801a      	strh	r2, [r3, #0]
   2dd66:	e010      	b.n	2dd8a <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2dd68:	230e      	movs	r3, #14
   2dd6a:	18fb      	adds	r3, r7, r3
   2dd6c:	881a      	ldrh	r2, [r3, #0]
   2dd6e:	4b13      	ldr	r3, [pc, #76]	; (2ddbc <ff_convert+0xa8>)
   2dd70:	0052      	lsls	r2, r2, #1
   2dd72:	5ad3      	ldrh	r3, [r2, r3]
   2dd74:	1dba      	adds	r2, r7, #6
   2dd76:	8812      	ldrh	r2, [r2, #0]
   2dd78:	429a      	cmp	r2, r3
   2dd7a:	d00c      	beq.n	2dd96 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2dd7c:	230e      	movs	r3, #14
   2dd7e:	18fb      	adds	r3, r7, r3
   2dd80:	881a      	ldrh	r2, [r3, #0]
   2dd82:	230e      	movs	r3, #14
   2dd84:	18fb      	adds	r3, r7, r3
   2dd86:	3201      	adds	r2, #1
   2dd88:	801a      	strh	r2, [r3, #0]
   2dd8a:	230e      	movs	r3, #14
   2dd8c:	18fb      	adds	r3, r7, r3
   2dd8e:	881b      	ldrh	r3, [r3, #0]
   2dd90:	2b7f      	cmp	r3, #127	; 0x7f
   2dd92:	d9e9      	bls.n	2dd68 <ff_convert+0x54>
   2dd94:	e000      	b.n	2dd98 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2dd96:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2dd98:	230e      	movs	r3, #14
   2dd9a:	18fb      	adds	r3, r7, r3
   2dd9c:	881b      	ldrh	r3, [r3, #0]
   2dd9e:	3380      	adds	r3, #128	; 0x80
   2dda0:	b29a      	uxth	r2, r3
   2dda2:	230e      	movs	r3, #14
   2dda4:	18fb      	adds	r3, r7, r3
   2dda6:	21ff      	movs	r1, #255	; 0xff
   2dda8:	400a      	ands	r2, r1
   2ddaa:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2ddac:	230e      	movs	r3, #14
   2ddae:	18fb      	adds	r3, r7, r3
   2ddb0:	881b      	ldrh	r3, [r3, #0]
}
   2ddb2:	0018      	movs	r0, r3
   2ddb4:	46bd      	mov	sp, r7
   2ddb6:	b004      	add	sp, #16
   2ddb8:	bd80      	pop	{r7, pc}
   2ddba:	46c0      	nop			; (mov r8, r8)
   2ddbc:	00038ec0 	.word	0x00038ec0

0002ddc0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2ddc0:	b580      	push	{r7, lr}
   2ddc2:	b084      	sub	sp, #16
   2ddc4:	af00      	add	r7, sp, #0
   2ddc6:	0002      	movs	r2, r0
   2ddc8:	1dbb      	adds	r3, r7, #6
   2ddca:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2ddcc:	2300      	movs	r3, #0
   2ddce:	60fb      	str	r3, [r7, #12]
   2ddd0:	e002      	b.n	2ddd8 <ff_wtoupper+0x18>
   2ddd2:	68fb      	ldr	r3, [r7, #12]
   2ddd4:	3301      	adds	r3, #1
   2ddd6:	60fb      	str	r3, [r7, #12]
   2ddd8:	4b0f      	ldr	r3, [pc, #60]	; (2de18 <ff_wtoupper+0x58>)
   2ddda:	68fa      	ldr	r2, [r7, #12]
   2dddc:	0052      	lsls	r2, r2, #1
   2ddde:	5ad3      	ldrh	r3, [r2, r3]
   2dde0:	2b00      	cmp	r3, #0
   2dde2:	d007      	beq.n	2ddf4 <ff_wtoupper+0x34>
   2dde4:	4b0c      	ldr	r3, [pc, #48]	; (2de18 <ff_wtoupper+0x58>)
   2dde6:	68fa      	ldr	r2, [r7, #12]
   2dde8:	0052      	lsls	r2, r2, #1
   2ddea:	5ad3      	ldrh	r3, [r2, r3]
   2ddec:	1dba      	adds	r2, r7, #6
   2ddee:	8812      	ldrh	r2, [r2, #0]
   2ddf0:	429a      	cmp	r2, r3
   2ddf2:	d1ee      	bne.n	2ddd2 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2ddf4:	4b08      	ldr	r3, [pc, #32]	; (2de18 <ff_wtoupper+0x58>)
   2ddf6:	68fa      	ldr	r2, [r7, #12]
   2ddf8:	0052      	lsls	r2, r2, #1
   2ddfa:	5ad3      	ldrh	r3, [r2, r3]
   2ddfc:	2b00      	cmp	r3, #0
   2ddfe:	d004      	beq.n	2de0a <ff_wtoupper+0x4a>
   2de00:	4b06      	ldr	r3, [pc, #24]	; (2de1c <ff_wtoupper+0x5c>)
   2de02:	68fa      	ldr	r2, [r7, #12]
   2de04:	0052      	lsls	r2, r2, #1
   2de06:	5ad3      	ldrh	r3, [r2, r3]
   2de08:	e001      	b.n	2de0e <ff_wtoupper+0x4e>
   2de0a:	1dbb      	adds	r3, r7, #6
   2de0c:	881b      	ldrh	r3, [r3, #0]
}
   2de0e:	0018      	movs	r0, r3
   2de10:	46bd      	mov	sp, r7
   2de12:	b004      	add	sp, #16
   2de14:	bd80      	pop	{r7, pc}
   2de16:	46c0      	nop			; (mov r8, r8)
   2de18:	00038fc0 	.word	0x00038fc0
   2de1c:	000391a0 	.word	0x000391a0

0002de20 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2de20:	b580      	push	{r7, lr}
   2de22:	b084      	sub	sp, #16
   2de24:	af00      	add	r7, sp, #0
   2de26:	60f8      	str	r0, [r7, #12]
   2de28:	60b9      	str	r1, [r7, #8]
   2de2a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2de2c:	68fb      	ldr	r3, [r7, #12]
   2de2e:	68ba      	ldr	r2, [r7, #8]
   2de30:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2de32:	68fb      	ldr	r3, [r7, #12]
   2de34:	687a      	ldr	r2, [r7, #4]
   2de36:	601a      	str	r2, [r3, #0]
}
   2de38:	46c0      	nop			; (mov r8, r8)
   2de3a:	46bd      	mov	sp, r7
   2de3c:	b004      	add	sp, #16
   2de3e:	bd80      	pop	{r7, pc}

0002de40 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2de40:	b580      	push	{r7, lr}
   2de42:	b082      	sub	sp, #8
   2de44:	af00      	add	r7, sp, #0
   2de46:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2de48:	687b      	ldr	r3, [r7, #4]
   2de4a:	681b      	ldr	r3, [r3, #0]
   2de4c:	4a07      	ldr	r2, [pc, #28]	; (2de6c <getNextPacketId+0x2c>)
   2de4e:	4293      	cmp	r3, r2
   2de50:	d003      	beq.n	2de5a <getNextPacketId+0x1a>
   2de52:	687b      	ldr	r3, [r7, #4]
   2de54:	681b      	ldr	r3, [r3, #0]
   2de56:	1c5a      	adds	r2, r3, #1
   2de58:	e000      	b.n	2de5c <getNextPacketId+0x1c>
   2de5a:	2201      	movs	r2, #1
   2de5c:	687b      	ldr	r3, [r7, #4]
   2de5e:	601a      	str	r2, [r3, #0]
   2de60:	687b      	ldr	r3, [r7, #4]
   2de62:	681b      	ldr	r3, [r3, #0]
}
   2de64:	0018      	movs	r0, r3
   2de66:	46bd      	mov	sp, r7
   2de68:	b002      	add	sp, #8
   2de6a:	bd80      	pop	{r7, pc}
   2de6c:	0000ffff 	.word	0x0000ffff

0002de70 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2de70:	b5f0      	push	{r4, r5, r6, r7, lr}
   2de72:	b087      	sub	sp, #28
   2de74:	af00      	add	r7, sp, #0
   2de76:	60f8      	str	r0, [r7, #12]
   2de78:	60b9      	str	r1, [r7, #8]
   2de7a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2de7c:	2301      	movs	r3, #1
   2de7e:	425b      	negs	r3, r3
   2de80:	617b      	str	r3, [r7, #20]
        sent = 0;
   2de82:	2300      	movs	r3, #0
   2de84:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2de86:	e01a      	b.n	2debe <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2de88:	68fb      	ldr	r3, [r7, #12]
   2de8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2de8c:	68dc      	ldr	r4, [r3, #12]
   2de8e:	68fb      	ldr	r3, [r7, #12]
   2de90:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2de92:	68fb      	ldr	r3, [r7, #12]
   2de94:	691a      	ldr	r2, [r3, #16]
   2de96:	693b      	ldr	r3, [r7, #16]
   2de98:	18d6      	adds	r6, r2, r3
   2de9a:	687b      	ldr	r3, [r7, #4]
   2de9c:	0018      	movs	r0, r3
   2de9e:	4b1a      	ldr	r3, [pc, #104]	; (2df08 <sendPacket+0x98>)
   2dea0:	4798      	blx	r3
   2dea2:	0003      	movs	r3, r0
   2dea4:	68ba      	ldr	r2, [r7, #8]
   2dea6:	0031      	movs	r1, r6
   2dea8:	0028      	movs	r0, r5
   2deaa:	47a0      	blx	r4
   2deac:	0003      	movs	r3, r0
   2deae:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2deb0:	697b      	ldr	r3, [r7, #20]
   2deb2:	2b00      	cmp	r3, #0
   2deb4:	db0e      	blt.n	2ded4 <sendPacket+0x64>
            break;
        sent += rc;
   2deb6:	693a      	ldr	r2, [r7, #16]
   2deb8:	697b      	ldr	r3, [r7, #20]
   2deba:	18d3      	adds	r3, r2, r3
   2debc:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2debe:	693a      	ldr	r2, [r7, #16]
   2dec0:	68bb      	ldr	r3, [r7, #8]
   2dec2:	429a      	cmp	r2, r3
   2dec4:	da07      	bge.n	2ded6 <sendPacket+0x66>
   2dec6:	687b      	ldr	r3, [r7, #4]
   2dec8:	0018      	movs	r0, r3
   2deca:	4b10      	ldr	r3, [pc, #64]	; (2df0c <sendPacket+0x9c>)
   2decc:	4798      	blx	r3
   2dece:	1e03      	subs	r3, r0, #0
   2ded0:	d0da      	beq.n	2de88 <sendPacket+0x18>
   2ded2:	e000      	b.n	2ded6 <sendPacket+0x66>
            break;
   2ded4:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2ded6:	693a      	ldr	r2, [r7, #16]
   2ded8:	68bb      	ldr	r3, [r7, #8]
   2deda:	429a      	cmp	r2, r3
   2dedc:	d10b      	bne.n	2def6 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2dede:	68fb      	ldr	r3, [r7, #12]
   2dee0:	3354      	adds	r3, #84	; 0x54
   2dee2:	001a      	movs	r2, r3
   2dee4:	68fb      	ldr	r3, [r7, #12]
   2dee6:	699b      	ldr	r3, [r3, #24]
   2dee8:	0019      	movs	r1, r3
   2deea:	0010      	movs	r0, r2
   2deec:	4b08      	ldr	r3, [pc, #32]	; (2df10 <sendPacket+0xa0>)
   2deee:	4798      	blx	r3
        rc = SUCCESS;
   2def0:	2300      	movs	r3, #0
   2def2:	617b      	str	r3, [r7, #20]
   2def4:	e002      	b.n	2defc <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2def6:	2301      	movs	r3, #1
   2def8:	425b      	negs	r3, r3
   2defa:	617b      	str	r3, [r7, #20]
    return rc;
   2defc:	697b      	ldr	r3, [r7, #20]
}
   2defe:	0018      	movs	r0, r3
   2df00:	46bd      	mov	sp, r7
   2df02:	b007      	add	sp, #28
   2df04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2df06:	46c0      	nop			; (mov r8, r8)
   2df08:	0002ecd1 	.word	0x0002ecd1
   2df0c:	0002ec55 	.word	0x0002ec55
   2df10:	0002eca9 	.word	0x0002eca9

0002df14 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2df14:	b580      	push	{r7, lr}
   2df16:	b086      	sub	sp, #24
   2df18:	af00      	add	r7, sp, #0
   2df1a:	60f8      	str	r0, [r7, #12]
   2df1c:	60b9      	str	r1, [r7, #8]
   2df1e:	607a      	str	r2, [r7, #4]
   2df20:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2df22:	68fb      	ldr	r3, [r7, #12]
   2df24:	68ba      	ldr	r2, [r7, #8]
   2df26:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2df28:	2300      	movs	r3, #0
   2df2a:	617b      	str	r3, [r7, #20]
   2df2c:	e00a      	b.n	2df44 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2df2e:	68fa      	ldr	r2, [r7, #12]
   2df30:	697b      	ldr	r3, [r7, #20]
   2df32:	3304      	adds	r3, #4
   2df34:	00db      	lsls	r3, r3, #3
   2df36:	18d3      	adds	r3, r2, r3
   2df38:	3304      	adds	r3, #4
   2df3a:	2200      	movs	r2, #0
   2df3c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2df3e:	697b      	ldr	r3, [r7, #20]
   2df40:	3301      	adds	r3, #1
   2df42:	617b      	str	r3, [r7, #20]
   2df44:	697b      	ldr	r3, [r7, #20]
   2df46:	2b04      	cmp	r3, #4
   2df48:	ddf1      	ble.n	2df2e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2df4a:	68fb      	ldr	r3, [r7, #12]
   2df4c:	687a      	ldr	r2, [r7, #4]
   2df4e:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2df50:	68fb      	ldr	r3, [r7, #12]
   2df52:	683a      	ldr	r2, [r7, #0]
   2df54:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2df56:	68fb      	ldr	r3, [r7, #12]
   2df58:	6a3a      	ldr	r2, [r7, #32]
   2df5a:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2df5c:	68fb      	ldr	r3, [r7, #12]
   2df5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2df60:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2df62:	68fb      	ldr	r3, [r7, #12]
   2df64:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2df66:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2df68:	68fb      	ldr	r3, [r7, #12]
   2df6a:	2200      	movs	r2, #0
   2df6c:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2df6e:	68fb      	ldr	r3, [r7, #12]
   2df70:	2200      	movs	r2, #0
   2df72:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2df74:	68fb      	ldr	r3, [r7, #12]
   2df76:	2200      	movs	r2, #0
   2df78:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2df7a:	68fb      	ldr	r3, [r7, #12]
   2df7c:	2201      	movs	r2, #1
   2df7e:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2df80:	68fb      	ldr	r3, [r7, #12]
   2df82:	3354      	adds	r3, #84	; 0x54
   2df84:	0018      	movs	r0, r3
   2df86:	4b03      	ldr	r3, [pc, #12]	; (2df94 <MQTTClientInit+0x80>)
   2df88:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2df8a:	46c0      	nop			; (mov r8, r8)
   2df8c:	46bd      	mov	sp, r7
   2df8e:	b006      	add	sp, #24
   2df90:	bd80      	pop	{r7, pc}
   2df92:	46c0      	nop			; (mov r8, r8)
   2df94:	0002ecf9 	.word	0x0002ecf9

0002df98 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2df98:	b590      	push	{r4, r7, lr}
   2df9a:	b08b      	sub	sp, #44	; 0x2c
   2df9c:	af00      	add	r7, sp, #0
   2df9e:	60f8      	str	r0, [r7, #12]
   2dfa0:	60b9      	str	r1, [r7, #8]
   2dfa2:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2dfa4:	2301      	movs	r3, #1
   2dfa6:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2dfa8:	2300      	movs	r3, #0
   2dfaa:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2dfac:	2304      	movs	r3, #4
   2dfae:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2dfb0:	68bb      	ldr	r3, [r7, #8]
   2dfb2:	2200      	movs	r2, #0
   2dfb4:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2dfb6:	2301      	movs	r3, #1
   2dfb8:	425b      	negs	r3, r3
   2dfba:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2dfbc:	6a3b      	ldr	r3, [r7, #32]
   2dfbe:	3301      	adds	r3, #1
   2dfc0:	623b      	str	r3, [r7, #32]
   2dfc2:	6a3a      	ldr	r2, [r7, #32]
   2dfc4:	69fb      	ldr	r3, [r7, #28]
   2dfc6:	429a      	cmp	r2, r3
   2dfc8:	dd03      	ble.n	2dfd2 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2dfca:	2301      	movs	r3, #1
   2dfcc:	425b      	negs	r3, r3
   2dfce:	61bb      	str	r3, [r7, #24]
            goto exit;
   2dfd0:	e026      	b.n	2e020 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2dfd2:	68fb      	ldr	r3, [r7, #12]
   2dfd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2dfd6:	689c      	ldr	r4, [r3, #8]
   2dfd8:	68fb      	ldr	r3, [r7, #12]
   2dfda:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2dfdc:	687b      	ldr	r3, [r7, #4]
   2dfde:	2217      	movs	r2, #23
   2dfe0:	18b9      	adds	r1, r7, r2
   2dfe2:	2201      	movs	r2, #1
   2dfe4:	47a0      	blx	r4
   2dfe6:	0003      	movs	r3, r0
   2dfe8:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2dfea:	69bb      	ldr	r3, [r7, #24]
   2dfec:	2b01      	cmp	r3, #1
   2dfee:	d116      	bne.n	2e01e <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2dff0:	68bb      	ldr	r3, [r7, #8]
   2dff2:	681a      	ldr	r2, [r3, #0]
   2dff4:	2317      	movs	r3, #23
   2dff6:	18fb      	adds	r3, r7, r3
   2dff8:	781b      	ldrb	r3, [r3, #0]
   2dffa:	0019      	movs	r1, r3
   2dffc:	237f      	movs	r3, #127	; 0x7f
   2dffe:	400b      	ands	r3, r1
   2e000:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2e002:	434b      	muls	r3, r1
   2e004:	18d2      	adds	r2, r2, r3
   2e006:	68bb      	ldr	r3, [r7, #8]
   2e008:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e00c:	01db      	lsls	r3, r3, #7
   2e00e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2e010:	2317      	movs	r3, #23
   2e012:	18fb      	adds	r3, r7, r3
   2e014:	781b      	ldrb	r3, [r3, #0]
   2e016:	b25b      	sxtb	r3, r3
   2e018:	2b00      	cmp	r3, #0
   2e01a:	dbcc      	blt.n	2dfb6 <decodePacket+0x1e>
   2e01c:	e000      	b.n	2e020 <decodePacket+0x88>
            goto exit;
   2e01e:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2e020:	6a3b      	ldr	r3, [r7, #32]
}
   2e022:	0018      	movs	r0, r3
   2e024:	46bd      	mov	sp, r7
   2e026:	b00b      	add	sp, #44	; 0x2c
   2e028:	bd90      	pop	{r4, r7, pc}
	...

0002e02c <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2e02c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e02e:	46c6      	mov	lr, r8
   2e030:	b500      	push	{lr}
   2e032:	b086      	sub	sp, #24
   2e034:	af00      	add	r7, sp, #0
   2e036:	6078      	str	r0, [r7, #4]
   2e038:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2e03a:	2301      	movs	r3, #1
   2e03c:	425b      	negs	r3, r3
   2e03e:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2e040:	2300      	movs	r3, #0
   2e042:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2e044:	2300      	movs	r3, #0
   2e046:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2e048:	2300      	movs	r3, #0
   2e04a:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2e04c:	687b      	ldr	r3, [r7, #4]
   2e04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e050:	689c      	ldr	r4, [r3, #8]
   2e052:	687b      	ldr	r3, [r7, #4]
   2e054:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e056:	687b      	ldr	r3, [r7, #4]
   2e058:	695e      	ldr	r6, [r3, #20]
   2e05a:	683b      	ldr	r3, [r7, #0]
   2e05c:	0018      	movs	r0, r3
   2e05e:	4b2b      	ldr	r3, [pc, #172]	; (2e10c <readPacket+0xe0>)
   2e060:	4798      	blx	r3
   2e062:	0003      	movs	r3, r0
   2e064:	2201      	movs	r2, #1
   2e066:	0031      	movs	r1, r6
   2e068:	0028      	movs	r0, r5
   2e06a:	47a0      	blx	r4
   2e06c:	0003      	movs	r3, r0
   2e06e:	2b01      	cmp	r3, #1
   2e070:	d141      	bne.n	2e0f6 <readPacket+0xca>
        goto exit;

    len = 1;
   2e072:	2301      	movs	r3, #1
   2e074:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2e076:	683b      	ldr	r3, [r7, #0]
   2e078:	0018      	movs	r0, r3
   2e07a:	4b24      	ldr	r3, [pc, #144]	; (2e10c <readPacket+0xe0>)
   2e07c:	4798      	blx	r3
   2e07e:	0002      	movs	r2, r0
   2e080:	2308      	movs	r3, #8
   2e082:	18f9      	adds	r1, r7, r3
   2e084:	687b      	ldr	r3, [r7, #4]
   2e086:	0018      	movs	r0, r3
   2e088:	4b21      	ldr	r3, [pc, #132]	; (2e110 <readPacket+0xe4>)
   2e08a:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2e08c:	687b      	ldr	r3, [r7, #4]
   2e08e:	695b      	ldr	r3, [r3, #20]
   2e090:	3301      	adds	r3, #1
   2e092:	68ba      	ldr	r2, [r7, #8]
   2e094:	0011      	movs	r1, r2
   2e096:	0018      	movs	r0, r3
   2e098:	4b1e      	ldr	r3, [pc, #120]	; (2e114 <readPacket+0xe8>)
   2e09a:	4798      	blx	r3
   2e09c:	0002      	movs	r2, r0
   2e09e:	693b      	ldr	r3, [r7, #16]
   2e0a0:	189b      	adds	r3, r3, r2
   2e0a2:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2e0a4:	68bb      	ldr	r3, [r7, #8]
   2e0a6:	2b00      	cmp	r3, #0
   2e0a8:	dd17      	ble.n	2e0da <readPacket+0xae>
   2e0aa:	687b      	ldr	r3, [r7, #4]
   2e0ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e0ae:	689c      	ldr	r4, [r3, #8]
   2e0b0:	687b      	ldr	r3, [r7, #4]
   2e0b2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e0b4:	687b      	ldr	r3, [r7, #4]
   2e0b6:	695a      	ldr	r2, [r3, #20]
   2e0b8:	693b      	ldr	r3, [r7, #16]
   2e0ba:	18d6      	adds	r6, r2, r3
   2e0bc:	68bb      	ldr	r3, [r7, #8]
   2e0be:	4698      	mov	r8, r3
   2e0c0:	683b      	ldr	r3, [r7, #0]
   2e0c2:	0018      	movs	r0, r3
   2e0c4:	4b11      	ldr	r3, [pc, #68]	; (2e10c <readPacket+0xe0>)
   2e0c6:	4798      	blx	r3
   2e0c8:	0003      	movs	r3, r0
   2e0ca:	4642      	mov	r2, r8
   2e0cc:	0031      	movs	r1, r6
   2e0ce:	0028      	movs	r0, r5
   2e0d0:	47a0      	blx	r4
   2e0d2:	0002      	movs	r2, r0
   2e0d4:	68bb      	ldr	r3, [r7, #8]
   2e0d6:	429a      	cmp	r2, r3
   2e0d8:	d10f      	bne.n	2e0fa <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2e0da:	687b      	ldr	r3, [r7, #4]
   2e0dc:	695b      	ldr	r3, [r3, #20]
   2e0de:	781a      	ldrb	r2, [r3, #0]
   2e0e0:	230c      	movs	r3, #12
   2e0e2:	18fb      	adds	r3, r7, r3
   2e0e4:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2e0e6:	230c      	movs	r3, #12
   2e0e8:	18fb      	adds	r3, r7, r3
   2e0ea:	781b      	ldrb	r3, [r3, #0]
   2e0ec:	061b      	lsls	r3, r3, #24
   2e0ee:	0f1b      	lsrs	r3, r3, #28
   2e0f0:	b2db      	uxtb	r3, r3
   2e0f2:	617b      	str	r3, [r7, #20]
   2e0f4:	e002      	b.n	2e0fc <readPacket+0xd0>
        goto exit;
   2e0f6:	46c0      	nop			; (mov r8, r8)
   2e0f8:	e000      	b.n	2e0fc <readPacket+0xd0>
        goto exit;
   2e0fa:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2e0fc:	697b      	ldr	r3, [r7, #20]
}
   2e0fe:	0018      	movs	r0, r3
   2e100:	46bd      	mov	sp, r7
   2e102:	b006      	add	sp, #24
   2e104:	bc04      	pop	{r2}
   2e106:	4690      	mov	r8, r2
   2e108:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e10a:	46c0      	nop			; (mov r8, r8)
   2e10c:	0002ecd1 	.word	0x0002ecd1
   2e110:	0002df99 	.word	0x0002df99
   2e114:	0002faa9 	.word	0x0002faa9

0002e118 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2e118:	b580      	push	{r7, lr}
   2e11a:	b086      	sub	sp, #24
   2e11c:	af00      	add	r7, sp, #0
   2e11e:	6078      	str	r0, [r7, #4]
   2e120:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2e122:	687b      	ldr	r3, [r7, #4]
   2e124:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2e126:	683b      	ldr	r3, [r7, #0]
   2e128:	689b      	ldr	r3, [r3, #8]
   2e12a:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2e12c:	683b      	ldr	r3, [r7, #0]
   2e12e:	685b      	ldr	r3, [r3, #4]
   2e130:	001a      	movs	r2, r3
   2e132:	693b      	ldr	r3, [r7, #16]
   2e134:	189b      	adds	r3, r3, r2
   2e136:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2e138:	e039      	b.n	2e1ae <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2e13a:	693b      	ldr	r3, [r7, #16]
   2e13c:	781b      	ldrb	r3, [r3, #0]
   2e13e:	2b2f      	cmp	r3, #47	; 0x2f
   2e140:	d103      	bne.n	2e14a <isTopicMatched+0x32>
   2e142:	697b      	ldr	r3, [r7, #20]
   2e144:	781b      	ldrb	r3, [r3, #0]
   2e146:	2b2f      	cmp	r3, #47	; 0x2f
   2e148:	d13a      	bne.n	2e1c0 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2e14a:	697b      	ldr	r3, [r7, #20]
   2e14c:	781b      	ldrb	r3, [r3, #0]
   2e14e:	2b2b      	cmp	r3, #43	; 0x2b
   2e150:	d009      	beq.n	2e166 <isTopicMatched+0x4e>
   2e152:	697b      	ldr	r3, [r7, #20]
   2e154:	781b      	ldrb	r3, [r3, #0]
   2e156:	2b23      	cmp	r3, #35	; 0x23
   2e158:	d005      	beq.n	2e166 <isTopicMatched+0x4e>
   2e15a:	697b      	ldr	r3, [r7, #20]
   2e15c:	781a      	ldrb	r2, [r3, #0]
   2e15e:	693b      	ldr	r3, [r7, #16]
   2e160:	781b      	ldrb	r3, [r3, #0]
   2e162:	429a      	cmp	r2, r3
   2e164:	d12e      	bne.n	2e1c4 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2e166:	697b      	ldr	r3, [r7, #20]
   2e168:	781b      	ldrb	r3, [r3, #0]
   2e16a:	2b2b      	cmp	r3, #43	; 0x2b
   2e16c:	d112      	bne.n	2e194 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2e16e:	693b      	ldr	r3, [r7, #16]
   2e170:	3301      	adds	r3, #1
   2e172:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e174:	e005      	b.n	2e182 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2e176:	693b      	ldr	r3, [r7, #16]
   2e178:	3301      	adds	r3, #1
   2e17a:	613b      	str	r3, [r7, #16]
   2e17c:	693b      	ldr	r3, [r7, #16]
   2e17e:	3301      	adds	r3, #1
   2e180:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2e182:	68fa      	ldr	r2, [r7, #12]
   2e184:	68bb      	ldr	r3, [r7, #8]
   2e186:	429a      	cmp	r2, r3
   2e188:	d20b      	bcs.n	2e1a2 <isTopicMatched+0x8a>
   2e18a:	68fb      	ldr	r3, [r7, #12]
   2e18c:	781b      	ldrb	r3, [r3, #0]
   2e18e:	2b2f      	cmp	r3, #47	; 0x2f
   2e190:	d1f1      	bne.n	2e176 <isTopicMatched+0x5e>
   2e192:	e006      	b.n	2e1a2 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2e194:	697b      	ldr	r3, [r7, #20]
   2e196:	781b      	ldrb	r3, [r3, #0]
   2e198:	2b23      	cmp	r3, #35	; 0x23
   2e19a:	d102      	bne.n	2e1a2 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2e19c:	68bb      	ldr	r3, [r7, #8]
   2e19e:	3b01      	subs	r3, #1
   2e1a0:	613b      	str	r3, [r7, #16]
        curf++;
   2e1a2:	697b      	ldr	r3, [r7, #20]
   2e1a4:	3301      	adds	r3, #1
   2e1a6:	617b      	str	r3, [r7, #20]
        curn++;
   2e1a8:	693b      	ldr	r3, [r7, #16]
   2e1aa:	3301      	adds	r3, #1
   2e1ac:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2e1ae:	697b      	ldr	r3, [r7, #20]
   2e1b0:	781b      	ldrb	r3, [r3, #0]
   2e1b2:	2b00      	cmp	r3, #0
   2e1b4:	d007      	beq.n	2e1c6 <isTopicMatched+0xae>
   2e1b6:	693a      	ldr	r2, [r7, #16]
   2e1b8:	68bb      	ldr	r3, [r7, #8]
   2e1ba:	429a      	cmp	r2, r3
   2e1bc:	d3bd      	bcc.n	2e13a <isTopicMatched+0x22>
   2e1be:	e002      	b.n	2e1c6 <isTopicMatched+0xae>
            break;
   2e1c0:	46c0      	nop			; (mov r8, r8)
   2e1c2:	e000      	b.n	2e1c6 <isTopicMatched+0xae>
            break;
   2e1c4:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2e1c6:	693a      	ldr	r2, [r7, #16]
   2e1c8:	68bb      	ldr	r3, [r7, #8]
   2e1ca:	429a      	cmp	r2, r3
   2e1cc:	d105      	bne.n	2e1da <isTopicMatched+0xc2>
   2e1ce:	697b      	ldr	r3, [r7, #20]
   2e1d0:	781b      	ldrb	r3, [r3, #0]
   2e1d2:	2b00      	cmp	r3, #0
   2e1d4:	d101      	bne.n	2e1da <isTopicMatched+0xc2>
   2e1d6:	2301      	movs	r3, #1
   2e1d8:	e000      	b.n	2e1dc <isTopicMatched+0xc4>
   2e1da:	2300      	movs	r3, #0
   2e1dc:	b2db      	uxtb	r3, r3
}
   2e1de:	0018      	movs	r0, r3
   2e1e0:	46bd      	mov	sp, r7
   2e1e2:	b006      	add	sp, #24
   2e1e4:	bd80      	pop	{r7, pc}
	...

0002e1e8 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2e1e8:	b580      	push	{r7, lr}
   2e1ea:	b08a      	sub	sp, #40	; 0x28
   2e1ec:	af00      	add	r7, sp, #0
   2e1ee:	60f8      	str	r0, [r7, #12]
   2e1f0:	60b9      	str	r1, [r7, #8]
   2e1f2:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2e1f4:	2301      	movs	r3, #1
   2e1f6:	425b      	negs	r3, r3
   2e1f8:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e1fa:	2300      	movs	r3, #0
   2e1fc:	627b      	str	r3, [r7, #36]	; 0x24
   2e1fe:	e044      	b.n	2e28a <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e200:	68fa      	ldr	r2, [r7, #12]
   2e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e204:	3304      	adds	r3, #4
   2e206:	00db      	lsls	r3, r3, #3
   2e208:	18d3      	adds	r3, r2, r3
   2e20a:	3304      	adds	r3, #4
   2e20c:	681b      	ldr	r3, [r3, #0]
   2e20e:	2b00      	cmp	r3, #0
   2e210:	d038      	beq.n	2e284 <deliverMessage+0x9c>
   2e212:	68fa      	ldr	r2, [r7, #12]
   2e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e216:	3304      	adds	r3, #4
   2e218:	00db      	lsls	r3, r3, #3
   2e21a:	18d3      	adds	r3, r2, r3
   2e21c:	3304      	adds	r3, #4
   2e21e:	681a      	ldr	r2, [r3, #0]
   2e220:	68bb      	ldr	r3, [r7, #8]
   2e222:	0011      	movs	r1, r2
   2e224:	0018      	movs	r0, r3
   2e226:	4b28      	ldr	r3, [pc, #160]	; (2e2c8 <deliverMessage+0xe0>)
   2e228:	4798      	blx	r3
   2e22a:	1e03      	subs	r3, r0, #0
   2e22c:	d10d      	bne.n	2e24a <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2e22e:	68fa      	ldr	r2, [r7, #12]
   2e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e232:	3304      	adds	r3, #4
   2e234:	00db      	lsls	r3, r3, #3
   2e236:	18d3      	adds	r3, r2, r3
   2e238:	3304      	adds	r3, #4
   2e23a:	681b      	ldr	r3, [r3, #0]
   2e23c:	68ba      	ldr	r2, [r7, #8]
   2e23e:	0011      	movs	r1, r2
   2e240:	0018      	movs	r0, r3
   2e242:	4b22      	ldr	r3, [pc, #136]	; (2e2cc <deliverMessage+0xe4>)
   2e244:	4798      	blx	r3
   2e246:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2e248:	d01c      	beq.n	2e284 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2e24a:	68fa      	ldr	r2, [r7, #12]
   2e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e24e:	3304      	adds	r3, #4
   2e250:	00db      	lsls	r3, r3, #3
   2e252:	18d3      	adds	r3, r2, r3
   2e254:	3308      	adds	r3, #8
   2e256:	681b      	ldr	r3, [r3, #0]
   2e258:	2b00      	cmp	r3, #0
   2e25a:	d013      	beq.n	2e284 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2e25c:	687a      	ldr	r2, [r7, #4]
   2e25e:	68b9      	ldr	r1, [r7, #8]
   2e260:	2318      	movs	r3, #24
   2e262:	18fb      	adds	r3, r7, r3
   2e264:	0018      	movs	r0, r3
   2e266:	4b1a      	ldr	r3, [pc, #104]	; (2e2d0 <deliverMessage+0xe8>)
   2e268:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2e26a:	68fa      	ldr	r2, [r7, #12]
   2e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e26e:	3304      	adds	r3, #4
   2e270:	00db      	lsls	r3, r3, #3
   2e272:	18d3      	adds	r3, r2, r3
   2e274:	3308      	adds	r3, #8
   2e276:	681b      	ldr	r3, [r3, #0]
   2e278:	2218      	movs	r2, #24
   2e27a:	18ba      	adds	r2, r7, r2
   2e27c:	0010      	movs	r0, r2
   2e27e:	4798      	blx	r3
                rc = SUCCESS;
   2e280:	2300      	movs	r3, #0
   2e282:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e286:	3301      	adds	r3, #1
   2e288:	627b      	str	r3, [r7, #36]	; 0x24
   2e28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e28c:	2b04      	cmp	r3, #4
   2e28e:	ddb7      	ble.n	2e200 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2e290:	6a3b      	ldr	r3, [r7, #32]
   2e292:	3301      	adds	r3, #1
   2e294:	d112      	bne.n	2e2bc <deliverMessage+0xd4>
   2e296:	68fb      	ldr	r3, [r7, #12]
   2e298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e29a:	2b00      	cmp	r3, #0
   2e29c:	d00e      	beq.n	2e2bc <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2e29e:	687a      	ldr	r2, [r7, #4]
   2e2a0:	68b9      	ldr	r1, [r7, #8]
   2e2a2:	2310      	movs	r3, #16
   2e2a4:	18fb      	adds	r3, r7, r3
   2e2a6:	0018      	movs	r0, r3
   2e2a8:	4b09      	ldr	r3, [pc, #36]	; (2e2d0 <deliverMessage+0xe8>)
   2e2aa:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2e2ac:	68fb      	ldr	r3, [r7, #12]
   2e2ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e2b0:	2210      	movs	r2, #16
   2e2b2:	18ba      	adds	r2, r7, r2
   2e2b4:	0010      	movs	r0, r2
   2e2b6:	4798      	blx	r3
        rc = SUCCESS;
   2e2b8:	2300      	movs	r3, #0
   2e2ba:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2e2bc:	6a3b      	ldr	r3, [r7, #32]
}
   2e2be:	0018      	movs	r0, r3
   2e2c0:	46bd      	mov	sp, r7
   2e2c2:	b00a      	add	sp, #40	; 0x28
   2e2c4:	bd80      	pop	{r7, pc}
   2e2c6:	46c0      	nop			; (mov r8, r8)
   2e2c8:	0002febd 	.word	0x0002febd
   2e2cc:	0002e119 	.word	0x0002e119
   2e2d0:	0002de21 	.word	0x0002de21

0002e2d4 <keepalive>:


int keepalive(MQTTClient* c)
{
   2e2d4:	b580      	push	{r7, lr}
   2e2d6:	b088      	sub	sp, #32
   2e2d8:	af00      	add	r7, sp, #0
   2e2da:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2e2dc:	2301      	movs	r3, #1
   2e2de:	425b      	negs	r3, r3
   2e2e0:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2e2e2:	687b      	ldr	r3, [r7, #4]
   2e2e4:	699b      	ldr	r3, [r3, #24]
   2e2e6:	2b00      	cmp	r3, #0
   2e2e8:	d102      	bne.n	2e2f0 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2e2ea:	2300      	movs	r3, #0
   2e2ec:	61fb      	str	r3, [r7, #28]
        goto exit;
   2e2ee:	e033      	b.n	2e358 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2e2f0:	687b      	ldr	r3, [r7, #4]
   2e2f2:	3354      	adds	r3, #84	; 0x54
   2e2f4:	0018      	movs	r0, r3
   2e2f6:	4b1b      	ldr	r3, [pc, #108]	; (2e364 <keepalive+0x90>)
   2e2f8:	4798      	blx	r3
   2e2fa:	1e03      	subs	r3, r0, #0
   2e2fc:	d02c      	beq.n	2e358 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2e2fe:	687b      	ldr	r3, [r7, #4]
   2e300:	7f1b      	ldrb	r3, [r3, #28]
   2e302:	2b00      	cmp	r3, #0
   2e304:	d128      	bne.n	2e358 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2e306:	230c      	movs	r3, #12
   2e308:	18fb      	adds	r3, r7, r3
   2e30a:	0018      	movs	r0, r3
   2e30c:	4b16      	ldr	r3, [pc, #88]	; (2e368 <keepalive+0x94>)
   2e30e:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2e310:	23fa      	movs	r3, #250	; 0xfa
   2e312:	009a      	lsls	r2, r3, #2
   2e314:	230c      	movs	r3, #12
   2e316:	18fb      	adds	r3, r7, r3
   2e318:	0011      	movs	r1, r2
   2e31a:	0018      	movs	r0, r3
   2e31c:	4b13      	ldr	r3, [pc, #76]	; (2e36c <keepalive+0x98>)
   2e31e:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2e320:	687b      	ldr	r3, [r7, #4]
   2e322:	691a      	ldr	r2, [r3, #16]
   2e324:	687b      	ldr	r3, [r7, #4]
   2e326:	689b      	ldr	r3, [r3, #8]
   2e328:	0019      	movs	r1, r3
   2e32a:	0010      	movs	r0, r2
   2e32c:	4b10      	ldr	r3, [pc, #64]	; (2e370 <keepalive+0x9c>)
   2e32e:	4798      	blx	r3
   2e330:	0003      	movs	r3, r0
   2e332:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2e334:	69bb      	ldr	r3, [r7, #24]
   2e336:	2b00      	cmp	r3, #0
   2e338:	dd0e      	ble.n	2e358 <keepalive+0x84>
   2e33a:	230c      	movs	r3, #12
   2e33c:	18fa      	adds	r2, r7, r3
   2e33e:	69b9      	ldr	r1, [r7, #24]
   2e340:	687b      	ldr	r3, [r7, #4]
   2e342:	0018      	movs	r0, r3
   2e344:	4b0b      	ldr	r3, [pc, #44]	; (2e374 <keepalive+0xa0>)
   2e346:	4798      	blx	r3
   2e348:	0003      	movs	r3, r0
   2e34a:	61fb      	str	r3, [r7, #28]
   2e34c:	69fb      	ldr	r3, [r7, #28]
   2e34e:	2b00      	cmp	r3, #0
   2e350:	d102      	bne.n	2e358 <keepalive+0x84>
                c->ping_outstanding = 1;
   2e352:	687b      	ldr	r3, [r7, #4]
   2e354:	2201      	movs	r2, #1
   2e356:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2e358:	69fb      	ldr	r3, [r7, #28]
}
   2e35a:	0018      	movs	r0, r3
   2e35c:	46bd      	mov	sp, r7
   2e35e:	b008      	add	sp, #32
   2e360:	bd80      	pop	{r7, pc}
   2e362:	46c0      	nop			; (mov r8, r8)
   2e364:	0002ec55 	.word	0x0002ec55
   2e368:	0002ecf9 	.word	0x0002ecf9
   2e36c:	0002ec81 	.word	0x0002ec81
   2e370:	0002f8cd 	.word	0x0002f8cd
   2e374:	0002de71 	.word	0x0002de71

0002e378 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2e378:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e37a:	b095      	sub	sp, #84	; 0x54
   2e37c:	af06      	add	r7, sp, #24
   2e37e:	6078      	str	r0, [r7, #4]
   2e380:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2e382:	683a      	ldr	r2, [r7, #0]
   2e384:	687b      	ldr	r3, [r7, #4]
   2e386:	0011      	movs	r1, r2
   2e388:	0018      	movs	r0, r3
   2e38a:	4b70      	ldr	r3, [pc, #448]	; (2e54c <cycle+0x1d4>)
   2e38c:	4798      	blx	r3
   2e38e:	0002      	movs	r2, r0
   2e390:	232e      	movs	r3, #46	; 0x2e
   2e392:	18fb      	adds	r3, r7, r3
   2e394:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2e396:	2300      	movs	r3, #0
   2e398:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2e39a:	2300      	movs	r3, #0
   2e39c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2e39e:	232e      	movs	r3, #46	; 0x2e
   2e3a0:	18fb      	adds	r3, r7, r3
   2e3a2:	881b      	ldrh	r3, [r3, #0]
   2e3a4:	2b0d      	cmp	r3, #13
   2e3a6:	d900      	bls.n	2e3aa <cycle+0x32>
   2e3a8:	e0bd      	b.n	2e526 <cycle+0x1ae>
   2e3aa:	009a      	lsls	r2, r3, #2
   2e3ac:	4b68      	ldr	r3, [pc, #416]	; (2e550 <cycle+0x1d8>)
   2e3ae:	18d3      	adds	r3, r2, r3
   2e3b0:	681b      	ldr	r3, [r3, #0]
   2e3b2:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e3b4:	687b      	ldr	r3, [r7, #4]
   2e3b6:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2e3b8:	687b      	ldr	r3, [r7, #4]
   2e3ba:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2e3bc:	001e      	movs	r6, r3
   2e3be:	2310      	movs	r3, #16
   2e3c0:	18fb      	adds	r3, r7, r3
   2e3c2:	1d1d      	adds	r5, r3, #4
   2e3c4:	2310      	movs	r3, #16
   2e3c6:	18fb      	adds	r3, r7, r3
   2e3c8:	1c5c      	adds	r4, r3, #1
   2e3ca:	230c      	movs	r3, #12
   2e3cc:	18f9      	adds	r1, r7, r3
   2e3ce:	2310      	movs	r3, #16
   2e3d0:	18fb      	adds	r3, r7, r3
   2e3d2:	1c98      	adds	r0, r3, #2
   2e3d4:	9604      	str	r6, [sp, #16]
   2e3d6:	9203      	str	r2, [sp, #12]
   2e3d8:	2310      	movs	r3, #16
   2e3da:	18fb      	adds	r3, r7, r3
   2e3dc:	330c      	adds	r3, #12
   2e3de:	9302      	str	r3, [sp, #8]
   2e3e0:	2310      	movs	r3, #16
   2e3e2:	18fb      	adds	r3, r7, r3
   2e3e4:	3308      	adds	r3, #8
   2e3e6:	9301      	str	r3, [sp, #4]
   2e3e8:	2320      	movs	r3, #32
   2e3ea:	18fb      	adds	r3, r7, r3
   2e3ec:	9300      	str	r3, [sp, #0]
   2e3ee:	002b      	movs	r3, r5
   2e3f0:	0022      	movs	r2, r4
   2e3f2:	4c58      	ldr	r4, [pc, #352]	; (2e554 <cycle+0x1dc>)
   2e3f4:	47a0      	blx	r4
   2e3f6:	0003      	movs	r3, r0
   2e3f8:	2b01      	cmp	r3, #1
   2e3fa:	d000      	beq.n	2e3fe <cycle+0x86>
   2e3fc:	e098      	b.n	2e530 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2e3fe:	68fb      	ldr	r3, [r7, #12]
   2e400:	b2da      	uxtb	r2, r3
   2e402:	2310      	movs	r3, #16
   2e404:	18fb      	adds	r3, r7, r3
   2e406:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2e408:	2310      	movs	r3, #16
   2e40a:	18fa      	adds	r2, r7, r3
   2e40c:	2320      	movs	r3, #32
   2e40e:	18f9      	adds	r1, r7, r3
   2e410:	687b      	ldr	r3, [r7, #4]
   2e412:	0018      	movs	r0, r3
   2e414:	4b50      	ldr	r3, [pc, #320]	; (2e558 <cycle+0x1e0>)
   2e416:	4798      	blx	r3
            if (msg.qos != QOS0)
   2e418:	2310      	movs	r3, #16
   2e41a:	18fb      	adds	r3, r7, r3
   2e41c:	781b      	ldrb	r3, [r3, #0]
   2e41e:	2b00      	cmp	r3, #0
   2e420:	d100      	bne.n	2e424 <cycle+0xac>
   2e422:	e07d      	b.n	2e520 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2e424:	2310      	movs	r3, #16
   2e426:	18fb      	adds	r3, r7, r3
   2e428:	781b      	ldrb	r3, [r3, #0]
   2e42a:	2b01      	cmp	r3, #1
   2e42c:	d10f      	bne.n	2e44e <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2e42e:	687b      	ldr	r3, [r7, #4]
   2e430:	6918      	ldr	r0, [r3, #16]
   2e432:	687b      	ldr	r3, [r7, #4]
   2e434:	689b      	ldr	r3, [r3, #8]
   2e436:	0019      	movs	r1, r3
   2e438:	2310      	movs	r3, #16
   2e43a:	18fb      	adds	r3, r7, r3
   2e43c:	889b      	ldrh	r3, [r3, #4]
   2e43e:	9300      	str	r3, [sp, #0]
   2e440:	2300      	movs	r3, #0
   2e442:	2204      	movs	r2, #4
   2e444:	4c45      	ldr	r4, [pc, #276]	; (2e55c <cycle+0x1e4>)
   2e446:	47a0      	blx	r4
   2e448:	0003      	movs	r3, r0
   2e44a:	637b      	str	r3, [r7, #52]	; 0x34
   2e44c:	e013      	b.n	2e476 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2e44e:	2310      	movs	r3, #16
   2e450:	18fb      	adds	r3, r7, r3
   2e452:	781b      	ldrb	r3, [r3, #0]
   2e454:	2b02      	cmp	r3, #2
   2e456:	d10e      	bne.n	2e476 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2e458:	687b      	ldr	r3, [r7, #4]
   2e45a:	6918      	ldr	r0, [r3, #16]
   2e45c:	687b      	ldr	r3, [r7, #4]
   2e45e:	689b      	ldr	r3, [r3, #8]
   2e460:	0019      	movs	r1, r3
   2e462:	2310      	movs	r3, #16
   2e464:	18fb      	adds	r3, r7, r3
   2e466:	889b      	ldrh	r3, [r3, #4]
   2e468:	9300      	str	r3, [sp, #0]
   2e46a:	2300      	movs	r3, #0
   2e46c:	2205      	movs	r2, #5
   2e46e:	4c3b      	ldr	r4, [pc, #236]	; (2e55c <cycle+0x1e4>)
   2e470:	47a0      	blx	r4
   2e472:	0003      	movs	r3, r0
   2e474:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2e476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e478:	2b00      	cmp	r3, #0
   2e47a:	dc03      	bgt.n	2e484 <cycle+0x10c>
                    rc = FAILURE;
   2e47c:	2301      	movs	r3, #1
   2e47e:	425b      	negs	r3, r3
   2e480:	633b      	str	r3, [r7, #48]	; 0x30
   2e482:	e007      	b.n	2e494 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2e484:	683a      	ldr	r2, [r7, #0]
   2e486:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e488:	687b      	ldr	r3, [r7, #4]
   2e48a:	0018      	movs	r0, r3
   2e48c:	4b34      	ldr	r3, [pc, #208]	; (2e560 <cycle+0x1e8>)
   2e48e:	4798      	blx	r3
   2e490:	0003      	movs	r3, r0
   2e492:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2e494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e496:	3301      	adds	r3, #1
   2e498:	d142      	bne.n	2e520 <cycle+0x1a8>
                    goto exit; // there was a problem
   2e49a:	46c0      	nop			; (mov r8, r8)
   2e49c:	e049      	b.n	2e532 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e49e:	687b      	ldr	r3, [r7, #4]
   2e4a0:	695c      	ldr	r4, [r3, #20]
   2e4a2:	687b      	ldr	r3, [r7, #4]
   2e4a4:	68db      	ldr	r3, [r3, #12]
   2e4a6:	220a      	movs	r2, #10
   2e4a8:	18ba      	adds	r2, r7, r2
   2e4aa:	2109      	movs	r1, #9
   2e4ac:	1879      	adds	r1, r7, r1
   2e4ae:	2008      	movs	r0, #8
   2e4b0:	1838      	adds	r0, r7, r0
   2e4b2:	9300      	str	r3, [sp, #0]
   2e4b4:	0023      	movs	r3, r4
   2e4b6:	4c2b      	ldr	r4, [pc, #172]	; (2e564 <cycle+0x1ec>)
   2e4b8:	47a0      	blx	r4
   2e4ba:	0003      	movs	r3, r0
   2e4bc:	2b01      	cmp	r3, #1
   2e4be:	d003      	beq.n	2e4c8 <cycle+0x150>
                rc = FAILURE;
   2e4c0:	2301      	movs	r3, #1
   2e4c2:	425b      	negs	r3, r3
   2e4c4:	633b      	str	r3, [r7, #48]	; 0x30
   2e4c6:	e023      	b.n	2e510 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2e4c8:	687b      	ldr	r3, [r7, #4]
   2e4ca:	6918      	ldr	r0, [r3, #16]
   2e4cc:	687b      	ldr	r3, [r7, #4]
   2e4ce:	689b      	ldr	r3, [r3, #8]
   2e4d0:	0019      	movs	r1, r3
   2e4d2:	230a      	movs	r3, #10
   2e4d4:	18fb      	adds	r3, r7, r3
   2e4d6:	881b      	ldrh	r3, [r3, #0]
   2e4d8:	9300      	str	r3, [sp, #0]
   2e4da:	2300      	movs	r3, #0
   2e4dc:	2206      	movs	r2, #6
   2e4de:	4c1f      	ldr	r4, [pc, #124]	; (2e55c <cycle+0x1e4>)
   2e4e0:	47a0      	blx	r4
   2e4e2:	0003      	movs	r3, r0
   2e4e4:	637b      	str	r3, [r7, #52]	; 0x34
   2e4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e4e8:	2b00      	cmp	r3, #0
   2e4ea:	dc03      	bgt.n	2e4f4 <cycle+0x17c>
                rc = FAILURE;
   2e4ec:	2301      	movs	r3, #1
   2e4ee:	425b      	negs	r3, r3
   2e4f0:	633b      	str	r3, [r7, #48]	; 0x30
   2e4f2:	e00d      	b.n	2e510 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2e4f4:	683a      	ldr	r2, [r7, #0]
   2e4f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2e4f8:	687b      	ldr	r3, [r7, #4]
   2e4fa:	0018      	movs	r0, r3
   2e4fc:	4b18      	ldr	r3, [pc, #96]	; (2e560 <cycle+0x1e8>)
   2e4fe:	4798      	blx	r3
   2e500:	0003      	movs	r3, r0
   2e502:	633b      	str	r3, [r7, #48]	; 0x30
   2e504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e506:	2b00      	cmp	r3, #0
   2e508:	d002      	beq.n	2e510 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2e50a:	2301      	movs	r3, #1
   2e50c:	425b      	negs	r3, r3
   2e50e:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2e510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e512:	3301      	adds	r3, #1
   2e514:	d106      	bne.n	2e524 <cycle+0x1ac>
                goto exit; // there was a problem
   2e516:	e00c      	b.n	2e532 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2e518:	687b      	ldr	r3, [r7, #4]
   2e51a:	2200      	movs	r2, #0
   2e51c:	771a      	strb	r2, [r3, #28]
            break;
   2e51e:	e002      	b.n	2e526 <cycle+0x1ae>
            break;
   2e520:	46c0      	nop			; (mov r8, r8)
   2e522:	e000      	b.n	2e526 <cycle+0x1ae>
            break;
   2e524:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2e526:	687b      	ldr	r3, [r7, #4]
   2e528:	0018      	movs	r0, r3
   2e52a:	4b0f      	ldr	r3, [pc, #60]	; (2e568 <cycle+0x1f0>)
   2e52c:	4798      	blx	r3
   2e52e:	e000      	b.n	2e532 <cycle+0x1ba>
                goto exit;
   2e530:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2e532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e534:	2b00      	cmp	r3, #0
   2e536:	d103      	bne.n	2e540 <cycle+0x1c8>
        rc = packet_type;
   2e538:	232e      	movs	r3, #46	; 0x2e
   2e53a:	18fb      	adds	r3, r7, r3
   2e53c:	881b      	ldrh	r3, [r3, #0]
   2e53e:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2e540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2e542:	0018      	movs	r0, r3
   2e544:	46bd      	mov	sp, r7
   2e546:	b00f      	add	sp, #60	; 0x3c
   2e548:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e54a:	46c0      	nop			; (mov r8, r8)
   2e54c:	0002e02d 	.word	0x0002e02d
   2e550:	00039380 	.word	0x00039380
   2e554:	0002f8f1 	.word	0x0002f8f1
   2e558:	0002e1e9 	.word	0x0002e1e9
   2e55c:	000300e9 	.word	0x000300e9
   2e560:	0002de71 	.word	0x0002de71
   2e564:	0002f9f5 	.word	0x0002f9f5
   2e568:	0002e2d5 	.word	0x0002e2d5

0002e56c <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2e56c:	b580      	push	{r7, lr}
   2e56e:	b086      	sub	sp, #24
   2e570:	af00      	add	r7, sp, #0
   2e572:	6078      	str	r0, [r7, #4]
   2e574:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2e576:	2300      	movs	r3, #0
   2e578:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2e57a:	2308      	movs	r3, #8
   2e57c:	18fb      	adds	r3, r7, r3
   2e57e:	0018      	movs	r0, r3
   2e580:	4b11      	ldr	r3, [pc, #68]	; (2e5c8 <MQTTYield+0x5c>)
   2e582:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2e584:	683a      	ldr	r2, [r7, #0]
   2e586:	2308      	movs	r3, #8
   2e588:	18fb      	adds	r3, r7, r3
   2e58a:	0011      	movs	r1, r2
   2e58c:	0018      	movs	r0, r3
   2e58e:	4b0f      	ldr	r3, [pc, #60]	; (2e5cc <MQTTYield+0x60>)
   2e590:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2e592:	2308      	movs	r3, #8
   2e594:	18fa      	adds	r2, r7, r3
   2e596:	687b      	ldr	r3, [r7, #4]
   2e598:	0011      	movs	r1, r2
   2e59a:	0018      	movs	r0, r3
   2e59c:	4b0c      	ldr	r3, [pc, #48]	; (2e5d0 <MQTTYield+0x64>)
   2e59e:	4798      	blx	r3
   2e5a0:	0003      	movs	r3, r0
   2e5a2:	3301      	adds	r3, #1
   2e5a4:	d103      	bne.n	2e5ae <MQTTYield+0x42>
        {
            rc = FAILURE;
   2e5a6:	2301      	movs	r3, #1
   2e5a8:	425b      	negs	r3, r3
   2e5aa:	617b      	str	r3, [r7, #20]
            break;
   2e5ac:	e006      	b.n	2e5bc <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2e5ae:	2308      	movs	r3, #8
   2e5b0:	18fb      	adds	r3, r7, r3
   2e5b2:	0018      	movs	r0, r3
   2e5b4:	4b07      	ldr	r3, [pc, #28]	; (2e5d4 <MQTTYield+0x68>)
   2e5b6:	4798      	blx	r3
   2e5b8:	1e03      	subs	r3, r0, #0
   2e5ba:	d0ea      	beq.n	2e592 <MQTTYield+0x26>
        
    return rc;
   2e5bc:	697b      	ldr	r3, [r7, #20]
}
   2e5be:	0018      	movs	r0, r3
   2e5c0:	46bd      	mov	sp, r7
   2e5c2:	b006      	add	sp, #24
   2e5c4:	bd80      	pop	{r7, pc}
   2e5c6:	46c0      	nop			; (mov r8, r8)
   2e5c8:	0002ecf9 	.word	0x0002ecf9
   2e5cc:	0002ec81 	.word	0x0002ec81
   2e5d0:	0002e379 	.word	0x0002e379
   2e5d4:	0002ec55 	.word	0x0002ec55

0002e5d8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2e5d8:	b580      	push	{r7, lr}
   2e5da:	b086      	sub	sp, #24
   2e5dc:	af00      	add	r7, sp, #0
   2e5de:	60f8      	str	r0, [r7, #12]
   2e5e0:	60b9      	str	r1, [r7, #8]
   2e5e2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e5e4:	2301      	movs	r3, #1
   2e5e6:	425b      	negs	r3, r3
   2e5e8:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2e5ea:	687b      	ldr	r3, [r7, #4]
   2e5ec:	0018      	movs	r0, r3
   2e5ee:	4b0b      	ldr	r3, [pc, #44]	; (2e61c <waitfor+0x44>)
   2e5f0:	4798      	blx	r3
   2e5f2:	1e03      	subs	r3, r0, #0
   2e5f4:	d10c      	bne.n	2e610 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2e5f6:	687a      	ldr	r2, [r7, #4]
   2e5f8:	68fb      	ldr	r3, [r7, #12]
   2e5fa:	0011      	movs	r1, r2
   2e5fc:	0018      	movs	r0, r3
   2e5fe:	4b08      	ldr	r3, [pc, #32]	; (2e620 <waitfor+0x48>)
   2e600:	4798      	blx	r3
   2e602:	0003      	movs	r3, r0
   2e604:	617b      	str	r3, [r7, #20]
   2e606:	697a      	ldr	r2, [r7, #20]
   2e608:	68bb      	ldr	r3, [r7, #8]
   2e60a:	429a      	cmp	r2, r3
   2e60c:	d1ed      	bne.n	2e5ea <waitfor+0x12>
   2e60e:	e000      	b.n	2e612 <waitfor+0x3a>
            break; // we timed out
   2e610:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2e612:	697b      	ldr	r3, [r7, #20]
}
   2e614:	0018      	movs	r0, r3
   2e616:	46bd      	mov	sp, r7
   2e618:	b006      	add	sp, #24
   2e61a:	bd80      	pop	{r7, pc}
   2e61c:	0002ec55 	.word	0x0002ec55
   2e620:	0002e379 	.word	0x0002e379

0002e624 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2e624:	b590      	push	{r4, r7, lr}
   2e626:	b09f      	sub	sp, #124	; 0x7c
   2e628:	af00      	add	r7, sp, #0
   2e62a:	6078      	str	r0, [r7, #4]
   2e62c:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2e62e:	2301      	movs	r3, #1
   2e630:	425b      	negs	r3, r3
   2e632:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2e634:	230c      	movs	r3, #12
   2e636:	18fa      	adds	r2, r7, r3
   2e638:	4b41      	ldr	r3, [pc, #260]	; (2e740 <MQTTConnect+0x11c>)
   2e63a:	0010      	movs	r0, r2
   2e63c:	0019      	movs	r1, r3
   2e63e:	2358      	movs	r3, #88	; 0x58
   2e640:	001a      	movs	r2, r3
   2e642:	4b40      	ldr	r3, [pc, #256]	; (2e744 <MQTTConnect+0x120>)
   2e644:	4798      	blx	r3
    int len = 0;
   2e646:	2300      	movs	r3, #0
   2e648:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2e64a:	687b      	ldr	r3, [r7, #4]
   2e64c:	6a1b      	ldr	r3, [r3, #32]
   2e64e:	2b00      	cmp	r3, #0
   2e650:	d166      	bne.n	2e720 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2e652:	2364      	movs	r3, #100	; 0x64
   2e654:	18fb      	adds	r3, r7, r3
   2e656:	0018      	movs	r0, r3
   2e658:	4b3b      	ldr	r3, [pc, #236]	; (2e748 <MQTTConnect+0x124>)
   2e65a:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2e65c:	687b      	ldr	r3, [r7, #4]
   2e65e:	685a      	ldr	r2, [r3, #4]
   2e660:	2364      	movs	r3, #100	; 0x64
   2e662:	18fb      	adds	r3, r7, r3
   2e664:	0011      	movs	r1, r2
   2e666:	0018      	movs	r0, r3
   2e668:	4b38      	ldr	r3, [pc, #224]	; (2e74c <MQTTConnect+0x128>)
   2e66a:	4798      	blx	r3

    if (options == 0)
   2e66c:	683b      	ldr	r3, [r7, #0]
   2e66e:	2b00      	cmp	r3, #0
   2e670:	d102      	bne.n	2e678 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2e672:	230c      	movs	r3, #12
   2e674:	18fb      	adds	r3, r7, r3
   2e676:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2e678:	683b      	ldr	r3, [r7, #0]
   2e67a:	8b1b      	ldrh	r3, [r3, #24]
   2e67c:	001a      	movs	r2, r3
   2e67e:	687b      	ldr	r3, [r7, #4]
   2e680:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2e682:	687b      	ldr	r3, [r7, #4]
   2e684:	3354      	adds	r3, #84	; 0x54
   2e686:	001a      	movs	r2, r3
   2e688:	687b      	ldr	r3, [r7, #4]
   2e68a:	699b      	ldr	r3, [r3, #24]
   2e68c:	0019      	movs	r1, r3
   2e68e:	0010      	movs	r0, r2
   2e690:	4b2f      	ldr	r3, [pc, #188]	; (2e750 <MQTTConnect+0x12c>)
   2e692:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2e694:	687b      	ldr	r3, [r7, #4]
   2e696:	6918      	ldr	r0, [r3, #16]
   2e698:	687b      	ldr	r3, [r7, #4]
   2e69a:	689b      	ldr	r3, [r3, #8]
   2e69c:	0019      	movs	r1, r3
   2e69e:	683b      	ldr	r3, [r7, #0]
   2e6a0:	001a      	movs	r2, r3
   2e6a2:	4b2c      	ldr	r3, [pc, #176]	; (2e754 <MQTTConnect+0x130>)
   2e6a4:	4798      	blx	r3
   2e6a6:	0003      	movs	r3, r0
   2e6a8:	673b      	str	r3, [r7, #112]	; 0x70
   2e6aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2e6ac:	2b00      	cmp	r3, #0
   2e6ae:	dd39      	ble.n	2e724 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2e6b0:	2364      	movs	r3, #100	; 0x64
   2e6b2:	18fa      	adds	r2, r7, r3
   2e6b4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2e6b6:	687b      	ldr	r3, [r7, #4]
   2e6b8:	0018      	movs	r0, r3
   2e6ba:	4b27      	ldr	r3, [pc, #156]	; (2e758 <MQTTConnect+0x134>)
   2e6bc:	4798      	blx	r3
   2e6be:	0003      	movs	r3, r0
   2e6c0:	677b      	str	r3, [r7, #116]	; 0x74
   2e6c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e6c4:	2b00      	cmp	r3, #0
   2e6c6:	d12f      	bne.n	2e728 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2e6c8:	2364      	movs	r3, #100	; 0x64
   2e6ca:	18fa      	adds	r2, r7, r3
   2e6cc:	687b      	ldr	r3, [r7, #4]
   2e6ce:	2102      	movs	r1, #2
   2e6d0:	0018      	movs	r0, r3
   2e6d2:	4b22      	ldr	r3, [pc, #136]	; (2e75c <MQTTConnect+0x138>)
   2e6d4:	4798      	blx	r3
   2e6d6:	0003      	movs	r3, r0
   2e6d8:	2b02      	cmp	r3, #2
   2e6da:	d11d      	bne.n	2e718 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2e6dc:	230b      	movs	r3, #11
   2e6de:	18fb      	adds	r3, r7, r3
   2e6e0:	22ff      	movs	r2, #255	; 0xff
   2e6e2:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2e6e4:	230a      	movs	r3, #10
   2e6e6:	18fb      	adds	r3, r7, r3
   2e6e8:	2200      	movs	r2, #0
   2e6ea:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2e6ec:	687b      	ldr	r3, [r7, #4]
   2e6ee:	695a      	ldr	r2, [r3, #20]
   2e6f0:	687b      	ldr	r3, [r7, #4]
   2e6f2:	68db      	ldr	r3, [r3, #12]
   2e6f4:	210b      	movs	r1, #11
   2e6f6:	1879      	adds	r1, r7, r1
   2e6f8:	200a      	movs	r0, #10
   2e6fa:	1838      	adds	r0, r7, r0
   2e6fc:	4c18      	ldr	r4, [pc, #96]	; (2e760 <MQTTConnect+0x13c>)
   2e6fe:	47a0      	blx	r4
   2e700:	0003      	movs	r3, r0
   2e702:	2b01      	cmp	r3, #1
   2e704:	d104      	bne.n	2e710 <MQTTConnect+0xec>
            rc = connack_rc;
   2e706:	230b      	movs	r3, #11
   2e708:	18fb      	adds	r3, r7, r3
   2e70a:	781b      	ldrb	r3, [r3, #0]
   2e70c:	677b      	str	r3, [r7, #116]	; 0x74
   2e70e:	e00c      	b.n	2e72a <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2e710:	2301      	movs	r3, #1
   2e712:	425b      	negs	r3, r3
   2e714:	677b      	str	r3, [r7, #116]	; 0x74
   2e716:	e008      	b.n	2e72a <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2e718:	2301      	movs	r3, #1
   2e71a:	425b      	negs	r3, r3
   2e71c:	677b      	str	r3, [r7, #116]	; 0x74
   2e71e:	e004      	b.n	2e72a <MQTTConnect+0x106>
		goto exit;
   2e720:	46c0      	nop			; (mov r8, r8)
   2e722:	e002      	b.n	2e72a <MQTTConnect+0x106>
        goto exit;
   2e724:	46c0      	nop			; (mov r8, r8)
   2e726:	e000      	b.n	2e72a <MQTTConnect+0x106>
        goto exit; // there was a problem
   2e728:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2e72a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2e72c:	2b00      	cmp	r3, #0
   2e72e:	d102      	bne.n	2e736 <MQTTConnect+0x112>
        c->isconnected = 1;
   2e730:	687b      	ldr	r3, [r7, #4]
   2e732:	2201      	movs	r2, #1
   2e734:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2e736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2e738:	0018      	movs	r0, r3
   2e73a:	46bd      	mov	sp, r7
   2e73c:	b01f      	add	sp, #124	; 0x7c
   2e73e:	bd90      	pop	{r4, r7, pc}
   2e740:	000393b8 	.word	0x000393b8
   2e744:	00034355 	.word	0x00034355
   2e748:	0002ecf9 	.word	0x0002ecf9
   2e74c:	0002ec81 	.word	0x0002ec81
   2e750:	0002eca9 	.word	0x0002eca9
   2e754:	0002f4d5 	.word	0x0002f4d5
   2e758:	0002de71 	.word	0x0002de71
   2e75c:	0002e5d9 	.word	0x0002e5d9
   2e760:	0002f751 	.word	0x0002f751

0002e764 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2e764:	b5b0      	push	{r4, r5, r7, lr}
   2e766:	b096      	sub	sp, #88	; 0x58
   2e768:	af04      	add	r7, sp, #16
   2e76a:	60f8      	str	r0, [r7, #12]
   2e76c:	60b9      	str	r1, [r7, #8]
   2e76e:	603b      	str	r3, [r7, #0]
   2e770:	1dfb      	adds	r3, r7, #7
   2e772:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2e774:	2301      	movs	r3, #1
   2e776:	425b      	negs	r3, r3
   2e778:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2e77a:	2300      	movs	r3, #0
   2e77c:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2e77e:	2324      	movs	r3, #36	; 0x24
   2e780:	18fb      	adds	r3, r7, r3
   2e782:	2200      	movs	r2, #0
   2e784:	601a      	str	r2, [r3, #0]
   2e786:	2324      	movs	r3, #36	; 0x24
   2e788:	18fb      	adds	r3, r7, r3
   2e78a:	2200      	movs	r2, #0
   2e78c:	605a      	str	r2, [r3, #4]
   2e78e:	2324      	movs	r3, #36	; 0x24
   2e790:	18fb      	adds	r3, r7, r3
   2e792:	2200      	movs	r2, #0
   2e794:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2e796:	1dfb      	adds	r3, r7, #7
   2e798:	781b      	ldrb	r3, [r3, #0]
   2e79a:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2e79c:	2324      	movs	r3, #36	; 0x24
   2e79e:	18fb      	adds	r3, r7, r3
   2e7a0:	68ba      	ldr	r2, [r7, #8]
   2e7a2:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e7a4:	68fb      	ldr	r3, [r7, #12]
   2e7a6:	6a1b      	ldr	r3, [r3, #32]
   2e7a8:	2b00      	cmp	r3, #0
   2e7aa:	d100      	bne.n	2e7ae <MQTTSubscribe+0x4a>
   2e7ac:	e088      	b.n	2e8c0 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2e7ae:	2330      	movs	r3, #48	; 0x30
   2e7b0:	18fb      	adds	r3, r7, r3
   2e7b2:	0018      	movs	r0, r3
   2e7b4:	4b47      	ldr	r3, [pc, #284]	; (2e8d4 <MQTTSubscribe+0x170>)
   2e7b6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e7b8:	68fb      	ldr	r3, [r7, #12]
   2e7ba:	685a      	ldr	r2, [r3, #4]
   2e7bc:	2330      	movs	r3, #48	; 0x30
   2e7be:	18fb      	adds	r3, r7, r3
   2e7c0:	0011      	movs	r1, r2
   2e7c2:	0018      	movs	r0, r3
   2e7c4:	4b44      	ldr	r3, [pc, #272]	; (2e8d8 <MQTTSubscribe+0x174>)
   2e7c6:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2e7c8:	68fb      	ldr	r3, [r7, #12]
   2e7ca:	691c      	ldr	r4, [r3, #16]
   2e7cc:	68fb      	ldr	r3, [r7, #12]
   2e7ce:	689b      	ldr	r3, [r3, #8]
   2e7d0:	001d      	movs	r5, r3
   2e7d2:	68fb      	ldr	r3, [r7, #12]
   2e7d4:	0018      	movs	r0, r3
   2e7d6:	4b41      	ldr	r3, [pc, #260]	; (2e8dc <MQTTSubscribe+0x178>)
   2e7d8:	4798      	blx	r3
   2e7da:	0003      	movs	r3, r0
   2e7dc:	b29a      	uxth	r2, r3
   2e7de:	2320      	movs	r3, #32
   2e7e0:	18fb      	adds	r3, r7, r3
   2e7e2:	9302      	str	r3, [sp, #8]
   2e7e4:	2324      	movs	r3, #36	; 0x24
   2e7e6:	18fb      	adds	r3, r7, r3
   2e7e8:	9301      	str	r3, [sp, #4]
   2e7ea:	2301      	movs	r3, #1
   2e7ec:	9300      	str	r3, [sp, #0]
   2e7ee:	0013      	movs	r3, r2
   2e7f0:	2200      	movs	r2, #0
   2e7f2:	0029      	movs	r1, r5
   2e7f4:	0020      	movs	r0, r4
   2e7f6:	4c3a      	ldr	r4, [pc, #232]	; (2e8e0 <MQTTSubscribe+0x17c>)
   2e7f8:	47a0      	blx	r4
   2e7fa:	0003      	movs	r3, r0
   2e7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2e7fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e800:	2b00      	cmp	r3, #0
   2e802:	dd5f      	ble.n	2e8c4 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e804:	2330      	movs	r3, #48	; 0x30
   2e806:	18fa      	adds	r2, r7, r3
   2e808:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2e80a:	68fb      	ldr	r3, [r7, #12]
   2e80c:	0018      	movs	r0, r3
   2e80e:	4b35      	ldr	r3, [pc, #212]	; (2e8e4 <MQTTSubscribe+0x180>)
   2e810:	4798      	blx	r3
   2e812:	0003      	movs	r3, r0
   2e814:	647b      	str	r3, [r7, #68]	; 0x44
   2e816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e818:	2b00      	cmp	r3, #0
   2e81a:	d155      	bne.n	2e8c8 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2e81c:	2330      	movs	r3, #48	; 0x30
   2e81e:	18fa      	adds	r2, r7, r3
   2e820:	68fb      	ldr	r3, [r7, #12]
   2e822:	2109      	movs	r1, #9
   2e824:	0018      	movs	r0, r3
   2e826:	4b30      	ldr	r3, [pc, #192]	; (2e8e8 <MQTTSubscribe+0x184>)
   2e828:	4798      	blx	r3
   2e82a:	0003      	movs	r3, r0
   2e82c:	2b09      	cmp	r3, #9
   2e82e:	d143      	bne.n	2e8b8 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2e830:	2300      	movs	r3, #0
   2e832:	61fb      	str	r3, [r7, #28]
   2e834:	2301      	movs	r3, #1
   2e836:	425b      	negs	r3, r3
   2e838:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2e83a:	68fb      	ldr	r3, [r7, #12]
   2e83c:	695a      	ldr	r2, [r3, #20]
   2e83e:	68fb      	ldr	r3, [r7, #12]
   2e840:	68db      	ldr	r3, [r3, #12]
   2e842:	001c      	movs	r4, r3
   2e844:	2318      	movs	r3, #24
   2e846:	18fb      	adds	r3, r7, r3
   2e848:	211c      	movs	r1, #28
   2e84a:	1879      	adds	r1, r7, r1
   2e84c:	2016      	movs	r0, #22
   2e84e:	1838      	adds	r0, r7, r0
   2e850:	9401      	str	r4, [sp, #4]
   2e852:	9200      	str	r2, [sp, #0]
   2e854:	000a      	movs	r2, r1
   2e856:	2101      	movs	r1, #1
   2e858:	4c24      	ldr	r4, [pc, #144]	; (2e8ec <MQTTSubscribe+0x188>)
   2e85a:	47a0      	blx	r4
   2e85c:	0003      	movs	r3, r0
   2e85e:	2b01      	cmp	r3, #1
   2e860:	d101      	bne.n	2e866 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2e862:	69bb      	ldr	r3, [r7, #24]
   2e864:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2e866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2e868:	2b80      	cmp	r3, #128	; 0x80
   2e86a:	d02e      	beq.n	2e8ca <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e86c:	2300      	movs	r3, #0
   2e86e:	643b      	str	r3, [r7, #64]	; 0x40
   2e870:	e01e      	b.n	2e8b0 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2e872:	68fa      	ldr	r2, [r7, #12]
   2e874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e876:	3304      	adds	r3, #4
   2e878:	00db      	lsls	r3, r3, #3
   2e87a:	18d3      	adds	r3, r2, r3
   2e87c:	3304      	adds	r3, #4
   2e87e:	681b      	ldr	r3, [r3, #0]
   2e880:	2b00      	cmp	r3, #0
   2e882:	d112      	bne.n	2e8aa <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2e884:	68fa      	ldr	r2, [r7, #12]
   2e886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e888:	3304      	adds	r3, #4
   2e88a:	00db      	lsls	r3, r3, #3
   2e88c:	18d3      	adds	r3, r2, r3
   2e88e:	3304      	adds	r3, #4
   2e890:	68ba      	ldr	r2, [r7, #8]
   2e892:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2e894:	68fa      	ldr	r2, [r7, #12]
   2e896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e898:	3304      	adds	r3, #4
   2e89a:	00db      	lsls	r3, r3, #3
   2e89c:	18d3      	adds	r3, r2, r3
   2e89e:	3308      	adds	r3, #8
   2e8a0:	683a      	ldr	r2, [r7, #0]
   2e8a2:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2e8a4:	2300      	movs	r3, #0
   2e8a6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2e8a8:	e00f      	b.n	2e8ca <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e8ac:	3301      	adds	r3, #1
   2e8ae:	643b      	str	r3, [r7, #64]	; 0x40
   2e8b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e8b2:	2b04      	cmp	r3, #4
   2e8b4:	dddd      	ble.n	2e872 <MQTTSubscribe+0x10e>
   2e8b6:	e008      	b.n	2e8ca <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2e8b8:	2301      	movs	r3, #1
   2e8ba:	425b      	negs	r3, r3
   2e8bc:	647b      	str	r3, [r7, #68]	; 0x44
   2e8be:	e004      	b.n	2e8ca <MQTTSubscribe+0x166>
		goto exit;
   2e8c0:	46c0      	nop			; (mov r8, r8)
   2e8c2:	e002      	b.n	2e8ca <MQTTSubscribe+0x166>
        goto exit;
   2e8c4:	46c0      	nop			; (mov r8, r8)
   2e8c6:	e000      	b.n	2e8ca <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2e8c8:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2e8ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2e8cc:	0018      	movs	r0, r3
   2e8ce:	46bd      	mov	sp, r7
   2e8d0:	b012      	add	sp, #72	; 0x48
   2e8d2:	bdb0      	pop	{r4, r5, r7, pc}
   2e8d4:	0002ecf9 	.word	0x0002ecf9
   2e8d8:	0002ec81 	.word	0x0002ec81
   2e8dc:	0002de41 	.word	0x0002de41
   2e8e0:	00030231 	.word	0x00030231
   2e8e4:	0002de71 	.word	0x0002de71
   2e8e8:	0002e5d9 	.word	0x0002e5d9
   2e8ec:	00030381 	.word	0x00030381

0002e8f0 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2e8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e8f2:	46ce      	mov	lr, r9
   2e8f4:	4647      	mov	r7, r8
   2e8f6:	b580      	push	{r7, lr}
   2e8f8:	b097      	sub	sp, #92	; 0x5c
   2e8fa:	af08      	add	r7, sp, #32
   2e8fc:	60f8      	str	r0, [r7, #12]
   2e8fe:	60b9      	str	r1, [r7, #8]
   2e900:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2e902:	2301      	movs	r3, #1
   2e904:	425b      	negs	r3, r3
   2e906:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2e908:	2318      	movs	r3, #24
   2e90a:	18fb      	adds	r3, r7, r3
   2e90c:	2200      	movs	r2, #0
   2e90e:	601a      	str	r2, [r3, #0]
   2e910:	2318      	movs	r3, #24
   2e912:	18fb      	adds	r3, r7, r3
   2e914:	2200      	movs	r2, #0
   2e916:	605a      	str	r2, [r3, #4]
   2e918:	2318      	movs	r3, #24
   2e91a:	18fb      	adds	r3, r7, r3
   2e91c:	2200      	movs	r2, #0
   2e91e:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2e920:	2318      	movs	r3, #24
   2e922:	18fb      	adds	r3, r7, r3
   2e924:	68ba      	ldr	r2, [r7, #8]
   2e926:	601a      	str	r2, [r3, #0]
    int len = 0;
   2e928:	2300      	movs	r3, #0
   2e92a:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2e92c:	68fb      	ldr	r3, [r7, #12]
   2e92e:	6a1b      	ldr	r3, [r3, #32]
   2e930:	2b00      	cmp	r3, #0
   2e932:	d100      	bne.n	2e936 <MQTTPublish+0x46>
   2e934:	e0a0      	b.n	2ea78 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2e936:	2324      	movs	r3, #36	; 0x24
   2e938:	18fb      	adds	r3, r7, r3
   2e93a:	0018      	movs	r0, r3
   2e93c:	4b55      	ldr	r3, [pc, #340]	; (2ea94 <MQTTPublish+0x1a4>)
   2e93e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2e940:	68fb      	ldr	r3, [r7, #12]
   2e942:	685a      	ldr	r2, [r3, #4]
   2e944:	2324      	movs	r3, #36	; 0x24
   2e946:	18fb      	adds	r3, r7, r3
   2e948:	0011      	movs	r1, r2
   2e94a:	0018      	movs	r0, r3
   2e94c:	4b52      	ldr	r3, [pc, #328]	; (2ea98 <MQTTPublish+0x1a8>)
   2e94e:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2e950:	687b      	ldr	r3, [r7, #4]
   2e952:	781b      	ldrb	r3, [r3, #0]
   2e954:	2b01      	cmp	r3, #1
   2e956:	d003      	beq.n	2e960 <MQTTPublish+0x70>
   2e958:	687b      	ldr	r3, [r7, #4]
   2e95a:	781b      	ldrb	r3, [r3, #0]
   2e95c:	2b02      	cmp	r3, #2
   2e95e:	d107      	bne.n	2e970 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2e960:	68fb      	ldr	r3, [r7, #12]
   2e962:	0018      	movs	r0, r3
   2e964:	4b4d      	ldr	r3, [pc, #308]	; (2ea9c <MQTTPublish+0x1ac>)
   2e966:	4798      	blx	r3
   2e968:	0003      	movs	r3, r0
   2e96a:	b29a      	uxth	r2, r3
   2e96c:	687b      	ldr	r3, [r7, #4]
   2e96e:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e970:	68fb      	ldr	r3, [r7, #12]
   2e972:	691b      	ldr	r3, [r3, #16]
   2e974:	469c      	mov	ip, r3
   2e976:	68fb      	ldr	r3, [r7, #12]
   2e978:	689b      	ldr	r3, [r3, #8]
   2e97a:	001d      	movs	r5, r3
   2e97c:	687b      	ldr	r3, [r7, #4]
   2e97e:	781b      	ldrb	r3, [r3, #0]
   2e980:	001e      	movs	r6, r3
   2e982:	687b      	ldr	r3, [r7, #4]
   2e984:	785b      	ldrb	r3, [r3, #1]
   2e986:	4698      	mov	r8, r3
   2e988:	687b      	ldr	r3, [r7, #4]
   2e98a:	889b      	ldrh	r3, [r3, #4]
   2e98c:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2e98e:	687b      	ldr	r3, [r7, #4]
   2e990:	689a      	ldr	r2, [r3, #8]
   2e992:	687b      	ldr	r3, [r7, #4]
   2e994:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2e996:	9306      	str	r3, [sp, #24]
   2e998:	9205      	str	r2, [sp, #20]
   2e99a:	2318      	movs	r3, #24
   2e99c:	18fa      	adds	r2, r7, r3
   2e99e:	2308      	movs	r3, #8
   2e9a0:	446b      	add	r3, sp
   2e9a2:	ca13      	ldmia	r2!, {r0, r1, r4}
   2e9a4:	c313      	stmia	r3!, {r0, r1, r4}
   2e9a6:	464b      	mov	r3, r9
   2e9a8:	9301      	str	r3, [sp, #4]
   2e9aa:	4643      	mov	r3, r8
   2e9ac:	9300      	str	r3, [sp, #0]
   2e9ae:	0033      	movs	r3, r6
   2e9b0:	2200      	movs	r2, #0
   2e9b2:	0029      	movs	r1, r5
   2e9b4:	4660      	mov	r0, ip
   2e9b6:	4c3a      	ldr	r4, [pc, #232]	; (2eaa0 <MQTTPublish+0x1b0>)
   2e9b8:	47a0      	blx	r4
   2e9ba:	0003      	movs	r3, r0
   2e9bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2e9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e9c0:	2b00      	cmp	r3, #0
   2e9c2:	dd5b      	ble.n	2ea7c <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2e9c4:	2324      	movs	r3, #36	; 0x24
   2e9c6:	18fa      	adds	r2, r7, r3
   2e9c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2e9ca:	68fb      	ldr	r3, [r7, #12]
   2e9cc:	0018      	movs	r0, r3
   2e9ce:	4b35      	ldr	r3, [pc, #212]	; (2eaa4 <MQTTPublish+0x1b4>)
   2e9d0:	4798      	blx	r3
   2e9d2:	0003      	movs	r3, r0
   2e9d4:	637b      	str	r3, [r7, #52]	; 0x34
   2e9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e9d8:	2b00      	cmp	r3, #0
   2e9da:	d151      	bne.n	2ea80 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2e9dc:	687b      	ldr	r3, [r7, #4]
   2e9de:	781b      	ldrb	r3, [r3, #0]
   2e9e0:	2b01      	cmp	r3, #1
   2e9e2:	d122      	bne.n	2ea2a <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2e9e4:	2324      	movs	r3, #36	; 0x24
   2e9e6:	18fa      	adds	r2, r7, r3
   2e9e8:	68fb      	ldr	r3, [r7, #12]
   2e9ea:	2104      	movs	r1, #4
   2e9ec:	0018      	movs	r0, r3
   2e9ee:	4b2e      	ldr	r3, [pc, #184]	; (2eaa8 <MQTTPublish+0x1b8>)
   2e9f0:	4798      	blx	r3
   2e9f2:	0003      	movs	r3, r0
   2e9f4:	2b04      	cmp	r3, #4
   2e9f6:	d114      	bne.n	2ea22 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2e9f8:	68fb      	ldr	r3, [r7, #12]
   2e9fa:	695c      	ldr	r4, [r3, #20]
   2e9fc:	68fb      	ldr	r3, [r7, #12]
   2e9fe:	68db      	ldr	r3, [r3, #12]
   2ea00:	2216      	movs	r2, #22
   2ea02:	18ba      	adds	r2, r7, r2
   2ea04:	2115      	movs	r1, #21
   2ea06:	1879      	adds	r1, r7, r1
   2ea08:	2014      	movs	r0, #20
   2ea0a:	1838      	adds	r0, r7, r0
   2ea0c:	9300      	str	r3, [sp, #0]
   2ea0e:	0023      	movs	r3, r4
   2ea10:	4c26      	ldr	r4, [pc, #152]	; (2eaac <MQTTPublish+0x1bc>)
   2ea12:	47a0      	blx	r4
   2ea14:	0003      	movs	r3, r0
   2ea16:	2b01      	cmp	r3, #1
   2ea18:	d033      	beq.n	2ea82 <MQTTPublish+0x192>
                rc = FAILURE;
   2ea1a:	2301      	movs	r3, #1
   2ea1c:	425b      	negs	r3, r3
   2ea1e:	637b      	str	r3, [r7, #52]	; 0x34
   2ea20:	e02f      	b.n	2ea82 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ea22:	2301      	movs	r3, #1
   2ea24:	425b      	negs	r3, r3
   2ea26:	637b      	str	r3, [r7, #52]	; 0x34
   2ea28:	e02b      	b.n	2ea82 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2ea2a:	687b      	ldr	r3, [r7, #4]
   2ea2c:	781b      	ldrb	r3, [r3, #0]
   2ea2e:	2b02      	cmp	r3, #2
   2ea30:	d127      	bne.n	2ea82 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2ea32:	2324      	movs	r3, #36	; 0x24
   2ea34:	18fa      	adds	r2, r7, r3
   2ea36:	68fb      	ldr	r3, [r7, #12]
   2ea38:	2107      	movs	r1, #7
   2ea3a:	0018      	movs	r0, r3
   2ea3c:	4b1a      	ldr	r3, [pc, #104]	; (2eaa8 <MQTTPublish+0x1b8>)
   2ea3e:	4798      	blx	r3
   2ea40:	0003      	movs	r3, r0
   2ea42:	2b07      	cmp	r3, #7
   2ea44:	d114      	bne.n	2ea70 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ea46:	68fb      	ldr	r3, [r7, #12]
   2ea48:	695c      	ldr	r4, [r3, #20]
   2ea4a:	68fb      	ldr	r3, [r7, #12]
   2ea4c:	68db      	ldr	r3, [r3, #12]
   2ea4e:	2212      	movs	r2, #18
   2ea50:	18ba      	adds	r2, r7, r2
   2ea52:	2111      	movs	r1, #17
   2ea54:	1879      	adds	r1, r7, r1
   2ea56:	2010      	movs	r0, #16
   2ea58:	1838      	adds	r0, r7, r0
   2ea5a:	9300      	str	r3, [sp, #0]
   2ea5c:	0023      	movs	r3, r4
   2ea5e:	4c13      	ldr	r4, [pc, #76]	; (2eaac <MQTTPublish+0x1bc>)
   2ea60:	47a0      	blx	r4
   2ea62:	0003      	movs	r3, r0
   2ea64:	2b01      	cmp	r3, #1
   2ea66:	d00c      	beq.n	2ea82 <MQTTPublish+0x192>
                rc = FAILURE;
   2ea68:	2301      	movs	r3, #1
   2ea6a:	425b      	negs	r3, r3
   2ea6c:	637b      	str	r3, [r7, #52]	; 0x34
   2ea6e:	e008      	b.n	2ea82 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ea70:	2301      	movs	r3, #1
   2ea72:	425b      	negs	r3, r3
   2ea74:	637b      	str	r3, [r7, #52]	; 0x34
   2ea76:	e004      	b.n	2ea82 <MQTTPublish+0x192>
		goto exit;
   2ea78:	46c0      	nop			; (mov r8, r8)
   2ea7a:	e002      	b.n	2ea82 <MQTTPublish+0x192>
        goto exit;
   2ea7c:	46c0      	nop			; (mov r8, r8)
   2ea7e:	e000      	b.n	2ea82 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2ea80:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ea82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2ea84:	0018      	movs	r0, r3
   2ea86:	46bd      	mov	sp, r7
   2ea88:	b00f      	add	sp, #60	; 0x3c
   2ea8a:	bc0c      	pop	{r2, r3}
   2ea8c:	4690      	mov	r8, r2
   2ea8e:	4699      	mov	r9, r3
   2ea90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ea92:	46c0      	nop			; (mov r8, r8)
   2ea94:	0002ecf9 	.word	0x0002ecf9
   2ea98:	0002ec81 	.word	0x0002ec81
   2ea9c:	0002de41 	.word	0x0002de41
   2eaa0:	0002ff7d 	.word	0x0002ff7d
   2eaa4:	0002de71 	.word	0x0002de71
   2eaa8:	0002e5d9 	.word	0x0002e5d9
   2eaac:	0002f9f5 	.word	0x0002f9f5

0002eab0 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2eab0:	b580      	push	{r7, lr}
   2eab2:	b088      	sub	sp, #32
   2eab4:	af00      	add	r7, sp, #0
   2eab6:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2eab8:	2301      	movs	r3, #1
   2eaba:	425b      	negs	r3, r3
   2eabc:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2eabe:	2300      	movs	r3, #0
   2eac0:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2eac2:	230c      	movs	r3, #12
   2eac4:	18fb      	adds	r3, r7, r3
   2eac6:	0018      	movs	r0, r3
   2eac8:	4b13      	ldr	r3, [pc, #76]	; (2eb18 <MQTTDisconnect+0x68>)
   2eaca:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2eacc:	687b      	ldr	r3, [r7, #4]
   2eace:	685a      	ldr	r2, [r3, #4]
   2ead0:	230c      	movs	r3, #12
   2ead2:	18fb      	adds	r3, r7, r3
   2ead4:	0011      	movs	r1, r2
   2ead6:	0018      	movs	r0, r3
   2ead8:	4b10      	ldr	r3, [pc, #64]	; (2eb1c <MQTTDisconnect+0x6c>)
   2eada:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2eadc:	687b      	ldr	r3, [r7, #4]
   2eade:	691a      	ldr	r2, [r3, #16]
   2eae0:	687b      	ldr	r3, [r7, #4]
   2eae2:	689b      	ldr	r3, [r3, #8]
   2eae4:	0019      	movs	r1, r3
   2eae6:	0010      	movs	r0, r2
   2eae8:	4b0d      	ldr	r3, [pc, #52]	; (2eb20 <MQTTDisconnect+0x70>)
   2eaea:	4798      	blx	r3
   2eaec:	0003      	movs	r3, r0
   2eaee:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2eaf0:	69bb      	ldr	r3, [r7, #24]
   2eaf2:	2b00      	cmp	r3, #0
   2eaf4:	dd08      	ble.n	2eb08 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2eaf6:	230c      	movs	r3, #12
   2eaf8:	18fa      	adds	r2, r7, r3
   2eafa:	69b9      	ldr	r1, [r7, #24]
   2eafc:	687b      	ldr	r3, [r7, #4]
   2eafe:	0018      	movs	r0, r3
   2eb00:	4b08      	ldr	r3, [pc, #32]	; (2eb24 <MQTTDisconnect+0x74>)
   2eb02:	4798      	blx	r3
   2eb04:	0003      	movs	r3, r0
   2eb06:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2eb08:	687b      	ldr	r3, [r7, #4]
   2eb0a:	2200      	movs	r2, #0
   2eb0c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2eb0e:	69fb      	ldr	r3, [r7, #28]
}
   2eb10:	0018      	movs	r0, r3
   2eb12:	46bd      	mov	sp, r7
   2eb14:	b008      	add	sp, #32
   2eb16:	bd80      	pop	{r7, pc}
   2eb18:	0002ecf9 	.word	0x0002ecf9
   2eb1c:	0002ec81 	.word	0x0002ec81
   2eb20:	0002f8a9 	.word	0x0002f8a9
   2eb24:	0002de71 	.word	0x0002de71

0002eb28 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2eb28:	b580      	push	{r7, lr}
   2eb2a:	b084      	sub	sp, #16
   2eb2c:	af00      	add	r7, sp, #0
   2eb2e:	0002      	movs	r2, r0
   2eb30:	1dfb      	adds	r3, r7, #7
   2eb32:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2eb34:	2300      	movs	r3, #0
   2eb36:	60fb      	str	r3, [r7, #12]
   2eb38:	e01c      	b.n	2eb74 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2eb3a:	4a12      	ldr	r2, [pc, #72]	; (2eb84 <isMQTTSocket+0x5c>)
   2eb3c:	68fb      	ldr	r3, [r7, #12]
   2eb3e:	2164      	movs	r1, #100	; 0x64
   2eb40:	434b      	muls	r3, r1
   2eb42:	18d3      	adds	r3, r2, r3
   2eb44:	3360      	adds	r3, #96	; 0x60
   2eb46:	681b      	ldr	r3, [r3, #0]
   2eb48:	2b00      	cmp	r3, #0
   2eb4a:	d010      	beq.n	2eb6e <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2eb4c:	4a0d      	ldr	r2, [pc, #52]	; (2eb84 <isMQTTSocket+0x5c>)
   2eb4e:	68fb      	ldr	r3, [r7, #12]
   2eb50:	2164      	movs	r1, #100	; 0x64
   2eb52:	434b      	muls	r3, r1
   2eb54:	18d3      	adds	r3, r2, r3
   2eb56:	3360      	adds	r3, #96	; 0x60
   2eb58:	681b      	ldr	r3, [r3, #0]
   2eb5a:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2eb5c:	68bb      	ldr	r3, [r7, #8]
   2eb5e:	6a1a      	ldr	r2, [r3, #32]
   2eb60:	1dfb      	adds	r3, r7, #7
   2eb62:	781b      	ldrb	r3, [r3, #0]
   2eb64:	b25b      	sxtb	r3, r3
   2eb66:	429a      	cmp	r2, r3
   2eb68:	d101      	bne.n	2eb6e <isMQTTSocket+0x46>
				return true;
   2eb6a:	2301      	movs	r3, #1
   2eb6c:	e006      	b.n	2eb7c <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2eb6e:	68fb      	ldr	r3, [r7, #12]
   2eb70:	3301      	adds	r3, #1
   2eb72:	60fb      	str	r3, [r7, #12]
   2eb74:	68fb      	ldr	r3, [r7, #12]
   2eb76:	2b06      	cmp	r3, #6
   2eb78:	d9df      	bls.n	2eb3a <isMQTTSocket+0x12>
		}
	}
	return false;
   2eb7a:	2300      	movs	r3, #0
}
   2eb7c:	0018      	movs	r0, r3
   2eb7e:	46bd      	mov	sp, r7
   2eb80:	b004      	add	sp, #16
   2eb82:	bd80      	pop	{r7, pc}
   2eb84:	2000401c 	.word	0x2000401c

0002eb88 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2eb88:	b580      	push	{r7, lr}
   2eb8a:	b082      	sub	sp, #8
   2eb8c:	af00      	add	r7, sp, #0
   2eb8e:	6078      	str	r0, [r7, #4]
   2eb90:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2eb92:	4b0d      	ldr	r3, [pc, #52]	; (2ebc8 <dnsResolveCallback+0x40>)
   2eb94:	781b      	ldrb	r3, [r3, #0]
   2eb96:	2201      	movs	r2, #1
   2eb98:	4053      	eors	r3, r2
   2eb9a:	b2db      	uxtb	r3, r3
   2eb9c:	2b00      	cmp	r3, #0
   2eb9e:	d00e      	beq.n	2ebbe <dnsResolveCallback+0x36>
   2eba0:	4b0a      	ldr	r3, [pc, #40]	; (2ebcc <dnsResolveCallback+0x44>)
   2eba2:	681b      	ldr	r3, [r3, #0]
   2eba4:	687a      	ldr	r2, [r7, #4]
   2eba6:	0011      	movs	r1, r2
   2eba8:	0018      	movs	r0, r3
   2ebaa:	4b09      	ldr	r3, [pc, #36]	; (2ebd0 <dnsResolveCallback+0x48>)
   2ebac:	4798      	blx	r3
   2ebae:	1e03      	subs	r3, r0, #0
   2ebb0:	d105      	bne.n	2ebbe <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2ebb2:	683a      	ldr	r2, [r7, #0]
   2ebb4:	4b07      	ldr	r3, [pc, #28]	; (2ebd4 <dnsResolveCallback+0x4c>)
   2ebb6:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2ebb8:	4b03      	ldr	r3, [pc, #12]	; (2ebc8 <dnsResolveCallback+0x40>)
   2ebba:	2201      	movs	r2, #1
   2ebbc:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2ebbe:	46c0      	nop			; (mov r8, r8)
   2ebc0:	46bd      	mov	sp, r7
   2ebc2:	b002      	add	sp, #8
   2ebc4:	bd80      	pop	{r7, pc}
   2ebc6:	46c0      	nop			; (mov r8, r8)
   2ebc8:	20003f0c 	.word	0x20003f0c
   2ebcc:	20004018 	.word	0x20004018
   2ebd0:	000346c9 	.word	0x000346c9
   2ebd4:	20003f04 	.word	0x20003f04

0002ebd8 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2ebd8:	b580      	push	{r7, lr}
   2ebda:	b084      	sub	sp, #16
   2ebdc:	af00      	add	r7, sp, #0
   2ebde:	603a      	str	r2, [r7, #0]
   2ebe0:	1dfb      	adds	r3, r7, #7
   2ebe2:	1c02      	adds	r2, r0, #0
   2ebe4:	701a      	strb	r2, [r3, #0]
   2ebe6:	1dbb      	adds	r3, r7, #6
   2ebe8:	1c0a      	adds	r2, r1, #0
   2ebea:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2ebec:	1dfb      	adds	r3, r7, #7
   2ebee:	781b      	ldrb	r3, [r3, #0]
   2ebf0:	b25b      	sxtb	r3, r3
   2ebf2:	0018      	movs	r0, r3
   2ebf4:	4b12      	ldr	r3, [pc, #72]	; (2ec40 <tcpClientSocketEventHandler+0x68>)
   2ebf6:	4798      	blx	r3
   2ebf8:	1e03      	subs	r3, r0, #0
   2ebfa:	d01c      	beq.n	2ec36 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2ebfc:	1dbb      	adds	r3, r7, #6
   2ebfe:	781b      	ldrb	r3, [r3, #0]
   2ec00:	2b06      	cmp	r3, #6
   2ec02:	d00c      	beq.n	2ec1e <tcpClientSocketEventHandler+0x46>
   2ec04:	2b07      	cmp	r3, #7
   2ec06:	d006      	beq.n	2ec16 <tcpClientSocketEventHandler+0x3e>
   2ec08:	2b05      	cmp	r3, #5
   2ec0a:	d000      	beq.n	2ec0e <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2ec0c:	e013      	b.n	2ec36 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2ec0e:	4b0d      	ldr	r3, [pc, #52]	; (2ec44 <tcpClientSocketEventHandler+0x6c>)
   2ec10:	2201      	movs	r2, #1
   2ec12:	701a      	strb	r2, [r3, #0]
			break;
   2ec14:	e00f      	b.n	2ec36 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2ec16:	4b0c      	ldr	r3, [pc, #48]	; (2ec48 <tcpClientSocketEventHandler+0x70>)
   2ec18:	2201      	movs	r2, #1
   2ec1a:	701a      	strb	r2, [r3, #0]
			break;
   2ec1c:	e00b      	b.n	2ec36 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2ec1e:	683b      	ldr	r3, [r7, #0]
   2ec20:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2ec22:	68fb      	ldr	r3, [r7, #12]
   2ec24:	2204      	movs	r2, #4
   2ec26:	5e9b      	ldrsh	r3, [r3, r2]
   2ec28:	001a      	movs	r2, r3
   2ec2a:	4b08      	ldr	r3, [pc, #32]	; (2ec4c <tcpClientSocketEventHandler+0x74>)
   2ec2c:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2ec2e:	4b08      	ldr	r3, [pc, #32]	; (2ec50 <tcpClientSocketEventHandler+0x78>)
   2ec30:	2201      	movs	r2, #1
   2ec32:	701a      	strb	r2, [r3, #0]
			break;
   2ec34:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2ec36:	46c0      	nop			; (mov r8, r8)
   2ec38:	46bd      	mov	sp, r7
   2ec3a:	b004      	add	sp, #16
   2ec3c:	bd80      	pop	{r7, pc}
   2ec3e:	46c0      	nop			; (mov r8, r8)
   2ec40:	0002eb29 	.word	0x0002eb29
   2ec44:	20003f0d 	.word	0x20003f0d
   2ec48:	20003f0e 	.word	0x20003f0e
   2ec4c:	20003f08 	.word	0x20003f08
   2ec50:	20003f0f 	.word	0x20003f0f

0002ec54 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2ec54:	b580      	push	{r7, lr}
   2ec56:	b082      	sub	sp, #8
   2ec58:	af00      	add	r7, sp, #0
   2ec5a:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2ec5c:	687b      	ldr	r3, [r7, #4]
   2ec5e:	3304      	adds	r3, #4
   2ec60:	687a      	ldr	r2, [r7, #4]
   2ec62:	0011      	movs	r1, r2
   2ec64:	0018      	movs	r0, r3
   2ec66:	4b05      	ldr	r3, [pc, #20]	; (2ec7c <TimerIsExpired+0x28>)
   2ec68:	4798      	blx	r3
   2ec6a:	0003      	movs	r3, r0
   2ec6c:	3b01      	subs	r3, #1
   2ec6e:	425a      	negs	r2, r3
   2ec70:	4153      	adcs	r3, r2
   2ec72:	b2db      	uxtb	r3, r3
}
   2ec74:	0018      	movs	r0, r3
   2ec76:	46bd      	mov	sp, r7
   2ec78:	b002      	add	sp, #8
   2ec7a:	bd80      	pop	{r7, pc}
   2ec7c:	0001c901 	.word	0x0001c901

0002ec80 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2ec80:	b580      	push	{r7, lr}
   2ec82:	b082      	sub	sp, #8
   2ec84:	af00      	add	r7, sp, #0
   2ec86:	6078      	str	r0, [r7, #4]
   2ec88:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2ec8a:	687b      	ldr	r3, [r7, #4]
   2ec8c:	683a      	ldr	r2, [r7, #0]
   2ec8e:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2ec90:	687b      	ldr	r3, [r7, #4]
   2ec92:	3304      	adds	r3, #4
   2ec94:	0018      	movs	r0, r3
   2ec96:	4b03      	ldr	r3, [pc, #12]	; (2eca4 <TimerCountdownMS+0x24>)
   2ec98:	4798      	blx	r3
}
   2ec9a:	46c0      	nop			; (mov r8, r8)
   2ec9c:	46bd      	mov	sp, r7
   2ec9e:	b002      	add	sp, #8
   2eca0:	bd80      	pop	{r7, pc}
   2eca2:	46c0      	nop			; (mov r8, r8)
   2eca4:	0001c895 	.word	0x0001c895

0002eca8 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2eca8:	b580      	push	{r7, lr}
   2ecaa:	b082      	sub	sp, #8
   2ecac:	af00      	add	r7, sp, #0
   2ecae:	6078      	str	r0, [r7, #4]
   2ecb0:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2ecb2:	683b      	ldr	r3, [r7, #0]
   2ecb4:	22fa      	movs	r2, #250	; 0xfa
   2ecb6:	0092      	lsls	r2, r2, #2
   2ecb8:	435a      	muls	r2, r3
   2ecba:	687b      	ldr	r3, [r7, #4]
   2ecbc:	0011      	movs	r1, r2
   2ecbe:	0018      	movs	r0, r3
   2ecc0:	4b02      	ldr	r3, [pc, #8]	; (2eccc <TimerCountdown+0x24>)
   2ecc2:	4798      	blx	r3
}
   2ecc4:	46c0      	nop			; (mov r8, r8)
   2ecc6:	46bd      	mov	sp, r7
   2ecc8:	b002      	add	sp, #8
   2ecca:	bd80      	pop	{r7, pc}
   2eccc:	0002ec81 	.word	0x0002ec81

0002ecd0 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2ecd0:	b580      	push	{r7, lr}
   2ecd2:	b082      	sub	sp, #8
   2ecd4:	af00      	add	r7, sp, #0
   2ecd6:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2ecd8:	687b      	ldr	r3, [r7, #4]
   2ecda:	3304      	adds	r3, #4
   2ecdc:	687a      	ldr	r2, [r7, #4]
   2ecde:	0011      	movs	r1, r2
   2ece0:	0018      	movs	r0, r3
   2ece2:	4b04      	ldr	r3, [pc, #16]	; (2ecf4 <TimerLeftMS+0x24>)
   2ece4:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2ece6:	687b      	ldr	r3, [r7, #4]
   2ece8:	681b      	ldr	r3, [r3, #0]
}
   2ecea:	0018      	movs	r0, r3
   2ecec:	46bd      	mov	sp, r7
   2ecee:	b002      	add	sp, #8
   2ecf0:	bd80      	pop	{r7, pc}
   2ecf2:	46c0      	nop			; (mov r8, r8)
   2ecf4:	0001c901 	.word	0x0001c901

0002ecf8 <TimerInit>:


void TimerInit(Timer* timer) {
   2ecf8:	b580      	push	{r7, lr}
   2ecfa:	b082      	sub	sp, #8
   2ecfc:	af00      	add	r7, sp, #0
   2ecfe:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2ed00:	687b      	ldr	r3, [r7, #4]
   2ed02:	2200      	movs	r2, #0
   2ed04:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2ed06:	687b      	ldr	r3, [r7, #4]
   2ed08:	3304      	adds	r3, #4
   2ed0a:	2208      	movs	r2, #8
   2ed0c:	2100      	movs	r1, #0
   2ed0e:	0018      	movs	r0, r3
   2ed10:	4b02      	ldr	r3, [pc, #8]	; (2ed1c <TimerInit+0x24>)
   2ed12:	4798      	blx	r3
}
   2ed14:	46c0      	nop			; (mov r8, r8)
   2ed16:	46bd      	mov	sp, r7
   2ed18:	b002      	add	sp, #8
   2ed1a:	bd80      	pop	{r7, pc}
   2ed1c:	0003438b 	.word	0x0003438b

0002ed20 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2ed20:	b590      	push	{r4, r7, lr}
   2ed22:	b085      	sub	sp, #20
   2ed24:	af00      	add	r7, sp, #0
   2ed26:	60f8      	str	r0, [r7, #12]
   2ed28:	60b9      	str	r1, [r7, #8]
   2ed2a:	607a      	str	r2, [r7, #4]
   2ed2c:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2ed2e:	683b      	ldr	r3, [r7, #0]
   2ed30:	2b00      	cmp	r3, #0
   2ed32:	d101      	bne.n	2ed38 <WINC1500_read+0x18>
   2ed34:	230a      	movs	r3, #10
   2ed36:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2ed38:	4b2c      	ldr	r3, [pc, #176]	; (2edec <WINC1500_read+0xcc>)
   2ed3a:	681b      	ldr	r3, [r3, #0]
   2ed3c:	2b00      	cmp	r3, #0
   2ed3e:	d131      	bne.n	2eda4 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2ed40:	4b2b      	ldr	r3, [pc, #172]	; (2edf0 <WINC1500_read+0xd0>)
   2ed42:	2200      	movs	r2, #0
   2ed44:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2ed46:	68fb      	ldr	r3, [r7, #12]
   2ed48:	681b      	ldr	r3, [r3, #0]
   2ed4a:	b258      	sxtb	r0, r3
   2ed4c:	683c      	ldr	r4, [r7, #0]
   2ed4e:	2380      	movs	r3, #128	; 0x80
   2ed50:	005a      	lsls	r2, r3, #1
   2ed52:	4928      	ldr	r1, [pc, #160]	; (2edf4 <WINC1500_read+0xd4>)
   2ed54:	0023      	movs	r3, r4
   2ed56:	4c28      	ldr	r4, [pc, #160]	; (2edf8 <WINC1500_read+0xd8>)
   2ed58:	47a0      	blx	r4
   2ed5a:	1e03      	subs	r3, r0, #0
   2ed5c:	d005      	beq.n	2ed6a <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2ed5e:	2301      	movs	r3, #1
   2ed60:	425b      	negs	r3, r3
   2ed62:	e03e      	b.n	2ede2 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2ed64:	2000      	movs	r0, #0
   2ed66:	4b25      	ldr	r3, [pc, #148]	; (2edfc <WINC1500_read+0xdc>)
   2ed68:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2ed6a:	4b21      	ldr	r3, [pc, #132]	; (2edf0 <WINC1500_read+0xd0>)
   2ed6c:	781b      	ldrb	r3, [r3, #0]
   2ed6e:	2201      	movs	r2, #1
   2ed70:	4053      	eors	r3, r2
   2ed72:	b2db      	uxtb	r3, r3
   2ed74:	2b00      	cmp	r3, #0
   2ed76:	d1f5      	bne.n	2ed64 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2ed78:	4b21      	ldr	r3, [pc, #132]	; (2ee00 <WINC1500_read+0xe0>)
   2ed7a:	681b      	ldr	r3, [r3, #0]
   2ed7c:	2b00      	cmp	r3, #0
   2ed7e:	dd08      	ble.n	2ed92 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2ed80:	4b1f      	ldr	r3, [pc, #124]	; (2ee00 <WINC1500_read+0xe0>)
   2ed82:	681b      	ldr	r3, [r3, #0]
   2ed84:	001a      	movs	r2, r3
   2ed86:	4b19      	ldr	r3, [pc, #100]	; (2edec <WINC1500_read+0xcc>)
   2ed88:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2ed8a:	4b1e      	ldr	r3, [pc, #120]	; (2ee04 <WINC1500_read+0xe4>)
   2ed8c:	2200      	movs	r2, #0
   2ed8e:	601a      	str	r2, [r3, #0]
   2ed90:	e008      	b.n	2eda4 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2ed92:	4b16      	ldr	r3, [pc, #88]	; (2edec <WINC1500_read+0xcc>)
   2ed94:	2200      	movs	r2, #0
   2ed96:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2ed98:	4b1a      	ldr	r3, [pc, #104]	; (2ee04 <WINC1500_read+0xe4>)
   2ed9a:	2200      	movs	r2, #0
   2ed9c:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2ed9e:	4b18      	ldr	r3, [pc, #96]	; (2ee00 <WINC1500_read+0xe0>)
   2eda0:	681b      	ldr	r3, [r3, #0]
   2eda2:	e01e      	b.n	2ede2 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2eda4:	4b11      	ldr	r3, [pc, #68]	; (2edec <WINC1500_read+0xcc>)
   2eda6:	681b      	ldr	r3, [r3, #0]
   2eda8:	001a      	movs	r2, r3
   2edaa:	687b      	ldr	r3, [r7, #4]
   2edac:	4293      	cmp	r3, r2
   2edae:	dd02      	ble.n	2edb6 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2edb0:	2301      	movs	r3, #1
   2edb2:	425b      	negs	r3, r3
   2edb4:	e015      	b.n	2ede2 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2edb6:	4b13      	ldr	r3, [pc, #76]	; (2ee04 <WINC1500_read+0xe4>)
   2edb8:	681a      	ldr	r2, [r3, #0]
   2edba:	4b0e      	ldr	r3, [pc, #56]	; (2edf4 <WINC1500_read+0xd4>)
   2edbc:	18d1      	adds	r1, r2, r3
   2edbe:	687a      	ldr	r2, [r7, #4]
   2edc0:	68bb      	ldr	r3, [r7, #8]
   2edc2:	0018      	movs	r0, r3
   2edc4:	4b10      	ldr	r3, [pc, #64]	; (2ee08 <WINC1500_read+0xe8>)
   2edc6:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2edc8:	4b08      	ldr	r3, [pc, #32]	; (2edec <WINC1500_read+0xcc>)
   2edca:	681a      	ldr	r2, [r3, #0]
   2edcc:	687b      	ldr	r3, [r7, #4]
   2edce:	1ad2      	subs	r2, r2, r3
   2edd0:	4b06      	ldr	r3, [pc, #24]	; (2edec <WINC1500_read+0xcc>)
   2edd2:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2edd4:	4b0b      	ldr	r3, [pc, #44]	; (2ee04 <WINC1500_read+0xe4>)
   2edd6:	681a      	ldr	r2, [r3, #0]
   2edd8:	687b      	ldr	r3, [r7, #4]
   2edda:	18d2      	adds	r2, r2, r3
   2eddc:	4b09      	ldr	r3, [pc, #36]	; (2ee04 <WINC1500_read+0xe4>)
   2edde:	601a      	str	r2, [r3, #0]
  
  return len;
   2ede0:	687b      	ldr	r3, [r7, #4]
}
   2ede2:	0018      	movs	r0, r3
   2ede4:	46bd      	mov	sp, r7
   2ede6:	b005      	add	sp, #20
   2ede8:	bd90      	pop	{r4, r7, pc}
   2edea:	46c0      	nop			; (mov r8, r8)
   2edec:	20004014 	.word	0x20004014
   2edf0:	20003f0f 	.word	0x20003f0f
   2edf4:	20003f10 	.word	0x20003f10
   2edf8:	0002542d 	.word	0x0002542d
   2edfc:	00021975 	.word	0x00021975
   2ee00:	20003f08 	.word	0x20003f08
   2ee04:	20004010 	.word	0x20004010
   2ee08:	00034355 	.word	0x00034355

0002ee0c <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2ee0c:	b590      	push	{r4, r7, lr}
   2ee0e:	b085      	sub	sp, #20
   2ee10:	af00      	add	r7, sp, #0
   2ee12:	60f8      	str	r0, [r7, #12]
   2ee14:	60b9      	str	r1, [r7, #8]
   2ee16:	607a      	str	r2, [r7, #4]
   2ee18:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2ee1a:	4b10      	ldr	r3, [pc, #64]	; (2ee5c <WINC1500_write+0x50>)
   2ee1c:	2200      	movs	r2, #0
   2ee1e:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2ee20:	68fb      	ldr	r3, [r7, #12]
   2ee22:	681b      	ldr	r3, [r3, #0]
   2ee24:	b258      	sxtb	r0, r3
   2ee26:	687b      	ldr	r3, [r7, #4]
   2ee28:	b29a      	uxth	r2, r3
   2ee2a:	68b9      	ldr	r1, [r7, #8]
   2ee2c:	2300      	movs	r3, #0
   2ee2e:	4c0c      	ldr	r4, [pc, #48]	; (2ee60 <WINC1500_write+0x54>)
   2ee30:	47a0      	blx	r4
   2ee32:	1e03      	subs	r3, r0, #0
   2ee34:	d005      	beq.n	2ee42 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2ee36:	2301      	movs	r3, #1
   2ee38:	425b      	negs	r3, r3
   2ee3a:	e00a      	b.n	2ee52 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2ee3c:	2000      	movs	r0, #0
   2ee3e:	4b09      	ldr	r3, [pc, #36]	; (2ee64 <WINC1500_write+0x58>)
   2ee40:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2ee42:	4b06      	ldr	r3, [pc, #24]	; (2ee5c <WINC1500_write+0x50>)
   2ee44:	781b      	ldrb	r3, [r3, #0]
   2ee46:	2201      	movs	r2, #1
   2ee48:	4053      	eors	r3, r2
   2ee4a:	b2db      	uxtb	r3, r3
   2ee4c:	2b00      	cmp	r3, #0
   2ee4e:	d1f5      	bne.n	2ee3c <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2ee50:	687b      	ldr	r3, [r7, #4]
}
   2ee52:	0018      	movs	r0, r3
   2ee54:	46bd      	mov	sp, r7
   2ee56:	b005      	add	sp, #20
   2ee58:	bd90      	pop	{r4, r7, pc}
   2ee5a:	46c0      	nop			; (mov r8, r8)
   2ee5c:	20003f0e 	.word	0x20003f0e
   2ee60:	000252c9 	.word	0x000252c9
   2ee64:	00021975 	.word	0x00021975

0002ee68 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2ee68:	b580      	push	{r7, lr}
   2ee6a:	b082      	sub	sp, #8
   2ee6c:	af00      	add	r7, sp, #0
   2ee6e:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2ee70:	687b      	ldr	r3, [r7, #4]
   2ee72:	681b      	ldr	r3, [r3, #0]
   2ee74:	b25b      	sxtb	r3, r3
   2ee76:	0018      	movs	r0, r3
   2ee78:	4b06      	ldr	r3, [pc, #24]	; (2ee94 <WINC1500_disconnect+0x2c>)
   2ee7a:	4798      	blx	r3
	n->socket=-1;
   2ee7c:	687b      	ldr	r3, [r7, #4]
   2ee7e:	2201      	movs	r2, #1
   2ee80:	4252      	negs	r2, r2
   2ee82:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2ee84:	4b04      	ldr	r3, [pc, #16]	; (2ee98 <WINC1500_disconnect+0x30>)
   2ee86:	2200      	movs	r2, #0
   2ee88:	701a      	strb	r2, [r3, #0]
}
   2ee8a:	46c0      	nop			; (mov r8, r8)
   2ee8c:	46bd      	mov	sp, r7
   2ee8e:	b002      	add	sp, #8
   2ee90:	bd80      	pop	{r7, pc}
   2ee92:	46c0      	nop			; (mov r8, r8)
   2ee94:	000255ad 	.word	0x000255ad
   2ee98:	20003f0d 	.word	0x20003f0d

0002ee9c <NetworkInit>:


void NetworkInit(Network* n) {
   2ee9c:	b580      	push	{r7, lr}
   2ee9e:	b082      	sub	sp, #8
   2eea0:	af00      	add	r7, sp, #0
   2eea2:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2eea4:	687b      	ldr	r3, [r7, #4]
   2eea6:	2201      	movs	r2, #1
   2eea8:	4252      	negs	r2, r2
   2eeaa:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2eeac:	687b      	ldr	r3, [r7, #4]
   2eeae:	4a06      	ldr	r2, [pc, #24]	; (2eec8 <NetworkInit+0x2c>)
   2eeb0:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2eeb2:	687b      	ldr	r3, [r7, #4]
   2eeb4:	4a05      	ldr	r2, [pc, #20]	; (2eecc <NetworkInit+0x30>)
   2eeb6:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2eeb8:	687b      	ldr	r3, [r7, #4]
   2eeba:	4a05      	ldr	r2, [pc, #20]	; (2eed0 <NetworkInit+0x34>)
   2eebc:	611a      	str	r2, [r3, #16]
}
   2eebe:	46c0      	nop			; (mov r8, r8)
   2eec0:	46bd      	mov	sp, r7
   2eec2:	b002      	add	sp, #8
   2eec4:	bd80      	pop	{r7, pc}
   2eec6:	46c0      	nop			; (mov r8, r8)
   2eec8:	0002ed21 	.word	0x0002ed21
   2eecc:	0002ee0d 	.word	0x0002ee0d
   2eed0:	0002ee69 	.word	0x0002ee69

0002eed4 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2eed4:	b580      	push	{r7, lr}
   2eed6:	b088      	sub	sp, #32
   2eed8:	af00      	add	r7, sp, #0
   2eeda:	60f8      	str	r0, [r7, #12]
   2eedc:	60b9      	str	r1, [r7, #8]
   2eede:	607a      	str	r2, [r7, #4]
   2eee0:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2eee2:	4b37      	ldr	r3, [pc, #220]	; (2efc0 <ConnectNetwork+0xec>)
   2eee4:	2200      	movs	r2, #0
   2eee6:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2eee8:	4b36      	ldr	r3, [pc, #216]	; (2efc4 <ConnectNetwork+0xf0>)
   2eeea:	68ba      	ldr	r2, [r7, #8]
   2eeec:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2eeee:	68bb      	ldr	r3, [r7, #8]
   2eef0:	0018      	movs	r0, r3
   2eef2:	4b35      	ldr	r3, [pc, #212]	; (2efc8 <ConnectNetwork+0xf4>)
   2eef4:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2eef6:	e002      	b.n	2eefe <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2eef8:	2000      	movs	r0, #0
   2eefa:	4b34      	ldr	r3, [pc, #208]	; (2efcc <ConnectNetwork+0xf8>)
   2eefc:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2eefe:	4b30      	ldr	r3, [pc, #192]	; (2efc0 <ConnectNetwork+0xec>)
   2ef00:	781b      	ldrb	r3, [r3, #0]
   2ef02:	2201      	movs	r2, #1
   2ef04:	4053      	eors	r3, r2
   2ef06:	b2db      	uxtb	r3, r3
   2ef08:	2b00      	cmp	r3, #0
   2ef0a:	d1f5      	bne.n	2eef8 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2ef0c:	4b30      	ldr	r3, [pc, #192]	; (2efd0 <ConnectNetwork+0xfc>)
   2ef0e:	681a      	ldr	r2, [r3, #0]
   2ef10:	68fb      	ldr	r3, [r7, #12]
   2ef12:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2ef14:	2310      	movs	r3, #16
   2ef16:	18fb      	adds	r3, r7, r3
   2ef18:	2202      	movs	r2, #2
   2ef1a:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2ef1c:	687b      	ldr	r3, [r7, #4]
   2ef1e:	b29b      	uxth	r3, r3
   2ef20:	021b      	lsls	r3, r3, #8
   2ef22:	b21a      	sxth	r2, r3
   2ef24:	687b      	ldr	r3, [r7, #4]
   2ef26:	b29b      	uxth	r3, r3
   2ef28:	0a1b      	lsrs	r3, r3, #8
   2ef2a:	b29b      	uxth	r3, r3
   2ef2c:	b21b      	sxth	r3, r3
   2ef2e:	4313      	orrs	r3, r2
   2ef30:	b21b      	sxth	r3, r3
   2ef32:	b29a      	uxth	r2, r3
   2ef34:	2310      	movs	r3, #16
   2ef36:	18fb      	adds	r3, r7, r3
   2ef38:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2ef3a:	4b25      	ldr	r3, [pc, #148]	; (2efd0 <ConnectNetwork+0xfc>)
   2ef3c:	681b      	ldr	r3, [r3, #0]
   2ef3e:	001a      	movs	r2, r3
   2ef40:	2310      	movs	r3, #16
   2ef42:	18fb      	adds	r3, r7, r3
   2ef44:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2ef46:	68fb      	ldr	r3, [r7, #12]
   2ef48:	681b      	ldr	r3, [r3, #0]
   2ef4a:	2b00      	cmp	r3, #0
   2ef4c:	da0a      	bge.n	2ef64 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2ef4e:	683b      	ldr	r3, [r7, #0]
   2ef50:	b2db      	uxtb	r3, r3
   2ef52:	001a      	movs	r2, r3
   2ef54:	2101      	movs	r1, #1
   2ef56:	2002      	movs	r0, #2
   2ef58:	4b1e      	ldr	r3, [pc, #120]	; (2efd4 <ConnectNetwork+0x100>)
   2ef5a:	4798      	blx	r3
   2ef5c:	0003      	movs	r3, r0
   2ef5e:	001a      	movs	r2, r3
   2ef60:	68fb      	ldr	r3, [r7, #12]
   2ef62:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2ef64:	68fb      	ldr	r3, [r7, #12]
   2ef66:	681b      	ldr	r3, [r3, #0]
   2ef68:	3301      	adds	r3, #1
   2ef6a:	d108      	bne.n	2ef7e <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2ef6c:	68fb      	ldr	r3, [r7, #12]
   2ef6e:	681b      	ldr	r3, [r3, #0]
   2ef70:	b25b      	sxtb	r3, r3
   2ef72:	0018      	movs	r0, r3
   2ef74:	4b18      	ldr	r3, [pc, #96]	; (2efd8 <ConnectNetwork+0x104>)
   2ef76:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2ef78:	2309      	movs	r3, #9
   2ef7a:	425b      	negs	r3, r3
   2ef7c:	e01c      	b.n	2efb8 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2ef7e:	68fb      	ldr	r3, [r7, #12]
   2ef80:	681b      	ldr	r3, [r3, #0]
   2ef82:	b25b      	sxtb	r3, r3
   2ef84:	2210      	movs	r2, #16
   2ef86:	18b9      	adds	r1, r7, r2
   2ef88:	2210      	movs	r2, #16
   2ef8a:	0018      	movs	r0, r3
   2ef8c:	4b13      	ldr	r3, [pc, #76]	; (2efdc <ConnectNetwork+0x108>)
   2ef8e:	4798      	blx	r3
   2ef90:	1e03      	subs	r3, r0, #0
   2ef92:	d002      	beq.n	2ef9a <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2ef94:	2309      	movs	r3, #9
   2ef96:	425b      	negs	r3, r3
   2ef98:	e00e      	b.n	2efb8 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2ef9a:	4b11      	ldr	r3, [pc, #68]	; (2efe0 <ConnectNetwork+0x10c>)
   2ef9c:	2200      	movs	r2, #0
   2ef9e:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2efa0:	e002      	b.n	2efa8 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2efa2:	2000      	movs	r0, #0
   2efa4:	4b09      	ldr	r3, [pc, #36]	; (2efcc <ConnectNetwork+0xf8>)
   2efa6:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2efa8:	4b0d      	ldr	r3, [pc, #52]	; (2efe0 <ConnectNetwork+0x10c>)
   2efaa:	781b      	ldrb	r3, [r3, #0]
   2efac:	2201      	movs	r2, #1
   2efae:	4053      	eors	r3, r2
   2efb0:	b2db      	uxtb	r3, r3
   2efb2:	2b00      	cmp	r3, #0
   2efb4:	d1f5      	bne.n	2efa2 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2efb6:	2300      	movs	r3, #0
   2efb8:	0018      	movs	r0, r3
   2efba:	46bd      	mov	sp, r7
   2efbc:	b008      	add	sp, #32
   2efbe:	bd80      	pop	{r7, pc}
   2efc0:	20003f0c 	.word	0x20003f0c
   2efc4:	20004018 	.word	0x20004018
   2efc8:	000257f5 	.word	0x000257f5
   2efcc:	00021975 	.word	0x00021975
   2efd0:	20003f04 	.word	0x20003f04
   2efd4:	00024fa1 	.word	0x00024fa1
   2efd8:	000255ad 	.word	0x000255ad
   2efdc:	000251b5 	.word	0x000251b5
   2efe0:	20003f0d 	.word	0x20003f0d

0002efe4 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2efe4:	b580      	push	{r7, lr}
   2efe6:	b084      	sub	sp, #16
   2efe8:	af00      	add	r7, sp, #0
   2efea:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2efec:	687b      	ldr	r3, [r7, #4]
   2efee:	2b00      	cmp	r3, #0
   2eff0:	d022      	beq.n	2f038 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2eff2:	2300      	movs	r3, #0
   2eff4:	60fb      	str	r3, [r7, #12]
   2eff6:	e01b      	b.n	2f030 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2eff8:	4a11      	ldr	r2, [pc, #68]	; (2f040 <allocateClient+0x5c>)
   2effa:	68fb      	ldr	r3, [r7, #12]
   2effc:	2164      	movs	r1, #100	; 0x64
   2effe:	434b      	muls	r3, r1
   2f000:	18d3      	adds	r3, r2, r3
   2f002:	3360      	adds	r3, #96	; 0x60
   2f004:	681b      	ldr	r3, [r3, #0]
   2f006:	2b00      	cmp	r3, #0
   2f008:	d10f      	bne.n	2f02a <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2f00a:	4a0d      	ldr	r2, [pc, #52]	; (2f040 <allocateClient+0x5c>)
   2f00c:	68fb      	ldr	r3, [r7, #12]
   2f00e:	2164      	movs	r1, #100	; 0x64
   2f010:	434b      	muls	r3, r1
   2f012:	18d3      	adds	r3, r2, r3
   2f014:	3360      	adds	r3, #96	; 0x60
   2f016:	687a      	ldr	r2, [r7, #4]
   2f018:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2f01a:	68fb      	ldr	r3, [r7, #12]
   2f01c:	2264      	movs	r2, #100	; 0x64
   2f01e:	435a      	muls	r2, r3
   2f020:	4b07      	ldr	r3, [pc, #28]	; (2f040 <allocateClient+0x5c>)
   2f022:	18d2      	adds	r2, r2, r3
   2f024:	687b      	ldr	r3, [r7, #4]
   2f026:	61da      	str	r2, [r3, #28]
			return;
   2f028:	e007      	b.n	2f03a <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f02a:	68fb      	ldr	r3, [r7, #12]
   2f02c:	3301      	adds	r3, #1
   2f02e:	60fb      	str	r3, [r7, #12]
   2f030:	68fb      	ldr	r3, [r7, #12]
   2f032:	2b06      	cmp	r3, #6
   2f034:	d9e0      	bls.n	2eff8 <allocateClient+0x14>
   2f036:	e000      	b.n	2f03a <allocateClient+0x56>
		return;
   2f038:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2f03a:	46bd      	mov	sp, r7
   2f03c:	b004      	add	sp, #16
   2f03e:	bd80      	pop	{r7, pc}
   2f040:	2000401c 	.word	0x2000401c

0002f044 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2f044:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f046:	b089      	sub	sp, #36	; 0x24
   2f048:	af04      	add	r7, sp, #16
   2f04a:	6078      	str	r0, [r7, #4]
   2f04c:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2f04e:	687b      	ldr	r3, [r7, #4]
   2f050:	2b00      	cmp	r3, #0
   2f052:	d00a      	beq.n	2f06a <mqtt_init+0x26>
   2f054:	683b      	ldr	r3, [r7, #0]
   2f056:	2b00      	cmp	r3, #0
   2f058:	d007      	beq.n	2f06a <mqtt_init+0x26>
   2f05a:	683b      	ldr	r3, [r7, #0]
   2f05c:	691b      	ldr	r3, [r3, #16]
   2f05e:	2b00      	cmp	r3, #0
   2f060:	d003      	beq.n	2f06a <mqtt_init+0x26>
   2f062:	683b      	ldr	r3, [r7, #0]
   2f064:	689b      	ldr	r3, [r3, #8]
   2f066:	2b00      	cmp	r3, #0
   2f068:	d102      	bne.n	2f070 <mqtt_init+0x2c>
		return FAILURE;
   2f06a:	2301      	movs	r3, #1
   2f06c:	425b      	negs	r3, r3
   2f06e:	e034      	b.n	2f0da <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2f070:	683b      	ldr	r3, [r7, #0]
   2f072:	889b      	ldrh	r3, [r3, #4]
   2f074:	001a      	movs	r2, r3
   2f076:	23fa      	movs	r3, #250	; 0xfa
   2f078:	009b      	lsls	r3, r3, #2
   2f07a:	4353      	muls	r3, r2
   2f07c:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2f07e:	687b      	ldr	r3, [r7, #4]
   2f080:	3320      	adds	r3, #32
   2f082:	0018      	movs	r0, r3
   2f084:	4b17      	ldr	r3, [pc, #92]	; (2f0e4 <mqtt_init+0xa0>)
   2f086:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2f088:	687b      	ldr	r3, [r7, #4]
   2f08a:	3304      	adds	r3, #4
   2f08c:	6839      	ldr	r1, [r7, #0]
   2f08e:	2218      	movs	r2, #24
   2f090:	0018      	movs	r0, r3
   2f092:	4b15      	ldr	r3, [pc, #84]	; (2f0e8 <mqtt_init+0xa4>)
   2f094:	4798      	blx	r3
	allocateClient(module);
   2f096:	687b      	ldr	r3, [r7, #4]
   2f098:	0018      	movs	r0, r3
   2f09a:	4b14      	ldr	r3, [pc, #80]	; (2f0ec <mqtt_init+0xa8>)
   2f09c:	4798      	blx	r3
	
	if(module->client)
   2f09e:	687b      	ldr	r3, [r7, #4]
   2f0a0:	69db      	ldr	r3, [r3, #28]
   2f0a2:	2b00      	cmp	r3, #0
   2f0a4:	d017      	beq.n	2f0d6 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2f0a6:	687b      	ldr	r3, [r7, #4]
   2f0a8:	69d8      	ldr	r0, [r3, #28]
   2f0aa:	687b      	ldr	r3, [r7, #4]
   2f0ac:	3320      	adds	r3, #32
   2f0ae:	001c      	movs	r4, r3
   2f0b0:	683b      	ldr	r3, [r7, #0]
   2f0b2:	691e      	ldr	r6, [r3, #16]
   2f0b4:	683b      	ldr	r3, [r7, #0]
   2f0b6:	695a      	ldr	r2, [r3, #20]
   2f0b8:	683b      	ldr	r3, [r7, #0]
   2f0ba:	6899      	ldr	r1, [r3, #8]
   2f0bc:	683b      	ldr	r3, [r7, #0]
   2f0be:	68db      	ldr	r3, [r3, #12]
   2f0c0:	68fd      	ldr	r5, [r7, #12]
   2f0c2:	9302      	str	r3, [sp, #8]
   2f0c4:	9101      	str	r1, [sp, #4]
   2f0c6:	9200      	str	r2, [sp, #0]
   2f0c8:	0033      	movs	r3, r6
   2f0ca:	002a      	movs	r2, r5
   2f0cc:	0021      	movs	r1, r4
   2f0ce:	4c08      	ldr	r4, [pc, #32]	; (2f0f0 <mqtt_init+0xac>)
   2f0d0:	47a0      	blx	r4
		return SUCCESS;
   2f0d2:	2300      	movs	r3, #0
   2f0d4:	e001      	b.n	2f0da <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2f0d6:	2301      	movs	r3, #1
   2f0d8:	425b      	negs	r3, r3
}
   2f0da:	0018      	movs	r0, r3
   2f0dc:	46bd      	mov	sp, r7
   2f0de:	b005      	add	sp, #20
   2f0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f0e2:	46c0      	nop			; (mov r8, r8)
   2f0e4:	0002ee9d 	.word	0x0002ee9d
   2f0e8:	00034355 	.word	0x00034355
   2f0ec:	0002efe5 	.word	0x0002efe5
   2f0f0:	0002df15 	.word	0x0002df15

0002f0f4 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2f0f4:	b580      	push	{r7, lr}
   2f0f6:	b082      	sub	sp, #8
   2f0f8:	af00      	add	r7, sp, #0
   2f0fa:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2f0fc:	687b      	ldr	r3, [r7, #4]
   2f0fe:	4a0c      	ldr	r2, [pc, #48]	; (2f130 <mqtt_get_config_defaults+0x3c>)
   2f100:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f102:	687b      	ldr	r3, [r7, #4]
   2f104:	2200      	movs	r2, #0
   2f106:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2f108:	687b      	ldr	r3, [r7, #4]
   2f10a:	223c      	movs	r2, #60	; 0x3c
   2f10c:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2f10e:	687b      	ldr	r3, [r7, #4]
   2f110:	2200      	movs	r2, #0
   2f112:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2f114:	687b      	ldr	r3, [r7, #4]
   2f116:	2200      	movs	r2, #0
   2f118:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2f11a:	687b      	ldr	r3, [r7, #4]
   2f11c:	2200      	movs	r2, #0
   2f11e:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2f120:	687b      	ldr	r3, [r7, #4]
   2f122:	2200      	movs	r2, #0
   2f124:	615a      	str	r2, [r3, #20]
}
   2f126:	46c0      	nop			; (mov r8, r8)
   2f128:	46bd      	mov	sp, r7
   2f12a:	b002      	add	sp, #8
   2f12c:	bd80      	pop	{r7, pc}
   2f12e:	46c0      	nop			; (mov r8, r8)
   2f130:	0000075b 	.word	0x0000075b

0002f134 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2f134:	b580      	push	{r7, lr}
   2f136:	b082      	sub	sp, #8
   2f138:	af00      	add	r7, sp, #0
   2f13a:	6078      	str	r0, [r7, #4]
   2f13c:	6039      	str	r1, [r7, #0]
	if(module)
   2f13e:	687b      	ldr	r3, [r7, #4]
   2f140:	2b00      	cmp	r3, #0
   2f142:	d004      	beq.n	2f14e <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2f144:	687b      	ldr	r3, [r7, #4]
   2f146:	683a      	ldr	r2, [r7, #0]
   2f148:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2f14a:	2300      	movs	r3, #0
   2f14c:	e001      	b.n	2f152 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2f14e:	2301      	movs	r3, #1
   2f150:	425b      	negs	r3, r3
}
   2f152:	0018      	movs	r0, r3
   2f154:	46bd      	mov	sp, r7
   2f156:	b002      	add	sp, #8
   2f158:	bd80      	pop	{r7, pc}
	...

0002f15c <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f15c:	b580      	push	{r7, lr}
   2f15e:	b082      	sub	sp, #8
   2f160:	af00      	add	r7, sp, #0
   2f162:	603a      	str	r2, [r7, #0]
   2f164:	1dfb      	adds	r3, r7, #7
   2f166:	1c02      	adds	r2, r0, #0
   2f168:	701a      	strb	r2, [r3, #0]
   2f16a:	1dbb      	adds	r3, r7, #6
   2f16c:	1c0a      	adds	r2, r1, #0
   2f16e:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2f170:	683a      	ldr	r2, [r7, #0]
   2f172:	1dbb      	adds	r3, r7, #6
   2f174:	7819      	ldrb	r1, [r3, #0]
   2f176:	1dfb      	adds	r3, r7, #7
   2f178:	781b      	ldrb	r3, [r3, #0]
   2f17a:	b25b      	sxtb	r3, r3
   2f17c:	0018      	movs	r0, r3
   2f17e:	4b03      	ldr	r3, [pc, #12]	; (2f18c <mqtt_socket_event_handler+0x30>)
   2f180:	4798      	blx	r3
}
   2f182:	46c0      	nop			; (mov r8, r8)
   2f184:	46bd      	mov	sp, r7
   2f186:	b002      	add	sp, #8
   2f188:	bd80      	pop	{r7, pc}
   2f18a:	46c0      	nop			; (mov r8, r8)
   2f18c:	0002ebd9 	.word	0x0002ebd9

0002f190 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2f190:	b580      	push	{r7, lr}
   2f192:	b082      	sub	sp, #8
   2f194:	af00      	add	r7, sp, #0
   2f196:	6078      	str	r0, [r7, #4]
   2f198:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2f19a:	683a      	ldr	r2, [r7, #0]
   2f19c:	687b      	ldr	r3, [r7, #4]
   2f19e:	0011      	movs	r1, r2
   2f1a0:	0018      	movs	r0, r3
   2f1a2:	4b03      	ldr	r3, [pc, #12]	; (2f1b0 <mqtt_socket_resolve_handler+0x20>)
   2f1a4:	4798      	blx	r3
}
   2f1a6:	46c0      	nop			; (mov r8, r8)
   2f1a8:	46bd      	mov	sp, r7
   2f1aa:	b002      	add	sp, #8
   2f1ac:	bd80      	pop	{r7, pc}
   2f1ae:	46c0      	nop			; (mov r8, r8)
   2f1b0:	0002eb89 	.word	0x0002eb89

0002f1b4 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2f1b4:	b590      	push	{r4, r7, lr}
   2f1b6:	b085      	sub	sp, #20
   2f1b8:	af00      	add	r7, sp, #0
   2f1ba:	6078      	str	r0, [r7, #4]
   2f1bc:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2f1be:	687b      	ldr	r3, [r7, #4]
   2f1c0:	3320      	adds	r3, #32
   2f1c2:	0018      	movs	r0, r3
   2f1c4:	687b      	ldr	r3, [r7, #4]
   2f1c6:	889b      	ldrh	r3, [r3, #4]
   2f1c8:	001a      	movs	r2, r3
   2f1ca:	687b      	ldr	r3, [r7, #4]
   2f1cc:	799b      	ldrb	r3, [r3, #6]
   2f1ce:	6839      	ldr	r1, [r7, #0]
   2f1d0:	4c09      	ldr	r4, [pc, #36]	; (2f1f8 <mqtt_connect+0x44>)
   2f1d2:	47a0      	blx	r4
   2f1d4:	0003      	movs	r3, r0
   2f1d6:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2f1d8:	687b      	ldr	r3, [r7, #4]
   2f1da:	681b      	ldr	r3, [r3, #0]
   2f1dc:	2b00      	cmp	r3, #0
   2f1de:	d006      	beq.n	2f1ee <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2f1e0:	687b      	ldr	r3, [r7, #4]
   2f1e2:	681b      	ldr	r3, [r3, #0]
   2f1e4:	220c      	movs	r2, #12
   2f1e6:	18ba      	adds	r2, r7, r2
   2f1e8:	6878      	ldr	r0, [r7, #4]
   2f1ea:	2100      	movs	r1, #0
   2f1ec:	4798      	blx	r3
	return connResult.sock_connected.result;
   2f1ee:	68fb      	ldr	r3, [r7, #12]
}
   2f1f0:	0018      	movs	r0, r3
   2f1f2:	46bd      	mov	sp, r7
   2f1f4:	b005      	add	sp, #20
   2f1f6:	bd90      	pop	{r4, r7, pc}
   2f1f8:	0002eed5 	.word	0x0002eed5

0002f1fc <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2f1fc:	b580      	push	{r7, lr}
   2f1fe:	b09c      	sub	sp, #112	; 0x70
   2f200:	af00      	add	r7, sp, #0
   2f202:	60f8      	str	r0, [r7, #12]
   2f204:	607a      	str	r2, [r7, #4]
   2f206:	603b      	str	r3, [r7, #0]
   2f208:	230b      	movs	r3, #11
   2f20a:	18fb      	adds	r3, r7, r3
   2f20c:	1c0a      	adds	r2, r1, #0
   2f20e:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2f210:	2310      	movs	r3, #16
   2f212:	18fa      	adds	r2, r7, r3
   2f214:	4b31      	ldr	r3, [pc, #196]	; (2f2dc <mqtt_connect_broker+0xe0>)
   2f216:	0010      	movs	r0, r2
   2f218:	0019      	movs	r1, r3
   2f21a:	2358      	movs	r3, #88	; 0x58
   2f21c:	001a      	movs	r2, r3
   2f21e:	4b30      	ldr	r3, [pc, #192]	; (2f2e0 <mqtt_connect_broker+0xe4>)
   2f220:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2f222:	2310      	movs	r3, #16
   2f224:	18fb      	adds	r3, r7, r3
   2f226:	2204      	movs	r2, #4
   2f228:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2f22a:	2310      	movs	r3, #16
   2f22c:	18fb      	adds	r3, r7, r3
   2f22e:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2f230:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2f232:	2310      	movs	r3, #16
   2f234:	18fb      	adds	r3, r7, r3
   2f236:	687a      	ldr	r2, [r7, #4]
   2f238:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2f23a:	2310      	movs	r3, #16
   2f23c:	18fb      	adds	r3, r7, r3
   2f23e:	683a      	ldr	r2, [r7, #0]
   2f240:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2f242:	2310      	movs	r3, #16
   2f244:	18fb      	adds	r3, r7, r3
   2f246:	220b      	movs	r2, #11
   2f248:	18ba      	adds	r2, r7, r2
   2f24a:	7812      	ldrb	r2, [r2, #0]
   2f24c:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2f24e:	2310      	movs	r3, #16
   2f250:	18fb      	adds	r3, r7, r3
   2f252:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2f254:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2f256:	2310      	movs	r3, #16
   2f258:	18fb      	adds	r3, r7, r3
   2f25a:	2280      	movs	r2, #128	; 0x80
   2f25c:	18ba      	adds	r2, r7, r2
   2f25e:	6812      	ldr	r2, [r2, #0]
   2f260:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2f262:	2310      	movs	r3, #16
   2f264:	18fb      	adds	r3, r7, r3
   2f266:	228c      	movs	r2, #140	; 0x8c
   2f268:	18ba      	adds	r2, r7, r2
   2f26a:	213c      	movs	r1, #60	; 0x3c
   2f26c:	7812      	ldrb	r2, [r2, #0]
   2f26e:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2f270:	2310      	movs	r3, #16
   2f272:	18fb      	adds	r3, r7, r3
   2f274:	2288      	movs	r2, #136	; 0x88
   2f276:	18ba      	adds	r2, r7, r2
   2f278:	213d      	movs	r1, #61	; 0x3d
   2f27a:	7812      	ldrb	r2, [r2, #0]
   2f27c:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2f27e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2f280:	2b00      	cmp	r3, #0
   2f282:	d008      	beq.n	2f296 <mqtt_connect_broker+0x9a>
   2f284:	2380      	movs	r3, #128	; 0x80
   2f286:	18fb      	adds	r3, r7, r3
   2f288:	681b      	ldr	r3, [r3, #0]
   2f28a:	2b00      	cmp	r3, #0
   2f28c:	d003      	beq.n	2f296 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2f28e:	2310      	movs	r3, #16
   2f290:	18fb      	adds	r3, r7, r3
   2f292:	2201      	movs	r2, #1
   2f294:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2f296:	68fb      	ldr	r3, [r7, #12]
   2f298:	69db      	ldr	r3, [r3, #28]
   2f29a:	2210      	movs	r2, #16
   2f29c:	18ba      	adds	r2, r7, r2
   2f29e:	0011      	movs	r1, r2
   2f2a0:	0018      	movs	r0, r3
   2f2a2:	4b10      	ldr	r3, [pc, #64]	; (2f2e4 <mqtt_connect_broker+0xe8>)
   2f2a4:	4798      	blx	r3
   2f2a6:	0003      	movs	r3, r0
   2f2a8:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2f2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2f2ac:	b2da      	uxtb	r2, r3
   2f2ae:	2368      	movs	r3, #104	; 0x68
   2f2b0:	18fb      	adds	r3, r7, r3
   2f2b2:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2f2b4:	68fb      	ldr	r3, [r7, #12]
   2f2b6:	681b      	ldr	r3, [r3, #0]
   2f2b8:	2b00      	cmp	r3, #0
   2f2ba:	d006      	beq.n	2f2ca <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2f2bc:	68fb      	ldr	r3, [r7, #12]
   2f2be:	681b      	ldr	r3, [r3, #0]
   2f2c0:	2268      	movs	r2, #104	; 0x68
   2f2c2:	18ba      	adds	r2, r7, r2
   2f2c4:	68f8      	ldr	r0, [r7, #12]
   2f2c6:	2101      	movs	r1, #1
   2f2c8:	4798      	blx	r3
	
	module->isConnected = true;
   2f2ca:	68fb      	ldr	r3, [r7, #12]
   2f2cc:	2234      	movs	r2, #52	; 0x34
   2f2ce:	2101      	movs	r1, #1
   2f2d0:	5499      	strb	r1, [r3, r2]
	return rc;
   2f2d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2f2d4:	0018      	movs	r0, r3
   2f2d6:	46bd      	mov	sp, r7
   2f2d8:	b01c      	add	sp, #112	; 0x70
   2f2da:	bd80      	pop	{r7, pc}
   2f2dc:	00039410 	.word	0x00039410
   2f2e0:	00034355 	.word	0x00034355
   2f2e4:	0002e625 	.word	0x0002e625

0002f2e8 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2f2e8:	b580      	push	{r7, lr}
   2f2ea:	b084      	sub	sp, #16
   2f2ec:	af00      	add	r7, sp, #0
   2f2ee:	6078      	str	r0, [r7, #4]
   2f2f0:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2f2f2:	687b      	ldr	r3, [r7, #4]
   2f2f4:	69db      	ldr	r3, [r3, #28]
   2f2f6:	0018      	movs	r0, r3
   2f2f8:	4b0c      	ldr	r3, [pc, #48]	; (2f32c <mqtt_disconnect+0x44>)
   2f2fa:	4798      	blx	r3
   2f2fc:	0003      	movs	r3, r0
   2f2fe:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2f300:	68fb      	ldr	r3, [r7, #12]
   2f302:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2f304:	687b      	ldr	r3, [r7, #4]
   2f306:	681b      	ldr	r3, [r3, #0]
   2f308:	2b00      	cmp	r3, #0
   2f30a:	d006      	beq.n	2f31a <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2f30c:	687b      	ldr	r3, [r7, #4]
   2f30e:	681b      	ldr	r3, [r3, #0]
   2f310:	2208      	movs	r2, #8
   2f312:	18ba      	adds	r2, r7, r2
   2f314:	6878      	ldr	r0, [r7, #4]
   2f316:	2105      	movs	r1, #5
   2f318:	4798      	blx	r3
	
	module->isConnected = false;
   2f31a:	687b      	ldr	r3, [r7, #4]
   2f31c:	2234      	movs	r2, #52	; 0x34
   2f31e:	2100      	movs	r1, #0
   2f320:	5499      	strb	r1, [r3, r2]
	return rc;
   2f322:	68fb      	ldr	r3, [r7, #12]
}
   2f324:	0018      	movs	r0, r3
   2f326:	46bd      	mov	sp, r7
   2f328:	b004      	add	sp, #16
   2f32a:	bd80      	pop	{r7, pc}
   2f32c:	0002eab1 	.word	0x0002eab1

0002f330 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2f330:	b580      	push	{r7, lr}
   2f332:	b08a      	sub	sp, #40	; 0x28
   2f334:	af00      	add	r7, sp, #0
   2f336:	60f8      	str	r0, [r7, #12]
   2f338:	60b9      	str	r1, [r7, #8]
   2f33a:	607a      	str	r2, [r7, #4]
   2f33c:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2f33e:	2314      	movs	r3, #20
   2f340:	18fb      	adds	r3, r7, r3
   2f342:	2230      	movs	r2, #48	; 0x30
   2f344:	18ba      	adds	r2, r7, r2
   2f346:	7812      	ldrb	r2, [r2, #0]
   2f348:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2f34a:	2314      	movs	r3, #20
   2f34c:	18fb      	adds	r3, r7, r3
   2f34e:	687a      	ldr	r2, [r7, #4]
   2f350:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2f352:	2314      	movs	r3, #20
   2f354:	18fb      	adds	r3, r7, r3
   2f356:	683a      	ldr	r2, [r7, #0]
   2f358:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2f35a:	2314      	movs	r3, #20
   2f35c:	18fb      	adds	r3, r7, r3
   2f35e:	2234      	movs	r2, #52	; 0x34
   2f360:	18ba      	adds	r2, r7, r2
   2f362:	7812      	ldrb	r2, [r2, #0]
   2f364:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2f366:	68fb      	ldr	r3, [r7, #12]
   2f368:	69db      	ldr	r3, [r3, #28]
   2f36a:	2214      	movs	r2, #20
   2f36c:	18ba      	adds	r2, r7, r2
   2f36e:	68b9      	ldr	r1, [r7, #8]
   2f370:	0018      	movs	r0, r3
   2f372:	4b09      	ldr	r3, [pc, #36]	; (2f398 <mqtt_publish+0x68>)
   2f374:	4798      	blx	r3
   2f376:	0003      	movs	r3, r0
   2f378:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2f37a:	68fb      	ldr	r3, [r7, #12]
   2f37c:	681b      	ldr	r3, [r3, #0]
   2f37e:	2b00      	cmp	r3, #0
   2f380:	d005      	beq.n	2f38e <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2f382:	68fb      	ldr	r3, [r7, #12]
   2f384:	681b      	ldr	r3, [r3, #0]
   2f386:	68f8      	ldr	r0, [r7, #12]
   2f388:	2200      	movs	r2, #0
   2f38a:	2102      	movs	r1, #2
   2f38c:	4798      	blx	r3
	
	return rc;
   2f38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f390:	0018      	movs	r0, r3
   2f392:	46bd      	mov	sp, r7
   2f394:	b00a      	add	sp, #40	; 0x28
   2f396:	bd80      	pop	{r7, pc}
   2f398:	0002e8f1 	.word	0x0002e8f1

0002f39c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2f39c:	b590      	push	{r4, r7, lr}
   2f39e:	b087      	sub	sp, #28
   2f3a0:	af00      	add	r7, sp, #0
   2f3a2:	60f8      	str	r0, [r7, #12]
   2f3a4:	60b9      	str	r1, [r7, #8]
   2f3a6:	603b      	str	r3, [r7, #0]
   2f3a8:	1dfb      	adds	r3, r7, #7
   2f3aa:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2f3ac:	68fb      	ldr	r3, [r7, #12]
   2f3ae:	69d8      	ldr	r0, [r3, #28]
   2f3b0:	683c      	ldr	r4, [r7, #0]
   2f3b2:	1dfb      	adds	r3, r7, #7
   2f3b4:	781a      	ldrb	r2, [r3, #0]
   2f3b6:	68b9      	ldr	r1, [r7, #8]
   2f3b8:	0023      	movs	r3, r4
   2f3ba:	4c09      	ldr	r4, [pc, #36]	; (2f3e0 <mqtt_subscribe+0x44>)
   2f3bc:	47a0      	blx	r4
   2f3be:	0003      	movs	r3, r0
   2f3c0:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2f3c2:	68fb      	ldr	r3, [r7, #12]
   2f3c4:	681b      	ldr	r3, [r3, #0]
   2f3c6:	2b00      	cmp	r3, #0
   2f3c8:	d005      	beq.n	2f3d6 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2f3ca:	68fb      	ldr	r3, [r7, #12]
   2f3cc:	681b      	ldr	r3, [r3, #0]
   2f3ce:	68f8      	ldr	r0, [r7, #12]
   2f3d0:	2200      	movs	r2, #0
   2f3d2:	2103      	movs	r1, #3
   2f3d4:	4798      	blx	r3
	
	return rc;
   2f3d6:	697b      	ldr	r3, [r7, #20]
}
   2f3d8:	0018      	movs	r0, r3
   2f3da:	46bd      	mov	sp, r7
   2f3dc:	b007      	add	sp, #28
   2f3de:	bd90      	pop	{r4, r7, pc}
   2f3e0:	0002e765 	.word	0x0002e765

0002f3e4 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2f3e4:	b580      	push	{r7, lr}
   2f3e6:	b082      	sub	sp, #8
   2f3e8:	af00      	add	r7, sp, #0
   2f3ea:	6078      	str	r0, [r7, #4]
   2f3ec:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2f3ee:	687b      	ldr	r3, [r7, #4]
   2f3f0:	69db      	ldr	r3, [r3, #28]
   2f3f2:	683a      	ldr	r2, [r7, #0]
   2f3f4:	0011      	movs	r1, r2
   2f3f6:	0018      	movs	r0, r3
   2f3f8:	4b03      	ldr	r3, [pc, #12]	; (2f408 <mqtt_yield+0x24>)
   2f3fa:	4798      	blx	r3
   2f3fc:	0003      	movs	r3, r0
   2f3fe:	0018      	movs	r0, r3
   2f400:	46bd      	mov	sp, r7
   2f402:	b002      	add	sp, #8
   2f404:	bd80      	pop	{r7, pc}
   2f406:	46c0      	nop			; (mov r8, r8)
   2f408:	0002e56d 	.word	0x0002e56d

0002f40c <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2f40c:	b590      	push	{r4, r7, lr}
   2f40e:	b085      	sub	sp, #20
   2f410:	af00      	add	r7, sp, #0
   2f412:	6078      	str	r0, [r7, #4]
	int len = 0;
   2f414:	2300      	movs	r3, #0
   2f416:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2f418:	687b      	ldr	r3, [r7, #4]
   2f41a:	7a1b      	ldrb	r3, [r3, #8]
   2f41c:	2b03      	cmp	r3, #3
   2f41e:	d102      	bne.n	2f426 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2f420:	230c      	movs	r3, #12
   2f422:	60fb      	str	r3, [r7, #12]
   2f424:	e005      	b.n	2f432 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2f426:	687b      	ldr	r3, [r7, #4]
   2f428:	7a1b      	ldrb	r3, [r3, #8]
   2f42a:	2b04      	cmp	r3, #4
   2f42c:	d101      	bne.n	2f432 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2f42e:	230a      	movs	r3, #10
   2f430:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2f432:	687b      	ldr	r3, [r7, #4]
   2f434:	68d8      	ldr	r0, [r3, #12]
   2f436:	6919      	ldr	r1, [r3, #16]
   2f438:	695a      	ldr	r2, [r3, #20]
   2f43a:	4b25      	ldr	r3, [pc, #148]	; (2f4d0 <MQTTSerialize_connectLength+0xc4>)
   2f43c:	4798      	blx	r3
   2f43e:	0003      	movs	r3, r0
   2f440:	3302      	adds	r3, #2
   2f442:	68fa      	ldr	r2, [r7, #12]
   2f444:	18d3      	adds	r3, r2, r3
   2f446:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2f448:	687b      	ldr	r3, [r7, #4]
   2f44a:	7edb      	ldrb	r3, [r3, #27]
   2f44c:	2b00      	cmp	r3, #0
   2f44e:	d013      	beq.n	2f478 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2f450:	687b      	ldr	r3, [r7, #4]
   2f452:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2f454:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2f456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2f458:	4b1d      	ldr	r3, [pc, #116]	; (2f4d0 <MQTTSerialize_connectLength+0xc4>)
   2f45a:	4798      	blx	r3
   2f45c:	0003      	movs	r3, r0
   2f45e:	1c9c      	adds	r4, r3, #2
   2f460:	687b      	ldr	r3, [r7, #4]
   2f462:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2f464:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2f466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2f468:	4b19      	ldr	r3, [pc, #100]	; (2f4d0 <MQTTSerialize_connectLength+0xc4>)
   2f46a:	4798      	blx	r3
   2f46c:	0003      	movs	r3, r0
   2f46e:	18e3      	adds	r3, r4, r3
   2f470:	3302      	adds	r3, #2
   2f472:	68fa      	ldr	r2, [r7, #12]
   2f474:	18d3      	adds	r3, r2, r3
   2f476:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2f478:	687b      	ldr	r3, [r7, #4]
   2f47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f47c:	2b00      	cmp	r3, #0
   2f47e:	d103      	bne.n	2f488 <MQTTSerialize_connectLength+0x7c>
   2f480:	687b      	ldr	r3, [r7, #4]
   2f482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f484:	2b00      	cmp	r3, #0
   2f486:	d00a      	beq.n	2f49e <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2f488:	687b      	ldr	r3, [r7, #4]
   2f48a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2f48c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2f48e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2f490:	4b0f      	ldr	r3, [pc, #60]	; (2f4d0 <MQTTSerialize_connectLength+0xc4>)
   2f492:	4798      	blx	r3
   2f494:	0003      	movs	r3, r0
   2f496:	3302      	adds	r3, #2
   2f498:	68fa      	ldr	r2, [r7, #12]
   2f49a:	18d3      	adds	r3, r2, r3
   2f49c:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2f49e:	687b      	ldr	r3, [r7, #4]
   2f4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f4a2:	2b00      	cmp	r3, #0
   2f4a4:	d103      	bne.n	2f4ae <MQTTSerialize_connectLength+0xa2>
   2f4a6:	687b      	ldr	r3, [r7, #4]
   2f4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f4aa:	2b00      	cmp	r3, #0
   2f4ac:	d00a      	beq.n	2f4c4 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2f4ae:	687b      	ldr	r3, [r7, #4]
   2f4b0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2f4b2:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2f4b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2f4b6:	4b06      	ldr	r3, [pc, #24]	; (2f4d0 <MQTTSerialize_connectLength+0xc4>)
   2f4b8:	4798      	blx	r3
   2f4ba:	0003      	movs	r3, r0
   2f4bc:	3302      	adds	r3, #2
   2f4be:	68fa      	ldr	r2, [r7, #12]
   2f4c0:	18d3      	adds	r3, r2, r3
   2f4c2:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2f4c4:	68fb      	ldr	r3, [r7, #12]
}
   2f4c6:	0018      	movs	r0, r3
   2f4c8:	46bd      	mov	sp, r7
   2f4ca:	b005      	add	sp, #20
   2f4cc:	bd90      	pop	{r4, r7, pc}
   2f4ce:	46c0      	nop			; (mov r8, r8)
   2f4d0:	0002fe7d 	.word	0x0002fe7d

0002f4d4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2f4d4:	b590      	push	{r4, r7, lr}
   2f4d6:	b08b      	sub	sp, #44	; 0x2c
   2f4d8:	af00      	add	r7, sp, #0
   2f4da:	60f8      	str	r0, [r7, #12]
   2f4dc:	60b9      	str	r1, [r7, #8]
   2f4de:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2f4e0:	68fb      	ldr	r3, [r7, #12]
   2f4e2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2f4e4:	2300      	movs	r3, #0
   2f4e6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2f4e8:	2300      	movs	r3, #0
   2f4ea:	617b      	str	r3, [r7, #20]
	int len = 0;
   2f4ec:	2300      	movs	r3, #0
   2f4ee:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2f4f0:	2301      	movs	r3, #1
   2f4f2:	425b      	negs	r3, r3
   2f4f4:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2f4f6:	687b      	ldr	r3, [r7, #4]
   2f4f8:	0018      	movs	r0, r3
   2f4fa:	4b8c      	ldr	r3, [pc, #560]	; (2f72c <MQTTSerialize_connect+0x258>)
   2f4fc:	4798      	blx	r3
   2f4fe:	0003      	movs	r3, r0
   2f500:	623b      	str	r3, [r7, #32]
   2f502:	6a3b      	ldr	r3, [r7, #32]
   2f504:	0018      	movs	r0, r3
   2f506:	4b8a      	ldr	r3, [pc, #552]	; (2f730 <MQTTSerialize_connect+0x25c>)
   2f508:	4798      	blx	r3
   2f50a:	0002      	movs	r2, r0
   2f50c:	68bb      	ldr	r3, [r7, #8]
   2f50e:	429a      	cmp	r2, r3
   2f510:	dd03      	ble.n	2f51a <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f512:	2302      	movs	r3, #2
   2f514:	425b      	negs	r3, r3
   2f516:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2f518:	e103      	b.n	2f722 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2f51a:	2318      	movs	r3, #24
   2f51c:	18fb      	adds	r3, r7, r3
   2f51e:	2200      	movs	r2, #0
   2f520:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2f522:	2318      	movs	r3, #24
   2f524:	18fb      	adds	r3, r7, r3
   2f526:	781a      	ldrb	r2, [r3, #0]
   2f528:	210f      	movs	r1, #15
   2f52a:	400a      	ands	r2, r1
   2f52c:	1c11      	adds	r1, r2, #0
   2f52e:	2210      	movs	r2, #16
   2f530:	430a      	orrs	r2, r1
   2f532:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f534:	2318      	movs	r3, #24
   2f536:	18fb      	adds	r3, r7, r3
   2f538:	781a      	ldrb	r2, [r3, #0]
   2f53a:	231c      	movs	r3, #28
   2f53c:	18fb      	adds	r3, r7, r3
   2f53e:	0011      	movs	r1, r2
   2f540:	0018      	movs	r0, r3
   2f542:	4b7c      	ldr	r3, [pc, #496]	; (2f734 <MQTTSerialize_connect+0x260>)
   2f544:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2f546:	69fb      	ldr	r3, [r7, #28]
   2f548:	6a3a      	ldr	r2, [r7, #32]
   2f54a:	0011      	movs	r1, r2
   2f54c:	0018      	movs	r0, r3
   2f54e:	4b7a      	ldr	r3, [pc, #488]	; (2f738 <MQTTSerialize_connect+0x264>)
   2f550:	4798      	blx	r3
   2f552:	0002      	movs	r2, r0
   2f554:	69fb      	ldr	r3, [r7, #28]
   2f556:	189b      	adds	r3, r3, r2
   2f558:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2f55a:	687b      	ldr	r3, [r7, #4]
   2f55c:	7a1b      	ldrb	r3, [r3, #8]
   2f55e:	2b04      	cmp	r3, #4
   2f560:	d10d      	bne.n	2f57e <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2f562:	4a76      	ldr	r2, [pc, #472]	; (2f73c <MQTTSerialize_connect+0x268>)
   2f564:	231c      	movs	r3, #28
   2f566:	18fb      	adds	r3, r7, r3
   2f568:	0011      	movs	r1, r2
   2f56a:	0018      	movs	r0, r3
   2f56c:	4b74      	ldr	r3, [pc, #464]	; (2f740 <MQTTSerialize_connect+0x26c>)
   2f56e:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2f570:	231c      	movs	r3, #28
   2f572:	18fb      	adds	r3, r7, r3
   2f574:	2104      	movs	r1, #4
   2f576:	0018      	movs	r0, r3
   2f578:	4b6e      	ldr	r3, [pc, #440]	; (2f734 <MQTTSerialize_connect+0x260>)
   2f57a:	4798      	blx	r3
   2f57c:	e00c      	b.n	2f598 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2f57e:	4a71      	ldr	r2, [pc, #452]	; (2f744 <MQTTSerialize_connect+0x270>)
   2f580:	231c      	movs	r3, #28
   2f582:	18fb      	adds	r3, r7, r3
   2f584:	0011      	movs	r1, r2
   2f586:	0018      	movs	r0, r3
   2f588:	4b6d      	ldr	r3, [pc, #436]	; (2f740 <MQTTSerialize_connect+0x26c>)
   2f58a:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2f58c:	231c      	movs	r3, #28
   2f58e:	18fb      	adds	r3, r7, r3
   2f590:	2103      	movs	r1, #3
   2f592:	0018      	movs	r0, r3
   2f594:	4b67      	ldr	r3, [pc, #412]	; (2f734 <MQTTSerialize_connect+0x260>)
   2f596:	4798      	blx	r3
	}

	flags.all = 0;
   2f598:	2314      	movs	r3, #20
   2f59a:	18fb      	adds	r3, r7, r3
   2f59c:	2200      	movs	r2, #0
   2f59e:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2f5a0:	687b      	ldr	r3, [r7, #4]
   2f5a2:	7e9b      	ldrb	r3, [r3, #26]
   2f5a4:	1c1a      	adds	r2, r3, #0
   2f5a6:	2301      	movs	r3, #1
   2f5a8:	4013      	ands	r3, r2
   2f5aa:	b2da      	uxtb	r2, r3
   2f5ac:	2314      	movs	r3, #20
   2f5ae:	18fb      	adds	r3, r7, r3
   2f5b0:	2101      	movs	r1, #1
   2f5b2:	400a      	ands	r2, r1
   2f5b4:	1890      	adds	r0, r2, r2
   2f5b6:	781a      	ldrb	r2, [r3, #0]
   2f5b8:	2102      	movs	r1, #2
   2f5ba:	438a      	bics	r2, r1
   2f5bc:	1c11      	adds	r1, r2, #0
   2f5be:	1c02      	adds	r2, r0, #0
   2f5c0:	430a      	orrs	r2, r1
   2f5c2:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2f5c4:	687b      	ldr	r3, [r7, #4]
   2f5c6:	7edb      	ldrb	r3, [r3, #27]
   2f5c8:	1e5a      	subs	r2, r3, #1
   2f5ca:	4193      	sbcs	r3, r2
   2f5cc:	b2da      	uxtb	r2, r3
   2f5ce:	2314      	movs	r3, #20
   2f5d0:	18fb      	adds	r3, r7, r3
   2f5d2:	2101      	movs	r1, #1
   2f5d4:	400a      	ands	r2, r1
   2f5d6:	0090      	lsls	r0, r2, #2
   2f5d8:	781a      	ldrb	r2, [r3, #0]
   2f5da:	2104      	movs	r1, #4
   2f5dc:	438a      	bics	r2, r1
   2f5de:	1c11      	adds	r1, r2, #0
   2f5e0:	1c02      	adds	r2, r0, #0
   2f5e2:	430a      	orrs	r2, r1
   2f5e4:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2f5e6:	2314      	movs	r3, #20
   2f5e8:	18fb      	adds	r3, r7, r3
   2f5ea:	781b      	ldrb	r3, [r3, #0]
   2f5ec:	2204      	movs	r2, #4
   2f5ee:	4013      	ands	r3, r2
   2f5f0:	b2db      	uxtb	r3, r3
   2f5f2:	2b00      	cmp	r3, #0
   2f5f4:	d025      	beq.n	2f642 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2f5f6:	687b      	ldr	r3, [r7, #4]
   2f5f8:	223d      	movs	r2, #61	; 0x3d
   2f5fa:	5c9b      	ldrb	r3, [r3, r2]
   2f5fc:	1c1a      	adds	r2, r3, #0
   2f5fe:	2303      	movs	r3, #3
   2f600:	4013      	ands	r3, r2
   2f602:	b2da      	uxtb	r2, r3
   2f604:	2314      	movs	r3, #20
   2f606:	18fb      	adds	r3, r7, r3
   2f608:	2103      	movs	r1, #3
   2f60a:	400a      	ands	r2, r1
   2f60c:	00d0      	lsls	r0, r2, #3
   2f60e:	781a      	ldrb	r2, [r3, #0]
   2f610:	2118      	movs	r1, #24
   2f612:	438a      	bics	r2, r1
   2f614:	1c11      	adds	r1, r2, #0
   2f616:	1c02      	adds	r2, r0, #0
   2f618:	430a      	orrs	r2, r1
   2f61a:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2f61c:	687b      	ldr	r3, [r7, #4]
   2f61e:	223c      	movs	r2, #60	; 0x3c
   2f620:	5c9b      	ldrb	r3, [r3, r2]
   2f622:	1c1a      	adds	r2, r3, #0
   2f624:	2301      	movs	r3, #1
   2f626:	4013      	ands	r3, r2
   2f628:	b2da      	uxtb	r2, r3
   2f62a:	2314      	movs	r3, #20
   2f62c:	18fb      	adds	r3, r7, r3
   2f62e:	2101      	movs	r1, #1
   2f630:	400a      	ands	r2, r1
   2f632:	0150      	lsls	r0, r2, #5
   2f634:	781a      	ldrb	r2, [r3, #0]
   2f636:	2120      	movs	r1, #32
   2f638:	438a      	bics	r2, r1
   2f63a:	1c11      	adds	r1, r2, #0
   2f63c:	1c02      	adds	r2, r0, #0
   2f63e:	430a      	orrs	r2, r1
   2f640:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2f642:	687b      	ldr	r3, [r7, #4]
   2f644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2f646:	2b00      	cmp	r3, #0
   2f648:	d103      	bne.n	2f652 <MQTTSerialize_connect+0x17e>
   2f64a:	687b      	ldr	r3, [r7, #4]
   2f64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f64e:	2b00      	cmp	r3, #0
   2f650:	d006      	beq.n	2f660 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2f652:	2314      	movs	r3, #20
   2f654:	18fb      	adds	r3, r7, r3
   2f656:	781a      	ldrb	r2, [r3, #0]
   2f658:	2180      	movs	r1, #128	; 0x80
   2f65a:	4249      	negs	r1, r1
   2f65c:	430a      	orrs	r2, r1
   2f65e:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2f660:	687b      	ldr	r3, [r7, #4]
   2f662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f664:	2b00      	cmp	r3, #0
   2f666:	d103      	bne.n	2f670 <MQTTSerialize_connect+0x19c>
   2f668:	687b      	ldr	r3, [r7, #4]
   2f66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f66c:	2b00      	cmp	r3, #0
   2f66e:	d005      	beq.n	2f67c <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2f670:	2314      	movs	r3, #20
   2f672:	18fb      	adds	r3, r7, r3
   2f674:	781a      	ldrb	r2, [r3, #0]
   2f676:	2140      	movs	r1, #64	; 0x40
   2f678:	430a      	orrs	r2, r1
   2f67a:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2f67c:	2314      	movs	r3, #20
   2f67e:	18fb      	adds	r3, r7, r3
   2f680:	781a      	ldrb	r2, [r3, #0]
   2f682:	231c      	movs	r3, #28
   2f684:	18fb      	adds	r3, r7, r3
   2f686:	0011      	movs	r1, r2
   2f688:	0018      	movs	r0, r3
   2f68a:	4b2a      	ldr	r3, [pc, #168]	; (2f734 <MQTTSerialize_connect+0x260>)
   2f68c:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2f68e:	687b      	ldr	r3, [r7, #4]
   2f690:	8b1b      	ldrh	r3, [r3, #24]
   2f692:	001a      	movs	r2, r3
   2f694:	231c      	movs	r3, #28
   2f696:	18fb      	adds	r3, r7, r3
   2f698:	0011      	movs	r1, r2
   2f69a:	0018      	movs	r0, r3
   2f69c:	4b2a      	ldr	r3, [pc, #168]	; (2f748 <MQTTSerialize_connect+0x274>)
   2f69e:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2f6a0:	687b      	ldr	r3, [r7, #4]
   2f6a2:	221c      	movs	r2, #28
   2f6a4:	18b8      	adds	r0, r7, r2
   2f6a6:	68d9      	ldr	r1, [r3, #12]
   2f6a8:	691a      	ldr	r2, [r3, #16]
   2f6aa:	695b      	ldr	r3, [r3, #20]
   2f6ac:	4c27      	ldr	r4, [pc, #156]	; (2f74c <MQTTSerialize_connect+0x278>)
   2f6ae:	47a0      	blx	r4
	if (options->willFlag)
   2f6b0:	687b      	ldr	r3, [r7, #4]
   2f6b2:	7edb      	ldrb	r3, [r3, #27]
   2f6b4:	2b00      	cmp	r3, #0
   2f6b6:	d00f      	beq.n	2f6d8 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2f6b8:	687b      	ldr	r3, [r7, #4]
   2f6ba:	221c      	movs	r2, #28
   2f6bc:	18b8      	adds	r0, r7, r2
   2f6be:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2f6c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2f6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2f6c4:	4c21      	ldr	r4, [pc, #132]	; (2f74c <MQTTSerialize_connect+0x278>)
   2f6c6:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2f6c8:	687b      	ldr	r3, [r7, #4]
   2f6ca:	221c      	movs	r2, #28
   2f6cc:	18b8      	adds	r0, r7, r2
   2f6ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2f6d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2f6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2f6d4:	4c1d      	ldr	r4, [pc, #116]	; (2f74c <MQTTSerialize_connect+0x278>)
   2f6d6:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2f6d8:	2314      	movs	r3, #20
   2f6da:	18fb      	adds	r3, r7, r3
   2f6dc:	781b      	ldrb	r3, [r3, #0]
   2f6de:	227f      	movs	r2, #127	; 0x7f
   2f6e0:	4393      	bics	r3, r2
   2f6e2:	b2db      	uxtb	r3, r3
   2f6e4:	2b00      	cmp	r3, #0
   2f6e6:	d007      	beq.n	2f6f8 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2f6e8:	687b      	ldr	r3, [r7, #4]
   2f6ea:	221c      	movs	r2, #28
   2f6ec:	18b8      	adds	r0, r7, r2
   2f6ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2f6f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f6f4:	4c15      	ldr	r4, [pc, #84]	; (2f74c <MQTTSerialize_connect+0x278>)
   2f6f6:	47a0      	blx	r4
	if (flags.bits.password)
   2f6f8:	2314      	movs	r3, #20
   2f6fa:	18fb      	adds	r3, r7, r3
   2f6fc:	781b      	ldrb	r3, [r3, #0]
   2f6fe:	2240      	movs	r2, #64	; 0x40
   2f700:	4013      	ands	r3, r2
   2f702:	b2db      	uxtb	r3, r3
   2f704:	2b00      	cmp	r3, #0
   2f706:	d007      	beq.n	2f718 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2f708:	687b      	ldr	r3, [r7, #4]
   2f70a:	221c      	movs	r2, #28
   2f70c:	18b8      	adds	r0, r7, r2
   2f70e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2f710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2f712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2f714:	4c0d      	ldr	r4, [pc, #52]	; (2f74c <MQTTSerialize_connect+0x278>)
   2f716:	47a0      	blx	r4

	rc = ptr - buf;
   2f718:	69fb      	ldr	r3, [r7, #28]
   2f71a:	001a      	movs	r2, r3
   2f71c:	68fb      	ldr	r3, [r7, #12]
   2f71e:	1ad3      	subs	r3, r2, r3
   2f720:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2f722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f724:	0018      	movs	r0, r3
   2f726:	46bd      	mov	sp, r7
   2f728:	b00b      	add	sp, #44	; 0x2c
   2f72a:	bd90      	pop	{r4, r7, pc}
   2f72c:	0002f40d 	.word	0x0002f40d
   2f730:	0002fba1 	.word	0x0002fba1
   2f734:	0002fcc3 	.word	0x0002fcc3
   2f738:	0002faa9 	.word	0x0002faa9
   2f73c:	00039468 	.word	0x00039468
   2f740:	0002fd45 	.word	0x0002fd45
   2f744:	00039470 	.word	0x00039470
   2f748:	0002fced 	.word	0x0002fced
   2f74c:	0002fd95 	.word	0x0002fd95

0002f750 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2f750:	b580      	push	{r7, lr}
   2f752:	b08a      	sub	sp, #40	; 0x28
   2f754:	af00      	add	r7, sp, #0
   2f756:	60f8      	str	r0, [r7, #12]
   2f758:	60b9      	str	r1, [r7, #8]
   2f75a:	607a      	str	r2, [r7, #4]
   2f75c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f75e:	2300      	movs	r3, #0
   2f760:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f762:	687b      	ldr	r3, [r7, #4]
   2f764:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f766:	2300      	movs	r3, #0
   2f768:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f76a:	2300      	movs	r3, #0
   2f76c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2f76e:	2300      	movs	r3, #0
   2f770:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f772:	2318      	movs	r3, #24
   2f774:	18fb      	adds	r3, r7, r3
   2f776:	0018      	movs	r0, r3
   2f778:	4b25      	ldr	r3, [pc, #148]	; (2f810 <MQTTDeserialize_connack+0xc0>)
   2f77a:	4798      	blx	r3
   2f77c:	0003      	movs	r3, r0
   2f77e:	001a      	movs	r2, r3
   2f780:	231c      	movs	r3, #28
   2f782:	18fb      	adds	r3, r7, r3
   2f784:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2f786:	231c      	movs	r3, #28
   2f788:	18fb      	adds	r3, r7, r3
   2f78a:	781b      	ldrb	r3, [r3, #0]
   2f78c:	220f      	movs	r2, #15
   2f78e:	4393      	bics	r3, r2
   2f790:	b2db      	uxtb	r3, r3
   2f792:	2b20      	cmp	r3, #32
   2f794:	d134      	bne.n	2f800 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f796:	69bb      	ldr	r3, [r7, #24]
   2f798:	2214      	movs	r2, #20
   2f79a:	18ba      	adds	r2, r7, r2
   2f79c:	0011      	movs	r1, r2
   2f79e:	0018      	movs	r0, r3
   2f7a0:	4b1c      	ldr	r3, [pc, #112]	; (2f814 <MQTTDeserialize_connack+0xc4>)
   2f7a2:	4798      	blx	r3
   2f7a4:	0003      	movs	r3, r0
   2f7a6:	627b      	str	r3, [r7, #36]	; 0x24
   2f7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f7aa:	69bb      	ldr	r3, [r7, #24]
   2f7ac:	189b      	adds	r3, r3, r2
   2f7ae:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f7b0:	69bb      	ldr	r3, [r7, #24]
   2f7b2:	697a      	ldr	r2, [r7, #20]
   2f7b4:	189b      	adds	r3, r3, r2
   2f7b6:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2f7b8:	6a3b      	ldr	r3, [r7, #32]
   2f7ba:	69ba      	ldr	r2, [r7, #24]
   2f7bc:	1a9b      	subs	r3, r3, r2
   2f7be:	2b01      	cmp	r3, #1
   2f7c0:	dd20      	ble.n	2f804 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2f7c2:	2318      	movs	r3, #24
   2f7c4:	18fb      	adds	r3, r7, r3
   2f7c6:	0018      	movs	r0, r3
   2f7c8:	4b11      	ldr	r3, [pc, #68]	; (2f810 <MQTTDeserialize_connack+0xc0>)
   2f7ca:	4798      	blx	r3
   2f7cc:	0003      	movs	r3, r0
   2f7ce:	001a      	movs	r2, r3
   2f7d0:	2310      	movs	r3, #16
   2f7d2:	18fb      	adds	r3, r7, r3
   2f7d4:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2f7d6:	2310      	movs	r3, #16
   2f7d8:	18fb      	adds	r3, r7, r3
   2f7da:	781b      	ldrb	r3, [r3, #0]
   2f7dc:	061b      	lsls	r3, r3, #24
   2f7de:	0fdb      	lsrs	r3, r3, #31
   2f7e0:	b2db      	uxtb	r3, r3
   2f7e2:	001a      	movs	r2, r3
   2f7e4:	68fb      	ldr	r3, [r7, #12]
   2f7e6:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2f7e8:	2318      	movs	r3, #24
   2f7ea:	18fb      	adds	r3, r7, r3
   2f7ec:	0018      	movs	r0, r3
   2f7ee:	4b08      	ldr	r3, [pc, #32]	; (2f810 <MQTTDeserialize_connack+0xc0>)
   2f7f0:	4798      	blx	r3
   2f7f2:	0003      	movs	r3, r0
   2f7f4:	001a      	movs	r2, r3
   2f7f6:	68bb      	ldr	r3, [r7, #8]
   2f7f8:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2f7fa:	2301      	movs	r3, #1
   2f7fc:	627b      	str	r3, [r7, #36]	; 0x24
   2f7fe:	e002      	b.n	2f806 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f800:	46c0      	nop			; (mov r8, r8)
   2f802:	e000      	b.n	2f806 <MQTTDeserialize_connack+0xb6>
		goto exit;
   2f804:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f808:	0018      	movs	r0, r3
   2f80a:	46bd      	mov	sp, r7
   2f80c:	b00a      	add	sp, #40	; 0x28
   2f80e:	bd80      	pop	{r7, pc}
   2f810:	0002fc97 	.word	0x0002fc97
   2f814:	0002fc31 	.word	0x0002fc31

0002f818 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2f818:	b580      	push	{r7, lr}
   2f81a:	b088      	sub	sp, #32
   2f81c:	af00      	add	r7, sp, #0
   2f81e:	60f8      	str	r0, [r7, #12]
   2f820:	60b9      	str	r1, [r7, #8]
   2f822:	1dfb      	adds	r3, r7, #7
   2f824:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f826:	2300      	movs	r3, #0
   2f828:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2f82a:	2301      	movs	r3, #1
   2f82c:	425b      	negs	r3, r3
   2f82e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f830:	68fb      	ldr	r3, [r7, #12]
   2f832:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2f834:	68bb      	ldr	r3, [r7, #8]
   2f836:	2b01      	cmp	r3, #1
   2f838:	dc03      	bgt.n	2f842 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f83a:	2302      	movs	r3, #2
   2f83c:	425b      	negs	r3, r3
   2f83e:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f840:	e029      	b.n	2f896 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2f842:	2318      	movs	r3, #24
   2f844:	18fb      	adds	r3, r7, r3
   2f846:	2200      	movs	r2, #0
   2f848:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2f84a:	1dfb      	adds	r3, r7, #7
   2f84c:	781b      	ldrb	r3, [r3, #0]
   2f84e:	220f      	movs	r2, #15
   2f850:	4013      	ands	r3, r2
   2f852:	b2da      	uxtb	r2, r3
   2f854:	2318      	movs	r3, #24
   2f856:	18fb      	adds	r3, r7, r3
   2f858:	0110      	lsls	r0, r2, #4
   2f85a:	781a      	ldrb	r2, [r3, #0]
   2f85c:	210f      	movs	r1, #15
   2f85e:	400a      	ands	r2, r1
   2f860:	1c11      	adds	r1, r2, #0
   2f862:	1c02      	adds	r2, r0, #0
   2f864:	430a      	orrs	r2, r1
   2f866:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f868:	2318      	movs	r3, #24
   2f86a:	18fb      	adds	r3, r7, r3
   2f86c:	781a      	ldrb	r2, [r3, #0]
   2f86e:	2314      	movs	r3, #20
   2f870:	18fb      	adds	r3, r7, r3
   2f872:	0011      	movs	r1, r2
   2f874:	0018      	movs	r0, r3
   2f876:	4b0a      	ldr	r3, [pc, #40]	; (2f8a0 <MQTTSerialize_zero+0x88>)
   2f878:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2f87a:	697b      	ldr	r3, [r7, #20]
   2f87c:	2100      	movs	r1, #0
   2f87e:	0018      	movs	r0, r3
   2f880:	4b08      	ldr	r3, [pc, #32]	; (2f8a4 <MQTTSerialize_zero+0x8c>)
   2f882:	4798      	blx	r3
   2f884:	0002      	movs	r2, r0
   2f886:	697b      	ldr	r3, [r7, #20]
   2f888:	189b      	adds	r3, r3, r2
   2f88a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2f88c:	697b      	ldr	r3, [r7, #20]
   2f88e:	001a      	movs	r2, r3
   2f890:	68fb      	ldr	r3, [r7, #12]
   2f892:	1ad3      	subs	r3, r2, r3
   2f894:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f896:	69fb      	ldr	r3, [r7, #28]
}
   2f898:	0018      	movs	r0, r3
   2f89a:	46bd      	mov	sp, r7
   2f89c:	b008      	add	sp, #32
   2f89e:	bd80      	pop	{r7, pc}
   2f8a0:	0002fcc3 	.word	0x0002fcc3
   2f8a4:	0002faa9 	.word	0x0002faa9

0002f8a8 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2f8a8:	b580      	push	{r7, lr}
   2f8aa:	b082      	sub	sp, #8
   2f8ac:	af00      	add	r7, sp, #0
   2f8ae:	6078      	str	r0, [r7, #4]
   2f8b0:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2f8b2:	6839      	ldr	r1, [r7, #0]
   2f8b4:	687b      	ldr	r3, [r7, #4]
   2f8b6:	220e      	movs	r2, #14
   2f8b8:	0018      	movs	r0, r3
   2f8ba:	4b03      	ldr	r3, [pc, #12]	; (2f8c8 <MQTTSerialize_disconnect+0x20>)
   2f8bc:	4798      	blx	r3
   2f8be:	0003      	movs	r3, r0
}
   2f8c0:	0018      	movs	r0, r3
   2f8c2:	46bd      	mov	sp, r7
   2f8c4:	b002      	add	sp, #8
   2f8c6:	bd80      	pop	{r7, pc}
   2f8c8:	0002f819 	.word	0x0002f819

0002f8cc <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2f8cc:	b580      	push	{r7, lr}
   2f8ce:	b082      	sub	sp, #8
   2f8d0:	af00      	add	r7, sp, #0
   2f8d2:	6078      	str	r0, [r7, #4]
   2f8d4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2f8d6:	6839      	ldr	r1, [r7, #0]
   2f8d8:	687b      	ldr	r3, [r7, #4]
   2f8da:	220c      	movs	r2, #12
   2f8dc:	0018      	movs	r0, r3
   2f8de:	4b03      	ldr	r3, [pc, #12]	; (2f8ec <MQTTSerialize_pingreq+0x20>)
   2f8e0:	4798      	blx	r3
   2f8e2:	0003      	movs	r3, r0
}
   2f8e4:	0018      	movs	r0, r3
   2f8e6:	46bd      	mov	sp, r7
   2f8e8:	b002      	add	sp, #8
   2f8ea:	bd80      	pop	{r7, pc}
   2f8ec:	0002f819 	.word	0x0002f819

0002f8f0 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2f8f0:	b580      	push	{r7, lr}
   2f8f2:	b08a      	sub	sp, #40	; 0x28
   2f8f4:	af00      	add	r7, sp, #0
   2f8f6:	60f8      	str	r0, [r7, #12]
   2f8f8:	60b9      	str	r1, [r7, #8]
   2f8fa:	607a      	str	r2, [r7, #4]
   2f8fc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f8fe:	2300      	movs	r3, #0
   2f900:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f904:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f906:	2300      	movs	r3, #0
   2f908:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f90a:	2300      	movs	r3, #0
   2f90c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2f90e:	2300      	movs	r3, #0
   2f910:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f912:	2318      	movs	r3, #24
   2f914:	18fb      	adds	r3, r7, r3
   2f916:	0018      	movs	r0, r3
   2f918:	4b32      	ldr	r3, [pc, #200]	; (2f9e4 <MQTTDeserialize_publish+0xf4>)
   2f91a:	4798      	blx	r3
   2f91c:	0003      	movs	r3, r0
   2f91e:	001a      	movs	r2, r3
   2f920:	231c      	movs	r3, #28
   2f922:	18fb      	adds	r3, r7, r3
   2f924:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2f926:	231c      	movs	r3, #28
   2f928:	18fb      	adds	r3, r7, r3
   2f92a:	781b      	ldrb	r3, [r3, #0]
   2f92c:	220f      	movs	r2, #15
   2f92e:	4393      	bics	r3, r2
   2f930:	b2db      	uxtb	r3, r3
   2f932:	2b30      	cmp	r3, #48	; 0x30
   2f934:	d150      	bne.n	2f9d8 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2f936:	231c      	movs	r3, #28
   2f938:	18fb      	adds	r3, r7, r3
   2f93a:	781b      	ldrb	r3, [r3, #0]
   2f93c:	071b      	lsls	r3, r3, #28
   2f93e:	0fdb      	lsrs	r3, r3, #31
   2f940:	b2db      	uxtb	r3, r3
   2f942:	001a      	movs	r2, r3
   2f944:	68fb      	ldr	r3, [r7, #12]
   2f946:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2f948:	231c      	movs	r3, #28
   2f94a:	18fb      	adds	r3, r7, r3
   2f94c:	781b      	ldrb	r3, [r3, #0]
   2f94e:	075b      	lsls	r3, r3, #29
   2f950:	0f9b      	lsrs	r3, r3, #30
   2f952:	b2db      	uxtb	r3, r3
   2f954:	001a      	movs	r2, r3
   2f956:	68bb      	ldr	r3, [r7, #8]
   2f958:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2f95a:	231c      	movs	r3, #28
   2f95c:	18fb      	adds	r3, r7, r3
   2f95e:	781b      	ldrb	r3, [r3, #0]
   2f960:	07db      	lsls	r3, r3, #31
   2f962:	0fdb      	lsrs	r3, r3, #31
   2f964:	b2db      	uxtb	r3, r3
   2f966:	001a      	movs	r2, r3
   2f968:	687b      	ldr	r3, [r7, #4]
   2f96a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f96c:	69bb      	ldr	r3, [r7, #24]
   2f96e:	2214      	movs	r2, #20
   2f970:	18ba      	adds	r2, r7, r2
   2f972:	0011      	movs	r1, r2
   2f974:	0018      	movs	r0, r3
   2f976:	4b1c      	ldr	r3, [pc, #112]	; (2f9e8 <MQTTDeserialize_publish+0xf8>)
   2f978:	4798      	blx	r3
   2f97a:	0003      	movs	r3, r0
   2f97c:	627b      	str	r3, [r7, #36]	; 0x24
   2f97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f980:	69bb      	ldr	r3, [r7, #24]
   2f982:	189b      	adds	r3, r3, r2
   2f984:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f986:	69bb      	ldr	r3, [r7, #24]
   2f988:	697a      	ldr	r2, [r7, #20]
   2f98a:	189b      	adds	r3, r3, r2
   2f98c:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f98e:	6a3a      	ldr	r2, [r7, #32]
   2f990:	2318      	movs	r3, #24
   2f992:	18f9      	adds	r1, r7, r3
   2f994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f996:	0018      	movs	r0, r3
   2f998:	4b14      	ldr	r3, [pc, #80]	; (2f9ec <MQTTDeserialize_publish+0xfc>)
   2f99a:	4798      	blx	r3
   2f99c:	1e03      	subs	r3, r0, #0
   2f99e:	d01c      	beq.n	2f9da <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2f9a0:	6a3b      	ldr	r3, [r7, #32]
   2f9a2:	69ba      	ldr	r2, [r7, #24]
   2f9a4:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2f9a6:	d418      	bmi.n	2f9da <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2f9a8:	68bb      	ldr	r3, [r7, #8]
   2f9aa:	681b      	ldr	r3, [r3, #0]
   2f9ac:	2b00      	cmp	r3, #0
   2f9ae:	dd08      	ble.n	2f9c2 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2f9b0:	2318      	movs	r3, #24
   2f9b2:	18fb      	adds	r3, r7, r3
   2f9b4:	0018      	movs	r0, r3
   2f9b6:	4b0e      	ldr	r3, [pc, #56]	; (2f9f0 <MQTTDeserialize_publish+0x100>)
   2f9b8:	4798      	blx	r3
   2f9ba:	0003      	movs	r3, r0
   2f9bc:	b29a      	uxth	r2, r3
   2f9be:	683b      	ldr	r3, [r7, #0]
   2f9c0:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2f9c2:	6a3b      	ldr	r3, [r7, #32]
   2f9c4:	69ba      	ldr	r2, [r7, #24]
   2f9c6:	1a9a      	subs	r2, r3, r2
   2f9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f9ca:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2f9cc:	69ba      	ldr	r2, [r7, #24]
   2f9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f9d0:	601a      	str	r2, [r3, #0]
	rc = 1;
   2f9d2:	2301      	movs	r3, #1
   2f9d4:	627b      	str	r3, [r7, #36]	; 0x24
   2f9d6:	e000      	b.n	2f9da <MQTTDeserialize_publish+0xea>
		goto exit;
   2f9d8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f9dc:	0018      	movs	r0, r3
   2f9de:	46bd      	mov	sp, r7
   2f9e0:	b00a      	add	sp, #40	; 0x28
   2f9e2:	bd80      	pop	{r7, pc}
   2f9e4:	0002fc97 	.word	0x0002fc97
   2f9e8:	0002fc31 	.word	0x0002fc31
   2f9ec:	0002fe15 	.word	0x0002fe15
   2f9f0:	0002fc65 	.word	0x0002fc65

0002f9f4 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2f9f4:	b580      	push	{r7, lr}
   2f9f6:	b08a      	sub	sp, #40	; 0x28
   2f9f8:	af00      	add	r7, sp, #0
   2f9fa:	60f8      	str	r0, [r7, #12]
   2f9fc:	60b9      	str	r1, [r7, #8]
   2f9fe:	607a      	str	r2, [r7, #4]
   2fa00:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2fa02:	2300      	movs	r3, #0
   2fa04:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fa06:	683b      	ldr	r3, [r7, #0]
   2fa08:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fa0a:	2300      	movs	r3, #0
   2fa0c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fa0e:	2300      	movs	r3, #0
   2fa10:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2fa12:	2318      	movs	r3, #24
   2fa14:	18fb      	adds	r3, r7, r3
   2fa16:	0018      	movs	r0, r3
   2fa18:	4b20      	ldr	r3, [pc, #128]	; (2fa9c <MQTTDeserialize_ack+0xa8>)
   2fa1a:	4798      	blx	r3
   2fa1c:	0003      	movs	r3, r0
   2fa1e:	001a      	movs	r2, r3
   2fa20:	231c      	movs	r3, #28
   2fa22:	18fb      	adds	r3, r7, r3
   2fa24:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2fa26:	231c      	movs	r3, #28
   2fa28:	18fb      	adds	r3, r7, r3
   2fa2a:	781b      	ldrb	r3, [r3, #0]
   2fa2c:	071b      	lsls	r3, r3, #28
   2fa2e:	0fdb      	lsrs	r3, r3, #31
   2fa30:	b2db      	uxtb	r3, r3
   2fa32:	001a      	movs	r2, r3
   2fa34:	68bb      	ldr	r3, [r7, #8]
   2fa36:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2fa38:	231c      	movs	r3, #28
   2fa3a:	18fb      	adds	r3, r7, r3
   2fa3c:	781b      	ldrb	r3, [r3, #0]
   2fa3e:	061b      	lsls	r3, r3, #24
   2fa40:	0f1b      	lsrs	r3, r3, #28
   2fa42:	b2db      	uxtb	r3, r3
   2fa44:	001a      	movs	r2, r3
   2fa46:	68fb      	ldr	r3, [r7, #12]
   2fa48:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2fa4a:	69bb      	ldr	r3, [r7, #24]
   2fa4c:	2214      	movs	r2, #20
   2fa4e:	18ba      	adds	r2, r7, r2
   2fa50:	0011      	movs	r1, r2
   2fa52:	0018      	movs	r0, r3
   2fa54:	4b12      	ldr	r3, [pc, #72]	; (2faa0 <MQTTDeserialize_ack+0xac>)
   2fa56:	4798      	blx	r3
   2fa58:	0003      	movs	r3, r0
   2fa5a:	627b      	str	r3, [r7, #36]	; 0x24
   2fa5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2fa5e:	69bb      	ldr	r3, [r7, #24]
   2fa60:	189b      	adds	r3, r3, r2
   2fa62:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2fa64:	69bb      	ldr	r3, [r7, #24]
   2fa66:	697a      	ldr	r2, [r7, #20]
   2fa68:	189b      	adds	r3, r3, r2
   2fa6a:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2fa6c:	6a3b      	ldr	r3, [r7, #32]
   2fa6e:	69ba      	ldr	r2, [r7, #24]
   2fa70:	1a9b      	subs	r3, r3, r2
   2fa72:	2b01      	cmp	r3, #1
   2fa74:	dd0b      	ble.n	2fa8e <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2fa76:	2318      	movs	r3, #24
   2fa78:	18fb      	adds	r3, r7, r3
   2fa7a:	0018      	movs	r0, r3
   2fa7c:	4b09      	ldr	r3, [pc, #36]	; (2faa4 <MQTTDeserialize_ack+0xb0>)
   2fa7e:	4798      	blx	r3
   2fa80:	0003      	movs	r3, r0
   2fa82:	b29a      	uxth	r2, r3
   2fa84:	687b      	ldr	r3, [r7, #4]
   2fa86:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2fa88:	2301      	movs	r3, #1
   2fa8a:	627b      	str	r3, [r7, #36]	; 0x24
   2fa8c:	e000      	b.n	2fa90 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2fa8e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2fa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fa92:	0018      	movs	r0, r3
   2fa94:	46bd      	mov	sp, r7
   2fa96:	b00a      	add	sp, #40	; 0x28
   2fa98:	bd80      	pop	{r7, pc}
   2fa9a:	46c0      	nop			; (mov r8, r8)
   2fa9c:	0002fc97 	.word	0x0002fc97
   2faa0:	0002fc31 	.word	0x0002fc31
   2faa4:	0002fc65 	.word	0x0002fc65

0002faa8 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2faa8:	b580      	push	{r7, lr}
   2faaa:	b084      	sub	sp, #16
   2faac:	af00      	add	r7, sp, #0
   2faae:	6078      	str	r0, [r7, #4]
   2fab0:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2fab2:	2300      	movs	r3, #0
   2fab4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2fab6:	683b      	ldr	r3, [r7, #0]
   2fab8:	4a17      	ldr	r2, [pc, #92]	; (2fb18 <MQTTPacket_encode+0x70>)
   2faba:	4013      	ands	r3, r2
   2fabc:	d504      	bpl.n	2fac8 <MQTTPacket_encode+0x20>
   2fabe:	3b01      	subs	r3, #1
   2fac0:	2280      	movs	r2, #128	; 0x80
   2fac2:	4252      	negs	r2, r2
   2fac4:	4313      	orrs	r3, r2
   2fac6:	3301      	adds	r3, #1
   2fac8:	001a      	movs	r2, r3
   2faca:	230b      	movs	r3, #11
   2facc:	18fb      	adds	r3, r7, r3
   2face:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2fad0:	683b      	ldr	r3, [r7, #0]
   2fad2:	2b00      	cmp	r3, #0
   2fad4:	da00      	bge.n	2fad8 <MQTTPacket_encode+0x30>
   2fad6:	337f      	adds	r3, #127	; 0x7f
   2fad8:	11db      	asrs	r3, r3, #7
   2fada:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2fadc:	683b      	ldr	r3, [r7, #0]
   2fade:	2b00      	cmp	r3, #0
   2fae0:	dd08      	ble.n	2faf4 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2fae2:	230b      	movs	r3, #11
   2fae4:	18fb      	adds	r3, r7, r3
   2fae6:	220b      	movs	r2, #11
   2fae8:	18ba      	adds	r2, r7, r2
   2faea:	7812      	ldrb	r2, [r2, #0]
   2faec:	2180      	movs	r1, #128	; 0x80
   2faee:	4249      	negs	r1, r1
   2faf0:	430a      	orrs	r2, r1
   2faf2:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2faf4:	68fb      	ldr	r3, [r7, #12]
   2faf6:	1c5a      	adds	r2, r3, #1
   2faf8:	60fa      	str	r2, [r7, #12]
   2fafa:	001a      	movs	r2, r3
   2fafc:	687b      	ldr	r3, [r7, #4]
   2fafe:	189b      	adds	r3, r3, r2
   2fb00:	220b      	movs	r2, #11
   2fb02:	18ba      	adds	r2, r7, r2
   2fb04:	7812      	ldrb	r2, [r2, #0]
   2fb06:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2fb08:	683b      	ldr	r3, [r7, #0]
   2fb0a:	2b00      	cmp	r3, #0
   2fb0c:	dcd3      	bgt.n	2fab6 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2fb0e:	68fb      	ldr	r3, [r7, #12]
}
   2fb10:	0018      	movs	r0, r3
   2fb12:	46bd      	mov	sp, r7
   2fb14:	b004      	add	sp, #16
   2fb16:	bd80      	pop	{r7, pc}
   2fb18:	8000007f 	.word	0x8000007f

0002fb1c <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2fb1c:	b580      	push	{r7, lr}
   2fb1e:	b086      	sub	sp, #24
   2fb20:	af00      	add	r7, sp, #0
   2fb22:	6078      	str	r0, [r7, #4]
   2fb24:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2fb26:	2301      	movs	r3, #1
   2fb28:	617b      	str	r3, [r7, #20]
	int len = 0;
   2fb2a:	2300      	movs	r3, #0
   2fb2c:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2fb2e:	683b      	ldr	r3, [r7, #0]
   2fb30:	2200      	movs	r2, #0
   2fb32:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2fb34:	2301      	movs	r3, #1
   2fb36:	425b      	negs	r3, r3
   2fb38:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2fb3a:	693b      	ldr	r3, [r7, #16]
   2fb3c:	3301      	adds	r3, #1
   2fb3e:	613b      	str	r3, [r7, #16]
   2fb40:	693b      	ldr	r3, [r7, #16]
   2fb42:	2b04      	cmp	r3, #4
   2fb44:	dd03      	ble.n	2fb4e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2fb46:	2301      	movs	r3, #1
   2fb48:	425b      	negs	r3, r3
   2fb4a:	60fb      	str	r3, [r7, #12]
			goto exit;
   2fb4c:	e022      	b.n	2fb94 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2fb4e:	230b      	movs	r3, #11
   2fb50:	18fa      	adds	r2, r7, r3
   2fb52:	687b      	ldr	r3, [r7, #4]
   2fb54:	2101      	movs	r1, #1
   2fb56:	0010      	movs	r0, r2
   2fb58:	4798      	blx	r3
   2fb5a:	0003      	movs	r3, r0
   2fb5c:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2fb5e:	68fb      	ldr	r3, [r7, #12]
   2fb60:	2b01      	cmp	r3, #1
   2fb62:	d116      	bne.n	2fb92 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2fb64:	683b      	ldr	r3, [r7, #0]
   2fb66:	681a      	ldr	r2, [r3, #0]
   2fb68:	230b      	movs	r3, #11
   2fb6a:	18fb      	adds	r3, r7, r3
   2fb6c:	781b      	ldrb	r3, [r3, #0]
   2fb6e:	0019      	movs	r1, r3
   2fb70:	237f      	movs	r3, #127	; 0x7f
   2fb72:	400b      	ands	r3, r1
   2fb74:	6979      	ldr	r1, [r7, #20]
   2fb76:	434b      	muls	r3, r1
   2fb78:	18d2      	adds	r2, r2, r3
   2fb7a:	683b      	ldr	r3, [r7, #0]
   2fb7c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2fb7e:	697b      	ldr	r3, [r7, #20]
   2fb80:	01db      	lsls	r3, r3, #7
   2fb82:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2fb84:	230b      	movs	r3, #11
   2fb86:	18fb      	adds	r3, r7, r3
   2fb88:	781b      	ldrb	r3, [r3, #0]
   2fb8a:	b25b      	sxtb	r3, r3
   2fb8c:	2b00      	cmp	r3, #0
   2fb8e:	dbd1      	blt.n	2fb34 <MQTTPacket_decode+0x18>
   2fb90:	e000      	b.n	2fb94 <MQTTPacket_decode+0x78>
			goto exit;
   2fb92:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2fb94:	693b      	ldr	r3, [r7, #16]
}
   2fb96:	0018      	movs	r0, r3
   2fb98:	46bd      	mov	sp, r7
   2fb9a:	b006      	add	sp, #24
   2fb9c:	bd80      	pop	{r7, pc}
	...

0002fba0 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2fba0:	b580      	push	{r7, lr}
   2fba2:	b082      	sub	sp, #8
   2fba4:	af00      	add	r7, sp, #0
   2fba6:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2fba8:	687b      	ldr	r3, [r7, #4]
   2fbaa:	3301      	adds	r3, #1
   2fbac:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2fbae:	687b      	ldr	r3, [r7, #4]
   2fbb0:	2b7f      	cmp	r3, #127	; 0x7f
   2fbb2:	dc03      	bgt.n	2fbbc <MQTTPacket_len+0x1c>
		rem_len += 1;
   2fbb4:	687b      	ldr	r3, [r7, #4]
   2fbb6:	3301      	adds	r3, #1
   2fbb8:	607b      	str	r3, [r7, #4]
   2fbba:	e012      	b.n	2fbe2 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2fbbc:	687b      	ldr	r3, [r7, #4]
   2fbbe:	4a0b      	ldr	r2, [pc, #44]	; (2fbec <MQTTPacket_len+0x4c>)
   2fbc0:	4293      	cmp	r3, r2
   2fbc2:	dc03      	bgt.n	2fbcc <MQTTPacket_len+0x2c>
		rem_len += 2;
   2fbc4:	687b      	ldr	r3, [r7, #4]
   2fbc6:	3302      	adds	r3, #2
   2fbc8:	607b      	str	r3, [r7, #4]
   2fbca:	e00a      	b.n	2fbe2 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2fbcc:	687b      	ldr	r3, [r7, #4]
   2fbce:	4a08      	ldr	r2, [pc, #32]	; (2fbf0 <MQTTPacket_len+0x50>)
   2fbd0:	4293      	cmp	r3, r2
   2fbd2:	dc03      	bgt.n	2fbdc <MQTTPacket_len+0x3c>
		rem_len += 3;
   2fbd4:	687b      	ldr	r3, [r7, #4]
   2fbd6:	3303      	adds	r3, #3
   2fbd8:	607b      	str	r3, [r7, #4]
   2fbda:	e002      	b.n	2fbe2 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2fbdc:	687b      	ldr	r3, [r7, #4]
   2fbde:	3304      	adds	r3, #4
   2fbe0:	607b      	str	r3, [r7, #4]
	return rem_len;
   2fbe2:	687b      	ldr	r3, [r7, #4]
}
   2fbe4:	0018      	movs	r0, r3
   2fbe6:	46bd      	mov	sp, r7
   2fbe8:	b002      	add	sp, #8
   2fbea:	bd80      	pop	{r7, pc}
   2fbec:	00003fff 	.word	0x00003fff
   2fbf0:	001ffffe 	.word	0x001ffffe

0002fbf4 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2fbf4:	b580      	push	{r7, lr}
   2fbf6:	b084      	sub	sp, #16
   2fbf8:	af00      	add	r7, sp, #0
   2fbfa:	6078      	str	r0, [r7, #4]
   2fbfc:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2fbfe:	2300      	movs	r3, #0
   2fc00:	60fb      	str	r3, [r7, #12]
   2fc02:	e00a      	b.n	2fc1a <bufchar+0x26>
		*c = *bufptr++;
   2fc04:	4b09      	ldr	r3, [pc, #36]	; (2fc2c <bufchar+0x38>)
   2fc06:	681b      	ldr	r3, [r3, #0]
   2fc08:	1c59      	adds	r1, r3, #1
   2fc0a:	4a08      	ldr	r2, [pc, #32]	; (2fc2c <bufchar+0x38>)
   2fc0c:	6011      	str	r1, [r2, #0]
   2fc0e:	781a      	ldrb	r2, [r3, #0]
   2fc10:	687b      	ldr	r3, [r7, #4]
   2fc12:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2fc14:	68fb      	ldr	r3, [r7, #12]
   2fc16:	3301      	adds	r3, #1
   2fc18:	60fb      	str	r3, [r7, #12]
   2fc1a:	68fa      	ldr	r2, [r7, #12]
   2fc1c:	683b      	ldr	r3, [r7, #0]
   2fc1e:	429a      	cmp	r2, r3
   2fc20:	dbf0      	blt.n	2fc04 <bufchar+0x10>
	return count;
   2fc22:	683b      	ldr	r3, [r7, #0]
}
   2fc24:	0018      	movs	r0, r3
   2fc26:	46bd      	mov	sp, r7
   2fc28:	b004      	add	sp, #16
   2fc2a:	bd80      	pop	{r7, pc}
   2fc2c:	200042d8 	.word	0x200042d8

0002fc30 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2fc30:	b580      	push	{r7, lr}
   2fc32:	b082      	sub	sp, #8
   2fc34:	af00      	add	r7, sp, #0
   2fc36:	6078      	str	r0, [r7, #4]
   2fc38:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2fc3a:	4b07      	ldr	r3, [pc, #28]	; (2fc58 <MQTTPacket_decodeBuf+0x28>)
   2fc3c:	687a      	ldr	r2, [r7, #4]
   2fc3e:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2fc40:	683a      	ldr	r2, [r7, #0]
   2fc42:	4b06      	ldr	r3, [pc, #24]	; (2fc5c <MQTTPacket_decodeBuf+0x2c>)
   2fc44:	0011      	movs	r1, r2
   2fc46:	0018      	movs	r0, r3
   2fc48:	4b05      	ldr	r3, [pc, #20]	; (2fc60 <MQTTPacket_decodeBuf+0x30>)
   2fc4a:	4798      	blx	r3
   2fc4c:	0003      	movs	r3, r0
}
   2fc4e:	0018      	movs	r0, r3
   2fc50:	46bd      	mov	sp, r7
   2fc52:	b002      	add	sp, #8
   2fc54:	bd80      	pop	{r7, pc}
   2fc56:	46c0      	nop			; (mov r8, r8)
   2fc58:	200042d8 	.word	0x200042d8
   2fc5c:	0002fbf5 	.word	0x0002fbf5
   2fc60:	0002fb1d 	.word	0x0002fb1d

0002fc64 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2fc64:	b580      	push	{r7, lr}
   2fc66:	b084      	sub	sp, #16
   2fc68:	af00      	add	r7, sp, #0
   2fc6a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2fc6c:	687b      	ldr	r3, [r7, #4]
   2fc6e:	681b      	ldr	r3, [r3, #0]
   2fc70:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2fc72:	68fb      	ldr	r3, [r7, #12]
   2fc74:	781b      	ldrb	r3, [r3, #0]
   2fc76:	021b      	lsls	r3, r3, #8
   2fc78:	68fa      	ldr	r2, [r7, #12]
   2fc7a:	3201      	adds	r2, #1
   2fc7c:	7812      	ldrb	r2, [r2, #0]
   2fc7e:	189b      	adds	r3, r3, r2
   2fc80:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2fc82:	687b      	ldr	r3, [r7, #4]
   2fc84:	681b      	ldr	r3, [r3, #0]
   2fc86:	1c9a      	adds	r2, r3, #2
   2fc88:	687b      	ldr	r3, [r7, #4]
   2fc8a:	601a      	str	r2, [r3, #0]
	return len;
   2fc8c:	68bb      	ldr	r3, [r7, #8]
}
   2fc8e:	0018      	movs	r0, r3
   2fc90:	46bd      	mov	sp, r7
   2fc92:	b004      	add	sp, #16
   2fc94:	bd80      	pop	{r7, pc}

0002fc96 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2fc96:	b580      	push	{r7, lr}
   2fc98:	b084      	sub	sp, #16
   2fc9a:	af00      	add	r7, sp, #0
   2fc9c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2fc9e:	687b      	ldr	r3, [r7, #4]
   2fca0:	681a      	ldr	r2, [r3, #0]
   2fca2:	230f      	movs	r3, #15
   2fca4:	18fb      	adds	r3, r7, r3
   2fca6:	7812      	ldrb	r2, [r2, #0]
   2fca8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2fcaa:	687b      	ldr	r3, [r7, #4]
   2fcac:	681b      	ldr	r3, [r3, #0]
   2fcae:	1c5a      	adds	r2, r3, #1
   2fcb0:	687b      	ldr	r3, [r7, #4]
   2fcb2:	601a      	str	r2, [r3, #0]
	return c;
   2fcb4:	230f      	movs	r3, #15
   2fcb6:	18fb      	adds	r3, r7, r3
   2fcb8:	781b      	ldrb	r3, [r3, #0]
}
   2fcba:	0018      	movs	r0, r3
   2fcbc:	46bd      	mov	sp, r7
   2fcbe:	b004      	add	sp, #16
   2fcc0:	bd80      	pop	{r7, pc}

0002fcc2 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2fcc2:	b580      	push	{r7, lr}
   2fcc4:	b082      	sub	sp, #8
   2fcc6:	af00      	add	r7, sp, #0
   2fcc8:	6078      	str	r0, [r7, #4]
   2fcca:	000a      	movs	r2, r1
   2fccc:	1cfb      	adds	r3, r7, #3
   2fcce:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2fcd0:	687b      	ldr	r3, [r7, #4]
   2fcd2:	681b      	ldr	r3, [r3, #0]
   2fcd4:	1cfa      	adds	r2, r7, #3
   2fcd6:	7812      	ldrb	r2, [r2, #0]
   2fcd8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2fcda:	687b      	ldr	r3, [r7, #4]
   2fcdc:	681b      	ldr	r3, [r3, #0]
   2fcde:	1c5a      	adds	r2, r3, #1
   2fce0:	687b      	ldr	r3, [r7, #4]
   2fce2:	601a      	str	r2, [r3, #0]
}
   2fce4:	46c0      	nop			; (mov r8, r8)
   2fce6:	46bd      	mov	sp, r7
   2fce8:	b002      	add	sp, #8
   2fcea:	bd80      	pop	{r7, pc}

0002fcec <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2fcec:	b580      	push	{r7, lr}
   2fcee:	b082      	sub	sp, #8
   2fcf0:	af00      	add	r7, sp, #0
   2fcf2:	6078      	str	r0, [r7, #4]
   2fcf4:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2fcf6:	687b      	ldr	r3, [r7, #4]
   2fcf8:	681a      	ldr	r2, [r3, #0]
   2fcfa:	683b      	ldr	r3, [r7, #0]
   2fcfc:	2b00      	cmp	r3, #0
   2fcfe:	da00      	bge.n	2fd02 <writeInt+0x16>
   2fd00:	33ff      	adds	r3, #255	; 0xff
   2fd02:	121b      	asrs	r3, r3, #8
   2fd04:	b2db      	uxtb	r3, r3
   2fd06:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2fd08:	687b      	ldr	r3, [r7, #4]
   2fd0a:	681b      	ldr	r3, [r3, #0]
   2fd0c:	1c5a      	adds	r2, r3, #1
   2fd0e:	687b      	ldr	r3, [r7, #4]
   2fd10:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2fd12:	687b      	ldr	r3, [r7, #4]
   2fd14:	681a      	ldr	r2, [r3, #0]
   2fd16:	683b      	ldr	r3, [r7, #0]
   2fd18:	4908      	ldr	r1, [pc, #32]	; (2fd3c <writeInt+0x50>)
   2fd1a:	400b      	ands	r3, r1
   2fd1c:	d503      	bpl.n	2fd26 <writeInt+0x3a>
   2fd1e:	3b01      	subs	r3, #1
   2fd20:	4907      	ldr	r1, [pc, #28]	; (2fd40 <writeInt+0x54>)
   2fd22:	430b      	orrs	r3, r1
   2fd24:	3301      	adds	r3, #1
   2fd26:	b2db      	uxtb	r3, r3
   2fd28:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2fd2a:	687b      	ldr	r3, [r7, #4]
   2fd2c:	681b      	ldr	r3, [r3, #0]
   2fd2e:	1c5a      	adds	r2, r3, #1
   2fd30:	687b      	ldr	r3, [r7, #4]
   2fd32:	601a      	str	r2, [r3, #0]
}
   2fd34:	46c0      	nop			; (mov r8, r8)
   2fd36:	46bd      	mov	sp, r7
   2fd38:	b002      	add	sp, #8
   2fd3a:	bd80      	pop	{r7, pc}
   2fd3c:	800000ff 	.word	0x800000ff
   2fd40:	ffffff00 	.word	0xffffff00

0002fd44 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2fd44:	b580      	push	{r7, lr}
   2fd46:	b084      	sub	sp, #16
   2fd48:	af00      	add	r7, sp, #0
   2fd4a:	6078      	str	r0, [r7, #4]
   2fd4c:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2fd4e:	683b      	ldr	r3, [r7, #0]
   2fd50:	0018      	movs	r0, r3
   2fd52:	4b0d      	ldr	r3, [pc, #52]	; (2fd88 <writeCString+0x44>)
   2fd54:	4798      	blx	r3
   2fd56:	0003      	movs	r3, r0
   2fd58:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2fd5a:	68fa      	ldr	r2, [r7, #12]
   2fd5c:	687b      	ldr	r3, [r7, #4]
   2fd5e:	0011      	movs	r1, r2
   2fd60:	0018      	movs	r0, r3
   2fd62:	4b0a      	ldr	r3, [pc, #40]	; (2fd8c <writeCString+0x48>)
   2fd64:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2fd66:	687b      	ldr	r3, [r7, #4]
   2fd68:	681b      	ldr	r3, [r3, #0]
   2fd6a:	68fa      	ldr	r2, [r7, #12]
   2fd6c:	6839      	ldr	r1, [r7, #0]
   2fd6e:	0018      	movs	r0, r3
   2fd70:	4b07      	ldr	r3, [pc, #28]	; (2fd90 <writeCString+0x4c>)
   2fd72:	4798      	blx	r3
	*pptr += len;
   2fd74:	687b      	ldr	r3, [r7, #4]
   2fd76:	681a      	ldr	r2, [r3, #0]
   2fd78:	68fb      	ldr	r3, [r7, #12]
   2fd7a:	18d2      	adds	r2, r2, r3
   2fd7c:	687b      	ldr	r3, [r7, #4]
   2fd7e:	601a      	str	r2, [r3, #0]
}
   2fd80:	46c0      	nop			; (mov r8, r8)
   2fd82:	46bd      	mov	sp, r7
   2fd84:	b004      	add	sp, #16
   2fd86:	bd80      	pop	{r7, pc}
   2fd88:	00034727 	.word	0x00034727
   2fd8c:	0002fced 	.word	0x0002fced
   2fd90:	00034355 	.word	0x00034355

0002fd94 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2fd94:	b580      	push	{r7, lr}
   2fd96:	b084      	sub	sp, #16
   2fd98:	af00      	add	r7, sp, #0
   2fd9a:	60f8      	str	r0, [r7, #12]
   2fd9c:	0038      	movs	r0, r7
   2fd9e:	6001      	str	r1, [r0, #0]
   2fda0:	6042      	str	r2, [r0, #4]
   2fda2:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2fda4:	003b      	movs	r3, r7
   2fda6:	685b      	ldr	r3, [r3, #4]
   2fda8:	2b00      	cmp	r3, #0
   2fdaa:	dd17      	ble.n	2fddc <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2fdac:	003b      	movs	r3, r7
   2fdae:	685a      	ldr	r2, [r3, #4]
   2fdb0:	68fb      	ldr	r3, [r7, #12]
   2fdb2:	0011      	movs	r1, r2
   2fdb4:	0018      	movs	r0, r3
   2fdb6:	4b14      	ldr	r3, [pc, #80]	; (2fe08 <writeMQTTString+0x74>)
   2fdb8:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2fdba:	68fb      	ldr	r3, [r7, #12]
   2fdbc:	6818      	ldr	r0, [r3, #0]
   2fdbe:	003b      	movs	r3, r7
   2fdc0:	6899      	ldr	r1, [r3, #8]
   2fdc2:	003b      	movs	r3, r7
   2fdc4:	685b      	ldr	r3, [r3, #4]
   2fdc6:	001a      	movs	r2, r3
   2fdc8:	4b10      	ldr	r3, [pc, #64]	; (2fe0c <writeMQTTString+0x78>)
   2fdca:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2fdcc:	68fb      	ldr	r3, [r7, #12]
   2fdce:	681a      	ldr	r2, [r3, #0]
   2fdd0:	003b      	movs	r3, r7
   2fdd2:	685b      	ldr	r3, [r3, #4]
   2fdd4:	18d2      	adds	r2, r2, r3
   2fdd6:	68fb      	ldr	r3, [r7, #12]
   2fdd8:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2fdda:	e010      	b.n	2fdfe <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2fddc:	003b      	movs	r3, r7
   2fdde:	681b      	ldr	r3, [r3, #0]
   2fde0:	2b00      	cmp	r3, #0
   2fde2:	d007      	beq.n	2fdf4 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2fde4:	003b      	movs	r3, r7
   2fde6:	681a      	ldr	r2, [r3, #0]
   2fde8:	68fb      	ldr	r3, [r7, #12]
   2fdea:	0011      	movs	r1, r2
   2fdec:	0018      	movs	r0, r3
   2fdee:	4b08      	ldr	r3, [pc, #32]	; (2fe10 <writeMQTTString+0x7c>)
   2fdf0:	4798      	blx	r3
}
   2fdf2:	e004      	b.n	2fdfe <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2fdf4:	68fb      	ldr	r3, [r7, #12]
   2fdf6:	2100      	movs	r1, #0
   2fdf8:	0018      	movs	r0, r3
   2fdfa:	4b03      	ldr	r3, [pc, #12]	; (2fe08 <writeMQTTString+0x74>)
   2fdfc:	4798      	blx	r3
}
   2fdfe:	46c0      	nop			; (mov r8, r8)
   2fe00:	46bd      	mov	sp, r7
   2fe02:	b004      	add	sp, #16
   2fe04:	bd80      	pop	{r7, pc}
   2fe06:	46c0      	nop			; (mov r8, r8)
   2fe08:	0002fced 	.word	0x0002fced
   2fe0c:	00034355 	.word	0x00034355
   2fe10:	0002fd45 	.word	0x0002fd45

0002fe14 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2fe14:	b580      	push	{r7, lr}
   2fe16:	b086      	sub	sp, #24
   2fe18:	af00      	add	r7, sp, #0
   2fe1a:	60f8      	str	r0, [r7, #12]
   2fe1c:	60b9      	str	r1, [r7, #8]
   2fe1e:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2fe20:	2300      	movs	r3, #0
   2fe22:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2fe24:	687a      	ldr	r2, [r7, #4]
   2fe26:	68bb      	ldr	r3, [r7, #8]
   2fe28:	681b      	ldr	r3, [r3, #0]
   2fe2a:	1ad3      	subs	r3, r2, r3
   2fe2c:	2b01      	cmp	r3, #1
   2fe2e:	dd1b      	ble.n	2fe68 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2fe30:	68bb      	ldr	r3, [r7, #8]
   2fe32:	0018      	movs	r0, r3
   2fe34:	4b10      	ldr	r3, [pc, #64]	; (2fe78 <readMQTTLenString+0x64>)
   2fe36:	4798      	blx	r3
   2fe38:	0002      	movs	r2, r0
   2fe3a:	68fb      	ldr	r3, [r7, #12]
   2fe3c:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2fe3e:	68bb      	ldr	r3, [r7, #8]
   2fe40:	681a      	ldr	r2, [r3, #0]
   2fe42:	68fb      	ldr	r3, [r7, #12]
   2fe44:	685b      	ldr	r3, [r3, #4]
   2fe46:	18d2      	adds	r2, r2, r3
   2fe48:	687b      	ldr	r3, [r7, #4]
   2fe4a:	429a      	cmp	r2, r3
   2fe4c:	d80c      	bhi.n	2fe68 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2fe4e:	68bb      	ldr	r3, [r7, #8]
   2fe50:	681a      	ldr	r2, [r3, #0]
   2fe52:	68fb      	ldr	r3, [r7, #12]
   2fe54:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2fe56:	68bb      	ldr	r3, [r7, #8]
   2fe58:	681a      	ldr	r2, [r3, #0]
   2fe5a:	68fb      	ldr	r3, [r7, #12]
   2fe5c:	685b      	ldr	r3, [r3, #4]
   2fe5e:	18d2      	adds	r2, r2, r3
   2fe60:	68bb      	ldr	r3, [r7, #8]
   2fe62:	601a      	str	r2, [r3, #0]
			rc = 1;
   2fe64:	2301      	movs	r3, #1
   2fe66:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2fe68:	68fb      	ldr	r3, [r7, #12]
   2fe6a:	2200      	movs	r2, #0
   2fe6c:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2fe6e:	697b      	ldr	r3, [r7, #20]
}
   2fe70:	0018      	movs	r0, r3
   2fe72:	46bd      	mov	sp, r7
   2fe74:	b006      	add	sp, #24
   2fe76:	bd80      	pop	{r7, pc}
   2fe78:	0002fc65 	.word	0x0002fc65

0002fe7c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2fe7c:	b580      	push	{r7, lr}
   2fe7e:	b086      	sub	sp, #24
   2fe80:	af00      	add	r7, sp, #0
   2fe82:	1d3b      	adds	r3, r7, #4
   2fe84:	6018      	str	r0, [r3, #0]
   2fe86:	6059      	str	r1, [r3, #4]
   2fe88:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2fe8a:	2300      	movs	r3, #0
   2fe8c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2fe8e:	1d3b      	adds	r3, r7, #4
   2fe90:	681b      	ldr	r3, [r3, #0]
   2fe92:	2b00      	cmp	r3, #0
   2fe94:	d007      	beq.n	2fea6 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2fe96:	1d3b      	adds	r3, r7, #4
   2fe98:	681b      	ldr	r3, [r3, #0]
   2fe9a:	0018      	movs	r0, r3
   2fe9c:	4b06      	ldr	r3, [pc, #24]	; (2feb8 <MQTTstrlen+0x3c>)
   2fe9e:	4798      	blx	r3
   2fea0:	0003      	movs	r3, r0
   2fea2:	617b      	str	r3, [r7, #20]
   2fea4:	e002      	b.n	2feac <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2fea6:	1d3b      	adds	r3, r7, #4
   2fea8:	685b      	ldr	r3, [r3, #4]
   2feaa:	617b      	str	r3, [r7, #20]
	return rc;
   2feac:	697b      	ldr	r3, [r7, #20]
}
   2feae:	0018      	movs	r0, r3
   2feb0:	46bd      	mov	sp, r7
   2feb2:	b006      	add	sp, #24
   2feb4:	bd80      	pop	{r7, pc}
   2feb6:	46c0      	nop			; (mov r8, r8)
   2feb8:	00034727 	.word	0x00034727

0002febc <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2febc:	b580      	push	{r7, lr}
   2febe:	b086      	sub	sp, #24
   2fec0:	af00      	add	r7, sp, #0
   2fec2:	6078      	str	r0, [r7, #4]
   2fec4:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2fec6:	2300      	movs	r3, #0
   2fec8:	617b      	str	r3, [r7, #20]
		blen = 0;
   2feca:	2300      	movs	r3, #0
   2fecc:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2fece:	687b      	ldr	r3, [r7, #4]
   2fed0:	681b      	ldr	r3, [r3, #0]
   2fed2:	2b00      	cmp	r3, #0
   2fed4:	d00a      	beq.n	2feec <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2fed6:	687b      	ldr	r3, [r7, #4]
   2fed8:	681b      	ldr	r3, [r3, #0]
   2feda:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2fedc:	687b      	ldr	r3, [r7, #4]
   2fede:	681b      	ldr	r3, [r3, #0]
   2fee0:	0018      	movs	r0, r3
   2fee2:	4b12      	ldr	r3, [pc, #72]	; (2ff2c <MQTTPacket_equals+0x70>)
   2fee4:	4798      	blx	r3
   2fee6:	0003      	movs	r3, r0
   2fee8:	617b      	str	r3, [r7, #20]
   2feea:	e005      	b.n	2fef8 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2feec:	687b      	ldr	r3, [r7, #4]
   2feee:	689b      	ldr	r3, [r3, #8]
   2fef0:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2fef2:	687b      	ldr	r3, [r7, #4]
   2fef4:	685b      	ldr	r3, [r3, #4]
   2fef6:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2fef8:	683b      	ldr	r3, [r7, #0]
   2fefa:	0018      	movs	r0, r3
   2fefc:	4b0b      	ldr	r3, [pc, #44]	; (2ff2c <MQTTPacket_equals+0x70>)
   2fefe:	4798      	blx	r3
   2ff00:	0003      	movs	r3, r0
   2ff02:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2ff04:	697a      	ldr	r2, [r7, #20]
   2ff06:	68fb      	ldr	r3, [r7, #12]
   2ff08:	429a      	cmp	r2, r3
   2ff0a:	d109      	bne.n	2ff20 <MQTTPacket_equals+0x64>
   2ff0c:	697a      	ldr	r2, [r7, #20]
   2ff0e:	6839      	ldr	r1, [r7, #0]
   2ff10:	693b      	ldr	r3, [r7, #16]
   2ff12:	0018      	movs	r0, r3
   2ff14:	4b06      	ldr	r3, [pc, #24]	; (2ff30 <MQTTPacket_equals+0x74>)
   2ff16:	4798      	blx	r3
   2ff18:	1e03      	subs	r3, r0, #0
   2ff1a:	d101      	bne.n	2ff20 <MQTTPacket_equals+0x64>
   2ff1c:	2301      	movs	r3, #1
   2ff1e:	e000      	b.n	2ff22 <MQTTPacket_equals+0x66>
   2ff20:	2300      	movs	r3, #0
}
   2ff22:	0018      	movs	r0, r3
   2ff24:	46bd      	mov	sp, r7
   2ff26:	b006      	add	sp, #24
   2ff28:	bd80      	pop	{r7, pc}
   2ff2a:	46c0      	nop			; (mov r8, r8)
   2ff2c:	00034727 	.word	0x00034727
   2ff30:	00034735 	.word	0x00034735

0002ff34 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2ff34:	b580      	push	{r7, lr}
   2ff36:	b086      	sub	sp, #24
   2ff38:	af00      	add	r7, sp, #0
   2ff3a:	60f8      	str	r0, [r7, #12]
   2ff3c:	0038      	movs	r0, r7
   2ff3e:	6001      	str	r1, [r0, #0]
   2ff40:	6042      	str	r2, [r0, #4]
   2ff42:	6083      	str	r3, [r0, #8]
	int len = 0;
   2ff44:	2300      	movs	r3, #0
   2ff46:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2ff48:	003b      	movs	r3, r7
   2ff4a:	6818      	ldr	r0, [r3, #0]
   2ff4c:	6859      	ldr	r1, [r3, #4]
   2ff4e:	689a      	ldr	r2, [r3, #8]
   2ff50:	4b09      	ldr	r3, [pc, #36]	; (2ff78 <MQTTSerialize_publishLength+0x44>)
   2ff52:	4798      	blx	r3
   2ff54:	0003      	movs	r3, r0
   2ff56:	1c9a      	adds	r2, r3, #2
   2ff58:	6a3b      	ldr	r3, [r7, #32]
   2ff5a:	18d3      	adds	r3, r2, r3
   2ff5c:	697a      	ldr	r2, [r7, #20]
   2ff5e:	18d3      	adds	r3, r2, r3
   2ff60:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2ff62:	68fb      	ldr	r3, [r7, #12]
   2ff64:	2b00      	cmp	r3, #0
   2ff66:	dd02      	ble.n	2ff6e <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2ff68:	697b      	ldr	r3, [r7, #20]
   2ff6a:	3302      	adds	r3, #2
   2ff6c:	617b      	str	r3, [r7, #20]
	return len;
   2ff6e:	697b      	ldr	r3, [r7, #20]
}
   2ff70:	0018      	movs	r0, r3
   2ff72:	46bd      	mov	sp, r7
   2ff74:	b006      	add	sp, #24
   2ff76:	bd80      	pop	{r7, pc}
   2ff78:	0002fe7d 	.word	0x0002fe7d

0002ff7c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2ff7c:	b590      	push	{r4, r7, lr}
   2ff7e:	b08b      	sub	sp, #44	; 0x2c
   2ff80:	af02      	add	r7, sp, #8
   2ff82:	60f8      	str	r0, [r7, #12]
   2ff84:	60b9      	str	r1, [r7, #8]
   2ff86:	603b      	str	r3, [r7, #0]
   2ff88:	1dfb      	adds	r3, r7, #7
   2ff8a:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2ff8c:	68fb      	ldr	r3, [r7, #12]
   2ff8e:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2ff90:	2300      	movs	r3, #0
   2ff92:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2ff94:	2300      	movs	r3, #0
   2ff96:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2ff98:	2300      	movs	r3, #0
   2ff9a:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2ff9c:	2308      	movs	r3, #8
   2ff9e:	2230      	movs	r2, #48	; 0x30
   2ffa0:	4694      	mov	ip, r2
   2ffa2:	44bc      	add	ip, r7
   2ffa4:	4463      	add	r3, ip
   2ffa6:	6838      	ldr	r0, [r7, #0]
   2ffa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2ffaa:	9200      	str	r2, [sp, #0]
   2ffac:	6819      	ldr	r1, [r3, #0]
   2ffae:	685a      	ldr	r2, [r3, #4]
   2ffb0:	689b      	ldr	r3, [r3, #8]
   2ffb2:	4c46      	ldr	r4, [pc, #280]	; (300cc <MQTTSerialize_publish+0x150>)
   2ffb4:	47a0      	blx	r4
   2ffb6:	0003      	movs	r3, r0
   2ffb8:	61bb      	str	r3, [r7, #24]
   2ffba:	69bb      	ldr	r3, [r7, #24]
   2ffbc:	0018      	movs	r0, r3
   2ffbe:	4b44      	ldr	r3, [pc, #272]	; (300d0 <MQTTSerialize_publish+0x154>)
   2ffc0:	4798      	blx	r3
   2ffc2:	0002      	movs	r2, r0
   2ffc4:	68bb      	ldr	r3, [r7, #8]
   2ffc6:	429a      	cmp	r2, r3
   2ffc8:	dd03      	ble.n	2ffd2 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ffca:	2302      	movs	r3, #2
   2ffcc:	425b      	negs	r3, r3
   2ffce:	61fb      	str	r3, [r7, #28]
		goto exit;
   2ffd0:	e077      	b.n	300c2 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2ffd2:	2310      	movs	r3, #16
   2ffd4:	18fb      	adds	r3, r7, r3
   2ffd6:	781a      	ldrb	r2, [r3, #0]
   2ffd8:	210f      	movs	r1, #15
   2ffda:	400a      	ands	r2, r1
   2ffdc:	1c11      	adds	r1, r2, #0
   2ffde:	2230      	movs	r2, #48	; 0x30
   2ffe0:	430a      	orrs	r2, r1
   2ffe2:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2ffe4:	1dfb      	adds	r3, r7, #7
   2ffe6:	781b      	ldrb	r3, [r3, #0]
   2ffe8:	2201      	movs	r2, #1
   2ffea:	4013      	ands	r3, r2
   2ffec:	b2da      	uxtb	r2, r3
   2ffee:	2310      	movs	r3, #16
   2fff0:	18fb      	adds	r3, r7, r3
   2fff2:	2101      	movs	r1, #1
   2fff4:	400a      	ands	r2, r1
   2fff6:	00d0      	lsls	r0, r2, #3
   2fff8:	781a      	ldrb	r2, [r3, #0]
   2fffa:	2108      	movs	r1, #8
   2fffc:	438a      	bics	r2, r1
   2fffe:	1c11      	adds	r1, r2, #0
   30000:	1c02      	adds	r2, r0, #0
   30002:	430a      	orrs	r2, r1
   30004:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   30006:	683b      	ldr	r3, [r7, #0]
   30008:	b2db      	uxtb	r3, r3
   3000a:	1c1a      	adds	r2, r3, #0
   3000c:	2303      	movs	r3, #3
   3000e:	4013      	ands	r3, r2
   30010:	b2da      	uxtb	r2, r3
   30012:	2310      	movs	r3, #16
   30014:	18fb      	adds	r3, r7, r3
   30016:	2103      	movs	r1, #3
   30018:	400a      	ands	r2, r1
   3001a:	1890      	adds	r0, r2, r2
   3001c:	781a      	ldrb	r2, [r3, #0]
   3001e:	2106      	movs	r1, #6
   30020:	438a      	bics	r2, r1
   30022:	1c11      	adds	r1, r2, #0
   30024:	1c02      	adds	r2, r0, #0
   30026:	430a      	orrs	r2, r1
   30028:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   3002a:	2330      	movs	r3, #48	; 0x30
   3002c:	18fb      	adds	r3, r7, r3
   3002e:	781b      	ldrb	r3, [r3, #0]
   30030:	2201      	movs	r2, #1
   30032:	4013      	ands	r3, r2
   30034:	b2da      	uxtb	r2, r3
   30036:	2310      	movs	r3, #16
   30038:	18fb      	adds	r3, r7, r3
   3003a:	2101      	movs	r1, #1
   3003c:	400a      	ands	r2, r1
   3003e:	0010      	movs	r0, r2
   30040:	781a      	ldrb	r2, [r3, #0]
   30042:	2101      	movs	r1, #1
   30044:	438a      	bics	r2, r1
   30046:	1c11      	adds	r1, r2, #0
   30048:	1c02      	adds	r2, r0, #0
   3004a:	430a      	orrs	r2, r1
   3004c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3004e:	2310      	movs	r3, #16
   30050:	18fb      	adds	r3, r7, r3
   30052:	781a      	ldrb	r2, [r3, #0]
   30054:	2314      	movs	r3, #20
   30056:	18fb      	adds	r3, r7, r3
   30058:	0011      	movs	r1, r2
   3005a:	0018      	movs	r0, r3
   3005c:	4b1d      	ldr	r3, [pc, #116]	; (300d4 <MQTTSerialize_publish+0x158>)
   3005e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30060:	697b      	ldr	r3, [r7, #20]
   30062:	69ba      	ldr	r2, [r7, #24]
   30064:	0011      	movs	r1, r2
   30066:	0018      	movs	r0, r3
   30068:	4b1b      	ldr	r3, [pc, #108]	; (300d8 <MQTTSerialize_publish+0x15c>)
   3006a:	4798      	blx	r3
   3006c:	0002      	movs	r2, r0
   3006e:	697b      	ldr	r3, [r7, #20]
   30070:	189b      	adds	r3, r3, r2
   30072:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30074:	2308      	movs	r3, #8
   30076:	2230      	movs	r2, #48	; 0x30
   30078:	4694      	mov	ip, r2
   3007a:	44bc      	add	ip, r7
   3007c:	4463      	add	r3, ip
   3007e:	2214      	movs	r2, #20
   30080:	18b8      	adds	r0, r7, r2
   30082:	6819      	ldr	r1, [r3, #0]
   30084:	685a      	ldr	r2, [r3, #4]
   30086:	689b      	ldr	r3, [r3, #8]
   30088:	4c14      	ldr	r4, [pc, #80]	; (300dc <MQTTSerialize_publish+0x160>)
   3008a:	47a0      	blx	r4

	if (qos > 0)
   3008c:	683b      	ldr	r3, [r7, #0]
   3008e:	2b00      	cmp	r3, #0
   30090:	dd08      	ble.n	300a4 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   30092:	2334      	movs	r3, #52	; 0x34
   30094:	18fb      	adds	r3, r7, r3
   30096:	881a      	ldrh	r2, [r3, #0]
   30098:	2314      	movs	r3, #20
   3009a:	18fb      	adds	r3, r7, r3
   3009c:	0011      	movs	r1, r2
   3009e:	0018      	movs	r0, r3
   300a0:	4b0f      	ldr	r3, [pc, #60]	; (300e0 <MQTTSerialize_publish+0x164>)
   300a2:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   300a4:	697b      	ldr	r3, [r7, #20]
   300a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
   300a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
   300aa:	0018      	movs	r0, r3
   300ac:	4b0d      	ldr	r3, [pc, #52]	; (300e4 <MQTTSerialize_publish+0x168>)
   300ae:	4798      	blx	r3
	ptr += payloadlen;
   300b0:	697a      	ldr	r2, [r7, #20]
   300b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   300b4:	18d3      	adds	r3, r2, r3
   300b6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   300b8:	697b      	ldr	r3, [r7, #20]
   300ba:	001a      	movs	r2, r3
   300bc:	68fb      	ldr	r3, [r7, #12]
   300be:	1ad3      	subs	r3, r2, r3
   300c0:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   300c2:	69fb      	ldr	r3, [r7, #28]
}
   300c4:	0018      	movs	r0, r3
   300c6:	46bd      	mov	sp, r7
   300c8:	b009      	add	sp, #36	; 0x24
   300ca:	bd90      	pop	{r4, r7, pc}
   300cc:	0002ff35 	.word	0x0002ff35
   300d0:	0002fba1 	.word	0x0002fba1
   300d4:	0002fcc3 	.word	0x0002fcc3
   300d8:	0002faa9 	.word	0x0002faa9
   300dc:	0002fd95 	.word	0x0002fd95
   300e0:	0002fced 	.word	0x0002fced
   300e4:	00034355 	.word	0x00034355

000300e8 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   300e8:	b580      	push	{r7, lr}
   300ea:	b088      	sub	sp, #32
   300ec:	af00      	add	r7, sp, #0
   300ee:	60f8      	str	r0, [r7, #12]
   300f0:	60b9      	str	r1, [r7, #8]
   300f2:	0019      	movs	r1, r3
   300f4:	1dfb      	adds	r3, r7, #7
   300f6:	701a      	strb	r2, [r3, #0]
   300f8:	1dbb      	adds	r3, r7, #6
   300fa:	1c0a      	adds	r2, r1, #0
   300fc:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   300fe:	2300      	movs	r3, #0
   30100:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30102:	2300      	movs	r3, #0
   30104:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30106:	68fb      	ldr	r3, [r7, #12]
   30108:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   3010a:	68bb      	ldr	r3, [r7, #8]
   3010c:	2b03      	cmp	r3, #3
   3010e:	dc03      	bgt.n	30118 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30110:	2302      	movs	r3, #2
   30112:	425b      	negs	r3, r3
   30114:	61fb      	str	r3, [r7, #28]
		goto exit;
   30116:	e055      	b.n	301c4 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   30118:	1dfb      	adds	r3, r7, #7
   3011a:	781b      	ldrb	r3, [r3, #0]
   3011c:	220f      	movs	r2, #15
   3011e:	4013      	ands	r3, r2
   30120:	b2da      	uxtb	r2, r3
   30122:	2318      	movs	r3, #24
   30124:	18fb      	adds	r3, r7, r3
   30126:	0110      	lsls	r0, r2, #4
   30128:	781a      	ldrb	r2, [r3, #0]
   3012a:	210f      	movs	r1, #15
   3012c:	400a      	ands	r2, r1
   3012e:	1c11      	adds	r1, r2, #0
   30130:	1c02      	adds	r2, r0, #0
   30132:	430a      	orrs	r2, r1
   30134:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30136:	1dbb      	adds	r3, r7, #6
   30138:	781b      	ldrb	r3, [r3, #0]
   3013a:	2201      	movs	r2, #1
   3013c:	4013      	ands	r3, r2
   3013e:	b2da      	uxtb	r2, r3
   30140:	2318      	movs	r3, #24
   30142:	18fb      	adds	r3, r7, r3
   30144:	2101      	movs	r1, #1
   30146:	400a      	ands	r2, r1
   30148:	00d0      	lsls	r0, r2, #3
   3014a:	781a      	ldrb	r2, [r3, #0]
   3014c:	2108      	movs	r1, #8
   3014e:	438a      	bics	r2, r1
   30150:	1c11      	adds	r1, r2, #0
   30152:	1c02      	adds	r2, r0, #0
   30154:	430a      	orrs	r2, r1
   30156:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   30158:	1dfb      	adds	r3, r7, #7
   3015a:	781b      	ldrb	r3, [r3, #0]
   3015c:	3b06      	subs	r3, #6
   3015e:	425a      	negs	r2, r3
   30160:	4153      	adcs	r3, r2
   30162:	b2db      	uxtb	r3, r3
   30164:	1c1a      	adds	r2, r3, #0
   30166:	2303      	movs	r3, #3
   30168:	4013      	ands	r3, r2
   3016a:	b2da      	uxtb	r2, r3
   3016c:	2318      	movs	r3, #24
   3016e:	18fb      	adds	r3, r7, r3
   30170:	2103      	movs	r1, #3
   30172:	400a      	ands	r2, r1
   30174:	1890      	adds	r0, r2, r2
   30176:	781a      	ldrb	r2, [r3, #0]
   30178:	2106      	movs	r1, #6
   3017a:	438a      	bics	r2, r1
   3017c:	1c11      	adds	r1, r2, #0
   3017e:	1c02      	adds	r2, r0, #0
   30180:	430a      	orrs	r2, r1
   30182:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30184:	2318      	movs	r3, #24
   30186:	18fb      	adds	r3, r7, r3
   30188:	781a      	ldrb	r2, [r3, #0]
   3018a:	2314      	movs	r3, #20
   3018c:	18fb      	adds	r3, r7, r3
   3018e:	0011      	movs	r1, r2
   30190:	0018      	movs	r0, r3
   30192:	4b0f      	ldr	r3, [pc, #60]	; (301d0 <MQTTSerialize_ack+0xe8>)
   30194:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   30196:	697b      	ldr	r3, [r7, #20]
   30198:	2102      	movs	r1, #2
   3019a:	0018      	movs	r0, r3
   3019c:	4b0d      	ldr	r3, [pc, #52]	; (301d4 <MQTTSerialize_ack+0xec>)
   3019e:	4798      	blx	r3
   301a0:	0002      	movs	r2, r0
   301a2:	697b      	ldr	r3, [r7, #20]
   301a4:	189b      	adds	r3, r3, r2
   301a6:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   301a8:	2328      	movs	r3, #40	; 0x28
   301aa:	18fb      	adds	r3, r7, r3
   301ac:	881a      	ldrh	r2, [r3, #0]
   301ae:	2314      	movs	r3, #20
   301b0:	18fb      	adds	r3, r7, r3
   301b2:	0011      	movs	r1, r2
   301b4:	0018      	movs	r0, r3
   301b6:	4b08      	ldr	r3, [pc, #32]	; (301d8 <MQTTSerialize_ack+0xf0>)
   301b8:	4798      	blx	r3
	rc = ptr - buf;
   301ba:	697b      	ldr	r3, [r7, #20]
   301bc:	001a      	movs	r2, r3
   301be:	68fb      	ldr	r3, [r7, #12]
   301c0:	1ad3      	subs	r3, r2, r3
   301c2:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   301c4:	69fb      	ldr	r3, [r7, #28]
}
   301c6:	0018      	movs	r0, r3
   301c8:	46bd      	mov	sp, r7
   301ca:	b008      	add	sp, #32
   301cc:	bd80      	pop	{r7, pc}
   301ce:	46c0      	nop			; (mov r8, r8)
   301d0:	0002fcc3 	.word	0x0002fcc3
   301d4:	0002faa9 	.word	0x0002faa9
   301d8:	0002fced 	.word	0x0002fced

000301dc <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   301dc:	b580      	push	{r7, lr}
   301de:	b084      	sub	sp, #16
   301e0:	af00      	add	r7, sp, #0
   301e2:	6078      	str	r0, [r7, #4]
   301e4:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   301e6:	2302      	movs	r3, #2
   301e8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   301ea:	2300      	movs	r3, #0
   301ec:	60fb      	str	r3, [r7, #12]
   301ee:	e014      	b.n	3021a <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   301f0:	68fa      	ldr	r2, [r7, #12]
   301f2:	0013      	movs	r3, r2
   301f4:	005b      	lsls	r3, r3, #1
   301f6:	189b      	adds	r3, r3, r2
   301f8:	009b      	lsls	r3, r3, #2
   301fa:	001a      	movs	r2, r3
   301fc:	683b      	ldr	r3, [r7, #0]
   301fe:	189b      	adds	r3, r3, r2
   30200:	6818      	ldr	r0, [r3, #0]
   30202:	6859      	ldr	r1, [r3, #4]
   30204:	689a      	ldr	r2, [r3, #8]
   30206:	4b09      	ldr	r3, [pc, #36]	; (3022c <MQTTSerialize_subscribeLength+0x50>)
   30208:	4798      	blx	r3
   3020a:	0003      	movs	r3, r0
   3020c:	3303      	adds	r3, #3
   3020e:	68ba      	ldr	r2, [r7, #8]
   30210:	18d3      	adds	r3, r2, r3
   30212:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   30214:	68fb      	ldr	r3, [r7, #12]
   30216:	3301      	adds	r3, #1
   30218:	60fb      	str	r3, [r7, #12]
   3021a:	68fa      	ldr	r2, [r7, #12]
   3021c:	687b      	ldr	r3, [r7, #4]
   3021e:	429a      	cmp	r2, r3
   30220:	dbe6      	blt.n	301f0 <MQTTSerialize_subscribeLength+0x14>
	return len;
   30222:	68bb      	ldr	r3, [r7, #8]
}
   30224:	0018      	movs	r0, r3
   30226:	46bd      	mov	sp, r7
   30228:	b004      	add	sp, #16
   3022a:	bd80      	pop	{r7, pc}
   3022c:	0002fe7d 	.word	0x0002fe7d

00030230 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30230:	b590      	push	{r4, r7, lr}
   30232:	b08b      	sub	sp, #44	; 0x2c
   30234:	af00      	add	r7, sp, #0
   30236:	60f8      	str	r0, [r7, #12]
   30238:	60b9      	str	r1, [r7, #8]
   3023a:	0019      	movs	r1, r3
   3023c:	1dfb      	adds	r3, r7, #7
   3023e:	701a      	strb	r2, [r3, #0]
   30240:	1d3b      	adds	r3, r7, #4
   30242:	1c0a      	adds	r2, r1, #0
   30244:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   30246:	68fb      	ldr	r3, [r7, #12]
   30248:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   3024a:	2300      	movs	r3, #0
   3024c:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   3024e:	2300      	movs	r3, #0
   30250:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   30252:	2300      	movs	r3, #0
   30254:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   30256:	2300      	movs	r3, #0
   30258:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   3025a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   3025c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3025e:	0011      	movs	r1, r2
   30260:	0018      	movs	r0, r3
   30262:	4b41      	ldr	r3, [pc, #260]	; (30368 <MQTTSerialize_subscribe+0x138>)
   30264:	4798      	blx	r3
   30266:	0003      	movs	r3, r0
   30268:	61fb      	str	r3, [r7, #28]
   3026a:	69fb      	ldr	r3, [r7, #28]
   3026c:	0018      	movs	r0, r3
   3026e:	4b3f      	ldr	r3, [pc, #252]	; (3036c <MQTTSerialize_subscribe+0x13c>)
   30270:	4798      	blx	r3
   30272:	0002      	movs	r2, r0
   30274:	68bb      	ldr	r3, [r7, #8]
   30276:	429a      	cmp	r2, r3
   30278:	dd03      	ble.n	30282 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3027a:	2302      	movs	r3, #2
   3027c:	425b      	negs	r3, r3
   3027e:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30280:	e06c      	b.n	3035c <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   30282:	2314      	movs	r3, #20
   30284:	18fb      	adds	r3, r7, r3
   30286:	2200      	movs	r2, #0
   30288:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   3028a:	2314      	movs	r3, #20
   3028c:	18fb      	adds	r3, r7, r3
   3028e:	781a      	ldrb	r2, [r3, #0]
   30290:	210f      	movs	r1, #15
   30292:	400a      	ands	r2, r1
   30294:	1c11      	adds	r1, r2, #0
   30296:	2280      	movs	r2, #128	; 0x80
   30298:	4252      	negs	r2, r2
   3029a:	430a      	orrs	r2, r1
   3029c:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3029e:	1dfb      	adds	r3, r7, #7
   302a0:	781b      	ldrb	r3, [r3, #0]
   302a2:	2201      	movs	r2, #1
   302a4:	4013      	ands	r3, r2
   302a6:	b2da      	uxtb	r2, r3
   302a8:	2314      	movs	r3, #20
   302aa:	18fb      	adds	r3, r7, r3
   302ac:	2101      	movs	r1, #1
   302ae:	400a      	ands	r2, r1
   302b0:	00d0      	lsls	r0, r2, #3
   302b2:	781a      	ldrb	r2, [r3, #0]
   302b4:	2108      	movs	r1, #8
   302b6:	438a      	bics	r2, r1
   302b8:	1c11      	adds	r1, r2, #0
   302ba:	1c02      	adds	r2, r0, #0
   302bc:	430a      	orrs	r2, r1
   302be:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   302c0:	2314      	movs	r3, #20
   302c2:	18fb      	adds	r3, r7, r3
   302c4:	781a      	ldrb	r2, [r3, #0]
   302c6:	2106      	movs	r1, #6
   302c8:	438a      	bics	r2, r1
   302ca:	1c11      	adds	r1, r2, #0
   302cc:	2202      	movs	r2, #2
   302ce:	430a      	orrs	r2, r1
   302d0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   302d2:	2314      	movs	r3, #20
   302d4:	18fb      	adds	r3, r7, r3
   302d6:	781a      	ldrb	r2, [r3, #0]
   302d8:	2318      	movs	r3, #24
   302da:	18fb      	adds	r3, r7, r3
   302dc:	0011      	movs	r1, r2
   302de:	0018      	movs	r0, r3
   302e0:	4b23      	ldr	r3, [pc, #140]	; (30370 <MQTTSerialize_subscribe+0x140>)
   302e2:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   302e4:	69bb      	ldr	r3, [r7, #24]
   302e6:	69fa      	ldr	r2, [r7, #28]
   302e8:	0011      	movs	r1, r2
   302ea:	0018      	movs	r0, r3
   302ec:	4b21      	ldr	r3, [pc, #132]	; (30374 <MQTTSerialize_subscribe+0x144>)
   302ee:	4798      	blx	r3
   302f0:	0002      	movs	r2, r0
   302f2:	69bb      	ldr	r3, [r7, #24]
   302f4:	189b      	adds	r3, r3, r2
   302f6:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   302f8:	1d3b      	adds	r3, r7, #4
   302fa:	881a      	ldrh	r2, [r3, #0]
   302fc:	2318      	movs	r3, #24
   302fe:	18fb      	adds	r3, r7, r3
   30300:	0011      	movs	r1, r2
   30302:	0018      	movs	r0, r3
   30304:	4b1c      	ldr	r3, [pc, #112]	; (30378 <MQTTSerialize_subscribe+0x148>)
   30306:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   30308:	2300      	movs	r3, #0
   3030a:	623b      	str	r3, [r7, #32]
   3030c:	e01d      	b.n	3034a <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   3030e:	6a3a      	ldr	r2, [r7, #32]
   30310:	0013      	movs	r3, r2
   30312:	005b      	lsls	r3, r3, #1
   30314:	189b      	adds	r3, r3, r2
   30316:	009b      	lsls	r3, r3, #2
   30318:	001a      	movs	r2, r3
   3031a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   3031c:	189b      	adds	r3, r3, r2
   3031e:	2218      	movs	r2, #24
   30320:	18b8      	adds	r0, r7, r2
   30322:	6819      	ldr	r1, [r3, #0]
   30324:	685a      	ldr	r2, [r3, #4]
   30326:	689b      	ldr	r3, [r3, #8]
   30328:	4c14      	ldr	r4, [pc, #80]	; (3037c <MQTTSerialize_subscribe+0x14c>)
   3032a:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   3032c:	6a3b      	ldr	r3, [r7, #32]
   3032e:	009b      	lsls	r3, r3, #2
   30330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30332:	18d3      	adds	r3, r2, r3
   30334:	681b      	ldr	r3, [r3, #0]
   30336:	b2da      	uxtb	r2, r3
   30338:	2318      	movs	r3, #24
   3033a:	18fb      	adds	r3, r7, r3
   3033c:	0011      	movs	r1, r2
   3033e:	0018      	movs	r0, r3
   30340:	4b0b      	ldr	r3, [pc, #44]	; (30370 <MQTTSerialize_subscribe+0x140>)
   30342:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30344:	6a3b      	ldr	r3, [r7, #32]
   30346:	3301      	adds	r3, #1
   30348:	623b      	str	r3, [r7, #32]
   3034a:	6a3a      	ldr	r2, [r7, #32]
   3034c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3034e:	429a      	cmp	r2, r3
   30350:	dbdd      	blt.n	3030e <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   30352:	69bb      	ldr	r3, [r7, #24]
   30354:	001a      	movs	r2, r3
   30356:	68fb      	ldr	r3, [r7, #12]
   30358:	1ad3      	subs	r3, r2, r3
   3035a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3035c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3035e:	0018      	movs	r0, r3
   30360:	46bd      	mov	sp, r7
   30362:	b00b      	add	sp, #44	; 0x2c
   30364:	bd90      	pop	{r4, r7, pc}
   30366:	46c0      	nop			; (mov r8, r8)
   30368:	000301dd 	.word	0x000301dd
   3036c:	0002fba1 	.word	0x0002fba1
   30370:	0002fcc3 	.word	0x0002fcc3
   30374:	0002faa9 	.word	0x0002faa9
   30378:	0002fced 	.word	0x0002fced
   3037c:	0002fd95 	.word	0x0002fd95

00030380 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   30380:	b590      	push	{r4, r7, lr}
   30382:	b08b      	sub	sp, #44	; 0x2c
   30384:	af00      	add	r7, sp, #0
   30386:	60f8      	str	r0, [r7, #12]
   30388:	60b9      	str	r1, [r7, #8]
   3038a:	607a      	str	r2, [r7, #4]
   3038c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3038e:	2300      	movs	r3, #0
   30390:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30394:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30396:	2300      	movs	r3, #0
   30398:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3039a:	2300      	movs	r3, #0
   3039c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3039e:	2318      	movs	r3, #24
   303a0:	18fb      	adds	r3, r7, r3
   303a2:	0018      	movs	r0, r3
   303a4:	4b2c      	ldr	r3, [pc, #176]	; (30458 <MQTTDeserialize_suback+0xd8>)
   303a6:	4798      	blx	r3
   303a8:	0003      	movs	r3, r0
   303aa:	001a      	movs	r2, r3
   303ac:	231c      	movs	r3, #28
   303ae:	18fb      	adds	r3, r7, r3
   303b0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   303b2:	231c      	movs	r3, #28
   303b4:	18fb      	adds	r3, r7, r3
   303b6:	781b      	ldrb	r3, [r3, #0]
   303b8:	220f      	movs	r2, #15
   303ba:	4393      	bics	r3, r2
   303bc:	b2db      	uxtb	r3, r3
   303be:	2b90      	cmp	r3, #144	; 0x90
   303c0:	d142      	bne.n	30448 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   303c2:	69bb      	ldr	r3, [r7, #24]
   303c4:	2214      	movs	r2, #20
   303c6:	18ba      	adds	r2, r7, r2
   303c8:	0011      	movs	r1, r2
   303ca:	0018      	movs	r0, r3
   303cc:	4b23      	ldr	r3, [pc, #140]	; (3045c <MQTTDeserialize_suback+0xdc>)
   303ce:	4798      	blx	r3
   303d0:	0003      	movs	r3, r0
   303d2:	627b      	str	r3, [r7, #36]	; 0x24
   303d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   303d6:	69bb      	ldr	r3, [r7, #24]
   303d8:	189b      	adds	r3, r3, r2
   303da:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   303dc:	69bb      	ldr	r3, [r7, #24]
   303de:	697a      	ldr	r2, [r7, #20]
   303e0:	189b      	adds	r3, r3, r2
   303e2:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   303e4:	6a3b      	ldr	r3, [r7, #32]
   303e6:	69ba      	ldr	r2, [r7, #24]
   303e8:	1a9b      	subs	r3, r3, r2
   303ea:	2b01      	cmp	r3, #1
   303ec:	dd2e      	ble.n	3044c <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   303ee:	2318      	movs	r3, #24
   303f0:	18fb      	adds	r3, r7, r3
   303f2:	0018      	movs	r0, r3
   303f4:	4b1a      	ldr	r3, [pc, #104]	; (30460 <MQTTDeserialize_suback+0xe0>)
   303f6:	4798      	blx	r3
   303f8:	0003      	movs	r3, r0
   303fa:	b29a      	uxth	r2, r3
   303fc:	68fb      	ldr	r3, [r7, #12]
   303fe:	801a      	strh	r2, [r3, #0]

	*count = 0;
   30400:	687b      	ldr	r3, [r7, #4]
   30402:	2200      	movs	r2, #0
   30404:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   30406:	e018      	b.n	3043a <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   30408:	687b      	ldr	r3, [r7, #4]
   3040a:	681a      	ldr	r2, [r3, #0]
   3040c:	68bb      	ldr	r3, [r7, #8]
   3040e:	429a      	cmp	r2, r3
   30410:	dd03      	ble.n	3041a <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   30412:	2301      	movs	r3, #1
   30414:	425b      	negs	r3, r3
   30416:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   30418:	e019      	b.n	3044e <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   3041a:	687b      	ldr	r3, [r7, #4]
   3041c:	681a      	ldr	r2, [r3, #0]
   3041e:	1c51      	adds	r1, r2, #1
   30420:	687b      	ldr	r3, [r7, #4]
   30422:	6019      	str	r1, [r3, #0]
   30424:	0013      	movs	r3, r2
   30426:	009b      	lsls	r3, r3, #2
   30428:	683a      	ldr	r2, [r7, #0]
   3042a:	18d4      	adds	r4, r2, r3
   3042c:	2318      	movs	r3, #24
   3042e:	18fb      	adds	r3, r7, r3
   30430:	0018      	movs	r0, r3
   30432:	4b09      	ldr	r3, [pc, #36]	; (30458 <MQTTDeserialize_suback+0xd8>)
   30434:	4798      	blx	r3
   30436:	0003      	movs	r3, r0
   30438:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   3043a:	69ba      	ldr	r2, [r7, #24]
   3043c:	6a3b      	ldr	r3, [r7, #32]
   3043e:	429a      	cmp	r2, r3
   30440:	d3e2      	bcc.n	30408 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   30442:	2301      	movs	r3, #1
   30444:	627b      	str	r3, [r7, #36]	; 0x24
   30446:	e002      	b.n	3044e <MQTTDeserialize_suback+0xce>
		goto exit;
   30448:	46c0      	nop			; (mov r8, r8)
   3044a:	e000      	b.n	3044e <MQTTDeserialize_suback+0xce>
		goto exit;
   3044c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3044e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30450:	0018      	movs	r0, r3
   30452:	46bd      	mov	sp, r7
   30454:	b00b      	add	sp, #44	; 0x2c
   30456:	bd90      	pop	{r4, r7, pc}
   30458:	0002fc97 	.word	0x0002fc97
   3045c:	0002fc31 	.word	0x0002fc31
   30460:	0002fc65 	.word	0x0002fc65

00030464 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   30464:	b580      	push	{r7, lr}
   30466:	b082      	sub	sp, #8
   30468:	af00      	add	r7, sp, #0
   3046a:	6078      	str	r0, [r7, #4]
	config->port = 80;
   3046c:	687b      	ldr	r3, [r7, #4]
   3046e:	2250      	movs	r2, #80	; 0x50
   30470:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   30472:	687b      	ldr	r3, [r7, #4]
   30474:	2200      	movs	r2, #0
   30476:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   30478:	687b      	ldr	r3, [r7, #4]
   3047a:	4a0b      	ldr	r2, [pc, #44]	; (304a8 <http_client_get_config_defaults+0x44>)
   3047c:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   3047e:	687b      	ldr	r3, [r7, #4]
   30480:	2200      	movs	r2, #0
   30482:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   30484:	687b      	ldr	r3, [r7, #4]
   30486:	2200      	movs	r2, #0
   30488:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   3048a:	687b      	ldr	r3, [r7, #4]
   3048c:	2280      	movs	r2, #128	; 0x80
   3048e:	0052      	lsls	r2, r2, #1
   30490:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   30492:	687b      	ldr	r3, [r7, #4]
   30494:	2252      	movs	r2, #82	; 0x52
   30496:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   30498:	687b      	ldr	r3, [r7, #4]
   3049a:	4a04      	ldr	r2, [pc, #16]	; (304ac <http_client_get_config_defaults+0x48>)
   3049c:	619a      	str	r2, [r3, #24]
}
   3049e:	46c0      	nop			; (mov r8, r8)
   304a0:	46bd      	mov	sp, r7
   304a2:	b002      	add	sp, #8
   304a4:	bd80      	pop	{r7, pc}
   304a6:	46c0      	nop			; (mov r8, r8)
   304a8:	00004e20 	.word	0x00004e20
   304ac:	00039478 	.word	0x00039478

000304b0 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   304b0:	b590      	push	{r4, r7, lr}
   304b2:	b083      	sub	sp, #12
   304b4:	af00      	add	r7, sp, #0
   304b6:	6078      	str	r0, [r7, #4]
   304b8:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   304ba:	687b      	ldr	r3, [r7, #4]
   304bc:	2b00      	cmp	r3, #0
   304be:	d002      	beq.n	304c6 <http_client_init+0x16>
   304c0:	683b      	ldr	r3, [r7, #0]
   304c2:	2b00      	cmp	r3, #0
   304c4:	d102      	bne.n	304cc <http_client_init+0x1c>
		return -EINVAL;
   304c6:	2316      	movs	r3, #22
   304c8:	425b      	negs	r3, r3
   304ca:	e058      	b.n	3057e <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   304cc:	683b      	ldr	r3, [r7, #0]
   304ce:	691b      	ldr	r3, [r3, #16]
   304d0:	2b00      	cmp	r3, #0
   304d2:	d102      	bne.n	304da <http_client_init+0x2a>
		return -EINVAL;
   304d4:	2316      	movs	r3, #22
   304d6:	425b      	negs	r3, r3
   304d8:	e051      	b.n	3057e <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   304da:	683b      	ldr	r3, [r7, #0]
   304dc:	685b      	ldr	r3, [r3, #4]
   304de:	2b00      	cmp	r3, #0
   304e0:	d102      	bne.n	304e8 <http_client_init+0x38>
		return -EINVAL;
   304e2:	2316      	movs	r3, #22
   304e4:	425b      	negs	r3, r3
   304e6:	e04a      	b.n	3057e <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   304e8:	683b      	ldr	r3, [r7, #0]
   304ea:	695b      	ldr	r3, [r3, #20]
   304ec:	2b51      	cmp	r3, #81	; 0x51
   304ee:	d802      	bhi.n	304f6 <http_client_init+0x46>
		return -EINVAL;
   304f0:	2316      	movs	r3, #22
   304f2:	425b      	negs	r3, r3
   304f4:	e043      	b.n	3057e <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   304f6:	687b      	ldr	r3, [r7, #4]
   304f8:	22e8      	movs	r2, #232	; 0xe8
   304fa:	2100      	movs	r1, #0
   304fc:	0018      	movs	r0, r3
   304fe:	4b22      	ldr	r3, [pc, #136]	; (30588 <http_client_init+0xd8>)
   30500:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   30502:	687b      	ldr	r3, [r7, #4]
   30504:	3350      	adds	r3, #80	; 0x50
   30506:	6839      	ldr	r1, [r7, #0]
   30508:	221c      	movs	r2, #28
   3050a:	0018      	movs	r0, r3
   3050c:	4b1f      	ldr	r3, [pc, #124]	; (3058c <http_client_init+0xdc>)
   3050e:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   30510:	687b      	ldr	r3, [r7, #4]
   30512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30514:	2b00      	cmp	r3, #0
   30516:	d115      	bne.n	30544 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   30518:	683b      	ldr	r3, [r7, #0]
   3051a:	691b      	ldr	r3, [r3, #16]
   3051c:	0018      	movs	r0, r3
   3051e:	4b1c      	ldr	r3, [pc, #112]	; (30590 <http_client_init+0xe0>)
   30520:	4798      	blx	r3
   30522:	0003      	movs	r3, r0
   30524:	001a      	movs	r2, r3
   30526:	687b      	ldr	r3, [r7, #4]
   30528:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   3052a:	687b      	ldr	r3, [r7, #4]
   3052c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3052e:	2b00      	cmp	r3, #0
   30530:	d102      	bne.n	30538 <http_client_init+0x88>
			return -ENOMEM;
   30532:	230c      	movs	r3, #12
   30534:	425b      	negs	r3, r3
   30536:	e022      	b.n	3057e <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   30538:	687b      	ldr	r3, [r7, #4]
   3053a:	2241      	movs	r2, #65	; 0x41
   3053c:	5c99      	ldrb	r1, [r3, r2]
   3053e:	2004      	movs	r0, #4
   30540:	4301      	orrs	r1, r0
   30542:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   30544:	683b      	ldr	r3, [r7, #0]
   30546:	891b      	ldrh	r3, [r3, #8]
   30548:	2b00      	cmp	r3, #0
   3054a:	d010      	beq.n	3056e <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   3054c:	683b      	ldr	r3, [r7, #0]
   3054e:	6858      	ldr	r0, [r3, #4]
   30550:	687a      	ldr	r2, [r7, #4]
   30552:	4910      	ldr	r1, [pc, #64]	; (30594 <http_client_init+0xe4>)
   30554:	2300      	movs	r3, #0
   30556:	4c10      	ldr	r4, [pc, #64]	; (30598 <http_client_init+0xe8>)
   30558:	47a0      	blx	r4
   3055a:	0002      	movs	r2, r0
   3055c:	687b      	ldr	r3, [r7, #4]
   3055e:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   30560:	687b      	ldr	r3, [r7, #4]
   30562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30564:	2b00      	cmp	r3, #0
   30566:	da02      	bge.n	3056e <http_client_init+0xbe>
			return -ENOSPC;
   30568:	231c      	movs	r3, #28
   3056a:	425b      	negs	r3, r3
   3056c:	e007      	b.n	3057e <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   3056e:	687b      	ldr	r3, [r7, #4]
   30570:	2200      	movs	r2, #0
   30572:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30574:	687b      	ldr	r3, [r7, #4]
   30576:	22d8      	movs	r2, #216	; 0xd8
   30578:	2100      	movs	r1, #0
   3057a:	5099      	str	r1, [r3, r2]

	return 0;
   3057c:	2300      	movs	r3, #0
}
   3057e:	0018      	movs	r0, r3
   30580:	46bd      	mov	sp, r7
   30582:	b003      	add	sp, #12
   30584:	bd90      	pop	{r4, r7, pc}
   30586:	46c0      	nop			; (mov r8, r8)
   30588:	0003438b 	.word	0x0003438b
   3058c:	00034355 	.word	0x00034355
   30590:	0003432d 	.word	0x0003432d
   30594:	00030861 	.word	0x00030861
   30598:	00031f05 	.word	0x00031f05

0003059c <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   3059c:	b580      	push	{r7, lr}
   3059e:	b082      	sub	sp, #8
   305a0:	af00      	add	r7, sp, #0
   305a2:	6078      	str	r0, [r7, #4]
   305a4:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   305a6:	687b      	ldr	r3, [r7, #4]
   305a8:	2b00      	cmp	r3, #0
   305aa:	d102      	bne.n	305b2 <http_client_register_callback+0x16>
		return -EINVAL;
   305ac:	2316      	movs	r3, #22
   305ae:	425b      	negs	r3, r3
   305b0:	e003      	b.n	305ba <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   305b2:	687b      	ldr	r3, [r7, #4]
   305b4:	683a      	ldr	r2, [r7, #0]
   305b6:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   305b8:	2300      	movs	r3, #0
}
   305ba:	0018      	movs	r0, r3
   305bc:	46bd      	mov	sp, r7
   305be:	b002      	add	sp, #8
   305c0:	bd80      	pop	{r7, pc}
	...

000305c4 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   305c4:	b580      	push	{r7, lr}
   305c6:	b082      	sub	sp, #8
   305c8:	af00      	add	r7, sp, #0
   305ca:	6078      	str	r0, [r7, #4]
	switch (err) {
   305cc:	687b      	ldr	r3, [r7, #4]
   305ce:	330e      	adds	r3, #14
   305d0:	2b0e      	cmp	r3, #14
   305d2:	d825      	bhi.n	30620 <_hwerr_to_stderr+0x5c>
   305d4:	009a      	lsls	r2, r3, #2
   305d6:	4b18      	ldr	r3, [pc, #96]	; (30638 <_hwerr_to_stderr+0x74>)
   305d8:	18d3      	adds	r3, r2, r3
   305da:	681b      	ldr	r3, [r3, #0]
   305dc:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   305de:	2305      	movs	r3, #5
   305e0:	425b      	negs	r3, r3
   305e2:	e024      	b.n	3062e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   305e4:	2302      	movs	r3, #2
   305e6:	425b      	negs	r3, r3
   305e8:	e021      	b.n	3062e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   305ea:	2370      	movs	r3, #112	; 0x70
   305ec:	425b      	negs	r3, r3
   305ee:	e01e      	b.n	3062e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   305f0:	230c      	movs	r3, #12
   305f2:	425b      	negs	r3, r3
   305f4:	e01b      	b.n	3062e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   305f6:	2316      	movs	r3, #22
   305f8:	425b      	negs	r3, r3
   305fa:	e018      	b.n	3062e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   305fc:	230c      	movs	r3, #12
   305fe:	425b      	negs	r3, r3
   30600:	e015      	b.n	3062e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   30602:	2305      	movs	r3, #5
   30604:	425b      	negs	r3, r3
   30606:	e012      	b.n	3062e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   30608:	2379      	movs	r3, #121	; 0x79
   3060a:	425b      	negs	r3, r3
   3060c:	e00f      	b.n	3062e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   3060e:	2368      	movs	r3, #104	; 0x68
   30610:	425b      	negs	r3, r3
   30612:	e00c      	b.n	3062e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   30614:	230b      	movs	r3, #11
   30616:	425b      	negs	r3, r3
   30618:	e009      	b.n	3062e <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   3061a:	2310      	movs	r3, #16
   3061c:	425b      	negs	r3, r3
   3061e:	e006      	b.n	3062e <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   30620:	687b      	ldr	r3, [r7, #4]
   30622:	2b00      	cmp	r3, #0
   30624:	da02      	bge.n	3062c <_hwerr_to_stderr+0x68>
				return -EIO;
   30626:	2305      	movs	r3, #5
   30628:	425b      	negs	r3, r3
   3062a:	e000      	b.n	3062e <_hwerr_to_stderr+0x6a>
			}
			return 0;
   3062c:	2300      	movs	r3, #0
	}
}
   3062e:	0018      	movs	r0, r3
   30630:	46bd      	mov	sp, r7
   30632:	b002      	add	sp, #8
   30634:	bd80      	pop	{r7, pc}
   30636:	46c0      	nop			; (mov r8, r8)
   30638:	000395b4 	.word	0x000395b4

0003063c <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   3063c:	b580      	push	{r7, lr}
   3063e:	b08a      	sub	sp, #40	; 0x28
   30640:	af00      	add	r7, sp, #0
   30642:	603a      	str	r2, [r7, #0]
   30644:	1dfb      	adds	r3, r7, #7
   30646:	1c02      	adds	r2, r0, #0
   30648:	701a      	strb	r2, [r3, #0]
   3064a:	1dbb      	adds	r3, r7, #6
   3064c:	1c0a      	adds	r2, r1, #0
   3064e:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   30650:	1dfb      	adds	r3, r7, #7
   30652:	2200      	movs	r2, #0
   30654:	569a      	ldrsb	r2, [r3, r2]
   30656:	4b4b      	ldr	r3, [pc, #300]	; (30784 <http_client_socket_event_handler+0x148>)
   30658:	0092      	lsls	r2, r2, #2
   3065a:	58d3      	ldr	r3, [r2, r3]
   3065c:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   3065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30660:	2b00      	cmp	r3, #0
   30662:	d100      	bne.n	30666 <http_client_socket_event_handler+0x2a>
   30664:	e08a      	b.n	3077c <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   30666:	1dbb      	adds	r3, r7, #6
   30668:	781b      	ldrb	r3, [r3, #0]
   3066a:	2b06      	cmp	r3, #6
   3066c:	d040      	beq.n	306f0 <http_client_socket_event_handler+0xb4>
   3066e:	2b07      	cmp	r3, #7
   30670:	d060      	beq.n	30734 <http_client_socket_event_handler+0xf8>
   30672:	2b05      	cmp	r3, #5
   30674:	d000      	beq.n	30678 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   30676:	e082      	b.n	3077e <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   30678:	683b      	ldr	r3, [r7, #0]
   3067a:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   3067c:	6a3b      	ldr	r3, [r7, #32]
   3067e:	785b      	ldrb	r3, [r3, #1]
   30680:	b25b      	sxtb	r3, r3
   30682:	001a      	movs	r2, r3
   30684:	230c      	movs	r3, #12
   30686:	18fb      	adds	r3, r7, r3
   30688:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   3068a:	6a3b      	ldr	r3, [r7, #32]
   3068c:	785b      	ldrb	r3, [r3, #1]
   3068e:	b25b      	sxtb	r3, r3
   30690:	2b00      	cmp	r3, #0
   30692:	da0c      	bge.n	306ae <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   30694:	6a3b      	ldr	r3, [r7, #32]
   30696:	785b      	ldrb	r3, [r3, #1]
   30698:	b25b      	sxtb	r3, r3
   3069a:	0018      	movs	r0, r3
   3069c:	4b3a      	ldr	r3, [pc, #232]	; (30788 <http_client_socket_event_handler+0x14c>)
   3069e:	4798      	blx	r3
   306a0:	0002      	movs	r2, r0
   306a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306a4:	0011      	movs	r1, r2
   306a6:	0018      	movs	r0, r3
   306a8:	4b38      	ldr	r3, [pc, #224]	; (3078c <http_client_socket_event_handler+0x150>)
   306aa:	4798      	blx	r3
    	break;
   306ac:	e067      	b.n	3077e <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   306ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   306b2:	2b00      	cmp	r3, #0
   306b4:	d006      	beq.n	306c4 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   306b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   306ba:	220c      	movs	r2, #12
   306bc:	18ba      	adds	r2, r7, r2
   306be:	6a78      	ldr	r0, [r7, #36]	; 0x24
   306c0:	2100      	movs	r1, #0
   306c2:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   306c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306c6:	2203      	movs	r2, #3
   306c8:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   306ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
   306ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306d0:	6c99      	ldr	r1, [r3, #72]	; 0x48
   306d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306d4:	2258      	movs	r2, #88	; 0x58
   306d6:	5a9b      	ldrh	r3, [r3, r2]
   306d8:	001a      	movs	r2, r3
   306da:	4b2d      	ldr	r3, [pc, #180]	; (30790 <http_client_socket_event_handler+0x154>)
   306dc:	4798      	blx	r3
    		_http_client_recv_packet(module);
   306de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306e0:	0018      	movs	r0, r3
   306e2:	4b2c      	ldr	r3, [pc, #176]	; (30794 <http_client_socket_event_handler+0x158>)
   306e4:	4798      	blx	r3
			_http_client_request(module);
   306e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306e8:	0018      	movs	r0, r3
   306ea:	4b2b      	ldr	r3, [pc, #172]	; (30798 <http_client_socket_event_handler+0x15c>)
   306ec:	4798      	blx	r3
    	break;
   306ee:	e046      	b.n	3077e <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   306f0:	683b      	ldr	r3, [r7, #0]
   306f2:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   306f4:	69fb      	ldr	r3, [r7, #28]
   306f6:	2204      	movs	r2, #4
   306f8:	5e9b      	ldrsh	r3, [r3, r2]
   306fa:	2b00      	cmp	r3, #0
   306fc:	dd09      	ble.n	30712 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   306fe:	69fb      	ldr	r3, [r7, #28]
   30700:	2204      	movs	r2, #4
   30702:	5e9b      	ldrsh	r3, [r3, r2]
   30704:	001a      	movs	r2, r3
   30706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30708:	0011      	movs	r1, r2
   3070a:	0018      	movs	r0, r3
   3070c:	4b23      	ldr	r3, [pc, #140]	; (3079c <http_client_socket_event_handler+0x160>)
   3070e:	4798      	blx	r3
   30710:	e00b      	b.n	3072a <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   30712:	69fb      	ldr	r3, [r7, #28]
   30714:	2204      	movs	r2, #4
   30716:	5e9b      	ldrsh	r3, [r3, r2]
   30718:	0018      	movs	r0, r3
   3071a:	4b1b      	ldr	r3, [pc, #108]	; (30788 <http_client_socket_event_handler+0x14c>)
   3071c:	4798      	blx	r3
   3071e:	0002      	movs	r2, r0
   30720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30722:	0011      	movs	r1, r2
   30724:	0018      	movs	r0, r3
   30726:	4b19      	ldr	r3, [pc, #100]	; (3078c <http_client_socket_event_handler+0x150>)
   30728:	4798      	blx	r3
		_http_client_recv_packet(module);
   3072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3072c:	0018      	movs	r0, r3
   3072e:	4b19      	ldr	r3, [pc, #100]	; (30794 <http_client_socket_event_handler+0x158>)
   30730:	4798      	blx	r3
		break;
   30732:	e024      	b.n	3077e <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   30734:	231a      	movs	r3, #26
   30736:	18fb      	adds	r3, r7, r3
   30738:	683a      	ldr	r2, [r7, #0]
   3073a:	8812      	ldrh	r2, [r2, #0]
   3073c:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   3073e:	231a      	movs	r3, #26
   30740:	18fb      	adds	r3, r7, r3
   30742:	2200      	movs	r2, #0
   30744:	5e9b      	ldrsh	r3, [r3, r2]
   30746:	2b00      	cmp	r3, #0
   30748:	da0d      	bge.n	30766 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   3074a:	231a      	movs	r3, #26
   3074c:	18fb      	adds	r3, r7, r3
   3074e:	2200      	movs	r2, #0
   30750:	5e9b      	ldrsh	r3, [r3, r2]
   30752:	0018      	movs	r0, r3
   30754:	4b0c      	ldr	r3, [pc, #48]	; (30788 <http_client_socket_event_handler+0x14c>)
   30756:	4798      	blx	r3
   30758:	0002      	movs	r2, r0
   3075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3075c:	0011      	movs	r1, r2
   3075e:	0018      	movs	r0, r3
   30760:	4b0a      	ldr	r3, [pc, #40]	; (3078c <http_client_socket_event_handler+0x150>)
   30762:	4798      	blx	r3
   30764:	e003      	b.n	3076e <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   30766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30768:	0018      	movs	r0, r3
   3076a:	4b0b      	ldr	r3, [pc, #44]	; (30798 <http_client_socket_event_handler+0x15c>)
   3076c:	4798      	blx	r3
		module->sending = 0;
   3076e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30770:	2241      	movs	r2, #65	; 0x41
   30772:	5c99      	ldrb	r1, [r3, r2]
   30774:	2001      	movs	r0, #1
   30776:	4381      	bics	r1, r0
   30778:	5499      	strb	r1, [r3, r2]
    	break;
   3077a:	e000      	b.n	3077e <http_client_socket_event_handler+0x142>
		return;
   3077c:	46c0      	nop			; (mov r8, r8)
	}

}
   3077e:	46bd      	mov	sp, r7
   30780:	b00a      	add	sp, #40	; 0x28
   30782:	bd80      	pop	{r7, pc}
   30784:	200042dc 	.word	0x200042dc
   30788:	000305c5 	.word	0x000305c5
   3078c:	00030c39 	.word	0x00030c39
   30790:	00031f95 	.word	0x00031f95
   30794:	000314c5 	.word	0x000314c5
   30798:	00030d8d 	.word	0x00030d8d
   3079c:	00031529 	.word	0x00031529

000307a0 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   307a0:	b580      	push	{r7, lr}
   307a2:	b088      	sub	sp, #32
   307a4:	af00      	add	r7, sp, #0
   307a6:	6078      	str	r0, [r7, #4]
   307a8:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   307aa:	2300      	movs	r3, #0
   307ac:	61fb      	str	r3, [r7, #28]
   307ae:	e048      	b.n	30842 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   307b0:	4b27      	ldr	r3, [pc, #156]	; (30850 <http_client_socket_resolve_handler+0xb0>)
   307b2:	69fa      	ldr	r2, [r7, #28]
   307b4:	0092      	lsls	r2, r2, #2
   307b6:	58d3      	ldr	r3, [r2, r3]
   307b8:	2b00      	cmp	r3, #0
   307ba:	d03f      	beq.n	3083c <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   307bc:	4b24      	ldr	r3, [pc, #144]	; (30850 <http_client_socket_resolve_handler+0xb0>)
   307be:	69fa      	ldr	r2, [r7, #28]
   307c0:	0092      	lsls	r2, r2, #2
   307c2:	58d3      	ldr	r3, [r2, r3]
   307c4:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   307c6:	69bb      	ldr	r3, [r7, #24]
   307c8:	1c5a      	adds	r2, r3, #1
   307ca:	687b      	ldr	r3, [r7, #4]
   307cc:	0011      	movs	r1, r2
   307ce:	0018      	movs	r0, r3
   307d0:	4b20      	ldr	r3, [pc, #128]	; (30854 <http_client_socket_resolve_handler+0xb4>)
   307d2:	4798      	blx	r3
   307d4:	1e03      	subs	r3, r0, #0
   307d6:	d131      	bne.n	3083c <http_client_socket_resolve_handler+0x9c>
   307d8:	69bb      	ldr	r3, [r7, #24]
   307da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   307dc:	2b01      	cmp	r3, #1
   307de:	d12d      	bne.n	3083c <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   307e0:	683b      	ldr	r3, [r7, #0]
   307e2:	2b00      	cmp	r3, #0
   307e4:	d107      	bne.n	307f6 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   307e6:	2376      	movs	r3, #118	; 0x76
   307e8:	425a      	negs	r2, r3
   307ea:	69bb      	ldr	r3, [r7, #24]
   307ec:	0011      	movs	r1, r2
   307ee:	0018      	movs	r0, r3
   307f0:	4b19      	ldr	r3, [pc, #100]	; (30858 <http_client_socket_resolve_handler+0xb8>)
   307f2:	4798      	blx	r3
					return;
   307f4:	e028      	b.n	30848 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   307f6:	2308      	movs	r3, #8
   307f8:	18fb      	adds	r3, r7, r3
   307fa:	2202      	movs	r2, #2
   307fc:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   307fe:	69bb      	ldr	r3, [r7, #24]
   30800:	2250      	movs	r2, #80	; 0x50
   30802:	5a9b      	ldrh	r3, [r3, r2]
   30804:	021b      	lsls	r3, r3, #8
   30806:	b21a      	sxth	r2, r3
   30808:	69bb      	ldr	r3, [r7, #24]
   3080a:	2150      	movs	r1, #80	; 0x50
   3080c:	5a5b      	ldrh	r3, [r3, r1]
   3080e:	0a1b      	lsrs	r3, r3, #8
   30810:	b29b      	uxth	r3, r3
   30812:	b21b      	sxth	r3, r3
   30814:	4313      	orrs	r3, r2
   30816:	b21b      	sxth	r3, r3
   30818:	b29a      	uxth	r2, r3
   3081a:	2308      	movs	r3, #8
   3081c:	18fb      	adds	r3, r7, r3
   3081e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   30820:	2308      	movs	r3, #8
   30822:	18fb      	adds	r3, r7, r3
   30824:	683a      	ldr	r2, [r7, #0]
   30826:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30828:	69bb      	ldr	r3, [r7, #24]
   3082a:	781b      	ldrb	r3, [r3, #0]
   3082c:	b25b      	sxtb	r3, r3
   3082e:	2208      	movs	r2, #8
   30830:	18b9      	adds	r1, r7, r2
   30832:	2210      	movs	r2, #16
   30834:	0018      	movs	r0, r3
   30836:	4b09      	ldr	r3, [pc, #36]	; (3085c <http_client_socket_resolve_handler+0xbc>)
   30838:	4798      	blx	r3
				return;
   3083a:	e005      	b.n	30848 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   3083c:	69fb      	ldr	r3, [r7, #28]
   3083e:	3301      	adds	r3, #1
   30840:	61fb      	str	r3, [r7, #28]
   30842:	69fb      	ldr	r3, [r7, #28]
   30844:	2b06      	cmp	r3, #6
   30846:	ddb3      	ble.n	307b0 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   30848:	46bd      	mov	sp, r7
   3084a:	b008      	add	sp, #32
   3084c:	bd80      	pop	{r7, pc}
   3084e:	46c0      	nop			; (mov r8, r8)
   30850:	200042dc 	.word	0x200042dc
   30854:	000346c9 	.word	0x000346c9
   30858:	00030c39 	.word	0x00030c39
   3085c:	000251b5 	.word	0x000251b5

00030860 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   30860:	b580      	push	{r7, lr}
   30862:	b086      	sub	sp, #24
   30864:	af00      	add	r7, sp, #0
   30866:	60f8      	str	r0, [r7, #12]
   30868:	60b9      	str	r1, [r7, #8]
   3086a:	607a      	str	r2, [r7, #4]
   3086c:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   3086e:	687b      	ldr	r3, [r7, #4]
   30870:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   30872:	697b      	ldr	r3, [r7, #20]
   30874:	2b00      	cmp	r3, #0
   30876:	d007      	beq.n	30888 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   30878:	233e      	movs	r3, #62	; 0x3e
   3087a:	425a      	negs	r2, r3
   3087c:	697b      	ldr	r3, [r7, #20]
   3087e:	0011      	movs	r1, r2
   30880:	0018      	movs	r0, r3
   30882:	4b03      	ldr	r3, [pc, #12]	; (30890 <http_client_timer_callback+0x30>)
   30884:	4798      	blx	r3
   30886:	e000      	b.n	3088a <http_client_timer_callback+0x2a>
		return;
   30888:	46c0      	nop			; (mov r8, r8)
}
   3088a:	46bd      	mov	sp, r7
   3088c:	b006      	add	sp, #24
   3088e:	bd80      	pop	{r7, pc}
   30890:	00030c39 	.word	0x00030c39

00030894 <_is_ip>:

static int _is_ip(const char *host)
{
   30894:	b580      	push	{r7, lr}
   30896:	b084      	sub	sp, #16
   30898:	af00      	add	r7, sp, #0
   3089a:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   3089c:	2300      	movs	r3, #0
   3089e:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   308a0:	e03a      	b.n	30918 <_is_ip+0x84>
		ch = *host++;
   308a2:	687b      	ldr	r3, [r7, #4]
   308a4:	1c5a      	adds	r2, r3, #1
   308a6:	607a      	str	r2, [r7, #4]
   308a8:	220b      	movs	r2, #11
   308aa:	18ba      	adds	r2, r7, r2
   308ac:	781b      	ldrb	r3, [r3, #0]
   308ae:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   308b0:	230b      	movs	r3, #11
   308b2:	18fb      	adds	r3, r7, r3
   308b4:	781b      	ldrb	r3, [r3, #0]
   308b6:	2b60      	cmp	r3, #96	; 0x60
   308b8:	d904      	bls.n	308c4 <_is_ip+0x30>
   308ba:	230b      	movs	r3, #11
   308bc:	18fb      	adds	r3, r7, r3
   308be:	781b      	ldrb	r3, [r3, #0]
   308c0:	2b66      	cmp	r3, #102	; 0x66
   308c2:	d913      	bls.n	308ec <_is_ip+0x58>
   308c4:	230b      	movs	r3, #11
   308c6:	18fb      	adds	r3, r7, r3
   308c8:	781b      	ldrb	r3, [r3, #0]
   308ca:	2b40      	cmp	r3, #64	; 0x40
   308cc:	d904      	bls.n	308d8 <_is_ip+0x44>
   308ce:	230b      	movs	r3, #11
   308d0:	18fb      	adds	r3, r7, r3
   308d2:	781b      	ldrb	r3, [r3, #0]
   308d4:	2b46      	cmp	r3, #70	; 0x46
   308d6:	d909      	bls.n	308ec <_is_ip+0x58>
   308d8:	230b      	movs	r3, #11
   308da:	18fb      	adds	r3, r7, r3
   308dc:	781b      	ldrb	r3, [r3, #0]
   308de:	2b3a      	cmp	r3, #58	; 0x3a
   308e0:	d004      	beq.n	308ec <_is_ip+0x58>
   308e2:	230b      	movs	r3, #11
   308e4:	18fb      	adds	r3, r7, r3
   308e6:	781b      	ldrb	r3, [r3, #0]
   308e8:	2b2f      	cmp	r3, #47	; 0x2f
   308ea:	d102      	bne.n	308f2 <_is_ip+0x5e>
			isv6 = 1;
   308ec:	2301      	movs	r3, #1
   308ee:	60fb      	str	r3, [r7, #12]
   308f0:	e012      	b.n	30918 <_is_ip+0x84>
		} else if (ch == '.') {
   308f2:	230b      	movs	r3, #11
   308f4:	18fb      	adds	r3, r7, r3
   308f6:	781b      	ldrb	r3, [r3, #0]
   308f8:	2b2e      	cmp	r3, #46	; 0x2e
   308fa:	d104      	bne.n	30906 <_is_ip+0x72>
			if (isv6) {
   308fc:	68fb      	ldr	r3, [r7, #12]
   308fe:	2b00      	cmp	r3, #0
   30900:	d00a      	beq.n	30918 <_is_ip+0x84>
				return 0;
   30902:	2300      	movs	r3, #0
   30904:	e00d      	b.n	30922 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   30906:	230b      	movs	r3, #11
   30908:	18fb      	adds	r3, r7, r3
   3090a:	781b      	ldrb	r3, [r3, #0]
   3090c:	2230      	movs	r2, #48	; 0x30
   3090e:	4013      	ands	r3, r2
   30910:	2b30      	cmp	r3, #48	; 0x30
   30912:	d001      	beq.n	30918 <_is_ip+0x84>
			return 0;
   30914:	2300      	movs	r3, #0
   30916:	e004      	b.n	30922 <_is_ip+0x8e>
	while (*host != '\0') {
   30918:	687b      	ldr	r3, [r7, #4]
   3091a:	781b      	ldrb	r3, [r3, #0]
   3091c:	2b00      	cmp	r3, #0
   3091e:	d1c0      	bne.n	308a2 <_is_ip+0xe>
		}
	}
	return 1;
   30920:	2301      	movs	r3, #1
}
   30922:	0018      	movs	r0, r3
   30924:	46bd      	mov	sp, r7
   30926:	b004      	add	sp, #16
   30928:	bd80      	pop	{r7, pc}
	...

0003092c <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   3092c:	b5b0      	push	{r4, r5, r7, lr}
   3092e:	b08e      	sub	sp, #56	; 0x38
   30930:	af00      	add	r7, sp, #0
   30932:	60f8      	str	r0, [r7, #12]
   30934:	60b9      	str	r1, [r7, #8]
   30936:	603b      	str	r3, [r7, #0]
   30938:	1dfb      	adds	r3, r7, #7
   3093a:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   3093c:	2337      	movs	r3, #55	; 0x37
   3093e:	18fb      	adds	r3, r7, r3
   30940:	2200      	movs	r2, #0
   30942:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   30944:	2300      	movs	r3, #0
   30946:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   30948:	2300      	movs	r3, #0
   3094a:	633b      	str	r3, [r7, #48]	; 0x30
   3094c:	2300      	movs	r3, #0
   3094e:	62fb      	str	r3, [r7, #44]	; 0x2c
   30950:	2300      	movs	r3, #0
   30952:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   30954:	68fb      	ldr	r3, [r7, #12]
   30956:	2b00      	cmp	r3, #0
   30958:	d102      	bne.n	30960 <http_client_send_request+0x34>
		return -EINVAL;
   3095a:	2316      	movs	r3, #22
   3095c:	425b      	negs	r3, r3
   3095e:	e145      	b.n	30bec <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   30960:	68fb      	ldr	r3, [r7, #12]
   30962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30964:	2b02      	cmp	r3, #2
   30966:	d902      	bls.n	3096e <http_client_send_request+0x42>
		return -EBUSY;
   30968:	2310      	movs	r3, #16
   3096a:	425b      	negs	r3, r3
   3096c:	e13e      	b.n	30bec <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   3096e:	49a1      	ldr	r1, [pc, #644]	; (30bf4 <http_client_send_request+0x2c8>)
   30970:	68bb      	ldr	r3, [r7, #8]
   30972:	2207      	movs	r2, #7
   30974:	0018      	movs	r0, r3
   30976:	4ba0      	ldr	r3, [pc, #640]	; (30bf8 <http_client_send_request+0x2cc>)
   30978:	4798      	blx	r3
   3097a:	1e03      	subs	r3, r0, #0
   3097c:	d102      	bne.n	30984 <http_client_send_request+0x58>
		i = 7;
   3097e:	2307      	movs	r3, #7
   30980:	633b      	str	r3, [r7, #48]	; 0x30
   30982:	e009      	b.n	30998 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   30984:	499d      	ldr	r1, [pc, #628]	; (30bfc <http_client_send_request+0x2d0>)
   30986:	68bb      	ldr	r3, [r7, #8]
   30988:	2208      	movs	r2, #8
   3098a:	0018      	movs	r0, r3
   3098c:	4b9a      	ldr	r3, [pc, #616]	; (30bf8 <http_client_send_request+0x2cc>)
   3098e:	4798      	blx	r3
   30990:	1e03      	subs	r3, r0, #0
   30992:	d101      	bne.n	30998 <http_client_send_request+0x6c>
		i = 8;
   30994:	2308      	movs	r3, #8
   30996:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   30998:	68fb      	ldr	r3, [r7, #12]
   3099a:	1c5c      	adds	r4, r3, #1
   3099c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3099e:	68ba      	ldr	r2, [r7, #8]
   309a0:	18d5      	adds	r5, r2, r3
   309a2:	68fb      	ldr	r3, [r7, #12]
   309a4:	3301      	adds	r3, #1
   309a6:	0018      	movs	r0, r3
   309a8:	4b95      	ldr	r3, [pc, #596]	; (30c00 <http_client_send_request+0x2d4>)
   309aa:	4798      	blx	r3
   309ac:	0003      	movs	r3, r0
   309ae:	001a      	movs	r2, r3
   309b0:	0029      	movs	r1, r5
   309b2:	0020      	movs	r0, r4
   309b4:	4b90      	ldr	r3, [pc, #576]	; (30bf8 <http_client_send_request+0x2cc>)
   309b6:	4798      	blx	r3
   309b8:	0003      	movs	r3, r0
   309ba:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   309bc:	e00d      	b.n	309da <http_client_send_request+0xae>
		module->host[j++] = url[i];
   309be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   309c0:	1c5a      	adds	r2, r3, #1
   309c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   309c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   309c6:	68b9      	ldr	r1, [r7, #8]
   309c8:	188a      	adds	r2, r1, r2
   309ca:	7811      	ldrb	r1, [r2, #0]
   309cc:	68fa      	ldr	r2, [r7, #12]
   309ce:	18d3      	adds	r3, r2, r3
   309d0:	1c0a      	adds	r2, r1, #0
   309d2:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   309d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   309d6:	3301      	adds	r3, #1
   309d8:	633b      	str	r3, [r7, #48]	; 0x30
   309da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   309dc:	68ba      	ldr	r2, [r7, #8]
   309de:	18d3      	adds	r3, r2, r3
   309e0:	781b      	ldrb	r3, [r3, #0]
   309e2:	2b00      	cmp	r3, #0
   309e4:	d005      	beq.n	309f2 <http_client_send_request+0xc6>
   309e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   309e8:	68ba      	ldr	r2, [r7, #8]
   309ea:	18d3      	adds	r3, r2, r3
   309ec:	781b      	ldrb	r3, [r3, #0]
   309ee:	2b2f      	cmp	r3, #47	; 0x2f
   309f0:	d1e5      	bne.n	309be <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   309f2:	68fa      	ldr	r2, [r7, #12]
   309f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   309f6:	18d3      	adds	r3, r2, r3
   309f8:	3301      	adds	r3, #1
   309fa:	2200      	movs	r2, #0
   309fc:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   309fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30a00:	68ba      	ldr	r2, [r7, #8]
   30a02:	18d3      	adds	r3, r2, r3
   30a04:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   30a06:	68fb      	ldr	r3, [r7, #12]
   30a08:	3301      	adds	r3, #1
   30a0a:	781b      	ldrb	r3, [r3, #0]
   30a0c:	2b00      	cmp	r3, #0
   30a0e:	d102      	bne.n	30a16 <http_client_send_request+0xea>
		return -EINVAL;
   30a10:	2316      	movs	r3, #22
   30a12:	425b      	negs	r3, r3
   30a14:	e0ea      	b.n	30bec <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   30a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30a18:	0018      	movs	r0, r3
   30a1a:	4b79      	ldr	r3, [pc, #484]	; (30c00 <http_client_send_request+0x2d4>)
   30a1c:	4798      	blx	r3
   30a1e:	0003      	movs	r3, r0
   30a20:	2b3f      	cmp	r3, #63	; 0x3f
   30a22:	d902      	bls.n	30a2a <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   30a24:	235b      	movs	r3, #91	; 0x5b
   30a26:	425b      	negs	r3, r3
   30a28:	e0e0      	b.n	30bec <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   30a2a:	68fb      	ldr	r3, [r7, #12]
   30a2c:	22d4      	movs	r2, #212	; 0xd4
   30a2e:	589b      	ldr	r3, [r3, r2]
   30a30:	2b00      	cmp	r3, #0
   30a32:	d005      	beq.n	30a40 <http_client_send_request+0x114>
		free(module->req.ext_header);
   30a34:	68fb      	ldr	r3, [r7, #12]
   30a36:	22d4      	movs	r2, #212	; 0xd4
   30a38:	589b      	ldr	r3, [r3, r2]
   30a3a:	0018      	movs	r0, r3
   30a3c:	4b71      	ldr	r3, [pc, #452]	; (30c04 <http_client_send_request+0x2d8>)
   30a3e:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   30a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30a42:	2b00      	cmp	r3, #0
   30a44:	d010      	beq.n	30a68 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   30a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30a48:	0018      	movs	r0, r3
   30a4a:	4b6f      	ldr	r3, [pc, #444]	; (30c08 <http_client_send_request+0x2dc>)
   30a4c:	4798      	blx	r3
   30a4e:	0003      	movs	r3, r0
   30a50:	0019      	movs	r1, r3
   30a52:	68fb      	ldr	r3, [r7, #12]
   30a54:	22d4      	movs	r2, #212	; 0xd4
   30a56:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   30a58:	68fb      	ldr	r3, [r7, #12]
   30a5a:	22d4      	movs	r2, #212	; 0xd4
   30a5c:	589b      	ldr	r3, [r3, r2]
   30a5e:	2b00      	cmp	r3, #0
   30a60:	d106      	bne.n	30a70 <http_client_send_request+0x144>
			return -ENOMEM;
   30a62:	230c      	movs	r3, #12
   30a64:	425b      	negs	r3, r3
   30a66:	e0c1      	b.n	30bec <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   30a68:	68fb      	ldr	r3, [r7, #12]
   30a6a:	22d4      	movs	r2, #212	; 0xd4
   30a6c:	2100      	movs	r1, #0
   30a6e:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   30a70:	68fb      	ldr	r3, [r7, #12]
   30a72:	2241      	movs	r2, #65	; 0x41
   30a74:	5c99      	ldrb	r1, [r3, r2]
   30a76:	2001      	movs	r0, #1
   30a78:	4381      	bics	r1, r0
   30a7a:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   30a7c:	68fb      	ldr	r3, [r7, #12]
   30a7e:	2200      	movs	r2, #0
   30a80:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   30a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30a84:	781b      	ldrb	r3, [r3, #0]
   30a86:	2b2f      	cmp	r3, #47	; 0x2f
   30a88:	d107      	bne.n	30a9a <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   30a8a:	68fb      	ldr	r3, [r7, #12]
   30a8c:	3370      	adds	r3, #112	; 0x70
   30a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30a90:	0011      	movs	r1, r2
   30a92:	0018      	movs	r0, r3
   30a94:	4b5d      	ldr	r3, [pc, #372]	; (30c0c <http_client_send_request+0x2e0>)
   30a96:	4798      	blx	r3
   30a98:	e00f      	b.n	30aba <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   30a9a:	68fb      	ldr	r3, [r7, #12]
   30a9c:	2270      	movs	r2, #112	; 0x70
   30a9e:	212f      	movs	r1, #47	; 0x2f
   30aa0:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   30aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   30aa4:	781b      	ldrb	r3, [r3, #0]
   30aa6:	2b00      	cmp	r3, #0
   30aa8:	d007      	beq.n	30aba <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   30aaa:	68fb      	ldr	r3, [r7, #12]
   30aac:	3370      	adds	r3, #112	; 0x70
   30aae:	3301      	adds	r3, #1
   30ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   30ab2:	0011      	movs	r1, r2
   30ab4:	0018      	movs	r0, r3
   30ab6:	4b55      	ldr	r3, [pc, #340]	; (30c0c <http_client_send_request+0x2e0>)
   30ab8:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   30aba:	683b      	ldr	r3, [r7, #0]
   30abc:	2b00      	cmp	r3, #0
   30abe:	d007      	beq.n	30ad0 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   30ac0:	68fb      	ldr	r3, [r7, #12]
   30ac2:	33b0      	adds	r3, #176	; 0xb0
   30ac4:	6839      	ldr	r1, [r7, #0]
   30ac6:	2218      	movs	r2, #24
   30ac8:	0018      	movs	r0, r3
   30aca:	4b51      	ldr	r3, [pc, #324]	; (30c10 <http_client_send_request+0x2e4>)
   30acc:	4798      	blx	r3
   30ace:	e006      	b.n	30ade <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   30ad0:	68fb      	ldr	r3, [r7, #12]
   30ad2:	33b0      	adds	r3, #176	; 0xb0
   30ad4:	2218      	movs	r2, #24
   30ad6:	2100      	movs	r1, #0
   30ad8:	0018      	movs	r0, r3
   30ada:	4b4e      	ldr	r3, [pc, #312]	; (30c14 <http_client_send_request+0x2e8>)
   30adc:	4798      	blx	r3
	}

	module->req.method = method;
   30ade:	68fb      	ldr	r3, [r7, #12]
   30ae0:	1dfa      	adds	r2, r7, #7
   30ae2:	21c8      	movs	r1, #200	; 0xc8
   30ae4:	7812      	ldrb	r2, [r2, #0]
   30ae6:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   30ae8:	68fb      	ldr	r3, [r7, #12]
   30aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30aec:	2b01      	cmp	r3, #1
   30aee:	d003      	beq.n	30af8 <http_client_send_request+0x1cc>
   30af0:	d316      	bcc.n	30b20 <http_client_send_request+0x1f4>
   30af2:	2b02      	cmp	r3, #2
   30af4:	d004      	beq.n	30b00 <http_client_send_request+0x1d4>
   30af6:	e074      	b.n	30be2 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   30af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30afa:	2b00      	cmp	r3, #0
   30afc:	d100      	bne.n	30b00 <http_client_send_request+0x1d4>
   30afe:	e073      	b.n	30be8 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   30b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30b02:	2b00      	cmp	r3, #0
   30b04:	d107      	bne.n	30b16 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   30b06:	68fb      	ldr	r3, [r7, #12]
   30b08:	2203      	movs	r2, #3
   30b0a:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   30b0c:	68fb      	ldr	r3, [r7, #12]
   30b0e:	0018      	movs	r0, r3
   30b10:	4b41      	ldr	r3, [pc, #260]	; (30c18 <http_client_send_request+0x2ec>)
   30b12:	4798      	blx	r3
			break;
   30b14:	e069      	b.n	30bea <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   30b16:	68fb      	ldr	r3, [r7, #12]
   30b18:	2100      	movs	r1, #0
   30b1a:	0018      	movs	r0, r3
   30b1c:	4b3f      	ldr	r3, [pc, #252]	; (30c1c <http_client_send_request+0x2f0>)
   30b1e:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   30b20:	68fb      	ldr	r3, [r7, #12]
   30b22:	2252      	movs	r2, #82	; 0x52
   30b24:	5c9b      	ldrb	r3, [r3, r2]
   30b26:	2b00      	cmp	r3, #0
   30b28:	d007      	beq.n	30b3a <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   30b2a:	2337      	movs	r3, #55	; 0x37
   30b2c:	18fb      	adds	r3, r7, r3
   30b2e:	2237      	movs	r2, #55	; 0x37
   30b30:	18ba      	adds	r2, r7, r2
   30b32:	7812      	ldrb	r2, [r2, #0]
   30b34:	2101      	movs	r1, #1
   30b36:	430a      	orrs	r2, r1
   30b38:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   30b3a:	2337      	movs	r3, #55	; 0x37
   30b3c:	18fb      	adds	r3, r7, r3
   30b3e:	781b      	ldrb	r3, [r3, #0]
   30b40:	001a      	movs	r2, r3
   30b42:	2101      	movs	r1, #1
   30b44:	2002      	movs	r0, #2
   30b46:	4b36      	ldr	r3, [pc, #216]	; (30c20 <http_client_send_request+0x2f4>)
   30b48:	4798      	blx	r3
   30b4a:	0003      	movs	r3, r0
   30b4c:	001a      	movs	r2, r3
   30b4e:	68fb      	ldr	r3, [r7, #12]
   30b50:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   30b52:	68fb      	ldr	r3, [r7, #12]
   30b54:	781b      	ldrb	r3, [r3, #0]
   30b56:	b25b      	sxtb	r3, r3
   30b58:	2b00      	cmp	r3, #0
   30b5a:	db3f      	blt.n	30bdc <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   30b5c:	68fb      	ldr	r3, [r7, #12]
   30b5e:	781b      	ldrb	r3, [r3, #0]
   30b60:	b25b      	sxtb	r3, r3
   30b62:	001a      	movs	r2, r3
   30b64:	4b2f      	ldr	r3, [pc, #188]	; (30c24 <http_client_send_request+0x2f8>)
   30b66:	0092      	lsls	r2, r2, #2
   30b68:	68f9      	ldr	r1, [r7, #12]
   30b6a:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   30b6c:	68fb      	ldr	r3, [r7, #12]
   30b6e:	3301      	adds	r3, #1
   30b70:	0018      	movs	r0, r3
   30b72:	4b2d      	ldr	r3, [pc, #180]	; (30c28 <http_client_send_request+0x2fc>)
   30b74:	4798      	blx	r3
   30b76:	1e03      	subs	r3, r0, #0
   30b78:	d027      	beq.n	30bca <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   30b7a:	2314      	movs	r3, #20
   30b7c:	18fb      	adds	r3, r7, r3
   30b7e:	2202      	movs	r2, #2
   30b80:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   30b82:	68fb      	ldr	r3, [r7, #12]
   30b84:	2250      	movs	r2, #80	; 0x50
   30b86:	5a9b      	ldrh	r3, [r3, r2]
   30b88:	021b      	lsls	r3, r3, #8
   30b8a:	b21a      	sxth	r2, r3
   30b8c:	68fb      	ldr	r3, [r7, #12]
   30b8e:	2150      	movs	r1, #80	; 0x50
   30b90:	5a5b      	ldrh	r3, [r3, r1]
   30b92:	0a1b      	lsrs	r3, r3, #8
   30b94:	b29b      	uxth	r3, r3
   30b96:	b21b      	sxth	r3, r3
   30b98:	4313      	orrs	r3, r2
   30b9a:	b21b      	sxth	r3, r3
   30b9c:	b29a      	uxth	r2, r3
   30b9e:	2314      	movs	r3, #20
   30ba0:	18fb      	adds	r3, r7, r3
   30ba2:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   30ba4:	68fb      	ldr	r3, [r7, #12]
   30ba6:	3301      	adds	r3, #1
   30ba8:	0018      	movs	r0, r3
   30baa:	4b20      	ldr	r3, [pc, #128]	; (30c2c <http_client_send_request+0x300>)
   30bac:	4798      	blx	r3
   30bae:	0002      	movs	r2, r0
   30bb0:	2314      	movs	r3, #20
   30bb2:	18fb      	adds	r3, r7, r3
   30bb4:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   30bb6:	68fb      	ldr	r3, [r7, #12]
   30bb8:	781b      	ldrb	r3, [r3, #0]
   30bba:	b25b      	sxtb	r3, r3
   30bbc:	2214      	movs	r2, #20
   30bbe:	18b9      	adds	r1, r7, r2
   30bc0:	2210      	movs	r2, #16
   30bc2:	0018      	movs	r0, r3
   30bc4:	4b1a      	ldr	r3, [pc, #104]	; (30c30 <http_client_send_request+0x304>)
   30bc6:	4798      	blx	r3
   30bc8:	e004      	b.n	30bd4 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   30bca:	68fb      	ldr	r3, [r7, #12]
   30bcc:	3301      	adds	r3, #1
   30bce:	0018      	movs	r0, r3
   30bd0:	4b18      	ldr	r3, [pc, #96]	; (30c34 <http_client_send_request+0x308>)
   30bd2:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   30bd4:	68fb      	ldr	r3, [r7, #12]
   30bd6:	2201      	movs	r2, #1
   30bd8:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   30bda:	e006      	b.n	30bea <http_client_send_request+0x2be>
			return -ENOSPC;
   30bdc:	231c      	movs	r3, #28
   30bde:	425b      	negs	r3, r3
   30be0:	e004      	b.n	30bec <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   30be2:	230b      	movs	r3, #11
   30be4:	425b      	negs	r3, r3
   30be6:	e001      	b.n	30bec <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   30be8:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   30bea:	2300      	movs	r3, #0
}
   30bec:	0018      	movs	r0, r3
   30bee:	46bd      	mov	sp, r7
   30bf0:	b00e      	add	sp, #56	; 0x38
   30bf2:	bdb0      	pop	{r4, r5, r7, pc}
   30bf4:	00039484 	.word	0x00039484
   30bf8:	00034735 	.word	0x00034735
   30bfc:	0003948c 	.word	0x0003948c
   30c00:	00034727 	.word	0x00034727
   30c04:	00034341 	.word	0x00034341
   30c08:	000346ed 	.word	0x000346ed
   30c0c:	000346dd 	.word	0x000346dd
   30c10:	00034355 	.word	0x00034355
   30c14:	0003438b 	.word	0x0003438b
   30c18:	00030d8d 	.word	0x00030d8d
   30c1c:	00030c39 	.word	0x00030c39
   30c20:	00024fa1 	.word	0x00024fa1
   30c24:	200042dc 	.word	0x200042dc
   30c28:	00030895 	.word	0x00030895
   30c2c:	000256ed 	.word	0x000256ed
   30c30:	000251b5 	.word	0x000251b5
   30c34:	000257f5 	.word	0x000257f5

00030c38 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   30c38:	b580      	push	{r7, lr}
   30c3a:	b086      	sub	sp, #24
   30c3c:	af00      	add	r7, sp, #0
   30c3e:	6078      	str	r0, [r7, #4]
   30c40:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   30c42:	687b      	ldr	r3, [r7, #4]
   30c44:	22c0      	movs	r2, #192	; 0xc0
   30c46:	589b      	ldr	r3, [r3, r2]
   30c48:	2b00      	cmp	r3, #0
   30c4a:	d007      	beq.n	30c5c <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   30c4c:	687b      	ldr	r3, [r7, #4]
   30c4e:	22c0      	movs	r2, #192	; 0xc0
   30c50:	589b      	ldr	r3, [r3, r2]
   30c52:	687a      	ldr	r2, [r7, #4]
   30c54:	21c4      	movs	r1, #196	; 0xc4
   30c56:	5852      	ldr	r2, [r2, r1]
   30c58:	0010      	movs	r0, r2
   30c5a:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   30c5c:	687b      	ldr	r3, [r7, #4]
   30c5e:	33b0      	adds	r3, #176	; 0xb0
   30c60:	2218      	movs	r2, #24
   30c62:	2100      	movs	r1, #0
   30c64:	0018      	movs	r0, r3
   30c66:	4b24      	ldr	r3, [pc, #144]	; (30cf8 <_http_client_clear_conn+0xc0>)
   30c68:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   30c6a:	687b      	ldr	r3, [r7, #4]
   30c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30c6e:	2b00      	cmp	r3, #0
   30c70:	d005      	beq.n	30c7e <_http_client_clear_conn+0x46>
		close(module->sock);
   30c72:	687b      	ldr	r3, [r7, #4]
   30c74:	781b      	ldrb	r3, [r3, #0]
   30c76:	b25b      	sxtb	r3, r3
   30c78:	0018      	movs	r0, r3
   30c7a:	4b20      	ldr	r3, [pc, #128]	; (30cfc <_http_client_clear_conn+0xc4>)
   30c7c:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   30c7e:	687b      	ldr	r3, [r7, #4]
   30c80:	781b      	ldrb	r3, [r3, #0]
   30c82:	b25b      	sxtb	r3, r3
   30c84:	001a      	movs	r2, r3
   30c86:	4b1e      	ldr	r3, [pc, #120]	; (30d00 <_http_client_clear_conn+0xc8>)
   30c88:	0092      	lsls	r2, r2, #2
   30c8a:	2100      	movs	r1, #0
   30c8c:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   30c8e:	687b      	ldr	r3, [r7, #4]
   30c90:	336c      	adds	r3, #108	; 0x6c
   30c92:	226c      	movs	r2, #108	; 0x6c
   30c94:	2100      	movs	r1, #0
   30c96:	0018      	movs	r0, r3
   30c98:	4b17      	ldr	r3, [pc, #92]	; (30cf8 <_http_client_clear_conn+0xc0>)
   30c9a:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   30c9c:	687b      	ldr	r3, [r7, #4]
   30c9e:	33d8      	adds	r3, #216	; 0xd8
   30ca0:	2210      	movs	r2, #16
   30ca2:	2100      	movs	r1, #0
   30ca4:	0018      	movs	r0, r3
   30ca6:	4b14      	ldr	r3, [pc, #80]	; (30cf8 <_http_client_clear_conn+0xc0>)
   30ca8:	4798      	blx	r3
	module->req.state = STATE_INIT;
   30caa:	687b      	ldr	r3, [r7, #4]
   30cac:	2200      	movs	r2, #0
   30cae:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   30cb0:	687b      	ldr	r3, [r7, #4]
   30cb2:	22d8      	movs	r2, #216	; 0xd8
   30cb4:	2100      	movs	r1, #0
   30cb6:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   30cb8:	687b      	ldr	r3, [r7, #4]
   30cba:	2241      	movs	r2, #65	; 0x41
   30cbc:	5c99      	ldrb	r1, [r3, r2]
   30cbe:	2001      	movs	r0, #1
   30cc0:	4381      	bics	r1, r0
   30cc2:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   30cc4:	687b      	ldr	r3, [r7, #4]
   30cc6:	2241      	movs	r2, #65	; 0x41
   30cc8:	5c99      	ldrb	r1, [r3, r2]
   30cca:	2002      	movs	r0, #2
   30ccc:	4381      	bics	r1, r0
   30cce:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   30cd0:	230c      	movs	r3, #12
   30cd2:	18fb      	adds	r3, r7, r3
   30cd4:	683a      	ldr	r2, [r7, #0]
   30cd6:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   30cd8:	687b      	ldr	r3, [r7, #4]
   30cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30cdc:	2b00      	cmp	r3, #0
   30cde:	d006      	beq.n	30cee <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   30ce0:	687b      	ldr	r3, [r7, #4]
   30ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30ce4:	220c      	movs	r2, #12
   30ce6:	18ba      	adds	r2, r7, r2
   30ce8:	6878      	ldr	r0, [r7, #4]
   30cea:	2104      	movs	r1, #4
   30cec:	4798      	blx	r3
	}
}
   30cee:	46c0      	nop			; (mov r8, r8)
   30cf0:	46bd      	mov	sp, r7
   30cf2:	b006      	add	sp, #24
   30cf4:	bd80      	pop	{r7, pc}
   30cf6:	46c0      	nop			; (mov r8, r8)
   30cf8:	0003438b 	.word	0x0003438b
   30cfc:	000255ad 	.word	0x000255ad
   30d00:	200042dc 	.word	0x200042dc

00030d04 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   30d04:	b590      	push	{r4, r7, lr}
   30d06:	b087      	sub	sp, #28
   30d08:	af00      	add	r7, sp, #0
   30d0a:	60f8      	str	r0, [r7, #12]
   30d0c:	60b9      	str	r1, [r7, #8]
   30d0e:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   30d10:	68fb      	ldr	r3, [r7, #12]
   30d12:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   30d14:	697b      	ldr	r3, [r7, #20]
   30d16:	2241      	movs	r2, #65	; 0x41
   30d18:	5c99      	ldrb	r1, [r3, r2]
   30d1a:	2001      	movs	r0, #1
   30d1c:	4301      	orrs	r1, r0
   30d1e:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   30d20:	697b      	ldr	r3, [r7, #20]
   30d22:	2000      	movs	r0, #0
   30d24:	5618      	ldrsb	r0, [r3, r0]
   30d26:	687b      	ldr	r3, [r7, #4]
   30d28:	b29a      	uxth	r2, r3
   30d2a:	68b9      	ldr	r1, [r7, #8]
   30d2c:	2300      	movs	r3, #0
   30d2e:	4c14      	ldr	r4, [pc, #80]	; (30d80 <_http_client_send_wait+0x7c>)
   30d30:	47a0      	blx	r4
   30d32:	0003      	movs	r3, r0
   30d34:	613b      	str	r3, [r7, #16]
   30d36:	693b      	ldr	r3, [r7, #16]
   30d38:	2b00      	cmp	r3, #0
   30d3a:	da0f      	bge.n	30d5c <_http_client_send_wait+0x58>
		module->sending = 0;
   30d3c:	697b      	ldr	r3, [r7, #20]
   30d3e:	2241      	movs	r2, #65	; 0x41
   30d40:	5c99      	ldrb	r1, [r3, r2]
   30d42:	2001      	movs	r0, #1
   30d44:	4381      	bics	r1, r0
   30d46:	5499      	strb	r1, [r3, r2]
		return result;
   30d48:	693b      	ldr	r3, [r7, #16]
   30d4a:	e014      	b.n	30d76 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   30d4c:	2000      	movs	r0, #0
   30d4e:	4b0d      	ldr	r3, [pc, #52]	; (30d84 <_http_client_send_wait+0x80>)
   30d50:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   30d52:	697b      	ldr	r3, [r7, #20]
   30d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30d56:	0018      	movs	r0, r3
   30d58:	4b0b      	ldr	r3, [pc, #44]	; (30d88 <_http_client_send_wait+0x84>)
   30d5a:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   30d5c:	697b      	ldr	r3, [r7, #20]
   30d5e:	2241      	movs	r2, #65	; 0x41
   30d60:	5c9b      	ldrb	r3, [r3, r2]
   30d62:	2201      	movs	r2, #1
   30d64:	4013      	ands	r3, r2
   30d66:	b2db      	uxtb	r3, r3
   30d68:	2b00      	cmp	r3, #0
   30d6a:	d003      	beq.n	30d74 <_http_client_send_wait+0x70>
   30d6c:	697b      	ldr	r3, [r7, #20]
   30d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30d70:	2b02      	cmp	r3, #2
   30d72:	d8eb      	bhi.n	30d4c <_http_client_send_wait+0x48>
	}

	return 0;
   30d74:	2300      	movs	r3, #0
}
   30d76:	0018      	movs	r0, r3
   30d78:	46bd      	mov	sp, r7
   30d7a:	b007      	add	sp, #28
   30d7c:	bd90      	pop	{r4, r7, pc}
   30d7e:	46c0      	nop			; (mov r8, r8)
   30d80:	000252c9 	.word	0x000252c9
   30d84:	00021975 	.word	0x00021975
   30d88:	00032011 	.word	0x00032011

00030d8c <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   30d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   30d8e:	46c6      	mov	lr, r8
   30d90:	b500      	push	{lr}
   30d92:	b0a0      	sub	sp, #128	; 0x80
   30d94:	af02      	add	r7, sp, #8
   30d96:	61f8      	str	r0, [r7, #28]
   30d98:	4668      	mov	r0, sp
   30d9a:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   30d9c:	2318      	movs	r3, #24
   30d9e:	2218      	movs	r2, #24
   30da0:	18ba      	adds	r2, r7, r2
   30da2:	18d0      	adds	r0, r2, r3
   30da4:	4bbd      	ldr	r3, [pc, #756]	; (3109c <_http_client_request+0x310>)
   30da6:	469c      	mov	ip, r3
   30da8:	4663      	mov	r3, ip
   30daa:	cb16      	ldmia	r3!, {r1, r2, r4}
   30dac:	c016      	stmia	r0!, {r1, r2, r4}
   30dae:	469c      	mov	ip, r3
   30db0:	4663      	mov	r3, ip
   30db2:	681b      	ldr	r3, [r3, #0]
   30db4:	469c      	mov	ip, r3
   30db6:	4663      	mov	r3, ip
   30db8:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   30dba:	69f8      	ldr	r0, [r7, #28]
   30dbc:	6e40      	ldr	r0, [r0, #100]	; 0x64
   30dbe:	4684      	mov	ip, r0
   30dc0:	2301      	movs	r3, #1
   30dc2:	425b      	negs	r3, r3
   30dc4:	4698      	mov	r8, r3
   30dc6:	44c4      	add	ip, r8
   30dc8:	4663      	mov	r3, ip
   30dca:	66fb      	str	r3, [r7, #108]	; 0x6c
   30dcc:	6038      	str	r0, [r7, #0]
   30dce:	2300      	movs	r3, #0
   30dd0:	607b      	str	r3, [r7, #4]
   30dd2:	6839      	ldr	r1, [r7, #0]
   30dd4:	687a      	ldr	r2, [r7, #4]
   30dd6:	000b      	movs	r3, r1
   30dd8:	0f5b      	lsrs	r3, r3, #29
   30dda:	469c      	mov	ip, r3
   30ddc:	0013      	movs	r3, r2
   30dde:	00db      	lsls	r3, r3, #3
   30de0:	617b      	str	r3, [r7, #20]
   30de2:	4663      	mov	r3, ip
   30de4:	697c      	ldr	r4, [r7, #20]
   30de6:	431c      	orrs	r4, r3
   30de8:	617c      	str	r4, [r7, #20]
   30dea:	000b      	movs	r3, r1
   30dec:	00db      	lsls	r3, r3, #3
   30dee:	613b      	str	r3, [r7, #16]
   30df0:	0005      	movs	r5, r0
   30df2:	2200      	movs	r2, #0
   30df4:	0016      	movs	r6, r2
   30df6:	0f6a      	lsrs	r2, r5, #29
   30df8:	00f3      	lsls	r3, r6, #3
   30dfa:	60fb      	str	r3, [r7, #12]
   30dfc:	68fb      	ldr	r3, [r7, #12]
   30dfe:	4313      	orrs	r3, r2
   30e00:	60fb      	str	r3, [r7, #12]
   30e02:	00eb      	lsls	r3, r5, #3
   30e04:	60bb      	str	r3, [r7, #8]
   30e06:	1dc3      	adds	r3, r0, #7
   30e08:	08db      	lsrs	r3, r3, #3
   30e0a:	00db      	lsls	r3, r3, #3
   30e0c:	466a      	mov	r2, sp
   30e0e:	1ad3      	subs	r3, r2, r3
   30e10:	469d      	mov	sp, r3
   30e12:	ab02      	add	r3, sp, #8
   30e14:	3300      	adds	r3, #0
   30e16:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   30e18:	69fb      	ldr	r3, [r7, #28]
   30e1a:	2b00      	cmp	r3, #0
   30e1c:	d100      	bne.n	30e20 <_http_client_request+0x94>
   30e1e:	e346      	b.n	314ae <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   30e20:	69fb      	ldr	r3, [r7, #28]
   30e22:	2241      	movs	r2, #65	; 0x41
   30e24:	5c9b      	ldrb	r3, [r3, r2]
   30e26:	2201      	movs	r2, #1
   30e28:	4013      	ands	r3, r2
   30e2a:	b2db      	uxtb	r3, r3
   30e2c:	2b00      	cmp	r3, #0
   30e2e:	d000      	beq.n	30e32 <_http_client_request+0xa6>
   30e30:	e33f      	b.n	314b2 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   30e32:	69fb      	ldr	r3, [r7, #28]
   30e34:	33b0      	adds	r3, #176	; 0xb0
   30e36:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   30e38:	69fb      	ldr	r3, [r7, #28]
   30e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   30e3c:	2b03      	cmp	r3, #3
   30e3e:	d003      	beq.n	30e48 <_http_client_request+0xbc>
   30e40:	2b04      	cmp	r3, #4
   30e42:	d100      	bne.n	30e46 <_http_client_request+0xba>
   30e44:	e1b3      	b.n	311ae <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   30e46:	e32f      	b.n	314a8 <_http_client_request+0x71c>
		module->req.content_length = 0;
   30e48:	69fb      	ldr	r3, [r7, #28]
   30e4a:	22cc      	movs	r2, #204	; 0xcc
   30e4c:	2100      	movs	r1, #0
   30e4e:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   30e50:	69fb      	ldr	r3, [r7, #28]
   30e52:	22d0      	movs	r2, #208	; 0xd0
   30e54:	2100      	movs	r1, #0
   30e56:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   30e58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30e5a:	69fb      	ldr	r3, [r7, #28]
   30e5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   30e5e:	4c90      	ldr	r4, [pc, #576]	; (310a0 <_http_client_request+0x314>)
   30e60:	2334      	movs	r3, #52	; 0x34
   30e62:	2018      	movs	r0, #24
   30e64:	1838      	adds	r0, r7, r0
   30e66:	18c0      	adds	r0, r0, r3
   30e68:	69fb      	ldr	r3, [r7, #28]
   30e6a:	9300      	str	r3, [sp, #0]
   30e6c:	0023      	movs	r3, r4
   30e6e:	4c8d      	ldr	r4, [pc, #564]	; (310a4 <_http_client_request+0x318>)
   30e70:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   30e72:	69fb      	ldr	r3, [r7, #28]
   30e74:	22c8      	movs	r2, #200	; 0xc8
   30e76:	5c9b      	ldrb	r3, [r3, r2]
   30e78:	2b01      	cmp	r3, #1
   30e7a:	d10a      	bne.n	30e92 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   30e7c:	498a      	ldr	r1, [pc, #552]	; (310a8 <_http_client_request+0x31c>)
   30e7e:	2334      	movs	r3, #52	; 0x34
   30e80:	2218      	movs	r2, #24
   30e82:	4694      	mov	ip, r2
   30e84:	44bc      	add	ip, r7
   30e86:	4463      	add	r3, ip
   30e88:	2204      	movs	r2, #4
   30e8a:	0018      	movs	r0, r3
   30e8c:	4b87      	ldr	r3, [pc, #540]	; (310ac <_http_client_request+0x320>)
   30e8e:	4798      	blx	r3
   30e90:	e04e      	b.n	30f30 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   30e92:	69fb      	ldr	r3, [r7, #28]
   30e94:	22c8      	movs	r2, #200	; 0xc8
   30e96:	5c9b      	ldrb	r3, [r3, r2]
   30e98:	2b02      	cmp	r3, #2
   30e9a:	d10a      	bne.n	30eb2 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   30e9c:	4984      	ldr	r1, [pc, #528]	; (310b0 <_http_client_request+0x324>)
   30e9e:	2334      	movs	r3, #52	; 0x34
   30ea0:	2218      	movs	r2, #24
   30ea2:	4694      	mov	ip, r2
   30ea4:	44bc      	add	ip, r7
   30ea6:	4463      	add	r3, ip
   30ea8:	2205      	movs	r2, #5
   30eaa:	0018      	movs	r0, r3
   30eac:	4b7f      	ldr	r3, [pc, #508]	; (310ac <_http_client_request+0x320>)
   30eae:	4798      	blx	r3
   30eb0:	e03e      	b.n	30f30 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   30eb2:	69fb      	ldr	r3, [r7, #28]
   30eb4:	22c8      	movs	r2, #200	; 0xc8
   30eb6:	5c9b      	ldrb	r3, [r3, r2]
   30eb8:	2b03      	cmp	r3, #3
   30eba:	d10a      	bne.n	30ed2 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   30ebc:	497d      	ldr	r1, [pc, #500]	; (310b4 <_http_client_request+0x328>)
   30ebe:	2334      	movs	r3, #52	; 0x34
   30ec0:	2218      	movs	r2, #24
   30ec2:	4694      	mov	ip, r2
   30ec4:	44bc      	add	ip, r7
   30ec6:	4463      	add	r3, ip
   30ec8:	2207      	movs	r2, #7
   30eca:	0018      	movs	r0, r3
   30ecc:	4b77      	ldr	r3, [pc, #476]	; (310ac <_http_client_request+0x320>)
   30ece:	4798      	blx	r3
   30ed0:	e02e      	b.n	30f30 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   30ed2:	69fb      	ldr	r3, [r7, #28]
   30ed4:	22c8      	movs	r2, #200	; 0xc8
   30ed6:	5c9b      	ldrb	r3, [r3, r2]
   30ed8:	2b04      	cmp	r3, #4
   30eda:	d10a      	bne.n	30ef2 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   30edc:	4976      	ldr	r1, [pc, #472]	; (310b8 <_http_client_request+0x32c>)
   30ede:	2334      	movs	r3, #52	; 0x34
   30ee0:	2218      	movs	r2, #24
   30ee2:	4694      	mov	ip, r2
   30ee4:	44bc      	add	ip, r7
   30ee6:	4463      	add	r3, ip
   30ee8:	2204      	movs	r2, #4
   30eea:	0018      	movs	r0, r3
   30eec:	4b6f      	ldr	r3, [pc, #444]	; (310ac <_http_client_request+0x320>)
   30eee:	4798      	blx	r3
   30ef0:	e01e      	b.n	30f30 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   30ef2:	69fb      	ldr	r3, [r7, #28]
   30ef4:	22c8      	movs	r2, #200	; 0xc8
   30ef6:	5c9b      	ldrb	r3, [r3, r2]
   30ef8:	2b05      	cmp	r3, #5
   30efa:	d10a      	bne.n	30f12 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   30efc:	496f      	ldr	r1, [pc, #444]	; (310bc <_http_client_request+0x330>)
   30efe:	2334      	movs	r3, #52	; 0x34
   30f00:	2218      	movs	r2, #24
   30f02:	4694      	mov	ip, r2
   30f04:	44bc      	add	ip, r7
   30f06:	4463      	add	r3, ip
   30f08:	2208      	movs	r2, #8
   30f0a:	0018      	movs	r0, r3
   30f0c:	4b67      	ldr	r3, [pc, #412]	; (310ac <_http_client_request+0x320>)
   30f0e:	4798      	blx	r3
   30f10:	e00e      	b.n	30f30 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   30f12:	69fb      	ldr	r3, [r7, #28]
   30f14:	22c8      	movs	r2, #200	; 0xc8
   30f16:	5c9b      	ldrb	r3, [r3, r2]
   30f18:	2b06      	cmp	r3, #6
   30f1a:	d109      	bne.n	30f30 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   30f1c:	4968      	ldr	r1, [pc, #416]	; (310c0 <_http_client_request+0x334>)
   30f1e:	2334      	movs	r3, #52	; 0x34
   30f20:	2218      	movs	r2, #24
   30f22:	4694      	mov	ip, r2
   30f24:	44bc      	add	ip, r7
   30f26:	4463      	add	r3, ip
   30f28:	2205      	movs	r2, #5
   30f2a:	0018      	movs	r0, r3
   30f2c:	4b5f      	ldr	r3, [pc, #380]	; (310ac <_http_client_request+0x320>)
   30f2e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   30f30:	69fb      	ldr	r3, [r7, #28]
   30f32:	3370      	adds	r3, #112	; 0x70
   30f34:	001c      	movs	r4, r3
   30f36:	69fb      	ldr	r3, [r7, #28]
   30f38:	3370      	adds	r3, #112	; 0x70
   30f3a:	0018      	movs	r0, r3
   30f3c:	4b61      	ldr	r3, [pc, #388]	; (310c4 <_http_client_request+0x338>)
   30f3e:	4798      	blx	r3
   30f40:	0002      	movs	r2, r0
   30f42:	2334      	movs	r3, #52	; 0x34
   30f44:	2118      	movs	r1, #24
   30f46:	468c      	mov	ip, r1
   30f48:	44bc      	add	ip, r7
   30f4a:	4463      	add	r3, ip
   30f4c:	0021      	movs	r1, r4
   30f4e:	0018      	movs	r0, r3
   30f50:	4b56      	ldr	r3, [pc, #344]	; (310ac <_http_client_request+0x320>)
   30f52:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   30f54:	495c      	ldr	r1, [pc, #368]	; (310c8 <_http_client_request+0x33c>)
   30f56:	2334      	movs	r3, #52	; 0x34
   30f58:	2218      	movs	r2, #24
   30f5a:	4694      	mov	ip, r2
   30f5c:	44bc      	add	ip, r7
   30f5e:	4463      	add	r3, ip
   30f60:	220b      	movs	r2, #11
   30f62:	0018      	movs	r0, r3
   30f64:	4b51      	ldr	r3, [pc, #324]	; (310ac <_http_client_request+0x320>)
   30f66:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   30f68:	4958      	ldr	r1, [pc, #352]	; (310cc <_http_client_request+0x340>)
   30f6a:	2334      	movs	r3, #52	; 0x34
   30f6c:	2218      	movs	r2, #24
   30f6e:	4694      	mov	ip, r2
   30f70:	44bc      	add	ip, r7
   30f72:	4463      	add	r3, ip
   30f74:	220c      	movs	r2, #12
   30f76:	0018      	movs	r0, r3
   30f78:	4b4c      	ldr	r3, [pc, #304]	; (310ac <_http_client_request+0x320>)
   30f7a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   30f7c:	69fb      	ldr	r3, [r7, #28]
   30f7e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   30f80:	69fb      	ldr	r3, [r7, #28]
   30f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   30f84:	0018      	movs	r0, r3
   30f86:	4b4f      	ldr	r3, [pc, #316]	; (310c4 <_http_client_request+0x338>)
   30f88:	4798      	blx	r3
   30f8a:	0002      	movs	r2, r0
   30f8c:	2334      	movs	r3, #52	; 0x34
   30f8e:	2118      	movs	r1, #24
   30f90:	468c      	mov	ip, r1
   30f92:	44bc      	add	ip, r7
   30f94:	4463      	add	r3, ip
   30f96:	0021      	movs	r1, r4
   30f98:	0018      	movs	r0, r3
   30f9a:	4b44      	ldr	r3, [pc, #272]	; (310ac <_http_client_request+0x320>)
   30f9c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30f9e:	494c      	ldr	r1, [pc, #304]	; (310d0 <_http_client_request+0x344>)
   30fa0:	2334      	movs	r3, #52	; 0x34
   30fa2:	2218      	movs	r2, #24
   30fa4:	4694      	mov	ip, r2
   30fa6:	44bc      	add	ip, r7
   30fa8:	4463      	add	r3, ip
   30faa:	2202      	movs	r2, #2
   30fac:	0018      	movs	r0, r3
   30fae:	4b3f      	ldr	r3, [pc, #252]	; (310ac <_http_client_request+0x320>)
   30fb0:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   30fb2:	4948      	ldr	r1, [pc, #288]	; (310d4 <_http_client_request+0x348>)
   30fb4:	2334      	movs	r3, #52	; 0x34
   30fb6:	2218      	movs	r2, #24
   30fb8:	4694      	mov	ip, r2
   30fba:	44bc      	add	ip, r7
   30fbc:	4463      	add	r3, ip
   30fbe:	2206      	movs	r2, #6
   30fc0:	0018      	movs	r0, r3
   30fc2:	4b3a      	ldr	r3, [pc, #232]	; (310ac <_http_client_request+0x320>)
   30fc4:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   30fc6:	69fb      	ldr	r3, [r7, #28]
   30fc8:	1c5c      	adds	r4, r3, #1
   30fca:	69fb      	ldr	r3, [r7, #28]
   30fcc:	3301      	adds	r3, #1
   30fce:	0018      	movs	r0, r3
   30fd0:	4b3c      	ldr	r3, [pc, #240]	; (310c4 <_http_client_request+0x338>)
   30fd2:	4798      	blx	r3
   30fd4:	0002      	movs	r2, r0
   30fd6:	2334      	movs	r3, #52	; 0x34
   30fd8:	2118      	movs	r1, #24
   30fda:	468c      	mov	ip, r1
   30fdc:	44bc      	add	ip, r7
   30fde:	4463      	add	r3, ip
   30fe0:	0021      	movs	r1, r4
   30fe2:	0018      	movs	r0, r3
   30fe4:	4b31      	ldr	r3, [pc, #196]	; (310ac <_http_client_request+0x320>)
   30fe6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   30fe8:	4939      	ldr	r1, [pc, #228]	; (310d0 <_http_client_request+0x344>)
   30fea:	2334      	movs	r3, #52	; 0x34
   30fec:	2218      	movs	r2, #24
   30fee:	4694      	mov	ip, r2
   30ff0:	44bc      	add	ip, r7
   30ff2:	4463      	add	r3, ip
   30ff4:	2202      	movs	r2, #2
   30ff6:	0018      	movs	r0, r3
   30ff8:	4b2c      	ldr	r3, [pc, #176]	; (310ac <_http_client_request+0x320>)
   30ffa:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   30ffc:	4936      	ldr	r1, [pc, #216]	; (310d8 <_http_client_request+0x34c>)
   30ffe:	2334      	movs	r3, #52	; 0x34
   31000:	2218      	movs	r2, #24
   31002:	4694      	mov	ip, r2
   31004:	44bc      	add	ip, r7
   31006:	4463      	add	r3, ip
   31008:	2218      	movs	r2, #24
   3100a:	0018      	movs	r0, r3
   3100c:	4b27      	ldr	r3, [pc, #156]	; (310ac <_http_client_request+0x320>)
   3100e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   31010:	4932      	ldr	r1, [pc, #200]	; (310dc <_http_client_request+0x350>)
   31012:	2334      	movs	r3, #52	; 0x34
   31014:	2218      	movs	r2, #24
   31016:	4694      	mov	ip, r2
   31018:	44bc      	add	ip, r7
   3101a:	4463      	add	r3, ip
   3101c:	2213      	movs	r2, #19
   3101e:	0018      	movs	r0, r3
   31020:	4b22      	ldr	r3, [pc, #136]	; (310ac <_http_client_request+0x320>)
   31022:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   31024:	492e      	ldr	r1, [pc, #184]	; (310e0 <_http_client_request+0x354>)
   31026:	2334      	movs	r3, #52	; 0x34
   31028:	2218      	movs	r2, #24
   3102a:	4694      	mov	ip, r2
   3102c:	44bc      	add	ip, r7
   3102e:	4463      	add	r3, ip
   31030:	2217      	movs	r2, #23
   31032:	0018      	movs	r0, r3
   31034:	4b1d      	ldr	r3, [pc, #116]	; (310ac <_http_client_request+0x320>)
   31036:	4798      	blx	r3
		if (entity->read != NULL) {
   31038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3103a:	68db      	ldr	r3, [r3, #12]
   3103c:	2b00      	cmp	r3, #0
   3103e:	d100      	bne.n	31042 <_http_client_request+0x2b6>
   31040:	e088      	b.n	31154 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   31042:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31044:	781b      	ldrb	r3, [r3, #0]
   31046:	2b00      	cmp	r3, #0
   31048:	d00f      	beq.n	3106a <_http_client_request+0x2de>
				module->req.content_length = -1;
   3104a:	69fb      	ldr	r3, [r7, #28]
   3104c:	21cc      	movs	r1, #204	; 0xcc
   3104e:	2201      	movs	r2, #1
   31050:	4252      	negs	r2, r2
   31052:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   31054:	4923      	ldr	r1, [pc, #140]	; (310e4 <_http_client_request+0x358>)
   31056:	2334      	movs	r3, #52	; 0x34
   31058:	2218      	movs	r2, #24
   3105a:	4694      	mov	ip, r2
   3105c:	44bc      	add	ip, r7
   3105e:	4463      	add	r3, ip
   31060:	221c      	movs	r2, #28
   31062:	0018      	movs	r0, r3
   31064:	4b11      	ldr	r3, [pc, #68]	; (310ac <_http_client_request+0x320>)
   31066:	4798      	blx	r3
   31068:	e074      	b.n	31154 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   3106a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3106c:	689b      	ldr	r3, [r3, #8]
   3106e:	2b00      	cmp	r3, #0
   31070:	d070      	beq.n	31154 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   31072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31074:	689a      	ldr	r2, [r3, #8]
   31076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31078:	695b      	ldr	r3, [r3, #20]
   3107a:	0018      	movs	r0, r3
   3107c:	4790      	blx	r2
   3107e:	0001      	movs	r1, r0
   31080:	69fb      	ldr	r3, [r7, #28]
   31082:	22cc      	movs	r2, #204	; 0xcc
   31084:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   31086:	69fb      	ldr	r3, [r7, #28]
   31088:	22cc      	movs	r2, #204	; 0xcc
   3108a:	589b      	ldr	r3, [r3, r2]
   3108c:	2b00      	cmp	r3, #0
   3108e:	da2b      	bge.n	310e8 <_http_client_request+0x35c>
					module->req.content_length = 0;
   31090:	69fb      	ldr	r3, [r7, #28]
   31092:	22cc      	movs	r2, #204	; 0xcc
   31094:	2100      	movs	r1, #0
   31096:	5099      	str	r1, [r3, r2]
   31098:	e05c      	b.n	31154 <_http_client_request+0x3c8>
   3109a:	46c0      	nop			; (mov r8, r8)
   3109c:	00039574 	.word	0x00039574
   310a0:	00030d05 	.word	0x00030d05
   310a4:	00031c6d 	.word	0x00031c6d
   310a8:	00039498 	.word	0x00039498
   310ac:	00031ced 	.word	0x00031ced
   310b0:	000394a0 	.word	0x000394a0
   310b4:	000394a8 	.word	0x000394a8
   310b8:	000394b0 	.word	0x000394b0
   310bc:	000394b8 	.word	0x000394b8
   310c0:	000394c4 	.word	0x000394c4
   310c4:	00034727 	.word	0x00034727
   310c8:	000394cc 	.word	0x000394cc
   310cc:	000394d8 	.word	0x000394d8
   310d0:	000394e8 	.word	0x000394e8
   310d4:	000394ec 	.word	0x000394ec
   310d8:	000394f4 	.word	0x000394f4
   310dc:	00039510 	.word	0x00039510
   310e0:	00039524 	.word	0x00039524
   310e4:	0003953c 	.word	0x0003953c
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   310e8:	69fb      	ldr	r3, [r7, #28]
   310ea:	22cc      	movs	r2, #204	; 0xcc
   310ec:	589b      	ldr	r3, [r3, r2]
   310ee:	001a      	movs	r2, r3
   310f0:	49e0      	ldr	r1, [pc, #896]	; (31474 <_http_client_request+0x6e8>)
   310f2:	2328      	movs	r3, #40	; 0x28
   310f4:	2018      	movs	r0, #24
   310f6:	4684      	mov	ip, r0
   310f8:	44bc      	add	ip, r7
   310fa:	4463      	add	r3, ip
   310fc:	0018      	movs	r0, r3
   310fe:	4bde      	ldr	r3, [pc, #888]	; (31478 <_http_client_request+0x6ec>)
   31100:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   31102:	49de      	ldr	r1, [pc, #888]	; (3147c <_http_client_request+0x6f0>)
   31104:	2334      	movs	r3, #52	; 0x34
   31106:	2218      	movs	r2, #24
   31108:	4694      	mov	ip, r2
   3110a:	44bc      	add	ip, r7
   3110c:	4463      	add	r3, ip
   3110e:	2210      	movs	r2, #16
   31110:	0018      	movs	r0, r3
   31112:	4bdb      	ldr	r3, [pc, #876]	; (31480 <_http_client_request+0x6f4>)
   31114:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   31116:	2328      	movs	r3, #40	; 0x28
   31118:	2218      	movs	r2, #24
   3111a:	4694      	mov	ip, r2
   3111c:	44bc      	add	ip, r7
   3111e:	4463      	add	r3, ip
   31120:	0018      	movs	r0, r3
   31122:	4bd8      	ldr	r3, [pc, #864]	; (31484 <_http_client_request+0x6f8>)
   31124:	4798      	blx	r3
   31126:	0002      	movs	r2, r0
   31128:	2328      	movs	r3, #40	; 0x28
   3112a:	2118      	movs	r1, #24
   3112c:	1879      	adds	r1, r7, r1
   3112e:	18c9      	adds	r1, r1, r3
   31130:	2334      	movs	r3, #52	; 0x34
   31132:	2018      	movs	r0, #24
   31134:	4684      	mov	ip, r0
   31136:	44bc      	add	ip, r7
   31138:	4463      	add	r3, ip
   3113a:	0018      	movs	r0, r3
   3113c:	4bd0      	ldr	r3, [pc, #832]	; (31480 <_http_client_request+0x6f4>)
   3113e:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31140:	49d1      	ldr	r1, [pc, #836]	; (31488 <_http_client_request+0x6fc>)
   31142:	2334      	movs	r3, #52	; 0x34
   31144:	2218      	movs	r2, #24
   31146:	4694      	mov	ip, r2
   31148:	44bc      	add	ip, r7
   3114a:	4463      	add	r3, ip
   3114c:	2202      	movs	r2, #2
   3114e:	0018      	movs	r0, r3
   31150:	4bcb      	ldr	r3, [pc, #812]	; (31480 <_http_client_request+0x6f4>)
   31152:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   31154:	69fb      	ldr	r3, [r7, #28]
   31156:	22d4      	movs	r2, #212	; 0xd4
   31158:	589b      	ldr	r3, [r3, r2]
   3115a:	2b00      	cmp	r3, #0
   3115c:	d012      	beq.n	31184 <_http_client_request+0x3f8>
				module->req.ext_header,
   3115e:	69fb      	ldr	r3, [r7, #28]
   31160:	22d4      	movs	r2, #212	; 0xd4
   31162:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   31164:	69fb      	ldr	r3, [r7, #28]
   31166:	22d4      	movs	r2, #212	; 0xd4
   31168:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3116a:	0018      	movs	r0, r3
   3116c:	4bc5      	ldr	r3, [pc, #788]	; (31484 <_http_client_request+0x6f8>)
   3116e:	4798      	blx	r3
   31170:	0002      	movs	r2, r0
   31172:	2334      	movs	r3, #52	; 0x34
   31174:	2118      	movs	r1, #24
   31176:	468c      	mov	ip, r1
   31178:	44bc      	add	ip, r7
   3117a:	4463      	add	r3, ip
   3117c:	0021      	movs	r1, r4
   3117e:	0018      	movs	r0, r3
   31180:	4bbf      	ldr	r3, [pc, #764]	; (31480 <_http_client_request+0x6f4>)
   31182:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   31184:	49c0      	ldr	r1, [pc, #768]	; (31488 <_http_client_request+0x6fc>)
   31186:	2334      	movs	r3, #52	; 0x34
   31188:	2218      	movs	r2, #24
   3118a:	4694      	mov	ip, r2
   3118c:	44bc      	add	ip, r7
   3118e:	4463      	add	r3, ip
   31190:	2202      	movs	r2, #2
   31192:	0018      	movs	r0, r3
   31194:	4bba      	ldr	r3, [pc, #744]	; (31480 <_http_client_request+0x6f4>)
   31196:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   31198:	2334      	movs	r3, #52	; 0x34
   3119a:	2218      	movs	r2, #24
   3119c:	4694      	mov	ip, r2
   3119e:	44bc      	add	ip, r7
   311a0:	4463      	add	r3, ip
   311a2:	0018      	movs	r0, r3
   311a4:	4bb9      	ldr	r3, [pc, #740]	; (3148c <_http_client_request+0x700>)
   311a6:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   311a8:	69fb      	ldr	r3, [r7, #28]
   311aa:	2204      	movs	r2, #4
   311ac:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   311ae:	69fb      	ldr	r3, [r7, #28]
   311b0:	22cc      	movs	r2, #204	; 0xcc
   311b2:	589b      	ldr	r3, [r3, r2]
   311b4:	2b00      	cmp	r3, #0
   311b6:	db00      	blt.n	311ba <_http_client_request+0x42e>
   311b8:	e0c6      	b.n	31348 <_http_client_request+0x5bc>
   311ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   311bc:	68db      	ldr	r3, [r3, #12]
   311be:	2b00      	cmp	r3, #0
   311c0:	d100      	bne.n	311c4 <_http_client_request+0x438>
   311c2:	e0c1      	b.n	31348 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   311c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   311c6:	68dc      	ldr	r4, [r3, #12]
   311c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   311ca:	6958      	ldr	r0, [r3, #20]
   311cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   311ce:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   311d0:	69fb      	ldr	r3, [r7, #28]
   311d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   311d4:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   311d6:	69fb      	ldr	r3, [r7, #28]
   311d8:	22d0      	movs	r2, #208	; 0xd0
   311da:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   311dc:	002a      	movs	r2, r5
   311de:	47a0      	blx	r4
   311e0:	0003      	movs	r3, r0
   311e2:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   311e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   311e6:	2b00      	cmp	r3, #0
   311e8:	da01      	bge.n	311ee <_http_client_request+0x462>
				size = 0;
   311ea:	2300      	movs	r3, #0
   311ec:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   311ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   311f0:	220a      	movs	r2, #10
   311f2:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   311f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   311f6:	220d      	movs	r2, #13
   311f8:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   311fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   311fc:	3305      	adds	r3, #5
   311fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31200:	210d      	movs	r1, #13
   31202:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   31204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31206:	3306      	adds	r3, #6
   31208:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3120a:	210a      	movs	r1, #10
   3120c:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   3120e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31210:	2b00      	cmp	r3, #0
   31212:	db14      	blt.n	3123e <_http_client_request+0x4b2>
				ptr = buffer + 2;
   31214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31216:	3302      	adds	r3, #2
   31218:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   3121a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3121c:	4a9c      	ldr	r2, [pc, #624]	; (31490 <_http_client_request+0x704>)
   3121e:	4013      	ands	r3, r2
   31220:	d504      	bpl.n	3122c <_http_client_request+0x4a0>
   31222:	3b01      	subs	r3, #1
   31224:	2210      	movs	r2, #16
   31226:	4252      	negs	r2, r2
   31228:	4313      	orrs	r3, r2
   3122a:	3301      	adds	r3, #1
   3122c:	001a      	movs	r2, r3
   3122e:	2318      	movs	r3, #24
   31230:	2118      	movs	r1, #24
   31232:	468c      	mov	ip, r1
   31234:	44bc      	add	ip, r7
   31236:	4463      	add	r3, ip
   31238:	5c9a      	ldrb	r2, [r3, r2]
   3123a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3123c:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   3123e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31240:	2b0f      	cmp	r3, #15
   31242:	dd19      	ble.n	31278 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   31244:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31246:	3301      	adds	r3, #1
   31248:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   3124a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3124c:	2b00      	cmp	r3, #0
   3124e:	da00      	bge.n	31252 <_http_client_request+0x4c6>
   31250:	330f      	adds	r3, #15
   31252:	111b      	asrs	r3, r3, #4
   31254:	001a      	movs	r2, r3
   31256:	4b8e      	ldr	r3, [pc, #568]	; (31490 <_http_client_request+0x704>)
   31258:	4013      	ands	r3, r2
   3125a:	d504      	bpl.n	31266 <_http_client_request+0x4da>
   3125c:	3b01      	subs	r3, #1
   3125e:	2210      	movs	r2, #16
   31260:	4252      	negs	r2, r2
   31262:	4313      	orrs	r3, r2
   31264:	3301      	adds	r3, #1
   31266:	001a      	movs	r2, r3
   31268:	2318      	movs	r3, #24
   3126a:	2118      	movs	r1, #24
   3126c:	468c      	mov	ip, r1
   3126e:	44bc      	add	ip, r7
   31270:	4463      	add	r3, ip
   31272:	5c9a      	ldrb	r2, [r3, r2]
   31274:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31276:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   31278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3127a:	2bff      	cmp	r3, #255	; 0xff
   3127c:	dd18      	ble.n	312b0 <_http_client_request+0x524>
				ptr = buffer;
   3127e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31280:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   31282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31284:	2b00      	cmp	r3, #0
   31286:	da00      	bge.n	3128a <_http_client_request+0x4fe>
   31288:	33ff      	adds	r3, #255	; 0xff
   3128a:	121b      	asrs	r3, r3, #8
   3128c:	001a      	movs	r2, r3
   3128e:	4b80      	ldr	r3, [pc, #512]	; (31490 <_http_client_request+0x704>)
   31290:	4013      	ands	r3, r2
   31292:	d504      	bpl.n	3129e <_http_client_request+0x512>
   31294:	3b01      	subs	r3, #1
   31296:	2210      	movs	r2, #16
   31298:	4252      	negs	r2, r2
   3129a:	4313      	orrs	r3, r2
   3129c:	3301      	adds	r3, #1
   3129e:	001a      	movs	r2, r3
   312a0:	2318      	movs	r3, #24
   312a2:	2118      	movs	r1, #24
   312a4:	468c      	mov	ip, r1
   312a6:	44bc      	add	ip, r7
   312a8:	4463      	add	r3, ip
   312aa:	5c9a      	ldrb	r2, [r3, r2]
   312ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   312ae:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   312b0:	69fb      	ldr	r3, [r7, #28]
   312b2:	2000      	movs	r0, #0
   312b4:	5618      	ldrsb	r0, [r3, r0]
   312b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   312b8:	3303      	adds	r3, #3
   312ba:	001a      	movs	r2, r3
   312bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   312be:	1ad3      	subs	r3, r2, r3
   312c0:	b29a      	uxth	r2, r3
   312c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   312c4:	b29b      	uxth	r3, r3
   312c6:	18d3      	adds	r3, r2, r3
   312c8:	b29b      	uxth	r3, r3
   312ca:	3304      	adds	r3, #4
   312cc:	b29a      	uxth	r2, r3
   312ce:	6f39      	ldr	r1, [r7, #112]	; 0x70
   312d0:	2300      	movs	r3, #0
   312d2:	4c70      	ldr	r4, [pc, #448]	; (31494 <_http_client_request+0x708>)
   312d4:	47a0      	blx	r4
   312d6:	0003      	movs	r3, r0
   312d8:	663b      	str	r3, [r7, #96]	; 0x60
   312da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   312dc:	2b00      	cmp	r3, #0
   312de:	da07      	bge.n	312f0 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   312e0:	2305      	movs	r3, #5
   312e2:	425a      	negs	r2, r3
   312e4:	69fb      	ldr	r3, [r7, #28]
   312e6:	0011      	movs	r1, r2
   312e8:	0018      	movs	r0, r3
   312ea:	4b6b      	ldr	r3, [pc, #428]	; (31498 <_http_client_request+0x70c>)
   312ec:	4798      	blx	r3
				return;
   312ee:	e0e1      	b.n	314b4 <_http_client_request+0x728>
			module->req.sent_length += size;
   312f0:	69fb      	ldr	r3, [r7, #28]
   312f2:	22d0      	movs	r2, #208	; 0xd0
   312f4:	589a      	ldr	r2, [r3, r2]
   312f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   312f8:	18d2      	adds	r2, r2, r3
   312fa:	69fb      	ldr	r3, [r7, #28]
   312fc:	21d0      	movs	r1, #208	; 0xd0
   312fe:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   31300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31302:	2b00      	cmp	r3, #0
   31304:	d000      	beq.n	31308 <_http_client_request+0x57c>
   31306:	e0c9      	b.n	3149c <_http_client_request+0x710>
				if (module->req.entity.close) {
   31308:	69fb      	ldr	r3, [r7, #28]
   3130a:	22c0      	movs	r2, #192	; 0xc0
   3130c:	589b      	ldr	r3, [r3, r2]
   3130e:	2b00      	cmp	r3, #0
   31310:	d007      	beq.n	31322 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   31312:	69fb      	ldr	r3, [r7, #28]
   31314:	22c0      	movs	r2, #192	; 0xc0
   31316:	589b      	ldr	r3, [r3, r2]
   31318:	69fa      	ldr	r2, [r7, #28]
   3131a:	21c4      	movs	r1, #196	; 0xc4
   3131c:	5852      	ldr	r2, [r2, r1]
   3131e:	0010      	movs	r0, r2
   31320:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31322:	69fb      	ldr	r3, [r7, #28]
   31324:	2202      	movs	r2, #2
   31326:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   31328:	69fb      	ldr	r3, [r7, #28]
   3132a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3132c:	2b00      	cmp	r3, #0
   3132e:	d100      	bne.n	31332 <_http_client_request+0x5a6>
   31330:	e0b5      	b.n	3149e <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31332:	69fb      	ldr	r3, [r7, #28]
   31334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31336:	220c      	movs	r2, #12
   31338:	2118      	movs	r1, #24
   3133a:	468c      	mov	ip, r1
   3133c:	44bc      	add	ip, r7
   3133e:	4462      	add	r2, ip
   31340:	69f8      	ldr	r0, [r7, #28]
   31342:	2101      	movs	r1, #1
   31344:	4798      	blx	r3
				break;
   31346:	e0aa      	b.n	3149e <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   31348:	69fb      	ldr	r3, [r7, #28]
   3134a:	22cc      	movs	r2, #204	; 0xcc
   3134c:	589b      	ldr	r3, [r3, r2]
   3134e:	2b00      	cmp	r3, #0
   31350:	dc00      	bgt.n	31354 <_http_client_request+0x5c8>
   31352:	e07c      	b.n	3144e <_http_client_request+0x6c2>
   31354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31356:	68db      	ldr	r3, [r3, #12]
   31358:	2b00      	cmp	r3, #0
   3135a:	d100      	bne.n	3135e <_http_client_request+0x5d2>
   3135c:	e077      	b.n	3144e <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   3135e:	69fb      	ldr	r3, [r7, #28]
   31360:	22d0      	movs	r2, #208	; 0xd0
   31362:	589a      	ldr	r2, [r3, r2]
   31364:	69fb      	ldr	r3, [r7, #28]
   31366:	21cc      	movs	r1, #204	; 0xcc
   31368:	585b      	ldr	r3, [r3, r1]
   3136a:	429a      	cmp	r2, r3
   3136c:	db1f      	blt.n	313ae <_http_client_request+0x622>
				if (module->req.entity.close) {
   3136e:	69fb      	ldr	r3, [r7, #28]
   31370:	22c0      	movs	r2, #192	; 0xc0
   31372:	589b      	ldr	r3, [r3, r2]
   31374:	2b00      	cmp	r3, #0
   31376:	d007      	beq.n	31388 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   31378:	69fb      	ldr	r3, [r7, #28]
   3137a:	22c0      	movs	r2, #192	; 0xc0
   3137c:	589b      	ldr	r3, [r3, r2]
   3137e:	69fa      	ldr	r2, [r7, #28]
   31380:	21c4      	movs	r1, #196	; 0xc4
   31382:	5852      	ldr	r2, [r2, r1]
   31384:	0010      	movs	r0, r2
   31386:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   31388:	69fb      	ldr	r3, [r7, #28]
   3138a:	2202      	movs	r2, #2
   3138c:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   3138e:	69fb      	ldr	r3, [r7, #28]
   31390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31392:	2b00      	cmp	r3, #0
   31394:	d100      	bne.n	31398 <_http_client_request+0x60c>
   31396:	e084      	b.n	314a2 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   31398:	69fb      	ldr	r3, [r7, #28]
   3139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3139c:	220c      	movs	r2, #12
   3139e:	2118      	movs	r1, #24
   313a0:	468c      	mov	ip, r1
   313a2:	44bc      	add	ip, r7
   313a4:	4462      	add	r2, ip
   313a6:	69f8      	ldr	r0, [r7, #28]
   313a8:	2101      	movs	r1, #1
   313aa:	4798      	blx	r3
				break;
   313ac:	e079      	b.n	314a2 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   313ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   313b0:	68dc      	ldr	r4, [r3, #12]
   313b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   313b4:	6958      	ldr	r0, [r3, #20]
   313b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   313b8:	69fb      	ldr	r3, [r7, #28]
   313ba:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   313bc:	69fb      	ldr	r3, [r7, #28]
   313be:	22d0      	movs	r2, #208	; 0xd0
   313c0:	589b      	ldr	r3, [r3, r2]
   313c2:	002a      	movs	r2, r5
   313c4:	47a0      	blx	r4
   313c6:	0003      	movs	r3, r0
   313c8:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   313ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   313cc:	2b00      	cmp	r3, #0
   313ce:	da0d      	bge.n	313ec <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   313d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   313d2:	2b00      	cmp	r3, #0
   313d4:	d102      	bne.n	313dc <_http_client_request+0x650>
   313d6:	234d      	movs	r3, #77	; 0x4d
   313d8:	425b      	negs	r3, r3
   313da:	e001      	b.n	313e0 <_http_client_request+0x654>
   313dc:	2305      	movs	r3, #5
   313de:	425b      	negs	r3, r3
   313e0:	69fa      	ldr	r2, [r7, #28]
   313e2:	0019      	movs	r1, r3
   313e4:	0010      	movs	r0, r2
   313e6:	4b2c      	ldr	r3, [pc, #176]	; (31498 <_http_client_request+0x70c>)
   313e8:	4798      	blx	r3
			if (size < 0) {
   313ea:	e057      	b.n	3149c <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   313ec:	69fb      	ldr	r3, [r7, #28]
   313ee:	22cc      	movs	r2, #204	; 0xcc
   313f0:	589a      	ldr	r2, [r3, r2]
   313f2:	69fb      	ldr	r3, [r7, #28]
   313f4:	21d0      	movs	r1, #208	; 0xd0
   313f6:	585b      	ldr	r3, [r3, r1]
   313f8:	1ad2      	subs	r2, r2, r3
   313fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   313fc:	429a      	cmp	r2, r3
   313fe:	da07      	bge.n	31410 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   31400:	69fb      	ldr	r3, [r7, #28]
   31402:	22cc      	movs	r2, #204	; 0xcc
   31404:	589a      	ldr	r2, [r3, r2]
   31406:	69fb      	ldr	r3, [r7, #28]
   31408:	21d0      	movs	r1, #208	; 0xd0
   3140a:	585b      	ldr	r3, [r3, r1]
   3140c:	1ad3      	subs	r3, r2, r3
   3140e:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   31410:	69fb      	ldr	r3, [r7, #28]
   31412:	2000      	movs	r0, #0
   31414:	5618      	ldrsb	r0, [r3, r0]
   31416:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3141a:	b29a      	uxth	r2, r3
   3141c:	2300      	movs	r3, #0
   3141e:	4c1d      	ldr	r4, [pc, #116]	; (31494 <_http_client_request+0x708>)
   31420:	47a0      	blx	r4
   31422:	0003      	movs	r3, r0
   31424:	663b      	str	r3, [r7, #96]	; 0x60
   31426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31428:	2b00      	cmp	r3, #0
   3142a:	da07      	bge.n	3143c <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   3142c:	2305      	movs	r3, #5
   3142e:	425a      	negs	r2, r3
   31430:	69fb      	ldr	r3, [r7, #28]
   31432:	0011      	movs	r1, r2
   31434:	0018      	movs	r0, r3
   31436:	4b18      	ldr	r3, [pc, #96]	; (31498 <_http_client_request+0x70c>)
   31438:	4798      	blx	r3
					return;
   3143a:	e03b      	b.n	314b4 <_http_client_request+0x728>
				module->req.sent_length += size;
   3143c:	69fb      	ldr	r3, [r7, #28]
   3143e:	22d0      	movs	r2, #208	; 0xd0
   31440:	589a      	ldr	r2, [r3, r2]
   31442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31444:	18d2      	adds	r2, r2, r3
   31446:	69fb      	ldr	r3, [r7, #28]
   31448:	21d0      	movs	r1, #208	; 0xd0
   3144a:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   3144c:	e026      	b.n	3149c <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   3144e:	69fb      	ldr	r3, [r7, #28]
   31450:	2202      	movs	r2, #2
   31452:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   31454:	69fb      	ldr	r3, [r7, #28]
   31456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31458:	2b00      	cmp	r3, #0
   3145a:	d024      	beq.n	314a6 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3145c:	69fb      	ldr	r3, [r7, #28]
   3145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31460:	220c      	movs	r2, #12
   31462:	2118      	movs	r1, #24
   31464:	468c      	mov	ip, r1
   31466:	44bc      	add	ip, r7
   31468:	4462      	add	r2, ip
   3146a:	69f8      	ldr	r0, [r7, #28]
   3146c:	2101      	movs	r1, #1
   3146e:	4798      	blx	r3
			break;
   31470:	e019      	b.n	314a6 <_http_client_request+0x71a>
   31472:	46c0      	nop			; (mov r8, r8)
   31474:	0003955c 	.word	0x0003955c
   31478:	00034649 	.word	0x00034649
   3147c:	00039560 	.word	0x00039560
   31480:	00031ced 	.word	0x00031ced
   31484:	00034727 	.word	0x00034727
   31488:	000394e8 	.word	0x000394e8
   3148c:	00031d29 	.word	0x00031d29
   31490:	8000000f 	.word	0x8000000f
   31494:	000252c9 	.word	0x000252c9
   31498:	00030c39 	.word	0x00030c39
		break;
   3149c:	e004      	b.n	314a8 <_http_client_request+0x71c>
				break;
   3149e:	46c0      	nop			; (mov r8, r8)
   314a0:	e002      	b.n	314a8 <_http_client_request+0x71c>
				break;
   314a2:	46c0      	nop			; (mov r8, r8)
   314a4:	e000      	b.n	314a8 <_http_client_request+0x71c>
			break;
   314a6:	46c0      	nop			; (mov r8, r8)
   314a8:	69bb      	ldr	r3, [r7, #24]
   314aa:	469d      	mov	sp, r3
   314ac:	e004      	b.n	314b8 <_http_client_request+0x72c>
		return;
   314ae:	46c0      	nop			; (mov r8, r8)
   314b0:	e000      	b.n	314b4 <_http_client_request+0x728>
		return;
   314b2:	46c0      	nop			; (mov r8, r8)
   314b4:	69bb      	ldr	r3, [r7, #24]
   314b6:	469d      	mov	sp, r3
	}
}
   314b8:	46bd      	mov	sp, r7
   314ba:	b01e      	add	sp, #120	; 0x78
   314bc:	bc04      	pop	{r2}
   314be:	4690      	mov	r8, r2
   314c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   314c2:	46c0      	nop			; (mov r8, r8)

000314c4 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   314c4:	b590      	push	{r4, r7, lr}
   314c6:	b083      	sub	sp, #12
   314c8:	af00      	add	r7, sp, #0
   314ca:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   314cc:	687b      	ldr	r3, [r7, #4]
   314ce:	2b00      	cmp	r3, #0
   314d0:	d021      	beq.n	31516 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   314d2:	687b      	ldr	r3, [r7, #4]
   314d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   314d6:	687b      	ldr	r3, [r7, #4]
   314d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   314da:	429a      	cmp	r2, r3
   314dc:	d307      	bcc.n	314ee <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   314de:	238b      	movs	r3, #139	; 0x8b
   314e0:	425a      	negs	r2, r3
   314e2:	687b      	ldr	r3, [r7, #4]
   314e4:	0011      	movs	r1, r2
   314e6:	0018      	movs	r0, r3
   314e8:	4b0d      	ldr	r3, [pc, #52]	; (31520 <_http_client_recv_packet+0x5c>)
   314ea:	4798      	blx	r3
		return;
   314ec:	e014      	b.n	31518 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   314ee:	687b      	ldr	r3, [r7, #4]
   314f0:	2000      	movs	r0, #0
   314f2:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   314f4:	687b      	ldr	r3, [r7, #4]
   314f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   314f8:	687b      	ldr	r3, [r7, #4]
   314fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   314fc:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   314fe:	687b      	ldr	r3, [r7, #4]
   31500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   31502:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   31504:	687b      	ldr	r3, [r7, #4]
   31506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   31508:	b29b      	uxth	r3, r3
   3150a:	1ad3      	subs	r3, r2, r3
   3150c:	b29a      	uxth	r2, r3
   3150e:	2300      	movs	r3, #0
   31510:	4c04      	ldr	r4, [pc, #16]	; (31524 <_http_client_recv_packet+0x60>)
   31512:	47a0      	blx	r4
   31514:	e000      	b.n	31518 <_http_client_recv_packet+0x54>
		return;
   31516:	46c0      	nop			; (mov r8, r8)
}
   31518:	46bd      	mov	sp, r7
   3151a:	b003      	add	sp, #12
   3151c:	bd90      	pop	{r4, r7, pc}
   3151e:	46c0      	nop			; (mov r8, r8)
   31520:	00030c39 	.word	0x00030c39
   31524:	0002542d 	.word	0x0002542d

00031528 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   31528:	b580      	push	{r7, lr}
   3152a:	b082      	sub	sp, #8
   3152c:	af00      	add	r7, sp, #0
   3152e:	6078      	str	r0, [r7, #4]
   31530:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   31532:	687b      	ldr	r3, [r7, #4]
   31534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31536:	683b      	ldr	r3, [r7, #0]
   31538:	18d2      	adds	r2, r2, r3
   3153a:	687b      	ldr	r3, [r7, #4]
   3153c:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   3153e:	687b      	ldr	r3, [r7, #4]
   31540:	2258      	movs	r2, #88	; 0x58
   31542:	5a9b      	ldrh	r3, [r3, r2]
   31544:	2b00      	cmp	r3, #0
   31546:	d007      	beq.n	31558 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   31548:	687b      	ldr	r3, [r7, #4]
   3154a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3154c:	687b      	ldr	r3, [r7, #4]
   3154e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31550:	0019      	movs	r1, r3
   31552:	0010      	movs	r0, r2
   31554:	4b06      	ldr	r3, [pc, #24]	; (31570 <_http_client_recved_packet+0x48>)
   31556:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   31558:	46c0      	nop			; (mov r8, r8)
   3155a:	687b      	ldr	r3, [r7, #4]
   3155c:	0018      	movs	r0, r3
   3155e:	4b05      	ldr	r3, [pc, #20]	; (31574 <_http_client_recved_packet+0x4c>)
   31560:	4798      	blx	r3
   31562:	1e03      	subs	r3, r0, #0
   31564:	d1f9      	bne.n	3155a <_http_client_recved_packet+0x32>
}
   31566:	46c0      	nop			; (mov r8, r8)
   31568:	46bd      	mov	sp, r7
   3156a:	b002      	add	sp, #8
   3156c:	bd80      	pop	{r7, pc}
   3156e:	46c0      	nop			; (mov r8, r8)
   31570:	00031fe5 	.word	0x00031fe5
   31574:	00031579 	.word	0x00031579

00031578 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   31578:	b580      	push	{r7, lr}
   3157a:	b082      	sub	sp, #8
   3157c:	af00      	add	r7, sp, #0
   3157e:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   31580:	687b      	ldr	r3, [r7, #4]
   31582:	22d8      	movs	r2, #216	; 0xd8
   31584:	589b      	ldr	r3, [r3, r2]
   31586:	2b00      	cmp	r3, #0
   31588:	d002      	beq.n	31590 <_http_client_handle_response+0x18>
   3158a:	2b01      	cmp	r3, #1
   3158c:	d006      	beq.n	3159c <_http_client_handle_response+0x24>
   3158e:	e00b      	b.n	315a8 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   31590:	687b      	ldr	r3, [r7, #4]
   31592:	0018      	movs	r0, r3
   31594:	4b07      	ldr	r3, [pc, #28]	; (315b4 <_http_client_handle_response+0x3c>)
   31596:	4798      	blx	r3
   31598:	0003      	movs	r3, r0
   3159a:	e006      	b.n	315aa <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   3159c:	687b      	ldr	r3, [r7, #4]
   3159e:	0018      	movs	r0, r3
   315a0:	4b05      	ldr	r3, [pc, #20]	; (315b8 <_http_client_handle_response+0x40>)
   315a2:	4798      	blx	r3
   315a4:	0003      	movs	r3, r0
   315a6:	e000      	b.n	315aa <_http_client_handle_response+0x32>
	}
	return 0;
   315a8:	2300      	movs	r3, #0
}
   315aa:	0018      	movs	r0, r3
   315ac:	46bd      	mov	sp, r7
   315ae:	b002      	add	sp, #8
   315b0:	bd80      	pop	{r7, pc}
   315b2:	46c0      	nop			; (mov r8, r8)
   315b4:	000315bd 	.word	0x000315bd
   315b8:	00031a75 	.word	0x00031a75

000315bc <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   315bc:	b590      	push	{r4, r7, lr}
   315be:	b08b      	sub	sp, #44	; 0x2c
   315c0:	af00      	add	r7, sp, #0
   315c2:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   315c4:	687b      	ldr	r3, [r7, #4]
   315c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   315c8:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   315ca:	4b9a      	ldr	r3, [pc, #616]	; (31834 <_http_client_handle_header+0x278>)
   315cc:	681a      	ldr	r2, [r3, #0]
   315ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   315d0:	0011      	movs	r1, r2
   315d2:	0018      	movs	r0, r3
   315d4:	4b98      	ldr	r3, [pc, #608]	; (31838 <_http_client_handle_header+0x27c>)
   315d6:	4798      	blx	r3
   315d8:	0003      	movs	r3, r0
   315da:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   315dc:	69bb      	ldr	r3, [r7, #24]
   315de:	2b00      	cmp	r3, #0
   315e0:	d007      	beq.n	315f2 <_http_client_handle_header+0x36>
   315e2:	687b      	ldr	r3, [r7, #4]
   315e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   315e6:	687b      	ldr	r3, [r7, #4]
   315e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   315ea:	18d2      	adds	r2, r2, r3
   315ec:	69bb      	ldr	r3, [r7, #24]
   315ee:	429a      	cmp	r2, r3
   315f0:	d807      	bhi.n	31602 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   315f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   315f4:	687b      	ldr	r3, [r7, #4]
   315f6:	0011      	movs	r1, r2
   315f8:	0018      	movs	r0, r3
   315fa:	4b90      	ldr	r3, [pc, #576]	; (3183c <_http_client_handle_header+0x280>)
   315fc:	4798      	blx	r3
			return 0;
   315fe:	2300      	movs	r3, #0
   31600:	e114      	b.n	3182c <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   31602:	4b8c      	ldr	r3, [pc, #560]	; (31834 <_http_client_handle_header+0x278>)
   31604:	681c      	ldr	r4, [r3, #0]
   31606:	4b8b      	ldr	r3, [pc, #556]	; (31834 <_http_client_handle_header+0x278>)
   31608:	681b      	ldr	r3, [r3, #0]
   3160a:	0018      	movs	r0, r3
   3160c:	4b8c      	ldr	r3, [pc, #560]	; (31840 <_http_client_handle_header+0x284>)
   3160e:	4798      	blx	r3
   31610:	0002      	movs	r2, r0
   31612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31614:	0021      	movs	r1, r4
   31616:	0018      	movs	r0, r3
   31618:	4b8a      	ldr	r3, [pc, #552]	; (31844 <_http_client_handle_header+0x288>)
   3161a:	4798      	blx	r3
   3161c:	1e03      	subs	r3, r0, #0
   3161e:	d15d      	bne.n	316dc <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   31620:	4b84      	ldr	r3, [pc, #528]	; (31834 <_http_client_handle_header+0x278>)
   31622:	681b      	ldr	r3, [r3, #0]
   31624:	0018      	movs	r0, r3
   31626:	4b86      	ldr	r3, [pc, #536]	; (31840 <_http_client_handle_header+0x284>)
   31628:	4798      	blx	r3
   3162a:	0002      	movs	r2, r0
   3162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3162e:	189a      	adds	r2, r3, r2
   31630:	687b      	ldr	r3, [r7, #4]
   31632:	0011      	movs	r1, r2
   31634:	0018      	movs	r0, r3
   31636:	4b81      	ldr	r3, [pc, #516]	; (3183c <_http_client_handle_header+0x280>)
   31638:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   3163a:	687b      	ldr	r3, [r7, #4]
   3163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3163e:	2b00      	cmp	r3, #0
   31640:	d046      	beq.n	316d0 <_http_client_handle_header+0x114>
   31642:	687b      	ldr	r3, [r7, #4]
   31644:	22e4      	movs	r2, #228	; 0xe4
   31646:	5a9b      	ldrh	r3, [r3, r2]
   31648:	2b00      	cmp	r3, #0
   3164a:	d041      	beq.n	316d0 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   3164c:	687b      	ldr	r3, [r7, #4]
   3164e:	22dc      	movs	r2, #220	; 0xdc
   31650:	589b      	ldr	r3, [r3, r2]
   31652:	2b00      	cmp	r3, #0
   31654:	da19      	bge.n	3168a <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   31656:	687b      	ldr	r3, [r7, #4]
   31658:	22e4      	movs	r2, #228	; 0xe4
   3165a:	5a9a      	ldrh	r2, [r3, r2]
   3165c:	230c      	movs	r3, #12
   3165e:	18fb      	adds	r3, r7, r3
   31660:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   31662:	230c      	movs	r3, #12
   31664:	18fb      	adds	r3, r7, r3
   31666:	2201      	movs	r2, #1
   31668:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   3166a:	687b      	ldr	r3, [r7, #4]
   3166c:	22e0      	movs	r2, #224	; 0xe0
   3166e:	2100      	movs	r1, #0
   31670:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   31672:	230c      	movs	r3, #12
   31674:	18fb      	adds	r3, r7, r3
   31676:	2200      	movs	r2, #0
   31678:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3167a:	687b      	ldr	r3, [r7, #4]
   3167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3167e:	220c      	movs	r2, #12
   31680:	18ba      	adds	r2, r7, r2
   31682:	6878      	ldr	r0, [r7, #4]
   31684:	2102      	movs	r1, #2
   31686:	4798      	blx	r3
   31688:	e022      	b.n	316d0 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   3168a:	687b      	ldr	r3, [r7, #4]
   3168c:	22dc      	movs	r2, #220	; 0xdc
   3168e:	589a      	ldr	r2, [r3, r2]
   31690:	687b      	ldr	r3, [r7, #4]
   31692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31694:	429a      	cmp	r2, r3
   31696:	dd1b      	ble.n	316d0 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   31698:	687b      	ldr	r3, [r7, #4]
   3169a:	22e4      	movs	r2, #228	; 0xe4
   3169c:	5a9a      	ldrh	r2, [r3, r2]
   3169e:	230c      	movs	r3, #12
   316a0:	18fb      	adds	r3, r7, r3
   316a2:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   316a4:	687b      	ldr	r3, [r7, #4]
   316a6:	22dc      	movs	r2, #220	; 0xdc
   316a8:	589b      	ldr	r3, [r3, r2]
   316aa:	001a      	movs	r2, r3
   316ac:	230c      	movs	r3, #12
   316ae:	18fb      	adds	r3, r7, r3
   316b0:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   316b2:	230c      	movs	r3, #12
   316b4:	18fb      	adds	r3, r7, r3
   316b6:	2200      	movs	r2, #0
   316b8:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   316ba:	687b      	ldr	r3, [r7, #4]
   316bc:	22e0      	movs	r2, #224	; 0xe0
   316be:	2100      	movs	r1, #0
   316c0:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   316c2:	687b      	ldr	r3, [r7, #4]
   316c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   316c6:	220c      	movs	r2, #12
   316c8:	18ba      	adds	r2, r7, r2
   316ca:	6878      	ldr	r0, [r7, #4]
   316cc:	2102      	movs	r1, #2
   316ce:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   316d0:	687b      	ldr	r3, [r7, #4]
   316d2:	22d8      	movs	r2, #216	; 0xd8
   316d4:	2101      	movs	r1, #1
   316d6:	5099      	str	r1, [r3, r2]
			return 1;
   316d8:	2301      	movs	r3, #1
   316da:	e0a7      	b.n	3182c <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   316dc:	495a      	ldr	r1, [pc, #360]	; (31848 <_http_client_handle_header+0x28c>)
   316de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   316e0:	2210      	movs	r2, #16
   316e2:	0018      	movs	r0, r3
   316e4:	4b57      	ldr	r3, [pc, #348]	; (31844 <_http_client_handle_header+0x288>)
   316e6:	4798      	blx	r3
   316e8:	1e03      	subs	r3, r0, #0
   316ea:	d109      	bne.n	31700 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   316ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   316ee:	3310      	adds	r3, #16
   316f0:	0018      	movs	r0, r3
   316f2:	4b56      	ldr	r3, [pc, #344]	; (3184c <_http_client_handle_header+0x290>)
   316f4:	4798      	blx	r3
   316f6:	0001      	movs	r1, r0
   316f8:	687b      	ldr	r3, [r7, #4]
   316fa:	22dc      	movs	r2, #220	; 0xdc
   316fc:	5099      	str	r1, [r3, r2]
   316fe:	e08b      	b.n	31818 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   31700:	4953      	ldr	r1, [pc, #332]	; (31850 <_http_client_handle_header+0x294>)
   31702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31704:	2213      	movs	r2, #19
   31706:	0018      	movs	r0, r3
   31708:	4b4e      	ldr	r3, [pc, #312]	; (31844 <_http_client_handle_header+0x288>)
   3170a:	4798      	blx	r3
   3170c:	1e03      	subs	r3, r0, #0
   3170e:	d127      	bne.n	31760 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   31710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31712:	3313      	adds	r3, #19
   31714:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31716:	e01e      	b.n	31756 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   31718:	6a3b      	ldr	r3, [r7, #32]
   3171a:	781b      	ldrb	r3, [r3, #0]
   3171c:	2b20      	cmp	r3, #32
   3171e:	d103      	bne.n	31728 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31720:	6a3b      	ldr	r3, [r7, #32]
   31722:	3301      	adds	r3, #1
   31724:	623b      	str	r3, [r7, #32]
   31726:	e016      	b.n	31756 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   31728:	6a3b      	ldr	r3, [r7, #32]
   3172a:	781b      	ldrb	r3, [r3, #0]
   3172c:	2b43      	cmp	r3, #67	; 0x43
   3172e:	d003      	beq.n	31738 <_http_client_handle_header+0x17c>
   31730:	6a3b      	ldr	r3, [r7, #32]
   31732:	781b      	ldrb	r3, [r3, #0]
   31734:	2b63      	cmp	r3, #99	; 0x63
   31736:	d105      	bne.n	31744 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   31738:	687b      	ldr	r3, [r7, #4]
   3173a:	21cc      	movs	r1, #204	; 0xcc
   3173c:	2201      	movs	r2, #1
   3173e:	4252      	negs	r2, r2
   31740:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   31742:	e069      	b.n	31818 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   31744:	2386      	movs	r3, #134	; 0x86
   31746:	425a      	negs	r2, r3
   31748:	687b      	ldr	r3, [r7, #4]
   3174a:	0011      	movs	r1, r2
   3174c:	0018      	movs	r0, r3
   3174e:	4b41      	ldr	r3, [pc, #260]	; (31854 <_http_client_handle_header+0x298>)
   31750:	4798      	blx	r3
					return 0;
   31752:	2300      	movs	r3, #0
   31754:	e06a      	b.n	3182c <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31756:	69ba      	ldr	r2, [r7, #24]
   31758:	6a3b      	ldr	r3, [r7, #32]
   3175a:	429a      	cmp	r2, r3
   3175c:	d8dc      	bhi.n	31718 <_http_client_handle_header+0x15c>
   3175e:	e05b      	b.n	31818 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   31760:	493d      	ldr	r1, [pc, #244]	; (31858 <_http_client_handle_header+0x29c>)
   31762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31764:	220c      	movs	r2, #12
   31766:	0018      	movs	r0, r3
   31768:	4b36      	ldr	r3, [pc, #216]	; (31844 <_http_client_handle_header+0x288>)
   3176a:	4798      	blx	r3
   3176c:	1e03      	subs	r3, r0, #0
   3176e:	d126      	bne.n	317be <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   31770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31772:	330c      	adds	r3, #12
   31774:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31776:	e01d      	b.n	317b4 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   31778:	69fb      	ldr	r3, [r7, #28]
   3177a:	781b      	ldrb	r3, [r3, #0]
   3177c:	2b20      	cmp	r3, #32
   3177e:	d103      	bne.n	31788 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   31780:	69fb      	ldr	r3, [r7, #28]
   31782:	3301      	adds	r3, #1
   31784:	61fb      	str	r3, [r7, #28]
   31786:	e015      	b.n	317b4 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   31788:	69fb      	ldr	r3, [r7, #28]
   3178a:	781b      	ldrb	r3, [r3, #0]
   3178c:	2b4b      	cmp	r3, #75	; 0x4b
   3178e:	d003      	beq.n	31798 <_http_client_handle_header+0x1dc>
   31790:	69fb      	ldr	r3, [r7, #28]
   31792:	781b      	ldrb	r3, [r3, #0]
   31794:	2b6b      	cmp	r3, #107	; 0x6b
   31796:	d106      	bne.n	317a6 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   31798:	687b      	ldr	r3, [r7, #4]
   3179a:	2241      	movs	r2, #65	; 0x41
   3179c:	5c99      	ldrb	r1, [r3, r2]
   3179e:	2002      	movs	r0, #2
   317a0:	4301      	orrs	r1, r0
   317a2:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   317a4:	e038      	b.n	31818 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   317a6:	687b      	ldr	r3, [r7, #4]
   317a8:	2241      	movs	r2, #65	; 0x41
   317aa:	5c99      	ldrb	r1, [r3, r2]
   317ac:	2002      	movs	r0, #2
   317ae:	4381      	bics	r1, r0
   317b0:	5499      	strb	r1, [r3, r2]
				break;
   317b2:	e031      	b.n	31818 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   317b4:	69ba      	ldr	r2, [r7, #24]
   317b6:	69fb      	ldr	r3, [r7, #28]
   317b8:	429a      	cmp	r2, r3
   317ba:	d8dd      	bhi.n	31778 <_http_client_handle_header+0x1bc>
   317bc:	e02c      	b.n	31818 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   317be:	4927      	ldr	r1, [pc, #156]	; (3185c <_http_client_handle_header+0x2a0>)
   317c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317c2:	2205      	movs	r2, #5
   317c4:	0018      	movs	r0, r3
   317c6:	4b1f      	ldr	r3, [pc, #124]	; (31844 <_http_client_handle_header+0x288>)
   317c8:	4798      	blx	r3
   317ca:	1e03      	subs	r3, r0, #0
   317cc:	d124      	bne.n	31818 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   317ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317d0:	3309      	adds	r3, #9
   317d2:	0018      	movs	r0, r3
   317d4:	4b1d      	ldr	r3, [pc, #116]	; (3184c <_http_client_handle_header+0x290>)
   317d6:	4798      	blx	r3
   317d8:	0003      	movs	r3, r0
   317da:	b299      	uxth	r1, r3
   317dc:	687b      	ldr	r3, [r7, #4]
   317de:	22e4      	movs	r2, #228	; 0xe4
   317e0:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   317e2:	687b      	ldr	r3, [r7, #4]
   317e4:	22dc      	movs	r2, #220	; 0xdc
   317e6:	2100      	movs	r1, #0
   317e8:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   317ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317ec:	3305      	adds	r3, #5
   317ee:	781b      	ldrb	r3, [r3, #0]
   317f0:	2b31      	cmp	r3, #49	; 0x31
   317f2:	d804      	bhi.n	317fe <_http_client_handle_header+0x242>
   317f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   317f6:	3307      	adds	r3, #7
   317f8:	781b      	ldrb	r3, [r3, #0]
   317fa:	2b30      	cmp	r3, #48	; 0x30
   317fc:	d906      	bls.n	3180c <_http_client_handle_header+0x250>
				module->permanent = 1;
   317fe:	687b      	ldr	r3, [r7, #4]
   31800:	2241      	movs	r2, #65	; 0x41
   31802:	5c99      	ldrb	r1, [r3, r2]
   31804:	2002      	movs	r0, #2
   31806:	4301      	orrs	r1, r0
   31808:	5499      	strb	r1, [r3, r2]
   3180a:	e005      	b.n	31818 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   3180c:	687b      	ldr	r3, [r7, #4]
   3180e:	2241      	movs	r2, #65	; 0x41
   31810:	5c99      	ldrb	r1, [r3, r2]
   31812:	2002      	movs	r0, #2
   31814:	4381      	bics	r1, r0
   31816:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   31818:	4b06      	ldr	r3, [pc, #24]	; (31834 <_http_client_handle_header+0x278>)
   3181a:	681b      	ldr	r3, [r3, #0]
   3181c:	0018      	movs	r0, r3
   3181e:	4b08      	ldr	r3, [pc, #32]	; (31840 <_http_client_handle_header+0x284>)
   31820:	4798      	blx	r3
   31822:	0002      	movs	r2, r0
   31824:	69bb      	ldr	r3, [r7, #24]
   31826:	189b      	adds	r3, r3, r2
   31828:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   3182a:	e6ce      	b.n	315ca <_http_client_handle_header+0xe>
	}
}
   3182c:	0018      	movs	r0, r3
   3182e:	46bd      	mov	sp, r7
   31830:	b00b      	add	sp, #44	; 0x2c
   31832:	bd90      	pop	{r4, r7, pc}
   31834:	200000d0 	.word	0x200000d0
   31838:	000347a5 	.word	0x000347a5
   3183c:	00031c21 	.word	0x00031c21
   31840:	00034727 	.word	0x00034727
   31844:	00034735 	.word	0x00034735
   31848:	00039560 	.word	0x00039560
   3184c:	000342d9 	.word	0x000342d9
   31850:	00039584 	.word	0x00039584
   31854:	00030c39 	.word	0x00030c39
   31858:	00039598 	.word	0x00039598
   3185c:	000395a8 	.word	0x000395a8

00031860 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   31860:	b580      	push	{r7, lr}
   31862:	b088      	sub	sp, #32
   31864:	af00      	add	r7, sp, #0
   31866:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   31868:	687b      	ldr	r3, [r7, #4]
   3186a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3186c:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   3186e:	2300      	movs	r3, #0
   31870:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   31872:	687b      	ldr	r3, [r7, #4]
   31874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31876:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   31878:	687b      	ldr	r3, [r7, #4]
   3187a:	22e0      	movs	r2, #224	; 0xe0
   3187c:	589b      	ldr	r3, [r3, r2]
   3187e:	2b00      	cmp	r3, #0
   31880:	db71      	blt.n	31966 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   31882:	687b      	ldr	r3, [r7, #4]
   31884:	22e0      	movs	r2, #224	; 0xe0
   31886:	589b      	ldr	r3, [r3, r2]
   31888:	2b00      	cmp	r3, #0
   3188a:	d134      	bne.n	318f6 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   3188c:	687b      	ldr	r3, [r7, #4]
   3188e:	22d8      	movs	r2, #216	; 0xd8
   31890:	2100      	movs	r1, #0
   31892:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31894:	687b      	ldr	r3, [r7, #4]
   31896:	22e4      	movs	r2, #228	; 0xe4
   31898:	2100      	movs	r1, #0
   3189a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   3189c:	2308      	movs	r3, #8
   3189e:	18fb      	adds	r3, r7, r3
   318a0:	2201      	movs	r2, #1
   318a2:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   318a4:	2308      	movs	r3, #8
   318a6:	18fb      	adds	r3, r7, r3
   318a8:	2200      	movs	r2, #0
   318aa:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   318ac:	2308      	movs	r3, #8
   318ae:	18fb      	adds	r3, r7, r3
   318b0:	2200      	movs	r2, #0
   318b2:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   318b4:	687b      	ldr	r3, [r7, #4]
   318b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318b8:	2b00      	cmp	r3, #0
   318ba:	d006      	beq.n	318ca <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   318bc:	687b      	ldr	r3, [r7, #4]
   318be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   318c0:	2208      	movs	r2, #8
   318c2:	18ba      	adds	r2, r7, r2
   318c4:	6878      	ldr	r0, [r7, #4]
   318c6:	2103      	movs	r1, #3
   318c8:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   318ca:	687b      	ldr	r3, [r7, #4]
   318cc:	2241      	movs	r2, #65	; 0x41
   318ce:	5c9b      	ldrb	r3, [r3, r2]
   318d0:	2202      	movs	r2, #2
   318d2:	4013      	ands	r3, r2
   318d4:	b2db      	uxtb	r3, r3
   318d6:	2b00      	cmp	r3, #0
   318d8:	d105      	bne.n	318e6 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   318da:	687b      	ldr	r3, [r7, #4]
   318dc:	2100      	movs	r1, #0
   318de:	0018      	movs	r0, r3
   318e0:	4b62      	ldr	r3, [pc, #392]	; (31a6c <_http_client_read_chuked_entity+0x20c>)
   318e2:	4798      	blx	r3
					return;
   318e4:	e0bf      	b.n	31a66 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   318e6:	697b      	ldr	r3, [r7, #20]
   318e8:	1c9a      	adds	r2, r3, #2
   318ea:	687b      	ldr	r3, [r7, #4]
   318ec:	0011      	movs	r1, r2
   318ee:	0018      	movs	r0, r3
   318f0:	4b5f      	ldr	r3, [pc, #380]	; (31a70 <_http_client_read_chuked_entity+0x210>)
   318f2:	4798      	blx	r3
   318f4:	e0b2      	b.n	31a5c <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   318f6:	687b      	ldr	r3, [r7, #4]
   318f8:	22e0      	movs	r2, #224	; 0xe0
   318fa:	589a      	ldr	r2, [r3, r2]
   318fc:	69fb      	ldr	r3, [r7, #28]
   318fe:	429a      	cmp	r2, r3
   31900:	dd00      	ble.n	31904 <_http_client_read_chuked_entity+0xa4>
   31902:	e0ab      	b.n	31a5c <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   31904:	687b      	ldr	r3, [r7, #4]
   31906:	22e0      	movs	r2, #224	; 0xe0
   31908:	589b      	ldr	r3, [r3, r2]
   3190a:	001a      	movs	r2, r3
   3190c:	2308      	movs	r3, #8
   3190e:	18fb      	adds	r3, r7, r3
   31910:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   31912:	2308      	movs	r3, #8
   31914:	18fb      	adds	r3, r7, r3
   31916:	697a      	ldr	r2, [r7, #20]
   31918:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   3191a:	2308      	movs	r3, #8
   3191c:	18fb      	adds	r3, r7, r3
   3191e:	2200      	movs	r2, #0
   31920:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   31922:	687b      	ldr	r3, [r7, #4]
   31924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31926:	2b00      	cmp	r3, #0
   31928:	d006      	beq.n	31938 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3192a:	687b      	ldr	r3, [r7, #4]
   3192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3192e:	2208      	movs	r2, #8
   31930:	18ba      	adds	r2, r7, r2
   31932:	6878      	ldr	r0, [r7, #4]
   31934:	2103      	movs	r1, #3
   31936:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   31938:	687b      	ldr	r3, [r7, #4]
   3193a:	22e0      	movs	r2, #224	; 0xe0
   3193c:	589b      	ldr	r3, [r3, r2]
   3193e:	3302      	adds	r3, #2
   31940:	697a      	ldr	r2, [r7, #20]
   31942:	18d2      	adds	r2, r2, r3
   31944:	687b      	ldr	r3, [r7, #4]
   31946:	0011      	movs	r1, r2
   31948:	0018      	movs	r0, r3
   3194a:	4b49      	ldr	r3, [pc, #292]	; (31a70 <_http_client_read_chuked_entity+0x210>)
   3194c:	4798      	blx	r3
				length = (int)module->recved_size;
   3194e:	687b      	ldr	r3, [r7, #4]
   31950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31952:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   31954:	687b      	ldr	r3, [r7, #4]
   31956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31958:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   3195a:	687b      	ldr	r3, [r7, #4]
   3195c:	21e0      	movs	r1, #224	; 0xe0
   3195e:	2201      	movs	r2, #1
   31960:	4252      	negs	r2, r2
   31962:	505a      	str	r2, [r3, r1]
   31964:	e07a      	b.n	31a5c <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   31966:	687b      	ldr	r3, [r7, #4]
   31968:	22e0      	movs	r2, #224	; 0xe0
   3196a:	2100      	movs	r1, #0
   3196c:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   3196e:	e05a      	b.n	31a26 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   31970:	697b      	ldr	r3, [r7, #20]
   31972:	781b      	ldrb	r3, [r3, #0]
   31974:	2b0a      	cmp	r3, #10
   31976:	d106      	bne.n	31986 <_http_client_read_chuked_entity+0x126>
					buffer++;
   31978:	697b      	ldr	r3, [r7, #20]
   3197a:	3301      	adds	r3, #1
   3197c:	617b      	str	r3, [r7, #20]
					length--;
   3197e:	69fb      	ldr	r3, [r7, #28]
   31980:	3b01      	subs	r3, #1
   31982:	61fb      	str	r3, [r7, #28]
					break;
   31984:	e052      	b.n	31a2c <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   31986:	69bb      	ldr	r3, [r7, #24]
   31988:	2b00      	cmp	r3, #0
   3198a:	d145      	bne.n	31a18 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   3198c:	697b      	ldr	r3, [r7, #20]
   3198e:	781b      	ldrb	r3, [r3, #0]
   31990:	2b2f      	cmp	r3, #47	; 0x2f
   31992:	d910      	bls.n	319b6 <_http_client_read_chuked_entity+0x156>
   31994:	697b      	ldr	r3, [r7, #20]
   31996:	781b      	ldrb	r3, [r3, #0]
   31998:	2b39      	cmp	r3, #57	; 0x39
   3199a:	d80c      	bhi.n	319b6 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   3199c:	687b      	ldr	r3, [r7, #4]
   3199e:	22e0      	movs	r2, #224	; 0xe0
   319a0:	589b      	ldr	r3, [r3, r2]
   319a2:	011b      	lsls	r3, r3, #4
   319a4:	697a      	ldr	r2, [r7, #20]
   319a6:	7812      	ldrb	r2, [r2, #0]
   319a8:	189b      	adds	r3, r3, r2
   319aa:	3b30      	subs	r3, #48	; 0x30
   319ac:	001a      	movs	r2, r3
   319ae:	687b      	ldr	r3, [r7, #4]
   319b0:	21e0      	movs	r1, #224	; 0xe0
   319b2:	505a      	str	r2, [r3, r1]
   319b4:	e031      	b.n	31a1a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   319b6:	697b      	ldr	r3, [r7, #20]
   319b8:	781b      	ldrb	r3, [r3, #0]
   319ba:	2b60      	cmp	r3, #96	; 0x60
   319bc:	d910      	bls.n	319e0 <_http_client_read_chuked_entity+0x180>
   319be:	697b      	ldr	r3, [r7, #20]
   319c0:	781b      	ldrb	r3, [r3, #0]
   319c2:	2b66      	cmp	r3, #102	; 0x66
   319c4:	d80c      	bhi.n	319e0 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   319c6:	687b      	ldr	r3, [r7, #4]
   319c8:	22e0      	movs	r2, #224	; 0xe0
   319ca:	589b      	ldr	r3, [r3, r2]
   319cc:	011b      	lsls	r3, r3, #4
   319ce:	697a      	ldr	r2, [r7, #20]
   319d0:	7812      	ldrb	r2, [r2, #0]
   319d2:	189b      	adds	r3, r3, r2
   319d4:	3b61      	subs	r3, #97	; 0x61
   319d6:	001a      	movs	r2, r3
   319d8:	687b      	ldr	r3, [r7, #4]
   319da:	21e0      	movs	r1, #224	; 0xe0
   319dc:	505a      	str	r2, [r3, r1]
   319de:	e01c      	b.n	31a1a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   319e0:	697b      	ldr	r3, [r7, #20]
   319e2:	781b      	ldrb	r3, [r3, #0]
   319e4:	2b40      	cmp	r3, #64	; 0x40
   319e6:	d910      	bls.n	31a0a <_http_client_read_chuked_entity+0x1aa>
   319e8:	697b      	ldr	r3, [r7, #20]
   319ea:	781b      	ldrb	r3, [r3, #0]
   319ec:	2b46      	cmp	r3, #70	; 0x46
   319ee:	d80c      	bhi.n	31a0a <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   319f0:	687b      	ldr	r3, [r7, #4]
   319f2:	22e0      	movs	r2, #224	; 0xe0
   319f4:	589b      	ldr	r3, [r3, r2]
   319f6:	011b      	lsls	r3, r3, #4
   319f8:	697a      	ldr	r2, [r7, #20]
   319fa:	7812      	ldrb	r2, [r2, #0]
   319fc:	189b      	adds	r3, r3, r2
   319fe:	3b41      	subs	r3, #65	; 0x41
   31a00:	001a      	movs	r2, r3
   31a02:	687b      	ldr	r3, [r7, #4]
   31a04:	21e0      	movs	r1, #224	; 0xe0
   31a06:	505a      	str	r2, [r3, r1]
   31a08:	e007      	b.n	31a1a <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   31a0a:	697b      	ldr	r3, [r7, #20]
   31a0c:	781b      	ldrb	r3, [r3, #0]
   31a0e:	2b3b      	cmp	r3, #59	; 0x3b
   31a10:	d103      	bne.n	31a1a <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   31a12:	2301      	movs	r3, #1
   31a14:	61bb      	str	r3, [r7, #24]
   31a16:	e000      	b.n	31a1a <_http_client_read_chuked_entity+0x1ba>
					continue;
   31a18:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   31a1a:	697b      	ldr	r3, [r7, #20]
   31a1c:	3301      	adds	r3, #1
   31a1e:	617b      	str	r3, [r7, #20]
   31a20:	69fb      	ldr	r3, [r7, #28]
   31a22:	3b01      	subs	r3, #1
   31a24:	61fb      	str	r3, [r7, #28]
   31a26:	69fb      	ldr	r3, [r7, #28]
   31a28:	2b00      	cmp	r3, #0
   31a2a:	dca1      	bgt.n	31970 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   31a2c:	687b      	ldr	r3, [r7, #4]
   31a2e:	22e0      	movs	r2, #224	; 0xe0
   31a30:	589a      	ldr	r2, [r3, r2]
   31a32:	687b      	ldr	r3, [r7, #4]
   31a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31a36:	429a      	cmp	r2, r3
   31a38:	dd07      	ble.n	31a4a <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   31a3a:	238b      	movs	r3, #139	; 0x8b
   31a3c:	425a      	negs	r2, r3
   31a3e:	687b      	ldr	r3, [r7, #4]
   31a40:	0011      	movs	r1, r2
   31a42:	0018      	movs	r0, r3
   31a44:	4b09      	ldr	r3, [pc, #36]	; (31a6c <_http_client_read_chuked_entity+0x20c>)
   31a46:	4798      	blx	r3
				return;
   31a48:	e00d      	b.n	31a66 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   31a4a:	69fb      	ldr	r3, [r7, #28]
   31a4c:	2b00      	cmp	r3, #0
   31a4e:	d105      	bne.n	31a5c <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   31a50:	687b      	ldr	r3, [r7, #4]
   31a52:	21e0      	movs	r1, #224	; 0xe0
   31a54:	2201      	movs	r2, #1
   31a56:	4252      	negs	r2, r2
   31a58:	505a      	str	r2, [r3, r1]
				return;
   31a5a:	e004      	b.n	31a66 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   31a5c:	687b      	ldr	r3, [r7, #4]
   31a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31a60:	2b00      	cmp	r3, #0
   31a62:	d000      	beq.n	31a66 <_http_client_read_chuked_entity+0x206>
   31a64:	e708      	b.n	31878 <_http_client_read_chuked_entity+0x18>
}
   31a66:	46bd      	mov	sp, r7
   31a68:	b008      	add	sp, #32
   31a6a:	bd80      	pop	{r7, pc}
   31a6c:	00030c39 	.word	0x00030c39
   31a70:	00031c21 	.word	0x00031c21

00031a74 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   31a74:	b580      	push	{r7, lr}
   31a76:	b086      	sub	sp, #24
   31a78:	af00      	add	r7, sp, #0
   31a7a:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   31a7c:	687b      	ldr	r3, [r7, #4]
   31a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31a80:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   31a82:	687b      	ldr	r3, [r7, #4]
   31a84:	22dc      	movs	r2, #220	; 0xdc
   31a86:	589b      	ldr	r3, [r3, r2]
   31a88:	2b00      	cmp	r3, #0
   31a8a:	db58      	blt.n	31b3e <_http_client_handle_entity+0xca>
   31a8c:	687b      	ldr	r3, [r7, #4]
   31a8e:	22dc      	movs	r2, #220	; 0xdc
   31a90:	589a      	ldr	r2, [r3, r2]
   31a92:	687b      	ldr	r3, [r7, #4]
   31a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31a96:	429a      	cmp	r2, r3
   31a98:	dc51      	bgt.n	31b3e <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   31a9a:	687b      	ldr	r3, [r7, #4]
   31a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31a9e:	0019      	movs	r1, r3
   31aa0:	687b      	ldr	r3, [r7, #4]
   31aa2:	22dc      	movs	r2, #220	; 0xdc
   31aa4:	589b      	ldr	r3, [r3, r2]
   31aa6:	4299      	cmp	r1, r3
   31aa8:	da00      	bge.n	31aac <_http_client_handle_entity+0x38>
   31aaa:	e0a9      	b.n	31c00 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   31aac:	687b      	ldr	r3, [r7, #4]
   31aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ab0:	2b00      	cmp	r3, #0
   31ab2:	d020      	beq.n	31af6 <_http_client_handle_entity+0x82>
   31ab4:	687b      	ldr	r3, [r7, #4]
   31ab6:	22e4      	movs	r2, #228	; 0xe4
   31ab8:	5a9b      	ldrh	r3, [r3, r2]
   31aba:	2b00      	cmp	r3, #0
   31abc:	d01b      	beq.n	31af6 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   31abe:	687b      	ldr	r3, [r7, #4]
   31ac0:	22e4      	movs	r2, #228	; 0xe4
   31ac2:	5a9a      	ldrh	r2, [r3, r2]
   31ac4:	2308      	movs	r3, #8
   31ac6:	18fb      	adds	r3, r7, r3
   31ac8:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   31aca:	2308      	movs	r3, #8
   31acc:	18fb      	adds	r3, r7, r3
   31ace:	2200      	movs	r2, #0
   31ad0:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   31ad2:	687b      	ldr	r3, [r7, #4]
   31ad4:	22dc      	movs	r2, #220	; 0xdc
   31ad6:	589b      	ldr	r3, [r3, r2]
   31ad8:	001a      	movs	r2, r3
   31ada:	2308      	movs	r3, #8
   31adc:	18fb      	adds	r3, r7, r3
   31ade:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   31ae0:	2308      	movs	r3, #8
   31ae2:	18fb      	adds	r3, r7, r3
   31ae4:	697a      	ldr	r2, [r7, #20]
   31ae6:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   31ae8:	687b      	ldr	r3, [r7, #4]
   31aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31aec:	2208      	movs	r2, #8
   31aee:	18ba      	adds	r2, r7, r2
   31af0:	6878      	ldr	r0, [r7, #4]
   31af2:	2102      	movs	r1, #2
   31af4:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   31af6:	687b      	ldr	r3, [r7, #4]
   31af8:	22d8      	movs	r2, #216	; 0xd8
   31afa:	2100      	movs	r1, #0
   31afc:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   31afe:	687b      	ldr	r3, [r7, #4]
   31b00:	22e4      	movs	r2, #228	; 0xe4
   31b02:	2100      	movs	r1, #0
   31b04:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   31b06:	687b      	ldr	r3, [r7, #4]
   31b08:	2241      	movs	r2, #65	; 0x41
   31b0a:	5c9b      	ldrb	r3, [r3, r2]
   31b0c:	2202      	movs	r2, #2
   31b0e:	4013      	ands	r3, r2
   31b10:	b2db      	uxtb	r3, r3
   31b12:	2b00      	cmp	r3, #0
   31b14:	d105      	bne.n	31b22 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   31b16:	687b      	ldr	r3, [r7, #4]
   31b18:	2100      	movs	r1, #0
   31b1a:	0018      	movs	r0, r3
   31b1c:	4b3b      	ldr	r3, [pc, #236]	; (31c0c <_http_client_handle_entity+0x198>)
   31b1e:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   31b20:	e06e      	b.n	31c00 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   31b22:	687b      	ldr	r3, [r7, #4]
   31b24:	22dc      	movs	r2, #220	; 0xdc
   31b26:	589b      	ldr	r3, [r3, r2]
   31b28:	001a      	movs	r2, r3
   31b2a:	697b      	ldr	r3, [r7, #20]
   31b2c:	189a      	adds	r2, r3, r2
   31b2e:	687b      	ldr	r3, [r7, #4]
   31b30:	0011      	movs	r1, r2
   31b32:	0018      	movs	r0, r3
   31b34:	4b36      	ldr	r3, [pc, #216]	; (31c10 <_http_client_handle_entity+0x19c>)
   31b36:	4798      	blx	r3
				return module->recved_size;
   31b38:	687b      	ldr	r3, [r7, #4]
   31b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31b3c:	e061      	b.n	31c02 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   31b3e:	687b      	ldr	r3, [r7, #4]
   31b40:	22dc      	movs	r2, #220	; 0xdc
   31b42:	589b      	ldr	r3, [r3, r2]
   31b44:	2b00      	cmp	r3, #0
   31b46:	db57      	blt.n	31bf8 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   31b48:	687b      	ldr	r3, [r7, #4]
   31b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31b4c:	2308      	movs	r3, #8
   31b4e:	18fb      	adds	r3, r7, r3
   31b50:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   31b52:	2308      	movs	r3, #8
   31b54:	18fb      	adds	r3, r7, r3
   31b56:	697a      	ldr	r2, [r7, #20]
   31b58:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   31b5a:	687b      	ldr	r3, [r7, #4]
   31b5c:	22e0      	movs	r2, #224	; 0xe0
   31b5e:	589a      	ldr	r2, [r3, r2]
   31b60:	687b      	ldr	r3, [r7, #4]
   31b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31b64:	18d2      	adds	r2, r2, r3
   31b66:	687b      	ldr	r3, [r7, #4]
   31b68:	21e0      	movs	r1, #224	; 0xe0
   31b6a:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   31b6c:	687b      	ldr	r3, [r7, #4]
   31b6e:	22dc      	movs	r2, #220	; 0xdc
   31b70:	589a      	ldr	r2, [r3, r2]
   31b72:	687b      	ldr	r3, [r7, #4]
   31b74:	21e0      	movs	r1, #224	; 0xe0
   31b76:	585b      	ldr	r3, [r3, r1]
   31b78:	429a      	cmp	r2, r3
   31b7a:	dc0c      	bgt.n	31b96 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   31b7c:	687b      	ldr	r3, [r7, #4]
   31b7e:	22d8      	movs	r2, #216	; 0xd8
   31b80:	2100      	movs	r1, #0
   31b82:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   31b84:	687b      	ldr	r3, [r7, #4]
   31b86:	22e4      	movs	r2, #228	; 0xe4
   31b88:	2100      	movs	r1, #0
   31b8a:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   31b8c:	2308      	movs	r3, #8
   31b8e:	18fb      	adds	r3, r7, r3
   31b90:	2201      	movs	r2, #1
   31b92:	721a      	strb	r2, [r3, #8]
   31b94:	e003      	b.n	31b9e <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   31b96:	2308      	movs	r3, #8
   31b98:	18fb      	adds	r3, r7, r3
   31b9a:	2200      	movs	r2, #0
   31b9c:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   31b9e:	687b      	ldr	r3, [r7, #4]
   31ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ba2:	2b00      	cmp	r3, #0
   31ba4:	d006      	beq.n	31bb4 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   31ba6:	687b      	ldr	r3, [r7, #4]
   31ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31baa:	2208      	movs	r2, #8
   31bac:	18ba      	adds	r2, r7, r2
   31bae:	6878      	ldr	r0, [r7, #4]
   31bb0:	2103      	movs	r1, #3
   31bb2:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   31bb4:	2308      	movs	r3, #8
   31bb6:	18fb      	adds	r3, r7, r3
   31bb8:	7a1b      	ldrb	r3, [r3, #8]
   31bba:	2b01      	cmp	r3, #1
   31bbc:	d112      	bne.n	31be4 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   31bbe:	687b      	ldr	r3, [r7, #4]
   31bc0:	2241      	movs	r2, #65	; 0x41
   31bc2:	5c9b      	ldrb	r3, [r3, r2]
   31bc4:	2202      	movs	r2, #2
   31bc6:	4013      	ands	r3, r2
   31bc8:	b2db      	uxtb	r3, r3
   31bca:	2b00      	cmp	r3, #0
   31bcc:	d10a      	bne.n	31be4 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   31bce:	4b11      	ldr	r3, [pc, #68]	; (31c14 <_http_client_handle_entity+0x1a0>)
   31bd0:	0018      	movs	r0, r3
   31bd2:	4b11      	ldr	r3, [pc, #68]	; (31c18 <_http_client_handle_entity+0x1a4>)
   31bd4:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   31bd6:	687b      	ldr	r3, [r7, #4]
   31bd8:	2100      	movs	r1, #0
   31bda:	0018      	movs	r0, r3
   31bdc:	4b0b      	ldr	r3, [pc, #44]	; (31c0c <_http_client_handle_entity+0x198>)
   31bde:	4798      	blx	r3
					return 0;
   31be0:	2300      	movs	r3, #0
   31be2:	e00e      	b.n	31c02 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   31be4:	687b      	ldr	r3, [r7, #4]
   31be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31be8:	697a      	ldr	r2, [r7, #20]
   31bea:	18d2      	adds	r2, r2, r3
   31bec:	687b      	ldr	r3, [r7, #4]
   31bee:	0011      	movs	r1, r2
   31bf0:	0018      	movs	r0, r3
   31bf2:	4b07      	ldr	r3, [pc, #28]	; (31c10 <_http_client_handle_entity+0x19c>)
   31bf4:	4798      	blx	r3
   31bf6:	e003      	b.n	31c00 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   31bf8:	687b      	ldr	r3, [r7, #4]
   31bfa:	0018      	movs	r0, r3
   31bfc:	4b07      	ldr	r3, [pc, #28]	; (31c1c <_http_client_handle_entity+0x1a8>)
   31bfe:	4798      	blx	r3
		}
	}

	return 0;
   31c00:	2300      	movs	r3, #0
}
   31c02:	0018      	movs	r0, r3
   31c04:	46bd      	mov	sp, r7
   31c06:	b006      	add	sp, #24
   31c08:	bd80      	pop	{r7, pc}
   31c0a:	46c0      	nop			; (mov r8, r8)
   31c0c:	00030c39 	.word	0x00030c39
   31c10:	00031c21 	.word	0x00031c21
   31c14:	000395b0 	.word	0x000395b0
   31c18:	000345ad 	.word	0x000345ad
   31c1c:	00031861 	.word	0x00031861

00031c20 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   31c20:	b580      	push	{r7, lr}
   31c22:	b084      	sub	sp, #16
   31c24:	af00      	add	r7, sp, #0
   31c26:	6078      	str	r0, [r7, #4]
   31c28:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   31c2a:	687b      	ldr	r3, [r7, #4]
   31c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31c2e:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   31c30:	687b      	ldr	r3, [r7, #4]
   31c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31c34:	001a      	movs	r2, r3
   31c36:	683b      	ldr	r3, [r7, #0]
   31c38:	1ad2      	subs	r2, r2, r3
   31c3a:	68fb      	ldr	r3, [r7, #12]
   31c3c:	18d3      	adds	r3, r2, r3
   31c3e:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   31c40:	68bb      	ldr	r3, [r7, #8]
   31c42:	2b00      	cmp	r3, #0
   31c44:	dd09      	ble.n	31c5a <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   31c46:	68ba      	ldr	r2, [r7, #8]
   31c48:	6839      	ldr	r1, [r7, #0]
   31c4a:	68fb      	ldr	r3, [r7, #12]
   31c4c:	0018      	movs	r0, r3
   31c4e:	4b06      	ldr	r3, [pc, #24]	; (31c68 <_http_client_move_buffer+0x48>)
   31c50:	4798      	blx	r3
		module->recved_size = remain;
   31c52:	68ba      	ldr	r2, [r7, #8]
   31c54:	687b      	ldr	r3, [r7, #4]
   31c56:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   31c58:	e002      	b.n	31c60 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   31c5a:	687b      	ldr	r3, [r7, #4]
   31c5c:	2200      	movs	r2, #0
   31c5e:	645a      	str	r2, [r3, #68]	; 0x44
}
   31c60:	46c0      	nop			; (mov r8, r8)
   31c62:	46bd      	mov	sp, r7
   31c64:	b004      	add	sp, #16
   31c66:	bd80      	pop	{r7, pc}
   31c68:	00034367 	.word	0x00034367

00031c6c <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   31c6c:	b580      	push	{r7, lr}
   31c6e:	b084      	sub	sp, #16
   31c70:	af00      	add	r7, sp, #0
   31c72:	60f8      	str	r0, [r7, #12]
   31c74:	60b9      	str	r1, [r7, #8]
   31c76:	607a      	str	r2, [r7, #4]
   31c78:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   31c7a:	68fb      	ldr	r3, [r7, #12]
   31c7c:	687a      	ldr	r2, [r7, #4]
   31c7e:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   31c80:	68fb      	ldr	r3, [r7, #12]
   31c82:	68ba      	ldr	r2, [r7, #8]
   31c84:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   31c86:	68fb      	ldr	r3, [r7, #12]
   31c88:	2200      	movs	r2, #0
   31c8a:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   31c8c:	68fb      	ldr	r3, [r7, #12]
   31c8e:	683a      	ldr	r2, [r7, #0]
   31c90:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   31c92:	68fb      	ldr	r3, [r7, #12]
   31c94:	69ba      	ldr	r2, [r7, #24]
   31c96:	60da      	str	r2, [r3, #12]
}
   31c98:	46c0      	nop			; (mov r8, r8)
   31c9a:	46bd      	mov	sp, r7
   31c9c:	b004      	add	sp, #16
   31c9e:	bd80      	pop	{r7, pc}

00031ca0 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   31ca0:	b580      	push	{r7, lr}
   31ca2:	b084      	sub	sp, #16
   31ca4:	af00      	add	r7, sp, #0
   31ca6:	6078      	str	r0, [r7, #4]
   31ca8:	000a      	movs	r2, r1
   31caa:	1cfb      	adds	r3, r7, #3
   31cac:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   31cae:	687b      	ldr	r3, [r7, #4]
   31cb0:	681a      	ldr	r2, [r3, #0]
   31cb2:	687b      	ldr	r3, [r7, #4]
   31cb4:	685b      	ldr	r3, [r3, #4]
   31cb6:	1ad3      	subs	r3, r2, r3
   31cb8:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   31cba:	68fb      	ldr	r3, [r7, #12]
   31cbc:	2b00      	cmp	r3, #0
   31cbe:	dc03      	bgt.n	31cc8 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   31cc0:	687b      	ldr	r3, [r7, #4]
   31cc2:	0018      	movs	r0, r3
   31cc4:	4b08      	ldr	r3, [pc, #32]	; (31ce8 <stream_writer_send_8+0x48>)
   31cc6:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   31cc8:	687b      	ldr	r3, [r7, #4]
   31cca:	6919      	ldr	r1, [r3, #16]
   31ccc:	687b      	ldr	r3, [r7, #4]
   31cce:	685b      	ldr	r3, [r3, #4]
   31cd0:	1c58      	adds	r0, r3, #1
   31cd2:	687a      	ldr	r2, [r7, #4]
   31cd4:	6050      	str	r0, [r2, #4]
   31cd6:	18cb      	adds	r3, r1, r3
   31cd8:	1cfa      	adds	r2, r7, #3
   31cda:	7812      	ldrb	r2, [r2, #0]
   31cdc:	701a      	strb	r2, [r3, #0]
}
   31cde:	46c0      	nop			; (mov r8, r8)
   31ce0:	46bd      	mov	sp, r7
   31ce2:	b004      	add	sp, #16
   31ce4:	bd80      	pop	{r7, pc}
   31ce6:	46c0      	nop			; (mov r8, r8)
   31ce8:	00031d29 	.word	0x00031d29

00031cec <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   31cec:	b580      	push	{r7, lr}
   31cee:	b084      	sub	sp, #16
   31cf0:	af00      	add	r7, sp, #0
   31cf2:	60f8      	str	r0, [r7, #12]
   31cf4:	60b9      	str	r1, [r7, #8]
   31cf6:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   31cf8:	e00d      	b.n	31d16 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   31cfa:	68bb      	ldr	r3, [r7, #8]
   31cfc:	781b      	ldrb	r3, [r3, #0]
   31cfe:	b25a      	sxtb	r2, r3
   31d00:	68fb      	ldr	r3, [r7, #12]
   31d02:	0011      	movs	r1, r2
   31d04:	0018      	movs	r0, r3
   31d06:	4b07      	ldr	r3, [pc, #28]	; (31d24 <stream_writer_send_buffer+0x38>)
   31d08:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   31d0a:	687b      	ldr	r3, [r7, #4]
   31d0c:	3b01      	subs	r3, #1
   31d0e:	607b      	str	r3, [r7, #4]
   31d10:	68bb      	ldr	r3, [r7, #8]
   31d12:	3301      	adds	r3, #1
   31d14:	60bb      	str	r3, [r7, #8]
   31d16:	687b      	ldr	r3, [r7, #4]
   31d18:	2b00      	cmp	r3, #0
   31d1a:	d1ee      	bne.n	31cfa <stream_writer_send_buffer+0xe>
	}
}
   31d1c:	46c0      	nop			; (mov r8, r8)
   31d1e:	46bd      	mov	sp, r7
   31d20:	b004      	add	sp, #16
   31d22:	bd80      	pop	{r7, pc}
   31d24:	00031ca1 	.word	0x00031ca1

00031d28 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   31d28:	b590      	push	{r4, r7, lr}
   31d2a:	b083      	sub	sp, #12
   31d2c:	af00      	add	r7, sp, #0
   31d2e:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   31d30:	687b      	ldr	r3, [r7, #4]
   31d32:	685b      	ldr	r3, [r3, #4]
   31d34:	2b00      	cmp	r3, #0
   31d36:	d00c      	beq.n	31d52 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   31d38:	687b      	ldr	r3, [r7, #4]
   31d3a:	689c      	ldr	r4, [r3, #8]
   31d3c:	687b      	ldr	r3, [r7, #4]
   31d3e:	68d8      	ldr	r0, [r3, #12]
   31d40:	687b      	ldr	r3, [r7, #4]
   31d42:	6919      	ldr	r1, [r3, #16]
   31d44:	687b      	ldr	r3, [r7, #4]
   31d46:	685b      	ldr	r3, [r3, #4]
   31d48:	001a      	movs	r2, r3
   31d4a:	47a0      	blx	r4
		writer->written = 0;
   31d4c:	687b      	ldr	r3, [r7, #4]
   31d4e:	2200      	movs	r2, #0
   31d50:	605a      	str	r2, [r3, #4]
	}
}
   31d52:	46c0      	nop			; (mov r8, r8)
   31d54:	46bd      	mov	sp, r7
   31d56:	b003      	add	sp, #12
   31d58:	bd90      	pop	{r4, r7, pc}
	...

00031d5c <system_cpu_clock_get_hz>:
{
   31d5c:	b580      	push	{r7, lr}
   31d5e:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   31d60:	2000      	movs	r0, #0
   31d62:	4b05      	ldr	r3, [pc, #20]	; (31d78 <system_cpu_clock_get_hz+0x1c>)
   31d64:	4798      	blx	r3
   31d66:	0002      	movs	r2, r0
   31d68:	4b04      	ldr	r3, [pc, #16]	; (31d7c <system_cpu_clock_get_hz+0x20>)
   31d6a:	7a1b      	ldrb	r3, [r3, #8]
   31d6c:	b2db      	uxtb	r3, r3
   31d6e:	40da      	lsrs	r2, r3
   31d70:	0013      	movs	r3, r2
}
   31d72:	0018      	movs	r0, r3
   31d74:	46bd      	mov	sp, r7
   31d76:	bd80      	pop	{r7, pc}
   31d78:	00029795 	.word	0x00029795
   31d7c:	40000400 	.word	0x40000400

00031d80 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   31d80:	b580      	push	{r7, lr}
   31d82:	b084      	sub	sp, #16
   31d84:	af00      	add	r7, sp, #0
   31d86:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   31d88:	687b      	ldr	r3, [r7, #4]
   31d8a:	681b      	ldr	r3, [r3, #0]
   31d8c:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   31d8e:	46c0      	nop			; (mov r8, r8)
   31d90:	68fb      	ldr	r3, [r7, #12]
   31d92:	689b      	ldr	r3, [r3, #8]
   31d94:	2202      	movs	r2, #2
   31d96:	4013      	ands	r3, r2
   31d98:	d1fa      	bne.n	31d90 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   31d9a:	68fb      	ldr	r3, [r7, #12]
   31d9c:	681b      	ldr	r3, [r3, #0]
   31d9e:	2202      	movs	r2, #2
   31da0:	431a      	orrs	r2, r3
   31da2:	68fb      	ldr	r3, [r7, #12]
   31da4:	601a      	str	r2, [r3, #0]
}
   31da6:	46c0      	nop			; (mov r8, r8)
   31da8:	46bd      	mov	sp, r7
   31daa:	b004      	add	sp, #16
   31dac:	bd80      	pop	{r7, pc}
	...

00031db0 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   31db0:	b580      	push	{r7, lr}
   31db2:	b082      	sub	sp, #8
   31db4:	af00      	add	r7, sp, #0
   31db6:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   31db8:	4b04      	ldr	r3, [pc, #16]	; (31dcc <sw_timer_tcc_callback+0x1c>)
   31dba:	681b      	ldr	r3, [r3, #0]
   31dbc:	1c5a      	adds	r2, r3, #1
   31dbe:	4b03      	ldr	r3, [pc, #12]	; (31dcc <sw_timer_tcc_callback+0x1c>)
   31dc0:	601a      	str	r2, [r3, #0]
}
   31dc2:	46c0      	nop			; (mov r8, r8)
   31dc4:	46bd      	mov	sp, r7
   31dc6:	b002      	add	sp, #8
   31dc8:	bd80      	pop	{r7, pc}
   31dca:	46c0      	nop			; (mov r8, r8)
   31dcc:	200042f8 	.word	0x200042f8

00031dd0 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   31dd0:	b580      	push	{r7, lr}
   31dd2:	b082      	sub	sp, #8
   31dd4:	af00      	add	r7, sp, #0
   31dd6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   31dd8:	687b      	ldr	r3, [r7, #4]
   31dda:	2264      	movs	r2, #100	; 0x64
   31ddc:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   31dde:	687b      	ldr	r3, [r7, #4]
   31de0:	2200      	movs	r2, #0
   31de2:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   31de4:	687b      	ldr	r3, [r7, #4]
   31de6:	2200      	movs	r2, #0
   31de8:	705a      	strb	r2, [r3, #1]
}
   31dea:	46c0      	nop			; (mov r8, r8)
   31dec:	46bd      	mov	sp, r7
   31dee:	b002      	add	sp, #8
   31df0:	bd80      	pop	{r7, pc}
	...

00031df4 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   31df4:	b590      	push	{r4, r7, lr}
   31df6:	b0b1      	sub	sp, #196	; 0xc4
   31df8:	af00      	add	r7, sp, #0
   31dfa:	6078      	str	r0, [r7, #4]
   31dfc:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   31dfe:	230c      	movs	r3, #12
   31e00:	18fb      	adds	r3, r7, r3
   31e02:	4a2e      	ldr	r2, [pc, #184]	; (31ebc <sw_timer_init+0xc8>)
   31e04:	ca13      	ldmia	r2!, {r0, r1, r4}
   31e06:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   31e08:	683b      	ldr	r3, [r7, #0]
   31e0a:	885b      	ldrh	r3, [r3, #2]
   31e0c:	001a      	movs	r2, r3
   31e0e:	687b      	ldr	r3, [r7, #4]
   31e10:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   31e12:	687b      	ldr	r3, [r7, #4]
   31e14:	3314      	adds	r3, #20
   31e16:	22bc      	movs	r2, #188	; 0xbc
   31e18:	18ba      	adds	r2, r7, r2
   31e1a:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   31e1c:	683b      	ldr	r3, [r7, #0]
   31e1e:	781b      	ldrb	r3, [r3, #0]
   31e20:	001a      	movs	r2, r3
   31e22:	230c      	movs	r3, #12
   31e24:	18fb      	adds	r3, r7, r3
   31e26:	0092      	lsls	r2, r2, #2
   31e28:	58d2      	ldr	r2, [r2, r3]
   31e2a:	2318      	movs	r3, #24
   31e2c:	18fb      	adds	r3, r7, r3
   31e2e:	0011      	movs	r1, r2
   31e30:	0018      	movs	r0, r3
   31e32:	4b23      	ldr	r3, [pc, #140]	; (31ec0 <sw_timer_init+0xcc>)
   31e34:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   31e36:	4b23      	ldr	r3, [pc, #140]	; (31ec4 <sw_timer_init+0xd0>)
   31e38:	4798      	blx	r3
   31e3a:	0004      	movs	r4, r0
   31e3c:	683b      	ldr	r3, [r7, #0]
   31e3e:	885b      	ldrh	r3, [r3, #2]
   31e40:	001a      	movs	r2, r3
   31e42:	4b21      	ldr	r3, [pc, #132]	; (31ec8 <sw_timer_init+0xd4>)
   31e44:	0011      	movs	r1, r2
   31e46:	22fa      	movs	r2, #250	; 0xfa
   31e48:	0210      	lsls	r0, r2, #8
   31e4a:	4798      	blx	r3
   31e4c:	0003      	movs	r3, r0
   31e4e:	001a      	movs	r2, r3
   31e50:	4b1e      	ldr	r3, [pc, #120]	; (31ecc <sw_timer_init+0xd8>)
   31e52:	0011      	movs	r1, r2
   31e54:	0020      	movs	r0, r4
   31e56:	4798      	blx	r3
   31e58:	0003      	movs	r3, r0
   31e5a:	001a      	movs	r2, r3
   31e5c:	2318      	movs	r3, #24
   31e5e:	18fb      	adds	r3, r7, r3
   31e60:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   31e62:	2318      	movs	r3, #24
   31e64:	18fb      	adds	r3, r7, r3
   31e66:	2205      	movs	r2, #5
   31e68:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   31e6a:	683b      	ldr	r3, [r7, #0]
   31e6c:	781b      	ldrb	r3, [r3, #0]
   31e6e:	001a      	movs	r2, r3
   31e70:	230c      	movs	r3, #12
   31e72:	18fb      	adds	r3, r7, r3
   31e74:	0092      	lsls	r2, r2, #2
   31e76:	58d1      	ldr	r1, [r2, r3]
   31e78:	2318      	movs	r3, #24
   31e7a:	18fa      	adds	r2, r7, r3
   31e7c:	23bc      	movs	r3, #188	; 0xbc
   31e7e:	18fb      	adds	r3, r7, r3
   31e80:	681b      	ldr	r3, [r3, #0]
   31e82:	0018      	movs	r0, r3
   31e84:	4b12      	ldr	r3, [pc, #72]	; (31ed0 <sw_timer_init+0xdc>)
   31e86:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31e88:	683b      	ldr	r3, [r7, #0]
   31e8a:	785b      	ldrb	r3, [r3, #1]
   31e8c:	3308      	adds	r3, #8
   31e8e:	b2da      	uxtb	r2, r3
   31e90:	4910      	ldr	r1, [pc, #64]	; (31ed4 <sw_timer_init+0xe0>)
   31e92:	23bc      	movs	r3, #188	; 0xbc
   31e94:	18fb      	adds	r3, r7, r3
   31e96:	681b      	ldr	r3, [r3, #0]
   31e98:	0018      	movs	r0, r3
   31e9a:	4b0f      	ldr	r3, [pc, #60]	; (31ed8 <sw_timer_init+0xe4>)
   31e9c:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   31e9e:	683b      	ldr	r3, [r7, #0]
   31ea0:	785b      	ldrb	r3, [r3, #1]
   31ea2:	3308      	adds	r3, #8
   31ea4:	b2da      	uxtb	r2, r3
   31ea6:	23bc      	movs	r3, #188	; 0xbc
   31ea8:	18fb      	adds	r3, r7, r3
   31eaa:	681b      	ldr	r3, [r3, #0]
   31eac:	0011      	movs	r1, r2
   31eae:	0018      	movs	r0, r3
   31eb0:	4b0a      	ldr	r3, [pc, #40]	; (31edc <sw_timer_init+0xe8>)
   31eb2:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   31eb4:	46c0      	nop			; (mov r8, r8)
   31eb6:	46bd      	mov	sp, r7
   31eb8:	b031      	add	sp, #196	; 0xc4
   31eba:	bd90      	pop	{r4, r7, pc}
   31ebc:	000395f0 	.word	0x000395f0
   31ec0:	00029d2d 	.word	0x00029d2d
   31ec4:	00031d5d 	.word	0x00031d5d
   31ec8:	000324c5 	.word	0x000324c5
   31ecc:	000323b1 	.word	0x000323b1
   31ed0:	0002a389 	.word	0x0002a389
   31ed4:	00031db1 	.word	0x00031db1
   31ed8:	0002a7a1 	.word	0x0002a7a1
   31edc:	0002a7e1 	.word	0x0002a7e1

00031ee0 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   31ee0:	b580      	push	{r7, lr}
   31ee2:	b084      	sub	sp, #16
   31ee4:	af00      	add	r7, sp, #0
   31ee6:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   31ee8:	687b      	ldr	r3, [r7, #4]
   31eea:	3314      	adds	r3, #20
   31eec:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   31eee:	68fb      	ldr	r3, [r7, #12]
   31ef0:	0018      	movs	r0, r3
   31ef2:	4b03      	ldr	r3, [pc, #12]	; (31f00 <sw_timer_enable+0x20>)
   31ef4:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   31ef6:	46c0      	nop			; (mov r8, r8)
   31ef8:	46bd      	mov	sp, r7
   31efa:	b004      	add	sp, #16
   31efc:	bd80      	pop	{r7, pc}
   31efe:	46c0      	nop			; (mov r8, r8)
   31f00:	00031d81 	.word	0x00031d81

00031f04 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   31f04:	b580      	push	{r7, lr}
   31f06:	b086      	sub	sp, #24
   31f08:	af00      	add	r7, sp, #0
   31f0a:	60f8      	str	r0, [r7, #12]
   31f0c:	60b9      	str	r1, [r7, #8]
   31f0e:	607a      	str	r2, [r7, #4]
   31f10:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31f12:	2300      	movs	r3, #0
   31f14:	617b      	str	r3, [r7, #20]
   31f16:	e032      	b.n	31f7e <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   31f18:	68f9      	ldr	r1, [r7, #12]
   31f1a:	697a      	ldr	r2, [r7, #20]
   31f1c:	0013      	movs	r3, r2
   31f1e:	009b      	lsls	r3, r3, #2
   31f20:	189b      	adds	r3, r3, r2
   31f22:	009b      	lsls	r3, r3, #2
   31f24:	5c5b      	ldrb	r3, [r3, r1]
   31f26:	07db      	lsls	r3, r3, #31
   31f28:	0fdb      	lsrs	r3, r3, #31
   31f2a:	b2db      	uxtb	r3, r3
   31f2c:	2b00      	cmp	r3, #0
   31f2e:	d123      	bne.n	31f78 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   31f30:	697a      	ldr	r2, [r7, #20]
   31f32:	0013      	movs	r3, r2
   31f34:	009b      	lsls	r3, r3, #2
   31f36:	189b      	adds	r3, r3, r2
   31f38:	009b      	lsls	r3, r3, #2
   31f3a:	68fa      	ldr	r2, [r7, #12]
   31f3c:	18d3      	adds	r3, r2, r3
   31f3e:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   31f40:	693b      	ldr	r3, [r7, #16]
   31f42:	68ba      	ldr	r2, [r7, #8]
   31f44:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   31f46:	693b      	ldr	r3, [r7, #16]
   31f48:	781a      	ldrb	r2, [r3, #0]
   31f4a:	2102      	movs	r1, #2
   31f4c:	438a      	bics	r2, r1
   31f4e:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   31f50:	693b      	ldr	r3, [r7, #16]
   31f52:	687a      	ldr	r2, [r7, #4]
   31f54:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   31f56:	68fb      	ldr	r3, [r7, #12]
   31f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31f5a:	4b0d      	ldr	r3, [pc, #52]	; (31f90 <sw_timer_register_callback+0x8c>)
   31f5c:	0011      	movs	r1, r2
   31f5e:	6838      	ldr	r0, [r7, #0]
   31f60:	4798      	blx	r3
   31f62:	0003      	movs	r3, r0
   31f64:	001a      	movs	r2, r3
   31f66:	693b      	ldr	r3, [r7, #16]
   31f68:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   31f6a:	693b      	ldr	r3, [r7, #16]
   31f6c:	781a      	ldrb	r2, [r3, #0]
   31f6e:	2101      	movs	r1, #1
   31f70:	430a      	orrs	r2, r1
   31f72:	701a      	strb	r2, [r3, #0]
			return index;
   31f74:	697b      	ldr	r3, [r7, #20]
   31f76:	e007      	b.n	31f88 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31f78:	697b      	ldr	r3, [r7, #20]
   31f7a:	3301      	adds	r3, #1
   31f7c:	617b      	str	r3, [r7, #20]
   31f7e:	697b      	ldr	r3, [r7, #20]
   31f80:	2b00      	cmp	r3, #0
   31f82:	ddc9      	ble.n	31f18 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   31f84:	2301      	movs	r3, #1
   31f86:	425b      	negs	r3, r3
}
   31f88:	0018      	movs	r0, r3
   31f8a:	46bd      	mov	sp, r7
   31f8c:	b006      	add	sp, #24
   31f8e:	bd80      	pop	{r7, pc}
   31f90:	000323b1 	.word	0x000323b1

00031f94 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   31f94:	b580      	push	{r7, lr}
   31f96:	b086      	sub	sp, #24
   31f98:	af00      	add	r7, sp, #0
   31f9a:	60f8      	str	r0, [r7, #12]
   31f9c:	60b9      	str	r1, [r7, #8]
   31f9e:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31fa0:	68ba      	ldr	r2, [r7, #8]
   31fa2:	0013      	movs	r3, r2
   31fa4:	009b      	lsls	r3, r3, #2
   31fa6:	189b      	adds	r3, r3, r2
   31fa8:	009b      	lsls	r3, r3, #2
   31faa:	68fa      	ldr	r2, [r7, #12]
   31fac:	18d3      	adds	r3, r2, r3
   31fae:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   31fb0:	697b      	ldr	r3, [r7, #20]
   31fb2:	781a      	ldrb	r2, [r3, #0]
   31fb4:	2102      	movs	r1, #2
   31fb6:	430a      	orrs	r2, r1
   31fb8:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   31fba:	68fb      	ldr	r3, [r7, #12]
   31fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31fbe:	4b07      	ldr	r3, [pc, #28]	; (31fdc <sw_timer_enable_callback+0x48>)
   31fc0:	0011      	movs	r1, r2
   31fc2:	6878      	ldr	r0, [r7, #4]
   31fc4:	4798      	blx	r3
   31fc6:	0003      	movs	r3, r0
   31fc8:	001a      	movs	r2, r3
   31fca:	4b05      	ldr	r3, [pc, #20]	; (31fe0 <sw_timer_enable_callback+0x4c>)
   31fcc:	681b      	ldr	r3, [r3, #0]
   31fce:	18d2      	adds	r2, r2, r3
   31fd0:	697b      	ldr	r3, [r7, #20]
   31fd2:	611a      	str	r2, [r3, #16]
}
   31fd4:	46c0      	nop			; (mov r8, r8)
   31fd6:	46bd      	mov	sp, r7
   31fd8:	b006      	add	sp, #24
   31fda:	bd80      	pop	{r7, pc}
   31fdc:	000323b1 	.word	0x000323b1
   31fe0:	200042f8 	.word	0x200042f8

00031fe4 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   31fe4:	b580      	push	{r7, lr}
   31fe6:	b084      	sub	sp, #16
   31fe8:	af00      	add	r7, sp, #0
   31fea:	6078      	str	r0, [r7, #4]
   31fec:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   31fee:	683a      	ldr	r2, [r7, #0]
   31ff0:	0013      	movs	r3, r2
   31ff2:	009b      	lsls	r3, r3, #2
   31ff4:	189b      	adds	r3, r3, r2
   31ff6:	009b      	lsls	r3, r3, #2
   31ff8:	687a      	ldr	r2, [r7, #4]
   31ffa:	18d3      	adds	r3, r2, r3
   31ffc:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   31ffe:	68fb      	ldr	r3, [r7, #12]
   32000:	781a      	ldrb	r2, [r3, #0]
   32002:	2102      	movs	r1, #2
   32004:	438a      	bics	r2, r1
   32006:	701a      	strb	r2, [r3, #0]
}
   32008:	46c0      	nop			; (mov r8, r8)
   3200a:	46bd      	mov	sp, r7
   3200c:	b004      	add	sp, #16
   3200e:	bd80      	pop	{r7, pc}

00032010 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   32010:	b590      	push	{r4, r7, lr}
   32012:	b085      	sub	sp, #20
   32014:	af00      	add	r7, sp, #0
   32016:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   32018:	2300      	movs	r3, #0
   3201a:	60fb      	str	r3, [r7, #12]
   3201c:	e053      	b.n	320c6 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   3201e:	6879      	ldr	r1, [r7, #4]
   32020:	68fa      	ldr	r2, [r7, #12]
   32022:	0013      	movs	r3, r2
   32024:	009b      	lsls	r3, r3, #2
   32026:	189b      	adds	r3, r3, r2
   32028:	009b      	lsls	r3, r3, #2
   3202a:	5c5b      	ldrb	r3, [r3, r1]
   3202c:	07db      	lsls	r3, r3, #31
   3202e:	0fdb      	lsrs	r3, r3, #31
   32030:	b2db      	uxtb	r3, r3
   32032:	2b00      	cmp	r3, #0
   32034:	d044      	beq.n	320c0 <sw_timer_task+0xb0>
   32036:	6879      	ldr	r1, [r7, #4]
   32038:	68fa      	ldr	r2, [r7, #12]
   3203a:	0013      	movs	r3, r2
   3203c:	009b      	lsls	r3, r3, #2
   3203e:	189b      	adds	r3, r3, r2
   32040:	009b      	lsls	r3, r3, #2
   32042:	5c5b      	ldrb	r3, [r3, r1]
   32044:	079b      	lsls	r3, r3, #30
   32046:	0fdb      	lsrs	r3, r3, #31
   32048:	b2db      	uxtb	r3, r3
   3204a:	2b00      	cmp	r3, #0
   3204c:	d038      	beq.n	320c0 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   3204e:	68fa      	ldr	r2, [r7, #12]
   32050:	0013      	movs	r3, r2
   32052:	009b      	lsls	r3, r3, #2
   32054:	189b      	adds	r3, r3, r2
   32056:	009b      	lsls	r3, r3, #2
   32058:	687a      	ldr	r2, [r7, #4]
   3205a:	18d3      	adds	r3, r2, r3
   3205c:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   3205e:	68bb      	ldr	r3, [r7, #8]
   32060:	691a      	ldr	r2, [r3, #16]
   32062:	4b1c      	ldr	r3, [pc, #112]	; (320d4 <sw_timer_task+0xc4>)
   32064:	681b      	ldr	r3, [r3, #0]
   32066:	1ad3      	subs	r3, r2, r3
   32068:	d52a      	bpl.n	320c0 <sw_timer_task+0xb0>
   3206a:	68bb      	ldr	r3, [r7, #8]
   3206c:	781b      	ldrb	r3, [r3, #0]
   3206e:	2204      	movs	r2, #4
   32070:	4013      	ands	r3, r2
   32072:	b2db      	uxtb	r3, r3
   32074:	2b00      	cmp	r3, #0
   32076:	d123      	bne.n	320c0 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   32078:	68bb      	ldr	r3, [r7, #8]
   3207a:	781a      	ldrb	r2, [r3, #0]
   3207c:	2104      	movs	r1, #4
   3207e:	430a      	orrs	r2, r1
   32080:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   32082:	68bb      	ldr	r3, [r7, #8]
   32084:	68db      	ldr	r3, [r3, #12]
   32086:	2b00      	cmp	r3, #0
   32088:	d007      	beq.n	3209a <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   3208a:	68bb      	ldr	r3, [r7, #8]
   3208c:	68da      	ldr	r2, [r3, #12]
   3208e:	4b11      	ldr	r3, [pc, #68]	; (320d4 <sw_timer_task+0xc4>)
   32090:	681b      	ldr	r3, [r3, #0]
   32092:	18d2      	adds	r2, r2, r3
   32094:	68bb      	ldr	r3, [r7, #8]
   32096:	611a      	str	r2, [r3, #16]
   32098:	e004      	b.n	320a4 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   3209a:	68bb      	ldr	r3, [r7, #8]
   3209c:	781a      	ldrb	r2, [r3, #0]
   3209e:	2102      	movs	r1, #2
   320a0:	438a      	bics	r2, r1
   320a2:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   320a4:	68bb      	ldr	r3, [r7, #8]
   320a6:	685c      	ldr	r4, [r3, #4]
   320a8:	68bb      	ldr	r3, [r7, #8]
   320aa:	689a      	ldr	r2, [r3, #8]
   320ac:	68bb      	ldr	r3, [r7, #8]
   320ae:	68db      	ldr	r3, [r3, #12]
   320b0:	68f9      	ldr	r1, [r7, #12]
   320b2:	6878      	ldr	r0, [r7, #4]
   320b4:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   320b6:	68bb      	ldr	r3, [r7, #8]
   320b8:	781a      	ldrb	r2, [r3, #0]
   320ba:	2104      	movs	r1, #4
   320bc:	438a      	bics	r2, r1
   320be:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   320c0:	68fb      	ldr	r3, [r7, #12]
   320c2:	3301      	adds	r3, #1
   320c4:	60fb      	str	r3, [r7, #12]
   320c6:	68fb      	ldr	r3, [r7, #12]
   320c8:	2b00      	cmp	r3, #0
   320ca:	dda8      	ble.n	3201e <sw_timer_task+0xe>
			}
		}
	}
}
   320cc:	46c0      	nop			; (mov r8, r8)
   320ce:	46bd      	mov	sp, r7
   320d0:	b005      	add	sp, #20
   320d2:	bd90      	pop	{r4, r7, pc}
   320d4:	200042f8 	.word	0x200042f8

000320d8 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   320d8:	b580      	push	{r7, lr}
   320da:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   320dc:	4b06      	ldr	r3, [pc, #24]	; (320f8 <main+0x20>)
   320de:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   320e0:	4b06      	ldr	r3, [pc, #24]	; (320fc <main+0x24>)
   320e2:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   320e4:	2001      	movs	r0, #1
   320e6:	4b06      	ldr	r3, [pc, #24]	; (32100 <main+0x28>)
   320e8:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   320ea:	4b06      	ldr	r3, [pc, #24]	; (32104 <main+0x2c>)
   320ec:	4798      	blx	r3

    return 0;  // Will not get here
   320ee:	2300      	movs	r3, #0
}
   320f0:	0018      	movs	r0, r3
   320f2:	46bd      	mov	sp, r7
   320f4:	bd80      	pop	{r7, pc}
   320f6:	46c0      	nop			; (mov r8, r8)
   320f8:	00029c21 	.word	0x00029c21
   320fc:	0001dae5 	.word	0x0001dae5
   32100:	000181b1 	.word	0x000181b1
   32104:	0001c13d 	.word	0x0001c13d

00032108 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   32108:	b580      	push	{r7, lr}
   3210a:	b082      	sub	sp, #8
   3210c:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   3210e:	4b29      	ldr	r3, [pc, #164]	; (321b4 <vApplicationDaemonTaskStartupHook+0xac>)
   32110:	0018      	movs	r0, r3
   32112:	4b29      	ldr	r3, [pc, #164]	; (321b8 <vApplicationDaemonTaskStartupHook+0xb0>)
   32114:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   32116:	4b29      	ldr	r3, [pc, #164]	; (321bc <vApplicationDaemonTaskStartupHook+0xb4>)
   32118:	0018      	movs	r0, r3
   3211a:	4b27      	ldr	r3, [pc, #156]	; (321b8 <vApplicationDaemonTaskStartupHook+0xb0>)
   3211c:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   3211e:	4b28      	ldr	r3, [pc, #160]	; (321c0 <vApplicationDaemonTaskStartupHook+0xb8>)
   32120:	4798      	blx	r3
   32122:	1e03      	subs	r3, r0, #0
   32124:	d004      	beq.n	32130 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   32126:	4b27      	ldr	r3, [pc, #156]	; (321c4 <vApplicationDaemonTaskStartupHook+0xbc>)
   32128:	0018      	movs	r0, r3
   3212a:	4b23      	ldr	r3, [pc, #140]	; (321b8 <vApplicationDaemonTaskStartupHook+0xb0>)
   3212c:	4798      	blx	r3
   3212e:	e003      	b.n	32138 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   32130:	4b25      	ldr	r3, [pc, #148]	; (321c8 <vApplicationDaemonTaskStartupHook+0xc0>)
   32132:	0018      	movs	r0, r3
   32134:	4b20      	ldr	r3, [pc, #128]	; (321b8 <vApplicationDaemonTaskStartupHook+0xb0>)
   32136:	4798      	blx	r3
    }
	
    if (0 != InitializeSeesaw()) {
   32138:	4b24      	ldr	r3, [pc, #144]	; (321cc <vApplicationDaemonTaskStartupHook+0xc4>)
   3213a:	4798      	blx	r3
   3213c:	1e03      	subs	r3, r0, #0
   3213e:	d004      	beq.n	3214a <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   32140:	4b23      	ldr	r3, [pc, #140]	; (321d0 <vApplicationDaemonTaskStartupHook+0xc8>)
   32142:	0018      	movs	r0, r3
   32144:	4b1c      	ldr	r3, [pc, #112]	; (321b8 <vApplicationDaemonTaskStartupHook+0xb0>)
   32146:	4798      	blx	r3
   32148:	e003      	b.n	32152 <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   3214a:	4b22      	ldr	r3, [pc, #136]	; (321d4 <vApplicationDaemonTaskStartupHook+0xcc>)
   3214c:	0018      	movs	r0, r3
   3214e:	4b1a      	ldr	r3, [pc, #104]	; (321b8 <vApplicationDaemonTaskStartupHook+0xb0>)
   32150:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   32152:	1dfb      	adds	r3, r7, #7
   32154:	2200      	movs	r2, #0
   32156:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   32158:	4b1f      	ldr	r3, [pc, #124]	; (321d8 <vApplicationDaemonTaskStartupHook+0xd0>)
   3215a:	4798      	blx	r3
   3215c:	0002      	movs	r2, r0
   3215e:	1dfb      	adds	r3, r7, #7
   32160:	0019      	movs	r1, r3
   32162:	0010      	movs	r0, r2
   32164:	4b1d      	ldr	r3, [pc, #116]	; (321dc <vApplicationDaemonTaskStartupHook+0xd4>)
   32166:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   32168:	1dfb      	adds	r3, r7, #7
   3216a:	781b      	ldrb	r3, [r3, #0]
   3216c:	2b6c      	cmp	r3, #108	; 0x6c
   3216e:	d004      	beq.n	3217a <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   32170:	4b1b      	ldr	r3, [pc, #108]	; (321e0 <vApplicationDaemonTaskStartupHook+0xd8>)
   32172:	0018      	movs	r0, r3
   32174:	4b10      	ldr	r3, [pc, #64]	; (321b8 <vApplicationDaemonTaskStartupHook+0xb0>)
   32176:	4798      	blx	r3
   32178:	e010      	b.n	3219c <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   3217a:	4b1a      	ldr	r3, [pc, #104]	; (321e4 <vApplicationDaemonTaskStartupHook+0xdc>)
   3217c:	0018      	movs	r0, r3
   3217e:	4b0e      	ldr	r3, [pc, #56]	; (321b8 <vApplicationDaemonTaskStartupHook+0xb0>)
   32180:	4798      	blx	r3
        if (InitImu() == 0) {
   32182:	4b19      	ldr	r3, [pc, #100]	; (321e8 <vApplicationDaemonTaskStartupHook+0xe0>)
   32184:	4798      	blx	r3
   32186:	1e03      	subs	r3, r0, #0
   32188:	d104      	bne.n	32194 <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   3218a:	4b18      	ldr	r3, [pc, #96]	; (321ec <vApplicationDaemonTaskStartupHook+0xe4>)
   3218c:	0018      	movs	r0, r3
   3218e:	4b0a      	ldr	r3, [pc, #40]	; (321b8 <vApplicationDaemonTaskStartupHook+0xb0>)
   32190:	4798      	blx	r3
   32192:	e003      	b.n	3219c <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   32194:	4b16      	ldr	r3, [pc, #88]	; (321f0 <vApplicationDaemonTaskStartupHook+0xe8>)
   32196:	0018      	movs	r0, r3
   32198:	4b07      	ldr	r3, [pc, #28]	; (321b8 <vApplicationDaemonTaskStartupHook+0xb0>)
   3219a:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   3219c:	4b15      	ldr	r3, [pc, #84]	; (321f4 <vApplicationDaemonTaskStartupHook+0xec>)
   3219e:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   321a0:	4b15      	ldr	r3, [pc, #84]	; (321f8 <vApplicationDaemonTaskStartupHook+0xf0>)
   321a2:	681b      	ldr	r3, [r3, #0]
   321a4:	0018      	movs	r0, r3
   321a6:	4b15      	ldr	r3, [pc, #84]	; (321fc <vApplicationDaemonTaskStartupHook+0xf4>)
   321a8:	4798      	blx	r3
}
   321aa:	46c0      	nop			; (mov r8, r8)
   321ac:	46bd      	mov	sp, r7
   321ae:	b002      	add	sp, #8
   321b0:	bd80      	pop	{r7, pc}
   321b2:	46c0      	nop			; (mov r8, r8)
   321b4:	000395fc 	.word	0x000395fc
   321b8:	0001db55 	.word	0x0001db55
   321bc:	00039620 	.word	0x00039620
   321c0:	00013c91 	.word	0x00013c91
   321c4:	00039638 	.word	0x00039638
   321c8:	0003965c 	.word	0x0003965c
   321cc:	0001505d 	.word	0x0001505d
   321d0:	00039678 	.word	0x00039678
   321d4:	00039698 	.word	0x00039698
   321d8:	00014f85 	.word	0x00014f85
   321dc:	00014ad9 	.word	0x00014ad9
   321e0:	000396b0 	.word	0x000396b0
   321e4:	000396c4 	.word	0x000396c4
   321e8:	00014f95 	.word	0x00014f95
   321ec:	000396d4 	.word	0x000396d4
   321f0:	000396e8 	.word	0x000396e8
   321f4:	00032201 	.word	0x00032201
   321f8:	20004300 	.word	0x20004300
   321fc:	0001bfe1 	.word	0x0001bfe1

00032200 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   32200:	b590      	push	{r4, r7, lr}
   32202:	b083      	sub	sp, #12
   32204:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   32206:	4b44      	ldr	r3, [pc, #272]	; (32318 <StartTasks+0x118>)
   32208:	4798      	blx	r3
   3220a:	0003      	movs	r3, r0
   3220c:	4a43      	ldr	r2, [pc, #268]	; (3231c <StartTasks+0x11c>)
   3220e:	4844      	ldr	r0, [pc, #272]	; (32320 <StartTasks+0x120>)
   32210:	2140      	movs	r1, #64	; 0x40
   32212:	4c44      	ldr	r4, [pc, #272]	; (32324 <StartTasks+0x124>)
   32214:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32216:	4b42      	ldr	r3, [pc, #264]	; (32320 <StartTasks+0x120>)
   32218:	0018      	movs	r0, r3
   3221a:	4b43      	ldr	r3, [pc, #268]	; (32328 <StartTasks+0x128>)
   3221c:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   3221e:	23c8      	movs	r3, #200	; 0xc8
   32220:	005a      	lsls	r2, r3, #1
   32222:	4942      	ldr	r1, [pc, #264]	; (3232c <StartTasks+0x12c>)
   32224:	4842      	ldr	r0, [pc, #264]	; (32330 <StartTasks+0x130>)
   32226:	4b43      	ldr	r3, [pc, #268]	; (32334 <StartTasks+0x134>)
   32228:	9301      	str	r3, [sp, #4]
   3222a:	2304      	movs	r3, #4
   3222c:	9300      	str	r3, [sp, #0]
   3222e:	2300      	movs	r3, #0
   32230:	4c41      	ldr	r4, [pc, #260]	; (32338 <StartTasks+0x138>)
   32232:	47a0      	blx	r4
   32234:	0003      	movs	r3, r0
   32236:	2b01      	cmp	r3, #1
   32238:	d003      	beq.n	32242 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   3223a:	4b40      	ldr	r3, [pc, #256]	; (3233c <StartTasks+0x13c>)
   3223c:	0018      	movs	r0, r3
   3223e:	4b3a      	ldr	r3, [pc, #232]	; (32328 <StartTasks+0x128>)
   32240:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   32242:	4b35      	ldr	r3, [pc, #212]	; (32318 <StartTasks+0x118>)
   32244:	4798      	blx	r3
   32246:	0003      	movs	r3, r0
   32248:	4a3d      	ldr	r2, [pc, #244]	; (32340 <StartTasks+0x140>)
   3224a:	4835      	ldr	r0, [pc, #212]	; (32320 <StartTasks+0x120>)
   3224c:	2140      	movs	r1, #64	; 0x40
   3224e:	4c35      	ldr	r4, [pc, #212]	; (32324 <StartTasks+0x124>)
   32250:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32252:	4b33      	ldr	r3, [pc, #204]	; (32320 <StartTasks+0x120>)
   32254:	0018      	movs	r0, r3
   32256:	4b34      	ldr	r3, [pc, #208]	; (32328 <StartTasks+0x128>)
   32258:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   3225a:	23fa      	movs	r3, #250	; 0xfa
   3225c:	009a      	lsls	r2, r3, #2
   3225e:	4939      	ldr	r1, [pc, #228]	; (32344 <StartTasks+0x144>)
   32260:	4839      	ldr	r0, [pc, #228]	; (32348 <StartTasks+0x148>)
   32262:	4b3a      	ldr	r3, [pc, #232]	; (3234c <StartTasks+0x14c>)
   32264:	9301      	str	r3, [sp, #4]
   32266:	2303      	movs	r3, #3
   32268:	9300      	str	r3, [sp, #0]
   3226a:	2300      	movs	r3, #0
   3226c:	4c32      	ldr	r4, [pc, #200]	; (32338 <StartTasks+0x138>)
   3226e:	47a0      	blx	r4
   32270:	0003      	movs	r3, r0
   32272:	2b01      	cmp	r3, #1
   32274:	d003      	beq.n	3227e <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   32276:	4b36      	ldr	r3, [pc, #216]	; (32350 <StartTasks+0x150>)
   32278:	0018      	movs	r0, r3
   3227a:	4b2b      	ldr	r3, [pc, #172]	; (32328 <StartTasks+0x128>)
   3227c:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   3227e:	4b26      	ldr	r3, [pc, #152]	; (32318 <StartTasks+0x118>)
   32280:	4798      	blx	r3
   32282:	0003      	movs	r3, r0
   32284:	4a33      	ldr	r2, [pc, #204]	; (32354 <StartTasks+0x154>)
   32286:	4826      	ldr	r0, [pc, #152]	; (32320 <StartTasks+0x120>)
   32288:	2140      	movs	r1, #64	; 0x40
   3228a:	4c26      	ldr	r4, [pc, #152]	; (32324 <StartTasks+0x124>)
   3228c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3228e:	4b24      	ldr	r3, [pc, #144]	; (32320 <StartTasks+0x120>)
   32290:	0018      	movs	r0, r3
   32292:	4b25      	ldr	r3, [pc, #148]	; (32328 <StartTasks+0x128>)
   32294:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   32296:	23c8      	movs	r3, #200	; 0xc8
   32298:	005a      	lsls	r2, r3, #1
   3229a:	492f      	ldr	r1, [pc, #188]	; (32358 <StartTasks+0x158>)
   3229c:	482f      	ldr	r0, [pc, #188]	; (3235c <StartTasks+0x15c>)
   3229e:	4b30      	ldr	r3, [pc, #192]	; (32360 <StartTasks+0x160>)
   322a0:	9301      	str	r3, [sp, #4]
   322a2:	2304      	movs	r3, #4
   322a4:	9300      	str	r3, [sp, #0]
   322a6:	2300      	movs	r3, #0
   322a8:	4c23      	ldr	r4, [pc, #140]	; (32338 <StartTasks+0x138>)
   322aa:	47a0      	blx	r4
   322ac:	0003      	movs	r3, r0
   322ae:	2b01      	cmp	r3, #1
   322b0:	d003      	beq.n	322ba <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   322b2:	4b2c      	ldr	r3, [pc, #176]	; (32364 <StartTasks+0x164>)
   322b4:	0018      	movs	r0, r3
   322b6:	4b1c      	ldr	r3, [pc, #112]	; (32328 <StartTasks+0x128>)
   322b8:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   322ba:	4b17      	ldr	r3, [pc, #92]	; (32318 <StartTasks+0x118>)
   322bc:	4798      	blx	r3
   322be:	0003      	movs	r3, r0
   322c0:	4a29      	ldr	r2, [pc, #164]	; (32368 <StartTasks+0x168>)
   322c2:	4817      	ldr	r0, [pc, #92]	; (32320 <StartTasks+0x120>)
   322c4:	2140      	movs	r1, #64	; 0x40
   322c6:	4c17      	ldr	r4, [pc, #92]	; (32324 <StartTasks+0x124>)
   322c8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   322ca:	4b15      	ldr	r3, [pc, #84]	; (32320 <StartTasks+0x120>)
   322cc:	0018      	movs	r0, r3
   322ce:	4b16      	ldr	r3, [pc, #88]	; (32328 <StartTasks+0x128>)
   322d0:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   322d2:	2380      	movs	r3, #128	; 0x80
   322d4:	005a      	lsls	r2, r3, #1
   322d6:	4925      	ldr	r1, [pc, #148]	; (3236c <StartTasks+0x16c>)
   322d8:	4825      	ldr	r0, [pc, #148]	; (32370 <StartTasks+0x170>)
   322da:	4b26      	ldr	r3, [pc, #152]	; (32374 <StartTasks+0x174>)
   322dc:	9301      	str	r3, [sp, #4]
   322de:	2304      	movs	r3, #4
   322e0:	9300      	str	r3, [sp, #0]
   322e2:	2300      	movs	r3, #0
   322e4:	4c14      	ldr	r4, [pc, #80]	; (32338 <StartTasks+0x138>)
   322e6:	47a0      	blx	r4
   322e8:	0003      	movs	r3, r0
   322ea:	2b01      	cmp	r3, #1
   322ec:	d003      	beq.n	322f6 <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   322ee:	4b22      	ldr	r3, [pc, #136]	; (32378 <StartTasks+0x178>)
   322f0:	0018      	movs	r0, r3
   322f2:	4b0d      	ldr	r3, [pc, #52]	; (32328 <StartTasks+0x128>)
   322f4:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   322f6:	4b08      	ldr	r3, [pc, #32]	; (32318 <StartTasks+0x118>)
   322f8:	4798      	blx	r3
   322fa:	0003      	movs	r3, r0
   322fc:	4a1f      	ldr	r2, [pc, #124]	; (3237c <StartTasks+0x17c>)
   322fe:	4808      	ldr	r0, [pc, #32]	; (32320 <StartTasks+0x120>)
   32300:	2140      	movs	r1, #64	; 0x40
   32302:	4c08      	ldr	r4, [pc, #32]	; (32324 <StartTasks+0x124>)
   32304:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32306:	4b06      	ldr	r3, [pc, #24]	; (32320 <StartTasks+0x120>)
   32308:	0018      	movs	r0, r3
   3230a:	4b07      	ldr	r3, [pc, #28]	; (32328 <StartTasks+0x128>)
   3230c:	4798      	blx	r3
}
   3230e:	46c0      	nop			; (mov r8, r8)
   32310:	46bd      	mov	sp, r7
   32312:	b001      	add	sp, #4
   32314:	bd90      	pop	{r4, r7, pc}
   32316:	46c0      	nop			; (mov r8, r8)
   32318:	0001a121 	.word	0x0001a121
   3231c:	00039704 	.word	0x00039704
   32320:	200057cc 	.word	0x200057cc
   32324:	000345e5 	.word	0x000345e5
   32328:	0001db55 	.word	0x0001db55
   3232c:	00039728 	.word	0x00039728
   32330:	00012e71 	.word	0x00012e71
   32334:	200042fc 	.word	0x200042fc
   32338:	0001bb65 	.word	0x0001bb65
   3233c:	00039734 	.word	0x00039734
   32340:	00039760 	.word	0x00039760
   32344:	00039780 	.word	0x00039780
   32348:	00016f09 	.word	0x00016f09
   3234c:	20004304 	.word	0x20004304
   32350:	0003978c 	.word	0x0003978c
   32354:	000397b8 	.word	0x000397b8
   32358:	000397d8 	.word	0x000397d8
   3235c:	000156f1 	.word	0x000156f1
   32360:	20004308 	.word	0x20004308
   32364:	000397e0 	.word	0x000397e0
   32368:	0003980c 	.word	0x0003980c
   3236c:	00039830 	.word	0x00039830
   32370:	000137fd 	.word	0x000137fd
   32374:	2000430c 	.word	0x2000430c
   32378:	00039840 	.word	0x00039840
   3237c:	00039870 	.word	0x00039870

00032380 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   32380:	b580      	push	{r7, lr}
   32382:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   32384:	4b02      	ldr	r3, [pc, #8]	; (32390 <vApplicationMallocFailedHook+0x10>)
   32386:	0018      	movs	r0, r3
   32388:	4b02      	ldr	r3, [pc, #8]	; (32394 <vApplicationMallocFailedHook+0x14>)
   3238a:	4798      	blx	r3
    while (1)
   3238c:	e7fe      	b.n	3238c <vApplicationMallocFailedHook+0xc>
   3238e:	46c0      	nop			; (mov r8, r8)
   32390:	00039898 	.word	0x00039898
   32394:	0001db55 	.word	0x0001db55

00032398 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   32398:	b580      	push	{r7, lr}
   3239a:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   3239c:	4b02      	ldr	r3, [pc, #8]	; (323a8 <vApplicationStackOverflowHook+0x10>)
   3239e:	0018      	movs	r0, r3
   323a0:	4b02      	ldr	r3, [pc, #8]	; (323ac <vApplicationStackOverflowHook+0x14>)
   323a2:	4798      	blx	r3
    while (1)
   323a4:	e7fe      	b.n	323a4 <vApplicationStackOverflowHook+0xc>
   323a6:	46c0      	nop			; (mov r8, r8)
   323a8:	000398c4 	.word	0x000398c4
   323ac:	0001db55 	.word	0x0001db55

000323b0 <__udivsi3>:
   323b0:	2200      	movs	r2, #0
   323b2:	0843      	lsrs	r3, r0, #1
   323b4:	428b      	cmp	r3, r1
   323b6:	d374      	bcc.n	324a2 <__udivsi3+0xf2>
   323b8:	0903      	lsrs	r3, r0, #4
   323ba:	428b      	cmp	r3, r1
   323bc:	d35f      	bcc.n	3247e <__udivsi3+0xce>
   323be:	0a03      	lsrs	r3, r0, #8
   323c0:	428b      	cmp	r3, r1
   323c2:	d344      	bcc.n	3244e <__udivsi3+0x9e>
   323c4:	0b03      	lsrs	r3, r0, #12
   323c6:	428b      	cmp	r3, r1
   323c8:	d328      	bcc.n	3241c <__udivsi3+0x6c>
   323ca:	0c03      	lsrs	r3, r0, #16
   323cc:	428b      	cmp	r3, r1
   323ce:	d30d      	bcc.n	323ec <__udivsi3+0x3c>
   323d0:	22ff      	movs	r2, #255	; 0xff
   323d2:	0209      	lsls	r1, r1, #8
   323d4:	ba12      	rev	r2, r2
   323d6:	0c03      	lsrs	r3, r0, #16
   323d8:	428b      	cmp	r3, r1
   323da:	d302      	bcc.n	323e2 <__udivsi3+0x32>
   323dc:	1212      	asrs	r2, r2, #8
   323de:	0209      	lsls	r1, r1, #8
   323e0:	d065      	beq.n	324ae <__udivsi3+0xfe>
   323e2:	0b03      	lsrs	r3, r0, #12
   323e4:	428b      	cmp	r3, r1
   323e6:	d319      	bcc.n	3241c <__udivsi3+0x6c>
   323e8:	e000      	b.n	323ec <__udivsi3+0x3c>
   323ea:	0a09      	lsrs	r1, r1, #8
   323ec:	0bc3      	lsrs	r3, r0, #15
   323ee:	428b      	cmp	r3, r1
   323f0:	d301      	bcc.n	323f6 <__udivsi3+0x46>
   323f2:	03cb      	lsls	r3, r1, #15
   323f4:	1ac0      	subs	r0, r0, r3
   323f6:	4152      	adcs	r2, r2
   323f8:	0b83      	lsrs	r3, r0, #14
   323fa:	428b      	cmp	r3, r1
   323fc:	d301      	bcc.n	32402 <__udivsi3+0x52>
   323fe:	038b      	lsls	r3, r1, #14
   32400:	1ac0      	subs	r0, r0, r3
   32402:	4152      	adcs	r2, r2
   32404:	0b43      	lsrs	r3, r0, #13
   32406:	428b      	cmp	r3, r1
   32408:	d301      	bcc.n	3240e <__udivsi3+0x5e>
   3240a:	034b      	lsls	r3, r1, #13
   3240c:	1ac0      	subs	r0, r0, r3
   3240e:	4152      	adcs	r2, r2
   32410:	0b03      	lsrs	r3, r0, #12
   32412:	428b      	cmp	r3, r1
   32414:	d301      	bcc.n	3241a <__udivsi3+0x6a>
   32416:	030b      	lsls	r3, r1, #12
   32418:	1ac0      	subs	r0, r0, r3
   3241a:	4152      	adcs	r2, r2
   3241c:	0ac3      	lsrs	r3, r0, #11
   3241e:	428b      	cmp	r3, r1
   32420:	d301      	bcc.n	32426 <__udivsi3+0x76>
   32422:	02cb      	lsls	r3, r1, #11
   32424:	1ac0      	subs	r0, r0, r3
   32426:	4152      	adcs	r2, r2
   32428:	0a83      	lsrs	r3, r0, #10
   3242a:	428b      	cmp	r3, r1
   3242c:	d301      	bcc.n	32432 <__udivsi3+0x82>
   3242e:	028b      	lsls	r3, r1, #10
   32430:	1ac0      	subs	r0, r0, r3
   32432:	4152      	adcs	r2, r2
   32434:	0a43      	lsrs	r3, r0, #9
   32436:	428b      	cmp	r3, r1
   32438:	d301      	bcc.n	3243e <__udivsi3+0x8e>
   3243a:	024b      	lsls	r3, r1, #9
   3243c:	1ac0      	subs	r0, r0, r3
   3243e:	4152      	adcs	r2, r2
   32440:	0a03      	lsrs	r3, r0, #8
   32442:	428b      	cmp	r3, r1
   32444:	d301      	bcc.n	3244a <__udivsi3+0x9a>
   32446:	020b      	lsls	r3, r1, #8
   32448:	1ac0      	subs	r0, r0, r3
   3244a:	4152      	adcs	r2, r2
   3244c:	d2cd      	bcs.n	323ea <__udivsi3+0x3a>
   3244e:	09c3      	lsrs	r3, r0, #7
   32450:	428b      	cmp	r3, r1
   32452:	d301      	bcc.n	32458 <__udivsi3+0xa8>
   32454:	01cb      	lsls	r3, r1, #7
   32456:	1ac0      	subs	r0, r0, r3
   32458:	4152      	adcs	r2, r2
   3245a:	0983      	lsrs	r3, r0, #6
   3245c:	428b      	cmp	r3, r1
   3245e:	d301      	bcc.n	32464 <__udivsi3+0xb4>
   32460:	018b      	lsls	r3, r1, #6
   32462:	1ac0      	subs	r0, r0, r3
   32464:	4152      	adcs	r2, r2
   32466:	0943      	lsrs	r3, r0, #5
   32468:	428b      	cmp	r3, r1
   3246a:	d301      	bcc.n	32470 <__udivsi3+0xc0>
   3246c:	014b      	lsls	r3, r1, #5
   3246e:	1ac0      	subs	r0, r0, r3
   32470:	4152      	adcs	r2, r2
   32472:	0903      	lsrs	r3, r0, #4
   32474:	428b      	cmp	r3, r1
   32476:	d301      	bcc.n	3247c <__udivsi3+0xcc>
   32478:	010b      	lsls	r3, r1, #4
   3247a:	1ac0      	subs	r0, r0, r3
   3247c:	4152      	adcs	r2, r2
   3247e:	08c3      	lsrs	r3, r0, #3
   32480:	428b      	cmp	r3, r1
   32482:	d301      	bcc.n	32488 <__udivsi3+0xd8>
   32484:	00cb      	lsls	r3, r1, #3
   32486:	1ac0      	subs	r0, r0, r3
   32488:	4152      	adcs	r2, r2
   3248a:	0883      	lsrs	r3, r0, #2
   3248c:	428b      	cmp	r3, r1
   3248e:	d301      	bcc.n	32494 <__udivsi3+0xe4>
   32490:	008b      	lsls	r3, r1, #2
   32492:	1ac0      	subs	r0, r0, r3
   32494:	4152      	adcs	r2, r2
   32496:	0843      	lsrs	r3, r0, #1
   32498:	428b      	cmp	r3, r1
   3249a:	d301      	bcc.n	324a0 <__udivsi3+0xf0>
   3249c:	004b      	lsls	r3, r1, #1
   3249e:	1ac0      	subs	r0, r0, r3
   324a0:	4152      	adcs	r2, r2
   324a2:	1a41      	subs	r1, r0, r1
   324a4:	d200      	bcs.n	324a8 <__udivsi3+0xf8>
   324a6:	4601      	mov	r1, r0
   324a8:	4152      	adcs	r2, r2
   324aa:	4610      	mov	r0, r2
   324ac:	4770      	bx	lr
   324ae:	e7ff      	b.n	324b0 <__udivsi3+0x100>
   324b0:	b501      	push	{r0, lr}
   324b2:	2000      	movs	r0, #0
   324b4:	f000 f8f0 	bl	32698 <__aeabi_idiv0>
   324b8:	bd02      	pop	{r1, pc}
   324ba:	46c0      	nop			; (mov r8, r8)

000324bc <__aeabi_uidivmod>:
   324bc:	2900      	cmp	r1, #0
   324be:	d0f7      	beq.n	324b0 <__udivsi3+0x100>
   324c0:	e776      	b.n	323b0 <__udivsi3>
   324c2:	4770      	bx	lr

000324c4 <__divsi3>:
   324c4:	4603      	mov	r3, r0
   324c6:	430b      	orrs	r3, r1
   324c8:	d47f      	bmi.n	325ca <__divsi3+0x106>
   324ca:	2200      	movs	r2, #0
   324cc:	0843      	lsrs	r3, r0, #1
   324ce:	428b      	cmp	r3, r1
   324d0:	d374      	bcc.n	325bc <__divsi3+0xf8>
   324d2:	0903      	lsrs	r3, r0, #4
   324d4:	428b      	cmp	r3, r1
   324d6:	d35f      	bcc.n	32598 <__divsi3+0xd4>
   324d8:	0a03      	lsrs	r3, r0, #8
   324da:	428b      	cmp	r3, r1
   324dc:	d344      	bcc.n	32568 <__divsi3+0xa4>
   324de:	0b03      	lsrs	r3, r0, #12
   324e0:	428b      	cmp	r3, r1
   324e2:	d328      	bcc.n	32536 <__divsi3+0x72>
   324e4:	0c03      	lsrs	r3, r0, #16
   324e6:	428b      	cmp	r3, r1
   324e8:	d30d      	bcc.n	32506 <__divsi3+0x42>
   324ea:	22ff      	movs	r2, #255	; 0xff
   324ec:	0209      	lsls	r1, r1, #8
   324ee:	ba12      	rev	r2, r2
   324f0:	0c03      	lsrs	r3, r0, #16
   324f2:	428b      	cmp	r3, r1
   324f4:	d302      	bcc.n	324fc <__divsi3+0x38>
   324f6:	1212      	asrs	r2, r2, #8
   324f8:	0209      	lsls	r1, r1, #8
   324fa:	d065      	beq.n	325c8 <__divsi3+0x104>
   324fc:	0b03      	lsrs	r3, r0, #12
   324fe:	428b      	cmp	r3, r1
   32500:	d319      	bcc.n	32536 <__divsi3+0x72>
   32502:	e000      	b.n	32506 <__divsi3+0x42>
   32504:	0a09      	lsrs	r1, r1, #8
   32506:	0bc3      	lsrs	r3, r0, #15
   32508:	428b      	cmp	r3, r1
   3250a:	d301      	bcc.n	32510 <__divsi3+0x4c>
   3250c:	03cb      	lsls	r3, r1, #15
   3250e:	1ac0      	subs	r0, r0, r3
   32510:	4152      	adcs	r2, r2
   32512:	0b83      	lsrs	r3, r0, #14
   32514:	428b      	cmp	r3, r1
   32516:	d301      	bcc.n	3251c <__divsi3+0x58>
   32518:	038b      	lsls	r3, r1, #14
   3251a:	1ac0      	subs	r0, r0, r3
   3251c:	4152      	adcs	r2, r2
   3251e:	0b43      	lsrs	r3, r0, #13
   32520:	428b      	cmp	r3, r1
   32522:	d301      	bcc.n	32528 <__divsi3+0x64>
   32524:	034b      	lsls	r3, r1, #13
   32526:	1ac0      	subs	r0, r0, r3
   32528:	4152      	adcs	r2, r2
   3252a:	0b03      	lsrs	r3, r0, #12
   3252c:	428b      	cmp	r3, r1
   3252e:	d301      	bcc.n	32534 <__divsi3+0x70>
   32530:	030b      	lsls	r3, r1, #12
   32532:	1ac0      	subs	r0, r0, r3
   32534:	4152      	adcs	r2, r2
   32536:	0ac3      	lsrs	r3, r0, #11
   32538:	428b      	cmp	r3, r1
   3253a:	d301      	bcc.n	32540 <__divsi3+0x7c>
   3253c:	02cb      	lsls	r3, r1, #11
   3253e:	1ac0      	subs	r0, r0, r3
   32540:	4152      	adcs	r2, r2
   32542:	0a83      	lsrs	r3, r0, #10
   32544:	428b      	cmp	r3, r1
   32546:	d301      	bcc.n	3254c <__divsi3+0x88>
   32548:	028b      	lsls	r3, r1, #10
   3254a:	1ac0      	subs	r0, r0, r3
   3254c:	4152      	adcs	r2, r2
   3254e:	0a43      	lsrs	r3, r0, #9
   32550:	428b      	cmp	r3, r1
   32552:	d301      	bcc.n	32558 <__divsi3+0x94>
   32554:	024b      	lsls	r3, r1, #9
   32556:	1ac0      	subs	r0, r0, r3
   32558:	4152      	adcs	r2, r2
   3255a:	0a03      	lsrs	r3, r0, #8
   3255c:	428b      	cmp	r3, r1
   3255e:	d301      	bcc.n	32564 <__divsi3+0xa0>
   32560:	020b      	lsls	r3, r1, #8
   32562:	1ac0      	subs	r0, r0, r3
   32564:	4152      	adcs	r2, r2
   32566:	d2cd      	bcs.n	32504 <__divsi3+0x40>
   32568:	09c3      	lsrs	r3, r0, #7
   3256a:	428b      	cmp	r3, r1
   3256c:	d301      	bcc.n	32572 <__divsi3+0xae>
   3256e:	01cb      	lsls	r3, r1, #7
   32570:	1ac0      	subs	r0, r0, r3
   32572:	4152      	adcs	r2, r2
   32574:	0983      	lsrs	r3, r0, #6
   32576:	428b      	cmp	r3, r1
   32578:	d301      	bcc.n	3257e <__divsi3+0xba>
   3257a:	018b      	lsls	r3, r1, #6
   3257c:	1ac0      	subs	r0, r0, r3
   3257e:	4152      	adcs	r2, r2
   32580:	0943      	lsrs	r3, r0, #5
   32582:	428b      	cmp	r3, r1
   32584:	d301      	bcc.n	3258a <__divsi3+0xc6>
   32586:	014b      	lsls	r3, r1, #5
   32588:	1ac0      	subs	r0, r0, r3
   3258a:	4152      	adcs	r2, r2
   3258c:	0903      	lsrs	r3, r0, #4
   3258e:	428b      	cmp	r3, r1
   32590:	d301      	bcc.n	32596 <__divsi3+0xd2>
   32592:	010b      	lsls	r3, r1, #4
   32594:	1ac0      	subs	r0, r0, r3
   32596:	4152      	adcs	r2, r2
   32598:	08c3      	lsrs	r3, r0, #3
   3259a:	428b      	cmp	r3, r1
   3259c:	d301      	bcc.n	325a2 <__divsi3+0xde>
   3259e:	00cb      	lsls	r3, r1, #3
   325a0:	1ac0      	subs	r0, r0, r3
   325a2:	4152      	adcs	r2, r2
   325a4:	0883      	lsrs	r3, r0, #2
   325a6:	428b      	cmp	r3, r1
   325a8:	d301      	bcc.n	325ae <__divsi3+0xea>
   325aa:	008b      	lsls	r3, r1, #2
   325ac:	1ac0      	subs	r0, r0, r3
   325ae:	4152      	adcs	r2, r2
   325b0:	0843      	lsrs	r3, r0, #1
   325b2:	428b      	cmp	r3, r1
   325b4:	d301      	bcc.n	325ba <__divsi3+0xf6>
   325b6:	004b      	lsls	r3, r1, #1
   325b8:	1ac0      	subs	r0, r0, r3
   325ba:	4152      	adcs	r2, r2
   325bc:	1a41      	subs	r1, r0, r1
   325be:	d200      	bcs.n	325c2 <__divsi3+0xfe>
   325c0:	4601      	mov	r1, r0
   325c2:	4152      	adcs	r2, r2
   325c4:	4610      	mov	r0, r2
   325c6:	4770      	bx	lr
   325c8:	e05d      	b.n	32686 <__divsi3+0x1c2>
   325ca:	0fca      	lsrs	r2, r1, #31
   325cc:	d000      	beq.n	325d0 <__divsi3+0x10c>
   325ce:	4249      	negs	r1, r1
   325d0:	1003      	asrs	r3, r0, #32
   325d2:	d300      	bcc.n	325d6 <__divsi3+0x112>
   325d4:	4240      	negs	r0, r0
   325d6:	4053      	eors	r3, r2
   325d8:	2200      	movs	r2, #0
   325da:	469c      	mov	ip, r3
   325dc:	0903      	lsrs	r3, r0, #4
   325de:	428b      	cmp	r3, r1
   325e0:	d32d      	bcc.n	3263e <__divsi3+0x17a>
   325e2:	0a03      	lsrs	r3, r0, #8
   325e4:	428b      	cmp	r3, r1
   325e6:	d312      	bcc.n	3260e <__divsi3+0x14a>
   325e8:	22fc      	movs	r2, #252	; 0xfc
   325ea:	0189      	lsls	r1, r1, #6
   325ec:	ba12      	rev	r2, r2
   325ee:	0a03      	lsrs	r3, r0, #8
   325f0:	428b      	cmp	r3, r1
   325f2:	d30c      	bcc.n	3260e <__divsi3+0x14a>
   325f4:	0189      	lsls	r1, r1, #6
   325f6:	1192      	asrs	r2, r2, #6
   325f8:	428b      	cmp	r3, r1
   325fa:	d308      	bcc.n	3260e <__divsi3+0x14a>
   325fc:	0189      	lsls	r1, r1, #6
   325fe:	1192      	asrs	r2, r2, #6
   32600:	428b      	cmp	r3, r1
   32602:	d304      	bcc.n	3260e <__divsi3+0x14a>
   32604:	0189      	lsls	r1, r1, #6
   32606:	d03a      	beq.n	3267e <__divsi3+0x1ba>
   32608:	1192      	asrs	r2, r2, #6
   3260a:	e000      	b.n	3260e <__divsi3+0x14a>
   3260c:	0989      	lsrs	r1, r1, #6
   3260e:	09c3      	lsrs	r3, r0, #7
   32610:	428b      	cmp	r3, r1
   32612:	d301      	bcc.n	32618 <__divsi3+0x154>
   32614:	01cb      	lsls	r3, r1, #7
   32616:	1ac0      	subs	r0, r0, r3
   32618:	4152      	adcs	r2, r2
   3261a:	0983      	lsrs	r3, r0, #6
   3261c:	428b      	cmp	r3, r1
   3261e:	d301      	bcc.n	32624 <__divsi3+0x160>
   32620:	018b      	lsls	r3, r1, #6
   32622:	1ac0      	subs	r0, r0, r3
   32624:	4152      	adcs	r2, r2
   32626:	0943      	lsrs	r3, r0, #5
   32628:	428b      	cmp	r3, r1
   3262a:	d301      	bcc.n	32630 <__divsi3+0x16c>
   3262c:	014b      	lsls	r3, r1, #5
   3262e:	1ac0      	subs	r0, r0, r3
   32630:	4152      	adcs	r2, r2
   32632:	0903      	lsrs	r3, r0, #4
   32634:	428b      	cmp	r3, r1
   32636:	d301      	bcc.n	3263c <__divsi3+0x178>
   32638:	010b      	lsls	r3, r1, #4
   3263a:	1ac0      	subs	r0, r0, r3
   3263c:	4152      	adcs	r2, r2
   3263e:	08c3      	lsrs	r3, r0, #3
   32640:	428b      	cmp	r3, r1
   32642:	d301      	bcc.n	32648 <__divsi3+0x184>
   32644:	00cb      	lsls	r3, r1, #3
   32646:	1ac0      	subs	r0, r0, r3
   32648:	4152      	adcs	r2, r2
   3264a:	0883      	lsrs	r3, r0, #2
   3264c:	428b      	cmp	r3, r1
   3264e:	d301      	bcc.n	32654 <__divsi3+0x190>
   32650:	008b      	lsls	r3, r1, #2
   32652:	1ac0      	subs	r0, r0, r3
   32654:	4152      	adcs	r2, r2
   32656:	d2d9      	bcs.n	3260c <__divsi3+0x148>
   32658:	0843      	lsrs	r3, r0, #1
   3265a:	428b      	cmp	r3, r1
   3265c:	d301      	bcc.n	32662 <__divsi3+0x19e>
   3265e:	004b      	lsls	r3, r1, #1
   32660:	1ac0      	subs	r0, r0, r3
   32662:	4152      	adcs	r2, r2
   32664:	1a41      	subs	r1, r0, r1
   32666:	d200      	bcs.n	3266a <__divsi3+0x1a6>
   32668:	4601      	mov	r1, r0
   3266a:	4663      	mov	r3, ip
   3266c:	4152      	adcs	r2, r2
   3266e:	105b      	asrs	r3, r3, #1
   32670:	4610      	mov	r0, r2
   32672:	d301      	bcc.n	32678 <__divsi3+0x1b4>
   32674:	4240      	negs	r0, r0
   32676:	2b00      	cmp	r3, #0
   32678:	d500      	bpl.n	3267c <__divsi3+0x1b8>
   3267a:	4249      	negs	r1, r1
   3267c:	4770      	bx	lr
   3267e:	4663      	mov	r3, ip
   32680:	105b      	asrs	r3, r3, #1
   32682:	d300      	bcc.n	32686 <__divsi3+0x1c2>
   32684:	4240      	negs	r0, r0
   32686:	b501      	push	{r0, lr}
   32688:	2000      	movs	r0, #0
   3268a:	f000 f805 	bl	32698 <__aeabi_idiv0>
   3268e:	bd02      	pop	{r1, pc}

00032690 <__aeabi_idivmod>:
   32690:	2900      	cmp	r1, #0
   32692:	d0f8      	beq.n	32686 <__divsi3+0x1c2>
   32694:	e716      	b.n	324c4 <__divsi3>
   32696:	4770      	bx	lr

00032698 <__aeabi_idiv0>:
   32698:	4770      	bx	lr
   3269a:	46c0      	nop			; (mov r8, r8)

0003269c <__aeabi_lmul>:
   3269c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3269e:	46ce      	mov	lr, r9
   326a0:	4647      	mov	r7, r8
   326a2:	0415      	lsls	r5, r2, #16
   326a4:	0c2d      	lsrs	r5, r5, #16
   326a6:	002e      	movs	r6, r5
   326a8:	b580      	push	{r7, lr}
   326aa:	0407      	lsls	r7, r0, #16
   326ac:	0c14      	lsrs	r4, r2, #16
   326ae:	0c3f      	lsrs	r7, r7, #16
   326b0:	4699      	mov	r9, r3
   326b2:	0c03      	lsrs	r3, r0, #16
   326b4:	437e      	muls	r6, r7
   326b6:	435d      	muls	r5, r3
   326b8:	4367      	muls	r7, r4
   326ba:	4363      	muls	r3, r4
   326bc:	197f      	adds	r7, r7, r5
   326be:	0c34      	lsrs	r4, r6, #16
   326c0:	19e4      	adds	r4, r4, r7
   326c2:	469c      	mov	ip, r3
   326c4:	42a5      	cmp	r5, r4
   326c6:	d903      	bls.n	326d0 <__aeabi_lmul+0x34>
   326c8:	2380      	movs	r3, #128	; 0x80
   326ca:	025b      	lsls	r3, r3, #9
   326cc:	4698      	mov	r8, r3
   326ce:	44c4      	add	ip, r8
   326d0:	464b      	mov	r3, r9
   326d2:	4351      	muls	r1, r2
   326d4:	4343      	muls	r3, r0
   326d6:	0436      	lsls	r6, r6, #16
   326d8:	0c36      	lsrs	r6, r6, #16
   326da:	0c25      	lsrs	r5, r4, #16
   326dc:	0424      	lsls	r4, r4, #16
   326de:	4465      	add	r5, ip
   326e0:	19a4      	adds	r4, r4, r6
   326e2:	1859      	adds	r1, r3, r1
   326e4:	1949      	adds	r1, r1, r5
   326e6:	0020      	movs	r0, r4
   326e8:	bc0c      	pop	{r2, r3}
   326ea:	4690      	mov	r8, r2
   326ec:	4699      	mov	r9, r3
   326ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000326f0 <__aeabi_fmul>:
   326f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   326f2:	4657      	mov	r7, sl
   326f4:	464e      	mov	r6, r9
   326f6:	4645      	mov	r5, r8
   326f8:	46de      	mov	lr, fp
   326fa:	b5e0      	push	{r5, r6, r7, lr}
   326fc:	0247      	lsls	r7, r0, #9
   326fe:	0046      	lsls	r6, r0, #1
   32700:	4688      	mov	r8, r1
   32702:	0a7f      	lsrs	r7, r7, #9
   32704:	0e36      	lsrs	r6, r6, #24
   32706:	0fc4      	lsrs	r4, r0, #31
   32708:	2e00      	cmp	r6, #0
   3270a:	d047      	beq.n	3279c <__aeabi_fmul+0xac>
   3270c:	2eff      	cmp	r6, #255	; 0xff
   3270e:	d024      	beq.n	3275a <__aeabi_fmul+0x6a>
   32710:	00fb      	lsls	r3, r7, #3
   32712:	2780      	movs	r7, #128	; 0x80
   32714:	04ff      	lsls	r7, r7, #19
   32716:	431f      	orrs	r7, r3
   32718:	2300      	movs	r3, #0
   3271a:	4699      	mov	r9, r3
   3271c:	469a      	mov	sl, r3
   3271e:	3e7f      	subs	r6, #127	; 0x7f
   32720:	4643      	mov	r3, r8
   32722:	025d      	lsls	r5, r3, #9
   32724:	0058      	lsls	r0, r3, #1
   32726:	0fdb      	lsrs	r3, r3, #31
   32728:	0a6d      	lsrs	r5, r5, #9
   3272a:	0e00      	lsrs	r0, r0, #24
   3272c:	4698      	mov	r8, r3
   3272e:	d043      	beq.n	327b8 <__aeabi_fmul+0xc8>
   32730:	28ff      	cmp	r0, #255	; 0xff
   32732:	d03b      	beq.n	327ac <__aeabi_fmul+0xbc>
   32734:	00eb      	lsls	r3, r5, #3
   32736:	2580      	movs	r5, #128	; 0x80
   32738:	2200      	movs	r2, #0
   3273a:	04ed      	lsls	r5, r5, #19
   3273c:	431d      	orrs	r5, r3
   3273e:	387f      	subs	r0, #127	; 0x7f
   32740:	1836      	adds	r6, r6, r0
   32742:	1c73      	adds	r3, r6, #1
   32744:	4641      	mov	r1, r8
   32746:	469b      	mov	fp, r3
   32748:	464b      	mov	r3, r9
   3274a:	4061      	eors	r1, r4
   3274c:	4313      	orrs	r3, r2
   3274e:	2b0f      	cmp	r3, #15
   32750:	d864      	bhi.n	3281c <__aeabi_fmul+0x12c>
   32752:	4875      	ldr	r0, [pc, #468]	; (32928 <__aeabi_fmul+0x238>)
   32754:	009b      	lsls	r3, r3, #2
   32756:	58c3      	ldr	r3, [r0, r3]
   32758:	469f      	mov	pc, r3
   3275a:	2f00      	cmp	r7, #0
   3275c:	d142      	bne.n	327e4 <__aeabi_fmul+0xf4>
   3275e:	2308      	movs	r3, #8
   32760:	4699      	mov	r9, r3
   32762:	3b06      	subs	r3, #6
   32764:	26ff      	movs	r6, #255	; 0xff
   32766:	469a      	mov	sl, r3
   32768:	e7da      	b.n	32720 <__aeabi_fmul+0x30>
   3276a:	4641      	mov	r1, r8
   3276c:	2a02      	cmp	r2, #2
   3276e:	d028      	beq.n	327c2 <__aeabi_fmul+0xd2>
   32770:	2a03      	cmp	r2, #3
   32772:	d100      	bne.n	32776 <__aeabi_fmul+0x86>
   32774:	e0ce      	b.n	32914 <__aeabi_fmul+0x224>
   32776:	2a01      	cmp	r2, #1
   32778:	d000      	beq.n	3277c <__aeabi_fmul+0x8c>
   3277a:	e0ac      	b.n	328d6 <__aeabi_fmul+0x1e6>
   3277c:	4011      	ands	r1, r2
   3277e:	2000      	movs	r0, #0
   32780:	2200      	movs	r2, #0
   32782:	b2cc      	uxtb	r4, r1
   32784:	0240      	lsls	r0, r0, #9
   32786:	05d2      	lsls	r2, r2, #23
   32788:	0a40      	lsrs	r0, r0, #9
   3278a:	07e4      	lsls	r4, r4, #31
   3278c:	4310      	orrs	r0, r2
   3278e:	4320      	orrs	r0, r4
   32790:	bc3c      	pop	{r2, r3, r4, r5}
   32792:	4690      	mov	r8, r2
   32794:	4699      	mov	r9, r3
   32796:	46a2      	mov	sl, r4
   32798:	46ab      	mov	fp, r5
   3279a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3279c:	2f00      	cmp	r7, #0
   3279e:	d115      	bne.n	327cc <__aeabi_fmul+0xdc>
   327a0:	2304      	movs	r3, #4
   327a2:	4699      	mov	r9, r3
   327a4:	3b03      	subs	r3, #3
   327a6:	2600      	movs	r6, #0
   327a8:	469a      	mov	sl, r3
   327aa:	e7b9      	b.n	32720 <__aeabi_fmul+0x30>
   327ac:	20ff      	movs	r0, #255	; 0xff
   327ae:	2202      	movs	r2, #2
   327b0:	2d00      	cmp	r5, #0
   327b2:	d0c5      	beq.n	32740 <__aeabi_fmul+0x50>
   327b4:	2203      	movs	r2, #3
   327b6:	e7c3      	b.n	32740 <__aeabi_fmul+0x50>
   327b8:	2d00      	cmp	r5, #0
   327ba:	d119      	bne.n	327f0 <__aeabi_fmul+0x100>
   327bc:	2000      	movs	r0, #0
   327be:	2201      	movs	r2, #1
   327c0:	e7be      	b.n	32740 <__aeabi_fmul+0x50>
   327c2:	2401      	movs	r4, #1
   327c4:	22ff      	movs	r2, #255	; 0xff
   327c6:	400c      	ands	r4, r1
   327c8:	2000      	movs	r0, #0
   327ca:	e7db      	b.n	32784 <__aeabi_fmul+0x94>
   327cc:	0038      	movs	r0, r7
   327ce:	f001 fd65 	bl	3429c <__clzsi2>
   327d2:	2676      	movs	r6, #118	; 0x76
   327d4:	1f43      	subs	r3, r0, #5
   327d6:	409f      	lsls	r7, r3
   327d8:	2300      	movs	r3, #0
   327da:	4276      	negs	r6, r6
   327dc:	1a36      	subs	r6, r6, r0
   327de:	4699      	mov	r9, r3
   327e0:	469a      	mov	sl, r3
   327e2:	e79d      	b.n	32720 <__aeabi_fmul+0x30>
   327e4:	230c      	movs	r3, #12
   327e6:	4699      	mov	r9, r3
   327e8:	3b09      	subs	r3, #9
   327ea:	26ff      	movs	r6, #255	; 0xff
   327ec:	469a      	mov	sl, r3
   327ee:	e797      	b.n	32720 <__aeabi_fmul+0x30>
   327f0:	0028      	movs	r0, r5
   327f2:	f001 fd53 	bl	3429c <__clzsi2>
   327f6:	1f43      	subs	r3, r0, #5
   327f8:	409d      	lsls	r5, r3
   327fa:	2376      	movs	r3, #118	; 0x76
   327fc:	425b      	negs	r3, r3
   327fe:	1a18      	subs	r0, r3, r0
   32800:	2200      	movs	r2, #0
   32802:	e79d      	b.n	32740 <__aeabi_fmul+0x50>
   32804:	2080      	movs	r0, #128	; 0x80
   32806:	2400      	movs	r4, #0
   32808:	03c0      	lsls	r0, r0, #15
   3280a:	22ff      	movs	r2, #255	; 0xff
   3280c:	e7ba      	b.n	32784 <__aeabi_fmul+0x94>
   3280e:	003d      	movs	r5, r7
   32810:	4652      	mov	r2, sl
   32812:	e7ab      	b.n	3276c <__aeabi_fmul+0x7c>
   32814:	003d      	movs	r5, r7
   32816:	0021      	movs	r1, r4
   32818:	4652      	mov	r2, sl
   3281a:	e7a7      	b.n	3276c <__aeabi_fmul+0x7c>
   3281c:	0c3b      	lsrs	r3, r7, #16
   3281e:	469c      	mov	ip, r3
   32820:	042a      	lsls	r2, r5, #16
   32822:	0c12      	lsrs	r2, r2, #16
   32824:	0c2b      	lsrs	r3, r5, #16
   32826:	0014      	movs	r4, r2
   32828:	4660      	mov	r0, ip
   3282a:	4665      	mov	r5, ip
   3282c:	043f      	lsls	r7, r7, #16
   3282e:	0c3f      	lsrs	r7, r7, #16
   32830:	437c      	muls	r4, r7
   32832:	4342      	muls	r2, r0
   32834:	435d      	muls	r5, r3
   32836:	437b      	muls	r3, r7
   32838:	0c27      	lsrs	r7, r4, #16
   3283a:	189b      	adds	r3, r3, r2
   3283c:	18ff      	adds	r7, r7, r3
   3283e:	42ba      	cmp	r2, r7
   32840:	d903      	bls.n	3284a <__aeabi_fmul+0x15a>
   32842:	2380      	movs	r3, #128	; 0x80
   32844:	025b      	lsls	r3, r3, #9
   32846:	469c      	mov	ip, r3
   32848:	4465      	add	r5, ip
   3284a:	0424      	lsls	r4, r4, #16
   3284c:	043a      	lsls	r2, r7, #16
   3284e:	0c24      	lsrs	r4, r4, #16
   32850:	1912      	adds	r2, r2, r4
   32852:	0193      	lsls	r3, r2, #6
   32854:	1e5c      	subs	r4, r3, #1
   32856:	41a3      	sbcs	r3, r4
   32858:	0c3f      	lsrs	r7, r7, #16
   3285a:	0e92      	lsrs	r2, r2, #26
   3285c:	197d      	adds	r5, r7, r5
   3285e:	431a      	orrs	r2, r3
   32860:	01ad      	lsls	r5, r5, #6
   32862:	4315      	orrs	r5, r2
   32864:	012b      	lsls	r3, r5, #4
   32866:	d504      	bpl.n	32872 <__aeabi_fmul+0x182>
   32868:	2301      	movs	r3, #1
   3286a:	465e      	mov	r6, fp
   3286c:	086a      	lsrs	r2, r5, #1
   3286e:	401d      	ands	r5, r3
   32870:	4315      	orrs	r5, r2
   32872:	0032      	movs	r2, r6
   32874:	327f      	adds	r2, #127	; 0x7f
   32876:	2a00      	cmp	r2, #0
   32878:	dd25      	ble.n	328c6 <__aeabi_fmul+0x1d6>
   3287a:	076b      	lsls	r3, r5, #29
   3287c:	d004      	beq.n	32888 <__aeabi_fmul+0x198>
   3287e:	230f      	movs	r3, #15
   32880:	402b      	ands	r3, r5
   32882:	2b04      	cmp	r3, #4
   32884:	d000      	beq.n	32888 <__aeabi_fmul+0x198>
   32886:	3504      	adds	r5, #4
   32888:	012b      	lsls	r3, r5, #4
   3288a:	d503      	bpl.n	32894 <__aeabi_fmul+0x1a4>
   3288c:	0032      	movs	r2, r6
   3288e:	4b27      	ldr	r3, [pc, #156]	; (3292c <__aeabi_fmul+0x23c>)
   32890:	3280      	adds	r2, #128	; 0x80
   32892:	401d      	ands	r5, r3
   32894:	2afe      	cmp	r2, #254	; 0xfe
   32896:	dc94      	bgt.n	327c2 <__aeabi_fmul+0xd2>
   32898:	2401      	movs	r4, #1
   3289a:	01a8      	lsls	r0, r5, #6
   3289c:	0a40      	lsrs	r0, r0, #9
   3289e:	b2d2      	uxtb	r2, r2
   328a0:	400c      	ands	r4, r1
   328a2:	e76f      	b.n	32784 <__aeabi_fmul+0x94>
   328a4:	2080      	movs	r0, #128	; 0x80
   328a6:	03c0      	lsls	r0, r0, #15
   328a8:	4207      	tst	r7, r0
   328aa:	d007      	beq.n	328bc <__aeabi_fmul+0x1cc>
   328ac:	4205      	tst	r5, r0
   328ae:	d105      	bne.n	328bc <__aeabi_fmul+0x1cc>
   328b0:	4328      	orrs	r0, r5
   328b2:	0240      	lsls	r0, r0, #9
   328b4:	0a40      	lsrs	r0, r0, #9
   328b6:	4644      	mov	r4, r8
   328b8:	22ff      	movs	r2, #255	; 0xff
   328ba:	e763      	b.n	32784 <__aeabi_fmul+0x94>
   328bc:	4338      	orrs	r0, r7
   328be:	0240      	lsls	r0, r0, #9
   328c0:	0a40      	lsrs	r0, r0, #9
   328c2:	22ff      	movs	r2, #255	; 0xff
   328c4:	e75e      	b.n	32784 <__aeabi_fmul+0x94>
   328c6:	2401      	movs	r4, #1
   328c8:	1aa3      	subs	r3, r4, r2
   328ca:	2b1b      	cmp	r3, #27
   328cc:	dd05      	ble.n	328da <__aeabi_fmul+0x1ea>
   328ce:	400c      	ands	r4, r1
   328d0:	2200      	movs	r2, #0
   328d2:	2000      	movs	r0, #0
   328d4:	e756      	b.n	32784 <__aeabi_fmul+0x94>
   328d6:	465e      	mov	r6, fp
   328d8:	e7cb      	b.n	32872 <__aeabi_fmul+0x182>
   328da:	002a      	movs	r2, r5
   328dc:	2020      	movs	r0, #32
   328de:	40da      	lsrs	r2, r3
   328e0:	1ac3      	subs	r3, r0, r3
   328e2:	409d      	lsls	r5, r3
   328e4:	002b      	movs	r3, r5
   328e6:	1e5d      	subs	r5, r3, #1
   328e8:	41ab      	sbcs	r3, r5
   328ea:	4313      	orrs	r3, r2
   328ec:	075a      	lsls	r2, r3, #29
   328ee:	d004      	beq.n	328fa <__aeabi_fmul+0x20a>
   328f0:	220f      	movs	r2, #15
   328f2:	401a      	ands	r2, r3
   328f4:	2a04      	cmp	r2, #4
   328f6:	d000      	beq.n	328fa <__aeabi_fmul+0x20a>
   328f8:	3304      	adds	r3, #4
   328fa:	015a      	lsls	r2, r3, #5
   328fc:	d504      	bpl.n	32908 <__aeabi_fmul+0x218>
   328fe:	2401      	movs	r4, #1
   32900:	2201      	movs	r2, #1
   32902:	400c      	ands	r4, r1
   32904:	2000      	movs	r0, #0
   32906:	e73d      	b.n	32784 <__aeabi_fmul+0x94>
   32908:	2401      	movs	r4, #1
   3290a:	019b      	lsls	r3, r3, #6
   3290c:	0a58      	lsrs	r0, r3, #9
   3290e:	400c      	ands	r4, r1
   32910:	2200      	movs	r2, #0
   32912:	e737      	b.n	32784 <__aeabi_fmul+0x94>
   32914:	2080      	movs	r0, #128	; 0x80
   32916:	2401      	movs	r4, #1
   32918:	03c0      	lsls	r0, r0, #15
   3291a:	4328      	orrs	r0, r5
   3291c:	0240      	lsls	r0, r0, #9
   3291e:	0a40      	lsrs	r0, r0, #9
   32920:	400c      	ands	r4, r1
   32922:	22ff      	movs	r2, #255	; 0xff
   32924:	e72e      	b.n	32784 <__aeabi_fmul+0x94>
   32926:	46c0      	nop			; (mov r8, r8)
   32928:	000398ec 	.word	0x000398ec
   3292c:	f7ffffff 	.word	0xf7ffffff

00032930 <__aeabi_f2iz>:
   32930:	0241      	lsls	r1, r0, #9
   32932:	0043      	lsls	r3, r0, #1
   32934:	0fc2      	lsrs	r2, r0, #31
   32936:	0a49      	lsrs	r1, r1, #9
   32938:	0e1b      	lsrs	r3, r3, #24
   3293a:	2000      	movs	r0, #0
   3293c:	2b7e      	cmp	r3, #126	; 0x7e
   3293e:	dd0d      	ble.n	3295c <__aeabi_f2iz+0x2c>
   32940:	2b9d      	cmp	r3, #157	; 0x9d
   32942:	dc0c      	bgt.n	3295e <__aeabi_f2iz+0x2e>
   32944:	2080      	movs	r0, #128	; 0x80
   32946:	0400      	lsls	r0, r0, #16
   32948:	4301      	orrs	r1, r0
   3294a:	2b95      	cmp	r3, #149	; 0x95
   3294c:	dc0a      	bgt.n	32964 <__aeabi_f2iz+0x34>
   3294e:	2096      	movs	r0, #150	; 0x96
   32950:	1ac3      	subs	r3, r0, r3
   32952:	40d9      	lsrs	r1, r3
   32954:	4248      	negs	r0, r1
   32956:	2a00      	cmp	r2, #0
   32958:	d100      	bne.n	3295c <__aeabi_f2iz+0x2c>
   3295a:	0008      	movs	r0, r1
   3295c:	4770      	bx	lr
   3295e:	4b03      	ldr	r3, [pc, #12]	; (3296c <__aeabi_f2iz+0x3c>)
   32960:	18d0      	adds	r0, r2, r3
   32962:	e7fb      	b.n	3295c <__aeabi_f2iz+0x2c>
   32964:	3b96      	subs	r3, #150	; 0x96
   32966:	4099      	lsls	r1, r3
   32968:	e7f4      	b.n	32954 <__aeabi_f2iz+0x24>
   3296a:	46c0      	nop			; (mov r8, r8)
   3296c:	7fffffff 	.word	0x7fffffff

00032970 <__aeabi_i2f>:
   32970:	b570      	push	{r4, r5, r6, lr}
   32972:	2800      	cmp	r0, #0
   32974:	d030      	beq.n	329d8 <__aeabi_i2f+0x68>
   32976:	17c3      	asrs	r3, r0, #31
   32978:	18c4      	adds	r4, r0, r3
   3297a:	405c      	eors	r4, r3
   3297c:	0fc5      	lsrs	r5, r0, #31
   3297e:	0020      	movs	r0, r4
   32980:	f001 fc8c 	bl	3429c <__clzsi2>
   32984:	239e      	movs	r3, #158	; 0x9e
   32986:	1a1b      	subs	r3, r3, r0
   32988:	2b96      	cmp	r3, #150	; 0x96
   3298a:	dc0d      	bgt.n	329a8 <__aeabi_i2f+0x38>
   3298c:	2296      	movs	r2, #150	; 0x96
   3298e:	1ad2      	subs	r2, r2, r3
   32990:	4094      	lsls	r4, r2
   32992:	002a      	movs	r2, r5
   32994:	0264      	lsls	r4, r4, #9
   32996:	0a64      	lsrs	r4, r4, #9
   32998:	b2db      	uxtb	r3, r3
   3299a:	0264      	lsls	r4, r4, #9
   3299c:	05db      	lsls	r3, r3, #23
   3299e:	0a60      	lsrs	r0, r4, #9
   329a0:	07d2      	lsls	r2, r2, #31
   329a2:	4318      	orrs	r0, r3
   329a4:	4310      	orrs	r0, r2
   329a6:	bd70      	pop	{r4, r5, r6, pc}
   329a8:	2b99      	cmp	r3, #153	; 0x99
   329aa:	dc19      	bgt.n	329e0 <__aeabi_i2f+0x70>
   329ac:	2299      	movs	r2, #153	; 0x99
   329ae:	1ad2      	subs	r2, r2, r3
   329b0:	2a00      	cmp	r2, #0
   329b2:	dd29      	ble.n	32a08 <__aeabi_i2f+0x98>
   329b4:	4094      	lsls	r4, r2
   329b6:	0022      	movs	r2, r4
   329b8:	4c14      	ldr	r4, [pc, #80]	; (32a0c <__aeabi_i2f+0x9c>)
   329ba:	4014      	ands	r4, r2
   329bc:	0751      	lsls	r1, r2, #29
   329be:	d004      	beq.n	329ca <__aeabi_i2f+0x5a>
   329c0:	210f      	movs	r1, #15
   329c2:	400a      	ands	r2, r1
   329c4:	2a04      	cmp	r2, #4
   329c6:	d000      	beq.n	329ca <__aeabi_i2f+0x5a>
   329c8:	3404      	adds	r4, #4
   329ca:	0162      	lsls	r2, r4, #5
   329cc:	d413      	bmi.n	329f6 <__aeabi_i2f+0x86>
   329ce:	01a4      	lsls	r4, r4, #6
   329d0:	0a64      	lsrs	r4, r4, #9
   329d2:	b2db      	uxtb	r3, r3
   329d4:	002a      	movs	r2, r5
   329d6:	e7e0      	b.n	3299a <__aeabi_i2f+0x2a>
   329d8:	2200      	movs	r2, #0
   329da:	2300      	movs	r3, #0
   329dc:	2400      	movs	r4, #0
   329de:	e7dc      	b.n	3299a <__aeabi_i2f+0x2a>
   329e0:	2205      	movs	r2, #5
   329e2:	0021      	movs	r1, r4
   329e4:	1a12      	subs	r2, r2, r0
   329e6:	40d1      	lsrs	r1, r2
   329e8:	22b9      	movs	r2, #185	; 0xb9
   329ea:	1ad2      	subs	r2, r2, r3
   329ec:	4094      	lsls	r4, r2
   329ee:	1e62      	subs	r2, r4, #1
   329f0:	4194      	sbcs	r4, r2
   329f2:	430c      	orrs	r4, r1
   329f4:	e7da      	b.n	329ac <__aeabi_i2f+0x3c>
   329f6:	4b05      	ldr	r3, [pc, #20]	; (32a0c <__aeabi_i2f+0x9c>)
   329f8:	002a      	movs	r2, r5
   329fa:	401c      	ands	r4, r3
   329fc:	239f      	movs	r3, #159	; 0x9f
   329fe:	01a4      	lsls	r4, r4, #6
   32a00:	1a1b      	subs	r3, r3, r0
   32a02:	0a64      	lsrs	r4, r4, #9
   32a04:	b2db      	uxtb	r3, r3
   32a06:	e7c8      	b.n	3299a <__aeabi_i2f+0x2a>
   32a08:	0022      	movs	r2, r4
   32a0a:	e7d5      	b.n	329b8 <__aeabi_i2f+0x48>
   32a0c:	fbffffff 	.word	0xfbffffff

00032a10 <__aeabi_dadd>:
   32a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32a12:	4645      	mov	r5, r8
   32a14:	46de      	mov	lr, fp
   32a16:	4657      	mov	r7, sl
   32a18:	464e      	mov	r6, r9
   32a1a:	030c      	lsls	r4, r1, #12
   32a1c:	b5e0      	push	{r5, r6, r7, lr}
   32a1e:	004e      	lsls	r6, r1, #1
   32a20:	0fc9      	lsrs	r1, r1, #31
   32a22:	4688      	mov	r8, r1
   32a24:	000d      	movs	r5, r1
   32a26:	0a61      	lsrs	r1, r4, #9
   32a28:	0f44      	lsrs	r4, r0, #29
   32a2a:	430c      	orrs	r4, r1
   32a2c:	00c7      	lsls	r7, r0, #3
   32a2e:	0319      	lsls	r1, r3, #12
   32a30:	0058      	lsls	r0, r3, #1
   32a32:	0fdb      	lsrs	r3, r3, #31
   32a34:	469b      	mov	fp, r3
   32a36:	0a4b      	lsrs	r3, r1, #9
   32a38:	0f51      	lsrs	r1, r2, #29
   32a3a:	430b      	orrs	r3, r1
   32a3c:	0d76      	lsrs	r6, r6, #21
   32a3e:	0d40      	lsrs	r0, r0, #21
   32a40:	0019      	movs	r1, r3
   32a42:	00d2      	lsls	r2, r2, #3
   32a44:	45d8      	cmp	r8, fp
   32a46:	d100      	bne.n	32a4a <__aeabi_dadd+0x3a>
   32a48:	e0ae      	b.n	32ba8 <__aeabi_dadd+0x198>
   32a4a:	1a35      	subs	r5, r6, r0
   32a4c:	2d00      	cmp	r5, #0
   32a4e:	dc00      	bgt.n	32a52 <__aeabi_dadd+0x42>
   32a50:	e0f6      	b.n	32c40 <__aeabi_dadd+0x230>
   32a52:	2800      	cmp	r0, #0
   32a54:	d10f      	bne.n	32a76 <__aeabi_dadd+0x66>
   32a56:	4313      	orrs	r3, r2
   32a58:	d100      	bne.n	32a5c <__aeabi_dadd+0x4c>
   32a5a:	e0db      	b.n	32c14 <__aeabi_dadd+0x204>
   32a5c:	1e6b      	subs	r3, r5, #1
   32a5e:	2b00      	cmp	r3, #0
   32a60:	d000      	beq.n	32a64 <__aeabi_dadd+0x54>
   32a62:	e137      	b.n	32cd4 <__aeabi_dadd+0x2c4>
   32a64:	1aba      	subs	r2, r7, r2
   32a66:	4297      	cmp	r7, r2
   32a68:	41bf      	sbcs	r7, r7
   32a6a:	1a64      	subs	r4, r4, r1
   32a6c:	427f      	negs	r7, r7
   32a6e:	1be4      	subs	r4, r4, r7
   32a70:	2601      	movs	r6, #1
   32a72:	0017      	movs	r7, r2
   32a74:	e024      	b.n	32ac0 <__aeabi_dadd+0xb0>
   32a76:	4bc6      	ldr	r3, [pc, #792]	; (32d90 <__aeabi_dadd+0x380>)
   32a78:	429e      	cmp	r6, r3
   32a7a:	d04d      	beq.n	32b18 <__aeabi_dadd+0x108>
   32a7c:	2380      	movs	r3, #128	; 0x80
   32a7e:	041b      	lsls	r3, r3, #16
   32a80:	4319      	orrs	r1, r3
   32a82:	2d38      	cmp	r5, #56	; 0x38
   32a84:	dd00      	ble.n	32a88 <__aeabi_dadd+0x78>
   32a86:	e107      	b.n	32c98 <__aeabi_dadd+0x288>
   32a88:	2d1f      	cmp	r5, #31
   32a8a:	dd00      	ble.n	32a8e <__aeabi_dadd+0x7e>
   32a8c:	e138      	b.n	32d00 <__aeabi_dadd+0x2f0>
   32a8e:	2020      	movs	r0, #32
   32a90:	1b43      	subs	r3, r0, r5
   32a92:	469a      	mov	sl, r3
   32a94:	000b      	movs	r3, r1
   32a96:	4650      	mov	r0, sl
   32a98:	4083      	lsls	r3, r0
   32a9a:	4699      	mov	r9, r3
   32a9c:	0013      	movs	r3, r2
   32a9e:	4648      	mov	r0, r9
   32aa0:	40eb      	lsrs	r3, r5
   32aa2:	4318      	orrs	r0, r3
   32aa4:	0003      	movs	r3, r0
   32aa6:	4650      	mov	r0, sl
   32aa8:	4082      	lsls	r2, r0
   32aaa:	1e50      	subs	r0, r2, #1
   32aac:	4182      	sbcs	r2, r0
   32aae:	40e9      	lsrs	r1, r5
   32ab0:	431a      	orrs	r2, r3
   32ab2:	1aba      	subs	r2, r7, r2
   32ab4:	1a61      	subs	r1, r4, r1
   32ab6:	4297      	cmp	r7, r2
   32ab8:	41a4      	sbcs	r4, r4
   32aba:	0017      	movs	r7, r2
   32abc:	4264      	negs	r4, r4
   32abe:	1b0c      	subs	r4, r1, r4
   32ac0:	0223      	lsls	r3, r4, #8
   32ac2:	d562      	bpl.n	32b8a <__aeabi_dadd+0x17a>
   32ac4:	0264      	lsls	r4, r4, #9
   32ac6:	0a65      	lsrs	r5, r4, #9
   32ac8:	2d00      	cmp	r5, #0
   32aca:	d100      	bne.n	32ace <__aeabi_dadd+0xbe>
   32acc:	e0df      	b.n	32c8e <__aeabi_dadd+0x27e>
   32ace:	0028      	movs	r0, r5
   32ad0:	f001 fbe4 	bl	3429c <__clzsi2>
   32ad4:	0003      	movs	r3, r0
   32ad6:	3b08      	subs	r3, #8
   32ad8:	2b1f      	cmp	r3, #31
   32ada:	dd00      	ble.n	32ade <__aeabi_dadd+0xce>
   32adc:	e0d2      	b.n	32c84 <__aeabi_dadd+0x274>
   32ade:	2220      	movs	r2, #32
   32ae0:	003c      	movs	r4, r7
   32ae2:	1ad2      	subs	r2, r2, r3
   32ae4:	409d      	lsls	r5, r3
   32ae6:	40d4      	lsrs	r4, r2
   32ae8:	409f      	lsls	r7, r3
   32aea:	4325      	orrs	r5, r4
   32aec:	429e      	cmp	r6, r3
   32aee:	dd00      	ble.n	32af2 <__aeabi_dadd+0xe2>
   32af0:	e0c4      	b.n	32c7c <__aeabi_dadd+0x26c>
   32af2:	1b9e      	subs	r6, r3, r6
   32af4:	1c73      	adds	r3, r6, #1
   32af6:	2b1f      	cmp	r3, #31
   32af8:	dd00      	ble.n	32afc <__aeabi_dadd+0xec>
   32afa:	e0f1      	b.n	32ce0 <__aeabi_dadd+0x2d0>
   32afc:	2220      	movs	r2, #32
   32afe:	0038      	movs	r0, r7
   32b00:	0029      	movs	r1, r5
   32b02:	1ad2      	subs	r2, r2, r3
   32b04:	40d8      	lsrs	r0, r3
   32b06:	4091      	lsls	r1, r2
   32b08:	4097      	lsls	r7, r2
   32b0a:	002c      	movs	r4, r5
   32b0c:	4301      	orrs	r1, r0
   32b0e:	1e78      	subs	r0, r7, #1
   32b10:	4187      	sbcs	r7, r0
   32b12:	40dc      	lsrs	r4, r3
   32b14:	2600      	movs	r6, #0
   32b16:	430f      	orrs	r7, r1
   32b18:	077b      	lsls	r3, r7, #29
   32b1a:	d009      	beq.n	32b30 <__aeabi_dadd+0x120>
   32b1c:	230f      	movs	r3, #15
   32b1e:	403b      	ands	r3, r7
   32b20:	2b04      	cmp	r3, #4
   32b22:	d005      	beq.n	32b30 <__aeabi_dadd+0x120>
   32b24:	1d3b      	adds	r3, r7, #4
   32b26:	42bb      	cmp	r3, r7
   32b28:	41bf      	sbcs	r7, r7
   32b2a:	427f      	negs	r7, r7
   32b2c:	19e4      	adds	r4, r4, r7
   32b2e:	001f      	movs	r7, r3
   32b30:	0223      	lsls	r3, r4, #8
   32b32:	d52c      	bpl.n	32b8e <__aeabi_dadd+0x17e>
   32b34:	4b96      	ldr	r3, [pc, #600]	; (32d90 <__aeabi_dadd+0x380>)
   32b36:	3601      	adds	r6, #1
   32b38:	429e      	cmp	r6, r3
   32b3a:	d100      	bne.n	32b3e <__aeabi_dadd+0x12e>
   32b3c:	e09a      	b.n	32c74 <__aeabi_dadd+0x264>
   32b3e:	4645      	mov	r5, r8
   32b40:	4b94      	ldr	r3, [pc, #592]	; (32d94 <__aeabi_dadd+0x384>)
   32b42:	08ff      	lsrs	r7, r7, #3
   32b44:	401c      	ands	r4, r3
   32b46:	0760      	lsls	r0, r4, #29
   32b48:	0576      	lsls	r6, r6, #21
   32b4a:	0264      	lsls	r4, r4, #9
   32b4c:	4307      	orrs	r7, r0
   32b4e:	0b24      	lsrs	r4, r4, #12
   32b50:	0d76      	lsrs	r6, r6, #21
   32b52:	2100      	movs	r1, #0
   32b54:	0324      	lsls	r4, r4, #12
   32b56:	0b23      	lsrs	r3, r4, #12
   32b58:	0d0c      	lsrs	r4, r1, #20
   32b5a:	4a8f      	ldr	r2, [pc, #572]	; (32d98 <__aeabi_dadd+0x388>)
   32b5c:	0524      	lsls	r4, r4, #20
   32b5e:	431c      	orrs	r4, r3
   32b60:	4014      	ands	r4, r2
   32b62:	0533      	lsls	r3, r6, #20
   32b64:	4323      	orrs	r3, r4
   32b66:	005b      	lsls	r3, r3, #1
   32b68:	07ed      	lsls	r5, r5, #31
   32b6a:	085b      	lsrs	r3, r3, #1
   32b6c:	432b      	orrs	r3, r5
   32b6e:	0038      	movs	r0, r7
   32b70:	0019      	movs	r1, r3
   32b72:	bc3c      	pop	{r2, r3, r4, r5}
   32b74:	4690      	mov	r8, r2
   32b76:	4699      	mov	r9, r3
   32b78:	46a2      	mov	sl, r4
   32b7a:	46ab      	mov	fp, r5
   32b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32b7e:	4664      	mov	r4, ip
   32b80:	4304      	orrs	r4, r0
   32b82:	d100      	bne.n	32b86 <__aeabi_dadd+0x176>
   32b84:	e211      	b.n	32faa <__aeabi_dadd+0x59a>
   32b86:	0004      	movs	r4, r0
   32b88:	4667      	mov	r7, ip
   32b8a:	077b      	lsls	r3, r7, #29
   32b8c:	d1c6      	bne.n	32b1c <__aeabi_dadd+0x10c>
   32b8e:	4645      	mov	r5, r8
   32b90:	0760      	lsls	r0, r4, #29
   32b92:	08ff      	lsrs	r7, r7, #3
   32b94:	4307      	orrs	r7, r0
   32b96:	08e4      	lsrs	r4, r4, #3
   32b98:	4b7d      	ldr	r3, [pc, #500]	; (32d90 <__aeabi_dadd+0x380>)
   32b9a:	429e      	cmp	r6, r3
   32b9c:	d030      	beq.n	32c00 <__aeabi_dadd+0x1f0>
   32b9e:	0324      	lsls	r4, r4, #12
   32ba0:	0576      	lsls	r6, r6, #21
   32ba2:	0b24      	lsrs	r4, r4, #12
   32ba4:	0d76      	lsrs	r6, r6, #21
   32ba6:	e7d4      	b.n	32b52 <__aeabi_dadd+0x142>
   32ba8:	1a33      	subs	r3, r6, r0
   32baa:	469a      	mov	sl, r3
   32bac:	2b00      	cmp	r3, #0
   32bae:	dd78      	ble.n	32ca2 <__aeabi_dadd+0x292>
   32bb0:	2800      	cmp	r0, #0
   32bb2:	d031      	beq.n	32c18 <__aeabi_dadd+0x208>
   32bb4:	4876      	ldr	r0, [pc, #472]	; (32d90 <__aeabi_dadd+0x380>)
   32bb6:	4286      	cmp	r6, r0
   32bb8:	d0ae      	beq.n	32b18 <__aeabi_dadd+0x108>
   32bba:	2080      	movs	r0, #128	; 0x80
   32bbc:	0400      	lsls	r0, r0, #16
   32bbe:	4301      	orrs	r1, r0
   32bc0:	4653      	mov	r3, sl
   32bc2:	2b38      	cmp	r3, #56	; 0x38
   32bc4:	dc00      	bgt.n	32bc8 <__aeabi_dadd+0x1b8>
   32bc6:	e0e9      	b.n	32d9c <__aeabi_dadd+0x38c>
   32bc8:	430a      	orrs	r2, r1
   32bca:	1e51      	subs	r1, r2, #1
   32bcc:	418a      	sbcs	r2, r1
   32bce:	2100      	movs	r1, #0
   32bd0:	19d2      	adds	r2, r2, r7
   32bd2:	42ba      	cmp	r2, r7
   32bd4:	41bf      	sbcs	r7, r7
   32bd6:	1909      	adds	r1, r1, r4
   32bd8:	427c      	negs	r4, r7
   32bda:	0017      	movs	r7, r2
   32bdc:	190c      	adds	r4, r1, r4
   32bde:	0223      	lsls	r3, r4, #8
   32be0:	d5d3      	bpl.n	32b8a <__aeabi_dadd+0x17a>
   32be2:	4b6b      	ldr	r3, [pc, #428]	; (32d90 <__aeabi_dadd+0x380>)
   32be4:	3601      	adds	r6, #1
   32be6:	429e      	cmp	r6, r3
   32be8:	d100      	bne.n	32bec <__aeabi_dadd+0x1dc>
   32bea:	e13a      	b.n	32e62 <__aeabi_dadd+0x452>
   32bec:	2001      	movs	r0, #1
   32bee:	4b69      	ldr	r3, [pc, #420]	; (32d94 <__aeabi_dadd+0x384>)
   32bf0:	401c      	ands	r4, r3
   32bf2:	087b      	lsrs	r3, r7, #1
   32bf4:	4007      	ands	r7, r0
   32bf6:	431f      	orrs	r7, r3
   32bf8:	07e0      	lsls	r0, r4, #31
   32bfa:	4307      	orrs	r7, r0
   32bfc:	0864      	lsrs	r4, r4, #1
   32bfe:	e78b      	b.n	32b18 <__aeabi_dadd+0x108>
   32c00:	0023      	movs	r3, r4
   32c02:	433b      	orrs	r3, r7
   32c04:	d100      	bne.n	32c08 <__aeabi_dadd+0x1f8>
   32c06:	e1cb      	b.n	32fa0 <__aeabi_dadd+0x590>
   32c08:	2280      	movs	r2, #128	; 0x80
   32c0a:	0312      	lsls	r2, r2, #12
   32c0c:	4314      	orrs	r4, r2
   32c0e:	0324      	lsls	r4, r4, #12
   32c10:	0b24      	lsrs	r4, r4, #12
   32c12:	e79e      	b.n	32b52 <__aeabi_dadd+0x142>
   32c14:	002e      	movs	r6, r5
   32c16:	e77f      	b.n	32b18 <__aeabi_dadd+0x108>
   32c18:	0008      	movs	r0, r1
   32c1a:	4310      	orrs	r0, r2
   32c1c:	d100      	bne.n	32c20 <__aeabi_dadd+0x210>
   32c1e:	e0b4      	b.n	32d8a <__aeabi_dadd+0x37a>
   32c20:	1e58      	subs	r0, r3, #1
   32c22:	2800      	cmp	r0, #0
   32c24:	d000      	beq.n	32c28 <__aeabi_dadd+0x218>
   32c26:	e0de      	b.n	32de6 <__aeabi_dadd+0x3d6>
   32c28:	18ba      	adds	r2, r7, r2
   32c2a:	42ba      	cmp	r2, r7
   32c2c:	419b      	sbcs	r3, r3
   32c2e:	1864      	adds	r4, r4, r1
   32c30:	425b      	negs	r3, r3
   32c32:	18e4      	adds	r4, r4, r3
   32c34:	0017      	movs	r7, r2
   32c36:	2601      	movs	r6, #1
   32c38:	0223      	lsls	r3, r4, #8
   32c3a:	d5a6      	bpl.n	32b8a <__aeabi_dadd+0x17a>
   32c3c:	2602      	movs	r6, #2
   32c3e:	e7d5      	b.n	32bec <__aeabi_dadd+0x1dc>
   32c40:	2d00      	cmp	r5, #0
   32c42:	d16e      	bne.n	32d22 <__aeabi_dadd+0x312>
   32c44:	1c70      	adds	r0, r6, #1
   32c46:	0540      	lsls	r0, r0, #21
   32c48:	0d40      	lsrs	r0, r0, #21
   32c4a:	2801      	cmp	r0, #1
   32c4c:	dc00      	bgt.n	32c50 <__aeabi_dadd+0x240>
   32c4e:	e0f9      	b.n	32e44 <__aeabi_dadd+0x434>
   32c50:	1ab8      	subs	r0, r7, r2
   32c52:	4684      	mov	ip, r0
   32c54:	4287      	cmp	r7, r0
   32c56:	4180      	sbcs	r0, r0
   32c58:	1ae5      	subs	r5, r4, r3
   32c5a:	4240      	negs	r0, r0
   32c5c:	1a2d      	subs	r5, r5, r0
   32c5e:	0228      	lsls	r0, r5, #8
   32c60:	d400      	bmi.n	32c64 <__aeabi_dadd+0x254>
   32c62:	e089      	b.n	32d78 <__aeabi_dadd+0x368>
   32c64:	1bd7      	subs	r7, r2, r7
   32c66:	42ba      	cmp	r2, r7
   32c68:	4192      	sbcs	r2, r2
   32c6a:	1b1c      	subs	r4, r3, r4
   32c6c:	4252      	negs	r2, r2
   32c6e:	1aa5      	subs	r5, r4, r2
   32c70:	46d8      	mov	r8, fp
   32c72:	e729      	b.n	32ac8 <__aeabi_dadd+0xb8>
   32c74:	4645      	mov	r5, r8
   32c76:	2400      	movs	r4, #0
   32c78:	2700      	movs	r7, #0
   32c7a:	e76a      	b.n	32b52 <__aeabi_dadd+0x142>
   32c7c:	4c45      	ldr	r4, [pc, #276]	; (32d94 <__aeabi_dadd+0x384>)
   32c7e:	1af6      	subs	r6, r6, r3
   32c80:	402c      	ands	r4, r5
   32c82:	e749      	b.n	32b18 <__aeabi_dadd+0x108>
   32c84:	003d      	movs	r5, r7
   32c86:	3828      	subs	r0, #40	; 0x28
   32c88:	4085      	lsls	r5, r0
   32c8a:	2700      	movs	r7, #0
   32c8c:	e72e      	b.n	32aec <__aeabi_dadd+0xdc>
   32c8e:	0038      	movs	r0, r7
   32c90:	f001 fb04 	bl	3429c <__clzsi2>
   32c94:	3020      	adds	r0, #32
   32c96:	e71d      	b.n	32ad4 <__aeabi_dadd+0xc4>
   32c98:	430a      	orrs	r2, r1
   32c9a:	1e51      	subs	r1, r2, #1
   32c9c:	418a      	sbcs	r2, r1
   32c9e:	2100      	movs	r1, #0
   32ca0:	e707      	b.n	32ab2 <__aeabi_dadd+0xa2>
   32ca2:	2b00      	cmp	r3, #0
   32ca4:	d000      	beq.n	32ca8 <__aeabi_dadd+0x298>
   32ca6:	e0f3      	b.n	32e90 <__aeabi_dadd+0x480>
   32ca8:	1c70      	adds	r0, r6, #1
   32caa:	0543      	lsls	r3, r0, #21
   32cac:	0d5b      	lsrs	r3, r3, #21
   32cae:	2b01      	cmp	r3, #1
   32cb0:	dc00      	bgt.n	32cb4 <__aeabi_dadd+0x2a4>
   32cb2:	e0ad      	b.n	32e10 <__aeabi_dadd+0x400>
   32cb4:	4b36      	ldr	r3, [pc, #216]	; (32d90 <__aeabi_dadd+0x380>)
   32cb6:	4298      	cmp	r0, r3
   32cb8:	d100      	bne.n	32cbc <__aeabi_dadd+0x2ac>
   32cba:	e0d1      	b.n	32e60 <__aeabi_dadd+0x450>
   32cbc:	18ba      	adds	r2, r7, r2
   32cbe:	42ba      	cmp	r2, r7
   32cc0:	41bf      	sbcs	r7, r7
   32cc2:	1864      	adds	r4, r4, r1
   32cc4:	427f      	negs	r7, r7
   32cc6:	19e4      	adds	r4, r4, r7
   32cc8:	07e7      	lsls	r7, r4, #31
   32cca:	0852      	lsrs	r2, r2, #1
   32ccc:	4317      	orrs	r7, r2
   32cce:	0864      	lsrs	r4, r4, #1
   32cd0:	0006      	movs	r6, r0
   32cd2:	e721      	b.n	32b18 <__aeabi_dadd+0x108>
   32cd4:	482e      	ldr	r0, [pc, #184]	; (32d90 <__aeabi_dadd+0x380>)
   32cd6:	4285      	cmp	r5, r0
   32cd8:	d100      	bne.n	32cdc <__aeabi_dadd+0x2cc>
   32cda:	e093      	b.n	32e04 <__aeabi_dadd+0x3f4>
   32cdc:	001d      	movs	r5, r3
   32cde:	e6d0      	b.n	32a82 <__aeabi_dadd+0x72>
   32ce0:	0029      	movs	r1, r5
   32ce2:	3e1f      	subs	r6, #31
   32ce4:	40f1      	lsrs	r1, r6
   32ce6:	2b20      	cmp	r3, #32
   32ce8:	d100      	bne.n	32cec <__aeabi_dadd+0x2dc>
   32cea:	e08d      	b.n	32e08 <__aeabi_dadd+0x3f8>
   32cec:	2240      	movs	r2, #64	; 0x40
   32cee:	1ad3      	subs	r3, r2, r3
   32cf0:	409d      	lsls	r5, r3
   32cf2:	432f      	orrs	r7, r5
   32cf4:	1e7d      	subs	r5, r7, #1
   32cf6:	41af      	sbcs	r7, r5
   32cf8:	2400      	movs	r4, #0
   32cfa:	430f      	orrs	r7, r1
   32cfc:	2600      	movs	r6, #0
   32cfe:	e744      	b.n	32b8a <__aeabi_dadd+0x17a>
   32d00:	002b      	movs	r3, r5
   32d02:	0008      	movs	r0, r1
   32d04:	3b20      	subs	r3, #32
   32d06:	40d8      	lsrs	r0, r3
   32d08:	0003      	movs	r3, r0
   32d0a:	2d20      	cmp	r5, #32
   32d0c:	d100      	bne.n	32d10 <__aeabi_dadd+0x300>
   32d0e:	e07d      	b.n	32e0c <__aeabi_dadd+0x3fc>
   32d10:	2040      	movs	r0, #64	; 0x40
   32d12:	1b45      	subs	r5, r0, r5
   32d14:	40a9      	lsls	r1, r5
   32d16:	430a      	orrs	r2, r1
   32d18:	1e51      	subs	r1, r2, #1
   32d1a:	418a      	sbcs	r2, r1
   32d1c:	2100      	movs	r1, #0
   32d1e:	431a      	orrs	r2, r3
   32d20:	e6c7      	b.n	32ab2 <__aeabi_dadd+0xa2>
   32d22:	2e00      	cmp	r6, #0
   32d24:	d050      	beq.n	32dc8 <__aeabi_dadd+0x3b8>
   32d26:	4e1a      	ldr	r6, [pc, #104]	; (32d90 <__aeabi_dadd+0x380>)
   32d28:	42b0      	cmp	r0, r6
   32d2a:	d057      	beq.n	32ddc <__aeabi_dadd+0x3cc>
   32d2c:	2680      	movs	r6, #128	; 0x80
   32d2e:	426b      	negs	r3, r5
   32d30:	4699      	mov	r9, r3
   32d32:	0436      	lsls	r6, r6, #16
   32d34:	4334      	orrs	r4, r6
   32d36:	464b      	mov	r3, r9
   32d38:	2b38      	cmp	r3, #56	; 0x38
   32d3a:	dd00      	ble.n	32d3e <__aeabi_dadd+0x32e>
   32d3c:	e0d6      	b.n	32eec <__aeabi_dadd+0x4dc>
   32d3e:	2b1f      	cmp	r3, #31
   32d40:	dd00      	ble.n	32d44 <__aeabi_dadd+0x334>
   32d42:	e135      	b.n	32fb0 <__aeabi_dadd+0x5a0>
   32d44:	2620      	movs	r6, #32
   32d46:	1af5      	subs	r5, r6, r3
   32d48:	0026      	movs	r6, r4
   32d4a:	40ae      	lsls	r6, r5
   32d4c:	46b2      	mov	sl, r6
   32d4e:	003e      	movs	r6, r7
   32d50:	40de      	lsrs	r6, r3
   32d52:	46ac      	mov	ip, r5
   32d54:	0035      	movs	r5, r6
   32d56:	4656      	mov	r6, sl
   32d58:	432e      	orrs	r6, r5
   32d5a:	4665      	mov	r5, ip
   32d5c:	40af      	lsls	r7, r5
   32d5e:	1e7d      	subs	r5, r7, #1
   32d60:	41af      	sbcs	r7, r5
   32d62:	40dc      	lsrs	r4, r3
   32d64:	4337      	orrs	r7, r6
   32d66:	1bd7      	subs	r7, r2, r7
   32d68:	42ba      	cmp	r2, r7
   32d6a:	4192      	sbcs	r2, r2
   32d6c:	1b0c      	subs	r4, r1, r4
   32d6e:	4252      	negs	r2, r2
   32d70:	1aa4      	subs	r4, r4, r2
   32d72:	0006      	movs	r6, r0
   32d74:	46d8      	mov	r8, fp
   32d76:	e6a3      	b.n	32ac0 <__aeabi_dadd+0xb0>
   32d78:	4664      	mov	r4, ip
   32d7a:	4667      	mov	r7, ip
   32d7c:	432c      	orrs	r4, r5
   32d7e:	d000      	beq.n	32d82 <__aeabi_dadd+0x372>
   32d80:	e6a2      	b.n	32ac8 <__aeabi_dadd+0xb8>
   32d82:	2500      	movs	r5, #0
   32d84:	2600      	movs	r6, #0
   32d86:	2700      	movs	r7, #0
   32d88:	e706      	b.n	32b98 <__aeabi_dadd+0x188>
   32d8a:	001e      	movs	r6, r3
   32d8c:	e6c4      	b.n	32b18 <__aeabi_dadd+0x108>
   32d8e:	46c0      	nop			; (mov r8, r8)
   32d90:	000007ff 	.word	0x000007ff
   32d94:	ff7fffff 	.word	0xff7fffff
   32d98:	800fffff 	.word	0x800fffff
   32d9c:	2b1f      	cmp	r3, #31
   32d9e:	dc63      	bgt.n	32e68 <__aeabi_dadd+0x458>
   32da0:	2020      	movs	r0, #32
   32da2:	1ac3      	subs	r3, r0, r3
   32da4:	0008      	movs	r0, r1
   32da6:	4098      	lsls	r0, r3
   32da8:	469c      	mov	ip, r3
   32daa:	4683      	mov	fp, r0
   32dac:	4653      	mov	r3, sl
   32dae:	0010      	movs	r0, r2
   32db0:	40d8      	lsrs	r0, r3
   32db2:	0003      	movs	r3, r0
   32db4:	4658      	mov	r0, fp
   32db6:	4318      	orrs	r0, r3
   32db8:	4663      	mov	r3, ip
   32dba:	409a      	lsls	r2, r3
   32dbc:	1e53      	subs	r3, r2, #1
   32dbe:	419a      	sbcs	r2, r3
   32dc0:	4653      	mov	r3, sl
   32dc2:	4302      	orrs	r2, r0
   32dc4:	40d9      	lsrs	r1, r3
   32dc6:	e703      	b.n	32bd0 <__aeabi_dadd+0x1c0>
   32dc8:	0026      	movs	r6, r4
   32dca:	433e      	orrs	r6, r7
   32dcc:	d006      	beq.n	32ddc <__aeabi_dadd+0x3cc>
   32dce:	43eb      	mvns	r3, r5
   32dd0:	4699      	mov	r9, r3
   32dd2:	2b00      	cmp	r3, #0
   32dd4:	d0c7      	beq.n	32d66 <__aeabi_dadd+0x356>
   32dd6:	4e94      	ldr	r6, [pc, #592]	; (33028 <__aeabi_dadd+0x618>)
   32dd8:	42b0      	cmp	r0, r6
   32dda:	d1ac      	bne.n	32d36 <__aeabi_dadd+0x326>
   32ddc:	000c      	movs	r4, r1
   32dde:	0017      	movs	r7, r2
   32de0:	0006      	movs	r6, r0
   32de2:	46d8      	mov	r8, fp
   32de4:	e698      	b.n	32b18 <__aeabi_dadd+0x108>
   32de6:	4b90      	ldr	r3, [pc, #576]	; (33028 <__aeabi_dadd+0x618>)
   32de8:	459a      	cmp	sl, r3
   32dea:	d00b      	beq.n	32e04 <__aeabi_dadd+0x3f4>
   32dec:	4682      	mov	sl, r0
   32dee:	e6e7      	b.n	32bc0 <__aeabi_dadd+0x1b0>
   32df0:	2800      	cmp	r0, #0
   32df2:	d000      	beq.n	32df6 <__aeabi_dadd+0x3e6>
   32df4:	e09e      	b.n	32f34 <__aeabi_dadd+0x524>
   32df6:	0018      	movs	r0, r3
   32df8:	4310      	orrs	r0, r2
   32dfa:	d100      	bne.n	32dfe <__aeabi_dadd+0x3ee>
   32dfc:	e0e9      	b.n	32fd2 <__aeabi_dadd+0x5c2>
   32dfe:	001c      	movs	r4, r3
   32e00:	0017      	movs	r7, r2
   32e02:	46d8      	mov	r8, fp
   32e04:	4e88      	ldr	r6, [pc, #544]	; (33028 <__aeabi_dadd+0x618>)
   32e06:	e687      	b.n	32b18 <__aeabi_dadd+0x108>
   32e08:	2500      	movs	r5, #0
   32e0a:	e772      	b.n	32cf2 <__aeabi_dadd+0x2e2>
   32e0c:	2100      	movs	r1, #0
   32e0e:	e782      	b.n	32d16 <__aeabi_dadd+0x306>
   32e10:	0023      	movs	r3, r4
   32e12:	433b      	orrs	r3, r7
   32e14:	2e00      	cmp	r6, #0
   32e16:	d000      	beq.n	32e1a <__aeabi_dadd+0x40a>
   32e18:	e0ab      	b.n	32f72 <__aeabi_dadd+0x562>
   32e1a:	2b00      	cmp	r3, #0
   32e1c:	d100      	bne.n	32e20 <__aeabi_dadd+0x410>
   32e1e:	e0e7      	b.n	32ff0 <__aeabi_dadd+0x5e0>
   32e20:	000b      	movs	r3, r1
   32e22:	4313      	orrs	r3, r2
   32e24:	d100      	bne.n	32e28 <__aeabi_dadd+0x418>
   32e26:	e677      	b.n	32b18 <__aeabi_dadd+0x108>
   32e28:	18ba      	adds	r2, r7, r2
   32e2a:	42ba      	cmp	r2, r7
   32e2c:	41bf      	sbcs	r7, r7
   32e2e:	1864      	adds	r4, r4, r1
   32e30:	427f      	negs	r7, r7
   32e32:	19e4      	adds	r4, r4, r7
   32e34:	0223      	lsls	r3, r4, #8
   32e36:	d400      	bmi.n	32e3a <__aeabi_dadd+0x42a>
   32e38:	e0f2      	b.n	33020 <__aeabi_dadd+0x610>
   32e3a:	4b7c      	ldr	r3, [pc, #496]	; (3302c <__aeabi_dadd+0x61c>)
   32e3c:	0017      	movs	r7, r2
   32e3e:	401c      	ands	r4, r3
   32e40:	0006      	movs	r6, r0
   32e42:	e669      	b.n	32b18 <__aeabi_dadd+0x108>
   32e44:	0020      	movs	r0, r4
   32e46:	4338      	orrs	r0, r7
   32e48:	2e00      	cmp	r6, #0
   32e4a:	d1d1      	bne.n	32df0 <__aeabi_dadd+0x3e0>
   32e4c:	2800      	cmp	r0, #0
   32e4e:	d15b      	bne.n	32f08 <__aeabi_dadd+0x4f8>
   32e50:	001c      	movs	r4, r3
   32e52:	4314      	orrs	r4, r2
   32e54:	d100      	bne.n	32e58 <__aeabi_dadd+0x448>
   32e56:	e0a8      	b.n	32faa <__aeabi_dadd+0x59a>
   32e58:	001c      	movs	r4, r3
   32e5a:	0017      	movs	r7, r2
   32e5c:	46d8      	mov	r8, fp
   32e5e:	e65b      	b.n	32b18 <__aeabi_dadd+0x108>
   32e60:	0006      	movs	r6, r0
   32e62:	2400      	movs	r4, #0
   32e64:	2700      	movs	r7, #0
   32e66:	e697      	b.n	32b98 <__aeabi_dadd+0x188>
   32e68:	4650      	mov	r0, sl
   32e6a:	000b      	movs	r3, r1
   32e6c:	3820      	subs	r0, #32
   32e6e:	40c3      	lsrs	r3, r0
   32e70:	4699      	mov	r9, r3
   32e72:	4653      	mov	r3, sl
   32e74:	2b20      	cmp	r3, #32
   32e76:	d100      	bne.n	32e7a <__aeabi_dadd+0x46a>
   32e78:	e095      	b.n	32fa6 <__aeabi_dadd+0x596>
   32e7a:	2340      	movs	r3, #64	; 0x40
   32e7c:	4650      	mov	r0, sl
   32e7e:	1a1b      	subs	r3, r3, r0
   32e80:	4099      	lsls	r1, r3
   32e82:	430a      	orrs	r2, r1
   32e84:	1e51      	subs	r1, r2, #1
   32e86:	418a      	sbcs	r2, r1
   32e88:	464b      	mov	r3, r9
   32e8a:	2100      	movs	r1, #0
   32e8c:	431a      	orrs	r2, r3
   32e8e:	e69f      	b.n	32bd0 <__aeabi_dadd+0x1c0>
   32e90:	2e00      	cmp	r6, #0
   32e92:	d130      	bne.n	32ef6 <__aeabi_dadd+0x4e6>
   32e94:	0026      	movs	r6, r4
   32e96:	433e      	orrs	r6, r7
   32e98:	d067      	beq.n	32f6a <__aeabi_dadd+0x55a>
   32e9a:	43db      	mvns	r3, r3
   32e9c:	469a      	mov	sl, r3
   32e9e:	2b00      	cmp	r3, #0
   32ea0:	d01c      	beq.n	32edc <__aeabi_dadd+0x4cc>
   32ea2:	4e61      	ldr	r6, [pc, #388]	; (33028 <__aeabi_dadd+0x618>)
   32ea4:	42b0      	cmp	r0, r6
   32ea6:	d060      	beq.n	32f6a <__aeabi_dadd+0x55a>
   32ea8:	4653      	mov	r3, sl
   32eaa:	2b38      	cmp	r3, #56	; 0x38
   32eac:	dd00      	ble.n	32eb0 <__aeabi_dadd+0x4a0>
   32eae:	e096      	b.n	32fde <__aeabi_dadd+0x5ce>
   32eb0:	2b1f      	cmp	r3, #31
   32eb2:	dd00      	ble.n	32eb6 <__aeabi_dadd+0x4a6>
   32eb4:	e09f      	b.n	32ff6 <__aeabi_dadd+0x5e6>
   32eb6:	2620      	movs	r6, #32
   32eb8:	1af3      	subs	r3, r6, r3
   32eba:	0026      	movs	r6, r4
   32ebc:	409e      	lsls	r6, r3
   32ebe:	469c      	mov	ip, r3
   32ec0:	46b3      	mov	fp, r6
   32ec2:	4653      	mov	r3, sl
   32ec4:	003e      	movs	r6, r7
   32ec6:	40de      	lsrs	r6, r3
   32ec8:	0033      	movs	r3, r6
   32eca:	465e      	mov	r6, fp
   32ecc:	431e      	orrs	r6, r3
   32ece:	4663      	mov	r3, ip
   32ed0:	409f      	lsls	r7, r3
   32ed2:	1e7b      	subs	r3, r7, #1
   32ed4:	419f      	sbcs	r7, r3
   32ed6:	4653      	mov	r3, sl
   32ed8:	40dc      	lsrs	r4, r3
   32eda:	4337      	orrs	r7, r6
   32edc:	18bf      	adds	r7, r7, r2
   32ede:	4297      	cmp	r7, r2
   32ee0:	4192      	sbcs	r2, r2
   32ee2:	1864      	adds	r4, r4, r1
   32ee4:	4252      	negs	r2, r2
   32ee6:	18a4      	adds	r4, r4, r2
   32ee8:	0006      	movs	r6, r0
   32eea:	e678      	b.n	32bde <__aeabi_dadd+0x1ce>
   32eec:	4327      	orrs	r7, r4
   32eee:	1e7c      	subs	r4, r7, #1
   32ef0:	41a7      	sbcs	r7, r4
   32ef2:	2400      	movs	r4, #0
   32ef4:	e737      	b.n	32d66 <__aeabi_dadd+0x356>
   32ef6:	4e4c      	ldr	r6, [pc, #304]	; (33028 <__aeabi_dadd+0x618>)
   32ef8:	42b0      	cmp	r0, r6
   32efa:	d036      	beq.n	32f6a <__aeabi_dadd+0x55a>
   32efc:	2680      	movs	r6, #128	; 0x80
   32efe:	425b      	negs	r3, r3
   32f00:	0436      	lsls	r6, r6, #16
   32f02:	469a      	mov	sl, r3
   32f04:	4334      	orrs	r4, r6
   32f06:	e7cf      	b.n	32ea8 <__aeabi_dadd+0x498>
   32f08:	0018      	movs	r0, r3
   32f0a:	4310      	orrs	r0, r2
   32f0c:	d100      	bne.n	32f10 <__aeabi_dadd+0x500>
   32f0e:	e603      	b.n	32b18 <__aeabi_dadd+0x108>
   32f10:	1ab8      	subs	r0, r7, r2
   32f12:	4684      	mov	ip, r0
   32f14:	4567      	cmp	r7, ip
   32f16:	41ad      	sbcs	r5, r5
   32f18:	1ae0      	subs	r0, r4, r3
   32f1a:	426d      	negs	r5, r5
   32f1c:	1b40      	subs	r0, r0, r5
   32f1e:	0205      	lsls	r5, r0, #8
   32f20:	d400      	bmi.n	32f24 <__aeabi_dadd+0x514>
   32f22:	e62c      	b.n	32b7e <__aeabi_dadd+0x16e>
   32f24:	1bd7      	subs	r7, r2, r7
   32f26:	42ba      	cmp	r2, r7
   32f28:	4192      	sbcs	r2, r2
   32f2a:	1b1c      	subs	r4, r3, r4
   32f2c:	4252      	negs	r2, r2
   32f2e:	1aa4      	subs	r4, r4, r2
   32f30:	46d8      	mov	r8, fp
   32f32:	e5f1      	b.n	32b18 <__aeabi_dadd+0x108>
   32f34:	0018      	movs	r0, r3
   32f36:	4310      	orrs	r0, r2
   32f38:	d100      	bne.n	32f3c <__aeabi_dadd+0x52c>
   32f3a:	e763      	b.n	32e04 <__aeabi_dadd+0x3f4>
   32f3c:	08f8      	lsrs	r0, r7, #3
   32f3e:	0767      	lsls	r7, r4, #29
   32f40:	4307      	orrs	r7, r0
   32f42:	2080      	movs	r0, #128	; 0x80
   32f44:	08e4      	lsrs	r4, r4, #3
   32f46:	0300      	lsls	r0, r0, #12
   32f48:	4204      	tst	r4, r0
   32f4a:	d008      	beq.n	32f5e <__aeabi_dadd+0x54e>
   32f4c:	08dd      	lsrs	r5, r3, #3
   32f4e:	4205      	tst	r5, r0
   32f50:	d105      	bne.n	32f5e <__aeabi_dadd+0x54e>
   32f52:	08d2      	lsrs	r2, r2, #3
   32f54:	0759      	lsls	r1, r3, #29
   32f56:	4311      	orrs	r1, r2
   32f58:	000f      	movs	r7, r1
   32f5a:	002c      	movs	r4, r5
   32f5c:	46d8      	mov	r8, fp
   32f5e:	0f7b      	lsrs	r3, r7, #29
   32f60:	00e4      	lsls	r4, r4, #3
   32f62:	431c      	orrs	r4, r3
   32f64:	00ff      	lsls	r7, r7, #3
   32f66:	4e30      	ldr	r6, [pc, #192]	; (33028 <__aeabi_dadd+0x618>)
   32f68:	e5d6      	b.n	32b18 <__aeabi_dadd+0x108>
   32f6a:	000c      	movs	r4, r1
   32f6c:	0017      	movs	r7, r2
   32f6e:	0006      	movs	r6, r0
   32f70:	e5d2      	b.n	32b18 <__aeabi_dadd+0x108>
   32f72:	2b00      	cmp	r3, #0
   32f74:	d038      	beq.n	32fe8 <__aeabi_dadd+0x5d8>
   32f76:	000b      	movs	r3, r1
   32f78:	4313      	orrs	r3, r2
   32f7a:	d100      	bne.n	32f7e <__aeabi_dadd+0x56e>
   32f7c:	e742      	b.n	32e04 <__aeabi_dadd+0x3f4>
   32f7e:	08f8      	lsrs	r0, r7, #3
   32f80:	0767      	lsls	r7, r4, #29
   32f82:	4307      	orrs	r7, r0
   32f84:	2080      	movs	r0, #128	; 0x80
   32f86:	08e4      	lsrs	r4, r4, #3
   32f88:	0300      	lsls	r0, r0, #12
   32f8a:	4204      	tst	r4, r0
   32f8c:	d0e7      	beq.n	32f5e <__aeabi_dadd+0x54e>
   32f8e:	08cb      	lsrs	r3, r1, #3
   32f90:	4203      	tst	r3, r0
   32f92:	d1e4      	bne.n	32f5e <__aeabi_dadd+0x54e>
   32f94:	08d2      	lsrs	r2, r2, #3
   32f96:	0749      	lsls	r1, r1, #29
   32f98:	4311      	orrs	r1, r2
   32f9a:	000f      	movs	r7, r1
   32f9c:	001c      	movs	r4, r3
   32f9e:	e7de      	b.n	32f5e <__aeabi_dadd+0x54e>
   32fa0:	2700      	movs	r7, #0
   32fa2:	2400      	movs	r4, #0
   32fa4:	e5d5      	b.n	32b52 <__aeabi_dadd+0x142>
   32fa6:	2100      	movs	r1, #0
   32fa8:	e76b      	b.n	32e82 <__aeabi_dadd+0x472>
   32faa:	2500      	movs	r5, #0
   32fac:	2700      	movs	r7, #0
   32fae:	e5f3      	b.n	32b98 <__aeabi_dadd+0x188>
   32fb0:	464e      	mov	r6, r9
   32fb2:	0025      	movs	r5, r4
   32fb4:	3e20      	subs	r6, #32
   32fb6:	40f5      	lsrs	r5, r6
   32fb8:	464b      	mov	r3, r9
   32fba:	002e      	movs	r6, r5
   32fbc:	2b20      	cmp	r3, #32
   32fbe:	d02d      	beq.n	3301c <__aeabi_dadd+0x60c>
   32fc0:	2540      	movs	r5, #64	; 0x40
   32fc2:	1aed      	subs	r5, r5, r3
   32fc4:	40ac      	lsls	r4, r5
   32fc6:	4327      	orrs	r7, r4
   32fc8:	1e7c      	subs	r4, r7, #1
   32fca:	41a7      	sbcs	r7, r4
   32fcc:	2400      	movs	r4, #0
   32fce:	4337      	orrs	r7, r6
   32fd0:	e6c9      	b.n	32d66 <__aeabi_dadd+0x356>
   32fd2:	2480      	movs	r4, #128	; 0x80
   32fd4:	2500      	movs	r5, #0
   32fd6:	0324      	lsls	r4, r4, #12
   32fd8:	4e13      	ldr	r6, [pc, #76]	; (33028 <__aeabi_dadd+0x618>)
   32fda:	2700      	movs	r7, #0
   32fdc:	e5dc      	b.n	32b98 <__aeabi_dadd+0x188>
   32fde:	4327      	orrs	r7, r4
   32fe0:	1e7c      	subs	r4, r7, #1
   32fe2:	41a7      	sbcs	r7, r4
   32fe4:	2400      	movs	r4, #0
   32fe6:	e779      	b.n	32edc <__aeabi_dadd+0x4cc>
   32fe8:	000c      	movs	r4, r1
   32fea:	0017      	movs	r7, r2
   32fec:	4e0e      	ldr	r6, [pc, #56]	; (33028 <__aeabi_dadd+0x618>)
   32fee:	e593      	b.n	32b18 <__aeabi_dadd+0x108>
   32ff0:	000c      	movs	r4, r1
   32ff2:	0017      	movs	r7, r2
   32ff4:	e590      	b.n	32b18 <__aeabi_dadd+0x108>
   32ff6:	4656      	mov	r6, sl
   32ff8:	0023      	movs	r3, r4
   32ffa:	3e20      	subs	r6, #32
   32ffc:	40f3      	lsrs	r3, r6
   32ffe:	4699      	mov	r9, r3
   33000:	4653      	mov	r3, sl
   33002:	2b20      	cmp	r3, #32
   33004:	d00e      	beq.n	33024 <__aeabi_dadd+0x614>
   33006:	2340      	movs	r3, #64	; 0x40
   33008:	4656      	mov	r6, sl
   3300a:	1b9b      	subs	r3, r3, r6
   3300c:	409c      	lsls	r4, r3
   3300e:	4327      	orrs	r7, r4
   33010:	1e7c      	subs	r4, r7, #1
   33012:	41a7      	sbcs	r7, r4
   33014:	464b      	mov	r3, r9
   33016:	2400      	movs	r4, #0
   33018:	431f      	orrs	r7, r3
   3301a:	e75f      	b.n	32edc <__aeabi_dadd+0x4cc>
   3301c:	2400      	movs	r4, #0
   3301e:	e7d2      	b.n	32fc6 <__aeabi_dadd+0x5b6>
   33020:	0017      	movs	r7, r2
   33022:	e5b2      	b.n	32b8a <__aeabi_dadd+0x17a>
   33024:	2400      	movs	r4, #0
   33026:	e7f2      	b.n	3300e <__aeabi_dadd+0x5fe>
   33028:	000007ff 	.word	0x000007ff
   3302c:	ff7fffff 	.word	0xff7fffff

00033030 <__aeabi_ddiv>:
   33030:	b5f0      	push	{r4, r5, r6, r7, lr}
   33032:	4657      	mov	r7, sl
   33034:	4645      	mov	r5, r8
   33036:	46de      	mov	lr, fp
   33038:	464e      	mov	r6, r9
   3303a:	b5e0      	push	{r5, r6, r7, lr}
   3303c:	004c      	lsls	r4, r1, #1
   3303e:	030e      	lsls	r6, r1, #12
   33040:	b087      	sub	sp, #28
   33042:	4683      	mov	fp, r0
   33044:	4692      	mov	sl, r2
   33046:	001d      	movs	r5, r3
   33048:	4680      	mov	r8, r0
   3304a:	0b36      	lsrs	r6, r6, #12
   3304c:	0d64      	lsrs	r4, r4, #21
   3304e:	0fcf      	lsrs	r7, r1, #31
   33050:	2c00      	cmp	r4, #0
   33052:	d04f      	beq.n	330f4 <__aeabi_ddiv+0xc4>
   33054:	4b6f      	ldr	r3, [pc, #444]	; (33214 <__aeabi_ddiv+0x1e4>)
   33056:	429c      	cmp	r4, r3
   33058:	d035      	beq.n	330c6 <__aeabi_ddiv+0x96>
   3305a:	2380      	movs	r3, #128	; 0x80
   3305c:	0f42      	lsrs	r2, r0, #29
   3305e:	041b      	lsls	r3, r3, #16
   33060:	00f6      	lsls	r6, r6, #3
   33062:	4313      	orrs	r3, r2
   33064:	4333      	orrs	r3, r6
   33066:	4699      	mov	r9, r3
   33068:	00c3      	lsls	r3, r0, #3
   3306a:	4698      	mov	r8, r3
   3306c:	4b6a      	ldr	r3, [pc, #424]	; (33218 <__aeabi_ddiv+0x1e8>)
   3306e:	2600      	movs	r6, #0
   33070:	469c      	mov	ip, r3
   33072:	2300      	movs	r3, #0
   33074:	4464      	add	r4, ip
   33076:	9303      	str	r3, [sp, #12]
   33078:	032b      	lsls	r3, r5, #12
   3307a:	0b1b      	lsrs	r3, r3, #12
   3307c:	469b      	mov	fp, r3
   3307e:	006b      	lsls	r3, r5, #1
   33080:	0fed      	lsrs	r5, r5, #31
   33082:	4650      	mov	r0, sl
   33084:	0d5b      	lsrs	r3, r3, #21
   33086:	9501      	str	r5, [sp, #4]
   33088:	d05e      	beq.n	33148 <__aeabi_ddiv+0x118>
   3308a:	4a62      	ldr	r2, [pc, #392]	; (33214 <__aeabi_ddiv+0x1e4>)
   3308c:	4293      	cmp	r3, r2
   3308e:	d053      	beq.n	33138 <__aeabi_ddiv+0x108>
   33090:	465a      	mov	r2, fp
   33092:	00d1      	lsls	r1, r2, #3
   33094:	2280      	movs	r2, #128	; 0x80
   33096:	0f40      	lsrs	r0, r0, #29
   33098:	0412      	lsls	r2, r2, #16
   3309a:	4302      	orrs	r2, r0
   3309c:	430a      	orrs	r2, r1
   3309e:	4693      	mov	fp, r2
   330a0:	4652      	mov	r2, sl
   330a2:	00d1      	lsls	r1, r2, #3
   330a4:	4a5c      	ldr	r2, [pc, #368]	; (33218 <__aeabi_ddiv+0x1e8>)
   330a6:	4694      	mov	ip, r2
   330a8:	2200      	movs	r2, #0
   330aa:	4463      	add	r3, ip
   330ac:	0038      	movs	r0, r7
   330ae:	4068      	eors	r0, r5
   330b0:	4684      	mov	ip, r0
   330b2:	9002      	str	r0, [sp, #8]
   330b4:	1ae4      	subs	r4, r4, r3
   330b6:	4316      	orrs	r6, r2
   330b8:	2e0f      	cmp	r6, #15
   330ba:	d900      	bls.n	330be <__aeabi_ddiv+0x8e>
   330bc:	e0b4      	b.n	33228 <__aeabi_ddiv+0x1f8>
   330be:	4b57      	ldr	r3, [pc, #348]	; (3321c <__aeabi_ddiv+0x1ec>)
   330c0:	00b6      	lsls	r6, r6, #2
   330c2:	599b      	ldr	r3, [r3, r6]
   330c4:	469f      	mov	pc, r3
   330c6:	0003      	movs	r3, r0
   330c8:	4333      	orrs	r3, r6
   330ca:	4699      	mov	r9, r3
   330cc:	d16c      	bne.n	331a8 <__aeabi_ddiv+0x178>
   330ce:	2300      	movs	r3, #0
   330d0:	4698      	mov	r8, r3
   330d2:	3302      	adds	r3, #2
   330d4:	2608      	movs	r6, #8
   330d6:	9303      	str	r3, [sp, #12]
   330d8:	e7ce      	b.n	33078 <__aeabi_ddiv+0x48>
   330da:	46cb      	mov	fp, r9
   330dc:	4641      	mov	r1, r8
   330de:	9a03      	ldr	r2, [sp, #12]
   330e0:	9701      	str	r7, [sp, #4]
   330e2:	2a02      	cmp	r2, #2
   330e4:	d165      	bne.n	331b2 <__aeabi_ddiv+0x182>
   330e6:	9b01      	ldr	r3, [sp, #4]
   330e8:	4c4a      	ldr	r4, [pc, #296]	; (33214 <__aeabi_ddiv+0x1e4>)
   330ea:	469c      	mov	ip, r3
   330ec:	2300      	movs	r3, #0
   330ee:	2200      	movs	r2, #0
   330f0:	4698      	mov	r8, r3
   330f2:	e06b      	b.n	331cc <__aeabi_ddiv+0x19c>
   330f4:	0003      	movs	r3, r0
   330f6:	4333      	orrs	r3, r6
   330f8:	4699      	mov	r9, r3
   330fa:	d04e      	beq.n	3319a <__aeabi_ddiv+0x16a>
   330fc:	2e00      	cmp	r6, #0
   330fe:	d100      	bne.n	33102 <__aeabi_ddiv+0xd2>
   33100:	e1bc      	b.n	3347c <__aeabi_ddiv+0x44c>
   33102:	0030      	movs	r0, r6
   33104:	f001 f8ca 	bl	3429c <__clzsi2>
   33108:	0003      	movs	r3, r0
   3310a:	3b0b      	subs	r3, #11
   3310c:	2b1c      	cmp	r3, #28
   3310e:	dd00      	ble.n	33112 <__aeabi_ddiv+0xe2>
   33110:	e1ac      	b.n	3346c <__aeabi_ddiv+0x43c>
   33112:	221d      	movs	r2, #29
   33114:	1ad3      	subs	r3, r2, r3
   33116:	465a      	mov	r2, fp
   33118:	0001      	movs	r1, r0
   3311a:	40da      	lsrs	r2, r3
   3311c:	3908      	subs	r1, #8
   3311e:	408e      	lsls	r6, r1
   33120:	0013      	movs	r3, r2
   33122:	4333      	orrs	r3, r6
   33124:	4699      	mov	r9, r3
   33126:	465b      	mov	r3, fp
   33128:	408b      	lsls	r3, r1
   3312a:	4698      	mov	r8, r3
   3312c:	2300      	movs	r3, #0
   3312e:	4c3c      	ldr	r4, [pc, #240]	; (33220 <__aeabi_ddiv+0x1f0>)
   33130:	2600      	movs	r6, #0
   33132:	1a24      	subs	r4, r4, r0
   33134:	9303      	str	r3, [sp, #12]
   33136:	e79f      	b.n	33078 <__aeabi_ddiv+0x48>
   33138:	4651      	mov	r1, sl
   3313a:	465a      	mov	r2, fp
   3313c:	4311      	orrs	r1, r2
   3313e:	d129      	bne.n	33194 <__aeabi_ddiv+0x164>
   33140:	2200      	movs	r2, #0
   33142:	4693      	mov	fp, r2
   33144:	3202      	adds	r2, #2
   33146:	e7b1      	b.n	330ac <__aeabi_ddiv+0x7c>
   33148:	4659      	mov	r1, fp
   3314a:	4301      	orrs	r1, r0
   3314c:	d01e      	beq.n	3318c <__aeabi_ddiv+0x15c>
   3314e:	465b      	mov	r3, fp
   33150:	2b00      	cmp	r3, #0
   33152:	d100      	bne.n	33156 <__aeabi_ddiv+0x126>
   33154:	e19e      	b.n	33494 <__aeabi_ddiv+0x464>
   33156:	4658      	mov	r0, fp
   33158:	f001 f8a0 	bl	3429c <__clzsi2>
   3315c:	0003      	movs	r3, r0
   3315e:	3b0b      	subs	r3, #11
   33160:	2b1c      	cmp	r3, #28
   33162:	dd00      	ble.n	33166 <__aeabi_ddiv+0x136>
   33164:	e18f      	b.n	33486 <__aeabi_ddiv+0x456>
   33166:	0002      	movs	r2, r0
   33168:	4659      	mov	r1, fp
   3316a:	3a08      	subs	r2, #8
   3316c:	4091      	lsls	r1, r2
   3316e:	468b      	mov	fp, r1
   33170:	211d      	movs	r1, #29
   33172:	1acb      	subs	r3, r1, r3
   33174:	4651      	mov	r1, sl
   33176:	40d9      	lsrs	r1, r3
   33178:	000b      	movs	r3, r1
   3317a:	4659      	mov	r1, fp
   3317c:	430b      	orrs	r3, r1
   3317e:	4651      	mov	r1, sl
   33180:	469b      	mov	fp, r3
   33182:	4091      	lsls	r1, r2
   33184:	4b26      	ldr	r3, [pc, #152]	; (33220 <__aeabi_ddiv+0x1f0>)
   33186:	2200      	movs	r2, #0
   33188:	1a1b      	subs	r3, r3, r0
   3318a:	e78f      	b.n	330ac <__aeabi_ddiv+0x7c>
   3318c:	2300      	movs	r3, #0
   3318e:	2201      	movs	r2, #1
   33190:	469b      	mov	fp, r3
   33192:	e78b      	b.n	330ac <__aeabi_ddiv+0x7c>
   33194:	4651      	mov	r1, sl
   33196:	2203      	movs	r2, #3
   33198:	e788      	b.n	330ac <__aeabi_ddiv+0x7c>
   3319a:	2300      	movs	r3, #0
   3319c:	4698      	mov	r8, r3
   3319e:	3301      	adds	r3, #1
   331a0:	2604      	movs	r6, #4
   331a2:	2400      	movs	r4, #0
   331a4:	9303      	str	r3, [sp, #12]
   331a6:	e767      	b.n	33078 <__aeabi_ddiv+0x48>
   331a8:	2303      	movs	r3, #3
   331aa:	46b1      	mov	r9, r6
   331ac:	9303      	str	r3, [sp, #12]
   331ae:	260c      	movs	r6, #12
   331b0:	e762      	b.n	33078 <__aeabi_ddiv+0x48>
   331b2:	2a03      	cmp	r2, #3
   331b4:	d100      	bne.n	331b8 <__aeabi_ddiv+0x188>
   331b6:	e25c      	b.n	33672 <__aeabi_ddiv+0x642>
   331b8:	9b01      	ldr	r3, [sp, #4]
   331ba:	2a01      	cmp	r2, #1
   331bc:	d000      	beq.n	331c0 <__aeabi_ddiv+0x190>
   331be:	e1e4      	b.n	3358a <__aeabi_ddiv+0x55a>
   331c0:	4013      	ands	r3, r2
   331c2:	469c      	mov	ip, r3
   331c4:	2300      	movs	r3, #0
   331c6:	2400      	movs	r4, #0
   331c8:	2200      	movs	r2, #0
   331ca:	4698      	mov	r8, r3
   331cc:	2100      	movs	r1, #0
   331ce:	0312      	lsls	r2, r2, #12
   331d0:	0b13      	lsrs	r3, r2, #12
   331d2:	0d0a      	lsrs	r2, r1, #20
   331d4:	0512      	lsls	r2, r2, #20
   331d6:	431a      	orrs	r2, r3
   331d8:	0523      	lsls	r3, r4, #20
   331da:	4c12      	ldr	r4, [pc, #72]	; (33224 <__aeabi_ddiv+0x1f4>)
   331dc:	4640      	mov	r0, r8
   331de:	4022      	ands	r2, r4
   331e0:	4313      	orrs	r3, r2
   331e2:	4662      	mov	r2, ip
   331e4:	005b      	lsls	r3, r3, #1
   331e6:	07d2      	lsls	r2, r2, #31
   331e8:	085b      	lsrs	r3, r3, #1
   331ea:	4313      	orrs	r3, r2
   331ec:	0019      	movs	r1, r3
   331ee:	b007      	add	sp, #28
   331f0:	bc3c      	pop	{r2, r3, r4, r5}
   331f2:	4690      	mov	r8, r2
   331f4:	4699      	mov	r9, r3
   331f6:	46a2      	mov	sl, r4
   331f8:	46ab      	mov	fp, r5
   331fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   331fc:	2300      	movs	r3, #0
   331fe:	2280      	movs	r2, #128	; 0x80
   33200:	469c      	mov	ip, r3
   33202:	0312      	lsls	r2, r2, #12
   33204:	4698      	mov	r8, r3
   33206:	4c03      	ldr	r4, [pc, #12]	; (33214 <__aeabi_ddiv+0x1e4>)
   33208:	e7e0      	b.n	331cc <__aeabi_ddiv+0x19c>
   3320a:	2300      	movs	r3, #0
   3320c:	4c01      	ldr	r4, [pc, #4]	; (33214 <__aeabi_ddiv+0x1e4>)
   3320e:	2200      	movs	r2, #0
   33210:	4698      	mov	r8, r3
   33212:	e7db      	b.n	331cc <__aeabi_ddiv+0x19c>
   33214:	000007ff 	.word	0x000007ff
   33218:	fffffc01 	.word	0xfffffc01
   3321c:	0003992c 	.word	0x0003992c
   33220:	fffffc0d 	.word	0xfffffc0d
   33224:	800fffff 	.word	0x800fffff
   33228:	45d9      	cmp	r9, fp
   3322a:	d900      	bls.n	3322e <__aeabi_ddiv+0x1fe>
   3322c:	e139      	b.n	334a2 <__aeabi_ddiv+0x472>
   3322e:	d100      	bne.n	33232 <__aeabi_ddiv+0x202>
   33230:	e134      	b.n	3349c <__aeabi_ddiv+0x46c>
   33232:	2300      	movs	r3, #0
   33234:	4646      	mov	r6, r8
   33236:	464d      	mov	r5, r9
   33238:	469a      	mov	sl, r3
   3323a:	3c01      	subs	r4, #1
   3323c:	465b      	mov	r3, fp
   3323e:	0e0a      	lsrs	r2, r1, #24
   33240:	021b      	lsls	r3, r3, #8
   33242:	431a      	orrs	r2, r3
   33244:	020b      	lsls	r3, r1, #8
   33246:	0c17      	lsrs	r7, r2, #16
   33248:	9303      	str	r3, [sp, #12]
   3324a:	0413      	lsls	r3, r2, #16
   3324c:	0c1b      	lsrs	r3, r3, #16
   3324e:	0039      	movs	r1, r7
   33250:	0028      	movs	r0, r5
   33252:	4690      	mov	r8, r2
   33254:	9301      	str	r3, [sp, #4]
   33256:	f7ff f8ab 	bl	323b0 <__udivsi3>
   3325a:	0002      	movs	r2, r0
   3325c:	9b01      	ldr	r3, [sp, #4]
   3325e:	4683      	mov	fp, r0
   33260:	435a      	muls	r2, r3
   33262:	0028      	movs	r0, r5
   33264:	0039      	movs	r1, r7
   33266:	4691      	mov	r9, r2
   33268:	f7ff f928 	bl	324bc <__aeabi_uidivmod>
   3326c:	0c35      	lsrs	r5, r6, #16
   3326e:	0409      	lsls	r1, r1, #16
   33270:	430d      	orrs	r5, r1
   33272:	45a9      	cmp	r9, r5
   33274:	d90d      	bls.n	33292 <__aeabi_ddiv+0x262>
   33276:	465b      	mov	r3, fp
   33278:	4445      	add	r5, r8
   3327a:	3b01      	subs	r3, #1
   3327c:	45a8      	cmp	r8, r5
   3327e:	d900      	bls.n	33282 <__aeabi_ddiv+0x252>
   33280:	e13a      	b.n	334f8 <__aeabi_ddiv+0x4c8>
   33282:	45a9      	cmp	r9, r5
   33284:	d800      	bhi.n	33288 <__aeabi_ddiv+0x258>
   33286:	e137      	b.n	334f8 <__aeabi_ddiv+0x4c8>
   33288:	2302      	movs	r3, #2
   3328a:	425b      	negs	r3, r3
   3328c:	469c      	mov	ip, r3
   3328e:	4445      	add	r5, r8
   33290:	44e3      	add	fp, ip
   33292:	464b      	mov	r3, r9
   33294:	1aeb      	subs	r3, r5, r3
   33296:	0039      	movs	r1, r7
   33298:	0018      	movs	r0, r3
   3329a:	9304      	str	r3, [sp, #16]
   3329c:	f7ff f888 	bl	323b0 <__udivsi3>
   332a0:	9b01      	ldr	r3, [sp, #4]
   332a2:	0005      	movs	r5, r0
   332a4:	4343      	muls	r3, r0
   332a6:	0039      	movs	r1, r7
   332a8:	9804      	ldr	r0, [sp, #16]
   332aa:	4699      	mov	r9, r3
   332ac:	f7ff f906 	bl	324bc <__aeabi_uidivmod>
   332b0:	0433      	lsls	r3, r6, #16
   332b2:	0409      	lsls	r1, r1, #16
   332b4:	0c1b      	lsrs	r3, r3, #16
   332b6:	430b      	orrs	r3, r1
   332b8:	4599      	cmp	r9, r3
   332ba:	d909      	bls.n	332d0 <__aeabi_ddiv+0x2a0>
   332bc:	4443      	add	r3, r8
   332be:	1e6a      	subs	r2, r5, #1
   332c0:	4598      	cmp	r8, r3
   332c2:	d900      	bls.n	332c6 <__aeabi_ddiv+0x296>
   332c4:	e11a      	b.n	334fc <__aeabi_ddiv+0x4cc>
   332c6:	4599      	cmp	r9, r3
   332c8:	d800      	bhi.n	332cc <__aeabi_ddiv+0x29c>
   332ca:	e117      	b.n	334fc <__aeabi_ddiv+0x4cc>
   332cc:	3d02      	subs	r5, #2
   332ce:	4443      	add	r3, r8
   332d0:	464a      	mov	r2, r9
   332d2:	1a9b      	subs	r3, r3, r2
   332d4:	465a      	mov	r2, fp
   332d6:	0412      	lsls	r2, r2, #16
   332d8:	432a      	orrs	r2, r5
   332da:	9903      	ldr	r1, [sp, #12]
   332dc:	4693      	mov	fp, r2
   332de:	0c10      	lsrs	r0, r2, #16
   332e0:	0c0a      	lsrs	r2, r1, #16
   332e2:	4691      	mov	r9, r2
   332e4:	0409      	lsls	r1, r1, #16
   332e6:	465a      	mov	r2, fp
   332e8:	0c09      	lsrs	r1, r1, #16
   332ea:	464e      	mov	r6, r9
   332ec:	000d      	movs	r5, r1
   332ee:	0412      	lsls	r2, r2, #16
   332f0:	0c12      	lsrs	r2, r2, #16
   332f2:	4345      	muls	r5, r0
   332f4:	9105      	str	r1, [sp, #20]
   332f6:	4351      	muls	r1, r2
   332f8:	4372      	muls	r2, r6
   332fa:	4370      	muls	r0, r6
   332fc:	1952      	adds	r2, r2, r5
   332fe:	0c0e      	lsrs	r6, r1, #16
   33300:	18b2      	adds	r2, r6, r2
   33302:	4295      	cmp	r5, r2
   33304:	d903      	bls.n	3330e <__aeabi_ddiv+0x2de>
   33306:	2580      	movs	r5, #128	; 0x80
   33308:	026d      	lsls	r5, r5, #9
   3330a:	46ac      	mov	ip, r5
   3330c:	4460      	add	r0, ip
   3330e:	0c15      	lsrs	r5, r2, #16
   33310:	0409      	lsls	r1, r1, #16
   33312:	0412      	lsls	r2, r2, #16
   33314:	0c09      	lsrs	r1, r1, #16
   33316:	1828      	adds	r0, r5, r0
   33318:	1852      	adds	r2, r2, r1
   3331a:	4283      	cmp	r3, r0
   3331c:	d200      	bcs.n	33320 <__aeabi_ddiv+0x2f0>
   3331e:	e0ce      	b.n	334be <__aeabi_ddiv+0x48e>
   33320:	d100      	bne.n	33324 <__aeabi_ddiv+0x2f4>
   33322:	e0c8      	b.n	334b6 <__aeabi_ddiv+0x486>
   33324:	1a1d      	subs	r5, r3, r0
   33326:	4653      	mov	r3, sl
   33328:	1a9e      	subs	r6, r3, r2
   3332a:	45b2      	cmp	sl, r6
   3332c:	4192      	sbcs	r2, r2
   3332e:	4252      	negs	r2, r2
   33330:	1aab      	subs	r3, r5, r2
   33332:	469a      	mov	sl, r3
   33334:	4598      	cmp	r8, r3
   33336:	d100      	bne.n	3333a <__aeabi_ddiv+0x30a>
   33338:	e117      	b.n	3356a <__aeabi_ddiv+0x53a>
   3333a:	0039      	movs	r1, r7
   3333c:	0018      	movs	r0, r3
   3333e:	f7ff f837 	bl	323b0 <__udivsi3>
   33342:	9b01      	ldr	r3, [sp, #4]
   33344:	0005      	movs	r5, r0
   33346:	4343      	muls	r3, r0
   33348:	0039      	movs	r1, r7
   3334a:	4650      	mov	r0, sl
   3334c:	9304      	str	r3, [sp, #16]
   3334e:	f7ff f8b5 	bl	324bc <__aeabi_uidivmod>
   33352:	9804      	ldr	r0, [sp, #16]
   33354:	040b      	lsls	r3, r1, #16
   33356:	0c31      	lsrs	r1, r6, #16
   33358:	4319      	orrs	r1, r3
   3335a:	4288      	cmp	r0, r1
   3335c:	d909      	bls.n	33372 <__aeabi_ddiv+0x342>
   3335e:	4441      	add	r1, r8
   33360:	1e6b      	subs	r3, r5, #1
   33362:	4588      	cmp	r8, r1
   33364:	d900      	bls.n	33368 <__aeabi_ddiv+0x338>
   33366:	e107      	b.n	33578 <__aeabi_ddiv+0x548>
   33368:	4288      	cmp	r0, r1
   3336a:	d800      	bhi.n	3336e <__aeabi_ddiv+0x33e>
   3336c:	e104      	b.n	33578 <__aeabi_ddiv+0x548>
   3336e:	3d02      	subs	r5, #2
   33370:	4441      	add	r1, r8
   33372:	9b04      	ldr	r3, [sp, #16]
   33374:	1acb      	subs	r3, r1, r3
   33376:	0018      	movs	r0, r3
   33378:	0039      	movs	r1, r7
   3337a:	9304      	str	r3, [sp, #16]
   3337c:	f7ff f818 	bl	323b0 <__udivsi3>
   33380:	9b01      	ldr	r3, [sp, #4]
   33382:	4682      	mov	sl, r0
   33384:	4343      	muls	r3, r0
   33386:	0039      	movs	r1, r7
   33388:	9804      	ldr	r0, [sp, #16]
   3338a:	9301      	str	r3, [sp, #4]
   3338c:	f7ff f896 	bl	324bc <__aeabi_uidivmod>
   33390:	9801      	ldr	r0, [sp, #4]
   33392:	040b      	lsls	r3, r1, #16
   33394:	0431      	lsls	r1, r6, #16
   33396:	0c09      	lsrs	r1, r1, #16
   33398:	4319      	orrs	r1, r3
   3339a:	4288      	cmp	r0, r1
   3339c:	d90d      	bls.n	333ba <__aeabi_ddiv+0x38a>
   3339e:	4653      	mov	r3, sl
   333a0:	4441      	add	r1, r8
   333a2:	3b01      	subs	r3, #1
   333a4:	4588      	cmp	r8, r1
   333a6:	d900      	bls.n	333aa <__aeabi_ddiv+0x37a>
   333a8:	e0e8      	b.n	3357c <__aeabi_ddiv+0x54c>
   333aa:	4288      	cmp	r0, r1
   333ac:	d800      	bhi.n	333b0 <__aeabi_ddiv+0x380>
   333ae:	e0e5      	b.n	3357c <__aeabi_ddiv+0x54c>
   333b0:	2302      	movs	r3, #2
   333b2:	425b      	negs	r3, r3
   333b4:	469c      	mov	ip, r3
   333b6:	4441      	add	r1, r8
   333b8:	44e2      	add	sl, ip
   333ba:	9b01      	ldr	r3, [sp, #4]
   333bc:	042d      	lsls	r5, r5, #16
   333be:	1ace      	subs	r6, r1, r3
   333c0:	4651      	mov	r1, sl
   333c2:	4329      	orrs	r1, r5
   333c4:	9d05      	ldr	r5, [sp, #20]
   333c6:	464f      	mov	r7, r9
   333c8:	002a      	movs	r2, r5
   333ca:	040b      	lsls	r3, r1, #16
   333cc:	0c08      	lsrs	r0, r1, #16
   333ce:	0c1b      	lsrs	r3, r3, #16
   333d0:	435a      	muls	r2, r3
   333d2:	4345      	muls	r5, r0
   333d4:	437b      	muls	r3, r7
   333d6:	4378      	muls	r0, r7
   333d8:	195b      	adds	r3, r3, r5
   333da:	0c17      	lsrs	r7, r2, #16
   333dc:	18fb      	adds	r3, r7, r3
   333de:	429d      	cmp	r5, r3
   333e0:	d903      	bls.n	333ea <__aeabi_ddiv+0x3ba>
   333e2:	2580      	movs	r5, #128	; 0x80
   333e4:	026d      	lsls	r5, r5, #9
   333e6:	46ac      	mov	ip, r5
   333e8:	4460      	add	r0, ip
   333ea:	0c1d      	lsrs	r5, r3, #16
   333ec:	0412      	lsls	r2, r2, #16
   333ee:	041b      	lsls	r3, r3, #16
   333f0:	0c12      	lsrs	r2, r2, #16
   333f2:	1828      	adds	r0, r5, r0
   333f4:	189b      	adds	r3, r3, r2
   333f6:	4286      	cmp	r6, r0
   333f8:	d200      	bcs.n	333fc <__aeabi_ddiv+0x3cc>
   333fa:	e093      	b.n	33524 <__aeabi_ddiv+0x4f4>
   333fc:	d100      	bne.n	33400 <__aeabi_ddiv+0x3d0>
   333fe:	e08e      	b.n	3351e <__aeabi_ddiv+0x4ee>
   33400:	2301      	movs	r3, #1
   33402:	4319      	orrs	r1, r3
   33404:	4ba0      	ldr	r3, [pc, #640]	; (33688 <__aeabi_ddiv+0x658>)
   33406:	18e3      	adds	r3, r4, r3
   33408:	2b00      	cmp	r3, #0
   3340a:	dc00      	bgt.n	3340e <__aeabi_ddiv+0x3de>
   3340c:	e099      	b.n	33542 <__aeabi_ddiv+0x512>
   3340e:	074a      	lsls	r2, r1, #29
   33410:	d000      	beq.n	33414 <__aeabi_ddiv+0x3e4>
   33412:	e09e      	b.n	33552 <__aeabi_ddiv+0x522>
   33414:	465a      	mov	r2, fp
   33416:	01d2      	lsls	r2, r2, #7
   33418:	d506      	bpl.n	33428 <__aeabi_ddiv+0x3f8>
   3341a:	465a      	mov	r2, fp
   3341c:	4b9b      	ldr	r3, [pc, #620]	; (3368c <__aeabi_ddiv+0x65c>)
   3341e:	401a      	ands	r2, r3
   33420:	2380      	movs	r3, #128	; 0x80
   33422:	4693      	mov	fp, r2
   33424:	00db      	lsls	r3, r3, #3
   33426:	18e3      	adds	r3, r4, r3
   33428:	4a99      	ldr	r2, [pc, #612]	; (33690 <__aeabi_ddiv+0x660>)
   3342a:	4293      	cmp	r3, r2
   3342c:	dd68      	ble.n	33500 <__aeabi_ddiv+0x4d0>
   3342e:	2301      	movs	r3, #1
   33430:	9a02      	ldr	r2, [sp, #8]
   33432:	4c98      	ldr	r4, [pc, #608]	; (33694 <__aeabi_ddiv+0x664>)
   33434:	401a      	ands	r2, r3
   33436:	2300      	movs	r3, #0
   33438:	4694      	mov	ip, r2
   3343a:	4698      	mov	r8, r3
   3343c:	2200      	movs	r2, #0
   3343e:	e6c5      	b.n	331cc <__aeabi_ddiv+0x19c>
   33440:	2280      	movs	r2, #128	; 0x80
   33442:	464b      	mov	r3, r9
   33444:	0312      	lsls	r2, r2, #12
   33446:	4213      	tst	r3, r2
   33448:	d00a      	beq.n	33460 <__aeabi_ddiv+0x430>
   3344a:	465b      	mov	r3, fp
   3344c:	4213      	tst	r3, r2
   3344e:	d106      	bne.n	3345e <__aeabi_ddiv+0x42e>
   33450:	431a      	orrs	r2, r3
   33452:	0312      	lsls	r2, r2, #12
   33454:	0b12      	lsrs	r2, r2, #12
   33456:	46ac      	mov	ip, r5
   33458:	4688      	mov	r8, r1
   3345a:	4c8e      	ldr	r4, [pc, #568]	; (33694 <__aeabi_ddiv+0x664>)
   3345c:	e6b6      	b.n	331cc <__aeabi_ddiv+0x19c>
   3345e:	464b      	mov	r3, r9
   33460:	431a      	orrs	r2, r3
   33462:	0312      	lsls	r2, r2, #12
   33464:	0b12      	lsrs	r2, r2, #12
   33466:	46bc      	mov	ip, r7
   33468:	4c8a      	ldr	r4, [pc, #552]	; (33694 <__aeabi_ddiv+0x664>)
   3346a:	e6af      	b.n	331cc <__aeabi_ddiv+0x19c>
   3346c:	0003      	movs	r3, r0
   3346e:	465a      	mov	r2, fp
   33470:	3b28      	subs	r3, #40	; 0x28
   33472:	409a      	lsls	r2, r3
   33474:	2300      	movs	r3, #0
   33476:	4691      	mov	r9, r2
   33478:	4698      	mov	r8, r3
   3347a:	e657      	b.n	3312c <__aeabi_ddiv+0xfc>
   3347c:	4658      	mov	r0, fp
   3347e:	f000 ff0d 	bl	3429c <__clzsi2>
   33482:	3020      	adds	r0, #32
   33484:	e640      	b.n	33108 <__aeabi_ddiv+0xd8>
   33486:	0003      	movs	r3, r0
   33488:	4652      	mov	r2, sl
   3348a:	3b28      	subs	r3, #40	; 0x28
   3348c:	409a      	lsls	r2, r3
   3348e:	2100      	movs	r1, #0
   33490:	4693      	mov	fp, r2
   33492:	e677      	b.n	33184 <__aeabi_ddiv+0x154>
   33494:	f000 ff02 	bl	3429c <__clzsi2>
   33498:	3020      	adds	r0, #32
   3349a:	e65f      	b.n	3315c <__aeabi_ddiv+0x12c>
   3349c:	4588      	cmp	r8, r1
   3349e:	d200      	bcs.n	334a2 <__aeabi_ddiv+0x472>
   334a0:	e6c7      	b.n	33232 <__aeabi_ddiv+0x202>
   334a2:	464b      	mov	r3, r9
   334a4:	07de      	lsls	r6, r3, #31
   334a6:	085d      	lsrs	r5, r3, #1
   334a8:	4643      	mov	r3, r8
   334aa:	085b      	lsrs	r3, r3, #1
   334ac:	431e      	orrs	r6, r3
   334ae:	4643      	mov	r3, r8
   334b0:	07db      	lsls	r3, r3, #31
   334b2:	469a      	mov	sl, r3
   334b4:	e6c2      	b.n	3323c <__aeabi_ddiv+0x20c>
   334b6:	2500      	movs	r5, #0
   334b8:	4592      	cmp	sl, r2
   334ba:	d300      	bcc.n	334be <__aeabi_ddiv+0x48e>
   334bc:	e733      	b.n	33326 <__aeabi_ddiv+0x2f6>
   334be:	9e03      	ldr	r6, [sp, #12]
   334c0:	4659      	mov	r1, fp
   334c2:	46b4      	mov	ip, r6
   334c4:	44e2      	add	sl, ip
   334c6:	45b2      	cmp	sl, r6
   334c8:	41ad      	sbcs	r5, r5
   334ca:	426d      	negs	r5, r5
   334cc:	4445      	add	r5, r8
   334ce:	18eb      	adds	r3, r5, r3
   334d0:	3901      	subs	r1, #1
   334d2:	4598      	cmp	r8, r3
   334d4:	d207      	bcs.n	334e6 <__aeabi_ddiv+0x4b6>
   334d6:	4298      	cmp	r0, r3
   334d8:	d900      	bls.n	334dc <__aeabi_ddiv+0x4ac>
   334da:	e07f      	b.n	335dc <__aeabi_ddiv+0x5ac>
   334dc:	d100      	bne.n	334e0 <__aeabi_ddiv+0x4b0>
   334de:	e0bc      	b.n	3365a <__aeabi_ddiv+0x62a>
   334e0:	1a1d      	subs	r5, r3, r0
   334e2:	468b      	mov	fp, r1
   334e4:	e71f      	b.n	33326 <__aeabi_ddiv+0x2f6>
   334e6:	4598      	cmp	r8, r3
   334e8:	d1fa      	bne.n	334e0 <__aeabi_ddiv+0x4b0>
   334ea:	9d03      	ldr	r5, [sp, #12]
   334ec:	4555      	cmp	r5, sl
   334ee:	d9f2      	bls.n	334d6 <__aeabi_ddiv+0x4a6>
   334f0:	4643      	mov	r3, r8
   334f2:	468b      	mov	fp, r1
   334f4:	1a1d      	subs	r5, r3, r0
   334f6:	e716      	b.n	33326 <__aeabi_ddiv+0x2f6>
   334f8:	469b      	mov	fp, r3
   334fa:	e6ca      	b.n	33292 <__aeabi_ddiv+0x262>
   334fc:	0015      	movs	r5, r2
   334fe:	e6e7      	b.n	332d0 <__aeabi_ddiv+0x2a0>
   33500:	465a      	mov	r2, fp
   33502:	08c9      	lsrs	r1, r1, #3
   33504:	0752      	lsls	r2, r2, #29
   33506:	430a      	orrs	r2, r1
   33508:	055b      	lsls	r3, r3, #21
   3350a:	4690      	mov	r8, r2
   3350c:	0d5c      	lsrs	r4, r3, #21
   3350e:	465a      	mov	r2, fp
   33510:	2301      	movs	r3, #1
   33512:	9902      	ldr	r1, [sp, #8]
   33514:	0252      	lsls	r2, r2, #9
   33516:	4019      	ands	r1, r3
   33518:	0b12      	lsrs	r2, r2, #12
   3351a:	468c      	mov	ip, r1
   3351c:	e656      	b.n	331cc <__aeabi_ddiv+0x19c>
   3351e:	2b00      	cmp	r3, #0
   33520:	d100      	bne.n	33524 <__aeabi_ddiv+0x4f4>
   33522:	e76f      	b.n	33404 <__aeabi_ddiv+0x3d4>
   33524:	4446      	add	r6, r8
   33526:	1e4a      	subs	r2, r1, #1
   33528:	45b0      	cmp	r8, r6
   3352a:	d929      	bls.n	33580 <__aeabi_ddiv+0x550>
   3352c:	0011      	movs	r1, r2
   3352e:	4286      	cmp	r6, r0
   33530:	d000      	beq.n	33534 <__aeabi_ddiv+0x504>
   33532:	e765      	b.n	33400 <__aeabi_ddiv+0x3d0>
   33534:	9a03      	ldr	r2, [sp, #12]
   33536:	4293      	cmp	r3, r2
   33538:	d000      	beq.n	3353c <__aeabi_ddiv+0x50c>
   3353a:	e761      	b.n	33400 <__aeabi_ddiv+0x3d0>
   3353c:	e762      	b.n	33404 <__aeabi_ddiv+0x3d4>
   3353e:	2101      	movs	r1, #1
   33540:	4249      	negs	r1, r1
   33542:	2001      	movs	r0, #1
   33544:	1ac2      	subs	r2, r0, r3
   33546:	2a38      	cmp	r2, #56	; 0x38
   33548:	dd21      	ble.n	3358e <__aeabi_ddiv+0x55e>
   3354a:	9b02      	ldr	r3, [sp, #8]
   3354c:	4003      	ands	r3, r0
   3354e:	469c      	mov	ip, r3
   33550:	e638      	b.n	331c4 <__aeabi_ddiv+0x194>
   33552:	220f      	movs	r2, #15
   33554:	400a      	ands	r2, r1
   33556:	2a04      	cmp	r2, #4
   33558:	d100      	bne.n	3355c <__aeabi_ddiv+0x52c>
   3355a:	e75b      	b.n	33414 <__aeabi_ddiv+0x3e4>
   3355c:	000a      	movs	r2, r1
   3355e:	1d11      	adds	r1, r2, #4
   33560:	4291      	cmp	r1, r2
   33562:	4192      	sbcs	r2, r2
   33564:	4252      	negs	r2, r2
   33566:	4493      	add	fp, r2
   33568:	e754      	b.n	33414 <__aeabi_ddiv+0x3e4>
   3356a:	4b47      	ldr	r3, [pc, #284]	; (33688 <__aeabi_ddiv+0x658>)
   3356c:	18e3      	adds	r3, r4, r3
   3356e:	2b00      	cmp	r3, #0
   33570:	dde5      	ble.n	3353e <__aeabi_ddiv+0x50e>
   33572:	2201      	movs	r2, #1
   33574:	4252      	negs	r2, r2
   33576:	e7f2      	b.n	3355e <__aeabi_ddiv+0x52e>
   33578:	001d      	movs	r5, r3
   3357a:	e6fa      	b.n	33372 <__aeabi_ddiv+0x342>
   3357c:	469a      	mov	sl, r3
   3357e:	e71c      	b.n	333ba <__aeabi_ddiv+0x38a>
   33580:	42b0      	cmp	r0, r6
   33582:	d839      	bhi.n	335f8 <__aeabi_ddiv+0x5c8>
   33584:	d06e      	beq.n	33664 <__aeabi_ddiv+0x634>
   33586:	0011      	movs	r1, r2
   33588:	e73a      	b.n	33400 <__aeabi_ddiv+0x3d0>
   3358a:	9302      	str	r3, [sp, #8]
   3358c:	e73a      	b.n	33404 <__aeabi_ddiv+0x3d4>
   3358e:	2a1f      	cmp	r2, #31
   33590:	dc3c      	bgt.n	3360c <__aeabi_ddiv+0x5dc>
   33592:	2320      	movs	r3, #32
   33594:	1a9b      	subs	r3, r3, r2
   33596:	000c      	movs	r4, r1
   33598:	4658      	mov	r0, fp
   3359a:	4099      	lsls	r1, r3
   3359c:	4098      	lsls	r0, r3
   3359e:	1e4b      	subs	r3, r1, #1
   335a0:	4199      	sbcs	r1, r3
   335a2:	465b      	mov	r3, fp
   335a4:	40d4      	lsrs	r4, r2
   335a6:	40d3      	lsrs	r3, r2
   335a8:	4320      	orrs	r0, r4
   335aa:	4308      	orrs	r0, r1
   335ac:	001a      	movs	r2, r3
   335ae:	0743      	lsls	r3, r0, #29
   335b0:	d009      	beq.n	335c6 <__aeabi_ddiv+0x596>
   335b2:	230f      	movs	r3, #15
   335b4:	4003      	ands	r3, r0
   335b6:	2b04      	cmp	r3, #4
   335b8:	d005      	beq.n	335c6 <__aeabi_ddiv+0x596>
   335ba:	0001      	movs	r1, r0
   335bc:	1d08      	adds	r0, r1, #4
   335be:	4288      	cmp	r0, r1
   335c0:	419b      	sbcs	r3, r3
   335c2:	425b      	negs	r3, r3
   335c4:	18d2      	adds	r2, r2, r3
   335c6:	0213      	lsls	r3, r2, #8
   335c8:	d53a      	bpl.n	33640 <__aeabi_ddiv+0x610>
   335ca:	2301      	movs	r3, #1
   335cc:	9a02      	ldr	r2, [sp, #8]
   335ce:	2401      	movs	r4, #1
   335d0:	401a      	ands	r2, r3
   335d2:	2300      	movs	r3, #0
   335d4:	4694      	mov	ip, r2
   335d6:	4698      	mov	r8, r3
   335d8:	2200      	movs	r2, #0
   335da:	e5f7      	b.n	331cc <__aeabi_ddiv+0x19c>
   335dc:	2102      	movs	r1, #2
   335de:	4249      	negs	r1, r1
   335e0:	468c      	mov	ip, r1
   335e2:	9d03      	ldr	r5, [sp, #12]
   335e4:	44e3      	add	fp, ip
   335e6:	46ac      	mov	ip, r5
   335e8:	44e2      	add	sl, ip
   335ea:	45aa      	cmp	sl, r5
   335ec:	41ad      	sbcs	r5, r5
   335ee:	426d      	negs	r5, r5
   335f0:	4445      	add	r5, r8
   335f2:	18ed      	adds	r5, r5, r3
   335f4:	1a2d      	subs	r5, r5, r0
   335f6:	e696      	b.n	33326 <__aeabi_ddiv+0x2f6>
   335f8:	1e8a      	subs	r2, r1, #2
   335fa:	9903      	ldr	r1, [sp, #12]
   335fc:	004d      	lsls	r5, r1, #1
   335fe:	428d      	cmp	r5, r1
   33600:	4189      	sbcs	r1, r1
   33602:	4249      	negs	r1, r1
   33604:	4441      	add	r1, r8
   33606:	1876      	adds	r6, r6, r1
   33608:	9503      	str	r5, [sp, #12]
   3360a:	e78f      	b.n	3352c <__aeabi_ddiv+0x4fc>
   3360c:	201f      	movs	r0, #31
   3360e:	4240      	negs	r0, r0
   33610:	1ac3      	subs	r3, r0, r3
   33612:	4658      	mov	r0, fp
   33614:	40d8      	lsrs	r0, r3
   33616:	0003      	movs	r3, r0
   33618:	2a20      	cmp	r2, #32
   3361a:	d028      	beq.n	3366e <__aeabi_ddiv+0x63e>
   3361c:	2040      	movs	r0, #64	; 0x40
   3361e:	465d      	mov	r5, fp
   33620:	1a82      	subs	r2, r0, r2
   33622:	4095      	lsls	r5, r2
   33624:	4329      	orrs	r1, r5
   33626:	1e4a      	subs	r2, r1, #1
   33628:	4191      	sbcs	r1, r2
   3362a:	4319      	orrs	r1, r3
   3362c:	2307      	movs	r3, #7
   3362e:	2200      	movs	r2, #0
   33630:	400b      	ands	r3, r1
   33632:	d009      	beq.n	33648 <__aeabi_ddiv+0x618>
   33634:	230f      	movs	r3, #15
   33636:	2200      	movs	r2, #0
   33638:	400b      	ands	r3, r1
   3363a:	0008      	movs	r0, r1
   3363c:	2b04      	cmp	r3, #4
   3363e:	d1bd      	bne.n	335bc <__aeabi_ddiv+0x58c>
   33640:	0001      	movs	r1, r0
   33642:	0753      	lsls	r3, r2, #29
   33644:	0252      	lsls	r2, r2, #9
   33646:	0b12      	lsrs	r2, r2, #12
   33648:	08c9      	lsrs	r1, r1, #3
   3364a:	4319      	orrs	r1, r3
   3364c:	2301      	movs	r3, #1
   3364e:	4688      	mov	r8, r1
   33650:	9902      	ldr	r1, [sp, #8]
   33652:	2400      	movs	r4, #0
   33654:	4019      	ands	r1, r3
   33656:	468c      	mov	ip, r1
   33658:	e5b8      	b.n	331cc <__aeabi_ddiv+0x19c>
   3365a:	4552      	cmp	r2, sl
   3365c:	d8be      	bhi.n	335dc <__aeabi_ddiv+0x5ac>
   3365e:	468b      	mov	fp, r1
   33660:	2500      	movs	r5, #0
   33662:	e660      	b.n	33326 <__aeabi_ddiv+0x2f6>
   33664:	9d03      	ldr	r5, [sp, #12]
   33666:	429d      	cmp	r5, r3
   33668:	d3c6      	bcc.n	335f8 <__aeabi_ddiv+0x5c8>
   3366a:	0011      	movs	r1, r2
   3366c:	e762      	b.n	33534 <__aeabi_ddiv+0x504>
   3366e:	2500      	movs	r5, #0
   33670:	e7d8      	b.n	33624 <__aeabi_ddiv+0x5f4>
   33672:	2280      	movs	r2, #128	; 0x80
   33674:	465b      	mov	r3, fp
   33676:	0312      	lsls	r2, r2, #12
   33678:	431a      	orrs	r2, r3
   3367a:	9b01      	ldr	r3, [sp, #4]
   3367c:	0312      	lsls	r2, r2, #12
   3367e:	0b12      	lsrs	r2, r2, #12
   33680:	469c      	mov	ip, r3
   33682:	4688      	mov	r8, r1
   33684:	4c03      	ldr	r4, [pc, #12]	; (33694 <__aeabi_ddiv+0x664>)
   33686:	e5a1      	b.n	331cc <__aeabi_ddiv+0x19c>
   33688:	000003ff 	.word	0x000003ff
   3368c:	feffffff 	.word	0xfeffffff
   33690:	000007fe 	.word	0x000007fe
   33694:	000007ff 	.word	0x000007ff

00033698 <__aeabi_dmul>:
   33698:	b5f0      	push	{r4, r5, r6, r7, lr}
   3369a:	4657      	mov	r7, sl
   3369c:	4645      	mov	r5, r8
   3369e:	46de      	mov	lr, fp
   336a0:	464e      	mov	r6, r9
   336a2:	b5e0      	push	{r5, r6, r7, lr}
   336a4:	030c      	lsls	r4, r1, #12
   336a6:	4698      	mov	r8, r3
   336a8:	004e      	lsls	r6, r1, #1
   336aa:	0b23      	lsrs	r3, r4, #12
   336ac:	b087      	sub	sp, #28
   336ae:	0007      	movs	r7, r0
   336b0:	4692      	mov	sl, r2
   336b2:	469b      	mov	fp, r3
   336b4:	0d76      	lsrs	r6, r6, #21
   336b6:	0fcd      	lsrs	r5, r1, #31
   336b8:	2e00      	cmp	r6, #0
   336ba:	d06b      	beq.n	33794 <__aeabi_dmul+0xfc>
   336bc:	4b6d      	ldr	r3, [pc, #436]	; (33874 <__aeabi_dmul+0x1dc>)
   336be:	429e      	cmp	r6, r3
   336c0:	d035      	beq.n	3372e <__aeabi_dmul+0x96>
   336c2:	2480      	movs	r4, #128	; 0x80
   336c4:	465b      	mov	r3, fp
   336c6:	0f42      	lsrs	r2, r0, #29
   336c8:	0424      	lsls	r4, r4, #16
   336ca:	00db      	lsls	r3, r3, #3
   336cc:	4314      	orrs	r4, r2
   336ce:	431c      	orrs	r4, r3
   336d0:	00c3      	lsls	r3, r0, #3
   336d2:	4699      	mov	r9, r3
   336d4:	4b68      	ldr	r3, [pc, #416]	; (33878 <__aeabi_dmul+0x1e0>)
   336d6:	46a3      	mov	fp, r4
   336d8:	469c      	mov	ip, r3
   336da:	2300      	movs	r3, #0
   336dc:	2700      	movs	r7, #0
   336de:	4466      	add	r6, ip
   336e0:	9302      	str	r3, [sp, #8]
   336e2:	4643      	mov	r3, r8
   336e4:	031c      	lsls	r4, r3, #12
   336e6:	005a      	lsls	r2, r3, #1
   336e8:	0fdb      	lsrs	r3, r3, #31
   336ea:	4650      	mov	r0, sl
   336ec:	0b24      	lsrs	r4, r4, #12
   336ee:	0d52      	lsrs	r2, r2, #21
   336f0:	4698      	mov	r8, r3
   336f2:	d100      	bne.n	336f6 <__aeabi_dmul+0x5e>
   336f4:	e076      	b.n	337e4 <__aeabi_dmul+0x14c>
   336f6:	4b5f      	ldr	r3, [pc, #380]	; (33874 <__aeabi_dmul+0x1dc>)
   336f8:	429a      	cmp	r2, r3
   336fa:	d06d      	beq.n	337d8 <__aeabi_dmul+0x140>
   336fc:	2380      	movs	r3, #128	; 0x80
   336fe:	0f41      	lsrs	r1, r0, #29
   33700:	041b      	lsls	r3, r3, #16
   33702:	430b      	orrs	r3, r1
   33704:	495c      	ldr	r1, [pc, #368]	; (33878 <__aeabi_dmul+0x1e0>)
   33706:	00e4      	lsls	r4, r4, #3
   33708:	468c      	mov	ip, r1
   3370a:	431c      	orrs	r4, r3
   3370c:	00c3      	lsls	r3, r0, #3
   3370e:	2000      	movs	r0, #0
   33710:	4462      	add	r2, ip
   33712:	4641      	mov	r1, r8
   33714:	18b6      	adds	r6, r6, r2
   33716:	4069      	eors	r1, r5
   33718:	1c72      	adds	r2, r6, #1
   3371a:	9101      	str	r1, [sp, #4]
   3371c:	4694      	mov	ip, r2
   3371e:	4307      	orrs	r7, r0
   33720:	2f0f      	cmp	r7, #15
   33722:	d900      	bls.n	33726 <__aeabi_dmul+0x8e>
   33724:	e0b0      	b.n	33888 <__aeabi_dmul+0x1f0>
   33726:	4a55      	ldr	r2, [pc, #340]	; (3387c <__aeabi_dmul+0x1e4>)
   33728:	00bf      	lsls	r7, r7, #2
   3372a:	59d2      	ldr	r2, [r2, r7]
   3372c:	4697      	mov	pc, r2
   3372e:	465b      	mov	r3, fp
   33730:	4303      	orrs	r3, r0
   33732:	4699      	mov	r9, r3
   33734:	d000      	beq.n	33738 <__aeabi_dmul+0xa0>
   33736:	e087      	b.n	33848 <__aeabi_dmul+0x1b0>
   33738:	2300      	movs	r3, #0
   3373a:	469b      	mov	fp, r3
   3373c:	3302      	adds	r3, #2
   3373e:	2708      	movs	r7, #8
   33740:	9302      	str	r3, [sp, #8]
   33742:	e7ce      	b.n	336e2 <__aeabi_dmul+0x4a>
   33744:	4642      	mov	r2, r8
   33746:	9201      	str	r2, [sp, #4]
   33748:	2802      	cmp	r0, #2
   3374a:	d067      	beq.n	3381c <__aeabi_dmul+0x184>
   3374c:	2803      	cmp	r0, #3
   3374e:	d100      	bne.n	33752 <__aeabi_dmul+0xba>
   33750:	e20e      	b.n	33b70 <__aeabi_dmul+0x4d8>
   33752:	2801      	cmp	r0, #1
   33754:	d000      	beq.n	33758 <__aeabi_dmul+0xc0>
   33756:	e162      	b.n	33a1e <__aeabi_dmul+0x386>
   33758:	2300      	movs	r3, #0
   3375a:	2400      	movs	r4, #0
   3375c:	2200      	movs	r2, #0
   3375e:	4699      	mov	r9, r3
   33760:	9901      	ldr	r1, [sp, #4]
   33762:	4001      	ands	r1, r0
   33764:	b2cd      	uxtb	r5, r1
   33766:	2100      	movs	r1, #0
   33768:	0312      	lsls	r2, r2, #12
   3376a:	0d0b      	lsrs	r3, r1, #20
   3376c:	0b12      	lsrs	r2, r2, #12
   3376e:	051b      	lsls	r3, r3, #20
   33770:	4313      	orrs	r3, r2
   33772:	4a43      	ldr	r2, [pc, #268]	; (33880 <__aeabi_dmul+0x1e8>)
   33774:	0524      	lsls	r4, r4, #20
   33776:	4013      	ands	r3, r2
   33778:	431c      	orrs	r4, r3
   3377a:	0064      	lsls	r4, r4, #1
   3377c:	07ed      	lsls	r5, r5, #31
   3377e:	0864      	lsrs	r4, r4, #1
   33780:	432c      	orrs	r4, r5
   33782:	4648      	mov	r0, r9
   33784:	0021      	movs	r1, r4
   33786:	b007      	add	sp, #28
   33788:	bc3c      	pop	{r2, r3, r4, r5}
   3378a:	4690      	mov	r8, r2
   3378c:	4699      	mov	r9, r3
   3378e:	46a2      	mov	sl, r4
   33790:	46ab      	mov	fp, r5
   33792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33794:	4303      	orrs	r3, r0
   33796:	4699      	mov	r9, r3
   33798:	d04f      	beq.n	3383a <__aeabi_dmul+0x1a2>
   3379a:	465b      	mov	r3, fp
   3379c:	2b00      	cmp	r3, #0
   3379e:	d100      	bne.n	337a2 <__aeabi_dmul+0x10a>
   337a0:	e189      	b.n	33ab6 <__aeabi_dmul+0x41e>
   337a2:	4658      	mov	r0, fp
   337a4:	f000 fd7a 	bl	3429c <__clzsi2>
   337a8:	0003      	movs	r3, r0
   337aa:	3b0b      	subs	r3, #11
   337ac:	2b1c      	cmp	r3, #28
   337ae:	dd00      	ble.n	337b2 <__aeabi_dmul+0x11a>
   337b0:	e17a      	b.n	33aa8 <__aeabi_dmul+0x410>
   337b2:	221d      	movs	r2, #29
   337b4:	1ad3      	subs	r3, r2, r3
   337b6:	003a      	movs	r2, r7
   337b8:	0001      	movs	r1, r0
   337ba:	465c      	mov	r4, fp
   337bc:	40da      	lsrs	r2, r3
   337be:	3908      	subs	r1, #8
   337c0:	408c      	lsls	r4, r1
   337c2:	0013      	movs	r3, r2
   337c4:	408f      	lsls	r7, r1
   337c6:	4323      	orrs	r3, r4
   337c8:	469b      	mov	fp, r3
   337ca:	46b9      	mov	r9, r7
   337cc:	2300      	movs	r3, #0
   337ce:	4e2d      	ldr	r6, [pc, #180]	; (33884 <__aeabi_dmul+0x1ec>)
   337d0:	2700      	movs	r7, #0
   337d2:	1a36      	subs	r6, r6, r0
   337d4:	9302      	str	r3, [sp, #8]
   337d6:	e784      	b.n	336e2 <__aeabi_dmul+0x4a>
   337d8:	4653      	mov	r3, sl
   337da:	4323      	orrs	r3, r4
   337dc:	d12a      	bne.n	33834 <__aeabi_dmul+0x19c>
   337de:	2400      	movs	r4, #0
   337e0:	2002      	movs	r0, #2
   337e2:	e796      	b.n	33712 <__aeabi_dmul+0x7a>
   337e4:	4653      	mov	r3, sl
   337e6:	4323      	orrs	r3, r4
   337e8:	d020      	beq.n	3382c <__aeabi_dmul+0x194>
   337ea:	2c00      	cmp	r4, #0
   337ec:	d100      	bne.n	337f0 <__aeabi_dmul+0x158>
   337ee:	e157      	b.n	33aa0 <__aeabi_dmul+0x408>
   337f0:	0020      	movs	r0, r4
   337f2:	f000 fd53 	bl	3429c <__clzsi2>
   337f6:	0003      	movs	r3, r0
   337f8:	3b0b      	subs	r3, #11
   337fa:	2b1c      	cmp	r3, #28
   337fc:	dd00      	ble.n	33800 <__aeabi_dmul+0x168>
   337fe:	e149      	b.n	33a94 <__aeabi_dmul+0x3fc>
   33800:	211d      	movs	r1, #29
   33802:	1acb      	subs	r3, r1, r3
   33804:	4651      	mov	r1, sl
   33806:	0002      	movs	r2, r0
   33808:	40d9      	lsrs	r1, r3
   3380a:	4653      	mov	r3, sl
   3380c:	3a08      	subs	r2, #8
   3380e:	4094      	lsls	r4, r2
   33810:	4093      	lsls	r3, r2
   33812:	430c      	orrs	r4, r1
   33814:	4a1b      	ldr	r2, [pc, #108]	; (33884 <__aeabi_dmul+0x1ec>)
   33816:	1a12      	subs	r2, r2, r0
   33818:	2000      	movs	r0, #0
   3381a:	e77a      	b.n	33712 <__aeabi_dmul+0x7a>
   3381c:	2501      	movs	r5, #1
   3381e:	9b01      	ldr	r3, [sp, #4]
   33820:	4c14      	ldr	r4, [pc, #80]	; (33874 <__aeabi_dmul+0x1dc>)
   33822:	401d      	ands	r5, r3
   33824:	2300      	movs	r3, #0
   33826:	2200      	movs	r2, #0
   33828:	4699      	mov	r9, r3
   3382a:	e79c      	b.n	33766 <__aeabi_dmul+0xce>
   3382c:	2400      	movs	r4, #0
   3382e:	2200      	movs	r2, #0
   33830:	2001      	movs	r0, #1
   33832:	e76e      	b.n	33712 <__aeabi_dmul+0x7a>
   33834:	4653      	mov	r3, sl
   33836:	2003      	movs	r0, #3
   33838:	e76b      	b.n	33712 <__aeabi_dmul+0x7a>
   3383a:	2300      	movs	r3, #0
   3383c:	469b      	mov	fp, r3
   3383e:	3301      	adds	r3, #1
   33840:	2704      	movs	r7, #4
   33842:	2600      	movs	r6, #0
   33844:	9302      	str	r3, [sp, #8]
   33846:	e74c      	b.n	336e2 <__aeabi_dmul+0x4a>
   33848:	2303      	movs	r3, #3
   3384a:	4681      	mov	r9, r0
   3384c:	270c      	movs	r7, #12
   3384e:	9302      	str	r3, [sp, #8]
   33850:	e747      	b.n	336e2 <__aeabi_dmul+0x4a>
   33852:	2280      	movs	r2, #128	; 0x80
   33854:	2300      	movs	r3, #0
   33856:	2500      	movs	r5, #0
   33858:	0312      	lsls	r2, r2, #12
   3385a:	4699      	mov	r9, r3
   3385c:	4c05      	ldr	r4, [pc, #20]	; (33874 <__aeabi_dmul+0x1dc>)
   3385e:	e782      	b.n	33766 <__aeabi_dmul+0xce>
   33860:	465c      	mov	r4, fp
   33862:	464b      	mov	r3, r9
   33864:	9802      	ldr	r0, [sp, #8]
   33866:	e76f      	b.n	33748 <__aeabi_dmul+0xb0>
   33868:	465c      	mov	r4, fp
   3386a:	464b      	mov	r3, r9
   3386c:	9501      	str	r5, [sp, #4]
   3386e:	9802      	ldr	r0, [sp, #8]
   33870:	e76a      	b.n	33748 <__aeabi_dmul+0xb0>
   33872:	46c0      	nop			; (mov r8, r8)
   33874:	000007ff 	.word	0x000007ff
   33878:	fffffc01 	.word	0xfffffc01
   3387c:	0003996c 	.word	0x0003996c
   33880:	800fffff 	.word	0x800fffff
   33884:	fffffc0d 	.word	0xfffffc0d
   33888:	464a      	mov	r2, r9
   3388a:	4649      	mov	r1, r9
   3388c:	0c17      	lsrs	r7, r2, #16
   3388e:	0c1a      	lsrs	r2, r3, #16
   33890:	041b      	lsls	r3, r3, #16
   33892:	0c1b      	lsrs	r3, r3, #16
   33894:	0408      	lsls	r0, r1, #16
   33896:	0019      	movs	r1, r3
   33898:	0c00      	lsrs	r0, r0, #16
   3389a:	4341      	muls	r1, r0
   3389c:	0015      	movs	r5, r2
   3389e:	4688      	mov	r8, r1
   338a0:	0019      	movs	r1, r3
   338a2:	437d      	muls	r5, r7
   338a4:	4379      	muls	r1, r7
   338a6:	9503      	str	r5, [sp, #12]
   338a8:	4689      	mov	r9, r1
   338aa:	0029      	movs	r1, r5
   338ac:	0015      	movs	r5, r2
   338ae:	4345      	muls	r5, r0
   338b0:	444d      	add	r5, r9
   338b2:	9502      	str	r5, [sp, #8]
   338b4:	4645      	mov	r5, r8
   338b6:	0c2d      	lsrs	r5, r5, #16
   338b8:	46aa      	mov	sl, r5
   338ba:	9d02      	ldr	r5, [sp, #8]
   338bc:	4455      	add	r5, sl
   338be:	45a9      	cmp	r9, r5
   338c0:	d906      	bls.n	338d0 <__aeabi_dmul+0x238>
   338c2:	468a      	mov	sl, r1
   338c4:	2180      	movs	r1, #128	; 0x80
   338c6:	0249      	lsls	r1, r1, #9
   338c8:	4689      	mov	r9, r1
   338ca:	44ca      	add	sl, r9
   338cc:	4651      	mov	r1, sl
   338ce:	9103      	str	r1, [sp, #12]
   338d0:	0c29      	lsrs	r1, r5, #16
   338d2:	9104      	str	r1, [sp, #16]
   338d4:	4641      	mov	r1, r8
   338d6:	0409      	lsls	r1, r1, #16
   338d8:	042d      	lsls	r5, r5, #16
   338da:	0c09      	lsrs	r1, r1, #16
   338dc:	4688      	mov	r8, r1
   338de:	0029      	movs	r1, r5
   338e0:	0c25      	lsrs	r5, r4, #16
   338e2:	0424      	lsls	r4, r4, #16
   338e4:	4441      	add	r1, r8
   338e6:	0c24      	lsrs	r4, r4, #16
   338e8:	9105      	str	r1, [sp, #20]
   338ea:	0021      	movs	r1, r4
   338ec:	4341      	muls	r1, r0
   338ee:	4688      	mov	r8, r1
   338f0:	0021      	movs	r1, r4
   338f2:	4379      	muls	r1, r7
   338f4:	468a      	mov	sl, r1
   338f6:	4368      	muls	r0, r5
   338f8:	4641      	mov	r1, r8
   338fa:	4450      	add	r0, sl
   338fc:	4681      	mov	r9, r0
   338fe:	0c08      	lsrs	r0, r1, #16
   33900:	4448      	add	r0, r9
   33902:	436f      	muls	r7, r5
   33904:	4582      	cmp	sl, r0
   33906:	d903      	bls.n	33910 <__aeabi_dmul+0x278>
   33908:	2180      	movs	r1, #128	; 0x80
   3390a:	0249      	lsls	r1, r1, #9
   3390c:	4689      	mov	r9, r1
   3390e:	444f      	add	r7, r9
   33910:	0c01      	lsrs	r1, r0, #16
   33912:	4689      	mov	r9, r1
   33914:	0039      	movs	r1, r7
   33916:	4449      	add	r1, r9
   33918:	9102      	str	r1, [sp, #8]
   3391a:	4641      	mov	r1, r8
   3391c:	040f      	lsls	r7, r1, #16
   3391e:	9904      	ldr	r1, [sp, #16]
   33920:	0c3f      	lsrs	r7, r7, #16
   33922:	4688      	mov	r8, r1
   33924:	0400      	lsls	r0, r0, #16
   33926:	19c0      	adds	r0, r0, r7
   33928:	4480      	add	r8, r0
   3392a:	4641      	mov	r1, r8
   3392c:	9104      	str	r1, [sp, #16]
   3392e:	4659      	mov	r1, fp
   33930:	0c0f      	lsrs	r7, r1, #16
   33932:	0409      	lsls	r1, r1, #16
   33934:	0c09      	lsrs	r1, r1, #16
   33936:	4688      	mov	r8, r1
   33938:	4359      	muls	r1, r3
   3393a:	468a      	mov	sl, r1
   3393c:	0039      	movs	r1, r7
   3393e:	4351      	muls	r1, r2
   33940:	4689      	mov	r9, r1
   33942:	4641      	mov	r1, r8
   33944:	434a      	muls	r2, r1
   33946:	4651      	mov	r1, sl
   33948:	0c09      	lsrs	r1, r1, #16
   3394a:	468b      	mov	fp, r1
   3394c:	437b      	muls	r3, r7
   3394e:	18d2      	adds	r2, r2, r3
   33950:	445a      	add	r2, fp
   33952:	4293      	cmp	r3, r2
   33954:	d903      	bls.n	3395e <__aeabi_dmul+0x2c6>
   33956:	2380      	movs	r3, #128	; 0x80
   33958:	025b      	lsls	r3, r3, #9
   3395a:	469b      	mov	fp, r3
   3395c:	44d9      	add	r9, fp
   3395e:	4651      	mov	r1, sl
   33960:	0409      	lsls	r1, r1, #16
   33962:	0c09      	lsrs	r1, r1, #16
   33964:	468a      	mov	sl, r1
   33966:	4641      	mov	r1, r8
   33968:	4361      	muls	r1, r4
   3396a:	437c      	muls	r4, r7
   3396c:	0c13      	lsrs	r3, r2, #16
   3396e:	0412      	lsls	r2, r2, #16
   33970:	444b      	add	r3, r9
   33972:	4452      	add	r2, sl
   33974:	46a1      	mov	r9, r4
   33976:	468a      	mov	sl, r1
   33978:	003c      	movs	r4, r7
   3397a:	4641      	mov	r1, r8
   3397c:	436c      	muls	r4, r5
   3397e:	434d      	muls	r5, r1
   33980:	4651      	mov	r1, sl
   33982:	444d      	add	r5, r9
   33984:	0c0f      	lsrs	r7, r1, #16
   33986:	197d      	adds	r5, r7, r5
   33988:	45a9      	cmp	r9, r5
   3398a:	d903      	bls.n	33994 <__aeabi_dmul+0x2fc>
   3398c:	2180      	movs	r1, #128	; 0x80
   3398e:	0249      	lsls	r1, r1, #9
   33990:	4688      	mov	r8, r1
   33992:	4444      	add	r4, r8
   33994:	9f04      	ldr	r7, [sp, #16]
   33996:	9903      	ldr	r1, [sp, #12]
   33998:	46b8      	mov	r8, r7
   3399a:	4441      	add	r1, r8
   3399c:	468b      	mov	fp, r1
   3399e:	4583      	cmp	fp, r0
   339a0:	4180      	sbcs	r0, r0
   339a2:	4241      	negs	r1, r0
   339a4:	4688      	mov	r8, r1
   339a6:	4651      	mov	r1, sl
   339a8:	0408      	lsls	r0, r1, #16
   339aa:	042f      	lsls	r7, r5, #16
   339ac:	0c00      	lsrs	r0, r0, #16
   339ae:	183f      	adds	r7, r7, r0
   339b0:	4658      	mov	r0, fp
   339b2:	9902      	ldr	r1, [sp, #8]
   339b4:	1810      	adds	r0, r2, r0
   339b6:	4689      	mov	r9, r1
   339b8:	4290      	cmp	r0, r2
   339ba:	4192      	sbcs	r2, r2
   339bc:	444f      	add	r7, r9
   339be:	46ba      	mov	sl, r7
   339c0:	4252      	negs	r2, r2
   339c2:	4699      	mov	r9, r3
   339c4:	4693      	mov	fp, r2
   339c6:	44c2      	add	sl, r8
   339c8:	44d1      	add	r9, sl
   339ca:	44cb      	add	fp, r9
   339cc:	428f      	cmp	r7, r1
   339ce:	41bf      	sbcs	r7, r7
   339d0:	45c2      	cmp	sl, r8
   339d2:	4189      	sbcs	r1, r1
   339d4:	4599      	cmp	r9, r3
   339d6:	419b      	sbcs	r3, r3
   339d8:	4593      	cmp	fp, r2
   339da:	4192      	sbcs	r2, r2
   339dc:	427f      	negs	r7, r7
   339de:	4249      	negs	r1, r1
   339e0:	0c2d      	lsrs	r5, r5, #16
   339e2:	4252      	negs	r2, r2
   339e4:	430f      	orrs	r7, r1
   339e6:	425b      	negs	r3, r3
   339e8:	4313      	orrs	r3, r2
   339ea:	197f      	adds	r7, r7, r5
   339ec:	18ff      	adds	r7, r7, r3
   339ee:	465b      	mov	r3, fp
   339f0:	193c      	adds	r4, r7, r4
   339f2:	0ddb      	lsrs	r3, r3, #23
   339f4:	9a05      	ldr	r2, [sp, #20]
   339f6:	0264      	lsls	r4, r4, #9
   339f8:	431c      	orrs	r4, r3
   339fa:	0243      	lsls	r3, r0, #9
   339fc:	4313      	orrs	r3, r2
   339fe:	1e5d      	subs	r5, r3, #1
   33a00:	41ab      	sbcs	r3, r5
   33a02:	465a      	mov	r2, fp
   33a04:	0dc0      	lsrs	r0, r0, #23
   33a06:	4303      	orrs	r3, r0
   33a08:	0252      	lsls	r2, r2, #9
   33a0a:	4313      	orrs	r3, r2
   33a0c:	01e2      	lsls	r2, r4, #7
   33a0e:	d556      	bpl.n	33abe <__aeabi_dmul+0x426>
   33a10:	2001      	movs	r0, #1
   33a12:	085a      	lsrs	r2, r3, #1
   33a14:	4003      	ands	r3, r0
   33a16:	4313      	orrs	r3, r2
   33a18:	07e2      	lsls	r2, r4, #31
   33a1a:	4313      	orrs	r3, r2
   33a1c:	0864      	lsrs	r4, r4, #1
   33a1e:	485a      	ldr	r0, [pc, #360]	; (33b88 <__aeabi_dmul+0x4f0>)
   33a20:	4460      	add	r0, ip
   33a22:	2800      	cmp	r0, #0
   33a24:	dd4d      	ble.n	33ac2 <__aeabi_dmul+0x42a>
   33a26:	075a      	lsls	r2, r3, #29
   33a28:	d009      	beq.n	33a3e <__aeabi_dmul+0x3a6>
   33a2a:	220f      	movs	r2, #15
   33a2c:	401a      	ands	r2, r3
   33a2e:	2a04      	cmp	r2, #4
   33a30:	d005      	beq.n	33a3e <__aeabi_dmul+0x3a6>
   33a32:	1d1a      	adds	r2, r3, #4
   33a34:	429a      	cmp	r2, r3
   33a36:	419b      	sbcs	r3, r3
   33a38:	425b      	negs	r3, r3
   33a3a:	18e4      	adds	r4, r4, r3
   33a3c:	0013      	movs	r3, r2
   33a3e:	01e2      	lsls	r2, r4, #7
   33a40:	d504      	bpl.n	33a4c <__aeabi_dmul+0x3b4>
   33a42:	2080      	movs	r0, #128	; 0x80
   33a44:	4a51      	ldr	r2, [pc, #324]	; (33b8c <__aeabi_dmul+0x4f4>)
   33a46:	00c0      	lsls	r0, r0, #3
   33a48:	4014      	ands	r4, r2
   33a4a:	4460      	add	r0, ip
   33a4c:	4a50      	ldr	r2, [pc, #320]	; (33b90 <__aeabi_dmul+0x4f8>)
   33a4e:	4290      	cmp	r0, r2
   33a50:	dd00      	ble.n	33a54 <__aeabi_dmul+0x3bc>
   33a52:	e6e3      	b.n	3381c <__aeabi_dmul+0x184>
   33a54:	2501      	movs	r5, #1
   33a56:	08db      	lsrs	r3, r3, #3
   33a58:	0762      	lsls	r2, r4, #29
   33a5a:	431a      	orrs	r2, r3
   33a5c:	0264      	lsls	r4, r4, #9
   33a5e:	9b01      	ldr	r3, [sp, #4]
   33a60:	4691      	mov	r9, r2
   33a62:	0b22      	lsrs	r2, r4, #12
   33a64:	0544      	lsls	r4, r0, #21
   33a66:	0d64      	lsrs	r4, r4, #21
   33a68:	401d      	ands	r5, r3
   33a6a:	e67c      	b.n	33766 <__aeabi_dmul+0xce>
   33a6c:	2280      	movs	r2, #128	; 0x80
   33a6e:	4659      	mov	r1, fp
   33a70:	0312      	lsls	r2, r2, #12
   33a72:	4211      	tst	r1, r2
   33a74:	d008      	beq.n	33a88 <__aeabi_dmul+0x3f0>
   33a76:	4214      	tst	r4, r2
   33a78:	d106      	bne.n	33a88 <__aeabi_dmul+0x3f0>
   33a7a:	4322      	orrs	r2, r4
   33a7c:	0312      	lsls	r2, r2, #12
   33a7e:	0b12      	lsrs	r2, r2, #12
   33a80:	4645      	mov	r5, r8
   33a82:	4699      	mov	r9, r3
   33a84:	4c43      	ldr	r4, [pc, #268]	; (33b94 <__aeabi_dmul+0x4fc>)
   33a86:	e66e      	b.n	33766 <__aeabi_dmul+0xce>
   33a88:	465b      	mov	r3, fp
   33a8a:	431a      	orrs	r2, r3
   33a8c:	0312      	lsls	r2, r2, #12
   33a8e:	0b12      	lsrs	r2, r2, #12
   33a90:	4c40      	ldr	r4, [pc, #256]	; (33b94 <__aeabi_dmul+0x4fc>)
   33a92:	e668      	b.n	33766 <__aeabi_dmul+0xce>
   33a94:	0003      	movs	r3, r0
   33a96:	4654      	mov	r4, sl
   33a98:	3b28      	subs	r3, #40	; 0x28
   33a9a:	409c      	lsls	r4, r3
   33a9c:	2300      	movs	r3, #0
   33a9e:	e6b9      	b.n	33814 <__aeabi_dmul+0x17c>
   33aa0:	f000 fbfc 	bl	3429c <__clzsi2>
   33aa4:	3020      	adds	r0, #32
   33aa6:	e6a6      	b.n	337f6 <__aeabi_dmul+0x15e>
   33aa8:	0003      	movs	r3, r0
   33aaa:	3b28      	subs	r3, #40	; 0x28
   33aac:	409f      	lsls	r7, r3
   33aae:	2300      	movs	r3, #0
   33ab0:	46bb      	mov	fp, r7
   33ab2:	4699      	mov	r9, r3
   33ab4:	e68a      	b.n	337cc <__aeabi_dmul+0x134>
   33ab6:	f000 fbf1 	bl	3429c <__clzsi2>
   33aba:	3020      	adds	r0, #32
   33abc:	e674      	b.n	337a8 <__aeabi_dmul+0x110>
   33abe:	46b4      	mov	ip, r6
   33ac0:	e7ad      	b.n	33a1e <__aeabi_dmul+0x386>
   33ac2:	2501      	movs	r5, #1
   33ac4:	1a2a      	subs	r2, r5, r0
   33ac6:	2a38      	cmp	r2, #56	; 0x38
   33ac8:	dd06      	ble.n	33ad8 <__aeabi_dmul+0x440>
   33aca:	9b01      	ldr	r3, [sp, #4]
   33acc:	2400      	movs	r4, #0
   33ace:	401d      	ands	r5, r3
   33ad0:	2300      	movs	r3, #0
   33ad2:	2200      	movs	r2, #0
   33ad4:	4699      	mov	r9, r3
   33ad6:	e646      	b.n	33766 <__aeabi_dmul+0xce>
   33ad8:	2a1f      	cmp	r2, #31
   33ada:	dc21      	bgt.n	33b20 <__aeabi_dmul+0x488>
   33adc:	2520      	movs	r5, #32
   33ade:	0020      	movs	r0, r4
   33ae0:	1aad      	subs	r5, r5, r2
   33ae2:	001e      	movs	r6, r3
   33ae4:	40ab      	lsls	r3, r5
   33ae6:	40a8      	lsls	r0, r5
   33ae8:	40d6      	lsrs	r6, r2
   33aea:	1e5d      	subs	r5, r3, #1
   33aec:	41ab      	sbcs	r3, r5
   33aee:	4330      	orrs	r0, r6
   33af0:	4318      	orrs	r0, r3
   33af2:	40d4      	lsrs	r4, r2
   33af4:	0743      	lsls	r3, r0, #29
   33af6:	d009      	beq.n	33b0c <__aeabi_dmul+0x474>
   33af8:	230f      	movs	r3, #15
   33afa:	4003      	ands	r3, r0
   33afc:	2b04      	cmp	r3, #4
   33afe:	d005      	beq.n	33b0c <__aeabi_dmul+0x474>
   33b00:	0003      	movs	r3, r0
   33b02:	1d18      	adds	r0, r3, #4
   33b04:	4298      	cmp	r0, r3
   33b06:	419b      	sbcs	r3, r3
   33b08:	425b      	negs	r3, r3
   33b0a:	18e4      	adds	r4, r4, r3
   33b0c:	0223      	lsls	r3, r4, #8
   33b0e:	d521      	bpl.n	33b54 <__aeabi_dmul+0x4bc>
   33b10:	2501      	movs	r5, #1
   33b12:	9b01      	ldr	r3, [sp, #4]
   33b14:	2401      	movs	r4, #1
   33b16:	401d      	ands	r5, r3
   33b18:	2300      	movs	r3, #0
   33b1a:	2200      	movs	r2, #0
   33b1c:	4699      	mov	r9, r3
   33b1e:	e622      	b.n	33766 <__aeabi_dmul+0xce>
   33b20:	251f      	movs	r5, #31
   33b22:	0021      	movs	r1, r4
   33b24:	426d      	negs	r5, r5
   33b26:	1a28      	subs	r0, r5, r0
   33b28:	40c1      	lsrs	r1, r0
   33b2a:	0008      	movs	r0, r1
   33b2c:	2a20      	cmp	r2, #32
   33b2e:	d01d      	beq.n	33b6c <__aeabi_dmul+0x4d4>
   33b30:	355f      	adds	r5, #95	; 0x5f
   33b32:	1aaa      	subs	r2, r5, r2
   33b34:	4094      	lsls	r4, r2
   33b36:	4323      	orrs	r3, r4
   33b38:	1e5c      	subs	r4, r3, #1
   33b3a:	41a3      	sbcs	r3, r4
   33b3c:	2507      	movs	r5, #7
   33b3e:	4303      	orrs	r3, r0
   33b40:	401d      	ands	r5, r3
   33b42:	2200      	movs	r2, #0
   33b44:	2d00      	cmp	r5, #0
   33b46:	d009      	beq.n	33b5c <__aeabi_dmul+0x4c4>
   33b48:	220f      	movs	r2, #15
   33b4a:	2400      	movs	r4, #0
   33b4c:	401a      	ands	r2, r3
   33b4e:	0018      	movs	r0, r3
   33b50:	2a04      	cmp	r2, #4
   33b52:	d1d6      	bne.n	33b02 <__aeabi_dmul+0x46a>
   33b54:	0003      	movs	r3, r0
   33b56:	0765      	lsls	r5, r4, #29
   33b58:	0264      	lsls	r4, r4, #9
   33b5a:	0b22      	lsrs	r2, r4, #12
   33b5c:	08db      	lsrs	r3, r3, #3
   33b5e:	432b      	orrs	r3, r5
   33b60:	2501      	movs	r5, #1
   33b62:	4699      	mov	r9, r3
   33b64:	9b01      	ldr	r3, [sp, #4]
   33b66:	2400      	movs	r4, #0
   33b68:	401d      	ands	r5, r3
   33b6a:	e5fc      	b.n	33766 <__aeabi_dmul+0xce>
   33b6c:	2400      	movs	r4, #0
   33b6e:	e7e2      	b.n	33b36 <__aeabi_dmul+0x49e>
   33b70:	2280      	movs	r2, #128	; 0x80
   33b72:	2501      	movs	r5, #1
   33b74:	0312      	lsls	r2, r2, #12
   33b76:	4322      	orrs	r2, r4
   33b78:	9901      	ldr	r1, [sp, #4]
   33b7a:	0312      	lsls	r2, r2, #12
   33b7c:	0b12      	lsrs	r2, r2, #12
   33b7e:	400d      	ands	r5, r1
   33b80:	4699      	mov	r9, r3
   33b82:	4c04      	ldr	r4, [pc, #16]	; (33b94 <__aeabi_dmul+0x4fc>)
   33b84:	e5ef      	b.n	33766 <__aeabi_dmul+0xce>
   33b86:	46c0      	nop			; (mov r8, r8)
   33b88:	000003ff 	.word	0x000003ff
   33b8c:	feffffff 	.word	0xfeffffff
   33b90:	000007fe 	.word	0x000007fe
   33b94:	000007ff 	.word	0x000007ff

00033b98 <__aeabi_dsub>:
   33b98:	b5f0      	push	{r4, r5, r6, r7, lr}
   33b9a:	4646      	mov	r6, r8
   33b9c:	46d6      	mov	lr, sl
   33b9e:	464f      	mov	r7, r9
   33ba0:	030c      	lsls	r4, r1, #12
   33ba2:	b5c0      	push	{r6, r7, lr}
   33ba4:	0fcd      	lsrs	r5, r1, #31
   33ba6:	004e      	lsls	r6, r1, #1
   33ba8:	0a61      	lsrs	r1, r4, #9
   33baa:	0f44      	lsrs	r4, r0, #29
   33bac:	430c      	orrs	r4, r1
   33bae:	00c1      	lsls	r1, r0, #3
   33bb0:	0058      	lsls	r0, r3, #1
   33bb2:	0d40      	lsrs	r0, r0, #21
   33bb4:	4684      	mov	ip, r0
   33bb6:	468a      	mov	sl, r1
   33bb8:	000f      	movs	r7, r1
   33bba:	0319      	lsls	r1, r3, #12
   33bbc:	0f50      	lsrs	r0, r2, #29
   33bbe:	0a49      	lsrs	r1, r1, #9
   33bc0:	4301      	orrs	r1, r0
   33bc2:	48c6      	ldr	r0, [pc, #792]	; (33edc <__aeabi_dsub+0x344>)
   33bc4:	0d76      	lsrs	r6, r6, #21
   33bc6:	46a8      	mov	r8, r5
   33bc8:	0fdb      	lsrs	r3, r3, #31
   33bca:	00d2      	lsls	r2, r2, #3
   33bcc:	4584      	cmp	ip, r0
   33bce:	d100      	bne.n	33bd2 <__aeabi_dsub+0x3a>
   33bd0:	e0d8      	b.n	33d84 <__aeabi_dsub+0x1ec>
   33bd2:	2001      	movs	r0, #1
   33bd4:	4043      	eors	r3, r0
   33bd6:	42ab      	cmp	r3, r5
   33bd8:	d100      	bne.n	33bdc <__aeabi_dsub+0x44>
   33bda:	e0a6      	b.n	33d2a <__aeabi_dsub+0x192>
   33bdc:	4660      	mov	r0, ip
   33bde:	1a35      	subs	r5, r6, r0
   33be0:	2d00      	cmp	r5, #0
   33be2:	dc00      	bgt.n	33be6 <__aeabi_dsub+0x4e>
   33be4:	e105      	b.n	33df2 <__aeabi_dsub+0x25a>
   33be6:	2800      	cmp	r0, #0
   33be8:	d110      	bne.n	33c0c <__aeabi_dsub+0x74>
   33bea:	000b      	movs	r3, r1
   33bec:	4313      	orrs	r3, r2
   33bee:	d100      	bne.n	33bf2 <__aeabi_dsub+0x5a>
   33bf0:	e0d7      	b.n	33da2 <__aeabi_dsub+0x20a>
   33bf2:	1e6b      	subs	r3, r5, #1
   33bf4:	2b00      	cmp	r3, #0
   33bf6:	d000      	beq.n	33bfa <__aeabi_dsub+0x62>
   33bf8:	e14b      	b.n	33e92 <__aeabi_dsub+0x2fa>
   33bfa:	4653      	mov	r3, sl
   33bfc:	1a9f      	subs	r7, r3, r2
   33bfe:	45ba      	cmp	sl, r7
   33c00:	4180      	sbcs	r0, r0
   33c02:	1a64      	subs	r4, r4, r1
   33c04:	4240      	negs	r0, r0
   33c06:	1a24      	subs	r4, r4, r0
   33c08:	2601      	movs	r6, #1
   33c0a:	e01e      	b.n	33c4a <__aeabi_dsub+0xb2>
   33c0c:	4bb3      	ldr	r3, [pc, #716]	; (33edc <__aeabi_dsub+0x344>)
   33c0e:	429e      	cmp	r6, r3
   33c10:	d048      	beq.n	33ca4 <__aeabi_dsub+0x10c>
   33c12:	2380      	movs	r3, #128	; 0x80
   33c14:	041b      	lsls	r3, r3, #16
   33c16:	4319      	orrs	r1, r3
   33c18:	2d38      	cmp	r5, #56	; 0x38
   33c1a:	dd00      	ble.n	33c1e <__aeabi_dsub+0x86>
   33c1c:	e119      	b.n	33e52 <__aeabi_dsub+0x2ba>
   33c1e:	2d1f      	cmp	r5, #31
   33c20:	dd00      	ble.n	33c24 <__aeabi_dsub+0x8c>
   33c22:	e14c      	b.n	33ebe <__aeabi_dsub+0x326>
   33c24:	2320      	movs	r3, #32
   33c26:	000f      	movs	r7, r1
   33c28:	1b5b      	subs	r3, r3, r5
   33c2a:	0010      	movs	r0, r2
   33c2c:	409a      	lsls	r2, r3
   33c2e:	409f      	lsls	r7, r3
   33c30:	40e8      	lsrs	r0, r5
   33c32:	1e53      	subs	r3, r2, #1
   33c34:	419a      	sbcs	r2, r3
   33c36:	40e9      	lsrs	r1, r5
   33c38:	4307      	orrs	r7, r0
   33c3a:	4317      	orrs	r7, r2
   33c3c:	4653      	mov	r3, sl
   33c3e:	1bdf      	subs	r7, r3, r7
   33c40:	1a61      	subs	r1, r4, r1
   33c42:	45ba      	cmp	sl, r7
   33c44:	41a4      	sbcs	r4, r4
   33c46:	4264      	negs	r4, r4
   33c48:	1b0c      	subs	r4, r1, r4
   33c4a:	0223      	lsls	r3, r4, #8
   33c4c:	d400      	bmi.n	33c50 <__aeabi_dsub+0xb8>
   33c4e:	e0c5      	b.n	33ddc <__aeabi_dsub+0x244>
   33c50:	0264      	lsls	r4, r4, #9
   33c52:	0a65      	lsrs	r5, r4, #9
   33c54:	2d00      	cmp	r5, #0
   33c56:	d100      	bne.n	33c5a <__aeabi_dsub+0xc2>
   33c58:	e0f6      	b.n	33e48 <__aeabi_dsub+0x2b0>
   33c5a:	0028      	movs	r0, r5
   33c5c:	f000 fb1e 	bl	3429c <__clzsi2>
   33c60:	0003      	movs	r3, r0
   33c62:	3b08      	subs	r3, #8
   33c64:	2b1f      	cmp	r3, #31
   33c66:	dd00      	ble.n	33c6a <__aeabi_dsub+0xd2>
   33c68:	e0e9      	b.n	33e3e <__aeabi_dsub+0x2a6>
   33c6a:	2220      	movs	r2, #32
   33c6c:	003c      	movs	r4, r7
   33c6e:	1ad2      	subs	r2, r2, r3
   33c70:	409d      	lsls	r5, r3
   33c72:	40d4      	lsrs	r4, r2
   33c74:	409f      	lsls	r7, r3
   33c76:	4325      	orrs	r5, r4
   33c78:	429e      	cmp	r6, r3
   33c7a:	dd00      	ble.n	33c7e <__aeabi_dsub+0xe6>
   33c7c:	e0db      	b.n	33e36 <__aeabi_dsub+0x29e>
   33c7e:	1b9e      	subs	r6, r3, r6
   33c80:	1c73      	adds	r3, r6, #1
   33c82:	2b1f      	cmp	r3, #31
   33c84:	dd00      	ble.n	33c88 <__aeabi_dsub+0xf0>
   33c86:	e10a      	b.n	33e9e <__aeabi_dsub+0x306>
   33c88:	2220      	movs	r2, #32
   33c8a:	0038      	movs	r0, r7
   33c8c:	1ad2      	subs	r2, r2, r3
   33c8e:	0029      	movs	r1, r5
   33c90:	4097      	lsls	r7, r2
   33c92:	002c      	movs	r4, r5
   33c94:	4091      	lsls	r1, r2
   33c96:	40d8      	lsrs	r0, r3
   33c98:	1e7a      	subs	r2, r7, #1
   33c9a:	4197      	sbcs	r7, r2
   33c9c:	40dc      	lsrs	r4, r3
   33c9e:	2600      	movs	r6, #0
   33ca0:	4301      	orrs	r1, r0
   33ca2:	430f      	orrs	r7, r1
   33ca4:	077b      	lsls	r3, r7, #29
   33ca6:	d009      	beq.n	33cbc <__aeabi_dsub+0x124>
   33ca8:	230f      	movs	r3, #15
   33caa:	403b      	ands	r3, r7
   33cac:	2b04      	cmp	r3, #4
   33cae:	d005      	beq.n	33cbc <__aeabi_dsub+0x124>
   33cb0:	1d3b      	adds	r3, r7, #4
   33cb2:	42bb      	cmp	r3, r7
   33cb4:	41bf      	sbcs	r7, r7
   33cb6:	427f      	negs	r7, r7
   33cb8:	19e4      	adds	r4, r4, r7
   33cba:	001f      	movs	r7, r3
   33cbc:	0223      	lsls	r3, r4, #8
   33cbe:	d525      	bpl.n	33d0c <__aeabi_dsub+0x174>
   33cc0:	4b86      	ldr	r3, [pc, #536]	; (33edc <__aeabi_dsub+0x344>)
   33cc2:	3601      	adds	r6, #1
   33cc4:	429e      	cmp	r6, r3
   33cc6:	d100      	bne.n	33cca <__aeabi_dsub+0x132>
   33cc8:	e0af      	b.n	33e2a <__aeabi_dsub+0x292>
   33cca:	4b85      	ldr	r3, [pc, #532]	; (33ee0 <__aeabi_dsub+0x348>)
   33ccc:	2501      	movs	r5, #1
   33cce:	401c      	ands	r4, r3
   33cd0:	4643      	mov	r3, r8
   33cd2:	0762      	lsls	r2, r4, #29
   33cd4:	08ff      	lsrs	r7, r7, #3
   33cd6:	0264      	lsls	r4, r4, #9
   33cd8:	0576      	lsls	r6, r6, #21
   33cda:	4317      	orrs	r7, r2
   33cdc:	0b24      	lsrs	r4, r4, #12
   33cde:	0d76      	lsrs	r6, r6, #21
   33ce0:	401d      	ands	r5, r3
   33ce2:	2100      	movs	r1, #0
   33ce4:	0324      	lsls	r4, r4, #12
   33ce6:	0b23      	lsrs	r3, r4, #12
   33ce8:	0d0c      	lsrs	r4, r1, #20
   33cea:	4a7e      	ldr	r2, [pc, #504]	; (33ee4 <__aeabi_dsub+0x34c>)
   33cec:	0524      	lsls	r4, r4, #20
   33cee:	431c      	orrs	r4, r3
   33cf0:	4014      	ands	r4, r2
   33cf2:	0533      	lsls	r3, r6, #20
   33cf4:	4323      	orrs	r3, r4
   33cf6:	005b      	lsls	r3, r3, #1
   33cf8:	07ed      	lsls	r5, r5, #31
   33cfa:	085b      	lsrs	r3, r3, #1
   33cfc:	432b      	orrs	r3, r5
   33cfe:	0038      	movs	r0, r7
   33d00:	0019      	movs	r1, r3
   33d02:	bc1c      	pop	{r2, r3, r4}
   33d04:	4690      	mov	r8, r2
   33d06:	4699      	mov	r9, r3
   33d08:	46a2      	mov	sl, r4
   33d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33d0c:	2501      	movs	r5, #1
   33d0e:	4643      	mov	r3, r8
   33d10:	0762      	lsls	r2, r4, #29
   33d12:	08ff      	lsrs	r7, r7, #3
   33d14:	4317      	orrs	r7, r2
   33d16:	08e4      	lsrs	r4, r4, #3
   33d18:	401d      	ands	r5, r3
   33d1a:	4b70      	ldr	r3, [pc, #448]	; (33edc <__aeabi_dsub+0x344>)
   33d1c:	429e      	cmp	r6, r3
   33d1e:	d036      	beq.n	33d8e <__aeabi_dsub+0x1f6>
   33d20:	0324      	lsls	r4, r4, #12
   33d22:	0576      	lsls	r6, r6, #21
   33d24:	0b24      	lsrs	r4, r4, #12
   33d26:	0d76      	lsrs	r6, r6, #21
   33d28:	e7db      	b.n	33ce2 <__aeabi_dsub+0x14a>
   33d2a:	4663      	mov	r3, ip
   33d2c:	1af3      	subs	r3, r6, r3
   33d2e:	2b00      	cmp	r3, #0
   33d30:	dc00      	bgt.n	33d34 <__aeabi_dsub+0x19c>
   33d32:	e094      	b.n	33e5e <__aeabi_dsub+0x2c6>
   33d34:	4660      	mov	r0, ip
   33d36:	2800      	cmp	r0, #0
   33d38:	d035      	beq.n	33da6 <__aeabi_dsub+0x20e>
   33d3a:	4868      	ldr	r0, [pc, #416]	; (33edc <__aeabi_dsub+0x344>)
   33d3c:	4286      	cmp	r6, r0
   33d3e:	d0b1      	beq.n	33ca4 <__aeabi_dsub+0x10c>
   33d40:	2780      	movs	r7, #128	; 0x80
   33d42:	043f      	lsls	r7, r7, #16
   33d44:	4339      	orrs	r1, r7
   33d46:	2b38      	cmp	r3, #56	; 0x38
   33d48:	dc00      	bgt.n	33d4c <__aeabi_dsub+0x1b4>
   33d4a:	e0fd      	b.n	33f48 <__aeabi_dsub+0x3b0>
   33d4c:	430a      	orrs	r2, r1
   33d4e:	0017      	movs	r7, r2
   33d50:	2100      	movs	r1, #0
   33d52:	1e7a      	subs	r2, r7, #1
   33d54:	4197      	sbcs	r7, r2
   33d56:	4457      	add	r7, sl
   33d58:	4557      	cmp	r7, sl
   33d5a:	4180      	sbcs	r0, r0
   33d5c:	1909      	adds	r1, r1, r4
   33d5e:	4244      	negs	r4, r0
   33d60:	190c      	adds	r4, r1, r4
   33d62:	0223      	lsls	r3, r4, #8
   33d64:	d53a      	bpl.n	33ddc <__aeabi_dsub+0x244>
   33d66:	4b5d      	ldr	r3, [pc, #372]	; (33edc <__aeabi_dsub+0x344>)
   33d68:	3601      	adds	r6, #1
   33d6a:	429e      	cmp	r6, r3
   33d6c:	d100      	bne.n	33d70 <__aeabi_dsub+0x1d8>
   33d6e:	e14b      	b.n	34008 <__aeabi_dsub+0x470>
   33d70:	2201      	movs	r2, #1
   33d72:	4b5b      	ldr	r3, [pc, #364]	; (33ee0 <__aeabi_dsub+0x348>)
   33d74:	401c      	ands	r4, r3
   33d76:	087b      	lsrs	r3, r7, #1
   33d78:	4017      	ands	r7, r2
   33d7a:	431f      	orrs	r7, r3
   33d7c:	07e2      	lsls	r2, r4, #31
   33d7e:	4317      	orrs	r7, r2
   33d80:	0864      	lsrs	r4, r4, #1
   33d82:	e78f      	b.n	33ca4 <__aeabi_dsub+0x10c>
   33d84:	0008      	movs	r0, r1
   33d86:	4310      	orrs	r0, r2
   33d88:	d000      	beq.n	33d8c <__aeabi_dsub+0x1f4>
   33d8a:	e724      	b.n	33bd6 <__aeabi_dsub+0x3e>
   33d8c:	e721      	b.n	33bd2 <__aeabi_dsub+0x3a>
   33d8e:	0023      	movs	r3, r4
   33d90:	433b      	orrs	r3, r7
   33d92:	d100      	bne.n	33d96 <__aeabi_dsub+0x1fe>
   33d94:	e1b9      	b.n	3410a <__aeabi_dsub+0x572>
   33d96:	2280      	movs	r2, #128	; 0x80
   33d98:	0312      	lsls	r2, r2, #12
   33d9a:	4314      	orrs	r4, r2
   33d9c:	0324      	lsls	r4, r4, #12
   33d9e:	0b24      	lsrs	r4, r4, #12
   33da0:	e79f      	b.n	33ce2 <__aeabi_dsub+0x14a>
   33da2:	002e      	movs	r6, r5
   33da4:	e77e      	b.n	33ca4 <__aeabi_dsub+0x10c>
   33da6:	0008      	movs	r0, r1
   33da8:	4310      	orrs	r0, r2
   33daa:	d100      	bne.n	33dae <__aeabi_dsub+0x216>
   33dac:	e0ca      	b.n	33f44 <__aeabi_dsub+0x3ac>
   33dae:	1e58      	subs	r0, r3, #1
   33db0:	4684      	mov	ip, r0
   33db2:	2800      	cmp	r0, #0
   33db4:	d000      	beq.n	33db8 <__aeabi_dsub+0x220>
   33db6:	e0e7      	b.n	33f88 <__aeabi_dsub+0x3f0>
   33db8:	4452      	add	r2, sl
   33dba:	4552      	cmp	r2, sl
   33dbc:	4180      	sbcs	r0, r0
   33dbe:	1864      	adds	r4, r4, r1
   33dc0:	4240      	negs	r0, r0
   33dc2:	1824      	adds	r4, r4, r0
   33dc4:	0017      	movs	r7, r2
   33dc6:	2601      	movs	r6, #1
   33dc8:	0223      	lsls	r3, r4, #8
   33dca:	d507      	bpl.n	33ddc <__aeabi_dsub+0x244>
   33dcc:	2602      	movs	r6, #2
   33dce:	e7cf      	b.n	33d70 <__aeabi_dsub+0x1d8>
   33dd0:	4664      	mov	r4, ip
   33dd2:	432c      	orrs	r4, r5
   33dd4:	d100      	bne.n	33dd8 <__aeabi_dsub+0x240>
   33dd6:	e1b3      	b.n	34140 <__aeabi_dsub+0x5a8>
   33dd8:	002c      	movs	r4, r5
   33dda:	4667      	mov	r7, ip
   33ddc:	077b      	lsls	r3, r7, #29
   33dde:	d000      	beq.n	33de2 <__aeabi_dsub+0x24a>
   33de0:	e762      	b.n	33ca8 <__aeabi_dsub+0x110>
   33de2:	0763      	lsls	r3, r4, #29
   33de4:	08ff      	lsrs	r7, r7, #3
   33de6:	431f      	orrs	r7, r3
   33de8:	2501      	movs	r5, #1
   33dea:	4643      	mov	r3, r8
   33dec:	08e4      	lsrs	r4, r4, #3
   33dee:	401d      	ands	r5, r3
   33df0:	e793      	b.n	33d1a <__aeabi_dsub+0x182>
   33df2:	2d00      	cmp	r5, #0
   33df4:	d178      	bne.n	33ee8 <__aeabi_dsub+0x350>
   33df6:	1c75      	adds	r5, r6, #1
   33df8:	056d      	lsls	r5, r5, #21
   33dfa:	0d6d      	lsrs	r5, r5, #21
   33dfc:	2d01      	cmp	r5, #1
   33dfe:	dc00      	bgt.n	33e02 <__aeabi_dsub+0x26a>
   33e00:	e0f2      	b.n	33fe8 <__aeabi_dsub+0x450>
   33e02:	4650      	mov	r0, sl
   33e04:	1a80      	subs	r0, r0, r2
   33e06:	4582      	cmp	sl, r0
   33e08:	41bf      	sbcs	r7, r7
   33e0a:	1a65      	subs	r5, r4, r1
   33e0c:	427f      	negs	r7, r7
   33e0e:	1bed      	subs	r5, r5, r7
   33e10:	4684      	mov	ip, r0
   33e12:	0228      	lsls	r0, r5, #8
   33e14:	d400      	bmi.n	33e18 <__aeabi_dsub+0x280>
   33e16:	e08c      	b.n	33f32 <__aeabi_dsub+0x39a>
   33e18:	4650      	mov	r0, sl
   33e1a:	1a17      	subs	r7, r2, r0
   33e1c:	42ba      	cmp	r2, r7
   33e1e:	4192      	sbcs	r2, r2
   33e20:	1b0c      	subs	r4, r1, r4
   33e22:	4255      	negs	r5, r2
   33e24:	1b65      	subs	r5, r4, r5
   33e26:	4698      	mov	r8, r3
   33e28:	e714      	b.n	33c54 <__aeabi_dsub+0xbc>
   33e2a:	2501      	movs	r5, #1
   33e2c:	4643      	mov	r3, r8
   33e2e:	2400      	movs	r4, #0
   33e30:	401d      	ands	r5, r3
   33e32:	2700      	movs	r7, #0
   33e34:	e755      	b.n	33ce2 <__aeabi_dsub+0x14a>
   33e36:	4c2a      	ldr	r4, [pc, #168]	; (33ee0 <__aeabi_dsub+0x348>)
   33e38:	1af6      	subs	r6, r6, r3
   33e3a:	402c      	ands	r4, r5
   33e3c:	e732      	b.n	33ca4 <__aeabi_dsub+0x10c>
   33e3e:	003d      	movs	r5, r7
   33e40:	3828      	subs	r0, #40	; 0x28
   33e42:	4085      	lsls	r5, r0
   33e44:	2700      	movs	r7, #0
   33e46:	e717      	b.n	33c78 <__aeabi_dsub+0xe0>
   33e48:	0038      	movs	r0, r7
   33e4a:	f000 fa27 	bl	3429c <__clzsi2>
   33e4e:	3020      	adds	r0, #32
   33e50:	e706      	b.n	33c60 <__aeabi_dsub+0xc8>
   33e52:	430a      	orrs	r2, r1
   33e54:	0017      	movs	r7, r2
   33e56:	2100      	movs	r1, #0
   33e58:	1e7a      	subs	r2, r7, #1
   33e5a:	4197      	sbcs	r7, r2
   33e5c:	e6ee      	b.n	33c3c <__aeabi_dsub+0xa4>
   33e5e:	2b00      	cmp	r3, #0
   33e60:	d000      	beq.n	33e64 <__aeabi_dsub+0x2cc>
   33e62:	e0e5      	b.n	34030 <__aeabi_dsub+0x498>
   33e64:	1c73      	adds	r3, r6, #1
   33e66:	469c      	mov	ip, r3
   33e68:	055b      	lsls	r3, r3, #21
   33e6a:	0d5b      	lsrs	r3, r3, #21
   33e6c:	2b01      	cmp	r3, #1
   33e6e:	dc00      	bgt.n	33e72 <__aeabi_dsub+0x2da>
   33e70:	e09f      	b.n	33fb2 <__aeabi_dsub+0x41a>
   33e72:	4b1a      	ldr	r3, [pc, #104]	; (33edc <__aeabi_dsub+0x344>)
   33e74:	459c      	cmp	ip, r3
   33e76:	d100      	bne.n	33e7a <__aeabi_dsub+0x2e2>
   33e78:	e0c5      	b.n	34006 <__aeabi_dsub+0x46e>
   33e7a:	4452      	add	r2, sl
   33e7c:	4552      	cmp	r2, sl
   33e7e:	4180      	sbcs	r0, r0
   33e80:	1864      	adds	r4, r4, r1
   33e82:	4240      	negs	r0, r0
   33e84:	1824      	adds	r4, r4, r0
   33e86:	07e7      	lsls	r7, r4, #31
   33e88:	0852      	lsrs	r2, r2, #1
   33e8a:	4317      	orrs	r7, r2
   33e8c:	0864      	lsrs	r4, r4, #1
   33e8e:	4666      	mov	r6, ip
   33e90:	e708      	b.n	33ca4 <__aeabi_dsub+0x10c>
   33e92:	4812      	ldr	r0, [pc, #72]	; (33edc <__aeabi_dsub+0x344>)
   33e94:	4285      	cmp	r5, r0
   33e96:	d100      	bne.n	33e9a <__aeabi_dsub+0x302>
   33e98:	e085      	b.n	33fa6 <__aeabi_dsub+0x40e>
   33e9a:	001d      	movs	r5, r3
   33e9c:	e6bc      	b.n	33c18 <__aeabi_dsub+0x80>
   33e9e:	0029      	movs	r1, r5
   33ea0:	3e1f      	subs	r6, #31
   33ea2:	40f1      	lsrs	r1, r6
   33ea4:	2b20      	cmp	r3, #32
   33ea6:	d100      	bne.n	33eaa <__aeabi_dsub+0x312>
   33ea8:	e07f      	b.n	33faa <__aeabi_dsub+0x412>
   33eaa:	2240      	movs	r2, #64	; 0x40
   33eac:	1ad3      	subs	r3, r2, r3
   33eae:	409d      	lsls	r5, r3
   33eb0:	432f      	orrs	r7, r5
   33eb2:	1e7d      	subs	r5, r7, #1
   33eb4:	41af      	sbcs	r7, r5
   33eb6:	2400      	movs	r4, #0
   33eb8:	430f      	orrs	r7, r1
   33eba:	2600      	movs	r6, #0
   33ebc:	e78e      	b.n	33ddc <__aeabi_dsub+0x244>
   33ebe:	002b      	movs	r3, r5
   33ec0:	000f      	movs	r7, r1
   33ec2:	3b20      	subs	r3, #32
   33ec4:	40df      	lsrs	r7, r3
   33ec6:	2d20      	cmp	r5, #32
   33ec8:	d071      	beq.n	33fae <__aeabi_dsub+0x416>
   33eca:	2340      	movs	r3, #64	; 0x40
   33ecc:	1b5d      	subs	r5, r3, r5
   33ece:	40a9      	lsls	r1, r5
   33ed0:	430a      	orrs	r2, r1
   33ed2:	1e51      	subs	r1, r2, #1
   33ed4:	418a      	sbcs	r2, r1
   33ed6:	2100      	movs	r1, #0
   33ed8:	4317      	orrs	r7, r2
   33eda:	e6af      	b.n	33c3c <__aeabi_dsub+0xa4>
   33edc:	000007ff 	.word	0x000007ff
   33ee0:	ff7fffff 	.word	0xff7fffff
   33ee4:	800fffff 	.word	0x800fffff
   33ee8:	2e00      	cmp	r6, #0
   33eea:	d03e      	beq.n	33f6a <__aeabi_dsub+0x3d2>
   33eec:	4eb3      	ldr	r6, [pc, #716]	; (341bc <__aeabi_dsub+0x624>)
   33eee:	45b4      	cmp	ip, r6
   33ef0:	d045      	beq.n	33f7e <__aeabi_dsub+0x3e6>
   33ef2:	2680      	movs	r6, #128	; 0x80
   33ef4:	0436      	lsls	r6, r6, #16
   33ef6:	426d      	negs	r5, r5
   33ef8:	4334      	orrs	r4, r6
   33efa:	2d38      	cmp	r5, #56	; 0x38
   33efc:	dd00      	ble.n	33f00 <__aeabi_dsub+0x368>
   33efe:	e0a8      	b.n	34052 <__aeabi_dsub+0x4ba>
   33f00:	2d1f      	cmp	r5, #31
   33f02:	dd00      	ble.n	33f06 <__aeabi_dsub+0x36e>
   33f04:	e11f      	b.n	34146 <__aeabi_dsub+0x5ae>
   33f06:	2620      	movs	r6, #32
   33f08:	0027      	movs	r7, r4
   33f0a:	4650      	mov	r0, sl
   33f0c:	1b76      	subs	r6, r6, r5
   33f0e:	40b7      	lsls	r7, r6
   33f10:	40e8      	lsrs	r0, r5
   33f12:	4307      	orrs	r7, r0
   33f14:	4650      	mov	r0, sl
   33f16:	40b0      	lsls	r0, r6
   33f18:	1e46      	subs	r6, r0, #1
   33f1a:	41b0      	sbcs	r0, r6
   33f1c:	40ec      	lsrs	r4, r5
   33f1e:	4338      	orrs	r0, r7
   33f20:	1a17      	subs	r7, r2, r0
   33f22:	42ba      	cmp	r2, r7
   33f24:	4192      	sbcs	r2, r2
   33f26:	1b0c      	subs	r4, r1, r4
   33f28:	4252      	negs	r2, r2
   33f2a:	1aa4      	subs	r4, r4, r2
   33f2c:	4666      	mov	r6, ip
   33f2e:	4698      	mov	r8, r3
   33f30:	e68b      	b.n	33c4a <__aeabi_dsub+0xb2>
   33f32:	4664      	mov	r4, ip
   33f34:	4667      	mov	r7, ip
   33f36:	432c      	orrs	r4, r5
   33f38:	d000      	beq.n	33f3c <__aeabi_dsub+0x3a4>
   33f3a:	e68b      	b.n	33c54 <__aeabi_dsub+0xbc>
   33f3c:	2500      	movs	r5, #0
   33f3e:	2600      	movs	r6, #0
   33f40:	2700      	movs	r7, #0
   33f42:	e6ea      	b.n	33d1a <__aeabi_dsub+0x182>
   33f44:	001e      	movs	r6, r3
   33f46:	e6ad      	b.n	33ca4 <__aeabi_dsub+0x10c>
   33f48:	2b1f      	cmp	r3, #31
   33f4a:	dc60      	bgt.n	3400e <__aeabi_dsub+0x476>
   33f4c:	2720      	movs	r7, #32
   33f4e:	1af8      	subs	r0, r7, r3
   33f50:	000f      	movs	r7, r1
   33f52:	4684      	mov	ip, r0
   33f54:	4087      	lsls	r7, r0
   33f56:	0010      	movs	r0, r2
   33f58:	40d8      	lsrs	r0, r3
   33f5a:	4307      	orrs	r7, r0
   33f5c:	4660      	mov	r0, ip
   33f5e:	4082      	lsls	r2, r0
   33f60:	1e50      	subs	r0, r2, #1
   33f62:	4182      	sbcs	r2, r0
   33f64:	40d9      	lsrs	r1, r3
   33f66:	4317      	orrs	r7, r2
   33f68:	e6f5      	b.n	33d56 <__aeabi_dsub+0x1be>
   33f6a:	0026      	movs	r6, r4
   33f6c:	4650      	mov	r0, sl
   33f6e:	4306      	orrs	r6, r0
   33f70:	d005      	beq.n	33f7e <__aeabi_dsub+0x3e6>
   33f72:	43ed      	mvns	r5, r5
   33f74:	2d00      	cmp	r5, #0
   33f76:	d0d3      	beq.n	33f20 <__aeabi_dsub+0x388>
   33f78:	4e90      	ldr	r6, [pc, #576]	; (341bc <__aeabi_dsub+0x624>)
   33f7a:	45b4      	cmp	ip, r6
   33f7c:	d1bd      	bne.n	33efa <__aeabi_dsub+0x362>
   33f7e:	000c      	movs	r4, r1
   33f80:	0017      	movs	r7, r2
   33f82:	4666      	mov	r6, ip
   33f84:	4698      	mov	r8, r3
   33f86:	e68d      	b.n	33ca4 <__aeabi_dsub+0x10c>
   33f88:	488c      	ldr	r0, [pc, #560]	; (341bc <__aeabi_dsub+0x624>)
   33f8a:	4283      	cmp	r3, r0
   33f8c:	d00b      	beq.n	33fa6 <__aeabi_dsub+0x40e>
   33f8e:	4663      	mov	r3, ip
   33f90:	e6d9      	b.n	33d46 <__aeabi_dsub+0x1ae>
   33f92:	2d00      	cmp	r5, #0
   33f94:	d000      	beq.n	33f98 <__aeabi_dsub+0x400>
   33f96:	e096      	b.n	340c6 <__aeabi_dsub+0x52e>
   33f98:	0008      	movs	r0, r1
   33f9a:	4310      	orrs	r0, r2
   33f9c:	d100      	bne.n	33fa0 <__aeabi_dsub+0x408>
   33f9e:	e0e2      	b.n	34166 <__aeabi_dsub+0x5ce>
   33fa0:	000c      	movs	r4, r1
   33fa2:	0017      	movs	r7, r2
   33fa4:	4698      	mov	r8, r3
   33fa6:	4e85      	ldr	r6, [pc, #532]	; (341bc <__aeabi_dsub+0x624>)
   33fa8:	e67c      	b.n	33ca4 <__aeabi_dsub+0x10c>
   33faa:	2500      	movs	r5, #0
   33fac:	e780      	b.n	33eb0 <__aeabi_dsub+0x318>
   33fae:	2100      	movs	r1, #0
   33fb0:	e78e      	b.n	33ed0 <__aeabi_dsub+0x338>
   33fb2:	0023      	movs	r3, r4
   33fb4:	4650      	mov	r0, sl
   33fb6:	4303      	orrs	r3, r0
   33fb8:	2e00      	cmp	r6, #0
   33fba:	d000      	beq.n	33fbe <__aeabi_dsub+0x426>
   33fbc:	e0a8      	b.n	34110 <__aeabi_dsub+0x578>
   33fbe:	2b00      	cmp	r3, #0
   33fc0:	d100      	bne.n	33fc4 <__aeabi_dsub+0x42c>
   33fc2:	e0de      	b.n	34182 <__aeabi_dsub+0x5ea>
   33fc4:	000b      	movs	r3, r1
   33fc6:	4313      	orrs	r3, r2
   33fc8:	d100      	bne.n	33fcc <__aeabi_dsub+0x434>
   33fca:	e66b      	b.n	33ca4 <__aeabi_dsub+0x10c>
   33fcc:	4452      	add	r2, sl
   33fce:	4552      	cmp	r2, sl
   33fd0:	4180      	sbcs	r0, r0
   33fd2:	1864      	adds	r4, r4, r1
   33fd4:	4240      	negs	r0, r0
   33fd6:	1824      	adds	r4, r4, r0
   33fd8:	0017      	movs	r7, r2
   33fda:	0223      	lsls	r3, r4, #8
   33fdc:	d400      	bmi.n	33fe0 <__aeabi_dsub+0x448>
   33fde:	e6fd      	b.n	33ddc <__aeabi_dsub+0x244>
   33fe0:	4b77      	ldr	r3, [pc, #476]	; (341c0 <__aeabi_dsub+0x628>)
   33fe2:	4666      	mov	r6, ip
   33fe4:	401c      	ands	r4, r3
   33fe6:	e65d      	b.n	33ca4 <__aeabi_dsub+0x10c>
   33fe8:	0025      	movs	r5, r4
   33fea:	4650      	mov	r0, sl
   33fec:	4305      	orrs	r5, r0
   33fee:	2e00      	cmp	r6, #0
   33ff0:	d1cf      	bne.n	33f92 <__aeabi_dsub+0x3fa>
   33ff2:	2d00      	cmp	r5, #0
   33ff4:	d14f      	bne.n	34096 <__aeabi_dsub+0x4fe>
   33ff6:	000c      	movs	r4, r1
   33ff8:	4314      	orrs	r4, r2
   33ffa:	d100      	bne.n	33ffe <__aeabi_dsub+0x466>
   33ffc:	e0a0      	b.n	34140 <__aeabi_dsub+0x5a8>
   33ffe:	000c      	movs	r4, r1
   34000:	0017      	movs	r7, r2
   34002:	4698      	mov	r8, r3
   34004:	e64e      	b.n	33ca4 <__aeabi_dsub+0x10c>
   34006:	4666      	mov	r6, ip
   34008:	2400      	movs	r4, #0
   3400a:	2700      	movs	r7, #0
   3400c:	e685      	b.n	33d1a <__aeabi_dsub+0x182>
   3400e:	001f      	movs	r7, r3
   34010:	0008      	movs	r0, r1
   34012:	3f20      	subs	r7, #32
   34014:	40f8      	lsrs	r0, r7
   34016:	0007      	movs	r7, r0
   34018:	2b20      	cmp	r3, #32
   3401a:	d100      	bne.n	3401e <__aeabi_dsub+0x486>
   3401c:	e08e      	b.n	3413c <__aeabi_dsub+0x5a4>
   3401e:	2040      	movs	r0, #64	; 0x40
   34020:	1ac3      	subs	r3, r0, r3
   34022:	4099      	lsls	r1, r3
   34024:	430a      	orrs	r2, r1
   34026:	1e51      	subs	r1, r2, #1
   34028:	418a      	sbcs	r2, r1
   3402a:	2100      	movs	r1, #0
   3402c:	4317      	orrs	r7, r2
   3402e:	e692      	b.n	33d56 <__aeabi_dsub+0x1be>
   34030:	2e00      	cmp	r6, #0
   34032:	d114      	bne.n	3405e <__aeabi_dsub+0x4c6>
   34034:	0026      	movs	r6, r4
   34036:	4650      	mov	r0, sl
   34038:	4306      	orrs	r6, r0
   3403a:	d062      	beq.n	34102 <__aeabi_dsub+0x56a>
   3403c:	43db      	mvns	r3, r3
   3403e:	2b00      	cmp	r3, #0
   34040:	d15c      	bne.n	340fc <__aeabi_dsub+0x564>
   34042:	1887      	adds	r7, r0, r2
   34044:	4297      	cmp	r7, r2
   34046:	4192      	sbcs	r2, r2
   34048:	1864      	adds	r4, r4, r1
   3404a:	4252      	negs	r2, r2
   3404c:	18a4      	adds	r4, r4, r2
   3404e:	4666      	mov	r6, ip
   34050:	e687      	b.n	33d62 <__aeabi_dsub+0x1ca>
   34052:	4650      	mov	r0, sl
   34054:	4320      	orrs	r0, r4
   34056:	1e44      	subs	r4, r0, #1
   34058:	41a0      	sbcs	r0, r4
   3405a:	2400      	movs	r4, #0
   3405c:	e760      	b.n	33f20 <__aeabi_dsub+0x388>
   3405e:	4e57      	ldr	r6, [pc, #348]	; (341bc <__aeabi_dsub+0x624>)
   34060:	45b4      	cmp	ip, r6
   34062:	d04e      	beq.n	34102 <__aeabi_dsub+0x56a>
   34064:	2680      	movs	r6, #128	; 0x80
   34066:	0436      	lsls	r6, r6, #16
   34068:	425b      	negs	r3, r3
   3406a:	4334      	orrs	r4, r6
   3406c:	2b38      	cmp	r3, #56	; 0x38
   3406e:	dd00      	ble.n	34072 <__aeabi_dsub+0x4da>
   34070:	e07f      	b.n	34172 <__aeabi_dsub+0x5da>
   34072:	2b1f      	cmp	r3, #31
   34074:	dd00      	ble.n	34078 <__aeabi_dsub+0x4e0>
   34076:	e08b      	b.n	34190 <__aeabi_dsub+0x5f8>
   34078:	2620      	movs	r6, #32
   3407a:	0027      	movs	r7, r4
   3407c:	4650      	mov	r0, sl
   3407e:	1af6      	subs	r6, r6, r3
   34080:	40b7      	lsls	r7, r6
   34082:	40d8      	lsrs	r0, r3
   34084:	4307      	orrs	r7, r0
   34086:	4650      	mov	r0, sl
   34088:	40b0      	lsls	r0, r6
   3408a:	1e46      	subs	r6, r0, #1
   3408c:	41b0      	sbcs	r0, r6
   3408e:	4307      	orrs	r7, r0
   34090:	40dc      	lsrs	r4, r3
   34092:	18bf      	adds	r7, r7, r2
   34094:	e7d6      	b.n	34044 <__aeabi_dsub+0x4ac>
   34096:	000d      	movs	r5, r1
   34098:	4315      	orrs	r5, r2
   3409a:	d100      	bne.n	3409e <__aeabi_dsub+0x506>
   3409c:	e602      	b.n	33ca4 <__aeabi_dsub+0x10c>
   3409e:	4650      	mov	r0, sl
   340a0:	1a80      	subs	r0, r0, r2
   340a2:	4582      	cmp	sl, r0
   340a4:	41bf      	sbcs	r7, r7
   340a6:	1a65      	subs	r5, r4, r1
   340a8:	427f      	negs	r7, r7
   340aa:	1bed      	subs	r5, r5, r7
   340ac:	4684      	mov	ip, r0
   340ae:	0228      	lsls	r0, r5, #8
   340b0:	d400      	bmi.n	340b4 <__aeabi_dsub+0x51c>
   340b2:	e68d      	b.n	33dd0 <__aeabi_dsub+0x238>
   340b4:	4650      	mov	r0, sl
   340b6:	1a17      	subs	r7, r2, r0
   340b8:	42ba      	cmp	r2, r7
   340ba:	4192      	sbcs	r2, r2
   340bc:	1b0c      	subs	r4, r1, r4
   340be:	4252      	negs	r2, r2
   340c0:	1aa4      	subs	r4, r4, r2
   340c2:	4698      	mov	r8, r3
   340c4:	e5ee      	b.n	33ca4 <__aeabi_dsub+0x10c>
   340c6:	000d      	movs	r5, r1
   340c8:	4315      	orrs	r5, r2
   340ca:	d100      	bne.n	340ce <__aeabi_dsub+0x536>
   340cc:	e76b      	b.n	33fa6 <__aeabi_dsub+0x40e>
   340ce:	4650      	mov	r0, sl
   340d0:	0767      	lsls	r7, r4, #29
   340d2:	08c0      	lsrs	r0, r0, #3
   340d4:	4307      	orrs	r7, r0
   340d6:	2080      	movs	r0, #128	; 0x80
   340d8:	08e4      	lsrs	r4, r4, #3
   340da:	0300      	lsls	r0, r0, #12
   340dc:	4204      	tst	r4, r0
   340de:	d007      	beq.n	340f0 <__aeabi_dsub+0x558>
   340e0:	08cd      	lsrs	r5, r1, #3
   340e2:	4205      	tst	r5, r0
   340e4:	d104      	bne.n	340f0 <__aeabi_dsub+0x558>
   340e6:	002c      	movs	r4, r5
   340e8:	4698      	mov	r8, r3
   340ea:	08d7      	lsrs	r7, r2, #3
   340ec:	0749      	lsls	r1, r1, #29
   340ee:	430f      	orrs	r7, r1
   340f0:	0f7b      	lsrs	r3, r7, #29
   340f2:	00e4      	lsls	r4, r4, #3
   340f4:	431c      	orrs	r4, r3
   340f6:	00ff      	lsls	r7, r7, #3
   340f8:	4e30      	ldr	r6, [pc, #192]	; (341bc <__aeabi_dsub+0x624>)
   340fa:	e5d3      	b.n	33ca4 <__aeabi_dsub+0x10c>
   340fc:	4e2f      	ldr	r6, [pc, #188]	; (341bc <__aeabi_dsub+0x624>)
   340fe:	45b4      	cmp	ip, r6
   34100:	d1b4      	bne.n	3406c <__aeabi_dsub+0x4d4>
   34102:	000c      	movs	r4, r1
   34104:	0017      	movs	r7, r2
   34106:	4666      	mov	r6, ip
   34108:	e5cc      	b.n	33ca4 <__aeabi_dsub+0x10c>
   3410a:	2700      	movs	r7, #0
   3410c:	2400      	movs	r4, #0
   3410e:	e5e8      	b.n	33ce2 <__aeabi_dsub+0x14a>
   34110:	2b00      	cmp	r3, #0
   34112:	d039      	beq.n	34188 <__aeabi_dsub+0x5f0>
   34114:	000b      	movs	r3, r1
   34116:	4313      	orrs	r3, r2
   34118:	d100      	bne.n	3411c <__aeabi_dsub+0x584>
   3411a:	e744      	b.n	33fa6 <__aeabi_dsub+0x40e>
   3411c:	08c0      	lsrs	r0, r0, #3
   3411e:	0767      	lsls	r7, r4, #29
   34120:	4307      	orrs	r7, r0
   34122:	2080      	movs	r0, #128	; 0x80
   34124:	08e4      	lsrs	r4, r4, #3
   34126:	0300      	lsls	r0, r0, #12
   34128:	4204      	tst	r4, r0
   3412a:	d0e1      	beq.n	340f0 <__aeabi_dsub+0x558>
   3412c:	08cb      	lsrs	r3, r1, #3
   3412e:	4203      	tst	r3, r0
   34130:	d1de      	bne.n	340f0 <__aeabi_dsub+0x558>
   34132:	08d7      	lsrs	r7, r2, #3
   34134:	0749      	lsls	r1, r1, #29
   34136:	430f      	orrs	r7, r1
   34138:	001c      	movs	r4, r3
   3413a:	e7d9      	b.n	340f0 <__aeabi_dsub+0x558>
   3413c:	2100      	movs	r1, #0
   3413e:	e771      	b.n	34024 <__aeabi_dsub+0x48c>
   34140:	2500      	movs	r5, #0
   34142:	2700      	movs	r7, #0
   34144:	e5e9      	b.n	33d1a <__aeabi_dsub+0x182>
   34146:	002e      	movs	r6, r5
   34148:	0027      	movs	r7, r4
   3414a:	3e20      	subs	r6, #32
   3414c:	40f7      	lsrs	r7, r6
   3414e:	2d20      	cmp	r5, #32
   34150:	d02f      	beq.n	341b2 <__aeabi_dsub+0x61a>
   34152:	2640      	movs	r6, #64	; 0x40
   34154:	1b75      	subs	r5, r6, r5
   34156:	40ac      	lsls	r4, r5
   34158:	4650      	mov	r0, sl
   3415a:	4320      	orrs	r0, r4
   3415c:	1e44      	subs	r4, r0, #1
   3415e:	41a0      	sbcs	r0, r4
   34160:	2400      	movs	r4, #0
   34162:	4338      	orrs	r0, r7
   34164:	e6dc      	b.n	33f20 <__aeabi_dsub+0x388>
   34166:	2480      	movs	r4, #128	; 0x80
   34168:	2500      	movs	r5, #0
   3416a:	0324      	lsls	r4, r4, #12
   3416c:	4e13      	ldr	r6, [pc, #76]	; (341bc <__aeabi_dsub+0x624>)
   3416e:	2700      	movs	r7, #0
   34170:	e5d3      	b.n	33d1a <__aeabi_dsub+0x182>
   34172:	4650      	mov	r0, sl
   34174:	4320      	orrs	r0, r4
   34176:	0007      	movs	r7, r0
   34178:	1e78      	subs	r0, r7, #1
   3417a:	4187      	sbcs	r7, r0
   3417c:	2400      	movs	r4, #0
   3417e:	18bf      	adds	r7, r7, r2
   34180:	e760      	b.n	34044 <__aeabi_dsub+0x4ac>
   34182:	000c      	movs	r4, r1
   34184:	0017      	movs	r7, r2
   34186:	e58d      	b.n	33ca4 <__aeabi_dsub+0x10c>
   34188:	000c      	movs	r4, r1
   3418a:	0017      	movs	r7, r2
   3418c:	4e0b      	ldr	r6, [pc, #44]	; (341bc <__aeabi_dsub+0x624>)
   3418e:	e589      	b.n	33ca4 <__aeabi_dsub+0x10c>
   34190:	001e      	movs	r6, r3
   34192:	0027      	movs	r7, r4
   34194:	3e20      	subs	r6, #32
   34196:	40f7      	lsrs	r7, r6
   34198:	2b20      	cmp	r3, #32
   3419a:	d00c      	beq.n	341b6 <__aeabi_dsub+0x61e>
   3419c:	2640      	movs	r6, #64	; 0x40
   3419e:	1af3      	subs	r3, r6, r3
   341a0:	409c      	lsls	r4, r3
   341a2:	4650      	mov	r0, sl
   341a4:	4320      	orrs	r0, r4
   341a6:	1e44      	subs	r4, r0, #1
   341a8:	41a0      	sbcs	r0, r4
   341aa:	4307      	orrs	r7, r0
   341ac:	2400      	movs	r4, #0
   341ae:	18bf      	adds	r7, r7, r2
   341b0:	e748      	b.n	34044 <__aeabi_dsub+0x4ac>
   341b2:	2400      	movs	r4, #0
   341b4:	e7d0      	b.n	34158 <__aeabi_dsub+0x5c0>
   341b6:	2400      	movs	r4, #0
   341b8:	e7f3      	b.n	341a2 <__aeabi_dsub+0x60a>
   341ba:	46c0      	nop			; (mov r8, r8)
   341bc:	000007ff 	.word	0x000007ff
   341c0:	ff7fffff 	.word	0xff7fffff

000341c4 <__aeabi_d2iz>:
   341c4:	b530      	push	{r4, r5, lr}
   341c6:	4d13      	ldr	r5, [pc, #76]	; (34214 <__aeabi_d2iz+0x50>)
   341c8:	030a      	lsls	r2, r1, #12
   341ca:	004b      	lsls	r3, r1, #1
   341cc:	0b12      	lsrs	r2, r2, #12
   341ce:	0d5b      	lsrs	r3, r3, #21
   341d0:	0fc9      	lsrs	r1, r1, #31
   341d2:	2400      	movs	r4, #0
   341d4:	42ab      	cmp	r3, r5
   341d6:	dd10      	ble.n	341fa <__aeabi_d2iz+0x36>
   341d8:	4c0f      	ldr	r4, [pc, #60]	; (34218 <__aeabi_d2iz+0x54>)
   341da:	42a3      	cmp	r3, r4
   341dc:	dc0f      	bgt.n	341fe <__aeabi_d2iz+0x3a>
   341de:	2480      	movs	r4, #128	; 0x80
   341e0:	4d0e      	ldr	r5, [pc, #56]	; (3421c <__aeabi_d2iz+0x58>)
   341e2:	0364      	lsls	r4, r4, #13
   341e4:	4322      	orrs	r2, r4
   341e6:	1aed      	subs	r5, r5, r3
   341e8:	2d1f      	cmp	r5, #31
   341ea:	dd0b      	ble.n	34204 <__aeabi_d2iz+0x40>
   341ec:	480c      	ldr	r0, [pc, #48]	; (34220 <__aeabi_d2iz+0x5c>)
   341ee:	1ac3      	subs	r3, r0, r3
   341f0:	40da      	lsrs	r2, r3
   341f2:	4254      	negs	r4, r2
   341f4:	2900      	cmp	r1, #0
   341f6:	d100      	bne.n	341fa <__aeabi_d2iz+0x36>
   341f8:	0014      	movs	r4, r2
   341fa:	0020      	movs	r0, r4
   341fc:	bd30      	pop	{r4, r5, pc}
   341fe:	4b09      	ldr	r3, [pc, #36]	; (34224 <__aeabi_d2iz+0x60>)
   34200:	18cc      	adds	r4, r1, r3
   34202:	e7fa      	b.n	341fa <__aeabi_d2iz+0x36>
   34204:	4c08      	ldr	r4, [pc, #32]	; (34228 <__aeabi_d2iz+0x64>)
   34206:	40e8      	lsrs	r0, r5
   34208:	46a4      	mov	ip, r4
   3420a:	4463      	add	r3, ip
   3420c:	409a      	lsls	r2, r3
   3420e:	4302      	orrs	r2, r0
   34210:	e7ef      	b.n	341f2 <__aeabi_d2iz+0x2e>
   34212:	46c0      	nop			; (mov r8, r8)
   34214:	000003fe 	.word	0x000003fe
   34218:	0000041d 	.word	0x0000041d
   3421c:	00000433 	.word	0x00000433
   34220:	00000413 	.word	0x00000413
   34224:	7fffffff 	.word	0x7fffffff
   34228:	fffffbed 	.word	0xfffffbed

0003422c <__aeabi_ui2d>:
   3422c:	b510      	push	{r4, lr}
   3422e:	1e04      	subs	r4, r0, #0
   34230:	d028      	beq.n	34284 <__aeabi_ui2d+0x58>
   34232:	f000 f833 	bl	3429c <__clzsi2>
   34236:	4b15      	ldr	r3, [pc, #84]	; (3428c <__aeabi_ui2d+0x60>)
   34238:	4a15      	ldr	r2, [pc, #84]	; (34290 <__aeabi_ui2d+0x64>)
   3423a:	1a1b      	subs	r3, r3, r0
   3423c:	1ad2      	subs	r2, r2, r3
   3423e:	2a1f      	cmp	r2, #31
   34240:	dd15      	ble.n	3426e <__aeabi_ui2d+0x42>
   34242:	4a14      	ldr	r2, [pc, #80]	; (34294 <__aeabi_ui2d+0x68>)
   34244:	1ad2      	subs	r2, r2, r3
   34246:	4094      	lsls	r4, r2
   34248:	2200      	movs	r2, #0
   3424a:	0324      	lsls	r4, r4, #12
   3424c:	055b      	lsls	r3, r3, #21
   3424e:	0b24      	lsrs	r4, r4, #12
   34250:	0d5b      	lsrs	r3, r3, #21
   34252:	2100      	movs	r1, #0
   34254:	0010      	movs	r0, r2
   34256:	0324      	lsls	r4, r4, #12
   34258:	0d0a      	lsrs	r2, r1, #20
   3425a:	0b24      	lsrs	r4, r4, #12
   3425c:	0512      	lsls	r2, r2, #20
   3425e:	4322      	orrs	r2, r4
   34260:	4c0d      	ldr	r4, [pc, #52]	; (34298 <__aeabi_ui2d+0x6c>)
   34262:	051b      	lsls	r3, r3, #20
   34264:	4022      	ands	r2, r4
   34266:	4313      	orrs	r3, r2
   34268:	005b      	lsls	r3, r3, #1
   3426a:	0859      	lsrs	r1, r3, #1
   3426c:	bd10      	pop	{r4, pc}
   3426e:	0021      	movs	r1, r4
   34270:	4091      	lsls	r1, r2
   34272:	000a      	movs	r2, r1
   34274:	210b      	movs	r1, #11
   34276:	1a08      	subs	r0, r1, r0
   34278:	40c4      	lsrs	r4, r0
   3427a:	055b      	lsls	r3, r3, #21
   3427c:	0324      	lsls	r4, r4, #12
   3427e:	0b24      	lsrs	r4, r4, #12
   34280:	0d5b      	lsrs	r3, r3, #21
   34282:	e7e6      	b.n	34252 <__aeabi_ui2d+0x26>
   34284:	2300      	movs	r3, #0
   34286:	2400      	movs	r4, #0
   34288:	2200      	movs	r2, #0
   3428a:	e7e2      	b.n	34252 <__aeabi_ui2d+0x26>
   3428c:	0000041e 	.word	0x0000041e
   34290:	00000433 	.word	0x00000433
   34294:	00000413 	.word	0x00000413
   34298:	800fffff 	.word	0x800fffff

0003429c <__clzsi2>:
   3429c:	211c      	movs	r1, #28
   3429e:	2301      	movs	r3, #1
   342a0:	041b      	lsls	r3, r3, #16
   342a2:	4298      	cmp	r0, r3
   342a4:	d301      	bcc.n	342aa <__clzsi2+0xe>
   342a6:	0c00      	lsrs	r0, r0, #16
   342a8:	3910      	subs	r1, #16
   342aa:	0a1b      	lsrs	r3, r3, #8
   342ac:	4298      	cmp	r0, r3
   342ae:	d301      	bcc.n	342b4 <__clzsi2+0x18>
   342b0:	0a00      	lsrs	r0, r0, #8
   342b2:	3908      	subs	r1, #8
   342b4:	091b      	lsrs	r3, r3, #4
   342b6:	4298      	cmp	r0, r3
   342b8:	d301      	bcc.n	342be <__clzsi2+0x22>
   342ba:	0900      	lsrs	r0, r0, #4
   342bc:	3904      	subs	r1, #4
   342be:	a202      	add	r2, pc, #8	; (adr r2, 342c8 <__clzsi2+0x2c>)
   342c0:	5c10      	ldrb	r0, [r2, r0]
   342c2:	1840      	adds	r0, r0, r1
   342c4:	4770      	bx	lr
   342c6:	46c0      	nop			; (mov r8, r8)
   342c8:	02020304 	.word	0x02020304
   342cc:	01010101 	.word	0x01010101
	...

000342d8 <atoi>:
   342d8:	b510      	push	{r4, lr}
   342da:	220a      	movs	r2, #10
   342dc:	2100      	movs	r1, #0
   342de:	f000 faff 	bl	348e0 <strtol>
   342e2:	bd10      	pop	{r4, pc}

000342e4 <__libc_init_array>:
   342e4:	b570      	push	{r4, r5, r6, lr}
   342e6:	2600      	movs	r6, #0
   342e8:	4d0c      	ldr	r5, [pc, #48]	; (3431c <__libc_init_array+0x38>)
   342ea:	4c0d      	ldr	r4, [pc, #52]	; (34320 <__libc_init_array+0x3c>)
   342ec:	1b64      	subs	r4, r4, r5
   342ee:	10a4      	asrs	r4, r4, #2
   342f0:	42a6      	cmp	r6, r4
   342f2:	d109      	bne.n	34308 <__libc_init_array+0x24>
   342f4:	2600      	movs	r6, #0
   342f6:	f005 fc2b 	bl	39b50 <_init>
   342fa:	4d0a      	ldr	r5, [pc, #40]	; (34324 <__libc_init_array+0x40>)
   342fc:	4c0a      	ldr	r4, [pc, #40]	; (34328 <__libc_init_array+0x44>)
   342fe:	1b64      	subs	r4, r4, r5
   34300:	10a4      	asrs	r4, r4, #2
   34302:	42a6      	cmp	r6, r4
   34304:	d105      	bne.n	34312 <__libc_init_array+0x2e>
   34306:	bd70      	pop	{r4, r5, r6, pc}
   34308:	00b3      	lsls	r3, r6, #2
   3430a:	58eb      	ldr	r3, [r5, r3]
   3430c:	4798      	blx	r3
   3430e:	3601      	adds	r6, #1
   34310:	e7ee      	b.n	342f0 <__libc_init_array+0xc>
   34312:	00b3      	lsls	r3, r6, #2
   34314:	58eb      	ldr	r3, [r5, r3]
   34316:	4798      	blx	r3
   34318:	3601      	adds	r6, #1
   3431a:	e7f2      	b.n	34302 <__libc_init_array+0x1e>
   3431c:	00039b5c 	.word	0x00039b5c
   34320:	00039b5c 	.word	0x00039b5c
   34324:	00039b5c 	.word	0x00039b5c
   34328:	00039b60 	.word	0x00039b60

0003432c <malloc>:
   3432c:	b510      	push	{r4, lr}
   3432e:	4b03      	ldr	r3, [pc, #12]	; (3433c <malloc+0x10>)
   34330:	0001      	movs	r1, r0
   34332:	6818      	ldr	r0, [r3, #0]
   34334:	f000 f87c 	bl	34430 <_malloc_r>
   34338:	bd10      	pop	{r4, pc}
   3433a:	46c0      	nop			; (mov r8, r8)
   3433c:	200000d4 	.word	0x200000d4

00034340 <free>:
   34340:	b510      	push	{r4, lr}
   34342:	4b03      	ldr	r3, [pc, #12]	; (34350 <free+0x10>)
   34344:	0001      	movs	r1, r0
   34346:	6818      	ldr	r0, [r3, #0]
   34348:	f000 f828 	bl	3439c <_free_r>
   3434c:	bd10      	pop	{r4, pc}
   3434e:	46c0      	nop			; (mov r8, r8)
   34350:	200000d4 	.word	0x200000d4

00034354 <memcpy>:
   34354:	2300      	movs	r3, #0
   34356:	b510      	push	{r4, lr}
   34358:	429a      	cmp	r2, r3
   3435a:	d100      	bne.n	3435e <memcpy+0xa>
   3435c:	bd10      	pop	{r4, pc}
   3435e:	5ccc      	ldrb	r4, [r1, r3]
   34360:	54c4      	strb	r4, [r0, r3]
   34362:	3301      	adds	r3, #1
   34364:	e7f8      	b.n	34358 <memcpy+0x4>

00034366 <memmove>:
   34366:	b510      	push	{r4, lr}
   34368:	4288      	cmp	r0, r1
   3436a:	d902      	bls.n	34372 <memmove+0xc>
   3436c:	188b      	adds	r3, r1, r2
   3436e:	4298      	cmp	r0, r3
   34370:	d308      	bcc.n	34384 <memmove+0x1e>
   34372:	2300      	movs	r3, #0
   34374:	429a      	cmp	r2, r3
   34376:	d007      	beq.n	34388 <memmove+0x22>
   34378:	5ccc      	ldrb	r4, [r1, r3]
   3437a:	54c4      	strb	r4, [r0, r3]
   3437c:	3301      	adds	r3, #1
   3437e:	e7f9      	b.n	34374 <memmove+0xe>
   34380:	5c8b      	ldrb	r3, [r1, r2]
   34382:	5483      	strb	r3, [r0, r2]
   34384:	3a01      	subs	r2, #1
   34386:	d2fb      	bcs.n	34380 <memmove+0x1a>
   34388:	bd10      	pop	{r4, pc}

0003438a <memset>:
   3438a:	0003      	movs	r3, r0
   3438c:	1882      	adds	r2, r0, r2
   3438e:	4293      	cmp	r3, r2
   34390:	d100      	bne.n	34394 <memset+0xa>
   34392:	4770      	bx	lr
   34394:	7019      	strb	r1, [r3, #0]
   34396:	3301      	adds	r3, #1
   34398:	e7f9      	b.n	3438e <memset+0x4>
	...

0003439c <_free_r>:
   3439c:	b570      	push	{r4, r5, r6, lr}
   3439e:	0005      	movs	r5, r0
   343a0:	2900      	cmp	r1, #0
   343a2:	d010      	beq.n	343c6 <_free_r+0x2a>
   343a4:	1f0c      	subs	r4, r1, #4
   343a6:	6823      	ldr	r3, [r4, #0]
   343a8:	2b00      	cmp	r3, #0
   343aa:	da00      	bge.n	343ae <_free_r+0x12>
   343ac:	18e4      	adds	r4, r4, r3
   343ae:	0028      	movs	r0, r5
   343b0:	f000 fdca 	bl	34f48 <__malloc_lock>
   343b4:	4a1d      	ldr	r2, [pc, #116]	; (3442c <_free_r+0x90>)
   343b6:	6813      	ldr	r3, [r2, #0]
   343b8:	2b00      	cmp	r3, #0
   343ba:	d105      	bne.n	343c8 <_free_r+0x2c>
   343bc:	6063      	str	r3, [r4, #4]
   343be:	6014      	str	r4, [r2, #0]
   343c0:	0028      	movs	r0, r5
   343c2:	f000 fdc2 	bl	34f4a <__malloc_unlock>
   343c6:	bd70      	pop	{r4, r5, r6, pc}
   343c8:	42a3      	cmp	r3, r4
   343ca:	d909      	bls.n	343e0 <_free_r+0x44>
   343cc:	6821      	ldr	r1, [r4, #0]
   343ce:	1860      	adds	r0, r4, r1
   343d0:	4283      	cmp	r3, r0
   343d2:	d1f3      	bne.n	343bc <_free_r+0x20>
   343d4:	6818      	ldr	r0, [r3, #0]
   343d6:	685b      	ldr	r3, [r3, #4]
   343d8:	1841      	adds	r1, r0, r1
   343da:	6021      	str	r1, [r4, #0]
   343dc:	e7ee      	b.n	343bc <_free_r+0x20>
   343de:	0013      	movs	r3, r2
   343e0:	685a      	ldr	r2, [r3, #4]
   343e2:	2a00      	cmp	r2, #0
   343e4:	d001      	beq.n	343ea <_free_r+0x4e>
   343e6:	42a2      	cmp	r2, r4
   343e8:	d9f9      	bls.n	343de <_free_r+0x42>
   343ea:	6819      	ldr	r1, [r3, #0]
   343ec:	1858      	adds	r0, r3, r1
   343ee:	42a0      	cmp	r0, r4
   343f0:	d10b      	bne.n	3440a <_free_r+0x6e>
   343f2:	6820      	ldr	r0, [r4, #0]
   343f4:	1809      	adds	r1, r1, r0
   343f6:	1858      	adds	r0, r3, r1
   343f8:	6019      	str	r1, [r3, #0]
   343fa:	4282      	cmp	r2, r0
   343fc:	d1e0      	bne.n	343c0 <_free_r+0x24>
   343fe:	6810      	ldr	r0, [r2, #0]
   34400:	6852      	ldr	r2, [r2, #4]
   34402:	1841      	adds	r1, r0, r1
   34404:	6019      	str	r1, [r3, #0]
   34406:	605a      	str	r2, [r3, #4]
   34408:	e7da      	b.n	343c0 <_free_r+0x24>
   3440a:	42a0      	cmp	r0, r4
   3440c:	d902      	bls.n	34414 <_free_r+0x78>
   3440e:	230c      	movs	r3, #12
   34410:	602b      	str	r3, [r5, #0]
   34412:	e7d5      	b.n	343c0 <_free_r+0x24>
   34414:	6821      	ldr	r1, [r4, #0]
   34416:	1860      	adds	r0, r4, r1
   34418:	4282      	cmp	r2, r0
   3441a:	d103      	bne.n	34424 <_free_r+0x88>
   3441c:	6810      	ldr	r0, [r2, #0]
   3441e:	6852      	ldr	r2, [r2, #4]
   34420:	1841      	adds	r1, r0, r1
   34422:	6021      	str	r1, [r4, #0]
   34424:	6062      	str	r2, [r4, #4]
   34426:	605c      	str	r4, [r3, #4]
   34428:	e7ca      	b.n	343c0 <_free_r+0x24>
   3442a:	46c0      	nop			; (mov r8, r8)
   3442c:	20004310 	.word	0x20004310

00034430 <_malloc_r>:
   34430:	2303      	movs	r3, #3
   34432:	b570      	push	{r4, r5, r6, lr}
   34434:	1ccd      	adds	r5, r1, #3
   34436:	439d      	bics	r5, r3
   34438:	3508      	adds	r5, #8
   3443a:	0006      	movs	r6, r0
   3443c:	2d0c      	cmp	r5, #12
   3443e:	d21e      	bcs.n	3447e <_malloc_r+0x4e>
   34440:	250c      	movs	r5, #12
   34442:	42a9      	cmp	r1, r5
   34444:	d81d      	bhi.n	34482 <_malloc_r+0x52>
   34446:	0030      	movs	r0, r6
   34448:	f000 fd7e 	bl	34f48 <__malloc_lock>
   3444c:	4a25      	ldr	r2, [pc, #148]	; (344e4 <_malloc_r+0xb4>)
   3444e:	6814      	ldr	r4, [r2, #0]
   34450:	0021      	movs	r1, r4
   34452:	2900      	cmp	r1, #0
   34454:	d119      	bne.n	3448a <_malloc_r+0x5a>
   34456:	4c24      	ldr	r4, [pc, #144]	; (344e8 <_malloc_r+0xb8>)
   34458:	6823      	ldr	r3, [r4, #0]
   3445a:	2b00      	cmp	r3, #0
   3445c:	d103      	bne.n	34466 <_malloc_r+0x36>
   3445e:	0030      	movs	r0, r6
   34460:	f000 f8ae 	bl	345c0 <_sbrk_r>
   34464:	6020      	str	r0, [r4, #0]
   34466:	0029      	movs	r1, r5
   34468:	0030      	movs	r0, r6
   3446a:	f000 f8a9 	bl	345c0 <_sbrk_r>
   3446e:	1c43      	adds	r3, r0, #1
   34470:	d12c      	bne.n	344cc <_malloc_r+0x9c>
   34472:	230c      	movs	r3, #12
   34474:	0030      	movs	r0, r6
   34476:	6033      	str	r3, [r6, #0]
   34478:	f000 fd67 	bl	34f4a <__malloc_unlock>
   3447c:	e003      	b.n	34486 <_malloc_r+0x56>
   3447e:	2d00      	cmp	r5, #0
   34480:	dadf      	bge.n	34442 <_malloc_r+0x12>
   34482:	230c      	movs	r3, #12
   34484:	6033      	str	r3, [r6, #0]
   34486:	2000      	movs	r0, #0
   34488:	bd70      	pop	{r4, r5, r6, pc}
   3448a:	680b      	ldr	r3, [r1, #0]
   3448c:	1b5b      	subs	r3, r3, r5
   3448e:	d41a      	bmi.n	344c6 <_malloc_r+0x96>
   34490:	2b0b      	cmp	r3, #11
   34492:	d903      	bls.n	3449c <_malloc_r+0x6c>
   34494:	600b      	str	r3, [r1, #0]
   34496:	18cc      	adds	r4, r1, r3
   34498:	6025      	str	r5, [r4, #0]
   3449a:	e003      	b.n	344a4 <_malloc_r+0x74>
   3449c:	428c      	cmp	r4, r1
   3449e:	d10e      	bne.n	344be <_malloc_r+0x8e>
   344a0:	6863      	ldr	r3, [r4, #4]
   344a2:	6013      	str	r3, [r2, #0]
   344a4:	0030      	movs	r0, r6
   344a6:	f000 fd50 	bl	34f4a <__malloc_unlock>
   344aa:	0020      	movs	r0, r4
   344ac:	2207      	movs	r2, #7
   344ae:	300b      	adds	r0, #11
   344b0:	1d23      	adds	r3, r4, #4
   344b2:	4390      	bics	r0, r2
   344b4:	1ac3      	subs	r3, r0, r3
   344b6:	d0e7      	beq.n	34488 <_malloc_r+0x58>
   344b8:	425a      	negs	r2, r3
   344ba:	50e2      	str	r2, [r4, r3]
   344bc:	e7e4      	b.n	34488 <_malloc_r+0x58>
   344be:	684b      	ldr	r3, [r1, #4]
   344c0:	6063      	str	r3, [r4, #4]
   344c2:	000c      	movs	r4, r1
   344c4:	e7ee      	b.n	344a4 <_malloc_r+0x74>
   344c6:	000c      	movs	r4, r1
   344c8:	6849      	ldr	r1, [r1, #4]
   344ca:	e7c2      	b.n	34452 <_malloc_r+0x22>
   344cc:	2303      	movs	r3, #3
   344ce:	1cc4      	adds	r4, r0, #3
   344d0:	439c      	bics	r4, r3
   344d2:	42a0      	cmp	r0, r4
   344d4:	d0e0      	beq.n	34498 <_malloc_r+0x68>
   344d6:	1a21      	subs	r1, r4, r0
   344d8:	0030      	movs	r0, r6
   344da:	f000 f871 	bl	345c0 <_sbrk_r>
   344de:	1c43      	adds	r3, r0, #1
   344e0:	d1da      	bne.n	34498 <_malloc_r+0x68>
   344e2:	e7c6      	b.n	34472 <_malloc_r+0x42>
   344e4:	20004310 	.word	0x20004310
   344e8:	20004314 	.word	0x20004314

000344ec <_puts_r>:
   344ec:	b570      	push	{r4, r5, r6, lr}
   344ee:	0005      	movs	r5, r0
   344f0:	000e      	movs	r6, r1
   344f2:	2800      	cmp	r0, #0
   344f4:	d004      	beq.n	34500 <_puts_r+0x14>
   344f6:	6983      	ldr	r3, [r0, #24]
   344f8:	2b00      	cmp	r3, #0
   344fa:	d101      	bne.n	34500 <_puts_r+0x14>
   344fc:	f000 fc00 	bl	34d00 <__sinit>
   34500:	69ab      	ldr	r3, [r5, #24]
   34502:	68ac      	ldr	r4, [r5, #8]
   34504:	2b00      	cmp	r3, #0
   34506:	d102      	bne.n	3450e <_puts_r+0x22>
   34508:	0028      	movs	r0, r5
   3450a:	f000 fbf9 	bl	34d00 <__sinit>
   3450e:	4b24      	ldr	r3, [pc, #144]	; (345a0 <_puts_r+0xb4>)
   34510:	429c      	cmp	r4, r3
   34512:	d10f      	bne.n	34534 <_puts_r+0x48>
   34514:	686c      	ldr	r4, [r5, #4]
   34516:	89a3      	ldrh	r3, [r4, #12]
   34518:	071b      	lsls	r3, r3, #28
   3451a:	d502      	bpl.n	34522 <_puts_r+0x36>
   3451c:	6923      	ldr	r3, [r4, #16]
   3451e:	2b00      	cmp	r3, #0
   34520:	d120      	bne.n	34564 <_puts_r+0x78>
   34522:	0021      	movs	r1, r4
   34524:	0028      	movs	r0, r5
   34526:	f000 fa7d 	bl	34a24 <__swsetup_r>
   3452a:	2800      	cmp	r0, #0
   3452c:	d01a      	beq.n	34564 <_puts_r+0x78>
   3452e:	2001      	movs	r0, #1
   34530:	4240      	negs	r0, r0
   34532:	bd70      	pop	{r4, r5, r6, pc}
   34534:	4b1b      	ldr	r3, [pc, #108]	; (345a4 <_puts_r+0xb8>)
   34536:	429c      	cmp	r4, r3
   34538:	d101      	bne.n	3453e <_puts_r+0x52>
   3453a:	68ac      	ldr	r4, [r5, #8]
   3453c:	e7eb      	b.n	34516 <_puts_r+0x2a>
   3453e:	4b1a      	ldr	r3, [pc, #104]	; (345a8 <_puts_r+0xbc>)
   34540:	429c      	cmp	r4, r3
   34542:	d1e8      	bne.n	34516 <_puts_r+0x2a>
   34544:	68ec      	ldr	r4, [r5, #12]
   34546:	e7e6      	b.n	34516 <_puts_r+0x2a>
   34548:	3b01      	subs	r3, #1
   3454a:	3601      	adds	r6, #1
   3454c:	60a3      	str	r3, [r4, #8]
   3454e:	2b00      	cmp	r3, #0
   34550:	da04      	bge.n	3455c <_puts_r+0x70>
   34552:	69a2      	ldr	r2, [r4, #24]
   34554:	4293      	cmp	r3, r2
   34556:	db16      	blt.n	34586 <_puts_r+0x9a>
   34558:	290a      	cmp	r1, #10
   3455a:	d014      	beq.n	34586 <_puts_r+0x9a>
   3455c:	6823      	ldr	r3, [r4, #0]
   3455e:	1c5a      	adds	r2, r3, #1
   34560:	6022      	str	r2, [r4, #0]
   34562:	7019      	strb	r1, [r3, #0]
   34564:	7831      	ldrb	r1, [r6, #0]
   34566:	68a3      	ldr	r3, [r4, #8]
   34568:	2900      	cmp	r1, #0
   3456a:	d1ed      	bne.n	34548 <_puts_r+0x5c>
   3456c:	3b01      	subs	r3, #1
   3456e:	60a3      	str	r3, [r4, #8]
   34570:	2b00      	cmp	r3, #0
   34572:	da0f      	bge.n	34594 <_puts_r+0xa8>
   34574:	0022      	movs	r2, r4
   34576:	310a      	adds	r1, #10
   34578:	0028      	movs	r0, r5
   3457a:	f000 f9fd 	bl	34978 <__swbuf_r>
   3457e:	1c43      	adds	r3, r0, #1
   34580:	d0d5      	beq.n	3452e <_puts_r+0x42>
   34582:	200a      	movs	r0, #10
   34584:	e7d5      	b.n	34532 <_puts_r+0x46>
   34586:	0022      	movs	r2, r4
   34588:	0028      	movs	r0, r5
   3458a:	f000 f9f5 	bl	34978 <__swbuf_r>
   3458e:	1c43      	adds	r3, r0, #1
   34590:	d1e8      	bne.n	34564 <_puts_r+0x78>
   34592:	e7cc      	b.n	3452e <_puts_r+0x42>
   34594:	200a      	movs	r0, #10
   34596:	6823      	ldr	r3, [r4, #0]
   34598:	1c5a      	adds	r2, r3, #1
   3459a:	6022      	str	r2, [r4, #0]
   3459c:	7018      	strb	r0, [r3, #0]
   3459e:	e7c8      	b.n	34532 <_puts_r+0x46>
   345a0:	000399d0 	.word	0x000399d0
   345a4:	000399f0 	.word	0x000399f0
   345a8:	000399b0 	.word	0x000399b0

000345ac <puts>:
   345ac:	b510      	push	{r4, lr}
   345ae:	4b03      	ldr	r3, [pc, #12]	; (345bc <puts+0x10>)
   345b0:	0001      	movs	r1, r0
   345b2:	6818      	ldr	r0, [r3, #0]
   345b4:	f7ff ff9a 	bl	344ec <_puts_r>
   345b8:	bd10      	pop	{r4, pc}
   345ba:	46c0      	nop			; (mov r8, r8)
   345bc:	200000d4 	.word	0x200000d4

000345c0 <_sbrk_r>:
   345c0:	2300      	movs	r3, #0
   345c2:	b570      	push	{r4, r5, r6, lr}
   345c4:	4c06      	ldr	r4, [pc, #24]	; (345e0 <_sbrk_r+0x20>)
   345c6:	0005      	movs	r5, r0
   345c8:	0008      	movs	r0, r1
   345ca:	6023      	str	r3, [r4, #0]
   345cc:	f7f6 fac4 	bl	2ab58 <_sbrk>
   345d0:	1c43      	adds	r3, r0, #1
   345d2:	d103      	bne.n	345dc <_sbrk_r+0x1c>
   345d4:	6823      	ldr	r3, [r4, #0]
   345d6:	2b00      	cmp	r3, #0
   345d8:	d000      	beq.n	345dc <_sbrk_r+0x1c>
   345da:	602b      	str	r3, [r5, #0]
   345dc:	bd70      	pop	{r4, r5, r6, pc}
   345de:	46c0      	nop			; (mov r8, r8)
   345e0:	2000580c 	.word	0x2000580c

000345e4 <sniprintf>:
   345e4:	b40c      	push	{r2, r3}
   345e6:	b530      	push	{r4, r5, lr}
   345e8:	4b16      	ldr	r3, [pc, #88]	; (34644 <sniprintf+0x60>)
   345ea:	b09d      	sub	sp, #116	; 0x74
   345ec:	1e0c      	subs	r4, r1, #0
   345ee:	681d      	ldr	r5, [r3, #0]
   345f0:	da08      	bge.n	34604 <sniprintf+0x20>
   345f2:	238b      	movs	r3, #139	; 0x8b
   345f4:	2001      	movs	r0, #1
   345f6:	602b      	str	r3, [r5, #0]
   345f8:	4240      	negs	r0, r0
   345fa:	b01d      	add	sp, #116	; 0x74
   345fc:	bc30      	pop	{r4, r5}
   345fe:	bc08      	pop	{r3}
   34600:	b002      	add	sp, #8
   34602:	4718      	bx	r3
   34604:	2382      	movs	r3, #130	; 0x82
   34606:	a902      	add	r1, sp, #8
   34608:	009b      	lsls	r3, r3, #2
   3460a:	818b      	strh	r3, [r1, #12]
   3460c:	2300      	movs	r3, #0
   3460e:	9002      	str	r0, [sp, #8]
   34610:	6108      	str	r0, [r1, #16]
   34612:	429c      	cmp	r4, r3
   34614:	d000      	beq.n	34618 <sniprintf+0x34>
   34616:	1e63      	subs	r3, r4, #1
   34618:	608b      	str	r3, [r1, #8]
   3461a:	614b      	str	r3, [r1, #20]
   3461c:	2301      	movs	r3, #1
   3461e:	425b      	negs	r3, r3
   34620:	81cb      	strh	r3, [r1, #14]
   34622:	9a20      	ldr	r2, [sp, #128]	; 0x80
   34624:	ab21      	add	r3, sp, #132	; 0x84
   34626:	0028      	movs	r0, r5
   34628:	9301      	str	r3, [sp, #4]
   3462a:	f000 fcf1 	bl	35010 <_svfiprintf_r>
   3462e:	1c43      	adds	r3, r0, #1
   34630:	da01      	bge.n	34636 <sniprintf+0x52>
   34632:	238b      	movs	r3, #139	; 0x8b
   34634:	602b      	str	r3, [r5, #0]
   34636:	2c00      	cmp	r4, #0
   34638:	d0df      	beq.n	345fa <sniprintf+0x16>
   3463a:	2300      	movs	r3, #0
   3463c:	9a02      	ldr	r2, [sp, #8]
   3463e:	7013      	strb	r3, [r2, #0]
   34640:	e7db      	b.n	345fa <sniprintf+0x16>
   34642:	46c0      	nop			; (mov r8, r8)
   34644:	200000d4 	.word	0x200000d4

00034648 <siprintf>:
   34648:	b40e      	push	{r1, r2, r3}
   3464a:	b510      	push	{r4, lr}
   3464c:	b09d      	sub	sp, #116	; 0x74
   3464e:	a902      	add	r1, sp, #8
   34650:	9002      	str	r0, [sp, #8]
   34652:	6108      	str	r0, [r1, #16]
   34654:	480b      	ldr	r0, [pc, #44]	; (34684 <siprintf+0x3c>)
   34656:	2482      	movs	r4, #130	; 0x82
   34658:	6088      	str	r0, [r1, #8]
   3465a:	6148      	str	r0, [r1, #20]
   3465c:	2001      	movs	r0, #1
   3465e:	4240      	negs	r0, r0
   34660:	ab1f      	add	r3, sp, #124	; 0x7c
   34662:	81c8      	strh	r0, [r1, #14]
   34664:	4808      	ldr	r0, [pc, #32]	; (34688 <siprintf+0x40>)
   34666:	cb04      	ldmia	r3!, {r2}
   34668:	00a4      	lsls	r4, r4, #2
   3466a:	6800      	ldr	r0, [r0, #0]
   3466c:	9301      	str	r3, [sp, #4]
   3466e:	818c      	strh	r4, [r1, #12]
   34670:	f000 fcce 	bl	35010 <_svfiprintf_r>
   34674:	2300      	movs	r3, #0
   34676:	9a02      	ldr	r2, [sp, #8]
   34678:	7013      	strb	r3, [r2, #0]
   3467a:	b01d      	add	sp, #116	; 0x74
   3467c:	bc10      	pop	{r4}
   3467e:	bc08      	pop	{r3}
   34680:	b003      	add	sp, #12
   34682:	4718      	bx	r3
   34684:	7fffffff 	.word	0x7fffffff
   34688:	200000d4 	.word	0x200000d4

0003468c <strcasecmp>:
   3468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3468e:	0007      	movs	r7, r0
   34690:	000e      	movs	r6, r1
   34692:	783c      	ldrb	r4, [r7, #0]
   34694:	f000 fbcc 	bl	34e30 <__locale_ctype_ptr>
   34698:	2203      	movs	r2, #3
   3469a:	1900      	adds	r0, r0, r4
   3469c:	7843      	ldrb	r3, [r0, #1]
   3469e:	4013      	ands	r3, r2
   346a0:	2b01      	cmp	r3, #1
   346a2:	d100      	bne.n	346a6 <strcasecmp+0x1a>
   346a4:	3420      	adds	r4, #32
   346a6:	7835      	ldrb	r5, [r6, #0]
   346a8:	f000 fbc2 	bl	34e30 <__locale_ctype_ptr>
   346ac:	2203      	movs	r2, #3
   346ae:	1940      	adds	r0, r0, r5
   346b0:	7843      	ldrb	r3, [r0, #1]
   346b2:	4013      	ands	r3, r2
   346b4:	2b01      	cmp	r3, #1
   346b6:	d100      	bne.n	346ba <strcasecmp+0x2e>
   346b8:	3520      	adds	r5, #32
   346ba:	1b60      	subs	r0, r4, r5
   346bc:	d103      	bne.n	346c6 <strcasecmp+0x3a>
   346be:	3701      	adds	r7, #1
   346c0:	3601      	adds	r6, #1
   346c2:	2d00      	cmp	r5, #0
   346c4:	d1e5      	bne.n	34692 <strcasecmp+0x6>
   346c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000346c8 <strcmp>:
   346c8:	7802      	ldrb	r2, [r0, #0]
   346ca:	780b      	ldrb	r3, [r1, #0]
   346cc:	2a00      	cmp	r2, #0
   346ce:	d003      	beq.n	346d8 <strcmp+0x10>
   346d0:	3001      	adds	r0, #1
   346d2:	3101      	adds	r1, #1
   346d4:	429a      	cmp	r2, r3
   346d6:	d0f7      	beq.n	346c8 <strcmp>
   346d8:	1ad0      	subs	r0, r2, r3
   346da:	4770      	bx	lr

000346dc <strcpy>:
   346dc:	1c03      	adds	r3, r0, #0
   346de:	780a      	ldrb	r2, [r1, #0]
   346e0:	3101      	adds	r1, #1
   346e2:	701a      	strb	r2, [r3, #0]
   346e4:	3301      	adds	r3, #1
   346e6:	2a00      	cmp	r2, #0
   346e8:	d1f9      	bne.n	346de <strcpy+0x2>
   346ea:	4770      	bx	lr

000346ec <strdup>:
   346ec:	b510      	push	{r4, lr}
   346ee:	4b03      	ldr	r3, [pc, #12]	; (346fc <strdup+0x10>)
   346f0:	0001      	movs	r1, r0
   346f2:	6818      	ldr	r0, [r3, #0]
   346f4:	f000 f804 	bl	34700 <_strdup_r>
   346f8:	bd10      	pop	{r4, pc}
   346fa:	46c0      	nop			; (mov r8, r8)
   346fc:	200000d4 	.word	0x200000d4

00034700 <_strdup_r>:
   34700:	b570      	push	{r4, r5, r6, lr}
   34702:	0005      	movs	r5, r0
   34704:	0008      	movs	r0, r1
   34706:	000e      	movs	r6, r1
   34708:	f000 f80d 	bl	34726 <strlen>
   3470c:	1c44      	adds	r4, r0, #1
   3470e:	0021      	movs	r1, r4
   34710:	0028      	movs	r0, r5
   34712:	f7ff fe8d 	bl	34430 <_malloc_r>
   34716:	1e05      	subs	r5, r0, #0
   34718:	d003      	beq.n	34722 <_strdup_r+0x22>
   3471a:	0022      	movs	r2, r4
   3471c:	0031      	movs	r1, r6
   3471e:	f7ff fe19 	bl	34354 <memcpy>
   34722:	0028      	movs	r0, r5
   34724:	bd70      	pop	{r4, r5, r6, pc}

00034726 <strlen>:
   34726:	2300      	movs	r3, #0
   34728:	5cc2      	ldrb	r2, [r0, r3]
   3472a:	3301      	adds	r3, #1
   3472c:	2a00      	cmp	r2, #0
   3472e:	d1fb      	bne.n	34728 <strlen+0x2>
   34730:	1e58      	subs	r0, r3, #1
   34732:	4770      	bx	lr

00034734 <strncmp>:
   34734:	2300      	movs	r3, #0
   34736:	b530      	push	{r4, r5, lr}
   34738:	429a      	cmp	r2, r3
   3473a:	d00a      	beq.n	34752 <strncmp+0x1e>
   3473c:	3a01      	subs	r2, #1
   3473e:	5cc4      	ldrb	r4, [r0, r3]
   34740:	5ccd      	ldrb	r5, [r1, r3]
   34742:	42ac      	cmp	r4, r5
   34744:	d104      	bne.n	34750 <strncmp+0x1c>
   34746:	429a      	cmp	r2, r3
   34748:	d002      	beq.n	34750 <strncmp+0x1c>
   3474a:	3301      	adds	r3, #1
   3474c:	2c00      	cmp	r4, #0
   3474e:	d1f6      	bne.n	3473e <strncmp+0xa>
   34750:	1b63      	subs	r3, r4, r5
   34752:	0018      	movs	r0, r3
   34754:	bd30      	pop	{r4, r5, pc}

00034756 <strncpy>:
   34756:	b570      	push	{r4, r5, r6, lr}
   34758:	0004      	movs	r4, r0
   3475a:	2a00      	cmp	r2, #0
   3475c:	d100      	bne.n	34760 <strncpy+0xa>
   3475e:	bd70      	pop	{r4, r5, r6, pc}
   34760:	780d      	ldrb	r5, [r1, #0]
   34762:	1e56      	subs	r6, r2, #1
   34764:	1c63      	adds	r3, r4, #1
   34766:	7025      	strb	r5, [r4, #0]
   34768:	3101      	adds	r1, #1
   3476a:	2d00      	cmp	r5, #0
   3476c:	d105      	bne.n	3477a <strncpy+0x24>
   3476e:	18a4      	adds	r4, r4, r2
   34770:	429c      	cmp	r4, r3
   34772:	d0f4      	beq.n	3475e <strncpy+0x8>
   34774:	701d      	strb	r5, [r3, #0]
   34776:	3301      	adds	r3, #1
   34778:	e7fa      	b.n	34770 <strncpy+0x1a>
   3477a:	001c      	movs	r4, r3
   3477c:	0032      	movs	r2, r6
   3477e:	e7ec      	b.n	3475a <strncpy+0x4>

00034780 <strrchr>:
   34780:	b570      	push	{r4, r5, r6, lr}
   34782:	000d      	movs	r5, r1
   34784:	2400      	movs	r4, #0
   34786:	2900      	cmp	r1, #0
   34788:	d105      	bne.n	34796 <strrchr+0x16>
   3478a:	f000 ff19 	bl	355c0 <strchr>
   3478e:	0004      	movs	r4, r0
   34790:	e006      	b.n	347a0 <strrchr+0x20>
   34792:	001c      	movs	r4, r3
   34794:	1c58      	adds	r0, r3, #1
   34796:	0029      	movs	r1, r5
   34798:	f000 ff12 	bl	355c0 <strchr>
   3479c:	1e03      	subs	r3, r0, #0
   3479e:	d1f8      	bne.n	34792 <strrchr+0x12>
   347a0:	0020      	movs	r0, r4
   347a2:	bd70      	pop	{r4, r5, r6, pc}

000347a4 <strstr>:
   347a4:	b510      	push	{r4, lr}
   347a6:	0002      	movs	r2, r0
   347a8:	7800      	ldrb	r0, [r0, #0]
   347aa:	2800      	cmp	r0, #0
   347ac:	d104      	bne.n	347b8 <strstr+0x14>
   347ae:	7809      	ldrb	r1, [r1, #0]
   347b0:	2900      	cmp	r1, #0
   347b2:	d00d      	beq.n	347d0 <strstr+0x2c>
   347b4:	bd10      	pop	{r4, pc}
   347b6:	3201      	adds	r2, #1
   347b8:	7810      	ldrb	r0, [r2, #0]
   347ba:	2800      	cmp	r0, #0
   347bc:	d0fa      	beq.n	347b4 <strstr+0x10>
   347be:	2300      	movs	r3, #0
   347c0:	5cc8      	ldrb	r0, [r1, r3]
   347c2:	2800      	cmp	r0, #0
   347c4:	d004      	beq.n	347d0 <strstr+0x2c>
   347c6:	5cd4      	ldrb	r4, [r2, r3]
   347c8:	4284      	cmp	r4, r0
   347ca:	d1f4      	bne.n	347b6 <strstr+0x12>
   347cc:	3301      	adds	r3, #1
   347ce:	e7f7      	b.n	347c0 <strstr+0x1c>
   347d0:	0010      	movs	r0, r2
   347d2:	e7ef      	b.n	347b4 <strstr+0x10>

000347d4 <_strtol_l.isra.0>:
   347d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   347d6:	001f      	movs	r7, r3
   347d8:	000e      	movs	r6, r1
   347da:	b087      	sub	sp, #28
   347dc:	9005      	str	r0, [sp, #20]
   347de:	9103      	str	r1, [sp, #12]
   347e0:	9202      	str	r2, [sp, #8]
   347e2:	980c      	ldr	r0, [sp, #48]	; 0x30
   347e4:	7834      	ldrb	r4, [r6, #0]
   347e6:	f000 fb20 	bl	34e2a <__locale_ctype_ptr_l>
   347ea:	2208      	movs	r2, #8
   347ec:	1900      	adds	r0, r0, r4
   347ee:	7843      	ldrb	r3, [r0, #1]
   347f0:	1c75      	adds	r5, r6, #1
   347f2:	4013      	ands	r3, r2
   347f4:	d10c      	bne.n	34810 <_strtol_l.isra.0+0x3c>
   347f6:	2c2d      	cmp	r4, #45	; 0x2d
   347f8:	d10c      	bne.n	34814 <_strtol_l.isra.0+0x40>
   347fa:	3301      	adds	r3, #1
   347fc:	782c      	ldrb	r4, [r5, #0]
   347fe:	9301      	str	r3, [sp, #4]
   34800:	1cb5      	adds	r5, r6, #2
   34802:	2f00      	cmp	r7, #0
   34804:	d00c      	beq.n	34820 <_strtol_l.isra.0+0x4c>
   34806:	2f10      	cmp	r7, #16
   34808:	d114      	bne.n	34834 <_strtol_l.isra.0+0x60>
   3480a:	2c30      	cmp	r4, #48	; 0x30
   3480c:	d00a      	beq.n	34824 <_strtol_l.isra.0+0x50>
   3480e:	e011      	b.n	34834 <_strtol_l.isra.0+0x60>
   34810:	002e      	movs	r6, r5
   34812:	e7e6      	b.n	347e2 <_strtol_l.isra.0+0xe>
   34814:	9301      	str	r3, [sp, #4]
   34816:	2c2b      	cmp	r4, #43	; 0x2b
   34818:	d1f3      	bne.n	34802 <_strtol_l.isra.0+0x2e>
   3481a:	782c      	ldrb	r4, [r5, #0]
   3481c:	1cb5      	adds	r5, r6, #2
   3481e:	e7f0      	b.n	34802 <_strtol_l.isra.0+0x2e>
   34820:	2c30      	cmp	r4, #48	; 0x30
   34822:	d12f      	bne.n	34884 <_strtol_l.isra.0+0xb0>
   34824:	2220      	movs	r2, #32
   34826:	782b      	ldrb	r3, [r5, #0]
   34828:	4393      	bics	r3, r2
   3482a:	2b58      	cmp	r3, #88	; 0x58
   3482c:	d151      	bne.n	348d2 <_strtol_l.isra.0+0xfe>
   3482e:	2710      	movs	r7, #16
   34830:	786c      	ldrb	r4, [r5, #1]
   34832:	3502      	adds	r5, #2
   34834:	9b01      	ldr	r3, [sp, #4]
   34836:	4a29      	ldr	r2, [pc, #164]	; (348dc <_strtol_l.isra.0+0x108>)
   34838:	0039      	movs	r1, r7
   3483a:	189e      	adds	r6, r3, r2
   3483c:	0030      	movs	r0, r6
   3483e:	f7fd fe3d 	bl	324bc <__aeabi_uidivmod>
   34842:	0030      	movs	r0, r6
   34844:	9104      	str	r1, [sp, #16]
   34846:	0039      	movs	r1, r7
   34848:	f7fd fdb2 	bl	323b0 <__udivsi3>
   3484c:	2101      	movs	r1, #1
   3484e:	2300      	movs	r3, #0
   34850:	4249      	negs	r1, r1
   34852:	0002      	movs	r2, r0
   34854:	468c      	mov	ip, r1
   34856:	0018      	movs	r0, r3
   34858:	0021      	movs	r1, r4
   3485a:	3930      	subs	r1, #48	; 0x30
   3485c:	2909      	cmp	r1, #9
   3485e:	d813      	bhi.n	34888 <_strtol_l.isra.0+0xb4>
   34860:	000c      	movs	r4, r1
   34862:	42a7      	cmp	r7, r4
   34864:	dd1c      	ble.n	348a0 <_strtol_l.isra.0+0xcc>
   34866:	1c59      	adds	r1, r3, #1
   34868:	d009      	beq.n	3487e <_strtol_l.isra.0+0xaa>
   3486a:	4663      	mov	r3, ip
   3486c:	4282      	cmp	r2, r0
   3486e:	d306      	bcc.n	3487e <_strtol_l.isra.0+0xaa>
   34870:	d102      	bne.n	34878 <_strtol_l.isra.0+0xa4>
   34872:	9904      	ldr	r1, [sp, #16]
   34874:	42a1      	cmp	r1, r4
   34876:	db02      	blt.n	3487e <_strtol_l.isra.0+0xaa>
   34878:	2301      	movs	r3, #1
   3487a:	4378      	muls	r0, r7
   3487c:	1820      	adds	r0, r4, r0
   3487e:	782c      	ldrb	r4, [r5, #0]
   34880:	3501      	adds	r5, #1
   34882:	e7e9      	b.n	34858 <_strtol_l.isra.0+0x84>
   34884:	270a      	movs	r7, #10
   34886:	e7d5      	b.n	34834 <_strtol_l.isra.0+0x60>
   34888:	0021      	movs	r1, r4
   3488a:	3941      	subs	r1, #65	; 0x41
   3488c:	2919      	cmp	r1, #25
   3488e:	d801      	bhi.n	34894 <_strtol_l.isra.0+0xc0>
   34890:	3c37      	subs	r4, #55	; 0x37
   34892:	e7e6      	b.n	34862 <_strtol_l.isra.0+0x8e>
   34894:	0021      	movs	r1, r4
   34896:	3961      	subs	r1, #97	; 0x61
   34898:	2919      	cmp	r1, #25
   3489a:	d801      	bhi.n	348a0 <_strtol_l.isra.0+0xcc>
   3489c:	3c57      	subs	r4, #87	; 0x57
   3489e:	e7e0      	b.n	34862 <_strtol_l.isra.0+0x8e>
   348a0:	1c5a      	adds	r2, r3, #1
   348a2:	d108      	bne.n	348b6 <_strtol_l.isra.0+0xe2>
   348a4:	9a05      	ldr	r2, [sp, #20]
   348a6:	3323      	adds	r3, #35	; 0x23
   348a8:	6013      	str	r3, [r2, #0]
   348aa:	9b02      	ldr	r3, [sp, #8]
   348ac:	0030      	movs	r0, r6
   348ae:	2b00      	cmp	r3, #0
   348b0:	d10b      	bne.n	348ca <_strtol_l.isra.0+0xf6>
   348b2:	b007      	add	sp, #28
   348b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   348b6:	9a01      	ldr	r2, [sp, #4]
   348b8:	2a00      	cmp	r2, #0
   348ba:	d000      	beq.n	348be <_strtol_l.isra.0+0xea>
   348bc:	4240      	negs	r0, r0
   348be:	9a02      	ldr	r2, [sp, #8]
   348c0:	2a00      	cmp	r2, #0
   348c2:	d0f6      	beq.n	348b2 <_strtol_l.isra.0+0xde>
   348c4:	9a03      	ldr	r2, [sp, #12]
   348c6:	2b00      	cmp	r3, #0
   348c8:	d000      	beq.n	348cc <_strtol_l.isra.0+0xf8>
   348ca:	1e6a      	subs	r2, r5, #1
   348cc:	9b02      	ldr	r3, [sp, #8]
   348ce:	601a      	str	r2, [r3, #0]
   348d0:	e7ef      	b.n	348b2 <_strtol_l.isra.0+0xde>
   348d2:	2430      	movs	r4, #48	; 0x30
   348d4:	2f00      	cmp	r7, #0
   348d6:	d1ad      	bne.n	34834 <_strtol_l.isra.0+0x60>
   348d8:	3708      	adds	r7, #8
   348da:	e7ab      	b.n	34834 <_strtol_l.isra.0+0x60>
   348dc:	7fffffff 	.word	0x7fffffff

000348e0 <strtol>:
   348e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   348e2:	0013      	movs	r3, r2
   348e4:	4a06      	ldr	r2, [pc, #24]	; (34900 <strtol+0x20>)
   348e6:	0005      	movs	r5, r0
   348e8:	6810      	ldr	r0, [r2, #0]
   348ea:	6a04      	ldr	r4, [r0, #32]
   348ec:	2c00      	cmp	r4, #0
   348ee:	d100      	bne.n	348f2 <strtol+0x12>
   348f0:	4c04      	ldr	r4, [pc, #16]	; (34904 <strtol+0x24>)
   348f2:	000a      	movs	r2, r1
   348f4:	9400      	str	r4, [sp, #0]
   348f6:	0029      	movs	r1, r5
   348f8:	f7ff ff6c 	bl	347d4 <_strtol_l.isra.0>
   348fc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   348fe:	46c0      	nop			; (mov r8, r8)
   34900:	200000d4 	.word	0x200000d4
   34904:	20000138 	.word	0x20000138

00034908 <_vsniprintf_r>:
   34908:	b530      	push	{r4, r5, lr}
   3490a:	0014      	movs	r4, r2
   3490c:	b09b      	sub	sp, #108	; 0x6c
   3490e:	0005      	movs	r5, r0
   34910:	001a      	movs	r2, r3
   34912:	2c00      	cmp	r4, #0
   34914:	da05      	bge.n	34922 <_vsniprintf_r+0x1a>
   34916:	238b      	movs	r3, #139	; 0x8b
   34918:	6003      	str	r3, [r0, #0]
   3491a:	2001      	movs	r0, #1
   3491c:	4240      	negs	r0, r0
   3491e:	b01b      	add	sp, #108	; 0x6c
   34920:	bd30      	pop	{r4, r5, pc}
   34922:	2382      	movs	r3, #130	; 0x82
   34924:	4668      	mov	r0, sp
   34926:	009b      	lsls	r3, r3, #2
   34928:	8183      	strh	r3, [r0, #12]
   3492a:	2300      	movs	r3, #0
   3492c:	9100      	str	r1, [sp, #0]
   3492e:	9104      	str	r1, [sp, #16]
   34930:	429c      	cmp	r4, r3
   34932:	d000      	beq.n	34936 <_vsniprintf_r+0x2e>
   34934:	1e63      	subs	r3, r4, #1
   34936:	9302      	str	r3, [sp, #8]
   34938:	9305      	str	r3, [sp, #20]
   3493a:	2301      	movs	r3, #1
   3493c:	4669      	mov	r1, sp
   3493e:	425b      	negs	r3, r3
   34940:	81cb      	strh	r3, [r1, #14]
   34942:	0028      	movs	r0, r5
   34944:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   34946:	f000 fb63 	bl	35010 <_svfiprintf_r>
   3494a:	1c43      	adds	r3, r0, #1
   3494c:	da01      	bge.n	34952 <_vsniprintf_r+0x4a>
   3494e:	238b      	movs	r3, #139	; 0x8b
   34950:	602b      	str	r3, [r5, #0]
   34952:	2c00      	cmp	r4, #0
   34954:	d0e3      	beq.n	3491e <_vsniprintf_r+0x16>
   34956:	2300      	movs	r3, #0
   34958:	9a00      	ldr	r2, [sp, #0]
   3495a:	7013      	strb	r3, [r2, #0]
   3495c:	e7df      	b.n	3491e <_vsniprintf_r+0x16>
	...

00034960 <vsniprintf>:
   34960:	b507      	push	{r0, r1, r2, lr}
   34962:	9300      	str	r3, [sp, #0]
   34964:	0013      	movs	r3, r2
   34966:	000a      	movs	r2, r1
   34968:	0001      	movs	r1, r0
   3496a:	4802      	ldr	r0, [pc, #8]	; (34974 <vsniprintf+0x14>)
   3496c:	6800      	ldr	r0, [r0, #0]
   3496e:	f7ff ffcb 	bl	34908 <_vsniprintf_r>
   34972:	bd0e      	pop	{r1, r2, r3, pc}
   34974:	200000d4 	.word	0x200000d4

00034978 <__swbuf_r>:
   34978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3497a:	0005      	movs	r5, r0
   3497c:	000e      	movs	r6, r1
   3497e:	0014      	movs	r4, r2
   34980:	2800      	cmp	r0, #0
   34982:	d004      	beq.n	3498e <__swbuf_r+0x16>
   34984:	6983      	ldr	r3, [r0, #24]
   34986:	2b00      	cmp	r3, #0
   34988:	d101      	bne.n	3498e <__swbuf_r+0x16>
   3498a:	f000 f9b9 	bl	34d00 <__sinit>
   3498e:	4b22      	ldr	r3, [pc, #136]	; (34a18 <__swbuf_r+0xa0>)
   34990:	429c      	cmp	r4, r3
   34992:	d12d      	bne.n	349f0 <__swbuf_r+0x78>
   34994:	686c      	ldr	r4, [r5, #4]
   34996:	69a3      	ldr	r3, [r4, #24]
   34998:	60a3      	str	r3, [r4, #8]
   3499a:	89a3      	ldrh	r3, [r4, #12]
   3499c:	071b      	lsls	r3, r3, #28
   3499e:	d531      	bpl.n	34a04 <__swbuf_r+0x8c>
   349a0:	6923      	ldr	r3, [r4, #16]
   349a2:	2b00      	cmp	r3, #0
   349a4:	d02e      	beq.n	34a04 <__swbuf_r+0x8c>
   349a6:	6823      	ldr	r3, [r4, #0]
   349a8:	6922      	ldr	r2, [r4, #16]
   349aa:	b2f7      	uxtb	r7, r6
   349ac:	1a98      	subs	r0, r3, r2
   349ae:	6963      	ldr	r3, [r4, #20]
   349b0:	b2f6      	uxtb	r6, r6
   349b2:	4298      	cmp	r0, r3
   349b4:	db05      	blt.n	349c2 <__swbuf_r+0x4a>
   349b6:	0021      	movs	r1, r4
   349b8:	0028      	movs	r0, r5
   349ba:	f000 f933 	bl	34c24 <_fflush_r>
   349be:	2800      	cmp	r0, #0
   349c0:	d126      	bne.n	34a10 <__swbuf_r+0x98>
   349c2:	68a3      	ldr	r3, [r4, #8]
   349c4:	3001      	adds	r0, #1
   349c6:	3b01      	subs	r3, #1
   349c8:	60a3      	str	r3, [r4, #8]
   349ca:	6823      	ldr	r3, [r4, #0]
   349cc:	1c5a      	adds	r2, r3, #1
   349ce:	6022      	str	r2, [r4, #0]
   349d0:	701f      	strb	r7, [r3, #0]
   349d2:	6963      	ldr	r3, [r4, #20]
   349d4:	4298      	cmp	r0, r3
   349d6:	d004      	beq.n	349e2 <__swbuf_r+0x6a>
   349d8:	89a3      	ldrh	r3, [r4, #12]
   349da:	07db      	lsls	r3, r3, #31
   349dc:	d51a      	bpl.n	34a14 <__swbuf_r+0x9c>
   349de:	2e0a      	cmp	r6, #10
   349e0:	d118      	bne.n	34a14 <__swbuf_r+0x9c>
   349e2:	0021      	movs	r1, r4
   349e4:	0028      	movs	r0, r5
   349e6:	f000 f91d 	bl	34c24 <_fflush_r>
   349ea:	2800      	cmp	r0, #0
   349ec:	d012      	beq.n	34a14 <__swbuf_r+0x9c>
   349ee:	e00f      	b.n	34a10 <__swbuf_r+0x98>
   349f0:	4b0a      	ldr	r3, [pc, #40]	; (34a1c <__swbuf_r+0xa4>)
   349f2:	429c      	cmp	r4, r3
   349f4:	d101      	bne.n	349fa <__swbuf_r+0x82>
   349f6:	68ac      	ldr	r4, [r5, #8]
   349f8:	e7cd      	b.n	34996 <__swbuf_r+0x1e>
   349fa:	4b09      	ldr	r3, [pc, #36]	; (34a20 <__swbuf_r+0xa8>)
   349fc:	429c      	cmp	r4, r3
   349fe:	d1ca      	bne.n	34996 <__swbuf_r+0x1e>
   34a00:	68ec      	ldr	r4, [r5, #12]
   34a02:	e7c8      	b.n	34996 <__swbuf_r+0x1e>
   34a04:	0021      	movs	r1, r4
   34a06:	0028      	movs	r0, r5
   34a08:	f000 f80c 	bl	34a24 <__swsetup_r>
   34a0c:	2800      	cmp	r0, #0
   34a0e:	d0ca      	beq.n	349a6 <__swbuf_r+0x2e>
   34a10:	2601      	movs	r6, #1
   34a12:	4276      	negs	r6, r6
   34a14:	0030      	movs	r0, r6
   34a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34a18:	000399d0 	.word	0x000399d0
   34a1c:	000399f0 	.word	0x000399f0
   34a20:	000399b0 	.word	0x000399b0

00034a24 <__swsetup_r>:
   34a24:	4b36      	ldr	r3, [pc, #216]	; (34b00 <__swsetup_r+0xdc>)
   34a26:	b570      	push	{r4, r5, r6, lr}
   34a28:	681d      	ldr	r5, [r3, #0]
   34a2a:	0006      	movs	r6, r0
   34a2c:	000c      	movs	r4, r1
   34a2e:	2d00      	cmp	r5, #0
   34a30:	d005      	beq.n	34a3e <__swsetup_r+0x1a>
   34a32:	69ab      	ldr	r3, [r5, #24]
   34a34:	2b00      	cmp	r3, #0
   34a36:	d102      	bne.n	34a3e <__swsetup_r+0x1a>
   34a38:	0028      	movs	r0, r5
   34a3a:	f000 f961 	bl	34d00 <__sinit>
   34a3e:	4b31      	ldr	r3, [pc, #196]	; (34b04 <__swsetup_r+0xe0>)
   34a40:	429c      	cmp	r4, r3
   34a42:	d10f      	bne.n	34a64 <__swsetup_r+0x40>
   34a44:	686c      	ldr	r4, [r5, #4]
   34a46:	230c      	movs	r3, #12
   34a48:	5ee2      	ldrsh	r2, [r4, r3]
   34a4a:	b293      	uxth	r3, r2
   34a4c:	0719      	lsls	r1, r3, #28
   34a4e:	d42d      	bmi.n	34aac <__swsetup_r+0x88>
   34a50:	06d9      	lsls	r1, r3, #27
   34a52:	d411      	bmi.n	34a78 <__swsetup_r+0x54>
   34a54:	2309      	movs	r3, #9
   34a56:	2001      	movs	r0, #1
   34a58:	6033      	str	r3, [r6, #0]
   34a5a:	3337      	adds	r3, #55	; 0x37
   34a5c:	4313      	orrs	r3, r2
   34a5e:	81a3      	strh	r3, [r4, #12]
   34a60:	4240      	negs	r0, r0
   34a62:	bd70      	pop	{r4, r5, r6, pc}
   34a64:	4b28      	ldr	r3, [pc, #160]	; (34b08 <__swsetup_r+0xe4>)
   34a66:	429c      	cmp	r4, r3
   34a68:	d101      	bne.n	34a6e <__swsetup_r+0x4a>
   34a6a:	68ac      	ldr	r4, [r5, #8]
   34a6c:	e7eb      	b.n	34a46 <__swsetup_r+0x22>
   34a6e:	4b27      	ldr	r3, [pc, #156]	; (34b0c <__swsetup_r+0xe8>)
   34a70:	429c      	cmp	r4, r3
   34a72:	d1e8      	bne.n	34a46 <__swsetup_r+0x22>
   34a74:	68ec      	ldr	r4, [r5, #12]
   34a76:	e7e6      	b.n	34a46 <__swsetup_r+0x22>
   34a78:	075b      	lsls	r3, r3, #29
   34a7a:	d513      	bpl.n	34aa4 <__swsetup_r+0x80>
   34a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34a7e:	2900      	cmp	r1, #0
   34a80:	d008      	beq.n	34a94 <__swsetup_r+0x70>
   34a82:	0023      	movs	r3, r4
   34a84:	3344      	adds	r3, #68	; 0x44
   34a86:	4299      	cmp	r1, r3
   34a88:	d002      	beq.n	34a90 <__swsetup_r+0x6c>
   34a8a:	0030      	movs	r0, r6
   34a8c:	f7ff fc86 	bl	3439c <_free_r>
   34a90:	2300      	movs	r3, #0
   34a92:	6363      	str	r3, [r4, #52]	; 0x34
   34a94:	2224      	movs	r2, #36	; 0x24
   34a96:	89a3      	ldrh	r3, [r4, #12]
   34a98:	4393      	bics	r3, r2
   34a9a:	81a3      	strh	r3, [r4, #12]
   34a9c:	2300      	movs	r3, #0
   34a9e:	6063      	str	r3, [r4, #4]
   34aa0:	6923      	ldr	r3, [r4, #16]
   34aa2:	6023      	str	r3, [r4, #0]
   34aa4:	2308      	movs	r3, #8
   34aa6:	89a2      	ldrh	r2, [r4, #12]
   34aa8:	4313      	orrs	r3, r2
   34aaa:	81a3      	strh	r3, [r4, #12]
   34aac:	6923      	ldr	r3, [r4, #16]
   34aae:	2b00      	cmp	r3, #0
   34ab0:	d10b      	bne.n	34aca <__swsetup_r+0xa6>
   34ab2:	21a0      	movs	r1, #160	; 0xa0
   34ab4:	2280      	movs	r2, #128	; 0x80
   34ab6:	89a3      	ldrh	r3, [r4, #12]
   34ab8:	0089      	lsls	r1, r1, #2
   34aba:	0092      	lsls	r2, r2, #2
   34abc:	400b      	ands	r3, r1
   34abe:	4293      	cmp	r3, r2
   34ac0:	d003      	beq.n	34aca <__swsetup_r+0xa6>
   34ac2:	0021      	movs	r1, r4
   34ac4:	0030      	movs	r0, r6
   34ac6:	f000 f9e9 	bl	34e9c <__smakebuf_r>
   34aca:	2301      	movs	r3, #1
   34acc:	89a2      	ldrh	r2, [r4, #12]
   34ace:	4013      	ands	r3, r2
   34ad0:	d011      	beq.n	34af6 <__swsetup_r+0xd2>
   34ad2:	2300      	movs	r3, #0
   34ad4:	60a3      	str	r3, [r4, #8]
   34ad6:	6963      	ldr	r3, [r4, #20]
   34ad8:	425b      	negs	r3, r3
   34ada:	61a3      	str	r3, [r4, #24]
   34adc:	2000      	movs	r0, #0
   34ade:	6923      	ldr	r3, [r4, #16]
   34ae0:	4283      	cmp	r3, r0
   34ae2:	d1be      	bne.n	34a62 <__swsetup_r+0x3e>
   34ae4:	230c      	movs	r3, #12
   34ae6:	5ee2      	ldrsh	r2, [r4, r3]
   34ae8:	0613      	lsls	r3, r2, #24
   34aea:	d5ba      	bpl.n	34a62 <__swsetup_r+0x3e>
   34aec:	2340      	movs	r3, #64	; 0x40
   34aee:	4313      	orrs	r3, r2
   34af0:	81a3      	strh	r3, [r4, #12]
   34af2:	3801      	subs	r0, #1
   34af4:	e7b5      	b.n	34a62 <__swsetup_r+0x3e>
   34af6:	0792      	lsls	r2, r2, #30
   34af8:	d400      	bmi.n	34afc <__swsetup_r+0xd8>
   34afa:	6963      	ldr	r3, [r4, #20]
   34afc:	60a3      	str	r3, [r4, #8]
   34afe:	e7ed      	b.n	34adc <__swsetup_r+0xb8>
   34b00:	200000d4 	.word	0x200000d4
   34b04:	000399d0 	.word	0x000399d0
   34b08:	000399f0 	.word	0x000399f0
   34b0c:	000399b0 	.word	0x000399b0

00034b10 <__sflush_r>:
   34b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34b12:	898a      	ldrh	r2, [r1, #12]
   34b14:	0005      	movs	r5, r0
   34b16:	000c      	movs	r4, r1
   34b18:	0713      	lsls	r3, r2, #28
   34b1a:	d460      	bmi.n	34bde <__sflush_r+0xce>
   34b1c:	684b      	ldr	r3, [r1, #4]
   34b1e:	2b00      	cmp	r3, #0
   34b20:	dc04      	bgt.n	34b2c <__sflush_r+0x1c>
   34b22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   34b24:	2b00      	cmp	r3, #0
   34b26:	dc01      	bgt.n	34b2c <__sflush_r+0x1c>
   34b28:	2000      	movs	r0, #0
   34b2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34b2c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34b2e:	2f00      	cmp	r7, #0
   34b30:	d0fa      	beq.n	34b28 <__sflush_r+0x18>
   34b32:	2300      	movs	r3, #0
   34b34:	682e      	ldr	r6, [r5, #0]
   34b36:	602b      	str	r3, [r5, #0]
   34b38:	2380      	movs	r3, #128	; 0x80
   34b3a:	015b      	lsls	r3, r3, #5
   34b3c:	401a      	ands	r2, r3
   34b3e:	d034      	beq.n	34baa <__sflush_r+0x9a>
   34b40:	6d60      	ldr	r0, [r4, #84]	; 0x54
   34b42:	89a3      	ldrh	r3, [r4, #12]
   34b44:	075b      	lsls	r3, r3, #29
   34b46:	d506      	bpl.n	34b56 <__sflush_r+0x46>
   34b48:	6863      	ldr	r3, [r4, #4]
   34b4a:	1ac0      	subs	r0, r0, r3
   34b4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   34b4e:	2b00      	cmp	r3, #0
   34b50:	d001      	beq.n	34b56 <__sflush_r+0x46>
   34b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34b54:	1ac0      	subs	r0, r0, r3
   34b56:	0002      	movs	r2, r0
   34b58:	6a21      	ldr	r1, [r4, #32]
   34b5a:	2300      	movs	r3, #0
   34b5c:	0028      	movs	r0, r5
   34b5e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   34b60:	47b8      	blx	r7
   34b62:	89a1      	ldrh	r1, [r4, #12]
   34b64:	1c43      	adds	r3, r0, #1
   34b66:	d106      	bne.n	34b76 <__sflush_r+0x66>
   34b68:	682b      	ldr	r3, [r5, #0]
   34b6a:	2b1d      	cmp	r3, #29
   34b6c:	d831      	bhi.n	34bd2 <__sflush_r+0xc2>
   34b6e:	4a2c      	ldr	r2, [pc, #176]	; (34c20 <__sflush_r+0x110>)
   34b70:	40da      	lsrs	r2, r3
   34b72:	07d3      	lsls	r3, r2, #31
   34b74:	d52d      	bpl.n	34bd2 <__sflush_r+0xc2>
   34b76:	2300      	movs	r3, #0
   34b78:	6063      	str	r3, [r4, #4]
   34b7a:	6923      	ldr	r3, [r4, #16]
   34b7c:	6023      	str	r3, [r4, #0]
   34b7e:	04cb      	lsls	r3, r1, #19
   34b80:	d505      	bpl.n	34b8e <__sflush_r+0x7e>
   34b82:	1c43      	adds	r3, r0, #1
   34b84:	d102      	bne.n	34b8c <__sflush_r+0x7c>
   34b86:	682b      	ldr	r3, [r5, #0]
   34b88:	2b00      	cmp	r3, #0
   34b8a:	d100      	bne.n	34b8e <__sflush_r+0x7e>
   34b8c:	6560      	str	r0, [r4, #84]	; 0x54
   34b8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   34b90:	602e      	str	r6, [r5, #0]
   34b92:	2900      	cmp	r1, #0
   34b94:	d0c8      	beq.n	34b28 <__sflush_r+0x18>
   34b96:	0023      	movs	r3, r4
   34b98:	3344      	adds	r3, #68	; 0x44
   34b9a:	4299      	cmp	r1, r3
   34b9c:	d002      	beq.n	34ba4 <__sflush_r+0x94>
   34b9e:	0028      	movs	r0, r5
   34ba0:	f7ff fbfc 	bl	3439c <_free_r>
   34ba4:	2000      	movs	r0, #0
   34ba6:	6360      	str	r0, [r4, #52]	; 0x34
   34ba8:	e7bf      	b.n	34b2a <__sflush_r+0x1a>
   34baa:	2301      	movs	r3, #1
   34bac:	6a21      	ldr	r1, [r4, #32]
   34bae:	0028      	movs	r0, r5
   34bb0:	47b8      	blx	r7
   34bb2:	1c43      	adds	r3, r0, #1
   34bb4:	d1c5      	bne.n	34b42 <__sflush_r+0x32>
   34bb6:	682b      	ldr	r3, [r5, #0]
   34bb8:	2b00      	cmp	r3, #0
   34bba:	d0c2      	beq.n	34b42 <__sflush_r+0x32>
   34bbc:	2b1d      	cmp	r3, #29
   34bbe:	d001      	beq.n	34bc4 <__sflush_r+0xb4>
   34bc0:	2b16      	cmp	r3, #22
   34bc2:	d101      	bne.n	34bc8 <__sflush_r+0xb8>
   34bc4:	602e      	str	r6, [r5, #0]
   34bc6:	e7af      	b.n	34b28 <__sflush_r+0x18>
   34bc8:	2340      	movs	r3, #64	; 0x40
   34bca:	89a2      	ldrh	r2, [r4, #12]
   34bcc:	4313      	orrs	r3, r2
   34bce:	81a3      	strh	r3, [r4, #12]
   34bd0:	e7ab      	b.n	34b2a <__sflush_r+0x1a>
   34bd2:	2340      	movs	r3, #64	; 0x40
   34bd4:	430b      	orrs	r3, r1
   34bd6:	2001      	movs	r0, #1
   34bd8:	81a3      	strh	r3, [r4, #12]
   34bda:	4240      	negs	r0, r0
   34bdc:	e7a5      	b.n	34b2a <__sflush_r+0x1a>
   34bde:	690f      	ldr	r7, [r1, #16]
   34be0:	2f00      	cmp	r7, #0
   34be2:	d0a1      	beq.n	34b28 <__sflush_r+0x18>
   34be4:	680b      	ldr	r3, [r1, #0]
   34be6:	600f      	str	r7, [r1, #0]
   34be8:	1bdb      	subs	r3, r3, r7
   34bea:	9301      	str	r3, [sp, #4]
   34bec:	2300      	movs	r3, #0
   34bee:	0792      	lsls	r2, r2, #30
   34bf0:	d100      	bne.n	34bf4 <__sflush_r+0xe4>
   34bf2:	694b      	ldr	r3, [r1, #20]
   34bf4:	60a3      	str	r3, [r4, #8]
   34bf6:	9b01      	ldr	r3, [sp, #4]
   34bf8:	2b00      	cmp	r3, #0
   34bfa:	dc00      	bgt.n	34bfe <__sflush_r+0xee>
   34bfc:	e794      	b.n	34b28 <__sflush_r+0x18>
   34bfe:	9b01      	ldr	r3, [sp, #4]
   34c00:	003a      	movs	r2, r7
   34c02:	6a21      	ldr	r1, [r4, #32]
   34c04:	0028      	movs	r0, r5
   34c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   34c08:	47b0      	blx	r6
   34c0a:	2800      	cmp	r0, #0
   34c0c:	dc03      	bgt.n	34c16 <__sflush_r+0x106>
   34c0e:	2340      	movs	r3, #64	; 0x40
   34c10:	89a2      	ldrh	r2, [r4, #12]
   34c12:	4313      	orrs	r3, r2
   34c14:	e7df      	b.n	34bd6 <__sflush_r+0xc6>
   34c16:	9b01      	ldr	r3, [sp, #4]
   34c18:	183f      	adds	r7, r7, r0
   34c1a:	1a1b      	subs	r3, r3, r0
   34c1c:	9301      	str	r3, [sp, #4]
   34c1e:	e7ea      	b.n	34bf6 <__sflush_r+0xe6>
   34c20:	20400001 	.word	0x20400001

00034c24 <_fflush_r>:
   34c24:	690b      	ldr	r3, [r1, #16]
   34c26:	b570      	push	{r4, r5, r6, lr}
   34c28:	0005      	movs	r5, r0
   34c2a:	000c      	movs	r4, r1
   34c2c:	2b00      	cmp	r3, #0
   34c2e:	d101      	bne.n	34c34 <_fflush_r+0x10>
   34c30:	2000      	movs	r0, #0
   34c32:	bd70      	pop	{r4, r5, r6, pc}
   34c34:	2800      	cmp	r0, #0
   34c36:	d004      	beq.n	34c42 <_fflush_r+0x1e>
   34c38:	6983      	ldr	r3, [r0, #24]
   34c3a:	2b00      	cmp	r3, #0
   34c3c:	d101      	bne.n	34c42 <_fflush_r+0x1e>
   34c3e:	f000 f85f 	bl	34d00 <__sinit>
   34c42:	4b0b      	ldr	r3, [pc, #44]	; (34c70 <_fflush_r+0x4c>)
   34c44:	429c      	cmp	r4, r3
   34c46:	d109      	bne.n	34c5c <_fflush_r+0x38>
   34c48:	686c      	ldr	r4, [r5, #4]
   34c4a:	220c      	movs	r2, #12
   34c4c:	5ea3      	ldrsh	r3, [r4, r2]
   34c4e:	2b00      	cmp	r3, #0
   34c50:	d0ee      	beq.n	34c30 <_fflush_r+0xc>
   34c52:	0021      	movs	r1, r4
   34c54:	0028      	movs	r0, r5
   34c56:	f7ff ff5b 	bl	34b10 <__sflush_r>
   34c5a:	e7ea      	b.n	34c32 <_fflush_r+0xe>
   34c5c:	4b05      	ldr	r3, [pc, #20]	; (34c74 <_fflush_r+0x50>)
   34c5e:	429c      	cmp	r4, r3
   34c60:	d101      	bne.n	34c66 <_fflush_r+0x42>
   34c62:	68ac      	ldr	r4, [r5, #8]
   34c64:	e7f1      	b.n	34c4a <_fflush_r+0x26>
   34c66:	4b04      	ldr	r3, [pc, #16]	; (34c78 <_fflush_r+0x54>)
   34c68:	429c      	cmp	r4, r3
   34c6a:	d1ee      	bne.n	34c4a <_fflush_r+0x26>
   34c6c:	68ec      	ldr	r4, [r5, #12]
   34c6e:	e7ec      	b.n	34c4a <_fflush_r+0x26>
   34c70:	000399d0 	.word	0x000399d0
   34c74:	000399f0 	.word	0x000399f0
   34c78:	000399b0 	.word	0x000399b0

00034c7c <_cleanup_r>:
   34c7c:	b510      	push	{r4, lr}
   34c7e:	4902      	ldr	r1, [pc, #8]	; (34c88 <_cleanup_r+0xc>)
   34c80:	f000 f8b2 	bl	34de8 <_fwalk_reent>
   34c84:	bd10      	pop	{r4, pc}
   34c86:	46c0      	nop			; (mov r8, r8)
   34c88:	00034c25 	.word	0x00034c25

00034c8c <std.isra.0>:
   34c8c:	2300      	movs	r3, #0
   34c8e:	b510      	push	{r4, lr}
   34c90:	0004      	movs	r4, r0
   34c92:	6003      	str	r3, [r0, #0]
   34c94:	6043      	str	r3, [r0, #4]
   34c96:	6083      	str	r3, [r0, #8]
   34c98:	8181      	strh	r1, [r0, #12]
   34c9a:	6643      	str	r3, [r0, #100]	; 0x64
   34c9c:	81c2      	strh	r2, [r0, #14]
   34c9e:	6103      	str	r3, [r0, #16]
   34ca0:	6143      	str	r3, [r0, #20]
   34ca2:	6183      	str	r3, [r0, #24]
   34ca4:	0019      	movs	r1, r3
   34ca6:	2208      	movs	r2, #8
   34ca8:	305c      	adds	r0, #92	; 0x5c
   34caa:	f7ff fb6e 	bl	3438a <memset>
   34cae:	4b05      	ldr	r3, [pc, #20]	; (34cc4 <std.isra.0+0x38>)
   34cb0:	6224      	str	r4, [r4, #32]
   34cb2:	6263      	str	r3, [r4, #36]	; 0x24
   34cb4:	4b04      	ldr	r3, [pc, #16]	; (34cc8 <std.isra.0+0x3c>)
   34cb6:	62a3      	str	r3, [r4, #40]	; 0x28
   34cb8:	4b04      	ldr	r3, [pc, #16]	; (34ccc <std.isra.0+0x40>)
   34cba:	62e3      	str	r3, [r4, #44]	; 0x2c
   34cbc:	4b04      	ldr	r3, [pc, #16]	; (34cd0 <std.isra.0+0x44>)
   34cbe:	6323      	str	r3, [r4, #48]	; 0x30
   34cc0:	bd10      	pop	{r4, pc}
   34cc2:	46c0      	nop			; (mov r8, r8)
   34cc4:	00035529 	.word	0x00035529
   34cc8:	00035551 	.word	0x00035551
   34ccc:	00035589 	.word	0x00035589
   34cd0:	000355b5 	.word	0x000355b5

00034cd4 <__sfmoreglue>:
   34cd4:	b570      	push	{r4, r5, r6, lr}
   34cd6:	2568      	movs	r5, #104	; 0x68
   34cd8:	1e4a      	subs	r2, r1, #1
   34cda:	4355      	muls	r5, r2
   34cdc:	000e      	movs	r6, r1
   34cde:	0029      	movs	r1, r5
   34ce0:	3174      	adds	r1, #116	; 0x74
   34ce2:	f7ff fba5 	bl	34430 <_malloc_r>
   34ce6:	1e04      	subs	r4, r0, #0
   34ce8:	d008      	beq.n	34cfc <__sfmoreglue+0x28>
   34cea:	2100      	movs	r1, #0
   34cec:	002a      	movs	r2, r5
   34cee:	6001      	str	r1, [r0, #0]
   34cf0:	6046      	str	r6, [r0, #4]
   34cf2:	300c      	adds	r0, #12
   34cf4:	60a0      	str	r0, [r4, #8]
   34cf6:	3268      	adds	r2, #104	; 0x68
   34cf8:	f7ff fb47 	bl	3438a <memset>
   34cfc:	0020      	movs	r0, r4
   34cfe:	bd70      	pop	{r4, r5, r6, pc}

00034d00 <__sinit>:
   34d00:	6983      	ldr	r3, [r0, #24]
   34d02:	b513      	push	{r0, r1, r4, lr}
   34d04:	0004      	movs	r4, r0
   34d06:	2b00      	cmp	r3, #0
   34d08:	d128      	bne.n	34d5c <__sinit+0x5c>
   34d0a:	6483      	str	r3, [r0, #72]	; 0x48
   34d0c:	64c3      	str	r3, [r0, #76]	; 0x4c
   34d0e:	6503      	str	r3, [r0, #80]	; 0x50
   34d10:	4b13      	ldr	r3, [pc, #76]	; (34d60 <__sinit+0x60>)
   34d12:	4a14      	ldr	r2, [pc, #80]	; (34d64 <__sinit+0x64>)
   34d14:	681b      	ldr	r3, [r3, #0]
   34d16:	6282      	str	r2, [r0, #40]	; 0x28
   34d18:	9301      	str	r3, [sp, #4]
   34d1a:	4298      	cmp	r0, r3
   34d1c:	d101      	bne.n	34d22 <__sinit+0x22>
   34d1e:	2301      	movs	r3, #1
   34d20:	6183      	str	r3, [r0, #24]
   34d22:	0020      	movs	r0, r4
   34d24:	f000 f820 	bl	34d68 <__sfp>
   34d28:	6060      	str	r0, [r4, #4]
   34d2a:	0020      	movs	r0, r4
   34d2c:	f000 f81c 	bl	34d68 <__sfp>
   34d30:	60a0      	str	r0, [r4, #8]
   34d32:	0020      	movs	r0, r4
   34d34:	f000 f818 	bl	34d68 <__sfp>
   34d38:	2200      	movs	r2, #0
   34d3a:	60e0      	str	r0, [r4, #12]
   34d3c:	2104      	movs	r1, #4
   34d3e:	6860      	ldr	r0, [r4, #4]
   34d40:	f7ff ffa4 	bl	34c8c <std.isra.0>
   34d44:	2201      	movs	r2, #1
   34d46:	2109      	movs	r1, #9
   34d48:	68a0      	ldr	r0, [r4, #8]
   34d4a:	f7ff ff9f 	bl	34c8c <std.isra.0>
   34d4e:	2202      	movs	r2, #2
   34d50:	2112      	movs	r1, #18
   34d52:	68e0      	ldr	r0, [r4, #12]
   34d54:	f7ff ff9a 	bl	34c8c <std.isra.0>
   34d58:	2301      	movs	r3, #1
   34d5a:	61a3      	str	r3, [r4, #24]
   34d5c:	bd13      	pop	{r0, r1, r4, pc}
   34d5e:	46c0      	nop			; (mov r8, r8)
   34d60:	000399ac 	.word	0x000399ac
   34d64:	00034c7d 	.word	0x00034c7d

00034d68 <__sfp>:
   34d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34d6a:	4b1e      	ldr	r3, [pc, #120]	; (34de4 <__sfp+0x7c>)
   34d6c:	0007      	movs	r7, r0
   34d6e:	681e      	ldr	r6, [r3, #0]
   34d70:	69b3      	ldr	r3, [r6, #24]
   34d72:	2b00      	cmp	r3, #0
   34d74:	d102      	bne.n	34d7c <__sfp+0x14>
   34d76:	0030      	movs	r0, r6
   34d78:	f7ff ffc2 	bl	34d00 <__sinit>
   34d7c:	3648      	adds	r6, #72	; 0x48
   34d7e:	68b4      	ldr	r4, [r6, #8]
   34d80:	6873      	ldr	r3, [r6, #4]
   34d82:	3b01      	subs	r3, #1
   34d84:	d504      	bpl.n	34d90 <__sfp+0x28>
   34d86:	6833      	ldr	r3, [r6, #0]
   34d88:	2b00      	cmp	r3, #0
   34d8a:	d007      	beq.n	34d9c <__sfp+0x34>
   34d8c:	6836      	ldr	r6, [r6, #0]
   34d8e:	e7f6      	b.n	34d7e <__sfp+0x16>
   34d90:	220c      	movs	r2, #12
   34d92:	5ea5      	ldrsh	r5, [r4, r2]
   34d94:	2d00      	cmp	r5, #0
   34d96:	d00d      	beq.n	34db4 <__sfp+0x4c>
   34d98:	3468      	adds	r4, #104	; 0x68
   34d9a:	e7f2      	b.n	34d82 <__sfp+0x1a>
   34d9c:	2104      	movs	r1, #4
   34d9e:	0038      	movs	r0, r7
   34da0:	f7ff ff98 	bl	34cd4 <__sfmoreglue>
   34da4:	6030      	str	r0, [r6, #0]
   34da6:	2800      	cmp	r0, #0
   34da8:	d1f0      	bne.n	34d8c <__sfp+0x24>
   34daa:	230c      	movs	r3, #12
   34dac:	0004      	movs	r4, r0
   34dae:	603b      	str	r3, [r7, #0]
   34db0:	0020      	movs	r0, r4
   34db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34db4:	2301      	movs	r3, #1
   34db6:	0020      	movs	r0, r4
   34db8:	425b      	negs	r3, r3
   34dba:	81e3      	strh	r3, [r4, #14]
   34dbc:	3302      	adds	r3, #2
   34dbe:	81a3      	strh	r3, [r4, #12]
   34dc0:	6665      	str	r5, [r4, #100]	; 0x64
   34dc2:	6025      	str	r5, [r4, #0]
   34dc4:	60a5      	str	r5, [r4, #8]
   34dc6:	6065      	str	r5, [r4, #4]
   34dc8:	6125      	str	r5, [r4, #16]
   34dca:	6165      	str	r5, [r4, #20]
   34dcc:	61a5      	str	r5, [r4, #24]
   34dce:	2208      	movs	r2, #8
   34dd0:	0029      	movs	r1, r5
   34dd2:	305c      	adds	r0, #92	; 0x5c
   34dd4:	f7ff fad9 	bl	3438a <memset>
   34dd8:	6365      	str	r5, [r4, #52]	; 0x34
   34dda:	63a5      	str	r5, [r4, #56]	; 0x38
   34ddc:	64a5      	str	r5, [r4, #72]	; 0x48
   34dde:	64e5      	str	r5, [r4, #76]	; 0x4c
   34de0:	e7e6      	b.n	34db0 <__sfp+0x48>
   34de2:	46c0      	nop			; (mov r8, r8)
   34de4:	000399ac 	.word	0x000399ac

00034de8 <_fwalk_reent>:
   34de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34dea:	0004      	movs	r4, r0
   34dec:	0007      	movs	r7, r0
   34dee:	2600      	movs	r6, #0
   34df0:	9101      	str	r1, [sp, #4]
   34df2:	3448      	adds	r4, #72	; 0x48
   34df4:	2c00      	cmp	r4, #0
   34df6:	d101      	bne.n	34dfc <_fwalk_reent+0x14>
   34df8:	0030      	movs	r0, r6
   34dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   34dfc:	6863      	ldr	r3, [r4, #4]
   34dfe:	68a5      	ldr	r5, [r4, #8]
   34e00:	9300      	str	r3, [sp, #0]
   34e02:	9b00      	ldr	r3, [sp, #0]
   34e04:	3b01      	subs	r3, #1
   34e06:	9300      	str	r3, [sp, #0]
   34e08:	d501      	bpl.n	34e0e <_fwalk_reent+0x26>
   34e0a:	6824      	ldr	r4, [r4, #0]
   34e0c:	e7f2      	b.n	34df4 <_fwalk_reent+0xc>
   34e0e:	89ab      	ldrh	r3, [r5, #12]
   34e10:	2b01      	cmp	r3, #1
   34e12:	d908      	bls.n	34e26 <_fwalk_reent+0x3e>
   34e14:	220e      	movs	r2, #14
   34e16:	5eab      	ldrsh	r3, [r5, r2]
   34e18:	3301      	adds	r3, #1
   34e1a:	d004      	beq.n	34e26 <_fwalk_reent+0x3e>
   34e1c:	0029      	movs	r1, r5
   34e1e:	0038      	movs	r0, r7
   34e20:	9b01      	ldr	r3, [sp, #4]
   34e22:	4798      	blx	r3
   34e24:	4306      	orrs	r6, r0
   34e26:	3568      	adds	r5, #104	; 0x68
   34e28:	e7eb      	b.n	34e02 <_fwalk_reent+0x1a>

00034e2a <__locale_ctype_ptr_l>:
   34e2a:	30ec      	adds	r0, #236	; 0xec
   34e2c:	6800      	ldr	r0, [r0, #0]
   34e2e:	4770      	bx	lr

00034e30 <__locale_ctype_ptr>:
   34e30:	4b04      	ldr	r3, [pc, #16]	; (34e44 <__locale_ctype_ptr+0x14>)
   34e32:	681b      	ldr	r3, [r3, #0]
   34e34:	6a1b      	ldr	r3, [r3, #32]
   34e36:	2b00      	cmp	r3, #0
   34e38:	d100      	bne.n	34e3c <__locale_ctype_ptr+0xc>
   34e3a:	4b03      	ldr	r3, [pc, #12]	; (34e48 <__locale_ctype_ptr+0x18>)
   34e3c:	33ec      	adds	r3, #236	; 0xec
   34e3e:	6818      	ldr	r0, [r3, #0]
   34e40:	4770      	bx	lr
   34e42:	46c0      	nop			; (mov r8, r8)
   34e44:	200000d4 	.word	0x200000d4
   34e48:	20000138 	.word	0x20000138

00034e4c <__swhatbuf_r>:
   34e4c:	b570      	push	{r4, r5, r6, lr}
   34e4e:	000e      	movs	r6, r1
   34e50:	001d      	movs	r5, r3
   34e52:	230e      	movs	r3, #14
   34e54:	5ec9      	ldrsh	r1, [r1, r3]
   34e56:	b090      	sub	sp, #64	; 0x40
   34e58:	0014      	movs	r4, r2
   34e5a:	2900      	cmp	r1, #0
   34e5c:	da07      	bge.n	34e6e <__swhatbuf_r+0x22>
   34e5e:	2300      	movs	r3, #0
   34e60:	602b      	str	r3, [r5, #0]
   34e62:	89b3      	ldrh	r3, [r6, #12]
   34e64:	061b      	lsls	r3, r3, #24
   34e66:	d411      	bmi.n	34e8c <__swhatbuf_r+0x40>
   34e68:	2380      	movs	r3, #128	; 0x80
   34e6a:	00db      	lsls	r3, r3, #3
   34e6c:	e00f      	b.n	34e8e <__swhatbuf_r+0x42>
   34e6e:	aa01      	add	r2, sp, #4
   34e70:	f000 fbe6 	bl	35640 <_fstat_r>
   34e74:	2800      	cmp	r0, #0
   34e76:	dbf2      	blt.n	34e5e <__swhatbuf_r+0x12>
   34e78:	22f0      	movs	r2, #240	; 0xf0
   34e7a:	9b02      	ldr	r3, [sp, #8]
   34e7c:	0212      	lsls	r2, r2, #8
   34e7e:	4013      	ands	r3, r2
   34e80:	4a05      	ldr	r2, [pc, #20]	; (34e98 <__swhatbuf_r+0x4c>)
   34e82:	189b      	adds	r3, r3, r2
   34e84:	425a      	negs	r2, r3
   34e86:	4153      	adcs	r3, r2
   34e88:	602b      	str	r3, [r5, #0]
   34e8a:	e7ed      	b.n	34e68 <__swhatbuf_r+0x1c>
   34e8c:	2340      	movs	r3, #64	; 0x40
   34e8e:	2000      	movs	r0, #0
   34e90:	6023      	str	r3, [r4, #0]
   34e92:	b010      	add	sp, #64	; 0x40
   34e94:	bd70      	pop	{r4, r5, r6, pc}
   34e96:	46c0      	nop			; (mov r8, r8)
   34e98:	ffffe000 	.word	0xffffe000

00034e9c <__smakebuf_r>:
   34e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34e9e:	2602      	movs	r6, #2
   34ea0:	898b      	ldrh	r3, [r1, #12]
   34ea2:	0005      	movs	r5, r0
   34ea4:	000c      	movs	r4, r1
   34ea6:	4233      	tst	r3, r6
   34ea8:	d006      	beq.n	34eb8 <__smakebuf_r+0x1c>
   34eaa:	0023      	movs	r3, r4
   34eac:	3347      	adds	r3, #71	; 0x47
   34eae:	6023      	str	r3, [r4, #0]
   34eb0:	6123      	str	r3, [r4, #16]
   34eb2:	2301      	movs	r3, #1
   34eb4:	6163      	str	r3, [r4, #20]
   34eb6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   34eb8:	ab01      	add	r3, sp, #4
   34eba:	466a      	mov	r2, sp
   34ebc:	f7ff ffc6 	bl	34e4c <__swhatbuf_r>
   34ec0:	9900      	ldr	r1, [sp, #0]
   34ec2:	0007      	movs	r7, r0
   34ec4:	0028      	movs	r0, r5
   34ec6:	f7ff fab3 	bl	34430 <_malloc_r>
   34eca:	2800      	cmp	r0, #0
   34ecc:	d108      	bne.n	34ee0 <__smakebuf_r+0x44>
   34ece:	220c      	movs	r2, #12
   34ed0:	5ea3      	ldrsh	r3, [r4, r2]
   34ed2:	059a      	lsls	r2, r3, #22
   34ed4:	d4ef      	bmi.n	34eb6 <__smakebuf_r+0x1a>
   34ed6:	2203      	movs	r2, #3
   34ed8:	4393      	bics	r3, r2
   34eda:	431e      	orrs	r6, r3
   34edc:	81a6      	strh	r6, [r4, #12]
   34ede:	e7e4      	b.n	34eaa <__smakebuf_r+0xe>
   34ee0:	4b0f      	ldr	r3, [pc, #60]	; (34f20 <__smakebuf_r+0x84>)
   34ee2:	62ab      	str	r3, [r5, #40]	; 0x28
   34ee4:	2380      	movs	r3, #128	; 0x80
   34ee6:	89a2      	ldrh	r2, [r4, #12]
   34ee8:	6020      	str	r0, [r4, #0]
   34eea:	4313      	orrs	r3, r2
   34eec:	81a3      	strh	r3, [r4, #12]
   34eee:	9b00      	ldr	r3, [sp, #0]
   34ef0:	6120      	str	r0, [r4, #16]
   34ef2:	6163      	str	r3, [r4, #20]
   34ef4:	9b01      	ldr	r3, [sp, #4]
   34ef6:	2b00      	cmp	r3, #0
   34ef8:	d00d      	beq.n	34f16 <__smakebuf_r+0x7a>
   34efa:	230e      	movs	r3, #14
   34efc:	5ee1      	ldrsh	r1, [r4, r3]
   34efe:	0028      	movs	r0, r5
   34f00:	f000 fbb0 	bl	35664 <_isatty_r>
   34f04:	2800      	cmp	r0, #0
   34f06:	d006      	beq.n	34f16 <__smakebuf_r+0x7a>
   34f08:	2203      	movs	r2, #3
   34f0a:	89a3      	ldrh	r3, [r4, #12]
   34f0c:	4393      	bics	r3, r2
   34f0e:	001a      	movs	r2, r3
   34f10:	2301      	movs	r3, #1
   34f12:	4313      	orrs	r3, r2
   34f14:	81a3      	strh	r3, [r4, #12]
   34f16:	89a0      	ldrh	r0, [r4, #12]
   34f18:	4338      	orrs	r0, r7
   34f1a:	81a0      	strh	r0, [r4, #12]
   34f1c:	e7cb      	b.n	34eb6 <__smakebuf_r+0x1a>
   34f1e:	46c0      	nop			; (mov r8, r8)
   34f20:	00034c7d 	.word	0x00034c7d

00034f24 <__ascii_mbtowc>:
   34f24:	b082      	sub	sp, #8
   34f26:	2900      	cmp	r1, #0
   34f28:	d100      	bne.n	34f2c <__ascii_mbtowc+0x8>
   34f2a:	a901      	add	r1, sp, #4
   34f2c:	1e10      	subs	r0, r2, #0
   34f2e:	d006      	beq.n	34f3e <__ascii_mbtowc+0x1a>
   34f30:	2b00      	cmp	r3, #0
   34f32:	d006      	beq.n	34f42 <__ascii_mbtowc+0x1e>
   34f34:	7813      	ldrb	r3, [r2, #0]
   34f36:	600b      	str	r3, [r1, #0]
   34f38:	7810      	ldrb	r0, [r2, #0]
   34f3a:	1e43      	subs	r3, r0, #1
   34f3c:	4198      	sbcs	r0, r3
   34f3e:	b002      	add	sp, #8
   34f40:	4770      	bx	lr
   34f42:	2002      	movs	r0, #2
   34f44:	4240      	negs	r0, r0
   34f46:	e7fa      	b.n	34f3e <__ascii_mbtowc+0x1a>

00034f48 <__malloc_lock>:
   34f48:	4770      	bx	lr

00034f4a <__malloc_unlock>:
   34f4a:	4770      	bx	lr

00034f4c <__ssputs_r>:
   34f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   34f4e:	688e      	ldr	r6, [r1, #8]
   34f50:	b085      	sub	sp, #20
   34f52:	0007      	movs	r7, r0
   34f54:	000c      	movs	r4, r1
   34f56:	9203      	str	r2, [sp, #12]
   34f58:	9301      	str	r3, [sp, #4]
   34f5a:	429e      	cmp	r6, r3
   34f5c:	d839      	bhi.n	34fd2 <__ssputs_r+0x86>
   34f5e:	2390      	movs	r3, #144	; 0x90
   34f60:	898a      	ldrh	r2, [r1, #12]
   34f62:	00db      	lsls	r3, r3, #3
   34f64:	421a      	tst	r2, r3
   34f66:	d034      	beq.n	34fd2 <__ssputs_r+0x86>
   34f68:	2503      	movs	r5, #3
   34f6a:	6909      	ldr	r1, [r1, #16]
   34f6c:	6823      	ldr	r3, [r4, #0]
   34f6e:	1a5b      	subs	r3, r3, r1
   34f70:	9302      	str	r3, [sp, #8]
   34f72:	6963      	ldr	r3, [r4, #20]
   34f74:	9802      	ldr	r0, [sp, #8]
   34f76:	435d      	muls	r5, r3
   34f78:	0feb      	lsrs	r3, r5, #31
   34f7a:	195d      	adds	r5, r3, r5
   34f7c:	9b01      	ldr	r3, [sp, #4]
   34f7e:	106d      	asrs	r5, r5, #1
   34f80:	3301      	adds	r3, #1
   34f82:	181b      	adds	r3, r3, r0
   34f84:	42ab      	cmp	r3, r5
   34f86:	d900      	bls.n	34f8a <__ssputs_r+0x3e>
   34f88:	001d      	movs	r5, r3
   34f8a:	0553      	lsls	r3, r2, #21
   34f8c:	d532      	bpl.n	34ff4 <__ssputs_r+0xa8>
   34f8e:	0029      	movs	r1, r5
   34f90:	0038      	movs	r0, r7
   34f92:	f7ff fa4d 	bl	34430 <_malloc_r>
   34f96:	1e06      	subs	r6, r0, #0
   34f98:	d109      	bne.n	34fae <__ssputs_r+0x62>
   34f9a:	230c      	movs	r3, #12
   34f9c:	603b      	str	r3, [r7, #0]
   34f9e:	2340      	movs	r3, #64	; 0x40
   34fa0:	2001      	movs	r0, #1
   34fa2:	89a2      	ldrh	r2, [r4, #12]
   34fa4:	4240      	negs	r0, r0
   34fa6:	4313      	orrs	r3, r2
   34fa8:	81a3      	strh	r3, [r4, #12]
   34faa:	b005      	add	sp, #20
   34fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34fae:	9a02      	ldr	r2, [sp, #8]
   34fb0:	6921      	ldr	r1, [r4, #16]
   34fb2:	f7ff f9cf 	bl	34354 <memcpy>
   34fb6:	89a3      	ldrh	r3, [r4, #12]
   34fb8:	4a14      	ldr	r2, [pc, #80]	; (3500c <__ssputs_r+0xc0>)
   34fba:	401a      	ands	r2, r3
   34fbc:	2380      	movs	r3, #128	; 0x80
   34fbe:	4313      	orrs	r3, r2
   34fc0:	81a3      	strh	r3, [r4, #12]
   34fc2:	9b02      	ldr	r3, [sp, #8]
   34fc4:	6126      	str	r6, [r4, #16]
   34fc6:	18f6      	adds	r6, r6, r3
   34fc8:	6026      	str	r6, [r4, #0]
   34fca:	6165      	str	r5, [r4, #20]
   34fcc:	9e01      	ldr	r6, [sp, #4]
   34fce:	1aed      	subs	r5, r5, r3
   34fd0:	60a5      	str	r5, [r4, #8]
   34fd2:	9b01      	ldr	r3, [sp, #4]
   34fd4:	42b3      	cmp	r3, r6
   34fd6:	d200      	bcs.n	34fda <__ssputs_r+0x8e>
   34fd8:	001e      	movs	r6, r3
   34fda:	0032      	movs	r2, r6
   34fdc:	9903      	ldr	r1, [sp, #12]
   34fde:	6820      	ldr	r0, [r4, #0]
   34fe0:	f7ff f9c1 	bl	34366 <memmove>
   34fe4:	68a3      	ldr	r3, [r4, #8]
   34fe6:	2000      	movs	r0, #0
   34fe8:	1b9b      	subs	r3, r3, r6
   34fea:	60a3      	str	r3, [r4, #8]
   34fec:	6823      	ldr	r3, [r4, #0]
   34fee:	199e      	adds	r6, r3, r6
   34ff0:	6026      	str	r6, [r4, #0]
   34ff2:	e7da      	b.n	34faa <__ssputs_r+0x5e>
   34ff4:	002a      	movs	r2, r5
   34ff6:	0038      	movs	r0, r7
   34ff8:	f000 fb65 	bl	356c6 <_realloc_r>
   34ffc:	1e06      	subs	r6, r0, #0
   34ffe:	d1e0      	bne.n	34fc2 <__ssputs_r+0x76>
   35000:	6921      	ldr	r1, [r4, #16]
   35002:	0038      	movs	r0, r7
   35004:	f7ff f9ca 	bl	3439c <_free_r>
   35008:	e7c7      	b.n	34f9a <__ssputs_r+0x4e>
   3500a:	46c0      	nop			; (mov r8, r8)
   3500c:	fffffb7f 	.word	0xfffffb7f

00035010 <_svfiprintf_r>:
   35010:	b5f0      	push	{r4, r5, r6, r7, lr}
   35012:	b09f      	sub	sp, #124	; 0x7c
   35014:	9002      	str	r0, [sp, #8]
   35016:	9305      	str	r3, [sp, #20]
   35018:	898b      	ldrh	r3, [r1, #12]
   3501a:	000f      	movs	r7, r1
   3501c:	0016      	movs	r6, r2
   3501e:	061b      	lsls	r3, r3, #24
   35020:	d511      	bpl.n	35046 <_svfiprintf_r+0x36>
   35022:	690b      	ldr	r3, [r1, #16]
   35024:	2b00      	cmp	r3, #0
   35026:	d10e      	bne.n	35046 <_svfiprintf_r+0x36>
   35028:	2140      	movs	r1, #64	; 0x40
   3502a:	f7ff fa01 	bl	34430 <_malloc_r>
   3502e:	6038      	str	r0, [r7, #0]
   35030:	6138      	str	r0, [r7, #16]
   35032:	2800      	cmp	r0, #0
   35034:	d105      	bne.n	35042 <_svfiprintf_r+0x32>
   35036:	230c      	movs	r3, #12
   35038:	9a02      	ldr	r2, [sp, #8]
   3503a:	3801      	subs	r0, #1
   3503c:	6013      	str	r3, [r2, #0]
   3503e:	b01f      	add	sp, #124	; 0x7c
   35040:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35042:	2340      	movs	r3, #64	; 0x40
   35044:	617b      	str	r3, [r7, #20]
   35046:	2300      	movs	r3, #0
   35048:	ad06      	add	r5, sp, #24
   3504a:	616b      	str	r3, [r5, #20]
   3504c:	3320      	adds	r3, #32
   3504e:	766b      	strb	r3, [r5, #25]
   35050:	3310      	adds	r3, #16
   35052:	76ab      	strb	r3, [r5, #26]
   35054:	0034      	movs	r4, r6
   35056:	7823      	ldrb	r3, [r4, #0]
   35058:	2b00      	cmp	r3, #0
   3505a:	d147      	bne.n	350ec <_svfiprintf_r+0xdc>
   3505c:	1ba3      	subs	r3, r4, r6
   3505e:	9304      	str	r3, [sp, #16]
   35060:	d00d      	beq.n	3507e <_svfiprintf_r+0x6e>
   35062:	1ba3      	subs	r3, r4, r6
   35064:	0032      	movs	r2, r6
   35066:	0039      	movs	r1, r7
   35068:	9802      	ldr	r0, [sp, #8]
   3506a:	f7ff ff6f 	bl	34f4c <__ssputs_r>
   3506e:	1c43      	adds	r3, r0, #1
   35070:	d100      	bne.n	35074 <_svfiprintf_r+0x64>
   35072:	e0b5      	b.n	351e0 <_svfiprintf_r+0x1d0>
   35074:	696a      	ldr	r2, [r5, #20]
   35076:	9b04      	ldr	r3, [sp, #16]
   35078:	4694      	mov	ip, r2
   3507a:	4463      	add	r3, ip
   3507c:	616b      	str	r3, [r5, #20]
   3507e:	7823      	ldrb	r3, [r4, #0]
   35080:	2b00      	cmp	r3, #0
   35082:	d100      	bne.n	35086 <_svfiprintf_r+0x76>
   35084:	e0ac      	b.n	351e0 <_svfiprintf_r+0x1d0>
   35086:	2201      	movs	r2, #1
   35088:	2300      	movs	r3, #0
   3508a:	4252      	negs	r2, r2
   3508c:	606a      	str	r2, [r5, #4]
   3508e:	a902      	add	r1, sp, #8
   35090:	3254      	adds	r2, #84	; 0x54
   35092:	1852      	adds	r2, r2, r1
   35094:	3401      	adds	r4, #1
   35096:	602b      	str	r3, [r5, #0]
   35098:	60eb      	str	r3, [r5, #12]
   3509a:	60ab      	str	r3, [r5, #8]
   3509c:	7013      	strb	r3, [r2, #0]
   3509e:	65ab      	str	r3, [r5, #88]	; 0x58
   350a0:	4e58      	ldr	r6, [pc, #352]	; (35204 <_svfiprintf_r+0x1f4>)
   350a2:	2205      	movs	r2, #5
   350a4:	7821      	ldrb	r1, [r4, #0]
   350a6:	0030      	movs	r0, r6
   350a8:	f000 fb02 	bl	356b0 <memchr>
   350ac:	1c62      	adds	r2, r4, #1
   350ae:	2800      	cmp	r0, #0
   350b0:	d120      	bne.n	350f4 <_svfiprintf_r+0xe4>
   350b2:	6829      	ldr	r1, [r5, #0]
   350b4:	06cb      	lsls	r3, r1, #27
   350b6:	d504      	bpl.n	350c2 <_svfiprintf_r+0xb2>
   350b8:	2353      	movs	r3, #83	; 0x53
   350ba:	ae02      	add	r6, sp, #8
   350bc:	3020      	adds	r0, #32
   350be:	199b      	adds	r3, r3, r6
   350c0:	7018      	strb	r0, [r3, #0]
   350c2:	070b      	lsls	r3, r1, #28
   350c4:	d504      	bpl.n	350d0 <_svfiprintf_r+0xc0>
   350c6:	2353      	movs	r3, #83	; 0x53
   350c8:	202b      	movs	r0, #43	; 0x2b
   350ca:	ae02      	add	r6, sp, #8
   350cc:	199b      	adds	r3, r3, r6
   350ce:	7018      	strb	r0, [r3, #0]
   350d0:	7823      	ldrb	r3, [r4, #0]
   350d2:	2b2a      	cmp	r3, #42	; 0x2a
   350d4:	d016      	beq.n	35104 <_svfiprintf_r+0xf4>
   350d6:	2000      	movs	r0, #0
   350d8:	210a      	movs	r1, #10
   350da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   350dc:	7822      	ldrb	r2, [r4, #0]
   350de:	3a30      	subs	r2, #48	; 0x30
   350e0:	2a09      	cmp	r2, #9
   350e2:	d955      	bls.n	35190 <_svfiprintf_r+0x180>
   350e4:	2800      	cmp	r0, #0
   350e6:	d015      	beq.n	35114 <_svfiprintf_r+0x104>
   350e8:	9309      	str	r3, [sp, #36]	; 0x24
   350ea:	e013      	b.n	35114 <_svfiprintf_r+0x104>
   350ec:	2b25      	cmp	r3, #37	; 0x25
   350ee:	d0b5      	beq.n	3505c <_svfiprintf_r+0x4c>
   350f0:	3401      	adds	r4, #1
   350f2:	e7b0      	b.n	35056 <_svfiprintf_r+0x46>
   350f4:	2301      	movs	r3, #1
   350f6:	1b80      	subs	r0, r0, r6
   350f8:	4083      	lsls	r3, r0
   350fa:	6829      	ldr	r1, [r5, #0]
   350fc:	0014      	movs	r4, r2
   350fe:	430b      	orrs	r3, r1
   35100:	602b      	str	r3, [r5, #0]
   35102:	e7cd      	b.n	350a0 <_svfiprintf_r+0x90>
   35104:	9b05      	ldr	r3, [sp, #20]
   35106:	1d18      	adds	r0, r3, #4
   35108:	681b      	ldr	r3, [r3, #0]
   3510a:	9005      	str	r0, [sp, #20]
   3510c:	2b00      	cmp	r3, #0
   3510e:	db39      	blt.n	35184 <_svfiprintf_r+0x174>
   35110:	9309      	str	r3, [sp, #36]	; 0x24
   35112:	0014      	movs	r4, r2
   35114:	7823      	ldrb	r3, [r4, #0]
   35116:	2b2e      	cmp	r3, #46	; 0x2e
   35118:	d10b      	bne.n	35132 <_svfiprintf_r+0x122>
   3511a:	7863      	ldrb	r3, [r4, #1]
   3511c:	1c62      	adds	r2, r4, #1
   3511e:	2b2a      	cmp	r3, #42	; 0x2a
   35120:	d13e      	bne.n	351a0 <_svfiprintf_r+0x190>
   35122:	9b05      	ldr	r3, [sp, #20]
   35124:	3402      	adds	r4, #2
   35126:	1d1a      	adds	r2, r3, #4
   35128:	681b      	ldr	r3, [r3, #0]
   3512a:	9205      	str	r2, [sp, #20]
   3512c:	2b00      	cmp	r3, #0
   3512e:	db34      	blt.n	3519a <_svfiprintf_r+0x18a>
   35130:	9307      	str	r3, [sp, #28]
   35132:	4e35      	ldr	r6, [pc, #212]	; (35208 <_svfiprintf_r+0x1f8>)
   35134:	7821      	ldrb	r1, [r4, #0]
   35136:	2203      	movs	r2, #3
   35138:	0030      	movs	r0, r6
   3513a:	f000 fab9 	bl	356b0 <memchr>
   3513e:	2800      	cmp	r0, #0
   35140:	d006      	beq.n	35150 <_svfiprintf_r+0x140>
   35142:	2340      	movs	r3, #64	; 0x40
   35144:	1b80      	subs	r0, r0, r6
   35146:	4083      	lsls	r3, r0
   35148:	682a      	ldr	r2, [r5, #0]
   3514a:	3401      	adds	r4, #1
   3514c:	4313      	orrs	r3, r2
   3514e:	602b      	str	r3, [r5, #0]
   35150:	7821      	ldrb	r1, [r4, #0]
   35152:	2206      	movs	r2, #6
   35154:	482d      	ldr	r0, [pc, #180]	; (3520c <_svfiprintf_r+0x1fc>)
   35156:	1c66      	adds	r6, r4, #1
   35158:	7629      	strb	r1, [r5, #24]
   3515a:	f000 faa9 	bl	356b0 <memchr>
   3515e:	2800      	cmp	r0, #0
   35160:	d046      	beq.n	351f0 <_svfiprintf_r+0x1e0>
   35162:	4b2b      	ldr	r3, [pc, #172]	; (35210 <_svfiprintf_r+0x200>)
   35164:	2b00      	cmp	r3, #0
   35166:	d12f      	bne.n	351c8 <_svfiprintf_r+0x1b8>
   35168:	6829      	ldr	r1, [r5, #0]
   3516a:	9b05      	ldr	r3, [sp, #20]
   3516c:	2207      	movs	r2, #7
   3516e:	05c9      	lsls	r1, r1, #23
   35170:	d528      	bpl.n	351c4 <_svfiprintf_r+0x1b4>
   35172:	189b      	adds	r3, r3, r2
   35174:	4393      	bics	r3, r2
   35176:	3308      	adds	r3, #8
   35178:	9305      	str	r3, [sp, #20]
   3517a:	696b      	ldr	r3, [r5, #20]
   3517c:	9a03      	ldr	r2, [sp, #12]
   3517e:	189b      	adds	r3, r3, r2
   35180:	616b      	str	r3, [r5, #20]
   35182:	e767      	b.n	35054 <_svfiprintf_r+0x44>
   35184:	425b      	negs	r3, r3
   35186:	60eb      	str	r3, [r5, #12]
   35188:	2302      	movs	r3, #2
   3518a:	430b      	orrs	r3, r1
   3518c:	602b      	str	r3, [r5, #0]
   3518e:	e7c0      	b.n	35112 <_svfiprintf_r+0x102>
   35190:	434b      	muls	r3, r1
   35192:	3401      	adds	r4, #1
   35194:	189b      	adds	r3, r3, r2
   35196:	2001      	movs	r0, #1
   35198:	e7a0      	b.n	350dc <_svfiprintf_r+0xcc>
   3519a:	2301      	movs	r3, #1
   3519c:	425b      	negs	r3, r3
   3519e:	e7c7      	b.n	35130 <_svfiprintf_r+0x120>
   351a0:	2300      	movs	r3, #0
   351a2:	0014      	movs	r4, r2
   351a4:	200a      	movs	r0, #10
   351a6:	001a      	movs	r2, r3
   351a8:	606b      	str	r3, [r5, #4]
   351aa:	7821      	ldrb	r1, [r4, #0]
   351ac:	3930      	subs	r1, #48	; 0x30
   351ae:	2909      	cmp	r1, #9
   351b0:	d903      	bls.n	351ba <_svfiprintf_r+0x1aa>
   351b2:	2b00      	cmp	r3, #0
   351b4:	d0bd      	beq.n	35132 <_svfiprintf_r+0x122>
   351b6:	9207      	str	r2, [sp, #28]
   351b8:	e7bb      	b.n	35132 <_svfiprintf_r+0x122>
   351ba:	4342      	muls	r2, r0
   351bc:	3401      	adds	r4, #1
   351be:	1852      	adds	r2, r2, r1
   351c0:	2301      	movs	r3, #1
   351c2:	e7f2      	b.n	351aa <_svfiprintf_r+0x19a>
   351c4:	3307      	adds	r3, #7
   351c6:	e7d5      	b.n	35174 <_svfiprintf_r+0x164>
   351c8:	ab05      	add	r3, sp, #20
   351ca:	9300      	str	r3, [sp, #0]
   351cc:	003a      	movs	r2, r7
   351ce:	4b11      	ldr	r3, [pc, #68]	; (35214 <_svfiprintf_r+0x204>)
   351d0:	0029      	movs	r1, r5
   351d2:	9802      	ldr	r0, [sp, #8]
   351d4:	e000      	b.n	351d8 <_svfiprintf_r+0x1c8>
   351d6:	bf00      	nop
   351d8:	9003      	str	r0, [sp, #12]
   351da:	9b03      	ldr	r3, [sp, #12]
   351dc:	3301      	adds	r3, #1
   351de:	d1cc      	bne.n	3517a <_svfiprintf_r+0x16a>
   351e0:	89bb      	ldrh	r3, [r7, #12]
   351e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   351e4:	065b      	lsls	r3, r3, #25
   351e6:	d400      	bmi.n	351ea <_svfiprintf_r+0x1da>
   351e8:	e729      	b.n	3503e <_svfiprintf_r+0x2e>
   351ea:	2001      	movs	r0, #1
   351ec:	4240      	negs	r0, r0
   351ee:	e726      	b.n	3503e <_svfiprintf_r+0x2e>
   351f0:	ab05      	add	r3, sp, #20
   351f2:	9300      	str	r3, [sp, #0]
   351f4:	003a      	movs	r2, r7
   351f6:	4b07      	ldr	r3, [pc, #28]	; (35214 <_svfiprintf_r+0x204>)
   351f8:	0029      	movs	r1, r5
   351fa:	9802      	ldr	r0, [sp, #8]
   351fc:	f000 f87a 	bl	352f4 <_printf_i>
   35200:	e7ea      	b.n	351d8 <_svfiprintf_r+0x1c8>
   35202:	46c0      	nop			; (mov r8, r8)
   35204:	00039a1a 	.word	0x00039a1a
   35208:	00039a20 	.word	0x00039a20
   3520c:	00039a24 	.word	0x00039a24
   35210:	00000000 	.word	0x00000000
   35214:	00034f4d 	.word	0x00034f4d

00035218 <_printf_common>:
   35218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3521a:	0015      	movs	r5, r2
   3521c:	9301      	str	r3, [sp, #4]
   3521e:	688a      	ldr	r2, [r1, #8]
   35220:	690b      	ldr	r3, [r1, #16]
   35222:	9000      	str	r0, [sp, #0]
   35224:	000c      	movs	r4, r1
   35226:	4293      	cmp	r3, r2
   35228:	da00      	bge.n	3522c <_printf_common+0x14>
   3522a:	0013      	movs	r3, r2
   3522c:	0022      	movs	r2, r4
   3522e:	602b      	str	r3, [r5, #0]
   35230:	3243      	adds	r2, #67	; 0x43
   35232:	7812      	ldrb	r2, [r2, #0]
   35234:	2a00      	cmp	r2, #0
   35236:	d001      	beq.n	3523c <_printf_common+0x24>
   35238:	3301      	adds	r3, #1
   3523a:	602b      	str	r3, [r5, #0]
   3523c:	6823      	ldr	r3, [r4, #0]
   3523e:	069b      	lsls	r3, r3, #26
   35240:	d502      	bpl.n	35248 <_printf_common+0x30>
   35242:	682b      	ldr	r3, [r5, #0]
   35244:	3302      	adds	r3, #2
   35246:	602b      	str	r3, [r5, #0]
   35248:	2706      	movs	r7, #6
   3524a:	6823      	ldr	r3, [r4, #0]
   3524c:	401f      	ands	r7, r3
   3524e:	d027      	beq.n	352a0 <_printf_common+0x88>
   35250:	0023      	movs	r3, r4
   35252:	3343      	adds	r3, #67	; 0x43
   35254:	781b      	ldrb	r3, [r3, #0]
   35256:	1e5a      	subs	r2, r3, #1
   35258:	4193      	sbcs	r3, r2
   3525a:	6822      	ldr	r2, [r4, #0]
   3525c:	0692      	lsls	r2, r2, #26
   3525e:	d430      	bmi.n	352c2 <_printf_common+0xaa>
   35260:	0022      	movs	r2, r4
   35262:	9901      	ldr	r1, [sp, #4]
   35264:	3243      	adds	r2, #67	; 0x43
   35266:	9800      	ldr	r0, [sp, #0]
   35268:	9e08      	ldr	r6, [sp, #32]
   3526a:	47b0      	blx	r6
   3526c:	1c43      	adds	r3, r0, #1
   3526e:	d025      	beq.n	352bc <_printf_common+0xa4>
   35270:	2306      	movs	r3, #6
   35272:	6820      	ldr	r0, [r4, #0]
   35274:	682a      	ldr	r2, [r5, #0]
   35276:	68e1      	ldr	r1, [r4, #12]
   35278:	4003      	ands	r3, r0
   3527a:	2500      	movs	r5, #0
   3527c:	2b04      	cmp	r3, #4
   3527e:	d103      	bne.n	35288 <_printf_common+0x70>
   35280:	1a8d      	subs	r5, r1, r2
   35282:	43eb      	mvns	r3, r5
   35284:	17db      	asrs	r3, r3, #31
   35286:	401d      	ands	r5, r3
   35288:	68a3      	ldr	r3, [r4, #8]
   3528a:	6922      	ldr	r2, [r4, #16]
   3528c:	4293      	cmp	r3, r2
   3528e:	dd01      	ble.n	35294 <_printf_common+0x7c>
   35290:	1a9b      	subs	r3, r3, r2
   35292:	18ed      	adds	r5, r5, r3
   35294:	2700      	movs	r7, #0
   35296:	42bd      	cmp	r5, r7
   35298:	d120      	bne.n	352dc <_printf_common+0xc4>
   3529a:	2000      	movs	r0, #0
   3529c:	e010      	b.n	352c0 <_printf_common+0xa8>
   3529e:	3701      	adds	r7, #1
   352a0:	68e3      	ldr	r3, [r4, #12]
   352a2:	682a      	ldr	r2, [r5, #0]
   352a4:	1a9b      	subs	r3, r3, r2
   352a6:	429f      	cmp	r7, r3
   352a8:	dad2      	bge.n	35250 <_printf_common+0x38>
   352aa:	0022      	movs	r2, r4
   352ac:	2301      	movs	r3, #1
   352ae:	3219      	adds	r2, #25
   352b0:	9901      	ldr	r1, [sp, #4]
   352b2:	9800      	ldr	r0, [sp, #0]
   352b4:	9e08      	ldr	r6, [sp, #32]
   352b6:	47b0      	blx	r6
   352b8:	1c43      	adds	r3, r0, #1
   352ba:	d1f0      	bne.n	3529e <_printf_common+0x86>
   352bc:	2001      	movs	r0, #1
   352be:	4240      	negs	r0, r0
   352c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   352c2:	2030      	movs	r0, #48	; 0x30
   352c4:	18e1      	adds	r1, r4, r3
   352c6:	3143      	adds	r1, #67	; 0x43
   352c8:	7008      	strb	r0, [r1, #0]
   352ca:	0021      	movs	r1, r4
   352cc:	1c5a      	adds	r2, r3, #1
   352ce:	3145      	adds	r1, #69	; 0x45
   352d0:	7809      	ldrb	r1, [r1, #0]
   352d2:	18a2      	adds	r2, r4, r2
   352d4:	3243      	adds	r2, #67	; 0x43
   352d6:	3302      	adds	r3, #2
   352d8:	7011      	strb	r1, [r2, #0]
   352da:	e7c1      	b.n	35260 <_printf_common+0x48>
   352dc:	0022      	movs	r2, r4
   352de:	2301      	movs	r3, #1
   352e0:	321a      	adds	r2, #26
   352e2:	9901      	ldr	r1, [sp, #4]
   352e4:	9800      	ldr	r0, [sp, #0]
   352e6:	9e08      	ldr	r6, [sp, #32]
   352e8:	47b0      	blx	r6
   352ea:	1c43      	adds	r3, r0, #1
   352ec:	d0e6      	beq.n	352bc <_printf_common+0xa4>
   352ee:	3701      	adds	r7, #1
   352f0:	e7d1      	b.n	35296 <_printf_common+0x7e>
	...

000352f4 <_printf_i>:
   352f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   352f6:	b08b      	sub	sp, #44	; 0x2c
   352f8:	9206      	str	r2, [sp, #24]
   352fa:	000a      	movs	r2, r1
   352fc:	3243      	adds	r2, #67	; 0x43
   352fe:	9307      	str	r3, [sp, #28]
   35300:	9005      	str	r0, [sp, #20]
   35302:	9204      	str	r2, [sp, #16]
   35304:	7e0a      	ldrb	r2, [r1, #24]
   35306:	000c      	movs	r4, r1
   35308:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3530a:	2a6e      	cmp	r2, #110	; 0x6e
   3530c:	d100      	bne.n	35310 <_printf_i+0x1c>
   3530e:	e08f      	b.n	35430 <_printf_i+0x13c>
   35310:	d817      	bhi.n	35342 <_printf_i+0x4e>
   35312:	2a63      	cmp	r2, #99	; 0x63
   35314:	d02c      	beq.n	35370 <_printf_i+0x7c>
   35316:	d808      	bhi.n	3532a <_printf_i+0x36>
   35318:	2a00      	cmp	r2, #0
   3531a:	d100      	bne.n	3531e <_printf_i+0x2a>
   3531c:	e099      	b.n	35452 <_printf_i+0x15e>
   3531e:	2a58      	cmp	r2, #88	; 0x58
   35320:	d054      	beq.n	353cc <_printf_i+0xd8>
   35322:	0026      	movs	r6, r4
   35324:	3642      	adds	r6, #66	; 0x42
   35326:	7032      	strb	r2, [r6, #0]
   35328:	e029      	b.n	3537e <_printf_i+0x8a>
   3532a:	2a64      	cmp	r2, #100	; 0x64
   3532c:	d001      	beq.n	35332 <_printf_i+0x3e>
   3532e:	2a69      	cmp	r2, #105	; 0x69
   35330:	d1f7      	bne.n	35322 <_printf_i+0x2e>
   35332:	6821      	ldr	r1, [r4, #0]
   35334:	681a      	ldr	r2, [r3, #0]
   35336:	0608      	lsls	r0, r1, #24
   35338:	d523      	bpl.n	35382 <_printf_i+0x8e>
   3533a:	1d11      	adds	r1, r2, #4
   3533c:	6019      	str	r1, [r3, #0]
   3533e:	6815      	ldr	r5, [r2, #0]
   35340:	e025      	b.n	3538e <_printf_i+0x9a>
   35342:	2a73      	cmp	r2, #115	; 0x73
   35344:	d100      	bne.n	35348 <_printf_i+0x54>
   35346:	e088      	b.n	3545a <_printf_i+0x166>
   35348:	d808      	bhi.n	3535c <_printf_i+0x68>
   3534a:	2a6f      	cmp	r2, #111	; 0x6f
   3534c:	d029      	beq.n	353a2 <_printf_i+0xae>
   3534e:	2a70      	cmp	r2, #112	; 0x70
   35350:	d1e7      	bne.n	35322 <_printf_i+0x2e>
   35352:	2220      	movs	r2, #32
   35354:	6809      	ldr	r1, [r1, #0]
   35356:	430a      	orrs	r2, r1
   35358:	6022      	str	r2, [r4, #0]
   3535a:	e003      	b.n	35364 <_printf_i+0x70>
   3535c:	2a75      	cmp	r2, #117	; 0x75
   3535e:	d020      	beq.n	353a2 <_printf_i+0xae>
   35360:	2a78      	cmp	r2, #120	; 0x78
   35362:	d1de      	bne.n	35322 <_printf_i+0x2e>
   35364:	0022      	movs	r2, r4
   35366:	2178      	movs	r1, #120	; 0x78
   35368:	3245      	adds	r2, #69	; 0x45
   3536a:	7011      	strb	r1, [r2, #0]
   3536c:	4a6c      	ldr	r2, [pc, #432]	; (35520 <_printf_i+0x22c>)
   3536e:	e030      	b.n	353d2 <_printf_i+0xde>
   35370:	000e      	movs	r6, r1
   35372:	681a      	ldr	r2, [r3, #0]
   35374:	3642      	adds	r6, #66	; 0x42
   35376:	1d11      	adds	r1, r2, #4
   35378:	6019      	str	r1, [r3, #0]
   3537a:	6813      	ldr	r3, [r2, #0]
   3537c:	7033      	strb	r3, [r6, #0]
   3537e:	2301      	movs	r3, #1
   35380:	e079      	b.n	35476 <_printf_i+0x182>
   35382:	0649      	lsls	r1, r1, #25
   35384:	d5d9      	bpl.n	3533a <_printf_i+0x46>
   35386:	1d11      	adds	r1, r2, #4
   35388:	6019      	str	r1, [r3, #0]
   3538a:	2300      	movs	r3, #0
   3538c:	5ed5      	ldrsh	r5, [r2, r3]
   3538e:	2d00      	cmp	r5, #0
   35390:	da03      	bge.n	3539a <_printf_i+0xa6>
   35392:	232d      	movs	r3, #45	; 0x2d
   35394:	9a04      	ldr	r2, [sp, #16]
   35396:	426d      	negs	r5, r5
   35398:	7013      	strb	r3, [r2, #0]
   3539a:	4b62      	ldr	r3, [pc, #392]	; (35524 <_printf_i+0x230>)
   3539c:	270a      	movs	r7, #10
   3539e:	9303      	str	r3, [sp, #12]
   353a0:	e02f      	b.n	35402 <_printf_i+0x10e>
   353a2:	6820      	ldr	r0, [r4, #0]
   353a4:	6819      	ldr	r1, [r3, #0]
   353a6:	0605      	lsls	r5, r0, #24
   353a8:	d503      	bpl.n	353b2 <_printf_i+0xbe>
   353aa:	1d08      	adds	r0, r1, #4
   353ac:	6018      	str	r0, [r3, #0]
   353ae:	680d      	ldr	r5, [r1, #0]
   353b0:	e005      	b.n	353be <_printf_i+0xca>
   353b2:	0640      	lsls	r0, r0, #25
   353b4:	d5f9      	bpl.n	353aa <_printf_i+0xb6>
   353b6:	680d      	ldr	r5, [r1, #0]
   353b8:	1d08      	adds	r0, r1, #4
   353ba:	6018      	str	r0, [r3, #0]
   353bc:	b2ad      	uxth	r5, r5
   353be:	4b59      	ldr	r3, [pc, #356]	; (35524 <_printf_i+0x230>)
   353c0:	2708      	movs	r7, #8
   353c2:	9303      	str	r3, [sp, #12]
   353c4:	2a6f      	cmp	r2, #111	; 0x6f
   353c6:	d018      	beq.n	353fa <_printf_i+0x106>
   353c8:	270a      	movs	r7, #10
   353ca:	e016      	b.n	353fa <_printf_i+0x106>
   353cc:	3145      	adds	r1, #69	; 0x45
   353ce:	700a      	strb	r2, [r1, #0]
   353d0:	4a54      	ldr	r2, [pc, #336]	; (35524 <_printf_i+0x230>)
   353d2:	9203      	str	r2, [sp, #12]
   353d4:	681a      	ldr	r2, [r3, #0]
   353d6:	6821      	ldr	r1, [r4, #0]
   353d8:	1d10      	adds	r0, r2, #4
   353da:	6018      	str	r0, [r3, #0]
   353dc:	6815      	ldr	r5, [r2, #0]
   353de:	0608      	lsls	r0, r1, #24
   353e0:	d522      	bpl.n	35428 <_printf_i+0x134>
   353e2:	07cb      	lsls	r3, r1, #31
   353e4:	d502      	bpl.n	353ec <_printf_i+0xf8>
   353e6:	2320      	movs	r3, #32
   353e8:	4319      	orrs	r1, r3
   353ea:	6021      	str	r1, [r4, #0]
   353ec:	2710      	movs	r7, #16
   353ee:	2d00      	cmp	r5, #0
   353f0:	d103      	bne.n	353fa <_printf_i+0x106>
   353f2:	2320      	movs	r3, #32
   353f4:	6822      	ldr	r2, [r4, #0]
   353f6:	439a      	bics	r2, r3
   353f8:	6022      	str	r2, [r4, #0]
   353fa:	0023      	movs	r3, r4
   353fc:	2200      	movs	r2, #0
   353fe:	3343      	adds	r3, #67	; 0x43
   35400:	701a      	strb	r2, [r3, #0]
   35402:	6863      	ldr	r3, [r4, #4]
   35404:	60a3      	str	r3, [r4, #8]
   35406:	2b00      	cmp	r3, #0
   35408:	db5c      	blt.n	354c4 <_printf_i+0x1d0>
   3540a:	2204      	movs	r2, #4
   3540c:	6821      	ldr	r1, [r4, #0]
   3540e:	4391      	bics	r1, r2
   35410:	6021      	str	r1, [r4, #0]
   35412:	2d00      	cmp	r5, #0
   35414:	d158      	bne.n	354c8 <_printf_i+0x1d4>
   35416:	9e04      	ldr	r6, [sp, #16]
   35418:	2b00      	cmp	r3, #0
   3541a:	d064      	beq.n	354e6 <_printf_i+0x1f2>
   3541c:	0026      	movs	r6, r4
   3541e:	9b03      	ldr	r3, [sp, #12]
   35420:	3642      	adds	r6, #66	; 0x42
   35422:	781b      	ldrb	r3, [r3, #0]
   35424:	7033      	strb	r3, [r6, #0]
   35426:	e05e      	b.n	354e6 <_printf_i+0x1f2>
   35428:	0648      	lsls	r0, r1, #25
   3542a:	d5da      	bpl.n	353e2 <_printf_i+0xee>
   3542c:	b2ad      	uxth	r5, r5
   3542e:	e7d8      	b.n	353e2 <_printf_i+0xee>
   35430:	6809      	ldr	r1, [r1, #0]
   35432:	681a      	ldr	r2, [r3, #0]
   35434:	0608      	lsls	r0, r1, #24
   35436:	d505      	bpl.n	35444 <_printf_i+0x150>
   35438:	1d11      	adds	r1, r2, #4
   3543a:	6019      	str	r1, [r3, #0]
   3543c:	6813      	ldr	r3, [r2, #0]
   3543e:	6962      	ldr	r2, [r4, #20]
   35440:	601a      	str	r2, [r3, #0]
   35442:	e006      	b.n	35452 <_printf_i+0x15e>
   35444:	0649      	lsls	r1, r1, #25
   35446:	d5f7      	bpl.n	35438 <_printf_i+0x144>
   35448:	1d11      	adds	r1, r2, #4
   3544a:	6019      	str	r1, [r3, #0]
   3544c:	6813      	ldr	r3, [r2, #0]
   3544e:	8aa2      	ldrh	r2, [r4, #20]
   35450:	801a      	strh	r2, [r3, #0]
   35452:	2300      	movs	r3, #0
   35454:	9e04      	ldr	r6, [sp, #16]
   35456:	6123      	str	r3, [r4, #16]
   35458:	e054      	b.n	35504 <_printf_i+0x210>
   3545a:	681a      	ldr	r2, [r3, #0]
   3545c:	1d11      	adds	r1, r2, #4
   3545e:	6019      	str	r1, [r3, #0]
   35460:	6816      	ldr	r6, [r2, #0]
   35462:	2100      	movs	r1, #0
   35464:	6862      	ldr	r2, [r4, #4]
   35466:	0030      	movs	r0, r6
   35468:	f000 f922 	bl	356b0 <memchr>
   3546c:	2800      	cmp	r0, #0
   3546e:	d001      	beq.n	35474 <_printf_i+0x180>
   35470:	1b80      	subs	r0, r0, r6
   35472:	6060      	str	r0, [r4, #4]
   35474:	6863      	ldr	r3, [r4, #4]
   35476:	6123      	str	r3, [r4, #16]
   35478:	2300      	movs	r3, #0
   3547a:	9a04      	ldr	r2, [sp, #16]
   3547c:	7013      	strb	r3, [r2, #0]
   3547e:	e041      	b.n	35504 <_printf_i+0x210>
   35480:	6923      	ldr	r3, [r4, #16]
   35482:	0032      	movs	r2, r6
   35484:	9906      	ldr	r1, [sp, #24]
   35486:	9805      	ldr	r0, [sp, #20]
   35488:	9d07      	ldr	r5, [sp, #28]
   3548a:	47a8      	blx	r5
   3548c:	1c43      	adds	r3, r0, #1
   3548e:	d043      	beq.n	35518 <_printf_i+0x224>
   35490:	6823      	ldr	r3, [r4, #0]
   35492:	2500      	movs	r5, #0
   35494:	079b      	lsls	r3, r3, #30
   35496:	d40f      	bmi.n	354b8 <_printf_i+0x1c4>
   35498:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3549a:	68e0      	ldr	r0, [r4, #12]
   3549c:	4298      	cmp	r0, r3
   3549e:	da3d      	bge.n	3551c <_printf_i+0x228>
   354a0:	0018      	movs	r0, r3
   354a2:	e03b      	b.n	3551c <_printf_i+0x228>
   354a4:	0022      	movs	r2, r4
   354a6:	2301      	movs	r3, #1
   354a8:	3219      	adds	r2, #25
   354aa:	9906      	ldr	r1, [sp, #24]
   354ac:	9805      	ldr	r0, [sp, #20]
   354ae:	9e07      	ldr	r6, [sp, #28]
   354b0:	47b0      	blx	r6
   354b2:	1c43      	adds	r3, r0, #1
   354b4:	d030      	beq.n	35518 <_printf_i+0x224>
   354b6:	3501      	adds	r5, #1
   354b8:	68e3      	ldr	r3, [r4, #12]
   354ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
   354bc:	1a9b      	subs	r3, r3, r2
   354be:	429d      	cmp	r5, r3
   354c0:	dbf0      	blt.n	354a4 <_printf_i+0x1b0>
   354c2:	e7e9      	b.n	35498 <_printf_i+0x1a4>
   354c4:	2d00      	cmp	r5, #0
   354c6:	d0a9      	beq.n	3541c <_printf_i+0x128>
   354c8:	9e04      	ldr	r6, [sp, #16]
   354ca:	0028      	movs	r0, r5
   354cc:	0039      	movs	r1, r7
   354ce:	f7fc fff5 	bl	324bc <__aeabi_uidivmod>
   354d2:	9b03      	ldr	r3, [sp, #12]
   354d4:	3e01      	subs	r6, #1
   354d6:	5c5b      	ldrb	r3, [r3, r1]
   354d8:	0028      	movs	r0, r5
   354da:	7033      	strb	r3, [r6, #0]
   354dc:	0039      	movs	r1, r7
   354de:	f7fc ff67 	bl	323b0 <__udivsi3>
   354e2:	1e05      	subs	r5, r0, #0
   354e4:	d1f1      	bne.n	354ca <_printf_i+0x1d6>
   354e6:	2f08      	cmp	r7, #8
   354e8:	d109      	bne.n	354fe <_printf_i+0x20a>
   354ea:	6823      	ldr	r3, [r4, #0]
   354ec:	07db      	lsls	r3, r3, #31
   354ee:	d506      	bpl.n	354fe <_printf_i+0x20a>
   354f0:	6863      	ldr	r3, [r4, #4]
   354f2:	6922      	ldr	r2, [r4, #16]
   354f4:	4293      	cmp	r3, r2
   354f6:	dc02      	bgt.n	354fe <_printf_i+0x20a>
   354f8:	2330      	movs	r3, #48	; 0x30
   354fa:	3e01      	subs	r6, #1
   354fc:	7033      	strb	r3, [r6, #0]
   354fe:	9b04      	ldr	r3, [sp, #16]
   35500:	1b9b      	subs	r3, r3, r6
   35502:	6123      	str	r3, [r4, #16]
   35504:	9b07      	ldr	r3, [sp, #28]
   35506:	aa09      	add	r2, sp, #36	; 0x24
   35508:	9300      	str	r3, [sp, #0]
   3550a:	0021      	movs	r1, r4
   3550c:	9b06      	ldr	r3, [sp, #24]
   3550e:	9805      	ldr	r0, [sp, #20]
   35510:	f7ff fe82 	bl	35218 <_printf_common>
   35514:	1c43      	adds	r3, r0, #1
   35516:	d1b3      	bne.n	35480 <_printf_i+0x18c>
   35518:	2001      	movs	r0, #1
   3551a:	4240      	negs	r0, r0
   3551c:	b00b      	add	sp, #44	; 0x2c
   3551e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35520:	00039a3c 	.word	0x00039a3c
   35524:	00039a2b 	.word	0x00039a2b

00035528 <__sread>:
   35528:	b570      	push	{r4, r5, r6, lr}
   3552a:	000c      	movs	r4, r1
   3552c:	250e      	movs	r5, #14
   3552e:	5f49      	ldrsh	r1, [r1, r5]
   35530:	f000 f8f0 	bl	35714 <_read_r>
   35534:	2800      	cmp	r0, #0
   35536:	db03      	blt.n	35540 <__sread+0x18>
   35538:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3553a:	181b      	adds	r3, r3, r0
   3553c:	6563      	str	r3, [r4, #84]	; 0x54
   3553e:	bd70      	pop	{r4, r5, r6, pc}
   35540:	89a3      	ldrh	r3, [r4, #12]
   35542:	4a02      	ldr	r2, [pc, #8]	; (3554c <__sread+0x24>)
   35544:	4013      	ands	r3, r2
   35546:	81a3      	strh	r3, [r4, #12]
   35548:	e7f9      	b.n	3553e <__sread+0x16>
   3554a:	46c0      	nop			; (mov r8, r8)
   3554c:	ffffefff 	.word	0xffffefff

00035550 <__swrite>:
   35550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35552:	001f      	movs	r7, r3
   35554:	898b      	ldrh	r3, [r1, #12]
   35556:	0005      	movs	r5, r0
   35558:	000c      	movs	r4, r1
   3555a:	0016      	movs	r6, r2
   3555c:	05db      	lsls	r3, r3, #23
   3555e:	d505      	bpl.n	3556c <__swrite+0x1c>
   35560:	230e      	movs	r3, #14
   35562:	5ec9      	ldrsh	r1, [r1, r3]
   35564:	2200      	movs	r2, #0
   35566:	2302      	movs	r3, #2
   35568:	f000 f88e 	bl	35688 <_lseek_r>
   3556c:	89a3      	ldrh	r3, [r4, #12]
   3556e:	4a05      	ldr	r2, [pc, #20]	; (35584 <__swrite+0x34>)
   35570:	0028      	movs	r0, r5
   35572:	4013      	ands	r3, r2
   35574:	81a3      	strh	r3, [r4, #12]
   35576:	0032      	movs	r2, r6
   35578:	230e      	movs	r3, #14
   3557a:	5ee1      	ldrsh	r1, [r4, r3]
   3557c:	003b      	movs	r3, r7
   3557e:	f000 f839 	bl	355f4 <_write_r>
   35582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35584:	ffffefff 	.word	0xffffefff

00035588 <__sseek>:
   35588:	b570      	push	{r4, r5, r6, lr}
   3558a:	000c      	movs	r4, r1
   3558c:	250e      	movs	r5, #14
   3558e:	5f49      	ldrsh	r1, [r1, r5]
   35590:	f000 f87a 	bl	35688 <_lseek_r>
   35594:	89a3      	ldrh	r3, [r4, #12]
   35596:	1c42      	adds	r2, r0, #1
   35598:	d103      	bne.n	355a2 <__sseek+0x1a>
   3559a:	4a05      	ldr	r2, [pc, #20]	; (355b0 <__sseek+0x28>)
   3559c:	4013      	ands	r3, r2
   3559e:	81a3      	strh	r3, [r4, #12]
   355a0:	bd70      	pop	{r4, r5, r6, pc}
   355a2:	2280      	movs	r2, #128	; 0x80
   355a4:	0152      	lsls	r2, r2, #5
   355a6:	4313      	orrs	r3, r2
   355a8:	81a3      	strh	r3, [r4, #12]
   355aa:	6560      	str	r0, [r4, #84]	; 0x54
   355ac:	e7f8      	b.n	355a0 <__sseek+0x18>
   355ae:	46c0      	nop			; (mov r8, r8)
   355b0:	ffffefff 	.word	0xffffefff

000355b4 <__sclose>:
   355b4:	b510      	push	{r4, lr}
   355b6:	230e      	movs	r3, #14
   355b8:	5ec9      	ldrsh	r1, [r1, r3]
   355ba:	f000 f82f 	bl	3561c <_close_r>
   355be:	bd10      	pop	{r4, pc}

000355c0 <strchr>:
   355c0:	b2c9      	uxtb	r1, r1
   355c2:	7803      	ldrb	r3, [r0, #0]
   355c4:	2b00      	cmp	r3, #0
   355c6:	d004      	beq.n	355d2 <strchr+0x12>
   355c8:	4299      	cmp	r1, r3
   355ca:	d100      	bne.n	355ce <strchr+0xe>
   355cc:	4770      	bx	lr
   355ce:	3001      	adds	r0, #1
   355d0:	e7f7      	b.n	355c2 <strchr+0x2>
   355d2:	424b      	negs	r3, r1
   355d4:	4159      	adcs	r1, r3
   355d6:	4249      	negs	r1, r1
   355d8:	4008      	ands	r0, r1
   355da:	e7f7      	b.n	355cc <strchr+0xc>

000355dc <__ascii_wctomb>:
   355dc:	1e0b      	subs	r3, r1, #0
   355de:	d004      	beq.n	355ea <__ascii_wctomb+0xe>
   355e0:	2aff      	cmp	r2, #255	; 0xff
   355e2:	d904      	bls.n	355ee <__ascii_wctomb+0x12>
   355e4:	238a      	movs	r3, #138	; 0x8a
   355e6:	6003      	str	r3, [r0, #0]
   355e8:	3b8b      	subs	r3, #139	; 0x8b
   355ea:	0018      	movs	r0, r3
   355ec:	4770      	bx	lr
   355ee:	700a      	strb	r2, [r1, #0]
   355f0:	2301      	movs	r3, #1
   355f2:	e7fa      	b.n	355ea <__ascii_wctomb+0xe>

000355f4 <_write_r>:
   355f4:	b570      	push	{r4, r5, r6, lr}
   355f6:	0005      	movs	r5, r0
   355f8:	0008      	movs	r0, r1
   355fa:	0011      	movs	r1, r2
   355fc:	2200      	movs	r2, #0
   355fe:	4c06      	ldr	r4, [pc, #24]	; (35618 <_write_r+0x24>)
   35600:	6022      	str	r2, [r4, #0]
   35602:	001a      	movs	r2, r3
   35604:	f7f5 fa72 	bl	2aaec <_write>
   35608:	1c43      	adds	r3, r0, #1
   3560a:	d103      	bne.n	35614 <_write_r+0x20>
   3560c:	6823      	ldr	r3, [r4, #0]
   3560e:	2b00      	cmp	r3, #0
   35610:	d000      	beq.n	35614 <_write_r+0x20>
   35612:	602b      	str	r3, [r5, #0]
   35614:	bd70      	pop	{r4, r5, r6, pc}
   35616:	46c0      	nop			; (mov r8, r8)
   35618:	2000580c 	.word	0x2000580c

0003561c <_close_r>:
   3561c:	2300      	movs	r3, #0
   3561e:	b570      	push	{r4, r5, r6, lr}
   35620:	4c06      	ldr	r4, [pc, #24]	; (3563c <_close_r+0x20>)
   35622:	0005      	movs	r5, r0
   35624:	0008      	movs	r0, r1
   35626:	6023      	str	r3, [r4, #0]
   35628:	f7f5 fab4 	bl	2ab94 <_close>
   3562c:	1c43      	adds	r3, r0, #1
   3562e:	d103      	bne.n	35638 <_close_r+0x1c>
   35630:	6823      	ldr	r3, [r4, #0]
   35632:	2b00      	cmp	r3, #0
   35634:	d000      	beq.n	35638 <_close_r+0x1c>
   35636:	602b      	str	r3, [r5, #0]
   35638:	bd70      	pop	{r4, r5, r6, pc}
   3563a:	46c0      	nop			; (mov r8, r8)
   3563c:	2000580c 	.word	0x2000580c

00035640 <_fstat_r>:
   35640:	2300      	movs	r3, #0
   35642:	b570      	push	{r4, r5, r6, lr}
   35644:	4c06      	ldr	r4, [pc, #24]	; (35660 <_fstat_r+0x20>)
   35646:	0005      	movs	r5, r0
   35648:	0008      	movs	r0, r1
   3564a:	0011      	movs	r1, r2
   3564c:	6023      	str	r3, [r4, #0]
   3564e:	f7f5 faab 	bl	2aba8 <_fstat>
   35652:	1c43      	adds	r3, r0, #1
   35654:	d103      	bne.n	3565e <_fstat_r+0x1e>
   35656:	6823      	ldr	r3, [r4, #0]
   35658:	2b00      	cmp	r3, #0
   3565a:	d000      	beq.n	3565e <_fstat_r+0x1e>
   3565c:	602b      	str	r3, [r5, #0]
   3565e:	bd70      	pop	{r4, r5, r6, pc}
   35660:	2000580c 	.word	0x2000580c

00035664 <_isatty_r>:
   35664:	2300      	movs	r3, #0
   35666:	b570      	push	{r4, r5, r6, lr}
   35668:	4c06      	ldr	r4, [pc, #24]	; (35684 <_isatty_r+0x20>)
   3566a:	0005      	movs	r5, r0
   3566c:	0008      	movs	r0, r1
   3566e:	6023      	str	r3, [r4, #0]
   35670:	f7f5 faa8 	bl	2abc4 <_isatty>
   35674:	1c43      	adds	r3, r0, #1
   35676:	d103      	bne.n	35680 <_isatty_r+0x1c>
   35678:	6823      	ldr	r3, [r4, #0]
   3567a:	2b00      	cmp	r3, #0
   3567c:	d000      	beq.n	35680 <_isatty_r+0x1c>
   3567e:	602b      	str	r3, [r5, #0]
   35680:	bd70      	pop	{r4, r5, r6, pc}
   35682:	46c0      	nop			; (mov r8, r8)
   35684:	2000580c 	.word	0x2000580c

00035688 <_lseek_r>:
   35688:	b570      	push	{r4, r5, r6, lr}
   3568a:	0005      	movs	r5, r0
   3568c:	0008      	movs	r0, r1
   3568e:	0011      	movs	r1, r2
   35690:	2200      	movs	r2, #0
   35692:	4c06      	ldr	r4, [pc, #24]	; (356ac <_lseek_r+0x24>)
   35694:	6022      	str	r2, [r4, #0]
   35696:	001a      	movs	r2, r3
   35698:	f7f5 fa9d 	bl	2abd6 <_lseek>
   3569c:	1c43      	adds	r3, r0, #1
   3569e:	d103      	bne.n	356a8 <_lseek_r+0x20>
   356a0:	6823      	ldr	r3, [r4, #0]
   356a2:	2b00      	cmp	r3, #0
   356a4:	d000      	beq.n	356a8 <_lseek_r+0x20>
   356a6:	602b      	str	r3, [r5, #0]
   356a8:	bd70      	pop	{r4, r5, r6, pc}
   356aa:	46c0      	nop			; (mov r8, r8)
   356ac:	2000580c 	.word	0x2000580c

000356b0 <memchr>:
   356b0:	b2c9      	uxtb	r1, r1
   356b2:	1882      	adds	r2, r0, r2
   356b4:	4290      	cmp	r0, r2
   356b6:	d101      	bne.n	356bc <memchr+0xc>
   356b8:	2000      	movs	r0, #0
   356ba:	4770      	bx	lr
   356bc:	7803      	ldrb	r3, [r0, #0]
   356be:	428b      	cmp	r3, r1
   356c0:	d0fb      	beq.n	356ba <memchr+0xa>
   356c2:	3001      	adds	r0, #1
   356c4:	e7f6      	b.n	356b4 <memchr+0x4>

000356c6 <_realloc_r>:
   356c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   356c8:	0007      	movs	r7, r0
   356ca:	000d      	movs	r5, r1
   356cc:	0016      	movs	r6, r2
   356ce:	2900      	cmp	r1, #0
   356d0:	d105      	bne.n	356de <_realloc_r+0x18>
   356d2:	0011      	movs	r1, r2
   356d4:	f7fe feac 	bl	34430 <_malloc_r>
   356d8:	0004      	movs	r4, r0
   356da:	0020      	movs	r0, r4
   356dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   356de:	2a00      	cmp	r2, #0
   356e0:	d103      	bne.n	356ea <_realloc_r+0x24>
   356e2:	f7fe fe5b 	bl	3439c <_free_r>
   356e6:	0034      	movs	r4, r6
   356e8:	e7f7      	b.n	356da <_realloc_r+0x14>
   356ea:	f000 f827 	bl	3573c <_malloc_usable_size_r>
   356ee:	002c      	movs	r4, r5
   356f0:	4286      	cmp	r6, r0
   356f2:	d9f2      	bls.n	356da <_realloc_r+0x14>
   356f4:	0031      	movs	r1, r6
   356f6:	0038      	movs	r0, r7
   356f8:	f7fe fe9a 	bl	34430 <_malloc_r>
   356fc:	1e04      	subs	r4, r0, #0
   356fe:	d0ec      	beq.n	356da <_realloc_r+0x14>
   35700:	0029      	movs	r1, r5
   35702:	0032      	movs	r2, r6
   35704:	f7fe fe26 	bl	34354 <memcpy>
   35708:	0029      	movs	r1, r5
   3570a:	0038      	movs	r0, r7
   3570c:	f7fe fe46 	bl	3439c <_free_r>
   35710:	e7e3      	b.n	356da <_realloc_r+0x14>
	...

00035714 <_read_r>:
   35714:	b570      	push	{r4, r5, r6, lr}
   35716:	0005      	movs	r5, r0
   35718:	0008      	movs	r0, r1
   3571a:	0011      	movs	r1, r2
   3571c:	2200      	movs	r2, #0
   3571e:	4c06      	ldr	r4, [pc, #24]	; (35738 <_read_r+0x24>)
   35720:	6022      	str	r2, [r4, #0]
   35722:	001a      	movs	r2, r3
   35724:	f7f5 f9b8 	bl	2aa98 <_read>
   35728:	1c43      	adds	r3, r0, #1
   3572a:	d103      	bne.n	35734 <_read_r+0x20>
   3572c:	6823      	ldr	r3, [r4, #0]
   3572e:	2b00      	cmp	r3, #0
   35730:	d000      	beq.n	35734 <_read_r+0x20>
   35732:	602b      	str	r3, [r5, #0]
   35734:	bd70      	pop	{r4, r5, r6, pc}
   35736:	46c0      	nop			; (mov r8, r8)
   35738:	2000580c 	.word	0x2000580c

0003573c <_malloc_usable_size_r>:
   3573c:	1f0b      	subs	r3, r1, #4
   3573e:	681b      	ldr	r3, [r3, #0]
   35740:	1f18      	subs	r0, r3, #4
   35742:	2b00      	cmp	r3, #0
   35744:	da01      	bge.n	3574a <_malloc_usable_size_r+0xe>
   35746:	580b      	ldr	r3, [r1, r0]
   35748:	18c0      	adds	r0, r0, r3
   3574a:	4770      	bx	lr

0003574c <pcWelcomeMessage>:
   3574c:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   3575c:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   3576c:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   3577c:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   3578c:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   3579c:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   357ac:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   357bc:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   357cc:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   357dc:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   357ec:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   357fc:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   3580c:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   3581c:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   3582c:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   3583c:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   3584c:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   3585c:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   3586c:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   3587c:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   3588c:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   3589c:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   358ac:	7761 0d2e 000a 0000 6873 6374 0000 0000     aw......shtc....
   358bc:	6873 6374 203a 6567 2074 6574 706d 6120     shtc: get temp a
   358cc:	646e 6820 6d75 6469 7469 0d79 000a 0000     nd humidity.....
   358dc:	3269 0063 3269 3a63 5320 6163 736e 4920     i2c.i2c: Scans I
   358ec:	4332 6220 7375 0a0d 0000 0000 6c63 0073     2C bus......cls.
   358fc:	6c63 3a73 4320 656c 7261 2073 6874 2065     cls: Clears the 
   3590c:	6574 6d72 6e69 6c61 7320 7263 6565 0d6e     terminal screen.
   3591c:	000a 0000 6f43 6c75 2064 6f6e 2074 6c61     ....Could not al
   3592c:	6f6c 6163 6574 7320 6d65 7061 6f68 6572     locate semaphore
   3593c:	0a0d 0000 0a0d 0000 616f 0000 6325 325b     ........oa..%c[2
   3594c:	0d4b 003e 2008 0008 6341 6563 656c 6172     K.>.. ..Accelera
   3595c:	6974 6e6f 5b20 676d 3a5d 2058 6425 5909     tion [mg]:X %d.Y
   3596c:	2520 0964 205a 6425 0a0d 0000 6f4e 6420      %d.Z %d....No d
   3597c:	7461 2061 6572 6461 2179 5320 6e65 6964     ata ready! Sendi
   3598c:	676e 6420 6d75 796d 6420 7461 2061 0a0d     ng dummy data ..
   3599c:	0000 0000 4853 4354 6520 7272 726f 0d21     ....SHTC error!.
   359ac:	000a 0000 7568 696d 6964 7974 3d20 2520     ....humidity = %
   359bc:	2064 202c 6574 706d 3d20 2520 2064 0a0d     d , temp = %d ..
   359cc:	0000 0000 6325 325b 004a 0000 654b 6e79     ....%c[2J...Keyn
   359dc:	6d75 6d20 7375 2074 6562 6220 7465 6577     um must be betwe
   359ec:	6e65 3020 7420 206f 3531 0a0d 0000 0000     en 0 to 15......
   359fc:	6552 2064 756d 7473 6220 2065 6562 7774     Red must be betw
   35a0c:	6565 206e 2030 6e61 2064 3532 0d35 000a     een 0 and 255...
   35a1c:	7247 6565 206e 756d 7473 6220 2065 6562     Green must be be
   35a2c:	7774 6565 206e 2030 6e61 2064 3532 0d35     tween 0 and 255.
   35a3c:	000a 0000 6c42 6575 6d20 7375 2074 6562     ....Blue must be
   35a4c:	6220 7465 6577 6e65 3020 6120 646e 3220      between 0 and 2
   35a5c:	3535 0a0d 0000 0000 6e75 7865 6570 7463     55......unexpect
   35a6c:	6465 4920 4332 6520 7272 726f 0a0d 0000     ed I2C error....
   35a7c:	7542 7474 6e6f 2320 6425 6920 2073 6572     Button #%d is re
   35a8c:	656c 7361 6465 0a0d 0000 0000 7542 7474     leased......Butt
   35a9c:	6e6f 2320 6425 6920 2073 7270 7365 6573     on #%d is presse
   35aac:	0d64 000a 2030 3120 2020 2032 3320 2020     d...0  1  2  3  
   35abc:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   35acc:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   35adc:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   35aec:	3025 7832 0020 0000                         %02x ...

00035af4 <xImuGetCommand>:
   35af4:	5790 0003 5794 0003 31fd 0001 0000 0000     .W...W...1......

00035b04 <xOTAUCommand>:
   35b04:	57b8 0003 57bc 0003 33fd 0001 0000 0000     .W...W...3......

00035b14 <xResetCommand>:
   35b14:	57ec 0003 57f4 0003 341d 0001 0000 0000     .W...W...4......

00035b24 <xNeotrellisTurnLEDCommand>:
   35b24:	5810 0003 5814 0003 343d 0001 0004 0000     .X...X..=4......

00035b34 <xNeotrellisProcessButtonCommand>:
   35b34:	585c 0003 5868 0003 35d1 0001 0000 0000     \X..hX...5......

00035b44 <xSHTCGetCommand>:
   35b44:	58b4 0003 58bc 0003 3349 0001 0000 0000     .X...X..I3......

00035b54 <xI2cScan>:
   35b54:	58dc 0003 58e0 0003 36d5 0001 0000 0000     .X...X...6......

00035b64 <xClearScreen>:
   35b64:	58f8 0003 58fc 0003 33b5 0001 0000 0000     .X...X...3......
   35b74:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   35b84:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   35b94:	0a0d 6873 7069 615f 7272 2520 2064 6425     ..ship_arr %d %d
   35ba4:	2520 0d64 000a 0000                          %d.....

00035bac <msgBaseGetHWID>:
   35bac:	0100 0000                                   ....

00035bb0 <msgNeopixelPin>:
   35bb0:	010e 0003                                   ....

00035bb4 <msgNeopixelSpeed>:
   35bb4:	020e 0001                                   ....

00035bb8 <msgNeopixelBufLength>:
   35bb8:	030e 3000                                   ...0

00035bbc <msgKeypadEnableInt>:
   35bbc:	0210 0001                                   ....

00035bc0 <msgKeypadGetCount>:
   35bc0:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   35bd0:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   35be0:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   35bf0:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   35c00:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   35c10:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   35c20:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   35c30:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   35c40:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   35c50:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   35c60:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   35c70:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   35c80:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   35c90:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   35ca0:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   35cb0:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   35cc0:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   35cd0:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   35ce0:	6574 2164 0000 0000 6c50 6361 6d65 6e65     ted!....Placemen
   35cf0:	2074 7473 7261 6574 2164 0d20 000a 0000     t started! .....

00035d00 <main_mqtt_broker>:
   35d00:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   35d10:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   35d20:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   35d30:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   35d40:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   35d50:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   35d60:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   35d70:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   35d80:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   35d90:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   35da0:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   35db0:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   35dc0:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   35dd0:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   35de0:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   35df0:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   35e00:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   35e10:	7564 7e2f 6170 7474 6e61 2f61 7766 622e     du/~pattana/fw.b
   35e20:	6e69 0000 7473 726f 5f65 6966 656c 705f     in..store_file_p
   35e30:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
   35e40:	2e61 0a0d 0000 0000 7473 726f 5f65 6966     a.......store_fi
   35e50:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   35e60:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   35e70:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   35e80:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   35e90:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   35ea0:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   35eb0:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   35ec0:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   35ed0:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   35ee0:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   35ef0:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   35f00:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   35f10:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   35f20:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   35f30:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   35f40:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   35f50:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   35f60:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   35f70:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   35f80:	6c6c 2e79 0a0d 0000 7468 7074 635f 696c     lly.....http_cli
   35f90:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   35fa0:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   35fb0:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   35fc0:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   35fd0:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   35fe0:	706d 656c 6574 2e64 0a0d 0000 7468 7074     mpleted.....http
   35ff0:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   36000:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   36010:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   36020:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
   36030:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   36040:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   36050:	6e6f 253a 0d64 000a 6572 6f73 766c 5f65     on:%d...resolve_
   36060:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   36070:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   36080:	0a0d 0a0d 0000 0000 6977 6966 635f 3a62     ........wifi_cb:
   36090:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   360a0:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   360b0:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   360c0:	454e 5443 4445 0a0d 0000 0000 3532 3530     NECTED......2505
   360d0:	3931 3739 0000 0000 694b 276d 2073 6f48     1997....Kim's Ho
   360e0:	656d 0000 6977 6966 635f 3a62 4920 2050     me..wifi_cb: IP 
   360f0:	6461 7264 7365 2073 7369 2520 2e75 7525     address is %u.%u
   36100:	252e 2e75 7525 0a0d 0000 0000 7245 6f72     .%u.%u......Erro
   36110:	2072 6f63 6e6e 6365 6974 676e 7420 206f     r connecting to 
   36120:	514d 5454 4220 6f72 656b 2172 0a0d 0000     MQTT Broker!....
   36130:	6e69 7469 735f 6f74 6172 6567 203a 6c70     init_storage: pl
   36140:	6165 6573 7020 756c 2067 6e61 5320 2f44     ease plug an SD/
   36150:	4d4d 2043 6163 6472 6920 206e 6c73 746f     MMC card in slot
   36160:	2e2e 0d2e 000a 0000 6e69 7469 735f 6f74     ........init_sto
   36170:	6172 6567 203a 4453 4320 7261 2064 6e69     rage: SD Card in
   36180:	7473 6c61 206c 6166 6c69 6465 0d2e 000a     stall failed....
   36190:	6e69 7469 735f 6f74 6172 6567 203a 7274     init_storage: tr
   361a0:	2079 6e75 6c70 6775 6120 646e 7220 2d65     y unplug and re-
   361b0:	6c70 6775 7420 6568 6320 7261 2e64 0a0d     plug the card...
   361c0:	0000 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   361d0:	203a 6f6d 6e75 6974 676e 5320 2044 6163     : mounting SD ca
   361e0:	6472 2e2e 0d2e 000a 6e69 7469 735f 6f74     rd......init_sto
   361f0:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   36200:	6e75 2074 6166 6c69 6465 2021 7228 7365     unt failed! (res
   36210:	2520 2964 0a0d 0000 6e69 7469 735f 6f74      %d)....init_sto
   36220:	6172 6567 203a 4453 6320 7261 2064 6f6d     rage: SD card mo
   36230:	6e75 2074 4b4f 0d2e 000a 0000 6f63 666e     unt OK......conf
   36240:	6769 7275 5f65 7468 7074 635f 696c 6e65     igure_http_clien
   36250:	3a74 4820 5454 2050 6c63 6569 746e 6920     t: HTTP client i
   36260:	696e 6974 6c61 7a69 7461 6f69 206e 6166     nitialization fa
   36270:	6c69 6465 2021 7228 7365 2520 2964 0a0d     iled! (res %d)..
   36280:	0000 0000 005b 0000 0a0d 6873 7069 7320     ....[.....ship s
   36290:	7a69 2065 656d 7373 6761 2065 6572 6563     ize message rece
   362a0:	7669 6465 0d21 000a 0a0d 2520 2a2e 0073     ived!..... %.*s.
   362b0:	0a0d 2e25 732a 0000 0a0d 7420 6f6f 6d20     ..%.*s.... too m
   362c0:	6e61 2079 6873 7069 2121 0a0d 0000 0000     any ship!!......
   362d0:	0a0d 6f43 6e6e 6365 6974 676e 7420 206f     ..Connecting to 
   362e0:	7242 6b6f 7265 2e2e 002e 0000 7242 4a73     Broker......BrsJ
   362f0:	4e42 6f56 4251 376c 0000 0000 7472 7974     BNVoQBl7....rtty
   36300:	626f 6a65 0000 0000 514d 5454 2020 7245     obej....MQTT  Er
   36310:	6f72 2072 202d 4f4e 2054 6f43 6e6e 6365     ror - NOT Connec
   36320:	6574 2064 6f74 6220 6f72 656b 0d72 000a     ted to broker...
   36330:	514d 5454 4320 6e6f 656e 7463 6465 7420     MQTT Connected t
   36340:	206f 7262 6b6f 7265 0a0d 0000 6f43 6e6e     o broker....Conn
   36350:	6365 2074 6166 6c69 7420 206f 6573 7672     ect fail to serv
   36360:	7265 2528 2973 2021 6572 7274 2079 7469     er(%s)! retry it
   36370:	6120 7475 6d6f 7461 6369 6c61 796c 0d2e      automatically..
   36380:	000a 0000 5345 3545 3631 545f 3331 735f     ....ESE516_T13_s
   36390:	6968 7370 7a69 0065 514d 5454 4320 6e6f     hipsize.MQTT Con
   363a0:	656e 7463 6465 0a0d 0000 0000 514d 5454     nected......MQTT
   363b0:	6220 6f72 656b 2072 6564 6c63 6e69 2065      broker decline 
   363c0:	6f79 7275 6120 6363 7365 2173 6520 7272     your access! err
   363d0:	726f 6320 646f 2065 6425 0a0d 0000 0000     or code %d......
   363e0:	514d 5454 6420 7369 6f63 6e6e 6365 6574     MQTT disconnecte
   363f0:	0d64 000a 514d 5454 6920 696e 6974 6c61     d...MQTT initial
   36400:	7a69 7461 6f69 206e 6166 6c69 6465 202e     ization failed. 
   36410:	7245 6f72 2072 6f63 6564 6920 2073 2528     Error code is (%
   36420:	2964 0a0d 0000 0000 514d 5454 7220 6765     d)......MQTT reg
   36430:	7369 6574 2072 6163 6c6c 6162 6b63 6620     ister callback f
   36440:	6961 656c 2e64 4520 7272 726f 6320 646f     ailed. Error cod
   36450:	2065 7369 2820 6425 0d29 000a 6f43 6e6e     e is (%d)...Conn
   36460:	6365 6574 2064 6f74 4d20 5451 2054 7242     ected to MQTT Br
   36470:	6b6f 7265 0d21 000a 5245 4f52 2052 6e49     oker!...ERROR In
   36480:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   36490:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   364a0:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   364b0:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   364c0:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   364d0:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   364e0:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   364f0:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   36500:	4120 2050 7325 2e2e 0d2e 000a 0031 0000      AP %s......1...
   36510:	5345 3545 3631 545f 3331 705f 0031 0000     ESE516_T13_p1...
   36520:	514d 5454 7320 6174 7472 7320 6769 616e     MQTT start signa
   36530:	206c 6573 746e 0000 465b 4941 5d4c 7220     l sent..[FAIL] r
   36540:	7365 2520 0d64 000a 7075 6164 6574 742e     es %d...update.t
   36550:	7478 6120 6464 6465 0d21 000a 3a30 7075     xt added!...0:up
   36560:	6164 6574 742e 7478 0000 0000 6598 0001     date.txt.....e..
   36570:	65a4 0001 65b6 0001 660c 0001 662c 0001     .e...e...f..,f..
   36580:	6568 706c 0000 0000 0a0d 6568 706c 0d3a     help......help:.
   36590:	200a 694c 7473 2073 6c61 206c 6874 2065     . Lists all the 
   365a0:	6572 6967 7473 7265 6465 6320 6d6f 616d     registered comma
   365b0:	646e 0d73 0d0a 000a 6e49 6f63 7272 6365     nds.....Incorrec
   365c0:	2074 6f63 6d6d 6e61 2064 6170 6172 656d     t command parame
   365d0:	6574 2872 2973 202e 4520 746e 7265 2220     ter(s).  Enter "
   365e0:	6568 706c 2022 6f74 7620 6569 2077 2061     help" to view a 
   365f0:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   36600:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......
   36610:	6f43 6d6d 6e61 2064 6f6e 2074 6572 6f63     Command not reco
   36620:	6e67 7369 6465 202e 4520 746e 7265 2720     gnised.  Enter '
   36630:	6568 706c 2027 6f74 7620 6569 2077 2061     help' to view a 
   36640:	696c 7473 6f20 2066 7661 6961 616c 6c62     list of availabl
   36650:	2065 6f63 6d6d 6e61 7364 0d2e 0d0a 000a     e commands......

00036660 <xHelpCommand>:
   36660:	6580 0003 6588 0003 7dc5 0001 0000 0000     .e...e...}......
   36670:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   36680:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   36690:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   366a0:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   366b0:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   366c0:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   366d0:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   366e0:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   366f0:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   36700:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   36710:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   36720:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   36730:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   36740:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   36750:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   36760:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   36770:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36780:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   36790:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   367a0:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   367b0:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   367c0:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   367d0:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   367e0:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   367f0:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   36800:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   36810:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   36820:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   36830:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   36840:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   36850:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   36860:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   36870:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   36880:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36890:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   368a0:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   368b0:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   368c0:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   368d0:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   368e0:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   368f0:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   36900:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   36910:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   36920:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   36930:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   36940:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   36950:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   36960:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   36970:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   36980:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   36990:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   369a0:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   369b0:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   369c0:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   369d0:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   369e0:	6365 6374 616c 7373 0021 0000 84ea 0001     ectclass!.......
   369f0:	84e2 0001 84e6 0001 84da 0001 84de 0001     ................
   36a00:	84ee 0001 84f2 0001 84f6 0001 84fa 0001     ................
   36a10:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36a20:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36a30:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   36a40:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   36a50:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   36a60:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   36a70:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   36a80:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   36a90:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   36aa0:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   36ab0:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36ac0:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   36ad0:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   36ae0:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   36af0:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   36b00:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   36b10:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   36b20:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   36b30:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   36b40:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   36b50:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   36b60:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   36b70:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   36b80:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   36b90:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   36ba0:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   36bb0:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   36bc0:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   36bd0:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   36be0:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   36bf0:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   36c00:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   36c10:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   36c20:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   36c30:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   36c40:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   36c50:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   36c60:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   36c70:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   36c80:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   36c90:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   36ca0:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   36cb0:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   36cc0:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   36cd0:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   36ce0:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   36cf0:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   36d00:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   36d10:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   36d20:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   36d30:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   36d40:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   36d50:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   36d60:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   36d70:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   36d80:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   36d90:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   36da0:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   36db0:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   36dc0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   36dd0:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   36de0:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   36df0:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   36e00:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   36e10:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   36e20:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   36e30:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   36e40:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   36e50:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   36e60:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   36e70:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   36e80:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   36e90:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   36ea0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   36eb0:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   36ec0:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   36ed0:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   36ee0:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   36ef0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   36f00:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   36f10:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   36f20:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   36f30:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   36f40:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   36f50:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   36f60:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   36f70:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   36f80:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   36f90:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   36fa0:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   36fb0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   36fc0:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   36fd0:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   36fe0:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   36ff0:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   37000:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37010:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37020:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   37030:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   37040:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   37050:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37060:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37070:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   37080:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37090:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   370a0:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   370b0:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   370c0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   370d0:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   370e0:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   370f0:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   37100:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   37110:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   37120:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   37130:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   37140:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   37150:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37160:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   37170:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   37180:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   37190:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   371a0:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   371b0:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   371c0:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   371d0:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   371e0:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   371f0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37200:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   37210:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   37220:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37230:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   37240:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37250:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   37260:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   37270:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   37280:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   37290:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   372a0:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   372b0:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   372c0:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   372d0:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   372e0:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   372f0:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   37300:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   37310:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   37320:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   37330:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37340:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   37350:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   37360:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   37370:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37380:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   37390:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   373a0:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   373b0:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   373c0:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   373d0:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   373e0:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   373f0:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   37400:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37410:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   37420:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37430:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37440:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37450:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   37460:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37470:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37480:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37490:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   374a0:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   374b0:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   374c0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   374d0:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   374e0:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   374f0:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37500:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37510:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   37520:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   37530:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   37540:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   37550:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   37560:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   37570:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   37580:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37590:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   375a0:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   375b0:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   375c0:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   375d0:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   375e0:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   375f0:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   37600:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   37610:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   37620:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   37630:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   37640:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37650:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   37660:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   37670:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   37680:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   37690:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   376a0:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   376b0:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   376c0:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   376d0:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   376e0:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   376f0:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   37700:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   37710:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   37720:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   37730:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   37740:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37750:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   37760:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   37770:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   37780:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   37790:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   377a0:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   377b0:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   377c0:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   377d0:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   377e0:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   377f0:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   37800:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   37810:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   37820:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   37830:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   37840:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   37850:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   37860:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37870:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   37880:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   37890:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   378a0:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   378b0:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   378c0:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   378d0:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   378e0:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   378f0:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   37900:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37910:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   37920:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   37930:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   37940:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   37950:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   37960:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   37970:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   37980:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   37990:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   379a0:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   379b0:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   379c0:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   379d0:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   379e0:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   379f0:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37a00:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   37a10:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   37a20:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   37a30:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37a40:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   37a50:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   37a60:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   37a70:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   37a80:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   37a90:	0000 0000 6d54 2072 7653 0063 d588 0001     ....Tmr Svc.....
   37aa0:	d588 0001 d588 0001 d616 0001 d5e0 0001     ................
   37ab0:	d60a 0001 d588 0001 d588 0001 d616 0001     ................
   37ac0:	d5e0 0001                                   ....

00037ac4 <sd_mmc_trans_units>:
   37ac4:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00037ae0 <sd_trans_multipliers>:
   37ae0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37af0:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   37b00:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   37b10:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00037b20 <mmc_trans_multipliers>:
   37b20:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   37b30:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   37b40:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   37b50:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   37b60:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   37b70:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   37b80:	746c 6320 646d 000a 000d 0000               lt cmd......

00037b8c <__FUNCTION__.17099>:
   37b8c:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   37b9c:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   37bac:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   37bbc:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   37bcc:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   37bdc:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   37bec:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   37bfc:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   37c0c:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   37c1c:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   37c2c:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   37c3c:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   37c4c:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   37c5c:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   37c6c:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   37c7c:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   37c8c:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   37c9c:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   37cac:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   37cbc:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   37ccc:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   37cdc:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   37cec:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   37cfc:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   37d0c:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   37d1c:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   37d2c:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   37d3c:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   37d4c:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   37d5c:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   37d6c:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   37d7c:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   37d8c:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   37d9c:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   37dac:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   37dbc:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   37dcc:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   37ddc:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   37dec:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   37dfc:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   37e0c:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   37e1c:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   37e2c:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   37e3c:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   37e4c:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   37e5c:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   37e6c:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   37e7c:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   37e8c:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   37e9c:	203f 6425 000a 0000 136c 0002 133c 0002     ? %d....l...<...
   37eac:	1334 0002 134c 0002 1344 0002 1364 0002     4...L...D...d...
   37ebc:	1354 0002 135c 0002                         T...\...

00037ec4 <__FUNCTION__.17967>:
   37ec4:	6968 5f66 6573 646e 0000 0000               hif_send....

00037ed0 <__FUNCTION__.17977>:
   37ed0:	6968 5f66 7369 0072                         hif_isr.

00037ed8 <__FUNCTION__.17986>:
   37ed8:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00037ee8 <__FUNCTION__.17998>:
   37ee8:	6968 5f66 6572 6563 7669 0065               hif_receive.

00037ef4 <__FUNCTION__.18014>:
   37ef4:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   37f04:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   37f14:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   37f24:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   37f34:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   37f44:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   37f54:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   37f64:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   37f74:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   37f84:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   37f94:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   37fa4:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   37fb4:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   37fc4:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   37fd4:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   37fe4:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   37ff4:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   38004:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   38014:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   38024:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   38034:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   38044:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   38054:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   38064:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   38074:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   38084:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   38094:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   380a4:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   380b4:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   380c4:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   380d4:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   380e4:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   380f4:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   38104:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   38114:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   38124:	000a 0000 3231 343a 3a31 3632 0000 0000     ....12:41:26....
   38134:	7041 2072 3033 3220 3230 0032 7244 7669     Apr 30 2022.Driv
   38144:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   38154:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   38164:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   38174:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   38184:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   38194:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   381a4:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   381b4:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   381c4:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   381d4:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   381e4:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   381f4:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   38204:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   38214:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   38224:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   38234:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   38244:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   38254:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   38264:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   38274:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   38284:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   38294:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   382a4:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   382b4:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   382c4:	4220 6675 6566 0a72 0000 0000                Buffer.....

000382d0 <__FUNCTION__.17949>:
   382d0:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

000382dc <__FUNCTION__.17978>:
   382dc:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

000382ec <__FUNCTION__.18009>:
   382ec:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   382fc:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   3830c:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   3831c:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   3832c:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   3833c:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   3834c:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   3835c:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   3836c:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   3837c:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

0003838c <__FUNCTION__.17806>:
   3838c:	6863 7069 775f 6b61 0065 0000               chip_wake...

00038398 <__FUNCTION__.17855>:
   38398:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   383a8:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   383b8:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   383c8:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   383d8:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   383e8:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   383f8:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   38408:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   38418:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   38428:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   38438:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   38448:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   38458:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   38468:	6920 696e 2074 7562 0a73 0000                init bus...

00038474 <__FUNCTION__.17853>:
   38474:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00038480 <__FUNCTION__.17860>:
   38480:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00038490 <crc7_syndrome_table>:
   38490:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   384a0:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   384b0:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   384c0:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   384d0:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   384e0:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   384f0:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   38500:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   38510:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   38520:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   38530:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   38540:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   38550:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   38560:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   38570:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   38580:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   38590:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   385a0:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   385b0:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   385c0:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   385d0:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   385e0:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   385f0:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38600:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38610:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   38620:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   38630:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   38640:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   38650:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   38660:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   38670:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   38680:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   38690:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   386a0:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   386b0:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   386c0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   386d0:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   386e0:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   386f0:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38700:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   38710:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   38720:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   38730:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38740:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   38750:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   38760:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   38770:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   38780:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   38790:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   387a0:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   387b0:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   387c0:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   387d0:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   387e0:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   387f0:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38800:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38810:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   38820:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   38830:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   38840:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   38850:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   38860:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   38870:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   38880:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   38890:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   388a0:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   388b0:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   388c0:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   388d0:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   388e0:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   388f0:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   38900:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38910:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   38920:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   38930:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   38940:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   38950:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   38960:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   38970:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38980:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   38990:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   389a0:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   389b0:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   389c0:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   389d0:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   389e0:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   389f0:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   38a00:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   38a10:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   38a20:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   38a30:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38a40:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38a50:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   38a60:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   38a70:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   38a80:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38a90:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   38aa0:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   38ab0:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   38ac0:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   38ad0:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   38ae0:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   38af0:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   38b00:	2e2e 0a2e 0000 0000 2f94 0002 2f94 0002     ........./.../..
   38b10:	3024 0002 2ee8 0002 2f2e 0002 2f50 0002     $0......./..P/..
   38b20:	2fd6 0002 2fd6 0002 3090 0002 2ebc 0002     ./.../...0......
   38b30:	30ea 0002 30ea 0002 30ea 0002 30ea 0002     .0...0...0...0..
   38b40:	2f72 0002 34f4 0002 34f4 0002 357c 0002     r/...4...4..|5..
   38b50:	3458 0002 349a 0002 34b8 0002 3532 0002     X4...4...4..25..
   38b60:	3532 0002 35de 0002 3430 0002 362e 0002     25...5..04...6..
   38b70:	362e 0002 362e 0002 362e 0002 34d6 0002     .6...6...6...4..

00038b80 <__FUNCTION__.17128>:
   38b80:	7073 5f69 6d63 0064                         spi_cmd.

00038b88 <__FUNCTION__.17135>:
   38b88:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00038b98 <__FUNCTION__.17144>:
   38b98:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00038ba4 <__FUNCTION__.17177>:
   38ba4:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   38bb4:	0000 0000                                   ....

00038bb8 <__FUNCTION__.17223>:
   38bb8:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00038bc8 <__FUNCTION__.17235>:
   38bc8:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00038bd8 <__FUNCTION__.17246>:
   38bd8:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00038be8 <__FUNCTION__.17258>:
   38be8:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

00038bf8 <__FUNCTION__.17269>:
   38bf8:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00038c04 <__FUNCTION__.17290>:
   38c04:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   38c14:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   38c24:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   38c34:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   38c44:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   38c54:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   38c64:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   38c74:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   38c84:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   38c94:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   38ca4:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   38cb4:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   38cc4:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   38cd4:	2074 2230 0000 0000                         t 0"....

00038cdc <lun_desc>:
   38cdc:	ef5d 0001 efb5 0001 f001 0001 f04d 0001     ]...........M...
   38cec:	f07d 0001 f101 0001 f191 0001 8cc4 0003     }...............
   38cfc:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   38d0c:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   38d1c:	8f12 0002 8f8c 0002 8f8c 0002 8f30 0002     ............0...
   38d2c:	8f2a 0002 8f36 0002 8f18 0002 8f3c 0002     *...6.......<...
   38d3c:	8f72 0002 9174 0002 91c4 0002 91c4 0002     r...t...........
   38d4c:	91c0 0002 9166 0002 9186 0002 9156 0002     ....f.......V...
   38d5c:	9198 0002 91aa 0002 9212 0002 9240 0002     ............@...
   38d6c:	9240 0002 923c 0002 920c 0002 9218 0002     @...<...........
   38d7c:	9206 0002 921e 0002 9224 0002               ........$...

00038d88 <tcc_modules>:
   38d88:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00038d94 <_tcc_gclk_ids>:
   38d94:	1a1a 001b                                   ....

00038d98 <_tcc_apbcmasks>:
   38d98:	0100 0000 0200 0000 0400 0000               ............

00038da4 <_tcc_maxs>:
   38da4:	ffff 00ff ffff 00ff ffff 0000               ............

00038db0 <_tcc_cc_nums>:
   38db0:	0204 0002                                   ....

00038db4 <_tcc_ow_nums>:
   38db4:	0408 0002                                   ....

00038db8 <_tcc_intflag>:
   38db8:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   38dc8:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   38dd8:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00038de8 <LfnOfs>:
   38de8:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   38df8:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   38e08:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   38e18:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   38e28:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   38e38:	5441 2020 2020 0020                         AT     .

00038e40 <excvt.4558>:
   38e40:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   38e50:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   38e60:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   38e70:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   38e80:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   38e90:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   38ea0:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   38eb0:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00038ec0 <Tbl>:
   38ec0:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   38ed0:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   38ee0:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   38ef0:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   38f00:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   38f10:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   38f20:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   38f30:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   38f40:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   38f50:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   38f60:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   38f70:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   38f80:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   38f90:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   38fa0:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   38fb0:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00038fc0 <tbl_lower.4308>:
   38fc0:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   38fd0:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   38fe0:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   38ff0:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   39000:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   39010:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   39020:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   39030:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   39040:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   39050:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   39060:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   39070:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   39080:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   39090:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   390a0:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   390b0:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   390c0:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   390d0:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   390e0:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   390f0:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   39100:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   39110:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   39120:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   39130:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   39140:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   39150:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   39160:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   39170:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   39180:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   39190:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

000391a0 <tbl_upper.4309>:
   391a0:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   391b0:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   391c0:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   391d0:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   391e0:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   391f0:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   39200:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   39210:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   39220:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   39230:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   39240:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   39250:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   39260:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   39270:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   39280:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   39290:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   392a0:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   392b0:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   392c0:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   392d0:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   392e0:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   392f0:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   39300:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   39310:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   39320:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   39330:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   39340:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   39350:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   39360:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   39370:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   39380:	e526 0002 e526 0002 e526 0002 e3b4 0002     &...&...&.......
   39390:	e526 0002 e49e 0002 e526 0002 e526 0002     &.......&...&...
   393a0:	e526 0002 e526 0002 e526 0002 e526 0002     &...&...&...&...
   393b0:	e526 0002 e518 0002 514d 4354 0000 0000     &.......MQTC....
   393c0:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   393d0:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39410:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   39428:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39468:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   39478:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   39488:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   39498:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   394a8:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   394b8:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   394c8:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   394d8:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   394e8:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   394f8:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   39508:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   39518:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   39528:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   39538:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   39548:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   39558:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   39568:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   39578:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   39588:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   39598:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   395a8:	5448 5054 002f 0000 0d31 0000 061a 0003     HTTP/...1.......
   395b8:	0614 0003 060e 0003 0608 0003 0620 0003     ............ ...
   395c8:	0602 0003 0620 0003 05fc 0003 05f6 0003     .... ...........
   395d8:	0620 0003 05f0 0003 05f0 0003 05ea 0003      ...............
   395e8:	05e4 0003 05de 0003 2000 4200 2400 4200     ......... .B.$.B
   395f8:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   39608:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   39618:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   39628:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   39638:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39648:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   39658:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39668:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   39678:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39688:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   39698:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   396a8:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   396b8:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   396c8:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   396d8:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   396e8:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   396f8:	696c 657a 4920 554d 0a0d 0000 6548 7061     lize IMU....Heap
   39708:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   39718:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   39728:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   39738:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   39748:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   39758:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   39768:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   39778:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   39788:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   39798:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   397a8:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   397b8:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   397c8:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   397d8:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   397e8:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   397f8:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   39808:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   39818:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   39828:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   39838:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   39848:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   39858:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   39868:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   39878:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   39888:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   39898:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   398a8:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   398b8:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   398c8:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   398d8:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   398e8:	0a0d 0000 281c 0003 276c 0003 276c 0003     .....(..l'..l'..
   398f8:	276a 0003 280e 0003 280e 0003 2804 0003     j'...(...(...(..
   39908:	276a 0003 280e 0003 2804 0003 280e 0003     j'...(...(...(..
   39918:	276a 0003 2814 0003 2814 0003 2814 0003     j'...(...(...(..
   39928:	28a4 0003 3228 0003 320a 0003 31c4 0003     .(..(2...2...1..
   39938:	30e2 0003 31c4 0003 31fc 0003 31c4 0003     .0...1...1...1..
   39948:	30e2 0003 320a 0003 320a 0003 31fc 0003     .0...2...2...1..
   39958:	30e2 0003 30da 0003 30da 0003 30da 0003     .0...0...0...0..
   39968:	3440 0003 3888 0003 3748 0003 3748 0003     @4...8..H7..H7..
   39978:	3744 0003 3860 0003 3860 0003 3852 0003     D7..`8..`8..R8..
   39988:	3744 0003 3860 0003 3852 0003 3860 0003     D7..`8..R8..`8..
   39998:	3744 0003 3868 0003 3868 0003 3868 0003     D7..h8..h8..h8..
   399a8:	3a6c 0003                                   l:..

000399ac <_global_impure_ptr>:
   399ac:	00d8 2000                                   ... 

000399b0 <__sf_fake_stderr>:
	...

000399d0 <__sf_fake_stdin>:
	...

000399f0 <__sf_fake_stdout>:
	...
   39a10:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   39a20:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   39a30:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   39a40:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00039a4d <_ctype_>:
   39a4d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   39a5d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   39a6d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   39a7d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   39a8d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   39a9d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   39aad:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   39abd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   39acd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00039b50 <_init>:
   39b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39b52:	46c0      	nop			; (mov r8, r8)
   39b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39b56:	bc08      	pop	{r3}
   39b58:	469e      	mov	lr, r3
   39b5a:	4770      	bx	lr

00039b5c <__init_array_start>:
   39b5c:	000120dd 	.word	0x000120dd

00039b60 <_fini>:
   39b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39b62:	46c0      	nop			; (mov r8, r8)
   39b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   39b66:	bc08      	pop	{r3}
   39b68:	469e      	mov	lr, r3
   39b6a:	4770      	bx	lr

00039b6c <__fini_array_start>:
   39b6c:	000120b5 	.word	0x000120b5
