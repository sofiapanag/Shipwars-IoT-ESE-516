
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000284cc  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002a4  20000000  0003a4cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005570  200002b0  0003a780  000302b0  2**4
                  ALLOC
  3 .stack        00002000  20005820  0003fcf0  000302b0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000302cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   001246ac  00000000  00000000  00030325  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010575  00000000  00000000  001549d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001665d  00000000  00000000  00164f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003bf0  00000000  00000000  0017b5a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003840  00000000  00000000  0017f193  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00028e79  00000000  00000000  001829d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005acd1  00000000  00000000  001ab84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c3b23  00000000  00000000  0020651d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000e2e0  00000000  00000000  002ca040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	20 78 00 20 8d b1 02 00 85 b2 02 00 85 b2 02 00      x. ............
	...
   1202c:	e1 a6 01 00 00 00 00 00 00 00 00 00 01 a8 01 00     ................
   1203c:	49 a8 01 00 85 b2 02 00 85 b2 02 00 85 b2 02 00     I...............
   1204c:	dd 72 02 00 09 68 02 00 85 b2 02 00 61 24 01 00     .r...h......a$..
   1205c:	85 b2 02 00 a5 25 01 00 81 79 02 00 99 79 02 00     .....%...y...y..
   1206c:	b1 79 02 00 c9 79 02 00 e1 79 02 00 f9 79 02 00     .y...y...y...y..
   1207c:	d5 b0 02 00 e9 b0 02 00 fd b0 02 00 1d 83 01 00     ................
   1208c:	31 83 01 00 45 83 01 00 00 00 00 00 00 00 00 00     1...E...........
   1209c:	e9 22 01 00 85 b2 02 00 25 24 01 00 85 b2 02 00     ."......%$......
   120ac:	85 b2 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	200002b0 	.word	0x200002b0
   120d4:	00000000 	.word	0x00000000
   120d8:	0003a4cc 	.word	0x0003a4cc

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	200002b4 	.word	0x200002b4
   12108:	0003a4cc 	.word	0x0003a4cc
   1210c:	0003a4cc 	.word	0x0003a4cc
   12110:	00000000 	.word	0x00000000

00012114 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1211c:	687b      	ldr	r3, [r7, #4]
   1211e:	681b      	ldr	r3, [r3, #0]
   12120:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12122:	68fb      	ldr	r3, [r7, #12]
   12124:	7e5b      	ldrb	r3, [r3, #25]
   12126:	b2db      	uxtb	r3, r3
   12128:	b25b      	sxtb	r3, r3
   1212a:	2b00      	cmp	r3, #0
   1212c:	da01      	bge.n	12132 <adc_is_syncing+0x1e>
		return true;
   1212e:	2301      	movs	r3, #1
   12130:	e000      	b.n	12134 <adc_is_syncing+0x20>
	}

	return false;
   12132:	2300      	movs	r3, #0
}
   12134:	0018      	movs	r0, r3
   12136:	46bd      	mov	sp, r7
   12138:	b004      	add	sp, #16
   1213a:	bd80      	pop	{r7, pc}

0001213c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1213c:	b580      	push	{r7, lr}
   1213e:	b084      	sub	sp, #16
   12140:	af00      	add	r7, sp, #0
   12142:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12144:	687b      	ldr	r3, [r7, #4]
   12146:	681b      	ldr	r3, [r3, #0]
   12148:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1214a:	46c0      	nop			; (mov r8, r8)
   1214c:	687b      	ldr	r3, [r7, #4]
   1214e:	0018      	movs	r0, r3
   12150:	4b0b      	ldr	r3, [pc, #44]	; (12180 <adc_start_conversion+0x44>)
   12152:	4798      	blx	r3
   12154:	1e03      	subs	r3, r0, #0
   12156:	d1f9      	bne.n	1214c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12158:	68fb      	ldr	r3, [r7, #12]
   1215a:	7b1b      	ldrb	r3, [r3, #12]
   1215c:	b2db      	uxtb	r3, r3
   1215e:	2202      	movs	r2, #2
   12160:	4313      	orrs	r3, r2
   12162:	b2da      	uxtb	r2, r3
   12164:	68fb      	ldr	r3, [r7, #12]
   12166:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12168:	46c0      	nop			; (mov r8, r8)
   1216a:	687b      	ldr	r3, [r7, #4]
   1216c:	0018      	movs	r0, r3
   1216e:	4b04      	ldr	r3, [pc, #16]	; (12180 <adc_start_conversion+0x44>)
   12170:	4798      	blx	r3
   12172:	1e03      	subs	r3, r0, #0
   12174:	d1f9      	bne.n	1216a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12176:	46c0      	nop			; (mov r8, r8)
   12178:	46bd      	mov	sp, r7
   1217a:	b004      	add	sp, #16
   1217c:	bd80      	pop	{r7, pc}
   1217e:	46c0      	nop			; (mov r8, r8)
   12180:	00012115 	.word	0x00012115

00012184 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12184:	b580      	push	{r7, lr}
   12186:	b084      	sub	sp, #16
   12188:	af00      	add	r7, sp, #0
   1218a:	6078      	str	r0, [r7, #4]
   1218c:	000a      	movs	r2, r1
   1218e:	1cfb      	adds	r3, r7, #3
   12190:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12192:	687b      	ldr	r3, [r7, #4]
   12194:	681b      	ldr	r3, [r3, #0]
   12196:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1cfa      	adds	r2, r7, #3
   1219c:	7812      	ldrb	r2, [r2, #0]
   1219e:	759a      	strb	r2, [r3, #22]
}
   121a0:	46c0      	nop			; (mov r8, r8)
   121a2:	46bd      	mov	sp, r7
   121a4:	b004      	add	sp, #16
   121a6:	bd80      	pop	{r7, pc}

000121a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   121a8:	b580      	push	{r7, lr}
   121aa:	b084      	sub	sp, #16
   121ac:	af00      	add	r7, sp, #0
   121ae:	0002      	movs	r2, r0
   121b0:	1dfb      	adds	r3, r7, #7
   121b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   121b4:	1dfb      	adds	r3, r7, #7
   121b6:	781a      	ldrb	r2, [r3, #0]
   121b8:	4b47      	ldr	r3, [pc, #284]	; (122d8 <_adc_interrupt_handler+0x130>)
   121ba:	0092      	lsls	r2, r2, #2
   121bc:	58d3      	ldr	r3, [r2, r3]
   121be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   121c0:	68fb      	ldr	r3, [r7, #12]
   121c2:	681b      	ldr	r3, [r3, #0]
   121c4:	7e1b      	ldrb	r3, [r3, #24]
   121c6:	b2da      	uxtb	r2, r3
   121c8:	68fb      	ldr	r3, [r7, #12]
   121ca:	681b      	ldr	r3, [r3, #0]
   121cc:	7ddb      	ldrb	r3, [r3, #23]
   121ce:	b2db      	uxtb	r3, r3
   121d0:	4013      	ands	r3, r2
   121d2:	b2db      	uxtb	r3, r3
   121d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   121d6:	68bb      	ldr	r3, [r7, #8]
   121d8:	2201      	movs	r2, #1
   121da:	4013      	ands	r3, r2
   121dc:	d045      	beq.n	1226a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   121de:	68fb      	ldr	r3, [r7, #12]
   121e0:	681b      	ldr	r3, [r3, #0]
   121e2:	2201      	movs	r2, #1
   121e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   121e6:	46c0      	nop			; (mov r8, r8)
   121e8:	68fb      	ldr	r3, [r7, #12]
   121ea:	0018      	movs	r0, r3
   121ec:	4b3b      	ldr	r3, [pc, #236]	; (122dc <_adc_interrupt_handler+0x134>)
   121ee:	4798      	blx	r3
   121f0:	1e03      	subs	r3, r0, #0
   121f2:	d1f9      	bne.n	121e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   121f4:	68fb      	ldr	r3, [r7, #12]
   121f6:	695b      	ldr	r3, [r3, #20]
   121f8:	1c99      	adds	r1, r3, #2
   121fa:	68fa      	ldr	r2, [r7, #12]
   121fc:	6151      	str	r1, [r2, #20]
   121fe:	68fa      	ldr	r2, [r7, #12]
   12200:	6812      	ldr	r2, [r2, #0]
   12202:	8b52      	ldrh	r2, [r2, #26]
   12204:	b292      	uxth	r2, r2
   12206:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12208:	68fb      	ldr	r3, [r7, #12]
   1220a:	8b1b      	ldrh	r3, [r3, #24]
   1220c:	b29b      	uxth	r3, r3
   1220e:	3b01      	subs	r3, #1
   12210:	b29b      	uxth	r3, r3
   12212:	68fa      	ldr	r2, [r7, #12]
   12214:	1c19      	adds	r1, r3, #0
   12216:	8311      	strh	r1, [r2, #24]
   12218:	2b00      	cmp	r3, #0
   1221a:	d008      	beq.n	1222e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1221c:	68fb      	ldr	r3, [r7, #12]
   1221e:	7f5b      	ldrb	r3, [r3, #29]
   12220:	2b00      	cmp	r3, #0
   12222:	d022      	beq.n	1226a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12224:	68fb      	ldr	r3, [r7, #12]
   12226:	0018      	movs	r0, r3
   12228:	4b2d      	ldr	r3, [pc, #180]	; (122e0 <_adc_interrupt_handler+0x138>)
   1222a:	4798      	blx	r3
   1222c:	e01d      	b.n	1226a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1222e:	68fb      	ldr	r3, [r7, #12]
   12230:	2101      	movs	r1, #1
   12232:	0018      	movs	r0, r3
   12234:	4b2b      	ldr	r3, [pc, #172]	; (122e4 <_adc_interrupt_handler+0x13c>)
   12236:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	7f1b      	ldrb	r3, [r3, #28]
   1223c:	b2db      	uxtb	r3, r3
   1223e:	2b05      	cmp	r3, #5
   12240:	d113      	bne.n	1226a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12242:	68fb      	ldr	r3, [r7, #12]
   12244:	2200      	movs	r2, #0
   12246:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12248:	68fb      	ldr	r3, [r7, #12]
   1224a:	7edb      	ldrb	r3, [r3, #27]
   1224c:	001a      	movs	r2, r3
   1224e:	2301      	movs	r3, #1
   12250:	4013      	ands	r3, r2
   12252:	d00a      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12254:	68fb      	ldr	r3, [r7, #12]
   12256:	7e9b      	ldrb	r3, [r3, #26]
   12258:	001a      	movs	r2, r3
   1225a:	2301      	movs	r3, #1
   1225c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1225e:	d004      	beq.n	1226a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12260:	68fb      	ldr	r3, [r7, #12]
   12262:	689b      	ldr	r3, [r3, #8]
   12264:	68fa      	ldr	r2, [r7, #12]
   12266:	0010      	movs	r0, r2
   12268:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	2204      	movs	r2, #4
   1226e:	4013      	ands	r3, r2
   12270:	d014      	beq.n	1229c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12272:	68fb      	ldr	r3, [r7, #12]
   12274:	681b      	ldr	r3, [r3, #0]
   12276:	2204      	movs	r2, #4
   12278:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1227a:	68fb      	ldr	r3, [r7, #12]
   1227c:	7edb      	ldrb	r3, [r3, #27]
   1227e:	001a      	movs	r2, r3
   12280:	2302      	movs	r3, #2
   12282:	4013      	ands	r3, r2
   12284:	d00a      	beq.n	1229c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12286:	68fb      	ldr	r3, [r7, #12]
   12288:	7e9b      	ldrb	r3, [r3, #26]
   1228a:	001a      	movs	r2, r3
   1228c:	2302      	movs	r3, #2
   1228e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   12290:	d004      	beq.n	1229c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   12292:	68fb      	ldr	r3, [r7, #12]
   12294:	68db      	ldr	r3, [r3, #12]
   12296:	68fa      	ldr	r2, [r7, #12]
   12298:	0010      	movs	r0, r2
   1229a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1229c:	68bb      	ldr	r3, [r7, #8]
   1229e:	2202      	movs	r2, #2
   122a0:	4013      	ands	r3, r2
   122a2:	d014      	beq.n	122ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   122a4:	68fb      	ldr	r3, [r7, #12]
   122a6:	681b      	ldr	r3, [r3, #0]
   122a8:	2202      	movs	r2, #2
   122aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122ac:	68fb      	ldr	r3, [r7, #12]
   122ae:	7edb      	ldrb	r3, [r3, #27]
   122b0:	001a      	movs	r2, r3
   122b2:	2304      	movs	r3, #4
   122b4:	4013      	ands	r3, r2
   122b6:	d00a      	beq.n	122ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   122b8:	68fb      	ldr	r3, [r7, #12]
   122ba:	7e9b      	ldrb	r3, [r3, #26]
   122bc:	001a      	movs	r2, r3
   122be:	2304      	movs	r3, #4
   122c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   122c2:	d004      	beq.n	122ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   122c4:	68fb      	ldr	r3, [r7, #12]
   122c6:	691b      	ldr	r3, [r3, #16]
   122c8:	68fa      	ldr	r2, [r7, #12]
   122ca:	0010      	movs	r0, r2
   122cc:	4798      	blx	r3
		}
	}
}
   122ce:	46c0      	nop			; (mov r8, r8)
   122d0:	46bd      	mov	sp, r7
   122d2:	b004      	add	sp, #16
   122d4:	bd80      	pop	{r7, pc}
   122d6:	46c0      	nop			; (mov r8, r8)
   122d8:	20004320 	.word	0x20004320
   122dc:	00012115 	.word	0x00012115
   122e0:	0001213d 	.word	0x0001213d
   122e4:	00012185 	.word	0x00012185

000122e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   122e8:	b580      	push	{r7, lr}
   122ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   122ec:	2000      	movs	r0, #0
   122ee:	4b02      	ldr	r3, [pc, #8]	; (122f8 <ADC_Handler+0x10>)
   122f0:	4798      	blx	r3
}
   122f2:	46c0      	nop			; (mov r8, r8)
   122f4:	46bd      	mov	sp, r7
   122f6:	bd80      	pop	{r7, pc}
   122f8:	000121a9 	.word	0x000121a9

000122fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	0002      	movs	r2, r0
   12304:	1dfb      	adds	r3, r7, #7
   12306:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12308:	4a07      	ldr	r2, [pc, #28]	; (12328 <system_interrupt_disable+0x2c>)
   1230a:	1dfb      	adds	r3, r7, #7
   1230c:	781b      	ldrb	r3, [r3, #0]
   1230e:	0019      	movs	r1, r3
   12310:	231f      	movs	r3, #31
   12312:	400b      	ands	r3, r1
   12314:	2101      	movs	r1, #1
   12316:	4099      	lsls	r1, r3
   12318:	000b      	movs	r3, r1
   1231a:	0019      	movs	r1, r3
   1231c:	2380      	movs	r3, #128	; 0x80
   1231e:	50d1      	str	r1, [r2, r3]
}
   12320:	46c0      	nop			; (mov r8, r8)
   12322:	46bd      	mov	sp, r7
   12324:	b002      	add	sp, #8
   12326:	bd80      	pop	{r7, pc}
   12328:	e000e100 	.word	0xe000e100

0001232c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1232c:	b580      	push	{r7, lr}
   1232e:	b084      	sub	sp, #16
   12330:	af00      	add	r7, sp, #0
   12332:	0002      	movs	r2, r0
   12334:	1dfb      	adds	r3, r7, #7
   12336:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12338:	1dfb      	adds	r3, r7, #7
   1233a:	781a      	ldrb	r2, [r3, #0]
   1233c:	4b37      	ldr	r3, [pc, #220]	; (1241c <_dac_interrupt_handler+0xf0>)
   1233e:	0092      	lsls	r2, r2, #2
   12340:	58d3      	ldr	r3, [r2, r3]
   12342:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12344:	68fb      	ldr	r3, [r7, #12]
   12346:	681b      	ldr	r3, [r3, #0]
   12348:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1234a:	68bb      	ldr	r3, [r7, #8]
   1234c:	799b      	ldrb	r3, [r3, #6]
   1234e:	b2db      	uxtb	r3, r3
   12350:	001a      	movs	r2, r3
   12352:	2301      	movs	r3, #1
   12354:	4013      	ands	r3, r2
   12356:	d00e      	beq.n	12376 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12358:	68bb      	ldr	r3, [r7, #8]
   1235a:	2201      	movs	r2, #1
   1235c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1235e:	68fb      	ldr	r3, [r7, #12]
   12360:	3314      	adds	r3, #20
   12362:	2b00      	cmp	r3, #0
   12364:	d007      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12366:	68fb      	ldr	r3, [r7, #12]
   12368:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1236a:	2b00      	cmp	r3, #0
   1236c:	d003      	beq.n	12376 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1236e:	68fb      	ldr	r3, [r7, #12]
   12370:	699b      	ldr	r3, [r3, #24]
   12372:	2000      	movs	r0, #0
   12374:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12376:	68bb      	ldr	r3, [r7, #8]
   12378:	799b      	ldrb	r3, [r3, #6]
   1237a:	b2db      	uxtb	r3, r3
   1237c:	001a      	movs	r2, r3
   1237e:	2302      	movs	r3, #2
   12380:	4013      	ands	r3, r2
   12382:	d047      	beq.n	12414 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12384:	68bb      	ldr	r3, [r7, #8]
   12386:	2202      	movs	r2, #2
   12388:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1238a:	68fb      	ldr	r3, [r7, #12]
   1238c:	899b      	ldrh	r3, [r3, #12]
   1238e:	b29b      	uxth	r3, r3
   12390:	2b00      	cmp	r3, #0
   12392:	d033      	beq.n	123fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   12394:	68fb      	ldr	r3, [r7, #12]
   12396:	689a      	ldr	r2, [r3, #8]
   12398:	68fb      	ldr	r3, [r7, #12]
   1239a:	89db      	ldrh	r3, [r3, #14]
   1239c:	b29b      	uxth	r3, r3
   1239e:	1c59      	adds	r1, r3, #1
   123a0:	b288      	uxth	r0, r1
   123a2:	68f9      	ldr	r1, [r7, #12]
   123a4:	81c8      	strh	r0, [r1, #14]
   123a6:	005b      	lsls	r3, r3, #1
   123a8:	18d3      	adds	r3, r2, r3
   123aa:	881b      	ldrh	r3, [r3, #0]
   123ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   123ae:	68bb      	ldr	r3, [r7, #8]
   123b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   123b2:	68fb      	ldr	r3, [r7, #12]
   123b4:	899b      	ldrh	r3, [r3, #12]
   123b6:	b29b      	uxth	r3, r3
   123b8:	3b01      	subs	r3, #1
   123ba:	b29a      	uxth	r2, r3
   123bc:	68fb      	ldr	r3, [r7, #12]
   123be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   123c0:	68fb      	ldr	r3, [r7, #12]
   123c2:	899b      	ldrh	r3, [r3, #12]
   123c4:	b29b      	uxth	r3, r3
   123c6:	2b00      	cmp	r3, #0
   123c8:	d118      	bne.n	123fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   123ca:	68fb      	ldr	r3, [r7, #12]
   123cc:	2220      	movs	r2, #32
   123ce:	2100      	movs	r1, #0
   123d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   123d2:	68bb      	ldr	r3, [r7, #8]
   123d4:	2202      	movs	r2, #2
   123d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   123d8:	68bb      	ldr	r3, [r7, #8]
   123da:	2202      	movs	r2, #2
   123dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   123de:	2019      	movs	r0, #25
   123e0:	4b0f      	ldr	r3, [pc, #60]	; (12420 <_dac_interrupt_handler+0xf4>)
   123e2:	4798      	blx	r3

				if ((module->callback) &&
   123e4:	68fb      	ldr	r3, [r7, #12]
   123e6:	3314      	adds	r3, #20
   123e8:	2b00      	cmp	r3, #0
   123ea:	d007      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   123ec:	68fb      	ldr	r3, [r7, #12]
   123ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   123f0:	2b00      	cmp	r3, #0
   123f2:	d003      	beq.n	123fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   123f4:	68fb      	ldr	r3, [r7, #12]
   123f6:	69db      	ldr	r3, [r3, #28]
   123f8:	2000      	movs	r0, #0
   123fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   123fc:	68fb      	ldr	r3, [r7, #12]
   123fe:	3314      	adds	r3, #20
   12400:	2b00      	cmp	r3, #0
   12402:	d007      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12408:	2b00      	cmp	r3, #0
   1240a:	d003      	beq.n	12414 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1240c:	68fb      	ldr	r3, [r7, #12]
   1240e:	695b      	ldr	r3, [r3, #20]
   12410:	2000      	movs	r0, #0
   12412:	4798      	blx	r3
		}
	}
}
   12414:	46c0      	nop			; (mov r8, r8)
   12416:	46bd      	mov	sp, r7
   12418:	b004      	add	sp, #16
   1241a:	bd80      	pop	{r7, pc}
   1241c:	20004324 	.word	0x20004324
   12420:	000122fd 	.word	0x000122fd

00012424 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12424:	b580      	push	{r7, lr}
   12426:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12428:	2000      	movs	r0, #0
   1242a:	4b02      	ldr	r3, [pc, #8]	; (12434 <DAC_Handler+0x10>)
   1242c:	4798      	blx	r3
}
   1242e:	46c0      	nop			; (mov r8, r8)
   12430:	46bd      	mov	sp, r7
   12432:	bd80      	pop	{r7, pc}
   12434:	0001232d 	.word	0x0001232d

00012438 <system_interrupt_enter_critical_section>:
{
   12438:	b580      	push	{r7, lr}
   1243a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1243c:	4b02      	ldr	r3, [pc, #8]	; (12448 <system_interrupt_enter_critical_section+0x10>)
   1243e:	4798      	blx	r3
}
   12440:	46c0      	nop			; (mov r8, r8)
   12442:	46bd      	mov	sp, r7
   12444:	bd80      	pop	{r7, pc}
   12446:	46c0      	nop			; (mov r8, r8)
   12448:	00026469 	.word	0x00026469

0001244c <system_interrupt_leave_critical_section>:
{
   1244c:	b580      	push	{r7, lr}
   1244e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12450:	4b02      	ldr	r3, [pc, #8]	; (1245c <system_interrupt_leave_critical_section+0x10>)
   12452:	4798      	blx	r3
}
   12454:	46c0      	nop			; (mov r8, r8)
   12456:	46bd      	mov	sp, r7
   12458:	bd80      	pop	{r7, pc}
   1245a:	46c0      	nop			; (mov r8, r8)
   1245c:	000264bd 	.word	0x000264bd

00012460 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12460:	b580      	push	{r7, lr}
   12462:	b086      	sub	sp, #24
   12464:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12466:	4b49      	ldr	r3, [pc, #292]	; (1258c <DMAC_Handler+0x12c>)
   12468:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1246a:	4b49      	ldr	r3, [pc, #292]	; (12590 <DMAC_Handler+0x130>)
   1246c:	8c1b      	ldrh	r3, [r3, #32]
   1246e:	b29b      	uxth	r3, r3
   12470:	b2da      	uxtb	r2, r3
   12472:	2317      	movs	r3, #23
   12474:	18fb      	adds	r3, r7, r3
   12476:	210f      	movs	r1, #15
   12478:	400a      	ands	r2, r1
   1247a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1247c:	2317      	movs	r3, #23
   1247e:	18fb      	adds	r3, r7, r3
   12480:	781a      	ldrb	r2, [r3, #0]
   12482:	4b44      	ldr	r3, [pc, #272]	; (12594 <DMAC_Handler+0x134>)
   12484:	0092      	lsls	r2, r2, #2
   12486:	58d3      	ldr	r3, [r2, r3]
   12488:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1248a:	4a41      	ldr	r2, [pc, #260]	; (12590 <DMAC_Handler+0x130>)
   1248c:	693b      	ldr	r3, [r7, #16]
   1248e:	781b      	ldrb	r3, [r3, #0]
   12490:	210f      	movs	r1, #15
   12492:	400b      	ands	r3, r1
   12494:	b2d9      	uxtb	r1, r3
   12496:	233f      	movs	r3, #63	; 0x3f
   12498:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1249a:	493d      	ldr	r1, [pc, #244]	; (12590 <DMAC_Handler+0x130>)
   1249c:	230f      	movs	r3, #15
   1249e:	18fb      	adds	r3, r7, r3
   124a0:	224e      	movs	r2, #78	; 0x4e
   124a2:	5c8a      	ldrb	r2, [r1, r2]
   124a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   124a6:	693b      	ldr	r3, [r7, #16]
   124a8:	781b      	ldrb	r3, [r3, #0]
   124aa:	4a3b      	ldr	r2, [pc, #236]	; (12598 <DMAC_Handler+0x138>)
   124ac:	011b      	lsls	r3, r3, #4
   124ae:	18d3      	adds	r3, r2, r3
   124b0:	3302      	adds	r3, #2
   124b2:	881b      	ldrh	r3, [r3, #0]
   124b4:	b29b      	uxth	r3, r3
   124b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   124b8:	693b      	ldr	r3, [r7, #16]
   124ba:	781b      	ldrb	r3, [r3, #0]
   124bc:	4a37      	ldr	r2, [pc, #220]	; (1259c <DMAC_Handler+0x13c>)
   124be:	011b      	lsls	r3, r3, #4
   124c0:	18d3      	adds	r3, r2, r3
   124c2:	3302      	adds	r3, #2
   124c4:	881b      	ldrh	r3, [r3, #0]
   124c6:	b29b      	uxth	r3, r3
   124c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   124ca:	68ba      	ldr	r2, [r7, #8]
   124cc:	687b      	ldr	r3, [r7, #4]
   124ce:	1ad2      	subs	r2, r2, r3
   124d0:	693b      	ldr	r3, [r7, #16]
   124d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   124d4:	230f      	movs	r3, #15
   124d6:	18fb      	adds	r3, r7, r3
   124d8:	781b      	ldrb	r3, [r3, #0]
   124da:	2201      	movs	r2, #1
   124dc:	4013      	ands	r3, r2
   124de:	d016      	beq.n	1250e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   124e0:	4a2b      	ldr	r2, [pc, #172]	; (12590 <DMAC_Handler+0x130>)
   124e2:	234e      	movs	r3, #78	; 0x4e
   124e4:	2101      	movs	r1, #1
   124e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   124e8:	693b      	ldr	r3, [r7, #16]
   124ea:	2210      	movs	r2, #16
   124ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124ee:	693b      	ldr	r3, [r7, #16]
   124f0:	7c1b      	ldrb	r3, [r3, #16]
   124f2:	001a      	movs	r2, r3
   124f4:	2301      	movs	r3, #1
   124f6:	4013      	ands	r3, r2
   124f8:	d042      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   124fa:	693b      	ldr	r3, [r7, #16]
   124fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   124fe:	2b00      	cmp	r3, #0
   12500:	d03e      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12502:	693b      	ldr	r3, [r7, #16]
   12504:	685b      	ldr	r3, [r3, #4]
   12506:	693a      	ldr	r2, [r7, #16]
   12508:	0010      	movs	r0, r2
   1250a:	4798      	blx	r3
   1250c:	e038      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1250e:	230f      	movs	r3, #15
   12510:	18fb      	adds	r3, r7, r3
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	2202      	movs	r2, #2
   12516:	4013      	ands	r3, r2
   12518:	d016      	beq.n	12548 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1251a:	4a1d      	ldr	r2, [pc, #116]	; (12590 <DMAC_Handler+0x130>)
   1251c:	234e      	movs	r3, #78	; 0x4e
   1251e:	2102      	movs	r1, #2
   12520:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12522:	693b      	ldr	r3, [r7, #16]
   12524:	2200      	movs	r2, #0
   12526:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12528:	693b      	ldr	r3, [r7, #16]
   1252a:	7c1b      	ldrb	r3, [r3, #16]
   1252c:	001a      	movs	r2, r3
   1252e:	2302      	movs	r3, #2
   12530:	4013      	ands	r3, r2
   12532:	d025      	beq.n	12580 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12534:	693b      	ldr	r3, [r7, #16]
   12536:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12538:	2b00      	cmp	r3, #0
   1253a:	d021      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1253c:	693b      	ldr	r3, [r7, #16]
   1253e:	689b      	ldr	r3, [r3, #8]
   12540:	693a      	ldr	r2, [r7, #16]
   12542:	0010      	movs	r0, r2
   12544:	4798      	blx	r3
   12546:	e01b      	b.n	12580 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12548:	230f      	movs	r3, #15
   1254a:	18fb      	adds	r3, r7, r3
   1254c:	781b      	ldrb	r3, [r3, #0]
   1254e:	2204      	movs	r2, #4
   12550:	4013      	ands	r3, r2
   12552:	d015      	beq.n	12580 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12554:	4a0e      	ldr	r2, [pc, #56]	; (12590 <DMAC_Handler+0x130>)
   12556:	234e      	movs	r3, #78	; 0x4e
   12558:	2104      	movs	r1, #4
   1255a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1255c:	693b      	ldr	r3, [r7, #16]
   1255e:	2206      	movs	r2, #6
   12560:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12562:	693b      	ldr	r3, [r7, #16]
   12564:	7c1b      	ldrb	r3, [r3, #16]
   12566:	001a      	movs	r2, r3
   12568:	2304      	movs	r3, #4
   1256a:	4013      	ands	r3, r2
   1256c:	d008      	beq.n	12580 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1256e:	693b      	ldr	r3, [r7, #16]
   12570:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12572:	2b00      	cmp	r3, #0
   12574:	d004      	beq.n	12580 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12576:	693b      	ldr	r3, [r7, #16]
   12578:	68db      	ldr	r3, [r3, #12]
   1257a:	693a      	ldr	r2, [r7, #16]
   1257c:	0010      	movs	r0, r2
   1257e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12580:	4b07      	ldr	r3, [pc, #28]	; (125a0 <DMAC_Handler+0x140>)
   12582:	4798      	blx	r3
}
   12584:	46c0      	nop			; (mov r8, r8)
   12586:	46bd      	mov	sp, r7
   12588:	b006      	add	sp, #24
   1258a:	bd80      	pop	{r7, pc}
   1258c:	00012439 	.word	0x00012439
   12590:	41004800 	.word	0x41004800
   12594:	20000320 	.word	0x20000320
   12598:	20004330 	.word	0x20004330
   1259c:	200002d0 	.word	0x200002d0
   125a0:	0001244d 	.word	0x0001244d

000125a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   125a4:	b580      	push	{r7, lr}
   125a6:	b082      	sub	sp, #8
   125a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   125aa:	4b15      	ldr	r3, [pc, #84]	; (12600 <EVSYS_Handler+0x5c>)
   125ac:	691b      	ldr	r3, [r3, #16]
   125ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   125b0:	4b14      	ldr	r3, [pc, #80]	; (12604 <EVSYS_Handler+0x60>)
   125b2:	699b      	ldr	r3, [r3, #24]
   125b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   125b6:	4b12      	ldr	r3, [pc, #72]	; (12600 <EVSYS_Handler+0x5c>)
   125b8:	689a      	ldr	r2, [r3, #8]
   125ba:	683b      	ldr	r3, [r7, #0]
   125bc:	431a      	orrs	r2, r3
   125be:	4b10      	ldr	r3, [pc, #64]	; (12600 <EVSYS_Handler+0x5c>)
   125c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   125c2:	4b10      	ldr	r3, [pc, #64]	; (12604 <EVSYS_Handler+0x60>)
   125c4:	4a10      	ldr	r2, [pc, #64]	; (12608 <EVSYS_Handler+0x64>)
   125c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   125c8:	e008      	b.n	125dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   125ca:	687b      	ldr	r3, [r7, #4]
   125cc:	685a      	ldr	r2, [r3, #4]
   125ce:	687b      	ldr	r3, [r7, #4]
   125d0:	681b      	ldr	r3, [r3, #0]
   125d2:	0018      	movs	r0, r3
   125d4:	4790      	blx	r2
		current_hook = current_hook->next;
   125d6:	687b      	ldr	r3, [r7, #4]
   125d8:	689b      	ldr	r3, [r3, #8]
   125da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	2b00      	cmp	r3, #0
   125e0:	d1f3      	bne.n	125ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   125e2:	4b07      	ldr	r3, [pc, #28]	; (12600 <EVSYS_Handler+0x5c>)
   125e4:	68db      	ldr	r3, [r3, #12]
   125e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <EVSYS_Handler+0x5c>)
   125ea:	689b      	ldr	r3, [r3, #8]
   125ec:	683a      	ldr	r2, [r7, #0]
   125ee:	43d2      	mvns	r2, r2
   125f0:	401a      	ands	r2, r3
   125f2:	4b03      	ldr	r3, [pc, #12]	; (12600 <EVSYS_Handler+0x5c>)
   125f4:	609a      	str	r2, [r3, #8]
}
   125f6:	46c0      	nop			; (mov r8, r8)
   125f8:	46bd      	mov	sp, r7
   125fa:	b002      	add	sp, #8
   125fc:	bd80      	pop	{r7, pc}
   125fe:	46c0      	nop			; (mov r8, r8)
   12600:	20000000 	.word	0x20000000
   12604:	42000400 	.word	0x42000400
   12608:	0f0fffff 	.word	0x0f0fffff

0001260c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1260c:	b580      	push	{r7, lr}
   1260e:	b082      	sub	sp, #8
   12610:	af00      	add	r7, sp, #0
   12612:	0002      	movs	r2, r0
   12614:	6039      	str	r1, [r7, #0]
   12616:	1dfb      	adds	r3, r7, #7
   12618:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1261a:	1dfb      	adds	r3, r7, #7
   1261c:	781b      	ldrb	r3, [r3, #0]
   1261e:	2b01      	cmp	r3, #1
   12620:	d00a      	beq.n	12638 <system_apb_clock_set_mask+0x2c>
   12622:	2b02      	cmp	r3, #2
   12624:	d00f      	beq.n	12646 <system_apb_clock_set_mask+0x3a>
   12626:	2b00      	cmp	r3, #0
   12628:	d114      	bne.n	12654 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1262a:	4b0e      	ldr	r3, [pc, #56]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262c:	4a0d      	ldr	r2, [pc, #52]	; (12664 <system_apb_clock_set_mask+0x58>)
   1262e:	6991      	ldr	r1, [r2, #24]
   12630:	683a      	ldr	r2, [r7, #0]
   12632:	430a      	orrs	r2, r1
   12634:	619a      	str	r2, [r3, #24]
			break;
   12636:	e00f      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12638:	4b0a      	ldr	r3, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263a:	4a0a      	ldr	r2, [pc, #40]	; (12664 <system_apb_clock_set_mask+0x58>)
   1263c:	69d1      	ldr	r1, [r2, #28]
   1263e:	683a      	ldr	r2, [r7, #0]
   12640:	430a      	orrs	r2, r1
   12642:	61da      	str	r2, [r3, #28]
			break;
   12644:	e008      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12646:	4b07      	ldr	r3, [pc, #28]	; (12664 <system_apb_clock_set_mask+0x58>)
   12648:	4a06      	ldr	r2, [pc, #24]	; (12664 <system_apb_clock_set_mask+0x58>)
   1264a:	6a11      	ldr	r1, [r2, #32]
   1264c:	683a      	ldr	r2, [r7, #0]
   1264e:	430a      	orrs	r2, r1
   12650:	621a      	str	r2, [r3, #32]
			break;
   12652:	e001      	b.n	12658 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12654:	2317      	movs	r3, #23
   12656:	e000      	b.n	1265a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12658:	2300      	movs	r3, #0
}
   1265a:	0018      	movs	r0, r3
   1265c:	46bd      	mov	sp, r7
   1265e:	b002      	add	sp, #8
   12660:	bd80      	pop	{r7, pc}
   12662:	46c0      	nop			; (mov r8, r8)
   12664:	40000400 	.word	0x40000400

00012668 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12668:	b580      	push	{r7, lr}
   1266a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1266c:	2102      	movs	r1, #2
   1266e:	2002      	movs	r0, #2
   12670:	4b07      	ldr	r3, [pc, #28]	; (12690 <_system_events_init+0x28>)
   12672:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12674:	4b07      	ldr	r3, [pc, #28]	; (12694 <_system_events_init+0x2c>)
   12676:	2201      	movs	r2, #1
   12678:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1267a:	46c0      	nop			; (mov r8, r8)
   1267c:	4b05      	ldr	r3, [pc, #20]	; (12694 <_system_events_init+0x2c>)
   1267e:	781b      	ldrb	r3, [r3, #0]
   12680:	b2db      	uxtb	r3, r3
   12682:	001a      	movs	r2, r3
   12684:	2301      	movs	r3, #1
   12686:	4013      	ands	r3, r2
   12688:	d1f8      	bne.n	1267c <_system_events_init+0x14>
	}
}
   1268a:	46c0      	nop			; (mov r8, r8)
   1268c:	46bd      	mov	sp, r7
   1268e:	bd80      	pop	{r7, pc}
   12690:	0001260d 	.word	0x0001260d
   12694:	42000400 	.word	0x42000400

00012698 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   12698:	b580      	push	{r7, lr}
   1269a:	b084      	sub	sp, #16
   1269c:	af00      	add	r7, sp, #0
   1269e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   126a0:	687b      	ldr	r3, [r7, #4]
   126a2:	681b      	ldr	r3, [r3, #0]
   126a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   126a6:	68fb      	ldr	r3, [r7, #12]
   126a8:	69db      	ldr	r3, [r3, #28]
   126aa:	2207      	movs	r2, #7
   126ac:	4013      	ands	r3, r2
   126ae:	1e5a      	subs	r2, r3, #1
   126b0:	4193      	sbcs	r3, r2
   126b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   126b4:	0018      	movs	r0, r3
   126b6:	46bd      	mov	sp, r7
   126b8:	b004      	add	sp, #16
   126ba:	bd80      	pop	{r7, pc}

000126bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   126bc:	b580      	push	{r7, lr}
   126be:	b082      	sub	sp, #8
   126c0:	af00      	add	r7, sp, #0
   126c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   126c4:	46c0      	nop			; (mov r8, r8)
   126c6:	687b      	ldr	r3, [r7, #4]
   126c8:	0018      	movs	r0, r3
   126ca:	4b04      	ldr	r3, [pc, #16]	; (126dc <_i2c_master_wait_for_sync+0x20>)
   126cc:	4798      	blx	r3
   126ce:	1e03      	subs	r3, r0, #0
   126d0:	d1f9      	bne.n	126c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   126d2:	46c0      	nop			; (mov r8, r8)
   126d4:	46bd      	mov	sp, r7
   126d6:	b002      	add	sp, #8
   126d8:	bd80      	pop	{r7, pc}
   126da:	46c0      	nop			; (mov r8, r8)
   126dc:	00012699 	.word	0x00012699

000126e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   126e0:	b580      	push	{r7, lr}
   126e2:	b084      	sub	sp, #16
   126e4:	af00      	add	r7, sp, #0
   126e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   126e8:	687b      	ldr	r3, [r7, #4]
   126ea:	681b      	ldr	r3, [r3, #0]
   126ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   126ee:	68fb      	ldr	r3, [r7, #12]
   126f0:	681b      	ldr	r3, [r3, #0]
   126f2:	011b      	lsls	r3, r3, #4
   126f4:	0fdb      	lsrs	r3, r3, #31
   126f6:	b2db      	uxtb	r3, r3
   126f8:	001a      	movs	r2, r3
   126fa:	230b      	movs	r3, #11
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1e51      	subs	r1, r2, #1
   12700:	418a      	sbcs	r2, r1
   12702:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12704:	2308      	movs	r3, #8
   12706:	18fb      	adds	r3, r7, r3
   12708:	687a      	ldr	r2, [r7, #4]
   1270a:	8b52      	ldrh	r2, [r2, #26]
   1270c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1270e:	687b      	ldr	r3, [r7, #4]
   12710:	8b9b      	ldrh	r3, [r3, #28]
   12712:	b29a      	uxth	r2, r3
   12714:	2308      	movs	r3, #8
   12716:	18fb      	adds	r3, r7, r3
   12718:	2108      	movs	r1, #8
   1271a:	1879      	adds	r1, r7, r1
   1271c:	8809      	ldrh	r1, [r1, #0]
   1271e:	1a8a      	subs	r2, r1, r2
   12720:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12722:	687b      	ldr	r3, [r7, #4]
   12724:	8b9b      	ldrh	r3, [r3, #28]
   12726:	b29b      	uxth	r3, r3
   12728:	3b01      	subs	r3, #1
   1272a:	b29a      	uxth	r2, r3
   1272c:	687b      	ldr	r3, [r7, #4]
   1272e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12730:	230b      	movs	r3, #11
   12732:	18fb      	adds	r3, r7, r3
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	2b00      	cmp	r3, #0
   12738:	d010      	beq.n	1275c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1273a:	687b      	ldr	r3, [r7, #4]
   1273c:	7adb      	ldrb	r3, [r3, #11]
   1273e:	2b00      	cmp	r3, #0
   12740:	d01c      	beq.n	1277c <_i2c_master_read+0x9c>
   12742:	687b      	ldr	r3, [r7, #4]
   12744:	8b9b      	ldrh	r3, [r3, #28]
   12746:	b29b      	uxth	r3, r3
   12748:	2b01      	cmp	r3, #1
   1274a:	d117      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1274c:	68fb      	ldr	r3, [r7, #12]
   1274e:	685b      	ldr	r3, [r3, #4]
   12750:	2280      	movs	r2, #128	; 0x80
   12752:	02d2      	lsls	r2, r2, #11
   12754:	431a      	orrs	r2, r3
   12756:	68fb      	ldr	r3, [r7, #12]
   12758:	605a      	str	r2, [r3, #4]
   1275a:	e00f      	b.n	1277c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1275c:	687b      	ldr	r3, [r7, #4]
   1275e:	7adb      	ldrb	r3, [r3, #11]
   12760:	2b00      	cmp	r3, #0
   12762:	d00b      	beq.n	1277c <_i2c_master_read+0x9c>
   12764:	687b      	ldr	r3, [r7, #4]
   12766:	8b9b      	ldrh	r3, [r3, #28]
   12768:	b29b      	uxth	r3, r3
   1276a:	2b00      	cmp	r3, #0
   1276c:	d106      	bne.n	1277c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1276e:	68fb      	ldr	r3, [r7, #12]
   12770:	685b      	ldr	r3, [r3, #4]
   12772:	2280      	movs	r2, #128	; 0x80
   12774:	02d2      	lsls	r2, r2, #11
   12776:	431a      	orrs	r2, r3
   12778:	68fb      	ldr	r3, [r7, #12]
   1277a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1277c:	687b      	ldr	r3, [r7, #4]
   1277e:	8b9b      	ldrh	r3, [r3, #28]
   12780:	b29b      	uxth	r3, r3
   12782:	2b00      	cmp	r3, #0
   12784:	d10e      	bne.n	127a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12786:	687b      	ldr	r3, [r7, #4]
   12788:	7a9b      	ldrb	r3, [r3, #10]
   1278a:	2b00      	cmp	r3, #0
   1278c:	d00a      	beq.n	127a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	0018      	movs	r0, r3
   12792:	4b0e      	ldr	r3, [pc, #56]	; (127cc <_i2c_master_read+0xec>)
   12794:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12796:	68fb      	ldr	r3, [r7, #12]
   12798:	685b      	ldr	r3, [r3, #4]
   1279a:	22c0      	movs	r2, #192	; 0xc0
   1279c:	0292      	lsls	r2, r2, #10
   1279e:	431a      	orrs	r2, r3
   127a0:	68fb      	ldr	r3, [r7, #12]
   127a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   127a4:	687b      	ldr	r3, [r7, #4]
   127a6:	0018      	movs	r0, r3
   127a8:	4b08      	ldr	r3, [pc, #32]	; (127cc <_i2c_master_read+0xec>)
   127aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   127ac:	687b      	ldr	r3, [r7, #4]
   127ae:	6a1a      	ldr	r2, [r3, #32]
   127b0:	2308      	movs	r3, #8
   127b2:	18fb      	adds	r3, r7, r3
   127b4:	881b      	ldrh	r3, [r3, #0]
   127b6:	18d3      	adds	r3, r2, r3
   127b8:	68fa      	ldr	r2, [r7, #12]
   127ba:	2128      	movs	r1, #40	; 0x28
   127bc:	5c52      	ldrb	r2, [r2, r1]
   127be:	b2d2      	uxtb	r2, r2
   127c0:	701a      	strb	r2, [r3, #0]
}
   127c2:	46c0      	nop			; (mov r8, r8)
   127c4:	46bd      	mov	sp, r7
   127c6:	b004      	add	sp, #16
   127c8:	bd80      	pop	{r7, pc}
   127ca:	46c0      	nop			; (mov r8, r8)
   127cc:	000126bd 	.word	0x000126bd

000127d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   127d0:	b580      	push	{r7, lr}
   127d2:	b084      	sub	sp, #16
   127d4:	af00      	add	r7, sp, #0
   127d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   127d8:	687b      	ldr	r3, [r7, #4]
   127da:	681b      	ldr	r3, [r3, #0]
   127dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   127de:	68fb      	ldr	r3, [r7, #12]
   127e0:	8b5b      	ldrh	r3, [r3, #26]
   127e2:	b29b      	uxth	r3, r3
   127e4:	001a      	movs	r2, r3
   127e6:	2304      	movs	r3, #4
   127e8:	4013      	ands	r3, r2
   127ea:	d004      	beq.n	127f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2225      	movs	r2, #37	; 0x25
   127f0:	211e      	movs	r1, #30
   127f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   127f4:	e024      	b.n	12840 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   127f6:	230a      	movs	r3, #10
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	687a      	ldr	r2, [r7, #4]
   127fc:	8b52      	ldrh	r2, [r2, #26]
   127fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12800:	687b      	ldr	r3, [r7, #4]
   12802:	8b9b      	ldrh	r3, [r3, #28]
   12804:	b29a      	uxth	r2, r3
   12806:	230a      	movs	r3, #10
   12808:	18fb      	adds	r3, r7, r3
   1280a:	210a      	movs	r1, #10
   1280c:	1879      	adds	r1, r7, r1
   1280e:	8809      	ldrh	r1, [r1, #0]
   12810:	1a8a      	subs	r2, r1, r2
   12812:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	8b9b      	ldrh	r3, [r3, #28]
   12818:	b29b      	uxth	r3, r3
   1281a:	3b01      	subs	r3, #1
   1281c:	b29a      	uxth	r2, r3
   1281e:	687b      	ldr	r3, [r7, #4]
   12820:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12822:	687b      	ldr	r3, [r7, #4]
   12824:	0018      	movs	r0, r3
   12826:	4b08      	ldr	r3, [pc, #32]	; (12848 <_i2c_master_write+0x78>)
   12828:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1282a:	687b      	ldr	r3, [r7, #4]
   1282c:	6a1a      	ldr	r2, [r3, #32]
   1282e:	230a      	movs	r3, #10
   12830:	18fb      	adds	r3, r7, r3
   12832:	881b      	ldrh	r3, [r3, #0]
   12834:	18d3      	adds	r3, r2, r3
   12836:	781b      	ldrb	r3, [r3, #0]
   12838:	b2d9      	uxtb	r1, r3
   1283a:	68fb      	ldr	r3, [r7, #12]
   1283c:	2228      	movs	r2, #40	; 0x28
   1283e:	5499      	strb	r1, [r3, r2]
}
   12840:	46bd      	mov	sp, r7
   12842:	b004      	add	sp, #16
   12844:	bd80      	pop	{r7, pc}
   12846:	46c0      	nop			; (mov r8, r8)
   12848:	000126bd 	.word	0x000126bd

0001284c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1284c:	b580      	push	{r7, lr}
   1284e:	b084      	sub	sp, #16
   12850:	af00      	add	r7, sp, #0
   12852:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12854:	687b      	ldr	r3, [r7, #4]
   12856:	681b      	ldr	r3, [r3, #0]
   12858:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1285a:	68fb      	ldr	r3, [r7, #12]
   1285c:	7e1b      	ldrb	r3, [r3, #24]
   1285e:	b2db      	uxtb	r3, r3
   12860:	001a      	movs	r2, r3
   12862:	2301      	movs	r3, #1
   12864:	4013      	ands	r3, r2
   12866:	d02b      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12868:	68fb      	ldr	r3, [r7, #12]
   1286a:	2201      	movs	r2, #1
   1286c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1286e:	68fb      	ldr	r3, [r7, #12]
   12870:	8b5b      	ldrh	r3, [r3, #26]
   12872:	b29b      	uxth	r3, r3
   12874:	001a      	movs	r2, r3
   12876:	2302      	movs	r3, #2
   12878:	4013      	ands	r3, r2
   1287a:	d004      	beq.n	12886 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1287c:	687b      	ldr	r3, [r7, #4]
   1287e:	2225      	movs	r2, #37	; 0x25
   12880:	2141      	movs	r1, #65	; 0x41
   12882:	5499      	strb	r1, [r3, r2]
   12884:	e01c      	b.n	128c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12886:	68fb      	ldr	r3, [r7, #12]
   12888:	8b5b      	ldrh	r3, [r3, #26]
   1288a:	b29b      	uxth	r3, r3
   1288c:	001a      	movs	r2, r3
   1288e:	2304      	movs	r3, #4
   12890:	4013      	ands	r3, r2
   12892:	d015      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12894:	687b      	ldr	r3, [r7, #4]
   12896:	2225      	movs	r2, #37	; 0x25
   12898:	2118      	movs	r1, #24
   1289a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1289c:	687b      	ldr	r3, [r7, #4]
   1289e:	2200      	movs	r2, #0
   128a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   128a2:	687b      	ldr	r3, [r7, #4]
   128a4:	7a9b      	ldrb	r3, [r3, #10]
   128a6:	2b00      	cmp	r3, #0
   128a8:	d00a      	beq.n	128c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   128aa:	687b      	ldr	r3, [r7, #4]
   128ac:	0018      	movs	r0, r3
   128ae:	4b13      	ldr	r3, [pc, #76]	; (128fc <_i2c_master_async_address_response+0xb0>)
   128b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   128b2:	68fb      	ldr	r3, [r7, #12]
   128b4:	685b      	ldr	r3, [r3, #4]
   128b6:	22c0      	movs	r2, #192	; 0xc0
   128b8:	0292      	lsls	r2, r2, #10
   128ba:	431a      	orrs	r2, r3
   128bc:	68fb      	ldr	r3, [r7, #12]
   128be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   128c0:	687b      	ldr	r3, [r7, #4]
   128c2:	8b9b      	ldrh	r3, [r3, #28]
   128c4:	b29a      	uxth	r2, r3
   128c6:	687b      	ldr	r3, [r7, #4]
   128c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   128ca:	687b      	ldr	r3, [r7, #4]
   128cc:	2225      	movs	r2, #37	; 0x25
   128ce:	5c9b      	ldrb	r3, [r3, r2]
   128d0:	b2db      	uxtb	r3, r3
   128d2:	2b05      	cmp	r3, #5
   128d4:	d10e      	bne.n	128f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	2224      	movs	r2, #36	; 0x24
   128da:	5c9b      	ldrb	r3, [r3, r2]
   128dc:	b2db      	uxtb	r3, r3
   128de:	2b00      	cmp	r3, #0
   128e0:	d104      	bne.n	128ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   128e2:	687b      	ldr	r3, [r7, #4]
   128e4:	0018      	movs	r0, r3
   128e6:	4b06      	ldr	r3, [pc, #24]	; (12900 <_i2c_master_async_address_response+0xb4>)
   128e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   128ea:	e003      	b.n	128f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	0018      	movs	r0, r3
   128f0:	4b04      	ldr	r3, [pc, #16]	; (12904 <_i2c_master_async_address_response+0xb8>)
   128f2:	4798      	blx	r3
}
   128f4:	46c0      	nop			; (mov r8, r8)
   128f6:	46bd      	mov	sp, r7
   128f8:	b004      	add	sp, #16
   128fa:	bd80      	pop	{r7, pc}
   128fc:	000126bd 	.word	0x000126bd
   12900:	000127d1 	.word	0x000127d1
   12904:	000126e1 	.word	0x000126e1

00012908 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12908:	b580      	push	{r7, lr}
   1290a:	b084      	sub	sp, #16
   1290c:	af00      	add	r7, sp, #0
   1290e:	60f8      	str	r0, [r7, #12]
   12910:	60b9      	str	r1, [r7, #8]
   12912:	1dfb      	adds	r3, r7, #7
   12914:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12916:	1dfb      	adds	r3, r7, #7
   12918:	781b      	ldrb	r3, [r3, #0]
   1291a:	68fa      	ldr	r2, [r7, #12]
   1291c:	3302      	adds	r3, #2
   1291e:	009b      	lsls	r3, r3, #2
   12920:	18d3      	adds	r3, r2, r3
   12922:	3304      	adds	r3, #4
   12924:	68ba      	ldr	r2, [r7, #8]
   12926:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12928:	68fb      	ldr	r3, [r7, #12]
   1292a:	7e1b      	ldrb	r3, [r3, #24]
   1292c:	b2db      	uxtb	r3, r3
   1292e:	b25a      	sxtb	r2, r3
   12930:	1dfb      	adds	r3, r7, #7
   12932:	781b      	ldrb	r3, [r3, #0]
   12934:	2101      	movs	r1, #1
   12936:	4099      	lsls	r1, r3
   12938:	000b      	movs	r3, r1
   1293a:	b25b      	sxtb	r3, r3
   1293c:	4313      	orrs	r3, r2
   1293e:	b25b      	sxtb	r3, r3
   12940:	b2da      	uxtb	r2, r3
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	761a      	strb	r2, [r3, #24]
}
   12946:	46c0      	nop			; (mov r8, r8)
   12948:	46bd      	mov	sp, r7
   1294a:	b004      	add	sp, #16
   1294c:	bd80      	pop	{r7, pc}
	...

00012950 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12950:	b590      	push	{r4, r7, lr}
   12952:	b087      	sub	sp, #28
   12954:	af00      	add	r7, sp, #0
   12956:	6078      	str	r0, [r7, #4]
   12958:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1295a:	687b      	ldr	r3, [r7, #4]
   1295c:	681b      	ldr	r3, [r3, #0]
   1295e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12960:	683b      	ldr	r3, [r7, #0]
   12962:	685a      	ldr	r2, [r3, #4]
   12964:	687b      	ldr	r3, [r7, #4]
   12966:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12968:	683b      	ldr	r3, [r7, #0]
   1296a:	885a      	ldrh	r2, [r3, #2]
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12970:	687b      	ldr	r3, [r7, #4]
   12972:	2224      	movs	r2, #36	; 0x24
   12974:	2101      	movs	r1, #1
   12976:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12978:	687b      	ldr	r3, [r7, #4]
   1297a:	2225      	movs	r2, #37	; 0x25
   1297c:	2105      	movs	r1, #5
   1297e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12980:	693b      	ldr	r3, [r7, #16]
   12982:	681b      	ldr	r3, [r3, #0]
   12984:	011b      	lsls	r3, r3, #4
   12986:	0fdb      	lsrs	r3, r3, #31
   12988:	b2db      	uxtb	r3, r3
   1298a:	001a      	movs	r2, r3
   1298c:	230f      	movs	r3, #15
   1298e:	18fb      	adds	r3, r7, r3
   12990:	1e51      	subs	r1, r2, #1
   12992:	418a      	sbcs	r2, r1
   12994:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12996:	683b      	ldr	r3, [r7, #0]
   12998:	7a5b      	ldrb	r3, [r3, #9]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d006      	beq.n	129ac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   1299e:	683b      	ldr	r3, [r7, #0]
   129a0:	7a9a      	ldrb	r2, [r3, #10]
   129a2:	687b      	ldr	r3, [r7, #4]
   129a4:	0011      	movs	r1, r2
   129a6:	0018      	movs	r0, r3
   129a8:	4b3b      	ldr	r3, [pc, #236]	; (12a98 <_i2c_master_read_packet+0x148>)
   129aa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   129ac:	230f      	movs	r3, #15
   129ae:	18fb      	adds	r3, r7, r3
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	2b00      	cmp	r3, #0
   129b4:	d00b      	beq.n	129ce <_i2c_master_read_packet+0x7e>
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	885b      	ldrh	r3, [r3, #2]
   129ba:	2b01      	cmp	r3, #1
   129bc:	d107      	bne.n	129ce <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   129be:	693b      	ldr	r3, [r7, #16]
   129c0:	685b      	ldr	r3, [r3, #4]
   129c2:	2280      	movs	r2, #128	; 0x80
   129c4:	02d2      	lsls	r2, r2, #11
   129c6:	431a      	orrs	r2, r3
   129c8:	693b      	ldr	r3, [r7, #16]
   129ca:	605a      	str	r2, [r3, #4]
   129cc:	e005      	b.n	129da <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   129ce:	693b      	ldr	r3, [r7, #16]
   129d0:	685b      	ldr	r3, [r3, #4]
   129d2:	4a32      	ldr	r2, [pc, #200]	; (12a9c <_i2c_master_read_packet+0x14c>)
   129d4:	401a      	ands	r2, r3
   129d6:	693b      	ldr	r3, [r7, #16]
   129d8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   129da:	683b      	ldr	r3, [r7, #0]
   129dc:	7a1b      	ldrb	r3, [r3, #8]
   129de:	2b00      	cmp	r3, #0
   129e0:	d045      	beq.n	12a6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   129e2:	683b      	ldr	r3, [r7, #0]
   129e4:	881b      	ldrh	r3, [r3, #0]
   129e6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129e8:	683b      	ldr	r3, [r7, #0]
   129ea:	7a5b      	ldrb	r3, [r3, #9]
   129ec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   129ee:	4313      	orrs	r3, r2
   129f0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   129f2:	2380      	movs	r3, #128	; 0x80
   129f4:	021b      	lsls	r3, r3, #8
   129f6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   129f8:	693b      	ldr	r3, [r7, #16]
   129fa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   129fc:	2317      	movs	r3, #23
   129fe:	18fc      	adds	r4, r7, r3
   12a00:	687b      	ldr	r3, [r7, #4]
   12a02:	0018      	movs	r0, r3
   12a04:	4b26      	ldr	r3, [pc, #152]	; (12aa0 <_i2c_master_read_packet+0x150>)
   12a06:	4798      	blx	r3
   12a08:	0003      	movs	r3, r0
   12a0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12a0c:	693b      	ldr	r3, [r7, #16]
   12a0e:	685b      	ldr	r3, [r3, #4]
   12a10:	4a22      	ldr	r2, [pc, #136]	; (12a9c <_i2c_master_read_packet+0x14c>)
   12a12:	401a      	ands	r2, r3
   12a14:	693b      	ldr	r3, [r7, #16]
   12a16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12a18:	2317      	movs	r3, #23
   12a1a:	18fb      	adds	r3, r7, r3
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d107      	bne.n	12a32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12a22:	2317      	movs	r3, #23
   12a24:	18fc      	adds	r4, r7, r3
   12a26:	687b      	ldr	r3, [r7, #4]
   12a28:	0018      	movs	r0, r3
   12a2a:	4b1e      	ldr	r3, [pc, #120]	; (12aa4 <_i2c_master_read_packet+0x154>)
   12a2c:	4798      	blx	r3
   12a2e:	0003      	movs	r3, r0
   12a30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12a32:	2317      	movs	r3, #23
   12a34:	18fb      	adds	r3, r7, r3
   12a36:	781b      	ldrb	r3, [r3, #0]
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d114      	bne.n	12a66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12a3c:	693b      	ldr	r3, [r7, #16]
   12a3e:	2203      	movs	r2, #3
   12a40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a42:	683b      	ldr	r3, [r7, #0]
   12a44:	881b      	ldrh	r3, [r3, #0]
   12a46:	0a1b      	lsrs	r3, r3, #8
   12a48:	b29b      	uxth	r3, r3
   12a4a:	2278      	movs	r2, #120	; 0x78
   12a4c:	4313      	orrs	r3, r2
   12a4e:	b29b      	uxth	r3, r3
   12a50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a52:	683b      	ldr	r3, [r7, #0]
   12a54:	7a5b      	ldrb	r3, [r3, #9]
   12a56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12a5a:	2201      	movs	r2, #1
   12a5c:	4313      	orrs	r3, r2
   12a5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12a60:	693b      	ldr	r3, [r7, #16]
   12a62:	625a      	str	r2, [r3, #36]	; 0x24
   12a64:	e012      	b.n	12a8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12a66:	2317      	movs	r3, #23
   12a68:	18fb      	adds	r3, r7, r3
   12a6a:	781b      	ldrb	r3, [r3, #0]
   12a6c:	e00f      	b.n	12a8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12a6e:	693b      	ldr	r3, [r7, #16]
   12a70:	2203      	movs	r2, #3
   12a72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a74:	683b      	ldr	r3, [r7, #0]
   12a76:	881b      	ldrh	r3, [r3, #0]
   12a78:	005b      	lsls	r3, r3, #1
   12a7a:	2201      	movs	r2, #1
   12a7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	7a5b      	ldrb	r3, [r3, #9]
   12a82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12a84:	4313      	orrs	r3, r2
   12a86:	001a      	movs	r2, r3
   12a88:	693b      	ldr	r3, [r7, #16]
   12a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12a8c:	2300      	movs	r3, #0
}
   12a8e:	0018      	movs	r0, r3
   12a90:	46bd      	mov	sp, r7
   12a92:	b007      	add	sp, #28
   12a94:	bd90      	pop	{r4, r7, pc}
   12a96:	46c0      	nop			; (mov r8, r8)
   12a98:	000182c9 	.word	0x000182c9
   12a9c:	fffbffff 	.word	0xfffbffff
   12aa0:	0001826b 	.word	0x0001826b
   12aa4:	0001820d 	.word	0x0001820d

00012aa8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12aa8:	b580      	push	{r7, lr}
   12aaa:	b082      	sub	sp, #8
   12aac:	af00      	add	r7, sp, #0
   12aae:	6078      	str	r0, [r7, #4]
   12ab0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	8b9b      	ldrh	r3, [r3, #28]
   12ab6:	b29b      	uxth	r3, r3
   12ab8:	2b00      	cmp	r3, #0
   12aba:	d001      	beq.n	12ac0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12abc:	2305      	movs	r3, #5
   12abe:	e00c      	b.n	12ada <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12ac0:	687b      	ldr	r3, [r7, #4]
   12ac2:	2201      	movs	r2, #1
   12ac4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	2201      	movs	r2, #1
   12aca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12acc:	683a      	ldr	r2, [r7, #0]
   12ace:	687b      	ldr	r3, [r7, #4]
   12ad0:	0011      	movs	r1, r2
   12ad2:	0018      	movs	r0, r3
   12ad4:	4b03      	ldr	r3, [pc, #12]	; (12ae4 <i2c_master_read_packet_job+0x3c>)
   12ad6:	4798      	blx	r3
   12ad8:	0003      	movs	r3, r0
}
   12ada:	0018      	movs	r0, r3
   12adc:	46bd      	mov	sp, r7
   12ade:	b002      	add	sp, #8
   12ae0:	bd80      	pop	{r7, pc}
   12ae2:	46c0      	nop			; (mov r8, r8)
   12ae4:	00012951 	.word	0x00012951

00012ae8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ae8:	b580      	push	{r7, lr}
   12aea:	b084      	sub	sp, #16
   12aec:	af00      	add	r7, sp, #0
   12aee:	6078      	str	r0, [r7, #4]
   12af0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	681b      	ldr	r3, [r3, #0]
   12af6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12af8:	683b      	ldr	r3, [r7, #0]
   12afa:	7a5b      	ldrb	r3, [r3, #9]
   12afc:	2b00      	cmp	r3, #0
   12afe:	d006      	beq.n	12b0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12b00:	683b      	ldr	r3, [r7, #0]
   12b02:	7a9a      	ldrb	r2, [r3, #10]
   12b04:	687b      	ldr	r3, [r7, #4]
   12b06:	0011      	movs	r1, r2
   12b08:	0018      	movs	r0, r3
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <_i2c_master_write_packet+0x9c>)
   12b0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12b0e:	68fb      	ldr	r3, [r7, #12]
   12b10:	685b      	ldr	r3, [r3, #4]
   12b12:	4a1d      	ldr	r2, [pc, #116]	; (12b88 <_i2c_master_write_packet+0xa0>)
   12b14:	401a      	ands	r2, r3
   12b16:	68fb      	ldr	r3, [r7, #12]
   12b18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b1a:	683b      	ldr	r3, [r7, #0]
   12b1c:	685a      	ldr	r2, [r3, #4]
   12b1e:	687b      	ldr	r3, [r7, #4]
   12b20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b22:	683b      	ldr	r3, [r7, #0]
   12b24:	885a      	ldrh	r2, [r3, #2]
   12b26:	687b      	ldr	r3, [r7, #4]
   12b28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12b2a:	687b      	ldr	r3, [r7, #4]
   12b2c:	2224      	movs	r2, #36	; 0x24
   12b2e:	2100      	movs	r1, #0
   12b30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b32:	687b      	ldr	r3, [r7, #4]
   12b34:	2225      	movs	r2, #37	; 0x25
   12b36:	2105      	movs	r1, #5
   12b38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12b3a:	68fb      	ldr	r3, [r7, #12]
   12b3c:	2203      	movs	r2, #3
   12b3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12b40:	683b      	ldr	r3, [r7, #0]
   12b42:	7a1b      	ldrb	r3, [r3, #8]
   12b44:	2b00      	cmp	r3, #0
   12b46:	d00d      	beq.n	12b64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b48:	683b      	ldr	r3, [r7, #0]
   12b4a:	881b      	ldrh	r3, [r3, #0]
   12b4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b4e:	683b      	ldr	r3, [r7, #0]
   12b50:	7a5b      	ldrb	r3, [r3, #9]
   12b52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b54:	4313      	orrs	r3, r2
   12b56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12b58:	2380      	movs	r3, #128	; 0x80
   12b5a:	021b      	lsls	r3, r3, #8
   12b5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b5e:	68fb      	ldr	r3, [r7, #12]
   12b60:	625a      	str	r2, [r3, #36]	; 0x24
   12b62:	e009      	b.n	12b78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b64:	683b      	ldr	r3, [r7, #0]
   12b66:	881b      	ldrh	r3, [r3, #0]
   12b68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12b6a:	683b      	ldr	r3, [r7, #0]
   12b6c:	7a5b      	ldrb	r3, [r3, #9]
   12b6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12b70:	4313      	orrs	r3, r2
   12b72:	001a      	movs	r2, r3
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12b78:	2300      	movs	r3, #0
}
   12b7a:	0018      	movs	r0, r3
   12b7c:	46bd      	mov	sp, r7
   12b7e:	b004      	add	sp, #16
   12b80:	bd80      	pop	{r7, pc}
   12b82:	46c0      	nop			; (mov r8, r8)
   12b84:	000182c9 	.word	0x000182c9
   12b88:	fffbffff 	.word	0xfffbffff

00012b8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b8c:	b580      	push	{r7, lr}
   12b8e:	b082      	sub	sp, #8
   12b90:	af00      	add	r7, sp, #0
   12b92:	6078      	str	r0, [r7, #4]
   12b94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	8b9b      	ldrh	r3, [r3, #28]
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	2b00      	cmp	r3, #0
   12b9e:	d001      	beq.n	12ba4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12ba0:	2305      	movs	r3, #5
   12ba2:	e00c      	b.n	12bbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12ba4:	687b      	ldr	r3, [r7, #4]
   12ba6:	2201      	movs	r2, #1
   12ba8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12baa:	687b      	ldr	r3, [r7, #4]
   12bac:	2201      	movs	r2, #1
   12bae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12bb0:	683a      	ldr	r2, [r7, #0]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <i2c_master_write_packet_job+0x3c>)
   12bba:	4798      	blx	r3
   12bbc:	0003      	movs	r3, r0
}
   12bbe:	0018      	movs	r0, r3
   12bc0:	46bd      	mov	sp, r7
   12bc2:	b002      	add	sp, #8
   12bc4:	bd80      	pop	{r7, pc}
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00012ae9 	.word	0x00012ae9

00012bcc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12bcc:	b580      	push	{r7, lr}
   12bce:	b086      	sub	sp, #24
   12bd0:	af00      	add	r7, sp, #0
   12bd2:	0002      	movs	r2, r0
   12bd4:	1dfb      	adds	r3, r7, #7
   12bd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12bd8:	1dfb      	adds	r3, r7, #7
   12bda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12bdc:	4b93      	ldr	r3, [pc, #588]	; (12e2c <_i2c_master_interrupt_handler+0x260>)
   12bde:	0092      	lsls	r2, r2, #2
   12be0:	58d3      	ldr	r3, [r2, r3]
   12be2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12be4:	697b      	ldr	r3, [r7, #20]
   12be6:	681b      	ldr	r3, [r3, #0]
   12be8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12bea:	693b      	ldr	r3, [r7, #16]
   12bec:	681b      	ldr	r3, [r3, #0]
   12bee:	011b      	lsls	r3, r3, #4
   12bf0:	0fdb      	lsrs	r3, r3, #31
   12bf2:	b2db      	uxtb	r3, r3
   12bf4:	001a      	movs	r2, r3
   12bf6:	230f      	movs	r3, #15
   12bf8:	18fb      	adds	r3, r7, r3
   12bfa:	1e51      	subs	r1, r2, #1
   12bfc:	418a      	sbcs	r2, r1
   12bfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12c00:	230e      	movs	r3, #14
   12c02:	18fb      	adds	r3, r7, r3
   12c04:	697a      	ldr	r2, [r7, #20]
   12c06:	7e52      	ldrb	r2, [r2, #25]
   12c08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12c0a:	697b      	ldr	r3, [r7, #20]
   12c0c:	7e1b      	ldrb	r3, [r3, #24]
   12c0e:	b2da      	uxtb	r2, r3
   12c10:	230e      	movs	r3, #14
   12c12:	18fb      	adds	r3, r7, r3
   12c14:	210e      	movs	r1, #14
   12c16:	1879      	adds	r1, r7, r1
   12c18:	7809      	ldrb	r1, [r1, #0]
   12c1a:	400a      	ands	r2, r1
   12c1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12c1e:	697b      	ldr	r3, [r7, #20]
   12c20:	8b5b      	ldrh	r3, [r3, #26]
   12c22:	b29b      	uxth	r3, r3
   12c24:	2b00      	cmp	r3, #0
   12c26:	d109      	bne.n	12c3c <_i2c_master_interrupt_handler+0x70>
   12c28:	697b      	ldr	r3, [r7, #20]
   12c2a:	8b9b      	ldrh	r3, [r3, #28]
   12c2c:	b29b      	uxth	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d004      	beq.n	12c3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12c32:	697b      	ldr	r3, [r7, #20]
   12c34:	0018      	movs	r0, r3
   12c36:	4b7e      	ldr	r3, [pc, #504]	; (12e30 <_i2c_master_interrupt_handler+0x264>)
   12c38:	4798      	blx	r3
   12c3a:	e070      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c3c:	697b      	ldr	r3, [r7, #20]
   12c3e:	8b5b      	ldrh	r3, [r3, #26]
   12c40:	b29b      	uxth	r3, r3
   12c42:	2b00      	cmp	r3, #0
   12c44:	d039      	beq.n	12cba <_i2c_master_interrupt_handler+0xee>
   12c46:	697b      	ldr	r3, [r7, #20]
   12c48:	8b9b      	ldrh	r3, [r3, #28]
   12c4a:	b29b      	uxth	r3, r3
   12c4c:	2b00      	cmp	r3, #0
   12c4e:	d134      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12c50:	697b      	ldr	r3, [r7, #20]
   12c52:	2225      	movs	r2, #37	; 0x25
   12c54:	5c9b      	ldrb	r3, [r3, r2]
   12c56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12c58:	2b05      	cmp	r3, #5
   12c5a:	d12e      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12c5c:	697b      	ldr	r3, [r7, #20]
   12c5e:	2224      	movs	r2, #36	; 0x24
   12c60:	5c9b      	ldrb	r3, [r3, r2]
   12c62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12c64:	2b00      	cmp	r3, #0
   12c66:	d128      	bne.n	12cba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12c68:	693b      	ldr	r3, [r7, #16]
   12c6a:	2203      	movs	r2, #3
   12c6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12c6e:	697b      	ldr	r3, [r7, #20]
   12c70:	2200      	movs	r2, #0
   12c72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12c74:	697b      	ldr	r3, [r7, #20]
   12c76:	2225      	movs	r2, #37	; 0x25
   12c78:	2100      	movs	r1, #0
   12c7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12c7c:	697b      	ldr	r3, [r7, #20]
   12c7e:	7a9b      	ldrb	r3, [r3, #10]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d00b      	beq.n	12c9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	0018      	movs	r0, r3
   12c88:	4b6a      	ldr	r3, [pc, #424]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12c8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12c8c:	693b      	ldr	r3, [r7, #16]
   12c8e:	685b      	ldr	r3, [r3, #4]
   12c90:	22c0      	movs	r2, #192	; 0xc0
   12c92:	0292      	lsls	r2, r2, #10
   12c94:	431a      	orrs	r2, r3
   12c96:	693b      	ldr	r3, [r7, #16]
   12c98:	605a      	str	r2, [r3, #4]
   12c9a:	e002      	b.n	12ca2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12c9c:	693b      	ldr	r3, [r7, #16]
   12c9e:	2201      	movs	r2, #1
   12ca0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ca2:	230e      	movs	r3, #14
   12ca4:	18fb      	adds	r3, r7, r3
   12ca6:	781b      	ldrb	r3, [r3, #0]
   12ca8:	2201      	movs	r2, #1
   12caa:	4013      	ands	r3, r2
   12cac:	d037      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12cae:	697b      	ldr	r3, [r7, #20]
   12cb0:	68db      	ldr	r3, [r3, #12]
   12cb2:	697a      	ldr	r2, [r7, #20]
   12cb4:	0010      	movs	r0, r2
   12cb6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12cb8:	e031      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12cba:	697b      	ldr	r3, [r7, #20]
   12cbc:	8b5b      	ldrh	r3, [r3, #26]
   12cbe:	b29b      	uxth	r3, r3
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	d02c      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
   12cc4:	697b      	ldr	r3, [r7, #20]
   12cc6:	8b9b      	ldrh	r3, [r3, #28]
   12cc8:	b29b      	uxth	r3, r3
   12cca:	2b00      	cmp	r3, #0
   12ccc:	d027      	beq.n	12d1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12cce:	693b      	ldr	r3, [r7, #16]
   12cd0:	8b5b      	ldrh	r3, [r3, #26]
   12cd2:	b29b      	uxth	r3, r3
   12cd4:	001a      	movs	r2, r3
   12cd6:	2320      	movs	r3, #32
   12cd8:	4013      	ands	r3, r2
   12cda:	d111      	bne.n	12d00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cdc:	230f      	movs	r3, #15
   12cde:	18fb      	adds	r3, r7, r3
   12ce0:	781b      	ldrb	r3, [r3, #0]
   12ce2:	2201      	movs	r2, #1
   12ce4:	4053      	eors	r3, r2
   12ce6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d104      	bne.n	12cf6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12cec:	697b      	ldr	r3, [r7, #20]
   12cee:	8b9b      	ldrh	r3, [r3, #28]
   12cf0:	b29b      	uxth	r3, r3
   12cf2:	2b01      	cmp	r3, #1
   12cf4:	d004      	beq.n	12d00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12cf6:	697b      	ldr	r3, [r7, #20]
   12cf8:	2225      	movs	r2, #37	; 0x25
   12cfa:	2141      	movs	r1, #65	; 0x41
   12cfc:	5499      	strb	r1, [r3, r2]
   12cfe:	e00e      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12d00:	697b      	ldr	r3, [r7, #20]
   12d02:	2224      	movs	r2, #36	; 0x24
   12d04:	5c9b      	ldrb	r3, [r3, r2]
   12d06:	b2db      	uxtb	r3, r3
   12d08:	2b00      	cmp	r3, #0
   12d0a:	d104      	bne.n	12d16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12d0c:	697b      	ldr	r3, [r7, #20]
   12d0e:	0018      	movs	r0, r3
   12d10:	4b49      	ldr	r3, [pc, #292]	; (12e38 <_i2c_master_interrupt_handler+0x26c>)
   12d12:	4798      	blx	r3
   12d14:	e003      	b.n	12d1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12d16:	697b      	ldr	r3, [r7, #20]
   12d18:	0018      	movs	r0, r3
   12d1a:	4b48      	ldr	r3, [pc, #288]	; (12e3c <_i2c_master_interrupt_handler+0x270>)
   12d1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d1e:	697b      	ldr	r3, [r7, #20]
   12d20:	8b5b      	ldrh	r3, [r3, #26]
   12d22:	b29b      	uxth	r3, r3
   12d24:	2b00      	cmp	r3, #0
   12d26:	d047      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
   12d28:	697b      	ldr	r3, [r7, #20]
   12d2a:	8b9b      	ldrh	r3, [r3, #28]
   12d2c:	b29b      	uxth	r3, r3
   12d2e:	2b00      	cmp	r3, #0
   12d30:	d142      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12d32:	697b      	ldr	r3, [r7, #20]
   12d34:	2225      	movs	r2, #37	; 0x25
   12d36:	5c9b      	ldrb	r3, [r3, r2]
   12d38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12d3a:	2b05      	cmp	r3, #5
   12d3c:	d13c      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12d3e:	697b      	ldr	r3, [r7, #20]
   12d40:	2224      	movs	r2, #36	; 0x24
   12d42:	5c9b      	ldrb	r3, [r3, r2]
   12d44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12d46:	2b01      	cmp	r3, #1
   12d48:	d136      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12d4a:	693b      	ldr	r3, [r7, #16]
   12d4c:	7e1b      	ldrb	r3, [r3, #24]
   12d4e:	b2db      	uxtb	r3, r3
   12d50:	001a      	movs	r2, r3
   12d52:	2302      	movs	r3, #2
   12d54:	4013      	ands	r3, r2
   12d56:	d002      	beq.n	12d5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12d58:	693b      	ldr	r3, [r7, #16]
   12d5a:	2202      	movs	r2, #2
   12d5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12d5e:	693b      	ldr	r3, [r7, #16]
   12d60:	2203      	movs	r2, #3
   12d62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12d64:	697b      	ldr	r3, [r7, #20]
   12d66:	2200      	movs	r2, #0
   12d68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12d6a:	697b      	ldr	r3, [r7, #20]
   12d6c:	2225      	movs	r2, #37	; 0x25
   12d6e:	2100      	movs	r1, #0
   12d70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12d72:	230e      	movs	r3, #14
   12d74:	18fb      	adds	r3, r7, r3
   12d76:	781b      	ldrb	r3, [r3, #0]
   12d78:	2202      	movs	r2, #2
   12d7a:	4013      	ands	r3, r2
   12d7c:	d00b      	beq.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12d7e:	697b      	ldr	r3, [r7, #20]
   12d80:	2224      	movs	r2, #36	; 0x24
   12d82:	5c9b      	ldrb	r3, [r3, r2]
   12d84:	b2db      	uxtb	r3, r3
   12d86:	2b01      	cmp	r3, #1
   12d88:	d105      	bne.n	12d96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12d8a:	697b      	ldr	r3, [r7, #20]
   12d8c:	691b      	ldr	r3, [r3, #16]
   12d8e:	697a      	ldr	r2, [r7, #20]
   12d90:	0010      	movs	r0, r2
   12d92:	4798      	blx	r3
   12d94:	e010      	b.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12d96:	230e      	movs	r3, #14
   12d98:	18fb      	adds	r3, r7, r3
   12d9a:	781b      	ldrb	r3, [r3, #0]
   12d9c:	2201      	movs	r2, #1
   12d9e:	4013      	ands	r3, r2
   12da0:	d00a      	beq.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12da2:	697b      	ldr	r3, [r7, #20]
   12da4:	2224      	movs	r2, #36	; 0x24
   12da6:	5c9b      	ldrb	r3, [r3, r2]
   12da8:	b2db      	uxtb	r3, r3
   12daa:	2b00      	cmp	r3, #0
   12dac:	d104      	bne.n	12db8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12dae:	697b      	ldr	r3, [r7, #20]
   12db0:	68db      	ldr	r3, [r3, #12]
   12db2:	697a      	ldr	r2, [r7, #20]
   12db4:	0010      	movs	r0, r2
   12db6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   12db8:	697b      	ldr	r3, [r7, #20]
   12dba:	2225      	movs	r2, #37	; 0x25
   12dbc:	5c9b      	ldrb	r3, [r3, r2]
   12dbe:	b2db      	uxtb	r3, r3
   12dc0:	2b05      	cmp	r3, #5
   12dc2:	d02e      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
   12dc4:	697b      	ldr	r3, [r7, #20]
   12dc6:	2225      	movs	r2, #37	; 0x25
   12dc8:	5c9b      	ldrb	r3, [r3, r2]
   12dca:	b2db      	uxtb	r3, r3
   12dcc:	2b00      	cmp	r3, #0
   12dce:	d028      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   12dd0:	693b      	ldr	r3, [r7, #16]
   12dd2:	2203      	movs	r2, #3
   12dd4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12dd6:	697b      	ldr	r3, [r7, #20]
   12dd8:	2200      	movs	r2, #0
   12dda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   12ddc:	697b      	ldr	r3, [r7, #20]
   12dde:	2200      	movs	r2, #0
   12de0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12de2:	697b      	ldr	r3, [r7, #20]
   12de4:	2225      	movs	r2, #37	; 0x25
   12de6:	5c9b      	ldrb	r3, [r3, r2]
   12de8:	b2db      	uxtb	r3, r3
   12dea:	2b41      	cmp	r3, #65	; 0x41
   12dec:	d00e      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   12dee:	697b      	ldr	r3, [r7, #20]
   12df0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   12df2:	2b00      	cmp	r3, #0
   12df4:	d00a      	beq.n	12e0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   12df6:	697b      	ldr	r3, [r7, #20]
   12df8:	0018      	movs	r0, r3
   12dfa:	4b0e      	ldr	r3, [pc, #56]	; (12e34 <_i2c_master_interrupt_handler+0x268>)
   12dfc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   12dfe:	693b      	ldr	r3, [r7, #16]
   12e00:	685b      	ldr	r3, [r3, #4]
   12e02:	22e0      	movs	r2, #224	; 0xe0
   12e04:	02d2      	lsls	r2, r2, #11
   12e06:	431a      	orrs	r2, r3
   12e08:	693b      	ldr	r3, [r7, #16]
   12e0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   12e0c:	230e      	movs	r3, #14
   12e0e:	18fb      	adds	r3, r7, r3
   12e10:	781b      	ldrb	r3, [r3, #0]
   12e12:	2204      	movs	r2, #4
   12e14:	4013      	ands	r3, r2
   12e16:	d004      	beq.n	12e22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   12e18:	697b      	ldr	r3, [r7, #20]
   12e1a:	695b      	ldr	r3, [r3, #20]
   12e1c:	697a      	ldr	r2, [r7, #20]
   12e1e:	0010      	movs	r0, r2
   12e20:	4798      	blx	r3
		}
	}
}
   12e22:	46c0      	nop			; (mov r8, r8)
   12e24:	46bd      	mov	sp, r7
   12e26:	b006      	add	sp, #24
   12e28:	bd80      	pop	{r7, pc}
   12e2a:	46c0      	nop			; (mov r8, r8)
   12e2c:	20005794 	.word	0x20005794
   12e30:	0001284d 	.word	0x0001284d
   12e34:	000126bd 	.word	0x000126bd
   12e38:	000127d1 	.word	0x000127d1
   12e3c:	000126e1 	.word	0x000126e1

00012e40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   12e40:	b580      	push	{r7, lr}
   12e42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   12e44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   12e48:	4b02      	ldr	r3, [pc, #8]	; (12e54 <NVIC_SystemReset+0x14>)
   12e4a:	4a03      	ldr	r2, [pc, #12]	; (12e58 <NVIC_SystemReset+0x18>)
   12e4c:	60da      	str	r2, [r3, #12]
   12e4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   12e52:	e7fe      	b.n	12e52 <NVIC_SystemReset+0x12>
   12e54:	e000ed00 	.word	0xe000ed00
   12e58:	05fa0004 	.word	0x05fa0004

00012e5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   12e5c:	b580      	push	{r7, lr}
   12e5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   12e60:	4b02      	ldr	r3, [pc, #8]	; (12e6c <system_reset+0x10>)
   12e62:	4798      	blx	r3
}
   12e64:	46c0      	nop			; (mov r8, r8)
   12e66:	46bd      	mov	sp, r7
   12e68:	bd80      	pop	{r7, pc}
   12e6a:	46c0      	nop			; (mov r8, r8)
   12e6c:	00012e41 	.word	0x00012e41

00012e70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   12e70:	b580      	push	{r7, lr}
   12e72:	b086      	sub	sp, #24
   12e74:	af00      	add	r7, sp, #0
   12e76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   12e78:	4b9a      	ldr	r3, [pc, #616]	; (130e4 <vCommandConsoleTask+0x274>)
   12e7a:	0018      	movs	r0, r3
   12e7c:	4b9a      	ldr	r3, [pc, #616]	; (130e8 <vCommandConsoleTask+0x278>)
   12e7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   12e80:	4b9a      	ldr	r3, [pc, #616]	; (130ec <vCommandConsoleTask+0x27c>)
   12e82:	0018      	movs	r0, r3
   12e84:	4b98      	ldr	r3, [pc, #608]	; (130e8 <vCommandConsoleTask+0x278>)
   12e86:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xSHTCGetCommand);
   12e88:	4b99      	ldr	r3, [pc, #612]	; (130f0 <vCommandConsoleTask+0x280>)
   12e8a:	0018      	movs	r0, r3
   12e8c:	4b96      	ldr	r3, [pc, #600]	; (130e8 <vCommandConsoleTask+0x278>)
   12e8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   12e90:	4b98      	ldr	r3, [pc, #608]	; (130f4 <vCommandConsoleTask+0x284>)
   12e92:	0018      	movs	r0, r3
   12e94:	4b94      	ldr	r3, [pc, #592]	; (130e8 <vCommandConsoleTask+0x278>)
   12e96:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   12e98:	4b97      	ldr	r3, [pc, #604]	; (130f8 <vCommandConsoleTask+0x288>)
   12e9a:	0018      	movs	r0, r3
   12e9c:	4b92      	ldr	r3, [pc, #584]	; (130e8 <vCommandConsoleTask+0x278>)
   12e9e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   12ea0:	4b96      	ldr	r3, [pc, #600]	; (130fc <vCommandConsoleTask+0x28c>)
   12ea2:	0018      	movs	r0, r3
   12ea4:	4b90      	ldr	r3, [pc, #576]	; (130e8 <vCommandConsoleTask+0x278>)
   12ea6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   12ea8:	4b95      	ldr	r3, [pc, #596]	; (13100 <vCommandConsoleTask+0x290>)
   12eaa:	0018      	movs	r0, r3
   12eac:	4b8e      	ldr	r3, [pc, #568]	; (130e8 <vCommandConsoleTask+0x278>)
   12eae:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   12eb0:	2317      	movs	r3, #23
   12eb2:	18fb      	adds	r3, r7, r3
   12eb4:	2200      	movs	r2, #0
   12eb6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   12eb8:	4b92      	ldr	r3, [pc, #584]	; (13104 <vCommandConsoleTask+0x294>)
   12eba:	0018      	movs	r0, r3
   12ebc:	4b92      	ldr	r3, [pc, #584]	; (13108 <vCommandConsoleTask+0x298>)
   12ebe:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   12ec0:	2203      	movs	r2, #3
   12ec2:	2100      	movs	r1, #0
   12ec4:	2001      	movs	r0, #1
   12ec6:	4b91      	ldr	r3, [pc, #580]	; (1310c <vCommandConsoleTask+0x29c>)
   12ec8:	4798      	blx	r3
   12eca:	0002      	movs	r2, r0
   12ecc:	4b90      	ldr	r3, [pc, #576]	; (13110 <vCommandConsoleTask+0x2a0>)
   12ece:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   12ed0:	4b8f      	ldr	r3, [pc, #572]	; (13110 <vCommandConsoleTask+0x2a0>)
   12ed2:	681b      	ldr	r3, [r3, #0]
   12ed4:	2b00      	cmp	r3, #0
   12ed6:	d107      	bne.n	12ee8 <vCommandConsoleTask+0x78>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   12ed8:	4b8e      	ldr	r3, [pc, #568]	; (13114 <vCommandConsoleTask+0x2a4>)
   12eda:	0019      	movs	r1, r3
   12edc:	2003      	movs	r0, #3
   12ede:	4b8e      	ldr	r3, [pc, #568]	; (13118 <vCommandConsoleTask+0x2a8>)
   12ee0:	4798      	blx	r3
        vTaskSuspend(NULL);
   12ee2:	2000      	movs	r0, #0
   12ee4:	4b8d      	ldr	r3, [pc, #564]	; (1311c <vCommandConsoleTask+0x2ac>)
   12ee6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   12ee8:	230c      	movs	r3, #12
   12eea:	18fb      	adds	r3, r7, r3
   12eec:	0018      	movs	r0, r3
   12eee:	4b8c      	ldr	r3, [pc, #560]	; (13120 <vCommandConsoleTask+0x2b0>)
   12ef0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   12ef2:	230c      	movs	r3, #12
   12ef4:	18fb      	adds	r3, r7, r3
   12ef6:	781b      	ldrb	r3, [r3, #0]
   12ef8:	2b0a      	cmp	r3, #10
   12efa:	d004      	beq.n	12f06 <vCommandConsoleTask+0x96>
   12efc:	230c      	movs	r3, #12
   12efe:	18fb      	adds	r3, r7, r3
   12f00:	781b      	ldrb	r3, [r3, #0]
   12f02:	2b0d      	cmp	r3, #13
   12f04:	d137      	bne.n	12f76 <vCommandConsoleTask+0x106>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   12f06:	4b87      	ldr	r3, [pc, #540]	; (13124 <vCommandConsoleTask+0x2b4>)
   12f08:	0018      	movs	r0, r3
   12f0a:	4b7f      	ldr	r3, [pc, #508]	; (13108 <vCommandConsoleTask+0x298>)
   12f0c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   12f0e:	4b86      	ldr	r3, [pc, #536]	; (13128 <vCommandConsoleTask+0x2b8>)
   12f10:	2200      	movs	r2, #0
   12f12:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   12f14:	4b85      	ldr	r3, [pc, #532]	; (1312c <vCommandConsoleTask+0x2bc>)
   12f16:	2200      	movs	r2, #0
   12f18:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   12f1a:	4985      	ldr	r1, [pc, #532]	; (13130 <vCommandConsoleTask+0x2c0>)
   12f1c:	4b85      	ldr	r3, [pc, #532]	; (13134 <vCommandConsoleTask+0x2c4>)
   12f1e:	2231      	movs	r2, #49	; 0x31
   12f20:	0018      	movs	r0, r3
   12f22:	4b85      	ldr	r3, [pc, #532]	; (13138 <vCommandConsoleTask+0x2c8>)
   12f24:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   12f26:	4b83      	ldr	r3, [pc, #524]	; (13134 <vCommandConsoleTask+0x2c4>)
   12f28:	2231      	movs	r2, #49	; 0x31
   12f2a:	2100      	movs	r1, #0
   12f2c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   12f2e:	4983      	ldr	r1, [pc, #524]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f30:	4b7f      	ldr	r3, [pc, #508]	; (13130 <vCommandConsoleTask+0x2c0>)
   12f32:	2264      	movs	r2, #100	; 0x64
   12f34:	0018      	movs	r0, r3
   12f36:	4b82      	ldr	r3, [pc, #520]	; (13140 <vCommandConsoleTask+0x2d0>)
   12f38:	4798      	blx	r3
   12f3a:	0003      	movs	r3, r0
   12f3c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   12f3e:	4b7f      	ldr	r3, [pc, #508]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f40:	2263      	movs	r2, #99	; 0x63
   12f42:	2100      	movs	r1, #0
   12f44:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   12f46:	4b7d      	ldr	r3, [pc, #500]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f48:	0018      	movs	r0, r3
   12f4a:	4b6f      	ldr	r3, [pc, #444]	; (13108 <vCommandConsoleTask+0x298>)
   12f4c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   12f4e:	693b      	ldr	r3, [r7, #16]
   12f50:	2b00      	cmp	r3, #0
   12f52:	d1ec      	bne.n	12f2e <vCommandConsoleTask+0xbe>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   12f54:	2317      	movs	r3, #23
   12f56:	18fb      	adds	r3, r7, r3
   12f58:	2200      	movs	r2, #0
   12f5a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12f5c:	4b74      	ldr	r3, [pc, #464]	; (13130 <vCommandConsoleTask+0x2c0>)
   12f5e:	2232      	movs	r2, #50	; 0x32
   12f60:	2100      	movs	r1, #0
   12f62:	0018      	movs	r0, r3
   12f64:	4b77      	ldr	r3, [pc, #476]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f66:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   12f68:	4b74      	ldr	r3, [pc, #464]	; (1313c <vCommandConsoleTask+0x2cc>)
   12f6a:	2264      	movs	r2, #100	; 0x64
   12f6c:	2100      	movs	r1, #0
   12f6e:	0018      	movs	r0, r3
   12f70:	4b74      	ldr	r3, [pc, #464]	; (13144 <vCommandConsoleTask+0x2d4>)
   12f72:	4798      	blx	r3
   12f74:	e0b5      	b.n	130e2 <vCommandConsoleTask+0x272>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   12f76:	4b6c      	ldr	r3, [pc, #432]	; (13128 <vCommandConsoleTask+0x2b8>)
   12f78:	781b      	ldrb	r3, [r3, #0]
   12f7a:	2b00      	cmp	r3, #0
   12f7c:	d059      	beq.n	13032 <vCommandConsoleTask+0x1c2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   12f7e:	4b6b      	ldr	r3, [pc, #428]	; (1312c <vCommandConsoleTask+0x2bc>)
   12f80:	781b      	ldrb	r3, [r3, #0]
   12f82:	2b03      	cmp	r3, #3
   12f84:	d80c      	bhi.n	12fa0 <vCommandConsoleTask+0x130>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   12f86:	4b69      	ldr	r3, [pc, #420]	; (1312c <vCommandConsoleTask+0x2bc>)
   12f88:	781b      	ldrb	r3, [r3, #0]
   12f8a:	1c5a      	adds	r2, r3, #1
   12f8c:	b2d1      	uxtb	r1, r2
   12f8e:	4a67      	ldr	r2, [pc, #412]	; (1312c <vCommandConsoleTask+0x2bc>)
   12f90:	7011      	strb	r1, [r2, #0]
   12f92:	001a      	movs	r2, r3
   12f94:	230c      	movs	r3, #12
   12f96:	18fb      	adds	r3, r7, r3
   12f98:	7819      	ldrb	r1, [r3, #0]
   12f9a:	4b6b      	ldr	r3, [pc, #428]	; (13148 <vCommandConsoleTask+0x2d8>)
   12f9c:	5499      	strb	r1, [r3, r2]
   12f9e:	e005      	b.n	12fac <vCommandConsoleTask+0x13c>
                } else {
                    isEscapeCode = false;
   12fa0:	4b61      	ldr	r3, [pc, #388]	; (13128 <vCommandConsoleTask+0x2b8>)
   12fa2:	2200      	movs	r2, #0
   12fa4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   12fa6:	4b61      	ldr	r3, [pc, #388]	; (1312c <vCommandConsoleTask+0x2bc>)
   12fa8:	2200      	movs	r2, #0
   12faa:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   12fac:	4b5f      	ldr	r3, [pc, #380]	; (1312c <vCommandConsoleTask+0x2bc>)
   12fae:	781b      	ldrb	r3, [r3, #0]
   12fb0:	2b01      	cmp	r3, #1
   12fb2:	d999      	bls.n	12ee8 <vCommandConsoleTask+0x78>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   12fb4:	4a65      	ldr	r2, [pc, #404]	; (1314c <vCommandConsoleTask+0x2dc>)
   12fb6:	4b64      	ldr	r3, [pc, #400]	; (13148 <vCommandConsoleTask+0x2d8>)
   12fb8:	0011      	movs	r1, r2
   12fba:	0018      	movs	r0, r3
   12fbc:	4b64      	ldr	r3, [pc, #400]	; (13150 <vCommandConsoleTask+0x2e0>)
   12fbe:	4798      	blx	r3
   12fc0:	1e03      	subs	r3, r0, #0
   12fc2:	d02f      	beq.n	13024 <vCommandConsoleTask+0x1b4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   12fc4:	4963      	ldr	r1, [pc, #396]	; (13154 <vCommandConsoleTask+0x2e4>)
   12fc6:	4b5a      	ldr	r3, [pc, #360]	; (13130 <vCommandConsoleTask+0x2c0>)
   12fc8:	221b      	movs	r2, #27
   12fca:	0018      	movs	r0, r3
   12fcc:	4b62      	ldr	r3, [pc, #392]	; (13158 <vCommandConsoleTask+0x2e8>)
   12fce:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   12fd0:	4b57      	ldr	r3, [pc, #348]	; (13130 <vCommandConsoleTask+0x2c0>)
   12fd2:	0018      	movs	r0, r3
   12fd4:	4b4c      	ldr	r3, [pc, #304]	; (13108 <vCommandConsoleTask+0x298>)
   12fd6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   12fd8:	2317      	movs	r3, #23
   12fda:	18fb      	adds	r3, r7, r3
   12fdc:	2200      	movs	r2, #0
   12fde:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   12fe0:	4b53      	ldr	r3, [pc, #332]	; (13130 <vCommandConsoleTask+0x2c0>)
   12fe2:	2232      	movs	r2, #50	; 0x32
   12fe4:	2100      	movs	r1, #0
   12fe6:	0018      	movs	r0, r3
   12fe8:	4b56      	ldr	r3, [pc, #344]	; (13144 <vCommandConsoleTask+0x2d4>)
   12fea:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   12fec:	4951      	ldr	r1, [pc, #324]	; (13134 <vCommandConsoleTask+0x2c4>)
   12fee:	4b50      	ldr	r3, [pc, #320]	; (13130 <vCommandConsoleTask+0x2c0>)
   12ff0:	2231      	movs	r2, #49	; 0x31
   12ff2:	0018      	movs	r0, r3
   12ff4:	4b50      	ldr	r3, [pc, #320]	; (13138 <vCommandConsoleTask+0x2c8>)
   12ff6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   12ff8:	4b4d      	ldr	r3, [pc, #308]	; (13130 <vCommandConsoleTask+0x2c0>)
   12ffa:	0018      	movs	r0, r3
   12ffc:	4b57      	ldr	r3, [pc, #348]	; (1315c <vCommandConsoleTask+0x2ec>)
   12ffe:	4798      	blx	r3
   13000:	0003      	movs	r3, r0
   13002:	2b30      	cmp	r3, #48	; 0x30
   13004:	d806      	bhi.n	13014 <vCommandConsoleTask+0x1a4>
   13006:	4b4b      	ldr	r3, [pc, #300]	; (13134 <vCommandConsoleTask+0x2c4>)
   13008:	0018      	movs	r0, r3
   1300a:	4b54      	ldr	r3, [pc, #336]	; (1315c <vCommandConsoleTask+0x2ec>)
   1300c:	4798      	blx	r3
   1300e:	0003      	movs	r3, r0
   13010:	b2da      	uxtb	r2, r3
   13012:	e000      	b.n	13016 <vCommandConsoleTask+0x1a6>
   13014:	2231      	movs	r2, #49	; 0x31
   13016:	2317      	movs	r3, #23
   13018:	18fb      	adds	r3, r7, r3
   1301a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1301c:	4b44      	ldr	r3, [pc, #272]	; (13130 <vCommandConsoleTask+0x2c0>)
   1301e:	0018      	movs	r0, r3
   13020:	4b39      	ldr	r3, [pc, #228]	; (13108 <vCommandConsoleTask+0x298>)
   13022:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   13024:	4b40      	ldr	r3, [pc, #256]	; (13128 <vCommandConsoleTask+0x2b8>)
   13026:	2200      	movs	r2, #0
   13028:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1302a:	4b40      	ldr	r3, [pc, #256]	; (1312c <vCommandConsoleTask+0x2bc>)
   1302c:	2200      	movs	r2, #0
   1302e:	701a      	strb	r2, [r3, #0]
   13030:	e75a      	b.n	12ee8 <vCommandConsoleTask+0x78>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13032:	230c      	movs	r3, #12
   13034:	18fb      	adds	r3, r7, r3
   13036:	781b      	ldrb	r3, [r3, #0]
   13038:	2b0d      	cmp	r3, #13
   1303a:	d100      	bne.n	1303e <vCommandConsoleTask+0x1ce>
   1303c:	e754      	b.n	12ee8 <vCommandConsoleTask+0x78>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1303e:	230c      	movs	r3, #12
   13040:	18fb      	adds	r3, r7, r3
   13042:	781b      	ldrb	r3, [r3, #0]
   13044:	2b08      	cmp	r3, #8
   13046:	d004      	beq.n	13052 <vCommandConsoleTask+0x1e2>
   13048:	230c      	movs	r3, #12
   1304a:	18fb      	adds	r3, r7, r3
   1304c:	781b      	ldrb	r3, [r3, #0]
   1304e:	2b7f      	cmp	r3, #127	; 0x7f
   13050:	d11c      	bne.n	1308c <vCommandConsoleTask+0x21c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   13052:	2308      	movs	r3, #8
   13054:	18fb      	adds	r3, r7, r3
   13056:	4a42      	ldr	r2, [pc, #264]	; (13160 <vCommandConsoleTask+0x2f0>)
   13058:	6812      	ldr	r2, [r2, #0]
   1305a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   1305c:	2308      	movs	r3, #8
   1305e:	18fb      	adds	r3, r7, r3
   13060:	0018      	movs	r0, r3
   13062:	4b29      	ldr	r3, [pc, #164]	; (13108 <vCommandConsoleTask+0x298>)
   13064:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   13066:	2317      	movs	r3, #23
   13068:	18fb      	adds	r3, r7, r3
   1306a:	781b      	ldrb	r3, [r3, #0]
   1306c:	2b00      	cmp	r3, #0
   1306e:	d037      	beq.n	130e0 <vCommandConsoleTask+0x270>
                    cInputIndex--;
   13070:	2317      	movs	r3, #23
   13072:	18fb      	adds	r3, r7, r3
   13074:	781a      	ldrb	r2, [r3, #0]
   13076:	2317      	movs	r3, #23
   13078:	18fb      	adds	r3, r7, r3
   1307a:	3a01      	subs	r2, #1
   1307c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   1307e:	2317      	movs	r3, #23
   13080:	18fb      	adds	r3, r7, r3
   13082:	781b      	ldrb	r3, [r3, #0]
   13084:	4a2a      	ldr	r2, [pc, #168]	; (13130 <vCommandConsoleTask+0x2c0>)
   13086:	2100      	movs	r1, #0
   13088:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1308a:	e029      	b.n	130e0 <vCommandConsoleTask+0x270>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   1308c:	230c      	movs	r3, #12
   1308e:	18fb      	adds	r3, r7, r3
   13090:	781b      	ldrb	r3, [r3, #0]
   13092:	2b1b      	cmp	r3, #27
   13094:	d106      	bne.n	130a4 <vCommandConsoleTask+0x234>
                isEscapeCode = true;  // Next characters will be code arguments
   13096:	4b24      	ldr	r3, [pc, #144]	; (13128 <vCommandConsoleTask+0x2b8>)
   13098:	2201      	movs	r2, #1
   1309a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   1309c:	4b23      	ldr	r3, [pc, #140]	; (1312c <vCommandConsoleTask+0x2bc>)
   1309e:	2200      	movs	r2, #0
   130a0:	701a      	strb	r2, [r3, #0]
   130a2:	e721      	b.n	12ee8 <vCommandConsoleTask+0x78>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   130a4:	2317      	movs	r3, #23
   130a6:	18fb      	adds	r3, r7, r3
   130a8:	781b      	ldrb	r3, [r3, #0]
   130aa:	2b31      	cmp	r3, #49	; 0x31
   130ac:	d80e      	bhi.n	130cc <vCommandConsoleTask+0x25c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   130ae:	2317      	movs	r3, #23
   130b0:	18fb      	adds	r3, r7, r3
   130b2:	781b      	ldrb	r3, [r3, #0]
   130b4:	220c      	movs	r2, #12
   130b6:	18ba      	adds	r2, r7, r2
   130b8:	7811      	ldrb	r1, [r2, #0]
   130ba:	4a1d      	ldr	r2, [pc, #116]	; (13130 <vCommandConsoleTask+0x2c0>)
   130bc:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   130be:	2317      	movs	r3, #23
   130c0:	18fb      	adds	r3, r7, r3
   130c2:	781a      	ldrb	r2, [r3, #0]
   130c4:	2317      	movs	r3, #23
   130c6:	18fb      	adds	r3, r7, r3
   130c8:	3201      	adds	r2, #1
   130ca:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   130cc:	230c      	movs	r3, #12
   130ce:	18fb      	adds	r3, r7, r3
   130d0:	2200      	movs	r2, #0
   130d2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   130d4:	230c      	movs	r3, #12
   130d6:	18fb      	adds	r3, r7, r3
   130d8:	0018      	movs	r0, r3
   130da:	4b0b      	ldr	r3, [pc, #44]	; (13108 <vCommandConsoleTask+0x298>)
   130dc:	4798      	blx	r3
   130de:	e703      	b.n	12ee8 <vCommandConsoleTask+0x78>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   130e0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   130e2:	e701      	b.n	12ee8 <vCommandConsoleTask+0x78>
   130e4:	00036350 	.word	0x00036350
   130e8:	00018411 	.word	0x00018411
   130ec:	00036340 	.word	0x00036340
   130f0:	00036380 	.word	0x00036380
   130f4:	000363a0 	.word	0x000363a0
   130f8:	00036360 	.word	0x00036360
   130fc:	00036370 	.word	0x00036370
   13100:	00036390 	.word	0x00036390
   13104:	0003601c 	.word	0x0003601c
   13108:	0001e3e5 	.word	0x0001e3e5
   1310c:	0001aa85 	.word	0x0001aa85
   13110:	20004380 	.word	0x20004380
   13114:	000361a0 	.word	0x000361a0
   13118:	0001e4d1 	.word	0x0001e4d1
   1311c:	0001c871 	.word	0x0001c871
   13120:	00013165 	.word	0x00013165
   13124:	000361c0 	.word	0x000361c0
   13128:	20000344 	.word	0x20000344
   1312c:	20000345 	.word	0x20000345
   13130:	2000037c 	.word	0x2000037c
   13134:	20000348 	.word	0x20000348
   13138:	00035027 	.word	0x00035027
   1313c:	200003b0 	.word	0x200003b0
   13140:	00018481 	.word	0x00018481
   13144:	00034c3f 	.word	0x00034c3f
   13148:	20000414 	.word	0x20000414
   1314c:	000361c4 	.word	0x000361c4
   13150:	00034f41 	.word	0x00034f41
   13154:	000361c8 	.word	0x000361c8
   13158:	00034efd 	.word	0x00034efd
   1315c:	00034ff7 	.word	0x00034ff7
   13160:	000361d0 	.word	0x000361d0

00013164 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   13164:	b580      	push	{r7, lr}
   13166:	b084      	sub	sp, #16
   13168:	af00      	add	r7, sp, #0
   1316a:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   1316c:	687b      	ldr	r3, [r7, #4]
   1316e:	0018      	movs	r0, r3
   13170:	4b0c      	ldr	r3, [pc, #48]	; (131a4 <FreeRTOS_read+0x40>)
   13172:	4798      	blx	r3
   13174:	0003      	movs	r3, r0
   13176:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   13178:	e00d      	b.n	13196 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   1317a:	4b0b      	ldr	r3, [pc, #44]	; (131a8 <FreeRTOS_read+0x44>)
   1317c:	681a      	ldr	r2, [r3, #0]
   1317e:	2301      	movs	r3, #1
   13180:	425b      	negs	r3, r3
   13182:	0019      	movs	r1, r3
   13184:	0010      	movs	r0, r2
   13186:	4b09      	ldr	r3, [pc, #36]	; (131ac <FreeRTOS_read+0x48>)
   13188:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   1318a:	687b      	ldr	r3, [r7, #4]
   1318c:	0018      	movs	r0, r3
   1318e:	4b05      	ldr	r3, [pc, #20]	; (131a4 <FreeRTOS_read+0x40>)
   13190:	4798      	blx	r3
   13192:	0003      	movs	r3, r0
   13194:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   13196:	68fb      	ldr	r3, [r7, #12]
   13198:	3301      	adds	r3, #1
   1319a:	d0ee      	beq.n	1317a <FreeRTOS_read+0x16>
    }
}
   1319c:	46c0      	nop			; (mov r8, r8)
   1319e:	46bd      	mov	sp, r7
   131a0:	b004      	add	sp, #16
   131a2:	bd80      	pop	{r7, pc}
   131a4:	0001e481 	.word	0x0001e481
   131a8:	20004380 	.word	0x20004380
   131ac:	0001ba3d 	.word	0x0001ba3d

000131b0 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   131b0:	b580      	push	{r7, lr}
   131b2:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   131b4:	4b0a      	ldr	r3, [pc, #40]	; (131e0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131b6:	2200      	movs	r2, #0
   131b8:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   131ba:	4b0a      	ldr	r3, [pc, #40]	; (131e4 <CliCharReadySemaphoreGiveFromISR+0x34>)
   131bc:	681b      	ldr	r3, [r3, #0]
   131be:	4a08      	ldr	r2, [pc, #32]	; (131e0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131c0:	0011      	movs	r1, r2
   131c2:	0018      	movs	r0, r3
   131c4:	4b08      	ldr	r3, [pc, #32]	; (131e8 <CliCharReadySemaphoreGiveFromISR+0x38>)
   131c6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   131c8:	4b05      	ldr	r3, [pc, #20]	; (131e0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   131ca:	681b      	ldr	r3, [r3, #0]
   131cc:	2b00      	cmp	r3, #0
   131ce:	d003      	beq.n	131d8 <CliCharReadySemaphoreGiveFromISR+0x28>
   131d0:	4b06      	ldr	r3, [pc, #24]	; (131ec <CliCharReadySemaphoreGiveFromISR+0x3c>)
   131d2:	2280      	movs	r2, #128	; 0x80
   131d4:	0552      	lsls	r2, r2, #21
   131d6:	601a      	str	r2, [r3, #0]
}
   131d8:	46c0      	nop			; (mov r8, r8)
   131da:	46bd      	mov	sp, r7
   131dc:	bd80      	pop	{r7, pc}
   131de:	46c0      	nop			; (mov r8, r8)
   131e0:	20000418 	.word	0x20000418
   131e4:	20004380 	.word	0x20004380
   131e8:	0001b3b5 	.word	0x0001b3b5
   131ec:	e000ed04 	.word	0xe000ed04

000131f0 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   131f0:	b5b0      	push	{r4, r5, r7, lr}
   131f2:	b08a      	sub	sp, #40	; 0x28
   131f4:	af02      	add	r7, sp, #8
   131f6:	60f8      	str	r0, [r7, #12]
   131f8:	60b9      	str	r1, [r7, #8]
   131fa:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   131fc:	4b44      	ldr	r3, [pc, #272]	; (13310 <CLI_GetImuData+0x120>)
   131fe:	4798      	blx	r3
   13200:	0003      	movs	r3, r0
   13202:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   13204:	231b      	movs	r3, #27
   13206:	18fa      	adds	r2, r7, r3
   13208:	69fb      	ldr	r3, [r7, #28]
   1320a:	0011      	movs	r1, r2
   1320c:	0018      	movs	r0, r3
   1320e:	4b41      	ldr	r3, [pc, #260]	; (13314 <CLI_GetImuData+0x124>)
   13210:	4798      	blx	r3

    if (reg) {
   13212:	231b      	movs	r3, #27
   13214:	18fb      	adds	r3, r7, r3
   13216:	781b      	ldrb	r3, [r3, #0]
   13218:	2b00      	cmp	r3, #0
   1321a:	d05f      	beq.n	132dc <CLI_GetImuData+0xec>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   1321c:	4b3e      	ldr	r3, [pc, #248]	; (13318 <CLI_GetImuData+0x128>)
   1321e:	2206      	movs	r2, #6
   13220:	2100      	movs	r1, #0
   13222:	0018      	movs	r0, r3
   13224:	4b3d      	ldr	r3, [pc, #244]	; (1331c <CLI_GetImuData+0x12c>)
   13226:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   13228:	4a3b      	ldr	r2, [pc, #236]	; (13318 <CLI_GetImuData+0x128>)
   1322a:	69fb      	ldr	r3, [r7, #28]
   1322c:	0011      	movs	r1, r2
   1322e:	0018      	movs	r0, r3
   13230:	4b3b      	ldr	r3, [pc, #236]	; (13320 <CLI_GetImuData+0x130>)
   13232:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   13234:	4b38      	ldr	r3, [pc, #224]	; (13318 <CLI_GetImuData+0x128>)
   13236:	2200      	movs	r2, #0
   13238:	5e9b      	ldrsh	r3, [r3, r2]
   1323a:	0018      	movs	r0, r3
   1323c:	4b39      	ldr	r3, [pc, #228]	; (13324 <CLI_GetImuData+0x134>)
   1323e:	4798      	blx	r3
   13240:	1c02      	adds	r2, r0, #0
   13242:	4b39      	ldr	r3, [pc, #228]	; (13328 <CLI_GetImuData+0x138>)
   13244:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   13246:	4b34      	ldr	r3, [pc, #208]	; (13318 <CLI_GetImuData+0x128>)
   13248:	2202      	movs	r2, #2
   1324a:	5e9b      	ldrsh	r3, [r3, r2]
   1324c:	0018      	movs	r0, r3
   1324e:	4b35      	ldr	r3, [pc, #212]	; (13324 <CLI_GetImuData+0x134>)
   13250:	4798      	blx	r3
   13252:	1c02      	adds	r2, r0, #0
   13254:	4b34      	ldr	r3, [pc, #208]	; (13328 <CLI_GetImuData+0x138>)
   13256:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   13258:	4b2f      	ldr	r3, [pc, #188]	; (13318 <CLI_GetImuData+0x128>)
   1325a:	2204      	movs	r2, #4
   1325c:	5e9b      	ldrsh	r3, [r3, r2]
   1325e:	0018      	movs	r0, r3
   13260:	4b30      	ldr	r3, [pc, #192]	; (13324 <CLI_GetImuData+0x134>)
   13262:	4798      	blx	r3
   13264:	1c02      	adds	r2, r0, #0
   13266:	4b30      	ldr	r3, [pc, #192]	; (13328 <CLI_GetImuData+0x138>)
   13268:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   1326a:	4b2f      	ldr	r3, [pc, #188]	; (13328 <CLI_GetImuData+0x138>)
   1326c:	681a      	ldr	r2, [r3, #0]
   1326e:	4b2f      	ldr	r3, [pc, #188]	; (1332c <CLI_GetImuData+0x13c>)
   13270:	1c10      	adds	r0, r2, #0
   13272:	4798      	blx	r3
   13274:	0005      	movs	r5, r0
   13276:	4b2c      	ldr	r3, [pc, #176]	; (13328 <CLI_GetImuData+0x138>)
   13278:	685a      	ldr	r2, [r3, #4]
   1327a:	4b2c      	ldr	r3, [pc, #176]	; (1332c <CLI_GetImuData+0x13c>)
   1327c:	1c10      	adds	r0, r2, #0
   1327e:	4798      	blx	r3
   13280:	0004      	movs	r4, r0
   13282:	4b29      	ldr	r3, [pc, #164]	; (13328 <CLI_GetImuData+0x138>)
   13284:	689a      	ldr	r2, [r3, #8]
   13286:	4b29      	ldr	r3, [pc, #164]	; (1332c <CLI_GetImuData+0x13c>)
   13288:	1c10      	adds	r0, r2, #0
   1328a:	4798      	blx	r3
   1328c:	0003      	movs	r3, r0
   1328e:	4a28      	ldr	r2, [pc, #160]	; (13330 <CLI_GetImuData+0x140>)
   13290:	68b9      	ldr	r1, [r7, #8]
   13292:	68f8      	ldr	r0, [r7, #12]
   13294:	9301      	str	r3, [sp, #4]
   13296:	9400      	str	r4, [sp, #0]
   13298:	002b      	movs	r3, r5
   1329a:	4c26      	ldr	r4, [pc, #152]	; (13334 <CLI_GetImuData+0x144>)
   1329c:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   1329e:	4b22      	ldr	r3, [pc, #136]	; (13328 <CLI_GetImuData+0x138>)
   132a0:	681a      	ldr	r2, [r3, #0]
   132a2:	4b22      	ldr	r3, [pc, #136]	; (1332c <CLI_GetImuData+0x13c>)
   132a4:	1c10      	adds	r0, r2, #0
   132a6:	4798      	blx	r3
   132a8:	0003      	movs	r3, r0
   132aa:	b21a      	sxth	r2, r3
   132ac:	2314      	movs	r3, #20
   132ae:	18fb      	adds	r3, r7, r3
   132b0:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   132b2:	4b1d      	ldr	r3, [pc, #116]	; (13328 <CLI_GetImuData+0x138>)
   132b4:	685a      	ldr	r2, [r3, #4]
   132b6:	4b1d      	ldr	r3, [pc, #116]	; (1332c <CLI_GetImuData+0x13c>)
   132b8:	1c10      	adds	r0, r2, #0
   132ba:	4798      	blx	r3
   132bc:	0003      	movs	r3, r0
   132be:	b21a      	sxth	r2, r3
   132c0:	2314      	movs	r3, #20
   132c2:	18fb      	adds	r3, r7, r3
   132c4:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   132c6:	4b18      	ldr	r3, [pc, #96]	; (13328 <CLI_GetImuData+0x138>)
   132c8:	689a      	ldr	r2, [r3, #8]
   132ca:	4b18      	ldr	r3, [pc, #96]	; (1332c <CLI_GetImuData+0x13c>)
   132cc:	1c10      	adds	r0, r2, #0
   132ce:	4798      	blx	r3
   132d0:	0003      	movs	r3, r0
   132d2:	b21a      	sxth	r2, r3
   132d4:	2314      	movs	r3, #20
   132d6:	18fb      	adds	r3, r7, r3
   132d8:	809a      	strh	r2, [r3, #4]
   132da:	e014      	b.n	13306 <CLI_GetImuData+0x116>
		//WifiAddImuDataToQueue(&imuPacket);
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   132dc:	4a16      	ldr	r2, [pc, #88]	; (13338 <CLI_GetImuData+0x148>)
   132de:	68b9      	ldr	r1, [r7, #8]
   132e0:	68fb      	ldr	r3, [r7, #12]
   132e2:	0018      	movs	r0, r3
   132e4:	4b13      	ldr	r3, [pc, #76]	; (13334 <CLI_GetImuData+0x144>)
   132e6:	4798      	blx	r3
		imuPacket.xmg = -1;
   132e8:	2314      	movs	r3, #20
   132ea:	18fb      	adds	r3, r7, r3
   132ec:	2201      	movs	r2, #1
   132ee:	4252      	negs	r2, r2
   132f0:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   132f2:	2314      	movs	r3, #20
   132f4:	18fb      	adds	r3, r7, r3
   132f6:	2202      	movs	r2, #2
   132f8:	4252      	negs	r2, r2
   132fa:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   132fc:	2314      	movs	r3, #20
   132fe:	18fb      	adds	r3, r7, r3
   13300:	2203      	movs	r2, #3
   13302:	4252      	negs	r2, r2
   13304:	809a      	strh	r2, [r3, #4]
		//WifiAddImuDataToQueue(&imuPacket);
    }
    return pdFALSE;
   13306:	2300      	movs	r3, #0
}
   13308:	0018      	movs	r0, r3
   1330a:	46bd      	mov	sp, r7
   1330c:	b008      	add	sp, #32
   1330e:	bdb0      	pop	{r4, r5, r7, pc}
   13310:	00014fe1 	.word	0x00014fe1
   13314:	000149dd 	.word	0x000149dd
   13318:	2000041c 	.word	0x2000041c
   1331c:	00034c3f 	.word	0x00034c3f
   13320:	00014a19 	.word	0x00014a19
   13324:	0001426d 	.word	0x0001426d
   13328:	20000424 	.word	0x20000424
   1332c:	000331e5 	.word	0x000331e5
   13330:	000361d4 	.word	0x000361d4
   13334:	00034e99 	.word	0x00034e99
   13338:	000361f8 	.word	0x000361f8

0001333c <CLI_GetSHTC>:


BaseType_t CLI_GetSHTC(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString){
   1333c:	b590      	push	{r4, r7, lr}
   1333e:	b087      	sub	sp, #28
   13340:	af02      	add	r7, sp, #8
   13342:	60f8      	str	r0, [r7, #12]
   13344:	60b9      	str	r1, [r7, #8]
   13346:	607a      	str	r2, [r7, #4]
	static int16_t ht[2];
	if( !shtc_get(ht) ){
   13348:	4b12      	ldr	r3, [pc, #72]	; (13394 <CLI_GetSHTC+0x58>)
   1334a:	0018      	movs	r0, r3
   1334c:	4b12      	ldr	r3, [pc, #72]	; (13398 <CLI_GetSHTC+0x5c>)
   1334e:	4798      	blx	r3
   13350:	0003      	movs	r3, r0
   13352:	001a      	movs	r2, r3
   13354:	2301      	movs	r3, #1
   13356:	4053      	eors	r3, r2
   13358:	b2db      	uxtb	r3, r3
   1335a:	2b00      	cmp	r3, #0
   1335c:	d007      	beq.n	1336e <CLI_GetSHTC+0x32>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "SHTC error!\r\n");
   1335e:	4a0f      	ldr	r2, [pc, #60]	; (1339c <CLI_GetSHTC+0x60>)
   13360:	68b9      	ldr	r1, [r7, #8]
   13362:	68fb      	ldr	r3, [r7, #12]
   13364:	0018      	movs	r0, r3
   13366:	4b0e      	ldr	r3, [pc, #56]	; (133a0 <CLI_GetSHTC+0x64>)
   13368:	4798      	blx	r3
		return pdFALSE;
   1336a:	2300      	movs	r3, #0
   1336c:	e00e      	b.n	1338c <CLI_GetSHTC+0x50>
	}
	
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "humidity = %d , temp = %d \r\n", (int)ht[0], (int)ht[1]);
   1336e:	4b09      	ldr	r3, [pc, #36]	; (13394 <CLI_GetSHTC+0x58>)
   13370:	2200      	movs	r2, #0
   13372:	5e9b      	ldrsh	r3, [r3, r2]
   13374:	001c      	movs	r4, r3
   13376:	4b07      	ldr	r3, [pc, #28]	; (13394 <CLI_GetSHTC+0x58>)
   13378:	2202      	movs	r2, #2
   1337a:	5e9b      	ldrsh	r3, [r3, r2]
   1337c:	4a09      	ldr	r2, [pc, #36]	; (133a4 <CLI_GetSHTC+0x68>)
   1337e:	68b9      	ldr	r1, [r7, #8]
   13380:	68f8      	ldr	r0, [r7, #12]
   13382:	9300      	str	r3, [sp, #0]
   13384:	0023      	movs	r3, r4
   13386:	4c06      	ldr	r4, [pc, #24]	; (133a0 <CLI_GetSHTC+0x64>)
   13388:	47a0      	blx	r4
	return pdFALSE;
   1338a:	2300      	movs	r3, #0
}
   1338c:	0018      	movs	r0, r3
   1338e:	46bd      	mov	sp, r7
   13390:	b005      	add	sp, #20
   13392:	bd90      	pop	{r4, r7, pc}
   13394:	20000430 	.word	0x20000430
   13398:	000156dd 	.word	0x000156dd
   1339c:	00036220 	.word	0x00036220
   133a0:	00034e99 	.word	0x00034e99
   133a4:	00036230 	.word	0x00036230

000133a8 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133a8:	b590      	push	{r4, r7, lr}
   133aa:	b087      	sub	sp, #28
   133ac:	af00      	add	r7, sp, #0
   133ae:	60f8      	str	r0, [r7, #12]
   133b0:	60b9      	str	r1, [r7, #8]
   133b2:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   133b4:	2317      	movs	r3, #23
   133b6:	18fb      	adds	r3, r7, r3
   133b8:	221b      	movs	r2, #27
   133ba:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   133bc:	2317      	movs	r3, #23
   133be:	18fb      	adds	r3, r7, r3
   133c0:	781b      	ldrb	r3, [r3, #0]
   133c2:	4a08      	ldr	r2, [pc, #32]	; (133e4 <xCliClearTerminalScreen+0x3c>)
   133c4:	4808      	ldr	r0, [pc, #32]	; (133e8 <xCliClearTerminalScreen+0x40>)
   133c6:	210f      	movs	r1, #15
   133c8:	4c08      	ldr	r4, [pc, #32]	; (133ec <xCliClearTerminalScreen+0x44>)
   133ca:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   133cc:	4a06      	ldr	r2, [pc, #24]	; (133e8 <xCliClearTerminalScreen+0x40>)
   133ce:	68b9      	ldr	r1, [r7, #8]
   133d0:	68fb      	ldr	r3, [r7, #12]
   133d2:	0018      	movs	r0, r3
   133d4:	4b05      	ldr	r3, [pc, #20]	; (133ec <xCliClearTerminalScreen+0x44>)
   133d6:	4798      	blx	r3
    return pdFALSE;
   133d8:	2300      	movs	r3, #0
}
   133da:	0018      	movs	r0, r3
   133dc:	46bd      	mov	sp, r7
   133de:	b007      	add	sp, #28
   133e0:	bd90      	pop	{r4, r7, pc}
   133e2:	46c0      	nop			; (mov r8, r8)
   133e4:	00036250 	.word	0x00036250
   133e8:	20000334 	.word	0x20000334
   133ec:	00034e99 	.word	0x00034e99

000133f0 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   133f0:	b580      	push	{r7, lr}
   133f2:	b084      	sub	sp, #16
   133f4:	af00      	add	r7, sp, #0
   133f6:	60f8      	str	r0, [r7, #12]
   133f8:	60b9      	str	r1, [r7, #8]
   133fa:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   133fc:	2002      	movs	r0, #2
   133fe:	4b03      	ldr	r3, [pc, #12]	; (1340c <CLI_OTAU+0x1c>)
   13400:	4798      	blx	r3

    return pdFALSE;
   13402:	2300      	movs	r3, #0
}
   13404:	0018      	movs	r0, r3
   13406:	46bd      	mov	sp, r7
   13408:	b004      	add	sp, #16
   1340a:	bd80      	pop	{r7, pc}
   1340c:	000177ad 	.word	0x000177ad

00013410 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13410:	b580      	push	{r7, lr}
   13412:	b084      	sub	sp, #16
   13414:	af00      	add	r7, sp, #0
   13416:	60f8      	str	r0, [r7, #12]
   13418:	60b9      	str	r1, [r7, #8]
   1341a:	607a      	str	r2, [r7, #4]
    system_reset();
   1341c:	4b03      	ldr	r3, [pc, #12]	; (1342c <CLI_ResetDevice+0x1c>)
   1341e:	4798      	blx	r3
    return pdFALSE;
   13420:	2300      	movs	r3, #0
}
   13422:	0018      	movs	r0, r3
   13424:	46bd      	mov	sp, r7
   13426:	b004      	add	sp, #16
   13428:	bd80      	pop	{r7, pc}
   1342a:	46c0      	nop			; (mov r8, r8)
   1342c:	00012e5d 	.word	0x00012e5d

00013430 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13430:	b590      	push	{r4, r7, lr}
   13432:	b097      	sub	sp, #92	; 0x5c
   13434:	af02      	add	r7, sp, #8
   13436:	60f8      	str	r0, [r7, #12]
   13438:	60b9      	str	r1, [r7, #8]
   1343a:	607a      	str	r2, [r7, #4]
    int8_t  *pcParameter1, *pcParameter2, *pcParameter3, *pcParameter4, *pcParameter5;
    int seesaw_num, R, G, B, Keynum;
    BaseType_t xParameter1StringLength, xParameter2StringLength, xParameter3StringLength, xParameter4StringLength, xParameter5StringLength;

    pcParameter1 = FreeRTOS_CLIGetParameter( pcCommandString,
   1343c:	2324      	movs	r3, #36	; 0x24
   1343e:	18fa      	adds	r2, r7, r3
   13440:	687b      	ldr	r3, [r7, #4]
   13442:	2101      	movs	r1, #1
   13444:	0018      	movs	r0, r3
   13446:	4b6a      	ldr	r3, [pc, #424]	; (135f0 <CLI_NeotrellisSetLed+0x1c0>)
   13448:	4798      	blx	r3
   1344a:	0003      	movs	r3, r0
   1344c:	64bb      	str	r3, [r7, #72]	; 0x48
    1,
    &xParameter1StringLength);

    pcParameter2 = FreeRTOS_CLIGetParameter( pcCommandString,
   1344e:	2320      	movs	r3, #32
   13450:	18fa      	adds	r2, r7, r3
   13452:	687b      	ldr	r3, [r7, #4]
   13454:	2102      	movs	r1, #2
   13456:	0018      	movs	r0, r3
   13458:	4b65      	ldr	r3, [pc, #404]	; (135f0 <CLI_NeotrellisSetLed+0x1c0>)
   1345a:	4798      	blx	r3
   1345c:	0003      	movs	r3, r0
   1345e:	647b      	str	r3, [r7, #68]	; 0x44
    2,
    &xParameter2StringLength );
    
    pcParameter3 = FreeRTOS_CLIGetParameter( pcCommandString,
   13460:	231c      	movs	r3, #28
   13462:	18fa      	adds	r2, r7, r3
   13464:	687b      	ldr	r3, [r7, #4]
   13466:	2103      	movs	r1, #3
   13468:	0018      	movs	r0, r3
   1346a:	4b61      	ldr	r3, [pc, #388]	; (135f0 <CLI_NeotrellisSetLed+0x1c0>)
   1346c:	4798      	blx	r3
   1346e:	0003      	movs	r3, r0
   13470:	643b      	str	r3, [r7, #64]	; 0x40
    3,
    &xParameter3StringLength );
    
    pcParameter4 = FreeRTOS_CLIGetParameter( pcCommandString,
   13472:	2318      	movs	r3, #24
   13474:	18fa      	adds	r2, r7, r3
   13476:	687b      	ldr	r3, [r7, #4]
   13478:	2104      	movs	r1, #4
   1347a:	0018      	movs	r0, r3
   1347c:	4b5c      	ldr	r3, [pc, #368]	; (135f0 <CLI_NeotrellisSetLed+0x1c0>)
   1347e:	4798      	blx	r3
   13480:	0003      	movs	r3, r0
   13482:	63fb      	str	r3, [r7, #60]	; 0x3c
    4,
    &xParameter4StringLength );
	
	 pcParameter5 = FreeRTOS_CLIGetParameter( pcCommandString,
   13484:	2314      	movs	r3, #20
   13486:	18fa      	adds	r2, r7, r3
   13488:	687b      	ldr	r3, [r7, #4]
   1348a:	2105      	movs	r1, #5
   1348c:	0018      	movs	r0, r3
   1348e:	4b58      	ldr	r3, [pc, #352]	; (135f0 <CLI_NeotrellisSetLed+0x1c0>)
   13490:	4798      	blx	r3
   13492:	0003      	movs	r3, r0
   13494:	63bb      	str	r3, [r7, #56]	; 0x38
	 5,
	 &xParameter5StringLength );
    
    pcParameter1[ xParameter1StringLength ] = 0x00;
   13496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13498:	001a      	movs	r2, r3
   1349a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1349c:	189b      	adds	r3, r3, r2
   1349e:	2200      	movs	r2, #0
   134a0:	701a      	strb	r2, [r3, #0]
    pcParameter2[ xParameter2StringLength ] = 0x00;
   134a2:	6a3b      	ldr	r3, [r7, #32]
   134a4:	001a      	movs	r2, r3
   134a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   134a8:	189b      	adds	r3, r3, r2
   134aa:	2200      	movs	r2, #0
   134ac:	701a      	strb	r2, [r3, #0]
    pcParameter3[ xParameter3StringLength ] = 0x00;
   134ae:	69fb      	ldr	r3, [r7, #28]
   134b0:	001a      	movs	r2, r3
   134b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   134b4:	189b      	adds	r3, r3, r2
   134b6:	2200      	movs	r2, #0
   134b8:	701a      	strb	r2, [r3, #0]
    pcParameter4[ xParameter4StringLength ] = 0x00;
   134ba:	69bb      	ldr	r3, [r7, #24]
   134bc:	001a      	movs	r2, r3
   134be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   134c0:	189b      	adds	r3, r3, r2
   134c2:	2200      	movs	r2, #0
   134c4:	701a      	strb	r2, [r3, #0]
	pcParameter5[ xParameter5StringLength ] = 0x00;
   134c6:	697b      	ldr	r3, [r7, #20]
   134c8:	001a      	movs	r2, r3
   134ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   134cc:	189b      	adds	r3, r3, r2
   134ce:	2200      	movs	r2, #0
   134d0:	701a      	strb	r2, [r3, #0]
    
	seesaw_num = atoi(pcParameter1); 
   134d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   134d4:	0018      	movs	r0, r3
   134d6:	4b47      	ldr	r3, [pc, #284]	; (135f4 <CLI_NeotrellisSetLed+0x1c4>)
   134d8:	4798      	blx	r3
   134da:	0003      	movs	r3, r0
   134dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    Keynum = atoi(pcParameter2);
   134de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   134e0:	0018      	movs	r0, r3
   134e2:	4b44      	ldr	r3, [pc, #272]	; (135f4 <CLI_NeotrellisSetLed+0x1c4>)
   134e4:	4798      	blx	r3
   134e6:	0003      	movs	r3, r0
   134e8:	637b      	str	r3, [r7, #52]	; 0x34
    R = atoi(pcParameter3);
   134ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   134ec:	0018      	movs	r0, r3
   134ee:	4b41      	ldr	r3, [pc, #260]	; (135f4 <CLI_NeotrellisSetLed+0x1c4>)
   134f0:	4798      	blx	r3
   134f2:	0003      	movs	r3, r0
   134f4:	633b      	str	r3, [r7, #48]	; 0x30
    G = atoi(pcParameter4);
   134f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   134f8:	0018      	movs	r0, r3
   134fa:	4b3e      	ldr	r3, [pc, #248]	; (135f4 <CLI_NeotrellisSetLed+0x1c4>)
   134fc:	4798      	blx	r3
   134fe:	0003      	movs	r3, r0
   13500:	62fb      	str	r3, [r7, #44]	; 0x2c
    B = atoi(pcParameter5);
   13502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   13504:	0018      	movs	r0, r3
   13506:	4b3b      	ldr	r3, [pc, #236]	; (135f4 <CLI_NeotrellisSetLed+0x1c4>)
   13508:	4798      	blx	r3
   1350a:	0003      	movs	r3, r0
   1350c:	62bb      	str	r3, [r7, #40]	; 0x28
    
	
	if(seesaw_num == 1){
   1350e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   13510:	2b01      	cmp	r3, #1
   13512:	d102      	bne.n	1351a <CLI_NeotrellisSetLed+0xea>
		seesaw_num = NEO_TRELLIS_ADDR_1;
   13514:	232e      	movs	r3, #46	; 0x2e
   13516:	64fb      	str	r3, [r7, #76]	; 0x4c
   13518:	e007      	b.n	1352a <CLI_NeotrellisSetLed+0xfa>
	}
	else if(seesaw_num == 2){
   1351a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1351c:	2b02      	cmp	r3, #2
   1351e:	d102      	bne.n	13526 <CLI_NeotrellisSetLed+0xf6>
		seesaw_num = NEO_TRELLIS_ADDR_2;
   13520:	232f      	movs	r3, #47	; 0x2f
   13522:	64fb      	str	r3, [r7, #76]	; 0x4c
   13524:	e001      	b.n	1352a <CLI_NeotrellisSetLed+0xfa>
	}
	else{
		return pdFALSE;
   13526:	2300      	movs	r3, #0
   13528:	e05d      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
	}
	
    //sanitize
    if(Keynum < 0 || Keynum > 15){
   1352a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1352c:	2b00      	cmp	r3, #0
   1352e:	db02      	blt.n	13536 <CLI_NeotrellisSetLed+0x106>
   13530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13532:	2b0f      	cmp	r3, #15
   13534:	dd07      	ble.n	13546 <CLI_NeotrellisSetLed+0x116>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Keynum must be between 0 to 15\r\n");
   13536:	4a30      	ldr	r2, [pc, #192]	; (135f8 <CLI_NeotrellisSetLed+0x1c8>)
   13538:	68b9      	ldr	r1, [r7, #8]
   1353a:	68fb      	ldr	r3, [r7, #12]
   1353c:	0018      	movs	r0, r3
   1353e:	4b2f      	ldr	r3, [pc, #188]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   13540:	4798      	blx	r3
	    return pdFALSE;
   13542:	2300      	movs	r3, #0
   13544:	e04f      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
    }
    
    if (R < 0 || R > 255){
   13546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13548:	2b00      	cmp	r3, #0
   1354a:	db02      	blt.n	13552 <CLI_NeotrellisSetLed+0x122>
   1354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1354e:	2bff      	cmp	r3, #255	; 0xff
   13550:	dd07      	ble.n	13562 <CLI_NeotrellisSetLed+0x132>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Red must be between 0 and 255\r\n");
   13552:	4a2b      	ldr	r2, [pc, #172]	; (13600 <CLI_NeotrellisSetLed+0x1d0>)
   13554:	68b9      	ldr	r1, [r7, #8]
   13556:	68fb      	ldr	r3, [r7, #12]
   13558:	0018      	movs	r0, r3
   1355a:	4b28      	ldr	r3, [pc, #160]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   1355c:	4798      	blx	r3
	    return pdFALSE;
   1355e:	2300      	movs	r3, #0
   13560:	e041      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
    }
    
    if (G < 0 || G > 255){
   13562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13564:	2b00      	cmp	r3, #0
   13566:	db02      	blt.n	1356e <CLI_NeotrellisSetLed+0x13e>
   13568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1356a:	2bff      	cmp	r3, #255	; 0xff
   1356c:	dd07      	ble.n	1357e <CLI_NeotrellisSetLed+0x14e>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Green must be between 0 and 255\r\n");
   1356e:	4a25      	ldr	r2, [pc, #148]	; (13604 <CLI_NeotrellisSetLed+0x1d4>)
   13570:	68b9      	ldr	r1, [r7, #8]
   13572:	68fb      	ldr	r3, [r7, #12]
   13574:	0018      	movs	r0, r3
   13576:	4b21      	ldr	r3, [pc, #132]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   13578:	4798      	blx	r3
	    return pdFALSE;
   1357a:	2300      	movs	r3, #0
   1357c:	e033      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
    }
    
    if (B < 0 || B > 255){
   1357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13580:	2b00      	cmp	r3, #0
   13582:	db02      	blt.n	1358a <CLI_NeotrellisSetLed+0x15a>
   13584:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13586:	2bff      	cmp	r3, #255	; 0xff
   13588:	dd07      	ble.n	1359a <CLI_NeotrellisSetLed+0x16a>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "Blue must be between 0 and 255\r\n");
   1358a:	4a1f      	ldr	r2, [pc, #124]	; (13608 <CLI_NeotrellisSetLed+0x1d8>)
   1358c:	68b9      	ldr	r1, [r7, #8]
   1358e:	68fb      	ldr	r3, [r7, #12]
   13590:	0018      	movs	r0, r3
   13592:	4b1a      	ldr	r3, [pc, #104]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   13594:	4798      	blx	r3
	    return pdFALSE;
   13596:	2300      	movs	r3, #0
   13598:	e025      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
    }
    
    if (SeesawSetLed(seesaw_num, Keynum, R, G, B)){
   1359a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1359c:	b2d8      	uxtb	r0, r3
   1359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   135a0:	b2d9      	uxtb	r1, r3
   135a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   135a4:	b2da      	uxtb	r2, r3
   135a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   135a8:	b2dc      	uxtb	r4, r3
   135aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135ac:	b2db      	uxtb	r3, r3
   135ae:	9300      	str	r3, [sp, #0]
   135b0:	0023      	movs	r3, r4
   135b2:	4c16      	ldr	r4, [pc, #88]	; (1360c <CLI_NeotrellisSetLed+0x1dc>)
   135b4:	47a0      	blx	r4
   135b6:	1e03      	subs	r3, r0, #0
   135b8:	d007      	beq.n	135ca <CLI_NeotrellisSetLed+0x19a>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "unexpected I2C error\r\n");
   135ba:	4a15      	ldr	r2, [pc, #84]	; (13610 <CLI_NeotrellisSetLed+0x1e0>)
   135bc:	68b9      	ldr	r1, [r7, #8]
   135be:	68fb      	ldr	r3, [r7, #12]
   135c0:	0018      	movs	r0, r3
   135c2:	4b0e      	ldr	r3, [pc, #56]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   135c4:	4798      	blx	r3
	    return pdFALSE;
   135c6:	2300      	movs	r3, #0
   135c8:	e00d      	b.n	135e6 <CLI_NeotrellisSetLed+0x1b6>
    }
    
    if(SeesawOrderLedUpdate(seesaw_num)){
   135ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   135cc:	b2db      	uxtb	r3, r3
   135ce:	0018      	movs	r0, r3
   135d0:	4b10      	ldr	r3, [pc, #64]	; (13614 <CLI_NeotrellisSetLed+0x1e4>)
   135d2:	4798      	blx	r3
   135d4:	1e03      	subs	r3, r0, #0
   135d6:	d005      	beq.n	135e4 <CLI_NeotrellisSetLed+0x1b4>
	    snprintf(pcWriteBuffer,xWriteBufferLen, "unexpected I2C error\r\n");
   135d8:	4a0d      	ldr	r2, [pc, #52]	; (13610 <CLI_NeotrellisSetLed+0x1e0>)
   135da:	68b9      	ldr	r1, [r7, #8]
   135dc:	68fb      	ldr	r3, [r7, #12]
   135de:	0018      	movs	r0, r3
   135e0:	4b06      	ldr	r3, [pc, #24]	; (135fc <CLI_NeotrellisSetLed+0x1cc>)
   135e2:	4798      	blx	r3
    }

    return pdFALSE;
   135e4:	2300      	movs	r3, #0
}
   135e6:	0018      	movs	r0, r3
   135e8:	46bd      	mov	sp, r7
   135ea:	b015      	add	sp, #84	; 0x54
   135ec:	bd90      	pop	{r4, r7, pc}
   135ee:	46c0      	nop			; (mov r8, r8)
   135f0:	000185a9 	.word	0x000185a9
   135f4:	00034b8d 	.word	0x00034b8d
   135f8:	00036258 	.word	0x00036258
   135fc:	00034e99 	.word	0x00034e99
   13600:	0003627c 	.word	0x0003627c
   13604:	0003629c 	.word	0x0003629c
   13608:	000362c0 	.word	0x000362c0
   1360c:	000153cd 	.word	0x000153cd
   13610:	000362e4 	.word	0x000362e4
   13614:	0001549d 	.word	0x0001549d

00013618 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13618:	b590      	push	{r4, r7, lr}
   1361a:	b08f      	sub	sp, #60	; 0x3c
   1361c:	af00      	add	r7, sp, #0
   1361e:	60f8      	str	r0, [r7, #12]
   13620:	60b9      	str	r1, [r7, #8]
   13622:	607a      	str	r2, [r7, #4]

  I2C_Data i2cOled; 
        uint8_t address;
  //Send 0 command byte
  uint8_t dataOut[2] = {0,0};
   13624:	2318      	movs	r3, #24
   13626:	18fb      	adds	r3, r7, r3
   13628:	2200      	movs	r2, #0
   1362a:	701a      	strb	r2, [r3, #0]
   1362c:	2318      	movs	r3, #24
   1362e:	18fb      	adds	r3, r7, r3
   13630:	2200      	movs	r2, #0
   13632:	705a      	strb	r2, [r3, #1]
  uint8_t dataIn[2];
  dataOut[0] = 0;
   13634:	2318      	movs	r3, #24
   13636:	18fb      	adds	r3, r7, r3
   13638:	2200      	movs	r2, #0
   1363a:	701a      	strb	r2, [r3, #0]
  dataOut[1] = 0;
   1363c:	2318      	movs	r3, #24
   1363e:	18fb      	adds	r3, r7, r3
   13640:	2200      	movs	r2, #0
   13642:	705a      	strb	r2, [r3, #1]
  i2cOled.address = 0;
   13644:	231c      	movs	r3, #28
   13646:	18fb      	adds	r3, r7, r3
   13648:	2200      	movs	r2, #0
   1364a:	701a      	strb	r2, [r3, #0]
  i2cOled.msgIn = (uint8_t*) &dataIn[0];
   1364c:	231c      	movs	r3, #28
   1364e:	18fb      	adds	r3, r7, r3
   13650:	2214      	movs	r2, #20
   13652:	18ba      	adds	r2, r7, r2
   13654:	609a      	str	r2, [r3, #8]
  i2cOled.lenOut = 1;
   13656:	231c      	movs	r3, #28
   13658:	18fb      	adds	r3, r7, r3
   1365a:	2201      	movs	r2, #1
   1365c:	81da      	strh	r2, [r3, #14]
  i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   1365e:	231c      	movs	r3, #28
   13660:	18fb      	adds	r3, r7, r3
   13662:	2218      	movs	r2, #24
   13664:	18ba      	adds	r2, r7, r2
   13666:	605a      	str	r2, [r3, #4]
  i2cOled.lenIn = 1;
   13668:	231c      	movs	r3, #28
   1366a:	18fb      	adds	r3, r7, r3
   1366c:	2201      	movs	r2, #1
   1366e:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   13670:	4b2a      	ldr	r3, [pc, #168]	; (1371c <CLI_i2cScan+0x104>)
   13672:	0018      	movs	r0, r3
   13674:	4b2a      	ldr	r3, [pc, #168]	; (13720 <CLI_i2cScan+0x108>)
   13676:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13678:	2300      	movs	r3, #0
   1367a:	637b      	str	r3, [r7, #52]	; 0x34
   1367c:	e042      	b.n	13704 <CLI_i2cScan+0xec>
            {
    snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   1367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13680:	4a28      	ldr	r2, [pc, #160]	; (13724 <CLI_i2cScan+0x10c>)
   13682:	4829      	ldr	r0, [pc, #164]	; (13728 <CLI_i2cScan+0x110>)
   13684:	210f      	movs	r1, #15
   13686:	4c29      	ldr	r4, [pc, #164]	; (1372c <CLI_i2cScan+0x114>)
   13688:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   1368a:	4b27      	ldr	r3, [pc, #156]	; (13728 <CLI_i2cScan+0x110>)
   1368c:	0018      	movs	r0, r3
   1368e:	4b24      	ldr	r3, [pc, #144]	; (13720 <CLI_i2cScan+0x108>)
   13690:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   13692:	2300      	movs	r3, #0
   13694:	633b      	str	r3, [r7, #48]	; 0x30
   13696:	e02b      	b.n	136f0 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1369a:	b2da      	uxtb	r2, r3
   1369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1369e:	b2db      	uxtb	r3, r3
   136a0:	18d3      	adds	r3, r2, r3
   136a2:	b2da      	uxtb	r2, r3
   136a4:	231c      	movs	r3, #28
   136a6:	18fb      	adds	r3, r7, r3
   136a8:	701a      	strb	r2, [r3, #0]

                     
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   136aa:	231c      	movs	r3, #28
   136ac:	18fb      	adds	r3, r7, r3
   136ae:	2264      	movs	r2, #100	; 0x64
   136b0:	2164      	movs	r1, #100	; 0x64
   136b2:	0018      	movs	r0, r3
   136b4:	4b1e      	ldr	r3, [pc, #120]	; (13730 <CLI_i2cScan+0x118>)
   136b6:	4798      	blx	r3
   136b8:	0003      	movs	r3, r0
   136ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   136bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   136be:	2b00      	cmp	r3, #0
   136c0:	d10c      	bne.n	136dc <CLI_i2cScan+0xc4>
                    {
      snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   136c2:	231c      	movs	r3, #28
   136c4:	18fb      	adds	r3, r7, r3
   136c6:	781b      	ldrb	r3, [r3, #0]
   136c8:	4a1a      	ldr	r2, [pc, #104]	; (13734 <CLI_i2cScan+0x11c>)
   136ca:	4817      	ldr	r0, [pc, #92]	; (13728 <CLI_i2cScan+0x110>)
   136cc:	210f      	movs	r1, #15
   136ce:	4c17      	ldr	r4, [pc, #92]	; (1372c <CLI_i2cScan+0x114>)
   136d0:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   136d2:	4b15      	ldr	r3, [pc, #84]	; (13728 <CLI_i2cScan+0x110>)
   136d4:	0018      	movs	r0, r3
   136d6:	4b12      	ldr	r3, [pc, #72]	; (13720 <CLI_i2cScan+0x108>)
   136d8:	4798      	blx	r3
   136da:	e006      	b.n	136ea <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   136dc:	4b12      	ldr	r3, [pc, #72]	; (13728 <CLI_i2cScan+0x110>)
   136de:	4a16      	ldr	r2, [pc, #88]	; (13738 <CLI_i2cScan+0x120>)
   136e0:	601a      	str	r2, [r3, #0]
      SerialConsoleWriteString(bufCli);
   136e2:	4b11      	ldr	r3, [pc, #68]	; (13728 <CLI_i2cScan+0x110>)
   136e4:	0018      	movs	r0, r3
   136e6:	4b0e      	ldr	r3, [pc, #56]	; (13720 <CLI_i2cScan+0x108>)
   136e8:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   136ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   136ec:	3301      	adds	r3, #1
   136ee:	633b      	str	r3, [r7, #48]	; 0x30
   136f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   136f2:	2b0f      	cmp	r3, #15
   136f4:	ddd0      	ble.n	13698 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   136f6:	4b11      	ldr	r3, [pc, #68]	; (1373c <CLI_i2cScan+0x124>)
   136f8:	0018      	movs	r0, r3
   136fa:	4b09      	ldr	r3, [pc, #36]	; (13720 <CLI_i2cScan+0x108>)
   136fc:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   136fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13700:	3310      	adds	r3, #16
   13702:	637b      	str	r3, [r7, #52]	; 0x34
   13704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13706:	2b7f      	cmp	r3, #127	; 0x7f
   13708:	ddb9      	ble.n	1367e <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   1370a:	4b0c      	ldr	r3, [pc, #48]	; (1373c <CLI_i2cScan+0x124>)
   1370c:	0018      	movs	r0, r3
   1370e:	4b04      	ldr	r3, [pc, #16]	; (13720 <CLI_i2cScan+0x108>)
   13710:	4798      	blx	r3
   return pdFALSE;
   13712:	2300      	movs	r3, #0

   13714:	0018      	movs	r0, r3
   13716:	46bd      	mov	sp, r7
   13718:	b00f      	add	sp, #60	; 0x3c
   1371a:	bd90      	pop	{r4, r7, pc}
   1371c:	000362fc 	.word	0x000362fc
   13720:	0001e3e5 	.word	0x0001e3e5
   13724:	00036330 	.word	0x00036330
   13728:	20000334 	.word	0x20000334
   1372c:	00034e99 	.word	0x00034e99
   13730:	00014115 	.word	0x00014115
   13734:	00036338 	.word	0x00036338
   13738:	00202058 	.word	0x00202058
   1373c:	000361c0 	.word	0x000361c0

00013740 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   13740:	b580      	push	{r7, lr}
   13742:	b082      	sub	sp, #8
   13744:	af00      	add	r7, sp, #0
   13746:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   13748:	4b1a      	ldr	r3, [pc, #104]	; (137b4 <vControlHandlerTask+0x74>)
   1374a:	0018      	movs	r0, r3
   1374c:	4b1a      	ldr	r3, [pc, #104]	; (137b8 <vControlHandlerTask+0x78>)
   1374e:	4798      	blx	r3

    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   13750:	4b1a      	ldr	r3, [pc, #104]	; (137bc <vControlHandlerTask+0x7c>)
   13752:	2200      	movs	r2, #0
   13754:	701a      	strb	r2, [r3, #0]
	
    while (1) {
        switch (controlState) {
   13756:	4b19      	ldr	r3, [pc, #100]	; (137bc <vControlHandlerTask+0x7c>)
   13758:	781b      	ldrb	r3, [r3, #0]
   1375a:	2b01      	cmp	r3, #1
   1375c:	d008      	beq.n	13770 <vControlHandlerTask+0x30>
   1375e:	dc02      	bgt.n	13766 <vControlHandlerTask+0x26>
   13760:	2b00      	cmp	r3, #0
   13762:	d01c      	beq.n	1379e <vControlHandlerTask+0x5e>
   13764:	e017      	b.n	13796 <vControlHandlerTask+0x56>
   13766:	2b02      	cmp	r3, #2
   13768:	d01b      	beq.n	137a2 <vControlHandlerTask+0x62>
   1376a:	2b03      	cmp	r3, #3
   1376c:	d008      	beq.n	13780 <vControlHandlerTask+0x40>
   1376e:	e012      	b.n	13796 <vControlHandlerTask+0x56>
            case (CONTROL_WAIT_FOR_GAME): { 
                break;
            }

            case (CONTROL_WAIT_FOR_PLACE): {  
				if(placement_status == true){
   13770:	4b13      	ldr	r3, [pc, #76]	; (137c0 <vControlHandlerTask+0x80>)
   13772:	781b      	ldrb	r3, [r3, #0]
   13774:	2b00      	cmp	r3, #0
   13776:	d016      	beq.n	137a6 <vControlHandlerTask+0x66>
					controlState = CONTROL_WAIT_FOR_TURN;
   13778:	4b10      	ldr	r3, [pc, #64]	; (137bc <vControlHandlerTask+0x7c>)
   1377a:	2202      	movs	r2, #2
   1377c:	701a      	strb	r2, [r3, #0]
				}
                break;
   1377e:	e012      	b.n	137a6 <vControlHandlerTask+0x66>
            }
			case (CONTROL_WAIT_FOR_TURN): {
				break;
			}
			case (CONTROL_WAIT_FOR_ACTION): {
				if(is_fired == true){
   13780:	4b10      	ldr	r3, [pc, #64]	; (137c4 <vControlHandlerTask+0x84>)
   13782:	781b      	ldrb	r3, [r3, #0]
   13784:	2b00      	cmp	r3, #0
   13786:	d010      	beq.n	137aa <vControlHandlerTask+0x6a>
					controlState = CONTROL_WAIT_FOR_TURN;
   13788:	4b0c      	ldr	r3, [pc, #48]	; (137bc <vControlHandlerTask+0x7c>)
   1378a:	2202      	movs	r2, #2
   1378c:	701a      	strb	r2, [r3, #0]
					is_fired = false;
   1378e:	4b0d      	ldr	r3, [pc, #52]	; (137c4 <vControlHandlerTask+0x84>)
   13790:	2200      	movs	r2, #0
   13792:	701a      	strb	r2, [r3, #0]
				}
				break;
   13794:	e009      	b.n	137aa <vControlHandlerTask+0x6a>
			}


            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   13796:	4b09      	ldr	r3, [pc, #36]	; (137bc <vControlHandlerTask+0x7c>)
   13798:	2200      	movs	r2, #0
   1379a:	701a      	strb	r2, [r3, #0]
                break;
   1379c:	e006      	b.n	137ac <vControlHandlerTask+0x6c>
                break;
   1379e:	46c0      	nop			; (mov r8, r8)
   137a0:	e004      	b.n	137ac <vControlHandlerTask+0x6c>
				break;
   137a2:	46c0      	nop			; (mov r8, r8)
   137a4:	e002      	b.n	137ac <vControlHandlerTask+0x6c>
                break;
   137a6:	46c0      	nop			; (mov r8, r8)
   137a8:	e000      	b.n	137ac <vControlHandlerTask+0x6c>
				break;
   137aa:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   137ac:	2028      	movs	r0, #40	; 0x28
   137ae:	4b06      	ldr	r3, [pc, #24]	; (137c8 <vControlHandlerTask+0x88>)
   137b0:	4798      	blx	r3
        switch (controlState) {
   137b2:	e7d0      	b.n	13756 <vControlHandlerTask+0x16>
   137b4:	000363b0 	.word	0x000363b0
   137b8:	0001e3e5 	.word	0x0001e3e5
   137bc:	20004384 	.word	0x20004384
   137c0:	20000434 	.word	0x20000434
   137c4:	20000435 	.word	0x20000435
   137c8:	0001c791 	.word	0x0001c791

000137cc <ControlSetGame>:
}



void ControlSetGame(uint8_t *shiparr_in,uint8_t ship_num_in)
{
   137cc:	b590      	push	{r4, r7, lr}
   137ce:	b085      	sub	sp, #20
   137d0:	af02      	add	r7, sp, #8
   137d2:	6078      	str	r0, [r7, #4]
   137d4:	000a      	movs	r2, r1
   137d6:	1cfb      	adds	r3, r7, #3
   137d8:	701a      	strb	r2, [r3, #0]
	memcpy (ship_arr, shiparr_in, ship_num_in * sizeof (uint8_t));
   137da:	1cfb      	adds	r3, r7, #3
   137dc:	781a      	ldrb	r2, [r3, #0]
   137de:	6879      	ldr	r1, [r7, #4]
   137e0:	4b14      	ldr	r3, [pc, #80]	; (13834 <ControlSetGame+0x68>)
   137e2:	0018      	movs	r0, r3
   137e4:	4b14      	ldr	r3, [pc, #80]	; (13838 <ControlSetGame+0x6c>)
   137e6:	4798      	blx	r3
	ship_num = ship_num_in;
   137e8:	4b14      	ldr	r3, [pc, #80]	; (1383c <ControlSetGame+0x70>)
   137ea:	1cfa      	adds	r2, r7, #3
   137ec:	7812      	ldrb	r2, [r2, #0]
   137ee:	701a      	strb	r2, [r3, #0]
	placement_status = false;
   137f0:	4b13      	ldr	r3, [pc, #76]	; (13840 <ControlSetGame+0x74>)
   137f2:	2200      	movs	r2, #0
   137f4:	701a      	strb	r2, [r3, #0]
	is_fired = false;
   137f6:	4b13      	ldr	r3, [pc, #76]	; (13844 <ControlSetGame+0x78>)
   137f8:	2200      	movs	r2, #0
   137fa:	701a      	strb	r2, [r3, #0]
	controlState = CONTROL_WAIT_FOR_PLACE;
   137fc:	4b12      	ldr	r3, [pc, #72]	; (13848 <ControlSetGame+0x7c>)
   137fe:	2201      	movs	r2, #1
   13800:	701a      	strb	r2, [r3, #0]
	LogMessage(LOG_DEBUG_LVL, "\r\nship_arr %d %d %d\r\n", ship_arr[0], ship_arr[1], ship_arr[2]);
   13802:	4b0c      	ldr	r3, [pc, #48]	; (13834 <ControlSetGame+0x68>)
   13804:	781b      	ldrb	r3, [r3, #0]
   13806:	001a      	movs	r2, r3
   13808:	4b0a      	ldr	r3, [pc, #40]	; (13834 <ControlSetGame+0x68>)
   1380a:	785b      	ldrb	r3, [r3, #1]
   1380c:	0018      	movs	r0, r3
   1380e:	4b09      	ldr	r3, [pc, #36]	; (13834 <ControlSetGame+0x68>)
   13810:	789b      	ldrb	r3, [r3, #2]
   13812:	490e      	ldr	r1, [pc, #56]	; (1384c <ControlSetGame+0x80>)
   13814:	9300      	str	r3, [sp, #0]
   13816:	0003      	movs	r3, r0
   13818:	2001      	movs	r0, #1
   1381a:	4c0d      	ldr	r4, [pc, #52]	; (13850 <ControlSetGame+0x84>)
   1381c:	47a0      	blx	r4
	UiPlaceInit(ship_arr, ship_num);
   1381e:	4b07      	ldr	r3, [pc, #28]	; (1383c <ControlSetGame+0x70>)
   13820:	781a      	ldrb	r2, [r3, #0]
   13822:	4b04      	ldr	r3, [pc, #16]	; (13834 <ControlSetGame+0x68>)
   13824:	0011      	movs	r1, r2
   13826:	0018      	movs	r0, r3
   13828:	4b0a      	ldr	r3, [pc, #40]	; (13854 <ControlSetGame+0x88>)
   1382a:	4798      	blx	r3
}
   1382c:	46c0      	nop			; (mov r8, r8)
   1382e:	46bd      	mov	sp, r7
   13830:	b003      	add	sp, #12
   13832:	bd90      	pop	{r4, r7, pc}
   13834:	20004388 	.word	0x20004388
   13838:	00034c09 	.word	0x00034c09
   1383c:	20004385 	.word	0x20004385
   13840:	20000434 	.word	0x20000434
   13844:	20000435 	.word	0x20000435
   13848:	20004384 	.word	0x20004384
   1384c:	000363d0 	.word	0x000363d0
   13850:	0001e4d1 	.word	0x0001e4d1
   13854:	00015c91 	.word	0x00015c91

00013858 <SetPlacementStatus>:


void SetPlacementStatus(bool state){
   13858:	b580      	push	{r7, lr}
   1385a:	b082      	sub	sp, #8
   1385c:	af00      	add	r7, sp, #0
   1385e:	0002      	movs	r2, r0
   13860:	1dfb      	adds	r3, r7, #7
   13862:	701a      	strb	r2, [r3, #0]
	placement_status = state;
   13864:	4b03      	ldr	r3, [pc, #12]	; (13874 <SetPlacementStatus+0x1c>)
   13866:	1dfa      	adds	r2, r7, #7
   13868:	7812      	ldrb	r2, [r2, #0]
   1386a:	701a      	strb	r2, [r3, #0]
}
   1386c:	46c0      	nop			; (mov r8, r8)
   1386e:	46bd      	mov	sp, r7
   13870:	b002      	add	sp, #8
   13872:	bd80      	pop	{r7, pc}
   13874:	20000434 	.word	0x20000434

00013878 <SetFireStatus>:

void SetFireStatus(void){
   13878:	b580      	push	{r7, lr}
   1387a:	af00      	add	r7, sp, #0
	is_fired = true;
   1387c:	4b02      	ldr	r3, [pc, #8]	; (13888 <SetFireStatus+0x10>)
   1387e:	2201      	movs	r2, #1
   13880:	701a      	strb	r2, [r3, #0]
}
   13882:	46c0      	nop			; (mov r8, r8)
   13884:	46bd      	mov	sp, r7
   13886:	bd80      	pop	{r7, pc}
   13888:	20000435 	.word	0x20000435

0001388c <ControlTurnArray>:

void ControlTurnArray(uint8_t *shiparr_in) {
   1388c:	b580      	push	{r7, lr}
   1388e:	b082      	sub	sp, #8
   13890:	af00      	add	r7, sp, #0
   13892:	6078      	str	r0, [r7, #4]
// [winner(0/1/2), new_turn(1,2), result(0,1), board_to_check(1,2), loc(0-15), hit_res(0/1)]
	// WINNER
	//if(controlState != CONTROL_WAIT_FOR_TURN) {return;}
	
	// RESULT
	if (shiparr_in[2] == 1) {
   13894:	687b      	ldr	r3, [r7, #4]
   13896:	3302      	adds	r3, #2
   13898:	781b      	ldrb	r3, [r3, #0]
   1389a:	2b01      	cmp	r3, #1
   1389c:	d10b      	bne.n	138b6 <ControlTurnArray+0x2a>
		UiShowLed(shiparr_in[4], shiparr_in[5], shiparr_in[3]);	// send location, hit_res, board
   1389e:	687b      	ldr	r3, [r7, #4]
   138a0:	3304      	adds	r3, #4
   138a2:	7818      	ldrb	r0, [r3, #0]
   138a4:	687b      	ldr	r3, [r7, #4]
   138a6:	3305      	adds	r3, #5
   138a8:	7819      	ldrb	r1, [r3, #0]
   138aa:	687b      	ldr	r3, [r7, #4]
   138ac:	3303      	adds	r3, #3
   138ae:	781b      	ldrb	r3, [r3, #0]
   138b0:	001a      	movs	r2, r3
   138b2:	4b16      	ldr	r3, [pc, #88]	; (1390c <ControlTurnArray+0x80>)
   138b4:	4798      	blx	r3
	}
	
	if (shiparr_in[0] == 1) {
   138b6:	687b      	ldr	r3, [r7, #4]
   138b8:	781b      	ldrb	r3, [r3, #0]
   138ba:	2b01      	cmp	r3, #1
   138bc:	d108      	bne.n	138d0 <ControlTurnArray+0x44>
		controlState = CONTROL_WAIT_FOR_GAME;
   138be:	4b14      	ldr	r3, [pc, #80]	; (13910 <ControlTurnArray+0x84>)
   138c0:	2200      	movs	r2, #0
   138c2:	701a      	strb	r2, [r3, #0]
		LogMessage(LOG_DEBUG_LVL, "Player 1 Wins! \r\n");
   138c4:	4b13      	ldr	r3, [pc, #76]	; (13914 <ControlTurnArray+0x88>)
   138c6:	0019      	movs	r1, r3
   138c8:	2001      	movs	r0, #1
   138ca:	4b13      	ldr	r3, [pc, #76]	; (13918 <ControlTurnArray+0x8c>)
   138cc:	4798      	blx	r3
		return;
   138ce:	e01a      	b.n	13906 <ControlTurnArray+0x7a>
	}
	else if (shiparr_in[0] == 2) {
   138d0:	687b      	ldr	r3, [r7, #4]
   138d2:	781b      	ldrb	r3, [r3, #0]
   138d4:	2b02      	cmp	r3, #2
   138d6:	d108      	bne.n	138ea <ControlTurnArray+0x5e>
		controlState = CONTROL_WAIT_FOR_GAME;
   138d8:	4b0d      	ldr	r3, [pc, #52]	; (13910 <ControlTurnArray+0x84>)
   138da:	2200      	movs	r2, #0
   138dc:	701a      	strb	r2, [r3, #0]
		LogMessage(LOG_DEBUG_LVL, "Player 2 Wins! \r\n");
   138de:	4b0f      	ldr	r3, [pc, #60]	; (1391c <ControlTurnArray+0x90>)
   138e0:	0019      	movs	r1, r3
   138e2:	2001      	movs	r0, #1
   138e4:	4b0c      	ldr	r3, [pc, #48]	; (13918 <ControlTurnArray+0x8c>)
   138e6:	4798      	blx	r3
		return;
   138e8:	e00d      	b.n	13906 <ControlTurnArray+0x7a>
	}
	
	if (shiparr_in[1] == PLAYER) {
   138ea:	687b      	ldr	r3, [r7, #4]
   138ec:	3301      	adds	r3, #1
   138ee:	781b      	ldrb	r3, [r3, #0]
   138f0:	2b01      	cmp	r3, #1
   138f2:	d108      	bne.n	13906 <ControlTurnArray+0x7a>
		controlState = CONTROL_WAIT_FOR_ACTION;
   138f4:	4b06      	ldr	r3, [pc, #24]	; (13910 <ControlTurnArray+0x84>)
   138f6:	2203      	movs	r2, #3
   138f8:	701a      	strb	r2, [r3, #0]
		UiPlayerTurn(shiparr_in[1]); // send turn
   138fa:	687b      	ldr	r3, [r7, #4]
   138fc:	3301      	adds	r3, #1
   138fe:	781b      	ldrb	r3, [r3, #0]
   13900:	0018      	movs	r0, r3
   13902:	4b07      	ldr	r3, [pc, #28]	; (13920 <ControlTurnArray+0x94>)
   13904:	4798      	blx	r3
	}
}
   13906:	46bd      	mov	sp, r7
   13908:	b002      	add	sp, #8
   1390a:	bd80      	pop	{r7, pc}
   1390c:	00016131 	.word	0x00016131
   13910:	20004384 	.word	0x20004384
   13914:	000363e8 	.word	0x000363e8
   13918:	0001e4d1 	.word	0x0001e4d1
   1391c:	000363fc 	.word	0x000363fc
   13920:	000161dd 	.word	0x000161dd

00013924 <system_interrupt_enable>:
{
   13924:	b580      	push	{r7, lr}
   13926:	b082      	sub	sp, #8
   13928:	af00      	add	r7, sp, #0
   1392a:	0002      	movs	r2, r0
   1392c:	1dfb      	adds	r3, r7, #7
   1392e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13930:	4b06      	ldr	r3, [pc, #24]	; (1394c <system_interrupt_enable+0x28>)
   13932:	1dfa      	adds	r2, r7, #7
   13934:	7812      	ldrb	r2, [r2, #0]
   13936:	0011      	movs	r1, r2
   13938:	221f      	movs	r2, #31
   1393a:	400a      	ands	r2, r1
   1393c:	2101      	movs	r1, #1
   1393e:	4091      	lsls	r1, r2
   13940:	000a      	movs	r2, r1
   13942:	601a      	str	r2, [r3, #0]
}
   13944:	46c0      	nop			; (mov r8, r8)
   13946:	46bd      	mov	sp, r7
   13948:	b002      	add	sp, #8
   1394a:	bd80      	pop	{r7, pc}
   1394c:	e000e100 	.word	0xe000e100

00013950 <i2c_master_is_syncing>:
{
   13950:	b580      	push	{r7, lr}
   13952:	b084      	sub	sp, #16
   13954:	af00      	add	r7, sp, #0
   13956:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13958:	687b      	ldr	r3, [r7, #4]
   1395a:	681b      	ldr	r3, [r3, #0]
   1395c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1395e:	68fb      	ldr	r3, [r7, #12]
   13960:	69db      	ldr	r3, [r3, #28]
   13962:	2207      	movs	r2, #7
   13964:	4013      	ands	r3, r2
   13966:	1e5a      	subs	r2, r3, #1
   13968:	4193      	sbcs	r3, r2
   1396a:	b2db      	uxtb	r3, r3
}
   1396c:	0018      	movs	r0, r3
   1396e:	46bd      	mov	sp, r7
   13970:	b004      	add	sp, #16
   13972:	bd80      	pop	{r7, pc}

00013974 <_i2c_master_wait_for_sync>:
{
   13974:	b580      	push	{r7, lr}
   13976:	b082      	sub	sp, #8
   13978:	af00      	add	r7, sp, #0
   1397a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   1397c:	46c0      	nop			; (mov r8, r8)
   1397e:	687b      	ldr	r3, [r7, #4]
   13980:	0018      	movs	r0, r3
   13982:	4b04      	ldr	r3, [pc, #16]	; (13994 <_i2c_master_wait_for_sync+0x20>)
   13984:	4798      	blx	r3
   13986:	1e03      	subs	r3, r0, #0
   13988:	d1f9      	bne.n	1397e <_i2c_master_wait_for_sync+0xa>
}
   1398a:	46c0      	nop			; (mov r8, r8)
   1398c:	46bd      	mov	sp, r7
   1398e:	b002      	add	sp, #8
   13990:	bd80      	pop	{r7, pc}
   13992:	46c0      	nop			; (mov r8, r8)
   13994:	00013951 	.word	0x00013951

00013998 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13998:	b580      	push	{r7, lr}
   1399a:	b082      	sub	sp, #8
   1399c:	af00      	add	r7, sp, #0
   1399e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   139a0:	687b      	ldr	r3, [r7, #4]
   139a2:	2264      	movs	r2, #100	; 0x64
   139a4:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   139a6:	687b      	ldr	r3, [r7, #4]
   139a8:	4a1b      	ldr	r2, [pc, #108]	; (13a18 <i2c_master_get_config_defaults+0x80>)
   139aa:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   139ac:	687b      	ldr	r3, [r7, #4]
   139ae:	2200      	movs	r2, #0
   139b0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   139b2:	687b      	ldr	r3, [r7, #4]
   139b4:	2200      	movs	r2, #0
   139b6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   139b8:	687b      	ldr	r3, [r7, #4]
   139ba:	2200      	movs	r2, #0
   139bc:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   139be:	687b      	ldr	r3, [r7, #4]
   139c0:	2280      	movs	r2, #128	; 0x80
   139c2:	0392      	lsls	r2, r2, #14
   139c4:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   139c6:	687b      	ldr	r3, [r7, #4]
   139c8:	2201      	movs	r2, #1
   139ca:	4252      	negs	r2, r2
   139cc:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   139ce:	687b      	ldr	r3, [r7, #4]
   139d0:	2201      	movs	r2, #1
   139d2:	4252      	negs	r2, r2
   139d4:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   139d6:	687b      	ldr	r3, [r7, #4]
   139d8:	2200      	movs	r2, #0
   139da:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   139dc:	687b      	ldr	r3, [r7, #4]
   139de:	2200      	movs	r2, #0
   139e0:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   139e2:	687b      	ldr	r3, [r7, #4]
   139e4:	2224      	movs	r2, #36	; 0x24
   139e6:	2100      	movs	r1, #0
   139e8:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   139ea:	687b      	ldr	r3, [r7, #4]
   139ec:	2200      	movs	r2, #0
   139ee:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   139f0:	687b      	ldr	r3, [r7, #4]
   139f2:	222c      	movs	r2, #44	; 0x2c
   139f4:	2100      	movs	r1, #0
   139f6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   139f8:	687b      	ldr	r3, [r7, #4]
   139fa:	222d      	movs	r2, #45	; 0x2d
   139fc:	2100      	movs	r1, #0
   139fe:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   13a00:	687b      	ldr	r3, [r7, #4]
   13a02:	222e      	movs	r2, #46	; 0x2e
   13a04:	2100      	movs	r1, #0
   13a06:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   13a08:	687b      	ldr	r3, [r7, #4]
   13a0a:	22d7      	movs	r2, #215	; 0xd7
   13a0c:	861a      	strh	r2, [r3, #48]	; 0x30
}
   13a0e:	46c0      	nop			; (mov r8, r8)
   13a10:	46bd      	mov	sp, r7
   13a12:	b002      	add	sp, #8
   13a14:	bd80      	pop	{r7, pc}
   13a16:	46c0      	nop			; (mov r8, r8)
   13a18:	00000d48 	.word	0x00000d48

00013a1c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13a1c:	b580      	push	{r7, lr}
   13a1e:	b084      	sub	sp, #16
   13a20:	af00      	add	r7, sp, #0
   13a22:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13a24:	687b      	ldr	r3, [r7, #4]
   13a26:	681b      	ldr	r3, [r3, #0]
   13a28:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   13a2a:	2300      	movs	r3, #0
   13a2c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   13a2e:	687b      	ldr	r3, [r7, #4]
   13a30:	0018      	movs	r0, r3
   13a32:	4b14      	ldr	r3, [pc, #80]	; (13a84 <i2c_master_enable+0x68>)
   13a34:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   13a36:	68bb      	ldr	r3, [r7, #8]
   13a38:	681b      	ldr	r3, [r3, #0]
   13a3a:	2202      	movs	r2, #2
   13a3c:	431a      	orrs	r2, r3
   13a3e:	68bb      	ldr	r3, [r7, #8]
   13a40:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   13a42:	687b      	ldr	r3, [r7, #4]
   13a44:	681b      	ldr	r3, [r3, #0]
   13a46:	0018      	movs	r0, r3
   13a48:	4b0f      	ldr	r3, [pc, #60]	; (13a88 <i2c_master_enable+0x6c>)
   13a4a:	4798      	blx	r3
   13a4c:	0003      	movs	r3, r0
   13a4e:	0018      	movs	r0, r3
   13a50:	4b0e      	ldr	r3, [pc, #56]	; (13a8c <i2c_master_enable+0x70>)
   13a52:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13a54:	e00c      	b.n	13a70 <i2c_master_enable+0x54>
		timeout_counter++;
   13a56:	68fb      	ldr	r3, [r7, #12]
   13a58:	3301      	adds	r3, #1
   13a5a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13a5c:	687b      	ldr	r3, [r7, #4]
   13a5e:	88db      	ldrh	r3, [r3, #6]
   13a60:	001a      	movs	r2, r3
   13a62:	68fb      	ldr	r3, [r7, #12]
   13a64:	429a      	cmp	r2, r3
   13a66:	d803      	bhi.n	13a70 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   13a68:	68bb      	ldr	r3, [r7, #8]
   13a6a:	2210      	movs	r2, #16
   13a6c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   13a6e:	e006      	b.n	13a7e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13a70:	68bb      	ldr	r3, [r7, #8]
   13a72:	8b5b      	ldrh	r3, [r3, #26]
   13a74:	b29b      	uxth	r3, r3
   13a76:	001a      	movs	r2, r3
   13a78:	2310      	movs	r3, #16
   13a7a:	4013      	ands	r3, r2
   13a7c:	d0eb      	beq.n	13a56 <i2c_master_enable+0x3a>
		}
	}
}
   13a7e:	46bd      	mov	sp, r7
   13a80:	b004      	add	sp, #16
   13a82:	bd80      	pop	{r7, pc}
   13a84:	00013975 	.word	0x00013975
   13a88:	0002793d 	.word	0x0002793d
   13a8c:	00013925 	.word	0x00013925

00013a90 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   13a90:	b580      	push	{r7, lr}
   13a92:	b082      	sub	sp, #8
   13a94:	af00      	add	r7, sp, #0
   13a96:	6078      	str	r0, [r7, #4]
   13a98:	000a      	movs	r2, r1
   13a9a:	1cfb      	adds	r3, r7, #3
   13a9c:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   13a9e:	687b      	ldr	r3, [r7, #4]
   13aa0:	7e5b      	ldrb	r3, [r3, #25]
   13aa2:	b2db      	uxtb	r3, r3
   13aa4:	b25a      	sxtb	r2, r3
   13aa6:	1cfb      	adds	r3, r7, #3
   13aa8:	781b      	ldrb	r3, [r3, #0]
   13aaa:	2101      	movs	r1, #1
   13aac:	4099      	lsls	r1, r3
   13aae:	000b      	movs	r3, r1
   13ab0:	b25b      	sxtb	r3, r3
   13ab2:	4313      	orrs	r3, r2
   13ab4:	b25b      	sxtb	r3, r3
   13ab6:	b2da      	uxtb	r2, r3
   13ab8:	687b      	ldr	r3, [r7, #4]
   13aba:	765a      	strb	r2, [r3, #25]
}
   13abc:	46c0      	nop			; (mov r8, r8)
   13abe:	46bd      	mov	sp, r7
   13ac0:	b002      	add	sp, #8
   13ac2:	bd80      	pop	{r7, pc}

00013ac4 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   13ac4:	b590      	push	{r4, r7, lr}
   13ac6:	b091      	sub	sp, #68	; 0x44
   13ac8:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13aca:	2300      	movs	r3, #0
   13acc:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   13ace:	233a      	movs	r3, #58	; 0x3a
   13ad0:	18fb      	adds	r3, r7, r3
   13ad2:	2200      	movs	r2, #0
   13ad4:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   13ad6:	1d3b      	adds	r3, r7, #4
   13ad8:	0018      	movs	r0, r3
   13ada:	4b21      	ldr	r3, [pc, #132]	; (13b60 <I2cDriverConfigureSensorBus+0x9c>)
   13adc:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   13ade:	1d3b      	adds	r3, r7, #4
   13ae0:	4a20      	ldr	r2, [pc, #128]	; (13b64 <I2cDriverConfigureSensorBus+0xa0>)
   13ae2:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   13ae4:	1d3b      	adds	r3, r7, #4
   13ae6:	4a20      	ldr	r2, [pc, #128]	; (13b68 <I2cDriverConfigureSensorBus+0xa4>)
   13ae8:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   13aea:	1d3b      	adds	r3, r7, #4
   13aec:	22fa      	movs	r2, #250	; 0xfa
   13aee:	0092      	lsls	r2, r2, #2
   13af0:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13af2:	233b      	movs	r3, #59	; 0x3b
   13af4:	18fb      	adds	r3, r7, r3
   13af6:	2203      	movs	r2, #3
   13af8:	701a      	strb	r2, [r3, #0]
   13afa:	e01e      	b.n	13b3a <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13afc:	233a      	movs	r3, #58	; 0x3a
   13afe:	18fc      	adds	r4, r7, r3
   13b00:	1d3a      	adds	r2, r7, #4
   13b02:	491a      	ldr	r1, [pc, #104]	; (13b6c <I2cDriverConfigureSensorBus+0xa8>)
   13b04:	4b1a      	ldr	r3, [pc, #104]	; (13b70 <I2cDriverConfigureSensorBus+0xac>)
   13b06:	0018      	movs	r0, r3
   13b08:	4b1a      	ldr	r3, [pc, #104]	; (13b74 <I2cDriverConfigureSensorBus+0xb0>)
   13b0a:	4798      	blx	r3
   13b0c:	0003      	movs	r3, r0
   13b0e:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   13b10:	233a      	movs	r3, #58	; 0x3a
   13b12:	18fb      	adds	r3, r7, r3
   13b14:	781b      	ldrb	r3, [r3, #0]
   13b16:	2b00      	cmp	r3, #0
   13b18:	d104      	bne.n	13b24 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   13b1a:	233a      	movs	r3, #58	; 0x3a
   13b1c:	18fb      	adds	r3, r7, r3
   13b1e:	781b      	ldrb	r3, [r3, #0]
   13b20:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   13b22:	e00f      	b.n	13b44 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   13b24:	4b12      	ldr	r3, [pc, #72]	; (13b70 <I2cDriverConfigureSensorBus+0xac>)
   13b26:	0018      	movs	r0, r3
   13b28:	4b13      	ldr	r3, [pc, #76]	; (13b78 <I2cDriverConfigureSensorBus+0xb4>)
   13b2a:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13b2c:	233b      	movs	r3, #59	; 0x3b
   13b2e:	18fb      	adds	r3, r7, r3
   13b30:	781a      	ldrb	r2, [r3, #0]
   13b32:	233b      	movs	r3, #59	; 0x3b
   13b34:	18fb      	adds	r3, r7, r3
   13b36:	3a01      	subs	r2, #1
   13b38:	701a      	strb	r2, [r3, #0]
   13b3a:	233b      	movs	r3, #59	; 0x3b
   13b3c:	18fb      	adds	r3, r7, r3
   13b3e:	781b      	ldrb	r3, [r3, #0]
   13b40:	2b00      	cmp	r3, #0
   13b42:	d1db      	bne.n	13afc <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   13b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13b46:	2b00      	cmp	r3, #0
   13b48:	d104      	bne.n	13b54 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   13b4a:	4b09      	ldr	r3, [pc, #36]	; (13b70 <I2cDriverConfigureSensorBus+0xac>)
   13b4c:	0018      	movs	r0, r3
   13b4e:	4b0b      	ldr	r3, [pc, #44]	; (13b7c <I2cDriverConfigureSensorBus+0xb8>)
   13b50:	4798      	blx	r3
   13b52:	e000      	b.n	13b56 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   13b54:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   13b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   13b58:	0018      	movs	r0, r3
   13b5a:	46bd      	mov	sp, r7
   13b5c:	b011      	add	sp, #68	; 0x44
   13b5e:	bd90      	pop	{r4, r7, pc}
   13b60:	00013999 	.word	0x00013999
   13b64:	00080002 	.word	0x00080002
   13b68:	00090002 	.word	0x00090002
   13b6c:	42000800 	.word	0x42000800
   13b70:	20004394 	.word	0x20004394
   13b74:	00018071 	.word	0x00018071
   13b78:	000181a5 	.word	0x000181a5
   13b7c:	00013a1d 	.word	0x00013a1d

00013b80 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   13b80:	b580      	push	{r7, lr}
   13b82:	b084      	sub	sp, #16
   13b84:	af00      	add	r7, sp, #0
   13b86:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13b88:	4b0e      	ldr	r3, [pc, #56]	; (13bc4 <I2cSensorsTxComplete+0x44>)
   13b8a:	2200      	movs	r2, #0
   13b8c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13b8e:	4b0d      	ldr	r3, [pc, #52]	; (13bc4 <I2cSensorsTxComplete+0x44>)
   13b90:	2201      	movs	r2, #1
   13b92:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13b94:	2300      	movs	r3, #0
   13b96:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13b98:	4b0b      	ldr	r3, [pc, #44]	; (13bc8 <I2cSensorsTxComplete+0x48>)
   13b9a:	681b      	ldr	r3, [r3, #0]
   13b9c:	220c      	movs	r2, #12
   13b9e:	18ba      	adds	r2, r7, r2
   13ba0:	0011      	movs	r1, r2
   13ba2:	0018      	movs	r0, r3
   13ba4:	4b09      	ldr	r3, [pc, #36]	; (13bcc <I2cSensorsTxComplete+0x4c>)
   13ba6:	4798      	blx	r3
    sensorTransmitError = false;
   13ba8:	4b09      	ldr	r3, [pc, #36]	; (13bd0 <I2cSensorsTxComplete+0x50>)
   13baa:	2200      	movs	r2, #0
   13bac:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13bae:	68fb      	ldr	r3, [r7, #12]
   13bb0:	2b00      	cmp	r3, #0
   13bb2:	d003      	beq.n	13bbc <I2cSensorsTxComplete+0x3c>
   13bb4:	4b07      	ldr	r3, [pc, #28]	; (13bd4 <I2cSensorsTxComplete+0x54>)
   13bb6:	2280      	movs	r2, #128	; 0x80
   13bb8:	0552      	lsls	r2, r2, #21
   13bba:	601a      	str	r2, [r3, #0]
}
   13bbc:	46c0      	nop			; (mov r8, r8)
   13bbe:	46bd      	mov	sp, r7
   13bc0:	b004      	add	sp, #16
   13bc2:	bd80      	pop	{r7, pc}
   13bc4:	20000438 	.word	0x20000438
   13bc8:	200043bc 	.word	0x200043bc
   13bcc:	0001b3b5 	.word	0x0001b3b5
   13bd0:	20000436 	.word	0x20000436
   13bd4:	e000ed04 	.word	0xe000ed04

00013bd8 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   13bd8:	b580      	push	{r7, lr}
   13bda:	b084      	sub	sp, #16
   13bdc:	af00      	add	r7, sp, #0
   13bde:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13be0:	4b0e      	ldr	r3, [pc, #56]	; (13c1c <I2cSensorsRxComplete+0x44>)
   13be2:	2200      	movs	r2, #0
   13be4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13be6:	4b0d      	ldr	r3, [pc, #52]	; (13c1c <I2cSensorsRxComplete+0x44>)
   13be8:	2201      	movs	r2, #1
   13bea:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13bec:	2300      	movs	r3, #0
   13bee:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13bf0:	4b0b      	ldr	r3, [pc, #44]	; (13c20 <I2cSensorsRxComplete+0x48>)
   13bf2:	681b      	ldr	r3, [r3, #0]
   13bf4:	220c      	movs	r2, #12
   13bf6:	18ba      	adds	r2, r7, r2
   13bf8:	0011      	movs	r1, r2
   13bfa:	0018      	movs	r0, r3
   13bfc:	4b09      	ldr	r3, [pc, #36]	; (13c24 <I2cSensorsRxComplete+0x4c>)
   13bfe:	4798      	blx	r3
    sensorTransmitError = false;
   13c00:	4b09      	ldr	r3, [pc, #36]	; (13c28 <I2cSensorsRxComplete+0x50>)
   13c02:	2200      	movs	r2, #0
   13c04:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13c06:	68fb      	ldr	r3, [r7, #12]
   13c08:	2b00      	cmp	r3, #0
   13c0a:	d003      	beq.n	13c14 <I2cSensorsRxComplete+0x3c>
   13c0c:	4b07      	ldr	r3, [pc, #28]	; (13c2c <I2cSensorsRxComplete+0x54>)
   13c0e:	2280      	movs	r2, #128	; 0x80
   13c10:	0552      	lsls	r2, r2, #21
   13c12:	601a      	str	r2, [r3, #0]
}
   13c14:	46c0      	nop			; (mov r8, r8)
   13c16:	46bd      	mov	sp, r7
   13c18:	b004      	add	sp, #16
   13c1a:	bd80      	pop	{r7, pc}
   13c1c:	20000438 	.word	0x20000438
   13c20:	200043bc 	.word	0x200043bc
   13c24:	0001b3b5 	.word	0x0001b3b5
   13c28:	20000436 	.word	0x20000436
   13c2c:	e000ed04 	.word	0xe000ed04

00013c30 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   13c30:	b580      	push	{r7, lr}
   13c32:	b084      	sub	sp, #16
   13c34:	af00      	add	r7, sp, #0
   13c36:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13c38:	4b0e      	ldr	r3, [pc, #56]	; (13c74 <I2cSensorsError+0x44>)
   13c3a:	2200      	movs	r2, #0
   13c3c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   13c3e:	4b0d      	ldr	r3, [pc, #52]	; (13c74 <I2cSensorsError+0x44>)
   13c40:	2201      	movs	r2, #1
   13c42:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13c44:	2300      	movs	r3, #0
   13c46:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13c48:	4b0b      	ldr	r3, [pc, #44]	; (13c78 <I2cSensorsError+0x48>)
   13c4a:	681b      	ldr	r3, [r3, #0]
   13c4c:	220c      	movs	r2, #12
   13c4e:	18ba      	adds	r2, r7, r2
   13c50:	0011      	movs	r1, r2
   13c52:	0018      	movs	r0, r3
   13c54:	4b09      	ldr	r3, [pc, #36]	; (13c7c <I2cSensorsError+0x4c>)
   13c56:	4798      	blx	r3
    sensorTransmitError = true;
   13c58:	4b09      	ldr	r3, [pc, #36]	; (13c80 <I2cSensorsError+0x50>)
   13c5a:	2201      	movs	r2, #1
   13c5c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13c5e:	68fb      	ldr	r3, [r7, #12]
   13c60:	2b00      	cmp	r3, #0
   13c62:	d003      	beq.n	13c6c <I2cSensorsError+0x3c>
   13c64:	4b07      	ldr	r3, [pc, #28]	; (13c84 <I2cSensorsError+0x54>)
   13c66:	2280      	movs	r2, #128	; 0x80
   13c68:	0552      	lsls	r2, r2, #21
   13c6a:	601a      	str	r2, [r3, #0]
}
   13c6c:	46c0      	nop			; (mov r8, r8)
   13c6e:	46bd      	mov	sp, r7
   13c70:	b004      	add	sp, #16
   13c72:	bd80      	pop	{r7, pc}
   13c74:	20000438 	.word	0x20000438
   13c78:	200043bc 	.word	0x200043bc
   13c7c:	0001b3b5 	.word	0x0001b3b5
   13c80:	20000436 	.word	0x20000436
   13c84:	e000ed04 	.word	0xe000ed04

00013c88 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   13c88:	b580      	push	{r7, lr}
   13c8a:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13c8c:	4911      	ldr	r1, [pc, #68]	; (13cd4 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   13c8e:	4b12      	ldr	r3, [pc, #72]	; (13cd8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c90:	2200      	movs	r2, #0
   13c92:	0018      	movs	r0, r3
   13c94:	4b11      	ldr	r3, [pc, #68]	; (13cdc <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13c96:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13c98:	4b0f      	ldr	r3, [pc, #60]	; (13cd8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c9a:	2100      	movs	r1, #0
   13c9c:	0018      	movs	r0, r3
   13c9e:	4b10      	ldr	r3, [pc, #64]	; (13ce0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13ca0:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13ca2:	4910      	ldr	r1, [pc, #64]	; (13ce4 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   13ca4:	4b0c      	ldr	r3, [pc, #48]	; (13cd8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13ca6:	2201      	movs	r2, #1
   13ca8:	0018      	movs	r0, r3
   13caa:	4b0c      	ldr	r3, [pc, #48]	; (13cdc <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13cac:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13cae:	4b0a      	ldr	r3, [pc, #40]	; (13cd8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13cb0:	2101      	movs	r1, #1
   13cb2:	0018      	movs	r0, r3
   13cb4:	4b0a      	ldr	r3, [pc, #40]	; (13ce0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13cb6:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   13cb8:	490b      	ldr	r1, [pc, #44]	; (13ce8 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   13cba:	4b07      	ldr	r3, [pc, #28]	; (13cd8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13cbc:	2202      	movs	r2, #2
   13cbe:	0018      	movs	r0, r3
   13cc0:	4b06      	ldr	r3, [pc, #24]	; (13cdc <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13cc2:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   13cc4:	4b04      	ldr	r3, [pc, #16]	; (13cd8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13cc6:	2102      	movs	r1, #2
   13cc8:	0018      	movs	r0, r3
   13cca:	4b05      	ldr	r3, [pc, #20]	; (13ce0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13ccc:	4798      	blx	r3
}
   13cce:	46c0      	nop			; (mov r8, r8)
   13cd0:	46bd      	mov	sp, r7
   13cd2:	bd80      	pop	{r7, pc}
   13cd4:	00013b81 	.word	0x00013b81
   13cd8:	20004394 	.word	0x20004394
   13cdc:	00012909 	.word	0x00012909
   13ce0:	00013a91 	.word	0x00013a91
   13ce4:	00013bd9 	.word	0x00013bd9
   13ce8:	00013c31 	.word	0x00013c31

00013cec <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   13cec:	b580      	push	{r7, lr}
   13cee:	b082      	sub	sp, #8
   13cf0:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13cf2:	2300      	movs	r3, #0
   13cf4:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   13cf6:	4b14      	ldr	r3, [pc, #80]	; (13d48 <I2cInitializeDriver+0x5c>)
   13cf8:	4798      	blx	r3
   13cfa:	0003      	movs	r3, r0
   13cfc:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   13cfe:	687b      	ldr	r3, [r7, #4]
   13d00:	2b00      	cmp	r3, #0
   13d02:	d11a      	bne.n	13d3a <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   13d04:	4b11      	ldr	r3, [pc, #68]	; (13d4c <I2cInitializeDriver+0x60>)
   13d06:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13d08:	2001      	movs	r0, #1
   13d0a:	4b11      	ldr	r3, [pc, #68]	; (13d50 <I2cInitializeDriver+0x64>)
   13d0c:	4798      	blx	r3
   13d0e:	0002      	movs	r2, r0
   13d10:	4b10      	ldr	r3, [pc, #64]	; (13d54 <I2cInitializeDriver+0x68>)
   13d12:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   13d14:	2203      	movs	r2, #3
   13d16:	2100      	movs	r1, #0
   13d18:	2001      	movs	r0, #1
   13d1a:	4b0f      	ldr	r3, [pc, #60]	; (13d58 <I2cInitializeDriver+0x6c>)
   13d1c:	4798      	blx	r3
   13d1e:	0002      	movs	r2, r0
   13d20:	4b0e      	ldr	r3, [pc, #56]	; (13d5c <I2cInitializeDriver+0x70>)
   13d22:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   13d24:	4b0b      	ldr	r3, [pc, #44]	; (13d54 <I2cInitializeDriver+0x68>)
   13d26:	681b      	ldr	r3, [r3, #0]
   13d28:	2b00      	cmp	r3, #0
   13d2a:	d003      	beq.n	13d34 <I2cInitializeDriver+0x48>
   13d2c:	4b0b      	ldr	r3, [pc, #44]	; (13d5c <I2cInitializeDriver+0x70>)
   13d2e:	681b      	ldr	r3, [r3, #0]
   13d30:	2b00      	cmp	r3, #0
   13d32:	d103      	bne.n	13d3c <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   13d34:	2306      	movs	r3, #6
   13d36:	607b      	str	r3, [r7, #4]
        goto exit;
   13d38:	e000      	b.n	13d3c <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   13d3a:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13d3c:	687b      	ldr	r3, [r7, #4]
}
   13d3e:	0018      	movs	r0, r3
   13d40:	46bd      	mov	sp, r7
   13d42:	b002      	add	sp, #8
   13d44:	bd80      	pop	{r7, pc}
   13d46:	46c0      	nop			; (mov r8, r8)
   13d48:	00013ac5 	.word	0x00013ac5
   13d4c:	00013c89 	.word	0x00013c89
   13d50:	0001aced 	.word	0x0001aced
   13d54:	20004390 	.word	0x20004390
   13d58:	0001aa85 	.word	0x0001aa85
   13d5c:	200043bc 	.word	0x200043bc

00013d60 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   13d60:	b590      	push	{r4, r7, lr}
   13d62:	b085      	sub	sp, #20
   13d64:	af00      	add	r7, sp, #0
   13d66:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13d68:	2300      	movs	r3, #0
   13d6a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13d6c:	687b      	ldr	r3, [r7, #4]
   13d6e:	2b00      	cmp	r3, #0
   13d70:	d003      	beq.n	13d7a <I2cWriteData+0x1a>
   13d72:	687b      	ldr	r3, [r7, #4]
   13d74:	685b      	ldr	r3, [r3, #4]
   13d76:	2b00      	cmp	r3, #0
   13d78:	d103      	bne.n	13d82 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   13d7a:	2308      	movs	r3, #8
   13d7c:	425b      	negs	r3, r3
   13d7e:	60fb      	str	r3, [r7, #12]
        goto exit;
   13d80:	e01f      	b.n	13dc2 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   13d82:	687b      	ldr	r3, [r7, #4]
   13d84:	781b      	ldrb	r3, [r3, #0]
   13d86:	b29a      	uxth	r2, r3
   13d88:	4b10      	ldr	r3, [pc, #64]	; (13dcc <I2cWriteData+0x6c>)
   13d8a:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13d8c:	687b      	ldr	r3, [r7, #4]
   13d8e:	685a      	ldr	r2, [r3, #4]
   13d90:	4b0e      	ldr	r3, [pc, #56]	; (13dcc <I2cWriteData+0x6c>)
   13d92:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   13d94:	687b      	ldr	r3, [r7, #4]
   13d96:	89da      	ldrh	r2, [r3, #14]
   13d98:	4b0c      	ldr	r3, [pc, #48]	; (13dcc <I2cWriteData+0x6c>)
   13d9a:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13d9c:	230b      	movs	r3, #11
   13d9e:	18fc      	adds	r4, r7, r3
   13da0:	4a0a      	ldr	r2, [pc, #40]	; (13dcc <I2cWriteData+0x6c>)
   13da2:	4b0b      	ldr	r3, [pc, #44]	; (13dd0 <I2cWriteData+0x70>)
   13da4:	0011      	movs	r1, r2
   13da6:	0018      	movs	r0, r3
   13da8:	4b0a      	ldr	r3, [pc, #40]	; (13dd4 <I2cWriteData+0x74>)
   13daa:	4798      	blx	r3
   13dac:	0003      	movs	r3, r0
   13dae:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13db0:	230b      	movs	r3, #11
   13db2:	18fb      	adds	r3, r7, r3
   13db4:	781b      	ldrb	r3, [r3, #0]
   13db6:	2b00      	cmp	r3, #0
   13db8:	d003      	beq.n	13dc2 <I2cWriteData+0x62>
        error = ERROR_IO;
   13dba:	2306      	movs	r3, #6
   13dbc:	425b      	negs	r3, r3
   13dbe:	60fb      	str	r3, [r7, #12]
        goto exit;
   13dc0:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13dc2:	68fb      	ldr	r3, [r7, #12]
}
   13dc4:	0018      	movs	r0, r3
   13dc6:	46bd      	mov	sp, r7
   13dc8:	b005      	add	sp, #20
   13dca:	bd90      	pop	{r4, r7, pc}
   13dcc:	200043c0 	.word	0x200043c0
   13dd0:	20004394 	.word	0x20004394
   13dd4:	00012b8d 	.word	0x00012b8d

00013dd8 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   13dd8:	b590      	push	{r4, r7, lr}
   13dda:	b085      	sub	sp, #20
   13ddc:	af00      	add	r7, sp, #0
   13dde:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13de0:	2300      	movs	r3, #0
   13de2:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgIn == NULL) {
   13de4:	687b      	ldr	r3, [r7, #4]
   13de6:	2b00      	cmp	r3, #0
   13de8:	d003      	beq.n	13df2 <I2cReadData+0x1a>
   13dea:	687b      	ldr	r3, [r7, #4]
   13dec:	689b      	ldr	r3, [r3, #8]
   13dee:	2b00      	cmp	r3, #0
   13df0:	d103      	bne.n	13dfa <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   13df2:	2308      	movs	r3, #8
   13df4:	425b      	negs	r3, r3
   13df6:	60fb      	str	r3, [r7, #12]
        goto exit;
   13df8:	e01f      	b.n	13e3a <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   13dfa:	687b      	ldr	r3, [r7, #4]
   13dfc:	781b      	ldrb	r3, [r3, #0]
   13dfe:	b29a      	uxth	r2, r3
   13e00:	4b10      	ldr	r3, [pc, #64]	; (13e44 <I2cReadData+0x6c>)
   13e02:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   13e04:	687b      	ldr	r3, [r7, #4]
   13e06:	689a      	ldr	r2, [r3, #8]
   13e08:	4b0e      	ldr	r3, [pc, #56]	; (13e44 <I2cReadData+0x6c>)
   13e0a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   13e0c:	687b      	ldr	r3, [r7, #4]
   13e0e:	899a      	ldrh	r2, [r3, #12]
   13e10:	4b0c      	ldr	r3, [pc, #48]	; (13e44 <I2cReadData+0x6c>)
   13e12:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13e14:	230b      	movs	r3, #11
   13e16:	18fc      	adds	r4, r7, r3
   13e18:	4a0a      	ldr	r2, [pc, #40]	; (13e44 <I2cReadData+0x6c>)
   13e1a:	4b0b      	ldr	r3, [pc, #44]	; (13e48 <I2cReadData+0x70>)
   13e1c:	0011      	movs	r1, r2
   13e1e:	0018      	movs	r0, r3
   13e20:	4b0a      	ldr	r3, [pc, #40]	; (13e4c <I2cReadData+0x74>)
   13e22:	4798      	blx	r3
   13e24:	0003      	movs	r3, r0
   13e26:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13e28:	230b      	movs	r3, #11
   13e2a:	18fb      	adds	r3, r7, r3
   13e2c:	781b      	ldrb	r3, [r3, #0]
   13e2e:	2b00      	cmp	r3, #0
   13e30:	d003      	beq.n	13e3a <I2cReadData+0x62>
        error = ERROR_IO;
   13e32:	2306      	movs	r3, #6
   13e34:	425b      	negs	r3, r3
   13e36:	60fb      	str	r3, [r7, #12]
        goto exit;
   13e38:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13e3a:	68fb      	ldr	r3, [r7, #12]
}
   13e3c:	0018      	movs	r0, r3
   13e3e:	46bd      	mov	sp, r7
   13e40:	b005      	add	sp, #20
   13e42:	bd90      	pop	{r4, r7, pc}
   13e44:	200043c0 	.word	0x200043c0
   13e48:	20004394 	.word	0x20004394
   13e4c:	00012aa9 	.word	0x00012aa9

00013e50 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   13e50:	b590      	push	{r4, r7, lr}
   13e52:	b083      	sub	sp, #12
   13e54:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   13e56:	2300      	movs	r3, #0
   13e58:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   13e5a:	4b09      	ldr	r3, [pc, #36]	; (13e80 <I2cFreeMutex+0x30>)
   13e5c:	6818      	ldr	r0, [r3, #0]
   13e5e:	2300      	movs	r3, #0
   13e60:	2200      	movs	r2, #0
   13e62:	2100      	movs	r1, #0
   13e64:	4c07      	ldr	r4, [pc, #28]	; (13e84 <I2cFreeMutex+0x34>)
   13e66:	47a0      	blx	r4
   13e68:	0003      	movs	r3, r0
   13e6a:	2b01      	cmp	r3, #1
   13e6c:	d002      	beq.n	13e74 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   13e6e:	2314      	movs	r3, #20
   13e70:	425b      	negs	r3, r3
   13e72:	607b      	str	r3, [r7, #4]
    }
    return error;
   13e74:	687b      	ldr	r3, [r7, #4]
}
   13e76:	0018      	movs	r0, r3
   13e78:	46bd      	mov	sp, r7
   13e7a:	b003      	add	sp, #12
   13e7c:	bd90      	pop	{r4, r7, pc}
   13e7e:	46c0      	nop			; (mov r8, r8)
   13e80:	20004390 	.word	0x20004390
   13e84:	0001ad2d 	.word	0x0001ad2d

00013e88 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   13e88:	b580      	push	{r7, lr}
   13e8a:	b084      	sub	sp, #16
   13e8c:	af00      	add	r7, sp, #0
   13e8e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13e90:	2300      	movs	r3, #0
   13e92:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   13e94:	4b08      	ldr	r3, [pc, #32]	; (13eb8 <I2cGetMutex+0x30>)
   13e96:	681b      	ldr	r3, [r3, #0]
   13e98:	687a      	ldr	r2, [r7, #4]
   13e9a:	0011      	movs	r1, r2
   13e9c:	0018      	movs	r0, r3
   13e9e:	4b07      	ldr	r3, [pc, #28]	; (13ebc <I2cGetMutex+0x34>)
   13ea0:	4798      	blx	r3
   13ea2:	0003      	movs	r3, r0
   13ea4:	2b01      	cmp	r3, #1
   13ea6:	d002      	beq.n	13eae <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   13ea8:	231d      	movs	r3, #29
   13eaa:	425b      	negs	r3, r3
   13eac:	60fb      	str	r3, [r7, #12]
    }
    return error;
   13eae:	68fb      	ldr	r3, [r7, #12]
}
   13eb0:	0018      	movs	r0, r3
   13eb2:	46bd      	mov	sp, r7
   13eb4:	b004      	add	sp, #16
   13eb6:	bd80      	pop	{r7, pc}
   13eb8:	20004390 	.word	0x20004390
   13ebc:	0001ba3d 	.word	0x0001ba3d

00013ec0 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   13ec0:	b580      	push	{r7, lr}
   13ec2:	b084      	sub	sp, #16
   13ec4:	af00      	add	r7, sp, #0
   13ec6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13ec8:	2300      	movs	r3, #0
   13eca:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   13ecc:	4b04      	ldr	r3, [pc, #16]	; (13ee0 <I2cGetSemaphoreHandle+0x20>)
   13ece:	681a      	ldr	r2, [r3, #0]
   13ed0:	687b      	ldr	r3, [r7, #4]
   13ed2:	601a      	str	r2, [r3, #0]
    return error;
   13ed4:	68fb      	ldr	r3, [r7, #12]
}
   13ed6:	0018      	movs	r0, r3
   13ed8:	46bd      	mov	sp, r7
   13eda:	b004      	add	sp, #16
   13edc:	bd80      	pop	{r7, pc}
   13ede:	46c0      	nop			; (mov r8, r8)
   13ee0:	200043bc 	.word	0x200043bc

00013ee4 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   13ee4:	b580      	push	{r7, lr}
   13ee6:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   13ee8:	4b02      	ldr	r3, [pc, #8]	; (13ef4 <I2cGetTaskErrorStatus+0x10>)
   13eea:	781b      	ldrb	r3, [r3, #0]
}
   13eec:	0018      	movs	r0, r3
   13eee:	46bd      	mov	sp, r7
   13ef0:	bd80      	pop	{r7, pc}
   13ef2:	46c0      	nop			; (mov r8, r8)
   13ef4:	20000436 	.word	0x20000436

00013ef8 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   13ef8:	b580      	push	{r7, lr}
   13efa:	b082      	sub	sp, #8
   13efc:	af00      	add	r7, sp, #0
   13efe:	0002      	movs	r2, r0
   13f00:	1dfb      	adds	r3, r7, #7
   13f02:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   13f04:	4b03      	ldr	r3, [pc, #12]	; (13f14 <I2cSetTaskErrorStatus+0x1c>)
   13f06:	1dfa      	adds	r2, r7, #7
   13f08:	7812      	ldrb	r2, [r2, #0]
   13f0a:	701a      	strb	r2, [r3, #0]
}
   13f0c:	46c0      	nop			; (mov r8, r8)
   13f0e:	46bd      	mov	sp, r7
   13f10:	b002      	add	sp, #8
   13f12:	bd80      	pop	{r7, pc}
   13f14:	20000436 	.word	0x20000436

00013f18 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   13f18:	b580      	push	{r7, lr}
   13f1a:	b084      	sub	sp, #16
   13f1c:	af00      	add	r7, sp, #0
   13f1e:	6078      	str	r0, [r7, #4]
   13f20:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   13f22:	2300      	movs	r3, #0
   13f24:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   13f26:	2300      	movs	r3, #0
   13f28:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13f2a:	2396      	movs	r3, #150	; 0x96
   13f2c:	005b      	lsls	r3, r3, #1
   13f2e:	0018      	movs	r0, r3
   13f30:	4b28      	ldr	r3, [pc, #160]	; (13fd4 <I2cWriteDataWait+0xbc>)
   13f32:	4798      	blx	r3
   13f34:	0003      	movs	r3, r0
   13f36:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13f38:	68fb      	ldr	r3, [r7, #12]
   13f3a:	2b00      	cmp	r3, #0
   13f3c:	d138      	bne.n	13fb0 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   13f3e:	2308      	movs	r3, #8
   13f40:	18fb      	adds	r3, r7, r3
   13f42:	0018      	movs	r0, r3
   13f44:	4b24      	ldr	r3, [pc, #144]	; (13fd8 <I2cWriteDataWait+0xc0>)
   13f46:	4798      	blx	r3
   13f48:	0003      	movs	r3, r0
   13f4a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13f4c:	68fb      	ldr	r3, [r7, #12]
   13f4e:	2b00      	cmp	r3, #0
   13f50:	d130      	bne.n	13fb4 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   13f52:	687b      	ldr	r3, [r7, #4]
   13f54:	0018      	movs	r0, r3
   13f56:	4b21      	ldr	r3, [pc, #132]	; (13fdc <I2cWriteDataWait+0xc4>)
   13f58:	4798      	blx	r3
   13f5a:	0003      	movs	r3, r0
   13f5c:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   13f5e:	68fb      	ldr	r3, [r7, #12]
   13f60:	2b00      	cmp	r3, #0
   13f62:	d12a      	bne.n	13fba <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13f64:	68bb      	ldr	r3, [r7, #8]
   13f66:	683a      	ldr	r2, [r7, #0]
   13f68:	0011      	movs	r1, r2
   13f6a:	0018      	movs	r0, r3
   13f6c:	4b1c      	ldr	r3, [pc, #112]	; (13fe0 <I2cWriteDataWait+0xc8>)
   13f6e:	4798      	blx	r3
   13f70:	0003      	movs	r3, r0
   13f72:	2b01      	cmp	r3, #1
   13f74:	d111      	bne.n	13f9a <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13f76:	4b1b      	ldr	r3, [pc, #108]	; (13fe4 <I2cWriteDataWait+0xcc>)
   13f78:	4798      	blx	r3
   13f7a:	1e03      	subs	r3, r0, #0
   13f7c:	d011      	beq.n	13fa2 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   13f7e:	2000      	movs	r0, #0
   13f80:	4b19      	ldr	r3, [pc, #100]	; (13fe8 <I2cWriteDataWait+0xd0>)
   13f82:	4798      	blx	r3
            if (error != ERROR_NONE) {
   13f84:	68fb      	ldr	r3, [r7, #12]
   13f86:	2b00      	cmp	r3, #0
   13f88:	d003      	beq.n	13f92 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   13f8a:	2321      	movs	r3, #33	; 0x21
   13f8c:	425b      	negs	r3, r3
   13f8e:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   13f90:	e014      	b.n	13fbc <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   13f92:	2303      	movs	r3, #3
   13f94:	425b      	negs	r3, r3
   13f96:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   13f98:	e010      	b.n	13fbc <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   13f9a:	2303      	movs	r3, #3
   13f9c:	425b      	negs	r3, r3
   13f9e:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   13fa0:	e00c      	b.n	13fbc <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   13fa2:	4b12      	ldr	r3, [pc, #72]	; (13fec <I2cWriteDataWait+0xd4>)
   13fa4:	4798      	blx	r3
   13fa6:	0002      	movs	r2, r0
   13fa8:	68fb      	ldr	r3, [r7, #12]
   13faa:	4313      	orrs	r3, r2
   13fac:	60fb      	str	r3, [r7, #12]
   13fae:	e002      	b.n	13fb6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13fb0:	46c0      	nop			; (mov r8, r8)
   13fb2:	e000      	b.n	13fb6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13fb4:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   13fb6:	68fb      	ldr	r3, [r7, #12]
   13fb8:	e007      	b.n	13fca <I2cWriteDataWait+0xb2>
        goto exitError0;
   13fba:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   13fbc:	4b0b      	ldr	r3, [pc, #44]	; (13fec <I2cWriteDataWait+0xd4>)
   13fbe:	4798      	blx	r3
   13fc0:	0002      	movs	r2, r0
   13fc2:	68fb      	ldr	r3, [r7, #12]
   13fc4:	4313      	orrs	r3, r2
   13fc6:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   13fc8:	68fb      	ldr	r3, [r7, #12]
}
   13fca:	0018      	movs	r0, r3
   13fcc:	46bd      	mov	sp, r7
   13fce:	b004      	add	sp, #16
   13fd0:	bd80      	pop	{r7, pc}
   13fd2:	46c0      	nop			; (mov r8, r8)
   13fd4:	00013e89 	.word	0x00013e89
   13fd8:	00013ec1 	.word	0x00013ec1
   13fdc:	00013d61 	.word	0x00013d61
   13fe0:	0001ba3d 	.word	0x0001ba3d
   13fe4:	00013ee5 	.word	0x00013ee5
   13fe8:	00013ef9 	.word	0x00013ef9
   13fec:	00013e51 	.word	0x00013e51

00013ff0 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   13ff0:	b580      	push	{r7, lr}
   13ff2:	b086      	sub	sp, #24
   13ff4:	af00      	add	r7, sp, #0
   13ff6:	60f8      	str	r0, [r7, #12]
   13ff8:	60b9      	str	r1, [r7, #8]
   13ffa:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   13ffc:	2300      	movs	r3, #0
   13ffe:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14000:	2300      	movs	r3, #0
   14002:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14004:	2396      	movs	r3, #150	; 0x96
   14006:	005b      	lsls	r3, r3, #1
   14008:	0018      	movs	r0, r3
   1400a:	4b39      	ldr	r3, [pc, #228]	; (140f0 <I2cReadDataWait+0x100>)
   1400c:	4798      	blx	r3
   1400e:	0003      	movs	r3, r0
   14010:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14012:	697b      	ldr	r3, [r7, #20]
   14014:	2b00      	cmp	r3, #0
   14016:	d15c      	bne.n	140d2 <I2cReadDataWait+0xe2>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   14018:	2310      	movs	r3, #16
   1401a:	18fb      	adds	r3, r7, r3
   1401c:	0018      	movs	r0, r3
   1401e:	4b35      	ldr	r3, [pc, #212]	; (140f4 <I2cReadDataWait+0x104>)
   14020:	4798      	blx	r3
   14022:	0003      	movs	r3, r0
   14024:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14026:	697b      	ldr	r3, [r7, #20]
   14028:	2b00      	cmp	r3, #0
   1402a:	d154      	bne.n	140d6 <I2cReadDataWait+0xe6>

	if(data->msgOut != NULL && data->lenOut != 0 ){
   1402c:	68fb      	ldr	r3, [r7, #12]
   1402e:	685b      	ldr	r3, [r3, #4]
   14030:	2b00      	cmp	r3, #0
   14032:	d024      	beq.n	1407e <I2cReadDataWait+0x8e>
   14034:	68fb      	ldr	r3, [r7, #12]
   14036:	89db      	ldrh	r3, [r3, #14]
   14038:	2b00      	cmp	r3, #0
   1403a:	d020      	beq.n	1407e <I2cReadDataWait+0x8e>
		//---2. Initiate sending data
		error = I2cWriteData(data);
   1403c:	68fb      	ldr	r3, [r7, #12]
   1403e:	0018      	movs	r0, r3
   14040:	4b2d      	ldr	r3, [pc, #180]	; (140f8 <I2cReadDataWait+0x108>)
   14042:	4798      	blx	r3
   14044:	0003      	movs	r3, r0
   14046:	617b      	str	r3, [r7, #20]
		if (ERROR_NONE != error) {
   14048:	697b      	ldr	r3, [r7, #20]
   1404a:	2b00      	cmp	r3, #0
   1404c:	d146      	bne.n	140dc <I2cReadDataWait+0xec>
			goto exitError0;
		}

		//---2. Wait for binary semaphore to tell us that we are done!
		if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1404e:	693b      	ldr	r3, [r7, #16]
   14050:	687a      	ldr	r2, [r7, #4]
   14052:	0011      	movs	r1, r2
   14054:	0018      	movs	r0, r3
   14056:	4b29      	ldr	r3, [pc, #164]	; (140fc <I2cReadDataWait+0x10c>)
   14058:	4798      	blx	r3
   1405a:	0003      	movs	r3, r0
   1405c:	2b01      	cmp	r3, #1
   1405e:	d10a      	bne.n	14076 <I2cReadDataWait+0x86>
			/* The transmission ended as expected. We now delay until the I2C sensor is finished */
			if (I2cGetTaskErrorStatus()) {
   14060:	4b27      	ldr	r3, [pc, #156]	; (14100 <I2cReadDataWait+0x110>)
   14062:	4798      	blx	r3
   14064:	1e03      	subs	r3, r0, #0
   14066:	d00a      	beq.n	1407e <I2cReadDataWait+0x8e>
				I2cSetTaskErrorStatus(false);
   14068:	2000      	movs	r0, #0
   1406a:	4b26      	ldr	r3, [pc, #152]	; (14104 <I2cReadDataWait+0x114>)
   1406c:	4798      	blx	r3
				error = ERROR_ABORTED;
   1406e:	2303      	movs	r3, #3
   14070:	425b      	negs	r3, r3
   14072:	617b      	str	r3, [r7, #20]
				goto exitError0;
   14074:	e035      	b.n	140e2 <I2cReadDataWait+0xf2>
			}
		} else {
			/* The call to ulTaskNotifyTake() timed out. */
			error = ERR_TIMEOUT;
   14076:	2303      	movs	r3, #3
   14078:	425b      	negs	r3, r3
   1407a:	617b      	str	r3, [r7, #20]
			goto exitError0;
   1407c:	e031      	b.n	140e2 <I2cReadDataWait+0xf2>
		}
	}
	
	vTaskDelay(delay);
   1407e:	68bb      	ldr	r3, [r7, #8]
   14080:	0018      	movs	r0, r3
   14082:	4b21      	ldr	r3, [pc, #132]	; (14108 <I2cReadDataWait+0x118>)
   14084:	4798      	blx	r3
	
    //---6. Initiate Read data
    error = I2cReadData(data);
   14086:	68fb      	ldr	r3, [r7, #12]
   14088:	0018      	movs	r0, r3
   1408a:	4b20      	ldr	r3, [pc, #128]	; (1410c <I2cReadDataWait+0x11c>)
   1408c:	4798      	blx	r3
   1408e:	0003      	movs	r3, r0
   14090:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14092:	697b      	ldr	r3, [r7, #20]
   14094:	2b00      	cmp	r3, #0
   14096:	d123      	bne.n	140e0 <I2cReadDataWait+0xf0>
        goto exitError0;
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14098:	693b      	ldr	r3, [r7, #16]
   1409a:	687a      	ldr	r2, [r7, #4]
   1409c:	0011      	movs	r1, r2
   1409e:	0018      	movs	r0, r3
   140a0:	4b16      	ldr	r3, [pc, #88]	; (140fc <I2cReadDataWait+0x10c>)
   140a2:	4798      	blx	r3
   140a4:	0003      	movs	r3, r0
   140a6:	2b01      	cmp	r3, #1
   140a8:	d10a      	bne.n	140c0 <I2cReadDataWait+0xd0>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   140aa:	4b15      	ldr	r3, [pc, #84]	; (14100 <I2cReadDataWait+0x110>)
   140ac:	4798      	blx	r3
   140ae:	1e03      	subs	r3, r0, #0
   140b0:	d00a      	beq.n	140c8 <I2cReadDataWait+0xd8>
            I2cSetTaskErrorStatus(false);
   140b2:	2000      	movs	r0, #0
   140b4:	4b13      	ldr	r3, [pc, #76]	; (14104 <I2cReadDataWait+0x114>)
   140b6:	4798      	blx	r3
            error = ERROR_ABORTED;
   140b8:	2303      	movs	r3, #3
   140ba:	425b      	negs	r3, r3
   140bc:	617b      	str	r3, [r7, #20]
            goto exitError0;
   140be:	e010      	b.n	140e2 <I2cReadDataWait+0xf2>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   140c0:	2303      	movs	r3, #3
   140c2:	425b      	negs	r3, r3
   140c4:	617b      	str	r3, [r7, #20]
        goto exitError0;
   140c6:	e00c      	b.n	140e2 <I2cReadDataWait+0xf2>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   140c8:	4b11      	ldr	r3, [pc, #68]	; (14110 <I2cReadDataWait+0x120>)
   140ca:	4798      	blx	r3
   140cc:	0003      	movs	r3, r0
   140ce:	617b      	str	r3, [r7, #20]
   140d0:	e002      	b.n	140d8 <I2cReadDataWait+0xe8>
    if (ERROR_NONE != error) goto exit;
   140d2:	46c0      	nop			; (mov r8, r8)
   140d4:	e000      	b.n	140d8 <I2cReadDataWait+0xe8>
    if (ERROR_NONE != error) goto exit;
   140d6:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   140d8:	697b      	ldr	r3, [r7, #20]
   140da:	e005      	b.n	140e8 <I2cReadDataWait+0xf8>
			goto exitError0;
   140dc:	46c0      	nop			; (mov r8, r8)
   140de:	e000      	b.n	140e2 <I2cReadDataWait+0xf2>
        goto exitError0;
   140e0:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   140e2:	4b0b      	ldr	r3, [pc, #44]	; (14110 <I2cReadDataWait+0x120>)
   140e4:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   140e6:	697b      	ldr	r3, [r7, #20]
}
   140e8:	0018      	movs	r0, r3
   140ea:	46bd      	mov	sp, r7
   140ec:	b006      	add	sp, #24
   140ee:	bd80      	pop	{r7, pc}
   140f0:	00013e89 	.word	0x00013e89
   140f4:	00013ec1 	.word	0x00013ec1
   140f8:	00013d61 	.word	0x00013d61
   140fc:	0001ba3d 	.word	0x0001ba3d
   14100:	00013ee5 	.word	0x00013ee5
   14104:	00013ef9 	.word	0x00013ef9
   14108:	0001c791 	.word	0x0001c791
   1410c:	00013dd9 	.word	0x00013dd9
   14110:	00013e51 	.word	0x00013e51

00014114 <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14114:	b580      	push	{r7, lr}
   14116:	b086      	sub	sp, #24
   14118:	af00      	add	r7, sp, #0
   1411a:	60f8      	str	r0, [r7, #12]
   1411c:	60b9      	str	r1, [r7, #8]
   1411e:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14120:	2300      	movs	r3, #0
   14122:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   14124:	2300      	movs	r3, #0
   14126:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14128:	2396      	movs	r3, #150	; 0x96
   1412a:	005b      	lsls	r3, r3, #1
   1412c:	0018      	movs	r0, r3
   1412e:	4b24      	ldr	r3, [pc, #144]	; (141c0 <I2cPingAddressWait+0xac>)
   14130:	4798      	blx	r3
   14132:	0003      	movs	r3, r0
   14134:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   14136:	697b      	ldr	r3, [r7, #20]
   14138:	2b00      	cmp	r3, #0
   1413a:	d133      	bne.n	141a4 <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   1413c:	2310      	movs	r3, #16
   1413e:	18fb      	adds	r3, r7, r3
   14140:	0018      	movs	r0, r3
   14142:	4b20      	ldr	r3, [pc, #128]	; (141c4 <I2cPingAddressWait+0xb0>)
   14144:	4798      	blx	r3
   14146:	0003      	movs	r3, r0
   14148:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1414a:	697b      	ldr	r3, [r7, #20]
   1414c:	2b00      	cmp	r3, #0
   1414e:	d12b      	bne.n	141a8 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   14150:	68fb      	ldr	r3, [r7, #12]
   14152:	0018      	movs	r0, r3
   14154:	4b1c      	ldr	r3, [pc, #112]	; (141c8 <I2cPingAddressWait+0xb4>)
   14156:	4798      	blx	r3
   14158:	0003      	movs	r3, r0
   1415a:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   1415c:	697b      	ldr	r3, [r7, #20]
   1415e:	2b00      	cmp	r3, #0
   14160:	d125      	bne.n	141ae <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14162:	693b      	ldr	r3, [r7, #16]
   14164:	687a      	ldr	r2, [r7, #4]
   14166:	0011      	movs	r1, r2
   14168:	0018      	movs	r0, r3
   1416a:	4b18      	ldr	r3, [pc, #96]	; (141cc <I2cPingAddressWait+0xb8>)
   1416c:	4798      	blx	r3
   1416e:	0003      	movs	r3, r0
   14170:	2b01      	cmp	r3, #1
   14172:	d113      	bne.n	1419c <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14174:	4b16      	ldr	r3, [pc, #88]	; (141d0 <I2cPingAddressWait+0xbc>)
   14176:	4798      	blx	r3
   14178:	1e03      	subs	r3, r0, #0
   1417a:	d006      	beq.n	1418a <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   1417c:	2000      	movs	r0, #0
   1417e:	4b15      	ldr	r3, [pc, #84]	; (141d4 <I2cPingAddressWait+0xc0>)
   14180:	4798      	blx	r3
            error = ERROR_ABORTED;
   14182:	2303      	movs	r3, #3
   14184:	425b      	negs	r3, r3
   14186:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14188:	e012      	b.n	141b0 <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   1418a:	68bb      	ldr	r3, [r7, #8]
   1418c:	0018      	movs	r0, r3
   1418e:	4b12      	ldr	r3, [pc, #72]	; (141d8 <I2cPingAddressWait+0xc4>)
   14190:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   14192:	4b12      	ldr	r3, [pc, #72]	; (141dc <I2cPingAddressWait+0xc8>)
   14194:	4798      	blx	r3
   14196:	0003      	movs	r3, r0
   14198:	617b      	str	r3, [r7, #20]
   1419a:	e006      	b.n	141aa <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   1419c:	2303      	movs	r3, #3
   1419e:	425b      	negs	r3, r3
   141a0:	617b      	str	r3, [r7, #20]
        goto exitError0;
   141a2:	e005      	b.n	141b0 <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   141a4:	46c0      	nop			; (mov r8, r8)
   141a6:	e000      	b.n	141aa <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   141a8:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   141aa:	697b      	ldr	r3, [r7, #20]
   141ac:	e003      	b.n	141b6 <I2cPingAddressWait+0xa2>
        goto exitError0;
   141ae:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   141b0:	4b0a      	ldr	r3, [pc, #40]	; (141dc <I2cPingAddressWait+0xc8>)
   141b2:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   141b4:	697b      	ldr	r3, [r7, #20]
   141b6:	0018      	movs	r0, r3
   141b8:	46bd      	mov	sp, r7
   141ba:	b006      	add	sp, #24
   141bc:	bd80      	pop	{r7, pc}
   141be:	46c0      	nop			; (mov r8, r8)
   141c0:	00013e89 	.word	0x00013e89
   141c4:	00013ec1 	.word	0x00013ec1
   141c8:	00013d61 	.word	0x00013d61
   141cc:	0001ba3d 	.word	0x0001ba3d
   141d0:	00013ee5 	.word	0x00013ee5
   141d4:	00013ef9 	.word	0x00013ef9
   141d8:	0001c791 	.word	0x0001c791
   141dc:	00013e51 	.word	0x00013e51

000141e0 <lsm6dso_read_reg>:
   141e0:	b5b0      	push	{r4, r5, r7, lr}
   141e2:	b086      	sub	sp, #24
   141e4:	af00      	add	r7, sp, #0
   141e6:	60f8      	str	r0, [r7, #12]
   141e8:	0008      	movs	r0, r1
   141ea:	607a      	str	r2, [r7, #4]
   141ec:	0019      	movs	r1, r3
   141ee:	230b      	movs	r3, #11
   141f0:	18fb      	adds	r3, r7, r3
   141f2:	1c02      	adds	r2, r0, #0
   141f4:	701a      	strb	r2, [r3, #0]
   141f6:	2308      	movs	r3, #8
   141f8:	18fb      	adds	r3, r7, r3
   141fa:	1c0a      	adds	r2, r1, #0
   141fc:	801a      	strh	r2, [r3, #0]
   141fe:	68fb      	ldr	r3, [r7, #12]
   14200:	685c      	ldr	r4, [r3, #4]
   14202:	68fb      	ldr	r3, [r7, #12]
   14204:	6898      	ldr	r0, [r3, #8]
   14206:	2308      	movs	r3, #8
   14208:	18fb      	adds	r3, r7, r3
   1420a:	881d      	ldrh	r5, [r3, #0]
   1420c:	687a      	ldr	r2, [r7, #4]
   1420e:	230b      	movs	r3, #11
   14210:	18fb      	adds	r3, r7, r3
   14212:	7819      	ldrb	r1, [r3, #0]
   14214:	002b      	movs	r3, r5
   14216:	47a0      	blx	r4
   14218:	0003      	movs	r3, r0
   1421a:	617b      	str	r3, [r7, #20]
   1421c:	697b      	ldr	r3, [r7, #20]
   1421e:	0018      	movs	r0, r3
   14220:	46bd      	mov	sp, r7
   14222:	b006      	add	sp, #24
   14224:	bdb0      	pop	{r4, r5, r7, pc}

00014226 <lsm6dso_write_reg>:
   14226:	b5b0      	push	{r4, r5, r7, lr}
   14228:	b086      	sub	sp, #24
   1422a:	af00      	add	r7, sp, #0
   1422c:	60f8      	str	r0, [r7, #12]
   1422e:	0008      	movs	r0, r1
   14230:	607a      	str	r2, [r7, #4]
   14232:	0019      	movs	r1, r3
   14234:	230b      	movs	r3, #11
   14236:	18fb      	adds	r3, r7, r3
   14238:	1c02      	adds	r2, r0, #0
   1423a:	701a      	strb	r2, [r3, #0]
   1423c:	2308      	movs	r3, #8
   1423e:	18fb      	adds	r3, r7, r3
   14240:	1c0a      	adds	r2, r1, #0
   14242:	801a      	strh	r2, [r3, #0]
   14244:	68fb      	ldr	r3, [r7, #12]
   14246:	681c      	ldr	r4, [r3, #0]
   14248:	68fb      	ldr	r3, [r7, #12]
   1424a:	6898      	ldr	r0, [r3, #8]
   1424c:	2308      	movs	r3, #8
   1424e:	18fb      	adds	r3, r7, r3
   14250:	881d      	ldrh	r5, [r3, #0]
   14252:	687a      	ldr	r2, [r7, #4]
   14254:	230b      	movs	r3, #11
   14256:	18fb      	adds	r3, r7, r3
   14258:	7819      	ldrb	r1, [r3, #0]
   1425a:	002b      	movs	r3, r5
   1425c:	47a0      	blx	r4
   1425e:	0003      	movs	r3, r0
   14260:	617b      	str	r3, [r7, #20]
   14262:	697b      	ldr	r3, [r7, #20]
   14264:	0018      	movs	r0, r3
   14266:	46bd      	mov	sp, r7
   14268:	b006      	add	sp, #24
   1426a:	bdb0      	pop	{r4, r5, r7, pc}

0001426c <lsm6dso_from_fs2_to_mg>:
   1426c:	b580      	push	{r7, lr}
   1426e:	b082      	sub	sp, #8
   14270:	af00      	add	r7, sp, #0
   14272:	0002      	movs	r2, r0
   14274:	1dbb      	adds	r3, r7, #6
   14276:	801a      	strh	r2, [r3, #0]
   14278:	1dbb      	adds	r3, r7, #6
   1427a:	2200      	movs	r2, #0
   1427c:	5e9a      	ldrsh	r2, [r3, r2]
   1427e:	4b06      	ldr	r3, [pc, #24]	; (14298 <lsm6dso_from_fs2_to_mg+0x2c>)
   14280:	0010      	movs	r0, r2
   14282:	4798      	blx	r3
   14284:	1c02      	adds	r2, r0, #0
   14286:	4b05      	ldr	r3, [pc, #20]	; (1429c <lsm6dso_from_fs2_to_mg+0x30>)
   14288:	4905      	ldr	r1, [pc, #20]	; (142a0 <lsm6dso_from_fs2_to_mg+0x34>)
   1428a:	1c10      	adds	r0, r2, #0
   1428c:	4798      	blx	r3
   1428e:	1c03      	adds	r3, r0, #0
   14290:	1c18      	adds	r0, r3, #0
   14292:	46bd      	mov	sp, r7
   14294:	b002      	add	sp, #8
   14296:	bd80      	pop	{r7, pc}
   14298:	00033225 	.word	0x00033225
   1429c:	00032fa5 	.word	0x00032fa5
   142a0:	3d79db23 	.word	0x3d79db23

000142a4 <lsm6dso_xl_full_scale_set>:
   142a4:	b590      	push	{r4, r7, lr}
   142a6:	b085      	sub	sp, #20
   142a8:	af00      	add	r7, sp, #0
   142aa:	6078      	str	r0, [r7, #4]
   142ac:	000a      	movs	r2, r1
   142ae:	1cfb      	adds	r3, r7, #3
   142b0:	701a      	strb	r2, [r3, #0]
   142b2:	2308      	movs	r3, #8
   142b4:	18fa      	adds	r2, r7, r3
   142b6:	6878      	ldr	r0, [r7, #4]
   142b8:	2301      	movs	r3, #1
   142ba:	2110      	movs	r1, #16
   142bc:	4c12      	ldr	r4, [pc, #72]	; (14308 <lsm6dso_xl_full_scale_set+0x64>)
   142be:	47a0      	blx	r4
   142c0:	0003      	movs	r3, r0
   142c2:	60fb      	str	r3, [r7, #12]
   142c4:	68fb      	ldr	r3, [r7, #12]
   142c6:	2b00      	cmp	r3, #0
   142c8:	d119      	bne.n	142fe <lsm6dso_xl_full_scale_set+0x5a>
   142ca:	1cfb      	adds	r3, r7, #3
   142cc:	781b      	ldrb	r3, [r3, #0]
   142ce:	2203      	movs	r2, #3
   142d0:	4013      	ands	r3, r2
   142d2:	b2da      	uxtb	r2, r3
   142d4:	2308      	movs	r3, #8
   142d6:	18fb      	adds	r3, r7, r3
   142d8:	2103      	movs	r1, #3
   142da:	400a      	ands	r2, r1
   142dc:	0090      	lsls	r0, r2, #2
   142de:	781a      	ldrb	r2, [r3, #0]
   142e0:	210c      	movs	r1, #12
   142e2:	438a      	bics	r2, r1
   142e4:	1c11      	adds	r1, r2, #0
   142e6:	1c02      	adds	r2, r0, #0
   142e8:	430a      	orrs	r2, r1
   142ea:	701a      	strb	r2, [r3, #0]
   142ec:	2308      	movs	r3, #8
   142ee:	18fa      	adds	r2, r7, r3
   142f0:	6878      	ldr	r0, [r7, #4]
   142f2:	2301      	movs	r3, #1
   142f4:	2110      	movs	r1, #16
   142f6:	4c05      	ldr	r4, [pc, #20]	; (1430c <lsm6dso_xl_full_scale_set+0x68>)
   142f8:	47a0      	blx	r4
   142fa:	0003      	movs	r3, r0
   142fc:	60fb      	str	r3, [r7, #12]
   142fe:	68fb      	ldr	r3, [r7, #12]
   14300:	0018      	movs	r0, r3
   14302:	46bd      	mov	sp, r7
   14304:	b005      	add	sp, #20
   14306:	bd90      	pop	{r4, r7, pc}
   14308:	000141e1 	.word	0x000141e1
   1430c:	00014227 	.word	0x00014227

00014310 <lsm6dso_xl_data_rate_set>:
   14310:	b590      	push	{r4, r7, lr}
   14312:	b087      	sub	sp, #28
   14314:	af00      	add	r7, sp, #0
   14316:	6078      	str	r0, [r7, #4]
   14318:	000a      	movs	r2, r1
   1431a:	1cfb      	adds	r3, r7, #3
   1431c:	701a      	strb	r2, [r3, #0]
   1431e:	2317      	movs	r3, #23
   14320:	18fb      	adds	r3, r7, r3
   14322:	1cfa      	adds	r2, r7, #3
   14324:	7812      	ldrb	r2, [r2, #0]
   14326:	701a      	strb	r2, [r3, #0]
   14328:	230c      	movs	r3, #12
   1432a:	18fa      	adds	r2, r7, r3
   1432c:	687b      	ldr	r3, [r7, #4]
   1432e:	0011      	movs	r1, r2
   14330:	0018      	movs	r0, r3
   14332:	4ba4      	ldr	r3, [pc, #656]	; (145c4 <lsm6dso_xl_data_rate_set+0x2b4>)
   14334:	4798      	blx	r3
   14336:	0003      	movs	r3, r0
   14338:	613b      	str	r3, [r7, #16]
   1433a:	693b      	ldr	r3, [r7, #16]
   1433c:	2b00      	cmp	r3, #0
   1433e:	d000      	beq.n	14342 <lsm6dso_xl_data_rate_set+0x32>
   14340:	e113      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   14342:	230c      	movs	r3, #12
   14344:	18fb      	adds	r3, r7, r3
   14346:	781b      	ldrb	r3, [r3, #0]
   14348:	07db      	lsls	r3, r3, #31
   1434a:	0fdb      	lsrs	r3, r3, #31
   1434c:	b2da      	uxtb	r2, r3
   1434e:	230c      	movs	r3, #12
   14350:	18fb      	adds	r3, r7, r3
   14352:	781b      	ldrb	r3, [r3, #0]
   14354:	079b      	lsls	r3, r3, #30
   14356:	0fdb      	lsrs	r3, r3, #31
   14358:	b2db      	uxtb	r3, r3
   1435a:	4313      	orrs	r3, r2
   1435c:	b2da      	uxtb	r2, r3
   1435e:	230c      	movs	r3, #12
   14360:	18fb      	adds	r3, r7, r3
   14362:	781b      	ldrb	r3, [r3, #0]
   14364:	075b      	lsls	r3, r3, #29
   14366:	0fdb      	lsrs	r3, r3, #31
   14368:	b2db      	uxtb	r3, r3
   1436a:	4313      	orrs	r3, r2
   1436c:	b2da      	uxtb	r2, r3
   1436e:	230c      	movs	r3, #12
   14370:	18fb      	adds	r3, r7, r3
   14372:	781b      	ldrb	r3, [r3, #0]
   14374:	071b      	lsls	r3, r3, #28
   14376:	0fdb      	lsrs	r3, r3, #31
   14378:	b2db      	uxtb	r3, r3
   1437a:	4313      	orrs	r3, r2
   1437c:	b2da      	uxtb	r2, r3
   1437e:	230c      	movs	r3, #12
   14380:	18fb      	adds	r3, r7, r3
   14382:	781b      	ldrb	r3, [r3, #0]
   14384:	06db      	lsls	r3, r3, #27
   14386:	0fdb      	lsrs	r3, r3, #31
   14388:	b2db      	uxtb	r3, r3
   1438a:	4313      	orrs	r3, r2
   1438c:	b2da      	uxtb	r2, r3
   1438e:	230c      	movs	r3, #12
   14390:	18fb      	adds	r3, r7, r3
   14392:	781b      	ldrb	r3, [r3, #0]
   14394:	069b      	lsls	r3, r3, #26
   14396:	0fdb      	lsrs	r3, r3, #31
   14398:	b2db      	uxtb	r3, r3
   1439a:	4313      	orrs	r3, r2
   1439c:	b2da      	uxtb	r2, r3
   1439e:	230c      	movs	r3, #12
   143a0:	18fb      	adds	r3, r7, r3
   143a2:	781b      	ldrb	r3, [r3, #0]
   143a4:	065b      	lsls	r3, r3, #25
   143a6:	0fdb      	lsrs	r3, r3, #31
   143a8:	b2db      	uxtb	r3, r3
   143aa:	4313      	orrs	r3, r2
   143ac:	b2da      	uxtb	r2, r3
   143ae:	230c      	movs	r3, #12
   143b0:	18fb      	adds	r3, r7, r3
   143b2:	781b      	ldrb	r3, [r3, #0]
   143b4:	061b      	lsls	r3, r3, #24
   143b6:	0fdb      	lsrs	r3, r3, #31
   143b8:	b2db      	uxtb	r3, r3
   143ba:	4313      	orrs	r3, r2
   143bc:	b2da      	uxtb	r2, r3
   143be:	230c      	movs	r3, #12
   143c0:	18fb      	adds	r3, r7, r3
   143c2:	785b      	ldrb	r3, [r3, #1]
   143c4:	07db      	lsls	r3, r3, #31
   143c6:	0fdb      	lsrs	r3, r3, #31
   143c8:	b2db      	uxtb	r3, r3
   143ca:	4313      	orrs	r3, r2
   143cc:	b2da      	uxtb	r2, r3
   143ce:	230c      	movs	r3, #12
   143d0:	18fb      	adds	r3, r7, r3
   143d2:	785b      	ldrb	r3, [r3, #1]
   143d4:	079b      	lsls	r3, r3, #30
   143d6:	0fdb      	lsrs	r3, r3, #31
   143d8:	b2db      	uxtb	r3, r3
   143da:	4313      	orrs	r3, r2
   143dc:	b2da      	uxtb	r2, r3
   143de:	230c      	movs	r3, #12
   143e0:	18fb      	adds	r3, r7, r3
   143e2:	785b      	ldrb	r3, [r3, #1]
   143e4:	075b      	lsls	r3, r3, #29
   143e6:	0fdb      	lsrs	r3, r3, #31
   143e8:	b2db      	uxtb	r3, r3
   143ea:	4313      	orrs	r3, r2
   143ec:	b2da      	uxtb	r2, r3
   143ee:	230c      	movs	r3, #12
   143f0:	18fb      	adds	r3, r7, r3
   143f2:	785b      	ldrb	r3, [r3, #1]
   143f4:	071b      	lsls	r3, r3, #28
   143f6:	0fdb      	lsrs	r3, r3, #31
   143f8:	b2db      	uxtb	r3, r3
   143fa:	4313      	orrs	r3, r2
   143fc:	b2da      	uxtb	r2, r3
   143fe:	230c      	movs	r3, #12
   14400:	18fb      	adds	r3, r7, r3
   14402:	785b      	ldrb	r3, [r3, #1]
   14404:	06db      	lsls	r3, r3, #27
   14406:	0fdb      	lsrs	r3, r3, #31
   14408:	b2db      	uxtb	r3, r3
   1440a:	4313      	orrs	r3, r2
   1440c:	b2da      	uxtb	r2, r3
   1440e:	230c      	movs	r3, #12
   14410:	18fb      	adds	r3, r7, r3
   14412:	785b      	ldrb	r3, [r3, #1]
   14414:	069b      	lsls	r3, r3, #26
   14416:	0fdb      	lsrs	r3, r3, #31
   14418:	b2db      	uxtb	r3, r3
   1441a:	4313      	orrs	r3, r2
   1441c:	b2da      	uxtb	r2, r3
   1441e:	230c      	movs	r3, #12
   14420:	18fb      	adds	r3, r7, r3
   14422:	785b      	ldrb	r3, [r3, #1]
   14424:	065b      	lsls	r3, r3, #25
   14426:	0fdb      	lsrs	r3, r3, #31
   14428:	b2db      	uxtb	r3, r3
   1442a:	4313      	orrs	r3, r2
   1442c:	b2da      	uxtb	r2, r3
   1442e:	230c      	movs	r3, #12
   14430:	18fb      	adds	r3, r7, r3
   14432:	785b      	ldrb	r3, [r3, #1]
   14434:	061b      	lsls	r3, r3, #24
   14436:	0fdb      	lsrs	r3, r3, #31
   14438:	b2db      	uxtb	r3, r3
   1443a:	4313      	orrs	r3, r2
   1443c:	b2db      	uxtb	r3, r3
   1443e:	2b01      	cmp	r3, #1
   14440:	d000      	beq.n	14444 <lsm6dso_xl_data_rate_set+0x134>
   14442:	e092      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   14444:	230b      	movs	r3, #11
   14446:	18fa      	adds	r2, r7, r3
   14448:	687b      	ldr	r3, [r7, #4]
   1444a:	0011      	movs	r1, r2
   1444c:	0018      	movs	r0, r3
   1444e:	4b5e      	ldr	r3, [pc, #376]	; (145c8 <lsm6dso_xl_data_rate_set+0x2b8>)
   14450:	4798      	blx	r3
   14452:	0003      	movs	r3, r0
   14454:	613b      	str	r3, [r7, #16]
   14456:	693b      	ldr	r3, [r7, #16]
   14458:	2b00      	cmp	r3, #0
   1445a:	d000      	beq.n	1445e <lsm6dso_xl_data_rate_set+0x14e>
   1445c:	e085      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   1445e:	230b      	movs	r3, #11
   14460:	18fb      	adds	r3, r7, r3
   14462:	781b      	ldrb	r3, [r3, #0]
   14464:	2b01      	cmp	r3, #1
   14466:	d017      	beq.n	14498 <lsm6dso_xl_data_rate_set+0x188>
   14468:	dc02      	bgt.n	14470 <lsm6dso_xl_data_rate_set+0x160>
   1446a:	2b00      	cmp	r3, #0
   1446c:	d005      	beq.n	1447a <lsm6dso_xl_data_rate_set+0x16a>
   1446e:	e076      	b.n	1455e <lsm6dso_xl_data_rate_set+0x24e>
   14470:	2b02      	cmp	r3, #2
   14472:	d029      	beq.n	144c8 <lsm6dso_xl_data_rate_set+0x1b8>
   14474:	2b03      	cmp	r3, #3
   14476:	d048      	beq.n	1450a <lsm6dso_xl_data_rate_set+0x1fa>
   14478:	e071      	b.n	1455e <lsm6dso_xl_data_rate_set+0x24e>
   1447a:	1cfb      	adds	r3, r7, #3
   1447c:	781b      	ldrb	r3, [r3, #0]
   1447e:	2b00      	cmp	r3, #0
   14480:	d104      	bne.n	1448c <lsm6dso_xl_data_rate_set+0x17c>
   14482:	2317      	movs	r3, #23
   14484:	18fb      	adds	r3, r7, r3
   14486:	2201      	movs	r2, #1
   14488:	701a      	strb	r2, [r3, #0]
   1448a:	e06e      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   1448c:	2317      	movs	r3, #23
   1448e:	18fb      	adds	r3, r7, r3
   14490:	1cfa      	adds	r2, r7, #3
   14492:	7812      	ldrb	r2, [r2, #0]
   14494:	701a      	strb	r2, [r3, #0]
   14496:	e068      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   14498:	1cfb      	adds	r3, r7, #3
   1449a:	781b      	ldrb	r3, [r3, #0]
   1449c:	2b00      	cmp	r3, #0
   1449e:	d104      	bne.n	144aa <lsm6dso_xl_data_rate_set+0x19a>
   144a0:	2317      	movs	r3, #23
   144a2:	18fb      	adds	r3, r7, r3
   144a4:	2202      	movs	r2, #2
   144a6:	701a      	strb	r2, [r3, #0]
   144a8:	e05f      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   144aa:	1cfb      	adds	r3, r7, #3
   144ac:	781b      	ldrb	r3, [r3, #0]
   144ae:	2b01      	cmp	r3, #1
   144b0:	d104      	bne.n	144bc <lsm6dso_xl_data_rate_set+0x1ac>
   144b2:	2317      	movs	r3, #23
   144b4:	18fb      	adds	r3, r7, r3
   144b6:	2202      	movs	r2, #2
   144b8:	701a      	strb	r2, [r3, #0]
   144ba:	e056      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   144bc:	2317      	movs	r3, #23
   144be:	18fb      	adds	r3, r7, r3
   144c0:	1cfa      	adds	r2, r7, #3
   144c2:	7812      	ldrb	r2, [r2, #0]
   144c4:	701a      	strb	r2, [r3, #0]
   144c6:	e050      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   144c8:	1cfb      	adds	r3, r7, #3
   144ca:	781b      	ldrb	r3, [r3, #0]
   144cc:	2b00      	cmp	r3, #0
   144ce:	d104      	bne.n	144da <lsm6dso_xl_data_rate_set+0x1ca>
   144d0:	2317      	movs	r3, #23
   144d2:	18fb      	adds	r3, r7, r3
   144d4:	2203      	movs	r2, #3
   144d6:	701a      	strb	r2, [r3, #0]
   144d8:	e047      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   144da:	1cfb      	adds	r3, r7, #3
   144dc:	781b      	ldrb	r3, [r3, #0]
   144de:	2b01      	cmp	r3, #1
   144e0:	d104      	bne.n	144ec <lsm6dso_xl_data_rate_set+0x1dc>
   144e2:	2317      	movs	r3, #23
   144e4:	18fb      	adds	r3, r7, r3
   144e6:	2203      	movs	r2, #3
   144e8:	701a      	strb	r2, [r3, #0]
   144ea:	e03e      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   144ec:	1cfb      	adds	r3, r7, #3
   144ee:	781b      	ldrb	r3, [r3, #0]
   144f0:	2b02      	cmp	r3, #2
   144f2:	d104      	bne.n	144fe <lsm6dso_xl_data_rate_set+0x1ee>
   144f4:	2317      	movs	r3, #23
   144f6:	18fb      	adds	r3, r7, r3
   144f8:	2203      	movs	r2, #3
   144fa:	701a      	strb	r2, [r3, #0]
   144fc:	e035      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   144fe:	2317      	movs	r3, #23
   14500:	18fb      	adds	r3, r7, r3
   14502:	1cfa      	adds	r2, r7, #3
   14504:	7812      	ldrb	r2, [r2, #0]
   14506:	701a      	strb	r2, [r3, #0]
   14508:	e02f      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   1450a:	1cfb      	adds	r3, r7, #3
   1450c:	781b      	ldrb	r3, [r3, #0]
   1450e:	2b00      	cmp	r3, #0
   14510:	d104      	bne.n	1451c <lsm6dso_xl_data_rate_set+0x20c>
   14512:	2317      	movs	r3, #23
   14514:	18fb      	adds	r3, r7, r3
   14516:	2204      	movs	r2, #4
   14518:	701a      	strb	r2, [r3, #0]
   1451a:	e026      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   1451c:	1cfb      	adds	r3, r7, #3
   1451e:	781b      	ldrb	r3, [r3, #0]
   14520:	2b01      	cmp	r3, #1
   14522:	d104      	bne.n	1452e <lsm6dso_xl_data_rate_set+0x21e>
   14524:	2317      	movs	r3, #23
   14526:	18fb      	adds	r3, r7, r3
   14528:	2204      	movs	r2, #4
   1452a:	701a      	strb	r2, [r3, #0]
   1452c:	e01d      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   1452e:	1cfb      	adds	r3, r7, #3
   14530:	781b      	ldrb	r3, [r3, #0]
   14532:	2b02      	cmp	r3, #2
   14534:	d104      	bne.n	14540 <lsm6dso_xl_data_rate_set+0x230>
   14536:	2317      	movs	r3, #23
   14538:	18fb      	adds	r3, r7, r3
   1453a:	2204      	movs	r2, #4
   1453c:	701a      	strb	r2, [r3, #0]
   1453e:	e014      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   14540:	1cfb      	adds	r3, r7, #3
   14542:	781b      	ldrb	r3, [r3, #0]
   14544:	2b03      	cmp	r3, #3
   14546:	d104      	bne.n	14552 <lsm6dso_xl_data_rate_set+0x242>
   14548:	2317      	movs	r3, #23
   1454a:	18fb      	adds	r3, r7, r3
   1454c:	2204      	movs	r2, #4
   1454e:	701a      	strb	r2, [r3, #0]
   14550:	e00b      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   14552:	2317      	movs	r3, #23
   14554:	18fb      	adds	r3, r7, r3
   14556:	1cfa      	adds	r2, r7, #3
   14558:	7812      	ldrb	r2, [r2, #0]
   1455a:	701a      	strb	r2, [r3, #0]
   1455c:	e005      	b.n	1456a <lsm6dso_xl_data_rate_set+0x25a>
   1455e:	2317      	movs	r3, #23
   14560:	18fb      	adds	r3, r7, r3
   14562:	1cfa      	adds	r2, r7, #3
   14564:	7812      	ldrb	r2, [r2, #0]
   14566:	701a      	strb	r2, [r3, #0]
   14568:	46c0      	nop			; (mov r8, r8)
   1456a:	693b      	ldr	r3, [r7, #16]
   1456c:	2b00      	cmp	r3, #0
   1456e:	d108      	bne.n	14582 <lsm6dso_xl_data_rate_set+0x272>
   14570:	2308      	movs	r3, #8
   14572:	18fa      	adds	r2, r7, r3
   14574:	6878      	ldr	r0, [r7, #4]
   14576:	2301      	movs	r3, #1
   14578:	2110      	movs	r1, #16
   1457a:	4c14      	ldr	r4, [pc, #80]	; (145cc <lsm6dso_xl_data_rate_set+0x2bc>)
   1457c:	47a0      	blx	r4
   1457e:	0003      	movs	r3, r0
   14580:	613b      	str	r3, [r7, #16]
   14582:	693b      	ldr	r3, [r7, #16]
   14584:	2b00      	cmp	r3, #0
   14586:	d118      	bne.n	145ba <lsm6dso_xl_data_rate_set+0x2aa>
   14588:	2317      	movs	r3, #23
   1458a:	18fb      	adds	r3, r7, r3
   1458c:	781b      	ldrb	r3, [r3, #0]
   1458e:	220f      	movs	r2, #15
   14590:	4013      	ands	r3, r2
   14592:	b2da      	uxtb	r2, r3
   14594:	2308      	movs	r3, #8
   14596:	18fb      	adds	r3, r7, r3
   14598:	0110      	lsls	r0, r2, #4
   1459a:	781a      	ldrb	r2, [r3, #0]
   1459c:	210f      	movs	r1, #15
   1459e:	400a      	ands	r2, r1
   145a0:	1c11      	adds	r1, r2, #0
   145a2:	1c02      	adds	r2, r0, #0
   145a4:	430a      	orrs	r2, r1
   145a6:	701a      	strb	r2, [r3, #0]
   145a8:	2308      	movs	r3, #8
   145aa:	18fa      	adds	r2, r7, r3
   145ac:	6878      	ldr	r0, [r7, #4]
   145ae:	2301      	movs	r3, #1
   145b0:	2110      	movs	r1, #16
   145b2:	4c07      	ldr	r4, [pc, #28]	; (145d0 <lsm6dso_xl_data_rate_set+0x2c0>)
   145b4:	47a0      	blx	r4
   145b6:	0003      	movs	r3, r0
   145b8:	613b      	str	r3, [r7, #16]
   145ba:	693b      	ldr	r3, [r7, #16]
   145bc:	0018      	movs	r0, r3
   145be:	46bd      	mov	sp, r7
   145c0:	b007      	add	sp, #28
   145c2:	bd90      	pop	{r4, r7, pc}
   145c4:	00014ded 	.word	0x00014ded
   145c8:	00014e41 	.word	0x00014e41
   145cc:	000141e1 	.word	0x000141e1
   145d0:	00014227 	.word	0x00014227

000145d4 <lsm6dso_gy_full_scale_set>:
   145d4:	b590      	push	{r4, r7, lr}
   145d6:	b085      	sub	sp, #20
   145d8:	af00      	add	r7, sp, #0
   145da:	6078      	str	r0, [r7, #4]
   145dc:	000a      	movs	r2, r1
   145de:	1cfb      	adds	r3, r7, #3
   145e0:	701a      	strb	r2, [r3, #0]
   145e2:	2308      	movs	r3, #8
   145e4:	18fa      	adds	r2, r7, r3
   145e6:	6878      	ldr	r0, [r7, #4]
   145e8:	2301      	movs	r3, #1
   145ea:	2111      	movs	r1, #17
   145ec:	4c12      	ldr	r4, [pc, #72]	; (14638 <lsm6dso_gy_full_scale_set+0x64>)
   145ee:	47a0      	blx	r4
   145f0:	0003      	movs	r3, r0
   145f2:	60fb      	str	r3, [r7, #12]
   145f4:	68fb      	ldr	r3, [r7, #12]
   145f6:	2b00      	cmp	r3, #0
   145f8:	d119      	bne.n	1462e <lsm6dso_gy_full_scale_set+0x5a>
   145fa:	1cfb      	adds	r3, r7, #3
   145fc:	781b      	ldrb	r3, [r3, #0]
   145fe:	2207      	movs	r2, #7
   14600:	4013      	ands	r3, r2
   14602:	b2da      	uxtb	r2, r3
   14604:	2308      	movs	r3, #8
   14606:	18fb      	adds	r3, r7, r3
   14608:	2107      	movs	r1, #7
   1460a:	400a      	ands	r2, r1
   1460c:	1890      	adds	r0, r2, r2
   1460e:	781a      	ldrb	r2, [r3, #0]
   14610:	210e      	movs	r1, #14
   14612:	438a      	bics	r2, r1
   14614:	1c11      	adds	r1, r2, #0
   14616:	1c02      	adds	r2, r0, #0
   14618:	430a      	orrs	r2, r1
   1461a:	701a      	strb	r2, [r3, #0]
   1461c:	2308      	movs	r3, #8
   1461e:	18fa      	adds	r2, r7, r3
   14620:	6878      	ldr	r0, [r7, #4]
   14622:	2301      	movs	r3, #1
   14624:	2111      	movs	r1, #17
   14626:	4c05      	ldr	r4, [pc, #20]	; (1463c <lsm6dso_gy_full_scale_set+0x68>)
   14628:	47a0      	blx	r4
   1462a:	0003      	movs	r3, r0
   1462c:	60fb      	str	r3, [r7, #12]
   1462e:	68fb      	ldr	r3, [r7, #12]
   14630:	0018      	movs	r0, r3
   14632:	46bd      	mov	sp, r7
   14634:	b005      	add	sp, #20
   14636:	bd90      	pop	{r4, r7, pc}
   14638:	000141e1 	.word	0x000141e1
   1463c:	00014227 	.word	0x00014227

00014640 <lsm6dso_gy_data_rate_set>:
   14640:	b590      	push	{r4, r7, lr}
   14642:	b087      	sub	sp, #28
   14644:	af00      	add	r7, sp, #0
   14646:	6078      	str	r0, [r7, #4]
   14648:	000a      	movs	r2, r1
   1464a:	1cfb      	adds	r3, r7, #3
   1464c:	701a      	strb	r2, [r3, #0]
   1464e:	2317      	movs	r3, #23
   14650:	18fb      	adds	r3, r7, r3
   14652:	1cfa      	adds	r2, r7, #3
   14654:	7812      	ldrb	r2, [r2, #0]
   14656:	701a      	strb	r2, [r3, #0]
   14658:	230c      	movs	r3, #12
   1465a:	18fa      	adds	r2, r7, r3
   1465c:	687b      	ldr	r3, [r7, #4]
   1465e:	0011      	movs	r1, r2
   14660:	0018      	movs	r0, r3
   14662:	4ba4      	ldr	r3, [pc, #656]	; (148f4 <lsm6dso_gy_data_rate_set+0x2b4>)
   14664:	4798      	blx	r3
   14666:	0003      	movs	r3, r0
   14668:	613b      	str	r3, [r7, #16]
   1466a:	693b      	ldr	r3, [r7, #16]
   1466c:	2b00      	cmp	r3, #0
   1466e:	d000      	beq.n	14672 <lsm6dso_gy_data_rate_set+0x32>
   14670:	e113      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   14672:	230c      	movs	r3, #12
   14674:	18fb      	adds	r3, r7, r3
   14676:	781b      	ldrb	r3, [r3, #0]
   14678:	07db      	lsls	r3, r3, #31
   1467a:	0fdb      	lsrs	r3, r3, #31
   1467c:	b2da      	uxtb	r2, r3
   1467e:	230c      	movs	r3, #12
   14680:	18fb      	adds	r3, r7, r3
   14682:	781b      	ldrb	r3, [r3, #0]
   14684:	079b      	lsls	r3, r3, #30
   14686:	0fdb      	lsrs	r3, r3, #31
   14688:	b2db      	uxtb	r3, r3
   1468a:	4313      	orrs	r3, r2
   1468c:	b2da      	uxtb	r2, r3
   1468e:	230c      	movs	r3, #12
   14690:	18fb      	adds	r3, r7, r3
   14692:	781b      	ldrb	r3, [r3, #0]
   14694:	075b      	lsls	r3, r3, #29
   14696:	0fdb      	lsrs	r3, r3, #31
   14698:	b2db      	uxtb	r3, r3
   1469a:	4313      	orrs	r3, r2
   1469c:	b2da      	uxtb	r2, r3
   1469e:	230c      	movs	r3, #12
   146a0:	18fb      	adds	r3, r7, r3
   146a2:	781b      	ldrb	r3, [r3, #0]
   146a4:	071b      	lsls	r3, r3, #28
   146a6:	0fdb      	lsrs	r3, r3, #31
   146a8:	b2db      	uxtb	r3, r3
   146aa:	4313      	orrs	r3, r2
   146ac:	b2da      	uxtb	r2, r3
   146ae:	230c      	movs	r3, #12
   146b0:	18fb      	adds	r3, r7, r3
   146b2:	781b      	ldrb	r3, [r3, #0]
   146b4:	06db      	lsls	r3, r3, #27
   146b6:	0fdb      	lsrs	r3, r3, #31
   146b8:	b2db      	uxtb	r3, r3
   146ba:	4313      	orrs	r3, r2
   146bc:	b2da      	uxtb	r2, r3
   146be:	230c      	movs	r3, #12
   146c0:	18fb      	adds	r3, r7, r3
   146c2:	781b      	ldrb	r3, [r3, #0]
   146c4:	069b      	lsls	r3, r3, #26
   146c6:	0fdb      	lsrs	r3, r3, #31
   146c8:	b2db      	uxtb	r3, r3
   146ca:	4313      	orrs	r3, r2
   146cc:	b2da      	uxtb	r2, r3
   146ce:	230c      	movs	r3, #12
   146d0:	18fb      	adds	r3, r7, r3
   146d2:	781b      	ldrb	r3, [r3, #0]
   146d4:	065b      	lsls	r3, r3, #25
   146d6:	0fdb      	lsrs	r3, r3, #31
   146d8:	b2db      	uxtb	r3, r3
   146da:	4313      	orrs	r3, r2
   146dc:	b2da      	uxtb	r2, r3
   146de:	230c      	movs	r3, #12
   146e0:	18fb      	adds	r3, r7, r3
   146e2:	781b      	ldrb	r3, [r3, #0]
   146e4:	061b      	lsls	r3, r3, #24
   146e6:	0fdb      	lsrs	r3, r3, #31
   146e8:	b2db      	uxtb	r3, r3
   146ea:	4313      	orrs	r3, r2
   146ec:	b2da      	uxtb	r2, r3
   146ee:	230c      	movs	r3, #12
   146f0:	18fb      	adds	r3, r7, r3
   146f2:	785b      	ldrb	r3, [r3, #1]
   146f4:	07db      	lsls	r3, r3, #31
   146f6:	0fdb      	lsrs	r3, r3, #31
   146f8:	b2db      	uxtb	r3, r3
   146fa:	4313      	orrs	r3, r2
   146fc:	b2da      	uxtb	r2, r3
   146fe:	230c      	movs	r3, #12
   14700:	18fb      	adds	r3, r7, r3
   14702:	785b      	ldrb	r3, [r3, #1]
   14704:	079b      	lsls	r3, r3, #30
   14706:	0fdb      	lsrs	r3, r3, #31
   14708:	b2db      	uxtb	r3, r3
   1470a:	4313      	orrs	r3, r2
   1470c:	b2da      	uxtb	r2, r3
   1470e:	230c      	movs	r3, #12
   14710:	18fb      	adds	r3, r7, r3
   14712:	785b      	ldrb	r3, [r3, #1]
   14714:	075b      	lsls	r3, r3, #29
   14716:	0fdb      	lsrs	r3, r3, #31
   14718:	b2db      	uxtb	r3, r3
   1471a:	4313      	orrs	r3, r2
   1471c:	b2da      	uxtb	r2, r3
   1471e:	230c      	movs	r3, #12
   14720:	18fb      	adds	r3, r7, r3
   14722:	785b      	ldrb	r3, [r3, #1]
   14724:	071b      	lsls	r3, r3, #28
   14726:	0fdb      	lsrs	r3, r3, #31
   14728:	b2db      	uxtb	r3, r3
   1472a:	4313      	orrs	r3, r2
   1472c:	b2da      	uxtb	r2, r3
   1472e:	230c      	movs	r3, #12
   14730:	18fb      	adds	r3, r7, r3
   14732:	785b      	ldrb	r3, [r3, #1]
   14734:	06db      	lsls	r3, r3, #27
   14736:	0fdb      	lsrs	r3, r3, #31
   14738:	b2db      	uxtb	r3, r3
   1473a:	4313      	orrs	r3, r2
   1473c:	b2da      	uxtb	r2, r3
   1473e:	230c      	movs	r3, #12
   14740:	18fb      	adds	r3, r7, r3
   14742:	785b      	ldrb	r3, [r3, #1]
   14744:	069b      	lsls	r3, r3, #26
   14746:	0fdb      	lsrs	r3, r3, #31
   14748:	b2db      	uxtb	r3, r3
   1474a:	4313      	orrs	r3, r2
   1474c:	b2da      	uxtb	r2, r3
   1474e:	230c      	movs	r3, #12
   14750:	18fb      	adds	r3, r7, r3
   14752:	785b      	ldrb	r3, [r3, #1]
   14754:	065b      	lsls	r3, r3, #25
   14756:	0fdb      	lsrs	r3, r3, #31
   14758:	b2db      	uxtb	r3, r3
   1475a:	4313      	orrs	r3, r2
   1475c:	b2da      	uxtb	r2, r3
   1475e:	230c      	movs	r3, #12
   14760:	18fb      	adds	r3, r7, r3
   14762:	785b      	ldrb	r3, [r3, #1]
   14764:	061b      	lsls	r3, r3, #24
   14766:	0fdb      	lsrs	r3, r3, #31
   14768:	b2db      	uxtb	r3, r3
   1476a:	4313      	orrs	r3, r2
   1476c:	b2db      	uxtb	r3, r3
   1476e:	2b01      	cmp	r3, #1
   14770:	d000      	beq.n	14774 <lsm6dso_gy_data_rate_set+0x134>
   14772:	e092      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   14774:	230b      	movs	r3, #11
   14776:	18fa      	adds	r2, r7, r3
   14778:	687b      	ldr	r3, [r7, #4]
   1477a:	0011      	movs	r1, r2
   1477c:	0018      	movs	r0, r3
   1477e:	4b5e      	ldr	r3, [pc, #376]	; (148f8 <lsm6dso_gy_data_rate_set+0x2b8>)
   14780:	4798      	blx	r3
   14782:	0003      	movs	r3, r0
   14784:	613b      	str	r3, [r7, #16]
   14786:	693b      	ldr	r3, [r7, #16]
   14788:	2b00      	cmp	r3, #0
   1478a:	d000      	beq.n	1478e <lsm6dso_gy_data_rate_set+0x14e>
   1478c:	e085      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   1478e:	230b      	movs	r3, #11
   14790:	18fb      	adds	r3, r7, r3
   14792:	781b      	ldrb	r3, [r3, #0]
   14794:	2b01      	cmp	r3, #1
   14796:	d017      	beq.n	147c8 <lsm6dso_gy_data_rate_set+0x188>
   14798:	dc02      	bgt.n	147a0 <lsm6dso_gy_data_rate_set+0x160>
   1479a:	2b00      	cmp	r3, #0
   1479c:	d005      	beq.n	147aa <lsm6dso_gy_data_rate_set+0x16a>
   1479e:	e076      	b.n	1488e <lsm6dso_gy_data_rate_set+0x24e>
   147a0:	2b02      	cmp	r3, #2
   147a2:	d029      	beq.n	147f8 <lsm6dso_gy_data_rate_set+0x1b8>
   147a4:	2b03      	cmp	r3, #3
   147a6:	d048      	beq.n	1483a <lsm6dso_gy_data_rate_set+0x1fa>
   147a8:	e071      	b.n	1488e <lsm6dso_gy_data_rate_set+0x24e>
   147aa:	1cfb      	adds	r3, r7, #3
   147ac:	781b      	ldrb	r3, [r3, #0]
   147ae:	2b00      	cmp	r3, #0
   147b0:	d104      	bne.n	147bc <lsm6dso_gy_data_rate_set+0x17c>
   147b2:	2317      	movs	r3, #23
   147b4:	18fb      	adds	r3, r7, r3
   147b6:	2201      	movs	r2, #1
   147b8:	701a      	strb	r2, [r3, #0]
   147ba:	e06e      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   147bc:	2317      	movs	r3, #23
   147be:	18fb      	adds	r3, r7, r3
   147c0:	1cfa      	adds	r2, r7, #3
   147c2:	7812      	ldrb	r2, [r2, #0]
   147c4:	701a      	strb	r2, [r3, #0]
   147c6:	e068      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   147c8:	1cfb      	adds	r3, r7, #3
   147ca:	781b      	ldrb	r3, [r3, #0]
   147cc:	2b00      	cmp	r3, #0
   147ce:	d104      	bne.n	147da <lsm6dso_gy_data_rate_set+0x19a>
   147d0:	2317      	movs	r3, #23
   147d2:	18fb      	adds	r3, r7, r3
   147d4:	2202      	movs	r2, #2
   147d6:	701a      	strb	r2, [r3, #0]
   147d8:	e05f      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   147da:	1cfb      	adds	r3, r7, #3
   147dc:	781b      	ldrb	r3, [r3, #0]
   147de:	2b01      	cmp	r3, #1
   147e0:	d104      	bne.n	147ec <lsm6dso_gy_data_rate_set+0x1ac>
   147e2:	2317      	movs	r3, #23
   147e4:	18fb      	adds	r3, r7, r3
   147e6:	2202      	movs	r2, #2
   147e8:	701a      	strb	r2, [r3, #0]
   147ea:	e056      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   147ec:	2317      	movs	r3, #23
   147ee:	18fb      	adds	r3, r7, r3
   147f0:	1cfa      	adds	r2, r7, #3
   147f2:	7812      	ldrb	r2, [r2, #0]
   147f4:	701a      	strb	r2, [r3, #0]
   147f6:	e050      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   147f8:	1cfb      	adds	r3, r7, #3
   147fa:	781b      	ldrb	r3, [r3, #0]
   147fc:	2b00      	cmp	r3, #0
   147fe:	d104      	bne.n	1480a <lsm6dso_gy_data_rate_set+0x1ca>
   14800:	2317      	movs	r3, #23
   14802:	18fb      	adds	r3, r7, r3
   14804:	2203      	movs	r2, #3
   14806:	701a      	strb	r2, [r3, #0]
   14808:	e047      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   1480a:	1cfb      	adds	r3, r7, #3
   1480c:	781b      	ldrb	r3, [r3, #0]
   1480e:	2b01      	cmp	r3, #1
   14810:	d104      	bne.n	1481c <lsm6dso_gy_data_rate_set+0x1dc>
   14812:	2317      	movs	r3, #23
   14814:	18fb      	adds	r3, r7, r3
   14816:	2203      	movs	r2, #3
   14818:	701a      	strb	r2, [r3, #0]
   1481a:	e03e      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   1481c:	1cfb      	adds	r3, r7, #3
   1481e:	781b      	ldrb	r3, [r3, #0]
   14820:	2b02      	cmp	r3, #2
   14822:	d104      	bne.n	1482e <lsm6dso_gy_data_rate_set+0x1ee>
   14824:	2317      	movs	r3, #23
   14826:	18fb      	adds	r3, r7, r3
   14828:	2203      	movs	r2, #3
   1482a:	701a      	strb	r2, [r3, #0]
   1482c:	e035      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   1482e:	2317      	movs	r3, #23
   14830:	18fb      	adds	r3, r7, r3
   14832:	1cfa      	adds	r2, r7, #3
   14834:	7812      	ldrb	r2, [r2, #0]
   14836:	701a      	strb	r2, [r3, #0]
   14838:	e02f      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   1483a:	1cfb      	adds	r3, r7, #3
   1483c:	781b      	ldrb	r3, [r3, #0]
   1483e:	2b00      	cmp	r3, #0
   14840:	d104      	bne.n	1484c <lsm6dso_gy_data_rate_set+0x20c>
   14842:	2317      	movs	r3, #23
   14844:	18fb      	adds	r3, r7, r3
   14846:	2204      	movs	r2, #4
   14848:	701a      	strb	r2, [r3, #0]
   1484a:	e026      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   1484c:	1cfb      	adds	r3, r7, #3
   1484e:	781b      	ldrb	r3, [r3, #0]
   14850:	2b01      	cmp	r3, #1
   14852:	d104      	bne.n	1485e <lsm6dso_gy_data_rate_set+0x21e>
   14854:	2317      	movs	r3, #23
   14856:	18fb      	adds	r3, r7, r3
   14858:	2204      	movs	r2, #4
   1485a:	701a      	strb	r2, [r3, #0]
   1485c:	e01d      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   1485e:	1cfb      	adds	r3, r7, #3
   14860:	781b      	ldrb	r3, [r3, #0]
   14862:	2b02      	cmp	r3, #2
   14864:	d104      	bne.n	14870 <lsm6dso_gy_data_rate_set+0x230>
   14866:	2317      	movs	r3, #23
   14868:	18fb      	adds	r3, r7, r3
   1486a:	2204      	movs	r2, #4
   1486c:	701a      	strb	r2, [r3, #0]
   1486e:	e014      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   14870:	1cfb      	adds	r3, r7, #3
   14872:	781b      	ldrb	r3, [r3, #0]
   14874:	2b03      	cmp	r3, #3
   14876:	d104      	bne.n	14882 <lsm6dso_gy_data_rate_set+0x242>
   14878:	2317      	movs	r3, #23
   1487a:	18fb      	adds	r3, r7, r3
   1487c:	2204      	movs	r2, #4
   1487e:	701a      	strb	r2, [r3, #0]
   14880:	e00b      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   14882:	2317      	movs	r3, #23
   14884:	18fb      	adds	r3, r7, r3
   14886:	1cfa      	adds	r2, r7, #3
   14888:	7812      	ldrb	r2, [r2, #0]
   1488a:	701a      	strb	r2, [r3, #0]
   1488c:	e005      	b.n	1489a <lsm6dso_gy_data_rate_set+0x25a>
   1488e:	2317      	movs	r3, #23
   14890:	18fb      	adds	r3, r7, r3
   14892:	1cfa      	adds	r2, r7, #3
   14894:	7812      	ldrb	r2, [r2, #0]
   14896:	701a      	strb	r2, [r3, #0]
   14898:	46c0      	nop			; (mov r8, r8)
   1489a:	693b      	ldr	r3, [r7, #16]
   1489c:	2b00      	cmp	r3, #0
   1489e:	d108      	bne.n	148b2 <lsm6dso_gy_data_rate_set+0x272>
   148a0:	2308      	movs	r3, #8
   148a2:	18fa      	adds	r2, r7, r3
   148a4:	6878      	ldr	r0, [r7, #4]
   148a6:	2301      	movs	r3, #1
   148a8:	2111      	movs	r1, #17
   148aa:	4c14      	ldr	r4, [pc, #80]	; (148fc <lsm6dso_gy_data_rate_set+0x2bc>)
   148ac:	47a0      	blx	r4
   148ae:	0003      	movs	r3, r0
   148b0:	613b      	str	r3, [r7, #16]
   148b2:	693b      	ldr	r3, [r7, #16]
   148b4:	2b00      	cmp	r3, #0
   148b6:	d118      	bne.n	148ea <lsm6dso_gy_data_rate_set+0x2aa>
   148b8:	2317      	movs	r3, #23
   148ba:	18fb      	adds	r3, r7, r3
   148bc:	781b      	ldrb	r3, [r3, #0]
   148be:	220f      	movs	r2, #15
   148c0:	4013      	ands	r3, r2
   148c2:	b2da      	uxtb	r2, r3
   148c4:	2308      	movs	r3, #8
   148c6:	18fb      	adds	r3, r7, r3
   148c8:	0110      	lsls	r0, r2, #4
   148ca:	781a      	ldrb	r2, [r3, #0]
   148cc:	210f      	movs	r1, #15
   148ce:	400a      	ands	r2, r1
   148d0:	1c11      	adds	r1, r2, #0
   148d2:	1c02      	adds	r2, r0, #0
   148d4:	430a      	orrs	r2, r1
   148d6:	701a      	strb	r2, [r3, #0]
   148d8:	2308      	movs	r3, #8
   148da:	18fa      	adds	r2, r7, r3
   148dc:	6878      	ldr	r0, [r7, #4]
   148de:	2301      	movs	r3, #1
   148e0:	2111      	movs	r1, #17
   148e2:	4c07      	ldr	r4, [pc, #28]	; (14900 <lsm6dso_gy_data_rate_set+0x2c0>)
   148e4:	47a0      	blx	r4
   148e6:	0003      	movs	r3, r0
   148e8:	613b      	str	r3, [r7, #16]
   148ea:	693b      	ldr	r3, [r7, #16]
   148ec:	0018      	movs	r0, r3
   148ee:	46bd      	mov	sp, r7
   148f0:	b007      	add	sp, #28
   148f2:	bd90      	pop	{r4, r7, pc}
   148f4:	00014ded 	.word	0x00014ded
   148f8:	00014e41 	.word	0x00014e41
   148fc:	000141e1 	.word	0x000141e1
   14900:	00014227 	.word	0x00014227

00014904 <lsm6dso_block_data_update_set>:
   14904:	b590      	push	{r4, r7, lr}
   14906:	b085      	sub	sp, #20
   14908:	af00      	add	r7, sp, #0
   1490a:	6078      	str	r0, [r7, #4]
   1490c:	000a      	movs	r2, r1
   1490e:	1cfb      	adds	r3, r7, #3
   14910:	701a      	strb	r2, [r3, #0]
   14912:	2308      	movs	r3, #8
   14914:	18fa      	adds	r2, r7, r3
   14916:	6878      	ldr	r0, [r7, #4]
   14918:	2301      	movs	r3, #1
   1491a:	2112      	movs	r1, #18
   1491c:	4c12      	ldr	r4, [pc, #72]	; (14968 <lsm6dso_block_data_update_set+0x64>)
   1491e:	47a0      	blx	r4
   14920:	0003      	movs	r3, r0
   14922:	60fb      	str	r3, [r7, #12]
   14924:	68fb      	ldr	r3, [r7, #12]
   14926:	2b00      	cmp	r3, #0
   14928:	d119      	bne.n	1495e <lsm6dso_block_data_update_set+0x5a>
   1492a:	1cfb      	adds	r3, r7, #3
   1492c:	781b      	ldrb	r3, [r3, #0]
   1492e:	2201      	movs	r2, #1
   14930:	4013      	ands	r3, r2
   14932:	b2da      	uxtb	r2, r3
   14934:	2308      	movs	r3, #8
   14936:	18fb      	adds	r3, r7, r3
   14938:	2101      	movs	r1, #1
   1493a:	400a      	ands	r2, r1
   1493c:	0190      	lsls	r0, r2, #6
   1493e:	781a      	ldrb	r2, [r3, #0]
   14940:	2140      	movs	r1, #64	; 0x40
   14942:	438a      	bics	r2, r1
   14944:	1c11      	adds	r1, r2, #0
   14946:	1c02      	adds	r2, r0, #0
   14948:	430a      	orrs	r2, r1
   1494a:	701a      	strb	r2, [r3, #0]
   1494c:	2308      	movs	r3, #8
   1494e:	18fa      	adds	r2, r7, r3
   14950:	6878      	ldr	r0, [r7, #4]
   14952:	2301      	movs	r3, #1
   14954:	2112      	movs	r1, #18
   14956:	4c05      	ldr	r4, [pc, #20]	; (1496c <lsm6dso_block_data_update_set+0x68>)
   14958:	47a0      	blx	r4
   1495a:	0003      	movs	r3, r0
   1495c:	60fb      	str	r3, [r7, #12]
   1495e:	68fb      	ldr	r3, [r7, #12]
   14960:	0018      	movs	r0, r3
   14962:	46bd      	mov	sp, r7
   14964:	b005      	add	sp, #20
   14966:	bd90      	pop	{r4, r7, pc}
   14968:	000141e1 	.word	0x000141e1
   1496c:	00014227 	.word	0x00014227

00014970 <lsm6dso_xl_offset_weight_set>:
   14970:	b590      	push	{r4, r7, lr}
   14972:	b085      	sub	sp, #20
   14974:	af00      	add	r7, sp, #0
   14976:	6078      	str	r0, [r7, #4]
   14978:	000a      	movs	r2, r1
   1497a:	1cfb      	adds	r3, r7, #3
   1497c:	701a      	strb	r2, [r3, #0]
   1497e:	2308      	movs	r3, #8
   14980:	18fa      	adds	r2, r7, r3
   14982:	6878      	ldr	r0, [r7, #4]
   14984:	2301      	movs	r3, #1
   14986:	2115      	movs	r1, #21
   14988:	4c12      	ldr	r4, [pc, #72]	; (149d4 <lsm6dso_xl_offset_weight_set+0x64>)
   1498a:	47a0      	blx	r4
   1498c:	0003      	movs	r3, r0
   1498e:	60fb      	str	r3, [r7, #12]
   14990:	68fb      	ldr	r3, [r7, #12]
   14992:	2b00      	cmp	r3, #0
   14994:	d119      	bne.n	149ca <lsm6dso_xl_offset_weight_set+0x5a>
   14996:	1cfb      	adds	r3, r7, #3
   14998:	781b      	ldrb	r3, [r3, #0]
   1499a:	2201      	movs	r2, #1
   1499c:	4013      	ands	r3, r2
   1499e:	b2da      	uxtb	r2, r3
   149a0:	2308      	movs	r3, #8
   149a2:	18fb      	adds	r3, r7, r3
   149a4:	2101      	movs	r1, #1
   149a6:	400a      	ands	r2, r1
   149a8:	00d0      	lsls	r0, r2, #3
   149aa:	781a      	ldrb	r2, [r3, #0]
   149ac:	2108      	movs	r1, #8
   149ae:	438a      	bics	r2, r1
   149b0:	1c11      	adds	r1, r2, #0
   149b2:	1c02      	adds	r2, r0, #0
   149b4:	430a      	orrs	r2, r1
   149b6:	701a      	strb	r2, [r3, #0]
   149b8:	2308      	movs	r3, #8
   149ba:	18fa      	adds	r2, r7, r3
   149bc:	6878      	ldr	r0, [r7, #4]
   149be:	2301      	movs	r3, #1
   149c0:	2115      	movs	r1, #21
   149c2:	4c05      	ldr	r4, [pc, #20]	; (149d8 <lsm6dso_xl_offset_weight_set+0x68>)
   149c4:	47a0      	blx	r4
   149c6:	0003      	movs	r3, r0
   149c8:	60fb      	str	r3, [r7, #12]
   149ca:	68fb      	ldr	r3, [r7, #12]
   149cc:	0018      	movs	r0, r3
   149ce:	46bd      	mov	sp, r7
   149d0:	b005      	add	sp, #20
   149d2:	bd90      	pop	{r4, r7, pc}
   149d4:	000141e1 	.word	0x000141e1
   149d8:	00014227 	.word	0x00014227

000149dc <lsm6dso_xl_flag_data_ready_get>:
   149dc:	b590      	push	{r4, r7, lr}
   149de:	b085      	sub	sp, #20
   149e0:	af00      	add	r7, sp, #0
   149e2:	6078      	str	r0, [r7, #4]
   149e4:	6039      	str	r1, [r7, #0]
   149e6:	2308      	movs	r3, #8
   149e8:	18fa      	adds	r2, r7, r3
   149ea:	6878      	ldr	r0, [r7, #4]
   149ec:	2301      	movs	r3, #1
   149ee:	211e      	movs	r1, #30
   149f0:	4c08      	ldr	r4, [pc, #32]	; (14a14 <lsm6dso_xl_flag_data_ready_get+0x38>)
   149f2:	47a0      	blx	r4
   149f4:	0003      	movs	r3, r0
   149f6:	60fb      	str	r3, [r7, #12]
   149f8:	2308      	movs	r3, #8
   149fa:	18fb      	adds	r3, r7, r3
   149fc:	781b      	ldrb	r3, [r3, #0]
   149fe:	07db      	lsls	r3, r3, #31
   14a00:	0fdb      	lsrs	r3, r3, #31
   14a02:	b2db      	uxtb	r3, r3
   14a04:	001a      	movs	r2, r3
   14a06:	683b      	ldr	r3, [r7, #0]
   14a08:	701a      	strb	r2, [r3, #0]
   14a0a:	68fb      	ldr	r3, [r7, #12]
   14a0c:	0018      	movs	r0, r3
   14a0e:	46bd      	mov	sp, r7
   14a10:	b005      	add	sp, #20
   14a12:	bd90      	pop	{r4, r7, pc}
   14a14:	000141e1 	.word	0x000141e1

00014a18 <lsm6dso_acceleration_raw_get>:
   14a18:	b590      	push	{r4, r7, lr}
   14a1a:	b087      	sub	sp, #28
   14a1c:	af00      	add	r7, sp, #0
   14a1e:	6078      	str	r0, [r7, #4]
   14a20:	6039      	str	r1, [r7, #0]
   14a22:	230c      	movs	r3, #12
   14a24:	18fa      	adds	r2, r7, r3
   14a26:	6878      	ldr	r0, [r7, #4]
   14a28:	2306      	movs	r3, #6
   14a2a:	2128      	movs	r1, #40	; 0x28
   14a2c:	4c26      	ldr	r4, [pc, #152]	; (14ac8 <lsm6dso_acceleration_raw_get+0xb0>)
   14a2e:	47a0      	blx	r4
   14a30:	0003      	movs	r3, r0
   14a32:	617b      	str	r3, [r7, #20]
   14a34:	230c      	movs	r3, #12
   14a36:	18fb      	adds	r3, r7, r3
   14a38:	785b      	ldrb	r3, [r3, #1]
   14a3a:	b21a      	sxth	r2, r3
   14a3c:	683b      	ldr	r3, [r7, #0]
   14a3e:	801a      	strh	r2, [r3, #0]
   14a40:	683b      	ldr	r3, [r7, #0]
   14a42:	2200      	movs	r2, #0
   14a44:	5e9b      	ldrsh	r3, [r3, r2]
   14a46:	b29b      	uxth	r3, r3
   14a48:	021b      	lsls	r3, r3, #8
   14a4a:	b29a      	uxth	r2, r3
   14a4c:	230c      	movs	r3, #12
   14a4e:	18fb      	adds	r3, r7, r3
   14a50:	781b      	ldrb	r3, [r3, #0]
   14a52:	b29b      	uxth	r3, r3
   14a54:	18d3      	adds	r3, r2, r3
   14a56:	b29b      	uxth	r3, r3
   14a58:	b21a      	sxth	r2, r3
   14a5a:	683b      	ldr	r3, [r7, #0]
   14a5c:	801a      	strh	r2, [r3, #0]
   14a5e:	683b      	ldr	r3, [r7, #0]
   14a60:	3302      	adds	r3, #2
   14a62:	220c      	movs	r2, #12
   14a64:	18ba      	adds	r2, r7, r2
   14a66:	78d2      	ldrb	r2, [r2, #3]
   14a68:	b212      	sxth	r2, r2
   14a6a:	801a      	strh	r2, [r3, #0]
   14a6c:	683b      	ldr	r3, [r7, #0]
   14a6e:	3302      	adds	r3, #2
   14a70:	683a      	ldr	r2, [r7, #0]
   14a72:	3202      	adds	r2, #2
   14a74:	2100      	movs	r1, #0
   14a76:	5e52      	ldrsh	r2, [r2, r1]
   14a78:	b292      	uxth	r2, r2
   14a7a:	0212      	lsls	r2, r2, #8
   14a7c:	b291      	uxth	r1, r2
   14a7e:	220c      	movs	r2, #12
   14a80:	18ba      	adds	r2, r7, r2
   14a82:	7892      	ldrb	r2, [r2, #2]
   14a84:	b292      	uxth	r2, r2
   14a86:	188a      	adds	r2, r1, r2
   14a88:	b292      	uxth	r2, r2
   14a8a:	b212      	sxth	r2, r2
   14a8c:	801a      	strh	r2, [r3, #0]
   14a8e:	683b      	ldr	r3, [r7, #0]
   14a90:	3304      	adds	r3, #4
   14a92:	220c      	movs	r2, #12
   14a94:	18ba      	adds	r2, r7, r2
   14a96:	7952      	ldrb	r2, [r2, #5]
   14a98:	b212      	sxth	r2, r2
   14a9a:	801a      	strh	r2, [r3, #0]
   14a9c:	683b      	ldr	r3, [r7, #0]
   14a9e:	3304      	adds	r3, #4
   14aa0:	683a      	ldr	r2, [r7, #0]
   14aa2:	3204      	adds	r2, #4
   14aa4:	2100      	movs	r1, #0
   14aa6:	5e52      	ldrsh	r2, [r2, r1]
   14aa8:	b292      	uxth	r2, r2
   14aaa:	0212      	lsls	r2, r2, #8
   14aac:	b291      	uxth	r1, r2
   14aae:	220c      	movs	r2, #12
   14ab0:	18ba      	adds	r2, r7, r2
   14ab2:	7912      	ldrb	r2, [r2, #4]
   14ab4:	b292      	uxth	r2, r2
   14ab6:	188a      	adds	r2, r1, r2
   14ab8:	b292      	uxth	r2, r2
   14aba:	b212      	sxth	r2, r2
   14abc:	801a      	strh	r2, [r3, #0]
   14abe:	697b      	ldr	r3, [r7, #20]
   14ac0:	0018      	movs	r0, r3
   14ac2:	46bd      	mov	sp, r7
   14ac4:	b007      	add	sp, #28
   14ac6:	bd90      	pop	{r4, r7, pc}
   14ac8:	000141e1 	.word	0x000141e1

00014acc <lsm6dso_mem_bank_set>:
   14acc:	b590      	push	{r4, r7, lr}
   14ace:	b085      	sub	sp, #20
   14ad0:	af00      	add	r7, sp, #0
   14ad2:	6078      	str	r0, [r7, #4]
   14ad4:	000a      	movs	r2, r1
   14ad6:	1cfb      	adds	r3, r7, #3
   14ad8:	701a      	strb	r2, [r3, #0]
   14ada:	2308      	movs	r3, #8
   14adc:	18fa      	adds	r2, r7, r3
   14ade:	6878      	ldr	r0, [r7, #4]
   14ae0:	2301      	movs	r3, #1
   14ae2:	2101      	movs	r1, #1
   14ae4:	4c11      	ldr	r4, [pc, #68]	; (14b2c <lsm6dso_mem_bank_set+0x60>)
   14ae6:	47a0      	blx	r4
   14ae8:	0003      	movs	r3, r0
   14aea:	60fb      	str	r3, [r7, #12]
   14aec:	68fb      	ldr	r3, [r7, #12]
   14aee:	2b00      	cmp	r3, #0
   14af0:	d117      	bne.n	14b22 <lsm6dso_mem_bank_set+0x56>
   14af2:	1cfb      	adds	r3, r7, #3
   14af4:	781b      	ldrb	r3, [r3, #0]
   14af6:	2203      	movs	r2, #3
   14af8:	4013      	ands	r3, r2
   14afa:	b2da      	uxtb	r2, r3
   14afc:	2308      	movs	r3, #8
   14afe:	18fb      	adds	r3, r7, r3
   14b00:	0190      	lsls	r0, r2, #6
   14b02:	781a      	ldrb	r2, [r3, #0]
   14b04:	213f      	movs	r1, #63	; 0x3f
   14b06:	400a      	ands	r2, r1
   14b08:	1c11      	adds	r1, r2, #0
   14b0a:	1c02      	adds	r2, r0, #0
   14b0c:	430a      	orrs	r2, r1
   14b0e:	701a      	strb	r2, [r3, #0]
   14b10:	2308      	movs	r3, #8
   14b12:	18fa      	adds	r2, r7, r3
   14b14:	6878      	ldr	r0, [r7, #4]
   14b16:	2301      	movs	r3, #1
   14b18:	2101      	movs	r1, #1
   14b1a:	4c05      	ldr	r4, [pc, #20]	; (14b30 <lsm6dso_mem_bank_set+0x64>)
   14b1c:	47a0      	blx	r4
   14b1e:	0003      	movs	r3, r0
   14b20:	60fb      	str	r3, [r7, #12]
   14b22:	68fb      	ldr	r3, [r7, #12]
   14b24:	0018      	movs	r0, r3
   14b26:	46bd      	mov	sp, r7
   14b28:	b005      	add	sp, #20
   14b2a:	bd90      	pop	{r4, r7, pc}
   14b2c:	000141e1 	.word	0x000141e1
   14b30:	00014227 	.word	0x00014227

00014b34 <lsm6dso_device_id_get>:
   14b34:	b590      	push	{r4, r7, lr}
   14b36:	b085      	sub	sp, #20
   14b38:	af00      	add	r7, sp, #0
   14b3a:	6078      	str	r0, [r7, #4]
   14b3c:	6039      	str	r1, [r7, #0]
   14b3e:	683a      	ldr	r2, [r7, #0]
   14b40:	6878      	ldr	r0, [r7, #4]
   14b42:	2301      	movs	r3, #1
   14b44:	210f      	movs	r1, #15
   14b46:	4c04      	ldr	r4, [pc, #16]	; (14b58 <lsm6dso_device_id_get+0x24>)
   14b48:	47a0      	blx	r4
   14b4a:	0003      	movs	r3, r0
   14b4c:	60fb      	str	r3, [r7, #12]
   14b4e:	68fb      	ldr	r3, [r7, #12]
   14b50:	0018      	movs	r0, r3
   14b52:	46bd      	mov	sp, r7
   14b54:	b005      	add	sp, #20
   14b56:	bd90      	pop	{r4, r7, pc}
   14b58:	000141e1 	.word	0x000141e1

00014b5c <lsm6dso_reset_set>:
   14b5c:	b590      	push	{r4, r7, lr}
   14b5e:	b085      	sub	sp, #20
   14b60:	af00      	add	r7, sp, #0
   14b62:	6078      	str	r0, [r7, #4]
   14b64:	000a      	movs	r2, r1
   14b66:	1cfb      	adds	r3, r7, #3
   14b68:	701a      	strb	r2, [r3, #0]
   14b6a:	2308      	movs	r3, #8
   14b6c:	18fa      	adds	r2, r7, r3
   14b6e:	6878      	ldr	r0, [r7, #4]
   14b70:	2301      	movs	r3, #1
   14b72:	2112      	movs	r1, #18
   14b74:	4c12      	ldr	r4, [pc, #72]	; (14bc0 <lsm6dso_reset_set+0x64>)
   14b76:	47a0      	blx	r4
   14b78:	0003      	movs	r3, r0
   14b7a:	60fb      	str	r3, [r7, #12]
   14b7c:	68fb      	ldr	r3, [r7, #12]
   14b7e:	2b00      	cmp	r3, #0
   14b80:	d119      	bne.n	14bb6 <lsm6dso_reset_set+0x5a>
   14b82:	1cfb      	adds	r3, r7, #3
   14b84:	781b      	ldrb	r3, [r3, #0]
   14b86:	2201      	movs	r2, #1
   14b88:	4013      	ands	r3, r2
   14b8a:	b2da      	uxtb	r2, r3
   14b8c:	2308      	movs	r3, #8
   14b8e:	18fb      	adds	r3, r7, r3
   14b90:	2101      	movs	r1, #1
   14b92:	400a      	ands	r2, r1
   14b94:	0010      	movs	r0, r2
   14b96:	781a      	ldrb	r2, [r3, #0]
   14b98:	2101      	movs	r1, #1
   14b9a:	438a      	bics	r2, r1
   14b9c:	1c11      	adds	r1, r2, #0
   14b9e:	1c02      	adds	r2, r0, #0
   14ba0:	430a      	orrs	r2, r1
   14ba2:	701a      	strb	r2, [r3, #0]
   14ba4:	2308      	movs	r3, #8
   14ba6:	18fa      	adds	r2, r7, r3
   14ba8:	6878      	ldr	r0, [r7, #4]
   14baa:	2301      	movs	r3, #1
   14bac:	2112      	movs	r1, #18
   14bae:	4c05      	ldr	r4, [pc, #20]	; (14bc4 <lsm6dso_reset_set+0x68>)
   14bb0:	47a0      	blx	r4
   14bb2:	0003      	movs	r3, r0
   14bb4:	60fb      	str	r3, [r7, #12]
   14bb6:	68fb      	ldr	r3, [r7, #12]
   14bb8:	0018      	movs	r0, r3
   14bba:	46bd      	mov	sp, r7
   14bbc:	b005      	add	sp, #20
   14bbe:	bd90      	pop	{r4, r7, pc}
   14bc0:	000141e1 	.word	0x000141e1
   14bc4:	00014227 	.word	0x00014227

00014bc8 <lsm6dso_reset_get>:
   14bc8:	b590      	push	{r4, r7, lr}
   14bca:	b085      	sub	sp, #20
   14bcc:	af00      	add	r7, sp, #0
   14bce:	6078      	str	r0, [r7, #4]
   14bd0:	6039      	str	r1, [r7, #0]
   14bd2:	2308      	movs	r3, #8
   14bd4:	18fa      	adds	r2, r7, r3
   14bd6:	6878      	ldr	r0, [r7, #4]
   14bd8:	2301      	movs	r3, #1
   14bda:	2112      	movs	r1, #18
   14bdc:	4c08      	ldr	r4, [pc, #32]	; (14c00 <lsm6dso_reset_get+0x38>)
   14bde:	47a0      	blx	r4
   14be0:	0003      	movs	r3, r0
   14be2:	60fb      	str	r3, [r7, #12]
   14be4:	2308      	movs	r3, #8
   14be6:	18fb      	adds	r3, r7, r3
   14be8:	781b      	ldrb	r3, [r3, #0]
   14bea:	07db      	lsls	r3, r3, #31
   14bec:	0fdb      	lsrs	r3, r3, #31
   14bee:	b2db      	uxtb	r3, r3
   14bf0:	001a      	movs	r2, r3
   14bf2:	683b      	ldr	r3, [r7, #0]
   14bf4:	701a      	strb	r2, [r3, #0]
   14bf6:	68fb      	ldr	r3, [r7, #12]
   14bf8:	0018      	movs	r0, r3
   14bfa:	46bd      	mov	sp, r7
   14bfc:	b005      	add	sp, #20
   14bfe:	bd90      	pop	{r4, r7, pc}
   14c00:	000141e1 	.word	0x000141e1

00014c04 <lsm6dso_xl_filter_lp2_set>:
   14c04:	b590      	push	{r4, r7, lr}
   14c06:	b085      	sub	sp, #20
   14c08:	af00      	add	r7, sp, #0
   14c0a:	6078      	str	r0, [r7, #4]
   14c0c:	000a      	movs	r2, r1
   14c0e:	1cfb      	adds	r3, r7, #3
   14c10:	701a      	strb	r2, [r3, #0]
   14c12:	2308      	movs	r3, #8
   14c14:	18fa      	adds	r2, r7, r3
   14c16:	6878      	ldr	r0, [r7, #4]
   14c18:	2301      	movs	r3, #1
   14c1a:	2110      	movs	r1, #16
   14c1c:	4c12      	ldr	r4, [pc, #72]	; (14c68 <lsm6dso_xl_filter_lp2_set+0x64>)
   14c1e:	47a0      	blx	r4
   14c20:	0003      	movs	r3, r0
   14c22:	60fb      	str	r3, [r7, #12]
   14c24:	68fb      	ldr	r3, [r7, #12]
   14c26:	2b00      	cmp	r3, #0
   14c28:	d119      	bne.n	14c5e <lsm6dso_xl_filter_lp2_set+0x5a>
   14c2a:	1cfb      	adds	r3, r7, #3
   14c2c:	781b      	ldrb	r3, [r3, #0]
   14c2e:	2201      	movs	r2, #1
   14c30:	4013      	ands	r3, r2
   14c32:	b2da      	uxtb	r2, r3
   14c34:	2308      	movs	r3, #8
   14c36:	18fb      	adds	r3, r7, r3
   14c38:	2101      	movs	r1, #1
   14c3a:	400a      	ands	r2, r1
   14c3c:	1890      	adds	r0, r2, r2
   14c3e:	781a      	ldrb	r2, [r3, #0]
   14c40:	2102      	movs	r1, #2
   14c42:	438a      	bics	r2, r1
   14c44:	1c11      	adds	r1, r2, #0
   14c46:	1c02      	adds	r2, r0, #0
   14c48:	430a      	orrs	r2, r1
   14c4a:	701a      	strb	r2, [r3, #0]
   14c4c:	2308      	movs	r3, #8
   14c4e:	18fa      	adds	r2, r7, r3
   14c50:	6878      	ldr	r0, [r7, #4]
   14c52:	2301      	movs	r3, #1
   14c54:	2110      	movs	r1, #16
   14c56:	4c05      	ldr	r4, [pc, #20]	; (14c6c <lsm6dso_xl_filter_lp2_set+0x68>)
   14c58:	47a0      	blx	r4
   14c5a:	0003      	movs	r3, r0
   14c5c:	60fb      	str	r3, [r7, #12]
   14c5e:	68fb      	ldr	r3, [r7, #12]
   14c60:	0018      	movs	r0, r3
   14c62:	46bd      	mov	sp, r7
   14c64:	b005      	add	sp, #20
   14c66:	bd90      	pop	{r4, r7, pc}
   14c68:	000141e1 	.word	0x000141e1
   14c6c:	00014227 	.word	0x00014227

00014c70 <lsm6dso_xl_hp_path_on_out_set>:
   14c70:	b590      	push	{r4, r7, lr}
   14c72:	b085      	sub	sp, #20
   14c74:	af00      	add	r7, sp, #0
   14c76:	6078      	str	r0, [r7, #4]
   14c78:	000a      	movs	r2, r1
   14c7a:	1cfb      	adds	r3, r7, #3
   14c7c:	701a      	strb	r2, [r3, #0]
   14c7e:	2308      	movs	r3, #8
   14c80:	18fa      	adds	r2, r7, r3
   14c82:	6878      	ldr	r0, [r7, #4]
   14c84:	2301      	movs	r3, #1
   14c86:	2117      	movs	r1, #23
   14c88:	4c25      	ldr	r4, [pc, #148]	; (14d20 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   14c8a:	47a0      	blx	r4
   14c8c:	0003      	movs	r3, r0
   14c8e:	60fb      	str	r3, [r7, #12]
   14c90:	68fb      	ldr	r3, [r7, #12]
   14c92:	2b00      	cmp	r3, #0
   14c94:	d13f      	bne.n	14d16 <lsm6dso_xl_hp_path_on_out_set+0xa6>
   14c96:	1cfb      	adds	r3, r7, #3
   14c98:	781b      	ldrb	r3, [r3, #0]
   14c9a:	091b      	lsrs	r3, r3, #4
   14c9c:	b2db      	uxtb	r3, r3
   14c9e:	1c1a      	adds	r2, r3, #0
   14ca0:	2301      	movs	r3, #1
   14ca2:	4013      	ands	r3, r2
   14ca4:	b2da      	uxtb	r2, r3
   14ca6:	2308      	movs	r3, #8
   14ca8:	18fb      	adds	r3, r7, r3
   14caa:	2101      	movs	r1, #1
   14cac:	400a      	ands	r2, r1
   14cae:	0090      	lsls	r0, r2, #2
   14cb0:	781a      	ldrb	r2, [r3, #0]
   14cb2:	2104      	movs	r1, #4
   14cb4:	438a      	bics	r2, r1
   14cb6:	1c11      	adds	r1, r2, #0
   14cb8:	1c02      	adds	r2, r0, #0
   14cba:	430a      	orrs	r2, r1
   14cbc:	701a      	strb	r2, [r3, #0]
   14cbe:	1cfb      	adds	r3, r7, #3
   14cc0:	781b      	ldrb	r3, [r3, #0]
   14cc2:	095b      	lsrs	r3, r3, #5
   14cc4:	b2db      	uxtb	r3, r3
   14cc6:	1c1a      	adds	r2, r3, #0
   14cc8:	2301      	movs	r3, #1
   14cca:	4013      	ands	r3, r2
   14ccc:	b2da      	uxtb	r2, r3
   14cce:	2308      	movs	r3, #8
   14cd0:	18fb      	adds	r3, r7, r3
   14cd2:	2101      	movs	r1, #1
   14cd4:	400a      	ands	r2, r1
   14cd6:	0110      	lsls	r0, r2, #4
   14cd8:	781a      	ldrb	r2, [r3, #0]
   14cda:	2110      	movs	r1, #16
   14cdc:	438a      	bics	r2, r1
   14cde:	1c11      	adds	r1, r2, #0
   14ce0:	1c02      	adds	r2, r0, #0
   14ce2:	430a      	orrs	r2, r1
   14ce4:	701a      	strb	r2, [r3, #0]
   14ce6:	1cfb      	adds	r3, r7, #3
   14ce8:	781b      	ldrb	r3, [r3, #0]
   14cea:	2207      	movs	r2, #7
   14cec:	4013      	ands	r3, r2
   14cee:	b2da      	uxtb	r2, r3
   14cf0:	2308      	movs	r3, #8
   14cf2:	18fb      	adds	r3, r7, r3
   14cf4:	0150      	lsls	r0, r2, #5
   14cf6:	781a      	ldrb	r2, [r3, #0]
   14cf8:	211f      	movs	r1, #31
   14cfa:	400a      	ands	r2, r1
   14cfc:	1c11      	adds	r1, r2, #0
   14cfe:	1c02      	adds	r2, r0, #0
   14d00:	430a      	orrs	r2, r1
   14d02:	701a      	strb	r2, [r3, #0]
   14d04:	2308      	movs	r3, #8
   14d06:	18fa      	adds	r2, r7, r3
   14d08:	6878      	ldr	r0, [r7, #4]
   14d0a:	2301      	movs	r3, #1
   14d0c:	2117      	movs	r1, #23
   14d0e:	4c05      	ldr	r4, [pc, #20]	; (14d24 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   14d10:	47a0      	blx	r4
   14d12:	0003      	movs	r3, r0
   14d14:	60fb      	str	r3, [r7, #12]
   14d16:	68fb      	ldr	r3, [r7, #12]
   14d18:	0018      	movs	r0, r3
   14d1a:	46bd      	mov	sp, r7
   14d1c:	b005      	add	sp, #20
   14d1e:	bd90      	pop	{r4, r7, pc}
   14d20:	000141e1 	.word	0x000141e1
   14d24:	00014227 	.word	0x00014227

00014d28 <lsm6dso_i3c_disable_set>:
   14d28:	b590      	push	{r4, r7, lr}
   14d2a:	b087      	sub	sp, #28
   14d2c:	af00      	add	r7, sp, #0
   14d2e:	6078      	str	r0, [r7, #4]
   14d30:	000a      	movs	r2, r1
   14d32:	1cfb      	adds	r3, r7, #3
   14d34:	701a      	strb	r2, [r3, #0]
   14d36:	230c      	movs	r3, #12
   14d38:	18fa      	adds	r2, r7, r3
   14d3a:	6878      	ldr	r0, [r7, #4]
   14d3c:	2301      	movs	r3, #1
   14d3e:	2118      	movs	r1, #24
   14d40:	4c28      	ldr	r4, [pc, #160]	; (14de4 <lsm6dso_i3c_disable_set+0xbc>)
   14d42:	47a0      	blx	r4
   14d44:	0003      	movs	r3, r0
   14d46:	617b      	str	r3, [r7, #20]
   14d48:	697b      	ldr	r3, [r7, #20]
   14d4a:	2b00      	cmp	r3, #0
   14d4c:	d11c      	bne.n	14d88 <lsm6dso_i3c_disable_set+0x60>
   14d4e:	1cfb      	adds	r3, r7, #3
   14d50:	781b      	ldrb	r3, [r3, #0]
   14d52:	09db      	lsrs	r3, r3, #7
   14d54:	b2db      	uxtb	r3, r3
   14d56:	1c1a      	adds	r2, r3, #0
   14d58:	2301      	movs	r3, #1
   14d5a:	4013      	ands	r3, r2
   14d5c:	b2da      	uxtb	r2, r3
   14d5e:	230c      	movs	r3, #12
   14d60:	18fb      	adds	r3, r7, r3
   14d62:	2101      	movs	r1, #1
   14d64:	400a      	ands	r2, r1
   14d66:	1890      	adds	r0, r2, r2
   14d68:	781a      	ldrb	r2, [r3, #0]
   14d6a:	2102      	movs	r1, #2
   14d6c:	438a      	bics	r2, r1
   14d6e:	1c11      	adds	r1, r2, #0
   14d70:	1c02      	adds	r2, r0, #0
   14d72:	430a      	orrs	r2, r1
   14d74:	701a      	strb	r2, [r3, #0]
   14d76:	230c      	movs	r3, #12
   14d78:	18fa      	adds	r2, r7, r3
   14d7a:	6878      	ldr	r0, [r7, #4]
   14d7c:	2301      	movs	r3, #1
   14d7e:	2118      	movs	r1, #24
   14d80:	4c19      	ldr	r4, [pc, #100]	; (14de8 <lsm6dso_i3c_disable_set+0xc0>)
   14d82:	47a0      	blx	r4
   14d84:	0003      	movs	r3, r0
   14d86:	617b      	str	r3, [r7, #20]
   14d88:	697b      	ldr	r3, [r7, #20]
   14d8a:	2b00      	cmp	r3, #0
   14d8c:	d108      	bne.n	14da0 <lsm6dso_i3c_disable_set+0x78>
   14d8e:	2310      	movs	r3, #16
   14d90:	18fa      	adds	r2, r7, r3
   14d92:	6878      	ldr	r0, [r7, #4]
   14d94:	2301      	movs	r3, #1
   14d96:	2162      	movs	r1, #98	; 0x62
   14d98:	4c12      	ldr	r4, [pc, #72]	; (14de4 <lsm6dso_i3c_disable_set+0xbc>)
   14d9a:	47a0      	blx	r4
   14d9c:	0003      	movs	r3, r0
   14d9e:	617b      	str	r3, [r7, #20]
   14da0:	697b      	ldr	r3, [r7, #20]
   14da2:	2b00      	cmp	r3, #0
   14da4:	d119      	bne.n	14dda <lsm6dso_i3c_disable_set+0xb2>
   14da6:	1cfb      	adds	r3, r7, #3
   14da8:	781b      	ldrb	r3, [r3, #0]
   14daa:	2203      	movs	r2, #3
   14dac:	4013      	ands	r3, r2
   14dae:	b2da      	uxtb	r2, r3
   14db0:	2310      	movs	r3, #16
   14db2:	18fb      	adds	r3, r7, r3
   14db4:	2103      	movs	r1, #3
   14db6:	400a      	ands	r2, r1
   14db8:	00d0      	lsls	r0, r2, #3
   14dba:	781a      	ldrb	r2, [r3, #0]
   14dbc:	2118      	movs	r1, #24
   14dbe:	438a      	bics	r2, r1
   14dc0:	1c11      	adds	r1, r2, #0
   14dc2:	1c02      	adds	r2, r0, #0
   14dc4:	430a      	orrs	r2, r1
   14dc6:	701a      	strb	r2, [r3, #0]
   14dc8:	2310      	movs	r3, #16
   14dca:	18fa      	adds	r2, r7, r3
   14dcc:	6878      	ldr	r0, [r7, #4]
   14dce:	2301      	movs	r3, #1
   14dd0:	2162      	movs	r1, #98	; 0x62
   14dd2:	4c05      	ldr	r4, [pc, #20]	; (14de8 <lsm6dso_i3c_disable_set+0xc0>)
   14dd4:	47a0      	blx	r4
   14dd6:	0003      	movs	r3, r0
   14dd8:	617b      	str	r3, [r7, #20]
   14dda:	697b      	ldr	r3, [r7, #20]
   14ddc:	0018      	movs	r0, r3
   14dde:	46bd      	mov	sp, r7
   14de0:	b007      	add	sp, #28
   14de2:	bd90      	pop	{r4, r7, pc}
   14de4:	000141e1 	.word	0x000141e1
   14de8:	00014227 	.word	0x00014227

00014dec <lsm6dso_fsm_enable_get>:
   14dec:	b590      	push	{r4, r7, lr}
   14dee:	b085      	sub	sp, #20
   14df0:	af00      	add	r7, sp, #0
   14df2:	6078      	str	r0, [r7, #4]
   14df4:	6039      	str	r1, [r7, #0]
   14df6:	687b      	ldr	r3, [r7, #4]
   14df8:	2102      	movs	r1, #2
   14dfa:	0018      	movs	r0, r3
   14dfc:	4b0e      	ldr	r3, [pc, #56]	; (14e38 <lsm6dso_fsm_enable_get+0x4c>)
   14dfe:	4798      	blx	r3
   14e00:	0003      	movs	r3, r0
   14e02:	60fb      	str	r3, [r7, #12]
   14e04:	68fb      	ldr	r3, [r7, #12]
   14e06:	2b00      	cmp	r3, #0
   14e08:	d107      	bne.n	14e1a <lsm6dso_fsm_enable_get+0x2e>
   14e0a:	683a      	ldr	r2, [r7, #0]
   14e0c:	6878      	ldr	r0, [r7, #4]
   14e0e:	2302      	movs	r3, #2
   14e10:	2146      	movs	r1, #70	; 0x46
   14e12:	4c0a      	ldr	r4, [pc, #40]	; (14e3c <lsm6dso_fsm_enable_get+0x50>)
   14e14:	47a0      	blx	r4
   14e16:	0003      	movs	r3, r0
   14e18:	60fb      	str	r3, [r7, #12]
   14e1a:	68fb      	ldr	r3, [r7, #12]
   14e1c:	2b00      	cmp	r3, #0
   14e1e:	d106      	bne.n	14e2e <lsm6dso_fsm_enable_get+0x42>
   14e20:	687b      	ldr	r3, [r7, #4]
   14e22:	2100      	movs	r1, #0
   14e24:	0018      	movs	r0, r3
   14e26:	4b04      	ldr	r3, [pc, #16]	; (14e38 <lsm6dso_fsm_enable_get+0x4c>)
   14e28:	4798      	blx	r3
   14e2a:	0003      	movs	r3, r0
   14e2c:	60fb      	str	r3, [r7, #12]
   14e2e:	68fb      	ldr	r3, [r7, #12]
   14e30:	0018      	movs	r0, r3
   14e32:	46bd      	mov	sp, r7
   14e34:	b005      	add	sp, #20
   14e36:	bd90      	pop	{r4, r7, pc}
   14e38:	00014acd 	.word	0x00014acd
   14e3c:	000141e1 	.word	0x000141e1

00014e40 <lsm6dso_fsm_data_rate_get>:
   14e40:	b590      	push	{r4, r7, lr}
   14e42:	b085      	sub	sp, #20
   14e44:	af00      	add	r7, sp, #0
   14e46:	6078      	str	r0, [r7, #4]
   14e48:	6039      	str	r1, [r7, #0]
   14e4a:	687b      	ldr	r3, [r7, #4]
   14e4c:	2102      	movs	r1, #2
   14e4e:	0018      	movs	r0, r3
   14e50:	4b21      	ldr	r3, [pc, #132]	; (14ed8 <lsm6dso_fsm_data_rate_get+0x98>)
   14e52:	4798      	blx	r3
   14e54:	0003      	movs	r3, r0
   14e56:	60fb      	str	r3, [r7, #12]
   14e58:	68fb      	ldr	r3, [r7, #12]
   14e5a:	2b00      	cmp	r3, #0
   14e5c:	d108      	bne.n	14e70 <lsm6dso_fsm_data_rate_get+0x30>
   14e5e:	2308      	movs	r3, #8
   14e60:	18fa      	adds	r2, r7, r3
   14e62:	6878      	ldr	r0, [r7, #4]
   14e64:	2301      	movs	r3, #1
   14e66:	215f      	movs	r1, #95	; 0x5f
   14e68:	4c1c      	ldr	r4, [pc, #112]	; (14edc <lsm6dso_fsm_data_rate_get+0x9c>)
   14e6a:	47a0      	blx	r4
   14e6c:	0003      	movs	r3, r0
   14e6e:	60fb      	str	r3, [r7, #12]
   14e70:	68fb      	ldr	r3, [r7, #12]
   14e72:	2b00      	cmp	r3, #0
   14e74:	d12b      	bne.n	14ece <lsm6dso_fsm_data_rate_get+0x8e>
   14e76:	2308      	movs	r3, #8
   14e78:	18fb      	adds	r3, r7, r3
   14e7a:	781b      	ldrb	r3, [r3, #0]
   14e7c:	06db      	lsls	r3, r3, #27
   14e7e:	0f9b      	lsrs	r3, r3, #30
   14e80:	b2db      	uxtb	r3, r3
   14e82:	2b01      	cmp	r3, #1
   14e84:	d00c      	beq.n	14ea0 <lsm6dso_fsm_data_rate_get+0x60>
   14e86:	dc02      	bgt.n	14e8e <lsm6dso_fsm_data_rate_get+0x4e>
   14e88:	2b00      	cmp	r3, #0
   14e8a:	d005      	beq.n	14e98 <lsm6dso_fsm_data_rate_get+0x58>
   14e8c:	e014      	b.n	14eb8 <lsm6dso_fsm_data_rate_get+0x78>
   14e8e:	2b02      	cmp	r3, #2
   14e90:	d00a      	beq.n	14ea8 <lsm6dso_fsm_data_rate_get+0x68>
   14e92:	2b03      	cmp	r3, #3
   14e94:	d00c      	beq.n	14eb0 <lsm6dso_fsm_data_rate_get+0x70>
   14e96:	e00f      	b.n	14eb8 <lsm6dso_fsm_data_rate_get+0x78>
   14e98:	683b      	ldr	r3, [r7, #0]
   14e9a:	2200      	movs	r2, #0
   14e9c:	701a      	strb	r2, [r3, #0]
   14e9e:	e00f      	b.n	14ec0 <lsm6dso_fsm_data_rate_get+0x80>
   14ea0:	683b      	ldr	r3, [r7, #0]
   14ea2:	2201      	movs	r2, #1
   14ea4:	701a      	strb	r2, [r3, #0]
   14ea6:	e00b      	b.n	14ec0 <lsm6dso_fsm_data_rate_get+0x80>
   14ea8:	683b      	ldr	r3, [r7, #0]
   14eaa:	2202      	movs	r2, #2
   14eac:	701a      	strb	r2, [r3, #0]
   14eae:	e007      	b.n	14ec0 <lsm6dso_fsm_data_rate_get+0x80>
   14eb0:	683b      	ldr	r3, [r7, #0]
   14eb2:	2203      	movs	r2, #3
   14eb4:	701a      	strb	r2, [r3, #0]
   14eb6:	e003      	b.n	14ec0 <lsm6dso_fsm_data_rate_get+0x80>
   14eb8:	683b      	ldr	r3, [r7, #0]
   14eba:	2200      	movs	r2, #0
   14ebc:	701a      	strb	r2, [r3, #0]
   14ebe:	46c0      	nop			; (mov r8, r8)
   14ec0:	687b      	ldr	r3, [r7, #4]
   14ec2:	2100      	movs	r1, #0
   14ec4:	0018      	movs	r0, r3
   14ec6:	4b04      	ldr	r3, [pc, #16]	; (14ed8 <lsm6dso_fsm_data_rate_get+0x98>)
   14ec8:	4798      	blx	r3
   14eca:	0003      	movs	r3, r0
   14ecc:	60fb      	str	r3, [r7, #12]
   14ece:	68fb      	ldr	r3, [r7, #12]
   14ed0:	0018      	movs	r0, r3
   14ed2:	46bd      	mov	sp, r7
   14ed4:	b005      	add	sp, #20
   14ed6:	bd90      	pop	{r4, r7, pc}
   14ed8:	00014acd 	.word	0x00014acd
   14edc:	000141e1 	.word	0x000141e1

00014ee0 <platform_write>:
   14ee0:	b580      	push	{r7, lr}
   14ee2:	b086      	sub	sp, #24
   14ee4:	af00      	add	r7, sp, #0
   14ee6:	60f8      	str	r0, [r7, #12]
   14ee8:	0008      	movs	r0, r1
   14eea:	607a      	str	r2, [r7, #4]
   14eec:	0019      	movs	r1, r3
   14eee:	230b      	movs	r3, #11
   14ef0:	18fb      	adds	r3, r7, r3
   14ef2:	1c02      	adds	r2, r0, #0
   14ef4:	701a      	strb	r2, [r3, #0]
   14ef6:	2308      	movs	r3, #8
   14ef8:	18fb      	adds	r3, r7, r3
   14efa:	1c0a      	adds	r2, r1, #0
   14efc:	801a      	strh	r2, [r3, #0]
   14efe:	2308      	movs	r3, #8
   14f00:	18fb      	adds	r3, r7, r3
   14f02:	881b      	ldrh	r3, [r3, #0]
   14f04:	2b3f      	cmp	r3, #63	; 0x3f
   14f06:	d902      	bls.n	14f0e <platform_write+0x2e>
   14f08:	2301      	movs	r3, #1
   14f0a:	425b      	negs	r3, r3
   14f0c:	e030      	b.n	14f70 <platform_write+0x90>
   14f0e:	4b1a      	ldr	r3, [pc, #104]	; (14f78 <platform_write+0x98>)
   14f10:	220b      	movs	r2, #11
   14f12:	18ba      	adds	r2, r7, r2
   14f14:	7812      	ldrb	r2, [r2, #0]
   14f16:	701a      	strb	r2, [r3, #0]
   14f18:	2301      	movs	r3, #1
   14f1a:	617b      	str	r3, [r7, #20]
   14f1c:	e00c      	b.n	14f38 <platform_write+0x58>
   14f1e:	697b      	ldr	r3, [r7, #20]
   14f20:	3b01      	subs	r3, #1
   14f22:	687a      	ldr	r2, [r7, #4]
   14f24:	18d3      	adds	r3, r2, r3
   14f26:	7819      	ldrb	r1, [r3, #0]
   14f28:	4a13      	ldr	r2, [pc, #76]	; (14f78 <platform_write+0x98>)
   14f2a:	697b      	ldr	r3, [r7, #20]
   14f2c:	18d3      	adds	r3, r2, r3
   14f2e:	1c0a      	adds	r2, r1, #0
   14f30:	701a      	strb	r2, [r3, #0]
   14f32:	697b      	ldr	r3, [r7, #20]
   14f34:	3301      	adds	r3, #1
   14f36:	617b      	str	r3, [r7, #20]
   14f38:	2308      	movs	r3, #8
   14f3a:	18fb      	adds	r3, r7, r3
   14f3c:	881a      	ldrh	r2, [r3, #0]
   14f3e:	697b      	ldr	r3, [r7, #20]
   14f40:	429a      	cmp	r2, r3
   14f42:	daec      	bge.n	14f1e <platform_write+0x3e>
   14f44:	2308      	movs	r3, #8
   14f46:	18fb      	adds	r3, r7, r3
   14f48:	881b      	ldrh	r3, [r3, #0]
   14f4a:	3301      	adds	r3, #1
   14f4c:	b29a      	uxth	r2, r3
   14f4e:	4b0b      	ldr	r3, [pc, #44]	; (14f7c <platform_write+0x9c>)
   14f50:	81da      	strh	r2, [r3, #14]
   14f52:	4b0a      	ldr	r3, [pc, #40]	; (14f7c <platform_write+0x9c>)
   14f54:	4a08      	ldr	r2, [pc, #32]	; (14f78 <platform_write+0x98>)
   14f56:	605a      	str	r2, [r3, #4]
   14f58:	4b08      	ldr	r3, [pc, #32]	; (14f7c <platform_write+0x9c>)
   14f5a:	2200      	movs	r2, #0
   14f5c:	609a      	str	r2, [r3, #8]
   14f5e:	4b07      	ldr	r3, [pc, #28]	; (14f7c <platform_write+0x9c>)
   14f60:	2200      	movs	r2, #0
   14f62:	819a      	strh	r2, [r3, #12]
   14f64:	4b05      	ldr	r3, [pc, #20]	; (14f7c <platform_write+0x9c>)
   14f66:	21c8      	movs	r1, #200	; 0xc8
   14f68:	0018      	movs	r0, r3
   14f6a:	4b05      	ldr	r3, [pc, #20]	; (14f80 <platform_write+0xa0>)
   14f6c:	4798      	blx	r3
   14f6e:	0003      	movs	r3, r0
   14f70:	0018      	movs	r0, r3
   14f72:	46bd      	mov	sp, r7
   14f74:	b006      	add	sp, #24
   14f76:	bd80      	pop	{r7, pc}
   14f78:	200043cc 	.word	0x200043cc
   14f7c:	20000020 	.word	0x20000020
   14f80:	00013f19 	.word	0x00013f19

00014f84 <platform_read>:
   14f84:	b580      	push	{r7, lr}
   14f86:	b084      	sub	sp, #16
   14f88:	af00      	add	r7, sp, #0
   14f8a:	60f8      	str	r0, [r7, #12]
   14f8c:	0008      	movs	r0, r1
   14f8e:	607a      	str	r2, [r7, #4]
   14f90:	0019      	movs	r1, r3
   14f92:	230b      	movs	r3, #11
   14f94:	18fb      	adds	r3, r7, r3
   14f96:	1c02      	adds	r2, r0, #0
   14f98:	701a      	strb	r2, [r3, #0]
   14f9a:	2308      	movs	r3, #8
   14f9c:	18fb      	adds	r3, r7, r3
   14f9e:	1c0a      	adds	r2, r1, #0
   14fa0:	801a      	strh	r2, [r3, #0]
   14fa2:	4b0d      	ldr	r3, [pc, #52]	; (14fd8 <platform_read+0x54>)
   14fa4:	2208      	movs	r2, #8
   14fa6:	18ba      	adds	r2, r7, r2
   14fa8:	8812      	ldrh	r2, [r2, #0]
   14faa:	819a      	strh	r2, [r3, #12]
   14fac:	4b0a      	ldr	r3, [pc, #40]	; (14fd8 <platform_read+0x54>)
   14fae:	687a      	ldr	r2, [r7, #4]
   14fb0:	609a      	str	r2, [r3, #8]
   14fb2:	4b09      	ldr	r3, [pc, #36]	; (14fd8 <platform_read+0x54>)
   14fb4:	2201      	movs	r2, #1
   14fb6:	81da      	strh	r2, [r3, #14]
   14fb8:	4b07      	ldr	r3, [pc, #28]	; (14fd8 <platform_read+0x54>)
   14fba:	220b      	movs	r2, #11
   14fbc:	18ba      	adds	r2, r7, r2
   14fbe:	605a      	str	r2, [r3, #4]
   14fc0:	4b05      	ldr	r3, [pc, #20]	; (14fd8 <platform_read+0x54>)
   14fc2:	22c8      	movs	r2, #200	; 0xc8
   14fc4:	2105      	movs	r1, #5
   14fc6:	0018      	movs	r0, r3
   14fc8:	4b04      	ldr	r3, [pc, #16]	; (14fdc <platform_read+0x58>)
   14fca:	4798      	blx	r3
   14fcc:	0003      	movs	r3, r0
   14fce:	0018      	movs	r0, r3
   14fd0:	46bd      	mov	sp, r7
   14fd2:	b004      	add	sp, #16
   14fd4:	bd80      	pop	{r7, pc}
   14fd6:	46c0      	nop			; (mov r8, r8)
   14fd8:	20000020 	.word	0x20000020
   14fdc:	00013ff1 	.word	0x00013ff1

00014fe0 <GetImuStruct>:
   14fe0:	b580      	push	{r7, lr}
   14fe2:	af00      	add	r7, sp, #0
   14fe4:	4b01      	ldr	r3, [pc, #4]	; (14fec <GetImuStruct+0xc>)
   14fe6:	0018      	movs	r0, r3
   14fe8:	46bd      	mov	sp, r7
   14fea:	bd80      	pop	{r7, pc}
   14fec:	20000014 	.word	0x20000014

00014ff0 <InitImu>:
   14ff0:	b580      	push	{r7, lr}
   14ff2:	b082      	sub	sp, #8
   14ff4:	af00      	add	r7, sp, #0
   14ff6:	2300      	movs	r3, #0
   14ff8:	607b      	str	r3, [r7, #4]
   14ffa:	4b23      	ldr	r3, [pc, #140]	; (15088 <InitImu+0x98>)
   14ffc:	2101      	movs	r1, #1
   14ffe:	0018      	movs	r0, r3
   15000:	4b22      	ldr	r3, [pc, #136]	; (1508c <InitImu+0x9c>)
   15002:	4798      	blx	r3
   15004:	0003      	movs	r3, r0
   15006:	607b      	str	r3, [r7, #4]
   15008:	1cfa      	adds	r2, r7, #3
   1500a:	4b1f      	ldr	r3, [pc, #124]	; (15088 <InitImu+0x98>)
   1500c:	0011      	movs	r1, r2
   1500e:	0018      	movs	r0, r3
   15010:	4b1f      	ldr	r3, [pc, #124]	; (15090 <InitImu+0xa0>)
   15012:	4798      	blx	r3
   15014:	0002      	movs	r2, r0
   15016:	687b      	ldr	r3, [r7, #4]
   15018:	4313      	orrs	r3, r2
   1501a:	607b      	str	r3, [r7, #4]
   1501c:	1cfb      	adds	r3, r7, #3
   1501e:	781b      	ldrb	r3, [r3, #0]
   15020:	2b00      	cmp	r3, #0
   15022:	d1f1      	bne.n	15008 <InitImu+0x18>
   15024:	4b18      	ldr	r3, [pc, #96]	; (15088 <InitImu+0x98>)
   15026:	2180      	movs	r1, #128	; 0x80
   15028:	0018      	movs	r0, r3
   1502a:	4b1a      	ldr	r3, [pc, #104]	; (15094 <InitImu+0xa4>)
   1502c:	4798      	blx	r3
   1502e:	4b16      	ldr	r3, [pc, #88]	; (15088 <InitImu+0x98>)
   15030:	2101      	movs	r1, #1
   15032:	0018      	movs	r0, r3
   15034:	4b18      	ldr	r3, [pc, #96]	; (15098 <InitImu+0xa8>)
   15036:	4798      	blx	r3
   15038:	4b13      	ldr	r3, [pc, #76]	; (15088 <InitImu+0x98>)
   1503a:	2100      	movs	r1, #0
   1503c:	0018      	movs	r0, r3
   1503e:	4b17      	ldr	r3, [pc, #92]	; (1509c <InitImu+0xac>)
   15040:	4798      	blx	r3
   15042:	4b11      	ldr	r3, [pc, #68]	; (15088 <InitImu+0x98>)
   15044:	2101      	movs	r1, #1
   15046:	0018      	movs	r0, r3
   15048:	4b15      	ldr	r3, [pc, #84]	; (150a0 <InitImu+0xb0>)
   1504a:	4798      	blx	r3
   1504c:	4b0e      	ldr	r3, [pc, #56]	; (15088 <InitImu+0x98>)
   1504e:	2101      	movs	r1, #1
   15050:	0018      	movs	r0, r3
   15052:	4b14      	ldr	r3, [pc, #80]	; (150a4 <InitImu+0xb4>)
   15054:	4798      	blx	r3
   15056:	4b0c      	ldr	r3, [pc, #48]	; (15088 <InitImu+0x98>)
   15058:	2100      	movs	r1, #0
   1505a:	0018      	movs	r0, r3
   1505c:	4b12      	ldr	r3, [pc, #72]	; (150a8 <InitImu+0xb8>)
   1505e:	4798      	blx	r3
   15060:	4b09      	ldr	r3, [pc, #36]	; (15088 <InitImu+0x98>)
   15062:	2106      	movs	r1, #6
   15064:	0018      	movs	r0, r3
   15066:	4b11      	ldr	r3, [pc, #68]	; (150ac <InitImu+0xbc>)
   15068:	4798      	blx	r3
   1506a:	4b07      	ldr	r3, [pc, #28]	; (15088 <InitImu+0x98>)
   1506c:	2104      	movs	r1, #4
   1506e:	0018      	movs	r0, r3
   15070:	4b0f      	ldr	r3, [pc, #60]	; (150b0 <InitImu+0xc0>)
   15072:	4798      	blx	r3
   15074:	4b04      	ldr	r3, [pc, #16]	; (15088 <InitImu+0x98>)
   15076:	2101      	movs	r1, #1
   15078:	0018      	movs	r0, r3
   1507a:	4b0e      	ldr	r3, [pc, #56]	; (150b4 <InitImu+0xc4>)
   1507c:	4798      	blx	r3
   1507e:	687b      	ldr	r3, [r7, #4]
   15080:	0018      	movs	r0, r3
   15082:	46bd      	mov	sp, r7
   15084:	b002      	add	sp, #8
   15086:	bd80      	pop	{r7, pc}
   15088:	20000014 	.word	0x20000014
   1508c:	00014b5d 	.word	0x00014b5d
   15090:	00014bc9 	.word	0x00014bc9
   15094:	00014d29 	.word	0x00014d29
   15098:	00014905 	.word	0x00014905
   1509c:	00014971 	.word	0x00014971
   150a0:	00014311 	.word	0x00014311
   150a4:	00014641 	.word	0x00014641
   150a8:	000142a5 	.word	0x000142a5
   150ac:	000145d5 	.word	0x000145d5
   150b0:	00014c71 	.word	0x00014c71
   150b4:	00014c05 	.word	0x00014c05

000150b8 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(uint8_t neotrellis_addr)
{
   150b8:	b580      	push	{r7, lr}
   150ba:	b084      	sub	sp, #16
   150bc:	af00      	add	r7, sp, #0
   150be:	0002      	movs	r2, r0
   150c0:	1dfb      	adds	r3, r7, #7
   150c2:	701a      	strb	r2, [r3, #0]
    uint8_t readData[2];
    seesawData.address = neotrellis_addr;
   150c4:	4b3c      	ldr	r3, [pc, #240]	; (151b8 <InitializeSeesaw+0x100>)
   150c6:	1dfa      	adds	r2, r7, #7
   150c8:	7812      	ldrb	r2, [r2, #0]
   150ca:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   150cc:	4b3a      	ldr	r3, [pc, #232]	; (151b8 <InitializeSeesaw+0x100>)
   150ce:	4a3b      	ldr	r2, [pc, #236]	; (151bc <InitializeSeesaw+0x104>)
   150d0:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   150d2:	4b39      	ldr	r3, [pc, #228]	; (151b8 <InitializeSeesaw+0x100>)
   150d4:	2202      	movs	r2, #2
   150d6:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   150d8:	4b37      	ldr	r3, [pc, #220]	; (151b8 <InitializeSeesaw+0x100>)
   150da:	2208      	movs	r2, #8
   150dc:	18ba      	adds	r2, r7, r2
   150de:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   150e0:	4b35      	ldr	r3, [pc, #212]	; (151b8 <InitializeSeesaw+0x100>)
   150e2:	2201      	movs	r2, #1
   150e4:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   150e6:	4b34      	ldr	r3, [pc, #208]	; (151b8 <InitializeSeesaw+0x100>)
   150e8:	2264      	movs	r2, #100	; 0x64
   150ea:	2100      	movs	r1, #0
   150ec:	0018      	movs	r0, r3
   150ee:	4b34      	ldr	r3, [pc, #208]	; (151c0 <InitializeSeesaw+0x108>)
   150f0:	4798      	blx	r3
   150f2:	0003      	movs	r3, r0
   150f4:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   150f6:	68fb      	ldr	r3, [r7, #12]
   150f8:	2b00      	cmp	r3, #0
   150fa:	d004      	beq.n	15106 <InitializeSeesaw+0x4e>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   150fc:	4b31      	ldr	r3, [pc, #196]	; (151c4 <InitializeSeesaw+0x10c>)
   150fe:	0018      	movs	r0, r3
   15100:	4b31      	ldr	r3, [pc, #196]	; (151c8 <InitializeSeesaw+0x110>)
   15102:	4798      	blx	r3
   15104:	e00d      	b.n	15122 <InitializeSeesaw+0x6a>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   15106:	2308      	movs	r3, #8
   15108:	18fb      	adds	r3, r7, r3
   1510a:	781b      	ldrb	r3, [r3, #0]
   1510c:	2b55      	cmp	r3, #85	; 0x55
   1510e:	d004      	beq.n	1511a <InitializeSeesaw+0x62>
            SerialConsoleWriteString("Error/r/n");
   15110:	4b2e      	ldr	r3, [pc, #184]	; (151cc <InitializeSeesaw+0x114>)
   15112:	0018      	movs	r0, r3
   15114:	4b2c      	ldr	r3, [pc, #176]	; (151c8 <InitializeSeesaw+0x110>)
   15116:	4798      	blx	r3
   15118:	e003      	b.n	15122 <InitializeSeesaw+0x6a>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   1511a:	4b2d      	ldr	r3, [pc, #180]	; (151d0 <InitializeSeesaw+0x118>)
   1511c:	0018      	movs	r0, r3
   1511e:	4b2a      	ldr	r3, [pc, #168]	; (151c8 <InitializeSeesaw+0x110>)
   15120:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   15122:	4b25      	ldr	r3, [pc, #148]	; (151b8 <InitializeSeesaw+0x100>)
   15124:	4a2b      	ldr	r2, [pc, #172]	; (151d4 <InitializeSeesaw+0x11c>)
   15126:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   15128:	4b23      	ldr	r3, [pc, #140]	; (151b8 <InitializeSeesaw+0x100>)
   1512a:	2203      	movs	r2, #3
   1512c:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   1512e:	4b22      	ldr	r3, [pc, #136]	; (151b8 <InitializeSeesaw+0x100>)
   15130:	2164      	movs	r1, #100	; 0x64
   15132:	0018      	movs	r0, r3
   15134:	4b28      	ldr	r3, [pc, #160]	; (151d8 <InitializeSeesaw+0x120>)
   15136:	4798      	blx	r3
   15138:	0003      	movs	r3, r0
   1513a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   1513c:	68fb      	ldr	r3, [r7, #12]
   1513e:	2b00      	cmp	r3, #0
   15140:	d003      	beq.n	1514a <InitializeSeesaw+0x92>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   15142:	4b26      	ldr	r3, [pc, #152]	; (151dc <InitializeSeesaw+0x124>)
   15144:	0018      	movs	r0, r3
   15146:	4b20      	ldr	r3, [pc, #128]	; (151c8 <InitializeSeesaw+0x110>)
   15148:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   1514a:	4b1b      	ldr	r3, [pc, #108]	; (151b8 <InitializeSeesaw+0x100>)
   1514c:	4a24      	ldr	r2, [pc, #144]	; (151e0 <InitializeSeesaw+0x128>)
   1514e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   15150:	4b19      	ldr	r3, [pc, #100]	; (151b8 <InitializeSeesaw+0x100>)
   15152:	2203      	movs	r2, #3
   15154:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   15156:	4b18      	ldr	r3, [pc, #96]	; (151b8 <InitializeSeesaw+0x100>)
   15158:	2164      	movs	r1, #100	; 0x64
   1515a:	0018      	movs	r0, r3
   1515c:	4b1e      	ldr	r3, [pc, #120]	; (151d8 <InitializeSeesaw+0x120>)
   1515e:	4798      	blx	r3
   15160:	0003      	movs	r3, r0
   15162:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   15164:	68fb      	ldr	r3, [r7, #12]
   15166:	2b00      	cmp	r3, #0
   15168:	d003      	beq.n	15172 <InitializeSeesaw+0xba>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   1516a:	4b1e      	ldr	r3, [pc, #120]	; (151e4 <InitializeSeesaw+0x12c>)
   1516c:	0018      	movs	r0, r3
   1516e:	4b16      	ldr	r3, [pc, #88]	; (151c8 <InitializeSeesaw+0x110>)
   15170:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   15172:	4b11      	ldr	r3, [pc, #68]	; (151b8 <InitializeSeesaw+0x100>)
   15174:	4a1c      	ldr	r2, [pc, #112]	; (151e8 <InitializeSeesaw+0x130>)
   15176:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   15178:	4b0f      	ldr	r3, [pc, #60]	; (151b8 <InitializeSeesaw+0x100>)
   1517a:	2204      	movs	r2, #4
   1517c:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   1517e:	4b0e      	ldr	r3, [pc, #56]	; (151b8 <InitializeSeesaw+0x100>)
   15180:	2164      	movs	r1, #100	; 0x64
   15182:	0018      	movs	r0, r3
   15184:	4b14      	ldr	r3, [pc, #80]	; (151d8 <InitializeSeesaw+0x120>)
   15186:	4798      	blx	r3
   15188:	0003      	movs	r3, r0
   1518a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   1518c:	68fb      	ldr	r3, [r7, #12]
   1518e:	2b00      	cmp	r3, #0
   15190:	d003      	beq.n	1519a <InitializeSeesaw+0xe2>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   15192:	4b16      	ldr	r3, [pc, #88]	; (151ec <InitializeSeesaw+0x134>)
   15194:	0018      	movs	r0, r3
   15196:	4b0c      	ldr	r3, [pc, #48]	; (151c8 <InitializeSeesaw+0x110>)
   15198:	4798      	blx	r3
    }

    SeesawTurnOnLedTest(neotrellis_addr);
   1519a:	1dfb      	adds	r3, r7, #7
   1519c:	781b      	ldrb	r3, [r3, #0]
   1519e:	0018      	movs	r0, r3
   151a0:	4b13      	ldr	r3, [pc, #76]	; (151f0 <InitializeSeesaw+0x138>)
   151a2:	4798      	blx	r3

    SeesawInitializeKeypad(neotrellis_addr);
   151a4:	1dfb      	adds	r3, r7, #7
   151a6:	781b      	ldrb	r3, [r3, #0]
   151a8:	0018      	movs	r0, r3
   151aa:	4b12      	ldr	r3, [pc, #72]	; (151f4 <InitializeSeesaw+0x13c>)
   151ac:	4798      	blx	r3
    return error;
   151ae:	68fb      	ldr	r3, [r7, #12]
}
   151b0:	0018      	movs	r0, r3
   151b2:	46bd      	mov	sp, r7
   151b4:	b004      	add	sp, #16
   151b6:	bd80      	pop	{r7, pc}
   151b8:	2000440c 	.word	0x2000440c
   151bc:	00036410 	.word	0x00036410
   151c0:	00013ff1 	.word	0x00013ff1
   151c4:	00036428 	.word	0x00036428
   151c8:	0001e3e5 	.word	0x0001e3e5
   151cc:	00036448 	.word	0x00036448
   151d0:	00036454 	.word	0x00036454
   151d4:	00036414 	.word	0x00036414
   151d8:	00013f19 	.word	0x00013f19
   151dc:	00036468 	.word	0x00036468
   151e0:	00036418 	.word	0x00036418
   151e4:	00036488 	.word	0x00036488
   151e8:	0003641c 	.word	0x0003641c
   151ec:	000364b4 	.word	0x000364b4
   151f0:	000155e9 	.word	0x000155e9
   151f4:	000154ed 	.word	0x000154ed

000151f8 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(uint8_t neotrellis_addr)
{
   151f8:	b580      	push	{r7, lr}
   151fa:	b084      	sub	sp, #16
   151fc:	af00      	add	r7, sp, #0
   151fe:	0002      	movs	r2, r0
   15200:	1dfb      	adds	r3, r7, #7
   15202:	701a      	strb	r2, [r3, #0]
    uint8_t count = 0;
   15204:	230b      	movs	r3, #11
   15206:	18fb      	adds	r3, r7, r3
   15208:	2200      	movs	r2, #0
   1520a:	701a      	strb	r2, [r3, #0]
    seesawData.address = neotrellis_addr;
   1520c:	4b14      	ldr	r3, [pc, #80]	; (15260 <SeesawGetKeypadCount+0x68>)
   1520e:	1dfa      	adds	r2, r7, #7
   15210:	7812      	ldrb	r2, [r2, #0]
   15212:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   15214:	4b12      	ldr	r3, [pc, #72]	; (15260 <SeesawGetKeypadCount+0x68>)
   15216:	4a13      	ldr	r2, [pc, #76]	; (15264 <SeesawGetKeypadCount+0x6c>)
   15218:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   1521a:	4b11      	ldr	r3, [pc, #68]	; (15260 <SeesawGetKeypadCount+0x68>)
   1521c:	2202      	movs	r2, #2
   1521e:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   15220:	4b0f      	ldr	r3, [pc, #60]	; (15260 <SeesawGetKeypadCount+0x68>)
   15222:	220b      	movs	r2, #11
   15224:	18ba      	adds	r2, r7, r2
   15226:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   15228:	4b0d      	ldr	r3, [pc, #52]	; (15260 <SeesawGetKeypadCount+0x68>)
   1522a:	2201      	movs	r2, #1
   1522c:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1522e:	4b0c      	ldr	r3, [pc, #48]	; (15260 <SeesawGetKeypadCount+0x68>)
   15230:	2264      	movs	r2, #100	; 0x64
   15232:	2100      	movs	r1, #0
   15234:	0018      	movs	r0, r3
   15236:	4b0c      	ldr	r3, [pc, #48]	; (15268 <SeesawGetKeypadCount+0x70>)
   15238:	4798      	blx	r3
   1523a:	0003      	movs	r3, r0
   1523c:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   1523e:	68fb      	ldr	r3, [r7, #12]
   15240:	2b00      	cmp	r3, #0
   15242:	d005      	beq.n	15250 <SeesawGetKeypadCount+0x58>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   15244:	4b09      	ldr	r3, [pc, #36]	; (1526c <SeesawGetKeypadCount+0x74>)
   15246:	0018      	movs	r0, r3
   15248:	4b09      	ldr	r3, [pc, #36]	; (15270 <SeesawGetKeypadCount+0x78>)
   1524a:	4798      	blx	r3
		return 99;
   1524c:	2363      	movs	r3, #99	; 0x63
   1524e:	e002      	b.n	15256 <SeesawGetKeypadCount+0x5e>
    }
    return count;
   15250:	230b      	movs	r3, #11
   15252:	18fb      	adds	r3, r7, r3
   15254:	781b      	ldrb	r3, [r3, #0]
}
   15256:	0018      	movs	r0, r3
   15258:	46bd      	mov	sp, r7
   1525a:	b004      	add	sp, #16
   1525c:	bd80      	pop	{r7, pc}
   1525e:	46c0      	nop			; (mov r8, r8)
   15260:	2000440c 	.word	0x2000440c
   15264:	00036424 	.word	0x00036424
   15268:	00013ff1 	.word	0x00013ff1
   1526c:	000364e8 	.word	0x000364e8
   15270:	0001e3e5 	.word	0x0001e3e5

00015274 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t neotrellis_addr, uint8_t *buffer, uint8_t count)
{
   15274:	b580      	push	{r7, lr}
   15276:	b084      	sub	sp, #16
   15278:	af00      	add	r7, sp, #0
   1527a:	6039      	str	r1, [r7, #0]
   1527c:	0011      	movs	r1, r2
   1527e:	1dfb      	adds	r3, r7, #7
   15280:	1c02      	adds	r2, r0, #0
   15282:	701a      	strb	r2, [r3, #0]
   15284:	1dbb      	adds	r3, r7, #6
   15286:	1c0a      	adds	r2, r1, #0
   15288:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   1528a:	1dbb      	adds	r3, r7, #6
   1528c:	781b      	ldrb	r3, [r3, #0]
   1528e:	2b00      	cmp	r3, #0
   15290:	d101      	bne.n	15296 <SeesawReadKeypad+0x22>
   15292:	2300      	movs	r3, #0
   15294:	e027      	b.n	152e6 <SeesawReadKeypad+0x72>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   15296:	2308      	movs	r3, #8
   15298:	18fb      	adds	r3, r7, r3
   1529a:	4a15      	ldr	r2, [pc, #84]	; (152f0 <SeesawReadKeypad+0x7c>)
   1529c:	8812      	ldrh	r2, [r2, #0]
   1529e:	801a      	strh	r2, [r3, #0]
    seesawData.address = neotrellis_addr;
   152a0:	4b14      	ldr	r3, [pc, #80]	; (152f4 <SeesawReadKeypad+0x80>)
   152a2:	1dfa      	adds	r2, r7, #7
   152a4:	7812      	ldrb	r2, [r2, #0]
   152a6:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   152a8:	4b12      	ldr	r3, [pc, #72]	; (152f4 <SeesawReadKeypad+0x80>)
   152aa:	2208      	movs	r2, #8
   152ac:	18ba      	adds	r2, r7, r2
   152ae:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   152b0:	4b10      	ldr	r3, [pc, #64]	; (152f4 <SeesawReadKeypad+0x80>)
   152b2:	2202      	movs	r2, #2
   152b4:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   152b6:	4b0f      	ldr	r3, [pc, #60]	; (152f4 <SeesawReadKeypad+0x80>)
   152b8:	683a      	ldr	r2, [r7, #0]
   152ba:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   152bc:	1dbb      	adds	r3, r7, #6
   152be:	781b      	ldrb	r3, [r3, #0]
   152c0:	b29a      	uxth	r2, r3
   152c2:	4b0c      	ldr	r3, [pc, #48]	; (152f4 <SeesawReadKeypad+0x80>)
   152c4:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   152c6:	4b0b      	ldr	r3, [pc, #44]	; (152f4 <SeesawReadKeypad+0x80>)
   152c8:	2264      	movs	r2, #100	; 0x64
   152ca:	2100      	movs	r1, #0
   152cc:	0018      	movs	r0, r3
   152ce:	4b0a      	ldr	r3, [pc, #40]	; (152f8 <SeesawReadKeypad+0x84>)
   152d0:	4798      	blx	r3
   152d2:	0003      	movs	r3, r0
   152d4:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   152d6:	68fb      	ldr	r3, [r7, #12]
   152d8:	2b00      	cmp	r3, #0
   152da:	d003      	beq.n	152e4 <SeesawReadKeypad+0x70>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   152dc:	4b07      	ldr	r3, [pc, #28]	; (152fc <SeesawReadKeypad+0x88>)
   152de:	0018      	movs	r0, r3
   152e0:	4b07      	ldr	r3, [pc, #28]	; (15300 <SeesawReadKeypad+0x8c>)
   152e2:	4798      	blx	r3
    }
    return error;
   152e4:	68fb      	ldr	r3, [r7, #12]
}
   152e6:	0018      	movs	r0, r3
   152e8:	46bd      	mov	sp, r7
   152ea:	b004      	add	sp, #16
   152ec:	bd80      	pop	{r7, pc}
   152ee:	46c0      	nop			; (mov r8, r8)
   152f0:	0003650c 	.word	0x0003650c
   152f4:	2000440c 	.word	0x2000440c
   152f8:	00013ff1 	.word	0x00013ff1
   152fc:	000364e8 	.word	0x000364e8
   15300:	0001e3e5 	.word	0x0001e3e5

00015304 <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t neotrellis_addr, uint8_t key, uint8_t edge, bool enable)
{
   15304:	b5b0      	push	{r4, r5, r7, lr}
   15306:	b086      	sub	sp, #24
   15308:	af00      	add	r7, sp, #0
   1530a:	0005      	movs	r5, r0
   1530c:	000c      	movs	r4, r1
   1530e:	0010      	movs	r0, r2
   15310:	0019      	movs	r1, r3
   15312:	1dfb      	adds	r3, r7, #7
   15314:	1c2a      	adds	r2, r5, #0
   15316:	701a      	strb	r2, [r3, #0]
   15318:	1dbb      	adds	r3, r7, #6
   1531a:	1c22      	adds	r2, r4, #0
   1531c:	701a      	strb	r2, [r3, #0]
   1531e:	1d7b      	adds	r3, r7, #5
   15320:	1c02      	adds	r2, r0, #0
   15322:	701a      	strb	r2, [r3, #0]
   15324:	1d3b      	adds	r3, r7, #4
   15326:	1c0a      	adds	r2, r1, #0
   15328:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   1532a:	2310      	movs	r3, #16
   1532c:	18fb      	adds	r3, r7, r3
   1532e:	1d3a      	adds	r2, r7, #4
   15330:	7812      	ldrb	r2, [r2, #0]
   15332:	2101      	movs	r1, #1
   15334:	0010      	movs	r0, r2
   15336:	4008      	ands	r0, r1
   15338:	781a      	ldrb	r2, [r3, #0]
   1533a:	2101      	movs	r1, #1
   1533c:	438a      	bics	r2, r1
   1533e:	1c11      	adds	r1, r2, #0
   15340:	1c02      	adds	r2, r0, #0
   15342:	430a      	orrs	r2, r1
   15344:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   15346:	1d7b      	adds	r3, r7, #5
   15348:	781b      	ldrb	r3, [r3, #0]
   1534a:	2201      	movs	r2, #1
   1534c:	409a      	lsls	r2, r3
   1534e:	0013      	movs	r3, r2
   15350:	b2db      	uxtb	r3, r3
   15352:	1c1a      	adds	r2, r3, #0
   15354:	230f      	movs	r3, #15
   15356:	4013      	ands	r3, r2
   15358:	b2da      	uxtb	r2, r3
   1535a:	2310      	movs	r3, #16
   1535c:	18fb      	adds	r3, r7, r3
   1535e:	210f      	movs	r1, #15
   15360:	400a      	ands	r2, r1
   15362:	1890      	adds	r0, r2, r2
   15364:	781a      	ldrb	r2, [r3, #0]
   15366:	211e      	movs	r1, #30
   15368:	438a      	bics	r2, r1
   1536a:	1c11      	adds	r1, r2, #0
   1536c:	1c02      	adds	r2, r0, #0
   1536e:	430a      	orrs	r2, r1
   15370:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   15372:	230c      	movs	r3, #12
   15374:	18fb      	adds	r3, r7, r3
   15376:	2210      	movs	r2, #16
   15378:	701a      	strb	r2, [r3, #0]
   1537a:	230c      	movs	r3, #12
   1537c:	18fb      	adds	r3, r7, r3
   1537e:	2201      	movs	r2, #1
   15380:	705a      	strb	r2, [r3, #1]
   15382:	230c      	movs	r3, #12
   15384:	18fb      	adds	r3, r7, r3
   15386:	1dba      	adds	r2, r7, #6
   15388:	7812      	ldrb	r2, [r2, #0]
   1538a:	709a      	strb	r2, [r3, #2]
   1538c:	2310      	movs	r3, #16
   1538e:	18fb      	adds	r3, r7, r3
   15390:	781a      	ldrb	r2, [r3, #0]
   15392:	230c      	movs	r3, #12
   15394:	18fb      	adds	r3, r7, r3
   15396:	70da      	strb	r2, [r3, #3]

    //seesawData.address = neotrellis_addr;
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   15398:	4b0a      	ldr	r3, [pc, #40]	; (153c4 <SeesawActivateKey+0xc0>)
   1539a:	220c      	movs	r2, #12
   1539c:	18ba      	adds	r2, r7, r2
   1539e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   153a0:	4b08      	ldr	r3, [pc, #32]	; (153c4 <SeesawActivateKey+0xc0>)
   153a2:	2204      	movs	r2, #4
   153a4:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   153a6:	4b07      	ldr	r3, [pc, #28]	; (153c4 <SeesawActivateKey+0xc0>)
   153a8:	2200      	movs	r2, #0
   153aa:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   153ac:	4b05      	ldr	r3, [pc, #20]	; (153c4 <SeesawActivateKey+0xc0>)
   153ae:	2164      	movs	r1, #100	; 0x64
   153b0:	0018      	movs	r0, r3
   153b2:	4b05      	ldr	r3, [pc, #20]	; (153c8 <SeesawActivateKey+0xc4>)
   153b4:	4798      	blx	r3
   153b6:	0003      	movs	r3, r0
   153b8:	617b      	str	r3, [r7, #20]
    return error;
   153ba:	697b      	ldr	r3, [r7, #20]
}
   153bc:	0018      	movs	r0, r3
   153be:	46bd      	mov	sp, r7
   153c0:	b006      	add	sp, #24
   153c2:	bdb0      	pop	{r4, r5, r7, pc}
   153c4:	2000440c 	.word	0x2000440c
   153c8:	00013f19 	.word	0x00013f19

000153cc <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t neotrellis_addr, uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   153cc:	b5b0      	push	{r4, r5, r7, lr}
   153ce:	b086      	sub	sp, #24
   153d0:	af00      	add	r7, sp, #0
   153d2:	0005      	movs	r5, r0
   153d4:	000c      	movs	r4, r1
   153d6:	0010      	movs	r0, r2
   153d8:	0019      	movs	r1, r3
   153da:	1dfb      	adds	r3, r7, #7
   153dc:	1c2a      	adds	r2, r5, #0
   153de:	701a      	strb	r2, [r3, #0]
   153e0:	1dbb      	adds	r3, r7, #6
   153e2:	1c22      	adds	r2, r4, #0
   153e4:	701a      	strb	r2, [r3, #0]
   153e6:	1d7b      	adds	r3, r7, #5
   153e8:	1c02      	adds	r2, r0, #0
   153ea:	701a      	strb	r2, [r3, #0]
   153ec:	1d3b      	adds	r3, r7, #4
   153ee:	1c0a      	adds	r2, r1, #0
   153f0:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   153f2:	2308      	movs	r3, #8
   153f4:	18fb      	adds	r3, r7, r3
   153f6:	220e      	movs	r2, #14
   153f8:	701a      	strb	r2, [r3, #0]
   153fa:	2308      	movs	r3, #8
   153fc:	18fb      	adds	r3, r7, r3
   153fe:	2204      	movs	r2, #4
   15400:	705a      	strb	r2, [r3, #1]
   15402:	2308      	movs	r3, #8
   15404:	18fb      	adds	r3, r7, r3
   15406:	2200      	movs	r2, #0
   15408:	709a      	strb	r2, [r3, #2]
   1540a:	2308      	movs	r3, #8
   1540c:	18fb      	adds	r3, r7, r3
   1540e:	2200      	movs	r2, #0
   15410:	70da      	strb	r2, [r3, #3]
   15412:	2308      	movs	r3, #8
   15414:	18fb      	adds	r3, r7, r3
   15416:	1d3a      	adds	r2, r7, #4
   15418:	7812      	ldrb	r2, [r2, #0]
   1541a:	711a      	strb	r2, [r3, #4]
   1541c:	2308      	movs	r3, #8
   1541e:	18fb      	adds	r3, r7, r3
   15420:	1d7a      	adds	r2, r7, #5
   15422:	7812      	ldrb	r2, [r2, #0]
   15424:	715a      	strb	r2, [r3, #5]
   15426:	2308      	movs	r3, #8
   15428:	18fb      	adds	r3, r7, r3
   1542a:	2228      	movs	r2, #40	; 0x28
   1542c:	18ba      	adds	r2, r7, r2
   1542e:	7812      	ldrb	r2, [r2, #0]
   15430:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   15432:	1dbb      	adds	r3, r7, #6
   15434:	781b      	ldrb	r3, [r3, #0]
   15436:	b29b      	uxth	r3, r3
   15438:	2216      	movs	r2, #22
   1543a:	18ba      	adds	r2, r7, r2
   1543c:	1c19      	adds	r1, r3, #0
   1543e:	1c0b      	adds	r3, r1, #0
   15440:	18db      	adds	r3, r3, r3
   15442:	185b      	adds	r3, r3, r1
   15444:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   15446:	2316      	movs	r3, #22
   15448:	18fb      	adds	r3, r7, r3
   1544a:	881b      	ldrh	r3, [r3, #0]
   1544c:	0a1b      	lsrs	r3, r3, #8
   1544e:	b29b      	uxth	r3, r3
   15450:	b2da      	uxtb	r2, r3
   15452:	2308      	movs	r3, #8
   15454:	18fb      	adds	r3, r7, r3
   15456:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   15458:	2316      	movs	r3, #22
   1545a:	18fb      	adds	r3, r7, r3
   1545c:	881b      	ldrh	r3, [r3, #0]
   1545e:	b2da      	uxtb	r2, r3
   15460:	2308      	movs	r3, #8
   15462:	18fb      	adds	r3, r7, r3
   15464:	70da      	strb	r2, [r3, #3]

	seesawData.address = neotrellis_addr;
   15466:	4b0b      	ldr	r3, [pc, #44]	; (15494 <SeesawSetLed+0xc8>)
   15468:	1dfa      	adds	r2, r7, #7
   1546a:	7812      	ldrb	r2, [r2, #0]
   1546c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   1546e:	4b09      	ldr	r3, [pc, #36]	; (15494 <SeesawSetLed+0xc8>)
   15470:	2208      	movs	r2, #8
   15472:	18ba      	adds	r2, r7, r2
   15474:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   15476:	4b07      	ldr	r3, [pc, #28]	; (15494 <SeesawSetLed+0xc8>)
   15478:	2207      	movs	r2, #7
   1547a:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1547c:	4b05      	ldr	r3, [pc, #20]	; (15494 <SeesawSetLed+0xc8>)
   1547e:	2164      	movs	r1, #100	; 0x64
   15480:	0018      	movs	r0, r3
   15482:	4b05      	ldr	r3, [pc, #20]	; (15498 <SeesawSetLed+0xcc>)
   15484:	4798      	blx	r3
   15486:	0003      	movs	r3, r0
   15488:	613b      	str	r3, [r7, #16]
    return error;
   1548a:	693b      	ldr	r3, [r7, #16]
}
   1548c:	0018      	movs	r0, r3
   1548e:	46bd      	mov	sp, r7
   15490:	b006      	add	sp, #24
   15492:	bdb0      	pop	{r4, r5, r7, pc}
   15494:	2000440c 	.word	0x2000440c
   15498:	00013f19 	.word	0x00013f19

0001549c <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(uint8_t neotrellis_addr)
{
   1549c:	b580      	push	{r7, lr}
   1549e:	b084      	sub	sp, #16
   154a0:	af00      	add	r7, sp, #0
   154a2:	0002      	movs	r2, r0
   154a4:	1dfb      	adds	r3, r7, #7
   154a6:	701a      	strb	r2, [r3, #0]
	
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   154a8:	2308      	movs	r3, #8
   154aa:	18fb      	adds	r3, r7, r3
   154ac:	4a0c      	ldr	r2, [pc, #48]	; (154e0 <SeesawOrderLedUpdate+0x44>)
   154ae:	8812      	ldrh	r2, [r2, #0]
   154b0:	801a      	strh	r2, [r3, #0]
		
	seesawData.address = neotrellis_addr;
   154b2:	4b0c      	ldr	r3, [pc, #48]	; (154e4 <SeesawOrderLedUpdate+0x48>)
   154b4:	1dfa      	adds	r2, r7, #7
   154b6:	7812      	ldrb	r2, [r2, #0]
   154b8:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   154ba:	4b0a      	ldr	r3, [pc, #40]	; (154e4 <SeesawOrderLedUpdate+0x48>)
   154bc:	2208      	movs	r2, #8
   154be:	18ba      	adds	r2, r7, r2
   154c0:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   154c2:	4b08      	ldr	r3, [pc, #32]	; (154e4 <SeesawOrderLedUpdate+0x48>)
   154c4:	2202      	movs	r2, #2
   154c6:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   154c8:	4b06      	ldr	r3, [pc, #24]	; (154e4 <SeesawOrderLedUpdate+0x48>)
   154ca:	2164      	movs	r1, #100	; 0x64
   154cc:	0018      	movs	r0, r3
   154ce:	4b06      	ldr	r3, [pc, #24]	; (154e8 <SeesawOrderLedUpdate+0x4c>)
   154d0:	4798      	blx	r3
   154d2:	0003      	movs	r3, r0
   154d4:	60fb      	str	r3, [r7, #12]
    return error;
   154d6:	68fb      	ldr	r3, [r7, #12]
}
   154d8:	0018      	movs	r0, r3
   154da:	46bd      	mov	sp, r7
   154dc:	b004      	add	sp, #16
   154de:	bd80      	pop	{r7, pc}
   154e0:	00036510 	.word	0x00036510
   154e4:	2000440c 	.word	0x2000440c
   154e8:	00013f19 	.word	0x00013f19

000154ec <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(uint8_t neotrellis_addr)
{
   154ec:	b590      	push	{r4, r7, lr}
   154ee:	b085      	sub	sp, #20
   154f0:	af00      	add	r7, sp, #0
   154f2:	0002      	movs	r2, r0
   154f4:	1dfb      	adds	r3, r7, #7
   154f6:	701a      	strb	r2, [r3, #0]
    seesawData.address = neotrellis_addr;
   154f8:	4b34      	ldr	r3, [pc, #208]	; (155cc <SeesawInitializeKeypad+0xe0>)
   154fa:	1dfa      	adds	r2, r7, #7
   154fc:	7812      	ldrb	r2, [r2, #0]
   154fe:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   15500:	4b32      	ldr	r3, [pc, #200]	; (155cc <SeesawInitializeKeypad+0xe0>)
   15502:	4a33      	ldr	r2, [pc, #204]	; (155d0 <SeesawInitializeKeypad+0xe4>)
   15504:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   15506:	4b31      	ldr	r3, [pc, #196]	; (155cc <SeesawInitializeKeypad+0xe0>)
   15508:	2203      	movs	r2, #3
   1550a:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   1550c:	4b2f      	ldr	r3, [pc, #188]	; (155cc <SeesawInitializeKeypad+0xe0>)
   1550e:	2200      	movs	r2, #0
   15510:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   15512:	4b2e      	ldr	r3, [pc, #184]	; (155cc <SeesawInitializeKeypad+0xe0>)
   15514:	2164      	movs	r1, #100	; 0x64
   15516:	0018      	movs	r0, r3
   15518:	4b2e      	ldr	r3, [pc, #184]	; (155d4 <SeesawInitializeKeypad+0xe8>)
   1551a:	4798      	blx	r3
   1551c:	0003      	movs	r3, r0
   1551e:	60bb      	str	r3, [r7, #8]
    if (ERROR_NONE != error) {
   15520:	68bb      	ldr	r3, [r7, #8]
   15522:	2b00      	cmp	r3, #0
   15524:	d003      	beq.n	1552e <SeesawInitializeKeypad+0x42>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   15526:	4b2c      	ldr	r3, [pc, #176]	; (155d8 <SeesawInitializeKeypad+0xec>)
   15528:	0018      	movs	r0, r3
   1552a:	4b2c      	ldr	r3, [pc, #176]	; (155dc <SeesawInitializeKeypad+0xf0>)
   1552c:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   1552e:	2300      	movs	r3, #0
   15530:	60fb      	str	r3, [r7, #12]
   15532:	e043      	b.n	155bc <SeesawInitializeKeypad+0xd0>
        error = SeesawActivateKey(neotrellis_addr,NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   15534:	68fb      	ldr	r3, [r7, #12]
   15536:	2b00      	cmp	r3, #0
   15538:	da00      	bge.n	1553c <SeesawInitializeKeypad+0x50>
   1553a:	3303      	adds	r3, #3
   1553c:	109b      	asrs	r3, r3, #2
   1553e:	b2db      	uxtb	r3, r3
   15540:	00db      	lsls	r3, r3, #3
   15542:	b2da      	uxtb	r2, r3
   15544:	68fb      	ldr	r3, [r7, #12]
   15546:	4926      	ldr	r1, [pc, #152]	; (155e0 <SeesawInitializeKeypad+0xf4>)
   15548:	400b      	ands	r3, r1
   1554a:	d504      	bpl.n	15556 <SeesawInitializeKeypad+0x6a>
   1554c:	3b01      	subs	r3, #1
   1554e:	2104      	movs	r1, #4
   15550:	4249      	negs	r1, r1
   15552:	430b      	orrs	r3, r1
   15554:	3301      	adds	r3, #1
   15556:	b2db      	uxtb	r3, r3
   15558:	18d3      	adds	r3, r2, r3
   1555a:	b2d9      	uxtb	r1, r3
   1555c:	1dfb      	adds	r3, r7, #7
   1555e:	7818      	ldrb	r0, [r3, #0]
   15560:	2301      	movs	r3, #1
   15562:	2203      	movs	r2, #3
   15564:	4c1f      	ldr	r4, [pc, #124]	; (155e4 <SeesawInitializeKeypad+0xf8>)
   15566:	47a0      	blx	r4
   15568:	0003      	movs	r3, r0
   1556a:	60bb      	str	r3, [r7, #8]
        error |= SeesawActivateKey(neotrellis_addr,NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   1556c:	68fb      	ldr	r3, [r7, #12]
   1556e:	2b00      	cmp	r3, #0
   15570:	da00      	bge.n	15574 <SeesawInitializeKeypad+0x88>
   15572:	3303      	adds	r3, #3
   15574:	109b      	asrs	r3, r3, #2
   15576:	b2db      	uxtb	r3, r3
   15578:	00db      	lsls	r3, r3, #3
   1557a:	b2da      	uxtb	r2, r3
   1557c:	68fb      	ldr	r3, [r7, #12]
   1557e:	4918      	ldr	r1, [pc, #96]	; (155e0 <SeesawInitializeKeypad+0xf4>)
   15580:	400b      	ands	r3, r1
   15582:	d504      	bpl.n	1558e <SeesawInitializeKeypad+0xa2>
   15584:	3b01      	subs	r3, #1
   15586:	2104      	movs	r1, #4
   15588:	4249      	negs	r1, r1
   1558a:	430b      	orrs	r3, r1
   1558c:	3301      	adds	r3, #1
   1558e:	b2db      	uxtb	r3, r3
   15590:	18d3      	adds	r3, r2, r3
   15592:	b2d9      	uxtb	r1, r3
   15594:	1dfb      	adds	r3, r7, #7
   15596:	7818      	ldrb	r0, [r3, #0]
   15598:	2301      	movs	r3, #1
   1559a:	2202      	movs	r2, #2
   1559c:	4c11      	ldr	r4, [pc, #68]	; (155e4 <SeesawInitializeKeypad+0xf8>)
   1559e:	47a0      	blx	r4
   155a0:	0002      	movs	r2, r0
   155a2:	68bb      	ldr	r3, [r7, #8]
   155a4:	4313      	orrs	r3, r2
   155a6:	60bb      	str	r3, [r7, #8]
        if (ERROR_NONE != error) {
   155a8:	68bb      	ldr	r3, [r7, #8]
   155aa:	2b00      	cmp	r3, #0
   155ac:	d003      	beq.n	155b6 <SeesawInitializeKeypad+0xca>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   155ae:	4b0a      	ldr	r3, [pc, #40]	; (155d8 <SeesawInitializeKeypad+0xec>)
   155b0:	0018      	movs	r0, r3
   155b2:	4b0a      	ldr	r3, [pc, #40]	; (155dc <SeesawInitializeKeypad+0xf0>)
   155b4:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   155b6:	68fb      	ldr	r3, [r7, #12]
   155b8:	3301      	adds	r3, #1
   155ba:	60fb      	str	r3, [r7, #12]
   155bc:	68fb      	ldr	r3, [r7, #12]
   155be:	2b0f      	cmp	r3, #15
   155c0:	ddb8      	ble.n	15534 <SeesawInitializeKeypad+0x48>
        }
    }
}
   155c2:	46c0      	nop			; (mov r8, r8)
   155c4:	46bd      	mov	sp, r7
   155c6:	b005      	add	sp, #20
   155c8:	bd90      	pop	{r4, r7, pc}
   155ca:	46c0      	nop			; (mov r8, r8)
   155cc:	2000440c 	.word	0x2000440c
   155d0:	00036420 	.word	0x00036420
   155d4:	00013f19 	.word	0x00013f19
   155d8:	00036514 	.word	0x00036514
   155dc:	0001e3e5 	.word	0x0001e3e5
   155e0:	80000003 	.word	0x80000003
   155e4:	00015305 	.word	0x00015305

000155e8 <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(uint8_t neotrellis_addr)
{
   155e8:	b590      	push	{r4, r7, lr}
   155ea:	b085      	sub	sp, #20
   155ec:	af02      	add	r7, sp, #8
   155ee:	0002      	movs	r2, r0
   155f0:	1dfb      	adds	r3, r7, #7
   155f2:	701a      	strb	r2, [r3, #0]
    SeesawSetLed(neotrellis_addr,15, 255, 255, 255);
   155f4:	1dfb      	adds	r3, r7, #7
   155f6:	7818      	ldrb	r0, [r3, #0]
   155f8:	23ff      	movs	r3, #255	; 0xff
   155fa:	9300      	str	r3, [sp, #0]
   155fc:	23ff      	movs	r3, #255	; 0xff
   155fe:	22ff      	movs	r2, #255	; 0xff
   15600:	210f      	movs	r1, #15
   15602:	4c0f      	ldr	r4, [pc, #60]	; (15640 <SeesawTurnOnLedTest+0x58>)
   15604:	47a0      	blx	r4
    SeesawOrderLedUpdate(neotrellis_addr);
   15606:	1dfb      	adds	r3, r7, #7
   15608:	781b      	ldrb	r3, [r3, #0]
   1560a:	0018      	movs	r0, r3
   1560c:	4b0d      	ldr	r3, [pc, #52]	; (15644 <SeesawTurnOnLedTest+0x5c>)
   1560e:	4798      	blx	r3
    vTaskDelay(400);
   15610:	23c8      	movs	r3, #200	; 0xc8
   15612:	005b      	lsls	r3, r3, #1
   15614:	0018      	movs	r0, r3
   15616:	4b0c      	ldr	r3, [pc, #48]	; (15648 <SeesawTurnOnLedTest+0x60>)
   15618:	4798      	blx	r3

    SeesawSetLed(neotrellis_addr,15, 0, 0, 0);
   1561a:	1dfb      	adds	r3, r7, #7
   1561c:	7818      	ldrb	r0, [r3, #0]
   1561e:	2300      	movs	r3, #0
   15620:	9300      	str	r3, [sp, #0]
   15622:	2300      	movs	r3, #0
   15624:	2200      	movs	r2, #0
   15626:	210f      	movs	r1, #15
   15628:	4c05      	ldr	r4, [pc, #20]	; (15640 <SeesawTurnOnLedTest+0x58>)
   1562a:	47a0      	blx	r4
    SeesawOrderLedUpdate(neotrellis_addr);
   1562c:	1dfb      	adds	r3, r7, #7
   1562e:	781b      	ldrb	r3, [r3, #0]
   15630:	0018      	movs	r0, r3
   15632:	4b04      	ldr	r3, [pc, #16]	; (15644 <SeesawTurnOnLedTest+0x5c>)
   15634:	4798      	blx	r3
   15636:	46c0      	nop			; (mov r8, r8)
   15638:	46bd      	mov	sp, r7
   1563a:	b003      	add	sp, #12
   1563c:	bd90      	pop	{r4, r7, pc}
   1563e:	46c0      	nop			; (mov r8, r8)
   15640:	000153cd 	.word	0x000153cd
   15644:	0001549d 	.word	0x0001549d
   15648:	0001c791 	.word	0x0001c791

0001564c <shtc_write>:
   1564c:	b580      	push	{r7, lr}
   1564e:	b082      	sub	sp, #8
   15650:	af00      	add	r7, sp, #0
   15652:	6078      	str	r0, [r7, #4]
   15654:	000a      	movs	r2, r1
   15656:	1cbb      	adds	r3, r7, #2
   15658:	801a      	strh	r2, [r3, #0]
   1565a:	4b0b      	ldr	r3, [pc, #44]	; (15688 <shtc_write+0x3c>)
   1565c:	1cba      	adds	r2, r7, #2
   1565e:	8812      	ldrh	r2, [r2, #0]
   15660:	81da      	strh	r2, [r3, #14]
   15662:	4b09      	ldr	r3, [pc, #36]	; (15688 <shtc_write+0x3c>)
   15664:	687a      	ldr	r2, [r7, #4]
   15666:	605a      	str	r2, [r3, #4]
   15668:	4b07      	ldr	r3, [pc, #28]	; (15688 <shtc_write+0x3c>)
   1566a:	2200      	movs	r2, #0
   1566c:	609a      	str	r2, [r3, #8]
   1566e:	4b06      	ldr	r3, [pc, #24]	; (15688 <shtc_write+0x3c>)
   15670:	2200      	movs	r2, #0
   15672:	819a      	strh	r2, [r3, #12]
   15674:	4b04      	ldr	r3, [pc, #16]	; (15688 <shtc_write+0x3c>)
   15676:	210a      	movs	r1, #10
   15678:	0018      	movs	r0, r3
   1567a:	4b04      	ldr	r3, [pc, #16]	; (1568c <shtc_write+0x40>)
   1567c:	4798      	blx	r3
   1567e:	0003      	movs	r3, r0
   15680:	0018      	movs	r0, r3
   15682:	46bd      	mov	sp, r7
   15684:	b002      	add	sp, #8
   15686:	bd80      	pop	{r7, pc}
   15688:	2000003c 	.word	0x2000003c
   1568c:	00013f19 	.word	0x00013f19

00015690 <shtc_read>:
   15690:	b580      	push	{r7, lr}
   15692:	b082      	sub	sp, #8
   15694:	af00      	add	r7, sp, #0
   15696:	6078      	str	r0, [r7, #4]
   15698:	000a      	movs	r2, r1
   1569a:	1cbb      	adds	r3, r7, #2
   1569c:	801a      	strh	r2, [r3, #0]
   1569e:	4b0c      	ldr	r3, [pc, #48]	; (156d0 <shtc_read+0x40>)
   156a0:	1cba      	adds	r2, r7, #2
   156a2:	8812      	ldrh	r2, [r2, #0]
   156a4:	81da      	strh	r2, [r3, #14]
   156a6:	4b0a      	ldr	r3, [pc, #40]	; (156d0 <shtc_read+0x40>)
   156a8:	687a      	ldr	r2, [r7, #4]
   156aa:	605a      	str	r2, [r3, #4]
   156ac:	4b08      	ldr	r3, [pc, #32]	; (156d0 <shtc_read+0x40>)
   156ae:	4a09      	ldr	r2, [pc, #36]	; (156d4 <shtc_read+0x44>)
   156b0:	609a      	str	r2, [r3, #8]
   156b2:	4b07      	ldr	r3, [pc, #28]	; (156d0 <shtc_read+0x40>)
   156b4:	2206      	movs	r2, #6
   156b6:	819a      	strh	r2, [r3, #12]
   156b8:	4b05      	ldr	r3, [pc, #20]	; (156d0 <shtc_read+0x40>)
   156ba:	220a      	movs	r2, #10
   156bc:	21d2      	movs	r1, #210	; 0xd2
   156be:	0018      	movs	r0, r3
   156c0:	4b05      	ldr	r3, [pc, #20]	; (156d8 <shtc_read+0x48>)
   156c2:	4798      	blx	r3
   156c4:	0003      	movs	r3, r0
   156c6:	0018      	movs	r0, r3
   156c8:	46bd      	mov	sp, r7
   156ca:	b002      	add	sp, #8
   156cc:	bd80      	pop	{r7, pc}
   156ce:	46c0      	nop			; (mov r8, r8)
   156d0:	2000003c 	.word	0x2000003c
   156d4:	2000441c 	.word	0x2000441c
   156d8:	00013ff1 	.word	0x00013ff1

000156dc <shtc_get>:
   156dc:	b580      	push	{r7, lr}
   156de:	b084      	sub	sp, #16
   156e0:	af00      	add	r7, sp, #0
   156e2:	6078      	str	r0, [r7, #4]
   156e4:	2300      	movs	r3, #0
   156e6:	60fb      	str	r3, [r7, #12]
   156e8:	4b31      	ldr	r3, [pc, #196]	; (157b0 <shtc_get+0xd4>)
   156ea:	2102      	movs	r1, #2
   156ec:	0018      	movs	r0, r3
   156ee:	4b31      	ldr	r3, [pc, #196]	; (157b4 <shtc_get+0xd8>)
   156f0:	4798      	blx	r3
   156f2:	0003      	movs	r3, r0
   156f4:	60fb      	str	r3, [r7, #12]
   156f6:	68fb      	ldr	r3, [r7, #12]
   156f8:	2b00      	cmp	r3, #0
   156fa:	d149      	bne.n	15790 <shtc_get+0xb4>
   156fc:	4b2e      	ldr	r3, [pc, #184]	; (157b8 <shtc_get+0xdc>)
   156fe:	2102      	movs	r1, #2
   15700:	0018      	movs	r0, r3
   15702:	4b2e      	ldr	r3, [pc, #184]	; (157bc <shtc_get+0xe0>)
   15704:	4798      	blx	r3
   15706:	0003      	movs	r3, r0
   15708:	60fb      	str	r3, [r7, #12]
   1570a:	68fb      	ldr	r3, [r7, #12]
   1570c:	2b00      	cmp	r3, #0
   1570e:	d141      	bne.n	15794 <shtc_get+0xb8>
   15710:	4b2b      	ldr	r3, [pc, #172]	; (157c0 <shtc_get+0xe4>)
   15712:	2102      	movs	r1, #2
   15714:	0018      	movs	r0, r3
   15716:	4b27      	ldr	r3, [pc, #156]	; (157b4 <shtc_get+0xd8>)
   15718:	4798      	blx	r3
   1571a:	4b2a      	ldr	r3, [pc, #168]	; (157c4 <shtc_get+0xe8>)
   1571c:	781b      	ldrb	r3, [r3, #0]
   1571e:	021b      	lsls	r3, r3, #8
   15720:	b21a      	sxth	r2, r3
   15722:	4b28      	ldr	r3, [pc, #160]	; (157c4 <shtc_get+0xe8>)
   15724:	785b      	ldrb	r3, [r3, #1]
   15726:	b21b      	sxth	r3, r3
   15728:	4313      	orrs	r3, r2
   1572a:	b21b      	sxth	r3, r3
   1572c:	b29a      	uxth	r2, r3
   1572e:	687b      	ldr	r3, [r7, #4]
   15730:	801a      	strh	r2, [r3, #0]
   15732:	687b      	ldr	r3, [r7, #4]
   15734:	3302      	adds	r3, #2
   15736:	4a23      	ldr	r2, [pc, #140]	; (157c4 <shtc_get+0xe8>)
   15738:	78d2      	ldrb	r2, [r2, #3]
   1573a:	0212      	lsls	r2, r2, #8
   1573c:	b211      	sxth	r1, r2
   1573e:	4a21      	ldr	r2, [pc, #132]	; (157c4 <shtc_get+0xe8>)
   15740:	7912      	ldrb	r2, [r2, #4]
   15742:	b212      	sxth	r2, r2
   15744:	430a      	orrs	r2, r1
   15746:	b212      	sxth	r2, r2
   15748:	b292      	uxth	r2, r2
   1574a:	801a      	strh	r2, [r3, #0]
   1574c:	687b      	ldr	r3, [r7, #4]
   1574e:	881b      	ldrh	r3, [r3, #0]
   15750:	001a      	movs	r2, r3
   15752:	2364      	movs	r3, #100	; 0x64
   15754:	4353      	muls	r3, r2
   15756:	2b00      	cmp	r3, #0
   15758:	da02      	bge.n	15760 <shtc_get+0x84>
   1575a:	4a1b      	ldr	r2, [pc, #108]	; (157c8 <shtc_get+0xec>)
   1575c:	4694      	mov	ip, r2
   1575e:	4463      	add	r3, ip
   15760:	141b      	asrs	r3, r3, #16
   15762:	b29a      	uxth	r2, r3
   15764:	687b      	ldr	r3, [r7, #4]
   15766:	801a      	strh	r2, [r3, #0]
   15768:	687b      	ldr	r3, [r7, #4]
   1576a:	1c9a      	adds	r2, r3, #2
   1576c:	687b      	ldr	r3, [r7, #4]
   1576e:	3302      	adds	r3, #2
   15770:	881b      	ldrh	r3, [r3, #0]
   15772:	0019      	movs	r1, r3
   15774:	23af      	movs	r3, #175	; 0xaf
   15776:	434b      	muls	r3, r1
   15778:	2b00      	cmp	r3, #0
   1577a:	da02      	bge.n	15782 <shtc_get+0xa6>
   1577c:	4912      	ldr	r1, [pc, #72]	; (157c8 <shtc_get+0xec>)
   1577e:	468c      	mov	ip, r1
   15780:	4463      	add	r3, ip
   15782:	141b      	asrs	r3, r3, #16
   15784:	b29b      	uxth	r3, r3
   15786:	3b2d      	subs	r3, #45	; 0x2d
   15788:	b29b      	uxth	r3, r3
   1578a:	8013      	strh	r3, [r2, #0]
   1578c:	2301      	movs	r3, #1
   1578e:	e00a      	b.n	157a6 <shtc_get+0xca>
   15790:	46c0      	nop			; (mov r8, r8)
   15792:	e000      	b.n	15796 <shtc_get+0xba>
   15794:	46c0      	nop			; (mov r8, r8)
   15796:	687b      	ldr	r3, [r7, #4]
   15798:	2200      	movs	r2, #0
   1579a:	801a      	strh	r2, [r3, #0]
   1579c:	687b      	ldr	r3, [r7, #4]
   1579e:	3302      	adds	r3, #2
   157a0:	2200      	movs	r2, #0
   157a2:	801a      	strh	r2, [r3, #0]
   157a4:	2300      	movs	r3, #0
   157a6:	0018      	movs	r0, r3
   157a8:	46bd      	mov	sp, r7
   157aa:	b004      	add	sp, #16
   157ac:	bd80      	pop	{r7, pc}
   157ae:	46c0      	nop			; (mov r8, r8)
   157b0:	20000030 	.word	0x20000030
   157b4:	0001564d 	.word	0x0001564d
   157b8:	20000034 	.word	0x20000034
   157bc:	00015691 	.word	0x00015691
   157c0:	20000038 	.word	0x20000038
   157c4:	2000441c 	.word	0x2000441c
   157c8:	0000ffff 	.word	0x0000ffff

000157cc <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   157cc:	b590      	push	{r4, r7, lr}
   157ce:	b08b      	sub	sp, #44	; 0x2c
   157d0:	af02      	add	r7, sp, #8
   157d2:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   157d4:	4bdb      	ldr	r3, [pc, #876]	; (15b44 <vUiHandlerTask+0x378>)
   157d6:	0018      	movs	r0, r3
   157d8:	4bdb      	ldr	r3, [pc, #876]	; (15b48 <vUiHandlerTask+0x37c>)
   157da:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   157dc:	4bdb      	ldr	r3, [pc, #876]	; (15b4c <vUiHandlerTask+0x380>)
   157de:	2200      	movs	r2, #0
   157e0:	701a      	strb	r2, [r3, #0]

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   157e2:	4bda      	ldr	r3, [pc, #872]	; (15b4c <vUiHandlerTask+0x380>)
   157e4:	781b      	ldrb	r3, [r3, #0]
   157e6:	2b01      	cmp	r3, #1
   157e8:	d006      	beq.n	157f8 <vUiHandlerTask+0x2c>
   157ea:	2b02      	cmp	r3, #2
   157ec:	d100      	bne.n	157f0 <vUiHandlerTask+0x24>
   157ee:	e17e      	b.n	15aee <vUiHandlerTask+0x322>
   157f0:	2b00      	cmp	r3, #0
   157f2:	d100      	bne.n	157f6 <vUiHandlerTask+0x2a>
   157f4:	e239      	b.n	15c6a <vUiHandlerTask+0x49e>
   157f6:	e234      	b.n	15c62 <vUiHandlerTask+0x496>
				//SeesawReadKeypad(NEO_TRELLIS_ADDR_2, &ship_loc_buffer, 1);
                break;
            }

            case (UI_STATE_PLACE_SHIP): {
				ship_loc_out_num = 0;
   157f8:	4bd5      	ldr	r3, [pc, #852]	; (15b50 <vUiHandlerTask+0x384>)
   157fa:	2200      	movs	r2, #0
   157fc:	701a      	strb	r2, [r3, #0]
				
				while(SeesawGetKeypadCount(NEO_TRELLIS_ADDR_1) != 0){
   157fe:	e008      	b.n	15812 <vUiHandlerTask+0x46>
					SeesawReadKeypad(NEO_TRELLIS_ADDR_1, &ship_fire_buffer, 1);
   15800:	4bd4      	ldr	r3, [pc, #848]	; (15b54 <vUiHandlerTask+0x388>)
   15802:	2201      	movs	r2, #1
   15804:	0019      	movs	r1, r3
   15806:	202e      	movs	r0, #46	; 0x2e
   15808:	4bd3      	ldr	r3, [pc, #844]	; (15b58 <vUiHandlerTask+0x38c>)
   1580a:	4798      	blx	r3
					vTaskDelay(30);
   1580c:	201e      	movs	r0, #30
   1580e:	4bd3      	ldr	r3, [pc, #844]	; (15b5c <vUiHandlerTask+0x390>)
   15810:	4798      	blx	r3
				while(SeesawGetKeypadCount(NEO_TRELLIS_ADDR_1) != 0){
   15812:	202e      	movs	r0, #46	; 0x2e
   15814:	4bd2      	ldr	r3, [pc, #840]	; (15b60 <vUiHandlerTask+0x394>)
   15816:	4798      	blx	r3
   15818:	1e03      	subs	r3, r0, #0
   1581a:	d1f1      	bne.n	15800 <vUiHandlerTask+0x34>
				}
				
				for(int i = 0; i < ship_num; i++){
   1581c:	2300      	movs	r3, #0
   1581e:	61fb      	str	r3, [r7, #28]
   15820:	e14b      	b.n	15aba <vUiHandlerTask+0x2ee>
					uint8_t ship_head, ship_tail;
					uint8_t cur_ship_size = 0;
   15822:	2319      	movs	r3, #25
   15824:	18fb      	adds	r3, r7, r3
   15826:	2200      	movs	r2, #0
   15828:	701a      	strb	r2, [r3, #0]
					uint8_t cur_ship_arr[MAX_SHIP_SIZE];
					
					while((cur_ship_size < ship_arr[i])){
   1582a:	e11b      	b.n	15a64 <vUiHandlerTask+0x298>
						uint8_t temp = SeesawGetKeypadCount(NEO_TRELLIS_ADDR_1);
   1582c:	230f      	movs	r3, #15
   1582e:	18fc      	adds	r4, r7, r3
   15830:	202e      	movs	r0, #46	; 0x2e
   15832:	4bcb      	ldr	r3, [pc, #812]	; (15b60 <vUiHandlerTask+0x394>)
   15834:	4798      	blx	r3
   15836:	0003      	movs	r3, r0
   15838:	7023      	strb	r3, [r4, #0]
						if(temp == 99){uiState = UI_STATE_IGNORE_PRESSES;}
   1583a:	230f      	movs	r3, #15
   1583c:	18fb      	adds	r3, r7, r3
   1583e:	781b      	ldrb	r3, [r3, #0]
   15840:	2b63      	cmp	r3, #99	; 0x63
   15842:	d102      	bne.n	1584a <vUiHandlerTask+0x7e>
   15844:	4bc1      	ldr	r3, [pc, #772]	; (15b4c <vUiHandlerTask+0x380>)
   15846:	2200      	movs	r2, #0
   15848:	701a      	strb	r2, [r3, #0]
						if(temp  == 0){vTaskDelay(50); continue;}
   1584a:	230f      	movs	r3, #15
   1584c:	18fb      	adds	r3, r7, r3
   1584e:	781b      	ldrb	r3, [r3, #0]
   15850:	2b00      	cmp	r3, #0
   15852:	d115      	bne.n	15880 <vUiHandlerTask+0xb4>
   15854:	2032      	movs	r0, #50	; 0x32
   15856:	4bc1      	ldr	r3, [pc, #772]	; (15b5c <vUiHandlerTask+0x390>)
   15858:	4798      	blx	r3
   1585a:	231b      	movs	r3, #27
   1585c:	18fb      	adds	r3, r7, r3
   1585e:	221b      	movs	r2, #27
   15860:	18ba      	adds	r2, r7, r2
   15862:	7812      	ldrb	r2, [r2, #0]
   15864:	701a      	strb	r2, [r3, #0]
   15866:	231a      	movs	r3, #26
   15868:	18fb      	adds	r3, r7, r3
   1586a:	221a      	movs	r2, #26
   1586c:	18ba      	adds	r2, r7, r2
   1586e:	7812      	ldrb	r2, [r2, #0]
   15870:	701a      	strb	r2, [r3, #0]
   15872:	2319      	movs	r3, #25
   15874:	18fb      	adds	r3, r7, r3
   15876:	2219      	movs	r2, #25
   15878:	18ba      	adds	r2, r7, r2
   1587a:	7812      	ldrb	r2, [r2, #0]
   1587c:	701a      	strb	r2, [r3, #0]
   1587e:	e0f1      	b.n	15a64 <vUiHandlerTask+0x298>
							
						if( ERROR_NONE == SeesawReadKeypad(NEO_TRELLIS_ADDR_1, &ship_loc_buffer, 1) ){
   15880:	4bb8      	ldr	r3, [pc, #736]	; (15b64 <vUiHandlerTask+0x398>)
   15882:	2201      	movs	r2, #1
   15884:	0019      	movs	r1, r3
   15886:	202e      	movs	r0, #46	; 0x2e
   15888:	4bb3      	ldr	r3, [pc, #716]	; (15b58 <vUiHandlerTask+0x38c>)
   1588a:	4798      	blx	r3
   1588c:	0001      	movs	r1, r0
   1588e:	231b      	movs	r3, #27
   15890:	18fb      	adds	r3, r7, r3
   15892:	221b      	movs	r2, #27
   15894:	18ba      	adds	r2, r7, r2
   15896:	7812      	ldrb	r2, [r2, #0]
   15898:	701a      	strb	r2, [r3, #0]
   1589a:	231a      	movs	r3, #26
   1589c:	18fb      	adds	r3, r7, r3
   1589e:	221a      	movs	r2, #26
   158a0:	18ba      	adds	r2, r7, r2
   158a2:	7812      	ldrb	r2, [r2, #0]
   158a4:	701a      	strb	r2, [r3, #0]
   158a6:	2319      	movs	r3, #25
   158a8:	18fb      	adds	r3, r7, r3
   158aa:	2219      	movs	r2, #25
   158ac:	18ba      	adds	r2, r7, r2
   158ae:	7812      	ldrb	r2, [r2, #0]
   158b0:	701a      	strb	r2, [r3, #0]
   158b2:	2900      	cmp	r1, #0
   158b4:	d000      	beq.n	158b8 <vUiHandlerTask+0xec>
   158b6:	e0d5      	b.n	15a64 <vUiHandlerTask+0x298>
							
							ship_loc_buffer = NEO_TRELLIS_SEESAW_KEY((ship_loc_buffer & 0xFD) >> 2);
   158b8:	4baa      	ldr	r3, [pc, #680]	; (15b64 <vUiHandlerTask+0x398>)
   158ba:	781b      	ldrb	r3, [r3, #0]
   158bc:	089b      	lsrs	r3, r3, #2
   158be:	b2db      	uxtb	r3, r3
   158c0:	2b00      	cmp	r3, #0
   158c2:	da00      	bge.n	158c6 <vUiHandlerTask+0xfa>
   158c4:	3307      	adds	r3, #7
   158c6:	10db      	asrs	r3, r3, #3
   158c8:	b2db      	uxtb	r3, r3
   158ca:	009b      	lsls	r3, r3, #2
   158cc:	b2da      	uxtb	r2, r3
   158ce:	4ba5      	ldr	r3, [pc, #660]	; (15b64 <vUiHandlerTask+0x398>)
   158d0:	781b      	ldrb	r3, [r3, #0]
   158d2:	089b      	lsrs	r3, r3, #2
   158d4:	b2db      	uxtb	r3, r3
   158d6:	2107      	movs	r1, #7
   158d8:	400b      	ands	r3, r1
   158da:	b2db      	uxtb	r3, r3
   158dc:	18d3      	adds	r3, r2, r3
   158de:	b2da      	uxtb	r2, r3
   158e0:	4ba0      	ldr	r3, [pc, #640]	; (15b64 <vUiHandlerTask+0x398>)
   158e2:	701a      	strb	r2, [r3, #0]
							
							if(cur_ship_size == 0){
   158e4:	2319      	movs	r3, #25
   158e6:	18fb      	adds	r3, r7, r3
   158e8:	781b      	ldrb	r3, [r3, #0]
   158ea:	2b00      	cmp	r3, #0
   158ec:	d14d      	bne.n	1598a <vUiHandlerTask+0x1be>
								if(place_tile_stat[ship_loc_buffer] == UI_PLACE_PLACED){continue;}
   158ee:	4b9d      	ldr	r3, [pc, #628]	; (15b64 <vUiHandlerTask+0x398>)
   158f0:	781b      	ldrb	r3, [r3, #0]
   158f2:	001a      	movs	r2, r3
   158f4:	4b9c      	ldr	r3, [pc, #624]	; (15b68 <vUiHandlerTask+0x39c>)
   158f6:	5c9b      	ldrb	r3, [r3, r2]
   158f8:	2b01      	cmp	r3, #1
   158fa:	d112      	bne.n	15922 <vUiHandlerTask+0x156>
   158fc:	231b      	movs	r3, #27
   158fe:	18fb      	adds	r3, r7, r3
   15900:	221b      	movs	r2, #27
   15902:	18ba      	adds	r2, r7, r2
   15904:	7812      	ldrb	r2, [r2, #0]
   15906:	701a      	strb	r2, [r3, #0]
   15908:	231a      	movs	r3, #26
   1590a:	18fb      	adds	r3, r7, r3
   1590c:	221a      	movs	r2, #26
   1590e:	18ba      	adds	r2, r7, r2
   15910:	7812      	ldrb	r2, [r2, #0]
   15912:	701a      	strb	r2, [r3, #0]
   15914:	2319      	movs	r3, #25
   15916:	18fb      	adds	r3, r7, r3
   15918:	2219      	movs	r2, #25
   1591a:	18ba      	adds	r2, r7, r2
   1591c:	7812      	ldrb	r2, [r2, #0]
   1591e:	701a      	strb	r2, [r3, #0]
   15920:	e0a0      	b.n	15a64 <vUiHandlerTask+0x298>
								cur_ship_arr[cur_ship_size] = ship_loc_buffer;
   15922:	2319      	movs	r3, #25
   15924:	18fb      	adds	r3, r7, r3
   15926:	781b      	ldrb	r3, [r3, #0]
   15928:	4a8e      	ldr	r2, [pc, #568]	; (15b64 <vUiHandlerTask+0x398>)
   1592a:	7811      	ldrb	r1, [r2, #0]
   1592c:	2208      	movs	r2, #8
   1592e:	18ba      	adds	r2, r7, r2
   15930:	54d1      	strb	r1, [r2, r3]
								place_tile_stat[ship_loc_buffer] = UI_PLACE_PLACED;
   15932:	4b8c      	ldr	r3, [pc, #560]	; (15b64 <vUiHandlerTask+0x398>)
   15934:	781b      	ldrb	r3, [r3, #0]
   15936:	001a      	movs	r2, r3
   15938:	4b8b      	ldr	r3, [pc, #556]	; (15b68 <vUiHandlerTask+0x39c>)
   1593a:	2101      	movs	r1, #1
   1593c:	5499      	strb	r1, [r3, r2]
								SeesawSetLed(NEO_TRELLIS_ADDR_1,ship_loc_buffer, 0, 0, 50);
   1593e:	4b89      	ldr	r3, [pc, #548]	; (15b64 <vUiHandlerTask+0x398>)
   15940:	7819      	ldrb	r1, [r3, #0]
   15942:	2332      	movs	r3, #50	; 0x32
   15944:	9300      	str	r3, [sp, #0]
   15946:	2300      	movs	r3, #0
   15948:	2200      	movs	r2, #0
   1594a:	202e      	movs	r0, #46	; 0x2e
   1594c:	4c87      	ldr	r4, [pc, #540]	; (15b6c <vUiHandlerTask+0x3a0>)
   1594e:	47a0      	blx	r4
								SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   15950:	202e      	movs	r0, #46	; 0x2e
   15952:	4b87      	ldr	r3, [pc, #540]	; (15b70 <vUiHandlerTask+0x3a4>)
   15954:	4798      	blx	r3
								
								ship_head = ship_loc_buffer;
   15956:	231b      	movs	r3, #27
   15958:	18fb      	adds	r3, r7, r3
   1595a:	4a82      	ldr	r2, [pc, #520]	; (15b64 <vUiHandlerTask+0x398>)
   1595c:	7812      	ldrb	r2, [r2, #0]
   1595e:	701a      	strb	r2, [r3, #0]
								ship_tail = ship_loc_buffer;
   15960:	231a      	movs	r3, #26
   15962:	18fb      	adds	r3, r7, r3
   15964:	4a7f      	ldr	r2, [pc, #508]	; (15b64 <vUiHandlerTask+0x398>)
   15966:	7812      	ldrb	r2, [r2, #0]
   15968:	701a      	strb	r2, [r3, #0]
								if(cur_ship_size != ship_arr[i]-1){
   1596a:	2319      	movs	r3, #25
   1596c:	18fb      	adds	r3, r7, r3
   1596e:	781a      	ldrb	r2, [r3, #0]
   15970:	4980      	ldr	r1, [pc, #512]	; (15b74 <vUiHandlerTask+0x3a8>)
   15972:	69fb      	ldr	r3, [r7, #28]
   15974:	18cb      	adds	r3, r1, r3
   15976:	781b      	ldrb	r3, [r3, #0]
   15978:	3b01      	subs	r3, #1
   1597a:	429a      	cmp	r2, r3
   1597c:	d06b      	beq.n	15a56 <vUiHandlerTask+0x28a>
									UiPlaceSuggest2(ship_loc_buffer);
   1597e:	4b79      	ldr	r3, [pc, #484]	; (15b64 <vUiHandlerTask+0x398>)
   15980:	781b      	ldrb	r3, [r3, #0]
   15982:	0018      	movs	r0, r3
   15984:	4b7c      	ldr	r3, [pc, #496]	; (15b78 <vUiHandlerTask+0x3ac>)
   15986:	4798      	blx	r3
   15988:	e065      	b.n	15a56 <vUiHandlerTask+0x28a>
								}
							}
							else{
								//check validity of 2nd position
								if(place_tile_stat[ship_loc_buffer] != UI_PLACE_VALID){continue;}
   1598a:	4b76      	ldr	r3, [pc, #472]	; (15b64 <vUiHandlerTask+0x398>)
   1598c:	781b      	ldrb	r3, [r3, #0]
   1598e:	001a      	movs	r2, r3
   15990:	4b75      	ldr	r3, [pc, #468]	; (15b68 <vUiHandlerTask+0x39c>)
   15992:	5c9b      	ldrb	r3, [r3, r2]
   15994:	2b00      	cmp	r3, #0
   15996:	d012      	beq.n	159be <vUiHandlerTask+0x1f2>
   15998:	231b      	movs	r3, #27
   1599a:	18fb      	adds	r3, r7, r3
   1599c:	221b      	movs	r2, #27
   1599e:	18ba      	adds	r2, r7, r2
   159a0:	7812      	ldrb	r2, [r2, #0]
   159a2:	701a      	strb	r2, [r3, #0]
   159a4:	231a      	movs	r3, #26
   159a6:	18fb      	adds	r3, r7, r3
   159a8:	221a      	movs	r2, #26
   159aa:	18ba      	adds	r2, r7, r2
   159ac:	7812      	ldrb	r2, [r2, #0]
   159ae:	701a      	strb	r2, [r3, #0]
   159b0:	2319      	movs	r3, #25
   159b2:	18fb      	adds	r3, r7, r3
   159b4:	2219      	movs	r2, #25
   159b6:	18ba      	adds	r2, r7, r2
   159b8:	7812      	ldrb	r2, [r2, #0]
   159ba:	701a      	strb	r2, [r3, #0]
   159bc:	e052      	b.n	15a64 <vUiHandlerTask+0x298>
									
								cur_ship_arr[cur_ship_size] = ship_loc_buffer;
   159be:	2319      	movs	r3, #25
   159c0:	18fb      	adds	r3, r7, r3
   159c2:	781b      	ldrb	r3, [r3, #0]
   159c4:	4a67      	ldr	r2, [pc, #412]	; (15b64 <vUiHandlerTask+0x398>)
   159c6:	7811      	ldrb	r1, [r2, #0]
   159c8:	2208      	movs	r2, #8
   159ca:	18ba      	adds	r2, r7, r2
   159cc:	54d1      	strb	r1, [r2, r3]
								place_tile_stat[ship_loc_buffer] = UI_PLACE_PLACED;
   159ce:	4b65      	ldr	r3, [pc, #404]	; (15b64 <vUiHandlerTask+0x398>)
   159d0:	781b      	ldrb	r3, [r3, #0]
   159d2:	001a      	movs	r2, r3
   159d4:	4b64      	ldr	r3, [pc, #400]	; (15b68 <vUiHandlerTask+0x39c>)
   159d6:	2101      	movs	r1, #1
   159d8:	5499      	strb	r1, [r3, r2]
								SeesawSetLed(NEO_TRELLIS_ADDR_1, ship_loc_buffer, R_PLACE_PLACED, G_PLACE_PLACED, B_PLACE_PLACED);
   159da:	4b62      	ldr	r3, [pc, #392]	; (15b64 <vUiHandlerTask+0x398>)
   159dc:	7819      	ldrb	r1, [r3, #0]
   159de:	2332      	movs	r3, #50	; 0x32
   159e0:	9300      	str	r3, [sp, #0]
   159e2:	2300      	movs	r3, #0
   159e4:	2200      	movs	r2, #0
   159e6:	202e      	movs	r0, #46	; 0x2e
   159e8:	4c60      	ldr	r4, [pc, #384]	; (15b6c <vUiHandlerTask+0x3a0>)
   159ea:	47a0      	blx	r4
								SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   159ec:	202e      	movs	r0, #46	; 0x2e
   159ee:	4b60      	ldr	r3, [pc, #384]	; (15b70 <vUiHandlerTask+0x3a4>)
   159f0:	4798      	blx	r3
								
								UiRemoveSuggest(ship_head);
   159f2:	231b      	movs	r3, #27
   159f4:	18fb      	adds	r3, r7, r3
   159f6:	781b      	ldrb	r3, [r3, #0]
   159f8:	0018      	movs	r0, r3
   159fa:	4b60      	ldr	r3, [pc, #384]	; (15b7c <vUiHandlerTask+0x3b0>)
   159fc:	4798      	blx	r3
								UiRemoveSuggest(ship_tail);
   159fe:	231a      	movs	r3, #26
   15a00:	18fb      	adds	r3, r7, r3
   15a02:	781b      	ldrb	r3, [r3, #0]
   15a04:	0018      	movs	r0, r3
   15a06:	4b5d      	ldr	r3, [pc, #372]	; (15b7c <vUiHandlerTask+0x3b0>)
   15a08:	4798      	blx	r3
								
								if(ship_loc_buffer < ship_head){ship_head = ship_loc_buffer;}
   15a0a:	4b56      	ldr	r3, [pc, #344]	; (15b64 <vUiHandlerTask+0x398>)
   15a0c:	781b      	ldrb	r3, [r3, #0]
   15a0e:	221b      	movs	r2, #27
   15a10:	18ba      	adds	r2, r7, r2
   15a12:	7812      	ldrb	r2, [r2, #0]
   15a14:	429a      	cmp	r2, r3
   15a16:	d905      	bls.n	15a24 <vUiHandlerTask+0x258>
   15a18:	231b      	movs	r3, #27
   15a1a:	18fb      	adds	r3, r7, r3
   15a1c:	4a51      	ldr	r2, [pc, #324]	; (15b64 <vUiHandlerTask+0x398>)
   15a1e:	7812      	ldrb	r2, [r2, #0]
   15a20:	701a      	strb	r2, [r3, #0]
   15a22:	e004      	b.n	15a2e <vUiHandlerTask+0x262>
								else{ship_tail = ship_loc_buffer;}
   15a24:	231a      	movs	r3, #26
   15a26:	18fb      	adds	r3, r7, r3
   15a28:	4a4e      	ldr	r2, [pc, #312]	; (15b64 <vUiHandlerTask+0x398>)
   15a2a:	7812      	ldrb	r2, [r2, #0]
   15a2c:	701a      	strb	r2, [r3, #0]
								
								if(cur_ship_size != ship_arr[i]-1){
   15a2e:	2319      	movs	r3, #25
   15a30:	18fb      	adds	r3, r7, r3
   15a32:	781a      	ldrb	r2, [r3, #0]
   15a34:	494f      	ldr	r1, [pc, #316]	; (15b74 <vUiHandlerTask+0x3a8>)
   15a36:	69fb      	ldr	r3, [r7, #28]
   15a38:	18cb      	adds	r3, r1, r3
   15a3a:	781b      	ldrb	r3, [r3, #0]
   15a3c:	3b01      	subs	r3, #1
   15a3e:	429a      	cmp	r2, r3
   15a40:	d009      	beq.n	15a56 <vUiHandlerTask+0x28a>
									UiPlaceSuggest3(ship_head,ship_tail);
   15a42:	231a      	movs	r3, #26
   15a44:	18fb      	adds	r3, r7, r3
   15a46:	781a      	ldrb	r2, [r3, #0]
   15a48:	231b      	movs	r3, #27
   15a4a:	18fb      	adds	r3, r7, r3
   15a4c:	781b      	ldrb	r3, [r3, #0]
   15a4e:	0011      	movs	r1, r2
   15a50:	0018      	movs	r0, r3
   15a52:	4b4b      	ldr	r3, [pc, #300]	; (15b80 <vUiHandlerTask+0x3b4>)
   15a54:	4798      	blx	r3
								}
							}
							cur_ship_size++;
   15a56:	2319      	movs	r3, #25
   15a58:	18fb      	adds	r3, r7, r3
   15a5a:	781a      	ldrb	r2, [r3, #0]
   15a5c:	2319      	movs	r3, #25
   15a5e:	18fb      	adds	r3, r7, r3
   15a60:	3201      	adds	r2, #1
   15a62:	701a      	strb	r2, [r3, #0]
					while((cur_ship_size < ship_arr[i])){
   15a64:	4a43      	ldr	r2, [pc, #268]	; (15b74 <vUiHandlerTask+0x3a8>)
   15a66:	69fb      	ldr	r3, [r7, #28]
   15a68:	18d3      	adds	r3, r2, r3
   15a6a:	781b      	ldrb	r3, [r3, #0]
   15a6c:	2219      	movs	r2, #25
   15a6e:	18ba      	adds	r2, r7, r2
   15a70:	7812      	ldrb	r2, [r2, #0]
   15a72:	429a      	cmp	r2, r3
   15a74:	d200      	bcs.n	15a78 <vUiHandlerTask+0x2ac>
   15a76:	e6d9      	b.n	1582c <vUiHandlerTask+0x60>
						}
							
					}
					
					for(int j = 0; j < ship_arr[i];j++){
   15a78:	2300      	movs	r3, #0
   15a7a:	617b      	str	r3, [r7, #20]
   15a7c:	e012      	b.n	15aa4 <vUiHandlerTask+0x2d8>
						ship_loc_out[ship_loc_out_num] = cur_ship_arr[j];
   15a7e:	4b34      	ldr	r3, [pc, #208]	; (15b50 <vUiHandlerTask+0x384>)
   15a80:	781b      	ldrb	r3, [r3, #0]
   15a82:	0019      	movs	r1, r3
   15a84:	2308      	movs	r3, #8
   15a86:	18fa      	adds	r2, r7, r3
   15a88:	697b      	ldr	r3, [r7, #20]
   15a8a:	18d3      	adds	r3, r2, r3
   15a8c:	781a      	ldrb	r2, [r3, #0]
   15a8e:	4b3d      	ldr	r3, [pc, #244]	; (15b84 <vUiHandlerTask+0x3b8>)
   15a90:	545a      	strb	r2, [r3, r1]
						ship_loc_out_num++;
   15a92:	4b2f      	ldr	r3, [pc, #188]	; (15b50 <vUiHandlerTask+0x384>)
   15a94:	781b      	ldrb	r3, [r3, #0]
   15a96:	3301      	adds	r3, #1
   15a98:	b2da      	uxtb	r2, r3
   15a9a:	4b2d      	ldr	r3, [pc, #180]	; (15b50 <vUiHandlerTask+0x384>)
   15a9c:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < ship_arr[i];j++){
   15a9e:	697b      	ldr	r3, [r7, #20]
   15aa0:	3301      	adds	r3, #1
   15aa2:	617b      	str	r3, [r7, #20]
   15aa4:	4a33      	ldr	r2, [pc, #204]	; (15b74 <vUiHandlerTask+0x3a8>)
   15aa6:	69fb      	ldr	r3, [r7, #28]
   15aa8:	18d3      	adds	r3, r2, r3
   15aaa:	781b      	ldrb	r3, [r3, #0]
   15aac:	001a      	movs	r2, r3
   15aae:	697b      	ldr	r3, [r7, #20]
   15ab0:	429a      	cmp	r2, r3
   15ab2:	dce4      	bgt.n	15a7e <vUiHandlerTask+0x2b2>
				for(int i = 0; i < ship_num; i++){
   15ab4:	69fb      	ldr	r3, [r7, #28]
   15ab6:	3301      	adds	r3, #1
   15ab8:	61fb      	str	r3, [r7, #28]
   15aba:	4b33      	ldr	r3, [pc, #204]	; (15b88 <vUiHandlerTask+0x3bc>)
   15abc:	781b      	ldrb	r3, [r3, #0]
   15abe:	001a      	movs	r2, r3
   15ac0:	69fb      	ldr	r3, [r7, #28]
   15ac2:	429a      	cmp	r2, r3
   15ac4:	dd00      	ble.n	15ac8 <vUiHandlerTask+0x2fc>
   15ac6:	e6ac      	b.n	15822 <vUiHandlerTask+0x56>
					}
					
				}
				
				
				WifiSendPlaceData(ship_loc_out, ship_loc_out_num);
   15ac8:	4b21      	ldr	r3, [pc, #132]	; (15b50 <vUiHandlerTask+0x384>)
   15aca:	781a      	ldrb	r2, [r3, #0]
   15acc:	4b2d      	ldr	r3, [pc, #180]	; (15b84 <vUiHandlerTask+0x3b8>)
   15ace:	0011      	movs	r1, r2
   15ad0:	0018      	movs	r0, r3
   15ad2:	4b2e      	ldr	r3, [pc, #184]	; (15b8c <vUiHandlerTask+0x3c0>)
   15ad4:	4798      	blx	r3
				SetPlacementStatus(true);
   15ad6:	2001      	movs	r0, #1
   15ad8:	4b2d      	ldr	r3, [pc, #180]	; (15b90 <vUiHandlerTask+0x3c4>)
   15ada:	4798      	blx	r3
				//ConcatToArrString(ship_loc_out, ship_loc_out_num, stringOut);
				//LogMessage(LOG_DEBUG_LVL, stringOut);
				
				uiState = UI_STATE_IGNORE_PRESSES;
   15adc:	4b1b      	ldr	r3, [pc, #108]	; (15b4c <vUiHandlerTask+0x380>)
   15ade:	2200      	movs	r2, #0
   15ae0:	701a      	strb	r2, [r3, #0]
				LogMessage(LOG_DEBUG_LVL, "Placement finished! \r\n");
   15ae2:	4b2c      	ldr	r3, [pc, #176]	; (15b94 <vUiHandlerTask+0x3c8>)
   15ae4:	0019      	movs	r1, r3
   15ae6:	2001      	movs	r0, #1
   15ae8:	4b2b      	ldr	r3, [pc, #172]	; (15b98 <vUiHandlerTask+0x3cc>)
   15aea:	4798      	blx	r3
                break;
   15aec:	e0be      	b.n	15c6c <vUiHandlerTask+0x4a0>
            }

            case (UI_STATE_HANDLE_SHOOT): {
				
				uint8_t ship_fire;
				uint8_t temp = SeesawGetKeypadCount(NEO_TRELLIS_ADDR_2);
   15aee:	2312      	movs	r3, #18
   15af0:	18fc      	adds	r4, r7, r3
   15af2:	202f      	movs	r0, #47	; 0x2f
   15af4:	4b1a      	ldr	r3, [pc, #104]	; (15b60 <vUiHandlerTask+0x394>)
   15af6:	4798      	blx	r3
   15af8:	0003      	movs	r3, r0
   15afa:	7023      	strb	r3, [r4, #0]
				uint8_t count = 0;
   15afc:	2313      	movs	r3, #19
   15afe:	18fb      	adds	r3, r7, r3
   15b00:	2200      	movs	r2, #0
   15b02:	701a      	strb	r2, [r3, #0]
				if(temp == 99){uiState = UI_STATE_IGNORE_PRESSES;}
   15b04:	2312      	movs	r3, #18
   15b06:	18fb      	adds	r3, r7, r3
   15b08:	781b      	ldrb	r3, [r3, #0]
   15b0a:	2b63      	cmp	r3, #99	; 0x63
   15b0c:	d102      	bne.n	15b14 <vUiHandlerTask+0x348>
   15b0e:	4b0f      	ldr	r3, [pc, #60]	; (15b4c <vUiHandlerTask+0x380>)
   15b10:	2200      	movs	r2, #0
   15b12:	701a      	strb	r2, [r3, #0]
				if(temp  == 0){vTaskDelay(50); continue;}
   15b14:	2312      	movs	r3, #18
   15b16:	18fb      	adds	r3, r7, r3
   15b18:	781b      	ldrb	r3, [r3, #0]
   15b1a:	2b00      	cmp	r3, #0
   15b1c:	d10c      	bne.n	15b38 <vUiHandlerTask+0x36c>
   15b1e:	2032      	movs	r0, #50	; 0x32
   15b20:	4b0e      	ldr	r3, [pc, #56]	; (15b5c <vUiHandlerTask+0x390>)
   15b22:	4798      	blx	r3
   15b24:	e0a5      	b.n	15c72 <vUiHandlerTask+0x4a6>
				
				
				while(SeesawGetKeypadCount(NEO_TRELLIS_ADDR_2) != 0){
					SeesawReadKeypad(NEO_TRELLIS_ADDR_2, &ship_fire_buffer, 1);
   15b26:	4b0b      	ldr	r3, [pc, #44]	; (15b54 <vUiHandlerTask+0x388>)
   15b28:	2201      	movs	r2, #1
   15b2a:	0019      	movs	r1, r3
   15b2c:	202f      	movs	r0, #47	; 0x2f
   15b2e:	4b0a      	ldr	r3, [pc, #40]	; (15b58 <vUiHandlerTask+0x38c>)
   15b30:	4798      	blx	r3
					vTaskDelay(30);
   15b32:	201e      	movs	r0, #30
   15b34:	4b09      	ldr	r3, [pc, #36]	; (15b5c <vUiHandlerTask+0x390>)
   15b36:	4798      	blx	r3
				while(SeesawGetKeypadCount(NEO_TRELLIS_ADDR_2) != 0){
   15b38:	202f      	movs	r0, #47	; 0x2f
   15b3a:	4b09      	ldr	r3, [pc, #36]	; (15b60 <vUiHandlerTask+0x394>)
   15b3c:	4798      	blx	r3
   15b3e:	1e03      	subs	r3, r0, #0
   15b40:	d1f1      	bne.n	15b26 <vUiHandlerTask+0x35a>
				}
				
				while(count < 1) {
   15b42:	e080      	b.n	15c46 <vUiHandlerTask+0x47a>
   15b44:	00036538 	.word	0x00036538
   15b48:	0001e3e5 	.word	0x0001e3e5
   15b4c:	2000443a 	.word	0x2000443a
   15b50:	2000044c 	.word	0x2000044c
   15b54:	20004439 	.word	0x20004439
   15b58:	00015275 	.word	0x00015275
   15b5c:	0001c791 	.word	0x0001c791
   15b60:	000151f9 	.word	0x000151f9
   15b64:	20004424 	.word	0x20004424
   15b68:	2000004c 	.word	0x2000004c
   15b6c:	000153cd 	.word	0x000153cd
   15b70:	0001549d 	.word	0x0001549d
   15b74:	20004388 	.word	0x20004388
   15b78:	00015d41 	.word	0x00015d41
   15b7c:	00016021 	.word	0x00016021
   15b80:	00015e7d 	.word	0x00015e7d
   15b84:	20004428 	.word	0x20004428
   15b88:	20004385 	.word	0x20004385
   15b8c:	000177e1 	.word	0x000177e1
   15b90:	00013859 	.word	0x00013859
   15b94:	0003654c 	.word	0x0003654c
   15b98:	0001e4d1 	.word	0x0001e4d1
					uint8_t temp = SeesawGetKeypadCount(NEO_TRELLIS_ADDR_2);
   15b9c:	2311      	movs	r3, #17
   15b9e:	18fc      	adds	r4, r7, r3
   15ba0:	202f      	movs	r0, #47	; 0x2f
   15ba2:	4b34      	ldr	r3, [pc, #208]	; (15c74 <vUiHandlerTask+0x4a8>)
   15ba4:	4798      	blx	r3
   15ba6:	0003      	movs	r3, r0
   15ba8:	7023      	strb	r3, [r4, #0]
					if(temp == 99){uiState = UI_STATE_IGNORE_PRESSES;}
   15baa:	2311      	movs	r3, #17
   15bac:	18fb      	adds	r3, r7, r3
   15bae:	781b      	ldrb	r3, [r3, #0]
   15bb0:	2b63      	cmp	r3, #99	; 0x63
   15bb2:	d102      	bne.n	15bba <vUiHandlerTask+0x3ee>
   15bb4:	4b30      	ldr	r3, [pc, #192]	; (15c78 <vUiHandlerTask+0x4ac>)
   15bb6:	2200      	movs	r2, #0
   15bb8:	701a      	strb	r2, [r3, #0]
					if(temp  == 0){vTaskDelay(50); continue;}
   15bba:	2311      	movs	r3, #17
   15bbc:	18fb      	adds	r3, r7, r3
   15bbe:	781b      	ldrb	r3, [r3, #0]
   15bc0:	2b00      	cmp	r3, #0
   15bc2:	d109      	bne.n	15bd8 <vUiHandlerTask+0x40c>
   15bc4:	2032      	movs	r0, #50	; 0x32
   15bc6:	4b2d      	ldr	r3, [pc, #180]	; (15c7c <vUiHandlerTask+0x4b0>)
   15bc8:	4798      	blx	r3
   15bca:	2313      	movs	r3, #19
   15bcc:	18fb      	adds	r3, r7, r3
   15bce:	2213      	movs	r2, #19
   15bd0:	18ba      	adds	r2, r7, r2
   15bd2:	7812      	ldrb	r2, [r2, #0]
   15bd4:	701a      	strb	r2, [r3, #0]
   15bd6:	e036      	b.n	15c46 <vUiHandlerTask+0x47a>
					
					if( ERROR_NONE == SeesawReadKeypad(NEO_TRELLIS_ADDR_2, &ship_fire_buffer, 1) ){
   15bd8:	4b29      	ldr	r3, [pc, #164]	; (15c80 <vUiHandlerTask+0x4b4>)
   15bda:	2201      	movs	r2, #1
   15bdc:	0019      	movs	r1, r3
   15bde:	202f      	movs	r0, #47	; 0x2f
   15be0:	4b28      	ldr	r3, [pc, #160]	; (15c84 <vUiHandlerTask+0x4b8>)
   15be2:	4798      	blx	r3
   15be4:	0001      	movs	r1, r0
   15be6:	2313      	movs	r3, #19
   15be8:	18fb      	adds	r3, r7, r3
   15bea:	2213      	movs	r2, #19
   15bec:	18ba      	adds	r2, r7, r2
   15bee:	7812      	ldrb	r2, [r2, #0]
   15bf0:	701a      	strb	r2, [r3, #0]
   15bf2:	2900      	cmp	r1, #0
   15bf4:	d127      	bne.n	15c46 <vUiHandlerTask+0x47a>
						ship_fire_buffer = NEO_TRELLIS_SEESAW_KEY((ship_fire_buffer & 0xFD) >> 2);
   15bf6:	4b22      	ldr	r3, [pc, #136]	; (15c80 <vUiHandlerTask+0x4b4>)
   15bf8:	781b      	ldrb	r3, [r3, #0]
   15bfa:	089b      	lsrs	r3, r3, #2
   15bfc:	b2db      	uxtb	r3, r3
   15bfe:	2b00      	cmp	r3, #0
   15c00:	da00      	bge.n	15c04 <vUiHandlerTask+0x438>
   15c02:	3307      	adds	r3, #7
   15c04:	10db      	asrs	r3, r3, #3
   15c06:	b2db      	uxtb	r3, r3
   15c08:	009b      	lsls	r3, r3, #2
   15c0a:	b2da      	uxtb	r2, r3
   15c0c:	4b1c      	ldr	r3, [pc, #112]	; (15c80 <vUiHandlerTask+0x4b4>)
   15c0e:	781b      	ldrb	r3, [r3, #0]
   15c10:	089b      	lsrs	r3, r3, #2
   15c12:	b2db      	uxtb	r3, r3
   15c14:	2107      	movs	r1, #7
   15c16:	400b      	ands	r3, r1
   15c18:	b2db      	uxtb	r3, r3
   15c1a:	18d3      	adds	r3, r2, r3
   15c1c:	b2da      	uxtb	r2, r3
   15c1e:	4b18      	ldr	r3, [pc, #96]	; (15c80 <vUiHandlerTask+0x4b4>)
   15c20:	701a      	strb	r2, [r3, #0]
						WifiSendFireData(ship_fire_buffer, 1);
   15c22:	4b17      	ldr	r3, [pc, #92]	; (15c80 <vUiHandlerTask+0x4b4>)
   15c24:	781b      	ldrb	r3, [r3, #0]
   15c26:	2101      	movs	r1, #1
   15c28:	0018      	movs	r0, r3
   15c2a:	4b17      	ldr	r3, [pc, #92]	; (15c88 <vUiHandlerTask+0x4bc>)
   15c2c:	4798      	blx	r3
						
						ship_fire = ship_fire_buffer;
   15c2e:	2310      	movs	r3, #16
   15c30:	18fb      	adds	r3, r7, r3
   15c32:	4a13      	ldr	r2, [pc, #76]	; (15c80 <vUiHandlerTask+0x4b4>)
   15c34:	7812      	ldrb	r2, [r2, #0]
   15c36:	701a      	strb	r2, [r3, #0]
						count ++;
   15c38:	2313      	movs	r3, #19
   15c3a:	18fb      	adds	r3, r7, r3
   15c3c:	781a      	ldrb	r2, [r3, #0]
   15c3e:	2313      	movs	r3, #19
   15c40:	18fb      	adds	r3, r7, r3
   15c42:	3201      	adds	r2, #1
   15c44:	701a      	strb	r2, [r3, #0]
				while(count < 1) {
   15c46:	2313      	movs	r3, #19
   15c48:	18fb      	adds	r3, r7, r3
   15c4a:	781b      	ldrb	r3, [r3, #0]
   15c4c:	2b00      	cmp	r3, #0
   15c4e:	d0a5      	beq.n	15b9c <vUiHandlerTask+0x3d0>
					}
				}
				SetFireStatus();
   15c50:	4b0e      	ldr	r3, [pc, #56]	; (15c8c <vUiHandlerTask+0x4c0>)
   15c52:	4798      	blx	r3
				uiState = UI_STATE_IGNORE_PRESSES;
   15c54:	4b08      	ldr	r3, [pc, #32]	; (15c78 <vUiHandlerTask+0x4ac>)
   15c56:	2200      	movs	r2, #0
   15c58:	701a      	strb	r2, [r3, #0]
				vTaskDelay(50);
   15c5a:	2032      	movs	r0, #50	; 0x32
   15c5c:	4b07      	ldr	r3, [pc, #28]	; (15c7c <vUiHandlerTask+0x4b0>)
   15c5e:	4798      	blx	r3
				break;
   15c60:	e004      	b.n	15c6c <vUiHandlerTask+0x4a0>
			}

            default:  // In case of unforeseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_IGNORE_PRESSES;
   15c62:	4b05      	ldr	r3, [pc, #20]	; (15c78 <vUiHandlerTask+0x4ac>)
   15c64:	2200      	movs	r2, #0
   15c66:	701a      	strb	r2, [r3, #0]
                break;
   15c68:	e000      	b.n	15c6c <vUiHandlerTask+0x4a0>
                break;
   15c6a:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   15c6c:	2032      	movs	r0, #50	; 0x32
   15c6e:	4b03      	ldr	r3, [pc, #12]	; (15c7c <vUiHandlerTask+0x4b0>)
   15c70:	4798      	blx	r3
        switch (uiState) {
   15c72:	e5b6      	b.n	157e2 <vUiHandlerTask+0x16>
   15c74:	000151f9 	.word	0x000151f9
   15c78:	2000443a 	.word	0x2000443a
   15c7c:	0001c791 	.word	0x0001c791
   15c80:	20004439 	.word	0x20004439
   15c84:	00015275 	.word	0x00015275
   15c88:	000178d5 	.word	0x000178d5
   15c8c:	00013879 	.word	0x00013879

00015c90 <UiPlaceInit>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiPlaceInit(uint8_t *shiparr_in,uint8_t ship_num_in)
{
   15c90:	b590      	push	{r4, r7, lr}
   15c92:	b087      	sub	sp, #28
   15c94:	af02      	add	r7, sp, #8
   15c96:	6078      	str	r0, [r7, #4]
   15c98:	000a      	movs	r2, r1
   15c9a:	1cfb      	adds	r3, r7, #3
   15c9c:	701a      	strb	r2, [r3, #0]
	LogMessage(LOG_DEBUG_LVL, "Placement started! \r\n");
   15c9e:	4b1f      	ldr	r3, [pc, #124]	; (15d1c <UiPlaceInit+0x8c>)
   15ca0:	0019      	movs	r1, r3
   15ca2:	2001      	movs	r0, #1
   15ca4:	4b1e      	ldr	r3, [pc, #120]	; (15d20 <UiPlaceInit+0x90>)
   15ca6:	4798      	blx	r3
	memcpy (ship_arr, shiparr_in, ship_num * sizeof (uint8_t));
   15ca8:	4b1e      	ldr	r3, [pc, #120]	; (15d24 <UiPlaceInit+0x94>)
   15caa:	781b      	ldrb	r3, [r3, #0]
   15cac:	001a      	movs	r2, r3
   15cae:	6879      	ldr	r1, [r7, #4]
   15cb0:	4b1d      	ldr	r3, [pc, #116]	; (15d28 <UiPlaceInit+0x98>)
   15cb2:	0018      	movs	r0, r3
   15cb4:	4b1d      	ldr	r3, [pc, #116]	; (15d2c <UiPlaceInit+0x9c>)
   15cb6:	4798      	blx	r3
	ship_num = ship_num_in;
   15cb8:	4b1a      	ldr	r3, [pc, #104]	; (15d24 <UiPlaceInit+0x94>)
   15cba:	1cfa      	adds	r2, r7, #3
   15cbc:	7812      	ldrb	r2, [r2, #0]
   15cbe:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < MAX_TILE; i++){
   15cc0:	2300      	movs	r3, #0
   15cc2:	60fb      	str	r3, [r7, #12]
   15cc4:	e019      	b.n	15cfa <UiPlaceInit+0x6a>
		SeesawSetLed(NEO_TRELLIS_ADDR_1,i,R_PLACE_INVALID,G_PLACE_INVALID,B_PLACE_INVALID);
   15cc6:	68fb      	ldr	r3, [r7, #12]
   15cc8:	b2d9      	uxtb	r1, r3
   15cca:	2300      	movs	r3, #0
   15ccc:	9300      	str	r3, [sp, #0]
   15cce:	2300      	movs	r3, #0
   15cd0:	2200      	movs	r2, #0
   15cd2:	202e      	movs	r0, #46	; 0x2e
   15cd4:	4c16      	ldr	r4, [pc, #88]	; (15d30 <UiPlaceInit+0xa0>)
   15cd6:	47a0      	blx	r4
		SeesawSetLed(NEO_TRELLIS_ADDR_2,i,R_PLACE_INVALID,G_PLACE_INVALID,B_PLACE_INVALID);
   15cd8:	68fb      	ldr	r3, [r7, #12]
   15cda:	b2d9      	uxtb	r1, r3
   15cdc:	2300      	movs	r3, #0
   15cde:	9300      	str	r3, [sp, #0]
   15ce0:	2300      	movs	r3, #0
   15ce2:	2200      	movs	r2, #0
   15ce4:	202f      	movs	r0, #47	; 0x2f
   15ce6:	4c12      	ldr	r4, [pc, #72]	; (15d30 <UiPlaceInit+0xa0>)
   15ce8:	47a0      	blx	r4
		place_tile_stat[i] = UI_PLACE_INVALID;
   15cea:	4a12      	ldr	r2, [pc, #72]	; (15d34 <UiPlaceInit+0xa4>)
   15cec:	68fb      	ldr	r3, [r7, #12]
   15cee:	18d3      	adds	r3, r2, r3
   15cf0:	2202      	movs	r2, #2
   15cf2:	701a      	strb	r2, [r3, #0]
	for(int i =0 ; i < MAX_TILE; i++){
   15cf4:	68fb      	ldr	r3, [r7, #12]
   15cf6:	3301      	adds	r3, #1
   15cf8:	60fb      	str	r3, [r7, #12]
   15cfa:	68fb      	ldr	r3, [r7, #12]
   15cfc:	2b0f      	cmp	r3, #15
   15cfe:	dde2      	ble.n	15cc6 <UiPlaceInit+0x36>
	}
	SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   15d00:	202e      	movs	r0, #46	; 0x2e
   15d02:	4b0d      	ldr	r3, [pc, #52]	; (15d38 <UiPlaceInit+0xa8>)
   15d04:	4798      	blx	r3
	SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_2);
   15d06:	202f      	movs	r0, #47	; 0x2f
   15d08:	4b0b      	ldr	r3, [pc, #44]	; (15d38 <UiPlaceInit+0xa8>)
   15d0a:	4798      	blx	r3
	uiState = UI_STATE_PLACE_SHIP;
   15d0c:	4b0b      	ldr	r3, [pc, #44]	; (15d3c <UiPlaceInit+0xac>)
   15d0e:	2201      	movs	r2, #1
   15d10:	701a      	strb	r2, [r3, #0]
}
   15d12:	46c0      	nop			; (mov r8, r8)
   15d14:	46bd      	mov	sp, r7
   15d16:	b005      	add	sp, #20
   15d18:	bd90      	pop	{r4, r7, pc}
   15d1a:	46c0      	nop			; (mov r8, r8)
   15d1c:	00036564 	.word	0x00036564
   15d20:	0001e4d1 	.word	0x0001e4d1
   15d24:	20004385 	.word	0x20004385
   15d28:	20004388 	.word	0x20004388
   15d2c:	00034c09 	.word	0x00034c09
   15d30:	000153cd 	.word	0x000153cd
   15d34:	2000004c 	.word	0x2000004c
   15d38:	0001549d 	.word	0x0001549d
   15d3c:	2000443a 	.word	0x2000443a

00015d40 <UiPlaceSuggest2>:

static void UiPlaceSuggest2(uint8_t loc)
{
   15d40:	b590      	push	{r4, r7, lr}
   15d42:	b087      	sub	sp, #28
   15d44:	af02      	add	r7, sp, #8
   15d46:	0002      	movs	r2, r0
   15d48:	1dfb      	adds	r3, r7, #7
   15d4a:	701a      	strb	r2, [r3, #0]
	uint8_t rec_loc;
	if(loc > 3){
   15d4c:	1dfb      	adds	r3, r7, #7
   15d4e:	781b      	ldrb	r3, [r3, #0]
   15d50:	2b03      	cmp	r3, #3
   15d52:	d91c      	bls.n	15d8e <UiPlaceSuggest2+0x4e>
		rec_loc = loc - 4;
   15d54:	230f      	movs	r3, #15
   15d56:	18fb      	adds	r3, r7, r3
   15d58:	1dfa      	adds	r2, r7, #7
   15d5a:	7812      	ldrb	r2, [r2, #0]
   15d5c:	3a04      	subs	r2, #4
   15d5e:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15d60:	230f      	movs	r3, #15
   15d62:	18fb      	adds	r3, r7, r3
   15d64:	781b      	ldrb	r3, [r3, #0]
   15d66:	4a42      	ldr	r2, [pc, #264]	; (15e70 <UiPlaceSuggest2+0x130>)
   15d68:	5cd3      	ldrb	r3, [r2, r3]
   15d6a:	2b01      	cmp	r3, #1
   15d6c:	d00f      	beq.n	15d8e <UiPlaceSuggest2+0x4e>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15d6e:	230f      	movs	r3, #15
   15d70:	18fb      	adds	r3, r7, r3
   15d72:	781b      	ldrb	r3, [r3, #0]
   15d74:	4a3e      	ldr	r2, [pc, #248]	; (15e70 <UiPlaceSuggest2+0x130>)
   15d76:	2100      	movs	r1, #0
   15d78:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(NEO_TRELLIS_ADDR_1,rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15d7a:	230f      	movs	r3, #15
   15d7c:	18fb      	adds	r3, r7, r3
   15d7e:	7819      	ldrb	r1, [r3, #0]
   15d80:	2302      	movs	r3, #2
   15d82:	9300      	str	r3, [sp, #0]
   15d84:	2332      	movs	r3, #50	; 0x32
   15d86:	2232      	movs	r2, #50	; 0x32
   15d88:	202e      	movs	r0, #46	; 0x2e
   15d8a:	4c3a      	ldr	r4, [pc, #232]	; (15e74 <UiPlaceSuggest2+0x134>)
   15d8c:	47a0      	blx	r4
		}
	}
	
	if(loc < 12){
   15d8e:	1dfb      	adds	r3, r7, #7
   15d90:	781b      	ldrb	r3, [r3, #0]
   15d92:	2b0b      	cmp	r3, #11
   15d94:	d81c      	bhi.n	15dd0 <UiPlaceSuggest2+0x90>
		rec_loc = loc + 4;
   15d96:	230f      	movs	r3, #15
   15d98:	18fb      	adds	r3, r7, r3
   15d9a:	1dfa      	adds	r2, r7, #7
   15d9c:	7812      	ldrb	r2, [r2, #0]
   15d9e:	3204      	adds	r2, #4
   15da0:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15da2:	230f      	movs	r3, #15
   15da4:	18fb      	adds	r3, r7, r3
   15da6:	781b      	ldrb	r3, [r3, #0]
   15da8:	4a31      	ldr	r2, [pc, #196]	; (15e70 <UiPlaceSuggest2+0x130>)
   15daa:	5cd3      	ldrb	r3, [r2, r3]
   15dac:	2b01      	cmp	r3, #1
   15dae:	d00f      	beq.n	15dd0 <UiPlaceSuggest2+0x90>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15db0:	230f      	movs	r3, #15
   15db2:	18fb      	adds	r3, r7, r3
   15db4:	781b      	ldrb	r3, [r3, #0]
   15db6:	4a2e      	ldr	r2, [pc, #184]	; (15e70 <UiPlaceSuggest2+0x130>)
   15db8:	2100      	movs	r1, #0
   15dba:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(NEO_TRELLIS_ADDR_1,rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15dbc:	230f      	movs	r3, #15
   15dbe:	18fb      	adds	r3, r7, r3
   15dc0:	7819      	ldrb	r1, [r3, #0]
   15dc2:	2302      	movs	r3, #2
   15dc4:	9300      	str	r3, [sp, #0]
   15dc6:	2332      	movs	r3, #50	; 0x32
   15dc8:	2232      	movs	r2, #50	; 0x32
   15dca:	202e      	movs	r0, #46	; 0x2e
   15dcc:	4c29      	ldr	r4, [pc, #164]	; (15e74 <UiPlaceSuggest2+0x134>)
   15dce:	47a0      	blx	r4
		}
	}
	
	if(loc % 4 != 3){
   15dd0:	1dfb      	adds	r3, r7, #7
   15dd2:	781b      	ldrb	r3, [r3, #0]
   15dd4:	2203      	movs	r2, #3
   15dd6:	4013      	ands	r3, r2
   15dd8:	b2db      	uxtb	r3, r3
   15dda:	2b03      	cmp	r3, #3
   15ddc:	d01c      	beq.n	15e18 <UiPlaceSuggest2+0xd8>
		rec_loc = loc + 1;
   15dde:	230f      	movs	r3, #15
   15de0:	18fb      	adds	r3, r7, r3
   15de2:	1dfa      	adds	r2, r7, #7
   15de4:	7812      	ldrb	r2, [r2, #0]
   15de6:	3201      	adds	r2, #1
   15de8:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15dea:	230f      	movs	r3, #15
   15dec:	18fb      	adds	r3, r7, r3
   15dee:	781b      	ldrb	r3, [r3, #0]
   15df0:	4a1f      	ldr	r2, [pc, #124]	; (15e70 <UiPlaceSuggest2+0x130>)
   15df2:	5cd3      	ldrb	r3, [r2, r3]
   15df4:	2b01      	cmp	r3, #1
   15df6:	d00f      	beq.n	15e18 <UiPlaceSuggest2+0xd8>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15df8:	230f      	movs	r3, #15
   15dfa:	18fb      	adds	r3, r7, r3
   15dfc:	781b      	ldrb	r3, [r3, #0]
   15dfe:	4a1c      	ldr	r2, [pc, #112]	; (15e70 <UiPlaceSuggest2+0x130>)
   15e00:	2100      	movs	r1, #0
   15e02:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(NEO_TRELLIS_ADDR_1,rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15e04:	230f      	movs	r3, #15
   15e06:	18fb      	adds	r3, r7, r3
   15e08:	7819      	ldrb	r1, [r3, #0]
   15e0a:	2302      	movs	r3, #2
   15e0c:	9300      	str	r3, [sp, #0]
   15e0e:	2332      	movs	r3, #50	; 0x32
   15e10:	2232      	movs	r2, #50	; 0x32
   15e12:	202e      	movs	r0, #46	; 0x2e
   15e14:	4c17      	ldr	r4, [pc, #92]	; (15e74 <UiPlaceSuggest2+0x134>)
   15e16:	47a0      	blx	r4
		}
	}
	
	if(loc % 4 != 0){
   15e18:	1dfb      	adds	r3, r7, #7
   15e1a:	781b      	ldrb	r3, [r3, #0]
   15e1c:	2203      	movs	r2, #3
   15e1e:	4013      	ands	r3, r2
   15e20:	b2db      	uxtb	r3, r3
   15e22:	2b00      	cmp	r3, #0
   15e24:	d01c      	beq.n	15e60 <UiPlaceSuggest2+0x120>
		rec_loc = loc - 1;
   15e26:	230f      	movs	r3, #15
   15e28:	18fb      	adds	r3, r7, r3
   15e2a:	1dfa      	adds	r2, r7, #7
   15e2c:	7812      	ldrb	r2, [r2, #0]
   15e2e:	3a01      	subs	r2, #1
   15e30:	701a      	strb	r2, [r3, #0]
		if(place_tile_stat[rec_loc] != UI_PLACE_PLACED){
   15e32:	230f      	movs	r3, #15
   15e34:	18fb      	adds	r3, r7, r3
   15e36:	781b      	ldrb	r3, [r3, #0]
   15e38:	4a0d      	ldr	r2, [pc, #52]	; (15e70 <UiPlaceSuggest2+0x130>)
   15e3a:	5cd3      	ldrb	r3, [r2, r3]
   15e3c:	2b01      	cmp	r3, #1
   15e3e:	d00f      	beq.n	15e60 <UiPlaceSuggest2+0x120>
			place_tile_stat[rec_loc] = UI_PLACE_VALID;
   15e40:	230f      	movs	r3, #15
   15e42:	18fb      	adds	r3, r7, r3
   15e44:	781b      	ldrb	r3, [r3, #0]
   15e46:	4a0a      	ldr	r2, [pc, #40]	; (15e70 <UiPlaceSuggest2+0x130>)
   15e48:	2100      	movs	r1, #0
   15e4a:	54d1      	strb	r1, [r2, r3]
			SeesawSetLed(NEO_TRELLIS_ADDR_1,rec_loc, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15e4c:	230f      	movs	r3, #15
   15e4e:	18fb      	adds	r3, r7, r3
   15e50:	7819      	ldrb	r1, [r3, #0]
   15e52:	2302      	movs	r3, #2
   15e54:	9300      	str	r3, [sp, #0]
   15e56:	2332      	movs	r3, #50	; 0x32
   15e58:	2232      	movs	r2, #50	; 0x32
   15e5a:	202e      	movs	r0, #46	; 0x2e
   15e5c:	4c05      	ldr	r4, [pc, #20]	; (15e74 <UiPlaceSuggest2+0x134>)
   15e5e:	47a0      	blx	r4
			
		}
	}
	SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   15e60:	202e      	movs	r0, #46	; 0x2e
   15e62:	4b05      	ldr	r3, [pc, #20]	; (15e78 <UiPlaceSuggest2+0x138>)
   15e64:	4798      	blx	r3
	
}
   15e66:	46c0      	nop			; (mov r8, r8)
   15e68:	46bd      	mov	sp, r7
   15e6a:	b005      	add	sp, #20
   15e6c:	bd90      	pop	{r4, r7, pc}
   15e6e:	46c0      	nop			; (mov r8, r8)
   15e70:	2000004c 	.word	0x2000004c
   15e74:	000153cd 	.word	0x000153cd
   15e78:	0001549d 	.word	0x0001549d

00015e7c <UiPlaceSuggest3>:

static void UiPlaceSuggest3(uint8_t loc_1, uint8_t loc_2)
{
   15e7c:	b590      	push	{r4, r7, lr}
   15e7e:	b087      	sub	sp, #28
   15e80:	af02      	add	r7, sp, #8
   15e82:	0002      	movs	r2, r0
   15e84:	1dfb      	adds	r3, r7, #7
   15e86:	701a      	strb	r2, [r3, #0]
   15e88:	1dbb      	adds	r3, r7, #6
   15e8a:	1c0a      	adds	r2, r1, #0
   15e8c:	701a      	strb	r2, [r3, #0]
	uint8_t loc_h, loc_t;
	
	if(loc_1 < loc_2){loc_h = loc_1; loc_t = loc_2;}
   15e8e:	1dfa      	adds	r2, r7, #7
   15e90:	1dbb      	adds	r3, r7, #6
   15e92:	7812      	ldrb	r2, [r2, #0]
   15e94:	781b      	ldrb	r3, [r3, #0]
   15e96:	429a      	cmp	r2, r3
   15e98:	d20a      	bcs.n	15eb0 <UiPlaceSuggest3+0x34>
   15e9a:	230f      	movs	r3, #15
   15e9c:	18fb      	adds	r3, r7, r3
   15e9e:	1dfa      	adds	r2, r7, #7
   15ea0:	7812      	ldrb	r2, [r2, #0]
   15ea2:	701a      	strb	r2, [r3, #0]
   15ea4:	230e      	movs	r3, #14
   15ea6:	18fb      	adds	r3, r7, r3
   15ea8:	1dba      	adds	r2, r7, #6
   15eaa:	7812      	ldrb	r2, [r2, #0]
   15eac:	701a      	strb	r2, [r3, #0]
   15eae:	e009      	b.n	15ec4 <UiPlaceSuggest3+0x48>
	else{loc_h = loc_2; loc_t = loc_1;}
   15eb0:	230f      	movs	r3, #15
   15eb2:	18fb      	adds	r3, r7, r3
   15eb4:	1dba      	adds	r2, r7, #6
   15eb6:	7812      	ldrb	r2, [r2, #0]
   15eb8:	701a      	strb	r2, [r3, #0]
   15eba:	230e      	movs	r3, #14
   15ebc:	18fb      	adds	r3, r7, r3
   15ebe:	1dfa      	adds	r2, r7, #7
   15ec0:	7812      	ldrb	r2, [r2, #0]
   15ec2:	701a      	strb	r2, [r3, #0]
	
	if(loc_h % 4 == loc_t % 4){
   15ec4:	230f      	movs	r3, #15
   15ec6:	18fa      	adds	r2, r7, r3
   15ec8:	230e      	movs	r3, #14
   15eca:	18fb      	adds	r3, r7, r3
   15ecc:	7812      	ldrb	r2, [r2, #0]
   15ece:	781b      	ldrb	r3, [r3, #0]
   15ed0:	4053      	eors	r3, r2
   15ed2:	b2db      	uxtb	r3, r3
   15ed4:	2203      	movs	r2, #3
   15ed6:	4013      	ands	r3, r2
   15ed8:	b2db      	uxtb	r3, r3
   15eda:	2b00      	cmp	r3, #0
   15edc:	d140      	bne.n	15f60 <UiPlaceSuggest3+0xe4>
		if(loc_h > 4){
   15ede:	230f      	movs	r3, #15
   15ee0:	18fb      	adds	r3, r7, r3
   15ee2:	781b      	ldrb	r3, [r3, #0]
   15ee4:	2b04      	cmp	r3, #4
   15ee6:	d91a      	bls.n	15f1e <UiPlaceSuggest3+0xa2>
			if(place_tile_stat[loc_h - 4] == UI_PLACE_INVALID){
   15ee8:	230f      	movs	r3, #15
   15eea:	18fb      	adds	r3, r7, r3
   15eec:	781b      	ldrb	r3, [r3, #0]
   15eee:	3b04      	subs	r3, #4
   15ef0:	4a48      	ldr	r2, [pc, #288]	; (16014 <UiPlaceSuggest3+0x198>)
   15ef2:	5cd3      	ldrb	r3, [r2, r3]
   15ef4:	2b02      	cmp	r3, #2
   15ef6:	d112      	bne.n	15f1e <UiPlaceSuggest3+0xa2>
				place_tile_stat[loc_h - 4] = UI_PLACE_VALID;
   15ef8:	230f      	movs	r3, #15
   15efa:	18fb      	adds	r3, r7, r3
   15efc:	781b      	ldrb	r3, [r3, #0]
   15efe:	3b04      	subs	r3, #4
   15f00:	4a44      	ldr	r2, [pc, #272]	; (16014 <UiPlaceSuggest3+0x198>)
   15f02:	2100      	movs	r1, #0
   15f04:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(NEO_TRELLIS_ADDR_1, loc_h - 4, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15f06:	230f      	movs	r3, #15
   15f08:	18fb      	adds	r3, r7, r3
   15f0a:	781b      	ldrb	r3, [r3, #0]
   15f0c:	3b04      	subs	r3, #4
   15f0e:	b2d9      	uxtb	r1, r3
   15f10:	2302      	movs	r3, #2
   15f12:	9300      	str	r3, [sp, #0]
   15f14:	2332      	movs	r3, #50	; 0x32
   15f16:	2232      	movs	r2, #50	; 0x32
   15f18:	202e      	movs	r0, #46	; 0x2e
   15f1a:	4c3f      	ldr	r4, [pc, #252]	; (16018 <UiPlaceSuggest3+0x19c>)
   15f1c:	47a0      	blx	r4
			}
		}
		if(loc_t < 12){
   15f1e:	230e      	movs	r3, #14
   15f20:	18fb      	adds	r3, r7, r3
   15f22:	781b      	ldrb	r3, [r3, #0]
   15f24:	2b0b      	cmp	r3, #11
   15f26:	d86d      	bhi.n	16004 <UiPlaceSuggest3+0x188>
			if(place_tile_stat[loc_t + 4] == UI_PLACE_INVALID){
   15f28:	230e      	movs	r3, #14
   15f2a:	18fb      	adds	r3, r7, r3
   15f2c:	781b      	ldrb	r3, [r3, #0]
   15f2e:	3304      	adds	r3, #4
   15f30:	4a38      	ldr	r2, [pc, #224]	; (16014 <UiPlaceSuggest3+0x198>)
   15f32:	5cd3      	ldrb	r3, [r2, r3]
   15f34:	2b02      	cmp	r3, #2
   15f36:	d165      	bne.n	16004 <UiPlaceSuggest3+0x188>
				place_tile_stat[loc_t + 4] = UI_PLACE_VALID;
   15f38:	230e      	movs	r3, #14
   15f3a:	18fb      	adds	r3, r7, r3
   15f3c:	781b      	ldrb	r3, [r3, #0]
   15f3e:	3304      	adds	r3, #4
   15f40:	4a34      	ldr	r2, [pc, #208]	; (16014 <UiPlaceSuggest3+0x198>)
   15f42:	2100      	movs	r1, #0
   15f44:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(NEO_TRELLIS_ADDR_1, loc_t + 4, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15f46:	230e      	movs	r3, #14
   15f48:	18fb      	adds	r3, r7, r3
   15f4a:	781b      	ldrb	r3, [r3, #0]
   15f4c:	3304      	adds	r3, #4
   15f4e:	b2d9      	uxtb	r1, r3
   15f50:	2302      	movs	r3, #2
   15f52:	9300      	str	r3, [sp, #0]
   15f54:	2332      	movs	r3, #50	; 0x32
   15f56:	2232      	movs	r2, #50	; 0x32
   15f58:	202e      	movs	r0, #46	; 0x2e
   15f5a:	4c2f      	ldr	r4, [pc, #188]	; (16018 <UiPlaceSuggest3+0x19c>)
   15f5c:	47a0      	blx	r4
   15f5e:	e051      	b.n	16004 <UiPlaceSuggest3+0x188>
			}
		}
	}
	else if((int)loc_h/4 == (int)loc_t/4){
   15f60:	230f      	movs	r3, #15
   15f62:	18fb      	adds	r3, r7, r3
   15f64:	781b      	ldrb	r3, [r3, #0]
   15f66:	089b      	lsrs	r3, r3, #2
   15f68:	b2da      	uxtb	r2, r3
   15f6a:	230e      	movs	r3, #14
   15f6c:	18fb      	adds	r3, r7, r3
   15f6e:	781b      	ldrb	r3, [r3, #0]
   15f70:	089b      	lsrs	r3, r3, #2
   15f72:	b2db      	uxtb	r3, r3
   15f74:	429a      	cmp	r2, r3
   15f76:	d145      	bne.n	16004 <UiPlaceSuggest3+0x188>
		// if horizontal 
		if(loc_h % 4 != 0){
   15f78:	230f      	movs	r3, #15
   15f7a:	18fb      	adds	r3, r7, r3
   15f7c:	781b      	ldrb	r3, [r3, #0]
   15f7e:	2203      	movs	r2, #3
   15f80:	4013      	ands	r3, r2
   15f82:	b2db      	uxtb	r3, r3
   15f84:	2b00      	cmp	r3, #0
   15f86:	d01a      	beq.n	15fbe <UiPlaceSuggest3+0x142>
			if(place_tile_stat[loc_h - 1] == UI_PLACE_INVALID){
   15f88:	230f      	movs	r3, #15
   15f8a:	18fb      	adds	r3, r7, r3
   15f8c:	781b      	ldrb	r3, [r3, #0]
   15f8e:	3b01      	subs	r3, #1
   15f90:	4a20      	ldr	r2, [pc, #128]	; (16014 <UiPlaceSuggest3+0x198>)
   15f92:	5cd3      	ldrb	r3, [r2, r3]
   15f94:	2b02      	cmp	r3, #2
   15f96:	d112      	bne.n	15fbe <UiPlaceSuggest3+0x142>
				place_tile_stat[loc_h - 1] = UI_PLACE_VALID;
   15f98:	230f      	movs	r3, #15
   15f9a:	18fb      	adds	r3, r7, r3
   15f9c:	781b      	ldrb	r3, [r3, #0]
   15f9e:	3b01      	subs	r3, #1
   15fa0:	4a1c      	ldr	r2, [pc, #112]	; (16014 <UiPlaceSuggest3+0x198>)
   15fa2:	2100      	movs	r1, #0
   15fa4:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(NEO_TRELLIS_ADDR_1, loc_h - 1, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15fa6:	230f      	movs	r3, #15
   15fa8:	18fb      	adds	r3, r7, r3
   15faa:	781b      	ldrb	r3, [r3, #0]
   15fac:	3b01      	subs	r3, #1
   15fae:	b2d9      	uxtb	r1, r3
   15fb0:	2302      	movs	r3, #2
   15fb2:	9300      	str	r3, [sp, #0]
   15fb4:	2332      	movs	r3, #50	; 0x32
   15fb6:	2232      	movs	r2, #50	; 0x32
   15fb8:	202e      	movs	r0, #46	; 0x2e
   15fba:	4c17      	ldr	r4, [pc, #92]	; (16018 <UiPlaceSuggest3+0x19c>)
   15fbc:	47a0      	blx	r4
			}
		}
		if(loc_t %4 != 3){
   15fbe:	230e      	movs	r3, #14
   15fc0:	18fb      	adds	r3, r7, r3
   15fc2:	781b      	ldrb	r3, [r3, #0]
   15fc4:	2203      	movs	r2, #3
   15fc6:	4013      	ands	r3, r2
   15fc8:	b2db      	uxtb	r3, r3
   15fca:	2b03      	cmp	r3, #3
   15fcc:	d01a      	beq.n	16004 <UiPlaceSuggest3+0x188>
			if(place_tile_stat[loc_t + 1] == UI_PLACE_INVALID){
   15fce:	230e      	movs	r3, #14
   15fd0:	18fb      	adds	r3, r7, r3
   15fd2:	781b      	ldrb	r3, [r3, #0]
   15fd4:	3301      	adds	r3, #1
   15fd6:	4a0f      	ldr	r2, [pc, #60]	; (16014 <UiPlaceSuggest3+0x198>)
   15fd8:	5cd3      	ldrb	r3, [r2, r3]
   15fda:	2b02      	cmp	r3, #2
   15fdc:	d112      	bne.n	16004 <UiPlaceSuggest3+0x188>
				place_tile_stat[loc_t + 1] = UI_PLACE_VALID;
   15fde:	230e      	movs	r3, #14
   15fe0:	18fb      	adds	r3, r7, r3
   15fe2:	781b      	ldrb	r3, [r3, #0]
   15fe4:	3301      	adds	r3, #1
   15fe6:	4a0b      	ldr	r2, [pc, #44]	; (16014 <UiPlaceSuggest3+0x198>)
   15fe8:	2100      	movs	r1, #0
   15fea:	54d1      	strb	r1, [r2, r3]
				SeesawSetLed(NEO_TRELLIS_ADDR_1, loc_t + 1, R_PLACE_VALID, G_PLACE_VALID, B_PLACE_VALID);
   15fec:	230e      	movs	r3, #14
   15fee:	18fb      	adds	r3, r7, r3
   15ff0:	781b      	ldrb	r3, [r3, #0]
   15ff2:	3301      	adds	r3, #1
   15ff4:	b2d9      	uxtb	r1, r3
   15ff6:	2302      	movs	r3, #2
   15ff8:	9300      	str	r3, [sp, #0]
   15ffa:	2332      	movs	r3, #50	; 0x32
   15ffc:	2232      	movs	r2, #50	; 0x32
   15ffe:	202e      	movs	r0, #46	; 0x2e
   16000:	4c05      	ldr	r4, [pc, #20]	; (16018 <UiPlaceSuggest3+0x19c>)
   16002:	47a0      	blx	r4
			}
		}
		
	}
	
	SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   16004:	202e      	movs	r0, #46	; 0x2e
   16006:	4b05      	ldr	r3, [pc, #20]	; (1601c <UiPlaceSuggest3+0x1a0>)
   16008:	4798      	blx	r3
}
   1600a:	46c0      	nop			; (mov r8, r8)
   1600c:	46bd      	mov	sp, r7
   1600e:	b005      	add	sp, #20
   16010:	bd90      	pop	{r4, r7, pc}
   16012:	46c0      	nop			; (mov r8, r8)
   16014:	2000004c 	.word	0x2000004c
   16018:	000153cd 	.word	0x000153cd
   1601c:	0001549d 	.word	0x0001549d

00016020 <UiRemoveSuggest>:


static void UiRemoveSuggest(uint8_t loc)
{
   16020:	b590      	push	{r4, r7, lr}
   16022:	b087      	sub	sp, #28
   16024:	af02      	add	r7, sp, #8
   16026:	0002      	movs	r2, r0
   16028:	1dfb      	adds	r3, r7, #7
   1602a:	701a      	strb	r2, [r3, #0]
	uint8_t rec_loc;

	rec_loc = loc + 4;
   1602c:	230f      	movs	r3, #15
   1602e:	18fb      	adds	r3, r7, r3
   16030:	1dfa      	adds	r2, r7, #7
   16032:	7812      	ldrb	r2, [r2, #0]
   16034:	3204      	adds	r2, #4
   16036:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   16038:	230f      	movs	r3, #15
   1603a:	18fb      	adds	r3, r7, r3
   1603c:	781b      	ldrb	r3, [r3, #0]
   1603e:	4a39      	ldr	r2, [pc, #228]	; (16124 <UiRemoveSuggest+0x104>)
   16040:	5cd3      	ldrb	r3, [r2, r3]
   16042:	2b00      	cmp	r3, #0
   16044:	d10f      	bne.n	16066 <UiRemoveSuggest+0x46>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   16046:	230f      	movs	r3, #15
   16048:	18fb      	adds	r3, r7, r3
   1604a:	781b      	ldrb	r3, [r3, #0]
   1604c:	4a35      	ldr	r2, [pc, #212]	; (16124 <UiRemoveSuggest+0x104>)
   1604e:	2102      	movs	r1, #2
   16050:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(NEO_TRELLIS_ADDR_1, rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   16052:	230f      	movs	r3, #15
   16054:	18fb      	adds	r3, r7, r3
   16056:	7819      	ldrb	r1, [r3, #0]
   16058:	2300      	movs	r3, #0
   1605a:	9300      	str	r3, [sp, #0]
   1605c:	2300      	movs	r3, #0
   1605e:	2200      	movs	r2, #0
   16060:	202e      	movs	r0, #46	; 0x2e
   16062:	4c31      	ldr	r4, [pc, #196]	; (16128 <UiRemoveSuggest+0x108>)
   16064:	47a0      	blx	r4

	}

	rec_loc = loc - 4;
   16066:	230f      	movs	r3, #15
   16068:	18fb      	adds	r3, r7, r3
   1606a:	1dfa      	adds	r2, r7, #7
   1606c:	7812      	ldrb	r2, [r2, #0]
   1606e:	3a04      	subs	r2, #4
   16070:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   16072:	230f      	movs	r3, #15
   16074:	18fb      	adds	r3, r7, r3
   16076:	781b      	ldrb	r3, [r3, #0]
   16078:	4a2a      	ldr	r2, [pc, #168]	; (16124 <UiRemoveSuggest+0x104>)
   1607a:	5cd3      	ldrb	r3, [r2, r3]
   1607c:	2b00      	cmp	r3, #0
   1607e:	d10f      	bne.n	160a0 <UiRemoveSuggest+0x80>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   16080:	230f      	movs	r3, #15
   16082:	18fb      	adds	r3, r7, r3
   16084:	781b      	ldrb	r3, [r3, #0]
   16086:	4a27      	ldr	r2, [pc, #156]	; (16124 <UiRemoveSuggest+0x104>)
   16088:	2102      	movs	r1, #2
   1608a:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(NEO_TRELLIS_ADDR_1, rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   1608c:	230f      	movs	r3, #15
   1608e:	18fb      	adds	r3, r7, r3
   16090:	7819      	ldrb	r1, [r3, #0]
   16092:	2300      	movs	r3, #0
   16094:	9300      	str	r3, [sp, #0]
   16096:	2300      	movs	r3, #0
   16098:	2200      	movs	r2, #0
   1609a:	202e      	movs	r0, #46	; 0x2e
   1609c:	4c22      	ldr	r4, [pc, #136]	; (16128 <UiRemoveSuggest+0x108>)
   1609e:	47a0      	blx	r4

	}

	rec_loc = loc + 1;
   160a0:	230f      	movs	r3, #15
   160a2:	18fb      	adds	r3, r7, r3
   160a4:	1dfa      	adds	r2, r7, #7
   160a6:	7812      	ldrb	r2, [r2, #0]
   160a8:	3201      	adds	r2, #1
   160aa:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   160ac:	230f      	movs	r3, #15
   160ae:	18fb      	adds	r3, r7, r3
   160b0:	781b      	ldrb	r3, [r3, #0]
   160b2:	4a1c      	ldr	r2, [pc, #112]	; (16124 <UiRemoveSuggest+0x104>)
   160b4:	5cd3      	ldrb	r3, [r2, r3]
   160b6:	2b00      	cmp	r3, #0
   160b8:	d10f      	bne.n	160da <UiRemoveSuggest+0xba>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   160ba:	230f      	movs	r3, #15
   160bc:	18fb      	adds	r3, r7, r3
   160be:	781b      	ldrb	r3, [r3, #0]
   160c0:	4a18      	ldr	r2, [pc, #96]	; (16124 <UiRemoveSuggest+0x104>)
   160c2:	2102      	movs	r1, #2
   160c4:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(NEO_TRELLIS_ADDR_1, rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   160c6:	230f      	movs	r3, #15
   160c8:	18fb      	adds	r3, r7, r3
   160ca:	7819      	ldrb	r1, [r3, #0]
   160cc:	2300      	movs	r3, #0
   160ce:	9300      	str	r3, [sp, #0]
   160d0:	2300      	movs	r3, #0
   160d2:	2200      	movs	r2, #0
   160d4:	202e      	movs	r0, #46	; 0x2e
   160d6:	4c14      	ldr	r4, [pc, #80]	; (16128 <UiRemoveSuggest+0x108>)
   160d8:	47a0      	blx	r4

	}

	rec_loc = loc - 1;
   160da:	230f      	movs	r3, #15
   160dc:	18fb      	adds	r3, r7, r3
   160de:	1dfa      	adds	r2, r7, #7
   160e0:	7812      	ldrb	r2, [r2, #0]
   160e2:	3a01      	subs	r2, #1
   160e4:	701a      	strb	r2, [r3, #0]
	if(place_tile_stat[rec_loc] == UI_PLACE_VALID){
   160e6:	230f      	movs	r3, #15
   160e8:	18fb      	adds	r3, r7, r3
   160ea:	781b      	ldrb	r3, [r3, #0]
   160ec:	4a0d      	ldr	r2, [pc, #52]	; (16124 <UiRemoveSuggest+0x104>)
   160ee:	5cd3      	ldrb	r3, [r2, r3]
   160f0:	2b00      	cmp	r3, #0
   160f2:	d10f      	bne.n	16114 <UiRemoveSuggest+0xf4>
		place_tile_stat[rec_loc] = UI_PLACE_INVALID;
   160f4:	230f      	movs	r3, #15
   160f6:	18fb      	adds	r3, r7, r3
   160f8:	781b      	ldrb	r3, [r3, #0]
   160fa:	4a0a      	ldr	r2, [pc, #40]	; (16124 <UiRemoveSuggest+0x104>)
   160fc:	2102      	movs	r1, #2
   160fe:	54d1      	strb	r1, [r2, r3]
		SeesawSetLed(NEO_TRELLIS_ADDR_1, rec_loc, R_PLACE_INVALID, G_PLACE_INVALID, B_PLACE_INVALID);
   16100:	230f      	movs	r3, #15
   16102:	18fb      	adds	r3, r7, r3
   16104:	7819      	ldrb	r1, [r3, #0]
   16106:	2300      	movs	r3, #0
   16108:	9300      	str	r3, [sp, #0]
   1610a:	2300      	movs	r3, #0
   1610c:	2200      	movs	r2, #0
   1610e:	202e      	movs	r0, #46	; 0x2e
   16110:	4c05      	ldr	r4, [pc, #20]	; (16128 <UiRemoveSuggest+0x108>)
   16112:	47a0      	blx	r4
	}
	SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   16114:	202e      	movs	r0, #46	; 0x2e
   16116:	4b05      	ldr	r3, [pc, #20]	; (1612c <UiRemoveSuggest+0x10c>)
   16118:	4798      	blx	r3

}
   1611a:	46c0      	nop			; (mov r8, r8)
   1611c:	46bd      	mov	sp, r7
   1611e:	b005      	add	sp, #20
   16120:	bd90      	pop	{r4, r7, pc}
   16122:	46c0      	nop			; (mov r8, r8)
   16124:	2000004c 	.word	0x2000004c
   16128:	000153cd 	.word	0x000153cd
   1612c:	0001549d 	.word	0x0001549d

00016130 <UiShowLed>:

void UiShowLed(uint8_t ship_fire_loc, uint8_t hit_res, uint8_t board) {
   16130:	b590      	push	{r4, r7, lr}
   16132:	b085      	sub	sp, #20
   16134:	af02      	add	r7, sp, #8
   16136:	0004      	movs	r4, r0
   16138:	0008      	movs	r0, r1
   1613a:	0011      	movs	r1, r2
   1613c:	1dfb      	adds	r3, r7, #7
   1613e:	1c22      	adds	r2, r4, #0
   16140:	701a      	strb	r2, [r3, #0]
   16142:	1dbb      	adds	r3, r7, #6
   16144:	1c02      	adds	r2, r0, #0
   16146:	701a      	strb	r2, [r3, #0]
   16148:	1d7b      	adds	r3, r7, #5
   1614a:	1c0a      	adds	r2, r1, #0
   1614c:	701a      	strb	r2, [r3, #0]
	if (board == PLAYER) {
   1614e:	1d7b      	adds	r3, r7, #5
   16150:	781b      	ldrb	r3, [r3, #0]
   16152:	2b01      	cmp	r3, #1
   16154:	d11d      	bne.n	16192 <UiShowLed+0x62>
		if (hit_res == 0) {
   16156:	1dbb      	adds	r3, r7, #6
   16158:	781b      	ldrb	r3, [r3, #0]
   1615a:	2b00      	cmp	r3, #0
   1615c:	d10c      	bne.n	16178 <UiShowLed+0x48>
			SeesawSetLed(NEO_TRELLIS_ADDR_1, ship_fire_loc, R_MISS, G_MISS, B_MISS);
   1615e:	1dfb      	adds	r3, r7, #7
   16160:	7819      	ldrb	r1, [r3, #0]
   16162:	230a      	movs	r3, #10
   16164:	9300      	str	r3, [sp, #0]
   16166:	2332      	movs	r3, #50	; 0x32
   16168:	2232      	movs	r2, #50	; 0x32
   1616a:	202e      	movs	r0, #46	; 0x2e
   1616c:	4c19      	ldr	r4, [pc, #100]	; (161d4 <UiShowLed+0xa4>)
   1616e:	47a0      	blx	r4
			SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   16170:	202e      	movs	r0, #46	; 0x2e
   16172:	4b19      	ldr	r3, [pc, #100]	; (161d8 <UiShowLed+0xa8>)
   16174:	4798      	blx	r3
		else {
			SeesawSetLed(NEO_TRELLIS_ADDR_2, ship_fire_loc, R_HIT, G_HIT, B_HIT);
			SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_2);
		}
	}
}
   16176:	e029      	b.n	161cc <UiShowLed+0x9c>
			SeesawSetLed(NEO_TRELLIS_ADDR_1, ship_fire_loc, R_HIT, G_HIT, B_HIT);
   16178:	1dfb      	adds	r3, r7, #7
   1617a:	7819      	ldrb	r1, [r3, #0]
   1617c:	2300      	movs	r3, #0
   1617e:	9300      	str	r3, [sp, #0]
   16180:	2300      	movs	r3, #0
   16182:	2232      	movs	r2, #50	; 0x32
   16184:	202e      	movs	r0, #46	; 0x2e
   16186:	4c13      	ldr	r4, [pc, #76]	; (161d4 <UiShowLed+0xa4>)
   16188:	47a0      	blx	r4
			SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_1);
   1618a:	202e      	movs	r0, #46	; 0x2e
   1618c:	4b12      	ldr	r3, [pc, #72]	; (161d8 <UiShowLed+0xa8>)
   1618e:	4798      	blx	r3
}
   16190:	e01c      	b.n	161cc <UiShowLed+0x9c>
		if (hit_res == 0) {
   16192:	1dbb      	adds	r3, r7, #6
   16194:	781b      	ldrb	r3, [r3, #0]
   16196:	2b00      	cmp	r3, #0
   16198:	d10c      	bne.n	161b4 <UiShowLed+0x84>
			SeesawSetLed(NEO_TRELLIS_ADDR_2, ship_fire_loc, R_MISS, G_MISS, B_MISS);
   1619a:	1dfb      	adds	r3, r7, #7
   1619c:	7819      	ldrb	r1, [r3, #0]
   1619e:	230a      	movs	r3, #10
   161a0:	9300      	str	r3, [sp, #0]
   161a2:	2332      	movs	r3, #50	; 0x32
   161a4:	2232      	movs	r2, #50	; 0x32
   161a6:	202f      	movs	r0, #47	; 0x2f
   161a8:	4c0a      	ldr	r4, [pc, #40]	; (161d4 <UiShowLed+0xa4>)
   161aa:	47a0      	blx	r4
			SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_2);
   161ac:	202f      	movs	r0, #47	; 0x2f
   161ae:	4b0a      	ldr	r3, [pc, #40]	; (161d8 <UiShowLed+0xa8>)
   161b0:	4798      	blx	r3
}
   161b2:	e00b      	b.n	161cc <UiShowLed+0x9c>
			SeesawSetLed(NEO_TRELLIS_ADDR_2, ship_fire_loc, R_HIT, G_HIT, B_HIT);
   161b4:	1dfb      	adds	r3, r7, #7
   161b6:	7819      	ldrb	r1, [r3, #0]
   161b8:	2300      	movs	r3, #0
   161ba:	9300      	str	r3, [sp, #0]
   161bc:	2300      	movs	r3, #0
   161be:	2232      	movs	r2, #50	; 0x32
   161c0:	202f      	movs	r0, #47	; 0x2f
   161c2:	4c04      	ldr	r4, [pc, #16]	; (161d4 <UiShowLed+0xa4>)
   161c4:	47a0      	blx	r4
			SeesawOrderLedUpdate(NEO_TRELLIS_ADDR_2);
   161c6:	202f      	movs	r0, #47	; 0x2f
   161c8:	4b03      	ldr	r3, [pc, #12]	; (161d8 <UiShowLed+0xa8>)
   161ca:	4798      	blx	r3
}
   161cc:	46c0      	nop			; (mov r8, r8)
   161ce:	46bd      	mov	sp, r7
   161d0:	b003      	add	sp, #12
   161d2:	bd90      	pop	{r4, r7, pc}
   161d4:	000153cd 	.word	0x000153cd
   161d8:	0001549d 	.word	0x0001549d

000161dc <UiPlayerTurn>:

void UiPlayerTurn(uint8_t turn) {
   161dc:	b580      	push	{r7, lr}
   161de:	b082      	sub	sp, #8
   161e0:	af00      	add	r7, sp, #0
   161e2:	0002      	movs	r2, r0
   161e4:	1dfb      	adds	r3, r7, #7
   161e6:	701a      	strb	r2, [r3, #0]
	if (turn == PLAYER) {
   161e8:	1dfb      	adds	r3, r7, #7
   161ea:	781b      	ldrb	r3, [r3, #0]
   161ec:	2b01      	cmp	r3, #1
   161ee:	d107      	bne.n	16200 <UiPlayerTurn+0x24>
		uiState = UI_STATE_HANDLE_SHOOT;
   161f0:	4b05      	ldr	r3, [pc, #20]	; (16208 <UiPlayerTurn+0x2c>)
   161f2:	2202      	movs	r2, #2
   161f4:	701a      	strb	r2, [r3, #0]
		LogMessage(LOG_DEBUG_LVL, "Ready to fire! \r\n");
   161f6:	4b05      	ldr	r3, [pc, #20]	; (1620c <UiPlayerTurn+0x30>)
   161f8:	0019      	movs	r1, r3
   161fa:	2001      	movs	r0, #1
   161fc:	4b04      	ldr	r3, [pc, #16]	; (16210 <UiPlayerTurn+0x34>)
   161fe:	4798      	blx	r3
	}
}
   16200:	46c0      	nop			; (mov r8, r8)
   16202:	46bd      	mov	sp, r7
   16204:	b002      	add	sp, #8
   16206:	bd80      	pop	{r7, pc}
   16208:	2000443a 	.word	0x2000443a
   1620c:	0003657c 	.word	0x0003657c
   16210:	0001e4d1 	.word	0x0001e4d1

00016214 <NVIC_SystemReset>:
{
   16214:	b580      	push	{r7, lr}
   16216:	af00      	add	r7, sp, #0
   16218:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   1621c:	4b02      	ldr	r3, [pc, #8]	; (16228 <NVIC_SystemReset+0x14>)
   1621e:	4a03      	ldr	r2, [pc, #12]	; (1622c <NVIC_SystemReset+0x18>)
   16220:	60da      	str	r2, [r3, #12]
   16222:	f3bf 8f4f 	dsb	sy
  while(1);                                                    /* wait until reset */
   16226:	e7fe      	b.n	16226 <NVIC_SystemReset+0x12>
   16228:	e000ed00 	.word	0xe000ed00
   1622c:	05fa0004 	.word	0x05fa0004

00016230 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16230:	b580      	push	{r7, lr}
   16232:	b084      	sub	sp, #16
   16234:	af00      	add	r7, sp, #0
   16236:	0002      	movs	r2, r0
   16238:	1dfb      	adds	r3, r7, #7
   1623a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1623c:	230f      	movs	r3, #15
   1623e:	18fb      	adds	r3, r7, r3
   16240:	1dfa      	adds	r2, r7, #7
   16242:	7812      	ldrb	r2, [r2, #0]
   16244:	09d2      	lsrs	r2, r2, #7
   16246:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16248:	230e      	movs	r3, #14
   1624a:	18fb      	adds	r3, r7, r3
   1624c:	1dfa      	adds	r2, r7, #7
   1624e:	7812      	ldrb	r2, [r2, #0]
   16250:	0952      	lsrs	r2, r2, #5
   16252:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16254:	4b0d      	ldr	r3, [pc, #52]	; (1628c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16256:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16258:	230f      	movs	r3, #15
   1625a:	18fb      	adds	r3, r7, r3
   1625c:	781b      	ldrb	r3, [r3, #0]
   1625e:	2b00      	cmp	r3, #0
   16260:	d10f      	bne.n	16282 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16262:	230f      	movs	r3, #15
   16264:	18fb      	adds	r3, r7, r3
   16266:	781b      	ldrb	r3, [r3, #0]
   16268:	009b      	lsls	r3, r3, #2
   1626a:	2210      	movs	r2, #16
   1626c:	4694      	mov	ip, r2
   1626e:	44bc      	add	ip, r7
   16270:	4463      	add	r3, ip
   16272:	3b08      	subs	r3, #8
   16274:	681a      	ldr	r2, [r3, #0]
   16276:	230e      	movs	r3, #14
   16278:	18fb      	adds	r3, r7, r3
   1627a:	781b      	ldrb	r3, [r3, #0]
   1627c:	01db      	lsls	r3, r3, #7
   1627e:	18d3      	adds	r3, r2, r3
   16280:	e000      	b.n	16284 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16282:	2300      	movs	r3, #0
	}
}
   16284:	0018      	movs	r0, r3
   16286:	46bd      	mov	sp, r7
   16288:	b004      	add	sp, #16
   1628a:	bd80      	pop	{r7, pc}
   1628c:	41004400 	.word	0x41004400

00016290 <system_reset>:
{
   16290:	b580      	push	{r7, lr}
   16292:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   16294:	4b02      	ldr	r3, [pc, #8]	; (162a0 <system_reset+0x10>)
   16296:	4798      	blx	r3
}
   16298:	46c0      	nop			; (mov r8, r8)
   1629a:	46bd      	mov	sp, r7
   1629c:	bd80      	pop	{r7, pc}
   1629e:	46c0      	nop			; (mov r8, r8)
   162a0:	00016215 	.word	0x00016215

000162a4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   162a4:	b580      	push	{r7, lr}
   162a6:	b082      	sub	sp, #8
   162a8:	af00      	add	r7, sp, #0
   162aa:	0002      	movs	r2, r0
   162ac:	1dfb      	adds	r3, r7, #7
   162ae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   162b0:	1dfb      	adds	r3, r7, #7
   162b2:	781b      	ldrb	r3, [r3, #0]
   162b4:	0018      	movs	r0, r3
   162b6:	4b03      	ldr	r3, [pc, #12]	; (162c4 <port_get_group_from_gpio_pin+0x20>)
   162b8:	4798      	blx	r3
   162ba:	0003      	movs	r3, r0
}
   162bc:	0018      	movs	r0, r3
   162be:	46bd      	mov	sp, r7
   162c0:	b002      	add	sp, #8
   162c2:	bd80      	pop	{r7, pc}
   162c4:	00016231 	.word	0x00016231

000162c8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   162c8:	b580      	push	{r7, lr}
   162ca:	b084      	sub	sp, #16
   162cc:	af00      	add	r7, sp, #0
   162ce:	0002      	movs	r2, r0
   162d0:	1dfb      	adds	r3, r7, #7
   162d2:	701a      	strb	r2, [r3, #0]
   162d4:	1dbb      	adds	r3, r7, #6
   162d6:	1c0a      	adds	r2, r1, #0
   162d8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   162da:	1dfb      	adds	r3, r7, #7
   162dc:	781b      	ldrb	r3, [r3, #0]
   162de:	0018      	movs	r0, r3
   162e0:	4b0d      	ldr	r3, [pc, #52]	; (16318 <port_pin_set_output_level+0x50>)
   162e2:	4798      	blx	r3
   162e4:	0003      	movs	r3, r0
   162e6:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   162e8:	1dfb      	adds	r3, r7, #7
   162ea:	781b      	ldrb	r3, [r3, #0]
   162ec:	221f      	movs	r2, #31
   162ee:	4013      	ands	r3, r2
   162f0:	2201      	movs	r2, #1
   162f2:	409a      	lsls	r2, r3
   162f4:	0013      	movs	r3, r2
   162f6:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   162f8:	1dbb      	adds	r3, r7, #6
   162fa:	781b      	ldrb	r3, [r3, #0]
   162fc:	2b00      	cmp	r3, #0
   162fe:	d003      	beq.n	16308 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16300:	68fb      	ldr	r3, [r7, #12]
   16302:	68ba      	ldr	r2, [r7, #8]
   16304:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16306:	e002      	b.n	1630e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16308:	68fb      	ldr	r3, [r7, #12]
   1630a:	68ba      	ldr	r2, [r7, #8]
   1630c:	615a      	str	r2, [r3, #20]
}
   1630e:	46c0      	nop			; (mov r8, r8)
   16310:	46bd      	mov	sp, r7
   16312:	b004      	add	sp, #16
   16314:	bd80      	pop	{r7, pc}
   16316:	46c0      	nop			; (mov r8, r8)
   16318:	000162a5 	.word	0x000162a5

0001631c <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   1631c:	b580      	push	{r7, lr}
   1631e:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   16320:	4b02      	ldr	r3, [pc, #8]	; (1632c <init_state+0x10>)
   16322:	2200      	movs	r2, #0
   16324:	701a      	strb	r2, [r3, #0]
}
   16326:	46c0      	nop			; (mov r8, r8)
   16328:	46bd      	mov	sp, r7
   1632a:	bd80      	pop	{r7, pc}
   1632c:	2000045d 	.word	0x2000045d

00016330 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   16330:	b580      	push	{r7, lr}
   16332:	b082      	sub	sp, #8
   16334:	af00      	add	r7, sp, #0
   16336:	0002      	movs	r2, r0
   16338:	1dfb      	adds	r3, r7, #7
   1633a:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   1633c:	1dfb      	adds	r3, r7, #7
   1633e:	781b      	ldrb	r3, [r3, #0]
   16340:	b25b      	sxtb	r3, r3
   16342:	43db      	mvns	r3, r3
   16344:	b25b      	sxtb	r3, r3
   16346:	4a06      	ldr	r2, [pc, #24]	; (16360 <clear_state+0x30>)
   16348:	7812      	ldrb	r2, [r2, #0]
   1634a:	b252      	sxtb	r2, r2
   1634c:	4013      	ands	r3, r2
   1634e:	b25b      	sxtb	r3, r3
   16350:	b2da      	uxtb	r2, r3
   16352:	4b03      	ldr	r3, [pc, #12]	; (16360 <clear_state+0x30>)
   16354:	701a      	strb	r2, [r3, #0]
}
   16356:	46c0      	nop			; (mov r8, r8)
   16358:	46bd      	mov	sp, r7
   1635a:	b002      	add	sp, #8
   1635c:	bd80      	pop	{r7, pc}
   1635e:	46c0      	nop			; (mov r8, r8)
   16360:	2000045d 	.word	0x2000045d

00016364 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   16364:	b580      	push	{r7, lr}
   16366:	b082      	sub	sp, #8
   16368:	af00      	add	r7, sp, #0
   1636a:	0002      	movs	r2, r0
   1636c:	1dfb      	adds	r3, r7, #7
   1636e:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   16370:	4b05      	ldr	r3, [pc, #20]	; (16388 <add_state+0x24>)
   16372:	781a      	ldrb	r2, [r3, #0]
   16374:	1dfb      	adds	r3, r7, #7
   16376:	781b      	ldrb	r3, [r3, #0]
   16378:	4313      	orrs	r3, r2
   1637a:	b2da      	uxtb	r2, r3
   1637c:	4b02      	ldr	r3, [pc, #8]	; (16388 <add_state+0x24>)
   1637e:	701a      	strb	r2, [r3, #0]
}
   16380:	46c0      	nop			; (mov r8, r8)
   16382:	46bd      	mov	sp, r7
   16384:	b002      	add	sp, #8
   16386:	bd80      	pop	{r7, pc}
   16388:	2000045d 	.word	0x2000045d

0001638c <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   1638c:	b580      	push	{r7, lr}
   1638e:	b082      	sub	sp, #8
   16390:	af00      	add	r7, sp, #0
   16392:	0002      	movs	r2, r0
   16394:	1dfb      	adds	r3, r7, #7
   16396:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   16398:	4b06      	ldr	r3, [pc, #24]	; (163b4 <is_state_set+0x28>)
   1639a:	781b      	ldrb	r3, [r3, #0]
   1639c:	1dfa      	adds	r2, r7, #7
   1639e:	7812      	ldrb	r2, [r2, #0]
   163a0:	4013      	ands	r3, r2
   163a2:	b2db      	uxtb	r3, r3
   163a4:	1e5a      	subs	r2, r3, #1
   163a6:	4193      	sbcs	r3, r2
   163a8:	b2db      	uxtb	r3, r3
}
   163aa:	0018      	movs	r0, r3
   163ac:	46bd      	mov	sp, r7
   163ae:	b002      	add	sp, #8
   163b0:	bd80      	pop	{r7, pc}
   163b2:	46c0      	nop			; (mov r8, r8)
   163b4:	2000045d 	.word	0x2000045d

000163b8 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   163b8:	b590      	push	{r4, r7, lr}
   163ba:	b085      	sub	sp, #20
   163bc:	af00      	add	r7, sp, #0
   163be:	6078      	str	r0, [r7, #4]
   163c0:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   163c2:	687b      	ldr	r3, [r7, #4]
   163c4:	2b00      	cmp	r3, #0
   163c6:	d002      	beq.n	163ce <is_exist_file+0x16>
   163c8:	683b      	ldr	r3, [r7, #0]
   163ca:	2b00      	cmp	r3, #0
   163cc:	d101      	bne.n	163d2 <is_exist_file+0x1a>
        return false;
   163ce:	2300      	movs	r3, #0
   163d0:	e013      	b.n	163fa <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   163d2:	230f      	movs	r3, #15
   163d4:	18fc      	adds	r4, r7, r3
   163d6:	6839      	ldr	r1, [r7, #0]
   163d8:	4b0a      	ldr	r3, [pc, #40]	; (16404 <is_exist_file+0x4c>)
   163da:	2200      	movs	r2, #0
   163dc:	0018      	movs	r0, r3
   163de:	4b0a      	ldr	r3, [pc, #40]	; (16408 <is_exist_file+0x50>)
   163e0:	4798      	blx	r3
   163e2:	0003      	movs	r3, r0
   163e4:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   163e6:	4b07      	ldr	r3, [pc, #28]	; (16404 <is_exist_file+0x4c>)
   163e8:	0018      	movs	r0, r3
   163ea:	4b08      	ldr	r3, [pc, #32]	; (1640c <is_exist_file+0x54>)
   163ec:	4798      	blx	r3
    return (ret == FR_OK);
   163ee:	230f      	movs	r3, #15
   163f0:	18fb      	adds	r3, r7, r3
   163f2:	781b      	ldrb	r3, [r3, #0]
   163f4:	425a      	negs	r2, r3
   163f6:	4153      	adcs	r3, r2
   163f8:	b2db      	uxtb	r3, r3
}
   163fa:	0018      	movs	r0, r3
   163fc:	46bd      	mov	sp, r7
   163fe:	b005      	add	sp, #20
   16400:	bd90      	pop	{r4, r7, pc}
   16402:	46c0      	nop			; (mov r8, r8)
   16404:	20000460 	.word	0x20000460
   16408:	0002db69 	.word	0x0002db69
   1640c:	0002e569 	.word	0x0002e569

00016410 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16410:	b580      	push	{r7, lr}
   16412:	b09e      	sub	sp, #120	; 0x78
   16414:	af00      	add	r7, sp, #0
   16416:	60f8      	str	r0, [r7, #12]
   16418:	60b9      	str	r1, [r7, #8]
   1641a:	1dfb      	adds	r3, r7, #7
   1641c:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   1641e:	2376      	movs	r3, #118	; 0x76
   16420:	18fb      	adds	r3, r7, r3
   16422:	2201      	movs	r2, #1
   16424:	801a      	strh	r2, [r3, #0]
   16426:	2374      	movs	r3, #116	; 0x74
   16428:	18fb      	adds	r3, r7, r3
   1642a:	2200      	movs	r2, #0
   1642c:	801a      	strh	r2, [r3, #0]
   1642e:	236e      	movs	r3, #110	; 0x6e
   16430:	18fb      	adds	r3, r7, r3
   16432:	2200      	movs	r2, #0
   16434:	801a      	strh	r2, [r3, #0]
   16436:	2372      	movs	r3, #114	; 0x72
   16438:	18fb      	adds	r3, r7, r3
   1643a:	2200      	movs	r2, #0
   1643c:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   1643e:	2324      	movs	r3, #36	; 0x24
   16440:	18fb      	adds	r3, r7, r3
   16442:	0018      	movs	r0, r3
   16444:	2341      	movs	r3, #65	; 0x41
   16446:	001a      	movs	r2, r3
   16448:	2100      	movs	r1, #0
   1644a:	4b92      	ldr	r3, [pc, #584]	; (16694 <rename_to_unique+0x284>)
   1644c:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   1644e:	2318      	movs	r3, #24
   16450:	18fb      	adds	r3, r7, r3
   16452:	0018      	movs	r0, r3
   16454:	2309      	movs	r3, #9
   16456:	001a      	movs	r2, r3
   16458:	2100      	movs	r1, #0
   1645a:	4b8e      	ldr	r3, [pc, #568]	; (16694 <rename_to_unique+0x284>)
   1645c:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   1645e:	2314      	movs	r3, #20
   16460:	18fb      	adds	r3, r7, r3
   16462:	2200      	movs	r2, #0
   16464:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   16466:	2300      	movs	r3, #0
   16468:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   1646a:	2371      	movs	r3, #113	; 0x71
   1646c:	18fb      	adds	r3, r7, r3
   1646e:	2200      	movs	r2, #0
   16470:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   16472:	68bb      	ldr	r3, [r7, #8]
   16474:	2b00      	cmp	r3, #0
   16476:	d101      	bne.n	1647c <rename_to_unique+0x6c>
        return false;
   16478:	2300      	movs	r3, #0
   1647a:	e106      	b.n	1668a <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   1647c:	68ba      	ldr	r2, [r7, #8]
   1647e:	68fb      	ldr	r3, [r7, #12]
   16480:	0011      	movs	r1, r2
   16482:	0018      	movs	r0, r3
   16484:	4b84      	ldr	r3, [pc, #528]	; (16698 <rename_to_unique+0x288>)
   16486:	4798      	blx	r3
   16488:	0003      	movs	r3, r0
   1648a:	001a      	movs	r2, r3
   1648c:	2301      	movs	r3, #1
   1648e:	4053      	eors	r3, r2
   16490:	b2db      	uxtb	r3, r3
   16492:	2b00      	cmp	r3, #0
   16494:	d001      	beq.n	1649a <rename_to_unique+0x8a>
        return true;
   16496:	2301      	movs	r3, #1
   16498:	e0f7      	b.n	1668a <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   1649a:	68bb      	ldr	r3, [r7, #8]
   1649c:	0018      	movs	r0, r3
   1649e:	4b7f      	ldr	r3, [pc, #508]	; (1669c <rename_to_unique+0x28c>)
   164a0:	4798      	blx	r3
   164a2:	0003      	movs	r3, r0
   164a4:	2b40      	cmp	r3, #64	; 0x40
   164a6:	d901      	bls.n	164ac <rename_to_unique+0x9c>
        return false;
   164a8:	2300      	movs	r3, #0
   164aa:	e0ee      	b.n	1668a <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   164ac:	68bb      	ldr	r3, [r7, #8]
   164ae:	212e      	movs	r1, #46	; 0x2e
   164b0:	0018      	movs	r0, r3
   164b2:	4b7b      	ldr	r3, [pc, #492]	; (166a0 <rename_to_unique+0x290>)
   164b4:	4798      	blx	r3
   164b6:	0003      	movs	r3, r0
   164b8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   164ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   164bc:	2b00      	cmp	r3, #0
   164be:	d052      	beq.n	16566 <rename_to_unique+0x156>
        ext_len = strlen(p);
   164c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   164c2:	0018      	movs	r0, r3
   164c4:	4b75      	ldr	r3, [pc, #468]	; (1669c <rename_to_unique+0x28c>)
   164c6:	4798      	blx	r3
   164c8:	0002      	movs	r2, r0
   164ca:	236e      	movs	r3, #110	; 0x6e
   164cc:	18fb      	adds	r3, r7, r3
   164ce:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   164d0:	236e      	movs	r3, #110	; 0x6e
   164d2:	18fb      	adds	r3, r7, r3
   164d4:	881b      	ldrh	r3, [r3, #0]
   164d6:	2b07      	cmp	r3, #7
   164d8:	d837      	bhi.n	1654a <rename_to_unique+0x13a>
            valid_ext = true;
   164da:	2371      	movs	r3, #113	; 0x71
   164dc:	18fb      	adds	r3, r7, r3
   164de:	2201      	movs	r2, #1
   164e0:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   164e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   164e4:	2318      	movs	r3, #24
   164e6:	18fb      	adds	r3, r7, r3
   164e8:	0011      	movs	r1, r2
   164ea:	0018      	movs	r0, r3
   164ec:	4b6d      	ldr	r3, [pc, #436]	; (166a4 <rename_to_unique+0x294>)
   164ee:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   164f0:	68bb      	ldr	r3, [r7, #8]
   164f2:	0018      	movs	r0, r3
   164f4:	4b69      	ldr	r3, [pc, #420]	; (1669c <rename_to_unique+0x28c>)
   164f6:	4798      	blx	r3
   164f8:	0002      	movs	r2, r0
   164fa:	236e      	movs	r3, #110	; 0x6e
   164fc:	18fb      	adds	r3, r7, r3
   164fe:	881b      	ldrh	r3, [r3, #0]
   16500:	1ad3      	subs	r3, r2, r3
   16502:	2b3c      	cmp	r3, #60	; 0x3c
   16504:	d911      	bls.n	1652a <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16506:	2374      	movs	r3, #116	; 0x74
   16508:	18fb      	adds	r3, r7, r3
   1650a:	226e      	movs	r2, #110	; 0x6e
   1650c:	18ba      	adds	r2, r7, r2
   1650e:	8812      	ldrh	r2, [r2, #0]
   16510:	213c      	movs	r1, #60	; 0x3c
   16512:	1a8a      	subs	r2, r1, r2
   16514:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16516:	2374      	movs	r3, #116	; 0x74
   16518:	18fb      	adds	r3, r7, r3
   1651a:	881a      	ldrh	r2, [r3, #0]
   1651c:	68b9      	ldr	r1, [r7, #8]
   1651e:	2324      	movs	r3, #36	; 0x24
   16520:	18fb      	adds	r3, r7, r3
   16522:	0018      	movs	r0, r3
   16524:	4b60      	ldr	r3, [pc, #384]	; (166a8 <rename_to_unique+0x298>)
   16526:	4798      	blx	r3
   16528:	e02a      	b.n	16580 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   1652a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   1652c:	68bb      	ldr	r3, [r7, #8]
   1652e:	1ad2      	subs	r2, r2, r3
   16530:	2374      	movs	r3, #116	; 0x74
   16532:	18fb      	adds	r3, r7, r3
   16534:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16536:	2374      	movs	r3, #116	; 0x74
   16538:	18fb      	adds	r3, r7, r3
   1653a:	881a      	ldrh	r2, [r3, #0]
   1653c:	68b9      	ldr	r1, [r7, #8]
   1653e:	2324      	movs	r3, #36	; 0x24
   16540:	18fb      	adds	r3, r7, r3
   16542:	0018      	movs	r0, r3
   16544:	4b58      	ldr	r3, [pc, #352]	; (166a8 <rename_to_unique+0x298>)
   16546:	4798      	blx	r3
   16548:	e01a      	b.n	16580 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   1654a:	2374      	movs	r3, #116	; 0x74
   1654c:	18fb      	adds	r3, r7, r3
   1654e:	223c      	movs	r2, #60	; 0x3c
   16550:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   16552:	2374      	movs	r3, #116	; 0x74
   16554:	18fb      	adds	r3, r7, r3
   16556:	881a      	ldrh	r2, [r3, #0]
   16558:	68b9      	ldr	r1, [r7, #8]
   1655a:	2324      	movs	r3, #36	; 0x24
   1655c:	18fb      	adds	r3, r7, r3
   1655e:	0018      	movs	r0, r3
   16560:	4b51      	ldr	r3, [pc, #324]	; (166a8 <rename_to_unique+0x298>)
   16562:	4798      	blx	r3
   16564:	e00c      	b.n	16580 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16566:	2374      	movs	r3, #116	; 0x74
   16568:	18fb      	adds	r3, r7, r3
   1656a:	223c      	movs	r2, #60	; 0x3c
   1656c:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   1656e:	2374      	movs	r3, #116	; 0x74
   16570:	18fb      	adds	r3, r7, r3
   16572:	881a      	ldrh	r2, [r3, #0]
   16574:	68b9      	ldr	r1, [r7, #8]
   16576:	2324      	movs	r3, #36	; 0x24
   16578:	18fb      	adds	r3, r7, r3
   1657a:	0018      	movs	r0, r3
   1657c:	4b4a      	ldr	r3, [pc, #296]	; (166a8 <rename_to_unique+0x298>)
   1657e:	4798      	blx	r3
    }

    name[name_len++] = '-';
   16580:	2374      	movs	r3, #116	; 0x74
   16582:	18fb      	adds	r3, r7, r3
   16584:	881b      	ldrh	r3, [r3, #0]
   16586:	2274      	movs	r2, #116	; 0x74
   16588:	18ba      	adds	r2, r7, r2
   1658a:	1c59      	adds	r1, r3, #1
   1658c:	8011      	strh	r1, [r2, #0]
   1658e:	001a      	movs	r2, r3
   16590:	2324      	movs	r3, #36	; 0x24
   16592:	18fb      	adds	r3, r7, r3
   16594:	212d      	movs	r1, #45	; 0x2d
   16596:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16598:	2376      	movs	r3, #118	; 0x76
   1659a:	18fb      	adds	r3, r7, r3
   1659c:	2200      	movs	r2, #0
   1659e:	801a      	strh	r2, [r3, #0]
   165a0:	2372      	movs	r3, #114	; 0x72
   165a2:	18fb      	adds	r3, r7, r3
   165a4:	2201      	movs	r2, #1
   165a6:	801a      	strh	r2, [r3, #0]
   165a8:	e010      	b.n	165cc <rename_to_unique+0x1bc>
        count *= 10;
   165aa:	2372      	movs	r3, #114	; 0x72
   165ac:	18fa      	adds	r2, r7, r3
   165ae:	2372      	movs	r3, #114	; 0x72
   165b0:	18fb      	adds	r3, r7, r3
   165b2:	881b      	ldrh	r3, [r3, #0]
   165b4:	1c19      	adds	r1, r3, #0
   165b6:	0089      	lsls	r1, r1, #2
   165b8:	18cb      	adds	r3, r1, r3
   165ba:	18db      	adds	r3, r3, r3
   165bc:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   165be:	2376      	movs	r3, #118	; 0x76
   165c0:	18fb      	adds	r3, r7, r3
   165c2:	881a      	ldrh	r2, [r3, #0]
   165c4:	2376      	movs	r3, #118	; 0x76
   165c6:	18fb      	adds	r3, r7, r3
   165c8:	3201      	adds	r2, #1
   165ca:	801a      	strh	r2, [r3, #0]
   165cc:	2376      	movs	r3, #118	; 0x76
   165ce:	18fb      	adds	r3, r7, r3
   165d0:	881b      	ldrh	r3, [r3, #0]
   165d2:	2b02      	cmp	r3, #2
   165d4:	d9e9      	bls.n	165aa <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   165d6:	2376      	movs	r3, #118	; 0x76
   165d8:	18fb      	adds	r3, r7, r3
   165da:	2201      	movs	r2, #1
   165dc:	801a      	strh	r2, [r3, #0]
   165de:	e04b      	b.n	16678 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   165e0:	2376      	movs	r3, #118	; 0x76
   165e2:	18fb      	adds	r3, r7, r3
   165e4:	881a      	ldrh	r2, [r3, #0]
   165e6:	4931      	ldr	r1, [pc, #196]	; (166ac <rename_to_unique+0x29c>)
   165e8:	2314      	movs	r3, #20
   165ea:	18fb      	adds	r3, r7, r3
   165ec:	0018      	movs	r0, r3
   165ee:	4b30      	ldr	r3, [pc, #192]	; (166b0 <rename_to_unique+0x2a0>)
   165f0:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   165f2:	2374      	movs	r3, #116	; 0x74
   165f4:	18fb      	adds	r3, r7, r3
   165f6:	881b      	ldrh	r3, [r3, #0]
   165f8:	2224      	movs	r2, #36	; 0x24
   165fa:	18ba      	adds	r2, r7, r2
   165fc:	18d3      	adds	r3, r2, r3
   165fe:	2214      	movs	r2, #20
   16600:	18b9      	adds	r1, r7, r2
   16602:	2203      	movs	r2, #3
   16604:	0018      	movs	r0, r3
   16606:	4b28      	ldr	r3, [pc, #160]	; (166a8 <rename_to_unique+0x298>)
   16608:	4798      	blx	r3
        if (valid_ext) {
   1660a:	2371      	movs	r3, #113	; 0x71
   1660c:	18fb      	adds	r3, r7, r3
   1660e:	781b      	ldrb	r3, [r3, #0]
   16610:	2b00      	cmp	r3, #0
   16612:	d00c      	beq.n	1662e <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16614:	2374      	movs	r3, #116	; 0x74
   16616:	18fb      	adds	r3, r7, r3
   16618:	881b      	ldrh	r3, [r3, #0]
   1661a:	3303      	adds	r3, #3
   1661c:	2224      	movs	r2, #36	; 0x24
   1661e:	18ba      	adds	r2, r7, r2
   16620:	18d3      	adds	r3, r2, r3
   16622:	2218      	movs	r2, #24
   16624:	18ba      	adds	r2, r7, r2
   16626:	0011      	movs	r1, r2
   16628:	0018      	movs	r0, r3
   1662a:	4b1e      	ldr	r3, [pc, #120]	; (166a4 <rename_to_unique+0x294>)
   1662c:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   1662e:	2324      	movs	r3, #36	; 0x24
   16630:	18fa      	adds	r2, r7, r3
   16632:	68fb      	ldr	r3, [r7, #12]
   16634:	0011      	movs	r1, r2
   16636:	0018      	movs	r0, r3
   16638:	4b17      	ldr	r3, [pc, #92]	; (16698 <rename_to_unique+0x288>)
   1663a:	4798      	blx	r3
   1663c:	0003      	movs	r3, r0
   1663e:	001a      	movs	r2, r3
   16640:	2301      	movs	r3, #1
   16642:	4053      	eors	r3, r2
   16644:	b2db      	uxtb	r3, r3
   16646:	2b00      	cmp	r3, #0
   16648:	d00f      	beq.n	1666a <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   1664a:	1dfb      	adds	r3, r7, #7
   1664c:	781a      	ldrb	r2, [r3, #0]
   1664e:	68bb      	ldr	r3, [r7, #8]
   16650:	2100      	movs	r1, #0
   16652:	0018      	movs	r0, r3
   16654:	4b0f      	ldr	r3, [pc, #60]	; (16694 <rename_to_unique+0x284>)
   16656:	4798      	blx	r3
            strcpy(file_path_name, name);
   16658:	2324      	movs	r3, #36	; 0x24
   1665a:	18fa      	adds	r2, r7, r3
   1665c:	68bb      	ldr	r3, [r7, #8]
   1665e:	0011      	movs	r1, r2
   16660:	0018      	movs	r0, r3
   16662:	4b10      	ldr	r3, [pc, #64]	; (166a4 <rename_to_unique+0x294>)
   16664:	4798      	blx	r3
            return true;
   16666:	2301      	movs	r3, #1
   16668:	e00f      	b.n	1668a <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   1666a:	2376      	movs	r3, #118	; 0x76
   1666c:	18fb      	adds	r3, r7, r3
   1666e:	881a      	ldrh	r2, [r3, #0]
   16670:	2376      	movs	r3, #118	; 0x76
   16672:	18fb      	adds	r3, r7, r3
   16674:	3201      	adds	r2, #1
   16676:	801a      	strh	r2, [r3, #0]
   16678:	2376      	movs	r3, #118	; 0x76
   1667a:	18fa      	adds	r2, r7, r3
   1667c:	2372      	movs	r3, #114	; 0x72
   1667e:	18fb      	adds	r3, r7, r3
   16680:	8812      	ldrh	r2, [r2, #0]
   16682:	881b      	ldrh	r3, [r3, #0]
   16684:	429a      	cmp	r2, r3
   16686:	d3ab      	bcc.n	165e0 <rename_to_unique+0x1d0>
        }
    }
    return false;
   16688:	2300      	movs	r3, #0
}
   1668a:	0018      	movs	r0, r3
   1668c:	46bd      	mov	sp, r7
   1668e:	b01e      	add	sp, #120	; 0x78
   16690:	bd80      	pop	{r7, pc}
   16692:	46c0      	nop			; (mov r8, r8)
   16694:	00034c3f 	.word	0x00034c3f
   16698:	000163b9 	.word	0x000163b9
   1669c:	00034ff7 	.word	0x00034ff7
   166a0:	00035051 	.word	0x00035051
   166a4:	00034fab 	.word	0x00034fab
   166a8:	00035027 	.word	0x00035027
   166ac:	000365a4 	.word	0x000365a4
   166b0:	00034efd 	.word	0x00034efd

000166b4 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   166b4:	b590      	push	{r4, r7, lr}
   166b6:	b083      	sub	sp, #12
   166b8:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   166ba:	2001      	movs	r0, #1
   166bc:	4b22      	ldr	r3, [pc, #136]	; (16748 <start_download+0x94>)
   166be:	4798      	blx	r3
   166c0:	0003      	movs	r3, r0
   166c2:	001a      	movs	r2, r3
   166c4:	2301      	movs	r3, #1
   166c6:	4053      	eors	r3, r2
   166c8:	b2db      	uxtb	r3, r3
   166ca:	2b00      	cmp	r3, #0
   166cc:	d005      	beq.n	166da <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   166ce:	4b1f      	ldr	r3, [pc, #124]	; (1674c <start_download+0x98>)
   166d0:	0019      	movs	r1, r3
   166d2:	2001      	movs	r0, #1
   166d4:	4b1e      	ldr	r3, [pc, #120]	; (16750 <start_download+0x9c>)
   166d6:	4798      	blx	r3
        return;
   166d8:	e032      	b.n	16740 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   166da:	2002      	movs	r0, #2
   166dc:	4b1a      	ldr	r3, [pc, #104]	; (16748 <start_download+0x94>)
   166de:	4798      	blx	r3
   166e0:	0003      	movs	r3, r0
   166e2:	001a      	movs	r2, r3
   166e4:	2301      	movs	r3, #1
   166e6:	4053      	eors	r3, r2
   166e8:	b2db      	uxtb	r3, r3
   166ea:	2b00      	cmp	r3, #0
   166ec:	d005      	beq.n	166fa <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   166ee:	4b19      	ldr	r3, [pc, #100]	; (16754 <start_download+0xa0>)
   166f0:	0019      	movs	r1, r3
   166f2:	2001      	movs	r0, #1
   166f4:	4b16      	ldr	r3, [pc, #88]	; (16750 <start_download+0x9c>)
   166f6:	4798      	blx	r3
        return;
   166f8:	e022      	b.n	16740 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   166fa:	2004      	movs	r0, #4
   166fc:	4b12      	ldr	r3, [pc, #72]	; (16748 <start_download+0x94>)
   166fe:	4798      	blx	r3
   16700:	1e03      	subs	r3, r0, #0
   16702:	d005      	beq.n	16710 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16704:	4b14      	ldr	r3, [pc, #80]	; (16758 <start_download+0xa4>)
   16706:	0019      	movs	r1, r3
   16708:	2001      	movs	r0, #1
   1670a:	4b11      	ldr	r3, [pc, #68]	; (16750 <start_download+0x9c>)
   1670c:	4798      	blx	r3
        return;
   1670e:	e017      	b.n	16740 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16710:	2008      	movs	r0, #8
   16712:	4b0d      	ldr	r3, [pc, #52]	; (16748 <start_download+0x94>)
   16714:	4798      	blx	r3
   16716:	1e03      	subs	r3, r0, #0
   16718:	d005      	beq.n	16726 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   1671a:	4b10      	ldr	r3, [pc, #64]	; (1675c <start_download+0xa8>)
   1671c:	0019      	movs	r1, r3
   1671e:	2001      	movs	r0, #1
   16720:	4b0b      	ldr	r3, [pc, #44]	; (16750 <start_download+0x9c>)
   16722:	4798      	blx	r3
        return;
   16724:	e00c      	b.n	16740 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16726:	4b0e      	ldr	r3, [pc, #56]	; (16760 <start_download+0xac>)
   16728:	0019      	movs	r1, r3
   1672a:	2001      	movs	r0, #1
   1672c:	4b08      	ldr	r3, [pc, #32]	; (16750 <start_download+0x9c>)
   1672e:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16730:	490c      	ldr	r1, [pc, #48]	; (16764 <start_download+0xb0>)
   16732:	480d      	ldr	r0, [pc, #52]	; (16768 <start_download+0xb4>)
   16734:	2300      	movs	r3, #0
   16736:	9300      	str	r3, [sp, #0]
   16738:	2300      	movs	r3, #0
   1673a:	2201      	movs	r2, #1
   1673c:	4c0b      	ldr	r4, [pc, #44]	; (1676c <start_download+0xb8>)
   1673e:	47a0      	blx	r4
}
   16740:	46bd      	mov	sp, r7
   16742:	b001      	add	sp, #4
   16744:	bd90      	pop	{r4, r7, pc}
   16746:	46c0      	nop			; (mov r8, r8)
   16748:	0001638d 	.word	0x0001638d
   1674c:	000365ac 	.word	0x000365ac
   16750:	0001e4d1 	.word	0x0001e4d1
   16754:	000365d8 	.word	0x000365d8
   16758:	00036604 	.word	0x00036604
   1675c:	00036630 	.word	0x00036630
   16760:	0003665c 	.word	0x0003665c
   16764:	00036688 	.word	0x00036688
   16768:	20004494 	.word	0x20004494
   1676c:	000311bd 	.word	0x000311bd

00016770 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   16770:	b5b0      	push	{r4, r5, r7, lr}
   16772:	b086      	sub	sp, #24
   16774:	af00      	add	r7, sp, #0
   16776:	6078      	str	r0, [r7, #4]
   16778:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   1677a:	687b      	ldr	r3, [r7, #4]
   1677c:	2b00      	cmp	r3, #0
   1677e:	d002      	beq.n	16786 <store_file_packet+0x16>
   16780:	683b      	ldr	r3, [r7, #0]
   16782:	2b00      	cmp	r3, #0
   16784:	d105      	bne.n	16792 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16786:	4b58      	ldr	r3, [pc, #352]	; (168e8 <store_file_packet+0x178>)
   16788:	0019      	movs	r1, r3
   1678a:	2001      	movs	r0, #1
   1678c:	4b57      	ldr	r3, [pc, #348]	; (168ec <store_file_packet+0x17c>)
   1678e:	4798      	blx	r3
        return;
   16790:	e0a6      	b.n	168e0 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   16792:	2008      	movs	r0, #8
   16794:	4b56      	ldr	r3, [pc, #344]	; (168f0 <store_file_packet+0x180>)
   16796:	4798      	blx	r3
   16798:	0003      	movs	r3, r0
   1679a:	001a      	movs	r2, r3
   1679c:	2301      	movs	r3, #1
   1679e:	4053      	eors	r3, r2
   167a0:	b2db      	uxtb	r3, r3
   167a2:	2b00      	cmp	r3, #0
   167a4:	d055      	beq.n	16852 <store_file_packet+0xe2>
        char *cp = NULL;
   167a6:	2300      	movs	r3, #0
   167a8:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   167aa:	4b52      	ldr	r3, [pc, #328]	; (168f4 <store_file_packet+0x184>)
   167ac:	2230      	movs	r2, #48	; 0x30
   167ae:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   167b0:	4b50      	ldr	r3, [pc, #320]	; (168f4 <store_file_packet+0x184>)
   167b2:	223a      	movs	r2, #58	; 0x3a
   167b4:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   167b6:	4b50      	ldr	r3, [pc, #320]	; (168f8 <store_file_packet+0x188>)
   167b8:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   167ba:	e002      	b.n	167c2 <store_file_packet+0x52>
            cp--;
   167bc:	697b      	ldr	r3, [r7, #20]
   167be:	3b01      	subs	r3, #1
   167c0:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   167c2:	697b      	ldr	r3, [r7, #20]
   167c4:	781b      	ldrb	r3, [r3, #0]
   167c6:	2b2f      	cmp	r3, #47	; 0x2f
   167c8:	d1f8      	bne.n	167bc <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   167ca:	697b      	ldr	r3, [r7, #20]
   167cc:	0018      	movs	r0, r3
   167ce:	4b4b      	ldr	r3, [pc, #300]	; (168fc <store_file_packet+0x18c>)
   167d0:	4798      	blx	r3
   167d2:	0003      	movs	r3, r0
   167d4:	2b01      	cmp	r3, #1
   167d6:	d924      	bls.n	16822 <store_file_packet+0xb2>
            cp++;
   167d8:	697b      	ldr	r3, [r7, #20]
   167da:	3301      	adds	r3, #1
   167dc:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   167de:	697a      	ldr	r2, [r7, #20]
   167e0:	4b47      	ldr	r3, [pc, #284]	; (16900 <store_file_packet+0x190>)
   167e2:	0011      	movs	r1, r2
   167e4:	0018      	movs	r0, r3
   167e6:	4b47      	ldr	r3, [pc, #284]	; (16904 <store_file_packet+0x194>)
   167e8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   167ea:	4942      	ldr	r1, [pc, #264]	; (168f4 <store_file_packet+0x184>)
   167ec:	4b46      	ldr	r3, [pc, #280]	; (16908 <store_file_packet+0x198>)
   167ee:	2240      	movs	r2, #64	; 0x40
   167f0:	0018      	movs	r0, r3
   167f2:	4b46      	ldr	r3, [pc, #280]	; (1690c <store_file_packet+0x19c>)
   167f4:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   167f6:	4a3f      	ldr	r2, [pc, #252]	; (168f4 <store_file_packet+0x184>)
   167f8:	4b45      	ldr	r3, [pc, #276]	; (16910 <store_file_packet+0x1a0>)
   167fa:	0019      	movs	r1, r3
   167fc:	2001      	movs	r0, #1
   167fe:	4b3b      	ldr	r3, [pc, #236]	; (168ec <store_file_packet+0x17c>)
   16800:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16802:	2313      	movs	r3, #19
   16804:	18fc      	adds	r4, r7, r3
   16806:	493b      	ldr	r1, [pc, #236]	; (168f4 <store_file_packet+0x184>)
   16808:	4b3f      	ldr	r3, [pc, #252]	; (16908 <store_file_packet+0x198>)
   1680a:	220a      	movs	r2, #10
   1680c:	0018      	movs	r0, r3
   1680e:	4b41      	ldr	r3, [pc, #260]	; (16914 <store_file_packet+0x1a4>)
   16810:	4798      	blx	r3
   16812:	0003      	movs	r3, r0
   16814:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16816:	2313      	movs	r3, #19
   16818:	18fb      	adds	r3, r7, r3
   1681a:	781b      	ldrb	r3, [r3, #0]
   1681c:	2b00      	cmp	r3, #0
   1681e:	d012      	beq.n	16846 <store_file_packet+0xd6>
   16820:	e008      	b.n	16834 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   16822:	4b3d      	ldr	r3, [pc, #244]	; (16918 <store_file_packet+0x1a8>)
   16824:	0019      	movs	r1, r3
   16826:	2001      	movs	r0, #1
   16828:	4b30      	ldr	r3, [pc, #192]	; (168ec <store_file_packet+0x17c>)
   1682a:	4798      	blx	r3
            add_state(CANCELED);
   1682c:	2020      	movs	r0, #32
   1682e:	4b3b      	ldr	r3, [pc, #236]	; (1691c <store_file_packet+0x1ac>)
   16830:	4798      	blx	r3
            return;
   16832:	e055      	b.n	168e0 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   16834:	2313      	movs	r3, #19
   16836:	18fb      	adds	r3, r7, r3
   16838:	781a      	ldrb	r2, [r3, #0]
   1683a:	4b39      	ldr	r3, [pc, #228]	; (16920 <store_file_packet+0x1b0>)
   1683c:	0019      	movs	r1, r3
   1683e:	2001      	movs	r0, #1
   16840:	4b2a      	ldr	r3, [pc, #168]	; (168ec <store_file_packet+0x17c>)
   16842:	4798      	blx	r3
            return;
   16844:	e04c      	b.n	168e0 <store_file_packet+0x170>
        }

        received_file_size = 0;
   16846:	4b37      	ldr	r3, [pc, #220]	; (16924 <store_file_packet+0x1b4>)
   16848:	2200      	movs	r2, #0
   1684a:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   1684c:	2008      	movs	r0, #8
   1684e:	4b33      	ldr	r3, [pc, #204]	; (1691c <store_file_packet+0x1ac>)
   16850:	4798      	blx	r3
    }

    if (data != NULL) {
   16852:	687b      	ldr	r3, [r7, #4]
   16854:	2b00      	cmp	r3, #0
   16856:	d043      	beq.n	168e0 <store_file_packet+0x170>
        UINT wsize = 0;
   16858:	2300      	movs	r3, #0
   1685a:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   1685c:	2313      	movs	r3, #19
   1685e:	18fc      	adds	r4, r7, r3
   16860:	230c      	movs	r3, #12
   16862:	18fb      	adds	r3, r7, r3
   16864:	683a      	ldr	r2, [r7, #0]
   16866:	6879      	ldr	r1, [r7, #4]
   16868:	4827      	ldr	r0, [pc, #156]	; (16908 <store_file_packet+0x198>)
   1686a:	4d2f      	ldr	r5, [pc, #188]	; (16928 <store_file_packet+0x1b8>)
   1686c:	47a8      	blx	r5
   1686e:	0003      	movs	r3, r0
   16870:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16872:	2313      	movs	r3, #19
   16874:	18fb      	adds	r3, r7, r3
   16876:	781b      	ldrb	r3, [r3, #0]
   16878:	2b00      	cmp	r3, #0
   1687a:	d00c      	beq.n	16896 <store_file_packet+0x126>
            f_close(&file_object);
   1687c:	4b22      	ldr	r3, [pc, #136]	; (16908 <store_file_packet+0x198>)
   1687e:	0018      	movs	r0, r3
   16880:	4b2a      	ldr	r3, [pc, #168]	; (1692c <store_file_packet+0x1bc>)
   16882:	4798      	blx	r3
            add_state(CANCELED);
   16884:	2020      	movs	r0, #32
   16886:	4b25      	ldr	r3, [pc, #148]	; (1691c <store_file_packet+0x1ac>)
   16888:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   1688a:	4b29      	ldr	r3, [pc, #164]	; (16930 <store_file_packet+0x1c0>)
   1688c:	0019      	movs	r1, r3
   1688e:	2001      	movs	r0, #1
   16890:	4b16      	ldr	r3, [pc, #88]	; (168ec <store_file_packet+0x17c>)
   16892:	4798      	blx	r3
            return;
   16894:	e024      	b.n	168e0 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16896:	4b23      	ldr	r3, [pc, #140]	; (16924 <store_file_packet+0x1b4>)
   16898:	681a      	ldr	r2, [r3, #0]
   1689a:	68fb      	ldr	r3, [r7, #12]
   1689c:	18d2      	adds	r2, r2, r3
   1689e:	4b21      	ldr	r3, [pc, #132]	; (16924 <store_file_packet+0x1b4>)
   168a0:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   168a2:	4b20      	ldr	r3, [pc, #128]	; (16924 <store_file_packet+0x1b4>)
   168a4:	681a      	ldr	r2, [r3, #0]
   168a6:	4b23      	ldr	r3, [pc, #140]	; (16934 <store_file_packet+0x1c4>)
   168a8:	681b      	ldr	r3, [r3, #0]
   168aa:	4923      	ldr	r1, [pc, #140]	; (16938 <store_file_packet+0x1c8>)
   168ac:	2001      	movs	r0, #1
   168ae:	4c0f      	ldr	r4, [pc, #60]	; (168ec <store_file_packet+0x17c>)
   168b0:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   168b2:	4b1c      	ldr	r3, [pc, #112]	; (16924 <store_file_packet+0x1b4>)
   168b4:	681a      	ldr	r2, [r3, #0]
   168b6:	4b1f      	ldr	r3, [pc, #124]	; (16934 <store_file_packet+0x1c4>)
   168b8:	681b      	ldr	r3, [r3, #0]
   168ba:	429a      	cmp	r2, r3
   168bc:	d310      	bcc.n	168e0 <store_file_packet+0x170>
            f_close(&file_object);
   168be:	4b12      	ldr	r3, [pc, #72]	; (16908 <store_file_packet+0x198>)
   168c0:	0018      	movs	r0, r3
   168c2:	4b1a      	ldr	r3, [pc, #104]	; (1692c <store_file_packet+0x1bc>)
   168c4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   168c6:	4b1d      	ldr	r3, [pc, #116]	; (1693c <store_file_packet+0x1cc>)
   168c8:	0019      	movs	r1, r3
   168ca:	2001      	movs	r0, #1
   168cc:	4b07      	ldr	r3, [pc, #28]	; (168ec <store_file_packet+0x17c>)
   168ce:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   168d0:	2100      	movs	r1, #0
   168d2:	2017      	movs	r0, #23
   168d4:	4b1a      	ldr	r3, [pc, #104]	; (16940 <store_file_packet+0x1d0>)
   168d6:	4798      	blx	r3
            add_state(COMPLETED);
   168d8:	2010      	movs	r0, #16
   168da:	4b10      	ldr	r3, [pc, #64]	; (1691c <store_file_packet+0x1ac>)
   168dc:	4798      	blx	r3
            return;
   168de:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   168e0:	46bd      	mov	sp, r7
   168e2:	b006      	add	sp, #24
   168e4:	bdb0      	pop	{r4, r5, r7, pc}
   168e6:	46c0      	nop			; (mov r8, r8)
   168e8:	000366b4 	.word	0x000366b4
   168ec:	0001e4d1 	.word	0x0001e4d1
   168f0:	0001638d 	.word	0x0001638d
   168f4:	2000005c 	.word	0x2000005c
   168f8:	000366b2 	.word	0x000366b2
   168fc:	00034ff7 	.word	0x00034ff7
   16900:	2000005e 	.word	0x2000005e
   16904:	00034fab 	.word	0x00034fab
   16908:	20000460 	.word	0x20000460
   1690c:	00016411 	.word	0x00016411
   16910:	00036718 	.word	0x00036718
   16914:	0002db69 	.word	0x0002db69
   16918:	000366d8 	.word	0x000366d8
   1691c:	00016365 	.word	0x00016365
   16920:	00036740 	.word	0x00036740
   16924:	20000488 	.word	0x20000488
   16928:	0002e099 	.word	0x0002e099
   1692c:	0002e569 	.word	0x0002e569
   16930:	00036774 	.word	0x00036774
   16934:	20000484 	.word	0x20000484
   16938:	000367b0 	.word	0x000367b0
   1693c:	000367e4 	.word	0x000367e4
   16940:	000162c9 	.word	0x000162c9

00016944 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   16944:	b590      	push	{r4, r7, lr}
   16946:	b085      	sub	sp, #20
   16948:	af00      	add	r7, sp, #0
   1694a:	60f8      	str	r0, [r7, #12]
   1694c:	60b9      	str	r1, [r7, #8]
   1694e:	607a      	str	r2, [r7, #4]
    switch (type) {
   16950:	68bb      	ldr	r3, [r7, #8]
   16952:	2b04      	cmp	r3, #4
   16954:	d900      	bls.n	16958 <http_client_callback+0x14>
   16956:	e077      	b.n	16a48 <http_client_callback+0x104>
   16958:	68bb      	ldr	r3, [r7, #8]
   1695a:	009a      	lsls	r2, r3, #2
   1695c:	4b3c      	ldr	r3, [pc, #240]	; (16a50 <http_client_callback+0x10c>)
   1695e:	18d3      	adds	r3, r2, r3
   16960:	681b      	ldr	r3, [r3, #0]
   16962:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   16964:	4b3b      	ldr	r3, [pc, #236]	; (16a54 <http_client_callback+0x110>)
   16966:	0019      	movs	r1, r3
   16968:	2001      	movs	r0, #1
   1696a:	4b3b      	ldr	r3, [pc, #236]	; (16a58 <http_client_callback+0x114>)
   1696c:	4798      	blx	r3
            break;
   1696e:	e06b      	b.n	16a48 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   16970:	4b3a      	ldr	r3, [pc, #232]	; (16a5c <http_client_callback+0x118>)
   16972:	0019      	movs	r1, r3
   16974:	2001      	movs	r0, #1
   16976:	4b38      	ldr	r3, [pc, #224]	; (16a58 <http_client_callback+0x114>)
   16978:	4798      	blx	r3
            add_state(GET_REQUESTED);
   1697a:	2004      	movs	r0, #4
   1697c:	4b38      	ldr	r3, [pc, #224]	; (16a60 <http_client_callback+0x11c>)
   1697e:	4798      	blx	r3
            break;
   16980:	e062      	b.n	16a48 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   16982:	687b      	ldr	r3, [r7, #4]
   16984:	881b      	ldrh	r3, [r3, #0]
   16986:	001a      	movs	r2, r3
   16988:	687b      	ldr	r3, [r7, #4]
   1698a:	685b      	ldr	r3, [r3, #4]
   1698c:	4935      	ldr	r1, [pc, #212]	; (16a64 <http_client_callback+0x120>)
   1698e:	2001      	movs	r0, #1
   16990:	4c31      	ldr	r4, [pc, #196]	; (16a58 <http_client_callback+0x114>)
   16992:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   16994:	687b      	ldr	r3, [r7, #4]
   16996:	881b      	ldrh	r3, [r3, #0]
   16998:	2bc8      	cmp	r3, #200	; 0xc8
   1699a:	d10d      	bne.n	169b8 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   1699c:	687b      	ldr	r3, [r7, #4]
   1699e:	685a      	ldr	r2, [r3, #4]
   169a0:	4b31      	ldr	r3, [pc, #196]	; (16a68 <http_client_callback+0x124>)
   169a2:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   169a4:	4b31      	ldr	r3, [pc, #196]	; (16a6c <http_client_callback+0x128>)
   169a6:	2200      	movs	r2, #0
   169a8:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   169aa:	687b      	ldr	r3, [r7, #4]
   169ac:	685a      	ldr	r2, [r3, #4]
   169ae:	2380      	movs	r3, #128	; 0x80
   169b0:	009b      	lsls	r3, r3, #2
   169b2:	429a      	cmp	r2, r3
   169b4:	d843      	bhi.n	16a3e <http_client_callback+0xfa>
   169b6:	e003      	b.n	169c0 <http_client_callback+0x7c>
                add_state(CANCELED);
   169b8:	2020      	movs	r0, #32
   169ba:	4b29      	ldr	r3, [pc, #164]	; (16a60 <http_client_callback+0x11c>)
   169bc:	4798      	blx	r3
                return;
   169be:	e043      	b.n	16a48 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   169c0:	687b      	ldr	r3, [r7, #4]
   169c2:	689a      	ldr	r2, [r3, #8]
   169c4:	687b      	ldr	r3, [r7, #4]
   169c6:	685b      	ldr	r3, [r3, #4]
   169c8:	0019      	movs	r1, r3
   169ca:	0010      	movs	r0, r2
   169cc:	4b28      	ldr	r3, [pc, #160]	; (16a70 <http_client_callback+0x12c>)
   169ce:	4798      	blx	r3
                add_state(COMPLETED);
   169d0:	2010      	movs	r0, #16
   169d2:	4b23      	ldr	r3, [pc, #140]	; (16a60 <http_client_callback+0x11c>)
   169d4:	4798      	blx	r3
            }
            break;
   169d6:	e032      	b.n	16a3e <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   169d8:	687b      	ldr	r3, [r7, #4]
   169da:	685a      	ldr	r2, [r3, #4]
   169dc:	687b      	ldr	r3, [r7, #4]
   169de:	681b      	ldr	r3, [r3, #0]
   169e0:	0019      	movs	r1, r3
   169e2:	0010      	movs	r0, r2
   169e4:	4b22      	ldr	r3, [pc, #136]	; (16a70 <http_client_callback+0x12c>)
   169e6:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   169e8:	687b      	ldr	r3, [r7, #4]
   169ea:	7a1b      	ldrb	r3, [r3, #8]
   169ec:	2b00      	cmp	r3, #0
   169ee:	d028      	beq.n	16a42 <http_client_callback+0xfe>
                add_state(COMPLETED);
   169f0:	2010      	movs	r0, #16
   169f2:	4b1b      	ldr	r3, [pc, #108]	; (16a60 <http_client_callback+0x11c>)
   169f4:	4798      	blx	r3
            }

            break;
   169f6:	e024      	b.n	16a42 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   169f8:	687b      	ldr	r3, [r7, #4]
   169fa:	681a      	ldr	r2, [r3, #0]
   169fc:	4b1d      	ldr	r3, [pc, #116]	; (16a74 <http_client_callback+0x130>)
   169fe:	0019      	movs	r1, r3
   16a00:	2001      	movs	r0, #1
   16a02:	4b15      	ldr	r3, [pc, #84]	; (16a58 <http_client_callback+0x114>)
   16a04:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   16a06:	687b      	ldr	r3, [r7, #4]
   16a08:	681b      	ldr	r3, [r3, #0]
   16a0a:	330b      	adds	r3, #11
   16a0c:	d11b      	bne.n	16a46 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   16a0e:	2008      	movs	r0, #8
   16a10:	4b19      	ldr	r3, [pc, #100]	; (16a78 <http_client_callback+0x134>)
   16a12:	4798      	blx	r3
   16a14:	1e03      	subs	r3, r0, #0
   16a16:	d006      	beq.n	16a26 <http_client_callback+0xe2>
                    f_close(&file_object);
   16a18:	4b18      	ldr	r3, [pc, #96]	; (16a7c <http_client_callback+0x138>)
   16a1a:	0018      	movs	r0, r3
   16a1c:	4b18      	ldr	r3, [pc, #96]	; (16a80 <http_client_callback+0x13c>)
   16a1e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16a20:	2008      	movs	r0, #8
   16a22:	4b18      	ldr	r3, [pc, #96]	; (16a84 <http_client_callback+0x140>)
   16a24:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   16a26:	2004      	movs	r0, #4
   16a28:	4b13      	ldr	r3, [pc, #76]	; (16a78 <http_client_callback+0x134>)
   16a2a:	4798      	blx	r3
   16a2c:	1e03      	subs	r3, r0, #0
   16a2e:	d002      	beq.n	16a36 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   16a30:	2004      	movs	r0, #4
   16a32:	4b14      	ldr	r3, [pc, #80]	; (16a84 <http_client_callback+0x140>)
   16a34:	4798      	blx	r3
                }

                start_download();
   16a36:	4b14      	ldr	r3, [pc, #80]	; (16a88 <http_client_callback+0x144>)
   16a38:	4798      	blx	r3
            }

            break;
   16a3a:	46c0      	nop			; (mov r8, r8)
   16a3c:	e003      	b.n	16a46 <http_client_callback+0x102>
            break;
   16a3e:	46c0      	nop			; (mov r8, r8)
   16a40:	e002      	b.n	16a48 <http_client_callback+0x104>
            break;
   16a42:	46c0      	nop			; (mov r8, r8)
   16a44:	e000      	b.n	16a48 <http_client_callback+0x104>
            break;
   16a46:	46c0      	nop			; (mov r8, r8)
    }
}
   16a48:	46bd      	mov	sp, r7
   16a4a:	b005      	add	sp, #20
   16a4c:	bd90      	pop	{r4, r7, pc}
   16a4e:	46c0      	nop			; (mov r8, r8)
   16a50:	00036e80 	.word	0x00036e80
   16a54:	00036818 	.word	0x00036818
   16a58:	0001e4d1 	.word	0x0001e4d1
   16a5c:	00036850 	.word	0x00036850
   16a60:	00016365 	.word	0x00016365
   16a64:	0003687c 	.word	0x0003687c
   16a68:	20000484 	.word	0x20000484
   16a6c:	20000488 	.word	0x20000488
   16a70:	00016771 	.word	0x00016771
   16a74:	000368b8 	.word	0x000368b8
   16a78:	0001638d 	.word	0x0001638d
   16a7c:	20000460 	.word	0x20000460
   16a80:	0002e569 	.word	0x0002e569
   16a84:	00016331 	.word	0x00016331
   16a88:	000166b5 	.word	0x000166b5

00016a8c <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   16a8c:	b580      	push	{r7, lr}
   16a8e:	b082      	sub	sp, #8
   16a90:	af00      	add	r7, sp, #0
   16a92:	603a      	str	r2, [r7, #0]
   16a94:	1dfb      	adds	r3, r7, #7
   16a96:	1c02      	adds	r2, r0, #0
   16a98:	701a      	strb	r2, [r3, #0]
   16a9a:	1dbb      	adds	r3, r7, #6
   16a9c:	1c0a      	adds	r2, r1, #0
   16a9e:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   16aa0:	683a      	ldr	r2, [r7, #0]
   16aa2:	1dbb      	adds	r3, r7, #6
   16aa4:	7819      	ldrb	r1, [r3, #0]
   16aa6:	1dfb      	adds	r3, r7, #7
   16aa8:	781b      	ldrb	r3, [r3, #0]
   16aaa:	b25b      	sxtb	r3, r3
   16aac:	0018      	movs	r0, r3
   16aae:	4b03      	ldr	r3, [pc, #12]	; (16abc <socket_cb+0x30>)
   16ab0:	4798      	blx	r3
}
   16ab2:	46c0      	nop			; (mov r8, r8)
   16ab4:	46bd      	mov	sp, r7
   16ab6:	b002      	add	sp, #8
   16ab8:	bd80      	pop	{r7, pc}
   16aba:	46c0      	nop			; (mov r8, r8)
   16abc:	00030ecd 	.word	0x00030ecd

00016ac0 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   16ac0:	b5b0      	push	{r4, r5, r7, lr}
   16ac2:	b086      	sub	sp, #24
   16ac4:	af04      	add	r7, sp, #16
   16ac6:	6078      	str	r0, [r7, #4]
   16ac8:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   16aca:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   16acc:	22ff      	movs	r2, #255	; 0xff
   16ace:	4013      	ands	r3, r2
   16ad0:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   16ad2:	683b      	ldr	r3, [r7, #0]
   16ad4:	0a1b      	lsrs	r3, r3, #8
   16ad6:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   16ad8:	23ff      	movs	r3, #255	; 0xff
   16ada:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   16adc:	683a      	ldr	r2, [r7, #0]
   16ade:	0c12      	lsrs	r2, r2, #16
   16ae0:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   16ae2:	22ff      	movs	r2, #255	; 0xff
   16ae4:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   16ae6:	6839      	ldr	r1, [r7, #0]
   16ae8:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   16aea:	000d      	movs	r5, r1
   16aec:	6878      	ldr	r0, [r7, #4]
   16aee:	4909      	ldr	r1, [pc, #36]	; (16b14 <resolve_cb+0x54>)
   16af0:	9502      	str	r5, [sp, #8]
   16af2:	9201      	str	r2, [sp, #4]
   16af4:	9300      	str	r3, [sp, #0]
   16af6:	0023      	movs	r3, r4
   16af8:	0002      	movs	r2, r0
   16afa:	2001      	movs	r0, #1
   16afc:	4c06      	ldr	r4, [pc, #24]	; (16b18 <resolve_cb+0x58>)
   16afe:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   16b00:	683a      	ldr	r2, [r7, #0]
   16b02:	687b      	ldr	r3, [r7, #4]
   16b04:	0011      	movs	r1, r2
   16b06:	0018      	movs	r0, r3
   16b08:	4b04      	ldr	r3, [pc, #16]	; (16b1c <resolve_cb+0x5c>)
   16b0a:	4798      	blx	r3
}
   16b0c:	46c0      	nop			; (mov r8, r8)
   16b0e:	46bd      	mov	sp, r7
   16b10:	b002      	add	sp, #8
   16b12:	bdb0      	pop	{r4, r5, r7, pc}
   16b14:	000368e8 	.word	0x000368e8
   16b18:	0001e4d1 	.word	0x0001e4d1
   16b1c:	00031031 	.word	0x00031031

00016b20 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   16b20:	b590      	push	{r4, r7, lr}
   16b22:	b087      	sub	sp, #28
   16b24:	af02      	add	r7, sp, #8
   16b26:	0002      	movs	r2, r0
   16b28:	6039      	str	r1, [r7, #0]
   16b2a:	1dfb      	adds	r3, r7, #7
   16b2c:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   16b2e:	1dfb      	adds	r3, r7, #7
   16b30:	781b      	ldrb	r3, [r3, #0]
   16b32:	2b2c      	cmp	r3, #44	; 0x2c
   16b34:	d002      	beq.n	16b3c <wifi_cb+0x1c>
   16b36:	2b32      	cmp	r3, #50	; 0x32
   16b38:	d03d      	beq.n	16bb6 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   16b3a:	e06f      	b.n	16c1c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   16b3c:	683b      	ldr	r3, [r7, #0]
   16b3e:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   16b40:	68fb      	ldr	r3, [r7, #12]
   16b42:	781b      	ldrb	r3, [r3, #0]
   16b44:	2b01      	cmp	r3, #1
   16b46:	d107      	bne.n	16b58 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   16b48:	4b36      	ldr	r3, [pc, #216]	; (16c24 <wifi_cb+0x104>)
   16b4a:	0019      	movs	r1, r3
   16b4c:	2001      	movs	r0, #1
   16b4e:	4b36      	ldr	r3, [pc, #216]	; (16c28 <wifi_cb+0x108>)
   16b50:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   16b52:	4b36      	ldr	r3, [pc, #216]	; (16c2c <wifi_cb+0x10c>)
   16b54:	4798      	blx	r3
            break;
   16b56:	e05e      	b.n	16c16 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   16b58:	68fb      	ldr	r3, [r7, #12]
   16b5a:	781b      	ldrb	r3, [r3, #0]
   16b5c:	2b00      	cmp	r3, #0
   16b5e:	d15a      	bne.n	16c16 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   16b60:	4b33      	ldr	r3, [pc, #204]	; (16c30 <wifi_cb+0x110>)
   16b62:	0019      	movs	r1, r3
   16b64:	2001      	movs	r0, #1
   16b66:	4b30      	ldr	r3, [pc, #192]	; (16c28 <wifi_cb+0x108>)
   16b68:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   16b6a:	2002      	movs	r0, #2
   16b6c:	4b31      	ldr	r3, [pc, #196]	; (16c34 <wifi_cb+0x114>)
   16b6e:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   16b70:	2008      	movs	r0, #8
   16b72:	4b31      	ldr	r3, [pc, #196]	; (16c38 <wifi_cb+0x118>)
   16b74:	4798      	blx	r3
   16b76:	1e03      	subs	r3, r0, #0
   16b78:	d006      	beq.n	16b88 <wifi_cb+0x68>
                    f_close(&file_object);
   16b7a:	4b30      	ldr	r3, [pc, #192]	; (16c3c <wifi_cb+0x11c>)
   16b7c:	0018      	movs	r0, r3
   16b7e:	4b30      	ldr	r3, [pc, #192]	; (16c40 <wifi_cb+0x120>)
   16b80:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   16b82:	2008      	movs	r0, #8
   16b84:	4b2b      	ldr	r3, [pc, #172]	; (16c34 <wifi_cb+0x114>)
   16b86:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   16b88:	2004      	movs	r0, #4
   16b8a:	4b2b      	ldr	r3, [pc, #172]	; (16c38 <wifi_cb+0x118>)
   16b8c:	4798      	blx	r3
   16b8e:	1e03      	subs	r3, r0, #0
   16b90:	d002      	beq.n	16b98 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   16b92:	2004      	movs	r0, #4
   16b94:	4b27      	ldr	r3, [pc, #156]	; (16c34 <wifi_cb+0x114>)
   16b96:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   16b98:	4b2a      	ldr	r3, [pc, #168]	; (16c44 <wifi_cb+0x124>)
   16b9a:	2101      	movs	r1, #1
   16b9c:	0018      	movs	r0, r3
   16b9e:	4b2a      	ldr	r3, [pc, #168]	; (16c48 <wifi_cb+0x128>)
   16ba0:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   16ba2:	4a2a      	ldr	r2, [pc, #168]	; (16c4c <wifi_cb+0x12c>)
   16ba4:	482a      	ldr	r0, [pc, #168]	; (16c50 <wifi_cb+0x130>)
   16ba6:	23ff      	movs	r3, #255	; 0xff
   16ba8:	9300      	str	r3, [sp, #0]
   16baa:	0013      	movs	r3, r2
   16bac:	2202      	movs	r2, #2
   16bae:	2106      	movs	r1, #6
   16bb0:	4c28      	ldr	r4, [pc, #160]	; (16c54 <wifi_cb+0x134>)
   16bb2:	47a0      	blx	r4
            break;
   16bb4:	e02f      	b.n	16c16 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   16bb6:	683b      	ldr	r3, [r7, #0]
   16bb8:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   16bba:	68bb      	ldr	r3, [r7, #8]
   16bbc:	781b      	ldrb	r3, [r3, #0]
   16bbe:	0018      	movs	r0, r3
   16bc0:	68bb      	ldr	r3, [r7, #8]
   16bc2:	3301      	adds	r3, #1
   16bc4:	781b      	ldrb	r3, [r3, #0]
   16bc6:	001c      	movs	r4, r3
   16bc8:	68bb      	ldr	r3, [r7, #8]
   16bca:	3302      	adds	r3, #2
   16bcc:	781b      	ldrb	r3, [r3, #0]
   16bce:	001a      	movs	r2, r3
   16bd0:	68bb      	ldr	r3, [r7, #8]
   16bd2:	3303      	adds	r3, #3
   16bd4:	781b      	ldrb	r3, [r3, #0]
   16bd6:	4920      	ldr	r1, [pc, #128]	; (16c58 <wifi_cb+0x138>)
   16bd8:	9301      	str	r3, [sp, #4]
   16bda:	9200      	str	r2, [sp, #0]
   16bdc:	0023      	movs	r3, r4
   16bde:	0002      	movs	r2, r0
   16be0:	2001      	movs	r0, #1
   16be2:	4c11      	ldr	r4, [pc, #68]	; (16c28 <wifi_cb+0x108>)
   16be4:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   16be6:	2002      	movs	r0, #2
   16be8:	4b1c      	ldr	r3, [pc, #112]	; (16c5c <wifi_cb+0x13c>)
   16bea:	4798      	blx	r3
            if (do_download_flag == 1) {
   16bec:	4b1c      	ldr	r3, [pc, #112]	; (16c60 <wifi_cb+0x140>)
   16bee:	781b      	ldrb	r3, [r3, #0]
   16bf0:	2b01      	cmp	r3, #1
   16bf2:	d102      	bne.n	16bfa <wifi_cb+0xda>
                start_download();
   16bf4:	4b1b      	ldr	r3, [pc, #108]	; (16c64 <wifi_cb+0x144>)
   16bf6:	4798      	blx	r3
        } break;
   16bf8:	e00f      	b.n	16c1a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   16bfa:	4a1b      	ldr	r2, [pc, #108]	; (16c68 <wifi_cb+0x148>)
   16bfc:	4b11      	ldr	r3, [pc, #68]	; (16c44 <wifi_cb+0x124>)
   16bfe:	0011      	movs	r1, r2
   16c00:	0018      	movs	r0, r3
   16c02:	4b1a      	ldr	r3, [pc, #104]	; (16c6c <wifi_cb+0x14c>)
   16c04:	4798      	blx	r3
   16c06:	1e03      	subs	r3, r0, #0
   16c08:	d007      	beq.n	16c1a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   16c0a:	4b19      	ldr	r3, [pc, #100]	; (16c70 <wifi_cb+0x150>)
   16c0c:	0019      	movs	r1, r3
   16c0e:	2001      	movs	r0, #1
   16c10:	4b05      	ldr	r3, [pc, #20]	; (16c28 <wifi_cb+0x108>)
   16c12:	4798      	blx	r3
        } break;
   16c14:	e001      	b.n	16c1a <wifi_cb+0xfa>
            break;
   16c16:	46c0      	nop			; (mov r8, r8)
   16c18:	e000      	b.n	16c1c <wifi_cb+0xfc>
        } break;
   16c1a:	46c0      	nop			; (mov r8, r8)
    }
}
   16c1c:	46c0      	nop			; (mov r8, r8)
   16c1e:	46bd      	mov	sp, r7
   16c20:	b005      	add	sp, #20
   16c22:	bd90      	pop	{r4, r7, pc}
   16c24:	00036918 	.word	0x00036918
   16c28:	0001e4d1 	.word	0x0001e4d1
   16c2c:	000226f5 	.word	0x000226f5
   16c30:	00036938 	.word	0x00036938
   16c34:	00016331 	.word	0x00016331
   16c38:	0001638d 	.word	0x0001638d
   16c3c:	20000460 	.word	0x20000460
   16c40:	0002e569 	.word	0x0002e569
   16c44:	2000048c 	.word	0x2000048c
   16c48:	0002fb79 	.word	0x0002fb79
   16c4c:	0003695c 	.word	0x0003695c
   16c50:	00036968 	.word	0x00036968
   16c54:	00022221 	.word	0x00022221
   16c58:	00036970 	.word	0x00036970
   16c5c:	00016365 	.word	0x00016365
   16c60:	2000045c 	.word	0x2000045c
   16c64:	000166b5 	.word	0x000166b5
   16c68:	00036590 	.word	0x00036590
   16c6c:	0002fa45 	.word	0x0002fa45
   16c70:	00036998 	.word	0x00036998

00016c74 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   16c74:	b580      	push	{r7, lr}
   16c76:	b082      	sub	sp, #8
   16c78:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   16c7a:	1d3b      	adds	r3, r7, #4
   16c7c:	0018      	movs	r0, r3
   16c7e:	4b08      	ldr	r3, [pc, #32]	; (16ca0 <configure_timer+0x2c>)
   16c80:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   16c82:	1d3a      	adds	r2, r7, #4
   16c84:	4b07      	ldr	r3, [pc, #28]	; (16ca4 <configure_timer+0x30>)
   16c86:	0011      	movs	r1, r2
   16c88:	0018      	movs	r0, r3
   16c8a:	4b07      	ldr	r3, [pc, #28]	; (16ca8 <configure_timer+0x34>)
   16c8c:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   16c8e:	4b05      	ldr	r3, [pc, #20]	; (16ca4 <configure_timer+0x30>)
   16c90:	0018      	movs	r0, r3
   16c92:	4b06      	ldr	r3, [pc, #24]	; (16cac <configure_timer+0x38>)
   16c94:	4798      	blx	r3
}
   16c96:	46c0      	nop			; (mov r8, r8)
   16c98:	46bd      	mov	sp, r7
   16c9a:	b002      	add	sp, #8
   16c9c:	bd80      	pop	{r7, pc}
   16c9e:	46c0      	nop			; (mov r8, r8)
   16ca0:	00032661 	.word	0x00032661
   16ca4:	2000443c 	.word	0x2000443c
   16ca8:	00032685 	.word	0x00032685
   16cac:	00032771 	.word	0x00032771

00016cb0 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   16cb0:	b580      	push	{r7, lr}
   16cb2:	b088      	sub	sp, #32
   16cb4:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   16cb6:	003b      	movs	r3, r7
   16cb8:	0018      	movs	r0, r3
   16cba:	4b16      	ldr	r3, [pc, #88]	; (16d14 <configure_http_client+0x64>)
   16cbc:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   16cbe:	003b      	movs	r3, r7
   16cc0:	2280      	movs	r2, #128	; 0x80
   16cc2:	0092      	lsls	r2, r2, #2
   16cc4:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   16cc6:	003b      	movs	r3, r7
   16cc8:	4a13      	ldr	r2, [pc, #76]	; (16d18 <configure_http_client+0x68>)
   16cca:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   16ccc:	003b      	movs	r3, r7
   16cce:	22bc      	movs	r2, #188	; 0xbc
   16cd0:	32ff      	adds	r2, #255	; 0xff
   16cd2:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   16cd4:	003b      	movs	r3, r7
   16cd6:	2201      	movs	r2, #1
   16cd8:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   16cda:	003a      	movs	r2, r7
   16cdc:	4b0f      	ldr	r3, [pc, #60]	; (16d1c <configure_http_client+0x6c>)
   16cde:	0011      	movs	r1, r2
   16ce0:	0018      	movs	r0, r3
   16ce2:	4b0f      	ldr	r3, [pc, #60]	; (16d20 <configure_http_client+0x70>)
   16ce4:	4798      	blx	r3
   16ce6:	0003      	movs	r3, r0
   16ce8:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   16cea:	69fb      	ldr	r3, [r7, #28]
   16cec:	2b00      	cmp	r3, #0
   16cee:	da06      	bge.n	16cfe <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   16cf0:	69fa      	ldr	r2, [r7, #28]
   16cf2:	4b0c      	ldr	r3, [pc, #48]	; (16d24 <configure_http_client+0x74>)
   16cf4:	0019      	movs	r1, r3
   16cf6:	2001      	movs	r0, #1
   16cf8:	4b0b      	ldr	r3, [pc, #44]	; (16d28 <configure_http_client+0x78>)
   16cfa:	4798      	blx	r3
        while (1) {
   16cfc:	e7fe      	b.n	16cfc <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   16cfe:	4a0b      	ldr	r2, [pc, #44]	; (16d2c <configure_http_client+0x7c>)
   16d00:	4b06      	ldr	r3, [pc, #24]	; (16d1c <configure_http_client+0x6c>)
   16d02:	0011      	movs	r1, r2
   16d04:	0018      	movs	r0, r3
   16d06:	4b0a      	ldr	r3, [pc, #40]	; (16d30 <configure_http_client+0x80>)
   16d08:	4798      	blx	r3
}
   16d0a:	46c0      	nop			; (mov r8, r8)
   16d0c:	46bd      	mov	sp, r7
   16d0e:	b008      	add	sp, #32
   16d10:	bd80      	pop	{r7, pc}
   16d12:	46c0      	nop			; (mov r8, r8)
   16d14:	00030cf5 	.word	0x00030cf5
   16d18:	2000443c 	.word	0x2000443c
   16d1c:	20004494 	.word	0x20004494
   16d20:	00030d41 	.word	0x00030d41
   16d24:	00036ac8 	.word	0x00036ac8
   16d28:	0001e4d1 	.word	0x0001e4d1
   16d2c:	00016945 	.word	0x00016945
   16d30:	00030e2d 	.word	0x00030e2d

00016d34 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   16d34:	b580      	push	{r7, lr}
   16d36:	b082      	sub	sp, #8
   16d38:	af00      	add	r7, sp, #0
   16d3a:	603a      	str	r2, [r7, #0]
   16d3c:	1dfb      	adds	r3, r7, #7
   16d3e:	1c02      	adds	r2, r0, #0
   16d40:	701a      	strb	r2, [r3, #0]
   16d42:	1dbb      	adds	r3, r7, #6
   16d44:	1c0a      	adds	r2, r1, #0
   16d46:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   16d48:	683a      	ldr	r2, [r7, #0]
   16d4a:	1dbb      	adds	r3, r7, #6
   16d4c:	7819      	ldrb	r1, [r3, #0]
   16d4e:	1dfb      	adds	r3, r7, #7
   16d50:	781b      	ldrb	r3, [r3, #0]
   16d52:	b25b      	sxtb	r3, r3
   16d54:	0018      	movs	r0, r3
   16d56:	4b03      	ldr	r3, [pc, #12]	; (16d64 <socket_event_handler+0x30>)
   16d58:	4798      	blx	r3
}
   16d5a:	46c0      	nop			; (mov r8, r8)
   16d5c:	46bd      	mov	sp, r7
   16d5e:	b002      	add	sp, #8
   16d60:	bd80      	pop	{r7, pc}
   16d62:	46c0      	nop			; (mov r8, r8)
   16d64:	0002f9ed 	.word	0x0002f9ed

00016d68 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   16d68:	b580      	push	{r7, lr}
   16d6a:	b082      	sub	sp, #8
   16d6c:	af00      	add	r7, sp, #0
   16d6e:	6078      	str	r0, [r7, #4]
   16d70:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   16d72:	683a      	ldr	r2, [r7, #0]
   16d74:	687b      	ldr	r3, [r7, #4]
   16d76:	0011      	movs	r1, r2
   16d78:	0018      	movs	r0, r3
   16d7a:	4b03      	ldr	r3, [pc, #12]	; (16d88 <socket_resolve_handler+0x20>)
   16d7c:	4798      	blx	r3
}
   16d7e:	46c0      	nop			; (mov r8, r8)
   16d80:	46bd      	mov	sp, r7
   16d82:	b002      	add	sp, #8
   16d84:	bd80      	pop	{r7, pc}
   16d86:	46c0      	nop			; (mov r8, r8)
   16d88:	0002fa21 	.word	0x0002fa21

00016d8c <SubscribeHandlerShipSizeTopic>:
 * \param[in] msgData Data to be received.
 */


void SubscribeHandlerShipSizeTopic(MessageData *msgData)
{
   16d8c:	b590      	push	{r4, r7, lr}
   16d8e:	b087      	sub	sp, #28
   16d90:	af00      	add	r7, sp, #0
   16d92:	6078      	str	r0, [r7, #4]
    // Parse input. The start string must be '['
    if (strncmp(msgData->message->payload, "[", 1) == 0) {
   16d94:	687b      	ldr	r3, [r7, #4]
   16d96:	681b      	ldr	r3, [r3, #0]
   16d98:	689b      	ldr	r3, [r3, #8]
   16d9a:	781a      	ldrb	r2, [r3, #0]
   16d9c:	4b36      	ldr	r3, [pc, #216]	; (16e78 <SubscribeHandlerShipSizeTopic+0xec>)
   16d9e:	781b      	ldrb	r3, [r3, #0]
   16da0:	429a      	cmp	r2, r3
   16da2:	d165      	bne.n	16e70 <SubscribeHandlerShipSizeTopic+0xe4>
        LogMessage(LOG_DEBUG_LVL, "\r\nship size message received!\r\n");
   16da4:	4b35      	ldr	r3, [pc, #212]	; (16e7c <SubscribeHandlerShipSizeTopic+0xf0>)
   16da6:	0019      	movs	r1, r3
   16da8:	2001      	movs	r0, #1
   16daa:	4b35      	ldr	r3, [pc, #212]	; (16e80 <SubscribeHandlerShipSizeTopic+0xf4>)
   16dac:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16dae:	687b      	ldr	r3, [r7, #4]
   16db0:	685b      	ldr	r3, [r3, #4]
   16db2:	685a      	ldr	r2, [r3, #4]
   16db4:	687b      	ldr	r3, [r7, #4]
   16db6:	685b      	ldr	r3, [r3, #4]
   16db8:	689b      	ldr	r3, [r3, #8]
   16dba:	4932      	ldr	r1, [pc, #200]	; (16e84 <SubscribeHandlerShipSizeTopic+0xf8>)
   16dbc:	2001      	movs	r0, #1
   16dbe:	4c30      	ldr	r4, [pc, #192]	; (16e80 <SubscribeHandlerShipSizeTopic+0xf4>)
   16dc0:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "\r\n%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16dc2:	687b      	ldr	r3, [r7, #4]
   16dc4:	681b      	ldr	r3, [r3, #0]
   16dc6:	68da      	ldr	r2, [r3, #12]
   16dc8:	687b      	ldr	r3, [r7, #4]
   16dca:	681b      	ldr	r3, [r3, #0]
   16dcc:	689b      	ldr	r3, [r3, #8]
   16dce:	492e      	ldr	r1, [pc, #184]	; (16e88 <SubscribeHandlerShipSizeTopic+0xfc>)
   16dd0:	2001      	movs	r0, #1
   16dd2:	4c2b      	ldr	r4, [pc, #172]	; (16e80 <SubscribeHandlerShipSizeTopic+0xf4>)
   16dd4:	47a0      	blx	r4

		if (strncmp(msgData->message->payload, "[", 1) != 0) {
   16dd6:	687b      	ldr	r3, [r7, #4]
   16dd8:	681b      	ldr	r3, [r3, #0]
   16dda:	689b      	ldr	r3, [r3, #8]
   16ddc:	781a      	ldrb	r2, [r3, #0]
   16dde:	4b26      	ldr	r3, [pc, #152]	; (16e78 <SubscribeHandlerShipSizeTopic+0xec>)
   16de0:	781b      	ldrb	r3, [r3, #0]
   16de2:	429a      	cmp	r2, r3
   16de4:	d143      	bne.n	16e6e <SubscribeHandlerShipSizeTopic+0xe2>
			return;
		}
		
		uint8_t ship_num = (msgData->message->payloadlen - 1) / 2;
   16de6:	687b      	ldr	r3, [r7, #4]
   16de8:	681b      	ldr	r3, [r3, #0]
   16dea:	68db      	ldr	r3, [r3, #12]
   16dec:	3b01      	subs	r3, #1
   16dee:	085a      	lsrs	r2, r3, #1
   16df0:	2313      	movs	r3, #19
   16df2:	18fb      	adds	r3, r7, r3
   16df4:	701a      	strb	r2, [r3, #0]
		uint8_t ship_arr[MAX_SHIP];
		
		if(ship_num > MAX_SHIP){
   16df6:	2313      	movs	r3, #19
   16df8:	18fb      	adds	r3, r7, r3
   16dfa:	781b      	ldrb	r3, [r3, #0]
   16dfc:	2b05      	cmp	r3, #5
   16dfe:	d905      	bls.n	16e0c <SubscribeHandlerShipSizeTopic+0x80>
			LogMessage(LOG_INFO_LVL, "\r\n too many ship!!\r\n");
   16e00:	4b22      	ldr	r3, [pc, #136]	; (16e8c <SubscribeHandlerShipSizeTopic+0x100>)
   16e02:	0019      	movs	r1, r3
   16e04:	2000      	movs	r0, #0
   16e06:	4b1e      	ldr	r3, [pc, #120]	; (16e80 <SubscribeHandlerShipSizeTopic+0xf4>)
   16e08:	4798      	blx	r3
			return;
   16e0a:	e031      	b.n	16e70 <SubscribeHandlerShipSizeTopic+0xe4>
		}

		char *p = (char *)&msgData->message->payload[1];
   16e0c:	687b      	ldr	r3, [r7, #4]
   16e0e:	681b      	ldr	r3, [r3, #0]
   16e10:	689b      	ldr	r3, [r3, #8]
   16e12:	3301      	adds	r3, #1
   16e14:	60bb      	str	r3, [r7, #8]
		int nb = 0;
   16e16:	2300      	movs	r3, #0
   16e18:	617b      	str	r3, [r7, #20]
		while (nb < MAX_SHIP && *p) {
   16e1a:	e015      	b.n	16e48 <SubscribeHandlerShipSizeTopic+0xbc>
			ship_arr[nb++] = strtol(p, &p, 10);
   16e1c:	697c      	ldr	r4, [r7, #20]
   16e1e:	1c63      	adds	r3, r4, #1
   16e20:	617b      	str	r3, [r7, #20]
   16e22:	68bb      	ldr	r3, [r7, #8]
   16e24:	2208      	movs	r2, #8
   16e26:	18b9      	adds	r1, r7, r2
   16e28:	220a      	movs	r2, #10
   16e2a:	0018      	movs	r0, r3
   16e2c:	4b18      	ldr	r3, [pc, #96]	; (16e90 <SubscribeHandlerShipSizeTopic+0x104>)
   16e2e:	4798      	blx	r3
   16e30:	0003      	movs	r3, r0
   16e32:	b2da      	uxtb	r2, r3
   16e34:	230c      	movs	r3, #12
   16e36:	18fb      	adds	r3, r7, r3
   16e38:	551a      	strb	r2, [r3, r4]
			if (*p != ',') break;
   16e3a:	68bb      	ldr	r3, [r7, #8]
   16e3c:	781b      	ldrb	r3, [r3, #0]
   16e3e:	2b2c      	cmp	r3, #44	; 0x2c
   16e40:	d10a      	bne.n	16e58 <SubscribeHandlerShipSizeTopic+0xcc>
			p++; /* skip, */
   16e42:	68bb      	ldr	r3, [r7, #8]
   16e44:	3301      	adds	r3, #1
   16e46:	60bb      	str	r3, [r7, #8]
		while (nb < MAX_SHIP && *p) {
   16e48:	697b      	ldr	r3, [r7, #20]
   16e4a:	2b04      	cmp	r3, #4
   16e4c:	dc05      	bgt.n	16e5a <SubscribeHandlerShipSizeTopic+0xce>
   16e4e:	68bb      	ldr	r3, [r7, #8]
   16e50:	781b      	ldrb	r3, [r3, #0]
   16e52:	2b00      	cmp	r3, #0
   16e54:	d1e2      	bne.n	16e1c <SubscribeHandlerShipSizeTopic+0x90>
   16e56:	e000      	b.n	16e5a <SubscribeHandlerShipSizeTopic+0xce>
			if (*p != ',') break;
   16e58:	46c0      	nop			; (mov r8, r8)
		}
		
		//LogMessage(LOG_DEBUG_LVL, "\r\n ship size %d %d %d\r\n", ship_arr[0], ship_arr[1], ship_arr[2]);
			
		ControlSetGame(ship_arr, ship_num);
   16e5a:	2313      	movs	r3, #19
   16e5c:	18fb      	adds	r3, r7, r3
   16e5e:	781a      	ldrb	r2, [r3, #0]
   16e60:	230c      	movs	r3, #12
   16e62:	18fb      	adds	r3, r7, r3
   16e64:	0011      	movs	r1, r2
   16e66:	0018      	movs	r0, r3
   16e68:	4b0a      	ldr	r3, [pc, #40]	; (16e94 <SubscribeHandlerShipSizeTopic+0x108>)
   16e6a:	4798      	blx	r3
   16e6c:	e000      	b.n	16e70 <SubscribeHandlerShipSizeTopic+0xe4>
			return;
   16e6e:	46c0      	nop			; (mov r8, r8)
		
	}
		// send data to control thread and start/reset the ui and the game 
}
   16e70:	46bd      	mov	sp, r7
   16e72:	b007      	add	sp, #28
   16e74:	bd90      	pop	{r4, r7, pc}
   16e76:	46c0      	nop			; (mov r8, r8)
   16e78:	00036b10 	.word	0x00036b10
   16e7c:	00036b14 	.word	0x00036b14
   16e80:	0001e4d1 	.word	0x0001e4d1
   16e84:	00036b34 	.word	0x00036b34
   16e88:	00036b3c 	.word	0x00036b3c
   16e8c:	00036b44 	.word	0x00036b44
   16e90:	000351b1 	.word	0x000351b1
   16e94:	000137cd 	.word	0x000137cd

00016e98 <SubscribeHandlerTurnTopic>:

void SubscribeHandlerTurnTopic(MessageData *msgData)
{
   16e98:	b590      	push	{r4, r7, lr}
   16e9a:	b087      	sub	sp, #28
   16e9c:	af00      	add	r7, sp, #0
   16e9e:	6078      	str	r0, [r7, #4]
    // Parse input. The start string must be '['
    if (strncmp(msgData->message->payload, "[", 1) == 0) {
   16ea0:	687b      	ldr	r3, [r7, #4]
   16ea2:	681b      	ldr	r3, [r3, #0]
   16ea4:	689b      	ldr	r3, [r3, #8]
   16ea6:	781a      	ldrb	r2, [r3, #0]
   16ea8:	4b26      	ldr	r3, [pc, #152]	; (16f44 <SubscribeHandlerTurnTopic+0xac>)
   16eaa:	781b      	ldrb	r3, [r3, #0]
   16eac:	429a      	cmp	r2, r3
   16eae:	d144      	bne.n	16f3a <SubscribeHandlerTurnTopic+0xa2>
        LogMessage(LOG_DEBUG_LVL, "\r\nturn message received!\r\n");
   16eb0:	4b25      	ldr	r3, [pc, #148]	; (16f48 <SubscribeHandlerTurnTopic+0xb0>)
   16eb2:	0019      	movs	r1, r3
   16eb4:	2001      	movs	r0, #1
   16eb6:	4b25      	ldr	r3, [pc, #148]	; (16f4c <SubscribeHandlerTurnTopic+0xb4>)
   16eb8:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   16eba:	687b      	ldr	r3, [r7, #4]
   16ebc:	685b      	ldr	r3, [r3, #4]
   16ebe:	685a      	ldr	r2, [r3, #4]
   16ec0:	687b      	ldr	r3, [r7, #4]
   16ec2:	685b      	ldr	r3, [r3, #4]
   16ec4:	689b      	ldr	r3, [r3, #8]
   16ec6:	4922      	ldr	r1, [pc, #136]	; (16f50 <SubscribeHandlerTurnTopic+0xb8>)
   16ec8:	2001      	movs	r0, #1
   16eca:	4c20      	ldr	r4, [pc, #128]	; (16f4c <SubscribeHandlerTurnTopic+0xb4>)
   16ecc:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "\r\n%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   16ece:	687b      	ldr	r3, [r7, #4]
   16ed0:	681b      	ldr	r3, [r3, #0]
   16ed2:	68da      	ldr	r2, [r3, #12]
   16ed4:	687b      	ldr	r3, [r7, #4]
   16ed6:	681b      	ldr	r3, [r3, #0]
   16ed8:	689b      	ldr	r3, [r3, #8]
   16eda:	491e      	ldr	r1, [pc, #120]	; (16f54 <SubscribeHandlerTurnTopic+0xbc>)
   16edc:	2001      	movs	r0, #1
   16ede:	4c1b      	ldr	r4, [pc, #108]	; (16f4c <SubscribeHandlerTurnTopic+0xb4>)
   16ee0:	47a0      	blx	r4
		
		uint8_t ship_turn[6];
		
		char *p = (char *)&msgData->message->payload[1];
   16ee2:	687b      	ldr	r3, [r7, #4]
   16ee4:	681b      	ldr	r3, [r3, #0]
   16ee6:	689b      	ldr	r3, [r3, #8]
   16ee8:	3301      	adds	r3, #1
   16eea:	60bb      	str	r3, [r7, #8]
		int nb = 0;
   16eec:	2300      	movs	r3, #0
   16eee:	617b      	str	r3, [r7, #20]
		while (nb < 6 && *p) {
   16ef0:	e015      	b.n	16f1e <SubscribeHandlerTurnTopic+0x86>
			ship_turn[nb++] = strtol(p, &p, 10);
   16ef2:	697c      	ldr	r4, [r7, #20]
   16ef4:	1c63      	adds	r3, r4, #1
   16ef6:	617b      	str	r3, [r7, #20]
   16ef8:	68bb      	ldr	r3, [r7, #8]
   16efa:	2208      	movs	r2, #8
   16efc:	18b9      	adds	r1, r7, r2
   16efe:	220a      	movs	r2, #10
   16f00:	0018      	movs	r0, r3
   16f02:	4b15      	ldr	r3, [pc, #84]	; (16f58 <SubscribeHandlerTurnTopic+0xc0>)
   16f04:	4798      	blx	r3
   16f06:	0003      	movs	r3, r0
   16f08:	b2da      	uxtb	r2, r3
   16f0a:	230c      	movs	r3, #12
   16f0c:	18fb      	adds	r3, r7, r3
   16f0e:	551a      	strb	r2, [r3, r4]
			if (*p != ',') break;
   16f10:	68bb      	ldr	r3, [r7, #8]
   16f12:	781b      	ldrb	r3, [r3, #0]
   16f14:	2b2c      	cmp	r3, #44	; 0x2c
   16f16:	d10a      	bne.n	16f2e <SubscribeHandlerTurnTopic+0x96>
			p++; /* skip, */
   16f18:	68bb      	ldr	r3, [r7, #8]
   16f1a:	3301      	adds	r3, #1
   16f1c:	60bb      	str	r3, [r7, #8]
		while (nb < 6 && *p) {
   16f1e:	697b      	ldr	r3, [r7, #20]
   16f20:	2b05      	cmp	r3, #5
   16f22:	dc05      	bgt.n	16f30 <SubscribeHandlerTurnTopic+0x98>
   16f24:	68bb      	ldr	r3, [r7, #8]
   16f26:	781b      	ldrb	r3, [r3, #0]
   16f28:	2b00      	cmp	r3, #0
   16f2a:	d1e2      	bne.n	16ef2 <SubscribeHandlerTurnTopic+0x5a>
   16f2c:	e000      	b.n	16f30 <SubscribeHandlerTurnTopic+0x98>
			if (*p != ',') break;
   16f2e:	46c0      	nop			; (mov r8, r8)
		}
		
		ControlTurnArray(ship_turn);
   16f30:	230c      	movs	r3, #12
   16f32:	18fb      	adds	r3, r7, r3
   16f34:	0018      	movs	r0, r3
   16f36:	4b09      	ldr	r3, [pc, #36]	; (16f5c <SubscribeHandlerTurnTopic+0xc4>)
   16f38:	4798      	blx	r3
		
	}
		// send data to control thread and start/reset the ui and the game 
}
   16f3a:	46c0      	nop			; (mov r8, r8)
   16f3c:	46bd      	mov	sp, r7
   16f3e:	b007      	add	sp, #28
   16f40:	bd90      	pop	{r4, r7, pc}
   16f42:	46c0      	nop			; (mov r8, r8)
   16f44:	00036b10 	.word	0x00036b10
   16f48:	00036b5c 	.word	0x00036b5c
   16f4c:	0001e4d1 	.word	0x0001e4d1
   16f50:	00036b34 	.word	0x00036b34
   16f54:	00036b3c 	.word	0x00036b3c
   16f58:	000351b1 	.word	0x000351b1
   16f5c:	0001388d 	.word	0x0001388d

00016f60 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   16f60:	b590      	push	{r4, r7, lr}
   16f62:	b08b      	sub	sp, #44	; 0x2c
   16f64:	af06      	add	r7, sp, #24
   16f66:	60f8      	str	r0, [r7, #12]
   16f68:	60b9      	str	r1, [r7, #8]
   16f6a:	607a      	str	r2, [r7, #4]
    switch (type) {
   16f6c:	68bb      	ldr	r3, [r7, #8]
   16f6e:	2b01      	cmp	r3, #1
   16f70:	d03b      	beq.n	16fea <mqtt_callback+0x8a>
   16f72:	2b05      	cmp	r3, #5
   16f74:	d058      	beq.n	17028 <mqtt_callback+0xc8>
   16f76:	2b00      	cmp	r3, #0
   16f78:	d000      	beq.n	16f7c <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   16f7a:	e05b      	b.n	17034 <mqtt_callback+0xd4>
            if (data->sock_connected.result >= 0) {
   16f7c:	687b      	ldr	r3, [r7, #4]
   16f7e:	681b      	ldr	r3, [r3, #0]
   16f80:	2b00      	cmp	r3, #0
   16f82:	db25      	blt.n	16fd0 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   16f84:	4b2d      	ldr	r3, [pc, #180]	; (1703c <mqtt_callback+0xdc>)
   16f86:	0019      	movs	r1, r3
   16f88:	2001      	movs	r0, #1
   16f8a:	4b2d      	ldr	r3, [pc, #180]	; (17040 <mqtt_callback+0xe0>)
   16f8c:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   16f8e:	492d      	ldr	r1, [pc, #180]	; (17044 <mqtt_callback+0xe4>)
   16f90:	4a2d      	ldr	r2, [pc, #180]	; (17048 <mqtt_callback+0xe8>)
   16f92:	68f8      	ldr	r0, [r7, #12]
   16f94:	2300      	movs	r3, #0
   16f96:	9305      	str	r3, [sp, #20]
   16f98:	2300      	movs	r3, #0
   16f9a:	9304      	str	r3, [sp, #16]
   16f9c:	2300      	movs	r3, #0
   16f9e:	9303      	str	r3, [sp, #12]
   16fa0:	2300      	movs	r3, #0
   16fa2:	9302      	str	r3, [sp, #8]
   16fa4:	2300      	movs	r3, #0
   16fa6:	9301      	str	r3, [sp, #4]
   16fa8:	4b27      	ldr	r3, [pc, #156]	; (17048 <mqtt_callback+0xe8>)
   16faa:	9300      	str	r3, [sp, #0]
   16fac:	000b      	movs	r3, r1
   16fae:	2101      	movs	r1, #1
   16fb0:	4c26      	ldr	r4, [pc, #152]	; (1704c <mqtt_callback+0xec>)
   16fb2:	47a0      	blx	r4
   16fb4:	1e03      	subs	r3, r0, #0
   16fb6:	d005      	beq.n	16fc4 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   16fb8:	4b25      	ldr	r3, [pc, #148]	; (17050 <mqtt_callback+0xf0>)
   16fba:	0019      	movs	r1, r3
   16fbc:	2001      	movs	r0, #1
   16fbe:	4b20      	ldr	r3, [pc, #128]	; (17040 <mqtt_callback+0xe0>)
   16fc0:	4798      	blx	r3
        } break;
   16fc2:	e037      	b.n	17034 <mqtt_callback+0xd4>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   16fc4:	4b23      	ldr	r3, [pc, #140]	; (17054 <mqtt_callback+0xf4>)
   16fc6:	0019      	movs	r1, r3
   16fc8:	2001      	movs	r0, #1
   16fca:	4b1d      	ldr	r3, [pc, #116]	; (17040 <mqtt_callback+0xe0>)
   16fcc:	4798      	blx	r3
        } break;
   16fce:	e031      	b.n	17034 <mqtt_callback+0xd4>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   16fd0:	4a21      	ldr	r2, [pc, #132]	; (17058 <mqtt_callback+0xf8>)
   16fd2:	4b22      	ldr	r3, [pc, #136]	; (1705c <mqtt_callback+0xfc>)
   16fd4:	0019      	movs	r1, r3
   16fd6:	2001      	movs	r0, #1
   16fd8:	4b19      	ldr	r3, [pc, #100]	; (17040 <mqtt_callback+0xe0>)
   16fda:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   16fdc:	4a1e      	ldr	r2, [pc, #120]	; (17058 <mqtt_callback+0xf8>)
   16fde:	68fb      	ldr	r3, [r7, #12]
   16fe0:	0011      	movs	r1, r2
   16fe2:	0018      	movs	r0, r3
   16fe4:	4b1e      	ldr	r3, [pc, #120]	; (17060 <mqtt_callback+0x100>)
   16fe6:	4798      	blx	r3
        } break;
   16fe8:	e024      	b.n	17034 <mqtt_callback+0xd4>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   16fea:	687b      	ldr	r3, [r7, #4]
   16fec:	781b      	ldrb	r3, [r3, #0]
   16fee:	2b00      	cmp	r3, #0
   16ff0:	d111      	bne.n	17016 <mqtt_callback+0xb6>
                mqtt_subscribe(module_inst, GAME_SHIPSIZE_TOPIC_SUB, 2, SubscribeHandlerShipSizeTopic);
   16ff2:	4b1c      	ldr	r3, [pc, #112]	; (17064 <mqtt_callback+0x104>)
   16ff4:	491c      	ldr	r1, [pc, #112]	; (17068 <mqtt_callback+0x108>)
   16ff6:	68f8      	ldr	r0, [r7, #12]
   16ff8:	2202      	movs	r2, #2
   16ffa:	4c1c      	ldr	r4, [pc, #112]	; (1706c <mqtt_callback+0x10c>)
   16ffc:	47a0      	blx	r4
				mqtt_subscribe(module_inst, GAME_TURN_TOPIC_SUB, 2, SubscribeHandlerTurnTopic);
   16ffe:	4b1c      	ldr	r3, [pc, #112]	; (17070 <mqtt_callback+0x110>)
   17000:	491c      	ldr	r1, [pc, #112]	; (17074 <mqtt_callback+0x114>)
   17002:	68f8      	ldr	r0, [r7, #12]
   17004:	2202      	movs	r2, #2
   17006:	4c19      	ldr	r4, [pc, #100]	; (1706c <mqtt_callback+0x10c>)
   17008:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   1700a:	4b1b      	ldr	r3, [pc, #108]	; (17078 <mqtt_callback+0x118>)
   1700c:	0019      	movs	r1, r3
   1700e:	2001      	movs	r0, #1
   17010:	4b0b      	ldr	r3, [pc, #44]	; (17040 <mqtt_callback+0xe0>)
   17012:	4798      	blx	r3
            break;
   17014:	e00e      	b.n	17034 <mqtt_callback+0xd4>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   17016:	687b      	ldr	r3, [r7, #4]
   17018:	781b      	ldrb	r3, [r3, #0]
   1701a:	001a      	movs	r2, r3
   1701c:	4b17      	ldr	r3, [pc, #92]	; (1707c <mqtt_callback+0x11c>)
   1701e:	0019      	movs	r1, r3
   17020:	2001      	movs	r0, #1
   17022:	4b07      	ldr	r3, [pc, #28]	; (17040 <mqtt_callback+0xe0>)
   17024:	4798      	blx	r3
            break;
   17026:	e005      	b.n	17034 <mqtt_callback+0xd4>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   17028:	4b15      	ldr	r3, [pc, #84]	; (17080 <mqtt_callback+0x120>)
   1702a:	0019      	movs	r1, r3
   1702c:	2001      	movs	r0, #1
   1702e:	4b04      	ldr	r3, [pc, #16]	; (17040 <mqtt_callback+0xe0>)
   17030:	4798      	blx	r3
            break;
   17032:	46c0      	nop			; (mov r8, r8)
}
   17034:	46c0      	nop			; (mov r8, r8)
   17036:	46bd      	mov	sp, r7
   17038:	b005      	add	sp, #20
   1703a:	bd90      	pop	{r4, r7, pc}
   1703c:	00036b78 	.word	0x00036b78
   17040:	0001e4d1 	.word	0x0001e4d1
   17044:	00036b94 	.word	0x00036b94
   17048:	00036ba4 	.word	0x00036ba4
   1704c:	0002fa8d 	.word	0x0002fa8d
   17050:	00036bb0 	.word	0x00036bb0
   17054:	00036bd8 	.word	0x00036bd8
   17058:	00036590 	.word	0x00036590
   1705c:	00036bf4 	.word	0x00036bf4
   17060:	0002fa45 	.word	0x0002fa45
   17064:	00016d8d 	.word	0x00016d8d
   17068:	00036c2c 	.word	0x00036c2c
   1706c:	0002fc2d 	.word	0x0002fc2d
   17070:	00016e99 	.word	0x00016e99
   17074:	00036c40 	.word	0x00036c40
   17078:	00036c50 	.word	0x00036c50
   1707c:	00036c64 	.word	0x00036c64
   17080:	00036c98 	.word	0x00036c98

00017084 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   17084:	b580      	push	{r7, lr}
   17086:	b088      	sub	sp, #32
   17088:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   1708a:	1d3b      	adds	r3, r7, #4
   1708c:	0018      	movs	r0, r3
   1708e:	4b1f      	ldr	r3, [pc, #124]	; (1710c <configure_mqtt+0x88>)
   17090:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   17092:	1d3b      	adds	r3, r7, #4
   17094:	4a1e      	ldr	r2, [pc, #120]	; (17110 <configure_mqtt+0x8c>)
   17096:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17098:	1d3b      	adds	r3, r7, #4
   1709a:	2280      	movs	r2, #128	; 0x80
   1709c:	0092      	lsls	r2, r2, #2
   1709e:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   170a0:	1d3b      	adds	r3, r7, #4
   170a2:	4a1c      	ldr	r2, [pc, #112]	; (17114 <configure_mqtt+0x90>)
   170a4:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   170a6:	1d3b      	adds	r3, r7, #4
   170a8:	2280      	movs	r2, #128	; 0x80
   170aa:	0092      	lsls	r2, r2, #2
   170ac:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   170ae:	1d3b      	adds	r3, r7, #4
   170b0:	4a19      	ldr	r2, [pc, #100]	; (17118 <configure_mqtt+0x94>)
   170b2:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   170b4:	1d3b      	adds	r3, r7, #4
   170b6:	4a19      	ldr	r2, [pc, #100]	; (1711c <configure_mqtt+0x98>)
   170b8:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   170ba:	1d3a      	adds	r2, r7, #4
   170bc:	4b18      	ldr	r3, [pc, #96]	; (17120 <configure_mqtt+0x9c>)
   170be:	0011      	movs	r1, r2
   170c0:	0018      	movs	r0, r3
   170c2:	4b18      	ldr	r3, [pc, #96]	; (17124 <configure_mqtt+0xa0>)
   170c4:	4798      	blx	r3
   170c6:	0003      	movs	r3, r0
   170c8:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   170ca:	69fb      	ldr	r3, [r7, #28]
   170cc:	2b00      	cmp	r3, #0
   170ce:	da06      	bge.n	170de <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   170d0:	69fa      	ldr	r2, [r7, #28]
   170d2:	4b15      	ldr	r3, [pc, #84]	; (17128 <configure_mqtt+0xa4>)
   170d4:	0019      	movs	r1, r3
   170d6:	2001      	movs	r0, #1
   170d8:	4b14      	ldr	r3, [pc, #80]	; (1712c <configure_mqtt+0xa8>)
   170da:	4798      	blx	r3
        while (1) {
   170dc:	e7fe      	b.n	170dc <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   170de:	4a14      	ldr	r2, [pc, #80]	; (17130 <configure_mqtt+0xac>)
   170e0:	4b0f      	ldr	r3, [pc, #60]	; (17120 <configure_mqtt+0x9c>)
   170e2:	0011      	movs	r1, r2
   170e4:	0018      	movs	r0, r3
   170e6:	4b13      	ldr	r3, [pc, #76]	; (17134 <configure_mqtt+0xb0>)
   170e8:	4798      	blx	r3
   170ea:	0003      	movs	r3, r0
   170ec:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   170ee:	69fb      	ldr	r3, [r7, #28]
   170f0:	2b00      	cmp	r3, #0
   170f2:	da06      	bge.n	17102 <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   170f4:	69fa      	ldr	r2, [r7, #28]
   170f6:	4b10      	ldr	r3, [pc, #64]	; (17138 <configure_mqtt+0xb4>)
   170f8:	0019      	movs	r1, r3
   170fa:	2001      	movs	r0, #1
   170fc:	4b0b      	ldr	r3, [pc, #44]	; (1712c <configure_mqtt+0xa8>)
   170fe:	4798      	blx	r3
        while (1) {
   17100:	e7fe      	b.n	17100 <configure_mqtt+0x7c>
        }
    }
}
   17102:	46c0      	nop			; (mov r8, r8)
   17104:	46bd      	mov	sp, r7
   17106:	b008      	add	sp, #32
   17108:	bd80      	pop	{r7, pc}
   1710a:	46c0      	nop			; (mov r8, r8)
   1710c:	0002f985 	.word	0x0002f985
   17110:	200004c4 	.word	0x200004c4
   17114:	200006c4 	.word	0x200006c4
   17118:	0000075b 	.word	0x0000075b
   1711c:	00001770 	.word	0x00001770
   17120:	2000048c 	.word	0x2000048c
   17124:	0002f8d5 	.word	0x0002f8d5
   17128:	00036cac 	.word	0x00036cac
   1712c:	0001e4d1 	.word	0x0001e4d1
   17130:	00016f61 	.word	0x00016f61
   17134:	0002f9c5 	.word	0x0002f9c5
   17138:	00036ce0 	.word	0x00036ce0

0001713c <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   1713c:	b580      	push	{r7, lr}
   1713e:	b084      	sub	sp, #16
   17140:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   17142:	1d3b      	adds	r3, r7, #4
   17144:	0018      	movs	r0, r3
   17146:	4b0b      	ldr	r3, [pc, #44]	; (17174 <configure_extint_channel+0x38>)
   17148:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   1714a:	1d3b      	adds	r3, r7, #4
   1714c:	2237      	movs	r2, #55	; 0x37
   1714e:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   17150:	1d3b      	adds	r3, r7, #4
   17152:	2200      	movs	r2, #0
   17154:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   17156:	1d3b      	adds	r3, r7, #4
   17158:	2201      	movs	r2, #1
   1715a:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1715c:	1d3b      	adds	r3, r7, #4
   1715e:	2202      	movs	r2, #2
   17160:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   17162:	1d3b      	adds	r3, r7, #4
   17164:	0019      	movs	r1, r3
   17166:	2007      	movs	r0, #7
   17168:	4b03      	ldr	r3, [pc, #12]	; (17178 <configure_extint_channel+0x3c>)
   1716a:	4798      	blx	r3
}
   1716c:	46c0      	nop			; (mov r8, r8)
   1716e:	46bd      	mov	sp, r7
   17170:	b004      	add	sp, #16
   17172:	bd80      	pop	{r7, pc}
   17174:	00026b15 	.word	0x00026b15
   17178:	00026b49 	.word	0x00026b49

0001717c <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   1717c:	b580      	push	{r7, lr}
   1717e:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17180:	4b06      	ldr	r3, [pc, #24]	; (1719c <configure_extint_callbacks+0x20>)
   17182:	2200      	movs	r2, #0
   17184:	2107      	movs	r1, #7
   17186:	0018      	movs	r0, r3
   17188:	4b05      	ldr	r3, [pc, #20]	; (171a0 <configure_extint_callbacks+0x24>)
   1718a:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1718c:	2100      	movs	r1, #0
   1718e:	2007      	movs	r0, #7
   17190:	4b04      	ldr	r3, [pc, #16]	; (171a4 <configure_extint_callbacks+0x28>)
   17192:	4798      	blx	r3
}
   17194:	46c0      	nop			; (mov r8, r8)
   17196:	46bd      	mov	sp, r7
   17198:	bd80      	pop	{r7, pc}
   1719a:	46c0      	nop			; (mov r8, r8)
   1719c:	000171a9 	.word	0x000171a9
   171a0:	00026715 	.word	0x00026715
   171a4:	00026779 	.word	0x00026779

000171a8 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   171a8:	b580      	push	{r7, lr}
   171aa:	af00      	add	r7, sp, #0
    isPressed = true;
   171ac:	4b02      	ldr	r3, [pc, #8]	; (171b8 <extint_detection_callback+0x10>)
   171ae:	2201      	movs	r2, #1
   171b0:	701a      	strb	r2, [r3, #0]
}
   171b2:	46c0      	nop			; (mov r8, r8)
   171b4:	46bd      	mov	sp, r7
   171b6:	bd80      	pop	{r7, pc}
   171b8:	200008c4 	.word	0x200008c4

000171bc <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   171bc:	b580      	push	{r7, lr}
   171be:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   171c0:	4a15      	ldr	r2, [pc, #84]	; (17218 <HTTP_DownloadFileInit+0x5c>)
   171c2:	4b16      	ldr	r3, [pc, #88]	; (1721c <HTTP_DownloadFileInit+0x60>)
   171c4:	0011      	movs	r1, r2
   171c6:	0018      	movs	r0, r3
   171c8:	4b15      	ldr	r3, [pc, #84]	; (17220 <HTTP_DownloadFileInit+0x64>)
   171ca:	4798      	blx	r3
   171cc:	1e03      	subs	r3, r0, #0
   171ce:	d008      	beq.n	171e2 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   171d0:	4b14      	ldr	r3, [pc, #80]	; (17224 <HTTP_DownloadFileInit+0x68>)
   171d2:	0019      	movs	r1, r3
   171d4:	2001      	movs	r0, #1
   171d6:	4b14      	ldr	r3, [pc, #80]	; (17228 <HTTP_DownloadFileInit+0x6c>)
   171d8:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   171da:	e002      	b.n	171e2 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   171dc:	2000      	movs	r0, #0
   171de:	4b13      	ldr	r3, [pc, #76]	; (1722c <HTTP_DownloadFileInit+0x70>)
   171e0:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   171e2:	4b0e      	ldr	r3, [pc, #56]	; (1721c <HTTP_DownloadFileInit+0x60>)
   171e4:	2234      	movs	r2, #52	; 0x34
   171e6:	5c9b      	ldrb	r3, [r3, r2]
   171e8:	2b00      	cmp	r3, #0
   171ea:	d1f7      	bne.n	171dc <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   171ec:	4b10      	ldr	r3, [pc, #64]	; (17230 <HTTP_DownloadFileInit+0x74>)
   171ee:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   171f0:	4b10      	ldr	r3, [pc, #64]	; (17234 <HTTP_DownloadFileInit+0x78>)
   171f2:	2201      	movs	r2, #1
   171f4:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   171f6:	4a10      	ldr	r2, [pc, #64]	; (17238 <HTTP_DownloadFileInit+0x7c>)
   171f8:	4b10      	ldr	r3, [pc, #64]	; (1723c <HTTP_DownloadFileInit+0x80>)
   171fa:	0011      	movs	r1, r2
   171fc:	0018      	movs	r0, r3
   171fe:	4b10      	ldr	r3, [pc, #64]	; (17240 <HTTP_DownloadFileInit+0x84>)
   17200:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   17202:	4b10      	ldr	r3, [pc, #64]	; (17244 <HTTP_DownloadFileInit+0x88>)
   17204:	4798      	blx	r3

    start_download();
   17206:	4b10      	ldr	r3, [pc, #64]	; (17248 <HTTP_DownloadFileInit+0x8c>)
   17208:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   1720a:	4b10      	ldr	r3, [pc, #64]	; (1724c <HTTP_DownloadFileInit+0x90>)
   1720c:	2203      	movs	r2, #3
   1720e:	701a      	strb	r2, [r3, #0]
}
   17210:	46c0      	nop			; (mov r8, r8)
   17212:	46bd      	mov	sp, r7
   17214:	bd80      	pop	{r7, pc}
   17216:	46c0      	nop			; (mov r8, r8)
   17218:	00036590 	.word	0x00036590
   1721c:	2000048c 	.word	0x2000048c
   17220:	0002fb79 	.word	0x0002fb79
   17224:	00036998 	.word	0x00036998
   17228:	0001e4d1 	.word	0x0001e4d1
   1722c:	00022205 	.word	0x00022205
   17230:	000257c1 	.word	0x000257c1
   17234:	2000045c 	.word	0x2000045c
   17238:	00016ac1 	.word	0x00016ac1
   1723c:	00016a8d 	.word	0x00016a8d
   17240:	00025809 	.word	0x00025809
   17244:	00025771 	.word	0x00025771
   17248:	000166b5 	.word	0x000166b5
   1724c:	2000044d 	.word	0x2000044d

00017250 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17250:	b580      	push	{r7, lr}
   17252:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17254:	e009      	b.n	1726a <HTTP_DownloadFileTransaction+0x1a>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17256:	2000      	movs	r0, #0
   17258:	4b16      	ldr	r3, [pc, #88]	; (172b4 <HTTP_DownloadFileTransaction+0x64>)
   1725a:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   1725c:	4b16      	ldr	r3, [pc, #88]	; (172b8 <HTTP_DownloadFileTransaction+0x68>)
   1725e:	0018      	movs	r0, r3
   17260:	4b16      	ldr	r3, [pc, #88]	; (172bc <HTTP_DownloadFileTransaction+0x6c>)
   17262:	4798      	blx	r3
        vTaskDelay(5);
   17264:	2005      	movs	r0, #5
   17266:	4b16      	ldr	r3, [pc, #88]	; (172c0 <HTTP_DownloadFileTransaction+0x70>)
   17268:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1726a:	2010      	movs	r0, #16
   1726c:	4b15      	ldr	r3, [pc, #84]	; (172c4 <HTTP_DownloadFileTransaction+0x74>)
   1726e:	4798      	blx	r3
   17270:	0003      	movs	r3, r0
   17272:	001a      	movs	r2, r3
   17274:	2301      	movs	r3, #1
   17276:	4053      	eors	r3, r2
   17278:	b2db      	uxtb	r3, r3
   1727a:	2b00      	cmp	r3, #0
   1727c:	d009      	beq.n	17292 <HTTP_DownloadFileTransaction+0x42>
   1727e:	2020      	movs	r0, #32
   17280:	4b10      	ldr	r3, [pc, #64]	; (172c4 <HTTP_DownloadFileTransaction+0x74>)
   17282:	4798      	blx	r3
   17284:	0003      	movs	r3, r0
   17286:	001a      	movs	r2, r3
   17288:	2301      	movs	r3, #1
   1728a:	4053      	eors	r3, r2
   1728c:	b2db      	uxtb	r3, r3
   1728e:	2b00      	cmp	r3, #0
   17290:	d1e1      	bne.n	17256 <HTTP_DownloadFileTransaction+0x6>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   17292:	4b0d      	ldr	r3, [pc, #52]	; (172c8 <HTTP_DownloadFileTransaction+0x78>)
   17294:	4798      	blx	r3
    vTaskDelay(1000);
   17296:	23fa      	movs	r3, #250	; 0xfa
   17298:	009b      	lsls	r3, r3, #2
   1729a:	0018      	movs	r0, r3
   1729c:	4b08      	ldr	r3, [pc, #32]	; (172c0 <HTTP_DownloadFileTransaction+0x70>)
   1729e:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   172a0:	4b0a      	ldr	r3, [pc, #40]	; (172cc <HTTP_DownloadFileTransaction+0x7c>)
   172a2:	2200      	movs	r2, #0
   172a4:	701a      	strb	r2, [r3, #0]
    wifiStateMachine = WIFI_MQTT_INIT;
   172a6:	4b0a      	ldr	r3, [pc, #40]	; (172d0 <HTTP_DownloadFileTransaction+0x80>)
   172a8:	2200      	movs	r2, #0
   172aa:	701a      	strb	r2, [r3, #0]
}
   172ac:	46c0      	nop			; (mov r8, r8)
   172ae:	46bd      	mov	sp, r7
   172b0:	bd80      	pop	{r7, pc}
   172b2:	46c0      	nop			; (mov r8, r8)
   172b4:	00022205 	.word	0x00022205
   172b8:	2000443c 	.word	0x2000443c
   172bc:	000328a1 	.word	0x000328a1
   172c0:	0001c791 	.word	0x0001c791
   172c4:	0001638d 	.word	0x0001638d
   172c8:	000257c1 	.word	0x000257c1
   172cc:	2000045c 	.word	0x2000045c
   172d0:	2000044d 	.word	0x2000044d

000172d4 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   172d4:	b580      	push	{r7, lr}
   172d6:	af00      	add	r7, sp, #0
    socketDeinit();
   172d8:	4b18      	ldr	r3, [pc, #96]	; (1733c <MQTT_InitRoutine+0x68>)
   172da:	4798      	blx	r3
    configure_mqtt();
   172dc:	4b18      	ldr	r3, [pc, #96]	; (17340 <MQTT_InitRoutine+0x6c>)
   172de:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   172e0:	4a18      	ldr	r2, [pc, #96]	; (17344 <MQTT_InitRoutine+0x70>)
   172e2:	4b19      	ldr	r3, [pc, #100]	; (17348 <MQTT_InitRoutine+0x74>)
   172e4:	0011      	movs	r1, r2
   172e6:	0018      	movs	r0, r3
   172e8:	4b18      	ldr	r3, [pc, #96]	; (1734c <MQTT_InitRoutine+0x78>)
   172ea:	4798      	blx	r3
    socketInit();
   172ec:	4b18      	ldr	r3, [pc, #96]	; (17350 <MQTT_InitRoutine+0x7c>)
   172ee:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   172f0:	4b18      	ldr	r3, [pc, #96]	; (17354 <MQTT_InitRoutine+0x80>)
   172f2:	2234      	movs	r2, #52	; 0x34
   172f4:	5c9b      	ldrb	r3, [r3, r2]
   172f6:	2201      	movs	r2, #1
   172f8:	4053      	eors	r3, r2
   172fa:	b2db      	uxtb	r3, r3
   172fc:	2b00      	cmp	r3, #0
   172fe:	d00c      	beq.n	1731a <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17300:	4a15      	ldr	r2, [pc, #84]	; (17358 <MQTT_InitRoutine+0x84>)
   17302:	4b14      	ldr	r3, [pc, #80]	; (17354 <MQTT_InitRoutine+0x80>)
   17304:	0011      	movs	r1, r2
   17306:	0018      	movs	r0, r3
   17308:	4b14      	ldr	r3, [pc, #80]	; (1735c <MQTT_InitRoutine+0x88>)
   1730a:	4798      	blx	r3
   1730c:	1e03      	subs	r3, r0, #0
   1730e:	d004      	beq.n	1731a <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17310:	4b13      	ldr	r3, [pc, #76]	; (17360 <MQTT_InitRoutine+0x8c>)
   17312:	0019      	movs	r1, r3
   17314:	2001      	movs	r0, #1
   17316:	4b13      	ldr	r3, [pc, #76]	; (17364 <MQTT_InitRoutine+0x90>)
   17318:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   1731a:	4b0e      	ldr	r3, [pc, #56]	; (17354 <MQTT_InitRoutine+0x80>)
   1731c:	2234      	movs	r2, #52	; 0x34
   1731e:	5c9b      	ldrb	r3, [r3, r2]
   17320:	2b00      	cmp	r3, #0
   17322:	d004      	beq.n	1732e <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   17324:	4b10      	ldr	r3, [pc, #64]	; (17368 <MQTT_InitRoutine+0x94>)
   17326:	0019      	movs	r1, r3
   17328:	2001      	movs	r0, #1
   1732a:	4b0e      	ldr	r3, [pc, #56]	; (17364 <MQTT_InitRoutine+0x90>)
   1732c:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   1732e:	4b0f      	ldr	r3, [pc, #60]	; (1736c <MQTT_InitRoutine+0x98>)
   17330:	2201      	movs	r2, #1
   17332:	701a      	strb	r2, [r3, #0]
}
   17334:	46c0      	nop			; (mov r8, r8)
   17336:	46bd      	mov	sp, r7
   17338:	bd80      	pop	{r7, pc}
   1733a:	46c0      	nop			; (mov r8, r8)
   1733c:	000257c1 	.word	0x000257c1
   17340:	00017085 	.word	0x00017085
   17344:	00016d69 	.word	0x00016d69
   17348:	00016d35 	.word	0x00016d35
   1734c:	00025809 	.word	0x00025809
   17350:	00025771 	.word	0x00025771
   17354:	2000048c 	.word	0x2000048c
   17358:	00036590 	.word	0x00036590
   1735c:	0002fa45 	.word	0x0002fa45
   17360:	00036998 	.word	0x00036998
   17364:	0001e4d1 	.word	0x0001e4d1
   17368:	00036d14 	.word	0x00036d14
   1736c:	2000044d 	.word	0x2000044d

00017370 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   17370:	b580      	push	{r7, lr}
   17372:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   17374:	2000      	movs	r0, #0
   17376:	4b0b      	ldr	r3, [pc, #44]	; (173a4 <MQTT_HandleTransactions+0x34>)
   17378:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   1737a:	4b0b      	ldr	r3, [pc, #44]	; (173a8 <MQTT_HandleTransactions+0x38>)
   1737c:	0018      	movs	r0, r3
   1737e:	4b0b      	ldr	r3, [pc, #44]	; (173ac <MQTT_HandleTransactions+0x3c>)
   17380:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandlePlaceMessages();
   17382:	4b0b      	ldr	r3, [pc, #44]	; (173b0 <MQTT_HandleTransactions+0x40>)
   17384:	4798      	blx	r3
	MQTT_HandleFireMessages();
   17386:	4b0b      	ldr	r3, [pc, #44]	; (173b4 <MQTT_HandleTransactions+0x44>)
   17388:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   1738a:	4b0b      	ldr	r3, [pc, #44]	; (173b8 <MQTT_HandleTransactions+0x48>)
   1738c:	2234      	movs	r2, #52	; 0x34
   1738e:	5c9b      	ldrb	r3, [r3, r2]
   17390:	2b00      	cmp	r3, #0
   17392:	d004      	beq.n	1739e <MQTT_HandleTransactions+0x2e>
   17394:	4b08      	ldr	r3, [pc, #32]	; (173b8 <MQTT_HandleTransactions+0x48>)
   17396:	2164      	movs	r1, #100	; 0x64
   17398:	0018      	movs	r0, r3
   1739a:	4b08      	ldr	r3, [pc, #32]	; (173bc <MQTT_HandleTransactions+0x4c>)
   1739c:	4798      	blx	r3
}
   1739e:	46c0      	nop			; (mov r8, r8)
   173a0:	46bd      	mov	sp, r7
   173a2:	bd80      	pop	{r7, pc}
   173a4:	00022205 	.word	0x00022205
   173a8:	2000443c 	.word	0x2000443c
   173ac:	000328a1 	.word	0x000328a1
   173b0:	000173c1 	.word	0x000173c1
   173b4:	00017435 	.word	0x00017435
   173b8:	2000048c 	.word	0x2000048c
   173bc:	0002fc75 	.word	0x0002fc75

000173c0 <MQTT_HandlePlaceMessages>:

static void MQTT_HandlePlaceMessages(void)
{
   173c0:	b590      	push	{r4, r7, lr}
   173c2:	b093      	sub	sp, #76	; 0x4c
   173c4:	af02      	add	r7, sp, #8
	char game_msg[MAX_MQTT_MSG_SIZE];
    if (pdPASS == xQueueReceive(xQueuePlaceBuffer, game_msg, 0)) {
   173c6:	4b13      	ldr	r3, [pc, #76]	; (17414 <MQTT_HandlePlaceMessages+0x54>)
   173c8:	681b      	ldr	r3, [r3, #0]
   173ca:	0039      	movs	r1, r7
   173cc:	2200      	movs	r2, #0
   173ce:	0018      	movs	r0, r3
   173d0:	4b11      	ldr	r3, [pc, #68]	; (17418 <MQTT_HandlePlaceMessages+0x58>)
   173d2:	4798      	blx	r3
   173d4:	0003      	movs	r3, r0
   173d6:	2b01      	cmp	r3, #1
   173d8:	d118      	bne.n	1740c <MQTT_HandlePlaceMessages+0x4c>
		
        LogMessage(LOG_DEBUG_LVL, game_msg);
   173da:	003b      	movs	r3, r7
   173dc:	0019      	movs	r1, r3
   173de:	2001      	movs	r0, #1
   173e0:	4b0e      	ldr	r3, [pc, #56]	; (1741c <MQTT_HandlePlaceMessages+0x5c>)
   173e2:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   173e4:	4b0e      	ldr	r3, [pc, #56]	; (17420 <MQTT_HandlePlaceMessages+0x60>)
   173e6:	0019      	movs	r1, r3
   173e8:	2001      	movs	r0, #1
   173ea:	4b0c      	ldr	r3, [pc, #48]	; (1741c <MQTT_HandlePlaceMessages+0x5c>)
   173ec:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_SHIPLOC_TOPIC_PUB,game_msg, strlen(game_msg), 1, 0);
   173ee:	003b      	movs	r3, r7
   173f0:	0018      	movs	r0, r3
   173f2:	4b0c      	ldr	r3, [pc, #48]	; (17424 <MQTT_HandlePlaceMessages+0x64>)
   173f4:	4798      	blx	r3
   173f6:	0004      	movs	r4, r0
   173f8:	003a      	movs	r2, r7
   173fa:	490b      	ldr	r1, [pc, #44]	; (17428 <MQTT_HandlePlaceMessages+0x68>)
   173fc:	480b      	ldr	r0, [pc, #44]	; (1742c <MQTT_HandlePlaceMessages+0x6c>)
   173fe:	2300      	movs	r3, #0
   17400:	9301      	str	r3, [sp, #4]
   17402:	2301      	movs	r3, #1
   17404:	9300      	str	r3, [sp, #0]
   17406:	0023      	movs	r3, r4
   17408:	4c09      	ldr	r4, [pc, #36]	; (17430 <MQTT_HandlePlaceMessages+0x70>)
   1740a:	47a0      	blx	r4
    }
}
   1740c:	46c0      	nop			; (mov r8, r8)
   1740e:	46bd      	mov	sp, r7
   17410:	b011      	add	sp, #68	; 0x44
   17412:	bd90      	pop	{r4, r7, pc}
   17414:	20000454 	.word	0x20000454
   17418:	0001b5e5 	.word	0x0001b5e5
   1741c:	0001e4d1 	.word	0x0001e4d1
   17420:	00036d30 	.word	0x00036d30
   17424:	00034ff7 	.word	0x00034ff7
   17428:	00036d34 	.word	0x00036d34
   1742c:	2000048c 	.word	0x2000048c
   17430:	0002fbc1 	.word	0x0002fbc1

00017434 <MQTT_HandleFireMessages>:

static void MQTT_HandleFireMessages(void)
{
   17434:	b590      	push	{r4, r7, lr}
   17436:	b093      	sub	sp, #76	; 0x4c
   17438:	af02      	add	r7, sp, #8
	char game_msg[MAX_MQTT_MSG_SIZE];
	if (pdPASS == xQueueReceive(xQueueFireBuffer, game_msg, 0)) {
   1743a:	4b13      	ldr	r3, [pc, #76]	; (17488 <MQTT_HandleFireMessages+0x54>)
   1743c:	681b      	ldr	r3, [r3, #0]
   1743e:	0039      	movs	r1, r7
   17440:	2200      	movs	r2, #0
   17442:	0018      	movs	r0, r3
   17444:	4b11      	ldr	r3, [pc, #68]	; (1748c <MQTT_HandleFireMessages+0x58>)
   17446:	4798      	blx	r3
   17448:	0003      	movs	r3, r0
   1744a:	2b01      	cmp	r3, #1
   1744c:	d118      	bne.n	17480 <MQTT_HandleFireMessages+0x4c>
		
		LogMessage(LOG_DEBUG_LVL, game_msg);
   1744e:	003b      	movs	r3, r7
   17450:	0019      	movs	r1, r3
   17452:	2001      	movs	r0, #1
   17454:	4b0e      	ldr	r3, [pc, #56]	; (17490 <MQTT_HandleFireMessages+0x5c>)
   17456:	4798      	blx	r3
		LogMessage(LOG_DEBUG_LVL, "\r\n");
   17458:	4b0e      	ldr	r3, [pc, #56]	; (17494 <MQTT_HandleFireMessages+0x60>)
   1745a:	0019      	movs	r1, r3
   1745c:	2001      	movs	r0, #1
   1745e:	4b0c      	ldr	r3, [pc, #48]	; (17490 <MQTT_HandleFireMessages+0x5c>)
   17460:	4798      	blx	r3
		mqtt_publish(&mqtt_inst, GAME_FIRE_TOPIC_PUB, game_msg, strlen(game_msg), 1, 0);
   17462:	003b      	movs	r3, r7
   17464:	0018      	movs	r0, r3
   17466:	4b0c      	ldr	r3, [pc, #48]	; (17498 <MQTT_HandleFireMessages+0x64>)
   17468:	4798      	blx	r3
   1746a:	0004      	movs	r4, r0
   1746c:	003a      	movs	r2, r7
   1746e:	490b      	ldr	r1, [pc, #44]	; (1749c <MQTT_HandleFireMessages+0x68>)
   17470:	480b      	ldr	r0, [pc, #44]	; (174a0 <MQTT_HandleFireMessages+0x6c>)
   17472:	2300      	movs	r3, #0
   17474:	9301      	str	r3, [sp, #4]
   17476:	2301      	movs	r3, #1
   17478:	9300      	str	r3, [sp, #0]
   1747a:	0023      	movs	r3, r4
   1747c:	4c09      	ldr	r4, [pc, #36]	; (174a4 <MQTT_HandleFireMessages+0x70>)
   1747e:	47a0      	blx	r4
	}
}
   17480:	46c0      	nop			; (mov r8, r8)
   17482:	46bd      	mov	sp, r7
   17484:	b011      	add	sp, #68	; 0x44
   17486:	bd90      	pop	{r4, r7, pc}
   17488:	20000458 	.word	0x20000458
   1748c:	0001b5e5 	.word	0x0001b5e5
   17490:	0001e4d1 	.word	0x0001e4d1
   17494:	00036d30 	.word	0x00036d30
   17498:	00034ff7 	.word	0x00034ff7
   1749c:	00036d44 	.word	0x00036d44
   174a0:	2000048c 	.word	0x2000048c
   174a4:	0002fbc1 	.word	0x0002fbc1

000174a8 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   174a8:	b590      	push	{r4, r7, lr}
   174aa:	b08d      	sub	sp, #52	; 0x34
   174ac:	af02      	add	r7, sp, #8
   174ae:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   174b0:	2064      	movs	r0, #100	; 0x64
   174b2:	4b70      	ldr	r3, [pc, #448]	; (17674 <vWifiTask+0x1cc>)
   174b4:	4798      	blx	r3
    init_state();
   174b6:	4b70      	ldr	r3, [pc, #448]	; (17678 <vWifiTask+0x1d0>)
   174b8:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   174ba:	2200      	movs	r2, #0
   174bc:	2104      	movs	r1, #4
   174be:	2005      	movs	r0, #5
   174c0:	4b6e      	ldr	r3, [pc, #440]	; (1767c <vWifiTask+0x1d4>)
   174c2:	4798      	blx	r3
   174c4:	0002      	movs	r2, r0
   174c6:	4b6e      	ldr	r3, [pc, #440]	; (17680 <vWifiTask+0x1d8>)
   174c8:	601a      	str	r2, [r3, #0]
	xQueuePlaceBuffer = xQueueCreate(2, sizeof(char) * MAX_MQTT_MSG_SIZE );
   174ca:	2200      	movs	r2, #0
   174cc:	2140      	movs	r1, #64	; 0x40
   174ce:	2002      	movs	r0, #2
   174d0:	4b6a      	ldr	r3, [pc, #424]	; (1767c <vWifiTask+0x1d4>)
   174d2:	4798      	blx	r3
   174d4:	0002      	movs	r2, r0
   174d6:	4b6b      	ldr	r3, [pc, #428]	; (17684 <vWifiTask+0x1dc>)
   174d8:	601a      	str	r2, [r3, #0]
	xQueueFireBuffer = xQueueCreate(2, sizeof(char) * MAX_MQTT_MSG_SIZE );
   174da:	2200      	movs	r2, #0
   174dc:	2140      	movs	r1, #64	; 0x40
   174de:	2002      	movs	r0, #2
   174e0:	4b66      	ldr	r3, [pc, #408]	; (1767c <vWifiTask+0x1d4>)
   174e2:	4798      	blx	r3
   174e4:	0002      	movs	r2, r0
   174e6:	4b68      	ldr	r3, [pc, #416]	; (17688 <vWifiTask+0x1e0>)
   174e8:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL) {
   174ea:	4b65      	ldr	r3, [pc, #404]	; (17680 <vWifiTask+0x1d8>)
   174ec:	681b      	ldr	r3, [r3, #0]
   174ee:	2b00      	cmp	r3, #0
   174f0:	d103      	bne.n	174fa <vWifiTask+0x52>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   174f2:	4b66      	ldr	r3, [pc, #408]	; (1768c <vWifiTask+0x1e4>)
   174f4:	0018      	movs	r0, r3
   174f6:	4b66      	ldr	r3, [pc, #408]	; (17690 <vWifiTask+0x1e8>)
   174f8:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   174fa:	4b66      	ldr	r3, [pc, #408]	; (17694 <vWifiTask+0x1ec>)
   174fc:	0018      	movs	r0, r3
   174fe:	4b64      	ldr	r3, [pc, #400]	; (17690 <vWifiTask+0x1e8>)
   17500:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   17502:	4b65      	ldr	r3, [pc, #404]	; (17698 <vWifiTask+0x1f0>)
   17504:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   17506:	4b65      	ldr	r3, [pc, #404]	; (1769c <vWifiTask+0x1f4>)
   17508:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   1750a:	4b65      	ldr	r3, [pc, #404]	; (176a0 <vWifiTask+0x1f8>)
   1750c:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    //init_storage();

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   1750e:	4b65      	ldr	r3, [pc, #404]	; (176a4 <vWifiTask+0x1fc>)
   17510:	4798      	blx	r3
    configure_extint_callbacks();
   17512:	4b65      	ldr	r3, [pc, #404]	; (176a8 <vWifiTask+0x200>)
   17514:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   17516:	230c      	movs	r3, #12
   17518:	18fb      	adds	r3, r7, r3
   1751a:	2218      	movs	r2, #24
   1751c:	2100      	movs	r1, #0
   1751e:	0018      	movs	r0, r3
   17520:	4b62      	ldr	r3, [pc, #392]	; (176ac <vWifiTask+0x204>)
   17522:	4798      	blx	r3

    nm_bsp_init();
   17524:	4b62      	ldr	r3, [pc, #392]	; (176b0 <vWifiTask+0x208>)
   17526:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   17528:	230c      	movs	r3, #12
   1752a:	18fb      	adds	r3, r7, r3
   1752c:	4a61      	ldr	r2, [pc, #388]	; (176b4 <vWifiTask+0x20c>)
   1752e:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   17530:	2327      	movs	r3, #39	; 0x27
   17532:	18fc      	adds	r4, r7, r3
   17534:	230c      	movs	r3, #12
   17536:	18fb      	adds	r3, r7, r3
   17538:	0018      	movs	r0, r3
   1753a:	4b5f      	ldr	r3, [pc, #380]	; (176b8 <vWifiTask+0x210>)
   1753c:	4798      	blx	r3
   1753e:	0003      	movs	r3, r0
   17540:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   17542:	2327      	movs	r3, #39	; 0x27
   17544:	18fb      	adds	r3, r7, r3
   17546:	781b      	ldrb	r3, [r3, #0]
   17548:	b25b      	sxtb	r3, r3
   1754a:	2b00      	cmp	r3, #0
   1754c:	d009      	beq.n	17562 <vWifiTask+0xba>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   1754e:	2327      	movs	r3, #39	; 0x27
   17550:	18fb      	adds	r3, r7, r3
   17552:	2200      	movs	r2, #0
   17554:	569a      	ldrsb	r2, [r3, r2]
   17556:	4b59      	ldr	r3, [pc, #356]	; (176bc <vWifiTask+0x214>)
   17558:	0019      	movs	r1, r3
   1755a:	2001      	movs	r0, #1
   1755c:	4b58      	ldr	r3, [pc, #352]	; (176c0 <vWifiTask+0x218>)
   1755e:	4798      	blx	r3
        while (1) {
   17560:	e7fe      	b.n	17560 <vWifiTask+0xb8>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   17562:	4a58      	ldr	r2, [pc, #352]	; (176c4 <vWifiTask+0x21c>)
   17564:	4b58      	ldr	r3, [pc, #352]	; (176c8 <vWifiTask+0x220>)
   17566:	0019      	movs	r1, r3
   17568:	2001      	movs	r0, #1
   1756a:	4b55      	ldr	r3, [pc, #340]	; (176c0 <vWifiTask+0x218>)
   1756c:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   1756e:	4b57      	ldr	r3, [pc, #348]	; (176cc <vWifiTask+0x224>)
   17570:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17572:	4a57      	ldr	r2, [pc, #348]	; (176d0 <vWifiTask+0x228>)
   17574:	4b57      	ldr	r3, [pc, #348]	; (176d4 <vWifiTask+0x22c>)
   17576:	0011      	movs	r1, r2
   17578:	0018      	movs	r0, r3
   1757a:	4b57      	ldr	r3, [pc, #348]	; (176d8 <vWifiTask+0x230>)
   1757c:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1757e:	4a57      	ldr	r2, [pc, #348]	; (176dc <vWifiTask+0x234>)
   17580:	4850      	ldr	r0, [pc, #320]	; (176c4 <vWifiTask+0x21c>)
   17582:	23ff      	movs	r3, #255	; 0xff
   17584:	9300      	str	r3, [sp, #0]
   17586:	0013      	movs	r3, r2
   17588:	2202      	movs	r2, #2
   1758a:	2106      	movs	r1, #6
   1758c:	4c54      	ldr	r4, [pc, #336]	; (176e0 <vWifiTask+0x238>)
   1758e:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   17590:	e006      	b.n	175a0 <vWifiTask+0xf8>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17592:	2000      	movs	r0, #0
   17594:	4b53      	ldr	r3, [pc, #332]	; (176e4 <vWifiTask+0x23c>)
   17596:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17598:	4b53      	ldr	r3, [pc, #332]	; (176e8 <vWifiTask+0x240>)
   1759a:	0018      	movs	r0, r3
   1759c:	4b53      	ldr	r3, [pc, #332]	; (176ec <vWifiTask+0x244>)
   1759e:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   175a0:	2002      	movs	r0, #2
   175a2:	4b53      	ldr	r3, [pc, #332]	; (176f0 <vWifiTask+0x248>)
   175a4:	4798      	blx	r3
   175a6:	0003      	movs	r3, r0
   175a8:	001a      	movs	r2, r3
   175aa:	2301      	movs	r3, #1
   175ac:	4053      	eors	r3, r2
   175ae:	b2db      	uxtb	r3, r3
   175b0:	2b00      	cmp	r3, #0
   175b2:	d1ee      	bne.n	17592 <vWifiTask+0xea>
    }

    vTaskDelay(1000);
   175b4:	23fa      	movs	r3, #250	; 0xfa
   175b6:	009b      	lsls	r3, r3, #2
   175b8:	0018      	movs	r0, r3
   175ba:	4b2e      	ldr	r3, [pc, #184]	; (17674 <vWifiTask+0x1cc>)
   175bc:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   175be:	4b4d      	ldr	r3, [pc, #308]	; (176f4 <vWifiTask+0x24c>)
   175c0:	2201      	movs	r2, #1
   175c2:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   175c4:	4b4b      	ldr	r3, [pc, #300]	; (176f4 <vWifiTask+0x24c>)
   175c6:	781b      	ldrb	r3, [r3, #0]
   175c8:	b25b      	sxtb	r3, r3
   175ca:	2b01      	cmp	r3, #1
   175cc:	d00b      	beq.n	175e6 <vWifiTask+0x13e>
   175ce:	dc02      	bgt.n	175d6 <vWifiTask+0x12e>
   175d0:	2b00      	cmp	r3, #0
   175d2:	d005      	beq.n	175e0 <vWifiTask+0x138>
   175d4:	e019      	b.n	1760a <vWifiTask+0x162>
   175d6:	2b02      	cmp	r3, #2
   175d8:	d008      	beq.n	175ec <vWifiTask+0x144>
   175da:	2b03      	cmp	r3, #3
   175dc:	d009      	beq.n	175f2 <vWifiTask+0x14a>
   175de:	e014      	b.n	1760a <vWifiTask+0x162>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   175e0:	4b45      	ldr	r3, [pc, #276]	; (176f8 <vWifiTask+0x250>)
   175e2:	4798      	blx	r3

                break;
   175e4:	e015      	b.n	17612 <vWifiTask+0x16a>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   175e6:	4b45      	ldr	r3, [pc, #276]	; (176fc <vWifiTask+0x254>)
   175e8:	4798      	blx	r3
                break;
   175ea:	e012      	b.n	17612 <vWifiTask+0x16a>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   175ec:	4b44      	ldr	r3, [pc, #272]	; (17700 <vWifiTask+0x258>)
   175ee:	4798      	blx	r3
                break;
   175f0:	e00f      	b.n	17612 <vWifiTask+0x16a>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   175f2:	4b44      	ldr	r3, [pc, #272]	; (17704 <vWifiTask+0x25c>)
   175f4:	4798      	blx	r3
				set_update_flag();
   175f6:	4b44      	ldr	r3, [pc, #272]	; (17708 <vWifiTask+0x260>)
   175f8:	4798      	blx	r3
				vTaskDelay(2000);
   175fa:	23fa      	movs	r3, #250	; 0xfa
   175fc:	00db      	lsls	r3, r3, #3
   175fe:	0018      	movs	r0, r3
   17600:	4b1c      	ldr	r3, [pc, #112]	; (17674 <vWifiTask+0x1cc>)
   17602:	4798      	blx	r3
				system_reset();
   17604:	4b41      	ldr	r3, [pc, #260]	; (1770c <vWifiTask+0x264>)
   17606:	4798      	blx	r3
                break;
   17608:	e003      	b.n	17612 <vWifiTask+0x16a>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   1760a:	4b3a      	ldr	r3, [pc, #232]	; (176f4 <vWifiTask+0x24c>)
   1760c:	2200      	movs	r2, #0
   1760e:	701a      	strb	r2, [r3, #0]
                break;
   17610:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   17612:	230b      	movs	r3, #11
   17614:	18fb      	adds	r3, r7, r3
   17616:	2200      	movs	r2, #0
   17618:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   1761a:	4b19      	ldr	r3, [pc, #100]	; (17680 <vWifiTask+0x1d8>)
   1761c:	681b      	ldr	r3, [r3, #0]
   1761e:	220b      	movs	r2, #11
   17620:	18b9      	adds	r1, r7, r2
   17622:	2200      	movs	r2, #0
   17624:	0018      	movs	r0, r3
   17626:	4b3a      	ldr	r3, [pc, #232]	; (17710 <vWifiTask+0x268>)
   17628:	4798      	blx	r3
   1762a:	0003      	movs	r3, r0
   1762c:	2b01      	cmp	r3, #1
   1762e:	d105      	bne.n	1763c <vWifiTask+0x194>
            wifiStateMachine = DataToReceive;  // Update new state
   17630:	230b      	movs	r3, #11
   17632:	18fb      	adds	r3, r7, r3
   17634:	781b      	ldrb	r3, [r3, #0]
   17636:	b25a      	sxtb	r2, r3
   17638:	4b2e      	ldr	r3, [pc, #184]	; (176f4 <vWifiTask+0x24c>)
   1763a:	701a      	strb	r2, [r3, #0]
        }

		 if(isPressed)
   1763c:	4b35      	ldr	r3, [pc, #212]	; (17714 <vWifiTask+0x26c>)
   1763e:	781b      	ldrb	r3, [r3, #0]
   17640:	b2db      	uxtb	r3, r3
   17642:	2b00      	cmp	r3, #0
   17644:	d011      	beq.n	1766a <vWifiTask+0x1c2>
		 {
			 mqtt_publish(&mqtt_inst, GAME_START_TOPIC_PUB, "1", 1, 1, 0);
   17646:	4a34      	ldr	r2, [pc, #208]	; (17718 <vWifiTask+0x270>)
   17648:	4934      	ldr	r1, [pc, #208]	; (1771c <vWifiTask+0x274>)
   1764a:	4835      	ldr	r0, [pc, #212]	; (17720 <vWifiTask+0x278>)
   1764c:	2300      	movs	r3, #0
   1764e:	9301      	str	r3, [sp, #4]
   17650:	2301      	movs	r3, #1
   17652:	9300      	str	r3, [sp, #0]
   17654:	2301      	movs	r3, #1
   17656:	4c33      	ldr	r4, [pc, #204]	; (17724 <vWifiTask+0x27c>)
   17658:	47a0      	blx	r4
			 LogMessage(LOG_DEBUG_LVL, "MQTT start signal sent");
   1765a:	4b33      	ldr	r3, [pc, #204]	; (17728 <vWifiTask+0x280>)
   1765c:	0019      	movs	r1, r3
   1765e:	2001      	movs	r0, #1
   17660:	4b17      	ldr	r3, [pc, #92]	; (176c0 <vWifiTask+0x218>)
   17662:	4798      	blx	r3
			 isPressed = false;
   17664:	4b2b      	ldr	r3, [pc, #172]	; (17714 <vWifiTask+0x26c>)
   17666:	2200      	movs	r2, #0
   17668:	701a      	strb	r2, [r3, #0]
		 }
		 
        vTaskDelay(100);
   1766a:	2064      	movs	r0, #100	; 0x64
   1766c:	4b01      	ldr	r3, [pc, #4]	; (17674 <vWifiTask+0x1cc>)
   1766e:	4798      	blx	r3
    while (1) {
   17670:	e7a8      	b.n	175c4 <vWifiTask+0x11c>
   17672:	46c0      	nop			; (mov r8, r8)
   17674:	0001c791 	.word	0x0001c791
   17678:	0001631d 	.word	0x0001631d
   1767c:	0001aa85 	.word	0x0001aa85
   17680:	20000450 	.word	0x20000450
   17684:	20000454 	.word	0x20000454
   17688:	20000458 	.word	0x20000458
   1768c:	00036d54 	.word	0x00036d54
   17690:	0001e3e5 	.word	0x0001e3e5
   17694:	00036d7c 	.word	0x00036d7c
   17698:	00016c75 	.word	0x00016c75
   1769c:	00016cb1 	.word	0x00016cb1
   176a0:	00017085 	.word	0x00017085
   176a4:	0001713d 	.word	0x0001713d
   176a8:	0001717d 	.word	0x0001717d
   176ac:	00034c3f 	.word	0x00034c3f
   176b0:	00020539 	.word	0x00020539
   176b4:	00016b21 	.word	0x00016b21
   176b8:	00022011 	.word	0x00022011
   176bc:	00036d98 	.word	0x00036d98
   176c0:	0001e4d1 	.word	0x0001e4d1
   176c4:	00036968 	.word	0x00036968
   176c8:	00036dc4 	.word	0x00036dc4
   176cc:	00025771 	.word	0x00025771
   176d0:	00016d69 	.word	0x00016d69
   176d4:	00016d35 	.word	0x00016d35
   176d8:	00025809 	.word	0x00025809
   176dc:	0003695c 	.word	0x0003695c
   176e0:	00022221 	.word	0x00022221
   176e4:	00022205 	.word	0x00022205
   176e8:	2000443c 	.word	0x2000443c
   176ec:	000328a1 	.word	0x000328a1
   176f0:	0001638d 	.word	0x0001638d
   176f4:	2000044d 	.word	0x2000044d
   176f8:	000172d5 	.word	0x000172d5
   176fc:	00017371 	.word	0x00017371
   17700:	000171bd 	.word	0x000171bd
   17704:	00017251 	.word	0x00017251
   17708:	0001772d 	.word	0x0001772d
   1770c:	00016291 	.word	0x00016291
   17710:	0001b5e5 	.word	0x0001b5e5
   17714:	200008c4 	.word	0x200008c4
   17718:	00036de8 	.word	0x00036de8
   1771c:	00036dec 	.word	0x00036dec
   17720:	2000048c 	.word	0x2000048c
   17724:	0002fbc1 	.word	0x0002fbc1
   17728:	00036dfc 	.word	0x00036dfc

0001772c <set_update_flag>:
/**
 static void set_update_flag(void)
 * @brief	Set up the update flag
 * @note
*/
 static void set_update_flag(void){
   1772c:	b590      	push	{r4, r7, lr}
   1772e:	b08f      	sub	sp, #60	; 0x3c
   17730:	af00      	add	r7, sp, #0
	 // Write Flag
	 FIL f_obj;
	 char update_file_name[] = "0:update.txt";
   17732:	003b      	movs	r3, r7
   17734:	4a16      	ldr	r2, [pc, #88]	; (17790 <set_update_flag+0x64>)
   17736:	ca13      	ldmia	r2!, {r0, r1, r4}
   17738:	c313      	stmia	r3!, {r0, r1, r4}
   1773a:	7812      	ldrb	r2, [r2, #0]
   1773c:	701a      	strb	r2, [r3, #0]
	 update_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   1773e:	003b      	movs	r3, r7
   17740:	2230      	movs	r2, #48	; 0x30
   17742:	701a      	strb	r2, [r3, #0]
	 FRESULT res = f_open(&f_obj, (char const *)update_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17744:	2337      	movs	r3, #55	; 0x37
   17746:	18fc      	adds	r4, r7, r3
   17748:	0039      	movs	r1, r7
   1774a:	2310      	movs	r3, #16
   1774c:	18fb      	adds	r3, r7, r3
   1774e:	220a      	movs	r2, #10
   17750:	0018      	movs	r0, r3
   17752:	4b10      	ldr	r3, [pc, #64]	; (17794 <set_update_flag+0x68>)
   17754:	4798      	blx	r3
   17756:	0003      	movs	r3, r0
   17758:	7023      	strb	r3, [r4, #0]
	 f_close(&f_obj);
   1775a:	2310      	movs	r3, #16
   1775c:	18fb      	adds	r3, r7, r3
   1775e:	0018      	movs	r0, r3
   17760:	4b0d      	ldr	r3, [pc, #52]	; (17798 <set_update_flag+0x6c>)
   17762:	4798      	blx	r3
	 if (res != FR_OK) {
   17764:	2337      	movs	r3, #55	; 0x37
   17766:	18fb      	adds	r3, r7, r3
   17768:	781b      	ldrb	r3, [r3, #0]
   1776a:	2b00      	cmp	r3, #0
   1776c:	d008      	beq.n	17780 <set_update_flag+0x54>
		 LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   1776e:	2337      	movs	r3, #55	; 0x37
   17770:	18fb      	adds	r3, r7, r3
   17772:	781a      	ldrb	r2, [r3, #0]
   17774:	4b09      	ldr	r3, [pc, #36]	; (1779c <set_update_flag+0x70>)
   17776:	0019      	movs	r1, r3
   17778:	2000      	movs	r0, #0
   1777a:	4b09      	ldr	r3, [pc, #36]	; (177a0 <set_update_flag+0x74>)
   1777c:	4798      	blx	r3
		 } else {
		 SerialConsoleWriteString("update.txt added!\r\n");
	}
 }
   1777e:	e003      	b.n	17788 <set_update_flag+0x5c>
		 SerialConsoleWriteString("update.txt added!\r\n");
   17780:	4b08      	ldr	r3, [pc, #32]	; (177a4 <set_update_flag+0x78>)
   17782:	0018      	movs	r0, r3
   17784:	4b08      	ldr	r3, [pc, #32]	; (177a8 <set_update_flag+0x7c>)
   17786:	4798      	blx	r3
 }
   17788:	46c0      	nop			; (mov r8, r8)
   1778a:	46bd      	mov	sp, r7
   1778c:	b00f      	add	sp, #60	; 0x3c
   1778e:	bd90      	pop	{r4, r7, pc}
   17790:	00036e38 	.word	0x00036e38
   17794:	0002db69 	.word	0x0002db69
   17798:	0002e569 	.word	0x0002e569
   1779c:	00036e14 	.word	0x00036e14
   177a0:	0001e4d1 	.word	0x0001e4d1
   177a4:	00036e24 	.word	0x00036e24
   177a8:	0001e3e5 	.word	0x0001e3e5

000177ac <WifiHandlerSetState>:
 

void WifiHandlerSetState(uint8_t state)
{
   177ac:	b590      	push	{r4, r7, lr}
   177ae:	b083      	sub	sp, #12
   177b0:	af00      	add	r7, sp, #0
   177b2:	0002      	movs	r2, r0
   177b4:	1dfb      	adds	r3, r7, #7
   177b6:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   177b8:	1dfb      	adds	r3, r7, #7
   177ba:	781b      	ldrb	r3, [r3, #0]
   177bc:	2b03      	cmp	r3, #3
   177be:	d806      	bhi.n	177ce <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   177c0:	4b05      	ldr	r3, [pc, #20]	; (177d8 <WifiHandlerSetState+0x2c>)
   177c2:	6818      	ldr	r0, [r3, #0]
   177c4:	1df9      	adds	r1, r7, #7
   177c6:	2300      	movs	r3, #0
   177c8:	220a      	movs	r2, #10
   177ca:	4c04      	ldr	r4, [pc, #16]	; (177dc <WifiHandlerSetState+0x30>)
   177cc:	47a0      	blx	r4
    }
}
   177ce:	46c0      	nop			; (mov r8, r8)
   177d0:	46bd      	mov	sp, r7
   177d2:	b003      	add	sp, #12
   177d4:	bd90      	pop	{r4, r7, pc}
   177d6:	46c0      	nop			; (mov r8, r8)
   177d8:	20000450 	.word	0x20000450
   177dc:	0001ad2d 	.word	0x0001ad2d

000177e0 <WifiSendPlaceData>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/

int WifiSendPlaceData(uint8_t *ship_loc, uint8_t loc_num){
   177e0:	b590      	push	{r4, r7, lr}
   177e2:	b0a5      	sub	sp, #148	; 0x94
   177e4:	af00      	add	r7, sp, #0
   177e6:	6078      	str	r0, [r7, #4]
   177e8:	000a      	movs	r2, r1
   177ea:	1cfb      	adds	r3, r7, #3
   177ec:	701a      	strb	r2, [r3, #0]
	char game_msg[MAX_MQTT_MSG_SIZE] = "";
   177ee:	234c      	movs	r3, #76	; 0x4c
   177f0:	18fb      	adds	r3, r7, r3
   177f2:	2200      	movs	r2, #0
   177f4:	601a      	str	r2, [r3, #0]
   177f6:	3304      	adds	r3, #4
   177f8:	223c      	movs	r2, #60	; 0x3c
   177fa:	2100      	movs	r1, #0
   177fc:	0018      	movs	r0, r3
   177fe:	4b29      	ldr	r3, [pc, #164]	; (178a4 <WifiSendPlaceData+0xc4>)
   17800:	4798      	blx	r3
	char ship_loc_str[MAX_MQTT_MSG_SIZE] = "";
   17802:	230c      	movs	r3, #12
   17804:	18fb      	adds	r3, r7, r3
   17806:	2200      	movs	r2, #0
   17808:	601a      	str	r2, [r3, #0]
   1780a:	3304      	adds	r3, #4
   1780c:	223c      	movs	r2, #60	; 0x3c
   1780e:	2100      	movs	r1, #0
   17810:	0018      	movs	r0, r3
   17812:	4b24      	ldr	r3, [pc, #144]	; (178a4 <WifiSendPlaceData+0xc4>)
   17814:	4798      	blx	r3
	
	sprintf(game_msg, "{ \"p\" : %d, \"loc\":",PLAYER);
   17816:	4924      	ldr	r1, [pc, #144]	; (178a8 <WifiSendPlaceData+0xc8>)
   17818:	234c      	movs	r3, #76	; 0x4c
   1781a:	18fb      	adds	r3, r7, r3
   1781c:	2201      	movs	r2, #1
   1781e:	0018      	movs	r0, r3
   17820:	4b22      	ldr	r3, [pc, #136]	; (178ac <WifiSendPlaceData+0xcc>)
   17822:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, game_msg);
   17824:	234c      	movs	r3, #76	; 0x4c
   17826:	18fb      	adds	r3, r7, r3
   17828:	0019      	movs	r1, r3
   1782a:	2001      	movs	r0, #1
   1782c:	4b20      	ldr	r3, [pc, #128]	; (178b0 <WifiSendPlaceData+0xd0>)
   1782e:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "\r\n");
   17830:	4b20      	ldr	r3, [pc, #128]	; (178b4 <WifiSendPlaceData+0xd4>)
   17832:	0019      	movs	r1, r3
   17834:	2001      	movs	r0, #1
   17836:	4b1e      	ldr	r3, [pc, #120]	; (178b0 <WifiSendPlaceData+0xd0>)
   17838:	4798      	blx	r3
	ConcatToArrString(ship_loc, loc_num, ship_loc_str);
   1783a:	230c      	movs	r3, #12
   1783c:	18fa      	adds	r2, r7, r3
   1783e:	1cfb      	adds	r3, r7, #3
   17840:	7819      	ldrb	r1, [r3, #0]
   17842:	687b      	ldr	r3, [r7, #4]
   17844:	0018      	movs	r0, r3
   17846:	4b1c      	ldr	r3, [pc, #112]	; (178b8 <WifiSendPlaceData+0xd8>)
   17848:	4798      	blx	r3
	strcat(game_msg,ship_loc_str);
   1784a:	230c      	movs	r3, #12
   1784c:	18fa      	adds	r2, r7, r3
   1784e:	234c      	movs	r3, #76	; 0x4c
   17850:	18fb      	adds	r3, r7, r3
   17852:	0011      	movs	r1, r2
   17854:	0018      	movs	r0, r3
   17856:	4b19      	ldr	r3, [pc, #100]	; (178bc <WifiSendPlaceData+0xdc>)
   17858:	4798      	blx	r3
	
	strcat(game_msg,"}");
   1785a:	234c      	movs	r3, #76	; 0x4c
   1785c:	18fb      	adds	r3, r7, r3
   1785e:	0018      	movs	r0, r3
   17860:	4b17      	ldr	r3, [pc, #92]	; (178c0 <WifiSendPlaceData+0xe0>)
   17862:	4798      	blx	r3
   17864:	0003      	movs	r3, r0
   17866:	001a      	movs	r2, r3
   17868:	234c      	movs	r3, #76	; 0x4c
   1786a:	18fb      	adds	r3, r7, r3
   1786c:	189a      	adds	r2, r3, r2
   1786e:	4b15      	ldr	r3, [pc, #84]	; (178c4 <WifiSendPlaceData+0xe4>)
   17870:	0010      	movs	r0, r2
   17872:	0019      	movs	r1, r3
   17874:	2302      	movs	r3, #2
   17876:	001a      	movs	r2, r3
   17878:	4b13      	ldr	r3, [pc, #76]	; (178c8 <WifiSendPlaceData+0xe8>)
   1787a:	4798      	blx	r3
	
	int error = xQueueSend(xQueuePlaceBuffer, game_msg, (TickType_t)10);
   1787c:	4b13      	ldr	r3, [pc, #76]	; (178cc <WifiSendPlaceData+0xec>)
   1787e:	6818      	ldr	r0, [r3, #0]
   17880:	234c      	movs	r3, #76	; 0x4c
   17882:	18f9      	adds	r1, r7, r3
   17884:	2300      	movs	r3, #0
   17886:	220a      	movs	r2, #10
   17888:	4c11      	ldr	r4, [pc, #68]	; (178d0 <WifiSendPlaceData+0xf0>)
   1788a:	47a0      	blx	r4
   1788c:	0003      	movs	r3, r0
   1788e:	228c      	movs	r2, #140	; 0x8c
   17890:	18ba      	adds	r2, r7, r2
   17892:	6013      	str	r3, [r2, #0]
    return error;
   17894:	238c      	movs	r3, #140	; 0x8c
   17896:	18fb      	adds	r3, r7, r3
   17898:	681b      	ldr	r3, [r3, #0]
}
   1789a:	0018      	movs	r0, r3
   1789c:	46bd      	mov	sp, r7
   1789e:	b025      	add	sp, #148	; 0x94
   178a0:	bd90      	pop	{r4, r7, pc}
   178a2:	46c0      	nop			; (mov r8, r8)
   178a4:	00034c3f 	.word	0x00034c3f
   178a8:	00036e48 	.word	0x00036e48
   178ac:	00034efd 	.word	0x00034efd
   178b0:	0001e4d1 	.word	0x0001e4d1
   178b4:	00036d30 	.word	0x00036d30
   178b8:	000179c5 	.word	0x000179c5
   178bc:	00034f7d 	.word	0x00034f7d
   178c0:	00034ff7 	.word	0x00034ff7
   178c4:	00036e5c 	.word	0x00036e5c
   178c8:	00034c09 	.word	0x00034c09
   178cc:	20000454 	.word	0x20000454
   178d0:	0001ad2d 	.word	0x0001ad2d

000178d4 <WifiSendFireData>:


int WifiSendFireData(uint8_t *ship_loc, uint8_t loc_num){
   178d4:	b590      	push	{r4, r7, lr}
   178d6:	b0a5      	sub	sp, #148	; 0x94
   178d8:	af00      	add	r7, sp, #0
   178da:	6078      	str	r0, [r7, #4]
   178dc:	000a      	movs	r2, r1
   178de:	1cfb      	adds	r3, r7, #3
   178e0:	701a      	strb	r2, [r3, #0]

	char game_msg[MAX_MQTT_MSG_SIZE] = "";	
   178e2:	234c      	movs	r3, #76	; 0x4c
   178e4:	18fb      	adds	r3, r7, r3
   178e6:	2200      	movs	r2, #0
   178e8:	601a      	str	r2, [r3, #0]
   178ea:	3304      	adds	r3, #4
   178ec:	223c      	movs	r2, #60	; 0x3c
   178ee:	2100      	movs	r1, #0
   178f0:	0018      	movs	r0, r3
   178f2:	4b28      	ldr	r3, [pc, #160]	; (17994 <WifiSendFireData+0xc0>)
   178f4:	4798      	blx	r3
	char ship_fire_str[MAX_MQTT_MSG_SIZE] = "";
   178f6:	230c      	movs	r3, #12
   178f8:	18fb      	adds	r3, r7, r3
   178fa:	2200      	movs	r2, #0
   178fc:	601a      	str	r2, [r3, #0]
   178fe:	3304      	adds	r3, #4
   17900:	223c      	movs	r2, #60	; 0x3c
   17902:	2100      	movs	r1, #0
   17904:	0018      	movs	r0, r3
   17906:	4b23      	ldr	r3, [pc, #140]	; (17994 <WifiSendFireData+0xc0>)
   17908:	4798      	blx	r3
	sprintf(game_msg, "{ \"p\" : %d, \"fire\":",PLAYER);
   1790a:	4923      	ldr	r1, [pc, #140]	; (17998 <WifiSendFireData+0xc4>)
   1790c:	234c      	movs	r3, #76	; 0x4c
   1790e:	18fb      	adds	r3, r7, r3
   17910:	2201      	movs	r2, #1
   17912:	0018      	movs	r0, r3
   17914:	4b21      	ldr	r3, [pc, #132]	; (1799c <WifiSendFireData+0xc8>)
   17916:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, game_msg);
   17918:	234c      	movs	r3, #76	; 0x4c
   1791a:	18fb      	adds	r3, r7, r3
   1791c:	0019      	movs	r1, r3
   1791e:	2001      	movs	r0, #1
   17920:	4b1f      	ldr	r3, [pc, #124]	; (179a0 <WifiSendFireData+0xcc>)
   17922:	4798      	blx	r3
	LogMessage(LOG_DEBUG_LVL, "\r\n");
   17924:	4b1f      	ldr	r3, [pc, #124]	; (179a4 <WifiSendFireData+0xd0>)
   17926:	0019      	movs	r1, r3
   17928:	2001      	movs	r0, #1
   1792a:	4b1d      	ldr	r3, [pc, #116]	; (179a0 <WifiSendFireData+0xcc>)
   1792c:	4798      	blx	r3
	ConcatToArrStringInt(ship_loc, ship_fire_str);
   1792e:	230c      	movs	r3, #12
   17930:	18fa      	adds	r2, r7, r3
   17932:	687b      	ldr	r3, [r7, #4]
   17934:	0011      	movs	r1, r2
   17936:	0018      	movs	r0, r3
   17938:	4b1b      	ldr	r3, [pc, #108]	; (179a8 <WifiSendFireData+0xd4>)
   1793a:	4798      	blx	r3
	strcat(game_msg,ship_fire_str);
   1793c:	230c      	movs	r3, #12
   1793e:	18fa      	adds	r2, r7, r3
   17940:	234c      	movs	r3, #76	; 0x4c
   17942:	18fb      	adds	r3, r7, r3
   17944:	0011      	movs	r1, r2
   17946:	0018      	movs	r0, r3
   17948:	4b18      	ldr	r3, [pc, #96]	; (179ac <WifiSendFireData+0xd8>)
   1794a:	4798      	blx	r3
			
	strcat(game_msg,"}");
   1794c:	234c      	movs	r3, #76	; 0x4c
   1794e:	18fb      	adds	r3, r7, r3
   17950:	0018      	movs	r0, r3
   17952:	4b17      	ldr	r3, [pc, #92]	; (179b0 <WifiSendFireData+0xdc>)
   17954:	4798      	blx	r3
   17956:	0003      	movs	r3, r0
   17958:	001a      	movs	r2, r3
   1795a:	234c      	movs	r3, #76	; 0x4c
   1795c:	18fb      	adds	r3, r7, r3
   1795e:	189a      	adds	r2, r3, r2
   17960:	4b14      	ldr	r3, [pc, #80]	; (179b4 <WifiSendFireData+0xe0>)
   17962:	0010      	movs	r0, r2
   17964:	0019      	movs	r1, r3
   17966:	2302      	movs	r3, #2
   17968:	001a      	movs	r2, r3
   1796a:	4b13      	ldr	r3, [pc, #76]	; (179b8 <WifiSendFireData+0xe4>)
   1796c:	4798      	blx	r3
	int error = xQueueSend(xQueueFireBuffer, game_msg, (TickType_t)10);
   1796e:	4b13      	ldr	r3, [pc, #76]	; (179bc <WifiSendFireData+0xe8>)
   17970:	6818      	ldr	r0, [r3, #0]
   17972:	234c      	movs	r3, #76	; 0x4c
   17974:	18f9      	adds	r1, r7, r3
   17976:	2300      	movs	r3, #0
   17978:	220a      	movs	r2, #10
   1797a:	4c11      	ldr	r4, [pc, #68]	; (179c0 <WifiSendFireData+0xec>)
   1797c:	47a0      	blx	r4
   1797e:	0003      	movs	r3, r0
   17980:	228c      	movs	r2, #140	; 0x8c
   17982:	18ba      	adds	r2, r7, r2
   17984:	6013      	str	r3, [r2, #0]
	return error;
   17986:	238c      	movs	r3, #140	; 0x8c
   17988:	18fb      	adds	r3, r7, r3
   1798a:	681b      	ldr	r3, [r3, #0]
	}
   1798c:	0018      	movs	r0, r3
   1798e:	46bd      	mov	sp, r7
   17990:	b025      	add	sp, #148	; 0x94
   17992:	bd90      	pop	{r4, r7, pc}
   17994:	00034c3f 	.word	0x00034c3f
   17998:	00036e60 	.word	0x00036e60
   1799c:	00034efd 	.word	0x00034efd
   179a0:	0001e4d1 	.word	0x0001e4d1
   179a4:	00036d30 	.word	0x00036d30
   179a8:	00017a75 	.word	0x00017a75
   179ac:	00034f7d 	.word	0x00034f7d
   179b0:	00034ff7 	.word	0x00034ff7
   179b4:	00036e5c 	.word	0x00036e5c
   179b8:	00034c09 	.word	0x00034c09
   179bc:	20000458 	.word	0x20000458
   179c0:	0001ad2d 	.word	0x0001ad2d

000179c4 <ConcatToArrString>:


void ConcatToArrString(uint8_t *arr, uint8_t arr_size, char* output){
   179c4:	b580      	push	{r7, lr}
   179c6:	b086      	sub	sp, #24
   179c8:	af00      	add	r7, sp, #0
   179ca:	60f8      	str	r0, [r7, #12]
   179cc:	607a      	str	r2, [r7, #4]
   179ce:	230b      	movs	r3, #11
   179d0:	18fb      	adds	r3, r7, r3
   179d2:	1c0a      	adds	r2, r1, #0
   179d4:	701a      	strb	r2, [r3, #0]
	
	 int n = 0;
   179d6:	2300      	movs	r3, #0
   179d8:	617b      	str	r3, [r7, #20]

	 n += sprintf (&output[n], "[");
   179da:	697b      	ldr	r3, [r7, #20]
   179dc:	687a      	ldr	r2, [r7, #4]
   179de:	18d2      	adds	r2, r2, r3
   179e0:	4b1f      	ldr	r3, [pc, #124]	; (17a60 <ConcatToArrString+0x9c>)
   179e2:	0010      	movs	r0, r2
   179e4:	0019      	movs	r1, r3
   179e6:	2302      	movs	r3, #2
   179e8:	001a      	movs	r2, r3
   179ea:	4b1e      	ldr	r3, [pc, #120]	; (17a64 <ConcatToArrString+0xa0>)
   179ec:	4798      	blx	r3
   179ee:	2201      	movs	r2, #1
   179f0:	697b      	ldr	r3, [r7, #20]
   179f2:	189b      	adds	r3, r3, r2
   179f4:	617b      	str	r3, [r7, #20]
	 for (int i = 0; i < arr_size - 1; i++) {
   179f6:	2300      	movs	r3, #0
   179f8:	613b      	str	r3, [r7, #16]
   179fa:	e012      	b.n	17a22 <ConcatToArrString+0x5e>
		 n += sprintf (&output[n], "%d,", arr[i]);
   179fc:	697b      	ldr	r3, [r7, #20]
   179fe:	687a      	ldr	r2, [r7, #4]
   17a00:	18d0      	adds	r0, r2, r3
   17a02:	693b      	ldr	r3, [r7, #16]
   17a04:	68fa      	ldr	r2, [r7, #12]
   17a06:	18d3      	adds	r3, r2, r3
   17a08:	781b      	ldrb	r3, [r3, #0]
   17a0a:	001a      	movs	r2, r3
   17a0c:	4b16      	ldr	r3, [pc, #88]	; (17a68 <ConcatToArrString+0xa4>)
   17a0e:	0019      	movs	r1, r3
   17a10:	4b16      	ldr	r3, [pc, #88]	; (17a6c <ConcatToArrString+0xa8>)
   17a12:	4798      	blx	r3
   17a14:	0002      	movs	r2, r0
   17a16:	697b      	ldr	r3, [r7, #20]
   17a18:	189b      	adds	r3, r3, r2
   17a1a:	617b      	str	r3, [r7, #20]
	 for (int i = 0; i < arr_size - 1; i++) {
   17a1c:	693b      	ldr	r3, [r7, #16]
   17a1e:	3301      	adds	r3, #1
   17a20:	613b      	str	r3, [r7, #16]
   17a22:	230b      	movs	r3, #11
   17a24:	18fb      	adds	r3, r7, r3
   17a26:	781b      	ldrb	r3, [r3, #0]
   17a28:	1e5a      	subs	r2, r3, #1
   17a2a:	693b      	ldr	r3, [r7, #16]
   17a2c:	429a      	cmp	r2, r3
   17a2e:	dce5      	bgt.n	179fc <ConcatToArrString+0x38>
	 }
	 n += sprintf (&output[n], "%d]", arr[arr_size - 1]);
   17a30:	697b      	ldr	r3, [r7, #20]
   17a32:	687a      	ldr	r2, [r7, #4]
   17a34:	18d0      	adds	r0, r2, r3
   17a36:	230b      	movs	r3, #11
   17a38:	18fb      	adds	r3, r7, r3
   17a3a:	781b      	ldrb	r3, [r3, #0]
   17a3c:	3b01      	subs	r3, #1
   17a3e:	68fa      	ldr	r2, [r7, #12]
   17a40:	18d3      	adds	r3, r2, r3
   17a42:	781b      	ldrb	r3, [r3, #0]
   17a44:	001a      	movs	r2, r3
   17a46:	4b0a      	ldr	r3, [pc, #40]	; (17a70 <ConcatToArrString+0xac>)
   17a48:	0019      	movs	r1, r3
   17a4a:	4b08      	ldr	r3, [pc, #32]	; (17a6c <ConcatToArrString+0xa8>)
   17a4c:	4798      	blx	r3
   17a4e:	0002      	movs	r2, r0
   17a50:	697b      	ldr	r3, [r7, #20]
   17a52:	189b      	adds	r3, r3, r2
   17a54:	617b      	str	r3, [r7, #20]
	 
}
   17a56:	46c0      	nop			; (mov r8, r8)
   17a58:	46bd      	mov	sp, r7
   17a5a:	b006      	add	sp, #24
   17a5c:	bd80      	pop	{r7, pc}
   17a5e:	46c0      	nop			; (mov r8, r8)
   17a60:	00036b10 	.word	0x00036b10
   17a64:	00034c09 	.word	0x00034c09
   17a68:	00036e74 	.word	0x00036e74
   17a6c:	00034efd 	.word	0x00034efd
   17a70:	00036e78 	.word	0x00036e78

00017a74 <ConcatToArrStringInt>:

void ConcatToArrStringInt(uint8_t *arr, char* output){
   17a74:	b580      	push	{r7, lr}
   17a76:	b084      	sub	sp, #16
   17a78:	af00      	add	r7, sp, #0
   17a7a:	6078      	str	r0, [r7, #4]
   17a7c:	6039      	str	r1, [r7, #0]
	int n = 0;
   17a7e:	2300      	movs	r3, #0
   17a80:	60fb      	str	r3, [r7, #12]
	n += sprintf (&output[n], " %d", arr);
   17a82:	68fb      	ldr	r3, [r7, #12]
   17a84:	683a      	ldr	r2, [r7, #0]
   17a86:	18d3      	adds	r3, r2, r3
   17a88:	687a      	ldr	r2, [r7, #4]
   17a8a:	4906      	ldr	r1, [pc, #24]	; (17aa4 <ConcatToArrStringInt+0x30>)
   17a8c:	0018      	movs	r0, r3
   17a8e:	4b06      	ldr	r3, [pc, #24]	; (17aa8 <ConcatToArrStringInt+0x34>)
   17a90:	4798      	blx	r3
   17a92:	0002      	movs	r2, r0
   17a94:	68fb      	ldr	r3, [r7, #12]
   17a96:	189b      	adds	r3, r3, r2
   17a98:	60fb      	str	r3, [r7, #12]
	
   17a9a:	46c0      	nop			; (mov r8, r8)
   17a9c:	46bd      	mov	sp, r7
   17a9e:	b004      	add	sp, #16
   17aa0:	bd80      	pop	{r7, pc}
   17aa2:	46c0      	nop			; (mov r8, r8)
   17aa4:	00036e7c 	.word	0x00036e7c
   17aa8:	00034efd 	.word	0x00034efd

00017aac <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   17aac:	b580      	push	{r7, lr}
   17aae:	b082      	sub	sp, #8
   17ab0:	af00      	add	r7, sp, #0
   17ab2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   17ab4:	687b      	ldr	r3, [r7, #4]
   17ab6:	2200      	movs	r2, #0
   17ab8:	701a      	strb	r2, [r3, #0]
}
   17aba:	46c0      	nop			; (mov r8, r8)
   17abc:	46bd      	mov	sp, r7
   17abe:	b002      	add	sp, #8
   17ac0:	bd80      	pop	{r7, pc}
	...

00017ac4 <system_apb_clock_set_mask>:
{
   17ac4:	b580      	push	{r7, lr}
   17ac6:	b082      	sub	sp, #8
   17ac8:	af00      	add	r7, sp, #0
   17aca:	0002      	movs	r2, r0
   17acc:	6039      	str	r1, [r7, #0]
   17ace:	1dfb      	adds	r3, r7, #7
   17ad0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   17ad2:	1dfb      	adds	r3, r7, #7
   17ad4:	781b      	ldrb	r3, [r3, #0]
   17ad6:	2b01      	cmp	r3, #1
   17ad8:	d00a      	beq.n	17af0 <system_apb_clock_set_mask+0x2c>
   17ada:	2b02      	cmp	r3, #2
   17adc:	d00f      	beq.n	17afe <system_apb_clock_set_mask+0x3a>
   17ade:	2b00      	cmp	r3, #0
   17ae0:	d114      	bne.n	17b0c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   17ae2:	4b0e      	ldr	r3, [pc, #56]	; (17b1c <system_apb_clock_set_mask+0x58>)
   17ae4:	4a0d      	ldr	r2, [pc, #52]	; (17b1c <system_apb_clock_set_mask+0x58>)
   17ae6:	6991      	ldr	r1, [r2, #24]
   17ae8:	683a      	ldr	r2, [r7, #0]
   17aea:	430a      	orrs	r2, r1
   17aec:	619a      	str	r2, [r3, #24]
			break;
   17aee:	e00f      	b.n	17b10 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   17af0:	4b0a      	ldr	r3, [pc, #40]	; (17b1c <system_apb_clock_set_mask+0x58>)
   17af2:	4a0a      	ldr	r2, [pc, #40]	; (17b1c <system_apb_clock_set_mask+0x58>)
   17af4:	69d1      	ldr	r1, [r2, #28]
   17af6:	683a      	ldr	r2, [r7, #0]
   17af8:	430a      	orrs	r2, r1
   17afa:	61da      	str	r2, [r3, #28]
			break;
   17afc:	e008      	b.n	17b10 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   17afe:	4b07      	ldr	r3, [pc, #28]	; (17b1c <system_apb_clock_set_mask+0x58>)
   17b00:	4a06      	ldr	r2, [pc, #24]	; (17b1c <system_apb_clock_set_mask+0x58>)
   17b02:	6a11      	ldr	r1, [r2, #32]
   17b04:	683a      	ldr	r2, [r7, #0]
   17b06:	430a      	orrs	r2, r1
   17b08:	621a      	str	r2, [r3, #32]
			break;
   17b0a:	e001      	b.n	17b10 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   17b0c:	2317      	movs	r3, #23
   17b0e:	e000      	b.n	17b12 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   17b10:	2300      	movs	r3, #0
}
   17b12:	0018      	movs	r0, r3
   17b14:	46bd      	mov	sp, r7
   17b16:	b002      	add	sp, #8
   17b18:	bd80      	pop	{r7, pc}
   17b1a:	46c0      	nop			; (mov r8, r8)
   17b1c:	40000400 	.word	0x40000400

00017b20 <system_pinmux_get_config_defaults>:
{
   17b20:	b580      	push	{r7, lr}
   17b22:	b082      	sub	sp, #8
   17b24:	af00      	add	r7, sp, #0
   17b26:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   17b28:	687b      	ldr	r3, [r7, #4]
   17b2a:	2280      	movs	r2, #128	; 0x80
   17b2c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   17b2e:	687b      	ldr	r3, [r7, #4]
   17b30:	2200      	movs	r2, #0
   17b32:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   17b34:	687b      	ldr	r3, [r7, #4]
   17b36:	2201      	movs	r2, #1
   17b38:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   17b3a:	687b      	ldr	r3, [r7, #4]
   17b3c:	2200      	movs	r2, #0
   17b3e:	70da      	strb	r2, [r3, #3]
}
   17b40:	46c0      	nop			; (mov r8, r8)
   17b42:	46bd      	mov	sp, r7
   17b44:	b002      	add	sp, #8
   17b46:	bd80      	pop	{r7, pc}

00017b48 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   17b48:	b580      	push	{r7, lr}
   17b4a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   17b4c:	4b05      	ldr	r3, [pc, #20]	; (17b64 <system_is_debugger_present+0x1c>)
   17b4e:	789b      	ldrb	r3, [r3, #2]
   17b50:	b2db      	uxtb	r3, r3
   17b52:	001a      	movs	r2, r3
   17b54:	2302      	movs	r3, #2
   17b56:	4013      	ands	r3, r2
   17b58:	1e5a      	subs	r2, r3, #1
   17b5a:	4193      	sbcs	r3, r2
   17b5c:	b2db      	uxtb	r3, r3
}
   17b5e:	0018      	movs	r0, r3
   17b60:	46bd      	mov	sp, r7
   17b62:	bd80      	pop	{r7, pc}
   17b64:	41002000 	.word	0x41002000

00017b68 <system_interrupt_enter_critical_section>:
{
   17b68:	b580      	push	{r7, lr}
   17b6a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   17b6c:	4b02      	ldr	r3, [pc, #8]	; (17b78 <system_interrupt_enter_critical_section+0x10>)
   17b6e:	4798      	blx	r3
}
   17b70:	46c0      	nop			; (mov r8, r8)
   17b72:	46bd      	mov	sp, r7
   17b74:	bd80      	pop	{r7, pc}
   17b76:	46c0      	nop			; (mov r8, r8)
   17b78:	00026469 	.word	0x00026469

00017b7c <system_interrupt_leave_critical_section>:
{
   17b7c:	b580      	push	{r7, lr}
   17b7e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   17b80:	4b02      	ldr	r3, [pc, #8]	; (17b8c <system_interrupt_leave_critical_section+0x10>)
   17b82:	4798      	blx	r3
}
   17b84:	46c0      	nop			; (mov r8, r8)
   17b86:	46bd      	mov	sp, r7
   17b88:	bd80      	pop	{r7, pc}
   17b8a:	46c0      	nop			; (mov r8, r8)
   17b8c:	000264bd 	.word	0x000264bd

00017b90 <system_interrupt_disable>:
{
   17b90:	b580      	push	{r7, lr}
   17b92:	b082      	sub	sp, #8
   17b94:	af00      	add	r7, sp, #0
   17b96:	0002      	movs	r2, r0
   17b98:	1dfb      	adds	r3, r7, #7
   17b9a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   17b9c:	4a07      	ldr	r2, [pc, #28]	; (17bbc <system_interrupt_disable+0x2c>)
   17b9e:	1dfb      	adds	r3, r7, #7
   17ba0:	781b      	ldrb	r3, [r3, #0]
   17ba2:	0019      	movs	r1, r3
   17ba4:	231f      	movs	r3, #31
   17ba6:	400b      	ands	r3, r1
   17ba8:	2101      	movs	r1, #1
   17baa:	4099      	lsls	r1, r3
   17bac:	000b      	movs	r3, r1
   17bae:	0019      	movs	r1, r3
   17bb0:	2380      	movs	r3, #128	; 0x80
   17bb2:	50d1      	str	r1, [r2, r3]
}
   17bb4:	46c0      	nop			; (mov r8, r8)
   17bb6:	46bd      	mov	sp, r7
   17bb8:	b002      	add	sp, #8
   17bba:	bd80      	pop	{r7, pc}
   17bbc:	e000e100 	.word	0xe000e100

00017bc0 <i2c_master_is_syncing>:
{
   17bc0:	b580      	push	{r7, lr}
   17bc2:	b084      	sub	sp, #16
   17bc4:	af00      	add	r7, sp, #0
   17bc6:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   17bc8:	687b      	ldr	r3, [r7, #4]
   17bca:	681b      	ldr	r3, [r3, #0]
   17bcc:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   17bce:	68fb      	ldr	r3, [r7, #12]
   17bd0:	69db      	ldr	r3, [r3, #28]
   17bd2:	2207      	movs	r2, #7
   17bd4:	4013      	ands	r3, r2
   17bd6:	1e5a      	subs	r2, r3, #1
   17bd8:	4193      	sbcs	r3, r2
   17bda:	b2db      	uxtb	r3, r3
}
   17bdc:	0018      	movs	r0, r3
   17bde:	46bd      	mov	sp, r7
   17be0:	b004      	add	sp, #16
   17be2:	bd80      	pop	{r7, pc}

00017be4 <_i2c_master_wait_for_sync>:
{
   17be4:	b580      	push	{r7, lr}
   17be6:	b082      	sub	sp, #8
   17be8:	af00      	add	r7, sp, #0
   17bea:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   17bec:	46c0      	nop			; (mov r8, r8)
   17bee:	687b      	ldr	r3, [r7, #4]
   17bf0:	0018      	movs	r0, r3
   17bf2:	4b04      	ldr	r3, [pc, #16]	; (17c04 <_i2c_master_wait_for_sync+0x20>)
   17bf4:	4798      	blx	r3
   17bf6:	1e03      	subs	r3, r0, #0
   17bf8:	d1f9      	bne.n	17bee <_i2c_master_wait_for_sync+0xa>
}
   17bfa:	46c0      	nop			; (mov r8, r8)
   17bfc:	46bd      	mov	sp, r7
   17bfe:	b002      	add	sp, #8
   17c00:	bd80      	pop	{r7, pc}
   17c02:	46c0      	nop			; (mov r8, r8)
   17c04:	00017bc1 	.word	0x00017bc1

00017c08 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   17c08:	b580      	push	{r7, lr}
   17c0a:	b084      	sub	sp, #16
   17c0c:	af00      	add	r7, sp, #0
   17c0e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17c10:	687b      	ldr	r3, [r7, #4]
   17c12:	681b      	ldr	r3, [r3, #0]
   17c14:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   17c16:	687b      	ldr	r3, [r7, #4]
   17c18:	681b      	ldr	r3, [r3, #0]
   17c1a:	0018      	movs	r0, r3
   17c1c:	4b0d      	ldr	r3, [pc, #52]	; (17c54 <i2c_master_disable+0x4c>)
   17c1e:	4798      	blx	r3
   17c20:	0003      	movs	r3, r0
   17c22:	0018      	movs	r0, r3
   17c24:	4b0c      	ldr	r3, [pc, #48]	; (17c58 <i2c_master_disable+0x50>)
   17c26:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   17c28:	687b      	ldr	r3, [r7, #4]
   17c2a:	0018      	movs	r0, r3
   17c2c:	4b0b      	ldr	r3, [pc, #44]	; (17c5c <i2c_master_disable+0x54>)
   17c2e:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   17c30:	68fb      	ldr	r3, [r7, #12]
   17c32:	2283      	movs	r2, #131	; 0x83
   17c34:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   17c36:	68fb      	ldr	r3, [r7, #12]
   17c38:	2283      	movs	r2, #131	; 0x83
   17c3a:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   17c3c:	68fb      	ldr	r3, [r7, #12]
   17c3e:	681b      	ldr	r3, [r3, #0]
   17c40:	2202      	movs	r2, #2
   17c42:	4393      	bics	r3, r2
   17c44:	001a      	movs	r2, r3
   17c46:	68fb      	ldr	r3, [r7, #12]
   17c48:	601a      	str	r2, [r3, #0]

}
   17c4a:	46c0      	nop			; (mov r8, r8)
   17c4c:	46bd      	mov	sp, r7
   17c4e:	b004      	add	sp, #16
   17c50:	bd80      	pop	{r7, pc}
   17c52:	46c0      	nop			; (mov r8, r8)
   17c54:	0002793d 	.word	0x0002793d
   17c58:	00017b91 	.word	0x00017b91
   17c5c:	00017be5 	.word	0x00017be5

00017c60 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   17c60:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c62:	b097      	sub	sp, #92	; 0x5c
   17c64:	af00      	add	r7, sp, #0
   17c66:	6178      	str	r0, [r7, #20]
   17c68:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   17c6a:	2300      	movs	r3, #0
   17c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   17c6e:	2300      	movs	r3, #0
   17c70:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   17c72:	2300      	movs	r3, #0
   17c74:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   17c76:	233b      	movs	r3, #59	; 0x3b
   17c78:	2210      	movs	r2, #16
   17c7a:	4694      	mov	ip, r2
   17c7c:	44bc      	add	ip, r7
   17c7e:	4463      	add	r3, ip
   17c80:	2200      	movs	r2, #0
   17c82:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   17c84:	697b      	ldr	r3, [r7, #20]
   17c86:	681b      	ldr	r3, [r3, #0]
   17c88:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   17c8a:	697b      	ldr	r3, [r7, #20]
   17c8c:	681b      	ldr	r3, [r3, #0]
   17c8e:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   17c90:	2323      	movs	r3, #35	; 0x23
   17c92:	2210      	movs	r2, #16
   17c94:	18ba      	adds	r2, r7, r2
   17c96:	18d4      	adds	r4, r2, r3
   17c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17c9a:	0018      	movs	r0, r3
   17c9c:	4bc0      	ldr	r3, [pc, #768]	; (17fa0 <_i2c_master_set_config+0x340>)
   17c9e:	4798      	blx	r3
   17ca0:	0003      	movs	r3, r0
   17ca2:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   17ca4:	230c      	movs	r3, #12
   17ca6:	2210      	movs	r2, #16
   17ca8:	4694      	mov	ip, r2
   17caa:	44bc      	add	ip, r7
   17cac:	4463      	add	r3, ip
   17cae:	0018      	movs	r0, r3
   17cb0:	4bbc      	ldr	r3, [pc, #752]	; (17fa4 <_i2c_master_set_config+0x344>)
   17cb2:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   17cb4:	693b      	ldr	r3, [r7, #16]
   17cb6:	69db      	ldr	r3, [r3, #28]
   17cb8:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   17cba:	693b      	ldr	r3, [r7, #16]
   17cbc:	6a1b      	ldr	r3, [r3, #32]
   17cbe:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   17cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17cc2:	2b00      	cmp	r3, #0
   17cc4:	d106      	bne.n	17cd4 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   17cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17cc8:	2100      	movs	r1, #0
   17cca:	0018      	movs	r0, r3
   17ccc:	4bb6      	ldr	r3, [pc, #728]	; (17fa8 <_i2c_master_set_config+0x348>)
   17cce:	4798      	blx	r3
   17cd0:	0003      	movs	r3, r0
   17cd2:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   17cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17cd6:	b2da      	uxtb	r2, r3
   17cd8:	230c      	movs	r3, #12
   17cda:	2110      	movs	r1, #16
   17cdc:	468c      	mov	ip, r1
   17cde:	44bc      	add	ip, r7
   17ce0:	4463      	add	r3, ip
   17ce2:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17ce4:	230c      	movs	r3, #12
   17ce6:	2210      	movs	r2, #16
   17ce8:	4694      	mov	ip, r2
   17cea:	44bc      	add	ip, r7
   17cec:	4463      	add	r3, ip
   17cee:	2202      	movs	r2, #2
   17cf0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   17cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17cf4:	0c1b      	lsrs	r3, r3, #16
   17cf6:	b2db      	uxtb	r3, r3
   17cf8:	220c      	movs	r2, #12
   17cfa:	2110      	movs	r1, #16
   17cfc:	468c      	mov	ip, r1
   17cfe:	44bc      	add	ip, r7
   17d00:	4462      	add	r2, ip
   17d02:	0011      	movs	r1, r2
   17d04:	0018      	movs	r0, r3
   17d06:	4ba9      	ldr	r3, [pc, #676]	; (17fac <_i2c_master_set_config+0x34c>)
   17d08:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   17d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17d0c:	2b00      	cmp	r3, #0
   17d0e:	d106      	bne.n	17d1e <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   17d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17d12:	2101      	movs	r1, #1
   17d14:	0018      	movs	r0, r3
   17d16:	4ba4      	ldr	r3, [pc, #656]	; (17fa8 <_i2c_master_set_config+0x348>)
   17d18:	4798      	blx	r3
   17d1a:	0003      	movs	r3, r0
   17d1c:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   17d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17d20:	b2da      	uxtb	r2, r3
   17d22:	230c      	movs	r3, #12
   17d24:	2110      	movs	r1, #16
   17d26:	468c      	mov	ip, r1
   17d28:	44bc      	add	ip, r7
   17d2a:	4463      	add	r3, ip
   17d2c:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   17d2e:	230c      	movs	r3, #12
   17d30:	2210      	movs	r2, #16
   17d32:	4694      	mov	ip, r2
   17d34:	44bc      	add	ip, r7
   17d36:	4463      	add	r3, ip
   17d38:	2202      	movs	r2, #2
   17d3a:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   17d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17d3e:	0c1b      	lsrs	r3, r3, #16
   17d40:	b2db      	uxtb	r3, r3
   17d42:	220c      	movs	r2, #12
   17d44:	2110      	movs	r1, #16
   17d46:	468c      	mov	ip, r1
   17d48:	44bc      	add	ip, r7
   17d4a:	4462      	add	r2, ip
   17d4c:	0011      	movs	r1, r2
   17d4e:	0018      	movs	r0, r3
   17d50:	4b96      	ldr	r3, [pc, #600]	; (17fac <_i2c_master_set_config+0x34c>)
   17d52:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   17d54:	693b      	ldr	r3, [r7, #16]
   17d56:	8a9a      	ldrh	r2, [r3, #20]
   17d58:	697b      	ldr	r3, [r7, #20]
   17d5a:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   17d5c:	693b      	ldr	r3, [r7, #16]
   17d5e:	8ada      	ldrh	r2, [r3, #22]
   17d60:	697b      	ldr	r3, [r7, #20]
   17d62:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   17d64:	693b      	ldr	r3, [r7, #16]
   17d66:	7e1b      	ldrb	r3, [r3, #24]
   17d68:	2b00      	cmp	r3, #0
   17d6a:	d103      	bne.n	17d74 <_i2c_master_set_config+0x114>
   17d6c:	4b90      	ldr	r3, [pc, #576]	; (17fb0 <_i2c_master_set_config+0x350>)
   17d6e:	4798      	blx	r3
   17d70:	1e03      	subs	r3, r0, #0
   17d72:	d002      	beq.n	17d7a <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   17d74:	2380      	movs	r3, #128	; 0x80
   17d76:	657b      	str	r3, [r7, #84]	; 0x54
   17d78:	e001      	b.n	17d7e <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   17d7a:	2300      	movs	r3, #0
   17d7c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   17d7e:	693b      	ldr	r3, [r7, #16]
   17d80:	691b      	ldr	r3, [r3, #16]
   17d82:	2b00      	cmp	r3, #0
   17d84:	d004      	beq.n	17d90 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   17d86:	693b      	ldr	r3, [r7, #16]
   17d88:	691b      	ldr	r3, [r3, #16]
   17d8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17d8c:	4313      	orrs	r3, r2
   17d8e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   17d90:	693b      	ldr	r3, [r7, #16]
   17d92:	689b      	ldr	r3, [r3, #8]
   17d94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17d96:	4313      	orrs	r3, r2
   17d98:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   17d9a:	693b      	ldr	r3, [r7, #16]
   17d9c:	2224      	movs	r2, #36	; 0x24
   17d9e:	5c9b      	ldrb	r3, [r3, r2]
   17da0:	2b00      	cmp	r3, #0
   17da2:	d004      	beq.n	17dae <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   17da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17da6:	2280      	movs	r2, #128	; 0x80
   17da8:	05d2      	lsls	r2, r2, #23
   17daa:	4313      	orrs	r3, r2
   17dac:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   17dae:	693b      	ldr	r3, [r7, #16]
   17db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17db2:	2b00      	cmp	r3, #0
   17db4:	d004      	beq.n	17dc0 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   17db6:	693b      	ldr	r3, [r7, #16]
   17db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17dba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   17dbc:	4313      	orrs	r3, r2
   17dbe:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   17dc0:	693b      	ldr	r3, [r7, #16]
   17dc2:	222c      	movs	r2, #44	; 0x2c
   17dc4:	5c9b      	ldrb	r3, [r3, r2]
   17dc6:	2b00      	cmp	r3, #0
   17dc8:	d105      	bne.n	17dd6 <_i2c_master_set_config+0x176>
   17dca:	693b      	ldr	r3, [r7, #16]
   17dcc:	689a      	ldr	r2, [r3, #8]
   17dce:	2380      	movs	r3, #128	; 0x80
   17dd0:	049b      	lsls	r3, r3, #18
   17dd2:	429a      	cmp	r2, r3
   17dd4:	d104      	bne.n	17de0 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   17dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17dd8:	2280      	movs	r2, #128	; 0x80
   17dda:	0512      	lsls	r2, r2, #20
   17ddc:	4313      	orrs	r3, r2
   17dde:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   17de0:	693b      	ldr	r3, [r7, #16]
   17de2:	222d      	movs	r2, #45	; 0x2d
   17de4:	5c9b      	ldrb	r3, [r3, r2]
   17de6:	2b00      	cmp	r3, #0
   17de8:	d004      	beq.n	17df4 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   17dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17dec:	2280      	movs	r2, #128	; 0x80
   17dee:	0412      	lsls	r2, r2, #16
   17df0:	4313      	orrs	r3, r2
   17df2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   17df4:	693b      	ldr	r3, [r7, #16]
   17df6:	222e      	movs	r2, #46	; 0x2e
   17df8:	5c9b      	ldrb	r3, [r3, r2]
   17dfa:	2b00      	cmp	r3, #0
   17dfc:	d004      	beq.n	17e08 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   17dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17e00:	2280      	movs	r2, #128	; 0x80
   17e02:	03d2      	lsls	r2, r2, #15
   17e04:	4313      	orrs	r3, r2
   17e06:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   17e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17e0a:	681a      	ldr	r2, [r3, #0]
   17e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   17e0e:	431a      	orrs	r2, r3
   17e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17e12:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   17e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17e16:	2280      	movs	r2, #128	; 0x80
   17e18:	0052      	lsls	r2, r2, #1
   17e1a:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   17e1c:	2323      	movs	r3, #35	; 0x23
   17e1e:	2210      	movs	r2, #16
   17e20:	4694      	mov	ip, r2
   17e22:	44bc      	add	ip, r7
   17e24:	4463      	add	r3, ip
   17e26:	781b      	ldrb	r3, [r3, #0]
   17e28:	3314      	adds	r3, #20
   17e2a:	b2db      	uxtb	r3, r3
   17e2c:	0018      	movs	r0, r3
   17e2e:	4b61      	ldr	r3, [pc, #388]	; (17fb4 <_i2c_master_set_config+0x354>)
   17e30:	4798      	blx	r3
   17e32:	0003      	movs	r3, r0
   17e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   17e36:	693b      	ldr	r3, [r7, #16]
   17e38:	681b      	ldr	r3, [r3, #0]
   17e3a:	22fa      	movs	r2, #250	; 0xfa
   17e3c:	0092      	lsls	r2, r2, #2
   17e3e:	4353      	muls	r3, r2
   17e40:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   17e42:	693b      	ldr	r3, [r7, #16]
   17e44:	685b      	ldr	r3, [r3, #4]
   17e46:	22fa      	movs	r2, #250	; 0xfa
   17e48:	0092      	lsls	r2, r2, #2
   17e4a:	4353      	muls	r3, r2
   17e4c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   17e4e:	693b      	ldr	r3, [r7, #16]
   17e50:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   17e52:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   17e54:	4b58      	ldr	r3, [pc, #352]	; (17fb8 <_i2c_master_set_config+0x358>)
   17e56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17e58:	4798      	blx	r3
   17e5a:	0005      	movs	r5, r0
   17e5c:	000e      	movs	r6, r1
   17e5e:	4b56      	ldr	r3, [pc, #344]	; (17fb8 <_i2c_master_set_config+0x358>)
   17e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   17e62:	4798      	blx	r3
   17e64:	60b8      	str	r0, [r7, #8]
   17e66:	60f9      	str	r1, [r7, #12]
   17e68:	4b53      	ldr	r3, [pc, #332]	; (17fb8 <_i2c_master_set_config+0x358>)
   17e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17e6c:	4798      	blx	r3
   17e6e:	4c53      	ldr	r4, [pc, #332]	; (17fbc <_i2c_master_set_config+0x35c>)
   17e70:	4a53      	ldr	r2, [pc, #332]	; (17fc0 <_i2c_master_set_config+0x360>)
   17e72:	4b54      	ldr	r3, [pc, #336]	; (17fc4 <_i2c_master_set_config+0x364>)
   17e74:	47a0      	blx	r4
   17e76:	0003      	movs	r3, r0
   17e78:	000c      	movs	r4, r1
   17e7a:	603b      	str	r3, [r7, #0]
   17e7c:	607c      	str	r4, [r7, #4]
   17e7e:	4b4e      	ldr	r3, [pc, #312]	; (17fb8 <_i2c_master_set_config+0x358>)
   17e80:	6a38      	ldr	r0, [r7, #32]
   17e82:	4798      	blx	r3
   17e84:	0002      	movs	r2, r0
   17e86:	000b      	movs	r3, r1
   17e88:	4c4c      	ldr	r4, [pc, #304]	; (17fbc <_i2c_master_set_config+0x35c>)
   17e8a:	6838      	ldr	r0, [r7, #0]
   17e8c:	6879      	ldr	r1, [r7, #4]
   17e8e:	47a0      	blx	r4
   17e90:	0003      	movs	r3, r0
   17e92:	000c      	movs	r4, r1
   17e94:	0018      	movs	r0, r3
   17e96:	0021      	movs	r1, r4
   17e98:	4c4b      	ldr	r4, [pc, #300]	; (17fc8 <_i2c_master_set_config+0x368>)
   17e9a:	2200      	movs	r2, #0
   17e9c:	4b4b      	ldr	r3, [pc, #300]	; (17fcc <_i2c_master_set_config+0x36c>)
   17e9e:	47a0      	blx	r4
   17ea0:	0003      	movs	r3, r0
   17ea2:	000c      	movs	r4, r1
   17ea4:	001a      	movs	r2, r3
   17ea6:	0023      	movs	r3, r4
   17ea8:	4c44      	ldr	r4, [pc, #272]	; (17fbc <_i2c_master_set_config+0x35c>)
   17eaa:	68b8      	ldr	r0, [r7, #8]
   17eac:	68f9      	ldr	r1, [r7, #12]
   17eae:	47a0      	blx	r4
   17eb0:	0003      	movs	r3, r0
   17eb2:	000c      	movs	r4, r1
   17eb4:	001a      	movs	r2, r3
   17eb6:	0023      	movs	r3, r4
   17eb8:	4c45      	ldr	r4, [pc, #276]	; (17fd0 <_i2c_master_set_config+0x370>)
   17eba:	0028      	movs	r0, r5
   17ebc:	0031      	movs	r1, r6
   17ebe:	47a0      	blx	r4
   17ec0:	0003      	movs	r3, r0
   17ec2:	000c      	movs	r4, r1
   17ec4:	001d      	movs	r5, r3
   17ec6:	0026      	movs	r6, r4
   17ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17eca:	005a      	lsls	r2, r3, #1
   17ecc:	4b3a      	ldr	r3, [pc, #232]	; (17fb8 <_i2c_master_set_config+0x358>)
   17ece:	0010      	movs	r0, r2
   17ed0:	4798      	blx	r3
   17ed2:	0002      	movs	r2, r0
   17ed4:	000b      	movs	r3, r1
   17ed6:	4c3c      	ldr	r4, [pc, #240]	; (17fc8 <_i2c_master_set_config+0x368>)
   17ed8:	0028      	movs	r0, r5
   17eda:	0031      	movs	r1, r6
   17edc:	47a0      	blx	r4
   17ede:	0003      	movs	r3, r0
   17ee0:	000c      	movs	r4, r1
   17ee2:	0018      	movs	r0, r3
   17ee4:	0021      	movs	r1, r4
   17ee6:	4c3a      	ldr	r4, [pc, #232]	; (17fd0 <_i2c_master_set_config+0x370>)
   17ee8:	2200      	movs	r2, #0
   17eea:	4b3a      	ldr	r3, [pc, #232]	; (17fd4 <_i2c_master_set_config+0x374>)
   17eec:	47a0      	blx	r4
   17eee:	0003      	movs	r3, r0
   17ef0:	000c      	movs	r4, r1
   17ef2:	001d      	movs	r5, r3
   17ef4:	0026      	movs	r6, r4
   17ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17ef8:	005a      	lsls	r2, r3, #1
   17efa:	4b2f      	ldr	r3, [pc, #188]	; (17fb8 <_i2c_master_set_config+0x358>)
   17efc:	0010      	movs	r0, r2
   17efe:	4798      	blx	r3
   17f00:	0002      	movs	r2, r0
   17f02:	000b      	movs	r3, r1
   17f04:	4c34      	ldr	r4, [pc, #208]	; (17fd8 <_i2c_master_set_config+0x378>)
   17f06:	0028      	movs	r0, r5
   17f08:	0031      	movs	r1, r6
   17f0a:	47a0      	blx	r4
   17f0c:	0003      	movs	r3, r0
   17f0e:	000c      	movs	r4, r1
   17f10:	0019      	movs	r1, r3
   17f12:	0022      	movs	r2, r4
   17f14:	4b31      	ldr	r3, [pc, #196]	; (17fdc <_i2c_master_set_config+0x37c>)
   17f16:	0008      	movs	r0, r1
   17f18:	0011      	movs	r1, r2
   17f1a:	4798      	blx	r3
   17f1c:	0003      	movs	r3, r0
   17f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   17f20:	693b      	ldr	r3, [r7, #16]
   17f22:	689a      	ldr	r2, [r3, #8]
   17f24:	2380      	movs	r3, #128	; 0x80
   17f26:	049b      	lsls	r3, r3, #18
   17f28:	429a      	cmp	r2, r3
   17f2a:	d16a      	bne.n	18002 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   17f2c:	4b22      	ldr	r3, [pc, #136]	; (17fb8 <_i2c_master_set_config+0x358>)
   17f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17f30:	4798      	blx	r3
   17f32:	4c25      	ldr	r4, [pc, #148]	; (17fc8 <_i2c_master_set_config+0x368>)
   17f34:	0002      	movs	r2, r0
   17f36:	000b      	movs	r3, r1
   17f38:	47a0      	blx	r4
   17f3a:	0003      	movs	r3, r0
   17f3c:	000c      	movs	r4, r1
   17f3e:	001d      	movs	r5, r3
   17f40:	0026      	movs	r6, r4
   17f42:	4b1d      	ldr	r3, [pc, #116]	; (17fb8 <_i2c_master_set_config+0x358>)
   17f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
   17f46:	4798      	blx	r3
   17f48:	4c1c      	ldr	r4, [pc, #112]	; (17fbc <_i2c_master_set_config+0x35c>)
   17f4a:	2200      	movs	r2, #0
   17f4c:	4b24      	ldr	r3, [pc, #144]	; (17fe0 <_i2c_master_set_config+0x380>)
   17f4e:	47a0      	blx	r4
   17f50:	0003      	movs	r3, r0
   17f52:	000c      	movs	r4, r1
   17f54:	001a      	movs	r2, r3
   17f56:	0023      	movs	r3, r4
   17f58:	4c1f      	ldr	r4, [pc, #124]	; (17fd8 <_i2c_master_set_config+0x378>)
   17f5a:	0028      	movs	r0, r5
   17f5c:	0031      	movs	r1, r6
   17f5e:	47a0      	blx	r4
   17f60:	0003      	movs	r3, r0
   17f62:	000c      	movs	r4, r1
   17f64:	0018      	movs	r0, r3
   17f66:	0021      	movs	r1, r4
   17f68:	4c19      	ldr	r4, [pc, #100]	; (17fd0 <_i2c_master_set_config+0x370>)
   17f6a:	2200      	movs	r2, #0
   17f6c:	4b19      	ldr	r3, [pc, #100]	; (17fd4 <_i2c_master_set_config+0x374>)
   17f6e:	47a0      	blx	r4
   17f70:	0003      	movs	r3, r0
   17f72:	000c      	movs	r4, r1
   17f74:	0019      	movs	r1, r3
   17f76:	0022      	movs	r2, r4
   17f78:	4b18      	ldr	r3, [pc, #96]	; (17fdc <_i2c_master_set_config+0x37c>)
   17f7a:	0008      	movs	r0, r1
   17f7c:	0011      	movs	r1, r2
   17f7e:	4798      	blx	r3
   17f80:	0003      	movs	r3, r0
   17f82:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   17f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17f86:	2b00      	cmp	r3, #0
   17f88:	d02e      	beq.n	17fe8 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   17f8a:	4b16      	ldr	r3, [pc, #88]	; (17fe4 <_i2c_master_set_config+0x384>)
   17f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   17f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   17f90:	4798      	blx	r3
   17f92:	0003      	movs	r3, r0
   17f94:	1e9a      	subs	r2, r3, #2
   17f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17f98:	1ad3      	subs	r3, r2, r3
   17f9a:	653b      	str	r3, [r7, #80]	; 0x50
   17f9c:	e031      	b.n	18002 <_i2c_master_set_config+0x3a2>
   17f9e:	46c0      	nop			; (mov r8, r8)
   17fa0:	0002786d 	.word	0x0002786d
   17fa4:	00017b21 	.word	0x00017b21
   17fa8:	000276b1 	.word	0x000276b1
   17fac:	0002a45d 	.word	0x0002a45d
   17fb0:	00017b49 	.word	0x00017b49
   17fb4:	0002a221 	.word	0x0002a221
   17fb8:	00034ae1 	.word	0x00034ae1
   17fbc:	00033f4d 	.word	0x00033f4d
   17fc0:	e826d695 	.word	0xe826d695
   17fc4:	3e112e0b 	.word	0x3e112e0b
   17fc8:	000332c5 	.word	0x000332c5
   17fcc:	40240000 	.word	0x40240000
   17fd0:	0003444d 	.word	0x0003444d
   17fd4:	3ff00000 	.word	0x3ff00000
   17fd8:	000338e5 	.word	0x000338e5
   17fdc:	00034a79 	.word	0x00034a79
   17fe0:	40080000 	.word	0x40080000
   17fe4:	00032c65 	.word	0x00032c65
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   17fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17fea:	005a      	lsls	r2, r3, #1
   17fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17fee:	18d3      	adds	r3, r2, r3
   17ff0:	1e5a      	subs	r2, r3, #1
   17ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17ff4:	0059      	lsls	r1, r3, #1
   17ff6:	4b1d      	ldr	r3, [pc, #116]	; (1806c <_i2c_master_set_config+0x40c>)
   17ff8:	0010      	movs	r0, r2
   17ffa:	4798      	blx	r3
   17ffc:	0003      	movs	r3, r0
   17ffe:	3b01      	subs	r3, #1
   18000:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   18002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18004:	2bff      	cmp	r3, #255	; 0xff
   18006:	dc08      	bgt.n	1801a <_i2c_master_set_config+0x3ba>
   18008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1800a:	2b00      	cmp	r3, #0
   1800c:	db05      	blt.n	1801a <_i2c_master_set_config+0x3ba>
   1800e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18010:	2bff      	cmp	r3, #255	; 0xff
   18012:	dc02      	bgt.n	1801a <_i2c_master_set_config+0x3ba>
   18014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18016:	2b00      	cmp	r3, #0
   18018:	da06      	bge.n	18028 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   1801a:	233b      	movs	r3, #59	; 0x3b
   1801c:	2210      	movs	r2, #16
   1801e:	4694      	mov	ip, r2
   18020:	44bc      	add	ip, r7
   18022:	4463      	add	r3, ip
   18024:	2240      	movs	r2, #64	; 0x40
   18026:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   18028:	233b      	movs	r3, #59	; 0x3b
   1802a:	2210      	movs	r2, #16
   1802c:	4694      	mov	ip, r2
   1802e:	44bc      	add	ip, r7
   18030:	4463      	add	r3, ip
   18032:	781b      	ldrb	r3, [r3, #0]
   18034:	2b40      	cmp	r3, #64	; 0x40
   18036:	d00e      	beq.n	18056 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1803a:	22ff      	movs	r2, #255	; 0xff
   1803c:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1803e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18040:	041b      	lsls	r3, r3, #16
   18042:	0019      	movs	r1, r3
   18044:	23ff      	movs	r3, #255	; 0xff
   18046:	041b      	lsls	r3, r3, #16
   18048:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1804a:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1804c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1804e:	0612      	lsls	r2, r2, #24
   18050:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18054:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   18056:	233b      	movs	r3, #59	; 0x3b
   18058:	2210      	movs	r2, #16
   1805a:	4694      	mov	ip, r2
   1805c:	44bc      	add	ip, r7
   1805e:	4463      	add	r3, ip
   18060:	781b      	ldrb	r3, [r3, #0]
}
   18062:	0018      	movs	r0, r3
   18064:	46bd      	mov	sp, r7
   18066:	b017      	add	sp, #92	; 0x5c
   18068:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1806a:	46c0      	nop			; (mov r8, r8)
   1806c:	00032c65 	.word	0x00032c65

00018070 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   18070:	b590      	push	{r4, r7, lr}
   18072:	b08b      	sub	sp, #44	; 0x2c
   18074:	af00      	add	r7, sp, #0
   18076:	60f8      	str	r0, [r7, #12]
   18078:	60b9      	str	r1, [r7, #8]
   1807a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   1807c:	68fb      	ldr	r3, [r7, #12]
   1807e:	68ba      	ldr	r2, [r7, #8]
   18080:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18082:	68fb      	ldr	r3, [r7, #12]
   18084:	681b      	ldr	r3, [r3, #0]
   18086:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   18088:	68fb      	ldr	r3, [r7, #12]
   1808a:	681b      	ldr	r3, [r3, #0]
   1808c:	0018      	movs	r0, r3
   1808e:	4b3b      	ldr	r3, [pc, #236]	; (1817c <i2c_master_init+0x10c>)
   18090:	4798      	blx	r3
   18092:	0003      	movs	r3, r0
   18094:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   18096:	6a3b      	ldr	r3, [r7, #32]
   18098:	3302      	adds	r3, #2
   1809a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1809c:	6a3b      	ldr	r3, [r7, #32]
   1809e:	3314      	adds	r3, #20
   180a0:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   180a2:	2201      	movs	r2, #1
   180a4:	69fb      	ldr	r3, [r7, #28]
   180a6:	409a      	lsls	r2, r3
   180a8:	0013      	movs	r3, r2
   180aa:	0019      	movs	r1, r3
   180ac:	2002      	movs	r0, #2
   180ae:	4b34      	ldr	r3, [pc, #208]	; (18180 <i2c_master_init+0x110>)
   180b0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   180b2:	2314      	movs	r3, #20
   180b4:	18fb      	adds	r3, r7, r3
   180b6:	0018      	movs	r0, r3
   180b8:	4b32      	ldr	r3, [pc, #200]	; (18184 <i2c_master_init+0x114>)
   180ba:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   180bc:	687b      	ldr	r3, [r7, #4]
   180be:	7b1a      	ldrb	r2, [r3, #12]
   180c0:	2314      	movs	r3, #20
   180c2:	18fb      	adds	r3, r7, r3
   180c4:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   180c6:	69bb      	ldr	r3, [r7, #24]
   180c8:	b2db      	uxtb	r3, r3
   180ca:	2214      	movs	r2, #20
   180cc:	18ba      	adds	r2, r7, r2
   180ce:	0011      	movs	r1, r2
   180d0:	0018      	movs	r0, r3
   180d2:	4b2d      	ldr	r3, [pc, #180]	; (18188 <i2c_master_init+0x118>)
   180d4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   180d6:	69bb      	ldr	r3, [r7, #24]
   180d8:	b2db      	uxtb	r3, r3
   180da:	0018      	movs	r0, r3
   180dc:	4b2b      	ldr	r3, [pc, #172]	; (1818c <i2c_master_init+0x11c>)
   180de:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   180e0:	687b      	ldr	r3, [r7, #4]
   180e2:	7b1b      	ldrb	r3, [r3, #12]
   180e4:	2100      	movs	r1, #0
   180e6:	0018      	movs	r0, r3
   180e8:	4b29      	ldr	r3, [pc, #164]	; (18190 <i2c_master_init+0x120>)
   180ea:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   180ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   180ee:	681b      	ldr	r3, [r3, #0]
   180f0:	2202      	movs	r2, #2
   180f2:	4013      	ands	r3, r2
   180f4:	d001      	beq.n	180fa <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   180f6:	231c      	movs	r3, #28
   180f8:	e03b      	b.n	18172 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   180fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   180fc:	681b      	ldr	r3, [r3, #0]
   180fe:	2201      	movs	r2, #1
   18100:	4013      	ands	r3, r2
   18102:	d001      	beq.n	18108 <i2c_master_init+0x98>
		return STATUS_BUSY;
   18104:	2305      	movs	r3, #5
   18106:	e034      	b.n	18172 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   18108:	68fb      	ldr	r3, [r7, #12]
   1810a:	681b      	ldr	r3, [r3, #0]
   1810c:	2217      	movs	r2, #23
   1810e:	18bc      	adds	r4, r7, r2
   18110:	0018      	movs	r0, r3
   18112:	4b1a      	ldr	r3, [pc, #104]	; (1817c <i2c_master_init+0x10c>)
   18114:	4798      	blx	r3
   18116:	0003      	movs	r3, r0
   18118:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   1811a:	4a1e      	ldr	r2, [pc, #120]	; (18194 <i2c_master_init+0x124>)
   1811c:	2317      	movs	r3, #23
   1811e:	18fb      	adds	r3, r7, r3
   18120:	781b      	ldrb	r3, [r3, #0]
   18122:	0011      	movs	r1, r2
   18124:	0018      	movs	r0, r3
   18126:	4b1c      	ldr	r3, [pc, #112]	; (18198 <i2c_master_init+0x128>)
   18128:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   1812a:	2317      	movs	r3, #23
   1812c:	18fb      	adds	r3, r7, r3
   1812e:	781a      	ldrb	r2, [r3, #0]
   18130:	4b1a      	ldr	r3, [pc, #104]	; (1819c <i2c_master_init+0x12c>)
   18132:	0092      	lsls	r2, r2, #2
   18134:	68f9      	ldr	r1, [r7, #12]
   18136:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   18138:	68fb      	ldr	r3, [r7, #12]
   1813a:	2200      	movs	r2, #0
   1813c:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1813e:	68fb      	ldr	r3, [r7, #12]
   18140:	2200      	movs	r2, #0
   18142:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   18144:	68fb      	ldr	r3, [r7, #12]
   18146:	2200      	movs	r2, #0
   18148:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   1814a:	68fb      	ldr	r3, [r7, #12]
   1814c:	2200      	movs	r2, #0
   1814e:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   18150:	68fb      	ldr	r3, [r7, #12]
   18152:	2225      	movs	r2, #37	; 0x25
   18154:	2100      	movs	r1, #0
   18156:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   18158:	68fb      	ldr	r3, [r7, #12]
   1815a:	2200      	movs	r2, #0
   1815c:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   1815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18160:	2214      	movs	r2, #20
   18162:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   18164:	687a      	ldr	r2, [r7, #4]
   18166:	68fb      	ldr	r3, [r7, #12]
   18168:	0011      	movs	r1, r2
   1816a:	0018      	movs	r0, r3
   1816c:	4b0c      	ldr	r3, [pc, #48]	; (181a0 <i2c_master_init+0x130>)
   1816e:	4798      	blx	r3
   18170:	0003      	movs	r3, r0
}
   18172:	0018      	movs	r0, r3
   18174:	46bd      	mov	sp, r7
   18176:	b00b      	add	sp, #44	; 0x2c
   18178:	bd90      	pop	{r4, r7, pc}
   1817a:	46c0      	nop			; (mov r8, r8)
   1817c:	0002786d 	.word	0x0002786d
   18180:	00017ac5 	.word	0x00017ac5
   18184:	00017aad 	.word	0x00017aad
   18188:	0002a0fd 	.word	0x0002a0fd
   1818c:	0002a141 	.word	0x0002a141
   18190:	00027625 	.word	0x00027625
   18194:	00012bcd 	.word	0x00012bcd
   18198:	000278d1 	.word	0x000278d1
   1819c:	20005794 	.word	0x20005794
   181a0:	00017c61 	.word	0x00017c61

000181a4 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   181a4:	b580      	push	{r7, lr}
   181a6:	b084      	sub	sp, #16
   181a8:	af00      	add	r7, sp, #0
   181aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   181ac:	687b      	ldr	r3, [r7, #4]
   181ae:	681b      	ldr	r3, [r3, #0]
   181b0:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   181b2:	687b      	ldr	r3, [r7, #4]
   181b4:	0018      	movs	r0, r3
   181b6:	4b0f      	ldr	r3, [pc, #60]	; (181f4 <i2c_master_reset+0x50>)
   181b8:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   181ba:	687b      	ldr	r3, [r7, #4]
   181bc:	0018      	movs	r0, r3
   181be:	4b0e      	ldr	r3, [pc, #56]	; (181f8 <i2c_master_reset+0x54>)
   181c0:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   181c2:	4b0e      	ldr	r3, [pc, #56]	; (181fc <i2c_master_reset+0x58>)
   181c4:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   181c6:	687b      	ldr	r3, [r7, #4]
   181c8:	681b      	ldr	r3, [r3, #0]
   181ca:	0018      	movs	r0, r3
   181cc:	4b0c      	ldr	r3, [pc, #48]	; (18200 <i2c_master_reset+0x5c>)
   181ce:	4798      	blx	r3
   181d0:	0003      	movs	r3, r0
   181d2:	0018      	movs	r0, r3
   181d4:	4b0b      	ldr	r3, [pc, #44]	; (18204 <i2c_master_reset+0x60>)
   181d6:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   181d8:	4b0b      	ldr	r3, [pc, #44]	; (18208 <i2c_master_reset+0x64>)
   181da:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   181dc:	687b      	ldr	r3, [r7, #4]
   181de:	0018      	movs	r0, r3
   181e0:	4b04      	ldr	r3, [pc, #16]	; (181f4 <i2c_master_reset+0x50>)
   181e2:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   181e4:	68fb      	ldr	r3, [r7, #12]
   181e6:	2201      	movs	r2, #1
   181e8:	601a      	str	r2, [r3, #0]
}
   181ea:	46c0      	nop			; (mov r8, r8)
   181ec:	46bd      	mov	sp, r7
   181ee:	b004      	add	sp, #16
   181f0:	bd80      	pop	{r7, pc}
   181f2:	46c0      	nop			; (mov r8, r8)
   181f4:	00017be5 	.word	0x00017be5
   181f8:	00017c09 	.word	0x00017c09
   181fc:	00017b69 	.word	0x00017b69
   18200:	0002793d 	.word	0x0002793d
   18204:	0002a279 	.word	0x0002a279
   18208:	00017b7d 	.word	0x00017b7d

0001820c <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   1820c:	b580      	push	{r7, lr}
   1820e:	b084      	sub	sp, #16
   18210:	af00      	add	r7, sp, #0
   18212:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18214:	687b      	ldr	r3, [r7, #4]
   18216:	681b      	ldr	r3, [r3, #0]
   18218:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   1821a:	68fb      	ldr	r3, [r7, #12]
   1821c:	7e1b      	ldrb	r3, [r3, #24]
   1821e:	b2db      	uxtb	r3, r3
   18220:	001a      	movs	r2, r3
   18222:	2302      	movs	r3, #2
   18224:	4013      	ands	r3, r2
   18226:	d00b      	beq.n	18240 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   18228:	68fb      	ldr	r3, [r7, #12]
   1822a:	2202      	movs	r2, #2
   1822c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1822e:	68fb      	ldr	r3, [r7, #12]
   18230:	8b5b      	ldrh	r3, [r3, #26]
   18232:	b29b      	uxth	r3, r3
   18234:	001a      	movs	r2, r3
   18236:	2302      	movs	r3, #2
   18238:	4013      	ands	r3, r2
   1823a:	d011      	beq.n	18260 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   1823c:	2341      	movs	r3, #65	; 0x41
   1823e:	e010      	b.n	18262 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18240:	68fb      	ldr	r3, [r7, #12]
   18242:	8b5b      	ldrh	r3, [r3, #26]
   18244:	b29b      	uxth	r3, r3
   18246:	001a      	movs	r2, r3
   18248:	2304      	movs	r3, #4
   1824a:	4013      	ands	r3, r2
   1824c:	d008      	beq.n	18260 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1824e:	68fb      	ldr	r3, [r7, #12]
   18250:	685b      	ldr	r3, [r3, #4]
   18252:	22c0      	movs	r2, #192	; 0xc0
   18254:	0292      	lsls	r2, r2, #10
   18256:	431a      	orrs	r2, r3
   18258:	68fb      	ldr	r3, [r7, #12]
   1825a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   1825c:	2318      	movs	r3, #24
   1825e:	e000      	b.n	18262 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   18260:	2300      	movs	r3, #0
}
   18262:	0018      	movs	r0, r3
   18264:	46bd      	mov	sp, r7
   18266:	b004      	add	sp, #16
   18268:	bd80      	pop	{r7, pc}

0001826a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   1826a:	b580      	push	{r7, lr}
   1826c:	b084      	sub	sp, #16
   1826e:	af00      	add	r7, sp, #0
   18270:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18272:	687b      	ldr	r3, [r7, #4]
   18274:	681b      	ldr	r3, [r3, #0]
   18276:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   18278:	230e      	movs	r3, #14
   1827a:	18fb      	adds	r3, r7, r3
   1827c:	2200      	movs	r2, #0
   1827e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18280:	e00f      	b.n	182a2 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   18282:	230e      	movs	r3, #14
   18284:	18fb      	adds	r3, r7, r3
   18286:	220e      	movs	r2, #14
   18288:	18ba      	adds	r2, r7, r2
   1828a:	8812      	ldrh	r2, [r2, #0]
   1828c:	3201      	adds	r2, #1
   1828e:	801a      	strh	r2, [r3, #0]
   18290:	687b      	ldr	r3, [r7, #4]
   18292:	891b      	ldrh	r3, [r3, #8]
   18294:	220e      	movs	r2, #14
   18296:	18ba      	adds	r2, r7, r2
   18298:	8812      	ldrh	r2, [r2, #0]
   1829a:	429a      	cmp	r2, r3
   1829c:	d301      	bcc.n	182a2 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   1829e:	2312      	movs	r3, #18
   182a0:	e00e      	b.n	182c0 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   182a2:	68bb      	ldr	r3, [r7, #8]
   182a4:	7e1b      	ldrb	r3, [r3, #24]
   182a6:	b2db      	uxtb	r3, r3
   182a8:	001a      	movs	r2, r3
   182aa:	2301      	movs	r3, #1
   182ac:	4013      	ands	r3, r2
   182ae:	d106      	bne.n	182be <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   182b0:	68bb      	ldr	r3, [r7, #8]
   182b2:	7e1b      	ldrb	r3, [r3, #24]
   182b4:	b2db      	uxtb	r3, r3
   182b6:	001a      	movs	r2, r3
   182b8:	2302      	movs	r3, #2
   182ba:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   182bc:	d0e1      	beq.n	18282 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   182be:	2300      	movs	r3, #0
}
   182c0:	0018      	movs	r0, r3
   182c2:	46bd      	mov	sp, r7
   182c4:	b004      	add	sp, #16
   182c6:	bd80      	pop	{r7, pc}

000182c8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   182c8:	b590      	push	{r4, r7, lr}
   182ca:	b085      	sub	sp, #20
   182cc:	af00      	add	r7, sp, #0
   182ce:	6078      	str	r0, [r7, #4]
   182d0:	000a      	movs	r2, r1
   182d2:	1cfb      	adds	r3, r7, #3
   182d4:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   182d6:	687b      	ldr	r3, [r7, #4]
   182d8:	681b      	ldr	r3, [r3, #0]
   182da:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   182dc:	68fb      	ldr	r3, [r7, #12]
   182de:	685b      	ldr	r3, [r3, #4]
   182e0:	2280      	movs	r2, #128	; 0x80
   182e2:	02d2      	lsls	r2, r2, #11
   182e4:	431a      	orrs	r2, r3
   182e6:	68fb      	ldr	r3, [r7, #12]
   182e8:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   182ea:	1cfb      	adds	r3, r7, #3
   182ec:	781a      	ldrb	r2, [r3, #0]
   182ee:	68fb      	ldr	r3, [r7, #12]
   182f0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   182f2:	230b      	movs	r3, #11
   182f4:	18fc      	adds	r4, r7, r3
   182f6:	687b      	ldr	r3, [r7, #4]
   182f8:	0018      	movs	r0, r3
   182fa:	4b07      	ldr	r3, [pc, #28]	; (18318 <_i2c_master_send_hs_master_code+0x50>)
   182fc:	4798      	blx	r3
   182fe:	0003      	movs	r3, r0
   18300:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   18302:	68fb      	ldr	r3, [r7, #12]
   18304:	2201      	movs	r2, #1
   18306:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   18308:	230b      	movs	r3, #11
   1830a:	18fb      	adds	r3, r7, r3
   1830c:	781b      	ldrb	r3, [r3, #0]
}
   1830e:	0018      	movs	r0, r3
   18310:	46bd      	mov	sp, r7
   18312:	b005      	add	sp, #20
   18314:	bd90      	pop	{r4, r7, pc}
   18316:	46c0      	nop			; (mov r8, r8)
   18318:	0001826b 	.word	0x0001826b

0001831c <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   1831c:	b580      	push	{r7, lr}
   1831e:	af00      	add	r7, sp, #0
   18320:	2000      	movs	r0, #0
   18322:	4b02      	ldr	r3, [pc, #8]	; (1832c <TC3_Handler+0x10>)
   18324:	4798      	blx	r3
   18326:	46c0      	nop			; (mov r8, r8)
   18328:	46bd      	mov	sp, r7
   1832a:	bd80      	pop	{r7, pc}
   1832c:	00018359 	.word	0x00018359

00018330 <TC4_Handler>:
   18330:	b580      	push	{r7, lr}
   18332:	af00      	add	r7, sp, #0
   18334:	2001      	movs	r0, #1
   18336:	4b02      	ldr	r3, [pc, #8]	; (18340 <TC4_Handler+0x10>)
   18338:	4798      	blx	r3
   1833a:	46c0      	nop			; (mov r8, r8)
   1833c:	46bd      	mov	sp, r7
   1833e:	bd80      	pop	{r7, pc}
   18340:	00018359 	.word	0x00018359

00018344 <TC5_Handler>:
   18344:	b580      	push	{r7, lr}
   18346:	af00      	add	r7, sp, #0
   18348:	2002      	movs	r0, #2
   1834a:	4b02      	ldr	r3, [pc, #8]	; (18354 <TC5_Handler+0x10>)
   1834c:	4798      	blx	r3
   1834e:	46c0      	nop			; (mov r8, r8)
   18350:	46bd      	mov	sp, r7
   18352:	bd80      	pop	{r7, pc}
   18354:	00018359 	.word	0x00018359

00018358 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   18358:	b580      	push	{r7, lr}
   1835a:	b084      	sub	sp, #16
   1835c:	af00      	add	r7, sp, #0
   1835e:	0002      	movs	r2, r0
   18360:	1dfb      	adds	r3, r7, #7
   18362:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   18364:	1dfb      	adds	r3, r7, #7
   18366:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   18368:	4b28      	ldr	r3, [pc, #160]	; (1840c <_tc_interrupt_handler+0xb4>)
   1836a:	0092      	lsls	r2, r2, #2
   1836c:	58d3      	ldr	r3, [r2, r3]
   1836e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18370:	68fb      	ldr	r3, [r7, #12]
   18372:	681b      	ldr	r3, [r3, #0]
   18374:	7b9b      	ldrb	r3, [r3, #14]
   18376:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   18378:	68fa      	ldr	r2, [r7, #12]
   1837a:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   1837c:	4013      	ands	r3, r2
   1837e:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   18380:	68fb      	ldr	r3, [r7, #12]
   18382:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18384:	230b      	movs	r3, #11
   18386:	18fb      	adds	r3, r7, r3
   18388:	400a      	ands	r2, r1
   1838a:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   1838c:	230b      	movs	r3, #11
   1838e:	18fb      	adds	r3, r7, r3
   18390:	781b      	ldrb	r3, [r3, #0]
   18392:	2201      	movs	r2, #1
   18394:	4013      	ands	r3, r2
   18396:	d008      	beq.n	183aa <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   18398:	68fb      	ldr	r3, [r7, #12]
   1839a:	689b      	ldr	r3, [r3, #8]
   1839c:	68fa      	ldr	r2, [r7, #12]
   1839e:	0010      	movs	r0, r2
   183a0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   183a2:	68fb      	ldr	r3, [r7, #12]
   183a4:	681b      	ldr	r3, [r3, #0]
   183a6:	2201      	movs	r2, #1
   183a8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   183aa:	230b      	movs	r3, #11
   183ac:	18fb      	adds	r3, r7, r3
   183ae:	781b      	ldrb	r3, [r3, #0]
   183b0:	2202      	movs	r2, #2
   183b2:	4013      	ands	r3, r2
   183b4:	d008      	beq.n	183c8 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   183b6:	68fb      	ldr	r3, [r7, #12]
   183b8:	68db      	ldr	r3, [r3, #12]
   183ba:	68fa      	ldr	r2, [r7, #12]
   183bc:	0010      	movs	r0, r2
   183be:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   183c0:	68fb      	ldr	r3, [r7, #12]
   183c2:	681b      	ldr	r3, [r3, #0]
   183c4:	2202      	movs	r2, #2
   183c6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   183c8:	230b      	movs	r3, #11
   183ca:	18fb      	adds	r3, r7, r3
   183cc:	781b      	ldrb	r3, [r3, #0]
   183ce:	2210      	movs	r2, #16
   183d0:	4013      	ands	r3, r2
   183d2:	d008      	beq.n	183e6 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   183d4:	68fb      	ldr	r3, [r7, #12]
   183d6:	691b      	ldr	r3, [r3, #16]
   183d8:	68fa      	ldr	r2, [r7, #12]
   183da:	0010      	movs	r0, r2
   183dc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   183de:	68fb      	ldr	r3, [r7, #12]
   183e0:	681b      	ldr	r3, [r3, #0]
   183e2:	2210      	movs	r2, #16
   183e4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   183e6:	230b      	movs	r3, #11
   183e8:	18fb      	adds	r3, r7, r3
   183ea:	781b      	ldrb	r3, [r3, #0]
   183ec:	2220      	movs	r2, #32
   183ee:	4013      	ands	r3, r2
   183f0:	d008      	beq.n	18404 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   183f2:	68fb      	ldr	r3, [r7, #12]
   183f4:	695b      	ldr	r3, [r3, #20]
   183f6:	68fa      	ldr	r2, [r7, #12]
   183f8:	0010      	movs	r0, r2
   183fa:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   183fc:	68fb      	ldr	r3, [r7, #12]
   183fe:	681b      	ldr	r3, [r3, #0]
   18400:	2220      	movs	r2, #32
   18402:	739a      	strb	r2, [r3, #14]
	}
}
   18404:	46c0      	nop			; (mov r8, r8)
   18406:	46bd      	mov	sp, r7
   18408:	b004      	add	sp, #16
   1840a:	bd80      	pop	{r7, pc}
   1840c:	2000457c 	.word	0x2000457c

00018410 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   18410:	b580      	push	{r7, lr}
   18412:	b084      	sub	sp, #16
   18414:	af00      	add	r7, sp, #0
   18416:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   18418:	2300      	movs	r3, #0
   1841a:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   1841c:	687b      	ldr	r3, [r7, #4]
   1841e:	2b00      	cmp	r3, #0
   18420:	d101      	bne.n	18426 <FreeRTOS_CLIRegisterCommand+0x16>
   18422:	b672      	cpsid	i
   18424:	e7fe      	b.n	18424 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   18426:	2008      	movs	r0, #8
   18428:	4b11      	ldr	r3, [pc, #68]	; (18470 <FreeRTOS_CLIRegisterCommand+0x60>)
   1842a:	4798      	blx	r3
   1842c:	0003      	movs	r3, r0
   1842e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   18430:	68bb      	ldr	r3, [r7, #8]
   18432:	2b00      	cmp	r3, #0
   18434:	d101      	bne.n	1843a <FreeRTOS_CLIRegisterCommand+0x2a>
   18436:	b672      	cpsid	i
   18438:	e7fe      	b.n	18438 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   1843a:	68bb      	ldr	r3, [r7, #8]
   1843c:	2b00      	cmp	r3, #0
   1843e:	d012      	beq.n	18466 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   18440:	4b0c      	ldr	r3, [pc, #48]	; (18474 <FreeRTOS_CLIRegisterCommand+0x64>)
   18442:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   18444:	68bb      	ldr	r3, [r7, #8]
   18446:	687a      	ldr	r2, [r7, #4]
   18448:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   1844a:	68bb      	ldr	r3, [r7, #8]
   1844c:	2200      	movs	r2, #0
   1844e:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   18450:	4b09      	ldr	r3, [pc, #36]	; (18478 <FreeRTOS_CLIRegisterCommand+0x68>)
   18452:	681b      	ldr	r3, [r3, #0]
   18454:	68ba      	ldr	r2, [r7, #8]
   18456:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   18458:	4b07      	ldr	r3, [pc, #28]	; (18478 <FreeRTOS_CLIRegisterCommand+0x68>)
   1845a:	68ba      	ldr	r2, [r7, #8]
   1845c:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   1845e:	4b07      	ldr	r3, [pc, #28]	; (1847c <FreeRTOS_CLIRegisterCommand+0x6c>)
   18460:	4798      	blx	r3

		xReturn = pdPASS;
   18462:	2301      	movs	r3, #1
   18464:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   18466:	68fb      	ldr	r3, [r7, #12]
}
   18468:	0018      	movs	r0, r3
   1846a:	46bd      	mov	sp, r7
   1846c:	b004      	add	sp, #16
   1846e:	bd80      	pop	{r7, pc}
   18470:	0001a8d1 	.word	0x0001a8d1
   18474:	0001a799 	.word	0x0001a799
   18478:	200000a8 	.word	0x200000a8
   1847c:	0001a7bd 	.word	0x0001a7bd

00018480 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   18480:	b580      	push	{r7, lr}
   18482:	b088      	sub	sp, #32
   18484:	af00      	add	r7, sp, #0
   18486:	60f8      	str	r0, [r7, #12]
   18488:	60b9      	str	r1, [r7, #8]
   1848a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   1848c:	2301      	movs	r3, #1
   1848e:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   18490:	4b3d      	ldr	r3, [pc, #244]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   18492:	681b      	ldr	r3, [r3, #0]
   18494:	2b00      	cmp	r3, #0
   18496:	d144      	bne.n	18522 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18498:	4b3b      	ldr	r3, [pc, #236]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   1849a:	4a3c      	ldr	r2, [pc, #240]	; (1858c <FreeRTOS_CLIProcessCommand+0x10c>)
   1849c:	601a      	str	r2, [r3, #0]
   1849e:	e03a      	b.n	18516 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   184a0:	4b39      	ldr	r3, [pc, #228]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   184a2:	681b      	ldr	r3, [r3, #0]
   184a4:	681b      	ldr	r3, [r3, #0]
   184a6:	681b      	ldr	r3, [r3, #0]
   184a8:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   184aa:	69bb      	ldr	r3, [r7, #24]
   184ac:	0018      	movs	r0, r3
   184ae:	4b38      	ldr	r3, [pc, #224]	; (18590 <FreeRTOS_CLIProcessCommand+0x110>)
   184b0:	4798      	blx	r3
   184b2:	0003      	movs	r3, r0
   184b4:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   184b6:	68fa      	ldr	r2, [r7, #12]
   184b8:	697b      	ldr	r3, [r7, #20]
   184ba:	18d3      	adds	r3, r2, r3
   184bc:	781b      	ldrb	r3, [r3, #0]
   184be:	2b20      	cmp	r3, #32
   184c0:	d005      	beq.n	184ce <FreeRTOS_CLIProcessCommand+0x4e>
   184c2:	68fa      	ldr	r2, [r7, #12]
   184c4:	697b      	ldr	r3, [r7, #20]
   184c6:	18d3      	adds	r3, r2, r3
   184c8:	781b      	ldrb	r3, [r3, #0]
   184ca:	2b00      	cmp	r3, #0
   184cc:	d11e      	bne.n	1850c <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   184ce:	697a      	ldr	r2, [r7, #20]
   184d0:	69b9      	ldr	r1, [r7, #24]
   184d2:	68fb      	ldr	r3, [r7, #12]
   184d4:	0018      	movs	r0, r3
   184d6:	4b2f      	ldr	r3, [pc, #188]	; (18594 <FreeRTOS_CLIProcessCommand+0x114>)
   184d8:	4798      	blx	r3
   184da:	1e03      	subs	r3, r0, #0
   184dc:	d116      	bne.n	1850c <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   184de:	4b2a      	ldr	r3, [pc, #168]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   184e0:	681b      	ldr	r3, [r3, #0]
   184e2:	681b      	ldr	r3, [r3, #0]
   184e4:	7b1b      	ldrb	r3, [r3, #12]
   184e6:	b25b      	sxtb	r3, r3
   184e8:	2b00      	cmp	r3, #0
   184ea:	db19      	blt.n	18520 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   184ec:	68fb      	ldr	r3, [r7, #12]
   184ee:	0018      	movs	r0, r3
   184f0:	4b29      	ldr	r3, [pc, #164]	; (18598 <FreeRTOS_CLIProcessCommand+0x118>)
   184f2:	4798      	blx	r3
   184f4:	0003      	movs	r3, r0
   184f6:	001a      	movs	r2, r3
   184f8:	4b23      	ldr	r3, [pc, #140]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   184fa:	681b      	ldr	r3, [r3, #0]
   184fc:	681b      	ldr	r3, [r3, #0]
   184fe:	7b1b      	ldrb	r3, [r3, #12]
   18500:	b25b      	sxtb	r3, r3
   18502:	429a      	cmp	r2, r3
   18504:	d00c      	beq.n	18520 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   18506:	2300      	movs	r3, #0
   18508:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   1850a:	e009      	b.n	18520 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   1850c:	4b1e      	ldr	r3, [pc, #120]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   1850e:	681b      	ldr	r3, [r3, #0]
   18510:	685a      	ldr	r2, [r3, #4]
   18512:	4b1d      	ldr	r3, [pc, #116]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   18514:	601a      	str	r2, [r3, #0]
   18516:	4b1c      	ldr	r3, [pc, #112]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   18518:	681b      	ldr	r3, [r3, #0]
   1851a:	2b00      	cmp	r3, #0
   1851c:	d1c0      	bne.n	184a0 <FreeRTOS_CLIProcessCommand+0x20>
   1851e:	e000      	b.n	18522 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18520:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   18522:	4b19      	ldr	r3, [pc, #100]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   18524:	681b      	ldr	r3, [r3, #0]
   18526:	2b00      	cmp	r3, #0
   18528:	d00c      	beq.n	18544 <FreeRTOS_CLIProcessCommand+0xc4>
   1852a:	69fb      	ldr	r3, [r7, #28]
   1852c:	2b00      	cmp	r3, #0
   1852e:	d109      	bne.n	18544 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18530:	687a      	ldr	r2, [r7, #4]
   18532:	491a      	ldr	r1, [pc, #104]	; (1859c <FreeRTOS_CLIProcessCommand+0x11c>)
   18534:	68bb      	ldr	r3, [r7, #8]
   18536:	0018      	movs	r0, r3
   18538:	4b19      	ldr	r3, [pc, #100]	; (185a0 <FreeRTOS_CLIProcessCommand+0x120>)
   1853a:	4798      	blx	r3
		pxCommand = NULL;
   1853c:	4b12      	ldr	r3, [pc, #72]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   1853e:	2200      	movs	r2, #0
   18540:	601a      	str	r2, [r3, #0]
   18542:	e01c      	b.n	1857e <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18544:	4b10      	ldr	r3, [pc, #64]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   18546:	681b      	ldr	r3, [r3, #0]
   18548:	2b00      	cmp	r3, #0
   1854a:	d010      	beq.n	1856e <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   1854c:	4b0e      	ldr	r3, [pc, #56]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   1854e:	681b      	ldr	r3, [r3, #0]
   18550:	681b      	ldr	r3, [r3, #0]
   18552:	689b      	ldr	r3, [r3, #8]
   18554:	68fa      	ldr	r2, [r7, #12]
   18556:	6879      	ldr	r1, [r7, #4]
   18558:	68b8      	ldr	r0, [r7, #8]
   1855a:	4798      	blx	r3
   1855c:	0003      	movs	r3, r0
   1855e:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18560:	69fb      	ldr	r3, [r7, #28]
   18562:	2b00      	cmp	r3, #0
   18564:	d10b      	bne.n	1857e <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   18566:	4b08      	ldr	r3, [pc, #32]	; (18588 <FreeRTOS_CLIProcessCommand+0x108>)
   18568:	2200      	movs	r2, #0
   1856a:	601a      	str	r2, [r3, #0]
   1856c:	e007      	b.n	1857e <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1856e:	687a      	ldr	r2, [r7, #4]
   18570:	490c      	ldr	r1, [pc, #48]	; (185a4 <FreeRTOS_CLIProcessCommand+0x124>)
   18572:	68bb      	ldr	r3, [r7, #8]
   18574:	0018      	movs	r0, r3
   18576:	4b0a      	ldr	r3, [pc, #40]	; (185a0 <FreeRTOS_CLIProcessCommand+0x120>)
   18578:	4798      	blx	r3
		xReturn = pdFALSE;
   1857a:	2300      	movs	r3, #0
   1857c:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   1857e:	69fb      	ldr	r3, [r7, #28]
}
   18580:	0018      	movs	r0, r3
   18582:	46bd      	mov	sp, r7
   18584:	b008      	add	sp, #32
   18586:	bd80      	pop	{r7, pc}
   18588:	200008c8 	.word	0x200008c8
   1858c:	200000a0 	.word	0x200000a0
   18590:	00034ff7 	.word	0x00034ff7
   18594:	00035005 	.word	0x00035005
   18598:	000186b9 	.word	0x000186b9
   1859c:	00036ecc 	.word	0x00036ecc
   185a0:	00035027 	.word	0x00035027
   185a4:	00036f24 	.word	0x00036f24

000185a8 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
   185a8:	b580      	push	{r7, lr}
   185aa:	b086      	sub	sp, #24
   185ac:	af00      	add	r7, sp, #0
   185ae:	60f8      	str	r0, [r7, #12]
   185b0:	60b9      	str	r1, [r7, #8]
   185b2:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
   185b4:	2300      	movs	r3, #0
   185b6:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
   185b8:	2300      	movs	r3, #0
   185ba:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
   185bc:	687b      	ldr	r3, [r7, #4]
   185be:	2200      	movs	r2, #0
   185c0:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
   185c2:	e03b      	b.n	1863c <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
   185c4:	68fb      	ldr	r3, [r7, #12]
   185c6:	3301      	adds	r3, #1
   185c8:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   185ca:	68fb      	ldr	r3, [r7, #12]
   185cc:	781b      	ldrb	r3, [r3, #0]
   185ce:	2b00      	cmp	r3, #0
   185d0:	d007      	beq.n	185e2 <FreeRTOS_CLIGetParameter+0x3a>
   185d2:	68fb      	ldr	r3, [r7, #12]
   185d4:	781b      	ldrb	r3, [r3, #0]
   185d6:	2b20      	cmp	r3, #32
   185d8:	d1f4      	bne.n	185c4 <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   185da:	e002      	b.n	185e2 <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
   185dc:	68fb      	ldr	r3, [r7, #12]
   185de:	3301      	adds	r3, #1
   185e0:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
   185e2:	68fb      	ldr	r3, [r7, #12]
   185e4:	781b      	ldrb	r3, [r3, #0]
   185e6:	2b00      	cmp	r3, #0
   185e8:	d003      	beq.n	185f2 <FreeRTOS_CLIGetParameter+0x4a>
   185ea:	68fb      	ldr	r3, [r7, #12]
   185ec:	781b      	ldrb	r3, [r3, #0]
   185ee:	2b20      	cmp	r3, #32
   185f0:	d0f4      	beq.n	185dc <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
   185f2:	68fb      	ldr	r3, [r7, #12]
   185f4:	781b      	ldrb	r3, [r3, #0]
   185f6:	2b00      	cmp	r3, #0
   185f8:	d025      	beq.n	18646 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
   185fa:	697b      	ldr	r3, [r7, #20]
   185fc:	3301      	adds	r3, #1
   185fe:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
   18600:	697a      	ldr	r2, [r7, #20]
   18602:	68bb      	ldr	r3, [r7, #8]
   18604:	429a      	cmp	r2, r3
   18606:	d119      	bne.n	1863c <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
   18608:	68fb      	ldr	r3, [r7, #12]
   1860a:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   1860c:	e007      	b.n	1861e <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
   1860e:	687b      	ldr	r3, [r7, #4]
   18610:	681b      	ldr	r3, [r3, #0]
   18612:	1c5a      	adds	r2, r3, #1
   18614:	687b      	ldr	r3, [r7, #4]
   18616:	601a      	str	r2, [r3, #0]
					pcCommandString++;
   18618:	68fb      	ldr	r3, [r7, #12]
   1861a:	3301      	adds	r3, #1
   1861c:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
   1861e:	68fb      	ldr	r3, [r7, #12]
   18620:	781b      	ldrb	r3, [r3, #0]
   18622:	2b00      	cmp	r3, #0
   18624:	d003      	beq.n	1862e <FreeRTOS_CLIGetParameter+0x86>
   18626:	68fb      	ldr	r3, [r7, #12]
   18628:	781b      	ldrb	r3, [r3, #0]
   1862a:	2b20      	cmp	r3, #32
   1862c:	d1ef      	bne.n	1860e <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
   1862e:	687b      	ldr	r3, [r7, #4]
   18630:	681b      	ldr	r3, [r3, #0]
   18632:	2b00      	cmp	r3, #0
   18634:	d109      	bne.n	1864a <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
   18636:	2300      	movs	r3, #0
   18638:	613b      	str	r3, [r7, #16]
				}

				break;
   1863a:	e006      	b.n	1864a <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
   1863c:	697a      	ldr	r2, [r7, #20]
   1863e:	68bb      	ldr	r3, [r7, #8]
   18640:	429a      	cmp	r2, r3
   18642:	d3c2      	bcc.n	185ca <FreeRTOS_CLIGetParameter+0x22>
   18644:	e002      	b.n	1864c <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
   18646:	46c0      	nop			; (mov r8, r8)
   18648:	e000      	b.n	1864c <FreeRTOS_CLIGetParameter+0xa4>
				break;
   1864a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return pcReturn;
   1864c:	693b      	ldr	r3, [r7, #16]
}
   1864e:	0018      	movs	r0, r3
   18650:	46bd      	mov	sp, r7
   18652:	b006      	add	sp, #24
   18654:	bd80      	pop	{r7, pc}
	...

00018658 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18658:	b580      	push	{r7, lr}
   1865a:	b086      	sub	sp, #24
   1865c:	af00      	add	r7, sp, #0
   1865e:	60f8      	str	r0, [r7, #12]
   18660:	60b9      	str	r1, [r7, #8]
   18662:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18664:	4b11      	ldr	r3, [pc, #68]	; (186ac <prvHelpCommand+0x54>)
   18666:	681b      	ldr	r3, [r3, #0]
   18668:	2b00      	cmp	r3, #0
   1866a:	d102      	bne.n	18672 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   1866c:	4b0f      	ldr	r3, [pc, #60]	; (186ac <prvHelpCommand+0x54>)
   1866e:	4a10      	ldr	r2, [pc, #64]	; (186b0 <prvHelpCommand+0x58>)
   18670:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   18672:	4b0e      	ldr	r3, [pc, #56]	; (186ac <prvHelpCommand+0x54>)
   18674:	681b      	ldr	r3, [r3, #0]
   18676:	681b      	ldr	r3, [r3, #0]
   18678:	6859      	ldr	r1, [r3, #4]
   1867a:	68ba      	ldr	r2, [r7, #8]
   1867c:	68fb      	ldr	r3, [r7, #12]
   1867e:	0018      	movs	r0, r3
   18680:	4b0c      	ldr	r3, [pc, #48]	; (186b4 <prvHelpCommand+0x5c>)
   18682:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18684:	4b09      	ldr	r3, [pc, #36]	; (186ac <prvHelpCommand+0x54>)
   18686:	681b      	ldr	r3, [r3, #0]
   18688:	685a      	ldr	r2, [r3, #4]
   1868a:	4b08      	ldr	r3, [pc, #32]	; (186ac <prvHelpCommand+0x54>)
   1868c:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1868e:	4b07      	ldr	r3, [pc, #28]	; (186ac <prvHelpCommand+0x54>)
   18690:	681b      	ldr	r3, [r3, #0]
   18692:	2b00      	cmp	r3, #0
   18694:	d102      	bne.n	1869c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18696:	2300      	movs	r3, #0
   18698:	617b      	str	r3, [r7, #20]
   1869a:	e001      	b.n	186a0 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   1869c:	2301      	movs	r3, #1
   1869e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   186a0:	697b      	ldr	r3, [r7, #20]
}
   186a2:	0018      	movs	r0, r3
   186a4:	46bd      	mov	sp, r7
   186a6:	b006      	add	sp, #24
   186a8:	bd80      	pop	{r7, pc}
   186aa:	46c0      	nop			; (mov r8, r8)
   186ac:	200008cc 	.word	0x200008cc
   186b0:	200000a0 	.word	0x200000a0
   186b4:	00035027 	.word	0x00035027

000186b8 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   186b8:	b580      	push	{r7, lr}
   186ba:	b084      	sub	sp, #16
   186bc:	af00      	add	r7, sp, #0
   186be:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   186c0:	230f      	movs	r3, #15
   186c2:	18fb      	adds	r3, r7, r3
   186c4:	2200      	movs	r2, #0
   186c6:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   186c8:	2300      	movs	r3, #0
   186ca:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   186cc:	e018      	b.n	18700 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   186ce:	687b      	ldr	r3, [r7, #4]
   186d0:	781b      	ldrb	r3, [r3, #0]
   186d2:	2b20      	cmp	r3, #32
   186d4:	d10f      	bne.n	186f6 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   186d6:	68bb      	ldr	r3, [r7, #8]
   186d8:	2b01      	cmp	r3, #1
   186da:	d00e      	beq.n	186fa <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   186dc:	230f      	movs	r3, #15
   186de:	18fb      	adds	r3, r7, r3
   186e0:	781b      	ldrb	r3, [r3, #0]
   186e2:	b25b      	sxtb	r3, r3
   186e4:	b2db      	uxtb	r3, r3
   186e6:	3301      	adds	r3, #1
   186e8:	b2da      	uxtb	r2, r3
   186ea:	230f      	movs	r3, #15
   186ec:	18fb      	adds	r3, r7, r3
   186ee:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   186f0:	2301      	movs	r3, #1
   186f2:	60bb      	str	r3, [r7, #8]
   186f4:	e001      	b.n	186fa <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   186f6:	2300      	movs	r3, #0
   186f8:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   186fa:	687b      	ldr	r3, [r7, #4]
   186fc:	3301      	adds	r3, #1
   186fe:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18700:	687b      	ldr	r3, [r7, #4]
   18702:	781b      	ldrb	r3, [r3, #0]
   18704:	2b00      	cmp	r3, #0
   18706:	d1e2      	bne.n	186ce <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18708:	68bb      	ldr	r3, [r7, #8]
   1870a:	2b01      	cmp	r3, #1
   1870c:	d109      	bne.n	18722 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   1870e:	230f      	movs	r3, #15
   18710:	18fb      	adds	r3, r7, r3
   18712:	781b      	ldrb	r3, [r3, #0]
   18714:	b25b      	sxtb	r3, r3
   18716:	b2db      	uxtb	r3, r3
   18718:	3b01      	subs	r3, #1
   1871a:	b2da      	uxtb	r2, r3
   1871c:	230f      	movs	r3, #15
   1871e:	18fb      	adds	r3, r7, r3
   18720:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18722:	230f      	movs	r3, #15
   18724:	18fb      	adds	r3, r7, r3
   18726:	781b      	ldrb	r3, [r3, #0]
   18728:	b25b      	sxtb	r3, r3
}
   1872a:	0018      	movs	r0, r3
   1872c:	46bd      	mov	sp, r7
   1872e:	b004      	add	sp, #16
   18730:	bd80      	pop	{r7, pc}
	...

00018734 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18734:	b580      	push	{r7, lr}
   18736:	b082      	sub	sp, #8
   18738:	af00      	add	r7, sp, #0
   1873a:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   1873c:	687b      	ldr	r3, [r7, #4]
   1873e:	0018      	movs	r0, r3
   18740:	4b03      	ldr	r3, [pc, #12]	; (18750 <prvTraceGetQueueNumber+0x1c>)
   18742:	4798      	blx	r3
   18744:	0003      	movs	r3, r0
}
   18746:	0018      	movs	r0, r3
   18748:	46bd      	mov	sp, r7
   1874a:	b002      	add	sp, #8
   1874c:	bd80      	pop	{r7, pc}
   1874e:	46c0      	nop			; (mov r8, r8)
   18750:	0001bef5 	.word	0x0001bef5

00018754 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18754:	b580      	push	{r7, lr}
   18756:	b082      	sub	sp, #8
   18758:	af00      	add	r7, sp, #0
   1875a:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   1875c:	687b      	ldr	r3, [r7, #4]
   1875e:	0018      	movs	r0, r3
   18760:	4b03      	ldr	r3, [pc, #12]	; (18770 <prvTraceGetQueueType+0x1c>)
   18762:	4798      	blx	r3
   18764:	0003      	movs	r3, r0
}
   18766:	0018      	movs	r0, r3
   18768:	46bd      	mov	sp, r7
   1876a:	b002      	add	sp, #8
   1876c:	bd80      	pop	{r7, pc}
   1876e:	46c0      	nop			; (mov r8, r8)
   18770:	0001bf21 	.word	0x0001bf21

00018774 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18774:	b580      	push	{r7, lr}
   18776:	b082      	sub	sp, #8
   18778:	af00      	add	r7, sp, #0
   1877a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   1877c:	687b      	ldr	r3, [r7, #4]
   1877e:	0018      	movs	r0, r3
   18780:	4b03      	ldr	r3, [pc, #12]	; (18790 <prvTraceGetTaskNumberLow16+0x1c>)
   18782:	4798      	blx	r3
   18784:	0003      	movs	r3, r0
   18786:	b29b      	uxth	r3, r3
}
   18788:	0018      	movs	r0, r3
   1878a:	46bd      	mov	sp, r7
   1878c:	b002      	add	sp, #8
   1878e:	bd80      	pop	{r7, pc}
   18790:	0001d251 	.word	0x0001d251

00018794 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18794:	b580      	push	{r7, lr}
   18796:	b082      	sub	sp, #8
   18798:	af00      	add	r7, sp, #0
   1879a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   1879c:	687b      	ldr	r3, [r7, #4]
   1879e:	0018      	movs	r0, r3
   187a0:	4b04      	ldr	r3, [pc, #16]	; (187b4 <prvTraceGetTaskNumberHigh16+0x20>)
   187a2:	4798      	blx	r3
   187a4:	0003      	movs	r3, r0
   187a6:	0c1b      	lsrs	r3, r3, #16
   187a8:	b29b      	uxth	r3, r3
}
   187aa:	0018      	movs	r0, r3
   187ac:	46bd      	mov	sp, r7
   187ae:	b002      	add	sp, #8
   187b0:	bd80      	pop	{r7, pc}
   187b2:	46c0      	nop			; (mov r8, r8)
   187b4:	0001d251 	.word	0x0001d251

000187b8 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   187b8:	b580      	push	{r7, lr}
   187ba:	b082      	sub	sp, #8
   187bc:	af00      	add	r7, sp, #0
   187be:	6078      	str	r0, [r7, #4]
   187c0:	000a      	movs	r2, r1
   187c2:	1cbb      	adds	r3, r7, #2
   187c4:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   187c6:	687b      	ldr	r3, [r7, #4]
   187c8:	0018      	movs	r0, r3
   187ca:	4b08      	ldr	r3, [pc, #32]	; (187ec <prvTraceSetTaskNumberLow16+0x34>)
   187cc:	4798      	blx	r3
   187ce:	0003      	movs	r3, r0
   187d0:	0c1b      	lsrs	r3, r3, #16
   187d2:	041a      	lsls	r2, r3, #16
   187d4:	1cbb      	adds	r3, r7, #2
   187d6:	881b      	ldrh	r3, [r3, #0]
   187d8:	431a      	orrs	r2, r3
   187da:	687b      	ldr	r3, [r7, #4]
   187dc:	0011      	movs	r1, r2
   187de:	0018      	movs	r0, r3
   187e0:	4b03      	ldr	r3, [pc, #12]	; (187f0 <prvTraceSetTaskNumberLow16+0x38>)
   187e2:	4798      	blx	r3
}
   187e4:	46c0      	nop			; (mov r8, r8)
   187e6:	46bd      	mov	sp, r7
   187e8:	b002      	add	sp, #8
   187ea:	bd80      	pop	{r7, pc}
   187ec:	0001d251 	.word	0x0001d251
   187f0:	0001d279 	.word	0x0001d279

000187f4 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   187f4:	b580      	push	{r7, lr}
   187f6:	b082      	sub	sp, #8
   187f8:	af00      	add	r7, sp, #0
   187fa:	6078      	str	r0, [r7, #4]
   187fc:	000a      	movs	r2, r1
   187fe:	1cbb      	adds	r3, r7, #2
   18800:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   18802:	687b      	ldr	r3, [r7, #4]
   18804:	0018      	movs	r0, r3
   18806:	4b09      	ldr	r3, [pc, #36]	; (1882c <prvTraceSetTaskNumberHigh16+0x38>)
   18808:	4798      	blx	r3
   1880a:	0003      	movs	r3, r0
   1880c:	041b      	lsls	r3, r3, #16
   1880e:	0c1a      	lsrs	r2, r3, #16
   18810:	1cbb      	adds	r3, r7, #2
   18812:	881b      	ldrh	r3, [r3, #0]
   18814:	041b      	lsls	r3, r3, #16
   18816:	431a      	orrs	r2, r3
   18818:	687b      	ldr	r3, [r7, #4]
   1881a:	0011      	movs	r1, r2
   1881c:	0018      	movs	r0, r3
   1881e:	4b04      	ldr	r3, [pc, #16]	; (18830 <prvTraceSetTaskNumberHigh16+0x3c>)
   18820:	4798      	blx	r3
}
   18822:	46c0      	nop			; (mov r8, r8)
   18824:	46bd      	mov	sp, r7
   18826:	b002      	add	sp, #8
   18828:	bd80      	pop	{r7, pc}
   1882a:	46c0      	nop			; (mov r8, r8)
   1882c:	0001d251 	.word	0x0001d251
   18830:	0001d279 	.word	0x0001d279

00018834 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   18834:	b580      	push	{r7, lr}
   18836:	b082      	sub	sp, #8
   18838:	af00      	add	r7, sp, #0
   1883a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   1883c:	687b      	ldr	r3, [r7, #4]
   1883e:	0018      	movs	r0, r3
   18840:	4b03      	ldr	r3, [pc, #12]	; (18850 <prvTraceGetQueueNumberLow16+0x1c>)
   18842:	4798      	blx	r3
   18844:	0003      	movs	r3, r0
   18846:	b29b      	uxth	r3, r3
}
   18848:	0018      	movs	r0, r3
   1884a:	46bd      	mov	sp, r7
   1884c:	b002      	add	sp, #8
   1884e:	bd80      	pop	{r7, pc}
   18850:	00018735 	.word	0x00018735

00018854 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   18854:	b580      	push	{r7, lr}
   18856:	b082      	sub	sp, #8
   18858:	af00      	add	r7, sp, #0
   1885a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   1885c:	687b      	ldr	r3, [r7, #4]
   1885e:	0018      	movs	r0, r3
   18860:	4b04      	ldr	r3, [pc, #16]	; (18874 <prvTraceGetQueueNumberHigh16+0x20>)
   18862:	4798      	blx	r3
   18864:	0003      	movs	r3, r0
   18866:	0c1b      	lsrs	r3, r3, #16
   18868:	b29b      	uxth	r3, r3
}
   1886a:	0018      	movs	r0, r3
   1886c:	46bd      	mov	sp, r7
   1886e:	b002      	add	sp, #8
   18870:	bd80      	pop	{r7, pc}
   18872:	46c0      	nop			; (mov r8, r8)
   18874:	00018735 	.word	0x00018735

00018878 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   18878:	b580      	push	{r7, lr}
   1887a:	b082      	sub	sp, #8
   1887c:	af00      	add	r7, sp, #0
   1887e:	6078      	str	r0, [r7, #4]
   18880:	000a      	movs	r2, r1
   18882:	1cbb      	adds	r3, r7, #2
   18884:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   18886:	687b      	ldr	r3, [r7, #4]
   18888:	0018      	movs	r0, r3
   1888a:	4b08      	ldr	r3, [pc, #32]	; (188ac <prvTraceSetQueueNumberLow16+0x34>)
   1888c:	4798      	blx	r3
   1888e:	0003      	movs	r3, r0
   18890:	0c1b      	lsrs	r3, r3, #16
   18892:	041a      	lsls	r2, r3, #16
   18894:	1cbb      	adds	r3, r7, #2
   18896:	881b      	ldrh	r3, [r3, #0]
   18898:	431a      	orrs	r2, r3
   1889a:	687b      	ldr	r3, [r7, #4]
   1889c:	0011      	movs	r1, r2
   1889e:	0018      	movs	r0, r3
   188a0:	4b03      	ldr	r3, [pc, #12]	; (188b0 <prvTraceSetQueueNumberLow16+0x38>)
   188a2:	4798      	blx	r3
}
   188a4:	46c0      	nop			; (mov r8, r8)
   188a6:	46bd      	mov	sp, r7
   188a8:	b002      	add	sp, #8
   188aa:	bd80      	pop	{r7, pc}
   188ac:	00018735 	.word	0x00018735
   188b0:	0001bf09 	.word	0x0001bf09

000188b4 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   188b4:	b580      	push	{r7, lr}
   188b6:	b082      	sub	sp, #8
   188b8:	af00      	add	r7, sp, #0
   188ba:	6078      	str	r0, [r7, #4]
   188bc:	000a      	movs	r2, r1
   188be:	1cbb      	adds	r3, r7, #2
   188c0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   188c2:	687b      	ldr	r3, [r7, #4]
   188c4:	0018      	movs	r0, r3
   188c6:	4b09      	ldr	r3, [pc, #36]	; (188ec <prvTraceSetQueueNumberHigh16+0x38>)
   188c8:	4798      	blx	r3
   188ca:	0003      	movs	r3, r0
   188cc:	041b      	lsls	r3, r3, #16
   188ce:	0c1a      	lsrs	r2, r3, #16
   188d0:	1cbb      	adds	r3, r7, #2
   188d2:	881b      	ldrh	r3, [r3, #0]
   188d4:	041b      	lsls	r3, r3, #16
   188d6:	431a      	orrs	r2, r3
   188d8:	687b      	ldr	r3, [r7, #4]
   188da:	0011      	movs	r1, r2
   188dc:	0018      	movs	r0, r3
   188de:	4b04      	ldr	r3, [pc, #16]	; (188f0 <prvTraceSetQueueNumberHigh16+0x3c>)
   188e0:	4798      	blx	r3
}
   188e2:	46c0      	nop			; (mov r8, r8)
   188e4:	46bd      	mov	sp, r7
   188e6:	b002      	add	sp, #8
   188e8:	bd80      	pop	{r7, pc}
   188ea:	46c0      	nop			; (mov r8, r8)
   188ec:	00018735 	.word	0x00018735
   188f0:	0001bf09 	.word	0x0001bf09

000188f4 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   188f4:	b580      	push	{r7, lr}
   188f6:	b084      	sub	sp, #16
   188f8:	af00      	add	r7, sp, #0
   188fa:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   188fc:	2300      	movs	r3, #0
   188fe:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18900:	2300      	movs	r3, #0
   18902:	60bb      	str	r3, [r7, #8]
   18904:	e018      	b.n	18938 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   18906:	4b14      	ldr	r3, [pc, #80]	; (18958 <prvAddTaskToStackMonitor+0x64>)
   18908:	68ba      	ldr	r2, [r7, #8]
   1890a:	00d2      	lsls	r2, r2, #3
   1890c:	58d3      	ldr	r3, [r2, r3]
   1890e:	2b00      	cmp	r3, #0
   18910:	d10f      	bne.n	18932 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   18912:	4b11      	ldr	r3, [pc, #68]	; (18958 <prvAddTaskToStackMonitor+0x64>)
   18914:	68ba      	ldr	r2, [r7, #8]
   18916:	00d2      	lsls	r2, r2, #3
   18918:	6879      	ldr	r1, [r7, #4]
   1891a:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   1891c:	4a0e      	ldr	r2, [pc, #56]	; (18958 <prvAddTaskToStackMonitor+0x64>)
   1891e:	68bb      	ldr	r3, [r7, #8]
   18920:	00db      	lsls	r3, r3, #3
   18922:	18d3      	adds	r3, r2, r3
   18924:	3304      	adds	r3, #4
   18926:	2201      	movs	r2, #1
   18928:	4252      	negs	r2, r2
   1892a:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   1892c:	2301      	movs	r3, #1
   1892e:	60fb      	str	r3, [r7, #12]
			break;
   18930:	e005      	b.n	1893e <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18932:	68bb      	ldr	r3, [r7, #8]
   18934:	3301      	adds	r3, #1
   18936:	60bb      	str	r3, [r7, #8]
   18938:	68bb      	ldr	r3, [r7, #8]
   1893a:	2b09      	cmp	r3, #9
   1893c:	dde3      	ble.n	18906 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1893e:	68fb      	ldr	r3, [r7, #12]
   18940:	2b00      	cmp	r3, #0
   18942:	d104      	bne.n	1894e <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18944:	4b05      	ldr	r3, [pc, #20]	; (1895c <prvAddTaskToStackMonitor+0x68>)
   18946:	681b      	ldr	r3, [r3, #0]
   18948:	1c5a      	adds	r2, r3, #1
   1894a:	4b04      	ldr	r3, [pc, #16]	; (1895c <prvAddTaskToStackMonitor+0x68>)
   1894c:	601a      	str	r2, [r3, #0]
	}
}
   1894e:	46c0      	nop			; (mov r8, r8)
   18950:	46bd      	mov	sp, r7
   18952:	b004      	add	sp, #16
   18954:	bd80      	pop	{r7, pc}
   18956:	46c0      	nop			; (mov r8, r8)
   18958:	200008d4 	.word	0x200008d4
   1895c:	20000924 	.word	0x20000924

00018960 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   18960:	b590      	push	{r4, r7, lr}
   18962:	b085      	sub	sp, #20
   18964:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   18966:	2300      	movs	r3, #0
   18968:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1896a:	4b2b      	ldr	r3, [pc, #172]	; (18a18 <prvReportStackUsage+0xb8>)
   1896c:	681b      	ldr	r3, [r3, #0]
   1896e:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   18970:	4b29      	ldr	r3, [pc, #164]	; (18a18 <prvReportStackUsage+0xb8>)
   18972:	681a      	ldr	r2, [r3, #0]
   18974:	4b29      	ldr	r3, [pc, #164]	; (18a1c <prvReportStackUsage+0xbc>)
   18976:	00d2      	lsls	r2, r2, #3
   18978:	58d3      	ldr	r3, [r2, r3]
   1897a:	2b00      	cmp	r3, #0
   1897c:	d035      	beq.n	189ea <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1897e:	4b26      	ldr	r3, [pc, #152]	; (18a18 <prvReportStackUsage+0xb8>)
   18980:	681a      	ldr	r2, [r3, #0]
   18982:	4b26      	ldr	r3, [pc, #152]	; (18a1c <prvReportStackUsage+0xbc>)
   18984:	00d2      	lsls	r2, r2, #3
   18986:	58d3      	ldr	r3, [r2, r3]
   18988:	0018      	movs	r0, r3
   1898a:	4b25      	ldr	r3, [pc, #148]	; (18a20 <prvReportStackUsage+0xc0>)
   1898c:	4798      	blx	r3
   1898e:	0003      	movs	r3, r0
   18990:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   18992:	4b21      	ldr	r3, [pc, #132]	; (18a18 <prvReportStackUsage+0xb8>)
   18994:	681b      	ldr	r3, [r3, #0]
   18996:	4a21      	ldr	r2, [pc, #132]	; (18a1c <prvReportStackUsage+0xbc>)
   18998:	00db      	lsls	r3, r3, #3
   1899a:	18d3      	adds	r3, r2, r3
   1899c:	3304      	adds	r3, #4
   1899e:	681a      	ldr	r2, [r3, #0]
   189a0:	687b      	ldr	r3, [r7, #4]
   189a2:	429a      	cmp	r2, r3
   189a4:	d907      	bls.n	189b6 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   189a6:	4b1c      	ldr	r3, [pc, #112]	; (18a18 <prvReportStackUsage+0xb8>)
   189a8:	681b      	ldr	r3, [r3, #0]
   189aa:	4a1c      	ldr	r2, [pc, #112]	; (18a1c <prvReportStackUsage+0xbc>)
   189ac:	00db      	lsls	r3, r3, #3
   189ae:	18d3      	adds	r3, r2, r3
   189b0:	3304      	adds	r3, #4
   189b2:	687a      	ldr	r2, [r7, #4]
   189b4:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   189b6:	4b18      	ldr	r3, [pc, #96]	; (18a18 <prvReportStackUsage+0xb8>)
   189b8:	681a      	ldr	r2, [r3, #0]
   189ba:	4b18      	ldr	r3, [pc, #96]	; (18a1c <prvReportStackUsage+0xbc>)
   189bc:	00d2      	lsls	r2, r2, #3
   189be:	58d3      	ldr	r3, [r2, r3]
   189c0:	0018      	movs	r0, r3
   189c2:	4b18      	ldr	r3, [pc, #96]	; (18a24 <prvReportStackUsage+0xc4>)
   189c4:	4798      	blx	r3
   189c6:	0003      	movs	r3, r0
   189c8:	b2db      	uxtb	r3, r3
   189ca:	0019      	movs	r1, r3
   189cc:	4b12      	ldr	r3, [pc, #72]	; (18a18 <prvReportStackUsage+0xb8>)
   189ce:	681b      	ldr	r3, [r3, #0]
   189d0:	4a12      	ldr	r2, [pc, #72]	; (18a1c <prvReportStackUsage+0xbc>)
   189d2:	00db      	lsls	r3, r3, #3
   189d4:	18d3      	adds	r3, r2, r3
   189d6:	3304      	adds	r3, #4
   189d8:	681b      	ldr	r3, [r3, #0]
   189da:	000a      	movs	r2, r1
   189dc:	2103      	movs	r1, #3
   189de:	20ea      	movs	r0, #234	; 0xea
   189e0:	4c11      	ldr	r4, [pc, #68]	; (18a28 <prvReportStackUsage+0xc8>)
   189e2:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   189e4:	68fb      	ldr	r3, [r7, #12]
   189e6:	3301      	adds	r3, #1
   189e8:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   189ea:	4b0b      	ldr	r3, [pc, #44]	; (18a18 <prvReportStackUsage+0xb8>)
   189ec:	681b      	ldr	r3, [r3, #0]
   189ee:	1c5a      	adds	r2, r3, #1
   189f0:	4b0e      	ldr	r3, [pc, #56]	; (18a2c <prvReportStackUsage+0xcc>)
   189f2:	210a      	movs	r1, #10
   189f4:	0010      	movs	r0, r2
   189f6:	4798      	blx	r3
   189f8:	000b      	movs	r3, r1
   189fa:	001a      	movs	r2, r3
   189fc:	4b06      	ldr	r3, [pc, #24]	; (18a18 <prvReportStackUsage+0xb8>)
   189fe:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   18a00:	68fb      	ldr	r3, [r7, #12]
   18a02:	2b00      	cmp	r3, #0
   18a04:	dc04      	bgt.n	18a10 <prvReportStackUsage+0xb0>
   18a06:	4b04      	ldr	r3, [pc, #16]	; (18a18 <prvReportStackUsage+0xb8>)
   18a08:	681a      	ldr	r2, [r3, #0]
   18a0a:	68bb      	ldr	r3, [r7, #8]
   18a0c:	429a      	cmp	r2, r3
   18a0e:	d1af      	bne.n	18970 <prvReportStackUsage+0x10>
}
   18a10:	46c0      	nop			; (mov r8, r8)
   18a12:	46bd      	mov	sp, r7
   18a14:	b005      	add	sp, #20
   18a16:	bd90      	pop	{r4, r7, pc}
   18a18:	20000928 	.word	0x20000928
   18a1c:	200008d4 	.word	0x200008d4
   18a20:	0001d3f1 	.word	0x0001d3f1
   18a24:	00018775 	.word	0x00018775
   18a28:	000192bd 	.word	0x000192bd
   18a2c:	00032f45 	.word	0x00032f45

00018a30 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   18a30:	b580      	push	{r7, lr}
   18a32:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   18a34:	4b02      	ldr	r3, [pc, #8]	; (18a40 <prvTraceGetCurrentTaskHandle+0x10>)
   18a36:	4798      	blx	r3
   18a38:	0003      	movs	r3, r0
}
   18a3a:	0018      	movs	r0, r3
   18a3c:	46bd      	mov	sp, r7
   18a3e:	bd80      	pop	{r7, pc}
   18a40:	0001d49d 	.word	0x0001d49d

00018a44 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   18a44:	b590      	push	{r4, r7, lr}
   18a46:	b085      	sub	sp, #20
   18a48:	af02      	add	r7, sp, #8
   18a4a:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   18a4c:	4b14      	ldr	r3, [pc, #80]	; (18aa0 <vTraceEnable+0x5c>)
   18a4e:	4798      	blx	r3

	if (startOption == TRC_START)
   18a50:	687b      	ldr	r3, [r7, #4]
   18a52:	2b01      	cmp	r3, #1
   18a54:	d102      	bne.n	18a5c <vTraceEnable+0x18>
	{
		vTraceStart();
   18a56:	4b13      	ldr	r3, [pc, #76]	; (18aa4 <vTraceEnable+0x60>)
   18a58:	4798      	blx	r3
   18a5a:	e00e      	b.n	18a7a <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   18a5c:	687b      	ldr	r3, [r7, #4]
   18a5e:	2b02      	cmp	r3, #2
   18a60:	d104      	bne.n	18a6c <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   18a62:	4b11      	ldr	r3, [pc, #68]	; (18aa8 <vTraceEnable+0x64>)
   18a64:	0018      	movs	r0, r3
   18a66:	4b11      	ldr	r3, [pc, #68]	; (18aac <vTraceEnable+0x68>)
   18a68:	4798      	blx	r3
   18a6a:	e006      	b.n	18a7a <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   18a6c:	687b      	ldr	r3, [r7, #4]
   18a6e:	2b00      	cmp	r3, #0
   18a70:	d003      	beq.n	18a7a <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   18a72:	4b0f      	ldr	r3, [pc, #60]	; (18ab0 <vTraceEnable+0x6c>)
   18a74:	0018      	movs	r0, r3
   18a76:	4b0d      	ldr	r3, [pc, #52]	; (18aac <vTraceEnable+0x68>)
   18a78:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   18a7a:	4b0e      	ldr	r3, [pc, #56]	; (18ab4 <vTraceEnable+0x70>)
   18a7c:	681b      	ldr	r3, [r3, #0]
   18a7e:	2b00      	cmp	r3, #0
   18a80:	d10a      	bne.n	18a98 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   18a82:	2396      	movs	r3, #150	; 0x96
   18a84:	005a      	lsls	r2, r3, #1
   18a86:	490c      	ldr	r1, [pc, #48]	; (18ab8 <vTraceEnable+0x74>)
   18a88:	480c      	ldr	r0, [pc, #48]	; (18abc <vTraceEnable+0x78>)
   18a8a:	4b0a      	ldr	r3, [pc, #40]	; (18ab4 <vTraceEnable+0x70>)
   18a8c:	9301      	str	r3, [sp, #4]
   18a8e:	2304      	movs	r3, #4
   18a90:	9300      	str	r3, [sp, #0]
   18a92:	2300      	movs	r3, #0
   18a94:	4c0a      	ldr	r4, [pc, #40]	; (18ac0 <vTraceEnable+0x7c>)
   18a96:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   18a98:	46c0      	nop			; (mov r8, r8)
   18a9a:	46bd      	mov	sp, r7
   18a9c:	b003      	add	sp, #12
   18a9e:	bd90      	pop	{r4, r7, pc}
   18aa0:	00019989 	.word	0x00019989
   18aa4:	00018ee1 	.word	0x00018ee1
   18aa8:	00036f84 	.word	0x00036f84
   18aac:	0001a031 	.word	0x0001a031
   18ab0:	00036fc4 	.word	0x00036fc4
   18ab4:	200008d0 	.word	0x200008d0
   18ab8:	00036ff8 	.word	0x00036ff8
   18abc:	00018ac5 	.word	0x00018ac5
   18ac0:	0001c3f5 	.word	0x0001c3f5

00018ac4 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   18ac4:	b580      	push	{r7, lr}
   18ac6:	b082      	sub	sp, #8
   18ac8:	af00      	add	r7, sp, #0
   18aca:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   18acc:	4b04      	ldr	r3, [pc, #16]	; (18ae0 <TzCtrl+0x1c>)
   18ace:	4798      	blx	r3
   18ad0:	1e03      	subs	r3, r0, #0
   18ad2:	d001      	beq.n	18ad8 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   18ad4:	4b03      	ldr	r3, [pc, #12]	; (18ae4 <TzCtrl+0x20>)
   18ad6:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   18ad8:	2004      	movs	r0, #4
   18ada:	4b03      	ldr	r3, [pc, #12]	; (18ae8 <TzCtrl+0x24>)
   18adc:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   18ade:	e7f5      	b.n	18acc <TzCtrl+0x8>
   18ae0:	00018f25 	.word	0x00018f25
   18ae4:	00018961 	.word	0x00018961
   18ae8:	0001c791 	.word	0x0001c791

00018aec <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   18aec:	b580      	push	{r7, lr}
   18aee:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   18af0:	4b60      	ldr	r3, [pc, #384]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18af2:	681b      	ldr	r3, [r3, #0]
   18af4:	2209      	movs	r2, #9
   18af6:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   18af8:	4b5e      	ldr	r3, [pc, #376]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18afa:	681b      	ldr	r3, [r3, #0]
   18afc:	2264      	movs	r2, #100	; 0x64
   18afe:	210a      	movs	r1, #10
   18b00:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   18b02:	4b5c      	ldr	r3, [pc, #368]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b04:	681b      	ldr	r3, [r3, #0]
   18b06:	2265      	movs	r2, #101	; 0x65
   18b08:	210a      	movs	r1, #10
   18b0a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   18b0c:	4b59      	ldr	r3, [pc, #356]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b0e:	681b      	ldr	r3, [r3, #0]
   18b10:	2266      	movs	r2, #102	; 0x66
   18b12:	210a      	movs	r1, #10
   18b14:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   18b16:	4b57      	ldr	r3, [pc, #348]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b18:	681b      	ldr	r3, [r3, #0]
   18b1a:	2267      	movs	r2, #103	; 0x67
   18b1c:	210f      	movs	r1, #15
   18b1e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   18b20:	4b54      	ldr	r3, [pc, #336]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b22:	681b      	ldr	r3, [r3, #0]
   18b24:	2268      	movs	r2, #104	; 0x68
   18b26:	2105      	movs	r1, #5
   18b28:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   18b2a:	4b52      	ldr	r3, [pc, #328]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b2c:	681b      	ldr	r3, [r3, #0]
   18b2e:	2269      	movs	r2, #105	; 0x69
   18b30:	2105      	movs	r1, #5
   18b32:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   18b34:	4b4f      	ldr	r3, [pc, #316]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b36:	681b      	ldr	r3, [r3, #0]
   18b38:	226a      	movs	r2, #106	; 0x6a
   18b3a:	2105      	movs	r1, #5
   18b3c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   18b3e:	4b4d      	ldr	r3, [pc, #308]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b40:	681b      	ldr	r3, [r3, #0]
   18b42:	226b      	movs	r2, #107	; 0x6b
   18b44:	2105      	movs	r1, #5
   18b46:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   18b48:	4b4a      	ldr	r3, [pc, #296]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b4a:	681b      	ldr	r3, [r3, #0]
   18b4c:	226c      	movs	r2, #108	; 0x6c
   18b4e:	2105      	movs	r1, #5
   18b50:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   18b52:	4b48      	ldr	r3, [pc, #288]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b54:	681b      	ldr	r3, [r3, #0]
   18b56:	2270      	movs	r2, #112	; 0x70
   18b58:	210f      	movs	r1, #15
   18b5a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   18b5c:	4b45      	ldr	r3, [pc, #276]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b5e:	681b      	ldr	r3, [r3, #0]
   18b60:	2271      	movs	r2, #113	; 0x71
   18b62:	210f      	movs	r1, #15
   18b64:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   18b66:	4b43      	ldr	r3, [pc, #268]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b68:	681b      	ldr	r3, [r3, #0]
   18b6a:	2272      	movs	r2, #114	; 0x72
   18b6c:	210f      	movs	r1, #15
   18b6e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   18b70:	4b40      	ldr	r3, [pc, #256]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b72:	681b      	ldr	r3, [r3, #0]
   18b74:	2273      	movs	r2, #115	; 0x73
   18b76:	210f      	movs	r1, #15
   18b78:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   18b7a:	4b3e      	ldr	r3, [pc, #248]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b7c:	681b      	ldr	r3, [r3, #0]
   18b7e:	2274      	movs	r2, #116	; 0x74
   18b80:	210f      	movs	r1, #15
   18b82:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   18b84:	4b3b      	ldr	r3, [pc, #236]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b86:	681b      	ldr	r3, [r3, #0]
   18b88:	2275      	movs	r2, #117	; 0x75
   18b8a:	210f      	movs	r1, #15
   18b8c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   18b8e:	4b39      	ldr	r3, [pc, #228]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b90:	681b      	ldr	r3, [r3, #0]
   18b92:	2276      	movs	r2, #118	; 0x76
   18b94:	210f      	movs	r1, #15
   18b96:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   18b98:	4b36      	ldr	r3, [pc, #216]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18b9a:	681b      	ldr	r3, [r3, #0]
   18b9c:	2277      	movs	r2, #119	; 0x77
   18b9e:	210f      	movs	r1, #15
   18ba0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   18ba2:	4b34      	ldr	r3, [pc, #208]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18ba4:	681b      	ldr	r3, [r3, #0]
   18ba6:	2278      	movs	r2, #120	; 0x78
   18ba8:	210f      	movs	r1, #15
   18baa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   18bac:	4b31      	ldr	r3, [pc, #196]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18bae:	681b      	ldr	r3, [r3, #0]
   18bb0:	227c      	movs	r2, #124	; 0x7c
   18bb2:	2110      	movs	r1, #16
   18bb4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   18bb6:	4b2f      	ldr	r3, [pc, #188]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18bb8:	681b      	ldr	r3, [r3, #0]
   18bba:	227d      	movs	r2, #125	; 0x7d
   18bbc:	2110      	movs	r1, #16
   18bbe:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   18bc0:	4b2c      	ldr	r3, [pc, #176]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18bc2:	681b      	ldr	r3, [r3, #0]
   18bc4:	227e      	movs	r2, #126	; 0x7e
   18bc6:	2110      	movs	r1, #16
   18bc8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   18bca:	4b2a      	ldr	r3, [pc, #168]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18bcc:	681b      	ldr	r3, [r3, #0]
   18bce:	227f      	movs	r2, #127	; 0x7f
   18bd0:	2113      	movs	r1, #19
   18bd2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   18bd4:	4b27      	ldr	r3, [pc, #156]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18bd6:	681b      	ldr	r3, [r3, #0]
   18bd8:	2280      	movs	r2, #128	; 0x80
   18bda:	2111      	movs	r1, #17
   18bdc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   18bde:	4b25      	ldr	r3, [pc, #148]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18be0:	681b      	ldr	r3, [r3, #0]
   18be2:	2281      	movs	r2, #129	; 0x81
   18be4:	2110      	movs	r1, #16
   18be6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   18be8:	4b22      	ldr	r3, [pc, #136]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18bea:	681b      	ldr	r3, [r3, #0]
   18bec:	2282      	movs	r2, #130	; 0x82
   18bee:	2113      	movs	r1, #19
   18bf0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   18bf2:	4b20      	ldr	r3, [pc, #128]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18bf4:	681b      	ldr	r3, [r3, #0]
   18bf6:	2283      	movs	r2, #131	; 0x83
   18bf8:	2113      	movs	r1, #19
   18bfa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   18bfc:	4b1d      	ldr	r3, [pc, #116]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18bfe:	681b      	ldr	r3, [r3, #0]
   18c00:	2284      	movs	r2, #132	; 0x84
   18c02:	2113      	movs	r1, #19
   18c04:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   18c06:	4b1b      	ldr	r3, [pc, #108]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18c08:	681b      	ldr	r3, [r3, #0]
   18c0a:	2288      	movs	r2, #136	; 0x88
   18c0c:	2100      	movs	r1, #0
   18c0e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   18c10:	4b18      	ldr	r3, [pc, #96]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18c12:	681b      	ldr	r3, [r3, #0]
   18c14:	228a      	movs	r2, #138	; 0x8a
   18c16:	21a0      	movs	r1, #160	; 0xa0
   18c18:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   18c1a:	4b16      	ldr	r3, [pc, #88]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18c1c:	681b      	ldr	r3, [r3, #0]
   18c1e:	228c      	movs	r2, #140	; 0x8c
   18c20:	21a0      	movs	r1, #160	; 0xa0
   18c22:	0049      	lsls	r1, r1, #1
   18c24:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   18c26:	4b13      	ldr	r3, [pc, #76]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18c28:	681b      	ldr	r3, [r3, #0]
   18c2a:	228e      	movs	r2, #142	; 0x8e
   18c2c:	21f0      	movs	r1, #240	; 0xf0
   18c2e:	0049      	lsls	r1, r1, #1
   18c30:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   18c32:	4b10      	ldr	r3, [pc, #64]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18c34:	681b      	ldr	r3, [r3, #0]
   18c36:	2290      	movs	r2, #144	; 0x90
   18c38:	490f      	ldr	r1, [pc, #60]	; (18c78 <vTraceInitObjectPropertyTable+0x18c>)
   18c3a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   18c3c:	4b0d      	ldr	r3, [pc, #52]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18c3e:	681b      	ldr	r3, [r3, #0]
   18c40:	2292      	movs	r2, #146	; 0x92
   18c42:	490e      	ldr	r1, [pc, #56]	; (18c7c <vTraceInitObjectPropertyTable+0x190>)
   18c44:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   18c46:	4b0b      	ldr	r3, [pc, #44]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18c48:	681b      	ldr	r3, [r3, #0]
   18c4a:	2294      	movs	r2, #148	; 0x94
   18c4c:	490c      	ldr	r1, [pc, #48]	; (18c80 <vTraceInitObjectPropertyTable+0x194>)
   18c4e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   18c50:	4b08      	ldr	r3, [pc, #32]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18c52:	681b      	ldr	r3, [r3, #0]
   18c54:	2296      	movs	r2, #150	; 0x96
   18c56:	490b      	ldr	r1, [pc, #44]	; (18c84 <vTraceInitObjectPropertyTable+0x198>)
   18c58:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   18c5a:	4b06      	ldr	r3, [pc, #24]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18c5c:	681b      	ldr	r3, [r3, #0]
   18c5e:	2298      	movs	r2, #152	; 0x98
   18c60:	218c      	movs	r1, #140	; 0x8c
   18c62:	00c9      	lsls	r1, r1, #3
   18c64:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   18c66:	4b03      	ldr	r3, [pc, #12]	; (18c74 <vTraceInitObjectPropertyTable+0x188>)
   18c68:	681b      	ldr	r3, [r3, #0]
   18c6a:	4a07      	ldr	r2, [pc, #28]	; (18c88 <vTraceInitObjectPropertyTable+0x19c>)
   18c6c:	661a      	str	r2, [r3, #96]	; 0x60
}
   18c6e:	46c0      	nop			; (mov r8, r8)
   18c70:	46bd      	mov	sp, r7
   18c72:	bd80      	pop	{r7, pc}
   18c74:	200009e8 	.word	0x200009e8
   18c78:	000002fd 	.word	0x000002fd
   18c7c:	00000352 	.word	0x00000352
   18c80:	000003a2 	.word	0x000003a2
   18c84:	00000401 	.word	0x00000401
   18c88:	000004bf 	.word	0x000004bf

00018c8c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   18c8c:	b580      	push	{r7, lr}
   18c8e:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   18c90:	4b2e      	ldr	r3, [pc, #184]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18c92:	2200      	movs	r2, #0
   18c94:	825a      	strh	r2, [r3, #18]
   18c96:	4b2d      	ldr	r3, [pc, #180]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18c98:	8a5a      	ldrh	r2, [r3, #18]
   18c9a:	4b2c      	ldr	r3, [pc, #176]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18c9c:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   18c9e:	4b2b      	ldr	r3, [pc, #172]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18ca0:	220a      	movs	r2, #10
   18ca2:	829a      	strh	r2, [r3, #20]
   18ca4:	4b29      	ldr	r3, [pc, #164]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18ca6:	8a9a      	ldrh	r2, [r3, #20]
   18ca8:	4b28      	ldr	r3, [pc, #160]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18caa:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   18cac:	4b27      	ldr	r3, [pc, #156]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cae:	2214      	movs	r2, #20
   18cb0:	82da      	strh	r2, [r3, #22]
   18cb2:	4b26      	ldr	r3, [pc, #152]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cb4:	8ada      	ldrh	r2, [r3, #22]
   18cb6:	4b25      	ldr	r3, [pc, #148]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cb8:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   18cba:	4b24      	ldr	r3, [pc, #144]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cbc:	221e      	movs	r2, #30
   18cbe:	831a      	strh	r2, [r3, #24]
   18cc0:	4b22      	ldr	r3, [pc, #136]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cc2:	8b1a      	ldrh	r2, [r3, #24]
   18cc4:	4b21      	ldr	r3, [pc, #132]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cc6:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   18cc8:	4b20      	ldr	r3, [pc, #128]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cca:	222d      	movs	r2, #45	; 0x2d
   18ccc:	835a      	strh	r2, [r3, #26]
   18cce:	4b1f      	ldr	r3, [pc, #124]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cd0:	8b5a      	ldrh	r2, [r3, #26]
   18cd2:	4b1e      	ldr	r3, [pc, #120]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cd4:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   18cd6:	4b1d      	ldr	r3, [pc, #116]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cd8:	2232      	movs	r2, #50	; 0x32
   18cda:	839a      	strh	r2, [r3, #28]
   18cdc:	4b1b      	ldr	r3, [pc, #108]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cde:	8b9a      	ldrh	r2, [r3, #28]
   18ce0:	4b1a      	ldr	r3, [pc, #104]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18ce2:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   18ce4:	4b19      	ldr	r3, [pc, #100]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18ce6:	2237      	movs	r2, #55	; 0x37
   18ce8:	83da      	strh	r2, [r3, #30]
   18cea:	4b18      	ldr	r3, [pc, #96]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cec:	8bda      	ldrh	r2, [r3, #30]
   18cee:	4b17      	ldr	r3, [pc, #92]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cf0:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   18cf2:	4b16      	ldr	r3, [pc, #88]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cf4:	223c      	movs	r2, #60	; 0x3c
   18cf6:	841a      	strh	r2, [r3, #32]
   18cf8:	4b14      	ldr	r3, [pc, #80]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cfa:	8c1a      	ldrh	r2, [r3, #32]
   18cfc:	4b13      	ldr	r3, [pc, #76]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18cfe:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   18d00:	4b12      	ldr	r3, [pc, #72]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d02:	2241      	movs	r2, #65	; 0x41
   18d04:	845a      	strh	r2, [r3, #34]	; 0x22
   18d06:	4b11      	ldr	r3, [pc, #68]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d08:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   18d0a:	4b10      	ldr	r3, [pc, #64]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d0c:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   18d0e:	4b0f      	ldr	r3, [pc, #60]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d10:	2209      	movs	r2, #9
   18d12:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   18d14:	4b0d      	ldr	r3, [pc, #52]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d16:	2213      	movs	r2, #19
   18d18:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   18d1a:	4b0c      	ldr	r3, [pc, #48]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d1c:	221d      	movs	r2, #29
   18d1e:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   18d20:	4b0a      	ldr	r3, [pc, #40]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d22:	222c      	movs	r2, #44	; 0x2c
   18d24:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   18d26:	4b09      	ldr	r3, [pc, #36]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d28:	2231      	movs	r2, #49	; 0x31
   18d2a:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   18d2c:	4b07      	ldr	r3, [pc, #28]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d2e:	2236      	movs	r2, #54	; 0x36
   18d30:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   18d32:	4b06      	ldr	r3, [pc, #24]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d34:	223b      	movs	r2, #59	; 0x3b
   18d36:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   18d38:	4b04      	ldr	r3, [pc, #16]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d3a:	2240      	movs	r2, #64	; 0x40
   18d3c:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   18d3e:	4b03      	ldr	r3, [pc, #12]	; (18d4c <vTraceInitObjectHandleStack+0xc0>)
   18d40:	2245      	movs	r2, #69	; 0x45
   18d42:	869a      	strh	r2, [r3, #52]	; 0x34
}
   18d44:	46c0      	nop			; (mov r8, r8)
   18d46:	46bd      	mov	sp, r7
   18d48:	bd80      	pop	{r7, pc}
   18d4a:	46c0      	nop			; (mov r8, r8)
   18d4c:	20000958 	.word	0x20000958

00018d50 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   18d50:	b580      	push	{r7, lr}
   18d52:	b082      	sub	sp, #8
   18d54:	af00      	add	r7, sp, #0
   18d56:	0002      	movs	r2, r0
   18d58:	1dfb      	adds	r3, r7, #7
   18d5a:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   18d5c:	1dfb      	adds	r3, r7, #7
   18d5e:	781b      	ldrb	r3, [r3, #0]
   18d60:	2b08      	cmp	r3, #8
   18d62:	d816      	bhi.n	18d92 <pszTraceGetErrorNotEnoughHandles+0x42>
   18d64:	009a      	lsls	r2, r3, #2
   18d66:	4b0d      	ldr	r3, [pc, #52]	; (18d9c <pszTraceGetErrorNotEnoughHandles+0x4c>)
   18d68:	18d3      	adds	r3, r2, r3
   18d6a:	681b      	ldr	r3, [r3, #0]
   18d6c:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   18d6e:	4b0c      	ldr	r3, [pc, #48]	; (18da0 <pszTraceGetErrorNotEnoughHandles+0x50>)
   18d70:	e010      	b.n	18d94 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   18d72:	4b0c      	ldr	r3, [pc, #48]	; (18da4 <pszTraceGetErrorNotEnoughHandles+0x54>)
   18d74:	e00e      	b.n	18d94 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   18d76:	4b0c      	ldr	r3, [pc, #48]	; (18da8 <pszTraceGetErrorNotEnoughHandles+0x58>)
   18d78:	e00c      	b.n	18d94 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   18d7a:	4b0c      	ldr	r3, [pc, #48]	; (18dac <pszTraceGetErrorNotEnoughHandles+0x5c>)
   18d7c:	e00a      	b.n	18d94 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   18d7e:	4b0c      	ldr	r3, [pc, #48]	; (18db0 <pszTraceGetErrorNotEnoughHandles+0x60>)
   18d80:	e008      	b.n	18d94 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   18d82:	4b0c      	ldr	r3, [pc, #48]	; (18db4 <pszTraceGetErrorNotEnoughHandles+0x64>)
   18d84:	e006      	b.n	18d94 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   18d86:	4b0c      	ldr	r3, [pc, #48]	; (18db8 <pszTraceGetErrorNotEnoughHandles+0x68>)
   18d88:	e004      	b.n	18d94 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   18d8a:	4b0c      	ldr	r3, [pc, #48]	; (18dbc <pszTraceGetErrorNotEnoughHandles+0x6c>)
   18d8c:	e002      	b.n	18d94 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   18d8e:	4b0c      	ldr	r3, [pc, #48]	; (18dc0 <pszTraceGetErrorNotEnoughHandles+0x70>)
   18d90:	e000      	b.n	18d94 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   18d92:	4b0c      	ldr	r3, [pc, #48]	; (18dc4 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   18d94:	0018      	movs	r0, r3
   18d96:	46bd      	mov	sp, r7
   18d98:	b002      	add	sp, #8
   18d9a:	bd80      	pop	{r7, pc}
   18d9c:	00037300 	.word	0x00037300
   18da0:	00037000 	.word	0x00037000
   18da4:	00037048 	.word	0x00037048
   18da8:	00037090 	.word	0x00037090
   18dac:	000370e4 	.word	0x000370e4
   18db0:	00037130 	.word	0x00037130
   18db4:	0003717c 	.word	0x0003717c
   18db8:	000371c8 	.word	0x000371c8
   18dbc:	0003721c 	.word	0x0003721c
   18dc0:	00037274 	.word	0x00037274
   18dc4:	000372d0 	.word	0x000372d0

00018dc8 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   18dc8:	b590      	push	{r4, r7, lr}
   18dca:	b087      	sub	sp, #28
   18dcc:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   18dce:	2317      	movs	r3, #23
   18dd0:	18fb      	adds	r3, r7, r3
   18dd2:	2200      	movs	r2, #0
   18dd4:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   18dd6:	4b36      	ldr	r3, [pc, #216]	; (18eb0 <uiTraceStart+0xe8>)
   18dd8:	681b      	ldr	r3, [r3, #0]
   18dda:	2b00      	cmp	r3, #0
   18ddc:	d10b      	bne.n	18df6 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   18dde:	4b34      	ldr	r3, [pc, #208]	; (18eb0 <uiTraceStart+0xe8>)
   18de0:	681b      	ldr	r3, [r3, #0]
   18de2:	2b00      	cmp	r3, #0
   18de4:	d105      	bne.n	18df2 <uiTraceStart+0x2a>
   18de6:	4b33      	ldr	r3, [pc, #204]	; (18eb4 <uiTraceStart+0xec>)
   18de8:	0018      	movs	r0, r3
   18dea:	4b33      	ldr	r3, [pc, #204]	; (18eb8 <uiTraceStart+0xf0>)
   18dec:	4798      	blx	r3
   18dee:	2300      	movs	r3, #0
   18df0:	e059      	b.n	18ea6 <uiTraceStart+0xde>
		return 0;
   18df2:	2300      	movs	r3, #0
   18df4:	e057      	b.n	18ea6 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   18df6:	4b2e      	ldr	r3, [pc, #184]	; (18eb0 <uiTraceStart+0xe8>)
   18df8:	681b      	ldr	r3, [r3, #0]
   18dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18dfc:	2b01      	cmp	r3, #1
   18dfe:	d101      	bne.n	18e04 <uiTraceStart+0x3c>
		return 1; /* Already running */
   18e00:	2301      	movs	r3, #1
   18e02:	e050      	b.n	18ea6 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   18e04:	4b2d      	ldr	r3, [pc, #180]	; (18ebc <uiTraceStart+0xf4>)
   18e06:	681b      	ldr	r3, [r3, #0]
   18e08:	2b00      	cmp	r3, #0
   18e0a:	d149      	bne.n	18ea0 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18e0c:	f3ef 8310 	mrs	r3, PRIMASK
   18e10:	60bb      	str	r3, [r7, #8]
  return(result);
   18e12:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   18e14:	613b      	str	r3, [r7, #16]
   18e16:	2301      	movs	r3, #1
   18e18:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18e1a:	68fb      	ldr	r3, [r7, #12]
   18e1c:	f383 8810 	msr	PRIMASK, r3
   18e20:	4b27      	ldr	r3, [pc, #156]	; (18ec0 <uiTraceStart+0xf8>)
   18e22:	681b      	ldr	r3, [r3, #0]
   18e24:	1c5a      	adds	r2, r3, #1
   18e26:	4b26      	ldr	r3, [pc, #152]	; (18ec0 <uiTraceStart+0xf8>)
   18e28:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   18e2a:	4b21      	ldr	r3, [pc, #132]	; (18eb0 <uiTraceStart+0xe8>)
   18e2c:	681b      	ldr	r3, [r3, #0]
   18e2e:	2201      	movs	r2, #1
   18e30:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   18e32:	4b24      	ldr	r3, [pc, #144]	; (18ec4 <uiTraceStart+0xfc>)
   18e34:	4798      	blx	r3
   18e36:	0003      	movs	r3, r0
   18e38:	0018      	movs	r0, r3
   18e3a:	4b23      	ldr	r3, [pc, #140]	; (18ec8 <uiTraceStart+0x100>)
   18e3c:	4798      	blx	r3
   18e3e:	0003      	movs	r3, r0
   18e40:	001a      	movs	r2, r3
   18e42:	2317      	movs	r3, #23
   18e44:	18fb      	adds	r3, r7, r3
   18e46:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   18e48:	2317      	movs	r3, #23
   18e4a:	18fb      	adds	r3, r7, r3
   18e4c:	781b      	ldrb	r3, [r3, #0]
   18e4e:	2b00      	cmp	r3, #0
   18e50:	d116      	bne.n	18e80 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   18e52:	2317      	movs	r3, #23
   18e54:	18fc      	adds	r4, r7, r3
   18e56:	2003      	movs	r0, #3
   18e58:	4b1c      	ldr	r3, [pc, #112]	; (18ecc <uiTraceStart+0x104>)
   18e5a:	4798      	blx	r3
   18e5c:	0003      	movs	r3, r0
   18e5e:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   18e60:	4a1b      	ldr	r2, [pc, #108]	; (18ed0 <uiTraceStart+0x108>)
   18e62:	2317      	movs	r3, #23
   18e64:	18fb      	adds	r3, r7, r3
   18e66:	781b      	ldrb	r3, [r3, #0]
   18e68:	0019      	movs	r1, r3
   18e6a:	2003      	movs	r0, #3
   18e6c:	4b19      	ldr	r3, [pc, #100]	; (18ed4 <uiTraceStart+0x10c>)
   18e6e:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   18e70:	2317      	movs	r3, #23
   18e72:	18fb      	adds	r3, r7, r3
   18e74:	781b      	ldrb	r3, [r3, #0]
   18e76:	2200      	movs	r2, #0
   18e78:	0019      	movs	r1, r3
   18e7a:	2003      	movs	r0, #3
   18e7c:	4b16      	ldr	r3, [pc, #88]	; (18ed8 <uiTraceStart+0x110>)
   18e7e:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   18e80:	2317      	movs	r3, #23
   18e82:	18fb      	adds	r3, r7, r3
   18e84:	781b      	ldrb	r3, [r3, #0]
   18e86:	0018      	movs	r0, r3
   18e88:	4b14      	ldr	r3, [pc, #80]	; (18edc <uiTraceStart+0x114>)
   18e8a:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   18e8c:	4b0c      	ldr	r3, [pc, #48]	; (18ec0 <uiTraceStart+0xf8>)
   18e8e:	681b      	ldr	r3, [r3, #0]
   18e90:	1e5a      	subs	r2, r3, #1
   18e92:	4b0b      	ldr	r3, [pc, #44]	; (18ec0 <uiTraceStart+0xf8>)
   18e94:	601a      	str	r2, [r3, #0]
   18e96:	693b      	ldr	r3, [r7, #16]
   18e98:	607b      	str	r3, [r7, #4]
   18e9a:	687b      	ldr	r3, [r7, #4]
   18e9c:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   18ea0:	4b03      	ldr	r3, [pc, #12]	; (18eb0 <uiTraceStart+0xe8>)
   18ea2:	681b      	ldr	r3, [r3, #0]
   18ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   18ea6:	0018      	movs	r0, r3
   18ea8:	46bd      	mov	sp, r7
   18eaa:	b007      	add	sp, #28
   18eac:	bd90      	pop	{r4, r7, pc}
   18eae:	46c0      	nop			; (mov r8, r8)
   18eb0:	200009e8 	.word	0x200009e8
   18eb4:	00037324 	.word	0x00037324
   18eb8:	0001a031 	.word	0x0001a031
   18ebc:	20000948 	.word	0x20000948
   18ec0:	20000940 	.word	0x20000940
   18ec4:	00018a31 	.word	0x00018a31
   18ec8:	00018775 	.word	0x00018775
   18ecc:	00019d15 	.word	0x00019d15
   18ed0:	00037368 	.word	0x00037368
   18ed4:	00019f45 	.word	0x00019f45
   18ed8:	000196a9 	.word	0x000196a9
   18edc:	00019591 	.word	0x00019591

00018ee0 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   18ee0:	b580      	push	{r7, lr}
   18ee2:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   18ee4:	4b02      	ldr	r3, [pc, #8]	; (18ef0 <vTraceStart+0x10>)
   18ee6:	4798      	blx	r3
}
   18ee8:	46c0      	nop			; (mov r8, r8)
   18eea:	46bd      	mov	sp, r7
   18eec:	bd80      	pop	{r7, pc}
   18eee:	46c0      	nop			; (mov r8, r8)
   18ef0:	00018dc9 	.word	0x00018dc9

00018ef4 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   18ef4:	b580      	push	{r7, lr}
   18ef6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18ef8:	4b08      	ldr	r3, [pc, #32]	; (18f1c <vTraceStop+0x28>)
   18efa:	681b      	ldr	r3, [r3, #0]
   18efc:	2b00      	cmp	r3, #0
   18efe:	d003      	beq.n	18f08 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   18f00:	4b06      	ldr	r3, [pc, #24]	; (18f1c <vTraceStop+0x28>)
   18f02:	681b      	ldr	r3, [r3, #0]
   18f04:	2200      	movs	r2, #0
   18f06:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   18f08:	4b05      	ldr	r3, [pc, #20]	; (18f20 <vTraceStop+0x2c>)
   18f0a:	681b      	ldr	r3, [r3, #0]
   18f0c:	2b00      	cmp	r3, #0
   18f0e:	d002      	beq.n	18f16 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   18f10:	4b03      	ldr	r3, [pc, #12]	; (18f20 <vTraceStop+0x2c>)
   18f12:	681b      	ldr	r3, [r3, #0]
   18f14:	4798      	blx	r3
	}
}
   18f16:	46c0      	nop			; (mov r8, r8)
   18f18:	46bd      	mov	sp, r7
   18f1a:	bd80      	pop	{r7, pc}
   18f1c:	200009e8 	.word	0x200009e8
   18f20:	20000950 	.word	0x20000950

00018f24 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   18f24:	b580      	push	{r7, lr}
   18f26:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   18f28:	4b05      	ldr	r3, [pc, #20]	; (18f40 <xTraceIsRecordingEnabled+0x1c>)
   18f2a:	681b      	ldr	r3, [r3, #0]
   18f2c:	2b00      	cmp	r3, #0
   18f2e:	d003      	beq.n	18f38 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   18f30:	4b03      	ldr	r3, [pc, #12]	; (18f40 <xTraceIsRecordingEnabled+0x1c>)
   18f32:	681b      	ldr	r3, [r3, #0]
   18f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18f36:	e000      	b.n	18f3a <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   18f38:	2300      	movs	r3, #0
	}
}
   18f3a:	0018      	movs	r0, r3
   18f3c:	46bd      	mov	sp, r7
   18f3e:	bd80      	pop	{r7, pc}
   18f40:	200009e8 	.word	0x200009e8

00018f44 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   18f44:	b590      	push	{r4, r7, lr}
   18f46:	b089      	sub	sp, #36	; 0x24
   18f48:	af00      	add	r7, sp, #0
   18f4a:	0002      	movs	r2, r0
   18f4c:	1dfb      	adds	r3, r7, #7
   18f4e:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   18f50:	1dfb      	adds	r3, r7, #7
   18f52:	781b      	ldrb	r3, [r3, #0]
   18f54:	2b00      	cmp	r3, #0
   18f56:	d057      	beq.n	19008 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   18f58:	4b2e      	ldr	r3, [pc, #184]	; (19014 <prvTraceStoreTaskReady+0xd0>)
   18f5a:	681b      	ldr	r3, [r3, #0]
   18f5c:	2b00      	cmp	r3, #0
   18f5e:	d055      	beq.n	1900c <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   18f60:	1dfb      	adds	r3, r7, #7
   18f62:	781b      	ldrb	r3, [r3, #0]
   18f64:	2b0f      	cmp	r3, #15
   18f66:	d904      	bls.n	18f72 <prvTraceStoreTaskReady+0x2e>
   18f68:	4b2b      	ldr	r3, [pc, #172]	; (19018 <prvTraceStoreTaskReady+0xd4>)
   18f6a:	0018      	movs	r0, r3
   18f6c:	4b2b      	ldr	r3, [pc, #172]	; (1901c <prvTraceStoreTaskReady+0xd8>)
   18f6e:	4798      	blx	r3
   18f70:	e04d      	b.n	1900e <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   18f72:	4b2b      	ldr	r3, [pc, #172]	; (19020 <prvTraceStoreTaskReady+0xdc>)
   18f74:	681b      	ldr	r3, [r3, #0]
   18f76:	2b00      	cmp	r3, #0
   18f78:	d004      	beq.n	18f84 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   18f7a:	4b2a      	ldr	r3, [pc, #168]	; (19024 <prvTraceStoreTaskReady+0xe0>)
   18f7c:	0018      	movs	r0, r3
   18f7e:	4b27      	ldr	r3, [pc, #156]	; (1901c <prvTraceStoreTaskReady+0xd8>)
   18f80:	4798      	blx	r3
		return;
   18f82:	e044      	b.n	1900e <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   18f84:	f3ef 8310 	mrs	r3, PRIMASK
   18f88:	60fb      	str	r3, [r7, #12]
  return(result);
   18f8a:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   18f8c:	61fb      	str	r3, [r7, #28]
   18f8e:	2301      	movs	r3, #1
   18f90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18f92:	693b      	ldr	r3, [r7, #16]
   18f94:	f383 8810 	msr	PRIMASK, r3
   18f98:	4b21      	ldr	r3, [pc, #132]	; (19020 <prvTraceStoreTaskReady+0xdc>)
   18f9a:	681b      	ldr	r3, [r3, #0]
   18f9c:	1c5a      	adds	r2, r3, #1
   18f9e:	4b20      	ldr	r3, [pc, #128]	; (19020 <prvTraceStoreTaskReady+0xdc>)
   18fa0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   18fa2:	4b21      	ldr	r3, [pc, #132]	; (19028 <prvTraceStoreTaskReady+0xe4>)
   18fa4:	681b      	ldr	r3, [r3, #0]
   18fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   18fa8:	2b00      	cmp	r3, #0
   18faa:	d022      	beq.n	18ff2 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   18fac:	231a      	movs	r3, #26
   18fae:	18fc      	adds	r4, r7, r3
   18fb0:	4b1e      	ldr	r3, [pc, #120]	; (1902c <prvTraceStoreTaskReady+0xe8>)
   18fb2:	0018      	movs	r0, r3
   18fb4:	4b1e      	ldr	r3, [pc, #120]	; (19030 <prvTraceStoreTaskReady+0xec>)
   18fb6:	4798      	blx	r3
   18fb8:	0003      	movs	r3, r0
   18fba:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   18fbc:	2319      	movs	r3, #25
   18fbe:	18fb      	adds	r3, r7, r3
   18fc0:	1dfa      	adds	r2, r7, #7
   18fc2:	7812      	ldrb	r2, [r2, #0]
   18fc4:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   18fc6:	4b1b      	ldr	r3, [pc, #108]	; (19034 <prvTraceStoreTaskReady+0xf0>)
   18fc8:	4798      	blx	r3
   18fca:	0003      	movs	r3, r0
   18fcc:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   18fce:	697b      	ldr	r3, [r7, #20]
   18fd0:	2b00      	cmp	r3, #0
   18fd2:	d00e      	beq.n	18ff2 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   18fd4:	697b      	ldr	r3, [r7, #20]
   18fd6:	2202      	movs	r2, #2
   18fd8:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   18fda:	697b      	ldr	r3, [r7, #20]
   18fdc:	221a      	movs	r2, #26
   18fde:	18ba      	adds	r2, r7, r2
   18fe0:	8812      	ldrh	r2, [r2, #0]
   18fe2:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   18fe4:	697b      	ldr	r3, [r7, #20]
   18fe6:	2219      	movs	r2, #25
   18fe8:	18ba      	adds	r2, r7, r2
   18fea:	7812      	ldrb	r2, [r2, #0]
   18fec:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   18fee:	4b12      	ldr	r3, [pc, #72]	; (19038 <prvTraceStoreTaskReady+0xf4>)
   18ff0:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   18ff2:	4b0b      	ldr	r3, [pc, #44]	; (19020 <prvTraceStoreTaskReady+0xdc>)
   18ff4:	681b      	ldr	r3, [r3, #0]
   18ff6:	1e5a      	subs	r2, r3, #1
   18ff8:	4b09      	ldr	r3, [pc, #36]	; (19020 <prvTraceStoreTaskReady+0xdc>)
   18ffa:	601a      	str	r2, [r3, #0]
   18ffc:	69fb      	ldr	r3, [r7, #28]
   18ffe:	60bb      	str	r3, [r7, #8]
   19000:	68bb      	ldr	r3, [r7, #8]
   19002:	f383 8810 	msr	PRIMASK, r3
   19006:	e002      	b.n	1900e <prvTraceStoreTaskReady+0xca>
		return;
   19008:	46c0      	nop			; (mov r8, r8)
   1900a:	e000      	b.n	1900e <prvTraceStoreTaskReady+0xca>
		return;
   1900c:	46c0      	nop			; (mov r8, r8)
}
   1900e:	46bd      	mov	sp, r7
   19010:	b009      	add	sp, #36	; 0x24
   19012:	bd90      	pop	{r4, r7, pc}
   19014:	200000b4 	.word	0x200000b4
   19018:	000376d0 	.word	0x000376d0
   1901c:	0001a031 	.word	0x0001a031
   19020:	20000940 	.word	0x20000940
   19024:	00037710 	.word	0x00037710
   19028:	200009e8 	.word	0x200009e8
   1902c:	0000ffff 	.word	0x0000ffff
   19030:	0001a245 	.word	0x0001a245
   19034:	00019be9 	.word	0x00019be9
   19038:	0001a1ed 	.word	0x0001a1ed

0001903c <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   1903c:	b580      	push	{r7, lr}
   1903e:	b08e      	sub	sp, #56	; 0x38
   19040:	af00      	add	r7, sp, #0
   19042:	60f8      	str	r0, [r7, #12]
   19044:	60b9      	str	r1, [r7, #8]
   19046:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   19048:	4b48      	ldr	r3, [pc, #288]	; (1916c <vTraceStoreMemMangEvent+0x130>)
   1904a:	681b      	ldr	r3, [r3, #0]
   1904c:	2b00      	cmp	r3, #0
   1904e:	d100      	bne.n	19052 <vTraceStoreMemMangEvent+0x16>
   19050:	e088      	b.n	19164 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   19052:	687b      	ldr	r3, [r7, #4]
   19054:	2b00      	cmp	r3, #0
   19056:	da03      	bge.n	19060 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   19058:	687b      	ldr	r3, [r7, #4]
   1905a:	425b      	negs	r3, r3
   1905c:	637b      	str	r3, [r7, #52]	; 0x34
   1905e:	e001      	b.n	19064 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   19060:	687b      	ldr	r3, [r7, #4]
   19062:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19064:	f3ef 8310 	mrs	r3, PRIMASK
   19068:	61bb      	str	r3, [r7, #24]
  return(result);
   1906a:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   1906c:	633b      	str	r3, [r7, #48]	; 0x30
   1906e:	2301      	movs	r3, #1
   19070:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19072:	69fb      	ldr	r3, [r7, #28]
   19074:	f383 8810 	msr	PRIMASK, r3
   19078:	4b3d      	ldr	r3, [pc, #244]	; (19170 <vTraceStoreMemMangEvent+0x134>)
   1907a:	681b      	ldr	r3, [r3, #0]
   1907c:	1c5a      	adds	r2, r3, #1
   1907e:	4b3c      	ldr	r3, [pc, #240]	; (19170 <vTraceStoreMemMangEvent+0x134>)
   19080:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   19082:	68bb      	ldr	r3, [r7, #8]
   19084:	2b00      	cmp	r3, #0
   19086:	d005      	beq.n	19094 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   19088:	4b3a      	ldr	r3, [pc, #232]	; (19174 <vTraceStoreMemMangEvent+0x138>)
   1908a:	681a      	ldr	r2, [r3, #0]
   1908c:	687b      	ldr	r3, [r7, #4]
   1908e:	18d2      	adds	r2, r2, r3
   19090:	4b38      	ldr	r3, [pc, #224]	; (19174 <vTraceStoreMemMangEvent+0x138>)
   19092:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   19094:	4b35      	ldr	r3, [pc, #212]	; (1916c <vTraceStoreMemMangEvent+0x130>)
   19096:	681b      	ldr	r3, [r3, #0]
   19098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1909a:	2b00      	cmp	r3, #0
   1909c:	d057      	beq.n	1914e <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1909e:	20ff      	movs	r0, #255	; 0xff
   190a0:	4b35      	ldr	r3, [pc, #212]	; (19178 <vTraceStoreMemMangEvent+0x13c>)
   190a2:	4798      	blx	r3
   190a4:	0003      	movs	r3, r0
   190a6:	001a      	movs	r2, r3
   190a8:	232f      	movs	r3, #47	; 0x2f
   190aa:	18fb      	adds	r3, r7, r3
   190ac:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   190ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   190b0:	4a32      	ldr	r2, [pc, #200]	; (1917c <vTraceStoreMemMangEvent+0x140>)
   190b2:	0019      	movs	r1, r3
   190b4:	0010      	movs	r0, r2
   190b6:	4b32      	ldr	r3, [pc, #200]	; (19180 <vTraceStoreMemMangEvent+0x144>)
   190b8:	4798      	blx	r3
   190ba:	0002      	movs	r2, r0
   190bc:	232c      	movs	r3, #44	; 0x2c
   190be:	18fb      	adds	r3, r7, r3
   190c0:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   190c2:	4b30      	ldr	r3, [pc, #192]	; (19184 <vTraceStoreMemMangEvent+0x148>)
   190c4:	4798      	blx	r3
   190c6:	0003      	movs	r3, r0
   190c8:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   190ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190cc:	2b00      	cmp	r3, #0
   190ce:	d03e      	beq.n	1914e <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   190d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190d2:	222f      	movs	r2, #47	; 0x2f
   190d4:	18ba      	adds	r2, r7, r2
   190d6:	7812      	ldrb	r2, [r2, #0]
   190d8:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   190da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190dc:	2200      	movs	r2, #0
   190de:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   190e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   190e2:	222c      	movs	r2, #44	; 0x2c
   190e4:	18ba      	adds	r2, r7, r2
   190e6:	8812      	ldrh	r2, [r2, #0]
   190e8:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   190ea:	4b27      	ldr	r3, [pc, #156]	; (19188 <vTraceStoreMemMangEvent+0x14c>)
   190ec:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   190ee:	68bb      	ldr	r3, [r7, #8]
   190f0:	4a22      	ldr	r2, [pc, #136]	; (1917c <vTraceStoreMemMangEvent+0x140>)
   190f2:	0019      	movs	r1, r3
   190f4:	0010      	movs	r0, r2
   190f6:	4b22      	ldr	r3, [pc, #136]	; (19180 <vTraceStoreMemMangEvent+0x144>)
   190f8:	4798      	blx	r3
   190fa:	0002      	movs	r2, r0
   190fc:	2326      	movs	r3, #38	; 0x26
   190fe:	18fb      	adds	r3, r7, r3
   19100:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   19102:	2325      	movs	r3, #37	; 0x25
   19104:	18fb      	adds	r3, r7, r3
   19106:	2200      	movs	r2, #0
   19108:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1910a:	4b1e      	ldr	r3, [pc, #120]	; (19184 <vTraceStoreMemMangEvent+0x148>)
   1910c:	4798      	blx	r3
   1910e:	0003      	movs	r3, r0
   19110:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   19112:	6a3b      	ldr	r3, [r7, #32]
   19114:	2b00      	cmp	r3, #0
   19116:	d01a      	beq.n	1914e <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   19118:	6a3b      	ldr	r3, [r7, #32]
   1911a:	2226      	movs	r2, #38	; 0x26
   1911c:	18ba      	adds	r2, r7, r2
   1911e:	8812      	ldrh	r2, [r2, #0]
   19120:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   19122:	6a3b      	ldr	r3, [r7, #32]
   19124:	2225      	movs	r2, #37	; 0x25
   19126:	18ba      	adds	r2, r7, r2
   19128:	7812      	ldrb	r2, [r2, #0]
   1912a:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   1912c:	68fb      	ldr	r3, [r7, #12]
   1912e:	b2db      	uxtb	r3, r3
   19130:	3301      	adds	r3, #1
   19132:	b2da      	uxtb	r2, r3
   19134:	6a3b      	ldr	r3, [r7, #32]
   19136:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   19138:	68fb      	ldr	r3, [r7, #12]
   1913a:	b2da      	uxtb	r2, r3
   1913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1913e:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   19140:	4b11      	ldr	r3, [pc, #68]	; (19188 <vTraceStoreMemMangEvent+0x14c>)
   19142:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   19144:	4b09      	ldr	r3, [pc, #36]	; (1916c <vTraceStoreMemMangEvent+0x130>)
   19146:	681b      	ldr	r3, [r3, #0]
   19148:	4a0a      	ldr	r2, [pc, #40]	; (19174 <vTraceStoreMemMangEvent+0x138>)
   1914a:	6812      	ldr	r2, [r2, #0]
   1914c:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1914e:	4b08      	ldr	r3, [pc, #32]	; (19170 <vTraceStoreMemMangEvent+0x134>)
   19150:	681b      	ldr	r3, [r3, #0]
   19152:	1e5a      	subs	r2, r3, #1
   19154:	4b06      	ldr	r3, [pc, #24]	; (19170 <vTraceStoreMemMangEvent+0x134>)
   19156:	601a      	str	r2, [r3, #0]
   19158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1915a:	617b      	str	r3, [r7, #20]
   1915c:	697b      	ldr	r3, [r7, #20]
   1915e:	f383 8810 	msr	PRIMASK, r3
   19162:	e000      	b.n	19166 <vTraceStoreMemMangEvent+0x12a>
		return;
   19164:	46c0      	nop			; (mov r8, r8)
}
   19166:	46bd      	mov	sp, r7
   19168:	b00e      	add	sp, #56	; 0x38
   1916a:	bd80      	pop	{r7, pc}
   1916c:	200009e8 	.word	0x200009e8
   19170:	20000940 	.word	0x20000940
   19174:	20000954 	.word	0x20000954
   19178:	0001a245 	.word	0x0001a245
   1917c:	0000ffff 	.word	0x0000ffff
   19180:	00019409 	.word	0x00019409
   19184:	00019be9 	.word	0x00019be9
   19188:	0001a1ed 	.word	0x0001a1ed

0001918c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   1918c:	b590      	push	{r4, r7, lr}
   1918e:	b08b      	sub	sp, #44	; 0x2c
   19190:	af00      	add	r7, sp, #0
   19192:	60f8      	str	r0, [r7, #12]
   19194:	607a      	str	r2, [r7, #4]
   19196:	230b      	movs	r3, #11
   19198:	18fb      	adds	r3, r7, r3
   1919a:	1c0a      	adds	r2, r1, #0
   1919c:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1919e:	68fb      	ldr	r3, [r7, #12]
   191a0:	2bfe      	cmp	r3, #254	; 0xfe
   191a2:	d904      	bls.n	191ae <prvTraceStoreKernelCall+0x22>
   191a4:	4b39      	ldr	r3, [pc, #228]	; (1928c <prvTraceStoreKernelCall+0x100>)
   191a6:	0018      	movs	r0, r3
   191a8:	4b39      	ldr	r3, [pc, #228]	; (19290 <prvTraceStoreKernelCall+0x104>)
   191aa:	4798      	blx	r3
   191ac:	e06b      	b.n	19286 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   191ae:	230b      	movs	r3, #11
   191b0:	18fb      	adds	r3, r7, r3
   191b2:	781b      	ldrb	r3, [r3, #0]
   191b4:	2b08      	cmp	r3, #8
   191b6:	d904      	bls.n	191c2 <prvTraceStoreKernelCall+0x36>
   191b8:	4b36      	ldr	r3, [pc, #216]	; (19294 <prvTraceStoreKernelCall+0x108>)
   191ba:	0018      	movs	r0, r3
   191bc:	4b34      	ldr	r3, [pc, #208]	; (19290 <prvTraceStoreKernelCall+0x104>)
   191be:	4798      	blx	r3
   191c0:	e061      	b.n	19286 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   191c2:	4b35      	ldr	r3, [pc, #212]	; (19298 <prvTraceStoreKernelCall+0x10c>)
   191c4:	681a      	ldr	r2, [r3, #0]
   191c6:	230b      	movs	r3, #11
   191c8:	18fb      	adds	r3, r7, r3
   191ca:	781b      	ldrb	r3, [r3, #0]
   191cc:	2164      	movs	r1, #100	; 0x64
   191ce:	18d3      	adds	r3, r2, r3
   191d0:	185b      	adds	r3, r3, r1
   191d2:	781b      	ldrb	r3, [r3, #0]
   191d4:	001a      	movs	r2, r3
   191d6:	687b      	ldr	r3, [r7, #4]
   191d8:	429a      	cmp	r2, r3
   191da:	d204      	bcs.n	191e6 <prvTraceStoreKernelCall+0x5a>
   191dc:	4b2f      	ldr	r3, [pc, #188]	; (1929c <prvTraceStoreKernelCall+0x110>)
   191de:	0018      	movs	r0, r3
   191e0:	4b2b      	ldr	r3, [pc, #172]	; (19290 <prvTraceStoreKernelCall+0x104>)
   191e2:	4798      	blx	r3
   191e4:	e04f      	b.n	19286 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   191e6:	4b2e      	ldr	r3, [pc, #184]	; (192a0 <prvTraceStoreKernelCall+0x114>)
   191e8:	681b      	ldr	r3, [r3, #0]
   191ea:	2b00      	cmp	r3, #0
   191ec:	d004      	beq.n	191f8 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   191ee:	4b2d      	ldr	r3, [pc, #180]	; (192a4 <prvTraceStoreKernelCall+0x118>)
   191f0:	0018      	movs	r0, r3
   191f2:	4b27      	ldr	r3, [pc, #156]	; (19290 <prvTraceStoreKernelCall+0x104>)
   191f4:	4798      	blx	r3
		return;
   191f6:	e046      	b.n	19286 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   191f8:	4b2b      	ldr	r3, [pc, #172]	; (192a8 <prvTraceStoreKernelCall+0x11c>)
   191fa:	781b      	ldrb	r3, [r3, #0]
   191fc:	2b00      	cmp	r3, #0
   191fe:	d041      	beq.n	19284 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19200:	f3ef 8310 	mrs	r3, PRIMASK
   19204:	617b      	str	r3, [r7, #20]
  return(result);
   19206:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   19208:	627b      	str	r3, [r7, #36]	; 0x24
   1920a:	2301      	movs	r3, #1
   1920c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1920e:	69bb      	ldr	r3, [r7, #24]
   19210:	f383 8810 	msr	PRIMASK, r3
   19214:	4b22      	ldr	r3, [pc, #136]	; (192a0 <prvTraceStoreKernelCall+0x114>)
   19216:	681b      	ldr	r3, [r3, #0]
   19218:	1c5a      	adds	r2, r3, #1
   1921a:	4b21      	ldr	r3, [pc, #132]	; (192a0 <prvTraceStoreKernelCall+0x114>)
   1921c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   1921e:	4b1e      	ldr	r3, [pc, #120]	; (19298 <prvTraceStoreKernelCall+0x10c>)
   19220:	681b      	ldr	r3, [r3, #0]
   19222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19224:	2b00      	cmp	r3, #0
   19226:	d022      	beq.n	1926e <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19228:	2322      	movs	r3, #34	; 0x22
   1922a:	18fc      	adds	r4, r7, r3
   1922c:	4b1f      	ldr	r3, [pc, #124]	; (192ac <prvTraceStoreKernelCall+0x120>)
   1922e:	0018      	movs	r0, r3
   19230:	4b1f      	ldr	r3, [pc, #124]	; (192b0 <prvTraceStoreKernelCall+0x124>)
   19232:	4798      	blx	r3
   19234:	0003      	movs	r3, r0
   19236:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19238:	2321      	movs	r3, #33	; 0x21
   1923a:	18fb      	adds	r3, r7, r3
   1923c:	687a      	ldr	r2, [r7, #4]
   1923e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   19240:	4b1c      	ldr	r3, [pc, #112]	; (192b4 <prvTraceStoreKernelCall+0x128>)
   19242:	4798      	blx	r3
   19244:	0003      	movs	r3, r0
   19246:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19248:	69fb      	ldr	r3, [r7, #28]
   1924a:	2b00      	cmp	r3, #0
   1924c:	d00f      	beq.n	1926e <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   1924e:	69fb      	ldr	r3, [r7, #28]
   19250:	2222      	movs	r2, #34	; 0x22
   19252:	18ba      	adds	r2, r7, r2
   19254:	8812      	ldrh	r2, [r2, #0]
   19256:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   19258:	68fb      	ldr	r3, [r7, #12]
   1925a:	b2da      	uxtb	r2, r3
   1925c:	69fb      	ldr	r3, [r7, #28]
   1925e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19260:	69fb      	ldr	r3, [r7, #28]
   19262:	2221      	movs	r2, #33	; 0x21
   19264:	18ba      	adds	r2, r7, r2
   19266:	7812      	ldrb	r2, [r2, #0]
   19268:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1926a:	4b13      	ldr	r3, [pc, #76]	; (192b8 <prvTraceStoreKernelCall+0x12c>)
   1926c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1926e:	4b0c      	ldr	r3, [pc, #48]	; (192a0 <prvTraceStoreKernelCall+0x114>)
   19270:	681b      	ldr	r3, [r3, #0]
   19272:	1e5a      	subs	r2, r3, #1
   19274:	4b0a      	ldr	r3, [pc, #40]	; (192a0 <prvTraceStoreKernelCall+0x114>)
   19276:	601a      	str	r2, [r3, #0]
   19278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1927a:	613b      	str	r3, [r7, #16]
   1927c:	693b      	ldr	r3, [r7, #16]
   1927e:	f383 8810 	msr	PRIMASK, r3
   19282:	e000      	b.n	19286 <prvTraceStoreKernelCall+0xfa>
		return;
   19284:	46c0      	nop			; (mov r8, r8)
}
   19286:	46bd      	mov	sp, r7
   19288:	b00b      	add	sp, #44	; 0x2c
   1928a:	bd90      	pop	{r4, r7, pc}
   1928c:	00037780 	.word	0x00037780
   19290:	0001a031 	.word	0x0001a031
   19294:	000377b8 	.word	0x000377b8
   19298:	200009e8 	.word	0x200009e8
   1929c:	00037800 	.word	0x00037800
   192a0:	20000940 	.word	0x20000940
   192a4:	00037848 	.word	0x00037848
   192a8:	2000094c 	.word	0x2000094c
   192ac:	0000ffff 	.word	0x0000ffff
   192b0:	0001a245 	.word	0x0001a245
   192b4:	00019be9 	.word	0x00019be9
   192b8:	0001a1ed 	.word	0x0001a1ed

000192bc <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   192bc:	b580      	push	{r7, lr}
   192be:	b08a      	sub	sp, #40	; 0x28
   192c0:	af00      	add	r7, sp, #0
   192c2:	60f8      	str	r0, [r7, #12]
   192c4:	607a      	str	r2, [r7, #4]
   192c6:	603b      	str	r3, [r7, #0]
   192c8:	230b      	movs	r3, #11
   192ca:	18fb      	adds	r3, r7, r3
   192cc:	1c0a      	adds	r2, r1, #0
   192ce:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   192d0:	68fb      	ldr	r3, [r7, #12]
   192d2:	2bfe      	cmp	r3, #254	; 0xfe
   192d4:	d904      	bls.n	192e0 <prvTraceStoreKernelCallWithParam+0x24>
   192d6:	4b40      	ldr	r3, [pc, #256]	; (193d8 <prvTraceStoreKernelCallWithParam+0x11c>)
   192d8:	0018      	movs	r0, r3
   192da:	4b40      	ldr	r3, [pc, #256]	; (193dc <prvTraceStoreKernelCallWithParam+0x120>)
   192dc:	4798      	blx	r3
   192de:	e077      	b.n	193d0 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   192e0:	230b      	movs	r3, #11
   192e2:	18fb      	adds	r3, r7, r3
   192e4:	781b      	ldrb	r3, [r3, #0]
   192e6:	2b08      	cmp	r3, #8
   192e8:	d904      	bls.n	192f4 <prvTraceStoreKernelCallWithParam+0x38>
   192ea:	4b3d      	ldr	r3, [pc, #244]	; (193e0 <prvTraceStoreKernelCallWithParam+0x124>)
   192ec:	0018      	movs	r0, r3
   192ee:	4b3b      	ldr	r3, [pc, #236]	; (193dc <prvTraceStoreKernelCallWithParam+0x120>)
   192f0:	4798      	blx	r3
   192f2:	e06d      	b.n	193d0 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   192f4:	4b3b      	ldr	r3, [pc, #236]	; (193e4 <prvTraceStoreKernelCallWithParam+0x128>)
   192f6:	681a      	ldr	r2, [r3, #0]
   192f8:	230b      	movs	r3, #11
   192fa:	18fb      	adds	r3, r7, r3
   192fc:	781b      	ldrb	r3, [r3, #0]
   192fe:	2164      	movs	r1, #100	; 0x64
   19300:	18d3      	adds	r3, r2, r3
   19302:	185b      	adds	r3, r3, r1
   19304:	781b      	ldrb	r3, [r3, #0]
   19306:	001a      	movs	r2, r3
   19308:	687b      	ldr	r3, [r7, #4]
   1930a:	429a      	cmp	r2, r3
   1930c:	d204      	bcs.n	19318 <prvTraceStoreKernelCallWithParam+0x5c>
   1930e:	4b36      	ldr	r3, [pc, #216]	; (193e8 <prvTraceStoreKernelCallWithParam+0x12c>)
   19310:	0018      	movs	r0, r3
   19312:	4b32      	ldr	r3, [pc, #200]	; (193dc <prvTraceStoreKernelCallWithParam+0x120>)
   19314:	4798      	blx	r3
   19316:	e05b      	b.n	193d0 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   19318:	4b34      	ldr	r3, [pc, #208]	; (193ec <prvTraceStoreKernelCallWithParam+0x130>)
   1931a:	681b      	ldr	r3, [r3, #0]
   1931c:	2b00      	cmp	r3, #0
   1931e:	d004      	beq.n	1932a <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   19320:	4b33      	ldr	r3, [pc, #204]	; (193f0 <prvTraceStoreKernelCallWithParam+0x134>)
   19322:	0018      	movs	r0, r3
   19324:	4b2d      	ldr	r3, [pc, #180]	; (193dc <prvTraceStoreKernelCallWithParam+0x120>)
   19326:	4798      	blx	r3
		return;
   19328:	e052      	b.n	193d0 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1932a:	f3ef 8310 	mrs	r3, PRIMASK
   1932e:	617b      	str	r3, [r7, #20]
  return(result);
   19330:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   19332:	627b      	str	r3, [r7, #36]	; 0x24
   19334:	2301      	movs	r3, #1
   19336:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19338:	69bb      	ldr	r3, [r7, #24]
   1933a:	f383 8810 	msr	PRIMASK, r3
   1933e:	4b2b      	ldr	r3, [pc, #172]	; (193ec <prvTraceStoreKernelCallWithParam+0x130>)
   19340:	681b      	ldr	r3, [r3, #0]
   19342:	1c5a      	adds	r2, r3, #1
   19344:	4b29      	ldr	r3, [pc, #164]	; (193ec <prvTraceStoreKernelCallWithParam+0x130>)
   19346:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19348:	4b26      	ldr	r3, [pc, #152]	; (193e4 <prvTraceStoreKernelCallWithParam+0x128>)
   1934a:	681b      	ldr	r3, [r3, #0]
   1934c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1934e:	2b00      	cmp	r3, #0
   19350:	d034      	beq.n	193bc <prvTraceStoreKernelCallWithParam+0x100>
   19352:	4b28      	ldr	r3, [pc, #160]	; (193f4 <prvTraceStoreKernelCallWithParam+0x138>)
   19354:	781b      	ldrb	r3, [r3, #0]
   19356:	2b00      	cmp	r3, #0
   19358:	d030      	beq.n	193bc <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   1935a:	20ff      	movs	r0, #255	; 0xff
   1935c:	4b26      	ldr	r3, [pc, #152]	; (193f8 <prvTraceStoreKernelCallWithParam+0x13c>)
   1935e:	4798      	blx	r3
   19360:	0003      	movs	r3, r0
   19362:	001a      	movs	r2, r3
   19364:	2323      	movs	r3, #35	; 0x23
   19366:	18fb      	adds	r3, r7, r3
   19368:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   1936a:	683b      	ldr	r3, [r7, #0]
   1936c:	0019      	movs	r1, r3
   1936e:	20ff      	movs	r0, #255	; 0xff
   19370:	4b22      	ldr	r3, [pc, #136]	; (193fc <prvTraceStoreKernelCallWithParam+0x140>)
   19372:	4798      	blx	r3
   19374:	0002      	movs	r2, r0
   19376:	2322      	movs	r3, #34	; 0x22
   19378:	18fb      	adds	r3, r7, r3
   1937a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   1937c:	2321      	movs	r3, #33	; 0x21
   1937e:	18fb      	adds	r3, r7, r3
   19380:	687a      	ldr	r2, [r7, #4]
   19382:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   19384:	4b1e      	ldr	r3, [pc, #120]	; (19400 <prvTraceStoreKernelCallWithParam+0x144>)
   19386:	4798      	blx	r3
   19388:	0003      	movs	r3, r0
   1938a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   1938c:	69fb      	ldr	r3, [r7, #28]
   1938e:	2b00      	cmp	r3, #0
   19390:	d014      	beq.n	193bc <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   19392:	69fb      	ldr	r3, [r7, #28]
   19394:	2223      	movs	r2, #35	; 0x23
   19396:	18ba      	adds	r2, r7, r2
   19398:	7812      	ldrb	r2, [r2, #0]
   1939a:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   1939c:	68fb      	ldr	r3, [r7, #12]
   1939e:	b2da      	uxtb	r2, r3
   193a0:	69fb      	ldr	r3, [r7, #28]
   193a2:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   193a4:	69fb      	ldr	r3, [r7, #28]
   193a6:	2221      	movs	r2, #33	; 0x21
   193a8:	18ba      	adds	r2, r7, r2
   193aa:	7812      	ldrb	r2, [r2, #0]
   193ac:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   193ae:	69fb      	ldr	r3, [r7, #28]
   193b0:	2222      	movs	r2, #34	; 0x22
   193b2:	18ba      	adds	r2, r7, r2
   193b4:	7812      	ldrb	r2, [r2, #0]
   193b6:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   193b8:	4b12      	ldr	r3, [pc, #72]	; (19404 <prvTraceStoreKernelCallWithParam+0x148>)
   193ba:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   193bc:	4b0b      	ldr	r3, [pc, #44]	; (193ec <prvTraceStoreKernelCallWithParam+0x130>)
   193be:	681b      	ldr	r3, [r3, #0]
   193c0:	1e5a      	subs	r2, r3, #1
   193c2:	4b0a      	ldr	r3, [pc, #40]	; (193ec <prvTraceStoreKernelCallWithParam+0x130>)
   193c4:	601a      	str	r2, [r3, #0]
   193c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   193c8:	613b      	str	r3, [r7, #16]
   193ca:	693b      	ldr	r3, [r7, #16]
   193cc:	f383 8810 	msr	PRIMASK, r3
}
   193d0:	46bd      	mov	sp, r7
   193d2:	b00a      	add	sp, #40	; 0x28
   193d4:	bd80      	pop	{r7, pc}
   193d6:	46c0      	nop			; (mov r8, r8)
   193d8:	00037880 	.word	0x00037880
   193dc:	0001a031 	.word	0x0001a031
   193e0:	000378c0 	.word	0x000378c0
   193e4:	200009e8 	.word	0x200009e8
   193e8:	00037910 	.word	0x00037910
   193ec:	20000940 	.word	0x20000940
   193f0:	00037960 	.word	0x00037960
   193f4:	2000094c 	.word	0x2000094c
   193f8:	0001a245 	.word	0x0001a245
   193fc:	00019409 	.word	0x00019409
   19400:	00019be9 	.word	0x00019be9
   19404:	0001a1ed 	.word	0x0001a1ed

00019408 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   19408:	b580      	push	{r7, lr}
   1940a:	b084      	sub	sp, #16
   1940c:	af00      	add	r7, sp, #0
   1940e:	6078      	str	r0, [r7, #4]
   19410:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   19412:	687b      	ldr	r3, [r7, #4]
   19414:	2bff      	cmp	r3, #255	; 0xff
   19416:	d009      	beq.n	1942c <prvTraceGetParam+0x24>
   19418:	687b      	ldr	r3, [r7, #4]
   1941a:	4a19      	ldr	r2, [pc, #100]	; (19480 <prvTraceGetParam+0x78>)
   1941c:	4293      	cmp	r3, r2
   1941e:	d005      	beq.n	1942c <prvTraceGetParam+0x24>
   19420:	4b18      	ldr	r3, [pc, #96]	; (19484 <prvTraceGetParam+0x7c>)
   19422:	0018      	movs	r0, r3
   19424:	4b18      	ldr	r3, [pc, #96]	; (19488 <prvTraceGetParam+0x80>)
   19426:	4798      	blx	r3
   19428:	683b      	ldr	r3, [r7, #0]
   1942a:	e024      	b.n	19476 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   1942c:	683a      	ldr	r2, [r7, #0]
   1942e:	687b      	ldr	r3, [r7, #4]
   19430:	429a      	cmp	r2, r3
   19432:	d801      	bhi.n	19438 <prvTraceGetParam+0x30>
	{
		return param;
   19434:	683b      	ldr	r3, [r7, #0]
   19436:	e01e      	b.n	19476 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   19438:	4b14      	ldr	r3, [pc, #80]	; (1948c <prvTraceGetParam+0x84>)
   1943a:	4798      	blx	r3
   1943c:	0003      	movs	r3, r0
   1943e:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   19440:	68fb      	ldr	r3, [r7, #12]
   19442:	2b00      	cmp	r3, #0
   19444:	d014      	beq.n	19470 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   19446:	68fb      	ldr	r3, [r7, #12]
   19448:	2201      	movs	r2, #1
   1944a:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   1944c:	687b      	ldr	r3, [r7, #4]
   1944e:	43db      	mvns	r3, r3
   19450:	683a      	ldr	r2, [r7, #0]
   19452:	4013      	ands	r3, r2
   19454:	0a1b      	lsrs	r3, r3, #8
   19456:	b2da      	uxtb	r2, r3
   19458:	68fb      	ldr	r3, [r7, #12]
   1945a:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   1945c:	687b      	ldr	r3, [r7, #4]
   1945e:	43db      	mvns	r3, r3
   19460:	683a      	ldr	r2, [r7, #0]
   19462:	4013      	ands	r3, r2
   19464:	0c1b      	lsrs	r3, r3, #16
   19466:	b29a      	uxth	r2, r3
   19468:	68fb      	ldr	r3, [r7, #12]
   1946a:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   1946c:	4b08      	ldr	r3, [pc, #32]	; (19490 <prvTraceGetParam+0x88>)
   1946e:	4798      	blx	r3
		}

		return param & param_max;
   19470:	683b      	ldr	r3, [r7, #0]
   19472:	687a      	ldr	r2, [r7, #4]
   19474:	4013      	ands	r3, r2
	}
}
   19476:	0018      	movs	r0, r3
   19478:	46bd      	mov	sp, r7
   1947a:	b004      	add	sp, #16
   1947c:	bd80      	pop	{r7, pc}
   1947e:	46c0      	nop			; (mov r8, r8)
   19480:	0000ffff 	.word	0x0000ffff
   19484:	00037998 	.word	0x00037998
   19488:	0001a031 	.word	0x0001a031
   1948c:	00019be9 	.word	0x00019be9
   19490:	0001a1ed 	.word	0x0001a1ed

00019494 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   19494:	b580      	push	{r7, lr}
   19496:	b08a      	sub	sp, #40	; 0x28
   19498:	af00      	add	r7, sp, #0
   1949a:	6078      	str	r0, [r7, #4]
   1949c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1949e:	2326      	movs	r3, #38	; 0x26
   194a0:	18fb      	adds	r3, r7, r3
   194a2:	2200      	movs	r2, #0
   194a4:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   194a6:	687b      	ldr	r3, [r7, #4]
   194a8:	2bfe      	cmp	r3, #254	; 0xfe
   194aa:	d904      	bls.n	194b6 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   194ac:	4b2d      	ldr	r3, [pc, #180]	; (19564 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   194ae:	0018      	movs	r0, r3
   194b0:	4b2d      	ldr	r3, [pc, #180]	; (19568 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   194b2:	4798      	blx	r3
   194b4:	e053      	b.n	1955e <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   194b6:	4b2d      	ldr	r3, [pc, #180]	; (1956c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   194b8:	681b      	ldr	r3, [r3, #0]
   194ba:	2b00      	cmp	r3, #0
   194bc:	d004      	beq.n	194c8 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   194be:	4b2c      	ldr	r3, [pc, #176]	; (19570 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   194c0:	0018      	movs	r0, r3
   194c2:	4b29      	ldr	r3, [pc, #164]	; (19568 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   194c4:	4798      	blx	r3
		return;
   194c6:	e04a      	b.n	1955e <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   194c8:	f3ef 8310 	mrs	r3, PRIMASK
   194cc:	613b      	str	r3, [r7, #16]
  return(result);
   194ce:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   194d0:	623b      	str	r3, [r7, #32]
   194d2:	2301      	movs	r3, #1
   194d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   194d6:	697b      	ldr	r3, [r7, #20]
   194d8:	f383 8810 	msr	PRIMASK, r3
   194dc:	4b23      	ldr	r3, [pc, #140]	; (1956c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   194de:	681b      	ldr	r3, [r3, #0]
   194e0:	1c5a      	adds	r2, r3, #1
   194e2:	4b22      	ldr	r3, [pc, #136]	; (1956c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   194e4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   194e6:	4b23      	ldr	r3, [pc, #140]	; (19574 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   194e8:	681b      	ldr	r3, [r3, #0]
   194ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   194ec:	2b00      	cmp	r3, #0
   194ee:	d02c      	beq.n	1954a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   194f0:	4b21      	ldr	r3, [pc, #132]	; (19578 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   194f2:	781b      	ldrb	r3, [r3, #0]
   194f4:	2b00      	cmp	r3, #0
   194f6:	d028      	beq.n	1954a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   194f8:	20ff      	movs	r0, #255	; 0xff
   194fa:	4b20      	ldr	r3, [pc, #128]	; (1957c <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   194fc:	4798      	blx	r3
   194fe:	0003      	movs	r3, r0
   19500:	001a      	movs	r2, r3
   19502:	231f      	movs	r3, #31
   19504:	18fb      	adds	r3, r7, r3
   19506:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   19508:	683b      	ldr	r3, [r7, #0]
   1950a:	4a1d      	ldr	r2, [pc, #116]	; (19580 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   1950c:	0019      	movs	r1, r3
   1950e:	0010      	movs	r0, r2
   19510:	4b1c      	ldr	r3, [pc, #112]	; (19584 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   19512:	4798      	blx	r3
   19514:	0002      	movs	r2, r0
   19516:	2326      	movs	r3, #38	; 0x26
   19518:	18fb      	adds	r3, r7, r3
   1951a:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   1951c:	4b1a      	ldr	r3, [pc, #104]	; (19588 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   1951e:	4798      	blx	r3
   19520:	0003      	movs	r3, r0
   19522:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   19524:	69bb      	ldr	r3, [r7, #24]
   19526:	2b00      	cmp	r3, #0
   19528:	d00f      	beq.n	1954a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   1952a:	69bb      	ldr	r3, [r7, #24]
   1952c:	221f      	movs	r2, #31
   1952e:	18ba      	adds	r2, r7, r2
   19530:	7812      	ldrb	r2, [r2, #0]
   19532:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   19534:	687b      	ldr	r3, [r7, #4]
   19536:	b2da      	uxtb	r2, r3
   19538:	69bb      	ldr	r3, [r7, #24]
   1953a:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   1953c:	69bb      	ldr	r3, [r7, #24]
   1953e:	2226      	movs	r2, #38	; 0x26
   19540:	18ba      	adds	r2, r7, r2
   19542:	8812      	ldrh	r2, [r2, #0]
   19544:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19546:	4b11      	ldr	r3, [pc, #68]	; (1958c <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19548:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1954a:	4b08      	ldr	r3, [pc, #32]	; (1956c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1954c:	681b      	ldr	r3, [r3, #0]
   1954e:	1e5a      	subs	r2, r3, #1
   19550:	4b06      	ldr	r3, [pc, #24]	; (1956c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19552:	601a      	str	r2, [r3, #0]
   19554:	6a3b      	ldr	r3, [r7, #32]
   19556:	60fb      	str	r3, [r7, #12]
   19558:	68fb      	ldr	r3, [r7, #12]
   1955a:	f383 8810 	msr	PRIMASK, r3
}
   1955e:	46bd      	mov	sp, r7
   19560:	b00a      	add	sp, #40	; 0x28
   19562:	bd80      	pop	{r7, pc}
   19564:	000379d4 	.word	0x000379d4
   19568:	0001a031 	.word	0x0001a031
   1956c:	20000940 	.word	0x20000940
   19570:	00037a2c 	.word	0x00037a2c
   19574:	200009e8 	.word	0x200009e8
   19578:	2000094c 	.word	0x2000094c
   1957c:	0001a245 	.word	0x0001a245
   19580:	0000ffff 	.word	0x0000ffff
   19584:	00019409 	.word	0x00019409
   19588:	00019be9 	.word	0x00019be9
   1958c:	0001a1ed 	.word	0x0001a1ed

00019590 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   19590:	b590      	push	{r4, r7, lr}
   19592:	b089      	sub	sp, #36	; 0x24
   19594:	af00      	add	r7, sp, #0
   19596:	0002      	movs	r2, r0
   19598:	1dfb      	adds	r3, r7, #7
   1959a:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   1959c:	1dfb      	adds	r3, r7, #7
   1959e:	781b      	ldrb	r3, [r3, #0]
   195a0:	2b0f      	cmp	r3, #15
   195a2:	d904      	bls.n	195ae <prvTraceStoreTaskswitch+0x1e>
   195a4:	4b34      	ldr	r3, [pc, #208]	; (19678 <prvTraceStoreTaskswitch+0xe8>)
   195a6:	0018      	movs	r0, r3
   195a8:	4b34      	ldr	r3, [pc, #208]	; (1967c <prvTraceStoreTaskswitch+0xec>)
   195aa:	4798      	blx	r3
   195ac:	e061      	b.n	19672 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   195ae:	f3ef 8310 	mrs	r3, PRIMASK
   195b2:	60fb      	str	r3, [r7, #12]
  return(result);
   195b4:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   195b6:	61fb      	str	r3, [r7, #28]
   195b8:	2301      	movs	r3, #1
   195ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   195bc:	693b      	ldr	r3, [r7, #16]
   195be:	f383 8810 	msr	PRIMASK, r3
   195c2:	4b2f      	ldr	r3, [pc, #188]	; (19680 <prvTraceStoreTaskswitch+0xf0>)
   195c4:	681b      	ldr	r3, [r3, #0]
   195c6:	1c5a      	adds	r2, r3, #1
   195c8:	4b2d      	ldr	r3, [pc, #180]	; (19680 <prvTraceStoreTaskswitch+0xf0>)
   195ca:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   195cc:	4b2d      	ldr	r3, [pc, #180]	; (19684 <prvTraceStoreTaskswitch+0xf4>)
   195ce:	781b      	ldrb	r3, [r3, #0]
   195d0:	1dfa      	adds	r2, r7, #7
   195d2:	7812      	ldrb	r2, [r2, #0]
   195d4:	429a      	cmp	r2, r3
   195d6:	d042      	beq.n	1965e <prvTraceStoreTaskswitch+0xce>
   195d8:	4b2b      	ldr	r3, [pc, #172]	; (19688 <prvTraceStoreTaskswitch+0xf8>)
   195da:	681b      	ldr	r3, [r3, #0]
   195dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   195de:	2b00      	cmp	r3, #0
   195e0:	d03d      	beq.n	1965e <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   195e2:	4b2a      	ldr	r3, [pc, #168]	; (1968c <prvTraceStoreTaskswitch+0xfc>)
   195e4:	2200      	movs	r2, #0
   195e6:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   195e8:	231a      	movs	r3, #26
   195ea:	18fc      	adds	r4, r7, r3
   195ec:	4b28      	ldr	r3, [pc, #160]	; (19690 <prvTraceStoreTaskswitch+0x100>)
   195ee:	0018      	movs	r0, r3
   195f0:	4b28      	ldr	r3, [pc, #160]	; (19694 <prvTraceStoreTaskswitch+0x104>)
   195f2:	4798      	blx	r3
   195f4:	0003      	movs	r3, r0
   195f6:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   195f8:	4b22      	ldr	r3, [pc, #136]	; (19684 <prvTraceStoreTaskswitch+0xf4>)
   195fa:	1dfa      	adds	r2, r7, #7
   195fc:	7812      	ldrb	r2, [r2, #0]
   195fe:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19600:	2319      	movs	r3, #25
   19602:	18fb      	adds	r3, r7, r3
   19604:	4a1f      	ldr	r2, [pc, #124]	; (19684 <prvTraceStoreTaskswitch+0xf4>)
   19606:	7812      	ldrb	r2, [r2, #0]
   19608:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   1960a:	4b23      	ldr	r3, [pc, #140]	; (19698 <prvTraceStoreTaskswitch+0x108>)
   1960c:	4798      	blx	r3
   1960e:	0003      	movs	r3, r0
   19610:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19612:	697b      	ldr	r3, [r7, #20]
   19614:	2b00      	cmp	r3, #0
   19616:	d022      	beq.n	1965e <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19618:	4b1a      	ldr	r3, [pc, #104]	; (19684 <prvTraceStoreTaskswitch+0xf4>)
   1961a:	781b      	ldrb	r3, [r3, #0]
   1961c:	0019      	movs	r1, r3
   1961e:	2003      	movs	r0, #3
   19620:	4b1e      	ldr	r3, [pc, #120]	; (1969c <prvTraceStoreTaskswitch+0x10c>)
   19622:	4798      	blx	r3
   19624:	0003      	movs	r3, r0
   19626:	2b01      	cmp	r3, #1
   19628:	d103      	bne.n	19632 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   1962a:	697b      	ldr	r3, [r7, #20]
   1962c:	2207      	movs	r2, #7
   1962e:	701a      	strb	r2, [r3, #0]
   19630:	e002      	b.n	19638 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   19632:	697b      	ldr	r3, [r7, #20]
   19634:	2206      	movs	r2, #6
   19636:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19638:	697b      	ldr	r3, [r7, #20]
   1963a:	221a      	movs	r2, #26
   1963c:	18ba      	adds	r2, r7, r2
   1963e:	8812      	ldrh	r2, [r2, #0]
   19640:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   19642:	697b      	ldr	r3, [r7, #20]
   19644:	2219      	movs	r2, #25
   19646:	18ba      	adds	r2, r7, r2
   19648:	7812      	ldrb	r2, [r2, #0]
   1964a:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   1964c:	4b0d      	ldr	r3, [pc, #52]	; (19684 <prvTraceStoreTaskswitch+0xf4>)
   1964e:	781b      	ldrb	r3, [r3, #0]
   19650:	2201      	movs	r2, #1
   19652:	0019      	movs	r1, r3
   19654:	2003      	movs	r0, #3
   19656:	4b12      	ldr	r3, [pc, #72]	; (196a0 <prvTraceStoreTaskswitch+0x110>)
   19658:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   1965a:	4b12      	ldr	r3, [pc, #72]	; (196a4 <prvTraceStoreTaskswitch+0x114>)
   1965c:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1965e:	4b08      	ldr	r3, [pc, #32]	; (19680 <prvTraceStoreTaskswitch+0xf0>)
   19660:	681b      	ldr	r3, [r3, #0]
   19662:	1e5a      	subs	r2, r3, #1
   19664:	4b06      	ldr	r3, [pc, #24]	; (19680 <prvTraceStoreTaskswitch+0xf0>)
   19666:	601a      	str	r2, [r3, #0]
   19668:	69fb      	ldr	r3, [r7, #28]
   1966a:	60bb      	str	r3, [r7, #8]
   1966c:	68bb      	ldr	r3, [r7, #8]
   1966e:	f383 8810 	msr	PRIMASK, r3
}
   19672:	46bd      	mov	sp, r7
   19674:	b009      	add	sp, #36	; 0x24
   19676:	bd90      	pop	{r4, r7, pc}
   19678:	00037a64 	.word	0x00037a64
   1967c:	0001a031 	.word	0x0001a031
   19680:	20000940 	.word	0x20000940
   19684:	2000094c 	.word	0x2000094c
   19688:	200009e8 	.word	0x200009e8
   1968c:	2000092c 	.word	0x2000092c
   19690:	0000ffff 	.word	0x0000ffff
   19694:	0001a245 	.word	0x0001a245
   19698:	00019be9 	.word	0x00019be9
   1969c:	0001988d 	.word	0x0001988d
   196a0:	000197e9 	.word	0x000197e9
   196a4:	0001a1ed 	.word	0x0001a1ed

000196a8 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   196a8:	b590      	push	{r4, r7, lr}
   196aa:	b083      	sub	sp, #12
   196ac:	af00      	add	r7, sp, #0
   196ae:	0004      	movs	r4, r0
   196b0:	0008      	movs	r0, r1
   196b2:	0011      	movs	r1, r2
   196b4:	1dfb      	adds	r3, r7, #7
   196b6:	1c22      	adds	r2, r4, #0
   196b8:	701a      	strb	r2, [r3, #0]
   196ba:	1dbb      	adds	r3, r7, #6
   196bc:	1c02      	adds	r2, r0, #0
   196be:	701a      	strb	r2, [r3, #0]
   196c0:	1d7b      	adds	r3, r7, #5
   196c2:	1c0a      	adds	r2, r1, #0
   196c4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   196c6:	1dfb      	adds	r3, r7, #7
   196c8:	781b      	ldrb	r3, [r3, #0]
   196ca:	2b08      	cmp	r3, #8
   196cc:	d904      	bls.n	196d8 <prvTraceSetPriorityProperty+0x30>
   196ce:	4b1a      	ldr	r3, [pc, #104]	; (19738 <prvTraceSetPriorityProperty+0x90>)
   196d0:	0018      	movs	r0, r3
   196d2:	4b1a      	ldr	r3, [pc, #104]	; (1973c <prvTraceSetPriorityProperty+0x94>)
   196d4:	4798      	blx	r3
   196d6:	e02c      	b.n	19732 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   196d8:	4b19      	ldr	r3, [pc, #100]	; (19740 <prvTraceSetPriorityProperty+0x98>)
   196da:	681a      	ldr	r2, [r3, #0]
   196dc:	1dfb      	adds	r3, r7, #7
   196de:	781b      	ldrb	r3, [r3, #0]
   196e0:	2164      	movs	r1, #100	; 0x64
   196e2:	18d3      	adds	r3, r2, r3
   196e4:	185b      	adds	r3, r3, r1
   196e6:	781b      	ldrb	r3, [r3, #0]
   196e8:	1dba      	adds	r2, r7, #6
   196ea:	7812      	ldrb	r2, [r2, #0]
   196ec:	429a      	cmp	r2, r3
   196ee:	d904      	bls.n	196fa <prvTraceSetPriorityProperty+0x52>
   196f0:	4b14      	ldr	r3, [pc, #80]	; (19744 <prvTraceSetPriorityProperty+0x9c>)
   196f2:	0018      	movs	r0, r3
   196f4:	4b11      	ldr	r3, [pc, #68]	; (1973c <prvTraceSetPriorityProperty+0x94>)
   196f6:	4798      	blx	r3
   196f8:	e01b      	b.n	19732 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   196fa:	4b11      	ldr	r3, [pc, #68]	; (19740 <prvTraceSetPriorityProperty+0x98>)
   196fc:	681c      	ldr	r4, [r3, #0]
   196fe:	1dfb      	adds	r3, r7, #7
   19700:	781a      	ldrb	r2, [r3, #0]
   19702:	1dbb      	adds	r3, r7, #6
   19704:	781b      	ldrb	r3, [r3, #0]
   19706:	0011      	movs	r1, r2
   19708:	0018      	movs	r0, r3
   1970a:	4b0f      	ldr	r3, [pc, #60]	; (19748 <prvTraceSetPriorityProperty+0xa0>)
   1970c:	4798      	blx	r3
   1970e:	0003      	movs	r3, r0
   19710:	0018      	movs	r0, r3
   19712:	4b0b      	ldr	r3, [pc, #44]	; (19740 <prvTraceSetPriorityProperty+0x98>)
   19714:	681a      	ldr	r2, [r3, #0]
   19716:	1dfb      	adds	r3, r7, #7
   19718:	781b      	ldrb	r3, [r3, #0]
   1971a:	2170      	movs	r1, #112	; 0x70
   1971c:	18d3      	adds	r3, r2, r3
   1971e:	185b      	adds	r3, r3, r1
   19720:	781b      	ldrb	r3, [r3, #0]
   19722:	18c3      	adds	r3, r0, r3
   19724:	3301      	adds	r3, #1
   19726:	229c      	movs	r2, #156	; 0x9c
   19728:	18e3      	adds	r3, r4, r3
   1972a:	189b      	adds	r3, r3, r2
   1972c:	1d7a      	adds	r2, r7, #5
   1972e:	7812      	ldrb	r2, [r2, #0]
   19730:	701a      	strb	r2, [r3, #0]
}
   19732:	46bd      	mov	sp, r7
   19734:	b003      	add	sp, #12
   19736:	bd90      	pop	{r4, r7, pc}
   19738:	00037bf8 	.word	0x00037bf8
   1973c:	0001a031 	.word	0x0001a031
   19740:	200009e8 	.word	0x200009e8
   19744:	00037c44 	.word	0x00037c44
   19748:	00019c3d 	.word	0x00019c3d

0001974c <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   1974c:	b590      	push	{r4, r7, lr}
   1974e:	b083      	sub	sp, #12
   19750:	af00      	add	r7, sp, #0
   19752:	0002      	movs	r2, r0
   19754:	1dfb      	adds	r3, r7, #7
   19756:	701a      	strb	r2, [r3, #0]
   19758:	1dbb      	adds	r3, r7, #6
   1975a:	1c0a      	adds	r2, r1, #0
   1975c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1975e:	1dfb      	adds	r3, r7, #7
   19760:	781b      	ldrb	r3, [r3, #0]
   19762:	2b08      	cmp	r3, #8
   19764:	d905      	bls.n	19772 <prvTraceGetPriorityProperty+0x26>
   19766:	4b1b      	ldr	r3, [pc, #108]	; (197d4 <prvTraceGetPriorityProperty+0x88>)
   19768:	0018      	movs	r0, r3
   1976a:	4b1b      	ldr	r3, [pc, #108]	; (197d8 <prvTraceGetPriorityProperty+0x8c>)
   1976c:	4798      	blx	r3
   1976e:	2300      	movs	r3, #0
   19770:	e02b      	b.n	197ca <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19772:	4b1a      	ldr	r3, [pc, #104]	; (197dc <prvTraceGetPriorityProperty+0x90>)
   19774:	681a      	ldr	r2, [r3, #0]
   19776:	1dfb      	adds	r3, r7, #7
   19778:	781b      	ldrb	r3, [r3, #0]
   1977a:	2164      	movs	r1, #100	; 0x64
   1977c:	18d3      	adds	r3, r2, r3
   1977e:	185b      	adds	r3, r3, r1
   19780:	781b      	ldrb	r3, [r3, #0]
   19782:	1dba      	adds	r2, r7, #6
   19784:	7812      	ldrb	r2, [r2, #0]
   19786:	429a      	cmp	r2, r3
   19788:	d905      	bls.n	19796 <prvTraceGetPriorityProperty+0x4a>
   1978a:	4b15      	ldr	r3, [pc, #84]	; (197e0 <prvTraceGetPriorityProperty+0x94>)
   1978c:	0018      	movs	r0, r3
   1978e:	4b12      	ldr	r3, [pc, #72]	; (197d8 <prvTraceGetPriorityProperty+0x8c>)
   19790:	4798      	blx	r3
   19792:	2300      	movs	r3, #0
   19794:	e019      	b.n	197ca <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   19796:	4b11      	ldr	r3, [pc, #68]	; (197dc <prvTraceGetPriorityProperty+0x90>)
   19798:	681c      	ldr	r4, [r3, #0]
   1979a:	1dfb      	adds	r3, r7, #7
   1979c:	781a      	ldrb	r2, [r3, #0]
   1979e:	1dbb      	adds	r3, r7, #6
   197a0:	781b      	ldrb	r3, [r3, #0]
   197a2:	0011      	movs	r1, r2
   197a4:	0018      	movs	r0, r3
   197a6:	4b0f      	ldr	r3, [pc, #60]	; (197e4 <prvTraceGetPriorityProperty+0x98>)
   197a8:	4798      	blx	r3
   197aa:	0003      	movs	r3, r0
   197ac:	0018      	movs	r0, r3
   197ae:	4b0b      	ldr	r3, [pc, #44]	; (197dc <prvTraceGetPriorityProperty+0x90>)
   197b0:	681a      	ldr	r2, [r3, #0]
   197b2:	1dfb      	adds	r3, r7, #7
   197b4:	781b      	ldrb	r3, [r3, #0]
   197b6:	2170      	movs	r1, #112	; 0x70
   197b8:	18d3      	adds	r3, r2, r3
   197ba:	185b      	adds	r3, r3, r1
   197bc:	781b      	ldrb	r3, [r3, #0]
   197be:	18c3      	adds	r3, r0, r3
   197c0:	3301      	adds	r3, #1
   197c2:	229c      	movs	r2, #156	; 0x9c
   197c4:	18e3      	adds	r3, r4, r3
   197c6:	189b      	adds	r3, r3, r2
   197c8:	781b      	ldrb	r3, [r3, #0]
}
   197ca:	0018      	movs	r0, r3
   197cc:	46bd      	mov	sp, r7
   197ce:	b003      	add	sp, #12
   197d0:	bd90      	pop	{r4, r7, pc}
   197d2:	46c0      	nop			; (mov r8, r8)
   197d4:	00037c84 	.word	0x00037c84
   197d8:	0001a031 	.word	0x0001a031
   197dc:	200009e8 	.word	0x200009e8
   197e0:	00037cd0 	.word	0x00037cd0
   197e4:	00019c3d 	.word	0x00019c3d

000197e8 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   197e8:	b590      	push	{r4, r7, lr}
   197ea:	b083      	sub	sp, #12
   197ec:	af00      	add	r7, sp, #0
   197ee:	0004      	movs	r4, r0
   197f0:	0008      	movs	r0, r1
   197f2:	0011      	movs	r1, r2
   197f4:	1dfb      	adds	r3, r7, #7
   197f6:	1c22      	adds	r2, r4, #0
   197f8:	701a      	strb	r2, [r3, #0]
   197fa:	1dbb      	adds	r3, r7, #6
   197fc:	1c02      	adds	r2, r0, #0
   197fe:	701a      	strb	r2, [r3, #0]
   19800:	1d7b      	adds	r3, r7, #5
   19802:	1c0a      	adds	r2, r1, #0
   19804:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19806:	1dfb      	adds	r3, r7, #7
   19808:	781b      	ldrb	r3, [r3, #0]
   1980a:	2b08      	cmp	r3, #8
   1980c:	d904      	bls.n	19818 <prvTraceSetObjectState+0x30>
   1980e:	4b1a      	ldr	r3, [pc, #104]	; (19878 <prvTraceSetObjectState+0x90>)
   19810:	0018      	movs	r0, r3
   19812:	4b1a      	ldr	r3, [pc, #104]	; (1987c <prvTraceSetObjectState+0x94>)
   19814:	4798      	blx	r3
   19816:	e02b      	b.n	19870 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19818:	4b19      	ldr	r3, [pc, #100]	; (19880 <prvTraceSetObjectState+0x98>)
   1981a:	681a      	ldr	r2, [r3, #0]
   1981c:	1dfb      	adds	r3, r7, #7
   1981e:	781b      	ldrb	r3, [r3, #0]
   19820:	2164      	movs	r1, #100	; 0x64
   19822:	18d3      	adds	r3, r2, r3
   19824:	185b      	adds	r3, r3, r1
   19826:	781b      	ldrb	r3, [r3, #0]
   19828:	1dba      	adds	r2, r7, #6
   1982a:	7812      	ldrb	r2, [r2, #0]
   1982c:	429a      	cmp	r2, r3
   1982e:	d904      	bls.n	1983a <prvTraceSetObjectState+0x52>
   19830:	4b14      	ldr	r3, [pc, #80]	; (19884 <prvTraceSetObjectState+0x9c>)
   19832:	0018      	movs	r0, r3
   19834:	4b11      	ldr	r3, [pc, #68]	; (1987c <prvTraceSetObjectState+0x94>)
   19836:	4798      	blx	r3
   19838:	e01a      	b.n	19870 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1983a:	4b11      	ldr	r3, [pc, #68]	; (19880 <prvTraceSetObjectState+0x98>)
   1983c:	681c      	ldr	r4, [r3, #0]
   1983e:	1dfb      	adds	r3, r7, #7
   19840:	781a      	ldrb	r2, [r3, #0]
   19842:	1dbb      	adds	r3, r7, #6
   19844:	781b      	ldrb	r3, [r3, #0]
   19846:	0011      	movs	r1, r2
   19848:	0018      	movs	r0, r3
   1984a:	4b0f      	ldr	r3, [pc, #60]	; (19888 <prvTraceSetObjectState+0xa0>)
   1984c:	4798      	blx	r3
   1984e:	0003      	movs	r3, r0
   19850:	0018      	movs	r0, r3
   19852:	4b0b      	ldr	r3, [pc, #44]	; (19880 <prvTraceSetObjectState+0x98>)
   19854:	681a      	ldr	r2, [r3, #0]
   19856:	1dfb      	adds	r3, r7, #7
   19858:	781b      	ldrb	r3, [r3, #0]
   1985a:	2170      	movs	r1, #112	; 0x70
   1985c:	18d3      	adds	r3, r2, r3
   1985e:	185b      	adds	r3, r3, r1
   19860:	781b      	ldrb	r3, [r3, #0]
   19862:	18c3      	adds	r3, r0, r3
   19864:	229c      	movs	r2, #156	; 0x9c
   19866:	18e3      	adds	r3, r4, r3
   19868:	189b      	adds	r3, r3, r2
   1986a:	1d7a      	adds	r2, r7, #5
   1986c:	7812      	ldrb	r2, [r2, #0]
   1986e:	701a      	strb	r2, [r3, #0]
}
   19870:	46bd      	mov	sp, r7
   19872:	b003      	add	sp, #12
   19874:	bd90      	pop	{r4, r7, pc}
   19876:	46c0      	nop			; (mov r8, r8)
   19878:	00037d10 	.word	0x00037d10
   1987c:	0001a031 	.word	0x0001a031
   19880:	200009e8 	.word	0x200009e8
   19884:	00037d54 	.word	0x00037d54
   19888:	00019c3d 	.word	0x00019c3d

0001988c <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   1988c:	b590      	push	{r4, r7, lr}
   1988e:	b083      	sub	sp, #12
   19890:	af00      	add	r7, sp, #0
   19892:	0002      	movs	r2, r0
   19894:	1dfb      	adds	r3, r7, #7
   19896:	701a      	strb	r2, [r3, #0]
   19898:	1dbb      	adds	r3, r7, #6
   1989a:	1c0a      	adds	r2, r1, #0
   1989c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1989e:	1dfb      	adds	r3, r7, #7
   198a0:	781b      	ldrb	r3, [r3, #0]
   198a2:	2b08      	cmp	r3, #8
   198a4:	d905      	bls.n	198b2 <prvTraceGetObjectState+0x26>
   198a6:	4b1a      	ldr	r3, [pc, #104]	; (19910 <prvTraceGetObjectState+0x84>)
   198a8:	0018      	movs	r0, r3
   198aa:	4b1a      	ldr	r3, [pc, #104]	; (19914 <prvTraceGetObjectState+0x88>)
   198ac:	4798      	blx	r3
   198ae:	2300      	movs	r3, #0
   198b0:	e02a      	b.n	19908 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   198b2:	4b19      	ldr	r3, [pc, #100]	; (19918 <prvTraceGetObjectState+0x8c>)
   198b4:	681a      	ldr	r2, [r3, #0]
   198b6:	1dfb      	adds	r3, r7, #7
   198b8:	781b      	ldrb	r3, [r3, #0]
   198ba:	2164      	movs	r1, #100	; 0x64
   198bc:	18d3      	adds	r3, r2, r3
   198be:	185b      	adds	r3, r3, r1
   198c0:	781b      	ldrb	r3, [r3, #0]
   198c2:	1dba      	adds	r2, r7, #6
   198c4:	7812      	ldrb	r2, [r2, #0]
   198c6:	429a      	cmp	r2, r3
   198c8:	d905      	bls.n	198d6 <prvTraceGetObjectState+0x4a>
   198ca:	4b14      	ldr	r3, [pc, #80]	; (1991c <prvTraceGetObjectState+0x90>)
   198cc:	0018      	movs	r0, r3
   198ce:	4b11      	ldr	r3, [pc, #68]	; (19914 <prvTraceGetObjectState+0x88>)
   198d0:	4798      	blx	r3
   198d2:	2300      	movs	r3, #0
   198d4:	e018      	b.n	19908 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   198d6:	4b10      	ldr	r3, [pc, #64]	; (19918 <prvTraceGetObjectState+0x8c>)
   198d8:	681c      	ldr	r4, [r3, #0]
   198da:	1dfb      	adds	r3, r7, #7
   198dc:	781a      	ldrb	r2, [r3, #0]
   198de:	1dbb      	adds	r3, r7, #6
   198e0:	781b      	ldrb	r3, [r3, #0]
   198e2:	0011      	movs	r1, r2
   198e4:	0018      	movs	r0, r3
   198e6:	4b0e      	ldr	r3, [pc, #56]	; (19920 <prvTraceGetObjectState+0x94>)
   198e8:	4798      	blx	r3
   198ea:	0003      	movs	r3, r0
   198ec:	0018      	movs	r0, r3
   198ee:	4b0a      	ldr	r3, [pc, #40]	; (19918 <prvTraceGetObjectState+0x8c>)
   198f0:	681a      	ldr	r2, [r3, #0]
   198f2:	1dfb      	adds	r3, r7, #7
   198f4:	781b      	ldrb	r3, [r3, #0]
   198f6:	2170      	movs	r1, #112	; 0x70
   198f8:	18d3      	adds	r3, r2, r3
   198fa:	185b      	adds	r3, r3, r1
   198fc:	781b      	ldrb	r3, [r3, #0]
   198fe:	18c3      	adds	r3, r0, r3
   19900:	229c      	movs	r2, #156	; 0x9c
   19902:	18e3      	adds	r3, r4, r3
   19904:	189b      	adds	r3, r3, r2
   19906:	781b      	ldrb	r3, [r3, #0]
}
   19908:	0018      	movs	r0, r3
   1990a:	46bd      	mov	sp, r7
   1990c:	b003      	add	sp, #12
   1990e:	bd90      	pop	{r4, r7, pc}
   19910:	00037d90 	.word	0x00037d90
   19914:	0001a031 	.word	0x0001a031
   19918:	200009e8 	.word	0x200009e8
   1991c:	00037dd4 	.word	0x00037dd4
   19920:	00019c3d 	.word	0x00019c3d

00019924 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19924:	b590      	push	{r4, r7, lr}
   19926:	b083      	sub	sp, #12
   19928:	af00      	add	r7, sp, #0
   1992a:	0002      	movs	r2, r0
   1992c:	1dfb      	adds	r3, r7, #7
   1992e:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   19930:	4b11      	ldr	r3, [pc, #68]	; (19978 <prvTraceSetTaskInstanceFinished+0x54>)
   19932:	681b      	ldr	r3, [r3, #0]
   19934:	2267      	movs	r2, #103	; 0x67
   19936:	5c9b      	ldrb	r3, [r3, r2]
   19938:	1dfa      	adds	r2, r7, #7
   1993a:	7812      	ldrb	r2, [r2, #0]
   1993c:	429a      	cmp	r2, r3
   1993e:	d904      	bls.n	1994a <prvTraceSetTaskInstanceFinished+0x26>
   19940:	4b0e      	ldr	r3, [pc, #56]	; (1997c <prvTraceSetTaskInstanceFinished+0x58>)
   19942:	0018      	movs	r0, r3
   19944:	4b0e      	ldr	r3, [pc, #56]	; (19980 <prvTraceSetTaskInstanceFinished+0x5c>)
   19946:	4798      	blx	r3
   19948:	e013      	b.n	19972 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1994a:	4b0b      	ldr	r3, [pc, #44]	; (19978 <prvTraceSetTaskInstanceFinished+0x54>)
   1994c:	681c      	ldr	r4, [r3, #0]
   1994e:	1dfb      	adds	r3, r7, #7
   19950:	781b      	ldrb	r3, [r3, #0]
   19952:	2103      	movs	r1, #3
   19954:	0018      	movs	r0, r3
   19956:	4b0b      	ldr	r3, [pc, #44]	; (19984 <prvTraceSetTaskInstanceFinished+0x60>)
   19958:	4798      	blx	r3
   1995a:	0003      	movs	r3, r0
   1995c:	0019      	movs	r1, r3
   1995e:	4b06      	ldr	r3, [pc, #24]	; (19978 <prvTraceSetTaskInstanceFinished+0x54>)
   19960:	681b      	ldr	r3, [r3, #0]
   19962:	2273      	movs	r2, #115	; 0x73
   19964:	5c9b      	ldrb	r3, [r3, r2]
   19966:	18cb      	adds	r3, r1, r3
   19968:	229c      	movs	r2, #156	; 0x9c
   1996a:	18e3      	adds	r3, r4, r3
   1996c:	189b      	adds	r3, r3, r2
   1996e:	2200      	movs	r2, #0
   19970:	701a      	strb	r2, [r3, #0]
#endif
}
   19972:	46bd      	mov	sp, r7
   19974:	b003      	add	sp, #12
   19976:	bd90      	pop	{r4, r7, pc}
   19978:	200009e8 	.word	0x200009e8
   1997c:	00037e10 	.word	0x00037e10
   19980:	0001a031 	.word	0x0001a031
   19984:	00019c3d 	.word	0x00019c3d

00019988 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   19988:	b580      	push	{r7, lr}
   1998a:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1998c:	4b75      	ldr	r3, [pc, #468]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   1998e:	681b      	ldr	r3, [r3, #0]
   19990:	2b00      	cmp	r3, #0
   19992:	d103      	bne.n	1999c <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   19994:	4b73      	ldr	r3, [pc, #460]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19996:	4a74      	ldr	r2, [pc, #464]	; (19b68 <prvTraceInitTraceData+0x1e0>)
   19998:	601a      	str	r2, [r3, #0]
   1999a:	e006      	b.n	199aa <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1999c:	4b71      	ldr	r3, [pc, #452]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   1999e:	681b      	ldr	r3, [r3, #0]
   199a0:	781b      	ldrb	r3, [r3, #0]
   199a2:	b2db      	uxtb	r3, r3
   199a4:	2b01      	cmp	r3, #1
   199a6:	d100      	bne.n	199aa <prvTraceInitTraceData+0x22>
   199a8:	e0d8      	b.n	19b5c <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   199aa:	4b70      	ldr	r3, [pc, #448]	; (19b6c <prvTraceInitTraceData+0x1e4>)
   199ac:	681a      	ldr	r2, [r3, #0]
   199ae:	4b70      	ldr	r3, [pc, #448]	; (19b70 <prvTraceInitTraceData+0x1e8>)
   199b0:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   199b2:	4b6c      	ldr	r3, [pc, #432]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   199b4:	6818      	ldr	r0, [r3, #0]
   199b6:	23bd      	movs	r3, #189	; 0xbd
   199b8:	011b      	lsls	r3, r3, #4
   199ba:	001a      	movs	r2, r3
   199bc:	2100      	movs	r1, #0
   199be:	4b6d      	ldr	r3, [pc, #436]	; (19b74 <prvTraceInitTraceData+0x1ec>)
   199c0:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   199c2:	4b68      	ldr	r3, [pc, #416]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   199c4:	681b      	ldr	r3, [r3, #0]
   199c6:	4a6c      	ldr	r2, [pc, #432]	; (19b78 <prvTraceInitTraceData+0x1f0>)
   199c8:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   199ca:	4b66      	ldr	r3, [pc, #408]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   199cc:	681b      	ldr	r3, [r3, #0]
   199ce:	2205      	movs	r2, #5
   199d0:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   199d2:	4b64      	ldr	r3, [pc, #400]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   199d4:	681b      	ldr	r3, [r3, #0]
   199d6:	2200      	movs	r2, #0
   199d8:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   199da:	4b62      	ldr	r3, [pc, #392]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   199dc:	681b      	ldr	r3, [r3, #0]
   199de:	22bd      	movs	r2, #189	; 0xbd
   199e0:	0112      	lsls	r2, r2, #4
   199e2:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   199e4:	4b5f      	ldr	r3, [pc, #380]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   199e6:	681b      	ldr	r3, [r3, #0]
   199e8:	2296      	movs	r2, #150	; 0x96
   199ea:	0052      	lsls	r2, r2, #1
   199ec:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   199ee:	4b5d      	ldr	r3, [pc, #372]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   199f0:	681b      	ldr	r3, [r3, #0]
   199f2:	4a62      	ldr	r2, [pc, #392]	; (19b7c <prvTraceInitTraceData+0x1f4>)
   199f4:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   199f6:	4b5b      	ldr	r3, [pc, #364]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   199f8:	681b      	ldr	r3, [r3, #0]
   199fa:	2200      	movs	r2, #0
   199fc:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   199fe:	4b59      	ldr	r3, [pc, #356]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a00:	681b      	ldr	r3, [r3, #0]
   19a02:	2200      	movs	r2, #0
   19a04:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   19a06:	4b5e      	ldr	r3, [pc, #376]	; (19b80 <prvTraceInitTraceData+0x1f8>)
   19a08:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   19a0a:	4b56      	ldr	r3, [pc, #344]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a0c:	681b      	ldr	r3, [r3, #0]
   19a0e:	4a5d      	ldr	r2, [pc, #372]	; (19b84 <prvTraceInitTraceData+0x1fc>)
   19a10:	495d      	ldr	r1, [pc, #372]	; (19b88 <prvTraceInitTraceData+0x200>)
   19a12:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   19a14:	4b53      	ldr	r3, [pc, #332]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a16:	681a      	ldr	r2, [r3, #0]
   19a18:	23ac      	movs	r3, #172	; 0xac
   19a1a:	00db      	lsls	r3, r3, #3
   19a1c:	21c8      	movs	r1, #200	; 0xc8
   19a1e:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   19a20:	4b50      	ldr	r3, [pc, #320]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a22:	681b      	ldr	r3, [r3, #0]
   19a24:	4a59      	ldr	r2, [pc, #356]	; (19b8c <prvTraceInitTraceData+0x204>)
   19a26:	2101      	movs	r1, #1
   19a28:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   19a2a:	4b4e      	ldr	r3, [pc, #312]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a2c:	681a      	ldr	r2, [r3, #0]
   19a2e:	23d7      	movs	r3, #215	; 0xd7
   19a30:	00db      	lsls	r3, r3, #3
   19a32:	4957      	ldr	r1, [pc, #348]	; (19b90 <prvTraceInitTraceData+0x208>)
   19a34:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   19a36:	4b4b      	ldr	r3, [pc, #300]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a38:	681b      	ldr	r3, [r3, #0]
   19a3a:	4a56      	ldr	r2, [pc, #344]	; (19b94 <prvTraceInitTraceData+0x20c>)
   19a3c:	4694      	mov	ip, r2
   19a3e:	4463      	add	r3, ip
   19a40:	4955      	ldr	r1, [pc, #340]	; (19b98 <prvTraceInitTraceData+0x210>)
   19a42:	2250      	movs	r2, #80	; 0x50
   19a44:	0018      	movs	r0, r3
   19a46:	4b55      	ldr	r3, [pc, #340]	; (19b9c <prvTraceInitTraceData+0x214>)
   19a48:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   19a4a:	4b46      	ldr	r3, [pc, #280]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a4c:	681b      	ldr	r3, [r3, #0]
   19a4e:	4a54      	ldr	r2, [pc, #336]	; (19ba0 <prvTraceInitTraceData+0x218>)
   19a50:	4954      	ldr	r1, [pc, #336]	; (19ba4 <prvTraceInitTraceData+0x21c>)
   19a52:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   19a54:	4b43      	ldr	r3, [pc, #268]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a56:	681b      	ldr	r3, [r3, #0]
   19a58:	4a53      	ldr	r2, [pc, #332]	; (19ba8 <prvTraceInitTraceData+0x220>)
   19a5a:	210a      	movs	r1, #10
   19a5c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   19a5e:	4b41      	ldr	r3, [pc, #260]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a60:	681b      	ldr	r3, [r3, #0]
   19a62:	4a52      	ldr	r2, [pc, #328]	; (19bac <prvTraceInitTraceData+0x224>)
   19a64:	210b      	movs	r1, #11
   19a66:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   19a68:	4b3e      	ldr	r3, [pc, #248]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a6a:	681b      	ldr	r3, [r3, #0]
   19a6c:	4a50      	ldr	r2, [pc, #320]	; (19bb0 <prvTraceInitTraceData+0x228>)
   19a6e:	210c      	movs	r1, #12
   19a70:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   19a72:	4b3c      	ldr	r3, [pc, #240]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a74:	681b      	ldr	r3, [r3, #0]
   19a76:	4a4f      	ldr	r2, [pc, #316]	; (19bb4 <prvTraceInitTraceData+0x22c>)
   19a78:	210d      	movs	r1, #13
   19a7a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   19a7c:	4b39      	ldr	r3, [pc, #228]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a7e:	681b      	ldr	r3, [r3, #0]
   19a80:	4a4d      	ldr	r2, [pc, #308]	; (19bb8 <prvTraceInitTraceData+0x230>)
   19a82:	2171      	movs	r1, #113	; 0x71
   19a84:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   19a86:	4b37      	ldr	r3, [pc, #220]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a88:	681b      	ldr	r3, [r3, #0]
   19a8a:	4a4c      	ldr	r2, [pc, #304]	; (19bbc <prvTraceInitTraceData+0x234>)
   19a8c:	2172      	movs	r1, #114	; 0x72
   19a8e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   19a90:	4b34      	ldr	r3, [pc, #208]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a92:	681b      	ldr	r3, [r3, #0]
   19a94:	4a4a      	ldr	r2, [pc, #296]	; (19bc0 <prvTraceInitTraceData+0x238>)
   19a96:	2173      	movs	r1, #115	; 0x73
   19a98:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   19a9a:	4b32      	ldr	r3, [pc, #200]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19a9c:	681b      	ldr	r3, [r3, #0]
   19a9e:	4a49      	ldr	r2, [pc, #292]	; (19bc4 <prvTraceInitTraceData+0x23c>)
   19aa0:	2174      	movs	r1, #116	; 0x74
   19aa2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   19aa4:	4b2f      	ldr	r3, [pc, #188]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19aa6:	681b      	ldr	r3, [r3, #0]
   19aa8:	4a47      	ldr	r2, [pc, #284]	; (19bc8 <prvTraceInitTraceData+0x240>)
   19aaa:	21f1      	movs	r1, #241	; 0xf1
   19aac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   19aae:	4b2d      	ldr	r3, [pc, #180]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19ab0:	681b      	ldr	r3, [r3, #0]
   19ab2:	4a46      	ldr	r2, [pc, #280]	; (19bcc <prvTraceInitTraceData+0x244>)
   19ab4:	21f2      	movs	r1, #242	; 0xf2
   19ab6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   19ab8:	4b2a      	ldr	r3, [pc, #168]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19aba:	681b      	ldr	r3, [r3, #0]
   19abc:	4a44      	ldr	r2, [pc, #272]	; (19bd0 <prvTraceInitTraceData+0x248>)
   19abe:	21f3      	movs	r1, #243	; 0xf3
   19ac0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   19ac2:	4b28      	ldr	r3, [pc, #160]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19ac4:	681b      	ldr	r3, [r3, #0]
   19ac6:	4a43      	ldr	r2, [pc, #268]	; (19bd4 <prvTraceInitTraceData+0x24c>)
   19ac8:	21f4      	movs	r1, #244	; 0xf4
   19aca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   19acc:	4b42      	ldr	r3, [pc, #264]	; (19bd8 <prvTraceInitTraceData+0x250>)
   19ace:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   19ad0:	4b24      	ldr	r3, [pc, #144]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19ad2:	681b      	ldr	r3, [r3, #0]
   19ad4:	22f4      	movs	r2, #244	; 0xf4
   19ad6:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   19ad8:	4b22      	ldr	r3, [pc, #136]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19ada:	681b      	ldr	r3, [r3, #0]
   19adc:	22f3      	movs	r2, #243	; 0xf3
   19ade:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   19ae0:	4b20      	ldr	r3, [pc, #128]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19ae2:	681b      	ldr	r3, [r3, #0]
   19ae4:	22f2      	movs	r2, #242	; 0xf2
   19ae6:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   19ae8:	4b1e      	ldr	r3, [pc, #120]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19aea:	681b      	ldr	r3, [r3, #0]
   19aec:	22f1      	movs	r2, #241	; 0xf1
   19aee:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   19af0:	4b1c      	ldr	r3, [pc, #112]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19af2:	681b      	ldr	r3, [r3, #0]
   19af4:	2274      	movs	r2, #116	; 0x74
   19af6:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   19af8:	4b1a      	ldr	r3, [pc, #104]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19afa:	681b      	ldr	r3, [r3, #0]
   19afc:	2273      	movs	r2, #115	; 0x73
   19afe:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   19b00:	4b18      	ldr	r3, [pc, #96]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19b02:	681b      	ldr	r3, [r3, #0]
   19b04:	2272      	movs	r2, #114	; 0x72
   19b06:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   19b08:	4b16      	ldr	r3, [pc, #88]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19b0a:	681b      	ldr	r3, [r3, #0]
   19b0c:	2271      	movs	r2, #113	; 0x71
   19b0e:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   19b10:	4b14      	ldr	r3, [pc, #80]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19b12:	681b      	ldr	r3, [r3, #0]
   19b14:	2204      	movs	r2, #4
   19b16:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   19b18:	4b12      	ldr	r3, [pc, #72]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19b1a:	681b      	ldr	r3, [r3, #0]
   19b1c:	2203      	movs	r2, #3
   19b1e:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   19b20:	4b10      	ldr	r3, [pc, #64]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19b22:	681b      	ldr	r3, [r3, #0]
   19b24:	2202      	movs	r2, #2
   19b26:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   19b28:	4b0e      	ldr	r3, [pc, #56]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19b2a:	681b      	ldr	r3, [r3, #0]
   19b2c:	2201      	movs	r2, #1
   19b2e:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   19b30:	4b2a      	ldr	r3, [pc, #168]	; (19bdc <prvTraceInitTraceData+0x254>)
   19b32:	681b      	ldr	r3, [r3, #0]
   19b34:	2b00      	cmp	r3, #0
   19b36:	d012      	beq.n	19b5e <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   19b38:	4b0a      	ldr	r3, [pc, #40]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19b3a:	681b      	ldr	r3, [r3, #0]
   19b3c:	4a15      	ldr	r2, [pc, #84]	; (19b94 <prvTraceInitTraceData+0x20c>)
   19b3e:	1898      	adds	r0, r3, r2
   19b40:	4b26      	ldr	r3, [pc, #152]	; (19bdc <prvTraceInitTraceData+0x254>)
   19b42:	681b      	ldr	r3, [r3, #0]
   19b44:	2250      	movs	r2, #80	; 0x50
   19b46:	0019      	movs	r1, r3
   19b48:	4b14      	ldr	r3, [pc, #80]	; (19b9c <prvTraceInitTraceData+0x214>)
   19b4a:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   19b4c:	4b05      	ldr	r3, [pc, #20]	; (19b64 <prvTraceInitTraceData+0x1dc>)
   19b4e:	681b      	ldr	r3, [r3, #0]
   19b50:	4a23      	ldr	r2, [pc, #140]	; (19be0 <prvTraceInitTraceData+0x258>)
   19b52:	2101      	movs	r1, #1
   19b54:	5099      	str	r1, [r3, r2]
		vTraceStop();
   19b56:	4b23      	ldr	r3, [pc, #140]	; (19be4 <prvTraceInitTraceData+0x25c>)
   19b58:	4798      	blx	r3
   19b5a:	e000      	b.n	19b5e <prvTraceInitTraceData+0x1d6>
			return;
   19b5c:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   19b5e:	46bd      	mov	sp, r7
   19b60:	bd80      	pop	{r7, pc}
   19b62:	46c0      	nop			; (mov r8, r8)
   19b64:	200009e8 	.word	0x200009e8
   19b68:	20004588 	.word	0x20004588
   19b6c:	e000e018 	.word	0xe000e018
   19b70:	20005158 	.word	0x20005158
   19b74:	00034c3f 	.word	0x00034c3f
   19b78:	00001aa1 	.word	0x00001aa1
   19b7c:	f0f0f0f0 	.word	0xf0f0f0f0
   19b80:	00018aed 	.word	0x00018aed
   19b84:	0000055c 	.word	0x0000055c
   19b88:	f1f1f1f1 	.word	0xf1f1f1f1
   19b8c:	00000564 	.word	0x00000564
   19b90:	f2f2f2f2 	.word	0xf2f2f2f2
   19b94:	000006bc 	.word	0x000006bc
   19b98:	00037e58 	.word	0x00037e58
   19b9c:	00019efd 	.word	0x00019efd
   19ba0:	0000070c 	.word	0x0000070c
   19ba4:	f3f3f3f3 	.word	0xf3f3f3f3
   19ba8:	00000bc4 	.word	0x00000bc4
   19bac:	00000bc5 	.word	0x00000bc5
   19bb0:	00000bc6 	.word	0x00000bc6
   19bb4:	00000bc7 	.word	0x00000bc7
   19bb8:	00000bc8 	.word	0x00000bc8
   19bbc:	00000bc9 	.word	0x00000bc9
   19bc0:	00000bca 	.word	0x00000bca
   19bc4:	00000bcb 	.word	0x00000bcb
   19bc8:	00000bcc 	.word	0x00000bcc
   19bcc:	00000bcd 	.word	0x00000bcd
   19bd0:	00000bce 	.word	0x00000bce
   19bd4:	00000bcf 	.word	0x00000bcf
   19bd8:	00018c8d 	.word	0x00018c8d
   19bdc:	20000948 	.word	0x20000948
   19be0:	000006b4 	.word	0x000006b4
   19be4:	00018ef5 	.word	0x00018ef5

00019be8 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   19be8:	b580      	push	{r7, lr}
   19bea:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   19bec:	4b10      	ldr	r3, [pc, #64]	; (19c30 <prvTraceNextFreeEventBufferSlot+0x48>)
   19bee:	681b      	ldr	r3, [r3, #0]
   19bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19bf2:	2b00      	cmp	r3, #0
   19bf4:	d101      	bne.n	19bfa <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   19bf6:	2300      	movs	r3, #0
   19bf8:	e017      	b.n	19c2a <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   19bfa:	4b0d      	ldr	r3, [pc, #52]	; (19c30 <prvTraceNextFreeEventBufferSlot+0x48>)
   19bfc:	681b      	ldr	r3, [r3, #0]
   19bfe:	69da      	ldr	r2, [r3, #28]
   19c00:	232c      	movs	r3, #44	; 0x2c
   19c02:	33ff      	adds	r3, #255	; 0xff
   19c04:	429a      	cmp	r2, r3
   19c06:	d905      	bls.n	19c14 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   19c08:	4b0a      	ldr	r3, [pc, #40]	; (19c34 <prvTraceNextFreeEventBufferSlot+0x4c>)
   19c0a:	0018      	movs	r0, r3
   19c0c:	4b0a      	ldr	r3, [pc, #40]	; (19c38 <prvTraceNextFreeEventBufferSlot+0x50>)
   19c0e:	4798      	blx	r3
		return NULL;
   19c10:	2300      	movs	r3, #0
   19c12:	e00a      	b.n	19c2a <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   19c14:	4b06      	ldr	r3, [pc, #24]	; (19c30 <prvTraceNextFreeEventBufferSlot+0x48>)
   19c16:	681a      	ldr	r2, [r3, #0]
   19c18:	4b05      	ldr	r3, [pc, #20]	; (19c30 <prvTraceNextFreeEventBufferSlot+0x48>)
   19c1a:	681b      	ldr	r3, [r3, #0]
   19c1c:	69db      	ldr	r3, [r3, #28]
   19c1e:	009b      	lsls	r3, r3, #2
   19c20:	21e2      	movs	r1, #226	; 0xe2
   19c22:	00c9      	lsls	r1, r1, #3
   19c24:	468c      	mov	ip, r1
   19c26:	4463      	add	r3, ip
   19c28:	18d3      	adds	r3, r2, r3
}
   19c2a:	0018      	movs	r0, r3
   19c2c:	46bd      	mov	sp, r7
   19c2e:	bd80      	pop	{r7, pc}
   19c30:	200009e8 	.word	0x200009e8
   19c34:	00037e6c 	.word	0x00037e6c
   19c38:	0001a031 	.word	0x0001a031

00019c3c <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   19c3c:	b580      	push	{r7, lr}
   19c3e:	b082      	sub	sp, #8
   19c40:	af00      	add	r7, sp, #0
   19c42:	0002      	movs	r2, r0
   19c44:	1dfb      	adds	r3, r7, #7
   19c46:	701a      	strb	r2, [r3, #0]
   19c48:	1dbb      	adds	r3, r7, #6
   19c4a:	1c0a      	adds	r2, r1, #0
   19c4c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19c4e:	1dbb      	adds	r3, r7, #6
   19c50:	781b      	ldrb	r3, [r3, #0]
   19c52:	2b08      	cmp	r3, #8
   19c54:	d905      	bls.n	19c62 <uiIndexOfObject+0x26>
   19c56:	4b2a      	ldr	r3, [pc, #168]	; (19d00 <uiIndexOfObject+0xc4>)
   19c58:	0018      	movs	r0, r3
   19c5a:	4b2a      	ldr	r3, [pc, #168]	; (19d04 <uiIndexOfObject+0xc8>)
   19c5c:	4798      	blx	r3
   19c5e:	2300      	movs	r3, #0
   19c60:	e049      	b.n	19cf6 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   19c62:	1dfb      	adds	r3, r7, #7
   19c64:	781b      	ldrb	r3, [r3, #0]
   19c66:	2b00      	cmp	r3, #0
   19c68:	d00b      	beq.n	19c82 <uiIndexOfObject+0x46>
   19c6a:	4b27      	ldr	r3, [pc, #156]	; (19d08 <uiIndexOfObject+0xcc>)
   19c6c:	681a      	ldr	r2, [r3, #0]
   19c6e:	1dbb      	adds	r3, r7, #6
   19c70:	781b      	ldrb	r3, [r3, #0]
   19c72:	2164      	movs	r1, #100	; 0x64
   19c74:	18d3      	adds	r3, r2, r3
   19c76:	185b      	adds	r3, r3, r1
   19c78:	781b      	ldrb	r3, [r3, #0]
   19c7a:	1dfa      	adds	r2, r7, #7
   19c7c:	7812      	ldrb	r2, [r2, #0]
   19c7e:	429a      	cmp	r2, r3
   19c80:	d905      	bls.n	19c8e <uiIndexOfObject+0x52>
   19c82:	4b22      	ldr	r3, [pc, #136]	; (19d0c <uiIndexOfObject+0xd0>)
   19c84:	0018      	movs	r0, r3
   19c86:	4b1f      	ldr	r3, [pc, #124]	; (19d04 <uiIndexOfObject+0xc8>)
   19c88:	4798      	blx	r3
   19c8a:	2300      	movs	r3, #0
   19c8c:	e033      	b.n	19cf6 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19c8e:	1dbb      	adds	r3, r7, #6
   19c90:	781b      	ldrb	r3, [r3, #0]
   19c92:	2b08      	cmp	r3, #8
   19c94:	d82a      	bhi.n	19cec <uiIndexOfObject+0xb0>
   19c96:	1dfb      	adds	r3, r7, #7
   19c98:	781b      	ldrb	r3, [r3, #0]
   19c9a:	2b00      	cmp	r3, #0
   19c9c:	d026      	beq.n	19cec <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   19c9e:	4b1a      	ldr	r3, [pc, #104]	; (19d08 <uiIndexOfObject+0xcc>)
   19ca0:	681a      	ldr	r2, [r3, #0]
   19ca2:	1dbb      	adds	r3, r7, #6
   19ca4:	781b      	ldrb	r3, [r3, #0]
   19ca6:	2164      	movs	r1, #100	; 0x64
   19ca8:	18d3      	adds	r3, r2, r3
   19caa:	185b      	adds	r3, r3, r1
   19cac:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   19cae:	1dfa      	adds	r2, r7, #7
   19cb0:	7812      	ldrb	r2, [r2, #0]
   19cb2:	429a      	cmp	r2, r3
   19cb4:	d81a      	bhi.n	19cec <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19cb6:	4b14      	ldr	r3, [pc, #80]	; (19d08 <uiIndexOfObject+0xcc>)
   19cb8:	681a      	ldr	r2, [r3, #0]
   19cba:	1dbb      	adds	r3, r7, #6
   19cbc:	781b      	ldrb	r3, [r3, #0]
   19cbe:	3340      	adds	r3, #64	; 0x40
   19cc0:	005b      	lsls	r3, r3, #1
   19cc2:	18d3      	adds	r3, r2, r3
   19cc4:	3308      	adds	r3, #8
   19cc6:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19cc8:	4b0f      	ldr	r3, [pc, #60]	; (19d08 <uiIndexOfObject+0xcc>)
   19cca:	6819      	ldr	r1, [r3, #0]
   19ccc:	1dbb      	adds	r3, r7, #6
   19cce:	781b      	ldrb	r3, [r3, #0]
   19cd0:	207c      	movs	r0, #124	; 0x7c
   19cd2:	18cb      	adds	r3, r1, r3
   19cd4:	181b      	adds	r3, r3, r0
   19cd6:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19cd8:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   19cda:	1df9      	adds	r1, r7, #7
   19cdc:	7809      	ldrb	r1, [r1, #0]
   19cde:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   19ce0:	b289      	uxth	r1, r1
   19ce2:	434b      	muls	r3, r1
   19ce4:	b29b      	uxth	r3, r3
   19ce6:	18d3      	adds	r3, r2, r3
   19ce8:	b29b      	uxth	r3, r3
   19cea:	e004      	b.n	19cf6 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   19cec:	4b08      	ldr	r3, [pc, #32]	; (19d10 <uiIndexOfObject+0xd4>)
   19cee:	0018      	movs	r0, r3
   19cf0:	4b04      	ldr	r3, [pc, #16]	; (19d04 <uiIndexOfObject+0xc8>)
   19cf2:	4798      	blx	r3
	return 0;
   19cf4:	2300      	movs	r3, #0
}
   19cf6:	0018      	movs	r0, r3
   19cf8:	46bd      	mov	sp, r7
   19cfa:	b002      	add	sp, #8
   19cfc:	bd80      	pop	{r7, pc}
   19cfe:	46c0      	nop			; (mov r8, r8)
   19d00:	00037e94 	.word	0x00037e94
   19d04:	0001a031 	.word	0x0001a031
   19d08:	200009e8 	.word	0x200009e8
   19d0c:	00037ed4 	.word	0x00037ed4
   19d10:	00037f14 	.word	0x00037f14

00019d14 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   19d14:	b580      	push	{r7, lr}
   19d16:	b088      	sub	sp, #32
   19d18:	af00      	add	r7, sp, #0
   19d1a:	0002      	movs	r2, r0
   19d1c:	1dfb      	adds	r3, r7, #7
   19d1e:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   19d20:	4b5a      	ldr	r3, [pc, #360]	; (19e8c <prvTraceGetObjectHandle+0x178>)
   19d22:	681b      	ldr	r3, [r3, #0]
   19d24:	2b00      	cmp	r3, #0
   19d26:	d105      	bne.n	19d34 <prvTraceGetObjectHandle+0x20>
   19d28:	4b59      	ldr	r3, [pc, #356]	; (19e90 <prvTraceGetObjectHandle+0x17c>)
   19d2a:	0018      	movs	r0, r3
   19d2c:	4b59      	ldr	r3, [pc, #356]	; (19e94 <prvTraceGetObjectHandle+0x180>)
   19d2e:	4798      	blx	r3
   19d30:	2300      	movs	r3, #0
   19d32:	e0a7      	b.n	19e84 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   19d34:	1dfb      	adds	r3, r7, #7
   19d36:	781b      	ldrb	r3, [r3, #0]
   19d38:	2b08      	cmp	r3, #8
   19d3a:	d905      	bls.n	19d48 <prvTraceGetObjectHandle+0x34>
   19d3c:	4b56      	ldr	r3, [pc, #344]	; (19e98 <prvTraceGetObjectHandle+0x184>)
   19d3e:	0018      	movs	r0, r3
   19d40:	4b54      	ldr	r3, [pc, #336]	; (19e94 <prvTraceGetObjectHandle+0x180>)
   19d42:	4798      	blx	r3
   19d44:	2300      	movs	r3, #0
   19d46:	e09d      	b.n	19e84 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19d48:	f3ef 8310 	mrs	r3, PRIMASK
   19d4c:	60fb      	str	r3, [r7, #12]
  return(result);
   19d4e:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   19d50:	61bb      	str	r3, [r7, #24]
   19d52:	2301      	movs	r3, #1
   19d54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19d56:	693b      	ldr	r3, [r7, #16]
   19d58:	f383 8810 	msr	PRIMASK, r3
   19d5c:	4b4f      	ldr	r3, [pc, #316]	; (19e9c <prvTraceGetObjectHandle+0x188>)
   19d5e:	681b      	ldr	r3, [r3, #0]
   19d60:	1c5a      	adds	r2, r3, #1
   19d62:	4b4e      	ldr	r3, [pc, #312]	; (19e9c <prvTraceGetObjectHandle+0x188>)
   19d64:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   19d66:	1dfb      	adds	r3, r7, #7
   19d68:	781a      	ldrb	r2, [r3, #0]
   19d6a:	4b4d      	ldr	r3, [pc, #308]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19d6c:	0052      	lsls	r2, r2, #1
   19d6e:	5ad3      	ldrh	r3, [r2, r3]
   19d70:	001a      	movs	r2, r3
   19d72:	4b4c      	ldr	r3, [pc, #304]	; (19ea4 <prvTraceGetObjectHandle+0x190>)
   19d74:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   19d76:	4b4b      	ldr	r3, [pc, #300]	; (19ea4 <prvTraceGetObjectHandle+0x190>)
   19d78:	681b      	ldr	r3, [r3, #0]
   19d7a:	4a49      	ldr	r2, [pc, #292]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19d7c:	2148      	movs	r1, #72	; 0x48
   19d7e:	18d3      	adds	r3, r2, r3
   19d80:	185b      	adds	r3, r3, r1
   19d82:	781b      	ldrb	r3, [r3, #0]
   19d84:	2b00      	cmp	r3, #0
   19d86:	d117      	bne.n	19db8 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   19d88:	4b46      	ldr	r3, [pc, #280]	; (19ea4 <prvTraceGetObjectHandle+0x190>)
   19d8a:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19d8c:	4b45      	ldr	r3, [pc, #276]	; (19ea4 <prvTraceGetObjectHandle+0x190>)
   19d8e:	681b      	ldr	r3, [r3, #0]
   19d90:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   19d92:	1dfb      	adds	r3, r7, #7
   19d94:	781b      	ldrb	r3, [r3, #0]
   19d96:	4842      	ldr	r0, [pc, #264]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19d98:	3308      	adds	r3, #8
   19d9a:	005b      	lsls	r3, r3, #1
   19d9c:	18c3      	adds	r3, r0, r3
   19d9e:	3302      	adds	r3, #2
   19da0:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   19da2:	b2db      	uxtb	r3, r3
   19da4:	1acb      	subs	r3, r1, r3
   19da6:	b2db      	uxtb	r3, r3
   19da8:	3301      	adds	r3, #1
   19daa:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   19dac:	4b3c      	ldr	r3, [pc, #240]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19dae:	2148      	movs	r1, #72	; 0x48
   19db0:	189b      	adds	r3, r3, r2
   19db2:	185b      	adds	r3, r3, r1
   19db4:	1c02      	adds	r2, r0, #0
   19db6:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   19db8:	4b3a      	ldr	r3, [pc, #232]	; (19ea4 <prvTraceGetObjectHandle+0x190>)
   19dba:	681a      	ldr	r2, [r3, #0]
   19dbc:	231f      	movs	r3, #31
   19dbe:	18fb      	adds	r3, r7, r3
   19dc0:	4937      	ldr	r1, [pc, #220]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19dc2:	2048      	movs	r0, #72	; 0x48
   19dc4:	188a      	adds	r2, r1, r2
   19dc6:	1812      	adds	r2, r2, r0
   19dc8:	7812      	ldrb	r2, [r2, #0]
   19dca:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19dcc:	1dfb      	adds	r3, r7, #7
   19dce:	781a      	ldrb	r2, [r3, #0]
   19dd0:	4b33      	ldr	r3, [pc, #204]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19dd2:	0052      	lsls	r2, r2, #1
   19dd4:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   19dd6:	1dfb      	adds	r3, r7, #7
   19dd8:	781b      	ldrb	r3, [r3, #0]
   19dda:	4931      	ldr	r1, [pc, #196]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19ddc:	3310      	adds	r3, #16
   19dde:	005b      	lsls	r3, r3, #1
   19de0:	18cb      	adds	r3, r1, r3
   19de2:	3304      	adds	r3, #4
   19de4:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   19de6:	429a      	cmp	r2, r3
   19de8:	d90d      	bls.n	19e06 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19dea:	1dfb      	adds	r3, r7, #7
   19dec:	781b      	ldrb	r3, [r3, #0]
   19dee:	0018      	movs	r0, r3
   19df0:	4b2d      	ldr	r3, [pc, #180]	; (19ea8 <prvTraceGetObjectHandle+0x194>)
   19df2:	4798      	blx	r3
   19df4:	0003      	movs	r3, r0
   19df6:	0018      	movs	r0, r3
   19df8:	4b26      	ldr	r3, [pc, #152]	; (19e94 <prvTraceGetObjectHandle+0x180>)
   19dfa:	4798      	blx	r3
		handle = 0;
   19dfc:	231f      	movs	r3, #31
   19dfe:	18fb      	adds	r3, r7, r3
   19e00:	2200      	movs	r2, #0
   19e02:	701a      	strb	r2, [r3, #0]
   19e04:	e031      	b.n	19e6a <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   19e06:	1dfb      	adds	r3, r7, #7
   19e08:	781b      	ldrb	r3, [r3, #0]
   19e0a:	4a25      	ldr	r2, [pc, #148]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19e0c:	0059      	lsls	r1, r3, #1
   19e0e:	5a8a      	ldrh	r2, [r1, r2]
   19e10:	3201      	adds	r2, #1
   19e12:	b291      	uxth	r1, r2
   19e14:	4a22      	ldr	r2, [pc, #136]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19e16:	005b      	lsls	r3, r3, #1
   19e18:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19e1a:	1dfb      	adds	r3, r7, #7
   19e1c:	781a      	ldrb	r2, [r3, #0]
   19e1e:	4b20      	ldr	r3, [pc, #128]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19e20:	0052      	lsls	r2, r2, #1
   19e22:	5ad3      	ldrh	r3, [r2, r3]
   19e24:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   19e26:	1dfb      	adds	r3, r7, #7
   19e28:	781b      	ldrb	r3, [r3, #0]
   19e2a:	4a1d      	ldr	r2, [pc, #116]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19e2c:	3308      	adds	r3, #8
   19e2e:	005b      	lsls	r3, r3, #1
   19e30:	18d3      	adds	r3, r2, r3
   19e32:	3302      	adds	r3, #2
   19e34:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   19e36:	1acb      	subs	r3, r1, r3
   19e38:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   19e3a:	1dfb      	adds	r3, r7, #7
   19e3c:	781b      	ldrb	r3, [r3, #0]
   19e3e:	4a18      	ldr	r2, [pc, #96]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19e40:	3318      	adds	r3, #24
   19e42:	005b      	lsls	r3, r3, #1
   19e44:	18d3      	adds	r3, r2, r3
   19e46:	3306      	adds	r3, #6
   19e48:	881b      	ldrh	r3, [r3, #0]
   19e4a:	001a      	movs	r2, r3
		if (hndCount >
   19e4c:	697b      	ldr	r3, [r7, #20]
   19e4e:	429a      	cmp	r2, r3
   19e50:	da0b      	bge.n	19e6a <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19e52:	1dfb      	adds	r3, r7, #7
   19e54:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   19e56:	697a      	ldr	r2, [r7, #20]
   19e58:	b2d2      	uxtb	r2, r2
   19e5a:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   19e5c:	4a10      	ldr	r2, [pc, #64]	; (19ea0 <prvTraceGetObjectHandle+0x18c>)
   19e5e:	3318      	adds	r3, #24
   19e60:	005b      	lsls	r3, r3, #1
   19e62:	18d3      	adds	r3, r2, r3
   19e64:	3306      	adds	r3, #6
   19e66:	1c0a      	adds	r2, r1, #0
   19e68:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   19e6a:	4b0c      	ldr	r3, [pc, #48]	; (19e9c <prvTraceGetObjectHandle+0x188>)
   19e6c:	681b      	ldr	r3, [r3, #0]
   19e6e:	1e5a      	subs	r2, r3, #1
   19e70:	4b0a      	ldr	r3, [pc, #40]	; (19e9c <prvTraceGetObjectHandle+0x188>)
   19e72:	601a      	str	r2, [r3, #0]
   19e74:	69bb      	ldr	r3, [r7, #24]
   19e76:	60bb      	str	r3, [r7, #8]
   19e78:	68bb      	ldr	r3, [r7, #8]
   19e7a:	f383 8810 	msr	PRIMASK, r3

	return handle;
   19e7e:	231f      	movs	r3, #31
   19e80:	18fb      	adds	r3, r7, r3
   19e82:	781b      	ldrb	r3, [r3, #0]
}
   19e84:	0018      	movs	r0, r3
   19e86:	46bd      	mov	sp, r7
   19e88:	b008      	add	sp, #32
   19e8a:	bd80      	pop	{r7, pc}
   19e8c:	200009e8 	.word	0x200009e8
   19e90:	00037374 	.word	0x00037374
   19e94:	0001a031 	.word	0x0001a031
   19e98:	00037f54 	.word	0x00037f54
   19e9c:	20000940 	.word	0x20000940
   19ea0:	20000958 	.word	0x20000958
   19ea4:	200009ec 	.word	0x200009ec
   19ea8:	00018d51 	.word	0x00018d51

00019eac <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   19eac:	b590      	push	{r4, r7, lr}
   19eae:	b085      	sub	sp, #20
   19eb0:	af00      	add	r7, sp, #0
   19eb2:	0002      	movs	r2, r0
   19eb4:	1dfb      	adds	r3, r7, #7
   19eb6:	701a      	strb	r2, [r3, #0]
   19eb8:	1dbb      	adds	r3, r7, #6
   19eba:	1c0a      	adds	r2, r1, #0
   19ebc:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   19ebe:	230e      	movs	r3, #14
   19ec0:	18fc      	adds	r4, r7, r3
   19ec2:	1dfb      	adds	r3, r7, #7
   19ec4:	781a      	ldrb	r2, [r3, #0]
   19ec6:	1dbb      	adds	r3, r7, #6
   19ec8:	781b      	ldrb	r3, [r3, #0]
   19eca:	0011      	movs	r1, r2
   19ecc:	0018      	movs	r0, r3
   19ece:	4b09      	ldr	r3, [pc, #36]	; (19ef4 <prvMarkObjectAsUsed+0x48>)
   19ed0:	4798      	blx	r3
   19ed2:	0003      	movs	r3, r0
   19ed4:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   19ed6:	4b08      	ldr	r3, [pc, #32]	; (19ef8 <prvMarkObjectAsUsed+0x4c>)
   19ed8:	681a      	ldr	r2, [r3, #0]
   19eda:	230e      	movs	r3, #14
   19edc:	18fb      	adds	r3, r7, r3
   19ede:	881b      	ldrh	r3, [r3, #0]
   19ee0:	219c      	movs	r1, #156	; 0x9c
   19ee2:	18d3      	adds	r3, r2, r3
   19ee4:	185b      	adds	r3, r3, r1
   19ee6:	2201      	movs	r2, #1
   19ee8:	701a      	strb	r2, [r3, #0]
}
   19eea:	46c0      	nop			; (mov r8, r8)
   19eec:	46bd      	mov	sp, r7
   19eee:	b005      	add	sp, #20
   19ef0:	bd90      	pop	{r4, r7, pc}
   19ef2:	46c0      	nop			; (mov r8, r8)
   19ef4:	00019c3d 	.word	0x00019c3d
   19ef8:	200009e8 	.word	0x200009e8

00019efc <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   19efc:	b580      	push	{r7, lr}
   19efe:	b086      	sub	sp, #24
   19f00:	af00      	add	r7, sp, #0
   19f02:	60f8      	str	r0, [r7, #12]
   19f04:	60b9      	str	r1, [r7, #8]
   19f06:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   19f08:	2300      	movs	r3, #0
   19f0a:	617b      	str	r3, [r7, #20]
   19f0c:	e010      	b.n	19f30 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   19f0e:	68fa      	ldr	r2, [r7, #12]
   19f10:	697b      	ldr	r3, [r7, #20]
   19f12:	18d3      	adds	r3, r2, r3
   19f14:	68b9      	ldr	r1, [r7, #8]
   19f16:	697a      	ldr	r2, [r7, #20]
   19f18:	188a      	adds	r2, r1, r2
   19f1a:	7812      	ldrb	r2, [r2, #0]
   19f1c:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   19f1e:	68ba      	ldr	r2, [r7, #8]
   19f20:	697b      	ldr	r3, [r7, #20]
   19f22:	18d3      	adds	r3, r2, r3
   19f24:	781b      	ldrb	r3, [r3, #0]
   19f26:	2b00      	cmp	r3, #0
   19f28:	d007      	beq.n	19f3a <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   19f2a:	697b      	ldr	r3, [r7, #20]
   19f2c:	3301      	adds	r3, #1
   19f2e:	617b      	str	r3, [r7, #20]
   19f30:	697a      	ldr	r2, [r7, #20]
   19f32:	687b      	ldr	r3, [r7, #4]
   19f34:	429a      	cmp	r2, r3
   19f36:	d3ea      	bcc.n	19f0e <prvStrncpy+0x12>
			break;
	}
}
   19f38:	e000      	b.n	19f3c <prvStrncpy+0x40>
			break;
   19f3a:	46c0      	nop			; (mov r8, r8)
}
   19f3c:	46c0      	nop			; (mov r8, r8)
   19f3e:	46bd      	mov	sp, r7
   19f40:	b006      	add	sp, #24
   19f42:	bd80      	pop	{r7, pc}

00019f44 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   19f44:	b580      	push	{r7, lr}
   19f46:	b082      	sub	sp, #8
   19f48:	af00      	add	r7, sp, #0
   19f4a:	603a      	str	r2, [r7, #0]
   19f4c:	1dfb      	adds	r3, r7, #7
   19f4e:	1c02      	adds	r2, r0, #0
   19f50:	701a      	strb	r2, [r3, #0]
   19f52:	1dbb      	adds	r3, r7, #6
   19f54:	1c0a      	adds	r2, r1, #0
   19f56:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   19f58:	683b      	ldr	r3, [r7, #0]
   19f5a:	2b00      	cmp	r3, #0
   19f5c:	d104      	bne.n	19f68 <prvTraceSetObjectName+0x24>
   19f5e:	4b2a      	ldr	r3, [pc, #168]	; (1a008 <prvTraceSetObjectName+0xc4>)
   19f60:	0018      	movs	r0, r3
   19f62:	4b2a      	ldr	r3, [pc, #168]	; (1a00c <prvTraceSetObjectName+0xc8>)
   19f64:	4798      	blx	r3
   19f66:	e04b      	b.n	1a000 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   19f68:	1dfb      	adds	r3, r7, #7
   19f6a:	781b      	ldrb	r3, [r3, #0]
   19f6c:	2b08      	cmp	r3, #8
   19f6e:	d904      	bls.n	19f7a <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   19f70:	4b27      	ldr	r3, [pc, #156]	; (1a010 <prvTraceSetObjectName+0xcc>)
   19f72:	0018      	movs	r0, r3
   19f74:	4b25      	ldr	r3, [pc, #148]	; (1a00c <prvTraceSetObjectName+0xc8>)
   19f76:	4798      	blx	r3
		return;
   19f78:	e042      	b.n	1a000 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   19f7a:	1dbb      	adds	r3, r7, #6
   19f7c:	781b      	ldrb	r3, [r3, #0]
   19f7e:	2b00      	cmp	r3, #0
   19f80:	d104      	bne.n	19f8c <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   19f82:	4b24      	ldr	r3, [pc, #144]	; (1a014 <prvTraceSetObjectName+0xd0>)
   19f84:	0018      	movs	r0, r3
   19f86:	4b21      	ldr	r3, [pc, #132]	; (1a00c <prvTraceSetObjectName+0xc8>)
   19f88:	4798      	blx	r3
		return;
   19f8a:	e039      	b.n	1a000 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   19f8c:	4b22      	ldr	r3, [pc, #136]	; (1a018 <prvTraceSetObjectName+0xd4>)
   19f8e:	681a      	ldr	r2, [r3, #0]
   19f90:	1dfb      	adds	r3, r7, #7
   19f92:	781b      	ldrb	r3, [r3, #0]
   19f94:	2164      	movs	r1, #100	; 0x64
   19f96:	18d3      	adds	r3, r2, r3
   19f98:	185b      	adds	r3, r3, r1
   19f9a:	781b      	ldrb	r3, [r3, #0]
   19f9c:	1dba      	adds	r2, r7, #6
   19f9e:	7812      	ldrb	r2, [r2, #0]
   19fa0:	429a      	cmp	r2, r3
   19fa2:	d909      	bls.n	19fb8 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   19fa4:	1dfb      	adds	r3, r7, #7
   19fa6:	781b      	ldrb	r3, [r3, #0]
   19fa8:	0018      	movs	r0, r3
   19faa:	4b1c      	ldr	r3, [pc, #112]	; (1a01c <prvTraceSetObjectName+0xd8>)
   19fac:	4798      	blx	r3
   19fae:	0003      	movs	r3, r0
   19fb0:	0018      	movs	r0, r3
   19fb2:	4b16      	ldr	r3, [pc, #88]	; (1a00c <prvTraceSetObjectName+0xc8>)
   19fb4:	4798      	blx	r3
   19fb6:	e023      	b.n	1a000 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   19fb8:	1dfb      	adds	r3, r7, #7
   19fba:	781a      	ldrb	r2, [r3, #0]
   19fbc:	1dbb      	adds	r3, r7, #6
   19fbe:	781b      	ldrb	r3, [r3, #0]
   19fc0:	0011      	movs	r1, r2
   19fc2:	0018      	movs	r0, r3
   19fc4:	4b16      	ldr	r3, [pc, #88]	; (1a020 <prvTraceSetObjectName+0xdc>)
   19fc6:	4798      	blx	r3
   19fc8:	0003      	movs	r3, r0
   19fca:	001a      	movs	r2, r3
   19fcc:	4b15      	ldr	r3, [pc, #84]	; (1a024 <prvTraceSetObjectName+0xe0>)
   19fce:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   19fd0:	4b15      	ldr	r3, [pc, #84]	; (1a028 <prvTraceSetObjectName+0xe4>)
   19fd2:	681b      	ldr	r3, [r3, #0]
   19fd4:	2b00      	cmp	r3, #0
   19fd6:	d113      	bne.n	1a000 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19fd8:	4b0f      	ldr	r3, [pc, #60]	; (1a018 <prvTraceSetObjectName+0xd4>)
   19fda:	681a      	ldr	r2, [r3, #0]
   19fdc:	4b11      	ldr	r3, [pc, #68]	; (1a024 <prvTraceSetObjectName+0xe0>)
   19fde:	881b      	ldrh	r3, [r3, #0]
   19fe0:	3398      	adds	r3, #152	; 0x98
   19fe2:	18d3      	adds	r3, r2, r3
   19fe4:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   19fe6:	4b0c      	ldr	r3, [pc, #48]	; (1a018 <prvTraceSetObjectName+0xd4>)
   19fe8:	681a      	ldr	r2, [r3, #0]
   19fea:	1dfb      	adds	r3, r7, #7
   19fec:	781b      	ldrb	r3, [r3, #0]
   19fee:	2170      	movs	r1, #112	; 0x70
   19ff0:	18d3      	adds	r3, r2, r3
   19ff2:	185b      	adds	r3, r3, r1
   19ff4:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   19ff6:	001a      	movs	r2, r3
   19ff8:	683b      	ldr	r3, [r7, #0]
   19ffa:	0019      	movs	r1, r3
   19ffc:	4b0b      	ldr	r3, [pc, #44]	; (1a02c <prvTraceSetObjectName+0xe8>)
   19ffe:	4798      	blx	r3
		}
	}
}
   1a000:	46bd      	mov	sp, r7
   1a002:	b002      	add	sp, #8
   1a004:	bd80      	pop	{r7, pc}
   1a006:	46c0      	nop			; (mov r8, r8)
   1a008:	00038058 	.word	0x00038058
   1a00c:	0001a031 	.word	0x0001a031
   1a010:	0003808c 	.word	0x0003808c
   1a014:	000380bc 	.word	0x000380bc
   1a018:	200009e8 	.word	0x200009e8
   1a01c:	00018d51 	.word	0x00018d51
   1a020:	00019c3d 	.word	0x00019c3d
   1a024:	200009f0 	.word	0x200009f0
   1a028:	20000948 	.word	0x20000948
   1a02c:	00019efd 	.word	0x00019efd

0001a030 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1a030:	b580      	push	{r7, lr}
   1a032:	b082      	sub	sp, #8
   1a034:	af00      	add	r7, sp, #0
   1a036:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1a038:	4b11      	ldr	r3, [pc, #68]	; (1a080 <prvTraceError+0x50>)
   1a03a:	681b      	ldr	r3, [r3, #0]
   1a03c:	2b00      	cmp	r3, #0
   1a03e:	d001      	beq.n	1a044 <prvTraceError+0x14>
	{
		vTraceStop();
   1a040:	4b10      	ldr	r3, [pc, #64]	; (1a084 <prvTraceError+0x54>)
   1a042:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1a044:	4b10      	ldr	r3, [pc, #64]	; (1a088 <prvTraceError+0x58>)
   1a046:	681b      	ldr	r3, [r3, #0]
   1a048:	2b00      	cmp	r3, #0
   1a04a:	d115      	bne.n	1a078 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1a04c:	4b0e      	ldr	r3, [pc, #56]	; (1a088 <prvTraceError+0x58>)
   1a04e:	687a      	ldr	r2, [r7, #4]
   1a050:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1a052:	4b0b      	ldr	r3, [pc, #44]	; (1a080 <prvTraceError+0x50>)
   1a054:	681b      	ldr	r3, [r3, #0]
   1a056:	2b00      	cmp	r3, #0
   1a058:	d00e      	beq.n	1a078 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a05a:	4b09      	ldr	r3, [pc, #36]	; (1a080 <prvTraceError+0x50>)
   1a05c:	681b      	ldr	r3, [r3, #0]
   1a05e:	4a0b      	ldr	r2, [pc, #44]	; (1a08c <prvTraceError+0x5c>)
   1a060:	1898      	adds	r0, r3, r2
   1a062:	4b09      	ldr	r3, [pc, #36]	; (1a088 <prvTraceError+0x58>)
   1a064:	681b      	ldr	r3, [r3, #0]
   1a066:	2250      	movs	r2, #80	; 0x50
   1a068:	0019      	movs	r1, r3
   1a06a:	4b09      	ldr	r3, [pc, #36]	; (1a090 <prvTraceError+0x60>)
   1a06c:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1a06e:	4b04      	ldr	r3, [pc, #16]	; (1a080 <prvTraceError+0x50>)
   1a070:	681b      	ldr	r3, [r3, #0]
   1a072:	4a08      	ldr	r2, [pc, #32]	; (1a094 <prvTraceError+0x64>)
   1a074:	2101      	movs	r1, #1
   1a076:	5099      	str	r1, [r3, r2]
		}
	}
}
   1a078:	46c0      	nop			; (mov r8, r8)
   1a07a:	46bd      	mov	sp, r7
   1a07c:	b002      	add	sp, #8
   1a07e:	bd80      	pop	{r7, pc}
   1a080:	200009e8 	.word	0x200009e8
   1a084:	00018ef5 	.word	0x00018ef5
   1a088:	20000948 	.word	0x20000948
   1a08c:	000006bc 	.word	0x000006bc
   1a090:	00019efd 	.word	0x00019efd
   1a094:	000006b4 	.word	0x000006b4

0001a098 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1a098:	b580      	push	{r7, lr}
   1a09a:	b086      	sub	sp, #24
   1a09c:	af00      	add	r7, sp, #0
   1a09e:	0002      	movs	r2, r0
   1a0a0:	1dfb      	adds	r3, r7, #7
   1a0a2:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1a0a4:	2300      	movs	r3, #0
   1a0a6:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1a0a8:	2300      	movs	r3, #0
   1a0aa:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1a0ac:	1dfb      	adds	r3, r7, #7
   1a0ae:	781b      	ldrb	r3, [r3, #0]
   1a0b0:	2b00      	cmp	r3, #0
   1a0b2:	d000      	beq.n	1a0b6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a0b4:	e089      	b.n	1a1ca <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a0b6:	4b49      	ldr	r3, [pc, #292]	; (1a1dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a0b8:	0018      	movs	r0, r3
   1a0ba:	4b49      	ldr	r3, [pc, #292]	; (1a1e0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a0bc:	4798      	blx	r3
   1a0be:	e08a      	b.n	1a1d6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1a0c0:	4b48      	ldr	r3, [pc, #288]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a0c2:	681b      	ldr	r3, [r3, #0]
   1a0c4:	69da      	ldr	r2, [r3, #28]
   1a0c6:	697b      	ldr	r3, [r7, #20]
   1a0c8:	18d3      	adds	r3, r2, r3
   1a0ca:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a0cc:	4b45      	ldr	r3, [pc, #276]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a0ce:	6819      	ldr	r1, [r3, #0]
   1a0d0:	693b      	ldr	r3, [r7, #16]
   1a0d2:	009a      	lsls	r2, r3, #2
   1a0d4:	23e2      	movs	r3, #226	; 0xe2
   1a0d6:	00db      	lsls	r3, r3, #3
   1a0d8:	188a      	adds	r2, r1, r2
   1a0da:	18d3      	adds	r3, r2, r3
   1a0dc:	781b      	ldrb	r3, [r3, #0]
   1a0de:	2b98      	cmp	r3, #152	; 0x98
   1a0e0:	d934      	bls.n	1a14c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1a0e2:	4b40      	ldr	r3, [pc, #256]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a0e4:	6819      	ldr	r1, [r3, #0]
   1a0e6:	693b      	ldr	r3, [r7, #16]
   1a0e8:	009a      	lsls	r2, r3, #2
   1a0ea:	23e2      	movs	r3, #226	; 0xe2
   1a0ec:	00db      	lsls	r3, r3, #3
   1a0ee:	188a      	adds	r2, r1, r2
   1a0f0:	18d3      	adds	r3, r2, r3
   1a0f2:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a0f4:	2ba7      	cmp	r3, #167	; 0xa7
   1a0f6:	d829      	bhi.n	1a14c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1a0f8:	4b3a      	ldr	r3, [pc, #232]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a0fa:	6819      	ldr	r1, [r3, #0]
   1a0fc:	693b      	ldr	r3, [r7, #16]
   1a0fe:	009a      	lsls	r2, r3, #2
   1a100:	23e2      	movs	r3, #226	; 0xe2
   1a102:	00db      	lsls	r3, r3, #3
   1a104:	188a      	adds	r2, r1, r2
   1a106:	18d3      	adds	r3, r2, r3
   1a108:	781a      	ldrb	r2, [r3, #0]
   1a10a:	230f      	movs	r3, #15
   1a10c:	18fb      	adds	r3, r7, r3
   1a10e:	3268      	adds	r2, #104	; 0x68
   1a110:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1a112:	230f      	movs	r3, #15
   1a114:	18fb      	adds	r3, r7, r3
   1a116:	781a      	ldrb	r2, [r3, #0]
   1a118:	693b      	ldr	r3, [r7, #16]
   1a11a:	18d2      	adds	r2, r2, r3
   1a11c:	4b31      	ldr	r3, [pc, #196]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a11e:	681b      	ldr	r3, [r3, #0]
   1a120:	699b      	ldr	r3, [r3, #24]
   1a122:	429a      	cmp	r2, r3
   1a124:	d24d      	bcs.n	1a1c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1a126:	4b2f      	ldr	r3, [pc, #188]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a128:	681a      	ldr	r2, [r3, #0]
   1a12a:	693b      	ldr	r3, [r7, #16]
   1a12c:	009b      	lsls	r3, r3, #2
   1a12e:	21e2      	movs	r1, #226	; 0xe2
   1a130:	00c9      	lsls	r1, r1, #3
   1a132:	468c      	mov	ip, r1
   1a134:	4463      	add	r3, ip
   1a136:	18d0      	adds	r0, r2, r3
   1a138:	230f      	movs	r3, #15
   1a13a:	18fb      	adds	r3, r7, r3
   1a13c:	781b      	ldrb	r3, [r3, #0]
   1a13e:	3301      	adds	r3, #1
   1a140:	009b      	lsls	r3, r3, #2
   1a142:	001a      	movs	r2, r3
   1a144:	2100      	movs	r1, #0
   1a146:	4b28      	ldr	r3, [pc, #160]	; (1a1e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a148:	4798      	blx	r3
		{
   1a14a:	e03a      	b.n	1a1c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1a14c:	4b25      	ldr	r3, [pc, #148]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a14e:	6819      	ldr	r1, [r3, #0]
   1a150:	693b      	ldr	r3, [r7, #16]
   1a152:	009a      	lsls	r2, r3, #2
   1a154:	23e2      	movs	r3, #226	; 0xe2
   1a156:	00db      	lsls	r3, r3, #3
   1a158:	188a      	adds	r2, r1, r2
   1a15a:	18d3      	adds	r3, r2, r3
   1a15c:	781b      	ldrb	r3, [r3, #0]
   1a15e:	2b01      	cmp	r3, #1
   1a160:	d130      	bne.n	1a1c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1a162:	693b      	ldr	r3, [r7, #16]
   1a164:	1c5a      	adds	r2, r3, #1
   1a166:	4b1f      	ldr	r3, [pc, #124]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a168:	681b      	ldr	r3, [r3, #0]
   1a16a:	699b      	ldr	r3, [r3, #24]
   1a16c:	429a      	cmp	r2, r3
   1a16e:	d20e      	bcs.n	1a18e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1a170:	4b1c      	ldr	r3, [pc, #112]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a172:	681a      	ldr	r2, [r3, #0]
   1a174:	693b      	ldr	r3, [r7, #16]
   1a176:	009b      	lsls	r3, r3, #2
   1a178:	21e2      	movs	r1, #226	; 0xe2
   1a17a:	00c9      	lsls	r1, r1, #3
   1a17c:	468c      	mov	ip, r1
   1a17e:	4463      	add	r3, ip
   1a180:	18d3      	adds	r3, r2, r3
   1a182:	2208      	movs	r2, #8
   1a184:	2100      	movs	r1, #0
   1a186:	0018      	movs	r0, r3
   1a188:	4b17      	ldr	r3, [pc, #92]	; (1a1e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a18a:	4798      	blx	r3
   1a18c:	e01a      	b.n	1a1c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1a18e:	4b15      	ldr	r3, [pc, #84]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a190:	681b      	ldr	r3, [r3, #0]
   1a192:	22e2      	movs	r2, #226	; 0xe2
   1a194:	00d2      	lsls	r2, r2, #3
   1a196:	4694      	mov	ip, r2
   1a198:	4463      	add	r3, ip
   1a19a:	2204      	movs	r2, #4
   1a19c:	2100      	movs	r1, #0
   1a19e:	0018      	movs	r0, r3
   1a1a0:	4b11      	ldr	r3, [pc, #68]	; (1a1e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a1a2:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a1a4:	4b0f      	ldr	r3, [pc, #60]	; (1a1e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a1a6:	681a      	ldr	r2, [r3, #0]
   1a1a8:	693b      	ldr	r3, [r7, #16]
   1a1aa:	009b      	lsls	r3, r3, #2
   1a1ac:	21e2      	movs	r1, #226	; 0xe2
   1a1ae:	00c9      	lsls	r1, r1, #3
   1a1b0:	468c      	mov	ip, r1
   1a1b2:	4463      	add	r3, ip
   1a1b4:	18d3      	adds	r3, r2, r3
   1a1b6:	2204      	movs	r2, #4
   1a1b8:	2100      	movs	r1, #0
   1a1ba:	0018      	movs	r0, r3
   1a1bc:	4b0a      	ldr	r3, [pc, #40]	; (1a1e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a1be:	4798      	blx	r3
   1a1c0:	e000      	b.n	1a1c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a1c2:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a1c4:	697b      	ldr	r3, [r7, #20]
   1a1c6:	3301      	adds	r3, #1
   1a1c8:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a1ca:	1dfb      	adds	r3, r7, #7
   1a1cc:	781a      	ldrb	r2, [r3, #0]
   1a1ce:	697b      	ldr	r3, [r7, #20]
   1a1d0:	429a      	cmp	r2, r3
   1a1d2:	d900      	bls.n	1a1d6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a1d4:	e774      	b.n	1a0c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1a1d6:	46bd      	mov	sp, r7
   1a1d8:	b006      	add	sp, #24
   1a1da:	bd80      	pop	{r7, pc}
   1a1dc:	0003811c 	.word	0x0003811c
   1a1e0:	0001a031 	.word	0x0001a031
   1a1e4:	200009e8 	.word	0x200009e8
   1a1e8:	00034c3f 	.word	0x00034c3f

0001a1ec <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1a1ec:	b580      	push	{r7, lr}
   1a1ee:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1a1f0:	4b12      	ldr	r3, [pc, #72]	; (1a23c <prvTraceUpdateCounters+0x50>)
   1a1f2:	681b      	ldr	r3, [r3, #0]
   1a1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a1f6:	2b00      	cmp	r3, #0
   1a1f8:	d01c      	beq.n	1a234 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1a1fa:	4b10      	ldr	r3, [pc, #64]	; (1a23c <prvTraceUpdateCounters+0x50>)
   1a1fc:	681b      	ldr	r3, [r3, #0]
   1a1fe:	695a      	ldr	r2, [r3, #20]
   1a200:	3201      	adds	r2, #1
   1a202:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1a204:	4b0d      	ldr	r3, [pc, #52]	; (1a23c <prvTraceUpdateCounters+0x50>)
   1a206:	681b      	ldr	r3, [r3, #0]
   1a208:	69da      	ldr	r2, [r3, #28]
   1a20a:	3201      	adds	r2, #1
   1a20c:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a20e:	4b0b      	ldr	r3, [pc, #44]	; (1a23c <prvTraceUpdateCounters+0x50>)
   1a210:	681b      	ldr	r3, [r3, #0]
   1a212:	69da      	ldr	r2, [r3, #28]
   1a214:	232c      	movs	r3, #44	; 0x2c
   1a216:	33ff      	adds	r3, #255	; 0xff
   1a218:	429a      	cmp	r2, r3
   1a21a:	d907      	bls.n	1a22c <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1a21c:	4b07      	ldr	r3, [pc, #28]	; (1a23c <prvTraceUpdateCounters+0x50>)
   1a21e:	681b      	ldr	r3, [r3, #0]
   1a220:	2201      	movs	r2, #1
   1a222:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1a224:	4b05      	ldr	r3, [pc, #20]	; (1a23c <prvTraceUpdateCounters+0x50>)
   1a226:	681b      	ldr	r3, [r3, #0]
   1a228:	2200      	movs	r2, #0
   1a22a:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1a22c:	2001      	movs	r0, #1
   1a22e:	4b04      	ldr	r3, [pc, #16]	; (1a240 <prvTraceUpdateCounters+0x54>)
   1a230:	4798      	blx	r3
   1a232:	e000      	b.n	1a236 <prvTraceUpdateCounters+0x4a>
		return;
   1a234:	46c0      	nop			; (mov r8, r8)
#endif
}
   1a236:	46bd      	mov	sp, r7
   1a238:	bd80      	pop	{r7, pc}
   1a23a:	46c0      	nop			; (mov r8, r8)
   1a23c:	200009e8 	.word	0x200009e8
   1a240:	0001a099 	.word	0x0001a099

0001a244 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1a244:	b5b0      	push	{r4, r5, r7, lr}
   1a246:	b086      	sub	sp, #24
   1a248:	af00      	add	r7, sp, #0
   1a24a:	0002      	movs	r2, r0
   1a24c:	1dbb      	adds	r3, r7, #6
   1a24e:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1a250:	2300      	movs	r3, #0
   1a252:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1a254:	2300      	movs	r3, #0
   1a256:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1a258:	2300      	movs	r3, #0
   1a25a:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1a25c:	1dbb      	adds	r3, r7, #6
   1a25e:	881b      	ldrh	r3, [r3, #0]
   1a260:	2bff      	cmp	r3, #255	; 0xff
   1a262:	d00a      	beq.n	1a27a <prvTraceGetDTS+0x36>
   1a264:	1dbb      	adds	r3, r7, #6
   1a266:	881b      	ldrh	r3, [r3, #0]
   1a268:	4a60      	ldr	r2, [pc, #384]	; (1a3ec <prvTraceGetDTS+0x1a8>)
   1a26a:	4293      	cmp	r3, r2
   1a26c:	d005      	beq.n	1a27a <prvTraceGetDTS+0x36>
   1a26e:	4b60      	ldr	r3, [pc, #384]	; (1a3f0 <prvTraceGetDTS+0x1ac>)
   1a270:	0018      	movs	r0, r3
   1a272:	4b60      	ldr	r3, [pc, #384]	; (1a3f4 <prvTraceGetDTS+0x1b0>)
   1a274:	4798      	blx	r3
   1a276:	2300      	movs	r3, #0
   1a278:	e0b3      	b.n	1a3e2 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1a27a:	4b5f      	ldr	r3, [pc, #380]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a27c:	681b      	ldr	r3, [r3, #0]
   1a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a280:	2b00      	cmp	r3, #0
   1a282:	d118      	bne.n	1a2b6 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1a284:	4b5d      	ldr	r3, [pc, #372]	; (1a3fc <prvTraceGetDTS+0x1b8>)
   1a286:	681b      	ldr	r3, [r3, #0]
   1a288:	2b00      	cmp	r3, #0
   1a28a:	d006      	beq.n	1a29a <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1a28c:	4b5a      	ldr	r3, [pc, #360]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a28e:	681b      	ldr	r3, [r3, #0]
   1a290:	4a5a      	ldr	r2, [pc, #360]	; (1a3fc <prvTraceGetDTS+0x1b8>)
   1a292:	6812      	ldr	r2, [r2, #0]
   1a294:	0892      	lsrs	r2, r2, #2
   1a296:	625a      	str	r2, [r3, #36]	; 0x24
   1a298:	e00d      	b.n	1a2b6 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1a29a:	4b59      	ldr	r3, [pc, #356]	; (1a400 <prvTraceGetDTS+0x1bc>)
   1a29c:	681a      	ldr	r2, [r3, #0]
   1a29e:	4b59      	ldr	r3, [pc, #356]	; (1a404 <prvTraceGetDTS+0x1c0>)
   1a2a0:	681b      	ldr	r3, [r3, #0]
   1a2a2:	429a      	cmp	r2, r3
   1a2a4:	d007      	beq.n	1a2b6 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1a2a6:	4b54      	ldr	r3, [pc, #336]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a2a8:	681c      	ldr	r4, [r3, #0]
   1a2aa:	2000      	movs	r0, #0
   1a2ac:	4b56      	ldr	r3, [pc, #344]	; (1a408 <prvTraceGetDTS+0x1c4>)
   1a2ae:	4798      	blx	r3
   1a2b0:	0003      	movs	r3, r0
   1a2b2:	089b      	lsrs	r3, r3, #2
   1a2b4:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1a2b6:	230c      	movs	r3, #12
   1a2b8:	18fb      	adds	r3, r7, r3
   1a2ba:	0018      	movs	r0, r3
   1a2bc:	4b53      	ldr	r3, [pc, #332]	; (1a40c <prvTraceGetDTS+0x1c8>)
   1a2be:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1a2c0:	68fa      	ldr	r2, [r7, #12]
   1a2c2:	4b53      	ldr	r3, [pc, #332]	; (1a410 <prvTraceGetDTS+0x1cc>)
   1a2c4:	681b      	ldr	r3, [r3, #0]
   1a2c6:	1ad3      	subs	r3, r2, r3
   1a2c8:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1a2ca:	68fa      	ldr	r2, [r7, #12]
   1a2cc:	4b50      	ldr	r3, [pc, #320]	; (1a410 <prvTraceGetDTS+0x1cc>)
   1a2ce:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1a2d0:	4b49      	ldr	r3, [pc, #292]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a2d2:	681b      	ldr	r3, [r3, #0]
   1a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a2d6:	2b00      	cmp	r3, #0
   1a2d8:	d044      	beq.n	1a364 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1a2da:	4b47      	ldr	r3, [pc, #284]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a2dc:	681b      	ldr	r3, [r3, #0]
   1a2de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a2e0:	693b      	ldr	r3, [r7, #16]
   1a2e2:	429a      	cmp	r2, r3
   1a2e4:	d21e      	bcs.n	1a324 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1a2e6:	4b44      	ldr	r3, [pc, #272]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a2e8:	681c      	ldr	r4, [r3, #0]
   1a2ea:	4b43      	ldr	r3, [pc, #268]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a2ec:	681b      	ldr	r3, [r3, #0]
   1a2ee:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1a2f0:	4b41      	ldr	r3, [pc, #260]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a2f2:	681b      	ldr	r3, [r3, #0]
   1a2f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a2f6:	4b47      	ldr	r3, [pc, #284]	; (1a414 <prvTraceGetDTS+0x1d0>)
   1a2f8:	0011      	movs	r1, r2
   1a2fa:	6938      	ldr	r0, [r7, #16]
   1a2fc:	4798      	blx	r3
   1a2fe:	0003      	movs	r3, r0
   1a300:	18eb      	adds	r3, r5, r3
   1a302:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1a304:	4b3c      	ldr	r3, [pc, #240]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a306:	681c      	ldr	r4, [r3, #0]
   1a308:	4b3b      	ldr	r3, [pc, #236]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a30a:	681b      	ldr	r3, [r3, #0]
   1a30c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1a30e:	4b3a      	ldr	r3, [pc, #232]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a310:	681b      	ldr	r3, [r3, #0]
   1a312:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a314:	693a      	ldr	r2, [r7, #16]
   1a316:	4b40      	ldr	r3, [pc, #256]	; (1a418 <prvTraceGetDTS+0x1d4>)
   1a318:	0010      	movs	r0, r2
   1a31a:	4798      	blx	r3
   1a31c:	000b      	movs	r3, r1
   1a31e:	18eb      	adds	r3, r5, r3
   1a320:	62a3      	str	r3, [r4, #40]	; 0x28
   1a322:	e007      	b.n	1a334 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1a324:	4b34      	ldr	r3, [pc, #208]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a326:	681b      	ldr	r3, [r3, #0]
   1a328:	4a33      	ldr	r2, [pc, #204]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a32a:	6812      	ldr	r2, [r2, #0]
   1a32c:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a32e:	693a      	ldr	r2, [r7, #16]
   1a330:	188a      	adds	r2, r1, r2
   1a332:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1a334:	4b30      	ldr	r3, [pc, #192]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a336:	681b      	ldr	r3, [r3, #0]
   1a338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a33a:	4b2f      	ldr	r3, [pc, #188]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a33c:	681b      	ldr	r3, [r3, #0]
   1a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a340:	429a      	cmp	r2, r3
   1a342:	d313      	bcc.n	1a36c <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1a344:	4b2c      	ldr	r3, [pc, #176]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a346:	681b      	ldr	r3, [r3, #0]
   1a348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a34a:	3201      	adds	r2, #1
   1a34c:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1a34e:	4b2a      	ldr	r3, [pc, #168]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a350:	681b      	ldr	r3, [r3, #0]
   1a352:	4a29      	ldr	r2, [pc, #164]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a354:	6812      	ldr	r2, [r2, #0]
   1a356:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a358:	4a27      	ldr	r2, [pc, #156]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a35a:	6812      	ldr	r2, [r2, #0]
   1a35c:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1a35e:	1a8a      	subs	r2, r1, r2
   1a360:	629a      	str	r2, [r3, #40]	; 0x28
   1a362:	e003      	b.n	1a36c <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1a364:	4b24      	ldr	r3, [pc, #144]	; (1a3f8 <prvTraceGetDTS+0x1b4>)
   1a366:	681b      	ldr	r3, [r3, #0]
   1a368:	68fa      	ldr	r2, [r7, #12]
   1a36a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1a36c:	1dbb      	adds	r3, r7, #6
   1a36e:	881a      	ldrh	r2, [r3, #0]
   1a370:	693b      	ldr	r3, [r7, #16]
   1a372:	429a      	cmp	r2, r3
   1a374:	d22f      	bcs.n	1a3d6 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1a376:	4b29      	ldr	r3, [pc, #164]	; (1a41c <prvTraceGetDTS+0x1d8>)
   1a378:	4798      	blx	r3
   1a37a:	0003      	movs	r3, r0
   1a37c:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1a37e:	697b      	ldr	r3, [r7, #20]
   1a380:	2b00      	cmp	r3, #0
   1a382:	d028      	beq.n	1a3d6 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1a384:	1dbb      	adds	r3, r7, #6
   1a386:	881b      	ldrh	r3, [r3, #0]
   1a388:	4a18      	ldr	r2, [pc, #96]	; (1a3ec <prvTraceGetDTS+0x1a8>)
   1a38a:	4293      	cmp	r3, r2
   1a38c:	d10b      	bne.n	1a3a6 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1a38e:	697b      	ldr	r3, [r7, #20]
   1a390:	22a9      	movs	r2, #169	; 0xa9
   1a392:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1a394:	693b      	ldr	r3, [r7, #16]
   1a396:	0c1b      	lsrs	r3, r3, #16
   1a398:	b29a      	uxth	r2, r3
   1a39a:	697b      	ldr	r3, [r7, #20]
   1a39c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1a39e:	697b      	ldr	r3, [r7, #20]
   1a3a0:	2200      	movs	r2, #0
   1a3a2:	705a      	strb	r2, [r3, #1]
   1a3a4:	e015      	b.n	1a3d2 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1a3a6:	1dbb      	adds	r3, r7, #6
   1a3a8:	881b      	ldrh	r3, [r3, #0]
   1a3aa:	2bff      	cmp	r3, #255	; 0xff
   1a3ac:	d10d      	bne.n	1a3ca <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1a3ae:	697b      	ldr	r3, [r7, #20]
   1a3b0:	22a8      	movs	r2, #168	; 0xa8
   1a3b2:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1a3b4:	693b      	ldr	r3, [r7, #16]
   1a3b6:	0a1b      	lsrs	r3, r3, #8
   1a3b8:	b29a      	uxth	r2, r3
   1a3ba:	697b      	ldr	r3, [r7, #20]
   1a3bc:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1a3be:	693b      	ldr	r3, [r7, #16]
   1a3c0:	0e1b      	lsrs	r3, r3, #24
   1a3c2:	b2da      	uxtb	r2, r3
   1a3c4:	697b      	ldr	r3, [r7, #20]
   1a3c6:	705a      	strb	r2, [r3, #1]
   1a3c8:	e003      	b.n	1a3d2 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1a3ca:	4b15      	ldr	r3, [pc, #84]	; (1a420 <prvTraceGetDTS+0x1dc>)
   1a3cc:	0018      	movs	r0, r3
   1a3ce:	4b09      	ldr	r3, [pc, #36]	; (1a3f4 <prvTraceGetDTS+0x1b0>)
   1a3d0:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1a3d2:	4b14      	ldr	r3, [pc, #80]	; (1a424 <prvTraceGetDTS+0x1e0>)
   1a3d4:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1a3d6:	693b      	ldr	r3, [r7, #16]
   1a3d8:	b29b      	uxth	r3, r3
   1a3da:	1dba      	adds	r2, r7, #6
   1a3dc:	8812      	ldrh	r2, [r2, #0]
   1a3de:	4013      	ands	r3, r2
   1a3e0:	b29b      	uxth	r3, r3
}
   1a3e2:	0018      	movs	r0, r3
   1a3e4:	46bd      	mov	sp, r7
   1a3e6:	b006      	add	sp, #24
   1a3e8:	bdb0      	pop	{r4, r5, r7, pc}
   1a3ea:	46c0      	nop			; (mov r8, r8)
   1a3ec:	0000ffff 	.word	0x0000ffff
   1a3f0:	00038174 	.word	0x00038174
   1a3f4:	0001a031 	.word	0x0001a031
   1a3f8:	200009e8 	.word	0x200009e8
   1a3fc:	20000944 	.word	0x20000944
   1a400:	e000e018 	.word	0xe000e018
   1a404:	20005158 	.word	0x20005158
   1a408:	0002a025 	.word	0x0002a025
   1a40c:	0001a429 	.word	0x0001a429
   1a410:	200009f4 	.word	0x200009f4
   1a414:	00032c65 	.word	0x00032c65
   1a418:	00032d71 	.word	0x00032d71
   1a41c:	00019be9 	.word	0x00019be9
   1a420:	000381b4 	.word	0x000381b4
   1a424:	0001a1ed 	.word	0x0001a1ed

0001a428 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1a428:	b580      	push	{r7, lr}
   1a42a:	b084      	sub	sp, #16
   1a42c:	af00      	add	r7, sp, #0
   1a42e:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1a430:	2300      	movs	r3, #0
   1a432:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1a434:	2300      	movs	r3, #0
   1a436:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1a438:	4b2d      	ldr	r3, [pc, #180]	; (1a4f0 <prvTracePortGetTimeStamp+0xc8>)
   1a43a:	681b      	ldr	r3, [r3, #0]
   1a43c:	2b01      	cmp	r3, #1
   1a43e:	d107      	bne.n	1a450 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1a440:	687b      	ldr	r3, [r7, #4]
   1a442:	2b00      	cmp	r3, #0
   1a444:	d04f      	beq.n	1a4e6 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1a446:	4b2b      	ldr	r3, [pc, #172]	; (1a4f4 <prvTracePortGetTimeStamp+0xcc>)
   1a448:	681a      	ldr	r2, [r3, #0]
   1a44a:	687b      	ldr	r3, [r7, #4]
   1a44c:	601a      	str	r2, [r3, #0]
		return;
   1a44e:	e04a      	b.n	1a4e6 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1a450:	4b29      	ldr	r3, [pc, #164]	; (1a4f8 <prvTracePortGetTimeStamp+0xd0>)
   1a452:	681a      	ldr	r2, [r3, #0]
   1a454:	4b29      	ldr	r3, [pc, #164]	; (1a4fc <prvTracePortGetTimeStamp+0xd4>)
   1a456:	681b      	ldr	r3, [r3, #0]
   1a458:	1ad3      	subs	r3, r2, r3
   1a45a:	3301      	adds	r3, #1
   1a45c:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1a45e:	4b28      	ldr	r3, [pc, #160]	; (1a500 <prvTracePortGetTimeStamp+0xd8>)
   1a460:	681a      	ldr	r2, [r3, #0]
   1a462:	4b28      	ldr	r3, [pc, #160]	; (1a504 <prvTracePortGetTimeStamp+0xdc>)
   1a464:	681b      	ldr	r3, [r3, #0]
   1a466:	1ad3      	subs	r3, r2, r3
   1a468:	3b01      	subs	r3, #1
   1a46a:	2b00      	cmp	r3, #0
   1a46c:	db03      	blt.n	1a476 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1a46e:	4b24      	ldr	r3, [pc, #144]	; (1a500 <prvTracePortGetTimeStamp+0xd8>)
   1a470:	681b      	ldr	r3, [r3, #0]
   1a472:	60fb      	str	r3, [r7, #12]
   1a474:	e002      	b.n	1a47c <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1a476:	4b23      	ldr	r3, [pc, #140]	; (1a504 <prvTracePortGetTimeStamp+0xdc>)
   1a478:	681b      	ldr	r3, [r3, #0]
   1a47a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1a47c:	4b20      	ldr	r3, [pc, #128]	; (1a500 <prvTracePortGetTimeStamp+0xd8>)
   1a47e:	681b      	ldr	r3, [r3, #0]
   1a480:	68fa      	ldr	r2, [r7, #12]
   1a482:	429a      	cmp	r2, r3
   1a484:	d107      	bne.n	1a496 <prvTracePortGetTimeStamp+0x6e>
   1a486:	4b20      	ldr	r3, [pc, #128]	; (1a508 <prvTracePortGetTimeStamp+0xe0>)
   1a488:	681b      	ldr	r3, [r3, #0]
   1a48a:	68ba      	ldr	r2, [r7, #8]
   1a48c:	429a      	cmp	r2, r3
   1a48e:	d202      	bcs.n	1a496 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1a490:	68fb      	ldr	r3, [r7, #12]
   1a492:	3301      	adds	r3, #1
   1a494:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1a496:	687b      	ldr	r3, [r7, #4]
   1a498:	2b00      	cmp	r3, #0
   1a49a:	d016      	beq.n	1a4ca <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1a49c:	4b16      	ldr	r3, [pc, #88]	; (1a4f8 <prvTracePortGetTimeStamp+0xd0>)
   1a49e:	681b      	ldr	r3, [r3, #0]
   1a4a0:	3301      	adds	r3, #1
   1a4a2:	089b      	lsrs	r3, r3, #2
   1a4a4:	68fa      	ldr	r2, [r7, #12]
   1a4a6:	435a      	muls	r2, r3
   1a4a8:	4b12      	ldr	r3, [pc, #72]	; (1a4f4 <prvTracePortGetTimeStamp+0xcc>)
   1a4aa:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1a4ac:	4b12      	ldr	r3, [pc, #72]	; (1a4f8 <prvTracePortGetTimeStamp+0xd0>)
   1a4ae:	681b      	ldr	r3, [r3, #0]
   1a4b0:	3301      	adds	r3, #1
   1a4b2:	2203      	movs	r2, #3
   1a4b4:	4013      	ands	r3, r2
   1a4b6:	68fa      	ldr	r2, [r7, #12]
   1a4b8:	435a      	muls	r2, r3
   1a4ba:	68bb      	ldr	r3, [r7, #8]
   1a4bc:	18d3      	adds	r3, r2, r3
   1a4be:	089a      	lsrs	r2, r3, #2
   1a4c0:	4b0c      	ldr	r3, [pc, #48]	; (1a4f4 <prvTracePortGetTimeStamp+0xcc>)
   1a4c2:	681b      	ldr	r3, [r3, #0]
   1a4c4:	18d2      	adds	r2, r2, r3
   1a4c6:	4b0b      	ldr	r3, [pc, #44]	; (1a4f4 <prvTracePortGetTimeStamp+0xcc>)
   1a4c8:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1a4ca:	4b0d      	ldr	r3, [pc, #52]	; (1a500 <prvTracePortGetTimeStamp+0xd8>)
   1a4cc:	68fa      	ldr	r2, [r7, #12]
   1a4ce:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1a4d0:	687b      	ldr	r3, [r7, #4]
   1a4d2:	2b00      	cmp	r3, #0
   1a4d4:	d003      	beq.n	1a4de <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1a4d6:	4b07      	ldr	r3, [pc, #28]	; (1a4f4 <prvTracePortGetTimeStamp+0xcc>)
   1a4d8:	681a      	ldr	r2, [r3, #0]
   1a4da:	687b      	ldr	r3, [r7, #4]
   1a4dc:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1a4de:	4b0a      	ldr	r3, [pc, #40]	; (1a508 <prvTracePortGetTimeStamp+0xe0>)
   1a4e0:	68ba      	ldr	r2, [r7, #8]
   1a4e2:	601a      	str	r2, [r3, #0]
   1a4e4:	e000      	b.n	1a4e8 <prvTracePortGetTimeStamp+0xc0>
		return;
   1a4e6:	46c0      	nop			; (mov r8, r8)
}
   1a4e8:	46bd      	mov	sp, r7
   1a4ea:	b004      	add	sp, #16
   1a4ec:	bd80      	pop	{r7, pc}
   1a4ee:	46c0      	nop			; (mov r8, r8)
   1a4f0:	20000934 	.word	0x20000934
   1a4f4:	20000938 	.word	0x20000938
   1a4f8:	e000e014 	.word	0xe000e014
   1a4fc:	e000e018 	.word	0xe000e018
   1a500:	200009f8 	.word	0x200009f8
   1a504:	20000930 	.word	0x20000930
   1a508:	200009fc 	.word	0x200009fc

0001a50c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1a50c:	b580      	push	{r7, lr}
   1a50e:	b082      	sub	sp, #8
   1a510:	af00      	add	r7, sp, #0
   1a512:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a514:	687b      	ldr	r3, [r7, #4]
   1a516:	3308      	adds	r3, #8
   1a518:	001a      	movs	r2, r3
   1a51a:	687b      	ldr	r3, [r7, #4]
   1a51c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1a51e:	687b      	ldr	r3, [r7, #4]
   1a520:	2201      	movs	r2, #1
   1a522:	4252      	negs	r2, r2
   1a524:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a526:	687b      	ldr	r3, [r7, #4]
   1a528:	3308      	adds	r3, #8
   1a52a:	001a      	movs	r2, r3
   1a52c:	687b      	ldr	r3, [r7, #4]
   1a52e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a530:	687b      	ldr	r3, [r7, #4]
   1a532:	3308      	adds	r3, #8
   1a534:	001a      	movs	r2, r3
   1a536:	687b      	ldr	r3, [r7, #4]
   1a538:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1a53a:	687b      	ldr	r3, [r7, #4]
   1a53c:	2200      	movs	r2, #0
   1a53e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1a540:	46c0      	nop			; (mov r8, r8)
   1a542:	46bd      	mov	sp, r7
   1a544:	b002      	add	sp, #8
   1a546:	bd80      	pop	{r7, pc}

0001a548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1a548:	b580      	push	{r7, lr}
   1a54a:	b082      	sub	sp, #8
   1a54c:	af00      	add	r7, sp, #0
   1a54e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1a550:	687b      	ldr	r3, [r7, #4]
   1a552:	2200      	movs	r2, #0
   1a554:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1a556:	46c0      	nop			; (mov r8, r8)
   1a558:	46bd      	mov	sp, r7
   1a55a:	b002      	add	sp, #8
   1a55c:	bd80      	pop	{r7, pc}

0001a55e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a55e:	b580      	push	{r7, lr}
   1a560:	b084      	sub	sp, #16
   1a562:	af00      	add	r7, sp, #0
   1a564:	6078      	str	r0, [r7, #4]
   1a566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1a568:	687b      	ldr	r3, [r7, #4]
   1a56a:	685b      	ldr	r3, [r3, #4]
   1a56c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1a56e:	683b      	ldr	r3, [r7, #0]
   1a570:	68fa      	ldr	r2, [r7, #12]
   1a572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1a574:	68fb      	ldr	r3, [r7, #12]
   1a576:	689a      	ldr	r2, [r3, #8]
   1a578:	683b      	ldr	r3, [r7, #0]
   1a57a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1a57c:	68fb      	ldr	r3, [r7, #12]
   1a57e:	689b      	ldr	r3, [r3, #8]
   1a580:	683a      	ldr	r2, [r7, #0]
   1a582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1a584:	68fb      	ldr	r3, [r7, #12]
   1a586:	683a      	ldr	r2, [r7, #0]
   1a588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a58a:	683b      	ldr	r3, [r7, #0]
   1a58c:	687a      	ldr	r2, [r7, #4]
   1a58e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a590:	687b      	ldr	r3, [r7, #4]
   1a592:	681b      	ldr	r3, [r3, #0]
   1a594:	1c5a      	adds	r2, r3, #1
   1a596:	687b      	ldr	r3, [r7, #4]
   1a598:	601a      	str	r2, [r3, #0]
}
   1a59a:	46c0      	nop			; (mov r8, r8)
   1a59c:	46bd      	mov	sp, r7
   1a59e:	b004      	add	sp, #16
   1a5a0:	bd80      	pop	{r7, pc}

0001a5a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1a5a2:	b580      	push	{r7, lr}
   1a5a4:	b084      	sub	sp, #16
   1a5a6:	af00      	add	r7, sp, #0
   1a5a8:	6078      	str	r0, [r7, #4]
   1a5aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1a5ac:	683b      	ldr	r3, [r7, #0]
   1a5ae:	681b      	ldr	r3, [r3, #0]
   1a5b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1a5b2:	68bb      	ldr	r3, [r7, #8]
   1a5b4:	3301      	adds	r3, #1
   1a5b6:	d103      	bne.n	1a5c0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1a5b8:	687b      	ldr	r3, [r7, #4]
   1a5ba:	691b      	ldr	r3, [r3, #16]
   1a5bc:	60fb      	str	r3, [r7, #12]
   1a5be:	e00c      	b.n	1a5da <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1a5c0:	687b      	ldr	r3, [r7, #4]
   1a5c2:	3308      	adds	r3, #8
   1a5c4:	60fb      	str	r3, [r7, #12]
   1a5c6:	e002      	b.n	1a5ce <vListInsert+0x2c>
   1a5c8:	68fb      	ldr	r3, [r7, #12]
   1a5ca:	685b      	ldr	r3, [r3, #4]
   1a5cc:	60fb      	str	r3, [r7, #12]
   1a5ce:	68fb      	ldr	r3, [r7, #12]
   1a5d0:	685b      	ldr	r3, [r3, #4]
   1a5d2:	681a      	ldr	r2, [r3, #0]
   1a5d4:	68bb      	ldr	r3, [r7, #8]
   1a5d6:	429a      	cmp	r2, r3
   1a5d8:	d9f6      	bls.n	1a5c8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1a5da:	68fb      	ldr	r3, [r7, #12]
   1a5dc:	685a      	ldr	r2, [r3, #4]
   1a5de:	683b      	ldr	r3, [r7, #0]
   1a5e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1a5e2:	683b      	ldr	r3, [r7, #0]
   1a5e4:	685b      	ldr	r3, [r3, #4]
   1a5e6:	683a      	ldr	r2, [r7, #0]
   1a5e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1a5ea:	683b      	ldr	r3, [r7, #0]
   1a5ec:	68fa      	ldr	r2, [r7, #12]
   1a5ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1a5f0:	68fb      	ldr	r3, [r7, #12]
   1a5f2:	683a      	ldr	r2, [r7, #0]
   1a5f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1a5f6:	683b      	ldr	r3, [r7, #0]
   1a5f8:	687a      	ldr	r2, [r7, #4]
   1a5fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1a5fc:	687b      	ldr	r3, [r7, #4]
   1a5fe:	681b      	ldr	r3, [r3, #0]
   1a600:	1c5a      	adds	r2, r3, #1
   1a602:	687b      	ldr	r3, [r7, #4]
   1a604:	601a      	str	r2, [r3, #0]
}
   1a606:	46c0      	nop			; (mov r8, r8)
   1a608:	46bd      	mov	sp, r7
   1a60a:	b004      	add	sp, #16
   1a60c:	bd80      	pop	{r7, pc}

0001a60e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1a60e:	b580      	push	{r7, lr}
   1a610:	b084      	sub	sp, #16
   1a612:	af00      	add	r7, sp, #0
   1a614:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1a616:	687b      	ldr	r3, [r7, #4]
   1a618:	691b      	ldr	r3, [r3, #16]
   1a61a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1a61c:	687b      	ldr	r3, [r7, #4]
   1a61e:	685b      	ldr	r3, [r3, #4]
   1a620:	687a      	ldr	r2, [r7, #4]
   1a622:	6892      	ldr	r2, [r2, #8]
   1a624:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1a626:	687b      	ldr	r3, [r7, #4]
   1a628:	689b      	ldr	r3, [r3, #8]
   1a62a:	687a      	ldr	r2, [r7, #4]
   1a62c:	6852      	ldr	r2, [r2, #4]
   1a62e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1a630:	68fb      	ldr	r3, [r7, #12]
   1a632:	685a      	ldr	r2, [r3, #4]
   1a634:	687b      	ldr	r3, [r7, #4]
   1a636:	429a      	cmp	r2, r3
   1a638:	d103      	bne.n	1a642 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1a63a:	687b      	ldr	r3, [r7, #4]
   1a63c:	689a      	ldr	r2, [r3, #8]
   1a63e:	68fb      	ldr	r3, [r7, #12]
   1a640:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1a642:	687b      	ldr	r3, [r7, #4]
   1a644:	2200      	movs	r2, #0
   1a646:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1a648:	68fb      	ldr	r3, [r7, #12]
   1a64a:	681b      	ldr	r3, [r3, #0]
   1a64c:	1e5a      	subs	r2, r3, #1
   1a64e:	68fb      	ldr	r3, [r7, #12]
   1a650:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1a652:	68fb      	ldr	r3, [r7, #12]
   1a654:	681b      	ldr	r3, [r3, #0]
}
   1a656:	0018      	movs	r0, r3
   1a658:	46bd      	mov	sp, r7
   1a65a:	b004      	add	sp, #16
   1a65c:	bd80      	pop	{r7, pc}
	...

0001a660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1a660:	b580      	push	{r7, lr}
   1a662:	b084      	sub	sp, #16
   1a664:	af00      	add	r7, sp, #0
   1a666:	60f8      	str	r0, [r7, #12]
   1a668:	60b9      	str	r1, [r7, #8]
   1a66a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1a66c:	68fb      	ldr	r3, [r7, #12]
   1a66e:	3b04      	subs	r3, #4
   1a670:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1a672:	68fb      	ldr	r3, [r7, #12]
   1a674:	2280      	movs	r2, #128	; 0x80
   1a676:	0452      	lsls	r2, r2, #17
   1a678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a67a:	68fb      	ldr	r3, [r7, #12]
   1a67c:	3b04      	subs	r3, #4
   1a67e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1a680:	68ba      	ldr	r2, [r7, #8]
   1a682:	68fb      	ldr	r3, [r7, #12]
   1a684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1a686:	68fb      	ldr	r3, [r7, #12]
   1a688:	3b04      	subs	r3, #4
   1a68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1a68c:	4a08      	ldr	r2, [pc, #32]	; (1a6b0 <pxPortInitialiseStack+0x50>)
   1a68e:	68fb      	ldr	r3, [r7, #12]
   1a690:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1a692:	68fb      	ldr	r3, [r7, #12]
   1a694:	3b14      	subs	r3, #20
   1a696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1a698:	687a      	ldr	r2, [r7, #4]
   1a69a:	68fb      	ldr	r3, [r7, #12]
   1a69c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1a69e:	68fb      	ldr	r3, [r7, #12]
   1a6a0:	3b20      	subs	r3, #32
   1a6a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1a6a4:	68fb      	ldr	r3, [r7, #12]
}
   1a6a6:	0018      	movs	r0, r3
   1a6a8:	46bd      	mov	sp, r7
   1a6aa:	b004      	add	sp, #16
   1a6ac:	bd80      	pop	{r7, pc}
   1a6ae:	46c0      	nop			; (mov r8, r8)
   1a6b0:	0001a6b5 	.word	0x0001a6b5

0001a6b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1a6b4:	b580      	push	{r7, lr}
   1a6b6:	b082      	sub	sp, #8
   1a6b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1a6ba:	2300      	movs	r3, #0
   1a6bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1a6be:	4b07      	ldr	r3, [pc, #28]	; (1a6dc <prvTaskExitError+0x28>)
   1a6c0:	681b      	ldr	r3, [r3, #0]
   1a6c2:	3301      	adds	r3, #1
   1a6c4:	d001      	beq.n	1a6ca <prvTaskExitError+0x16>
   1a6c6:	b672      	cpsid	i
   1a6c8:	e7fe      	b.n	1a6c8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1a6ca:	b672      	cpsid	i
	while( ulDummy == 0 )
   1a6cc:	46c0      	nop			; (mov r8, r8)
   1a6ce:	687b      	ldr	r3, [r7, #4]
   1a6d0:	2b00      	cmp	r3, #0
   1a6d2:	d0fc      	beq.n	1a6ce <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1a6d4:	46c0      	nop			; (mov r8, r8)
   1a6d6:	46bd      	mov	sp, r7
   1a6d8:	b002      	add	sp, #8
   1a6da:	bd80      	pop	{r7, pc}
   1a6dc:	200000bc 	.word	0x200000bc

0001a6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1a6e0:	b580      	push	{r7, lr}
   1a6e2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1a6e4:	46c0      	nop			; (mov r8, r8)
   1a6e6:	46bd      	mov	sp, r7
   1a6e8:	bd80      	pop	{r7, pc}
   1a6ea:	0000      	movs	r0, r0
   1a6ec:	0000      	movs	r0, r0
	...

0001a6f0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1a6f0:	4a0b      	ldr	r2, [pc, #44]	; (1a720 <pxCurrentTCBConst2>)
   1a6f2:	6813      	ldr	r3, [r2, #0]
   1a6f4:	6818      	ldr	r0, [r3, #0]
   1a6f6:	3020      	adds	r0, #32
   1a6f8:	f380 8809 	msr	PSP, r0
   1a6fc:	2002      	movs	r0, #2
   1a6fe:	f380 8814 	msr	CONTROL, r0
   1a702:	f3bf 8f6f 	isb	sy
   1a706:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1a708:	46ae      	mov	lr, r5
   1a70a:	bc08      	pop	{r3}
   1a70c:	bc04      	pop	{r2}
   1a70e:	b662      	cpsie	i
   1a710:	4718      	bx	r3
   1a712:	46c0      	nop			; (mov r8, r8)
   1a714:	46c0      	nop			; (mov r8, r8)
   1a716:	46c0      	nop			; (mov r8, r8)
   1a718:	46c0      	nop			; (mov r8, r8)
   1a71a:	46c0      	nop			; (mov r8, r8)
   1a71c:	46c0      	nop			; (mov r8, r8)
   1a71e:	46c0      	nop			; (mov r8, r8)

0001a720 <pxCurrentTCBConst2>:
   1a720:	20003cd0 	.word	0x20003cd0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1a724:	46c0      	nop			; (mov r8, r8)
   1a726:	46c0      	nop			; (mov r8, r8)

0001a728 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1a728:	b580      	push	{r7, lr}
   1a72a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1a72c:	4b0e      	ldr	r3, [pc, #56]	; (1a768 <xPortStartScheduler+0x40>)
   1a72e:	4a0e      	ldr	r2, [pc, #56]	; (1a768 <xPortStartScheduler+0x40>)
   1a730:	6812      	ldr	r2, [r2, #0]
   1a732:	21ff      	movs	r1, #255	; 0xff
   1a734:	0409      	lsls	r1, r1, #16
   1a736:	430a      	orrs	r2, r1
   1a738:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1a73a:	4b0b      	ldr	r3, [pc, #44]	; (1a768 <xPortStartScheduler+0x40>)
   1a73c:	4a0a      	ldr	r2, [pc, #40]	; (1a768 <xPortStartScheduler+0x40>)
   1a73e:	6812      	ldr	r2, [r2, #0]
   1a740:	21ff      	movs	r1, #255	; 0xff
   1a742:	0609      	lsls	r1, r1, #24
   1a744:	430a      	orrs	r2, r1
   1a746:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1a748:	4b08      	ldr	r3, [pc, #32]	; (1a76c <xPortStartScheduler+0x44>)
   1a74a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1a74c:	4b08      	ldr	r3, [pc, #32]	; (1a770 <xPortStartScheduler+0x48>)
   1a74e:	2200      	movs	r2, #0
   1a750:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1a752:	4b08      	ldr	r3, [pc, #32]	; (1a774 <xPortStartScheduler+0x4c>)
   1a754:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1a756:	4b08      	ldr	r3, [pc, #32]	; (1a778 <xPortStartScheduler+0x50>)
   1a758:	4798      	blx	r3
	prvTaskExitError();
   1a75a:	4b08      	ldr	r3, [pc, #32]	; (1a77c <xPortStartScheduler+0x54>)
   1a75c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1a75e:	2300      	movs	r3, #0
}
   1a760:	0018      	movs	r0, r3
   1a762:	46bd      	mov	sp, r7
   1a764:	bd80      	pop	{r7, pc}
   1a766:	46c0      	nop			; (mov r8, r8)
   1a768:	e000ed20 	.word	0xe000ed20
   1a76c:	0001a889 	.word	0x0001a889
   1a770:	200000bc 	.word	0x200000bc
   1a774:	0001a6f1 	.word	0x0001a6f1
   1a778:	0001cde5 	.word	0x0001cde5
   1a77c:	0001a6b5 	.word	0x0001a6b5

0001a780 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1a780:	b580      	push	{r7, lr}
   1a782:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1a784:	4b03      	ldr	r3, [pc, #12]	; (1a794 <vPortYield+0x14>)
   1a786:	2280      	movs	r2, #128	; 0x80
   1a788:	0552      	lsls	r2, r2, #21
   1a78a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1a78c:	46c0      	nop			; (mov r8, r8)
   1a78e:	46bd      	mov	sp, r7
   1a790:	bd80      	pop	{r7, pc}
   1a792:	46c0      	nop			; (mov r8, r8)
   1a794:	e000ed04 	.word	0xe000ed04

0001a798 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1a798:	b580      	push	{r7, lr}
   1a79a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1a79c:	b672      	cpsid	i
    uxCriticalNesting++;
   1a79e:	4b06      	ldr	r3, [pc, #24]	; (1a7b8 <vPortEnterCritical+0x20>)
   1a7a0:	681b      	ldr	r3, [r3, #0]
   1a7a2:	1c5a      	adds	r2, r3, #1
   1a7a4:	4b04      	ldr	r3, [pc, #16]	; (1a7b8 <vPortEnterCritical+0x20>)
   1a7a6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1a7a8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1a7ac:	f3bf 8f6f 	isb	sy
}
   1a7b0:	46c0      	nop			; (mov r8, r8)
   1a7b2:	46bd      	mov	sp, r7
   1a7b4:	bd80      	pop	{r7, pc}
   1a7b6:	46c0      	nop			; (mov r8, r8)
   1a7b8:	200000bc 	.word	0x200000bc

0001a7bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1a7bc:	b580      	push	{r7, lr}
   1a7be:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1a7c0:	4b09      	ldr	r3, [pc, #36]	; (1a7e8 <vPortExitCritical+0x2c>)
   1a7c2:	681b      	ldr	r3, [r3, #0]
   1a7c4:	2b00      	cmp	r3, #0
   1a7c6:	d101      	bne.n	1a7cc <vPortExitCritical+0x10>
   1a7c8:	b672      	cpsid	i
   1a7ca:	e7fe      	b.n	1a7ca <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1a7cc:	4b06      	ldr	r3, [pc, #24]	; (1a7e8 <vPortExitCritical+0x2c>)
   1a7ce:	681b      	ldr	r3, [r3, #0]
   1a7d0:	1e5a      	subs	r2, r3, #1
   1a7d2:	4b05      	ldr	r3, [pc, #20]	; (1a7e8 <vPortExitCritical+0x2c>)
   1a7d4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1a7d6:	4b04      	ldr	r3, [pc, #16]	; (1a7e8 <vPortExitCritical+0x2c>)
   1a7d8:	681b      	ldr	r3, [r3, #0]
   1a7da:	2b00      	cmp	r3, #0
   1a7dc:	d100      	bne.n	1a7e0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1a7de:	b662      	cpsie	i
    }
}
   1a7e0:	46c0      	nop			; (mov r8, r8)
   1a7e2:	46bd      	mov	sp, r7
   1a7e4:	bd80      	pop	{r7, pc}
   1a7e6:	46c0      	nop			; (mov r8, r8)
   1a7e8:	200000bc 	.word	0x200000bc

0001a7ec <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1a7ec:	f3ef 8010 	mrs	r0, PRIMASK
   1a7f0:	b672      	cpsid	i
   1a7f2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1a7f4:	46c0      	nop			; (mov r8, r8)
   1a7f6:	0018      	movs	r0, r3

0001a7f8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1a7f8:	f380 8810 	msr	PRIMASK, r0
   1a7fc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1a7fe:	46c0      	nop			; (mov r8, r8)

0001a800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1a800:	f3ef 8009 	mrs	r0, PSP
   1a804:	4b0e      	ldr	r3, [pc, #56]	; (1a840 <pxCurrentTCBConst>)
   1a806:	681a      	ldr	r2, [r3, #0]
   1a808:	3820      	subs	r0, #32
   1a80a:	6010      	str	r0, [r2, #0]
   1a80c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a80e:	4644      	mov	r4, r8
   1a810:	464d      	mov	r5, r9
   1a812:	4656      	mov	r6, sl
   1a814:	465f      	mov	r7, fp
   1a816:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1a818:	b508      	push	{r3, lr}
   1a81a:	b672      	cpsid	i
   1a81c:	f002 fae2 	bl	1cde4 <vTaskSwitchContext>
   1a820:	b662      	cpsie	i
   1a822:	bc0c      	pop	{r2, r3}
   1a824:	6811      	ldr	r1, [r2, #0]
   1a826:	6808      	ldr	r0, [r1, #0]
   1a828:	3010      	adds	r0, #16
   1a82a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a82c:	46a0      	mov	r8, r4
   1a82e:	46a9      	mov	r9, r5
   1a830:	46b2      	mov	sl, r6
   1a832:	46bb      	mov	fp, r7
   1a834:	f380 8809 	msr	PSP, r0
   1a838:	3820      	subs	r0, #32
   1a83a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1a83c:	4718      	bx	r3
   1a83e:	46c0      	nop			; (mov r8, r8)

0001a840 <pxCurrentTCBConst>:
   1a840:	20003cd0 	.word	0x20003cd0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1a844:	46c0      	nop			; (mov r8, r8)
   1a846:	46c0      	nop			; (mov r8, r8)

0001a848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1a848:	b580      	push	{r7, lr}
   1a84a:	b082      	sub	sp, #8
   1a84c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1a84e:	4b0a      	ldr	r3, [pc, #40]	; (1a878 <SysTick_Handler+0x30>)
   1a850:	4798      	blx	r3
   1a852:	0003      	movs	r3, r0
   1a854:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1a856:	4b09      	ldr	r3, [pc, #36]	; (1a87c <SysTick_Handler+0x34>)
   1a858:	4798      	blx	r3
   1a85a:	1e03      	subs	r3, r0, #0
   1a85c:	d003      	beq.n	1a866 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1a85e:	4b08      	ldr	r3, [pc, #32]	; (1a880 <SysTick_Handler+0x38>)
   1a860:	2280      	movs	r2, #128	; 0x80
   1a862:	0552      	lsls	r2, r2, #21
   1a864:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1a866:	687b      	ldr	r3, [r7, #4]
   1a868:	0018      	movs	r0, r3
   1a86a:	4b06      	ldr	r3, [pc, #24]	; (1a884 <SysTick_Handler+0x3c>)
   1a86c:	4798      	blx	r3
}
   1a86e:	46c0      	nop			; (mov r8, r8)
   1a870:	46bd      	mov	sp, r7
   1a872:	b002      	add	sp, #8
   1a874:	bd80      	pop	{r7, pc}
   1a876:	46c0      	nop			; (mov r8, r8)
   1a878:	0001a7ed 	.word	0x0001a7ed
   1a87c:	0001cbf5 	.word	0x0001cbf5
   1a880:	e000ed04 	.word	0xe000ed04
   1a884:	0001a7f9 	.word	0x0001a7f9

0001a888 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1a888:	b5b0      	push	{r4, r5, r7, lr}
   1a88a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1a88c:	4b0b      	ldr	r3, [pc, #44]	; (1a8bc <prvSetupTimerInterrupt+0x34>)
   1a88e:	2200      	movs	r2, #0
   1a890:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1a892:	4b0b      	ldr	r3, [pc, #44]	; (1a8c0 <prvSetupTimerInterrupt+0x38>)
   1a894:	2200      	movs	r2, #0
   1a896:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1a898:	4c0a      	ldr	r4, [pc, #40]	; (1a8c4 <prvSetupTimerInterrupt+0x3c>)
   1a89a:	2000      	movs	r0, #0
   1a89c:	4b0a      	ldr	r3, [pc, #40]	; (1a8c8 <prvSetupTimerInterrupt+0x40>)
   1a89e:	4798      	blx	r3
   1a8a0:	4b0a      	ldr	r3, [pc, #40]	; (1a8cc <prvSetupTimerInterrupt+0x44>)
   1a8a2:	22fa      	movs	r2, #250	; 0xfa
   1a8a4:	0091      	lsls	r1, r2, #2
   1a8a6:	4798      	blx	r3
   1a8a8:	0003      	movs	r3, r0
   1a8aa:	3b01      	subs	r3, #1
   1a8ac:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1a8ae:	4b03      	ldr	r3, [pc, #12]	; (1a8bc <prvSetupTimerInterrupt+0x34>)
   1a8b0:	2207      	movs	r2, #7
   1a8b2:	601a      	str	r2, [r3, #0]
}
   1a8b4:	46c0      	nop			; (mov r8, r8)
   1a8b6:	46bd      	mov	sp, r7
   1a8b8:	bdb0      	pop	{r4, r5, r7, pc}
   1a8ba:	46c0      	nop			; (mov r8, r8)
   1a8bc:	e000e010 	.word	0xe000e010
   1a8c0:	e000e018 	.word	0xe000e018
   1a8c4:	e000e014 	.word	0xe000e014
   1a8c8:	0002a025 	.word	0x0002a025
   1a8cc:	00032c65 	.word	0x00032c65

0001a8d0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1a8d0:	b580      	push	{r7, lr}
   1a8d2:	b084      	sub	sp, #16
   1a8d4:	af00      	add	r7, sp, #0
   1a8d6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1a8d8:	2300      	movs	r3, #0
   1a8da:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1a8dc:	687b      	ldr	r3, [r7, #4]
   1a8de:	2207      	movs	r2, #7
   1a8e0:	4013      	ands	r3, r2
   1a8e2:	d004      	beq.n	1a8ee <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1a8e4:	687b      	ldr	r3, [r7, #4]
   1a8e6:	2207      	movs	r2, #7
   1a8e8:	4393      	bics	r3, r2
   1a8ea:	3308      	adds	r3, #8
   1a8ec:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1a8ee:	4b21      	ldr	r3, [pc, #132]	; (1a974 <pvPortMalloc+0xa4>)
   1a8f0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1a8f2:	4b21      	ldr	r3, [pc, #132]	; (1a978 <pvPortMalloc+0xa8>)
   1a8f4:	681b      	ldr	r3, [r3, #0]
   1a8f6:	2b00      	cmp	r3, #0
   1a8f8:	d105      	bne.n	1a906 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1a8fa:	4b20      	ldr	r3, [pc, #128]	; (1a97c <pvPortMalloc+0xac>)
   1a8fc:	2207      	movs	r2, #7
   1a8fe:	4393      	bics	r3, r2
   1a900:	001a      	movs	r2, r3
   1a902:	4b1d      	ldr	r3, [pc, #116]	; (1a978 <pvPortMalloc+0xa8>)
   1a904:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a906:	4b1e      	ldr	r3, [pc, #120]	; (1a980 <pvPortMalloc+0xb0>)
   1a908:	681a      	ldr	r2, [r3, #0]
   1a90a:	687b      	ldr	r3, [r7, #4]
   1a90c:	18d3      	adds	r3, r2, r3
   1a90e:	4a1d      	ldr	r2, [pc, #116]	; (1a984 <pvPortMalloc+0xb4>)
   1a910:	4293      	cmp	r3, r2
   1a912:	d813      	bhi.n	1a93c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1a914:	4b1a      	ldr	r3, [pc, #104]	; (1a980 <pvPortMalloc+0xb0>)
   1a916:	681a      	ldr	r2, [r3, #0]
   1a918:	687b      	ldr	r3, [r7, #4]
   1a91a:	18d2      	adds	r2, r2, r3
   1a91c:	4b18      	ldr	r3, [pc, #96]	; (1a980 <pvPortMalloc+0xb0>)
   1a91e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1a920:	429a      	cmp	r2, r3
   1a922:	d90b      	bls.n	1a93c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1a924:	4b14      	ldr	r3, [pc, #80]	; (1a978 <pvPortMalloc+0xa8>)
   1a926:	681a      	ldr	r2, [r3, #0]
   1a928:	4b15      	ldr	r3, [pc, #84]	; (1a980 <pvPortMalloc+0xb0>)
   1a92a:	681b      	ldr	r3, [r3, #0]
   1a92c:	18d3      	adds	r3, r2, r3
   1a92e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1a930:	4b13      	ldr	r3, [pc, #76]	; (1a980 <pvPortMalloc+0xb0>)
   1a932:	681a      	ldr	r2, [r3, #0]
   1a934:	687b      	ldr	r3, [r7, #4]
   1a936:	18d2      	adds	r2, r2, r3
   1a938:	4b11      	ldr	r3, [pc, #68]	; (1a980 <pvPortMalloc+0xb0>)
   1a93a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1a93c:	68fb      	ldr	r3, [r7, #12]
   1a93e:	2b00      	cmp	r3, #0
   1a940:	d006      	beq.n	1a950 <pvPortMalloc+0x80>
   1a942:	68fb      	ldr	r3, [r7, #12]
   1a944:	687a      	ldr	r2, [r7, #4]
   1a946:	0019      	movs	r1, r3
   1a948:	2094      	movs	r0, #148	; 0x94
   1a94a:	4b0f      	ldr	r3, [pc, #60]	; (1a988 <pvPortMalloc+0xb8>)
   1a94c:	4798      	blx	r3
   1a94e:	e005      	b.n	1a95c <pvPortMalloc+0x8c>
   1a950:	68fb      	ldr	r3, [r7, #12]
   1a952:	687a      	ldr	r2, [r7, #4]
   1a954:	0019      	movs	r1, r3
   1a956:	20e8      	movs	r0, #232	; 0xe8
   1a958:	4b0b      	ldr	r3, [pc, #44]	; (1a988 <pvPortMalloc+0xb8>)
   1a95a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1a95c:	4b0b      	ldr	r3, [pc, #44]	; (1a98c <pvPortMalloc+0xbc>)
   1a95e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1a960:	68fb      	ldr	r3, [r7, #12]
   1a962:	2b00      	cmp	r3, #0
   1a964:	d101      	bne.n	1a96a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1a966:	4b0a      	ldr	r3, [pc, #40]	; (1a990 <pvPortMalloc+0xc0>)
   1a968:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1a96a:	68fb      	ldr	r3, [r7, #12]
}
   1a96c:	0018      	movs	r0, r3
   1a96e:	46bd      	mov	sp, r7
   1a970:	b004      	add	sp, #16
   1a972:	bd80      	pop	{r7, pc}
   1a974:	0001ca51 	.word	0x0001ca51
   1a978:	20003ccc 	.word	0x20003ccc
   1a97c:	20000a08 	.word	0x20000a08
   1a980:	20003cc8 	.word	0x20003cc8
   1a984:	000032bf 	.word	0x000032bf
   1a988:	0001903d 	.word	0x0001903d
   1a98c:	0001ca69 	.word	0x0001ca69
   1a990:	00032c35 	.word	0x00032c35

0001a994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1a994:	b580      	push	{r7, lr}
   1a996:	b082      	sub	sp, #8
   1a998:	af00      	add	r7, sp, #0
   1a99a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1a99c:	687b      	ldr	r3, [r7, #4]
   1a99e:	2b00      	cmp	r3, #0
   1a9a0:	d001      	beq.n	1a9a6 <vPortFree+0x12>
   1a9a2:	b672      	cpsid	i
   1a9a4:	e7fe      	b.n	1a9a4 <vPortFree+0x10>
}
   1a9a6:	46c0      	nop			; (mov r8, r8)
   1a9a8:	46bd      	mov	sp, r7
   1a9aa:	b002      	add	sp, #8
   1a9ac:	bd80      	pop	{r7, pc}
	...

0001a9b0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1a9b0:	b580      	push	{r7, lr}
   1a9b2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1a9b4:	4b03      	ldr	r3, [pc, #12]	; (1a9c4 <xPortGetFreeHeapSize+0x14>)
   1a9b6:	681b      	ldr	r3, [r3, #0]
   1a9b8:	22cb      	movs	r2, #203	; 0xcb
   1a9ba:	0192      	lsls	r2, r2, #6
   1a9bc:	1ad3      	subs	r3, r2, r3
}
   1a9be:	0018      	movs	r0, r3
   1a9c0:	46bd      	mov	sp, r7
   1a9c2:	bd80      	pop	{r7, pc}
   1a9c4:	20003cc8 	.word	0x20003cc8

0001a9c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1a9c8:	b580      	push	{r7, lr}
   1a9ca:	b084      	sub	sp, #16
   1a9cc:	af00      	add	r7, sp, #0
   1a9ce:	6078      	str	r0, [r7, #4]
   1a9d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a9d2:	687b      	ldr	r3, [r7, #4]
   1a9d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1a9d6:	68fb      	ldr	r3, [r7, #12]
   1a9d8:	2b00      	cmp	r3, #0
   1a9da:	d101      	bne.n	1a9e0 <xQueueGenericReset+0x18>
   1a9dc:	b672      	cpsid	i
   1a9de:	e7fe      	b.n	1a9de <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1a9e0:	4b23      	ldr	r3, [pc, #140]	; (1aa70 <xQueueGenericReset+0xa8>)
   1a9e2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1a9e4:	68fb      	ldr	r3, [r7, #12]
   1a9e6:	681a      	ldr	r2, [r3, #0]
   1a9e8:	68fb      	ldr	r3, [r7, #12]
   1a9ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1a9ec:	68fb      	ldr	r3, [r7, #12]
   1a9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a9f0:	434b      	muls	r3, r1
   1a9f2:	18d2      	adds	r2, r2, r3
   1a9f4:	68fb      	ldr	r3, [r7, #12]
   1a9f6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1a9f8:	68fb      	ldr	r3, [r7, #12]
   1a9fa:	2200      	movs	r2, #0
   1a9fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1a9fe:	68fb      	ldr	r3, [r7, #12]
   1aa00:	681a      	ldr	r2, [r3, #0]
   1aa02:	68fb      	ldr	r3, [r7, #12]
   1aa04:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1aa06:	68fb      	ldr	r3, [r7, #12]
   1aa08:	681a      	ldr	r2, [r3, #0]
   1aa0a:	68fb      	ldr	r3, [r7, #12]
   1aa0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1aa0e:	1e59      	subs	r1, r3, #1
   1aa10:	68fb      	ldr	r3, [r7, #12]
   1aa12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1aa14:	434b      	muls	r3, r1
   1aa16:	18d2      	adds	r2, r2, r3
   1aa18:	68fb      	ldr	r3, [r7, #12]
   1aa1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1aa1c:	68fb      	ldr	r3, [r7, #12]
   1aa1e:	2244      	movs	r2, #68	; 0x44
   1aa20:	21ff      	movs	r1, #255	; 0xff
   1aa22:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1aa24:	68fb      	ldr	r3, [r7, #12]
   1aa26:	2245      	movs	r2, #69	; 0x45
   1aa28:	21ff      	movs	r1, #255	; 0xff
   1aa2a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1aa2c:	683b      	ldr	r3, [r7, #0]
   1aa2e:	2b00      	cmp	r3, #0
   1aa30:	d10d      	bne.n	1aa4e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1aa32:	68fb      	ldr	r3, [r7, #12]
   1aa34:	691b      	ldr	r3, [r3, #16]
   1aa36:	2b00      	cmp	r3, #0
   1aa38:	d013      	beq.n	1aa62 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1aa3a:	68fb      	ldr	r3, [r7, #12]
   1aa3c:	3310      	adds	r3, #16
   1aa3e:	0018      	movs	r0, r3
   1aa40:	4b0c      	ldr	r3, [pc, #48]	; (1aa74 <xQueueGenericReset+0xac>)
   1aa42:	4798      	blx	r3
   1aa44:	1e03      	subs	r3, r0, #0
   1aa46:	d00c      	beq.n	1aa62 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1aa48:	4b0b      	ldr	r3, [pc, #44]	; (1aa78 <xQueueGenericReset+0xb0>)
   1aa4a:	4798      	blx	r3
   1aa4c:	e009      	b.n	1aa62 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1aa4e:	68fb      	ldr	r3, [r7, #12]
   1aa50:	3310      	adds	r3, #16
   1aa52:	0018      	movs	r0, r3
   1aa54:	4b09      	ldr	r3, [pc, #36]	; (1aa7c <xQueueGenericReset+0xb4>)
   1aa56:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1aa58:	68fb      	ldr	r3, [r7, #12]
   1aa5a:	3324      	adds	r3, #36	; 0x24
   1aa5c:	0018      	movs	r0, r3
   1aa5e:	4b07      	ldr	r3, [pc, #28]	; (1aa7c <xQueueGenericReset+0xb4>)
   1aa60:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1aa62:	4b07      	ldr	r3, [pc, #28]	; (1aa80 <xQueueGenericReset+0xb8>)
   1aa64:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1aa66:	2301      	movs	r3, #1
}
   1aa68:	0018      	movs	r0, r3
   1aa6a:	46bd      	mov	sp, r7
   1aa6c:	b004      	add	sp, #16
   1aa6e:	bd80      	pop	{r7, pc}
   1aa70:	0001a799 	.word	0x0001a799
   1aa74:	0001d029 	.word	0x0001d029
   1aa78:	0001a781 	.word	0x0001a781
   1aa7c:	0001a50d 	.word	0x0001a50d
   1aa80:	0001a7bd 	.word	0x0001a7bd

0001aa84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1aa84:	b590      	push	{r4, r7, lr}
   1aa86:	b08b      	sub	sp, #44	; 0x2c
   1aa88:	af02      	add	r7, sp, #8
   1aa8a:	60f8      	str	r0, [r7, #12]
   1aa8c:	60b9      	str	r1, [r7, #8]
   1aa8e:	1dfb      	adds	r3, r7, #7
   1aa90:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1aa92:	68fb      	ldr	r3, [r7, #12]
   1aa94:	2b00      	cmp	r3, #0
   1aa96:	d101      	bne.n	1aa9c <xQueueGenericCreate+0x18>
   1aa98:	b672      	cpsid	i
   1aa9a:	e7fe      	b.n	1aa9a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1aa9c:	68bb      	ldr	r3, [r7, #8]
   1aa9e:	2b00      	cmp	r3, #0
   1aaa0:	d102      	bne.n	1aaa8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1aaa2:	2300      	movs	r3, #0
   1aaa4:	61fb      	str	r3, [r7, #28]
   1aaa6:	e003      	b.n	1aab0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1aaa8:	68fb      	ldr	r3, [r7, #12]
   1aaaa:	68ba      	ldr	r2, [r7, #8]
   1aaac:	4353      	muls	r3, r2
   1aaae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1aab0:	69fb      	ldr	r3, [r7, #28]
   1aab2:	3354      	adds	r3, #84	; 0x54
   1aab4:	0018      	movs	r0, r3
   1aab6:	4b19      	ldr	r3, [pc, #100]	; (1ab1c <xQueueGenericCreate+0x98>)
   1aab8:	4798      	blx	r3
   1aaba:	0003      	movs	r3, r0
   1aabc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1aabe:	69bb      	ldr	r3, [r7, #24]
   1aac0:	2b00      	cmp	r3, #0
   1aac2:	d00d      	beq.n	1aae0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1aac4:	69bb      	ldr	r3, [r7, #24]
   1aac6:	3354      	adds	r3, #84	; 0x54
   1aac8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1aaca:	1dfb      	adds	r3, r7, #7
   1aacc:	781c      	ldrb	r4, [r3, #0]
   1aace:	697a      	ldr	r2, [r7, #20]
   1aad0:	68b9      	ldr	r1, [r7, #8]
   1aad2:	68f8      	ldr	r0, [r7, #12]
   1aad4:	69bb      	ldr	r3, [r7, #24]
   1aad6:	9300      	str	r3, [sp, #0]
   1aad8:	0023      	movs	r3, r4
   1aada:	4c11      	ldr	r4, [pc, #68]	; (1ab20 <xQueueGenericCreate+0x9c>)
   1aadc:	47a0      	blx	r4
   1aade:	e017      	b.n	1ab10 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1aae0:	4b10      	ldr	r3, [pc, #64]	; (1ab24 <xQueueGenericCreate+0xa0>)
   1aae2:	4798      	blx	r3
   1aae4:	0003      	movs	r3, r0
   1aae6:	0018      	movs	r0, r3
   1aae8:	4b0f      	ldr	r3, [pc, #60]	; (1ab28 <xQueueGenericCreate+0xa4>)
   1aaea:	4798      	blx	r3
   1aaec:	0003      	movs	r3, r0
   1aaee:	001a      	movs	r2, r3
   1aaf0:	4b0e      	ldr	r3, [pc, #56]	; (1ab2c <xQueueGenericCreate+0xa8>)
   1aaf2:	881b      	ldrh	r3, [r3, #0]
   1aaf4:	4013      	ands	r3, r2
   1aaf6:	b29b      	uxth	r3, r3
   1aaf8:	2b00      	cmp	r3, #0
   1aafa:	d009      	beq.n	1ab10 <xQueueGenericCreate+0x8c>
   1aafc:	1dfb      	adds	r3, r7, #7
   1aafe:	781b      	ldrb	r3, [r3, #0]
   1ab00:	4a0b      	ldr	r2, [pc, #44]	; (1ab30 <xQueueGenericCreate+0xac>)
   1ab02:	5cd3      	ldrb	r3, [r2, r3]
   1ab04:	3340      	adds	r3, #64	; 0x40
   1ab06:	b2db      	uxtb	r3, r3
   1ab08:	2100      	movs	r1, #0
   1ab0a:	0018      	movs	r0, r3
   1ab0c:	4b09      	ldr	r3, [pc, #36]	; (1ab34 <xQueueGenericCreate+0xb0>)
   1ab0e:	4798      	blx	r3
		}

		return pxNewQueue;
   1ab10:	69bb      	ldr	r3, [r7, #24]
	}
   1ab12:	0018      	movs	r0, r3
   1ab14:	46bd      	mov	sp, r7
   1ab16:	b009      	add	sp, #36	; 0x24
   1ab18:	bd90      	pop	{r4, r7, pc}
   1ab1a:	46c0      	nop			; (mov r8, r8)
   1ab1c:	0001a8d1 	.word	0x0001a8d1
   1ab20:	0001ab39 	.word	0x0001ab39
   1ab24:	00018a31 	.word	0x00018a31
   1ab28:	00018795 	.word	0x00018795
   1ab2c:	200000b8 	.word	0x200000b8
   1ab30:	200000ac 	.word	0x200000ac
   1ab34:	00019495 	.word	0x00019495

0001ab38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1ab38:	b5b0      	push	{r4, r5, r7, lr}
   1ab3a:	b084      	sub	sp, #16
   1ab3c:	af00      	add	r7, sp, #0
   1ab3e:	60f8      	str	r0, [r7, #12]
   1ab40:	60b9      	str	r1, [r7, #8]
   1ab42:	607a      	str	r2, [r7, #4]
   1ab44:	001a      	movs	r2, r3
   1ab46:	1cfb      	adds	r3, r7, #3
   1ab48:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1ab4a:	68bb      	ldr	r3, [r7, #8]
   1ab4c:	2b00      	cmp	r3, #0
   1ab4e:	d103      	bne.n	1ab58 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1ab50:	6a3b      	ldr	r3, [r7, #32]
   1ab52:	6a3a      	ldr	r2, [r7, #32]
   1ab54:	601a      	str	r2, [r3, #0]
   1ab56:	e002      	b.n	1ab5e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1ab58:	6a3b      	ldr	r3, [r7, #32]
   1ab5a:	687a      	ldr	r2, [r7, #4]
   1ab5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1ab5e:	6a3b      	ldr	r3, [r7, #32]
   1ab60:	68fa      	ldr	r2, [r7, #12]
   1ab62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1ab64:	6a3b      	ldr	r3, [r7, #32]
   1ab66:	68ba      	ldr	r2, [r7, #8]
   1ab68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1ab6a:	6a3b      	ldr	r3, [r7, #32]
   1ab6c:	2101      	movs	r1, #1
   1ab6e:	0018      	movs	r0, r3
   1ab70:	4b41      	ldr	r3, [pc, #260]	; (1ac78 <prvInitialiseNewQueue+0x140>)
   1ab72:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1ab74:	6a3b      	ldr	r3, [r7, #32]
   1ab76:	1cfa      	adds	r2, r7, #3
   1ab78:	2150      	movs	r1, #80	; 0x50
   1ab7a:	7812      	ldrb	r2, [r2, #0]
   1ab7c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1ab7e:	6a3b      	ldr	r3, [r7, #32]
   1ab80:	2200      	movs	r2, #0
   1ab82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1ab84:	6a3b      	ldr	r3, [r7, #32]
   1ab86:	0018      	movs	r0, r3
   1ab88:	4b3c      	ldr	r3, [pc, #240]	; (1ac7c <prvInitialiseNewQueue+0x144>)
   1ab8a:	4798      	blx	r3
   1ab8c:	0003      	movs	r3, r0
   1ab8e:	001a      	movs	r2, r3
   1ab90:	4b3b      	ldr	r3, [pc, #236]	; (1ac80 <prvInitialiseNewQueue+0x148>)
   1ab92:	5c9b      	ldrb	r3, [r3, r2]
   1ab94:	0018      	movs	r0, r3
   1ab96:	4b3b      	ldr	r3, [pc, #236]	; (1ac84 <prvInitialiseNewQueue+0x14c>)
   1ab98:	4798      	blx	r3
   1ab9a:	0003      	movs	r3, r0
   1ab9c:	b29a      	uxth	r2, r3
   1ab9e:	6a3b      	ldr	r3, [r7, #32]
   1aba0:	0011      	movs	r1, r2
   1aba2:	0018      	movs	r0, r3
   1aba4:	4b38      	ldr	r3, [pc, #224]	; (1ac88 <prvInitialiseNewQueue+0x150>)
   1aba6:	4798      	blx	r3
   1aba8:	4b38      	ldr	r3, [pc, #224]	; (1ac8c <prvInitialiseNewQueue+0x154>)
   1abaa:	881a      	ldrh	r2, [r3, #0]
   1abac:	6a3b      	ldr	r3, [r7, #32]
   1abae:	0011      	movs	r1, r2
   1abb0:	0018      	movs	r0, r3
   1abb2:	4b37      	ldr	r3, [pc, #220]	; (1ac90 <prvInitialiseNewQueue+0x158>)
   1abb4:	4798      	blx	r3
   1abb6:	6a3b      	ldr	r3, [r7, #32]
   1abb8:	0018      	movs	r0, r3
   1abba:	4b30      	ldr	r3, [pc, #192]	; (1ac7c <prvInitialiseNewQueue+0x144>)
   1abbc:	4798      	blx	r3
   1abbe:	0003      	movs	r3, r0
   1abc0:	001a      	movs	r2, r3
   1abc2:	4b2f      	ldr	r3, [pc, #188]	; (1ac80 <prvInitialiseNewQueue+0x148>)
   1abc4:	5c9c      	ldrb	r4, [r3, r2]
   1abc6:	6a3b      	ldr	r3, [r7, #32]
   1abc8:	0018      	movs	r0, r3
   1abca:	4b32      	ldr	r3, [pc, #200]	; (1ac94 <prvInitialiseNewQueue+0x15c>)
   1abcc:	4798      	blx	r3
   1abce:	0003      	movs	r3, r0
   1abd0:	b2db      	uxtb	r3, r3
   1abd2:	0019      	movs	r1, r3
   1abd4:	0020      	movs	r0, r4
   1abd6:	4b30      	ldr	r3, [pc, #192]	; (1ac98 <prvInitialiseNewQueue+0x160>)
   1abd8:	4798      	blx	r3
   1abda:	4b30      	ldr	r3, [pc, #192]	; (1ac9c <prvInitialiseNewQueue+0x164>)
   1abdc:	4798      	blx	r3
   1abde:	0003      	movs	r3, r0
   1abe0:	0018      	movs	r0, r3
   1abe2:	4b2f      	ldr	r3, [pc, #188]	; (1aca0 <prvInitialiseNewQueue+0x168>)
   1abe4:	4798      	blx	r3
   1abe6:	0003      	movs	r3, r0
   1abe8:	001a      	movs	r2, r3
   1abea:	4b2e      	ldr	r3, [pc, #184]	; (1aca4 <prvInitialiseNewQueue+0x16c>)
   1abec:	881b      	ldrh	r3, [r3, #0]
   1abee:	4013      	ands	r3, r2
   1abf0:	b29b      	uxth	r3, r3
   1abf2:	2b00      	cmp	r3, #0
   1abf4:	d029      	beq.n	1ac4a <prvInitialiseNewQueue+0x112>
   1abf6:	6a3b      	ldr	r3, [r7, #32]
   1abf8:	0018      	movs	r0, r3
   1abfa:	4b2b      	ldr	r3, [pc, #172]	; (1aca8 <prvInitialiseNewQueue+0x170>)
   1abfc:	4798      	blx	r3
   1abfe:	0003      	movs	r3, r0
   1ac00:	001a      	movs	r2, r3
   1ac02:	4b28      	ldr	r3, [pc, #160]	; (1aca4 <prvInitialiseNewQueue+0x16c>)
   1ac04:	881b      	ldrh	r3, [r3, #0]
   1ac06:	4013      	ands	r3, r2
   1ac08:	b29b      	uxth	r3, r3
   1ac0a:	2b00      	cmp	r3, #0
   1ac0c:	d01d      	beq.n	1ac4a <prvInitialiseNewQueue+0x112>
   1ac0e:	6a3b      	ldr	r3, [r7, #32]
   1ac10:	0018      	movs	r0, r3
   1ac12:	4b1a      	ldr	r3, [pc, #104]	; (1ac7c <prvInitialiseNewQueue+0x144>)
   1ac14:	4798      	blx	r3
   1ac16:	0003      	movs	r3, r0
   1ac18:	001a      	movs	r2, r3
   1ac1a:	4b19      	ldr	r3, [pc, #100]	; (1ac80 <prvInitialiseNewQueue+0x148>)
   1ac1c:	5c9b      	ldrb	r3, [r3, r2]
   1ac1e:	3318      	adds	r3, #24
   1ac20:	b2db      	uxtb	r3, r3
   1ac22:	001d      	movs	r5, r3
   1ac24:	6a3b      	ldr	r3, [r7, #32]
   1ac26:	0018      	movs	r0, r3
   1ac28:	4b14      	ldr	r3, [pc, #80]	; (1ac7c <prvInitialiseNewQueue+0x144>)
   1ac2a:	4798      	blx	r3
   1ac2c:	0003      	movs	r3, r0
   1ac2e:	001a      	movs	r2, r3
   1ac30:	4b13      	ldr	r3, [pc, #76]	; (1ac80 <prvInitialiseNewQueue+0x148>)
   1ac32:	5c9c      	ldrb	r4, [r3, r2]
   1ac34:	6a3b      	ldr	r3, [r7, #32]
   1ac36:	0018      	movs	r0, r3
   1ac38:	4b16      	ldr	r3, [pc, #88]	; (1ac94 <prvInitialiseNewQueue+0x15c>)
   1ac3a:	4798      	blx	r3
   1ac3c:	0003      	movs	r3, r0
   1ac3e:	b2db      	uxtb	r3, r3
   1ac40:	001a      	movs	r2, r3
   1ac42:	0021      	movs	r1, r4
   1ac44:	0028      	movs	r0, r5
   1ac46:	4b19      	ldr	r3, [pc, #100]	; (1acac <prvInitialiseNewQueue+0x174>)
   1ac48:	4798      	blx	r3
   1ac4a:	6a3b      	ldr	r3, [r7, #32]
   1ac4c:	0018      	movs	r0, r3
   1ac4e:	4b0b      	ldr	r3, [pc, #44]	; (1ac7c <prvInitialiseNewQueue+0x144>)
   1ac50:	4798      	blx	r3
   1ac52:	0003      	movs	r3, r0
   1ac54:	001a      	movs	r2, r3
   1ac56:	4b0a      	ldr	r3, [pc, #40]	; (1ac80 <prvInitialiseNewQueue+0x148>)
   1ac58:	5c9c      	ldrb	r4, [r3, r2]
   1ac5a:	6a3b      	ldr	r3, [r7, #32]
   1ac5c:	0018      	movs	r0, r3
   1ac5e:	4b0d      	ldr	r3, [pc, #52]	; (1ac94 <prvInitialiseNewQueue+0x15c>)
   1ac60:	4798      	blx	r3
   1ac62:	0003      	movs	r3, r0
   1ac64:	b2db      	uxtb	r3, r3
   1ac66:	2200      	movs	r2, #0
   1ac68:	0019      	movs	r1, r3
   1ac6a:	0020      	movs	r0, r4
   1ac6c:	4b10      	ldr	r3, [pc, #64]	; (1acb0 <prvInitialiseNewQueue+0x178>)
   1ac6e:	4798      	blx	r3
}
   1ac70:	46c0      	nop			; (mov r8, r8)
   1ac72:	46bd      	mov	sp, r7
   1ac74:	b004      	add	sp, #16
   1ac76:	bdb0      	pop	{r4, r5, r7, pc}
   1ac78:	0001a9c9 	.word	0x0001a9c9
   1ac7c:	00018755 	.word	0x00018755
   1ac80:	200000ac 	.word	0x200000ac
   1ac84:	00019d15 	.word	0x00019d15
   1ac88:	00018879 	.word	0x00018879
   1ac8c:	200000ba 	.word	0x200000ba
   1ac90:	000188b5 	.word	0x000188b5
   1ac94:	00018835 	.word	0x00018835
   1ac98:	00019ead 	.word	0x00019ead
   1ac9c:	00018a31 	.word	0x00018a31
   1aca0:	00018795 	.word	0x00018795
   1aca4:	200000b8 	.word	0x200000b8
   1aca8:	00018855 	.word	0x00018855
   1acac:	0001918d 	.word	0x0001918d
   1acb0:	000197e9 	.word	0x000197e9

0001acb4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1acb4:	b590      	push	{r4, r7, lr}
   1acb6:	b083      	sub	sp, #12
   1acb8:	af00      	add	r7, sp, #0
   1acba:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1acbc:	687b      	ldr	r3, [r7, #4]
   1acbe:	2b00      	cmp	r3, #0
   1acc0:	d00e      	beq.n	1ace0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1acc2:	687b      	ldr	r3, [r7, #4]
   1acc4:	2200      	movs	r2, #0
   1acc6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1acc8:	687b      	ldr	r3, [r7, #4]
   1acca:	2200      	movs	r2, #0
   1accc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1acce:	687b      	ldr	r3, [r7, #4]
   1acd0:	2200      	movs	r2, #0
   1acd2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1acd4:	6878      	ldr	r0, [r7, #4]
   1acd6:	2300      	movs	r3, #0
   1acd8:	2200      	movs	r2, #0
   1acda:	2100      	movs	r1, #0
   1acdc:	4c02      	ldr	r4, [pc, #8]	; (1ace8 <prvInitialiseMutex+0x34>)
   1acde:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1ace0:	46c0      	nop			; (mov r8, r8)
   1ace2:	46bd      	mov	sp, r7
   1ace4:	b003      	add	sp, #12
   1ace6:	bd90      	pop	{r4, r7, pc}
   1ace8:	0001ad2d 	.word	0x0001ad2d

0001acec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1acec:	b580      	push	{r7, lr}
   1acee:	b086      	sub	sp, #24
   1acf0:	af00      	add	r7, sp, #0
   1acf2:	0002      	movs	r2, r0
   1acf4:	1dfb      	adds	r3, r7, #7
   1acf6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1acf8:	2301      	movs	r3, #1
   1acfa:	617b      	str	r3, [r7, #20]
   1acfc:	2300      	movs	r3, #0
   1acfe:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1ad00:	1dfb      	adds	r3, r7, #7
   1ad02:	781a      	ldrb	r2, [r3, #0]
   1ad04:	6939      	ldr	r1, [r7, #16]
   1ad06:	697b      	ldr	r3, [r7, #20]
   1ad08:	0018      	movs	r0, r3
   1ad0a:	4b06      	ldr	r3, [pc, #24]	; (1ad24 <xQueueCreateMutex+0x38>)
   1ad0c:	4798      	blx	r3
   1ad0e:	0003      	movs	r3, r0
   1ad10:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1ad12:	68fb      	ldr	r3, [r7, #12]
   1ad14:	0018      	movs	r0, r3
   1ad16:	4b04      	ldr	r3, [pc, #16]	; (1ad28 <xQueueCreateMutex+0x3c>)
   1ad18:	4798      	blx	r3

		return pxNewQueue;
   1ad1a:	68fb      	ldr	r3, [r7, #12]
	}
   1ad1c:	0018      	movs	r0, r3
   1ad1e:	46bd      	mov	sp, r7
   1ad20:	b006      	add	sp, #24
   1ad22:	bd80      	pop	{r7, pc}
   1ad24:	0001aa85 	.word	0x0001aa85
   1ad28:	0001acb5 	.word	0x0001acb5

0001ad2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1ad2c:	b5b0      	push	{r4, r5, r7, lr}
   1ad2e:	b08a      	sub	sp, #40	; 0x28
   1ad30:	af00      	add	r7, sp, #0
   1ad32:	60f8      	str	r0, [r7, #12]
   1ad34:	60b9      	str	r1, [r7, #8]
   1ad36:	607a      	str	r2, [r7, #4]
   1ad38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1ad3a:	2300      	movs	r3, #0
   1ad3c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ad3e:	68fb      	ldr	r3, [r7, #12]
   1ad40:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1ad42:	6a3b      	ldr	r3, [r7, #32]
   1ad44:	2b00      	cmp	r3, #0
   1ad46:	d101      	bne.n	1ad4c <xQueueGenericSend+0x20>
   1ad48:	b672      	cpsid	i
   1ad4a:	e7fe      	b.n	1ad4a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1ad4c:	68bb      	ldr	r3, [r7, #8]
   1ad4e:	2b00      	cmp	r3, #0
   1ad50:	d103      	bne.n	1ad5a <xQueueGenericSend+0x2e>
   1ad52:	6a3b      	ldr	r3, [r7, #32]
   1ad54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	d101      	bne.n	1ad5e <xQueueGenericSend+0x32>
   1ad5a:	2301      	movs	r3, #1
   1ad5c:	e000      	b.n	1ad60 <xQueueGenericSend+0x34>
   1ad5e:	2300      	movs	r3, #0
   1ad60:	2b00      	cmp	r3, #0
   1ad62:	d101      	bne.n	1ad68 <xQueueGenericSend+0x3c>
   1ad64:	b672      	cpsid	i
   1ad66:	e7fe      	b.n	1ad66 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1ad68:	683b      	ldr	r3, [r7, #0]
   1ad6a:	2b02      	cmp	r3, #2
   1ad6c:	d103      	bne.n	1ad76 <xQueueGenericSend+0x4a>
   1ad6e:	6a3b      	ldr	r3, [r7, #32]
   1ad70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ad72:	2b01      	cmp	r3, #1
   1ad74:	d101      	bne.n	1ad7a <xQueueGenericSend+0x4e>
   1ad76:	2301      	movs	r3, #1
   1ad78:	e000      	b.n	1ad7c <xQueueGenericSend+0x50>
   1ad7a:	2300      	movs	r3, #0
   1ad7c:	2b00      	cmp	r3, #0
   1ad7e:	d101      	bne.n	1ad84 <xQueueGenericSend+0x58>
   1ad80:	b672      	cpsid	i
   1ad82:	e7fe      	b.n	1ad82 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ad84:	4bbc      	ldr	r3, [pc, #752]	; (1b078 <xQueueGenericSend+0x34c>)
   1ad86:	4798      	blx	r3
   1ad88:	1e03      	subs	r3, r0, #0
   1ad8a:	d102      	bne.n	1ad92 <xQueueGenericSend+0x66>
   1ad8c:	687b      	ldr	r3, [r7, #4]
   1ad8e:	2b00      	cmp	r3, #0
   1ad90:	d101      	bne.n	1ad96 <xQueueGenericSend+0x6a>
   1ad92:	2301      	movs	r3, #1
   1ad94:	e000      	b.n	1ad98 <xQueueGenericSend+0x6c>
   1ad96:	2300      	movs	r3, #0
   1ad98:	2b00      	cmp	r3, #0
   1ad9a:	d101      	bne.n	1ada0 <xQueueGenericSend+0x74>
   1ad9c:	b672      	cpsid	i
   1ad9e:	e7fe      	b.n	1ad9e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1ada0:	4bb6      	ldr	r3, [pc, #728]	; (1b07c <xQueueGenericSend+0x350>)
   1ada2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1ada4:	6a3b      	ldr	r3, [r7, #32]
   1ada6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ada8:	6a3b      	ldr	r3, [r7, #32]
   1adaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1adac:	429a      	cmp	r2, r3
   1adae:	d303      	bcc.n	1adb8 <xQueueGenericSend+0x8c>
   1adb0:	683b      	ldr	r3, [r7, #0]
   1adb2:	2b02      	cmp	r3, #2
   1adb4:	d000      	beq.n	1adb8 <xQueueGenericSend+0x8c>
   1adb6:	e08e      	b.n	1aed6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1adb8:	4bb1      	ldr	r3, [pc, #708]	; (1b080 <xQueueGenericSend+0x354>)
   1adba:	4798      	blx	r3
   1adbc:	0003      	movs	r3, r0
   1adbe:	0018      	movs	r0, r3
   1adc0:	4bb0      	ldr	r3, [pc, #704]	; (1b084 <xQueueGenericSend+0x358>)
   1adc2:	4798      	blx	r3
   1adc4:	0003      	movs	r3, r0
   1adc6:	001a      	movs	r2, r3
   1adc8:	4baf      	ldr	r3, [pc, #700]	; (1b088 <xQueueGenericSend+0x35c>)
   1adca:	881b      	ldrh	r3, [r3, #0]
   1adcc:	4013      	ands	r3, r2
   1adce:	b29b      	uxth	r3, r3
   1add0:	2b00      	cmp	r3, #0
   1add2:	d02e      	beq.n	1ae32 <xQueueGenericSend+0x106>
   1add4:	6a3b      	ldr	r3, [r7, #32]
   1add6:	0018      	movs	r0, r3
   1add8:	4bac      	ldr	r3, [pc, #688]	; (1b08c <xQueueGenericSend+0x360>)
   1adda:	4798      	blx	r3
   1addc:	0003      	movs	r3, r0
   1adde:	001a      	movs	r2, r3
   1ade0:	4ba9      	ldr	r3, [pc, #676]	; (1b088 <xQueueGenericSend+0x35c>)
   1ade2:	881b      	ldrh	r3, [r3, #0]
   1ade4:	4013      	ands	r3, r2
   1ade6:	b29b      	uxth	r3, r3
   1ade8:	2b00      	cmp	r3, #0
   1adea:	d022      	beq.n	1ae32 <xQueueGenericSend+0x106>
   1adec:	683b      	ldr	r3, [r7, #0]
   1adee:	2b00      	cmp	r3, #0
   1adf0:	d10b      	bne.n	1ae0a <xQueueGenericSend+0xde>
   1adf2:	6a3b      	ldr	r3, [r7, #32]
   1adf4:	0018      	movs	r0, r3
   1adf6:	4ba6      	ldr	r3, [pc, #664]	; (1b090 <xQueueGenericSend+0x364>)
   1adf8:	4798      	blx	r3
   1adfa:	0003      	movs	r3, r0
   1adfc:	001a      	movs	r2, r3
   1adfe:	4ba5      	ldr	r3, [pc, #660]	; (1b094 <xQueueGenericSend+0x368>)
   1ae00:	5c9b      	ldrb	r3, [r3, r2]
   1ae02:	3320      	adds	r3, #32
   1ae04:	b2db      	uxtb	r3, r3
   1ae06:	001d      	movs	r5, r3
   1ae08:	e000      	b.n	1ae0c <xQueueGenericSend+0xe0>
   1ae0a:	2525      	movs	r5, #37	; 0x25
   1ae0c:	6a3b      	ldr	r3, [r7, #32]
   1ae0e:	0018      	movs	r0, r3
   1ae10:	4b9f      	ldr	r3, [pc, #636]	; (1b090 <xQueueGenericSend+0x364>)
   1ae12:	4798      	blx	r3
   1ae14:	0003      	movs	r3, r0
   1ae16:	001a      	movs	r2, r3
   1ae18:	4b9e      	ldr	r3, [pc, #632]	; (1b094 <xQueueGenericSend+0x368>)
   1ae1a:	5c9c      	ldrb	r4, [r3, r2]
   1ae1c:	6a3b      	ldr	r3, [r7, #32]
   1ae1e:	0018      	movs	r0, r3
   1ae20:	4b9d      	ldr	r3, [pc, #628]	; (1b098 <xQueueGenericSend+0x36c>)
   1ae22:	4798      	blx	r3
   1ae24:	0003      	movs	r3, r0
   1ae26:	b2db      	uxtb	r3, r3
   1ae28:	001a      	movs	r2, r3
   1ae2a:	0021      	movs	r1, r4
   1ae2c:	0028      	movs	r0, r5
   1ae2e:	4b9b      	ldr	r3, [pc, #620]	; (1b09c <xQueueGenericSend+0x370>)
   1ae30:	4798      	blx	r3
   1ae32:	6a3b      	ldr	r3, [r7, #32]
   1ae34:	0018      	movs	r0, r3
   1ae36:	4b96      	ldr	r3, [pc, #600]	; (1b090 <xQueueGenericSend+0x364>)
   1ae38:	4798      	blx	r3
   1ae3a:	0003      	movs	r3, r0
   1ae3c:	001a      	movs	r2, r3
   1ae3e:	4b95      	ldr	r3, [pc, #596]	; (1b094 <xQueueGenericSend+0x368>)
   1ae40:	5c9c      	ldrb	r4, [r3, r2]
   1ae42:	6a3b      	ldr	r3, [r7, #32]
   1ae44:	0018      	movs	r0, r3
   1ae46:	4b94      	ldr	r3, [pc, #592]	; (1b098 <xQueueGenericSend+0x36c>)
   1ae48:	4798      	blx	r3
   1ae4a:	0003      	movs	r3, r0
   1ae4c:	b2dd      	uxtb	r5, r3
   1ae4e:	6a3b      	ldr	r3, [r7, #32]
   1ae50:	0018      	movs	r0, r3
   1ae52:	4b8f      	ldr	r3, [pc, #572]	; (1b090 <xQueueGenericSend+0x364>)
   1ae54:	4798      	blx	r3
   1ae56:	0003      	movs	r3, r0
   1ae58:	001a      	movs	r2, r3
   1ae5a:	4b8e      	ldr	r3, [pc, #568]	; (1b094 <xQueueGenericSend+0x368>)
   1ae5c:	5c9b      	ldrb	r3, [r3, r2]
   1ae5e:	2b02      	cmp	r3, #2
   1ae60:	d005      	beq.n	1ae6e <xQueueGenericSend+0x142>
   1ae62:	6a3b      	ldr	r3, [r7, #32]
   1ae64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ae66:	b2db      	uxtb	r3, r3
   1ae68:	3301      	adds	r3, #1
   1ae6a:	b2db      	uxtb	r3, r3
   1ae6c:	e000      	b.n	1ae70 <xQueueGenericSend+0x144>
   1ae6e:	2300      	movs	r3, #0
   1ae70:	001a      	movs	r2, r3
   1ae72:	0029      	movs	r1, r5
   1ae74:	0020      	movs	r0, r4
   1ae76:	4b8a      	ldr	r3, [pc, #552]	; (1b0a0 <xQueueGenericSend+0x374>)
   1ae78:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1ae7a:	683a      	ldr	r2, [r7, #0]
   1ae7c:	68b9      	ldr	r1, [r7, #8]
   1ae7e:	6a3b      	ldr	r3, [r7, #32]
   1ae80:	0018      	movs	r0, r3
   1ae82:	4b88      	ldr	r3, [pc, #544]	; (1b0a4 <xQueueGenericSend+0x378>)
   1ae84:	4798      	blx	r3
   1ae86:	0003      	movs	r3, r0
   1ae88:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1ae8a:	6a3b      	ldr	r3, [r7, #32]
   1ae8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ae8e:	2b00      	cmp	r3, #0
   1ae90:	d00a      	beq.n	1aea8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1ae92:	683a      	ldr	r2, [r7, #0]
   1ae94:	6a3b      	ldr	r3, [r7, #32]
   1ae96:	0011      	movs	r1, r2
   1ae98:	0018      	movs	r0, r3
   1ae9a:	4b83      	ldr	r3, [pc, #524]	; (1b0a8 <xQueueGenericSend+0x37c>)
   1ae9c:	4798      	blx	r3
   1ae9e:	1e03      	subs	r3, r0, #0
   1aea0:	d015      	beq.n	1aece <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1aea2:	4b82      	ldr	r3, [pc, #520]	; (1b0ac <xQueueGenericSend+0x380>)
   1aea4:	4798      	blx	r3
   1aea6:	e012      	b.n	1aece <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1aea8:	6a3b      	ldr	r3, [r7, #32]
   1aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aeac:	2b00      	cmp	r3, #0
   1aeae:	d009      	beq.n	1aec4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1aeb0:	6a3b      	ldr	r3, [r7, #32]
   1aeb2:	3324      	adds	r3, #36	; 0x24
   1aeb4:	0018      	movs	r0, r3
   1aeb6:	4b7e      	ldr	r3, [pc, #504]	; (1b0b0 <xQueueGenericSend+0x384>)
   1aeb8:	4798      	blx	r3
   1aeba:	1e03      	subs	r3, r0, #0
   1aebc:	d007      	beq.n	1aece <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1aebe:	4b7b      	ldr	r3, [pc, #492]	; (1b0ac <xQueueGenericSend+0x380>)
   1aec0:	4798      	blx	r3
   1aec2:	e004      	b.n	1aece <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1aec4:	69fb      	ldr	r3, [r7, #28]
   1aec6:	2b00      	cmp	r3, #0
   1aec8:	d001      	beq.n	1aece <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1aeca:	4b78      	ldr	r3, [pc, #480]	; (1b0ac <xQueueGenericSend+0x380>)
   1aecc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1aece:	4b79      	ldr	r3, [pc, #484]	; (1b0b4 <xQueueGenericSend+0x388>)
   1aed0:	4798      	blx	r3
				return pdPASS;
   1aed2:	2301      	movs	r3, #1
   1aed4:	e142      	b.n	1b15c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1aed6:	687b      	ldr	r3, [r7, #4]
   1aed8:	2b00      	cmp	r3, #0
   1aeda:	d140      	bne.n	1af5e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1aedc:	4b75      	ldr	r3, [pc, #468]	; (1b0b4 <xQueueGenericSend+0x388>)
   1aede:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1aee0:	4b67      	ldr	r3, [pc, #412]	; (1b080 <xQueueGenericSend+0x354>)
   1aee2:	4798      	blx	r3
   1aee4:	0003      	movs	r3, r0
   1aee6:	0018      	movs	r0, r3
   1aee8:	4b66      	ldr	r3, [pc, #408]	; (1b084 <xQueueGenericSend+0x358>)
   1aeea:	4798      	blx	r3
   1aeec:	0003      	movs	r3, r0
   1aeee:	001a      	movs	r2, r3
   1aef0:	4b65      	ldr	r3, [pc, #404]	; (1b088 <xQueueGenericSend+0x35c>)
   1aef2:	881b      	ldrh	r3, [r3, #0]
   1aef4:	4013      	ands	r3, r2
   1aef6:	b29b      	uxth	r3, r3
   1aef8:	2b00      	cmp	r3, #0
   1aefa:	d02e      	beq.n	1af5a <xQueueGenericSend+0x22e>
   1aefc:	6a3b      	ldr	r3, [r7, #32]
   1aefe:	0018      	movs	r0, r3
   1af00:	4b62      	ldr	r3, [pc, #392]	; (1b08c <xQueueGenericSend+0x360>)
   1af02:	4798      	blx	r3
   1af04:	0003      	movs	r3, r0
   1af06:	001a      	movs	r2, r3
   1af08:	4b5f      	ldr	r3, [pc, #380]	; (1b088 <xQueueGenericSend+0x35c>)
   1af0a:	881b      	ldrh	r3, [r3, #0]
   1af0c:	4013      	ands	r3, r2
   1af0e:	b29b      	uxth	r3, r3
   1af10:	2b00      	cmp	r3, #0
   1af12:	d022      	beq.n	1af5a <xQueueGenericSend+0x22e>
   1af14:	683b      	ldr	r3, [r7, #0]
   1af16:	2b00      	cmp	r3, #0
   1af18:	d10b      	bne.n	1af32 <xQueueGenericSend+0x206>
   1af1a:	6a3b      	ldr	r3, [r7, #32]
   1af1c:	0018      	movs	r0, r3
   1af1e:	4b5c      	ldr	r3, [pc, #368]	; (1b090 <xQueueGenericSend+0x364>)
   1af20:	4798      	blx	r3
   1af22:	0003      	movs	r3, r0
   1af24:	001a      	movs	r2, r3
   1af26:	4b5b      	ldr	r3, [pc, #364]	; (1b094 <xQueueGenericSend+0x368>)
   1af28:	5c9b      	ldrb	r3, [r3, r2]
   1af2a:	3348      	adds	r3, #72	; 0x48
   1af2c:	b2db      	uxtb	r3, r3
   1af2e:	001d      	movs	r5, r3
   1af30:	e000      	b.n	1af34 <xQueueGenericSend+0x208>
   1af32:	254d      	movs	r5, #77	; 0x4d
   1af34:	6a3b      	ldr	r3, [r7, #32]
   1af36:	0018      	movs	r0, r3
   1af38:	4b55      	ldr	r3, [pc, #340]	; (1b090 <xQueueGenericSend+0x364>)
   1af3a:	4798      	blx	r3
   1af3c:	0003      	movs	r3, r0
   1af3e:	001a      	movs	r2, r3
   1af40:	4b54      	ldr	r3, [pc, #336]	; (1b094 <xQueueGenericSend+0x368>)
   1af42:	5c9c      	ldrb	r4, [r3, r2]
   1af44:	6a3b      	ldr	r3, [r7, #32]
   1af46:	0018      	movs	r0, r3
   1af48:	4b53      	ldr	r3, [pc, #332]	; (1b098 <xQueueGenericSend+0x36c>)
   1af4a:	4798      	blx	r3
   1af4c:	0003      	movs	r3, r0
   1af4e:	b2db      	uxtb	r3, r3
   1af50:	001a      	movs	r2, r3
   1af52:	0021      	movs	r1, r4
   1af54:	0028      	movs	r0, r5
   1af56:	4b51      	ldr	r3, [pc, #324]	; (1b09c <xQueueGenericSend+0x370>)
   1af58:	4798      	blx	r3
					return errQUEUE_FULL;
   1af5a:	2300      	movs	r3, #0
   1af5c:	e0fe      	b.n	1b15c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1af60:	2b00      	cmp	r3, #0
   1af62:	d106      	bne.n	1af72 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1af64:	2314      	movs	r3, #20
   1af66:	18fb      	adds	r3, r7, r3
   1af68:	0018      	movs	r0, r3
   1af6a:	4b53      	ldr	r3, [pc, #332]	; (1b0b8 <xQueueGenericSend+0x38c>)
   1af6c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1af6e:	2301      	movs	r3, #1
   1af70:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1af72:	4b50      	ldr	r3, [pc, #320]	; (1b0b4 <xQueueGenericSend+0x388>)
   1af74:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1af76:	4b51      	ldr	r3, [pc, #324]	; (1b0bc <xQueueGenericSend+0x390>)
   1af78:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1af7a:	4b40      	ldr	r3, [pc, #256]	; (1b07c <xQueueGenericSend+0x350>)
   1af7c:	4798      	blx	r3
   1af7e:	6a3b      	ldr	r3, [r7, #32]
   1af80:	2244      	movs	r2, #68	; 0x44
   1af82:	5c9b      	ldrb	r3, [r3, r2]
   1af84:	b25b      	sxtb	r3, r3
   1af86:	3301      	adds	r3, #1
   1af88:	d103      	bne.n	1af92 <xQueueGenericSend+0x266>
   1af8a:	6a3b      	ldr	r3, [r7, #32]
   1af8c:	2244      	movs	r2, #68	; 0x44
   1af8e:	2100      	movs	r1, #0
   1af90:	5499      	strb	r1, [r3, r2]
   1af92:	6a3b      	ldr	r3, [r7, #32]
   1af94:	2245      	movs	r2, #69	; 0x45
   1af96:	5c9b      	ldrb	r3, [r3, r2]
   1af98:	b25b      	sxtb	r3, r3
   1af9a:	3301      	adds	r3, #1
   1af9c:	d103      	bne.n	1afa6 <xQueueGenericSend+0x27a>
   1af9e:	6a3b      	ldr	r3, [r7, #32]
   1afa0:	2245      	movs	r2, #69	; 0x45
   1afa2:	2100      	movs	r1, #0
   1afa4:	5499      	strb	r1, [r3, r2]
   1afa6:	4b43      	ldr	r3, [pc, #268]	; (1b0b4 <xQueueGenericSend+0x388>)
   1afa8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1afaa:	1d3a      	adds	r2, r7, #4
   1afac:	2314      	movs	r3, #20
   1afae:	18fb      	adds	r3, r7, r3
   1afb0:	0011      	movs	r1, r2
   1afb2:	0018      	movs	r0, r3
   1afb4:	4b42      	ldr	r3, [pc, #264]	; (1b0c0 <xQueueGenericSend+0x394>)
   1afb6:	4798      	blx	r3
   1afb8:	1e03      	subs	r3, r0, #0
   1afba:	d000      	beq.n	1afbe <xQueueGenericSend+0x292>
   1afbc:	e08a      	b.n	1b0d4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1afbe:	6a3b      	ldr	r3, [r7, #32]
   1afc0:	0018      	movs	r0, r3
   1afc2:	4b40      	ldr	r3, [pc, #256]	; (1b0c4 <xQueueGenericSend+0x398>)
   1afc4:	4798      	blx	r3
   1afc6:	1e03      	subs	r3, r0, #0
   1afc8:	d04f      	beq.n	1b06a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1afca:	4b2d      	ldr	r3, [pc, #180]	; (1b080 <xQueueGenericSend+0x354>)
   1afcc:	4798      	blx	r3
   1afce:	0003      	movs	r3, r0
   1afd0:	0018      	movs	r0, r3
   1afd2:	4b2c      	ldr	r3, [pc, #176]	; (1b084 <xQueueGenericSend+0x358>)
   1afd4:	4798      	blx	r3
   1afd6:	0003      	movs	r3, r0
   1afd8:	001a      	movs	r2, r3
   1afda:	4b2b      	ldr	r3, [pc, #172]	; (1b088 <xQueueGenericSend+0x35c>)
   1afdc:	881b      	ldrh	r3, [r3, #0]
   1afde:	4013      	ands	r3, r2
   1afe0:	b29b      	uxth	r3, r3
   1afe2:	2b00      	cmp	r3, #0
   1afe4:	d02e      	beq.n	1b044 <xQueueGenericSend+0x318>
   1afe6:	6a3b      	ldr	r3, [r7, #32]
   1afe8:	0018      	movs	r0, r3
   1afea:	4b28      	ldr	r3, [pc, #160]	; (1b08c <xQueueGenericSend+0x360>)
   1afec:	4798      	blx	r3
   1afee:	0003      	movs	r3, r0
   1aff0:	001a      	movs	r2, r3
   1aff2:	4b25      	ldr	r3, [pc, #148]	; (1b088 <xQueueGenericSend+0x35c>)
   1aff4:	881b      	ldrh	r3, [r3, #0]
   1aff6:	4013      	ands	r3, r2
   1aff8:	b29b      	uxth	r3, r3
   1affa:	2b00      	cmp	r3, #0
   1affc:	d022      	beq.n	1b044 <xQueueGenericSend+0x318>
   1affe:	683b      	ldr	r3, [r7, #0]
   1b000:	2b00      	cmp	r3, #0
   1b002:	d10b      	bne.n	1b01c <xQueueGenericSend+0x2f0>
   1b004:	6a3b      	ldr	r3, [r7, #32]
   1b006:	0018      	movs	r0, r3
   1b008:	4b21      	ldr	r3, [pc, #132]	; (1b090 <xQueueGenericSend+0x364>)
   1b00a:	4798      	blx	r3
   1b00c:	0003      	movs	r3, r0
   1b00e:	001a      	movs	r2, r3
   1b010:	4b20      	ldr	r3, [pc, #128]	; (1b094 <xQueueGenericSend+0x368>)
   1b012:	5c9b      	ldrb	r3, [r3, r2]
   1b014:	3370      	adds	r3, #112	; 0x70
   1b016:	b2db      	uxtb	r3, r3
   1b018:	001d      	movs	r5, r3
   1b01a:	e000      	b.n	1b01e <xQueueGenericSend+0x2f2>
   1b01c:	2575      	movs	r5, #117	; 0x75
   1b01e:	6a3b      	ldr	r3, [r7, #32]
   1b020:	0018      	movs	r0, r3
   1b022:	4b1b      	ldr	r3, [pc, #108]	; (1b090 <xQueueGenericSend+0x364>)
   1b024:	4798      	blx	r3
   1b026:	0003      	movs	r3, r0
   1b028:	001a      	movs	r2, r3
   1b02a:	4b1a      	ldr	r3, [pc, #104]	; (1b094 <xQueueGenericSend+0x368>)
   1b02c:	5c9c      	ldrb	r4, [r3, r2]
   1b02e:	6a3b      	ldr	r3, [r7, #32]
   1b030:	0018      	movs	r0, r3
   1b032:	4b19      	ldr	r3, [pc, #100]	; (1b098 <xQueueGenericSend+0x36c>)
   1b034:	4798      	blx	r3
   1b036:	0003      	movs	r3, r0
   1b038:	b2db      	uxtb	r3, r3
   1b03a:	001a      	movs	r2, r3
   1b03c:	0021      	movs	r1, r4
   1b03e:	0028      	movs	r0, r5
   1b040:	4b16      	ldr	r3, [pc, #88]	; (1b09c <xQueueGenericSend+0x370>)
   1b042:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b044:	6a3b      	ldr	r3, [r7, #32]
   1b046:	3310      	adds	r3, #16
   1b048:	687a      	ldr	r2, [r7, #4]
   1b04a:	0011      	movs	r1, r2
   1b04c:	0018      	movs	r0, r3
   1b04e:	4b1e      	ldr	r3, [pc, #120]	; (1b0c8 <xQueueGenericSend+0x39c>)
   1b050:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b052:	6a3b      	ldr	r3, [r7, #32]
   1b054:	0018      	movs	r0, r3
   1b056:	4b1d      	ldr	r3, [pc, #116]	; (1b0cc <xQueueGenericSend+0x3a0>)
   1b058:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b05a:	4b1d      	ldr	r3, [pc, #116]	; (1b0d0 <xQueueGenericSend+0x3a4>)
   1b05c:	4798      	blx	r3
   1b05e:	1e03      	subs	r3, r0, #0
   1b060:	d000      	beq.n	1b064 <xQueueGenericSend+0x338>
   1b062:	e69d      	b.n	1ada0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1b064:	4b11      	ldr	r3, [pc, #68]	; (1b0ac <xQueueGenericSend+0x380>)
   1b066:	4798      	blx	r3
   1b068:	e69a      	b.n	1ada0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b06a:	6a3b      	ldr	r3, [r7, #32]
   1b06c:	0018      	movs	r0, r3
   1b06e:	4b17      	ldr	r3, [pc, #92]	; (1b0cc <xQueueGenericSend+0x3a0>)
   1b070:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b072:	4b17      	ldr	r3, [pc, #92]	; (1b0d0 <xQueueGenericSend+0x3a4>)
   1b074:	4798      	blx	r3
   1b076:	e693      	b.n	1ada0 <xQueueGenericSend+0x74>
   1b078:	0001d4b9 	.word	0x0001d4b9
   1b07c:	0001a799 	.word	0x0001a799
   1b080:	00018a31 	.word	0x00018a31
   1b084:	00018795 	.word	0x00018795
   1b088:	200000b8 	.word	0x200000b8
   1b08c:	00018855 	.word	0x00018855
   1b090:	00018755 	.word	0x00018755
   1b094:	200000ac 	.word	0x200000ac
   1b098:	00018835 	.word	0x00018835
   1b09c:	0001918d 	.word	0x0001918d
   1b0a0:	000197e9 	.word	0x000197e9
   1b0a4:	0001bf65 	.word	0x0001bf65
   1b0a8:	0001c269 	.word	0x0001c269
   1b0ac:	0001a781 	.word	0x0001a781
   1b0b0:	0001d029 	.word	0x0001d029
   1b0b4:	0001a7bd 	.word	0x0001a7bd
   1b0b8:	0001d169 	.word	0x0001d169
   1b0bc:	0001ca51 	.word	0x0001ca51
   1b0c0:	0001d191 	.word	0x0001d191
   1b0c4:	0001c1b9 	.word	0x0001c1b9
   1b0c8:	0001cf05 	.word	0x0001cf05
   1b0cc:	0001c095 	.word	0x0001c095
   1b0d0:	0001ca69 	.word	0x0001ca69
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b0d4:	6a3b      	ldr	r3, [r7, #32]
   1b0d6:	0018      	movs	r0, r3
   1b0d8:	4b22      	ldr	r3, [pc, #136]	; (1b164 <xQueueGenericSend+0x438>)
   1b0da:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b0dc:	4b22      	ldr	r3, [pc, #136]	; (1b168 <xQueueGenericSend+0x43c>)
   1b0de:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1b0e0:	4b22      	ldr	r3, [pc, #136]	; (1b16c <xQueueGenericSend+0x440>)
   1b0e2:	4798      	blx	r3
   1b0e4:	0003      	movs	r3, r0
   1b0e6:	0018      	movs	r0, r3
   1b0e8:	4b21      	ldr	r3, [pc, #132]	; (1b170 <xQueueGenericSend+0x444>)
   1b0ea:	4798      	blx	r3
   1b0ec:	0003      	movs	r3, r0
   1b0ee:	001a      	movs	r2, r3
   1b0f0:	4b20      	ldr	r3, [pc, #128]	; (1b174 <xQueueGenericSend+0x448>)
   1b0f2:	881b      	ldrh	r3, [r3, #0]
   1b0f4:	4013      	ands	r3, r2
   1b0f6:	b29b      	uxth	r3, r3
   1b0f8:	2b00      	cmp	r3, #0
   1b0fa:	d02e      	beq.n	1b15a <xQueueGenericSend+0x42e>
   1b0fc:	6a3b      	ldr	r3, [r7, #32]
   1b0fe:	0018      	movs	r0, r3
   1b100:	4b1d      	ldr	r3, [pc, #116]	; (1b178 <xQueueGenericSend+0x44c>)
   1b102:	4798      	blx	r3
   1b104:	0003      	movs	r3, r0
   1b106:	001a      	movs	r2, r3
   1b108:	4b1a      	ldr	r3, [pc, #104]	; (1b174 <xQueueGenericSend+0x448>)
   1b10a:	881b      	ldrh	r3, [r3, #0]
   1b10c:	4013      	ands	r3, r2
   1b10e:	b29b      	uxth	r3, r3
   1b110:	2b00      	cmp	r3, #0
   1b112:	d022      	beq.n	1b15a <xQueueGenericSend+0x42e>
   1b114:	683b      	ldr	r3, [r7, #0]
   1b116:	2b00      	cmp	r3, #0
   1b118:	d10b      	bne.n	1b132 <xQueueGenericSend+0x406>
   1b11a:	6a3b      	ldr	r3, [r7, #32]
   1b11c:	0018      	movs	r0, r3
   1b11e:	4b17      	ldr	r3, [pc, #92]	; (1b17c <xQueueGenericSend+0x450>)
   1b120:	4798      	blx	r3
   1b122:	0003      	movs	r3, r0
   1b124:	001a      	movs	r2, r3
   1b126:	4b16      	ldr	r3, [pc, #88]	; (1b180 <xQueueGenericSend+0x454>)
   1b128:	5c9b      	ldrb	r3, [r3, r2]
   1b12a:	3348      	adds	r3, #72	; 0x48
   1b12c:	b2db      	uxtb	r3, r3
   1b12e:	001d      	movs	r5, r3
   1b130:	e000      	b.n	1b134 <xQueueGenericSend+0x408>
   1b132:	254d      	movs	r5, #77	; 0x4d
   1b134:	6a3b      	ldr	r3, [r7, #32]
   1b136:	0018      	movs	r0, r3
   1b138:	4b10      	ldr	r3, [pc, #64]	; (1b17c <xQueueGenericSend+0x450>)
   1b13a:	4798      	blx	r3
   1b13c:	0003      	movs	r3, r0
   1b13e:	001a      	movs	r2, r3
   1b140:	4b0f      	ldr	r3, [pc, #60]	; (1b180 <xQueueGenericSend+0x454>)
   1b142:	5c9c      	ldrb	r4, [r3, r2]
   1b144:	6a3b      	ldr	r3, [r7, #32]
   1b146:	0018      	movs	r0, r3
   1b148:	4b0e      	ldr	r3, [pc, #56]	; (1b184 <xQueueGenericSend+0x458>)
   1b14a:	4798      	blx	r3
   1b14c:	0003      	movs	r3, r0
   1b14e:	b2db      	uxtb	r3, r3
   1b150:	001a      	movs	r2, r3
   1b152:	0021      	movs	r1, r4
   1b154:	0028      	movs	r0, r5
   1b156:	4b0c      	ldr	r3, [pc, #48]	; (1b188 <xQueueGenericSend+0x45c>)
   1b158:	4798      	blx	r3
			return errQUEUE_FULL;
   1b15a:	2300      	movs	r3, #0
		}
	}
}
   1b15c:	0018      	movs	r0, r3
   1b15e:	46bd      	mov	sp, r7
   1b160:	b00a      	add	sp, #40	; 0x28
   1b162:	bdb0      	pop	{r4, r5, r7, pc}
   1b164:	0001c095 	.word	0x0001c095
   1b168:	0001ca69 	.word	0x0001ca69
   1b16c:	00018a31 	.word	0x00018a31
   1b170:	00018795 	.word	0x00018795
   1b174:	200000b8 	.word	0x200000b8
   1b178:	00018855 	.word	0x00018855
   1b17c:	00018755 	.word	0x00018755
   1b180:	200000ac 	.word	0x200000ac
   1b184:	00018835 	.word	0x00018835
   1b188:	0001918d 	.word	0x0001918d

0001b18c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b18c:	b5b0      	push	{r4, r5, r7, lr}
   1b18e:	b088      	sub	sp, #32
   1b190:	af00      	add	r7, sp, #0
   1b192:	60f8      	str	r0, [r7, #12]
   1b194:	60b9      	str	r1, [r7, #8]
   1b196:	607a      	str	r2, [r7, #4]
   1b198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b19a:	68fb      	ldr	r3, [r7, #12]
   1b19c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b19e:	69bb      	ldr	r3, [r7, #24]
   1b1a0:	2b00      	cmp	r3, #0
   1b1a2:	d101      	bne.n	1b1a8 <xQueueGenericSendFromISR+0x1c>
   1b1a4:	b672      	cpsid	i
   1b1a6:	e7fe      	b.n	1b1a6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b1a8:	68bb      	ldr	r3, [r7, #8]
   1b1aa:	2b00      	cmp	r3, #0
   1b1ac:	d103      	bne.n	1b1b6 <xQueueGenericSendFromISR+0x2a>
   1b1ae:	69bb      	ldr	r3, [r7, #24]
   1b1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b1b2:	2b00      	cmp	r3, #0
   1b1b4:	d101      	bne.n	1b1ba <xQueueGenericSendFromISR+0x2e>
   1b1b6:	2301      	movs	r3, #1
   1b1b8:	e000      	b.n	1b1bc <xQueueGenericSendFromISR+0x30>
   1b1ba:	2300      	movs	r3, #0
   1b1bc:	2b00      	cmp	r3, #0
   1b1be:	d101      	bne.n	1b1c4 <xQueueGenericSendFromISR+0x38>
   1b1c0:	b672      	cpsid	i
   1b1c2:	e7fe      	b.n	1b1c2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b1c4:	683b      	ldr	r3, [r7, #0]
   1b1c6:	2b02      	cmp	r3, #2
   1b1c8:	d103      	bne.n	1b1d2 <xQueueGenericSendFromISR+0x46>
   1b1ca:	69bb      	ldr	r3, [r7, #24]
   1b1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b1ce:	2b01      	cmp	r3, #1
   1b1d0:	d101      	bne.n	1b1d6 <xQueueGenericSendFromISR+0x4a>
   1b1d2:	2301      	movs	r3, #1
   1b1d4:	e000      	b.n	1b1d8 <xQueueGenericSendFromISR+0x4c>
   1b1d6:	2300      	movs	r3, #0
   1b1d8:	2b00      	cmp	r3, #0
   1b1da:	d101      	bne.n	1b1e0 <xQueueGenericSendFromISR+0x54>
   1b1dc:	b672      	cpsid	i
   1b1de:	e7fe      	b.n	1b1de <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b1e0:	4b68      	ldr	r3, [pc, #416]	; (1b384 <xQueueGenericSendFromISR+0x1f8>)
   1b1e2:	4798      	blx	r3
   1b1e4:	0003      	movs	r3, r0
   1b1e6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b1e8:	69bb      	ldr	r3, [r7, #24]
   1b1ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b1ec:	69bb      	ldr	r3, [r7, #24]
   1b1ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b1f0:	429a      	cmp	r2, r3
   1b1f2:	d303      	bcc.n	1b1fc <xQueueGenericSendFromISR+0x70>
   1b1f4:	683b      	ldr	r3, [r7, #0]
   1b1f6:	2b02      	cmp	r3, #2
   1b1f8:	d000      	beq.n	1b1fc <xQueueGenericSendFromISR+0x70>
   1b1fa:	e088      	b.n	1b30e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b1fc:	2313      	movs	r3, #19
   1b1fe:	18fb      	adds	r3, r7, r3
   1b200:	69ba      	ldr	r2, [r7, #24]
   1b202:	2145      	movs	r1, #69	; 0x45
   1b204:	5c52      	ldrb	r2, [r2, r1]
   1b206:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b208:	69bb      	ldr	r3, [r7, #24]
   1b20a:	0018      	movs	r0, r3
   1b20c:	4b5e      	ldr	r3, [pc, #376]	; (1b388 <xQueueGenericSendFromISR+0x1fc>)
   1b20e:	4798      	blx	r3
   1b210:	0003      	movs	r3, r0
   1b212:	001a      	movs	r2, r3
   1b214:	4b5d      	ldr	r3, [pc, #372]	; (1b38c <xQueueGenericSendFromISR+0x200>)
   1b216:	881b      	ldrh	r3, [r3, #0]
   1b218:	4013      	ands	r3, r2
   1b21a:	b29b      	uxth	r3, r3
   1b21c:	2b00      	cmp	r3, #0
   1b21e:	d022      	beq.n	1b266 <xQueueGenericSendFromISR+0xda>
   1b220:	683b      	ldr	r3, [r7, #0]
   1b222:	2b00      	cmp	r3, #0
   1b224:	d10b      	bne.n	1b23e <xQueueGenericSendFromISR+0xb2>
   1b226:	69bb      	ldr	r3, [r7, #24]
   1b228:	0018      	movs	r0, r3
   1b22a:	4b59      	ldr	r3, [pc, #356]	; (1b390 <xQueueGenericSendFromISR+0x204>)
   1b22c:	4798      	blx	r3
   1b22e:	0003      	movs	r3, r0
   1b230:	001a      	movs	r2, r3
   1b232:	4b58      	ldr	r3, [pc, #352]	; (1b394 <xQueueGenericSendFromISR+0x208>)
   1b234:	5c9b      	ldrb	r3, [r3, r2]
   1b236:	3330      	adds	r3, #48	; 0x30
   1b238:	b2db      	uxtb	r3, r3
   1b23a:	001d      	movs	r5, r3
   1b23c:	e000      	b.n	1b240 <xQueueGenericSendFromISR+0xb4>
   1b23e:	2535      	movs	r5, #53	; 0x35
   1b240:	69bb      	ldr	r3, [r7, #24]
   1b242:	0018      	movs	r0, r3
   1b244:	4b52      	ldr	r3, [pc, #328]	; (1b390 <xQueueGenericSendFromISR+0x204>)
   1b246:	4798      	blx	r3
   1b248:	0003      	movs	r3, r0
   1b24a:	001a      	movs	r2, r3
   1b24c:	4b51      	ldr	r3, [pc, #324]	; (1b394 <xQueueGenericSendFromISR+0x208>)
   1b24e:	5c9c      	ldrb	r4, [r3, r2]
   1b250:	69bb      	ldr	r3, [r7, #24]
   1b252:	0018      	movs	r0, r3
   1b254:	4b50      	ldr	r3, [pc, #320]	; (1b398 <xQueueGenericSendFromISR+0x20c>)
   1b256:	4798      	blx	r3
   1b258:	0003      	movs	r3, r0
   1b25a:	b2db      	uxtb	r3, r3
   1b25c:	001a      	movs	r2, r3
   1b25e:	0021      	movs	r1, r4
   1b260:	0028      	movs	r0, r5
   1b262:	4b4e      	ldr	r3, [pc, #312]	; (1b39c <xQueueGenericSendFromISR+0x210>)
   1b264:	4798      	blx	r3
   1b266:	69bb      	ldr	r3, [r7, #24]
   1b268:	0018      	movs	r0, r3
   1b26a:	4b49      	ldr	r3, [pc, #292]	; (1b390 <xQueueGenericSendFromISR+0x204>)
   1b26c:	4798      	blx	r3
   1b26e:	0003      	movs	r3, r0
   1b270:	001a      	movs	r2, r3
   1b272:	4b48      	ldr	r3, [pc, #288]	; (1b394 <xQueueGenericSendFromISR+0x208>)
   1b274:	5c9c      	ldrb	r4, [r3, r2]
   1b276:	69bb      	ldr	r3, [r7, #24]
   1b278:	0018      	movs	r0, r3
   1b27a:	4b47      	ldr	r3, [pc, #284]	; (1b398 <xQueueGenericSendFromISR+0x20c>)
   1b27c:	4798      	blx	r3
   1b27e:	0003      	movs	r3, r0
   1b280:	b2d9      	uxtb	r1, r3
   1b282:	69bb      	ldr	r3, [r7, #24]
   1b284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b286:	b2db      	uxtb	r3, r3
   1b288:	3301      	adds	r3, #1
   1b28a:	b2db      	uxtb	r3, r3
   1b28c:	001a      	movs	r2, r3
   1b28e:	0020      	movs	r0, r4
   1b290:	4b43      	ldr	r3, [pc, #268]	; (1b3a0 <xQueueGenericSendFromISR+0x214>)
   1b292:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b294:	683a      	ldr	r2, [r7, #0]
   1b296:	68b9      	ldr	r1, [r7, #8]
   1b298:	69bb      	ldr	r3, [r7, #24]
   1b29a:	0018      	movs	r0, r3
   1b29c:	4b41      	ldr	r3, [pc, #260]	; (1b3a4 <xQueueGenericSendFromISR+0x218>)
   1b29e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b2a0:	2313      	movs	r3, #19
   1b2a2:	18fb      	adds	r3, r7, r3
   1b2a4:	781b      	ldrb	r3, [r3, #0]
   1b2a6:	b25b      	sxtb	r3, r3
   1b2a8:	3301      	adds	r3, #1
   1b2aa:	d124      	bne.n	1b2f6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b2ac:	69bb      	ldr	r3, [r7, #24]
   1b2ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b2b0:	2b00      	cmp	r3, #0
   1b2b2:	d00e      	beq.n	1b2d2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b2b4:	683a      	ldr	r2, [r7, #0]
   1b2b6:	69bb      	ldr	r3, [r7, #24]
   1b2b8:	0011      	movs	r1, r2
   1b2ba:	0018      	movs	r0, r3
   1b2bc:	4b3a      	ldr	r3, [pc, #232]	; (1b3a8 <xQueueGenericSendFromISR+0x21c>)
   1b2be:	4798      	blx	r3
   1b2c0:	1e03      	subs	r3, r0, #0
   1b2c2:	d021      	beq.n	1b308 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b2c4:	687b      	ldr	r3, [r7, #4]
   1b2c6:	2b00      	cmp	r3, #0
   1b2c8:	d01e      	beq.n	1b308 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b2ca:	687b      	ldr	r3, [r7, #4]
   1b2cc:	2201      	movs	r2, #1
   1b2ce:	601a      	str	r2, [r3, #0]
   1b2d0:	e01a      	b.n	1b308 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b2d2:	69bb      	ldr	r3, [r7, #24]
   1b2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b2d6:	2b00      	cmp	r3, #0
   1b2d8:	d016      	beq.n	1b308 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b2da:	69bb      	ldr	r3, [r7, #24]
   1b2dc:	3324      	adds	r3, #36	; 0x24
   1b2de:	0018      	movs	r0, r3
   1b2e0:	4b32      	ldr	r3, [pc, #200]	; (1b3ac <xQueueGenericSendFromISR+0x220>)
   1b2e2:	4798      	blx	r3
   1b2e4:	1e03      	subs	r3, r0, #0
   1b2e6:	d00f      	beq.n	1b308 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b2e8:	687b      	ldr	r3, [r7, #4]
   1b2ea:	2b00      	cmp	r3, #0
   1b2ec:	d00c      	beq.n	1b308 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b2ee:	687b      	ldr	r3, [r7, #4]
   1b2f0:	2201      	movs	r2, #1
   1b2f2:	601a      	str	r2, [r3, #0]
   1b2f4:	e008      	b.n	1b308 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b2f6:	2313      	movs	r3, #19
   1b2f8:	18fb      	adds	r3, r7, r3
   1b2fa:	781b      	ldrb	r3, [r3, #0]
   1b2fc:	3301      	adds	r3, #1
   1b2fe:	b2db      	uxtb	r3, r3
   1b300:	b259      	sxtb	r1, r3
   1b302:	69bb      	ldr	r3, [r7, #24]
   1b304:	2245      	movs	r2, #69	; 0x45
   1b306:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b308:	2301      	movs	r3, #1
   1b30a:	61fb      	str	r3, [r7, #28]
		{
   1b30c:	e030      	b.n	1b370 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b30e:	69bb      	ldr	r3, [r7, #24]
   1b310:	0018      	movs	r0, r3
   1b312:	4b1d      	ldr	r3, [pc, #116]	; (1b388 <xQueueGenericSendFromISR+0x1fc>)
   1b314:	4798      	blx	r3
   1b316:	0003      	movs	r3, r0
   1b318:	001a      	movs	r2, r3
   1b31a:	4b1c      	ldr	r3, [pc, #112]	; (1b38c <xQueueGenericSendFromISR+0x200>)
   1b31c:	881b      	ldrh	r3, [r3, #0]
   1b31e:	4013      	ands	r3, r2
   1b320:	b29b      	uxth	r3, r3
   1b322:	2b00      	cmp	r3, #0
   1b324:	d022      	beq.n	1b36c <xQueueGenericSendFromISR+0x1e0>
   1b326:	683b      	ldr	r3, [r7, #0]
   1b328:	2b00      	cmp	r3, #0
   1b32a:	d10b      	bne.n	1b344 <xQueueGenericSendFromISR+0x1b8>
   1b32c:	69bb      	ldr	r3, [r7, #24]
   1b32e:	0018      	movs	r0, r3
   1b330:	4b17      	ldr	r3, [pc, #92]	; (1b390 <xQueueGenericSendFromISR+0x204>)
   1b332:	4798      	blx	r3
   1b334:	0003      	movs	r3, r0
   1b336:	001a      	movs	r2, r3
   1b338:	4b16      	ldr	r3, [pc, #88]	; (1b394 <xQueueGenericSendFromISR+0x208>)
   1b33a:	5c9b      	ldrb	r3, [r3, r2]
   1b33c:	3358      	adds	r3, #88	; 0x58
   1b33e:	b2db      	uxtb	r3, r3
   1b340:	001d      	movs	r5, r3
   1b342:	e000      	b.n	1b346 <xQueueGenericSendFromISR+0x1ba>
   1b344:	255d      	movs	r5, #93	; 0x5d
   1b346:	69bb      	ldr	r3, [r7, #24]
   1b348:	0018      	movs	r0, r3
   1b34a:	4b11      	ldr	r3, [pc, #68]	; (1b390 <xQueueGenericSendFromISR+0x204>)
   1b34c:	4798      	blx	r3
   1b34e:	0003      	movs	r3, r0
   1b350:	001a      	movs	r2, r3
   1b352:	4b10      	ldr	r3, [pc, #64]	; (1b394 <xQueueGenericSendFromISR+0x208>)
   1b354:	5c9c      	ldrb	r4, [r3, r2]
   1b356:	69bb      	ldr	r3, [r7, #24]
   1b358:	0018      	movs	r0, r3
   1b35a:	4b0f      	ldr	r3, [pc, #60]	; (1b398 <xQueueGenericSendFromISR+0x20c>)
   1b35c:	4798      	blx	r3
   1b35e:	0003      	movs	r3, r0
   1b360:	b2db      	uxtb	r3, r3
   1b362:	001a      	movs	r2, r3
   1b364:	0021      	movs	r1, r4
   1b366:	0028      	movs	r0, r5
   1b368:	4b0c      	ldr	r3, [pc, #48]	; (1b39c <xQueueGenericSendFromISR+0x210>)
   1b36a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b36c:	2300      	movs	r3, #0
   1b36e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b370:	697b      	ldr	r3, [r7, #20]
   1b372:	0018      	movs	r0, r3
   1b374:	4b0e      	ldr	r3, [pc, #56]	; (1b3b0 <xQueueGenericSendFromISR+0x224>)
   1b376:	4798      	blx	r3

	return xReturn;
   1b378:	69fb      	ldr	r3, [r7, #28]
}
   1b37a:	0018      	movs	r0, r3
   1b37c:	46bd      	mov	sp, r7
   1b37e:	b008      	add	sp, #32
   1b380:	bdb0      	pop	{r4, r5, r7, pc}
   1b382:	46c0      	nop			; (mov r8, r8)
   1b384:	0001a7ed 	.word	0x0001a7ed
   1b388:	00018855 	.word	0x00018855
   1b38c:	200000b8 	.word	0x200000b8
   1b390:	00018755 	.word	0x00018755
   1b394:	200000ac 	.word	0x200000ac
   1b398:	00018835 	.word	0x00018835
   1b39c:	0001918d 	.word	0x0001918d
   1b3a0:	000197e9 	.word	0x000197e9
   1b3a4:	0001bf65 	.word	0x0001bf65
   1b3a8:	0001c269 	.word	0x0001c269
   1b3ac:	0001d029 	.word	0x0001d029
   1b3b0:	0001a7f9 	.word	0x0001a7f9

0001b3b4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1b3b4:	b580      	push	{r7, lr}
   1b3b6:	b082      	sub	sp, #8
   1b3b8:	af00      	add	r7, sp, #0
   1b3ba:	6078      	str	r0, [r7, #4]
   1b3bc:	6039      	str	r1, [r7, #0]
   1b3be:	6839      	ldr	r1, [r7, #0]
   1b3c0:	687b      	ldr	r3, [r7, #4]
   1b3c2:	2200      	movs	r2, #0
   1b3c4:	0018      	movs	r0, r3
   1b3c6:	4b03      	ldr	r3, [pc, #12]	; (1b3d4 <xQueueGiveFromISR+0x20>)
   1b3c8:	4798      	blx	r3
   1b3ca:	0003      	movs	r3, r0
   1b3cc:	0018      	movs	r0, r3
   1b3ce:	46bd      	mov	sp, r7
   1b3d0:	b002      	add	sp, #8
   1b3d2:	bd80      	pop	{r7, pc}
   1b3d4:	0001b3d9 	.word	0x0001b3d9

0001b3d8 <MyWrapper>:
{
   1b3d8:	b5b0      	push	{r4, r5, r7, lr}
   1b3da:	b08a      	sub	sp, #40	; 0x28
   1b3dc:	af00      	add	r7, sp, #0
   1b3de:	60f8      	str	r0, [r7, #12]
   1b3e0:	60b9      	str	r1, [r7, #8]
   1b3e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b3e4:	68fb      	ldr	r3, [r7, #12]
   1b3e6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1b3e8:	6a3b      	ldr	r3, [r7, #32]
   1b3ea:	2b00      	cmp	r3, #0
   1b3ec:	d101      	bne.n	1b3f2 <MyWrapper+0x1a>
   1b3ee:	b672      	cpsid	i
   1b3f0:	e7fe      	b.n	1b3f0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1b3f2:	6a3b      	ldr	r3, [r7, #32]
   1b3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b3f6:	2b00      	cmp	r3, #0
   1b3f8:	d001      	beq.n	1b3fe <MyWrapper+0x26>
   1b3fa:	b672      	cpsid	i
   1b3fc:	e7fe      	b.n	1b3fc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1b3fe:	6a3b      	ldr	r3, [r7, #32]
   1b400:	681b      	ldr	r3, [r3, #0]
   1b402:	2b00      	cmp	r3, #0
   1b404:	d103      	bne.n	1b40e <MyWrapper+0x36>
   1b406:	6a3b      	ldr	r3, [r7, #32]
   1b408:	685b      	ldr	r3, [r3, #4]
   1b40a:	2b00      	cmp	r3, #0
   1b40c:	d101      	bne.n	1b412 <MyWrapper+0x3a>
   1b40e:	2301      	movs	r3, #1
   1b410:	e000      	b.n	1b414 <MyWrapper+0x3c>
   1b412:	2300      	movs	r3, #0
   1b414:	2b00      	cmp	r3, #0
   1b416:	d101      	bne.n	1b41c <MyWrapper+0x44>
   1b418:	b672      	cpsid	i
   1b41a:	e7fe      	b.n	1b41a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b41c:	4b66      	ldr	r3, [pc, #408]	; (1b5b8 <MyWrapper+0x1e0>)
   1b41e:	4798      	blx	r3
   1b420:	0003      	movs	r3, r0
   1b422:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b424:	6a3b      	ldr	r3, [r7, #32]
   1b426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b428:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1b42a:	6a3b      	ldr	r3, [r7, #32]
   1b42c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1b42e:	69bb      	ldr	r3, [r7, #24]
   1b430:	429a      	cmp	r2, r3
   1b432:	d800      	bhi.n	1b436 <MyWrapper+0x5e>
   1b434:	e085      	b.n	1b542 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b436:	2317      	movs	r3, #23
   1b438:	18fb      	adds	r3, r7, r3
   1b43a:	6a3a      	ldr	r2, [r7, #32]
   1b43c:	2145      	movs	r1, #69	; 0x45
   1b43e:	5c52      	ldrb	r2, [r2, r1]
   1b440:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b442:	6a3b      	ldr	r3, [r7, #32]
   1b444:	0018      	movs	r0, r3
   1b446:	4b5d      	ldr	r3, [pc, #372]	; (1b5bc <MyWrapper+0x1e4>)
   1b448:	4798      	blx	r3
   1b44a:	0003      	movs	r3, r0
   1b44c:	001a      	movs	r2, r3
   1b44e:	4b5c      	ldr	r3, [pc, #368]	; (1b5c0 <MyWrapper+0x1e8>)
   1b450:	881b      	ldrh	r3, [r3, #0]
   1b452:	4013      	ands	r3, r2
   1b454:	b29b      	uxth	r3, r3
   1b456:	2b00      	cmp	r3, #0
   1b458:	d022      	beq.n	1b4a0 <MyWrapper+0xc8>
   1b45a:	687b      	ldr	r3, [r7, #4]
   1b45c:	2b00      	cmp	r3, #0
   1b45e:	d10b      	bne.n	1b478 <MyWrapper+0xa0>
   1b460:	6a3b      	ldr	r3, [r7, #32]
   1b462:	0018      	movs	r0, r3
   1b464:	4b57      	ldr	r3, [pc, #348]	; (1b5c4 <MyWrapper+0x1ec>)
   1b466:	4798      	blx	r3
   1b468:	0003      	movs	r3, r0
   1b46a:	001a      	movs	r2, r3
   1b46c:	4b56      	ldr	r3, [pc, #344]	; (1b5c8 <MyWrapper+0x1f0>)
   1b46e:	5c9b      	ldrb	r3, [r3, r2]
   1b470:	3330      	adds	r3, #48	; 0x30
   1b472:	b2db      	uxtb	r3, r3
   1b474:	001d      	movs	r5, r3
   1b476:	e000      	b.n	1b47a <MyWrapper+0xa2>
   1b478:	2535      	movs	r5, #53	; 0x35
   1b47a:	6a3b      	ldr	r3, [r7, #32]
   1b47c:	0018      	movs	r0, r3
   1b47e:	4b51      	ldr	r3, [pc, #324]	; (1b5c4 <MyWrapper+0x1ec>)
   1b480:	4798      	blx	r3
   1b482:	0003      	movs	r3, r0
   1b484:	001a      	movs	r2, r3
   1b486:	4b50      	ldr	r3, [pc, #320]	; (1b5c8 <MyWrapper+0x1f0>)
   1b488:	5c9c      	ldrb	r4, [r3, r2]
   1b48a:	6a3b      	ldr	r3, [r7, #32]
   1b48c:	0018      	movs	r0, r3
   1b48e:	4b4f      	ldr	r3, [pc, #316]	; (1b5cc <MyWrapper+0x1f4>)
   1b490:	4798      	blx	r3
   1b492:	0003      	movs	r3, r0
   1b494:	b2db      	uxtb	r3, r3
   1b496:	001a      	movs	r2, r3
   1b498:	0021      	movs	r1, r4
   1b49a:	0028      	movs	r0, r5
   1b49c:	4b4c      	ldr	r3, [pc, #304]	; (1b5d0 <MyWrapper+0x1f8>)
   1b49e:	4798      	blx	r3
   1b4a0:	6a3b      	ldr	r3, [r7, #32]
   1b4a2:	0018      	movs	r0, r3
   1b4a4:	4b47      	ldr	r3, [pc, #284]	; (1b5c4 <MyWrapper+0x1ec>)
   1b4a6:	4798      	blx	r3
   1b4a8:	0003      	movs	r3, r0
   1b4aa:	001a      	movs	r2, r3
   1b4ac:	4b46      	ldr	r3, [pc, #280]	; (1b5c8 <MyWrapper+0x1f0>)
   1b4ae:	5c9c      	ldrb	r4, [r3, r2]
   1b4b0:	6a3b      	ldr	r3, [r7, #32]
   1b4b2:	0018      	movs	r0, r3
   1b4b4:	4b45      	ldr	r3, [pc, #276]	; (1b5cc <MyWrapper+0x1f4>)
   1b4b6:	4798      	blx	r3
   1b4b8:	0003      	movs	r3, r0
   1b4ba:	b2d9      	uxtb	r1, r3
   1b4bc:	6a3b      	ldr	r3, [r7, #32]
   1b4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b4c0:	b2db      	uxtb	r3, r3
   1b4c2:	3301      	adds	r3, #1
   1b4c4:	b2db      	uxtb	r3, r3
   1b4c6:	001a      	movs	r2, r3
   1b4c8:	0020      	movs	r0, r4
   1b4ca:	4b42      	ldr	r3, [pc, #264]	; (1b5d4 <MyWrapper+0x1fc>)
   1b4cc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1b4ce:	69bb      	ldr	r3, [r7, #24]
   1b4d0:	1c5a      	adds	r2, r3, #1
   1b4d2:	6a3b      	ldr	r3, [r7, #32]
   1b4d4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b4d6:	2317      	movs	r3, #23
   1b4d8:	18fb      	adds	r3, r7, r3
   1b4da:	781b      	ldrb	r3, [r3, #0]
   1b4dc:	b25b      	sxtb	r3, r3
   1b4de:	3301      	adds	r3, #1
   1b4e0:	d123      	bne.n	1b52a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b4e2:	6a3b      	ldr	r3, [r7, #32]
   1b4e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b4e6:	2b00      	cmp	r3, #0
   1b4e8:	d00d      	beq.n	1b506 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1b4ea:	6a3b      	ldr	r3, [r7, #32]
   1b4ec:	2100      	movs	r1, #0
   1b4ee:	0018      	movs	r0, r3
   1b4f0:	4b39      	ldr	r3, [pc, #228]	; (1b5d8 <MyWrapper+0x200>)
   1b4f2:	4798      	blx	r3
   1b4f4:	1e03      	subs	r3, r0, #0
   1b4f6:	d021      	beq.n	1b53c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b4f8:	68bb      	ldr	r3, [r7, #8]
   1b4fa:	2b00      	cmp	r3, #0
   1b4fc:	d01e      	beq.n	1b53c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b4fe:	68bb      	ldr	r3, [r7, #8]
   1b500:	2201      	movs	r2, #1
   1b502:	601a      	str	r2, [r3, #0]
   1b504:	e01a      	b.n	1b53c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b506:	6a3b      	ldr	r3, [r7, #32]
   1b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b50a:	2b00      	cmp	r3, #0
   1b50c:	d016      	beq.n	1b53c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b50e:	6a3b      	ldr	r3, [r7, #32]
   1b510:	3324      	adds	r3, #36	; 0x24
   1b512:	0018      	movs	r0, r3
   1b514:	4b31      	ldr	r3, [pc, #196]	; (1b5dc <MyWrapper+0x204>)
   1b516:	4798      	blx	r3
   1b518:	1e03      	subs	r3, r0, #0
   1b51a:	d00f      	beq.n	1b53c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b51c:	68bb      	ldr	r3, [r7, #8]
   1b51e:	2b00      	cmp	r3, #0
   1b520:	d00c      	beq.n	1b53c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b522:	68bb      	ldr	r3, [r7, #8]
   1b524:	2201      	movs	r2, #1
   1b526:	601a      	str	r2, [r3, #0]
   1b528:	e008      	b.n	1b53c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b52a:	2317      	movs	r3, #23
   1b52c:	18fb      	adds	r3, r7, r3
   1b52e:	781b      	ldrb	r3, [r3, #0]
   1b530:	3301      	adds	r3, #1
   1b532:	b2db      	uxtb	r3, r3
   1b534:	b259      	sxtb	r1, r3
   1b536:	6a3b      	ldr	r3, [r7, #32]
   1b538:	2245      	movs	r2, #69	; 0x45
   1b53a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b53c:	2301      	movs	r3, #1
   1b53e:	627b      	str	r3, [r7, #36]	; 0x24
   1b540:	e030      	b.n	1b5a4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b542:	6a3b      	ldr	r3, [r7, #32]
   1b544:	0018      	movs	r0, r3
   1b546:	4b1d      	ldr	r3, [pc, #116]	; (1b5bc <MyWrapper+0x1e4>)
   1b548:	4798      	blx	r3
   1b54a:	0003      	movs	r3, r0
   1b54c:	001a      	movs	r2, r3
   1b54e:	4b1c      	ldr	r3, [pc, #112]	; (1b5c0 <MyWrapper+0x1e8>)
   1b550:	881b      	ldrh	r3, [r3, #0]
   1b552:	4013      	ands	r3, r2
   1b554:	b29b      	uxth	r3, r3
   1b556:	2b00      	cmp	r3, #0
   1b558:	d022      	beq.n	1b5a0 <MyWrapper+0x1c8>
   1b55a:	687b      	ldr	r3, [r7, #4]
   1b55c:	2b00      	cmp	r3, #0
   1b55e:	d10b      	bne.n	1b578 <MyWrapper+0x1a0>
   1b560:	6a3b      	ldr	r3, [r7, #32]
   1b562:	0018      	movs	r0, r3
   1b564:	4b17      	ldr	r3, [pc, #92]	; (1b5c4 <MyWrapper+0x1ec>)
   1b566:	4798      	blx	r3
   1b568:	0003      	movs	r3, r0
   1b56a:	001a      	movs	r2, r3
   1b56c:	4b16      	ldr	r3, [pc, #88]	; (1b5c8 <MyWrapper+0x1f0>)
   1b56e:	5c9b      	ldrb	r3, [r3, r2]
   1b570:	3358      	adds	r3, #88	; 0x58
   1b572:	b2db      	uxtb	r3, r3
   1b574:	001d      	movs	r5, r3
   1b576:	e000      	b.n	1b57a <MyWrapper+0x1a2>
   1b578:	255d      	movs	r5, #93	; 0x5d
   1b57a:	6a3b      	ldr	r3, [r7, #32]
   1b57c:	0018      	movs	r0, r3
   1b57e:	4b11      	ldr	r3, [pc, #68]	; (1b5c4 <MyWrapper+0x1ec>)
   1b580:	4798      	blx	r3
   1b582:	0003      	movs	r3, r0
   1b584:	001a      	movs	r2, r3
   1b586:	4b10      	ldr	r3, [pc, #64]	; (1b5c8 <MyWrapper+0x1f0>)
   1b588:	5c9c      	ldrb	r4, [r3, r2]
   1b58a:	6a3b      	ldr	r3, [r7, #32]
   1b58c:	0018      	movs	r0, r3
   1b58e:	4b0f      	ldr	r3, [pc, #60]	; (1b5cc <MyWrapper+0x1f4>)
   1b590:	4798      	blx	r3
   1b592:	0003      	movs	r3, r0
   1b594:	b2db      	uxtb	r3, r3
   1b596:	001a      	movs	r2, r3
   1b598:	0021      	movs	r1, r4
   1b59a:	0028      	movs	r0, r5
   1b59c:	4b0c      	ldr	r3, [pc, #48]	; (1b5d0 <MyWrapper+0x1f8>)
   1b59e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1b5a0:	2300      	movs	r3, #0
   1b5a2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1b5a4:	69fb      	ldr	r3, [r7, #28]
   1b5a6:	0018      	movs	r0, r3
   1b5a8:	4b0d      	ldr	r3, [pc, #52]	; (1b5e0 <MyWrapper+0x208>)
   1b5aa:	4798      	blx	r3

	return xReturn;
   1b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1b5ae:	0018      	movs	r0, r3
   1b5b0:	46bd      	mov	sp, r7
   1b5b2:	b00a      	add	sp, #40	; 0x28
   1b5b4:	bdb0      	pop	{r4, r5, r7, pc}
   1b5b6:	46c0      	nop			; (mov r8, r8)
   1b5b8:	0001a7ed 	.word	0x0001a7ed
   1b5bc:	00018855 	.word	0x00018855
   1b5c0:	200000b8 	.word	0x200000b8
   1b5c4:	00018755 	.word	0x00018755
   1b5c8:	200000ac 	.word	0x200000ac
   1b5cc:	00018835 	.word	0x00018835
   1b5d0:	0001918d 	.word	0x0001918d
   1b5d4:	000197e9 	.word	0x000197e9
   1b5d8:	0001c269 	.word	0x0001c269
   1b5dc:	0001d029 	.word	0x0001d029
   1b5e0:	0001a7f9 	.word	0x0001a7f9

0001b5e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1b5e4:	b5b0      	push	{r4, r5, r7, lr}
   1b5e6:	b08a      	sub	sp, #40	; 0x28
   1b5e8:	af00      	add	r7, sp, #0
   1b5ea:	60f8      	str	r0, [r7, #12]
   1b5ec:	60b9      	str	r1, [r7, #8]
   1b5ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1b5f0:	2300      	movs	r3, #0
   1b5f2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b5f4:	68fb      	ldr	r3, [r7, #12]
   1b5f6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1b5f8:	6a3b      	ldr	r3, [r7, #32]
   1b5fa:	2b00      	cmp	r3, #0
   1b5fc:	d101      	bne.n	1b602 <xQueueReceive+0x1e>
   1b5fe:	b672      	cpsid	i
   1b600:	e7fe      	b.n	1b600 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b602:	68bb      	ldr	r3, [r7, #8]
   1b604:	2b00      	cmp	r3, #0
   1b606:	d103      	bne.n	1b610 <xQueueReceive+0x2c>
   1b608:	6a3b      	ldr	r3, [r7, #32]
   1b60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b60c:	2b00      	cmp	r3, #0
   1b60e:	d101      	bne.n	1b614 <xQueueReceive+0x30>
   1b610:	2301      	movs	r3, #1
   1b612:	e000      	b.n	1b616 <xQueueReceive+0x32>
   1b614:	2300      	movs	r3, #0
   1b616:	2b00      	cmp	r3, #0
   1b618:	d101      	bne.n	1b61e <xQueueReceive+0x3a>
   1b61a:	b672      	cpsid	i
   1b61c:	e7fe      	b.n	1b61c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b61e:	4bbf      	ldr	r3, [pc, #764]	; (1b91c <xQueueReceive+0x338>)
   1b620:	4798      	blx	r3
   1b622:	1e03      	subs	r3, r0, #0
   1b624:	d102      	bne.n	1b62c <xQueueReceive+0x48>
   1b626:	687b      	ldr	r3, [r7, #4]
   1b628:	2b00      	cmp	r3, #0
   1b62a:	d101      	bne.n	1b630 <xQueueReceive+0x4c>
   1b62c:	2301      	movs	r3, #1
   1b62e:	e000      	b.n	1b632 <xQueueReceive+0x4e>
   1b630:	2300      	movs	r3, #0
   1b632:	2b00      	cmp	r3, #0
   1b634:	d101      	bne.n	1b63a <xQueueReceive+0x56>
   1b636:	b672      	cpsid	i
   1b638:	e7fe      	b.n	1b638 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1b63a:	4bb9      	ldr	r3, [pc, #740]	; (1b920 <xQueueReceive+0x33c>)
   1b63c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1b63e:	6a3b      	ldr	r3, [r7, #32]
   1b640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b642:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1b644:	69fb      	ldr	r3, [r7, #28]
   1b646:	2b00      	cmp	r3, #0
   1b648:	d100      	bne.n	1b64c <xQueueReceive+0x68>
   1b64a:	e07d      	b.n	1b748 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1b64c:	68ba      	ldr	r2, [r7, #8]
   1b64e:	6a3b      	ldr	r3, [r7, #32]
   1b650:	0011      	movs	r1, r2
   1b652:	0018      	movs	r0, r3
   1b654:	4bb3      	ldr	r3, [pc, #716]	; (1b924 <xQueueReceive+0x340>)
   1b656:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1b658:	4bb3      	ldr	r3, [pc, #716]	; (1b928 <xQueueReceive+0x344>)
   1b65a:	4798      	blx	r3
   1b65c:	0003      	movs	r3, r0
   1b65e:	0018      	movs	r0, r3
   1b660:	4bb2      	ldr	r3, [pc, #712]	; (1b92c <xQueueReceive+0x348>)
   1b662:	4798      	blx	r3
   1b664:	0003      	movs	r3, r0
   1b666:	001a      	movs	r2, r3
   1b668:	4bb1      	ldr	r3, [pc, #708]	; (1b930 <xQueueReceive+0x34c>)
   1b66a:	881b      	ldrh	r3, [r3, #0]
   1b66c:	4013      	ands	r3, r2
   1b66e:	b29b      	uxth	r3, r3
   1b670:	2b00      	cmp	r3, #0
   1b672:	d029      	beq.n	1b6c8 <xQueueReceive+0xe4>
   1b674:	6a3b      	ldr	r3, [r7, #32]
   1b676:	0018      	movs	r0, r3
   1b678:	4bae      	ldr	r3, [pc, #696]	; (1b934 <xQueueReceive+0x350>)
   1b67a:	4798      	blx	r3
   1b67c:	0003      	movs	r3, r0
   1b67e:	001a      	movs	r2, r3
   1b680:	4bab      	ldr	r3, [pc, #684]	; (1b930 <xQueueReceive+0x34c>)
   1b682:	881b      	ldrh	r3, [r3, #0]
   1b684:	4013      	ands	r3, r2
   1b686:	b29b      	uxth	r3, r3
   1b688:	2b00      	cmp	r3, #0
   1b68a:	d01d      	beq.n	1b6c8 <xQueueReceive+0xe4>
   1b68c:	6a3b      	ldr	r3, [r7, #32]
   1b68e:	0018      	movs	r0, r3
   1b690:	4ba9      	ldr	r3, [pc, #676]	; (1b938 <xQueueReceive+0x354>)
   1b692:	4798      	blx	r3
   1b694:	0003      	movs	r3, r0
   1b696:	001a      	movs	r2, r3
   1b698:	4ba8      	ldr	r3, [pc, #672]	; (1b93c <xQueueReceive+0x358>)
   1b69a:	5c9b      	ldrb	r3, [r3, r2]
   1b69c:	3328      	adds	r3, #40	; 0x28
   1b69e:	b2db      	uxtb	r3, r3
   1b6a0:	001d      	movs	r5, r3
   1b6a2:	6a3b      	ldr	r3, [r7, #32]
   1b6a4:	0018      	movs	r0, r3
   1b6a6:	4ba4      	ldr	r3, [pc, #656]	; (1b938 <xQueueReceive+0x354>)
   1b6a8:	4798      	blx	r3
   1b6aa:	0003      	movs	r3, r0
   1b6ac:	001a      	movs	r2, r3
   1b6ae:	4ba3      	ldr	r3, [pc, #652]	; (1b93c <xQueueReceive+0x358>)
   1b6b0:	5c9c      	ldrb	r4, [r3, r2]
   1b6b2:	6a3b      	ldr	r3, [r7, #32]
   1b6b4:	0018      	movs	r0, r3
   1b6b6:	4ba2      	ldr	r3, [pc, #648]	; (1b940 <xQueueReceive+0x35c>)
   1b6b8:	4798      	blx	r3
   1b6ba:	0003      	movs	r3, r0
   1b6bc:	b2db      	uxtb	r3, r3
   1b6be:	001a      	movs	r2, r3
   1b6c0:	0021      	movs	r1, r4
   1b6c2:	0028      	movs	r0, r5
   1b6c4:	4b9f      	ldr	r3, [pc, #636]	; (1b944 <xQueueReceive+0x360>)
   1b6c6:	4798      	blx	r3
   1b6c8:	6a3b      	ldr	r3, [r7, #32]
   1b6ca:	0018      	movs	r0, r3
   1b6cc:	4b9a      	ldr	r3, [pc, #616]	; (1b938 <xQueueReceive+0x354>)
   1b6ce:	4798      	blx	r3
   1b6d0:	0003      	movs	r3, r0
   1b6d2:	001a      	movs	r2, r3
   1b6d4:	4b99      	ldr	r3, [pc, #612]	; (1b93c <xQueueReceive+0x358>)
   1b6d6:	5c9c      	ldrb	r4, [r3, r2]
   1b6d8:	6a3b      	ldr	r3, [r7, #32]
   1b6da:	0018      	movs	r0, r3
   1b6dc:	4b98      	ldr	r3, [pc, #608]	; (1b940 <xQueueReceive+0x35c>)
   1b6de:	4798      	blx	r3
   1b6e0:	0003      	movs	r3, r0
   1b6e2:	b2dd      	uxtb	r5, r3
   1b6e4:	6a3b      	ldr	r3, [r7, #32]
   1b6e6:	0018      	movs	r0, r3
   1b6e8:	4b93      	ldr	r3, [pc, #588]	; (1b938 <xQueueReceive+0x354>)
   1b6ea:	4798      	blx	r3
   1b6ec:	0003      	movs	r3, r0
   1b6ee:	001a      	movs	r2, r3
   1b6f0:	4b92      	ldr	r3, [pc, #584]	; (1b93c <xQueueReceive+0x358>)
   1b6f2:	5c9b      	ldrb	r3, [r3, r2]
   1b6f4:	2b02      	cmp	r3, #2
   1b6f6:	d108      	bne.n	1b70a <xQueueReceive+0x126>
   1b6f8:	4b8b      	ldr	r3, [pc, #556]	; (1b928 <xQueueReceive+0x344>)
   1b6fa:	4798      	blx	r3
   1b6fc:	0003      	movs	r3, r0
   1b6fe:	0018      	movs	r0, r3
   1b700:	4b91      	ldr	r3, [pc, #580]	; (1b948 <xQueueReceive+0x364>)
   1b702:	4798      	blx	r3
   1b704:	0003      	movs	r3, r0
   1b706:	b2db      	uxtb	r3, r3
   1b708:	e004      	b.n	1b714 <xQueueReceive+0x130>
   1b70a:	6a3b      	ldr	r3, [r7, #32]
   1b70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b70e:	b2db      	uxtb	r3, r3
   1b710:	3b01      	subs	r3, #1
   1b712:	b2db      	uxtb	r3, r3
   1b714:	001a      	movs	r2, r3
   1b716:	0029      	movs	r1, r5
   1b718:	0020      	movs	r0, r4
   1b71a:	4b8c      	ldr	r3, [pc, #560]	; (1b94c <xQueueReceive+0x368>)
   1b71c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1b71e:	69fb      	ldr	r3, [r7, #28]
   1b720:	1e5a      	subs	r2, r3, #1
   1b722:	6a3b      	ldr	r3, [r7, #32]
   1b724:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b726:	6a3b      	ldr	r3, [r7, #32]
   1b728:	691b      	ldr	r3, [r3, #16]
   1b72a:	2b00      	cmp	r3, #0
   1b72c:	d008      	beq.n	1b740 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b72e:	6a3b      	ldr	r3, [r7, #32]
   1b730:	3310      	adds	r3, #16
   1b732:	0018      	movs	r0, r3
   1b734:	4b86      	ldr	r3, [pc, #536]	; (1b950 <xQueueReceive+0x36c>)
   1b736:	4798      	blx	r3
   1b738:	1e03      	subs	r3, r0, #0
   1b73a:	d001      	beq.n	1b740 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1b73c:	4b85      	ldr	r3, [pc, #532]	; (1b954 <xQueueReceive+0x370>)
   1b73e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1b740:	4b85      	ldr	r3, [pc, #532]	; (1b958 <xQueueReceive+0x374>)
   1b742:	4798      	blx	r3
				return pdPASS;
   1b744:	2301      	movs	r3, #1
   1b746:	e15f      	b.n	1ba08 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b748:	687b      	ldr	r3, [r7, #4]
   1b74a:	2b00      	cmp	r3, #0
   1b74c:	d13b      	bne.n	1b7c6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b74e:	4b82      	ldr	r3, [pc, #520]	; (1b958 <xQueueReceive+0x374>)
   1b750:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b752:	4b75      	ldr	r3, [pc, #468]	; (1b928 <xQueueReceive+0x344>)
   1b754:	4798      	blx	r3
   1b756:	0003      	movs	r3, r0
   1b758:	0018      	movs	r0, r3
   1b75a:	4b74      	ldr	r3, [pc, #464]	; (1b92c <xQueueReceive+0x348>)
   1b75c:	4798      	blx	r3
   1b75e:	0003      	movs	r3, r0
   1b760:	001a      	movs	r2, r3
   1b762:	4b73      	ldr	r3, [pc, #460]	; (1b930 <xQueueReceive+0x34c>)
   1b764:	881b      	ldrh	r3, [r3, #0]
   1b766:	4013      	ands	r3, r2
   1b768:	b29b      	uxth	r3, r3
   1b76a:	2b00      	cmp	r3, #0
   1b76c:	d029      	beq.n	1b7c2 <xQueueReceive+0x1de>
   1b76e:	6a3b      	ldr	r3, [r7, #32]
   1b770:	0018      	movs	r0, r3
   1b772:	4b70      	ldr	r3, [pc, #448]	; (1b934 <xQueueReceive+0x350>)
   1b774:	4798      	blx	r3
   1b776:	0003      	movs	r3, r0
   1b778:	001a      	movs	r2, r3
   1b77a:	4b6d      	ldr	r3, [pc, #436]	; (1b930 <xQueueReceive+0x34c>)
   1b77c:	881b      	ldrh	r3, [r3, #0]
   1b77e:	4013      	ands	r3, r2
   1b780:	b29b      	uxth	r3, r3
   1b782:	2b00      	cmp	r3, #0
   1b784:	d01d      	beq.n	1b7c2 <xQueueReceive+0x1de>
   1b786:	6a3b      	ldr	r3, [r7, #32]
   1b788:	0018      	movs	r0, r3
   1b78a:	4b6b      	ldr	r3, [pc, #428]	; (1b938 <xQueueReceive+0x354>)
   1b78c:	4798      	blx	r3
   1b78e:	0003      	movs	r3, r0
   1b790:	001a      	movs	r2, r3
   1b792:	4b6a      	ldr	r3, [pc, #424]	; (1b93c <xQueueReceive+0x358>)
   1b794:	5c9b      	ldrb	r3, [r3, r2]
   1b796:	3350      	adds	r3, #80	; 0x50
   1b798:	b2db      	uxtb	r3, r3
   1b79a:	001d      	movs	r5, r3
   1b79c:	6a3b      	ldr	r3, [r7, #32]
   1b79e:	0018      	movs	r0, r3
   1b7a0:	4b65      	ldr	r3, [pc, #404]	; (1b938 <xQueueReceive+0x354>)
   1b7a2:	4798      	blx	r3
   1b7a4:	0003      	movs	r3, r0
   1b7a6:	001a      	movs	r2, r3
   1b7a8:	4b64      	ldr	r3, [pc, #400]	; (1b93c <xQueueReceive+0x358>)
   1b7aa:	5c9c      	ldrb	r4, [r3, r2]
   1b7ac:	6a3b      	ldr	r3, [r7, #32]
   1b7ae:	0018      	movs	r0, r3
   1b7b0:	4b63      	ldr	r3, [pc, #396]	; (1b940 <xQueueReceive+0x35c>)
   1b7b2:	4798      	blx	r3
   1b7b4:	0003      	movs	r3, r0
   1b7b6:	b2db      	uxtb	r3, r3
   1b7b8:	001a      	movs	r2, r3
   1b7ba:	0021      	movs	r1, r4
   1b7bc:	0028      	movs	r0, r5
   1b7be:	4b61      	ldr	r3, [pc, #388]	; (1b944 <xQueueReceive+0x360>)
   1b7c0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1b7c2:	2300      	movs	r3, #0
   1b7c4:	e120      	b.n	1ba08 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b7c8:	2b00      	cmp	r3, #0
   1b7ca:	d106      	bne.n	1b7da <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b7cc:	2314      	movs	r3, #20
   1b7ce:	18fb      	adds	r3, r7, r3
   1b7d0:	0018      	movs	r0, r3
   1b7d2:	4b62      	ldr	r3, [pc, #392]	; (1b95c <xQueueReceive+0x378>)
   1b7d4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b7d6:	2301      	movs	r3, #1
   1b7d8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b7da:	4b5f      	ldr	r3, [pc, #380]	; (1b958 <xQueueReceive+0x374>)
   1b7dc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b7de:	4b60      	ldr	r3, [pc, #384]	; (1b960 <xQueueReceive+0x37c>)
   1b7e0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b7e2:	4b4f      	ldr	r3, [pc, #316]	; (1b920 <xQueueReceive+0x33c>)
   1b7e4:	4798      	blx	r3
   1b7e6:	6a3b      	ldr	r3, [r7, #32]
   1b7e8:	2244      	movs	r2, #68	; 0x44
   1b7ea:	5c9b      	ldrb	r3, [r3, r2]
   1b7ec:	b25b      	sxtb	r3, r3
   1b7ee:	3301      	adds	r3, #1
   1b7f0:	d103      	bne.n	1b7fa <xQueueReceive+0x216>
   1b7f2:	6a3b      	ldr	r3, [r7, #32]
   1b7f4:	2244      	movs	r2, #68	; 0x44
   1b7f6:	2100      	movs	r1, #0
   1b7f8:	5499      	strb	r1, [r3, r2]
   1b7fa:	6a3b      	ldr	r3, [r7, #32]
   1b7fc:	2245      	movs	r2, #69	; 0x45
   1b7fe:	5c9b      	ldrb	r3, [r3, r2]
   1b800:	b25b      	sxtb	r3, r3
   1b802:	3301      	adds	r3, #1
   1b804:	d103      	bne.n	1b80e <xQueueReceive+0x22a>
   1b806:	6a3b      	ldr	r3, [r7, #32]
   1b808:	2245      	movs	r2, #69	; 0x45
   1b80a:	2100      	movs	r1, #0
   1b80c:	5499      	strb	r1, [r3, r2]
   1b80e:	4b52      	ldr	r3, [pc, #328]	; (1b958 <xQueueReceive+0x374>)
   1b810:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b812:	1d3a      	adds	r2, r7, #4
   1b814:	2314      	movs	r3, #20
   1b816:	18fb      	adds	r3, r7, r3
   1b818:	0011      	movs	r1, r2
   1b81a:	0018      	movs	r0, r3
   1b81c:	4b51      	ldr	r3, [pc, #324]	; (1b964 <xQueueReceive+0x380>)
   1b81e:	4798      	blx	r3
   1b820:	1e03      	subs	r3, r0, #0
   1b822:	d000      	beq.n	1b826 <xQueueReceive+0x242>
   1b824:	e0aa      	b.n	1b97c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b826:	6a3b      	ldr	r3, [r7, #32]
   1b828:	0018      	movs	r0, r3
   1b82a:	4b4f      	ldr	r3, [pc, #316]	; (1b968 <xQueueReceive+0x384>)
   1b82c:	4798      	blx	r3
   1b82e:	1e03      	subs	r3, r0, #0
   1b830:	d06d      	beq.n	1b90e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1b832:	4b3d      	ldr	r3, [pc, #244]	; (1b928 <xQueueReceive+0x344>)
   1b834:	4798      	blx	r3
   1b836:	0003      	movs	r3, r0
   1b838:	0018      	movs	r0, r3
   1b83a:	4b3c      	ldr	r3, [pc, #240]	; (1b92c <xQueueReceive+0x348>)
   1b83c:	4798      	blx	r3
   1b83e:	0003      	movs	r3, r0
   1b840:	001a      	movs	r2, r3
   1b842:	4b3b      	ldr	r3, [pc, #236]	; (1b930 <xQueueReceive+0x34c>)
   1b844:	881b      	ldrh	r3, [r3, #0]
   1b846:	4013      	ands	r3, r2
   1b848:	b29b      	uxth	r3, r3
   1b84a:	2b00      	cmp	r3, #0
   1b84c:	d029      	beq.n	1b8a2 <xQueueReceive+0x2be>
   1b84e:	6a3b      	ldr	r3, [r7, #32]
   1b850:	0018      	movs	r0, r3
   1b852:	4b38      	ldr	r3, [pc, #224]	; (1b934 <xQueueReceive+0x350>)
   1b854:	4798      	blx	r3
   1b856:	0003      	movs	r3, r0
   1b858:	001a      	movs	r2, r3
   1b85a:	4b35      	ldr	r3, [pc, #212]	; (1b930 <xQueueReceive+0x34c>)
   1b85c:	881b      	ldrh	r3, [r3, #0]
   1b85e:	4013      	ands	r3, r2
   1b860:	b29b      	uxth	r3, r3
   1b862:	2b00      	cmp	r3, #0
   1b864:	d01d      	beq.n	1b8a2 <xQueueReceive+0x2be>
   1b866:	6a3b      	ldr	r3, [r7, #32]
   1b868:	0018      	movs	r0, r3
   1b86a:	4b33      	ldr	r3, [pc, #204]	; (1b938 <xQueueReceive+0x354>)
   1b86c:	4798      	blx	r3
   1b86e:	0003      	movs	r3, r0
   1b870:	001a      	movs	r2, r3
   1b872:	4b32      	ldr	r3, [pc, #200]	; (1b93c <xQueueReceive+0x358>)
   1b874:	5c9b      	ldrb	r3, [r3, r2]
   1b876:	3368      	adds	r3, #104	; 0x68
   1b878:	b2db      	uxtb	r3, r3
   1b87a:	001d      	movs	r5, r3
   1b87c:	6a3b      	ldr	r3, [r7, #32]
   1b87e:	0018      	movs	r0, r3
   1b880:	4b2d      	ldr	r3, [pc, #180]	; (1b938 <xQueueReceive+0x354>)
   1b882:	4798      	blx	r3
   1b884:	0003      	movs	r3, r0
   1b886:	001a      	movs	r2, r3
   1b888:	4b2c      	ldr	r3, [pc, #176]	; (1b93c <xQueueReceive+0x358>)
   1b88a:	5c9c      	ldrb	r4, [r3, r2]
   1b88c:	6a3b      	ldr	r3, [r7, #32]
   1b88e:	0018      	movs	r0, r3
   1b890:	4b2b      	ldr	r3, [pc, #172]	; (1b940 <xQueueReceive+0x35c>)
   1b892:	4798      	blx	r3
   1b894:	0003      	movs	r3, r0
   1b896:	b2db      	uxtb	r3, r3
   1b898:	001a      	movs	r2, r3
   1b89a:	0021      	movs	r1, r4
   1b89c:	0028      	movs	r0, r5
   1b89e:	4b29      	ldr	r3, [pc, #164]	; (1b944 <xQueueReceive+0x360>)
   1b8a0:	4798      	blx	r3
   1b8a2:	6a3b      	ldr	r3, [r7, #32]
   1b8a4:	0018      	movs	r0, r3
   1b8a6:	4b24      	ldr	r3, [pc, #144]	; (1b938 <xQueueReceive+0x354>)
   1b8a8:	4798      	blx	r3
   1b8aa:	0003      	movs	r3, r0
   1b8ac:	001a      	movs	r2, r3
   1b8ae:	4b23      	ldr	r3, [pc, #140]	; (1b93c <xQueueReceive+0x358>)
   1b8b0:	5c9b      	ldrb	r3, [r3, r2]
   1b8b2:	2b02      	cmp	r3, #2
   1b8b4:	d018      	beq.n	1b8e8 <xQueueReceive+0x304>
   1b8b6:	4b1c      	ldr	r3, [pc, #112]	; (1b928 <xQueueReceive+0x344>)
   1b8b8:	4798      	blx	r3
   1b8ba:	0003      	movs	r3, r0
   1b8bc:	0018      	movs	r0, r3
   1b8be:	4b1b      	ldr	r3, [pc, #108]	; (1b92c <xQueueReceive+0x348>)
   1b8c0:	4798      	blx	r3
   1b8c2:	0003      	movs	r3, r0
   1b8c4:	001a      	movs	r2, r3
   1b8c6:	4b1a      	ldr	r3, [pc, #104]	; (1b930 <xQueueReceive+0x34c>)
   1b8c8:	881b      	ldrh	r3, [r3, #0]
   1b8ca:	4013      	ands	r3, r2
   1b8cc:	b29b      	uxth	r3, r3
   1b8ce:	2b00      	cmp	r3, #0
   1b8d0:	d00a      	beq.n	1b8e8 <xQueueReceive+0x304>
   1b8d2:	4b15      	ldr	r3, [pc, #84]	; (1b928 <xQueueReceive+0x344>)
   1b8d4:	4798      	blx	r3
   1b8d6:	0003      	movs	r3, r0
   1b8d8:	0018      	movs	r0, r3
   1b8da:	4b1b      	ldr	r3, [pc, #108]	; (1b948 <xQueueReceive+0x364>)
   1b8dc:	4798      	blx	r3
   1b8de:	0003      	movs	r3, r0
   1b8e0:	b2db      	uxtb	r3, r3
   1b8e2:	0018      	movs	r0, r3
   1b8e4:	4b21      	ldr	r3, [pc, #132]	; (1b96c <xQueueReceive+0x388>)
   1b8e6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1b8e8:	6a3b      	ldr	r3, [r7, #32]
   1b8ea:	3324      	adds	r3, #36	; 0x24
   1b8ec:	687a      	ldr	r2, [r7, #4]
   1b8ee:	0011      	movs	r1, r2
   1b8f0:	0018      	movs	r0, r3
   1b8f2:	4b1f      	ldr	r3, [pc, #124]	; (1b970 <xQueueReceive+0x38c>)
   1b8f4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1b8f6:	6a3b      	ldr	r3, [r7, #32]
   1b8f8:	0018      	movs	r0, r3
   1b8fa:	4b1e      	ldr	r3, [pc, #120]	; (1b974 <xQueueReceive+0x390>)
   1b8fc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1b8fe:	4b1e      	ldr	r3, [pc, #120]	; (1b978 <xQueueReceive+0x394>)
   1b900:	4798      	blx	r3
   1b902:	1e03      	subs	r3, r0, #0
   1b904:	d000      	beq.n	1b908 <xQueueReceive+0x324>
   1b906:	e698      	b.n	1b63a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1b908:	4b12      	ldr	r3, [pc, #72]	; (1b954 <xQueueReceive+0x370>)
   1b90a:	4798      	blx	r3
   1b90c:	e695      	b.n	1b63a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1b90e:	6a3b      	ldr	r3, [r7, #32]
   1b910:	0018      	movs	r0, r3
   1b912:	4b18      	ldr	r3, [pc, #96]	; (1b974 <xQueueReceive+0x390>)
   1b914:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b916:	4b18      	ldr	r3, [pc, #96]	; (1b978 <xQueueReceive+0x394>)
   1b918:	4798      	blx	r3
   1b91a:	e68e      	b.n	1b63a <xQueueReceive+0x56>
   1b91c:	0001d4b9 	.word	0x0001d4b9
   1b920:	0001a799 	.word	0x0001a799
   1b924:	0001c045 	.word	0x0001c045
   1b928:	00018a31 	.word	0x00018a31
   1b92c:	00018795 	.word	0x00018795
   1b930:	200000b8 	.word	0x200000b8
   1b934:	00018855 	.word	0x00018855
   1b938:	00018755 	.word	0x00018755
   1b93c:	200000ac 	.word	0x200000ac
   1b940:	00018835 	.word	0x00018835
   1b944:	0001918d 	.word	0x0001918d
   1b948:	00018775 	.word	0x00018775
   1b94c:	000197e9 	.word	0x000197e9
   1b950:	0001d029 	.word	0x0001d029
   1b954:	0001a781 	.word	0x0001a781
   1b958:	0001a7bd 	.word	0x0001a7bd
   1b95c:	0001d169 	.word	0x0001d169
   1b960:	0001ca51 	.word	0x0001ca51
   1b964:	0001d191 	.word	0x0001d191
   1b968:	0001c185 	.word	0x0001c185
   1b96c:	00019925 	.word	0x00019925
   1b970:	0001cf05 	.word	0x0001cf05
   1b974:	0001c095 	.word	0x0001c095
   1b978:	0001ca69 	.word	0x0001ca69
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1b97c:	6a3b      	ldr	r3, [r7, #32]
   1b97e:	0018      	movs	r0, r3
   1b980:	4b23      	ldr	r3, [pc, #140]	; (1ba10 <xQueueReceive+0x42c>)
   1b982:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b984:	4b23      	ldr	r3, [pc, #140]	; (1ba14 <xQueueReceive+0x430>)
   1b986:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1b988:	6a3b      	ldr	r3, [r7, #32]
   1b98a:	0018      	movs	r0, r3
   1b98c:	4b22      	ldr	r3, [pc, #136]	; (1ba18 <xQueueReceive+0x434>)
   1b98e:	4798      	blx	r3
   1b990:	1e03      	subs	r3, r0, #0
   1b992:	d100      	bne.n	1b996 <xQueueReceive+0x3b2>
   1b994:	e651      	b.n	1b63a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1b996:	4b21      	ldr	r3, [pc, #132]	; (1ba1c <xQueueReceive+0x438>)
   1b998:	4798      	blx	r3
   1b99a:	0003      	movs	r3, r0
   1b99c:	0018      	movs	r0, r3
   1b99e:	4b20      	ldr	r3, [pc, #128]	; (1ba20 <xQueueReceive+0x43c>)
   1b9a0:	4798      	blx	r3
   1b9a2:	0003      	movs	r3, r0
   1b9a4:	001a      	movs	r2, r3
   1b9a6:	4b1f      	ldr	r3, [pc, #124]	; (1ba24 <xQueueReceive+0x440>)
   1b9a8:	881b      	ldrh	r3, [r3, #0]
   1b9aa:	4013      	ands	r3, r2
   1b9ac:	b29b      	uxth	r3, r3
   1b9ae:	2b00      	cmp	r3, #0
   1b9b0:	d029      	beq.n	1ba06 <xQueueReceive+0x422>
   1b9b2:	6a3b      	ldr	r3, [r7, #32]
   1b9b4:	0018      	movs	r0, r3
   1b9b6:	4b1c      	ldr	r3, [pc, #112]	; (1ba28 <xQueueReceive+0x444>)
   1b9b8:	4798      	blx	r3
   1b9ba:	0003      	movs	r3, r0
   1b9bc:	001a      	movs	r2, r3
   1b9be:	4b19      	ldr	r3, [pc, #100]	; (1ba24 <xQueueReceive+0x440>)
   1b9c0:	881b      	ldrh	r3, [r3, #0]
   1b9c2:	4013      	ands	r3, r2
   1b9c4:	b29b      	uxth	r3, r3
   1b9c6:	2b00      	cmp	r3, #0
   1b9c8:	d01d      	beq.n	1ba06 <xQueueReceive+0x422>
   1b9ca:	6a3b      	ldr	r3, [r7, #32]
   1b9cc:	0018      	movs	r0, r3
   1b9ce:	4b17      	ldr	r3, [pc, #92]	; (1ba2c <xQueueReceive+0x448>)
   1b9d0:	4798      	blx	r3
   1b9d2:	0003      	movs	r3, r0
   1b9d4:	001a      	movs	r2, r3
   1b9d6:	4b16      	ldr	r3, [pc, #88]	; (1ba30 <xQueueReceive+0x44c>)
   1b9d8:	5c9b      	ldrb	r3, [r3, r2]
   1b9da:	3350      	adds	r3, #80	; 0x50
   1b9dc:	b2db      	uxtb	r3, r3
   1b9de:	001d      	movs	r5, r3
   1b9e0:	6a3b      	ldr	r3, [r7, #32]
   1b9e2:	0018      	movs	r0, r3
   1b9e4:	4b11      	ldr	r3, [pc, #68]	; (1ba2c <xQueueReceive+0x448>)
   1b9e6:	4798      	blx	r3
   1b9e8:	0003      	movs	r3, r0
   1b9ea:	001a      	movs	r2, r3
   1b9ec:	4b10      	ldr	r3, [pc, #64]	; (1ba30 <xQueueReceive+0x44c>)
   1b9ee:	5c9c      	ldrb	r4, [r3, r2]
   1b9f0:	6a3b      	ldr	r3, [r7, #32]
   1b9f2:	0018      	movs	r0, r3
   1b9f4:	4b0f      	ldr	r3, [pc, #60]	; (1ba34 <xQueueReceive+0x450>)
   1b9f6:	4798      	blx	r3
   1b9f8:	0003      	movs	r3, r0
   1b9fa:	b2db      	uxtb	r3, r3
   1b9fc:	001a      	movs	r2, r3
   1b9fe:	0021      	movs	r1, r4
   1ba00:	0028      	movs	r0, r5
   1ba02:	4b0d      	ldr	r3, [pc, #52]	; (1ba38 <xQueueReceive+0x454>)
   1ba04:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1ba06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1ba08:	0018      	movs	r0, r3
   1ba0a:	46bd      	mov	sp, r7
   1ba0c:	b00a      	add	sp, #40	; 0x28
   1ba0e:	bdb0      	pop	{r4, r5, r7, pc}
   1ba10:	0001c095 	.word	0x0001c095
   1ba14:	0001ca69 	.word	0x0001ca69
   1ba18:	0001c185 	.word	0x0001c185
   1ba1c:	00018a31 	.word	0x00018a31
   1ba20:	00018795 	.word	0x00018795
   1ba24:	200000b8 	.word	0x200000b8
   1ba28:	00018855 	.word	0x00018855
   1ba2c:	00018755 	.word	0x00018755
   1ba30:	200000ac 	.word	0x200000ac
   1ba34:	00018835 	.word	0x00018835
   1ba38:	0001918d 	.word	0x0001918d

0001ba3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1ba3c:	b5b0      	push	{r4, r5, r7, lr}
   1ba3e:	b08a      	sub	sp, #40	; 0x28
   1ba40:	af00      	add	r7, sp, #0
   1ba42:	6078      	str	r0, [r7, #4]
   1ba44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1ba46:	2300      	movs	r3, #0
   1ba48:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ba4a:	687b      	ldr	r3, [r7, #4]
   1ba4c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1ba4e:	2300      	movs	r3, #0
   1ba50:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1ba52:	69fb      	ldr	r3, [r7, #28]
   1ba54:	2b00      	cmp	r3, #0
   1ba56:	d101      	bne.n	1ba5c <xQueueSemaphoreTake+0x20>
   1ba58:	b672      	cpsid	i
   1ba5a:	e7fe      	b.n	1ba5a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1ba5c:	69fb      	ldr	r3, [r7, #28]
   1ba5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ba60:	2b00      	cmp	r3, #0
   1ba62:	d001      	beq.n	1ba68 <xQueueSemaphoreTake+0x2c>
   1ba64:	b672      	cpsid	i
   1ba66:	e7fe      	b.n	1ba66 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1ba68:	4bcb      	ldr	r3, [pc, #812]	; (1bd98 <xQueueSemaphoreTake+0x35c>)
   1ba6a:	4798      	blx	r3
   1ba6c:	1e03      	subs	r3, r0, #0
   1ba6e:	d102      	bne.n	1ba76 <xQueueSemaphoreTake+0x3a>
   1ba70:	683b      	ldr	r3, [r7, #0]
   1ba72:	2b00      	cmp	r3, #0
   1ba74:	d101      	bne.n	1ba7a <xQueueSemaphoreTake+0x3e>
   1ba76:	2301      	movs	r3, #1
   1ba78:	e000      	b.n	1ba7c <xQueueSemaphoreTake+0x40>
   1ba7a:	2300      	movs	r3, #0
   1ba7c:	2b00      	cmp	r3, #0
   1ba7e:	d101      	bne.n	1ba84 <xQueueSemaphoreTake+0x48>
   1ba80:	b672      	cpsid	i
   1ba82:	e7fe      	b.n	1ba82 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1ba84:	4bc5      	ldr	r3, [pc, #788]	; (1bd9c <xQueueSemaphoreTake+0x360>)
   1ba86:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1ba88:	69fb      	ldr	r3, [r7, #28]
   1ba8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ba8c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1ba8e:	69bb      	ldr	r3, [r7, #24]
   1ba90:	2b00      	cmp	r3, #0
   1ba92:	d100      	bne.n	1ba96 <xQueueSemaphoreTake+0x5a>
   1ba94:	e080      	b.n	1bb98 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1ba96:	4bc2      	ldr	r3, [pc, #776]	; (1bda0 <xQueueSemaphoreTake+0x364>)
   1ba98:	4798      	blx	r3
   1ba9a:	0003      	movs	r3, r0
   1ba9c:	0018      	movs	r0, r3
   1ba9e:	4bc1      	ldr	r3, [pc, #772]	; (1bda4 <xQueueSemaphoreTake+0x368>)
   1baa0:	4798      	blx	r3
   1baa2:	0003      	movs	r3, r0
   1baa4:	001a      	movs	r2, r3
   1baa6:	4bc0      	ldr	r3, [pc, #768]	; (1bda8 <xQueueSemaphoreTake+0x36c>)
   1baa8:	881b      	ldrh	r3, [r3, #0]
   1baaa:	4013      	ands	r3, r2
   1baac:	b29b      	uxth	r3, r3
   1baae:	2b00      	cmp	r3, #0
   1bab0:	d029      	beq.n	1bb06 <xQueueSemaphoreTake+0xca>
   1bab2:	69fb      	ldr	r3, [r7, #28]
   1bab4:	0018      	movs	r0, r3
   1bab6:	4bbd      	ldr	r3, [pc, #756]	; (1bdac <xQueueSemaphoreTake+0x370>)
   1bab8:	4798      	blx	r3
   1baba:	0003      	movs	r3, r0
   1babc:	001a      	movs	r2, r3
   1babe:	4bba      	ldr	r3, [pc, #744]	; (1bda8 <xQueueSemaphoreTake+0x36c>)
   1bac0:	881b      	ldrh	r3, [r3, #0]
   1bac2:	4013      	ands	r3, r2
   1bac4:	b29b      	uxth	r3, r3
   1bac6:	2b00      	cmp	r3, #0
   1bac8:	d01d      	beq.n	1bb06 <xQueueSemaphoreTake+0xca>
   1baca:	69fb      	ldr	r3, [r7, #28]
   1bacc:	0018      	movs	r0, r3
   1bace:	4bb8      	ldr	r3, [pc, #736]	; (1bdb0 <xQueueSemaphoreTake+0x374>)
   1bad0:	4798      	blx	r3
   1bad2:	0003      	movs	r3, r0
   1bad4:	001a      	movs	r2, r3
   1bad6:	4bb7      	ldr	r3, [pc, #732]	; (1bdb4 <xQueueSemaphoreTake+0x378>)
   1bad8:	5c9b      	ldrb	r3, [r3, r2]
   1bada:	3328      	adds	r3, #40	; 0x28
   1badc:	b2db      	uxtb	r3, r3
   1bade:	001d      	movs	r5, r3
   1bae0:	69fb      	ldr	r3, [r7, #28]
   1bae2:	0018      	movs	r0, r3
   1bae4:	4bb2      	ldr	r3, [pc, #712]	; (1bdb0 <xQueueSemaphoreTake+0x374>)
   1bae6:	4798      	blx	r3
   1bae8:	0003      	movs	r3, r0
   1baea:	001a      	movs	r2, r3
   1baec:	4bb1      	ldr	r3, [pc, #708]	; (1bdb4 <xQueueSemaphoreTake+0x378>)
   1baee:	5c9c      	ldrb	r4, [r3, r2]
   1baf0:	69fb      	ldr	r3, [r7, #28]
   1baf2:	0018      	movs	r0, r3
   1baf4:	4bb0      	ldr	r3, [pc, #704]	; (1bdb8 <xQueueSemaphoreTake+0x37c>)
   1baf6:	4798      	blx	r3
   1baf8:	0003      	movs	r3, r0
   1bafa:	b2db      	uxtb	r3, r3
   1bafc:	001a      	movs	r2, r3
   1bafe:	0021      	movs	r1, r4
   1bb00:	0028      	movs	r0, r5
   1bb02:	4bae      	ldr	r3, [pc, #696]	; (1bdbc <xQueueSemaphoreTake+0x380>)
   1bb04:	4798      	blx	r3
   1bb06:	69fb      	ldr	r3, [r7, #28]
   1bb08:	0018      	movs	r0, r3
   1bb0a:	4ba9      	ldr	r3, [pc, #676]	; (1bdb0 <xQueueSemaphoreTake+0x374>)
   1bb0c:	4798      	blx	r3
   1bb0e:	0003      	movs	r3, r0
   1bb10:	001a      	movs	r2, r3
   1bb12:	4ba8      	ldr	r3, [pc, #672]	; (1bdb4 <xQueueSemaphoreTake+0x378>)
   1bb14:	5c9c      	ldrb	r4, [r3, r2]
   1bb16:	69fb      	ldr	r3, [r7, #28]
   1bb18:	0018      	movs	r0, r3
   1bb1a:	4ba7      	ldr	r3, [pc, #668]	; (1bdb8 <xQueueSemaphoreTake+0x37c>)
   1bb1c:	4798      	blx	r3
   1bb1e:	0003      	movs	r3, r0
   1bb20:	b2dd      	uxtb	r5, r3
   1bb22:	69fb      	ldr	r3, [r7, #28]
   1bb24:	0018      	movs	r0, r3
   1bb26:	4ba2      	ldr	r3, [pc, #648]	; (1bdb0 <xQueueSemaphoreTake+0x374>)
   1bb28:	4798      	blx	r3
   1bb2a:	0003      	movs	r3, r0
   1bb2c:	001a      	movs	r2, r3
   1bb2e:	4ba1      	ldr	r3, [pc, #644]	; (1bdb4 <xQueueSemaphoreTake+0x378>)
   1bb30:	5c9b      	ldrb	r3, [r3, r2]
   1bb32:	2b02      	cmp	r3, #2
   1bb34:	d108      	bne.n	1bb48 <xQueueSemaphoreTake+0x10c>
   1bb36:	4b9a      	ldr	r3, [pc, #616]	; (1bda0 <xQueueSemaphoreTake+0x364>)
   1bb38:	4798      	blx	r3
   1bb3a:	0003      	movs	r3, r0
   1bb3c:	0018      	movs	r0, r3
   1bb3e:	4ba0      	ldr	r3, [pc, #640]	; (1bdc0 <xQueueSemaphoreTake+0x384>)
   1bb40:	4798      	blx	r3
   1bb42:	0003      	movs	r3, r0
   1bb44:	b2db      	uxtb	r3, r3
   1bb46:	e004      	b.n	1bb52 <xQueueSemaphoreTake+0x116>
   1bb48:	69fb      	ldr	r3, [r7, #28]
   1bb4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb4c:	b2db      	uxtb	r3, r3
   1bb4e:	3b01      	subs	r3, #1
   1bb50:	b2db      	uxtb	r3, r3
   1bb52:	001a      	movs	r2, r3
   1bb54:	0029      	movs	r1, r5
   1bb56:	0020      	movs	r0, r4
   1bb58:	4b9a      	ldr	r3, [pc, #616]	; (1bdc4 <xQueueSemaphoreTake+0x388>)
   1bb5a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1bb5c:	69bb      	ldr	r3, [r7, #24]
   1bb5e:	1e5a      	subs	r2, r3, #1
   1bb60:	69fb      	ldr	r3, [r7, #28]
   1bb62:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1bb64:	69fb      	ldr	r3, [r7, #28]
   1bb66:	681b      	ldr	r3, [r3, #0]
   1bb68:	2b00      	cmp	r3, #0
   1bb6a:	d104      	bne.n	1bb76 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1bb6c:	4b96      	ldr	r3, [pc, #600]	; (1bdc8 <xQueueSemaphoreTake+0x38c>)
   1bb6e:	4798      	blx	r3
   1bb70:	0002      	movs	r2, r0
   1bb72:	69fb      	ldr	r3, [r7, #28]
   1bb74:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bb76:	69fb      	ldr	r3, [r7, #28]
   1bb78:	691b      	ldr	r3, [r3, #16]
   1bb7a:	2b00      	cmp	r3, #0
   1bb7c:	d008      	beq.n	1bb90 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bb7e:	69fb      	ldr	r3, [r7, #28]
   1bb80:	3310      	adds	r3, #16
   1bb82:	0018      	movs	r0, r3
   1bb84:	4b91      	ldr	r3, [pc, #580]	; (1bdcc <xQueueSemaphoreTake+0x390>)
   1bb86:	4798      	blx	r3
   1bb88:	1e03      	subs	r3, r0, #0
   1bb8a:	d001      	beq.n	1bb90 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1bb8c:	4b90      	ldr	r3, [pc, #576]	; (1bdd0 <xQueueSemaphoreTake+0x394>)
   1bb8e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1bb90:	4b90      	ldr	r3, [pc, #576]	; (1bdd4 <xQueueSemaphoreTake+0x398>)
   1bb92:	4798      	blx	r3
				return pdPASS;
   1bb94:	2301      	movs	r3, #1
   1bb96:	e18b      	b.n	1beb0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bb98:	683b      	ldr	r3, [r7, #0]
   1bb9a:	2b00      	cmp	r3, #0
   1bb9c:	d140      	bne.n	1bc20 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1bb9e:	6a3b      	ldr	r3, [r7, #32]
   1bba0:	2b00      	cmp	r3, #0
   1bba2:	d001      	beq.n	1bba8 <xQueueSemaphoreTake+0x16c>
   1bba4:	b672      	cpsid	i
   1bba6:	e7fe      	b.n	1bba6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1bba8:	4b8a      	ldr	r3, [pc, #552]	; (1bdd4 <xQueueSemaphoreTake+0x398>)
   1bbaa:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bbac:	4b7c      	ldr	r3, [pc, #496]	; (1bda0 <xQueueSemaphoreTake+0x364>)
   1bbae:	4798      	blx	r3
   1bbb0:	0003      	movs	r3, r0
   1bbb2:	0018      	movs	r0, r3
   1bbb4:	4b7b      	ldr	r3, [pc, #492]	; (1bda4 <xQueueSemaphoreTake+0x368>)
   1bbb6:	4798      	blx	r3
   1bbb8:	0003      	movs	r3, r0
   1bbba:	001a      	movs	r2, r3
   1bbbc:	4b7a      	ldr	r3, [pc, #488]	; (1bda8 <xQueueSemaphoreTake+0x36c>)
   1bbbe:	881b      	ldrh	r3, [r3, #0]
   1bbc0:	4013      	ands	r3, r2
   1bbc2:	b29b      	uxth	r3, r3
   1bbc4:	2b00      	cmp	r3, #0
   1bbc6:	d029      	beq.n	1bc1c <xQueueSemaphoreTake+0x1e0>
   1bbc8:	69fb      	ldr	r3, [r7, #28]
   1bbca:	0018      	movs	r0, r3
   1bbcc:	4b77      	ldr	r3, [pc, #476]	; (1bdac <xQueueSemaphoreTake+0x370>)
   1bbce:	4798      	blx	r3
   1bbd0:	0003      	movs	r3, r0
   1bbd2:	001a      	movs	r2, r3
   1bbd4:	4b74      	ldr	r3, [pc, #464]	; (1bda8 <xQueueSemaphoreTake+0x36c>)
   1bbd6:	881b      	ldrh	r3, [r3, #0]
   1bbd8:	4013      	ands	r3, r2
   1bbda:	b29b      	uxth	r3, r3
   1bbdc:	2b00      	cmp	r3, #0
   1bbde:	d01d      	beq.n	1bc1c <xQueueSemaphoreTake+0x1e0>
   1bbe0:	69fb      	ldr	r3, [r7, #28]
   1bbe2:	0018      	movs	r0, r3
   1bbe4:	4b72      	ldr	r3, [pc, #456]	; (1bdb0 <xQueueSemaphoreTake+0x374>)
   1bbe6:	4798      	blx	r3
   1bbe8:	0003      	movs	r3, r0
   1bbea:	001a      	movs	r2, r3
   1bbec:	4b71      	ldr	r3, [pc, #452]	; (1bdb4 <xQueueSemaphoreTake+0x378>)
   1bbee:	5c9b      	ldrb	r3, [r3, r2]
   1bbf0:	3350      	adds	r3, #80	; 0x50
   1bbf2:	b2db      	uxtb	r3, r3
   1bbf4:	001d      	movs	r5, r3
   1bbf6:	69fb      	ldr	r3, [r7, #28]
   1bbf8:	0018      	movs	r0, r3
   1bbfa:	4b6d      	ldr	r3, [pc, #436]	; (1bdb0 <xQueueSemaphoreTake+0x374>)
   1bbfc:	4798      	blx	r3
   1bbfe:	0003      	movs	r3, r0
   1bc00:	001a      	movs	r2, r3
   1bc02:	4b6c      	ldr	r3, [pc, #432]	; (1bdb4 <xQueueSemaphoreTake+0x378>)
   1bc04:	5c9c      	ldrb	r4, [r3, r2]
   1bc06:	69fb      	ldr	r3, [r7, #28]
   1bc08:	0018      	movs	r0, r3
   1bc0a:	4b6b      	ldr	r3, [pc, #428]	; (1bdb8 <xQueueSemaphoreTake+0x37c>)
   1bc0c:	4798      	blx	r3
   1bc0e:	0003      	movs	r3, r0
   1bc10:	b2db      	uxtb	r3, r3
   1bc12:	001a      	movs	r2, r3
   1bc14:	0021      	movs	r1, r4
   1bc16:	0028      	movs	r0, r5
   1bc18:	4b68      	ldr	r3, [pc, #416]	; (1bdbc <xQueueSemaphoreTake+0x380>)
   1bc1a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1bc1c:	2300      	movs	r3, #0
   1bc1e:	e147      	b.n	1beb0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1bc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bc22:	2b00      	cmp	r3, #0
   1bc24:	d106      	bne.n	1bc34 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1bc26:	230c      	movs	r3, #12
   1bc28:	18fb      	adds	r3, r7, r3
   1bc2a:	0018      	movs	r0, r3
   1bc2c:	4b6a      	ldr	r3, [pc, #424]	; (1bdd8 <xQueueSemaphoreTake+0x39c>)
   1bc2e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1bc30:	2301      	movs	r3, #1
   1bc32:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1bc34:	4b67      	ldr	r3, [pc, #412]	; (1bdd4 <xQueueSemaphoreTake+0x398>)
   1bc36:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1bc38:	4b68      	ldr	r3, [pc, #416]	; (1bddc <xQueueSemaphoreTake+0x3a0>)
   1bc3a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1bc3c:	4b57      	ldr	r3, [pc, #348]	; (1bd9c <xQueueSemaphoreTake+0x360>)
   1bc3e:	4798      	blx	r3
   1bc40:	69fb      	ldr	r3, [r7, #28]
   1bc42:	2244      	movs	r2, #68	; 0x44
   1bc44:	5c9b      	ldrb	r3, [r3, r2]
   1bc46:	b25b      	sxtb	r3, r3
   1bc48:	3301      	adds	r3, #1
   1bc4a:	d103      	bne.n	1bc54 <xQueueSemaphoreTake+0x218>
   1bc4c:	69fb      	ldr	r3, [r7, #28]
   1bc4e:	2244      	movs	r2, #68	; 0x44
   1bc50:	2100      	movs	r1, #0
   1bc52:	5499      	strb	r1, [r3, r2]
   1bc54:	69fb      	ldr	r3, [r7, #28]
   1bc56:	2245      	movs	r2, #69	; 0x45
   1bc58:	5c9b      	ldrb	r3, [r3, r2]
   1bc5a:	b25b      	sxtb	r3, r3
   1bc5c:	3301      	adds	r3, #1
   1bc5e:	d103      	bne.n	1bc68 <xQueueSemaphoreTake+0x22c>
   1bc60:	69fb      	ldr	r3, [r7, #28]
   1bc62:	2245      	movs	r2, #69	; 0x45
   1bc64:	2100      	movs	r1, #0
   1bc66:	5499      	strb	r1, [r3, r2]
   1bc68:	4b5a      	ldr	r3, [pc, #360]	; (1bdd4 <xQueueSemaphoreTake+0x398>)
   1bc6a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1bc6c:	003a      	movs	r2, r7
   1bc6e:	230c      	movs	r3, #12
   1bc70:	18fb      	adds	r3, r7, r3
   1bc72:	0011      	movs	r1, r2
   1bc74:	0018      	movs	r0, r3
   1bc76:	4b5a      	ldr	r3, [pc, #360]	; (1bde0 <xQueueSemaphoreTake+0x3a4>)
   1bc78:	4798      	blx	r3
   1bc7a:	1e03      	subs	r3, r0, #0
   1bc7c:	d000      	beq.n	1bc80 <xQueueSemaphoreTake+0x244>
   1bc7e:	e0bd      	b.n	1bdfc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bc80:	69fb      	ldr	r3, [r7, #28]
   1bc82:	0018      	movs	r0, r3
   1bc84:	4b57      	ldr	r3, [pc, #348]	; (1bde4 <xQueueSemaphoreTake+0x3a8>)
   1bc86:	4798      	blx	r3
   1bc88:	1e03      	subs	r3, r0, #0
   1bc8a:	d100      	bne.n	1bc8e <xQueueSemaphoreTake+0x252>
   1bc8c:	e07c      	b.n	1bd88 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1bc8e:	4b44      	ldr	r3, [pc, #272]	; (1bda0 <xQueueSemaphoreTake+0x364>)
   1bc90:	4798      	blx	r3
   1bc92:	0003      	movs	r3, r0
   1bc94:	0018      	movs	r0, r3
   1bc96:	4b43      	ldr	r3, [pc, #268]	; (1bda4 <xQueueSemaphoreTake+0x368>)
   1bc98:	4798      	blx	r3
   1bc9a:	0003      	movs	r3, r0
   1bc9c:	001a      	movs	r2, r3
   1bc9e:	4b42      	ldr	r3, [pc, #264]	; (1bda8 <xQueueSemaphoreTake+0x36c>)
   1bca0:	881b      	ldrh	r3, [r3, #0]
   1bca2:	4013      	ands	r3, r2
   1bca4:	b29b      	uxth	r3, r3
   1bca6:	2b00      	cmp	r3, #0
   1bca8:	d029      	beq.n	1bcfe <xQueueSemaphoreTake+0x2c2>
   1bcaa:	69fb      	ldr	r3, [r7, #28]
   1bcac:	0018      	movs	r0, r3
   1bcae:	4b3f      	ldr	r3, [pc, #252]	; (1bdac <xQueueSemaphoreTake+0x370>)
   1bcb0:	4798      	blx	r3
   1bcb2:	0003      	movs	r3, r0
   1bcb4:	001a      	movs	r2, r3
   1bcb6:	4b3c      	ldr	r3, [pc, #240]	; (1bda8 <xQueueSemaphoreTake+0x36c>)
   1bcb8:	881b      	ldrh	r3, [r3, #0]
   1bcba:	4013      	ands	r3, r2
   1bcbc:	b29b      	uxth	r3, r3
   1bcbe:	2b00      	cmp	r3, #0
   1bcc0:	d01d      	beq.n	1bcfe <xQueueSemaphoreTake+0x2c2>
   1bcc2:	69fb      	ldr	r3, [r7, #28]
   1bcc4:	0018      	movs	r0, r3
   1bcc6:	4b3a      	ldr	r3, [pc, #232]	; (1bdb0 <xQueueSemaphoreTake+0x374>)
   1bcc8:	4798      	blx	r3
   1bcca:	0003      	movs	r3, r0
   1bccc:	001a      	movs	r2, r3
   1bcce:	4b39      	ldr	r3, [pc, #228]	; (1bdb4 <xQueueSemaphoreTake+0x378>)
   1bcd0:	5c9b      	ldrb	r3, [r3, r2]
   1bcd2:	3368      	adds	r3, #104	; 0x68
   1bcd4:	b2db      	uxtb	r3, r3
   1bcd6:	001d      	movs	r5, r3
   1bcd8:	69fb      	ldr	r3, [r7, #28]
   1bcda:	0018      	movs	r0, r3
   1bcdc:	4b34      	ldr	r3, [pc, #208]	; (1bdb0 <xQueueSemaphoreTake+0x374>)
   1bcde:	4798      	blx	r3
   1bce0:	0003      	movs	r3, r0
   1bce2:	001a      	movs	r2, r3
   1bce4:	4b33      	ldr	r3, [pc, #204]	; (1bdb4 <xQueueSemaphoreTake+0x378>)
   1bce6:	5c9c      	ldrb	r4, [r3, r2]
   1bce8:	69fb      	ldr	r3, [r7, #28]
   1bcea:	0018      	movs	r0, r3
   1bcec:	4b32      	ldr	r3, [pc, #200]	; (1bdb8 <xQueueSemaphoreTake+0x37c>)
   1bcee:	4798      	blx	r3
   1bcf0:	0003      	movs	r3, r0
   1bcf2:	b2db      	uxtb	r3, r3
   1bcf4:	001a      	movs	r2, r3
   1bcf6:	0021      	movs	r1, r4
   1bcf8:	0028      	movs	r0, r5
   1bcfa:	4b30      	ldr	r3, [pc, #192]	; (1bdbc <xQueueSemaphoreTake+0x380>)
   1bcfc:	4798      	blx	r3
   1bcfe:	69fb      	ldr	r3, [r7, #28]
   1bd00:	0018      	movs	r0, r3
   1bd02:	4b2b      	ldr	r3, [pc, #172]	; (1bdb0 <xQueueSemaphoreTake+0x374>)
   1bd04:	4798      	blx	r3
   1bd06:	0003      	movs	r3, r0
   1bd08:	001a      	movs	r2, r3
   1bd0a:	4b2a      	ldr	r3, [pc, #168]	; (1bdb4 <xQueueSemaphoreTake+0x378>)
   1bd0c:	5c9b      	ldrb	r3, [r3, r2]
   1bd0e:	2b02      	cmp	r3, #2
   1bd10:	d018      	beq.n	1bd44 <xQueueSemaphoreTake+0x308>
   1bd12:	4b23      	ldr	r3, [pc, #140]	; (1bda0 <xQueueSemaphoreTake+0x364>)
   1bd14:	4798      	blx	r3
   1bd16:	0003      	movs	r3, r0
   1bd18:	0018      	movs	r0, r3
   1bd1a:	4b22      	ldr	r3, [pc, #136]	; (1bda4 <xQueueSemaphoreTake+0x368>)
   1bd1c:	4798      	blx	r3
   1bd1e:	0003      	movs	r3, r0
   1bd20:	001a      	movs	r2, r3
   1bd22:	4b21      	ldr	r3, [pc, #132]	; (1bda8 <xQueueSemaphoreTake+0x36c>)
   1bd24:	881b      	ldrh	r3, [r3, #0]
   1bd26:	4013      	ands	r3, r2
   1bd28:	b29b      	uxth	r3, r3
   1bd2a:	2b00      	cmp	r3, #0
   1bd2c:	d00a      	beq.n	1bd44 <xQueueSemaphoreTake+0x308>
   1bd2e:	4b1c      	ldr	r3, [pc, #112]	; (1bda0 <xQueueSemaphoreTake+0x364>)
   1bd30:	4798      	blx	r3
   1bd32:	0003      	movs	r3, r0
   1bd34:	0018      	movs	r0, r3
   1bd36:	4b22      	ldr	r3, [pc, #136]	; (1bdc0 <xQueueSemaphoreTake+0x384>)
   1bd38:	4798      	blx	r3
   1bd3a:	0003      	movs	r3, r0
   1bd3c:	b2db      	uxtb	r3, r3
   1bd3e:	0018      	movs	r0, r3
   1bd40:	4b29      	ldr	r3, [pc, #164]	; (1bde8 <xQueueSemaphoreTake+0x3ac>)
   1bd42:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1bd44:	69fb      	ldr	r3, [r7, #28]
   1bd46:	681b      	ldr	r3, [r3, #0]
   1bd48:	2b00      	cmp	r3, #0
   1bd4a:	d10a      	bne.n	1bd62 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1bd4c:	4b13      	ldr	r3, [pc, #76]	; (1bd9c <xQueueSemaphoreTake+0x360>)
   1bd4e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1bd50:	69fb      	ldr	r3, [r7, #28]
   1bd52:	685b      	ldr	r3, [r3, #4]
   1bd54:	0018      	movs	r0, r3
   1bd56:	4b25      	ldr	r3, [pc, #148]	; (1bdec <xQueueSemaphoreTake+0x3b0>)
   1bd58:	4798      	blx	r3
   1bd5a:	0003      	movs	r3, r0
   1bd5c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1bd5e:	4b1d      	ldr	r3, [pc, #116]	; (1bdd4 <xQueueSemaphoreTake+0x398>)
   1bd60:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1bd62:	69fb      	ldr	r3, [r7, #28]
   1bd64:	3324      	adds	r3, #36	; 0x24
   1bd66:	683a      	ldr	r2, [r7, #0]
   1bd68:	0011      	movs	r1, r2
   1bd6a:	0018      	movs	r0, r3
   1bd6c:	4b20      	ldr	r3, [pc, #128]	; (1bdf0 <xQueueSemaphoreTake+0x3b4>)
   1bd6e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1bd70:	69fb      	ldr	r3, [r7, #28]
   1bd72:	0018      	movs	r0, r3
   1bd74:	4b1f      	ldr	r3, [pc, #124]	; (1bdf4 <xQueueSemaphoreTake+0x3b8>)
   1bd76:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1bd78:	4b1f      	ldr	r3, [pc, #124]	; (1bdf8 <xQueueSemaphoreTake+0x3bc>)
   1bd7a:	4798      	blx	r3
   1bd7c:	1e03      	subs	r3, r0, #0
   1bd7e:	d000      	beq.n	1bd82 <xQueueSemaphoreTake+0x346>
   1bd80:	e680      	b.n	1ba84 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1bd82:	4b13      	ldr	r3, [pc, #76]	; (1bdd0 <xQueueSemaphoreTake+0x394>)
   1bd84:	4798      	blx	r3
   1bd86:	e67d      	b.n	1ba84 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1bd88:	69fb      	ldr	r3, [r7, #28]
   1bd8a:	0018      	movs	r0, r3
   1bd8c:	4b19      	ldr	r3, [pc, #100]	; (1bdf4 <xQueueSemaphoreTake+0x3b8>)
   1bd8e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1bd90:	4b19      	ldr	r3, [pc, #100]	; (1bdf8 <xQueueSemaphoreTake+0x3bc>)
   1bd92:	4798      	blx	r3
   1bd94:	e676      	b.n	1ba84 <xQueueSemaphoreTake+0x48>
   1bd96:	46c0      	nop			; (mov r8, r8)
   1bd98:	0001d4b9 	.word	0x0001d4b9
   1bd9c:	0001a799 	.word	0x0001a799
   1bda0:	00018a31 	.word	0x00018a31
   1bda4:	00018795 	.word	0x00018795
   1bda8:	200000b8 	.word	0x200000b8
   1bdac:	00018855 	.word	0x00018855
   1bdb0:	00018755 	.word	0x00018755
   1bdb4:	200000ac 	.word	0x200000ac
   1bdb8:	00018835 	.word	0x00018835
   1bdbc:	0001918d 	.word	0x0001918d
   1bdc0:	00018775 	.word	0x00018775
   1bdc4:	000197e9 	.word	0x000197e9
   1bdc8:	0001d985 	.word	0x0001d985
   1bdcc:	0001d029 	.word	0x0001d029
   1bdd0:	0001a781 	.word	0x0001a781
   1bdd4:	0001a7bd 	.word	0x0001a7bd
   1bdd8:	0001d169 	.word	0x0001d169
   1bddc:	0001ca51 	.word	0x0001ca51
   1bde0:	0001d191 	.word	0x0001d191
   1bde4:	0001c185 	.word	0x0001c185
   1bde8:	00019925 	.word	0x00019925
   1bdec:	0001d4f1 	.word	0x0001d4f1
   1bdf0:	0001cf05 	.word	0x0001cf05
   1bdf4:	0001c095 	.word	0x0001c095
   1bdf8:	0001ca69 	.word	0x0001ca69
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1bdfc:	69fb      	ldr	r3, [r7, #28]
   1bdfe:	0018      	movs	r0, r3
   1be00:	4b2d      	ldr	r3, [pc, #180]	; (1beb8 <xQueueSemaphoreTake+0x47c>)
   1be02:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1be04:	4b2d      	ldr	r3, [pc, #180]	; (1bebc <xQueueSemaphoreTake+0x480>)
   1be06:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1be08:	69fb      	ldr	r3, [r7, #28]
   1be0a:	0018      	movs	r0, r3
   1be0c:	4b2c      	ldr	r3, [pc, #176]	; (1bec0 <xQueueSemaphoreTake+0x484>)
   1be0e:	4798      	blx	r3
   1be10:	1e03      	subs	r3, r0, #0
   1be12:	d100      	bne.n	1be16 <xQueueSemaphoreTake+0x3da>
   1be14:	e636      	b.n	1ba84 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1be16:	6a3b      	ldr	r3, [r7, #32]
   1be18:	2b00      	cmp	r3, #0
   1be1a:	d010      	beq.n	1be3e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1be1c:	4b29      	ldr	r3, [pc, #164]	; (1bec4 <xQueueSemaphoreTake+0x488>)
   1be1e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1be20:	69fb      	ldr	r3, [r7, #28]
   1be22:	0018      	movs	r0, r3
   1be24:	4b28      	ldr	r3, [pc, #160]	; (1bec8 <xQueueSemaphoreTake+0x48c>)
   1be26:	4798      	blx	r3
   1be28:	0003      	movs	r3, r0
   1be2a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1be2c:	69fb      	ldr	r3, [r7, #28]
   1be2e:	685b      	ldr	r3, [r3, #4]
   1be30:	697a      	ldr	r2, [r7, #20]
   1be32:	0011      	movs	r1, r2
   1be34:	0018      	movs	r0, r3
   1be36:	4b25      	ldr	r3, [pc, #148]	; (1becc <xQueueSemaphoreTake+0x490>)
   1be38:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1be3a:	4b25      	ldr	r3, [pc, #148]	; (1bed0 <xQueueSemaphoreTake+0x494>)
   1be3c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1be3e:	4b25      	ldr	r3, [pc, #148]	; (1bed4 <xQueueSemaphoreTake+0x498>)
   1be40:	4798      	blx	r3
   1be42:	0003      	movs	r3, r0
   1be44:	0018      	movs	r0, r3
   1be46:	4b24      	ldr	r3, [pc, #144]	; (1bed8 <xQueueSemaphoreTake+0x49c>)
   1be48:	4798      	blx	r3
   1be4a:	0003      	movs	r3, r0
   1be4c:	001a      	movs	r2, r3
   1be4e:	4b23      	ldr	r3, [pc, #140]	; (1bedc <xQueueSemaphoreTake+0x4a0>)
   1be50:	881b      	ldrh	r3, [r3, #0]
   1be52:	4013      	ands	r3, r2
   1be54:	b29b      	uxth	r3, r3
   1be56:	2b00      	cmp	r3, #0
   1be58:	d029      	beq.n	1beae <xQueueSemaphoreTake+0x472>
   1be5a:	69fb      	ldr	r3, [r7, #28]
   1be5c:	0018      	movs	r0, r3
   1be5e:	4b20      	ldr	r3, [pc, #128]	; (1bee0 <xQueueSemaphoreTake+0x4a4>)
   1be60:	4798      	blx	r3
   1be62:	0003      	movs	r3, r0
   1be64:	001a      	movs	r2, r3
   1be66:	4b1d      	ldr	r3, [pc, #116]	; (1bedc <xQueueSemaphoreTake+0x4a0>)
   1be68:	881b      	ldrh	r3, [r3, #0]
   1be6a:	4013      	ands	r3, r2
   1be6c:	b29b      	uxth	r3, r3
   1be6e:	2b00      	cmp	r3, #0
   1be70:	d01d      	beq.n	1beae <xQueueSemaphoreTake+0x472>
   1be72:	69fb      	ldr	r3, [r7, #28]
   1be74:	0018      	movs	r0, r3
   1be76:	4b1b      	ldr	r3, [pc, #108]	; (1bee4 <xQueueSemaphoreTake+0x4a8>)
   1be78:	4798      	blx	r3
   1be7a:	0003      	movs	r3, r0
   1be7c:	001a      	movs	r2, r3
   1be7e:	4b1a      	ldr	r3, [pc, #104]	; (1bee8 <xQueueSemaphoreTake+0x4ac>)
   1be80:	5c9b      	ldrb	r3, [r3, r2]
   1be82:	3350      	adds	r3, #80	; 0x50
   1be84:	b2db      	uxtb	r3, r3
   1be86:	001d      	movs	r5, r3
   1be88:	69fb      	ldr	r3, [r7, #28]
   1be8a:	0018      	movs	r0, r3
   1be8c:	4b15      	ldr	r3, [pc, #84]	; (1bee4 <xQueueSemaphoreTake+0x4a8>)
   1be8e:	4798      	blx	r3
   1be90:	0003      	movs	r3, r0
   1be92:	001a      	movs	r2, r3
   1be94:	4b14      	ldr	r3, [pc, #80]	; (1bee8 <xQueueSemaphoreTake+0x4ac>)
   1be96:	5c9c      	ldrb	r4, [r3, r2]
   1be98:	69fb      	ldr	r3, [r7, #28]
   1be9a:	0018      	movs	r0, r3
   1be9c:	4b13      	ldr	r3, [pc, #76]	; (1beec <xQueueSemaphoreTake+0x4b0>)
   1be9e:	4798      	blx	r3
   1bea0:	0003      	movs	r3, r0
   1bea2:	b2db      	uxtb	r3, r3
   1bea4:	001a      	movs	r2, r3
   1bea6:	0021      	movs	r1, r4
   1bea8:	0028      	movs	r0, r5
   1beaa:	4b11      	ldr	r3, [pc, #68]	; (1bef0 <xQueueSemaphoreTake+0x4b4>)
   1beac:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1beae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1beb0:	0018      	movs	r0, r3
   1beb2:	46bd      	mov	sp, r7
   1beb4:	b00a      	add	sp, #40	; 0x28
   1beb6:	bdb0      	pop	{r4, r5, r7, pc}
   1beb8:	0001c095 	.word	0x0001c095
   1bebc:	0001ca69 	.word	0x0001ca69
   1bec0:	0001c185 	.word	0x0001c185
   1bec4:	0001a799 	.word	0x0001a799
   1bec8:	0001bf37 	.word	0x0001bf37
   1becc:	0001d7e9 	.word	0x0001d7e9
   1bed0:	0001a7bd 	.word	0x0001a7bd
   1bed4:	00018a31 	.word	0x00018a31
   1bed8:	00018795 	.word	0x00018795
   1bedc:	200000b8 	.word	0x200000b8
   1bee0:	00018855 	.word	0x00018855
   1bee4:	00018755 	.word	0x00018755
   1bee8:	200000ac 	.word	0x200000ac
   1beec:	00018835 	.word	0x00018835
   1bef0:	0001918d 	.word	0x0001918d

0001bef4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1bef4:	b580      	push	{r7, lr}
   1bef6:	b082      	sub	sp, #8
   1bef8:	af00      	add	r7, sp, #0
   1befa:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1befc:	687b      	ldr	r3, [r7, #4]
   1befe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1bf00:	0018      	movs	r0, r3
   1bf02:	46bd      	mov	sp, r7
   1bf04:	b002      	add	sp, #8
   1bf06:	bd80      	pop	{r7, pc}

0001bf08 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1bf08:	b580      	push	{r7, lr}
   1bf0a:	b082      	sub	sp, #8
   1bf0c:	af00      	add	r7, sp, #0
   1bf0e:	6078      	str	r0, [r7, #4]
   1bf10:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1bf12:	687b      	ldr	r3, [r7, #4]
   1bf14:	683a      	ldr	r2, [r7, #0]
   1bf16:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1bf18:	46c0      	nop			; (mov r8, r8)
   1bf1a:	46bd      	mov	sp, r7
   1bf1c:	b002      	add	sp, #8
   1bf1e:	bd80      	pop	{r7, pc}

0001bf20 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1bf20:	b580      	push	{r7, lr}
   1bf22:	b082      	sub	sp, #8
   1bf24:	af00      	add	r7, sp, #0
   1bf26:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1bf28:	687b      	ldr	r3, [r7, #4]
   1bf2a:	2250      	movs	r2, #80	; 0x50
   1bf2c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1bf2e:	0018      	movs	r0, r3
   1bf30:	46bd      	mov	sp, r7
   1bf32:	b002      	add	sp, #8
   1bf34:	bd80      	pop	{r7, pc}

0001bf36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1bf36:	b580      	push	{r7, lr}
   1bf38:	b084      	sub	sp, #16
   1bf3a:	af00      	add	r7, sp, #0
   1bf3c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1bf3e:	687b      	ldr	r3, [r7, #4]
   1bf40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bf42:	2b00      	cmp	r3, #0
   1bf44:	d006      	beq.n	1bf54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1bf46:	687b      	ldr	r3, [r7, #4]
   1bf48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1bf4a:	681b      	ldr	r3, [r3, #0]
   1bf4c:	2205      	movs	r2, #5
   1bf4e:	1ad3      	subs	r3, r2, r3
   1bf50:	60fb      	str	r3, [r7, #12]
   1bf52:	e001      	b.n	1bf58 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1bf54:	2300      	movs	r3, #0
   1bf56:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1bf58:	68fb      	ldr	r3, [r7, #12]
	}
   1bf5a:	0018      	movs	r0, r3
   1bf5c:	46bd      	mov	sp, r7
   1bf5e:	b004      	add	sp, #16
   1bf60:	bd80      	pop	{r7, pc}
	...

0001bf64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1bf64:	b580      	push	{r7, lr}
   1bf66:	b086      	sub	sp, #24
   1bf68:	af00      	add	r7, sp, #0
   1bf6a:	60f8      	str	r0, [r7, #12]
   1bf6c:	60b9      	str	r1, [r7, #8]
   1bf6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1bf70:	2300      	movs	r3, #0
   1bf72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bf74:	68fb      	ldr	r3, [r7, #12]
   1bf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bf78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1bf7a:	68fb      	ldr	r3, [r7, #12]
   1bf7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bf7e:	2b00      	cmp	r3, #0
   1bf80:	d10e      	bne.n	1bfa0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1bf82:	68fb      	ldr	r3, [r7, #12]
   1bf84:	681b      	ldr	r3, [r3, #0]
   1bf86:	2b00      	cmp	r3, #0
   1bf88:	d14e      	bne.n	1c028 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1bf8a:	68fb      	ldr	r3, [r7, #12]
   1bf8c:	685b      	ldr	r3, [r3, #4]
   1bf8e:	0018      	movs	r0, r3
   1bf90:	4b2a      	ldr	r3, [pc, #168]	; (1c03c <prvCopyDataToQueue+0xd8>)
   1bf92:	4798      	blx	r3
   1bf94:	0003      	movs	r3, r0
   1bf96:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1bf98:	68fb      	ldr	r3, [r7, #12]
   1bf9a:	2200      	movs	r2, #0
   1bf9c:	605a      	str	r2, [r3, #4]
   1bf9e:	e043      	b.n	1c028 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1bfa0:	687b      	ldr	r3, [r7, #4]
   1bfa2:	2b00      	cmp	r3, #0
   1bfa4:	d119      	bne.n	1bfda <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1bfa6:	68fb      	ldr	r3, [r7, #12]
   1bfa8:	6898      	ldr	r0, [r3, #8]
   1bfaa:	68fb      	ldr	r3, [r7, #12]
   1bfac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1bfae:	68bb      	ldr	r3, [r7, #8]
   1bfb0:	0019      	movs	r1, r3
   1bfb2:	4b23      	ldr	r3, [pc, #140]	; (1c040 <prvCopyDataToQueue+0xdc>)
   1bfb4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1bfb6:	68fb      	ldr	r3, [r7, #12]
   1bfb8:	689a      	ldr	r2, [r3, #8]
   1bfba:	68fb      	ldr	r3, [r7, #12]
   1bfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bfbe:	18d2      	adds	r2, r2, r3
   1bfc0:	68fb      	ldr	r3, [r7, #12]
   1bfc2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1bfc4:	68fb      	ldr	r3, [r7, #12]
   1bfc6:	689a      	ldr	r2, [r3, #8]
   1bfc8:	68fb      	ldr	r3, [r7, #12]
   1bfca:	685b      	ldr	r3, [r3, #4]
   1bfcc:	429a      	cmp	r2, r3
   1bfce:	d32b      	bcc.n	1c028 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1bfd0:	68fb      	ldr	r3, [r7, #12]
   1bfd2:	681a      	ldr	r2, [r3, #0]
   1bfd4:	68fb      	ldr	r3, [r7, #12]
   1bfd6:	609a      	str	r2, [r3, #8]
   1bfd8:	e026      	b.n	1c028 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bfda:	68fb      	ldr	r3, [r7, #12]
   1bfdc:	68d8      	ldr	r0, [r3, #12]
   1bfde:	68fb      	ldr	r3, [r7, #12]
   1bfe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1bfe2:	68bb      	ldr	r3, [r7, #8]
   1bfe4:	0019      	movs	r1, r3
   1bfe6:	4b16      	ldr	r3, [pc, #88]	; (1c040 <prvCopyDataToQueue+0xdc>)
   1bfe8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1bfea:	68fb      	ldr	r3, [r7, #12]
   1bfec:	68da      	ldr	r2, [r3, #12]
   1bfee:	68fb      	ldr	r3, [r7, #12]
   1bff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bff2:	425b      	negs	r3, r3
   1bff4:	18d2      	adds	r2, r2, r3
   1bff6:	68fb      	ldr	r3, [r7, #12]
   1bff8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1bffa:	68fb      	ldr	r3, [r7, #12]
   1bffc:	68da      	ldr	r2, [r3, #12]
   1bffe:	68fb      	ldr	r3, [r7, #12]
   1c000:	681b      	ldr	r3, [r3, #0]
   1c002:	429a      	cmp	r2, r3
   1c004:	d207      	bcs.n	1c016 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1c006:	68fb      	ldr	r3, [r7, #12]
   1c008:	685a      	ldr	r2, [r3, #4]
   1c00a:	68fb      	ldr	r3, [r7, #12]
   1c00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c00e:	425b      	negs	r3, r3
   1c010:	18d2      	adds	r2, r2, r3
   1c012:	68fb      	ldr	r3, [r7, #12]
   1c014:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c016:	687b      	ldr	r3, [r7, #4]
   1c018:	2b02      	cmp	r3, #2
   1c01a:	d105      	bne.n	1c028 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c01c:	693b      	ldr	r3, [r7, #16]
   1c01e:	2b00      	cmp	r3, #0
   1c020:	d002      	beq.n	1c028 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c022:	693b      	ldr	r3, [r7, #16]
   1c024:	3b01      	subs	r3, #1
   1c026:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c028:	693b      	ldr	r3, [r7, #16]
   1c02a:	1c5a      	adds	r2, r3, #1
   1c02c:	68fb      	ldr	r3, [r7, #12]
   1c02e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c030:	697b      	ldr	r3, [r7, #20]
}
   1c032:	0018      	movs	r0, r3
   1c034:	46bd      	mov	sp, r7
   1c036:	b006      	add	sp, #24
   1c038:	bd80      	pop	{r7, pc}
   1c03a:	46c0      	nop			; (mov r8, r8)
   1c03c:	0001d681 	.word	0x0001d681
   1c040:	00034c09 	.word	0x00034c09

0001c044 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c044:	b580      	push	{r7, lr}
   1c046:	b082      	sub	sp, #8
   1c048:	af00      	add	r7, sp, #0
   1c04a:	6078      	str	r0, [r7, #4]
   1c04c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c04e:	687b      	ldr	r3, [r7, #4]
   1c050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c052:	2b00      	cmp	r3, #0
   1c054:	d018      	beq.n	1c088 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1c056:	687b      	ldr	r3, [r7, #4]
   1c058:	68da      	ldr	r2, [r3, #12]
   1c05a:	687b      	ldr	r3, [r7, #4]
   1c05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c05e:	18d2      	adds	r2, r2, r3
   1c060:	687b      	ldr	r3, [r7, #4]
   1c062:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c064:	687b      	ldr	r3, [r7, #4]
   1c066:	68da      	ldr	r2, [r3, #12]
   1c068:	687b      	ldr	r3, [r7, #4]
   1c06a:	685b      	ldr	r3, [r3, #4]
   1c06c:	429a      	cmp	r2, r3
   1c06e:	d303      	bcc.n	1c078 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1c070:	687b      	ldr	r3, [r7, #4]
   1c072:	681a      	ldr	r2, [r3, #0]
   1c074:	687b      	ldr	r3, [r7, #4]
   1c076:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1c078:	687b      	ldr	r3, [r7, #4]
   1c07a:	68d9      	ldr	r1, [r3, #12]
   1c07c:	687b      	ldr	r3, [r7, #4]
   1c07e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c080:	683b      	ldr	r3, [r7, #0]
   1c082:	0018      	movs	r0, r3
   1c084:	4b02      	ldr	r3, [pc, #8]	; (1c090 <prvCopyDataFromQueue+0x4c>)
   1c086:	4798      	blx	r3
	}
}
   1c088:	46c0      	nop			; (mov r8, r8)
   1c08a:	46bd      	mov	sp, r7
   1c08c:	b002      	add	sp, #8
   1c08e:	bd80      	pop	{r7, pc}
   1c090:	00034c09 	.word	0x00034c09

0001c094 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c094:	b580      	push	{r7, lr}
   1c096:	b084      	sub	sp, #16
   1c098:	af00      	add	r7, sp, #0
   1c09a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c09c:	4b34      	ldr	r3, [pc, #208]	; (1c170 <prvUnlockQueue+0xdc>)
   1c09e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c0a0:	230f      	movs	r3, #15
   1c0a2:	18fb      	adds	r3, r7, r3
   1c0a4:	687a      	ldr	r2, [r7, #4]
   1c0a6:	2145      	movs	r1, #69	; 0x45
   1c0a8:	5c52      	ldrb	r2, [r2, r1]
   1c0aa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c0ac:	e022      	b.n	1c0f4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1c0ae:	687b      	ldr	r3, [r7, #4]
   1c0b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c0b2:	2b00      	cmp	r3, #0
   1c0b4:	d009      	beq.n	1c0ca <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1c0b6:	687b      	ldr	r3, [r7, #4]
   1c0b8:	2100      	movs	r1, #0
   1c0ba:	0018      	movs	r0, r3
   1c0bc:	4b2d      	ldr	r3, [pc, #180]	; (1c174 <prvUnlockQueue+0xe0>)
   1c0be:	4798      	blx	r3
   1c0c0:	1e03      	subs	r3, r0, #0
   1c0c2:	d00f      	beq.n	1c0e4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1c0c4:	4b2c      	ldr	r3, [pc, #176]	; (1c178 <prvUnlockQueue+0xe4>)
   1c0c6:	4798      	blx	r3
   1c0c8:	e00c      	b.n	1c0e4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c0ca:	687b      	ldr	r3, [r7, #4]
   1c0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c0ce:	2b00      	cmp	r3, #0
   1c0d0:	d017      	beq.n	1c102 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c0d2:	687b      	ldr	r3, [r7, #4]
   1c0d4:	3324      	adds	r3, #36	; 0x24
   1c0d6:	0018      	movs	r0, r3
   1c0d8:	4b28      	ldr	r3, [pc, #160]	; (1c17c <prvUnlockQueue+0xe8>)
   1c0da:	4798      	blx	r3
   1c0dc:	1e03      	subs	r3, r0, #0
   1c0de:	d001      	beq.n	1c0e4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1c0e0:	4b25      	ldr	r3, [pc, #148]	; (1c178 <prvUnlockQueue+0xe4>)
   1c0e2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c0e4:	230f      	movs	r3, #15
   1c0e6:	18fb      	adds	r3, r7, r3
   1c0e8:	781b      	ldrb	r3, [r3, #0]
   1c0ea:	3b01      	subs	r3, #1
   1c0ec:	b2da      	uxtb	r2, r3
   1c0ee:	230f      	movs	r3, #15
   1c0f0:	18fb      	adds	r3, r7, r3
   1c0f2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c0f4:	230f      	movs	r3, #15
   1c0f6:	18fb      	adds	r3, r7, r3
   1c0f8:	781b      	ldrb	r3, [r3, #0]
   1c0fa:	b25b      	sxtb	r3, r3
   1c0fc:	2b00      	cmp	r3, #0
   1c0fe:	dcd6      	bgt.n	1c0ae <prvUnlockQueue+0x1a>
   1c100:	e000      	b.n	1c104 <prvUnlockQueue+0x70>
						break;
   1c102:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c104:	687b      	ldr	r3, [r7, #4]
   1c106:	2245      	movs	r2, #69	; 0x45
   1c108:	21ff      	movs	r1, #255	; 0xff
   1c10a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c10c:	4b1c      	ldr	r3, [pc, #112]	; (1c180 <prvUnlockQueue+0xec>)
   1c10e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c110:	4b17      	ldr	r3, [pc, #92]	; (1c170 <prvUnlockQueue+0xdc>)
   1c112:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c114:	230e      	movs	r3, #14
   1c116:	18fb      	adds	r3, r7, r3
   1c118:	687a      	ldr	r2, [r7, #4]
   1c11a:	2144      	movs	r1, #68	; 0x44
   1c11c:	5c52      	ldrb	r2, [r2, r1]
   1c11e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c120:	e014      	b.n	1c14c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c122:	687b      	ldr	r3, [r7, #4]
   1c124:	691b      	ldr	r3, [r3, #16]
   1c126:	2b00      	cmp	r3, #0
   1c128:	d017      	beq.n	1c15a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c12a:	687b      	ldr	r3, [r7, #4]
   1c12c:	3310      	adds	r3, #16
   1c12e:	0018      	movs	r0, r3
   1c130:	4b12      	ldr	r3, [pc, #72]	; (1c17c <prvUnlockQueue+0xe8>)
   1c132:	4798      	blx	r3
   1c134:	1e03      	subs	r3, r0, #0
   1c136:	d001      	beq.n	1c13c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1c138:	4b0f      	ldr	r3, [pc, #60]	; (1c178 <prvUnlockQueue+0xe4>)
   1c13a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c13c:	230e      	movs	r3, #14
   1c13e:	18fb      	adds	r3, r7, r3
   1c140:	781b      	ldrb	r3, [r3, #0]
   1c142:	3b01      	subs	r3, #1
   1c144:	b2da      	uxtb	r2, r3
   1c146:	230e      	movs	r3, #14
   1c148:	18fb      	adds	r3, r7, r3
   1c14a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c14c:	230e      	movs	r3, #14
   1c14e:	18fb      	adds	r3, r7, r3
   1c150:	781b      	ldrb	r3, [r3, #0]
   1c152:	b25b      	sxtb	r3, r3
   1c154:	2b00      	cmp	r3, #0
   1c156:	dce4      	bgt.n	1c122 <prvUnlockQueue+0x8e>
   1c158:	e000      	b.n	1c15c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1c15a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c15c:	687b      	ldr	r3, [r7, #4]
   1c15e:	2244      	movs	r2, #68	; 0x44
   1c160:	21ff      	movs	r1, #255	; 0xff
   1c162:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c164:	4b06      	ldr	r3, [pc, #24]	; (1c180 <prvUnlockQueue+0xec>)
   1c166:	4798      	blx	r3
}
   1c168:	46c0      	nop			; (mov r8, r8)
   1c16a:	46bd      	mov	sp, r7
   1c16c:	b004      	add	sp, #16
   1c16e:	bd80      	pop	{r7, pc}
   1c170:	0001a799 	.word	0x0001a799
   1c174:	0001c269 	.word	0x0001c269
   1c178:	0001d23d 	.word	0x0001d23d
   1c17c:	0001d029 	.word	0x0001d029
   1c180:	0001a7bd 	.word	0x0001a7bd

0001c184 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c184:	b580      	push	{r7, lr}
   1c186:	b084      	sub	sp, #16
   1c188:	af00      	add	r7, sp, #0
   1c18a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c18c:	4b08      	ldr	r3, [pc, #32]	; (1c1b0 <prvIsQueueEmpty+0x2c>)
   1c18e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c190:	687b      	ldr	r3, [r7, #4]
   1c192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c194:	2b00      	cmp	r3, #0
   1c196:	d102      	bne.n	1c19e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c198:	2301      	movs	r3, #1
   1c19a:	60fb      	str	r3, [r7, #12]
   1c19c:	e001      	b.n	1c1a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c19e:	2300      	movs	r3, #0
   1c1a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c1a2:	4b04      	ldr	r3, [pc, #16]	; (1c1b4 <prvIsQueueEmpty+0x30>)
   1c1a4:	4798      	blx	r3

	return xReturn;
   1c1a6:	68fb      	ldr	r3, [r7, #12]
}
   1c1a8:	0018      	movs	r0, r3
   1c1aa:	46bd      	mov	sp, r7
   1c1ac:	b004      	add	sp, #16
   1c1ae:	bd80      	pop	{r7, pc}
   1c1b0:	0001a799 	.word	0x0001a799
   1c1b4:	0001a7bd 	.word	0x0001a7bd

0001c1b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c1b8:	b580      	push	{r7, lr}
   1c1ba:	b084      	sub	sp, #16
   1c1bc:	af00      	add	r7, sp, #0
   1c1be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c1c0:	4b09      	ldr	r3, [pc, #36]	; (1c1e8 <prvIsQueueFull+0x30>)
   1c1c2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c1c4:	687b      	ldr	r3, [r7, #4]
   1c1c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c1c8:	687b      	ldr	r3, [r7, #4]
   1c1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c1cc:	429a      	cmp	r2, r3
   1c1ce:	d102      	bne.n	1c1d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c1d0:	2301      	movs	r3, #1
   1c1d2:	60fb      	str	r3, [r7, #12]
   1c1d4:	e001      	b.n	1c1da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c1d6:	2300      	movs	r3, #0
   1c1d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c1da:	4b04      	ldr	r3, [pc, #16]	; (1c1ec <prvIsQueueFull+0x34>)
   1c1dc:	4798      	blx	r3

	return xReturn;
   1c1de:	68fb      	ldr	r3, [r7, #12]
}
   1c1e0:	0018      	movs	r0, r3
   1c1e2:	46bd      	mov	sp, r7
   1c1e4:	b004      	add	sp, #16
   1c1e6:	bd80      	pop	{r7, pc}
   1c1e8:	0001a799 	.word	0x0001a799
   1c1ec:	0001a7bd 	.word	0x0001a7bd

0001c1f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c1f0:	b580      	push	{r7, lr}
   1c1f2:	b086      	sub	sp, #24
   1c1f4:	af00      	add	r7, sp, #0
   1c1f6:	60f8      	str	r0, [r7, #12]
   1c1f8:	60b9      	str	r1, [r7, #8]
   1c1fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c1fc:	68fb      	ldr	r3, [r7, #12]
   1c1fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c200:	4b15      	ldr	r3, [pc, #84]	; (1c258 <vQueueWaitForMessageRestricted+0x68>)
   1c202:	4798      	blx	r3
   1c204:	697b      	ldr	r3, [r7, #20]
   1c206:	2244      	movs	r2, #68	; 0x44
   1c208:	5c9b      	ldrb	r3, [r3, r2]
   1c20a:	b25b      	sxtb	r3, r3
   1c20c:	3301      	adds	r3, #1
   1c20e:	d103      	bne.n	1c218 <vQueueWaitForMessageRestricted+0x28>
   1c210:	697b      	ldr	r3, [r7, #20]
   1c212:	2244      	movs	r2, #68	; 0x44
   1c214:	2100      	movs	r1, #0
   1c216:	5499      	strb	r1, [r3, r2]
   1c218:	697b      	ldr	r3, [r7, #20]
   1c21a:	2245      	movs	r2, #69	; 0x45
   1c21c:	5c9b      	ldrb	r3, [r3, r2]
   1c21e:	b25b      	sxtb	r3, r3
   1c220:	3301      	adds	r3, #1
   1c222:	d103      	bne.n	1c22c <vQueueWaitForMessageRestricted+0x3c>
   1c224:	697b      	ldr	r3, [r7, #20]
   1c226:	2245      	movs	r2, #69	; 0x45
   1c228:	2100      	movs	r1, #0
   1c22a:	5499      	strb	r1, [r3, r2]
   1c22c:	4b0b      	ldr	r3, [pc, #44]	; (1c25c <vQueueWaitForMessageRestricted+0x6c>)
   1c22e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c230:	697b      	ldr	r3, [r7, #20]
   1c232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c234:	2b00      	cmp	r3, #0
   1c236:	d106      	bne.n	1c246 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c238:	697b      	ldr	r3, [r7, #20]
   1c23a:	3324      	adds	r3, #36	; 0x24
   1c23c:	687a      	ldr	r2, [r7, #4]
   1c23e:	68b9      	ldr	r1, [r7, #8]
   1c240:	0018      	movs	r0, r3
   1c242:	4b07      	ldr	r3, [pc, #28]	; (1c260 <vQueueWaitForMessageRestricted+0x70>)
   1c244:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c246:	697b      	ldr	r3, [r7, #20]
   1c248:	0018      	movs	r0, r3
   1c24a:	4b06      	ldr	r3, [pc, #24]	; (1c264 <vQueueWaitForMessageRestricted+0x74>)
   1c24c:	4798      	blx	r3
	}
   1c24e:	46c0      	nop			; (mov r8, r8)
   1c250:	46bd      	mov	sp, r7
   1c252:	b006      	add	sp, #24
   1c254:	bd80      	pop	{r7, pc}
   1c256:	46c0      	nop			; (mov r8, r8)
   1c258:	0001a799 	.word	0x0001a799
   1c25c:	0001a7bd 	.word	0x0001a7bd
   1c260:	0001cf49 	.word	0x0001cf49
   1c264:	0001c095 	.word	0x0001c095

0001c268 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1c268:	b5b0      	push	{r4, r5, r7, lr}
   1c26a:	b086      	sub	sp, #24
   1c26c:	af00      	add	r7, sp, #0
   1c26e:	6078      	str	r0, [r7, #4]
   1c270:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1c272:	687b      	ldr	r3, [r7, #4]
   1c274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c276:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1c278:	2300      	movs	r3, #0
   1c27a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1c27c:	693b      	ldr	r3, [r7, #16]
   1c27e:	2b00      	cmp	r3, #0
   1c280:	d101      	bne.n	1c286 <prvNotifyQueueSetContainer+0x1e>
   1c282:	b672      	cpsid	i
   1c284:	e7fe      	b.n	1c284 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1c286:	693b      	ldr	r3, [r7, #16]
   1c288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c28a:	693b      	ldr	r3, [r7, #16]
   1c28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c28e:	429a      	cmp	r2, r3
   1c290:	d301      	bcc.n	1c296 <prvNotifyQueueSetContainer+0x2e>
   1c292:	b672      	cpsid	i
   1c294:	e7fe      	b.n	1c294 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1c296:	693b      	ldr	r3, [r7, #16]
   1c298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c29a:	693b      	ldr	r3, [r7, #16]
   1c29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c29e:	429a      	cmp	r2, r3
   1c2a0:	d300      	bcc.n	1c2a4 <prvNotifyQueueSetContainer+0x3c>
   1c2a2:	e08b      	b.n	1c3bc <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1c2a4:	230f      	movs	r3, #15
   1c2a6:	18fb      	adds	r3, r7, r3
   1c2a8:	693a      	ldr	r2, [r7, #16]
   1c2aa:	2145      	movs	r1, #69	; 0x45
   1c2ac:	5c52      	ldrb	r2, [r2, r1]
   1c2ae:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1c2b0:	4b45      	ldr	r3, [pc, #276]	; (1c3c8 <prvNotifyQueueSetContainer+0x160>)
   1c2b2:	4798      	blx	r3
   1c2b4:	0003      	movs	r3, r0
   1c2b6:	0018      	movs	r0, r3
   1c2b8:	4b44      	ldr	r3, [pc, #272]	; (1c3cc <prvNotifyQueueSetContainer+0x164>)
   1c2ba:	4798      	blx	r3
   1c2bc:	0003      	movs	r3, r0
   1c2be:	001a      	movs	r2, r3
   1c2c0:	4b43      	ldr	r3, [pc, #268]	; (1c3d0 <prvNotifyQueueSetContainer+0x168>)
   1c2c2:	881b      	ldrh	r3, [r3, #0]
   1c2c4:	4013      	ands	r3, r2
   1c2c6:	b29b      	uxth	r3, r3
   1c2c8:	2b00      	cmp	r3, #0
   1c2ca:	d02e      	beq.n	1c32a <prvNotifyQueueSetContainer+0xc2>
   1c2cc:	693b      	ldr	r3, [r7, #16]
   1c2ce:	0018      	movs	r0, r3
   1c2d0:	4b40      	ldr	r3, [pc, #256]	; (1c3d4 <prvNotifyQueueSetContainer+0x16c>)
   1c2d2:	4798      	blx	r3
   1c2d4:	0003      	movs	r3, r0
   1c2d6:	001a      	movs	r2, r3
   1c2d8:	4b3d      	ldr	r3, [pc, #244]	; (1c3d0 <prvNotifyQueueSetContainer+0x168>)
   1c2da:	881b      	ldrh	r3, [r3, #0]
   1c2dc:	4013      	ands	r3, r2
   1c2de:	b29b      	uxth	r3, r3
   1c2e0:	2b00      	cmp	r3, #0
   1c2e2:	d022      	beq.n	1c32a <prvNotifyQueueSetContainer+0xc2>
   1c2e4:	683b      	ldr	r3, [r7, #0]
   1c2e6:	2b00      	cmp	r3, #0
   1c2e8:	d10b      	bne.n	1c302 <prvNotifyQueueSetContainer+0x9a>
   1c2ea:	693b      	ldr	r3, [r7, #16]
   1c2ec:	0018      	movs	r0, r3
   1c2ee:	4b3a      	ldr	r3, [pc, #232]	; (1c3d8 <prvNotifyQueueSetContainer+0x170>)
   1c2f0:	4798      	blx	r3
   1c2f2:	0003      	movs	r3, r0
   1c2f4:	001a      	movs	r2, r3
   1c2f6:	4b39      	ldr	r3, [pc, #228]	; (1c3dc <prvNotifyQueueSetContainer+0x174>)
   1c2f8:	5c9b      	ldrb	r3, [r3, r2]
   1c2fa:	3320      	adds	r3, #32
   1c2fc:	b2db      	uxtb	r3, r3
   1c2fe:	001d      	movs	r5, r3
   1c300:	e000      	b.n	1c304 <prvNotifyQueueSetContainer+0x9c>
   1c302:	2525      	movs	r5, #37	; 0x25
   1c304:	693b      	ldr	r3, [r7, #16]
   1c306:	0018      	movs	r0, r3
   1c308:	4b33      	ldr	r3, [pc, #204]	; (1c3d8 <prvNotifyQueueSetContainer+0x170>)
   1c30a:	4798      	blx	r3
   1c30c:	0003      	movs	r3, r0
   1c30e:	001a      	movs	r2, r3
   1c310:	4b32      	ldr	r3, [pc, #200]	; (1c3dc <prvNotifyQueueSetContainer+0x174>)
   1c312:	5c9c      	ldrb	r4, [r3, r2]
   1c314:	693b      	ldr	r3, [r7, #16]
   1c316:	0018      	movs	r0, r3
   1c318:	4b31      	ldr	r3, [pc, #196]	; (1c3e0 <prvNotifyQueueSetContainer+0x178>)
   1c31a:	4798      	blx	r3
   1c31c:	0003      	movs	r3, r0
   1c31e:	b2db      	uxtb	r3, r3
   1c320:	001a      	movs	r2, r3
   1c322:	0021      	movs	r1, r4
   1c324:	0028      	movs	r0, r5
   1c326:	4b2f      	ldr	r3, [pc, #188]	; (1c3e4 <prvNotifyQueueSetContainer+0x17c>)
   1c328:	4798      	blx	r3
   1c32a:	693b      	ldr	r3, [r7, #16]
   1c32c:	0018      	movs	r0, r3
   1c32e:	4b2a      	ldr	r3, [pc, #168]	; (1c3d8 <prvNotifyQueueSetContainer+0x170>)
   1c330:	4798      	blx	r3
   1c332:	0003      	movs	r3, r0
   1c334:	001a      	movs	r2, r3
   1c336:	4b29      	ldr	r3, [pc, #164]	; (1c3dc <prvNotifyQueueSetContainer+0x174>)
   1c338:	5c9c      	ldrb	r4, [r3, r2]
   1c33a:	693b      	ldr	r3, [r7, #16]
   1c33c:	0018      	movs	r0, r3
   1c33e:	4b28      	ldr	r3, [pc, #160]	; (1c3e0 <prvNotifyQueueSetContainer+0x178>)
   1c340:	4798      	blx	r3
   1c342:	0003      	movs	r3, r0
   1c344:	b2dd      	uxtb	r5, r3
   1c346:	693b      	ldr	r3, [r7, #16]
   1c348:	0018      	movs	r0, r3
   1c34a:	4b23      	ldr	r3, [pc, #140]	; (1c3d8 <prvNotifyQueueSetContainer+0x170>)
   1c34c:	4798      	blx	r3
   1c34e:	0003      	movs	r3, r0
   1c350:	001a      	movs	r2, r3
   1c352:	4b22      	ldr	r3, [pc, #136]	; (1c3dc <prvNotifyQueueSetContainer+0x174>)
   1c354:	5c9b      	ldrb	r3, [r3, r2]
   1c356:	2b02      	cmp	r3, #2
   1c358:	d005      	beq.n	1c366 <prvNotifyQueueSetContainer+0xfe>
   1c35a:	693b      	ldr	r3, [r7, #16]
   1c35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c35e:	b2db      	uxtb	r3, r3
   1c360:	3301      	adds	r3, #1
   1c362:	b2db      	uxtb	r3, r3
   1c364:	e000      	b.n	1c368 <prvNotifyQueueSetContainer+0x100>
   1c366:	2300      	movs	r3, #0
   1c368:	001a      	movs	r2, r3
   1c36a:	0029      	movs	r1, r5
   1c36c:	0020      	movs	r0, r4
   1c36e:	4b1e      	ldr	r3, [pc, #120]	; (1c3e8 <prvNotifyQueueSetContainer+0x180>)
   1c370:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1c372:	683a      	ldr	r2, [r7, #0]
   1c374:	1d39      	adds	r1, r7, #4
   1c376:	693b      	ldr	r3, [r7, #16]
   1c378:	0018      	movs	r0, r3
   1c37a:	4b1c      	ldr	r3, [pc, #112]	; (1c3ec <prvNotifyQueueSetContainer+0x184>)
   1c37c:	4798      	blx	r3
   1c37e:	0003      	movs	r3, r0
   1c380:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1c382:	230f      	movs	r3, #15
   1c384:	18fb      	adds	r3, r7, r3
   1c386:	781b      	ldrb	r3, [r3, #0]
   1c388:	b25b      	sxtb	r3, r3
   1c38a:	3301      	adds	r3, #1
   1c38c:	d10d      	bne.n	1c3aa <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1c38e:	693b      	ldr	r3, [r7, #16]
   1c390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c392:	2b00      	cmp	r3, #0
   1c394:	d012      	beq.n	1c3bc <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1c396:	693b      	ldr	r3, [r7, #16]
   1c398:	3324      	adds	r3, #36	; 0x24
   1c39a:	0018      	movs	r0, r3
   1c39c:	4b14      	ldr	r3, [pc, #80]	; (1c3f0 <prvNotifyQueueSetContainer+0x188>)
   1c39e:	4798      	blx	r3
   1c3a0:	1e03      	subs	r3, r0, #0
   1c3a2:	d00b      	beq.n	1c3bc <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1c3a4:	2301      	movs	r3, #1
   1c3a6:	617b      	str	r3, [r7, #20]
   1c3a8:	e008      	b.n	1c3bc <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1c3aa:	230f      	movs	r3, #15
   1c3ac:	18fb      	adds	r3, r7, r3
   1c3ae:	781b      	ldrb	r3, [r3, #0]
   1c3b0:	3301      	adds	r3, #1
   1c3b2:	b2db      	uxtb	r3, r3
   1c3b4:	b259      	sxtb	r1, r3
   1c3b6:	693b      	ldr	r3, [r7, #16]
   1c3b8:	2245      	movs	r2, #69	; 0x45
   1c3ba:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1c3bc:	697b      	ldr	r3, [r7, #20]
	}
   1c3be:	0018      	movs	r0, r3
   1c3c0:	46bd      	mov	sp, r7
   1c3c2:	b006      	add	sp, #24
   1c3c4:	bdb0      	pop	{r4, r5, r7, pc}
   1c3c6:	46c0      	nop			; (mov r8, r8)
   1c3c8:	00018a31 	.word	0x00018a31
   1c3cc:	00018795 	.word	0x00018795
   1c3d0:	200000b8 	.word	0x200000b8
   1c3d4:	00018855 	.word	0x00018855
   1c3d8:	00018755 	.word	0x00018755
   1c3dc:	200000ac 	.word	0x200000ac
   1c3e0:	00018835 	.word	0x00018835
   1c3e4:	0001918d 	.word	0x0001918d
   1c3e8:	000197e9 	.word	0x000197e9
   1c3ec:	0001bf65 	.word	0x0001bf65
   1c3f0:	0001d029 	.word	0x0001d029

0001c3f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1c3f4:	b590      	push	{r4, r7, lr}
   1c3f6:	b08d      	sub	sp, #52	; 0x34
   1c3f8:	af04      	add	r7, sp, #16
   1c3fa:	60f8      	str	r0, [r7, #12]
   1c3fc:	60b9      	str	r1, [r7, #8]
   1c3fe:	603b      	str	r3, [r7, #0]
   1c400:	1dbb      	adds	r3, r7, #6
   1c402:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c404:	1dbb      	adds	r3, r7, #6
   1c406:	881b      	ldrh	r3, [r3, #0]
   1c408:	009b      	lsls	r3, r3, #2
   1c40a:	0018      	movs	r0, r3
   1c40c:	4b1d      	ldr	r3, [pc, #116]	; (1c484 <xTaskCreate+0x90>)
   1c40e:	4798      	blx	r3
   1c410:	0003      	movs	r3, r0
   1c412:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1c414:	697b      	ldr	r3, [r7, #20]
   1c416:	2b00      	cmp	r3, #0
   1c418:	d010      	beq.n	1c43c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1c41a:	2054      	movs	r0, #84	; 0x54
   1c41c:	4b19      	ldr	r3, [pc, #100]	; (1c484 <xTaskCreate+0x90>)
   1c41e:	4798      	blx	r3
   1c420:	0003      	movs	r3, r0
   1c422:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1c424:	69fb      	ldr	r3, [r7, #28]
   1c426:	2b00      	cmp	r3, #0
   1c428:	d003      	beq.n	1c432 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1c42a:	69fb      	ldr	r3, [r7, #28]
   1c42c:	697a      	ldr	r2, [r7, #20]
   1c42e:	631a      	str	r2, [r3, #48]	; 0x30
   1c430:	e006      	b.n	1c440 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1c432:	697b      	ldr	r3, [r7, #20]
   1c434:	0018      	movs	r0, r3
   1c436:	4b14      	ldr	r3, [pc, #80]	; (1c488 <xTaskCreate+0x94>)
   1c438:	4798      	blx	r3
   1c43a:	e001      	b.n	1c440 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1c43c:	2300      	movs	r3, #0
   1c43e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1c440:	69fb      	ldr	r3, [r7, #28]
   1c442:	2b00      	cmp	r3, #0
   1c444:	d016      	beq.n	1c474 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1c446:	1dbb      	adds	r3, r7, #6
   1c448:	881a      	ldrh	r2, [r3, #0]
   1c44a:	683c      	ldr	r4, [r7, #0]
   1c44c:	68b9      	ldr	r1, [r7, #8]
   1c44e:	68f8      	ldr	r0, [r7, #12]
   1c450:	2300      	movs	r3, #0
   1c452:	9303      	str	r3, [sp, #12]
   1c454:	69fb      	ldr	r3, [r7, #28]
   1c456:	9302      	str	r3, [sp, #8]
   1c458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1c45a:	9301      	str	r3, [sp, #4]
   1c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1c45e:	9300      	str	r3, [sp, #0]
   1c460:	0023      	movs	r3, r4
   1c462:	4c0a      	ldr	r4, [pc, #40]	; (1c48c <xTaskCreate+0x98>)
   1c464:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1c466:	69fb      	ldr	r3, [r7, #28]
   1c468:	0018      	movs	r0, r3
   1c46a:	4b09      	ldr	r3, [pc, #36]	; (1c490 <xTaskCreate+0x9c>)
   1c46c:	4798      	blx	r3
			xReturn = pdPASS;
   1c46e:	2301      	movs	r3, #1
   1c470:	61bb      	str	r3, [r7, #24]
   1c472:	e002      	b.n	1c47a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1c474:	2301      	movs	r3, #1
   1c476:	425b      	negs	r3, r3
   1c478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1c47a:	69bb      	ldr	r3, [r7, #24]
	}
   1c47c:	0018      	movs	r0, r3
   1c47e:	46bd      	mov	sp, r7
   1c480:	b009      	add	sp, #36	; 0x24
   1c482:	bd90      	pop	{r4, r7, pc}
   1c484:	0001a8d1 	.word	0x0001a8d1
   1c488:	0001a995 	.word	0x0001a995
   1c48c:	0001c495 	.word	0x0001c495
   1c490:	0001c5a5 	.word	0x0001c5a5

0001c494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1c494:	b580      	push	{r7, lr}
   1c496:	b086      	sub	sp, #24
   1c498:	af00      	add	r7, sp, #0
   1c49a:	60f8      	str	r0, [r7, #12]
   1c49c:	60b9      	str	r1, [r7, #8]
   1c49e:	607a      	str	r2, [r7, #4]
   1c4a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1c4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c4a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1c4a6:	687b      	ldr	r3, [r7, #4]
   1c4a8:	009b      	lsls	r3, r3, #2
   1c4aa:	001a      	movs	r2, r3
   1c4ac:	21a5      	movs	r1, #165	; 0xa5
   1c4ae:	4b39      	ldr	r3, [pc, #228]	; (1c594 <prvInitialiseNewTask+0x100>)
   1c4b0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1c4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c4b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c4b6:	687b      	ldr	r3, [r7, #4]
   1c4b8:	4937      	ldr	r1, [pc, #220]	; (1c598 <prvInitialiseNewTask+0x104>)
   1c4ba:	468c      	mov	ip, r1
   1c4bc:	4463      	add	r3, ip
   1c4be:	009b      	lsls	r3, r3, #2
   1c4c0:	18d3      	adds	r3, r2, r3
   1c4c2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1c4c4:	693b      	ldr	r3, [r7, #16]
   1c4c6:	2207      	movs	r2, #7
   1c4c8:	4393      	bics	r3, r2
   1c4ca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1c4cc:	693b      	ldr	r3, [r7, #16]
   1c4ce:	2207      	movs	r2, #7
   1c4d0:	4013      	ands	r3, r2
   1c4d2:	d001      	beq.n	1c4d8 <prvInitialiseNewTask+0x44>
   1c4d4:	b672      	cpsid	i
   1c4d6:	e7fe      	b.n	1c4d6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c4d8:	2300      	movs	r3, #0
   1c4da:	617b      	str	r3, [r7, #20]
   1c4dc:	e013      	b.n	1c506 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1c4de:	68ba      	ldr	r2, [r7, #8]
   1c4e0:	697b      	ldr	r3, [r7, #20]
   1c4e2:	18d3      	adds	r3, r2, r3
   1c4e4:	7818      	ldrb	r0, [r3, #0]
   1c4e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c4e8:	2134      	movs	r1, #52	; 0x34
   1c4ea:	697b      	ldr	r3, [r7, #20]
   1c4ec:	18d3      	adds	r3, r2, r3
   1c4ee:	185b      	adds	r3, r3, r1
   1c4f0:	1c02      	adds	r2, r0, #0
   1c4f2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1c4f4:	68ba      	ldr	r2, [r7, #8]
   1c4f6:	697b      	ldr	r3, [r7, #20]
   1c4f8:	18d3      	adds	r3, r2, r3
   1c4fa:	781b      	ldrb	r3, [r3, #0]
   1c4fc:	2b00      	cmp	r3, #0
   1c4fe:	d006      	beq.n	1c50e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1c500:	697b      	ldr	r3, [r7, #20]
   1c502:	3301      	adds	r3, #1
   1c504:	617b      	str	r3, [r7, #20]
   1c506:	697b      	ldr	r3, [r7, #20]
   1c508:	2b07      	cmp	r3, #7
   1c50a:	d9e8      	bls.n	1c4de <prvInitialiseNewTask+0x4a>
   1c50c:	e000      	b.n	1c510 <prvInitialiseNewTask+0x7c>
		{
			break;
   1c50e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1c510:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c512:	223b      	movs	r2, #59	; 0x3b
   1c514:	2100      	movs	r1, #0
   1c516:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1c518:	6a3b      	ldr	r3, [r7, #32]
   1c51a:	2b04      	cmp	r3, #4
   1c51c:	d901      	bls.n	1c522 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1c51e:	2304      	movs	r3, #4
   1c520:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1c522:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c524:	6a3a      	ldr	r2, [r7, #32]
   1c526:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1c528:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c52a:	6a3a      	ldr	r2, [r7, #32]
   1c52c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c530:	2200      	movs	r2, #0
   1c532:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1c534:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c536:	3304      	adds	r3, #4
   1c538:	0018      	movs	r0, r3
   1c53a:	4b18      	ldr	r3, [pc, #96]	; (1c59c <prvInitialiseNewTask+0x108>)
   1c53c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c540:	3318      	adds	r3, #24
   1c542:	0018      	movs	r0, r3
   1c544:	4b15      	ldr	r3, [pc, #84]	; (1c59c <prvInitialiseNewTask+0x108>)
   1c546:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1c548:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c54a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c54c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c54e:	6a3b      	ldr	r3, [r7, #32]
   1c550:	2205      	movs	r2, #5
   1c552:	1ad2      	subs	r2, r2, r3
   1c554:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c556:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c55a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c55c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1c55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c560:	2200      	movs	r2, #0
   1c562:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c564:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c566:	2250      	movs	r2, #80	; 0x50
   1c568:	2100      	movs	r1, #0
   1c56a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1c56c:	683a      	ldr	r2, [r7, #0]
   1c56e:	68f9      	ldr	r1, [r7, #12]
   1c570:	693b      	ldr	r3, [r7, #16]
   1c572:	0018      	movs	r0, r3
   1c574:	4b0a      	ldr	r3, [pc, #40]	; (1c5a0 <prvInitialiseNewTask+0x10c>)
   1c576:	4798      	blx	r3
   1c578:	0002      	movs	r2, r0
   1c57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c57c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1c57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c580:	2b00      	cmp	r3, #0
   1c582:	d002      	beq.n	1c58a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c586:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1c588:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c58a:	46c0      	nop			; (mov r8, r8)
   1c58c:	46bd      	mov	sp, r7
   1c58e:	b006      	add	sp, #24
   1c590:	bd80      	pop	{r7, pc}
   1c592:	46c0      	nop			; (mov r8, r8)
   1c594:	00034c3f 	.word	0x00034c3f
   1c598:	3fffffff 	.word	0x3fffffff
   1c59c:	0001a549 	.word	0x0001a549
   1c5a0:	0001a661 	.word	0x0001a661

0001c5a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1c5a4:	b580      	push	{r7, lr}
   1c5a6:	b082      	sub	sp, #8
   1c5a8:	af00      	add	r7, sp, #0
   1c5aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1c5ac:	4b60      	ldr	r3, [pc, #384]	; (1c730 <prvAddNewTaskToReadyList+0x18c>)
   1c5ae:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1c5b0:	4b60      	ldr	r3, [pc, #384]	; (1c734 <prvAddNewTaskToReadyList+0x190>)
   1c5b2:	681b      	ldr	r3, [r3, #0]
   1c5b4:	1c5a      	adds	r2, r3, #1
   1c5b6:	4b5f      	ldr	r3, [pc, #380]	; (1c734 <prvAddNewTaskToReadyList+0x190>)
   1c5b8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1c5ba:	4b5f      	ldr	r3, [pc, #380]	; (1c738 <prvAddNewTaskToReadyList+0x194>)
   1c5bc:	681b      	ldr	r3, [r3, #0]
   1c5be:	2b00      	cmp	r3, #0
   1c5c0:	d109      	bne.n	1c5d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1c5c2:	4b5d      	ldr	r3, [pc, #372]	; (1c738 <prvAddNewTaskToReadyList+0x194>)
   1c5c4:	687a      	ldr	r2, [r7, #4]
   1c5c6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1c5c8:	4b5a      	ldr	r3, [pc, #360]	; (1c734 <prvAddNewTaskToReadyList+0x190>)
   1c5ca:	681b      	ldr	r3, [r3, #0]
   1c5cc:	2b01      	cmp	r3, #1
   1c5ce:	d110      	bne.n	1c5f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1c5d0:	4b5a      	ldr	r3, [pc, #360]	; (1c73c <prvAddNewTaskToReadyList+0x198>)
   1c5d2:	4798      	blx	r3
   1c5d4:	e00d      	b.n	1c5f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1c5d6:	4b5a      	ldr	r3, [pc, #360]	; (1c740 <prvAddNewTaskToReadyList+0x19c>)
   1c5d8:	681b      	ldr	r3, [r3, #0]
   1c5da:	2b00      	cmp	r3, #0
   1c5dc:	d109      	bne.n	1c5f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1c5de:	4b56      	ldr	r3, [pc, #344]	; (1c738 <prvAddNewTaskToReadyList+0x194>)
   1c5e0:	681b      	ldr	r3, [r3, #0]
   1c5e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c5e4:	687b      	ldr	r3, [r7, #4]
   1c5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c5e8:	429a      	cmp	r2, r3
   1c5ea:	d802      	bhi.n	1c5f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1c5ec:	4b52      	ldr	r3, [pc, #328]	; (1c738 <prvAddNewTaskToReadyList+0x194>)
   1c5ee:	687a      	ldr	r2, [r7, #4]
   1c5f0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1c5f2:	4b54      	ldr	r3, [pc, #336]	; (1c744 <prvAddNewTaskToReadyList+0x1a0>)
   1c5f4:	681b      	ldr	r3, [r3, #0]
   1c5f6:	1c5a      	adds	r2, r3, #1
   1c5f8:	4b52      	ldr	r3, [pc, #328]	; (1c744 <prvAddNewTaskToReadyList+0x1a0>)
   1c5fa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1c5fc:	4b51      	ldr	r3, [pc, #324]	; (1c744 <prvAddNewTaskToReadyList+0x1a0>)
   1c5fe:	681a      	ldr	r2, [r3, #0]
   1c600:	687b      	ldr	r3, [r7, #4]
   1c602:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1c604:	687b      	ldr	r3, [r7, #4]
   1c606:	2b00      	cmp	r3, #0
   1c608:	d052      	beq.n	1c6b0 <prvAddNewTaskToReadyList+0x10c>
   1c60a:	2003      	movs	r0, #3
   1c60c:	4b4e      	ldr	r3, [pc, #312]	; (1c748 <prvAddNewTaskToReadyList+0x1a4>)
   1c60e:	4798      	blx	r3
   1c610:	0003      	movs	r3, r0
   1c612:	b29a      	uxth	r2, r3
   1c614:	687b      	ldr	r3, [r7, #4]
   1c616:	0011      	movs	r1, r2
   1c618:	0018      	movs	r0, r3
   1c61a:	4b4c      	ldr	r3, [pc, #304]	; (1c74c <prvAddNewTaskToReadyList+0x1a8>)
   1c61c:	4798      	blx	r3
   1c61e:	4b4c      	ldr	r3, [pc, #304]	; (1c750 <prvAddNewTaskToReadyList+0x1ac>)
   1c620:	881a      	ldrh	r2, [r3, #0]
   1c622:	687b      	ldr	r3, [r7, #4]
   1c624:	0011      	movs	r1, r2
   1c626:	0018      	movs	r0, r3
   1c628:	4b4a      	ldr	r3, [pc, #296]	; (1c754 <prvAddNewTaskToReadyList+0x1b0>)
   1c62a:	4798      	blx	r3
   1c62c:	687b      	ldr	r3, [r7, #4]
   1c62e:	0018      	movs	r0, r3
   1c630:	4b49      	ldr	r3, [pc, #292]	; (1c758 <prvAddNewTaskToReadyList+0x1b4>)
   1c632:	4798      	blx	r3
   1c634:	0003      	movs	r3, r0
   1c636:	b2d9      	uxtb	r1, r3
   1c638:	687b      	ldr	r3, [r7, #4]
   1c63a:	3334      	adds	r3, #52	; 0x34
   1c63c:	001a      	movs	r2, r3
   1c63e:	2003      	movs	r0, #3
   1c640:	4b46      	ldr	r3, [pc, #280]	; (1c75c <prvAddNewTaskToReadyList+0x1b8>)
   1c642:	4798      	blx	r3
   1c644:	687b      	ldr	r3, [r7, #4]
   1c646:	0018      	movs	r0, r3
   1c648:	4b43      	ldr	r3, [pc, #268]	; (1c758 <prvAddNewTaskToReadyList+0x1b4>)
   1c64a:	4798      	blx	r3
   1c64c:	0003      	movs	r3, r0
   1c64e:	b2d9      	uxtb	r1, r3
   1c650:	687b      	ldr	r3, [r7, #4]
   1c652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c654:	b2db      	uxtb	r3, r3
   1c656:	001a      	movs	r2, r3
   1c658:	2003      	movs	r0, #3
   1c65a:	4b41      	ldr	r3, [pc, #260]	; (1c760 <prvAddNewTaskToReadyList+0x1bc>)
   1c65c:	4798      	blx	r3
   1c65e:	4b41      	ldr	r3, [pc, #260]	; (1c764 <prvAddNewTaskToReadyList+0x1c0>)
   1c660:	4798      	blx	r3
   1c662:	0003      	movs	r3, r0
   1c664:	0018      	movs	r0, r3
   1c666:	4b40      	ldr	r3, [pc, #256]	; (1c768 <prvAddNewTaskToReadyList+0x1c4>)
   1c668:	4798      	blx	r3
   1c66a:	0003      	movs	r3, r0
   1c66c:	001a      	movs	r2, r3
   1c66e:	4b3f      	ldr	r3, [pc, #252]	; (1c76c <prvAddNewTaskToReadyList+0x1c8>)
   1c670:	881b      	ldrh	r3, [r3, #0]
   1c672:	4013      	ands	r3, r2
   1c674:	b29b      	uxth	r3, r3
   1c676:	2b00      	cmp	r3, #0
   1c678:	d016      	beq.n	1c6a8 <prvAddNewTaskToReadyList+0x104>
   1c67a:	687b      	ldr	r3, [r7, #4]
   1c67c:	0018      	movs	r0, r3
   1c67e:	4b3a      	ldr	r3, [pc, #232]	; (1c768 <prvAddNewTaskToReadyList+0x1c4>)
   1c680:	4798      	blx	r3
   1c682:	0003      	movs	r3, r0
   1c684:	001a      	movs	r2, r3
   1c686:	4b39      	ldr	r3, [pc, #228]	; (1c76c <prvAddNewTaskToReadyList+0x1c8>)
   1c688:	881b      	ldrh	r3, [r3, #0]
   1c68a:	4013      	ands	r3, r2
   1c68c:	b29b      	uxth	r3, r3
   1c68e:	2b00      	cmp	r3, #0
   1c690:	d00a      	beq.n	1c6a8 <prvAddNewTaskToReadyList+0x104>
   1c692:	687b      	ldr	r3, [r7, #4]
   1c694:	0018      	movs	r0, r3
   1c696:	4b30      	ldr	r3, [pc, #192]	; (1c758 <prvAddNewTaskToReadyList+0x1b4>)
   1c698:	4798      	blx	r3
   1c69a:	0003      	movs	r3, r0
   1c69c:	b2db      	uxtb	r3, r3
   1c69e:	001a      	movs	r2, r3
   1c6a0:	2103      	movs	r1, #3
   1c6a2:	201b      	movs	r0, #27
   1c6a4:	4b32      	ldr	r3, [pc, #200]	; (1c770 <prvAddNewTaskToReadyList+0x1cc>)
   1c6a6:	4798      	blx	r3
   1c6a8:	687b      	ldr	r3, [r7, #4]
   1c6aa:	0018      	movs	r0, r3
   1c6ac:	4b31      	ldr	r3, [pc, #196]	; (1c774 <prvAddNewTaskToReadyList+0x1d0>)
   1c6ae:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1c6b0:	687b      	ldr	r3, [r7, #4]
   1c6b2:	0018      	movs	r0, r3
   1c6b4:	4b2c      	ldr	r3, [pc, #176]	; (1c768 <prvAddNewTaskToReadyList+0x1c4>)
   1c6b6:	4798      	blx	r3
   1c6b8:	0003      	movs	r3, r0
   1c6ba:	001a      	movs	r2, r3
   1c6bc:	4b2b      	ldr	r3, [pc, #172]	; (1c76c <prvAddNewTaskToReadyList+0x1c8>)
   1c6be:	881b      	ldrh	r3, [r3, #0]
   1c6c0:	4013      	ands	r3, r2
   1c6c2:	b29b      	uxth	r3, r3
   1c6c4:	2b00      	cmp	r3, #0
   1c6c6:	d008      	beq.n	1c6da <prvAddNewTaskToReadyList+0x136>
   1c6c8:	687b      	ldr	r3, [r7, #4]
   1c6ca:	0018      	movs	r0, r3
   1c6cc:	4b22      	ldr	r3, [pc, #136]	; (1c758 <prvAddNewTaskToReadyList+0x1b4>)
   1c6ce:	4798      	blx	r3
   1c6d0:	0003      	movs	r3, r0
   1c6d2:	b2db      	uxtb	r3, r3
   1c6d4:	0018      	movs	r0, r3
   1c6d6:	4b28      	ldr	r3, [pc, #160]	; (1c778 <prvAddNewTaskToReadyList+0x1d4>)
   1c6d8:	4798      	blx	r3
   1c6da:	687b      	ldr	r3, [r7, #4]
   1c6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c6de:	4b27      	ldr	r3, [pc, #156]	; (1c77c <prvAddNewTaskToReadyList+0x1d8>)
   1c6e0:	681b      	ldr	r3, [r3, #0]
   1c6e2:	429a      	cmp	r2, r3
   1c6e4:	d903      	bls.n	1c6ee <prvAddNewTaskToReadyList+0x14a>
   1c6e6:	687b      	ldr	r3, [r7, #4]
   1c6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c6ea:	4b24      	ldr	r3, [pc, #144]	; (1c77c <prvAddNewTaskToReadyList+0x1d8>)
   1c6ec:	601a      	str	r2, [r3, #0]
   1c6ee:	687b      	ldr	r3, [r7, #4]
   1c6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c6f2:	0013      	movs	r3, r2
   1c6f4:	009b      	lsls	r3, r3, #2
   1c6f6:	189b      	adds	r3, r3, r2
   1c6f8:	009b      	lsls	r3, r3, #2
   1c6fa:	4a21      	ldr	r2, [pc, #132]	; (1c780 <prvAddNewTaskToReadyList+0x1dc>)
   1c6fc:	189a      	adds	r2, r3, r2
   1c6fe:	687b      	ldr	r3, [r7, #4]
   1c700:	3304      	adds	r3, #4
   1c702:	0019      	movs	r1, r3
   1c704:	0010      	movs	r0, r2
   1c706:	4b1f      	ldr	r3, [pc, #124]	; (1c784 <prvAddNewTaskToReadyList+0x1e0>)
   1c708:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1c70a:	4b1f      	ldr	r3, [pc, #124]	; (1c788 <prvAddNewTaskToReadyList+0x1e4>)
   1c70c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1c70e:	4b0c      	ldr	r3, [pc, #48]	; (1c740 <prvAddNewTaskToReadyList+0x19c>)
   1c710:	681b      	ldr	r3, [r3, #0]
   1c712:	2b00      	cmp	r3, #0
   1c714:	d008      	beq.n	1c728 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1c716:	4b08      	ldr	r3, [pc, #32]	; (1c738 <prvAddNewTaskToReadyList+0x194>)
   1c718:	681b      	ldr	r3, [r3, #0]
   1c71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1c71c:	687b      	ldr	r3, [r7, #4]
   1c71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c720:	429a      	cmp	r2, r3
   1c722:	d201      	bcs.n	1c728 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1c724:	4b19      	ldr	r3, [pc, #100]	; (1c78c <prvAddNewTaskToReadyList+0x1e8>)
   1c726:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1c728:	46c0      	nop			; (mov r8, r8)
   1c72a:	46bd      	mov	sp, r7
   1c72c:	b002      	add	sp, #8
   1c72e:	bd80      	pop	{r7, pc}
   1c730:	0001a799 	.word	0x0001a799
   1c734:	20003da8 	.word	0x20003da8
   1c738:	20003cd0 	.word	0x20003cd0
   1c73c:	0001d2c5 	.word	0x0001d2c5
   1c740:	20003db4 	.word	0x20003db4
   1c744:	20003dc4 	.word	0x20003dc4
   1c748:	00019d15 	.word	0x00019d15
   1c74c:	000187b9 	.word	0x000187b9
   1c750:	200000ba 	.word	0x200000ba
   1c754:	000187f5 	.word	0x000187f5
   1c758:	00018775 	.word	0x00018775
   1c75c:	00019f45 	.word	0x00019f45
   1c760:	000196a9 	.word	0x000196a9
   1c764:	00018a31 	.word	0x00018a31
   1c768:	00018795 	.word	0x00018795
   1c76c:	200000b8 	.word	0x200000b8
   1c770:	0001918d 	.word	0x0001918d
   1c774:	000188f5 	.word	0x000188f5
   1c778:	00018f45 	.word	0x00018f45
   1c77c:	20003db0 	.word	0x20003db0
   1c780:	20003cd4 	.word	0x20003cd4
   1c784:	0001a55f 	.word	0x0001a55f
   1c788:	0001a7bd 	.word	0x0001a7bd
   1c78c:	0001a781 	.word	0x0001a781

0001c790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1c790:	b580      	push	{r7, lr}
   1c792:	b084      	sub	sp, #16
   1c794:	af00      	add	r7, sp, #0
   1c796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1c798:	2300      	movs	r3, #0
   1c79a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1c79c:	687b      	ldr	r3, [r7, #4]
   1c79e:	2b00      	cmp	r3, #0
   1c7a0:	d045      	beq.n	1c82e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1c7a2:	4b27      	ldr	r3, [pc, #156]	; (1c840 <vTaskDelay+0xb0>)
   1c7a4:	681b      	ldr	r3, [r3, #0]
   1c7a6:	2b00      	cmp	r3, #0
   1c7a8:	d001      	beq.n	1c7ae <vTaskDelay+0x1e>
   1c7aa:	b672      	cpsid	i
   1c7ac:	e7fe      	b.n	1c7ac <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1c7ae:	4b25      	ldr	r3, [pc, #148]	; (1c844 <vTaskDelay+0xb4>)
   1c7b0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1c7b2:	4b25      	ldr	r3, [pc, #148]	; (1c848 <vTaskDelay+0xb8>)
   1c7b4:	681b      	ldr	r3, [r3, #0]
   1c7b6:	0018      	movs	r0, r3
   1c7b8:	4b24      	ldr	r3, [pc, #144]	; (1c84c <vTaskDelay+0xbc>)
   1c7ba:	4798      	blx	r3
   1c7bc:	0003      	movs	r3, r0
   1c7be:	001a      	movs	r2, r3
   1c7c0:	4b23      	ldr	r3, [pc, #140]	; (1c850 <vTaskDelay+0xc0>)
   1c7c2:	881b      	ldrh	r3, [r3, #0]
   1c7c4:	4013      	ands	r3, r2
   1c7c6:	b29b      	uxth	r3, r3
   1c7c8:	2b00      	cmp	r3, #0
   1c7ca:	d00e      	beq.n	1c7ea <vTaskDelay+0x5a>
   1c7cc:	687b      	ldr	r3, [r7, #4]
   1c7ce:	0019      	movs	r1, r3
   1c7d0:	2089      	movs	r0, #137	; 0x89
   1c7d2:	4b20      	ldr	r3, [pc, #128]	; (1c854 <vTaskDelay+0xc4>)
   1c7d4:	4798      	blx	r3
   1c7d6:	4b1c      	ldr	r3, [pc, #112]	; (1c848 <vTaskDelay+0xb8>)
   1c7d8:	681b      	ldr	r3, [r3, #0]
   1c7da:	0018      	movs	r0, r3
   1c7dc:	4b1e      	ldr	r3, [pc, #120]	; (1c858 <vTaskDelay+0xc8>)
   1c7de:	4798      	blx	r3
   1c7e0:	0003      	movs	r3, r0
   1c7e2:	b2db      	uxtb	r3, r3
   1c7e4:	0018      	movs	r0, r3
   1c7e6:	4b1d      	ldr	r3, [pc, #116]	; (1c85c <vTaskDelay+0xcc>)
   1c7e8:	4798      	blx	r3
   1c7ea:	4b1d      	ldr	r3, [pc, #116]	; (1c860 <vTaskDelay+0xd0>)
   1c7ec:	4798      	blx	r3
   1c7ee:	0003      	movs	r3, r0
   1c7f0:	0018      	movs	r0, r3
   1c7f2:	4b16      	ldr	r3, [pc, #88]	; (1c84c <vTaskDelay+0xbc>)
   1c7f4:	4798      	blx	r3
   1c7f6:	0003      	movs	r3, r0
   1c7f8:	001a      	movs	r2, r3
   1c7fa:	4b15      	ldr	r3, [pc, #84]	; (1c850 <vTaskDelay+0xc0>)
   1c7fc:	881b      	ldrh	r3, [r3, #0]
   1c7fe:	4013      	ands	r3, r2
   1c800:	b29b      	uxth	r3, r3
   1c802:	2b00      	cmp	r3, #0
   1c804:	d00a      	beq.n	1c81c <vTaskDelay+0x8c>
   1c806:	4b16      	ldr	r3, [pc, #88]	; (1c860 <vTaskDelay+0xd0>)
   1c808:	4798      	blx	r3
   1c80a:	0003      	movs	r3, r0
   1c80c:	0018      	movs	r0, r3
   1c80e:	4b12      	ldr	r3, [pc, #72]	; (1c858 <vTaskDelay+0xc8>)
   1c810:	4798      	blx	r3
   1c812:	0003      	movs	r3, r0
   1c814:	b2db      	uxtb	r3, r3
   1c816:	0018      	movs	r0, r3
   1c818:	4b10      	ldr	r3, [pc, #64]	; (1c85c <vTaskDelay+0xcc>)
   1c81a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1c81c:	687b      	ldr	r3, [r7, #4]
   1c81e:	2100      	movs	r1, #0
   1c820:	0018      	movs	r0, r3
   1c822:	4b10      	ldr	r3, [pc, #64]	; (1c864 <vTaskDelay+0xd4>)
   1c824:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1c826:	4b10      	ldr	r3, [pc, #64]	; (1c868 <vTaskDelay+0xd8>)
   1c828:	4798      	blx	r3
   1c82a:	0003      	movs	r3, r0
   1c82c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1c82e:	68fb      	ldr	r3, [r7, #12]
   1c830:	2b00      	cmp	r3, #0
   1c832:	d101      	bne.n	1c838 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1c834:	4b0d      	ldr	r3, [pc, #52]	; (1c86c <vTaskDelay+0xdc>)
   1c836:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c838:	46c0      	nop			; (mov r8, r8)
   1c83a:	46bd      	mov	sp, r7
   1c83c:	b004      	add	sp, #16
   1c83e:	bd80      	pop	{r7, pc}
   1c840:	20003dd0 	.word	0x20003dd0
   1c844:	0001ca51 	.word	0x0001ca51
   1c848:	20003cd0 	.word	0x20003cd0
   1c84c:	00018795 	.word	0x00018795
   1c850:	200000b8 	.word	0x200000b8
   1c854:	00019495 	.word	0x00019495
   1c858:	00018775 	.word	0x00018775
   1c85c:	00019925 	.word	0x00019925
   1c860:	00018a31 	.word	0x00018a31
   1c864:	0001d9a9 	.word	0x0001d9a9
   1c868:	0001ca69 	.word	0x0001ca69
   1c86c:	0001a781 	.word	0x0001a781

0001c870 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1c870:	b580      	push	{r7, lr}
   1c872:	b084      	sub	sp, #16
   1c874:	af00      	add	r7, sp, #0
   1c876:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1c878:	4b42      	ldr	r3, [pc, #264]	; (1c984 <vTaskSuspend+0x114>)
   1c87a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1c87c:	687b      	ldr	r3, [r7, #4]
   1c87e:	2b00      	cmp	r3, #0
   1c880:	d102      	bne.n	1c888 <vTaskSuspend+0x18>
   1c882:	4b41      	ldr	r3, [pc, #260]	; (1c988 <vTaskSuspend+0x118>)
   1c884:	681b      	ldr	r3, [r3, #0]
   1c886:	e000      	b.n	1c88a <vTaskSuspend+0x1a>
   1c888:	687b      	ldr	r3, [r7, #4]
   1c88a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1c88c:	4b3f      	ldr	r3, [pc, #252]	; (1c98c <vTaskSuspend+0x11c>)
   1c88e:	4798      	blx	r3
   1c890:	0003      	movs	r3, r0
   1c892:	0018      	movs	r0, r3
   1c894:	4b3e      	ldr	r3, [pc, #248]	; (1c990 <vTaskSuspend+0x120>)
   1c896:	4798      	blx	r3
   1c898:	0003      	movs	r3, r0
   1c89a:	001a      	movs	r2, r3
   1c89c:	4b3d      	ldr	r3, [pc, #244]	; (1c994 <vTaskSuspend+0x124>)
   1c89e:	881b      	ldrh	r3, [r3, #0]
   1c8a0:	4013      	ands	r3, r2
   1c8a2:	b29b      	uxth	r3, r3
   1c8a4:	2b00      	cmp	r3, #0
   1c8a6:	d016      	beq.n	1c8d6 <vTaskSuspend+0x66>
   1c8a8:	68fb      	ldr	r3, [r7, #12]
   1c8aa:	0018      	movs	r0, r3
   1c8ac:	4b38      	ldr	r3, [pc, #224]	; (1c990 <vTaskSuspend+0x120>)
   1c8ae:	4798      	blx	r3
   1c8b0:	0003      	movs	r3, r0
   1c8b2:	001a      	movs	r2, r3
   1c8b4:	4b37      	ldr	r3, [pc, #220]	; (1c994 <vTaskSuspend+0x124>)
   1c8b6:	881b      	ldrh	r3, [r3, #0]
   1c8b8:	4013      	ands	r3, r2
   1c8ba:	b29b      	uxth	r3, r3
   1c8bc:	2b00      	cmp	r3, #0
   1c8be:	d00a      	beq.n	1c8d6 <vTaskSuspend+0x66>
   1c8c0:	68fb      	ldr	r3, [r7, #12]
   1c8c2:	0018      	movs	r0, r3
   1c8c4:	4b34      	ldr	r3, [pc, #208]	; (1c998 <vTaskSuspend+0x128>)
   1c8c6:	4798      	blx	r3
   1c8c8:	0003      	movs	r3, r0
   1c8ca:	b2db      	uxtb	r3, r3
   1c8cc:	001a      	movs	r2, r3
   1c8ce:	2103      	movs	r1, #3
   1c8d0:	208a      	movs	r0, #138	; 0x8a
   1c8d2:	4b32      	ldr	r3, [pc, #200]	; (1c99c <vTaskSuspend+0x12c>)
   1c8d4:	4798      	blx	r3
   1c8d6:	68fb      	ldr	r3, [r7, #12]
   1c8d8:	0018      	movs	r0, r3
   1c8da:	4b2f      	ldr	r3, [pc, #188]	; (1c998 <vTaskSuspend+0x128>)
   1c8dc:	4798      	blx	r3
   1c8de:	0003      	movs	r3, r0
   1c8e0:	b2db      	uxtb	r3, r3
   1c8e2:	0018      	movs	r0, r3
   1c8e4:	4b2e      	ldr	r3, [pc, #184]	; (1c9a0 <vTaskSuspend+0x130>)
   1c8e6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1c8e8:	68fb      	ldr	r3, [r7, #12]
   1c8ea:	3304      	adds	r3, #4
   1c8ec:	0018      	movs	r0, r3
   1c8ee:	4b2d      	ldr	r3, [pc, #180]	; (1c9a4 <vTaskSuspend+0x134>)
   1c8f0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1c8f2:	68fb      	ldr	r3, [r7, #12]
   1c8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c8f6:	2b00      	cmp	r3, #0
   1c8f8:	d004      	beq.n	1c904 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1c8fa:	68fb      	ldr	r3, [r7, #12]
   1c8fc:	3318      	adds	r3, #24
   1c8fe:	0018      	movs	r0, r3
   1c900:	4b28      	ldr	r3, [pc, #160]	; (1c9a4 <vTaskSuspend+0x134>)
   1c902:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1c904:	68fb      	ldr	r3, [r7, #12]
   1c906:	1d1a      	adds	r2, r3, #4
   1c908:	4b27      	ldr	r3, [pc, #156]	; (1c9a8 <vTaskSuspend+0x138>)
   1c90a:	0011      	movs	r1, r2
   1c90c:	0018      	movs	r0, r3
   1c90e:	4b27      	ldr	r3, [pc, #156]	; (1c9ac <vTaskSuspend+0x13c>)
   1c910:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1c912:	68fb      	ldr	r3, [r7, #12]
   1c914:	2250      	movs	r2, #80	; 0x50
   1c916:	5c9b      	ldrb	r3, [r3, r2]
   1c918:	b2db      	uxtb	r3, r3
   1c91a:	2b01      	cmp	r3, #1
   1c91c:	d103      	bne.n	1c926 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1c91e:	68fb      	ldr	r3, [r7, #12]
   1c920:	2250      	movs	r2, #80	; 0x50
   1c922:	2100      	movs	r1, #0
   1c924:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1c926:	4b22      	ldr	r3, [pc, #136]	; (1c9b0 <vTaskSuspend+0x140>)
   1c928:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1c92a:	4b22      	ldr	r3, [pc, #136]	; (1c9b4 <vTaskSuspend+0x144>)
   1c92c:	681b      	ldr	r3, [r3, #0]
   1c92e:	2b00      	cmp	r3, #0
   1c930:	d005      	beq.n	1c93e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1c932:	4b14      	ldr	r3, [pc, #80]	; (1c984 <vTaskSuspend+0x114>)
   1c934:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1c936:	4b20      	ldr	r3, [pc, #128]	; (1c9b8 <vTaskSuspend+0x148>)
   1c938:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1c93a:	4b1d      	ldr	r3, [pc, #116]	; (1c9b0 <vTaskSuspend+0x140>)
   1c93c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1c93e:	4b12      	ldr	r3, [pc, #72]	; (1c988 <vTaskSuspend+0x118>)
   1c940:	681b      	ldr	r3, [r3, #0]
   1c942:	68fa      	ldr	r2, [r7, #12]
   1c944:	429a      	cmp	r2, r3
   1c946:	d118      	bne.n	1c97a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1c948:	4b1a      	ldr	r3, [pc, #104]	; (1c9b4 <vTaskSuspend+0x144>)
   1c94a:	681b      	ldr	r3, [r3, #0]
   1c94c:	2b00      	cmp	r3, #0
   1c94e:	d008      	beq.n	1c962 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1c950:	4b1a      	ldr	r3, [pc, #104]	; (1c9bc <vTaskSuspend+0x14c>)
   1c952:	681b      	ldr	r3, [r3, #0]
   1c954:	2b00      	cmp	r3, #0
   1c956:	d001      	beq.n	1c95c <vTaskSuspend+0xec>
   1c958:	b672      	cpsid	i
   1c95a:	e7fe      	b.n	1c95a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1c95c:	4b18      	ldr	r3, [pc, #96]	; (1c9c0 <vTaskSuspend+0x150>)
   1c95e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1c960:	e00b      	b.n	1c97a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1c962:	4b11      	ldr	r3, [pc, #68]	; (1c9a8 <vTaskSuspend+0x138>)
   1c964:	681a      	ldr	r2, [r3, #0]
   1c966:	4b17      	ldr	r3, [pc, #92]	; (1c9c4 <vTaskSuspend+0x154>)
   1c968:	681b      	ldr	r3, [r3, #0]
   1c96a:	429a      	cmp	r2, r3
   1c96c:	d103      	bne.n	1c976 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1c96e:	4b06      	ldr	r3, [pc, #24]	; (1c988 <vTaskSuspend+0x118>)
   1c970:	2200      	movs	r2, #0
   1c972:	601a      	str	r2, [r3, #0]
	}
   1c974:	e001      	b.n	1c97a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1c976:	4b14      	ldr	r3, [pc, #80]	; (1c9c8 <vTaskSuspend+0x158>)
   1c978:	4798      	blx	r3
	}
   1c97a:	46c0      	nop			; (mov r8, r8)
   1c97c:	46bd      	mov	sp, r7
   1c97e:	b004      	add	sp, #16
   1c980:	bd80      	pop	{r7, pc}
   1c982:	46c0      	nop			; (mov r8, r8)
   1c984:	0001a799 	.word	0x0001a799
   1c988:	20003cd0 	.word	0x20003cd0
   1c98c:	00018a31 	.word	0x00018a31
   1c990:	00018795 	.word	0x00018795
   1c994:	200000b8 	.word	0x200000b8
   1c998:	00018775 	.word	0x00018775
   1c99c:	0001918d 	.word	0x0001918d
   1c9a0:	00019925 	.word	0x00019925
   1c9a4:	0001a60f 	.word	0x0001a60f
   1c9a8:	20003d94 	.word	0x20003d94
   1c9ac:	0001a55f 	.word	0x0001a55f
   1c9b0:	0001a7bd 	.word	0x0001a7bd
   1c9b4:	20003db4 	.word	0x20003db4
   1c9b8:	0001d455 	.word	0x0001d455
   1c9bc:	20003dd0 	.word	0x20003dd0
   1c9c0:	0001a781 	.word	0x0001a781
   1c9c4:	20003da8 	.word	0x20003da8
   1c9c8:	0001cde5 	.word	0x0001cde5

0001c9cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1c9cc:	b590      	push	{r4, r7, lr}
   1c9ce:	b085      	sub	sp, #20
   1c9d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1c9d2:	4916      	ldr	r1, [pc, #88]	; (1ca2c <vTaskStartScheduler+0x60>)
   1c9d4:	4816      	ldr	r0, [pc, #88]	; (1ca30 <vTaskStartScheduler+0x64>)
   1c9d6:	4b17      	ldr	r3, [pc, #92]	; (1ca34 <vTaskStartScheduler+0x68>)
   1c9d8:	9301      	str	r3, [sp, #4]
   1c9da:	2300      	movs	r3, #0
   1c9dc:	9300      	str	r3, [sp, #0]
   1c9de:	2300      	movs	r3, #0
   1c9e0:	2296      	movs	r2, #150	; 0x96
   1c9e2:	4c15      	ldr	r4, [pc, #84]	; (1ca38 <vTaskStartScheduler+0x6c>)
   1c9e4:	47a0      	blx	r4
   1c9e6:	0003      	movs	r3, r0
   1c9e8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1c9ea:	687b      	ldr	r3, [r7, #4]
   1c9ec:	2b01      	cmp	r3, #1
   1c9ee:	d103      	bne.n	1c9f8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1c9f0:	4b12      	ldr	r3, [pc, #72]	; (1ca3c <vTaskStartScheduler+0x70>)
   1c9f2:	4798      	blx	r3
   1c9f4:	0003      	movs	r3, r0
   1c9f6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1c9f8:	687b      	ldr	r3, [r7, #4]
   1c9fa:	2b01      	cmp	r3, #1
   1c9fc:	d10d      	bne.n	1ca1a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1c9fe:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1ca00:	4b0f      	ldr	r3, [pc, #60]	; (1ca40 <vTaskStartScheduler+0x74>)
   1ca02:	2201      	movs	r2, #1
   1ca04:	4252      	negs	r2, r2
   1ca06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1ca08:	4b0e      	ldr	r3, [pc, #56]	; (1ca44 <vTaskStartScheduler+0x78>)
   1ca0a:	2201      	movs	r2, #1
   1ca0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1ca0e:	4b0e      	ldr	r3, [pc, #56]	; (1ca48 <vTaskStartScheduler+0x7c>)
   1ca10:	2200      	movs	r2, #0
   1ca12:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1ca14:	4b0d      	ldr	r3, [pc, #52]	; (1ca4c <vTaskStartScheduler+0x80>)
   1ca16:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1ca18:	e004      	b.n	1ca24 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1ca1a:	687b      	ldr	r3, [r7, #4]
   1ca1c:	3301      	adds	r3, #1
   1ca1e:	d101      	bne.n	1ca24 <vTaskStartScheduler+0x58>
   1ca20:	b672      	cpsid	i
   1ca22:	e7fe      	b.n	1ca22 <vTaskStartScheduler+0x56>
}
   1ca24:	46c0      	nop			; (mov r8, r8)
   1ca26:	46bd      	mov	sp, r7
   1ca28:	b003      	add	sp, #12
   1ca2a:	bd90      	pop	{r4, r7, pc}
   1ca2c:	000383a0 	.word	0x000383a0
   1ca30:	0001d29d 	.word	0x0001d29d
   1ca34:	20003dcc 	.word	0x20003dcc
   1ca38:	0001c3f5 	.word	0x0001c3f5
   1ca3c:	0001da5d 	.word	0x0001da5d
   1ca40:	20003dc8 	.word	0x20003dc8
   1ca44:	20003db4 	.word	0x20003db4
   1ca48:	20003dac 	.word	0x20003dac
   1ca4c:	0001a729 	.word	0x0001a729

0001ca50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1ca50:	b580      	push	{r7, lr}
   1ca52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1ca54:	4b03      	ldr	r3, [pc, #12]	; (1ca64 <vTaskSuspendAll+0x14>)
   1ca56:	681b      	ldr	r3, [r3, #0]
   1ca58:	1c5a      	adds	r2, r3, #1
   1ca5a:	4b02      	ldr	r3, [pc, #8]	; (1ca64 <vTaskSuspendAll+0x14>)
   1ca5c:	601a      	str	r2, [r3, #0]
}
   1ca5e:	46c0      	nop			; (mov r8, r8)
   1ca60:	46bd      	mov	sp, r7
   1ca62:	bd80      	pop	{r7, pc}
   1ca64:	20003dd0 	.word	0x20003dd0

0001ca68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1ca68:	b580      	push	{r7, lr}
   1ca6a:	b084      	sub	sp, #16
   1ca6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1ca6e:	2300      	movs	r3, #0
   1ca70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1ca72:	2300      	movs	r3, #0
   1ca74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1ca76:	4b45      	ldr	r3, [pc, #276]	; (1cb8c <xTaskResumeAll+0x124>)
   1ca78:	681b      	ldr	r3, [r3, #0]
   1ca7a:	2b00      	cmp	r3, #0
   1ca7c:	d101      	bne.n	1ca82 <xTaskResumeAll+0x1a>
   1ca7e:	b672      	cpsid	i
   1ca80:	e7fe      	b.n	1ca80 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1ca82:	4b43      	ldr	r3, [pc, #268]	; (1cb90 <xTaskResumeAll+0x128>)
   1ca84:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1ca86:	4b41      	ldr	r3, [pc, #260]	; (1cb8c <xTaskResumeAll+0x124>)
   1ca88:	681b      	ldr	r3, [r3, #0]
   1ca8a:	1e5a      	subs	r2, r3, #1
   1ca8c:	4b3f      	ldr	r3, [pc, #252]	; (1cb8c <xTaskResumeAll+0x124>)
   1ca8e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ca90:	4b3e      	ldr	r3, [pc, #248]	; (1cb8c <xTaskResumeAll+0x124>)
   1ca92:	681b      	ldr	r3, [r3, #0]
   1ca94:	2b00      	cmp	r3, #0
   1ca96:	d000      	beq.n	1ca9a <xTaskResumeAll+0x32>
   1ca98:	e071      	b.n	1cb7e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1ca9a:	4b3e      	ldr	r3, [pc, #248]	; (1cb94 <xTaskResumeAll+0x12c>)
   1ca9c:	681b      	ldr	r3, [r3, #0]
   1ca9e:	2b00      	cmp	r3, #0
   1caa0:	d100      	bne.n	1caa4 <xTaskResumeAll+0x3c>
   1caa2:	e06c      	b.n	1cb7e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1caa4:	e044      	b.n	1cb30 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1caa6:	4b3c      	ldr	r3, [pc, #240]	; (1cb98 <xTaskResumeAll+0x130>)
   1caa8:	68db      	ldr	r3, [r3, #12]
   1caaa:	68db      	ldr	r3, [r3, #12]
   1caac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1caae:	68fb      	ldr	r3, [r7, #12]
   1cab0:	3318      	adds	r3, #24
   1cab2:	0018      	movs	r0, r3
   1cab4:	4b39      	ldr	r3, [pc, #228]	; (1cb9c <xTaskResumeAll+0x134>)
   1cab6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1cab8:	68fb      	ldr	r3, [r7, #12]
   1caba:	3304      	adds	r3, #4
   1cabc:	0018      	movs	r0, r3
   1cabe:	4b37      	ldr	r3, [pc, #220]	; (1cb9c <xTaskResumeAll+0x134>)
   1cac0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1cac2:	68fb      	ldr	r3, [r7, #12]
   1cac4:	0018      	movs	r0, r3
   1cac6:	4b36      	ldr	r3, [pc, #216]	; (1cba0 <xTaskResumeAll+0x138>)
   1cac8:	4798      	blx	r3
   1caca:	0003      	movs	r3, r0
   1cacc:	001a      	movs	r2, r3
   1cace:	4b35      	ldr	r3, [pc, #212]	; (1cba4 <xTaskResumeAll+0x13c>)
   1cad0:	881b      	ldrh	r3, [r3, #0]
   1cad2:	4013      	ands	r3, r2
   1cad4:	b29b      	uxth	r3, r3
   1cad6:	2b00      	cmp	r3, #0
   1cad8:	d008      	beq.n	1caec <xTaskResumeAll+0x84>
   1cada:	68fb      	ldr	r3, [r7, #12]
   1cadc:	0018      	movs	r0, r3
   1cade:	4b32      	ldr	r3, [pc, #200]	; (1cba8 <xTaskResumeAll+0x140>)
   1cae0:	4798      	blx	r3
   1cae2:	0003      	movs	r3, r0
   1cae4:	b2db      	uxtb	r3, r3
   1cae6:	0018      	movs	r0, r3
   1cae8:	4b30      	ldr	r3, [pc, #192]	; (1cbac <xTaskResumeAll+0x144>)
   1caea:	4798      	blx	r3
   1caec:	68fb      	ldr	r3, [r7, #12]
   1caee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1caf0:	4b2f      	ldr	r3, [pc, #188]	; (1cbb0 <xTaskResumeAll+0x148>)
   1caf2:	681b      	ldr	r3, [r3, #0]
   1caf4:	429a      	cmp	r2, r3
   1caf6:	d903      	bls.n	1cb00 <xTaskResumeAll+0x98>
   1caf8:	68fb      	ldr	r3, [r7, #12]
   1cafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cafc:	4b2c      	ldr	r3, [pc, #176]	; (1cbb0 <xTaskResumeAll+0x148>)
   1cafe:	601a      	str	r2, [r3, #0]
   1cb00:	68fb      	ldr	r3, [r7, #12]
   1cb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb04:	0013      	movs	r3, r2
   1cb06:	009b      	lsls	r3, r3, #2
   1cb08:	189b      	adds	r3, r3, r2
   1cb0a:	009b      	lsls	r3, r3, #2
   1cb0c:	4a29      	ldr	r2, [pc, #164]	; (1cbb4 <xTaskResumeAll+0x14c>)
   1cb0e:	189a      	adds	r2, r3, r2
   1cb10:	68fb      	ldr	r3, [r7, #12]
   1cb12:	3304      	adds	r3, #4
   1cb14:	0019      	movs	r1, r3
   1cb16:	0010      	movs	r0, r2
   1cb18:	4b27      	ldr	r3, [pc, #156]	; (1cbb8 <xTaskResumeAll+0x150>)
   1cb1a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1cb1c:	68fb      	ldr	r3, [r7, #12]
   1cb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cb20:	4b26      	ldr	r3, [pc, #152]	; (1cbbc <xTaskResumeAll+0x154>)
   1cb22:	681b      	ldr	r3, [r3, #0]
   1cb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cb26:	429a      	cmp	r2, r3
   1cb28:	d302      	bcc.n	1cb30 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1cb2a:	4b25      	ldr	r3, [pc, #148]	; (1cbc0 <xTaskResumeAll+0x158>)
   1cb2c:	2201      	movs	r2, #1
   1cb2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1cb30:	4b19      	ldr	r3, [pc, #100]	; (1cb98 <xTaskResumeAll+0x130>)
   1cb32:	681b      	ldr	r3, [r3, #0]
   1cb34:	2b00      	cmp	r3, #0
   1cb36:	d1b6      	bne.n	1caa6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1cb38:	68fb      	ldr	r3, [r7, #12]
   1cb3a:	2b00      	cmp	r3, #0
   1cb3c:	d001      	beq.n	1cb42 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1cb3e:	4b21      	ldr	r3, [pc, #132]	; (1cbc4 <xTaskResumeAll+0x15c>)
   1cb40:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1cb42:	4b21      	ldr	r3, [pc, #132]	; (1cbc8 <xTaskResumeAll+0x160>)
   1cb44:	681b      	ldr	r3, [r3, #0]
   1cb46:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1cb48:	687b      	ldr	r3, [r7, #4]
   1cb4a:	2b00      	cmp	r3, #0
   1cb4c:	d00f      	beq.n	1cb6e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1cb4e:	4b1f      	ldr	r3, [pc, #124]	; (1cbcc <xTaskResumeAll+0x164>)
   1cb50:	4798      	blx	r3
   1cb52:	1e03      	subs	r3, r0, #0
   1cb54:	d002      	beq.n	1cb5c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1cb56:	4b1a      	ldr	r3, [pc, #104]	; (1cbc0 <xTaskResumeAll+0x158>)
   1cb58:	2201      	movs	r2, #1
   1cb5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1cb5c:	687b      	ldr	r3, [r7, #4]
   1cb5e:	3b01      	subs	r3, #1
   1cb60:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1cb62:	687b      	ldr	r3, [r7, #4]
   1cb64:	2b00      	cmp	r3, #0
   1cb66:	d1f2      	bne.n	1cb4e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1cb68:	4b17      	ldr	r3, [pc, #92]	; (1cbc8 <xTaskResumeAll+0x160>)
   1cb6a:	2200      	movs	r2, #0
   1cb6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1cb6e:	4b14      	ldr	r3, [pc, #80]	; (1cbc0 <xTaskResumeAll+0x158>)
   1cb70:	681b      	ldr	r3, [r3, #0]
   1cb72:	2b00      	cmp	r3, #0
   1cb74:	d003      	beq.n	1cb7e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1cb76:	2301      	movs	r3, #1
   1cb78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1cb7a:	4b15      	ldr	r3, [pc, #84]	; (1cbd0 <xTaskResumeAll+0x168>)
   1cb7c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1cb7e:	4b15      	ldr	r3, [pc, #84]	; (1cbd4 <xTaskResumeAll+0x16c>)
   1cb80:	4798      	blx	r3

	return xAlreadyYielded;
   1cb82:	68bb      	ldr	r3, [r7, #8]
}
   1cb84:	0018      	movs	r0, r3
   1cb86:	46bd      	mov	sp, r7
   1cb88:	b004      	add	sp, #16
   1cb8a:	bd80      	pop	{r7, pc}
   1cb8c:	20003dd0 	.word	0x20003dd0
   1cb90:	0001a799 	.word	0x0001a799
   1cb94:	20003da8 	.word	0x20003da8
   1cb98:	20003d68 	.word	0x20003d68
   1cb9c:	0001a60f 	.word	0x0001a60f
   1cba0:	00018795 	.word	0x00018795
   1cba4:	200000b8 	.word	0x200000b8
   1cba8:	00018775 	.word	0x00018775
   1cbac:	00018f45 	.word	0x00018f45
   1cbb0:	20003db0 	.word	0x20003db0
   1cbb4:	20003cd4 	.word	0x20003cd4
   1cbb8:	0001a55f 	.word	0x0001a55f
   1cbbc:	20003cd0 	.word	0x20003cd0
   1cbc0:	20003dbc 	.word	0x20003dbc
   1cbc4:	0001d455 	.word	0x0001d455
   1cbc8:	20003db8 	.word	0x20003db8
   1cbcc:	0001cbf5 	.word	0x0001cbf5
   1cbd0:	0001a781 	.word	0x0001a781
   1cbd4:	0001a7bd 	.word	0x0001a7bd

0001cbd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1cbd8:	b580      	push	{r7, lr}
   1cbda:	b082      	sub	sp, #8
   1cbdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1cbde:	4b04      	ldr	r3, [pc, #16]	; (1cbf0 <xTaskGetTickCount+0x18>)
   1cbe0:	681b      	ldr	r3, [r3, #0]
   1cbe2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1cbe4:	687b      	ldr	r3, [r7, #4]
}
   1cbe6:	0018      	movs	r0, r3
   1cbe8:	46bd      	mov	sp, r7
   1cbea:	b002      	add	sp, #8
   1cbec:	bd80      	pop	{r7, pc}
   1cbee:	46c0      	nop			; (mov r8, r8)
   1cbf0:	20003dac 	.word	0x20003dac

0001cbf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1cbf4:	b580      	push	{r7, lr}
   1cbf6:	b086      	sub	sp, #24
   1cbf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1cbfa:	2300      	movs	r3, #0
   1cbfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1cbfe:	4b64      	ldr	r3, [pc, #400]	; (1cd90 <xTaskIncrementTick+0x19c>)
   1cc00:	681b      	ldr	r3, [r3, #0]
   1cc02:	2b01      	cmp	r3, #1
   1cc04:	d003      	beq.n	1cc0e <xTaskIncrementTick+0x1a>
   1cc06:	4b63      	ldr	r3, [pc, #396]	; (1cd94 <xTaskIncrementTick+0x1a0>)
   1cc08:	681b      	ldr	r3, [r3, #0]
   1cc0a:	2b00      	cmp	r3, #0
   1cc0c:	d107      	bne.n	1cc1e <xTaskIncrementTick+0x2a>
   1cc0e:	4b62      	ldr	r3, [pc, #392]	; (1cd98 <xTaskIncrementTick+0x1a4>)
   1cc10:	681b      	ldr	r3, [r3, #0]
   1cc12:	1c5a      	adds	r2, r3, #1
   1cc14:	4b60      	ldr	r3, [pc, #384]	; (1cd98 <xTaskIncrementTick+0x1a4>)
   1cc16:	601a      	str	r2, [r3, #0]
   1cc18:	2000      	movs	r0, #0
   1cc1a:	4b60      	ldr	r3, [pc, #384]	; (1cd9c <xTaskIncrementTick+0x1a8>)
   1cc1c:	4798      	blx	r3
   1cc1e:	4b5c      	ldr	r3, [pc, #368]	; (1cd90 <xTaskIncrementTick+0x19c>)
   1cc20:	681b      	ldr	r3, [r3, #0]
   1cc22:	2b00      	cmp	r3, #0
   1cc24:	d106      	bne.n	1cc34 <xTaskIncrementTick+0x40>
   1cc26:	4b5e      	ldr	r3, [pc, #376]	; (1cda0 <xTaskIncrementTick+0x1ac>)
   1cc28:	681b      	ldr	r3, [r3, #0]
   1cc2a:	3301      	adds	r3, #1
   1cc2c:	0019      	movs	r1, r3
   1cc2e:	2003      	movs	r0, #3
   1cc30:	4b5c      	ldr	r3, [pc, #368]	; (1cda4 <xTaskIncrementTick+0x1b0>)
   1cc32:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1cc34:	4b56      	ldr	r3, [pc, #344]	; (1cd90 <xTaskIncrementTick+0x19c>)
   1cc36:	681b      	ldr	r3, [r3, #0]
   1cc38:	2b00      	cmp	r3, #0
   1cc3a:	d000      	beq.n	1cc3e <xTaskIncrementTick+0x4a>
   1cc3c:	e098      	b.n	1cd70 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1cc3e:	4b58      	ldr	r3, [pc, #352]	; (1cda0 <xTaskIncrementTick+0x1ac>)
   1cc40:	681b      	ldr	r3, [r3, #0]
   1cc42:	3301      	adds	r3, #1
   1cc44:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1cc46:	4b56      	ldr	r3, [pc, #344]	; (1cda0 <xTaskIncrementTick+0x1ac>)
   1cc48:	693a      	ldr	r2, [r7, #16]
   1cc4a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1cc4c:	693b      	ldr	r3, [r7, #16]
   1cc4e:	2b00      	cmp	r3, #0
   1cc50:	d117      	bne.n	1cc82 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1cc52:	4b55      	ldr	r3, [pc, #340]	; (1cda8 <xTaskIncrementTick+0x1b4>)
   1cc54:	681b      	ldr	r3, [r3, #0]
   1cc56:	681b      	ldr	r3, [r3, #0]
   1cc58:	2b00      	cmp	r3, #0
   1cc5a:	d001      	beq.n	1cc60 <xTaskIncrementTick+0x6c>
   1cc5c:	b672      	cpsid	i
   1cc5e:	e7fe      	b.n	1cc5e <xTaskIncrementTick+0x6a>
   1cc60:	4b51      	ldr	r3, [pc, #324]	; (1cda8 <xTaskIncrementTick+0x1b4>)
   1cc62:	681b      	ldr	r3, [r3, #0]
   1cc64:	60fb      	str	r3, [r7, #12]
   1cc66:	4b51      	ldr	r3, [pc, #324]	; (1cdac <xTaskIncrementTick+0x1b8>)
   1cc68:	681a      	ldr	r2, [r3, #0]
   1cc6a:	4b4f      	ldr	r3, [pc, #316]	; (1cda8 <xTaskIncrementTick+0x1b4>)
   1cc6c:	601a      	str	r2, [r3, #0]
   1cc6e:	4b4f      	ldr	r3, [pc, #316]	; (1cdac <xTaskIncrementTick+0x1b8>)
   1cc70:	68fa      	ldr	r2, [r7, #12]
   1cc72:	601a      	str	r2, [r3, #0]
   1cc74:	4b4e      	ldr	r3, [pc, #312]	; (1cdb0 <xTaskIncrementTick+0x1bc>)
   1cc76:	681b      	ldr	r3, [r3, #0]
   1cc78:	1c5a      	adds	r2, r3, #1
   1cc7a:	4b4d      	ldr	r3, [pc, #308]	; (1cdb0 <xTaskIncrementTick+0x1bc>)
   1cc7c:	601a      	str	r2, [r3, #0]
   1cc7e:	4b4d      	ldr	r3, [pc, #308]	; (1cdb4 <xTaskIncrementTick+0x1c0>)
   1cc80:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1cc82:	4b4d      	ldr	r3, [pc, #308]	; (1cdb8 <xTaskIncrementTick+0x1c4>)
   1cc84:	681b      	ldr	r3, [r3, #0]
   1cc86:	693a      	ldr	r2, [r7, #16]
   1cc88:	429a      	cmp	r2, r3
   1cc8a:	d363      	bcc.n	1cd54 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cc8c:	4b46      	ldr	r3, [pc, #280]	; (1cda8 <xTaskIncrementTick+0x1b4>)
   1cc8e:	681b      	ldr	r3, [r3, #0]
   1cc90:	681b      	ldr	r3, [r3, #0]
   1cc92:	2b00      	cmp	r3, #0
   1cc94:	d101      	bne.n	1cc9a <xTaskIncrementTick+0xa6>
   1cc96:	2301      	movs	r3, #1
   1cc98:	e000      	b.n	1cc9c <xTaskIncrementTick+0xa8>
   1cc9a:	2300      	movs	r3, #0
   1cc9c:	2b00      	cmp	r3, #0
   1cc9e:	d004      	beq.n	1ccaa <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cca0:	4b45      	ldr	r3, [pc, #276]	; (1cdb8 <xTaskIncrementTick+0x1c4>)
   1cca2:	2201      	movs	r2, #1
   1cca4:	4252      	negs	r2, r2
   1cca6:	601a      	str	r2, [r3, #0]
					break;
   1cca8:	e054      	b.n	1cd54 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1ccaa:	4b3f      	ldr	r3, [pc, #252]	; (1cda8 <xTaskIncrementTick+0x1b4>)
   1ccac:	681b      	ldr	r3, [r3, #0]
   1ccae:	68db      	ldr	r3, [r3, #12]
   1ccb0:	68db      	ldr	r3, [r3, #12]
   1ccb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1ccb4:	68bb      	ldr	r3, [r7, #8]
   1ccb6:	685b      	ldr	r3, [r3, #4]
   1ccb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1ccba:	693a      	ldr	r2, [r7, #16]
   1ccbc:	687b      	ldr	r3, [r7, #4]
   1ccbe:	429a      	cmp	r2, r3
   1ccc0:	d203      	bcs.n	1ccca <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1ccc2:	4b3d      	ldr	r3, [pc, #244]	; (1cdb8 <xTaskIncrementTick+0x1c4>)
   1ccc4:	687a      	ldr	r2, [r7, #4]
   1ccc6:	601a      	str	r2, [r3, #0]
						break;
   1ccc8:	e044      	b.n	1cd54 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ccca:	68bb      	ldr	r3, [r7, #8]
   1cccc:	3304      	adds	r3, #4
   1ccce:	0018      	movs	r0, r3
   1ccd0:	4b3a      	ldr	r3, [pc, #232]	; (1cdbc <xTaskIncrementTick+0x1c8>)
   1ccd2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1ccd4:	68bb      	ldr	r3, [r7, #8]
   1ccd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ccd8:	2b00      	cmp	r3, #0
   1ccda:	d004      	beq.n	1cce6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ccdc:	68bb      	ldr	r3, [r7, #8]
   1ccde:	3318      	adds	r3, #24
   1cce0:	0018      	movs	r0, r3
   1cce2:	4b36      	ldr	r3, [pc, #216]	; (1cdbc <xTaskIncrementTick+0x1c8>)
   1cce4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1cce6:	68bb      	ldr	r3, [r7, #8]
   1cce8:	0018      	movs	r0, r3
   1ccea:	4b35      	ldr	r3, [pc, #212]	; (1cdc0 <xTaskIncrementTick+0x1cc>)
   1ccec:	4798      	blx	r3
   1ccee:	0003      	movs	r3, r0
   1ccf0:	001a      	movs	r2, r3
   1ccf2:	4b34      	ldr	r3, [pc, #208]	; (1cdc4 <xTaskIncrementTick+0x1d0>)
   1ccf4:	881b      	ldrh	r3, [r3, #0]
   1ccf6:	4013      	ands	r3, r2
   1ccf8:	b29b      	uxth	r3, r3
   1ccfa:	2b00      	cmp	r3, #0
   1ccfc:	d008      	beq.n	1cd10 <xTaskIncrementTick+0x11c>
   1ccfe:	68bb      	ldr	r3, [r7, #8]
   1cd00:	0018      	movs	r0, r3
   1cd02:	4b31      	ldr	r3, [pc, #196]	; (1cdc8 <xTaskIncrementTick+0x1d4>)
   1cd04:	4798      	blx	r3
   1cd06:	0003      	movs	r3, r0
   1cd08:	b2db      	uxtb	r3, r3
   1cd0a:	0018      	movs	r0, r3
   1cd0c:	4b2f      	ldr	r3, [pc, #188]	; (1cdcc <xTaskIncrementTick+0x1d8>)
   1cd0e:	4798      	blx	r3
   1cd10:	68bb      	ldr	r3, [r7, #8]
   1cd12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd14:	4b2e      	ldr	r3, [pc, #184]	; (1cdd0 <xTaskIncrementTick+0x1dc>)
   1cd16:	681b      	ldr	r3, [r3, #0]
   1cd18:	429a      	cmp	r2, r3
   1cd1a:	d903      	bls.n	1cd24 <xTaskIncrementTick+0x130>
   1cd1c:	68bb      	ldr	r3, [r7, #8]
   1cd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd20:	4b2b      	ldr	r3, [pc, #172]	; (1cdd0 <xTaskIncrementTick+0x1dc>)
   1cd22:	601a      	str	r2, [r3, #0]
   1cd24:	68bb      	ldr	r3, [r7, #8]
   1cd26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd28:	0013      	movs	r3, r2
   1cd2a:	009b      	lsls	r3, r3, #2
   1cd2c:	189b      	adds	r3, r3, r2
   1cd2e:	009b      	lsls	r3, r3, #2
   1cd30:	4a28      	ldr	r2, [pc, #160]	; (1cdd4 <xTaskIncrementTick+0x1e0>)
   1cd32:	189a      	adds	r2, r3, r2
   1cd34:	68bb      	ldr	r3, [r7, #8]
   1cd36:	3304      	adds	r3, #4
   1cd38:	0019      	movs	r1, r3
   1cd3a:	0010      	movs	r0, r2
   1cd3c:	4b26      	ldr	r3, [pc, #152]	; (1cdd8 <xTaskIncrementTick+0x1e4>)
   1cd3e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1cd40:	68bb      	ldr	r3, [r7, #8]
   1cd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd44:	4b25      	ldr	r3, [pc, #148]	; (1cddc <xTaskIncrementTick+0x1e8>)
   1cd46:	681b      	ldr	r3, [r3, #0]
   1cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cd4a:	429a      	cmp	r2, r3
   1cd4c:	d39e      	bcc.n	1cc8c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1cd4e:	2301      	movs	r3, #1
   1cd50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1cd52:	e79b      	b.n	1cc8c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1cd54:	4b21      	ldr	r3, [pc, #132]	; (1cddc <xTaskIncrementTick+0x1e8>)
   1cd56:	681b      	ldr	r3, [r3, #0]
   1cd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd5a:	491e      	ldr	r1, [pc, #120]	; (1cdd4 <xTaskIncrementTick+0x1e0>)
   1cd5c:	0013      	movs	r3, r2
   1cd5e:	009b      	lsls	r3, r3, #2
   1cd60:	189b      	adds	r3, r3, r2
   1cd62:	009b      	lsls	r3, r3, #2
   1cd64:	585b      	ldr	r3, [r3, r1]
   1cd66:	2b01      	cmp	r3, #1
   1cd68:	d907      	bls.n	1cd7a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1cd6a:	2301      	movs	r3, #1
   1cd6c:	617b      	str	r3, [r7, #20]
   1cd6e:	e004      	b.n	1cd7a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1cd70:	4b08      	ldr	r3, [pc, #32]	; (1cd94 <xTaskIncrementTick+0x1a0>)
   1cd72:	681b      	ldr	r3, [r3, #0]
   1cd74:	1c5a      	adds	r2, r3, #1
   1cd76:	4b07      	ldr	r3, [pc, #28]	; (1cd94 <xTaskIncrementTick+0x1a0>)
   1cd78:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1cd7a:	4b19      	ldr	r3, [pc, #100]	; (1cde0 <xTaskIncrementTick+0x1ec>)
   1cd7c:	681b      	ldr	r3, [r3, #0]
   1cd7e:	2b00      	cmp	r3, #0
   1cd80:	d001      	beq.n	1cd86 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1cd82:	2301      	movs	r3, #1
   1cd84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1cd86:	697b      	ldr	r3, [r7, #20]
}
   1cd88:	0018      	movs	r0, r3
   1cd8a:	46bd      	mov	sp, r7
   1cd8c:	b006      	add	sp, #24
   1cd8e:	bd80      	pop	{r7, pc}
   1cd90:	20003dd0 	.word	0x20003dd0
   1cd94:	20003db8 	.word	0x20003db8
   1cd98:	20000930 	.word	0x20000930
   1cd9c:	0001a429 	.word	0x0001a429
   1cda0:	20003dac 	.word	0x20003dac
   1cda4:	00019495 	.word	0x00019495
   1cda8:	20003d60 	.word	0x20003d60
   1cdac:	20003d64 	.word	0x20003d64
   1cdb0:	20003dc0 	.word	0x20003dc0
   1cdb4:	0001d455 	.word	0x0001d455
   1cdb8:	20003dc8 	.word	0x20003dc8
   1cdbc:	0001a60f 	.word	0x0001a60f
   1cdc0:	00018795 	.word	0x00018795
   1cdc4:	200000b8 	.word	0x200000b8
   1cdc8:	00018775 	.word	0x00018775
   1cdcc:	00018f45 	.word	0x00018f45
   1cdd0:	20003db0 	.word	0x20003db0
   1cdd4:	20003cd4 	.word	0x20003cd4
   1cdd8:	0001a55f 	.word	0x0001a55f
   1cddc:	20003cd0 	.word	0x20003cd0
   1cde0:	20003dbc 	.word	0x20003dbc

0001cde4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1cde4:	b580      	push	{r7, lr}
   1cde6:	b082      	sub	sp, #8
   1cde8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1cdea:	4b3a      	ldr	r3, [pc, #232]	; (1ced4 <vTaskSwitchContext+0xf0>)
   1cdec:	681b      	ldr	r3, [r3, #0]
   1cdee:	2b00      	cmp	r3, #0
   1cdf0:	d003      	beq.n	1cdfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1cdf2:	4b39      	ldr	r3, [pc, #228]	; (1ced8 <vTaskSwitchContext+0xf4>)
   1cdf4:	2201      	movs	r2, #1
   1cdf6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1cdf8:	e067      	b.n	1ceca <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1cdfa:	4b37      	ldr	r3, [pc, #220]	; (1ced8 <vTaskSwitchContext+0xf4>)
   1cdfc:	2200      	movs	r2, #0
   1cdfe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1ce00:	4b36      	ldr	r3, [pc, #216]	; (1cedc <vTaskSwitchContext+0xf8>)
   1ce02:	681b      	ldr	r3, [r3, #0]
   1ce04:	681a      	ldr	r2, [r3, #0]
   1ce06:	4b35      	ldr	r3, [pc, #212]	; (1cedc <vTaskSwitchContext+0xf8>)
   1ce08:	681b      	ldr	r3, [r3, #0]
   1ce0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1ce0c:	429a      	cmp	r2, r3
   1ce0e:	d808      	bhi.n	1ce22 <vTaskSwitchContext+0x3e>
   1ce10:	4b32      	ldr	r3, [pc, #200]	; (1cedc <vTaskSwitchContext+0xf8>)
   1ce12:	681a      	ldr	r2, [r3, #0]
   1ce14:	4b31      	ldr	r3, [pc, #196]	; (1cedc <vTaskSwitchContext+0xf8>)
   1ce16:	681b      	ldr	r3, [r3, #0]
   1ce18:	3334      	adds	r3, #52	; 0x34
   1ce1a:	0019      	movs	r1, r3
   1ce1c:	0010      	movs	r0, r2
   1ce1e:	4b30      	ldr	r3, [pc, #192]	; (1cee0 <vTaskSwitchContext+0xfc>)
   1ce20:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1ce22:	4b30      	ldr	r3, [pc, #192]	; (1cee4 <vTaskSwitchContext+0x100>)
   1ce24:	681b      	ldr	r3, [r3, #0]
   1ce26:	607b      	str	r3, [r7, #4]
   1ce28:	e007      	b.n	1ce3a <vTaskSwitchContext+0x56>
   1ce2a:	687b      	ldr	r3, [r7, #4]
   1ce2c:	2b00      	cmp	r3, #0
   1ce2e:	d101      	bne.n	1ce34 <vTaskSwitchContext+0x50>
   1ce30:	b672      	cpsid	i
   1ce32:	e7fe      	b.n	1ce32 <vTaskSwitchContext+0x4e>
   1ce34:	687b      	ldr	r3, [r7, #4]
   1ce36:	3b01      	subs	r3, #1
   1ce38:	607b      	str	r3, [r7, #4]
   1ce3a:	492b      	ldr	r1, [pc, #172]	; (1cee8 <vTaskSwitchContext+0x104>)
   1ce3c:	687a      	ldr	r2, [r7, #4]
   1ce3e:	0013      	movs	r3, r2
   1ce40:	009b      	lsls	r3, r3, #2
   1ce42:	189b      	adds	r3, r3, r2
   1ce44:	009b      	lsls	r3, r3, #2
   1ce46:	585b      	ldr	r3, [r3, r1]
   1ce48:	2b00      	cmp	r3, #0
   1ce4a:	d0ee      	beq.n	1ce2a <vTaskSwitchContext+0x46>
   1ce4c:	687a      	ldr	r2, [r7, #4]
   1ce4e:	0013      	movs	r3, r2
   1ce50:	009b      	lsls	r3, r3, #2
   1ce52:	189b      	adds	r3, r3, r2
   1ce54:	009b      	lsls	r3, r3, #2
   1ce56:	4a24      	ldr	r2, [pc, #144]	; (1cee8 <vTaskSwitchContext+0x104>)
   1ce58:	189b      	adds	r3, r3, r2
   1ce5a:	603b      	str	r3, [r7, #0]
   1ce5c:	683b      	ldr	r3, [r7, #0]
   1ce5e:	685b      	ldr	r3, [r3, #4]
   1ce60:	685a      	ldr	r2, [r3, #4]
   1ce62:	683b      	ldr	r3, [r7, #0]
   1ce64:	605a      	str	r2, [r3, #4]
   1ce66:	683b      	ldr	r3, [r7, #0]
   1ce68:	685a      	ldr	r2, [r3, #4]
   1ce6a:	683b      	ldr	r3, [r7, #0]
   1ce6c:	3308      	adds	r3, #8
   1ce6e:	429a      	cmp	r2, r3
   1ce70:	d104      	bne.n	1ce7c <vTaskSwitchContext+0x98>
   1ce72:	683b      	ldr	r3, [r7, #0]
   1ce74:	685b      	ldr	r3, [r3, #4]
   1ce76:	685a      	ldr	r2, [r3, #4]
   1ce78:	683b      	ldr	r3, [r7, #0]
   1ce7a:	605a      	str	r2, [r3, #4]
   1ce7c:	683b      	ldr	r3, [r7, #0]
   1ce7e:	685b      	ldr	r3, [r3, #4]
   1ce80:	68da      	ldr	r2, [r3, #12]
   1ce82:	4b16      	ldr	r3, [pc, #88]	; (1cedc <vTaskSwitchContext+0xf8>)
   1ce84:	601a      	str	r2, [r3, #0]
   1ce86:	4b17      	ldr	r3, [pc, #92]	; (1cee4 <vTaskSwitchContext+0x100>)
   1ce88:	687a      	ldr	r2, [r7, #4]
   1ce8a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1ce8c:	4b17      	ldr	r3, [pc, #92]	; (1ceec <vTaskSwitchContext+0x108>)
   1ce8e:	2201      	movs	r2, #1
   1ce90:	601a      	str	r2, [r3, #0]
   1ce92:	4b17      	ldr	r3, [pc, #92]	; (1cef0 <vTaskSwitchContext+0x10c>)
   1ce94:	4798      	blx	r3
   1ce96:	0003      	movs	r3, r0
   1ce98:	0018      	movs	r0, r3
   1ce9a:	4b16      	ldr	r3, [pc, #88]	; (1cef4 <vTaskSwitchContext+0x110>)
   1ce9c:	4798      	blx	r3
   1ce9e:	0003      	movs	r3, r0
   1cea0:	001a      	movs	r2, r3
   1cea2:	4b15      	ldr	r3, [pc, #84]	; (1cef8 <vTaskSwitchContext+0x114>)
   1cea4:	881b      	ldrh	r3, [r3, #0]
   1cea6:	4013      	ands	r3, r2
   1cea8:	b29b      	uxth	r3, r3
   1ceaa:	2b00      	cmp	r3, #0
   1ceac:	d00a      	beq.n	1cec4 <vTaskSwitchContext+0xe0>
   1ceae:	4b10      	ldr	r3, [pc, #64]	; (1cef0 <vTaskSwitchContext+0x10c>)
   1ceb0:	4798      	blx	r3
   1ceb2:	0003      	movs	r3, r0
   1ceb4:	0018      	movs	r0, r3
   1ceb6:	4b11      	ldr	r3, [pc, #68]	; (1cefc <vTaskSwitchContext+0x118>)
   1ceb8:	4798      	blx	r3
   1ceba:	0003      	movs	r3, r0
   1cebc:	b2db      	uxtb	r3, r3
   1cebe:	0018      	movs	r0, r3
   1cec0:	4b0f      	ldr	r3, [pc, #60]	; (1cf00 <vTaskSwitchContext+0x11c>)
   1cec2:	4798      	blx	r3
   1cec4:	4b09      	ldr	r3, [pc, #36]	; (1ceec <vTaskSwitchContext+0x108>)
   1cec6:	2202      	movs	r2, #2
   1cec8:	601a      	str	r2, [r3, #0]
}
   1ceca:	46c0      	nop			; (mov r8, r8)
   1cecc:	46bd      	mov	sp, r7
   1cece:	b002      	add	sp, #8
   1ced0:	bd80      	pop	{r7, pc}
   1ced2:	46c0      	nop			; (mov r8, r8)
   1ced4:	20003dd0 	.word	0x20003dd0
   1ced8:	20003dbc 	.word	0x20003dbc
   1cedc:	20003cd0 	.word	0x20003cd0
   1cee0:	00032c4d 	.word	0x00032c4d
   1cee4:	20003db0 	.word	0x20003db0
   1cee8:	20003cd4 	.word	0x20003cd4
   1ceec:	2000093c 	.word	0x2000093c
   1cef0:	00018a31 	.word	0x00018a31
   1cef4:	00018795 	.word	0x00018795
   1cef8:	200000b8 	.word	0x200000b8
   1cefc:	00018775 	.word	0x00018775
   1cf00:	00019591 	.word	0x00019591

0001cf04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1cf04:	b580      	push	{r7, lr}
   1cf06:	b082      	sub	sp, #8
   1cf08:	af00      	add	r7, sp, #0
   1cf0a:	6078      	str	r0, [r7, #4]
   1cf0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1cf0e:	687b      	ldr	r3, [r7, #4]
   1cf10:	2b00      	cmp	r3, #0
   1cf12:	d101      	bne.n	1cf18 <vTaskPlaceOnEventList+0x14>
   1cf14:	b672      	cpsid	i
   1cf16:	e7fe      	b.n	1cf16 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cf18:	4b08      	ldr	r3, [pc, #32]	; (1cf3c <vTaskPlaceOnEventList+0x38>)
   1cf1a:	681b      	ldr	r3, [r3, #0]
   1cf1c:	3318      	adds	r3, #24
   1cf1e:	001a      	movs	r2, r3
   1cf20:	687b      	ldr	r3, [r7, #4]
   1cf22:	0011      	movs	r1, r2
   1cf24:	0018      	movs	r0, r3
   1cf26:	4b06      	ldr	r3, [pc, #24]	; (1cf40 <vTaskPlaceOnEventList+0x3c>)
   1cf28:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1cf2a:	683b      	ldr	r3, [r7, #0]
   1cf2c:	2101      	movs	r1, #1
   1cf2e:	0018      	movs	r0, r3
   1cf30:	4b04      	ldr	r3, [pc, #16]	; (1cf44 <vTaskPlaceOnEventList+0x40>)
   1cf32:	4798      	blx	r3
}
   1cf34:	46c0      	nop			; (mov r8, r8)
   1cf36:	46bd      	mov	sp, r7
   1cf38:	b002      	add	sp, #8
   1cf3a:	bd80      	pop	{r7, pc}
   1cf3c:	20003cd0 	.word	0x20003cd0
   1cf40:	0001a5a3 	.word	0x0001a5a3
   1cf44:	0001d9a9 	.word	0x0001d9a9

0001cf48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1cf48:	b580      	push	{r7, lr}
   1cf4a:	b084      	sub	sp, #16
   1cf4c:	af00      	add	r7, sp, #0
   1cf4e:	60f8      	str	r0, [r7, #12]
   1cf50:	60b9      	str	r1, [r7, #8]
   1cf52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1cf54:	68fb      	ldr	r3, [r7, #12]
   1cf56:	2b00      	cmp	r3, #0
   1cf58:	d101      	bne.n	1cf5e <vTaskPlaceOnEventListRestricted+0x16>
   1cf5a:	b672      	cpsid	i
   1cf5c:	e7fe      	b.n	1cf5c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1cf5e:	4b28      	ldr	r3, [pc, #160]	; (1d000 <vTaskPlaceOnEventListRestricted+0xb8>)
   1cf60:	681b      	ldr	r3, [r3, #0]
   1cf62:	3318      	adds	r3, #24
   1cf64:	001a      	movs	r2, r3
   1cf66:	68fb      	ldr	r3, [r7, #12]
   1cf68:	0011      	movs	r1, r2
   1cf6a:	0018      	movs	r0, r3
   1cf6c:	4b25      	ldr	r3, [pc, #148]	; (1d004 <vTaskPlaceOnEventListRestricted+0xbc>)
   1cf6e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1cf70:	687b      	ldr	r3, [r7, #4]
   1cf72:	2b00      	cmp	r3, #0
   1cf74:	d002      	beq.n	1cf7c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1cf76:	2301      	movs	r3, #1
   1cf78:	425b      	negs	r3, r3
   1cf7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1cf7c:	4b20      	ldr	r3, [pc, #128]	; (1d000 <vTaskPlaceOnEventListRestricted+0xb8>)
   1cf7e:	681b      	ldr	r3, [r3, #0]
   1cf80:	0018      	movs	r0, r3
   1cf82:	4b21      	ldr	r3, [pc, #132]	; (1d008 <vTaskPlaceOnEventListRestricted+0xc0>)
   1cf84:	4798      	blx	r3
   1cf86:	0003      	movs	r3, r0
   1cf88:	001a      	movs	r2, r3
   1cf8a:	4b20      	ldr	r3, [pc, #128]	; (1d00c <vTaskPlaceOnEventListRestricted+0xc4>)
   1cf8c:	881b      	ldrh	r3, [r3, #0]
   1cf8e:	4013      	ands	r3, r2
   1cf90:	b29b      	uxth	r3, r3
   1cf92:	2b00      	cmp	r3, #0
   1cf94:	d011      	beq.n	1cfba <vTaskPlaceOnEventListRestricted+0x72>
   1cf96:	4b1e      	ldr	r3, [pc, #120]	; (1d010 <vTaskPlaceOnEventListRestricted+0xc8>)
   1cf98:	681a      	ldr	r2, [r3, #0]
   1cf9a:	68bb      	ldr	r3, [r7, #8]
   1cf9c:	18d3      	adds	r3, r2, r3
   1cf9e:	0019      	movs	r1, r3
   1cfa0:	2088      	movs	r0, #136	; 0x88
   1cfa2:	4b1c      	ldr	r3, [pc, #112]	; (1d014 <vTaskPlaceOnEventListRestricted+0xcc>)
   1cfa4:	4798      	blx	r3
   1cfa6:	4b16      	ldr	r3, [pc, #88]	; (1d000 <vTaskPlaceOnEventListRestricted+0xb8>)
   1cfa8:	681b      	ldr	r3, [r3, #0]
   1cfaa:	0018      	movs	r0, r3
   1cfac:	4b1a      	ldr	r3, [pc, #104]	; (1d018 <vTaskPlaceOnEventListRestricted+0xd0>)
   1cfae:	4798      	blx	r3
   1cfb0:	0003      	movs	r3, r0
   1cfb2:	b2db      	uxtb	r3, r3
   1cfb4:	0018      	movs	r0, r3
   1cfb6:	4b19      	ldr	r3, [pc, #100]	; (1d01c <vTaskPlaceOnEventListRestricted+0xd4>)
   1cfb8:	4798      	blx	r3
   1cfba:	4b19      	ldr	r3, [pc, #100]	; (1d020 <vTaskPlaceOnEventListRestricted+0xd8>)
   1cfbc:	4798      	blx	r3
   1cfbe:	0003      	movs	r3, r0
   1cfc0:	0018      	movs	r0, r3
   1cfc2:	4b11      	ldr	r3, [pc, #68]	; (1d008 <vTaskPlaceOnEventListRestricted+0xc0>)
   1cfc4:	4798      	blx	r3
   1cfc6:	0003      	movs	r3, r0
   1cfc8:	001a      	movs	r2, r3
   1cfca:	4b10      	ldr	r3, [pc, #64]	; (1d00c <vTaskPlaceOnEventListRestricted+0xc4>)
   1cfcc:	881b      	ldrh	r3, [r3, #0]
   1cfce:	4013      	ands	r3, r2
   1cfd0:	b29b      	uxth	r3, r3
   1cfd2:	2b00      	cmp	r3, #0
   1cfd4:	d00a      	beq.n	1cfec <vTaskPlaceOnEventListRestricted+0xa4>
   1cfd6:	4b12      	ldr	r3, [pc, #72]	; (1d020 <vTaskPlaceOnEventListRestricted+0xd8>)
   1cfd8:	4798      	blx	r3
   1cfda:	0003      	movs	r3, r0
   1cfdc:	0018      	movs	r0, r3
   1cfde:	4b0e      	ldr	r3, [pc, #56]	; (1d018 <vTaskPlaceOnEventListRestricted+0xd0>)
   1cfe0:	4798      	blx	r3
   1cfe2:	0003      	movs	r3, r0
   1cfe4:	b2db      	uxtb	r3, r3
   1cfe6:	0018      	movs	r0, r3
   1cfe8:	4b0c      	ldr	r3, [pc, #48]	; (1d01c <vTaskPlaceOnEventListRestricted+0xd4>)
   1cfea:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1cfec:	687a      	ldr	r2, [r7, #4]
   1cfee:	68bb      	ldr	r3, [r7, #8]
   1cff0:	0011      	movs	r1, r2
   1cff2:	0018      	movs	r0, r3
   1cff4:	4b0b      	ldr	r3, [pc, #44]	; (1d024 <vTaskPlaceOnEventListRestricted+0xdc>)
   1cff6:	4798      	blx	r3
	}
   1cff8:	46c0      	nop			; (mov r8, r8)
   1cffa:	46bd      	mov	sp, r7
   1cffc:	b004      	add	sp, #16
   1cffe:	bd80      	pop	{r7, pc}
   1d000:	20003cd0 	.word	0x20003cd0
   1d004:	0001a55f 	.word	0x0001a55f
   1d008:	00018795 	.word	0x00018795
   1d00c:	200000b8 	.word	0x200000b8
   1d010:	20003dac 	.word	0x20003dac
   1d014:	00019495 	.word	0x00019495
   1d018:	00018775 	.word	0x00018775
   1d01c:	00019925 	.word	0x00019925
   1d020:	00018a31 	.word	0x00018a31
   1d024:	0001d9a9 	.word	0x0001d9a9

0001d028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1d028:	b580      	push	{r7, lr}
   1d02a:	b084      	sub	sp, #16
   1d02c:	af00      	add	r7, sp, #0
   1d02e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1d030:	687b      	ldr	r3, [r7, #4]
   1d032:	68db      	ldr	r3, [r3, #12]
   1d034:	68db      	ldr	r3, [r3, #12]
   1d036:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1d038:	68bb      	ldr	r3, [r7, #8]
   1d03a:	2b00      	cmp	r3, #0
   1d03c:	d101      	bne.n	1d042 <xTaskRemoveFromEventList+0x1a>
   1d03e:	b672      	cpsid	i
   1d040:	e7fe      	b.n	1d040 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1d042:	68bb      	ldr	r3, [r7, #8]
   1d044:	3318      	adds	r3, #24
   1d046:	0018      	movs	r0, r3
   1d048:	4b2a      	ldr	r3, [pc, #168]	; (1d0f4 <xTaskRemoveFromEventList+0xcc>)
   1d04a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d04c:	4b2a      	ldr	r3, [pc, #168]	; (1d0f8 <xTaskRemoveFromEventList+0xd0>)
   1d04e:	681b      	ldr	r3, [r3, #0]
   1d050:	2b00      	cmp	r3, #0
   1d052:	d132      	bne.n	1d0ba <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1d054:	68bb      	ldr	r3, [r7, #8]
   1d056:	3304      	adds	r3, #4
   1d058:	0018      	movs	r0, r3
   1d05a:	4b26      	ldr	r3, [pc, #152]	; (1d0f4 <xTaskRemoveFromEventList+0xcc>)
   1d05c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1d05e:	68bb      	ldr	r3, [r7, #8]
   1d060:	0018      	movs	r0, r3
   1d062:	4b26      	ldr	r3, [pc, #152]	; (1d0fc <xTaskRemoveFromEventList+0xd4>)
   1d064:	4798      	blx	r3
   1d066:	0003      	movs	r3, r0
   1d068:	001a      	movs	r2, r3
   1d06a:	4b25      	ldr	r3, [pc, #148]	; (1d100 <xTaskRemoveFromEventList+0xd8>)
   1d06c:	881b      	ldrh	r3, [r3, #0]
   1d06e:	4013      	ands	r3, r2
   1d070:	b29b      	uxth	r3, r3
   1d072:	2b00      	cmp	r3, #0
   1d074:	d008      	beq.n	1d088 <xTaskRemoveFromEventList+0x60>
   1d076:	68bb      	ldr	r3, [r7, #8]
   1d078:	0018      	movs	r0, r3
   1d07a:	4b22      	ldr	r3, [pc, #136]	; (1d104 <xTaskRemoveFromEventList+0xdc>)
   1d07c:	4798      	blx	r3
   1d07e:	0003      	movs	r3, r0
   1d080:	b2db      	uxtb	r3, r3
   1d082:	0018      	movs	r0, r3
   1d084:	4b20      	ldr	r3, [pc, #128]	; (1d108 <xTaskRemoveFromEventList+0xe0>)
   1d086:	4798      	blx	r3
   1d088:	68bb      	ldr	r3, [r7, #8]
   1d08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d08c:	4b1f      	ldr	r3, [pc, #124]	; (1d10c <xTaskRemoveFromEventList+0xe4>)
   1d08e:	681b      	ldr	r3, [r3, #0]
   1d090:	429a      	cmp	r2, r3
   1d092:	d903      	bls.n	1d09c <xTaskRemoveFromEventList+0x74>
   1d094:	68bb      	ldr	r3, [r7, #8]
   1d096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d098:	4b1c      	ldr	r3, [pc, #112]	; (1d10c <xTaskRemoveFromEventList+0xe4>)
   1d09a:	601a      	str	r2, [r3, #0]
   1d09c:	68bb      	ldr	r3, [r7, #8]
   1d09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d0a0:	0013      	movs	r3, r2
   1d0a2:	009b      	lsls	r3, r3, #2
   1d0a4:	189b      	adds	r3, r3, r2
   1d0a6:	009b      	lsls	r3, r3, #2
   1d0a8:	4a19      	ldr	r2, [pc, #100]	; (1d110 <xTaskRemoveFromEventList+0xe8>)
   1d0aa:	189a      	adds	r2, r3, r2
   1d0ac:	68bb      	ldr	r3, [r7, #8]
   1d0ae:	3304      	adds	r3, #4
   1d0b0:	0019      	movs	r1, r3
   1d0b2:	0010      	movs	r0, r2
   1d0b4:	4b17      	ldr	r3, [pc, #92]	; (1d114 <xTaskRemoveFromEventList+0xec>)
   1d0b6:	4798      	blx	r3
   1d0b8:	e007      	b.n	1d0ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1d0ba:	68bb      	ldr	r3, [r7, #8]
   1d0bc:	3318      	adds	r3, #24
   1d0be:	001a      	movs	r2, r3
   1d0c0:	4b15      	ldr	r3, [pc, #84]	; (1d118 <xTaskRemoveFromEventList+0xf0>)
   1d0c2:	0011      	movs	r1, r2
   1d0c4:	0018      	movs	r0, r3
   1d0c6:	4b13      	ldr	r3, [pc, #76]	; (1d114 <xTaskRemoveFromEventList+0xec>)
   1d0c8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1d0ca:	68bb      	ldr	r3, [r7, #8]
   1d0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d0ce:	4b13      	ldr	r3, [pc, #76]	; (1d11c <xTaskRemoveFromEventList+0xf4>)
   1d0d0:	681b      	ldr	r3, [r3, #0]
   1d0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d0d4:	429a      	cmp	r2, r3
   1d0d6:	d905      	bls.n	1d0e4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1d0d8:	2301      	movs	r3, #1
   1d0da:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1d0dc:	4b10      	ldr	r3, [pc, #64]	; (1d120 <xTaskRemoveFromEventList+0xf8>)
   1d0de:	2201      	movs	r2, #1
   1d0e0:	601a      	str	r2, [r3, #0]
   1d0e2:	e001      	b.n	1d0e8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1d0e4:	2300      	movs	r3, #0
   1d0e6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1d0e8:	68fb      	ldr	r3, [r7, #12]
}
   1d0ea:	0018      	movs	r0, r3
   1d0ec:	46bd      	mov	sp, r7
   1d0ee:	b004      	add	sp, #16
   1d0f0:	bd80      	pop	{r7, pc}
   1d0f2:	46c0      	nop			; (mov r8, r8)
   1d0f4:	0001a60f 	.word	0x0001a60f
   1d0f8:	20003dd0 	.word	0x20003dd0
   1d0fc:	00018795 	.word	0x00018795
   1d100:	200000b8 	.word	0x200000b8
   1d104:	00018775 	.word	0x00018775
   1d108:	00018f45 	.word	0x00018f45
   1d10c:	20003db0 	.word	0x20003db0
   1d110:	20003cd4 	.word	0x20003cd4
   1d114:	0001a55f 	.word	0x0001a55f
   1d118:	20003d68 	.word	0x20003d68
   1d11c:	20003cd0 	.word	0x20003cd0
   1d120:	20003dbc 	.word	0x20003dbc

0001d124 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d124:	b580      	push	{r7, lr}
   1d126:	b082      	sub	sp, #8
   1d128:	af00      	add	r7, sp, #0
   1d12a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1d12c:	687b      	ldr	r3, [r7, #4]
   1d12e:	2b00      	cmp	r3, #0
   1d130:	d101      	bne.n	1d136 <vTaskSetTimeOutState+0x12>
   1d132:	b672      	cpsid	i
   1d134:	e7fe      	b.n	1d134 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1d136:	4b08      	ldr	r3, [pc, #32]	; (1d158 <vTaskSetTimeOutState+0x34>)
   1d138:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d13a:	4b08      	ldr	r3, [pc, #32]	; (1d15c <vTaskSetTimeOutState+0x38>)
   1d13c:	681a      	ldr	r2, [r3, #0]
   1d13e:	687b      	ldr	r3, [r7, #4]
   1d140:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1d142:	4b07      	ldr	r3, [pc, #28]	; (1d160 <vTaskSetTimeOutState+0x3c>)
   1d144:	681a      	ldr	r2, [r3, #0]
   1d146:	687b      	ldr	r3, [r7, #4]
   1d148:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1d14a:	4b06      	ldr	r3, [pc, #24]	; (1d164 <vTaskSetTimeOutState+0x40>)
   1d14c:	4798      	blx	r3
}
   1d14e:	46c0      	nop			; (mov r8, r8)
   1d150:	46bd      	mov	sp, r7
   1d152:	b002      	add	sp, #8
   1d154:	bd80      	pop	{r7, pc}
   1d156:	46c0      	nop			; (mov r8, r8)
   1d158:	0001a799 	.word	0x0001a799
   1d15c:	20003dc0 	.word	0x20003dc0
   1d160:	20003dac 	.word	0x20003dac
   1d164:	0001a7bd 	.word	0x0001a7bd

0001d168 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d168:	b580      	push	{r7, lr}
   1d16a:	b082      	sub	sp, #8
   1d16c:	af00      	add	r7, sp, #0
   1d16e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d170:	4b05      	ldr	r3, [pc, #20]	; (1d188 <vTaskInternalSetTimeOutState+0x20>)
   1d172:	681a      	ldr	r2, [r3, #0]
   1d174:	687b      	ldr	r3, [r7, #4]
   1d176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1d178:	4b04      	ldr	r3, [pc, #16]	; (1d18c <vTaskInternalSetTimeOutState+0x24>)
   1d17a:	681a      	ldr	r2, [r3, #0]
   1d17c:	687b      	ldr	r3, [r7, #4]
   1d17e:	605a      	str	r2, [r3, #4]
}
   1d180:	46c0      	nop			; (mov r8, r8)
   1d182:	46bd      	mov	sp, r7
   1d184:	b002      	add	sp, #8
   1d186:	bd80      	pop	{r7, pc}
   1d188:	20003dc0 	.word	0x20003dc0
   1d18c:	20003dac 	.word	0x20003dac

0001d190 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d190:	b580      	push	{r7, lr}
   1d192:	b086      	sub	sp, #24
   1d194:	af00      	add	r7, sp, #0
   1d196:	6078      	str	r0, [r7, #4]
   1d198:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d19a:	687b      	ldr	r3, [r7, #4]
   1d19c:	2b00      	cmp	r3, #0
   1d19e:	d101      	bne.n	1d1a4 <xTaskCheckForTimeOut+0x14>
   1d1a0:	b672      	cpsid	i
   1d1a2:	e7fe      	b.n	1d1a2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d1a4:	683b      	ldr	r3, [r7, #0]
   1d1a6:	2b00      	cmp	r3, #0
   1d1a8:	d101      	bne.n	1d1ae <xTaskCheckForTimeOut+0x1e>
   1d1aa:	b672      	cpsid	i
   1d1ac:	e7fe      	b.n	1d1ac <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d1ae:	4b1e      	ldr	r3, [pc, #120]	; (1d228 <xTaskCheckForTimeOut+0x98>)
   1d1b0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d1b2:	4b1e      	ldr	r3, [pc, #120]	; (1d22c <xTaskCheckForTimeOut+0x9c>)
   1d1b4:	681b      	ldr	r3, [r3, #0]
   1d1b6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d1b8:	687b      	ldr	r3, [r7, #4]
   1d1ba:	685b      	ldr	r3, [r3, #4]
   1d1bc:	693a      	ldr	r2, [r7, #16]
   1d1be:	1ad3      	subs	r3, r2, r3
   1d1c0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d1c2:	683b      	ldr	r3, [r7, #0]
   1d1c4:	681b      	ldr	r3, [r3, #0]
   1d1c6:	3301      	adds	r3, #1
   1d1c8:	d102      	bne.n	1d1d0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d1ca:	2300      	movs	r3, #0
   1d1cc:	617b      	str	r3, [r7, #20]
   1d1ce:	e024      	b.n	1d21a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1d1d0:	687b      	ldr	r3, [r7, #4]
   1d1d2:	681a      	ldr	r2, [r3, #0]
   1d1d4:	4b16      	ldr	r3, [pc, #88]	; (1d230 <xTaskCheckForTimeOut+0xa0>)
   1d1d6:	681b      	ldr	r3, [r3, #0]
   1d1d8:	429a      	cmp	r2, r3
   1d1da:	d007      	beq.n	1d1ec <xTaskCheckForTimeOut+0x5c>
   1d1dc:	687b      	ldr	r3, [r7, #4]
   1d1de:	685a      	ldr	r2, [r3, #4]
   1d1e0:	693b      	ldr	r3, [r7, #16]
   1d1e2:	429a      	cmp	r2, r3
   1d1e4:	d802      	bhi.n	1d1ec <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1d1e6:	2301      	movs	r3, #1
   1d1e8:	617b      	str	r3, [r7, #20]
   1d1ea:	e016      	b.n	1d21a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1d1ec:	683b      	ldr	r3, [r7, #0]
   1d1ee:	681a      	ldr	r2, [r3, #0]
   1d1f0:	68fb      	ldr	r3, [r7, #12]
   1d1f2:	429a      	cmp	r2, r3
   1d1f4:	d90c      	bls.n	1d210 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d1f6:	683b      	ldr	r3, [r7, #0]
   1d1f8:	681a      	ldr	r2, [r3, #0]
   1d1fa:	68fb      	ldr	r3, [r7, #12]
   1d1fc:	1ad2      	subs	r2, r2, r3
   1d1fe:	683b      	ldr	r3, [r7, #0]
   1d200:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d202:	687b      	ldr	r3, [r7, #4]
   1d204:	0018      	movs	r0, r3
   1d206:	4b0b      	ldr	r3, [pc, #44]	; (1d234 <xTaskCheckForTimeOut+0xa4>)
   1d208:	4798      	blx	r3
			xReturn = pdFALSE;
   1d20a:	2300      	movs	r3, #0
   1d20c:	617b      	str	r3, [r7, #20]
   1d20e:	e004      	b.n	1d21a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1d210:	683b      	ldr	r3, [r7, #0]
   1d212:	2200      	movs	r2, #0
   1d214:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d216:	2301      	movs	r3, #1
   1d218:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d21a:	4b07      	ldr	r3, [pc, #28]	; (1d238 <xTaskCheckForTimeOut+0xa8>)
   1d21c:	4798      	blx	r3

	return xReturn;
   1d21e:	697b      	ldr	r3, [r7, #20]
}
   1d220:	0018      	movs	r0, r3
   1d222:	46bd      	mov	sp, r7
   1d224:	b006      	add	sp, #24
   1d226:	bd80      	pop	{r7, pc}
   1d228:	0001a799 	.word	0x0001a799
   1d22c:	20003dac 	.word	0x20003dac
   1d230:	20003dc0 	.word	0x20003dc0
   1d234:	0001d169 	.word	0x0001d169
   1d238:	0001a7bd 	.word	0x0001a7bd

0001d23c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d23c:	b580      	push	{r7, lr}
   1d23e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d240:	4b02      	ldr	r3, [pc, #8]	; (1d24c <vTaskMissedYield+0x10>)
   1d242:	2201      	movs	r2, #1
   1d244:	601a      	str	r2, [r3, #0]
}
   1d246:	46c0      	nop			; (mov r8, r8)
   1d248:	46bd      	mov	sp, r7
   1d24a:	bd80      	pop	{r7, pc}
   1d24c:	20003dbc 	.word	0x20003dbc

0001d250 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1d250:	b580      	push	{r7, lr}
   1d252:	b084      	sub	sp, #16
   1d254:	af00      	add	r7, sp, #0
   1d256:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d258:	687b      	ldr	r3, [r7, #4]
   1d25a:	2b00      	cmp	r3, #0
   1d25c:	d005      	beq.n	1d26a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d25e:	687b      	ldr	r3, [r7, #4]
   1d260:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1d262:	68bb      	ldr	r3, [r7, #8]
   1d264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d266:	60fb      	str	r3, [r7, #12]
   1d268:	e001      	b.n	1d26e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1d26a:	2300      	movs	r3, #0
   1d26c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1d26e:	68fb      	ldr	r3, [r7, #12]
	}
   1d270:	0018      	movs	r0, r3
   1d272:	46bd      	mov	sp, r7
   1d274:	b004      	add	sp, #16
   1d276:	bd80      	pop	{r7, pc}

0001d278 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1d278:	b580      	push	{r7, lr}
   1d27a:	b084      	sub	sp, #16
   1d27c:	af00      	add	r7, sp, #0
   1d27e:	6078      	str	r0, [r7, #4]
   1d280:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d282:	687b      	ldr	r3, [r7, #4]
   1d284:	2b00      	cmp	r3, #0
   1d286:	d004      	beq.n	1d292 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d288:	687b      	ldr	r3, [r7, #4]
   1d28a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1d28c:	68fb      	ldr	r3, [r7, #12]
   1d28e:	683a      	ldr	r2, [r7, #0]
   1d290:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1d292:	46c0      	nop			; (mov r8, r8)
   1d294:	46bd      	mov	sp, r7
   1d296:	b004      	add	sp, #16
   1d298:	bd80      	pop	{r7, pc}
	...

0001d29c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d29c:	b580      	push	{r7, lr}
   1d29e:	b082      	sub	sp, #8
   1d2a0:	af00      	add	r7, sp, #0
   1d2a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d2a4:	4b04      	ldr	r3, [pc, #16]	; (1d2b8 <prvIdleTask+0x1c>)
   1d2a6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d2a8:	4b04      	ldr	r3, [pc, #16]	; (1d2bc <prvIdleTask+0x20>)
   1d2aa:	681b      	ldr	r3, [r3, #0]
   1d2ac:	2b01      	cmp	r3, #1
   1d2ae:	d9f9      	bls.n	1d2a4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1d2b0:	4b03      	ldr	r3, [pc, #12]	; (1d2c0 <prvIdleTask+0x24>)
   1d2b2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1d2b4:	e7f6      	b.n	1d2a4 <prvIdleTask+0x8>
   1d2b6:	46c0      	nop			; (mov r8, r8)
   1d2b8:	0001d351 	.word	0x0001d351
   1d2bc:	20003cd4 	.word	0x20003cd4
   1d2c0:	0001a781 	.word	0x0001a781

0001d2c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d2c4:	b580      	push	{r7, lr}
   1d2c6:	b082      	sub	sp, #8
   1d2c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d2ca:	2300      	movs	r3, #0
   1d2cc:	607b      	str	r3, [r7, #4]
   1d2ce:	e00c      	b.n	1d2ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d2d0:	687a      	ldr	r2, [r7, #4]
   1d2d2:	0013      	movs	r3, r2
   1d2d4:	009b      	lsls	r3, r3, #2
   1d2d6:	189b      	adds	r3, r3, r2
   1d2d8:	009b      	lsls	r3, r3, #2
   1d2da:	4a14      	ldr	r2, [pc, #80]	; (1d32c <prvInitialiseTaskLists+0x68>)
   1d2dc:	189b      	adds	r3, r3, r2
   1d2de:	0018      	movs	r0, r3
   1d2e0:	4b13      	ldr	r3, [pc, #76]	; (1d330 <prvInitialiseTaskLists+0x6c>)
   1d2e2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d2e4:	687b      	ldr	r3, [r7, #4]
   1d2e6:	3301      	adds	r3, #1
   1d2e8:	607b      	str	r3, [r7, #4]
   1d2ea:	687b      	ldr	r3, [r7, #4]
   1d2ec:	2b04      	cmp	r3, #4
   1d2ee:	d9ef      	bls.n	1d2d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d2f0:	4b10      	ldr	r3, [pc, #64]	; (1d334 <prvInitialiseTaskLists+0x70>)
   1d2f2:	0018      	movs	r0, r3
   1d2f4:	4b0e      	ldr	r3, [pc, #56]	; (1d330 <prvInitialiseTaskLists+0x6c>)
   1d2f6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1d2f8:	4b0f      	ldr	r3, [pc, #60]	; (1d338 <prvInitialiseTaskLists+0x74>)
   1d2fa:	0018      	movs	r0, r3
   1d2fc:	4b0c      	ldr	r3, [pc, #48]	; (1d330 <prvInitialiseTaskLists+0x6c>)
   1d2fe:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1d300:	4b0e      	ldr	r3, [pc, #56]	; (1d33c <prvInitialiseTaskLists+0x78>)
   1d302:	0018      	movs	r0, r3
   1d304:	4b0a      	ldr	r3, [pc, #40]	; (1d330 <prvInitialiseTaskLists+0x6c>)
   1d306:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1d308:	4b0d      	ldr	r3, [pc, #52]	; (1d340 <prvInitialiseTaskLists+0x7c>)
   1d30a:	0018      	movs	r0, r3
   1d30c:	4b08      	ldr	r3, [pc, #32]	; (1d330 <prvInitialiseTaskLists+0x6c>)
   1d30e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d310:	4b0c      	ldr	r3, [pc, #48]	; (1d344 <prvInitialiseTaskLists+0x80>)
   1d312:	0018      	movs	r0, r3
   1d314:	4b06      	ldr	r3, [pc, #24]	; (1d330 <prvInitialiseTaskLists+0x6c>)
   1d316:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d318:	4b0b      	ldr	r3, [pc, #44]	; (1d348 <prvInitialiseTaskLists+0x84>)
   1d31a:	4a06      	ldr	r2, [pc, #24]	; (1d334 <prvInitialiseTaskLists+0x70>)
   1d31c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d31e:	4b0b      	ldr	r3, [pc, #44]	; (1d34c <prvInitialiseTaskLists+0x88>)
   1d320:	4a05      	ldr	r2, [pc, #20]	; (1d338 <prvInitialiseTaskLists+0x74>)
   1d322:	601a      	str	r2, [r3, #0]
}
   1d324:	46c0      	nop			; (mov r8, r8)
   1d326:	46bd      	mov	sp, r7
   1d328:	b002      	add	sp, #8
   1d32a:	bd80      	pop	{r7, pc}
   1d32c:	20003cd4 	.word	0x20003cd4
   1d330:	0001a50d 	.word	0x0001a50d
   1d334:	20003d38 	.word	0x20003d38
   1d338:	20003d4c 	.word	0x20003d4c
   1d33c:	20003d68 	.word	0x20003d68
   1d340:	20003d7c 	.word	0x20003d7c
   1d344:	20003d94 	.word	0x20003d94
   1d348:	20003d60 	.word	0x20003d60
   1d34c:	20003d64 	.word	0x20003d64

0001d350 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d350:	b580      	push	{r7, lr}
   1d352:	b082      	sub	sp, #8
   1d354:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d356:	e01a      	b.n	1d38e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1d358:	4b11      	ldr	r3, [pc, #68]	; (1d3a0 <prvCheckTasksWaitingTermination+0x50>)
   1d35a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1d35c:	4b11      	ldr	r3, [pc, #68]	; (1d3a4 <prvCheckTasksWaitingTermination+0x54>)
   1d35e:	68db      	ldr	r3, [r3, #12]
   1d360:	68db      	ldr	r3, [r3, #12]
   1d362:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d364:	687b      	ldr	r3, [r7, #4]
   1d366:	3304      	adds	r3, #4
   1d368:	0018      	movs	r0, r3
   1d36a:	4b0f      	ldr	r3, [pc, #60]	; (1d3a8 <prvCheckTasksWaitingTermination+0x58>)
   1d36c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1d36e:	4b0f      	ldr	r3, [pc, #60]	; (1d3ac <prvCheckTasksWaitingTermination+0x5c>)
   1d370:	681b      	ldr	r3, [r3, #0]
   1d372:	1e5a      	subs	r2, r3, #1
   1d374:	4b0d      	ldr	r3, [pc, #52]	; (1d3ac <prvCheckTasksWaitingTermination+0x5c>)
   1d376:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1d378:	4b0d      	ldr	r3, [pc, #52]	; (1d3b0 <prvCheckTasksWaitingTermination+0x60>)
   1d37a:	681b      	ldr	r3, [r3, #0]
   1d37c:	1e5a      	subs	r2, r3, #1
   1d37e:	4b0c      	ldr	r3, [pc, #48]	; (1d3b0 <prvCheckTasksWaitingTermination+0x60>)
   1d380:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1d382:	4b0c      	ldr	r3, [pc, #48]	; (1d3b4 <prvCheckTasksWaitingTermination+0x64>)
   1d384:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1d386:	687b      	ldr	r3, [r7, #4]
   1d388:	0018      	movs	r0, r3
   1d38a:	4b0b      	ldr	r3, [pc, #44]	; (1d3b8 <prvCheckTasksWaitingTermination+0x68>)
   1d38c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d38e:	4b08      	ldr	r3, [pc, #32]	; (1d3b0 <prvCheckTasksWaitingTermination+0x60>)
   1d390:	681b      	ldr	r3, [r3, #0]
   1d392:	2b00      	cmp	r3, #0
   1d394:	d1e0      	bne.n	1d358 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1d396:	46c0      	nop			; (mov r8, r8)
   1d398:	46bd      	mov	sp, r7
   1d39a:	b002      	add	sp, #8
   1d39c:	bd80      	pop	{r7, pc}
   1d39e:	46c0      	nop			; (mov r8, r8)
   1d3a0:	0001a799 	.word	0x0001a799
   1d3a4:	20003d7c 	.word	0x20003d7c
   1d3a8:	0001a60f 	.word	0x0001a60f
   1d3ac:	20003da8 	.word	0x20003da8
   1d3b0:	20003d90 	.word	0x20003d90
   1d3b4:	0001a7bd 	.word	0x0001a7bd
   1d3b8:	0001d42d 	.word	0x0001d42d

0001d3bc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1d3bc:	b580      	push	{r7, lr}
   1d3be:	b084      	sub	sp, #16
   1d3c0:	af00      	add	r7, sp, #0
   1d3c2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1d3c4:	2300      	movs	r3, #0
   1d3c6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d3c8:	e005      	b.n	1d3d6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1d3ca:	687b      	ldr	r3, [r7, #4]
   1d3cc:	3301      	adds	r3, #1
   1d3ce:	607b      	str	r3, [r7, #4]
			ulCount++;
   1d3d0:	68fb      	ldr	r3, [r7, #12]
   1d3d2:	3301      	adds	r3, #1
   1d3d4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1d3d6:	687b      	ldr	r3, [r7, #4]
   1d3d8:	781b      	ldrb	r3, [r3, #0]
   1d3da:	2ba5      	cmp	r3, #165	; 0xa5
   1d3dc:	d0f5      	beq.n	1d3ca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1d3de:	68fb      	ldr	r3, [r7, #12]
   1d3e0:	089b      	lsrs	r3, r3, #2
   1d3e2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1d3e4:	68fb      	ldr	r3, [r7, #12]
   1d3e6:	b29b      	uxth	r3, r3
	}
   1d3e8:	0018      	movs	r0, r3
   1d3ea:	46bd      	mov	sp, r7
   1d3ec:	b004      	add	sp, #16
   1d3ee:	bd80      	pop	{r7, pc}

0001d3f0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1d3f0:	b580      	push	{r7, lr}
   1d3f2:	b086      	sub	sp, #24
   1d3f4:	af00      	add	r7, sp, #0
   1d3f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1d3f8:	687b      	ldr	r3, [r7, #4]
   1d3fa:	2b00      	cmp	r3, #0
   1d3fc:	d102      	bne.n	1d404 <uxTaskGetStackHighWaterMark+0x14>
   1d3fe:	4b09      	ldr	r3, [pc, #36]	; (1d424 <uxTaskGetStackHighWaterMark+0x34>)
   1d400:	681b      	ldr	r3, [r3, #0]
   1d402:	e000      	b.n	1d406 <uxTaskGetStackHighWaterMark+0x16>
   1d404:	687b      	ldr	r3, [r7, #4]
   1d406:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1d408:	697b      	ldr	r3, [r7, #20]
   1d40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d40c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1d40e:	693b      	ldr	r3, [r7, #16]
   1d410:	0018      	movs	r0, r3
   1d412:	4b05      	ldr	r3, [pc, #20]	; (1d428 <uxTaskGetStackHighWaterMark+0x38>)
   1d414:	4798      	blx	r3
   1d416:	0003      	movs	r3, r0
   1d418:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1d41a:	68fb      	ldr	r3, [r7, #12]
	}
   1d41c:	0018      	movs	r0, r3
   1d41e:	46bd      	mov	sp, r7
   1d420:	b006      	add	sp, #24
   1d422:	bd80      	pop	{r7, pc}
   1d424:	20003cd0 	.word	0x20003cd0
   1d428:	0001d3bd 	.word	0x0001d3bd

0001d42c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1d42c:	b580      	push	{r7, lr}
   1d42e:	b082      	sub	sp, #8
   1d430:	af00      	add	r7, sp, #0
   1d432:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1d434:	687b      	ldr	r3, [r7, #4]
   1d436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d438:	0018      	movs	r0, r3
   1d43a:	4b05      	ldr	r3, [pc, #20]	; (1d450 <prvDeleteTCB+0x24>)
   1d43c:	4798      	blx	r3
			vPortFree( pxTCB );
   1d43e:	687b      	ldr	r3, [r7, #4]
   1d440:	0018      	movs	r0, r3
   1d442:	4b03      	ldr	r3, [pc, #12]	; (1d450 <prvDeleteTCB+0x24>)
   1d444:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1d446:	46c0      	nop			; (mov r8, r8)
   1d448:	46bd      	mov	sp, r7
   1d44a:	b002      	add	sp, #8
   1d44c:	bd80      	pop	{r7, pc}
   1d44e:	46c0      	nop			; (mov r8, r8)
   1d450:	0001a995 	.word	0x0001a995

0001d454 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1d454:	b580      	push	{r7, lr}
   1d456:	b082      	sub	sp, #8
   1d458:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d45a:	4b0e      	ldr	r3, [pc, #56]	; (1d494 <prvResetNextTaskUnblockTime+0x40>)
   1d45c:	681b      	ldr	r3, [r3, #0]
   1d45e:	681b      	ldr	r3, [r3, #0]
   1d460:	2b00      	cmp	r3, #0
   1d462:	d101      	bne.n	1d468 <prvResetNextTaskUnblockTime+0x14>
   1d464:	2301      	movs	r3, #1
   1d466:	e000      	b.n	1d46a <prvResetNextTaskUnblockTime+0x16>
   1d468:	2300      	movs	r3, #0
   1d46a:	2b00      	cmp	r3, #0
   1d46c:	d004      	beq.n	1d478 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1d46e:	4b0a      	ldr	r3, [pc, #40]	; (1d498 <prvResetNextTaskUnblockTime+0x44>)
   1d470:	2201      	movs	r2, #1
   1d472:	4252      	negs	r2, r2
   1d474:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1d476:	e008      	b.n	1d48a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d478:	4b06      	ldr	r3, [pc, #24]	; (1d494 <prvResetNextTaskUnblockTime+0x40>)
   1d47a:	681b      	ldr	r3, [r3, #0]
   1d47c:	68db      	ldr	r3, [r3, #12]
   1d47e:	68db      	ldr	r3, [r3, #12]
   1d480:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1d482:	687b      	ldr	r3, [r7, #4]
   1d484:	685a      	ldr	r2, [r3, #4]
   1d486:	4b04      	ldr	r3, [pc, #16]	; (1d498 <prvResetNextTaskUnblockTime+0x44>)
   1d488:	601a      	str	r2, [r3, #0]
}
   1d48a:	46c0      	nop			; (mov r8, r8)
   1d48c:	46bd      	mov	sp, r7
   1d48e:	b002      	add	sp, #8
   1d490:	bd80      	pop	{r7, pc}
   1d492:	46c0      	nop			; (mov r8, r8)
   1d494:	20003d60 	.word	0x20003d60
   1d498:	20003dc8 	.word	0x20003dc8

0001d49c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1d49c:	b580      	push	{r7, lr}
   1d49e:	b082      	sub	sp, #8
   1d4a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1d4a2:	4b04      	ldr	r3, [pc, #16]	; (1d4b4 <xTaskGetCurrentTaskHandle+0x18>)
   1d4a4:	681b      	ldr	r3, [r3, #0]
   1d4a6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1d4a8:	687b      	ldr	r3, [r7, #4]
	}
   1d4aa:	0018      	movs	r0, r3
   1d4ac:	46bd      	mov	sp, r7
   1d4ae:	b002      	add	sp, #8
   1d4b0:	bd80      	pop	{r7, pc}
   1d4b2:	46c0      	nop			; (mov r8, r8)
   1d4b4:	20003cd0 	.word	0x20003cd0

0001d4b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1d4b8:	b580      	push	{r7, lr}
   1d4ba:	b082      	sub	sp, #8
   1d4bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1d4be:	4b0a      	ldr	r3, [pc, #40]	; (1d4e8 <xTaskGetSchedulerState+0x30>)
   1d4c0:	681b      	ldr	r3, [r3, #0]
   1d4c2:	2b00      	cmp	r3, #0
   1d4c4:	d102      	bne.n	1d4cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1d4c6:	2301      	movs	r3, #1
   1d4c8:	607b      	str	r3, [r7, #4]
   1d4ca:	e008      	b.n	1d4de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d4cc:	4b07      	ldr	r3, [pc, #28]	; (1d4ec <xTaskGetSchedulerState+0x34>)
   1d4ce:	681b      	ldr	r3, [r3, #0]
   1d4d0:	2b00      	cmp	r3, #0
   1d4d2:	d102      	bne.n	1d4da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1d4d4:	2302      	movs	r3, #2
   1d4d6:	607b      	str	r3, [r7, #4]
   1d4d8:	e001      	b.n	1d4de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1d4da:	2300      	movs	r3, #0
   1d4dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1d4de:	687b      	ldr	r3, [r7, #4]
	}
   1d4e0:	0018      	movs	r0, r3
   1d4e2:	46bd      	mov	sp, r7
   1d4e4:	b002      	add	sp, #8
   1d4e6:	bd80      	pop	{r7, pc}
   1d4e8:	20003db4 	.word	0x20003db4
   1d4ec:	20003dd0 	.word	0x20003dd0

0001d4f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1d4f0:	b590      	push	{r4, r7, lr}
   1d4f2:	b085      	sub	sp, #20
   1d4f4:	af00      	add	r7, sp, #0
   1d4f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1d4f8:	687b      	ldr	r3, [r7, #4]
   1d4fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d4fc:	2300      	movs	r3, #0
   1d4fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1d500:	687b      	ldr	r3, [r7, #4]
   1d502:	2b00      	cmp	r3, #0
   1d504:	d100      	bne.n	1d508 <xTaskPriorityInherit+0x18>
   1d506:	e09d      	b.n	1d644 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1d508:	68bb      	ldr	r3, [r7, #8]
   1d50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d50c:	4b50      	ldr	r3, [pc, #320]	; (1d650 <xTaskPriorityInherit+0x160>)
   1d50e:	681b      	ldr	r3, [r3, #0]
   1d510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d512:	429a      	cmp	r2, r3
   1d514:	d300      	bcc.n	1d518 <xTaskPriorityInherit+0x28>
   1d516:	e08c      	b.n	1d632 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d518:	68bb      	ldr	r3, [r7, #8]
   1d51a:	699b      	ldr	r3, [r3, #24]
   1d51c:	2b00      	cmp	r3, #0
   1d51e:	db06      	blt.n	1d52e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d520:	4b4b      	ldr	r3, [pc, #300]	; (1d650 <xTaskPriorityInherit+0x160>)
   1d522:	681b      	ldr	r3, [r3, #0]
   1d524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d526:	2205      	movs	r2, #5
   1d528:	1ad2      	subs	r2, r2, r3
   1d52a:	68bb      	ldr	r3, [r7, #8]
   1d52c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1d52e:	68bb      	ldr	r3, [r7, #8]
   1d530:	6959      	ldr	r1, [r3, #20]
   1d532:	68bb      	ldr	r3, [r7, #8]
   1d534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d536:	0013      	movs	r3, r2
   1d538:	009b      	lsls	r3, r3, #2
   1d53a:	189b      	adds	r3, r3, r2
   1d53c:	009b      	lsls	r3, r3, #2
   1d53e:	4a45      	ldr	r2, [pc, #276]	; (1d654 <xTaskPriorityInherit+0x164>)
   1d540:	189b      	adds	r3, r3, r2
   1d542:	4299      	cmp	r1, r3
   1d544:	d101      	bne.n	1d54a <xTaskPriorityInherit+0x5a>
   1d546:	2301      	movs	r3, #1
   1d548:	e000      	b.n	1d54c <xTaskPriorityInherit+0x5c>
   1d54a:	2300      	movs	r3, #0
   1d54c:	2b00      	cmp	r3, #0
   1d54e:	d037      	beq.n	1d5c0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d550:	68bb      	ldr	r3, [r7, #8]
   1d552:	3304      	adds	r3, #4
   1d554:	0018      	movs	r0, r3
   1d556:	4b40      	ldr	r3, [pc, #256]	; (1d658 <xTaskPriorityInherit+0x168>)
   1d558:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d55a:	4b3d      	ldr	r3, [pc, #244]	; (1d650 <xTaskPriorityInherit+0x160>)
   1d55c:	681b      	ldr	r3, [r3, #0]
   1d55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d560:	68bb      	ldr	r3, [r7, #8]
   1d562:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1d564:	68bb      	ldr	r3, [r7, #8]
   1d566:	0018      	movs	r0, r3
   1d568:	4b3c      	ldr	r3, [pc, #240]	; (1d65c <xTaskPriorityInherit+0x16c>)
   1d56a:	4798      	blx	r3
   1d56c:	0003      	movs	r3, r0
   1d56e:	001a      	movs	r2, r3
   1d570:	4b3b      	ldr	r3, [pc, #236]	; (1d660 <xTaskPriorityInherit+0x170>)
   1d572:	881b      	ldrh	r3, [r3, #0]
   1d574:	4013      	ands	r3, r2
   1d576:	b29b      	uxth	r3, r3
   1d578:	2b00      	cmp	r3, #0
   1d57a:	d008      	beq.n	1d58e <xTaskPriorityInherit+0x9e>
   1d57c:	68bb      	ldr	r3, [r7, #8]
   1d57e:	0018      	movs	r0, r3
   1d580:	4b38      	ldr	r3, [pc, #224]	; (1d664 <xTaskPriorityInherit+0x174>)
   1d582:	4798      	blx	r3
   1d584:	0003      	movs	r3, r0
   1d586:	b2db      	uxtb	r3, r3
   1d588:	0018      	movs	r0, r3
   1d58a:	4b37      	ldr	r3, [pc, #220]	; (1d668 <xTaskPriorityInherit+0x178>)
   1d58c:	4798      	blx	r3
   1d58e:	68bb      	ldr	r3, [r7, #8]
   1d590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d592:	4b36      	ldr	r3, [pc, #216]	; (1d66c <xTaskPriorityInherit+0x17c>)
   1d594:	681b      	ldr	r3, [r3, #0]
   1d596:	429a      	cmp	r2, r3
   1d598:	d903      	bls.n	1d5a2 <xTaskPriorityInherit+0xb2>
   1d59a:	68bb      	ldr	r3, [r7, #8]
   1d59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d59e:	4b33      	ldr	r3, [pc, #204]	; (1d66c <xTaskPriorityInherit+0x17c>)
   1d5a0:	601a      	str	r2, [r3, #0]
   1d5a2:	68bb      	ldr	r3, [r7, #8]
   1d5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d5a6:	0013      	movs	r3, r2
   1d5a8:	009b      	lsls	r3, r3, #2
   1d5aa:	189b      	adds	r3, r3, r2
   1d5ac:	009b      	lsls	r3, r3, #2
   1d5ae:	4a29      	ldr	r2, [pc, #164]	; (1d654 <xTaskPriorityInherit+0x164>)
   1d5b0:	189a      	adds	r2, r3, r2
   1d5b2:	68bb      	ldr	r3, [r7, #8]
   1d5b4:	3304      	adds	r3, #4
   1d5b6:	0019      	movs	r1, r3
   1d5b8:	0010      	movs	r0, r2
   1d5ba:	4b2d      	ldr	r3, [pc, #180]	; (1d670 <xTaskPriorityInherit+0x180>)
   1d5bc:	4798      	blx	r3
   1d5be:	e004      	b.n	1d5ca <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1d5c0:	4b23      	ldr	r3, [pc, #140]	; (1d650 <xTaskPriorityInherit+0x160>)
   1d5c2:	681b      	ldr	r3, [r3, #0]
   1d5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d5c6:	68bb      	ldr	r3, [r7, #8]
   1d5c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1d5ca:	68bb      	ldr	r3, [r7, #8]
   1d5cc:	0018      	movs	r0, r3
   1d5ce:	4b23      	ldr	r3, [pc, #140]	; (1d65c <xTaskPriorityInherit+0x16c>)
   1d5d0:	4798      	blx	r3
   1d5d2:	0003      	movs	r3, r0
   1d5d4:	001a      	movs	r2, r3
   1d5d6:	4b22      	ldr	r3, [pc, #136]	; (1d660 <xTaskPriorityInherit+0x170>)
   1d5d8:	881b      	ldrh	r3, [r3, #0]
   1d5da:	4013      	ands	r3, r2
   1d5dc:	b29b      	uxth	r3, r3
   1d5de:	2b00      	cmp	r3, #0
   1d5e0:	d024      	beq.n	1d62c <xTaskPriorityInherit+0x13c>
   1d5e2:	68bb      	ldr	r3, [r7, #8]
   1d5e4:	0018      	movs	r0, r3
   1d5e6:	4b1f      	ldr	r3, [pc, #124]	; (1d664 <xTaskPriorityInherit+0x174>)
   1d5e8:	4798      	blx	r3
   1d5ea:	0003      	movs	r3, r0
   1d5ec:	b2db      	uxtb	r3, r3
   1d5ee:	001c      	movs	r4, r3
   1d5f0:	68bb      	ldr	r3, [r7, #8]
   1d5f2:	0018      	movs	r0, r3
   1d5f4:	4b1b      	ldr	r3, [pc, #108]	; (1d664 <xTaskPriorityInherit+0x174>)
   1d5f6:	4798      	blx	r3
   1d5f8:	0003      	movs	r3, r0
   1d5fa:	b2db      	uxtb	r3, r3
   1d5fc:	0019      	movs	r1, r3
   1d5fe:	2003      	movs	r0, #3
   1d600:	4b1c      	ldr	r3, [pc, #112]	; (1d674 <xTaskPriorityInherit+0x184>)
   1d602:	4798      	blx	r3
   1d604:	0003      	movs	r3, r0
   1d606:	0022      	movs	r2, r4
   1d608:	2103      	movs	r1, #3
   1d60a:	208e      	movs	r0, #142	; 0x8e
   1d60c:	4c1a      	ldr	r4, [pc, #104]	; (1d678 <xTaskPriorityInherit+0x188>)
   1d60e:	47a0      	blx	r4
   1d610:	68bb      	ldr	r3, [r7, #8]
   1d612:	0018      	movs	r0, r3
   1d614:	4b13      	ldr	r3, [pc, #76]	; (1d664 <xTaskPriorityInherit+0x174>)
   1d616:	4798      	blx	r3
   1d618:	0003      	movs	r3, r0
   1d61a:	b2d9      	uxtb	r1, r3
   1d61c:	4b0c      	ldr	r3, [pc, #48]	; (1d650 <xTaskPriorityInherit+0x160>)
   1d61e:	681b      	ldr	r3, [r3, #0]
   1d620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d622:	b2db      	uxtb	r3, r3
   1d624:	001a      	movs	r2, r3
   1d626:	2003      	movs	r0, #3
   1d628:	4b14      	ldr	r3, [pc, #80]	; (1d67c <xTaskPriorityInherit+0x18c>)
   1d62a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1d62c:	2301      	movs	r3, #1
   1d62e:	60fb      	str	r3, [r7, #12]
   1d630:	e008      	b.n	1d644 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1d632:	68bb      	ldr	r3, [r7, #8]
   1d634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d636:	4b06      	ldr	r3, [pc, #24]	; (1d650 <xTaskPriorityInherit+0x160>)
   1d638:	681b      	ldr	r3, [r3, #0]
   1d63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d63c:	429a      	cmp	r2, r3
   1d63e:	d201      	bcs.n	1d644 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1d640:	2301      	movs	r3, #1
   1d642:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d644:	68fb      	ldr	r3, [r7, #12]
	}
   1d646:	0018      	movs	r0, r3
   1d648:	46bd      	mov	sp, r7
   1d64a:	b005      	add	sp, #20
   1d64c:	bd90      	pop	{r4, r7, pc}
   1d64e:	46c0      	nop			; (mov r8, r8)
   1d650:	20003cd0 	.word	0x20003cd0
   1d654:	20003cd4 	.word	0x20003cd4
   1d658:	0001a60f 	.word	0x0001a60f
   1d65c:	00018795 	.word	0x00018795
   1d660:	200000b8 	.word	0x200000b8
   1d664:	00018775 	.word	0x00018775
   1d668:	00018f45 	.word	0x00018f45
   1d66c:	20003db0 	.word	0x20003db0
   1d670:	0001a55f 	.word	0x0001a55f
   1d674:	0001974d 	.word	0x0001974d
   1d678:	000192bd 	.word	0x000192bd
   1d67c:	000196a9 	.word	0x000196a9

0001d680 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1d680:	b590      	push	{r4, r7, lr}
   1d682:	b085      	sub	sp, #20
   1d684:	af00      	add	r7, sp, #0
   1d686:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d688:	687b      	ldr	r3, [r7, #4]
   1d68a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1d68c:	2300      	movs	r3, #0
   1d68e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d690:	687b      	ldr	r3, [r7, #4]
   1d692:	2b00      	cmp	r3, #0
   1d694:	d100      	bne.n	1d698 <xTaskPriorityDisinherit+0x18>
   1d696:	e089      	b.n	1d7ac <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1d698:	4b47      	ldr	r3, [pc, #284]	; (1d7b8 <xTaskPriorityDisinherit+0x138>)
   1d69a:	681b      	ldr	r3, [r3, #0]
   1d69c:	68ba      	ldr	r2, [r7, #8]
   1d69e:	429a      	cmp	r2, r3
   1d6a0:	d001      	beq.n	1d6a6 <xTaskPriorityDisinherit+0x26>
   1d6a2:	b672      	cpsid	i
   1d6a4:	e7fe      	b.n	1d6a4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1d6a6:	68bb      	ldr	r3, [r7, #8]
   1d6a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d6aa:	2b00      	cmp	r3, #0
   1d6ac:	d101      	bne.n	1d6b2 <xTaskPriorityDisinherit+0x32>
   1d6ae:	b672      	cpsid	i
   1d6b0:	e7fe      	b.n	1d6b0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1d6b2:	68bb      	ldr	r3, [r7, #8]
   1d6b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d6b6:	1e5a      	subs	r2, r3, #1
   1d6b8:	68bb      	ldr	r3, [r7, #8]
   1d6ba:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1d6bc:	68bb      	ldr	r3, [r7, #8]
   1d6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d6c0:	68bb      	ldr	r3, [r7, #8]
   1d6c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d6c4:	429a      	cmp	r2, r3
   1d6c6:	d071      	beq.n	1d7ac <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1d6c8:	68bb      	ldr	r3, [r7, #8]
   1d6ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d6cc:	2b00      	cmp	r3, #0
   1d6ce:	d16d      	bne.n	1d7ac <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d6d0:	68bb      	ldr	r3, [r7, #8]
   1d6d2:	3304      	adds	r3, #4
   1d6d4:	0018      	movs	r0, r3
   1d6d6:	4b39      	ldr	r3, [pc, #228]	; (1d7bc <xTaskPriorityDisinherit+0x13c>)
   1d6d8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d6da:	68bb      	ldr	r3, [r7, #8]
   1d6dc:	0018      	movs	r0, r3
   1d6de:	4b38      	ldr	r3, [pc, #224]	; (1d7c0 <xTaskPriorityDisinherit+0x140>)
   1d6e0:	4798      	blx	r3
   1d6e2:	0003      	movs	r3, r0
   1d6e4:	001a      	movs	r2, r3
   1d6e6:	4b37      	ldr	r3, [pc, #220]	; (1d7c4 <xTaskPriorityDisinherit+0x144>)
   1d6e8:	881b      	ldrh	r3, [r3, #0]
   1d6ea:	4013      	ands	r3, r2
   1d6ec:	b29b      	uxth	r3, r3
   1d6ee:	2b00      	cmp	r3, #0
   1d6f0:	d023      	beq.n	1d73a <xTaskPriorityDisinherit+0xba>
   1d6f2:	68bb      	ldr	r3, [r7, #8]
   1d6f4:	0018      	movs	r0, r3
   1d6f6:	4b34      	ldr	r3, [pc, #208]	; (1d7c8 <xTaskPriorityDisinherit+0x148>)
   1d6f8:	4798      	blx	r3
   1d6fa:	0003      	movs	r3, r0
   1d6fc:	b2db      	uxtb	r3, r3
   1d6fe:	001c      	movs	r4, r3
   1d700:	68bb      	ldr	r3, [r7, #8]
   1d702:	0018      	movs	r0, r3
   1d704:	4b30      	ldr	r3, [pc, #192]	; (1d7c8 <xTaskPriorityDisinherit+0x148>)
   1d706:	4798      	blx	r3
   1d708:	0003      	movs	r3, r0
   1d70a:	b2db      	uxtb	r3, r3
   1d70c:	0019      	movs	r1, r3
   1d70e:	2003      	movs	r0, #3
   1d710:	4b2e      	ldr	r3, [pc, #184]	; (1d7cc <xTaskPriorityDisinherit+0x14c>)
   1d712:	4798      	blx	r3
   1d714:	0003      	movs	r3, r0
   1d716:	0022      	movs	r2, r4
   1d718:	2103      	movs	r1, #3
   1d71a:	208f      	movs	r0, #143	; 0x8f
   1d71c:	4c2c      	ldr	r4, [pc, #176]	; (1d7d0 <xTaskPriorityDisinherit+0x150>)
   1d71e:	47a0      	blx	r4
   1d720:	68bb      	ldr	r3, [r7, #8]
   1d722:	0018      	movs	r0, r3
   1d724:	4b28      	ldr	r3, [pc, #160]	; (1d7c8 <xTaskPriorityDisinherit+0x148>)
   1d726:	4798      	blx	r3
   1d728:	0003      	movs	r3, r0
   1d72a:	b2d9      	uxtb	r1, r3
   1d72c:	68bb      	ldr	r3, [r7, #8]
   1d72e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d730:	b2db      	uxtb	r3, r3
   1d732:	001a      	movs	r2, r3
   1d734:	2003      	movs	r0, #3
   1d736:	4b27      	ldr	r3, [pc, #156]	; (1d7d4 <xTaskPriorityDisinherit+0x154>)
   1d738:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1d73a:	68bb      	ldr	r3, [r7, #8]
   1d73c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d73e:	68bb      	ldr	r3, [r7, #8]
   1d740:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d742:	68bb      	ldr	r3, [r7, #8]
   1d744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d746:	2205      	movs	r2, #5
   1d748:	1ad2      	subs	r2, r2, r3
   1d74a:	68bb      	ldr	r3, [r7, #8]
   1d74c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1d74e:	68bb      	ldr	r3, [r7, #8]
   1d750:	0018      	movs	r0, r3
   1d752:	4b1b      	ldr	r3, [pc, #108]	; (1d7c0 <xTaskPriorityDisinherit+0x140>)
   1d754:	4798      	blx	r3
   1d756:	0003      	movs	r3, r0
   1d758:	001a      	movs	r2, r3
   1d75a:	4b1a      	ldr	r3, [pc, #104]	; (1d7c4 <xTaskPriorityDisinherit+0x144>)
   1d75c:	881b      	ldrh	r3, [r3, #0]
   1d75e:	4013      	ands	r3, r2
   1d760:	b29b      	uxth	r3, r3
   1d762:	2b00      	cmp	r3, #0
   1d764:	d008      	beq.n	1d778 <xTaskPriorityDisinherit+0xf8>
   1d766:	68bb      	ldr	r3, [r7, #8]
   1d768:	0018      	movs	r0, r3
   1d76a:	4b17      	ldr	r3, [pc, #92]	; (1d7c8 <xTaskPriorityDisinherit+0x148>)
   1d76c:	4798      	blx	r3
   1d76e:	0003      	movs	r3, r0
   1d770:	b2db      	uxtb	r3, r3
   1d772:	0018      	movs	r0, r3
   1d774:	4b18      	ldr	r3, [pc, #96]	; (1d7d8 <xTaskPriorityDisinherit+0x158>)
   1d776:	4798      	blx	r3
   1d778:	68bb      	ldr	r3, [r7, #8]
   1d77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d77c:	4b17      	ldr	r3, [pc, #92]	; (1d7dc <xTaskPriorityDisinherit+0x15c>)
   1d77e:	681b      	ldr	r3, [r3, #0]
   1d780:	429a      	cmp	r2, r3
   1d782:	d903      	bls.n	1d78c <xTaskPriorityDisinherit+0x10c>
   1d784:	68bb      	ldr	r3, [r7, #8]
   1d786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d788:	4b14      	ldr	r3, [pc, #80]	; (1d7dc <xTaskPriorityDisinherit+0x15c>)
   1d78a:	601a      	str	r2, [r3, #0]
   1d78c:	68bb      	ldr	r3, [r7, #8]
   1d78e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d790:	0013      	movs	r3, r2
   1d792:	009b      	lsls	r3, r3, #2
   1d794:	189b      	adds	r3, r3, r2
   1d796:	009b      	lsls	r3, r3, #2
   1d798:	4a11      	ldr	r2, [pc, #68]	; (1d7e0 <xTaskPriorityDisinherit+0x160>)
   1d79a:	189a      	adds	r2, r3, r2
   1d79c:	68bb      	ldr	r3, [r7, #8]
   1d79e:	3304      	adds	r3, #4
   1d7a0:	0019      	movs	r1, r3
   1d7a2:	0010      	movs	r0, r2
   1d7a4:	4b0f      	ldr	r3, [pc, #60]	; (1d7e4 <xTaskPriorityDisinherit+0x164>)
   1d7a6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1d7a8:	2301      	movs	r3, #1
   1d7aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1d7ac:	68fb      	ldr	r3, [r7, #12]
	}
   1d7ae:	0018      	movs	r0, r3
   1d7b0:	46bd      	mov	sp, r7
   1d7b2:	b005      	add	sp, #20
   1d7b4:	bd90      	pop	{r4, r7, pc}
   1d7b6:	46c0      	nop			; (mov r8, r8)
   1d7b8:	20003cd0 	.word	0x20003cd0
   1d7bc:	0001a60f 	.word	0x0001a60f
   1d7c0:	00018795 	.word	0x00018795
   1d7c4:	200000b8 	.word	0x200000b8
   1d7c8:	00018775 	.word	0x00018775
   1d7cc:	0001974d 	.word	0x0001974d
   1d7d0:	000192bd 	.word	0x000192bd
   1d7d4:	000196a9 	.word	0x000196a9
   1d7d8:	00018f45 	.word	0x00018f45
   1d7dc:	20003db0 	.word	0x20003db0
   1d7e0:	20003cd4 	.word	0x20003cd4
   1d7e4:	0001a55f 	.word	0x0001a55f

0001d7e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1d7e8:	b590      	push	{r4, r7, lr}
   1d7ea:	b087      	sub	sp, #28
   1d7ec:	af00      	add	r7, sp, #0
   1d7ee:	6078      	str	r0, [r7, #4]
   1d7f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1d7f2:	687b      	ldr	r3, [r7, #4]
   1d7f4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1d7f6:	2301      	movs	r3, #1
   1d7f8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1d7fa:	687b      	ldr	r3, [r7, #4]
   1d7fc:	2b00      	cmp	r3, #0
   1d7fe:	d100      	bne.n	1d802 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1d800:	e0a4      	b.n	1d94c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1d802:	693b      	ldr	r3, [r7, #16]
   1d804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1d806:	2b00      	cmp	r3, #0
   1d808:	d101      	bne.n	1d80e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1d80a:	b672      	cpsid	i
   1d80c:	e7fe      	b.n	1d80c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1d80e:	693b      	ldr	r3, [r7, #16]
   1d810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1d812:	683b      	ldr	r3, [r7, #0]
   1d814:	429a      	cmp	r2, r3
   1d816:	d202      	bcs.n	1d81e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1d818:	683b      	ldr	r3, [r7, #0]
   1d81a:	617b      	str	r3, [r7, #20]
   1d81c:	e002      	b.n	1d824 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1d81e:	693b      	ldr	r3, [r7, #16]
   1d820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d822:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1d824:	693b      	ldr	r3, [r7, #16]
   1d826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d828:	697b      	ldr	r3, [r7, #20]
   1d82a:	429a      	cmp	r2, r3
   1d82c:	d100      	bne.n	1d830 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1d82e:	e08d      	b.n	1d94c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1d830:	693b      	ldr	r3, [r7, #16]
   1d832:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d834:	68fb      	ldr	r3, [r7, #12]
   1d836:	429a      	cmp	r2, r3
   1d838:	d000      	beq.n	1d83c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1d83a:	e087      	b.n	1d94c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1d83c:	4b45      	ldr	r3, [pc, #276]	; (1d954 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1d83e:	681b      	ldr	r3, [r3, #0]
   1d840:	693a      	ldr	r2, [r7, #16]
   1d842:	429a      	cmp	r2, r3
   1d844:	d101      	bne.n	1d84a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1d846:	b672      	cpsid	i
   1d848:	e7fe      	b.n	1d848 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1d84a:	693b      	ldr	r3, [r7, #16]
   1d84c:	0018      	movs	r0, r3
   1d84e:	4b42      	ldr	r3, [pc, #264]	; (1d958 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d850:	4798      	blx	r3
   1d852:	0003      	movs	r3, r0
   1d854:	001a      	movs	r2, r3
   1d856:	4b41      	ldr	r3, [pc, #260]	; (1d95c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d858:	881b      	ldrh	r3, [r3, #0]
   1d85a:	4013      	ands	r3, r2
   1d85c:	b29b      	uxth	r3, r3
   1d85e:	2b00      	cmp	r3, #0
   1d860:	d023      	beq.n	1d8aa <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1d862:	693b      	ldr	r3, [r7, #16]
   1d864:	0018      	movs	r0, r3
   1d866:	4b3e      	ldr	r3, [pc, #248]	; (1d960 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d868:	4798      	blx	r3
   1d86a:	0003      	movs	r3, r0
   1d86c:	b2db      	uxtb	r3, r3
   1d86e:	001c      	movs	r4, r3
   1d870:	693b      	ldr	r3, [r7, #16]
   1d872:	0018      	movs	r0, r3
   1d874:	4b3a      	ldr	r3, [pc, #232]	; (1d960 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d876:	4798      	blx	r3
   1d878:	0003      	movs	r3, r0
   1d87a:	b2db      	uxtb	r3, r3
   1d87c:	0019      	movs	r1, r3
   1d87e:	2003      	movs	r0, #3
   1d880:	4b38      	ldr	r3, [pc, #224]	; (1d964 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1d882:	4798      	blx	r3
   1d884:	0003      	movs	r3, r0
   1d886:	0022      	movs	r2, r4
   1d888:	2103      	movs	r1, #3
   1d88a:	208f      	movs	r0, #143	; 0x8f
   1d88c:	4c36      	ldr	r4, [pc, #216]	; (1d968 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1d88e:	47a0      	blx	r4
   1d890:	693b      	ldr	r3, [r7, #16]
   1d892:	0018      	movs	r0, r3
   1d894:	4b32      	ldr	r3, [pc, #200]	; (1d960 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d896:	4798      	blx	r3
   1d898:	0003      	movs	r3, r0
   1d89a:	b2d9      	uxtb	r1, r3
   1d89c:	693b      	ldr	r3, [r7, #16]
   1d89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1d8a0:	b2db      	uxtb	r3, r3
   1d8a2:	001a      	movs	r2, r3
   1d8a4:	2003      	movs	r0, #3
   1d8a6:	4b31      	ldr	r3, [pc, #196]	; (1d96c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1d8a8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1d8aa:	693b      	ldr	r3, [r7, #16]
   1d8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d8ae:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1d8b0:	693b      	ldr	r3, [r7, #16]
   1d8b2:	697a      	ldr	r2, [r7, #20]
   1d8b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1d8b6:	693b      	ldr	r3, [r7, #16]
   1d8b8:	699b      	ldr	r3, [r3, #24]
   1d8ba:	2b00      	cmp	r3, #0
   1d8bc:	db04      	blt.n	1d8c8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d8be:	697b      	ldr	r3, [r7, #20]
   1d8c0:	2205      	movs	r2, #5
   1d8c2:	1ad2      	subs	r2, r2, r3
   1d8c4:	693b      	ldr	r3, [r7, #16]
   1d8c6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1d8c8:	693b      	ldr	r3, [r7, #16]
   1d8ca:	6959      	ldr	r1, [r3, #20]
   1d8cc:	68ba      	ldr	r2, [r7, #8]
   1d8ce:	0013      	movs	r3, r2
   1d8d0:	009b      	lsls	r3, r3, #2
   1d8d2:	189b      	adds	r3, r3, r2
   1d8d4:	009b      	lsls	r3, r3, #2
   1d8d6:	4a26      	ldr	r2, [pc, #152]	; (1d970 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d8d8:	189b      	adds	r3, r3, r2
   1d8da:	4299      	cmp	r1, r3
   1d8dc:	d101      	bne.n	1d8e2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1d8de:	2301      	movs	r3, #1
   1d8e0:	e000      	b.n	1d8e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1d8e2:	2300      	movs	r3, #0
   1d8e4:	2b00      	cmp	r3, #0
   1d8e6:	d031      	beq.n	1d94c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d8e8:	693b      	ldr	r3, [r7, #16]
   1d8ea:	3304      	adds	r3, #4
   1d8ec:	0018      	movs	r0, r3
   1d8ee:	4b21      	ldr	r3, [pc, #132]	; (1d974 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1d8f0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1d8f2:	693b      	ldr	r3, [r7, #16]
   1d8f4:	0018      	movs	r0, r3
   1d8f6:	4b18      	ldr	r3, [pc, #96]	; (1d958 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1d8f8:	4798      	blx	r3
   1d8fa:	0003      	movs	r3, r0
   1d8fc:	001a      	movs	r2, r3
   1d8fe:	4b17      	ldr	r3, [pc, #92]	; (1d95c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1d900:	881b      	ldrh	r3, [r3, #0]
   1d902:	4013      	ands	r3, r2
   1d904:	b29b      	uxth	r3, r3
   1d906:	2b00      	cmp	r3, #0
   1d908:	d008      	beq.n	1d91c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1d90a:	693b      	ldr	r3, [r7, #16]
   1d90c:	0018      	movs	r0, r3
   1d90e:	4b14      	ldr	r3, [pc, #80]	; (1d960 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1d910:	4798      	blx	r3
   1d912:	0003      	movs	r3, r0
   1d914:	b2db      	uxtb	r3, r3
   1d916:	0018      	movs	r0, r3
   1d918:	4b17      	ldr	r3, [pc, #92]	; (1d978 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1d91a:	4798      	blx	r3
   1d91c:	693b      	ldr	r3, [r7, #16]
   1d91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d920:	4b16      	ldr	r3, [pc, #88]	; (1d97c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d922:	681b      	ldr	r3, [r3, #0]
   1d924:	429a      	cmp	r2, r3
   1d926:	d903      	bls.n	1d930 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1d928:	693b      	ldr	r3, [r7, #16]
   1d92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d92c:	4b13      	ldr	r3, [pc, #76]	; (1d97c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1d92e:	601a      	str	r2, [r3, #0]
   1d930:	693b      	ldr	r3, [r7, #16]
   1d932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d934:	0013      	movs	r3, r2
   1d936:	009b      	lsls	r3, r3, #2
   1d938:	189b      	adds	r3, r3, r2
   1d93a:	009b      	lsls	r3, r3, #2
   1d93c:	4a0c      	ldr	r2, [pc, #48]	; (1d970 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1d93e:	189a      	adds	r2, r3, r2
   1d940:	693b      	ldr	r3, [r7, #16]
   1d942:	3304      	adds	r3, #4
   1d944:	0019      	movs	r1, r3
   1d946:	0010      	movs	r0, r2
   1d948:	4b0d      	ldr	r3, [pc, #52]	; (1d980 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1d94a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d94c:	46c0      	nop			; (mov r8, r8)
   1d94e:	46bd      	mov	sp, r7
   1d950:	b007      	add	sp, #28
   1d952:	bd90      	pop	{r4, r7, pc}
   1d954:	20003cd0 	.word	0x20003cd0
   1d958:	00018795 	.word	0x00018795
   1d95c:	200000b8 	.word	0x200000b8
   1d960:	00018775 	.word	0x00018775
   1d964:	0001974d 	.word	0x0001974d
   1d968:	000192bd 	.word	0x000192bd
   1d96c:	000196a9 	.word	0x000196a9
   1d970:	20003cd4 	.word	0x20003cd4
   1d974:	0001a60f 	.word	0x0001a60f
   1d978:	00018f45 	.word	0x00018f45
   1d97c:	20003db0 	.word	0x20003db0
   1d980:	0001a55f 	.word	0x0001a55f

0001d984 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1d984:	b580      	push	{r7, lr}
   1d986:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1d988:	4b06      	ldr	r3, [pc, #24]	; (1d9a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1d98a:	681b      	ldr	r3, [r3, #0]
   1d98c:	2b00      	cmp	r3, #0
   1d98e:	d004      	beq.n	1d99a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1d990:	4b04      	ldr	r3, [pc, #16]	; (1d9a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1d992:	681b      	ldr	r3, [r3, #0]
   1d994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1d996:	3201      	adds	r2, #1
   1d998:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1d99a:	4b02      	ldr	r3, [pc, #8]	; (1d9a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1d99c:	681b      	ldr	r3, [r3, #0]
	}
   1d99e:	0018      	movs	r0, r3
   1d9a0:	46bd      	mov	sp, r7
   1d9a2:	bd80      	pop	{r7, pc}
   1d9a4:	20003cd0 	.word	0x20003cd0

0001d9a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1d9a8:	b580      	push	{r7, lr}
   1d9aa:	b084      	sub	sp, #16
   1d9ac:	af00      	add	r7, sp, #0
   1d9ae:	6078      	str	r0, [r7, #4]
   1d9b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1d9b2:	4b21      	ldr	r3, [pc, #132]	; (1da38 <prvAddCurrentTaskToDelayedList+0x90>)
   1d9b4:	681b      	ldr	r3, [r3, #0]
   1d9b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d9b8:	4b20      	ldr	r3, [pc, #128]	; (1da3c <prvAddCurrentTaskToDelayedList+0x94>)
   1d9ba:	681b      	ldr	r3, [r3, #0]
   1d9bc:	3304      	adds	r3, #4
   1d9be:	0018      	movs	r0, r3
   1d9c0:	4b1f      	ldr	r3, [pc, #124]	; (1da40 <prvAddCurrentTaskToDelayedList+0x98>)
   1d9c2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1d9c4:	687b      	ldr	r3, [r7, #4]
   1d9c6:	3301      	adds	r3, #1
   1d9c8:	d10b      	bne.n	1d9e2 <prvAddCurrentTaskToDelayedList+0x3a>
   1d9ca:	683b      	ldr	r3, [r7, #0]
   1d9cc:	2b00      	cmp	r3, #0
   1d9ce:	d008      	beq.n	1d9e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d9d0:	4b1a      	ldr	r3, [pc, #104]	; (1da3c <prvAddCurrentTaskToDelayedList+0x94>)
   1d9d2:	681b      	ldr	r3, [r3, #0]
   1d9d4:	1d1a      	adds	r2, r3, #4
   1d9d6:	4b1b      	ldr	r3, [pc, #108]	; (1da44 <prvAddCurrentTaskToDelayedList+0x9c>)
   1d9d8:	0011      	movs	r1, r2
   1d9da:	0018      	movs	r0, r3
   1d9dc:	4b1a      	ldr	r3, [pc, #104]	; (1da48 <prvAddCurrentTaskToDelayedList+0xa0>)
   1d9de:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1d9e0:	e026      	b.n	1da30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1d9e2:	68fa      	ldr	r2, [r7, #12]
   1d9e4:	687b      	ldr	r3, [r7, #4]
   1d9e6:	18d3      	adds	r3, r2, r3
   1d9e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1d9ea:	4b14      	ldr	r3, [pc, #80]	; (1da3c <prvAddCurrentTaskToDelayedList+0x94>)
   1d9ec:	681b      	ldr	r3, [r3, #0]
   1d9ee:	68ba      	ldr	r2, [r7, #8]
   1d9f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1d9f2:	68ba      	ldr	r2, [r7, #8]
   1d9f4:	68fb      	ldr	r3, [r7, #12]
   1d9f6:	429a      	cmp	r2, r3
   1d9f8:	d209      	bcs.n	1da0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1d9fa:	4b14      	ldr	r3, [pc, #80]	; (1da4c <prvAddCurrentTaskToDelayedList+0xa4>)
   1d9fc:	681a      	ldr	r2, [r3, #0]
   1d9fe:	4b0f      	ldr	r3, [pc, #60]	; (1da3c <prvAddCurrentTaskToDelayedList+0x94>)
   1da00:	681b      	ldr	r3, [r3, #0]
   1da02:	3304      	adds	r3, #4
   1da04:	0019      	movs	r1, r3
   1da06:	0010      	movs	r0, r2
   1da08:	4b11      	ldr	r3, [pc, #68]	; (1da50 <prvAddCurrentTaskToDelayedList+0xa8>)
   1da0a:	4798      	blx	r3
}
   1da0c:	e010      	b.n	1da30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1da0e:	4b11      	ldr	r3, [pc, #68]	; (1da54 <prvAddCurrentTaskToDelayedList+0xac>)
   1da10:	681a      	ldr	r2, [r3, #0]
   1da12:	4b0a      	ldr	r3, [pc, #40]	; (1da3c <prvAddCurrentTaskToDelayedList+0x94>)
   1da14:	681b      	ldr	r3, [r3, #0]
   1da16:	3304      	adds	r3, #4
   1da18:	0019      	movs	r1, r3
   1da1a:	0010      	movs	r0, r2
   1da1c:	4b0c      	ldr	r3, [pc, #48]	; (1da50 <prvAddCurrentTaskToDelayedList+0xa8>)
   1da1e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1da20:	4b0d      	ldr	r3, [pc, #52]	; (1da58 <prvAddCurrentTaskToDelayedList+0xb0>)
   1da22:	681b      	ldr	r3, [r3, #0]
   1da24:	68ba      	ldr	r2, [r7, #8]
   1da26:	429a      	cmp	r2, r3
   1da28:	d202      	bcs.n	1da30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1da2a:	4b0b      	ldr	r3, [pc, #44]	; (1da58 <prvAddCurrentTaskToDelayedList+0xb0>)
   1da2c:	68ba      	ldr	r2, [r7, #8]
   1da2e:	601a      	str	r2, [r3, #0]
}
   1da30:	46c0      	nop			; (mov r8, r8)
   1da32:	46bd      	mov	sp, r7
   1da34:	b004      	add	sp, #16
   1da36:	bd80      	pop	{r7, pc}
   1da38:	20003dac 	.word	0x20003dac
   1da3c:	20003cd0 	.word	0x20003cd0
   1da40:	0001a60f 	.word	0x0001a60f
   1da44:	20003d94 	.word	0x20003d94
   1da48:	0001a55f 	.word	0x0001a55f
   1da4c:	20003d64 	.word	0x20003d64
   1da50:	0001a5a3 	.word	0x0001a5a3
   1da54:	20003d60 	.word	0x20003d60
   1da58:	20003dc8 	.word	0x20003dc8

0001da5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1da5c:	b590      	push	{r4, r7, lr}
   1da5e:	b085      	sub	sp, #20
   1da60:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1da62:	2300      	movs	r3, #0
   1da64:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1da66:	4b0e      	ldr	r3, [pc, #56]	; (1daa0 <xTimerCreateTimerTask+0x44>)
   1da68:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1da6a:	4b0e      	ldr	r3, [pc, #56]	; (1daa4 <xTimerCreateTimerTask+0x48>)
   1da6c:	681b      	ldr	r3, [r3, #0]
   1da6e:	2b00      	cmp	r3, #0
   1da70:	d00b      	beq.n	1da8a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1da72:	490d      	ldr	r1, [pc, #52]	; (1daa8 <xTimerCreateTimerTask+0x4c>)
   1da74:	480d      	ldr	r0, [pc, #52]	; (1daac <xTimerCreateTimerTask+0x50>)
   1da76:	4b0e      	ldr	r3, [pc, #56]	; (1dab0 <xTimerCreateTimerTask+0x54>)
   1da78:	9301      	str	r3, [sp, #4]
   1da7a:	2302      	movs	r3, #2
   1da7c:	9300      	str	r3, [sp, #0]
   1da7e:	2300      	movs	r3, #0
   1da80:	2280      	movs	r2, #128	; 0x80
   1da82:	4c0c      	ldr	r4, [pc, #48]	; (1dab4 <xTimerCreateTimerTask+0x58>)
   1da84:	47a0      	blx	r4
   1da86:	0003      	movs	r3, r0
   1da88:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1da8a:	687b      	ldr	r3, [r7, #4]
   1da8c:	2b00      	cmp	r3, #0
   1da8e:	d101      	bne.n	1da94 <xTimerCreateTimerTask+0x38>
   1da90:	b672      	cpsid	i
   1da92:	e7fe      	b.n	1da92 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1da94:	687b      	ldr	r3, [r7, #4]
}
   1da96:	0018      	movs	r0, r3
   1da98:	46bd      	mov	sp, r7
   1da9a:	b003      	add	sp, #12
   1da9c:	bd90      	pop	{r4, r7, pc}
   1da9e:	46c0      	nop			; (mov r8, r8)
   1daa0:	0001dfa5 	.word	0x0001dfa5
   1daa4:	20003e04 	.word	0x20003e04
   1daa8:	000383a8 	.word	0x000383a8
   1daac:	0001dbdd 	.word	0x0001dbdd
   1dab0:	20003e08 	.word	0x20003e08
   1dab4:	0001c3f5 	.word	0x0001c3f5

0001dab8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1dab8:	b590      	push	{r4, r7, lr}
   1daba:	b089      	sub	sp, #36	; 0x24
   1dabc:	af00      	add	r7, sp, #0
   1dabe:	60f8      	str	r0, [r7, #12]
   1dac0:	60b9      	str	r1, [r7, #8]
   1dac2:	607a      	str	r2, [r7, #4]
   1dac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1dac6:	2300      	movs	r3, #0
   1dac8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1daca:	68fb      	ldr	r3, [r7, #12]
   1dacc:	2b00      	cmp	r3, #0
   1dace:	d101      	bne.n	1dad4 <xTimerGenericCommand+0x1c>
   1dad0:	b672      	cpsid	i
   1dad2:	e7fe      	b.n	1dad2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1dad4:	4b1e      	ldr	r3, [pc, #120]	; (1db50 <xTimerGenericCommand+0x98>)
   1dad6:	681b      	ldr	r3, [r3, #0]
   1dad8:	2b00      	cmp	r3, #0
   1dada:	d033      	beq.n	1db44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1dadc:	2310      	movs	r3, #16
   1dade:	18fb      	adds	r3, r7, r3
   1dae0:	68ba      	ldr	r2, [r7, #8]
   1dae2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1dae4:	2310      	movs	r3, #16
   1dae6:	18fb      	adds	r3, r7, r3
   1dae8:	687a      	ldr	r2, [r7, #4]
   1daea:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1daec:	2310      	movs	r3, #16
   1daee:	18fb      	adds	r3, r7, r3
   1daf0:	68fa      	ldr	r2, [r7, #12]
   1daf2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1daf4:	68bb      	ldr	r3, [r7, #8]
   1daf6:	2b05      	cmp	r3, #5
   1daf8:	dc1a      	bgt.n	1db30 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1dafa:	4b16      	ldr	r3, [pc, #88]	; (1db54 <xTimerGenericCommand+0x9c>)
   1dafc:	4798      	blx	r3
   1dafe:	0003      	movs	r3, r0
   1db00:	2b02      	cmp	r3, #2
   1db02:	d10a      	bne.n	1db1a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1db04:	4b12      	ldr	r3, [pc, #72]	; (1db50 <xTimerGenericCommand+0x98>)
   1db06:	6818      	ldr	r0, [r3, #0]
   1db08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1db0a:	2310      	movs	r3, #16
   1db0c:	18f9      	adds	r1, r7, r3
   1db0e:	2300      	movs	r3, #0
   1db10:	4c11      	ldr	r4, [pc, #68]	; (1db58 <xTimerGenericCommand+0xa0>)
   1db12:	47a0      	blx	r4
   1db14:	0003      	movs	r3, r0
   1db16:	61fb      	str	r3, [r7, #28]
   1db18:	e014      	b.n	1db44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1db1a:	4b0d      	ldr	r3, [pc, #52]	; (1db50 <xTimerGenericCommand+0x98>)
   1db1c:	6818      	ldr	r0, [r3, #0]
   1db1e:	2310      	movs	r3, #16
   1db20:	18f9      	adds	r1, r7, r3
   1db22:	2300      	movs	r3, #0
   1db24:	2200      	movs	r2, #0
   1db26:	4c0c      	ldr	r4, [pc, #48]	; (1db58 <xTimerGenericCommand+0xa0>)
   1db28:	47a0      	blx	r4
   1db2a:	0003      	movs	r3, r0
   1db2c:	61fb      	str	r3, [r7, #28]
   1db2e:	e009      	b.n	1db44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1db30:	4b07      	ldr	r3, [pc, #28]	; (1db50 <xTimerGenericCommand+0x98>)
   1db32:	6818      	ldr	r0, [r3, #0]
   1db34:	683a      	ldr	r2, [r7, #0]
   1db36:	2310      	movs	r3, #16
   1db38:	18f9      	adds	r1, r7, r3
   1db3a:	2300      	movs	r3, #0
   1db3c:	4c07      	ldr	r4, [pc, #28]	; (1db5c <xTimerGenericCommand+0xa4>)
   1db3e:	47a0      	blx	r4
   1db40:	0003      	movs	r3, r0
   1db42:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1db44:	69fb      	ldr	r3, [r7, #28]
}
   1db46:	0018      	movs	r0, r3
   1db48:	46bd      	mov	sp, r7
   1db4a:	b009      	add	sp, #36	; 0x24
   1db4c:	bd90      	pop	{r4, r7, pc}
   1db4e:	46c0      	nop			; (mov r8, r8)
   1db50:	20003e04 	.word	0x20003e04
   1db54:	0001d4b9 	.word	0x0001d4b9
   1db58:	0001ad2d 	.word	0x0001ad2d
   1db5c:	0001b18d 	.word	0x0001b18d

0001db60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1db60:	b590      	push	{r4, r7, lr}
   1db62:	b087      	sub	sp, #28
   1db64:	af02      	add	r7, sp, #8
   1db66:	6078      	str	r0, [r7, #4]
   1db68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1db6a:	4b18      	ldr	r3, [pc, #96]	; (1dbcc <prvProcessExpiredTimer+0x6c>)
   1db6c:	681b      	ldr	r3, [r3, #0]
   1db6e:	68db      	ldr	r3, [r3, #12]
   1db70:	68db      	ldr	r3, [r3, #12]
   1db72:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1db74:	68fb      	ldr	r3, [r7, #12]
   1db76:	3304      	adds	r3, #4
   1db78:	0018      	movs	r0, r3
   1db7a:	4b15      	ldr	r3, [pc, #84]	; (1dbd0 <prvProcessExpiredTimer+0x70>)
   1db7c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1db7e:	68fb      	ldr	r3, [r7, #12]
   1db80:	69db      	ldr	r3, [r3, #28]
   1db82:	2b01      	cmp	r3, #1
   1db84:	d119      	bne.n	1dbba <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1db86:	68fb      	ldr	r3, [r7, #12]
   1db88:	699a      	ldr	r2, [r3, #24]
   1db8a:	687b      	ldr	r3, [r7, #4]
   1db8c:	18d1      	adds	r1, r2, r3
   1db8e:	687b      	ldr	r3, [r7, #4]
   1db90:	683a      	ldr	r2, [r7, #0]
   1db92:	68f8      	ldr	r0, [r7, #12]
   1db94:	4c0f      	ldr	r4, [pc, #60]	; (1dbd4 <prvProcessExpiredTimer+0x74>)
   1db96:	47a0      	blx	r4
   1db98:	1e03      	subs	r3, r0, #0
   1db9a:	d00e      	beq.n	1dbba <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1db9c:	687a      	ldr	r2, [r7, #4]
   1db9e:	68f8      	ldr	r0, [r7, #12]
   1dba0:	2300      	movs	r3, #0
   1dba2:	9300      	str	r3, [sp, #0]
   1dba4:	2300      	movs	r3, #0
   1dba6:	2100      	movs	r1, #0
   1dba8:	4c0b      	ldr	r4, [pc, #44]	; (1dbd8 <prvProcessExpiredTimer+0x78>)
   1dbaa:	47a0      	blx	r4
   1dbac:	0003      	movs	r3, r0
   1dbae:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1dbb0:	68bb      	ldr	r3, [r7, #8]
   1dbb2:	2b00      	cmp	r3, #0
   1dbb4:	d101      	bne.n	1dbba <prvProcessExpiredTimer+0x5a>
   1dbb6:	b672      	cpsid	i
   1dbb8:	e7fe      	b.n	1dbb8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1dbba:	68fb      	ldr	r3, [r7, #12]
   1dbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1dbbe:	68fa      	ldr	r2, [r7, #12]
   1dbc0:	0010      	movs	r0, r2
   1dbc2:	4798      	blx	r3
}
   1dbc4:	46c0      	nop			; (mov r8, r8)
   1dbc6:	46bd      	mov	sp, r7
   1dbc8:	b005      	add	sp, #20
   1dbca:	bd90      	pop	{r4, r7, pc}
   1dbcc:	20003dfc 	.word	0x20003dfc
   1dbd0:	0001a60f 	.word	0x0001a60f
   1dbd4:	0001dd45 	.word	0x0001dd45
   1dbd8:	0001dab9 	.word	0x0001dab9

0001dbdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1dbdc:	b580      	push	{r7, lr}
   1dbde:	b084      	sub	sp, #16
   1dbe0:	af00      	add	r7, sp, #0
   1dbe2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1dbe4:	4b08      	ldr	r3, [pc, #32]	; (1dc08 <prvTimerTask+0x2c>)
   1dbe6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1dbe8:	2308      	movs	r3, #8
   1dbea:	18fb      	adds	r3, r7, r3
   1dbec:	0018      	movs	r0, r3
   1dbee:	4b07      	ldr	r3, [pc, #28]	; (1dc0c <prvTimerTask+0x30>)
   1dbf0:	4798      	blx	r3
   1dbf2:	0003      	movs	r3, r0
   1dbf4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1dbf6:	68ba      	ldr	r2, [r7, #8]
   1dbf8:	68fb      	ldr	r3, [r7, #12]
   1dbfa:	0011      	movs	r1, r2
   1dbfc:	0018      	movs	r0, r3
   1dbfe:	4b04      	ldr	r3, [pc, #16]	; (1dc10 <prvTimerTask+0x34>)
   1dc00:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1dc02:	4b04      	ldr	r3, [pc, #16]	; (1dc14 <prvTimerTask+0x38>)
   1dc04:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1dc06:	e7ef      	b.n	1dbe8 <prvTimerTask+0xc>
   1dc08:	00032999 	.word	0x00032999
   1dc0c:	0001dcbd 	.word	0x0001dcbd
   1dc10:	0001dc19 	.word	0x0001dc19
   1dc14:	0001ddcd 	.word	0x0001ddcd

0001dc18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1dc18:	b580      	push	{r7, lr}
   1dc1a:	b084      	sub	sp, #16
   1dc1c:	af00      	add	r7, sp, #0
   1dc1e:	6078      	str	r0, [r7, #4]
   1dc20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1dc22:	4b1e      	ldr	r3, [pc, #120]	; (1dc9c <prvProcessTimerOrBlockTask+0x84>)
   1dc24:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1dc26:	2308      	movs	r3, #8
   1dc28:	18fb      	adds	r3, r7, r3
   1dc2a:	0018      	movs	r0, r3
   1dc2c:	4b1c      	ldr	r3, [pc, #112]	; (1dca0 <prvProcessTimerOrBlockTask+0x88>)
   1dc2e:	4798      	blx	r3
   1dc30:	0003      	movs	r3, r0
   1dc32:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1dc34:	68bb      	ldr	r3, [r7, #8]
   1dc36:	2b00      	cmp	r3, #0
   1dc38:	d129      	bne.n	1dc8e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1dc3a:	683b      	ldr	r3, [r7, #0]
   1dc3c:	2b00      	cmp	r3, #0
   1dc3e:	d10c      	bne.n	1dc5a <prvProcessTimerOrBlockTask+0x42>
   1dc40:	687a      	ldr	r2, [r7, #4]
   1dc42:	68fb      	ldr	r3, [r7, #12]
   1dc44:	429a      	cmp	r2, r3
   1dc46:	d808      	bhi.n	1dc5a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1dc48:	4b16      	ldr	r3, [pc, #88]	; (1dca4 <prvProcessTimerOrBlockTask+0x8c>)
   1dc4a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1dc4c:	68fa      	ldr	r2, [r7, #12]
   1dc4e:	687b      	ldr	r3, [r7, #4]
   1dc50:	0011      	movs	r1, r2
   1dc52:	0018      	movs	r0, r3
   1dc54:	4b14      	ldr	r3, [pc, #80]	; (1dca8 <prvProcessTimerOrBlockTask+0x90>)
   1dc56:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1dc58:	e01b      	b.n	1dc92 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1dc5a:	683b      	ldr	r3, [r7, #0]
   1dc5c:	2b00      	cmp	r3, #0
   1dc5e:	d006      	beq.n	1dc6e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1dc60:	4b12      	ldr	r3, [pc, #72]	; (1dcac <prvProcessTimerOrBlockTask+0x94>)
   1dc62:	681b      	ldr	r3, [r3, #0]
   1dc64:	681b      	ldr	r3, [r3, #0]
   1dc66:	425a      	negs	r2, r3
   1dc68:	4153      	adcs	r3, r2
   1dc6a:	b2db      	uxtb	r3, r3
   1dc6c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1dc6e:	4b10      	ldr	r3, [pc, #64]	; (1dcb0 <prvProcessTimerOrBlockTask+0x98>)
   1dc70:	6818      	ldr	r0, [r3, #0]
   1dc72:	687a      	ldr	r2, [r7, #4]
   1dc74:	68fb      	ldr	r3, [r7, #12]
   1dc76:	1ad3      	subs	r3, r2, r3
   1dc78:	683a      	ldr	r2, [r7, #0]
   1dc7a:	0019      	movs	r1, r3
   1dc7c:	4b0d      	ldr	r3, [pc, #52]	; (1dcb4 <prvProcessTimerOrBlockTask+0x9c>)
   1dc7e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1dc80:	4b08      	ldr	r3, [pc, #32]	; (1dca4 <prvProcessTimerOrBlockTask+0x8c>)
   1dc82:	4798      	blx	r3
   1dc84:	1e03      	subs	r3, r0, #0
   1dc86:	d104      	bne.n	1dc92 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1dc88:	4b0b      	ldr	r3, [pc, #44]	; (1dcb8 <prvProcessTimerOrBlockTask+0xa0>)
   1dc8a:	4798      	blx	r3
}
   1dc8c:	e001      	b.n	1dc92 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1dc8e:	4b05      	ldr	r3, [pc, #20]	; (1dca4 <prvProcessTimerOrBlockTask+0x8c>)
   1dc90:	4798      	blx	r3
}
   1dc92:	46c0      	nop			; (mov r8, r8)
   1dc94:	46bd      	mov	sp, r7
   1dc96:	b004      	add	sp, #16
   1dc98:	bd80      	pop	{r7, pc}
   1dc9a:	46c0      	nop			; (mov r8, r8)
   1dc9c:	0001ca51 	.word	0x0001ca51
   1dca0:	0001dcfd 	.word	0x0001dcfd
   1dca4:	0001ca69 	.word	0x0001ca69
   1dca8:	0001db61 	.word	0x0001db61
   1dcac:	20003e00 	.word	0x20003e00
   1dcb0:	20003e04 	.word	0x20003e04
   1dcb4:	0001c1f1 	.word	0x0001c1f1
   1dcb8:	0001a781 	.word	0x0001a781

0001dcbc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1dcbc:	b580      	push	{r7, lr}
   1dcbe:	b084      	sub	sp, #16
   1dcc0:	af00      	add	r7, sp, #0
   1dcc2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1dcc4:	4b0c      	ldr	r3, [pc, #48]	; (1dcf8 <prvGetNextExpireTime+0x3c>)
   1dcc6:	681b      	ldr	r3, [r3, #0]
   1dcc8:	681b      	ldr	r3, [r3, #0]
   1dcca:	425a      	negs	r2, r3
   1dccc:	4153      	adcs	r3, r2
   1dcce:	b2db      	uxtb	r3, r3
   1dcd0:	001a      	movs	r2, r3
   1dcd2:	687b      	ldr	r3, [r7, #4]
   1dcd4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1dcd6:	687b      	ldr	r3, [r7, #4]
   1dcd8:	681b      	ldr	r3, [r3, #0]
   1dcda:	2b00      	cmp	r3, #0
   1dcdc:	d105      	bne.n	1dcea <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1dcde:	4b06      	ldr	r3, [pc, #24]	; (1dcf8 <prvGetNextExpireTime+0x3c>)
   1dce0:	681b      	ldr	r3, [r3, #0]
   1dce2:	68db      	ldr	r3, [r3, #12]
   1dce4:	681b      	ldr	r3, [r3, #0]
   1dce6:	60fb      	str	r3, [r7, #12]
   1dce8:	e001      	b.n	1dcee <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1dcea:	2300      	movs	r3, #0
   1dcec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1dcee:	68fb      	ldr	r3, [r7, #12]
}
   1dcf0:	0018      	movs	r0, r3
   1dcf2:	46bd      	mov	sp, r7
   1dcf4:	b004      	add	sp, #16
   1dcf6:	bd80      	pop	{r7, pc}
   1dcf8:	20003dfc 	.word	0x20003dfc

0001dcfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1dcfc:	b580      	push	{r7, lr}
   1dcfe:	b084      	sub	sp, #16
   1dd00:	af00      	add	r7, sp, #0
   1dd02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1dd04:	4b0c      	ldr	r3, [pc, #48]	; (1dd38 <prvSampleTimeNow+0x3c>)
   1dd06:	4798      	blx	r3
   1dd08:	0003      	movs	r3, r0
   1dd0a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1dd0c:	4b0b      	ldr	r3, [pc, #44]	; (1dd3c <prvSampleTimeNow+0x40>)
   1dd0e:	681b      	ldr	r3, [r3, #0]
   1dd10:	68fa      	ldr	r2, [r7, #12]
   1dd12:	429a      	cmp	r2, r3
   1dd14:	d205      	bcs.n	1dd22 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1dd16:	4b0a      	ldr	r3, [pc, #40]	; (1dd40 <prvSampleTimeNow+0x44>)
   1dd18:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1dd1a:	687b      	ldr	r3, [r7, #4]
   1dd1c:	2201      	movs	r2, #1
   1dd1e:	601a      	str	r2, [r3, #0]
   1dd20:	e002      	b.n	1dd28 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1dd22:	687b      	ldr	r3, [r7, #4]
   1dd24:	2200      	movs	r2, #0
   1dd26:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1dd28:	4b04      	ldr	r3, [pc, #16]	; (1dd3c <prvSampleTimeNow+0x40>)
   1dd2a:	68fa      	ldr	r2, [r7, #12]
   1dd2c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1dd2e:	68fb      	ldr	r3, [r7, #12]
}
   1dd30:	0018      	movs	r0, r3
   1dd32:	46bd      	mov	sp, r7
   1dd34:	b004      	add	sp, #16
   1dd36:	bd80      	pop	{r7, pc}
   1dd38:	0001cbd9 	.word	0x0001cbd9
   1dd3c:	20003e0c 	.word	0x20003e0c
   1dd40:	0001dee5 	.word	0x0001dee5

0001dd44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1dd44:	b580      	push	{r7, lr}
   1dd46:	b086      	sub	sp, #24
   1dd48:	af00      	add	r7, sp, #0
   1dd4a:	60f8      	str	r0, [r7, #12]
   1dd4c:	60b9      	str	r1, [r7, #8]
   1dd4e:	607a      	str	r2, [r7, #4]
   1dd50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1dd52:	2300      	movs	r3, #0
   1dd54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1dd56:	68fb      	ldr	r3, [r7, #12]
   1dd58:	68ba      	ldr	r2, [r7, #8]
   1dd5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1dd5c:	68fb      	ldr	r3, [r7, #12]
   1dd5e:	68fa      	ldr	r2, [r7, #12]
   1dd60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1dd62:	68ba      	ldr	r2, [r7, #8]
   1dd64:	687b      	ldr	r3, [r7, #4]
   1dd66:	429a      	cmp	r2, r3
   1dd68:	d812      	bhi.n	1dd90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dd6a:	687a      	ldr	r2, [r7, #4]
   1dd6c:	683b      	ldr	r3, [r7, #0]
   1dd6e:	1ad2      	subs	r2, r2, r3
   1dd70:	68fb      	ldr	r3, [r7, #12]
   1dd72:	699b      	ldr	r3, [r3, #24]
   1dd74:	429a      	cmp	r2, r3
   1dd76:	d302      	bcc.n	1dd7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1dd78:	2301      	movs	r3, #1
   1dd7a:	617b      	str	r3, [r7, #20]
   1dd7c:	e01b      	b.n	1ddb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1dd7e:	4b10      	ldr	r3, [pc, #64]	; (1ddc0 <prvInsertTimerInActiveList+0x7c>)
   1dd80:	681a      	ldr	r2, [r3, #0]
   1dd82:	68fb      	ldr	r3, [r7, #12]
   1dd84:	3304      	adds	r3, #4
   1dd86:	0019      	movs	r1, r3
   1dd88:	0010      	movs	r0, r2
   1dd8a:	4b0e      	ldr	r3, [pc, #56]	; (1ddc4 <prvInsertTimerInActiveList+0x80>)
   1dd8c:	4798      	blx	r3
   1dd8e:	e012      	b.n	1ddb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1dd90:	687a      	ldr	r2, [r7, #4]
   1dd92:	683b      	ldr	r3, [r7, #0]
   1dd94:	429a      	cmp	r2, r3
   1dd96:	d206      	bcs.n	1dda6 <prvInsertTimerInActiveList+0x62>
   1dd98:	68ba      	ldr	r2, [r7, #8]
   1dd9a:	683b      	ldr	r3, [r7, #0]
   1dd9c:	429a      	cmp	r2, r3
   1dd9e:	d302      	bcc.n	1dda6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1dda0:	2301      	movs	r3, #1
   1dda2:	617b      	str	r3, [r7, #20]
   1dda4:	e007      	b.n	1ddb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1dda6:	4b08      	ldr	r3, [pc, #32]	; (1ddc8 <prvInsertTimerInActiveList+0x84>)
   1dda8:	681a      	ldr	r2, [r3, #0]
   1ddaa:	68fb      	ldr	r3, [r7, #12]
   1ddac:	3304      	adds	r3, #4
   1ddae:	0019      	movs	r1, r3
   1ddb0:	0010      	movs	r0, r2
   1ddb2:	4b04      	ldr	r3, [pc, #16]	; (1ddc4 <prvInsertTimerInActiveList+0x80>)
   1ddb4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1ddb6:	697b      	ldr	r3, [r7, #20]
}
   1ddb8:	0018      	movs	r0, r3
   1ddba:	46bd      	mov	sp, r7
   1ddbc:	b006      	add	sp, #24
   1ddbe:	bd80      	pop	{r7, pc}
   1ddc0:	20003e00 	.word	0x20003e00
   1ddc4:	0001a5a3 	.word	0x0001a5a3
   1ddc8:	20003dfc 	.word	0x20003dfc

0001ddcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1ddcc:	b590      	push	{r4, r7, lr}
   1ddce:	b08b      	sub	sp, #44	; 0x2c
   1ddd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1ddd2:	e068      	b.n	1dea6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1ddd4:	2308      	movs	r3, #8
   1ddd6:	18fb      	adds	r3, r7, r3
   1ddd8:	681b      	ldr	r3, [r3, #0]
   1ddda:	2b00      	cmp	r3, #0
   1dddc:	db63      	blt.n	1dea6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1ddde:	2308      	movs	r3, #8
   1dde0:	18fb      	adds	r3, r7, r3
   1dde2:	689b      	ldr	r3, [r3, #8]
   1dde4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1dde6:	69fb      	ldr	r3, [r7, #28]
   1dde8:	695b      	ldr	r3, [r3, #20]
   1ddea:	2b00      	cmp	r3, #0
   1ddec:	d004      	beq.n	1ddf8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1ddee:	69fb      	ldr	r3, [r7, #28]
   1ddf0:	3304      	adds	r3, #4
   1ddf2:	0018      	movs	r0, r3
   1ddf4:	4b33      	ldr	r3, [pc, #204]	; (1dec4 <prvProcessReceivedCommands+0xf8>)
   1ddf6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1ddf8:	1d3b      	adds	r3, r7, #4
   1ddfa:	0018      	movs	r0, r3
   1ddfc:	4b32      	ldr	r3, [pc, #200]	; (1dec8 <prvProcessReceivedCommands+0xfc>)
   1ddfe:	4798      	blx	r3
   1de00:	0003      	movs	r3, r0
   1de02:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1de04:	2308      	movs	r3, #8
   1de06:	18fb      	adds	r3, r7, r3
   1de08:	681b      	ldr	r3, [r3, #0]
   1de0a:	2b09      	cmp	r3, #9
   1de0c:	d84a      	bhi.n	1dea4 <prvProcessReceivedCommands+0xd8>
   1de0e:	009a      	lsls	r2, r3, #2
   1de10:	4b2e      	ldr	r3, [pc, #184]	; (1decc <prvProcessReceivedCommands+0x100>)
   1de12:	18d3      	adds	r3, r2, r3
   1de14:	681b      	ldr	r3, [r3, #0]
   1de16:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1de18:	2308      	movs	r3, #8
   1de1a:	18fb      	adds	r3, r7, r3
   1de1c:	685a      	ldr	r2, [r3, #4]
   1de1e:	69fb      	ldr	r3, [r7, #28]
   1de20:	699b      	ldr	r3, [r3, #24]
   1de22:	18d1      	adds	r1, r2, r3
   1de24:	2308      	movs	r3, #8
   1de26:	18fb      	adds	r3, r7, r3
   1de28:	685b      	ldr	r3, [r3, #4]
   1de2a:	69ba      	ldr	r2, [r7, #24]
   1de2c:	69f8      	ldr	r0, [r7, #28]
   1de2e:	4c28      	ldr	r4, [pc, #160]	; (1ded0 <prvProcessReceivedCommands+0x104>)
   1de30:	47a0      	blx	r4
   1de32:	1e03      	subs	r3, r0, #0
   1de34:	d037      	beq.n	1dea6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1de36:	69fb      	ldr	r3, [r7, #28]
   1de38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1de3a:	69fa      	ldr	r2, [r7, #28]
   1de3c:	0010      	movs	r0, r2
   1de3e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1de40:	69fb      	ldr	r3, [r7, #28]
   1de42:	69db      	ldr	r3, [r3, #28]
   1de44:	2b01      	cmp	r3, #1
   1de46:	d12e      	bne.n	1dea6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1de48:	2308      	movs	r3, #8
   1de4a:	18fb      	adds	r3, r7, r3
   1de4c:	685a      	ldr	r2, [r3, #4]
   1de4e:	69fb      	ldr	r3, [r7, #28]
   1de50:	699b      	ldr	r3, [r3, #24]
   1de52:	18d2      	adds	r2, r2, r3
   1de54:	69f8      	ldr	r0, [r7, #28]
   1de56:	2300      	movs	r3, #0
   1de58:	9300      	str	r3, [sp, #0]
   1de5a:	2300      	movs	r3, #0
   1de5c:	2100      	movs	r1, #0
   1de5e:	4c1d      	ldr	r4, [pc, #116]	; (1ded4 <prvProcessReceivedCommands+0x108>)
   1de60:	47a0      	blx	r4
   1de62:	0003      	movs	r3, r0
   1de64:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1de66:	697b      	ldr	r3, [r7, #20]
   1de68:	2b00      	cmp	r3, #0
   1de6a:	d11c      	bne.n	1dea6 <prvProcessReceivedCommands+0xda>
   1de6c:	b672      	cpsid	i
   1de6e:	e7fe      	b.n	1de6e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1de70:	2308      	movs	r3, #8
   1de72:	18fb      	adds	r3, r7, r3
   1de74:	685a      	ldr	r2, [r3, #4]
   1de76:	69fb      	ldr	r3, [r7, #28]
   1de78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1de7a:	69fb      	ldr	r3, [r7, #28]
   1de7c:	699b      	ldr	r3, [r3, #24]
   1de7e:	2b00      	cmp	r3, #0
   1de80:	d101      	bne.n	1de86 <prvProcessReceivedCommands+0xba>
   1de82:	b672      	cpsid	i
   1de84:	e7fe      	b.n	1de84 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1de86:	69fb      	ldr	r3, [r7, #28]
   1de88:	699a      	ldr	r2, [r3, #24]
   1de8a:	69bb      	ldr	r3, [r7, #24]
   1de8c:	18d1      	adds	r1, r2, r3
   1de8e:	69bb      	ldr	r3, [r7, #24]
   1de90:	69ba      	ldr	r2, [r7, #24]
   1de92:	69f8      	ldr	r0, [r7, #28]
   1de94:	4c0e      	ldr	r4, [pc, #56]	; (1ded0 <prvProcessReceivedCommands+0x104>)
   1de96:	47a0      	blx	r4
					break;
   1de98:	e005      	b.n	1dea6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1de9a:	69fb      	ldr	r3, [r7, #28]
   1de9c:	0018      	movs	r0, r3
   1de9e:	4b0e      	ldr	r3, [pc, #56]	; (1ded8 <prvProcessReceivedCommands+0x10c>)
   1dea0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1dea2:	e000      	b.n	1dea6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1dea4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1dea6:	4b0d      	ldr	r3, [pc, #52]	; (1dedc <prvProcessReceivedCommands+0x110>)
   1dea8:	681b      	ldr	r3, [r3, #0]
   1deaa:	2208      	movs	r2, #8
   1deac:	18b9      	adds	r1, r7, r2
   1deae:	2200      	movs	r2, #0
   1deb0:	0018      	movs	r0, r3
   1deb2:	4b0b      	ldr	r3, [pc, #44]	; (1dee0 <prvProcessReceivedCommands+0x114>)
   1deb4:	4798      	blx	r3
   1deb6:	1e03      	subs	r3, r0, #0
   1deb8:	d18c      	bne.n	1ddd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1deba:	46c0      	nop			; (mov r8, r8)
   1debc:	46bd      	mov	sp, r7
   1debe:	b009      	add	sp, #36	; 0x24
   1dec0:	bd90      	pop	{r4, r7, pc}
   1dec2:	46c0      	nop			; (mov r8, r8)
   1dec4:	0001a60f 	.word	0x0001a60f
   1dec8:	0001dcfd 	.word	0x0001dcfd
   1decc:	000383b0 	.word	0x000383b0
   1ded0:	0001dd45 	.word	0x0001dd45
   1ded4:	0001dab9 	.word	0x0001dab9
   1ded8:	0001a995 	.word	0x0001a995
   1dedc:	20003e04 	.word	0x20003e04
   1dee0:	0001b5e5 	.word	0x0001b5e5

0001dee4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1dee4:	b590      	push	{r4, r7, lr}
   1dee6:	b089      	sub	sp, #36	; 0x24
   1dee8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1deea:	e03e      	b.n	1df6a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1deec:	4b28      	ldr	r3, [pc, #160]	; (1df90 <prvSwitchTimerLists+0xac>)
   1deee:	681b      	ldr	r3, [r3, #0]
   1def0:	68db      	ldr	r3, [r3, #12]
   1def2:	681b      	ldr	r3, [r3, #0]
   1def4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1def6:	4b26      	ldr	r3, [pc, #152]	; (1df90 <prvSwitchTimerLists+0xac>)
   1def8:	681b      	ldr	r3, [r3, #0]
   1defa:	68db      	ldr	r3, [r3, #12]
   1defc:	68db      	ldr	r3, [r3, #12]
   1defe:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1df00:	693b      	ldr	r3, [r7, #16]
   1df02:	3304      	adds	r3, #4
   1df04:	0018      	movs	r0, r3
   1df06:	4b23      	ldr	r3, [pc, #140]	; (1df94 <prvSwitchTimerLists+0xb0>)
   1df08:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1df0a:	693b      	ldr	r3, [r7, #16]
   1df0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1df0e:	693a      	ldr	r2, [r7, #16]
   1df10:	0010      	movs	r0, r2
   1df12:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1df14:	693b      	ldr	r3, [r7, #16]
   1df16:	69db      	ldr	r3, [r3, #28]
   1df18:	2b01      	cmp	r3, #1
   1df1a:	d126      	bne.n	1df6a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1df1c:	693b      	ldr	r3, [r7, #16]
   1df1e:	699a      	ldr	r2, [r3, #24]
   1df20:	697b      	ldr	r3, [r7, #20]
   1df22:	18d3      	adds	r3, r2, r3
   1df24:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1df26:	68fa      	ldr	r2, [r7, #12]
   1df28:	697b      	ldr	r3, [r7, #20]
   1df2a:	429a      	cmp	r2, r3
   1df2c:	d90e      	bls.n	1df4c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1df2e:	693b      	ldr	r3, [r7, #16]
   1df30:	68fa      	ldr	r2, [r7, #12]
   1df32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1df34:	693b      	ldr	r3, [r7, #16]
   1df36:	693a      	ldr	r2, [r7, #16]
   1df38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1df3a:	4b15      	ldr	r3, [pc, #84]	; (1df90 <prvSwitchTimerLists+0xac>)
   1df3c:	681a      	ldr	r2, [r3, #0]
   1df3e:	693b      	ldr	r3, [r7, #16]
   1df40:	3304      	adds	r3, #4
   1df42:	0019      	movs	r1, r3
   1df44:	0010      	movs	r0, r2
   1df46:	4b14      	ldr	r3, [pc, #80]	; (1df98 <prvSwitchTimerLists+0xb4>)
   1df48:	4798      	blx	r3
   1df4a:	e00e      	b.n	1df6a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1df4c:	697a      	ldr	r2, [r7, #20]
   1df4e:	6938      	ldr	r0, [r7, #16]
   1df50:	2300      	movs	r3, #0
   1df52:	9300      	str	r3, [sp, #0]
   1df54:	2300      	movs	r3, #0
   1df56:	2100      	movs	r1, #0
   1df58:	4c10      	ldr	r4, [pc, #64]	; (1df9c <prvSwitchTimerLists+0xb8>)
   1df5a:	47a0      	blx	r4
   1df5c:	0003      	movs	r3, r0
   1df5e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1df60:	68bb      	ldr	r3, [r7, #8]
   1df62:	2b00      	cmp	r3, #0
   1df64:	d101      	bne.n	1df6a <prvSwitchTimerLists+0x86>
   1df66:	b672      	cpsid	i
   1df68:	e7fe      	b.n	1df68 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1df6a:	4b09      	ldr	r3, [pc, #36]	; (1df90 <prvSwitchTimerLists+0xac>)
   1df6c:	681b      	ldr	r3, [r3, #0]
   1df6e:	681b      	ldr	r3, [r3, #0]
   1df70:	2b00      	cmp	r3, #0
   1df72:	d1bb      	bne.n	1deec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1df74:	4b06      	ldr	r3, [pc, #24]	; (1df90 <prvSwitchTimerLists+0xac>)
   1df76:	681b      	ldr	r3, [r3, #0]
   1df78:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1df7a:	4b09      	ldr	r3, [pc, #36]	; (1dfa0 <prvSwitchTimerLists+0xbc>)
   1df7c:	681a      	ldr	r2, [r3, #0]
   1df7e:	4b04      	ldr	r3, [pc, #16]	; (1df90 <prvSwitchTimerLists+0xac>)
   1df80:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1df82:	4b07      	ldr	r3, [pc, #28]	; (1dfa0 <prvSwitchTimerLists+0xbc>)
   1df84:	687a      	ldr	r2, [r7, #4]
   1df86:	601a      	str	r2, [r3, #0]
}
   1df88:	46c0      	nop			; (mov r8, r8)
   1df8a:	46bd      	mov	sp, r7
   1df8c:	b007      	add	sp, #28
   1df8e:	bd90      	pop	{r4, r7, pc}
   1df90:	20003dfc 	.word	0x20003dfc
   1df94:	0001a60f 	.word	0x0001a60f
   1df98:	0001a5a3 	.word	0x0001a5a3
   1df9c:	0001dab9 	.word	0x0001dab9
   1dfa0:	20003e00 	.word	0x20003e00

0001dfa4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1dfa4:	b580      	push	{r7, lr}
   1dfa6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1dfa8:	4b10      	ldr	r3, [pc, #64]	; (1dfec <prvCheckForValidListAndQueue+0x48>)
   1dfaa:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1dfac:	4b10      	ldr	r3, [pc, #64]	; (1dff0 <prvCheckForValidListAndQueue+0x4c>)
   1dfae:	681b      	ldr	r3, [r3, #0]
   1dfb0:	2b00      	cmp	r3, #0
   1dfb2:	d115      	bne.n	1dfe0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1dfb4:	4b0f      	ldr	r3, [pc, #60]	; (1dff4 <prvCheckForValidListAndQueue+0x50>)
   1dfb6:	0018      	movs	r0, r3
   1dfb8:	4b0f      	ldr	r3, [pc, #60]	; (1dff8 <prvCheckForValidListAndQueue+0x54>)
   1dfba:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1dfbc:	4b0f      	ldr	r3, [pc, #60]	; (1dffc <prvCheckForValidListAndQueue+0x58>)
   1dfbe:	0018      	movs	r0, r3
   1dfc0:	4b0d      	ldr	r3, [pc, #52]	; (1dff8 <prvCheckForValidListAndQueue+0x54>)
   1dfc2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1dfc4:	4b0e      	ldr	r3, [pc, #56]	; (1e000 <prvCheckForValidListAndQueue+0x5c>)
   1dfc6:	4a0b      	ldr	r2, [pc, #44]	; (1dff4 <prvCheckForValidListAndQueue+0x50>)
   1dfc8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1dfca:	4b0e      	ldr	r3, [pc, #56]	; (1e004 <prvCheckForValidListAndQueue+0x60>)
   1dfcc:	4a0b      	ldr	r2, [pc, #44]	; (1dffc <prvCheckForValidListAndQueue+0x58>)
   1dfce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1dfd0:	2200      	movs	r2, #0
   1dfd2:	210c      	movs	r1, #12
   1dfd4:	2005      	movs	r0, #5
   1dfd6:	4b0c      	ldr	r3, [pc, #48]	; (1e008 <prvCheckForValidListAndQueue+0x64>)
   1dfd8:	4798      	blx	r3
   1dfda:	0002      	movs	r2, r0
   1dfdc:	4b04      	ldr	r3, [pc, #16]	; (1dff0 <prvCheckForValidListAndQueue+0x4c>)
   1dfde:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1dfe0:	4b0a      	ldr	r3, [pc, #40]	; (1e00c <prvCheckForValidListAndQueue+0x68>)
   1dfe2:	4798      	blx	r3
}
   1dfe4:	46c0      	nop			; (mov r8, r8)
   1dfe6:	46bd      	mov	sp, r7
   1dfe8:	bd80      	pop	{r7, pc}
   1dfea:	46c0      	nop			; (mov r8, r8)
   1dfec:	0001a799 	.word	0x0001a799
   1dff0:	20003e04 	.word	0x20003e04
   1dff4:	20003dd4 	.word	0x20003dd4
   1dff8:	0001a50d 	.word	0x0001a50d
   1dffc:	20003de8 	.word	0x20003de8
   1e000:	20003dfc 	.word	0x20003dfc
   1e004:	20003e00 	.word	0x20003e00
   1e008:	0001aa85 	.word	0x0001aa85
   1e00c:	0001a7bd 	.word	0x0001a7bd

0001e010 <advance_pointer>:
   1e010:	b580      	push	{r7, lr}
   1e012:	b082      	sub	sp, #8
   1e014:	af00      	add	r7, sp, #0
   1e016:	6078      	str	r0, [r7, #4]
   1e018:	687b      	ldr	r3, [r7, #4]
   1e01a:	7c1b      	ldrb	r3, [r3, #16]
   1e01c:	2b00      	cmp	r3, #0
   1e01e:	d00b      	beq.n	1e038 <advance_pointer+0x28>
   1e020:	687b      	ldr	r3, [r7, #4]
   1e022:	689b      	ldr	r3, [r3, #8]
   1e024:	1c5a      	adds	r2, r3, #1
   1e026:	687b      	ldr	r3, [r7, #4]
   1e028:	68d9      	ldr	r1, [r3, #12]
   1e02a:	4b10      	ldr	r3, [pc, #64]	; (1e06c <advance_pointer+0x5c>)
   1e02c:	0010      	movs	r0, r2
   1e02e:	4798      	blx	r3
   1e030:	000b      	movs	r3, r1
   1e032:	001a      	movs	r2, r3
   1e034:	687b      	ldr	r3, [r7, #4]
   1e036:	609a      	str	r2, [r3, #8]
   1e038:	687b      	ldr	r3, [r7, #4]
   1e03a:	685b      	ldr	r3, [r3, #4]
   1e03c:	1c5a      	adds	r2, r3, #1
   1e03e:	687b      	ldr	r3, [r7, #4]
   1e040:	68d9      	ldr	r1, [r3, #12]
   1e042:	4b0a      	ldr	r3, [pc, #40]	; (1e06c <advance_pointer+0x5c>)
   1e044:	0010      	movs	r0, r2
   1e046:	4798      	blx	r3
   1e048:	000b      	movs	r3, r1
   1e04a:	001a      	movs	r2, r3
   1e04c:	687b      	ldr	r3, [r7, #4]
   1e04e:	605a      	str	r2, [r3, #4]
   1e050:	687b      	ldr	r3, [r7, #4]
   1e052:	685a      	ldr	r2, [r3, #4]
   1e054:	687b      	ldr	r3, [r7, #4]
   1e056:	689b      	ldr	r3, [r3, #8]
   1e058:	1ad3      	subs	r3, r2, r3
   1e05a:	425a      	negs	r2, r3
   1e05c:	4153      	adcs	r3, r2
   1e05e:	b2da      	uxtb	r2, r3
   1e060:	687b      	ldr	r3, [r7, #4]
   1e062:	741a      	strb	r2, [r3, #16]
   1e064:	46c0      	nop			; (mov r8, r8)
   1e066:	46bd      	mov	sp, r7
   1e068:	b002      	add	sp, #8
   1e06a:	bd80      	pop	{r7, pc}
   1e06c:	00032d71 	.word	0x00032d71

0001e070 <retreat_pointer>:
   1e070:	b580      	push	{r7, lr}
   1e072:	b082      	sub	sp, #8
   1e074:	af00      	add	r7, sp, #0
   1e076:	6078      	str	r0, [r7, #4]
   1e078:	687b      	ldr	r3, [r7, #4]
   1e07a:	2200      	movs	r2, #0
   1e07c:	741a      	strb	r2, [r3, #16]
   1e07e:	687b      	ldr	r3, [r7, #4]
   1e080:	689b      	ldr	r3, [r3, #8]
   1e082:	1c5a      	adds	r2, r3, #1
   1e084:	687b      	ldr	r3, [r7, #4]
   1e086:	68d9      	ldr	r1, [r3, #12]
   1e088:	4b05      	ldr	r3, [pc, #20]	; (1e0a0 <retreat_pointer+0x30>)
   1e08a:	0010      	movs	r0, r2
   1e08c:	4798      	blx	r3
   1e08e:	000b      	movs	r3, r1
   1e090:	001a      	movs	r2, r3
   1e092:	687b      	ldr	r3, [r7, #4]
   1e094:	609a      	str	r2, [r3, #8]
   1e096:	46c0      	nop			; (mov r8, r8)
   1e098:	46bd      	mov	sp, r7
   1e09a:	b002      	add	sp, #8
   1e09c:	bd80      	pop	{r7, pc}
   1e09e:	46c0      	nop			; (mov r8, r8)
   1e0a0:	00032d71 	.word	0x00032d71

0001e0a4 <circular_buf_init>:
   1e0a4:	b580      	push	{r7, lr}
   1e0a6:	b084      	sub	sp, #16
   1e0a8:	af00      	add	r7, sp, #0
   1e0aa:	6078      	str	r0, [r7, #4]
   1e0ac:	6039      	str	r1, [r7, #0]
   1e0ae:	2014      	movs	r0, #20
   1e0b0:	4b09      	ldr	r3, [pc, #36]	; (1e0d8 <circular_buf_init+0x34>)
   1e0b2:	4798      	blx	r3
   1e0b4:	0003      	movs	r3, r0
   1e0b6:	60fb      	str	r3, [r7, #12]
   1e0b8:	68fb      	ldr	r3, [r7, #12]
   1e0ba:	687a      	ldr	r2, [r7, #4]
   1e0bc:	601a      	str	r2, [r3, #0]
   1e0be:	68fb      	ldr	r3, [r7, #12]
   1e0c0:	683a      	ldr	r2, [r7, #0]
   1e0c2:	60da      	str	r2, [r3, #12]
   1e0c4:	68fb      	ldr	r3, [r7, #12]
   1e0c6:	0018      	movs	r0, r3
   1e0c8:	4b04      	ldr	r3, [pc, #16]	; (1e0dc <circular_buf_init+0x38>)
   1e0ca:	4798      	blx	r3
   1e0cc:	68fb      	ldr	r3, [r7, #12]
   1e0ce:	0018      	movs	r0, r3
   1e0d0:	46bd      	mov	sp, r7
   1e0d2:	b004      	add	sp, #16
   1e0d4:	bd80      	pop	{r7, pc}
   1e0d6:	46c0      	nop			; (mov r8, r8)
   1e0d8:	00034be1 	.word	0x00034be1
   1e0dc:	0001e0e1 	.word	0x0001e0e1

0001e0e0 <circular_buf_reset>:
   1e0e0:	b580      	push	{r7, lr}
   1e0e2:	b082      	sub	sp, #8
   1e0e4:	af00      	add	r7, sp, #0
   1e0e6:	6078      	str	r0, [r7, #4]
   1e0e8:	687b      	ldr	r3, [r7, #4]
   1e0ea:	2200      	movs	r2, #0
   1e0ec:	605a      	str	r2, [r3, #4]
   1e0ee:	687b      	ldr	r3, [r7, #4]
   1e0f0:	2200      	movs	r2, #0
   1e0f2:	609a      	str	r2, [r3, #8]
   1e0f4:	687b      	ldr	r3, [r7, #4]
   1e0f6:	2200      	movs	r2, #0
   1e0f8:	741a      	strb	r2, [r3, #16]
   1e0fa:	46c0      	nop			; (mov r8, r8)
   1e0fc:	46bd      	mov	sp, r7
   1e0fe:	b002      	add	sp, #8
   1e100:	bd80      	pop	{r7, pc}
	...

0001e104 <circular_buf_put>:
   1e104:	b580      	push	{r7, lr}
   1e106:	b082      	sub	sp, #8
   1e108:	af00      	add	r7, sp, #0
   1e10a:	6078      	str	r0, [r7, #4]
   1e10c:	000a      	movs	r2, r1
   1e10e:	1cfb      	adds	r3, r7, #3
   1e110:	701a      	strb	r2, [r3, #0]
   1e112:	687b      	ldr	r3, [r7, #4]
   1e114:	681a      	ldr	r2, [r3, #0]
   1e116:	687b      	ldr	r3, [r7, #4]
   1e118:	685b      	ldr	r3, [r3, #4]
   1e11a:	18d3      	adds	r3, r2, r3
   1e11c:	1cfa      	adds	r2, r7, #3
   1e11e:	7812      	ldrb	r2, [r2, #0]
   1e120:	701a      	strb	r2, [r3, #0]
   1e122:	687b      	ldr	r3, [r7, #4]
   1e124:	0018      	movs	r0, r3
   1e126:	4b03      	ldr	r3, [pc, #12]	; (1e134 <circular_buf_put+0x30>)
   1e128:	4798      	blx	r3
   1e12a:	46c0      	nop			; (mov r8, r8)
   1e12c:	46bd      	mov	sp, r7
   1e12e:	b002      	add	sp, #8
   1e130:	bd80      	pop	{r7, pc}
   1e132:	46c0      	nop			; (mov r8, r8)
   1e134:	0001e011 	.word	0x0001e011

0001e138 <circular_buf_get>:
   1e138:	b580      	push	{r7, lr}
   1e13a:	b084      	sub	sp, #16
   1e13c:	af00      	add	r7, sp, #0
   1e13e:	6078      	str	r0, [r7, #4]
   1e140:	6039      	str	r1, [r7, #0]
   1e142:	2301      	movs	r3, #1
   1e144:	425b      	negs	r3, r3
   1e146:	60fb      	str	r3, [r7, #12]
   1e148:	687b      	ldr	r3, [r7, #4]
   1e14a:	0018      	movs	r0, r3
   1e14c:	4b0d      	ldr	r3, [pc, #52]	; (1e184 <circular_buf_get+0x4c>)
   1e14e:	4798      	blx	r3
   1e150:	0003      	movs	r3, r0
   1e152:	001a      	movs	r2, r3
   1e154:	2301      	movs	r3, #1
   1e156:	4053      	eors	r3, r2
   1e158:	b2db      	uxtb	r3, r3
   1e15a:	2b00      	cmp	r3, #0
   1e15c:	d00d      	beq.n	1e17a <circular_buf_get+0x42>
   1e15e:	687b      	ldr	r3, [r7, #4]
   1e160:	681a      	ldr	r2, [r3, #0]
   1e162:	687b      	ldr	r3, [r7, #4]
   1e164:	689b      	ldr	r3, [r3, #8]
   1e166:	18d3      	adds	r3, r2, r3
   1e168:	781a      	ldrb	r2, [r3, #0]
   1e16a:	683b      	ldr	r3, [r7, #0]
   1e16c:	701a      	strb	r2, [r3, #0]
   1e16e:	687b      	ldr	r3, [r7, #4]
   1e170:	0018      	movs	r0, r3
   1e172:	4b05      	ldr	r3, [pc, #20]	; (1e188 <circular_buf_get+0x50>)
   1e174:	4798      	blx	r3
   1e176:	2300      	movs	r3, #0
   1e178:	60fb      	str	r3, [r7, #12]
   1e17a:	68fb      	ldr	r3, [r7, #12]
   1e17c:	0018      	movs	r0, r3
   1e17e:	46bd      	mov	sp, r7
   1e180:	b004      	add	sp, #16
   1e182:	bd80      	pop	{r7, pc}
   1e184:	0001e18d 	.word	0x0001e18d
   1e188:	0001e071 	.word	0x0001e071

0001e18c <circular_buf_empty>:
   1e18c:	b580      	push	{r7, lr}
   1e18e:	b082      	sub	sp, #8
   1e190:	af00      	add	r7, sp, #0
   1e192:	6078      	str	r0, [r7, #4]
   1e194:	687b      	ldr	r3, [r7, #4]
   1e196:	7c1b      	ldrb	r3, [r3, #16]
   1e198:	2201      	movs	r2, #1
   1e19a:	4053      	eors	r3, r2
   1e19c:	b2db      	uxtb	r3, r3
   1e19e:	2b00      	cmp	r3, #0
   1e1a0:	d007      	beq.n	1e1b2 <circular_buf_empty+0x26>
   1e1a2:	687b      	ldr	r3, [r7, #4]
   1e1a4:	685a      	ldr	r2, [r3, #4]
   1e1a6:	687b      	ldr	r3, [r7, #4]
   1e1a8:	689b      	ldr	r3, [r3, #8]
   1e1aa:	429a      	cmp	r2, r3
   1e1ac:	d101      	bne.n	1e1b2 <circular_buf_empty+0x26>
   1e1ae:	2301      	movs	r3, #1
   1e1b0:	e000      	b.n	1e1b4 <circular_buf_empty+0x28>
   1e1b2:	2300      	movs	r3, #0
   1e1b4:	1c1a      	adds	r2, r3, #0
   1e1b6:	2301      	movs	r3, #1
   1e1b8:	4013      	ands	r3, r2
   1e1ba:	b2db      	uxtb	r3, r3
   1e1bc:	0018      	movs	r0, r3
   1e1be:	46bd      	mov	sp, r7
   1e1c0:	b002      	add	sp, #8
   1e1c2:	bd80      	pop	{r7, pc}

0001e1c4 <system_interrupt_enable>:
{
   1e1c4:	b580      	push	{r7, lr}
   1e1c6:	b082      	sub	sp, #8
   1e1c8:	af00      	add	r7, sp, #0
   1e1ca:	0002      	movs	r2, r0
   1e1cc:	1dfb      	adds	r3, r7, #7
   1e1ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e1d0:	4b06      	ldr	r3, [pc, #24]	; (1e1ec <system_interrupt_enable+0x28>)
   1e1d2:	1dfa      	adds	r2, r7, #7
   1e1d4:	7812      	ldrb	r2, [r2, #0]
   1e1d6:	0011      	movs	r1, r2
   1e1d8:	221f      	movs	r2, #31
   1e1da:	400a      	ands	r2, r1
   1e1dc:	2101      	movs	r1, #1
   1e1de:	4091      	lsls	r1, r2
   1e1e0:	000a      	movs	r2, r1
   1e1e2:	601a      	str	r2, [r3, #0]
}
   1e1e4:	46c0      	nop			; (mov r8, r8)
   1e1e6:	46bd      	mov	sp, r7
   1e1e8:	b002      	add	sp, #8
   1e1ea:	bd80      	pop	{r7, pc}
   1e1ec:	e000e100 	.word	0xe000e100

0001e1f0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1e1f0:	b580      	push	{r7, lr}
   1e1f2:	b084      	sub	sp, #16
   1e1f4:	af00      	add	r7, sp, #0
   1e1f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1e1f8:	687b      	ldr	r3, [r7, #4]
   1e1fa:	681b      	ldr	r3, [r3, #0]
   1e1fc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1e1fe:	68fb      	ldr	r3, [r7, #12]
   1e200:	69db      	ldr	r3, [r3, #28]
   1e202:	1e5a      	subs	r2, r3, #1
   1e204:	4193      	sbcs	r3, r2
   1e206:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1e208:	0018      	movs	r0, r3
   1e20a:	46bd      	mov	sp, r7
   1e20c:	b004      	add	sp, #16
   1e20e:	bd80      	pop	{r7, pc}

0001e210 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1e210:	b580      	push	{r7, lr}
   1e212:	b082      	sub	sp, #8
   1e214:	af00      	add	r7, sp, #0
   1e216:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1e218:	46c0      	nop			; (mov r8, r8)
   1e21a:	687b      	ldr	r3, [r7, #4]
   1e21c:	0018      	movs	r0, r3
   1e21e:	4b04      	ldr	r3, [pc, #16]	; (1e230 <_usart_wait_for_sync+0x20>)
   1e220:	4798      	blx	r3
   1e222:	1e03      	subs	r3, r0, #0
   1e224:	d1f9      	bne.n	1e21a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1e226:	46c0      	nop			; (mov r8, r8)
   1e228:	46bd      	mov	sp, r7
   1e22a:	b002      	add	sp, #8
   1e22c:	bd80      	pop	{r7, pc}
   1e22e:	46c0      	nop			; (mov r8, r8)
   1e230:	0001e1f1 	.word	0x0001e1f1

0001e234 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1e234:	b580      	push	{r7, lr}
   1e236:	b082      	sub	sp, #8
   1e238:	af00      	add	r7, sp, #0
   1e23a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1e23c:	687b      	ldr	r3, [r7, #4]
   1e23e:	2280      	movs	r2, #128	; 0x80
   1e240:	05d2      	lsls	r2, r2, #23
   1e242:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1e244:	687b      	ldr	r3, [r7, #4]
   1e246:	2200      	movs	r2, #0
   1e248:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1e24a:	687b      	ldr	r3, [r7, #4]
   1e24c:	22ff      	movs	r2, #255	; 0xff
   1e24e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1e250:	687b      	ldr	r3, [r7, #4]
   1e252:	2200      	movs	r2, #0
   1e254:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1e256:	687b      	ldr	r3, [r7, #4]
   1e258:	2200      	movs	r2, #0
   1e25a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1e25c:	687b      	ldr	r3, [r7, #4]
   1e25e:	2296      	movs	r2, #150	; 0x96
   1e260:	0192      	lsls	r2, r2, #6
   1e262:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1e264:	687b      	ldr	r3, [r7, #4]
   1e266:	2224      	movs	r2, #36	; 0x24
   1e268:	2101      	movs	r1, #1
   1e26a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1e26c:	687b      	ldr	r3, [r7, #4]
   1e26e:	2225      	movs	r2, #37	; 0x25
   1e270:	2101      	movs	r1, #1
   1e272:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1e274:	687b      	ldr	r3, [r7, #4]
   1e276:	2226      	movs	r2, #38	; 0x26
   1e278:	2100      	movs	r1, #0
   1e27a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1e27c:	687b      	ldr	r3, [r7, #4]
   1e27e:	2227      	movs	r2, #39	; 0x27
   1e280:	2100      	movs	r1, #0
   1e282:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1e284:	687b      	ldr	r3, [r7, #4]
   1e286:	2200      	movs	r2, #0
   1e288:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1e28a:	687b      	ldr	r3, [r7, #4]
   1e28c:	2288      	movs	r2, #136	; 0x88
   1e28e:	0352      	lsls	r2, r2, #13
   1e290:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1e292:	687b      	ldr	r3, [r7, #4]
   1e294:	222c      	movs	r2, #44	; 0x2c
   1e296:	2100      	movs	r1, #0
   1e298:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1e29a:	687b      	ldr	r3, [r7, #4]
   1e29c:	222d      	movs	r2, #45	; 0x2d
   1e29e:	2100      	movs	r1, #0
   1e2a0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1e2a2:	687b      	ldr	r3, [r7, #4]
   1e2a4:	2200      	movs	r2, #0
   1e2a6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1e2a8:	687b      	ldr	r3, [r7, #4]
   1e2aa:	2200      	movs	r2, #0
   1e2ac:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1e2ae:	687b      	ldr	r3, [r7, #4]
   1e2b0:	2200      	movs	r2, #0
   1e2b2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1e2b4:	687b      	ldr	r3, [r7, #4]
   1e2b6:	2200      	movs	r2, #0
   1e2b8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1e2ba:	687b      	ldr	r3, [r7, #4]
   1e2bc:	2200      	movs	r2, #0
   1e2be:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1e2c0:	687b      	ldr	r3, [r7, #4]
   1e2c2:	2200      	movs	r2, #0
   1e2c4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1e2c6:	687b      	ldr	r3, [r7, #4]
   1e2c8:	2200      	movs	r2, #0
   1e2ca:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1e2cc:	687b      	ldr	r3, [r7, #4]
   1e2ce:	2200      	movs	r2, #0
   1e2d0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1e2d2:	687b      	ldr	r3, [r7, #4]
   1e2d4:	2200      	movs	r2, #0
   1e2d6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1e2d8:	687b      	ldr	r3, [r7, #4]
   1e2da:	2200      	movs	r2, #0
   1e2dc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1e2de:	687b      	ldr	r3, [r7, #4]
   1e2e0:	2213      	movs	r2, #19
   1e2e2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1e2e4:	687b      	ldr	r3, [r7, #4]
   1e2e6:	2200      	movs	r2, #0
   1e2e8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1e2ea:	46c0      	nop			; (mov r8, r8)
   1e2ec:	46bd      	mov	sp, r7
   1e2ee:	b002      	add	sp, #8
   1e2f0:	bd80      	pop	{r7, pc}
	...

0001e2f4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1e2f4:	b580      	push	{r7, lr}
   1e2f6:	b084      	sub	sp, #16
   1e2f8:	af00      	add	r7, sp, #0
   1e2fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e2fc:	687b      	ldr	r3, [r7, #4]
   1e2fe:	681b      	ldr	r3, [r3, #0]
   1e300:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e302:	687b      	ldr	r3, [r7, #4]
   1e304:	681b      	ldr	r3, [r3, #0]
   1e306:	0018      	movs	r0, r3
   1e308:	4b09      	ldr	r3, [pc, #36]	; (1e330 <usart_enable+0x3c>)
   1e30a:	4798      	blx	r3
   1e30c:	0003      	movs	r3, r0
   1e30e:	0018      	movs	r0, r3
   1e310:	4b08      	ldr	r3, [pc, #32]	; (1e334 <usart_enable+0x40>)
   1e312:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1e314:	687b      	ldr	r3, [r7, #4]
   1e316:	0018      	movs	r0, r3
   1e318:	4b07      	ldr	r3, [pc, #28]	; (1e338 <usart_enable+0x44>)
   1e31a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1e31c:	68fb      	ldr	r3, [r7, #12]
   1e31e:	681b      	ldr	r3, [r3, #0]
   1e320:	2202      	movs	r2, #2
   1e322:	431a      	orrs	r2, r3
   1e324:	68fb      	ldr	r3, [r7, #12]
   1e326:	601a      	str	r2, [r3, #0]
}
   1e328:	46c0      	nop			; (mov r8, r8)
   1e32a:	46bd      	mov	sp, r7
   1e32c:	b004      	add	sp, #16
   1e32e:	bd80      	pop	{r7, pc}
   1e330:	0002793d 	.word	0x0002793d
   1e334:	0001e1c5 	.word	0x0001e1c5
   1e338:	0001e211 	.word	0x0001e211

0001e33c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1e33c:	b580      	push	{r7, lr}
   1e33e:	b082      	sub	sp, #8
   1e340:	af00      	add	r7, sp, #0
   1e342:	6078      	str	r0, [r7, #4]
   1e344:	000a      	movs	r2, r1
   1e346:	1cfb      	adds	r3, r7, #3
   1e348:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1e34a:	687b      	ldr	r3, [r7, #4]
   1e34c:	2231      	movs	r2, #49	; 0x31
   1e34e:	5c9b      	ldrb	r3, [r3, r2]
   1e350:	b25a      	sxtb	r2, r3
   1e352:	1cfb      	adds	r3, r7, #3
   1e354:	781b      	ldrb	r3, [r3, #0]
   1e356:	2101      	movs	r1, #1
   1e358:	4099      	lsls	r1, r3
   1e35a:	000b      	movs	r3, r1
   1e35c:	b25b      	sxtb	r3, r3
   1e35e:	4313      	orrs	r3, r2
   1e360:	b25b      	sxtb	r3, r3
   1e362:	b2d9      	uxtb	r1, r3
   1e364:	687b      	ldr	r3, [r7, #4]
   1e366:	2231      	movs	r2, #49	; 0x31
   1e368:	5499      	strb	r1, [r3, r2]

}
   1e36a:	46c0      	nop			; (mov r8, r8)
   1e36c:	46bd      	mov	sp, r7
   1e36e:	b002      	add	sp, #8
   1e370:	bd80      	pop	{r7, pc}
	...

0001e374 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1e374:	b580      	push	{r7, lr}
   1e376:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1e378:	2380      	movs	r3, #128	; 0x80
   1e37a:	009a      	lsls	r2, r3, #2
   1e37c:	4b0f      	ldr	r3, [pc, #60]	; (1e3bc <InitializeSerialConsole+0x48>)
   1e37e:	0011      	movs	r1, r2
   1e380:	0018      	movs	r0, r3
   1e382:	4b0f      	ldr	r3, [pc, #60]	; (1e3c0 <InitializeSerialConsole+0x4c>)
   1e384:	4798      	blx	r3
   1e386:	0002      	movs	r2, r0
   1e388:	4b0e      	ldr	r3, [pc, #56]	; (1e3c4 <InitializeSerialConsole+0x50>)
   1e38a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1e38c:	2380      	movs	r3, #128	; 0x80
   1e38e:	009a      	lsls	r2, r3, #2
   1e390:	4b0d      	ldr	r3, [pc, #52]	; (1e3c8 <InitializeSerialConsole+0x54>)
   1e392:	0011      	movs	r1, r2
   1e394:	0018      	movs	r0, r3
   1e396:	4b0a      	ldr	r3, [pc, #40]	; (1e3c0 <InitializeSerialConsole+0x4c>)
   1e398:	4798      	blx	r3
   1e39a:	0002      	movs	r2, r0
   1e39c:	4b0b      	ldr	r3, [pc, #44]	; (1e3cc <InitializeSerialConsole+0x58>)
   1e39e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1e3a0:	4b0b      	ldr	r3, [pc, #44]	; (1e3d0 <InitializeSerialConsole+0x5c>)
   1e3a2:	4798      	blx	r3
    configure_usart_callbacks();
   1e3a4:	4b0b      	ldr	r3, [pc, #44]	; (1e3d4 <InitializeSerialConsole+0x60>)
   1e3a6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1e3a8:	490b      	ldr	r1, [pc, #44]	; (1e3d8 <InitializeSerialConsole+0x64>)
   1e3aa:	4b0c      	ldr	r3, [pc, #48]	; (1e3dc <InitializeSerialConsole+0x68>)
   1e3ac:	2201      	movs	r2, #1
   1e3ae:	0018      	movs	r0, r3
   1e3b0:	4b0b      	ldr	r3, [pc, #44]	; (1e3e0 <InitializeSerialConsole+0x6c>)
   1e3b2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1e3b4:	46c0      	nop			; (mov r8, r8)
   1e3b6:	46bd      	mov	sp, r7
   1e3b8:	bd80      	pop	{r7, pc}
   1e3ba:	46c0      	nop			; (mov r8, r8)
   1e3bc:	20005418 	.word	0x20005418
   1e3c0:	0001e0a5 	.word	0x0001e0a5
   1e3c4:	20005210 	.word	0x20005210
   1e3c8:	20005218 	.word	0x20005218
   1e3cc:	2000561c 	.word	0x2000561c
   1e3d0:	0001e549 	.word	0x0001e549
   1e3d4:	0001e5c1 	.word	0x0001e5c1
   1e3d8:	20005214 	.word	0x20005214
   1e3dc:	200051dc 	.word	0x200051dc
   1e3e0:	000291e5 	.word	0x000291e5

0001e3e4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1e3e4:	b580      	push	{r7, lr}
   1e3e6:	b084      	sub	sp, #16
   1e3e8:	af00      	add	r7, sp, #0
   1e3ea:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e3ec:	4b1a      	ldr	r3, [pc, #104]	; (1e458 <SerialConsoleWriteString+0x74>)
   1e3ee:	4798      	blx	r3
    if (string != NULL) {
   1e3f0:	687b      	ldr	r3, [r7, #4]
   1e3f2:	2b00      	cmp	r3, #0
   1e3f4:	d02a      	beq.n	1e44c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e3f6:	2300      	movs	r3, #0
   1e3f8:	60fb      	str	r3, [r7, #12]
   1e3fa:	e00b      	b.n	1e414 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1e3fc:	4b17      	ldr	r3, [pc, #92]	; (1e45c <SerialConsoleWriteString+0x78>)
   1e3fe:	6818      	ldr	r0, [r3, #0]
   1e400:	687a      	ldr	r2, [r7, #4]
   1e402:	68fb      	ldr	r3, [r7, #12]
   1e404:	18d3      	adds	r3, r2, r3
   1e406:	781b      	ldrb	r3, [r3, #0]
   1e408:	0019      	movs	r1, r3
   1e40a:	4b15      	ldr	r3, [pc, #84]	; (1e460 <SerialConsoleWriteString+0x7c>)
   1e40c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1e40e:	68fb      	ldr	r3, [r7, #12]
   1e410:	3301      	adds	r3, #1
   1e412:	60fb      	str	r3, [r7, #12]
   1e414:	687b      	ldr	r3, [r7, #4]
   1e416:	0018      	movs	r0, r3
   1e418:	4b12      	ldr	r3, [pc, #72]	; (1e464 <SerialConsoleWriteString+0x80>)
   1e41a:	4798      	blx	r3
   1e41c:	0002      	movs	r2, r0
   1e41e:	68fb      	ldr	r3, [r7, #12]
   1e420:	429a      	cmp	r2, r3
   1e422:	d8eb      	bhi.n	1e3fc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1e424:	4b10      	ldr	r3, [pc, #64]	; (1e468 <SerialConsoleWriteString+0x84>)
   1e426:	2101      	movs	r1, #1
   1e428:	0018      	movs	r0, r3
   1e42a:	4b10      	ldr	r3, [pc, #64]	; (1e46c <SerialConsoleWriteString+0x88>)
   1e42c:	4798      	blx	r3
   1e42e:	1e03      	subs	r3, r0, #0
   1e430:	d10c      	bne.n	1e44c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1e432:	4b0a      	ldr	r3, [pc, #40]	; (1e45c <SerialConsoleWriteString+0x78>)
   1e434:	681b      	ldr	r3, [r3, #0]
   1e436:	4a0e      	ldr	r2, [pc, #56]	; (1e470 <SerialConsoleWriteString+0x8c>)
   1e438:	0011      	movs	r1, r2
   1e43a:	0018      	movs	r0, r3
   1e43c:	4b0d      	ldr	r3, [pc, #52]	; (1e474 <SerialConsoleWriteString+0x90>)
   1e43e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e440:	490b      	ldr	r1, [pc, #44]	; (1e470 <SerialConsoleWriteString+0x8c>)
   1e442:	4b09      	ldr	r3, [pc, #36]	; (1e468 <SerialConsoleWriteString+0x84>)
   1e444:	2201      	movs	r2, #1
   1e446:	0018      	movs	r0, r3
   1e448:	4b0b      	ldr	r3, [pc, #44]	; (1e478 <SerialConsoleWriteString+0x94>)
   1e44a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1e44c:	4b0b      	ldr	r3, [pc, #44]	; (1e47c <SerialConsoleWriteString+0x98>)
   1e44e:	4798      	blx	r3
}
   1e450:	46c0      	nop			; (mov r8, r8)
   1e452:	46bd      	mov	sp, r7
   1e454:	b004      	add	sp, #16
   1e456:	bd80      	pop	{r7, pc}
   1e458:	0001ca51 	.word	0x0001ca51
   1e45c:	2000561c 	.word	0x2000561c
   1e460:	0001e105 	.word	0x0001e105
   1e464:	00034ff7 	.word	0x00034ff7
   1e468:	200051dc 	.word	0x200051dc
   1e46c:	0002922d 	.word	0x0002922d
   1e470:	20005618 	.word	0x20005618
   1e474:	0001e139 	.word	0x0001e139
   1e478:	0002919d 	.word	0x0002919d
   1e47c:	0001ca69 	.word	0x0001ca69

0001e480 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1e480:	b580      	push	{r7, lr}
   1e482:	b084      	sub	sp, #16
   1e484:	af00      	add	r7, sp, #0
   1e486:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1e488:	4b08      	ldr	r3, [pc, #32]	; (1e4ac <SerialConsoleReadCharacter+0x2c>)
   1e48a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1e48c:	4b08      	ldr	r3, [pc, #32]	; (1e4b0 <SerialConsoleReadCharacter+0x30>)
   1e48e:	681b      	ldr	r3, [r3, #0]
   1e490:	687a      	ldr	r2, [r7, #4]
   1e492:	0011      	movs	r1, r2
   1e494:	0018      	movs	r0, r3
   1e496:	4b07      	ldr	r3, [pc, #28]	; (1e4b4 <SerialConsoleReadCharacter+0x34>)
   1e498:	4798      	blx	r3
   1e49a:	0003      	movs	r3, r0
   1e49c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1e49e:	4b06      	ldr	r3, [pc, #24]	; (1e4b8 <SerialConsoleReadCharacter+0x38>)
   1e4a0:	4798      	blx	r3
    return a;
   1e4a2:	68fb      	ldr	r3, [r7, #12]
}
   1e4a4:	0018      	movs	r0, r3
   1e4a6:	46bd      	mov	sp, r7
   1e4a8:	b004      	add	sp, #16
   1e4aa:	bd80      	pop	{r7, pc}
   1e4ac:	0001ca51 	.word	0x0001ca51
   1e4b0:	20005210 	.word	0x20005210
   1e4b4:	0001e139 	.word	0x0001e139
   1e4b8:	0001ca69 	.word	0x0001ca69

0001e4bc <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1e4bc:	b580      	push	{r7, lr}
   1e4be:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1e4c0:	4b02      	ldr	r3, [pc, #8]	; (1e4cc <getLogLevel+0x10>)
   1e4c2:	781b      	ldrb	r3, [r3, #0]
}
   1e4c4:	0018      	movs	r0, r3
   1e4c6:	46bd      	mov	sp, r7
   1e4c8:	bd80      	pop	{r7, pc}
   1e4ca:	46c0      	nop			; (mov r8, r8)
   1e4cc:	20003e10 	.word	0x20003e10

0001e4d0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1e4d0:	b40e      	push	{r1, r2, r3}
   1e4d2:	b590      	push	{r4, r7, lr}
   1e4d4:	b084      	sub	sp, #16
   1e4d6:	af00      	add	r7, sp, #0
   1e4d8:	0002      	movs	r2, r0
   1e4da:	1dfb      	adds	r3, r7, #7
   1e4dc:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1e4de:	4b0e      	ldr	r3, [pc, #56]	; (1e518 <LogMessage+0x48>)
   1e4e0:	4798      	blx	r3
   1e4e2:	0003      	movs	r3, r0
   1e4e4:	001a      	movs	r2, r3
   1e4e6:	1dfb      	adds	r3, r7, #7
   1e4e8:	781b      	ldrb	r3, [r3, #0]
   1e4ea:	4293      	cmp	r3, r2
   1e4ec:	d30c      	bcc.n	1e508 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1e4ee:	2320      	movs	r3, #32
   1e4f0:	18fb      	adds	r3, r7, r3
   1e4f2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1e4f4:	68fb      	ldr	r3, [r7, #12]
   1e4f6:	69fa      	ldr	r2, [r7, #28]
   1e4f8:	4808      	ldr	r0, [pc, #32]	; (1e51c <LogMessage+0x4c>)
   1e4fa:	217f      	movs	r1, #127	; 0x7f
   1e4fc:	4c08      	ldr	r4, [pc, #32]	; (1e520 <LogMessage+0x50>)
   1e4fe:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1e500:	4b06      	ldr	r3, [pc, #24]	; (1e51c <LogMessage+0x4c>)
   1e502:	0018      	movs	r0, r3
   1e504:	4b07      	ldr	r3, [pc, #28]	; (1e524 <LogMessage+0x54>)
   1e506:	4798      	blx	r3
        va_end(ap);
    }
};
   1e508:	46c0      	nop			; (mov r8, r8)
   1e50a:	46bd      	mov	sp, r7
   1e50c:	b004      	add	sp, #16
   1e50e:	bc90      	pop	{r4, r7}
   1e510:	bc08      	pop	{r3}
   1e512:	b003      	add	sp, #12
   1e514:	4718      	bx	r3
   1e516:	46c0      	nop			; (mov r8, r8)
   1e518:	0001e4bd 	.word	0x0001e4bd
   1e51c:	2000515c 	.word	0x2000515c
   1e520:	00035231 	.word	0x00035231
   1e524:	0001e3e5 	.word	0x0001e3e5

0001e528 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1e528:	b40f      	push	{r0, r1, r2, r3}
   1e52a:	b580      	push	{r7, lr}
   1e52c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1e52e:	68bb      	ldr	r3, [r7, #8]
   1e530:	0019      	movs	r1, r3
   1e532:	2001      	movs	r0, #1
   1e534:	4b03      	ldr	r3, [pc, #12]	; (1e544 <LogMessageDebug+0x1c>)
   1e536:	4798      	blx	r3
};
   1e538:	46c0      	nop			; (mov r8, r8)
   1e53a:	46bd      	mov	sp, r7
   1e53c:	bc80      	pop	{r7}
   1e53e:	bc08      	pop	{r3}
   1e540:	b004      	add	sp, #16
   1e542:	4718      	bx	r3
   1e544:	0001e4d1 	.word	0x0001e4d1

0001e548 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1e548:	b580      	push	{r7, lr}
   1e54a:	b090      	sub	sp, #64	; 0x40
   1e54c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1e54e:	003b      	movs	r3, r7
   1e550:	0018      	movs	r0, r3
   1e552:	4b14      	ldr	r3, [pc, #80]	; (1e5a4 <configure_usart+0x5c>)
   1e554:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1e556:	003b      	movs	r3, r7
   1e558:	22e1      	movs	r2, #225	; 0xe1
   1e55a:	0252      	lsls	r2, r2, #9
   1e55c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1e55e:	003b      	movs	r3, r7
   1e560:	22c4      	movs	r2, #196	; 0xc4
   1e562:	0392      	lsls	r2, r2, #14
   1e564:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1e566:	003b      	movs	r3, r7
   1e568:	2201      	movs	r2, #1
   1e56a:	4252      	negs	r2, r2
   1e56c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1e56e:	003b      	movs	r3, r7
   1e570:	2201      	movs	r2, #1
   1e572:	4252      	negs	r2, r2
   1e574:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1e576:	003b      	movs	r3, r7
   1e578:	4a0b      	ldr	r2, [pc, #44]	; (1e5a8 <configure_usart+0x60>)
   1e57a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1e57c:	003b      	movs	r3, r7
   1e57e:	4a0b      	ldr	r2, [pc, #44]	; (1e5ac <configure_usart+0x64>)
   1e580:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1e582:	46c0      	nop			; (mov r8, r8)
   1e584:	003a      	movs	r2, r7
   1e586:	490a      	ldr	r1, [pc, #40]	; (1e5b0 <configure_usart+0x68>)
   1e588:	4b0a      	ldr	r3, [pc, #40]	; (1e5b4 <configure_usart+0x6c>)
   1e58a:	0018      	movs	r0, r3
   1e58c:	4b0a      	ldr	r3, [pc, #40]	; (1e5b8 <configure_usart+0x70>)
   1e58e:	4798      	blx	r3
   1e590:	1e03      	subs	r3, r0, #0
   1e592:	d1f7      	bne.n	1e584 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1e594:	4b07      	ldr	r3, [pc, #28]	; (1e5b4 <configure_usart+0x6c>)
   1e596:	0018      	movs	r0, r3
   1e598:	4b08      	ldr	r3, [pc, #32]	; (1e5bc <configure_usart+0x74>)
   1e59a:	4798      	blx	r3
}
   1e59c:	46c0      	nop			; (mov r8, r8)
   1e59e:	46bd      	mov	sp, r7
   1e5a0:	b010      	add	sp, #64	; 0x40
   1e5a2:	bd80      	pop	{r7, pc}
   1e5a4:	0001e235 	.word	0x0001e235
   1e5a8:	002a0003 	.word	0x002a0003
   1e5ac:	002b0003 	.word	0x002b0003
   1e5b0:	42001800 	.word	0x42001800
   1e5b4:	200051dc 	.word	0x200051dc
   1e5b8:	00028da1 	.word	0x00028da1
   1e5bc:	0001e2f5 	.word	0x0001e2f5

0001e5c0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1e5c0:	b580      	push	{r7, lr}
   1e5c2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e5c4:	490c      	ldr	r1, [pc, #48]	; (1e5f8 <configure_usart_callbacks+0x38>)
   1e5c6:	4b0d      	ldr	r3, [pc, #52]	; (1e5fc <configure_usart_callbacks+0x3c>)
   1e5c8:	2200      	movs	r2, #0
   1e5ca:	0018      	movs	r0, r3
   1e5cc:	4b0c      	ldr	r3, [pc, #48]	; (1e600 <configure_usart_callbacks+0x40>)
   1e5ce:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1e5d0:	490c      	ldr	r1, [pc, #48]	; (1e604 <configure_usart_callbacks+0x44>)
   1e5d2:	4b0a      	ldr	r3, [pc, #40]	; (1e5fc <configure_usart_callbacks+0x3c>)
   1e5d4:	2201      	movs	r2, #1
   1e5d6:	0018      	movs	r0, r3
   1e5d8:	4b09      	ldr	r3, [pc, #36]	; (1e600 <configure_usart_callbacks+0x40>)
   1e5da:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1e5dc:	4b07      	ldr	r3, [pc, #28]	; (1e5fc <configure_usart_callbacks+0x3c>)
   1e5de:	2100      	movs	r1, #0
   1e5e0:	0018      	movs	r0, r3
   1e5e2:	4b09      	ldr	r3, [pc, #36]	; (1e608 <configure_usart_callbacks+0x48>)
   1e5e4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1e5e6:	4b05      	ldr	r3, [pc, #20]	; (1e5fc <configure_usart_callbacks+0x3c>)
   1e5e8:	2101      	movs	r1, #1
   1e5ea:	0018      	movs	r0, r3
   1e5ec:	4b06      	ldr	r3, [pc, #24]	; (1e608 <configure_usart_callbacks+0x48>)
   1e5ee:	4798      	blx	r3
}
   1e5f0:	46c0      	nop			; (mov r8, r8)
   1e5f2:	46bd      	mov	sp, r7
   1e5f4:	bd80      	pop	{r7, pc}
   1e5f6:	46c0      	nop			; (mov r8, r8)
   1e5f8:	0001e655 	.word	0x0001e655
   1e5fc:	200051dc 	.word	0x200051dc
   1e600:	00029155 	.word	0x00029155
   1e604:	0001e60d 	.word	0x0001e60d
   1e608:	0001e33d 	.word	0x0001e33d

0001e60c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1e60c:	b580      	push	{r7, lr}
   1e60e:	b082      	sub	sp, #8
   1e610:	af00      	add	r7, sp, #0
   1e612:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1e614:	4b09      	ldr	r3, [pc, #36]	; (1e63c <usart_read_callback+0x30>)
   1e616:	681a      	ldr	r2, [r3, #0]
   1e618:	4b09      	ldr	r3, [pc, #36]	; (1e640 <usart_read_callback+0x34>)
   1e61a:	781b      	ldrb	r3, [r3, #0]
   1e61c:	0019      	movs	r1, r3
   1e61e:	0010      	movs	r0, r2
   1e620:	4b08      	ldr	r3, [pc, #32]	; (1e644 <usart_read_callback+0x38>)
   1e622:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1e624:	4906      	ldr	r1, [pc, #24]	; (1e640 <usart_read_callback+0x34>)
   1e626:	4b08      	ldr	r3, [pc, #32]	; (1e648 <usart_read_callback+0x3c>)
   1e628:	2201      	movs	r2, #1
   1e62a:	0018      	movs	r0, r3
   1e62c:	4b07      	ldr	r3, [pc, #28]	; (1e64c <usart_read_callback+0x40>)
   1e62e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1e630:	4b07      	ldr	r3, [pc, #28]	; (1e650 <usart_read_callback+0x44>)
   1e632:	4798      	blx	r3
}
   1e634:	46c0      	nop			; (mov r8, r8)
   1e636:	46bd      	mov	sp, r7
   1e638:	b002      	add	sp, #8
   1e63a:	bd80      	pop	{r7, pc}
   1e63c:	20005210 	.word	0x20005210
   1e640:	20005214 	.word	0x20005214
   1e644:	0001e105 	.word	0x0001e105
   1e648:	200051dc 	.word	0x200051dc
   1e64c:	000291e5 	.word	0x000291e5
   1e650:	000131b1 	.word	0x000131b1

0001e654 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1e654:	b580      	push	{r7, lr}
   1e656:	b082      	sub	sp, #8
   1e658:	af00      	add	r7, sp, #0
   1e65a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1e65c:	4b09      	ldr	r3, [pc, #36]	; (1e684 <usart_write_callback+0x30>)
   1e65e:	681b      	ldr	r3, [r3, #0]
   1e660:	4a09      	ldr	r2, [pc, #36]	; (1e688 <usart_write_callback+0x34>)
   1e662:	0011      	movs	r1, r2
   1e664:	0018      	movs	r0, r3
   1e666:	4b09      	ldr	r3, [pc, #36]	; (1e68c <usart_write_callback+0x38>)
   1e668:	4798      	blx	r3
   1e66a:	0003      	movs	r3, r0
   1e66c:	3301      	adds	r3, #1
   1e66e:	d005      	beq.n	1e67c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1e670:	4905      	ldr	r1, [pc, #20]	; (1e688 <usart_write_callback+0x34>)
   1e672:	4b07      	ldr	r3, [pc, #28]	; (1e690 <usart_write_callback+0x3c>)
   1e674:	2201      	movs	r2, #1
   1e676:	0018      	movs	r0, r3
   1e678:	4b06      	ldr	r3, [pc, #24]	; (1e694 <usart_write_callback+0x40>)
   1e67a:	4798      	blx	r3
    }
}
   1e67c:	46c0      	nop			; (mov r8, r8)
   1e67e:	46bd      	mov	sp, r7
   1e680:	b002      	add	sp, #8
   1e682:	bd80      	pop	{r7, pc}
   1e684:	2000561c 	.word	0x2000561c
   1e688:	20005618 	.word	0x20005618
   1e68c:	0001e139 	.word	0x0001e139
   1e690:	200051dc 	.word	0x200051dc
   1e694:	0002919d 	.word	0x0002919d

0001e698 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1e698:	b590      	push	{r4, r7, lr}
   1e69a:	b087      	sub	sp, #28
   1e69c:	af00      	add	r7, sp, #0
   1e69e:	60f8      	str	r0, [r7, #12]
   1e6a0:	000c      	movs	r4, r1
   1e6a2:	0010      	movs	r0, r2
   1e6a4:	0019      	movs	r1, r3
   1e6a6:	230a      	movs	r3, #10
   1e6a8:	18fb      	adds	r3, r7, r3
   1e6aa:	1c22      	adds	r2, r4, #0
   1e6ac:	801a      	strh	r2, [r3, #0]
   1e6ae:	2308      	movs	r3, #8
   1e6b0:	18fb      	adds	r3, r7, r3
   1e6b2:	1c02      	adds	r2, r0, #0
   1e6b4:	801a      	strh	r2, [r3, #0]
   1e6b6:	1dfb      	adds	r3, r7, #7
   1e6b8:	1c0a      	adds	r2, r1, #0
   1e6ba:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1e6bc:	230a      	movs	r3, #10
   1e6be:	18fb      	adds	r3, r7, r3
   1e6c0:	881a      	ldrh	r2, [r3, #0]
   1e6c2:	2308      	movs	r3, #8
   1e6c4:	18fb      	adds	r3, r7, r3
   1e6c6:	881b      	ldrh	r3, [r3, #0]
   1e6c8:	1ad3      	subs	r3, r2, r3
   1e6ca:	3307      	adds	r3, #7
   1e6cc:	2b00      	cmp	r3, #0
   1e6ce:	da00      	bge.n	1e6d2 <SDMMC_UNSTUFF_BITS+0x3a>
   1e6d0:	3307      	adds	r3, #7
   1e6d2:	10db      	asrs	r3, r3, #3
   1e6d4:	3b01      	subs	r3, #1
   1e6d6:	68fa      	ldr	r2, [r7, #12]
   1e6d8:	18d3      	adds	r3, r2, r3
   1e6da:	781b      	ldrb	r3, [r3, #0]
   1e6dc:	0019      	movs	r1, r3
   1e6de:	2308      	movs	r3, #8
   1e6e0:	18fb      	adds	r3, r7, r3
   1e6e2:	881b      	ldrh	r3, [r3, #0]
   1e6e4:	2207      	movs	r2, #7
   1e6e6:	4013      	ands	r3, r2
   1e6e8:	4119      	asrs	r1, r3
   1e6ea:	000b      	movs	r3, r1
   1e6ec:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1e6ee:	2308      	movs	r3, #8
   1e6f0:	18fb      	adds	r3, r7, r3
   1e6f2:	881b      	ldrh	r3, [r3, #0]
   1e6f4:	2207      	movs	r2, #7
   1e6f6:	401a      	ands	r2, r3
   1e6f8:	1dfb      	adds	r3, r7, #7
   1e6fa:	781b      	ldrb	r3, [r3, #0]
   1e6fc:	18d3      	adds	r3, r2, r3
   1e6fe:	2b08      	cmp	r3, #8
   1e700:	dd1c      	ble.n	1e73c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1e702:	230a      	movs	r3, #10
   1e704:	18fb      	adds	r3, r7, r3
   1e706:	881a      	ldrh	r2, [r3, #0]
   1e708:	2308      	movs	r3, #8
   1e70a:	18fb      	adds	r3, r7, r3
   1e70c:	881b      	ldrh	r3, [r3, #0]
   1e70e:	1ad3      	subs	r3, r2, r3
   1e710:	3307      	adds	r3, #7
   1e712:	2b00      	cmp	r3, #0
   1e714:	da00      	bge.n	1e718 <SDMMC_UNSTUFF_BITS+0x80>
   1e716:	3307      	adds	r3, #7
   1e718:	10db      	asrs	r3, r3, #3
   1e71a:	3b02      	subs	r3, #2
   1e71c:	68fa      	ldr	r2, [r7, #12]
   1e71e:	18d3      	adds	r3, r2, r3
   1e720:	781b      	ldrb	r3, [r3, #0]
   1e722:	0019      	movs	r1, r3
   1e724:	2308      	movs	r3, #8
   1e726:	18fb      	adds	r3, r7, r3
   1e728:	881b      	ldrh	r3, [r3, #0]
   1e72a:	2207      	movs	r2, #7
   1e72c:	4013      	ands	r3, r2
   1e72e:	2208      	movs	r2, #8
   1e730:	1ad3      	subs	r3, r2, r3
   1e732:	4099      	lsls	r1, r3
   1e734:	000b      	movs	r3, r1
   1e736:	697a      	ldr	r2, [r7, #20]
   1e738:	4313      	orrs	r3, r2
   1e73a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e73c:	2308      	movs	r3, #8
   1e73e:	18fb      	adds	r3, r7, r3
   1e740:	881b      	ldrh	r3, [r3, #0]
   1e742:	2207      	movs	r2, #7
   1e744:	401a      	ands	r2, r3
   1e746:	1dfb      	adds	r3, r7, #7
   1e748:	781b      	ldrb	r3, [r3, #0]
   1e74a:	18d3      	adds	r3, r2, r3
   1e74c:	2b10      	cmp	r3, #16
   1e74e:	dd1c      	ble.n	1e78a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e750:	230a      	movs	r3, #10
   1e752:	18fb      	adds	r3, r7, r3
   1e754:	881a      	ldrh	r2, [r3, #0]
   1e756:	2308      	movs	r3, #8
   1e758:	18fb      	adds	r3, r7, r3
   1e75a:	881b      	ldrh	r3, [r3, #0]
   1e75c:	1ad3      	subs	r3, r2, r3
   1e75e:	3307      	adds	r3, #7
   1e760:	2b00      	cmp	r3, #0
   1e762:	da00      	bge.n	1e766 <SDMMC_UNSTUFF_BITS+0xce>
   1e764:	3307      	adds	r3, #7
   1e766:	10db      	asrs	r3, r3, #3
   1e768:	3b03      	subs	r3, #3
   1e76a:	68fa      	ldr	r2, [r7, #12]
   1e76c:	18d3      	adds	r3, r2, r3
   1e76e:	781b      	ldrb	r3, [r3, #0]
   1e770:	0019      	movs	r1, r3
   1e772:	2308      	movs	r3, #8
   1e774:	18fb      	adds	r3, r7, r3
   1e776:	881b      	ldrh	r3, [r3, #0]
   1e778:	2207      	movs	r2, #7
   1e77a:	4013      	ands	r3, r2
   1e77c:	2210      	movs	r2, #16
   1e77e:	1ad3      	subs	r3, r2, r3
   1e780:	4099      	lsls	r1, r3
   1e782:	000b      	movs	r3, r1
   1e784:	697a      	ldr	r2, [r7, #20]
   1e786:	4313      	orrs	r3, r2
   1e788:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1e78a:	2308      	movs	r3, #8
   1e78c:	18fb      	adds	r3, r7, r3
   1e78e:	881b      	ldrh	r3, [r3, #0]
   1e790:	2207      	movs	r2, #7
   1e792:	401a      	ands	r2, r3
   1e794:	1dfb      	adds	r3, r7, #7
   1e796:	781b      	ldrb	r3, [r3, #0]
   1e798:	18d3      	adds	r3, r2, r3
   1e79a:	2b10      	cmp	r3, #16
   1e79c:	dd1c      	ble.n	1e7d8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1e79e:	230a      	movs	r3, #10
   1e7a0:	18fb      	adds	r3, r7, r3
   1e7a2:	881a      	ldrh	r2, [r3, #0]
   1e7a4:	2308      	movs	r3, #8
   1e7a6:	18fb      	adds	r3, r7, r3
   1e7a8:	881b      	ldrh	r3, [r3, #0]
   1e7aa:	1ad3      	subs	r3, r2, r3
   1e7ac:	3307      	adds	r3, #7
   1e7ae:	2b00      	cmp	r3, #0
   1e7b0:	da00      	bge.n	1e7b4 <SDMMC_UNSTUFF_BITS+0x11c>
   1e7b2:	3307      	adds	r3, #7
   1e7b4:	10db      	asrs	r3, r3, #3
   1e7b6:	3b03      	subs	r3, #3
   1e7b8:	68fa      	ldr	r2, [r7, #12]
   1e7ba:	18d3      	adds	r3, r2, r3
   1e7bc:	781b      	ldrb	r3, [r3, #0]
   1e7be:	0019      	movs	r1, r3
   1e7c0:	2308      	movs	r3, #8
   1e7c2:	18fb      	adds	r3, r7, r3
   1e7c4:	881b      	ldrh	r3, [r3, #0]
   1e7c6:	2207      	movs	r2, #7
   1e7c8:	4013      	ands	r3, r2
   1e7ca:	2210      	movs	r2, #16
   1e7cc:	1ad3      	subs	r3, r2, r3
   1e7ce:	4099      	lsls	r1, r3
   1e7d0:	000b      	movs	r3, r1
   1e7d2:	697a      	ldr	r2, [r7, #20]
   1e7d4:	4313      	orrs	r3, r2
   1e7d6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1e7d8:	1dfb      	adds	r3, r7, #7
   1e7da:	781b      	ldrb	r3, [r3, #0]
   1e7dc:	2201      	movs	r2, #1
   1e7de:	409a      	lsls	r2, r3
   1e7e0:	0013      	movs	r3, r2
   1e7e2:	1e5a      	subs	r2, r3, #1
   1e7e4:	697b      	ldr	r3, [r7, #20]
   1e7e6:	4013      	ands	r3, r2
   1e7e8:	617b      	str	r3, [r7, #20]
	return value;
   1e7ea:	697b      	ldr	r3, [r7, #20]
}
   1e7ec:	0018      	movs	r0, r3
   1e7ee:	46bd      	mov	sp, r7
   1e7f0:	b007      	add	sp, #28
   1e7f2:	bd90      	pop	{r4, r7, pc}

0001e7f4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1e7f4:	b580      	push	{r7, lr}
   1e7f6:	b082      	sub	sp, #8
   1e7f8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e7fa:	4b23      	ldr	r3, [pc, #140]	; (1e888 <mmc_spi_op_cond+0x94>)
   1e7fc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1e7fe:	4b23      	ldr	r3, [pc, #140]	; (1e88c <mmc_spi_op_cond+0x98>)
   1e800:	2100      	movs	r1, #0
   1e802:	0018      	movs	r0, r3
   1e804:	4b22      	ldr	r3, [pc, #136]	; (1e890 <mmc_spi_op_cond+0x9c>)
   1e806:	4798      	blx	r3
   1e808:	0003      	movs	r3, r0
   1e80a:	001a      	movs	r2, r3
   1e80c:	2301      	movs	r3, #1
   1e80e:	4053      	eors	r3, r2
   1e810:	b2db      	uxtb	r3, r3
   1e812:	2b00      	cmp	r3, #0
   1e814:	d001      	beq.n	1e81a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1e816:	2300      	movs	r3, #0
   1e818:	e031      	b.n	1e87e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1e81a:	4b1e      	ldr	r3, [pc, #120]	; (1e894 <mmc_spi_op_cond+0xa0>)
   1e81c:	4798      	blx	r3
   1e81e:	0003      	movs	r3, r0
   1e820:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1e822:	683b      	ldr	r3, [r7, #0]
   1e824:	2201      	movs	r2, #1
   1e826:	4013      	ands	r3, r2
   1e828:	d006      	beq.n	1e838 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1e82a:	687b      	ldr	r3, [r7, #4]
   1e82c:	1e5a      	subs	r2, r3, #1
   1e82e:	607a      	str	r2, [r7, #4]
   1e830:	2b00      	cmp	r3, #0
   1e832:	d1e4      	bne.n	1e7fe <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1e834:	2300      	movs	r3, #0
   1e836:	e022      	b.n	1e87e <mmc_spi_op_cond+0x8a>
			break;
   1e838:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e83a:	4b17      	ldr	r3, [pc, #92]	; (1e898 <mmc_spi_op_cond+0xa4>)
   1e83c:	2100      	movs	r1, #0
   1e83e:	0018      	movs	r0, r3
   1e840:	4b13      	ldr	r3, [pc, #76]	; (1e890 <mmc_spi_op_cond+0x9c>)
   1e842:	4798      	blx	r3
   1e844:	0003      	movs	r3, r0
   1e846:	001a      	movs	r2, r3
   1e848:	2301      	movs	r3, #1
   1e84a:	4053      	eors	r3, r2
   1e84c:	b2db      	uxtb	r3, r3
   1e84e:	2b00      	cmp	r3, #0
   1e850:	d001      	beq.n	1e856 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e852:	2300      	movs	r3, #0
   1e854:	e013      	b.n	1e87e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1e856:	4b0f      	ldr	r3, [pc, #60]	; (1e894 <mmc_spi_op_cond+0xa0>)
   1e858:	4798      	blx	r3
   1e85a:	0002      	movs	r2, r0
   1e85c:	23c0      	movs	r3, #192	; 0xc0
   1e85e:	05db      	lsls	r3, r3, #23
   1e860:	401a      	ands	r2, r3
   1e862:	2380      	movs	r3, #128	; 0x80
   1e864:	05db      	lsls	r3, r3, #23
   1e866:	429a      	cmp	r2, r3
   1e868:	d108      	bne.n	1e87c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e86a:	4b0c      	ldr	r3, [pc, #48]	; (1e89c <mmc_spi_op_cond+0xa8>)
   1e86c:	681a      	ldr	r2, [r3, #0]
   1e86e:	4b0b      	ldr	r3, [pc, #44]	; (1e89c <mmc_spi_op_cond+0xa8>)
   1e870:	681b      	ldr	r3, [r3, #0]
   1e872:	7adb      	ldrb	r3, [r3, #11]
   1e874:	2108      	movs	r1, #8
   1e876:	430b      	orrs	r3, r1
   1e878:	b2db      	uxtb	r3, r3
   1e87a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e87c:	2301      	movs	r3, #1
}
   1e87e:	0018      	movs	r0, r3
   1e880:	46bd      	mov	sp, r7
   1e882:	b002      	add	sp, #8
   1e884:	bd80      	pop	{r7, pc}
   1e886:	46c0      	nop			; (mov r8, r8)
   1e888:	00001bee 	.word	0x00001bee
   1e88c:	00001101 	.word	0x00001101
   1e890:	0001feb5 	.word	0x0001feb5
   1e894:	000200f5 	.word	0x000200f5
   1e898:	0000053a 	.word	0x0000053a
   1e89c:	20003e38 	.word	0x20003e38

0001e8a0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1e8a0:	b580      	push	{r7, lr}
   1e8a2:	b086      	sub	sp, #24
   1e8a4:	af00      	add	r7, sp, #0
   1e8a6:	0002      	movs	r2, r0
   1e8a8:	1dfb      	adds	r3, r7, #7
   1e8aa:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1e8ac:	4b2e      	ldr	r3, [pc, #184]	; (1e968 <sd_spi_op_cond+0xc8>)
   1e8ae:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1e8b0:	4b2e      	ldr	r3, [pc, #184]	; (1e96c <sd_spi_op_cond+0xcc>)
   1e8b2:	2100      	movs	r1, #0
   1e8b4:	0018      	movs	r0, r3
   1e8b6:	4b2e      	ldr	r3, [pc, #184]	; (1e970 <sd_spi_op_cond+0xd0>)
   1e8b8:	4798      	blx	r3
   1e8ba:	0003      	movs	r3, r0
   1e8bc:	001a      	movs	r2, r3
   1e8be:	2301      	movs	r3, #1
   1e8c0:	4053      	eors	r3, r2
   1e8c2:	b2db      	uxtb	r3, r3
   1e8c4:	2b00      	cmp	r3, #0
   1e8c6:	d001      	beq.n	1e8cc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1e8c8:	2300      	movs	r3, #0
   1e8ca:	e048      	b.n	1e95e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1e8cc:	2300      	movs	r3, #0
   1e8ce:	617b      	str	r3, [r7, #20]
		if (v2) {
   1e8d0:	1dfb      	adds	r3, r7, #7
   1e8d2:	781b      	ldrb	r3, [r3, #0]
   1e8d4:	2b00      	cmp	r3, #0
   1e8d6:	d004      	beq.n	1e8e2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1e8d8:	697b      	ldr	r3, [r7, #20]
   1e8da:	2280      	movs	r2, #128	; 0x80
   1e8dc:	05d2      	lsls	r2, r2, #23
   1e8de:	4313      	orrs	r3, r2
   1e8e0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1e8e2:	697b      	ldr	r3, [r7, #20]
   1e8e4:	4a23      	ldr	r2, [pc, #140]	; (1e974 <sd_spi_op_cond+0xd4>)
   1e8e6:	0019      	movs	r1, r3
   1e8e8:	0010      	movs	r0, r2
   1e8ea:	4b21      	ldr	r3, [pc, #132]	; (1e970 <sd_spi_op_cond+0xd0>)
   1e8ec:	4798      	blx	r3
   1e8ee:	0003      	movs	r3, r0
   1e8f0:	001a      	movs	r2, r3
   1e8f2:	2301      	movs	r3, #1
   1e8f4:	4053      	eors	r3, r2
   1e8f6:	b2db      	uxtb	r3, r3
   1e8f8:	2b00      	cmp	r3, #0
   1e8fa:	d001      	beq.n	1e900 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1e8fc:	2300      	movs	r3, #0
   1e8fe:	e02e      	b.n	1e95e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1e900:	4b1d      	ldr	r3, [pc, #116]	; (1e978 <sd_spi_op_cond+0xd8>)
   1e902:	4798      	blx	r3
   1e904:	0003      	movs	r3, r0
   1e906:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1e908:	68fb      	ldr	r3, [r7, #12]
   1e90a:	2201      	movs	r2, #1
   1e90c:	4013      	ands	r3, r2
   1e90e:	d006      	beq.n	1e91e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1e910:	693b      	ldr	r3, [r7, #16]
   1e912:	1e5a      	subs	r2, r3, #1
   1e914:	613a      	str	r2, [r7, #16]
   1e916:	2b00      	cmp	r3, #0
   1e918:	d1ca      	bne.n	1e8b0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1e91a:	2300      	movs	r3, #0
   1e91c:	e01f      	b.n	1e95e <sd_spi_op_cond+0xbe>
			break;
   1e91e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1e920:	4b16      	ldr	r3, [pc, #88]	; (1e97c <sd_spi_op_cond+0xdc>)
   1e922:	2100      	movs	r1, #0
   1e924:	0018      	movs	r0, r3
   1e926:	4b12      	ldr	r3, [pc, #72]	; (1e970 <sd_spi_op_cond+0xd0>)
   1e928:	4798      	blx	r3
   1e92a:	0003      	movs	r3, r0
   1e92c:	001a      	movs	r2, r3
   1e92e:	2301      	movs	r3, #1
   1e930:	4053      	eors	r3, r2
   1e932:	b2db      	uxtb	r3, r3
   1e934:	2b00      	cmp	r3, #0
   1e936:	d001      	beq.n	1e93c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1e938:	2300      	movs	r3, #0
   1e93a:	e010      	b.n	1e95e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1e93c:	4b0e      	ldr	r3, [pc, #56]	; (1e978 <sd_spi_op_cond+0xd8>)
   1e93e:	4798      	blx	r3
   1e940:	0002      	movs	r2, r0
   1e942:	2380      	movs	r3, #128	; 0x80
   1e944:	05db      	lsls	r3, r3, #23
   1e946:	4013      	ands	r3, r2
   1e948:	d008      	beq.n	1e95c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1e94a:	4b0d      	ldr	r3, [pc, #52]	; (1e980 <sd_spi_op_cond+0xe0>)
   1e94c:	681a      	ldr	r2, [r3, #0]
   1e94e:	4b0c      	ldr	r3, [pc, #48]	; (1e980 <sd_spi_op_cond+0xe0>)
   1e950:	681b      	ldr	r3, [r3, #0]
   1e952:	7adb      	ldrb	r3, [r3, #11]
   1e954:	2108      	movs	r1, #8
   1e956:	430b      	orrs	r3, r1
   1e958:	b2db      	uxtb	r3, r3
   1e95a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1e95c:	2301      	movs	r3, #1
}
   1e95e:	0018      	movs	r0, r3
   1e960:	46bd      	mov	sp, r7
   1e962:	b006      	add	sp, #24
   1e964:	bd80      	pop	{r7, pc}
   1e966:	46c0      	nop			; (mov r8, r8)
   1e968:	00001bee 	.word	0x00001bee
   1e96c:	00001137 	.word	0x00001137
   1e970:	0001feb5 	.word	0x0001feb5
   1e974:	00001129 	.word	0x00001129
   1e978:	000200f5 	.word	0x000200f5
   1e97c:	0000053a 	.word	0x0000053a
   1e980:	20003e38 	.word	0x20003e38

0001e984 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1e984:	b580      	push	{r7, lr}
   1e986:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1e988:	2301      	movs	r3, #1
}
   1e98a:	0018      	movs	r0, r3
   1e98c:	46bd      	mov	sp, r7
   1e98e:	bd80      	pop	{r7, pc}

0001e990 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1e990:	b580      	push	{r7, lr}
   1e992:	b084      	sub	sp, #16
   1e994:	af00      	add	r7, sp, #0
   1e996:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1e998:	687b      	ldr	r3, [r7, #4]
   1e99a:	2200      	movs	r2, #0
   1e99c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1e99e:	23d5      	movs	r3, #213	; 0xd5
   1e9a0:	005b      	lsls	r3, r3, #1
   1e9a2:	4a14      	ldr	r2, [pc, #80]	; (1e9f4 <sd_cmd8+0x64>)
   1e9a4:	0019      	movs	r1, r3
   1e9a6:	0010      	movs	r0, r2
   1e9a8:	4b13      	ldr	r3, [pc, #76]	; (1e9f8 <sd_cmd8+0x68>)
   1e9aa:	4798      	blx	r3
   1e9ac:	0003      	movs	r3, r0
   1e9ae:	001a      	movs	r2, r3
   1e9b0:	2301      	movs	r3, #1
   1e9b2:	4053      	eors	r3, r2
   1e9b4:	b2db      	uxtb	r3, r3
   1e9b6:	2b00      	cmp	r3, #0
   1e9b8:	d001      	beq.n	1e9be <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1e9ba:	2301      	movs	r3, #1
   1e9bc:	e015      	b.n	1e9ea <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1e9be:	4b0f      	ldr	r3, [pc, #60]	; (1e9fc <sd_cmd8+0x6c>)
   1e9c0:	4798      	blx	r3
   1e9c2:	0003      	movs	r3, r0
   1e9c4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1e9c6:	68fb      	ldr	r3, [r7, #12]
   1e9c8:	3301      	adds	r3, #1
   1e9ca:	d101      	bne.n	1e9d0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1e9cc:	2301      	movs	r3, #1
   1e9ce:	e00c      	b.n	1e9ea <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1e9d0:	68fb      	ldr	r3, [r7, #12]
   1e9d2:	051b      	lsls	r3, r3, #20
   1e9d4:	0d1a      	lsrs	r2, r3, #20
   1e9d6:	23d5      	movs	r3, #213	; 0xd5
   1e9d8:	005b      	lsls	r3, r3, #1
   1e9da:	429a      	cmp	r2, r3
   1e9dc:	d001      	beq.n	1e9e2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1e9de:	2300      	movs	r3, #0
   1e9e0:	e003      	b.n	1e9ea <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1e9e2:	687b      	ldr	r3, [r7, #4]
   1e9e4:	2201      	movs	r2, #1
   1e9e6:	701a      	strb	r2, [r3, #0]
	return true;
   1e9e8:	2301      	movs	r3, #1
}
   1e9ea:	0018      	movs	r0, r3
   1e9ec:	46bd      	mov	sp, r7
   1e9ee:	b004      	add	sp, #16
   1e9f0:	bd80      	pop	{r7, pc}
   1e9f2:	46c0      	nop			; (mov r8, r8)
   1e9f4:	00005508 	.word	0x00005508
   1e9f8:	0001feb5 	.word	0x0001feb5
   1e9fc:	000200f5 	.word	0x000200f5

0001ea00 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1ea00:	b590      	push	{r4, r7, lr}
   1ea02:	b089      	sub	sp, #36	; 0x24
   1ea04:	af02      	add	r7, sp, #8
   1ea06:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1ea08:	2380      	movs	r3, #128	; 0x80
   1ea0a:	009a      	lsls	r2, r3, #2
   1ea0c:	4841      	ldr	r0, [pc, #260]	; (1eb14 <mmc_cmd8+0x114>)
   1ea0e:	2300      	movs	r3, #0
   1ea10:	9300      	str	r3, [sp, #0]
   1ea12:	2301      	movs	r3, #1
   1ea14:	2100      	movs	r1, #0
   1ea16:	4c40      	ldr	r4, [pc, #256]	; (1eb18 <mmc_cmd8+0x118>)
   1ea18:	47a0      	blx	r4
   1ea1a:	0003      	movs	r3, r0
   1ea1c:	001a      	movs	r2, r3
   1ea1e:	2301      	movs	r3, #1
   1ea20:	4053      	eors	r3, r2
   1ea22:	b2db      	uxtb	r3, r3
   1ea24:	2b00      	cmp	r3, #0
   1ea26:	d001      	beq.n	1ea2c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1ea28:	2300      	movs	r3, #0
   1ea2a:	e06e      	b.n	1eb0a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ea2c:	2316      	movs	r3, #22
   1ea2e:	18fb      	adds	r3, r7, r3
   1ea30:	2200      	movs	r2, #0
   1ea32:	801a      	strh	r2, [r3, #0]
   1ea34:	e014      	b.n	1ea60 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1ea36:	2310      	movs	r3, #16
   1ea38:	18fb      	adds	r3, r7, r3
   1ea3a:	0018      	movs	r0, r3
   1ea3c:	4b37      	ldr	r3, [pc, #220]	; (1eb1c <mmc_cmd8+0x11c>)
   1ea3e:	4798      	blx	r3
   1ea40:	0003      	movs	r3, r0
   1ea42:	001a      	movs	r2, r3
   1ea44:	2301      	movs	r3, #1
   1ea46:	4053      	eors	r3, r2
   1ea48:	b2db      	uxtb	r3, r3
   1ea4a:	2b00      	cmp	r3, #0
   1ea4c:	d001      	beq.n	1ea52 <mmc_cmd8+0x52>
			return false;
   1ea4e:	2300      	movs	r3, #0
   1ea50:	e05b      	b.n	1eb0a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ea52:	2316      	movs	r3, #22
   1ea54:	18fb      	adds	r3, r7, r3
   1ea56:	881a      	ldrh	r2, [r3, #0]
   1ea58:	2316      	movs	r3, #22
   1ea5a:	18fb      	adds	r3, r7, r3
   1ea5c:	3201      	adds	r2, #1
   1ea5e:	801a      	strh	r2, [r3, #0]
   1ea60:	2316      	movs	r3, #22
   1ea62:	18fb      	adds	r3, r7, r3
   1ea64:	881b      	ldrh	r3, [r3, #0]
   1ea66:	2b31      	cmp	r3, #49	; 0x31
   1ea68:	d9e5      	bls.n	1ea36 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1ea6a:	693b      	ldr	r3, [r7, #16]
   1ea6c:	b2db      	uxtb	r3, r3
   1ea6e:	2202      	movs	r2, #2
   1ea70:	4013      	ands	r3, r2
   1ea72:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1ea74:	687b      	ldr	r3, [r7, #4]
   1ea76:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1ea78:	4b29      	ldr	r3, [pc, #164]	; (1eb20 <mmc_cmd8+0x120>)
   1ea7a:	681b      	ldr	r3, [r3, #0]
   1ea7c:	330e      	adds	r3, #14
   1ea7e:	0018      	movs	r0, r3
   1ea80:	230c      	movs	r3, #12
   1ea82:	223e      	movs	r2, #62	; 0x3e
   1ea84:	2180      	movs	r1, #128	; 0x80
   1ea86:	4c27      	ldr	r4, [pc, #156]	; (1eb24 <mmc_cmd8+0x124>)
   1ea88:	47a0      	blx	r4
   1ea8a:	0002      	movs	r2, r0
   1ea8c:	4b26      	ldr	r3, [pc, #152]	; (1eb28 <mmc_cmd8+0x128>)
   1ea8e:	429a      	cmp	r2, r3
   1ea90:	d135      	bne.n	1eafe <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1ea92:	e014      	b.n	1eabe <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1ea94:	230c      	movs	r3, #12
   1ea96:	18fb      	adds	r3, r7, r3
   1ea98:	0018      	movs	r0, r3
   1ea9a:	4b20      	ldr	r3, [pc, #128]	; (1eb1c <mmc_cmd8+0x11c>)
   1ea9c:	4798      	blx	r3
   1ea9e:	0003      	movs	r3, r0
   1eaa0:	001a      	movs	r2, r3
   1eaa2:	2301      	movs	r3, #1
   1eaa4:	4053      	eors	r3, r2
   1eaa6:	b2db      	uxtb	r3, r3
   1eaa8:	2b00      	cmp	r3, #0
   1eaaa:	d001      	beq.n	1eab0 <mmc_cmd8+0xb0>
				return false;
   1eaac:	2300      	movs	r3, #0
   1eaae:	e02c      	b.n	1eb0a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1eab0:	2316      	movs	r3, #22
   1eab2:	18fb      	adds	r3, r7, r3
   1eab4:	881a      	ldrh	r2, [r3, #0]
   1eab6:	2316      	movs	r3, #22
   1eab8:	18fb      	adds	r3, r7, r3
   1eaba:	3201      	adds	r2, #1
   1eabc:	801a      	strh	r2, [r3, #0]
   1eabe:	2316      	movs	r3, #22
   1eac0:	18fb      	adds	r3, r7, r3
   1eac2:	881b      	ldrh	r3, [r3, #0]
   1eac4:	2b35      	cmp	r3, #53	; 0x35
   1eac6:	d9e5      	bls.n	1ea94 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1eac8:	4b15      	ldr	r3, [pc, #84]	; (1eb20 <mmc_cmd8+0x120>)
   1eaca:	681b      	ldr	r3, [r3, #0]
   1eacc:	68fa      	ldr	r2, [r7, #12]
   1eace:	0852      	lsrs	r2, r2, #1
   1ead0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1ead2:	e014      	b.n	1eafe <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1ead4:	230c      	movs	r3, #12
   1ead6:	18fb      	adds	r3, r7, r3
   1ead8:	0018      	movs	r0, r3
   1eada:	4b10      	ldr	r3, [pc, #64]	; (1eb1c <mmc_cmd8+0x11c>)
   1eadc:	4798      	blx	r3
   1eade:	0003      	movs	r3, r0
   1eae0:	001a      	movs	r2, r3
   1eae2:	2301      	movs	r3, #1
   1eae4:	4053      	eors	r3, r2
   1eae6:	b2db      	uxtb	r3, r3
   1eae8:	2b00      	cmp	r3, #0
   1eaea:	d001      	beq.n	1eaf0 <mmc_cmd8+0xf0>
			return false;
   1eaec:	2300      	movs	r3, #0
   1eaee:	e00c      	b.n	1eb0a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1eaf0:	2316      	movs	r3, #22
   1eaf2:	18fb      	adds	r3, r7, r3
   1eaf4:	881a      	ldrh	r2, [r3, #0]
   1eaf6:	2316      	movs	r3, #22
   1eaf8:	18fb      	adds	r3, r7, r3
   1eafa:	3201      	adds	r2, #1
   1eafc:	801a      	strh	r2, [r3, #0]
   1eafe:	2316      	movs	r3, #22
   1eb00:	18fb      	adds	r3, r7, r3
   1eb02:	881b      	ldrh	r3, [r3, #0]
   1eb04:	2b7f      	cmp	r3, #127	; 0x7f
   1eb06:	d9e5      	bls.n	1ead4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1eb08:	2301      	movs	r3, #1
}
   1eb0a:	0018      	movs	r0, r3
   1eb0c:	46bd      	mov	sp, r7
   1eb0e:	b007      	add	sp, #28
   1eb10:	bd90      	pop	{r4, r7, pc}
   1eb12:	46c0      	nop			; (mov r8, r8)
   1eb14:	00081108 	.word	0x00081108
   1eb18:	0001fedd 	.word	0x0001fedd
   1eb1c:	00020109 	.word	0x00020109
   1eb20:	20003e38 	.word	0x20003e38
   1eb24:	0001e699 	.word	0x0001e699
   1eb28:	00000fff 	.word	0x00000fff

0001eb2c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1eb2c:	b590      	push	{r4, r7, lr}
   1eb2e:	b083      	sub	sp, #12
   1eb30:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1eb32:	4b15      	ldr	r3, [pc, #84]	; (1eb88 <sd_mmc_cmd9_spi+0x5c>)
   1eb34:	681b      	ldr	r3, [r3, #0]
   1eb36:	891b      	ldrh	r3, [r3, #8]
   1eb38:	0419      	lsls	r1, r3, #16
   1eb3a:	4814      	ldr	r0, [pc, #80]	; (1eb8c <sd_mmc_cmd9_spi+0x60>)
   1eb3c:	2301      	movs	r3, #1
   1eb3e:	9300      	str	r3, [sp, #0]
   1eb40:	2301      	movs	r3, #1
   1eb42:	2210      	movs	r2, #16
   1eb44:	4c12      	ldr	r4, [pc, #72]	; (1eb90 <sd_mmc_cmd9_spi+0x64>)
   1eb46:	47a0      	blx	r4
   1eb48:	0003      	movs	r3, r0
   1eb4a:	001a      	movs	r2, r3
   1eb4c:	2301      	movs	r3, #1
   1eb4e:	4053      	eors	r3, r2
   1eb50:	b2db      	uxtb	r3, r3
   1eb52:	2b00      	cmp	r3, #0
   1eb54:	d001      	beq.n	1eb5a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1eb56:	2300      	movs	r3, #0
   1eb58:	e012      	b.n	1eb80 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1eb5a:	4b0b      	ldr	r3, [pc, #44]	; (1eb88 <sd_mmc_cmd9_spi+0x5c>)
   1eb5c:	681b      	ldr	r3, [r3, #0]
   1eb5e:	330e      	adds	r3, #14
   1eb60:	2101      	movs	r1, #1
   1eb62:	0018      	movs	r0, r3
   1eb64:	4b0b      	ldr	r3, [pc, #44]	; (1eb94 <sd_mmc_cmd9_spi+0x68>)
   1eb66:	4798      	blx	r3
   1eb68:	0003      	movs	r3, r0
   1eb6a:	001a      	movs	r2, r3
   1eb6c:	2301      	movs	r3, #1
   1eb6e:	4053      	eors	r3, r2
   1eb70:	b2db      	uxtb	r3, r3
   1eb72:	2b00      	cmp	r3, #0
   1eb74:	d001      	beq.n	1eb7a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1eb76:	2300      	movs	r3, #0
   1eb78:	e002      	b.n	1eb80 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1eb7a:	4b07      	ldr	r3, [pc, #28]	; (1eb98 <sd_mmc_cmd9_spi+0x6c>)
   1eb7c:	4798      	blx	r3
   1eb7e:	0003      	movs	r3, r0
}
   1eb80:	0018      	movs	r0, r3
   1eb82:	46bd      	mov	sp, r7
   1eb84:	b001      	add	sp, #4
   1eb86:	bd90      	pop	{r4, r7, pc}
   1eb88:	20003e38 	.word	0x20003e38
   1eb8c:	00081109 	.word	0x00081109
   1eb90:	0001fedd 	.word	0x0001fedd
   1eb94:	000201ad 	.word	0x000201ad
   1eb98:	00020251 	.word	0x00020251

0001eb9c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1eb9c:	b5b0      	push	{r4, r5, r7, lr}
   1eb9e:	b084      	sub	sp, #16
   1eba0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1eba2:	4b45      	ldr	r3, [pc, #276]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1eba4:	681b      	ldr	r3, [r3, #0]
   1eba6:	330e      	adds	r3, #14
   1eba8:	0018      	movs	r0, r3
   1ebaa:	2304      	movs	r3, #4
   1ebac:	227a      	movs	r2, #122	; 0x7a
   1ebae:	2180      	movs	r1, #128	; 0x80
   1ebb0:	4c42      	ldr	r4, [pc, #264]	; (1ecbc <mmc_decode_csd+0x120>)
   1ebb2:	47a0      	blx	r4
   1ebb4:	0003      	movs	r3, r0
   1ebb6:	2b02      	cmp	r3, #2
   1ebb8:	d011      	beq.n	1ebde <mmc_decode_csd+0x42>
   1ebba:	d802      	bhi.n	1ebc2 <mmc_decode_csd+0x26>
   1ebbc:	2b01      	cmp	r3, #1
   1ebbe:	d009      	beq.n	1ebd4 <mmc_decode_csd+0x38>
   1ebc0:	e003      	b.n	1ebca <mmc_decode_csd+0x2e>
   1ebc2:	2b03      	cmp	r3, #3
   1ebc4:	d010      	beq.n	1ebe8 <mmc_decode_csd+0x4c>
   1ebc6:	2b04      	cmp	r3, #4
   1ebc8:	d013      	beq.n	1ebf2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1ebca:	4b3b      	ldr	r3, [pc, #236]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ebcc:	681b      	ldr	r3, [r3, #0]
   1ebce:	2212      	movs	r2, #18
   1ebd0:	731a      	strb	r2, [r3, #12]
		break;
   1ebd2:	e013      	b.n	1ebfc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1ebd4:	4b38      	ldr	r3, [pc, #224]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ebd6:	681b      	ldr	r3, [r3, #0]
   1ebd8:	2214      	movs	r2, #20
   1ebda:	731a      	strb	r2, [r3, #12]
		break;
   1ebdc:	e00e      	b.n	1ebfc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1ebde:	4b36      	ldr	r3, [pc, #216]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ebe0:	681b      	ldr	r3, [r3, #0]
   1ebe2:	2222      	movs	r2, #34	; 0x22
   1ebe4:	731a      	strb	r2, [r3, #12]
		break;
   1ebe6:	e009      	b.n	1ebfc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1ebe8:	4b33      	ldr	r3, [pc, #204]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ebea:	681b      	ldr	r3, [r3, #0]
   1ebec:	2230      	movs	r2, #48	; 0x30
   1ebee:	731a      	strb	r2, [r3, #12]
		break;
   1ebf0:	e004      	b.n	1ebfc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1ebf2:	4b31      	ldr	r3, [pc, #196]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ebf4:	681b      	ldr	r3, [r3, #0]
   1ebf6:	2240      	movs	r2, #64	; 0x40
   1ebf8:	731a      	strb	r2, [r3, #12]
		break;
   1ebfa:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1ebfc:	4b2e      	ldr	r3, [pc, #184]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ebfe:	681b      	ldr	r3, [r3, #0]
   1ec00:	330e      	adds	r3, #14
   1ec02:	0018      	movs	r0, r3
   1ec04:	2308      	movs	r3, #8
   1ec06:	2260      	movs	r2, #96	; 0x60
   1ec08:	2180      	movs	r1, #128	; 0x80
   1ec0a:	4c2c      	ldr	r4, [pc, #176]	; (1ecbc <mmc_decode_csd+0x120>)
   1ec0c:	47a0      	blx	r4
   1ec0e:	0003      	movs	r3, r0
   1ec10:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1ec12:	68fb      	ldr	r3, [r7, #12]
   1ec14:	2207      	movs	r2, #7
   1ec16:	401a      	ands	r2, r3
   1ec18:	4b29      	ldr	r3, [pc, #164]	; (1ecc0 <mmc_decode_csd+0x124>)
   1ec1a:	0092      	lsls	r2, r2, #2
   1ec1c:	58d3      	ldr	r3, [r2, r3]
   1ec1e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1ec20:	68fb      	ldr	r3, [r7, #12]
   1ec22:	08db      	lsrs	r3, r3, #3
   1ec24:	220f      	movs	r2, #15
   1ec26:	401a      	ands	r2, r3
   1ec28:	4b26      	ldr	r3, [pc, #152]	; (1ecc4 <mmc_decode_csd+0x128>)
   1ec2a:	0092      	lsls	r2, r2, #2
   1ec2c:	58d3      	ldr	r3, [r2, r3]
   1ec2e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1ec30:	4b21      	ldr	r3, [pc, #132]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ec32:	681b      	ldr	r3, [r3, #0]
   1ec34:	68ba      	ldr	r2, [r7, #8]
   1ec36:	6879      	ldr	r1, [r7, #4]
   1ec38:	434a      	muls	r2, r1
   1ec3a:	21fa      	movs	r1, #250	; 0xfa
   1ec3c:	0089      	lsls	r1, r1, #2
   1ec3e:	434a      	muls	r2, r1
   1ec40:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1ec42:	4b1d      	ldr	r3, [pc, #116]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ec44:	681b      	ldr	r3, [r3, #0]
   1ec46:	330e      	adds	r3, #14
   1ec48:	0018      	movs	r0, r3
   1ec4a:	230c      	movs	r3, #12
   1ec4c:	223e      	movs	r2, #62	; 0x3e
   1ec4e:	2180      	movs	r1, #128	; 0x80
   1ec50:	4c1a      	ldr	r4, [pc, #104]	; (1ecbc <mmc_decode_csd+0x120>)
   1ec52:	47a0      	blx	r4
   1ec54:	0002      	movs	r2, r0
   1ec56:	4b1c      	ldr	r3, [pc, #112]	; (1ecc8 <mmc_decode_csd+0x12c>)
   1ec58:	429a      	cmp	r2, r3
   1ec5a:	d028      	beq.n	1ecae <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1ec5c:	4b16      	ldr	r3, [pc, #88]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ec5e:	681b      	ldr	r3, [r3, #0]
   1ec60:	330e      	adds	r3, #14
   1ec62:	0018      	movs	r0, r3
   1ec64:	230c      	movs	r3, #12
   1ec66:	223e      	movs	r2, #62	; 0x3e
   1ec68:	2180      	movs	r1, #128	; 0x80
   1ec6a:	4c14      	ldr	r4, [pc, #80]	; (1ecbc <mmc_decode_csd+0x120>)
   1ec6c:	47a0      	blx	r4
   1ec6e:	0003      	movs	r3, r0
   1ec70:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1ec72:	4b11      	ldr	r3, [pc, #68]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ec74:	681b      	ldr	r3, [r3, #0]
   1ec76:	330e      	adds	r3, #14
   1ec78:	0018      	movs	r0, r3
   1ec7a:	2303      	movs	r3, #3
   1ec7c:	222f      	movs	r2, #47	; 0x2f
   1ec7e:	2180      	movs	r1, #128	; 0x80
   1ec80:	4d0e      	ldr	r5, [pc, #56]	; (1ecbc <mmc_decode_csd+0x120>)
   1ec82:	47a8      	blx	r5
   1ec84:	0003      	movs	r3, r0
   1ec86:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1ec88:	409c      	lsls	r4, r3
   1ec8a:	0023      	movs	r3, r4
   1ec8c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1ec8e:	4b0a      	ldr	r3, [pc, #40]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ec90:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1ec92:	4b09      	ldr	r3, [pc, #36]	; (1ecb8 <mmc_decode_csd+0x11c>)
   1ec94:	681b      	ldr	r3, [r3, #0]
   1ec96:	330e      	adds	r3, #14
   1ec98:	0018      	movs	r0, r3
   1ec9a:	2304      	movs	r3, #4
   1ec9c:	2250      	movs	r2, #80	; 0x50
   1ec9e:	2180      	movs	r1, #128	; 0x80
   1eca0:	4d06      	ldr	r5, [pc, #24]	; (1ecbc <mmc_decode_csd+0x120>)
   1eca2:	47a8      	blx	r5
   1eca4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1eca6:	683b      	ldr	r3, [r7, #0]
   1eca8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1ecaa:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1ecac:	6063      	str	r3, [r4, #4]
	}
}
   1ecae:	46c0      	nop			; (mov r8, r8)
   1ecb0:	46bd      	mov	sp, r7
   1ecb2:	b004      	add	sp, #16
   1ecb4:	bdb0      	pop	{r4, r5, r7, pc}
   1ecb6:	46c0      	nop			; (mov r8, r8)
   1ecb8:	20003e38 	.word	0x20003e38
   1ecbc:	0001e699 	.word	0x0001e699
   1ecc0:	000383d8 	.word	0x000383d8
   1ecc4:	00038434 	.word	0x00038434
   1ecc8:	00000fff 	.word	0x00000fff

0001eccc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1eccc:	b5b0      	push	{r4, r5, r7, lr}
   1ecce:	b084      	sub	sp, #16
   1ecd0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1ecd2:	4b35      	ldr	r3, [pc, #212]	; (1eda8 <sd_decode_csd+0xdc>)
   1ecd4:	681b      	ldr	r3, [r3, #0]
   1ecd6:	330e      	adds	r3, #14
   1ecd8:	0018      	movs	r0, r3
   1ecda:	2308      	movs	r3, #8
   1ecdc:	2260      	movs	r2, #96	; 0x60
   1ecde:	2180      	movs	r1, #128	; 0x80
   1ece0:	4c32      	ldr	r4, [pc, #200]	; (1edac <sd_decode_csd+0xe0>)
   1ece2:	47a0      	blx	r4
   1ece4:	0003      	movs	r3, r0
   1ece6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1ece8:	68fb      	ldr	r3, [r7, #12]
   1ecea:	2207      	movs	r2, #7
   1ecec:	401a      	ands	r2, r3
   1ecee:	4b30      	ldr	r3, [pc, #192]	; (1edb0 <sd_decode_csd+0xe4>)
   1ecf0:	0092      	lsls	r2, r2, #2
   1ecf2:	58d3      	ldr	r3, [r2, r3]
   1ecf4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1ecf6:	68fb      	ldr	r3, [r7, #12]
   1ecf8:	08db      	lsrs	r3, r3, #3
   1ecfa:	220f      	movs	r2, #15
   1ecfc:	401a      	ands	r2, r3
   1ecfe:	4b2d      	ldr	r3, [pc, #180]	; (1edb4 <sd_decode_csd+0xe8>)
   1ed00:	0092      	lsls	r2, r2, #2
   1ed02:	58d3      	ldr	r3, [r2, r3]
   1ed04:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1ed06:	4b28      	ldr	r3, [pc, #160]	; (1eda8 <sd_decode_csd+0xdc>)
   1ed08:	681b      	ldr	r3, [r3, #0]
   1ed0a:	68ba      	ldr	r2, [r7, #8]
   1ed0c:	6879      	ldr	r1, [r7, #4]
   1ed0e:	434a      	muls	r2, r1
   1ed10:	21fa      	movs	r1, #250	; 0xfa
   1ed12:	0089      	lsls	r1, r1, #2
   1ed14:	434a      	muls	r2, r1
   1ed16:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1ed18:	4b23      	ldr	r3, [pc, #140]	; (1eda8 <sd_decode_csd+0xdc>)
   1ed1a:	681b      	ldr	r3, [r3, #0]
   1ed1c:	330e      	adds	r3, #14
   1ed1e:	0018      	movs	r0, r3
   1ed20:	2302      	movs	r3, #2
   1ed22:	227e      	movs	r2, #126	; 0x7e
   1ed24:	2180      	movs	r1, #128	; 0x80
   1ed26:	4c21      	ldr	r4, [pc, #132]	; (1edac <sd_decode_csd+0xe0>)
   1ed28:	47a0      	blx	r4
   1ed2a:	1e03      	subs	r3, r0, #0
   1ed2c:	d00f      	beq.n	1ed4e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1ed2e:	4b1e      	ldr	r3, [pc, #120]	; (1eda8 <sd_decode_csd+0xdc>)
   1ed30:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1ed32:	4b1d      	ldr	r3, [pc, #116]	; (1eda8 <sd_decode_csd+0xdc>)
   1ed34:	681b      	ldr	r3, [r3, #0]
   1ed36:	330e      	adds	r3, #14
   1ed38:	0018      	movs	r0, r3
   1ed3a:	2316      	movs	r3, #22
   1ed3c:	2230      	movs	r2, #48	; 0x30
   1ed3e:	2180      	movs	r1, #128	; 0x80
   1ed40:	4d1a      	ldr	r5, [pc, #104]	; (1edac <sd_decode_csd+0xe0>)
   1ed42:	47a8      	blx	r5
   1ed44:	0003      	movs	r3, r0
				* 512;
   1ed46:	3301      	adds	r3, #1
   1ed48:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1ed4a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1ed4c:	e028      	b.n	1eda0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1ed4e:	4b16      	ldr	r3, [pc, #88]	; (1eda8 <sd_decode_csd+0xdc>)
   1ed50:	681b      	ldr	r3, [r3, #0]
   1ed52:	330e      	adds	r3, #14
   1ed54:	0018      	movs	r0, r3
   1ed56:	230c      	movs	r3, #12
   1ed58:	223e      	movs	r2, #62	; 0x3e
   1ed5a:	2180      	movs	r1, #128	; 0x80
   1ed5c:	4c13      	ldr	r4, [pc, #76]	; (1edac <sd_decode_csd+0xe0>)
   1ed5e:	47a0      	blx	r4
   1ed60:	0003      	movs	r3, r0
   1ed62:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1ed64:	4b10      	ldr	r3, [pc, #64]	; (1eda8 <sd_decode_csd+0xdc>)
   1ed66:	681b      	ldr	r3, [r3, #0]
   1ed68:	330e      	adds	r3, #14
   1ed6a:	0018      	movs	r0, r3
   1ed6c:	2303      	movs	r3, #3
   1ed6e:	222f      	movs	r2, #47	; 0x2f
   1ed70:	2180      	movs	r1, #128	; 0x80
   1ed72:	4d0e      	ldr	r5, [pc, #56]	; (1edac <sd_decode_csd+0xe0>)
   1ed74:	47a8      	blx	r5
   1ed76:	0003      	movs	r3, r0
   1ed78:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1ed7a:	409c      	lsls	r4, r3
   1ed7c:	0023      	movs	r3, r4
   1ed7e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1ed80:	4b09      	ldr	r3, [pc, #36]	; (1eda8 <sd_decode_csd+0xdc>)
   1ed82:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1ed84:	4b08      	ldr	r3, [pc, #32]	; (1eda8 <sd_decode_csd+0xdc>)
   1ed86:	681b      	ldr	r3, [r3, #0]
   1ed88:	330e      	adds	r3, #14
   1ed8a:	0018      	movs	r0, r3
   1ed8c:	2304      	movs	r3, #4
   1ed8e:	2250      	movs	r2, #80	; 0x50
   1ed90:	2180      	movs	r1, #128	; 0x80
   1ed92:	4d06      	ldr	r5, [pc, #24]	; (1edac <sd_decode_csd+0xe0>)
   1ed94:	47a8      	blx	r5
   1ed96:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1ed98:	683b      	ldr	r3, [r7, #0]
   1ed9a:	4093      	lsls	r3, r2
				/ 1024;
   1ed9c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1ed9e:	6063      	str	r3, [r4, #4]
}
   1eda0:	46c0      	nop			; (mov r8, r8)
   1eda2:	46bd      	mov	sp, r7
   1eda4:	b004      	add	sp, #16
   1eda6:	bdb0      	pop	{r4, r5, r7, pc}
   1eda8:	20003e38 	.word	0x20003e38
   1edac:	0001e699 	.word	0x0001e699
   1edb0:	000383d8 	.word	0x000383d8
   1edb4:	000383f4 	.word	0x000383f4

0001edb8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1edb8:	b580      	push	{r7, lr}
   1edba:	b082      	sub	sp, #8
   1edbc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1edbe:	4b11      	ldr	r3, [pc, #68]	; (1ee04 <sd_mmc_cmd13+0x4c>)
   1edc0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1edc2:	4b11      	ldr	r3, [pc, #68]	; (1ee08 <sd_mmc_cmd13+0x50>)
   1edc4:	2100      	movs	r1, #0
   1edc6:	0018      	movs	r0, r3
   1edc8:	4b10      	ldr	r3, [pc, #64]	; (1ee0c <sd_mmc_cmd13+0x54>)
   1edca:	4798      	blx	r3
   1edcc:	0003      	movs	r3, r0
   1edce:	001a      	movs	r2, r3
   1edd0:	2301      	movs	r3, #1
   1edd2:	4053      	eors	r3, r2
   1edd4:	b2db      	uxtb	r3, r3
   1edd6:	2b00      	cmp	r3, #0
   1edd8:	d001      	beq.n	1edde <sd_mmc_cmd13+0x26>
				return false;
   1edda:	2300      	movs	r3, #0
   1eddc:	e00e      	b.n	1edfc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1edde:	4b0c      	ldr	r3, [pc, #48]	; (1ee10 <sd_mmc_cmd13+0x58>)
   1ede0:	4798      	blx	r3
   1ede2:	0002      	movs	r2, r0
   1ede4:	23ff      	movs	r3, #255	; 0xff
   1ede6:	4013      	ands	r3, r2
   1ede8:	d006      	beq.n	1edf8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1edea:	687b      	ldr	r3, [r7, #4]
   1edec:	1e5a      	subs	r2, r3, #1
   1edee:	607a      	str	r2, [r7, #4]
   1edf0:	2b00      	cmp	r3, #0
   1edf2:	d1e6      	bne.n	1edc2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1edf4:	2300      	movs	r3, #0
   1edf6:	e001      	b.n	1edfc <sd_mmc_cmd13+0x44>
				break;
   1edf8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1edfa:	2301      	movs	r3, #1
}
   1edfc:	0018      	movs	r0, r3
   1edfe:	46bd      	mov	sp, r7
   1ee00:	b002      	add	sp, #8
   1ee02:	bd80      	pop	{r7, pc}
   1ee04:	00030d40 	.word	0x00030d40
   1ee08:	00001b0d 	.word	0x00001b0d
   1ee0c:	0001feb5 	.word	0x0001feb5
   1ee10:	000200f5 	.word	0x000200f5

0001ee14 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1ee14:	b590      	push	{r4, r7, lr}
   1ee16:	b085      	sub	sp, #20
   1ee18:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1ee1a:	4b38      	ldr	r3, [pc, #224]	; (1eefc <sd_acmd51+0xe8>)
   1ee1c:	681b      	ldr	r3, [r3, #0]
   1ee1e:	891b      	ldrh	r3, [r3, #8]
   1ee20:	041b      	lsls	r3, r3, #16
   1ee22:	4a37      	ldr	r2, [pc, #220]	; (1ef00 <sd_acmd51+0xec>)
   1ee24:	0019      	movs	r1, r3
   1ee26:	0010      	movs	r0, r2
   1ee28:	4b36      	ldr	r3, [pc, #216]	; (1ef04 <sd_acmd51+0xf0>)
   1ee2a:	4798      	blx	r3
   1ee2c:	0003      	movs	r3, r0
   1ee2e:	001a      	movs	r2, r3
   1ee30:	2301      	movs	r3, #1
   1ee32:	4053      	eors	r3, r2
   1ee34:	b2db      	uxtb	r3, r3
   1ee36:	2b00      	cmp	r3, #0
   1ee38:	d001      	beq.n	1ee3e <sd_acmd51+0x2a>
		return false;
   1ee3a:	2300      	movs	r3, #0
   1ee3c:	e059      	b.n	1eef2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1ee3e:	4832      	ldr	r0, [pc, #200]	; (1ef08 <sd_acmd51+0xf4>)
   1ee40:	2301      	movs	r3, #1
   1ee42:	9300      	str	r3, [sp, #0]
   1ee44:	2301      	movs	r3, #1
   1ee46:	2208      	movs	r2, #8
   1ee48:	2100      	movs	r1, #0
   1ee4a:	4c30      	ldr	r4, [pc, #192]	; (1ef0c <sd_acmd51+0xf8>)
   1ee4c:	47a0      	blx	r4
   1ee4e:	0003      	movs	r3, r0
   1ee50:	001a      	movs	r2, r3
   1ee52:	2301      	movs	r3, #1
   1ee54:	4053      	eors	r3, r2
   1ee56:	b2db      	uxtb	r3, r3
   1ee58:	2b00      	cmp	r3, #0
   1ee5a:	d001      	beq.n	1ee60 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1ee5c:	2300      	movs	r3, #0
   1ee5e:	e048      	b.n	1eef2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1ee60:	003b      	movs	r3, r7
   1ee62:	2101      	movs	r1, #1
   1ee64:	0018      	movs	r0, r3
   1ee66:	4b2a      	ldr	r3, [pc, #168]	; (1ef10 <sd_acmd51+0xfc>)
   1ee68:	4798      	blx	r3
   1ee6a:	0003      	movs	r3, r0
   1ee6c:	001a      	movs	r2, r3
   1ee6e:	2301      	movs	r3, #1
   1ee70:	4053      	eors	r3, r2
   1ee72:	b2db      	uxtb	r3, r3
   1ee74:	2b00      	cmp	r3, #0
   1ee76:	d001      	beq.n	1ee7c <sd_acmd51+0x68>
		return false;
   1ee78:	2300      	movs	r3, #0
   1ee7a:	e03a      	b.n	1eef2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1ee7c:	4b25      	ldr	r3, [pc, #148]	; (1ef14 <sd_acmd51+0x100>)
   1ee7e:	4798      	blx	r3
   1ee80:	0003      	movs	r3, r0
   1ee82:	001a      	movs	r2, r3
   1ee84:	2301      	movs	r3, #1
   1ee86:	4053      	eors	r3, r2
   1ee88:	b2db      	uxtb	r3, r3
   1ee8a:	2b00      	cmp	r3, #0
   1ee8c:	d001      	beq.n	1ee92 <sd_acmd51+0x7e>
		return false;
   1ee8e:	2300      	movs	r3, #0
   1ee90:	e02f      	b.n	1eef2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1ee92:	0038      	movs	r0, r7
   1ee94:	2304      	movs	r3, #4
   1ee96:	2238      	movs	r2, #56	; 0x38
   1ee98:	2140      	movs	r1, #64	; 0x40
   1ee9a:	4c1f      	ldr	r4, [pc, #124]	; (1ef18 <sd_acmd51+0x104>)
   1ee9c:	47a0      	blx	r4
   1ee9e:	0003      	movs	r3, r0
   1eea0:	2b01      	cmp	r3, #1
   1eea2:	d008      	beq.n	1eeb6 <sd_acmd51+0xa2>
   1eea4:	d302      	bcc.n	1eeac <sd_acmd51+0x98>
   1eea6:	2b02      	cmp	r3, #2
   1eea8:	d00a      	beq.n	1eec0 <sd_acmd51+0xac>
   1eeaa:	e01c      	b.n	1eee6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1eeac:	4b13      	ldr	r3, [pc, #76]	; (1eefc <sd_acmd51+0xe8>)
   1eeae:	681b      	ldr	r3, [r3, #0]
   1eeb0:	2210      	movs	r2, #16
   1eeb2:	731a      	strb	r2, [r3, #12]
		break;
   1eeb4:	e01c      	b.n	1eef0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1eeb6:	4b11      	ldr	r3, [pc, #68]	; (1eefc <sd_acmd51+0xe8>)
   1eeb8:	681b      	ldr	r3, [r3, #0]
   1eeba:	221a      	movs	r2, #26
   1eebc:	731a      	strb	r2, [r3, #12]
		break;
   1eebe:	e017      	b.n	1eef0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1eec0:	0038      	movs	r0, r7
   1eec2:	2301      	movs	r3, #1
   1eec4:	222f      	movs	r2, #47	; 0x2f
   1eec6:	2140      	movs	r1, #64	; 0x40
   1eec8:	4c13      	ldr	r4, [pc, #76]	; (1ef18 <sd_acmd51+0x104>)
   1eeca:	47a0      	blx	r4
   1eecc:	0003      	movs	r3, r0
   1eece:	2b01      	cmp	r3, #1
   1eed0:	d104      	bne.n	1eedc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1eed2:	4b0a      	ldr	r3, [pc, #40]	; (1eefc <sd_acmd51+0xe8>)
   1eed4:	681b      	ldr	r3, [r3, #0]
   1eed6:	2230      	movs	r2, #48	; 0x30
   1eed8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1eeda:	e009      	b.n	1eef0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1eedc:	4b07      	ldr	r3, [pc, #28]	; (1eefc <sd_acmd51+0xe8>)
   1eede:	681b      	ldr	r3, [r3, #0]
   1eee0:	2220      	movs	r2, #32
   1eee2:	731a      	strb	r2, [r3, #12]
		break;
   1eee4:	e004      	b.n	1eef0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1eee6:	4b05      	ldr	r3, [pc, #20]	; (1eefc <sd_acmd51+0xe8>)
   1eee8:	681b      	ldr	r3, [r3, #0]
   1eeea:	2210      	movs	r2, #16
   1eeec:	731a      	strb	r2, [r3, #12]
		break;
   1eeee:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1eef0:	2301      	movs	r3, #1
}
   1eef2:	0018      	movs	r0, r3
   1eef4:	46bd      	mov	sp, r7
   1eef6:	b003      	add	sp, #12
   1eef8:	bd90      	pop	{r4, r7, pc}
   1eefa:	46c0      	nop			; (mov r8, r8)
   1eefc:	20003e38 	.word	0x20003e38
   1ef00:	00001137 	.word	0x00001137
   1ef04:	0001feb5 	.word	0x0001feb5
   1ef08:	00081133 	.word	0x00081133
   1ef0c:	0001fedd 	.word	0x0001fedd
   1ef10:	000201ad 	.word	0x000201ad
   1ef14:	00020251 	.word	0x00020251
   1ef18:	0001e699 	.word	0x0001e699

0001ef1c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1ef1c:	b580      	push	{r7, lr}
   1ef1e:	b082      	sub	sp, #8
   1ef20:	af00      	add	r7, sp, #0
   1ef22:	0002      	movs	r2, r0
   1ef24:	1dfb      	adds	r3, r7, #7
   1ef26:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1ef28:	1dfb      	adds	r3, r7, #7
   1ef2a:	781b      	ldrb	r3, [r3, #0]
   1ef2c:	2b00      	cmp	r3, #0
   1ef2e:	d001      	beq.n	1ef34 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1ef30:	2304      	movs	r3, #4
   1ef32:	e047      	b.n	1efc4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1ef34:	1dfb      	adds	r3, r7, #7
   1ef36:	781b      	ldrb	r3, [r3, #0]
   1ef38:	4a24      	ldr	r2, [pc, #144]	; (1efcc <sd_mmc_select_slot+0xb0>)
   1ef3a:	015b      	lsls	r3, r3, #5
   1ef3c:	18d3      	adds	r3, r2, r3
   1ef3e:	330a      	adds	r3, #10
   1ef40:	781b      	ldrb	r3, [r3, #0]
   1ef42:	2b04      	cmp	r3, #4
   1ef44:	d008      	beq.n	1ef58 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1ef46:	1dfb      	adds	r3, r7, #7
   1ef48:	781b      	ldrb	r3, [r3, #0]
   1ef4a:	4a20      	ldr	r2, [pc, #128]	; (1efcc <sd_mmc_select_slot+0xb0>)
   1ef4c:	015b      	lsls	r3, r3, #5
   1ef4e:	18d3      	adds	r3, r2, r3
   1ef50:	330a      	adds	r3, #10
   1ef52:	781b      	ldrb	r3, [r3, #0]
   1ef54:	2b03      	cmp	r3, #3
   1ef56:	d11d      	bne.n	1ef94 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1ef58:	1dfb      	adds	r3, r7, #7
   1ef5a:	781b      	ldrb	r3, [r3, #0]
   1ef5c:	4a1b      	ldr	r2, [pc, #108]	; (1efcc <sd_mmc_select_slot+0xb0>)
   1ef5e:	015b      	lsls	r3, r3, #5
   1ef60:	18d3      	adds	r3, r2, r3
   1ef62:	330a      	adds	r3, #10
   1ef64:	2202      	movs	r2, #2
   1ef66:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1ef68:	1dfb      	adds	r3, r7, #7
   1ef6a:	781a      	ldrb	r2, [r3, #0]
   1ef6c:	4b17      	ldr	r3, [pc, #92]	; (1efcc <sd_mmc_select_slot+0xb0>)
   1ef6e:	0152      	lsls	r2, r2, #5
   1ef70:	4917      	ldr	r1, [pc, #92]	; (1efd0 <sd_mmc_select_slot+0xb4>)
   1ef72:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1ef74:	1dfb      	adds	r3, r7, #7
   1ef76:	781b      	ldrb	r3, [r3, #0]
   1ef78:	4a14      	ldr	r2, [pc, #80]	; (1efcc <sd_mmc_select_slot+0xb0>)
   1ef7a:	015b      	lsls	r3, r3, #5
   1ef7c:	18d3      	adds	r3, r2, r3
   1ef7e:	330d      	adds	r3, #13
   1ef80:	2201      	movs	r2, #1
   1ef82:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1ef84:	1dfb      	adds	r3, r7, #7
   1ef86:	781b      	ldrb	r3, [r3, #0]
   1ef88:	4a10      	ldr	r2, [pc, #64]	; (1efcc <sd_mmc_select_slot+0xb0>)
   1ef8a:	015b      	lsls	r3, r3, #5
   1ef8c:	18d3      	adds	r3, r2, r3
   1ef8e:	331e      	adds	r3, #30
   1ef90:	2200      	movs	r2, #0
   1ef92:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1ef94:	4b0f      	ldr	r3, [pc, #60]	; (1efd4 <sd_mmc_select_slot+0xb8>)
   1ef96:	1dfa      	adds	r2, r7, #7
   1ef98:	7812      	ldrb	r2, [r2, #0]
   1ef9a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1ef9c:	1dfb      	adds	r3, r7, #7
   1ef9e:	781b      	ldrb	r3, [r3, #0]
   1efa0:	015a      	lsls	r2, r3, #5
   1efa2:	4b0a      	ldr	r3, [pc, #40]	; (1efcc <sd_mmc_select_slot+0xb0>)
   1efa4:	18d2      	adds	r2, r2, r3
   1efa6:	4b0c      	ldr	r3, [pc, #48]	; (1efd8 <sd_mmc_select_slot+0xbc>)
   1efa8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1efaa:	4b0c      	ldr	r3, [pc, #48]	; (1efdc <sd_mmc_select_slot+0xc0>)
   1efac:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1efae:	1dfb      	adds	r3, r7, #7
   1efb0:	781b      	ldrb	r3, [r3, #0]
   1efb2:	4a06      	ldr	r2, [pc, #24]	; (1efcc <sd_mmc_select_slot+0xb0>)
   1efb4:	015b      	lsls	r3, r3, #5
   1efb6:	18d3      	adds	r3, r2, r3
   1efb8:	330a      	adds	r3, #10
   1efba:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1efbc:	3b02      	subs	r3, #2
   1efbe:	425a      	negs	r2, r3
   1efc0:	4153      	adcs	r3, r2
   1efc2:	b2db      	uxtb	r3, r3
}
   1efc4:	0018      	movs	r0, r3
   1efc6:	46bd      	mov	sp, r7
   1efc8:	b002      	add	sp, #8
   1efca:	bd80      	pop	{r7, pc}
   1efcc:	20003e14 	.word	0x20003e14
   1efd0:	00061a80 	.word	0x00061a80
   1efd4:	20003e34 	.word	0x20003e34
   1efd8:	20003e38 	.word	0x20003e38
   1efdc:	0001efe1 	.word	0x0001efe1

0001efe0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1efe0:	b5b0      	push	{r4, r5, r7, lr}
   1efe2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1efe4:	4b09      	ldr	r3, [pc, #36]	; (1f00c <sd_mmc_configure_slot+0x2c>)
   1efe6:	7818      	ldrb	r0, [r3, #0]
   1efe8:	4b09      	ldr	r3, [pc, #36]	; (1f010 <sd_mmc_configure_slot+0x30>)
   1efea:	681b      	ldr	r3, [r3, #0]
   1efec:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1efee:	4b08      	ldr	r3, [pc, #32]	; (1f010 <sd_mmc_configure_slot+0x30>)
   1eff0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1eff2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1eff4:	4b06      	ldr	r3, [pc, #24]	; (1f010 <sd_mmc_configure_slot+0x30>)
   1eff6:	681b      	ldr	r3, [r3, #0]
   1eff8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1effa:	1e5c      	subs	r4, r3, #1
   1effc:	41a3      	sbcs	r3, r4
   1effe:	b2db      	uxtb	r3, r3
   1f000:	4c04      	ldr	r4, [pc, #16]	; (1f014 <sd_mmc_configure_slot+0x34>)
   1f002:	47a0      	blx	r4
}
   1f004:	46c0      	nop			; (mov r8, r8)
   1f006:	46bd      	mov	sp, r7
   1f008:	bdb0      	pop	{r4, r5, r7, pc}
   1f00a:	46c0      	nop			; (mov r8, r8)
   1f00c:	20003e34 	.word	0x20003e34
   1f010:	20003e38 	.word	0x20003e38
   1f014:	0001fd9d 	.word	0x0001fd9d

0001f018 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f018:	b580      	push	{r7, lr}
   1f01a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f01c:	4b05      	ldr	r3, [pc, #20]	; (1f034 <sd_mmc_deselect_slot+0x1c>)
   1f01e:	781b      	ldrb	r3, [r3, #0]
   1f020:	2b00      	cmp	r3, #0
   1f022:	d104      	bne.n	1f02e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f024:	4b03      	ldr	r3, [pc, #12]	; (1f034 <sd_mmc_deselect_slot+0x1c>)
   1f026:	781b      	ldrb	r3, [r3, #0]
   1f028:	0018      	movs	r0, r3
   1f02a:	4b03      	ldr	r3, [pc, #12]	; (1f038 <sd_mmc_deselect_slot+0x20>)
   1f02c:	4798      	blx	r3
	}
}
   1f02e:	46c0      	nop			; (mov r8, r8)
   1f030:	46bd      	mov	sp, r7
   1f032:	bd80      	pop	{r7, pc}
   1f034:	20003e34 	.word	0x20003e34
   1f038:	0001fe25 	.word	0x0001fe25

0001f03c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f03c:	b580      	push	{r7, lr}
   1f03e:	b082      	sub	sp, #8
   1f040:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f042:	1dfb      	adds	r3, r7, #7
   1f044:	2200      	movs	r2, #0
   1f046:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f048:	4b59      	ldr	r3, [pc, #356]	; (1f1b0 <sd_mmc_spi_card_init+0x174>)
   1f04a:	681b      	ldr	r3, [r3, #0]
   1f04c:	2201      	movs	r2, #1
   1f04e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f050:	4b57      	ldr	r3, [pc, #348]	; (1f1b0 <sd_mmc_spi_card_init+0x174>)
   1f052:	681b      	ldr	r3, [r3, #0]
   1f054:	2200      	movs	r2, #0
   1f056:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f058:	4b55      	ldr	r3, [pc, #340]	; (1f1b0 <sd_mmc_spi_card_init+0x174>)
   1f05a:	681b      	ldr	r3, [r3, #0]
   1f05c:	2200      	movs	r2, #0
   1f05e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f060:	4b54      	ldr	r3, [pc, #336]	; (1f1b4 <sd_mmc_spi_card_init+0x178>)
   1f062:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f064:	2388      	movs	r3, #136	; 0x88
   1f066:	015b      	lsls	r3, r3, #5
   1f068:	2100      	movs	r1, #0
   1f06a:	0018      	movs	r0, r3
   1f06c:	4b52      	ldr	r3, [pc, #328]	; (1f1b8 <sd_mmc_spi_card_init+0x17c>)
   1f06e:	4798      	blx	r3
   1f070:	0003      	movs	r3, r0
   1f072:	001a      	movs	r2, r3
   1f074:	2301      	movs	r3, #1
   1f076:	4053      	eors	r3, r2
   1f078:	b2db      	uxtb	r3, r3
   1f07a:	2b00      	cmp	r3, #0
   1f07c:	d001      	beq.n	1f082 <sd_mmc_spi_card_init+0x46>
		return false;
   1f07e:	2300      	movs	r3, #0
   1f080:	e092      	b.n	1f1a8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f082:	1dfb      	adds	r3, r7, #7
   1f084:	0018      	movs	r0, r3
   1f086:	4b4d      	ldr	r3, [pc, #308]	; (1f1bc <sd_mmc_spi_card_init+0x180>)
   1f088:	4798      	blx	r3
   1f08a:	0003      	movs	r3, r0
   1f08c:	001a      	movs	r2, r3
   1f08e:	2301      	movs	r3, #1
   1f090:	4053      	eors	r3, r2
   1f092:	b2db      	uxtb	r3, r3
   1f094:	2b00      	cmp	r3, #0
   1f096:	d001      	beq.n	1f09c <sd_mmc_spi_card_init+0x60>
		return false;
   1f098:	2300      	movs	r3, #0
   1f09a:	e085      	b.n	1f1a8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f09c:	4b48      	ldr	r3, [pc, #288]	; (1f1c0 <sd_mmc_spi_card_init+0x184>)
   1f09e:	4798      	blx	r3
   1f0a0:	0003      	movs	r3, r0
   1f0a2:	001a      	movs	r2, r3
   1f0a4:	2301      	movs	r3, #1
   1f0a6:	4053      	eors	r3, r2
   1f0a8:	b2db      	uxtb	r3, r3
   1f0aa:	2b00      	cmp	r3, #0
   1f0ac:	d001      	beq.n	1f0b2 <sd_mmc_spi_card_init+0x76>
		return false;
   1f0ae:	2300      	movs	r3, #0
   1f0b0:	e07a      	b.n	1f1a8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f0b2:	4b3f      	ldr	r3, [pc, #252]	; (1f1b0 <sd_mmc_spi_card_init+0x174>)
   1f0b4:	681b      	ldr	r3, [r3, #0]
   1f0b6:	7adb      	ldrb	r3, [r3, #11]
   1f0b8:	001a      	movs	r2, r3
   1f0ba:	2301      	movs	r3, #1
   1f0bc:	4013      	ands	r3, r2
   1f0be:	d021      	beq.n	1f104 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f0c0:	1dfb      	adds	r3, r7, #7
   1f0c2:	781b      	ldrb	r3, [r3, #0]
   1f0c4:	0018      	movs	r0, r3
   1f0c6:	4b3f      	ldr	r3, [pc, #252]	; (1f1c4 <sd_mmc_spi_card_init+0x188>)
   1f0c8:	4798      	blx	r3
   1f0ca:	0003      	movs	r3, r0
   1f0cc:	001a      	movs	r2, r3
   1f0ce:	2301      	movs	r3, #1
   1f0d0:	4053      	eors	r3, r2
   1f0d2:	b2db      	uxtb	r3, r3
   1f0d4:	2b00      	cmp	r3, #0
   1f0d6:	d007      	beq.n	1f0e8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f0d8:	4b35      	ldr	r3, [pc, #212]	; (1f1b0 <sd_mmc_spi_card_init+0x174>)
   1f0da:	681b      	ldr	r3, [r3, #0]
   1f0dc:	2202      	movs	r2, #2
   1f0de:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f0e0:	4b39      	ldr	r3, [pc, #228]	; (1f1c8 <sd_mmc_spi_card_init+0x18c>)
   1f0e2:	4798      	blx	r3
   1f0e4:	0003      	movs	r3, r0
   1f0e6:	e05f      	b.n	1f1a8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f0e8:	4b38      	ldr	r3, [pc, #224]	; (1f1cc <sd_mmc_spi_card_init+0x190>)
   1f0ea:	2100      	movs	r1, #0
   1f0ec:	0018      	movs	r0, r3
   1f0ee:	4b32      	ldr	r3, [pc, #200]	; (1f1b8 <sd_mmc_spi_card_init+0x17c>)
   1f0f0:	4798      	blx	r3
   1f0f2:	0003      	movs	r3, r0
   1f0f4:	001a      	movs	r2, r3
   1f0f6:	2301      	movs	r3, #1
   1f0f8:	4053      	eors	r3, r2
   1f0fa:	b2db      	uxtb	r3, r3
   1f0fc:	2b00      	cmp	r3, #0
   1f0fe:	d001      	beq.n	1f104 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f100:	2300      	movs	r3, #0
   1f102:	e051      	b.n	1f1a8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f104:	4b2a      	ldr	r3, [pc, #168]	; (1f1b0 <sd_mmc_spi_card_init+0x174>)
   1f106:	681b      	ldr	r3, [r3, #0]
   1f108:	7adb      	ldrb	r3, [r3, #11]
   1f10a:	001a      	movs	r2, r3
   1f10c:	2301      	movs	r3, #1
   1f10e:	4013      	ands	r3, r2
   1f110:	d017      	beq.n	1f142 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1f112:	4b2f      	ldr	r3, [pc, #188]	; (1f1d0 <sd_mmc_spi_card_init+0x194>)
   1f114:	4798      	blx	r3
   1f116:	0003      	movs	r3, r0
   1f118:	001a      	movs	r2, r3
   1f11a:	2301      	movs	r3, #1
   1f11c:	4053      	eors	r3, r2
   1f11e:	b2db      	uxtb	r3, r3
   1f120:	2b00      	cmp	r3, #0
   1f122:	d001      	beq.n	1f128 <sd_mmc_spi_card_init+0xec>
			return false;
   1f124:	2300      	movs	r3, #0
   1f126:	e03f      	b.n	1f1a8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1f128:	4b2a      	ldr	r3, [pc, #168]	; (1f1d4 <sd_mmc_spi_card_init+0x198>)
   1f12a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1f12c:	4b2a      	ldr	r3, [pc, #168]	; (1f1d8 <sd_mmc_spi_card_init+0x19c>)
   1f12e:	4798      	blx	r3
   1f130:	0003      	movs	r3, r0
   1f132:	001a      	movs	r2, r3
   1f134:	2301      	movs	r3, #1
   1f136:	4053      	eors	r3, r2
   1f138:	b2db      	uxtb	r3, r3
   1f13a:	2b00      	cmp	r3, #0
   1f13c:	d001      	beq.n	1f142 <sd_mmc_spi_card_init+0x106>
			return false;
   1f13e:	2300      	movs	r3, #0
   1f140:	e032      	b.n	1f1a8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f142:	4b1b      	ldr	r3, [pc, #108]	; (1f1b0 <sd_mmc_spi_card_init+0x174>)
   1f144:	681b      	ldr	r3, [r3, #0]
   1f146:	7adb      	ldrb	r3, [r3, #11]
   1f148:	001a      	movs	r2, r3
   1f14a:	2301      	movs	r3, #1
   1f14c:	4013      	ands	r3, r2
   1f14e:	d016      	beq.n	1f17e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f150:	4b17      	ldr	r3, [pc, #92]	; (1f1b0 <sd_mmc_spi_card_init+0x174>)
   1f152:	681b      	ldr	r3, [r3, #0]
   1f154:	7adb      	ldrb	r3, [r3, #11]
   1f156:	001a      	movs	r2, r3
   1f158:	2308      	movs	r3, #8
   1f15a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f15c:	d10f      	bne.n	1f17e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f15e:	2380      	movs	r3, #128	; 0x80
   1f160:	009b      	lsls	r3, r3, #2
   1f162:	4a1e      	ldr	r2, [pc, #120]	; (1f1dc <sd_mmc_spi_card_init+0x1a0>)
   1f164:	0019      	movs	r1, r3
   1f166:	0010      	movs	r0, r2
   1f168:	4b13      	ldr	r3, [pc, #76]	; (1f1b8 <sd_mmc_spi_card_init+0x17c>)
   1f16a:	4798      	blx	r3
   1f16c:	0003      	movs	r3, r0
   1f16e:	001a      	movs	r2, r3
   1f170:	2301      	movs	r3, #1
   1f172:	4053      	eors	r3, r2
   1f174:	b2db      	uxtb	r3, r3
   1f176:	2b00      	cmp	r3, #0
   1f178:	d001      	beq.n	1f17e <sd_mmc_spi_card_init+0x142>
			return false;
   1f17a:	2300      	movs	r3, #0
   1f17c:	e014      	b.n	1f1a8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f17e:	4b0c      	ldr	r3, [pc, #48]	; (1f1b0 <sd_mmc_spi_card_init+0x174>)
   1f180:	681b      	ldr	r3, [r3, #0]
   1f182:	7adb      	ldrb	r3, [r3, #11]
   1f184:	001a      	movs	r2, r3
   1f186:	2301      	movs	r3, #1
   1f188:	4013      	ands	r3, r2
   1f18a:	d00a      	beq.n	1f1a2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f18c:	4b14      	ldr	r3, [pc, #80]	; (1f1e0 <sd_mmc_spi_card_init+0x1a4>)
   1f18e:	4798      	blx	r3
   1f190:	0003      	movs	r3, r0
   1f192:	001a      	movs	r2, r3
   1f194:	2301      	movs	r3, #1
   1f196:	4053      	eors	r3, r2
   1f198:	b2db      	uxtb	r3, r3
   1f19a:	2b00      	cmp	r3, #0
   1f19c:	d001      	beq.n	1f1a2 <sd_mmc_spi_card_init+0x166>
			return false;
   1f19e:	2300      	movs	r3, #0
   1f1a0:	e002      	b.n	1f1a8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f1a2:	4b10      	ldr	r3, [pc, #64]	; (1f1e4 <sd_mmc_spi_card_init+0x1a8>)
   1f1a4:	4798      	blx	r3
	return true;
   1f1a6:	2301      	movs	r3, #1
}
   1f1a8:	0018      	movs	r0, r3
   1f1aa:	46bd      	mov	sp, r7
   1f1ac:	b002      	add	sp, #8
   1f1ae:	bd80      	pop	{r7, pc}
   1f1b0:	20003e38 	.word	0x20003e38
   1f1b4:	0001fe69 	.word	0x0001fe69
   1f1b8:	0001feb5 	.word	0x0001feb5
   1f1bc:	0001e991 	.word	0x0001e991
   1f1c0:	0001e985 	.word	0x0001e985
   1f1c4:	0001e8a1 	.word	0x0001e8a1
   1f1c8:	0001f1e9 	.word	0x0001f1e9
   1f1cc:	0000113b 	.word	0x0000113b
   1f1d0:	0001eb2d 	.word	0x0001eb2d
   1f1d4:	0001eccd 	.word	0x0001eccd
   1f1d8:	0001ee15 	.word	0x0001ee15
   1f1dc:	00001110 	.word	0x00001110
   1f1e0:	0001edb9 	.word	0x0001edb9
   1f1e4:	0001efe1 	.word	0x0001efe1

0001f1e8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f1e8:	b580      	push	{r7, lr}
   1f1ea:	b082      	sub	sp, #8
   1f1ec:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f1ee:	2388      	movs	r3, #136	; 0x88
   1f1f0:	015b      	lsls	r3, r3, #5
   1f1f2:	2100      	movs	r1, #0
   1f1f4:	0018      	movs	r0, r3
   1f1f6:	4b32      	ldr	r3, [pc, #200]	; (1f2c0 <sd_mmc_spi_install_mmc+0xd8>)
   1f1f8:	4798      	blx	r3
   1f1fa:	0003      	movs	r3, r0
   1f1fc:	001a      	movs	r2, r3
   1f1fe:	2301      	movs	r3, #1
   1f200:	4053      	eors	r3, r2
   1f202:	b2db      	uxtb	r3, r3
   1f204:	2b00      	cmp	r3, #0
   1f206:	d001      	beq.n	1f20c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1f208:	2300      	movs	r3, #0
   1f20a:	e055      	b.n	1f2b8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1f20c:	4b2d      	ldr	r3, [pc, #180]	; (1f2c4 <sd_mmc_spi_install_mmc+0xdc>)
   1f20e:	4798      	blx	r3
   1f210:	0003      	movs	r3, r0
   1f212:	001a      	movs	r2, r3
   1f214:	2301      	movs	r3, #1
   1f216:	4053      	eors	r3, r2
   1f218:	b2db      	uxtb	r3, r3
   1f21a:	2b00      	cmp	r3, #0
   1f21c:	d001      	beq.n	1f222 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1f21e:	2300      	movs	r3, #0
   1f220:	e04a      	b.n	1f2b8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f222:	4b29      	ldr	r3, [pc, #164]	; (1f2c8 <sd_mmc_spi_install_mmc+0xe0>)
   1f224:	2100      	movs	r1, #0
   1f226:	0018      	movs	r0, r3
   1f228:	4b25      	ldr	r3, [pc, #148]	; (1f2c0 <sd_mmc_spi_install_mmc+0xd8>)
   1f22a:	4798      	blx	r3
   1f22c:	0003      	movs	r3, r0
   1f22e:	001a      	movs	r2, r3
   1f230:	2301      	movs	r3, #1
   1f232:	4053      	eors	r3, r2
   1f234:	b2db      	uxtb	r3, r3
   1f236:	2b00      	cmp	r3, #0
   1f238:	d001      	beq.n	1f23e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1f23a:	2300      	movs	r3, #0
   1f23c:	e03c      	b.n	1f2b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1f23e:	4b23      	ldr	r3, [pc, #140]	; (1f2cc <sd_mmc_spi_install_mmc+0xe4>)
   1f240:	4798      	blx	r3
   1f242:	0003      	movs	r3, r0
   1f244:	001a      	movs	r2, r3
   1f246:	2301      	movs	r3, #1
   1f248:	4053      	eors	r3, r2
   1f24a:	b2db      	uxtb	r3, r3
   1f24c:	2b00      	cmp	r3, #0
   1f24e:	d001      	beq.n	1f254 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1f250:	2300      	movs	r3, #0
   1f252:	e031      	b.n	1f2b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1f254:	4b1e      	ldr	r3, [pc, #120]	; (1f2d0 <sd_mmc_spi_install_mmc+0xe8>)
   1f256:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1f258:	4b1e      	ldr	r3, [pc, #120]	; (1f2d4 <sd_mmc_spi_install_mmc+0xec>)
   1f25a:	681b      	ldr	r3, [r3, #0]
   1f25c:	7b1b      	ldrb	r3, [r3, #12]
   1f25e:	2b3f      	cmp	r3, #63	; 0x3f
   1f260:	d90c      	bls.n	1f27c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1f262:	1dfb      	adds	r3, r7, #7
   1f264:	0018      	movs	r0, r3
   1f266:	4b1c      	ldr	r3, [pc, #112]	; (1f2d8 <sd_mmc_spi_install_mmc+0xf0>)
   1f268:	4798      	blx	r3
   1f26a:	0003      	movs	r3, r0
   1f26c:	001a      	movs	r2, r3
   1f26e:	2301      	movs	r3, #1
   1f270:	4053      	eors	r3, r2
   1f272:	b2db      	uxtb	r3, r3
   1f274:	2b00      	cmp	r3, #0
   1f276:	d001      	beq.n	1f27c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1f278:	2300      	movs	r3, #0
   1f27a:	e01d      	b.n	1f2b8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f27c:	2380      	movs	r3, #128	; 0x80
   1f27e:	009b      	lsls	r3, r3, #2
   1f280:	4a16      	ldr	r2, [pc, #88]	; (1f2dc <sd_mmc_spi_install_mmc+0xf4>)
   1f282:	0019      	movs	r1, r3
   1f284:	0010      	movs	r0, r2
   1f286:	4b0e      	ldr	r3, [pc, #56]	; (1f2c0 <sd_mmc_spi_install_mmc+0xd8>)
   1f288:	4798      	blx	r3
   1f28a:	0003      	movs	r3, r0
   1f28c:	001a      	movs	r2, r3
   1f28e:	2301      	movs	r3, #1
   1f290:	4053      	eors	r3, r2
   1f292:	b2db      	uxtb	r3, r3
   1f294:	2b00      	cmp	r3, #0
   1f296:	d001      	beq.n	1f29c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1f298:	2300      	movs	r3, #0
   1f29a:	e00d      	b.n	1f2b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1f29c:	4b10      	ldr	r3, [pc, #64]	; (1f2e0 <sd_mmc_spi_install_mmc+0xf8>)
   1f29e:	4798      	blx	r3
   1f2a0:	0003      	movs	r3, r0
   1f2a2:	001a      	movs	r2, r3
   1f2a4:	2301      	movs	r3, #1
   1f2a6:	4053      	eors	r3, r2
   1f2a8:	b2db      	uxtb	r3, r3
   1f2aa:	2b00      	cmp	r3, #0
   1f2ac:	d001      	beq.n	1f2b2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1f2ae:	2300      	movs	r3, #0
   1f2b0:	e002      	b.n	1f2b8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f2b2:	4b0c      	ldr	r3, [pc, #48]	; (1f2e4 <sd_mmc_spi_install_mmc+0xfc>)
   1f2b4:	4798      	blx	r3
	return true;
   1f2b6:	2301      	movs	r3, #1
}
   1f2b8:	0018      	movs	r0, r3
   1f2ba:	46bd      	mov	sp, r7
   1f2bc:	b002      	add	sp, #8
   1f2be:	bd80      	pop	{r7, pc}
   1f2c0:	0001feb5 	.word	0x0001feb5
   1f2c4:	0001e7f5 	.word	0x0001e7f5
   1f2c8:	0000113b 	.word	0x0000113b
   1f2cc:	0001eb2d 	.word	0x0001eb2d
   1f2d0:	0001eb9d 	.word	0x0001eb9d
   1f2d4:	20003e38 	.word	0x20003e38
   1f2d8:	0001ea01 	.word	0x0001ea01
   1f2dc:	00001110 	.word	0x00001110
   1f2e0:	0001edb9 	.word	0x0001edb9
   1f2e4:	0001efe1 	.word	0x0001efe1

0001f2e8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1f2e8:	b590      	push	{r4, r7, lr}
   1f2ea:	b085      	sub	sp, #20
   1f2ec:	af00      	add	r7, sp, #0
   1f2ee:	0002      	movs	r2, r0
   1f2f0:	1dfb      	adds	r3, r7, #7
   1f2f2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f2f4:	230f      	movs	r3, #15
   1f2f6:	18fc      	adds	r4, r7, r3
   1f2f8:	1dfb      	adds	r3, r7, #7
   1f2fa:	781b      	ldrb	r3, [r3, #0]
   1f2fc:	0018      	movs	r0, r3
   1f2fe:	4b13      	ldr	r3, [pc, #76]	; (1f34c <sd_mmc_check+0x64>)
   1f300:	4798      	blx	r3
   1f302:	0003      	movs	r3, r0
   1f304:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1f306:	230f      	movs	r3, #15
   1f308:	18fb      	adds	r3, r7, r3
   1f30a:	781b      	ldrb	r3, [r3, #0]
   1f30c:	2b01      	cmp	r3, #1
   1f30e:	d005      	beq.n	1f31c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1f310:	4b0f      	ldr	r3, [pc, #60]	; (1f350 <sd_mmc_check+0x68>)
   1f312:	4798      	blx	r3
		return sd_mmc_err;
   1f314:	230f      	movs	r3, #15
   1f316:	18fb      	adds	r3, r7, r3
   1f318:	781b      	ldrb	r3, [r3, #0]
   1f31a:	e012      	b.n	1f342 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1f31c:	4b0d      	ldr	r3, [pc, #52]	; (1f354 <sd_mmc_check+0x6c>)
   1f31e:	4798      	blx	r3
   1f320:	1e03      	subs	r3, r0, #0
   1f322:	d007      	beq.n	1f334 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1f324:	4b0c      	ldr	r3, [pc, #48]	; (1f358 <sd_mmc_check+0x70>)
   1f326:	681b      	ldr	r3, [r3, #0]
   1f328:	2200      	movs	r2, #0
   1f32a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1f32c:	4b08      	ldr	r3, [pc, #32]	; (1f350 <sd_mmc_check+0x68>)
   1f32e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1f330:	2301      	movs	r3, #1
   1f332:	e006      	b.n	1f342 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1f334:	4b08      	ldr	r3, [pc, #32]	; (1f358 <sd_mmc_check+0x70>)
   1f336:	681b      	ldr	r3, [r3, #0]
   1f338:	2203      	movs	r2, #3
   1f33a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1f33c:	4b04      	ldr	r3, [pc, #16]	; (1f350 <sd_mmc_check+0x68>)
   1f33e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1f340:	2303      	movs	r3, #3
}
   1f342:	0018      	movs	r0, r3
   1f344:	46bd      	mov	sp, r7
   1f346:	b005      	add	sp, #20
   1f348:	bd90      	pop	{r4, r7, pc}
   1f34a:	46c0      	nop			; (mov r8, r8)
   1f34c:	0001ef1d 	.word	0x0001ef1d
   1f350:	0001f019 	.word	0x0001f019
   1f354:	0001f03d 	.word	0x0001f03d
   1f358:	20003e38 	.word	0x20003e38

0001f35c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1f35c:	b580      	push	{r7, lr}
   1f35e:	b082      	sub	sp, #8
   1f360:	af00      	add	r7, sp, #0
   1f362:	0002      	movs	r2, r0
   1f364:	1dfb      	adds	r3, r7, #7
   1f366:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f368:	1dfb      	adds	r3, r7, #7
   1f36a:	781b      	ldrb	r3, [r3, #0]
   1f36c:	0018      	movs	r0, r3
   1f36e:	4b07      	ldr	r3, [pc, #28]	; (1f38c <sd_mmc_get_type+0x30>)
   1f370:	4798      	blx	r3
   1f372:	1e03      	subs	r3, r0, #0
   1f374:	d001      	beq.n	1f37a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1f376:	2300      	movs	r3, #0
   1f378:	e004      	b.n	1f384 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1f37a:	4b05      	ldr	r3, [pc, #20]	; (1f390 <sd_mmc_get_type+0x34>)
   1f37c:	4798      	blx	r3
	return sd_mmc_card->type;
   1f37e:	4b05      	ldr	r3, [pc, #20]	; (1f394 <sd_mmc_get_type+0x38>)
   1f380:	681b      	ldr	r3, [r3, #0]
   1f382:	7adb      	ldrb	r3, [r3, #11]
}
   1f384:	0018      	movs	r0, r3
   1f386:	46bd      	mov	sp, r7
   1f388:	b002      	add	sp, #8
   1f38a:	bd80      	pop	{r7, pc}
   1f38c:	0001ef1d 	.word	0x0001ef1d
   1f390:	0001f019 	.word	0x0001f019
   1f394:	20003e38 	.word	0x20003e38

0001f398 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1f398:	b580      	push	{r7, lr}
   1f39a:	b082      	sub	sp, #8
   1f39c:	af00      	add	r7, sp, #0
   1f39e:	0002      	movs	r2, r0
   1f3a0:	1dfb      	adds	r3, r7, #7
   1f3a2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1f3a4:	1dfb      	adds	r3, r7, #7
   1f3a6:	781b      	ldrb	r3, [r3, #0]
   1f3a8:	0018      	movs	r0, r3
   1f3aa:	4b07      	ldr	r3, [pc, #28]	; (1f3c8 <sd_mmc_get_capacity+0x30>)
   1f3ac:	4798      	blx	r3
   1f3ae:	1e03      	subs	r3, r0, #0
   1f3b0:	d001      	beq.n	1f3b6 <sd_mmc_get_capacity+0x1e>
		return 0;
   1f3b2:	2300      	movs	r3, #0
   1f3b4:	e004      	b.n	1f3c0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1f3b6:	4b05      	ldr	r3, [pc, #20]	; (1f3cc <sd_mmc_get_capacity+0x34>)
   1f3b8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1f3ba:	4b05      	ldr	r3, [pc, #20]	; (1f3d0 <sd_mmc_get_capacity+0x38>)
   1f3bc:	681b      	ldr	r3, [r3, #0]
   1f3be:	685b      	ldr	r3, [r3, #4]
}
   1f3c0:	0018      	movs	r0, r3
   1f3c2:	46bd      	mov	sp, r7
   1f3c4:	b002      	add	sp, #8
   1f3c6:	bd80      	pop	{r7, pc}
   1f3c8:	0001ef1d 	.word	0x0001ef1d
   1f3cc:	0001f019 	.word	0x0001f019
   1f3d0:	20003e38 	.word	0x20003e38

0001f3d4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1f3d4:	b580      	push	{r7, lr}
   1f3d6:	b082      	sub	sp, #8
   1f3d8:	af00      	add	r7, sp, #0
   1f3da:	0002      	movs	r2, r0
   1f3dc:	1dfb      	adds	r3, r7, #7
   1f3de:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1f3e0:	2300      	movs	r3, #0
}
   1f3e2:	0018      	movs	r0, r3
   1f3e4:	46bd      	mov	sp, r7
   1f3e6:	b002      	add	sp, #8
   1f3e8:	bd80      	pop	{r7, pc}
	...

0001f3ec <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f3ec:	b590      	push	{r4, r7, lr}
   1f3ee:	b089      	sub	sp, #36	; 0x24
   1f3f0:	af02      	add	r7, sp, #8
   1f3f2:	6039      	str	r1, [r7, #0]
   1f3f4:	0011      	movs	r1, r2
   1f3f6:	1dfb      	adds	r3, r7, #7
   1f3f8:	1c02      	adds	r2, r0, #0
   1f3fa:	701a      	strb	r2, [r3, #0]
   1f3fc:	1d3b      	adds	r3, r7, #4
   1f3fe:	1c0a      	adds	r2, r1, #0
   1f400:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f402:	230f      	movs	r3, #15
   1f404:	18fc      	adds	r4, r7, r3
   1f406:	1dfb      	adds	r3, r7, #7
   1f408:	781b      	ldrb	r3, [r3, #0]
   1f40a:	0018      	movs	r0, r3
   1f40c:	4b29      	ldr	r3, [pc, #164]	; (1f4b4 <sd_mmc_init_read_blocks+0xc8>)
   1f40e:	4798      	blx	r3
   1f410:	0003      	movs	r3, r0
   1f412:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f414:	230f      	movs	r3, #15
   1f416:	18fb      	adds	r3, r7, r3
   1f418:	781b      	ldrb	r3, [r3, #0]
   1f41a:	2b00      	cmp	r3, #0
   1f41c:	d003      	beq.n	1f426 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1f41e:	230f      	movs	r3, #15
   1f420:	18fb      	adds	r3, r7, r3
   1f422:	781b      	ldrb	r3, [r3, #0]
   1f424:	e041      	b.n	1f4aa <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1f426:	4b24      	ldr	r3, [pc, #144]	; (1f4b8 <sd_mmc_init_read_blocks+0xcc>)
   1f428:	4798      	blx	r3
   1f42a:	0003      	movs	r3, r0
   1f42c:	001a      	movs	r2, r3
   1f42e:	2301      	movs	r3, #1
   1f430:	4053      	eors	r3, r2
   1f432:	b2db      	uxtb	r3, r3
   1f434:	2b00      	cmp	r3, #0
   1f436:	d003      	beq.n	1f440 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1f438:	4b20      	ldr	r3, [pc, #128]	; (1f4bc <sd_mmc_init_read_blocks+0xd0>)
   1f43a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f43c:	2305      	movs	r3, #5
   1f43e:	e034      	b.n	1f4aa <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1f440:	1d3b      	adds	r3, r7, #4
   1f442:	881b      	ldrh	r3, [r3, #0]
   1f444:	2b01      	cmp	r3, #1
   1f446:	d902      	bls.n	1f44e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1f448:	4b1d      	ldr	r3, [pc, #116]	; (1f4c0 <sd_mmc_init_read_blocks+0xd4>)
   1f44a:	617b      	str	r3, [r7, #20]
   1f44c:	e001      	b.n	1f452 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1f44e:	4b1d      	ldr	r3, [pc, #116]	; (1f4c4 <sd_mmc_init_read_blocks+0xd8>)
   1f450:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f452:	4b1d      	ldr	r3, [pc, #116]	; (1f4c8 <sd_mmc_init_read_blocks+0xdc>)
   1f454:	681b      	ldr	r3, [r3, #0]
   1f456:	7adb      	ldrb	r3, [r3, #11]
   1f458:	001a      	movs	r2, r3
   1f45a:	2308      	movs	r3, #8
   1f45c:	4013      	ands	r3, r2
   1f45e:	d002      	beq.n	1f466 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1f460:	683b      	ldr	r3, [r7, #0]
   1f462:	613b      	str	r3, [r7, #16]
   1f464:	e002      	b.n	1f46c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f466:	683b      	ldr	r3, [r7, #0]
   1f468:	025b      	lsls	r3, r3, #9
   1f46a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f46c:	1d3b      	adds	r3, r7, #4
   1f46e:	881c      	ldrh	r4, [r3, #0]
   1f470:	2380      	movs	r3, #128	; 0x80
   1f472:	009a      	lsls	r2, r3, #2
   1f474:	6939      	ldr	r1, [r7, #16]
   1f476:	6978      	ldr	r0, [r7, #20]
   1f478:	2301      	movs	r3, #1
   1f47a:	9300      	str	r3, [sp, #0]
   1f47c:	0023      	movs	r3, r4
   1f47e:	4c13      	ldr	r4, [pc, #76]	; (1f4cc <sd_mmc_init_read_blocks+0xe0>)
   1f480:	47a0      	blx	r4
   1f482:	0003      	movs	r3, r0
   1f484:	001a      	movs	r2, r3
   1f486:	2301      	movs	r3, #1
   1f488:	4053      	eors	r3, r2
   1f48a:	b2db      	uxtb	r3, r3
   1f48c:	2b00      	cmp	r3, #0
   1f48e:	d003      	beq.n	1f498 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1f490:	4b0a      	ldr	r3, [pc, #40]	; (1f4bc <sd_mmc_init_read_blocks+0xd0>)
   1f492:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f494:	2305      	movs	r3, #5
   1f496:	e008      	b.n	1f4aa <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f498:	4b0d      	ldr	r3, [pc, #52]	; (1f4d0 <sd_mmc_init_read_blocks+0xe4>)
   1f49a:	1d3a      	adds	r2, r7, #4
   1f49c:	8812      	ldrh	r2, [r2, #0]
   1f49e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f4a0:	4b0c      	ldr	r3, [pc, #48]	; (1f4d4 <sd_mmc_init_read_blocks+0xe8>)
   1f4a2:	1d3a      	adds	r2, r7, #4
   1f4a4:	8812      	ldrh	r2, [r2, #0]
   1f4a6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f4a8:	2300      	movs	r3, #0
}
   1f4aa:	0018      	movs	r0, r3
   1f4ac:	46bd      	mov	sp, r7
   1f4ae:	b007      	add	sp, #28
   1f4b0:	bd90      	pop	{r4, r7, pc}
   1f4b2:	46c0      	nop			; (mov r8, r8)
   1f4b4:	0001ef1d 	.word	0x0001ef1d
   1f4b8:	0001edb9 	.word	0x0001edb9
   1f4bc:	0001f019 	.word	0x0001f019
   1f4c0:	00101112 	.word	0x00101112
   1f4c4:	00081111 	.word	0x00081111
   1f4c8:	20003e38 	.word	0x20003e38
   1f4cc:	0001fedd 	.word	0x0001fedd
   1f4d0:	20003e3e 	.word	0x20003e3e
   1f4d4:	20003e3c 	.word	0x20003e3c

0001f4d8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1f4d8:	b580      	push	{r7, lr}
   1f4da:	b082      	sub	sp, #8
   1f4dc:	af00      	add	r7, sp, #0
   1f4de:	6078      	str	r0, [r7, #4]
   1f4e0:	000a      	movs	r2, r1
   1f4e2:	1cbb      	adds	r3, r7, #2
   1f4e4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1f4e6:	1cbb      	adds	r3, r7, #2
   1f4e8:	881a      	ldrh	r2, [r3, #0]
   1f4ea:	687b      	ldr	r3, [r7, #4]
   1f4ec:	0011      	movs	r1, r2
   1f4ee:	0018      	movs	r0, r3
   1f4f0:	4b0d      	ldr	r3, [pc, #52]	; (1f528 <sd_mmc_start_read_blocks+0x50>)
   1f4f2:	4798      	blx	r3
   1f4f4:	0003      	movs	r3, r0
   1f4f6:	001a      	movs	r2, r3
   1f4f8:	2301      	movs	r3, #1
   1f4fa:	4053      	eors	r3, r2
   1f4fc:	b2db      	uxtb	r3, r3
   1f4fe:	2b00      	cmp	r3, #0
   1f500:	d004      	beq.n	1f50c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f502:	4b0a      	ldr	r3, [pc, #40]	; (1f52c <sd_mmc_start_read_blocks+0x54>)
   1f504:	2200      	movs	r2, #0
   1f506:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f508:	2305      	movs	r3, #5
   1f50a:	e008      	b.n	1f51e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f50c:	4b07      	ldr	r3, [pc, #28]	; (1f52c <sd_mmc_start_read_blocks+0x54>)
   1f50e:	881a      	ldrh	r2, [r3, #0]
   1f510:	1cbb      	adds	r3, r7, #2
   1f512:	881b      	ldrh	r3, [r3, #0]
   1f514:	1ad3      	subs	r3, r2, r3
   1f516:	b29a      	uxth	r2, r3
   1f518:	4b04      	ldr	r3, [pc, #16]	; (1f52c <sd_mmc_start_read_blocks+0x54>)
   1f51a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f51c:	2300      	movs	r3, #0
}
   1f51e:	0018      	movs	r0, r3
   1f520:	46bd      	mov	sp, r7
   1f522:	b002      	add	sp, #8
   1f524:	bd80      	pop	{r7, pc}
   1f526:	46c0      	nop			; (mov r8, r8)
   1f528:	000201ad 	.word	0x000201ad
   1f52c:	20003e3e 	.word	0x20003e3e

0001f530 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1f530:	b580      	push	{r7, lr}
   1f532:	b082      	sub	sp, #8
   1f534:	af00      	add	r7, sp, #0
   1f536:	0002      	movs	r2, r0
   1f538:	1dfb      	adds	r3, r7, #7
   1f53a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1f53c:	4b1c      	ldr	r3, [pc, #112]	; (1f5b0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1f53e:	4798      	blx	r3
   1f540:	0003      	movs	r3, r0
   1f542:	001a      	movs	r2, r3
   1f544:	2301      	movs	r3, #1
   1f546:	4053      	eors	r3, r2
   1f548:	b2db      	uxtb	r3, r3
   1f54a:	2b00      	cmp	r3, #0
   1f54c:	d001      	beq.n	1f552 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f54e:	2305      	movs	r3, #5
   1f550:	e029      	b.n	1f5a6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1f552:	1dfb      	adds	r3, r7, #7
   1f554:	781b      	ldrb	r3, [r3, #0]
   1f556:	2b00      	cmp	r3, #0
   1f558:	d003      	beq.n	1f562 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f55a:	4b16      	ldr	r3, [pc, #88]	; (1f5b4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f55c:	2200      	movs	r2, #0
   1f55e:	801a      	strh	r2, [r3, #0]
   1f560:	e005      	b.n	1f56e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f562:	4b14      	ldr	r3, [pc, #80]	; (1f5b4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1f564:	881b      	ldrh	r3, [r3, #0]
   1f566:	2b00      	cmp	r3, #0
   1f568:	d001      	beq.n	1f56e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1f56a:	2300      	movs	r3, #0
   1f56c:	e01b      	b.n	1f5a6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f56e:	4b12      	ldr	r3, [pc, #72]	; (1f5b8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1f570:	881b      	ldrh	r3, [r3, #0]
   1f572:	2b01      	cmp	r3, #1
   1f574:	d103      	bne.n	1f57e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f576:	4b11      	ldr	r3, [pc, #68]	; (1f5bc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f578:	4798      	blx	r3
		return SD_MMC_OK;
   1f57a:	2300      	movs	r3, #0
   1f57c:	e013      	b.n	1f5a6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1f57e:	4b10      	ldr	r3, [pc, #64]	; (1f5c0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f580:	2100      	movs	r1, #0
   1f582:	0018      	movs	r0, r3
   1f584:	4b0f      	ldr	r3, [pc, #60]	; (1f5c4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f586:	4798      	blx	r3
   1f588:	0003      	movs	r3, r0
   1f58a:	001a      	movs	r2, r3
   1f58c:	2301      	movs	r3, #1
   1f58e:	4053      	eors	r3, r2
   1f590:	b2db      	uxtb	r3, r3
   1f592:	2b00      	cmp	r3, #0
   1f594:	d004      	beq.n	1f5a0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1f596:	4b0a      	ldr	r3, [pc, #40]	; (1f5c0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1f598:	2100      	movs	r1, #0
   1f59a:	0018      	movs	r0, r3
   1f59c:	4b09      	ldr	r3, [pc, #36]	; (1f5c4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1f59e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1f5a0:	4b06      	ldr	r3, [pc, #24]	; (1f5bc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1f5a2:	4798      	blx	r3
	return SD_MMC_OK;
   1f5a4:	2300      	movs	r3, #0
}
   1f5a6:	0018      	movs	r0, r3
   1f5a8:	46bd      	mov	sp, r7
   1f5aa:	b002      	add	sp, #8
   1f5ac:	bd80      	pop	{r7, pc}
   1f5ae:	46c0      	nop			; (mov r8, r8)
   1f5b0:	00020251 	.word	0x00020251
   1f5b4:	20003e3e 	.word	0x20003e3e
   1f5b8:	20003e3c 	.word	0x20003e3c
   1f5bc:	0001f019 	.word	0x0001f019
   1f5c0:	0000310c 	.word	0x0000310c
   1f5c4:	0001feb5 	.word	0x0001feb5

0001f5c8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1f5c8:	b590      	push	{r4, r7, lr}
   1f5ca:	b089      	sub	sp, #36	; 0x24
   1f5cc:	af02      	add	r7, sp, #8
   1f5ce:	6039      	str	r1, [r7, #0]
   1f5d0:	0011      	movs	r1, r2
   1f5d2:	1dfb      	adds	r3, r7, #7
   1f5d4:	1c02      	adds	r2, r0, #0
   1f5d6:	701a      	strb	r2, [r3, #0]
   1f5d8:	1d3b      	adds	r3, r7, #4
   1f5da:	1c0a      	adds	r2, r1, #0
   1f5dc:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f5de:	230f      	movs	r3, #15
   1f5e0:	18fc      	adds	r4, r7, r3
   1f5e2:	1dfb      	adds	r3, r7, #7
   1f5e4:	781b      	ldrb	r3, [r3, #0]
   1f5e6:	0018      	movs	r0, r3
   1f5e8:	4b28      	ldr	r3, [pc, #160]	; (1f68c <sd_mmc_init_write_blocks+0xc4>)
   1f5ea:	4798      	blx	r3
   1f5ec:	0003      	movs	r3, r0
   1f5ee:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1f5f0:	230f      	movs	r3, #15
   1f5f2:	18fb      	adds	r3, r7, r3
   1f5f4:	781b      	ldrb	r3, [r3, #0]
   1f5f6:	2b00      	cmp	r3, #0
   1f5f8:	d003      	beq.n	1f602 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1f5fa:	230f      	movs	r3, #15
   1f5fc:	18fb      	adds	r3, r7, r3
   1f5fe:	781b      	ldrb	r3, [r3, #0]
   1f600:	e03f      	b.n	1f682 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1f602:	1dfb      	adds	r3, r7, #7
   1f604:	781b      	ldrb	r3, [r3, #0]
   1f606:	0018      	movs	r0, r3
   1f608:	4b21      	ldr	r3, [pc, #132]	; (1f690 <sd_mmc_init_write_blocks+0xc8>)
   1f60a:	4798      	blx	r3
   1f60c:	1e03      	subs	r3, r0, #0
   1f60e:	d003      	beq.n	1f618 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1f610:	4b20      	ldr	r3, [pc, #128]	; (1f694 <sd_mmc_init_write_blocks+0xcc>)
   1f612:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1f614:	2307      	movs	r3, #7
   1f616:	e034      	b.n	1f682 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1f618:	1d3b      	adds	r3, r7, #4
   1f61a:	881b      	ldrh	r3, [r3, #0]
   1f61c:	2b01      	cmp	r3, #1
   1f61e:	d902      	bls.n	1f626 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1f620:	4b1d      	ldr	r3, [pc, #116]	; (1f698 <sd_mmc_init_write_blocks+0xd0>)
   1f622:	617b      	str	r3, [r7, #20]
   1f624:	e001      	b.n	1f62a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1f626:	4b1d      	ldr	r3, [pc, #116]	; (1f69c <sd_mmc_init_write_blocks+0xd4>)
   1f628:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1f62a:	4b1d      	ldr	r3, [pc, #116]	; (1f6a0 <sd_mmc_init_write_blocks+0xd8>)
   1f62c:	681b      	ldr	r3, [r3, #0]
   1f62e:	7adb      	ldrb	r3, [r3, #11]
   1f630:	001a      	movs	r2, r3
   1f632:	2308      	movs	r3, #8
   1f634:	4013      	ands	r3, r2
   1f636:	d002      	beq.n	1f63e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1f638:	683b      	ldr	r3, [r7, #0]
   1f63a:	613b      	str	r3, [r7, #16]
   1f63c:	e002      	b.n	1f644 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1f63e:	683b      	ldr	r3, [r7, #0]
   1f640:	025b      	lsls	r3, r3, #9
   1f642:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1f644:	1d3b      	adds	r3, r7, #4
   1f646:	881c      	ldrh	r4, [r3, #0]
   1f648:	2380      	movs	r3, #128	; 0x80
   1f64a:	009a      	lsls	r2, r3, #2
   1f64c:	6939      	ldr	r1, [r7, #16]
   1f64e:	6978      	ldr	r0, [r7, #20]
   1f650:	2301      	movs	r3, #1
   1f652:	9300      	str	r3, [sp, #0]
   1f654:	0023      	movs	r3, r4
   1f656:	4c13      	ldr	r4, [pc, #76]	; (1f6a4 <sd_mmc_init_write_blocks+0xdc>)
   1f658:	47a0      	blx	r4
   1f65a:	0003      	movs	r3, r0
   1f65c:	001a      	movs	r2, r3
   1f65e:	2301      	movs	r3, #1
   1f660:	4053      	eors	r3, r2
   1f662:	b2db      	uxtb	r3, r3
   1f664:	2b00      	cmp	r3, #0
   1f666:	d003      	beq.n	1f670 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1f668:	4b0a      	ldr	r3, [pc, #40]	; (1f694 <sd_mmc_init_write_blocks+0xcc>)
   1f66a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1f66c:	2305      	movs	r3, #5
   1f66e:	e008      	b.n	1f682 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1f670:	4b0d      	ldr	r3, [pc, #52]	; (1f6a8 <sd_mmc_init_write_blocks+0xe0>)
   1f672:	1d3a      	adds	r2, r7, #4
   1f674:	8812      	ldrh	r2, [r2, #0]
   1f676:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1f678:	4b0c      	ldr	r3, [pc, #48]	; (1f6ac <sd_mmc_init_write_blocks+0xe4>)
   1f67a:	1d3a      	adds	r2, r7, #4
   1f67c:	8812      	ldrh	r2, [r2, #0]
   1f67e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f680:	2300      	movs	r3, #0
}
   1f682:	0018      	movs	r0, r3
   1f684:	46bd      	mov	sp, r7
   1f686:	b007      	add	sp, #28
   1f688:	bd90      	pop	{r4, r7, pc}
   1f68a:	46c0      	nop			; (mov r8, r8)
   1f68c:	0001ef1d 	.word	0x0001ef1d
   1f690:	0001f3d5 	.word	0x0001f3d5
   1f694:	0001f019 	.word	0x0001f019
   1f698:	00109119 	.word	0x00109119
   1f69c:	00089118 	.word	0x00089118
   1f6a0:	20003e38 	.word	0x20003e38
   1f6a4:	0001fedd 	.word	0x0001fedd
   1f6a8:	20003e3e 	.word	0x20003e3e
   1f6ac:	20003e3c 	.word	0x20003e3c

0001f6b0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1f6b0:	b580      	push	{r7, lr}
   1f6b2:	b082      	sub	sp, #8
   1f6b4:	af00      	add	r7, sp, #0
   1f6b6:	6078      	str	r0, [r7, #4]
   1f6b8:	000a      	movs	r2, r1
   1f6ba:	1cbb      	adds	r3, r7, #2
   1f6bc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1f6be:	1cbb      	adds	r3, r7, #2
   1f6c0:	881a      	ldrh	r2, [r3, #0]
   1f6c2:	687b      	ldr	r3, [r7, #4]
   1f6c4:	0011      	movs	r1, r2
   1f6c6:	0018      	movs	r0, r3
   1f6c8:	4b0d      	ldr	r3, [pc, #52]	; (1f700 <sd_mmc_start_write_blocks+0x50>)
   1f6ca:	4798      	blx	r3
   1f6cc:	0003      	movs	r3, r0
   1f6ce:	001a      	movs	r2, r3
   1f6d0:	2301      	movs	r3, #1
   1f6d2:	4053      	eors	r3, r2
   1f6d4:	b2db      	uxtb	r3, r3
   1f6d6:	2b00      	cmp	r3, #0
   1f6d8:	d004      	beq.n	1f6e4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1f6da:	4b0a      	ldr	r3, [pc, #40]	; (1f704 <sd_mmc_start_write_blocks+0x54>)
   1f6dc:	2200      	movs	r2, #0
   1f6de:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1f6e0:	2305      	movs	r3, #5
   1f6e2:	e008      	b.n	1f6f6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1f6e4:	4b07      	ldr	r3, [pc, #28]	; (1f704 <sd_mmc_start_write_blocks+0x54>)
   1f6e6:	881a      	ldrh	r2, [r3, #0]
   1f6e8:	1cbb      	adds	r3, r7, #2
   1f6ea:	881b      	ldrh	r3, [r3, #0]
   1f6ec:	1ad3      	subs	r3, r2, r3
   1f6ee:	b29a      	uxth	r2, r3
   1f6f0:	4b04      	ldr	r3, [pc, #16]	; (1f704 <sd_mmc_start_write_blocks+0x54>)
   1f6f2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1f6f4:	2300      	movs	r3, #0
}
   1f6f6:	0018      	movs	r0, r3
   1f6f8:	46bd      	mov	sp, r7
   1f6fa:	b002      	add	sp, #8
   1f6fc:	bd80      	pop	{r7, pc}
   1f6fe:	46c0      	nop			; (mov r8, r8)
   1f700:	0002025d 	.word	0x0002025d
   1f704:	20003e3e 	.word	0x20003e3e

0001f708 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1f708:	b580      	push	{r7, lr}
   1f70a:	b082      	sub	sp, #8
   1f70c:	af00      	add	r7, sp, #0
   1f70e:	0002      	movs	r2, r0
   1f710:	1dfb      	adds	r3, r7, #7
   1f712:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1f714:	4b13      	ldr	r3, [pc, #76]	; (1f764 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1f716:	4798      	blx	r3
   1f718:	0003      	movs	r3, r0
   1f71a:	001a      	movs	r2, r3
   1f71c:	2301      	movs	r3, #1
   1f71e:	4053      	eors	r3, r2
   1f720:	b2db      	uxtb	r3, r3
   1f722:	2b00      	cmp	r3, #0
   1f724:	d001      	beq.n	1f72a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1f726:	2305      	movs	r3, #5
   1f728:	e018      	b.n	1f75c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1f72a:	1dfb      	adds	r3, r7, #7
   1f72c:	781b      	ldrb	r3, [r3, #0]
   1f72e:	2b00      	cmp	r3, #0
   1f730:	d003      	beq.n	1f73a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1f732:	4b0d      	ldr	r3, [pc, #52]	; (1f768 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f734:	2200      	movs	r2, #0
   1f736:	801a      	strh	r2, [r3, #0]
   1f738:	e005      	b.n	1f746 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1f73a:	4b0b      	ldr	r3, [pc, #44]	; (1f768 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1f73c:	881b      	ldrh	r3, [r3, #0]
   1f73e:	2b00      	cmp	r3, #0
   1f740:	d001      	beq.n	1f746 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1f742:	2300      	movs	r3, #0
   1f744:	e00a      	b.n	1f75c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1f746:	4b09      	ldr	r3, [pc, #36]	; (1f76c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1f748:	881b      	ldrh	r3, [r3, #0]
   1f74a:	2b01      	cmp	r3, #1
   1f74c:	d103      	bne.n	1f756 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1f74e:	4b08      	ldr	r3, [pc, #32]	; (1f770 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f750:	4798      	blx	r3
		return SD_MMC_OK;
   1f752:	2300      	movs	r3, #0
   1f754:	e002      	b.n	1f75c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1f756:	4b06      	ldr	r3, [pc, #24]	; (1f770 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1f758:	4798      	blx	r3
	return SD_MMC_OK;
   1f75a:	2300      	movs	r3, #0
}
   1f75c:	0018      	movs	r0, r3
   1f75e:	46bd      	mov	sp, r7
   1f760:	b002      	add	sp, #8
   1f762:	bd80      	pop	{r7, pc}
   1f764:	0002031d 	.word	0x0002031d
   1f768:	20003e3e 	.word	0x20003e3e
   1f76c:	20003e3c 	.word	0x20003e3c
   1f770:	0001f019 	.word	0x0001f019

0001f774 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1f774:	b580      	push	{r7, lr}
   1f776:	b082      	sub	sp, #8
   1f778:	af00      	add	r7, sp, #0
   1f77a:	0002      	movs	r2, r0
   1f77c:	1dfb      	adds	r3, r7, #7
   1f77e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1f780:	1dfb      	adds	r3, r7, #7
   1f782:	781b      	ldrb	r3, [r3, #0]
   1f784:	0018      	movs	r0, r3
   1f786:	4b16      	ldr	r3, [pc, #88]	; (1f7e0 <sd_mmc_test_unit_ready+0x6c>)
   1f788:	4798      	blx	r3
   1f78a:	0003      	movs	r3, r0
   1f78c:	2b01      	cmp	r3, #1
   1f78e:	d019      	beq.n	1f7c4 <sd_mmc_test_unit_ready+0x50>
   1f790:	2b02      	cmp	r3, #2
   1f792:	d019      	beq.n	1f7c8 <sd_mmc_test_unit_ready+0x54>
   1f794:	2b00      	cmp	r3, #0
   1f796:	d11e      	bne.n	1f7d6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1f798:	1dfb      	adds	r3, r7, #7
   1f79a:	781b      	ldrb	r3, [r3, #0]
   1f79c:	4a11      	ldr	r2, [pc, #68]	; (1f7e4 <sd_mmc_test_unit_ready+0x70>)
   1f79e:	5cd3      	ldrb	r3, [r2, r3]
   1f7a0:	2b00      	cmp	r3, #0
   1f7a2:	d001      	beq.n	1f7a8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1f7a4:	2302      	movs	r3, #2
   1f7a6:	e017      	b.n	1f7d8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1f7a8:	1dfb      	adds	r3, r7, #7
   1f7aa:	781b      	ldrb	r3, [r3, #0]
   1f7ac:	0018      	movs	r0, r3
   1f7ae:	4b0e      	ldr	r3, [pc, #56]	; (1f7e8 <sd_mmc_test_unit_ready+0x74>)
   1f7b0:	4798      	blx	r3
   1f7b2:	0003      	movs	r3, r0
   1f7b4:	001a      	movs	r2, r3
   1f7b6:	2303      	movs	r3, #3
   1f7b8:	4013      	ands	r3, r2
   1f7ba:	d001      	beq.n	1f7c0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1f7bc:	2300      	movs	r3, #0
   1f7be:	e00b      	b.n	1f7d8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1f7c0:	2302      	movs	r3, #2
   1f7c2:	e009      	b.n	1f7d8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1f7c4:	2303      	movs	r3, #3
   1f7c6:	e007      	b.n	1f7d8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1f7c8:	1dfb      	adds	r3, r7, #7
   1f7ca:	781b      	ldrb	r3, [r3, #0]
   1f7cc:	4a05      	ldr	r2, [pc, #20]	; (1f7e4 <sd_mmc_test_unit_ready+0x70>)
   1f7ce:	2100      	movs	r1, #0
   1f7d0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1f7d2:	2302      	movs	r3, #2
   1f7d4:	e000      	b.n	1f7d8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1f7d6:	2301      	movs	r3, #1
	}
}
   1f7d8:	0018      	movs	r0, r3
   1f7da:	46bd      	mov	sp, r7
   1f7dc:	b002      	add	sp, #8
   1f7de:	bd80      	pop	{r7, pc}
   1f7e0:	0001f2e9 	.word	0x0001f2e9
   1f7e4:	20003e40 	.word	0x20003e40
   1f7e8:	0001f35d 	.word	0x0001f35d

0001f7ec <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1f7ec:	b580      	push	{r7, lr}
   1f7ee:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1f7f0:	2000      	movs	r0, #0
   1f7f2:	4b03      	ldr	r3, [pc, #12]	; (1f800 <sd_mmc_test_unit_ready_0+0x14>)
   1f7f4:	4798      	blx	r3
   1f7f6:	0003      	movs	r3, r0
}
   1f7f8:	0018      	movs	r0, r3
   1f7fa:	46bd      	mov	sp, r7
   1f7fc:	bd80      	pop	{r7, pc}
   1f7fe:	46c0      	nop			; (mov r8, r8)
   1f800:	0001f775 	.word	0x0001f775

0001f804 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1f804:	b580      	push	{r7, lr}
   1f806:	b082      	sub	sp, #8
   1f808:	af00      	add	r7, sp, #0
   1f80a:	0002      	movs	r2, r0
   1f80c:	6039      	str	r1, [r7, #0]
   1f80e:	1dfb      	adds	r3, r7, #7
   1f810:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1f812:	1dfb      	adds	r3, r7, #7
   1f814:	781b      	ldrb	r3, [r3, #0]
   1f816:	0018      	movs	r0, r3
   1f818:	4b08      	ldr	r3, [pc, #32]	; (1f83c <sd_mmc_read_capacity+0x38>)
   1f81a:	4798      	blx	r3
   1f81c:	0003      	movs	r3, r0
   1f81e:	005b      	lsls	r3, r3, #1
   1f820:	1e5a      	subs	r2, r3, #1
   1f822:	683b      	ldr	r3, [r7, #0]
   1f824:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1f826:	1dfb      	adds	r3, r7, #7
   1f828:	781b      	ldrb	r3, [r3, #0]
   1f82a:	0018      	movs	r0, r3
   1f82c:	4b04      	ldr	r3, [pc, #16]	; (1f840 <sd_mmc_read_capacity+0x3c>)
   1f82e:	4798      	blx	r3
   1f830:	0003      	movs	r3, r0
}
   1f832:	0018      	movs	r0, r3
   1f834:	46bd      	mov	sp, r7
   1f836:	b002      	add	sp, #8
   1f838:	bd80      	pop	{r7, pc}
   1f83a:	46c0      	nop			; (mov r8, r8)
   1f83c:	0001f399 	.word	0x0001f399
   1f840:	0001f775 	.word	0x0001f775

0001f844 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1f844:	b580      	push	{r7, lr}
   1f846:	b082      	sub	sp, #8
   1f848:	af00      	add	r7, sp, #0
   1f84a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1f84c:	687b      	ldr	r3, [r7, #4]
   1f84e:	0019      	movs	r1, r3
   1f850:	2000      	movs	r0, #0
   1f852:	4b03      	ldr	r3, [pc, #12]	; (1f860 <sd_mmc_read_capacity_0+0x1c>)
   1f854:	4798      	blx	r3
   1f856:	0003      	movs	r3, r0
}
   1f858:	0018      	movs	r0, r3
   1f85a:	46bd      	mov	sp, r7
   1f85c:	b002      	add	sp, #8
   1f85e:	bd80      	pop	{r7, pc}
   1f860:	0001f805 	.word	0x0001f805

0001f864 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1f864:	b580      	push	{r7, lr}
   1f866:	b082      	sub	sp, #8
   1f868:	af00      	add	r7, sp, #0
   1f86a:	0002      	movs	r2, r0
   1f86c:	1dfb      	adds	r3, r7, #7
   1f86e:	701a      	strb	r2, [r3, #0]
   1f870:	1dbb      	adds	r3, r7, #6
   1f872:	1c0a      	adds	r2, r1, #0
   1f874:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1f876:	1dfb      	adds	r3, r7, #7
   1f878:	781b      	ldrb	r3, [r3, #0]
   1f87a:	4a04      	ldr	r2, [pc, #16]	; (1f88c <sd_mmc_unload+0x28>)
   1f87c:	1db9      	adds	r1, r7, #6
   1f87e:	7809      	ldrb	r1, [r1, #0]
   1f880:	54d1      	strb	r1, [r2, r3]
	return true;
   1f882:	2301      	movs	r3, #1
}
   1f884:	0018      	movs	r0, r3
   1f886:	46bd      	mov	sp, r7
   1f888:	b002      	add	sp, #8
   1f88a:	bd80      	pop	{r7, pc}
   1f88c:	20003e40 	.word	0x20003e40

0001f890 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1f890:	b580      	push	{r7, lr}
   1f892:	b082      	sub	sp, #8
   1f894:	af00      	add	r7, sp, #0
   1f896:	0002      	movs	r2, r0
   1f898:	1dfb      	adds	r3, r7, #7
   1f89a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1f89c:	1dfb      	adds	r3, r7, #7
   1f89e:	781b      	ldrb	r3, [r3, #0]
   1f8a0:	0019      	movs	r1, r3
   1f8a2:	2000      	movs	r0, #0
   1f8a4:	4b03      	ldr	r3, [pc, #12]	; (1f8b4 <sd_mmc_unload_0+0x24>)
   1f8a6:	4798      	blx	r3
   1f8a8:	0003      	movs	r3, r0
}
   1f8aa:	0018      	movs	r0, r3
   1f8ac:	46bd      	mov	sp, r7
   1f8ae:	b002      	add	sp, #8
   1f8b0:	bd80      	pop	{r7, pc}
   1f8b2:	46c0      	nop			; (mov r8, r8)
   1f8b4:	0001f865 	.word	0x0001f865

0001f8b8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1f8b8:	b580      	push	{r7, lr}
   1f8ba:	b082      	sub	sp, #8
   1f8bc:	af00      	add	r7, sp, #0
   1f8be:	0002      	movs	r2, r0
   1f8c0:	1dfb      	adds	r3, r7, #7
   1f8c2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1f8c4:	1dfb      	adds	r3, r7, #7
   1f8c6:	781b      	ldrb	r3, [r3, #0]
   1f8c8:	0018      	movs	r0, r3
   1f8ca:	4b03      	ldr	r3, [pc, #12]	; (1f8d8 <sd_mmc_wr_protect+0x20>)
   1f8cc:	4798      	blx	r3
   1f8ce:	0003      	movs	r3, r0
}
   1f8d0:	0018      	movs	r0, r3
   1f8d2:	46bd      	mov	sp, r7
   1f8d4:	b002      	add	sp, #8
   1f8d6:	bd80      	pop	{r7, pc}
   1f8d8:	0001f3d5 	.word	0x0001f3d5

0001f8dc <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1f8dc:	b580      	push	{r7, lr}
   1f8de:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1f8e0:	2000      	movs	r0, #0
   1f8e2:	4b03      	ldr	r3, [pc, #12]	; (1f8f0 <sd_mmc_wr_protect_0+0x14>)
   1f8e4:	4798      	blx	r3
   1f8e6:	0003      	movs	r3, r0
}
   1f8e8:	0018      	movs	r0, r3
   1f8ea:	46bd      	mov	sp, r7
   1f8ec:	bd80      	pop	{r7, pc}
   1f8ee:	46c0      	nop			; (mov r8, r8)
   1f8f0:	0001f8b9 	.word	0x0001f8b9

0001f8f4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1f8f4:	b580      	push	{r7, lr}
   1f8f6:	b082      	sub	sp, #8
   1f8f8:	af00      	add	r7, sp, #0
   1f8fa:	0002      	movs	r2, r0
   1f8fc:	1dfb      	adds	r3, r7, #7
   1f8fe:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1f900:	2301      	movs	r3, #1
}
   1f902:	0018      	movs	r0, r3
   1f904:	46bd      	mov	sp, r7
   1f906:	b002      	add	sp, #8
   1f908:	bd80      	pop	{r7, pc}
	...

0001f90c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1f90c:	b580      	push	{r7, lr}
   1f90e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1f910:	2000      	movs	r0, #0
   1f912:	4b03      	ldr	r3, [pc, #12]	; (1f920 <sd_mmc_removal_0+0x14>)
   1f914:	4798      	blx	r3
   1f916:	0003      	movs	r3, r0
}
   1f918:	0018      	movs	r0, r3
   1f91a:	46bd      	mov	sp, r7
   1f91c:	bd80      	pop	{r7, pc}
   1f91e:	46c0      	nop			; (mov r8, r8)
   1f920:	0001f8f5 	.word	0x0001f8f5

0001f924 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1f924:	b580      	push	{r7, lr}
   1f926:	b084      	sub	sp, #16
   1f928:	af00      	add	r7, sp, #0
   1f92a:	60b9      	str	r1, [r7, #8]
   1f92c:	607a      	str	r2, [r7, #4]
   1f92e:	230f      	movs	r3, #15
   1f930:	18fb      	adds	r3, r7, r3
   1f932:	1c02      	adds	r2, r0, #0
   1f934:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1f936:	68b9      	ldr	r1, [r7, #8]
   1f938:	230f      	movs	r3, #15
   1f93a:	18fb      	adds	r3, r7, r3
   1f93c:	781b      	ldrb	r3, [r3, #0]
   1f93e:	2201      	movs	r2, #1
   1f940:	0018      	movs	r0, r3
   1f942:	4b10      	ldr	r3, [pc, #64]	; (1f984 <sd_mmc_mem_2_ram+0x60>)
   1f944:	4798      	blx	r3
   1f946:	1e03      	subs	r3, r0, #0
   1f948:	d005      	beq.n	1f956 <sd_mmc_mem_2_ram+0x32>
   1f94a:	2b02      	cmp	r3, #2
   1f94c:	d101      	bne.n	1f952 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f94e:	2302      	movs	r3, #2
   1f950:	e013      	b.n	1f97a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1f952:	2301      	movs	r3, #1
   1f954:	e011      	b.n	1f97a <sd_mmc_mem_2_ram+0x56>
		break;
   1f956:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1f958:	687b      	ldr	r3, [r7, #4]
   1f95a:	2101      	movs	r1, #1
   1f95c:	0018      	movs	r0, r3
   1f95e:	4b0a      	ldr	r3, [pc, #40]	; (1f988 <sd_mmc_mem_2_ram+0x64>)
   1f960:	4798      	blx	r3
   1f962:	1e03      	subs	r3, r0, #0
   1f964:	d001      	beq.n	1f96a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1f966:	2301      	movs	r3, #1
   1f968:	e007      	b.n	1f97a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1f96a:	2000      	movs	r0, #0
   1f96c:	4b07      	ldr	r3, [pc, #28]	; (1f98c <sd_mmc_mem_2_ram+0x68>)
   1f96e:	4798      	blx	r3
   1f970:	1e03      	subs	r3, r0, #0
   1f972:	d001      	beq.n	1f978 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1f974:	2301      	movs	r3, #1
   1f976:	e000      	b.n	1f97a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1f978:	2300      	movs	r3, #0
}
   1f97a:	0018      	movs	r0, r3
   1f97c:	46bd      	mov	sp, r7
   1f97e:	b004      	add	sp, #16
   1f980:	bd80      	pop	{r7, pc}
   1f982:	46c0      	nop			; (mov r8, r8)
   1f984:	0001f3ed 	.word	0x0001f3ed
   1f988:	0001f4d9 	.word	0x0001f4d9
   1f98c:	0001f531 	.word	0x0001f531

0001f990 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1f990:	b580      	push	{r7, lr}
   1f992:	b082      	sub	sp, #8
   1f994:	af00      	add	r7, sp, #0
   1f996:	6078      	str	r0, [r7, #4]
   1f998:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1f99a:	683a      	ldr	r2, [r7, #0]
   1f99c:	687b      	ldr	r3, [r7, #4]
   1f99e:	0019      	movs	r1, r3
   1f9a0:	2000      	movs	r0, #0
   1f9a2:	4b03      	ldr	r3, [pc, #12]	; (1f9b0 <sd_mmc_mem_2_ram_0+0x20>)
   1f9a4:	4798      	blx	r3
   1f9a6:	0003      	movs	r3, r0
}
   1f9a8:	0018      	movs	r0, r3
   1f9aa:	46bd      	mov	sp, r7
   1f9ac:	b002      	add	sp, #8
   1f9ae:	bd80      	pop	{r7, pc}
   1f9b0:	0001f925 	.word	0x0001f925

0001f9b4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1f9b4:	b580      	push	{r7, lr}
   1f9b6:	b084      	sub	sp, #16
   1f9b8:	af00      	add	r7, sp, #0
   1f9ba:	60b9      	str	r1, [r7, #8]
   1f9bc:	607a      	str	r2, [r7, #4]
   1f9be:	230f      	movs	r3, #15
   1f9c0:	18fb      	adds	r3, r7, r3
   1f9c2:	1c02      	adds	r2, r0, #0
   1f9c4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1f9c6:	68b9      	ldr	r1, [r7, #8]
   1f9c8:	230f      	movs	r3, #15
   1f9ca:	18fb      	adds	r3, r7, r3
   1f9cc:	781b      	ldrb	r3, [r3, #0]
   1f9ce:	2201      	movs	r2, #1
   1f9d0:	0018      	movs	r0, r3
   1f9d2:	4b10      	ldr	r3, [pc, #64]	; (1fa14 <sd_mmc_ram_2_mem+0x60>)
   1f9d4:	4798      	blx	r3
   1f9d6:	1e03      	subs	r3, r0, #0
   1f9d8:	d005      	beq.n	1f9e6 <sd_mmc_ram_2_mem+0x32>
   1f9da:	2b02      	cmp	r3, #2
   1f9dc:	d101      	bne.n	1f9e2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1f9de:	2302      	movs	r3, #2
   1f9e0:	e013      	b.n	1fa0a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1f9e2:	2301      	movs	r3, #1
   1f9e4:	e011      	b.n	1fa0a <sd_mmc_ram_2_mem+0x56>
		break;
   1f9e6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1f9e8:	687b      	ldr	r3, [r7, #4]
   1f9ea:	2101      	movs	r1, #1
   1f9ec:	0018      	movs	r0, r3
   1f9ee:	4b0a      	ldr	r3, [pc, #40]	; (1fa18 <sd_mmc_ram_2_mem+0x64>)
   1f9f0:	4798      	blx	r3
   1f9f2:	1e03      	subs	r3, r0, #0
   1f9f4:	d001      	beq.n	1f9fa <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1f9f6:	2301      	movs	r3, #1
   1f9f8:	e007      	b.n	1fa0a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1f9fa:	2000      	movs	r0, #0
   1f9fc:	4b07      	ldr	r3, [pc, #28]	; (1fa1c <sd_mmc_ram_2_mem+0x68>)
   1f9fe:	4798      	blx	r3
   1fa00:	1e03      	subs	r3, r0, #0
   1fa02:	d001      	beq.n	1fa08 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1fa04:	2301      	movs	r3, #1
   1fa06:	e000      	b.n	1fa0a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1fa08:	2300      	movs	r3, #0
}
   1fa0a:	0018      	movs	r0, r3
   1fa0c:	46bd      	mov	sp, r7
   1fa0e:	b004      	add	sp, #16
   1fa10:	bd80      	pop	{r7, pc}
   1fa12:	46c0      	nop			; (mov r8, r8)
   1fa14:	0001f5c9 	.word	0x0001f5c9
   1fa18:	0001f6b1 	.word	0x0001f6b1
   1fa1c:	0001f709 	.word	0x0001f709

0001fa20 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1fa20:	b580      	push	{r7, lr}
   1fa22:	b082      	sub	sp, #8
   1fa24:	af00      	add	r7, sp, #0
   1fa26:	6078      	str	r0, [r7, #4]
   1fa28:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1fa2a:	683a      	ldr	r2, [r7, #0]
   1fa2c:	687b      	ldr	r3, [r7, #4]
   1fa2e:	0019      	movs	r1, r3
   1fa30:	2000      	movs	r0, #0
   1fa32:	4b03      	ldr	r3, [pc, #12]	; (1fa40 <sd_mmc_ram_2_mem_0+0x20>)
   1fa34:	4798      	blx	r3
   1fa36:	0003      	movs	r3, r0
}
   1fa38:	0018      	movs	r0, r3
   1fa3a:	46bd      	mov	sp, r7
   1fa3c:	b002      	add	sp, #8
   1fa3e:	bd80      	pop	{r7, pc}
   1fa40:	0001f9b5 	.word	0x0001f9b5

0001fa44 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1fa44:	b580      	push	{r7, lr}
   1fa46:	b084      	sub	sp, #16
   1fa48:	af00      	add	r7, sp, #0
   1fa4a:	6078      	str	r0, [r7, #4]
   1fa4c:	000a      	movs	r2, r1
   1fa4e:	1cfb      	adds	r3, r7, #3
   1fa50:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1fa52:	230f      	movs	r3, #15
   1fa54:	18fb      	adds	r3, r7, r3
   1fa56:	2200      	movs	r2, #0
   1fa58:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1fa5a:	e038      	b.n	1face <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1fa5c:	687b      	ldr	r3, [r7, #4]
   1fa5e:	1c5a      	adds	r2, r3, #1
   1fa60:	607a      	str	r2, [r7, #4]
   1fa62:	220e      	movs	r2, #14
   1fa64:	18ba      	adds	r2, r7, r2
   1fa66:	781b      	ldrb	r3, [r3, #0]
   1fa68:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1fa6a:	230d      	movs	r3, #13
   1fa6c:	18fb      	adds	r3, r7, r3
   1fa6e:	2200      	movs	r2, #0
   1fa70:	701a      	strb	r2, [r3, #0]
   1fa72:	e027      	b.n	1fac4 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1fa74:	230f      	movs	r3, #15
   1fa76:	18fa      	adds	r2, r7, r3
   1fa78:	230f      	movs	r3, #15
   1fa7a:	18fb      	adds	r3, r7, r3
   1fa7c:	781b      	ldrb	r3, [r3, #0]
   1fa7e:	18db      	adds	r3, r3, r3
   1fa80:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1fa82:	230e      	movs	r3, #14
   1fa84:	18fa      	adds	r2, r7, r3
   1fa86:	230f      	movs	r3, #15
   1fa88:	18fb      	adds	r3, r7, r3
   1fa8a:	7812      	ldrb	r2, [r2, #0]
   1fa8c:	781b      	ldrb	r3, [r3, #0]
   1fa8e:	4053      	eors	r3, r2
   1fa90:	b2db      	uxtb	r3, r3
   1fa92:	b25b      	sxtb	r3, r3
   1fa94:	2b00      	cmp	r3, #0
   1fa96:	da07      	bge.n	1faa8 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1fa98:	230f      	movs	r3, #15
   1fa9a:	18fb      	adds	r3, r7, r3
   1fa9c:	220f      	movs	r2, #15
   1fa9e:	18ba      	adds	r2, r7, r2
   1faa0:	7812      	ldrb	r2, [r2, #0]
   1faa2:	2109      	movs	r1, #9
   1faa4:	404a      	eors	r2, r1
   1faa6:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1faa8:	230e      	movs	r3, #14
   1faaa:	18fa      	adds	r2, r7, r3
   1faac:	230e      	movs	r3, #14
   1faae:	18fb      	adds	r3, r7, r3
   1fab0:	781b      	ldrb	r3, [r3, #0]
   1fab2:	18db      	adds	r3, r3, r3
   1fab4:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1fab6:	230d      	movs	r3, #13
   1fab8:	18fb      	adds	r3, r7, r3
   1faba:	781a      	ldrb	r2, [r3, #0]
   1fabc:	230d      	movs	r3, #13
   1fabe:	18fb      	adds	r3, r7, r3
   1fac0:	3201      	adds	r2, #1
   1fac2:	701a      	strb	r2, [r3, #0]
   1fac4:	230d      	movs	r3, #13
   1fac6:	18fb      	adds	r3, r7, r3
   1fac8:	781b      	ldrb	r3, [r3, #0]
   1faca:	2b07      	cmp	r3, #7
   1facc:	d9d2      	bls.n	1fa74 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1face:	1cfb      	adds	r3, r7, #3
   1fad0:	781b      	ldrb	r3, [r3, #0]
   1fad2:	1cfa      	adds	r2, r7, #3
   1fad4:	1e59      	subs	r1, r3, #1
   1fad6:	7011      	strb	r1, [r2, #0]
   1fad8:	2b00      	cmp	r3, #0
   1fada:	d1bf      	bne.n	1fa5c <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1fadc:	230f      	movs	r3, #15
   1fade:	18fb      	adds	r3, r7, r3
   1fae0:	781b      	ldrb	r3, [r3, #0]
   1fae2:	005b      	lsls	r3, r3, #1
   1fae4:	b25b      	sxtb	r3, r3
   1fae6:	2201      	movs	r2, #1
   1fae8:	4313      	orrs	r3, r2
   1faea:	b25a      	sxtb	r2, r3
   1faec:	230f      	movs	r3, #15
   1faee:	18fb      	adds	r3, r7, r3
   1faf0:	701a      	strb	r2, [r3, #0]
	return crc;
   1faf2:	230f      	movs	r3, #15
   1faf4:	18fb      	adds	r3, r7, r3
   1faf6:	781b      	ldrb	r3, [r3, #0]
}
   1faf8:	0018      	movs	r0, r3
   1fafa:	46bd      	mov	sp, r7
   1fafc:	b004      	add	sp, #16
   1fafe:	bd80      	pop	{r7, pc}

0001fb00 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1fb00:	b590      	push	{r4, r7, lr}
   1fb02:	b083      	sub	sp, #12
   1fb04:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1fb06:	1c7b      	adds	r3, r7, #1
   1fb08:	22ff      	movs	r2, #255	; 0xff
   1fb0a:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1fb0c:	1cbb      	adds	r3, r7, #2
   1fb0e:	22ff      	movs	r2, #255	; 0xff
   1fb10:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1fb12:	1cbb      	adds	r3, r7, #2
   1fb14:	881b      	ldrh	r3, [r3, #0]
   1fb16:	1c79      	adds	r1, r7, #1
   1fb18:	4811      	ldr	r0, [pc, #68]	; (1fb60 <sd_mmc_spi_wait_busy+0x60>)
   1fb1a:	2201      	movs	r2, #1
   1fb1c:	4c11      	ldr	r4, [pc, #68]	; (1fb64 <sd_mmc_spi_wait_busy+0x64>)
   1fb1e:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1fb20:	4b11      	ldr	r3, [pc, #68]	; (1fb68 <sd_mmc_spi_wait_busy+0x68>)
   1fb22:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1fb24:	1cbb      	adds	r3, r7, #2
   1fb26:	881b      	ldrh	r3, [r3, #0]
   1fb28:	1c79      	adds	r1, r7, #1
   1fb2a:	480d      	ldr	r0, [pc, #52]	; (1fb60 <sd_mmc_spi_wait_busy+0x60>)
   1fb2c:	2201      	movs	r2, #1
   1fb2e:	4c0d      	ldr	r4, [pc, #52]	; (1fb64 <sd_mmc_spi_wait_busy+0x64>)
   1fb30:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1fb32:	1cbb      	adds	r3, r7, #2
   1fb34:	881b      	ldrh	r3, [r3, #0]
   1fb36:	1c79      	adds	r1, r7, #1
   1fb38:	4809      	ldr	r0, [pc, #36]	; (1fb60 <sd_mmc_spi_wait_busy+0x60>)
   1fb3a:	2201      	movs	r2, #1
   1fb3c:	4c09      	ldr	r4, [pc, #36]	; (1fb64 <sd_mmc_spi_wait_busy+0x64>)
   1fb3e:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1fb40:	687b      	ldr	r3, [r7, #4]
   1fb42:	1e5a      	subs	r2, r3, #1
   1fb44:	607a      	str	r2, [r7, #4]
   1fb46:	2b00      	cmp	r3, #0
   1fb48:	d101      	bne.n	1fb4e <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1fb4a:	2300      	movs	r3, #0
   1fb4c:	e004      	b.n	1fb58 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1fb4e:	1c7b      	adds	r3, r7, #1
   1fb50:	781b      	ldrb	r3, [r3, #0]
   1fb52:	2bff      	cmp	r3, #255	; 0xff
   1fb54:	d1ed      	bne.n	1fb32 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1fb56:	2301      	movs	r3, #1
}
   1fb58:	0018      	movs	r0, r3
   1fb5a:	46bd      	mov	sp, r7
   1fb5c:	b003      	add	sp, #12
   1fb5e:	bd90      	pop	{r4, r7, pc}
   1fb60:	20003e44 	.word	0x20003e44
   1fb64:	0002827d 	.word	0x0002827d
   1fb68:	00030d40 	.word	0x00030d40

0001fb6c <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1fb6c:	b590      	push	{r4, r7, lr}
   1fb6e:	b083      	sub	sp, #12
   1fb70:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1fb72:	1cbb      	adds	r3, r7, #2
   1fb74:	22ff      	movs	r2, #255	; 0xff
   1fb76:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1fb78:	1c7b      	adds	r3, r7, #1
   1fb7a:	2200      	movs	r2, #0
   1fb7c:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1fb7e:	4b18      	ldr	r3, [pc, #96]	; (1fbe0 <sd_mmc_spi_start_read_block+0x74>)
   1fb80:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1fb82:	687b      	ldr	r3, [r7, #4]
   1fb84:	1e5a      	subs	r2, r3, #1
   1fb86:	607a      	str	r2, [r7, #4]
   1fb88:	2b00      	cmp	r3, #0
   1fb8a:	d104      	bne.n	1fb96 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1fb8c:	4b15      	ldr	r3, [pc, #84]	; (1fbe4 <sd_mmc_spi_start_read_block+0x78>)
   1fb8e:	2204      	movs	r2, #4
   1fb90:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1fb92:	2300      	movs	r3, #0
   1fb94:	e020      	b.n	1fbd8 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1fb96:	1cbb      	adds	r3, r7, #2
   1fb98:	881b      	ldrh	r3, [r3, #0]
   1fb9a:	1c79      	adds	r1, r7, #1
   1fb9c:	4812      	ldr	r0, [pc, #72]	; (1fbe8 <sd_mmc_spi_start_read_block+0x7c>)
   1fb9e:	2201      	movs	r2, #1
   1fba0:	4c12      	ldr	r4, [pc, #72]	; (1fbec <sd_mmc_spi_start_read_block+0x80>)
   1fba2:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1fba4:	1c7b      	adds	r3, r7, #1
   1fba6:	781b      	ldrb	r3, [r3, #0]
   1fba8:	001a      	movs	r2, r3
   1fbaa:	23f0      	movs	r3, #240	; 0xf0
   1fbac:	4013      	ands	r3, r2
   1fbae:	d10e      	bne.n	1fbce <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1fbb0:	1c7b      	adds	r3, r7, #1
   1fbb2:	781b      	ldrb	r3, [r3, #0]
   1fbb4:	001a      	movs	r2, r3
   1fbb6:	2307      	movs	r3, #7
   1fbb8:	4013      	ands	r3, r2
   1fbba:	d003      	beq.n	1fbc4 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1fbbc:	4b09      	ldr	r3, [pc, #36]	; (1fbe4 <sd_mmc_spi_start_read_block+0x78>)
   1fbbe:	2207      	movs	r2, #7
   1fbc0:	701a      	strb	r2, [r3, #0]
   1fbc2:	e002      	b.n	1fbca <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1fbc4:	4b07      	ldr	r3, [pc, #28]	; (1fbe4 <sd_mmc_spi_start_read_block+0x78>)
   1fbc6:	220b      	movs	r2, #11
   1fbc8:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1fbca:	2300      	movs	r3, #0
   1fbcc:	e004      	b.n	1fbd8 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1fbce:	1c7b      	adds	r3, r7, #1
   1fbd0:	781b      	ldrb	r3, [r3, #0]
   1fbd2:	2bfe      	cmp	r3, #254	; 0xfe
   1fbd4:	d1d5      	bne.n	1fb82 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1fbd6:	2301      	movs	r3, #1
}
   1fbd8:	0018      	movs	r0, r3
   1fbda:	46bd      	mov	sp, r7
   1fbdc:	b003      	add	sp, #12
   1fbde:	bd90      	pop	{r4, r7, pc}
   1fbe0:	0007a120 	.word	0x0007a120
   1fbe4:	20003e83 	.word	0x20003e83
   1fbe8:	20003e44 	.word	0x20003e44
   1fbec:	0002827d 	.word	0x0002827d

0001fbf0 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1fbf0:	b590      	push	{r4, r7, lr}
   1fbf2:	b083      	sub	sp, #12
   1fbf4:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1fbf6:	1dbb      	adds	r3, r7, #6
   1fbf8:	22ff      	movs	r2, #255	; 0xff
   1fbfa:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1fbfc:	1dbb      	adds	r3, r7, #6
   1fbfe:	881b      	ldrh	r3, [r3, #0]
   1fc00:	1d39      	adds	r1, r7, #4
   1fc02:	4804      	ldr	r0, [pc, #16]	; (1fc14 <sd_mmc_spi_stop_read_block+0x24>)
   1fc04:	2202      	movs	r2, #2
   1fc06:	4c04      	ldr	r4, [pc, #16]	; (1fc18 <sd_mmc_spi_stop_read_block+0x28>)
   1fc08:	47a0      	blx	r4
			dummy);
}
   1fc0a:	46c0      	nop			; (mov r8, r8)
   1fc0c:	46bd      	mov	sp, r7
   1fc0e:	b003      	add	sp, #12
   1fc10:	bd90      	pop	{r4, r7, pc}
   1fc12:	46c0      	nop			; (mov r8, r8)
   1fc14:	20003e44 	.word	0x20003e44
   1fc18:	0002827d 	.word	0x0002827d

0001fc1c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1fc1c:	b580      	push	{r7, lr}
   1fc1e:	b082      	sub	sp, #8
   1fc20:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1fc22:	1dfb      	adds	r3, r7, #7
   1fc24:	22ff      	movs	r2, #255	; 0xff
   1fc26:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1fc28:	1df9      	adds	r1, r7, #7
   1fc2a:	4b0d      	ldr	r3, [pc, #52]	; (1fc60 <sd_mmc_spi_start_write_block+0x44>)
   1fc2c:	2201      	movs	r2, #1
   1fc2e:	0018      	movs	r0, r3
   1fc30:	4b0c      	ldr	r3, [pc, #48]	; (1fc64 <sd_mmc_spi_start_write_block+0x48>)
   1fc32:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1fc34:	4b0c      	ldr	r3, [pc, #48]	; (1fc68 <sd_mmc_spi_start_write_block+0x4c>)
   1fc36:	881b      	ldrh	r3, [r3, #0]
   1fc38:	2b01      	cmp	r3, #1
   1fc3a:	d103      	bne.n	1fc44 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1fc3c:	1dbb      	adds	r3, r7, #6
   1fc3e:	22fe      	movs	r2, #254	; 0xfe
   1fc40:	701a      	strb	r2, [r3, #0]
   1fc42:	e002      	b.n	1fc4a <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1fc44:	1dbb      	adds	r3, r7, #6
   1fc46:	22fc      	movs	r2, #252	; 0xfc
   1fc48:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1fc4a:	1db9      	adds	r1, r7, #6
   1fc4c:	4b04      	ldr	r3, [pc, #16]	; (1fc60 <sd_mmc_spi_start_write_block+0x44>)
   1fc4e:	2201      	movs	r2, #1
   1fc50:	0018      	movs	r0, r3
   1fc52:	4b04      	ldr	r3, [pc, #16]	; (1fc64 <sd_mmc_spi_start_write_block+0x48>)
   1fc54:	4798      	blx	r3
}
   1fc56:	46c0      	nop			; (mov r8, r8)
   1fc58:	46bd      	mov	sp, r7
   1fc5a:	b002      	add	sp, #8
   1fc5c:	bd80      	pop	{r7, pc}
   1fc5e:	46c0      	nop			; (mov r8, r8)
   1fc60:	20003e44 	.word	0x20003e44
   1fc64:	000284a1 	.word	0x000284a1
   1fc68:	20003e8e 	.word	0x20003e8e

0001fc6c <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1fc6c:	b590      	push	{r4, r7, lr}
   1fc6e:	b083      	sub	sp, #12
   1fc70:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1fc72:	1dbb      	adds	r3, r7, #6
   1fc74:	22ff      	movs	r2, #255	; 0xff
   1fc76:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1fc78:	1cbb      	adds	r3, r7, #2
   1fc7a:	2201      	movs	r2, #1
   1fc7c:	4252      	negs	r2, r2
   1fc7e:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1fc80:	1cb9      	adds	r1, r7, #2
   1fc82:	4b1b      	ldr	r3, [pc, #108]	; (1fcf0 <sd_mmc_spi_stop_write_block+0x84>)
   1fc84:	2202      	movs	r2, #2
   1fc86:	0018      	movs	r0, r3
   1fc88:	4b1a      	ldr	r3, [pc, #104]	; (1fcf4 <sd_mmc_spi_stop_write_block+0x88>)
   1fc8a:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1fc8c:	1dbb      	adds	r3, r7, #6
   1fc8e:	881b      	ldrh	r3, [r3, #0]
   1fc90:	1d79      	adds	r1, r7, #5
   1fc92:	4817      	ldr	r0, [pc, #92]	; (1fcf0 <sd_mmc_spi_stop_write_block+0x84>)
   1fc94:	2201      	movs	r2, #1
   1fc96:	4c18      	ldr	r4, [pc, #96]	; (1fcf8 <sd_mmc_spi_stop_write_block+0x8c>)
   1fc98:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1fc9a:	1d7b      	adds	r3, r7, #5
   1fc9c:	781b      	ldrb	r3, [r3, #0]
   1fc9e:	001a      	movs	r2, r3
   1fca0:	2310      	movs	r3, #16
   1fca2:	4013      	ands	r3, r2
   1fca4:	d105      	bne.n	1fcb2 <sd_mmc_spi_stop_write_block+0x46>
   1fca6:	1d7b      	adds	r3, r7, #5
   1fca8:	781b      	ldrb	r3, [r3, #0]
   1fcaa:	001a      	movs	r2, r3
   1fcac:	2301      	movs	r3, #1
   1fcae:	4013      	ands	r3, r2
   1fcb0:	d104      	bne.n	1fcbc <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1fcb2:	4b12      	ldr	r3, [pc, #72]	; (1fcfc <sd_mmc_spi_stop_write_block+0x90>)
   1fcb4:	2201      	movs	r2, #1
   1fcb6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1fcb8:	2300      	movs	r3, #0
   1fcba:	e014      	b.n	1fce6 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1fcbc:	1d7b      	adds	r3, r7, #5
   1fcbe:	781b      	ldrb	r3, [r3, #0]
   1fcc0:	001a      	movs	r2, r3
   1fcc2:	231e      	movs	r3, #30
   1fcc4:	4013      	ands	r3, r2
   1fcc6:	2b04      	cmp	r3, #4
   1fcc8:	d00b      	beq.n	1fce2 <sd_mmc_spi_stop_write_block+0x76>
   1fcca:	2b0a      	cmp	r3, #10
   1fccc:	d104      	bne.n	1fcd8 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1fcce:	4b0b      	ldr	r3, [pc, #44]	; (1fcfc <sd_mmc_spi_stop_write_block+0x90>)
   1fcd0:	2208      	movs	r2, #8
   1fcd2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1fcd4:	2300      	movs	r3, #0
   1fcd6:	e006      	b.n	1fce6 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1fcd8:	4b08      	ldr	r3, [pc, #32]	; (1fcfc <sd_mmc_spi_stop_write_block+0x90>)
   1fcda:	220a      	movs	r2, #10
   1fcdc:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1fcde:	2300      	movs	r3, #0
   1fce0:	e001      	b.n	1fce6 <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1fce2:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1fce4:	2301      	movs	r3, #1
}
   1fce6:	0018      	movs	r0, r3
   1fce8:	46bd      	mov	sp, r7
   1fcea:	b003      	add	sp, #12
   1fcec:	bd90      	pop	{r4, r7, pc}
   1fcee:	46c0      	nop			; (mov r8, r8)
   1fcf0:	20003e44 	.word	0x20003e44
   1fcf4:	000284a1 	.word	0x000284a1
   1fcf8:	0002827d 	.word	0x0002827d
   1fcfc:	20003e83 	.word	0x20003e83

0001fd00 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1fd00:	b590      	push	{r4, r7, lr}
   1fd02:	b083      	sub	sp, #12
   1fd04:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1fd06:	4b1d      	ldr	r3, [pc, #116]	; (1fd7c <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1fd08:	881b      	ldrh	r3, [r3, #0]
   1fd0a:	2b01      	cmp	r3, #1
   1fd0c:	d101      	bne.n	1fd12 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1fd0e:	2301      	movs	r3, #1
   1fd10:	e030      	b.n	1fd74 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1fd12:	4b1a      	ldr	r3, [pc, #104]	; (1fd7c <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1fd14:	881b      	ldrh	r3, [r3, #0]
   1fd16:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1fd18:	4b19      	ldr	r3, [pc, #100]	; (1fd80 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1fd1a:	681a      	ldr	r2, [r3, #0]
   1fd1c:	4b19      	ldr	r3, [pc, #100]	; (1fd84 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1fd1e:	881b      	ldrh	r3, [r3, #0]
   1fd20:	0019      	movs	r1, r3
   1fd22:	4b19      	ldr	r3, [pc, #100]	; (1fd88 <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1fd24:	0010      	movs	r0, r2
   1fd26:	4798      	blx	r3
   1fd28:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1fd2a:	429c      	cmp	r4, r3
   1fd2c:	d901      	bls.n	1fd32 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1fd2e:	2301      	movs	r3, #1
   1fd30:	e020      	b.n	1fd74 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1fd32:	1dfb      	adds	r3, r7, #7
   1fd34:	22ff      	movs	r2, #255	; 0xff
   1fd36:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1fd38:	1df9      	adds	r1, r7, #7
   1fd3a:	4b14      	ldr	r3, [pc, #80]	; (1fd8c <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1fd3c:	2201      	movs	r2, #1
   1fd3e:	0018      	movs	r0, r3
   1fd40:	4b13      	ldr	r3, [pc, #76]	; (1fd90 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1fd42:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1fd44:	1dfb      	adds	r3, r7, #7
   1fd46:	22fd      	movs	r2, #253	; 0xfd
   1fd48:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1fd4a:	1df9      	adds	r1, r7, #7
   1fd4c:	4b0f      	ldr	r3, [pc, #60]	; (1fd8c <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1fd4e:	2201      	movs	r2, #1
   1fd50:	0018      	movs	r0, r3
   1fd52:	4b0f      	ldr	r3, [pc, #60]	; (1fd90 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1fd54:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1fd56:	4b0f      	ldr	r3, [pc, #60]	; (1fd94 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1fd58:	4798      	blx	r3
   1fd5a:	0003      	movs	r3, r0
   1fd5c:	001a      	movs	r2, r3
   1fd5e:	2301      	movs	r3, #1
   1fd60:	4053      	eors	r3, r2
   1fd62:	b2db      	uxtb	r3, r3
   1fd64:	2b00      	cmp	r3, #0
   1fd66:	d004      	beq.n	1fd72 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1fd68:	4b0b      	ldr	r3, [pc, #44]	; (1fd98 <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1fd6a:	2205      	movs	r2, #5
   1fd6c:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1fd6e:	2300      	movs	r3, #0
   1fd70:	e000      	b.n	1fd74 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1fd72:	2301      	movs	r3, #1
}
   1fd74:	0018      	movs	r0, r3
   1fd76:	46bd      	mov	sp, r7
   1fd78:	b003      	add	sp, #12
   1fd7a:	bd90      	pop	{r4, r7, pc}
   1fd7c:	20003e8e 	.word	0x20003e8e
   1fd80:	20003e88 	.word	0x20003e88
   1fd84:	20003e8c 	.word	0x20003e8c
   1fd88:	00032c65 	.word	0x00032c65
   1fd8c:	20003e44 	.word	0x20003e44
   1fd90:	000284a1 	.word	0x000284a1
   1fd94:	0001fb01 	.word	0x0001fb01
   1fd98:	20003e83 	.word	0x20003e83

0001fd9c <sd_mmc_spi_select_device>:
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1fd9c:	b590      	push	{r4, r7, lr}
   1fd9e:	b083      	sub	sp, #12
   1fda0:	af00      	add	r7, sp, #0
   1fda2:	0004      	movs	r4, r0
   1fda4:	6039      	str	r1, [r7, #0]
   1fda6:	0010      	movs	r0, r2
   1fda8:	0019      	movs	r1, r3
   1fdaa:	1dfb      	adds	r3, r7, #7
   1fdac:	1c22      	adds	r2, r4, #0
   1fdae:	701a      	strb	r2, [r3, #0]
   1fdb0:	1dbb      	adds	r3, r7, #6
   1fdb2:	1c02      	adds	r2, r0, #0
   1fdb4:	701a      	strb	r2, [r3, #0]
   1fdb6:	1d7b      	adds	r3, r7, #5
   1fdb8:	1c0a      	adds	r2, r1, #0
   1fdba:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fdbc:	4b13      	ldr	r3, [pc, #76]	; (1fe0c <sd_mmc_spi_select_device+0x70>)
   1fdbe:	2200      	movs	r2, #0
   1fdc0:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1fdc2:	683b      	ldr	r3, [r7, #0]
   1fdc4:	4a12      	ldr	r2, [pc, #72]	; (1fe10 <sd_mmc_spi_select_device+0x74>)
   1fdc6:	4293      	cmp	r3, r2
   1fdc8:	d907      	bls.n	1fdda <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1fdca:	4b11      	ldr	r3, [pc, #68]	; (1fe10 <sd_mmc_spi_select_device+0x74>)
   1fdcc:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1fdce:	e004      	b.n	1fdda <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1fdd0:	683b      	ldr	r3, [r7, #0]
   1fdd2:	08db      	lsrs	r3, r3, #3
   1fdd4:	683a      	ldr	r2, [r7, #0]
   1fdd6:	1ad3      	subs	r3, r2, r3
   1fdd8:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1fdda:	683a      	ldr	r2, [r7, #0]
   1fddc:	4b0d      	ldr	r3, [pc, #52]	; (1fe14 <sd_mmc_spi_select_device+0x78>)
   1fdde:	0011      	movs	r1, r2
   1fde0:	0018      	movs	r0, r3
   1fde2:	4b0d      	ldr	r3, [pc, #52]	; (1fe18 <sd_mmc_spi_select_device+0x7c>)
   1fde4:	4798      	blx	r3
   1fde6:	0003      	movs	r3, r0
   1fde8:	2b17      	cmp	r3, #23
   1fdea:	d0f1      	beq.n	1fdd0 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1fdec:	1dfb      	adds	r3, r7, #7
   1fdee:	781a      	ldrb	r2, [r3, #0]
   1fdf0:	0013      	movs	r3, r2
   1fdf2:	005b      	lsls	r3, r3, #1
   1fdf4:	189b      	adds	r3, r3, r2
   1fdf6:	4a09      	ldr	r2, [pc, #36]	; (1fe1c <sd_mmc_spi_select_device+0x80>)
   1fdf8:	1899      	adds	r1, r3, r2
   1fdfa:	4b06      	ldr	r3, [pc, #24]	; (1fe14 <sd_mmc_spi_select_device+0x78>)
   1fdfc:	2201      	movs	r2, #1
   1fdfe:	0018      	movs	r0, r3
   1fe00:	4b07      	ldr	r3, [pc, #28]	; (1fe20 <sd_mmc_spi_select_device+0x84>)
   1fe02:	4798      	blx	r3
}
   1fe04:	46c0      	nop			; (mov r8, r8)
   1fe06:	46bd      	mov	sp, r7
   1fe08:	b003      	add	sp, #12
   1fe0a:	bd90      	pop	{r4, r7, pc}
   1fe0c:	20003e83 	.word	0x20003e83
   1fe10:	00989680 	.word	0x00989680
   1fe14:	20003e44 	.word	0x20003e44
   1fe18:	00027e15 	.word	0x00027e15
   1fe1c:	20003e80 	.word	0x20003e80
   1fe20:	000283b1 	.word	0x000283b1

0001fe24 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1fe24:	b580      	push	{r7, lr}
   1fe26:	b082      	sub	sp, #8
   1fe28:	af00      	add	r7, sp, #0
   1fe2a:	0002      	movs	r2, r0
   1fe2c:	1dfb      	adds	r3, r7, #7
   1fe2e:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fe30:	4b09      	ldr	r3, [pc, #36]	; (1fe58 <sd_mmc_spi_deselect_device+0x34>)
   1fe32:	2200      	movs	r2, #0
   1fe34:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1fe36:	1dfb      	adds	r3, r7, #7
   1fe38:	781a      	ldrb	r2, [r3, #0]
   1fe3a:	0013      	movs	r3, r2
   1fe3c:	005b      	lsls	r3, r3, #1
   1fe3e:	189b      	adds	r3, r3, r2
   1fe40:	4a06      	ldr	r2, [pc, #24]	; (1fe5c <sd_mmc_spi_deselect_device+0x38>)
   1fe42:	1899      	adds	r1, r3, r2
   1fe44:	4b06      	ldr	r3, [pc, #24]	; (1fe60 <sd_mmc_spi_deselect_device+0x3c>)
   1fe46:	2200      	movs	r2, #0
   1fe48:	0018      	movs	r0, r3
   1fe4a:	4b06      	ldr	r3, [pc, #24]	; (1fe64 <sd_mmc_spi_deselect_device+0x40>)
   1fe4c:	4798      	blx	r3
}
   1fe4e:	46c0      	nop			; (mov r8, r8)
   1fe50:	46bd      	mov	sp, r7
   1fe52:	b002      	add	sp, #8
   1fe54:	bd80      	pop	{r7, pc}
   1fe56:	46c0      	nop			; (mov r8, r8)
   1fe58:	20003e83 	.word	0x20003e83
   1fe5c:	20003e80 	.word	0x20003e80
   1fe60:	20003e44 	.word	0x20003e44
   1fe64:	000283b1 	.word	0x000283b1

0001fe68 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1fe68:	b580      	push	{r7, lr}
   1fe6a:	b082      	sub	sp, #8
   1fe6c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1fe6e:	1dbb      	adds	r3, r7, #6
   1fe70:	22ff      	movs	r2, #255	; 0xff
   1fe72:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1fe74:	4b0c      	ldr	r3, [pc, #48]	; (1fea8 <sd_mmc_spi_send_clock+0x40>)
   1fe76:	2200      	movs	r2, #0
   1fe78:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1fe7a:	1dfb      	adds	r3, r7, #7
   1fe7c:	2200      	movs	r2, #0
   1fe7e:	701a      	strb	r2, [r3, #0]
   1fe80:	e00a      	b.n	1fe98 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1fe82:	1db9      	adds	r1, r7, #6
   1fe84:	4b09      	ldr	r3, [pc, #36]	; (1feac <sd_mmc_spi_send_clock+0x44>)
   1fe86:	2201      	movs	r2, #1
   1fe88:	0018      	movs	r0, r3
   1fe8a:	4b09      	ldr	r3, [pc, #36]	; (1feb0 <sd_mmc_spi_send_clock+0x48>)
   1fe8c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1fe8e:	1dfb      	adds	r3, r7, #7
   1fe90:	781a      	ldrb	r2, [r3, #0]
   1fe92:	1dfb      	adds	r3, r7, #7
   1fe94:	3201      	adds	r2, #1
   1fe96:	701a      	strb	r2, [r3, #0]
   1fe98:	1dfb      	adds	r3, r7, #7
   1fe9a:	781b      	ldrb	r3, [r3, #0]
   1fe9c:	2b09      	cmp	r3, #9
   1fe9e:	d9f0      	bls.n	1fe82 <sd_mmc_spi_send_clock+0x1a>
	}
}
   1fea0:	46c0      	nop			; (mov r8, r8)
   1fea2:	46bd      	mov	sp, r7
   1fea4:	b002      	add	sp, #8
   1fea6:	bd80      	pop	{r7, pc}
   1fea8:	20003e83 	.word	0x20003e83
   1feac:	20003e44 	.word	0x20003e44
   1feb0:	000284a1 	.word	0x000284a1

0001feb4 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1feb4:	b590      	push	{r4, r7, lr}
   1feb6:	b085      	sub	sp, #20
   1feb8:	af02      	add	r7, sp, #8
   1feba:	6078      	str	r0, [r7, #4]
   1febc:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1febe:	6839      	ldr	r1, [r7, #0]
   1fec0:	6878      	ldr	r0, [r7, #4]
   1fec2:	2300      	movs	r3, #0
   1fec4:	9300      	str	r3, [sp, #0]
   1fec6:	2300      	movs	r3, #0
   1fec8:	2200      	movs	r2, #0
   1feca:	4c03      	ldr	r4, [pc, #12]	; (1fed8 <sd_mmc_spi_send_cmd+0x24>)
   1fecc:	47a0      	blx	r4
   1fece:	0003      	movs	r3, r0
}
   1fed0:	0018      	movs	r0, r3
   1fed2:	46bd      	mov	sp, r7
   1fed4:	b003      	add	sp, #12
   1fed6:	bd90      	pop	{r4, r7, pc}
   1fed8:	0001fedd 	.word	0x0001fedd

0001fedc <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1fedc:	b590      	push	{r4, r7, lr}
   1fede:	b089      	sub	sp, #36	; 0x24
   1fee0:	af00      	add	r7, sp, #0
   1fee2:	60f8      	str	r0, [r7, #12]
   1fee4:	60b9      	str	r1, [r7, #8]
   1fee6:	0019      	movs	r1, r3
   1fee8:	1dbb      	adds	r3, r7, #6
   1feea:	801a      	strh	r2, [r3, #0]
   1feec:	1d3b      	adds	r3, r7, #4
   1feee:	1c0a      	adds	r2, r1, #0
   1fef0:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1fef2:	231b      	movs	r3, #27
   1fef4:	18fb      	adds	r3, r7, r3
   1fef6:	22ff      	movs	r2, #255	; 0xff
   1fef8:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1fefa:	231c      	movs	r3, #28
   1fefc:	18fb      	adds	r3, r7, r3
   1fefe:	22ff      	movs	r2, #255	; 0xff
   1ff00:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1ff02:	4b72      	ldr	r3, [pc, #456]	; (200cc <sd_mmc_spi_adtc_start+0x1f0>)
   1ff04:	2200      	movs	r2, #0
   1ff06:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1ff08:	68fb      	ldr	r3, [r7, #12]
   1ff0a:	b2db      	uxtb	r3, r3
   1ff0c:	223f      	movs	r2, #63	; 0x3f
   1ff0e:	4013      	ands	r3, r2
   1ff10:	b2db      	uxtb	r3, r3
   1ff12:	2240      	movs	r2, #64	; 0x40
   1ff14:	4313      	orrs	r3, r2
   1ff16:	b2da      	uxtb	r2, r3
   1ff18:	2314      	movs	r3, #20
   1ff1a:	18fb      	adds	r3, r7, r3
   1ff1c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1ff1e:	68bb      	ldr	r3, [r7, #8]
   1ff20:	0e1b      	lsrs	r3, r3, #24
   1ff22:	b2da      	uxtb	r2, r3
   1ff24:	2314      	movs	r3, #20
   1ff26:	18fb      	adds	r3, r7, r3
   1ff28:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1ff2a:	68bb      	ldr	r3, [r7, #8]
   1ff2c:	0c1b      	lsrs	r3, r3, #16
   1ff2e:	b2da      	uxtb	r2, r3
   1ff30:	2314      	movs	r3, #20
   1ff32:	18fb      	adds	r3, r7, r3
   1ff34:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1ff36:	68bb      	ldr	r3, [r7, #8]
   1ff38:	0a1b      	lsrs	r3, r3, #8
   1ff3a:	b2da      	uxtb	r2, r3
   1ff3c:	2314      	movs	r3, #20
   1ff3e:	18fb      	adds	r3, r7, r3
   1ff40:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1ff42:	68bb      	ldr	r3, [r7, #8]
   1ff44:	b2da      	uxtb	r2, r3
   1ff46:	2314      	movs	r3, #20
   1ff48:	18fb      	adds	r3, r7, r3
   1ff4a:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1ff4c:	2314      	movs	r3, #20
   1ff4e:	18fb      	adds	r3, r7, r3
   1ff50:	2105      	movs	r1, #5
   1ff52:	0018      	movs	r0, r3
   1ff54:	4b5e      	ldr	r3, [pc, #376]	; (200d0 <sd_mmc_spi_adtc_start+0x1f4>)
   1ff56:	4798      	blx	r3
   1ff58:	0003      	movs	r3, r0
   1ff5a:	001a      	movs	r2, r3
   1ff5c:	2314      	movs	r3, #20
   1ff5e:	18fb      	adds	r3, r7, r3
   1ff60:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1ff62:	231b      	movs	r3, #27
   1ff64:	18f9      	adds	r1, r7, r3
   1ff66:	4b5b      	ldr	r3, [pc, #364]	; (200d4 <sd_mmc_spi_adtc_start+0x1f8>)
   1ff68:	2201      	movs	r2, #1
   1ff6a:	0018      	movs	r0, r3
   1ff6c:	4b5a      	ldr	r3, [pc, #360]	; (200d8 <sd_mmc_spi_adtc_start+0x1fc>)
   1ff6e:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1ff70:	2314      	movs	r3, #20
   1ff72:	18f9      	adds	r1, r7, r3
   1ff74:	4b57      	ldr	r3, [pc, #348]	; (200d4 <sd_mmc_spi_adtc_start+0x1f8>)
   1ff76:	2206      	movs	r2, #6
   1ff78:	0018      	movs	r0, r3
   1ff7a:	4b57      	ldr	r3, [pc, #348]	; (200d8 <sd_mmc_spi_adtc_start+0x1fc>)
   1ff7c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1ff7e:	2313      	movs	r3, #19
   1ff80:	18fb      	adds	r3, r7, r3
   1ff82:	22ff      	movs	r2, #255	; 0xff
   1ff84:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1ff86:	231c      	movs	r3, #28
   1ff88:	18fb      	adds	r3, r7, r3
   1ff8a:	881b      	ldrh	r3, [r3, #0]
   1ff8c:	2213      	movs	r2, #19
   1ff8e:	18b9      	adds	r1, r7, r2
   1ff90:	4850      	ldr	r0, [pc, #320]	; (200d4 <sd_mmc_spi_adtc_start+0x1f8>)
   1ff92:	2201      	movs	r2, #1
   1ff94:	4c51      	ldr	r4, [pc, #324]	; (200dc <sd_mmc_spi_adtc_start+0x200>)
   1ff96:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1ff98:	231f      	movs	r3, #31
   1ff9a:	18fb      	adds	r3, r7, r3
   1ff9c:	2207      	movs	r2, #7
   1ff9e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1ffa0:	231c      	movs	r3, #28
   1ffa2:	18fb      	adds	r3, r7, r3
   1ffa4:	881b      	ldrh	r3, [r3, #0]
   1ffa6:	2213      	movs	r2, #19
   1ffa8:	18b9      	adds	r1, r7, r2
   1ffaa:	484a      	ldr	r0, [pc, #296]	; (200d4 <sd_mmc_spi_adtc_start+0x1f8>)
   1ffac:	2201      	movs	r2, #1
   1ffae:	4c4b      	ldr	r4, [pc, #300]	; (200dc <sd_mmc_spi_adtc_start+0x200>)
   1ffb0:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1ffb2:	2313      	movs	r3, #19
   1ffb4:	18fb      	adds	r3, r7, r3
   1ffb6:	781b      	ldrb	r3, [r3, #0]
   1ffb8:	b25b      	sxtb	r3, r3
   1ffba:	2b00      	cmp	r3, #0
   1ffbc:	da10      	bge.n	1ffe0 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1ffbe:	231f      	movs	r3, #31
   1ffc0:	18fb      	adds	r3, r7, r3
   1ffc2:	221f      	movs	r2, #31
   1ffc4:	18ba      	adds	r2, r7, r2
   1ffc6:	7812      	ldrb	r2, [r2, #0]
   1ffc8:	3a01      	subs	r2, #1
   1ffca:	701a      	strb	r2, [r3, #0]
   1ffcc:	231f      	movs	r3, #31
   1ffce:	18fb      	adds	r3, r7, r3
   1ffd0:	781b      	ldrb	r3, [r3, #0]
   1ffd2:	2b00      	cmp	r3, #0
   1ffd4:	d1e4      	bne.n	1ffa0 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1ffd6:	4b3d      	ldr	r3, [pc, #244]	; (200cc <sd_mmc_spi_adtc_start+0x1f0>)
   1ffd8:	2202      	movs	r2, #2
   1ffda:	701a      	strb	r2, [r3, #0]
			return false;
   1ffdc:	2300      	movs	r3, #0
   1ffde:	e070      	b.n	200c2 <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1ffe0:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1ffe2:	2313      	movs	r3, #19
   1ffe4:	18fb      	adds	r3, r7, r3
   1ffe6:	781b      	ldrb	r3, [r3, #0]
   1ffe8:	001a      	movs	r2, r3
   1ffea:	4b3d      	ldr	r3, [pc, #244]	; (200e0 <sd_mmc_spi_adtc_start+0x204>)
   1ffec:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1ffee:	2313      	movs	r3, #19
   1fff0:	18fb      	adds	r3, r7, r3
   1fff2:	781b      	ldrb	r3, [r3, #0]
   1fff4:	001a      	movs	r2, r3
   1fff6:	2308      	movs	r3, #8
   1fff8:	4013      	ands	r3, r2
   1fffa:	d004      	beq.n	20006 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1fffc:	4b33      	ldr	r3, [pc, #204]	; (200cc <sd_mmc_spi_adtc_start+0x1f0>)
   1fffe:	2206      	movs	r2, #6
   20000:	701a      	strb	r2, [r3, #0]
		return false;
   20002:	2300      	movs	r3, #0
   20004:	e05d      	b.n	200c2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   20006:	2313      	movs	r3, #19
   20008:	18fb      	adds	r3, r7, r3
   2000a:	781b      	ldrb	r3, [r3, #0]
   2000c:	001a      	movs	r2, r3
   2000e:	2304      	movs	r3, #4
   20010:	4013      	ands	r3, r2
   20012:	d004      	beq.n	2001e <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   20014:	4b2d      	ldr	r3, [pc, #180]	; (200cc <sd_mmc_spi_adtc_start+0x1f0>)
   20016:	2209      	movs	r2, #9
   20018:	701a      	strb	r2, [r3, #0]
		return false;
   2001a:	2300      	movs	r3, #0
   2001c:	e051      	b.n	200c2 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   2001e:	2313      	movs	r3, #19
   20020:	18fb      	adds	r3, r7, r3
   20022:	781b      	ldrb	r3, [r3, #0]
   20024:	001a      	movs	r2, r3
   20026:	2301      	movs	r3, #1
   20028:	439a      	bics	r2, r3
   2002a:	1e13      	subs	r3, r2, #0
   2002c:	d004      	beq.n	20038 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   2002e:	4b27      	ldr	r3, [pc, #156]	; (200cc <sd_mmc_spi_adtc_start+0x1f0>)
   20030:	2201      	movs	r2, #1
   20032:	701a      	strb	r2, [r3, #0]
		return false;
   20034:	2300      	movs	r3, #0
   20036:	e044      	b.n	200c2 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   20038:	68fa      	ldr	r2, [r7, #12]
   2003a:	2380      	movs	r3, #128	; 0x80
   2003c:	019b      	lsls	r3, r3, #6
   2003e:	4013      	ands	r3, r2
   20040:	d00d      	beq.n	2005e <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   20042:	4b28      	ldr	r3, [pc, #160]	; (200e4 <sd_mmc_spi_adtc_start+0x208>)
   20044:	4798      	blx	r3
   20046:	0003      	movs	r3, r0
   20048:	001a      	movs	r2, r3
   2004a:	2301      	movs	r3, #1
   2004c:	4053      	eors	r3, r2
   2004e:	b2db      	uxtb	r3, r3
   20050:	2b00      	cmp	r3, #0
   20052:	d004      	beq.n	2005e <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20054:	4b1d      	ldr	r3, [pc, #116]	; (200cc <sd_mmc_spi_adtc_start+0x1f0>)
   20056:	2203      	movs	r2, #3
   20058:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   2005a:	2300      	movs	r3, #0
   2005c:	e031      	b.n	200c2 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   2005e:	68fa      	ldr	r2, [r7, #12]
   20060:	2380      	movs	r3, #128	; 0x80
   20062:	009b      	lsls	r3, r3, #2
   20064:	4013      	ands	r3, r2
   20066:	d00e      	beq.n	20086 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20068:	4b1d      	ldr	r3, [pc, #116]	; (200e0 <sd_mmc_spi_adtc_start+0x204>)
   2006a:	2200      	movs	r2, #0
   2006c:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   2006e:	231c      	movs	r3, #28
   20070:	18fb      	adds	r3, r7, r3
   20072:	881b      	ldrh	r3, [r3, #0]
   20074:	491a      	ldr	r1, [pc, #104]	; (200e0 <sd_mmc_spi_adtc_start+0x204>)
   20076:	4817      	ldr	r0, [pc, #92]	; (200d4 <sd_mmc_spi_adtc_start+0x1f8>)
   20078:	2201      	movs	r2, #1
   2007a:	4c18      	ldr	r4, [pc, #96]	; (200dc <sd_mmc_spi_adtc_start+0x200>)
   2007c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   2007e:	4b18      	ldr	r3, [pc, #96]	; (200e0 <sd_mmc_spi_adtc_start+0x204>)
   20080:	681a      	ldr	r2, [r3, #0]
   20082:	4b17      	ldr	r3, [pc, #92]	; (200e0 <sd_mmc_spi_adtc_start+0x204>)
   20084:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20086:	68fa      	ldr	r2, [r7, #12]
   20088:	2380      	movs	r3, #128	; 0x80
   2008a:	00db      	lsls	r3, r3, #3
   2008c:	4013      	ands	r3, r2
   2008e:	d00c      	beq.n	200aa <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   20090:	231c      	movs	r3, #28
   20092:	18fb      	adds	r3, r7, r3
   20094:	881b      	ldrh	r3, [r3, #0]
   20096:	4912      	ldr	r1, [pc, #72]	; (200e0 <sd_mmc_spi_adtc_start+0x204>)
   20098:	480e      	ldr	r0, [pc, #56]	; (200d4 <sd_mmc_spi_adtc_start+0x1f8>)
   2009a:	2204      	movs	r2, #4
   2009c:	4c0f      	ldr	r4, [pc, #60]	; (200dc <sd_mmc_spi_adtc_start+0x200>)
   2009e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   200a0:	4b0f      	ldr	r3, [pc, #60]	; (200e0 <sd_mmc_spi_adtc_start+0x204>)
   200a2:	681b      	ldr	r3, [r3, #0]
   200a4:	ba1a      	rev	r2, r3
   200a6:	4b0e      	ldr	r3, [pc, #56]	; (200e0 <sd_mmc_spi_adtc_start+0x204>)
   200a8:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   200aa:	4b0f      	ldr	r3, [pc, #60]	; (200e8 <sd_mmc_spi_adtc_start+0x20c>)
   200ac:	1dba      	adds	r2, r7, #6
   200ae:	8812      	ldrh	r2, [r2, #0]
   200b0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   200b2:	4b0e      	ldr	r3, [pc, #56]	; (200ec <sd_mmc_spi_adtc_start+0x210>)
   200b4:	1d3a      	adds	r2, r7, #4
   200b6:	8812      	ldrh	r2, [r2, #0]
   200b8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   200ba:	4b0d      	ldr	r3, [pc, #52]	; (200f0 <sd_mmc_spi_adtc_start+0x214>)
   200bc:	2200      	movs	r2, #0
   200be:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   200c0:	2301      	movs	r3, #1
}
   200c2:	0018      	movs	r0, r3
   200c4:	46bd      	mov	sp, r7
   200c6:	b009      	add	sp, #36	; 0x24
   200c8:	bd90      	pop	{r4, r7, pc}
   200ca:	46c0      	nop			; (mov r8, r8)
   200cc:	20003e83 	.word	0x20003e83
   200d0:	0001fa45 	.word	0x0001fa45
   200d4:	20003e44 	.word	0x20003e44
   200d8:	000284a1 	.word	0x000284a1
   200dc:	0002827d 	.word	0x0002827d
   200e0:	20003e84 	.word	0x20003e84
   200e4:	0001fb01 	.word	0x0001fb01
   200e8:	20003e8c 	.word	0x20003e8c
   200ec:	20003e8e 	.word	0x20003e8e
   200f0:	20003e88 	.word	0x20003e88

000200f4 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   200f4:	b580      	push	{r7, lr}
   200f6:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   200f8:	4b02      	ldr	r3, [pc, #8]	; (20104 <sd_mmc_spi_get_response+0x10>)
   200fa:	681b      	ldr	r3, [r3, #0]
}
   200fc:	0018      	movs	r0, r3
   200fe:	46bd      	mov	sp, r7
   20100:	bd80      	pop	{r7, pc}
   20102:	46c0      	nop			; (mov r8, r8)
   20104:	20003e84 	.word	0x20003e84

00020108 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   20108:	b590      	push	{r4, r7, lr}
   2010a:	b085      	sub	sp, #20
   2010c:	af00      	add	r7, sp, #0
   2010e:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   20110:	230e      	movs	r3, #14
   20112:	18fb      	adds	r3, r7, r3
   20114:	22ff      	movs	r2, #255	; 0xff
   20116:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20118:	4b1c      	ldr	r3, [pc, #112]	; (2018c <sd_mmc_spi_read_word+0x84>)
   2011a:	2200      	movs	r2, #0
   2011c:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   2011e:	4b1c      	ldr	r3, [pc, #112]	; (20190 <sd_mmc_spi_read_word+0x88>)
   20120:	681a      	ldr	r2, [r3, #0]
   20122:	4b1c      	ldr	r3, [pc, #112]	; (20194 <sd_mmc_spi_read_word+0x8c>)
   20124:	881b      	ldrh	r3, [r3, #0]
   20126:	0019      	movs	r1, r3
   20128:	4b1b      	ldr	r3, [pc, #108]	; (20198 <sd_mmc_spi_read_word+0x90>)
   2012a:	0010      	movs	r0, r2
   2012c:	4798      	blx	r3
   2012e:	1e0b      	subs	r3, r1, #0
   20130:	d10a      	bne.n	20148 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   20132:	4b1a      	ldr	r3, [pc, #104]	; (2019c <sd_mmc_spi_read_word+0x94>)
   20134:	4798      	blx	r3
   20136:	0003      	movs	r3, r0
   20138:	001a      	movs	r2, r3
   2013a:	2301      	movs	r3, #1
   2013c:	4053      	eors	r3, r2
   2013e:	b2db      	uxtb	r3, r3
   20140:	2b00      	cmp	r3, #0
   20142:	d001      	beq.n	20148 <sd_mmc_spi_read_word+0x40>
			return false;
   20144:	2300      	movs	r3, #0
   20146:	e01d      	b.n	20184 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   20148:	230e      	movs	r3, #14
   2014a:	18fb      	adds	r3, r7, r3
   2014c:	881b      	ldrh	r3, [r3, #0]
   2014e:	1d39      	adds	r1, r7, #4
   20150:	4813      	ldr	r0, [pc, #76]	; (201a0 <sd_mmc_spi_read_word+0x98>)
   20152:	2204      	movs	r2, #4
   20154:	4c13      	ldr	r4, [pc, #76]	; (201a4 <sd_mmc_spi_read_word+0x9c>)
   20156:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20158:	687b      	ldr	r3, [r7, #4]
   2015a:	687a      	ldr	r2, [r7, #4]
   2015c:	6812      	ldr	r2, [r2, #0]
   2015e:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   20160:	4b0b      	ldr	r3, [pc, #44]	; (20190 <sd_mmc_spi_read_word+0x88>)
   20162:	681b      	ldr	r3, [r3, #0]
   20164:	1d1a      	adds	r2, r3, #4
   20166:	4b0a      	ldr	r3, [pc, #40]	; (20190 <sd_mmc_spi_read_word+0x88>)
   20168:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   2016a:	4b09      	ldr	r3, [pc, #36]	; (20190 <sd_mmc_spi_read_word+0x88>)
   2016c:	681a      	ldr	r2, [r3, #0]
   2016e:	4b09      	ldr	r3, [pc, #36]	; (20194 <sd_mmc_spi_read_word+0x8c>)
   20170:	881b      	ldrh	r3, [r3, #0]
   20172:	0019      	movs	r1, r3
   20174:	4b08      	ldr	r3, [pc, #32]	; (20198 <sd_mmc_spi_read_word+0x90>)
   20176:	0010      	movs	r0, r2
   20178:	4798      	blx	r3
   2017a:	1e0b      	subs	r3, r1, #0
   2017c:	d101      	bne.n	20182 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   2017e:	4b0a      	ldr	r3, [pc, #40]	; (201a8 <sd_mmc_spi_read_word+0xa0>)
   20180:	4798      	blx	r3
	}
	return true;
   20182:	2301      	movs	r3, #1
}
   20184:	0018      	movs	r0, r3
   20186:	46bd      	mov	sp, r7
   20188:	b005      	add	sp, #20
   2018a:	bd90      	pop	{r4, r7, pc}
   2018c:	20003e83 	.word	0x20003e83
   20190:	20003e88 	.word	0x20003e88
   20194:	20003e8c 	.word	0x20003e8c
   20198:	00032d71 	.word	0x00032d71
   2019c:	0001fb6d 	.word	0x0001fb6d
   201a0:	20003e44 	.word	0x20003e44
   201a4:	0002827d 	.word	0x0002827d
   201a8:	0001fbf1 	.word	0x0001fbf1

000201ac <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   201ac:	b590      	push	{r4, r7, lr}
   201ae:	b085      	sub	sp, #20
   201b0:	af00      	add	r7, sp, #0
   201b2:	6078      	str	r0, [r7, #4]
   201b4:	000a      	movs	r2, r1
   201b6:	1cbb      	adds	r3, r7, #2
   201b8:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   201ba:	230a      	movs	r3, #10
   201bc:	18fb      	adds	r3, r7, r3
   201be:	22ff      	movs	r2, #255	; 0xff
   201c0:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   201c2:	4b1c      	ldr	r3, [pc, #112]	; (20234 <sd_mmc_spi_start_read_blocks+0x88>)
   201c4:	2200      	movs	r2, #0
   201c6:	701a      	strb	r2, [r3, #0]
	pos = 0;
   201c8:	2300      	movs	r3, #0
   201ca:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   201cc:	e025      	b.n	2021a <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   201ce:	4b1a      	ldr	r3, [pc, #104]	; (20238 <sd_mmc_spi_start_read_blocks+0x8c>)
   201d0:	4798      	blx	r3
   201d2:	0003      	movs	r3, r0
   201d4:	001a      	movs	r2, r3
   201d6:	2301      	movs	r3, #1
   201d8:	4053      	eors	r3, r2
   201da:	b2db      	uxtb	r3, r3
   201dc:	2b00      	cmp	r3, #0
   201de:	d001      	beq.n	201e4 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   201e0:	2300      	movs	r3, #0
   201e2:	e022      	b.n	2022a <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   201e4:	687a      	ldr	r2, [r7, #4]
   201e6:	68fb      	ldr	r3, [r7, #12]
   201e8:	18d1      	adds	r1, r2, r3
   201ea:	4b14      	ldr	r3, [pc, #80]	; (2023c <sd_mmc_spi_start_read_blocks+0x90>)
   201ec:	881a      	ldrh	r2, [r3, #0]
   201ee:	230a      	movs	r3, #10
   201f0:	18fb      	adds	r3, r7, r3
   201f2:	881b      	ldrh	r3, [r3, #0]
   201f4:	4812      	ldr	r0, [pc, #72]	; (20240 <sd_mmc_spi_start_read_blocks+0x94>)
   201f6:	4c13      	ldr	r4, [pc, #76]	; (20244 <sd_mmc_spi_start_read_blocks+0x98>)
   201f8:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   201fa:	4b10      	ldr	r3, [pc, #64]	; (2023c <sd_mmc_spi_start_read_blocks+0x90>)
   201fc:	881b      	ldrh	r3, [r3, #0]
   201fe:	001a      	movs	r2, r3
   20200:	68fb      	ldr	r3, [r7, #12]
   20202:	189b      	adds	r3, r3, r2
   20204:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20206:	4b0d      	ldr	r3, [pc, #52]	; (2023c <sd_mmc_spi_start_read_blocks+0x90>)
   20208:	881b      	ldrh	r3, [r3, #0]
   2020a:	001a      	movs	r2, r3
   2020c:	4b0e      	ldr	r3, [pc, #56]	; (20248 <sd_mmc_spi_start_read_blocks+0x9c>)
   2020e:	681b      	ldr	r3, [r3, #0]
   20210:	18d2      	adds	r2, r2, r3
   20212:	4b0d      	ldr	r3, [pc, #52]	; (20248 <sd_mmc_spi_start_read_blocks+0x9c>)
   20214:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20216:	4b0d      	ldr	r3, [pc, #52]	; (2024c <sd_mmc_spi_start_read_blocks+0xa0>)
   20218:	4798      	blx	r3
	while (nb_block--) {
   2021a:	1cbb      	adds	r3, r7, #2
   2021c:	881b      	ldrh	r3, [r3, #0]
   2021e:	1cba      	adds	r2, r7, #2
   20220:	1e59      	subs	r1, r3, #1
   20222:	8011      	strh	r1, [r2, #0]
   20224:	2b00      	cmp	r3, #0
   20226:	d1d2      	bne.n	201ce <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20228:	2301      	movs	r3, #1
}
   2022a:	0018      	movs	r0, r3
   2022c:	46bd      	mov	sp, r7
   2022e:	b005      	add	sp, #20
   20230:	bd90      	pop	{r4, r7, pc}
   20232:	46c0      	nop			; (mov r8, r8)
   20234:	20003e83 	.word	0x20003e83
   20238:	0001fb6d 	.word	0x0001fb6d
   2023c:	20003e8c 	.word	0x20003e8c
   20240:	20003e44 	.word	0x20003e44
   20244:	0002827d 	.word	0x0002827d
   20248:	20003e88 	.word	0x20003e88
   2024c:	0001fbf1 	.word	0x0001fbf1

00020250 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   20250:	b580      	push	{r7, lr}
   20252:	af00      	add	r7, sp, #0
	return true;
   20254:	2301      	movs	r3, #1
}
   20256:	0018      	movs	r0, r3
   20258:	46bd      	mov	sp, r7
   2025a:	bd80      	pop	{r7, pc}

0002025c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   2025c:	b580      	push	{r7, lr}
   2025e:	b084      	sub	sp, #16
   20260:	af00      	add	r7, sp, #0
   20262:	6078      	str	r0, [r7, #4]
   20264:	000a      	movs	r2, r1
   20266:	1cbb      	adds	r3, r7, #2
   20268:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2026a:	4b24      	ldr	r3, [pc, #144]	; (202fc <sd_mmc_spi_start_write_blocks+0xa0>)
   2026c:	2200      	movs	r2, #0
   2026e:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20270:	2300      	movs	r3, #0
   20272:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20274:	e035      	b.n	202e2 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20276:	4b22      	ldr	r3, [pc, #136]	; (20300 <sd_mmc_spi_start_write_blocks+0xa4>)
   20278:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   2027a:	687a      	ldr	r2, [r7, #4]
   2027c:	68fb      	ldr	r3, [r7, #12]
   2027e:	18d1      	adds	r1, r2, r3
   20280:	4b20      	ldr	r3, [pc, #128]	; (20304 <sd_mmc_spi_start_write_blocks+0xa8>)
   20282:	881a      	ldrh	r2, [r3, #0]
   20284:	4b20      	ldr	r3, [pc, #128]	; (20308 <sd_mmc_spi_start_write_blocks+0xac>)
   20286:	0018      	movs	r0, r3
   20288:	4b20      	ldr	r3, [pc, #128]	; (2030c <sd_mmc_spi_start_write_blocks+0xb0>)
   2028a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   2028c:	4b1d      	ldr	r3, [pc, #116]	; (20304 <sd_mmc_spi_start_write_blocks+0xa8>)
   2028e:	881b      	ldrh	r3, [r3, #0]
   20290:	001a      	movs	r2, r3
   20292:	68fb      	ldr	r3, [r7, #12]
   20294:	189b      	adds	r3, r3, r2
   20296:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20298:	4b1a      	ldr	r3, [pc, #104]	; (20304 <sd_mmc_spi_start_write_blocks+0xa8>)
   2029a:	881b      	ldrh	r3, [r3, #0]
   2029c:	001a      	movs	r2, r3
   2029e:	4b1c      	ldr	r3, [pc, #112]	; (20310 <sd_mmc_spi_start_write_blocks+0xb4>)
   202a0:	681b      	ldr	r3, [r3, #0]
   202a2:	18d2      	adds	r2, r2, r3
   202a4:	4b1a      	ldr	r3, [pc, #104]	; (20310 <sd_mmc_spi_start_write_blocks+0xb4>)
   202a6:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   202a8:	4b1a      	ldr	r3, [pc, #104]	; (20314 <sd_mmc_spi_start_write_blocks+0xb8>)
   202aa:	4798      	blx	r3
   202ac:	0003      	movs	r3, r0
   202ae:	001a      	movs	r2, r3
   202b0:	2301      	movs	r3, #1
   202b2:	4053      	eors	r3, r2
   202b4:	b2db      	uxtb	r3, r3
   202b6:	2b00      	cmp	r3, #0
   202b8:	d001      	beq.n	202be <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   202ba:	2300      	movs	r3, #0
   202bc:	e019      	b.n	202f2 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   202be:	1cbb      	adds	r3, r7, #2
   202c0:	881b      	ldrh	r3, [r3, #0]
   202c2:	2b00      	cmp	r3, #0
   202c4:	d00d      	beq.n	202e2 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   202c6:	4b14      	ldr	r3, [pc, #80]	; (20318 <sd_mmc_spi_start_write_blocks+0xbc>)
   202c8:	4798      	blx	r3
   202ca:	0003      	movs	r3, r0
   202cc:	001a      	movs	r2, r3
   202ce:	2301      	movs	r3, #1
   202d0:	4053      	eors	r3, r2
   202d2:	b2db      	uxtb	r3, r3
   202d4:	2b00      	cmp	r3, #0
   202d6:	d004      	beq.n	202e2 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   202d8:	4b08      	ldr	r3, [pc, #32]	; (202fc <sd_mmc_spi_start_write_blocks+0xa0>)
   202da:	2205      	movs	r2, #5
   202dc:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   202de:	2300      	movs	r3, #0
   202e0:	e007      	b.n	202f2 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   202e2:	1cbb      	adds	r3, r7, #2
   202e4:	881b      	ldrh	r3, [r3, #0]
   202e6:	1cba      	adds	r2, r7, #2
   202e8:	1e59      	subs	r1, r3, #1
   202ea:	8011      	strh	r1, [r2, #0]
   202ec:	2b00      	cmp	r3, #0
   202ee:	d1c2      	bne.n	20276 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   202f0:	2301      	movs	r3, #1
}
   202f2:	0018      	movs	r0, r3
   202f4:	46bd      	mov	sp, r7
   202f6:	b004      	add	sp, #16
   202f8:	bd80      	pop	{r7, pc}
   202fa:	46c0      	nop			; (mov r8, r8)
   202fc:	20003e83 	.word	0x20003e83
   20300:	0001fc1d 	.word	0x0001fc1d
   20304:	20003e8c 	.word	0x20003e8c
   20308:	20003e44 	.word	0x20003e44
   2030c:	000284a1 	.word	0x000284a1
   20310:	20003e88 	.word	0x20003e88
   20314:	0001fc6d 	.word	0x0001fc6d
   20318:	0001fb01 	.word	0x0001fb01

0002031c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   2031c:	b580      	push	{r7, lr}
   2031e:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   20320:	4b09      	ldr	r3, [pc, #36]	; (20348 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   20322:	4798      	blx	r3
   20324:	0003      	movs	r3, r0
   20326:	001a      	movs	r2, r3
   20328:	2301      	movs	r3, #1
   2032a:	4053      	eors	r3, r2
   2032c:	b2db      	uxtb	r3, r3
   2032e:	2b00      	cmp	r3, #0
   20330:	d004      	beq.n	2033c <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20332:	4b06      	ldr	r3, [pc, #24]	; (2034c <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20334:	2205      	movs	r2, #5
   20336:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20338:	2300      	movs	r3, #0
   2033a:	e002      	b.n	20342 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   2033c:	4b04      	ldr	r3, [pc, #16]	; (20350 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   2033e:	4798      	blx	r3
   20340:	0003      	movs	r3, r0
}
   20342:	0018      	movs	r0, r3
   20344:	46bd      	mov	sp, r7
   20346:	bd80      	pop	{r7, pc}
   20348:	0001fb01 	.word	0x0001fb01
   2034c:	20003e83 	.word	0x20003e83
   20350:	0001fd01 	.word	0x0001fd01

00020354 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20354:	b580      	push	{r7, lr}
   20356:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20358:	2000      	movs	r0, #0
   2035a:	4b0f      	ldr	r3, [pc, #60]	; (20398 <delay_init+0x44>)
   2035c:	4798      	blx	r3
   2035e:	0002      	movs	r2, r0
   20360:	4b0e      	ldr	r3, [pc, #56]	; (2039c <delay_init+0x48>)
   20362:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20364:	4b0d      	ldr	r3, [pc, #52]	; (2039c <delay_init+0x48>)
   20366:	6818      	ldr	r0, [r3, #0]
   20368:	4b0d      	ldr	r3, [pc, #52]	; (203a0 <delay_init+0x4c>)
   2036a:	22fa      	movs	r2, #250	; 0xfa
   2036c:	0091      	lsls	r1, r2, #2
   2036e:	4798      	blx	r3
   20370:	0003      	movs	r3, r0
   20372:	001a      	movs	r2, r3
   20374:	4b09      	ldr	r3, [pc, #36]	; (2039c <delay_init+0x48>)
   20376:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20378:	4b08      	ldr	r3, [pc, #32]	; (2039c <delay_init+0x48>)
   2037a:	6818      	ldr	r0, [r3, #0]
   2037c:	4b08      	ldr	r3, [pc, #32]	; (203a0 <delay_init+0x4c>)
   2037e:	22fa      	movs	r2, #250	; 0xfa
   20380:	0091      	lsls	r1, r2, #2
   20382:	4798      	blx	r3
   20384:	0003      	movs	r3, r0
   20386:	001a      	movs	r2, r3
   20388:	4b06      	ldr	r3, [pc, #24]	; (203a4 <delay_init+0x50>)
   2038a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   2038c:	4b06      	ldr	r3, [pc, #24]	; (203a8 <delay_init+0x54>)
   2038e:	2205      	movs	r2, #5
   20390:	601a      	str	r2, [r3, #0]
}
   20392:	46c0      	nop			; (mov r8, r8)
   20394:	46bd      	mov	sp, r7
   20396:	bd80      	pop	{r7, pc}
   20398:	0002a025 	.word	0x0002a025
   2039c:	200000c0 	.word	0x200000c0
   203a0:	00032c65 	.word	0x00032c65
   203a4:	200000c4 	.word	0x200000c4
   203a8:	e000e010 	.word	0xe000e010

000203ac <system_pinmux_get_group_from_gpio_pin>:
{
   203ac:	b580      	push	{r7, lr}
   203ae:	b084      	sub	sp, #16
   203b0:	af00      	add	r7, sp, #0
   203b2:	0002      	movs	r2, r0
   203b4:	1dfb      	adds	r3, r7, #7
   203b6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   203b8:	230f      	movs	r3, #15
   203ba:	18fb      	adds	r3, r7, r3
   203bc:	1dfa      	adds	r2, r7, #7
   203be:	7812      	ldrb	r2, [r2, #0]
   203c0:	09d2      	lsrs	r2, r2, #7
   203c2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   203c4:	230e      	movs	r3, #14
   203c6:	18fb      	adds	r3, r7, r3
   203c8:	1dfa      	adds	r2, r7, #7
   203ca:	7812      	ldrb	r2, [r2, #0]
   203cc:	0952      	lsrs	r2, r2, #5
   203ce:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   203d0:	4b0d      	ldr	r3, [pc, #52]	; (20408 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   203d2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   203d4:	230f      	movs	r3, #15
   203d6:	18fb      	adds	r3, r7, r3
   203d8:	781b      	ldrb	r3, [r3, #0]
   203da:	2b00      	cmp	r3, #0
   203dc:	d10f      	bne.n	203fe <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   203de:	230f      	movs	r3, #15
   203e0:	18fb      	adds	r3, r7, r3
   203e2:	781b      	ldrb	r3, [r3, #0]
   203e4:	009b      	lsls	r3, r3, #2
   203e6:	2210      	movs	r2, #16
   203e8:	4694      	mov	ip, r2
   203ea:	44bc      	add	ip, r7
   203ec:	4463      	add	r3, ip
   203ee:	3b08      	subs	r3, #8
   203f0:	681a      	ldr	r2, [r3, #0]
   203f2:	230e      	movs	r3, #14
   203f4:	18fb      	adds	r3, r7, r3
   203f6:	781b      	ldrb	r3, [r3, #0]
   203f8:	01db      	lsls	r3, r3, #7
   203fa:	18d3      	adds	r3, r2, r3
   203fc:	e000      	b.n	20400 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   203fe:	2300      	movs	r3, #0
}
   20400:	0018      	movs	r0, r3
   20402:	46bd      	mov	sp, r7
   20404:	b004      	add	sp, #16
   20406:	bd80      	pop	{r7, pc}
   20408:	41004400 	.word	0x41004400

0002040c <system_interrupt_enable_global>:
{
   2040c:	b580      	push	{r7, lr}
   2040e:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20410:	4b04      	ldr	r3, [pc, #16]	; (20424 <system_interrupt_enable_global+0x18>)
   20412:	2201      	movs	r2, #1
   20414:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20416:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   2041a:	b662      	cpsie	i
}
   2041c:	46c0      	nop			; (mov r8, r8)
   2041e:	46bd      	mov	sp, r7
   20420:	bd80      	pop	{r7, pc}
   20422:	46c0      	nop			; (mov r8, r8)
   20424:	200000ca 	.word	0x200000ca

00020428 <port_get_group_from_gpio_pin>:
{
   20428:	b580      	push	{r7, lr}
   2042a:	b082      	sub	sp, #8
   2042c:	af00      	add	r7, sp, #0
   2042e:	0002      	movs	r2, r0
   20430:	1dfb      	adds	r3, r7, #7
   20432:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20434:	1dfb      	adds	r3, r7, #7
   20436:	781b      	ldrb	r3, [r3, #0]
   20438:	0018      	movs	r0, r3
   2043a:	4b03      	ldr	r3, [pc, #12]	; (20448 <port_get_group_from_gpio_pin+0x20>)
   2043c:	4798      	blx	r3
   2043e:	0003      	movs	r3, r0
}
   20440:	0018      	movs	r0, r3
   20442:	46bd      	mov	sp, r7
   20444:	b002      	add	sp, #8
   20446:	bd80      	pop	{r7, pc}
   20448:	000203ad 	.word	0x000203ad

0002044c <port_get_config_defaults>:
{
   2044c:	b580      	push	{r7, lr}
   2044e:	b082      	sub	sp, #8
   20450:	af00      	add	r7, sp, #0
   20452:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20454:	687b      	ldr	r3, [r7, #4]
   20456:	2200      	movs	r2, #0
   20458:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2045a:	687b      	ldr	r3, [r7, #4]
   2045c:	2201      	movs	r2, #1
   2045e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20460:	687b      	ldr	r3, [r7, #4]
   20462:	2200      	movs	r2, #0
   20464:	709a      	strb	r2, [r3, #2]
}
   20466:	46c0      	nop			; (mov r8, r8)
   20468:	46bd      	mov	sp, r7
   2046a:	b002      	add	sp, #8
   2046c:	bd80      	pop	{r7, pc}
	...

00020470 <port_pin_set_output_level>:
{
   20470:	b580      	push	{r7, lr}
   20472:	b084      	sub	sp, #16
   20474:	af00      	add	r7, sp, #0
   20476:	0002      	movs	r2, r0
   20478:	1dfb      	adds	r3, r7, #7
   2047a:	701a      	strb	r2, [r3, #0]
   2047c:	1dbb      	adds	r3, r7, #6
   2047e:	1c0a      	adds	r2, r1, #0
   20480:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20482:	1dfb      	adds	r3, r7, #7
   20484:	781b      	ldrb	r3, [r3, #0]
   20486:	0018      	movs	r0, r3
   20488:	4b0d      	ldr	r3, [pc, #52]	; (204c0 <port_pin_set_output_level+0x50>)
   2048a:	4798      	blx	r3
   2048c:	0003      	movs	r3, r0
   2048e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20490:	1dfb      	adds	r3, r7, #7
   20492:	781b      	ldrb	r3, [r3, #0]
   20494:	221f      	movs	r2, #31
   20496:	4013      	ands	r3, r2
   20498:	2201      	movs	r2, #1
   2049a:	409a      	lsls	r2, r3
   2049c:	0013      	movs	r3, r2
   2049e:	60bb      	str	r3, [r7, #8]
	if (level) {
   204a0:	1dbb      	adds	r3, r7, #6
   204a2:	781b      	ldrb	r3, [r3, #0]
   204a4:	2b00      	cmp	r3, #0
   204a6:	d003      	beq.n	204b0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   204a8:	68fb      	ldr	r3, [r7, #12]
   204aa:	68ba      	ldr	r2, [r7, #8]
   204ac:	619a      	str	r2, [r3, #24]
}
   204ae:	e002      	b.n	204b6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   204b0:	68fb      	ldr	r3, [r7, #12]
   204b2:	68ba      	ldr	r2, [r7, #8]
   204b4:	615a      	str	r2, [r3, #20]
}
   204b6:	46c0      	nop			; (mov r8, r8)
   204b8:	46bd      	mov	sp, r7
   204ba:	b004      	add	sp, #16
   204bc:	bd80      	pop	{r7, pc}
   204be:	46c0      	nop			; (mov r8, r8)
   204c0:	00020429 	.word	0x00020429

000204c4 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   204c4:	b580      	push	{r7, lr}
   204c6:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   204c8:	4b04      	ldr	r3, [pc, #16]	; (204dc <chip_isr+0x18>)
   204ca:	681b      	ldr	r3, [r3, #0]
   204cc:	2b00      	cmp	r3, #0
   204ce:	d002      	beq.n	204d6 <chip_isr+0x12>
		gpfIsr();
   204d0:	4b02      	ldr	r3, [pc, #8]	; (204dc <chip_isr+0x18>)
   204d2:	681b      	ldr	r3, [r3, #0]
   204d4:	4798      	blx	r3
	}
}
   204d6:	46c0      	nop			; (mov r8, r8)
   204d8:	46bd      	mov	sp, r7
   204da:	bd80      	pop	{r7, pc}
   204dc:	20003e90 	.word	0x20003e90

000204e0 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   204e0:	b580      	push	{r7, lr}
   204e2:	b082      	sub	sp, #8
   204e4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   204e6:	1d3b      	adds	r3, r7, #4
   204e8:	0018      	movs	r0, r3
   204ea:	4b10      	ldr	r3, [pc, #64]	; (2052c <init_chip_pins+0x4c>)
   204ec:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   204ee:	1d3b      	adds	r3, r7, #4
   204f0:	2201      	movs	r2, #1
   204f2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   204f4:	1d3b      	adds	r3, r7, #4
   204f6:	0019      	movs	r1, r3
   204f8:	201b      	movs	r0, #27
   204fa:	4b0d      	ldr	r3, [pc, #52]	; (20530 <init_chip_pins+0x50>)
   204fc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   204fe:	1d3b      	adds	r3, r7, #4
   20500:	0019      	movs	r1, r3
   20502:	201c      	movs	r0, #28
   20504:	4b0a      	ldr	r3, [pc, #40]	; (20530 <init_chip_pins+0x50>)
   20506:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   20508:	1d3b      	adds	r3, r7, #4
   2050a:	0019      	movs	r1, r3
   2050c:	2028      	movs	r0, #40	; 0x28
   2050e:	4b08      	ldr	r3, [pc, #32]	; (20530 <init_chip_pins+0x50>)
   20510:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20512:	2100      	movs	r1, #0
   20514:	201c      	movs	r0, #28
   20516:	4b07      	ldr	r3, [pc, #28]	; (20534 <init_chip_pins+0x54>)
   20518:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   2051a:	2100      	movs	r1, #0
   2051c:	201b      	movs	r0, #27
   2051e:	4b05      	ldr	r3, [pc, #20]	; (20534 <init_chip_pins+0x54>)
   20520:	4798      	blx	r3
}
   20522:	46c0      	nop			; (mov r8, r8)
   20524:	46bd      	mov	sp, r7
   20526:	b002      	add	sp, #8
   20528:	bd80      	pop	{r7, pc}
   2052a:	46c0      	nop			; (mov r8, r8)
   2052c:	0002044d 	.word	0x0002044d
   20530:	00026c6d 	.word	0x00026c6d
   20534:	00020471 	.word	0x00020471

00020538 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20538:	b580      	push	{r7, lr}
   2053a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   2053c:	4b0b      	ldr	r3, [pc, #44]	; (2056c <nm_bsp_init+0x34>)
   2053e:	2200      	movs	r2, #0
   20540:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   20542:	4b0b      	ldr	r3, [pc, #44]	; (20570 <nm_bsp_init+0x38>)
   20544:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20546:	4b0b      	ldr	r3, [pc, #44]	; (20574 <nm_bsp_init+0x3c>)
   20548:	681b      	ldr	r3, [r3, #0]
   2054a:	2201      	movs	r2, #1
   2054c:	4013      	ands	r3, r2
   2054e:	d004      	beq.n	2055a <nm_bsp_init+0x22>
   20550:	4b08      	ldr	r3, [pc, #32]	; (20574 <nm_bsp_init+0x3c>)
   20552:	681b      	ldr	r3, [r3, #0]
   20554:	2202      	movs	r2, #2
   20556:	4013      	ands	r3, r2
   20558:	d101      	bne.n	2055e <nm_bsp_init+0x26>
	    delay_init();
   2055a:	4b07      	ldr	r3, [pc, #28]	; (20578 <nm_bsp_init+0x40>)
   2055c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   2055e:	4b07      	ldr	r3, [pc, #28]	; (2057c <nm_bsp_init+0x44>)
   20560:	4798      	blx	r3

	return M2M_SUCCESS;
   20562:	2300      	movs	r3, #0
}
   20564:	0018      	movs	r0, r3
   20566:	46bd      	mov	sp, r7
   20568:	bd80      	pop	{r7, pc}
   2056a:	46c0      	nop			; (mov r8, r8)
   2056c:	20003e90 	.word	0x20003e90
   20570:	000204e1 	.word	0x000204e1
   20574:	e000e010 	.word	0xe000e010
   20578:	00020355 	.word	0x00020355
   2057c:	0002040d 	.word	0x0002040d

00020580 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   20580:	b580      	push	{r7, lr}
   20582:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20584:	2100      	movs	r1, #0
   20586:	201c      	movs	r0, #28
   20588:	4b0b      	ldr	r3, [pc, #44]	; (205b8 <nm_bsp_reset+0x38>)
   2058a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   2058c:	2100      	movs	r1, #0
   2058e:	201b      	movs	r0, #27
   20590:	4b09      	ldr	r3, [pc, #36]	; (205b8 <nm_bsp_reset+0x38>)
   20592:	4798      	blx	r3
	nm_bsp_sleep(1);
   20594:	2001      	movs	r0, #1
   20596:	4b09      	ldr	r3, [pc, #36]	; (205bc <nm_bsp_reset+0x3c>)
   20598:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   2059a:	2101      	movs	r1, #1
   2059c:	201c      	movs	r0, #28
   2059e:	4b06      	ldr	r3, [pc, #24]	; (205b8 <nm_bsp_reset+0x38>)
   205a0:	4798      	blx	r3
	nm_bsp_sleep(10);
   205a2:	200a      	movs	r0, #10
   205a4:	4b05      	ldr	r3, [pc, #20]	; (205bc <nm_bsp_reset+0x3c>)
   205a6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   205a8:	2101      	movs	r1, #1
   205aa:	201b      	movs	r0, #27
   205ac:	4b02      	ldr	r3, [pc, #8]	; (205b8 <nm_bsp_reset+0x38>)
   205ae:	4798      	blx	r3
}
   205b0:	46c0      	nop			; (mov r8, r8)
   205b2:	46bd      	mov	sp, r7
   205b4:	bd80      	pop	{r7, pc}
   205b6:	46c0      	nop			; (mov r8, r8)
   205b8:	00020471 	.word	0x00020471
   205bc:	000205c1 	.word	0x000205c1

000205c0 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   205c0:	b580      	push	{r7, lr}
   205c2:	b082      	sub	sp, #8
   205c4:	af00      	add	r7, sp, #0
   205c6:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   205c8:	687b      	ldr	r3, [r7, #4]
   205ca:	0018      	movs	r0, r3
   205cc:	4b02      	ldr	r3, [pc, #8]	; (205d8 <nm_bsp_sleep+0x18>)
   205ce:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   205d0:	46c0      	nop			; (mov r8, r8)
   205d2:	46bd      	mov	sp, r7
   205d4:	b002      	add	sp, #8
   205d6:	bd80      	pop	{r7, pc}
   205d8:	0001c791 	.word	0x0001c791

000205dc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   205dc:	b580      	push	{r7, lr}
   205de:	b086      	sub	sp, #24
   205e0:	af00      	add	r7, sp, #0
   205e2:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   205e4:	4b15      	ldr	r3, [pc, #84]	; (2063c <nm_bsp_register_isr+0x60>)
   205e6:	687a      	ldr	r2, [r7, #4]
   205e8:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   205ea:	230c      	movs	r3, #12
   205ec:	18fb      	adds	r3, r7, r3
   205ee:	0018      	movs	r0, r3
   205f0:	4b13      	ldr	r3, [pc, #76]	; (20640 <nm_bsp_register_isr+0x64>)
   205f2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   205f4:	230c      	movs	r3, #12
   205f6:	18fb      	adds	r3, r7, r3
   205f8:	2229      	movs	r2, #41	; 0x29
   205fa:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   205fc:	230c      	movs	r3, #12
   205fe:	18fb      	adds	r3, r7, r3
   20600:	2200      	movs	r2, #0
   20602:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   20604:	230c      	movs	r3, #12
   20606:	18fb      	adds	r3, r7, r3
   20608:	2201      	movs	r2, #1
   2060a:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   2060c:	230c      	movs	r3, #12
   2060e:	18fb      	adds	r3, r7, r3
   20610:	2202      	movs	r2, #2
   20612:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   20614:	230c      	movs	r3, #12
   20616:	18fb      	adds	r3, r7, r3
   20618:	0019      	movs	r1, r3
   2061a:	2009      	movs	r0, #9
   2061c:	4b09      	ldr	r3, [pc, #36]	; (20644 <nm_bsp_register_isr+0x68>)
   2061e:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   20620:	4b09      	ldr	r3, [pc, #36]	; (20648 <nm_bsp_register_isr+0x6c>)
   20622:	2200      	movs	r2, #0
   20624:	2109      	movs	r1, #9
   20626:	0018      	movs	r0, r3
   20628:	4b08      	ldr	r3, [pc, #32]	; (2064c <nm_bsp_register_isr+0x70>)
   2062a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   2062c:	2100      	movs	r1, #0
   2062e:	2009      	movs	r0, #9
   20630:	4b07      	ldr	r3, [pc, #28]	; (20650 <nm_bsp_register_isr+0x74>)
   20632:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   20634:	46c0      	nop			; (mov r8, r8)
   20636:	46bd      	mov	sp, r7
   20638:	b006      	add	sp, #24
   2063a:	bd80      	pop	{r7, pc}
   2063c:	20003e90 	.word	0x20003e90
   20640:	00026b15 	.word	0x00026b15
   20644:	00026b49 	.word	0x00026b49
   20648:	000204c5 	.word	0x000204c5
   2064c:	00026715 	.word	0x00026715
   20650:	00026779 	.word	0x00026779

00020654 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   20654:	b580      	push	{r7, lr}
   20656:	b082      	sub	sp, #8
   20658:	af00      	add	r7, sp, #0
   2065a:	0002      	movs	r2, r0
   2065c:	1dfb      	adds	r3, r7, #7
   2065e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   20660:	1dfb      	adds	r3, r7, #7
   20662:	781b      	ldrb	r3, [r3, #0]
   20664:	2b00      	cmp	r3, #0
   20666:	d004      	beq.n	20672 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   20668:	2100      	movs	r1, #0
   2066a:	2009      	movs	r0, #9
   2066c:	4b05      	ldr	r3, [pc, #20]	; (20684 <nm_bsp_interrupt_ctrl+0x30>)
   2066e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   20670:	e003      	b.n	2067a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   20672:	2100      	movs	r1, #0
   20674:	2009      	movs	r0, #9
   20676:	4b04      	ldr	r3, [pc, #16]	; (20688 <nm_bsp_interrupt_ctrl+0x34>)
   20678:	4798      	blx	r3
}
   2067a:	46c0      	nop			; (mov r8, r8)
   2067c:	46bd      	mov	sp, r7
   2067e:	b002      	add	sp, #8
   20680:	bd80      	pop	{r7, pc}
   20682:	46c0      	nop			; (mov r8, r8)
   20684:	00026779 	.word	0x00026779
   20688:	000267c1 	.word	0x000267c1

0002068c <system_pinmux_get_group_from_gpio_pin>:
{
   2068c:	b580      	push	{r7, lr}
   2068e:	b084      	sub	sp, #16
   20690:	af00      	add	r7, sp, #0
   20692:	0002      	movs	r2, r0
   20694:	1dfb      	adds	r3, r7, #7
   20696:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20698:	230f      	movs	r3, #15
   2069a:	18fb      	adds	r3, r7, r3
   2069c:	1dfa      	adds	r2, r7, #7
   2069e:	7812      	ldrb	r2, [r2, #0]
   206a0:	09d2      	lsrs	r2, r2, #7
   206a2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   206a4:	230e      	movs	r3, #14
   206a6:	18fb      	adds	r3, r7, r3
   206a8:	1dfa      	adds	r2, r7, #7
   206aa:	7812      	ldrb	r2, [r2, #0]
   206ac:	0952      	lsrs	r2, r2, #5
   206ae:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   206b0:	4b0d      	ldr	r3, [pc, #52]	; (206e8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   206b2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   206b4:	230f      	movs	r3, #15
   206b6:	18fb      	adds	r3, r7, r3
   206b8:	781b      	ldrb	r3, [r3, #0]
   206ba:	2b00      	cmp	r3, #0
   206bc:	d10f      	bne.n	206de <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   206be:	230f      	movs	r3, #15
   206c0:	18fb      	adds	r3, r7, r3
   206c2:	781b      	ldrb	r3, [r3, #0]
   206c4:	009b      	lsls	r3, r3, #2
   206c6:	2210      	movs	r2, #16
   206c8:	4694      	mov	ip, r2
   206ca:	44bc      	add	ip, r7
   206cc:	4463      	add	r3, ip
   206ce:	3b08      	subs	r3, #8
   206d0:	681a      	ldr	r2, [r3, #0]
   206d2:	230e      	movs	r3, #14
   206d4:	18fb      	adds	r3, r7, r3
   206d6:	781b      	ldrb	r3, [r3, #0]
   206d8:	01db      	lsls	r3, r3, #7
   206da:	18d3      	adds	r3, r2, r3
   206dc:	e000      	b.n	206e0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   206de:	2300      	movs	r3, #0
}
   206e0:	0018      	movs	r0, r3
   206e2:	46bd      	mov	sp, r7
   206e4:	b004      	add	sp, #16
   206e6:	bd80      	pop	{r7, pc}
   206e8:	41004400 	.word	0x41004400

000206ec <system_interrupt_enable>:
{
   206ec:	b580      	push	{r7, lr}
   206ee:	b082      	sub	sp, #8
   206f0:	af00      	add	r7, sp, #0
   206f2:	0002      	movs	r2, r0
   206f4:	1dfb      	adds	r3, r7, #7
   206f6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   206f8:	4b06      	ldr	r3, [pc, #24]	; (20714 <system_interrupt_enable+0x28>)
   206fa:	1dfa      	adds	r2, r7, #7
   206fc:	7812      	ldrb	r2, [r2, #0]
   206fe:	0011      	movs	r1, r2
   20700:	221f      	movs	r2, #31
   20702:	400a      	ands	r2, r1
   20704:	2101      	movs	r1, #1
   20706:	4091      	lsls	r1, r2
   20708:	000a      	movs	r2, r1
   2070a:	601a      	str	r2, [r3, #0]
}
   2070c:	46c0      	nop			; (mov r8, r8)
   2070e:	46bd      	mov	sp, r7
   20710:	b002      	add	sp, #8
   20712:	bd80      	pop	{r7, pc}
   20714:	e000e100 	.word	0xe000e100

00020718 <system_interrupt_disable>:
{
   20718:	b580      	push	{r7, lr}
   2071a:	b082      	sub	sp, #8
   2071c:	af00      	add	r7, sp, #0
   2071e:	0002      	movs	r2, r0
   20720:	1dfb      	adds	r3, r7, #7
   20722:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20724:	4a07      	ldr	r2, [pc, #28]	; (20744 <system_interrupt_disable+0x2c>)
   20726:	1dfb      	adds	r3, r7, #7
   20728:	781b      	ldrb	r3, [r3, #0]
   2072a:	0019      	movs	r1, r3
   2072c:	231f      	movs	r3, #31
   2072e:	400b      	ands	r3, r1
   20730:	2101      	movs	r1, #1
   20732:	4099      	lsls	r1, r3
   20734:	000b      	movs	r3, r1
   20736:	0019      	movs	r1, r3
   20738:	2380      	movs	r3, #128	; 0x80
   2073a:	50d1      	str	r1, [r2, r3]
}
   2073c:	46c0      	nop			; (mov r8, r8)
   2073e:	46bd      	mov	sp, r7
   20740:	b002      	add	sp, #8
   20742:	bd80      	pop	{r7, pc}
   20744:	e000e100 	.word	0xe000e100

00020748 <port_get_group_from_gpio_pin>:
{
   20748:	b580      	push	{r7, lr}
   2074a:	b082      	sub	sp, #8
   2074c:	af00      	add	r7, sp, #0
   2074e:	0002      	movs	r2, r0
   20750:	1dfb      	adds	r3, r7, #7
   20752:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20754:	1dfb      	adds	r3, r7, #7
   20756:	781b      	ldrb	r3, [r3, #0]
   20758:	0018      	movs	r0, r3
   2075a:	4b03      	ldr	r3, [pc, #12]	; (20768 <port_get_group_from_gpio_pin+0x20>)
   2075c:	4798      	blx	r3
   2075e:	0003      	movs	r3, r0
}
   20760:	0018      	movs	r0, r3
   20762:	46bd      	mov	sp, r7
   20764:	b002      	add	sp, #8
   20766:	bd80      	pop	{r7, pc}
   20768:	0002068d 	.word	0x0002068d

0002076c <port_get_config_defaults>:
{
   2076c:	b580      	push	{r7, lr}
   2076e:	b082      	sub	sp, #8
   20770:	af00      	add	r7, sp, #0
   20772:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20774:	687b      	ldr	r3, [r7, #4]
   20776:	2200      	movs	r2, #0
   20778:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2077a:	687b      	ldr	r3, [r7, #4]
   2077c:	2201      	movs	r2, #1
   2077e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20780:	687b      	ldr	r3, [r7, #4]
   20782:	2200      	movs	r2, #0
   20784:	709a      	strb	r2, [r3, #2]
}
   20786:	46c0      	nop			; (mov r8, r8)
   20788:	46bd      	mov	sp, r7
   2078a:	b002      	add	sp, #8
   2078c:	bd80      	pop	{r7, pc}
	...

00020790 <port_pin_set_output_level>:
{
   20790:	b580      	push	{r7, lr}
   20792:	b084      	sub	sp, #16
   20794:	af00      	add	r7, sp, #0
   20796:	0002      	movs	r2, r0
   20798:	1dfb      	adds	r3, r7, #7
   2079a:	701a      	strb	r2, [r3, #0]
   2079c:	1dbb      	adds	r3, r7, #6
   2079e:	1c0a      	adds	r2, r1, #0
   207a0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   207a2:	1dfb      	adds	r3, r7, #7
   207a4:	781b      	ldrb	r3, [r3, #0]
   207a6:	0018      	movs	r0, r3
   207a8:	4b0d      	ldr	r3, [pc, #52]	; (207e0 <port_pin_set_output_level+0x50>)
   207aa:	4798      	blx	r3
   207ac:	0003      	movs	r3, r0
   207ae:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   207b0:	1dfb      	adds	r3, r7, #7
   207b2:	781b      	ldrb	r3, [r3, #0]
   207b4:	221f      	movs	r2, #31
   207b6:	4013      	ands	r3, r2
   207b8:	2201      	movs	r2, #1
   207ba:	409a      	lsls	r2, r3
   207bc:	0013      	movs	r3, r2
   207be:	60bb      	str	r3, [r7, #8]
	if (level) {
   207c0:	1dbb      	adds	r3, r7, #6
   207c2:	781b      	ldrb	r3, [r3, #0]
   207c4:	2b00      	cmp	r3, #0
   207c6:	d003      	beq.n	207d0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   207c8:	68fb      	ldr	r3, [r7, #12]
   207ca:	68ba      	ldr	r2, [r7, #8]
   207cc:	619a      	str	r2, [r3, #24]
}
   207ce:	e002      	b.n	207d6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   207d0:	68fb      	ldr	r3, [r7, #12]
   207d2:	68ba      	ldr	r2, [r7, #8]
   207d4:	615a      	str	r2, [r3, #20]
}
   207d6:	46c0      	nop			; (mov r8, r8)
   207d8:	46bd      	mov	sp, r7
   207da:	b004      	add	sp, #16
   207dc:	bd80      	pop	{r7, pc}
   207de:	46c0      	nop			; (mov r8, r8)
   207e0:	00020749 	.word	0x00020749

000207e4 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   207e4:	b580      	push	{r7, lr}
   207e6:	b084      	sub	sp, #16
   207e8:	af00      	add	r7, sp, #0
   207ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   207ec:	687b      	ldr	r3, [r7, #4]
   207ee:	681b      	ldr	r3, [r3, #0]
   207f0:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   207f2:	68fb      	ldr	r3, [r7, #12]
   207f4:	69db      	ldr	r3, [r3, #28]
   207f6:	1e5a      	subs	r2, r3, #1
   207f8:	4193      	sbcs	r3, r2
   207fa:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   207fc:	0018      	movs	r0, r3
   207fe:	46bd      	mov	sp, r7
   20800:	b004      	add	sp, #16
   20802:	bd80      	pop	{r7, pc}

00020804 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   20804:	b580      	push	{r7, lr}
   20806:	b082      	sub	sp, #8
   20808:	af00      	add	r7, sp, #0
   2080a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   2080c:	687b      	ldr	r3, [r7, #4]
   2080e:	2201      	movs	r2, #1
   20810:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   20812:	687b      	ldr	r3, [r7, #4]
   20814:	2200      	movs	r2, #0
   20816:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20818:	687b      	ldr	r3, [r7, #4]
   2081a:	2200      	movs	r2, #0
   2081c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2081e:	687b      	ldr	r3, [r7, #4]
   20820:	22c0      	movs	r2, #192	; 0xc0
   20822:	0392      	lsls	r2, r2, #14
   20824:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   20826:	687b      	ldr	r3, [r7, #4]
   20828:	2200      	movs	r2, #0
   2082a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   2082c:	687b      	ldr	r3, [r7, #4]
   2082e:	2200      	movs	r2, #0
   20830:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   20832:	687b      	ldr	r3, [r7, #4]
   20834:	2201      	movs	r2, #1
   20836:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   20838:	687b      	ldr	r3, [r7, #4]
   2083a:	2201      	movs	r2, #1
   2083c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   2083e:	687b      	ldr	r3, [r7, #4]
   20840:	2200      	movs	r2, #0
   20842:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   20844:	687b      	ldr	r3, [r7, #4]
   20846:	2224      	movs	r2, #36	; 0x24
   20848:	2100      	movs	r1, #0
   2084a:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   2084c:	687b      	ldr	r3, [r7, #4]
   2084e:	3318      	adds	r3, #24
   20850:	220c      	movs	r2, #12
   20852:	2100      	movs	r1, #0
   20854:	0018      	movs	r0, r3
   20856:	4b0a      	ldr	r3, [pc, #40]	; (20880 <spi_get_config_defaults+0x7c>)
   20858:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   2085a:	687b      	ldr	r3, [r7, #4]
   2085c:	4a09      	ldr	r2, [pc, #36]	; (20884 <spi_get_config_defaults+0x80>)
   2085e:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   20860:	687b      	ldr	r3, [r7, #4]
   20862:	2200      	movs	r2, #0
   20864:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   20866:	687b      	ldr	r3, [r7, #4]
   20868:	2200      	movs	r2, #0
   2086a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   2086c:	687b      	ldr	r3, [r7, #4]
   2086e:	2200      	movs	r2, #0
   20870:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   20872:	687b      	ldr	r3, [r7, #4]
   20874:	2200      	movs	r2, #0
   20876:	635a      	str	r2, [r3, #52]	; 0x34

};
   20878:	46c0      	nop			; (mov r8, r8)
   2087a:	46bd      	mov	sp, r7
   2087c:	b002      	add	sp, #8
   2087e:	bd80      	pop	{r7, pc}
   20880:	00034c3f 	.word	0x00034c3f
   20884:	000186a0 	.word	0x000186a0

00020888 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   20888:	b580      	push	{r7, lr}
   2088a:	b082      	sub	sp, #8
   2088c:	af00      	add	r7, sp, #0
   2088e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   20890:	687b      	ldr	r3, [r7, #4]
   20892:	220a      	movs	r2, #10
   20894:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   20896:	687b      	ldr	r3, [r7, #4]
   20898:	2200      	movs	r2, #0
   2089a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   2089c:	687b      	ldr	r3, [r7, #4]
   2089e:	2200      	movs	r2, #0
   208a0:	709a      	strb	r2, [r3, #2]
}
   208a2:	46c0      	nop			; (mov r8, r8)
   208a4:	46bd      	mov	sp, r7
   208a6:	b002      	add	sp, #8
   208a8:	bd80      	pop	{r7, pc}
	...

000208ac <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   208ac:	b580      	push	{r7, lr}
   208ae:	b084      	sub	sp, #16
   208b0:	af00      	add	r7, sp, #0
   208b2:	6078      	str	r0, [r7, #4]
   208b4:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   208b6:	683b      	ldr	r3, [r7, #0]
   208b8:	781a      	ldrb	r2, [r3, #0]
   208ba:	687b      	ldr	r3, [r7, #4]
   208bc:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   208be:	683b      	ldr	r3, [r7, #0]
   208c0:	785a      	ldrb	r2, [r3, #1]
   208c2:	687b      	ldr	r3, [r7, #4]
   208c4:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   208c6:	683b      	ldr	r3, [r7, #0]
   208c8:	789a      	ldrb	r2, [r3, #2]
   208ca:	687b      	ldr	r3, [r7, #4]
   208cc:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   208ce:	230c      	movs	r3, #12
   208d0:	18fb      	adds	r3, r7, r3
   208d2:	0018      	movs	r0, r3
   208d4:	4b0b      	ldr	r3, [pc, #44]	; (20904 <spi_attach_slave+0x58>)
   208d6:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   208d8:	230c      	movs	r3, #12
   208da:	18fb      	adds	r3, r7, r3
   208dc:	2201      	movs	r2, #1
   208de:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   208e0:	687b      	ldr	r3, [r7, #4]
   208e2:	781b      	ldrb	r3, [r3, #0]
   208e4:	220c      	movs	r2, #12
   208e6:	18ba      	adds	r2, r7, r2
   208e8:	0011      	movs	r1, r2
   208ea:	0018      	movs	r0, r3
   208ec:	4b06      	ldr	r3, [pc, #24]	; (20908 <spi_attach_slave+0x5c>)
   208ee:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   208f0:	687b      	ldr	r3, [r7, #4]
   208f2:	781b      	ldrb	r3, [r3, #0]
   208f4:	2101      	movs	r1, #1
   208f6:	0018      	movs	r0, r3
   208f8:	4b04      	ldr	r3, [pc, #16]	; (2090c <spi_attach_slave+0x60>)
   208fa:	4798      	blx	r3
}
   208fc:	46c0      	nop			; (mov r8, r8)
   208fe:	46bd      	mov	sp, r7
   20900:	b004      	add	sp, #16
   20902:	bd80      	pop	{r7, pc}
   20904:	0002076d 	.word	0x0002076d
   20908:	00026c6d 	.word	0x00026c6d
   2090c:	00020791 	.word	0x00020791

00020910 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   20910:	b580      	push	{r7, lr}
   20912:	b084      	sub	sp, #16
   20914:	af00      	add	r7, sp, #0
   20916:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20918:	687b      	ldr	r3, [r7, #4]
   2091a:	681b      	ldr	r3, [r3, #0]
   2091c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2091e:	687b      	ldr	r3, [r7, #4]
   20920:	681b      	ldr	r3, [r3, #0]
   20922:	0018      	movs	r0, r3
   20924:	4b0b      	ldr	r3, [pc, #44]	; (20954 <spi_enable+0x44>)
   20926:	4798      	blx	r3
   20928:	0003      	movs	r3, r0
   2092a:	0018      	movs	r0, r3
   2092c:	4b0a      	ldr	r3, [pc, #40]	; (20958 <spi_enable+0x48>)
   2092e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20930:	46c0      	nop			; (mov r8, r8)
   20932:	687b      	ldr	r3, [r7, #4]
   20934:	0018      	movs	r0, r3
   20936:	4b09      	ldr	r3, [pc, #36]	; (2095c <spi_enable+0x4c>)
   20938:	4798      	blx	r3
   2093a:	1e03      	subs	r3, r0, #0
   2093c:	d1f9      	bne.n	20932 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2093e:	68fb      	ldr	r3, [r7, #12]
   20940:	681b      	ldr	r3, [r3, #0]
   20942:	2202      	movs	r2, #2
   20944:	431a      	orrs	r2, r3
   20946:	68fb      	ldr	r3, [r7, #12]
   20948:	601a      	str	r2, [r3, #0]
}
   2094a:	46c0      	nop			; (mov r8, r8)
   2094c:	46bd      	mov	sp, r7
   2094e:	b004      	add	sp, #16
   20950:	bd80      	pop	{r7, pc}
   20952:	46c0      	nop			; (mov r8, r8)
   20954:	0002793d 	.word	0x0002793d
   20958:	000206ed 	.word	0x000206ed
   2095c:	000207e5 	.word	0x000207e5

00020960 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   20960:	b580      	push	{r7, lr}
   20962:	b084      	sub	sp, #16
   20964:	af00      	add	r7, sp, #0
   20966:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20968:	687b      	ldr	r3, [r7, #4]
   2096a:	681b      	ldr	r3, [r3, #0]
   2096c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2096e:	687b      	ldr	r3, [r7, #4]
   20970:	681b      	ldr	r3, [r3, #0]
   20972:	0018      	movs	r0, r3
   20974:	4b0e      	ldr	r3, [pc, #56]	; (209b0 <spi_disable+0x50>)
   20976:	4798      	blx	r3
   20978:	0003      	movs	r3, r0
   2097a:	0018      	movs	r0, r3
   2097c:	4b0d      	ldr	r3, [pc, #52]	; (209b4 <spi_disable+0x54>)
   2097e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20980:	46c0      	nop			; (mov r8, r8)
   20982:	687b      	ldr	r3, [r7, #4]
   20984:	0018      	movs	r0, r3
   20986:	4b0c      	ldr	r3, [pc, #48]	; (209b8 <spi_disable+0x58>)
   20988:	4798      	blx	r3
   2098a:	1e03      	subs	r3, r0, #0
   2098c:	d1f9      	bne.n	20982 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2098e:	68fb      	ldr	r3, [r7, #12]
   20990:	228f      	movs	r2, #143	; 0x8f
   20992:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   20994:	68fb      	ldr	r3, [r7, #12]
   20996:	228f      	movs	r2, #143	; 0x8f
   20998:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2099a:	68fb      	ldr	r3, [r7, #12]
   2099c:	681b      	ldr	r3, [r3, #0]
   2099e:	2202      	movs	r2, #2
   209a0:	4393      	bics	r3, r2
   209a2:	001a      	movs	r2, r3
   209a4:	68fb      	ldr	r3, [r7, #12]
   209a6:	601a      	str	r2, [r3, #0]
}
   209a8:	46c0      	nop			; (mov r8, r8)
   209aa:	46bd      	mov	sp, r7
   209ac:	b004      	add	sp, #16
   209ae:	bd80      	pop	{r7, pc}
   209b0:	0002793d 	.word	0x0002793d
   209b4:	00020719 	.word	0x00020719
   209b8:	000207e5 	.word	0x000207e5

000209bc <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   209bc:	b580      	push	{r7, lr}
   209be:	b084      	sub	sp, #16
   209c0:	af00      	add	r7, sp, #0
   209c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   209c4:	687b      	ldr	r3, [r7, #4]
   209c6:	681b      	ldr	r3, [r3, #0]
   209c8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   209ca:	68fb      	ldr	r3, [r7, #12]
   209cc:	7e1b      	ldrb	r3, [r3, #24]
   209ce:	b2db      	uxtb	r3, r3
   209d0:	001a      	movs	r2, r3
   209d2:	2302      	movs	r3, #2
   209d4:	4013      	ands	r3, r2
   209d6:	1e5a      	subs	r2, r3, #1
   209d8:	4193      	sbcs	r3, r2
   209da:	b2db      	uxtb	r3, r3
}
   209dc:	0018      	movs	r0, r3
   209de:	46bd      	mov	sp, r7
   209e0:	b004      	add	sp, #16
   209e2:	bd80      	pop	{r7, pc}

000209e4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   209e4:	b580      	push	{r7, lr}
   209e6:	b084      	sub	sp, #16
   209e8:	af00      	add	r7, sp, #0
   209ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   209ec:	687b      	ldr	r3, [r7, #4]
   209ee:	681b      	ldr	r3, [r3, #0]
   209f0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   209f2:	68fb      	ldr	r3, [r7, #12]
   209f4:	7e1b      	ldrb	r3, [r3, #24]
   209f6:	b2db      	uxtb	r3, r3
   209f8:	001a      	movs	r2, r3
   209fa:	2301      	movs	r3, #1
   209fc:	4013      	ands	r3, r2
   209fe:	1e5a      	subs	r2, r3, #1
   20a00:	4193      	sbcs	r3, r2
   20a02:	b2db      	uxtb	r3, r3
}
   20a04:	0018      	movs	r0, r3
   20a06:	46bd      	mov	sp, r7
   20a08:	b004      	add	sp, #16
   20a0a:	bd80      	pop	{r7, pc}

00020a0c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   20a0c:	b580      	push	{r7, lr}
   20a0e:	b084      	sub	sp, #16
   20a10:	af00      	add	r7, sp, #0
   20a12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20a14:	687b      	ldr	r3, [r7, #4]
   20a16:	681b      	ldr	r3, [r3, #0]
   20a18:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   20a1a:	68fb      	ldr	r3, [r7, #12]
   20a1c:	7e1b      	ldrb	r3, [r3, #24]
   20a1e:	b2db      	uxtb	r3, r3
   20a20:	001a      	movs	r2, r3
   20a22:	2304      	movs	r3, #4
   20a24:	4013      	ands	r3, r2
   20a26:	1e5a      	subs	r2, r3, #1
   20a28:	4193      	sbcs	r3, r2
   20a2a:	b2db      	uxtb	r3, r3
}
   20a2c:	0018      	movs	r0, r3
   20a2e:	46bd      	mov	sp, r7
   20a30:	b004      	add	sp, #16
   20a32:	bd80      	pop	{r7, pc}

00020a34 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   20a34:	b580      	push	{r7, lr}
   20a36:	b084      	sub	sp, #16
   20a38:	af00      	add	r7, sp, #0
   20a3a:	6078      	str	r0, [r7, #4]
   20a3c:	000a      	movs	r2, r1
   20a3e:	1cbb      	adds	r3, r7, #2
   20a40:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20a42:	687b      	ldr	r3, [r7, #4]
   20a44:	681b      	ldr	r3, [r3, #0]
   20a46:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   20a48:	687b      	ldr	r3, [r7, #4]
   20a4a:	0018      	movs	r0, r3
   20a4c:	4b0a      	ldr	r3, [pc, #40]	; (20a78 <spi_write+0x44>)
   20a4e:	4798      	blx	r3
   20a50:	0003      	movs	r3, r0
   20a52:	001a      	movs	r2, r3
   20a54:	2301      	movs	r3, #1
   20a56:	4053      	eors	r3, r2
   20a58:	b2db      	uxtb	r3, r3
   20a5a:	2b00      	cmp	r3, #0
   20a5c:	d001      	beq.n	20a62 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   20a5e:	2305      	movs	r3, #5
   20a60:	e006      	b.n	20a70 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   20a62:	1cbb      	adds	r3, r7, #2
   20a64:	881b      	ldrh	r3, [r3, #0]
   20a66:	05db      	lsls	r3, r3, #23
   20a68:	0dda      	lsrs	r2, r3, #23
   20a6a:	68fb      	ldr	r3, [r7, #12]
   20a6c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   20a6e:	2300      	movs	r3, #0
}
   20a70:	0018      	movs	r0, r3
   20a72:	46bd      	mov	sp, r7
   20a74:	b004      	add	sp, #16
   20a76:	bd80      	pop	{r7, pc}
   20a78:	000209e5 	.word	0x000209e5

00020a7c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   20a7c:	b580      	push	{r7, lr}
   20a7e:	b084      	sub	sp, #16
   20a80:	af00      	add	r7, sp, #0
   20a82:	6078      	str	r0, [r7, #4]
   20a84:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20a86:	687b      	ldr	r3, [r7, #4]
   20a88:	681b      	ldr	r3, [r3, #0]
   20a8a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   20a8c:	687b      	ldr	r3, [r7, #4]
   20a8e:	0018      	movs	r0, r3
   20a90:	4b1b      	ldr	r3, [pc, #108]	; (20b00 <spi_read+0x84>)
   20a92:	4798      	blx	r3
   20a94:	0003      	movs	r3, r0
   20a96:	001a      	movs	r2, r3
   20a98:	2301      	movs	r3, #1
   20a9a:	4053      	eors	r3, r2
   20a9c:	b2db      	uxtb	r3, r3
   20a9e:	2b00      	cmp	r3, #0
   20aa0:	d001      	beq.n	20aa6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   20aa2:	2310      	movs	r3, #16
   20aa4:	e027      	b.n	20af6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   20aa6:	230f      	movs	r3, #15
   20aa8:	18fb      	adds	r3, r7, r3
   20aaa:	2200      	movs	r2, #0
   20aac:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   20aae:	68bb      	ldr	r3, [r7, #8]
   20ab0:	8b5b      	ldrh	r3, [r3, #26]
   20ab2:	b29b      	uxth	r3, r3
   20ab4:	001a      	movs	r2, r3
   20ab6:	2304      	movs	r3, #4
   20ab8:	4013      	ands	r3, r2
   20aba:	d006      	beq.n	20aca <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   20abc:	230f      	movs	r3, #15
   20abe:	18fb      	adds	r3, r7, r3
   20ac0:	221e      	movs	r2, #30
   20ac2:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   20ac4:	68bb      	ldr	r3, [r7, #8]
   20ac6:	2204      	movs	r2, #4
   20ac8:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   20aca:	687b      	ldr	r3, [r7, #4]
   20acc:	799b      	ldrb	r3, [r3, #6]
   20ace:	2b01      	cmp	r3, #1
   20ad0:	d108      	bne.n	20ae4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   20ad2:	68bb      	ldr	r3, [r7, #8]
   20ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20ad6:	b29b      	uxth	r3, r3
   20ad8:	05db      	lsls	r3, r3, #23
   20ada:	0ddb      	lsrs	r3, r3, #23
   20adc:	b29a      	uxth	r2, r3
   20ade:	683b      	ldr	r3, [r7, #0]
   20ae0:	801a      	strh	r2, [r3, #0]
   20ae2:	e005      	b.n	20af0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   20ae4:	68bb      	ldr	r3, [r7, #8]
   20ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20ae8:	b2db      	uxtb	r3, r3
   20aea:	b29a      	uxth	r2, r3
   20aec:	683b      	ldr	r3, [r7, #0]
   20aee:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   20af0:	230f      	movs	r3, #15
   20af2:	18fb      	adds	r3, r7, r3
   20af4:	781b      	ldrb	r3, [r3, #0]
}
   20af6:	0018      	movs	r0, r3
   20af8:	46bd      	mov	sp, r7
   20afa:	b004      	add	sp, #16
   20afc:	bd80      	pop	{r7, pc}
   20afe:	46c0      	nop			; (mov r8, r8)
   20b00:	00020a0d 	.word	0x00020a0d

00020b04 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   20b04:	b580      	push	{r7, lr}
   20b06:	b086      	sub	sp, #24
   20b08:	af00      	add	r7, sp, #0
   20b0a:	60f8      	str	r0, [r7, #12]
   20b0c:	60b9      	str	r1, [r7, #8]
   20b0e:	1dbb      	adds	r3, r7, #6
   20b10:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   20b12:	2313      	movs	r3, #19
   20b14:	18fb      	adds	r3, r7, r3
   20b16:	22ff      	movs	r2, #255	; 0xff
   20b18:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   20b1a:	2317      	movs	r3, #23
   20b1c:	18fb      	adds	r3, r7, r3
   20b1e:	2200      	movs	r2, #0
   20b20:	701a      	strb	r2, [r3, #0]
   20b22:	2316      	movs	r3, #22
   20b24:	18fb      	adds	r3, r7, r3
   20b26:	2200      	movs	r2, #0
   20b28:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   20b2a:	2314      	movs	r3, #20
   20b2c:	18fb      	adds	r3, r7, r3
   20b2e:	2200      	movs	r2, #0
   20b30:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   20b32:	2310      	movs	r3, #16
   20b34:	18fb      	adds	r3, r7, r3
   20b36:	2200      	movs	r2, #0
   20b38:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   20b3a:	68bb      	ldr	r3, [r7, #8]
   20b3c:	2b00      	cmp	r3, #0
   20b3e:	d102      	bne.n	20b46 <spi_rw+0x42>
   20b40:	68fb      	ldr	r3, [r7, #12]
   20b42:	2b00      	cmp	r3, #0
   20b44:	d003      	beq.n	20b4e <spi_rw+0x4a>
   20b46:	1dbb      	adds	r3, r7, #6
   20b48:	881b      	ldrh	r3, [r3, #0]
   20b4a:	2b00      	cmp	r3, #0
   20b4c:	d102      	bne.n	20b54 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   20b4e:	230f      	movs	r3, #15
   20b50:	425b      	negs	r3, r3
   20b52:	e07e      	b.n	20c52 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   20b54:	68fb      	ldr	r3, [r7, #12]
   20b56:	2b00      	cmp	r3, #0
   20b58:	d106      	bne.n	20b68 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   20b5a:	2313      	movs	r3, #19
   20b5c:	18fb      	adds	r3, r7, r3
   20b5e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   20b60:	2317      	movs	r3, #23
   20b62:	18fb      	adds	r3, r7, r3
   20b64:	2201      	movs	r2, #1
   20b66:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   20b68:	68bb      	ldr	r3, [r7, #8]
   20b6a:	2b00      	cmp	r3, #0
   20b6c:	d106      	bne.n	20b7c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   20b6e:	2313      	movs	r3, #19
   20b70:	18fb      	adds	r3, r7, r3
   20b72:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   20b74:	2316      	movs	r3, #22
   20b76:	18fb      	adds	r3, r7, r3
   20b78:	2201      	movs	r2, #1
   20b7a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   20b7c:	4937      	ldr	r1, [pc, #220]	; (20c5c <spi_rw+0x158>)
   20b7e:	4b38      	ldr	r3, [pc, #224]	; (20c60 <spi_rw+0x15c>)
   20b80:	2201      	movs	r2, #1
   20b82:	0018      	movs	r0, r3
   20b84:	4b37      	ldr	r3, [pc, #220]	; (20c64 <spi_rw+0x160>)
   20b86:	4798      	blx	r3

	while (u16Sz) {
   20b88:	e04c      	b.n	20c24 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   20b8a:	68fb      	ldr	r3, [r7, #12]
   20b8c:	781a      	ldrb	r2, [r3, #0]
   20b8e:	2314      	movs	r3, #20
   20b90:	18fb      	adds	r3, r7, r3
   20b92:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   20b94:	46c0      	nop			; (mov r8, r8)
   20b96:	4b32      	ldr	r3, [pc, #200]	; (20c60 <spi_rw+0x15c>)
   20b98:	0018      	movs	r0, r3
   20b9a:	4b33      	ldr	r3, [pc, #204]	; (20c68 <spi_rw+0x164>)
   20b9c:	4798      	blx	r3
   20b9e:	0003      	movs	r3, r0
   20ba0:	001a      	movs	r2, r3
   20ba2:	2301      	movs	r3, #1
   20ba4:	4053      	eors	r3, r2
   20ba6:	b2db      	uxtb	r3, r3
   20ba8:	2b00      	cmp	r3, #0
   20baa:	d1f4      	bne.n	20b96 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   20bac:	46c0      	nop			; (mov r8, r8)
   20bae:	2314      	movs	r3, #20
   20bb0:	18fb      	adds	r3, r7, r3
   20bb2:	881a      	ldrh	r2, [r3, #0]
   20bb4:	4b2a      	ldr	r3, [pc, #168]	; (20c60 <spi_rw+0x15c>)
   20bb6:	0011      	movs	r1, r2
   20bb8:	0018      	movs	r0, r3
   20bba:	4b2c      	ldr	r3, [pc, #176]	; (20c6c <spi_rw+0x168>)
   20bbc:	4798      	blx	r3
   20bbe:	1e03      	subs	r3, r0, #0
   20bc0:	d1f5      	bne.n	20bae <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   20bc2:	46c0      	nop			; (mov r8, r8)
   20bc4:	4b26      	ldr	r3, [pc, #152]	; (20c60 <spi_rw+0x15c>)
   20bc6:	0018      	movs	r0, r3
   20bc8:	4b29      	ldr	r3, [pc, #164]	; (20c70 <spi_rw+0x16c>)
   20bca:	4798      	blx	r3
   20bcc:	0003      	movs	r3, r0
   20bce:	001a      	movs	r2, r3
   20bd0:	2301      	movs	r3, #1
   20bd2:	4053      	eors	r3, r2
   20bd4:	b2db      	uxtb	r3, r3
   20bd6:	2b00      	cmp	r3, #0
   20bd8:	d1f4      	bne.n	20bc4 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   20bda:	46c0      	nop			; (mov r8, r8)
   20bdc:	2310      	movs	r3, #16
   20bde:	18fa      	adds	r2, r7, r3
   20be0:	4b1f      	ldr	r3, [pc, #124]	; (20c60 <spi_rw+0x15c>)
   20be2:	0011      	movs	r1, r2
   20be4:	0018      	movs	r0, r3
   20be6:	4b23      	ldr	r3, [pc, #140]	; (20c74 <spi_rw+0x170>)
   20be8:	4798      	blx	r3
   20bea:	1e03      	subs	r3, r0, #0
   20bec:	d1f6      	bne.n	20bdc <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   20bee:	2310      	movs	r3, #16
   20bf0:	18fb      	adds	r3, r7, r3
   20bf2:	881b      	ldrh	r3, [r3, #0]
   20bf4:	b2da      	uxtb	r2, r3
   20bf6:	68bb      	ldr	r3, [r7, #8]
   20bf8:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   20bfa:	1dbb      	adds	r3, r7, #6
   20bfc:	881a      	ldrh	r2, [r3, #0]
   20bfe:	1dbb      	adds	r3, r7, #6
   20c00:	3a01      	subs	r2, #1
   20c02:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   20c04:	2316      	movs	r3, #22
   20c06:	18fb      	adds	r3, r7, r3
   20c08:	781b      	ldrb	r3, [r3, #0]
   20c0a:	2b00      	cmp	r3, #0
   20c0c:	d102      	bne.n	20c14 <spi_rw+0x110>
			pu8Miso++;
   20c0e:	68bb      	ldr	r3, [r7, #8]
   20c10:	3301      	adds	r3, #1
   20c12:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   20c14:	2317      	movs	r3, #23
   20c16:	18fb      	adds	r3, r7, r3
   20c18:	781b      	ldrb	r3, [r3, #0]
   20c1a:	2b00      	cmp	r3, #0
   20c1c:	d102      	bne.n	20c24 <spi_rw+0x120>
			pu8Mosi++;
   20c1e:	68fb      	ldr	r3, [r7, #12]
   20c20:	3301      	adds	r3, #1
   20c22:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   20c24:	1dbb      	adds	r3, r7, #6
   20c26:	881b      	ldrh	r3, [r3, #0]
   20c28:	2b00      	cmp	r3, #0
   20c2a:	d1ae      	bne.n	20b8a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   20c2c:	46c0      	nop			; (mov r8, r8)
   20c2e:	4b0c      	ldr	r3, [pc, #48]	; (20c60 <spi_rw+0x15c>)
   20c30:	0018      	movs	r0, r3
   20c32:	4b11      	ldr	r3, [pc, #68]	; (20c78 <spi_rw+0x174>)
   20c34:	4798      	blx	r3
   20c36:	0003      	movs	r3, r0
   20c38:	001a      	movs	r2, r3
   20c3a:	2301      	movs	r3, #1
   20c3c:	4053      	eors	r3, r2
   20c3e:	b2db      	uxtb	r3, r3
   20c40:	2b00      	cmp	r3, #0
   20c42:	d1f4      	bne.n	20c2e <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   20c44:	4905      	ldr	r1, [pc, #20]	; (20c5c <spi_rw+0x158>)
   20c46:	4b06      	ldr	r3, [pc, #24]	; (20c60 <spi_rw+0x15c>)
   20c48:	2200      	movs	r2, #0
   20c4a:	0018      	movs	r0, r3
   20c4c:	4b05      	ldr	r3, [pc, #20]	; (20c64 <spi_rw+0x160>)
   20c4e:	4798      	blx	r3

	return M2M_SUCCESS;
   20c50:	2300      	movs	r3, #0
}
   20c52:	0018      	movs	r0, r3
   20c54:	46bd      	mov	sp, r7
   20c56:	b006      	add	sp, #24
   20c58:	bd80      	pop	{r7, pc}
   20c5a:	46c0      	nop			; (mov r8, r8)
   20c5c:	20005620 	.word	0x20005620
   20c60:	20005624 	.word	0x20005624
   20c64:	000283b1 	.word	0x000283b1
   20c68:	000209e5 	.word	0x000209e5
   20c6c:	00020a35 	.word	0x00020a35
   20c70:	00020a0d 	.word	0x00020a0d
   20c74:	00020a7d 	.word	0x00020a7d
   20c78:	000209bd 	.word	0x000209bd

00020c7c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   20c7c:	b580      	push	{r7, lr}
   20c7e:	b092      	sub	sp, #72	; 0x48
   20c80:	af00      	add	r7, sp, #0
   20c82:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   20c84:	2347      	movs	r3, #71	; 0x47
   20c86:	18fb      	adds	r3, r7, r3
   20c88:	2200      	movs	r2, #0
   20c8a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   20c8c:	2308      	movs	r3, #8
   20c8e:	18fb      	adds	r3, r7, r3
   20c90:	0018      	movs	r0, r3
   20c92:	4b26      	ldr	r3, [pc, #152]	; (20d2c <nm_bus_init+0xb0>)
   20c94:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   20c96:	2308      	movs	r3, #8
   20c98:	18fb      	adds	r3, r7, r3
   20c9a:	220e      	movs	r2, #14
   20c9c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   20c9e:	2308      	movs	r3, #8
   20ca0:	18fa      	adds	r2, r7, r3
   20ca2:	4b23      	ldr	r3, [pc, #140]	; (20d30 <nm_bus_init+0xb4>)
   20ca4:	0011      	movs	r1, r2
   20ca6:	0018      	movs	r0, r3
   20ca8:	4b22      	ldr	r3, [pc, #136]	; (20d34 <nm_bus_init+0xb8>)
   20caa:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   20cac:	230c      	movs	r3, #12
   20cae:	18fb      	adds	r3, r7, r3
   20cb0:	0018      	movs	r0, r3
   20cb2:	4b21      	ldr	r3, [pc, #132]	; (20d38 <nm_bus_init+0xbc>)
   20cb4:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   20cb6:	230c      	movs	r3, #12
   20cb8:	18fb      	adds	r3, r7, r3
   20cba:	22c0      	movs	r2, #192	; 0xc0
   20cbc:	0392      	lsls	r2, r2, #14
   20cbe:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   20cc0:	230c      	movs	r3, #12
   20cc2:	18fb      	adds	r3, r7, r3
   20cc4:	4a1d      	ldr	r2, [pc, #116]	; (20d3c <nm_bus_init+0xc0>)
   20cc6:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   20cc8:	230c      	movs	r3, #12
   20cca:	18fb      	adds	r3, r7, r3
   20ccc:	4a1c      	ldr	r2, [pc, #112]	; (20d40 <nm_bus_init+0xc4>)
   20cce:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   20cd0:	230c      	movs	r3, #12
   20cd2:	18fb      	adds	r3, r7, r3
   20cd4:	2201      	movs	r2, #1
   20cd6:	4252      	negs	r2, r2
   20cd8:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   20cda:	230c      	movs	r3, #12
   20cdc:	18fb      	adds	r3, r7, r3
   20cde:	4a19      	ldr	r2, [pc, #100]	; (20d44 <nm_bus_init+0xc8>)
   20ce0:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   20ce2:	230c      	movs	r3, #12
   20ce4:	18fb      	adds	r3, r7, r3
   20ce6:	2200      	movs	r2, #0
   20ce8:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   20cea:	230c      	movs	r3, #12
   20cec:	18fb      	adds	r3, r7, r3
   20cee:	4a16      	ldr	r2, [pc, #88]	; (20d48 <nm_bus_init+0xcc>)
   20cf0:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   20cf2:	230c      	movs	r3, #12
   20cf4:	18fa      	adds	r2, r7, r3
   20cf6:	4915      	ldr	r1, [pc, #84]	; (20d4c <nm_bus_init+0xd0>)
   20cf8:	4b15      	ldr	r3, [pc, #84]	; (20d50 <nm_bus_init+0xd4>)
   20cfa:	0018      	movs	r0, r3
   20cfc:	4b15      	ldr	r3, [pc, #84]	; (20d54 <nm_bus_init+0xd8>)
   20cfe:	4798      	blx	r3
   20d00:	1e03      	subs	r3, r0, #0
   20d02:	d002      	beq.n	20d0a <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   20d04:	2306      	movs	r3, #6
   20d06:	425b      	negs	r3, r3
   20d08:	e00c      	b.n	20d24 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   20d0a:	4b11      	ldr	r3, [pc, #68]	; (20d50 <nm_bus_init+0xd4>)
   20d0c:	0018      	movs	r0, r3
   20d0e:	4b12      	ldr	r3, [pc, #72]	; (20d58 <nm_bus_init+0xdc>)
   20d10:	4798      	blx	r3

	nm_bsp_reset();
   20d12:	4b12      	ldr	r3, [pc, #72]	; (20d5c <nm_bus_init+0xe0>)
   20d14:	4798      	blx	r3
	nm_bsp_sleep(1);
   20d16:	2001      	movs	r0, #1
   20d18:	4b11      	ldr	r3, [pc, #68]	; (20d60 <nm_bus_init+0xe4>)
   20d1a:	4798      	blx	r3
#endif
	return result;
   20d1c:	2347      	movs	r3, #71	; 0x47
   20d1e:	18fb      	adds	r3, r7, r3
   20d20:	781b      	ldrb	r3, [r3, #0]
   20d22:	b25b      	sxtb	r3, r3
}
   20d24:	0018      	movs	r0, r3
   20d26:	46bd      	mov	sp, r7
   20d28:	b012      	add	sp, #72	; 0x48
   20d2a:	bd80      	pop	{r7, pc}
   20d2c:	00020889 	.word	0x00020889
   20d30:	20005620 	.word	0x20005620
   20d34:	000208ad 	.word	0x000208ad
   20d38:	00020805 	.word	0x00020805
   20d3c:	000c0002 	.word	0x000c0002
   20d40:	000d0002 	.word	0x000d0002
   20d44:	000f0002 	.word	0x000f0002
   20d48:	00124f80 	.word	0x00124f80
   20d4c:	42001000 	.word	0x42001000
   20d50:	20005624 	.word	0x20005624
   20d54:	000280ed 	.word	0x000280ed
   20d58:	00020911 	.word	0x00020911
   20d5c:	00020581 	.word	0x00020581
   20d60:	000205c1 	.word	0x000205c1

00020d64 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   20d64:	b590      	push	{r4, r7, lr}
   20d66:	b085      	sub	sp, #20
   20d68:	af00      	add	r7, sp, #0
   20d6a:	0002      	movs	r2, r0
   20d6c:	6039      	str	r1, [r7, #0]
   20d6e:	1dfb      	adds	r3, r7, #7
   20d70:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   20d72:	230f      	movs	r3, #15
   20d74:	18fb      	adds	r3, r7, r3
   20d76:	2200      	movs	r2, #0
   20d78:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   20d7a:	1dfb      	adds	r3, r7, #7
   20d7c:	781b      	ldrb	r3, [r3, #0]
   20d7e:	2b03      	cmp	r3, #3
   20d80:	d10f      	bne.n	20da2 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   20d82:	683b      	ldr	r3, [r7, #0]
   20d84:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   20d86:	68bb      	ldr	r3, [r7, #8]
   20d88:	6818      	ldr	r0, [r3, #0]
   20d8a:	68bb      	ldr	r3, [r7, #8]
   20d8c:	6859      	ldr	r1, [r3, #4]
   20d8e:	68bb      	ldr	r3, [r7, #8]
   20d90:	891b      	ldrh	r3, [r3, #8]
   20d92:	220f      	movs	r2, #15
   20d94:	18bc      	adds	r4, r7, r2
   20d96:	001a      	movs	r2, r3
   20d98:	4b10      	ldr	r3, [pc, #64]	; (20ddc <nm_bus_ioctl+0x78>)
   20d9a:	4798      	blx	r3
   20d9c:	0003      	movs	r3, r0
   20d9e:	7023      	strb	r3, [r4, #0]
		}
		break;
   20da0:	e013      	b.n	20dca <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   20da2:	230f      	movs	r3, #15
   20da4:	18fb      	adds	r3, r7, r3
   20da6:	22ff      	movs	r2, #255	; 0xff
   20da8:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   20daa:	2383      	movs	r3, #131	; 0x83
   20dac:	005a      	lsls	r2, r3, #1
   20dae:	490c      	ldr	r1, [pc, #48]	; (20de0 <nm_bus_ioctl+0x7c>)
   20db0:	4b0c      	ldr	r3, [pc, #48]	; (20de4 <nm_bus_ioctl+0x80>)
   20db2:	0018      	movs	r0, r3
   20db4:	4b0c      	ldr	r3, [pc, #48]	; (20de8 <nm_bus_ioctl+0x84>)
   20db6:	4798      	blx	r3
   20db8:	4b0c      	ldr	r3, [pc, #48]	; (20dec <nm_bus_ioctl+0x88>)
   20dba:	0018      	movs	r0, r3
   20dbc:	4b0a      	ldr	r3, [pc, #40]	; (20de8 <nm_bus_ioctl+0x84>)
   20dbe:	4798      	blx	r3
   20dc0:	4b0b      	ldr	r3, [pc, #44]	; (20df0 <nm_bus_ioctl+0x8c>)
   20dc2:	0018      	movs	r0, r3
   20dc4:	4b08      	ldr	r3, [pc, #32]	; (20de8 <nm_bus_ioctl+0x84>)
   20dc6:	4798      	blx	r3
			break;
   20dc8:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   20dca:	230f      	movs	r3, #15
   20dcc:	18fb      	adds	r3, r7, r3
   20dce:	781b      	ldrb	r3, [r3, #0]
   20dd0:	b25b      	sxtb	r3, r3
}
   20dd2:	0018      	movs	r0, r3
   20dd4:	46bd      	mov	sp, r7
   20dd6:	b005      	add	sp, #20
   20dd8:	bd90      	pop	{r4, r7, pc}
   20dda:	46c0      	nop			; (mov r8, r8)
   20ddc:	00020b05 	.word	0x00020b05
   20de0:	000384a0 	.word	0x000384a0
   20de4:	00038474 	.word	0x00038474
   20de8:	0001e529 	.word	0x0001e529
   20dec:	00038488 	.word	0x00038488
   20df0:	0003849c 	.word	0x0003849c

00020df4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   20df4:	b580      	push	{r7, lr}
   20df6:	b082      	sub	sp, #8
   20df8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   20dfa:	1dfb      	adds	r3, r7, #7
   20dfc:	2200      	movs	r2, #0
   20dfe:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   20e00:	1d3b      	adds	r3, r7, #4
   20e02:	0018      	movs	r0, r3
   20e04:	4b13      	ldr	r3, [pc, #76]	; (20e54 <nm_bus_deinit+0x60>)
   20e06:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   20e08:	1d3b      	adds	r3, r7, #4
   20e0a:	2200      	movs	r2, #0
   20e0c:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   20e0e:	1d3b      	adds	r3, r7, #4
   20e10:	2200      	movs	r2, #0
   20e12:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   20e14:	4b10      	ldr	r3, [pc, #64]	; (20e58 <nm_bus_deinit+0x64>)
   20e16:	0018      	movs	r0, r3
   20e18:	4b10      	ldr	r3, [pc, #64]	; (20e5c <nm_bus_deinit+0x68>)
   20e1a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   20e1c:	1d3b      	adds	r3, r7, #4
   20e1e:	0019      	movs	r1, r3
   20e20:	200c      	movs	r0, #12
   20e22:	4b0f      	ldr	r3, [pc, #60]	; (20e60 <nm_bus_deinit+0x6c>)
   20e24:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   20e26:	1d3b      	adds	r3, r7, #4
   20e28:	0019      	movs	r1, r3
   20e2a:	200f      	movs	r0, #15
   20e2c:	4b0c      	ldr	r3, [pc, #48]	; (20e60 <nm_bus_deinit+0x6c>)
   20e2e:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   20e30:	1d3b      	adds	r3, r7, #4
   20e32:	0019      	movs	r1, r3
   20e34:	200d      	movs	r0, #13
   20e36:	4b0a      	ldr	r3, [pc, #40]	; (20e60 <nm_bus_deinit+0x6c>)
   20e38:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   20e3a:	1d3b      	adds	r3, r7, #4
   20e3c:	0019      	movs	r1, r3
   20e3e:	200e      	movs	r0, #14
   20e40:	4b07      	ldr	r3, [pc, #28]	; (20e60 <nm_bus_deinit+0x6c>)
   20e42:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   20e44:	1dfb      	adds	r3, r7, #7
   20e46:	781b      	ldrb	r3, [r3, #0]
   20e48:	b25b      	sxtb	r3, r3
}
   20e4a:	0018      	movs	r0, r3
   20e4c:	46bd      	mov	sp, r7
   20e4e:	b002      	add	sp, #8
   20e50:	bd80      	pop	{r7, pc}
   20e52:	46c0      	nop			; (mov r8, r8)
   20e54:	0002076d 	.word	0x0002076d
   20e58:	20005624 	.word	0x20005624
   20e5c:	00020961 	.word	0x00020961
   20e60:	00026c6d 	.word	0x00026c6d

00020e64 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   20e64:	b580      	push	{r7, lr}
   20e66:	b084      	sub	sp, #16
   20e68:	af00      	add	r7, sp, #0
   20e6a:	60f8      	str	r0, [r7, #12]
   20e6c:	60b9      	str	r1, [r7, #8]
   20e6e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   20e70:	687b      	ldr	r3, [r7, #4]
   20e72:	2b00      	cmp	r3, #0
   20e74:	d010      	beq.n	20e98 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   20e76:	68bb      	ldr	r3, [r7, #8]
   20e78:	781a      	ldrb	r2, [r3, #0]
   20e7a:	68fb      	ldr	r3, [r7, #12]
   20e7c:	701a      	strb	r2, [r3, #0]
		pDst++;
   20e7e:	68fb      	ldr	r3, [r7, #12]
   20e80:	3301      	adds	r3, #1
   20e82:	60fb      	str	r3, [r7, #12]
		pSrc++;
   20e84:	68bb      	ldr	r3, [r7, #8]
   20e86:	3301      	adds	r3, #1
   20e88:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   20e8a:	687b      	ldr	r3, [r7, #4]
   20e8c:	3b01      	subs	r3, #1
   20e8e:	607b      	str	r3, [r7, #4]
   20e90:	687b      	ldr	r3, [r7, #4]
   20e92:	2b00      	cmp	r3, #0
   20e94:	d1ef      	bne.n	20e76 <m2m_memcpy+0x12>
   20e96:	e000      	b.n	20e9a <m2m_memcpy+0x36>
	if(sz == 0) return;
   20e98:	46c0      	nop			; (mov r8, r8)
}
   20e9a:	46bd      	mov	sp, r7
   20e9c:	b004      	add	sp, #16
   20e9e:	bd80      	pop	{r7, pc}

00020ea0 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   20ea0:	b580      	push	{r7, lr}
   20ea2:	b084      	sub	sp, #16
   20ea4:	af00      	add	r7, sp, #0
   20ea6:	60f8      	str	r0, [r7, #12]
   20ea8:	607a      	str	r2, [r7, #4]
   20eaa:	230b      	movs	r3, #11
   20eac:	18fb      	adds	r3, r7, r3
   20eae:	1c0a      	adds	r2, r1, #0
   20eb0:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   20eb2:	687b      	ldr	r3, [r7, #4]
   20eb4:	2b00      	cmp	r3, #0
   20eb6:	d00e      	beq.n	20ed6 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   20eb8:	68fb      	ldr	r3, [r7, #12]
   20eba:	220b      	movs	r2, #11
   20ebc:	18ba      	adds	r2, r7, r2
   20ebe:	7812      	ldrb	r2, [r2, #0]
   20ec0:	701a      	strb	r2, [r3, #0]
		pBuf++;
   20ec2:	68fb      	ldr	r3, [r7, #12]
   20ec4:	3301      	adds	r3, #1
   20ec6:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   20ec8:	687b      	ldr	r3, [r7, #4]
   20eca:	3b01      	subs	r3, #1
   20ecc:	607b      	str	r3, [r7, #4]
   20ece:	687b      	ldr	r3, [r7, #4]
   20ed0:	2b00      	cmp	r3, #0
   20ed2:	d1f1      	bne.n	20eb8 <m2m_memset+0x18>
   20ed4:	e000      	b.n	20ed8 <m2m_memset+0x38>
	if(sz == 0) return;
   20ed6:	46c0      	nop			; (mov r8, r8)
}
   20ed8:	46bd      	mov	sp, r7
   20eda:	b004      	add	sp, #16
   20edc:	bd80      	pop	{r7, pc}

00020ede <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   20ede:	b580      	push	{r7, lr}
   20ee0:	b084      	sub	sp, #16
   20ee2:	af00      	add	r7, sp, #0
   20ee4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   20ee6:	230e      	movs	r3, #14
   20ee8:	18fb      	adds	r3, r7, r3
   20eea:	2200      	movs	r2, #0
   20eec:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   20eee:	e009      	b.n	20f04 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   20ef0:	230e      	movs	r3, #14
   20ef2:	18fb      	adds	r3, r7, r3
   20ef4:	881a      	ldrh	r2, [r3, #0]
   20ef6:	230e      	movs	r3, #14
   20ef8:	18fb      	adds	r3, r7, r3
   20efa:	3201      	adds	r2, #1
   20efc:	801a      	strh	r2, [r3, #0]
		pcStr++;
   20efe:	687b      	ldr	r3, [r7, #4]
   20f00:	3301      	adds	r3, #1
   20f02:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   20f04:	687b      	ldr	r3, [r7, #4]
   20f06:	781b      	ldrb	r3, [r3, #0]
   20f08:	2b00      	cmp	r3, #0
   20f0a:	d1f1      	bne.n	20ef0 <m2m_strlen+0x12>
	}
	return u16StrLen;
   20f0c:	230e      	movs	r3, #14
   20f0e:	18fb      	adds	r3, r7, r3
   20f10:	881b      	ldrh	r3, [r3, #0]
}
   20f12:	0018      	movs	r0, r3
   20f14:	46bd      	mov	sp, r7
   20f16:	b004      	add	sp, #16
   20f18:	bd80      	pop	{r7, pc}
	...

00020f1c <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   20f1c:	b580      	push	{r7, lr}
   20f1e:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   20f20:	4b04      	ldr	r3, [pc, #16]	; (20f34 <isr+0x18>)
   20f22:	78db      	ldrb	r3, [r3, #3]
   20f24:	b2db      	uxtb	r3, r3
   20f26:	3301      	adds	r3, #1
   20f28:	b2da      	uxtb	r2, r3
   20f2a:	4b02      	ldr	r3, [pc, #8]	; (20f34 <isr+0x18>)
   20f2c:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   20f2e:	46c0      	nop			; (mov r8, r8)
   20f30:	46bd      	mov	sp, r7
   20f32:	bd80      	pop	{r7, pc}
   20f34:	20005660 	.word	0x20005660

00020f38 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   20f38:	b590      	push	{r4, r7, lr}
   20f3a:	b083      	sub	sp, #12
   20f3c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   20f3e:	1dfb      	adds	r3, r7, #7
   20f40:	2200      	movs	r2, #0
   20f42:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   20f44:	4b14      	ldr	r3, [pc, #80]	; (20f98 <hif_set_rx_done+0x60>)
   20f46:	2200      	movs	r2, #0
   20f48:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   20f4a:	2001      	movs	r0, #1
   20f4c:	4b13      	ldr	r3, [pc, #76]	; (20f9c <hif_set_rx_done+0x64>)
   20f4e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   20f50:	1dfc      	adds	r4, r7, #7
   20f52:	003b      	movs	r3, r7
   20f54:	4a12      	ldr	r2, [pc, #72]	; (20fa0 <hif_set_rx_done+0x68>)
   20f56:	0019      	movs	r1, r3
   20f58:	0010      	movs	r0, r2
   20f5a:	4b12      	ldr	r3, [pc, #72]	; (20fa4 <hif_set_rx_done+0x6c>)
   20f5c:	4798      	blx	r3
   20f5e:	0003      	movs	r3, r0
   20f60:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   20f62:	1dfb      	adds	r3, r7, #7
   20f64:	781b      	ldrb	r3, [r3, #0]
   20f66:	b25b      	sxtb	r3, r3
   20f68:	2b00      	cmp	r3, #0
   20f6a:	d10d      	bne.n	20f88 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   20f6c:	683b      	ldr	r3, [r7, #0]
   20f6e:	2202      	movs	r2, #2
   20f70:	4313      	orrs	r3, r2
   20f72:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   20f74:	683b      	ldr	r3, [r7, #0]
   20f76:	1dfc      	adds	r4, r7, #7
   20f78:	4a09      	ldr	r2, [pc, #36]	; (20fa0 <hif_set_rx_done+0x68>)
   20f7a:	0019      	movs	r1, r3
   20f7c:	0010      	movs	r0, r2
   20f7e:	4b0a      	ldr	r3, [pc, #40]	; (20fa8 <hif_set_rx_done+0x70>)
   20f80:	4798      	blx	r3
   20f82:	0003      	movs	r3, r0
   20f84:	7023      	strb	r3, [r4, #0]
   20f86:	e000      	b.n	20f8a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   20f88:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   20f8a:	1dfb      	adds	r3, r7, #7
   20f8c:	781b      	ldrb	r3, [r3, #0]
   20f8e:	b25b      	sxtb	r3, r3

}
   20f90:	0018      	movs	r0, r3
   20f92:	46bd      	mov	sp, r7
   20f94:	b003      	add	sp, #12
   20f96:	bd90      	pop	{r4, r7, pc}
   20f98:	20005660 	.word	0x20005660
   20f9c:	00020655 	.word	0x00020655
   20fa0:	00001070 	.word	0x00001070
   20fa4:	00022f31 	.word	0x00022f31
   20fa8:	00022f55 	.word	0x00022f55

00020fac <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20fac:	b580      	push	{r7, lr}
   20fae:	b082      	sub	sp, #8
   20fb0:	af00      	add	r7, sp, #0
   20fb2:	603a      	str	r2, [r7, #0]
   20fb4:	1dfb      	adds	r3, r7, #7
   20fb6:	1c02      	adds	r2, r0, #0
   20fb8:	701a      	strb	r2, [r3, #0]
   20fba:	1d3b      	adds	r3, r7, #4
   20fbc:	1c0a      	adds	r2, r1, #0
   20fbe:	801a      	strh	r2, [r3, #0]


}
   20fc0:	46c0      	nop			; (mov r8, r8)
   20fc2:	46bd      	mov	sp, r7
   20fc4:	b002      	add	sp, #8
   20fc6:	bd80      	pop	{r7, pc}

00020fc8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   20fc8:	b590      	push	{r4, r7, lr}
   20fca:	b083      	sub	sp, #12
   20fcc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   20fce:	1dfb      	adds	r3, r7, #7
   20fd0:	2200      	movs	r2, #0
   20fd2:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   20fd4:	4b16      	ldr	r3, [pc, #88]	; (21030 <hif_chip_wake+0x68>)
   20fd6:	789b      	ldrb	r3, [r3, #2]
   20fd8:	b2db      	uxtb	r3, r3
   20fda:	2b00      	cmp	r3, #0
   20fdc:	d003      	beq.n	20fe6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   20fde:	1dfb      	adds	r3, r7, #7
   20fe0:	781b      	ldrb	r3, [r3, #0]
   20fe2:	b25b      	sxtb	r3, r3
   20fe4:	e01f      	b.n	21026 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   20fe6:	4b12      	ldr	r3, [pc, #72]	; (21030 <hif_chip_wake+0x68>)
   20fe8:	785b      	ldrb	r3, [r3, #1]
   20fea:	b2db      	uxtb	r3, r3
   20fec:	2b00      	cmp	r3, #0
   20fee:	d10e      	bne.n	2100e <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   20ff0:	4b0f      	ldr	r3, [pc, #60]	; (21030 <hif_chip_wake+0x68>)
   20ff2:	781b      	ldrb	r3, [r3, #0]
   20ff4:	b2db      	uxtb	r3, r3
   20ff6:	2b00      	cmp	r3, #0
   20ff8:	d009      	beq.n	2100e <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   20ffa:	1dfc      	adds	r4, r7, #7
   20ffc:	4b0d      	ldr	r3, [pc, #52]	; (21034 <hif_chip_wake+0x6c>)
   20ffe:	4798      	blx	r3
   21000:	0003      	movs	r3, r0
   21002:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21004:	1dfb      	adds	r3, r7, #7
   21006:	781b      	ldrb	r3, [r3, #0]
   21008:	b25b      	sxtb	r3, r3
   2100a:	2b00      	cmp	r3, #0
   2100c:	d107      	bne.n	2101e <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   2100e:	4b08      	ldr	r3, [pc, #32]	; (21030 <hif_chip_wake+0x68>)
   21010:	785b      	ldrb	r3, [r3, #1]
   21012:	b2db      	uxtb	r3, r3
   21014:	3301      	adds	r3, #1
   21016:	b2da      	uxtb	r2, r3
   21018:	4b05      	ldr	r3, [pc, #20]	; (21030 <hif_chip_wake+0x68>)
   2101a:	705a      	strb	r2, [r3, #1]
   2101c:	e000      	b.n	21020 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   2101e:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   21020:	1dfb      	adds	r3, r7, #7
   21022:	781b      	ldrb	r3, [r3, #0]
   21024:	b25b      	sxtb	r3, r3
}
   21026:	0018      	movs	r0, r3
   21028:	46bd      	mov	sp, r7
   2102a:	b003      	add	sp, #12
   2102c:	bd90      	pop	{r4, r7, pc}
   2102e:	46c0      	nop			; (mov r8, r8)
   21030:	20005660 	.word	0x20005660
   21034:	00022a01 	.word	0x00022a01

00021038 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21038:	b580      	push	{r7, lr}
   2103a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   2103c:	4b07      	ldr	r3, [pc, #28]	; (2105c <hif_chip_sleep_sc+0x24>)
   2103e:	785b      	ldrb	r3, [r3, #1]
   21040:	b2db      	uxtb	r3, r3
   21042:	2b00      	cmp	r3, #0
   21044:	d006      	beq.n	21054 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21046:	4b05      	ldr	r3, [pc, #20]	; (2105c <hif_chip_sleep_sc+0x24>)
   21048:	785b      	ldrb	r3, [r3, #1]
   2104a:	b2db      	uxtb	r3, r3
   2104c:	3b01      	subs	r3, #1
   2104e:	b2da      	uxtb	r2, r3
   21050:	4b02      	ldr	r3, [pc, #8]	; (2105c <hif_chip_sleep_sc+0x24>)
   21052:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21054:	2300      	movs	r3, #0
}
   21056:	0018      	movs	r0, r3
   21058:	46bd      	mov	sp, r7
   2105a:	bd80      	pop	{r7, pc}
   2105c:	20005660 	.word	0x20005660

00021060 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   21060:	b590      	push	{r4, r7, lr}
   21062:	b083      	sub	sp, #12
   21064:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21066:	1dfb      	adds	r3, r7, #7
   21068:	2200      	movs	r2, #0
   2106a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   2106c:	4b10      	ldr	r3, [pc, #64]	; (210b0 <hif_chip_sleep+0x50>)
   2106e:	785b      	ldrb	r3, [r3, #1]
   21070:	b2db      	uxtb	r3, r3
   21072:	2b00      	cmp	r3, #0
   21074:	d006      	beq.n	21084 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   21076:	4b0e      	ldr	r3, [pc, #56]	; (210b0 <hif_chip_sleep+0x50>)
   21078:	785b      	ldrb	r3, [r3, #1]
   2107a:	b2db      	uxtb	r3, r3
   2107c:	3b01      	subs	r3, #1
   2107e:	b2da      	uxtb	r2, r3
   21080:	4b0b      	ldr	r3, [pc, #44]	; (210b0 <hif_chip_sleep+0x50>)
   21082:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   21084:	4b0a      	ldr	r3, [pc, #40]	; (210b0 <hif_chip_sleep+0x50>)
   21086:	785b      	ldrb	r3, [r3, #1]
   21088:	b2db      	uxtb	r3, r3
   2108a:	2b00      	cmp	r3, #0
   2108c:	d109      	bne.n	210a2 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   2108e:	4b08      	ldr	r3, [pc, #32]	; (210b0 <hif_chip_sleep+0x50>)
   21090:	781b      	ldrb	r3, [r3, #0]
   21092:	b2db      	uxtb	r3, r3
   21094:	2b00      	cmp	r3, #0
   21096:	d004      	beq.n	210a2 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21098:	1dfc      	adds	r4, r7, #7
   2109a:	4b06      	ldr	r3, [pc, #24]	; (210b4 <hif_chip_sleep+0x54>)
   2109c:	4798      	blx	r3
   2109e:	0003      	movs	r3, r0
   210a0:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   210a2:	1dfb      	adds	r3, r7, #7
   210a4:	781b      	ldrb	r3, [r3, #0]
   210a6:	b25b      	sxtb	r3, r3
}
   210a8:	0018      	movs	r0, r3
   210aa:	46bd      	mov	sp, r7
   210ac:	b003      	add	sp, #12
   210ae:	bd90      	pop	{r4, r7, pc}
   210b0:	20005660 	.word	0x20005660
   210b4:	00022929 	.word	0x00022929

000210b8 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   210b8:	b580      	push	{r7, lr}
   210ba:	b082      	sub	sp, #8
   210bc:	af00      	add	r7, sp, #0
   210be:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   210c0:	4b09      	ldr	r3, [pc, #36]	; (210e8 <hif_init+0x30>)
   210c2:	222c      	movs	r2, #44	; 0x2c
   210c4:	2100      	movs	r1, #0
   210c6:	0018      	movs	r0, r3
   210c8:	4b08      	ldr	r3, [pc, #32]	; (210ec <hif_init+0x34>)
   210ca:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   210cc:	4b08      	ldr	r3, [pc, #32]	; (210f0 <hif_init+0x38>)
   210ce:	0018      	movs	r0, r3
   210d0:	4b08      	ldr	r3, [pc, #32]	; (210f4 <hif_init+0x3c>)
   210d2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   210d4:	4b08      	ldr	r3, [pc, #32]	; (210f8 <hif_init+0x40>)
   210d6:	0019      	movs	r1, r3
   210d8:	2003      	movs	r0, #3
   210da:	4b08      	ldr	r3, [pc, #32]	; (210fc <hif_init+0x44>)
   210dc:	4798      	blx	r3
	return M2M_SUCCESS;
   210de:	2300      	movs	r3, #0
}
   210e0:	0018      	movs	r0, r3
   210e2:	46bd      	mov	sp, r7
   210e4:	b002      	add	sp, #8
   210e6:	bd80      	pop	{r7, pc}
   210e8:	20005660 	.word	0x20005660
   210ec:	00020ea1 	.word	0x00020ea1
   210f0:	00020f1d 	.word	0x00020f1d
   210f4:	000205dd 	.word	0x000205dd
   210f8:	00020fad 	.word	0x00020fad
   210fc:	00021b9d 	.word	0x00021b9d

00021100 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   21100:	b590      	push	{r4, r7, lr}
   21102:	b089      	sub	sp, #36	; 0x24
   21104:	af00      	add	r7, sp, #0
   21106:	0004      	movs	r4, r0
   21108:	0008      	movs	r0, r1
   2110a:	603a      	str	r2, [r7, #0]
   2110c:	0019      	movs	r1, r3
   2110e:	1dfb      	adds	r3, r7, #7
   21110:	1c22      	adds	r2, r4, #0
   21112:	701a      	strb	r2, [r3, #0]
   21114:	1dbb      	adds	r3, r7, #6
   21116:	1c02      	adds	r2, r0, #0
   21118:	701a      	strb	r2, [r3, #0]
   2111a:	1d3b      	adds	r3, r7, #4
   2111c:	1c0a      	adds	r2, r1, #0
   2111e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   21120:	231f      	movs	r3, #31
   21122:	18fb      	adds	r3, r7, r3
   21124:	22ff      	movs	r2, #255	; 0xff
   21126:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21128:	1dbb      	adds	r3, r7, #6
   2112a:	781b      	ldrb	r3, [r3, #0]
   2112c:	227f      	movs	r2, #127	; 0x7f
   2112e:	4013      	ands	r3, r2
   21130:	b2da      	uxtb	r2, r3
   21132:	2318      	movs	r3, #24
   21134:	18fb      	adds	r3, r7, r3
   21136:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21138:	2318      	movs	r3, #24
   2113a:	18fb      	adds	r3, r7, r3
   2113c:	1dfa      	adds	r2, r7, #7
   2113e:	7812      	ldrb	r2, [r2, #0]
   21140:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   21142:	2318      	movs	r3, #24
   21144:	18fb      	adds	r3, r7, r3
   21146:	2208      	movs	r2, #8
   21148:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   2114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2114c:	2b00      	cmp	r3, #0
   2114e:	d011      	beq.n	21174 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   21150:	2318      	movs	r3, #24
   21152:	18fb      	adds	r3, r7, r3
   21154:	885b      	ldrh	r3, [r3, #2]
   21156:	b29a      	uxth	r2, r3
   21158:	2338      	movs	r3, #56	; 0x38
   2115a:	18f9      	adds	r1, r7, r3
   2115c:	2334      	movs	r3, #52	; 0x34
   2115e:	18fb      	adds	r3, r7, r3
   21160:	8809      	ldrh	r1, [r1, #0]
   21162:	881b      	ldrh	r3, [r3, #0]
   21164:	18cb      	adds	r3, r1, r3
   21166:	b29b      	uxth	r3, r3
   21168:	18d3      	adds	r3, r2, r3
   2116a:	b29a      	uxth	r2, r3
   2116c:	2318      	movs	r3, #24
   2116e:	18fb      	adds	r3, r7, r3
   21170:	805a      	strh	r2, [r3, #2]
   21172:	e00a      	b.n	2118a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21174:	2318      	movs	r3, #24
   21176:	18fb      	adds	r3, r7, r3
   21178:	885b      	ldrh	r3, [r3, #2]
   2117a:	b29a      	uxth	r2, r3
   2117c:	1d3b      	adds	r3, r7, #4
   2117e:	881b      	ldrh	r3, [r3, #0]
   21180:	18d3      	adds	r3, r2, r3
   21182:	b29a      	uxth	r2, r3
   21184:	2318      	movs	r3, #24
   21186:	18fb      	adds	r3, r7, r3
   21188:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   2118a:	231f      	movs	r3, #31
   2118c:	18fc      	adds	r4, r7, r3
   2118e:	4bb2      	ldr	r3, [pc, #712]	; (21458 <hif_send+0x358>)
   21190:	4798      	blx	r3
   21192:	0003      	movs	r3, r0
   21194:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21196:	231f      	movs	r3, #31
   21198:	18fb      	adds	r3, r7, r3
   2119a:	781b      	ldrb	r3, [r3, #0]
   2119c:	b25b      	sxtb	r3, r3
   2119e:	2b00      	cmp	r3, #0
   211a0:	d000      	beq.n	211a4 <hif_send+0xa4>
   211a2:	e129      	b.n	213f8 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   211a4:	2300      	movs	r3, #0
   211a6:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   211a8:	230e      	movs	r3, #14
   211aa:	18fb      	adds	r3, r7, r3
   211ac:	2200      	movs	r2, #0
   211ae:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   211b0:	2300      	movs	r3, #0
   211b2:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   211b4:	1dfb      	adds	r3, r7, #7
   211b6:	781a      	ldrb	r2, [r3, #0]
   211b8:	697b      	ldr	r3, [r7, #20]
   211ba:	4313      	orrs	r3, r2
   211bc:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   211be:	1dbb      	adds	r3, r7, #6
   211c0:	781b      	ldrb	r3, [r3, #0]
   211c2:	021a      	lsls	r2, r3, #8
   211c4:	697b      	ldr	r3, [r7, #20]
   211c6:	4313      	orrs	r3, r2
   211c8:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   211ca:	2318      	movs	r3, #24
   211cc:	18fb      	adds	r3, r7, r3
   211ce:	885b      	ldrh	r3, [r3, #2]
   211d0:	b29b      	uxth	r3, r3
   211d2:	041a      	lsls	r2, r3, #16
   211d4:	697b      	ldr	r3, [r7, #20]
   211d6:	4313      	orrs	r3, r2
   211d8:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   211da:	697b      	ldr	r3, [r7, #20]
   211dc:	221f      	movs	r2, #31
   211de:	18bc      	adds	r4, r7, r2
   211e0:	4a9e      	ldr	r2, [pc, #632]	; (2145c <hif_send+0x35c>)
   211e2:	0019      	movs	r1, r3
   211e4:	0010      	movs	r0, r2
   211e6:	4b9e      	ldr	r3, [pc, #632]	; (21460 <hif_send+0x360>)
   211e8:	4798      	blx	r3
   211ea:	0003      	movs	r3, r0
   211ec:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   211ee:	231f      	movs	r3, #31
   211f0:	18fb      	adds	r3, r7, r3
   211f2:	781b      	ldrb	r3, [r3, #0]
   211f4:	b25b      	sxtb	r3, r3
   211f6:	2b00      	cmp	r3, #0
   211f8:	d000      	beq.n	211fc <hif_send+0xfc>
   211fa:	e119      	b.n	21430 <hif_send+0x330>

		reg = 0UL;
   211fc:	2300      	movs	r3, #0
   211fe:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   21200:	697b      	ldr	r3, [r7, #20]
   21202:	2202      	movs	r2, #2
   21204:	4313      	orrs	r3, r2
   21206:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21208:	697b      	ldr	r3, [r7, #20]
   2120a:	221f      	movs	r2, #31
   2120c:	18bc      	adds	r4, r7, r2
   2120e:	4a95      	ldr	r2, [pc, #596]	; (21464 <hif_send+0x364>)
   21210:	0019      	movs	r1, r3
   21212:	0010      	movs	r0, r2
   21214:	4b92      	ldr	r3, [pc, #584]	; (21460 <hif_send+0x360>)
   21216:	4798      	blx	r3
   21218:	0003      	movs	r3, r0
   2121a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   2121c:	231f      	movs	r3, #31
   2121e:	18fb      	adds	r3, r7, r3
   21220:	781b      	ldrb	r3, [r3, #0]
   21222:	b25b      	sxtb	r3, r3
   21224:	2b00      	cmp	r3, #0
   21226:	d000      	beq.n	2122a <hif_send+0x12a>
   21228:	e104      	b.n	21434 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   2122a:	2300      	movs	r3, #0
   2122c:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   2122e:	230e      	movs	r3, #14
   21230:	18fb      	adds	r3, r7, r3
   21232:	2200      	movs	r2, #0
   21234:	801a      	strh	r2, [r3, #0]
   21236:	e050      	b.n	212da <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21238:	231f      	movs	r3, #31
   2123a:	18fc      	adds	r4, r7, r3
   2123c:	2314      	movs	r3, #20
   2123e:	18fb      	adds	r3, r7, r3
   21240:	4a88      	ldr	r2, [pc, #544]	; (21464 <hif_send+0x364>)
   21242:	0019      	movs	r1, r3
   21244:	0010      	movs	r0, r2
   21246:	4b88      	ldr	r3, [pc, #544]	; (21468 <hif_send+0x368>)
   21248:	4798      	blx	r3
   2124a:	0003      	movs	r3, r0
   2124c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   2124e:	231f      	movs	r3, #31
   21250:	18fb      	adds	r3, r7, r3
   21252:	781b      	ldrb	r3, [r3, #0]
   21254:	b25b      	sxtb	r3, r3
   21256:	2b00      	cmp	r3, #0
   21258:	d147      	bne.n	212ea <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   2125a:	230e      	movs	r3, #14
   2125c:	18fb      	adds	r3, r7, r3
   2125e:	881b      	ldrh	r3, [r3, #0]
   21260:	b29a      	uxth	r2, r3
   21262:	23f4      	movs	r3, #244	; 0xf4
   21264:	33ff      	adds	r3, #255	; 0xff
   21266:	429a      	cmp	r2, r3
   21268:	d916      	bls.n	21298 <hif_send+0x198>
				if(cnt < 501) {
   2126a:	230e      	movs	r3, #14
   2126c:	18fb      	adds	r3, r7, r3
   2126e:	881b      	ldrh	r3, [r3, #0]
   21270:	b29a      	uxth	r2, r3
   21272:	23fa      	movs	r3, #250	; 0xfa
   21274:	005b      	lsls	r3, r3, #1
   21276:	429a      	cmp	r2, r3
   21278:	d80b      	bhi.n	21292 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   2127a:	4b7c      	ldr	r3, [pc, #496]	; (2146c <hif_send+0x36c>)
   2127c:	0018      	movs	r0, r3
   2127e:	4b7c      	ldr	r3, [pc, #496]	; (21470 <hif_send+0x370>)
   21280:	4798      	blx	r3
   21282:	4b7c      	ldr	r3, [pc, #496]	; (21474 <hif_send+0x374>)
   21284:	0018      	movs	r0, r3
   21286:	4b7a      	ldr	r3, [pc, #488]	; (21470 <hif_send+0x370>)
   21288:	4798      	blx	r3
   2128a:	4b7b      	ldr	r3, [pc, #492]	; (21478 <hif_send+0x378>)
   2128c:	0018      	movs	r0, r3
   2128e:	4b78      	ldr	r3, [pc, #480]	; (21470 <hif_send+0x370>)
   21290:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21292:	2001      	movs	r0, #1
   21294:	4b79      	ldr	r3, [pc, #484]	; (2147c <hif_send+0x37c>)
   21296:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21298:	697b      	ldr	r3, [r7, #20]
   2129a:	2202      	movs	r2, #2
   2129c:	4013      	ands	r3, r2
   2129e:	d113      	bne.n	212c8 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   212a0:	231f      	movs	r3, #31
   212a2:	18fc      	adds	r4, r7, r3
   212a4:	2310      	movs	r3, #16
   212a6:	18fb      	adds	r3, r7, r3
   212a8:	4a75      	ldr	r2, [pc, #468]	; (21480 <hif_send+0x380>)
   212aa:	0019      	movs	r1, r3
   212ac:	0010      	movs	r0, r2
   212ae:	4b6e      	ldr	r3, [pc, #440]	; (21468 <hif_send+0x368>)
   212b0:	4798      	blx	r3
   212b2:	0003      	movs	r3, r0
   212b4:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   212b6:	231f      	movs	r3, #31
   212b8:	18fb      	adds	r3, r7, r3
   212ba:	781b      	ldrb	r3, [r3, #0]
   212bc:	b25b      	sxtb	r3, r3
   212be:	2b00      	cmp	r3, #0
   212c0:	d015      	beq.n	212ee <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   212c2:	2300      	movs	r3, #0
   212c4:	613b      	str	r3, [r7, #16]
					goto ERR1;
   212c6:	e0bc      	b.n	21442 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   212c8:	230e      	movs	r3, #14
   212ca:	18fb      	adds	r3, r7, r3
   212cc:	881b      	ldrh	r3, [r3, #0]
   212ce:	b29b      	uxth	r3, r3
   212d0:	3301      	adds	r3, #1
   212d2:	b29a      	uxth	r2, r3
   212d4:	230e      	movs	r3, #14
   212d6:	18fb      	adds	r3, r7, r3
   212d8:	801a      	strh	r2, [r3, #0]
   212da:	230e      	movs	r3, #14
   212dc:	18fb      	adds	r3, r7, r3
   212de:	881b      	ldrh	r3, [r3, #0]
   212e0:	b29b      	uxth	r3, r3
   212e2:	4a68      	ldr	r2, [pc, #416]	; (21484 <hif_send+0x384>)
   212e4:	4293      	cmp	r3, r2
   212e6:	d9a7      	bls.n	21238 <hif_send+0x138>
   212e8:	e002      	b.n	212f0 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   212ea:	46c0      	nop			; (mov r8, r8)
   212ec:	e000      	b.n	212f0 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   212ee:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   212f0:	693b      	ldr	r3, [r7, #16]
   212f2:	2b00      	cmp	r3, #0
   212f4:	d100      	bne.n	212f8 <hif_send+0x1f8>
   212f6:	e074      	b.n	213e2 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   212f8:	693b      	ldr	r3, [r7, #16]
   212fa:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   212fc:	2318      	movs	r3, #24
   212fe:	18fb      	adds	r3, r7, r3
   21300:	885b      	ldrh	r3, [r3, #2]
   21302:	b29a      	uxth	r2, r3
   21304:	2318      	movs	r3, #24
   21306:	18fb      	adds	r3, r7, r3
   21308:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   2130a:	68bb      	ldr	r3, [r7, #8]
   2130c:	221f      	movs	r2, #31
   2130e:	18bc      	adds	r4, r7, r2
   21310:	2218      	movs	r2, #24
   21312:	18b9      	adds	r1, r7, r2
   21314:	2208      	movs	r2, #8
   21316:	0018      	movs	r0, r3
   21318:	4b5b      	ldr	r3, [pc, #364]	; (21488 <hif_send+0x388>)
   2131a:	4798      	blx	r3
   2131c:	0003      	movs	r3, r0
   2131e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21320:	231f      	movs	r3, #31
   21322:	18fb      	adds	r3, r7, r3
   21324:	781b      	ldrb	r3, [r3, #0]
   21326:	b25b      	sxtb	r3, r3
   21328:	2b00      	cmp	r3, #0
   2132a:	d000      	beq.n	2132e <hif_send+0x22e>
   2132c:	e084      	b.n	21438 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   2132e:	68bb      	ldr	r3, [r7, #8]
   21330:	3308      	adds	r3, #8
   21332:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21334:	683b      	ldr	r3, [r7, #0]
   21336:	2b00      	cmp	r3, #0
   21338:	d016      	beq.n	21368 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   2133a:	68b8      	ldr	r0, [r7, #8]
   2133c:	1d3b      	adds	r3, r7, #4
   2133e:	881a      	ldrh	r2, [r3, #0]
   21340:	231f      	movs	r3, #31
   21342:	18fc      	adds	r4, r7, r3
   21344:	683b      	ldr	r3, [r7, #0]
   21346:	0019      	movs	r1, r3
   21348:	4b4f      	ldr	r3, [pc, #316]	; (21488 <hif_send+0x388>)
   2134a:	4798      	blx	r3
   2134c:	0003      	movs	r3, r0
   2134e:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21350:	231f      	movs	r3, #31
   21352:	18fb      	adds	r3, r7, r3
   21354:	781b      	ldrb	r3, [r3, #0]
   21356:	b25b      	sxtb	r3, r3
   21358:	2b00      	cmp	r3, #0
   2135a:	d000      	beq.n	2135e <hif_send+0x25e>
   2135c:	e06e      	b.n	2143c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   2135e:	1d3b      	adds	r3, r7, #4
   21360:	881a      	ldrh	r2, [r3, #0]
   21362:	68bb      	ldr	r3, [r7, #8]
   21364:	18d3      	adds	r3, r2, r3
   21366:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2136a:	2b00      	cmp	r3, #0
   2136c:	d021      	beq.n	213b2 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   2136e:	2338      	movs	r3, #56	; 0x38
   21370:	18fb      	adds	r3, r7, r3
   21372:	881a      	ldrh	r2, [r3, #0]
   21374:	1d3b      	adds	r3, r7, #4
   21376:	881b      	ldrh	r3, [r3, #0]
   21378:	1ad3      	subs	r3, r2, r3
   2137a:	001a      	movs	r2, r3
   2137c:	68bb      	ldr	r3, [r7, #8]
   2137e:	18d3      	adds	r3, r2, r3
   21380:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   21382:	68b8      	ldr	r0, [r7, #8]
   21384:	2334      	movs	r3, #52	; 0x34
   21386:	18fb      	adds	r3, r7, r3
   21388:	881a      	ldrh	r2, [r3, #0]
   2138a:	231f      	movs	r3, #31
   2138c:	18fc      	adds	r4, r7, r3
   2138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21390:	0019      	movs	r1, r3
   21392:	4b3d      	ldr	r3, [pc, #244]	; (21488 <hif_send+0x388>)
   21394:	4798      	blx	r3
   21396:	0003      	movs	r3, r0
   21398:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   2139a:	231f      	movs	r3, #31
   2139c:	18fb      	adds	r3, r7, r3
   2139e:	781b      	ldrb	r3, [r3, #0]
   213a0:	b25b      	sxtb	r3, r3
   213a2:	2b00      	cmp	r3, #0
   213a4:	d14c      	bne.n	21440 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   213a6:	2334      	movs	r3, #52	; 0x34
   213a8:	18fb      	adds	r3, r7, r3
   213aa:	881a      	ldrh	r2, [r3, #0]
   213ac:	68bb      	ldr	r3, [r7, #8]
   213ae:	18d3      	adds	r3, r2, r3
   213b0:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   213b2:	693b      	ldr	r3, [r7, #16]
   213b4:	009b      	lsls	r3, r3, #2
   213b6:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   213b8:	697b      	ldr	r3, [r7, #20]
   213ba:	2202      	movs	r2, #2
   213bc:	4313      	orrs	r3, r2
   213be:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   213c0:	697b      	ldr	r3, [r7, #20]
   213c2:	221f      	movs	r2, #31
   213c4:	18bc      	adds	r4, r7, r2
   213c6:	4a31      	ldr	r2, [pc, #196]	; (2148c <hif_send+0x38c>)
   213c8:	0019      	movs	r1, r3
   213ca:	0010      	movs	r0, r2
   213cc:	4b24      	ldr	r3, [pc, #144]	; (21460 <hif_send+0x360>)
   213ce:	4798      	blx	r3
   213d0:	0003      	movs	r3, r0
   213d2:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   213d4:	231f      	movs	r3, #31
   213d6:	18fb      	adds	r3, r7, r3
   213d8:	781b      	ldrb	r3, [r3, #0]
   213da:	b25b      	sxtb	r3, r3
   213dc:	2b00      	cmp	r3, #0
   213de:	d01c      	beq.n	2141a <hif_send+0x31a>
   213e0:	e02f      	b.n	21442 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   213e2:	231f      	movs	r3, #31
   213e4:	18fc      	adds	r4, r7, r3
   213e6:	4b2a      	ldr	r3, [pc, #168]	; (21490 <hif_send+0x390>)
   213e8:	4798      	blx	r3
   213ea:	0003      	movs	r3, r0
   213ec:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   213ee:	231f      	movs	r3, #31
   213f0:	18fb      	adds	r3, r7, r3
   213f2:	22fd      	movs	r2, #253	; 0xfd
   213f4:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   213f6:	e026      	b.n	21446 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   213f8:	2398      	movs	r3, #152	; 0x98
   213fa:	33ff      	adds	r3, #255	; 0xff
   213fc:	001a      	movs	r2, r3
   213fe:	4925      	ldr	r1, [pc, #148]	; (21494 <hif_send+0x394>)
   21400:	4b25      	ldr	r3, [pc, #148]	; (21498 <hif_send+0x398>)
   21402:	0018      	movs	r0, r3
   21404:	4b1a      	ldr	r3, [pc, #104]	; (21470 <hif_send+0x370>)
   21406:	4798      	blx	r3
   21408:	4b24      	ldr	r3, [pc, #144]	; (2149c <hif_send+0x39c>)
   2140a:	0018      	movs	r0, r3
   2140c:	4b18      	ldr	r3, [pc, #96]	; (21470 <hif_send+0x370>)
   2140e:	4798      	blx	r3
   21410:	4b19      	ldr	r3, [pc, #100]	; (21478 <hif_send+0x378>)
   21412:	0018      	movs	r0, r3
   21414:	4b16      	ldr	r3, [pc, #88]	; (21470 <hif_send+0x370>)
   21416:	4798      	blx	r3
		goto ERR2;
   21418:	e015      	b.n	21446 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   2141a:	231f      	movs	r3, #31
   2141c:	18fc      	adds	r4, r7, r3
   2141e:	4b1c      	ldr	r3, [pc, #112]	; (21490 <hif_send+0x390>)
   21420:	4798      	blx	r3
   21422:	0003      	movs	r3, r0
   21424:	7023      	strb	r3, [r4, #0]
	return ret;
   21426:	231f      	movs	r3, #31
   21428:	18fb      	adds	r3, r7, r3
   2142a:	781b      	ldrb	r3, [r3, #0]
   2142c:	b25b      	sxtb	r3, r3
   2142e:	e00e      	b.n	2144e <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   21430:	46c0      	nop			; (mov r8, r8)
   21432:	e006      	b.n	21442 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21434:	46c0      	nop			; (mov r8, r8)
   21436:	e004      	b.n	21442 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21438:	46c0      	nop			; (mov r8, r8)
   2143a:	e002      	b.n	21442 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   2143c:	46c0      	nop			; (mov r8, r8)
   2143e:	e000      	b.n	21442 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21440:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   21442:	4b17      	ldr	r3, [pc, #92]	; (214a0 <hif_send+0x3a0>)
   21444:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21446:	231f      	movs	r3, #31
   21448:	18fb      	adds	r3, r7, r3
   2144a:	781b      	ldrb	r3, [r3, #0]
   2144c:	b25b      	sxtb	r3, r3
}
   2144e:	0018      	movs	r0, r3
   21450:	46bd      	mov	sp, r7
   21452:	b009      	add	sp, #36	; 0x24
   21454:	bd90      	pop	{r4, r7, pc}
   21456:	46c0      	nop			; (mov r8, r8)
   21458:	00020fc9 	.word	0x00020fc9
   2145c:	0000108c 	.word	0x0000108c
   21460:	00022f55 	.word	0x00022f55
   21464:	00001078 	.word	0x00001078
   21468:	00022f31 	.word	0x00022f31
   2146c:	000384b0 	.word	0x000384b0
   21470:	0001e529 	.word	0x0001e529
   21474:	000384bc 	.word	0x000384bc
   21478:	000384d0 	.word	0x000384d0
   2147c:	000205c1 	.word	0x000205c1
   21480:	00150400 	.word	0x00150400
   21484:	000003e7 	.word	0x000003e7
   21488:	0002309d 	.word	0x0002309d
   2148c:	0000106c 	.word	0x0000106c
   21490:	00021061 	.word	0x00021061
   21494:	000387d8 	.word	0x000387d8
   21498:	000384d4 	.word	0x000384d4
   2149c:	000384e8 	.word	0x000384e8
   214a0:	00021039 	.word	0x00021039

000214a4 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   214a4:	b590      	push	{r4, r7, lr}
   214a6:	b087      	sub	sp, #28
   214a8:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   214aa:	230f      	movs	r3, #15
   214ac:	18fb      	adds	r3, r7, r3
   214ae:	2200      	movs	r2, #0
   214b0:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   214b2:	230f      	movs	r3, #15
   214b4:	18fc      	adds	r4, r7, r3
   214b6:	2308      	movs	r3, #8
   214b8:	18fb      	adds	r3, r7, r3
   214ba:	4adc      	ldr	r2, [pc, #880]	; (2182c <hif_isr+0x388>)
   214bc:	0019      	movs	r1, r3
   214be:	0010      	movs	r0, r2
   214c0:	4bdb      	ldr	r3, [pc, #876]	; (21830 <hif_isr+0x38c>)
   214c2:	4798      	blx	r3
   214c4:	0003      	movs	r3, r0
   214c6:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   214c8:	230f      	movs	r3, #15
   214ca:	18fb      	adds	r3, r7, r3
   214cc:	781b      	ldrb	r3, [r3, #0]
   214ce:	b25b      	sxtb	r3, r3
   214d0:	2b00      	cmp	r3, #0
   214d2:	d000      	beq.n	214d6 <hif_isr+0x32>
   214d4:	e21e      	b.n	21914 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   214d6:	68bb      	ldr	r3, [r7, #8]
   214d8:	2201      	movs	r2, #1
   214da:	4013      	ands	r3, r2
   214dc:	d100      	bne.n	214e0 <hif_isr+0x3c>
   214de:	e204      	b.n	218ea <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   214e0:	2000      	movs	r0, #0
   214e2:	4bd4      	ldr	r3, [pc, #848]	; (21834 <hif_isr+0x390>)
   214e4:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   214e6:	68bb      	ldr	r3, [r7, #8]
   214e8:	2201      	movs	r2, #1
   214ea:	4393      	bics	r3, r2
   214ec:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   214ee:	68bb      	ldr	r3, [r7, #8]
   214f0:	220f      	movs	r2, #15
   214f2:	18bc      	adds	r4, r7, r2
   214f4:	4acd      	ldr	r2, [pc, #820]	; (2182c <hif_isr+0x388>)
   214f6:	0019      	movs	r1, r3
   214f8:	0010      	movs	r0, r2
   214fa:	4bcf      	ldr	r3, [pc, #828]	; (21838 <hif_isr+0x394>)
   214fc:	4798      	blx	r3
   214fe:	0003      	movs	r3, r0
   21500:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21502:	230f      	movs	r3, #15
   21504:	18fb      	adds	r3, r7, r3
   21506:	781b      	ldrb	r3, [r3, #0]
   21508:	b25b      	sxtb	r3, r3
   2150a:	2b00      	cmp	r3, #0
   2150c:	d000      	beq.n	21510 <hif_isr+0x6c>
   2150e:	e210      	b.n	21932 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   21510:	4bca      	ldr	r3, [pc, #808]	; (2183c <hif_isr+0x398>)
   21512:	2201      	movs	r2, #1
   21514:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21516:	68bb      	ldr	r3, [r7, #8]
   21518:	089b      	lsrs	r3, r3, #2
   2151a:	b29a      	uxth	r2, r3
   2151c:	230c      	movs	r3, #12
   2151e:	18fb      	adds	r3, r7, r3
   21520:	0512      	lsls	r2, r2, #20
   21522:	0d12      	lsrs	r2, r2, #20
   21524:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21526:	230c      	movs	r3, #12
   21528:	18fb      	adds	r3, r7, r3
   2152a:	881b      	ldrh	r3, [r3, #0]
   2152c:	2b00      	cmp	r3, #0
   2152e:	d100      	bne.n	21532 <hif_isr+0x8e>
   21530:	e1c8      	b.n	218c4 <hif_isr+0x420>
				uint32 address = 0;
   21532:	2300      	movs	r3, #0
   21534:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21536:	230f      	movs	r3, #15
   21538:	18fc      	adds	r4, r7, r3
   2153a:	003b      	movs	r3, r7
   2153c:	4ac0      	ldr	r2, [pc, #768]	; (21840 <hif_isr+0x39c>)
   2153e:	0019      	movs	r1, r3
   21540:	0010      	movs	r0, r2
   21542:	4bbb      	ldr	r3, [pc, #748]	; (21830 <hif_isr+0x38c>)
   21544:	4798      	blx	r3
   21546:	0003      	movs	r3, r0
   21548:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   2154a:	230f      	movs	r3, #15
   2154c:	18fb      	adds	r3, r7, r3
   2154e:	781b      	ldrb	r3, [r3, #0]
   21550:	b25b      	sxtb	r3, r3
   21552:	2b00      	cmp	r3, #0
   21554:	d012      	beq.n	2157c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21556:	23e4      	movs	r3, #228	; 0xe4
   21558:	005a      	lsls	r2, r3, #1
   2155a:	49ba      	ldr	r1, [pc, #744]	; (21844 <hif_isr+0x3a0>)
   2155c:	4bba      	ldr	r3, [pc, #744]	; (21848 <hif_isr+0x3a4>)
   2155e:	0018      	movs	r0, r3
   21560:	4bba      	ldr	r3, [pc, #744]	; (2184c <hif_isr+0x3a8>)
   21562:	4798      	blx	r3
   21564:	4bba      	ldr	r3, [pc, #744]	; (21850 <hif_isr+0x3ac>)
   21566:	0018      	movs	r0, r3
   21568:	4bb8      	ldr	r3, [pc, #736]	; (2184c <hif_isr+0x3a8>)
   2156a:	4798      	blx	r3
   2156c:	4bb9      	ldr	r3, [pc, #740]	; (21854 <hif_isr+0x3b0>)
   2156e:	0018      	movs	r0, r3
   21570:	4bb6      	ldr	r3, [pc, #728]	; (2184c <hif_isr+0x3a8>)
   21572:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21574:	2001      	movs	r0, #1
   21576:	4baf      	ldr	r3, [pc, #700]	; (21834 <hif_isr+0x390>)
   21578:	4798      	blx	r3
					goto ERR1;
   2157a:	e1db      	b.n	21934 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   2157c:	683a      	ldr	r2, [r7, #0]
   2157e:	4baf      	ldr	r3, [pc, #700]	; (2183c <hif_isr+0x398>)
   21580:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   21582:	230c      	movs	r3, #12
   21584:	18fb      	adds	r3, r7, r3
   21586:	881a      	ldrh	r2, [r3, #0]
   21588:	4bac      	ldr	r3, [pc, #688]	; (2183c <hif_isr+0x398>)
   2158a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   2158c:	683b      	ldr	r3, [r7, #0]
   2158e:	220f      	movs	r2, #15
   21590:	18bc      	adds	r4, r7, r2
   21592:	1d39      	adds	r1, r7, #4
   21594:	2204      	movs	r2, #4
   21596:	0018      	movs	r0, r3
   21598:	4baf      	ldr	r3, [pc, #700]	; (21858 <hif_isr+0x3b4>)
   2159a:	4798      	blx	r3
   2159c:	0003      	movs	r3, r0
   2159e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   215a0:	1d3b      	adds	r3, r7, #4
   215a2:	885b      	ldrh	r3, [r3, #2]
   215a4:	b29a      	uxth	r2, r3
   215a6:	1d3b      	adds	r3, r7, #4
   215a8:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   215aa:	230f      	movs	r3, #15
   215ac:	18fb      	adds	r3, r7, r3
   215ae:	781b      	ldrb	r3, [r3, #0]
   215b0:	b25b      	sxtb	r3, r3
   215b2:	2b00      	cmp	r3, #0
   215b4:	d012      	beq.n	215dc <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   215b6:	23e9      	movs	r3, #233	; 0xe9
   215b8:	005a      	lsls	r2, r3, #1
   215ba:	49a2      	ldr	r1, [pc, #648]	; (21844 <hif_isr+0x3a0>)
   215bc:	4ba2      	ldr	r3, [pc, #648]	; (21848 <hif_isr+0x3a4>)
   215be:	0018      	movs	r0, r3
   215c0:	4ba2      	ldr	r3, [pc, #648]	; (2184c <hif_isr+0x3a8>)
   215c2:	4798      	blx	r3
   215c4:	4ba5      	ldr	r3, [pc, #660]	; (2185c <hif_isr+0x3b8>)
   215c6:	0018      	movs	r0, r3
   215c8:	4ba0      	ldr	r3, [pc, #640]	; (2184c <hif_isr+0x3a8>)
   215ca:	4798      	blx	r3
   215cc:	4ba1      	ldr	r3, [pc, #644]	; (21854 <hif_isr+0x3b0>)
   215ce:	0018      	movs	r0, r3
   215d0:	4b9e      	ldr	r3, [pc, #632]	; (2184c <hif_isr+0x3a8>)
   215d2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   215d4:	2001      	movs	r0, #1
   215d6:	4b97      	ldr	r3, [pc, #604]	; (21834 <hif_isr+0x390>)
   215d8:	4798      	blx	r3
					goto ERR1;
   215da:	e1ab      	b.n	21934 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   215dc:	1d3b      	adds	r3, r7, #4
   215de:	885b      	ldrh	r3, [r3, #2]
   215e0:	b29b      	uxth	r3, r3
   215e2:	220c      	movs	r2, #12
   215e4:	18ba      	adds	r2, r7, r2
   215e6:	8812      	ldrh	r2, [r2, #0]
   215e8:	429a      	cmp	r2, r3
   215ea:	d02f      	beq.n	2164c <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   215ec:	230c      	movs	r3, #12
   215ee:	18fb      	adds	r3, r7, r3
   215f0:	881b      	ldrh	r3, [r3, #0]
   215f2:	1d3a      	adds	r2, r7, #4
   215f4:	8852      	ldrh	r2, [r2, #2]
   215f6:	b292      	uxth	r2, r2
   215f8:	1a9b      	subs	r3, r3, r2
   215fa:	2b04      	cmp	r3, #4
   215fc:	dd26      	ble.n	2164c <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   215fe:	23dc      	movs	r3, #220	; 0xdc
   21600:	33ff      	adds	r3, #255	; 0xff
   21602:	001a      	movs	r2, r3
   21604:	498f      	ldr	r1, [pc, #572]	; (21844 <hif_isr+0x3a0>)
   21606:	4b90      	ldr	r3, [pc, #576]	; (21848 <hif_isr+0x3a4>)
   21608:	0018      	movs	r0, r3
   2160a:	4b90      	ldr	r3, [pc, #576]	; (2184c <hif_isr+0x3a8>)
   2160c:	4798      	blx	r3
   2160e:	230c      	movs	r3, #12
   21610:	18fb      	adds	r3, r7, r3
   21612:	8819      	ldrh	r1, [r3, #0]
   21614:	1d3b      	adds	r3, r7, #4
   21616:	885b      	ldrh	r3, [r3, #2]
   21618:	b29b      	uxth	r3, r3
   2161a:	001a      	movs	r2, r3
   2161c:	1d3b      	adds	r3, r7, #4
   2161e:	781b      	ldrb	r3, [r3, #0]
   21620:	b2db      	uxtb	r3, r3
   21622:	001c      	movs	r4, r3
   21624:	1d3b      	adds	r3, r7, #4
   21626:	785b      	ldrb	r3, [r3, #1]
   21628:	b2db      	uxtb	r3, r3
   2162a:	488d      	ldr	r0, [pc, #564]	; (21860 <hif_isr+0x3bc>)
   2162c:	9300      	str	r3, [sp, #0]
   2162e:	0023      	movs	r3, r4
   21630:	4c86      	ldr	r4, [pc, #536]	; (2184c <hif_isr+0x3a8>)
   21632:	47a0      	blx	r4
   21634:	4b87      	ldr	r3, [pc, #540]	; (21854 <hif_isr+0x3b0>)
   21636:	0018      	movs	r0, r3
   21638:	4b84      	ldr	r3, [pc, #528]	; (2184c <hif_isr+0x3a8>)
   2163a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   2163c:	2001      	movs	r0, #1
   2163e:	4b7d      	ldr	r3, [pc, #500]	; (21834 <hif_isr+0x390>)
   21640:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   21642:	230f      	movs	r3, #15
   21644:	18fb      	adds	r3, r7, r3
   21646:	22fa      	movs	r2, #250	; 0xfa
   21648:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   2164a:	e173      	b.n	21934 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   2164c:	1d3b      	adds	r3, r7, #4
   2164e:	781b      	ldrb	r3, [r3, #0]
   21650:	b2db      	uxtb	r3, r3
   21652:	2b01      	cmp	r3, #1
   21654:	d122      	bne.n	2169c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   21656:	4b79      	ldr	r3, [pc, #484]	; (2183c <hif_isr+0x398>)
   21658:	691b      	ldr	r3, [r3, #16]
   2165a:	2b00      	cmp	r3, #0
   2165c:	d00d      	beq.n	2167a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2165e:	4b77      	ldr	r3, [pc, #476]	; (2183c <hif_isr+0x398>)
   21660:	691b      	ldr	r3, [r3, #16]
   21662:	1d3a      	adds	r2, r7, #4
   21664:	7852      	ldrb	r2, [r2, #1]
   21666:	b2d0      	uxtb	r0, r2
   21668:	1d3a      	adds	r2, r7, #4
   2166a:	8852      	ldrh	r2, [r2, #2]
   2166c:	b292      	uxth	r2, r2
   2166e:	3a08      	subs	r2, #8
   21670:	b291      	uxth	r1, r2
   21672:	683a      	ldr	r2, [r7, #0]
   21674:	3208      	adds	r2, #8
   21676:	4798      	blx	r3
   21678:	e102      	b.n	21880 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   2167a:	23e8      	movs	r3, #232	; 0xe8
   2167c:	33ff      	adds	r3, #255	; 0xff
   2167e:	001a      	movs	r2, r3
   21680:	4970      	ldr	r1, [pc, #448]	; (21844 <hif_isr+0x3a0>)
   21682:	4b71      	ldr	r3, [pc, #452]	; (21848 <hif_isr+0x3a4>)
   21684:	0018      	movs	r0, r3
   21686:	4b71      	ldr	r3, [pc, #452]	; (2184c <hif_isr+0x3a8>)
   21688:	4798      	blx	r3
   2168a:	4b76      	ldr	r3, [pc, #472]	; (21864 <hif_isr+0x3c0>)
   2168c:	0018      	movs	r0, r3
   2168e:	4b6f      	ldr	r3, [pc, #444]	; (2184c <hif_isr+0x3a8>)
   21690:	4798      	blx	r3
   21692:	4b70      	ldr	r3, [pc, #448]	; (21854 <hif_isr+0x3b0>)
   21694:	0018      	movs	r0, r3
   21696:	4b6d      	ldr	r3, [pc, #436]	; (2184c <hif_isr+0x3a8>)
   21698:	4798      	blx	r3
   2169a:	e0f1      	b.n	21880 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   2169c:	1d3b      	adds	r3, r7, #4
   2169e:	781b      	ldrb	r3, [r3, #0]
   216a0:	b2db      	uxtb	r3, r3
   216a2:	2b02      	cmp	r3, #2
   216a4:	d122      	bne.n	216ec <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   216a6:	4b65      	ldr	r3, [pc, #404]	; (2183c <hif_isr+0x398>)
   216a8:	695b      	ldr	r3, [r3, #20]
   216aa:	2b00      	cmp	r3, #0
   216ac:	d00d      	beq.n	216ca <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   216ae:	4b63      	ldr	r3, [pc, #396]	; (2183c <hif_isr+0x398>)
   216b0:	695b      	ldr	r3, [r3, #20]
   216b2:	1d3a      	adds	r2, r7, #4
   216b4:	7852      	ldrb	r2, [r2, #1]
   216b6:	b2d0      	uxtb	r0, r2
   216b8:	1d3a      	adds	r2, r7, #4
   216ba:	8852      	ldrh	r2, [r2, #2]
   216bc:	b292      	uxth	r2, r2
   216be:	3a08      	subs	r2, #8
   216c0:	b291      	uxth	r1, r2
   216c2:	683a      	ldr	r2, [r7, #0]
   216c4:	3208      	adds	r2, #8
   216c6:	4798      	blx	r3
   216c8:	e0da      	b.n	21880 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   216ca:	23f0      	movs	r3, #240	; 0xf0
   216cc:	33ff      	adds	r3, #255	; 0xff
   216ce:	001a      	movs	r2, r3
   216d0:	495c      	ldr	r1, [pc, #368]	; (21844 <hif_isr+0x3a0>)
   216d2:	4b5d      	ldr	r3, [pc, #372]	; (21848 <hif_isr+0x3a4>)
   216d4:	0018      	movs	r0, r3
   216d6:	4b5d      	ldr	r3, [pc, #372]	; (2184c <hif_isr+0x3a8>)
   216d8:	4798      	blx	r3
   216da:	4b63      	ldr	r3, [pc, #396]	; (21868 <hif_isr+0x3c4>)
   216dc:	0018      	movs	r0, r3
   216de:	4b5b      	ldr	r3, [pc, #364]	; (2184c <hif_isr+0x3a8>)
   216e0:	4798      	blx	r3
   216e2:	4b5c      	ldr	r3, [pc, #368]	; (21854 <hif_isr+0x3b0>)
   216e4:	0018      	movs	r0, r3
   216e6:	4b59      	ldr	r3, [pc, #356]	; (2184c <hif_isr+0x3a8>)
   216e8:	4798      	blx	r3
   216ea:	e0c9      	b.n	21880 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   216ec:	1d3b      	adds	r3, r7, #4
   216ee:	781b      	ldrb	r3, [r3, #0]
   216f0:	b2db      	uxtb	r3, r3
   216f2:	2b04      	cmp	r3, #4
   216f4:	d122      	bne.n	2173c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   216f6:	4b51      	ldr	r3, [pc, #324]	; (2183c <hif_isr+0x398>)
   216f8:	699b      	ldr	r3, [r3, #24]
   216fa:	2b00      	cmp	r3, #0
   216fc:	d00d      	beq.n	2171a <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   216fe:	4b4f      	ldr	r3, [pc, #316]	; (2183c <hif_isr+0x398>)
   21700:	699b      	ldr	r3, [r3, #24]
   21702:	1d3a      	adds	r2, r7, #4
   21704:	7852      	ldrb	r2, [r2, #1]
   21706:	b2d0      	uxtb	r0, r2
   21708:	1d3a      	adds	r2, r7, #4
   2170a:	8852      	ldrh	r2, [r2, #2]
   2170c:	b292      	uxth	r2, r2
   2170e:	3a08      	subs	r2, #8
   21710:	b291      	uxth	r1, r2
   21712:	683a      	ldr	r2, [r7, #0]
   21714:	3208      	adds	r2, #8
   21716:	4798      	blx	r3
   21718:	e0b2      	b.n	21880 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   2171a:	23f8      	movs	r3, #248	; 0xf8
   2171c:	33ff      	adds	r3, #255	; 0xff
   2171e:	001a      	movs	r2, r3
   21720:	4948      	ldr	r1, [pc, #288]	; (21844 <hif_isr+0x3a0>)
   21722:	4b49      	ldr	r3, [pc, #292]	; (21848 <hif_isr+0x3a4>)
   21724:	0018      	movs	r0, r3
   21726:	4b49      	ldr	r3, [pc, #292]	; (2184c <hif_isr+0x3a8>)
   21728:	4798      	blx	r3
   2172a:	4b50      	ldr	r3, [pc, #320]	; (2186c <hif_isr+0x3c8>)
   2172c:	0018      	movs	r0, r3
   2172e:	4b47      	ldr	r3, [pc, #284]	; (2184c <hif_isr+0x3a8>)
   21730:	4798      	blx	r3
   21732:	4b48      	ldr	r3, [pc, #288]	; (21854 <hif_isr+0x3b0>)
   21734:	0018      	movs	r0, r3
   21736:	4b45      	ldr	r3, [pc, #276]	; (2184c <hif_isr+0x3a8>)
   21738:	4798      	blx	r3
   2173a:	e0a1      	b.n	21880 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   2173c:	1d3b      	adds	r3, r7, #4
   2173e:	781b      	ldrb	r3, [r3, #0]
   21740:	b2db      	uxtb	r3, r3
   21742:	2b06      	cmp	r3, #6
   21744:	d121      	bne.n	2178a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   21746:	4b3d      	ldr	r3, [pc, #244]	; (2183c <hif_isr+0x398>)
   21748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2174a:	2b00      	cmp	r3, #0
   2174c:	d00d      	beq.n	2176a <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2174e:	4b3b      	ldr	r3, [pc, #236]	; (2183c <hif_isr+0x398>)
   21750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21752:	1d3a      	adds	r2, r7, #4
   21754:	7852      	ldrb	r2, [r2, #1]
   21756:	b2d0      	uxtb	r0, r2
   21758:	1d3a      	adds	r2, r7, #4
   2175a:	8852      	ldrh	r2, [r2, #2]
   2175c:	b292      	uxth	r2, r2
   2175e:	3a08      	subs	r2, #8
   21760:	b291      	uxth	r1, r2
   21762:	683a      	ldr	r2, [r7, #0]
   21764:	3208      	adds	r2, #8
   21766:	4798      	blx	r3
   21768:	e08a      	b.n	21880 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   2176a:	2380      	movs	r3, #128	; 0x80
   2176c:	009a      	lsls	r2, r3, #2
   2176e:	4935      	ldr	r1, [pc, #212]	; (21844 <hif_isr+0x3a0>)
   21770:	4b35      	ldr	r3, [pc, #212]	; (21848 <hif_isr+0x3a4>)
   21772:	0018      	movs	r0, r3
   21774:	4b35      	ldr	r3, [pc, #212]	; (2184c <hif_isr+0x3a8>)
   21776:	4798      	blx	r3
   21778:	4b3d      	ldr	r3, [pc, #244]	; (21870 <hif_isr+0x3cc>)
   2177a:	0018      	movs	r0, r3
   2177c:	4b33      	ldr	r3, [pc, #204]	; (2184c <hif_isr+0x3a8>)
   2177e:	4798      	blx	r3
   21780:	4b34      	ldr	r3, [pc, #208]	; (21854 <hif_isr+0x3b0>)
   21782:	0018      	movs	r0, r3
   21784:	4b31      	ldr	r3, [pc, #196]	; (2184c <hif_isr+0x3a8>)
   21786:	4798      	blx	r3
   21788:	e07a      	b.n	21880 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   2178a:	1d3b      	adds	r3, r7, #4
   2178c:	781b      	ldrb	r3, [r3, #0]
   2178e:	b2db      	uxtb	r3, r3
   21790:	2b07      	cmp	r3, #7
   21792:	d120      	bne.n	217d6 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   21794:	4b29      	ldr	r3, [pc, #164]	; (2183c <hif_isr+0x398>)
   21796:	69db      	ldr	r3, [r3, #28]
   21798:	2b00      	cmp	r3, #0
   2179a:	d00d      	beq.n	217b8 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2179c:	4b27      	ldr	r3, [pc, #156]	; (2183c <hif_isr+0x398>)
   2179e:	69db      	ldr	r3, [r3, #28]
   217a0:	1d3a      	adds	r2, r7, #4
   217a2:	7852      	ldrb	r2, [r2, #1]
   217a4:	b2d0      	uxtb	r0, r2
   217a6:	1d3a      	adds	r2, r7, #4
   217a8:	8852      	ldrh	r2, [r2, #2]
   217aa:	b292      	uxth	r2, r2
   217ac:	3a08      	subs	r2, #8
   217ae:	b291      	uxth	r1, r2
   217b0:	683a      	ldr	r2, [r7, #0]
   217b2:	3208      	adds	r2, #8
   217b4:	4798      	blx	r3
   217b6:	e063      	b.n	21880 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   217b8:	4a2e      	ldr	r2, [pc, #184]	; (21874 <hif_isr+0x3d0>)
   217ba:	4922      	ldr	r1, [pc, #136]	; (21844 <hif_isr+0x3a0>)
   217bc:	4b22      	ldr	r3, [pc, #136]	; (21848 <hif_isr+0x3a4>)
   217be:	0018      	movs	r0, r3
   217c0:	4b22      	ldr	r3, [pc, #136]	; (2184c <hif_isr+0x3a8>)
   217c2:	4798      	blx	r3
   217c4:	4b2c      	ldr	r3, [pc, #176]	; (21878 <hif_isr+0x3d4>)
   217c6:	0018      	movs	r0, r3
   217c8:	4b20      	ldr	r3, [pc, #128]	; (2184c <hif_isr+0x3a8>)
   217ca:	4798      	blx	r3
   217cc:	4b21      	ldr	r3, [pc, #132]	; (21854 <hif_isr+0x3b0>)
   217ce:	0018      	movs	r0, r3
   217d0:	4b1e      	ldr	r3, [pc, #120]	; (2184c <hif_isr+0x3a8>)
   217d2:	4798      	blx	r3
   217d4:	e054      	b.n	21880 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   217d6:	1d3b      	adds	r3, r7, #4
   217d8:	781b      	ldrb	r3, [r3, #0]
   217da:	b2db      	uxtb	r3, r3
   217dc:	2b05      	cmp	r3, #5
   217de:	d111      	bne.n	21804 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   217e0:	4b16      	ldr	r3, [pc, #88]	; (2183c <hif_isr+0x398>)
   217e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   217e4:	2b00      	cmp	r3, #0
   217e6:	d04b      	beq.n	21880 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   217e8:	4b14      	ldr	r3, [pc, #80]	; (2183c <hif_isr+0x398>)
   217ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   217ec:	1d3a      	adds	r2, r7, #4
   217ee:	7852      	ldrb	r2, [r2, #1]
   217f0:	b2d0      	uxtb	r0, r2
   217f2:	1d3a      	adds	r2, r7, #4
   217f4:	8852      	ldrh	r2, [r2, #2]
   217f6:	b292      	uxth	r2, r2
   217f8:	3a08      	subs	r2, #8
   217fa:	b291      	uxth	r1, r2
   217fc:	683a      	ldr	r2, [r7, #0]
   217fe:	3208      	adds	r2, #8
   21800:	4798      	blx	r3
   21802:	e03d      	b.n	21880 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   21804:	2384      	movs	r3, #132	; 0x84
   21806:	009a      	lsls	r2, r3, #2
   21808:	490e      	ldr	r1, [pc, #56]	; (21844 <hif_isr+0x3a0>)
   2180a:	4b0f      	ldr	r3, [pc, #60]	; (21848 <hif_isr+0x3a4>)
   2180c:	0018      	movs	r0, r3
   2180e:	4b0f      	ldr	r3, [pc, #60]	; (2184c <hif_isr+0x3a8>)
   21810:	4798      	blx	r3
   21812:	4b1a      	ldr	r3, [pc, #104]	; (2187c <hif_isr+0x3d8>)
   21814:	0018      	movs	r0, r3
   21816:	4b0d      	ldr	r3, [pc, #52]	; (2184c <hif_isr+0x3a8>)
   21818:	4798      	blx	r3
   2181a:	4b0e      	ldr	r3, [pc, #56]	; (21854 <hif_isr+0x3b0>)
   2181c:	0018      	movs	r0, r3
   2181e:	4b0b      	ldr	r3, [pc, #44]	; (2184c <hif_isr+0x3a8>)
   21820:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   21822:	230f      	movs	r3, #15
   21824:	18fb      	adds	r3, r7, r3
   21826:	22fa      	movs	r2, #250	; 0xfa
   21828:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   2182a:	e083      	b.n	21934 <hif_isr+0x490>
   2182c:	00001070 	.word	0x00001070
   21830:	00022f31 	.word	0x00022f31
   21834:	00020655 	.word	0x00020655
   21838:	00022f55 	.word	0x00022f55
   2183c:	20005660 	.word	0x20005660
   21840:	00001084 	.word	0x00001084
   21844:	000387e4 	.word	0x000387e4
   21848:	000384d4 	.word	0x000384d4
   2184c:	0001e529 	.word	0x0001e529
   21850:	00038508 	.word	0x00038508
   21854:	000384d0 	.word	0x000384d0
   21858:	00022fa5 	.word	0x00022fa5
   2185c:	00038530 	.word	0x00038530
   21860:	00038548 	.word	0x00038548
   21864:	00038588 	.word	0x00038588
   21868:	000385ac 	.word	0x000385ac
   2186c:	000385d0 	.word	0x000385d0
   21870:	000385f0 	.word	0x000385f0
   21874:	00000207 	.word	0x00000207
   21878:	00038614 	.word	0x00038614
   2187c:	00038638 	.word	0x00038638
				}
				if(gstrHifCxt.u8HifRXDone)
   21880:	4b30      	ldr	r3, [pc, #192]	; (21944 <hif_isr+0x4a0>)
   21882:	789b      	ldrb	r3, [r3, #2]
   21884:	b2db      	uxtb	r3, r3
   21886:	2b00      	cmp	r3, #0
   21888:	d054      	beq.n	21934 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   2188a:	4a2f      	ldr	r2, [pc, #188]	; (21948 <hif_isr+0x4a4>)
   2188c:	492f      	ldr	r1, [pc, #188]	; (2194c <hif_isr+0x4a8>)
   2188e:	4b30      	ldr	r3, [pc, #192]	; (21950 <hif_isr+0x4ac>)
   21890:	0018      	movs	r0, r3
   21892:	4b30      	ldr	r3, [pc, #192]	; (21954 <hif_isr+0x4b0>)
   21894:	4798      	blx	r3
   21896:	1d3b      	adds	r3, r7, #4
   21898:	781b      	ldrb	r3, [r3, #0]
   2189a:	b2db      	uxtb	r3, r3
   2189c:	0019      	movs	r1, r3
   2189e:	1d3b      	adds	r3, r7, #4
   218a0:	785b      	ldrb	r3, [r3, #1]
   218a2:	b2db      	uxtb	r3, r3
   218a4:	001a      	movs	r2, r3
   218a6:	4b2c      	ldr	r3, [pc, #176]	; (21958 <hif_isr+0x4b4>)
   218a8:	0018      	movs	r0, r3
   218aa:	4b2a      	ldr	r3, [pc, #168]	; (21954 <hif_isr+0x4b0>)
   218ac:	4798      	blx	r3
   218ae:	4b2b      	ldr	r3, [pc, #172]	; (2195c <hif_isr+0x4b8>)
   218b0:	0018      	movs	r0, r3
   218b2:	4b28      	ldr	r3, [pc, #160]	; (21954 <hif_isr+0x4b0>)
   218b4:	4798      	blx	r3
					ret = hif_set_rx_done();
   218b6:	230f      	movs	r3, #15
   218b8:	18fc      	adds	r4, r7, r3
   218ba:	4b29      	ldr	r3, [pc, #164]	; (21960 <hif_isr+0x4bc>)
   218bc:	4798      	blx	r3
   218be:	0003      	movs	r3, r0
   218c0:	7023      	strb	r3, [r4, #0]
   218c2:	e037      	b.n	21934 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   218c4:	4a27      	ldr	r2, [pc, #156]	; (21964 <hif_isr+0x4c0>)
   218c6:	4921      	ldr	r1, [pc, #132]	; (2194c <hif_isr+0x4a8>)
   218c8:	4b21      	ldr	r3, [pc, #132]	; (21950 <hif_isr+0x4ac>)
   218ca:	0018      	movs	r0, r3
   218cc:	4b21      	ldr	r3, [pc, #132]	; (21954 <hif_isr+0x4b0>)
   218ce:	4798      	blx	r3
   218d0:	4b25      	ldr	r3, [pc, #148]	; (21968 <hif_isr+0x4c4>)
   218d2:	0018      	movs	r0, r3
   218d4:	4b1f      	ldr	r3, [pc, #124]	; (21954 <hif_isr+0x4b0>)
   218d6:	4798      	blx	r3
   218d8:	4b20      	ldr	r3, [pc, #128]	; (2195c <hif_isr+0x4b8>)
   218da:	0018      	movs	r0, r3
   218dc:	4b1d      	ldr	r3, [pc, #116]	; (21954 <hif_isr+0x4b0>)
   218de:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   218e0:	230f      	movs	r3, #15
   218e2:	18fb      	adds	r3, r7, r3
   218e4:	22fe      	movs	r2, #254	; 0xfe
   218e6:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   218e8:	e024      	b.n	21934 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   218ea:	4a20      	ldr	r2, [pc, #128]	; (2196c <hif_isr+0x4c8>)
   218ec:	4917      	ldr	r1, [pc, #92]	; (2194c <hif_isr+0x4a8>)
   218ee:	4b18      	ldr	r3, [pc, #96]	; (21950 <hif_isr+0x4ac>)
   218f0:	0018      	movs	r0, r3
   218f2:	4b18      	ldr	r3, [pc, #96]	; (21954 <hif_isr+0x4b0>)
   218f4:	4798      	blx	r3
   218f6:	68ba      	ldr	r2, [r7, #8]
   218f8:	4b1d      	ldr	r3, [pc, #116]	; (21970 <hif_isr+0x4cc>)
   218fa:	0011      	movs	r1, r2
   218fc:	0018      	movs	r0, r3
   218fe:	4b15      	ldr	r3, [pc, #84]	; (21954 <hif_isr+0x4b0>)
   21900:	4798      	blx	r3
   21902:	4b16      	ldr	r3, [pc, #88]	; (2195c <hif_isr+0x4b8>)
   21904:	0018      	movs	r0, r3
   21906:	4b13      	ldr	r3, [pc, #76]	; (21954 <hif_isr+0x4b0>)
   21908:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2190a:	230f      	movs	r3, #15
   2190c:	18fb      	adds	r3, r7, r3
   2190e:	22f4      	movs	r2, #244	; 0xf4
   21910:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   21912:	e00f      	b.n	21934 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   21914:	4a17      	ldr	r2, [pc, #92]	; (21974 <hif_isr+0x4d0>)
   21916:	490d      	ldr	r1, [pc, #52]	; (2194c <hif_isr+0x4a8>)
   21918:	4b0d      	ldr	r3, [pc, #52]	; (21950 <hif_isr+0x4ac>)
   2191a:	0018      	movs	r0, r3
   2191c:	4b0d      	ldr	r3, [pc, #52]	; (21954 <hif_isr+0x4b0>)
   2191e:	4798      	blx	r3
   21920:	4b15      	ldr	r3, [pc, #84]	; (21978 <hif_isr+0x4d4>)
   21922:	0018      	movs	r0, r3
   21924:	4b0b      	ldr	r3, [pc, #44]	; (21954 <hif_isr+0x4b0>)
   21926:	4798      	blx	r3
   21928:	4b0c      	ldr	r3, [pc, #48]	; (2195c <hif_isr+0x4b8>)
   2192a:	0018      	movs	r0, r3
   2192c:	4b09      	ldr	r3, [pc, #36]	; (21954 <hif_isr+0x4b0>)
   2192e:	4798      	blx	r3
		goto ERR1;
   21930:	e000      	b.n	21934 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   21932:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21934:	230f      	movs	r3, #15
   21936:	18fb      	adds	r3, r7, r3
   21938:	781b      	ldrb	r3, [r3, #0]
   2193a:	b25b      	sxtb	r3, r3
}
   2193c:	0018      	movs	r0, r3
   2193e:	46bd      	mov	sp, r7
   21940:	b005      	add	sp, #20
   21942:	bd90      	pop	{r4, r7, pc}
   21944:	20005660 	.word	0x20005660
   21948:	00000216 	.word	0x00000216
   2194c:	000387e4 	.word	0x000387e4
   21950:	000384d4 	.word	0x000384d4
   21954:	0001e529 	.word	0x0001e529
   21958:	00038650 	.word	0x00038650
   2195c:	000384d0 	.word	0x000384d0
   21960:	00020f39 	.word	0x00020f39
   21964:	0000021d 	.word	0x0000021d
   21968:	0003867c 	.word	0x0003867c
   2196c:	00000225 	.word	0x00000225
   21970:	00038690 	.word	0x00038690
   21974:	0000022e 	.word	0x0000022e
   21978:	000386ac 	.word	0x000386ac

0002197c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   2197c:	b590      	push	{r4, r7, lr}
   2197e:	b083      	sub	sp, #12
   21980:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   21982:	1dfb      	adds	r3, r7, #7
   21984:	2200      	movs	r2, #0
   21986:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   21988:	4b1c      	ldr	r3, [pc, #112]	; (219fc <hif_handle_isr+0x80>)
   2198a:	2200      	movs	r2, #0
   2198c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2198e:	e024      	b.n	219da <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   21990:	4b1a      	ldr	r3, [pc, #104]	; (219fc <hif_handle_isr+0x80>)
   21992:	78db      	ldrb	r3, [r3, #3]
   21994:	b2db      	uxtb	r3, r3
   21996:	3b01      	subs	r3, #1
   21998:	b2da      	uxtb	r2, r3
   2199a:	4b18      	ldr	r3, [pc, #96]	; (219fc <hif_handle_isr+0x80>)
   2199c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2199e:	1dfc      	adds	r4, r7, #7
   219a0:	4b17      	ldr	r3, [pc, #92]	; (21a00 <hif_handle_isr+0x84>)
   219a2:	4798      	blx	r3
   219a4:	0003      	movs	r3, r0
   219a6:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   219a8:	1dfb      	adds	r3, r7, #7
   219aa:	781b      	ldrb	r3, [r3, #0]
   219ac:	b25b      	sxtb	r3, r3
   219ae:	2b00      	cmp	r3, #0
   219b0:	d100      	bne.n	219b4 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   219b2:	e012      	b.n	219da <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   219b4:	4a13      	ldr	r2, [pc, #76]	; (21a04 <hif_handle_isr+0x88>)
   219b6:	4914      	ldr	r1, [pc, #80]	; (21a08 <hif_handle_isr+0x8c>)
   219b8:	4b14      	ldr	r3, [pc, #80]	; (21a0c <hif_handle_isr+0x90>)
   219ba:	0018      	movs	r0, r3
   219bc:	4b14      	ldr	r3, [pc, #80]	; (21a10 <hif_handle_isr+0x94>)
   219be:	4798      	blx	r3
   219c0:	1dfb      	adds	r3, r7, #7
   219c2:	2200      	movs	r2, #0
   219c4:	569a      	ldrsb	r2, [r3, r2]
   219c6:	4b13      	ldr	r3, [pc, #76]	; (21a14 <hif_handle_isr+0x98>)
   219c8:	0011      	movs	r1, r2
   219ca:	0018      	movs	r0, r3
   219cc:	4b10      	ldr	r3, [pc, #64]	; (21a10 <hif_handle_isr+0x94>)
   219ce:	4798      	blx	r3
   219d0:	4b11      	ldr	r3, [pc, #68]	; (21a18 <hif_handle_isr+0x9c>)
   219d2:	0018      	movs	r0, r3
   219d4:	4b0e      	ldr	r3, [pc, #56]	; (21a10 <hif_handle_isr+0x94>)
   219d6:	4798      	blx	r3
			ret = hif_isr();
   219d8:	e7e1      	b.n	2199e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   219da:	4b08      	ldr	r3, [pc, #32]	; (219fc <hif_handle_isr+0x80>)
   219dc:	78db      	ldrb	r3, [r3, #3]
   219de:	b2db      	uxtb	r3, r3
   219e0:	2b00      	cmp	r3, #0
   219e2:	d004      	beq.n	219ee <hif_handle_isr+0x72>
   219e4:	4b05      	ldr	r3, [pc, #20]	; (219fc <hif_handle_isr+0x80>)
   219e6:	791b      	ldrb	r3, [r3, #4]
   219e8:	b2db      	uxtb	r3, r3
   219ea:	2b00      	cmp	r3, #0
   219ec:	d0d0      	beq.n	21990 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   219ee:	1dfb      	adds	r3, r7, #7
   219f0:	781b      	ldrb	r3, [r3, #0]
   219f2:	b25b      	sxtb	r3, r3
}
   219f4:	0018      	movs	r0, r3
   219f6:	46bd      	mov	sp, r7
   219f8:	b003      	add	sp, #12
   219fa:	bd90      	pop	{r4, r7, pc}
   219fc:	20005660 	.word	0x20005660
   21a00:	000214a5 	.word	0x000214a5
   21a04:	00000257 	.word	0x00000257
   21a08:	000387ec 	.word	0x000387ec
   21a0c:	000384d4 	.word	0x000384d4
   21a10:	0001e529 	.word	0x0001e529
   21a14:	000386d0 	.word	0x000386d0
   21a18:	000384d0 	.word	0x000384d0

00021a1c <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   21a1c:	b590      	push	{r4, r7, lr}
   21a1e:	b087      	sub	sp, #28
   21a20:	af00      	add	r7, sp, #0
   21a22:	60f8      	str	r0, [r7, #12]
   21a24:	60b9      	str	r1, [r7, #8]
   21a26:	0019      	movs	r1, r3
   21a28:	1dbb      	adds	r3, r7, #6
   21a2a:	801a      	strh	r2, [r3, #0]
   21a2c:	1d7b      	adds	r3, r7, #5
   21a2e:	1c0a      	adds	r2, r1, #0
   21a30:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21a32:	2317      	movs	r3, #23
   21a34:	18fb      	adds	r3, r7, r3
   21a36:	2200      	movs	r2, #0
   21a38:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   21a3a:	68fb      	ldr	r3, [r7, #12]
   21a3c:	2b00      	cmp	r3, #0
   21a3e:	d006      	beq.n	21a4e <hif_receive+0x32>
   21a40:	68bb      	ldr	r3, [r7, #8]
   21a42:	2b00      	cmp	r3, #0
   21a44:	d003      	beq.n	21a4e <hif_receive+0x32>
   21a46:	1dbb      	adds	r3, r7, #6
   21a48:	881b      	ldrh	r3, [r3, #0]
   21a4a:	2b00      	cmp	r3, #0
   21a4c:	d11e      	bne.n	21a8c <hif_receive+0x70>
	{
		if(isDone)
   21a4e:	1d7b      	adds	r3, r7, #5
   21a50:	781b      	ldrb	r3, [r3, #0]
   21a52:	2b00      	cmp	r3, #0
   21a54:	d006      	beq.n	21a64 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   21a56:	2317      	movs	r3, #23
   21a58:	18fc      	adds	r4, r7, r3
   21a5a:	4b45      	ldr	r3, [pc, #276]	; (21b70 <hif_receive+0x154>)
   21a5c:	4798      	blx	r3
   21a5e:	0003      	movs	r3, r0
   21a60:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   21a62:	e07c      	b.n	21b5e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   21a64:	2317      	movs	r3, #23
   21a66:	18fb      	adds	r3, r7, r3
   21a68:	22f4      	movs	r2, #244	; 0xf4
   21a6a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   21a6c:	239e      	movs	r3, #158	; 0x9e
   21a6e:	009a      	lsls	r2, r3, #2
   21a70:	4940      	ldr	r1, [pc, #256]	; (21b74 <hif_receive+0x158>)
   21a72:	4b41      	ldr	r3, [pc, #260]	; (21b78 <hif_receive+0x15c>)
   21a74:	0018      	movs	r0, r3
   21a76:	4b41      	ldr	r3, [pc, #260]	; (21b7c <hif_receive+0x160>)
   21a78:	4798      	blx	r3
   21a7a:	4b41      	ldr	r3, [pc, #260]	; (21b80 <hif_receive+0x164>)
   21a7c:	0018      	movs	r0, r3
   21a7e:	4b3f      	ldr	r3, [pc, #252]	; (21b7c <hif_receive+0x160>)
   21a80:	4798      	blx	r3
   21a82:	4b40      	ldr	r3, [pc, #256]	; (21b84 <hif_receive+0x168>)
   21a84:	0018      	movs	r0, r3
   21a86:	4b3d      	ldr	r3, [pc, #244]	; (21b7c <hif_receive+0x160>)
   21a88:	4798      	blx	r3
		goto ERR1;
   21a8a:	e068      	b.n	21b5e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   21a8c:	1dbb      	adds	r3, r7, #6
   21a8e:	881a      	ldrh	r2, [r3, #0]
   21a90:	4b3d      	ldr	r3, [pc, #244]	; (21b88 <hif_receive+0x16c>)
   21a92:	68db      	ldr	r3, [r3, #12]
   21a94:	429a      	cmp	r2, r3
   21a96:	d917      	bls.n	21ac8 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   21a98:	2317      	movs	r3, #23
   21a9a:	18fb      	adds	r3, r7, r3
   21a9c:	22f4      	movs	r2, #244	; 0xf4
   21a9e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   21aa0:	23a0      	movs	r3, #160	; 0xa0
   21aa2:	009a      	lsls	r2, r3, #2
   21aa4:	4933      	ldr	r1, [pc, #204]	; (21b74 <hif_receive+0x158>)
   21aa6:	4b34      	ldr	r3, [pc, #208]	; (21b78 <hif_receive+0x15c>)
   21aa8:	0018      	movs	r0, r3
   21aaa:	4b34      	ldr	r3, [pc, #208]	; (21b7c <hif_receive+0x160>)
   21aac:	4798      	blx	r3
   21aae:	1dbb      	adds	r3, r7, #6
   21ab0:	8819      	ldrh	r1, [r3, #0]
   21ab2:	4b35      	ldr	r3, [pc, #212]	; (21b88 <hif_receive+0x16c>)
   21ab4:	68da      	ldr	r2, [r3, #12]
   21ab6:	4b35      	ldr	r3, [pc, #212]	; (21b8c <hif_receive+0x170>)
   21ab8:	0018      	movs	r0, r3
   21aba:	4b30      	ldr	r3, [pc, #192]	; (21b7c <hif_receive+0x160>)
   21abc:	4798      	blx	r3
   21abe:	4b31      	ldr	r3, [pc, #196]	; (21b84 <hif_receive+0x168>)
   21ac0:	0018      	movs	r0, r3
   21ac2:	4b2e      	ldr	r3, [pc, #184]	; (21b7c <hif_receive+0x160>)
   21ac4:	4798      	blx	r3
		goto ERR1;
   21ac6:	e04a      	b.n	21b5e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   21ac8:	4b2f      	ldr	r3, [pc, #188]	; (21b88 <hif_receive+0x16c>)
   21aca:	689a      	ldr	r2, [r3, #8]
   21acc:	68fb      	ldr	r3, [r7, #12]
   21ace:	429a      	cmp	r2, r3
   21ad0:	d80a      	bhi.n	21ae8 <hif_receive+0xcc>
   21ad2:	1dbb      	adds	r3, r7, #6
   21ad4:	881a      	ldrh	r2, [r3, #0]
   21ad6:	68fb      	ldr	r3, [r7, #12]
   21ad8:	18d2      	adds	r2, r2, r3
   21ada:	4b2b      	ldr	r3, [pc, #172]	; (21b88 <hif_receive+0x16c>)
   21adc:	6899      	ldr	r1, [r3, #8]
   21ade:	4b2a      	ldr	r3, [pc, #168]	; (21b88 <hif_receive+0x16c>)
   21ae0:	68db      	ldr	r3, [r3, #12]
   21ae2:	18cb      	adds	r3, r1, r3
   21ae4:	429a      	cmp	r2, r3
   21ae6:	d912      	bls.n	21b0e <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   21ae8:	2317      	movs	r3, #23
   21aea:	18fb      	adds	r3, r7, r3
   21aec:	22f4      	movs	r2, #244	; 0xf4
   21aee:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   21af0:	4a27      	ldr	r2, [pc, #156]	; (21b90 <hif_receive+0x174>)
   21af2:	4920      	ldr	r1, [pc, #128]	; (21b74 <hif_receive+0x158>)
   21af4:	4b20      	ldr	r3, [pc, #128]	; (21b78 <hif_receive+0x15c>)
   21af6:	0018      	movs	r0, r3
   21af8:	4b20      	ldr	r3, [pc, #128]	; (21b7c <hif_receive+0x160>)
   21afa:	4798      	blx	r3
   21afc:	4b25      	ldr	r3, [pc, #148]	; (21b94 <hif_receive+0x178>)
   21afe:	0018      	movs	r0, r3
   21b00:	4b1e      	ldr	r3, [pc, #120]	; (21b7c <hif_receive+0x160>)
   21b02:	4798      	blx	r3
   21b04:	4b1f      	ldr	r3, [pc, #124]	; (21b84 <hif_receive+0x168>)
   21b06:	0018      	movs	r0, r3
   21b08:	4b1c      	ldr	r3, [pc, #112]	; (21b7c <hif_receive+0x160>)
   21b0a:	4798      	blx	r3
		goto ERR1;
   21b0c:	e027      	b.n	21b5e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   21b0e:	1dbb      	adds	r3, r7, #6
   21b10:	881a      	ldrh	r2, [r3, #0]
   21b12:	2317      	movs	r3, #23
   21b14:	18fc      	adds	r4, r7, r3
   21b16:	68b9      	ldr	r1, [r7, #8]
   21b18:	68fb      	ldr	r3, [r7, #12]
   21b1a:	0018      	movs	r0, r3
   21b1c:	4b1e      	ldr	r3, [pc, #120]	; (21b98 <hif_receive+0x17c>)
   21b1e:	4798      	blx	r3
   21b20:	0003      	movs	r3, r0
   21b22:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21b24:	2317      	movs	r3, #23
   21b26:	18fb      	adds	r3, r7, r3
   21b28:	781b      	ldrb	r3, [r3, #0]
   21b2a:	b25b      	sxtb	r3, r3
   21b2c:	2b00      	cmp	r3, #0
   21b2e:	d115      	bne.n	21b5c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   21b30:	4b15      	ldr	r3, [pc, #84]	; (21b88 <hif_receive+0x16c>)
   21b32:	689a      	ldr	r2, [r3, #8]
   21b34:	4b14      	ldr	r3, [pc, #80]	; (21b88 <hif_receive+0x16c>)
   21b36:	68db      	ldr	r3, [r3, #12]
   21b38:	18d2      	adds	r2, r2, r3
   21b3a:	1dbb      	adds	r3, r7, #6
   21b3c:	8819      	ldrh	r1, [r3, #0]
   21b3e:	68fb      	ldr	r3, [r7, #12]
   21b40:	18cb      	adds	r3, r1, r3
   21b42:	429a      	cmp	r2, r3
   21b44:	d003      	beq.n	21b4e <hif_receive+0x132>
   21b46:	1d7b      	adds	r3, r7, #5
   21b48:	781b      	ldrb	r3, [r3, #0]
   21b4a:	2b00      	cmp	r3, #0
   21b4c:	d007      	beq.n	21b5e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   21b4e:	2317      	movs	r3, #23
   21b50:	18fc      	adds	r4, r7, r3
   21b52:	4b07      	ldr	r3, [pc, #28]	; (21b70 <hif_receive+0x154>)
   21b54:	4798      	blx	r3
   21b56:	0003      	movs	r3, r0
   21b58:	7023      	strb	r3, [r4, #0]
   21b5a:	e000      	b.n	21b5e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   21b5c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   21b5e:	2317      	movs	r3, #23
   21b60:	18fb      	adds	r3, r7, r3
   21b62:	781b      	ldrb	r3, [r3, #0]
   21b64:	b25b      	sxtb	r3, r3
}
   21b66:	0018      	movs	r0, r3
   21b68:	46bd      	mov	sp, r7
   21b6a:	b007      	add	sp, #28
   21b6c:	bd90      	pop	{r4, r7, pc}
   21b6e:	46c0      	nop			; (mov r8, r8)
   21b70:	00020f39 	.word	0x00020f39
   21b74:	000387fc 	.word	0x000387fc
   21b78:	000384d4 	.word	0x000384d4
   21b7c:	0001e529 	.word	0x0001e529
   21b80:	00038700 	.word	0x00038700
   21b84:	000384d0 	.word	0x000384d0
   21b88:	20005660 	.word	0x20005660
   21b8c:	00038720 	.word	0x00038720
   21b90:	00000286 	.word	0x00000286
   21b94:	00038768 	.word	0x00038768
   21b98:	00022fa5 	.word	0x00022fa5

00021b9c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   21b9c:	b580      	push	{r7, lr}
   21b9e:	b084      	sub	sp, #16
   21ba0:	af00      	add	r7, sp, #0
   21ba2:	0002      	movs	r2, r0
   21ba4:	6039      	str	r1, [r7, #0]
   21ba6:	1dfb      	adds	r3, r7, #7
   21ba8:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21baa:	230f      	movs	r3, #15
   21bac:	18fb      	adds	r3, r7, r3
   21bae:	2200      	movs	r2, #0
   21bb0:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   21bb2:	1dfb      	adds	r3, r7, #7
   21bb4:	781b      	ldrb	r3, [r3, #0]
   21bb6:	2b07      	cmp	r3, #7
   21bb8:	d820      	bhi.n	21bfc <hif_register_cb+0x60>
   21bba:	009a      	lsls	r2, r3, #2
   21bbc:	4b1e      	ldr	r3, [pc, #120]	; (21c38 <hif_register_cb+0x9c>)
   21bbe:	18d3      	adds	r3, r2, r3
   21bc0:	681b      	ldr	r3, [r3, #0]
   21bc2:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   21bc4:	4b1d      	ldr	r3, [pc, #116]	; (21c3c <hif_register_cb+0xa0>)
   21bc6:	683a      	ldr	r2, [r7, #0]
   21bc8:	615a      	str	r2, [r3, #20]
			break;
   21bca:	e02d      	b.n	21c28 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   21bcc:	4b1b      	ldr	r3, [pc, #108]	; (21c3c <hif_register_cb+0xa0>)
   21bce:	683a      	ldr	r2, [r7, #0]
   21bd0:	611a      	str	r2, [r3, #16]
			break;
   21bd2:	e029      	b.n	21c28 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   21bd4:	4b19      	ldr	r3, [pc, #100]	; (21c3c <hif_register_cb+0xa0>)
   21bd6:	683a      	ldr	r2, [r7, #0]
   21bd8:	619a      	str	r2, [r3, #24]
			break;
   21bda:	e025      	b.n	21c28 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   21bdc:	4b17      	ldr	r3, [pc, #92]	; (21c3c <hif_register_cb+0xa0>)
   21bde:	683a      	ldr	r2, [r7, #0]
   21be0:	621a      	str	r2, [r3, #32]
			break;
   21be2:	e021      	b.n	21c28 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   21be4:	4b15      	ldr	r3, [pc, #84]	; (21c3c <hif_register_cb+0xa0>)
   21be6:	683a      	ldr	r2, [r7, #0]
   21be8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   21bea:	e01d      	b.n	21c28 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   21bec:	4b13      	ldr	r3, [pc, #76]	; (21c3c <hif_register_cb+0xa0>)
   21bee:	683a      	ldr	r2, [r7, #0]
   21bf0:	61da      	str	r2, [r3, #28]
			break;
   21bf2:	e019      	b.n	21c28 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   21bf4:	4b11      	ldr	r3, [pc, #68]	; (21c3c <hif_register_cb+0xa0>)
   21bf6:	683a      	ldr	r2, [r7, #0]
   21bf8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   21bfa:	e015      	b.n	21c28 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   21bfc:	4a10      	ldr	r2, [pc, #64]	; (21c40 <hif_register_cb+0xa4>)
   21bfe:	4911      	ldr	r1, [pc, #68]	; (21c44 <hif_register_cb+0xa8>)
   21c00:	4b11      	ldr	r3, [pc, #68]	; (21c48 <hif_register_cb+0xac>)
   21c02:	0018      	movs	r0, r3
   21c04:	4b11      	ldr	r3, [pc, #68]	; (21c4c <hif_register_cb+0xb0>)
   21c06:	4798      	blx	r3
   21c08:	1dfb      	adds	r3, r7, #7
   21c0a:	781a      	ldrb	r2, [r3, #0]
   21c0c:	4b10      	ldr	r3, [pc, #64]	; (21c50 <hif_register_cb+0xb4>)
   21c0e:	0011      	movs	r1, r2
   21c10:	0018      	movs	r0, r3
   21c12:	4b0e      	ldr	r3, [pc, #56]	; (21c4c <hif_register_cb+0xb0>)
   21c14:	4798      	blx	r3
   21c16:	4b0f      	ldr	r3, [pc, #60]	; (21c54 <hif_register_cb+0xb8>)
   21c18:	0018      	movs	r0, r3
   21c1a:	4b0c      	ldr	r3, [pc, #48]	; (21c4c <hif_register_cb+0xb0>)
   21c1c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   21c1e:	230f      	movs	r3, #15
   21c20:	18fb      	adds	r3, r7, r3
   21c22:	22f4      	movs	r2, #244	; 0xf4
   21c24:	701a      	strb	r2, [r3, #0]
			break;
   21c26:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   21c28:	230f      	movs	r3, #15
   21c2a:	18fb      	adds	r3, r7, r3
   21c2c:	781b      	ldrb	r3, [r3, #0]
   21c2e:	b25b      	sxtb	r3, r3
}
   21c30:	0018      	movs	r0, r3
   21c32:	46bd      	mov	sp, r7
   21c34:	b004      	add	sp, #16
   21c36:	bd80      	pop	{r7, pc}
   21c38:	000387b8 	.word	0x000387b8
   21c3c:	20005660 	.word	0x20005660
   21c40:	000002be 	.word	0x000002be
   21c44:	00038808 	.word	0x00038808
   21c48:	000384d4 	.word	0x000384d4
   21c4c:	0001e529 	.word	0x0001e529
   21c50:	000387ac 	.word	0x000387ac
   21c54:	000384d0 	.word	0x000384d0

00021c58 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21c58:	b590      	push	{r4, r7, lr}
   21c5a:	b0af      	sub	sp, #188	; 0xbc
   21c5c:	af02      	add	r7, sp, #8
   21c5e:	603a      	str	r2, [r7, #0]
   21c60:	1dfb      	adds	r3, r7, #7
   21c62:	1c02      	adds	r2, r0, #0
   21c64:	701a      	strb	r2, [r3, #0]
   21c66:	1d3b      	adds	r3, r7, #4
   21c68:	1c0a      	adds	r2, r1, #0
   21c6a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   21c6c:	1dfb      	adds	r3, r7, #7
   21c6e:	781b      	ldrb	r3, [r3, #0]
   21c70:	2b2c      	cmp	r3, #44	; 0x2c
   21c72:	d116      	bne.n	21ca2 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   21c74:	23a4      	movs	r3, #164	; 0xa4
   21c76:	18f9      	adds	r1, r7, r3
   21c78:	6838      	ldr	r0, [r7, #0]
   21c7a:	2300      	movs	r3, #0
   21c7c:	2204      	movs	r2, #4
   21c7e:	4cca      	ldr	r4, [pc, #808]	; (21fa8 <m2m_wifi_cb+0x350>)
   21c80:	47a0      	blx	r4
   21c82:	1e03      	subs	r3, r0, #0
   21c84:	d000      	beq.n	21c88 <m2m_wifi_cb+0x30>
   21c86:	e1b4      	b.n	21ff2 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   21c88:	4bc8      	ldr	r3, [pc, #800]	; (21fac <m2m_wifi_cb+0x354>)
   21c8a:	681b      	ldr	r3, [r3, #0]
   21c8c:	2b00      	cmp	r3, #0
   21c8e:	d100      	bne.n	21c92 <m2m_wifi_cb+0x3a>
   21c90:	e1af      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   21c92:	4bc6      	ldr	r3, [pc, #792]	; (21fac <m2m_wifi_cb+0x354>)
   21c94:	681b      	ldr	r3, [r3, #0]
   21c96:	22a4      	movs	r2, #164	; 0xa4
   21c98:	18ba      	adds	r2, r7, r2
   21c9a:	0011      	movs	r1, r2
   21c9c:	202c      	movs	r0, #44	; 0x2c
   21c9e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   21ca0:	e1a7      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   21ca2:	1dfb      	adds	r3, r7, #7
   21ca4:	781b      	ldrb	r3, [r3, #0]
   21ca6:	2b1b      	cmp	r3, #27
   21ca8:	d116      	bne.n	21cd8 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   21caa:	239c      	movs	r3, #156	; 0x9c
   21cac:	18f9      	adds	r1, r7, r3
   21cae:	6838      	ldr	r0, [r7, #0]
   21cb0:	2300      	movs	r3, #0
   21cb2:	2208      	movs	r2, #8
   21cb4:	4cbc      	ldr	r4, [pc, #752]	; (21fa8 <m2m_wifi_cb+0x350>)
   21cb6:	47a0      	blx	r4
   21cb8:	1e03      	subs	r3, r0, #0
   21cba:	d000      	beq.n	21cbe <m2m_wifi_cb+0x66>
   21cbc:	e199      	b.n	21ff2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21cbe:	4bbb      	ldr	r3, [pc, #748]	; (21fac <m2m_wifi_cb+0x354>)
   21cc0:	681b      	ldr	r3, [r3, #0]
   21cc2:	2b00      	cmp	r3, #0
   21cc4:	d100      	bne.n	21cc8 <m2m_wifi_cb+0x70>
   21cc6:	e194      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   21cc8:	4bb8      	ldr	r3, [pc, #736]	; (21fac <m2m_wifi_cb+0x354>)
   21cca:	681b      	ldr	r3, [r3, #0]
   21ccc:	229c      	movs	r2, #156	; 0x9c
   21cce:	18ba      	adds	r2, r7, r2
   21cd0:	0011      	movs	r1, r2
   21cd2:	201b      	movs	r0, #27
   21cd4:	4798      	blx	r3
}
   21cd6:	e18c      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   21cd8:	1dfb      	adds	r3, r7, #7
   21cda:	781b      	ldrb	r3, [r3, #0]
   21cdc:	2b06      	cmp	r3, #6
   21cde:	d116      	bne.n	21d0e <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   21ce0:	230c      	movs	r3, #12
   21ce2:	18f9      	adds	r1, r7, r3
   21ce4:	6838      	ldr	r0, [r7, #0]
   21ce6:	2301      	movs	r3, #1
   21ce8:	2230      	movs	r2, #48	; 0x30
   21cea:	4caf      	ldr	r4, [pc, #700]	; (21fa8 <m2m_wifi_cb+0x350>)
   21cec:	47a0      	blx	r4
   21cee:	1e03      	subs	r3, r0, #0
   21cf0:	d000      	beq.n	21cf4 <m2m_wifi_cb+0x9c>
   21cf2:	e17e      	b.n	21ff2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21cf4:	4bad      	ldr	r3, [pc, #692]	; (21fac <m2m_wifi_cb+0x354>)
   21cf6:	681b      	ldr	r3, [r3, #0]
   21cf8:	2b00      	cmp	r3, #0
   21cfa:	d100      	bne.n	21cfe <m2m_wifi_cb+0xa6>
   21cfc:	e179      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   21cfe:	4bab      	ldr	r3, [pc, #684]	; (21fac <m2m_wifi_cb+0x354>)
   21d00:	681b      	ldr	r3, [r3, #0]
   21d02:	220c      	movs	r2, #12
   21d04:	18ba      	adds	r2, r7, r2
   21d06:	0011      	movs	r1, r2
   21d08:	2006      	movs	r0, #6
   21d0a:	4798      	blx	r3
}
   21d0c:	e171      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   21d0e:	1dfb      	adds	r3, r7, #7
   21d10:	781b      	ldrb	r3, [r3, #0]
   21d12:	2b0e      	cmp	r3, #14
   21d14:	d100      	bne.n	21d18 <m2m_wifi_cb+0xc0>
   21d16:	e16c      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   21d18:	1dfb      	adds	r3, r7, #7
   21d1a:	781b      	ldrb	r3, [r3, #0]
   21d1c:	2b32      	cmp	r3, #50	; 0x32
   21d1e:	d116      	bne.n	21d4e <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   21d20:	2384      	movs	r3, #132	; 0x84
   21d22:	18f9      	adds	r1, r7, r3
   21d24:	6838      	ldr	r0, [r7, #0]
   21d26:	2300      	movs	r3, #0
   21d28:	2218      	movs	r2, #24
   21d2a:	4c9f      	ldr	r4, [pc, #636]	; (21fa8 <m2m_wifi_cb+0x350>)
   21d2c:	47a0      	blx	r4
   21d2e:	1e03      	subs	r3, r0, #0
   21d30:	d000      	beq.n	21d34 <m2m_wifi_cb+0xdc>
   21d32:	e15e      	b.n	21ff2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21d34:	4b9d      	ldr	r3, [pc, #628]	; (21fac <m2m_wifi_cb+0x354>)
   21d36:	681b      	ldr	r3, [r3, #0]
   21d38:	2b00      	cmp	r3, #0
   21d3a:	d100      	bne.n	21d3e <m2m_wifi_cb+0xe6>
   21d3c:	e159      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   21d3e:	4b9b      	ldr	r3, [pc, #620]	; (21fac <m2m_wifi_cb+0x354>)
   21d40:	681b      	ldr	r3, [r3, #0]
   21d42:	2284      	movs	r2, #132	; 0x84
   21d44:	18ba      	adds	r2, r7, r2
   21d46:	0011      	movs	r1, r2
   21d48:	2032      	movs	r0, #50	; 0x32
   21d4a:	4798      	blx	r3
}
   21d4c:	e151      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   21d4e:	1dfb      	adds	r3, r7, #7
   21d50:	781b      	ldrb	r3, [r3, #0]
   21d52:	2b2f      	cmp	r3, #47	; 0x2f
   21d54:	d11d      	bne.n	21d92 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   21d56:	230c      	movs	r3, #12
   21d58:	18fb      	adds	r3, r7, r3
   21d5a:	2264      	movs	r2, #100	; 0x64
   21d5c:	2100      	movs	r1, #0
   21d5e:	0018      	movs	r0, r3
   21d60:	4b93      	ldr	r3, [pc, #588]	; (21fb0 <m2m_wifi_cb+0x358>)
   21d62:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   21d64:	230c      	movs	r3, #12
   21d66:	18f9      	adds	r1, r7, r3
   21d68:	6838      	ldr	r0, [r7, #0]
   21d6a:	2300      	movs	r3, #0
   21d6c:	2264      	movs	r2, #100	; 0x64
   21d6e:	4c8e      	ldr	r4, [pc, #568]	; (21fa8 <m2m_wifi_cb+0x350>)
   21d70:	47a0      	blx	r4
   21d72:	1e03      	subs	r3, r0, #0
   21d74:	d000      	beq.n	21d78 <m2m_wifi_cb+0x120>
   21d76:	e13c      	b.n	21ff2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21d78:	4b8c      	ldr	r3, [pc, #560]	; (21fac <m2m_wifi_cb+0x354>)
   21d7a:	681b      	ldr	r3, [r3, #0]
   21d7c:	2b00      	cmp	r3, #0
   21d7e:	d100      	bne.n	21d82 <m2m_wifi_cb+0x12a>
   21d80:	e137      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   21d82:	4b8a      	ldr	r3, [pc, #552]	; (21fac <m2m_wifi_cb+0x354>)
   21d84:	681b      	ldr	r3, [r3, #0]
   21d86:	220c      	movs	r2, #12
   21d88:	18ba      	adds	r2, r7, r2
   21d8a:	0011      	movs	r1, r2
   21d8c:	202f      	movs	r0, #47	; 0x2f
   21d8e:	4798      	blx	r3
}
   21d90:	e12f      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   21d92:	1dfb      	adds	r3, r7, #7
   21d94:	781b      	ldrb	r3, [r3, #0]
   21d96:	2b34      	cmp	r3, #52	; 0x34
   21d98:	d137      	bne.n	21e0a <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   21d9a:	2380      	movs	r3, #128	; 0x80
   21d9c:	18f9      	adds	r1, r7, r3
   21d9e:	6838      	ldr	r0, [r7, #0]
   21da0:	2300      	movs	r3, #0
   21da2:	2204      	movs	r2, #4
   21da4:	4c80      	ldr	r4, [pc, #512]	; (21fa8 <m2m_wifi_cb+0x350>)
   21da6:	47a0      	blx	r4
   21da8:	1e03      	subs	r3, r0, #0
   21daa:	d000      	beq.n	21dae <m2m_wifi_cb+0x156>
   21dac:	e121      	b.n	21ff2 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   21dae:	4b81      	ldr	r3, [pc, #516]	; (21fb4 <m2m_wifi_cb+0x35c>)
   21db0:	0018      	movs	r0, r3
   21db2:	4b81      	ldr	r3, [pc, #516]	; (21fb8 <m2m_wifi_cb+0x360>)
   21db4:	4798      	blx	r3
   21db6:	2380      	movs	r3, #128	; 0x80
   21db8:	18fb      	adds	r3, r7, r3
   21dba:	681b      	ldr	r3, [r3, #0]
   21dbc:	0e1b      	lsrs	r3, r3, #24
   21dbe:	b2db      	uxtb	r3, r3
   21dc0:	0019      	movs	r1, r3
   21dc2:	2380      	movs	r3, #128	; 0x80
   21dc4:	18fb      	adds	r3, r7, r3
   21dc6:	681b      	ldr	r3, [r3, #0]
   21dc8:	0c1b      	lsrs	r3, r3, #16
   21dca:	b2db      	uxtb	r3, r3
   21dcc:	001a      	movs	r2, r3
   21dce:	2380      	movs	r3, #128	; 0x80
   21dd0:	18fb      	adds	r3, r7, r3
   21dd2:	681b      	ldr	r3, [r3, #0]
   21dd4:	0a1b      	lsrs	r3, r3, #8
   21dd6:	b2db      	uxtb	r3, r3
   21dd8:	001c      	movs	r4, r3
   21dda:	2380      	movs	r3, #128	; 0x80
   21ddc:	18fb      	adds	r3, r7, r3
   21dde:	681b      	ldr	r3, [r3, #0]
   21de0:	b2db      	uxtb	r3, r3
   21de2:	4876      	ldr	r0, [pc, #472]	; (21fbc <m2m_wifi_cb+0x364>)
   21de4:	9300      	str	r3, [sp, #0]
   21de6:	0023      	movs	r3, r4
   21de8:	4c73      	ldr	r4, [pc, #460]	; (21fb8 <m2m_wifi_cb+0x360>)
   21dea:	47a0      	blx	r4
   21dec:	4b74      	ldr	r3, [pc, #464]	; (21fc0 <m2m_wifi_cb+0x368>)
   21dee:	0018      	movs	r0, r3
   21df0:	4b71      	ldr	r3, [pc, #452]	; (21fb8 <m2m_wifi_cb+0x360>)
   21df2:	4798      	blx	r3
			if (gpfAppWifiCb)
   21df4:	4b6d      	ldr	r3, [pc, #436]	; (21fac <m2m_wifi_cb+0x354>)
   21df6:	681b      	ldr	r3, [r3, #0]
   21df8:	2b00      	cmp	r3, #0
   21dfa:	d100      	bne.n	21dfe <m2m_wifi_cb+0x1a6>
   21dfc:	e0f9      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   21dfe:	4b6b      	ldr	r3, [pc, #428]	; (21fac <m2m_wifi_cb+0x354>)
   21e00:	681b      	ldr	r3, [r3, #0]
   21e02:	2100      	movs	r1, #0
   21e04:	2034      	movs	r0, #52	; 0x34
   21e06:	4798      	blx	r3
}
   21e08:	e0f3      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   21e0a:	1dfb      	adds	r3, r7, #7
   21e0c:	781b      	ldrb	r3, [r3, #0]
   21e0e:	2b11      	cmp	r3, #17
   21e10:	d11e      	bne.n	21e50 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   21e12:	4b6c      	ldr	r3, [pc, #432]	; (21fc4 <m2m_wifi_cb+0x36c>)
   21e14:	2200      	movs	r2, #0
   21e16:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   21e18:	237c      	movs	r3, #124	; 0x7c
   21e1a:	18f9      	adds	r1, r7, r3
   21e1c:	6838      	ldr	r0, [r7, #0]
   21e1e:	2300      	movs	r3, #0
   21e20:	2204      	movs	r2, #4
   21e22:	4c61      	ldr	r4, [pc, #388]	; (21fa8 <m2m_wifi_cb+0x350>)
   21e24:	47a0      	blx	r4
   21e26:	1e03      	subs	r3, r0, #0
   21e28:	d000      	beq.n	21e2c <m2m_wifi_cb+0x1d4>
   21e2a:	e0e2      	b.n	21ff2 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   21e2c:	237c      	movs	r3, #124	; 0x7c
   21e2e:	18fb      	adds	r3, r7, r3
   21e30:	781a      	ldrb	r2, [r3, #0]
   21e32:	4b65      	ldr	r3, [pc, #404]	; (21fc8 <m2m_wifi_cb+0x370>)
   21e34:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   21e36:	4b5d      	ldr	r3, [pc, #372]	; (21fac <m2m_wifi_cb+0x354>)
   21e38:	681b      	ldr	r3, [r3, #0]
   21e3a:	2b00      	cmp	r3, #0
   21e3c:	d100      	bne.n	21e40 <m2m_wifi_cb+0x1e8>
   21e3e:	e0d8      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   21e40:	4b5a      	ldr	r3, [pc, #360]	; (21fac <m2m_wifi_cb+0x354>)
   21e42:	681b      	ldr	r3, [r3, #0]
   21e44:	227c      	movs	r2, #124	; 0x7c
   21e46:	18ba      	adds	r2, r7, r2
   21e48:	0011      	movs	r1, r2
   21e4a:	2011      	movs	r0, #17
   21e4c:	4798      	blx	r3
}
   21e4e:	e0d0      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   21e50:	1dfb      	adds	r3, r7, #7
   21e52:	781b      	ldrb	r3, [r3, #0]
   21e54:	2b13      	cmp	r3, #19
   21e56:	d116      	bne.n	21e86 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   21e58:	230c      	movs	r3, #12
   21e5a:	18f9      	adds	r1, r7, r3
   21e5c:	6838      	ldr	r0, [r7, #0]
   21e5e:	2300      	movs	r3, #0
   21e60:	222c      	movs	r2, #44	; 0x2c
   21e62:	4c51      	ldr	r4, [pc, #324]	; (21fa8 <m2m_wifi_cb+0x350>)
   21e64:	47a0      	blx	r4
   21e66:	1e03      	subs	r3, r0, #0
   21e68:	d000      	beq.n	21e6c <m2m_wifi_cb+0x214>
   21e6a:	e0c2      	b.n	21ff2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21e6c:	4b4f      	ldr	r3, [pc, #316]	; (21fac <m2m_wifi_cb+0x354>)
   21e6e:	681b      	ldr	r3, [r3, #0]
   21e70:	2b00      	cmp	r3, #0
   21e72:	d100      	bne.n	21e76 <m2m_wifi_cb+0x21e>
   21e74:	e0bd      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   21e76:	4b4d      	ldr	r3, [pc, #308]	; (21fac <m2m_wifi_cb+0x354>)
   21e78:	681b      	ldr	r3, [r3, #0]
   21e7a:	220c      	movs	r2, #12
   21e7c:	18ba      	adds	r2, r7, r2
   21e7e:	0011      	movs	r1, r2
   21e80:	2013      	movs	r0, #19
   21e82:	4798      	blx	r3
}
   21e84:	e0b5      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   21e86:	1dfb      	adds	r3, r7, #7
   21e88:	781b      	ldrb	r3, [r3, #0]
   21e8a:	2b04      	cmp	r3, #4
   21e8c:	d116      	bne.n	21ebc <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21e8e:	23a8      	movs	r3, #168	; 0xa8
   21e90:	18f9      	adds	r1, r7, r3
   21e92:	6838      	ldr	r0, [r7, #0]
   21e94:	2300      	movs	r3, #0
   21e96:	2204      	movs	r2, #4
   21e98:	4c43      	ldr	r4, [pc, #268]	; (21fa8 <m2m_wifi_cb+0x350>)
   21e9a:	47a0      	blx	r4
   21e9c:	1e03      	subs	r3, r0, #0
   21e9e:	d000      	beq.n	21ea2 <m2m_wifi_cb+0x24a>
   21ea0:	e0a7      	b.n	21ff2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21ea2:	4b42      	ldr	r3, [pc, #264]	; (21fac <m2m_wifi_cb+0x354>)
   21ea4:	681b      	ldr	r3, [r3, #0]
   21ea6:	2b00      	cmp	r3, #0
   21ea8:	d100      	bne.n	21eac <m2m_wifi_cb+0x254>
   21eaa:	e0a2      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   21eac:	4b3f      	ldr	r3, [pc, #252]	; (21fac <m2m_wifi_cb+0x354>)
   21eae:	681b      	ldr	r3, [r3, #0]
   21eb0:	22a8      	movs	r2, #168	; 0xa8
   21eb2:	18ba      	adds	r2, r7, r2
   21eb4:	0011      	movs	r1, r2
   21eb6:	2004      	movs	r0, #4
   21eb8:	4798      	blx	r3
}
   21eba:	e09a      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   21ebc:	1dfb      	adds	r3, r7, #7
   21ebe:	781b      	ldrb	r3, [r3, #0]
   21ec0:	2b65      	cmp	r3, #101	; 0x65
   21ec2:	d116      	bne.n	21ef2 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   21ec4:	23a8      	movs	r3, #168	; 0xa8
   21ec6:	18f9      	adds	r1, r7, r3
   21ec8:	6838      	ldr	r0, [r7, #0]
   21eca:	2300      	movs	r3, #0
   21ecc:	2204      	movs	r2, #4
   21ece:	4c36      	ldr	r4, [pc, #216]	; (21fa8 <m2m_wifi_cb+0x350>)
   21ed0:	47a0      	blx	r4
   21ed2:	1e03      	subs	r3, r0, #0
   21ed4:	d000      	beq.n	21ed8 <m2m_wifi_cb+0x280>
   21ed6:	e08c      	b.n	21ff2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   21ed8:	4b34      	ldr	r3, [pc, #208]	; (21fac <m2m_wifi_cb+0x354>)
   21eda:	681b      	ldr	r3, [r3, #0]
   21edc:	2b00      	cmp	r3, #0
   21ede:	d100      	bne.n	21ee2 <m2m_wifi_cb+0x28a>
   21ee0:	e087      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   21ee2:	4b32      	ldr	r3, [pc, #200]	; (21fac <m2m_wifi_cb+0x354>)
   21ee4:	681b      	ldr	r3, [r3, #0]
   21ee6:	22a8      	movs	r2, #168	; 0xa8
   21ee8:	18ba      	adds	r2, r7, r2
   21eea:	0011      	movs	r1, r2
   21eec:	2065      	movs	r0, #101	; 0x65
   21eee:	4798      	blx	r3
}
   21ef0:	e07f      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   21ef2:	1dfb      	adds	r3, r7, #7
   21ef4:	781b      	ldrb	r3, [r3, #0]
   21ef6:	2b09      	cmp	r3, #9
   21ef8:	d116      	bne.n	21f28 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   21efa:	230c      	movs	r3, #12
   21efc:	18f9      	adds	r1, r7, r3
   21efe:	6838      	ldr	r0, [r7, #0]
   21f00:	2301      	movs	r3, #1
   21f02:	2264      	movs	r2, #100	; 0x64
   21f04:	4c28      	ldr	r4, [pc, #160]	; (21fa8 <m2m_wifi_cb+0x350>)
   21f06:	47a0      	blx	r4
   21f08:	1e03      	subs	r3, r0, #0
   21f0a:	d000      	beq.n	21f0e <m2m_wifi_cb+0x2b6>
   21f0c:	e071      	b.n	21ff2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21f0e:	4b27      	ldr	r3, [pc, #156]	; (21fac <m2m_wifi_cb+0x354>)
   21f10:	681b      	ldr	r3, [r3, #0]
   21f12:	2b00      	cmp	r3, #0
   21f14:	d100      	bne.n	21f18 <m2m_wifi_cb+0x2c0>
   21f16:	e06c      	b.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   21f18:	4b24      	ldr	r3, [pc, #144]	; (21fac <m2m_wifi_cb+0x354>)
   21f1a:	681b      	ldr	r3, [r3, #0]
   21f1c:	220c      	movs	r2, #12
   21f1e:	18ba      	adds	r2, r7, r2
   21f20:	0011      	movs	r1, r2
   21f22:	2009      	movs	r0, #9
   21f24:	4798      	blx	r3
}
   21f26:	e064      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   21f28:	1dfb      	adds	r3, r7, #7
   21f2a:	781b      	ldrb	r3, [r3, #0]
   21f2c:	2b2a      	cmp	r3, #42	; 0x2a
   21f2e:	d114      	bne.n	21f5a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   21f30:	2378      	movs	r3, #120	; 0x78
   21f32:	18f9      	adds	r1, r7, r3
   21f34:	6838      	ldr	r0, [r7, #0]
   21f36:	2301      	movs	r3, #1
   21f38:	2204      	movs	r2, #4
   21f3a:	4c1b      	ldr	r4, [pc, #108]	; (21fa8 <m2m_wifi_cb+0x350>)
   21f3c:	47a0      	blx	r4
   21f3e:	1e03      	subs	r3, r0, #0
   21f40:	d157      	bne.n	21ff2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   21f42:	4b1a      	ldr	r3, [pc, #104]	; (21fac <m2m_wifi_cb+0x354>)
   21f44:	681b      	ldr	r3, [r3, #0]
   21f46:	2b00      	cmp	r3, #0
   21f48:	d053      	beq.n	21ff2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   21f4a:	4b18      	ldr	r3, [pc, #96]	; (21fac <m2m_wifi_cb+0x354>)
   21f4c:	681b      	ldr	r3, [r3, #0]
   21f4e:	2278      	movs	r2, #120	; 0x78
   21f50:	18ba      	adds	r2, r7, r2
   21f52:	0011      	movs	r1, r2
   21f54:	202a      	movs	r0, #42	; 0x2a
   21f56:	4798      	blx	r3
}
   21f58:	e04b      	b.n	21ff2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   21f5a:	1dfb      	adds	r3, r7, #7
   21f5c:	781b      	ldrb	r3, [r3, #0]
   21f5e:	2b20      	cmp	r3, #32
   21f60:	d134      	bne.n	21fcc <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   21f62:	2370      	movs	r3, #112	; 0x70
   21f64:	18f9      	adds	r1, r7, r3
   21f66:	6838      	ldr	r0, [r7, #0]
   21f68:	2300      	movs	r3, #0
   21f6a:	2208      	movs	r2, #8
   21f6c:	4c0e      	ldr	r4, [pc, #56]	; (21fa8 <m2m_wifi_cb+0x350>)
   21f6e:	47a0      	blx	r4
   21f70:	1e03      	subs	r3, r0, #0
   21f72:	d13e      	bne.n	21ff2 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   21f74:	683b      	ldr	r3, [r7, #0]
   21f76:	3308      	adds	r3, #8
   21f78:	0018      	movs	r0, r3
   21f7a:	2370      	movs	r3, #112	; 0x70
   21f7c:	18fb      	adds	r3, r7, r3
   21f7e:	6819      	ldr	r1, [r3, #0]
   21f80:	2370      	movs	r3, #112	; 0x70
   21f82:	18fb      	adds	r3, r7, r3
   21f84:	889a      	ldrh	r2, [r3, #4]
   21f86:	2301      	movs	r3, #1
   21f88:	4c07      	ldr	r4, [pc, #28]	; (21fa8 <m2m_wifi_cb+0x350>)
   21f8a:	47a0      	blx	r4
   21f8c:	1e03      	subs	r3, r0, #0
   21f8e:	d130      	bne.n	21ff2 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   21f90:	4b06      	ldr	r3, [pc, #24]	; (21fac <m2m_wifi_cb+0x354>)
   21f92:	681b      	ldr	r3, [r3, #0]
   21f94:	2b00      	cmp	r3, #0
   21f96:	d02c      	beq.n	21ff2 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   21f98:	4b04      	ldr	r3, [pc, #16]	; (21fac <m2m_wifi_cb+0x354>)
   21f9a:	681b      	ldr	r3, [r3, #0]
   21f9c:	2270      	movs	r2, #112	; 0x70
   21f9e:	18ba      	adds	r2, r7, r2
   21fa0:	0011      	movs	r1, r2
   21fa2:	2020      	movs	r0, #32
   21fa4:	4798      	blx	r3
}
   21fa6:	e024      	b.n	21ff2 <m2m_wifi_cb+0x39a>
   21fa8:	00021a1d 	.word	0x00021a1d
   21fac:	20003e98 	.word	0x20003e98
   21fb0:	00020ea1 	.word	0x00020ea1
   21fb4:	00038818 	.word	0x00038818
   21fb8:	0001e529 	.word	0x0001e529
   21fbc:	00038824 	.word	0x00038824
   21fc0:	00038844 	.word	0x00038844
   21fc4:	20003e95 	.word	0x20003e95
   21fc8:	20003e94 	.word	0x20003e94
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   21fcc:	2324      	movs	r3, #36	; 0x24
   21fce:	33ff      	adds	r3, #255	; 0xff
   21fd0:	001a      	movs	r2, r3
   21fd2:	490a      	ldr	r1, [pc, #40]	; (21ffc <m2m_wifi_cb+0x3a4>)
   21fd4:	4b0a      	ldr	r3, [pc, #40]	; (22000 <m2m_wifi_cb+0x3a8>)
   21fd6:	0018      	movs	r0, r3
   21fd8:	4b0a      	ldr	r3, [pc, #40]	; (22004 <m2m_wifi_cb+0x3ac>)
   21fda:	4798      	blx	r3
   21fdc:	1dfb      	adds	r3, r7, #7
   21fde:	781a      	ldrb	r2, [r3, #0]
   21fe0:	4b09      	ldr	r3, [pc, #36]	; (22008 <m2m_wifi_cb+0x3b0>)
   21fe2:	0011      	movs	r1, r2
   21fe4:	0018      	movs	r0, r3
   21fe6:	4b07      	ldr	r3, [pc, #28]	; (22004 <m2m_wifi_cb+0x3ac>)
   21fe8:	4798      	blx	r3
   21fea:	4b08      	ldr	r3, [pc, #32]	; (2200c <m2m_wifi_cb+0x3b4>)
   21fec:	0018      	movs	r0, r3
   21fee:	4b05      	ldr	r3, [pc, #20]	; (22004 <m2m_wifi_cb+0x3ac>)
   21ff0:	4798      	blx	r3
}
   21ff2:	46c0      	nop			; (mov r8, r8)
   21ff4:	46bd      	mov	sp, r7
   21ff6:	b02d      	add	sp, #180	; 0xb4
   21ff8:	bd90      	pop	{r4, r7, pc}
   21ffa:	46c0      	nop			; (mov r8, r8)
   21ffc:	00038be4 	.word	0x00038be4
   22000:	00038848 	.word	0x00038848
   22004:	0001e529 	.word	0x0001e529
   22008:	0003885c 	.word	0x0003885c
   2200c:	00038844 	.word	0x00038844

00022010 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   22010:	b590      	push	{r4, r7, lr}
   22012:	b091      	sub	sp, #68	; 0x44
   22014:	af02      	add	r7, sp, #8
   22016:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   22018:	2337      	movs	r3, #55	; 0x37
   2201a:	18fb      	adds	r3, r7, r3
   2201c:	2200      	movs	r2, #0
   2201e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   22020:	230b      	movs	r3, #11
   22022:	18fb      	adds	r3, r7, r3
   22024:	2201      	movs	r2, #1
   22026:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22028:	687b      	ldr	r3, [r7, #4]
   2202a:	2b00      	cmp	r3, #0
   2202c:	d104      	bne.n	22038 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   2202e:	2337      	movs	r3, #55	; 0x37
   22030:	18fb      	adds	r3, r7, r3
   22032:	22f4      	movs	r2, #244	; 0xf4
   22034:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22036:	e0b3      	b.n	221a0 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22038:	687b      	ldr	r3, [r7, #4]
   2203a:	681a      	ldr	r2, [r3, #0]
   2203c:	4b5c      	ldr	r3, [pc, #368]	; (221b0 <m2m_wifi_init+0x1a0>)
   2203e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   22040:	4b5c      	ldr	r3, [pc, #368]	; (221b4 <m2m_wifi_init+0x1a4>)
   22042:	2200      	movs	r2, #0
   22044:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22046:	2337      	movs	r3, #55	; 0x37
   22048:	18fc      	adds	r4, r7, r3
   2204a:	230b      	movs	r3, #11
   2204c:	18fb      	adds	r3, r7, r3
   2204e:	0018      	movs	r0, r3
   22050:	4b59      	ldr	r3, [pc, #356]	; (221b8 <m2m_wifi_init+0x1a8>)
   22052:	4798      	blx	r3
   22054:	0003      	movs	r3, r0
   22056:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22058:	2337      	movs	r3, #55	; 0x37
   2205a:	18fb      	adds	r3, r7, r3
   2205c:	781b      	ldrb	r3, [r3, #0]
   2205e:	b25b      	sxtb	r3, r3
   22060:	2b00      	cmp	r3, #0
   22062:	d000      	beq.n	22066 <m2m_wifi_init+0x56>
   22064:	e099      	b.n	2219a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22066:	2337      	movs	r3, #55	; 0x37
   22068:	18fc      	adds	r4, r7, r3
   2206a:	2000      	movs	r0, #0
   2206c:	4b53      	ldr	r3, [pc, #332]	; (221bc <m2m_wifi_init+0x1ac>)
   2206e:	4798      	blx	r3
   22070:	0003      	movs	r3, r0
   22072:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22074:	2337      	movs	r3, #55	; 0x37
   22076:	18fb      	adds	r3, r7, r3
   22078:	781b      	ldrb	r3, [r3, #0]
   2207a:	b25b      	sxtb	r3, r3
   2207c:	2b00      	cmp	r3, #0
   2207e:	d000      	beq.n	22082 <m2m_wifi_init+0x72>
   22080:	e086      	b.n	22190 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   22082:	4b4f      	ldr	r3, [pc, #316]	; (221c0 <m2m_wifi_init+0x1b0>)
   22084:	0019      	movs	r1, r3
   22086:	2001      	movs	r0, #1
   22088:	4b4e      	ldr	r3, [pc, #312]	; (221c4 <m2m_wifi_init+0x1b4>)
   2208a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   2208c:	2337      	movs	r3, #55	; 0x37
   2208e:	18fc      	adds	r4, r7, r3
   22090:	230c      	movs	r3, #12
   22092:	18fb      	adds	r3, r7, r3
   22094:	0018      	movs	r0, r3
   22096:	4b4c      	ldr	r3, [pc, #304]	; (221c8 <m2m_wifi_init+0x1b8>)
   22098:	4798      	blx	r3
   2209a:	0003      	movs	r3, r0
   2209c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   2209e:	4b4b      	ldr	r3, [pc, #300]	; (221cc <m2m_wifi_init+0x1bc>)
   220a0:	0018      	movs	r0, r3
   220a2:	4b4b      	ldr	r3, [pc, #300]	; (221d0 <m2m_wifi_init+0x1c0>)
   220a4:	4798      	blx	r3
   220a6:	230c      	movs	r3, #12
   220a8:	18fb      	adds	r3, r7, r3
   220aa:	791b      	ldrb	r3, [r3, #4]
   220ac:	0019      	movs	r1, r3
   220ae:	230c      	movs	r3, #12
   220b0:	18fb      	adds	r3, r7, r3
   220b2:	795b      	ldrb	r3, [r3, #5]
   220b4:	001a      	movs	r2, r3
   220b6:	230c      	movs	r3, #12
   220b8:	18fb      	adds	r3, r7, r3
   220ba:	799b      	ldrb	r3, [r3, #6]
   220bc:	001c      	movs	r4, r3
   220be:	230c      	movs	r3, #12
   220c0:	18fb      	adds	r3, r7, r3
   220c2:	8c1b      	ldrh	r3, [r3, #32]
   220c4:	4843      	ldr	r0, [pc, #268]	; (221d4 <m2m_wifi_init+0x1c4>)
   220c6:	9300      	str	r3, [sp, #0]
   220c8:	0023      	movs	r3, r4
   220ca:	4c41      	ldr	r4, [pc, #260]	; (221d0 <m2m_wifi_init+0x1c0>)
   220cc:	47a0      	blx	r4
   220ce:	4b42      	ldr	r3, [pc, #264]	; (221d8 <m2m_wifi_init+0x1c8>)
   220d0:	0018      	movs	r0, r3
   220d2:	4b3f      	ldr	r3, [pc, #252]	; (221d0 <m2m_wifi_init+0x1c0>)
   220d4:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   220d6:	4b3d      	ldr	r3, [pc, #244]	; (221cc <m2m_wifi_init+0x1bc>)
   220d8:	0018      	movs	r0, r3
   220da:	4b3d      	ldr	r3, [pc, #244]	; (221d0 <m2m_wifi_init+0x1c0>)
   220dc:	4798      	blx	r3
   220de:	230c      	movs	r3, #12
   220e0:	18fb      	adds	r3, r7, r3
   220e2:	3316      	adds	r3, #22
   220e4:	001a      	movs	r2, r3
   220e6:	230c      	movs	r3, #12
   220e8:	18fb      	adds	r3, r7, r3
   220ea:	330a      	adds	r3, #10
   220ec:	0019      	movs	r1, r3
   220ee:	4b3b      	ldr	r3, [pc, #236]	; (221dc <m2m_wifi_init+0x1cc>)
   220f0:	0018      	movs	r0, r3
   220f2:	4b37      	ldr	r3, [pc, #220]	; (221d0 <m2m_wifi_init+0x1c0>)
   220f4:	4798      	blx	r3
   220f6:	4b38      	ldr	r3, [pc, #224]	; (221d8 <m2m_wifi_init+0x1c8>)
   220f8:	0018      	movs	r0, r3
   220fa:	4b35      	ldr	r3, [pc, #212]	; (221d0 <m2m_wifi_init+0x1c0>)
   220fc:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   220fe:	4b33      	ldr	r3, [pc, #204]	; (221cc <m2m_wifi_init+0x1bc>)
   22100:	0018      	movs	r0, r3
   22102:	4b33      	ldr	r3, [pc, #204]	; (221d0 <m2m_wifi_init+0x1c0>)
   22104:	4798      	blx	r3
   22106:	230c      	movs	r3, #12
   22108:	18fb      	adds	r3, r7, r3
   2210a:	79db      	ldrb	r3, [r3, #7]
   2210c:	0019      	movs	r1, r3
   2210e:	230c      	movs	r3, #12
   22110:	18fb      	adds	r3, r7, r3
   22112:	7a1b      	ldrb	r3, [r3, #8]
   22114:	001a      	movs	r2, r3
   22116:	230c      	movs	r3, #12
   22118:	18fb      	adds	r3, r7, r3
   2211a:	7a5b      	ldrb	r3, [r3, #9]
   2211c:	4830      	ldr	r0, [pc, #192]	; (221e0 <m2m_wifi_init+0x1d0>)
   2211e:	4c2c      	ldr	r4, [pc, #176]	; (221d0 <m2m_wifi_init+0x1c0>)
   22120:	47a0      	blx	r4
   22122:	4b2d      	ldr	r3, [pc, #180]	; (221d8 <m2m_wifi_init+0x1c8>)
   22124:	0018      	movs	r0, r3
   22126:	4b2a      	ldr	r3, [pc, #168]	; (221d0 <m2m_wifi_init+0x1c0>)
   22128:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   2212a:	4b28      	ldr	r3, [pc, #160]	; (221cc <m2m_wifi_init+0x1bc>)
   2212c:	0018      	movs	r0, r3
   2212e:	4b28      	ldr	r3, [pc, #160]	; (221d0 <m2m_wifi_init+0x1c0>)
   22130:	4798      	blx	r3
   22132:	482c      	ldr	r0, [pc, #176]	; (221e4 <m2m_wifi_init+0x1d4>)
   22134:	2304      	movs	r3, #4
   22136:	2205      	movs	r2, #5
   22138:	2113      	movs	r1, #19
   2213a:	4c25      	ldr	r4, [pc, #148]	; (221d0 <m2m_wifi_init+0x1c0>)
   2213c:	47a0      	blx	r4
   2213e:	4b26      	ldr	r3, [pc, #152]	; (221d8 <m2m_wifi_init+0x1c8>)
   22140:	0018      	movs	r0, r3
   22142:	4b23      	ldr	r3, [pc, #140]	; (221d0 <m2m_wifi_init+0x1c0>)
   22144:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   22146:	4b21      	ldr	r3, [pc, #132]	; (221cc <m2m_wifi_init+0x1bc>)
   22148:	0018      	movs	r0, r3
   2214a:	4b21      	ldr	r3, [pc, #132]	; (221d0 <m2m_wifi_init+0x1c0>)
   2214c:	4798      	blx	r3
   2214e:	4a26      	ldr	r2, [pc, #152]	; (221e8 <m2m_wifi_init+0x1d8>)
   22150:	4926      	ldr	r1, [pc, #152]	; (221ec <m2m_wifi_init+0x1dc>)
   22152:	4b27      	ldr	r3, [pc, #156]	; (221f0 <m2m_wifi_init+0x1e0>)
   22154:	0018      	movs	r0, r3
   22156:	4b1e      	ldr	r3, [pc, #120]	; (221d0 <m2m_wifi_init+0x1c0>)
   22158:	4798      	blx	r3
   2215a:	4b1f      	ldr	r3, [pc, #124]	; (221d8 <m2m_wifi_init+0x1c8>)
   2215c:	0018      	movs	r0, r3
   2215e:	4b1c      	ldr	r3, [pc, #112]	; (221d0 <m2m_wifi_init+0x1c0>)
   22160:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   22162:	2337      	movs	r3, #55	; 0x37
   22164:	18fb      	adds	r3, r7, r3
   22166:	781b      	ldrb	r3, [r3, #0]
   22168:	b25b      	sxtb	r3, r3
   2216a:	330d      	adds	r3, #13
   2216c:	d117      	bne.n	2219e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   2216e:	23e8      	movs	r3, #232	; 0xe8
   22170:	33ff      	adds	r3, #255	; 0xff
   22172:	001a      	movs	r2, r3
   22174:	491f      	ldr	r1, [pc, #124]	; (221f4 <m2m_wifi_init+0x1e4>)
   22176:	4b20      	ldr	r3, [pc, #128]	; (221f8 <m2m_wifi_init+0x1e8>)
   22178:	0018      	movs	r0, r3
   2217a:	4b15      	ldr	r3, [pc, #84]	; (221d0 <m2m_wifi_init+0x1c0>)
   2217c:	4798      	blx	r3
   2217e:	4b1f      	ldr	r3, [pc, #124]	; (221fc <m2m_wifi_init+0x1ec>)
   22180:	0018      	movs	r0, r3
   22182:	4b13      	ldr	r3, [pc, #76]	; (221d0 <m2m_wifi_init+0x1c0>)
   22184:	4798      	blx	r3
   22186:	4b14      	ldr	r3, [pc, #80]	; (221d8 <m2m_wifi_init+0x1c8>)
   22188:	0018      	movs	r0, r3
   2218a:	4b11      	ldr	r3, [pc, #68]	; (221d0 <m2m_wifi_init+0x1c0>)
   2218c:	4798      	blx	r3
	}

	goto _EXIT0;
   2218e:	e006      	b.n	2219e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22190:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22192:	2000      	movs	r0, #0
   22194:	4b1a      	ldr	r3, [pc, #104]	; (22200 <m2m_wifi_init+0x1f0>)
   22196:	4798      	blx	r3
   22198:	e002      	b.n	221a0 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   2219a:	46c0      	nop			; (mov r8, r8)
   2219c:	e000      	b.n	221a0 <m2m_wifi_init+0x190>
	goto _EXIT0;
   2219e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   221a0:	2337      	movs	r3, #55	; 0x37
   221a2:	18fb      	adds	r3, r7, r3
   221a4:	781b      	ldrb	r3, [r3, #0]
   221a6:	b25b      	sxtb	r3, r3
}
   221a8:	0018      	movs	r0, r3
   221aa:	46bd      	mov	sp, r7
   221ac:	b00f      	add	sp, #60	; 0x3c
   221ae:	bd90      	pop	{r4, r7, pc}
   221b0:	20003e98 	.word	0x20003e98
   221b4:	20003e95 	.word	0x20003e95
   221b8:	00023335 	.word	0x00023335
   221bc:	000210b9 	.word	0x000210b9
   221c0:	00021c59 	.word	0x00021c59
   221c4:	00021b9d 	.word	0x00021b9d
   221c8:	00023169 	.word	0x00023169
   221cc:	00038818 	.word	0x00038818
   221d0:	0001e529 	.word	0x0001e529
   221d4:	000389bc 	.word	0x000389bc
   221d8:	00038844 	.word	0x00038844
   221dc:	000389e4 	.word	0x000389e4
   221e0:	00038a00 	.word	0x00038a00
   221e4:	00038a24 	.word	0x00038a24
   221e8:	00038a3c 	.word	0x00038a3c
   221ec:	00038a48 	.word	0x00038a48
   221f0:	00038a54 	.word	0x00038a54
   221f4:	00038bf0 	.word	0x00038bf0
   221f8:	00038848 	.word	0x00038848
   221fc:	00038a6c 	.word	0x00038a6c
   22200:	000234c5 	.word	0x000234c5

00022204 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22204:	b580      	push	{r7, lr}
   22206:	b082      	sub	sp, #8
   22208:	af00      	add	r7, sp, #0
   2220a:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   2220c:	4b03      	ldr	r3, [pc, #12]	; (2221c <m2m_wifi_handle_events+0x18>)
   2220e:	4798      	blx	r3
   22210:	0003      	movs	r3, r0
}
   22212:	0018      	movs	r0, r3
   22214:	46bd      	mov	sp, r7
   22216:	b002      	add	sp, #8
   22218:	bd80      	pop	{r7, pc}
   2221a:	46c0      	nop			; (mov r8, r8)
   2221c:	0002197d 	.word	0x0002197d

00022220 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22220:	b590      	push	{r4, r7, lr}
   22222:	b087      	sub	sp, #28
   22224:	af02      	add	r7, sp, #8
   22226:	60f8      	str	r0, [r7, #12]
   22228:	0008      	movs	r0, r1
   2222a:	0011      	movs	r1, r2
   2222c:	607b      	str	r3, [r7, #4]
   2222e:	230b      	movs	r3, #11
   22230:	18fb      	adds	r3, r7, r3
   22232:	1c02      	adds	r2, r0, #0
   22234:	701a      	strb	r2, [r3, #0]
   22236:	230a      	movs	r3, #10
   22238:	18fb      	adds	r3, r7, r3
   2223a:	1c0a      	adds	r2, r1, #0
   2223c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   2223e:	687c      	ldr	r4, [r7, #4]
   22240:	230a      	movs	r3, #10
   22242:	18fb      	adds	r3, r7, r3
   22244:	781a      	ldrb	r2, [r3, #0]
   22246:	230b      	movs	r3, #11
   22248:	18fb      	adds	r3, r7, r3
   2224a:	7819      	ldrb	r1, [r3, #0]
   2224c:	68f8      	ldr	r0, [r7, #12]
   2224e:	2300      	movs	r3, #0
   22250:	9301      	str	r3, [sp, #4]
   22252:	2320      	movs	r3, #32
   22254:	18fb      	adds	r3, r7, r3
   22256:	881b      	ldrh	r3, [r3, #0]
   22258:	9300      	str	r3, [sp, #0]
   2225a:	0023      	movs	r3, r4
   2225c:	4c03      	ldr	r4, [pc, #12]	; (2226c <m2m_wifi_connect+0x4c>)
   2225e:	47a0      	blx	r4
   22260:	0003      	movs	r3, r0
}
   22262:	0018      	movs	r0, r3
   22264:	46bd      	mov	sp, r7
   22266:	b005      	add	sp, #20
   22268:	bd90      	pop	{r4, r7, pc}
   2226a:	46c0      	nop			; (mov r8, r8)
   2226c:	00022271 	.word	0x00022271

00022270 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22270:	b5b0      	push	{r4, r5, r7, lr}
   22272:	b0aa      	sub	sp, #168	; 0xa8
   22274:	af04      	add	r7, sp, #16
   22276:	60f8      	str	r0, [r7, #12]
   22278:	0008      	movs	r0, r1
   2227a:	0011      	movs	r1, r2
   2227c:	607b      	str	r3, [r7, #4]
   2227e:	230b      	movs	r3, #11
   22280:	18fb      	adds	r3, r7, r3
   22282:	1c02      	adds	r2, r0, #0
   22284:	701a      	strb	r2, [r3, #0]
   22286:	230a      	movs	r3, #10
   22288:	18fb      	adds	r3, r7, r3
   2228a:	1c0a      	adds	r2, r1, #0
   2228c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   2228e:	2397      	movs	r3, #151	; 0x97
   22290:	18fb      	adds	r3, r7, r3
   22292:	2200      	movs	r2, #0
   22294:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22296:	230a      	movs	r3, #10
   22298:	18fb      	adds	r3, r7, r3
   2229a:	781b      	ldrb	r3, [r3, #0]
   2229c:	2b01      	cmp	r3, #1
   2229e:	d100      	bne.n	222a2 <m2m_wifi_connect_sc+0x32>
   222a0:	e085      	b.n	223ae <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   222a2:	687b      	ldr	r3, [r7, #4]
   222a4:	2b00      	cmp	r3, #0
   222a6:	d112      	bne.n	222ce <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   222a8:	4ad8      	ldr	r2, [pc, #864]	; (2260c <m2m_wifi_connect_sc+0x39c>)
   222aa:	49d9      	ldr	r1, [pc, #868]	; (22610 <m2m_wifi_connect_sc+0x3a0>)
   222ac:	4bd9      	ldr	r3, [pc, #868]	; (22614 <m2m_wifi_connect_sc+0x3a4>)
   222ae:	0018      	movs	r0, r3
   222b0:	4bd9      	ldr	r3, [pc, #868]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   222b2:	4798      	blx	r3
   222b4:	4bd9      	ldr	r3, [pc, #868]	; (2261c <m2m_wifi_connect_sc+0x3ac>)
   222b6:	0018      	movs	r0, r3
   222b8:	4bd7      	ldr	r3, [pc, #860]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   222ba:	4798      	blx	r3
   222bc:	4bd8      	ldr	r3, [pc, #864]	; (22620 <m2m_wifi_connect_sc+0x3b0>)
   222be:	0018      	movs	r0, r3
   222c0:	4bd5      	ldr	r3, [pc, #852]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   222c2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   222c4:	2397      	movs	r3, #151	; 0x97
   222c6:	18fb      	adds	r3, r7, r3
   222c8:	22f4      	movs	r2, #244	; 0xf4
   222ca:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   222cc:	e1f9      	b.n	226c2 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   222ce:	230a      	movs	r3, #10
   222d0:	18fb      	adds	r3, r7, r3
   222d2:	781b      	ldrb	r3, [r3, #0]
   222d4:	2b02      	cmp	r3, #2
   222d6:	d16a      	bne.n	223ae <m2m_wifi_connect_sc+0x13e>
   222d8:	687b      	ldr	r3, [r7, #4]
   222da:	0018      	movs	r0, r3
   222dc:	4bd1      	ldr	r3, [pc, #836]	; (22624 <m2m_wifi_connect_sc+0x3b4>)
   222de:	4798      	blx	r3
   222e0:	0003      	movs	r3, r0
   222e2:	2b40      	cmp	r3, #64	; 0x40
   222e4:	d163      	bne.n	223ae <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   222e6:	2396      	movs	r3, #150	; 0x96
   222e8:	18fb      	adds	r3, r7, r3
   222ea:	2200      	movs	r2, #0
   222ec:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   222ee:	687b      	ldr	r3, [r7, #4]
   222f0:	2290      	movs	r2, #144	; 0x90
   222f2:	18ba      	adds	r2, r7, r2
   222f4:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   222f6:	e055      	b.n	223a4 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   222f8:	2396      	movs	r3, #150	; 0x96
   222fa:	18fb      	adds	r3, r7, r3
   222fc:	781b      	ldrb	r3, [r3, #0]
   222fe:	2290      	movs	r2, #144	; 0x90
   22300:	18ba      	adds	r2, r7, r2
   22302:	6812      	ldr	r2, [r2, #0]
   22304:	18d3      	adds	r3, r2, r3
   22306:	781b      	ldrb	r3, [r3, #0]
   22308:	2b2f      	cmp	r3, #47	; 0x2f
   2230a:	d931      	bls.n	22370 <m2m_wifi_connect_sc+0x100>
   2230c:	2396      	movs	r3, #150	; 0x96
   2230e:	18fb      	adds	r3, r7, r3
   22310:	781b      	ldrb	r3, [r3, #0]
   22312:	2290      	movs	r2, #144	; 0x90
   22314:	18ba      	adds	r2, r7, r2
   22316:	6812      	ldr	r2, [r2, #0]
   22318:	18d3      	adds	r3, r2, r3
   2231a:	781b      	ldrb	r3, [r3, #0]
   2231c:	2b39      	cmp	r3, #57	; 0x39
   2231e:	d909      	bls.n	22334 <m2m_wifi_connect_sc+0xc4>
   22320:	2396      	movs	r3, #150	; 0x96
   22322:	18fb      	adds	r3, r7, r3
   22324:	781b      	ldrb	r3, [r3, #0]
   22326:	2290      	movs	r2, #144	; 0x90
   22328:	18ba      	adds	r2, r7, r2
   2232a:	6812      	ldr	r2, [r2, #0]
   2232c:	18d3      	adds	r3, r2, r3
   2232e:	781b      	ldrb	r3, [r3, #0]
   22330:	2b40      	cmp	r3, #64	; 0x40
   22332:	d91d      	bls.n	22370 <m2m_wifi_connect_sc+0x100>
   22334:	2396      	movs	r3, #150	; 0x96
   22336:	18fb      	adds	r3, r7, r3
   22338:	781b      	ldrb	r3, [r3, #0]
   2233a:	2290      	movs	r2, #144	; 0x90
   2233c:	18ba      	adds	r2, r7, r2
   2233e:	6812      	ldr	r2, [r2, #0]
   22340:	18d3      	adds	r3, r2, r3
   22342:	781b      	ldrb	r3, [r3, #0]
   22344:	2b46      	cmp	r3, #70	; 0x46
   22346:	d909      	bls.n	2235c <m2m_wifi_connect_sc+0xec>
   22348:	2396      	movs	r3, #150	; 0x96
   2234a:	18fb      	adds	r3, r7, r3
   2234c:	781b      	ldrb	r3, [r3, #0]
   2234e:	2290      	movs	r2, #144	; 0x90
   22350:	18ba      	adds	r2, r7, r2
   22352:	6812      	ldr	r2, [r2, #0]
   22354:	18d3      	adds	r3, r2, r3
   22356:	781b      	ldrb	r3, [r3, #0]
   22358:	2b60      	cmp	r3, #96	; 0x60
   2235a:	d909      	bls.n	22370 <m2m_wifi_connect_sc+0x100>
   2235c:	2396      	movs	r3, #150	; 0x96
   2235e:	18fb      	adds	r3, r7, r3
   22360:	781b      	ldrb	r3, [r3, #0]
   22362:	2290      	movs	r2, #144	; 0x90
   22364:	18ba      	adds	r2, r7, r2
   22366:	6812      	ldr	r2, [r2, #0]
   22368:	18d3      	adds	r3, r2, r3
   2236a:	781b      	ldrb	r3, [r3, #0]
   2236c:	2b66      	cmp	r3, #102	; 0x66
   2236e:	d912      	bls.n	22396 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22370:	4aad      	ldr	r2, [pc, #692]	; (22628 <m2m_wifi_connect_sc+0x3b8>)
   22372:	49a7      	ldr	r1, [pc, #668]	; (22610 <m2m_wifi_connect_sc+0x3a0>)
   22374:	4ba7      	ldr	r3, [pc, #668]	; (22614 <m2m_wifi_connect_sc+0x3a4>)
   22376:	0018      	movs	r0, r3
   22378:	4ba7      	ldr	r3, [pc, #668]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   2237a:	4798      	blx	r3
   2237c:	4bab      	ldr	r3, [pc, #684]	; (2262c <m2m_wifi_connect_sc+0x3bc>)
   2237e:	0018      	movs	r0, r3
   22380:	4ba5      	ldr	r3, [pc, #660]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   22382:	4798      	blx	r3
   22384:	4ba6      	ldr	r3, [pc, #664]	; (22620 <m2m_wifi_connect_sc+0x3b0>)
   22386:	0018      	movs	r0, r3
   22388:	4ba3      	ldr	r3, [pc, #652]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   2238a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   2238c:	2397      	movs	r3, #151	; 0x97
   2238e:	18fb      	adds	r3, r7, r3
   22390:	22f4      	movs	r2, #244	; 0xf4
   22392:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22394:	e195      	b.n	226c2 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22396:	2396      	movs	r3, #150	; 0x96
   22398:	18fb      	adds	r3, r7, r3
   2239a:	781a      	ldrb	r2, [r3, #0]
   2239c:	2396      	movs	r3, #150	; 0x96
   2239e:	18fb      	adds	r3, r7, r3
   223a0:	3201      	adds	r2, #1
   223a2:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   223a4:	2396      	movs	r3, #150	; 0x96
   223a6:	18fb      	adds	r3, r7, r3
   223a8:	781b      	ldrb	r3, [r3, #0]
   223aa:	2b3f      	cmp	r3, #63	; 0x3f
   223ac:	d9a4      	bls.n	222f8 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   223ae:	230b      	movs	r3, #11
   223b0:	18fb      	adds	r3, r7, r3
   223b2:	781b      	ldrb	r3, [r3, #0]
   223b4:	2b00      	cmp	r3, #0
   223b6:	d004      	beq.n	223c2 <m2m_wifi_connect_sc+0x152>
   223b8:	230b      	movs	r3, #11
   223ba:	18fb      	adds	r3, r7, r3
   223bc:	781b      	ldrb	r3, [r3, #0]
   223be:	2b20      	cmp	r3, #32
   223c0:	d913      	bls.n	223ea <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   223c2:	238c      	movs	r3, #140	; 0x8c
   223c4:	009a      	lsls	r2, r3, #2
   223c6:	4992      	ldr	r1, [pc, #584]	; (22610 <m2m_wifi_connect_sc+0x3a0>)
   223c8:	4b92      	ldr	r3, [pc, #584]	; (22614 <m2m_wifi_connect_sc+0x3a4>)
   223ca:	0018      	movs	r0, r3
   223cc:	4b92      	ldr	r3, [pc, #584]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   223ce:	4798      	blx	r3
   223d0:	4b97      	ldr	r3, [pc, #604]	; (22630 <m2m_wifi_connect_sc+0x3c0>)
   223d2:	0018      	movs	r0, r3
   223d4:	4b90      	ldr	r3, [pc, #576]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   223d6:	4798      	blx	r3
   223d8:	4b91      	ldr	r3, [pc, #580]	; (22620 <m2m_wifi_connect_sc+0x3b0>)
   223da:	0018      	movs	r0, r3
   223dc:	4b8e      	ldr	r3, [pc, #568]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   223de:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   223e0:	2397      	movs	r3, #151	; 0x97
   223e2:	18fb      	adds	r3, r7, r3
   223e4:	22f4      	movs	r2, #244	; 0xf4
   223e6:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   223e8:	e16b      	b.n	226c2 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   223ea:	23a8      	movs	r3, #168	; 0xa8
   223ec:	18fb      	adds	r3, r7, r3
   223ee:	881b      	ldrh	r3, [r3, #0]
   223f0:	2b00      	cmp	r3, #0
   223f2:	d004      	beq.n	223fe <m2m_wifi_connect_sc+0x18e>
   223f4:	23a8      	movs	r3, #168	; 0xa8
   223f6:	18fb      	adds	r3, r7, r3
   223f8:	881b      	ldrh	r3, [r3, #0]
   223fa:	2b0e      	cmp	r3, #14
   223fc:	d917      	bls.n	2242e <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   223fe:	23a8      	movs	r3, #168	; 0xa8
   22400:	18fb      	adds	r3, r7, r3
   22402:	881b      	ldrh	r3, [r3, #0]
   22404:	2bff      	cmp	r3, #255	; 0xff
   22406:	d012      	beq.n	2242e <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   22408:	4a8a      	ldr	r2, [pc, #552]	; (22634 <m2m_wifi_connect_sc+0x3c4>)
   2240a:	4981      	ldr	r1, [pc, #516]	; (22610 <m2m_wifi_connect_sc+0x3a0>)
   2240c:	4b81      	ldr	r3, [pc, #516]	; (22614 <m2m_wifi_connect_sc+0x3a4>)
   2240e:	0018      	movs	r0, r3
   22410:	4b81      	ldr	r3, [pc, #516]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   22412:	4798      	blx	r3
   22414:	4b88      	ldr	r3, [pc, #544]	; (22638 <m2m_wifi_connect_sc+0x3c8>)
   22416:	0018      	movs	r0, r3
   22418:	4b7f      	ldr	r3, [pc, #508]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   2241a:	4798      	blx	r3
   2241c:	4b80      	ldr	r3, [pc, #512]	; (22620 <m2m_wifi_connect_sc+0x3b0>)
   2241e:	0018      	movs	r0, r3
   22420:	4b7d      	ldr	r3, [pc, #500]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   22422:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22424:	2397      	movs	r3, #151	; 0x97
   22426:	18fb      	adds	r3, r7, r3
   22428:	22f4      	movs	r2, #244	; 0xf4
   2242a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2242c:	e149      	b.n	226c2 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   2242e:	230b      	movs	r3, #11
   22430:	18fb      	adds	r3, r7, r3
   22432:	781a      	ldrb	r2, [r3, #0]
   22434:	68f9      	ldr	r1, [r7, #12]
   22436:	2314      	movs	r3, #20
   22438:	18fb      	adds	r3, r7, r3
   2243a:	3346      	adds	r3, #70	; 0x46
   2243c:	0018      	movs	r0, r3
   2243e:	4b7f      	ldr	r3, [pc, #508]	; (2263c <m2m_wifi_connect_sc+0x3cc>)
   22440:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22442:	230b      	movs	r3, #11
   22444:	18fb      	adds	r3, r7, r3
   22446:	781b      	ldrb	r3, [r3, #0]
   22448:	2214      	movs	r2, #20
   2244a:	18ba      	adds	r2, r7, r2
   2244c:	2146      	movs	r1, #70	; 0x46
   2244e:	18d3      	adds	r3, r2, r3
   22450:	185b      	adds	r3, r3, r1
   22452:	2200      	movs	r2, #0
   22454:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   22456:	2314      	movs	r3, #20
   22458:	18fb      	adds	r3, r7, r3
   2245a:	22a8      	movs	r2, #168	; 0xa8
   2245c:	18ba      	adds	r2, r7, r2
   2245e:	2144      	movs	r1, #68	; 0x44
   22460:	8812      	ldrh	r2, [r2, #0]
   22462:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22464:	23ac      	movs	r3, #172	; 0xac
   22466:	18fb      	adds	r3, r7, r3
   22468:	781b      	ldrb	r3, [r3, #0]
   2246a:	1e5a      	subs	r2, r3, #1
   2246c:	4193      	sbcs	r3, r2
   2246e:	b2db      	uxtb	r3, r3
   22470:	0019      	movs	r1, r3
   22472:	2314      	movs	r3, #20
   22474:	18fb      	adds	r3, r7, r3
   22476:	2267      	movs	r2, #103	; 0x67
   22478:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   2247a:	2314      	movs	r3, #20
   2247c:	18fb      	adds	r3, r7, r3
   2247e:	228c      	movs	r2, #140	; 0x8c
   22480:	18ba      	adds	r2, r7, r2
   22482:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22484:	238c      	movs	r3, #140	; 0x8c
   22486:	18fb      	adds	r3, r7, r3
   22488:	681b      	ldr	r3, [r3, #0]
   2248a:	220a      	movs	r2, #10
   2248c:	18ba      	adds	r2, r7, r2
   2248e:	2141      	movs	r1, #65	; 0x41
   22490:	7812      	ldrb	r2, [r2, #0]
   22492:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22494:	230a      	movs	r3, #10
   22496:	18fb      	adds	r3, r7, r3
   22498:	781b      	ldrb	r3, [r3, #0]
   2249a:	2b03      	cmp	r3, #3
   2249c:	d000      	beq.n	224a0 <m2m_wifi_connect_sc+0x230>
   2249e:	e07d      	b.n	2259c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   224a0:	687b      	ldr	r3, [r7, #4]
   224a2:	2288      	movs	r2, #136	; 0x88
   224a4:	18ba      	adds	r2, r7, r2
   224a6:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   224a8:	238c      	movs	r3, #140	; 0x8c
   224aa:	18fb      	adds	r3, r7, r3
   224ac:	681b      	ldr	r3, [r3, #0]
   224ae:	2284      	movs	r2, #132	; 0x84
   224b0:	18ba      	adds	r2, r7, r2
   224b2:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   224b4:	2388      	movs	r3, #136	; 0x88
   224b6:	18fb      	adds	r3, r7, r3
   224b8:	681b      	ldr	r3, [r3, #0]
   224ba:	781b      	ldrb	r3, [r3, #0]
   224bc:	3b01      	subs	r3, #1
   224be:	b2da      	uxtb	r2, r3
   224c0:	2384      	movs	r3, #132	; 0x84
   224c2:	18fb      	adds	r3, r7, r3
   224c4:	681b      	ldr	r3, [r3, #0]
   224c6:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   224c8:	2384      	movs	r3, #132	; 0x84
   224ca:	18fb      	adds	r3, r7, r3
   224cc:	681b      	ldr	r3, [r3, #0]
   224ce:	781b      	ldrb	r3, [r3, #0]
   224d0:	2b03      	cmp	r3, #3
   224d2:	d919      	bls.n	22508 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   224d4:	2394      	movs	r3, #148	; 0x94
   224d6:	009a      	lsls	r2, r3, #2
   224d8:	494d      	ldr	r1, [pc, #308]	; (22610 <m2m_wifi_connect_sc+0x3a0>)
   224da:	4b4e      	ldr	r3, [pc, #312]	; (22614 <m2m_wifi_connect_sc+0x3a4>)
   224dc:	0018      	movs	r0, r3
   224de:	4b4e      	ldr	r3, [pc, #312]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   224e0:	4798      	blx	r3
   224e2:	2384      	movs	r3, #132	; 0x84
   224e4:	18fb      	adds	r3, r7, r3
   224e6:	681b      	ldr	r3, [r3, #0]
   224e8:	781b      	ldrb	r3, [r3, #0]
   224ea:	001a      	movs	r2, r3
   224ec:	4b54      	ldr	r3, [pc, #336]	; (22640 <m2m_wifi_connect_sc+0x3d0>)
   224ee:	0011      	movs	r1, r2
   224f0:	0018      	movs	r0, r3
   224f2:	4b49      	ldr	r3, [pc, #292]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   224f4:	4798      	blx	r3
   224f6:	4b4a      	ldr	r3, [pc, #296]	; (22620 <m2m_wifi_connect_sc+0x3b0>)
   224f8:	0018      	movs	r0, r3
   224fa:	4b47      	ldr	r3, [pc, #284]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   224fc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   224fe:	2397      	movs	r3, #151	; 0x97
   22500:	18fb      	adds	r3, r7, r3
   22502:	22f4      	movs	r2, #244	; 0xf4
   22504:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22506:	e0dc      	b.n	226c2 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   22508:	2388      	movs	r3, #136	; 0x88
   2250a:	18fb      	adds	r3, r7, r3
   2250c:	681b      	ldr	r3, [r3, #0]
   2250e:	785b      	ldrb	r3, [r3, #1]
   22510:	3b01      	subs	r3, #1
   22512:	b2da      	uxtb	r2, r3
   22514:	2384      	movs	r3, #132	; 0x84
   22516:	18fb      	adds	r3, r7, r3
   22518:	681b      	ldr	r3, [r3, #0]
   2251a:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   2251c:	2384      	movs	r3, #132	; 0x84
   2251e:	18fb      	adds	r3, r7, r3
   22520:	681b      	ldr	r3, [r3, #0]
   22522:	785b      	ldrb	r3, [r3, #1]
   22524:	2b0a      	cmp	r3, #10
   22526:	d01e      	beq.n	22566 <m2m_wifi_connect_sc+0x2f6>
   22528:	2384      	movs	r3, #132	; 0x84
   2252a:	18fb      	adds	r3, r7, r3
   2252c:	681b      	ldr	r3, [r3, #0]
   2252e:	785b      	ldrb	r3, [r3, #1]
   22530:	2b1a      	cmp	r3, #26
   22532:	d018      	beq.n	22566 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22534:	4a43      	ldr	r2, [pc, #268]	; (22644 <m2m_wifi_connect_sc+0x3d4>)
   22536:	4936      	ldr	r1, [pc, #216]	; (22610 <m2m_wifi_connect_sc+0x3a0>)
   22538:	4b36      	ldr	r3, [pc, #216]	; (22614 <m2m_wifi_connect_sc+0x3a4>)
   2253a:	0018      	movs	r0, r3
   2253c:	4b36      	ldr	r3, [pc, #216]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   2253e:	4798      	blx	r3
   22540:	2384      	movs	r3, #132	; 0x84
   22542:	18fb      	adds	r3, r7, r3
   22544:	681b      	ldr	r3, [r3, #0]
   22546:	785b      	ldrb	r3, [r3, #1]
   22548:	001a      	movs	r2, r3
   2254a:	4b3f      	ldr	r3, [pc, #252]	; (22648 <m2m_wifi_connect_sc+0x3d8>)
   2254c:	0011      	movs	r1, r2
   2254e:	0018      	movs	r0, r3
   22550:	4b31      	ldr	r3, [pc, #196]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   22552:	4798      	blx	r3
   22554:	4b32      	ldr	r3, [pc, #200]	; (22620 <m2m_wifi_connect_sc+0x3b0>)
   22556:	0018      	movs	r0, r3
   22558:	4b2f      	ldr	r3, [pc, #188]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   2255a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2255c:	2397      	movs	r3, #151	; 0x97
   2255e:	18fb      	adds	r3, r7, r3
   22560:	22f4      	movs	r2, #244	; 0xf4
   22562:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22564:	e0ad      	b.n	226c2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22566:	2384      	movs	r3, #132	; 0x84
   22568:	18fb      	adds	r3, r7, r3
   2256a:	681b      	ldr	r3, [r3, #0]
   2256c:	1c98      	adds	r0, r3, #2
   2256e:	2388      	movs	r3, #136	; 0x88
   22570:	18fb      	adds	r3, r7, r3
   22572:	681b      	ldr	r3, [r3, #0]
   22574:	1c99      	adds	r1, r3, #2
   22576:	2388      	movs	r3, #136	; 0x88
   22578:	18fb      	adds	r3, r7, r3
   2257a:	681b      	ldr	r3, [r3, #0]
   2257c:	785b      	ldrb	r3, [r3, #1]
   2257e:	001a      	movs	r2, r3
   22580:	4b2e      	ldr	r3, [pc, #184]	; (2263c <m2m_wifi_connect_sc+0x3cc>)
   22582:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22584:	2388      	movs	r3, #136	; 0x88
   22586:	18fb      	adds	r3, r7, r3
   22588:	681b      	ldr	r3, [r3, #0]
   2258a:	785b      	ldrb	r3, [r3, #1]
   2258c:	001a      	movs	r2, r3
   2258e:	2384      	movs	r3, #132	; 0x84
   22590:	18fb      	adds	r3, r7, r3
   22592:	681b      	ldr	r3, [r3, #0]
   22594:	189b      	adds	r3, r3, r2
   22596:	2200      	movs	r2, #0
   22598:	709a      	strb	r2, [r3, #2]
   2259a:	e081      	b.n	226a0 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   2259c:	230a      	movs	r3, #10
   2259e:	18fb      	adds	r3, r7, r3
   225a0:	781b      	ldrb	r3, [r3, #0]
   225a2:	2b02      	cmp	r3, #2
   225a4:	d156      	bne.n	22654 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   225a6:	2382      	movs	r3, #130	; 0x82
   225a8:	18fc      	adds	r4, r7, r3
   225aa:	687b      	ldr	r3, [r7, #4]
   225ac:	0018      	movs	r0, r3
   225ae:	4b1d      	ldr	r3, [pc, #116]	; (22624 <m2m_wifi_connect_sc+0x3b4>)
   225b0:	4798      	blx	r3
   225b2:	0003      	movs	r3, r0
   225b4:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   225b6:	2382      	movs	r3, #130	; 0x82
   225b8:	18fb      	adds	r3, r7, r3
   225ba:	881b      	ldrh	r3, [r3, #0]
   225bc:	2b00      	cmp	r3, #0
   225be:	d004      	beq.n	225ca <m2m_wifi_connect_sc+0x35a>
   225c0:	2382      	movs	r3, #130	; 0x82
   225c2:	18fb      	adds	r3, r7, r3
   225c4:	881b      	ldrh	r3, [r3, #0]
   225c6:	2b40      	cmp	r3, #64	; 0x40
   225c8:	d912      	bls.n	225f0 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   225ca:	4a20      	ldr	r2, [pc, #128]	; (2264c <m2m_wifi_connect_sc+0x3dc>)
   225cc:	4910      	ldr	r1, [pc, #64]	; (22610 <m2m_wifi_connect_sc+0x3a0>)
   225ce:	4b11      	ldr	r3, [pc, #68]	; (22614 <m2m_wifi_connect_sc+0x3a4>)
   225d0:	0018      	movs	r0, r3
   225d2:	4b11      	ldr	r3, [pc, #68]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   225d4:	4798      	blx	r3
   225d6:	4b1e      	ldr	r3, [pc, #120]	; (22650 <m2m_wifi_connect_sc+0x3e0>)
   225d8:	0018      	movs	r0, r3
   225da:	4b0f      	ldr	r3, [pc, #60]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   225dc:	4798      	blx	r3
   225de:	4b10      	ldr	r3, [pc, #64]	; (22620 <m2m_wifi_connect_sc+0x3b0>)
   225e0:	0018      	movs	r0, r3
   225e2:	4b0d      	ldr	r3, [pc, #52]	; (22618 <m2m_wifi_connect_sc+0x3a8>)
   225e4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   225e6:	2397      	movs	r3, #151	; 0x97
   225e8:	18fb      	adds	r3, r7, r3
   225ea:	22f4      	movs	r2, #244	; 0xf4
   225ec:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   225ee:	e068      	b.n	226c2 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   225f0:	238c      	movs	r3, #140	; 0x8c
   225f2:	18fb      	adds	r3, r7, r3
   225f4:	6818      	ldr	r0, [r3, #0]
   225f6:	2382      	movs	r3, #130	; 0x82
   225f8:	18fb      	adds	r3, r7, r3
   225fa:	881b      	ldrh	r3, [r3, #0]
   225fc:	3301      	adds	r3, #1
   225fe:	001a      	movs	r2, r3
   22600:	687b      	ldr	r3, [r7, #4]
   22602:	0019      	movs	r1, r3
   22604:	4b0d      	ldr	r3, [pc, #52]	; (2263c <m2m_wifi_connect_sc+0x3cc>)
   22606:	4798      	blx	r3
   22608:	e04a      	b.n	226a0 <m2m_wifi_connect_sc+0x430>
   2260a:	46c0      	nop			; (mov r8, r8)
   2260c:	0000021a 	.word	0x0000021a
   22610:	00038c00 	.word	0x00038c00
   22614:	00038848 	.word	0x00038848
   22618:	0001e529 	.word	0x0001e529
   2261c:	00038a88 	.word	0x00038a88
   22620:	00038844 	.word	0x00038844
   22624:	00020edf 	.word	0x00020edf
   22628:	00000226 	.word	0x00000226
   2262c:	00038a9c 	.word	0x00038a9c
   22630:	00038aac 	.word	0x00038aac
   22634:	00000239 	.word	0x00000239
   22638:	00038ac0 	.word	0x00038ac0
   2263c:	00020e65 	.word	0x00020e65
   22640:	00038acc 	.word	0x00038acc
   22644:	00000257 	.word	0x00000257
   22648:	00038ae8 	.word	0x00038ae8
   2264c:	00000266 	.word	0x00000266
   22650:	00038b04 	.word	0x00038b04
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22654:	230a      	movs	r3, #10
   22656:	18fb      	adds	r3, r7, r3
   22658:	781b      	ldrb	r3, [r3, #0]
   2265a:	2b04      	cmp	r3, #4
   2265c:	d108      	bne.n	22670 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   2265e:	238c      	movs	r3, #140	; 0x8c
   22660:	18fb      	adds	r3, r7, r3
   22662:	681b      	ldr	r3, [r3, #0]
   22664:	6879      	ldr	r1, [r7, #4]
   22666:	223e      	movs	r2, #62	; 0x3e
   22668:	0018      	movs	r0, r3
   2266a:	4b1a      	ldr	r3, [pc, #104]	; (226d4 <m2m_wifi_connect_sc+0x464>)
   2266c:	4798      	blx	r3
   2266e:	e017      	b.n	226a0 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   22670:	230a      	movs	r3, #10
   22672:	18fb      	adds	r3, r7, r3
   22674:	781b      	ldrb	r3, [r3, #0]
   22676:	2b01      	cmp	r3, #1
   22678:	d012      	beq.n	226a0 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   2267a:	4a17      	ldr	r2, [pc, #92]	; (226d8 <m2m_wifi_connect_sc+0x468>)
   2267c:	4917      	ldr	r1, [pc, #92]	; (226dc <m2m_wifi_connect_sc+0x46c>)
   2267e:	4b18      	ldr	r3, [pc, #96]	; (226e0 <m2m_wifi_connect_sc+0x470>)
   22680:	0018      	movs	r0, r3
   22682:	4b18      	ldr	r3, [pc, #96]	; (226e4 <m2m_wifi_connect_sc+0x474>)
   22684:	4798      	blx	r3
   22686:	4b18      	ldr	r3, [pc, #96]	; (226e8 <m2m_wifi_connect_sc+0x478>)
   22688:	0018      	movs	r0, r3
   2268a:	4b16      	ldr	r3, [pc, #88]	; (226e4 <m2m_wifi_connect_sc+0x474>)
   2268c:	4798      	blx	r3
   2268e:	4b17      	ldr	r3, [pc, #92]	; (226ec <m2m_wifi_connect_sc+0x47c>)
   22690:	0018      	movs	r0, r3
   22692:	4b14      	ldr	r3, [pc, #80]	; (226e4 <m2m_wifi_connect_sc+0x474>)
   22694:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22696:	2397      	movs	r3, #151	; 0x97
   22698:	18fb      	adds	r3, r7, r3
   2269a:	22f4      	movs	r2, #244	; 0xf4
   2269c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2269e:	e010      	b.n	226c2 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   226a0:	2397      	movs	r3, #151	; 0x97
   226a2:	18fc      	adds	r4, r7, r3
   226a4:	2314      	movs	r3, #20
   226a6:	18fa      	adds	r2, r7, r3
   226a8:	2300      	movs	r3, #0
   226aa:	9302      	str	r3, [sp, #8]
   226ac:	2300      	movs	r3, #0
   226ae:	9301      	str	r3, [sp, #4]
   226b0:	2300      	movs	r3, #0
   226b2:	9300      	str	r3, [sp, #0]
   226b4:	236c      	movs	r3, #108	; 0x6c
   226b6:	2128      	movs	r1, #40	; 0x28
   226b8:	2001      	movs	r0, #1
   226ba:	4d0d      	ldr	r5, [pc, #52]	; (226f0 <m2m_wifi_connect_sc+0x480>)
   226bc:	47a8      	blx	r5
   226be:	0003      	movs	r3, r0
   226c0:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   226c2:	2397      	movs	r3, #151	; 0x97
   226c4:	18fb      	adds	r3, r7, r3
   226c6:	781b      	ldrb	r3, [r3, #0]
   226c8:	b25b      	sxtb	r3, r3
}
   226ca:	0018      	movs	r0, r3
   226cc:	46bd      	mov	sp, r7
   226ce:	b026      	add	sp, #152	; 0x98
   226d0:	bdb0      	pop	{r4, r5, r7, pc}
   226d2:	46c0      	nop			; (mov r8, r8)
   226d4:	00020e65 	.word	0x00020e65
   226d8:	00000276 	.word	0x00000276
   226dc:	00038c00 	.word	0x00038c00
   226e0:	00038848 	.word	0x00038848
   226e4:	0001e529 	.word	0x0001e529
   226e8:	00038b20 	.word	0x00038b20
   226ec:	00038844 	.word	0x00038844
   226f0:	00021101 	.word	0x00021101

000226f4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   226f4:	b580      	push	{r7, lr}
   226f6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   226f8:	2300      	movs	r3, #0
}
   226fa:	0018      	movs	r0, r3
   226fc:	46bd      	mov	sp, r7
   226fe:	bd80      	pop	{r7, pc}

00022700 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   22700:	b590      	push	{r4, r7, lr}
   22702:	b087      	sub	sp, #28
   22704:	af00      	add	r7, sp, #0
   22706:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22708:	2317      	movs	r3, #23
   2270a:	18fb      	adds	r3, r7, r3
   2270c:	2200      	movs	r2, #0
   2270e:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   22710:	687b      	ldr	r3, [r7, #4]
   22712:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   22714:	693b      	ldr	r3, [r7, #16]
   22716:	2280      	movs	r2, #128	; 0x80
   22718:	0052      	lsls	r2, r2, #1
   2271a:	4313      	orrs	r3, r2
   2271c:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   2271e:	693a      	ldr	r2, [r7, #16]
   22720:	23a5      	movs	r3, #165	; 0xa5
   22722:	015b      	lsls	r3, r3, #5
   22724:	0011      	movs	r1, r2
   22726:	0018      	movs	r0, r3
   22728:	4b12      	ldr	r3, [pc, #72]	; (22774 <chip_apply_conf+0x74>)
   2272a:	4798      	blx	r3
		if(val32 != 0) {		
   2272c:	693b      	ldr	r3, [r7, #16]
   2272e:	2b00      	cmp	r3, #0
   22730:	d018      	beq.n	22764 <chip_apply_conf+0x64>
			uint32 reg = 0;
   22732:	2300      	movs	r3, #0
   22734:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   22736:	2317      	movs	r3, #23
   22738:	18fc      	adds	r4, r7, r3
   2273a:	230c      	movs	r3, #12
   2273c:	18fa      	adds	r2, r7, r3
   2273e:	23a5      	movs	r3, #165	; 0xa5
   22740:	015b      	lsls	r3, r3, #5
   22742:	0011      	movs	r1, r2
   22744:	0018      	movs	r0, r3
   22746:	4b0c      	ldr	r3, [pc, #48]	; (22778 <chip_apply_conf+0x78>)
   22748:	4798      	blx	r3
   2274a:	0003      	movs	r3, r0
   2274c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2274e:	2317      	movs	r3, #23
   22750:	18fb      	adds	r3, r7, r3
   22752:	781b      	ldrb	r3, [r3, #0]
   22754:	b25b      	sxtb	r3, r3
   22756:	2b00      	cmp	r3, #0
   22758:	d1e1      	bne.n	2271e <chip_apply_conf+0x1e>
				if(reg == val32)
   2275a:	68fa      	ldr	r2, [r7, #12]
   2275c:	693b      	ldr	r3, [r7, #16]
   2275e:	429a      	cmp	r2, r3
   22760:	d002      	beq.n	22768 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   22762:	e7dc      	b.n	2271e <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   22764:	46c0      	nop			; (mov r8, r8)
   22766:	e000      	b.n	2276a <chip_apply_conf+0x6a>
					break;
   22768:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   2276a:	2300      	movs	r3, #0
}
   2276c:	0018      	movs	r0, r3
   2276e:	46bd      	mov	sp, r7
   22770:	b007      	add	sp, #28
   22772:	bd90      	pop	{r4, r7, pc}
   22774:	00022f55 	.word	0x00022f55
   22778:	00022f31 	.word	0x00022f31

0002277c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   2277c:	b590      	push	{r4, r7, lr}
   2277e:	b083      	sub	sp, #12
   22780:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22782:	2300      	movs	r3, #0
   22784:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   22786:	1dfb      	adds	r3, r7, #7
   22788:	2200      	movs	r2, #0
   2278a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   2278c:	1dfc      	adds	r4, r7, #7
   2278e:	003b      	movs	r3, r7
   22790:	4a24      	ldr	r2, [pc, #144]	; (22824 <enable_interrupts+0xa8>)
   22792:	0019      	movs	r1, r3
   22794:	0010      	movs	r0, r2
   22796:	4b24      	ldr	r3, [pc, #144]	; (22828 <enable_interrupts+0xac>)
   22798:	4798      	blx	r3
   2279a:	0003      	movs	r3, r0
   2279c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2279e:	1dfb      	adds	r3, r7, #7
   227a0:	781b      	ldrb	r3, [r3, #0]
   227a2:	b25b      	sxtb	r3, r3
   227a4:	2b00      	cmp	r3, #0
   227a6:	d131      	bne.n	2280c <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   227a8:	683b      	ldr	r3, [r7, #0]
   227aa:	2280      	movs	r2, #128	; 0x80
   227ac:	0052      	lsls	r2, r2, #1
   227ae:	4313      	orrs	r3, r2
   227b0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   227b2:	683b      	ldr	r3, [r7, #0]
   227b4:	1dfc      	adds	r4, r7, #7
   227b6:	4a1b      	ldr	r2, [pc, #108]	; (22824 <enable_interrupts+0xa8>)
   227b8:	0019      	movs	r1, r3
   227ba:	0010      	movs	r0, r2
   227bc:	4b1b      	ldr	r3, [pc, #108]	; (2282c <enable_interrupts+0xb0>)
   227be:	4798      	blx	r3
   227c0:	0003      	movs	r3, r0
   227c2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   227c4:	1dfb      	adds	r3, r7, #7
   227c6:	781b      	ldrb	r3, [r3, #0]
   227c8:	b25b      	sxtb	r3, r3
   227ca:	2b00      	cmp	r3, #0
   227cc:	d120      	bne.n	22810 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   227ce:	1dfc      	adds	r4, r7, #7
   227d0:	003a      	movs	r2, r7
   227d2:	23d0      	movs	r3, #208	; 0xd0
   227d4:	015b      	lsls	r3, r3, #5
   227d6:	0011      	movs	r1, r2
   227d8:	0018      	movs	r0, r3
   227da:	4b13      	ldr	r3, [pc, #76]	; (22828 <enable_interrupts+0xac>)
   227dc:	4798      	blx	r3
   227de:	0003      	movs	r3, r0
   227e0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   227e2:	1dfb      	adds	r3, r7, #7
   227e4:	781b      	ldrb	r3, [r3, #0]
   227e6:	b25b      	sxtb	r3, r3
   227e8:	2b00      	cmp	r3, #0
   227ea:	d113      	bne.n	22814 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   227ec:	683b      	ldr	r3, [r7, #0]
   227ee:	2280      	movs	r2, #128	; 0x80
   227f0:	0252      	lsls	r2, r2, #9
   227f2:	4313      	orrs	r3, r2
   227f4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   227f6:	683a      	ldr	r2, [r7, #0]
   227f8:	1dfc      	adds	r4, r7, #7
   227fa:	23d0      	movs	r3, #208	; 0xd0
   227fc:	015b      	lsls	r3, r3, #5
   227fe:	0011      	movs	r1, r2
   22800:	0018      	movs	r0, r3
   22802:	4b0a      	ldr	r3, [pc, #40]	; (2282c <enable_interrupts+0xb0>)
   22804:	4798      	blx	r3
   22806:	0003      	movs	r3, r0
   22808:	7023      	strb	r3, [r4, #0]
   2280a:	e004      	b.n	22816 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   2280c:	46c0      	nop			; (mov r8, r8)
   2280e:	e002      	b.n	22816 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22810:	46c0      	nop			; (mov r8, r8)
   22812:	e000      	b.n	22816 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   22814:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   22816:	1dfb      	adds	r3, r7, #7
   22818:	781b      	ldrb	r3, [r3, #0]
   2281a:	b25b      	sxtb	r3, r3
}
   2281c:	0018      	movs	r0, r3
   2281e:	46bd      	mov	sp, r7
   22820:	b003      	add	sp, #12
   22822:	bd90      	pop	{r4, r7, pc}
   22824:	00001408 	.word	0x00001408
   22828:	00022f31 	.word	0x00022f31
   2282c:	00022f55 	.word	0x00022f55

00022830 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   22830:	b580      	push	{r7, lr}
   22832:	b082      	sub	sp, #8
   22834:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   22836:	4b32      	ldr	r3, [pc, #200]	; (22900 <nmi_get_chipid+0xd0>)
   22838:	681b      	ldr	r3, [r3, #0]
   2283a:	2b00      	cmp	r3, #0
   2283c:	d159      	bne.n	228f2 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   2283e:	4a30      	ldr	r2, [pc, #192]	; (22900 <nmi_get_chipid+0xd0>)
   22840:	2380      	movs	r3, #128	; 0x80
   22842:	015b      	lsls	r3, r3, #5
   22844:	0011      	movs	r1, r2
   22846:	0018      	movs	r0, r3
   22848:	4b2e      	ldr	r3, [pc, #184]	; (22904 <nmi_get_chipid+0xd4>)
   2284a:	4798      	blx	r3
   2284c:	1e03      	subs	r3, r0, #0
   2284e:	d004      	beq.n	2285a <nmi_get_chipid+0x2a>
			chipid = 0;
   22850:	4b2b      	ldr	r3, [pc, #172]	; (22900 <nmi_get_chipid+0xd0>)
   22852:	2200      	movs	r2, #0
   22854:	601a      	str	r2, [r3, #0]
			return 0;
   22856:	2300      	movs	r3, #0
   22858:	e04d      	b.n	228f6 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   2285a:	1d3b      	adds	r3, r7, #4
   2285c:	4a2a      	ldr	r2, [pc, #168]	; (22908 <nmi_get_chipid+0xd8>)
   2285e:	0019      	movs	r1, r3
   22860:	0010      	movs	r0, r2
   22862:	4b28      	ldr	r3, [pc, #160]	; (22904 <nmi_get_chipid+0xd4>)
   22864:	4798      	blx	r3
   22866:	1e03      	subs	r3, r0, #0
   22868:	d004      	beq.n	22874 <nmi_get_chipid+0x44>
			chipid = 0;
   2286a:	4b25      	ldr	r3, [pc, #148]	; (22900 <nmi_get_chipid+0xd0>)
   2286c:	2200      	movs	r2, #0
   2286e:	601a      	str	r2, [r3, #0]
			return 0;
   22870:	2300      	movs	r3, #0
   22872:	e040      	b.n	228f6 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   22874:	4b22      	ldr	r3, [pc, #136]	; (22900 <nmi_get_chipid+0xd0>)
   22876:	681b      	ldr	r3, [r3, #0]
   22878:	4a24      	ldr	r2, [pc, #144]	; (2290c <nmi_get_chipid+0xdc>)
   2287a:	4293      	cmp	r3, r2
   2287c:	d106      	bne.n	2288c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   2287e:	687b      	ldr	r3, [r7, #4]
   22880:	2b01      	cmp	r3, #1
   22882:	d029      	beq.n	228d8 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   22884:	4b1e      	ldr	r3, [pc, #120]	; (22900 <nmi_get_chipid+0xd0>)
   22886:	4a22      	ldr	r2, [pc, #136]	; (22910 <nmi_get_chipid+0xe0>)
   22888:	601a      	str	r2, [r3, #0]
   2288a:	e025      	b.n	228d8 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   2288c:	4b1c      	ldr	r3, [pc, #112]	; (22900 <nmi_get_chipid+0xd0>)
   2288e:	681b      	ldr	r3, [r3, #0]
   22890:	4a20      	ldr	r2, [pc, #128]	; (22914 <nmi_get_chipid+0xe4>)
   22892:	4293      	cmp	r3, r2
   22894:	d10d      	bne.n	228b2 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   22896:	687b      	ldr	r3, [r7, #4]
   22898:	2b03      	cmp	r3, #3
   2289a:	d01d      	beq.n	228d8 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   2289c:	687b      	ldr	r3, [r7, #4]
   2289e:	2b04      	cmp	r3, #4
   228a0:	d103      	bne.n	228aa <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   228a2:	4b17      	ldr	r3, [pc, #92]	; (22900 <nmi_get_chipid+0xd0>)
   228a4:	4a1c      	ldr	r2, [pc, #112]	; (22918 <nmi_get_chipid+0xe8>)
   228a6:	601a      	str	r2, [r3, #0]
   228a8:	e016      	b.n	228d8 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   228aa:	4b15      	ldr	r3, [pc, #84]	; (22900 <nmi_get_chipid+0xd0>)
   228ac:	4a1b      	ldr	r2, [pc, #108]	; (2291c <nmi_get_chipid+0xec>)
   228ae:	601a      	str	r2, [r3, #0]
   228b0:	e012      	b.n	228d8 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   228b2:	4b13      	ldr	r3, [pc, #76]	; (22900 <nmi_get_chipid+0xd0>)
   228b4:	681b      	ldr	r3, [r3, #0]
   228b6:	4a1a      	ldr	r2, [pc, #104]	; (22920 <nmi_get_chipid+0xf0>)
   228b8:	4293      	cmp	r3, r2
   228ba:	d10d      	bne.n	228d8 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   228bc:	4a10      	ldr	r2, [pc, #64]	; (22900 <nmi_get_chipid+0xd0>)
   228be:	23ec      	movs	r3, #236	; 0xec
   228c0:	039b      	lsls	r3, r3, #14
   228c2:	0011      	movs	r1, r2
   228c4:	0018      	movs	r0, r3
   228c6:	4b0f      	ldr	r3, [pc, #60]	; (22904 <nmi_get_chipid+0xd4>)
   228c8:	4798      	blx	r3
   228ca:	1e03      	subs	r3, r0, #0
   228cc:	d004      	beq.n	228d8 <nmi_get_chipid+0xa8>
			chipid = 0;
   228ce:	4b0c      	ldr	r3, [pc, #48]	; (22900 <nmi_get_chipid+0xd0>)
   228d0:	2200      	movs	r2, #0
   228d2:	601a      	str	r2, [r3, #0]
			return 0;
   228d4:	2300      	movs	r3, #0
   228d6:	e00e      	b.n	228f6 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   228d8:	4b09      	ldr	r3, [pc, #36]	; (22900 <nmi_get_chipid+0xd0>)
   228da:	681b      	ldr	r3, [r3, #0]
   228dc:	4a11      	ldr	r2, [pc, #68]	; (22924 <nmi_get_chipid+0xf4>)
   228de:	401a      	ands	r2, r3
   228e0:	4b07      	ldr	r3, [pc, #28]	; (22900 <nmi_get_chipid+0xd0>)
   228e2:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   228e4:	4b06      	ldr	r3, [pc, #24]	; (22900 <nmi_get_chipid+0xd0>)
   228e6:	681b      	ldr	r3, [r3, #0]
   228e8:	22a0      	movs	r2, #160	; 0xa0
   228ea:	02d2      	lsls	r2, r2, #11
   228ec:	431a      	orrs	r2, r3
   228ee:	4b04      	ldr	r3, [pc, #16]	; (22900 <nmi_get_chipid+0xd0>)
   228f0:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   228f2:	4b03      	ldr	r3, [pc, #12]	; (22900 <nmi_get_chipid+0xd0>)
   228f4:	681b      	ldr	r3, [r3, #0]
}
   228f6:	0018      	movs	r0, r3
   228f8:	46bd      	mov	sp, r7
   228fa:	b002      	add	sp, #8
   228fc:	bd80      	pop	{r7, pc}
   228fe:	46c0      	nop			; (mov r8, r8)
   22900:	20003e9c 	.word	0x20003e9c
   22904:	00022f31 	.word	0x00022f31
   22908:	000013f4 	.word	0x000013f4
   2290c:	001002a0 	.word	0x001002a0
   22910:	001002a1 	.word	0x001002a1
   22914:	001002b0 	.word	0x001002b0
   22918:	001002b1 	.word	0x001002b1
   2291c:	001002b2 	.word	0x001002b2
   22920:	001000f0 	.word	0x001000f0
   22924:	fff0ffff 	.word	0xfff0ffff

00022928 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   22928:	b590      	push	{r4, r7, lr}
   2292a:	b083      	sub	sp, #12
   2292c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2292e:	1dfb      	adds	r3, r7, #7
   22930:	2200      	movs	r2, #0
   22932:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22934:	1dfc      	adds	r4, r7, #7
   22936:	003b      	movs	r3, r7
   22938:	0019      	movs	r1, r3
   2293a:	2010      	movs	r0, #16
   2293c:	4b2e      	ldr	r3, [pc, #184]	; (229f8 <chip_sleep+0xd0>)
   2293e:	4798      	blx	r3
   22940:	0003      	movs	r3, r0
   22942:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   22944:	1dfb      	adds	r3, r7, #7
   22946:	781b      	ldrb	r3, [r3, #0]
   22948:	b25b      	sxtb	r3, r3
   2294a:	2b00      	cmp	r3, #0
   2294c:	d145      	bne.n	229da <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2294e:	683b      	ldr	r3, [r7, #0]
   22950:	2201      	movs	r2, #1
   22952:	4013      	ands	r3, r2
   22954:	d000      	beq.n	22958 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   22956:	e7ed      	b.n	22934 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   22958:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2295a:	1dfc      	adds	r4, r7, #7
   2295c:	003b      	movs	r3, r7
   2295e:	0019      	movs	r1, r3
   22960:	2001      	movs	r0, #1
   22962:	4b25      	ldr	r3, [pc, #148]	; (229f8 <chip_sleep+0xd0>)
   22964:	4798      	blx	r3
   22966:	0003      	movs	r3, r0
   22968:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2296a:	1dfb      	adds	r3, r7, #7
   2296c:	781b      	ldrb	r3, [r3, #0]
   2296e:	b25b      	sxtb	r3, r3
   22970:	2b00      	cmp	r3, #0
   22972:	d134      	bne.n	229de <chip_sleep+0xb6>
	if(reg & NBIT1)
   22974:	683b      	ldr	r3, [r7, #0]
   22976:	2202      	movs	r2, #2
   22978:	4013      	ands	r3, r2
   2297a:	d010      	beq.n	2299e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   2297c:	683b      	ldr	r3, [r7, #0]
   2297e:	2202      	movs	r2, #2
   22980:	4393      	bics	r3, r2
   22982:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   22984:	683b      	ldr	r3, [r7, #0]
   22986:	1dfc      	adds	r4, r7, #7
   22988:	0019      	movs	r1, r3
   2298a:	2001      	movs	r0, #1
   2298c:	4b1b      	ldr	r3, [pc, #108]	; (229fc <chip_sleep+0xd4>)
   2298e:	4798      	blx	r3
   22990:	0003      	movs	r3, r0
   22992:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   22994:	1dfb      	adds	r3, r7, #7
   22996:	781b      	ldrb	r3, [r3, #0]
   22998:	b25b      	sxtb	r3, r3
   2299a:	2b00      	cmp	r3, #0
   2299c:	d121      	bne.n	229e2 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2299e:	1dfc      	adds	r4, r7, #7
   229a0:	003b      	movs	r3, r7
   229a2:	0019      	movs	r1, r3
   229a4:	200b      	movs	r0, #11
   229a6:	4b14      	ldr	r3, [pc, #80]	; (229f8 <chip_sleep+0xd0>)
   229a8:	4798      	blx	r3
   229aa:	0003      	movs	r3, r0
   229ac:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   229ae:	1dfb      	adds	r3, r7, #7
   229b0:	781b      	ldrb	r3, [r3, #0]
   229b2:	b25b      	sxtb	r3, r3
   229b4:	2b00      	cmp	r3, #0
   229b6:	d116      	bne.n	229e6 <chip_sleep+0xbe>
	if(reg & NBIT0)
   229b8:	683b      	ldr	r3, [r7, #0]
   229ba:	2201      	movs	r2, #1
   229bc:	4013      	ands	r3, r2
   229be:	d013      	beq.n	229e8 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   229c0:	683b      	ldr	r3, [r7, #0]
   229c2:	2201      	movs	r2, #1
   229c4:	4393      	bics	r3, r2
   229c6:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   229c8:	683b      	ldr	r3, [r7, #0]
   229ca:	1dfc      	adds	r4, r7, #7
   229cc:	0019      	movs	r1, r3
   229ce:	200b      	movs	r0, #11
   229d0:	4b0a      	ldr	r3, [pc, #40]	; (229fc <chip_sleep+0xd4>)
   229d2:	4798      	blx	r3
   229d4:	0003      	movs	r3, r0
   229d6:	7023      	strb	r3, [r4, #0]
   229d8:	e006      	b.n	229e8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   229da:	46c0      	nop			; (mov r8, r8)
   229dc:	e004      	b.n	229e8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   229de:	46c0      	nop			; (mov r8, r8)
   229e0:	e002      	b.n	229e8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   229e2:	46c0      	nop			; (mov r8, r8)
   229e4:	e000      	b.n	229e8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   229e6:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   229e8:	1dfb      	adds	r3, r7, #7
   229ea:	781b      	ldrb	r3, [r3, #0]
   229ec:	b25b      	sxtb	r3, r3
}
   229ee:	0018      	movs	r0, r3
   229f0:	46bd      	mov	sp, r7
   229f2:	b003      	add	sp, #12
   229f4:	bd90      	pop	{r4, r7, pc}
   229f6:	46c0      	nop			; (mov r8, r8)
   229f8:	00022f31 	.word	0x00022f31
   229fc:	00022f55 	.word	0x00022f55

00022a00 <chip_wake>:
sint8 chip_wake(void)
{
   22a00:	b590      	push	{r4, r7, lr}
   22a02:	b085      	sub	sp, #20
   22a04:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22a06:	230f      	movs	r3, #15
   22a08:	18fb      	adds	r3, r7, r3
   22a0a:	2200      	movs	r2, #0
   22a0c:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   22a0e:	2300      	movs	r3, #0
   22a10:	607b      	str	r3, [r7, #4]
   22a12:	2300      	movs	r3, #0
   22a14:	603b      	str	r3, [r7, #0]
   22a16:	2300      	movs	r3, #0
   22a18:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   22a1a:	230f      	movs	r3, #15
   22a1c:	18fc      	adds	r4, r7, r3
   22a1e:	1d3b      	adds	r3, r7, #4
   22a20:	0019      	movs	r1, r3
   22a22:	200b      	movs	r0, #11
   22a24:	4b4e      	ldr	r3, [pc, #312]	; (22b60 <chip_wake+0x160>)
   22a26:	4798      	blx	r3
   22a28:	0003      	movs	r3, r0
   22a2a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22a2c:	230f      	movs	r3, #15
   22a2e:	18fb      	adds	r3, r7, r3
   22a30:	781b      	ldrb	r3, [r3, #0]
   22a32:	b25b      	sxtb	r3, r3
   22a34:	2b00      	cmp	r3, #0
   22a36:	d000      	beq.n	22a3a <chip_wake+0x3a>
   22a38:	e082      	b.n	22b40 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   22a3a:	687b      	ldr	r3, [r7, #4]
   22a3c:	2201      	movs	r2, #1
   22a3e:	4013      	ands	r3, r2
   22a40:	d111      	bne.n	22a66 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   22a42:	687b      	ldr	r3, [r7, #4]
   22a44:	2201      	movs	r2, #1
   22a46:	4313      	orrs	r3, r2
   22a48:	220f      	movs	r2, #15
   22a4a:	18bc      	adds	r4, r7, r2
   22a4c:	0019      	movs	r1, r3
   22a4e:	200b      	movs	r0, #11
   22a50:	4b44      	ldr	r3, [pc, #272]	; (22b64 <chip_wake+0x164>)
   22a52:	4798      	blx	r3
   22a54:	0003      	movs	r3, r0
   22a56:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22a58:	230f      	movs	r3, #15
   22a5a:	18fb      	adds	r3, r7, r3
   22a5c:	781b      	ldrb	r3, [r3, #0]
   22a5e:	b25b      	sxtb	r3, r3
   22a60:	2b00      	cmp	r3, #0
   22a62:	d000      	beq.n	22a66 <chip_wake+0x66>
   22a64:	e06e      	b.n	22b44 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   22a66:	230f      	movs	r3, #15
   22a68:	18fc      	adds	r4, r7, r3
   22a6a:	1d3b      	adds	r3, r7, #4
   22a6c:	0019      	movs	r1, r3
   22a6e:	2001      	movs	r0, #1
   22a70:	4b3b      	ldr	r3, [pc, #236]	; (22b60 <chip_wake+0x160>)
   22a72:	4798      	blx	r3
   22a74:	0003      	movs	r3, r0
   22a76:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22a78:	230f      	movs	r3, #15
   22a7a:	18fb      	adds	r3, r7, r3
   22a7c:	781b      	ldrb	r3, [r3, #0]
   22a7e:	b25b      	sxtb	r3, r3
   22a80:	2b00      	cmp	r3, #0
   22a82:	d161      	bne.n	22b48 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   22a84:	687b      	ldr	r3, [r7, #4]
   22a86:	2202      	movs	r2, #2
   22a88:	4013      	ands	r3, r2
   22a8a:	d110      	bne.n	22aae <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   22a8c:	687b      	ldr	r3, [r7, #4]
   22a8e:	2202      	movs	r2, #2
   22a90:	4313      	orrs	r3, r2
   22a92:	220f      	movs	r2, #15
   22a94:	18bc      	adds	r4, r7, r2
   22a96:	0019      	movs	r1, r3
   22a98:	2001      	movs	r0, #1
   22a9a:	4b32      	ldr	r3, [pc, #200]	; (22b64 <chip_wake+0x164>)
   22a9c:	4798      	blx	r3
   22a9e:	0003      	movs	r3, r0
   22aa0:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22aa2:	230f      	movs	r3, #15
   22aa4:	18fb      	adds	r3, r7, r3
   22aa6:	781b      	ldrb	r3, [r3, #0]
   22aa8:	b25b      	sxtb	r3, r3
   22aaa:	2b00      	cmp	r3, #0
   22aac:	d14e      	bne.n	22b4c <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   22aae:	230f      	movs	r3, #15
   22ab0:	18fc      	adds	r4, r7, r3
   22ab2:	003b      	movs	r3, r7
   22ab4:	0019      	movs	r1, r3
   22ab6:	200f      	movs	r0, #15
   22ab8:	4b29      	ldr	r3, [pc, #164]	; (22b60 <chip_wake+0x160>)
   22aba:	4798      	blx	r3
   22abc:	0003      	movs	r3, r0
   22abe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   22ac0:	230f      	movs	r3, #15
   22ac2:	18fb      	adds	r3, r7, r3
   22ac4:	781b      	ldrb	r3, [r3, #0]
   22ac6:	b25b      	sxtb	r3, r3
   22ac8:	2b00      	cmp	r3, #0
   22aca:	d014      	beq.n	22af6 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   22acc:	23a8      	movs	r3, #168	; 0xa8
   22ace:	005a      	lsls	r2, r3, #1
   22ad0:	4925      	ldr	r1, [pc, #148]	; (22b68 <chip_wake+0x168>)
   22ad2:	4b26      	ldr	r3, [pc, #152]	; (22b6c <chip_wake+0x16c>)
   22ad4:	0018      	movs	r0, r3
   22ad6:	4b26      	ldr	r3, [pc, #152]	; (22b70 <chip_wake+0x170>)
   22ad8:	4798      	blx	r3
   22ada:	230f      	movs	r3, #15
   22adc:	18fb      	adds	r3, r7, r3
   22ade:	2100      	movs	r1, #0
   22ae0:	5659      	ldrsb	r1, [r3, r1]
   22ae2:	683a      	ldr	r2, [r7, #0]
   22ae4:	4b23      	ldr	r3, [pc, #140]	; (22b74 <chip_wake+0x174>)
   22ae6:	0018      	movs	r0, r3
   22ae8:	4b21      	ldr	r3, [pc, #132]	; (22b70 <chip_wake+0x170>)
   22aea:	4798      	blx	r3
   22aec:	4b22      	ldr	r3, [pc, #136]	; (22b78 <chip_wake+0x178>)
   22aee:	0018      	movs	r0, r3
   22af0:	4b1f      	ldr	r3, [pc, #124]	; (22b70 <chip_wake+0x170>)
   22af2:	4798      	blx	r3
			goto _WAKE_EXIT;
   22af4:	e02b      	b.n	22b4e <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   22af6:	683b      	ldr	r3, [r7, #0]
   22af8:	2204      	movs	r2, #4
   22afa:	4013      	ands	r3, r2
   22afc:	d11c      	bne.n	22b38 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   22afe:	2002      	movs	r0, #2
   22b00:	4b1e      	ldr	r3, [pc, #120]	; (22b7c <chip_wake+0x17c>)
   22b02:	4798      	blx	r3
		trials++;
   22b04:	68bb      	ldr	r3, [r7, #8]
   22b06:	3301      	adds	r3, #1
   22b08:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   22b0a:	68bb      	ldr	r3, [r7, #8]
   22b0c:	2b04      	cmp	r3, #4
   22b0e:	d9ce      	bls.n	22aae <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   22b10:	23ad      	movs	r3, #173	; 0xad
   22b12:	005a      	lsls	r2, r3, #1
   22b14:	4914      	ldr	r1, [pc, #80]	; (22b68 <chip_wake+0x168>)
   22b16:	4b15      	ldr	r3, [pc, #84]	; (22b6c <chip_wake+0x16c>)
   22b18:	0018      	movs	r0, r3
   22b1a:	4b15      	ldr	r3, [pc, #84]	; (22b70 <chip_wake+0x170>)
   22b1c:	4798      	blx	r3
   22b1e:	4b18      	ldr	r3, [pc, #96]	; (22b80 <chip_wake+0x180>)
   22b20:	0018      	movs	r0, r3
   22b22:	4b13      	ldr	r3, [pc, #76]	; (22b70 <chip_wake+0x170>)
   22b24:	4798      	blx	r3
   22b26:	4b14      	ldr	r3, [pc, #80]	; (22b78 <chip_wake+0x178>)
   22b28:	0018      	movs	r0, r3
   22b2a:	4b11      	ldr	r3, [pc, #68]	; (22b70 <chip_wake+0x170>)
   22b2c:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   22b2e:	230f      	movs	r3, #15
   22b30:	18fb      	adds	r3, r7, r3
   22b32:	22fc      	movs	r2, #252	; 0xfc
   22b34:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   22b36:	e00a      	b.n	22b4e <chip_wake+0x14e>
			break;
   22b38:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   22b3a:	4b12      	ldr	r3, [pc, #72]	; (22b84 <chip_wake+0x184>)
   22b3c:	4798      	blx	r3
   22b3e:	e006      	b.n	22b4e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22b40:	46c0      	nop			; (mov r8, r8)
   22b42:	e004      	b.n	22b4e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22b44:	46c0      	nop			; (mov r8, r8)
   22b46:	e002      	b.n	22b4e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   22b48:	46c0      	nop			; (mov r8, r8)
   22b4a:	e000      	b.n	22b4e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   22b4c:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   22b4e:	230f      	movs	r3, #15
   22b50:	18fb      	adds	r3, r7, r3
   22b52:	781b      	ldrb	r3, [r3, #0]
   22b54:	b25b      	sxtb	r3, r3
}
   22b56:	0018      	movs	r0, r3
   22b58:	46bd      	mov	sp, r7
   22b5a:	b005      	add	sp, #20
   22b5c:	bd90      	pop	{r4, r7, pc}
   22b5e:	46c0      	nop			; (mov r8, r8)
   22b60:	00022f31 	.word	0x00022f31
   22b64:	00022f55 	.word	0x00022f55
   22b68:	00038ca0 	.word	0x00038ca0
   22b6c:	00038c14 	.word	0x00038c14
   22b70:	0001e529 	.word	0x0001e529
   22b74:	00038c28 	.word	0x00038c28
   22b78:	00038c40 	.word	0x00038c40
   22b7c:	000205c1 	.word	0x000205c1
   22b80:	00038c44 	.word	0x00038c44
   22b84:	00022ef1 	.word	0x00022ef1

00022b88 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   22b88:	b580      	push	{r7, lr}
   22b8a:	b088      	sub	sp, #32
   22b8c:	af00      	add	r7, sp, #0
   22b8e:	0002      	movs	r2, r0
   22b90:	1dfb      	adds	r3, r7, #7
   22b92:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22b94:	2313      	movs	r3, #19
   22b96:	18fb      	adds	r3, r7, r3
   22b98:	2200      	movs	r2, #0
   22b9a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22b9c:	2300      	movs	r3, #0
   22b9e:	61fb      	str	r3, [r7, #28]
   22ba0:	2300      	movs	r3, #0
   22ba2:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   22ba4:	2300      	movs	r3, #0
   22ba6:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   22ba8:	4b4a      	ldr	r3, [pc, #296]	; (22cd4 <wait_for_bootrom+0x14c>)
   22baa:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   22bac:	2300      	movs	r3, #0
   22bae:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22bb0:	4b49      	ldr	r3, [pc, #292]	; (22cd8 <wait_for_bootrom+0x150>)
   22bb2:	0018      	movs	r0, r3
   22bb4:	4b49      	ldr	r3, [pc, #292]	; (22cdc <wait_for_bootrom+0x154>)
   22bb6:	4798      	blx	r3
   22bb8:	0003      	movs	r3, r0
   22bba:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   22bbc:	69fb      	ldr	r3, [r7, #28]
   22bbe:	2b00      	cmp	r3, #0
   22bc0:	db03      	blt.n	22bca <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   22bc2:	2001      	movs	r0, #1
   22bc4:	4b46      	ldr	r3, [pc, #280]	; (22ce0 <wait_for_bootrom+0x158>)
   22bc6:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   22bc8:	e7f2      	b.n	22bb0 <wait_for_bootrom+0x28>
			break;
   22bca:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   22bcc:	4b45      	ldr	r3, [pc, #276]	; (22ce4 <wait_for_bootrom+0x15c>)
   22bce:	0018      	movs	r0, r3
   22bd0:	4b42      	ldr	r3, [pc, #264]	; (22cdc <wait_for_bootrom+0x154>)
   22bd2:	4798      	blx	r3
   22bd4:	0003      	movs	r3, r0
   22bd6:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   22bd8:	69fb      	ldr	r3, [r7, #28]
   22bda:	2201      	movs	r2, #1
   22bdc:	4013      	ands	r3, r2
   22bde:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   22be0:	69fb      	ldr	r3, [r7, #28]
   22be2:	2b00      	cmp	r3, #0
   22be4:	d112      	bne.n	22c0c <wait_for_bootrom+0x84>
	{
		reg = 0;
   22be6:	2300      	movs	r3, #0
   22be8:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   22bea:	e00b      	b.n	22c04 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   22bec:	2001      	movs	r0, #1
   22bee:	4b3c      	ldr	r3, [pc, #240]	; (22ce0 <wait_for_bootrom+0x158>)
   22bf0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   22bf2:	4b3d      	ldr	r3, [pc, #244]	; (22ce8 <wait_for_bootrom+0x160>)
   22bf4:	0018      	movs	r0, r3
   22bf6:	4b39      	ldr	r3, [pc, #228]	; (22cdc <wait_for_bootrom+0x154>)
   22bf8:	4798      	blx	r3
   22bfa:	0003      	movs	r3, r0
   22bfc:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   22bfe:	69bb      	ldr	r3, [r7, #24]
   22c00:	3301      	adds	r3, #1
   22c02:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   22c04:	69fb      	ldr	r3, [r7, #28]
   22c06:	4a39      	ldr	r2, [pc, #228]	; (22cec <wait_for_bootrom+0x164>)
   22c08:	4293      	cmp	r3, r2
   22c0a:	d1ef      	bne.n	22bec <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   22c0c:	1dfb      	adds	r3, r7, #7
   22c0e:	781b      	ldrb	r3, [r3, #0]
   22c10:	2b02      	cmp	r3, #2
   22c12:	d10d      	bne.n	22c30 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22c14:	4a36      	ldr	r2, [pc, #216]	; (22cf0 <wait_for_bootrom+0x168>)
   22c16:	4b37      	ldr	r3, [pc, #220]	; (22cf4 <wait_for_bootrom+0x16c>)
   22c18:	0011      	movs	r1, r2
   22c1a:	0018      	movs	r0, r3
   22c1c:	4b36      	ldr	r3, [pc, #216]	; (22cf8 <wait_for_bootrom+0x170>)
   22c1e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   22c20:	2380      	movs	r3, #128	; 0x80
   22c22:	035b      	lsls	r3, r3, #13
   22c24:	4a35      	ldr	r2, [pc, #212]	; (22cfc <wait_for_bootrom+0x174>)
   22c26:	0019      	movs	r1, r3
   22c28:	0010      	movs	r0, r2
   22c2a:	4b33      	ldr	r3, [pc, #204]	; (22cf8 <wait_for_bootrom+0x170>)
   22c2c:	4798      	blx	r3
   22c2e:	e022      	b.n	22c76 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   22c30:	1dfb      	adds	r3, r7, #7
   22c32:	781b      	ldrb	r3, [r3, #0]
   22c34:	2b03      	cmp	r3, #3
   22c36:	d10b      	bne.n	22c50 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   22c38:	4a2d      	ldr	r2, [pc, #180]	; (22cf0 <wait_for_bootrom+0x168>)
   22c3a:	4b2e      	ldr	r3, [pc, #184]	; (22cf4 <wait_for_bootrom+0x16c>)
   22c3c:	0011      	movs	r1, r2
   22c3e:	0018      	movs	r0, r3
   22c40:	4b2d      	ldr	r3, [pc, #180]	; (22cf8 <wait_for_bootrom+0x170>)
   22c42:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   22c44:	4b2d      	ldr	r3, [pc, #180]	; (22cfc <wait_for_bootrom+0x174>)
   22c46:	2100      	movs	r1, #0
   22c48:	0018      	movs	r0, r3
   22c4a:	4b2b      	ldr	r3, [pc, #172]	; (22cf8 <wait_for_bootrom+0x170>)
   22c4c:	4798      	blx	r3
   22c4e:	e012      	b.n	22c76 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   22c50:	1dfb      	adds	r3, r7, #7
   22c52:	781b      	ldrb	r3, [r3, #0]
   22c54:	2b04      	cmp	r3, #4
   22c56:	d108      	bne.n	22c6a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   22c58:	2380      	movs	r3, #128	; 0x80
   22c5a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22c5c:	68fb      	ldr	r3, [r7, #12]
   22c5e:	4a27      	ldr	r2, [pc, #156]	; (22cfc <wait_for_bootrom+0x174>)
   22c60:	0019      	movs	r1, r3
   22c62:	0010      	movs	r0, r2
   22c64:	4b24      	ldr	r3, [pc, #144]	; (22cf8 <wait_for_bootrom+0x170>)
   22c66:	4798      	blx	r3
   22c68:	e005      	b.n	22c76 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   22c6a:	68fb      	ldr	r3, [r7, #12]
   22c6c:	4a23      	ldr	r2, [pc, #140]	; (22cfc <wait_for_bootrom+0x174>)
   22c6e:	0019      	movs	r1, r3
   22c70:	0010      	movs	r0, r2
   22c72:	4b21      	ldr	r3, [pc, #132]	; (22cf8 <wait_for_bootrom+0x170>)
   22c74:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   22c76:	4b22      	ldr	r3, [pc, #136]	; (22d00 <wait_for_bootrom+0x178>)
   22c78:	4798      	blx	r3
   22c7a:	0003      	movs	r3, r0
   22c7c:	051b      	lsls	r3, r3, #20
   22c7e:	0d1b      	lsrs	r3, r3, #20
   22c80:	4a20      	ldr	r2, [pc, #128]	; (22d04 <wait_for_bootrom+0x17c>)
   22c82:	4293      	cmp	r3, r2
   22c84:	d906      	bls.n	22c94 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   22c86:	697b      	ldr	r3, [r7, #20]
   22c88:	2202      	movs	r2, #2
   22c8a:	4313      	orrs	r3, r2
   22c8c:	0018      	movs	r0, r3
   22c8e:	4b1e      	ldr	r3, [pc, #120]	; (22d08 <wait_for_bootrom+0x180>)
   22c90:	4798      	blx	r3
   22c92:	e003      	b.n	22c9c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   22c94:	697b      	ldr	r3, [r7, #20]
   22c96:	0018      	movs	r0, r3
   22c98:	4b1b      	ldr	r3, [pc, #108]	; (22d08 <wait_for_bootrom+0x180>)
   22c9a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   22c9c:	4b1b      	ldr	r3, [pc, #108]	; (22d0c <wait_for_bootrom+0x184>)
   22c9e:	0018      	movs	r0, r3
   22ca0:	4b1b      	ldr	r3, [pc, #108]	; (22d10 <wait_for_bootrom+0x188>)
   22ca2:	4798      	blx	r3
   22ca4:	68fa      	ldr	r2, [r7, #12]
   22ca6:	4b1b      	ldr	r3, [pc, #108]	; (22d14 <wait_for_bootrom+0x18c>)
   22ca8:	0011      	movs	r1, r2
   22caa:	0018      	movs	r0, r3
   22cac:	4b18      	ldr	r3, [pc, #96]	; (22d10 <wait_for_bootrom+0x188>)
   22cae:	4798      	blx	r3
   22cb0:	4b19      	ldr	r3, [pc, #100]	; (22d18 <wait_for_bootrom+0x190>)
   22cb2:	0018      	movs	r0, r3
   22cb4:	4b16      	ldr	r3, [pc, #88]	; (22d10 <wait_for_bootrom+0x188>)
   22cb6:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   22cb8:	4a18      	ldr	r2, [pc, #96]	; (22d1c <wait_for_bootrom+0x194>)
   22cba:	4b0b      	ldr	r3, [pc, #44]	; (22ce8 <wait_for_bootrom+0x160>)
   22cbc:	0011      	movs	r1, r2
   22cbe:	0018      	movs	r0, r3
   22cc0:	4b0d      	ldr	r3, [pc, #52]	; (22cf8 <wait_for_bootrom+0x170>)
   22cc2:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   22cc4:	2313      	movs	r3, #19
   22cc6:	18fb      	adds	r3, r7, r3
   22cc8:	781b      	ldrb	r3, [r3, #0]
   22cca:	b25b      	sxtb	r3, r3
}
   22ccc:	0018      	movs	r0, r3
   22cce:	46bd      	mov	sp, r7
   22cd0:	b008      	add	sp, #32
   22cd2:	bd80      	pop	{r7, pc}
   22cd4:	13301354 	.word	0x13301354
   22cd8:	00001014 	.word	0x00001014
   22cdc:	00022f11 	.word	0x00022f11
   22ce0:	000205c1 	.word	0x000205c1
   22ce4:	000207bc 	.word	0x000207bc
   22ce8:	000c000c 	.word	0x000c000c
   22cec:	10add09e 	.word	0x10add09e
   22cf0:	3c1cd57d 	.word	0x3c1cd57d
   22cf4:	000207ac 	.word	0x000207ac
   22cf8:	00022f55 	.word	0x00022f55
   22cfc:	0000108c 	.word	0x0000108c
   22d00:	00022831 	.word	0x00022831
   22d04:	0000039f 	.word	0x0000039f
   22d08:	00022701 	.word	0x00022701
   22d0c:	00038c60 	.word	0x00038c60
   22d10:	0001e529 	.word	0x0001e529
   22d14:	00038c6c 	.word	0x00038c6c
   22d18:	00038c40 	.word	0x00038c40
   22d1c:	ef522f61 	.word	0xef522f61

00022d20 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   22d20:	b580      	push	{r7, lr}
   22d22:	b088      	sub	sp, #32
   22d24:	af00      	add	r7, sp, #0
   22d26:	0002      	movs	r2, r0
   22d28:	1dfb      	adds	r3, r7, #7
   22d2a:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22d2c:	231f      	movs	r3, #31
   22d2e:	18fb      	adds	r3, r7, r3
   22d30:	2200      	movs	r2, #0
   22d32:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   22d34:	2300      	movs	r3, #0
   22d36:	61bb      	str	r3, [r7, #24]
   22d38:	2300      	movs	r3, #0
   22d3a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   22d3c:	2301      	movs	r3, #1
   22d3e:	425b      	negs	r3, r3
   22d40:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   22d42:	4b1d      	ldr	r3, [pc, #116]	; (22db8 <wait_for_firmware_start+0x98>)
   22d44:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   22d46:	4b1d      	ldr	r3, [pc, #116]	; (22dbc <wait_for_firmware_start+0x9c>)
   22d48:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   22d4a:	1dfb      	adds	r3, r7, #7
   22d4c:	781b      	ldrb	r3, [r3, #0]
   22d4e:	2b02      	cmp	r3, #2
   22d50:	d003      	beq.n	22d5a <wait_for_firmware_start+0x3a>
   22d52:	1dfb      	adds	r3, r7, #7
   22d54:	781b      	ldrb	r3, [r3, #0]
   22d56:	2b03      	cmp	r3, #3
   22d58:	d119      	bne.n	22d8e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   22d5a:	4b19      	ldr	r3, [pc, #100]	; (22dc0 <wait_for_firmware_start+0xa0>)
   22d5c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   22d5e:	4b19      	ldr	r3, [pc, #100]	; (22dc4 <wait_for_firmware_start+0xa4>)
   22d60:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   22d62:	e014      	b.n	22d8e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   22d64:	2002      	movs	r0, #2
   22d66:	4b18      	ldr	r3, [pc, #96]	; (22dc8 <wait_for_firmware_start+0xa8>)
   22d68:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   22d6a:	68fb      	ldr	r3, [r7, #12]
   22d6c:	0018      	movs	r0, r3
   22d6e:	4b17      	ldr	r3, [pc, #92]	; (22dcc <wait_for_firmware_start+0xac>)
   22d70:	4798      	blx	r3
   22d72:	0003      	movs	r3, r0
   22d74:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   22d76:	697b      	ldr	r3, [r7, #20]
   22d78:	3301      	adds	r3, #1
   22d7a:	617b      	str	r3, [r7, #20]
   22d7c:	697a      	ldr	r2, [r7, #20]
   22d7e:	693b      	ldr	r3, [r7, #16]
   22d80:	429a      	cmp	r2, r3
   22d82:	d304      	bcc.n	22d8e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   22d84:	231f      	movs	r3, #31
   22d86:	18fb      	adds	r3, r7, r3
   22d88:	22fb      	movs	r2, #251	; 0xfb
   22d8a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   22d8c:	e00c      	b.n	22da8 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   22d8e:	68ba      	ldr	r2, [r7, #8]
   22d90:	69bb      	ldr	r3, [r7, #24]
   22d92:	429a      	cmp	r2, r3
   22d94:	d1e6      	bne.n	22d64 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   22d96:	68bb      	ldr	r3, [r7, #8]
   22d98:	4a08      	ldr	r2, [pc, #32]	; (22dbc <wait_for_firmware_start+0x9c>)
   22d9a:	4293      	cmp	r3, r2
   22d9c:	d104      	bne.n	22da8 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   22d9e:	4b06      	ldr	r3, [pc, #24]	; (22db8 <wait_for_firmware_start+0x98>)
   22da0:	2100      	movs	r1, #0
   22da2:	0018      	movs	r0, r3
   22da4:	4b0a      	ldr	r3, [pc, #40]	; (22dd0 <wait_for_firmware_start+0xb0>)
   22da6:	4798      	blx	r3
	}
ERR:
	return ret;
   22da8:	231f      	movs	r3, #31
   22daa:	18fb      	adds	r3, r7, r3
   22dac:	781b      	ldrb	r3, [r3, #0]
   22dae:	b25b      	sxtb	r3, r3
}
   22db0:	0018      	movs	r0, r3
   22db2:	46bd      	mov	sp, r7
   22db4:	b008      	add	sp, #32
   22db6:	bd80      	pop	{r7, pc}
   22db8:	0000108c 	.word	0x0000108c
   22dbc:	02532636 	.word	0x02532636
   22dc0:	000207ac 	.word	0x000207ac
   22dc4:	d75dc1c3 	.word	0xd75dc1c3
   22dc8:	000205c1 	.word	0x000205c1
   22dcc:	00022f11 	.word	0x00022f11
   22dd0:	00022f55 	.word	0x00022f55

00022dd4 <chip_deinit>:

sint8 chip_deinit(void)
{
   22dd4:	b590      	push	{r4, r7, lr}
   22dd6:	b083      	sub	sp, #12
   22dd8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   22dda:	2300      	movs	r3, #0
   22ddc:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   22dde:	1dfc      	adds	r4, r7, #7
   22de0:	003a      	movs	r2, r7
   22de2:	23a0      	movs	r3, #160	; 0xa0
   22de4:	015b      	lsls	r3, r3, #5
   22de6:	0011      	movs	r1, r2
   22de8:	0018      	movs	r0, r3
   22dea:	4b20      	ldr	r3, [pc, #128]	; (22e6c <chip_deinit+0x98>)
   22dec:	4798      	blx	r3
   22dee:	0003      	movs	r3, r0
   22df0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22df2:	1dfb      	adds	r3, r7, #7
   22df4:	781b      	ldrb	r3, [r3, #0]
   22df6:	b25b      	sxtb	r3, r3
   22df8:	2b00      	cmp	r3, #0
   22dfa:	d00e      	beq.n	22e1a <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   22dfc:	4a1c      	ldr	r2, [pc, #112]	; (22e70 <chip_deinit+0x9c>)
   22dfe:	491d      	ldr	r1, [pc, #116]	; (22e74 <chip_deinit+0xa0>)
   22e00:	4b1d      	ldr	r3, [pc, #116]	; (22e78 <chip_deinit+0xa4>)
   22e02:	0018      	movs	r0, r3
   22e04:	4b1d      	ldr	r3, [pc, #116]	; (22e7c <chip_deinit+0xa8>)
   22e06:	4798      	blx	r3
   22e08:	4b1d      	ldr	r3, [pc, #116]	; (22e80 <chip_deinit+0xac>)
   22e0a:	0018      	movs	r0, r3
   22e0c:	4b1b      	ldr	r3, [pc, #108]	; (22e7c <chip_deinit+0xa8>)
   22e0e:	4798      	blx	r3
   22e10:	4b1c      	ldr	r3, [pc, #112]	; (22e84 <chip_deinit+0xb0>)
   22e12:	0018      	movs	r0, r3
   22e14:	4b19      	ldr	r3, [pc, #100]	; (22e7c <chip_deinit+0xa8>)
   22e16:	4798      	blx	r3
		goto ERR1;
   22e18:	e021      	b.n	22e5e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   22e1a:	683b      	ldr	r3, [r7, #0]
   22e1c:	4a1a      	ldr	r2, [pc, #104]	; (22e88 <chip_deinit+0xb4>)
   22e1e:	4013      	ands	r3, r2
   22e20:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   22e22:	683a      	ldr	r2, [r7, #0]
   22e24:	1dfc      	adds	r4, r7, #7
   22e26:	23a0      	movs	r3, #160	; 0xa0
   22e28:	015b      	lsls	r3, r3, #5
   22e2a:	0011      	movs	r1, r2
   22e2c:	0018      	movs	r0, r3
   22e2e:	4b17      	ldr	r3, [pc, #92]	; (22e8c <chip_deinit+0xb8>)
   22e30:	4798      	blx	r3
   22e32:	0003      	movs	r3, r0
   22e34:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   22e36:	1dfb      	adds	r3, r7, #7
   22e38:	781b      	ldrb	r3, [r3, #0]
   22e3a:	b25b      	sxtb	r3, r3
   22e3c:	2b00      	cmp	r3, #0
   22e3e:	d00e      	beq.n	22e5e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   22e40:	4a13      	ldr	r2, [pc, #76]	; (22e90 <chip_deinit+0xbc>)
   22e42:	490c      	ldr	r1, [pc, #48]	; (22e74 <chip_deinit+0xa0>)
   22e44:	4b0c      	ldr	r3, [pc, #48]	; (22e78 <chip_deinit+0xa4>)
   22e46:	0018      	movs	r0, r3
   22e48:	4b0c      	ldr	r3, [pc, #48]	; (22e7c <chip_deinit+0xa8>)
   22e4a:	4798      	blx	r3
   22e4c:	4b0c      	ldr	r3, [pc, #48]	; (22e80 <chip_deinit+0xac>)
   22e4e:	0018      	movs	r0, r3
   22e50:	4b0a      	ldr	r3, [pc, #40]	; (22e7c <chip_deinit+0xa8>)
   22e52:	4798      	blx	r3
   22e54:	4b0b      	ldr	r3, [pc, #44]	; (22e84 <chip_deinit+0xb0>)
   22e56:	0018      	movs	r0, r3
   22e58:	4b08      	ldr	r3, [pc, #32]	; (22e7c <chip_deinit+0xa8>)
   22e5a:	4798      	blx	r3
		goto ERR1;
   22e5c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   22e5e:	1dfb      	adds	r3, r7, #7
   22e60:	781b      	ldrb	r3, [r3, #0]
   22e62:	b25b      	sxtb	r3, r3
}
   22e64:	0018      	movs	r0, r3
   22e66:	46bd      	mov	sp, r7
   22e68:	b003      	add	sp, #12
   22e6a:	bd90      	pop	{r4, r7, pc}
   22e6c:	00022f31 	.word	0x00022f31
   22e70:	00000201 	.word	0x00000201
   22e74:	00038cac 	.word	0x00038cac
   22e78:	00038c14 	.word	0x00038c14
   22e7c:	0001e529 	.word	0x0001e529
   22e80:	00038c84 	.word	0x00038c84
   22e84:	00038c40 	.word	0x00038c40
   22e88:	fffffbff 	.word	0xfffffbff
   22e8c:	00022f55 	.word	0x00022f55
   22e90:	00000207 	.word	0x00000207

00022e94 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   22e94:	b590      	push	{r4, r7, lr}
   22e96:	b085      	sub	sp, #20
   22e98:	af00      	add	r7, sp, #0
   22e9a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   22e9c:	230f      	movs	r3, #15
   22e9e:	18fb      	adds	r3, r7, r3
   22ea0:	2200      	movs	r2, #0
   22ea2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   22ea4:	230f      	movs	r3, #15
   22ea6:	18fc      	adds	r4, r7, r3
   22ea8:	687b      	ldr	r3, [r7, #4]
   22eaa:	0018      	movs	r0, r3
   22eac:	4b05      	ldr	r3, [pc, #20]	; (22ec4 <nm_bus_iface_init+0x30>)
   22eae:	4798      	blx	r3
   22eb0:	0003      	movs	r3, r0
   22eb2:	7023      	strb	r3, [r4, #0]
	return ret;
   22eb4:	230f      	movs	r3, #15
   22eb6:	18fb      	adds	r3, r7, r3
   22eb8:	781b      	ldrb	r3, [r3, #0]
   22eba:	b25b      	sxtb	r3, r3
}
   22ebc:	0018      	movs	r0, r3
   22ebe:	46bd      	mov	sp, r7
   22ec0:	b005      	add	sp, #20
   22ec2:	bd90      	pop	{r4, r7, pc}
   22ec4:	00020c7d 	.word	0x00020c7d

00022ec8 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   22ec8:	b590      	push	{r4, r7, lr}
   22eca:	b083      	sub	sp, #12
   22ecc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22ece:	1dfb      	adds	r3, r7, #7
   22ed0:	2200      	movs	r2, #0
   22ed2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   22ed4:	1dfc      	adds	r4, r7, #7
   22ed6:	4b05      	ldr	r3, [pc, #20]	; (22eec <nm_bus_iface_deinit+0x24>)
   22ed8:	4798      	blx	r3
   22eda:	0003      	movs	r3, r0
   22edc:	7023      	strb	r3, [r4, #0]

	return ret;
   22ede:	1dfb      	adds	r3, r7, #7
   22ee0:	781b      	ldrb	r3, [r3, #0]
   22ee2:	b25b      	sxtb	r3, r3
}
   22ee4:	0018      	movs	r0, r3
   22ee6:	46bd      	mov	sp, r7
   22ee8:	b003      	add	sp, #12
   22eea:	bd90      	pop	{r4, r7, pc}
   22eec:	00020df5 	.word	0x00020df5

00022ef0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   22ef0:	b580      	push	{r7, lr}
   22ef2:	b082      	sub	sp, #8
   22ef4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   22ef6:	1dfb      	adds	r3, r7, #7
   22ef8:	2200      	movs	r2, #0
   22efa:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   22efc:	4b03      	ldr	r3, [pc, #12]	; (22f0c <nm_bus_reset+0x1c>)
   22efe:	4798      	blx	r3
   22f00:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   22f02:	0018      	movs	r0, r3
   22f04:	46bd      	mov	sp, r7
   22f06:	b002      	add	sp, #8
   22f08:	bd80      	pop	{r7, pc}
   22f0a:	46c0      	nop			; (mov r8, r8)
   22f0c:	00024d1d 	.word	0x00024d1d

00022f10 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   22f10:	b580      	push	{r7, lr}
   22f12:	b082      	sub	sp, #8
   22f14:	af00      	add	r7, sp, #0
   22f16:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   22f18:	687b      	ldr	r3, [r7, #4]
   22f1a:	0018      	movs	r0, r3
   22f1c:	4b03      	ldr	r3, [pc, #12]	; (22f2c <nm_read_reg+0x1c>)
   22f1e:	4798      	blx	r3
   22f20:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   22f22:	0018      	movs	r0, r3
   22f24:	46bd      	mov	sp, r7
   22f26:	b002      	add	sp, #8
   22f28:	bd80      	pop	{r7, pc}
   22f2a:	46c0      	nop			; (mov r8, r8)
   22f2c:	00024eb1 	.word	0x00024eb1

00022f30 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   22f30:	b580      	push	{r7, lr}
   22f32:	b082      	sub	sp, #8
   22f34:	af00      	add	r7, sp, #0
   22f36:	6078      	str	r0, [r7, #4]
   22f38:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   22f3a:	683a      	ldr	r2, [r7, #0]
   22f3c:	687b      	ldr	r3, [r7, #4]
   22f3e:	0011      	movs	r1, r2
   22f40:	0018      	movs	r0, r3
   22f42:	4b03      	ldr	r3, [pc, #12]	; (22f50 <nm_read_reg_with_ret+0x20>)
   22f44:	4798      	blx	r3
   22f46:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   22f48:	0018      	movs	r0, r3
   22f4a:	46bd      	mov	sp, r7
   22f4c:	b002      	add	sp, #8
   22f4e:	bd80      	pop	{r7, pc}
   22f50:	00024ed5 	.word	0x00024ed5

00022f54 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   22f54:	b580      	push	{r7, lr}
   22f56:	b082      	sub	sp, #8
   22f58:	af00      	add	r7, sp, #0
   22f5a:	6078      	str	r0, [r7, #4]
   22f5c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   22f5e:	683a      	ldr	r2, [r7, #0]
   22f60:	687b      	ldr	r3, [r7, #4]
   22f62:	0011      	movs	r1, r2
   22f64:	0018      	movs	r0, r3
   22f66:	4b03      	ldr	r3, [pc, #12]	; (22f74 <nm_write_reg+0x20>)
   22f68:	4798      	blx	r3
   22f6a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   22f6c:	0018      	movs	r0, r3
   22f6e:	46bd      	mov	sp, r7
   22f70:	b002      	add	sp, #8
   22f72:	bd80      	pop	{r7, pc}
   22f74:	00024f25 	.word	0x00024f25

00022f78 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   22f78:	b580      	push	{r7, lr}
   22f7a:	b084      	sub	sp, #16
   22f7c:	af00      	add	r7, sp, #0
   22f7e:	60f8      	str	r0, [r7, #12]
   22f80:	60b9      	str	r1, [r7, #8]
   22f82:	1dbb      	adds	r3, r7, #6
   22f84:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   22f86:	1dbb      	adds	r3, r7, #6
   22f88:	881a      	ldrh	r2, [r3, #0]
   22f8a:	68b9      	ldr	r1, [r7, #8]
   22f8c:	68fb      	ldr	r3, [r7, #12]
   22f8e:	0018      	movs	r0, r3
   22f90:	4b03      	ldr	r3, [pc, #12]	; (22fa0 <p_nm_read_block+0x28>)
   22f92:	4798      	blx	r3
   22f94:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   22f96:	0018      	movs	r0, r3
   22f98:	46bd      	mov	sp, r7
   22f9a:	b004      	add	sp, #16
   22f9c:	bd80      	pop	{r7, pc}
   22f9e:	46c0      	nop			; (mov r8, r8)
   22fa0:	00024f75 	.word	0x00024f75

00022fa4 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   22fa4:	b580      	push	{r7, lr}
   22fa6:	b086      	sub	sp, #24
   22fa8:	af00      	add	r7, sp, #0
   22faa:	60f8      	str	r0, [r7, #12]
   22fac:	60b9      	str	r1, [r7, #8]
   22fae:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   22fb0:	4b2d      	ldr	r3, [pc, #180]	; (23068 <nm_read_block+0xc4>)
   22fb2:	881a      	ldrh	r2, [r3, #0]
   22fb4:	2310      	movs	r3, #16
   22fb6:	18fb      	adds	r3, r7, r3
   22fb8:	3a08      	subs	r2, #8
   22fba:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   22fbc:	2300      	movs	r3, #0
   22fbe:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   22fc0:	2313      	movs	r3, #19
   22fc2:	18fb      	adds	r3, r7, r3
   22fc4:	2200      	movs	r2, #0
   22fc6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   22fc8:	2310      	movs	r3, #16
   22fca:	18fb      	adds	r3, r7, r3
   22fcc:	881a      	ldrh	r2, [r3, #0]
   22fce:	687b      	ldr	r3, [r7, #4]
   22fd0:	429a      	cmp	r2, r3
   22fd2:	d313      	bcc.n	22ffc <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   22fd4:	68ba      	ldr	r2, [r7, #8]
   22fd6:	697b      	ldr	r3, [r7, #20]
   22fd8:	18d1      	adds	r1, r2, r3
   22fda:	687b      	ldr	r3, [r7, #4]
   22fdc:	b29a      	uxth	r2, r3
   22fde:	68fb      	ldr	r3, [r7, #12]
   22fe0:	0018      	movs	r0, r3
   22fe2:	4b22      	ldr	r3, [pc, #136]	; (2306c <nm_read_block+0xc8>)
   22fe4:	4798      	blx	r3
   22fe6:	0003      	movs	r3, r0
   22fe8:	b2da      	uxtb	r2, r3
   22fea:	2313      	movs	r3, #19
   22fec:	18fb      	adds	r3, r7, r3
   22fee:	781b      	ldrb	r3, [r3, #0]
   22ff0:	18d3      	adds	r3, r2, r3
   22ff2:	b2da      	uxtb	r2, r3
   22ff4:	2313      	movs	r3, #19
   22ff6:	18fb      	adds	r3, r7, r3
   22ff8:	701a      	strb	r2, [r3, #0]
			break;
   22ffa:	e02d      	b.n	23058 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   22ffc:	68ba      	ldr	r2, [r7, #8]
   22ffe:	697b      	ldr	r3, [r7, #20]
   23000:	18d1      	adds	r1, r2, r3
   23002:	2310      	movs	r3, #16
   23004:	18fb      	adds	r3, r7, r3
   23006:	881a      	ldrh	r2, [r3, #0]
   23008:	68fb      	ldr	r3, [r7, #12]
   2300a:	0018      	movs	r0, r3
   2300c:	4b17      	ldr	r3, [pc, #92]	; (2306c <nm_read_block+0xc8>)
   2300e:	4798      	blx	r3
   23010:	0003      	movs	r3, r0
   23012:	b2da      	uxtb	r2, r3
   23014:	2313      	movs	r3, #19
   23016:	18fb      	adds	r3, r7, r3
   23018:	781b      	ldrb	r3, [r3, #0]
   2301a:	18d3      	adds	r3, r2, r3
   2301c:	b2da      	uxtb	r2, r3
   2301e:	2313      	movs	r3, #19
   23020:	18fb      	adds	r3, r7, r3
   23022:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23024:	2313      	movs	r3, #19
   23026:	18fb      	adds	r3, r7, r3
   23028:	781b      	ldrb	r3, [r3, #0]
   2302a:	b25b      	sxtb	r3, r3
   2302c:	2b00      	cmp	r3, #0
   2302e:	d112      	bne.n	23056 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23030:	2310      	movs	r3, #16
   23032:	18fb      	adds	r3, r7, r3
   23034:	881b      	ldrh	r3, [r3, #0]
   23036:	687a      	ldr	r2, [r7, #4]
   23038:	1ad3      	subs	r3, r2, r3
   2303a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   2303c:	2310      	movs	r3, #16
   2303e:	18fb      	adds	r3, r7, r3
   23040:	881b      	ldrh	r3, [r3, #0]
   23042:	697a      	ldr	r2, [r7, #20]
   23044:	18d3      	adds	r3, r2, r3
   23046:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23048:	2310      	movs	r3, #16
   2304a:	18fb      	adds	r3, r7, r3
   2304c:	881b      	ldrh	r3, [r3, #0]
   2304e:	68fa      	ldr	r2, [r7, #12]
   23050:	18d3      	adds	r3, r2, r3
   23052:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23054:	e7b8      	b.n	22fc8 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23056:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23058:	2313      	movs	r3, #19
   2305a:	18fb      	adds	r3, r7, r3
   2305c:	781b      	ldrb	r3, [r3, #0]
   2305e:	b25b      	sxtb	r3, r3
}
   23060:	0018      	movs	r0, r3
   23062:	46bd      	mov	sp, r7
   23064:	b006      	add	sp, #24
   23066:	bd80      	pop	{r7, pc}
   23068:	200000c8 	.word	0x200000c8
   2306c:	00022f79 	.word	0x00022f79

00023070 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23070:	b580      	push	{r7, lr}
   23072:	b084      	sub	sp, #16
   23074:	af00      	add	r7, sp, #0
   23076:	60f8      	str	r0, [r7, #12]
   23078:	60b9      	str	r1, [r7, #8]
   2307a:	1dbb      	adds	r3, r7, #6
   2307c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   2307e:	1dbb      	adds	r3, r7, #6
   23080:	881a      	ldrh	r2, [r3, #0]
   23082:	68b9      	ldr	r1, [r7, #8]
   23084:	68fb      	ldr	r3, [r7, #12]
   23086:	0018      	movs	r0, r3
   23088:	4b03      	ldr	r3, [pc, #12]	; (23098 <p_nm_write_block+0x28>)
   2308a:	4798      	blx	r3
   2308c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2308e:	0018      	movs	r0, r3
   23090:	46bd      	mov	sp, r7
   23092:	b004      	add	sp, #16
   23094:	bd80      	pop	{r7, pc}
   23096:	46c0      	nop			; (mov r8, r8)
   23098:	00024fcd 	.word	0x00024fcd

0002309c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   2309c:	b580      	push	{r7, lr}
   2309e:	b086      	sub	sp, #24
   230a0:	af00      	add	r7, sp, #0
   230a2:	60f8      	str	r0, [r7, #12]
   230a4:	60b9      	str	r1, [r7, #8]
   230a6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   230a8:	4b2d      	ldr	r3, [pc, #180]	; (23160 <nm_write_block+0xc4>)
   230aa:	881a      	ldrh	r2, [r3, #0]
   230ac:	2310      	movs	r3, #16
   230ae:	18fb      	adds	r3, r7, r3
   230b0:	3a08      	subs	r2, #8
   230b2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   230b4:	2300      	movs	r3, #0
   230b6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   230b8:	2313      	movs	r3, #19
   230ba:	18fb      	adds	r3, r7, r3
   230bc:	2200      	movs	r2, #0
   230be:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   230c0:	2310      	movs	r3, #16
   230c2:	18fb      	adds	r3, r7, r3
   230c4:	881a      	ldrh	r2, [r3, #0]
   230c6:	687b      	ldr	r3, [r7, #4]
   230c8:	429a      	cmp	r2, r3
   230ca:	d313      	bcc.n	230f4 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   230cc:	68ba      	ldr	r2, [r7, #8]
   230ce:	697b      	ldr	r3, [r7, #20]
   230d0:	18d1      	adds	r1, r2, r3
   230d2:	687b      	ldr	r3, [r7, #4]
   230d4:	b29a      	uxth	r2, r3
   230d6:	68fb      	ldr	r3, [r7, #12]
   230d8:	0018      	movs	r0, r3
   230da:	4b22      	ldr	r3, [pc, #136]	; (23164 <nm_write_block+0xc8>)
   230dc:	4798      	blx	r3
   230de:	0003      	movs	r3, r0
   230e0:	b2da      	uxtb	r2, r3
   230e2:	2313      	movs	r3, #19
   230e4:	18fb      	adds	r3, r7, r3
   230e6:	781b      	ldrb	r3, [r3, #0]
   230e8:	18d3      	adds	r3, r2, r3
   230ea:	b2da      	uxtb	r2, r3
   230ec:	2313      	movs	r3, #19
   230ee:	18fb      	adds	r3, r7, r3
   230f0:	701a      	strb	r2, [r3, #0]
			break;
   230f2:	e02d      	b.n	23150 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   230f4:	68ba      	ldr	r2, [r7, #8]
   230f6:	697b      	ldr	r3, [r7, #20]
   230f8:	18d1      	adds	r1, r2, r3
   230fa:	2310      	movs	r3, #16
   230fc:	18fb      	adds	r3, r7, r3
   230fe:	881a      	ldrh	r2, [r3, #0]
   23100:	68fb      	ldr	r3, [r7, #12]
   23102:	0018      	movs	r0, r3
   23104:	4b17      	ldr	r3, [pc, #92]	; (23164 <nm_write_block+0xc8>)
   23106:	4798      	blx	r3
   23108:	0003      	movs	r3, r0
   2310a:	b2da      	uxtb	r2, r3
   2310c:	2313      	movs	r3, #19
   2310e:	18fb      	adds	r3, r7, r3
   23110:	781b      	ldrb	r3, [r3, #0]
   23112:	18d3      	adds	r3, r2, r3
   23114:	b2da      	uxtb	r2, r3
   23116:	2313      	movs	r3, #19
   23118:	18fb      	adds	r3, r7, r3
   2311a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   2311c:	2313      	movs	r3, #19
   2311e:	18fb      	adds	r3, r7, r3
   23120:	781b      	ldrb	r3, [r3, #0]
   23122:	b25b      	sxtb	r3, r3
   23124:	2b00      	cmp	r3, #0
   23126:	d112      	bne.n	2314e <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23128:	2310      	movs	r3, #16
   2312a:	18fb      	adds	r3, r7, r3
   2312c:	881b      	ldrh	r3, [r3, #0]
   2312e:	687a      	ldr	r2, [r7, #4]
   23130:	1ad3      	subs	r3, r2, r3
   23132:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23134:	2310      	movs	r3, #16
   23136:	18fb      	adds	r3, r7, r3
   23138:	881b      	ldrh	r3, [r3, #0]
   2313a:	697a      	ldr	r2, [r7, #20]
   2313c:	18d3      	adds	r3, r2, r3
   2313e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23140:	2310      	movs	r3, #16
   23142:	18fb      	adds	r3, r7, r3
   23144:	881b      	ldrh	r3, [r3, #0]
   23146:	68fa      	ldr	r2, [r7, #12]
   23148:	18d3      	adds	r3, r2, r3
   2314a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   2314c:	e7b8      	b.n	230c0 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   2314e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23150:	2313      	movs	r3, #19
   23152:	18fb      	adds	r3, r7, r3
   23154:	781b      	ldrb	r3, [r3, #0]
   23156:	b25b      	sxtb	r3, r3
}
   23158:	0018      	movs	r0, r3
   2315a:	46bd      	mov	sp, r7
   2315c:	b006      	add	sp, #24
   2315e:	bd80      	pop	{r7, pc}
   23160:	200000c8 	.word	0x200000c8
   23164:	00023071 	.word	0x00023071

00023168 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   23168:	b590      	push	{r4, r7, lr}
   2316a:	b089      	sub	sp, #36	; 0x24
   2316c:	af00      	add	r7, sp, #0
   2316e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23170:	2300      	movs	r3, #0
   23172:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23174:	231f      	movs	r3, #31
   23176:	18fb      	adds	r3, r7, r3
   23178:	2200      	movs	r2, #0
   2317a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   2317c:	230c      	movs	r3, #12
   2317e:	18fb      	adds	r3, r7, r3
   23180:	0018      	movs	r0, r3
   23182:	2308      	movs	r3, #8
   23184:	001a      	movs	r2, r3
   23186:	2100      	movs	r1, #0
   23188:	4b64      	ldr	r3, [pc, #400]	; (2331c <nm_get_firmware_full_info+0x1b4>)
   2318a:	4798      	blx	r3
	if (pstrRev != NULL)
   2318c:	687b      	ldr	r3, [r7, #4]
   2318e:	2b00      	cmp	r3, #0
   23190:	d100      	bne.n	23194 <nm_get_firmware_full_info+0x2c>
   23192:	e0ba      	b.n	2330a <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23194:	687b      	ldr	r3, [r7, #4]
   23196:	2228      	movs	r2, #40	; 0x28
   23198:	2100      	movs	r1, #0
   2319a:	0018      	movs	r0, r3
   2319c:	4b60      	ldr	r3, [pc, #384]	; (23320 <nm_get_firmware_full_info+0x1b8>)
   2319e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   231a0:	231f      	movs	r3, #31
   231a2:	18fc      	adds	r4, r7, r3
   231a4:	2314      	movs	r3, #20
   231a6:	18fb      	adds	r3, r7, r3
   231a8:	4a5e      	ldr	r2, [pc, #376]	; (23324 <nm_get_firmware_full_info+0x1bc>)
   231aa:	0019      	movs	r1, r3
   231ac:	0010      	movs	r0, r2
   231ae:	4b5e      	ldr	r3, [pc, #376]	; (23328 <nm_get_firmware_full_info+0x1c0>)
   231b0:	4798      	blx	r3
   231b2:	0003      	movs	r3, r0
   231b4:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   231b6:	231f      	movs	r3, #31
   231b8:	18fb      	adds	r3, r7, r3
   231ba:	781b      	ldrb	r3, [r3, #0]
   231bc:	b25b      	sxtb	r3, r3
   231be:	2b00      	cmp	r3, #0
   231c0:	d000      	beq.n	231c4 <nm_get_firmware_full_info+0x5c>
   231c2:	e0a2      	b.n	2330a <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   231c4:	697b      	ldr	r3, [r7, #20]
   231c6:	2b00      	cmp	r3, #0
   231c8:	d100      	bne.n	231cc <nm_get_firmware_full_info+0x64>
   231ca:	e09a      	b.n	23302 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   231cc:	697b      	ldr	r3, [r7, #20]
   231ce:	22c0      	movs	r2, #192	; 0xc0
   231d0:	0292      	lsls	r2, r2, #10
   231d2:	4313      	orrs	r3, r2
   231d4:	221f      	movs	r2, #31
   231d6:	18bc      	adds	r4, r7, r2
   231d8:	220c      	movs	r2, #12
   231da:	18b9      	adds	r1, r7, r2
   231dc:	2208      	movs	r2, #8
   231de:	0018      	movs	r0, r3
   231e0:	4b52      	ldr	r3, [pc, #328]	; (2332c <nm_get_firmware_full_info+0x1c4>)
   231e2:	4798      	blx	r3
   231e4:	0003      	movs	r3, r0
   231e6:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   231e8:	231f      	movs	r3, #31
   231ea:	18fb      	adds	r3, r7, r3
   231ec:	781b      	ldrb	r3, [r3, #0]
   231ee:	b25b      	sxtb	r3, r3
   231f0:	2b00      	cmp	r3, #0
   231f2:	d000      	beq.n	231f6 <nm_get_firmware_full_info+0x8e>
   231f4:	e089      	b.n	2330a <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   231f6:	230c      	movs	r3, #12
   231f8:	18fb      	adds	r3, r7, r3
   231fa:	685b      	ldr	r3, [r3, #4]
   231fc:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   231fe:	697b      	ldr	r3, [r7, #20]
   23200:	041b      	lsls	r3, r3, #16
   23202:	0c1b      	lsrs	r3, r3, #16
   23204:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   23206:	697b      	ldr	r3, [r7, #20]
   23208:	2b00      	cmp	r3, #0
   2320a:	d100      	bne.n	2320e <nm_get_firmware_full_info+0xa6>
   2320c:	e074      	b.n	232f8 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   2320e:	697b      	ldr	r3, [r7, #20]
   23210:	22c0      	movs	r2, #192	; 0xc0
   23212:	0292      	lsls	r2, r2, #10
   23214:	4313      	orrs	r3, r2
   23216:	221f      	movs	r2, #31
   23218:	18bc      	adds	r4, r7, r2
   2321a:	6879      	ldr	r1, [r7, #4]
   2321c:	2228      	movs	r2, #40	; 0x28
   2321e:	0018      	movs	r0, r3
   23220:	4b42      	ldr	r3, [pc, #264]	; (2332c <nm_get_firmware_full_info+0x1c4>)
   23222:	4798      	blx	r3
   23224:	0003      	movs	r3, r0
   23226:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23228:	231f      	movs	r3, #31
   2322a:	18fb      	adds	r3, r7, r3
   2322c:	781b      	ldrb	r3, [r3, #0]
   2322e:	b25b      	sxtb	r3, r3
   23230:	2b00      	cmp	r3, #0
   23232:	d16a      	bne.n	2330a <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23234:	687b      	ldr	r3, [r7, #4]
   23236:	791b      	ldrb	r3, [r3, #4]
   23238:	021b      	lsls	r3, r3, #8
   2323a:	b21a      	sxth	r2, r3
   2323c:	687b      	ldr	r3, [r7, #4]
   2323e:	795b      	ldrb	r3, [r3, #5]
   23240:	011b      	lsls	r3, r3, #4
   23242:	b21b      	sxth	r3, r3
   23244:	21ff      	movs	r1, #255	; 0xff
   23246:	400b      	ands	r3, r1
   23248:	b21b      	sxth	r3, r3
   2324a:	4313      	orrs	r3, r2
   2324c:	b21a      	sxth	r2, r3
   2324e:	687b      	ldr	r3, [r7, #4]
   23250:	799b      	ldrb	r3, [r3, #6]
   23252:	b21b      	sxth	r3, r3
   23254:	210f      	movs	r1, #15
   23256:	400b      	ands	r3, r1
   23258:	b21b      	sxth	r3, r3
   2325a:	4313      	orrs	r3, r2
   2325c:	b21a      	sxth	r2, r3
   2325e:	231c      	movs	r3, #28
   23260:	18fb      	adds	r3, r7, r3
   23262:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23264:	231a      	movs	r3, #26
   23266:	18fb      	adds	r3, r7, r3
   23268:	4a31      	ldr	r2, [pc, #196]	; (23330 <nm_get_firmware_full_info+0x1c8>)
   2326a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   2326c:	687b      	ldr	r3, [r7, #4]
   2326e:	79db      	ldrb	r3, [r3, #7]
   23270:	021b      	lsls	r3, r3, #8
   23272:	b21a      	sxth	r2, r3
   23274:	687b      	ldr	r3, [r7, #4]
   23276:	7a1b      	ldrb	r3, [r3, #8]
   23278:	011b      	lsls	r3, r3, #4
   2327a:	b21b      	sxth	r3, r3
   2327c:	21ff      	movs	r1, #255	; 0xff
   2327e:	400b      	ands	r3, r1
   23280:	b21b      	sxth	r3, r3
   23282:	4313      	orrs	r3, r2
   23284:	b21a      	sxth	r2, r3
   23286:	687b      	ldr	r3, [r7, #4]
   23288:	7a5b      	ldrb	r3, [r3, #9]
   2328a:	b21b      	sxth	r3, r3
   2328c:	210f      	movs	r1, #15
   2328e:	400b      	ands	r3, r1
   23290:	b21b      	sxth	r3, r3
   23292:	4313      	orrs	r3, r2
   23294:	b21a      	sxth	r2, r3
   23296:	2318      	movs	r3, #24
   23298:	18fb      	adds	r3, r7, r3
   2329a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   2329c:	231c      	movs	r3, #28
   2329e:	18fb      	adds	r3, r7, r3
   232a0:	881b      	ldrh	r3, [r3, #0]
   232a2:	2b00      	cmp	r3, #0
   232a4:	d009      	beq.n	232ba <nm_get_firmware_full_info+0x152>
   232a6:	2318      	movs	r3, #24
   232a8:	18fb      	adds	r3, r7, r3
   232aa:	881b      	ldrh	r3, [r3, #0]
   232ac:	2b00      	cmp	r3, #0
   232ae:	d004      	beq.n	232ba <nm_get_firmware_full_info+0x152>
   232b0:	2318      	movs	r3, #24
   232b2:	18fb      	adds	r3, r7, r3
   232b4:	881b      	ldrh	r3, [r3, #0]
   232b6:	2b00      	cmp	r3, #0
   232b8:	d104      	bne.n	232c4 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   232ba:	231f      	movs	r3, #31
   232bc:	18fb      	adds	r3, r7, r3
   232be:	22f4      	movs	r2, #244	; 0xf4
   232c0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   232c2:	e022      	b.n	2330a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   232c4:	231a      	movs	r3, #26
   232c6:	18fa      	adds	r2, r7, r3
   232c8:	2318      	movs	r3, #24
   232ca:	18fb      	adds	r3, r7, r3
   232cc:	8812      	ldrh	r2, [r2, #0]
   232ce:	881b      	ldrh	r3, [r3, #0]
   232d0:	429a      	cmp	r2, r3
   232d2:	d204      	bcs.n	232de <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   232d4:	231f      	movs	r3, #31
   232d6:	18fb      	adds	r3, r7, r3
   232d8:	22f3      	movs	r2, #243	; 0xf3
   232da:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   232dc:	e015      	b.n	2330a <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   232de:	231a      	movs	r3, #26
   232e0:	18fa      	adds	r2, r7, r3
   232e2:	231c      	movs	r3, #28
   232e4:	18fb      	adds	r3, r7, r3
   232e6:	8812      	ldrh	r2, [r2, #0]
   232e8:	881b      	ldrh	r3, [r3, #0]
   232ea:	429a      	cmp	r2, r3
   232ec:	d90d      	bls.n	2330a <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   232ee:	231f      	movs	r3, #31
   232f0:	18fb      	adds	r3, r7, r3
   232f2:	22f3      	movs	r2, #243	; 0xf3
   232f4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   232f6:	e008      	b.n	2330a <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   232f8:	231f      	movs	r3, #31
   232fa:	18fb      	adds	r3, r7, r3
   232fc:	22f4      	movs	r2, #244	; 0xf4
   232fe:	701a      	strb	r2, [r3, #0]
   23300:	e003      	b.n	2330a <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   23302:	231f      	movs	r3, #31
   23304:	18fb      	adds	r3, r7, r3
   23306:	22f4      	movs	r2, #244	; 0xf4
   23308:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   2330a:	231f      	movs	r3, #31
   2330c:	18fb      	adds	r3, r7, r3
   2330e:	781b      	ldrb	r3, [r3, #0]
   23310:	b25b      	sxtb	r3, r3
}
   23312:	0018      	movs	r0, r3
   23314:	46bd      	mov	sp, r7
   23316:	b009      	add	sp, #36	; 0x24
   23318:	bd90      	pop	{r4, r7, pc}
   2331a:	46c0      	nop			; (mov r8, r8)
   2331c:	00034c3f 	.word	0x00034c3f
   23320:	00020ea1 	.word	0x00020ea1
   23324:	000c0008 	.word	0x000c0008
   23328:	00022f31 	.word	0x00022f31
   2332c:	00022fa5 	.word	0x00022fa5
   23330:	00001354 	.word	0x00001354

00023334 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23334:	b590      	push	{r4, r7, lr}
   23336:	b085      	sub	sp, #20
   23338:	af00      	add	r7, sp, #0
   2333a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2333c:	230f      	movs	r3, #15
   2333e:	18fb      	adds	r3, r7, r3
   23340:	2200      	movs	r2, #0
   23342:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23344:	687b      	ldr	r3, [r7, #4]
   23346:	2b00      	cmp	r3, #0
   23348:	d013      	beq.n	23372 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   2334a:	230e      	movs	r3, #14
   2334c:	18fb      	adds	r3, r7, r3
   2334e:	687a      	ldr	r2, [r7, #4]
   23350:	7812      	ldrb	r2, [r2, #0]
   23352:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23354:	230e      	movs	r3, #14
   23356:	18fb      	adds	r3, r7, r3
   23358:	781b      	ldrb	r3, [r3, #0]
   2335a:	2b00      	cmp	r3, #0
   2335c:	d004      	beq.n	23368 <nm_drv_init+0x34>
   2335e:	230e      	movs	r3, #14
   23360:	18fb      	adds	r3, r7, r3
   23362:	781b      	ldrb	r3, [r3, #0]
   23364:	2b04      	cmp	r3, #4
   23366:	d908      	bls.n	2337a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23368:	230e      	movs	r3, #14
   2336a:	18fb      	adds	r3, r7, r3
   2336c:	2201      	movs	r2, #1
   2336e:	701a      	strb	r2, [r3, #0]
   23370:	e003      	b.n	2337a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23372:	230e      	movs	r3, #14
   23374:	18fb      	adds	r3, r7, r3
   23376:	2201      	movs	r2, #1
   23378:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   2337a:	230f      	movs	r3, #15
   2337c:	18fc      	adds	r4, r7, r3
   2337e:	2000      	movs	r0, #0
   23380:	4b41      	ldr	r3, [pc, #260]	; (23488 <nm_drv_init+0x154>)
   23382:	4798      	blx	r3
   23384:	0003      	movs	r3, r0
   23386:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23388:	230f      	movs	r3, #15
   2338a:	18fb      	adds	r3, r7, r3
   2338c:	781b      	ldrb	r3, [r3, #0]
   2338e:	b25b      	sxtb	r3, r3
   23390:	2b00      	cmp	r3, #0
   23392:	d00f      	beq.n	233b4 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23394:	2390      	movs	r3, #144	; 0x90
   23396:	005a      	lsls	r2, r3, #1
   23398:	493c      	ldr	r1, [pc, #240]	; (2348c <nm_drv_init+0x158>)
   2339a:	4b3d      	ldr	r3, [pc, #244]	; (23490 <nm_drv_init+0x15c>)
   2339c:	0018      	movs	r0, r3
   2339e:	4b3d      	ldr	r3, [pc, #244]	; (23494 <nm_drv_init+0x160>)
   233a0:	4798      	blx	r3
   233a2:	4b3d      	ldr	r3, [pc, #244]	; (23498 <nm_drv_init+0x164>)
   233a4:	0018      	movs	r0, r3
   233a6:	4b3b      	ldr	r3, [pc, #236]	; (23494 <nm_drv_init+0x160>)
   233a8:	4798      	blx	r3
   233aa:	4b3c      	ldr	r3, [pc, #240]	; (2349c <nm_drv_init+0x168>)
   233ac:	0018      	movs	r0, r3
   233ae:	4b39      	ldr	r3, [pc, #228]	; (23494 <nm_drv_init+0x160>)
   233b0:	4798      	blx	r3
		goto ERR1;
   233b2:	e061      	b.n	23478 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   233b4:	4b3a      	ldr	r3, [pc, #232]	; (234a0 <nm_drv_init+0x16c>)
   233b6:	0018      	movs	r0, r3
   233b8:	4b36      	ldr	r3, [pc, #216]	; (23494 <nm_drv_init+0x160>)
   233ba:	4798      	blx	r3
   233bc:	4b39      	ldr	r3, [pc, #228]	; (234a4 <nm_drv_init+0x170>)
   233be:	4798      	blx	r3
   233c0:	0002      	movs	r2, r0
   233c2:	4b39      	ldr	r3, [pc, #228]	; (234a8 <nm_drv_init+0x174>)
   233c4:	0011      	movs	r1, r2
   233c6:	0018      	movs	r0, r3
   233c8:	4b32      	ldr	r3, [pc, #200]	; (23494 <nm_drv_init+0x160>)
   233ca:	4798      	blx	r3
   233cc:	4b33      	ldr	r3, [pc, #204]	; (2349c <nm_drv_init+0x168>)
   233ce:	0018      	movs	r0, r3
   233d0:	4b30      	ldr	r3, [pc, #192]	; (23494 <nm_drv_init+0x160>)
   233d2:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   233d4:	4b35      	ldr	r3, [pc, #212]	; (234ac <nm_drv_init+0x178>)
   233d6:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   233d8:	230f      	movs	r3, #15
   233da:	18fc      	adds	r4, r7, r3
   233dc:	230e      	movs	r3, #14
   233de:	18fb      	adds	r3, r7, r3
   233e0:	781b      	ldrb	r3, [r3, #0]
   233e2:	0018      	movs	r0, r3
   233e4:	4b32      	ldr	r3, [pc, #200]	; (234b0 <nm_drv_init+0x17c>)
   233e6:	4798      	blx	r3
   233e8:	0003      	movs	r3, r0
   233ea:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   233ec:	230f      	movs	r3, #15
   233ee:	18fb      	adds	r3, r7, r3
   233f0:	781b      	ldrb	r3, [r3, #0]
   233f2:	b25b      	sxtb	r3, r3
   233f4:	2b00      	cmp	r3, #0
   233f6:	d13a      	bne.n	2346e <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   233f8:	230f      	movs	r3, #15
   233fa:	18fc      	adds	r4, r7, r3
   233fc:	230e      	movs	r3, #14
   233fe:	18fb      	adds	r3, r7, r3
   23400:	781b      	ldrb	r3, [r3, #0]
   23402:	0018      	movs	r0, r3
   23404:	4b2b      	ldr	r3, [pc, #172]	; (234b4 <nm_drv_init+0x180>)
   23406:	4798      	blx	r3
   23408:	0003      	movs	r3, r0
   2340a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2340c:	230f      	movs	r3, #15
   2340e:	18fb      	adds	r3, r7, r3
   23410:	781b      	ldrb	r3, [r3, #0]
   23412:	b25b      	sxtb	r3, r3
   23414:	2b00      	cmp	r3, #0
   23416:	d12c      	bne.n	23472 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23418:	230e      	movs	r3, #14
   2341a:	18fb      	adds	r3, r7, r3
   2341c:	781b      	ldrb	r3, [r3, #0]
   2341e:	2b02      	cmp	r3, #2
   23420:	d02a      	beq.n	23478 <nm_drv_init+0x144>
   23422:	230e      	movs	r3, #14
   23424:	18fb      	adds	r3, r7, r3
   23426:	781b      	ldrb	r3, [r3, #0]
   23428:	2b03      	cmp	r3, #3
   2342a:	d025      	beq.n	23478 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   2342c:	230f      	movs	r3, #15
   2342e:	18fc      	adds	r4, r7, r3
   23430:	4b21      	ldr	r3, [pc, #132]	; (234b8 <nm_drv_init+0x184>)
   23432:	4798      	blx	r3
   23434:	0003      	movs	r3, r0
   23436:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23438:	230f      	movs	r3, #15
   2343a:	18fb      	adds	r3, r7, r3
   2343c:	781b      	ldrb	r3, [r3, #0]
   2343e:	b25b      	sxtb	r3, r3
   23440:	2b00      	cmp	r3, #0
   23442:	d00f      	beq.n	23464 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23444:	23a7      	movs	r3, #167	; 0xa7
   23446:	005a      	lsls	r2, r3, #1
   23448:	4910      	ldr	r1, [pc, #64]	; (2348c <nm_drv_init+0x158>)
   2344a:	4b11      	ldr	r3, [pc, #68]	; (23490 <nm_drv_init+0x15c>)
   2344c:	0018      	movs	r0, r3
   2344e:	4b11      	ldr	r3, [pc, #68]	; (23494 <nm_drv_init+0x160>)
   23450:	4798      	blx	r3
   23452:	4b1a      	ldr	r3, [pc, #104]	; (234bc <nm_drv_init+0x188>)
   23454:	0018      	movs	r0, r3
   23456:	4b0f      	ldr	r3, [pc, #60]	; (23494 <nm_drv_init+0x160>)
   23458:	4798      	blx	r3
   2345a:	4b10      	ldr	r3, [pc, #64]	; (2349c <nm_drv_init+0x168>)
   2345c:	0018      	movs	r0, r3
   2345e:	4b0d      	ldr	r3, [pc, #52]	; (23494 <nm_drv_init+0x160>)
   23460:	4798      	blx	r3
		goto ERR2;
   23462:	e007      	b.n	23474 <nm_drv_init+0x140>
	}
	return ret;
   23464:	230f      	movs	r3, #15
   23466:	18fb      	adds	r3, r7, r3
   23468:	781b      	ldrb	r3, [r3, #0]
   2346a:	b25b      	sxtb	r3, r3
   2346c:	e008      	b.n	23480 <nm_drv_init+0x14c>
		goto ERR2;
   2346e:	46c0      	nop			; (mov r8, r8)
   23470:	e000      	b.n	23474 <nm_drv_init+0x140>
		goto ERR2;
   23472:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23474:	4b12      	ldr	r3, [pc, #72]	; (234c0 <nm_drv_init+0x18c>)
   23476:	4798      	blx	r3
ERR1:
	return ret;
   23478:	230f      	movs	r3, #15
   2347a:	18fb      	adds	r3, r7, r3
   2347c:	781b      	ldrb	r3, [r3, #0]
   2347e:	b25b      	sxtb	r3, r3
}
   23480:	0018      	movs	r0, r3
   23482:	46bd      	mov	sp, r7
   23484:	b005      	add	sp, #20
   23486:	bd90      	pop	{r4, r7, pc}
   23488:	00022e95 	.word	0x00022e95
   2348c:	00038d88 	.word	0x00038d88
   23490:	00038cb8 	.word	0x00038cb8
   23494:	0001e529 	.word	0x0001e529
   23498:	00038ccc 	.word	0x00038ccc
   2349c:	00038ce8 	.word	0x00038ce8
   234a0:	00038cec 	.word	0x00038cec
   234a4:	00022831 	.word	0x00022831
   234a8:	00038cf8 	.word	0x00038cf8
   234ac:	00024d4d 	.word	0x00024d4d
   234b0:	00022b89 	.word	0x00022b89
   234b4:	00022d21 	.word	0x00022d21
   234b8:	0002277d 	.word	0x0002277d
   234bc:	00038d08 	.word	0x00038d08
   234c0:	00022ec9 	.word	0x00022ec9

000234c4 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   234c4:	b590      	push	{r4, r7, lr}
   234c6:	b085      	sub	sp, #20
   234c8:	af00      	add	r7, sp, #0
   234ca:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   234cc:	230f      	movs	r3, #15
   234ce:	18fc      	adds	r4, r7, r3
   234d0:	4b2e      	ldr	r3, [pc, #184]	; (2358c <nm_drv_deinit+0xc8>)
   234d2:	4798      	blx	r3
   234d4:	0003      	movs	r3, r0
   234d6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   234d8:	230f      	movs	r3, #15
   234da:	18fb      	adds	r3, r7, r3
   234dc:	781b      	ldrb	r3, [r3, #0]
   234de:	b25b      	sxtb	r3, r3
   234e0:	2b00      	cmp	r3, #0
   234e2:	d010      	beq.n	23506 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   234e4:	2366      	movs	r3, #102	; 0x66
   234e6:	33ff      	adds	r3, #255	; 0xff
   234e8:	001a      	movs	r2, r3
   234ea:	4929      	ldr	r1, [pc, #164]	; (23590 <nm_drv_deinit+0xcc>)
   234ec:	4b29      	ldr	r3, [pc, #164]	; (23594 <nm_drv_deinit+0xd0>)
   234ee:	0018      	movs	r0, r3
   234f0:	4b29      	ldr	r3, [pc, #164]	; (23598 <nm_drv_deinit+0xd4>)
   234f2:	4798      	blx	r3
   234f4:	4b29      	ldr	r3, [pc, #164]	; (2359c <nm_drv_deinit+0xd8>)
   234f6:	0018      	movs	r0, r3
   234f8:	4b27      	ldr	r3, [pc, #156]	; (23598 <nm_drv_deinit+0xd4>)
   234fa:	4798      	blx	r3
   234fc:	4b28      	ldr	r3, [pc, #160]	; (235a0 <nm_drv_deinit+0xdc>)
   234fe:	0018      	movs	r0, r3
   23500:	4b25      	ldr	r3, [pc, #148]	; (23598 <nm_drv_deinit+0xd4>)
   23502:	4798      	blx	r3
		goto ERR1;
   23504:	e03a      	b.n	2357c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   23506:	230f      	movs	r3, #15
   23508:	18fc      	adds	r4, r7, r3
   2350a:	2000      	movs	r0, #0
   2350c:	4b25      	ldr	r3, [pc, #148]	; (235a4 <nm_drv_deinit+0xe0>)
   2350e:	4798      	blx	r3
   23510:	0003      	movs	r3, r0
   23512:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23514:	230f      	movs	r3, #15
   23516:	18fb      	adds	r3, r7, r3
   23518:	781b      	ldrb	r3, [r3, #0]
   2351a:	b25b      	sxtb	r3, r3
   2351c:	2b00      	cmp	r3, #0
   2351e:	d00f      	beq.n	23540 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23520:	23b6      	movs	r3, #182	; 0xb6
   23522:	005a      	lsls	r2, r3, #1
   23524:	491a      	ldr	r1, [pc, #104]	; (23590 <nm_drv_deinit+0xcc>)
   23526:	4b1b      	ldr	r3, [pc, #108]	; (23594 <nm_drv_deinit+0xd0>)
   23528:	0018      	movs	r0, r3
   2352a:	4b1b      	ldr	r3, [pc, #108]	; (23598 <nm_drv_deinit+0xd4>)
   2352c:	4798      	blx	r3
   2352e:	4b1e      	ldr	r3, [pc, #120]	; (235a8 <nm_drv_deinit+0xe4>)
   23530:	0018      	movs	r0, r3
   23532:	4b19      	ldr	r3, [pc, #100]	; (23598 <nm_drv_deinit+0xd4>)
   23534:	4798      	blx	r3
   23536:	4b1a      	ldr	r3, [pc, #104]	; (235a0 <nm_drv_deinit+0xdc>)
   23538:	0018      	movs	r0, r3
   2353a:	4b17      	ldr	r3, [pc, #92]	; (23598 <nm_drv_deinit+0xd4>)
   2353c:	4798      	blx	r3
		goto ERR1;
   2353e:	e01d      	b.n	2357c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23540:	230f      	movs	r3, #15
   23542:	18fc      	adds	r4, r7, r3
   23544:	4b19      	ldr	r3, [pc, #100]	; (235ac <nm_drv_deinit+0xe8>)
   23546:	4798      	blx	r3
   23548:	0003      	movs	r3, r0
   2354a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   2354c:	230f      	movs	r3, #15
   2354e:	18fb      	adds	r3, r7, r3
   23550:	781b      	ldrb	r3, [r3, #0]
   23552:	b25b      	sxtb	r3, r3
   23554:	2b00      	cmp	r3, #0
   23556:	d00f      	beq.n	23578 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   23558:	23b9      	movs	r3, #185	; 0xb9
   2355a:	005a      	lsls	r2, r3, #1
   2355c:	490c      	ldr	r1, [pc, #48]	; (23590 <nm_drv_deinit+0xcc>)
   2355e:	4b0d      	ldr	r3, [pc, #52]	; (23594 <nm_drv_deinit+0xd0>)
   23560:	0018      	movs	r0, r3
   23562:	4b0d      	ldr	r3, [pc, #52]	; (23598 <nm_drv_deinit+0xd4>)
   23564:	4798      	blx	r3
   23566:	4b12      	ldr	r3, [pc, #72]	; (235b0 <nm_drv_deinit+0xec>)
   23568:	0018      	movs	r0, r3
   2356a:	4b0b      	ldr	r3, [pc, #44]	; (23598 <nm_drv_deinit+0xd4>)
   2356c:	4798      	blx	r3
   2356e:	4b0c      	ldr	r3, [pc, #48]	; (235a0 <nm_drv_deinit+0xdc>)
   23570:	0018      	movs	r0, r3
   23572:	4b09      	ldr	r3, [pc, #36]	; (23598 <nm_drv_deinit+0xd4>)
   23574:	4798      	blx	r3
		goto ERR1;
   23576:	e001      	b.n	2357c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   23578:	4b0e      	ldr	r3, [pc, #56]	; (235b4 <nm_drv_deinit+0xf0>)
   2357a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   2357c:	230f      	movs	r3, #15
   2357e:	18fb      	adds	r3, r7, r3
   23580:	781b      	ldrb	r3, [r3, #0]
   23582:	b25b      	sxtb	r3, r3
}
   23584:	0018      	movs	r0, r3
   23586:	46bd      	mov	sp, r7
   23588:	b005      	add	sp, #20
   2358a:	bd90      	pop	{r4, r7, pc}
   2358c:	00022dd5 	.word	0x00022dd5
   23590:	00038d94 	.word	0x00038d94
   23594:	00038cb8 	.word	0x00038cb8
   23598:	0001e529 	.word	0x0001e529
   2359c:	00038d28 	.word	0x00038d28
   235a0:	00038ce8 	.word	0x00038ce8
   235a4:	000261f5 	.word	0x000261f5
   235a8:	00038d48 	.word	0x00038d48
   235ac:	00022ec9 	.word	0x00022ec9
   235b0:	00038d6c 	.word	0x00038d6c
   235b4:	00024e99 	.word	0x00024e99

000235b8 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   235b8:	b580      	push	{r7, lr}
   235ba:	b086      	sub	sp, #24
   235bc:	af00      	add	r7, sp, #0
   235be:	6078      	str	r0, [r7, #4]
   235c0:	000a      	movs	r2, r1
   235c2:	1cbb      	adds	r3, r7, #2
   235c4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   235c6:	230c      	movs	r3, #12
   235c8:	18fb      	adds	r3, r7, r3
   235ca:	2200      	movs	r2, #0
   235cc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   235ce:	230c      	movs	r3, #12
   235d0:	18fb      	adds	r3, r7, r3
   235d2:	687a      	ldr	r2, [r7, #4]
   235d4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   235d6:	230c      	movs	r3, #12
   235d8:	18fb      	adds	r3, r7, r3
   235da:	1cba      	adds	r2, r7, #2
   235dc:	8812      	ldrh	r2, [r2, #0]
   235de:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   235e0:	230c      	movs	r3, #12
   235e2:	18fb      	adds	r3, r7, r3
   235e4:	0019      	movs	r1, r3
   235e6:	2003      	movs	r0, #3
   235e8:	4b03      	ldr	r3, [pc, #12]	; (235f8 <nmi_spi_read+0x40>)
   235ea:	4798      	blx	r3
   235ec:	0003      	movs	r3, r0
}
   235ee:	0018      	movs	r0, r3
   235f0:	46bd      	mov	sp, r7
   235f2:	b006      	add	sp, #24
   235f4:	bd80      	pop	{r7, pc}
   235f6:	46c0      	nop			; (mov r8, r8)
   235f8:	00020d65 	.word	0x00020d65

000235fc <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   235fc:	b580      	push	{r7, lr}
   235fe:	b086      	sub	sp, #24
   23600:	af00      	add	r7, sp, #0
   23602:	6078      	str	r0, [r7, #4]
   23604:	000a      	movs	r2, r1
   23606:	1cbb      	adds	r3, r7, #2
   23608:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   2360a:	230c      	movs	r3, #12
   2360c:	18fb      	adds	r3, r7, r3
   2360e:	687a      	ldr	r2, [r7, #4]
   23610:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   23612:	230c      	movs	r3, #12
   23614:	18fb      	adds	r3, r7, r3
   23616:	2200      	movs	r2, #0
   23618:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2361a:	230c      	movs	r3, #12
   2361c:	18fb      	adds	r3, r7, r3
   2361e:	1cba      	adds	r2, r7, #2
   23620:	8812      	ldrh	r2, [r2, #0]
   23622:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23624:	230c      	movs	r3, #12
   23626:	18fb      	adds	r3, r7, r3
   23628:	0019      	movs	r1, r3
   2362a:	2003      	movs	r0, #3
   2362c:	4b03      	ldr	r3, [pc, #12]	; (2363c <nmi_spi_write+0x40>)
   2362e:	4798      	blx	r3
   23630:	0003      	movs	r3, r0
}
   23632:	0018      	movs	r0, r3
   23634:	46bd      	mov	sp, r7
   23636:	b006      	add	sp, #24
   23638:	bd80      	pop	{r7, pc}
   2363a:	46c0      	nop			; (mov r8, r8)
   2363c:	00020d65 	.word	0x00020d65

00023640 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   23640:	b580      	push	{r7, lr}
   23642:	b088      	sub	sp, #32
   23644:	af00      	add	r7, sp, #0
   23646:	60f8      	str	r0, [r7, #12]
   23648:	60b9      	str	r1, [r7, #8]
   2364a:	1dbb      	adds	r3, r7, #6
   2364c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   2364e:	2314      	movs	r3, #20
   23650:	18fb      	adds	r3, r7, r3
   23652:	68fa      	ldr	r2, [r7, #12]
   23654:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   23656:	2314      	movs	r3, #20
   23658:	18fb      	adds	r3, r7, r3
   2365a:	68ba      	ldr	r2, [r7, #8]
   2365c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2365e:	2314      	movs	r3, #20
   23660:	18fb      	adds	r3, r7, r3
   23662:	1dba      	adds	r2, r7, #6
   23664:	8812      	ldrh	r2, [r2, #0]
   23666:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   23668:	2314      	movs	r3, #20
   2366a:	18fb      	adds	r3, r7, r3
   2366c:	0019      	movs	r1, r3
   2366e:	2003      	movs	r0, #3
   23670:	4b03      	ldr	r3, [pc, #12]	; (23680 <nmi_spi_rw+0x40>)
   23672:	4798      	blx	r3
   23674:	0003      	movs	r3, r0
}
   23676:	0018      	movs	r0, r3
   23678:	46bd      	mov	sp, r7
   2367a:	b008      	add	sp, #32
   2367c:	bd80      	pop	{r7, pc}
   2367e:	46c0      	nop			; (mov r8, r8)
   23680:	00020d65 	.word	0x00020d65

00023684 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   23684:	b580      	push	{r7, lr}
   23686:	b082      	sub	sp, #8
   23688:	af00      	add	r7, sp, #0
   2368a:	0002      	movs	r2, r0
   2368c:	1dfb      	adds	r3, r7, #7
   2368e:	701a      	strb	r2, [r3, #0]
   23690:	1dbb      	adds	r3, r7, #6
   23692:	1c0a      	adds	r2, r1, #0
   23694:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   23696:	1dfb      	adds	r3, r7, #7
   23698:	781b      	ldrb	r3, [r3, #0]
   2369a:	005a      	lsls	r2, r3, #1
   2369c:	1dbb      	adds	r3, r7, #6
   2369e:	781b      	ldrb	r3, [r3, #0]
   236a0:	4053      	eors	r3, r2
   236a2:	4a03      	ldr	r2, [pc, #12]	; (236b0 <crc7_byte+0x2c>)
   236a4:	5cd3      	ldrb	r3, [r2, r3]
}
   236a6:	0018      	movs	r0, r3
   236a8:	46bd      	mov	sp, r7
   236aa:	b002      	add	sp, #8
   236ac:	bd80      	pop	{r7, pc}
   236ae:	46c0      	nop			; (mov r8, r8)
   236b0:	00038da4 	.word	0x00038da4

000236b4 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   236b4:	b590      	push	{r4, r7, lr}
   236b6:	b085      	sub	sp, #20
   236b8:	af00      	add	r7, sp, #0
   236ba:	60b9      	str	r1, [r7, #8]
   236bc:	607a      	str	r2, [r7, #4]
   236be:	230f      	movs	r3, #15
   236c0:	18fb      	adds	r3, r7, r3
   236c2:	1c02      	adds	r2, r0, #0
   236c4:	701a      	strb	r2, [r3, #0]
	while (len--)
   236c6:	e00e      	b.n	236e6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   236c8:	68bb      	ldr	r3, [r7, #8]
   236ca:	1c5a      	adds	r2, r3, #1
   236cc:	60ba      	str	r2, [r7, #8]
   236ce:	781a      	ldrb	r2, [r3, #0]
   236d0:	230f      	movs	r3, #15
   236d2:	18fc      	adds	r4, r7, r3
   236d4:	230f      	movs	r3, #15
   236d6:	18fb      	adds	r3, r7, r3
   236d8:	781b      	ldrb	r3, [r3, #0]
   236da:	0011      	movs	r1, r2
   236dc:	0018      	movs	r0, r3
   236de:	4b08      	ldr	r3, [pc, #32]	; (23700 <crc7+0x4c>)
   236e0:	4798      	blx	r3
   236e2:	0003      	movs	r3, r0
   236e4:	7023      	strb	r3, [r4, #0]
	while (len--)
   236e6:	687b      	ldr	r3, [r7, #4]
   236e8:	1e5a      	subs	r2, r3, #1
   236ea:	607a      	str	r2, [r7, #4]
   236ec:	2b00      	cmp	r3, #0
   236ee:	d1eb      	bne.n	236c8 <crc7+0x14>
	return crc;
   236f0:	230f      	movs	r3, #15
   236f2:	18fb      	adds	r3, r7, r3
   236f4:	781b      	ldrb	r3, [r3, #0]
}
   236f6:	0018      	movs	r0, r3
   236f8:	46bd      	mov	sp, r7
   236fa:	b005      	add	sp, #20
   236fc:	bd90      	pop	{r4, r7, pc}
   236fe:	46c0      	nop			; (mov r8, r8)
   23700:	00023685 	.word	0x00023685

00023704 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   23704:	b590      	push	{r4, r7, lr}
   23706:	b089      	sub	sp, #36	; 0x24
   23708:	af00      	add	r7, sp, #0
   2370a:	60b9      	str	r1, [r7, #8]
   2370c:	607a      	str	r2, [r7, #4]
   2370e:	603b      	str	r3, [r7, #0]
   23710:	230f      	movs	r3, #15
   23712:	18fb      	adds	r3, r7, r3
   23714:	1c02      	adds	r2, r0, #0
   23716:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   23718:	231f      	movs	r3, #31
   2371a:	18fb      	adds	r3, r7, r3
   2371c:	2205      	movs	r2, #5
   2371e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23720:	231e      	movs	r3, #30
   23722:	18fb      	adds	r3, r7, r3
   23724:	2201      	movs	r2, #1
   23726:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   23728:	2314      	movs	r3, #20
   2372a:	18fb      	adds	r3, r7, r3
   2372c:	220f      	movs	r2, #15
   2372e:	18ba      	adds	r2, r7, r2
   23730:	7812      	ldrb	r2, [r2, #0]
   23732:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23734:	230f      	movs	r3, #15
   23736:	18fb      	adds	r3, r7, r3
   23738:	781b      	ldrb	r3, [r3, #0]
   2373a:	3bc1      	subs	r3, #193	; 0xc1
   2373c:	2b0e      	cmp	r3, #14
   2373e:	d900      	bls.n	23742 <spi_cmd+0x3e>
   23740:	e11b      	b.n	2397a <spi_cmd+0x276>
   23742:	009a      	lsls	r2, r3, #2
   23744:	4bb6      	ldr	r3, [pc, #728]	; (23a20 <spi_cmd+0x31c>)
   23746:	18d3      	adds	r3, r2, r3
   23748:	681b      	ldr	r3, [r3, #0]
   2374a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   2374c:	68bb      	ldr	r3, [r7, #8]
   2374e:	0c1b      	lsrs	r3, r3, #16
   23750:	b2da      	uxtb	r2, r3
   23752:	2314      	movs	r3, #20
   23754:	18fb      	adds	r3, r7, r3
   23756:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23758:	68bb      	ldr	r3, [r7, #8]
   2375a:	0a1b      	lsrs	r3, r3, #8
   2375c:	b2da      	uxtb	r2, r3
   2375e:	2314      	movs	r3, #20
   23760:	18fb      	adds	r3, r7, r3
   23762:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   23764:	68bb      	ldr	r3, [r7, #8]
   23766:	b2da      	uxtb	r2, r3
   23768:	2314      	movs	r3, #20
   2376a:	18fb      	adds	r3, r7, r3
   2376c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2376e:	231f      	movs	r3, #31
   23770:	18fb      	adds	r3, r7, r3
   23772:	2205      	movs	r2, #5
   23774:	701a      	strb	r2, [r3, #0]
		break;
   23776:	e105      	b.n	23984 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   23778:	68bb      	ldr	r3, [r7, #8]
   2377a:	0a1b      	lsrs	r3, r3, #8
   2377c:	b2da      	uxtb	r2, r3
   2377e:	2314      	movs	r3, #20
   23780:	18fb      	adds	r3, r7, r3
   23782:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   23784:	2330      	movs	r3, #48	; 0x30
   23786:	18fb      	adds	r3, r7, r3
   23788:	781b      	ldrb	r3, [r3, #0]
   2378a:	2b00      	cmp	r3, #0
   2378c:	d009      	beq.n	237a2 <spi_cmd+0x9e>
   2378e:	2314      	movs	r3, #20
   23790:	18fb      	adds	r3, r7, r3
   23792:	785b      	ldrb	r3, [r3, #1]
   23794:	2280      	movs	r2, #128	; 0x80
   23796:	4252      	negs	r2, r2
   23798:	4313      	orrs	r3, r2
   2379a:	b2da      	uxtb	r2, r3
   2379c:	2314      	movs	r3, #20
   2379e:	18fb      	adds	r3, r7, r3
   237a0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   237a2:	68bb      	ldr	r3, [r7, #8]
   237a4:	b2da      	uxtb	r2, r3
   237a6:	2314      	movs	r3, #20
   237a8:	18fb      	adds	r3, r7, r3
   237aa:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   237ac:	2314      	movs	r3, #20
   237ae:	18fb      	adds	r3, r7, r3
   237b0:	2200      	movs	r2, #0
   237b2:	70da      	strb	r2, [r3, #3]
		len = 5;
   237b4:	231f      	movs	r3, #31
   237b6:	18fb      	adds	r3, r7, r3
   237b8:	2205      	movs	r2, #5
   237ba:	701a      	strb	r2, [r3, #0]
		break;
   237bc:	e0e2      	b.n	23984 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   237be:	2314      	movs	r3, #20
   237c0:	18fb      	adds	r3, r7, r3
   237c2:	2200      	movs	r2, #0
   237c4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   237c6:	2314      	movs	r3, #20
   237c8:	18fb      	adds	r3, r7, r3
   237ca:	2200      	movs	r2, #0
   237cc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   237ce:	2314      	movs	r3, #20
   237d0:	18fb      	adds	r3, r7, r3
   237d2:	2200      	movs	r2, #0
   237d4:	70da      	strb	r2, [r3, #3]
		len = 5;
   237d6:	231f      	movs	r3, #31
   237d8:	18fb      	adds	r3, r7, r3
   237da:	2205      	movs	r2, #5
   237dc:	701a      	strb	r2, [r3, #0]
		break;
   237de:	e0d1      	b.n	23984 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   237e0:	2314      	movs	r3, #20
   237e2:	18fb      	adds	r3, r7, r3
   237e4:	2200      	movs	r2, #0
   237e6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   237e8:	2314      	movs	r3, #20
   237ea:	18fb      	adds	r3, r7, r3
   237ec:	2200      	movs	r2, #0
   237ee:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   237f0:	2314      	movs	r3, #20
   237f2:	18fb      	adds	r3, r7, r3
   237f4:	2200      	movs	r2, #0
   237f6:	70da      	strb	r2, [r3, #3]
		len = 5;
   237f8:	231f      	movs	r3, #31
   237fa:	18fb      	adds	r3, r7, r3
   237fc:	2205      	movs	r2, #5
   237fe:	701a      	strb	r2, [r3, #0]
		break;
   23800:	e0c0      	b.n	23984 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   23802:	2314      	movs	r3, #20
   23804:	18fb      	adds	r3, r7, r3
   23806:	22ff      	movs	r2, #255	; 0xff
   23808:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2380a:	2314      	movs	r3, #20
   2380c:	18fb      	adds	r3, r7, r3
   2380e:	22ff      	movs	r2, #255	; 0xff
   23810:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   23812:	2314      	movs	r3, #20
   23814:	18fb      	adds	r3, r7, r3
   23816:	22ff      	movs	r2, #255	; 0xff
   23818:	70da      	strb	r2, [r3, #3]
		len = 5;
   2381a:	231f      	movs	r3, #31
   2381c:	18fb      	adds	r3, r7, r3
   2381e:	2205      	movs	r2, #5
   23820:	701a      	strb	r2, [r3, #0]
		break;
   23822:	e0af      	b.n	23984 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   23824:	68bb      	ldr	r3, [r7, #8]
   23826:	0c1b      	lsrs	r3, r3, #16
   23828:	b2da      	uxtb	r2, r3
   2382a:	2314      	movs	r3, #20
   2382c:	18fb      	adds	r3, r7, r3
   2382e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23830:	68bb      	ldr	r3, [r7, #8]
   23832:	0a1b      	lsrs	r3, r3, #8
   23834:	b2da      	uxtb	r2, r3
   23836:	2314      	movs	r3, #20
   23838:	18fb      	adds	r3, r7, r3
   2383a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2383c:	68bb      	ldr	r3, [r7, #8]
   2383e:	b2da      	uxtb	r2, r3
   23840:	2314      	movs	r3, #20
   23842:	18fb      	adds	r3, r7, r3
   23844:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   23846:	683b      	ldr	r3, [r7, #0]
   23848:	0a1b      	lsrs	r3, r3, #8
   2384a:	b2da      	uxtb	r2, r3
   2384c:	2314      	movs	r3, #20
   2384e:	18fb      	adds	r3, r7, r3
   23850:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   23852:	683b      	ldr	r3, [r7, #0]
   23854:	b2da      	uxtb	r2, r3
   23856:	2314      	movs	r3, #20
   23858:	18fb      	adds	r3, r7, r3
   2385a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2385c:	231f      	movs	r3, #31
   2385e:	18fb      	adds	r3, r7, r3
   23860:	2207      	movs	r2, #7
   23862:	701a      	strb	r2, [r3, #0]
		break;
   23864:	e08e      	b.n	23984 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   23866:	68bb      	ldr	r3, [r7, #8]
   23868:	0c1b      	lsrs	r3, r3, #16
   2386a:	b2da      	uxtb	r2, r3
   2386c:	2314      	movs	r3, #20
   2386e:	18fb      	adds	r3, r7, r3
   23870:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   23872:	68bb      	ldr	r3, [r7, #8]
   23874:	0a1b      	lsrs	r3, r3, #8
   23876:	b2da      	uxtb	r2, r3
   23878:	2314      	movs	r3, #20
   2387a:	18fb      	adds	r3, r7, r3
   2387c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2387e:	68bb      	ldr	r3, [r7, #8]
   23880:	b2da      	uxtb	r2, r3
   23882:	2314      	movs	r3, #20
   23884:	18fb      	adds	r3, r7, r3
   23886:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   23888:	683b      	ldr	r3, [r7, #0]
   2388a:	0c1b      	lsrs	r3, r3, #16
   2388c:	b2da      	uxtb	r2, r3
   2388e:	2314      	movs	r3, #20
   23890:	18fb      	adds	r3, r7, r3
   23892:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   23894:	683b      	ldr	r3, [r7, #0]
   23896:	0a1b      	lsrs	r3, r3, #8
   23898:	b2da      	uxtb	r2, r3
   2389a:	2314      	movs	r3, #20
   2389c:	18fb      	adds	r3, r7, r3
   2389e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   238a0:	683b      	ldr	r3, [r7, #0]
   238a2:	b2da      	uxtb	r2, r3
   238a4:	2314      	movs	r3, #20
   238a6:	18fb      	adds	r3, r7, r3
   238a8:	719a      	strb	r2, [r3, #6]
		len = 8;
   238aa:	231f      	movs	r3, #31
   238ac:	18fb      	adds	r3, r7, r3
   238ae:	2208      	movs	r2, #8
   238b0:	701a      	strb	r2, [r3, #0]
		break;
   238b2:	e067      	b.n	23984 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   238b4:	68bb      	ldr	r3, [r7, #8]
   238b6:	0a1b      	lsrs	r3, r3, #8
   238b8:	b2da      	uxtb	r2, r3
   238ba:	2314      	movs	r3, #20
   238bc:	18fb      	adds	r3, r7, r3
   238be:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   238c0:	2330      	movs	r3, #48	; 0x30
   238c2:	18fb      	adds	r3, r7, r3
   238c4:	781b      	ldrb	r3, [r3, #0]
   238c6:	2b00      	cmp	r3, #0
   238c8:	d009      	beq.n	238de <spi_cmd+0x1da>
   238ca:	2314      	movs	r3, #20
   238cc:	18fb      	adds	r3, r7, r3
   238ce:	785b      	ldrb	r3, [r3, #1]
   238d0:	2280      	movs	r2, #128	; 0x80
   238d2:	4252      	negs	r2, r2
   238d4:	4313      	orrs	r3, r2
   238d6:	b2da      	uxtb	r2, r3
   238d8:	2314      	movs	r3, #20
   238da:	18fb      	adds	r3, r7, r3
   238dc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   238de:	68bb      	ldr	r3, [r7, #8]
   238e0:	b2da      	uxtb	r2, r3
   238e2:	2314      	movs	r3, #20
   238e4:	18fb      	adds	r3, r7, r3
   238e6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   238e8:	687b      	ldr	r3, [r7, #4]
   238ea:	0e1b      	lsrs	r3, r3, #24
   238ec:	b2da      	uxtb	r2, r3
   238ee:	2314      	movs	r3, #20
   238f0:	18fb      	adds	r3, r7, r3
   238f2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   238f4:	687b      	ldr	r3, [r7, #4]
   238f6:	0c1b      	lsrs	r3, r3, #16
   238f8:	b2da      	uxtb	r2, r3
   238fa:	2314      	movs	r3, #20
   238fc:	18fb      	adds	r3, r7, r3
   238fe:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   23900:	687b      	ldr	r3, [r7, #4]
   23902:	0a1b      	lsrs	r3, r3, #8
   23904:	b2da      	uxtb	r2, r3
   23906:	2314      	movs	r3, #20
   23908:	18fb      	adds	r3, r7, r3
   2390a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   2390c:	687b      	ldr	r3, [r7, #4]
   2390e:	b2da      	uxtb	r2, r3
   23910:	2314      	movs	r3, #20
   23912:	18fb      	adds	r3, r7, r3
   23914:	719a      	strb	r2, [r3, #6]
		len = 8;
   23916:	231f      	movs	r3, #31
   23918:	18fb      	adds	r3, r7, r3
   2391a:	2208      	movs	r2, #8
   2391c:	701a      	strb	r2, [r3, #0]
		break;
   2391e:	e031      	b.n	23984 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   23920:	68bb      	ldr	r3, [r7, #8]
   23922:	0c1b      	lsrs	r3, r3, #16
   23924:	b2da      	uxtb	r2, r3
   23926:	2314      	movs	r3, #20
   23928:	18fb      	adds	r3, r7, r3
   2392a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2392c:	68bb      	ldr	r3, [r7, #8]
   2392e:	0a1b      	lsrs	r3, r3, #8
   23930:	b2da      	uxtb	r2, r3
   23932:	2314      	movs	r3, #20
   23934:	18fb      	adds	r3, r7, r3
   23936:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   23938:	68bb      	ldr	r3, [r7, #8]
   2393a:	b2da      	uxtb	r2, r3
   2393c:	2314      	movs	r3, #20
   2393e:	18fb      	adds	r3, r7, r3
   23940:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   23942:	687b      	ldr	r3, [r7, #4]
   23944:	0e1b      	lsrs	r3, r3, #24
   23946:	b2da      	uxtb	r2, r3
   23948:	2314      	movs	r3, #20
   2394a:	18fb      	adds	r3, r7, r3
   2394c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2394e:	687b      	ldr	r3, [r7, #4]
   23950:	0c1b      	lsrs	r3, r3, #16
   23952:	b2da      	uxtb	r2, r3
   23954:	2314      	movs	r3, #20
   23956:	18fb      	adds	r3, r7, r3
   23958:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2395a:	687b      	ldr	r3, [r7, #4]
   2395c:	0a1b      	lsrs	r3, r3, #8
   2395e:	b2da      	uxtb	r2, r3
   23960:	2314      	movs	r3, #20
   23962:	18fb      	adds	r3, r7, r3
   23964:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   23966:	687b      	ldr	r3, [r7, #4]
   23968:	b2da      	uxtb	r2, r3
   2396a:	2314      	movs	r3, #20
   2396c:	18fb      	adds	r3, r7, r3
   2396e:	71da      	strb	r2, [r3, #7]
		len = 9;
   23970:	231f      	movs	r3, #31
   23972:	18fb      	adds	r3, r7, r3
   23974:	2209      	movs	r2, #9
   23976:	701a      	strb	r2, [r3, #0]
		break;
   23978:	e004      	b.n	23984 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2397a:	231e      	movs	r3, #30
   2397c:	18fb      	adds	r3, r7, r3
   2397e:	2200      	movs	r2, #0
   23980:	701a      	strb	r2, [r3, #0]
		break;
   23982:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   23984:	231e      	movs	r3, #30
   23986:	18fb      	adds	r3, r7, r3
   23988:	781b      	ldrb	r3, [r3, #0]
   2398a:	b25b      	sxtb	r3, r3
   2398c:	2b00      	cmp	r3, #0
   2398e:	d03f      	beq.n	23a10 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   23990:	4b24      	ldr	r3, [pc, #144]	; (23a24 <spi_cmd+0x320>)
   23992:	781b      	ldrb	r3, [r3, #0]
   23994:	2b00      	cmp	r3, #0
   23996:	d115      	bne.n	239c4 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   23998:	231f      	movs	r3, #31
   2399a:	18fb      	adds	r3, r7, r3
   2399c:	781b      	ldrb	r3, [r3, #0]
   2399e:	1e5c      	subs	r4, r3, #1
   239a0:	231f      	movs	r3, #31
   239a2:	18fb      	adds	r3, r7, r3
   239a4:	781b      	ldrb	r3, [r3, #0]
   239a6:	3b01      	subs	r3, #1
   239a8:	001a      	movs	r2, r3
   239aa:	2314      	movs	r3, #20
   239ac:	18fb      	adds	r3, r7, r3
   239ae:	0019      	movs	r1, r3
   239b0:	207f      	movs	r0, #127	; 0x7f
   239b2:	4b1d      	ldr	r3, [pc, #116]	; (23a28 <spi_cmd+0x324>)
   239b4:	4798      	blx	r3
   239b6:	0003      	movs	r3, r0
   239b8:	18db      	adds	r3, r3, r3
   239ba:	b2da      	uxtb	r2, r3
   239bc:	2314      	movs	r3, #20
   239be:	18fb      	adds	r3, r7, r3
   239c0:	551a      	strb	r2, [r3, r4]
   239c2:	e006      	b.n	239d2 <spi_cmd+0x2ce>
		else
			len-=1;
   239c4:	231f      	movs	r3, #31
   239c6:	18fb      	adds	r3, r7, r3
   239c8:	221f      	movs	r2, #31
   239ca:	18ba      	adds	r2, r7, r2
   239cc:	7812      	ldrb	r2, [r2, #0]
   239ce:	3a01      	subs	r2, #1
   239d0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   239d2:	231f      	movs	r3, #31
   239d4:	18fb      	adds	r3, r7, r3
   239d6:	781b      	ldrb	r3, [r3, #0]
   239d8:	b29a      	uxth	r2, r3
   239da:	2314      	movs	r3, #20
   239dc:	18fb      	adds	r3, r7, r3
   239de:	0011      	movs	r1, r2
   239e0:	0018      	movs	r0, r3
   239e2:	4b12      	ldr	r3, [pc, #72]	; (23a2c <spi_cmd+0x328>)
   239e4:	4798      	blx	r3
   239e6:	1e03      	subs	r3, r0, #0
   239e8:	d012      	beq.n	23a10 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   239ea:	2390      	movs	r3, #144	; 0x90
   239ec:	005a      	lsls	r2, r3, #1
   239ee:	4910      	ldr	r1, [pc, #64]	; (23a30 <spi_cmd+0x32c>)
   239f0:	4b10      	ldr	r3, [pc, #64]	; (23a34 <spi_cmd+0x330>)
   239f2:	0018      	movs	r0, r3
   239f4:	4b10      	ldr	r3, [pc, #64]	; (23a38 <spi_cmd+0x334>)
   239f6:	4798      	blx	r3
   239f8:	4b10      	ldr	r3, [pc, #64]	; (23a3c <spi_cmd+0x338>)
   239fa:	0018      	movs	r0, r3
   239fc:	4b0e      	ldr	r3, [pc, #56]	; (23a38 <spi_cmd+0x334>)
   239fe:	4798      	blx	r3
   23a00:	4b0f      	ldr	r3, [pc, #60]	; (23a40 <spi_cmd+0x33c>)
   23a02:	0018      	movs	r0, r3
   23a04:	4b0c      	ldr	r3, [pc, #48]	; (23a38 <spi_cmd+0x334>)
   23a06:	4798      	blx	r3
			result = N_FAIL;
   23a08:	231e      	movs	r3, #30
   23a0a:	18fb      	adds	r3, r7, r3
   23a0c:	2200      	movs	r2, #0
   23a0e:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   23a10:	231e      	movs	r3, #30
   23a12:	18fb      	adds	r3, r7, r3
   23a14:	781b      	ldrb	r3, [r3, #0]
   23a16:	b25b      	sxtb	r3, r3
}
   23a18:	0018      	movs	r0, r3
   23a1a:	46bd      	mov	sp, r7
   23a1c:	b009      	add	sp, #36	; 0x24
   23a1e:	bd90      	pop	{r4, r7, pc}
   23a20:	0003941c 	.word	0x0003941c
   23a24:	20003ea0 	.word	0x20003ea0
   23a28:	000236b5 	.word	0x000236b5
   23a2c:	000235fd 	.word	0x000235fd
   23a30:	00039494 	.word	0x00039494
   23a34:	00038ea4 	.word	0x00038ea4
   23a38:	0001e529 	.word	0x0001e529
   23a3c:	00038eb8 	.word	0x00038eb8
   23a40:	00038ee4 	.word	0x00038ee4

00023a44 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   23a44:	b590      	push	{r4, r7, lr}
   23a46:	b085      	sub	sp, #20
   23a48:	af00      	add	r7, sp, #0
   23a4a:	0002      	movs	r2, r0
   23a4c:	1dfb      	adds	r3, r7, #7
   23a4e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   23a50:	230e      	movs	r3, #14
   23a52:	18fb      	adds	r3, r7, r3
   23a54:	2201      	movs	r2, #1
   23a56:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   23a58:	4b32      	ldr	r3, [pc, #200]	; (23b24 <spi_data_rsp+0xe0>)
   23a5a:	781b      	ldrb	r3, [r3, #0]
   23a5c:	2b00      	cmp	r3, #0
   23a5e:	d104      	bne.n	23a6a <spi_data_rsp+0x26>
		len = 2;
   23a60:	230f      	movs	r3, #15
   23a62:	18fb      	adds	r3, r7, r3
   23a64:	2202      	movs	r2, #2
   23a66:	701a      	strb	r2, [r3, #0]
   23a68:	e003      	b.n	23a72 <spi_data_rsp+0x2e>
	else
		len = 3;
   23a6a:	230f      	movs	r3, #15
   23a6c:	18fb      	adds	r3, r7, r3
   23a6e:	2203      	movs	r2, #3
   23a70:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   23a72:	230f      	movs	r3, #15
   23a74:	18fb      	adds	r3, r7, r3
   23a76:	781b      	ldrb	r3, [r3, #0]
   23a78:	b29a      	uxth	r2, r3
   23a7a:	2308      	movs	r3, #8
   23a7c:	18fb      	adds	r3, r7, r3
   23a7e:	0011      	movs	r1, r2
   23a80:	0018      	movs	r0, r3
   23a82:	4b29      	ldr	r3, [pc, #164]	; (23b28 <spi_data_rsp+0xe4>)
   23a84:	4798      	blx	r3
   23a86:	1e03      	subs	r3, r0, #0
   23a88:	d013      	beq.n	23ab2 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   23a8a:	239a      	movs	r3, #154	; 0x9a
   23a8c:	005a      	lsls	r2, r3, #1
   23a8e:	4927      	ldr	r1, [pc, #156]	; (23b2c <spi_data_rsp+0xe8>)
   23a90:	4b27      	ldr	r3, [pc, #156]	; (23b30 <spi_data_rsp+0xec>)
   23a92:	0018      	movs	r0, r3
   23a94:	4b27      	ldr	r3, [pc, #156]	; (23b34 <spi_data_rsp+0xf0>)
   23a96:	4798      	blx	r3
   23a98:	4b27      	ldr	r3, [pc, #156]	; (23b38 <spi_data_rsp+0xf4>)
   23a9a:	0018      	movs	r0, r3
   23a9c:	4b25      	ldr	r3, [pc, #148]	; (23b34 <spi_data_rsp+0xf0>)
   23a9e:	4798      	blx	r3
   23aa0:	4b26      	ldr	r3, [pc, #152]	; (23b3c <spi_data_rsp+0xf8>)
   23aa2:	0018      	movs	r0, r3
   23aa4:	4b23      	ldr	r3, [pc, #140]	; (23b34 <spi_data_rsp+0xf0>)
   23aa6:	4798      	blx	r3
		result = N_FAIL;
   23aa8:	230e      	movs	r3, #14
   23aaa:	18fb      	adds	r3, r7, r3
   23aac:	2200      	movs	r2, #0
   23aae:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23ab0:	e030      	b.n	23b14 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   23ab2:	230f      	movs	r3, #15
   23ab4:	18fb      	adds	r3, r7, r3
   23ab6:	781b      	ldrb	r3, [r3, #0]
   23ab8:	3b01      	subs	r3, #1
   23aba:	2208      	movs	r2, #8
   23abc:	18ba      	adds	r2, r7, r2
   23abe:	5cd3      	ldrb	r3, [r2, r3]
   23ac0:	2b00      	cmp	r3, #0
   23ac2:	d108      	bne.n	23ad6 <spi_data_rsp+0x92>
   23ac4:	230f      	movs	r3, #15
   23ac6:	18fb      	adds	r3, r7, r3
   23ac8:	781b      	ldrb	r3, [r3, #0]
   23aca:	3b02      	subs	r3, #2
   23acc:	2208      	movs	r2, #8
   23ace:	18ba      	adds	r2, r7, r2
   23ad0:	5cd3      	ldrb	r3, [r2, r3]
   23ad2:	2bc3      	cmp	r3, #195	; 0xc3
   23ad4:	d01e      	beq.n	23b14 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   23ad6:	233c      	movs	r3, #60	; 0x3c
   23ad8:	33ff      	adds	r3, #255	; 0xff
   23ada:	001a      	movs	r2, r3
   23adc:	4913      	ldr	r1, [pc, #76]	; (23b2c <spi_data_rsp+0xe8>)
   23ade:	4b14      	ldr	r3, [pc, #80]	; (23b30 <spi_data_rsp+0xec>)
   23ae0:	0018      	movs	r0, r3
   23ae2:	4b14      	ldr	r3, [pc, #80]	; (23b34 <spi_data_rsp+0xf0>)
   23ae4:	4798      	blx	r3
   23ae6:	2308      	movs	r3, #8
   23ae8:	18fb      	adds	r3, r7, r3
   23aea:	781b      	ldrb	r3, [r3, #0]
   23aec:	0019      	movs	r1, r3
   23aee:	2308      	movs	r3, #8
   23af0:	18fb      	adds	r3, r7, r3
   23af2:	785b      	ldrb	r3, [r3, #1]
   23af4:	001a      	movs	r2, r3
   23af6:	2308      	movs	r3, #8
   23af8:	18fb      	adds	r3, r7, r3
   23afa:	789b      	ldrb	r3, [r3, #2]
   23afc:	4810      	ldr	r0, [pc, #64]	; (23b40 <spi_data_rsp+0xfc>)
   23afe:	4c0d      	ldr	r4, [pc, #52]	; (23b34 <spi_data_rsp+0xf0>)
   23b00:	47a0      	blx	r4
   23b02:	4b0e      	ldr	r3, [pc, #56]	; (23b3c <spi_data_rsp+0xf8>)
   23b04:	0018      	movs	r0, r3
   23b06:	4b0b      	ldr	r3, [pc, #44]	; (23b34 <spi_data_rsp+0xf0>)
   23b08:	4798      	blx	r3
		result = N_FAIL;
   23b0a:	230e      	movs	r3, #14
   23b0c:	18fb      	adds	r3, r7, r3
   23b0e:	2200      	movs	r2, #0
   23b10:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   23b12:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   23b14:	230e      	movs	r3, #14
   23b16:	18fb      	adds	r3, r7, r3
   23b18:	781b      	ldrb	r3, [r3, #0]
   23b1a:	b25b      	sxtb	r3, r3
}
   23b1c:	0018      	movs	r0, r3
   23b1e:	46bd      	mov	sp, r7
   23b20:	b005      	add	sp, #20
   23b22:	bd90      	pop	{r4, r7, pc}
   23b24:	20003ea0 	.word	0x20003ea0
   23b28:	000235b9 	.word	0x000235b9
   23b2c:	0003949c 	.word	0x0003949c
   23b30:	00038ea4 	.word	0x00038ea4
   23b34:	0001e529 	.word	0x0001e529
   23b38:	00038ee8 	.word	0x00038ee8
   23b3c:	00038ee4 	.word	0x00038ee4
   23b40:	00038f08 	.word	0x00038f08

00023b44 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   23b44:	b580      	push	{r7, lr}
   23b46:	b084      	sub	sp, #16
   23b48:	af00      	add	r7, sp, #0
   23b4a:	0002      	movs	r2, r0
   23b4c:	1dfb      	adds	r3, r7, #7
   23b4e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   23b50:	230f      	movs	r3, #15
   23b52:	18fb      	adds	r3, r7, r3
   23b54:	2201      	movs	r2, #1
   23b56:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   23b58:	1dfb      	adds	r3, r7, #7
   23b5a:	781b      	ldrb	r3, [r3, #0]
   23b5c:	2bcf      	cmp	r3, #207	; 0xcf
   23b5e:	d007      	beq.n	23b70 <spi_cmd_rsp+0x2c>
   23b60:	1dfb      	adds	r3, r7, #7
   23b62:	781b      	ldrb	r3, [r3, #0]
   23b64:	2bc5      	cmp	r3, #197	; 0xc5
   23b66:	d003      	beq.n	23b70 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   23b68:	1dfb      	adds	r3, r7, #7
   23b6a:	781b      	ldrb	r3, [r3, #0]
   23b6c:	2bc6      	cmp	r3, #198	; 0xc6
   23b6e:	d10c      	bne.n	23b8a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23b70:	230d      	movs	r3, #13
   23b72:	18fb      	adds	r3, r7, r3
   23b74:	2101      	movs	r1, #1
   23b76:	0018      	movs	r0, r3
   23b78:	4b3b      	ldr	r3, [pc, #236]	; (23c68 <spi_cmd_rsp+0x124>)
   23b7a:	4798      	blx	r3
   23b7c:	1e03      	subs	r3, r0, #0
   23b7e:	d004      	beq.n	23b8a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   23b80:	230f      	movs	r3, #15
   23b82:	18fb      	adds	r3, r7, r3
   23b84:	2200      	movs	r2, #0
   23b86:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23b88:	e065      	b.n	23c56 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23b8a:	230e      	movs	r3, #14
   23b8c:	18fb      	adds	r3, r7, r3
   23b8e:	220a      	movs	r2, #10
   23b90:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23b92:	230d      	movs	r3, #13
   23b94:	18fb      	adds	r3, r7, r3
   23b96:	2101      	movs	r1, #1
   23b98:	0018      	movs	r0, r3
   23b9a:	4b33      	ldr	r3, [pc, #204]	; (23c68 <spi_cmd_rsp+0x124>)
   23b9c:	4798      	blx	r3
   23b9e:	1e03      	subs	r3, r0, #0
   23ba0:	d014      	beq.n	23bcc <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23ba2:	235c      	movs	r3, #92	; 0x5c
   23ba4:	33ff      	adds	r3, #255	; 0xff
   23ba6:	001a      	movs	r2, r3
   23ba8:	4930      	ldr	r1, [pc, #192]	; (23c6c <spi_cmd_rsp+0x128>)
   23baa:	4b31      	ldr	r3, [pc, #196]	; (23c70 <spi_cmd_rsp+0x12c>)
   23bac:	0018      	movs	r0, r3
   23bae:	4b31      	ldr	r3, [pc, #196]	; (23c74 <spi_cmd_rsp+0x130>)
   23bb0:	4798      	blx	r3
   23bb2:	4b31      	ldr	r3, [pc, #196]	; (23c78 <spi_cmd_rsp+0x134>)
   23bb4:	0018      	movs	r0, r3
   23bb6:	4b2f      	ldr	r3, [pc, #188]	; (23c74 <spi_cmd_rsp+0x130>)
   23bb8:	4798      	blx	r3
   23bba:	4b30      	ldr	r3, [pc, #192]	; (23c7c <spi_cmd_rsp+0x138>)
   23bbc:	0018      	movs	r0, r3
   23bbe:	4b2d      	ldr	r3, [pc, #180]	; (23c74 <spi_cmd_rsp+0x130>)
   23bc0:	4798      	blx	r3
			result = N_FAIL;
   23bc2:	230f      	movs	r3, #15
   23bc4:	18fb      	adds	r3, r7, r3
   23bc6:	2200      	movs	r2, #0
   23bc8:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23bca:	e044      	b.n	23c56 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   23bcc:	230d      	movs	r3, #13
   23bce:	18fb      	adds	r3, r7, r3
   23bd0:	781b      	ldrb	r3, [r3, #0]
   23bd2:	1dfa      	adds	r2, r7, #7
   23bd4:	7812      	ldrb	r2, [r2, #0]
   23bd6:	429a      	cmp	r2, r3
   23bd8:	d00b      	beq.n	23bf2 <spi_cmd_rsp+0xae>
   23bda:	230e      	movs	r3, #14
   23bdc:	18fb      	adds	r3, r7, r3
   23bde:	781b      	ldrb	r3, [r3, #0]
   23be0:	b25b      	sxtb	r3, r3
   23be2:	b2da      	uxtb	r2, r3
   23be4:	3a01      	subs	r2, #1
   23be6:	b2d1      	uxtb	r1, r2
   23be8:	220e      	movs	r2, #14
   23bea:	18ba      	adds	r2, r7, r2
   23bec:	7011      	strb	r1, [r2, #0]
   23bee:	2b00      	cmp	r3, #0
   23bf0:	dccf      	bgt.n	23b92 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   23bf2:	230e      	movs	r3, #14
   23bf4:	18fb      	adds	r3, r7, r3
   23bf6:	220a      	movs	r2, #10
   23bf8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   23bfa:	230d      	movs	r3, #13
   23bfc:	18fb      	adds	r3, r7, r3
   23bfe:	2101      	movs	r1, #1
   23c00:	0018      	movs	r0, r3
   23c02:	4b19      	ldr	r3, [pc, #100]	; (23c68 <spi_cmd_rsp+0x124>)
   23c04:	4798      	blx	r3
   23c06:	1e03      	subs	r3, r0, #0
   23c08:	d014      	beq.n	23c34 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   23c0a:	236a      	movs	r3, #106	; 0x6a
   23c0c:	33ff      	adds	r3, #255	; 0xff
   23c0e:	001a      	movs	r2, r3
   23c10:	4916      	ldr	r1, [pc, #88]	; (23c6c <spi_cmd_rsp+0x128>)
   23c12:	4b17      	ldr	r3, [pc, #92]	; (23c70 <spi_cmd_rsp+0x12c>)
   23c14:	0018      	movs	r0, r3
   23c16:	4b17      	ldr	r3, [pc, #92]	; (23c74 <spi_cmd_rsp+0x130>)
   23c18:	4798      	blx	r3
   23c1a:	4b17      	ldr	r3, [pc, #92]	; (23c78 <spi_cmd_rsp+0x134>)
   23c1c:	0018      	movs	r0, r3
   23c1e:	4b15      	ldr	r3, [pc, #84]	; (23c74 <spi_cmd_rsp+0x130>)
   23c20:	4798      	blx	r3
   23c22:	4b16      	ldr	r3, [pc, #88]	; (23c7c <spi_cmd_rsp+0x138>)
   23c24:	0018      	movs	r0, r3
   23c26:	4b13      	ldr	r3, [pc, #76]	; (23c74 <spi_cmd_rsp+0x130>)
   23c28:	4798      	blx	r3
			result = N_FAIL;
   23c2a:	230f      	movs	r3, #15
   23c2c:	18fb      	adds	r3, r7, r3
   23c2e:	2200      	movs	r2, #0
   23c30:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   23c32:	e010      	b.n	23c56 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   23c34:	230d      	movs	r3, #13
   23c36:	18fb      	adds	r3, r7, r3
   23c38:	781b      	ldrb	r3, [r3, #0]
   23c3a:	2b00      	cmp	r3, #0
   23c3c:	d00b      	beq.n	23c56 <spi_cmd_rsp+0x112>
   23c3e:	230e      	movs	r3, #14
   23c40:	18fb      	adds	r3, r7, r3
   23c42:	781b      	ldrb	r3, [r3, #0]
   23c44:	b25b      	sxtb	r3, r3
   23c46:	b2da      	uxtb	r2, r3
   23c48:	3a01      	subs	r2, #1
   23c4a:	b2d1      	uxtb	r1, r2
   23c4c:	220e      	movs	r2, #14
   23c4e:	18ba      	adds	r2, r7, r2
   23c50:	7011      	strb	r1, [r2, #0]
   23c52:	2b00      	cmp	r3, #0
   23c54:	dcd1      	bgt.n	23bfa <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   23c56:	230f      	movs	r3, #15
   23c58:	18fb      	adds	r3, r7, r3
   23c5a:	781b      	ldrb	r3, [r3, #0]
   23c5c:	b25b      	sxtb	r3, r3
}
   23c5e:	0018      	movs	r0, r3
   23c60:	46bd      	mov	sp, r7
   23c62:	b004      	add	sp, #16
   23c64:	bd80      	pop	{r7, pc}
   23c66:	46c0      	nop			; (mov r8, r8)
   23c68:	000235b9 	.word	0x000235b9
   23c6c:	000394ac 	.word	0x000394ac
   23c70:	00038ea4 	.word	0x00038ea4
   23c74:	0001e529 	.word	0x0001e529
   23c78:	00038f38 	.word	0x00038f38
   23c7c:	00038ee4 	.word	0x00038ee4

00023c80 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   23c80:	b590      	push	{r4, r7, lr}
   23c82:	b09f      	sub	sp, #124	; 0x7c
   23c84:	af00      	add	r7, sp, #0
   23c86:	60b9      	str	r1, [r7, #8]
   23c88:	607a      	str	r2, [r7, #4]
   23c8a:	603b      	str	r3, [r7, #0]
   23c8c:	230f      	movs	r3, #15
   23c8e:	18fb      	adds	r3, r7, r3
   23c90:	1c02      	adds	r2, r0, #0
   23c92:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   23c94:	2300      	movs	r3, #0
   23c96:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   23c98:	2301      	movs	r3, #1
   23c9a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   23c9c:	2338      	movs	r3, #56	; 0x38
   23c9e:	18fb      	adds	r3, r7, r3
   23ca0:	220f      	movs	r2, #15
   23ca2:	18ba      	adds	r2, r7, r2
   23ca4:	7812      	ldrb	r2, [r2, #0]
   23ca6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   23ca8:	230f      	movs	r3, #15
   23caa:	18fb      	adds	r3, r7, r3
   23cac:	781b      	ldrb	r3, [r3, #0]
   23cae:	3bc1      	subs	r3, #193	; 0xc1
   23cb0:	2b0e      	cmp	r3, #14
   23cb2:	d900      	bls.n	23cb6 <spi_cmd_complete+0x36>
   23cb4:	e103      	b.n	23ebe <spi_cmd_complete+0x23e>
   23cb6:	009a      	lsls	r2, r3, #2
   23cb8:	4bd1      	ldr	r3, [pc, #836]	; (24000 <spi_cmd_complete+0x380>)
   23cba:	18d3      	adds	r3, r2, r3
   23cbc:	681b      	ldr	r3, [r3, #0]
   23cbe:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   23cc0:	68bb      	ldr	r3, [r7, #8]
   23cc2:	0c1b      	lsrs	r3, r3, #16
   23cc4:	b2da      	uxtb	r2, r3
   23cc6:	2338      	movs	r3, #56	; 0x38
   23cc8:	18fb      	adds	r3, r7, r3
   23cca:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23ccc:	68bb      	ldr	r3, [r7, #8]
   23cce:	0a1b      	lsrs	r3, r3, #8
   23cd0:	b2da      	uxtb	r2, r3
   23cd2:	2338      	movs	r3, #56	; 0x38
   23cd4:	18fb      	adds	r3, r7, r3
   23cd6:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23cd8:	68bb      	ldr	r3, [r7, #8]
   23cda:	b2da      	uxtb	r2, r3
   23cdc:	2338      	movs	r3, #56	; 0x38
   23cde:	18fb      	adds	r3, r7, r3
   23ce0:	70da      	strb	r2, [r3, #3]
		len = 5;
   23ce2:	2305      	movs	r3, #5
   23ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   23ce6:	e0ed      	b.n	23ec4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   23ce8:	68bb      	ldr	r3, [r7, #8]
   23cea:	0a1b      	lsrs	r3, r3, #8
   23cec:	b2da      	uxtb	r2, r3
   23cee:	2338      	movs	r3, #56	; 0x38
   23cf0:	18fb      	adds	r3, r7, r3
   23cf2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23cf4:	2388      	movs	r3, #136	; 0x88
   23cf6:	18fb      	adds	r3, r7, r3
   23cf8:	781b      	ldrb	r3, [r3, #0]
   23cfa:	2b01      	cmp	r3, #1
   23cfc:	d109      	bne.n	23d12 <spi_cmd_complete+0x92>
   23cfe:	2338      	movs	r3, #56	; 0x38
   23d00:	18fb      	adds	r3, r7, r3
   23d02:	785b      	ldrb	r3, [r3, #1]
   23d04:	2280      	movs	r2, #128	; 0x80
   23d06:	4252      	negs	r2, r2
   23d08:	4313      	orrs	r3, r2
   23d0a:	b2da      	uxtb	r2, r3
   23d0c:	2338      	movs	r3, #56	; 0x38
   23d0e:	18fb      	adds	r3, r7, r3
   23d10:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   23d12:	68bb      	ldr	r3, [r7, #8]
   23d14:	b2da      	uxtb	r2, r3
   23d16:	2338      	movs	r3, #56	; 0x38
   23d18:	18fb      	adds	r3, r7, r3
   23d1a:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23d1c:	2338      	movs	r3, #56	; 0x38
   23d1e:	18fb      	adds	r3, r7, r3
   23d20:	2200      	movs	r2, #0
   23d22:	70da      	strb	r2, [r3, #3]
		len = 5;
   23d24:	2305      	movs	r3, #5
   23d26:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23d28:	e0cc      	b.n	23ec4 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   23d2a:	2338      	movs	r3, #56	; 0x38
   23d2c:	18fb      	adds	r3, r7, r3
   23d2e:	2200      	movs	r2, #0
   23d30:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   23d32:	2338      	movs	r3, #56	; 0x38
   23d34:	18fb      	adds	r3, r7, r3
   23d36:	2200      	movs	r2, #0
   23d38:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23d3a:	2338      	movs	r3, #56	; 0x38
   23d3c:	18fb      	adds	r3, r7, r3
   23d3e:	2200      	movs	r2, #0
   23d40:	70da      	strb	r2, [r3, #3]
		len = 5;
   23d42:	2305      	movs	r3, #5
   23d44:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23d46:	e0bd      	b.n	23ec4 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   23d48:	2338      	movs	r3, #56	; 0x38
   23d4a:	18fb      	adds	r3, r7, r3
   23d4c:	2200      	movs	r2, #0
   23d4e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   23d50:	2338      	movs	r3, #56	; 0x38
   23d52:	18fb      	adds	r3, r7, r3
   23d54:	2200      	movs	r2, #0
   23d56:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   23d58:	2338      	movs	r3, #56	; 0x38
   23d5a:	18fb      	adds	r3, r7, r3
   23d5c:	2200      	movs	r2, #0
   23d5e:	70da      	strb	r2, [r3, #3]
		len = 5;
   23d60:	2305      	movs	r3, #5
   23d62:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23d64:	e0ae      	b.n	23ec4 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   23d66:	2338      	movs	r3, #56	; 0x38
   23d68:	18fb      	adds	r3, r7, r3
   23d6a:	22ff      	movs	r2, #255	; 0xff
   23d6c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   23d6e:	2338      	movs	r3, #56	; 0x38
   23d70:	18fb      	adds	r3, r7, r3
   23d72:	22ff      	movs	r2, #255	; 0xff
   23d74:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   23d76:	2338      	movs	r3, #56	; 0x38
   23d78:	18fb      	adds	r3, r7, r3
   23d7a:	22ff      	movs	r2, #255	; 0xff
   23d7c:	70da      	strb	r2, [r3, #3]
		len = 5;
   23d7e:	2305      	movs	r3, #5
   23d80:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23d82:	e09f      	b.n	23ec4 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   23d84:	68bb      	ldr	r3, [r7, #8]
   23d86:	0c1b      	lsrs	r3, r3, #16
   23d88:	b2da      	uxtb	r2, r3
   23d8a:	2338      	movs	r3, #56	; 0x38
   23d8c:	18fb      	adds	r3, r7, r3
   23d8e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23d90:	68bb      	ldr	r3, [r7, #8]
   23d92:	0a1b      	lsrs	r3, r3, #8
   23d94:	b2da      	uxtb	r2, r3
   23d96:	2338      	movs	r3, #56	; 0x38
   23d98:	18fb      	adds	r3, r7, r3
   23d9a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23d9c:	68bb      	ldr	r3, [r7, #8]
   23d9e:	b2da      	uxtb	r2, r3
   23da0:	2338      	movs	r3, #56	; 0x38
   23da2:	18fb      	adds	r3, r7, r3
   23da4:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   23da6:	683b      	ldr	r3, [r7, #0]
   23da8:	0a1b      	lsrs	r3, r3, #8
   23daa:	b2da      	uxtb	r2, r3
   23dac:	2338      	movs	r3, #56	; 0x38
   23dae:	18fb      	adds	r3, r7, r3
   23db0:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   23db2:	683b      	ldr	r3, [r7, #0]
   23db4:	b2da      	uxtb	r2, r3
   23db6:	2338      	movs	r3, #56	; 0x38
   23db8:	18fb      	adds	r3, r7, r3
   23dba:	715a      	strb	r2, [r3, #5]
		len = 7;
   23dbc:	2307      	movs	r3, #7
   23dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23dc0:	e080      	b.n	23ec4 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   23dc2:	68bb      	ldr	r3, [r7, #8]
   23dc4:	0c1b      	lsrs	r3, r3, #16
   23dc6:	b2da      	uxtb	r2, r3
   23dc8:	2338      	movs	r3, #56	; 0x38
   23dca:	18fb      	adds	r3, r7, r3
   23dcc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23dce:	68bb      	ldr	r3, [r7, #8]
   23dd0:	0a1b      	lsrs	r3, r3, #8
   23dd2:	b2da      	uxtb	r2, r3
   23dd4:	2338      	movs	r3, #56	; 0x38
   23dd6:	18fb      	adds	r3, r7, r3
   23dd8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   23dda:	68bb      	ldr	r3, [r7, #8]
   23ddc:	b2da      	uxtb	r2, r3
   23dde:	2338      	movs	r3, #56	; 0x38
   23de0:	18fb      	adds	r3, r7, r3
   23de2:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   23de4:	683b      	ldr	r3, [r7, #0]
   23de6:	0c1b      	lsrs	r3, r3, #16
   23de8:	b2da      	uxtb	r2, r3
   23dea:	2338      	movs	r3, #56	; 0x38
   23dec:	18fb      	adds	r3, r7, r3
   23dee:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   23df0:	683b      	ldr	r3, [r7, #0]
   23df2:	0a1b      	lsrs	r3, r3, #8
   23df4:	b2da      	uxtb	r2, r3
   23df6:	2338      	movs	r3, #56	; 0x38
   23df8:	18fb      	adds	r3, r7, r3
   23dfa:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   23dfc:	683b      	ldr	r3, [r7, #0]
   23dfe:	b2da      	uxtb	r2, r3
   23e00:	2338      	movs	r3, #56	; 0x38
   23e02:	18fb      	adds	r3, r7, r3
   23e04:	719a      	strb	r2, [r3, #6]
		len = 8;
   23e06:	2308      	movs	r3, #8
   23e08:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23e0a:	e05b      	b.n	23ec4 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   23e0c:	68bb      	ldr	r3, [r7, #8]
   23e0e:	0a1b      	lsrs	r3, r3, #8
   23e10:	b2da      	uxtb	r2, r3
   23e12:	2338      	movs	r3, #56	; 0x38
   23e14:	18fb      	adds	r3, r7, r3
   23e16:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   23e18:	2388      	movs	r3, #136	; 0x88
   23e1a:	18fb      	adds	r3, r7, r3
   23e1c:	781b      	ldrb	r3, [r3, #0]
   23e1e:	2b01      	cmp	r3, #1
   23e20:	d109      	bne.n	23e36 <spi_cmd_complete+0x1b6>
   23e22:	2338      	movs	r3, #56	; 0x38
   23e24:	18fb      	adds	r3, r7, r3
   23e26:	785b      	ldrb	r3, [r3, #1]
   23e28:	2280      	movs	r2, #128	; 0x80
   23e2a:	4252      	negs	r2, r2
   23e2c:	4313      	orrs	r3, r2
   23e2e:	b2da      	uxtb	r2, r3
   23e30:	2338      	movs	r3, #56	; 0x38
   23e32:	18fb      	adds	r3, r7, r3
   23e34:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   23e36:	68bb      	ldr	r3, [r7, #8]
   23e38:	b2da      	uxtb	r2, r3
   23e3a:	2338      	movs	r3, #56	; 0x38
   23e3c:	18fb      	adds	r3, r7, r3
   23e3e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   23e40:	687b      	ldr	r3, [r7, #4]
   23e42:	78da      	ldrb	r2, [r3, #3]
   23e44:	2338      	movs	r3, #56	; 0x38
   23e46:	18fb      	adds	r3, r7, r3
   23e48:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   23e4a:	687b      	ldr	r3, [r7, #4]
   23e4c:	789a      	ldrb	r2, [r3, #2]
   23e4e:	2338      	movs	r3, #56	; 0x38
   23e50:	18fb      	adds	r3, r7, r3
   23e52:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   23e54:	687b      	ldr	r3, [r7, #4]
   23e56:	785a      	ldrb	r2, [r3, #1]
   23e58:	2338      	movs	r3, #56	; 0x38
   23e5a:	18fb      	adds	r3, r7, r3
   23e5c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   23e5e:	687b      	ldr	r3, [r7, #4]
   23e60:	781a      	ldrb	r2, [r3, #0]
   23e62:	2338      	movs	r3, #56	; 0x38
   23e64:	18fb      	adds	r3, r7, r3
   23e66:	719a      	strb	r2, [r3, #6]
		len = 8;
   23e68:	2308      	movs	r3, #8
   23e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23e6c:	e02a      	b.n	23ec4 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   23e6e:	68bb      	ldr	r3, [r7, #8]
   23e70:	0c1b      	lsrs	r3, r3, #16
   23e72:	b2da      	uxtb	r2, r3
   23e74:	2338      	movs	r3, #56	; 0x38
   23e76:	18fb      	adds	r3, r7, r3
   23e78:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   23e7a:	68bb      	ldr	r3, [r7, #8]
   23e7c:	0a1b      	lsrs	r3, r3, #8
   23e7e:	b2da      	uxtb	r2, r3
   23e80:	2338      	movs	r3, #56	; 0x38
   23e82:	18fb      	adds	r3, r7, r3
   23e84:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   23e86:	68bb      	ldr	r3, [r7, #8]
   23e88:	b2da      	uxtb	r2, r3
   23e8a:	2338      	movs	r3, #56	; 0x38
   23e8c:	18fb      	adds	r3, r7, r3
   23e8e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   23e90:	687b      	ldr	r3, [r7, #4]
   23e92:	78da      	ldrb	r2, [r3, #3]
   23e94:	2338      	movs	r3, #56	; 0x38
   23e96:	18fb      	adds	r3, r7, r3
   23e98:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   23e9a:	687b      	ldr	r3, [r7, #4]
   23e9c:	789a      	ldrb	r2, [r3, #2]
   23e9e:	2338      	movs	r3, #56	; 0x38
   23ea0:	18fb      	adds	r3, r7, r3
   23ea2:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   23ea4:	687b      	ldr	r3, [r7, #4]
   23ea6:	785a      	ldrb	r2, [r3, #1]
   23ea8:	2338      	movs	r3, #56	; 0x38
   23eaa:	18fb      	adds	r3, r7, r3
   23eac:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   23eae:	687b      	ldr	r3, [r7, #4]
   23eb0:	781a      	ldrb	r2, [r3, #0]
   23eb2:	2338      	movs	r3, #56	; 0x38
   23eb4:	18fb      	adds	r3, r7, r3
   23eb6:	71da      	strb	r2, [r3, #7]
		len = 9;
   23eb8:	2309      	movs	r3, #9
   23eba:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   23ebc:	e002      	b.n	23ec4 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   23ebe:	2300      	movs	r3, #0
   23ec0:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   23ec2:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   23ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23ec6:	2b01      	cmp	r3, #1
   23ec8:	d001      	beq.n	23ece <spi_cmd_complete+0x24e>
		return result;
   23eca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23ecc:	e33a      	b.n	24544 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   23ece:	4b4d      	ldr	r3, [pc, #308]	; (24004 <spi_cmd_complete+0x384>)
   23ed0:	781b      	ldrb	r3, [r3, #0]
   23ed2:	2b00      	cmp	r3, #0
   23ed4:	d111      	bne.n	23efa <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   23ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23ed8:	1e5c      	subs	r4, r3, #1
   23eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23edc:	3b01      	subs	r3, #1
   23ede:	001a      	movs	r2, r3
   23ee0:	2338      	movs	r3, #56	; 0x38
   23ee2:	18fb      	adds	r3, r7, r3
   23ee4:	0019      	movs	r1, r3
   23ee6:	207f      	movs	r0, #127	; 0x7f
   23ee8:	4b47      	ldr	r3, [pc, #284]	; (24008 <spi_cmd_complete+0x388>)
   23eea:	4798      	blx	r3
   23eec:	0003      	movs	r3, r0
   23eee:	18db      	adds	r3, r3, r3
   23ef0:	b2da      	uxtb	r2, r3
   23ef2:	2338      	movs	r3, #56	; 0x38
   23ef4:	18fb      	adds	r3, r7, r3
   23ef6:	551a      	strb	r2, [r3, r4]
   23ef8:	e002      	b.n	23f00 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   23efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23efc:	3b01      	subs	r3, #1
   23efe:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   23f00:	230f      	movs	r3, #15
   23f02:	18fb      	adds	r3, r7, r3
   23f04:	781b      	ldrb	r3, [r3, #0]
   23f06:	2bcf      	cmp	r3, #207	; 0xcf
   23f08:	d009      	beq.n	23f1e <spi_cmd_complete+0x29e>
   23f0a:	230f      	movs	r3, #15
   23f0c:	18fb      	adds	r3, r7, r3
   23f0e:	781b      	ldrb	r3, [r3, #0]
   23f10:	2bc5      	cmp	r3, #197	; 0xc5
   23f12:	d004      	beq.n	23f1e <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   23f14:	230f      	movs	r3, #15
   23f16:	18fb      	adds	r3, r7, r3
   23f18:	781b      	ldrb	r3, [r3, #0]
   23f1a:	2bc6      	cmp	r3, #198	; 0xc6
   23f1c:	d103      	bne.n	23f26 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   23f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23f20:	3306      	adds	r3, #6
   23f22:	673b      	str	r3, [r7, #112]	; 0x70
   23f24:	e018      	b.n	23f58 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   23f26:	230f      	movs	r3, #15
   23f28:	18fb      	adds	r3, r7, r3
   23f2a:	781b      	ldrb	r3, [r3, #0]
   23f2c:	2bc4      	cmp	r3, #196	; 0xc4
   23f2e:	d004      	beq.n	23f3a <spi_cmd_complete+0x2ba>
   23f30:	230f      	movs	r3, #15
   23f32:	18fb      	adds	r3, r7, r3
   23f34:	781b      	ldrb	r3, [r3, #0]
   23f36:	2bca      	cmp	r3, #202	; 0xca
   23f38:	d10b      	bne.n	23f52 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   23f3a:	4b32      	ldr	r3, [pc, #200]	; (24004 <spi_cmd_complete+0x384>)
   23f3c:	781b      	ldrb	r3, [r3, #0]
   23f3e:	2b00      	cmp	r3, #0
   23f40:	d103      	bne.n	23f4a <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23f44:	330c      	adds	r3, #12
   23f46:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23f48:	e006      	b.n	23f58 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   23f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23f4c:	330a      	adds	r3, #10
   23f4e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   23f50:	e002      	b.n	23f58 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   23f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   23f54:	3305      	adds	r3, #5
   23f56:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   23f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23f5a:	2b20      	cmp	r3, #32
   23f5c:	d914      	bls.n	23f88 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   23f5e:	23f7      	movs	r3, #247	; 0xf7
   23f60:	005a      	lsls	r2, r3, #1
   23f62:	492a      	ldr	r1, [pc, #168]	; (2400c <spi_cmd_complete+0x38c>)
   23f64:	4b2a      	ldr	r3, [pc, #168]	; (24010 <spi_cmd_complete+0x390>)
   23f66:	0018      	movs	r0, r3
   23f68:	4b2a      	ldr	r3, [pc, #168]	; (24014 <spi_cmd_complete+0x394>)
   23f6a:	4798      	blx	r3
   23f6c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   23f6e:	4b2a      	ldr	r3, [pc, #168]	; (24018 <spi_cmd_complete+0x398>)
   23f70:	2220      	movs	r2, #32
   23f72:	0018      	movs	r0, r3
   23f74:	4b27      	ldr	r3, [pc, #156]	; (24014 <spi_cmd_complete+0x394>)
   23f76:	4798      	blx	r3
   23f78:	4b28      	ldr	r3, [pc, #160]	; (2401c <spi_cmd_complete+0x39c>)
   23f7a:	0018      	movs	r0, r3
   23f7c:	4b25      	ldr	r3, [pc, #148]	; (24014 <spi_cmd_complete+0x394>)
   23f7e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   23f80:	2300      	movs	r3, #0
   23f82:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23f84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23f86:	e2dd      	b.n	24544 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   23f88:	2377      	movs	r3, #119	; 0x77
   23f8a:	18fb      	adds	r3, r7, r3
   23f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23f8e:	701a      	strb	r2, [r3, #0]
   23f90:	e00d      	b.n	23fae <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   23f92:	2377      	movs	r3, #119	; 0x77
   23f94:	18fb      	adds	r3, r7, r3
   23f96:	781b      	ldrb	r3, [r3, #0]
   23f98:	2238      	movs	r2, #56	; 0x38
   23f9a:	18ba      	adds	r2, r7, r2
   23f9c:	2100      	movs	r1, #0
   23f9e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   23fa0:	2377      	movs	r3, #119	; 0x77
   23fa2:	18fb      	adds	r3, r7, r3
   23fa4:	781a      	ldrb	r2, [r3, #0]
   23fa6:	2377      	movs	r3, #119	; 0x77
   23fa8:	18fb      	adds	r3, r7, r3
   23faa:	3201      	adds	r2, #1
   23fac:	701a      	strb	r2, [r3, #0]
   23fae:	2377      	movs	r3, #119	; 0x77
   23fb0:	18fb      	adds	r3, r7, r3
   23fb2:	781a      	ldrb	r2, [r3, #0]
   23fb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23fb6:	429a      	cmp	r2, r3
   23fb8:	d3eb      	bcc.n	23f92 <spi_cmd_complete+0x312>
	}
	rix = len;
   23fba:	2376      	movs	r3, #118	; 0x76
   23fbc:	18fb      	adds	r3, r7, r3
   23fbe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   23fc0:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   23fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   23fc4:	b29a      	uxth	r2, r3
   23fc6:	2318      	movs	r3, #24
   23fc8:	18f9      	adds	r1, r7, r3
   23fca:	2338      	movs	r3, #56	; 0x38
   23fcc:	18fb      	adds	r3, r7, r3
   23fce:	0018      	movs	r0, r3
   23fd0:	4b13      	ldr	r3, [pc, #76]	; (24020 <spi_cmd_complete+0x3a0>)
   23fd2:	4798      	blx	r3
   23fd4:	1e03      	subs	r3, r0, #0
   23fd6:	d027      	beq.n	24028 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   23fd8:	23fa      	movs	r3, #250	; 0xfa
   23fda:	33ff      	adds	r3, #255	; 0xff
   23fdc:	001a      	movs	r2, r3
   23fde:	490b      	ldr	r1, [pc, #44]	; (2400c <spi_cmd_complete+0x38c>)
   23fe0:	4b0b      	ldr	r3, [pc, #44]	; (24010 <spi_cmd_complete+0x390>)
   23fe2:	0018      	movs	r0, r3
   23fe4:	4b0b      	ldr	r3, [pc, #44]	; (24014 <spi_cmd_complete+0x394>)
   23fe6:	4798      	blx	r3
   23fe8:	4b0e      	ldr	r3, [pc, #56]	; (24024 <spi_cmd_complete+0x3a4>)
   23fea:	0018      	movs	r0, r3
   23fec:	4b09      	ldr	r3, [pc, #36]	; (24014 <spi_cmd_complete+0x394>)
   23fee:	4798      	blx	r3
   23ff0:	4b0a      	ldr	r3, [pc, #40]	; (2401c <spi_cmd_complete+0x39c>)
   23ff2:	0018      	movs	r0, r3
   23ff4:	4b07      	ldr	r3, [pc, #28]	; (24014 <spi_cmd_complete+0x394>)
   23ff6:	4798      	blx	r3
		result = N_FAIL;
   23ff8:	2300      	movs	r3, #0
   23ffa:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   23ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   23ffe:	e2a1      	b.n	24544 <spi_cmd_complete+0x8c4>
   24000:	00039458 	.word	0x00039458
   24004:	20003ea0 	.word	0x20003ea0
   24008:	000236b5 	.word	0x000236b5
   2400c:	000394b8 	.word	0x000394b8
   24010:	00038ea4 	.word	0x00038ea4
   24014:	0001e529 	.word	0x0001e529
   24018:	00038f6c 	.word	0x00038f6c
   2401c:	00038ee4 	.word	0x00038ee4
   24020:	00023641 	.word	0x00023641
   24024:	00038eb8 	.word	0x00038eb8
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24028:	230f      	movs	r3, #15
   2402a:	18fb      	adds	r3, r7, r3
   2402c:	781b      	ldrb	r3, [r3, #0]
   2402e:	2bcf      	cmp	r3, #207	; 0xcf
   24030:	d009      	beq.n	24046 <spi_cmd_complete+0x3c6>
   24032:	230f      	movs	r3, #15
   24034:	18fb      	adds	r3, r7, r3
   24036:	781b      	ldrb	r3, [r3, #0]
   24038:	2bc5      	cmp	r3, #197	; 0xc5
   2403a:	d004      	beq.n	24046 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   2403c:	230f      	movs	r3, #15
   2403e:	18fb      	adds	r3, r7, r3
   24040:	781b      	ldrb	r3, [r3, #0]
   24042:	2bc6      	cmp	r3, #198	; 0xc6
   24044:	d106      	bne.n	24054 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   24046:	2376      	movs	r3, #118	; 0x76
   24048:	18fb      	adds	r3, r7, r3
   2404a:	781a      	ldrb	r2, [r3, #0]
   2404c:	2376      	movs	r3, #118	; 0x76
   2404e:	18fb      	adds	r3, r7, r3
   24050:	3201      	adds	r2, #1
   24052:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   24054:	2376      	movs	r3, #118	; 0x76
   24056:	18fb      	adds	r3, r7, r3
   24058:	781b      	ldrb	r3, [r3, #0]
   2405a:	2276      	movs	r2, #118	; 0x76
   2405c:	18ba      	adds	r2, r7, r2
   2405e:	1c59      	adds	r1, r3, #1
   24060:	7011      	strb	r1, [r2, #0]
   24062:	001a      	movs	r2, r3
   24064:	2318      	movs	r3, #24
   24066:	18fb      	adds	r3, r7, r3
   24068:	5c9a      	ldrb	r2, [r3, r2]
   2406a:	2317      	movs	r3, #23
   2406c:	18fb      	adds	r3, r7, r3
   2406e:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   24070:	2317      	movs	r3, #23
   24072:	18fb      	adds	r3, r7, r3
   24074:	781b      	ldrb	r3, [r3, #0]
   24076:	220f      	movs	r2, #15
   24078:	18ba      	adds	r2, r7, r2
   2407a:	7812      	ldrb	r2, [r2, #0]
   2407c:	429a      	cmp	r2, r3
   2407e:	d018      	beq.n	240b2 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   24080:	4add      	ldr	r2, [pc, #884]	; (243f8 <spi_cmd_complete+0x778>)
   24082:	49de      	ldr	r1, [pc, #888]	; (243fc <spi_cmd_complete+0x77c>)
   24084:	4bde      	ldr	r3, [pc, #888]	; (24400 <spi_cmd_complete+0x780>)
   24086:	0018      	movs	r0, r3
   24088:	4bde      	ldr	r3, [pc, #888]	; (24404 <spi_cmd_complete+0x784>)
   2408a:	4798      	blx	r3
   2408c:	230f      	movs	r3, #15
   2408e:	18fb      	adds	r3, r7, r3
   24090:	7819      	ldrb	r1, [r3, #0]
   24092:	2317      	movs	r3, #23
   24094:	18fb      	adds	r3, r7, r3
   24096:	781b      	ldrb	r3, [r3, #0]
   24098:	001a      	movs	r2, r3
   2409a:	4bdb      	ldr	r3, [pc, #876]	; (24408 <spi_cmd_complete+0x788>)
   2409c:	0018      	movs	r0, r3
   2409e:	4bd9      	ldr	r3, [pc, #868]	; (24404 <spi_cmd_complete+0x784>)
   240a0:	4798      	blx	r3
   240a2:	4bda      	ldr	r3, [pc, #872]	; (2440c <spi_cmd_complete+0x78c>)
   240a4:	0018      	movs	r0, r3
   240a6:	4bd7      	ldr	r3, [pc, #860]	; (24404 <spi_cmd_complete+0x784>)
   240a8:	4798      	blx	r3
		result = N_FAIL;
   240aa:	2300      	movs	r3, #0
   240ac:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   240ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   240b0:	e248      	b.n	24544 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   240b2:	2376      	movs	r3, #118	; 0x76
   240b4:	18fb      	adds	r3, r7, r3
   240b6:	781b      	ldrb	r3, [r3, #0]
   240b8:	2276      	movs	r2, #118	; 0x76
   240ba:	18ba      	adds	r2, r7, r2
   240bc:	1c59      	adds	r1, r3, #1
   240be:	7011      	strb	r1, [r2, #0]
   240c0:	001a      	movs	r2, r3
   240c2:	2318      	movs	r3, #24
   240c4:	18fb      	adds	r3, r7, r3
   240c6:	5c9a      	ldrb	r2, [r3, r2]
   240c8:	2317      	movs	r3, #23
   240ca:	18fb      	adds	r3, r7, r3
   240cc:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   240ce:	2317      	movs	r3, #23
   240d0:	18fb      	adds	r3, r7, r3
   240d2:	781b      	ldrb	r3, [r3, #0]
   240d4:	2b00      	cmp	r3, #0
   240d6:	d016      	beq.n	24106 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   240d8:	4acd      	ldr	r2, [pc, #820]	; (24410 <spi_cmd_complete+0x790>)
   240da:	49c8      	ldr	r1, [pc, #800]	; (243fc <spi_cmd_complete+0x77c>)
   240dc:	4bc8      	ldr	r3, [pc, #800]	; (24400 <spi_cmd_complete+0x780>)
   240de:	0018      	movs	r0, r3
   240e0:	4bc8      	ldr	r3, [pc, #800]	; (24404 <spi_cmd_complete+0x784>)
   240e2:	4798      	blx	r3
   240e4:	2317      	movs	r3, #23
   240e6:	18fb      	adds	r3, r7, r3
   240e8:	781b      	ldrb	r3, [r3, #0]
   240ea:	001a      	movs	r2, r3
   240ec:	4bc9      	ldr	r3, [pc, #804]	; (24414 <spi_cmd_complete+0x794>)
   240ee:	0011      	movs	r1, r2
   240f0:	0018      	movs	r0, r3
   240f2:	4bc4      	ldr	r3, [pc, #784]	; (24404 <spi_cmd_complete+0x784>)
   240f4:	4798      	blx	r3
   240f6:	4bc5      	ldr	r3, [pc, #788]	; (2440c <spi_cmd_complete+0x78c>)
   240f8:	0018      	movs	r0, r3
   240fa:	4bc2      	ldr	r3, [pc, #776]	; (24404 <spi_cmd_complete+0x784>)
   240fc:	4798      	blx	r3
		result = N_FAIL;
   240fe:	2300      	movs	r3, #0
   24100:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24104:	e21e      	b.n	24544 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   24106:	230f      	movs	r3, #15
   24108:	18fb      	adds	r3, r7, r3
   2410a:	781b      	ldrb	r3, [r3, #0]
   2410c:	2bc4      	cmp	r3, #196	; 0xc4
   2410e:	d00f      	beq.n	24130 <spi_cmd_complete+0x4b0>
   24110:	230f      	movs	r3, #15
   24112:	18fb      	adds	r3, r7, r3
   24114:	781b      	ldrb	r3, [r3, #0]
   24116:	2bca      	cmp	r3, #202	; 0xca
   24118:	d00a      	beq.n	24130 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   2411a:	230f      	movs	r3, #15
   2411c:	18fb      	adds	r3, r7, r3
   2411e:	781b      	ldrb	r3, [r3, #0]
   24120:	2bc2      	cmp	r3, #194	; 0xc2
   24122:	d005      	beq.n	24130 <spi_cmd_complete+0x4b0>
   24124:	230f      	movs	r3, #15
   24126:	18fb      	adds	r3, r7, r3
   24128:	781b      	ldrb	r3, [r3, #0]
   2412a:	2bc8      	cmp	r3, #200	; 0xc8
   2412c:	d000      	beq.n	24130 <spi_cmd_complete+0x4b0>
   2412e:	e208      	b.n	24542 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24130:	230a      	movs	r3, #10
   24132:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24134:	2376      	movs	r3, #118	; 0x76
   24136:	18fb      	adds	r3, r7, r3
   24138:	781a      	ldrb	r2, [r3, #0]
   2413a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2413c:	429a      	cmp	r2, r3
   2413e:	d218      	bcs.n	24172 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24140:	2376      	movs	r3, #118	; 0x76
   24142:	18fb      	adds	r3, r7, r3
   24144:	781b      	ldrb	r3, [r3, #0]
   24146:	2276      	movs	r2, #118	; 0x76
   24148:	18ba      	adds	r2, r7, r2
   2414a:	1c59      	adds	r1, r3, #1
   2414c:	7011      	strb	r1, [r2, #0]
   2414e:	001a      	movs	r2, r3
   24150:	2318      	movs	r3, #24
   24152:	18fb      	adds	r3, r7, r3
   24154:	5c9a      	ldrb	r2, [r3, r2]
   24156:	2317      	movs	r3, #23
   24158:	18fb      	adds	r3, r7, r3
   2415a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   2415c:	2317      	movs	r3, #23
   2415e:	18fb      	adds	r3, r7, r3
   24160:	781b      	ldrb	r3, [r3, #0]
   24162:	091b      	lsrs	r3, r3, #4
   24164:	b2db      	uxtb	r3, r3
   24166:	001a      	movs	r2, r3
   24168:	230f      	movs	r3, #15
   2416a:	4013      	ands	r3, r2
   2416c:	2b0f      	cmp	r3, #15
   2416e:	d103      	bne.n	24178 <spi_cmd_complete+0x4f8>
					break;
   24170:	e007      	b.n	24182 <spi_cmd_complete+0x502>
					retry = 0;
   24172:	2300      	movs	r3, #0
   24174:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   24176:	e004      	b.n	24182 <spi_cmd_complete+0x502>
			} while (retry--);
   24178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2417a:	1e5a      	subs	r2, r3, #1
   2417c:	667a      	str	r2, [r7, #100]	; 0x64
   2417e:	2b00      	cmp	r3, #0
   24180:	d1d8      	bne.n	24134 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24184:	2b00      	cmp	r3, #0
   24186:	dc18      	bgt.n	241ba <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   24188:	2395      	movs	r3, #149	; 0x95
   2418a:	009a      	lsls	r2, r3, #2
   2418c:	499b      	ldr	r1, [pc, #620]	; (243fc <spi_cmd_complete+0x77c>)
   2418e:	4b9c      	ldr	r3, [pc, #624]	; (24400 <spi_cmd_complete+0x780>)
   24190:	0018      	movs	r0, r3
   24192:	4b9c      	ldr	r3, [pc, #624]	; (24404 <spi_cmd_complete+0x784>)
   24194:	4798      	blx	r3
   24196:	2317      	movs	r3, #23
   24198:	18fb      	adds	r3, r7, r3
   2419a:	781b      	ldrb	r3, [r3, #0]
   2419c:	001a      	movs	r2, r3
   2419e:	4b9e      	ldr	r3, [pc, #632]	; (24418 <spi_cmd_complete+0x798>)
   241a0:	0011      	movs	r1, r2
   241a2:	0018      	movs	r0, r3
   241a4:	4b97      	ldr	r3, [pc, #604]	; (24404 <spi_cmd_complete+0x784>)
   241a6:	4798      	blx	r3
   241a8:	4b98      	ldr	r3, [pc, #608]	; (2440c <spi_cmd_complete+0x78c>)
   241aa:	0018      	movs	r0, r3
   241ac:	4b95      	ldr	r3, [pc, #596]	; (24404 <spi_cmd_complete+0x784>)
   241ae:	4798      	blx	r3
				result = N_RESET;
   241b0:	2301      	movs	r3, #1
   241b2:	425b      	negs	r3, r3
   241b4:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   241b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   241b8:	e1c4      	b.n	24544 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   241ba:	230f      	movs	r3, #15
   241bc:	18fb      	adds	r3, r7, r3
   241be:	781b      	ldrb	r3, [r3, #0]
   241c0:	2bc4      	cmp	r3, #196	; 0xc4
   241c2:	d005      	beq.n	241d0 <spi_cmd_complete+0x550>
   241c4:	230f      	movs	r3, #15
   241c6:	18fb      	adds	r3, r7, r3
   241c8:	781b      	ldrb	r3, [r3, #0]
   241ca:	2bca      	cmp	r3, #202	; 0xca
   241cc:	d000      	beq.n	241d0 <spi_cmd_complete+0x550>
   241ce:	e08e      	b.n	242ee <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   241d0:	2376      	movs	r3, #118	; 0x76
   241d2:	18fb      	adds	r3, r7, r3
   241d4:	781b      	ldrb	r3, [r3, #0]
   241d6:	3303      	adds	r3, #3
   241d8:	001a      	movs	r2, r3
   241da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   241dc:	429a      	cmp	r2, r3
   241de:	d23c      	bcs.n	2425a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   241e0:	2376      	movs	r3, #118	; 0x76
   241e2:	18fb      	adds	r3, r7, r3
   241e4:	781b      	ldrb	r3, [r3, #0]
   241e6:	2276      	movs	r2, #118	; 0x76
   241e8:	18ba      	adds	r2, r7, r2
   241ea:	1c59      	adds	r1, r3, #1
   241ec:	7011      	strb	r1, [r2, #0]
   241ee:	001a      	movs	r2, r3
   241f0:	2318      	movs	r3, #24
   241f2:	18fb      	adds	r3, r7, r3
   241f4:	5c9a      	ldrb	r2, [r3, r2]
   241f6:	687b      	ldr	r3, [r7, #4]
   241f8:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   241fa:	687b      	ldr	r3, [r7, #4]
   241fc:	1c5a      	adds	r2, r3, #1
   241fe:	2376      	movs	r3, #118	; 0x76
   24200:	18fb      	adds	r3, r7, r3
   24202:	781b      	ldrb	r3, [r3, #0]
   24204:	2176      	movs	r1, #118	; 0x76
   24206:	1879      	adds	r1, r7, r1
   24208:	1c58      	adds	r0, r3, #1
   2420a:	7008      	strb	r0, [r1, #0]
   2420c:	0019      	movs	r1, r3
   2420e:	2318      	movs	r3, #24
   24210:	18fb      	adds	r3, r7, r3
   24212:	5c5b      	ldrb	r3, [r3, r1]
   24214:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24216:	687b      	ldr	r3, [r7, #4]
   24218:	1c9a      	adds	r2, r3, #2
   2421a:	2376      	movs	r3, #118	; 0x76
   2421c:	18fb      	adds	r3, r7, r3
   2421e:	781b      	ldrb	r3, [r3, #0]
   24220:	2176      	movs	r1, #118	; 0x76
   24222:	1879      	adds	r1, r7, r1
   24224:	1c58      	adds	r0, r3, #1
   24226:	7008      	strb	r0, [r1, #0]
   24228:	0019      	movs	r1, r3
   2422a:	2318      	movs	r3, #24
   2422c:	18fb      	adds	r3, r7, r3
   2422e:	5c5b      	ldrb	r3, [r3, r1]
   24230:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24232:	687b      	ldr	r3, [r7, #4]
   24234:	1cda      	adds	r2, r3, #3
   24236:	2376      	movs	r3, #118	; 0x76
   24238:	18fb      	adds	r3, r7, r3
   2423a:	781b      	ldrb	r3, [r3, #0]
   2423c:	2176      	movs	r1, #118	; 0x76
   2423e:	1879      	adds	r1, r7, r1
   24240:	1c58      	adds	r0, r3, #1
   24242:	7008      	strb	r0, [r1, #0]
   24244:	0019      	movs	r1, r3
   24246:	2318      	movs	r3, #24
   24248:	18fb      	adds	r3, r7, r3
   2424a:	5c5b      	ldrb	r3, [r3, r1]
   2424c:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   2424e:	4b73      	ldr	r3, [pc, #460]	; (2441c <spi_cmd_complete+0x79c>)
   24250:	781b      	ldrb	r3, [r3, #0]
   24252:	2b00      	cmp	r3, #0
   24254:	d000      	beq.n	24258 <spi_cmd_complete+0x5d8>
   24256:	e174      	b.n	24542 <spi_cmd_complete+0x8c2>
   24258:	e011      	b.n	2427e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   2425a:	4a71      	ldr	r2, [pc, #452]	; (24420 <spi_cmd_complete+0x7a0>)
   2425c:	4967      	ldr	r1, [pc, #412]	; (243fc <spi_cmd_complete+0x77c>)
   2425e:	4b68      	ldr	r3, [pc, #416]	; (24400 <spi_cmd_complete+0x780>)
   24260:	0018      	movs	r0, r3
   24262:	4b68      	ldr	r3, [pc, #416]	; (24404 <spi_cmd_complete+0x784>)
   24264:	4798      	blx	r3
   24266:	4b6f      	ldr	r3, [pc, #444]	; (24424 <spi_cmd_complete+0x7a4>)
   24268:	0018      	movs	r0, r3
   2426a:	4b66      	ldr	r3, [pc, #408]	; (24404 <spi_cmd_complete+0x784>)
   2426c:	4798      	blx	r3
   2426e:	4b67      	ldr	r3, [pc, #412]	; (2440c <spi_cmd_complete+0x78c>)
   24270:	0018      	movs	r0, r3
   24272:	4b64      	ldr	r3, [pc, #400]	; (24404 <spi_cmd_complete+0x784>)
   24274:	4798      	blx	r3
					result = N_FAIL;
   24276:	2300      	movs	r3, #0
   24278:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   2427a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2427c:	e162      	b.n	24544 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   2427e:	2376      	movs	r3, #118	; 0x76
   24280:	18fb      	adds	r3, r7, r3
   24282:	781b      	ldrb	r3, [r3, #0]
   24284:	3301      	adds	r3, #1
   24286:	001a      	movs	r2, r3
   24288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2428a:	429a      	cmp	r2, r3
   2428c:	d21c      	bcs.n	242c8 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   2428e:	2376      	movs	r3, #118	; 0x76
   24290:	18fb      	adds	r3, r7, r3
   24292:	781b      	ldrb	r3, [r3, #0]
   24294:	2276      	movs	r2, #118	; 0x76
   24296:	18ba      	adds	r2, r7, r2
   24298:	1c59      	adds	r1, r3, #1
   2429a:	7011      	strb	r1, [r2, #0]
   2429c:	001a      	movs	r2, r3
   2429e:	2318      	movs	r3, #24
   242a0:	18fb      	adds	r3, r7, r3
   242a2:	5c9a      	ldrb	r2, [r3, r2]
   242a4:	2314      	movs	r3, #20
   242a6:	18fb      	adds	r3, r7, r3
   242a8:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   242aa:	2376      	movs	r3, #118	; 0x76
   242ac:	18fb      	adds	r3, r7, r3
   242ae:	781b      	ldrb	r3, [r3, #0]
   242b0:	2276      	movs	r2, #118	; 0x76
   242b2:	18ba      	adds	r2, r7, r2
   242b4:	1c59      	adds	r1, r3, #1
   242b6:	7011      	strb	r1, [r2, #0]
   242b8:	001a      	movs	r2, r3
   242ba:	2318      	movs	r3, #24
   242bc:	18fb      	adds	r3, r7, r3
   242be:	5c9a      	ldrb	r2, [r3, r2]
   242c0:	2314      	movs	r3, #20
   242c2:	18fb      	adds	r3, r7, r3
   242c4:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   242c6:	e13c      	b.n	24542 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   242c8:	239c      	movs	r3, #156	; 0x9c
   242ca:	009a      	lsls	r2, r3, #2
   242cc:	494b      	ldr	r1, [pc, #300]	; (243fc <spi_cmd_complete+0x77c>)
   242ce:	4b4c      	ldr	r3, [pc, #304]	; (24400 <spi_cmd_complete+0x780>)
   242d0:	0018      	movs	r0, r3
   242d2:	4b4c      	ldr	r3, [pc, #304]	; (24404 <spi_cmd_complete+0x784>)
   242d4:	4798      	blx	r3
   242d6:	4b54      	ldr	r3, [pc, #336]	; (24428 <spi_cmd_complete+0x7a8>)
   242d8:	0018      	movs	r0, r3
   242da:	4b4a      	ldr	r3, [pc, #296]	; (24404 <spi_cmd_complete+0x784>)
   242dc:	4798      	blx	r3
   242de:	4b4b      	ldr	r3, [pc, #300]	; (2440c <spi_cmd_complete+0x78c>)
   242e0:	0018      	movs	r0, r3
   242e2:	4b48      	ldr	r3, [pc, #288]	; (24404 <spi_cmd_complete+0x784>)
   242e4:	4798      	blx	r3
						result = N_FAIL;
   242e6:	2300      	movs	r3, #0
   242e8:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   242ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   242ec:	e12a      	b.n	24544 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   242ee:	230f      	movs	r3, #15
   242f0:	18fb      	adds	r3, r7, r3
   242f2:	781b      	ldrb	r3, [r3, #0]
   242f4:	2bc2      	cmp	r3, #194	; 0xc2
   242f6:	d005      	beq.n	24304 <spi_cmd_complete+0x684>
   242f8:	230f      	movs	r3, #15
   242fa:	18fb      	adds	r3, r7, r3
   242fc:	781b      	ldrb	r3, [r3, #0]
   242fe:	2bc8      	cmp	r3, #200	; 0xc8
   24300:	d000      	beq.n	24304 <spi_cmd_complete+0x684>
   24302:	e11e      	b.n	24542 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   24304:	2300      	movs	r3, #0
   24306:	663b      	str	r3, [r7, #96]	; 0x60
   24308:	e011      	b.n	2432e <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   2430a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2430c:	1c5a      	adds	r2, r3, #1
   2430e:	663a      	str	r2, [r7, #96]	; 0x60
   24310:	001a      	movs	r2, r3
   24312:	687b      	ldr	r3, [r7, #4]
   24314:	189a      	adds	r2, r3, r2
   24316:	2376      	movs	r3, #118	; 0x76
   24318:	18fb      	adds	r3, r7, r3
   2431a:	781b      	ldrb	r3, [r3, #0]
   2431c:	2176      	movs	r1, #118	; 0x76
   2431e:	1879      	adds	r1, r7, r1
   24320:	1c58      	adds	r0, r3, #1
   24322:	7008      	strb	r0, [r1, #0]
   24324:	0019      	movs	r1, r3
   24326:	2318      	movs	r3, #24
   24328:	18fb      	adds	r3, r7, r3
   2432a:	5c5b      	ldrb	r3, [r3, r1]
   2432c:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   2432e:	2376      	movs	r3, #118	; 0x76
   24330:	18fb      	adds	r3, r7, r3
   24332:	781a      	ldrb	r2, [r3, #0]
   24334:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24336:	429a      	cmp	r2, r3
   24338:	d203      	bcs.n	24342 <spi_cmd_complete+0x6c2>
   2433a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   2433c:	683b      	ldr	r3, [r7, #0]
   2433e:	429a      	cmp	r2, r3
   24340:	d3e3      	bcc.n	2430a <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24344:	683a      	ldr	r2, [r7, #0]
   24346:	1ad3      	subs	r3, r2, r3
   24348:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   2434a:	683b      	ldr	r3, [r7, #0]
   2434c:	2b00      	cmp	r3, #0
   2434e:	d100      	bne.n	24352 <spi_cmd_complete+0x6d2>
   24350:	e0f1      	b.n	24536 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24354:	2280      	movs	r2, #128	; 0x80
   24356:	0192      	lsls	r2, r2, #6
   24358:	1ad3      	subs	r3, r2, r3
   2435a:	001a      	movs	r2, r3
   2435c:	683b      	ldr	r3, [r7, #0]
   2435e:	429a      	cmp	r2, r3
   24360:	d302      	bcc.n	24368 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24362:	683b      	ldr	r3, [r7, #0]
   24364:	65fb      	str	r3, [r7, #92]	; 0x5c
   24366:	e004      	b.n	24372 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   2436a:	2280      	movs	r2, #128	; 0x80
   2436c:	0192      	lsls	r2, r2, #6
   2436e:	1ad3      	subs	r3, r2, r3
   24370:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24374:	687a      	ldr	r2, [r7, #4]
   24376:	18d3      	adds	r3, r2, r3
   24378:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   2437a:	b292      	uxth	r2, r2
   2437c:	0011      	movs	r1, r2
   2437e:	0018      	movs	r0, r3
   24380:	4b2a      	ldr	r3, [pc, #168]	; (2442c <spi_cmd_complete+0x7ac>)
   24382:	4798      	blx	r3
   24384:	1e03      	subs	r3, r0, #0
   24386:	d010      	beq.n	243aa <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24388:	4a29      	ldr	r2, [pc, #164]	; (24430 <spi_cmd_complete+0x7b0>)
   2438a:	491c      	ldr	r1, [pc, #112]	; (243fc <spi_cmd_complete+0x77c>)
   2438c:	4b1c      	ldr	r3, [pc, #112]	; (24400 <spi_cmd_complete+0x780>)
   2438e:	0018      	movs	r0, r3
   24390:	4b1c      	ldr	r3, [pc, #112]	; (24404 <spi_cmd_complete+0x784>)
   24392:	4798      	blx	r3
   24394:	4b27      	ldr	r3, [pc, #156]	; (24434 <spi_cmd_complete+0x7b4>)
   24396:	0018      	movs	r0, r3
   24398:	4b1a      	ldr	r3, [pc, #104]	; (24404 <spi_cmd_complete+0x784>)
   2439a:	4798      	blx	r3
   2439c:	4b1b      	ldr	r3, [pc, #108]	; (2440c <spi_cmd_complete+0x78c>)
   2439e:	0018      	movs	r0, r3
   243a0:	4b18      	ldr	r3, [pc, #96]	; (24404 <spi_cmd_complete+0x784>)
   243a2:	4798      	blx	r3
						result = N_FAIL;
   243a4:	2300      	movs	r3, #0
   243a6:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   243a8:	e0cb      	b.n	24542 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   243aa:	4b1c      	ldr	r3, [pc, #112]	; (2441c <spi_cmd_complete+0x79c>)
   243ac:	781b      	ldrb	r3, [r3, #0]
   243ae:	2b00      	cmp	r3, #0
   243b0:	d119      	bne.n	243e6 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   243b2:	2314      	movs	r3, #20
   243b4:	18fb      	adds	r3, r7, r3
   243b6:	2102      	movs	r1, #2
   243b8:	0018      	movs	r0, r3
   243ba:	4b1c      	ldr	r3, [pc, #112]	; (2442c <spi_cmd_complete+0x7ac>)
   243bc:	4798      	blx	r3
   243be:	1e03      	subs	r3, r0, #0
   243c0:	d011      	beq.n	243e6 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   243c2:	23a6      	movs	r3, #166	; 0xa6
   243c4:	009a      	lsls	r2, r3, #2
   243c6:	490d      	ldr	r1, [pc, #52]	; (243fc <spi_cmd_complete+0x77c>)
   243c8:	4b0d      	ldr	r3, [pc, #52]	; (24400 <spi_cmd_complete+0x780>)
   243ca:	0018      	movs	r0, r3
   243cc:	4b0d      	ldr	r3, [pc, #52]	; (24404 <spi_cmd_complete+0x784>)
   243ce:	4798      	blx	r3
   243d0:	4b19      	ldr	r3, [pc, #100]	; (24438 <spi_cmd_complete+0x7b8>)
   243d2:	0018      	movs	r0, r3
   243d4:	4b0b      	ldr	r3, [pc, #44]	; (24404 <spi_cmd_complete+0x784>)
   243d6:	4798      	blx	r3
   243d8:	4b0c      	ldr	r3, [pc, #48]	; (2440c <spi_cmd_complete+0x78c>)
   243da:	0018      	movs	r0, r3
   243dc:	4b09      	ldr	r3, [pc, #36]	; (24404 <spi_cmd_complete+0x784>)
   243de:	4798      	blx	r3
							result = N_FAIL;
   243e0:	2300      	movs	r3, #0
   243e2:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   243e4:	e0ad      	b.n	24542 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   243e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   243e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   243ea:	18d3      	adds	r3, r2, r3
   243ec:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   243ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   243f0:	683a      	ldr	r2, [r7, #0]
   243f2:	1ad3      	subs	r3, r2, r3
   243f4:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   243f6:	e09e      	b.n	24536 <spi_cmd_complete+0x8b6>
   243f8:	0000022f 	.word	0x0000022f
   243fc:	000394b8 	.word	0x000394b8
   24400:	00038ea4 	.word	0x00038ea4
   24404:	0001e529 	.word	0x0001e529
   24408:	00038f9c 	.word	0x00038f9c
   2440c:	00038ee4 	.word	0x00038ee4
   24410:	00000239 	.word	0x00000239
   24414:	00038fd8 	.word	0x00038fd8
   24418:	0003900c 	.word	0x0003900c
   2441c:	20003ea0 	.word	0x20003ea0
   24420:	00000263 	.word	0x00000263
   24424:	0003903c 	.word	0x0003903c
   24428:	0003906c 	.word	0x0003906c
   2442c:	000235b9 	.word	0x000235b9
   24430:	0000028e 	.word	0x0000028e
   24434:	0003909c 	.word	0x0003909c
   24438:	000390d0 	.word	0x000390d0
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   2443c:	683a      	ldr	r2, [r7, #0]
   2443e:	2380      	movs	r3, #128	; 0x80
   24440:	019b      	lsls	r3, r3, #6
   24442:	429a      	cmp	r2, r3
   24444:	d802      	bhi.n	2444c <spi_cmd_complete+0x7cc>
						nbytes = sz;
   24446:	683b      	ldr	r3, [r7, #0]
   24448:	65bb      	str	r3, [r7, #88]	; 0x58
   2444a:	e002      	b.n	24452 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   2444c:	2380      	movs	r3, #128	; 0x80
   2444e:	019b      	lsls	r3, r3, #6
   24450:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24452:	230a      	movs	r3, #10
   24454:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   24456:	2317      	movs	r3, #23
   24458:	18fb      	adds	r3, r7, r3
   2445a:	2101      	movs	r1, #1
   2445c:	0018      	movs	r0, r3
   2445e:	4b3b      	ldr	r3, [pc, #236]	; (2454c <spi_cmd_complete+0x8cc>)
   24460:	4798      	blx	r3
   24462:	1e03      	subs	r3, r0, #0
   24464:	d011      	beq.n	2448a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   24466:	23ae      	movs	r3, #174	; 0xae
   24468:	009a      	lsls	r2, r3, #2
   2446a:	4939      	ldr	r1, [pc, #228]	; (24550 <spi_cmd_complete+0x8d0>)
   2446c:	4b39      	ldr	r3, [pc, #228]	; (24554 <spi_cmd_complete+0x8d4>)
   2446e:	0018      	movs	r0, r3
   24470:	4b39      	ldr	r3, [pc, #228]	; (24558 <spi_cmd_complete+0x8d8>)
   24472:	4798      	blx	r3
   24474:	4b39      	ldr	r3, [pc, #228]	; (2455c <spi_cmd_complete+0x8dc>)
   24476:	0018      	movs	r0, r3
   24478:	4b37      	ldr	r3, [pc, #220]	; (24558 <spi_cmd_complete+0x8d8>)
   2447a:	4798      	blx	r3
   2447c:	4b38      	ldr	r3, [pc, #224]	; (24560 <spi_cmd_complete+0x8e0>)
   2447e:	0018      	movs	r0, r3
   24480:	4b35      	ldr	r3, [pc, #212]	; (24558 <spi_cmd_complete+0x8d8>)
   24482:	4798      	blx	r3
							result = N_FAIL;
   24484:	2300      	movs	r3, #0
   24486:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24488:	e010      	b.n	244ac <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   2448a:	2317      	movs	r3, #23
   2448c:	18fb      	adds	r3, r7, r3
   2448e:	781b      	ldrb	r3, [r3, #0]
   24490:	091b      	lsrs	r3, r3, #4
   24492:	b2db      	uxtb	r3, r3
   24494:	001a      	movs	r2, r3
   24496:	230f      	movs	r3, #15
   24498:	4013      	ands	r3, r2
   2449a:	2b0f      	cmp	r3, #15
   2449c:	d005      	beq.n	244aa <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   2449e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   244a0:	1e5a      	subs	r2, r3, #1
   244a2:	667a      	str	r2, [r7, #100]	; 0x64
   244a4:	2b00      	cmp	r3, #0
   244a6:	d1d6      	bne.n	24456 <spi_cmd_complete+0x7d6>
   244a8:	e000      	b.n	244ac <spi_cmd_complete+0x82c>
							break;
   244aa:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   244ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   244ae:	2b00      	cmp	r3, #0
   244b0:	d046      	beq.n	24540 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   244b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   244b4:	687a      	ldr	r2, [r7, #4]
   244b6:	18d3      	adds	r3, r2, r3
   244b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
   244ba:	b292      	uxth	r2, r2
   244bc:	0011      	movs	r1, r2
   244be:	0018      	movs	r0, r3
   244c0:	4b22      	ldr	r3, [pc, #136]	; (2454c <spi_cmd_complete+0x8cc>)
   244c2:	4798      	blx	r3
   244c4:	1e03      	subs	r3, r0, #0
   244c6:	d011      	beq.n	244ec <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   244c8:	23b2      	movs	r3, #178	; 0xb2
   244ca:	009a      	lsls	r2, r3, #2
   244cc:	4920      	ldr	r1, [pc, #128]	; (24550 <spi_cmd_complete+0x8d0>)
   244ce:	4b21      	ldr	r3, [pc, #132]	; (24554 <spi_cmd_complete+0x8d4>)
   244d0:	0018      	movs	r0, r3
   244d2:	4b21      	ldr	r3, [pc, #132]	; (24558 <spi_cmd_complete+0x8d8>)
   244d4:	4798      	blx	r3
   244d6:	4b23      	ldr	r3, [pc, #140]	; (24564 <spi_cmd_complete+0x8e4>)
   244d8:	0018      	movs	r0, r3
   244da:	4b1f      	ldr	r3, [pc, #124]	; (24558 <spi_cmd_complete+0x8d8>)
   244dc:	4798      	blx	r3
   244de:	4b20      	ldr	r3, [pc, #128]	; (24560 <spi_cmd_complete+0x8e0>)
   244e0:	0018      	movs	r0, r3
   244e2:	4b1d      	ldr	r3, [pc, #116]	; (24558 <spi_cmd_complete+0x8d8>)
   244e4:	4798      	blx	r3
						result = N_FAIL;
   244e6:	2300      	movs	r3, #0
   244e8:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   244ea:	e02a      	b.n	24542 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   244ec:	4b1e      	ldr	r3, [pc, #120]	; (24568 <spi_cmd_complete+0x8e8>)
   244ee:	781b      	ldrb	r3, [r3, #0]
   244f0:	2b00      	cmp	r3, #0
   244f2:	d118      	bne.n	24526 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   244f4:	2314      	movs	r3, #20
   244f6:	18fb      	adds	r3, r7, r3
   244f8:	2102      	movs	r1, #2
   244fa:	0018      	movs	r0, r3
   244fc:	4b13      	ldr	r3, [pc, #76]	; (2454c <spi_cmd_complete+0x8cc>)
   244fe:	4798      	blx	r3
   24500:	1e03      	subs	r3, r0, #0
   24502:	d010      	beq.n	24526 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24504:	4a19      	ldr	r2, [pc, #100]	; (2456c <spi_cmd_complete+0x8ec>)
   24506:	4912      	ldr	r1, [pc, #72]	; (24550 <spi_cmd_complete+0x8d0>)
   24508:	4b12      	ldr	r3, [pc, #72]	; (24554 <spi_cmd_complete+0x8d4>)
   2450a:	0018      	movs	r0, r3
   2450c:	4b12      	ldr	r3, [pc, #72]	; (24558 <spi_cmd_complete+0x8d8>)
   2450e:	4798      	blx	r3
   24510:	4b17      	ldr	r3, [pc, #92]	; (24570 <spi_cmd_complete+0x8f0>)
   24512:	0018      	movs	r0, r3
   24514:	4b10      	ldr	r3, [pc, #64]	; (24558 <spi_cmd_complete+0x8d8>)
   24516:	4798      	blx	r3
   24518:	4b11      	ldr	r3, [pc, #68]	; (24560 <spi_cmd_complete+0x8e0>)
   2451a:	0018      	movs	r0, r3
   2451c:	4b0e      	ldr	r3, [pc, #56]	; (24558 <spi_cmd_complete+0x8d8>)
   2451e:	4798      	blx	r3
							result = N_FAIL;
   24520:	2300      	movs	r3, #0
   24522:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24524:	e00d      	b.n	24542 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   24526:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   2452a:	18d3      	adds	r3, r2, r3
   2452c:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   2452e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24530:	683a      	ldr	r2, [r7, #0]
   24532:	1ad3      	subs	r3, r2, r3
   24534:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   24536:	683b      	ldr	r3, [r7, #0]
   24538:	2b00      	cmp	r3, #0
   2453a:	d000      	beq.n	2453e <spi_cmd_complete+0x8be>
   2453c:	e77e      	b.n	2443c <spi_cmd_complete+0x7bc>
   2453e:	e000      	b.n	24542 <spi_cmd_complete+0x8c2>
						break;
   24540:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24544:	0018      	movs	r0, r3
   24546:	46bd      	mov	sp, r7
   24548:	b01f      	add	sp, #124	; 0x7c
   2454a:	bd90      	pop	{r4, r7, pc}
   2454c:	000235b9 	.word	0x000235b9
   24550:	000394b8 	.word	0x000394b8
   24554:	00038ea4 	.word	0x00038ea4
   24558:	0001e529 	.word	0x0001e529
   2455c:	00039108 	.word	0x00039108
   24560:	00038ee4 	.word	0x00038ee4
   24564:	0003909c 	.word	0x0003909c
   24568:	20003ea0 	.word	0x20003ea0
   2456c:	000002d2 	.word	0x000002d2
   24570:	000390d0 	.word	0x000390d0

00024574 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24574:	b580      	push	{r7, lr}
   24576:	b086      	sub	sp, #24
   24578:	af00      	add	r7, sp, #0
   2457a:	6078      	str	r0, [r7, #4]
   2457c:	000a      	movs	r2, r1
   2457e:	1cbb      	adds	r3, r7, #2
   24580:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   24582:	2313      	movs	r3, #19
   24584:	18fb      	adds	r3, r7, r3
   24586:	2201      	movs	r2, #1
   24588:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   2458a:	230c      	movs	r3, #12
   2458c:	18fb      	adds	r3, r7, r3
   2458e:	2200      	movs	r2, #0
   24590:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   24592:	2316      	movs	r3, #22
   24594:	18fb      	adds	r3, r7, r3
   24596:	2200      	movs	r2, #0
   24598:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   2459a:	1cbb      	adds	r3, r7, #2
   2459c:	881a      	ldrh	r2, [r3, #0]
   2459e:	2380      	movs	r3, #128	; 0x80
   245a0:	019b      	lsls	r3, r3, #6
   245a2:	429a      	cmp	r2, r3
   245a4:	d805      	bhi.n	245b2 <spi_data_write+0x3e>
			nbytes = sz;
   245a6:	2314      	movs	r3, #20
   245a8:	18fb      	adds	r3, r7, r3
   245aa:	1cba      	adds	r2, r7, #2
   245ac:	8812      	ldrh	r2, [r2, #0]
   245ae:	801a      	strh	r2, [r3, #0]
   245b0:	e004      	b.n	245bc <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   245b2:	2314      	movs	r3, #20
   245b4:	18fb      	adds	r3, r7, r3
   245b6:	2280      	movs	r2, #128	; 0x80
   245b8:	0192      	lsls	r2, r2, #6
   245ba:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   245bc:	2311      	movs	r3, #17
   245be:	18fb      	adds	r3, r7, r3
   245c0:	22f0      	movs	r2, #240	; 0xf0
   245c2:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   245c4:	2316      	movs	r3, #22
   245c6:	18fb      	adds	r3, r7, r3
   245c8:	2200      	movs	r2, #0
   245ca:	5e9b      	ldrsh	r3, [r3, r2]
   245cc:	2b00      	cmp	r3, #0
   245ce:	d10f      	bne.n	245f0 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   245d0:	1cbb      	adds	r3, r7, #2
   245d2:	881a      	ldrh	r2, [r3, #0]
   245d4:	2380      	movs	r3, #128	; 0x80
   245d6:	019b      	lsls	r3, r3, #6
   245d8:	429a      	cmp	r2, r3
   245da:	d804      	bhi.n	245e6 <spi_data_write+0x72>
				order = 0x3;
   245dc:	2312      	movs	r3, #18
   245de:	18fb      	adds	r3, r7, r3
   245e0:	2203      	movs	r2, #3
   245e2:	701a      	strb	r2, [r3, #0]
   245e4:	e013      	b.n	2460e <spi_data_write+0x9a>
			else
				order = 0x1;
   245e6:	2312      	movs	r3, #18
   245e8:	18fb      	adds	r3, r7, r3
   245ea:	2201      	movs	r2, #1
   245ec:	701a      	strb	r2, [r3, #0]
   245ee:	e00e      	b.n	2460e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   245f0:	1cbb      	adds	r3, r7, #2
   245f2:	881a      	ldrh	r2, [r3, #0]
   245f4:	2380      	movs	r3, #128	; 0x80
   245f6:	019b      	lsls	r3, r3, #6
   245f8:	429a      	cmp	r2, r3
   245fa:	d804      	bhi.n	24606 <spi_data_write+0x92>
				order = 0x3;
   245fc:	2312      	movs	r3, #18
   245fe:	18fb      	adds	r3, r7, r3
   24600:	2203      	movs	r2, #3
   24602:	701a      	strb	r2, [r3, #0]
   24604:	e003      	b.n	2460e <spi_data_write+0x9a>
			else
				order = 0x2;
   24606:	2312      	movs	r3, #18
   24608:	18fb      	adds	r3, r7, r3
   2460a:	2202      	movs	r2, #2
   2460c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   2460e:	2311      	movs	r3, #17
   24610:	18fb      	adds	r3, r7, r3
   24612:	781a      	ldrb	r2, [r3, #0]
   24614:	2312      	movs	r3, #18
   24616:	18fb      	adds	r3, r7, r3
   24618:	781b      	ldrb	r3, [r3, #0]
   2461a:	4313      	orrs	r3, r2
   2461c:	b2da      	uxtb	r2, r3
   2461e:	2311      	movs	r3, #17
   24620:	18fb      	adds	r3, r7, r3
   24622:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24624:	2311      	movs	r3, #17
   24626:	18fb      	adds	r3, r7, r3
   24628:	2101      	movs	r1, #1
   2462a:	0018      	movs	r0, r3
   2462c:	4b3c      	ldr	r3, [pc, #240]	; (24720 <spi_data_write+0x1ac>)
   2462e:	4798      	blx	r3
   24630:	1e03      	subs	r3, r0, #0
   24632:	d012      	beq.n	2465a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24634:	4a3b      	ldr	r2, [pc, #236]	; (24724 <spi_data_write+0x1b0>)
   24636:	493c      	ldr	r1, [pc, #240]	; (24728 <spi_data_write+0x1b4>)
   24638:	4b3c      	ldr	r3, [pc, #240]	; (2472c <spi_data_write+0x1b8>)
   2463a:	0018      	movs	r0, r3
   2463c:	4b3c      	ldr	r3, [pc, #240]	; (24730 <spi_data_write+0x1bc>)
   2463e:	4798      	blx	r3
   24640:	4b3c      	ldr	r3, [pc, #240]	; (24734 <spi_data_write+0x1c0>)
   24642:	0018      	movs	r0, r3
   24644:	4b3a      	ldr	r3, [pc, #232]	; (24730 <spi_data_write+0x1bc>)
   24646:	4798      	blx	r3
   24648:	4b3b      	ldr	r3, [pc, #236]	; (24738 <spi_data_write+0x1c4>)
   2464a:	0018      	movs	r0, r3
   2464c:	4b38      	ldr	r3, [pc, #224]	; (24730 <spi_data_write+0x1bc>)
   2464e:	4798      	blx	r3
			result = N_FAIL;
   24650:	2313      	movs	r3, #19
   24652:	18fb      	adds	r3, r7, r3
   24654:	2200      	movs	r2, #0
   24656:	701a      	strb	r2, [r3, #0]
			break;
   24658:	e059      	b.n	2470e <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   2465a:	2316      	movs	r3, #22
   2465c:	18fb      	adds	r3, r7, r3
   2465e:	2200      	movs	r2, #0
   24660:	5e9b      	ldrsh	r3, [r3, r2]
   24662:	687a      	ldr	r2, [r7, #4]
   24664:	18d2      	adds	r2, r2, r3
   24666:	2314      	movs	r3, #20
   24668:	18fb      	adds	r3, r7, r3
   2466a:	881b      	ldrh	r3, [r3, #0]
   2466c:	0019      	movs	r1, r3
   2466e:	0010      	movs	r0, r2
   24670:	4b2b      	ldr	r3, [pc, #172]	; (24720 <spi_data_write+0x1ac>)
   24672:	4798      	blx	r3
   24674:	1e03      	subs	r3, r0, #0
   24676:	d012      	beq.n	2469e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   24678:	4a30      	ldr	r2, [pc, #192]	; (2473c <spi_data_write+0x1c8>)
   2467a:	492b      	ldr	r1, [pc, #172]	; (24728 <spi_data_write+0x1b4>)
   2467c:	4b2b      	ldr	r3, [pc, #172]	; (2472c <spi_data_write+0x1b8>)
   2467e:	0018      	movs	r0, r3
   24680:	4b2b      	ldr	r3, [pc, #172]	; (24730 <spi_data_write+0x1bc>)
   24682:	4798      	blx	r3
   24684:	4b2e      	ldr	r3, [pc, #184]	; (24740 <spi_data_write+0x1cc>)
   24686:	0018      	movs	r0, r3
   24688:	4b29      	ldr	r3, [pc, #164]	; (24730 <spi_data_write+0x1bc>)
   2468a:	4798      	blx	r3
   2468c:	4b2a      	ldr	r3, [pc, #168]	; (24738 <spi_data_write+0x1c4>)
   2468e:	0018      	movs	r0, r3
   24690:	4b27      	ldr	r3, [pc, #156]	; (24730 <spi_data_write+0x1bc>)
   24692:	4798      	blx	r3
			result = N_FAIL;
   24694:	2313      	movs	r3, #19
   24696:	18fb      	adds	r3, r7, r3
   24698:	2200      	movs	r2, #0
   2469a:	701a      	strb	r2, [r3, #0]
			break;
   2469c:	e037      	b.n	2470e <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2469e:	4b29      	ldr	r3, [pc, #164]	; (24744 <spi_data_write+0x1d0>)
   246a0:	781b      	ldrb	r3, [r3, #0]
   246a2:	2b00      	cmp	r3, #0
   246a4:	d11b      	bne.n	246de <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   246a6:	230c      	movs	r3, #12
   246a8:	18fb      	adds	r3, r7, r3
   246aa:	2102      	movs	r1, #2
   246ac:	0018      	movs	r0, r3
   246ae:	4b1c      	ldr	r3, [pc, #112]	; (24720 <spi_data_write+0x1ac>)
   246b0:	4798      	blx	r3
   246b2:	1e03      	subs	r3, r0, #0
   246b4:	d013      	beq.n	246de <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   246b6:	23d7      	movs	r3, #215	; 0xd7
   246b8:	009a      	lsls	r2, r3, #2
   246ba:	491b      	ldr	r1, [pc, #108]	; (24728 <spi_data_write+0x1b4>)
   246bc:	4b1b      	ldr	r3, [pc, #108]	; (2472c <spi_data_write+0x1b8>)
   246be:	0018      	movs	r0, r3
   246c0:	4b1b      	ldr	r3, [pc, #108]	; (24730 <spi_data_write+0x1bc>)
   246c2:	4798      	blx	r3
   246c4:	4b20      	ldr	r3, [pc, #128]	; (24748 <spi_data_write+0x1d4>)
   246c6:	0018      	movs	r0, r3
   246c8:	4b19      	ldr	r3, [pc, #100]	; (24730 <spi_data_write+0x1bc>)
   246ca:	4798      	blx	r3
   246cc:	4b1a      	ldr	r3, [pc, #104]	; (24738 <spi_data_write+0x1c4>)
   246ce:	0018      	movs	r0, r3
   246d0:	4b17      	ldr	r3, [pc, #92]	; (24730 <spi_data_write+0x1bc>)
   246d2:	4798      	blx	r3
				result = N_FAIL;
   246d4:	2313      	movs	r3, #19
   246d6:	18fb      	adds	r3, r7, r3
   246d8:	2200      	movs	r2, #0
   246da:	701a      	strb	r2, [r3, #0]
				break;
   246dc:	e017      	b.n	2470e <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   246de:	2316      	movs	r3, #22
   246e0:	18fb      	adds	r3, r7, r3
   246e2:	881a      	ldrh	r2, [r3, #0]
   246e4:	2314      	movs	r3, #20
   246e6:	18fb      	adds	r3, r7, r3
   246e8:	881b      	ldrh	r3, [r3, #0]
   246ea:	18d3      	adds	r3, r2, r3
   246ec:	b29a      	uxth	r2, r3
   246ee:	2316      	movs	r3, #22
   246f0:	18fb      	adds	r3, r7, r3
   246f2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   246f4:	1cbb      	adds	r3, r7, #2
   246f6:	1cb9      	adds	r1, r7, #2
   246f8:	2214      	movs	r2, #20
   246fa:	18ba      	adds	r2, r7, r2
   246fc:	8809      	ldrh	r1, [r1, #0]
   246fe:	8812      	ldrh	r2, [r2, #0]
   24700:	1a8a      	subs	r2, r1, r2
   24702:	801a      	strh	r2, [r3, #0]
	} while (sz);
   24704:	1cbb      	adds	r3, r7, #2
   24706:	881b      	ldrh	r3, [r3, #0]
   24708:	2b00      	cmp	r3, #0
   2470a:	d000      	beq.n	2470e <spi_data_write+0x19a>
   2470c:	e745      	b.n	2459a <spi_data_write+0x26>


	return result;
   2470e:	2313      	movs	r3, #19
   24710:	18fb      	adds	r3, r7, r3
   24712:	781b      	ldrb	r3, [r3, #0]
   24714:	b25b      	sxtb	r3, r3
}
   24716:	0018      	movs	r0, r3
   24718:	46bd      	mov	sp, r7
   2471a:	b006      	add	sp, #24
   2471c:	bd80      	pop	{r7, pc}
   2471e:	46c0      	nop			; (mov r8, r8)
   24720:	000235fd 	.word	0x000235fd
   24724:	00000349 	.word	0x00000349
   24728:	000394cc 	.word	0x000394cc
   2472c:	00038ea4 	.word	0x00038ea4
   24730:	0001e529 	.word	0x0001e529
   24734:	0003916c 	.word	0x0003916c
   24738:	00038ee4 	.word	0x00038ee4
   2473c:	00000352 	.word	0x00000352
   24740:	000391a4 	.word	0x000391a4
   24744:	20003ea0 	.word	0x20003ea0
   24748:	000391d8 	.word	0x000391d8

0002474c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   2474c:	b590      	push	{r4, r7, lr}
   2474e:	b087      	sub	sp, #28
   24750:	af02      	add	r7, sp, #8
   24752:	6078      	str	r0, [r7, #4]
   24754:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24756:	230f      	movs	r3, #15
   24758:	18fb      	adds	r3, r7, r3
   2475a:	220a      	movs	r2, #10
   2475c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2475e:	230c      	movs	r3, #12
   24760:	18fb      	adds	r3, r7, r3
   24762:	2201      	movs	r2, #1
   24764:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   24766:	230e      	movs	r3, #14
   24768:	18fb      	adds	r3, r7, r3
   2476a:	22c9      	movs	r2, #201	; 0xc9
   2476c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   2476e:	230d      	movs	r3, #13
   24770:	18fb      	adds	r3, r7, r3
   24772:	2200      	movs	r2, #0
   24774:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   24776:	687b      	ldr	r3, [r7, #4]
   24778:	2b30      	cmp	r3, #48	; 0x30
   2477a:	d808      	bhi.n	2478e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   2477c:	230e      	movs	r3, #14
   2477e:	18fb      	adds	r3, r7, r3
   24780:	22c3      	movs	r2, #195	; 0xc3
   24782:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24784:	230d      	movs	r3, #13
   24786:	18fb      	adds	r3, r7, r3
   24788:	2201      	movs	r2, #1
   2478a:	701a      	strb	r2, [r3, #0]
   2478c:	e007      	b.n	2479e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2478e:	230e      	movs	r3, #14
   24790:	18fb      	adds	r3, r7, r3
   24792:	22c9      	movs	r2, #201	; 0xc9
   24794:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24796:	230d      	movs	r3, #13
   24798:	18fb      	adds	r3, r7, r3
   2479a:	2200      	movs	r2, #0
   2479c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2479e:	003a      	movs	r2, r7
   247a0:	6879      	ldr	r1, [r7, #4]
   247a2:	230e      	movs	r3, #14
   247a4:	18fb      	adds	r3, r7, r3
   247a6:	7818      	ldrb	r0, [r3, #0]
   247a8:	230d      	movs	r3, #13
   247aa:	18fb      	adds	r3, r7, r3
   247ac:	781b      	ldrb	r3, [r3, #0]
   247ae:	9300      	str	r3, [sp, #0]
   247b0:	2304      	movs	r3, #4
   247b2:	4c2e      	ldr	r4, [pc, #184]	; (2486c <spi_write_reg+0x120>)
   247b4:	47a0      	blx	r4
   247b6:	0002      	movs	r2, r0
   247b8:	230c      	movs	r3, #12
   247ba:	18fb      	adds	r3, r7, r3
   247bc:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   247be:	230c      	movs	r3, #12
   247c0:	18fb      	adds	r3, r7, r3
   247c2:	781b      	ldrb	r3, [r3, #0]
   247c4:	b25b      	sxtb	r3, r3
   247c6:	2b01      	cmp	r3, #1
   247c8:	d010      	beq.n	247ec <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   247ca:	4a29      	ldr	r2, [pc, #164]	; (24870 <spi_write_reg+0x124>)
   247cc:	4929      	ldr	r1, [pc, #164]	; (24874 <spi_write_reg+0x128>)
   247ce:	4b2a      	ldr	r3, [pc, #168]	; (24878 <spi_write_reg+0x12c>)
   247d0:	0018      	movs	r0, r3
   247d2:	4b2a      	ldr	r3, [pc, #168]	; (2487c <spi_write_reg+0x130>)
   247d4:	4798      	blx	r3
   247d6:	687a      	ldr	r2, [r7, #4]
   247d8:	4b29      	ldr	r3, [pc, #164]	; (24880 <spi_write_reg+0x134>)
   247da:	0011      	movs	r1, r2
   247dc:	0018      	movs	r0, r3
   247de:	4b27      	ldr	r3, [pc, #156]	; (2487c <spi_write_reg+0x130>)
   247e0:	4798      	blx	r3
   247e2:	4b28      	ldr	r3, [pc, #160]	; (24884 <spi_write_reg+0x138>)
   247e4:	0018      	movs	r0, r3
   247e6:	4b25      	ldr	r3, [pc, #148]	; (2487c <spi_write_reg+0x130>)
   247e8:	4798      	blx	r3
		goto _FAIL_;
   247ea:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   247ec:	230c      	movs	r3, #12
   247ee:	18fb      	adds	r3, r7, r3
   247f0:	781b      	ldrb	r3, [r3, #0]
   247f2:	b25b      	sxtb	r3, r3
   247f4:	2b01      	cmp	r3, #1
   247f6:	d030      	beq.n	2485a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   247f8:	2001      	movs	r0, #1
   247fa:	4b23      	ldr	r3, [pc, #140]	; (24888 <spi_write_reg+0x13c>)
   247fc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   247fe:	2300      	movs	r3, #0
   24800:	9300      	str	r3, [sp, #0]
   24802:	2300      	movs	r3, #0
   24804:	2200      	movs	r2, #0
   24806:	2100      	movs	r1, #0
   24808:	20cf      	movs	r0, #207	; 0xcf
   2480a:	4c20      	ldr	r4, [pc, #128]	; (2488c <spi_write_reg+0x140>)
   2480c:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2480e:	20cf      	movs	r0, #207	; 0xcf
   24810:	4b1f      	ldr	r3, [pc, #124]	; (24890 <spi_write_reg+0x144>)
   24812:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   24814:	23ea      	movs	r3, #234	; 0xea
   24816:	009a      	lsls	r2, r3, #2
   24818:	4916      	ldr	r1, [pc, #88]	; (24874 <spi_write_reg+0x128>)
   2481a:	4b17      	ldr	r3, [pc, #92]	; (24878 <spi_write_reg+0x12c>)
   2481c:	0018      	movs	r0, r3
   2481e:	4b17      	ldr	r3, [pc, #92]	; (2487c <spi_write_reg+0x130>)
   24820:	4798      	blx	r3
   24822:	230f      	movs	r3, #15
   24824:	18fb      	adds	r3, r7, r3
   24826:	7819      	ldrb	r1, [r3, #0]
   24828:	683b      	ldr	r3, [r7, #0]
   2482a:	687a      	ldr	r2, [r7, #4]
   2482c:	4819      	ldr	r0, [pc, #100]	; (24894 <spi_write_reg+0x148>)
   2482e:	4c13      	ldr	r4, [pc, #76]	; (2487c <spi_write_reg+0x130>)
   24830:	47a0      	blx	r4
   24832:	4b14      	ldr	r3, [pc, #80]	; (24884 <spi_write_reg+0x138>)
   24834:	0018      	movs	r0, r3
   24836:	4b11      	ldr	r3, [pc, #68]	; (2487c <spi_write_reg+0x130>)
   24838:	4798      	blx	r3
		nm_bsp_sleep(1);
   2483a:	2001      	movs	r0, #1
   2483c:	4b12      	ldr	r3, [pc, #72]	; (24888 <spi_write_reg+0x13c>)
   2483e:	4798      	blx	r3
		retry--;
   24840:	230f      	movs	r3, #15
   24842:	18fb      	adds	r3, r7, r3
   24844:	781a      	ldrb	r2, [r3, #0]
   24846:	230f      	movs	r3, #15
   24848:	18fb      	adds	r3, r7, r3
   2484a:	3a01      	subs	r2, #1
   2484c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2484e:	230f      	movs	r3, #15
   24850:	18fb      	adds	r3, r7, r3
   24852:	781b      	ldrb	r3, [r3, #0]
   24854:	2b00      	cmp	r3, #0
   24856:	d000      	beq.n	2485a <spi_write_reg+0x10e>
   24858:	e78d      	b.n	24776 <spi_write_reg+0x2a>
	}

	return result;
   2485a:	230c      	movs	r3, #12
   2485c:	18fb      	adds	r3, r7, r3
   2485e:	781b      	ldrb	r3, [r3, #0]
   24860:	b25b      	sxtb	r3, r3
}
   24862:	0018      	movs	r0, r3
   24864:	46bd      	mov	sp, r7
   24866:	b005      	add	sp, #20
   24868:	bd90      	pop	{r4, r7, pc}
   2486a:	46c0      	nop			; (mov r8, r8)
   2486c:	00023c81 	.word	0x00023c81
   24870:	0000039d 	.word	0x0000039d
   24874:	000394dc 	.word	0x000394dc
   24878:	00038ea4 	.word	0x00038ea4
   2487c:	0001e529 	.word	0x0001e529
   24880:	00039210 	.word	0x00039210
   24884:	00038ee4 	.word	0x00038ee4
   24888:	000205c1 	.word	0x000205c1
   2488c:	00023705 	.word	0x00023705
   24890:	00023b45 	.word	0x00023b45
   24894:	0003923c 	.word	0x0003923c

00024898 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   24898:	b590      	push	{r4, r7, lr}
   2489a:	b089      	sub	sp, #36	; 0x24
   2489c:	af02      	add	r7, sp, #8
   2489e:	60f8      	str	r0, [r7, #12]
   248a0:	60b9      	str	r1, [r7, #8]
   248a2:	1dbb      	adds	r3, r7, #6
   248a4:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   248a6:	2316      	movs	r3, #22
   248a8:	18fb      	adds	r3, r7, r3
   248aa:	220a      	movs	r2, #10
   248ac:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   248ae:	2315      	movs	r3, #21
   248b0:	18fb      	adds	r3, r7, r3
   248b2:	22c7      	movs	r2, #199	; 0xc7
   248b4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   248b6:	1dbb      	adds	r3, r7, #6
   248b8:	881a      	ldrh	r2, [r3, #0]
   248ba:	68f9      	ldr	r1, [r7, #12]
   248bc:	2315      	movs	r3, #21
   248be:	18fb      	adds	r3, r7, r3
   248c0:	7818      	ldrb	r0, [r3, #0]
   248c2:	2300      	movs	r3, #0
   248c4:	9300      	str	r3, [sp, #0]
   248c6:	0013      	movs	r3, r2
   248c8:	2200      	movs	r2, #0
   248ca:	4c4d      	ldr	r4, [pc, #308]	; (24a00 <nm_spi_write+0x168>)
   248cc:	47a0      	blx	r4
   248ce:	0002      	movs	r2, r0
   248d0:	2317      	movs	r3, #23
   248d2:	18fb      	adds	r3, r7, r3
   248d4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   248d6:	2317      	movs	r3, #23
   248d8:	18fb      	adds	r3, r7, r3
   248da:	781b      	ldrb	r3, [r3, #0]
   248dc:	b25b      	sxtb	r3, r3
   248de:	2b01      	cmp	r3, #1
   248e0:	d010      	beq.n	24904 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   248e2:	4a48      	ldr	r2, [pc, #288]	; (24a04 <nm_spi_write+0x16c>)
   248e4:	4948      	ldr	r1, [pc, #288]	; (24a08 <nm_spi_write+0x170>)
   248e6:	4b49      	ldr	r3, [pc, #292]	; (24a0c <nm_spi_write+0x174>)
   248e8:	0018      	movs	r0, r3
   248ea:	4b49      	ldr	r3, [pc, #292]	; (24a10 <nm_spi_write+0x178>)
   248ec:	4798      	blx	r3
   248ee:	68fa      	ldr	r2, [r7, #12]
   248f0:	4b48      	ldr	r3, [pc, #288]	; (24a14 <nm_spi_write+0x17c>)
   248f2:	0011      	movs	r1, r2
   248f4:	0018      	movs	r0, r3
   248f6:	4b46      	ldr	r3, [pc, #280]	; (24a10 <nm_spi_write+0x178>)
   248f8:	4798      	blx	r3
   248fa:	4b47      	ldr	r3, [pc, #284]	; (24a18 <nm_spi_write+0x180>)
   248fc:	0018      	movs	r0, r3
   248fe:	4b44      	ldr	r3, [pc, #272]	; (24a10 <nm_spi_write+0x178>)
   24900:	4798      	blx	r3
		goto _FAIL_;
   24902:	e03e      	b.n	24982 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   24904:	2317      	movs	r3, #23
   24906:	18fc      	adds	r4, r7, r3
   24908:	1dbb      	adds	r3, r7, #6
   2490a:	881a      	ldrh	r2, [r3, #0]
   2490c:	68bb      	ldr	r3, [r7, #8]
   2490e:	0011      	movs	r1, r2
   24910:	0018      	movs	r0, r3
   24912:	4b42      	ldr	r3, [pc, #264]	; (24a1c <nm_spi_write+0x184>)
   24914:	4798      	blx	r3
   24916:	0003      	movs	r3, r0
   24918:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2491a:	2317      	movs	r3, #23
   2491c:	18fb      	adds	r3, r7, r3
   2491e:	781b      	ldrb	r3, [r3, #0]
   24920:	b25b      	sxtb	r3, r3
   24922:	2b01      	cmp	r3, #1
   24924:	d00e      	beq.n	24944 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24926:	4a3e      	ldr	r2, [pc, #248]	; (24a20 <nm_spi_write+0x188>)
   24928:	4937      	ldr	r1, [pc, #220]	; (24a08 <nm_spi_write+0x170>)
   2492a:	4b38      	ldr	r3, [pc, #224]	; (24a0c <nm_spi_write+0x174>)
   2492c:	0018      	movs	r0, r3
   2492e:	4b38      	ldr	r3, [pc, #224]	; (24a10 <nm_spi_write+0x178>)
   24930:	4798      	blx	r3
   24932:	4b3c      	ldr	r3, [pc, #240]	; (24a24 <nm_spi_write+0x18c>)
   24934:	0018      	movs	r0, r3
   24936:	4b36      	ldr	r3, [pc, #216]	; (24a10 <nm_spi_write+0x178>)
   24938:	4798      	blx	r3
   2493a:	4b37      	ldr	r3, [pc, #220]	; (24a18 <nm_spi_write+0x180>)
   2493c:	0018      	movs	r0, r3
   2493e:	4b34      	ldr	r3, [pc, #208]	; (24a10 <nm_spi_write+0x178>)
   24940:	4798      	blx	r3
		goto _FAIL_;
   24942:	e01e      	b.n	24982 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   24944:	2317      	movs	r3, #23
   24946:	18fc      	adds	r4, r7, r3
   24948:	2315      	movs	r3, #21
   2494a:	18fb      	adds	r3, r7, r3
   2494c:	781b      	ldrb	r3, [r3, #0]
   2494e:	0018      	movs	r0, r3
   24950:	4b35      	ldr	r3, [pc, #212]	; (24a28 <nm_spi_write+0x190>)
   24952:	4798      	blx	r3
   24954:	0003      	movs	r3, r0
   24956:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   24958:	2317      	movs	r3, #23
   2495a:	18fb      	adds	r3, r7, r3
   2495c:	781b      	ldrb	r3, [r3, #0]
   2495e:	b25b      	sxtb	r3, r3
   24960:	2b01      	cmp	r3, #1
   24962:	d00e      	beq.n	24982 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   24964:	4a31      	ldr	r2, [pc, #196]	; (24a2c <nm_spi_write+0x194>)
   24966:	4928      	ldr	r1, [pc, #160]	; (24a08 <nm_spi_write+0x170>)
   24968:	4b28      	ldr	r3, [pc, #160]	; (24a0c <nm_spi_write+0x174>)
   2496a:	0018      	movs	r0, r3
   2496c:	4b28      	ldr	r3, [pc, #160]	; (24a10 <nm_spi_write+0x178>)
   2496e:	4798      	blx	r3
   24970:	4b2c      	ldr	r3, [pc, #176]	; (24a24 <nm_spi_write+0x18c>)
   24972:	0018      	movs	r0, r3
   24974:	4b26      	ldr	r3, [pc, #152]	; (24a10 <nm_spi_write+0x178>)
   24976:	4798      	blx	r3
   24978:	4b27      	ldr	r3, [pc, #156]	; (24a18 <nm_spi_write+0x180>)
   2497a:	0018      	movs	r0, r3
   2497c:	4b24      	ldr	r3, [pc, #144]	; (24a10 <nm_spi_write+0x178>)
   2497e:	4798      	blx	r3
		goto _FAIL_;
   24980:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   24982:	2317      	movs	r3, #23
   24984:	18fb      	adds	r3, r7, r3
   24986:	781b      	ldrb	r3, [r3, #0]
   24988:	b25b      	sxtb	r3, r3
   2498a:	2b01      	cmp	r3, #1
   2498c:	d030      	beq.n	249f0 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2498e:	2001      	movs	r0, #1
   24990:	4b27      	ldr	r3, [pc, #156]	; (24a30 <nm_spi_write+0x198>)
   24992:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24994:	2300      	movs	r3, #0
   24996:	9300      	str	r3, [sp, #0]
   24998:	2300      	movs	r3, #0
   2499a:	2200      	movs	r2, #0
   2499c:	2100      	movs	r1, #0
   2499e:	20cf      	movs	r0, #207	; 0xcf
   249a0:	4c24      	ldr	r4, [pc, #144]	; (24a34 <nm_spi_write+0x19c>)
   249a2:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   249a4:	20cf      	movs	r0, #207	; 0xcf
   249a6:	4b24      	ldr	r3, [pc, #144]	; (24a38 <nm_spi_write+0x1a0>)
   249a8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   249aa:	4a24      	ldr	r2, [pc, #144]	; (24a3c <nm_spi_write+0x1a4>)
   249ac:	4916      	ldr	r1, [pc, #88]	; (24a08 <nm_spi_write+0x170>)
   249ae:	4b17      	ldr	r3, [pc, #92]	; (24a0c <nm_spi_write+0x174>)
   249b0:	0018      	movs	r0, r3
   249b2:	4b17      	ldr	r3, [pc, #92]	; (24a10 <nm_spi_write+0x178>)
   249b4:	4798      	blx	r3
   249b6:	2316      	movs	r3, #22
   249b8:	18fb      	adds	r3, r7, r3
   249ba:	7819      	ldrb	r1, [r3, #0]
   249bc:	1dbb      	adds	r3, r7, #6
   249be:	881b      	ldrh	r3, [r3, #0]
   249c0:	68fa      	ldr	r2, [r7, #12]
   249c2:	481f      	ldr	r0, [pc, #124]	; (24a40 <nm_spi_write+0x1a8>)
   249c4:	4c12      	ldr	r4, [pc, #72]	; (24a10 <nm_spi_write+0x178>)
   249c6:	47a0      	blx	r4
   249c8:	4b13      	ldr	r3, [pc, #76]	; (24a18 <nm_spi_write+0x180>)
   249ca:	0018      	movs	r0, r3
   249cc:	4b10      	ldr	r3, [pc, #64]	; (24a10 <nm_spi_write+0x178>)
   249ce:	4798      	blx	r3
		nm_bsp_sleep(1);
   249d0:	2001      	movs	r0, #1
   249d2:	4b17      	ldr	r3, [pc, #92]	; (24a30 <nm_spi_write+0x198>)
   249d4:	4798      	blx	r3
		retry--;
   249d6:	2316      	movs	r3, #22
   249d8:	18fb      	adds	r3, r7, r3
   249da:	781a      	ldrb	r2, [r3, #0]
   249dc:	2316      	movs	r3, #22
   249de:	18fb      	adds	r3, r7, r3
   249e0:	3a01      	subs	r2, #1
   249e2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   249e4:	2316      	movs	r3, #22
   249e6:	18fb      	adds	r3, r7, r3
   249e8:	781b      	ldrb	r3, [r3, #0]
   249ea:	2b00      	cmp	r3, #0
   249ec:	d000      	beq.n	249f0 <nm_spi_write+0x158>
   249ee:	e762      	b.n	248b6 <nm_spi_write+0x1e>
	}


	return result;
   249f0:	2317      	movs	r3, #23
   249f2:	18fb      	adds	r3, r7, r3
   249f4:	781b      	ldrb	r3, [r3, #0]
   249f6:	b25b      	sxtb	r3, r3
}
   249f8:	0018      	movs	r0, r3
   249fa:	46bd      	mov	sp, r7
   249fc:	b007      	add	sp, #28
   249fe:	bd90      	pop	{r4, r7, pc}
   24a00:	00023c81 	.word	0x00023c81
   24a04:	000003cf 	.word	0x000003cf
   24a08:	000394ec 	.word	0x000394ec
   24a0c:	00038ea4 	.word	0x00038ea4
   24a10:	0001e529 	.word	0x0001e529
   24a14:	00039258 	.word	0x00039258
   24a18:	00038ee4 	.word	0x00038ee4
   24a1c:	00024575 	.word	0x00024575
   24a20:	000003d9 	.word	0x000003d9
   24a24:	00039288 	.word	0x00039288
   24a28:	00023a45 	.word	0x00023a45
   24a2c:	000003e1 	.word	0x000003e1
   24a30:	000205c1 	.word	0x000205c1
   24a34:	00023705 	.word	0x00023705
   24a38:	00023b45 	.word	0x00023b45
   24a3c:	000003eb 	.word	0x000003eb
   24a40:	000392b0 	.word	0x000392b0

00024a44 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   24a44:	b590      	push	{r4, r7, lr}
   24a46:	b087      	sub	sp, #28
   24a48:	af02      	add	r7, sp, #8
   24a4a:	6078      	str	r0, [r7, #4]
   24a4c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   24a4e:	230f      	movs	r3, #15
   24a50:	18fb      	adds	r3, r7, r3
   24a52:	220a      	movs	r2, #10
   24a54:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   24a56:	230c      	movs	r3, #12
   24a58:	18fb      	adds	r3, r7, r3
   24a5a:	2201      	movs	r2, #1
   24a5c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   24a5e:	230e      	movs	r3, #14
   24a60:	18fb      	adds	r3, r7, r3
   24a62:	22ca      	movs	r2, #202	; 0xca
   24a64:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   24a66:	230d      	movs	r3, #13
   24a68:	18fb      	adds	r3, r7, r3
   24a6a:	2200      	movs	r2, #0
   24a6c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   24a6e:	687b      	ldr	r3, [r7, #4]
   24a70:	2bff      	cmp	r3, #255	; 0xff
   24a72:	d808      	bhi.n	24a86 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   24a74:	230e      	movs	r3, #14
   24a76:	18fb      	adds	r3, r7, r3
   24a78:	22c4      	movs	r2, #196	; 0xc4
   24a7a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   24a7c:	230d      	movs	r3, #13
   24a7e:	18fb      	adds	r3, r7, r3
   24a80:	2201      	movs	r2, #1
   24a82:	701a      	strb	r2, [r3, #0]
   24a84:	e007      	b.n	24a96 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   24a86:	230e      	movs	r3, #14
   24a88:	18fb      	adds	r3, r7, r3
   24a8a:	22ca      	movs	r2, #202	; 0xca
   24a8c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   24a8e:	230d      	movs	r3, #13
   24a90:	18fb      	adds	r3, r7, r3
   24a92:	2200      	movs	r2, #0
   24a94:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   24a96:	2308      	movs	r3, #8
   24a98:	18fa      	adds	r2, r7, r3
   24a9a:	6879      	ldr	r1, [r7, #4]
   24a9c:	230e      	movs	r3, #14
   24a9e:	18fb      	adds	r3, r7, r3
   24aa0:	7818      	ldrb	r0, [r3, #0]
   24aa2:	230d      	movs	r3, #13
   24aa4:	18fb      	adds	r3, r7, r3
   24aa6:	781b      	ldrb	r3, [r3, #0]
   24aa8:	9300      	str	r3, [sp, #0]
   24aaa:	2304      	movs	r3, #4
   24aac:	4c37      	ldr	r4, [pc, #220]	; (24b8c <spi_read_reg+0x148>)
   24aae:	47a0      	blx	r4
   24ab0:	0002      	movs	r2, r0
   24ab2:	230c      	movs	r3, #12
   24ab4:	18fb      	adds	r3, r7, r3
   24ab6:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24ab8:	230c      	movs	r3, #12
   24aba:	18fb      	adds	r3, r7, r3
   24abc:	781b      	ldrb	r3, [r3, #0]
   24abe:	b25b      	sxtb	r3, r3
   24ac0:	2b01      	cmp	r3, #1
   24ac2:	d010      	beq.n	24ae6 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   24ac4:	4a32      	ldr	r2, [pc, #200]	; (24b90 <spi_read_reg+0x14c>)
   24ac6:	4933      	ldr	r1, [pc, #204]	; (24b94 <spi_read_reg+0x150>)
   24ac8:	4b33      	ldr	r3, [pc, #204]	; (24b98 <spi_read_reg+0x154>)
   24aca:	0018      	movs	r0, r3
   24acc:	4b33      	ldr	r3, [pc, #204]	; (24b9c <spi_read_reg+0x158>)
   24ace:	4798      	blx	r3
   24ad0:	687a      	ldr	r2, [r7, #4]
   24ad2:	4b33      	ldr	r3, [pc, #204]	; (24ba0 <spi_read_reg+0x15c>)
   24ad4:	0011      	movs	r1, r2
   24ad6:	0018      	movs	r0, r3
   24ad8:	4b30      	ldr	r3, [pc, #192]	; (24b9c <spi_read_reg+0x158>)
   24ada:	4798      	blx	r3
   24adc:	4b31      	ldr	r3, [pc, #196]	; (24ba4 <spi_read_reg+0x160>)
   24ade:	0018      	movs	r0, r3
   24ae0:	4b2e      	ldr	r3, [pc, #184]	; (24b9c <spi_read_reg+0x158>)
   24ae2:	4798      	blx	r3
		goto _FAIL_;
   24ae4:	e014      	b.n	24b10 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   24ae6:	2308      	movs	r3, #8
   24ae8:	18fb      	adds	r3, r7, r3
   24aea:	781b      	ldrb	r3, [r3, #0]
   24aec:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   24aee:	2308      	movs	r3, #8
   24af0:	18fb      	adds	r3, r7, r3
   24af2:	785b      	ldrb	r3, [r3, #1]
   24af4:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   24af6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   24af8:	2308      	movs	r3, #8
   24afa:	18fb      	adds	r3, r7, r3
   24afc:	789b      	ldrb	r3, [r3, #2]
   24afe:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   24b00:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   24b02:	2308      	movs	r3, #8
   24b04:	18fb      	adds	r3, r7, r3
   24b06:	78db      	ldrb	r3, [r3, #3]
   24b08:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   24b0a:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   24b0c:	683b      	ldr	r3, [r7, #0]
   24b0e:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   24b10:	230c      	movs	r3, #12
   24b12:	18fb      	adds	r3, r7, r3
   24b14:	781b      	ldrb	r3, [r3, #0]
   24b16:	b25b      	sxtb	r3, r3
   24b18:	2b01      	cmp	r3, #1
   24b1a:	d02f      	beq.n	24b7c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   24b1c:	2001      	movs	r0, #1
   24b1e:	4b22      	ldr	r3, [pc, #136]	; (24ba8 <spi_read_reg+0x164>)
   24b20:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24b22:	2300      	movs	r3, #0
   24b24:	9300      	str	r3, [sp, #0]
   24b26:	2300      	movs	r3, #0
   24b28:	2200      	movs	r2, #0
   24b2a:	2100      	movs	r1, #0
   24b2c:	20cf      	movs	r0, #207	; 0xcf
   24b2e:	4c1f      	ldr	r4, [pc, #124]	; (24bac <spi_read_reg+0x168>)
   24b30:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24b32:	20cf      	movs	r0, #207	; 0xcf
   24b34:	4b1e      	ldr	r3, [pc, #120]	; (24bb0 <spi_read_reg+0x16c>)
   24b36:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   24b38:	4a1e      	ldr	r2, [pc, #120]	; (24bb4 <spi_read_reg+0x170>)
   24b3a:	4916      	ldr	r1, [pc, #88]	; (24b94 <spi_read_reg+0x150>)
   24b3c:	4b16      	ldr	r3, [pc, #88]	; (24b98 <spi_read_reg+0x154>)
   24b3e:	0018      	movs	r0, r3
   24b40:	4b16      	ldr	r3, [pc, #88]	; (24b9c <spi_read_reg+0x158>)
   24b42:	4798      	blx	r3
   24b44:	230f      	movs	r3, #15
   24b46:	18fb      	adds	r3, r7, r3
   24b48:	7819      	ldrb	r1, [r3, #0]
   24b4a:	687a      	ldr	r2, [r7, #4]
   24b4c:	4b1a      	ldr	r3, [pc, #104]	; (24bb8 <spi_read_reg+0x174>)
   24b4e:	0018      	movs	r0, r3
   24b50:	4b12      	ldr	r3, [pc, #72]	; (24b9c <spi_read_reg+0x158>)
   24b52:	4798      	blx	r3
   24b54:	4b13      	ldr	r3, [pc, #76]	; (24ba4 <spi_read_reg+0x160>)
   24b56:	0018      	movs	r0, r3
   24b58:	4b10      	ldr	r3, [pc, #64]	; (24b9c <spi_read_reg+0x158>)
   24b5a:	4798      	blx	r3
		nm_bsp_sleep(1);
   24b5c:	2001      	movs	r0, #1
   24b5e:	4b12      	ldr	r3, [pc, #72]	; (24ba8 <spi_read_reg+0x164>)
   24b60:	4798      	blx	r3
		retry--;
   24b62:	230f      	movs	r3, #15
   24b64:	18fb      	adds	r3, r7, r3
   24b66:	781a      	ldrb	r2, [r3, #0]
   24b68:	230f      	movs	r3, #15
   24b6a:	18fb      	adds	r3, r7, r3
   24b6c:	3a01      	subs	r2, #1
   24b6e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24b70:	230f      	movs	r3, #15
   24b72:	18fb      	adds	r3, r7, r3
   24b74:	781b      	ldrb	r3, [r3, #0]
   24b76:	2b00      	cmp	r3, #0
   24b78:	d000      	beq.n	24b7c <spi_read_reg+0x138>
   24b7a:	e778      	b.n	24a6e <spi_read_reg+0x2a>
	}
		
	return result;
   24b7c:	230c      	movs	r3, #12
   24b7e:	18fb      	adds	r3, r7, r3
   24b80:	781b      	ldrb	r3, [r3, #0]
   24b82:	b25b      	sxtb	r3, r3
}
   24b84:	0018      	movs	r0, r3
   24b86:	46bd      	mov	sp, r7
   24b88:	b005      	add	sp, #20
   24b8a:	bd90      	pop	{r4, r7, pc}
   24b8c:	00023c81 	.word	0x00023c81
   24b90:	00000423 	.word	0x00000423
   24b94:	000394fc 	.word	0x000394fc
   24b98:	00038ea4 	.word	0x00038ea4
   24b9c:	0001e529 	.word	0x0001e529
   24ba0:	000392cc 	.word	0x000392cc
   24ba4:	00038ee4 	.word	0x00038ee4
   24ba8:	000205c1 	.word	0x000205c1
   24bac:	00023705 	.word	0x00023705
   24bb0:	00023b45 	.word	0x00023b45
   24bb4:	00000435 	.word	0x00000435
   24bb8:	000392f8 	.word	0x000392f8

00024bbc <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   24bbc:	b590      	push	{r4, r7, lr}
   24bbe:	b089      	sub	sp, #36	; 0x24
   24bc0:	af02      	add	r7, sp, #8
   24bc2:	60f8      	str	r0, [r7, #12]
   24bc4:	60b9      	str	r1, [r7, #8]
   24bc6:	1dbb      	adds	r3, r7, #6
   24bc8:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   24bca:	2316      	movs	r3, #22
   24bcc:	18fb      	adds	r3, r7, r3
   24bce:	22c8      	movs	r2, #200	; 0xc8
   24bd0:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   24bd2:	2317      	movs	r3, #23
   24bd4:	18fb      	adds	r3, r7, r3
   24bd6:	220a      	movs	r2, #10
   24bd8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   24bda:	1dbb      	adds	r3, r7, #6
   24bdc:	881c      	ldrh	r4, [r3, #0]
   24bde:	68ba      	ldr	r2, [r7, #8]
   24be0:	68f9      	ldr	r1, [r7, #12]
   24be2:	2316      	movs	r3, #22
   24be4:	18fb      	adds	r3, r7, r3
   24be6:	7818      	ldrb	r0, [r3, #0]
   24be8:	2300      	movs	r3, #0
   24bea:	9300      	str	r3, [sp, #0]
   24bec:	0023      	movs	r3, r4
   24bee:	4c2e      	ldr	r4, [pc, #184]	; (24ca8 <nm_spi_read+0xec>)
   24bf0:	47a0      	blx	r4
   24bf2:	0002      	movs	r2, r0
   24bf4:	2315      	movs	r3, #21
   24bf6:	18fb      	adds	r3, r7, r3
   24bf8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   24bfa:	2315      	movs	r3, #21
   24bfc:	18fb      	adds	r3, r7, r3
   24bfe:	781b      	ldrb	r3, [r3, #0]
   24c00:	b25b      	sxtb	r3, r3
   24c02:	2b01      	cmp	r3, #1
   24c04:	d010      	beq.n	24c28 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   24c06:	4a29      	ldr	r2, [pc, #164]	; (24cac <nm_spi_read+0xf0>)
   24c08:	4929      	ldr	r1, [pc, #164]	; (24cb0 <nm_spi_read+0xf4>)
   24c0a:	4b2a      	ldr	r3, [pc, #168]	; (24cb4 <nm_spi_read+0xf8>)
   24c0c:	0018      	movs	r0, r3
   24c0e:	4b2a      	ldr	r3, [pc, #168]	; (24cb8 <nm_spi_read+0xfc>)
   24c10:	4798      	blx	r3
   24c12:	68fa      	ldr	r2, [r7, #12]
   24c14:	4b29      	ldr	r3, [pc, #164]	; (24cbc <nm_spi_read+0x100>)
   24c16:	0011      	movs	r1, r2
   24c18:	0018      	movs	r0, r3
   24c1a:	4b27      	ldr	r3, [pc, #156]	; (24cb8 <nm_spi_read+0xfc>)
   24c1c:	4798      	blx	r3
   24c1e:	4b28      	ldr	r3, [pc, #160]	; (24cc0 <nm_spi_read+0x104>)
   24c20:	0018      	movs	r0, r3
   24c22:	4b25      	ldr	r3, [pc, #148]	; (24cb8 <nm_spi_read+0xfc>)
   24c24:	4798      	blx	r3
		goto _FAIL_;
   24c26:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   24c28:	2315      	movs	r3, #21
   24c2a:	18fb      	adds	r3, r7, r3
   24c2c:	781b      	ldrb	r3, [r3, #0]
   24c2e:	b25b      	sxtb	r3, r3
   24c30:	2b01      	cmp	r3, #1
   24c32:	d030      	beq.n	24c96 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   24c34:	2001      	movs	r0, #1
   24c36:	4b23      	ldr	r3, [pc, #140]	; (24cc4 <nm_spi_read+0x108>)
   24c38:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24c3a:	2300      	movs	r3, #0
   24c3c:	9300      	str	r3, [sp, #0]
   24c3e:	2300      	movs	r3, #0
   24c40:	2200      	movs	r2, #0
   24c42:	2100      	movs	r1, #0
   24c44:	20cf      	movs	r0, #207	; 0xcf
   24c46:	4c20      	ldr	r4, [pc, #128]	; (24cc8 <nm_spi_read+0x10c>)
   24c48:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   24c4a:	20cf      	movs	r0, #207	; 0xcf
   24c4c:	4b1f      	ldr	r3, [pc, #124]	; (24ccc <nm_spi_read+0x110>)
   24c4e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   24c50:	4a1f      	ldr	r2, [pc, #124]	; (24cd0 <nm_spi_read+0x114>)
   24c52:	4917      	ldr	r1, [pc, #92]	; (24cb0 <nm_spi_read+0xf4>)
   24c54:	4b17      	ldr	r3, [pc, #92]	; (24cb4 <nm_spi_read+0xf8>)
   24c56:	0018      	movs	r0, r3
   24c58:	4b17      	ldr	r3, [pc, #92]	; (24cb8 <nm_spi_read+0xfc>)
   24c5a:	4798      	blx	r3
   24c5c:	2317      	movs	r3, #23
   24c5e:	18fb      	adds	r3, r7, r3
   24c60:	7819      	ldrb	r1, [r3, #0]
   24c62:	1dbb      	adds	r3, r7, #6
   24c64:	881b      	ldrh	r3, [r3, #0]
   24c66:	68fa      	ldr	r2, [r7, #12]
   24c68:	481a      	ldr	r0, [pc, #104]	; (24cd4 <nm_spi_read+0x118>)
   24c6a:	4c13      	ldr	r4, [pc, #76]	; (24cb8 <nm_spi_read+0xfc>)
   24c6c:	47a0      	blx	r4
   24c6e:	4b14      	ldr	r3, [pc, #80]	; (24cc0 <nm_spi_read+0x104>)
   24c70:	0018      	movs	r0, r3
   24c72:	4b11      	ldr	r3, [pc, #68]	; (24cb8 <nm_spi_read+0xfc>)
   24c74:	4798      	blx	r3
		nm_bsp_sleep(1);
   24c76:	2001      	movs	r0, #1
   24c78:	4b12      	ldr	r3, [pc, #72]	; (24cc4 <nm_spi_read+0x108>)
   24c7a:	4798      	blx	r3
		retry--;
   24c7c:	2317      	movs	r3, #23
   24c7e:	18fb      	adds	r3, r7, r3
   24c80:	781a      	ldrb	r2, [r3, #0]
   24c82:	2317      	movs	r3, #23
   24c84:	18fb      	adds	r3, r7, r3
   24c86:	3a01      	subs	r2, #1
   24c88:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   24c8a:	2317      	movs	r3, #23
   24c8c:	18fb      	adds	r3, r7, r3
   24c8e:	781b      	ldrb	r3, [r3, #0]
   24c90:	2b00      	cmp	r3, #0
   24c92:	d000      	beq.n	24c96 <nm_spi_read+0xda>
   24c94:	e7a1      	b.n	24bda <nm_spi_read+0x1e>
	}

	return result;
   24c96:	2315      	movs	r3, #21
   24c98:	18fb      	adds	r3, r7, r3
   24c9a:	781b      	ldrb	r3, [r3, #0]
   24c9c:	b25b      	sxtb	r3, r3
}
   24c9e:	0018      	movs	r0, r3
   24ca0:	46bd      	mov	sp, r7
   24ca2:	b007      	add	sp, #28
   24ca4:	bd90      	pop	{r4, r7, pc}
   24ca6:	46c0      	nop			; (mov r8, r8)
   24ca8:	00023c81 	.word	0x00023c81
   24cac:	00000472 	.word	0x00000472
   24cb0:	0003950c 	.word	0x0003950c
   24cb4:	00038ea4 	.word	0x00038ea4
   24cb8:	0001e529 	.word	0x0001e529
   24cbc:	00039310 	.word	0x00039310
   24cc0:	00038ee4 	.word	0x00038ee4
   24cc4:	000205c1 	.word	0x000205c1
   24cc8:	00023705 	.word	0x00023705
   24ccc:	00023b45 	.word	0x00023b45
   24cd0:	0000047d 	.word	0x0000047d
   24cd4:	000392b0 	.word	0x000392b0

00024cd8 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   24cd8:	b580      	push	{r7, lr}
   24cda:	b082      	sub	sp, #8
   24cdc:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   24cde:	4b0c      	ldr	r3, [pc, #48]	; (24d10 <spi_init_pkt_sz+0x38>)
   24ce0:	0018      	movs	r0, r3
   24ce2:	4b0c      	ldr	r3, [pc, #48]	; (24d14 <spi_init_pkt_sz+0x3c>)
   24ce4:	4798      	blx	r3
   24ce6:	0003      	movs	r3, r0
   24ce8:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   24cea:	687b      	ldr	r3, [r7, #4]
   24cec:	2270      	movs	r2, #112	; 0x70
   24cee:	4393      	bics	r3, r2
   24cf0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   24cf2:	687b      	ldr	r3, [r7, #4]
   24cf4:	2250      	movs	r2, #80	; 0x50
   24cf6:	4313      	orrs	r3, r2
   24cf8:	607b      	str	r3, [r7, #4]
   24cfa:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   24cfc:	687b      	ldr	r3, [r7, #4]
   24cfe:	4a04      	ldr	r2, [pc, #16]	; (24d10 <spi_init_pkt_sz+0x38>)
   24d00:	0019      	movs	r1, r3
   24d02:	0010      	movs	r0, r2
   24d04:	4b04      	ldr	r3, [pc, #16]	; (24d18 <spi_init_pkt_sz+0x40>)
   24d06:	4798      	blx	r3
}
   24d08:	46c0      	nop			; (mov r8, r8)
   24d0a:	46bd      	mov	sp, r7
   24d0c:	b002      	add	sp, #8
   24d0e:	bd80      	pop	{r7, pc}
   24d10:	0000e824 	.word	0x0000e824
   24d14:	00024eb1 	.word	0x00024eb1
   24d18:	00024f25 	.word	0x00024f25

00024d1c <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   24d1c:	b590      	push	{r4, r7, lr}
   24d1e:	b083      	sub	sp, #12
   24d20:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   24d22:	2300      	movs	r3, #0
   24d24:	9300      	str	r3, [sp, #0]
   24d26:	2300      	movs	r3, #0
   24d28:	2200      	movs	r2, #0
   24d2a:	2100      	movs	r1, #0
   24d2c:	20cf      	movs	r0, #207	; 0xcf
   24d2e:	4c05      	ldr	r4, [pc, #20]	; (24d44 <nm_spi_reset+0x28>)
   24d30:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   24d32:	20cf      	movs	r0, #207	; 0xcf
   24d34:	4b04      	ldr	r3, [pc, #16]	; (24d48 <nm_spi_reset+0x2c>)
   24d36:	4798      	blx	r3
	return M2M_SUCCESS;
   24d38:	2300      	movs	r3, #0
}
   24d3a:	0018      	movs	r0, r3
   24d3c:	46bd      	mov	sp, r7
   24d3e:	b001      	add	sp, #4
   24d40:	bd90      	pop	{r4, r7, pc}
   24d42:	46c0      	nop			; (mov r8, r8)
   24d44:	00023705 	.word	0x00023705
   24d48:	00023b45 	.word	0x00023b45

00024d4c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   24d4c:	b580      	push	{r7, lr}
   24d4e:	b082      	sub	sp, #8
   24d50:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   24d52:	2300      	movs	r3, #0
   24d54:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   24d56:	4b40      	ldr	r3, [pc, #256]	; (24e58 <nm_spi_init+0x10c>)
   24d58:	2200      	movs	r2, #0
   24d5a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   24d5c:	003b      	movs	r3, r7
   24d5e:	4a3f      	ldr	r2, [pc, #252]	; (24e5c <nm_spi_init+0x110>)
   24d60:	0019      	movs	r1, r3
   24d62:	0010      	movs	r0, r2
   24d64:	4b3e      	ldr	r3, [pc, #248]	; (24e60 <nm_spi_init+0x114>)
   24d66:	4798      	blx	r3
   24d68:	1e03      	subs	r3, r0, #0
   24d6a:	d129      	bne.n	24dc0 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   24d6c:	4b3a      	ldr	r3, [pc, #232]	; (24e58 <nm_spi_init+0x10c>)
   24d6e:	2201      	movs	r2, #1
   24d70:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   24d72:	2398      	movs	r3, #152	; 0x98
   24d74:	00da      	lsls	r2, r3, #3
   24d76:	493b      	ldr	r1, [pc, #236]	; (24e64 <nm_spi_init+0x118>)
   24d78:	4b3b      	ldr	r3, [pc, #236]	; (24e68 <nm_spi_init+0x11c>)
   24d7a:	0018      	movs	r0, r3
   24d7c:	4b3b      	ldr	r3, [pc, #236]	; (24e6c <nm_spi_init+0x120>)
   24d7e:	4798      	blx	r3
   24d80:	4b3b      	ldr	r3, [pc, #236]	; (24e70 <nm_spi_init+0x124>)
   24d82:	0018      	movs	r0, r3
   24d84:	4b39      	ldr	r3, [pc, #228]	; (24e6c <nm_spi_init+0x120>)
   24d86:	4798      	blx	r3
   24d88:	4b3a      	ldr	r3, [pc, #232]	; (24e74 <nm_spi_init+0x128>)
   24d8a:	0018      	movs	r0, r3
   24d8c:	4b37      	ldr	r3, [pc, #220]	; (24e6c <nm_spi_init+0x120>)
   24d8e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   24d90:	003b      	movs	r3, r7
   24d92:	4a32      	ldr	r2, [pc, #200]	; (24e5c <nm_spi_init+0x110>)
   24d94:	0019      	movs	r1, r3
   24d96:	0010      	movs	r0, r2
   24d98:	4b31      	ldr	r3, [pc, #196]	; (24e60 <nm_spi_init+0x114>)
   24d9a:	4798      	blx	r3
   24d9c:	1e03      	subs	r3, r0, #0
   24d9e:	d10f      	bne.n	24dc0 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   24da0:	4a35      	ldr	r2, [pc, #212]	; (24e78 <nm_spi_init+0x12c>)
   24da2:	4930      	ldr	r1, [pc, #192]	; (24e64 <nm_spi_init+0x118>)
   24da4:	4b30      	ldr	r3, [pc, #192]	; (24e68 <nm_spi_init+0x11c>)
   24da6:	0018      	movs	r0, r3
   24da8:	4b30      	ldr	r3, [pc, #192]	; (24e6c <nm_spi_init+0x120>)
   24daa:	4798      	blx	r3
   24dac:	4b33      	ldr	r3, [pc, #204]	; (24e7c <nm_spi_init+0x130>)
   24dae:	0018      	movs	r0, r3
   24db0:	4b2e      	ldr	r3, [pc, #184]	; (24e6c <nm_spi_init+0x120>)
   24db2:	4798      	blx	r3
   24db4:	4b2f      	ldr	r3, [pc, #188]	; (24e74 <nm_spi_init+0x128>)
   24db6:	0018      	movs	r0, r3
   24db8:	4b2c      	ldr	r3, [pc, #176]	; (24e6c <nm_spi_init+0x120>)
   24dba:	4798      	blx	r3
			return 0;
   24dbc:	2300      	movs	r3, #0
   24dbe:	e047      	b.n	24e50 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   24dc0:	4b25      	ldr	r3, [pc, #148]	; (24e58 <nm_spi_init+0x10c>)
   24dc2:	781b      	ldrb	r3, [r3, #0]
   24dc4:	2b00      	cmp	r3, #0
   24dc6:	d126      	bne.n	24e16 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   24dc8:	683b      	ldr	r3, [r7, #0]
   24dca:	220c      	movs	r2, #12
   24dcc:	4393      	bics	r3, r2
   24dce:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   24dd0:	683b      	ldr	r3, [r7, #0]
   24dd2:	2270      	movs	r2, #112	; 0x70
   24dd4:	4393      	bics	r3, r2
   24dd6:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   24dd8:	683b      	ldr	r3, [r7, #0]
   24dda:	2250      	movs	r2, #80	; 0x50
   24ddc:	4313      	orrs	r3, r2
   24dde:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   24de0:	683b      	ldr	r3, [r7, #0]
   24de2:	4a1e      	ldr	r2, [pc, #120]	; (24e5c <nm_spi_init+0x110>)
   24de4:	0019      	movs	r1, r3
   24de6:	0010      	movs	r0, r2
   24de8:	4b25      	ldr	r3, [pc, #148]	; (24e80 <nm_spi_init+0x134>)
   24dea:	4798      	blx	r3
   24dec:	1e03      	subs	r3, r0, #0
   24dee:	d10f      	bne.n	24e10 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   24df0:	4a24      	ldr	r2, [pc, #144]	; (24e84 <nm_spi_init+0x138>)
   24df2:	491c      	ldr	r1, [pc, #112]	; (24e64 <nm_spi_init+0x118>)
   24df4:	4b1c      	ldr	r3, [pc, #112]	; (24e68 <nm_spi_init+0x11c>)
   24df6:	0018      	movs	r0, r3
   24df8:	4b1c      	ldr	r3, [pc, #112]	; (24e6c <nm_spi_init+0x120>)
   24dfa:	4798      	blx	r3
   24dfc:	4b22      	ldr	r3, [pc, #136]	; (24e88 <nm_spi_init+0x13c>)
   24dfe:	0018      	movs	r0, r3
   24e00:	4b1a      	ldr	r3, [pc, #104]	; (24e6c <nm_spi_init+0x120>)
   24e02:	4798      	blx	r3
   24e04:	4b1b      	ldr	r3, [pc, #108]	; (24e74 <nm_spi_init+0x128>)
   24e06:	0018      	movs	r0, r3
   24e08:	4b18      	ldr	r3, [pc, #96]	; (24e6c <nm_spi_init+0x120>)
   24e0a:	4798      	blx	r3
			return 0;
   24e0c:	2300      	movs	r3, #0
   24e0e:	e01f      	b.n	24e50 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   24e10:	4b11      	ldr	r3, [pc, #68]	; (24e58 <nm_spi_init+0x10c>)
   24e12:	2201      	movs	r2, #1
   24e14:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   24e16:	1d3a      	adds	r2, r7, #4
   24e18:	2380      	movs	r3, #128	; 0x80
   24e1a:	015b      	lsls	r3, r3, #5
   24e1c:	0011      	movs	r1, r2
   24e1e:	0018      	movs	r0, r3
   24e20:	4b0f      	ldr	r3, [pc, #60]	; (24e60 <nm_spi_init+0x114>)
   24e22:	4798      	blx	r3
   24e24:	1e03      	subs	r3, r0, #0
   24e26:	d110      	bne.n	24e4a <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   24e28:	4a18      	ldr	r2, [pc, #96]	; (24e8c <nm_spi_init+0x140>)
   24e2a:	490e      	ldr	r1, [pc, #56]	; (24e64 <nm_spi_init+0x118>)
   24e2c:	4b0e      	ldr	r3, [pc, #56]	; (24e68 <nm_spi_init+0x11c>)
   24e2e:	0018      	movs	r0, r3
   24e30:	4b0e      	ldr	r3, [pc, #56]	; (24e6c <nm_spi_init+0x120>)
   24e32:	4798      	blx	r3
   24e34:	4b16      	ldr	r3, [pc, #88]	; (24e90 <nm_spi_init+0x144>)
   24e36:	0018      	movs	r0, r3
   24e38:	4b0c      	ldr	r3, [pc, #48]	; (24e6c <nm_spi_init+0x120>)
   24e3a:	4798      	blx	r3
   24e3c:	4b0d      	ldr	r3, [pc, #52]	; (24e74 <nm_spi_init+0x128>)
   24e3e:	0018      	movs	r0, r3
   24e40:	4b0a      	ldr	r3, [pc, #40]	; (24e6c <nm_spi_init+0x120>)
   24e42:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   24e44:	2306      	movs	r3, #6
   24e46:	425b      	negs	r3, r3
   24e48:	e002      	b.n	24e50 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   24e4a:	4b12      	ldr	r3, [pc, #72]	; (24e94 <nm_spi_init+0x148>)
   24e4c:	4798      	blx	r3


	return M2M_SUCCESS;
   24e4e:	2300      	movs	r3, #0
}
   24e50:	0018      	movs	r0, r3
   24e52:	46bd      	mov	sp, r7
   24e54:	b002      	add	sp, #8
   24e56:	bd80      	pop	{r7, pc}
   24e58:	20003ea0 	.word	0x20003ea0
   24e5c:	0000e824 	.word	0x0000e824
   24e60:	00024a45 	.word	0x00024a45
   24e64:	00039518 	.word	0x00039518
   24e68:	00038ea4 	.word	0x00038ea4
   24e6c:	0001e529 	.word	0x0001e529
   24e70:	00039340 	.word	0x00039340
   24e74:	00038ee4 	.word	0x00038ee4
   24e78:	000004c3 	.word	0x000004c3
   24e7c:	00039390 	.word	0x00039390
   24e80:	0002474d 	.word	0x0002474d
   24e84:	000004cd 	.word	0x000004cd
   24e88:	000393c0 	.word	0x000393c0
   24e8c:	000004d7 	.word	0x000004d7
   24e90:	000393f4 	.word	0x000393f4
   24e94:	00024cd9 	.word	0x00024cd9

00024e98 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   24e98:	b580      	push	{r7, lr}
   24e9a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   24e9c:	4b03      	ldr	r3, [pc, #12]	; (24eac <nm_spi_deinit+0x14>)
   24e9e:	2200      	movs	r2, #0
   24ea0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   24ea2:	2300      	movs	r3, #0
}
   24ea4:	0018      	movs	r0, r3
   24ea6:	46bd      	mov	sp, r7
   24ea8:	bd80      	pop	{r7, pc}
   24eaa:	46c0      	nop			; (mov r8, r8)
   24eac:	20003ea0 	.word	0x20003ea0

00024eb0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   24eb0:	b580      	push	{r7, lr}
   24eb2:	b084      	sub	sp, #16
   24eb4:	af00      	add	r7, sp, #0
   24eb6:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   24eb8:	230c      	movs	r3, #12
   24eba:	18fa      	adds	r2, r7, r3
   24ebc:	687b      	ldr	r3, [r7, #4]
   24ebe:	0011      	movs	r1, r2
   24ec0:	0018      	movs	r0, r3
   24ec2:	4b03      	ldr	r3, [pc, #12]	; (24ed0 <nm_spi_read_reg+0x20>)
   24ec4:	4798      	blx	r3

	return u32Val;
   24ec6:	68fb      	ldr	r3, [r7, #12]
}
   24ec8:	0018      	movs	r0, r3
   24eca:	46bd      	mov	sp, r7
   24ecc:	b004      	add	sp, #16
   24ece:	bd80      	pop	{r7, pc}
   24ed0:	00024a45 	.word	0x00024a45

00024ed4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   24ed4:	b590      	push	{r4, r7, lr}
   24ed6:	b085      	sub	sp, #20
   24ed8:	af00      	add	r7, sp, #0
   24eda:	6078      	str	r0, [r7, #4]
   24edc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   24ede:	230f      	movs	r3, #15
   24ee0:	18fc      	adds	r4, r7, r3
   24ee2:	683a      	ldr	r2, [r7, #0]
   24ee4:	687b      	ldr	r3, [r7, #4]
   24ee6:	0011      	movs	r1, r2
   24ee8:	0018      	movs	r0, r3
   24eea:	4b0d      	ldr	r3, [pc, #52]	; (24f20 <nm_spi_read_reg_with_ret+0x4c>)
   24eec:	4798      	blx	r3
   24eee:	0003      	movs	r3, r0
   24ef0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24ef2:	230f      	movs	r3, #15
   24ef4:	18fb      	adds	r3, r7, r3
   24ef6:	781b      	ldrb	r3, [r3, #0]
   24ef8:	b25b      	sxtb	r3, r3
   24efa:	2b01      	cmp	r3, #1
   24efc:	d104      	bne.n	24f08 <nm_spi_read_reg_with_ret+0x34>
   24efe:	230f      	movs	r3, #15
   24f00:	18fb      	adds	r3, r7, r3
   24f02:	2200      	movs	r2, #0
   24f04:	701a      	strb	r2, [r3, #0]
   24f06:	e003      	b.n	24f10 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24f08:	230f      	movs	r3, #15
   24f0a:	18fb      	adds	r3, r7, r3
   24f0c:	22fa      	movs	r2, #250	; 0xfa
   24f0e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24f10:	230f      	movs	r3, #15
   24f12:	18fb      	adds	r3, r7, r3
   24f14:	781b      	ldrb	r3, [r3, #0]
   24f16:	b25b      	sxtb	r3, r3
}
   24f18:	0018      	movs	r0, r3
   24f1a:	46bd      	mov	sp, r7
   24f1c:	b005      	add	sp, #20
   24f1e:	bd90      	pop	{r4, r7, pc}
   24f20:	00024a45 	.word	0x00024a45

00024f24 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   24f24:	b590      	push	{r4, r7, lr}
   24f26:	b085      	sub	sp, #20
   24f28:	af00      	add	r7, sp, #0
   24f2a:	6078      	str	r0, [r7, #4]
   24f2c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   24f2e:	230f      	movs	r3, #15
   24f30:	18fc      	adds	r4, r7, r3
   24f32:	683a      	ldr	r2, [r7, #0]
   24f34:	687b      	ldr	r3, [r7, #4]
   24f36:	0011      	movs	r1, r2
   24f38:	0018      	movs	r0, r3
   24f3a:	4b0d      	ldr	r3, [pc, #52]	; (24f70 <nm_spi_write_reg+0x4c>)
   24f3c:	4798      	blx	r3
   24f3e:	0003      	movs	r3, r0
   24f40:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24f42:	230f      	movs	r3, #15
   24f44:	18fb      	adds	r3, r7, r3
   24f46:	781b      	ldrb	r3, [r3, #0]
   24f48:	b25b      	sxtb	r3, r3
   24f4a:	2b01      	cmp	r3, #1
   24f4c:	d104      	bne.n	24f58 <nm_spi_write_reg+0x34>
   24f4e:	230f      	movs	r3, #15
   24f50:	18fb      	adds	r3, r7, r3
   24f52:	2200      	movs	r2, #0
   24f54:	701a      	strb	r2, [r3, #0]
   24f56:	e003      	b.n	24f60 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24f58:	230f      	movs	r3, #15
   24f5a:	18fb      	adds	r3, r7, r3
   24f5c:	22fa      	movs	r2, #250	; 0xfa
   24f5e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24f60:	230f      	movs	r3, #15
   24f62:	18fb      	adds	r3, r7, r3
   24f64:	781b      	ldrb	r3, [r3, #0]
   24f66:	b25b      	sxtb	r3, r3
}
   24f68:	0018      	movs	r0, r3
   24f6a:	46bd      	mov	sp, r7
   24f6c:	b005      	add	sp, #20
   24f6e:	bd90      	pop	{r4, r7, pc}
   24f70:	0002474d 	.word	0x0002474d

00024f74 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24f74:	b590      	push	{r4, r7, lr}
   24f76:	b087      	sub	sp, #28
   24f78:	af00      	add	r7, sp, #0
   24f7a:	60f8      	str	r0, [r7, #12]
   24f7c:	60b9      	str	r1, [r7, #8]
   24f7e:	1dbb      	adds	r3, r7, #6
   24f80:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   24f82:	2317      	movs	r3, #23
   24f84:	18fc      	adds	r4, r7, r3
   24f86:	1dbb      	adds	r3, r7, #6
   24f88:	881a      	ldrh	r2, [r3, #0]
   24f8a:	68b9      	ldr	r1, [r7, #8]
   24f8c:	68fb      	ldr	r3, [r7, #12]
   24f8e:	0018      	movs	r0, r3
   24f90:	4b0d      	ldr	r3, [pc, #52]	; (24fc8 <nm_spi_read_block+0x54>)
   24f92:	4798      	blx	r3
   24f94:	0003      	movs	r3, r0
   24f96:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24f98:	2317      	movs	r3, #23
   24f9a:	18fb      	adds	r3, r7, r3
   24f9c:	781b      	ldrb	r3, [r3, #0]
   24f9e:	b25b      	sxtb	r3, r3
   24fa0:	2b01      	cmp	r3, #1
   24fa2:	d104      	bne.n	24fae <nm_spi_read_block+0x3a>
   24fa4:	2317      	movs	r3, #23
   24fa6:	18fb      	adds	r3, r7, r3
   24fa8:	2200      	movs	r2, #0
   24faa:	701a      	strb	r2, [r3, #0]
   24fac:	e003      	b.n	24fb6 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   24fae:	2317      	movs	r3, #23
   24fb0:	18fb      	adds	r3, r7, r3
   24fb2:	22fa      	movs	r2, #250	; 0xfa
   24fb4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   24fb6:	2317      	movs	r3, #23
   24fb8:	18fb      	adds	r3, r7, r3
   24fba:	781b      	ldrb	r3, [r3, #0]
   24fbc:	b25b      	sxtb	r3, r3
}
   24fbe:	0018      	movs	r0, r3
   24fc0:	46bd      	mov	sp, r7
   24fc2:	b007      	add	sp, #28
   24fc4:	bd90      	pop	{r4, r7, pc}
   24fc6:	46c0      	nop			; (mov r8, r8)
   24fc8:	00024bbd 	.word	0x00024bbd

00024fcc <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   24fcc:	b590      	push	{r4, r7, lr}
   24fce:	b087      	sub	sp, #28
   24fd0:	af00      	add	r7, sp, #0
   24fd2:	60f8      	str	r0, [r7, #12]
   24fd4:	60b9      	str	r1, [r7, #8]
   24fd6:	1dbb      	adds	r3, r7, #6
   24fd8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   24fda:	2317      	movs	r3, #23
   24fdc:	18fc      	adds	r4, r7, r3
   24fde:	1dbb      	adds	r3, r7, #6
   24fe0:	881a      	ldrh	r2, [r3, #0]
   24fe2:	68b9      	ldr	r1, [r7, #8]
   24fe4:	68fb      	ldr	r3, [r7, #12]
   24fe6:	0018      	movs	r0, r3
   24fe8:	4b0d      	ldr	r3, [pc, #52]	; (25020 <nm_spi_write_block+0x54>)
   24fea:	4798      	blx	r3
   24fec:	0003      	movs	r3, r0
   24fee:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   24ff0:	2317      	movs	r3, #23
   24ff2:	18fb      	adds	r3, r7, r3
   24ff4:	781b      	ldrb	r3, [r3, #0]
   24ff6:	b25b      	sxtb	r3, r3
   24ff8:	2b01      	cmp	r3, #1
   24ffa:	d104      	bne.n	25006 <nm_spi_write_block+0x3a>
   24ffc:	2317      	movs	r3, #23
   24ffe:	18fb      	adds	r3, r7, r3
   25000:	2200      	movs	r2, #0
   25002:	701a      	strb	r2, [r3, #0]
   25004:	e003      	b.n	2500e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25006:	2317      	movs	r3, #23
   25008:	18fb      	adds	r3, r7, r3
   2500a:	22fa      	movs	r2, #250	; 0xfa
   2500c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2500e:	2317      	movs	r3, #23
   25010:	18fb      	adds	r3, r7, r3
   25012:	781b      	ldrb	r3, [r3, #0]
   25014:	b25b      	sxtb	r3, r3
}
   25016:	0018      	movs	r0, r3
   25018:	46bd      	mov	sp, r7
   2501a:	b007      	add	sp, #28
   2501c:	bd90      	pop	{r4, r7, pc}
   2501e:	46c0      	nop			; (mov r8, r8)
   25020:	00024899 	.word	0x00024899

00025024 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25024:	b590      	push	{r4, r7, lr}
   25026:	b089      	sub	sp, #36	; 0x24
   25028:	af00      	add	r7, sp, #0
   2502a:	60b9      	str	r1, [r7, #8]
   2502c:	0011      	movs	r1, r2
   2502e:	607b      	str	r3, [r7, #4]
   25030:	230f      	movs	r3, #15
   25032:	18fb      	adds	r3, r7, r3
   25034:	1c02      	adds	r2, r0, #0
   25036:	701a      	strb	r2, [r3, #0]
   25038:	230e      	movs	r3, #14
   2503a:	18fb      	adds	r3, r7, r3
   2503c:	1c0a      	adds	r2, r1, #0
   2503e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   25040:	2330      	movs	r3, #48	; 0x30
   25042:	18fb      	adds	r3, r7, r3
   25044:	881b      	ldrh	r3, [r3, #0]
   25046:	2b00      	cmp	r3, #0
   25048:	d100      	bne.n	2504c <Socket_ReadSocketData+0x28>
   2504a:	e0d7      	b.n	251fc <Socket_ReadSocketData+0x1d8>
   2504c:	230f      	movs	r3, #15
   2504e:	18fb      	adds	r3, r7, r3
   25050:	2200      	movs	r2, #0
   25052:	569a      	ldrsb	r2, [r3, r2]
   25054:	4b6b      	ldr	r3, [pc, #428]	; (25204 <Socket_ReadSocketData+0x1e0>)
   25056:	0112      	lsls	r2, r2, #4
   25058:	58d3      	ldr	r3, [r2, r3]
   2505a:	2b00      	cmp	r3, #0
   2505c:	d100      	bne.n	25060 <Socket_ReadSocketData+0x3c>
   2505e:	e0cd      	b.n	251fc <Socket_ReadSocketData+0x1d8>
   25060:	230f      	movs	r3, #15
   25062:	18fb      	adds	r3, r7, r3
   25064:	781b      	ldrb	r3, [r3, #0]
   25066:	b25b      	sxtb	r3, r3
   25068:	4a66      	ldr	r2, [pc, #408]	; (25204 <Socket_ReadSocketData+0x1e0>)
   2506a:	011b      	lsls	r3, r3, #4
   2506c:	18d3      	adds	r3, r2, r3
   2506e:	3304      	adds	r3, #4
   25070:	881b      	ldrh	r3, [r3, #0]
   25072:	b29b      	uxth	r3, r3
   25074:	2b00      	cmp	r3, #0
   25076:	d100      	bne.n	2507a <Socket_ReadSocketData+0x56>
   25078:	e0c0      	b.n	251fc <Socket_ReadSocketData+0x1d8>
   2507a:	230f      	movs	r3, #15
   2507c:	18fb      	adds	r3, r7, r3
   2507e:	781b      	ldrb	r3, [r3, #0]
   25080:	b25b      	sxtb	r3, r3
   25082:	4a60      	ldr	r2, [pc, #384]	; (25204 <Socket_ReadSocketData+0x1e0>)
   25084:	011b      	lsls	r3, r3, #4
   25086:	18d3      	adds	r3, r2, r3
   25088:	330a      	adds	r3, #10
   2508a:	781b      	ldrb	r3, [r3, #0]
   2508c:	b2db      	uxtb	r3, r3
   2508e:	2b01      	cmp	r3, #1
   25090:	d000      	beq.n	25094 <Socket_ReadSocketData+0x70>
   25092:	e0b3      	b.n	251fc <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25094:	687b      	ldr	r3, [r7, #4]
   25096:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   25098:	68bb      	ldr	r3, [r7, #8]
   2509a:	2230      	movs	r2, #48	; 0x30
   2509c:	18ba      	adds	r2, r7, r2
   2509e:	8812      	ldrh	r2, [r2, #0]
   250a0:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   250a2:	2319      	movs	r3, #25
   250a4:	18fb      	adds	r3, r7, r3
   250a6:	2201      	movs	r2, #1
   250a8:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   250aa:	231a      	movs	r3, #26
   250ac:	18fb      	adds	r3, r7, r3
   250ae:	2230      	movs	r2, #48	; 0x30
   250b0:	18ba      	adds	r2, r7, r2
   250b2:	8812      	ldrh	r2, [r2, #0]
   250b4:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   250b6:	230f      	movs	r3, #15
   250b8:	18fb      	adds	r3, r7, r3
   250ba:	781b      	ldrb	r3, [r3, #0]
   250bc:	b25b      	sxtb	r3, r3
   250be:	4a51      	ldr	r2, [pc, #324]	; (25204 <Socket_ReadSocketData+0x1e0>)
   250c0:	011b      	lsls	r3, r3, #4
   250c2:	18d3      	adds	r3, r2, r3
   250c4:	3304      	adds	r3, #4
   250c6:	881b      	ldrh	r3, [r3, #0]
   250c8:	b29b      	uxth	r3, r3
   250ca:	221a      	movs	r2, #26
   250cc:	18ba      	adds	r2, r7, r2
   250ce:	8812      	ldrh	r2, [r2, #0]
   250d0:	1ad3      	subs	r3, r2, r3
   250d2:	b29a      	uxth	r2, r3
   250d4:	2316      	movs	r3, #22
   250d6:	18fb      	adds	r3, r7, r3
   250d8:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   250da:	2316      	movs	r3, #22
   250dc:	18fb      	adds	r3, r7, r3
   250de:	2200      	movs	r2, #0
   250e0:	5e9b      	ldrsh	r3, [r3, r2]
   250e2:	2b00      	cmp	r3, #0
   250e4:	dd0f      	ble.n	25106 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   250e6:	2319      	movs	r3, #25
   250e8:	18fb      	adds	r3, r7, r3
   250ea:	2200      	movs	r2, #0
   250ec:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   250ee:	230f      	movs	r3, #15
   250f0:	18fb      	adds	r3, r7, r3
   250f2:	2200      	movs	r2, #0
   250f4:	569a      	ldrsb	r2, [r3, r2]
   250f6:	231a      	movs	r3, #26
   250f8:	18fb      	adds	r3, r7, r3
   250fa:	4942      	ldr	r1, [pc, #264]	; (25204 <Socket_ReadSocketData+0x1e0>)
   250fc:	0112      	lsls	r2, r2, #4
   250fe:	188a      	adds	r2, r1, r2
   25100:	3204      	adds	r2, #4
   25102:	8812      	ldrh	r2, [r2, #0]
   25104:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   25106:	230f      	movs	r3, #15
   25108:	18fb      	adds	r3, r7, r3
   2510a:	2200      	movs	r2, #0
   2510c:	569a      	ldrsb	r2, [r3, r2]
   2510e:	4b3d      	ldr	r3, [pc, #244]	; (25204 <Socket_ReadSocketData+0x1e0>)
   25110:	0112      	lsls	r2, r2, #4
   25112:	58d1      	ldr	r1, [r2, r3]
   25114:	2319      	movs	r3, #25
   25116:	18fb      	adds	r3, r7, r3
   25118:	781c      	ldrb	r4, [r3, #0]
   2511a:	231a      	movs	r3, #26
   2511c:	18fb      	adds	r3, r7, r3
   2511e:	881a      	ldrh	r2, [r3, #0]
   25120:	69f8      	ldr	r0, [r7, #28]
   25122:	0023      	movs	r3, r4
   25124:	4c38      	ldr	r4, [pc, #224]	; (25208 <Socket_ReadSocketData+0x1e4>)
   25126:	47a0      	blx	r4
   25128:	1e03      	subs	r3, r0, #0
   2512a:	d14f      	bne.n	251cc <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   2512c:	230f      	movs	r3, #15
   2512e:	18fb      	adds	r3, r7, r3
   25130:	2200      	movs	r2, #0
   25132:	569a      	ldrsb	r2, [r3, r2]
   25134:	4b33      	ldr	r3, [pc, #204]	; (25204 <Socket_ReadSocketData+0x1e0>)
   25136:	0112      	lsls	r2, r2, #4
   25138:	58d2      	ldr	r2, [r2, r3]
   2513a:	68bb      	ldr	r3, [r7, #8]
   2513c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   2513e:	231a      	movs	r3, #26
   25140:	18fb      	adds	r3, r7, r3
   25142:	2200      	movs	r2, #0
   25144:	5e9a      	ldrsh	r2, [r3, r2]
   25146:	68bb      	ldr	r3, [r7, #8]
   25148:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   2514a:	68bb      	ldr	r3, [r7, #8]
   2514c:	88da      	ldrh	r2, [r3, #6]
   2514e:	231a      	movs	r3, #26
   25150:	18fb      	adds	r3, r7, r3
   25152:	881b      	ldrh	r3, [r3, #0]
   25154:	1ad3      	subs	r3, r2, r3
   25156:	b29a      	uxth	r2, r3
   25158:	68bb      	ldr	r3, [r7, #8]
   2515a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   2515c:	4b2b      	ldr	r3, [pc, #172]	; (2520c <Socket_ReadSocketData+0x1e8>)
   2515e:	681b      	ldr	r3, [r3, #0]
   25160:	2b00      	cmp	r3, #0
   25162:	d00b      	beq.n	2517c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25164:	4b29      	ldr	r3, [pc, #164]	; (2520c <Socket_ReadSocketData+0x1e8>)
   25166:	681b      	ldr	r3, [r3, #0]
   25168:	68bc      	ldr	r4, [r7, #8]
   2516a:	220e      	movs	r2, #14
   2516c:	18ba      	adds	r2, r7, r2
   2516e:	7811      	ldrb	r1, [r2, #0]
   25170:	220f      	movs	r2, #15
   25172:	18ba      	adds	r2, r7, r2
   25174:	2000      	movs	r0, #0
   25176:	5610      	ldrsb	r0, [r2, r0]
   25178:	0022      	movs	r2, r4
   2517a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   2517c:	2330      	movs	r3, #48	; 0x30
   2517e:	18f9      	adds	r1, r7, r3
   25180:	2330      	movs	r3, #48	; 0x30
   25182:	18fa      	adds	r2, r7, r3
   25184:	231a      	movs	r3, #26
   25186:	18fb      	adds	r3, r7, r3
   25188:	8812      	ldrh	r2, [r2, #0]
   2518a:	881b      	ldrh	r3, [r3, #0]
   2518c:	1ad3      	subs	r3, r2, r3
   2518e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25190:	231a      	movs	r3, #26
   25192:	18fb      	adds	r3, r7, r3
   25194:	881b      	ldrh	r3, [r3, #0]
   25196:	69fa      	ldr	r2, [r7, #28]
   25198:	18d3      	adds	r3, r2, r3
   2519a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   2519c:	230f      	movs	r3, #15
   2519e:	18fb      	adds	r3, r7, r3
   251a0:	781b      	ldrb	r3, [r3, #0]
   251a2:	b25b      	sxtb	r3, r3
   251a4:	4a17      	ldr	r2, [pc, #92]	; (25204 <Socket_ReadSocketData+0x1e0>)
   251a6:	011b      	lsls	r3, r3, #4
   251a8:	18d3      	adds	r3, r2, r3
   251aa:	330a      	adds	r3, #10
   251ac:	781b      	ldrb	r3, [r3, #0]
   251ae:	b2db      	uxtb	r3, r3
   251b0:	2b00      	cmp	r3, #0
   251b2:	d11c      	bne.n	251ee <Socket_ReadSocketData+0x1ca>
   251b4:	2330      	movs	r3, #48	; 0x30
   251b6:	18fb      	adds	r3, r7, r3
   251b8:	881b      	ldrh	r3, [r3, #0]
   251ba:	2b00      	cmp	r3, #0
   251bc:	d017      	beq.n	251ee <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   251be:	2301      	movs	r3, #1
   251c0:	2200      	movs	r2, #0
   251c2:	2100      	movs	r1, #0
   251c4:	2000      	movs	r0, #0
   251c6:	4c10      	ldr	r4, [pc, #64]	; (25208 <Socket_ReadSocketData+0x1e4>)
   251c8:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   251ca:	e017      	b.n	251fc <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   251cc:	4b10      	ldr	r3, [pc, #64]	; (25210 <Socket_ReadSocketData+0x1ec>)
   251ce:	0018      	movs	r0, r3
   251d0:	4b10      	ldr	r3, [pc, #64]	; (25214 <Socket_ReadSocketData+0x1f0>)
   251d2:	4798      	blx	r3
   251d4:	2330      	movs	r3, #48	; 0x30
   251d6:	18fb      	adds	r3, r7, r3
   251d8:	881a      	ldrh	r2, [r3, #0]
   251da:	4b0f      	ldr	r3, [pc, #60]	; (25218 <Socket_ReadSocketData+0x1f4>)
   251dc:	0011      	movs	r1, r2
   251de:	0018      	movs	r0, r3
   251e0:	4b0c      	ldr	r3, [pc, #48]	; (25214 <Socket_ReadSocketData+0x1f0>)
   251e2:	4798      	blx	r3
   251e4:	4b0d      	ldr	r3, [pc, #52]	; (2521c <Socket_ReadSocketData+0x1f8>)
   251e6:	0018      	movs	r0, r3
   251e8:	4b0a      	ldr	r3, [pc, #40]	; (25214 <Socket_ReadSocketData+0x1f0>)
   251ea:	4798      	blx	r3
				break;
   251ec:	e006      	b.n	251fc <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   251ee:	2330      	movs	r3, #48	; 0x30
   251f0:	18fb      	adds	r3, r7, r3
   251f2:	881b      	ldrh	r3, [r3, #0]
   251f4:	2b00      	cmp	r3, #0
   251f6:	d000      	beq.n	251fa <Socket_ReadSocketData+0x1d6>
   251f8:	e753      	b.n	250a2 <Socket_ReadSocketData+0x7e>
	}
}
   251fa:	e7ff      	b.n	251fc <Socket_ReadSocketData+0x1d8>
   251fc:	46c0      	nop			; (mov r8, r8)
   251fe:	46bd      	mov	sp, r7
   25200:	b009      	add	sp, #36	; 0x24
   25202:	bd90      	pop	{r4, r7, pc}
   25204:	20005690 	.word	0x20005690
   25208:	00021a1d 	.word	0x00021a1d
   2520c:	20005740 	.word	0x20005740
   25210:	00039524 	.word	0x00039524
   25214:	0001e529 	.word	0x0001e529
   25218:	00039530 	.word	0x00039530
   2521c:	00039544 	.word	0x00039544

00025220 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25220:	b590      	push	{r4, r7, lr}
   25222:	b0bb      	sub	sp, #236	; 0xec
   25224:	af02      	add	r7, sp, #8
   25226:	603a      	str	r2, [r7, #0]
   25228:	1dfb      	adds	r3, r7, #7
   2522a:	1c02      	adds	r2, r0, #0
   2522c:	701a      	strb	r2, [r3, #0]
   2522e:	1d3b      	adds	r3, r7, #4
   25230:	1c0a      	adds	r2, r1, #0
   25232:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25234:	1dfb      	adds	r3, r7, #7
   25236:	781b      	ldrb	r3, [r3, #0]
   25238:	2b41      	cmp	r3, #65	; 0x41
   2523a:	d003      	beq.n	25244 <m2m_ip_cb+0x24>
   2523c:	1dfb      	adds	r3, r7, #7
   2523e:	781b      	ldrb	r3, [r3, #0]
   25240:	2b54      	cmp	r3, #84	; 0x54
   25242:	d120      	bne.n	25286 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25244:	23cc      	movs	r3, #204	; 0xcc
   25246:	18f9      	adds	r1, r7, r3
   25248:	6838      	ldr	r0, [r7, #0]
   2524a:	2300      	movs	r3, #0
   2524c:	2204      	movs	r2, #4
   2524e:	4c98      	ldr	r4, [pc, #608]	; (254b0 <m2m_ip_cb+0x290>)
   25250:	47a0      	blx	r4
   25252:	1e03      	subs	r3, r0, #0
   25254:	d000      	beq.n	25258 <m2m_ip_cb+0x38>
   25256:	e275      	b.n	25744 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25258:	23cc      	movs	r3, #204	; 0xcc
   2525a:	18fb      	adds	r3, r7, r3
   2525c:	2201      	movs	r2, #1
   2525e:	569a      	ldrsb	r2, [r3, r2]
   25260:	23c8      	movs	r3, #200	; 0xc8
   25262:	18fb      	adds	r3, r7, r3
   25264:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25266:	4b93      	ldr	r3, [pc, #588]	; (254b4 <m2m_ip_cb+0x294>)
   25268:	681b      	ldr	r3, [r3, #0]
   2526a:	2b00      	cmp	r3, #0
   2526c:	d100      	bne.n	25270 <m2m_ip_cb+0x50>
   2526e:	e269      	b.n	25744 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25270:	4b90      	ldr	r3, [pc, #576]	; (254b4 <m2m_ip_cb+0x294>)
   25272:	681b      	ldr	r3, [r3, #0]
   25274:	22cc      	movs	r2, #204	; 0xcc
   25276:	18ba      	adds	r2, r7, r2
   25278:	2000      	movs	r0, #0
   2527a:	5610      	ldrsb	r0, [r2, r0]
   2527c:	22c8      	movs	r2, #200	; 0xc8
   2527e:	18ba      	adds	r2, r7, r2
   25280:	2101      	movs	r1, #1
   25282:	4798      	blx	r3
	{
   25284:	e25e      	b.n	25744 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25286:	1dfb      	adds	r3, r7, #7
   25288:	781b      	ldrb	r3, [r3, #0]
   2528a:	2b42      	cmp	r3, #66	; 0x42
   2528c:	d120      	bne.n	252d0 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   2528e:	23c4      	movs	r3, #196	; 0xc4
   25290:	18f9      	adds	r1, r7, r3
   25292:	6838      	ldr	r0, [r7, #0]
   25294:	2300      	movs	r3, #0
   25296:	2204      	movs	r2, #4
   25298:	4c85      	ldr	r4, [pc, #532]	; (254b0 <m2m_ip_cb+0x290>)
   2529a:	47a0      	blx	r4
   2529c:	1e03      	subs	r3, r0, #0
   2529e:	d000      	beq.n	252a2 <m2m_ip_cb+0x82>
   252a0:	e257      	b.n	25752 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   252a2:	23c4      	movs	r3, #196	; 0xc4
   252a4:	18fb      	adds	r3, r7, r3
   252a6:	2201      	movs	r2, #1
   252a8:	569a      	ldrsb	r2, [r3, r2]
   252aa:	23c0      	movs	r3, #192	; 0xc0
   252ac:	18fb      	adds	r3, r7, r3
   252ae:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   252b0:	4b80      	ldr	r3, [pc, #512]	; (254b4 <m2m_ip_cb+0x294>)
   252b2:	681b      	ldr	r3, [r3, #0]
   252b4:	2b00      	cmp	r3, #0
   252b6:	d100      	bne.n	252ba <m2m_ip_cb+0x9a>
   252b8:	e24b      	b.n	25752 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   252ba:	4b7e      	ldr	r3, [pc, #504]	; (254b4 <m2m_ip_cb+0x294>)
   252bc:	681b      	ldr	r3, [r3, #0]
   252be:	22c4      	movs	r2, #196	; 0xc4
   252c0:	18ba      	adds	r2, r7, r2
   252c2:	2000      	movs	r0, #0
   252c4:	5610      	ldrsb	r0, [r2, r0]
   252c6:	22c0      	movs	r2, #192	; 0xc0
   252c8:	18ba      	adds	r2, r7, r2
   252ca:	2102      	movs	r1, #2
   252cc:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   252ce:	e240      	b.n	25752 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   252d0:	1dfb      	adds	r3, r7, #7
   252d2:	781b      	ldrb	r3, [r3, #0]
   252d4:	2b43      	cmp	r3, #67	; 0x43
   252d6:	d000      	beq.n	252da <m2m_ip_cb+0xba>
   252d8:	e086      	b.n	253e8 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   252da:	23b4      	movs	r3, #180	; 0xb4
   252dc:	18f9      	adds	r1, r7, r3
   252de:	6838      	ldr	r0, [r7, #0]
   252e0:	2300      	movs	r3, #0
   252e2:	220c      	movs	r2, #12
   252e4:	4c72      	ldr	r4, [pc, #456]	; (254b0 <m2m_ip_cb+0x290>)
   252e6:	47a0      	blx	r4
   252e8:	1e03      	subs	r3, r0, #0
   252ea:	d000      	beq.n	252ee <m2m_ip_cb+0xce>
   252ec:	e231      	b.n	25752 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   252ee:	23b4      	movs	r3, #180	; 0xb4
   252f0:	18fb      	adds	r3, r7, r3
   252f2:	7a5b      	ldrb	r3, [r3, #9]
   252f4:	b25b      	sxtb	r3, r3
   252f6:	2b00      	cmp	r3, #0
   252f8:	db4f      	blt.n	2539a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   252fa:	23b4      	movs	r3, #180	; 0xb4
   252fc:	18fb      	adds	r3, r7, r3
   252fe:	7a5b      	ldrb	r3, [r3, #9]
   25300:	b25b      	sxtb	r3, r3
   25302:	0018      	movs	r0, r3
   25304:	23b4      	movs	r3, #180	; 0xb4
   25306:	18fb      	adds	r3, r7, r3
   25308:	7a1b      	ldrb	r3, [r3, #8]
   2530a:	b25b      	sxtb	r3, r3
   2530c:	4a6a      	ldr	r2, [pc, #424]	; (254b8 <m2m_ip_cb+0x298>)
   2530e:	011b      	lsls	r3, r3, #4
   25310:	18d3      	adds	r3, r2, r3
   25312:	330b      	adds	r3, #11
   25314:	781b      	ldrb	r3, [r3, #0]
   25316:	b2d9      	uxtb	r1, r3
   25318:	4a67      	ldr	r2, [pc, #412]	; (254b8 <m2m_ip_cb+0x298>)
   2531a:	0103      	lsls	r3, r0, #4
   2531c:	18d3      	adds	r3, r2, r3
   2531e:	330b      	adds	r3, #11
   25320:	1c0a      	adds	r2, r1, #0
   25322:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25324:	23b4      	movs	r3, #180	; 0xb4
   25326:	18fb      	adds	r3, r7, r3
   25328:	7a5b      	ldrb	r3, [r3, #9]
   2532a:	b25b      	sxtb	r3, r3
   2532c:	4a62      	ldr	r2, [pc, #392]	; (254b8 <m2m_ip_cb+0x298>)
   2532e:	011b      	lsls	r3, r3, #4
   25330:	18d3      	adds	r3, r2, r3
   25332:	330a      	adds	r3, #10
   25334:	2201      	movs	r2, #1
   25336:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25338:	23b4      	movs	r3, #180	; 0xb4
   2533a:	18fb      	adds	r3, r7, r3
   2533c:	7a5b      	ldrb	r3, [r3, #9]
   2533e:	b25b      	sxtb	r3, r3
   25340:	0018      	movs	r0, r3
   25342:	23b4      	movs	r3, #180	; 0xb4
   25344:	18fb      	adds	r3, r7, r3
   25346:	895b      	ldrh	r3, [r3, #10]
   25348:	3b08      	subs	r3, #8
   2534a:	b299      	uxth	r1, r3
   2534c:	4a5a      	ldr	r2, [pc, #360]	; (254b8 <m2m_ip_cb+0x298>)
   2534e:	0103      	lsls	r3, r0, #4
   25350:	18d3      	adds	r3, r2, r3
   25352:	3308      	adds	r3, #8
   25354:	1c0a      	adds	r2, r1, #0
   25356:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25358:	4b58      	ldr	r3, [pc, #352]	; (254bc <m2m_ip_cb+0x29c>)
   2535a:	881b      	ldrh	r3, [r3, #0]
   2535c:	b29b      	uxth	r3, r3
   2535e:	3301      	adds	r3, #1
   25360:	b29a      	uxth	r2, r3
   25362:	4b56      	ldr	r3, [pc, #344]	; (254bc <m2m_ip_cb+0x29c>)
   25364:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25366:	4b55      	ldr	r3, [pc, #340]	; (254bc <m2m_ip_cb+0x29c>)
   25368:	881b      	ldrh	r3, [r3, #0]
   2536a:	b29b      	uxth	r3, r3
   2536c:	2b00      	cmp	r3, #0
   2536e:	d106      	bne.n	2537e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25370:	4b52      	ldr	r3, [pc, #328]	; (254bc <m2m_ip_cb+0x29c>)
   25372:	881b      	ldrh	r3, [r3, #0]
   25374:	b29b      	uxth	r3, r3
   25376:	3301      	adds	r3, #1
   25378:	b29a      	uxth	r2, r3
   2537a:	4b50      	ldr	r3, [pc, #320]	; (254bc <m2m_ip_cb+0x29c>)
   2537c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   2537e:	23b4      	movs	r3, #180	; 0xb4
   25380:	18fb      	adds	r3, r7, r3
   25382:	7a5b      	ldrb	r3, [r3, #9]
   25384:	b25b      	sxtb	r3, r3
   25386:	0018      	movs	r0, r3
   25388:	4b4c      	ldr	r3, [pc, #304]	; (254bc <m2m_ip_cb+0x29c>)
   2538a:	881b      	ldrh	r3, [r3, #0]
   2538c:	b299      	uxth	r1, r3
   2538e:	4a4a      	ldr	r2, [pc, #296]	; (254b8 <m2m_ip_cb+0x298>)
   25390:	0103      	lsls	r3, r0, #4
   25392:	18d3      	adds	r3, r2, r3
   25394:	3306      	adds	r3, #6
   25396:	1c0a      	adds	r2, r1, #0
   25398:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   2539a:	23b4      	movs	r3, #180	; 0xb4
   2539c:	18fb      	adds	r3, r7, r3
   2539e:	2209      	movs	r2, #9
   253a0:	569a      	ldrsb	r2, [r3, r2]
   253a2:	23a0      	movs	r3, #160	; 0xa0
   253a4:	18fb      	adds	r3, r7, r3
   253a6:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   253a8:	23a0      	movs	r3, #160	; 0xa0
   253aa:	18fb      	adds	r3, r7, r3
   253ac:	2202      	movs	r2, #2
   253ae:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   253b0:	23b4      	movs	r3, #180	; 0xb4
   253b2:	18fb      	adds	r3, r7, r3
   253b4:	885a      	ldrh	r2, [r3, #2]
   253b6:	23a0      	movs	r3, #160	; 0xa0
   253b8:	18fb      	adds	r3, r7, r3
   253ba:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   253bc:	23b4      	movs	r3, #180	; 0xb4
   253be:	18fb      	adds	r3, r7, r3
   253c0:	685a      	ldr	r2, [r3, #4]
   253c2:	23a0      	movs	r3, #160	; 0xa0
   253c4:	18fb      	adds	r3, r7, r3
   253c6:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   253c8:	4b3a      	ldr	r3, [pc, #232]	; (254b4 <m2m_ip_cb+0x294>)
   253ca:	681b      	ldr	r3, [r3, #0]
   253cc:	2b00      	cmp	r3, #0
   253ce:	d100      	bne.n	253d2 <m2m_ip_cb+0x1b2>
   253d0:	e1bf      	b.n	25752 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   253d2:	4b38      	ldr	r3, [pc, #224]	; (254b4 <m2m_ip_cb+0x294>)
   253d4:	681b      	ldr	r3, [r3, #0]
   253d6:	22b4      	movs	r2, #180	; 0xb4
   253d8:	18ba      	adds	r2, r7, r2
   253da:	2008      	movs	r0, #8
   253dc:	5610      	ldrsb	r0, [r2, r0]
   253de:	22a0      	movs	r2, #160	; 0xa0
   253e0:	18ba      	adds	r2, r7, r2
   253e2:	2104      	movs	r1, #4
   253e4:	4798      	blx	r3
}
   253e6:	e1b4      	b.n	25752 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   253e8:	1dfb      	adds	r3, r7, #7
   253ea:	781b      	ldrb	r3, [r3, #0]
   253ec:	2b44      	cmp	r3, #68	; 0x44
   253ee:	d003      	beq.n	253f8 <m2m_ip_cb+0x1d8>
   253f0:	1dfb      	adds	r3, r7, #7
   253f2:	781b      	ldrb	r3, [r3, #0]
   253f4:	2b4b      	cmp	r3, #75	; 0x4b
   253f6:	d13d      	bne.n	25474 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   253f8:	239c      	movs	r3, #156	; 0x9c
   253fa:	18f9      	adds	r1, r7, r3
   253fc:	6838      	ldr	r0, [r7, #0]
   253fe:	2300      	movs	r3, #0
   25400:	2204      	movs	r2, #4
   25402:	4c2b      	ldr	r4, [pc, #172]	; (254b0 <m2m_ip_cb+0x290>)
   25404:	47a0      	blx	r4
   25406:	1e03      	subs	r3, r0, #0
   25408:	d000      	beq.n	2540c <m2m_ip_cb+0x1ec>
   2540a:	e19d      	b.n	25748 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   2540c:	239c      	movs	r3, #156	; 0x9c
   2540e:	18fb      	adds	r3, r7, r3
   25410:	2200      	movs	r2, #0
   25412:	569a      	ldrsb	r2, [r3, r2]
   25414:	2398      	movs	r3, #152	; 0x98
   25416:	18fb      	adds	r3, r7, r3
   25418:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   2541a:	239c      	movs	r3, #156	; 0x9c
   2541c:	18fb      	adds	r3, r7, r3
   2541e:	2201      	movs	r2, #1
   25420:	569a      	ldrsb	r2, [r3, r2]
   25422:	2398      	movs	r3, #152	; 0x98
   25424:	18fb      	adds	r3, r7, r3
   25426:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25428:	239c      	movs	r3, #156	; 0x9c
   2542a:	18fb      	adds	r3, r7, r3
   2542c:	785b      	ldrb	r3, [r3, #1]
   2542e:	b25b      	sxtb	r3, r3
   25430:	2b00      	cmp	r3, #0
   25432:	d10f      	bne.n	25454 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25434:	239c      	movs	r3, #156	; 0x9c
   25436:	18fb      	adds	r3, r7, r3
   25438:	781b      	ldrb	r3, [r3, #0]
   2543a:	b25b      	sxtb	r3, r3
   2543c:	0018      	movs	r0, r3
   2543e:	239c      	movs	r3, #156	; 0x9c
   25440:	18fb      	adds	r3, r7, r3
   25442:	885b      	ldrh	r3, [r3, #2]
   25444:	3b08      	subs	r3, #8
   25446:	b299      	uxth	r1, r3
   25448:	4a1b      	ldr	r2, [pc, #108]	; (254b8 <m2m_ip_cb+0x298>)
   2544a:	0103      	lsls	r3, r0, #4
   2544c:	18d3      	adds	r3, r2, r3
   2544e:	3308      	adds	r3, #8
   25450:	1c0a      	adds	r2, r1, #0
   25452:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25454:	4b17      	ldr	r3, [pc, #92]	; (254b4 <m2m_ip_cb+0x294>)
   25456:	681b      	ldr	r3, [r3, #0]
   25458:	2b00      	cmp	r3, #0
   2545a:	d100      	bne.n	2545e <m2m_ip_cb+0x23e>
   2545c:	e174      	b.n	25748 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   2545e:	4b15      	ldr	r3, [pc, #84]	; (254b4 <m2m_ip_cb+0x294>)
   25460:	681b      	ldr	r3, [r3, #0]
   25462:	229c      	movs	r2, #156	; 0x9c
   25464:	18ba      	adds	r2, r7, r2
   25466:	2000      	movs	r0, #0
   25468:	5610      	ldrsb	r0, [r2, r0]
   2546a:	2298      	movs	r2, #152	; 0x98
   2546c:	18ba      	adds	r2, r7, r2
   2546e:	2105      	movs	r1, #5
   25470:	4798      	blx	r3
	{
   25472:	e169      	b.n	25748 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25474:	1dfb      	adds	r3, r7, #7
   25476:	781b      	ldrb	r3, [r3, #0]
   25478:	2b4a      	cmp	r3, #74	; 0x4a
   2547a:	d123      	bne.n	254c4 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   2547c:	230c      	movs	r3, #12
   2547e:	18f9      	adds	r1, r7, r3
   25480:	6838      	ldr	r0, [r7, #0]
   25482:	2300      	movs	r3, #0
   25484:	2244      	movs	r2, #68	; 0x44
   25486:	4c0a      	ldr	r4, [pc, #40]	; (254b0 <m2m_ip_cb+0x290>)
   25488:	47a0      	blx	r4
   2548a:	1e03      	subs	r3, r0, #0
   2548c:	d000      	beq.n	25490 <m2m_ip_cb+0x270>
   2548e:	e160      	b.n	25752 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25490:	4b0b      	ldr	r3, [pc, #44]	; (254c0 <m2m_ip_cb+0x2a0>)
   25492:	681b      	ldr	r3, [r3, #0]
   25494:	2b00      	cmp	r3, #0
   25496:	d100      	bne.n	2549a <m2m_ip_cb+0x27a>
   25498:	e15b      	b.n	25752 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   2549a:	4b09      	ldr	r3, [pc, #36]	; (254c0 <m2m_ip_cb+0x2a0>)
   2549c:	681a      	ldr	r2, [r3, #0]
   2549e:	230c      	movs	r3, #12
   254a0:	18fb      	adds	r3, r7, r3
   254a2:	6c19      	ldr	r1, [r3, #64]	; 0x40
   254a4:	230c      	movs	r3, #12
   254a6:	18fb      	adds	r3, r7, r3
   254a8:	0018      	movs	r0, r3
   254aa:	4790      	blx	r2
}
   254ac:	e151      	b.n	25752 <m2m_ip_cb+0x532>
   254ae:	46c0      	nop			; (mov r8, r8)
   254b0:	00021a1d 	.word	0x00021a1d
   254b4:	20005740 	.word	0x20005740
   254b8:	20005690 	.word	0x20005690
   254bc:	20003ea2 	.word	0x20003ea2
   254c0:	20005748 	.word	0x20005748
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   254c4:	1dfb      	adds	r3, r7, #7
   254c6:	781b      	ldrb	r3, [r3, #0]
   254c8:	2b46      	cmp	r3, #70	; 0x46
   254ca:	d008      	beq.n	254de <m2m_ip_cb+0x2be>
   254cc:	1dfb      	adds	r3, r7, #7
   254ce:	781b      	ldrb	r3, [r3, #0]
   254d0:	2b48      	cmp	r3, #72	; 0x48
   254d2:	d004      	beq.n	254de <m2m_ip_cb+0x2be>
   254d4:	1dfb      	adds	r3, r7, #7
   254d6:	781b      	ldrb	r3, [r3, #0]
   254d8:	2b4d      	cmp	r3, #77	; 0x4d
   254da:	d000      	beq.n	254de <m2m_ip_cb+0x2be>
   254dc:	e0b4      	b.n	25648 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   254de:	23df      	movs	r3, #223	; 0xdf
   254e0:	18fb      	adds	r3, r7, r3
   254e2:	2206      	movs	r2, #6
   254e4:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   254e6:	1dfb      	adds	r3, r7, #7
   254e8:	781b      	ldrb	r3, [r3, #0]
   254ea:	2b48      	cmp	r3, #72	; 0x48
   254ec:	d103      	bne.n	254f6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   254ee:	23df      	movs	r3, #223	; 0xdf
   254f0:	18fb      	adds	r3, r7, r3
   254f2:	2209      	movs	r2, #9
   254f4:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   254f6:	23d8      	movs	r3, #216	; 0xd8
   254f8:	18fb      	adds	r3, r7, r3
   254fa:	2210      	movs	r2, #16
   254fc:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   254fe:	23d8      	movs	r3, #216	; 0xd8
   25500:	18fb      	adds	r3, r7, r3
   25502:	881a      	ldrh	r2, [r3, #0]
   25504:	2388      	movs	r3, #136	; 0x88
   25506:	18f9      	adds	r1, r7, r3
   25508:	6838      	ldr	r0, [r7, #0]
   2550a:	2300      	movs	r3, #0
   2550c:	4c93      	ldr	r4, [pc, #588]	; (2575c <m2m_ip_cb+0x53c>)
   2550e:	47a0      	blx	r4
   25510:	1e03      	subs	r3, r0, #0
   25512:	d000      	beq.n	25516 <m2m_ip_cb+0x2f6>
   25514:	e11a      	b.n	2574c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   25516:	23d6      	movs	r3, #214	; 0xd6
   25518:	18fb      	adds	r3, r7, r3
   2551a:	2200      	movs	r2, #0
   2551c:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   2551e:	23d5      	movs	r3, #213	; 0xd5
   25520:	18fb      	adds	r3, r7, r3
   25522:	2288      	movs	r2, #136	; 0x88
   25524:	18ba      	adds	r2, r7, r2
   25526:	7b12      	ldrb	r2, [r2, #12]
   25528:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   2552a:	23d6      	movs	r3, #214	; 0xd6
   2552c:	18fb      	adds	r3, r7, r3
   2552e:	2288      	movs	r2, #136	; 0x88
   25530:	18ba      	adds	r2, r7, r2
   25532:	89d2      	ldrh	r2, [r2, #14]
   25534:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   25536:	23d5      	movs	r3, #213	; 0xd5
   25538:	18fb      	adds	r3, r7, r3
   2553a:	781b      	ldrb	r3, [r3, #0]
   2553c:	b25b      	sxtb	r3, r3
   2553e:	4a88      	ldr	r2, [pc, #544]	; (25760 <m2m_ip_cb+0x540>)
   25540:	011b      	lsls	r3, r3, #4
   25542:	18d3      	adds	r3, r2, r3
   25544:	330c      	adds	r3, #12
   25546:	2200      	movs	r2, #0
   25548:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   2554a:	23d2      	movs	r3, #210	; 0xd2
   2554c:	18fb      	adds	r3, r7, r3
   2554e:	2288      	movs	r2, #136	; 0x88
   25550:	18ba      	adds	r2, r7, r2
   25552:	8912      	ldrh	r2, [r2, #8]
   25554:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   25556:	23d0      	movs	r3, #208	; 0xd0
   25558:	18fb      	adds	r3, r7, r3
   2555a:	2288      	movs	r2, #136	; 0x88
   2555c:	18ba      	adds	r2, r7, r2
   2555e:	8952      	ldrh	r2, [r2, #10]
   25560:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   25562:	2388      	movs	r3, #136	; 0x88
   25564:	18fb      	adds	r3, r7, r3
   25566:	885a      	ldrh	r2, [r3, #2]
   25568:	2370      	movs	r3, #112	; 0x70
   2556a:	18fb      	adds	r3, r7, r3
   2556c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   2556e:	2388      	movs	r3, #136	; 0x88
   25570:	18fb      	adds	r3, r7, r3
   25572:	685a      	ldr	r2, [r3, #4]
   25574:	2370      	movs	r3, #112	; 0x70
   25576:	18fb      	adds	r3, r7, r3
   25578:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2557a:	23d5      	movs	r3, #213	; 0xd5
   2557c:	18fb      	adds	r3, r7, r3
   2557e:	781b      	ldrb	r3, [r3, #0]
   25580:	b25b      	sxtb	r3, r3
   25582:	4a77      	ldr	r2, [pc, #476]	; (25760 <m2m_ip_cb+0x540>)
   25584:	011b      	lsls	r3, r3, #4
   25586:	18d3      	adds	r3, r2, r3
   25588:	3306      	adds	r3, #6
   2558a:	881b      	ldrh	r3, [r3, #0]
   2558c:	b29b      	uxth	r3, r3
   2558e:	22d6      	movs	r2, #214	; 0xd6
   25590:	18ba      	adds	r2, r7, r2
   25592:	8812      	ldrh	r2, [r2, #0]
   25594:	429a      	cmp	r2, r3
   25596:	d148      	bne.n	2562a <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   25598:	23d2      	movs	r3, #210	; 0xd2
   2559a:	18fb      	adds	r3, r7, r3
   2559c:	2200      	movs	r2, #0
   2559e:	5e9b      	ldrsh	r3, [r3, r2]
   255a0:	2b00      	cmp	r3, #0
   255a2:	dd25      	ble.n	255f0 <m2m_ip_cb+0x3d0>
   255a4:	23d2      	movs	r3, #210	; 0xd2
   255a6:	18fb      	adds	r3, r7, r3
   255a8:	2200      	movs	r2, #0
   255aa:	5e9a      	ldrsh	r2, [r3, r2]
   255ac:	1d3b      	adds	r3, r7, #4
   255ae:	881b      	ldrh	r3, [r3, #0]
   255b0:	429a      	cmp	r2, r3
   255b2:	da1d      	bge.n	255f0 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   255b4:	23d0      	movs	r3, #208	; 0xd0
   255b6:	18fb      	adds	r3, r7, r3
   255b8:	881b      	ldrh	r3, [r3, #0]
   255ba:	683a      	ldr	r2, [r7, #0]
   255bc:	18d3      	adds	r3, r2, r3
   255be:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   255c0:	23d8      	movs	r3, #216	; 0xd8
   255c2:	18fb      	adds	r3, r7, r3
   255c4:	22d2      	movs	r2, #210	; 0xd2
   255c6:	18ba      	adds	r2, r7, r2
   255c8:	8812      	ldrh	r2, [r2, #0]
   255ca:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   255cc:	683c      	ldr	r4, [r7, #0]
   255ce:	23df      	movs	r3, #223	; 0xdf
   255d0:	18fb      	adds	r3, r7, r3
   255d2:	781a      	ldrb	r2, [r3, #0]
   255d4:	2370      	movs	r3, #112	; 0x70
   255d6:	18f9      	adds	r1, r7, r3
   255d8:	23d5      	movs	r3, #213	; 0xd5
   255da:	18fb      	adds	r3, r7, r3
   255dc:	2000      	movs	r0, #0
   255de:	5618      	ldrsb	r0, [r3, r0]
   255e0:	23d8      	movs	r3, #216	; 0xd8
   255e2:	18fb      	adds	r3, r7, r3
   255e4:	881b      	ldrh	r3, [r3, #0]
   255e6:	9300      	str	r3, [sp, #0]
   255e8:	0023      	movs	r3, r4
   255ea:	4c5e      	ldr	r4, [pc, #376]	; (25764 <m2m_ip_cb+0x544>)
   255ec:	47a0      	blx	r4
	{
   255ee:	e0ad      	b.n	2574c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   255f0:	2370      	movs	r3, #112	; 0x70
   255f2:	18fb      	adds	r3, r7, r3
   255f4:	22d2      	movs	r2, #210	; 0xd2
   255f6:	18ba      	adds	r2, r7, r2
   255f8:	8812      	ldrh	r2, [r2, #0]
   255fa:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   255fc:	2370      	movs	r3, #112	; 0x70
   255fe:	18fb      	adds	r3, r7, r3
   25600:	2200      	movs	r2, #0
   25602:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   25604:	4b58      	ldr	r3, [pc, #352]	; (25768 <m2m_ip_cb+0x548>)
   25606:	681b      	ldr	r3, [r3, #0]
   25608:	2b00      	cmp	r3, #0
   2560a:	d100      	bne.n	2560e <m2m_ip_cb+0x3ee>
   2560c:	e09e      	b.n	2574c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   2560e:	4b56      	ldr	r3, [pc, #344]	; (25768 <m2m_ip_cb+0x548>)
   25610:	681b      	ldr	r3, [r3, #0]
   25612:	2270      	movs	r2, #112	; 0x70
   25614:	18bc      	adds	r4, r7, r2
   25616:	22df      	movs	r2, #223	; 0xdf
   25618:	18ba      	adds	r2, r7, r2
   2561a:	7811      	ldrb	r1, [r2, #0]
   2561c:	22d5      	movs	r2, #213	; 0xd5
   2561e:	18ba      	adds	r2, r7, r2
   25620:	2000      	movs	r0, #0
   25622:	5610      	ldrsb	r0, [r2, r0]
   25624:	0022      	movs	r2, r4
   25626:	4798      	blx	r3
	{
   25628:	e090      	b.n	2574c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   2562a:	23d8      	movs	r3, #216	; 0xd8
   2562c:	18fa      	adds	r2, r7, r3
   2562e:	1d3b      	adds	r3, r7, #4
   25630:	8812      	ldrh	r2, [r2, #0]
   25632:	881b      	ldrh	r3, [r3, #0]
   25634:	429a      	cmp	r2, r3
   25636:	d300      	bcc.n	2563a <m2m_ip_cb+0x41a>
   25638:	e088      	b.n	2574c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2563a:	2301      	movs	r3, #1
   2563c:	2200      	movs	r2, #0
   2563e:	2100      	movs	r1, #0
   25640:	2000      	movs	r0, #0
   25642:	4c46      	ldr	r4, [pc, #280]	; (2575c <m2m_ip_cb+0x53c>)
   25644:	47a0      	blx	r4
	{
   25646:	e081      	b.n	2574c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   25648:	1dfb      	adds	r3, r7, #7
   2564a:	781b      	ldrb	r3, [r3, #0]
   2564c:	2b45      	cmp	r3, #69	; 0x45
   2564e:	d007      	beq.n	25660 <m2m_ip_cb+0x440>
   25650:	1dfb      	adds	r3, r7, #7
   25652:	781b      	ldrb	r3, [r3, #0]
   25654:	2b47      	cmp	r3, #71	; 0x47
   25656:	d003      	beq.n	25660 <m2m_ip_cb+0x440>
   25658:	1dfb      	adds	r3, r7, #7
   2565a:	781b      	ldrb	r3, [r3, #0]
   2565c:	2b4c      	cmp	r3, #76	; 0x4c
   2565e:	d14c      	bne.n	256fa <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   25660:	23de      	movs	r3, #222	; 0xde
   25662:	18fb      	adds	r3, r7, r3
   25664:	2207      	movs	r2, #7
   25666:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   25668:	1dfb      	adds	r3, r7, #7
   2566a:	781b      	ldrb	r3, [r3, #0]
   2566c:	2b47      	cmp	r3, #71	; 0x47
   2566e:	d103      	bne.n	25678 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   25670:	23de      	movs	r3, #222	; 0xde
   25672:	18fb      	adds	r3, r7, r3
   25674:	2208      	movs	r2, #8
   25676:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   25678:	2364      	movs	r3, #100	; 0x64
   2567a:	18f9      	adds	r1, r7, r3
   2567c:	6838      	ldr	r0, [r7, #0]
   2567e:	2300      	movs	r3, #0
   25680:	2208      	movs	r2, #8
   25682:	4c36      	ldr	r4, [pc, #216]	; (2575c <m2m_ip_cb+0x53c>)
   25684:	47a0      	blx	r4
   25686:	1e03      	subs	r3, r0, #0
   25688:	d162      	bne.n	25750 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   2568a:	23dc      	movs	r3, #220	; 0xdc
   2568c:	18fb      	adds	r3, r7, r3
   2568e:	2200      	movs	r2, #0
   25690:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   25692:	23db      	movs	r3, #219	; 0xdb
   25694:	18fb      	adds	r3, r7, r3
   25696:	2264      	movs	r2, #100	; 0x64
   25698:	18ba      	adds	r2, r7, r2
   2569a:	7812      	ldrb	r2, [r2, #0]
   2569c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2569e:	23dc      	movs	r3, #220	; 0xdc
   256a0:	18fb      	adds	r3, r7, r3
   256a2:	2264      	movs	r2, #100	; 0x64
   256a4:	18ba      	adds	r2, r7, r2
   256a6:	8892      	ldrh	r2, [r2, #4]
   256a8:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   256aa:	2364      	movs	r3, #100	; 0x64
   256ac:	18fb      	adds	r3, r7, r3
   256ae:	2202      	movs	r2, #2
   256b0:	5e9a      	ldrsh	r2, [r3, r2]
   256b2:	236e      	movs	r3, #110	; 0x6e
   256b4:	18fb      	adds	r3, r7, r3
   256b6:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   256b8:	23db      	movs	r3, #219	; 0xdb
   256ba:	18fb      	adds	r3, r7, r3
   256bc:	781b      	ldrb	r3, [r3, #0]
   256be:	b25b      	sxtb	r3, r3
   256c0:	4a27      	ldr	r2, [pc, #156]	; (25760 <m2m_ip_cb+0x540>)
   256c2:	011b      	lsls	r3, r3, #4
   256c4:	18d3      	adds	r3, r2, r3
   256c6:	3306      	adds	r3, #6
   256c8:	881b      	ldrh	r3, [r3, #0]
   256ca:	b29b      	uxth	r3, r3
   256cc:	22dc      	movs	r2, #220	; 0xdc
   256ce:	18ba      	adds	r2, r7, r2
   256d0:	8812      	ldrh	r2, [r2, #0]
   256d2:	429a      	cmp	r2, r3
   256d4:	d13c      	bne.n	25750 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   256d6:	4b24      	ldr	r3, [pc, #144]	; (25768 <m2m_ip_cb+0x548>)
   256d8:	681b      	ldr	r3, [r3, #0]
   256da:	2b00      	cmp	r3, #0
   256dc:	d038      	beq.n	25750 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   256de:	4b22      	ldr	r3, [pc, #136]	; (25768 <m2m_ip_cb+0x548>)
   256e0:	681b      	ldr	r3, [r3, #0]
   256e2:	226e      	movs	r2, #110	; 0x6e
   256e4:	18bc      	adds	r4, r7, r2
   256e6:	22de      	movs	r2, #222	; 0xde
   256e8:	18ba      	adds	r2, r7, r2
   256ea:	7811      	ldrb	r1, [r2, #0]
   256ec:	22db      	movs	r2, #219	; 0xdb
   256ee:	18ba      	adds	r2, r7, r2
   256f0:	2000      	movs	r0, #0
   256f2:	5610      	ldrsb	r0, [r2, r0]
   256f4:	0022      	movs	r2, r4
   256f6:	4798      	blx	r3
	{
   256f8:	e02a      	b.n	25750 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   256fa:	1dfb      	adds	r3, r7, #7
   256fc:	781b      	ldrb	r3, [r3, #0]
   256fe:	2b52      	cmp	r3, #82	; 0x52
   25700:	d127      	bne.n	25752 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   25702:	2350      	movs	r3, #80	; 0x50
   25704:	18f9      	adds	r1, r7, r3
   25706:	6838      	ldr	r0, [r7, #0]
   25708:	2301      	movs	r3, #1
   2570a:	2214      	movs	r2, #20
   2570c:	4c13      	ldr	r4, [pc, #76]	; (2575c <m2m_ip_cb+0x53c>)
   2570e:	47a0      	blx	r4
   25710:	1e03      	subs	r3, r0, #0
   25712:	d11e      	bne.n	25752 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   25714:	2350      	movs	r3, #80	; 0x50
   25716:	18fb      	adds	r3, r7, r3
   25718:	685b      	ldr	r3, [r3, #4]
   2571a:	001a      	movs	r2, r3
   2571c:	4b13      	ldr	r3, [pc, #76]	; (2576c <m2m_ip_cb+0x54c>)
   2571e:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   25720:	4b12      	ldr	r3, [pc, #72]	; (2576c <m2m_ip_cb+0x54c>)
   25722:	681b      	ldr	r3, [r3, #0]
   25724:	2b00      	cmp	r3, #0
   25726:	d014      	beq.n	25752 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   25728:	4b10      	ldr	r3, [pc, #64]	; (2576c <m2m_ip_cb+0x54c>)
   2572a:	681c      	ldr	r4, [r3, #0]
   2572c:	2350      	movs	r3, #80	; 0x50
   2572e:	18fb      	adds	r3, r7, r3
   25730:	6818      	ldr	r0, [r3, #0]
   25732:	2350      	movs	r3, #80	; 0x50
   25734:	18fb      	adds	r3, r7, r3
   25736:	6899      	ldr	r1, [r3, #8]
   25738:	2350      	movs	r3, #80	; 0x50
   2573a:	18fb      	adds	r3, r7, r3
   2573c:	7c1b      	ldrb	r3, [r3, #16]
   2573e:	001a      	movs	r2, r3
   25740:	47a0      	blx	r4
}
   25742:	e006      	b.n	25752 <m2m_ip_cb+0x532>
	{
   25744:	46c0      	nop			; (mov r8, r8)
   25746:	e004      	b.n	25752 <m2m_ip_cb+0x532>
	{
   25748:	46c0      	nop			; (mov r8, r8)
   2574a:	e002      	b.n	25752 <m2m_ip_cb+0x532>
	{
   2574c:	46c0      	nop			; (mov r8, r8)
   2574e:	e000      	b.n	25752 <m2m_ip_cb+0x532>
	{
   25750:	46c0      	nop			; (mov r8, r8)
}
   25752:	46c0      	nop			; (mov r8, r8)
   25754:	46bd      	mov	sp, r7
   25756:	b039      	add	sp, #228	; 0xe4
   25758:	bd90      	pop	{r4, r7, pc}
   2575a:	46c0      	nop			; (mov r8, r8)
   2575c:	00021a1d 	.word	0x00021a1d
   25760:	20005690 	.word	0x20005690
   25764:	00025025 	.word	0x00025025
   25768:	20005740 	.word	0x20005740
   2576c:	20005744 	.word	0x20005744

00025770 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   25770:	b580      	push	{r7, lr}
   25772:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   25774:	4b0c      	ldr	r3, [pc, #48]	; (257a8 <socketInit+0x38>)
   25776:	781b      	ldrb	r3, [r3, #0]
   25778:	b2db      	uxtb	r3, r3
   2577a:	2b00      	cmp	r3, #0
   2577c:	d110      	bne.n	257a0 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2577e:	4b0b      	ldr	r3, [pc, #44]	; (257ac <socketInit+0x3c>)
   25780:	22b0      	movs	r2, #176	; 0xb0
   25782:	2100      	movs	r1, #0
   25784:	0018      	movs	r0, r3
   25786:	4b0a      	ldr	r3, [pc, #40]	; (257b0 <socketInit+0x40>)
   25788:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2578a:	4b0a      	ldr	r3, [pc, #40]	; (257b4 <socketInit+0x44>)
   2578c:	0019      	movs	r1, r3
   2578e:	2002      	movs	r0, #2
   25790:	4b09      	ldr	r3, [pc, #36]	; (257b8 <socketInit+0x48>)
   25792:	4798      	blx	r3
		gbSocketInit	= 1;
   25794:	4b04      	ldr	r3, [pc, #16]	; (257a8 <socketInit+0x38>)
   25796:	2201      	movs	r2, #1
   25798:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2579a:	4b08      	ldr	r3, [pc, #32]	; (257bc <socketInit+0x4c>)
   2579c:	2200      	movs	r2, #0
   2579e:	801a      	strh	r2, [r3, #0]
	}
}
   257a0:	46c0      	nop			; (mov r8, r8)
   257a2:	46bd      	mov	sp, r7
   257a4:	bd80      	pop	{r7, pc}
   257a6:	46c0      	nop			; (mov r8, r8)
   257a8:	20003ea4 	.word	0x20003ea4
   257ac:	20005690 	.word	0x20005690
   257b0:	00020ea1 	.word	0x00020ea1
   257b4:	00025221 	.word	0x00025221
   257b8:	00021b9d 	.word	0x00021b9d
   257bc:	20003ea2 	.word	0x20003ea2

000257c0 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   257c0:	b580      	push	{r7, lr}
   257c2:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   257c4:	4b0a      	ldr	r3, [pc, #40]	; (257f0 <socketDeinit+0x30>)
   257c6:	22b0      	movs	r2, #176	; 0xb0
   257c8:	2100      	movs	r1, #0
   257ca:	0018      	movs	r0, r3
   257cc:	4b09      	ldr	r3, [pc, #36]	; (257f4 <socketDeinit+0x34>)
   257ce:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   257d0:	2100      	movs	r1, #0
   257d2:	2002      	movs	r0, #2
   257d4:	4b08      	ldr	r3, [pc, #32]	; (257f8 <socketDeinit+0x38>)
   257d6:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   257d8:	4b08      	ldr	r3, [pc, #32]	; (257fc <socketDeinit+0x3c>)
   257da:	2200      	movs	r2, #0
   257dc:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   257de:	4b08      	ldr	r3, [pc, #32]	; (25800 <socketDeinit+0x40>)
   257e0:	2200      	movs	r2, #0
   257e2:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   257e4:	4b07      	ldr	r3, [pc, #28]	; (25804 <socketDeinit+0x44>)
   257e6:	2200      	movs	r2, #0
   257e8:	701a      	strb	r2, [r3, #0]
}
   257ea:	46c0      	nop			; (mov r8, r8)
   257ec:	46bd      	mov	sp, r7
   257ee:	bd80      	pop	{r7, pc}
   257f0:	20005690 	.word	0x20005690
   257f4:	00020ea1 	.word	0x00020ea1
   257f8:	00021b9d 	.word	0x00021b9d
   257fc:	20005740 	.word	0x20005740
   25800:	20005748 	.word	0x20005748
   25804:	20003ea4 	.word	0x20003ea4

00025808 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   25808:	b580      	push	{r7, lr}
   2580a:	b082      	sub	sp, #8
   2580c:	af00      	add	r7, sp, #0
   2580e:	6078      	str	r0, [r7, #4]
   25810:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   25812:	4b05      	ldr	r3, [pc, #20]	; (25828 <registerSocketCallback+0x20>)
   25814:	687a      	ldr	r2, [r7, #4]
   25816:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   25818:	4b04      	ldr	r3, [pc, #16]	; (2582c <registerSocketCallback+0x24>)
   2581a:	683a      	ldr	r2, [r7, #0]
   2581c:	601a      	str	r2, [r3, #0]
}
   2581e:	46c0      	nop			; (mov r8, r8)
   25820:	46bd      	mov	sp, r7
   25822:	b002      	add	sp, #8
   25824:	bd80      	pop	{r7, pc}
   25826:	46c0      	nop			; (mov r8, r8)
   25828:	20005740 	.word	0x20005740
   2582c:	20005748 	.word	0x20005748

00025830 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   25830:	b590      	push	{r4, r7, lr}
   25832:	b08d      	sub	sp, #52	; 0x34
   25834:	af04      	add	r7, sp, #16
   25836:	0004      	movs	r4, r0
   25838:	0008      	movs	r0, r1
   2583a:	0011      	movs	r1, r2
   2583c:	1dbb      	adds	r3, r7, #6
   2583e:	1c22      	adds	r2, r4, #0
   25840:	801a      	strh	r2, [r3, #0]
   25842:	1d7b      	adds	r3, r7, #5
   25844:	1c02      	adds	r2, r0, #0
   25846:	701a      	strb	r2, [r3, #0]
   25848:	1d3b      	adds	r3, r7, #4
   2584a:	1c0a      	adds	r2, r1, #0
   2584c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   2584e:	231f      	movs	r3, #31
   25850:	18fb      	adds	r3, r7, r3
   25852:	22ff      	movs	r2, #255	; 0xff
   25854:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   25856:	1dbb      	adds	r3, r7, #6
   25858:	881b      	ldrh	r3, [r3, #0]
   2585a:	2b02      	cmp	r3, #2
   2585c:	d000      	beq.n	25860 <socket+0x30>
   2585e:	e0ce      	b.n	259fe <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   25860:	1d7b      	adds	r3, r7, #5
   25862:	781b      	ldrb	r3, [r3, #0]
   25864:	2b01      	cmp	r3, #1
   25866:	d135      	bne.n	258d4 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   25868:	231e      	movs	r3, #30
   2586a:	18fb      	adds	r3, r7, r3
   2586c:	2200      	movs	r2, #0
   2586e:	701a      	strb	r2, [r3, #0]
   25870:	e02a      	b.n	258c8 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   25872:	2317      	movs	r3, #23
   25874:	18fb      	adds	r3, r7, r3
   25876:	4a66      	ldr	r2, [pc, #408]	; (25a10 <socket+0x1e0>)
   25878:	7812      	ldrb	r2, [r2, #0]
   2587a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   2587c:	4b64      	ldr	r3, [pc, #400]	; (25a10 <socket+0x1e0>)
   2587e:	781b      	ldrb	r3, [r3, #0]
   25880:	b2db      	uxtb	r3, r3
   25882:	011a      	lsls	r2, r3, #4
   25884:	4b63      	ldr	r3, [pc, #396]	; (25a14 <socket+0x1e4>)
   25886:	18d3      	adds	r3, r2, r3
   25888:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2588a:	4b61      	ldr	r3, [pc, #388]	; (25a10 <socket+0x1e0>)
   2588c:	781b      	ldrb	r3, [r3, #0]
   2588e:	b2db      	uxtb	r3, r3
   25890:	1c5a      	adds	r2, r3, #1
   25892:	4b61      	ldr	r3, [pc, #388]	; (25a18 <socket+0x1e8>)
   25894:	2107      	movs	r1, #7
   25896:	0010      	movs	r0, r2
   25898:	4798      	blx	r3
   2589a:	000b      	movs	r3, r1
   2589c:	b2da      	uxtb	r2, r3
   2589e:	4b5c      	ldr	r3, [pc, #368]	; (25a10 <socket+0x1e0>)
   258a0:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   258a2:	69bb      	ldr	r3, [r7, #24]
   258a4:	7a9b      	ldrb	r3, [r3, #10]
   258a6:	b2db      	uxtb	r3, r3
   258a8:	2b00      	cmp	r3, #0
   258aa:	d106      	bne.n	258ba <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   258ac:	231f      	movs	r3, #31
   258ae:	18fb      	adds	r3, r7, r3
   258b0:	2217      	movs	r2, #23
   258b2:	18ba      	adds	r2, r7, r2
   258b4:	7812      	ldrb	r2, [r2, #0]
   258b6:	701a      	strb	r2, [r3, #0]
					break;
   258b8:	e04c      	b.n	25954 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   258ba:	231e      	movs	r3, #30
   258bc:	18fb      	adds	r3, r7, r3
   258be:	781a      	ldrb	r2, [r3, #0]
   258c0:	231e      	movs	r3, #30
   258c2:	18fb      	adds	r3, r7, r3
   258c4:	3201      	adds	r2, #1
   258c6:	701a      	strb	r2, [r3, #0]
   258c8:	231e      	movs	r3, #30
   258ca:	18fb      	adds	r3, r7, r3
   258cc:	781b      	ldrb	r3, [r3, #0]
   258ce:	2b06      	cmp	r3, #6
   258d0:	d9cf      	bls.n	25872 <socket+0x42>
   258d2:	e03f      	b.n	25954 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   258d4:	1d7b      	adds	r3, r7, #5
   258d6:	781b      	ldrb	r3, [r3, #0]
   258d8:	2b02      	cmp	r3, #2
   258da:	d13b      	bne.n	25954 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   258dc:	4b4f      	ldr	r3, [pc, #316]	; (25a1c <socket+0x1ec>)
   258de:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   258e0:	231e      	movs	r3, #30
   258e2:	18fb      	adds	r3, r7, r3
   258e4:	2200      	movs	r2, #0
   258e6:	701a      	strb	r2, [r3, #0]
   258e8:	e02f      	b.n	2594a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   258ea:	2317      	movs	r3, #23
   258ec:	18fb      	adds	r3, r7, r3
   258ee:	4a4c      	ldr	r2, [pc, #304]	; (25a20 <socket+0x1f0>)
   258f0:	7812      	ldrb	r2, [r2, #0]
   258f2:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   258f4:	4b4a      	ldr	r3, [pc, #296]	; (25a20 <socket+0x1f0>)
   258f6:	781b      	ldrb	r3, [r3, #0]
   258f8:	b2db      	uxtb	r3, r3
   258fa:	011b      	lsls	r3, r3, #4
   258fc:	693a      	ldr	r2, [r7, #16]
   258fe:	18d3      	adds	r3, r2, r3
   25900:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   25902:	4b47      	ldr	r3, [pc, #284]	; (25a20 <socket+0x1f0>)
   25904:	781b      	ldrb	r3, [r3, #0]
   25906:	b2db      	uxtb	r3, r3
   25908:	3301      	adds	r3, #1
   2590a:	4a46      	ldr	r2, [pc, #280]	; (25a24 <socket+0x1f4>)
   2590c:	4013      	ands	r3, r2
   2590e:	d504      	bpl.n	2591a <socket+0xea>
   25910:	3b01      	subs	r3, #1
   25912:	2204      	movs	r2, #4
   25914:	4252      	negs	r2, r2
   25916:	4313      	orrs	r3, r2
   25918:	3301      	adds	r3, #1
   2591a:	b2da      	uxtb	r2, r3
   2591c:	4b40      	ldr	r3, [pc, #256]	; (25a20 <socket+0x1f0>)
   2591e:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   25920:	69bb      	ldr	r3, [r7, #24]
   25922:	7a9b      	ldrb	r3, [r3, #10]
   25924:	b2db      	uxtb	r3, r3
   25926:	2b00      	cmp	r3, #0
   25928:	d108      	bne.n	2593c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   2592a:	2317      	movs	r3, #23
   2592c:	18fb      	adds	r3, r7, r3
   2592e:	781b      	ldrb	r3, [r3, #0]
   25930:	3307      	adds	r3, #7
   25932:	b2da      	uxtb	r2, r3
   25934:	231f      	movs	r3, #31
   25936:	18fb      	adds	r3, r7, r3
   25938:	701a      	strb	r2, [r3, #0]
					break;
   2593a:	e00b      	b.n	25954 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2593c:	231e      	movs	r3, #30
   2593e:	18fb      	adds	r3, r7, r3
   25940:	781a      	ldrb	r2, [r3, #0]
   25942:	231e      	movs	r3, #30
   25944:	18fb      	adds	r3, r7, r3
   25946:	3201      	adds	r2, #1
   25948:	701a      	strb	r2, [r3, #0]
   2594a:	231e      	movs	r3, #30
   2594c:	18fb      	adds	r3, r7, r3
   2594e:	781b      	ldrb	r3, [r3, #0]
   25950:	2b03      	cmp	r3, #3
   25952:	d9ca      	bls.n	258ea <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   25954:	231f      	movs	r3, #31
   25956:	18fb      	adds	r3, r7, r3
   25958:	781b      	ldrb	r3, [r3, #0]
   2595a:	2b7f      	cmp	r3, #127	; 0x7f
   2595c:	d84f      	bhi.n	259fe <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2595e:	69bb      	ldr	r3, [r7, #24]
   25960:	2210      	movs	r2, #16
   25962:	2100      	movs	r1, #0
   25964:	0018      	movs	r0, r3
   25966:	4b30      	ldr	r3, [pc, #192]	; (25a28 <socket+0x1f8>)
   25968:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2596a:	69bb      	ldr	r3, [r7, #24]
   2596c:	2201      	movs	r2, #1
   2596e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   25970:	4b2e      	ldr	r3, [pc, #184]	; (25a2c <socket+0x1fc>)
   25972:	881b      	ldrh	r3, [r3, #0]
   25974:	b29b      	uxth	r3, r3
   25976:	3301      	adds	r3, #1
   25978:	b29a      	uxth	r2, r3
   2597a:	4b2c      	ldr	r3, [pc, #176]	; (25a2c <socket+0x1fc>)
   2597c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2597e:	4b2b      	ldr	r3, [pc, #172]	; (25a2c <socket+0x1fc>)
   25980:	881b      	ldrh	r3, [r3, #0]
   25982:	b29b      	uxth	r3, r3
   25984:	2b00      	cmp	r3, #0
   25986:	d106      	bne.n	25996 <socket+0x166>
				++gu16SessionID;
   25988:	4b28      	ldr	r3, [pc, #160]	; (25a2c <socket+0x1fc>)
   2598a:	881b      	ldrh	r3, [r3, #0]
   2598c:	b29b      	uxth	r3, r3
   2598e:	3301      	adds	r3, #1
   25990:	b29a      	uxth	r2, r3
   25992:	4b26      	ldr	r3, [pc, #152]	; (25a2c <socket+0x1fc>)
   25994:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   25996:	4b25      	ldr	r3, [pc, #148]	; (25a2c <socket+0x1fc>)
   25998:	881b      	ldrh	r3, [r3, #0]
   2599a:	b29a      	uxth	r2, r3
   2599c:	69bb      	ldr	r3, [r7, #24]
   2599e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   259a0:	4b23      	ldr	r3, [pc, #140]	; (25a30 <socket+0x200>)
   259a2:	0018      	movs	r0, r3
   259a4:	4b23      	ldr	r3, [pc, #140]	; (25a34 <socket+0x204>)
   259a6:	4798      	blx	r3
   259a8:	231f      	movs	r3, #31
   259aa:	18fb      	adds	r3, r7, r3
   259ac:	2100      	movs	r1, #0
   259ae:	5659      	ldrsb	r1, [r3, r1]
   259b0:	4b1e      	ldr	r3, [pc, #120]	; (25a2c <socket+0x1fc>)
   259b2:	881b      	ldrh	r3, [r3, #0]
   259b4:	b29b      	uxth	r3, r3
   259b6:	001a      	movs	r2, r3
   259b8:	4b1f      	ldr	r3, [pc, #124]	; (25a38 <socket+0x208>)
   259ba:	0018      	movs	r0, r3
   259bc:	4b1d      	ldr	r3, [pc, #116]	; (25a34 <socket+0x204>)
   259be:	4798      	blx	r3
   259c0:	4b1e      	ldr	r3, [pc, #120]	; (25a3c <socket+0x20c>)
   259c2:	0018      	movs	r0, r3
   259c4:	4b1b      	ldr	r3, [pc, #108]	; (25a34 <socket+0x204>)
   259c6:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   259c8:	1d3b      	adds	r3, r7, #4
   259ca:	781b      	ldrb	r3, [r3, #0]
   259cc:	2201      	movs	r2, #1
   259ce:	4013      	ands	r3, r2
   259d0:	d015      	beq.n	259fe <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   259d2:	230c      	movs	r3, #12
   259d4:	18fb      	adds	r3, r7, r3
   259d6:	221f      	movs	r2, #31
   259d8:	18ba      	adds	r2, r7, r2
   259da:	7812      	ldrb	r2, [r2, #0]
   259dc:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   259de:	69bb      	ldr	r3, [r7, #24]
   259e0:	2221      	movs	r2, #33	; 0x21
   259e2:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   259e4:	230c      	movs	r3, #12
   259e6:	18fa      	adds	r2, r7, r3
   259e8:	2300      	movs	r3, #0
   259ea:	9302      	str	r3, [sp, #8]
   259ec:	2300      	movs	r3, #0
   259ee:	9301      	str	r3, [sp, #4]
   259f0:	2300      	movs	r3, #0
   259f2:	9300      	str	r3, [sp, #0]
   259f4:	2304      	movs	r3, #4
   259f6:	2150      	movs	r1, #80	; 0x50
   259f8:	2002      	movs	r0, #2
   259fa:	4c11      	ldr	r4, [pc, #68]	; (25a40 <socket+0x210>)
   259fc:	47a0      	blx	r4
			}
		}
	}
	return sock;
   259fe:	231f      	movs	r3, #31
   25a00:	18fb      	adds	r3, r7, r3
   25a02:	781b      	ldrb	r3, [r3, #0]
   25a04:	b25b      	sxtb	r3, r3
}
   25a06:	0018      	movs	r0, r3
   25a08:	46bd      	mov	sp, r7
   25a0a:	b009      	add	sp, #36	; 0x24
   25a0c:	bd90      	pop	{r4, r7, pc}
   25a0e:	46c0      	nop			; (mov r8, r8)
   25a10:	20003ea5 	.word	0x20003ea5
   25a14:	20005690 	.word	0x20005690
   25a18:	00032f45 	.word	0x00032f45
   25a1c:	20005700 	.word	0x20005700
   25a20:	20003ea6 	.word	0x20003ea6
   25a24:	80000003 	.word	0x80000003
   25a28:	00020ea1 	.word	0x00020ea1
   25a2c:	20003ea2 	.word	0x20003ea2
   25a30:	00039524 	.word	0x00039524
   25a34:	0001e529 	.word	0x0001e529
   25a38:	00039548 	.word	0x00039548
   25a3c:	00039544 	.word	0x00039544
   25a40:	00021101 	.word	0x00021101

00025a44 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   25a44:	b5b0      	push	{r4, r5, r7, lr}
   25a46:	b08a      	sub	sp, #40	; 0x28
   25a48:	af04      	add	r7, sp, #16
   25a4a:	6039      	str	r1, [r7, #0]
   25a4c:	0011      	movs	r1, r2
   25a4e:	1dfb      	adds	r3, r7, #7
   25a50:	1c02      	adds	r2, r0, #0
   25a52:	701a      	strb	r2, [r3, #0]
   25a54:	1dbb      	adds	r3, r7, #6
   25a56:	1c0a      	adds	r2, r1, #0
   25a58:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25a5a:	2317      	movs	r3, #23
   25a5c:	18fb      	adds	r3, r7, r3
   25a5e:	22fa      	movs	r2, #250	; 0xfa
   25a60:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   25a62:	1dfb      	adds	r3, r7, #7
   25a64:	781b      	ldrb	r3, [r3, #0]
   25a66:	2b7f      	cmp	r3, #127	; 0x7f
   25a68:	d867      	bhi.n	25b3a <connect+0xf6>
   25a6a:	683b      	ldr	r3, [r7, #0]
   25a6c:	2b00      	cmp	r3, #0
   25a6e:	d064      	beq.n	25b3a <connect+0xf6>
   25a70:	1dfb      	adds	r3, r7, #7
   25a72:	781b      	ldrb	r3, [r3, #0]
   25a74:	b25b      	sxtb	r3, r3
   25a76:	4a35      	ldr	r2, [pc, #212]	; (25b4c <connect+0x108>)
   25a78:	011b      	lsls	r3, r3, #4
   25a7a:	18d3      	adds	r3, r2, r3
   25a7c:	330a      	adds	r3, #10
   25a7e:	781b      	ldrb	r3, [r3, #0]
   25a80:	b2db      	uxtb	r3, r3
   25a82:	2b01      	cmp	r3, #1
   25a84:	d159      	bne.n	25b3a <connect+0xf6>
   25a86:	1dbb      	adds	r3, r7, #6
   25a88:	781b      	ldrb	r3, [r3, #0]
   25a8a:	2b00      	cmp	r3, #0
   25a8c:	d055      	beq.n	25b3a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   25a8e:	2316      	movs	r3, #22
   25a90:	18fb      	adds	r3, r7, r3
   25a92:	2244      	movs	r2, #68	; 0x44
   25a94:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   25a96:	1dfb      	adds	r3, r7, #7
   25a98:	781b      	ldrb	r3, [r3, #0]
   25a9a:	b25b      	sxtb	r3, r3
   25a9c:	4a2b      	ldr	r2, [pc, #172]	; (25b4c <connect+0x108>)
   25a9e:	011b      	lsls	r3, r3, #4
   25aa0:	18d3      	adds	r3, r2, r3
   25aa2:	330b      	adds	r3, #11
   25aa4:	781b      	ldrb	r3, [r3, #0]
   25aa6:	b2db      	uxtb	r3, r3
   25aa8:	001a      	movs	r2, r3
   25aaa:	2301      	movs	r3, #1
   25aac:	4013      	ands	r3, r2
   25aae:	d00f      	beq.n	25ad0 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   25ab0:	2316      	movs	r3, #22
   25ab2:	18fb      	adds	r3, r7, r3
   25ab4:	224b      	movs	r2, #75	; 0x4b
   25ab6:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   25ab8:	1dfb      	adds	r3, r7, #7
   25aba:	781b      	ldrb	r3, [r3, #0]
   25abc:	b25b      	sxtb	r3, r3
   25abe:	4a23      	ldr	r2, [pc, #140]	; (25b4c <connect+0x108>)
   25ac0:	011b      	lsls	r3, r3, #4
   25ac2:	18d3      	adds	r3, r2, r3
   25ac4:	330b      	adds	r3, #11
   25ac6:	781b      	ldrb	r3, [r3, #0]
   25ac8:	b2da      	uxtb	r2, r3
   25aca:	2308      	movs	r3, #8
   25acc:	18fb      	adds	r3, r7, r3
   25ace:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   25ad0:	2308      	movs	r3, #8
   25ad2:	18fb      	adds	r3, r7, r3
   25ad4:	1dfa      	adds	r2, r7, #7
   25ad6:	7812      	ldrb	r2, [r2, #0]
   25ad8:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   25ada:	6839      	ldr	r1, [r7, #0]
   25adc:	2308      	movs	r3, #8
   25ade:	18fb      	adds	r3, r7, r3
   25ae0:	2208      	movs	r2, #8
   25ae2:	0018      	movs	r0, r3
   25ae4:	4b1a      	ldr	r3, [pc, #104]	; (25b50 <connect+0x10c>)
   25ae6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   25ae8:	1dfb      	adds	r3, r7, #7
   25aea:	781b      	ldrb	r3, [r3, #0]
   25aec:	b25b      	sxtb	r3, r3
   25aee:	4a17      	ldr	r2, [pc, #92]	; (25b4c <connect+0x108>)
   25af0:	011b      	lsls	r3, r3, #4
   25af2:	18d3      	adds	r3, r2, r3
   25af4:	3306      	adds	r3, #6
   25af6:	881b      	ldrh	r3, [r3, #0]
   25af8:	b29a      	uxth	r2, r3
   25afa:	2308      	movs	r3, #8
   25afc:	18fb      	adds	r3, r7, r3
   25afe:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   25b00:	2317      	movs	r3, #23
   25b02:	18fc      	adds	r4, r7, r3
   25b04:	2308      	movs	r3, #8
   25b06:	18fa      	adds	r2, r7, r3
   25b08:	2316      	movs	r3, #22
   25b0a:	18fb      	adds	r3, r7, r3
   25b0c:	7819      	ldrb	r1, [r3, #0]
   25b0e:	2300      	movs	r3, #0
   25b10:	9302      	str	r3, [sp, #8]
   25b12:	2300      	movs	r3, #0
   25b14:	9301      	str	r3, [sp, #4]
   25b16:	2300      	movs	r3, #0
   25b18:	9300      	str	r3, [sp, #0]
   25b1a:	230c      	movs	r3, #12
   25b1c:	2002      	movs	r0, #2
   25b1e:	4d0d      	ldr	r5, [pc, #52]	; (25b54 <connect+0x110>)
   25b20:	47a8      	blx	r5
   25b22:	0003      	movs	r3, r0
   25b24:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25b26:	2317      	movs	r3, #23
   25b28:	18fb      	adds	r3, r7, r3
   25b2a:	781b      	ldrb	r3, [r3, #0]
   25b2c:	b25b      	sxtb	r3, r3
   25b2e:	2b00      	cmp	r3, #0
   25b30:	d003      	beq.n	25b3a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   25b32:	2317      	movs	r3, #23
   25b34:	18fb      	adds	r3, r7, r3
   25b36:	22f7      	movs	r2, #247	; 0xf7
   25b38:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   25b3a:	2317      	movs	r3, #23
   25b3c:	18fb      	adds	r3, r7, r3
   25b3e:	781b      	ldrb	r3, [r3, #0]
   25b40:	b25b      	sxtb	r3, r3
}
   25b42:	0018      	movs	r0, r3
   25b44:	46bd      	mov	sp, r7
   25b46:	b006      	add	sp, #24
   25b48:	bdb0      	pop	{r4, r5, r7, pc}
   25b4a:	46c0      	nop			; (mov r8, r8)
   25b4c:	20005690 	.word	0x20005690
   25b50:	00020e65 	.word	0x00020e65
   25b54:	00021101 	.word	0x00021101

00025b58 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   25b58:	b590      	push	{r4, r7, lr}
   25b5a:	b08f      	sub	sp, #60	; 0x3c
   25b5c:	af04      	add	r7, sp, #16
   25b5e:	0004      	movs	r4, r0
   25b60:	60b9      	str	r1, [r7, #8]
   25b62:	0010      	movs	r0, r2
   25b64:	0019      	movs	r1, r3
   25b66:	230f      	movs	r3, #15
   25b68:	18fb      	adds	r3, r7, r3
   25b6a:	1c22      	adds	r2, r4, #0
   25b6c:	701a      	strb	r2, [r3, #0]
   25b6e:	230c      	movs	r3, #12
   25b70:	18fb      	adds	r3, r7, r3
   25b72:	1c02      	adds	r2, r0, #0
   25b74:	801a      	strh	r2, [r3, #0]
   25b76:	1dbb      	adds	r3, r7, #6
   25b78:	1c0a      	adds	r2, r1, #0
   25b7a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25b7c:	2326      	movs	r3, #38	; 0x26
   25b7e:	18fb      	adds	r3, r7, r3
   25b80:	2206      	movs	r2, #6
   25b82:	4252      	negs	r2, r2
   25b84:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   25b86:	230f      	movs	r3, #15
   25b88:	18fb      	adds	r3, r7, r3
   25b8a:	781b      	ldrb	r3, [r3, #0]
   25b8c:	2b7f      	cmp	r3, #127	; 0x7f
   25b8e:	d900      	bls.n	25b92 <send+0x3a>
   25b90:	e087      	b.n	25ca2 <send+0x14a>
   25b92:	68bb      	ldr	r3, [r7, #8]
   25b94:	2b00      	cmp	r3, #0
   25b96:	d100      	bne.n	25b9a <send+0x42>
   25b98:	e083      	b.n	25ca2 <send+0x14a>
   25b9a:	230c      	movs	r3, #12
   25b9c:	18fb      	adds	r3, r7, r3
   25b9e:	881a      	ldrh	r2, [r3, #0]
   25ba0:	23af      	movs	r3, #175	; 0xaf
   25ba2:	00db      	lsls	r3, r3, #3
   25ba4:	429a      	cmp	r2, r3
   25ba6:	d900      	bls.n	25baa <send+0x52>
   25ba8:	e07b      	b.n	25ca2 <send+0x14a>
   25baa:	230f      	movs	r3, #15
   25bac:	18fb      	adds	r3, r7, r3
   25bae:	781b      	ldrb	r3, [r3, #0]
   25bb0:	b25b      	sxtb	r3, r3
   25bb2:	4a40      	ldr	r2, [pc, #256]	; (25cb4 <send+0x15c>)
   25bb4:	011b      	lsls	r3, r3, #4
   25bb6:	18d3      	adds	r3, r2, r3
   25bb8:	330a      	adds	r3, #10
   25bba:	781b      	ldrb	r3, [r3, #0]
   25bbc:	b2db      	uxtb	r3, r3
   25bbe:	2b01      	cmp	r3, #1
   25bc0:	d16f      	bne.n	25ca2 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   25bc2:	2323      	movs	r3, #35	; 0x23
   25bc4:	18fb      	adds	r3, r7, r3
   25bc6:	2245      	movs	r2, #69	; 0x45
   25bc8:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   25bca:	2324      	movs	r3, #36	; 0x24
   25bcc:	18fb      	adds	r3, r7, r3
   25bce:	2250      	movs	r2, #80	; 0x50
   25bd0:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   25bd2:	2310      	movs	r3, #16
   25bd4:	18fb      	adds	r3, r7, r3
   25bd6:	220f      	movs	r2, #15
   25bd8:	18ba      	adds	r2, r7, r2
   25bda:	7812      	ldrb	r2, [r2, #0]
   25bdc:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   25bde:	2310      	movs	r3, #16
   25be0:	18fb      	adds	r3, r7, r3
   25be2:	220c      	movs	r2, #12
   25be4:	18ba      	adds	r2, r7, r2
   25be6:	8812      	ldrh	r2, [r2, #0]
   25be8:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   25bea:	230f      	movs	r3, #15
   25bec:	18fb      	adds	r3, r7, r3
   25bee:	781b      	ldrb	r3, [r3, #0]
   25bf0:	b25b      	sxtb	r3, r3
   25bf2:	4a30      	ldr	r2, [pc, #192]	; (25cb4 <send+0x15c>)
   25bf4:	011b      	lsls	r3, r3, #4
   25bf6:	18d3      	adds	r3, r2, r3
   25bf8:	3306      	adds	r3, #6
   25bfa:	881b      	ldrh	r3, [r3, #0]
   25bfc:	b29a      	uxth	r2, r3
   25bfe:	2310      	movs	r3, #16
   25c00:	18fb      	adds	r3, r7, r3
   25c02:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   25c04:	230f      	movs	r3, #15
   25c06:	18fb      	adds	r3, r7, r3
   25c08:	781b      	ldrb	r3, [r3, #0]
   25c0a:	b25b      	sxtb	r3, r3
   25c0c:	2b06      	cmp	r3, #6
   25c0e:	dd03      	ble.n	25c18 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   25c10:	2324      	movs	r3, #36	; 0x24
   25c12:	18fb      	adds	r3, r7, r3
   25c14:	2244      	movs	r2, #68	; 0x44
   25c16:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25c18:	230f      	movs	r3, #15
   25c1a:	18fb      	adds	r3, r7, r3
   25c1c:	781b      	ldrb	r3, [r3, #0]
   25c1e:	b25b      	sxtb	r3, r3
   25c20:	4a24      	ldr	r2, [pc, #144]	; (25cb4 <send+0x15c>)
   25c22:	011b      	lsls	r3, r3, #4
   25c24:	18d3      	adds	r3, r2, r3
   25c26:	330b      	adds	r3, #11
   25c28:	781b      	ldrb	r3, [r3, #0]
   25c2a:	b2db      	uxtb	r3, r3
   25c2c:	001a      	movs	r2, r3
   25c2e:	2301      	movs	r3, #1
   25c30:	4013      	ands	r3, r2
   25c32:	d00f      	beq.n	25c54 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   25c34:	2323      	movs	r3, #35	; 0x23
   25c36:	18fb      	adds	r3, r7, r3
   25c38:	224c      	movs	r2, #76	; 0x4c
   25c3a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   25c3c:	230f      	movs	r3, #15
   25c3e:	18fb      	adds	r3, r7, r3
   25c40:	2200      	movs	r2, #0
   25c42:	569a      	ldrsb	r2, [r3, r2]
   25c44:	2324      	movs	r3, #36	; 0x24
   25c46:	18fb      	adds	r3, r7, r3
   25c48:	491a      	ldr	r1, [pc, #104]	; (25cb4 <send+0x15c>)
   25c4a:	0112      	lsls	r2, r2, #4
   25c4c:	188a      	adds	r2, r1, r2
   25c4e:	3208      	adds	r2, #8
   25c50:	8812      	ldrh	r2, [r2, #0]
   25c52:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   25c54:	2323      	movs	r3, #35	; 0x23
   25c56:	18fb      	adds	r3, r7, r3
   25c58:	781b      	ldrb	r3, [r3, #0]
   25c5a:	2280      	movs	r2, #128	; 0x80
   25c5c:	4252      	negs	r2, r2
   25c5e:	4313      	orrs	r3, r2
   25c60:	b2d9      	uxtb	r1, r3
   25c62:	2310      	movs	r3, #16
   25c64:	18fa      	adds	r2, r7, r3
   25c66:	2324      	movs	r3, #36	; 0x24
   25c68:	18fb      	adds	r3, r7, r3
   25c6a:	881b      	ldrh	r3, [r3, #0]
   25c6c:	9302      	str	r3, [sp, #8]
   25c6e:	230c      	movs	r3, #12
   25c70:	18fb      	adds	r3, r7, r3
   25c72:	881b      	ldrh	r3, [r3, #0]
   25c74:	9301      	str	r3, [sp, #4]
   25c76:	68bb      	ldr	r3, [r7, #8]
   25c78:	9300      	str	r3, [sp, #0]
   25c7a:	2310      	movs	r3, #16
   25c7c:	2002      	movs	r0, #2
   25c7e:	4c0e      	ldr	r4, [pc, #56]	; (25cb8 <send+0x160>)
   25c80:	47a0      	blx	r4
   25c82:	0003      	movs	r3, r0
   25c84:	001a      	movs	r2, r3
   25c86:	2326      	movs	r3, #38	; 0x26
   25c88:	18fb      	adds	r3, r7, r3
   25c8a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   25c8c:	2326      	movs	r3, #38	; 0x26
   25c8e:	18fb      	adds	r3, r7, r3
   25c90:	2200      	movs	r2, #0
   25c92:	5e9b      	ldrsh	r3, [r3, r2]
   25c94:	2b00      	cmp	r3, #0
   25c96:	d004      	beq.n	25ca2 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   25c98:	2326      	movs	r3, #38	; 0x26
   25c9a:	18fb      	adds	r3, r7, r3
   25c9c:	220e      	movs	r2, #14
   25c9e:	4252      	negs	r2, r2
   25ca0:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   25ca2:	2326      	movs	r3, #38	; 0x26
   25ca4:	18fb      	adds	r3, r7, r3
   25ca6:	2200      	movs	r2, #0
   25ca8:	5e9b      	ldrsh	r3, [r3, r2]
}
   25caa:	0018      	movs	r0, r3
   25cac:	46bd      	mov	sp, r7
   25cae:	b00b      	add	sp, #44	; 0x2c
   25cb0:	bd90      	pop	{r4, r7, pc}
   25cb2:	46c0      	nop			; (mov r8, r8)
   25cb4:	20005690 	.word	0x20005690
   25cb8:	00021101 	.word	0x00021101

00025cbc <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   25cbc:	b590      	push	{r4, r7, lr}
   25cbe:	b08d      	sub	sp, #52	; 0x34
   25cc0:	af04      	add	r7, sp, #16
   25cc2:	60b9      	str	r1, [r7, #8]
   25cc4:	0011      	movs	r1, r2
   25cc6:	607b      	str	r3, [r7, #4]
   25cc8:	230f      	movs	r3, #15
   25cca:	18fb      	adds	r3, r7, r3
   25ccc:	1c02      	adds	r2, r0, #0
   25cce:	701a      	strb	r2, [r3, #0]
   25cd0:	230c      	movs	r3, #12
   25cd2:	18fb      	adds	r3, r7, r3
   25cd4:	1c0a      	adds	r2, r1, #0
   25cd6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   25cd8:	231e      	movs	r3, #30
   25cda:	18fb      	adds	r3, r7, r3
   25cdc:	2206      	movs	r2, #6
   25cde:	4252      	negs	r2, r2
   25ce0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   25ce2:	230f      	movs	r3, #15
   25ce4:	18fb      	adds	r3, r7, r3
   25ce6:	781b      	ldrb	r3, [r3, #0]
   25ce8:	2b7f      	cmp	r3, #127	; 0x7f
   25cea:	d900      	bls.n	25cee <recv+0x32>
   25cec:	e099      	b.n	25e22 <recv+0x166>
   25cee:	68bb      	ldr	r3, [r7, #8]
   25cf0:	2b00      	cmp	r3, #0
   25cf2:	d100      	bne.n	25cf6 <recv+0x3a>
   25cf4:	e095      	b.n	25e22 <recv+0x166>
   25cf6:	230c      	movs	r3, #12
   25cf8:	18fb      	adds	r3, r7, r3
   25cfa:	881b      	ldrh	r3, [r3, #0]
   25cfc:	2b00      	cmp	r3, #0
   25cfe:	d100      	bne.n	25d02 <recv+0x46>
   25d00:	e08f      	b.n	25e22 <recv+0x166>
   25d02:	230f      	movs	r3, #15
   25d04:	18fb      	adds	r3, r7, r3
   25d06:	781b      	ldrb	r3, [r3, #0]
   25d08:	b25b      	sxtb	r3, r3
   25d0a:	4a4a      	ldr	r2, [pc, #296]	; (25e34 <recv+0x178>)
   25d0c:	011b      	lsls	r3, r3, #4
   25d0e:	18d3      	adds	r3, r2, r3
   25d10:	330a      	adds	r3, #10
   25d12:	781b      	ldrb	r3, [r3, #0]
   25d14:	b2db      	uxtb	r3, r3
   25d16:	2b01      	cmp	r3, #1
   25d18:	d000      	beq.n	25d1c <recv+0x60>
   25d1a:	e082      	b.n	25e22 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   25d1c:	231e      	movs	r3, #30
   25d1e:	18fb      	adds	r3, r7, r3
   25d20:	2200      	movs	r2, #0
   25d22:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   25d24:	230f      	movs	r3, #15
   25d26:	18fb      	adds	r3, r7, r3
   25d28:	2200      	movs	r2, #0
   25d2a:	569a      	ldrsb	r2, [r3, r2]
   25d2c:	4b41      	ldr	r3, [pc, #260]	; (25e34 <recv+0x178>)
   25d2e:	0112      	lsls	r2, r2, #4
   25d30:	68b9      	ldr	r1, [r7, #8]
   25d32:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   25d34:	230f      	movs	r3, #15
   25d36:	18fb      	adds	r3, r7, r3
   25d38:	781b      	ldrb	r3, [r3, #0]
   25d3a:	b25b      	sxtb	r3, r3
   25d3c:	4a3d      	ldr	r2, [pc, #244]	; (25e34 <recv+0x178>)
   25d3e:	011b      	lsls	r3, r3, #4
   25d40:	18d3      	adds	r3, r2, r3
   25d42:	3304      	adds	r3, #4
   25d44:	220c      	movs	r2, #12
   25d46:	18ba      	adds	r2, r7, r2
   25d48:	8812      	ldrh	r2, [r2, #0]
   25d4a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   25d4c:	230f      	movs	r3, #15
   25d4e:	18fb      	adds	r3, r7, r3
   25d50:	781b      	ldrb	r3, [r3, #0]
   25d52:	b25b      	sxtb	r3, r3
   25d54:	4a37      	ldr	r2, [pc, #220]	; (25e34 <recv+0x178>)
   25d56:	011b      	lsls	r3, r3, #4
   25d58:	18d3      	adds	r3, r2, r3
   25d5a:	330c      	adds	r3, #12
   25d5c:	781b      	ldrb	r3, [r3, #0]
   25d5e:	b2db      	uxtb	r3, r3
   25d60:	2b00      	cmp	r3, #0
   25d62:	d15e      	bne.n	25e22 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   25d64:	231d      	movs	r3, #29
   25d66:	18fb      	adds	r3, r7, r3
   25d68:	2246      	movs	r2, #70	; 0x46
   25d6a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   25d6c:	230f      	movs	r3, #15
   25d6e:	18fb      	adds	r3, r7, r3
   25d70:	781b      	ldrb	r3, [r3, #0]
   25d72:	b25b      	sxtb	r3, r3
   25d74:	4a2f      	ldr	r2, [pc, #188]	; (25e34 <recv+0x178>)
   25d76:	011b      	lsls	r3, r3, #4
   25d78:	18d3      	adds	r3, r2, r3
   25d7a:	330c      	adds	r3, #12
   25d7c:	2201      	movs	r2, #1
   25d7e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25d80:	230f      	movs	r3, #15
   25d82:	18fb      	adds	r3, r7, r3
   25d84:	781b      	ldrb	r3, [r3, #0]
   25d86:	b25b      	sxtb	r3, r3
   25d88:	4a2a      	ldr	r2, [pc, #168]	; (25e34 <recv+0x178>)
   25d8a:	011b      	lsls	r3, r3, #4
   25d8c:	18d3      	adds	r3, r2, r3
   25d8e:	330b      	adds	r3, #11
   25d90:	781b      	ldrb	r3, [r3, #0]
   25d92:	b2db      	uxtb	r3, r3
   25d94:	001a      	movs	r2, r3
   25d96:	2301      	movs	r3, #1
   25d98:	4013      	ands	r3, r2
   25d9a:	d003      	beq.n	25da4 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   25d9c:	231d      	movs	r3, #29
   25d9e:	18fb      	adds	r3, r7, r3
   25da0:	224d      	movs	r2, #77	; 0x4d
   25da2:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   25da4:	687b      	ldr	r3, [r7, #4]
   25da6:	2b00      	cmp	r3, #0
   25da8:	d105      	bne.n	25db6 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   25daa:	2314      	movs	r3, #20
   25dac:	18fb      	adds	r3, r7, r3
   25dae:	2201      	movs	r2, #1
   25db0:	4252      	negs	r2, r2
   25db2:	601a      	str	r2, [r3, #0]
   25db4:	e003      	b.n	25dbe <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   25db6:	2314      	movs	r3, #20
   25db8:	18fb      	adds	r3, r7, r3
   25dba:	687a      	ldr	r2, [r7, #4]
   25dbc:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   25dbe:	2314      	movs	r3, #20
   25dc0:	18fb      	adds	r3, r7, r3
   25dc2:	220f      	movs	r2, #15
   25dc4:	18ba      	adds	r2, r7, r2
   25dc6:	7812      	ldrb	r2, [r2, #0]
   25dc8:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   25dca:	230f      	movs	r3, #15
   25dcc:	18fb      	adds	r3, r7, r3
   25dce:	781b      	ldrb	r3, [r3, #0]
   25dd0:	b25b      	sxtb	r3, r3
   25dd2:	4a18      	ldr	r2, [pc, #96]	; (25e34 <recv+0x178>)
   25dd4:	011b      	lsls	r3, r3, #4
   25dd6:	18d3      	adds	r3, r2, r3
   25dd8:	3306      	adds	r3, #6
   25dda:	881b      	ldrh	r3, [r3, #0]
   25ddc:	b29a      	uxth	r2, r3
   25dde:	2314      	movs	r3, #20
   25de0:	18fb      	adds	r3, r7, r3
   25de2:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   25de4:	2314      	movs	r3, #20
   25de6:	18fa      	adds	r2, r7, r3
   25de8:	231d      	movs	r3, #29
   25dea:	18fb      	adds	r3, r7, r3
   25dec:	7819      	ldrb	r1, [r3, #0]
   25dee:	2300      	movs	r3, #0
   25df0:	9302      	str	r3, [sp, #8]
   25df2:	2300      	movs	r3, #0
   25df4:	9301      	str	r3, [sp, #4]
   25df6:	2300      	movs	r3, #0
   25df8:	9300      	str	r3, [sp, #0]
   25dfa:	2308      	movs	r3, #8
   25dfc:	2002      	movs	r0, #2
   25dfe:	4c0e      	ldr	r4, [pc, #56]	; (25e38 <recv+0x17c>)
   25e00:	47a0      	blx	r4
   25e02:	0003      	movs	r3, r0
   25e04:	001a      	movs	r2, r3
   25e06:	231e      	movs	r3, #30
   25e08:	18fb      	adds	r3, r7, r3
   25e0a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   25e0c:	231e      	movs	r3, #30
   25e0e:	18fb      	adds	r3, r7, r3
   25e10:	2200      	movs	r2, #0
   25e12:	5e9b      	ldrsh	r3, [r3, r2]
   25e14:	2b00      	cmp	r3, #0
   25e16:	d004      	beq.n	25e22 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   25e18:	231e      	movs	r3, #30
   25e1a:	18fb      	adds	r3, r7, r3
   25e1c:	220e      	movs	r2, #14
   25e1e:	4252      	negs	r2, r2
   25e20:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   25e22:	231e      	movs	r3, #30
   25e24:	18fb      	adds	r3, r7, r3
   25e26:	2200      	movs	r2, #0
   25e28:	5e9b      	ldrsh	r3, [r3, r2]
}
   25e2a:	0018      	movs	r0, r3
   25e2c:	46bd      	mov	sp, r7
   25e2e:	b009      	add	sp, #36	; 0x24
   25e30:	bd90      	pop	{r4, r7, pc}
   25e32:	46c0      	nop			; (mov r8, r8)
   25e34:	20005690 	.word	0x20005690
   25e38:	00021101 	.word	0x00021101

00025e3c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   25e3c:	b5b0      	push	{r4, r5, r7, lr}
   25e3e:	b088      	sub	sp, #32
   25e40:	af04      	add	r7, sp, #16
   25e42:	0002      	movs	r2, r0
   25e44:	1dfb      	adds	r3, r7, #7
   25e46:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   25e48:	230f      	movs	r3, #15
   25e4a:	18fb      	adds	r3, r7, r3
   25e4c:	22fa      	movs	r2, #250	; 0xfa
   25e4e:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   25e50:	4b43      	ldr	r3, [pc, #268]	; (25f60 <close+0x124>)
   25e52:	0018      	movs	r0, r3
   25e54:	4b43      	ldr	r3, [pc, #268]	; (25f64 <close+0x128>)
   25e56:	4798      	blx	r3
   25e58:	1dfb      	adds	r3, r7, #7
   25e5a:	2200      	movs	r2, #0
   25e5c:	569a      	ldrsb	r2, [r3, r2]
   25e5e:	4b42      	ldr	r3, [pc, #264]	; (25f68 <close+0x12c>)
   25e60:	0011      	movs	r1, r2
   25e62:	0018      	movs	r0, r3
   25e64:	4b3f      	ldr	r3, [pc, #252]	; (25f64 <close+0x128>)
   25e66:	4798      	blx	r3
   25e68:	4b40      	ldr	r3, [pc, #256]	; (25f6c <close+0x130>)
   25e6a:	0018      	movs	r0, r3
   25e6c:	4b3d      	ldr	r3, [pc, #244]	; (25f64 <close+0x128>)
   25e6e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   25e70:	1dfb      	adds	r3, r7, #7
   25e72:	781b      	ldrb	r3, [r3, #0]
   25e74:	2b7f      	cmp	r3, #127	; 0x7f
   25e76:	d86a      	bhi.n	25f4e <close+0x112>
   25e78:	1dfb      	adds	r3, r7, #7
   25e7a:	781b      	ldrb	r3, [r3, #0]
   25e7c:	b25b      	sxtb	r3, r3
   25e7e:	4a3c      	ldr	r2, [pc, #240]	; (25f70 <close+0x134>)
   25e80:	011b      	lsls	r3, r3, #4
   25e82:	18d3      	adds	r3, r2, r3
   25e84:	330a      	adds	r3, #10
   25e86:	781b      	ldrb	r3, [r3, #0]
   25e88:	b2db      	uxtb	r3, r3
   25e8a:	2b01      	cmp	r3, #1
   25e8c:	d15f      	bne.n	25f4e <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   25e8e:	230e      	movs	r3, #14
   25e90:	18fb      	adds	r3, r7, r3
   25e92:	2249      	movs	r2, #73	; 0x49
   25e94:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   25e96:	2308      	movs	r3, #8
   25e98:	18fb      	adds	r3, r7, r3
   25e9a:	1dfa      	adds	r2, r7, #7
   25e9c:	7812      	ldrb	r2, [r2, #0]
   25e9e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   25ea0:	1dfb      	adds	r3, r7, #7
   25ea2:	781b      	ldrb	r3, [r3, #0]
   25ea4:	b25b      	sxtb	r3, r3
   25ea6:	4a32      	ldr	r2, [pc, #200]	; (25f70 <close+0x134>)
   25ea8:	011b      	lsls	r3, r3, #4
   25eaa:	18d3      	adds	r3, r2, r3
   25eac:	3306      	adds	r3, #6
   25eae:	881b      	ldrh	r3, [r3, #0]
   25eb0:	b29a      	uxth	r2, r3
   25eb2:	2308      	movs	r3, #8
   25eb4:	18fb      	adds	r3, r7, r3
   25eb6:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   25eb8:	1dfb      	adds	r3, r7, #7
   25eba:	781b      	ldrb	r3, [r3, #0]
   25ebc:	b25b      	sxtb	r3, r3
   25ebe:	4a2c      	ldr	r2, [pc, #176]	; (25f70 <close+0x134>)
   25ec0:	011b      	lsls	r3, r3, #4
   25ec2:	18d3      	adds	r3, r2, r3
   25ec4:	330a      	adds	r3, #10
   25ec6:	2200      	movs	r2, #0
   25ec8:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   25eca:	1dfb      	adds	r3, r7, #7
   25ecc:	781b      	ldrb	r3, [r3, #0]
   25ece:	b25b      	sxtb	r3, r3
   25ed0:	4a27      	ldr	r2, [pc, #156]	; (25f70 <close+0x134>)
   25ed2:	011b      	lsls	r3, r3, #4
   25ed4:	18d3      	adds	r3, r2, r3
   25ed6:	3306      	adds	r3, #6
   25ed8:	2200      	movs	r2, #0
   25eda:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   25edc:	1dfb      	adds	r3, r7, #7
   25ede:	781b      	ldrb	r3, [r3, #0]
   25ee0:	b25b      	sxtb	r3, r3
   25ee2:	4a23      	ldr	r2, [pc, #140]	; (25f70 <close+0x134>)
   25ee4:	011b      	lsls	r3, r3, #4
   25ee6:	18d3      	adds	r3, r2, r3
   25ee8:	330b      	adds	r3, #11
   25eea:	781b      	ldrb	r3, [r3, #0]
   25eec:	b2db      	uxtb	r3, r3
   25eee:	001a      	movs	r2, r3
   25ef0:	2301      	movs	r3, #1
   25ef2:	4013      	ands	r3, r2
   25ef4:	d003      	beq.n	25efe <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   25ef6:	230e      	movs	r3, #14
   25ef8:	18fb      	adds	r3, r7, r3
   25efa:	224e      	movs	r2, #78	; 0x4e
   25efc:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   25efe:	230f      	movs	r3, #15
   25f00:	18fc      	adds	r4, r7, r3
   25f02:	2308      	movs	r3, #8
   25f04:	18fa      	adds	r2, r7, r3
   25f06:	230e      	movs	r3, #14
   25f08:	18fb      	adds	r3, r7, r3
   25f0a:	7819      	ldrb	r1, [r3, #0]
   25f0c:	2300      	movs	r3, #0
   25f0e:	9302      	str	r3, [sp, #8]
   25f10:	2300      	movs	r3, #0
   25f12:	9301      	str	r3, [sp, #4]
   25f14:	2300      	movs	r3, #0
   25f16:	9300      	str	r3, [sp, #0]
   25f18:	2304      	movs	r3, #4
   25f1a:	2002      	movs	r0, #2
   25f1c:	4d15      	ldr	r5, [pc, #84]	; (25f74 <close+0x138>)
   25f1e:	47a8      	blx	r5
   25f20:	0003      	movs	r3, r0
   25f22:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   25f24:	230f      	movs	r3, #15
   25f26:	18fb      	adds	r3, r7, r3
   25f28:	781b      	ldrb	r3, [r3, #0]
   25f2a:	b25b      	sxtb	r3, r3
   25f2c:	2b00      	cmp	r3, #0
   25f2e:	d003      	beq.n	25f38 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   25f30:	230f      	movs	r3, #15
   25f32:	18fb      	adds	r3, r7, r3
   25f34:	22f7      	movs	r2, #247	; 0xf7
   25f36:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   25f38:	1dfb      	adds	r3, r7, #7
   25f3a:	781b      	ldrb	r3, [r3, #0]
   25f3c:	b25b      	sxtb	r3, r3
   25f3e:	011a      	lsls	r2, r3, #4
   25f40:	4b0b      	ldr	r3, [pc, #44]	; (25f70 <close+0x134>)
   25f42:	18d3      	adds	r3, r2, r3
   25f44:	2210      	movs	r2, #16
   25f46:	2100      	movs	r1, #0
   25f48:	0018      	movs	r0, r3
   25f4a:	4b0b      	ldr	r3, [pc, #44]	; (25f78 <close+0x13c>)
   25f4c:	4798      	blx	r3
	}
	return s8Ret;
   25f4e:	230f      	movs	r3, #15
   25f50:	18fb      	adds	r3, r7, r3
   25f52:	781b      	ldrb	r3, [r3, #0]
   25f54:	b25b      	sxtb	r3, r3
}
   25f56:	0018      	movs	r0, r3
   25f58:	46bd      	mov	sp, r7
   25f5a:	b004      	add	sp, #16
   25f5c:	bdb0      	pop	{r4, r5, r7, pc}
   25f5e:	46c0      	nop			; (mov r8, r8)
   25f60:	00039524 	.word	0x00039524
   25f64:	0001e529 	.word	0x0001e529
   25f68:	00039564 	.word	0x00039564
   25f6c:	00039544 	.word	0x00039544
   25f70:	20005690 	.word	0x20005690
   25f74:	00021101 	.word	0x00021101
   25f78:	00020ea1 	.word	0x00020ea1

00025f7c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   25f7c:	b580      	push	{r7, lr}
   25f7e:	b086      	sub	sp, #24
   25f80:	af00      	add	r7, sp, #0
   25f82:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   25f84:	2300      	movs	r3, #0
   25f86:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   25f88:	2317      	movs	r3, #23
   25f8a:	18fb      	adds	r3, r7, r3
   25f8c:	2200      	movs	r2, #0
   25f8e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   25f90:	2316      	movs	r3, #22
   25f92:	18fb      	adds	r3, r7, r3
   25f94:	2200      	movs	r2, #0
   25f96:	701a      	strb	r2, [r3, #0]
   25f98:	e060      	b.n	2605c <nmi_inet_addr+0xe0>
	{
		j = 0;
   25f9a:	2315      	movs	r3, #21
   25f9c:	18fb      	adds	r3, r7, r3
   25f9e:	2200      	movs	r2, #0
   25fa0:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   25fa2:	2314      	movs	r3, #20
   25fa4:	18fb      	adds	r3, r7, r3
   25fa6:	687a      	ldr	r2, [r7, #4]
   25fa8:	7812      	ldrb	r2, [r2, #0]
   25faa:	701a      	strb	r2, [r3, #0]
			++j;
   25fac:	2315      	movs	r3, #21
   25fae:	18fb      	adds	r3, r7, r3
   25fb0:	2215      	movs	r2, #21
   25fb2:	18ba      	adds	r2, r7, r2
   25fb4:	7812      	ldrb	r2, [r2, #0]
   25fb6:	3201      	adds	r2, #1
   25fb8:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   25fba:	2315      	movs	r3, #21
   25fbc:	18fb      	adds	r3, r7, r3
   25fbe:	781b      	ldrb	r3, [r3, #0]
   25fc0:	2b04      	cmp	r3, #4
   25fc2:	d901      	bls.n	25fc8 <nmi_inet_addr+0x4c>
			{
				return 0;
   25fc4:	2300      	movs	r3, #0
   25fc6:	e057      	b.n	26078 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   25fc8:	2314      	movs	r3, #20
   25fca:	18fb      	adds	r3, r7, r3
   25fcc:	781b      	ldrb	r3, [r3, #0]
   25fce:	2b2e      	cmp	r3, #46	; 0x2e
   25fd0:	d004      	beq.n	25fdc <nmi_inet_addr+0x60>
   25fd2:	2314      	movs	r3, #20
   25fd4:	18fb      	adds	r3, r7, r3
   25fd6:	781b      	ldrb	r3, [r3, #0]
   25fd8:	2b00      	cmp	r3, #0
   25fda:	d10d      	bne.n	25ff8 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   25fdc:	2316      	movs	r3, #22
   25fde:	18fb      	adds	r3, r7, r3
   25fe0:	781b      	ldrb	r3, [r3, #0]
   25fe2:	220c      	movs	r2, #12
   25fe4:	18ba      	adds	r2, r7, r2
   25fe6:	2117      	movs	r1, #23
   25fe8:	1879      	adds	r1, r7, r1
   25fea:	7809      	ldrb	r1, [r1, #0]
   25fec:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   25fee:	2317      	movs	r3, #23
   25ff0:	18fb      	adds	r3, r7, r3
   25ff2:	2200      	movs	r2, #0
   25ff4:	701a      	strb	r2, [r3, #0]
   25ff6:	e01d      	b.n	26034 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   25ff8:	2314      	movs	r3, #20
   25ffa:	18fb      	adds	r3, r7, r3
   25ffc:	781b      	ldrb	r3, [r3, #0]
   25ffe:	2b2f      	cmp	r3, #47	; 0x2f
   26000:	d916      	bls.n	26030 <nmi_inet_addr+0xb4>
   26002:	2314      	movs	r3, #20
   26004:	18fb      	adds	r3, r7, r3
   26006:	781b      	ldrb	r3, [r3, #0]
   26008:	2b39      	cmp	r3, #57	; 0x39
   2600a:	d811      	bhi.n	26030 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   2600c:	2317      	movs	r3, #23
   2600e:	18fb      	adds	r3, r7, r3
   26010:	781b      	ldrb	r3, [r3, #0]
   26012:	1c1a      	adds	r2, r3, #0
   26014:	0092      	lsls	r2, r2, #2
   26016:	18d3      	adds	r3, r2, r3
   26018:	18db      	adds	r3, r3, r3
   2601a:	b2da      	uxtb	r2, r3
   2601c:	2314      	movs	r3, #20
   2601e:	18fb      	adds	r3, r7, r3
   26020:	781b      	ldrb	r3, [r3, #0]
   26022:	18d3      	adds	r3, r2, r3
   26024:	b2da      	uxtb	r2, r3
   26026:	2317      	movs	r3, #23
   26028:	18fb      	adds	r3, r7, r3
   2602a:	3a30      	subs	r2, #48	; 0x30
   2602c:	701a      	strb	r2, [r3, #0]
   2602e:	e001      	b.n	26034 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   26030:	2300      	movs	r3, #0
   26032:	e021      	b.n	26078 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   26034:	687b      	ldr	r3, [r7, #4]
   26036:	3301      	adds	r3, #1
   26038:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   2603a:	2314      	movs	r3, #20
   2603c:	18fb      	adds	r3, r7, r3
   2603e:	781b      	ldrb	r3, [r3, #0]
   26040:	2b2e      	cmp	r3, #46	; 0x2e
   26042:	d004      	beq.n	2604e <nmi_inet_addr+0xd2>
   26044:	2314      	movs	r3, #20
   26046:	18fb      	adds	r3, r7, r3
   26048:	781b      	ldrb	r3, [r3, #0]
   2604a:	2b00      	cmp	r3, #0
   2604c:	d1a9      	bne.n	25fa2 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   2604e:	2316      	movs	r3, #22
   26050:	18fb      	adds	r3, r7, r3
   26052:	2216      	movs	r2, #22
   26054:	18ba      	adds	r2, r7, r2
   26056:	7812      	ldrb	r2, [r2, #0]
   26058:	3201      	adds	r2, #1
   2605a:	701a      	strb	r2, [r3, #0]
   2605c:	2316      	movs	r3, #22
   2605e:	18fb      	adds	r3, r7, r3
   26060:	781b      	ldrb	r3, [r3, #0]
   26062:	2b03      	cmp	r3, #3
   26064:	d999      	bls.n	25f9a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   26066:	230c      	movs	r3, #12
   26068:	18f9      	adds	r1, r7, r3
   2606a:	2310      	movs	r3, #16
   2606c:	18fb      	adds	r3, r7, r3
   2606e:	2204      	movs	r2, #4
   26070:	0018      	movs	r0, r3
   26072:	4b03      	ldr	r3, [pc, #12]	; (26080 <nmi_inet_addr+0x104>)
   26074:	4798      	blx	r3
	return u32IP;
   26076:	693b      	ldr	r3, [r7, #16]
}
   26078:	0018      	movs	r0, r3
   2607a:	46bd      	mov	sp, r7
   2607c:	b006      	add	sp, #24
   2607e:	bd80      	pop	{r7, pc}
   26080:	00020e65 	.word	0x00020e65

00026084 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   26084:	b5b0      	push	{r4, r5, r7, lr}
   26086:	b088      	sub	sp, #32
   26088:	af04      	add	r7, sp, #16
   2608a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   2608c:	230f      	movs	r3, #15
   2608e:	18fb      	adds	r3, r7, r3
   26090:	22fa      	movs	r2, #250	; 0xfa
   26092:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26094:	687b      	ldr	r3, [r7, #4]
   26096:	0018      	movs	r0, r3
   26098:	4b14      	ldr	r3, [pc, #80]	; (260ec <gethostbyname+0x68>)
   2609a:	4798      	blx	r3
   2609c:	0003      	movs	r3, r0
   2609e:	001a      	movs	r2, r3
   260a0:	230e      	movs	r3, #14
   260a2:	18fb      	adds	r3, r7, r3
   260a4:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   260a6:	230e      	movs	r3, #14
   260a8:	18fb      	adds	r3, r7, r3
   260aa:	781b      	ldrb	r3, [r3, #0]
   260ac:	2b40      	cmp	r3, #64	; 0x40
   260ae:	d815      	bhi.n	260dc <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   260b0:	230e      	movs	r3, #14
   260b2:	18fb      	adds	r3, r7, r3
   260b4:	781b      	ldrb	r3, [r3, #0]
   260b6:	b29b      	uxth	r3, r3
   260b8:	3301      	adds	r3, #1
   260ba:	b299      	uxth	r1, r3
   260bc:	230f      	movs	r3, #15
   260be:	18fc      	adds	r4, r7, r3
   260c0:	687a      	ldr	r2, [r7, #4]
   260c2:	2300      	movs	r3, #0
   260c4:	9302      	str	r3, [sp, #8]
   260c6:	2300      	movs	r3, #0
   260c8:	9301      	str	r3, [sp, #4]
   260ca:	2300      	movs	r3, #0
   260cc:	9300      	str	r3, [sp, #0]
   260ce:	000b      	movs	r3, r1
   260d0:	214a      	movs	r1, #74	; 0x4a
   260d2:	2002      	movs	r0, #2
   260d4:	4d06      	ldr	r5, [pc, #24]	; (260f0 <gethostbyname+0x6c>)
   260d6:	47a8      	blx	r5
   260d8:	0003      	movs	r3, r0
   260da:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   260dc:	230f      	movs	r3, #15
   260de:	18fb      	adds	r3, r7, r3
   260e0:	781b      	ldrb	r3, [r3, #0]
   260e2:	b25b      	sxtb	r3, r3
}
   260e4:	0018      	movs	r0, r3
   260e6:	46bd      	mov	sp, r7
   260e8:	b004      	add	sp, #16
   260ea:	bdb0      	pop	{r4, r5, r7, pc}
   260ec:	00020edf 	.word	0x00020edf
   260f0:	00021101 	.word	0x00021101

000260f4 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   260f4:	b580      	push	{r7, lr}
   260f6:	b082      	sub	sp, #8
   260f8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   260fa:	003b      	movs	r3, r7
   260fc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   260fe:	687b      	ldr	r3, [r7, #4]
   26100:	22b9      	movs	r2, #185	; 0xb9
   26102:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26104:	4b13      	ldr	r3, [pc, #76]	; (26154 <spi_flash_enter_low_power_mode+0x60>)
   26106:	2100      	movs	r1, #0
   26108:	0018      	movs	r0, r3
   2610a:	4b13      	ldr	r3, [pc, #76]	; (26158 <spi_flash_enter_low_power_mode+0x64>)
   2610c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2610e:	687b      	ldr	r3, [r7, #4]
   26110:	781b      	ldrb	r3, [r3, #0]
   26112:	001a      	movs	r2, r3
   26114:	4b11      	ldr	r3, [pc, #68]	; (2615c <spi_flash_enter_low_power_mode+0x68>)
   26116:	0011      	movs	r1, r2
   26118:	0018      	movs	r0, r3
   2611a:	4b0f      	ldr	r3, [pc, #60]	; (26158 <spi_flash_enter_low_power_mode+0x64>)
   2611c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2611e:	4b10      	ldr	r3, [pc, #64]	; (26160 <spi_flash_enter_low_power_mode+0x6c>)
   26120:	2101      	movs	r1, #1
   26122:	0018      	movs	r0, r3
   26124:	4b0c      	ldr	r3, [pc, #48]	; (26158 <spi_flash_enter_low_power_mode+0x64>)
   26126:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26128:	4b0e      	ldr	r3, [pc, #56]	; (26164 <spi_flash_enter_low_power_mode+0x70>)
   2612a:	2100      	movs	r1, #0
   2612c:	0018      	movs	r0, r3
   2612e:	4b0a      	ldr	r3, [pc, #40]	; (26158 <spi_flash_enter_low_power_mode+0x64>)
   26130:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26132:	4b0d      	ldr	r3, [pc, #52]	; (26168 <spi_flash_enter_low_power_mode+0x74>)
   26134:	2181      	movs	r1, #129	; 0x81
   26136:	0018      	movs	r0, r3
   26138:	4b07      	ldr	r3, [pc, #28]	; (26158 <spi_flash_enter_low_power_mode+0x64>)
   2613a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   2613c:	46c0      	nop			; (mov r8, r8)
   2613e:	4b0b      	ldr	r3, [pc, #44]	; (2616c <spi_flash_enter_low_power_mode+0x78>)
   26140:	0018      	movs	r0, r3
   26142:	4b0b      	ldr	r3, [pc, #44]	; (26170 <spi_flash_enter_low_power_mode+0x7c>)
   26144:	4798      	blx	r3
   26146:	0003      	movs	r3, r0
   26148:	2b01      	cmp	r3, #1
   2614a:	d1f8      	bne.n	2613e <spi_flash_enter_low_power_mode+0x4a>
}
   2614c:	46c0      	nop			; (mov r8, r8)
   2614e:	46bd      	mov	sp, r7
   26150:	b002      	add	sp, #8
   26152:	bd80      	pop	{r7, pc}
   26154:	00010208 	.word	0x00010208
   26158:	00022f55 	.word	0x00022f55
   2615c:	0001020c 	.word	0x0001020c
   26160:	00010214 	.word	0x00010214
   26164:	0001021c 	.word	0x0001021c
   26168:	00010204 	.word	0x00010204
   2616c:	00010218 	.word	0x00010218
   26170:	00022f11 	.word	0x00022f11

00026174 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26174:	b580      	push	{r7, lr}
   26176:	b082      	sub	sp, #8
   26178:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2617a:	003b      	movs	r3, r7
   2617c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   2617e:	687b      	ldr	r3, [r7, #4]
   26180:	22ab      	movs	r2, #171	; 0xab
   26182:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26184:	4b13      	ldr	r3, [pc, #76]	; (261d4 <spi_flash_leave_low_power_mode+0x60>)
   26186:	2100      	movs	r1, #0
   26188:	0018      	movs	r0, r3
   2618a:	4b13      	ldr	r3, [pc, #76]	; (261d8 <spi_flash_leave_low_power_mode+0x64>)
   2618c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2618e:	687b      	ldr	r3, [r7, #4]
   26190:	781b      	ldrb	r3, [r3, #0]
   26192:	001a      	movs	r2, r3
   26194:	4b11      	ldr	r3, [pc, #68]	; (261dc <spi_flash_leave_low_power_mode+0x68>)
   26196:	0011      	movs	r1, r2
   26198:	0018      	movs	r0, r3
   2619a:	4b0f      	ldr	r3, [pc, #60]	; (261d8 <spi_flash_leave_low_power_mode+0x64>)
   2619c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2619e:	4b10      	ldr	r3, [pc, #64]	; (261e0 <spi_flash_leave_low_power_mode+0x6c>)
   261a0:	2101      	movs	r1, #1
   261a2:	0018      	movs	r0, r3
   261a4:	4b0c      	ldr	r3, [pc, #48]	; (261d8 <spi_flash_leave_low_power_mode+0x64>)
   261a6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   261a8:	4b0e      	ldr	r3, [pc, #56]	; (261e4 <spi_flash_leave_low_power_mode+0x70>)
   261aa:	2100      	movs	r1, #0
   261ac:	0018      	movs	r0, r3
   261ae:	4b0a      	ldr	r3, [pc, #40]	; (261d8 <spi_flash_leave_low_power_mode+0x64>)
   261b0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   261b2:	4b0d      	ldr	r3, [pc, #52]	; (261e8 <spi_flash_leave_low_power_mode+0x74>)
   261b4:	2181      	movs	r1, #129	; 0x81
   261b6:	0018      	movs	r0, r3
   261b8:	4b07      	ldr	r3, [pc, #28]	; (261d8 <spi_flash_leave_low_power_mode+0x64>)
   261ba:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   261bc:	46c0      	nop			; (mov r8, r8)
   261be:	4b0b      	ldr	r3, [pc, #44]	; (261ec <spi_flash_leave_low_power_mode+0x78>)
   261c0:	0018      	movs	r0, r3
   261c2:	4b0b      	ldr	r3, [pc, #44]	; (261f0 <spi_flash_leave_low_power_mode+0x7c>)
   261c4:	4798      	blx	r3
   261c6:	0003      	movs	r3, r0
   261c8:	2b01      	cmp	r3, #1
   261ca:	d1f8      	bne.n	261be <spi_flash_leave_low_power_mode+0x4a>
}
   261cc:	46c0      	nop			; (mov r8, r8)
   261ce:	46bd      	mov	sp, r7
   261d0:	b002      	add	sp, #8
   261d2:	bd80      	pop	{r7, pc}
   261d4:	00010208 	.word	0x00010208
   261d8:	00022f55 	.word	0x00022f55
   261dc:	0001020c 	.word	0x0001020c
   261e0:	00010214 	.word	0x00010214
   261e4:	0001021c 	.word	0x0001021c
   261e8:	00010204 	.word	0x00010204
   261ec:	00010218 	.word	0x00010218
   261f0:	00022f11 	.word	0x00022f11

000261f4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   261f4:	b590      	push	{r4, r7, lr}
   261f6:	b085      	sub	sp, #20
   261f8:	af00      	add	r7, sp, #0
   261fa:	0002      	movs	r2, r0
   261fc:	1dfb      	adds	r3, r7, #7
   261fe:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26200:	230f      	movs	r3, #15
   26202:	18fb      	adds	r3, r7, r3
   26204:	2200      	movs	r2, #0
   26206:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   26208:	4b24      	ldr	r3, [pc, #144]	; (2629c <spi_flash_enable+0xa8>)
   2620a:	4798      	blx	r3
   2620c:	0003      	movs	r3, r0
   2620e:	051b      	lsls	r3, r3, #20
   26210:	0d1b      	lsrs	r3, r3, #20
   26212:	4a23      	ldr	r2, [pc, #140]	; (262a0 <spi_flash_enable+0xac>)
   26214:	4293      	cmp	r3, r2
   26216:	d938      	bls.n	2628a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26218:	230f      	movs	r3, #15
   2621a:	18fc      	adds	r4, r7, r3
   2621c:	2308      	movs	r3, #8
   2621e:	18fb      	adds	r3, r7, r3
   26220:	4a20      	ldr	r2, [pc, #128]	; (262a4 <spi_flash_enable+0xb0>)
   26222:	0019      	movs	r1, r3
   26224:	0010      	movs	r0, r2
   26226:	4b20      	ldr	r3, [pc, #128]	; (262a8 <spi_flash_enable+0xb4>)
   26228:	4798      	blx	r3
   2622a:	0003      	movs	r3, r0
   2622c:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   2622e:	230f      	movs	r3, #15
   26230:	18fb      	adds	r3, r7, r3
   26232:	781b      	ldrb	r3, [r3, #0]
   26234:	b25b      	sxtb	r3, r3
   26236:	2b00      	cmp	r3, #0
   26238:	d126      	bne.n	26288 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   2623a:	68bb      	ldr	r3, [r7, #8]
   2623c:	4a1b      	ldr	r2, [pc, #108]	; (262ac <spi_flash_enable+0xb8>)
   2623e:	4013      	ands	r3, r2
   26240:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26242:	68bb      	ldr	r3, [r7, #8]
   26244:	4a1a      	ldr	r2, [pc, #104]	; (262b0 <spi_flash_enable+0xbc>)
   26246:	4313      	orrs	r3, r2
   26248:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2624a:	68bb      	ldr	r3, [r7, #8]
   2624c:	4a15      	ldr	r2, [pc, #84]	; (262a4 <spi_flash_enable+0xb0>)
   2624e:	0019      	movs	r1, r3
   26250:	0010      	movs	r0, r2
   26252:	4b18      	ldr	r3, [pc, #96]	; (262b4 <spi_flash_enable+0xc0>)
   26254:	4798      	blx	r3
		if(enable) {
   26256:	1dfb      	adds	r3, r7, #7
   26258:	781b      	ldrb	r3, [r3, #0]
   2625a:	2b00      	cmp	r3, #0
   2625c:	d002      	beq.n	26264 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   2625e:	4b16      	ldr	r3, [pc, #88]	; (262b8 <spi_flash_enable+0xc4>)
   26260:	4798      	blx	r3
   26262:	e001      	b.n	26268 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26264:	4b15      	ldr	r3, [pc, #84]	; (262bc <spi_flash_enable+0xc8>)
   26266:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26268:	68bb      	ldr	r3, [r7, #8]
   2626a:	4a10      	ldr	r2, [pc, #64]	; (262ac <spi_flash_enable+0xb8>)
   2626c:	4013      	ands	r3, r2
   2626e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26270:	68bb      	ldr	r3, [r7, #8]
   26272:	2280      	movs	r2, #128	; 0x80
   26274:	0252      	lsls	r2, r2, #9
   26276:	4313      	orrs	r3, r2
   26278:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2627a:	68bb      	ldr	r3, [r7, #8]
   2627c:	4a09      	ldr	r2, [pc, #36]	; (262a4 <spi_flash_enable+0xb0>)
   2627e:	0019      	movs	r1, r3
   26280:	0010      	movs	r0, r2
   26282:	4b0c      	ldr	r3, [pc, #48]	; (262b4 <spi_flash_enable+0xc0>)
   26284:	4798      	blx	r3
   26286:	e000      	b.n	2628a <spi_flash_enable+0x96>
			goto ERR1;
   26288:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   2628a:	230f      	movs	r3, #15
   2628c:	18fb      	adds	r3, r7, r3
   2628e:	781b      	ldrb	r3, [r3, #0]
   26290:	b25b      	sxtb	r3, r3
}
   26292:	0018      	movs	r0, r3
   26294:	46bd      	mov	sp, r7
   26296:	b005      	add	sp, #20
   26298:	bd90      	pop	{r4, r7, pc}
   2629a:	46c0      	nop			; (mov r8, r8)
   2629c:	00022831 	.word	0x00022831
   262a0:	0000039f 	.word	0x0000039f
   262a4:	00001410 	.word	0x00001410
   262a8:	00022f31 	.word	0x00022f31
   262ac:	f8888fff 	.word	0xf8888fff
   262b0:	01111000 	.word	0x01111000
   262b4:	00022f55 	.word	0x00022f55
   262b8:	00026175 	.word	0x00026175
   262bc:	000260f5 	.word	0x000260f5

000262c0 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   262c0:	b580      	push	{r7, lr}
   262c2:	b084      	sub	sp, #16
   262c4:	af00      	add	r7, sp, #0
   262c6:	0002      	movs	r2, r0
   262c8:	1dfb      	adds	r3, r7, #7
   262ca:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   262cc:	1dfb      	adds	r3, r7, #7
   262ce:	781b      	ldrb	r3, [r3, #0]
   262d0:	2b00      	cmp	r3, #0
   262d2:	d108      	bne.n	262e6 <mem_test_unit_ready+0x26>
   262d4:	1dfb      	adds	r3, r7, #7
   262d6:	781a      	ldrb	r2, [r3, #0]
   262d8:	4b08      	ldr	r3, [pc, #32]	; (262fc <mem_test_unit_ready+0x3c>)
   262da:	0152      	lsls	r2, r2, #5
   262dc:	58d3      	ldr	r3, [r2, r3]
   262de:	4798      	blx	r3
   262e0:	0003      	movs	r3, r0
   262e2:	001a      	movs	r2, r3
   262e4:	e000      	b.n	262e8 <mem_test_unit_ready+0x28>
   262e6:	2201      	movs	r2, #1
  status =
   262e8:	230f      	movs	r3, #15
   262ea:	18fb      	adds	r3, r7, r3
   262ec:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   262ee:	230f      	movs	r3, #15
   262f0:	18fb      	adds	r3, r7, r3
   262f2:	781b      	ldrb	r3, [r3, #0]
}
   262f4:	0018      	movs	r0, r3
   262f6:	46bd      	mov	sp, r7
   262f8:	b004      	add	sp, #16
   262fa:	bd80      	pop	{r7, pc}
   262fc:	000395f0 	.word	0x000395f0

00026300 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   26300:	b580      	push	{r7, lr}
   26302:	b084      	sub	sp, #16
   26304:	af00      	add	r7, sp, #0
   26306:	0002      	movs	r2, r0
   26308:	6039      	str	r1, [r7, #0]
   2630a:	1dfb      	adds	r3, r7, #7
   2630c:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   2630e:	1dfb      	adds	r3, r7, #7
   26310:	781b      	ldrb	r3, [r3, #0]
   26312:	2b00      	cmp	r3, #0
   26314:	d10c      	bne.n	26330 <mem_read_capacity+0x30>
   26316:	1dfb      	adds	r3, r7, #7
   26318:	781b      	ldrb	r3, [r3, #0]
   2631a:	4a0b      	ldr	r2, [pc, #44]	; (26348 <mem_read_capacity+0x48>)
   2631c:	015b      	lsls	r3, r3, #5
   2631e:	18d3      	adds	r3, r2, r3
   26320:	3304      	adds	r3, #4
   26322:	681b      	ldr	r3, [r3, #0]
   26324:	683a      	ldr	r2, [r7, #0]
   26326:	0010      	movs	r0, r2
   26328:	4798      	blx	r3
   2632a:	0003      	movs	r3, r0
   2632c:	001a      	movs	r2, r3
   2632e:	e000      	b.n	26332 <mem_read_capacity+0x32>
   26330:	2201      	movs	r2, #1
  status =
   26332:	230f      	movs	r3, #15
   26334:	18fb      	adds	r3, r7, r3
   26336:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26338:	230f      	movs	r3, #15
   2633a:	18fb      	adds	r3, r7, r3
   2633c:	781b      	ldrb	r3, [r3, #0]
}
   2633e:	0018      	movs	r0, r3
   26340:	46bd      	mov	sp, r7
   26342:	b004      	add	sp, #16
   26344:	bd80      	pop	{r7, pc}
   26346:	46c0      	nop			; (mov r8, r8)
   26348:	000395f0 	.word	0x000395f0

0002634c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   2634c:	b580      	push	{r7, lr}
   2634e:	b084      	sub	sp, #16
   26350:	af00      	add	r7, sp, #0
   26352:	0002      	movs	r2, r0
   26354:	1dfb      	adds	r3, r7, #7
   26356:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   26358:	1dfb      	adds	r3, r7, #7
   2635a:	781b      	ldrb	r3, [r3, #0]
   2635c:	425a      	negs	r2, r3
   2635e:	4153      	adcs	r3, r2
   26360:	b2da      	uxtb	r2, r3
  sector_size =
   26362:	230f      	movs	r3, #15
   26364:	18fb      	adds	r3, r7, r3
   26366:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   26368:	230f      	movs	r3, #15
   2636a:	18fb      	adds	r3, r7, r3
   2636c:	781b      	ldrb	r3, [r3, #0]
}
   2636e:	0018      	movs	r0, r3
   26370:	46bd      	mov	sp, r7
   26372:	b004      	add	sp, #16
   26374:	bd80      	pop	{r7, pc}
	...

00026378 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   26378:	b580      	push	{r7, lr}
   2637a:	b084      	sub	sp, #16
   2637c:	af00      	add	r7, sp, #0
   2637e:	0002      	movs	r2, r0
   26380:	1dfb      	adds	r3, r7, #7
   26382:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26384:	1dfb      	adds	r3, r7, #7
   26386:	781b      	ldrb	r3, [r3, #0]
   26388:	2b00      	cmp	r3, #0
   2638a:	d109      	bne.n	263a0 <mem_wr_protect+0x28>
   2638c:	1dfb      	adds	r3, r7, #7
   2638e:	781b      	ldrb	r3, [r3, #0]
   26390:	4a0a      	ldr	r2, [pc, #40]	; (263bc <mem_wr_protect+0x44>)
   26392:	015b      	lsls	r3, r3, #5
   26394:	18d3      	adds	r3, r2, r3
   26396:	330c      	adds	r3, #12
   26398:	681b      	ldr	r3, [r3, #0]
   2639a:	4798      	blx	r3
   2639c:	1e03      	subs	r3, r0, #0
   2639e:	d001      	beq.n	263a4 <mem_wr_protect+0x2c>
   263a0:	2201      	movs	r2, #1
   263a2:	e000      	b.n	263a6 <mem_wr_protect+0x2e>
   263a4:	2200      	movs	r2, #0
  wr_protect =
   263a6:	230f      	movs	r3, #15
   263a8:	18fb      	adds	r3, r7, r3
   263aa:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   263ac:	230f      	movs	r3, #15
   263ae:	18fb      	adds	r3, r7, r3
   263b0:	781b      	ldrb	r3, [r3, #0]
}
   263b2:	0018      	movs	r0, r3
   263b4:	46bd      	mov	sp, r7
   263b6:	b004      	add	sp, #16
   263b8:	bd80      	pop	{r7, pc}
   263ba:	46c0      	nop			; (mov r8, r8)
   263bc:	000395f0 	.word	0x000395f0

000263c0 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   263c0:	b580      	push	{r7, lr}
   263c2:	b086      	sub	sp, #24
   263c4:	af00      	add	r7, sp, #0
   263c6:	60b9      	str	r1, [r7, #8]
   263c8:	607a      	str	r2, [r7, #4]
   263ca:	230f      	movs	r3, #15
   263cc:	18fb      	adds	r3, r7, r3
   263ce:	1c02      	adds	r2, r0, #0
   263d0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   263d2:	230f      	movs	r3, #15
   263d4:	18fb      	adds	r3, r7, r3
   263d6:	781b      	ldrb	r3, [r3, #0]
   263d8:	2b00      	cmp	r3, #0
   263da:	d10e      	bne.n	263fa <memory_2_ram+0x3a>
   263dc:	230f      	movs	r3, #15
   263de:	18fb      	adds	r3, r7, r3
   263e0:	781b      	ldrb	r3, [r3, #0]
   263e2:	4a0b      	ldr	r2, [pc, #44]	; (26410 <memory_2_ram+0x50>)
   263e4:	015b      	lsls	r3, r3, #5
   263e6:	18d3      	adds	r3, r2, r3
   263e8:	3314      	adds	r3, #20
   263ea:	681b      	ldr	r3, [r3, #0]
   263ec:	6879      	ldr	r1, [r7, #4]
   263ee:	68ba      	ldr	r2, [r7, #8]
   263f0:	0010      	movs	r0, r2
   263f2:	4798      	blx	r3
   263f4:	0003      	movs	r3, r0
   263f6:	001a      	movs	r2, r3
   263f8:	e000      	b.n	263fc <memory_2_ram+0x3c>
   263fa:	2201      	movs	r2, #1
  status =
   263fc:	2317      	movs	r3, #23
   263fe:	18fb      	adds	r3, r7, r3
   26400:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   26402:	2317      	movs	r3, #23
   26404:	18fb      	adds	r3, r7, r3
   26406:	781b      	ldrb	r3, [r3, #0]
}
   26408:	0018      	movs	r0, r3
   2640a:	46bd      	mov	sp, r7
   2640c:	b006      	add	sp, #24
   2640e:	bd80      	pop	{r7, pc}
   26410:	000395f0 	.word	0x000395f0

00026414 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26414:	b580      	push	{r7, lr}
   26416:	b086      	sub	sp, #24
   26418:	af00      	add	r7, sp, #0
   2641a:	60b9      	str	r1, [r7, #8]
   2641c:	607a      	str	r2, [r7, #4]
   2641e:	230f      	movs	r3, #15
   26420:	18fb      	adds	r3, r7, r3
   26422:	1c02      	adds	r2, r0, #0
   26424:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26426:	230f      	movs	r3, #15
   26428:	18fb      	adds	r3, r7, r3
   2642a:	781b      	ldrb	r3, [r3, #0]
   2642c:	2b00      	cmp	r3, #0
   2642e:	d10e      	bne.n	2644e <ram_2_memory+0x3a>
   26430:	230f      	movs	r3, #15
   26432:	18fb      	adds	r3, r7, r3
   26434:	781b      	ldrb	r3, [r3, #0]
   26436:	4a0b      	ldr	r2, [pc, #44]	; (26464 <ram_2_memory+0x50>)
   26438:	015b      	lsls	r3, r3, #5
   2643a:	18d3      	adds	r3, r2, r3
   2643c:	3318      	adds	r3, #24
   2643e:	681b      	ldr	r3, [r3, #0]
   26440:	6879      	ldr	r1, [r7, #4]
   26442:	68ba      	ldr	r2, [r7, #8]
   26444:	0010      	movs	r0, r2
   26446:	4798      	blx	r3
   26448:	0003      	movs	r3, r0
   2644a:	001a      	movs	r2, r3
   2644c:	e000      	b.n	26450 <ram_2_memory+0x3c>
   2644e:	2201      	movs	r2, #1
  status =
   26450:	2317      	movs	r3, #23
   26452:	18fb      	adds	r3, r7, r3
   26454:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   26456:	2317      	movs	r3, #23
   26458:	18fb      	adds	r3, r7, r3
   2645a:	781b      	ldrb	r3, [r3, #0]
}
   2645c:	0018      	movs	r0, r3
   2645e:	46bd      	mov	sp, r7
   26460:	b006      	add	sp, #24
   26462:	bd80      	pop	{r7, pc}
   26464:	000395f0 	.word	0x000395f0

00026468 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   26468:	b580      	push	{r7, lr}
   2646a:	b082      	sub	sp, #8
   2646c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   2646e:	4b10      	ldr	r3, [pc, #64]	; (264b0 <cpu_irq_enter_critical+0x48>)
   26470:	681b      	ldr	r3, [r3, #0]
   26472:	2b00      	cmp	r3, #0
   26474:	d112      	bne.n	2649c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   26476:	f3ef 8310 	mrs	r3, PRIMASK
   2647a:	607b      	str	r3, [r7, #4]
  return(result);
   2647c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   2647e:	2b00      	cmp	r3, #0
   26480:	d109      	bne.n	26496 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   26482:	b672      	cpsid	i
   26484:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   26488:	4b0a      	ldr	r3, [pc, #40]	; (264b4 <cpu_irq_enter_critical+0x4c>)
   2648a:	2200      	movs	r2, #0
   2648c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   2648e:	4b0a      	ldr	r3, [pc, #40]	; (264b8 <cpu_irq_enter_critical+0x50>)
   26490:	2201      	movs	r2, #1
   26492:	701a      	strb	r2, [r3, #0]
   26494:	e002      	b.n	2649c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   26496:	4b08      	ldr	r3, [pc, #32]	; (264b8 <cpu_irq_enter_critical+0x50>)
   26498:	2200      	movs	r2, #0
   2649a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   2649c:	4b04      	ldr	r3, [pc, #16]	; (264b0 <cpu_irq_enter_critical+0x48>)
   2649e:	681b      	ldr	r3, [r3, #0]
   264a0:	1c5a      	adds	r2, r3, #1
   264a2:	4b03      	ldr	r3, [pc, #12]	; (264b0 <cpu_irq_enter_critical+0x48>)
   264a4:	601a      	str	r2, [r3, #0]
}
   264a6:	46c0      	nop			; (mov r8, r8)
   264a8:	46bd      	mov	sp, r7
   264aa:	b002      	add	sp, #8
   264ac:	bd80      	pop	{r7, pc}
   264ae:	46c0      	nop			; (mov r8, r8)
   264b0:	20003ea8 	.word	0x20003ea8
   264b4:	200000ca 	.word	0x200000ca
   264b8:	20003eac 	.word	0x20003eac

000264bc <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   264bc:	b580      	push	{r7, lr}
   264be:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   264c0:	4b0b      	ldr	r3, [pc, #44]	; (264f0 <cpu_irq_leave_critical+0x34>)
   264c2:	681b      	ldr	r3, [r3, #0]
   264c4:	1e5a      	subs	r2, r3, #1
   264c6:	4b0a      	ldr	r3, [pc, #40]	; (264f0 <cpu_irq_leave_critical+0x34>)
   264c8:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   264ca:	4b09      	ldr	r3, [pc, #36]	; (264f0 <cpu_irq_leave_critical+0x34>)
   264cc:	681b      	ldr	r3, [r3, #0]
   264ce:	2b00      	cmp	r3, #0
   264d0:	d10a      	bne.n	264e8 <cpu_irq_leave_critical+0x2c>
   264d2:	4b08      	ldr	r3, [pc, #32]	; (264f4 <cpu_irq_leave_critical+0x38>)
   264d4:	781b      	ldrb	r3, [r3, #0]
   264d6:	b2db      	uxtb	r3, r3
   264d8:	2b00      	cmp	r3, #0
   264da:	d005      	beq.n	264e8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   264dc:	4b06      	ldr	r3, [pc, #24]	; (264f8 <cpu_irq_leave_critical+0x3c>)
   264de:	2201      	movs	r2, #1
   264e0:	701a      	strb	r2, [r3, #0]
   264e2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   264e6:	b662      	cpsie	i
	}
}
   264e8:	46c0      	nop			; (mov r8, r8)
   264ea:	46bd      	mov	sp, r7
   264ec:	bd80      	pop	{r7, pc}
   264ee:	46c0      	nop			; (mov r8, r8)
   264f0:	20003ea8 	.word	0x20003ea8
   264f4:	20003eac 	.word	0x20003eac
   264f8:	200000ca 	.word	0x200000ca

000264fc <system_pinmux_get_group_from_gpio_pin>:
{
   264fc:	b580      	push	{r7, lr}
   264fe:	b084      	sub	sp, #16
   26500:	af00      	add	r7, sp, #0
   26502:	0002      	movs	r2, r0
   26504:	1dfb      	adds	r3, r7, #7
   26506:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26508:	230f      	movs	r3, #15
   2650a:	18fb      	adds	r3, r7, r3
   2650c:	1dfa      	adds	r2, r7, #7
   2650e:	7812      	ldrb	r2, [r2, #0]
   26510:	09d2      	lsrs	r2, r2, #7
   26512:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26514:	230e      	movs	r3, #14
   26516:	18fb      	adds	r3, r7, r3
   26518:	1dfa      	adds	r2, r7, #7
   2651a:	7812      	ldrb	r2, [r2, #0]
   2651c:	0952      	lsrs	r2, r2, #5
   2651e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26520:	4b0d      	ldr	r3, [pc, #52]	; (26558 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26522:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26524:	230f      	movs	r3, #15
   26526:	18fb      	adds	r3, r7, r3
   26528:	781b      	ldrb	r3, [r3, #0]
   2652a:	2b00      	cmp	r3, #0
   2652c:	d10f      	bne.n	2654e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2652e:	230f      	movs	r3, #15
   26530:	18fb      	adds	r3, r7, r3
   26532:	781b      	ldrb	r3, [r3, #0]
   26534:	009b      	lsls	r3, r3, #2
   26536:	2210      	movs	r2, #16
   26538:	4694      	mov	ip, r2
   2653a:	44bc      	add	ip, r7
   2653c:	4463      	add	r3, ip
   2653e:	3b08      	subs	r3, #8
   26540:	681a      	ldr	r2, [r3, #0]
   26542:	230e      	movs	r3, #14
   26544:	18fb      	adds	r3, r7, r3
   26546:	781b      	ldrb	r3, [r3, #0]
   26548:	01db      	lsls	r3, r3, #7
   2654a:	18d3      	adds	r3, r2, r3
   2654c:	e000      	b.n	26550 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2654e:	2300      	movs	r3, #0
}
   26550:	0018      	movs	r0, r3
   26552:	46bd      	mov	sp, r7
   26554:	b004      	add	sp, #16
   26556:	bd80      	pop	{r7, pc}
   26558:	41004400 	.word	0x41004400

0002655c <port_get_group_from_gpio_pin>:
{
   2655c:	b580      	push	{r7, lr}
   2655e:	b082      	sub	sp, #8
   26560:	af00      	add	r7, sp, #0
   26562:	0002      	movs	r2, r0
   26564:	1dfb      	adds	r3, r7, #7
   26566:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26568:	1dfb      	adds	r3, r7, #7
   2656a:	781b      	ldrb	r3, [r3, #0]
   2656c:	0018      	movs	r0, r3
   2656e:	4b03      	ldr	r3, [pc, #12]	; (2657c <port_get_group_from_gpio_pin+0x20>)
   26570:	4798      	blx	r3
   26572:	0003      	movs	r3, r0
}
   26574:	0018      	movs	r0, r3
   26576:	46bd      	mov	sp, r7
   26578:	b002      	add	sp, #8
   2657a:	bd80      	pop	{r7, pc}
   2657c:	000264fd 	.word	0x000264fd

00026580 <port_get_config_defaults>:
{
   26580:	b580      	push	{r7, lr}
   26582:	b082      	sub	sp, #8
   26584:	af00      	add	r7, sp, #0
   26586:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   26588:	687b      	ldr	r3, [r7, #4]
   2658a:	2200      	movs	r2, #0
   2658c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2658e:	687b      	ldr	r3, [r7, #4]
   26590:	2201      	movs	r2, #1
   26592:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26594:	687b      	ldr	r3, [r7, #4]
   26596:	2200      	movs	r2, #0
   26598:	709a      	strb	r2, [r3, #2]
}
   2659a:	46c0      	nop			; (mov r8, r8)
   2659c:	46bd      	mov	sp, r7
   2659e:	b002      	add	sp, #8
   265a0:	bd80      	pop	{r7, pc}
	...

000265a4 <port_pin_set_output_level>:
{
   265a4:	b580      	push	{r7, lr}
   265a6:	b084      	sub	sp, #16
   265a8:	af00      	add	r7, sp, #0
   265aa:	0002      	movs	r2, r0
   265ac:	1dfb      	adds	r3, r7, #7
   265ae:	701a      	strb	r2, [r3, #0]
   265b0:	1dbb      	adds	r3, r7, #6
   265b2:	1c0a      	adds	r2, r1, #0
   265b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   265b6:	1dfb      	adds	r3, r7, #7
   265b8:	781b      	ldrb	r3, [r3, #0]
   265ba:	0018      	movs	r0, r3
   265bc:	4b0d      	ldr	r3, [pc, #52]	; (265f4 <port_pin_set_output_level+0x50>)
   265be:	4798      	blx	r3
   265c0:	0003      	movs	r3, r0
   265c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   265c4:	1dfb      	adds	r3, r7, #7
   265c6:	781b      	ldrb	r3, [r3, #0]
   265c8:	221f      	movs	r2, #31
   265ca:	4013      	ands	r3, r2
   265cc:	2201      	movs	r2, #1
   265ce:	409a      	lsls	r2, r3
   265d0:	0013      	movs	r3, r2
   265d2:	60bb      	str	r3, [r7, #8]
	if (level) {
   265d4:	1dbb      	adds	r3, r7, #6
   265d6:	781b      	ldrb	r3, [r3, #0]
   265d8:	2b00      	cmp	r3, #0
   265da:	d003      	beq.n	265e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   265dc:	68fb      	ldr	r3, [r7, #12]
   265de:	68ba      	ldr	r2, [r7, #8]
   265e0:	619a      	str	r2, [r3, #24]
}
   265e2:	e002      	b.n	265ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   265e4:	68fb      	ldr	r3, [r7, #12]
   265e6:	68ba      	ldr	r2, [r7, #8]
   265e8:	615a      	str	r2, [r3, #20]
}
   265ea:	46c0      	nop			; (mov r8, r8)
   265ec:	46bd      	mov	sp, r7
   265ee:	b004      	add	sp, #16
   265f0:	bd80      	pop	{r7, pc}
   265f2:	46c0      	nop			; (mov r8, r8)
   265f4:	0002655d 	.word	0x0002655d

000265f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   265f8:	b580      	push	{r7, lr}
   265fa:	b082      	sub	sp, #8
   265fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   265fe:	1d3b      	adds	r3, r7, #4
   26600:	0018      	movs	r0, r3
   26602:	4b0e      	ldr	r3, [pc, #56]	; (2663c <system_board_init+0x44>)
   26604:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   26606:	1d3b      	adds	r3, r7, #4
   26608:	2201      	movs	r2, #1
   2660a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   2660c:	1d3b      	adds	r3, r7, #4
   2660e:	0019      	movs	r1, r3
   26610:	2017      	movs	r0, #23
   26612:	4b0b      	ldr	r3, [pc, #44]	; (26640 <system_board_init+0x48>)
   26614:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26616:	2101      	movs	r1, #1
   26618:	2017      	movs	r0, #23
   2661a:	4b0a      	ldr	r3, [pc, #40]	; (26644 <system_board_init+0x4c>)
   2661c:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   2661e:	1d3b      	adds	r3, r7, #4
   26620:	2200      	movs	r2, #0
   26622:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26624:	1d3b      	adds	r3, r7, #4
   26626:	2201      	movs	r2, #1
   26628:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   2662a:	1d3b      	adds	r3, r7, #4
   2662c:	0019      	movs	r1, r3
   2662e:	2037      	movs	r0, #55	; 0x37
   26630:	4b03      	ldr	r3, [pc, #12]	; (26640 <system_board_init+0x48>)
   26632:	4798      	blx	r3
}
   26634:	46c0      	nop			; (mov r8, r8)
   26636:	46bd      	mov	sp, r7
   26638:	b002      	add	sp, #8
   2663a:	bd80      	pop	{r7, pc}
   2663c:	00026581 	.word	0x00026581
   26640:	00026c6d 	.word	0x00026c6d
   26644:	000265a5 	.word	0x000265a5

00026648 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   26648:	b580      	push	{r7, lr}
   2664a:	b084      	sub	sp, #16
   2664c:	af00      	add	r7, sp, #0
   2664e:	0002      	movs	r2, r0
   26650:	1dfb      	adds	r3, r7, #7
   26652:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26654:	230f      	movs	r3, #15
   26656:	18fb      	adds	r3, r7, r3
   26658:	1dfa      	adds	r2, r7, #7
   2665a:	7812      	ldrb	r2, [r2, #0]
   2665c:	0952      	lsrs	r2, r2, #5
   2665e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   26660:	230f      	movs	r3, #15
   26662:	18fb      	adds	r3, r7, r3
   26664:	781b      	ldrb	r3, [r3, #0]
   26666:	2b00      	cmp	r3, #0
   26668:	d10c      	bne.n	26684 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2666a:	4b09      	ldr	r3, [pc, #36]	; (26690 <_extint_get_eic_from_channel+0x48>)
   2666c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   2666e:	230f      	movs	r3, #15
   26670:	18fb      	adds	r3, r7, r3
   26672:	781b      	ldrb	r3, [r3, #0]
   26674:	009b      	lsls	r3, r3, #2
   26676:	2210      	movs	r2, #16
   26678:	4694      	mov	ip, r2
   2667a:	44bc      	add	ip, r7
   2667c:	4463      	add	r3, ip
   2667e:	3b08      	subs	r3, #8
   26680:	681b      	ldr	r3, [r3, #0]
   26682:	e000      	b.n	26686 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   26684:	2300      	movs	r3, #0
	}
}
   26686:	0018      	movs	r0, r3
   26688:	46bd      	mov	sp, r7
   2668a:	b004      	add	sp, #16
   2668c:	bd80      	pop	{r7, pc}
   2668e:	46c0      	nop			; (mov r8, r8)
   26690:	40001800 	.word	0x40001800

00026694 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   26694:	b580      	push	{r7, lr}
   26696:	b084      	sub	sp, #16
   26698:	af00      	add	r7, sp, #0
   2669a:	0002      	movs	r2, r0
   2669c:	1dfb      	adds	r3, r7, #7
   2669e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   266a0:	1dfb      	adds	r3, r7, #7
   266a2:	781b      	ldrb	r3, [r3, #0]
   266a4:	0018      	movs	r0, r3
   266a6:	4b0b      	ldr	r3, [pc, #44]	; (266d4 <extint_chan_is_detected+0x40>)
   266a8:	4798      	blx	r3
   266aa:	0003      	movs	r3, r0
   266ac:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   266ae:	1dfb      	adds	r3, r7, #7
   266b0:	781b      	ldrb	r3, [r3, #0]
   266b2:	221f      	movs	r2, #31
   266b4:	4013      	ands	r3, r2
   266b6:	2201      	movs	r2, #1
   266b8:	409a      	lsls	r2, r3
   266ba:	0013      	movs	r3, r2
   266bc:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   266be:	68fb      	ldr	r3, [r7, #12]
   266c0:	691b      	ldr	r3, [r3, #16]
   266c2:	68ba      	ldr	r2, [r7, #8]
   266c4:	4013      	ands	r3, r2
   266c6:	1e5a      	subs	r2, r3, #1
   266c8:	4193      	sbcs	r3, r2
   266ca:	b2db      	uxtb	r3, r3
}
   266cc:	0018      	movs	r0, r3
   266ce:	46bd      	mov	sp, r7
   266d0:	b004      	add	sp, #16
   266d2:	bd80      	pop	{r7, pc}
   266d4:	00026649 	.word	0x00026649

000266d8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   266d8:	b580      	push	{r7, lr}
   266da:	b084      	sub	sp, #16
   266dc:	af00      	add	r7, sp, #0
   266de:	0002      	movs	r2, r0
   266e0:	1dfb      	adds	r3, r7, #7
   266e2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   266e4:	1dfb      	adds	r3, r7, #7
   266e6:	781b      	ldrb	r3, [r3, #0]
   266e8:	0018      	movs	r0, r3
   266ea:	4b09      	ldr	r3, [pc, #36]	; (26710 <extint_chan_clear_detected+0x38>)
   266ec:	4798      	blx	r3
   266ee:	0003      	movs	r3, r0
   266f0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   266f2:	1dfb      	adds	r3, r7, #7
   266f4:	781b      	ldrb	r3, [r3, #0]
   266f6:	221f      	movs	r2, #31
   266f8:	4013      	ands	r3, r2
   266fa:	2201      	movs	r2, #1
   266fc:	409a      	lsls	r2, r3
   266fe:	0013      	movs	r3, r2
   26700:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   26702:	68fb      	ldr	r3, [r7, #12]
   26704:	68ba      	ldr	r2, [r7, #8]
   26706:	611a      	str	r2, [r3, #16]
}
   26708:	46c0      	nop			; (mov r8, r8)
   2670a:	46bd      	mov	sp, r7
   2670c:	b004      	add	sp, #16
   2670e:	bd80      	pop	{r7, pc}
   26710:	00026649 	.word	0x00026649

00026714 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26714:	b580      	push	{r7, lr}
   26716:	b082      	sub	sp, #8
   26718:	af00      	add	r7, sp, #0
   2671a:	6078      	str	r0, [r7, #4]
   2671c:	0008      	movs	r0, r1
   2671e:	0011      	movs	r1, r2
   26720:	1cfb      	adds	r3, r7, #3
   26722:	1c02      	adds	r2, r0, #0
   26724:	701a      	strb	r2, [r3, #0]
   26726:	1cbb      	adds	r3, r7, #2
   26728:	1c0a      	adds	r2, r1, #0
   2672a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   2672c:	1cbb      	adds	r3, r7, #2
   2672e:	781b      	ldrb	r3, [r3, #0]
   26730:	2b00      	cmp	r3, #0
   26732:	d001      	beq.n	26738 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   26734:	2317      	movs	r3, #23
   26736:	e019      	b.n	2676c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   26738:	1cfb      	adds	r3, r7, #3
   2673a:	781a      	ldrb	r2, [r3, #0]
   2673c:	4b0d      	ldr	r3, [pc, #52]	; (26774 <extint_register_callback+0x60>)
   2673e:	0092      	lsls	r2, r2, #2
   26740:	58d3      	ldr	r3, [r2, r3]
   26742:	2b00      	cmp	r3, #0
   26744:	d107      	bne.n	26756 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   26746:	1cfb      	adds	r3, r7, #3
   26748:	781a      	ldrb	r2, [r3, #0]
   2674a:	4b0a      	ldr	r3, [pc, #40]	; (26774 <extint_register_callback+0x60>)
   2674c:	0092      	lsls	r2, r2, #2
   2674e:	6879      	ldr	r1, [r7, #4]
   26750:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   26752:	2300      	movs	r3, #0
   26754:	e00a      	b.n	2676c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   26756:	1cfb      	adds	r3, r7, #3
   26758:	781a      	ldrb	r2, [r3, #0]
   2675a:	4b06      	ldr	r3, [pc, #24]	; (26774 <extint_register_callback+0x60>)
   2675c:	0092      	lsls	r2, r2, #2
   2675e:	58d2      	ldr	r2, [r2, r3]
   26760:	687b      	ldr	r3, [r7, #4]
   26762:	429a      	cmp	r2, r3
   26764:	d101      	bne.n	2676a <extint_register_callback+0x56>
		return STATUS_OK;
   26766:	2300      	movs	r3, #0
   26768:	e000      	b.n	2676c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   2676a:	231d      	movs	r3, #29
}
   2676c:	0018      	movs	r0, r3
   2676e:	46bd      	mov	sp, r7
   26770:	b002      	add	sp, #8
   26772:	bd80      	pop	{r7, pc}
   26774:	20005750 	.word	0x20005750

00026778 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   26778:	b580      	push	{r7, lr}
   2677a:	b084      	sub	sp, #16
   2677c:	af00      	add	r7, sp, #0
   2677e:	0002      	movs	r2, r0
   26780:	1dfb      	adds	r3, r7, #7
   26782:	701a      	strb	r2, [r3, #0]
   26784:	1dbb      	adds	r3, r7, #6
   26786:	1c0a      	adds	r2, r1, #0
   26788:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2678a:	1dbb      	adds	r3, r7, #6
   2678c:	781b      	ldrb	r3, [r3, #0]
   2678e:	2b00      	cmp	r3, #0
   26790:	d10e      	bne.n	267b0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   26792:	1dfb      	adds	r3, r7, #7
   26794:	781b      	ldrb	r3, [r3, #0]
   26796:	0018      	movs	r0, r3
   26798:	4b08      	ldr	r3, [pc, #32]	; (267bc <extint_chan_enable_callback+0x44>)
   2679a:	4798      	blx	r3
   2679c:	0003      	movs	r3, r0
   2679e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   267a0:	1dfb      	adds	r3, r7, #7
   267a2:	781b      	ldrb	r3, [r3, #0]
   267a4:	2201      	movs	r2, #1
   267a6:	409a      	lsls	r2, r3
   267a8:	68fb      	ldr	r3, [r7, #12]
   267aa:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   267ac:	2300      	movs	r3, #0
   267ae:	e000      	b.n	267b2 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   267b0:	2317      	movs	r3, #23
}
   267b2:	0018      	movs	r0, r3
   267b4:	46bd      	mov	sp, r7
   267b6:	b004      	add	sp, #16
   267b8:	bd80      	pop	{r7, pc}
   267ba:	46c0      	nop			; (mov r8, r8)
   267bc:	00026649 	.word	0x00026649

000267c0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   267c0:	b580      	push	{r7, lr}
   267c2:	b084      	sub	sp, #16
   267c4:	af00      	add	r7, sp, #0
   267c6:	0002      	movs	r2, r0
   267c8:	1dfb      	adds	r3, r7, #7
   267ca:	701a      	strb	r2, [r3, #0]
   267cc:	1dbb      	adds	r3, r7, #6
   267ce:	1c0a      	adds	r2, r1, #0
   267d0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   267d2:	1dbb      	adds	r3, r7, #6
   267d4:	781b      	ldrb	r3, [r3, #0]
   267d6:	2b00      	cmp	r3, #0
   267d8:	d10e      	bne.n	267f8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   267da:	1dfb      	adds	r3, r7, #7
   267dc:	781b      	ldrb	r3, [r3, #0]
   267de:	0018      	movs	r0, r3
   267e0:	4b08      	ldr	r3, [pc, #32]	; (26804 <extint_chan_disable_callback+0x44>)
   267e2:	4798      	blx	r3
   267e4:	0003      	movs	r3, r0
   267e6:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   267e8:	1dfb      	adds	r3, r7, #7
   267ea:	781b      	ldrb	r3, [r3, #0]
   267ec:	2201      	movs	r2, #1
   267ee:	409a      	lsls	r2, r3
   267f0:	68fb      	ldr	r3, [r7, #12]
   267f2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   267f4:	2300      	movs	r3, #0
   267f6:	e000      	b.n	267fa <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   267f8:	2317      	movs	r3, #23
}
   267fa:	0018      	movs	r0, r3
   267fc:	46bd      	mov	sp, r7
   267fe:	b004      	add	sp, #16
   26800:	bd80      	pop	{r7, pc}
   26802:	46c0      	nop			; (mov r8, r8)
   26804:	00026649 	.word	0x00026649

00026808 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   26808:	b580      	push	{r7, lr}
   2680a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2680c:	4b15      	ldr	r3, [pc, #84]	; (26864 <EIC_Handler+0x5c>)
   2680e:	2200      	movs	r2, #0
   26810:	701a      	strb	r2, [r3, #0]
   26812:	e020      	b.n	26856 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   26814:	4b13      	ldr	r3, [pc, #76]	; (26864 <EIC_Handler+0x5c>)
   26816:	781b      	ldrb	r3, [r3, #0]
   26818:	0018      	movs	r0, r3
   2681a:	4b13      	ldr	r3, [pc, #76]	; (26868 <EIC_Handler+0x60>)
   2681c:	4798      	blx	r3
   2681e:	1e03      	subs	r3, r0, #0
   26820:	d013      	beq.n	2684a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   26822:	4b10      	ldr	r3, [pc, #64]	; (26864 <EIC_Handler+0x5c>)
   26824:	781b      	ldrb	r3, [r3, #0]
   26826:	0018      	movs	r0, r3
   26828:	4b10      	ldr	r3, [pc, #64]	; (2686c <EIC_Handler+0x64>)
   2682a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   2682c:	4b0d      	ldr	r3, [pc, #52]	; (26864 <EIC_Handler+0x5c>)
   2682e:	781b      	ldrb	r3, [r3, #0]
   26830:	001a      	movs	r2, r3
   26832:	4b0f      	ldr	r3, [pc, #60]	; (26870 <EIC_Handler+0x68>)
   26834:	0092      	lsls	r2, r2, #2
   26836:	58d3      	ldr	r3, [r2, r3]
   26838:	2b00      	cmp	r3, #0
   2683a:	d006      	beq.n	2684a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   2683c:	4b09      	ldr	r3, [pc, #36]	; (26864 <EIC_Handler+0x5c>)
   2683e:	781b      	ldrb	r3, [r3, #0]
   26840:	001a      	movs	r2, r3
   26842:	4b0b      	ldr	r3, [pc, #44]	; (26870 <EIC_Handler+0x68>)
   26844:	0092      	lsls	r2, r2, #2
   26846:	58d3      	ldr	r3, [r2, r3]
   26848:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   2684a:	4b06      	ldr	r3, [pc, #24]	; (26864 <EIC_Handler+0x5c>)
   2684c:	781b      	ldrb	r3, [r3, #0]
   2684e:	3301      	adds	r3, #1
   26850:	b2da      	uxtb	r2, r3
   26852:	4b04      	ldr	r3, [pc, #16]	; (26864 <EIC_Handler+0x5c>)
   26854:	701a      	strb	r2, [r3, #0]
   26856:	4b03      	ldr	r3, [pc, #12]	; (26864 <EIC_Handler+0x5c>)
   26858:	781b      	ldrb	r3, [r3, #0]
   2685a:	2b0f      	cmp	r3, #15
   2685c:	d9da      	bls.n	26814 <EIC_Handler+0xc>
			}
		}
	}
}
   2685e:	46c0      	nop			; (mov r8, r8)
   26860:	46bd      	mov	sp, r7
   26862:	bd80      	pop	{r7, pc}
   26864:	2000574c 	.word	0x2000574c
   26868:	00026695 	.word	0x00026695
   2686c:	000266d9 	.word	0x000266d9
   26870:	20005750 	.word	0x20005750

00026874 <system_gclk_chan_get_config_defaults>:
{
   26874:	b580      	push	{r7, lr}
   26876:	b082      	sub	sp, #8
   26878:	af00      	add	r7, sp, #0
   2687a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2687c:	687b      	ldr	r3, [r7, #4]
   2687e:	2200      	movs	r2, #0
   26880:	701a      	strb	r2, [r3, #0]
}
   26882:	46c0      	nop			; (mov r8, r8)
   26884:	46bd      	mov	sp, r7
   26886:	b002      	add	sp, #8
   26888:	bd80      	pop	{r7, pc}
	...

0002688c <system_apb_clock_set_mask>:
{
   2688c:	b580      	push	{r7, lr}
   2688e:	b082      	sub	sp, #8
   26890:	af00      	add	r7, sp, #0
   26892:	0002      	movs	r2, r0
   26894:	6039      	str	r1, [r7, #0]
   26896:	1dfb      	adds	r3, r7, #7
   26898:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2689a:	1dfb      	adds	r3, r7, #7
   2689c:	781b      	ldrb	r3, [r3, #0]
   2689e:	2b01      	cmp	r3, #1
   268a0:	d00a      	beq.n	268b8 <system_apb_clock_set_mask+0x2c>
   268a2:	2b02      	cmp	r3, #2
   268a4:	d00f      	beq.n	268c6 <system_apb_clock_set_mask+0x3a>
   268a6:	2b00      	cmp	r3, #0
   268a8:	d114      	bne.n	268d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   268aa:	4b0e      	ldr	r3, [pc, #56]	; (268e4 <system_apb_clock_set_mask+0x58>)
   268ac:	4a0d      	ldr	r2, [pc, #52]	; (268e4 <system_apb_clock_set_mask+0x58>)
   268ae:	6991      	ldr	r1, [r2, #24]
   268b0:	683a      	ldr	r2, [r7, #0]
   268b2:	430a      	orrs	r2, r1
   268b4:	619a      	str	r2, [r3, #24]
			break;
   268b6:	e00f      	b.n	268d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   268b8:	4b0a      	ldr	r3, [pc, #40]	; (268e4 <system_apb_clock_set_mask+0x58>)
   268ba:	4a0a      	ldr	r2, [pc, #40]	; (268e4 <system_apb_clock_set_mask+0x58>)
   268bc:	69d1      	ldr	r1, [r2, #28]
   268be:	683a      	ldr	r2, [r7, #0]
   268c0:	430a      	orrs	r2, r1
   268c2:	61da      	str	r2, [r3, #28]
			break;
   268c4:	e008      	b.n	268d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   268c6:	4b07      	ldr	r3, [pc, #28]	; (268e4 <system_apb_clock_set_mask+0x58>)
   268c8:	4a06      	ldr	r2, [pc, #24]	; (268e4 <system_apb_clock_set_mask+0x58>)
   268ca:	6a11      	ldr	r1, [r2, #32]
   268cc:	683a      	ldr	r2, [r7, #0]
   268ce:	430a      	orrs	r2, r1
   268d0:	621a      	str	r2, [r3, #32]
			break;
   268d2:	e001      	b.n	268d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   268d4:	2317      	movs	r3, #23
   268d6:	e000      	b.n	268da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   268d8:	2300      	movs	r3, #0
}
   268da:	0018      	movs	r0, r3
   268dc:	46bd      	mov	sp, r7
   268de:	b002      	add	sp, #8
   268e0:	bd80      	pop	{r7, pc}
   268e2:	46c0      	nop			; (mov r8, r8)
   268e4:	40000400 	.word	0x40000400

000268e8 <system_pinmux_get_config_defaults>:
{
   268e8:	b580      	push	{r7, lr}
   268ea:	b082      	sub	sp, #8
   268ec:	af00      	add	r7, sp, #0
   268ee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   268f0:	687b      	ldr	r3, [r7, #4]
   268f2:	2280      	movs	r2, #128	; 0x80
   268f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   268f6:	687b      	ldr	r3, [r7, #4]
   268f8:	2200      	movs	r2, #0
   268fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   268fc:	687b      	ldr	r3, [r7, #4]
   268fe:	2201      	movs	r2, #1
   26900:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26902:	687b      	ldr	r3, [r7, #4]
   26904:	2200      	movs	r2, #0
   26906:	70da      	strb	r2, [r3, #3]
}
   26908:	46c0      	nop			; (mov r8, r8)
   2690a:	46bd      	mov	sp, r7
   2690c:	b002      	add	sp, #8
   2690e:	bd80      	pop	{r7, pc}

00026910 <system_interrupt_enable>:
{
   26910:	b580      	push	{r7, lr}
   26912:	b082      	sub	sp, #8
   26914:	af00      	add	r7, sp, #0
   26916:	0002      	movs	r2, r0
   26918:	1dfb      	adds	r3, r7, #7
   2691a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2691c:	4b06      	ldr	r3, [pc, #24]	; (26938 <system_interrupt_enable+0x28>)
   2691e:	1dfa      	adds	r2, r7, #7
   26920:	7812      	ldrb	r2, [r2, #0]
   26922:	0011      	movs	r1, r2
   26924:	221f      	movs	r2, #31
   26926:	400a      	ands	r2, r1
   26928:	2101      	movs	r1, #1
   2692a:	4091      	lsls	r1, r2
   2692c:	000a      	movs	r2, r1
   2692e:	601a      	str	r2, [r3, #0]
}
   26930:	46c0      	nop			; (mov r8, r8)
   26932:	46bd      	mov	sp, r7
   26934:	b002      	add	sp, #8
   26936:	bd80      	pop	{r7, pc}
   26938:	e000e100 	.word	0xe000e100

0002693c <_extint_get_eic_from_channel>:
{
   2693c:	b580      	push	{r7, lr}
   2693e:	b084      	sub	sp, #16
   26940:	af00      	add	r7, sp, #0
   26942:	0002      	movs	r2, r0
   26944:	1dfb      	adds	r3, r7, #7
   26946:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26948:	230f      	movs	r3, #15
   2694a:	18fb      	adds	r3, r7, r3
   2694c:	1dfa      	adds	r2, r7, #7
   2694e:	7812      	ldrb	r2, [r2, #0]
   26950:	0952      	lsrs	r2, r2, #5
   26952:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   26954:	230f      	movs	r3, #15
   26956:	18fb      	adds	r3, r7, r3
   26958:	781b      	ldrb	r3, [r3, #0]
   2695a:	2b00      	cmp	r3, #0
   2695c:	d10c      	bne.n	26978 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2695e:	4b09      	ldr	r3, [pc, #36]	; (26984 <_extint_get_eic_from_channel+0x48>)
   26960:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   26962:	230f      	movs	r3, #15
   26964:	18fb      	adds	r3, r7, r3
   26966:	781b      	ldrb	r3, [r3, #0]
   26968:	009b      	lsls	r3, r3, #2
   2696a:	2210      	movs	r2, #16
   2696c:	4694      	mov	ip, r2
   2696e:	44bc      	add	ip, r7
   26970:	4463      	add	r3, ip
   26972:	3b08      	subs	r3, #8
   26974:	681b      	ldr	r3, [r3, #0]
   26976:	e000      	b.n	2697a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   26978:	2300      	movs	r3, #0
}
   2697a:	0018      	movs	r0, r3
   2697c:	46bd      	mov	sp, r7
   2697e:	b004      	add	sp, #16
   26980:	bd80      	pop	{r7, pc}
   26982:	46c0      	nop			; (mov r8, r8)
   26984:	40001800 	.word	0x40001800

00026988 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   26988:	b580      	push	{r7, lr}
   2698a:	b082      	sub	sp, #8
   2698c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2698e:	4b0f      	ldr	r3, [pc, #60]	; (269cc <extint_is_syncing+0x44>)
   26990:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26992:	2300      	movs	r3, #0
   26994:	607b      	str	r3, [r7, #4]
   26996:	e011      	b.n	269bc <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   26998:	687b      	ldr	r3, [r7, #4]
   2699a:	009b      	lsls	r3, r3, #2
   2699c:	2208      	movs	r2, #8
   2699e:	4694      	mov	ip, r2
   269a0:	44bc      	add	ip, r7
   269a2:	4463      	add	r3, ip
   269a4:	3b08      	subs	r3, #8
   269a6:	681b      	ldr	r3, [r3, #0]
   269a8:	785b      	ldrb	r3, [r3, #1]
   269aa:	b2db      	uxtb	r3, r3
   269ac:	b25b      	sxtb	r3, r3
   269ae:	2b00      	cmp	r3, #0
   269b0:	da01      	bge.n	269b6 <extint_is_syncing+0x2e>
			return true;
   269b2:	2301      	movs	r3, #1
   269b4:	e006      	b.n	269c4 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   269b6:	687b      	ldr	r3, [r7, #4]
   269b8:	3301      	adds	r3, #1
   269ba:	607b      	str	r3, [r7, #4]
   269bc:	687b      	ldr	r3, [r7, #4]
   269be:	2b00      	cmp	r3, #0
   269c0:	d0ea      	beq.n	26998 <extint_is_syncing+0x10>
		}
	}
	return false;
   269c2:	2300      	movs	r3, #0
}
   269c4:	0018      	movs	r0, r3
   269c6:	46bd      	mov	sp, r7
   269c8:	b002      	add	sp, #8
   269ca:	bd80      	pop	{r7, pc}
   269cc:	40001800 	.word	0x40001800

000269d0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   269d0:	b580      	push	{r7, lr}
   269d2:	b084      	sub	sp, #16
   269d4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   269d6:	4b2d      	ldr	r3, [pc, #180]	; (26a8c <_system_extint_init+0xbc>)
   269d8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   269da:	2140      	movs	r1, #64	; 0x40
   269dc:	2000      	movs	r0, #0
   269de:	4b2c      	ldr	r3, [pc, #176]	; (26a90 <_system_extint_init+0xc0>)
   269e0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   269e2:	003b      	movs	r3, r7
   269e4:	0018      	movs	r0, r3
   269e6:	4b2b      	ldr	r3, [pc, #172]	; (26a94 <_system_extint_init+0xc4>)
   269e8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   269ea:	003b      	movs	r3, r7
   269ec:	2200      	movs	r2, #0
   269ee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   269f0:	003b      	movs	r3, r7
   269f2:	0019      	movs	r1, r3
   269f4:	2005      	movs	r0, #5
   269f6:	4b28      	ldr	r3, [pc, #160]	; (26a98 <_system_extint_init+0xc8>)
   269f8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   269fa:	2005      	movs	r0, #5
   269fc:	4b27      	ldr	r3, [pc, #156]	; (26a9c <_system_extint_init+0xcc>)
   269fe:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26a00:	2300      	movs	r3, #0
   26a02:	60fb      	str	r3, [r7, #12]
   26a04:	e018      	b.n	26a38 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   26a06:	68fb      	ldr	r3, [r7, #12]
   26a08:	009b      	lsls	r3, r3, #2
   26a0a:	2210      	movs	r2, #16
   26a0c:	4694      	mov	ip, r2
   26a0e:	44bc      	add	ip, r7
   26a10:	4463      	add	r3, ip
   26a12:	3b0c      	subs	r3, #12
   26a14:	681a      	ldr	r2, [r3, #0]
   26a16:	68fb      	ldr	r3, [r7, #12]
   26a18:	009b      	lsls	r3, r3, #2
   26a1a:	2110      	movs	r1, #16
   26a1c:	468c      	mov	ip, r1
   26a1e:	44bc      	add	ip, r7
   26a20:	4463      	add	r3, ip
   26a22:	3b0c      	subs	r3, #12
   26a24:	681b      	ldr	r3, [r3, #0]
   26a26:	781b      	ldrb	r3, [r3, #0]
   26a28:	b2db      	uxtb	r3, r3
   26a2a:	2101      	movs	r1, #1
   26a2c:	430b      	orrs	r3, r1
   26a2e:	b2db      	uxtb	r3, r3
   26a30:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26a32:	68fb      	ldr	r3, [r7, #12]
   26a34:	3301      	adds	r3, #1
   26a36:	60fb      	str	r3, [r7, #12]
   26a38:	68fb      	ldr	r3, [r7, #12]
   26a3a:	2b00      	cmp	r3, #0
   26a3c:	d0e3      	beq.n	26a06 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   26a3e:	46c0      	nop			; (mov r8, r8)
   26a40:	4b17      	ldr	r3, [pc, #92]	; (26aa0 <_system_extint_init+0xd0>)
   26a42:	4798      	blx	r3
   26a44:	1e03      	subs	r3, r0, #0
   26a46:	d1fb      	bne.n	26a40 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26a48:	230b      	movs	r3, #11
   26a4a:	18fb      	adds	r3, r7, r3
   26a4c:	2200      	movs	r2, #0
   26a4e:	701a      	strb	r2, [r3, #0]
   26a50:	e00d      	b.n	26a6e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   26a52:	230b      	movs	r3, #11
   26a54:	18fb      	adds	r3, r7, r3
   26a56:	781a      	ldrb	r2, [r3, #0]
   26a58:	4b12      	ldr	r3, [pc, #72]	; (26aa4 <_system_extint_init+0xd4>)
   26a5a:	0092      	lsls	r2, r2, #2
   26a5c:	2100      	movs	r1, #0
   26a5e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   26a60:	230b      	movs	r3, #11
   26a62:	18fb      	adds	r3, r7, r3
   26a64:	781a      	ldrb	r2, [r3, #0]
   26a66:	230b      	movs	r3, #11
   26a68:	18fb      	adds	r3, r7, r3
   26a6a:	3201      	adds	r2, #1
   26a6c:	701a      	strb	r2, [r3, #0]
   26a6e:	230b      	movs	r3, #11
   26a70:	18fb      	adds	r3, r7, r3
   26a72:	781b      	ldrb	r3, [r3, #0]
   26a74:	2b0f      	cmp	r3, #15
   26a76:	d9ec      	bls.n	26a52 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   26a78:	2004      	movs	r0, #4
   26a7a:	4b0b      	ldr	r3, [pc, #44]	; (26aa8 <_system_extint_init+0xd8>)
   26a7c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   26a7e:	4b0b      	ldr	r3, [pc, #44]	; (26aac <_system_extint_init+0xdc>)
   26a80:	4798      	blx	r3
}
   26a82:	46c0      	nop			; (mov r8, r8)
   26a84:	46bd      	mov	sp, r7
   26a86:	b004      	add	sp, #16
   26a88:	bd80      	pop	{r7, pc}
   26a8a:	46c0      	nop			; (mov r8, r8)
   26a8c:	40001800 	.word	0x40001800
   26a90:	0002688d 	.word	0x0002688d
   26a94:	00026875 	.word	0x00026875
   26a98:	0002a0fd 	.word	0x0002a0fd
   26a9c:	0002a141 	.word	0x0002a141
   26aa0:	00026989 	.word	0x00026989
   26aa4:	20005750 	.word	0x20005750
   26aa8:	00026911 	.word	0x00026911
   26aac:	00026ab1 	.word	0x00026ab1

00026ab0 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   26ab0:	b580      	push	{r7, lr}
   26ab2:	b082      	sub	sp, #8
   26ab4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26ab6:	4b15      	ldr	r3, [pc, #84]	; (26b0c <_extint_enable+0x5c>)
   26ab8:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26aba:	2300      	movs	r3, #0
   26abc:	607b      	str	r3, [r7, #4]
   26abe:	e018      	b.n	26af2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   26ac0:	687b      	ldr	r3, [r7, #4]
   26ac2:	009b      	lsls	r3, r3, #2
   26ac4:	2208      	movs	r2, #8
   26ac6:	4694      	mov	ip, r2
   26ac8:	44bc      	add	ip, r7
   26aca:	4463      	add	r3, ip
   26acc:	3b08      	subs	r3, #8
   26ace:	681a      	ldr	r2, [r3, #0]
   26ad0:	687b      	ldr	r3, [r7, #4]
   26ad2:	009b      	lsls	r3, r3, #2
   26ad4:	2108      	movs	r1, #8
   26ad6:	468c      	mov	ip, r1
   26ad8:	44bc      	add	ip, r7
   26ada:	4463      	add	r3, ip
   26adc:	3b08      	subs	r3, #8
   26ade:	681b      	ldr	r3, [r3, #0]
   26ae0:	781b      	ldrb	r3, [r3, #0]
   26ae2:	b2db      	uxtb	r3, r3
   26ae4:	2102      	movs	r1, #2
   26ae6:	430b      	orrs	r3, r1
   26ae8:	b2db      	uxtb	r3, r3
   26aea:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   26aec:	687b      	ldr	r3, [r7, #4]
   26aee:	3301      	adds	r3, #1
   26af0:	607b      	str	r3, [r7, #4]
   26af2:	687b      	ldr	r3, [r7, #4]
   26af4:	2b00      	cmp	r3, #0
   26af6:	d0e3      	beq.n	26ac0 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   26af8:	46c0      	nop			; (mov r8, r8)
   26afa:	4b05      	ldr	r3, [pc, #20]	; (26b10 <_extint_enable+0x60>)
   26afc:	4798      	blx	r3
   26afe:	1e03      	subs	r3, r0, #0
   26b00:	d1fb      	bne.n	26afa <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   26b02:	46c0      	nop			; (mov r8, r8)
   26b04:	46bd      	mov	sp, r7
   26b06:	b002      	add	sp, #8
   26b08:	bd80      	pop	{r7, pc}
   26b0a:	46c0      	nop			; (mov r8, r8)
   26b0c:	40001800 	.word	0x40001800
   26b10:	00026989 	.word	0x00026989

00026b14 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   26b14:	b580      	push	{r7, lr}
   26b16:	b082      	sub	sp, #8
   26b18:	af00      	add	r7, sp, #0
   26b1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   26b1c:	687b      	ldr	r3, [r7, #4]
   26b1e:	2200      	movs	r2, #0
   26b20:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   26b22:	687b      	ldr	r3, [r7, #4]
   26b24:	2200      	movs	r2, #0
   26b26:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   26b28:	687b      	ldr	r3, [r7, #4]
   26b2a:	2201      	movs	r2, #1
   26b2c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   26b2e:	687b      	ldr	r3, [r7, #4]
   26b30:	2201      	movs	r2, #1
   26b32:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   26b34:	687b      	ldr	r3, [r7, #4]
   26b36:	2200      	movs	r2, #0
   26b38:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   26b3a:	687b      	ldr	r3, [r7, #4]
   26b3c:	2202      	movs	r2, #2
   26b3e:	72da      	strb	r2, [r3, #11]
}
   26b40:	46c0      	nop			; (mov r8, r8)
   26b42:	46bd      	mov	sp, r7
   26b44:	b002      	add	sp, #8
   26b46:	bd80      	pop	{r7, pc}

00026b48 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   26b48:	b580      	push	{r7, lr}
   26b4a:	b086      	sub	sp, #24
   26b4c:	af00      	add	r7, sp, #0
   26b4e:	0002      	movs	r2, r0
   26b50:	6039      	str	r1, [r7, #0]
   26b52:	1dfb      	adds	r3, r7, #7
   26b54:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26b56:	2308      	movs	r3, #8
   26b58:	18fb      	adds	r3, r7, r3
   26b5a:	0018      	movs	r0, r3
   26b5c:	4b36      	ldr	r3, [pc, #216]	; (26c38 <extint_chan_set_config+0xf0>)
   26b5e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   26b60:	683b      	ldr	r3, [r7, #0]
   26b62:	685b      	ldr	r3, [r3, #4]
   26b64:	b2da      	uxtb	r2, r3
   26b66:	2308      	movs	r3, #8
   26b68:	18fb      	adds	r3, r7, r3
   26b6a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26b6c:	2308      	movs	r3, #8
   26b6e:	18fb      	adds	r3, r7, r3
   26b70:	2200      	movs	r2, #0
   26b72:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   26b74:	683b      	ldr	r3, [r7, #0]
   26b76:	7a1a      	ldrb	r2, [r3, #8]
   26b78:	2308      	movs	r3, #8
   26b7a:	18fb      	adds	r3, r7, r3
   26b7c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   26b7e:	683b      	ldr	r3, [r7, #0]
   26b80:	681b      	ldr	r3, [r3, #0]
   26b82:	b2db      	uxtb	r3, r3
   26b84:	2208      	movs	r2, #8
   26b86:	18ba      	adds	r2, r7, r2
   26b88:	0011      	movs	r1, r2
   26b8a:	0018      	movs	r0, r3
   26b8c:	4b2b      	ldr	r3, [pc, #172]	; (26c3c <extint_chan_set_config+0xf4>)
   26b8e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   26b90:	1dfb      	adds	r3, r7, #7
   26b92:	781b      	ldrb	r3, [r3, #0]
   26b94:	0018      	movs	r0, r3
   26b96:	4b2a      	ldr	r3, [pc, #168]	; (26c40 <extint_chan_set_config+0xf8>)
   26b98:	4798      	blx	r3
   26b9a:	0003      	movs	r3, r0
   26b9c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   26b9e:	1dfb      	adds	r3, r7, #7
   26ba0:	781b      	ldrb	r3, [r3, #0]
   26ba2:	2207      	movs	r2, #7
   26ba4:	4013      	ands	r3, r2
   26ba6:	009b      	lsls	r3, r3, #2
   26ba8:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   26baa:	683b      	ldr	r3, [r7, #0]
   26bac:	7adb      	ldrb	r3, [r3, #11]
   26bae:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   26bb0:	683b      	ldr	r3, [r7, #0]
   26bb2:	7a9b      	ldrb	r3, [r3, #10]
   26bb4:	2b00      	cmp	r3, #0
   26bb6:	d003      	beq.n	26bc0 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   26bb8:	697b      	ldr	r3, [r7, #20]
   26bba:	2208      	movs	r2, #8
   26bbc:	4313      	orrs	r3, r2
   26bbe:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   26bc0:	1dfb      	adds	r3, r7, #7
   26bc2:	781b      	ldrb	r3, [r3, #0]
   26bc4:	08db      	lsrs	r3, r3, #3
   26bc6:	b2db      	uxtb	r3, r3
   26bc8:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   26bca:	1dfb      	adds	r3, r7, #7
   26bcc:	781b      	ldrb	r3, [r3, #0]
   26bce:	08db      	lsrs	r3, r3, #3
   26bd0:	b2db      	uxtb	r3, r3
   26bd2:	001a      	movs	r2, r3
   26bd4:	693b      	ldr	r3, [r7, #16]
   26bd6:	3206      	adds	r2, #6
   26bd8:	0092      	lsls	r2, r2, #2
   26bda:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26bdc:	210f      	movs	r1, #15
   26bde:	68fa      	ldr	r2, [r7, #12]
   26be0:	4091      	lsls	r1, r2
   26be2:	000a      	movs	r2, r1
   26be4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26be6:	401a      	ands	r2, r3
			(new_config << config_pos);
   26be8:	6979      	ldr	r1, [r7, #20]
   26bea:	68fb      	ldr	r3, [r7, #12]
   26bec:	4099      	lsls	r1, r3
   26bee:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   26bf0:	431a      	orrs	r2, r3
   26bf2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   26bf4:	693b      	ldr	r3, [r7, #16]
   26bf6:	1d82      	adds	r2, r0, #6
   26bf8:	0092      	lsls	r2, r2, #2
   26bfa:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   26bfc:	683b      	ldr	r3, [r7, #0]
   26bfe:	7a5b      	ldrb	r3, [r3, #9]
   26c00:	2b00      	cmp	r3, #0
   26c02:	d00a      	beq.n	26c1a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   26c04:	693b      	ldr	r3, [r7, #16]
   26c06:	695a      	ldr	r2, [r3, #20]
   26c08:	1dfb      	adds	r3, r7, #7
   26c0a:	781b      	ldrb	r3, [r3, #0]
   26c0c:	2101      	movs	r1, #1
   26c0e:	4099      	lsls	r1, r3
   26c10:	000b      	movs	r3, r1
   26c12:	431a      	orrs	r2, r3
   26c14:	693b      	ldr	r3, [r7, #16]
   26c16:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   26c18:	e00a      	b.n	26c30 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   26c1a:	693b      	ldr	r3, [r7, #16]
   26c1c:	695b      	ldr	r3, [r3, #20]
   26c1e:	1dfa      	adds	r2, r7, #7
   26c20:	7812      	ldrb	r2, [r2, #0]
   26c22:	2101      	movs	r1, #1
   26c24:	4091      	lsls	r1, r2
   26c26:	000a      	movs	r2, r1
   26c28:	43d2      	mvns	r2, r2
   26c2a:	401a      	ands	r2, r3
   26c2c:	693b      	ldr	r3, [r7, #16]
   26c2e:	615a      	str	r2, [r3, #20]
}
   26c30:	46c0      	nop			; (mov r8, r8)
   26c32:	46bd      	mov	sp, r7
   26c34:	b006      	add	sp, #24
   26c36:	bd80      	pop	{r7, pc}
   26c38:	000268e9 	.word	0x000268e9
   26c3c:	0002a45d 	.word	0x0002a45d
   26c40:	0002693d 	.word	0x0002693d

00026c44 <system_pinmux_get_config_defaults>:
{
   26c44:	b580      	push	{r7, lr}
   26c46:	b082      	sub	sp, #8
   26c48:	af00      	add	r7, sp, #0
   26c4a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   26c4c:	687b      	ldr	r3, [r7, #4]
   26c4e:	2280      	movs	r2, #128	; 0x80
   26c50:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   26c52:	687b      	ldr	r3, [r7, #4]
   26c54:	2200      	movs	r2, #0
   26c56:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   26c58:	687b      	ldr	r3, [r7, #4]
   26c5a:	2201      	movs	r2, #1
   26c5c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   26c5e:	687b      	ldr	r3, [r7, #4]
   26c60:	2200      	movs	r2, #0
   26c62:	70da      	strb	r2, [r3, #3]
}
   26c64:	46c0      	nop			; (mov r8, r8)
   26c66:	46bd      	mov	sp, r7
   26c68:	b002      	add	sp, #8
   26c6a:	bd80      	pop	{r7, pc}

00026c6c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   26c6c:	b580      	push	{r7, lr}
   26c6e:	b084      	sub	sp, #16
   26c70:	af00      	add	r7, sp, #0
   26c72:	0002      	movs	r2, r0
   26c74:	6039      	str	r1, [r7, #0]
   26c76:	1dfb      	adds	r3, r7, #7
   26c78:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   26c7a:	230c      	movs	r3, #12
   26c7c:	18fb      	adds	r3, r7, r3
   26c7e:	0018      	movs	r0, r3
   26c80:	4b10      	ldr	r3, [pc, #64]	; (26cc4 <port_pin_set_config+0x58>)
   26c82:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   26c84:	230c      	movs	r3, #12
   26c86:	18fb      	adds	r3, r7, r3
   26c88:	2280      	movs	r2, #128	; 0x80
   26c8a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   26c8c:	683b      	ldr	r3, [r7, #0]
   26c8e:	781a      	ldrb	r2, [r3, #0]
   26c90:	230c      	movs	r3, #12
   26c92:	18fb      	adds	r3, r7, r3
   26c94:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   26c96:	683b      	ldr	r3, [r7, #0]
   26c98:	785a      	ldrb	r2, [r3, #1]
   26c9a:	230c      	movs	r3, #12
   26c9c:	18fb      	adds	r3, r7, r3
   26c9e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   26ca0:	683b      	ldr	r3, [r7, #0]
   26ca2:	789a      	ldrb	r2, [r3, #2]
   26ca4:	230c      	movs	r3, #12
   26ca6:	18fb      	adds	r3, r7, r3
   26ca8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   26caa:	230c      	movs	r3, #12
   26cac:	18fa      	adds	r2, r7, r3
   26cae:	1dfb      	adds	r3, r7, #7
   26cb0:	781b      	ldrb	r3, [r3, #0]
   26cb2:	0011      	movs	r1, r2
   26cb4:	0018      	movs	r0, r3
   26cb6:	4b04      	ldr	r3, [pc, #16]	; (26cc8 <port_pin_set_config+0x5c>)
   26cb8:	4798      	blx	r3
}
   26cba:	46c0      	nop			; (mov r8, r8)
   26cbc:	46bd      	mov	sp, r7
   26cbe:	b004      	add	sp, #16
   26cc0:	bd80      	pop	{r7, pc}
   26cc2:	46c0      	nop			; (mov r8, r8)
   26cc4:	00026c45 	.word	0x00026c45
   26cc8:	0002a45d 	.word	0x0002a45d

00026ccc <system_gclk_chan_get_config_defaults>:
{
   26ccc:	b580      	push	{r7, lr}
   26cce:	b082      	sub	sp, #8
   26cd0:	af00      	add	r7, sp, #0
   26cd2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   26cd4:	687b      	ldr	r3, [r7, #4]
   26cd6:	2200      	movs	r2, #0
   26cd8:	701a      	strb	r2, [r3, #0]
}
   26cda:	46c0      	nop			; (mov r8, r8)
   26cdc:	46bd      	mov	sp, r7
   26cde:	b002      	add	sp, #8
   26ce0:	bd80      	pop	{r7, pc}
	...

00026ce4 <system_apb_clock_set_mask>:
{
   26ce4:	b580      	push	{r7, lr}
   26ce6:	b082      	sub	sp, #8
   26ce8:	af00      	add	r7, sp, #0
   26cea:	0002      	movs	r2, r0
   26cec:	6039      	str	r1, [r7, #0]
   26cee:	1dfb      	adds	r3, r7, #7
   26cf0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26cf2:	1dfb      	adds	r3, r7, #7
   26cf4:	781b      	ldrb	r3, [r3, #0]
   26cf6:	2b01      	cmp	r3, #1
   26cf8:	d00a      	beq.n	26d10 <system_apb_clock_set_mask+0x2c>
   26cfa:	2b02      	cmp	r3, #2
   26cfc:	d00f      	beq.n	26d1e <system_apb_clock_set_mask+0x3a>
   26cfe:	2b00      	cmp	r3, #0
   26d00:	d114      	bne.n	26d2c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26d02:	4b0e      	ldr	r3, [pc, #56]	; (26d3c <system_apb_clock_set_mask+0x58>)
   26d04:	4a0d      	ldr	r2, [pc, #52]	; (26d3c <system_apb_clock_set_mask+0x58>)
   26d06:	6991      	ldr	r1, [r2, #24]
   26d08:	683a      	ldr	r2, [r7, #0]
   26d0a:	430a      	orrs	r2, r1
   26d0c:	619a      	str	r2, [r3, #24]
			break;
   26d0e:	e00f      	b.n	26d30 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26d10:	4b0a      	ldr	r3, [pc, #40]	; (26d3c <system_apb_clock_set_mask+0x58>)
   26d12:	4a0a      	ldr	r2, [pc, #40]	; (26d3c <system_apb_clock_set_mask+0x58>)
   26d14:	69d1      	ldr	r1, [r2, #28]
   26d16:	683a      	ldr	r2, [r7, #0]
   26d18:	430a      	orrs	r2, r1
   26d1a:	61da      	str	r2, [r3, #28]
			break;
   26d1c:	e008      	b.n	26d30 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26d1e:	4b07      	ldr	r3, [pc, #28]	; (26d3c <system_apb_clock_set_mask+0x58>)
   26d20:	4a06      	ldr	r2, [pc, #24]	; (26d3c <system_apb_clock_set_mask+0x58>)
   26d22:	6a11      	ldr	r1, [r2, #32]
   26d24:	683a      	ldr	r2, [r7, #0]
   26d26:	430a      	orrs	r2, r1
   26d28:	621a      	str	r2, [r3, #32]
			break;
   26d2a:	e001      	b.n	26d30 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26d2c:	2317      	movs	r3, #23
   26d2e:	e000      	b.n	26d32 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26d30:	2300      	movs	r3, #0
}
   26d32:	0018      	movs	r0, r3
   26d34:	46bd      	mov	sp, r7
   26d36:	b002      	add	sp, #8
   26d38:	bd80      	pop	{r7, pc}
   26d3a:	46c0      	nop			; (mov r8, r8)
   26d3c:	40000400 	.word	0x40000400

00026d40 <system_interrupt_enable>:
{
   26d40:	b580      	push	{r7, lr}
   26d42:	b082      	sub	sp, #8
   26d44:	af00      	add	r7, sp, #0
   26d46:	0002      	movs	r2, r0
   26d48:	1dfb      	adds	r3, r7, #7
   26d4a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26d4c:	4b06      	ldr	r3, [pc, #24]	; (26d68 <system_interrupt_enable+0x28>)
   26d4e:	1dfa      	adds	r2, r7, #7
   26d50:	7812      	ldrb	r2, [r2, #0]
   26d52:	0011      	movs	r1, r2
   26d54:	221f      	movs	r2, #31
   26d56:	400a      	ands	r2, r1
   26d58:	2101      	movs	r1, #1
   26d5a:	4091      	lsls	r1, r2
   26d5c:	000a      	movs	r2, r1
   26d5e:	601a      	str	r2, [r3, #0]
}
   26d60:	46c0      	nop			; (mov r8, r8)
   26d62:	46bd      	mov	sp, r7
   26d64:	b002      	add	sp, #8
   26d66:	bd80      	pop	{r7, pc}
   26d68:	e000e100 	.word	0xe000e100

00026d6c <system_interrupt_disable>:
{
   26d6c:	b580      	push	{r7, lr}
   26d6e:	b082      	sub	sp, #8
   26d70:	af00      	add	r7, sp, #0
   26d72:	0002      	movs	r2, r0
   26d74:	1dfb      	adds	r3, r7, #7
   26d76:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26d78:	4a07      	ldr	r2, [pc, #28]	; (26d98 <system_interrupt_disable+0x2c>)
   26d7a:	1dfb      	adds	r3, r7, #7
   26d7c:	781b      	ldrb	r3, [r3, #0]
   26d7e:	0019      	movs	r1, r3
   26d80:	231f      	movs	r3, #31
   26d82:	400b      	ands	r3, r1
   26d84:	2101      	movs	r1, #1
   26d86:	4099      	lsls	r1, r3
   26d88:	000b      	movs	r3, r1
   26d8a:	0019      	movs	r1, r3
   26d8c:	2380      	movs	r3, #128	; 0x80
   26d8e:	50d1      	str	r1, [r2, r3]
}
   26d90:	46c0      	nop			; (mov r8, r8)
   26d92:	46bd      	mov	sp, r7
   26d94:	b002      	add	sp, #8
   26d96:	bd80      	pop	{r7, pc}
   26d98:	e000e100 	.word	0xe000e100

00026d9c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   26d9c:	b580      	push	{r7, lr}
   26d9e:	b084      	sub	sp, #16
   26da0:	af00      	add	r7, sp, #0
   26da2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26da4:	687b      	ldr	r3, [r7, #4]
   26da6:	681b      	ldr	r3, [r3, #0]
   26da8:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   26daa:	68fb      	ldr	r3, [r7, #12]
   26dac:	7a9b      	ldrb	r3, [r3, #10]
   26dae:	b2db      	uxtb	r3, r3
   26db0:	b25b      	sxtb	r3, r3
   26db2:	2b00      	cmp	r3, #0
   26db4:	da01      	bge.n	26dba <rtc_calendar_is_syncing+0x1e>
                return true;
   26db6:	2301      	movs	r3, #1
   26db8:	e000      	b.n	26dbc <rtc_calendar_is_syncing+0x20>
        }

        return false;
   26dba:	2300      	movs	r3, #0
}
   26dbc:	0018      	movs	r0, r3
   26dbe:	46bd      	mov	sp, r7
   26dc0:	b004      	add	sp, #16
   26dc2:	bd80      	pop	{r7, pc}

00026dc4 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   26dc4:	b580      	push	{r7, lr}
   26dc6:	b084      	sub	sp, #16
   26dc8:	af00      	add	r7, sp, #0
   26dca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26dcc:	687b      	ldr	r3, [r7, #4]
   26dce:	681b      	ldr	r3, [r3, #0]
   26dd0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   26dd2:	2003      	movs	r0, #3
   26dd4:	4b0a      	ldr	r3, [pc, #40]	; (26e00 <rtc_calendar_enable+0x3c>)
   26dd6:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26dd8:	46c0      	nop			; (mov r8, r8)
   26dda:	687b      	ldr	r3, [r7, #4]
   26ddc:	0018      	movs	r0, r3
   26dde:	4b09      	ldr	r3, [pc, #36]	; (26e04 <rtc_calendar_enable+0x40>)
   26de0:	4798      	blx	r3
   26de2:	1e03      	subs	r3, r0, #0
   26de4:	d1f9      	bne.n	26dda <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   26de6:	68fb      	ldr	r3, [r7, #12]
   26de8:	881b      	ldrh	r3, [r3, #0]
   26dea:	b29b      	uxth	r3, r3
   26dec:	2202      	movs	r2, #2
   26dee:	4313      	orrs	r3, r2
   26df0:	b29a      	uxth	r2, r3
   26df2:	68fb      	ldr	r3, [r7, #12]
   26df4:	801a      	strh	r2, [r3, #0]
}
   26df6:	46c0      	nop			; (mov r8, r8)
   26df8:	46bd      	mov	sp, r7
   26dfa:	b004      	add	sp, #16
   26dfc:	bd80      	pop	{r7, pc}
   26dfe:	46c0      	nop			; (mov r8, r8)
   26e00:	00026d41 	.word	0x00026d41
   26e04:	00026d9d 	.word	0x00026d9d

00026e08 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   26e08:	b580      	push	{r7, lr}
   26e0a:	b084      	sub	sp, #16
   26e0c:	af00      	add	r7, sp, #0
   26e0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26e10:	687b      	ldr	r3, [r7, #4]
   26e12:	681b      	ldr	r3, [r3, #0]
   26e14:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   26e16:	2003      	movs	r0, #3
   26e18:	4b0d      	ldr	r3, [pc, #52]	; (26e50 <rtc_calendar_disable+0x48>)
   26e1a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   26e1c:	46c0      	nop			; (mov r8, r8)
   26e1e:	687b      	ldr	r3, [r7, #4]
   26e20:	0018      	movs	r0, r3
   26e22:	4b0c      	ldr	r3, [pc, #48]	; (26e54 <rtc_calendar_disable+0x4c>)
   26e24:	4798      	blx	r3
   26e26:	1e03      	subs	r3, r0, #0
   26e28:	d1f9      	bne.n	26e1e <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   26e2a:	68fb      	ldr	r3, [r7, #12]
   26e2c:	22c1      	movs	r2, #193	; 0xc1
   26e2e:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   26e30:	68fb      	ldr	r3, [r7, #12]
   26e32:	22c1      	movs	r2, #193	; 0xc1
   26e34:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   26e36:	68fb      	ldr	r3, [r7, #12]
   26e38:	881b      	ldrh	r3, [r3, #0]
   26e3a:	b29b      	uxth	r3, r3
   26e3c:	2202      	movs	r2, #2
   26e3e:	4393      	bics	r3, r2
   26e40:	b29a      	uxth	r2, r3
   26e42:	68fb      	ldr	r3, [r7, #12]
   26e44:	801a      	strh	r2, [r3, #0]
}
   26e46:	46c0      	nop			; (mov r8, r8)
   26e48:	46bd      	mov	sp, r7
   26e4a:	b004      	add	sp, #16
   26e4c:	bd80      	pop	{r7, pc}
   26e4e:	46c0      	nop			; (mov r8, r8)
   26e50:	00026d6d 	.word	0x00026d6d
   26e54:	00026d9d 	.word	0x00026d9d

00026e58 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   26e58:	b580      	push	{r7, lr}
   26e5a:	b084      	sub	sp, #16
   26e5c:	af00      	add	r7, sp, #0
   26e5e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26e60:	687b      	ldr	r3, [r7, #4]
   26e62:	681b      	ldr	r3, [r3, #0]
   26e64:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   26e66:	687b      	ldr	r3, [r7, #4]
   26e68:	0018      	movs	r0, r3
   26e6a:	4b0d      	ldr	r3, [pc, #52]	; (26ea0 <rtc_calendar_reset+0x48>)
   26e6c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   26e6e:	687b      	ldr	r3, [r7, #4]
   26e70:	2200      	movs	r2, #0
   26e72:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   26e74:	687b      	ldr	r3, [r7, #4]
   26e76:	2200      	movs	r2, #0
   26e78:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   26e7a:	46c0      	nop			; (mov r8, r8)
   26e7c:	687b      	ldr	r3, [r7, #4]
   26e7e:	0018      	movs	r0, r3
   26e80:	4b08      	ldr	r3, [pc, #32]	; (26ea4 <rtc_calendar_reset+0x4c>)
   26e82:	4798      	blx	r3
   26e84:	1e03      	subs	r3, r0, #0
   26e86:	d1f9      	bne.n	26e7c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   26e88:	68fb      	ldr	r3, [r7, #12]
   26e8a:	881b      	ldrh	r3, [r3, #0]
   26e8c:	b29b      	uxth	r3, r3
   26e8e:	2201      	movs	r2, #1
   26e90:	4313      	orrs	r3, r2
   26e92:	b29a      	uxth	r2, r3
   26e94:	68fb      	ldr	r3, [r7, #12]
   26e96:	801a      	strh	r2, [r3, #0]
}
   26e98:	46c0      	nop			; (mov r8, r8)
   26e9a:	46bd      	mov	sp, r7
   26e9c:	b004      	add	sp, #16
   26e9e:	bd80      	pop	{r7, pc}
   26ea0:	00026e09 	.word	0x00026e09
   26ea4:	00026d9d 	.word	0x00026d9d

00026ea8 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   26ea8:	b580      	push	{r7, lr}
   26eaa:	b084      	sub	sp, #16
   26eac:	af00      	add	r7, sp, #0
   26eae:	6078      	str	r0, [r7, #4]
   26eb0:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   26eb2:	683b      	ldr	r3, [r7, #0]
   26eb4:	88db      	ldrh	r3, [r3, #6]
   26eb6:	001a      	movs	r2, r3
   26eb8:	687b      	ldr	r3, [r7, #4]
   26eba:	88db      	ldrh	r3, [r3, #6]
   26ebc:	1ad3      	subs	r3, r2, r3
   26ebe:	069b      	lsls	r3, r3, #26
   26ec0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   26ec2:	683b      	ldr	r3, [r7, #0]
   26ec4:	795b      	ldrb	r3, [r3, #5]
   26ec6:	059b      	lsls	r3, r3, #22
   26ec8:	001a      	movs	r2, r3
   26eca:	68fb      	ldr	r3, [r7, #12]
   26ecc:	4313      	orrs	r3, r2
   26ece:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   26ed0:	683b      	ldr	r3, [r7, #0]
   26ed2:	791b      	ldrb	r3, [r3, #4]
   26ed4:	045b      	lsls	r3, r3, #17
   26ed6:	001a      	movs	r2, r3
   26ed8:	68fb      	ldr	r3, [r7, #12]
   26eda:	4313      	orrs	r3, r2
   26edc:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   26ede:	683b      	ldr	r3, [r7, #0]
   26ee0:	789b      	ldrb	r3, [r3, #2]
   26ee2:	031b      	lsls	r3, r3, #12
   26ee4:	001a      	movs	r2, r3
   26ee6:	68fb      	ldr	r3, [r7, #12]
   26ee8:	4313      	orrs	r3, r2
   26eea:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   26eec:	687b      	ldr	r3, [r7, #4]
   26eee:	791b      	ldrb	r3, [r3, #4]
   26ef0:	2201      	movs	r2, #1
   26ef2:	4053      	eors	r3, r2
   26ef4:	b2db      	uxtb	r3, r3
   26ef6:	2b00      	cmp	r3, #0
   26ef8:	d008      	beq.n	26f0c <rtc_calendar_time_to_register_value+0x64>
   26efa:	683b      	ldr	r3, [r7, #0]
   26efc:	78db      	ldrb	r3, [r3, #3]
   26efe:	2b00      	cmp	r3, #0
   26f00:	d004      	beq.n	26f0c <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   26f02:	68fb      	ldr	r3, [r7, #12]
   26f04:	2280      	movs	r2, #128	; 0x80
   26f06:	0252      	lsls	r2, r2, #9
   26f08:	4313      	orrs	r3, r2
   26f0a:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   26f0c:	683b      	ldr	r3, [r7, #0]
   26f0e:	785b      	ldrb	r3, [r3, #1]
   26f10:	019b      	lsls	r3, r3, #6
   26f12:	001a      	movs	r2, r3
   26f14:	68fb      	ldr	r3, [r7, #12]
   26f16:	4313      	orrs	r3, r2
   26f18:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   26f1a:	683b      	ldr	r3, [r7, #0]
   26f1c:	781b      	ldrb	r3, [r3, #0]
   26f1e:	001a      	movs	r2, r3
   26f20:	68fb      	ldr	r3, [r7, #12]
   26f22:	4313      	orrs	r3, r2
   26f24:	60fb      	str	r3, [r7, #12]

	return register_value;
   26f26:	68fb      	ldr	r3, [r7, #12]
}
   26f28:	0018      	movs	r0, r3
   26f2a:	46bd      	mov	sp, r7
   26f2c:	b004      	add	sp, #16
   26f2e:	bd80      	pop	{r7, pc}

00026f30 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   26f30:	b580      	push	{r7, lr}
   26f32:	b084      	sub	sp, #16
   26f34:	af00      	add	r7, sp, #0
   26f36:	60f8      	str	r0, [r7, #12]
   26f38:	60b9      	str	r1, [r7, #8]
   26f3a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26f3c:	68bb      	ldr	r3, [r7, #8]
   26f3e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   26f40:	b29a      	uxth	r2, r3
   26f42:	68fb      	ldr	r3, [r7, #12]
   26f44:	88db      	ldrh	r3, [r3, #6]
   26f46:	18d3      	adds	r3, r2, r3
   26f48:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   26f4a:	687b      	ldr	r3, [r7, #4]
   26f4c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   26f4e:	68bb      	ldr	r3, [r7, #8]
   26f50:	0d9b      	lsrs	r3, r3, #22
   26f52:	b2db      	uxtb	r3, r3
   26f54:	220f      	movs	r2, #15
   26f56:	4013      	ands	r3, r2
   26f58:	b2da      	uxtb	r2, r3
   26f5a:	687b      	ldr	r3, [r7, #4]
   26f5c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   26f5e:	68bb      	ldr	r3, [r7, #8]
   26f60:	0c5b      	lsrs	r3, r3, #17
   26f62:	b2db      	uxtb	r3, r3
   26f64:	221f      	movs	r2, #31
   26f66:	4013      	ands	r3, r2
   26f68:	b2da      	uxtb	r2, r3
   26f6a:	687b      	ldr	r3, [r7, #4]
   26f6c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   26f6e:	68fb      	ldr	r3, [r7, #12]
   26f70:	791b      	ldrb	r3, [r3, #4]
   26f72:	2b00      	cmp	r3, #0
   26f74:	d008      	beq.n	26f88 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   26f76:	68bb      	ldr	r3, [r7, #8]
   26f78:	0b1b      	lsrs	r3, r3, #12
   26f7a:	b2db      	uxtb	r3, r3
   26f7c:	221f      	movs	r2, #31
   26f7e:	4013      	ands	r3, r2
   26f80:	b2da      	uxtb	r2, r3
   26f82:	687b      	ldr	r3, [r7, #4]
   26f84:	709a      	strb	r2, [r3, #2]
   26f86:	e010      	b.n	26faa <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   26f88:	68bb      	ldr	r3, [r7, #8]
   26f8a:	0b1b      	lsrs	r3, r3, #12
   26f8c:	b2db      	uxtb	r3, r3
   26f8e:	220f      	movs	r2, #15
   26f90:	4013      	ands	r3, r2
   26f92:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   26f94:	687b      	ldr	r3, [r7, #4]
   26f96:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   26f98:	68ba      	ldr	r2, [r7, #8]
   26f9a:	2380      	movs	r3, #128	; 0x80
   26f9c:	025b      	lsls	r3, r3, #9
   26f9e:	4013      	ands	r3, r2
   26fa0:	1e5a      	subs	r2, r3, #1
   26fa2:	4193      	sbcs	r3, r2
   26fa4:	b2da      	uxtb	r2, r3
   26fa6:	687b      	ldr	r3, [r7, #4]
   26fa8:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   26faa:	68bb      	ldr	r3, [r7, #8]
   26fac:	099b      	lsrs	r3, r3, #6
   26fae:	b2db      	uxtb	r3, r3
   26fb0:	223f      	movs	r2, #63	; 0x3f
   26fb2:	4013      	ands	r3, r2
   26fb4:	b2da      	uxtb	r2, r3
   26fb6:	687b      	ldr	r3, [r7, #4]
   26fb8:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   26fba:	68bb      	ldr	r3, [r7, #8]
   26fbc:	b2db      	uxtb	r3, r3
   26fbe:	223f      	movs	r2, #63	; 0x3f
   26fc0:	4013      	ands	r3, r2
   26fc2:	b2da      	uxtb	r2, r3
   26fc4:	687b      	ldr	r3, [r7, #4]
   26fc6:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   26fc8:	46c0      	nop			; (mov r8, r8)
   26fca:	46bd      	mov	sp, r7
   26fcc:	b004      	add	sp, #16
   26fce:	bd80      	pop	{r7, pc}

00026fd0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   26fd0:	b580      	push	{r7, lr}
   26fd2:	b084      	sub	sp, #16
   26fd4:	af00      	add	r7, sp, #0
   26fd6:	6078      	str	r0, [r7, #4]
   26fd8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   26fda:	687b      	ldr	r3, [r7, #4]
   26fdc:	681b      	ldr	r3, [r3, #0]
   26fde:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   26fe0:	683b      	ldr	r3, [r7, #0]
   26fe2:	881a      	ldrh	r2, [r3, #0]
   26fe4:	230e      	movs	r3, #14
   26fe6:	18fb      	adds	r3, r7, r3
   26fe8:	2108      	movs	r1, #8
   26fea:	430a      	orrs	r2, r1
   26fec:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   26fee:	683b      	ldr	r3, [r7, #0]
   26ff0:	791b      	ldrb	r3, [r3, #4]
   26ff2:	2201      	movs	r2, #1
   26ff4:	4053      	eors	r3, r2
   26ff6:	b2db      	uxtb	r3, r3
   26ff8:	2b00      	cmp	r3, #0
   26ffa:	d007      	beq.n	2700c <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   26ffc:	230e      	movs	r3, #14
   26ffe:	18fb      	adds	r3, r7, r3
   27000:	220e      	movs	r2, #14
   27002:	18ba      	adds	r2, r7, r2
   27004:	8812      	ldrh	r2, [r2, #0]
   27006:	2140      	movs	r1, #64	; 0x40
   27008:	430a      	orrs	r2, r1
   2700a:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   2700c:	683b      	ldr	r3, [r7, #0]
   2700e:	789b      	ldrb	r3, [r3, #2]
   27010:	2b00      	cmp	r3, #0
   27012:	d007      	beq.n	27024 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   27014:	230e      	movs	r3, #14
   27016:	18fb      	adds	r3, r7, r3
   27018:	220e      	movs	r2, #14
   2701a:	18ba      	adds	r2, r7, r2
   2701c:	8812      	ldrh	r2, [r2, #0]
   2701e:	2180      	movs	r1, #128	; 0x80
   27020:	430a      	orrs	r2, r1
   27022:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   27024:	68bb      	ldr	r3, [r7, #8]
   27026:	220e      	movs	r2, #14
   27028:	18ba      	adds	r2, r7, r2
   2702a:	8812      	ldrh	r2, [r2, #0]
   2702c:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   2702e:	683b      	ldr	r3, [r7, #0]
   27030:	78db      	ldrb	r3, [r3, #3]
   27032:	2b00      	cmp	r3, #0
   27034:	d008      	beq.n	27048 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   27036:	68bb      	ldr	r3, [r7, #8]
   27038:	885b      	ldrh	r3, [r3, #2]
   2703a:	b29b      	uxth	r3, r3
   2703c:	2280      	movs	r2, #128	; 0x80
   2703e:	01d2      	lsls	r2, r2, #7
   27040:	4313      	orrs	r3, r2
   27042:	b29a      	uxth	r2, r3
   27044:	68bb      	ldr	r3, [r7, #8]
   27046:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27048:	230d      	movs	r3, #13
   2704a:	18fb      	adds	r3, r7, r3
   2704c:	2200      	movs	r2, #0
   2704e:	701a      	strb	r2, [r3, #0]
   27050:	e017      	b.n	27082 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   27052:	230d      	movs	r3, #13
   27054:	18fb      	adds	r3, r7, r3
   27056:	781a      	ldrb	r2, [r3, #0]
   27058:	0013      	movs	r3, r2
   2705a:	009b      	lsls	r3, r3, #2
   2705c:	189b      	adds	r3, r3, r2
   2705e:	005b      	lsls	r3, r3, #1
   27060:	3308      	adds	r3, #8
   27062:	683a      	ldr	r2, [r7, #0]
   27064:	18d1      	adds	r1, r2, r3
   27066:	230d      	movs	r3, #13
   27068:	18fb      	adds	r3, r7, r3
   2706a:	781a      	ldrb	r2, [r3, #0]
   2706c:	687b      	ldr	r3, [r7, #4]
   2706e:	0018      	movs	r0, r3
   27070:	4b08      	ldr	r3, [pc, #32]	; (27094 <_rtc_calendar_set_config+0xc4>)
   27072:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27074:	230d      	movs	r3, #13
   27076:	18fb      	adds	r3, r7, r3
   27078:	781a      	ldrb	r2, [r3, #0]
   2707a:	230d      	movs	r3, #13
   2707c:	18fb      	adds	r3, r7, r3
   2707e:	3201      	adds	r2, #1
   27080:	701a      	strb	r2, [r3, #0]
   27082:	230d      	movs	r3, #13
   27084:	18fb      	adds	r3, r7, r3
   27086:	781b      	ldrb	r3, [r3, #0]
   27088:	2b00      	cmp	r3, #0
   2708a:	d0e2      	beq.n	27052 <_rtc_calendar_set_config+0x82>
	}
}
   2708c:	46c0      	nop			; (mov r8, r8)
   2708e:	46bd      	mov	sp, r7
   27090:	b004      	add	sp, #16
   27092:	bd80      	pop	{r7, pc}
   27094:	000271b9 	.word	0x000271b9

00027098 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   27098:	b580      	push	{r7, lr}
   2709a:	b086      	sub	sp, #24
   2709c:	af00      	add	r7, sp, #0
   2709e:	60f8      	str	r0, [r7, #12]
   270a0:	60b9      	str	r1, [r7, #8]
   270a2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   270a4:	68fb      	ldr	r3, [r7, #12]
   270a6:	68ba      	ldr	r2, [r7, #8]
   270a8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   270aa:	2120      	movs	r1, #32
   270ac:	2000      	movs	r0, #0
   270ae:	4b18      	ldr	r3, [pc, #96]	; (27110 <rtc_calendar_init+0x78>)
   270b0:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   270b2:	2314      	movs	r3, #20
   270b4:	18fb      	adds	r3, r7, r3
   270b6:	0018      	movs	r0, r3
   270b8:	4b16      	ldr	r3, [pc, #88]	; (27114 <rtc_calendar_init+0x7c>)
   270ba:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   270bc:	2314      	movs	r3, #20
   270be:	18fb      	adds	r3, r7, r3
   270c0:	2202      	movs	r2, #2
   270c2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   270c4:	2314      	movs	r3, #20
   270c6:	18fb      	adds	r3, r7, r3
   270c8:	0019      	movs	r1, r3
   270ca:	2004      	movs	r0, #4
   270cc:	4b12      	ldr	r3, [pc, #72]	; (27118 <rtc_calendar_init+0x80>)
   270ce:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   270d0:	2004      	movs	r0, #4
   270d2:	4b12      	ldr	r3, [pc, #72]	; (2711c <rtc_calendar_init+0x84>)
   270d4:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   270d6:	68fb      	ldr	r3, [r7, #12]
   270d8:	0018      	movs	r0, r3
   270da:	4b11      	ldr	r3, [pc, #68]	; (27120 <rtc_calendar_init+0x88>)
   270dc:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   270de:	687b      	ldr	r3, [r7, #4]
   270e0:	791a      	ldrb	r2, [r3, #4]
   270e2:	68fb      	ldr	r3, [r7, #12]
   270e4:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   270e6:	687b      	ldr	r3, [r7, #4]
   270e8:	78da      	ldrb	r2, [r3, #3]
   270ea:	68fb      	ldr	r3, [r7, #12]
   270ec:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   270ee:	687b      	ldr	r3, [r7, #4]
   270f0:	88da      	ldrh	r2, [r3, #6]
   270f2:	68fb      	ldr	r3, [r7, #12]
   270f4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   270f6:	4b0b      	ldr	r3, [pc, #44]	; (27124 <rtc_calendar_init+0x8c>)
   270f8:	68fa      	ldr	r2, [r7, #12]
   270fa:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   270fc:	687a      	ldr	r2, [r7, #4]
   270fe:	68fb      	ldr	r3, [r7, #12]
   27100:	0011      	movs	r1, r2
   27102:	0018      	movs	r0, r3
   27104:	4b08      	ldr	r3, [pc, #32]	; (27128 <rtc_calendar_init+0x90>)
   27106:	4798      	blx	r3
}
   27108:	46c0      	nop			; (mov r8, r8)
   2710a:	46bd      	mov	sp, r7
   2710c:	b006      	add	sp, #24
   2710e:	bd80      	pop	{r7, pc}
   27110:	00026ce5 	.word	0x00026ce5
   27114:	00026ccd 	.word	0x00026ccd
   27118:	0002a0fd 	.word	0x0002a0fd
   2711c:	0002a141 	.word	0x0002a141
   27120:	00026e59 	.word	0x00026e59
   27124:	20005790 	.word	0x20005790
   27128:	00026fd1 	.word	0x00026fd1

0002712c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   2712c:	b580      	push	{r7, lr}
   2712e:	b084      	sub	sp, #16
   27130:	af00      	add	r7, sp, #0
   27132:	6078      	str	r0, [r7, #4]
   27134:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27136:	687b      	ldr	r3, [r7, #4]
   27138:	681b      	ldr	r3, [r3, #0]
   2713a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   2713c:	687b      	ldr	r3, [r7, #4]
   2713e:	795b      	ldrb	r3, [r3, #5]
   27140:	2201      	movs	r2, #1
   27142:	4053      	eors	r3, r2
   27144:	b2db      	uxtb	r3, r3
   27146:	2b00      	cmp	r3, #0
   27148:	d00a      	beq.n	27160 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   2714a:	68fb      	ldr	r3, [r7, #12]
   2714c:	4a16      	ldr	r2, [pc, #88]	; (271a8 <rtc_calendar_get_time+0x7c>)
   2714e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   27150:	46c0      	nop			; (mov r8, r8)
   27152:	687b      	ldr	r3, [r7, #4]
   27154:	0018      	movs	r0, r3
   27156:	4b15      	ldr	r3, [pc, #84]	; (271ac <rtc_calendar_get_time+0x80>)
   27158:	4798      	blx	r3
   2715a:	1e03      	subs	r3, r0, #0
   2715c:	d1f9      	bne.n	27152 <rtc_calendar_get_time+0x26>
   2715e:	e016      	b.n	2718e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   27160:	68fb      	ldr	r3, [r7, #12]
   27162:	885b      	ldrh	r3, [r3, #2]
   27164:	b29b      	uxth	r3, r3
   27166:	001a      	movs	r2, r3
   27168:	2380      	movs	r3, #128	; 0x80
   2716a:	01db      	lsls	r3, r3, #7
   2716c:	4013      	ands	r3, r2
   2716e:	d10e      	bne.n	2718e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   27170:	68fb      	ldr	r3, [r7, #12]
   27172:	885b      	ldrh	r3, [r3, #2]
   27174:	b29b      	uxth	r3, r3
   27176:	4a0e      	ldr	r2, [pc, #56]	; (271b0 <rtc_calendar_get_time+0x84>)
   27178:	4313      	orrs	r3, r2
   2717a:	b29a      	uxth	r2, r3
   2717c:	68fb      	ldr	r3, [r7, #12]
   2717e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   27180:	46c0      	nop			; (mov r8, r8)
   27182:	687b      	ldr	r3, [r7, #4]
   27184:	0018      	movs	r0, r3
   27186:	4b09      	ldr	r3, [pc, #36]	; (271ac <rtc_calendar_get_time+0x80>)
   27188:	4798      	blx	r3
   2718a:	1e03      	subs	r3, r0, #0
   2718c:	d1f9      	bne.n	27182 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   2718e:	68fb      	ldr	r3, [r7, #12]
   27190:	691b      	ldr	r3, [r3, #16]
   27192:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27194:	683a      	ldr	r2, [r7, #0]
   27196:	68b9      	ldr	r1, [r7, #8]
   27198:	687b      	ldr	r3, [r7, #4]
   2719a:	0018      	movs	r0, r3
   2719c:	4b05      	ldr	r3, [pc, #20]	; (271b4 <rtc_calendar_get_time+0x88>)
   2719e:	4798      	blx	r3
}
   271a0:	46c0      	nop			; (mov r8, r8)
   271a2:	46bd      	mov	sp, r7
   271a4:	b004      	add	sp, #16
   271a6:	bd80      	pop	{r7, pc}
   271a8:	ffff8000 	.word	0xffff8000
   271ac:	00026d9d 	.word	0x00026d9d
   271b0:	ffffc000 	.word	0xffffc000
   271b4:	00026f31 	.word	0x00026f31

000271b8 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   271b8:	b580      	push	{r7, lr}
   271ba:	b086      	sub	sp, #24
   271bc:	af00      	add	r7, sp, #0
   271be:	60f8      	str	r0, [r7, #12]
   271c0:	60b9      	str	r1, [r7, #8]
   271c2:	1dfb      	adds	r3, r7, #7
   271c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   271c6:	68fb      	ldr	r3, [r7, #12]
   271c8:	681b      	ldr	r3, [r3, #0]
   271ca:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   271cc:	1dfb      	adds	r3, r7, #7
   271ce:	781b      	ldrb	r3, [r3, #0]
   271d0:	2b01      	cmp	r3, #1
   271d2:	d901      	bls.n	271d8 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   271d4:	2317      	movs	r3, #23
   271d6:	e021      	b.n	2721c <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   271d8:	68ba      	ldr	r2, [r7, #8]
   271da:	68fb      	ldr	r3, [r7, #12]
   271dc:	0011      	movs	r1, r2
   271de:	0018      	movs	r0, r3
   271e0:	4b10      	ldr	r3, [pc, #64]	; (27224 <rtc_calendar_set_alarm+0x6c>)
   271e2:	4798      	blx	r3
   271e4:	0003      	movs	r3, r0
   271e6:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   271e8:	46c0      	nop			; (mov r8, r8)
   271ea:	68fb      	ldr	r3, [r7, #12]
   271ec:	0018      	movs	r0, r3
   271ee:	4b0e      	ldr	r3, [pc, #56]	; (27228 <rtc_calendar_set_alarm+0x70>)
   271f0:	4798      	blx	r3
   271f2:	1e03      	subs	r3, r0, #0
   271f4:	d1f9      	bne.n	271ea <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   271f6:	1dfb      	adds	r3, r7, #7
   271f8:	781a      	ldrb	r2, [r3, #0]
   271fa:	697b      	ldr	r3, [r7, #20]
   271fc:	3203      	adds	r2, #3
   271fe:	00d2      	lsls	r2, r2, #3
   27200:	6939      	ldr	r1, [r7, #16]
   27202:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   27204:	1dfb      	adds	r3, r7, #7
   27206:	781b      	ldrb	r3, [r3, #0]
   27208:	68ba      	ldr	r2, [r7, #8]
   2720a:	7a11      	ldrb	r1, [r2, #8]
   2720c:	697a      	ldr	r2, [r7, #20]
   2720e:	3303      	adds	r3, #3
   27210:	00db      	lsls	r3, r3, #3
   27212:	18d3      	adds	r3, r2, r3
   27214:	3304      	adds	r3, #4
   27216:	1c0a      	adds	r2, r1, #0
   27218:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   2721a:	2300      	movs	r3, #0
}
   2721c:	0018      	movs	r0, r3
   2721e:	46bd      	mov	sp, r7
   27220:	b006      	add	sp, #24
   27222:	bd80      	pop	{r7, pc}
   27224:	00026ea9 	.word	0x00026ea9
   27228:	00026d9d 	.word	0x00026d9d

0002722c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   2722c:	b580      	push	{r7, lr}
   2722e:	b086      	sub	sp, #24
   27230:	af00      	add	r7, sp, #0
   27232:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27234:	4b28      	ldr	r3, [pc, #160]	; (272d8 <_rtc_interrupt_handler+0xac>)
   27236:	687a      	ldr	r2, [r7, #4]
   27238:	0092      	lsls	r2, r2, #2
   2723a:	58d3      	ldr	r3, [r2, r3]
   2723c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   2723e:	697b      	ldr	r3, [r7, #20]
   27240:	681b      	ldr	r3, [r3, #0]
   27242:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27244:	230e      	movs	r3, #14
   27246:	18fb      	adds	r3, r7, r3
   27248:	697a      	ldr	r2, [r7, #20]
   2724a:	8a52      	ldrh	r2, [r2, #18]
   2724c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   2724e:	697b      	ldr	r3, [r7, #20]
   27250:	8a1b      	ldrh	r3, [r3, #16]
   27252:	b29a      	uxth	r2, r3
   27254:	230e      	movs	r3, #14
   27256:	18fb      	adds	r3, r7, r3
   27258:	210e      	movs	r1, #14
   2725a:	1879      	adds	r1, r7, r1
   2725c:	8809      	ldrh	r1, [r1, #0]
   2725e:	400a      	ands	r2, r1
   27260:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27262:	693b      	ldr	r3, [r7, #16]
   27264:	7a1b      	ldrb	r3, [r3, #8]
   27266:	b2da      	uxtb	r2, r3
   27268:	230c      	movs	r3, #12
   2726a:	18fb      	adds	r3, r7, r3
   2726c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   2726e:	693b      	ldr	r3, [r7, #16]
   27270:	79db      	ldrb	r3, [r3, #7]
   27272:	b2db      	uxtb	r3, r3
   27274:	b29a      	uxth	r2, r3
   27276:	230c      	movs	r3, #12
   27278:	18fb      	adds	r3, r7, r3
   2727a:	210c      	movs	r1, #12
   2727c:	1879      	adds	r1, r7, r1
   2727e:	8809      	ldrh	r1, [r1, #0]
   27280:	400a      	ands	r2, r1
   27282:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27284:	230c      	movs	r3, #12
   27286:	18fb      	adds	r3, r7, r3
   27288:	881b      	ldrh	r3, [r3, #0]
   2728a:	2280      	movs	r2, #128	; 0x80
   2728c:	4013      	ands	r3, r2
   2728e:	d00c      	beq.n	272aa <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27290:	230e      	movs	r3, #14
   27292:	18fb      	adds	r3, r7, r3
   27294:	881b      	ldrh	r3, [r3, #0]
   27296:	2202      	movs	r2, #2
   27298:	4013      	ands	r3, r2
   2729a:	d002      	beq.n	272a2 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   2729c:	697b      	ldr	r3, [r7, #20]
   2729e:	68db      	ldr	r3, [r3, #12]
   272a0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   272a2:	693b      	ldr	r3, [r7, #16]
   272a4:	2280      	movs	r2, #128	; 0x80
   272a6:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   272a8:	e011      	b.n	272ce <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   272aa:	230c      	movs	r3, #12
   272ac:	18fb      	adds	r3, r7, r3
   272ae:	881b      	ldrh	r3, [r3, #0]
   272b0:	2201      	movs	r2, #1
   272b2:	4013      	ands	r3, r2
   272b4:	d00b      	beq.n	272ce <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   272b6:	230e      	movs	r3, #14
   272b8:	18fb      	adds	r3, r7, r3
   272ba:	881b      	ldrh	r3, [r3, #0]
   272bc:	2201      	movs	r2, #1
   272be:	4013      	ands	r3, r2
   272c0:	d002      	beq.n	272c8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   272c2:	697b      	ldr	r3, [r7, #20]
   272c4:	689b      	ldr	r3, [r3, #8]
   272c6:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   272c8:	693b      	ldr	r3, [r7, #16]
   272ca:	2201      	movs	r2, #1
   272cc:	721a      	strb	r2, [r3, #8]
}
   272ce:	46c0      	nop			; (mov r8, r8)
   272d0:	46bd      	mov	sp, r7
   272d2:	b006      	add	sp, #24
   272d4:	bd80      	pop	{r7, pc}
   272d6:	46c0      	nop			; (mov r8, r8)
   272d8:	20005790 	.word	0x20005790

000272dc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   272dc:	b580      	push	{r7, lr}
   272de:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   272e0:	2000      	movs	r0, #0
   272e2:	4b02      	ldr	r3, [pc, #8]	; (272ec <RTC_Handler+0x10>)
   272e4:	4798      	blx	r3
}
   272e6:	46c0      	nop			; (mov r8, r8)
   272e8:	46bd      	mov	sp, r7
   272ea:	bd80      	pop	{r7, pc}
   272ec:	0002722d 	.word	0x0002722d

000272f0 <system_gclk_chan_get_config_defaults>:
{
   272f0:	b580      	push	{r7, lr}
   272f2:	b082      	sub	sp, #8
   272f4:	af00      	add	r7, sp, #0
   272f6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   272f8:	687b      	ldr	r3, [r7, #4]
   272fa:	2200      	movs	r2, #0
   272fc:	701a      	strb	r2, [r3, #0]
}
   272fe:	46c0      	nop			; (mov r8, r8)
   27300:	46bd      	mov	sp, r7
   27302:	b002      	add	sp, #8
   27304:	bd80      	pop	{r7, pc}

00027306 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   27306:	b5f0      	push	{r4, r5, r6, r7, lr}
   27308:	b08d      	sub	sp, #52	; 0x34
   2730a:	af00      	add	r7, sp, #0
   2730c:	60b8      	str	r0, [r7, #8]
   2730e:	60f9      	str	r1, [r7, #12]
   27310:	603a      	str	r2, [r7, #0]
   27312:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27314:	2300      	movs	r3, #0
   27316:	2400      	movs	r4, #0
   27318:	623b      	str	r3, [r7, #32]
   2731a:	627c      	str	r4, [r7, #36]	; 0x24
   2731c:	2300      	movs	r3, #0
   2731e:	2400      	movs	r4, #0
   27320:	61bb      	str	r3, [r7, #24]
   27322:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27324:	233f      	movs	r3, #63	; 0x3f
   27326:	62fb      	str	r3, [r7, #44]	; 0x2c
   27328:	e053      	b.n	273d2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   2732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2732c:	3b20      	subs	r3, #32
   2732e:	2b00      	cmp	r3, #0
   27330:	db04      	blt.n	2733c <long_division+0x36>
   27332:	2201      	movs	r2, #1
   27334:	409a      	lsls	r2, r3
   27336:	0013      	movs	r3, r2
   27338:	617b      	str	r3, [r7, #20]
   2733a:	e00b      	b.n	27354 <long_division+0x4e>
   2733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2733e:	2220      	movs	r2, #32
   27340:	1ad3      	subs	r3, r2, r3
   27342:	2201      	movs	r2, #1
   27344:	40da      	lsrs	r2, r3
   27346:	0013      	movs	r3, r2
   27348:	2100      	movs	r1, #0
   2734a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2734c:	4091      	lsls	r1, r2
   2734e:	000a      	movs	r2, r1
   27350:	4313      	orrs	r3, r2
   27352:	617b      	str	r3, [r7, #20]
   27354:	2201      	movs	r2, #1
   27356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27358:	409a      	lsls	r2, r3
   2735a:	0013      	movs	r3, r2
   2735c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   2735e:	69bb      	ldr	r3, [r7, #24]
   27360:	69fc      	ldr	r4, [r7, #28]
   27362:	18db      	adds	r3, r3, r3
   27364:	4164      	adcs	r4, r4
   27366:	61bb      	str	r3, [r7, #24]
   27368:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   2736a:	68bb      	ldr	r3, [r7, #8]
   2736c:	693a      	ldr	r2, [r7, #16]
   2736e:	401a      	ands	r2, r3
   27370:	0015      	movs	r5, r2
   27372:	68fb      	ldr	r3, [r7, #12]
   27374:	697a      	ldr	r2, [r7, #20]
   27376:	401a      	ands	r2, r3
   27378:	0016      	movs	r6, r2
   2737a:	002b      	movs	r3, r5
   2737c:	4333      	orrs	r3, r6
   2737e:	d007      	beq.n	27390 <long_division+0x8a>
			r |= 0x01;
   27380:	69bb      	ldr	r3, [r7, #24]
   27382:	2201      	movs	r2, #1
   27384:	4313      	orrs	r3, r2
   27386:	61bb      	str	r3, [r7, #24]
   27388:	69fb      	ldr	r3, [r7, #28]
   2738a:	2200      	movs	r2, #0
   2738c:	4313      	orrs	r3, r2
   2738e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   27390:	687a      	ldr	r2, [r7, #4]
   27392:	69fb      	ldr	r3, [r7, #28]
   27394:	429a      	cmp	r2, r3
   27396:	d819      	bhi.n	273cc <long_division+0xc6>
   27398:	687a      	ldr	r2, [r7, #4]
   2739a:	69fb      	ldr	r3, [r7, #28]
   2739c:	429a      	cmp	r2, r3
   2739e:	d103      	bne.n	273a8 <long_division+0xa2>
   273a0:	683a      	ldr	r2, [r7, #0]
   273a2:	69bb      	ldr	r3, [r7, #24]
   273a4:	429a      	cmp	r2, r3
   273a6:	d811      	bhi.n	273cc <long_division+0xc6>
			r = r - d;
   273a8:	69b9      	ldr	r1, [r7, #24]
   273aa:	69fa      	ldr	r2, [r7, #28]
   273ac:	683b      	ldr	r3, [r7, #0]
   273ae:	687c      	ldr	r4, [r7, #4]
   273b0:	1ac9      	subs	r1, r1, r3
   273b2:	41a2      	sbcs	r2, r4
   273b4:	000b      	movs	r3, r1
   273b6:	0014      	movs	r4, r2
   273b8:	61bb      	str	r3, [r7, #24]
   273ba:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   273bc:	6a3a      	ldr	r2, [r7, #32]
   273be:	693b      	ldr	r3, [r7, #16]
   273c0:	4313      	orrs	r3, r2
   273c2:	623b      	str	r3, [r7, #32]
   273c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   273c6:	697b      	ldr	r3, [r7, #20]
   273c8:	4313      	orrs	r3, r2
   273ca:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   273cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   273ce:	3b01      	subs	r3, #1
   273d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   273d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   273d4:	2b00      	cmp	r3, #0
   273d6:	daa8      	bge.n	2732a <long_division+0x24>
		}
	}

	return q;
   273d8:	6a3b      	ldr	r3, [r7, #32]
   273da:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   273dc:	0018      	movs	r0, r3
   273de:	0021      	movs	r1, r4
   273e0:	46bd      	mov	sp, r7
   273e2:	b00d      	add	sp, #52	; 0x34
   273e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000273e6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   273e6:	b580      	push	{r7, lr}
   273e8:	b086      	sub	sp, #24
   273ea:	af00      	add	r7, sp, #0
   273ec:	60f8      	str	r0, [r7, #12]
   273ee:	60b9      	str	r1, [r7, #8]
   273f0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   273f2:	2316      	movs	r3, #22
   273f4:	18fb      	adds	r3, r7, r3
   273f6:	2200      	movs	r2, #0
   273f8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   273fa:	68bb      	ldr	r3, [r7, #8]
   273fc:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   273fe:	68bb      	ldr	r3, [r7, #8]
   27400:	085a      	lsrs	r2, r3, #1
   27402:	68fb      	ldr	r3, [r7, #12]
   27404:	429a      	cmp	r2, r3
   27406:	d201      	bcs.n	2740c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27408:	2340      	movs	r3, #64	; 0x40
   2740a:	e026      	b.n	2745a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   2740c:	68bb      	ldr	r3, [r7, #8]
   2740e:	085b      	lsrs	r3, r3, #1
   27410:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27412:	e00a      	b.n	2742a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27414:	693a      	ldr	r2, [r7, #16]
   27416:	68fb      	ldr	r3, [r7, #12]
   27418:	1ad3      	subs	r3, r2, r3
   2741a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   2741c:	2316      	movs	r3, #22
   2741e:	18fb      	adds	r3, r7, r3
   27420:	881a      	ldrh	r2, [r3, #0]
   27422:	2316      	movs	r3, #22
   27424:	18fb      	adds	r3, r7, r3
   27426:	3201      	adds	r2, #1
   27428:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   2742a:	693a      	ldr	r2, [r7, #16]
   2742c:	68fb      	ldr	r3, [r7, #12]
   2742e:	429a      	cmp	r2, r3
   27430:	d2f0      	bcs.n	27414 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27432:	2316      	movs	r3, #22
   27434:	18fb      	adds	r3, r7, r3
   27436:	2216      	movs	r2, #22
   27438:	18ba      	adds	r2, r7, r2
   2743a:	8812      	ldrh	r2, [r2, #0]
   2743c:	3a01      	subs	r2, #1
   2743e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27440:	2316      	movs	r3, #22
   27442:	18fb      	adds	r3, r7, r3
   27444:	881b      	ldrh	r3, [r3, #0]
   27446:	2bff      	cmp	r3, #255	; 0xff
   27448:	d901      	bls.n	2744e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   2744a:	2340      	movs	r3, #64	; 0x40
   2744c:	e005      	b.n	2745a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   2744e:	687b      	ldr	r3, [r7, #4]
   27450:	2216      	movs	r2, #22
   27452:	18ba      	adds	r2, r7, r2
   27454:	8812      	ldrh	r2, [r2, #0]
   27456:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   27458:	2300      	movs	r3, #0
	}
}
   2745a:	0018      	movs	r0, r3
   2745c:	46bd      	mov	sp, r7
   2745e:	b006      	add	sp, #24
   27460:	bd80      	pop	{r7, pc}
	...

00027464 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27464:	b5f0      	push	{r4, r5, r6, r7, lr}
   27466:	b0a1      	sub	sp, #132	; 0x84
   27468:	af00      	add	r7, sp, #0
   2746a:	64f8      	str	r0, [r7, #76]	; 0x4c
   2746c:	64b9      	str	r1, [r7, #72]	; 0x48
   2746e:	647a      	str	r2, [r7, #68]	; 0x44
   27470:	2243      	movs	r2, #67	; 0x43
   27472:	18ba      	adds	r2, r7, r2
   27474:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   27476:	2300      	movs	r3, #0
   27478:	2400      	movs	r4, #0
   2747a:	673b      	str	r3, [r7, #112]	; 0x70
   2747c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   2747e:	2300      	movs	r3, #0
   27480:	2400      	movs	r4, #0
   27482:	66bb      	str	r3, [r7, #104]	; 0x68
   27484:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   27486:	2300      	movs	r3, #0
   27488:	2400      	movs	r4, #0
   2748a:	67bb      	str	r3, [r7, #120]	; 0x78
   2748c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   2748e:	2300      	movs	r3, #0
   27490:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   27492:	2358      	movs	r3, #88	; 0x58
   27494:	2240      	movs	r2, #64	; 0x40
   27496:	4694      	mov	ip, r2
   27498:	44bc      	add	ip, r7
   2749a:	4463      	add	r3, ip
   2749c:	781a      	ldrb	r2, [r3, #0]
   2749e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   274a0:	435a      	muls	r2, r3
   274a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   274a4:	429a      	cmp	r2, r3
   274a6:	d901      	bls.n	274ac <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   274a8:	2340      	movs	r3, #64	; 0x40
   274aa:	e0b3      	b.n	27614 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   274ac:	2343      	movs	r3, #67	; 0x43
   274ae:	18fb      	adds	r3, r7, r3
   274b0:	781b      	ldrb	r3, [r3, #0]
   274b2:	2b00      	cmp	r3, #0
   274b4:	d13d      	bne.n	27532 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   274b6:	2358      	movs	r3, #88	; 0x58
   274b8:	2240      	movs	r2, #64	; 0x40
   274ba:	4694      	mov	ip, r2
   274bc:	44bc      	add	ip, r7
   274be:	4463      	add	r3, ip
   274c0:	781b      	ldrb	r3, [r3, #0]
   274c2:	b2db      	uxtb	r3, r3
   274c4:	613b      	str	r3, [r7, #16]
   274c6:	2300      	movs	r3, #0
   274c8:	617b      	str	r3, [r7, #20]
   274ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   274cc:	60bb      	str	r3, [r7, #8]
   274ce:	2300      	movs	r3, #0
   274d0:	60fb      	str	r3, [r7, #12]
   274d2:	4c52      	ldr	r4, [pc, #328]	; (2761c <_sercom_get_async_baud_val+0x1b8>)
   274d4:	68ba      	ldr	r2, [r7, #8]
   274d6:	68fb      	ldr	r3, [r7, #12]
   274d8:	6938      	ldr	r0, [r7, #16]
   274da:	6979      	ldr	r1, [r7, #20]
   274dc:	47a0      	blx	r4
   274de:	0003      	movs	r3, r0
   274e0:	000c      	movs	r4, r1
   274e2:	001b      	movs	r3, r3
   274e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   274e6:	2300      	movs	r3, #0
   274e8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   274ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   274ec:	603b      	str	r3, [r7, #0]
   274ee:	2300      	movs	r3, #0
   274f0:	607b      	str	r3, [r7, #4]
   274f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
   274f4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   274f6:	683a      	ldr	r2, [r7, #0]
   274f8:	687b      	ldr	r3, [r7, #4]
   274fa:	4c49      	ldr	r4, [pc, #292]	; (27620 <_sercom_get_async_baud_val+0x1bc>)
   274fc:	47a0      	blx	r4
   274fe:	0003      	movs	r3, r0
   27500:	000c      	movs	r4, r1
   27502:	673b      	str	r3, [r7, #112]	; 0x70
   27504:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   27506:	2100      	movs	r1, #0
   27508:	2201      	movs	r2, #1
   2750a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2750c:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   2750e:	1ac9      	subs	r1, r1, r3
   27510:	41a2      	sbcs	r2, r4
   27512:	000b      	movs	r3, r1
   27514:	0014      	movs	r4, r2
   27516:	66bb      	str	r3, [r7, #104]	; 0x68
   27518:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   2751a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2751c:	0c1b      	lsrs	r3, r3, #16
   2751e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27520:	0416      	lsls	r6, r2, #16
   27522:	431e      	orrs	r6, r3
   27524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27526:	041d      	lsls	r5, r3, #16
   27528:	0033      	movs	r3, r6
   2752a:	67bb      	str	r3, [r7, #120]	; 0x78
   2752c:	2300      	movs	r3, #0
   2752e:	67fb      	str	r3, [r7, #124]	; 0x7c
   27530:	e06a      	b.n	27608 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27532:	2343      	movs	r3, #67	; 0x43
   27534:	18fb      	adds	r3, r7, r3
   27536:	781b      	ldrb	r3, [r3, #0]
   27538:	2b01      	cmp	r3, #1
   2753a:	d165      	bne.n	27608 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   2753c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2753e:	633b      	str	r3, [r7, #48]	; 0x30
   27540:	2300      	movs	r3, #0
   27542:	637b      	str	r3, [r7, #52]	; 0x34
   27544:	2358      	movs	r3, #88	; 0x58
   27546:	2240      	movs	r2, #64	; 0x40
   27548:	4694      	mov	ip, r2
   2754a:	44bc      	add	ip, r7
   2754c:	4463      	add	r3, ip
   2754e:	781b      	ldrb	r3, [r3, #0]
   27550:	b2db      	uxtb	r3, r3
   27552:	62bb      	str	r3, [r7, #40]	; 0x28
   27554:	2300      	movs	r3, #0
   27556:	62fb      	str	r3, [r7, #44]	; 0x2c
   27558:	4c30      	ldr	r4, [pc, #192]	; (2761c <_sercom_get_async_baud_val+0x1b8>)
   2755a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2755e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27560:	6b79      	ldr	r1, [r7, #52]	; 0x34
   27562:	47a0      	blx	r4
   27564:	0003      	movs	r3, r0
   27566:	000c      	movs	r4, r1
   27568:	65bb      	str	r3, [r7, #88]	; 0x58
   2756a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   2756c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2756e:	623b      	str	r3, [r7, #32]
   27570:	2300      	movs	r3, #0
   27572:	627b      	str	r3, [r7, #36]	; 0x24
   27574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27576:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27578:	001a      	movs	r2, r3
   2757a:	0023      	movs	r3, r4
   2757c:	6a38      	ldr	r0, [r7, #32]
   2757e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27580:	4c27      	ldr	r4, [pc, #156]	; (27620 <_sercom_get_async_baud_val+0x1bc>)
   27582:	47a0      	blx	r4
   27584:	0003      	movs	r3, r0
   27586:	000c      	movs	r4, r1
   27588:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   2758a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   2758c:	2380      	movs	r3, #128	; 0x80
   2758e:	019b      	lsls	r3, r3, #6
   27590:	429a      	cmp	r2, r3
   27592:	d901      	bls.n	27598 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27594:	2340      	movs	r3, #64	; 0x40
   27596:	e03d      	b.n	27614 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   27598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2759a:	61bb      	str	r3, [r7, #24]
   2759c:	2300      	movs	r3, #0
   2759e:	61fb      	str	r3, [r7, #28]
   275a0:	69b9      	ldr	r1, [r7, #24]
   275a2:	69fa      	ldr	r2, [r7, #28]
   275a4:	000b      	movs	r3, r1
   275a6:	0f5b      	lsrs	r3, r3, #29
   275a8:	0010      	movs	r0, r2
   275aa:	00c0      	lsls	r0, r0, #3
   275ac:	63f8      	str	r0, [r7, #60]	; 0x3c
   275ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   275b0:	4318      	orrs	r0, r3
   275b2:	63f8      	str	r0, [r7, #60]	; 0x3c
   275b4:	000b      	movs	r3, r1
   275b6:	00db      	lsls	r3, r3, #3
   275b8:	63bb      	str	r3, [r7, #56]	; 0x38
   275ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   275bc:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   275be:	001a      	movs	r2, r3
   275c0:	0023      	movs	r3, r4
   275c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   275c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   275c6:	4c16      	ldr	r4, [pc, #88]	; (27620 <_sercom_get_async_baud_val+0x1bc>)
   275c8:	47a0      	blx	r4
   275ca:	0003      	movs	r3, r0
   275cc:	000c      	movs	r4, r1
   275ce:	65bb      	str	r3, [r7, #88]	; 0x58
   275d0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   275d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   275d4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   275d6:	b2d9      	uxtb	r1, r3
   275d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   275da:	b2db      	uxtb	r3, r3
   275dc:	00db      	lsls	r3, r3, #3
   275de:	b2da      	uxtb	r2, r3
   275e0:	2317      	movs	r3, #23
   275e2:	2040      	movs	r0, #64	; 0x40
   275e4:	4684      	mov	ip, r0
   275e6:	44bc      	add	ip, r7
   275e8:	4463      	add	r3, ip
   275ea:	1a8a      	subs	r2, r1, r2
   275ec:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   275ee:	2317      	movs	r3, #23
   275f0:	2240      	movs	r2, #64	; 0x40
   275f2:	4694      	mov	ip, r2
   275f4:	44bc      	add	ip, r7
   275f6:	4463      	add	r3, ip
   275f8:	781b      	ldrb	r3, [r3, #0]
   275fa:	035b      	lsls	r3, r3, #13
   275fc:	001a      	movs	r2, r3
   275fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27600:	4313      	orrs	r3, r2
   27602:	67bb      	str	r3, [r7, #120]	; 0x78
   27604:	2300      	movs	r3, #0
   27606:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   27608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   2760a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   2760c:	b29a      	uxth	r2, r3
   2760e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   27610:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   27612:	2300      	movs	r3, #0
}
   27614:	0018      	movs	r0, r3
   27616:	46bd      	mov	sp, r7
   27618:	b021      	add	sp, #132	; 0x84
   2761a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2761c:	00032f51 	.word	0x00032f51
   27620:	00027307 	.word	0x00027307

00027624 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27624:	b580      	push	{r7, lr}
   27626:	b084      	sub	sp, #16
   27628:	af00      	add	r7, sp, #0
   2762a:	0002      	movs	r2, r0
   2762c:	1dfb      	adds	r3, r7, #7
   2762e:	701a      	strb	r2, [r3, #0]
   27630:	1dbb      	adds	r3, r7, #6
   27632:	1c0a      	adds	r2, r1, #0
   27634:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   27636:	4b1a      	ldr	r3, [pc, #104]	; (276a0 <sercom_set_gclk_generator+0x7c>)
   27638:	781b      	ldrb	r3, [r3, #0]
   2763a:	2201      	movs	r2, #1
   2763c:	4053      	eors	r3, r2
   2763e:	b2db      	uxtb	r3, r3
   27640:	2b00      	cmp	r3, #0
   27642:	d103      	bne.n	2764c <sercom_set_gclk_generator+0x28>
   27644:	1dbb      	adds	r3, r7, #6
   27646:	781b      	ldrb	r3, [r3, #0]
   27648:	2b00      	cmp	r3, #0
   2764a:	d01b      	beq.n	27684 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2764c:	230c      	movs	r3, #12
   2764e:	18fb      	adds	r3, r7, r3
   27650:	0018      	movs	r0, r3
   27652:	4b14      	ldr	r3, [pc, #80]	; (276a4 <sercom_set_gclk_generator+0x80>)
   27654:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   27656:	230c      	movs	r3, #12
   27658:	18fb      	adds	r3, r7, r3
   2765a:	1dfa      	adds	r2, r7, #7
   2765c:	7812      	ldrb	r2, [r2, #0]
   2765e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   27660:	230c      	movs	r3, #12
   27662:	18fb      	adds	r3, r7, r3
   27664:	0019      	movs	r1, r3
   27666:	2013      	movs	r0, #19
   27668:	4b0f      	ldr	r3, [pc, #60]	; (276a8 <sercom_set_gclk_generator+0x84>)
   2766a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   2766c:	2013      	movs	r0, #19
   2766e:	4b0f      	ldr	r3, [pc, #60]	; (276ac <sercom_set_gclk_generator+0x88>)
   27670:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   27672:	4b0b      	ldr	r3, [pc, #44]	; (276a0 <sercom_set_gclk_generator+0x7c>)
   27674:	1dfa      	adds	r2, r7, #7
   27676:	7812      	ldrb	r2, [r2, #0]
   27678:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   2767a:	4b09      	ldr	r3, [pc, #36]	; (276a0 <sercom_set_gclk_generator+0x7c>)
   2767c:	2201      	movs	r2, #1
   2767e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   27680:	2300      	movs	r3, #0
   27682:	e008      	b.n	27696 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   27684:	4b06      	ldr	r3, [pc, #24]	; (276a0 <sercom_set_gclk_generator+0x7c>)
   27686:	785b      	ldrb	r3, [r3, #1]
   27688:	1dfa      	adds	r2, r7, #7
   2768a:	7812      	ldrb	r2, [r2, #0]
   2768c:	429a      	cmp	r2, r3
   2768e:	d101      	bne.n	27694 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   27690:	2300      	movs	r3, #0
   27692:	e000      	b.n	27696 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   27694:	231d      	movs	r3, #29
}
   27696:	0018      	movs	r0, r3
   27698:	46bd      	mov	sp, r7
   2769a:	b004      	add	sp, #16
   2769c:	bd80      	pop	{r7, pc}
   2769e:	46c0      	nop			; (mov r8, r8)
   276a0:	20003eb0 	.word	0x20003eb0
   276a4:	000272f1 	.word	0x000272f1
   276a8:	0002a0fd 	.word	0x0002a0fd
   276ac:	0002a141 	.word	0x0002a141

000276b0 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   276b0:	b580      	push	{r7, lr}
   276b2:	b082      	sub	sp, #8
   276b4:	af00      	add	r7, sp, #0
   276b6:	6078      	str	r0, [r7, #4]
   276b8:	000a      	movs	r2, r1
   276ba:	1cfb      	adds	r3, r7, #3
   276bc:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   276be:	687b      	ldr	r3, [r7, #4]
   276c0:	4a4d      	ldr	r2, [pc, #308]	; (277f8 <_sercom_get_default_pad+0x148>)
   276c2:	4293      	cmp	r3, r2
   276c4:	d03f      	beq.n	27746 <_sercom_get_default_pad+0x96>
   276c6:	4a4c      	ldr	r2, [pc, #304]	; (277f8 <_sercom_get_default_pad+0x148>)
   276c8:	4293      	cmp	r3, r2
   276ca:	d806      	bhi.n	276da <_sercom_get_default_pad+0x2a>
   276cc:	4a4b      	ldr	r2, [pc, #300]	; (277fc <_sercom_get_default_pad+0x14c>)
   276ce:	4293      	cmp	r3, r2
   276d0:	d00f      	beq.n	276f2 <_sercom_get_default_pad+0x42>
   276d2:	4a4b      	ldr	r2, [pc, #300]	; (27800 <_sercom_get_default_pad+0x150>)
   276d4:	4293      	cmp	r3, r2
   276d6:	d021      	beq.n	2771c <_sercom_get_default_pad+0x6c>
   276d8:	e089      	b.n	277ee <_sercom_get_default_pad+0x13e>
   276da:	4a4a      	ldr	r2, [pc, #296]	; (27804 <_sercom_get_default_pad+0x154>)
   276dc:	4293      	cmp	r3, r2
   276de:	d100      	bne.n	276e2 <_sercom_get_default_pad+0x32>
   276e0:	e05b      	b.n	2779a <_sercom_get_default_pad+0xea>
   276e2:	4a49      	ldr	r2, [pc, #292]	; (27808 <_sercom_get_default_pad+0x158>)
   276e4:	4293      	cmp	r3, r2
   276e6:	d100      	bne.n	276ea <_sercom_get_default_pad+0x3a>
   276e8:	e06c      	b.n	277c4 <_sercom_get_default_pad+0x114>
   276ea:	4a48      	ldr	r2, [pc, #288]	; (2780c <_sercom_get_default_pad+0x15c>)
   276ec:	4293      	cmp	r3, r2
   276ee:	d03f      	beq.n	27770 <_sercom_get_default_pad+0xc0>
   276f0:	e07d      	b.n	277ee <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   276f2:	1cfb      	adds	r3, r7, #3
   276f4:	781b      	ldrb	r3, [r3, #0]
   276f6:	2b01      	cmp	r3, #1
   276f8:	d00a      	beq.n	27710 <_sercom_get_default_pad+0x60>
   276fa:	dc02      	bgt.n	27702 <_sercom_get_default_pad+0x52>
   276fc:	2b00      	cmp	r3, #0
   276fe:	d005      	beq.n	2770c <_sercom_get_default_pad+0x5c>
   27700:	e075      	b.n	277ee <_sercom_get_default_pad+0x13e>
   27702:	2b02      	cmp	r3, #2
   27704:	d006      	beq.n	27714 <_sercom_get_default_pad+0x64>
   27706:	2b03      	cmp	r3, #3
   27708:	d006      	beq.n	27718 <_sercom_get_default_pad+0x68>
   2770a:	e070      	b.n	277ee <_sercom_get_default_pad+0x13e>
   2770c:	4b40      	ldr	r3, [pc, #256]	; (27810 <_sercom_get_default_pad+0x160>)
   2770e:	e06f      	b.n	277f0 <_sercom_get_default_pad+0x140>
   27710:	4b40      	ldr	r3, [pc, #256]	; (27814 <_sercom_get_default_pad+0x164>)
   27712:	e06d      	b.n	277f0 <_sercom_get_default_pad+0x140>
   27714:	4b40      	ldr	r3, [pc, #256]	; (27818 <_sercom_get_default_pad+0x168>)
   27716:	e06b      	b.n	277f0 <_sercom_get_default_pad+0x140>
   27718:	4b40      	ldr	r3, [pc, #256]	; (2781c <_sercom_get_default_pad+0x16c>)
   2771a:	e069      	b.n	277f0 <_sercom_get_default_pad+0x140>
   2771c:	1cfb      	adds	r3, r7, #3
   2771e:	781b      	ldrb	r3, [r3, #0]
   27720:	2b01      	cmp	r3, #1
   27722:	d00a      	beq.n	2773a <_sercom_get_default_pad+0x8a>
   27724:	dc02      	bgt.n	2772c <_sercom_get_default_pad+0x7c>
   27726:	2b00      	cmp	r3, #0
   27728:	d005      	beq.n	27736 <_sercom_get_default_pad+0x86>
   2772a:	e060      	b.n	277ee <_sercom_get_default_pad+0x13e>
   2772c:	2b02      	cmp	r3, #2
   2772e:	d006      	beq.n	2773e <_sercom_get_default_pad+0x8e>
   27730:	2b03      	cmp	r3, #3
   27732:	d006      	beq.n	27742 <_sercom_get_default_pad+0x92>
   27734:	e05b      	b.n	277ee <_sercom_get_default_pad+0x13e>
   27736:	2303      	movs	r3, #3
   27738:	e05a      	b.n	277f0 <_sercom_get_default_pad+0x140>
   2773a:	4b39      	ldr	r3, [pc, #228]	; (27820 <_sercom_get_default_pad+0x170>)
   2773c:	e058      	b.n	277f0 <_sercom_get_default_pad+0x140>
   2773e:	4b39      	ldr	r3, [pc, #228]	; (27824 <_sercom_get_default_pad+0x174>)
   27740:	e056      	b.n	277f0 <_sercom_get_default_pad+0x140>
   27742:	4b39      	ldr	r3, [pc, #228]	; (27828 <_sercom_get_default_pad+0x178>)
   27744:	e054      	b.n	277f0 <_sercom_get_default_pad+0x140>
   27746:	1cfb      	adds	r3, r7, #3
   27748:	781b      	ldrb	r3, [r3, #0]
   2774a:	2b01      	cmp	r3, #1
   2774c:	d00a      	beq.n	27764 <_sercom_get_default_pad+0xb4>
   2774e:	dc02      	bgt.n	27756 <_sercom_get_default_pad+0xa6>
   27750:	2b00      	cmp	r3, #0
   27752:	d005      	beq.n	27760 <_sercom_get_default_pad+0xb0>
   27754:	e04b      	b.n	277ee <_sercom_get_default_pad+0x13e>
   27756:	2b02      	cmp	r3, #2
   27758:	d006      	beq.n	27768 <_sercom_get_default_pad+0xb8>
   2775a:	2b03      	cmp	r3, #3
   2775c:	d006      	beq.n	2776c <_sercom_get_default_pad+0xbc>
   2775e:	e046      	b.n	277ee <_sercom_get_default_pad+0x13e>
   27760:	4b32      	ldr	r3, [pc, #200]	; (2782c <_sercom_get_default_pad+0x17c>)
   27762:	e045      	b.n	277f0 <_sercom_get_default_pad+0x140>
   27764:	4b32      	ldr	r3, [pc, #200]	; (27830 <_sercom_get_default_pad+0x180>)
   27766:	e043      	b.n	277f0 <_sercom_get_default_pad+0x140>
   27768:	4b32      	ldr	r3, [pc, #200]	; (27834 <_sercom_get_default_pad+0x184>)
   2776a:	e041      	b.n	277f0 <_sercom_get_default_pad+0x140>
   2776c:	4b32      	ldr	r3, [pc, #200]	; (27838 <_sercom_get_default_pad+0x188>)
   2776e:	e03f      	b.n	277f0 <_sercom_get_default_pad+0x140>
   27770:	1cfb      	adds	r3, r7, #3
   27772:	781b      	ldrb	r3, [r3, #0]
   27774:	2b01      	cmp	r3, #1
   27776:	d00a      	beq.n	2778e <_sercom_get_default_pad+0xde>
   27778:	dc02      	bgt.n	27780 <_sercom_get_default_pad+0xd0>
   2777a:	2b00      	cmp	r3, #0
   2777c:	d005      	beq.n	2778a <_sercom_get_default_pad+0xda>
   2777e:	e036      	b.n	277ee <_sercom_get_default_pad+0x13e>
   27780:	2b02      	cmp	r3, #2
   27782:	d006      	beq.n	27792 <_sercom_get_default_pad+0xe2>
   27784:	2b03      	cmp	r3, #3
   27786:	d006      	beq.n	27796 <_sercom_get_default_pad+0xe6>
   27788:	e031      	b.n	277ee <_sercom_get_default_pad+0x13e>
   2778a:	4b2c      	ldr	r3, [pc, #176]	; (2783c <_sercom_get_default_pad+0x18c>)
   2778c:	e030      	b.n	277f0 <_sercom_get_default_pad+0x140>
   2778e:	4b2c      	ldr	r3, [pc, #176]	; (27840 <_sercom_get_default_pad+0x190>)
   27790:	e02e      	b.n	277f0 <_sercom_get_default_pad+0x140>
   27792:	4b2c      	ldr	r3, [pc, #176]	; (27844 <_sercom_get_default_pad+0x194>)
   27794:	e02c      	b.n	277f0 <_sercom_get_default_pad+0x140>
   27796:	4b2c      	ldr	r3, [pc, #176]	; (27848 <_sercom_get_default_pad+0x198>)
   27798:	e02a      	b.n	277f0 <_sercom_get_default_pad+0x140>
   2779a:	1cfb      	adds	r3, r7, #3
   2779c:	781b      	ldrb	r3, [r3, #0]
   2779e:	2b01      	cmp	r3, #1
   277a0:	d00a      	beq.n	277b8 <_sercom_get_default_pad+0x108>
   277a2:	dc02      	bgt.n	277aa <_sercom_get_default_pad+0xfa>
   277a4:	2b00      	cmp	r3, #0
   277a6:	d005      	beq.n	277b4 <_sercom_get_default_pad+0x104>
   277a8:	e021      	b.n	277ee <_sercom_get_default_pad+0x13e>
   277aa:	2b02      	cmp	r3, #2
   277ac:	d006      	beq.n	277bc <_sercom_get_default_pad+0x10c>
   277ae:	2b03      	cmp	r3, #3
   277b0:	d006      	beq.n	277c0 <_sercom_get_default_pad+0x110>
   277b2:	e01c      	b.n	277ee <_sercom_get_default_pad+0x13e>
   277b4:	4b25      	ldr	r3, [pc, #148]	; (2784c <_sercom_get_default_pad+0x19c>)
   277b6:	e01b      	b.n	277f0 <_sercom_get_default_pad+0x140>
   277b8:	4b25      	ldr	r3, [pc, #148]	; (27850 <_sercom_get_default_pad+0x1a0>)
   277ba:	e019      	b.n	277f0 <_sercom_get_default_pad+0x140>
   277bc:	4b25      	ldr	r3, [pc, #148]	; (27854 <_sercom_get_default_pad+0x1a4>)
   277be:	e017      	b.n	277f0 <_sercom_get_default_pad+0x140>
   277c0:	4b25      	ldr	r3, [pc, #148]	; (27858 <_sercom_get_default_pad+0x1a8>)
   277c2:	e015      	b.n	277f0 <_sercom_get_default_pad+0x140>
   277c4:	1cfb      	adds	r3, r7, #3
   277c6:	781b      	ldrb	r3, [r3, #0]
   277c8:	2b01      	cmp	r3, #1
   277ca:	d00a      	beq.n	277e2 <_sercom_get_default_pad+0x132>
   277cc:	dc02      	bgt.n	277d4 <_sercom_get_default_pad+0x124>
   277ce:	2b00      	cmp	r3, #0
   277d0:	d005      	beq.n	277de <_sercom_get_default_pad+0x12e>
   277d2:	e00c      	b.n	277ee <_sercom_get_default_pad+0x13e>
   277d4:	2b02      	cmp	r3, #2
   277d6:	d006      	beq.n	277e6 <_sercom_get_default_pad+0x136>
   277d8:	2b03      	cmp	r3, #3
   277da:	d006      	beq.n	277ea <_sercom_get_default_pad+0x13a>
   277dc:	e007      	b.n	277ee <_sercom_get_default_pad+0x13e>
   277de:	4b1f      	ldr	r3, [pc, #124]	; (2785c <_sercom_get_default_pad+0x1ac>)
   277e0:	e006      	b.n	277f0 <_sercom_get_default_pad+0x140>
   277e2:	4b1f      	ldr	r3, [pc, #124]	; (27860 <_sercom_get_default_pad+0x1b0>)
   277e4:	e004      	b.n	277f0 <_sercom_get_default_pad+0x140>
   277e6:	4b1f      	ldr	r3, [pc, #124]	; (27864 <_sercom_get_default_pad+0x1b4>)
   277e8:	e002      	b.n	277f0 <_sercom_get_default_pad+0x140>
   277ea:	4b1f      	ldr	r3, [pc, #124]	; (27868 <_sercom_get_default_pad+0x1b8>)
   277ec:	e000      	b.n	277f0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   277ee:	2300      	movs	r3, #0
}
   277f0:	0018      	movs	r0, r3
   277f2:	46bd      	mov	sp, r7
   277f4:	b002      	add	sp, #8
   277f6:	bd80      	pop	{r7, pc}
   277f8:	42001000 	.word	0x42001000
   277fc:	42000800 	.word	0x42000800
   27800:	42000c00 	.word	0x42000c00
   27804:	42001800 	.word	0x42001800
   27808:	42001c00 	.word	0x42001c00
   2780c:	42001400 	.word	0x42001400
   27810:	00040003 	.word	0x00040003
   27814:	00050003 	.word	0x00050003
   27818:	00060003 	.word	0x00060003
   2781c:	00070003 	.word	0x00070003
   27820:	00010003 	.word	0x00010003
   27824:	001e0003 	.word	0x001e0003
   27828:	001f0003 	.word	0x001f0003
   2782c:	00080003 	.word	0x00080003
   27830:	00090003 	.word	0x00090003
   27834:	000a0003 	.word	0x000a0003
   27838:	000b0003 	.word	0x000b0003
   2783c:	00100003 	.word	0x00100003
   27840:	00110003 	.word	0x00110003
   27844:	00120003 	.word	0x00120003
   27848:	00130003 	.word	0x00130003
   2784c:	000c0003 	.word	0x000c0003
   27850:	000d0003 	.word	0x000d0003
   27854:	000e0003 	.word	0x000e0003
   27858:	000f0003 	.word	0x000f0003
   2785c:	00160003 	.word	0x00160003
   27860:	00170003 	.word	0x00170003
   27864:	00180003 	.word	0x00180003
   27868:	00190003 	.word	0x00190003

0002786c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   2786c:	b590      	push	{r4, r7, lr}
   2786e:	b08b      	sub	sp, #44	; 0x2c
   27870:	af00      	add	r7, sp, #0
   27872:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   27874:	230c      	movs	r3, #12
   27876:	18fb      	adds	r3, r7, r3
   27878:	4a0f      	ldr	r2, [pc, #60]	; (278b8 <_sercom_get_sercom_inst_index+0x4c>)
   2787a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2787c:	c313      	stmia	r3!, {r0, r1, r4}
   2787e:	ca13      	ldmia	r2!, {r0, r1, r4}
   27880:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27882:	2300      	movs	r3, #0
   27884:	627b      	str	r3, [r7, #36]	; 0x24
   27886:	e00e      	b.n	278a6 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   27888:	230c      	movs	r3, #12
   2788a:	18fb      	adds	r3, r7, r3
   2788c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2788e:	0092      	lsls	r2, r2, #2
   27890:	58d3      	ldr	r3, [r2, r3]
   27892:	001a      	movs	r2, r3
   27894:	687b      	ldr	r3, [r7, #4]
   27896:	429a      	cmp	r2, r3
   27898:	d102      	bne.n	278a0 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2789c:	b2db      	uxtb	r3, r3
   2789e:	e006      	b.n	278ae <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   278a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   278a2:	3301      	adds	r3, #1
   278a4:	627b      	str	r3, [r7, #36]	; 0x24
   278a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   278a8:	2b05      	cmp	r3, #5
   278aa:	d9ed      	bls.n	27888 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   278ac:	2300      	movs	r3, #0
}
   278ae:	0018      	movs	r0, r3
   278b0:	46bd      	mov	sp, r7
   278b2:	b00b      	add	sp, #44	; 0x2c
   278b4:	bd90      	pop	{r4, r7, pc}
   278b6:	46c0      	nop			; (mov r8, r8)
   278b8:	00039610 	.word	0x00039610

000278bc <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   278bc:	b580      	push	{r7, lr}
   278be:	b082      	sub	sp, #8
   278c0:	af00      	add	r7, sp, #0
   278c2:	0002      	movs	r2, r0
   278c4:	1dfb      	adds	r3, r7, #7
   278c6:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   278c8:	46c0      	nop			; (mov r8, r8)
   278ca:	46bd      	mov	sp, r7
   278cc:	b002      	add	sp, #8
   278ce:	bd80      	pop	{r7, pc}

000278d0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   278d0:	b580      	push	{r7, lr}
   278d2:	b084      	sub	sp, #16
   278d4:	af00      	add	r7, sp, #0
   278d6:	0002      	movs	r2, r0
   278d8:	6039      	str	r1, [r7, #0]
   278da:	1dfb      	adds	r3, r7, #7
   278dc:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   278de:	4b13      	ldr	r3, [pc, #76]	; (2792c <_sercom_set_handler+0x5c>)
   278e0:	781b      	ldrb	r3, [r3, #0]
   278e2:	2201      	movs	r2, #1
   278e4:	4053      	eors	r3, r2
   278e6:	b2db      	uxtb	r3, r3
   278e8:	2b00      	cmp	r3, #0
   278ea:	d015      	beq.n	27918 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   278ec:	2300      	movs	r3, #0
   278ee:	60fb      	str	r3, [r7, #12]
   278f0:	e00c      	b.n	2790c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   278f2:	4b0f      	ldr	r3, [pc, #60]	; (27930 <_sercom_set_handler+0x60>)
   278f4:	68fa      	ldr	r2, [r7, #12]
   278f6:	0092      	lsls	r2, r2, #2
   278f8:	490e      	ldr	r1, [pc, #56]	; (27934 <_sercom_set_handler+0x64>)
   278fa:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   278fc:	4b0e      	ldr	r3, [pc, #56]	; (27938 <_sercom_set_handler+0x68>)
   278fe:	68fa      	ldr	r2, [r7, #12]
   27900:	0092      	lsls	r2, r2, #2
   27902:	2100      	movs	r1, #0
   27904:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   27906:	68fb      	ldr	r3, [r7, #12]
   27908:	3301      	adds	r3, #1
   2790a:	60fb      	str	r3, [r7, #12]
   2790c:	68fb      	ldr	r3, [r7, #12]
   2790e:	2b05      	cmp	r3, #5
   27910:	d9ef      	bls.n	278f2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   27912:	4b06      	ldr	r3, [pc, #24]	; (2792c <_sercom_set_handler+0x5c>)
   27914:	2201      	movs	r2, #1
   27916:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   27918:	1dfb      	adds	r3, r7, #7
   2791a:	781a      	ldrb	r2, [r3, #0]
   2791c:	4b04      	ldr	r3, [pc, #16]	; (27930 <_sercom_set_handler+0x60>)
   2791e:	0092      	lsls	r2, r2, #2
   27920:	6839      	ldr	r1, [r7, #0]
   27922:	50d1      	str	r1, [r2, r3]
}
   27924:	46c0      	nop			; (mov r8, r8)
   27926:	46bd      	mov	sp, r7
   27928:	b004      	add	sp, #16
   2792a:	bd80      	pop	{r7, pc}
   2792c:	20003eb2 	.word	0x20003eb2
   27930:	20003eb4 	.word	0x20003eb4
   27934:	000278bd 	.word	0x000278bd
   27938:	20005794 	.word	0x20005794

0002793c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2793c:	b590      	push	{r4, r7, lr}
   2793e:	b085      	sub	sp, #20
   27940:	af00      	add	r7, sp, #0
   27942:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   27944:	2308      	movs	r3, #8
   27946:	18fb      	adds	r3, r7, r3
   27948:	4a0b      	ldr	r2, [pc, #44]	; (27978 <_sercom_get_interrupt_vector+0x3c>)
   2794a:	6811      	ldr	r1, [r2, #0]
   2794c:	6019      	str	r1, [r3, #0]
   2794e:	8892      	ldrh	r2, [r2, #4]
   27950:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   27952:	230f      	movs	r3, #15
   27954:	18fc      	adds	r4, r7, r3
   27956:	687b      	ldr	r3, [r7, #4]
   27958:	0018      	movs	r0, r3
   2795a:	4b08      	ldr	r3, [pc, #32]	; (2797c <_sercom_get_interrupt_vector+0x40>)
   2795c:	4798      	blx	r3
   2795e:	0003      	movs	r3, r0
   27960:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   27962:	230f      	movs	r3, #15
   27964:	18fb      	adds	r3, r7, r3
   27966:	781b      	ldrb	r3, [r3, #0]
   27968:	2208      	movs	r2, #8
   2796a:	18ba      	adds	r2, r7, r2
   2796c:	5cd3      	ldrb	r3, [r2, r3]
   2796e:	b25b      	sxtb	r3, r3
}
   27970:	0018      	movs	r0, r3
   27972:	46bd      	mov	sp, r7
   27974:	b005      	add	sp, #20
   27976:	bd90      	pop	{r4, r7, pc}
   27978:	00039628 	.word	0x00039628
   2797c:	0002786d 	.word	0x0002786d

00027980 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   27980:	b580      	push	{r7, lr}
   27982:	af00      	add	r7, sp, #0
   27984:	4b03      	ldr	r3, [pc, #12]	; (27994 <SERCOM0_Handler+0x14>)
   27986:	681b      	ldr	r3, [r3, #0]
   27988:	2000      	movs	r0, #0
   2798a:	4798      	blx	r3
   2798c:	46c0      	nop			; (mov r8, r8)
   2798e:	46bd      	mov	sp, r7
   27990:	bd80      	pop	{r7, pc}
   27992:	46c0      	nop			; (mov r8, r8)
   27994:	20003eb4 	.word	0x20003eb4

00027998 <SERCOM1_Handler>:
   27998:	b580      	push	{r7, lr}
   2799a:	af00      	add	r7, sp, #0
   2799c:	4b03      	ldr	r3, [pc, #12]	; (279ac <SERCOM1_Handler+0x14>)
   2799e:	685b      	ldr	r3, [r3, #4]
   279a0:	2001      	movs	r0, #1
   279a2:	4798      	blx	r3
   279a4:	46c0      	nop			; (mov r8, r8)
   279a6:	46bd      	mov	sp, r7
   279a8:	bd80      	pop	{r7, pc}
   279aa:	46c0      	nop			; (mov r8, r8)
   279ac:	20003eb4 	.word	0x20003eb4

000279b0 <SERCOM2_Handler>:
   279b0:	b580      	push	{r7, lr}
   279b2:	af00      	add	r7, sp, #0
   279b4:	4b03      	ldr	r3, [pc, #12]	; (279c4 <SERCOM2_Handler+0x14>)
   279b6:	689b      	ldr	r3, [r3, #8]
   279b8:	2002      	movs	r0, #2
   279ba:	4798      	blx	r3
   279bc:	46c0      	nop			; (mov r8, r8)
   279be:	46bd      	mov	sp, r7
   279c0:	bd80      	pop	{r7, pc}
   279c2:	46c0      	nop			; (mov r8, r8)
   279c4:	20003eb4 	.word	0x20003eb4

000279c8 <SERCOM3_Handler>:
   279c8:	b580      	push	{r7, lr}
   279ca:	af00      	add	r7, sp, #0
   279cc:	4b03      	ldr	r3, [pc, #12]	; (279dc <SERCOM3_Handler+0x14>)
   279ce:	68db      	ldr	r3, [r3, #12]
   279d0:	2003      	movs	r0, #3
   279d2:	4798      	blx	r3
   279d4:	46c0      	nop			; (mov r8, r8)
   279d6:	46bd      	mov	sp, r7
   279d8:	bd80      	pop	{r7, pc}
   279da:	46c0      	nop			; (mov r8, r8)
   279dc:	20003eb4 	.word	0x20003eb4

000279e0 <SERCOM4_Handler>:
   279e0:	b580      	push	{r7, lr}
   279e2:	af00      	add	r7, sp, #0
   279e4:	4b03      	ldr	r3, [pc, #12]	; (279f4 <SERCOM4_Handler+0x14>)
   279e6:	691b      	ldr	r3, [r3, #16]
   279e8:	2004      	movs	r0, #4
   279ea:	4798      	blx	r3
   279ec:	46c0      	nop			; (mov r8, r8)
   279ee:	46bd      	mov	sp, r7
   279f0:	bd80      	pop	{r7, pc}
   279f2:	46c0      	nop			; (mov r8, r8)
   279f4:	20003eb4 	.word	0x20003eb4

000279f8 <SERCOM5_Handler>:
   279f8:	b580      	push	{r7, lr}
   279fa:	af00      	add	r7, sp, #0
   279fc:	4b03      	ldr	r3, [pc, #12]	; (27a0c <SERCOM5_Handler+0x14>)
   279fe:	695b      	ldr	r3, [r3, #20]
   27a00:	2005      	movs	r0, #5
   27a02:	4798      	blx	r3
   27a04:	46c0      	nop			; (mov r8, r8)
   27a06:	46bd      	mov	sp, r7
   27a08:	bd80      	pop	{r7, pc}
   27a0a:	46c0      	nop			; (mov r8, r8)
   27a0c:	20003eb4 	.word	0x20003eb4

00027a10 <system_pinmux_get_config_defaults>:
{
   27a10:	b580      	push	{r7, lr}
   27a12:	b082      	sub	sp, #8
   27a14:	af00      	add	r7, sp, #0
   27a16:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27a18:	687b      	ldr	r3, [r7, #4]
   27a1a:	2280      	movs	r2, #128	; 0x80
   27a1c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27a1e:	687b      	ldr	r3, [r7, #4]
   27a20:	2200      	movs	r2, #0
   27a22:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27a24:	687b      	ldr	r3, [r7, #4]
   27a26:	2201      	movs	r2, #1
   27a28:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27a2a:	687b      	ldr	r3, [r7, #4]
   27a2c:	2200      	movs	r2, #0
   27a2e:	70da      	strb	r2, [r3, #3]
}
   27a30:	46c0      	nop			; (mov r8, r8)
   27a32:	46bd      	mov	sp, r7
   27a34:	b002      	add	sp, #8
   27a36:	bd80      	pop	{r7, pc}

00027a38 <system_pinmux_get_group_from_gpio_pin>:
{
   27a38:	b580      	push	{r7, lr}
   27a3a:	b084      	sub	sp, #16
   27a3c:	af00      	add	r7, sp, #0
   27a3e:	0002      	movs	r2, r0
   27a40:	1dfb      	adds	r3, r7, #7
   27a42:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   27a44:	230f      	movs	r3, #15
   27a46:	18fb      	adds	r3, r7, r3
   27a48:	1dfa      	adds	r2, r7, #7
   27a4a:	7812      	ldrb	r2, [r2, #0]
   27a4c:	09d2      	lsrs	r2, r2, #7
   27a4e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   27a50:	230e      	movs	r3, #14
   27a52:	18fb      	adds	r3, r7, r3
   27a54:	1dfa      	adds	r2, r7, #7
   27a56:	7812      	ldrb	r2, [r2, #0]
   27a58:	0952      	lsrs	r2, r2, #5
   27a5a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   27a5c:	4b0d      	ldr	r3, [pc, #52]	; (27a94 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   27a5e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   27a60:	230f      	movs	r3, #15
   27a62:	18fb      	adds	r3, r7, r3
   27a64:	781b      	ldrb	r3, [r3, #0]
   27a66:	2b00      	cmp	r3, #0
   27a68:	d10f      	bne.n	27a8a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   27a6a:	230f      	movs	r3, #15
   27a6c:	18fb      	adds	r3, r7, r3
   27a6e:	781b      	ldrb	r3, [r3, #0]
   27a70:	009b      	lsls	r3, r3, #2
   27a72:	2210      	movs	r2, #16
   27a74:	4694      	mov	ip, r2
   27a76:	44bc      	add	ip, r7
   27a78:	4463      	add	r3, ip
   27a7a:	3b08      	subs	r3, #8
   27a7c:	681a      	ldr	r2, [r3, #0]
   27a7e:	230e      	movs	r3, #14
   27a80:	18fb      	adds	r3, r7, r3
   27a82:	781b      	ldrb	r3, [r3, #0]
   27a84:	01db      	lsls	r3, r3, #7
   27a86:	18d3      	adds	r3, r2, r3
   27a88:	e000      	b.n	27a8c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   27a8a:	2300      	movs	r3, #0
}
   27a8c:	0018      	movs	r0, r3
   27a8e:	46bd      	mov	sp, r7
   27a90:	b004      	add	sp, #16
   27a92:	bd80      	pop	{r7, pc}
   27a94:	41004400 	.word	0x41004400

00027a98 <port_get_group_from_gpio_pin>:
{
   27a98:	b580      	push	{r7, lr}
   27a9a:	b082      	sub	sp, #8
   27a9c:	af00      	add	r7, sp, #0
   27a9e:	0002      	movs	r2, r0
   27aa0:	1dfb      	adds	r3, r7, #7
   27aa2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27aa4:	1dfb      	adds	r3, r7, #7
   27aa6:	781b      	ldrb	r3, [r3, #0]
   27aa8:	0018      	movs	r0, r3
   27aaa:	4b03      	ldr	r3, [pc, #12]	; (27ab8 <port_get_group_from_gpio_pin+0x20>)
   27aac:	4798      	blx	r3
   27aae:	0003      	movs	r3, r0
}
   27ab0:	0018      	movs	r0, r3
   27ab2:	46bd      	mov	sp, r7
   27ab4:	b002      	add	sp, #8
   27ab6:	bd80      	pop	{r7, pc}
   27ab8:	00027a39 	.word	0x00027a39

00027abc <port_pin_set_output_level>:
{
   27abc:	b580      	push	{r7, lr}
   27abe:	b084      	sub	sp, #16
   27ac0:	af00      	add	r7, sp, #0
   27ac2:	0002      	movs	r2, r0
   27ac4:	1dfb      	adds	r3, r7, #7
   27ac6:	701a      	strb	r2, [r3, #0]
   27ac8:	1dbb      	adds	r3, r7, #6
   27aca:	1c0a      	adds	r2, r1, #0
   27acc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   27ace:	1dfb      	adds	r3, r7, #7
   27ad0:	781b      	ldrb	r3, [r3, #0]
   27ad2:	0018      	movs	r0, r3
   27ad4:	4b0d      	ldr	r3, [pc, #52]	; (27b0c <port_pin_set_output_level+0x50>)
   27ad6:	4798      	blx	r3
   27ad8:	0003      	movs	r3, r0
   27ada:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   27adc:	1dfb      	adds	r3, r7, #7
   27ade:	781b      	ldrb	r3, [r3, #0]
   27ae0:	221f      	movs	r2, #31
   27ae2:	4013      	ands	r3, r2
   27ae4:	2201      	movs	r2, #1
   27ae6:	409a      	lsls	r2, r3
   27ae8:	0013      	movs	r3, r2
   27aea:	60bb      	str	r3, [r7, #8]
	if (level) {
   27aec:	1dbb      	adds	r3, r7, #6
   27aee:	781b      	ldrb	r3, [r3, #0]
   27af0:	2b00      	cmp	r3, #0
   27af2:	d003      	beq.n	27afc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27af4:	68fb      	ldr	r3, [r7, #12]
   27af6:	68ba      	ldr	r2, [r7, #8]
   27af8:	619a      	str	r2, [r3, #24]
}
   27afa:	e002      	b.n	27b02 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   27afc:	68fb      	ldr	r3, [r7, #12]
   27afe:	68ba      	ldr	r2, [r7, #8]
   27b00:	615a      	str	r2, [r3, #20]
}
   27b02:	46c0      	nop			; (mov r8, r8)
   27b04:	46bd      	mov	sp, r7
   27b06:	b004      	add	sp, #16
   27b08:	bd80      	pop	{r7, pc}
   27b0a:	46c0      	nop			; (mov r8, r8)
   27b0c:	00027a99 	.word	0x00027a99

00027b10 <system_gclk_chan_get_config_defaults>:
{
   27b10:	b580      	push	{r7, lr}
   27b12:	b082      	sub	sp, #8
   27b14:	af00      	add	r7, sp, #0
   27b16:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27b18:	687b      	ldr	r3, [r7, #4]
   27b1a:	2200      	movs	r2, #0
   27b1c:	701a      	strb	r2, [r3, #0]
}
   27b1e:	46c0      	nop			; (mov r8, r8)
   27b20:	46bd      	mov	sp, r7
   27b22:	b002      	add	sp, #8
   27b24:	bd80      	pop	{r7, pc}
	...

00027b28 <system_apb_clock_set_mask>:
{
   27b28:	b580      	push	{r7, lr}
   27b2a:	b082      	sub	sp, #8
   27b2c:	af00      	add	r7, sp, #0
   27b2e:	0002      	movs	r2, r0
   27b30:	6039      	str	r1, [r7, #0]
   27b32:	1dfb      	adds	r3, r7, #7
   27b34:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27b36:	1dfb      	adds	r3, r7, #7
   27b38:	781b      	ldrb	r3, [r3, #0]
   27b3a:	2b01      	cmp	r3, #1
   27b3c:	d00a      	beq.n	27b54 <system_apb_clock_set_mask+0x2c>
   27b3e:	2b02      	cmp	r3, #2
   27b40:	d00f      	beq.n	27b62 <system_apb_clock_set_mask+0x3a>
   27b42:	2b00      	cmp	r3, #0
   27b44:	d114      	bne.n	27b70 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27b46:	4b0e      	ldr	r3, [pc, #56]	; (27b80 <system_apb_clock_set_mask+0x58>)
   27b48:	4a0d      	ldr	r2, [pc, #52]	; (27b80 <system_apb_clock_set_mask+0x58>)
   27b4a:	6991      	ldr	r1, [r2, #24]
   27b4c:	683a      	ldr	r2, [r7, #0]
   27b4e:	430a      	orrs	r2, r1
   27b50:	619a      	str	r2, [r3, #24]
			break;
   27b52:	e00f      	b.n	27b74 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27b54:	4b0a      	ldr	r3, [pc, #40]	; (27b80 <system_apb_clock_set_mask+0x58>)
   27b56:	4a0a      	ldr	r2, [pc, #40]	; (27b80 <system_apb_clock_set_mask+0x58>)
   27b58:	69d1      	ldr	r1, [r2, #28]
   27b5a:	683a      	ldr	r2, [r7, #0]
   27b5c:	430a      	orrs	r2, r1
   27b5e:	61da      	str	r2, [r3, #28]
			break;
   27b60:	e008      	b.n	27b74 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27b62:	4b07      	ldr	r3, [pc, #28]	; (27b80 <system_apb_clock_set_mask+0x58>)
   27b64:	4a06      	ldr	r2, [pc, #24]	; (27b80 <system_apb_clock_set_mask+0x58>)
   27b66:	6a11      	ldr	r1, [r2, #32]
   27b68:	683a      	ldr	r2, [r7, #0]
   27b6a:	430a      	orrs	r2, r1
   27b6c:	621a      	str	r2, [r3, #32]
			break;
   27b6e:	e001      	b.n	27b74 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27b70:	2317      	movs	r3, #23
   27b72:	e000      	b.n	27b76 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27b74:	2300      	movs	r3, #0
}
   27b76:	0018      	movs	r0, r3
   27b78:	46bd      	mov	sp, r7
   27b7a:	b002      	add	sp, #8
   27b7c:	bd80      	pop	{r7, pc}
   27b7e:	46c0      	nop			; (mov r8, r8)
   27b80:	40000400 	.word	0x40000400

00027b84 <system_is_debugger_present>:
{
   27b84:	b580      	push	{r7, lr}
   27b86:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27b88:	4b05      	ldr	r3, [pc, #20]	; (27ba0 <system_is_debugger_present+0x1c>)
   27b8a:	789b      	ldrb	r3, [r3, #2]
   27b8c:	b2db      	uxtb	r3, r3
   27b8e:	001a      	movs	r2, r3
   27b90:	2302      	movs	r3, #2
   27b92:	4013      	ands	r3, r2
   27b94:	1e5a      	subs	r2, r3, #1
   27b96:	4193      	sbcs	r3, r2
   27b98:	b2db      	uxtb	r3, r3
}
   27b9a:	0018      	movs	r0, r3
   27b9c:	46bd      	mov	sp, r7
   27b9e:	bd80      	pop	{r7, pc}
   27ba0:	41002000 	.word	0x41002000

00027ba4 <system_interrupt_enable>:
{
   27ba4:	b580      	push	{r7, lr}
   27ba6:	b082      	sub	sp, #8
   27ba8:	af00      	add	r7, sp, #0
   27baa:	0002      	movs	r2, r0
   27bac:	1dfb      	adds	r3, r7, #7
   27bae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27bb0:	4b06      	ldr	r3, [pc, #24]	; (27bcc <system_interrupt_enable+0x28>)
   27bb2:	1dfa      	adds	r2, r7, #7
   27bb4:	7812      	ldrb	r2, [r2, #0]
   27bb6:	0011      	movs	r1, r2
   27bb8:	221f      	movs	r2, #31
   27bba:	400a      	ands	r2, r1
   27bbc:	2101      	movs	r1, #1
   27bbe:	4091      	lsls	r1, r2
   27bc0:	000a      	movs	r2, r1
   27bc2:	601a      	str	r2, [r3, #0]
}
   27bc4:	46c0      	nop			; (mov r8, r8)
   27bc6:	46bd      	mov	sp, r7
   27bc8:	b002      	add	sp, #8
   27bca:	bd80      	pop	{r7, pc}
   27bcc:	e000e100 	.word	0xe000e100

00027bd0 <system_interrupt_disable>:
{
   27bd0:	b580      	push	{r7, lr}
   27bd2:	b082      	sub	sp, #8
   27bd4:	af00      	add	r7, sp, #0
   27bd6:	0002      	movs	r2, r0
   27bd8:	1dfb      	adds	r3, r7, #7
   27bda:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27bdc:	4a07      	ldr	r2, [pc, #28]	; (27bfc <system_interrupt_disable+0x2c>)
   27bde:	1dfb      	adds	r3, r7, #7
   27be0:	781b      	ldrb	r3, [r3, #0]
   27be2:	0019      	movs	r1, r3
   27be4:	231f      	movs	r3, #31
   27be6:	400b      	ands	r3, r1
   27be8:	2101      	movs	r1, #1
   27bea:	4099      	lsls	r1, r3
   27bec:	000b      	movs	r3, r1
   27bee:	0019      	movs	r1, r3
   27bf0:	2380      	movs	r3, #128	; 0x80
   27bf2:	50d1      	str	r1, [r2, r3]
}
   27bf4:	46c0      	nop			; (mov r8, r8)
   27bf6:	46bd      	mov	sp, r7
   27bf8:	b002      	add	sp, #8
   27bfa:	bd80      	pop	{r7, pc}
   27bfc:	e000e100 	.word	0xe000e100

00027c00 <spi_is_syncing>:
{
   27c00:	b580      	push	{r7, lr}
   27c02:	b084      	sub	sp, #16
   27c04:	af00      	add	r7, sp, #0
   27c06:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27c08:	687b      	ldr	r3, [r7, #4]
   27c0a:	681b      	ldr	r3, [r3, #0]
   27c0c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   27c0e:	68fb      	ldr	r3, [r7, #12]
   27c10:	69db      	ldr	r3, [r3, #28]
   27c12:	1e5a      	subs	r2, r3, #1
   27c14:	4193      	sbcs	r3, r2
   27c16:	b2db      	uxtb	r3, r3
}
   27c18:	0018      	movs	r0, r3
   27c1a:	46bd      	mov	sp, r7
   27c1c:	b004      	add	sp, #16
   27c1e:	bd80      	pop	{r7, pc}

00027c20 <spi_enable>:
{
   27c20:	b580      	push	{r7, lr}
   27c22:	b084      	sub	sp, #16
   27c24:	af00      	add	r7, sp, #0
   27c26:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27c28:	687b      	ldr	r3, [r7, #4]
   27c2a:	681b      	ldr	r3, [r3, #0]
   27c2c:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   27c2e:	687b      	ldr	r3, [r7, #4]
   27c30:	681b      	ldr	r3, [r3, #0]
   27c32:	0018      	movs	r0, r3
   27c34:	4b0b      	ldr	r3, [pc, #44]	; (27c64 <spi_enable+0x44>)
   27c36:	4798      	blx	r3
   27c38:	0003      	movs	r3, r0
   27c3a:	0018      	movs	r0, r3
   27c3c:	4b0a      	ldr	r3, [pc, #40]	; (27c68 <spi_enable+0x48>)
   27c3e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27c40:	46c0      	nop			; (mov r8, r8)
   27c42:	687b      	ldr	r3, [r7, #4]
   27c44:	0018      	movs	r0, r3
   27c46:	4b09      	ldr	r3, [pc, #36]	; (27c6c <spi_enable+0x4c>)
   27c48:	4798      	blx	r3
   27c4a:	1e03      	subs	r3, r0, #0
   27c4c:	d1f9      	bne.n	27c42 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   27c4e:	68fb      	ldr	r3, [r7, #12]
   27c50:	681b      	ldr	r3, [r3, #0]
   27c52:	2202      	movs	r2, #2
   27c54:	431a      	orrs	r2, r3
   27c56:	68fb      	ldr	r3, [r7, #12]
   27c58:	601a      	str	r2, [r3, #0]
}
   27c5a:	46c0      	nop			; (mov r8, r8)
   27c5c:	46bd      	mov	sp, r7
   27c5e:	b004      	add	sp, #16
   27c60:	bd80      	pop	{r7, pc}
   27c62:	46c0      	nop			; (mov r8, r8)
   27c64:	0002793d 	.word	0x0002793d
   27c68:	00027ba5 	.word	0x00027ba5
   27c6c:	00027c01 	.word	0x00027c01

00027c70 <spi_disable>:
{
   27c70:	b580      	push	{r7, lr}
   27c72:	b084      	sub	sp, #16
   27c74:	af00      	add	r7, sp, #0
   27c76:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27c78:	687b      	ldr	r3, [r7, #4]
   27c7a:	681b      	ldr	r3, [r3, #0]
   27c7c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   27c7e:	687b      	ldr	r3, [r7, #4]
   27c80:	681b      	ldr	r3, [r3, #0]
   27c82:	0018      	movs	r0, r3
   27c84:	4b0e      	ldr	r3, [pc, #56]	; (27cc0 <spi_disable+0x50>)
   27c86:	4798      	blx	r3
   27c88:	0003      	movs	r3, r0
   27c8a:	0018      	movs	r0, r3
   27c8c:	4b0d      	ldr	r3, [pc, #52]	; (27cc4 <spi_disable+0x54>)
   27c8e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   27c90:	46c0      	nop			; (mov r8, r8)
   27c92:	687b      	ldr	r3, [r7, #4]
   27c94:	0018      	movs	r0, r3
   27c96:	4b0c      	ldr	r3, [pc, #48]	; (27cc8 <spi_disable+0x58>)
   27c98:	4798      	blx	r3
   27c9a:	1e03      	subs	r3, r0, #0
   27c9c:	d1f9      	bne.n	27c92 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   27c9e:	68fb      	ldr	r3, [r7, #12]
   27ca0:	228f      	movs	r2, #143	; 0x8f
   27ca2:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   27ca4:	68fb      	ldr	r3, [r7, #12]
   27ca6:	228f      	movs	r2, #143	; 0x8f
   27ca8:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   27caa:	68fb      	ldr	r3, [r7, #12]
   27cac:	681b      	ldr	r3, [r3, #0]
   27cae:	2202      	movs	r2, #2
   27cb0:	4393      	bics	r3, r2
   27cb2:	001a      	movs	r2, r3
   27cb4:	68fb      	ldr	r3, [r7, #12]
   27cb6:	601a      	str	r2, [r3, #0]
}
   27cb8:	46c0      	nop			; (mov r8, r8)
   27cba:	46bd      	mov	sp, r7
   27cbc:	b004      	add	sp, #16
   27cbe:	bd80      	pop	{r7, pc}
   27cc0:	0002793d 	.word	0x0002793d
   27cc4:	00027bd1 	.word	0x00027bd1
   27cc8:	00027c01 	.word	0x00027c01

00027ccc <spi_is_write_complete>:
{
   27ccc:	b580      	push	{r7, lr}
   27cce:	b084      	sub	sp, #16
   27cd0:	af00      	add	r7, sp, #0
   27cd2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27cd4:	687b      	ldr	r3, [r7, #4]
   27cd6:	681b      	ldr	r3, [r3, #0]
   27cd8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   27cda:	68fb      	ldr	r3, [r7, #12]
   27cdc:	7e1b      	ldrb	r3, [r3, #24]
   27cde:	b2db      	uxtb	r3, r3
   27ce0:	001a      	movs	r2, r3
   27ce2:	2302      	movs	r3, #2
   27ce4:	4013      	ands	r3, r2
   27ce6:	1e5a      	subs	r2, r3, #1
   27ce8:	4193      	sbcs	r3, r2
   27cea:	b2db      	uxtb	r3, r3
}
   27cec:	0018      	movs	r0, r3
   27cee:	46bd      	mov	sp, r7
   27cf0:	b004      	add	sp, #16
   27cf2:	bd80      	pop	{r7, pc}

00027cf4 <spi_is_ready_to_write>:
{
   27cf4:	b580      	push	{r7, lr}
   27cf6:	b084      	sub	sp, #16
   27cf8:	af00      	add	r7, sp, #0
   27cfa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27cfc:	687b      	ldr	r3, [r7, #4]
   27cfe:	681b      	ldr	r3, [r3, #0]
   27d00:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   27d02:	68fb      	ldr	r3, [r7, #12]
   27d04:	7e1b      	ldrb	r3, [r3, #24]
   27d06:	b2db      	uxtb	r3, r3
   27d08:	001a      	movs	r2, r3
   27d0a:	2301      	movs	r3, #1
   27d0c:	4013      	ands	r3, r2
   27d0e:	1e5a      	subs	r2, r3, #1
   27d10:	4193      	sbcs	r3, r2
   27d12:	b2db      	uxtb	r3, r3
}
   27d14:	0018      	movs	r0, r3
   27d16:	46bd      	mov	sp, r7
   27d18:	b004      	add	sp, #16
   27d1a:	bd80      	pop	{r7, pc}

00027d1c <spi_is_ready_to_read>:
{
   27d1c:	b580      	push	{r7, lr}
   27d1e:	b084      	sub	sp, #16
   27d20:	af00      	add	r7, sp, #0
   27d22:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27d24:	687b      	ldr	r3, [r7, #4]
   27d26:	681b      	ldr	r3, [r3, #0]
   27d28:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   27d2a:	68fb      	ldr	r3, [r7, #12]
   27d2c:	7e1b      	ldrb	r3, [r3, #24]
   27d2e:	b2db      	uxtb	r3, r3
   27d30:	001a      	movs	r2, r3
   27d32:	2304      	movs	r3, #4
   27d34:	4013      	ands	r3, r2
   27d36:	1e5a      	subs	r2, r3, #1
   27d38:	4193      	sbcs	r3, r2
   27d3a:	b2db      	uxtb	r3, r3
}
   27d3c:	0018      	movs	r0, r3
   27d3e:	46bd      	mov	sp, r7
   27d40:	b004      	add	sp, #16
   27d42:	bd80      	pop	{r7, pc}

00027d44 <spi_write>:
{
   27d44:	b580      	push	{r7, lr}
   27d46:	b084      	sub	sp, #16
   27d48:	af00      	add	r7, sp, #0
   27d4a:	6078      	str	r0, [r7, #4]
   27d4c:	000a      	movs	r2, r1
   27d4e:	1cbb      	adds	r3, r7, #2
   27d50:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27d52:	687b      	ldr	r3, [r7, #4]
   27d54:	681b      	ldr	r3, [r3, #0]
   27d56:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   27d58:	687b      	ldr	r3, [r7, #4]
   27d5a:	0018      	movs	r0, r3
   27d5c:	4b0a      	ldr	r3, [pc, #40]	; (27d88 <spi_write+0x44>)
   27d5e:	4798      	blx	r3
   27d60:	0003      	movs	r3, r0
   27d62:	001a      	movs	r2, r3
   27d64:	2301      	movs	r3, #1
   27d66:	4053      	eors	r3, r2
   27d68:	b2db      	uxtb	r3, r3
   27d6a:	2b00      	cmp	r3, #0
   27d6c:	d001      	beq.n	27d72 <spi_write+0x2e>
		return STATUS_BUSY;
   27d6e:	2305      	movs	r3, #5
   27d70:	e006      	b.n	27d80 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   27d72:	1cbb      	adds	r3, r7, #2
   27d74:	881b      	ldrh	r3, [r3, #0]
   27d76:	05db      	lsls	r3, r3, #23
   27d78:	0dda      	lsrs	r2, r3, #23
   27d7a:	68fb      	ldr	r3, [r7, #12]
   27d7c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   27d7e:	2300      	movs	r3, #0
}
   27d80:	0018      	movs	r0, r3
   27d82:	46bd      	mov	sp, r7
   27d84:	b004      	add	sp, #16
   27d86:	bd80      	pop	{r7, pc}
   27d88:	00027cf5 	.word	0x00027cf5

00027d8c <spi_read>:
{
   27d8c:	b580      	push	{r7, lr}
   27d8e:	b084      	sub	sp, #16
   27d90:	af00      	add	r7, sp, #0
   27d92:	6078      	str	r0, [r7, #4]
   27d94:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   27d96:	687b      	ldr	r3, [r7, #4]
   27d98:	681b      	ldr	r3, [r3, #0]
   27d9a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   27d9c:	687b      	ldr	r3, [r7, #4]
   27d9e:	0018      	movs	r0, r3
   27da0:	4b1b      	ldr	r3, [pc, #108]	; (27e10 <spi_read+0x84>)
   27da2:	4798      	blx	r3
   27da4:	0003      	movs	r3, r0
   27da6:	001a      	movs	r2, r3
   27da8:	2301      	movs	r3, #1
   27daa:	4053      	eors	r3, r2
   27dac:	b2db      	uxtb	r3, r3
   27dae:	2b00      	cmp	r3, #0
   27db0:	d001      	beq.n	27db6 <spi_read+0x2a>
		return STATUS_ERR_IO;
   27db2:	2310      	movs	r3, #16
   27db4:	e027      	b.n	27e06 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   27db6:	230f      	movs	r3, #15
   27db8:	18fb      	adds	r3, r7, r3
   27dba:	2200      	movs	r2, #0
   27dbc:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   27dbe:	68bb      	ldr	r3, [r7, #8]
   27dc0:	8b5b      	ldrh	r3, [r3, #26]
   27dc2:	b29b      	uxth	r3, r3
   27dc4:	001a      	movs	r2, r3
   27dc6:	2304      	movs	r3, #4
   27dc8:	4013      	ands	r3, r2
   27dca:	d006      	beq.n	27dda <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   27dcc:	230f      	movs	r3, #15
   27dce:	18fb      	adds	r3, r7, r3
   27dd0:	221e      	movs	r2, #30
   27dd2:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   27dd4:	68bb      	ldr	r3, [r7, #8]
   27dd6:	2204      	movs	r2, #4
   27dd8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   27dda:	687b      	ldr	r3, [r7, #4]
   27ddc:	799b      	ldrb	r3, [r3, #6]
   27dde:	2b01      	cmp	r3, #1
   27de0:	d108      	bne.n	27df4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   27de2:	68bb      	ldr	r3, [r7, #8]
   27de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27de6:	b29b      	uxth	r3, r3
   27de8:	05db      	lsls	r3, r3, #23
   27dea:	0ddb      	lsrs	r3, r3, #23
   27dec:	b29a      	uxth	r2, r3
   27dee:	683b      	ldr	r3, [r7, #0]
   27df0:	801a      	strh	r2, [r3, #0]
   27df2:	e005      	b.n	27e00 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   27df4:	68bb      	ldr	r3, [r7, #8]
   27df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27df8:	b2db      	uxtb	r3, r3
   27dfa:	b29a      	uxth	r2, r3
   27dfc:	683b      	ldr	r3, [r7, #0]
   27dfe:	801a      	strh	r2, [r3, #0]
	return retval;
   27e00:	230f      	movs	r3, #15
   27e02:	18fb      	adds	r3, r7, r3
   27e04:	781b      	ldrb	r3, [r3, #0]
}
   27e06:	0018      	movs	r0, r3
   27e08:	46bd      	mov	sp, r7
   27e0a:	b004      	add	sp, #16
   27e0c:	bd80      	pop	{r7, pc}
   27e0e:	46c0      	nop			; (mov r8, r8)
   27e10:	00027d1d 	.word	0x00027d1d

00027e14 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   27e14:	b590      	push	{r4, r7, lr}
   27e16:	b089      	sub	sp, #36	; 0x24
   27e18:	af00      	add	r7, sp, #0
   27e1a:	6078      	str	r0, [r7, #4]
   27e1c:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27e1e:	230c      	movs	r3, #12
   27e20:	18fb      	adds	r3, r7, r3
   27e22:	2200      	movs	r2, #0
   27e24:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   27e26:	687b      	ldr	r3, [r7, #4]
   27e28:	681b      	ldr	r3, [r3, #0]
   27e2a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   27e2c:	687b      	ldr	r3, [r7, #4]
   27e2e:	0018      	movs	r0, r3
   27e30:	4b24      	ldr	r3, [pc, #144]	; (27ec4 <spi_set_baudrate+0xb0>)
   27e32:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27e34:	46c0      	nop			; (mov r8, r8)
   27e36:	687b      	ldr	r3, [r7, #4]
   27e38:	0018      	movs	r0, r3
   27e3a:	4b23      	ldr	r3, [pc, #140]	; (27ec8 <spi_set_baudrate+0xb4>)
   27e3c:	4798      	blx	r3
   27e3e:	1e03      	subs	r3, r0, #0
   27e40:	d1f9      	bne.n	27e36 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27e42:	687b      	ldr	r3, [r7, #4]
   27e44:	681b      	ldr	r3, [r3, #0]
   27e46:	0018      	movs	r0, r3
   27e48:	4b20      	ldr	r3, [pc, #128]	; (27ecc <spi_set_baudrate+0xb8>)
   27e4a:	4798      	blx	r3
   27e4c:	0003      	movs	r3, r0
   27e4e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27e50:	69bb      	ldr	r3, [r7, #24]
   27e52:	3314      	adds	r3, #20
   27e54:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27e56:	697b      	ldr	r3, [r7, #20]
   27e58:	b2db      	uxtb	r3, r3
   27e5a:	0018      	movs	r0, r3
   27e5c:	4b1c      	ldr	r3, [pc, #112]	; (27ed0 <spi_set_baudrate+0xbc>)
   27e5e:	4798      	blx	r3
   27e60:	0003      	movs	r3, r0
   27e62:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   27e64:	230f      	movs	r3, #15
   27e66:	18fc      	adds	r4, r7, r3
   27e68:	230c      	movs	r3, #12
   27e6a:	18fa      	adds	r2, r7, r3
   27e6c:	6939      	ldr	r1, [r7, #16]
   27e6e:	683b      	ldr	r3, [r7, #0]
   27e70:	0018      	movs	r0, r3
   27e72:	4b18      	ldr	r3, [pc, #96]	; (27ed4 <spi_set_baudrate+0xc0>)
   27e74:	4798      	blx	r3
   27e76:	0003      	movs	r3, r0
   27e78:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   27e7a:	230f      	movs	r3, #15
   27e7c:	18fb      	adds	r3, r7, r3
   27e7e:	781b      	ldrb	r3, [r3, #0]
   27e80:	2b00      	cmp	r3, #0
   27e82:	d001      	beq.n	27e88 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   27e84:	2317      	movs	r3, #23
   27e86:	e018      	b.n	27eba <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   27e88:	230c      	movs	r3, #12
   27e8a:	18fb      	adds	r3, r7, r3
   27e8c:	881b      	ldrh	r3, [r3, #0]
   27e8e:	b2da      	uxtb	r2, r3
   27e90:	69fb      	ldr	r3, [r7, #28]
   27e92:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   27e94:	46c0      	nop			; (mov r8, r8)
   27e96:	687b      	ldr	r3, [r7, #4]
   27e98:	0018      	movs	r0, r3
   27e9a:	4b0b      	ldr	r3, [pc, #44]	; (27ec8 <spi_set_baudrate+0xb4>)
   27e9c:	4798      	blx	r3
   27e9e:	1e03      	subs	r3, r0, #0
   27ea0:	d1f9      	bne.n	27e96 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   27ea2:	687b      	ldr	r3, [r7, #4]
   27ea4:	0018      	movs	r0, r3
   27ea6:	4b0c      	ldr	r3, [pc, #48]	; (27ed8 <spi_set_baudrate+0xc4>)
   27ea8:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   27eaa:	46c0      	nop			; (mov r8, r8)
   27eac:	687b      	ldr	r3, [r7, #4]
   27eae:	0018      	movs	r0, r3
   27eb0:	4b05      	ldr	r3, [pc, #20]	; (27ec8 <spi_set_baudrate+0xb4>)
   27eb2:	4798      	blx	r3
   27eb4:	1e03      	subs	r3, r0, #0
   27eb6:	d1f9      	bne.n	27eac <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   27eb8:	2300      	movs	r3, #0
}
   27eba:	0018      	movs	r0, r3
   27ebc:	46bd      	mov	sp, r7
   27ebe:	b009      	add	sp, #36	; 0x24
   27ec0:	bd90      	pop	{r4, r7, pc}
   27ec2:	46c0      	nop			; (mov r8, r8)
   27ec4:	00027c71 	.word	0x00027c71
   27ec8:	00027c01 	.word	0x00027c01
   27ecc:	0002786d 	.word	0x0002786d
   27ed0:	0002a221 	.word	0x0002a221
   27ed4:	000273e7 	.word	0x000273e7
   27ed8:	00027c21 	.word	0x00027c21

00027edc <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   27edc:	b590      	push	{r4, r7, lr}
   27ede:	b093      	sub	sp, #76	; 0x4c
   27ee0:	af00      	add	r7, sp, #0
   27ee2:	6078      	str	r0, [r7, #4]
   27ee4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   27ee6:	687b      	ldr	r3, [r7, #4]
   27ee8:	681b      	ldr	r3, [r3, #0]
   27eea:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   27eec:	687b      	ldr	r3, [r7, #4]
   27eee:	681b      	ldr	r3, [r3, #0]
   27ef0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27ef2:	231c      	movs	r3, #28
   27ef4:	18fb      	adds	r3, r7, r3
   27ef6:	0018      	movs	r0, r3
   27ef8:	4b75      	ldr	r3, [pc, #468]	; (280d0 <_spi_set_config+0x1f4>)
   27efa:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27efc:	231c      	movs	r3, #28
   27efe:	18fb      	adds	r3, r7, r3
   27f00:	2200      	movs	r2, #0
   27f02:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   27f04:	683b      	ldr	r3, [r7, #0]
   27f06:	781b      	ldrb	r3, [r3, #0]
   27f08:	2b00      	cmp	r3, #0
   27f0a:	d103      	bne.n	27f14 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27f0c:	231c      	movs	r3, #28
   27f0e:	18fb      	adds	r3, r7, r3
   27f10:	2200      	movs	r2, #0
   27f12:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27f14:	683b      	ldr	r3, [r7, #0]
   27f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   27f18:	230c      	movs	r3, #12
   27f1a:	18fb      	adds	r3, r7, r3
   27f1c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   27f1e:	683b      	ldr	r3, [r7, #0]
   27f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   27f22:	230c      	movs	r3, #12
   27f24:	18fb      	adds	r3, r7, r3
   27f26:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27f28:	683b      	ldr	r3, [r7, #0]
   27f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27f2c:	230c      	movs	r3, #12
   27f2e:	18fb      	adds	r3, r7, r3
   27f30:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   27f32:	683b      	ldr	r3, [r7, #0]
   27f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   27f36:	230c      	movs	r3, #12
   27f38:	18fb      	adds	r3, r7, r3
   27f3a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   27f3c:	2347      	movs	r3, #71	; 0x47
   27f3e:	18fb      	adds	r3, r7, r3
   27f40:	2200      	movs	r2, #0
   27f42:	701a      	strb	r2, [r3, #0]
   27f44:	e02c      	b.n	27fa0 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   27f46:	2347      	movs	r3, #71	; 0x47
   27f48:	18fb      	adds	r3, r7, r3
   27f4a:	781a      	ldrb	r2, [r3, #0]
   27f4c:	230c      	movs	r3, #12
   27f4e:	18fb      	adds	r3, r7, r3
   27f50:	0092      	lsls	r2, r2, #2
   27f52:	58d3      	ldr	r3, [r2, r3]
   27f54:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   27f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27f58:	2b00      	cmp	r3, #0
   27f5a:	d109      	bne.n	27f70 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   27f5c:	2347      	movs	r3, #71	; 0x47
   27f5e:	18fb      	adds	r3, r7, r3
   27f60:	781a      	ldrb	r2, [r3, #0]
   27f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   27f64:	0011      	movs	r1, r2
   27f66:	0018      	movs	r0, r3
   27f68:	4b5a      	ldr	r3, [pc, #360]	; (280d4 <_spi_set_config+0x1f8>)
   27f6a:	4798      	blx	r3
   27f6c:	0003      	movs	r3, r0
   27f6e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   27f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27f72:	3301      	adds	r3, #1
   27f74:	d00d      	beq.n	27f92 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   27f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27f78:	b2da      	uxtb	r2, r3
   27f7a:	231c      	movs	r3, #28
   27f7c:	18fb      	adds	r3, r7, r3
   27f7e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   27f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   27f82:	0c1b      	lsrs	r3, r3, #16
   27f84:	b2db      	uxtb	r3, r3
   27f86:	221c      	movs	r2, #28
   27f88:	18ba      	adds	r2, r7, r2
   27f8a:	0011      	movs	r1, r2
   27f8c:	0018      	movs	r0, r3
   27f8e:	4b52      	ldr	r3, [pc, #328]	; (280d8 <_spi_set_config+0x1fc>)
   27f90:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   27f92:	2347      	movs	r3, #71	; 0x47
   27f94:	18fb      	adds	r3, r7, r3
   27f96:	781a      	ldrb	r2, [r3, #0]
   27f98:	2347      	movs	r3, #71	; 0x47
   27f9a:	18fb      	adds	r3, r7, r3
   27f9c:	3201      	adds	r2, #1
   27f9e:	701a      	strb	r2, [r3, #0]
   27fa0:	2347      	movs	r3, #71	; 0x47
   27fa2:	18fb      	adds	r3, r7, r3
   27fa4:	781b      	ldrb	r3, [r3, #0]
   27fa6:	2b03      	cmp	r3, #3
   27fa8:	d9cd      	bls.n	27f46 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   27faa:	683b      	ldr	r3, [r7, #0]
   27fac:	781a      	ldrb	r2, [r3, #0]
   27fae:	687b      	ldr	r3, [r7, #4]
   27fb0:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   27fb2:	683b      	ldr	r3, [r7, #0]
   27fb4:	7c1a      	ldrb	r2, [r3, #16]
   27fb6:	687b      	ldr	r3, [r7, #4]
   27fb8:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   27fba:	683b      	ldr	r3, [r7, #0]
   27fbc:	7c9a      	ldrb	r2, [r3, #18]
   27fbe:	687b      	ldr	r3, [r7, #4]
   27fc0:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   27fc2:	683b      	ldr	r3, [r7, #0]
   27fc4:	7d1a      	ldrb	r2, [r3, #20]
   27fc6:	687b      	ldr	r3, [r7, #4]
   27fc8:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   27fca:	230a      	movs	r3, #10
   27fcc:	18fb      	adds	r3, r7, r3
   27fce:	2200      	movs	r2, #0
   27fd0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   27fd2:	2300      	movs	r3, #0
   27fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   27fd6:	2300      	movs	r3, #0
   27fd8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   27fda:	683b      	ldr	r3, [r7, #0]
   27fdc:	781b      	ldrb	r3, [r3, #0]
   27fde:	2b01      	cmp	r3, #1
   27fe0:	d129      	bne.n	28036 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27fe2:	687b      	ldr	r3, [r7, #4]
   27fe4:	681b      	ldr	r3, [r3, #0]
   27fe6:	0018      	movs	r0, r3
   27fe8:	4b3c      	ldr	r3, [pc, #240]	; (280dc <_spi_set_config+0x200>)
   27fea:	4798      	blx	r3
   27fec:	0003      	movs	r3, r0
   27fee:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   27ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27ff2:	3314      	adds	r3, #20
   27ff4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   27ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27ff8:	b2db      	uxtb	r3, r3
   27ffa:	0018      	movs	r0, r3
   27ffc:	4b38      	ldr	r3, [pc, #224]	; (280e0 <_spi_set_config+0x204>)
   27ffe:	4798      	blx	r3
   28000:	0003      	movs	r3, r0
   28002:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   28004:	683b      	ldr	r3, [r7, #0]
   28006:	699b      	ldr	r3, [r3, #24]
   28008:	2223      	movs	r2, #35	; 0x23
   2800a:	18bc      	adds	r4, r7, r2
   2800c:	220a      	movs	r2, #10
   2800e:	18ba      	adds	r2, r7, r2
   28010:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28012:	0018      	movs	r0, r3
   28014:	4b33      	ldr	r3, [pc, #204]	; (280e4 <_spi_set_config+0x208>)
   28016:	4798      	blx	r3
   28018:	0003      	movs	r3, r0
   2801a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   2801c:	2323      	movs	r3, #35	; 0x23
   2801e:	18fb      	adds	r3, r7, r3
   28020:	781b      	ldrb	r3, [r3, #0]
   28022:	2b00      	cmp	r3, #0
   28024:	d001      	beq.n	2802a <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   28026:	2317      	movs	r3, #23
   28028:	e04e      	b.n	280c8 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   2802a:	230a      	movs	r3, #10
   2802c:	18fb      	adds	r3, r7, r3
   2802e:	881b      	ldrh	r3, [r3, #0]
   28030:	b2da      	uxtb	r2, r3
   28032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28034:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   28036:	683b      	ldr	r3, [r7, #0]
   28038:	685b      	ldr	r3, [r3, #4]
   2803a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2803c:	4313      	orrs	r3, r2
   2803e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   28040:	683b      	ldr	r3, [r7, #0]
   28042:	689b      	ldr	r3, [r3, #8]
   28044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28046:	4313      	orrs	r3, r2
   28048:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2804a:	683b      	ldr	r3, [r7, #0]
   2804c:	68db      	ldr	r3, [r3, #12]
   2804e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28050:	4313      	orrs	r3, r2
   28052:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   28054:	683b      	ldr	r3, [r7, #0]
   28056:	7c1b      	ldrb	r3, [r3, #16]
   28058:	001a      	movs	r2, r3
   2805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2805c:	4313      	orrs	r3, r2
   2805e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28060:	683b      	ldr	r3, [r7, #0]
   28062:	7c5b      	ldrb	r3, [r3, #17]
   28064:	2b00      	cmp	r3, #0
   28066:	d103      	bne.n	28070 <_spi_set_config+0x194>
   28068:	4b1f      	ldr	r3, [pc, #124]	; (280e8 <_spi_set_config+0x20c>)
   2806a:	4798      	blx	r3
   2806c:	1e03      	subs	r3, r0, #0
   2806e:	d003      	beq.n	28078 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   28070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28072:	2280      	movs	r2, #128	; 0x80
   28074:	4313      	orrs	r3, r2
   28076:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   28078:	683b      	ldr	r3, [r7, #0]
   2807a:	7c9b      	ldrb	r3, [r3, #18]
   2807c:	2b00      	cmp	r3, #0
   2807e:	d004      	beq.n	2808a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   28080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28082:	2280      	movs	r2, #128	; 0x80
   28084:	0292      	lsls	r2, r2, #10
   28086:	4313      	orrs	r3, r2
   28088:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2808a:	683b      	ldr	r3, [r7, #0]
   2808c:	7cdb      	ldrb	r3, [r3, #19]
   2808e:	2b00      	cmp	r3, #0
   28090:	d004      	beq.n	2809c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   28092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28094:	2280      	movs	r2, #128	; 0x80
   28096:	0092      	lsls	r2, r2, #2
   28098:	4313      	orrs	r3, r2
   2809a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2809c:	683b      	ldr	r3, [r7, #0]
   2809e:	7d1b      	ldrb	r3, [r3, #20]
   280a0:	2b00      	cmp	r3, #0
   280a2:	d004      	beq.n	280ae <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   280a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   280a6:	2280      	movs	r2, #128	; 0x80
   280a8:	0192      	lsls	r2, r2, #6
   280aa:	4313      	orrs	r3, r2
   280ac:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   280ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   280b0:	681a      	ldr	r2, [r3, #0]
   280b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   280b4:	431a      	orrs	r2, r3
   280b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   280b8:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   280ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   280bc:	685a      	ldr	r2, [r3, #4]
   280be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   280c0:	431a      	orrs	r2, r3
   280c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   280c4:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   280c6:	2300      	movs	r3, #0
}
   280c8:	0018      	movs	r0, r3
   280ca:	46bd      	mov	sp, r7
   280cc:	b013      	add	sp, #76	; 0x4c
   280ce:	bd90      	pop	{r4, r7, pc}
   280d0:	00027a11 	.word	0x00027a11
   280d4:	000276b1 	.word	0x000276b1
   280d8:	0002a45d 	.word	0x0002a45d
   280dc:	0002786d 	.word	0x0002786d
   280e0:	0002a221 	.word	0x0002a221
   280e4:	000273e7 	.word	0x000273e7
   280e8:	00027b85 	.word	0x00027b85

000280ec <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   280ec:	b590      	push	{r4, r7, lr}
   280ee:	b08b      	sub	sp, #44	; 0x2c
   280f0:	af00      	add	r7, sp, #0
   280f2:	60f8      	str	r0, [r7, #12]
   280f4:	60b9      	str	r1, [r7, #8]
   280f6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   280f8:	68fb      	ldr	r3, [r7, #12]
   280fa:	68ba      	ldr	r2, [r7, #8]
   280fc:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   280fe:	68fb      	ldr	r3, [r7, #12]
   28100:	681b      	ldr	r3, [r3, #0]
   28102:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   28104:	6a3b      	ldr	r3, [r7, #32]
   28106:	681b      	ldr	r3, [r3, #0]
   28108:	2202      	movs	r2, #2
   2810a:	4013      	ands	r3, r2
   2810c:	d001      	beq.n	28112 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   2810e:	231c      	movs	r3, #28
   28110:	e09c      	b.n	2824c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   28112:	6a3b      	ldr	r3, [r7, #32]
   28114:	681b      	ldr	r3, [r3, #0]
   28116:	2201      	movs	r2, #1
   28118:	4013      	ands	r3, r2
   2811a:	d001      	beq.n	28120 <spi_init+0x34>
		return STATUS_BUSY;
   2811c:	2305      	movs	r3, #5
   2811e:	e095      	b.n	2824c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28120:	68fb      	ldr	r3, [r7, #12]
   28122:	681b      	ldr	r3, [r3, #0]
   28124:	0018      	movs	r0, r3
   28126:	4b4b      	ldr	r3, [pc, #300]	; (28254 <spi_init+0x168>)
   28128:	4798      	blx	r3
   2812a:	0003      	movs	r3, r0
   2812c:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2812e:	69fb      	ldr	r3, [r7, #28]
   28130:	3302      	adds	r3, #2
   28132:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28134:	69fb      	ldr	r3, [r7, #28]
   28136:	3314      	adds	r3, #20
   28138:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2813a:	2201      	movs	r2, #1
   2813c:	69bb      	ldr	r3, [r7, #24]
   2813e:	409a      	lsls	r2, r3
   28140:	0013      	movs	r3, r2
   28142:	0019      	movs	r1, r3
   28144:	2002      	movs	r0, #2
   28146:	4b44      	ldr	r3, [pc, #272]	; (28258 <spi_init+0x16c>)
   28148:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2814a:	2310      	movs	r3, #16
   2814c:	18fb      	adds	r3, r7, r3
   2814e:	0018      	movs	r0, r3
   28150:	4b42      	ldr	r3, [pc, #264]	; (2825c <spi_init+0x170>)
   28152:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28154:	687b      	ldr	r3, [r7, #4]
   28156:	2224      	movs	r2, #36	; 0x24
   28158:	5c9a      	ldrb	r2, [r3, r2]
   2815a:	2310      	movs	r3, #16
   2815c:	18fb      	adds	r3, r7, r3
   2815e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28160:	697b      	ldr	r3, [r7, #20]
   28162:	b2db      	uxtb	r3, r3
   28164:	2210      	movs	r2, #16
   28166:	18ba      	adds	r2, r7, r2
   28168:	0011      	movs	r1, r2
   2816a:	0018      	movs	r0, r3
   2816c:	4b3c      	ldr	r3, [pc, #240]	; (28260 <spi_init+0x174>)
   2816e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28170:	697b      	ldr	r3, [r7, #20]
   28172:	b2db      	uxtb	r3, r3
   28174:	0018      	movs	r0, r3
   28176:	4b3b      	ldr	r3, [pc, #236]	; (28264 <spi_init+0x178>)
   28178:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2817a:	687b      	ldr	r3, [r7, #4]
   2817c:	2224      	movs	r2, #36	; 0x24
   2817e:	5c9b      	ldrb	r3, [r3, r2]
   28180:	2100      	movs	r1, #0
   28182:	0018      	movs	r0, r3
   28184:	4b38      	ldr	r3, [pc, #224]	; (28268 <spi_init+0x17c>)
   28186:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   28188:	687b      	ldr	r3, [r7, #4]
   2818a:	781b      	ldrb	r3, [r3, #0]
   2818c:	2b01      	cmp	r3, #1
   2818e:	d105      	bne.n	2819c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28190:	6a3b      	ldr	r3, [r7, #32]
   28192:	681b      	ldr	r3, [r3, #0]
   28194:	220c      	movs	r2, #12
   28196:	431a      	orrs	r2, r3
   28198:	6a3b      	ldr	r3, [r7, #32]
   2819a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2819c:	2327      	movs	r3, #39	; 0x27
   2819e:	18fb      	adds	r3, r7, r3
   281a0:	2200      	movs	r2, #0
   281a2:	701a      	strb	r2, [r3, #0]
   281a4:	e010      	b.n	281c8 <spi_init+0xdc>
		module->callback[i]        = NULL;
   281a6:	2327      	movs	r3, #39	; 0x27
   281a8:	18fb      	adds	r3, r7, r3
   281aa:	781b      	ldrb	r3, [r3, #0]
   281ac:	68fa      	ldr	r2, [r7, #12]
   281ae:	3302      	adds	r3, #2
   281b0:	009b      	lsls	r3, r3, #2
   281b2:	18d3      	adds	r3, r2, r3
   281b4:	3304      	adds	r3, #4
   281b6:	2200      	movs	r2, #0
   281b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   281ba:	2327      	movs	r3, #39	; 0x27
   281bc:	18fb      	adds	r3, r7, r3
   281be:	781a      	ldrb	r2, [r3, #0]
   281c0:	2327      	movs	r3, #39	; 0x27
   281c2:	18fb      	adds	r3, r7, r3
   281c4:	3201      	adds	r2, #1
   281c6:	701a      	strb	r2, [r3, #0]
   281c8:	2327      	movs	r3, #39	; 0x27
   281ca:	18fb      	adds	r3, r7, r3
   281cc:	781b      	ldrb	r3, [r3, #0]
   281ce:	2b06      	cmp	r3, #6
   281d0:	d9e9      	bls.n	281a6 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   281d2:	68fb      	ldr	r3, [r7, #12]
   281d4:	2200      	movs	r2, #0
   281d6:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   281d8:	68fb      	ldr	r3, [r7, #12]
   281da:	2200      	movs	r2, #0
   281dc:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   281de:	68fb      	ldr	r3, [r7, #12]
   281e0:	2200      	movs	r2, #0
   281e2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   281e4:	68fb      	ldr	r3, [r7, #12]
   281e6:	2200      	movs	r2, #0
   281e8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   281ea:	68fb      	ldr	r3, [r7, #12]
   281ec:	2236      	movs	r2, #54	; 0x36
   281ee:	2100      	movs	r1, #0
   281f0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   281f2:	68fb      	ldr	r3, [r7, #12]
   281f4:	2237      	movs	r2, #55	; 0x37
   281f6:	2100      	movs	r1, #0
   281f8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   281fa:	68fb      	ldr	r3, [r7, #12]
   281fc:	2238      	movs	r2, #56	; 0x38
   281fe:	2100      	movs	r1, #0
   28200:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   28202:	68fb      	ldr	r3, [r7, #12]
   28204:	2203      	movs	r2, #3
   28206:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   28208:	68fb      	ldr	r3, [r7, #12]
   2820a:	2200      	movs	r2, #0
   2820c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   2820e:	68fb      	ldr	r3, [r7, #12]
   28210:	681b      	ldr	r3, [r3, #0]
   28212:	2213      	movs	r2, #19
   28214:	18bc      	adds	r4, r7, r2
   28216:	0018      	movs	r0, r3
   28218:	4b0e      	ldr	r3, [pc, #56]	; (28254 <spi_init+0x168>)
   2821a:	4798      	blx	r3
   2821c:	0003      	movs	r3, r0
   2821e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28220:	4a12      	ldr	r2, [pc, #72]	; (2826c <spi_init+0x180>)
   28222:	2313      	movs	r3, #19
   28224:	18fb      	adds	r3, r7, r3
   28226:	781b      	ldrb	r3, [r3, #0]
   28228:	0011      	movs	r1, r2
   2822a:	0018      	movs	r0, r3
   2822c:	4b10      	ldr	r3, [pc, #64]	; (28270 <spi_init+0x184>)
   2822e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28230:	2313      	movs	r3, #19
   28232:	18fb      	adds	r3, r7, r3
   28234:	781a      	ldrb	r2, [r3, #0]
   28236:	4b0f      	ldr	r3, [pc, #60]	; (28274 <spi_init+0x188>)
   28238:	0092      	lsls	r2, r2, #2
   2823a:	68f9      	ldr	r1, [r7, #12]
   2823c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2823e:	687a      	ldr	r2, [r7, #4]
   28240:	68fb      	ldr	r3, [r7, #12]
   28242:	0011      	movs	r1, r2
   28244:	0018      	movs	r0, r3
   28246:	4b0c      	ldr	r3, [pc, #48]	; (28278 <spi_init+0x18c>)
   28248:	4798      	blx	r3
   2824a:	0003      	movs	r3, r0
}
   2824c:	0018      	movs	r0, r3
   2824e:	46bd      	mov	sp, r7
   28250:	b00b      	add	sp, #44	; 0x2c
   28252:	bd90      	pop	{r4, r7, pc}
   28254:	0002786d 	.word	0x0002786d
   28258:	00027b29 	.word	0x00027b29
   2825c:	00027b11 	.word	0x00027b11
   28260:	0002a0fd 	.word	0x0002a0fd
   28264:	0002a141 	.word	0x0002a141
   28268:	00027625 	.word	0x00027625
   2826c:	00028745 	.word	0x00028745
   28270:	000278d1 	.word	0x000278d1
   28274:	20005794 	.word	0x20005794
   28278:	00027edd 	.word	0x00027edd

0002827c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   2827c:	b590      	push	{r4, r7, lr}
   2827e:	b087      	sub	sp, #28
   28280:	af00      	add	r7, sp, #0
   28282:	60f8      	str	r0, [r7, #12]
   28284:	60b9      	str	r1, [r7, #8]
   28286:	0019      	movs	r1, r3
   28288:	1dbb      	adds	r3, r7, #6
   2828a:	801a      	strh	r2, [r3, #0]
   2828c:	1d3b      	adds	r3, r7, #4
   2828e:	1c0a      	adds	r2, r1, #0
   28290:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28292:	68fb      	ldr	r3, [r7, #12]
   28294:	2238      	movs	r2, #56	; 0x38
   28296:	5c9b      	ldrb	r3, [r3, r2]
   28298:	b2db      	uxtb	r3, r3
   2829a:	2b05      	cmp	r3, #5
   2829c:	d101      	bne.n	282a2 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2829e:	2305      	movs	r3, #5
   282a0:	e07a      	b.n	28398 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   282a2:	1dbb      	adds	r3, r7, #6
   282a4:	881b      	ldrh	r3, [r3, #0]
   282a6:	2b00      	cmp	r3, #0
   282a8:	d101      	bne.n	282ae <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   282aa:	2317      	movs	r3, #23
   282ac:	e074      	b.n	28398 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   282ae:	68fb      	ldr	r3, [r7, #12]
   282b0:	79db      	ldrb	r3, [r3, #7]
   282b2:	2201      	movs	r2, #1
   282b4:	4053      	eors	r3, r2
   282b6:	b2db      	uxtb	r3, r3
   282b8:	2b00      	cmp	r3, #0
   282ba:	d001      	beq.n	282c0 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   282bc:	231c      	movs	r3, #28
   282be:	e06b      	b.n	28398 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   282c0:	2316      	movs	r3, #22
   282c2:	18fb      	adds	r3, r7, r3
   282c4:	2200      	movs	r2, #0
   282c6:	801a      	strh	r2, [r3, #0]

	while (length--) {
   282c8:	e05e      	b.n	28388 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   282ca:	68fb      	ldr	r3, [r7, #12]
   282cc:	795b      	ldrb	r3, [r3, #5]
   282ce:	2b01      	cmp	r3, #1
   282d0:	d112      	bne.n	282f8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   282d2:	46c0      	nop			; (mov r8, r8)
   282d4:	68fb      	ldr	r3, [r7, #12]
   282d6:	0018      	movs	r0, r3
   282d8:	4b31      	ldr	r3, [pc, #196]	; (283a0 <spi_read_buffer_wait+0x124>)
   282da:	4798      	blx	r3
   282dc:	0003      	movs	r3, r0
   282de:	001a      	movs	r2, r3
   282e0:	2301      	movs	r3, #1
   282e2:	4053      	eors	r3, r2
   282e4:	b2db      	uxtb	r3, r3
   282e6:	2b00      	cmp	r3, #0
   282e8:	d1f4      	bne.n	282d4 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   282ea:	1d3b      	adds	r3, r7, #4
   282ec:	881a      	ldrh	r2, [r3, #0]
   282ee:	68fb      	ldr	r3, [r7, #12]
   282f0:	0011      	movs	r1, r2
   282f2:	0018      	movs	r0, r3
   282f4:	4b2b      	ldr	r3, [pc, #172]	; (283a4 <spi_read_buffer_wait+0x128>)
   282f6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   282f8:	46c0      	nop			; (mov r8, r8)
   282fa:	68fb      	ldr	r3, [r7, #12]
   282fc:	0018      	movs	r0, r3
   282fe:	4b2a      	ldr	r3, [pc, #168]	; (283a8 <spi_read_buffer_wait+0x12c>)
   28300:	4798      	blx	r3
   28302:	0003      	movs	r3, r0
   28304:	001a      	movs	r2, r3
   28306:	2301      	movs	r3, #1
   28308:	4053      	eors	r3, r2
   2830a:	b2db      	uxtb	r3, r3
   2830c:	2b00      	cmp	r3, #0
   2830e:	d1f4      	bne.n	282fa <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28310:	2312      	movs	r3, #18
   28312:	18fb      	adds	r3, r7, r3
   28314:	2200      	movs	r2, #0
   28316:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   28318:	2315      	movs	r3, #21
   2831a:	18fc      	adds	r4, r7, r3
   2831c:	2312      	movs	r3, #18
   2831e:	18fa      	adds	r2, r7, r3
   28320:	68fb      	ldr	r3, [r7, #12]
   28322:	0011      	movs	r1, r2
   28324:	0018      	movs	r0, r3
   28326:	4b21      	ldr	r3, [pc, #132]	; (283ac <spi_read_buffer_wait+0x130>)
   28328:	4798      	blx	r3
   2832a:	0003      	movs	r3, r0
   2832c:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   2832e:	2315      	movs	r3, #21
   28330:	18fb      	adds	r3, r7, r3
   28332:	781b      	ldrb	r3, [r3, #0]
   28334:	2b00      	cmp	r3, #0
   28336:	d003      	beq.n	28340 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   28338:	2315      	movs	r3, #21
   2833a:	18fb      	adds	r3, r7, r3
   2833c:	781b      	ldrb	r3, [r3, #0]
   2833e:	e02b      	b.n	28398 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28340:	2316      	movs	r3, #22
   28342:	18fb      	adds	r3, r7, r3
   28344:	881b      	ldrh	r3, [r3, #0]
   28346:	2216      	movs	r2, #22
   28348:	18ba      	adds	r2, r7, r2
   2834a:	1c59      	adds	r1, r3, #1
   2834c:	8011      	strh	r1, [r2, #0]
   2834e:	001a      	movs	r2, r3
   28350:	68bb      	ldr	r3, [r7, #8]
   28352:	189b      	adds	r3, r3, r2
   28354:	2212      	movs	r2, #18
   28356:	18ba      	adds	r2, r7, r2
   28358:	8812      	ldrh	r2, [r2, #0]
   2835a:	b2d2      	uxtb	r2, r2
   2835c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2835e:	68fb      	ldr	r3, [r7, #12]
   28360:	799b      	ldrb	r3, [r3, #6]
   28362:	2b01      	cmp	r3, #1
   28364:	d110      	bne.n	28388 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   28366:	2316      	movs	r3, #22
   28368:	18fb      	adds	r3, r7, r3
   2836a:	881b      	ldrh	r3, [r3, #0]
   2836c:	2216      	movs	r2, #22
   2836e:	18ba      	adds	r2, r7, r2
   28370:	1c59      	adds	r1, r3, #1
   28372:	8011      	strh	r1, [r2, #0]
   28374:	001a      	movs	r2, r3
   28376:	68bb      	ldr	r3, [r7, #8]
   28378:	189b      	adds	r3, r3, r2
   2837a:	2212      	movs	r2, #18
   2837c:	18ba      	adds	r2, r7, r2
   2837e:	8812      	ldrh	r2, [r2, #0]
   28380:	0a12      	lsrs	r2, r2, #8
   28382:	b292      	uxth	r2, r2
   28384:	b2d2      	uxtb	r2, r2
   28386:	701a      	strb	r2, [r3, #0]
	while (length--) {
   28388:	1dbb      	adds	r3, r7, #6
   2838a:	881b      	ldrh	r3, [r3, #0]
   2838c:	1dba      	adds	r2, r7, #6
   2838e:	1e59      	subs	r1, r3, #1
   28390:	8011      	strh	r1, [r2, #0]
   28392:	2b00      	cmp	r3, #0
   28394:	d199      	bne.n	282ca <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   28396:	2300      	movs	r3, #0
}
   28398:	0018      	movs	r0, r3
   2839a:	46bd      	mov	sp, r7
   2839c:	b007      	add	sp, #28
   2839e:	bd90      	pop	{r4, r7, pc}
   283a0:	00027cf5 	.word	0x00027cf5
   283a4:	00027d45 	.word	0x00027d45
   283a8:	00027d1d 	.word	0x00027d1d
   283ac:	00027d8d 	.word	0x00027d8d

000283b0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   283b0:	b580      	push	{r7, lr}
   283b2:	b086      	sub	sp, #24
   283b4:	af00      	add	r7, sp, #0
   283b6:	60f8      	str	r0, [r7, #12]
   283b8:	60b9      	str	r1, [r7, #8]
   283ba:	1dfb      	adds	r3, r7, #7
   283bc:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   283be:	68fb      	ldr	r3, [r7, #12]
   283c0:	795b      	ldrb	r3, [r3, #5]
   283c2:	2b01      	cmp	r3, #1
   283c4:	d001      	beq.n	283ca <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   283c6:	2315      	movs	r3, #21
   283c8:	e05c      	b.n	28484 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   283ca:	68fb      	ldr	r3, [r7, #12]
   283cc:	7a1b      	ldrb	r3, [r3, #8]
   283ce:	2201      	movs	r2, #1
   283d0:	4053      	eors	r3, r2
   283d2:	b2db      	uxtb	r3, r3
   283d4:	2b00      	cmp	r3, #0
   283d6:	d054      	beq.n	28482 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   283d8:	1dfb      	adds	r3, r7, #7
   283da:	781b      	ldrb	r3, [r3, #0]
   283dc:	2b00      	cmp	r3, #0
   283de:	d04a      	beq.n	28476 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   283e0:	68bb      	ldr	r3, [r7, #8]
   283e2:	785b      	ldrb	r3, [r3, #1]
   283e4:	2b00      	cmp	r3, #0
   283e6:	d03f      	beq.n	28468 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   283e8:	68fb      	ldr	r3, [r7, #12]
   283ea:	0018      	movs	r0, r3
   283ec:	4b27      	ldr	r3, [pc, #156]	; (2848c <spi_select_slave+0xdc>)
   283ee:	4798      	blx	r3
   283f0:	0003      	movs	r3, r0
   283f2:	001a      	movs	r2, r3
   283f4:	2301      	movs	r3, #1
   283f6:	4053      	eors	r3, r2
   283f8:	b2db      	uxtb	r3, r3
   283fa:	2b00      	cmp	r3, #0
   283fc:	d007      	beq.n	2840e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   283fe:	68bb      	ldr	r3, [r7, #8]
   28400:	781b      	ldrb	r3, [r3, #0]
   28402:	2101      	movs	r1, #1
   28404:	0018      	movs	r0, r3
   28406:	4b22      	ldr	r3, [pc, #136]	; (28490 <spi_select_slave+0xe0>)
   28408:	4798      	blx	r3
					return STATUS_BUSY;
   2840a:	2305      	movs	r3, #5
   2840c:	e03a      	b.n	28484 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   2840e:	68bb      	ldr	r3, [r7, #8]
   28410:	781b      	ldrb	r3, [r3, #0]
   28412:	2100      	movs	r1, #0
   28414:	0018      	movs	r0, r3
   28416:	4b1e      	ldr	r3, [pc, #120]	; (28490 <spi_select_slave+0xe0>)
   28418:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   2841a:	68bb      	ldr	r3, [r7, #8]
   2841c:	789b      	ldrb	r3, [r3, #2]
   2841e:	b29a      	uxth	r2, r3
   28420:	68fb      	ldr	r3, [r7, #12]
   28422:	0011      	movs	r1, r2
   28424:	0018      	movs	r0, r3
   28426:	4b1b      	ldr	r3, [pc, #108]	; (28494 <spi_select_slave+0xe4>)
   28428:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   2842a:	68fb      	ldr	r3, [r7, #12]
   2842c:	79db      	ldrb	r3, [r3, #7]
   2842e:	2201      	movs	r2, #1
   28430:	4053      	eors	r3, r2
   28432:	b2db      	uxtb	r3, r3
   28434:	2b00      	cmp	r3, #0
   28436:	d024      	beq.n	28482 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28438:	46c0      	nop			; (mov r8, r8)
   2843a:	68fb      	ldr	r3, [r7, #12]
   2843c:	0018      	movs	r0, r3
   2843e:	4b16      	ldr	r3, [pc, #88]	; (28498 <spi_select_slave+0xe8>)
   28440:	4798      	blx	r3
   28442:	0003      	movs	r3, r0
   28444:	001a      	movs	r2, r3
   28446:	2301      	movs	r3, #1
   28448:	4053      	eors	r3, r2
   2844a:	b2db      	uxtb	r3, r3
   2844c:	2b00      	cmp	r3, #0
   2844e:	d1f4      	bne.n	2843a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   28450:	2316      	movs	r3, #22
   28452:	18fb      	adds	r3, r7, r3
   28454:	2200      	movs	r2, #0
   28456:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   28458:	2316      	movs	r3, #22
   2845a:	18fa      	adds	r2, r7, r3
   2845c:	68fb      	ldr	r3, [r7, #12]
   2845e:	0011      	movs	r1, r2
   28460:	0018      	movs	r0, r3
   28462:	4b0e      	ldr	r3, [pc, #56]	; (2849c <spi_select_slave+0xec>)
   28464:	4798      	blx	r3
   28466:	e00c      	b.n	28482 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28468:	68bb      	ldr	r3, [r7, #8]
   2846a:	781b      	ldrb	r3, [r3, #0]
   2846c:	2100      	movs	r1, #0
   2846e:	0018      	movs	r0, r3
   28470:	4b07      	ldr	r3, [pc, #28]	; (28490 <spi_select_slave+0xe0>)
   28472:	4798      	blx	r3
   28474:	e005      	b.n	28482 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   28476:	68bb      	ldr	r3, [r7, #8]
   28478:	781b      	ldrb	r3, [r3, #0]
   2847a:	2101      	movs	r1, #1
   2847c:	0018      	movs	r0, r3
   2847e:	4b04      	ldr	r3, [pc, #16]	; (28490 <spi_select_slave+0xe0>)
   28480:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   28482:	2300      	movs	r3, #0
}
   28484:	0018      	movs	r0, r3
   28486:	46bd      	mov	sp, r7
   28488:	b006      	add	sp, #24
   2848a:	bd80      	pop	{r7, pc}
   2848c:	00027cf5 	.word	0x00027cf5
   28490:	00027abd 	.word	0x00027abd
   28494:	00027d45 	.word	0x00027d45
   28498:	00027d1d 	.word	0x00027d1d
   2849c:	00027d8d 	.word	0x00027d8d

000284a0 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   284a0:	b580      	push	{r7, lr}
   284a2:	b086      	sub	sp, #24
   284a4:	af00      	add	r7, sp, #0
   284a6:	60f8      	str	r0, [r7, #12]
   284a8:	60b9      	str	r1, [r7, #8]
   284aa:	1dbb      	adds	r3, r7, #6
   284ac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   284ae:	68fb      	ldr	r3, [r7, #12]
   284b0:	2238      	movs	r2, #56	; 0x38
   284b2:	5c9b      	ldrb	r3, [r3, r2]
   284b4:	b2db      	uxtb	r3, r3
   284b6:	2b05      	cmp	r3, #5
   284b8:	d101      	bne.n	284be <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   284ba:	2305      	movs	r3, #5
   284bc:	e087      	b.n	285ce <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   284be:	1dbb      	adds	r3, r7, #6
   284c0:	881b      	ldrh	r3, [r3, #0]
   284c2:	2b00      	cmp	r3, #0
   284c4:	d101      	bne.n	284ca <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   284c6:	2317      	movs	r3, #23
   284c8:	e081      	b.n	285ce <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   284ca:	2316      	movs	r3, #22
   284cc:	18fb      	adds	r3, r7, r3
   284ce:	2200      	movs	r2, #0
   284d0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   284d2:	2314      	movs	r3, #20
   284d4:	18fb      	adds	r3, r7, r3
   284d6:	1dba      	adds	r2, r7, #6
   284d8:	8812      	ldrh	r2, [r2, #0]
   284da:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   284dc:	e05f      	b.n	2859e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   284de:	46c0      	nop			; (mov r8, r8)
   284e0:	68fb      	ldr	r3, [r7, #12]
   284e2:	0018      	movs	r0, r3
   284e4:	4b3c      	ldr	r3, [pc, #240]	; (285d8 <spi_write_buffer_wait+0x138>)
   284e6:	4798      	blx	r3
   284e8:	0003      	movs	r3, r0
   284ea:	001a      	movs	r2, r3
   284ec:	2301      	movs	r3, #1
   284ee:	4053      	eors	r3, r2
   284f0:	b2db      	uxtb	r3, r3
   284f2:	2b00      	cmp	r3, #0
   284f4:	d1f4      	bne.n	284e0 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   284f6:	2316      	movs	r3, #22
   284f8:	18fb      	adds	r3, r7, r3
   284fa:	881b      	ldrh	r3, [r3, #0]
   284fc:	2216      	movs	r2, #22
   284fe:	18ba      	adds	r2, r7, r2
   28500:	1c59      	adds	r1, r3, #1
   28502:	8011      	strh	r1, [r2, #0]
   28504:	001a      	movs	r2, r3
   28506:	68bb      	ldr	r3, [r7, #8]
   28508:	189b      	adds	r3, r3, r2
   2850a:	781a      	ldrb	r2, [r3, #0]
   2850c:	2312      	movs	r3, #18
   2850e:	18fb      	adds	r3, r7, r3
   28510:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28512:	68fb      	ldr	r3, [r7, #12]
   28514:	799b      	ldrb	r3, [r3, #6]
   28516:	2b01      	cmp	r3, #1
   28518:	d115      	bne.n	28546 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   2851a:	2316      	movs	r3, #22
   2851c:	18fb      	adds	r3, r7, r3
   2851e:	881b      	ldrh	r3, [r3, #0]
   28520:	2216      	movs	r2, #22
   28522:	18ba      	adds	r2, r7, r2
   28524:	1c59      	adds	r1, r3, #1
   28526:	8011      	strh	r1, [r2, #0]
   28528:	001a      	movs	r2, r3
   2852a:	68bb      	ldr	r3, [r7, #8]
   2852c:	189b      	adds	r3, r3, r2
   2852e:	781b      	ldrb	r3, [r3, #0]
   28530:	021b      	lsls	r3, r3, #8
   28532:	b21a      	sxth	r2, r3
   28534:	2312      	movs	r3, #18
   28536:	18fb      	adds	r3, r7, r3
   28538:	2100      	movs	r1, #0
   2853a:	5e5b      	ldrsh	r3, [r3, r1]
   2853c:	4313      	orrs	r3, r2
   2853e:	b21a      	sxth	r2, r3
   28540:	2312      	movs	r3, #18
   28542:	18fb      	adds	r3, r7, r3
   28544:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   28546:	2312      	movs	r3, #18
   28548:	18fb      	adds	r3, r7, r3
   2854a:	881a      	ldrh	r2, [r3, #0]
   2854c:	68fb      	ldr	r3, [r7, #12]
   2854e:	0011      	movs	r1, r2
   28550:	0018      	movs	r0, r3
   28552:	4b22      	ldr	r3, [pc, #136]	; (285dc <spi_write_buffer_wait+0x13c>)
   28554:	4798      	blx	r3

		if (module->receiver_enabled) {
   28556:	68fb      	ldr	r3, [r7, #12]
   28558:	79db      	ldrb	r3, [r3, #7]
   2855a:	2214      	movs	r2, #20
   2855c:	18ba      	adds	r2, r7, r2
   2855e:	2114      	movs	r1, #20
   28560:	1879      	adds	r1, r7, r1
   28562:	8809      	ldrh	r1, [r1, #0]
   28564:	8011      	strh	r1, [r2, #0]
   28566:	2b00      	cmp	r3, #0
   28568:	d019      	beq.n	2859e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   2856a:	46c0      	nop			; (mov r8, r8)
   2856c:	68fb      	ldr	r3, [r7, #12]
   2856e:	0018      	movs	r0, r3
   28570:	4b1b      	ldr	r3, [pc, #108]	; (285e0 <spi_write_buffer_wait+0x140>)
   28572:	4798      	blx	r3
   28574:	0003      	movs	r3, r0
   28576:	001a      	movs	r2, r3
   28578:	2301      	movs	r3, #1
   2857a:	4053      	eors	r3, r2
   2857c:	b2db      	uxtb	r3, r3
   2857e:	2b00      	cmp	r3, #0
   28580:	d1f4      	bne.n	2856c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   28582:	2310      	movs	r3, #16
   28584:	18fa      	adds	r2, r7, r3
   28586:	68fb      	ldr	r3, [r7, #12]
   28588:	0011      	movs	r1, r2
   2858a:	0018      	movs	r0, r3
   2858c:	4b15      	ldr	r3, [pc, #84]	; (285e4 <spi_write_buffer_wait+0x144>)
   2858e:	4798      	blx	r3
			flush_length--;
   28590:	2314      	movs	r3, #20
   28592:	18fb      	adds	r3, r7, r3
   28594:	881a      	ldrh	r2, [r3, #0]
   28596:	2314      	movs	r3, #20
   28598:	18fb      	adds	r3, r7, r3
   2859a:	3a01      	subs	r2, #1
   2859c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2859e:	1dbb      	adds	r3, r7, #6
   285a0:	881b      	ldrh	r3, [r3, #0]
   285a2:	1dba      	adds	r2, r7, #6
   285a4:	1e59      	subs	r1, r3, #1
   285a6:	8011      	strh	r1, [r2, #0]
   285a8:	2b00      	cmp	r3, #0
   285aa:	d198      	bne.n	284de <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   285ac:	68fb      	ldr	r3, [r7, #12]
   285ae:	795b      	ldrb	r3, [r3, #5]
   285b0:	2b01      	cmp	r3, #1
   285b2:	d10b      	bne.n	285cc <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   285b4:	46c0      	nop			; (mov r8, r8)
   285b6:	68fb      	ldr	r3, [r7, #12]
   285b8:	0018      	movs	r0, r3
   285ba:	4b0b      	ldr	r3, [pc, #44]	; (285e8 <spi_write_buffer_wait+0x148>)
   285bc:	4798      	blx	r3
   285be:	0003      	movs	r3, r0
   285c0:	001a      	movs	r2, r3
   285c2:	2301      	movs	r3, #1
   285c4:	4053      	eors	r3, r2
   285c6:	b2db      	uxtb	r3, r3
   285c8:	2b00      	cmp	r3, #0
   285ca:	d1f4      	bne.n	285b6 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   285cc:	2300      	movs	r3, #0
}
   285ce:	0018      	movs	r0, r3
   285d0:	46bd      	mov	sp, r7
   285d2:	b006      	add	sp, #24
   285d4:	bd80      	pop	{r7, pc}
   285d6:	46c0      	nop			; (mov r8, r8)
   285d8:	00027cf5 	.word	0x00027cf5
   285dc:	00027d45 	.word	0x00027d45
   285e0:	00027d1d 	.word	0x00027d1d
   285e4:	00027d8d 	.word	0x00027d8d
   285e8:	00027ccd 	.word	0x00027ccd

000285ec <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   285ec:	b580      	push	{r7, lr}
   285ee:	b084      	sub	sp, #16
   285f0:	af00      	add	r7, sp, #0
   285f2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   285f4:	687b      	ldr	r3, [r7, #4]
   285f6:	681b      	ldr	r3, [r3, #0]
   285f8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   285fa:	687b      	ldr	r3, [r7, #4]
   285fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   285fe:	781b      	ldrb	r3, [r3, #0]
   28600:	b2da      	uxtb	r2, r3
   28602:	230e      	movs	r3, #14
   28604:	18fb      	adds	r3, r7, r3
   28606:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   28608:	687b      	ldr	r3, [r7, #4]
   2860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2860c:	1c5a      	adds	r2, r3, #1
   2860e:	687b      	ldr	r3, [r7, #4]
   28610:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28612:	687b      	ldr	r3, [r7, #4]
   28614:	799b      	ldrb	r3, [r3, #6]
   28616:	2b01      	cmp	r3, #1
   28618:	d113      	bne.n	28642 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   2861a:	687b      	ldr	r3, [r7, #4]
   2861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2861e:	781b      	ldrb	r3, [r3, #0]
   28620:	b2db      	uxtb	r3, r3
   28622:	021b      	lsls	r3, r3, #8
   28624:	b21a      	sxth	r2, r3
   28626:	230e      	movs	r3, #14
   28628:	18fb      	adds	r3, r7, r3
   2862a:	2100      	movs	r1, #0
   2862c:	5e5b      	ldrsh	r3, [r3, r1]
   2862e:	4313      	orrs	r3, r2
   28630:	b21a      	sxth	r2, r3
   28632:	230e      	movs	r3, #14
   28634:	18fb      	adds	r3, r7, r3
   28636:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   28638:	687b      	ldr	r3, [r7, #4]
   2863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2863c:	1c5a      	adds	r2, r3, #1
   2863e:	687b      	ldr	r3, [r7, #4]
   28640:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   28642:	230e      	movs	r3, #14
   28644:	18fb      	adds	r3, r7, r3
   28646:	881b      	ldrh	r3, [r3, #0]
   28648:	05db      	lsls	r3, r3, #23
   2864a:	0dda      	lsrs	r2, r3, #23
   2864c:	68bb      	ldr	r3, [r7, #8]
   2864e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   28650:	687b      	ldr	r3, [r7, #4]
   28652:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28654:	b29b      	uxth	r3, r3
   28656:	3b01      	subs	r3, #1
   28658:	b29a      	uxth	r2, r3
   2865a:	687b      	ldr	r3, [r7, #4]
   2865c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   2865e:	46c0      	nop			; (mov r8, r8)
   28660:	46bd      	mov	sp, r7
   28662:	b004      	add	sp, #16
   28664:	bd80      	pop	{r7, pc}
	...

00028668 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   28668:	b580      	push	{r7, lr}
   2866a:	b084      	sub	sp, #16
   2866c:	af00      	add	r7, sp, #0
   2866e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28670:	687b      	ldr	r3, [r7, #4]
   28672:	681b      	ldr	r3, [r3, #0]
   28674:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   28676:	4b08      	ldr	r3, [pc, #32]	; (28698 <_spi_write_dummy+0x30>)
   28678:	881b      	ldrh	r3, [r3, #0]
   2867a:	001a      	movs	r2, r3
   2867c:	68fb      	ldr	r3, [r7, #12]
   2867e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   28680:	687b      	ldr	r3, [r7, #4]
   28682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   28684:	b29b      	uxth	r3, r3
   28686:	3b01      	subs	r3, #1
   28688:	b29a      	uxth	r2, r3
   2868a:	687b      	ldr	r3, [r7, #4]
   2868c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2868e:	46c0      	nop			; (mov r8, r8)
   28690:	46bd      	mov	sp, r7
   28692:	b004      	add	sp, #16
   28694:	bd80      	pop	{r7, pc}
   28696:	46c0      	nop			; (mov r8, r8)
   28698:	200057ac 	.word	0x200057ac

0002869c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   2869c:	b580      	push	{r7, lr}
   2869e:	b084      	sub	sp, #16
   286a0:	af00      	add	r7, sp, #0
   286a2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   286a4:	687b      	ldr	r3, [r7, #4]
   286a6:	681b      	ldr	r3, [r3, #0]
   286a8:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   286aa:	230a      	movs	r3, #10
   286ac:	18fb      	adds	r3, r7, r3
   286ae:	2200      	movs	r2, #0
   286b0:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   286b2:	68fb      	ldr	r3, [r7, #12]
   286b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   286b6:	230a      	movs	r3, #10
   286b8:	18fb      	adds	r3, r7, r3
   286ba:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   286bc:	687b      	ldr	r3, [r7, #4]
   286be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   286c0:	b29b      	uxth	r3, r3
   286c2:	3b01      	subs	r3, #1
   286c4:	b29a      	uxth	r2, r3
   286c6:	687b      	ldr	r3, [r7, #4]
   286c8:	865a      	strh	r2, [r3, #50]	; 0x32
}
   286ca:	46c0      	nop			; (mov r8, r8)
   286cc:	46bd      	mov	sp, r7
   286ce:	b004      	add	sp, #16
   286d0:	bd80      	pop	{r7, pc}

000286d2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   286d2:	b580      	push	{r7, lr}
   286d4:	b084      	sub	sp, #16
   286d6:	af00      	add	r7, sp, #0
   286d8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   286da:	687b      	ldr	r3, [r7, #4]
   286dc:	681b      	ldr	r3, [r3, #0]
   286de:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   286e0:	68fb      	ldr	r3, [r7, #12]
   286e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   286e4:	b29a      	uxth	r2, r3
   286e6:	230a      	movs	r3, #10
   286e8:	18fb      	adds	r3, r7, r3
   286ea:	05d2      	lsls	r2, r2, #23
   286ec:	0dd2      	lsrs	r2, r2, #23
   286ee:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   286f0:	687b      	ldr	r3, [r7, #4]
   286f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   286f4:	220a      	movs	r2, #10
   286f6:	18ba      	adds	r2, r7, r2
   286f8:	8812      	ldrh	r2, [r2, #0]
   286fa:	b2d2      	uxtb	r2, r2
   286fc:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   286fe:	687b      	ldr	r3, [r7, #4]
   28700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28702:	1c5a      	adds	r2, r3, #1
   28704:	687b      	ldr	r3, [r7, #4]
   28706:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28708:	687b      	ldr	r3, [r7, #4]
   2870a:	799b      	ldrb	r3, [r3, #6]
   2870c:	2b01      	cmp	r3, #1
   2870e:	d10d      	bne.n	2872c <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   28710:	687b      	ldr	r3, [r7, #4]
   28712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28714:	220a      	movs	r2, #10
   28716:	18ba      	adds	r2, r7, r2
   28718:	8812      	ldrh	r2, [r2, #0]
   2871a:	0a12      	lsrs	r2, r2, #8
   2871c:	b292      	uxth	r2, r2
   2871e:	b2d2      	uxtb	r2, r2
   28720:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   28722:	687b      	ldr	r3, [r7, #4]
   28724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   28726:	1c5a      	adds	r2, r3, #1
   28728:	687b      	ldr	r3, [r7, #4]
   2872a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   2872c:	687b      	ldr	r3, [r7, #4]
   2872e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   28730:	b29b      	uxth	r3, r3
   28732:	3b01      	subs	r3, #1
   28734:	b29a      	uxth	r2, r3
   28736:	687b      	ldr	r3, [r7, #4]
   28738:	861a      	strh	r2, [r3, #48]	; 0x30
}
   2873a:	46c0      	nop			; (mov r8, r8)
   2873c:	46bd      	mov	sp, r7
   2873e:	b004      	add	sp, #16
   28740:	bd80      	pop	{r7, pc}
	...

00028744 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   28744:	b580      	push	{r7, lr}
   28746:	b086      	sub	sp, #24
   28748:	af00      	add	r7, sp, #0
   2874a:	0002      	movs	r2, r0
   2874c:	1dfb      	adds	r3, r7, #7
   2874e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   28750:	1dfb      	adds	r3, r7, #7
   28752:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   28754:	4b96      	ldr	r3, [pc, #600]	; (289b0 <_spi_interrupt_handler+0x26c>)
   28756:	0092      	lsls	r2, r2, #2
   28758:	58d3      	ldr	r3, [r2, r3]
   2875a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2875c:	697b      	ldr	r3, [r7, #20]
   2875e:	681b      	ldr	r3, [r3, #0]
   28760:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   28762:	697b      	ldr	r3, [r7, #20]
   28764:	2237      	movs	r2, #55	; 0x37
   28766:	5c9a      	ldrb	r2, [r3, r2]
   28768:	697b      	ldr	r3, [r7, #20]
   2876a:	2136      	movs	r1, #54	; 0x36
   2876c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   2876e:	230f      	movs	r3, #15
   28770:	18fb      	adds	r3, r7, r3
   28772:	400a      	ands	r2, r1
   28774:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   28776:	693b      	ldr	r3, [r7, #16]
   28778:	7e1b      	ldrb	r3, [r3, #24]
   2877a:	b2da      	uxtb	r2, r3
   2877c:	230c      	movs	r3, #12
   2877e:	18fb      	adds	r3, r7, r3
   28780:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   28782:	693b      	ldr	r3, [r7, #16]
   28784:	7d9b      	ldrb	r3, [r3, #22]
   28786:	b2db      	uxtb	r3, r3
   28788:	b29a      	uxth	r2, r3
   2878a:	230c      	movs	r3, #12
   2878c:	18fb      	adds	r3, r7, r3
   2878e:	210c      	movs	r1, #12
   28790:	1879      	adds	r1, r7, r1
   28792:	8809      	ldrh	r1, [r1, #0]
   28794:	400a      	ands	r2, r1
   28796:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   28798:	230c      	movs	r3, #12
   2879a:	18fb      	adds	r3, r7, r3
   2879c:	881b      	ldrh	r3, [r3, #0]
   2879e:	2201      	movs	r2, #1
   287a0:	4013      	ands	r3, r2
   287a2:	d038      	beq.n	28816 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   287a4:	697b      	ldr	r3, [r7, #20]
   287a6:	795b      	ldrb	r3, [r3, #5]
   287a8:	2b01      	cmp	r3, #1
   287aa:	d110      	bne.n	287ce <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   287ac:	697b      	ldr	r3, [r7, #20]
   287ae:	7a5b      	ldrb	r3, [r3, #9]
   287b0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   287b2:	2b00      	cmp	r3, #0
   287b4:	d10b      	bne.n	287ce <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   287b6:	697b      	ldr	r3, [r7, #20]
   287b8:	0018      	movs	r0, r3
   287ba:	4b7e      	ldr	r3, [pc, #504]	; (289b4 <_spi_interrupt_handler+0x270>)
   287bc:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   287be:	697b      	ldr	r3, [r7, #20]
   287c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   287c2:	b29b      	uxth	r3, r3
   287c4:	2b00      	cmp	r3, #0
   287c6:	d102      	bne.n	287ce <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   287c8:	693b      	ldr	r3, [r7, #16]
   287ca:	2201      	movs	r2, #1
   287cc:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   287ce:	697b      	ldr	r3, [r7, #20]
   287d0:	795b      	ldrb	r3, [r3, #5]
		if (0
   287d2:	2b01      	cmp	r3, #1
   287d4:	d11f      	bne.n	28816 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   287d6:	697b      	ldr	r3, [r7, #20]
   287d8:	7a5b      	ldrb	r3, [r3, #9]
   287da:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   287dc:	2b00      	cmp	r3, #0
   287de:	d01a      	beq.n	28816 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   287e0:	697b      	ldr	r3, [r7, #20]
   287e2:	0018      	movs	r0, r3
   287e4:	4b74      	ldr	r3, [pc, #464]	; (289b8 <_spi_interrupt_handler+0x274>)
   287e6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   287e8:	697b      	ldr	r3, [r7, #20]
   287ea:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   287ec:	b29b      	uxth	r3, r3
   287ee:	2b00      	cmp	r3, #0
   287f0:	d111      	bne.n	28816 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   287f2:	693b      	ldr	r3, [r7, #16]
   287f4:	2201      	movs	r2, #1
   287f6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   287f8:	697b      	ldr	r3, [r7, #20]
   287fa:	7a5b      	ldrb	r3, [r3, #9]
   287fc:	b2db      	uxtb	r3, r3
   287fe:	2b01      	cmp	r3, #1
   28800:	d109      	bne.n	28816 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   28802:	697b      	ldr	r3, [r7, #20]
   28804:	79db      	ldrb	r3, [r3, #7]
   28806:	2201      	movs	r2, #1
   28808:	4053      	eors	r3, r2
   2880a:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   2880c:	2b00      	cmp	r3, #0
   2880e:	d002      	beq.n	28816 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   28810:	693b      	ldr	r3, [r7, #16]
   28812:	2202      	movs	r2, #2
   28814:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   28816:	230c      	movs	r3, #12
   28818:	18fb      	adds	r3, r7, r3
   2881a:	881b      	ldrh	r3, [r3, #0]
   2881c:	2204      	movs	r2, #4
   2881e:	4013      	ands	r3, r2
   28820:	d100      	bne.n	28824 <_spi_interrupt_handler+0xe0>
   28822:	e07e      	b.n	28922 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   28824:	693b      	ldr	r3, [r7, #16]
   28826:	8b5b      	ldrh	r3, [r3, #26]
   28828:	b29b      	uxth	r3, r3
   2882a:	001a      	movs	r2, r3
   2882c:	2304      	movs	r3, #4
   2882e:	4013      	ands	r3, r2
   28830:	d022      	beq.n	28878 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   28832:	697b      	ldr	r3, [r7, #20]
   28834:	7a5b      	ldrb	r3, [r3, #9]
   28836:	b2db      	uxtb	r3, r3
   28838:	2b01      	cmp	r3, #1
   2883a:	d014      	beq.n	28866 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   2883c:	697b      	ldr	r3, [r7, #20]
   2883e:	2238      	movs	r2, #56	; 0x38
   28840:	211e      	movs	r1, #30
   28842:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   28844:	697b      	ldr	r3, [r7, #20]
   28846:	2203      	movs	r2, #3
   28848:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   2884a:	693b      	ldr	r3, [r7, #16]
   2884c:	2205      	movs	r2, #5
   2884e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   28850:	230f      	movs	r3, #15
   28852:	18fb      	adds	r3, r7, r3
   28854:	781b      	ldrb	r3, [r3, #0]
   28856:	2208      	movs	r2, #8
   28858:	4013      	ands	r3, r2
   2885a:	d004      	beq.n	28866 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   2885c:	697b      	ldr	r3, [r7, #20]
   2885e:	699b      	ldr	r3, [r3, #24]
   28860:	697a      	ldr	r2, [r7, #20]
   28862:	0010      	movs	r0, r2
   28864:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   28866:	693b      	ldr	r3, [r7, #16]
   28868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2886a:	230a      	movs	r3, #10
   2886c:	18fb      	adds	r3, r7, r3
   2886e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   28870:	693b      	ldr	r3, [r7, #16]
   28872:	2204      	movs	r2, #4
   28874:	835a      	strh	r2, [r3, #26]
   28876:	e054      	b.n	28922 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   28878:	697b      	ldr	r3, [r7, #20]
   2887a:	7a5b      	ldrb	r3, [r3, #9]
   2887c:	b2db      	uxtb	r3, r3
   2887e:	2b01      	cmp	r3, #1
   28880:	d11e      	bne.n	288c0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   28882:	697b      	ldr	r3, [r7, #20]
   28884:	0018      	movs	r0, r3
   28886:	4b4d      	ldr	r3, [pc, #308]	; (289bc <_spi_interrupt_handler+0x278>)
   28888:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2888a:	697b      	ldr	r3, [r7, #20]
   2888c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2888e:	b29b      	uxth	r3, r3
   28890:	2b00      	cmp	r3, #0
   28892:	d146      	bne.n	28922 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   28894:	693b      	ldr	r3, [r7, #16]
   28896:	2204      	movs	r2, #4
   28898:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2889a:	697b      	ldr	r3, [r7, #20]
   2889c:	2238      	movs	r2, #56	; 0x38
   2889e:	2100      	movs	r1, #0
   288a0:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   288a2:	697b      	ldr	r3, [r7, #20]
   288a4:	2203      	movs	r2, #3
   288a6:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   288a8:	230f      	movs	r3, #15
   288aa:	18fb      	adds	r3, r7, r3
   288ac:	781b      	ldrb	r3, [r3, #0]
   288ae:	2201      	movs	r2, #1
   288b0:	4013      	ands	r3, r2
   288b2:	d036      	beq.n	28922 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   288b4:	697b      	ldr	r3, [r7, #20]
   288b6:	68db      	ldr	r3, [r3, #12]
   288b8:	697a      	ldr	r2, [r7, #20]
   288ba:	0010      	movs	r0, r2
   288bc:	4798      	blx	r3
   288be:	e030      	b.n	28922 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   288c0:	697b      	ldr	r3, [r7, #20]
   288c2:	0018      	movs	r0, r3
   288c4:	4b3e      	ldr	r3, [pc, #248]	; (289c0 <_spi_interrupt_handler+0x27c>)
   288c6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   288c8:	697b      	ldr	r3, [r7, #20]
   288ca:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   288cc:	b29b      	uxth	r3, r3
   288ce:	2b00      	cmp	r3, #0
   288d0:	d127      	bne.n	28922 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   288d2:	697b      	ldr	r3, [r7, #20]
   288d4:	2238      	movs	r2, #56	; 0x38
   288d6:	2100      	movs	r1, #0
   288d8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   288da:	693b      	ldr	r3, [r7, #16]
   288dc:	2204      	movs	r2, #4
   288de:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   288e0:	697b      	ldr	r3, [r7, #20]
   288e2:	7a5b      	ldrb	r3, [r3, #9]
   288e4:	b2db      	uxtb	r3, r3
   288e6:	2b02      	cmp	r3, #2
   288e8:	d10b      	bne.n	28902 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   288ea:	230f      	movs	r3, #15
   288ec:	18fb      	adds	r3, r7, r3
   288ee:	781b      	ldrb	r3, [r3, #0]
   288f0:	2204      	movs	r2, #4
   288f2:	4013      	ands	r3, r2
   288f4:	d015      	beq.n	28922 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   288f6:	697b      	ldr	r3, [r7, #20]
   288f8:	695b      	ldr	r3, [r3, #20]
   288fa:	697a      	ldr	r2, [r7, #20]
   288fc:	0010      	movs	r0, r2
   288fe:	4798      	blx	r3
   28900:	e00f      	b.n	28922 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   28902:	697b      	ldr	r3, [r7, #20]
   28904:	7a5b      	ldrb	r3, [r3, #9]
   28906:	b2db      	uxtb	r3, r3
   28908:	2b00      	cmp	r3, #0
   2890a:	d10a      	bne.n	28922 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   2890c:	230f      	movs	r3, #15
   2890e:	18fb      	adds	r3, r7, r3
   28910:	781b      	ldrb	r3, [r3, #0]
   28912:	2202      	movs	r2, #2
   28914:	4013      	ands	r3, r2
   28916:	d004      	beq.n	28922 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   28918:	697b      	ldr	r3, [r7, #20]
   2891a:	691b      	ldr	r3, [r3, #16]
   2891c:	697a      	ldr	r2, [r7, #20]
   2891e:	0010      	movs	r0, r2
   28920:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   28922:	230c      	movs	r3, #12
   28924:	18fb      	adds	r3, r7, r3
   28926:	881b      	ldrh	r3, [r3, #0]
   28928:	2202      	movs	r2, #2
   2892a:	4013      	ands	r3, r2
   2892c:	d024      	beq.n	28978 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   2892e:	697b      	ldr	r3, [r7, #20]
   28930:	795b      	ldrb	r3, [r3, #5]
   28932:	2b01      	cmp	r3, #1
   28934:	d120      	bne.n	28978 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28936:	697b      	ldr	r3, [r7, #20]
   28938:	7a5b      	ldrb	r3, [r3, #9]
   2893a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2893c:	2b01      	cmp	r3, #1
   2893e:	d11b      	bne.n	28978 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   28940:	697b      	ldr	r3, [r7, #20]
   28942:	79db      	ldrb	r3, [r3, #7]
   28944:	2201      	movs	r2, #1
   28946:	4053      	eors	r3, r2
   28948:	b2db      	uxtb	r3, r3
   2894a:	2b00      	cmp	r3, #0
   2894c:	d014      	beq.n	28978 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2894e:	693b      	ldr	r3, [r7, #16]
   28950:	2202      	movs	r2, #2
   28952:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   28954:	697b      	ldr	r3, [r7, #20]
   28956:	2203      	movs	r2, #3
   28958:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2895a:	697b      	ldr	r3, [r7, #20]
   2895c:	2238      	movs	r2, #56	; 0x38
   2895e:	2100      	movs	r1, #0
   28960:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   28962:	230f      	movs	r3, #15
   28964:	18fb      	adds	r3, r7, r3
   28966:	781b      	ldrb	r3, [r3, #0]
   28968:	2201      	movs	r2, #1
   2896a:	4013      	ands	r3, r2
   2896c:	d004      	beq.n	28978 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2896e:	697b      	ldr	r3, [r7, #20]
   28970:	68db      	ldr	r3, [r3, #12]
   28972:	697a      	ldr	r2, [r7, #20]
   28974:	0010      	movs	r0, r2
   28976:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   28978:	230c      	movs	r3, #12
   2897a:	18fb      	adds	r3, r7, r3
   2897c:	881b      	ldrh	r3, [r3, #0]
   2897e:	2280      	movs	r2, #128	; 0x80
   28980:	4013      	ands	r3, r2
   28982:	d010      	beq.n	289a6 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   28984:	693b      	ldr	r3, [r7, #16]
   28986:	2280      	movs	r2, #128	; 0x80
   28988:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2898a:	693b      	ldr	r3, [r7, #16]
   2898c:	2280      	movs	r2, #128	; 0x80
   2898e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   28990:	230f      	movs	r3, #15
   28992:	18fb      	adds	r3, r7, r3
   28994:	781b      	ldrb	r3, [r3, #0]
   28996:	2240      	movs	r2, #64	; 0x40
   28998:	4013      	ands	r3, r2
   2899a:	d004      	beq.n	289a6 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2899c:	697b      	ldr	r3, [r7, #20]
   2899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   289a0:	697a      	ldr	r2, [r7, #20]
   289a2:	0010      	movs	r0, r2
   289a4:	4798      	blx	r3
		}
	}
#  endif
}
   289a6:	46c0      	nop			; (mov r8, r8)
   289a8:	46bd      	mov	sp, r7
   289aa:	b006      	add	sp, #24
   289ac:	bd80      	pop	{r7, pc}
   289ae:	46c0      	nop			; (mov r8, r8)
   289b0:	20005794 	.word	0x20005794
   289b4:	00028669 	.word	0x00028669
   289b8:	000285ed 	.word	0x000285ed
   289bc:	0002869d 	.word	0x0002869d
   289c0:	000286d3 	.word	0x000286d3

000289c4 <system_gclk_chan_get_config_defaults>:
{
   289c4:	b580      	push	{r7, lr}
   289c6:	b082      	sub	sp, #8
   289c8:	af00      	add	r7, sp, #0
   289ca:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   289cc:	687b      	ldr	r3, [r7, #4]
   289ce:	2200      	movs	r2, #0
   289d0:	701a      	strb	r2, [r3, #0]
}
   289d2:	46c0      	nop			; (mov r8, r8)
   289d4:	46bd      	mov	sp, r7
   289d6:	b002      	add	sp, #8
   289d8:	bd80      	pop	{r7, pc}
	...

000289dc <system_apb_clock_set_mask>:
{
   289dc:	b580      	push	{r7, lr}
   289de:	b082      	sub	sp, #8
   289e0:	af00      	add	r7, sp, #0
   289e2:	0002      	movs	r2, r0
   289e4:	6039      	str	r1, [r7, #0]
   289e6:	1dfb      	adds	r3, r7, #7
   289e8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   289ea:	1dfb      	adds	r3, r7, #7
   289ec:	781b      	ldrb	r3, [r3, #0]
   289ee:	2b01      	cmp	r3, #1
   289f0:	d00a      	beq.n	28a08 <system_apb_clock_set_mask+0x2c>
   289f2:	2b02      	cmp	r3, #2
   289f4:	d00f      	beq.n	28a16 <system_apb_clock_set_mask+0x3a>
   289f6:	2b00      	cmp	r3, #0
   289f8:	d114      	bne.n	28a24 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   289fa:	4b0e      	ldr	r3, [pc, #56]	; (28a34 <system_apb_clock_set_mask+0x58>)
   289fc:	4a0d      	ldr	r2, [pc, #52]	; (28a34 <system_apb_clock_set_mask+0x58>)
   289fe:	6991      	ldr	r1, [r2, #24]
   28a00:	683a      	ldr	r2, [r7, #0]
   28a02:	430a      	orrs	r2, r1
   28a04:	619a      	str	r2, [r3, #24]
			break;
   28a06:	e00f      	b.n	28a28 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28a08:	4b0a      	ldr	r3, [pc, #40]	; (28a34 <system_apb_clock_set_mask+0x58>)
   28a0a:	4a0a      	ldr	r2, [pc, #40]	; (28a34 <system_apb_clock_set_mask+0x58>)
   28a0c:	69d1      	ldr	r1, [r2, #28]
   28a0e:	683a      	ldr	r2, [r7, #0]
   28a10:	430a      	orrs	r2, r1
   28a12:	61da      	str	r2, [r3, #28]
			break;
   28a14:	e008      	b.n	28a28 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28a16:	4b07      	ldr	r3, [pc, #28]	; (28a34 <system_apb_clock_set_mask+0x58>)
   28a18:	4a06      	ldr	r2, [pc, #24]	; (28a34 <system_apb_clock_set_mask+0x58>)
   28a1a:	6a11      	ldr	r1, [r2, #32]
   28a1c:	683a      	ldr	r2, [r7, #0]
   28a1e:	430a      	orrs	r2, r1
   28a20:	621a      	str	r2, [r3, #32]
			break;
   28a22:	e001      	b.n	28a28 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28a24:	2317      	movs	r3, #23
   28a26:	e000      	b.n	28a2a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28a28:	2300      	movs	r3, #0
}
   28a2a:	0018      	movs	r0, r3
   28a2c:	46bd      	mov	sp, r7
   28a2e:	b002      	add	sp, #8
   28a30:	bd80      	pop	{r7, pc}
   28a32:	46c0      	nop			; (mov r8, r8)
   28a34:	40000400 	.word	0x40000400

00028a38 <system_pinmux_get_config_defaults>:
{
   28a38:	b580      	push	{r7, lr}
   28a3a:	b082      	sub	sp, #8
   28a3c:	af00      	add	r7, sp, #0
   28a3e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28a40:	687b      	ldr	r3, [r7, #4]
   28a42:	2280      	movs	r2, #128	; 0x80
   28a44:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28a46:	687b      	ldr	r3, [r7, #4]
   28a48:	2200      	movs	r2, #0
   28a4a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28a4c:	687b      	ldr	r3, [r7, #4]
   28a4e:	2201      	movs	r2, #1
   28a50:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28a52:	687b      	ldr	r3, [r7, #4]
   28a54:	2200      	movs	r2, #0
   28a56:	70da      	strb	r2, [r3, #3]
}
   28a58:	46c0      	nop			; (mov r8, r8)
   28a5a:	46bd      	mov	sp, r7
   28a5c:	b002      	add	sp, #8
   28a5e:	bd80      	pop	{r7, pc}

00028a60 <system_is_debugger_present>:
{
   28a60:	b580      	push	{r7, lr}
   28a62:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28a64:	4b05      	ldr	r3, [pc, #20]	; (28a7c <system_is_debugger_present+0x1c>)
   28a66:	789b      	ldrb	r3, [r3, #2]
   28a68:	b2db      	uxtb	r3, r3
   28a6a:	001a      	movs	r2, r3
   28a6c:	2302      	movs	r3, #2
   28a6e:	4013      	ands	r3, r2
   28a70:	1e5a      	subs	r2, r3, #1
   28a72:	4193      	sbcs	r3, r2
   28a74:	b2db      	uxtb	r3, r3
}
   28a76:	0018      	movs	r0, r3
   28a78:	46bd      	mov	sp, r7
   28a7a:	bd80      	pop	{r7, pc}
   28a7c:	41002000 	.word	0x41002000

00028a80 <usart_is_syncing>:
{
   28a80:	b580      	push	{r7, lr}
   28a82:	b084      	sub	sp, #16
   28a84:	af00      	add	r7, sp, #0
   28a86:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   28a88:	687b      	ldr	r3, [r7, #4]
   28a8a:	681b      	ldr	r3, [r3, #0]
   28a8c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   28a8e:	68fb      	ldr	r3, [r7, #12]
   28a90:	69db      	ldr	r3, [r3, #28]
   28a92:	1e5a      	subs	r2, r3, #1
   28a94:	4193      	sbcs	r3, r2
   28a96:	b2db      	uxtb	r3, r3
}
   28a98:	0018      	movs	r0, r3
   28a9a:	46bd      	mov	sp, r7
   28a9c:	b004      	add	sp, #16
   28a9e:	bd80      	pop	{r7, pc}

00028aa0 <_usart_wait_for_sync>:
{
   28aa0:	b580      	push	{r7, lr}
   28aa2:	b082      	sub	sp, #8
   28aa4:	af00      	add	r7, sp, #0
   28aa6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   28aa8:	46c0      	nop			; (mov r8, r8)
   28aaa:	687b      	ldr	r3, [r7, #4]
   28aac:	0018      	movs	r0, r3
   28aae:	4b04      	ldr	r3, [pc, #16]	; (28ac0 <_usart_wait_for_sync+0x20>)
   28ab0:	4798      	blx	r3
   28ab2:	1e03      	subs	r3, r0, #0
   28ab4:	d1f9      	bne.n	28aaa <_usart_wait_for_sync+0xa>
}
   28ab6:	46c0      	nop			; (mov r8, r8)
   28ab8:	46bd      	mov	sp, r7
   28aba:	b002      	add	sp, #8
   28abc:	bd80      	pop	{r7, pc}
   28abe:	46c0      	nop			; (mov r8, r8)
   28ac0:	00028a81 	.word	0x00028a81

00028ac4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   28ac4:	b5b0      	push	{r4, r5, r7, lr}
   28ac6:	b08c      	sub	sp, #48	; 0x30
   28ac8:	af02      	add	r7, sp, #8
   28aca:	6078      	str	r0, [r7, #4]
   28acc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28ace:	687b      	ldr	r3, [r7, #4]
   28ad0:	681b      	ldr	r3, [r3, #0]
   28ad2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28ad4:	687b      	ldr	r3, [r7, #4]
   28ad6:	681b      	ldr	r3, [r3, #0]
   28ad8:	0018      	movs	r0, r3
   28ada:	4bab      	ldr	r3, [pc, #684]	; (28d88 <_usart_set_config+0x2c4>)
   28adc:	4798      	blx	r3
   28ade:	0003      	movs	r3, r0
   28ae0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28ae2:	697b      	ldr	r3, [r7, #20]
   28ae4:	3314      	adds	r3, #20
   28ae6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   28ae8:	2300      	movs	r3, #0
   28aea:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   28aec:	2300      	movs	r3, #0
   28aee:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   28af0:	230a      	movs	r3, #10
   28af2:	18fb      	adds	r3, r7, r3
   28af4:	2200      	movs	r2, #0
   28af6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28af8:	231f      	movs	r3, #31
   28afa:	18fb      	adds	r3, r7, r3
   28afc:	2200      	movs	r2, #0
   28afe:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28b00:	231e      	movs	r3, #30
   28b02:	18fb      	adds	r3, r7, r3
   28b04:	2210      	movs	r2, #16
   28b06:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   28b08:	683b      	ldr	r3, [r7, #0]
   28b0a:	8a1b      	ldrh	r3, [r3, #16]
   28b0c:	2280      	movs	r2, #128	; 0x80
   28b0e:	01d2      	lsls	r2, r2, #7
   28b10:	4293      	cmp	r3, r2
   28b12:	d01c      	beq.n	28b4e <_usart_set_config+0x8a>
   28b14:	2280      	movs	r2, #128	; 0x80
   28b16:	01d2      	lsls	r2, r2, #7
   28b18:	4293      	cmp	r3, r2
   28b1a:	dc06      	bgt.n	28b2a <_usart_set_config+0x66>
   28b1c:	2b00      	cmp	r3, #0
   28b1e:	d00d      	beq.n	28b3c <_usart_set_config+0x78>
   28b20:	2280      	movs	r2, #128	; 0x80
   28b22:	0192      	lsls	r2, r2, #6
   28b24:	4293      	cmp	r3, r2
   28b26:	d024      	beq.n	28b72 <_usart_set_config+0xae>
   28b28:	e035      	b.n	28b96 <_usart_set_config+0xd2>
   28b2a:	22c0      	movs	r2, #192	; 0xc0
   28b2c:	01d2      	lsls	r2, r2, #7
   28b2e:	4293      	cmp	r3, r2
   28b30:	d028      	beq.n	28b84 <_usart_set_config+0xc0>
   28b32:	2280      	movs	r2, #128	; 0x80
   28b34:	0212      	lsls	r2, r2, #8
   28b36:	4293      	cmp	r3, r2
   28b38:	d012      	beq.n	28b60 <_usart_set_config+0x9c>
   28b3a:	e02c      	b.n	28b96 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28b3c:	231f      	movs	r3, #31
   28b3e:	18fb      	adds	r3, r7, r3
   28b40:	2200      	movs	r2, #0
   28b42:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28b44:	231e      	movs	r3, #30
   28b46:	18fb      	adds	r3, r7, r3
   28b48:	2210      	movs	r2, #16
   28b4a:	701a      	strb	r2, [r3, #0]
			break;
   28b4c:	e023      	b.n	28b96 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28b4e:	231f      	movs	r3, #31
   28b50:	18fb      	adds	r3, r7, r3
   28b52:	2200      	movs	r2, #0
   28b54:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28b56:	231e      	movs	r3, #30
   28b58:	18fb      	adds	r3, r7, r3
   28b5a:	2208      	movs	r2, #8
   28b5c:	701a      	strb	r2, [r3, #0]
			break;
   28b5e:	e01a      	b.n	28b96 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   28b60:	231f      	movs	r3, #31
   28b62:	18fb      	adds	r3, r7, r3
   28b64:	2200      	movs	r2, #0
   28b66:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   28b68:	231e      	movs	r3, #30
   28b6a:	18fb      	adds	r3, r7, r3
   28b6c:	2203      	movs	r2, #3
   28b6e:	701a      	strb	r2, [r3, #0]
			break;
   28b70:	e011      	b.n	28b96 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28b72:	231f      	movs	r3, #31
   28b74:	18fb      	adds	r3, r7, r3
   28b76:	2201      	movs	r2, #1
   28b78:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   28b7a:	231e      	movs	r3, #30
   28b7c:	18fb      	adds	r3, r7, r3
   28b7e:	2210      	movs	r2, #16
   28b80:	701a      	strb	r2, [r3, #0]
			break;
   28b82:	e008      	b.n	28b96 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   28b84:	231f      	movs	r3, #31
   28b86:	18fb      	adds	r3, r7, r3
   28b88:	2201      	movs	r2, #1
   28b8a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   28b8c:	231e      	movs	r3, #30
   28b8e:	18fb      	adds	r3, r7, r3
   28b90:	2208      	movs	r2, #8
   28b92:	701a      	strb	r2, [r3, #0]
			break;
   28b94:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   28b96:	683b      	ldr	r3, [r7, #0]
   28b98:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   28b9a:	683b      	ldr	r3, [r7, #0]
   28b9c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   28b9e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   28ba0:	683b      	ldr	r3, [r7, #0]
   28ba2:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   28ba4:	4313      	orrs	r3, r2
		config->sample_rate |
   28ba6:	683a      	ldr	r2, [r7, #0]
   28ba8:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   28baa:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   28bac:	683a      	ldr	r2, [r7, #0]
   28bae:	7e12      	ldrb	r2, [r2, #24]
   28bb0:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   28bb2:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   28bb4:	683a      	ldr	r2, [r7, #0]
   28bb6:	2126      	movs	r1, #38	; 0x26
   28bb8:	5c52      	ldrb	r2, [r2, r1]
   28bba:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   28bbc:	4313      	orrs	r3, r2
   28bbe:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   28bc0:	231d      	movs	r3, #29
   28bc2:	18fb      	adds	r3, r7, r3
   28bc4:	2200      	movs	r2, #0
   28bc6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   28bc8:	683b      	ldr	r3, [r7, #0]
   28bca:	685b      	ldr	r3, [r3, #4]
   28bcc:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   28bce:	68fb      	ldr	r3, [r7, #12]
   28bd0:	2b00      	cmp	r3, #0
   28bd2:	d01e      	beq.n	28c12 <_usart_set_config+0x14e>
   28bd4:	2280      	movs	r2, #128	; 0x80
   28bd6:	0552      	lsls	r2, r2, #21
   28bd8:	4293      	cmp	r3, r2
   28bda:	d14f      	bne.n	28c7c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   28bdc:	683b      	ldr	r3, [r7, #0]
   28bde:	2227      	movs	r2, #39	; 0x27
   28be0:	5c9b      	ldrb	r3, [r3, r2]
   28be2:	2201      	movs	r2, #1
   28be4:	4053      	eors	r3, r2
   28be6:	b2db      	uxtb	r3, r3
   28be8:	2b00      	cmp	r3, #0
   28bea:	d046      	beq.n	28c7a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   28bec:	683b      	ldr	r3, [r7, #0]
   28bee:	6a1d      	ldr	r5, [r3, #32]
   28bf0:	693b      	ldr	r3, [r7, #16]
   28bf2:	b2db      	uxtb	r3, r3
   28bf4:	0018      	movs	r0, r3
   28bf6:	4b65      	ldr	r3, [pc, #404]	; (28d8c <_usart_set_config+0x2c8>)
   28bf8:	4798      	blx	r3
   28bfa:	0001      	movs	r1, r0
   28bfc:	231d      	movs	r3, #29
   28bfe:	18fc      	adds	r4, r7, r3
   28c00:	230a      	movs	r3, #10
   28c02:	18fb      	adds	r3, r7, r3
   28c04:	001a      	movs	r2, r3
   28c06:	0028      	movs	r0, r5
   28c08:	4b61      	ldr	r3, [pc, #388]	; (28d90 <_usart_set_config+0x2cc>)
   28c0a:	4798      	blx	r3
   28c0c:	0003      	movs	r3, r0
   28c0e:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   28c10:	e033      	b.n	28c7a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   28c12:	683b      	ldr	r3, [r7, #0]
   28c14:	2227      	movs	r2, #39	; 0x27
   28c16:	5c9b      	ldrb	r3, [r3, r2]
   28c18:	2b00      	cmp	r3, #0
   28c1a:	d014      	beq.n	28c46 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   28c1c:	683b      	ldr	r3, [r7, #0]
   28c1e:	6a18      	ldr	r0, [r3, #32]
   28c20:	683b      	ldr	r3, [r7, #0]
   28c22:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   28c24:	231d      	movs	r3, #29
   28c26:	18fc      	adds	r4, r7, r3
   28c28:	231f      	movs	r3, #31
   28c2a:	18fb      	adds	r3, r7, r3
   28c2c:	781d      	ldrb	r5, [r3, #0]
   28c2e:	230a      	movs	r3, #10
   28c30:	18fa      	adds	r2, r7, r3
   28c32:	231e      	movs	r3, #30
   28c34:	18fb      	adds	r3, r7, r3
   28c36:	781b      	ldrb	r3, [r3, #0]
   28c38:	9300      	str	r3, [sp, #0]
   28c3a:	002b      	movs	r3, r5
   28c3c:	4d55      	ldr	r5, [pc, #340]	; (28d94 <_usart_set_config+0x2d0>)
   28c3e:	47a8      	blx	r5
   28c40:	0003      	movs	r3, r0
   28c42:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   28c44:	e01a      	b.n	28c7c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   28c46:	683b      	ldr	r3, [r7, #0]
   28c48:	6a1d      	ldr	r5, [r3, #32]
   28c4a:	693b      	ldr	r3, [r7, #16]
   28c4c:	b2db      	uxtb	r3, r3
   28c4e:	0018      	movs	r0, r3
   28c50:	4b4e      	ldr	r3, [pc, #312]	; (28d8c <_usart_set_config+0x2c8>)
   28c52:	4798      	blx	r3
				status_code =
   28c54:	231d      	movs	r3, #29
   28c56:	18fc      	adds	r4, r7, r3
   28c58:	231f      	movs	r3, #31
   28c5a:	18fb      	adds	r3, r7, r3
   28c5c:	7819      	ldrb	r1, [r3, #0]
   28c5e:	230a      	movs	r3, #10
   28c60:	18fa      	adds	r2, r7, r3
   28c62:	231e      	movs	r3, #30
   28c64:	18fb      	adds	r3, r7, r3
   28c66:	781b      	ldrb	r3, [r3, #0]
   28c68:	9300      	str	r3, [sp, #0]
   28c6a:	000b      	movs	r3, r1
   28c6c:	0001      	movs	r1, r0
   28c6e:	0028      	movs	r0, r5
   28c70:	4d48      	ldr	r5, [pc, #288]	; (28d94 <_usart_set_config+0x2d0>)
   28c72:	47a8      	blx	r5
   28c74:	0003      	movs	r3, r0
   28c76:	7023      	strb	r3, [r4, #0]
			break;
   28c78:	e000      	b.n	28c7c <_usart_set_config+0x1b8>
			break;
   28c7a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   28c7c:	231d      	movs	r3, #29
   28c7e:	18fb      	adds	r3, r7, r3
   28c80:	781b      	ldrb	r3, [r3, #0]
   28c82:	2b00      	cmp	r3, #0
   28c84:	d003      	beq.n	28c8e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   28c86:	231d      	movs	r3, #29
   28c88:	18fb      	adds	r3, r7, r3
   28c8a:	781b      	ldrb	r3, [r3, #0]
   28c8c:	e077      	b.n	28d7e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   28c8e:	683b      	ldr	r3, [r7, #0]
   28c90:	7e5b      	ldrb	r3, [r3, #25]
   28c92:	2b00      	cmp	r3, #0
   28c94:	d003      	beq.n	28c9e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   28c96:	683b      	ldr	r3, [r7, #0]
   28c98:	7e9a      	ldrb	r2, [r3, #26]
   28c9a:	69bb      	ldr	r3, [r7, #24]
   28c9c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28c9e:	687b      	ldr	r3, [r7, #4]
   28ca0:	0018      	movs	r0, r3
   28ca2:	4b3d      	ldr	r3, [pc, #244]	; (28d98 <_usart_set_config+0x2d4>)
   28ca4:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   28ca6:	230a      	movs	r3, #10
   28ca8:	18fb      	adds	r3, r7, r3
   28caa:	881a      	ldrh	r2, [r3, #0]
   28cac:	69bb      	ldr	r3, [r7, #24]
   28cae:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   28cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28cb2:	68fb      	ldr	r3, [r7, #12]
   28cb4:	4313      	orrs	r3, r2
   28cb6:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   28cb8:	683b      	ldr	r3, [r7, #0]
   28cba:	2227      	movs	r2, #39	; 0x27
   28cbc:	5c9b      	ldrb	r3, [r3, r2]
   28cbe:	2201      	movs	r2, #1
   28cc0:	4053      	eors	r3, r2
   28cc2:	b2db      	uxtb	r3, r3
   28cc4:	2b00      	cmp	r3, #0
   28cc6:	d003      	beq.n	28cd0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   28cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28cca:	2204      	movs	r2, #4
   28ccc:	4313      	orrs	r3, r2
   28cce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28cd0:	683b      	ldr	r3, [r7, #0]
   28cd2:	7e5b      	ldrb	r3, [r3, #25]
   28cd4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28cd6:	683b      	ldr	r3, [r7, #0]
   28cd8:	7f1b      	ldrb	r3, [r3, #28]
   28cda:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   28cdc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   28cde:	683b      	ldr	r3, [r7, #0]
   28ce0:	7f5b      	ldrb	r3, [r3, #29]
   28ce2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   28ce4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28ce6:	683b      	ldr	r3, [r7, #0]
   28ce8:	2124      	movs	r1, #36	; 0x24
   28cea:	5c5b      	ldrb	r3, [r3, r1]
   28cec:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   28cee:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   28cf0:	683b      	ldr	r3, [r7, #0]
   28cf2:	2125      	movs	r1, #37	; 0x25
   28cf4:	5c5b      	ldrb	r3, [r3, r1]
   28cf6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   28cf8:	4313      	orrs	r3, r2
	ctrlb =  
   28cfa:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   28cfc:	683b      	ldr	r3, [r7, #0]
   28cfe:	7a9b      	ldrb	r3, [r3, #10]
   28d00:	001a      	movs	r2, r3
   28d02:	6a3b      	ldr	r3, [r7, #32]
   28d04:	4313      	orrs	r3, r2
   28d06:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   28d08:	683b      	ldr	r3, [r7, #0]
   28d0a:	7adb      	ldrb	r3, [r3, #11]
   28d0c:	001a      	movs	r2, r3
   28d0e:	6a3b      	ldr	r3, [r7, #32]
   28d10:	4313      	orrs	r3, r2
   28d12:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   28d14:	683b      	ldr	r3, [r7, #0]
   28d16:	891b      	ldrh	r3, [r3, #8]
   28d18:	2bff      	cmp	r3, #255	; 0xff
   28d1a:	d00b      	beq.n	28d34 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   28d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28d1e:	2280      	movs	r2, #128	; 0x80
   28d20:	0452      	lsls	r2, r2, #17
   28d22:	4313      	orrs	r3, r2
   28d24:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   28d26:	683b      	ldr	r3, [r7, #0]
   28d28:	891b      	ldrh	r3, [r3, #8]
   28d2a:	001a      	movs	r2, r3
   28d2c:	6a3b      	ldr	r3, [r7, #32]
   28d2e:	4313      	orrs	r3, r2
   28d30:	623b      	str	r3, [r7, #32]
   28d32:	e008      	b.n	28d46 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   28d34:	683b      	ldr	r3, [r7, #0]
   28d36:	7edb      	ldrb	r3, [r3, #27]
   28d38:	2b00      	cmp	r3, #0
   28d3a:	d004      	beq.n	28d46 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   28d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28d3e:	2280      	movs	r2, #128	; 0x80
   28d40:	04d2      	lsls	r2, r2, #19
   28d42:	4313      	orrs	r3, r2
   28d44:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28d46:	683b      	ldr	r3, [r7, #0]
   28d48:	222c      	movs	r2, #44	; 0x2c
   28d4a:	5c9b      	ldrb	r3, [r3, r2]
   28d4c:	2b00      	cmp	r3, #0
   28d4e:	d103      	bne.n	28d58 <_usart_set_config+0x294>
   28d50:	4b12      	ldr	r3, [pc, #72]	; (28d9c <_usart_set_config+0x2d8>)
   28d52:	4798      	blx	r3
   28d54:	1e03      	subs	r3, r0, #0
   28d56:	d003      	beq.n	28d60 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   28d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28d5a:	2280      	movs	r2, #128	; 0x80
   28d5c:	4313      	orrs	r3, r2
   28d5e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28d60:	687b      	ldr	r3, [r7, #4]
   28d62:	0018      	movs	r0, r3
   28d64:	4b0c      	ldr	r3, [pc, #48]	; (28d98 <_usart_set_config+0x2d4>)
   28d66:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   28d68:	69bb      	ldr	r3, [r7, #24]
   28d6a:	6a3a      	ldr	r2, [r7, #32]
   28d6c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   28d6e:	687b      	ldr	r3, [r7, #4]
   28d70:	0018      	movs	r0, r3
   28d72:	4b09      	ldr	r3, [pc, #36]	; (28d98 <_usart_set_config+0x2d4>)
   28d74:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   28d76:	69bb      	ldr	r3, [r7, #24]
   28d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28d7a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   28d7c:	2300      	movs	r3, #0
}
   28d7e:	0018      	movs	r0, r3
   28d80:	46bd      	mov	sp, r7
   28d82:	b00a      	add	sp, #40	; 0x28
   28d84:	bdb0      	pop	{r4, r5, r7, pc}
   28d86:	46c0      	nop			; (mov r8, r8)
   28d88:	0002786d 	.word	0x0002786d
   28d8c:	0002a221 	.word	0x0002a221
   28d90:	000273e7 	.word	0x000273e7
   28d94:	00027465 	.word	0x00027465
   28d98:	00028aa1 	.word	0x00028aa1
   28d9c:	00028a61 	.word	0x00028a61

00028da0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   28da0:	b590      	push	{r4, r7, lr}
   28da2:	b093      	sub	sp, #76	; 0x4c
   28da4:	af00      	add	r7, sp, #0
   28da6:	60f8      	str	r0, [r7, #12]
   28da8:	60b9      	str	r1, [r7, #8]
   28daa:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   28dac:	233b      	movs	r3, #59	; 0x3b
   28dae:	18fb      	adds	r3, r7, r3
   28db0:	2200      	movs	r2, #0
   28db2:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   28db4:	68fb      	ldr	r3, [r7, #12]
   28db6:	68ba      	ldr	r2, [r7, #8]
   28db8:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   28dba:	68fb      	ldr	r3, [r7, #12]
   28dbc:	681b      	ldr	r3, [r3, #0]
   28dbe:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28dc0:	68fb      	ldr	r3, [r7, #12]
   28dc2:	681b      	ldr	r3, [r3, #0]
   28dc4:	0018      	movs	r0, r3
   28dc6:	4b86      	ldr	r3, [pc, #536]	; (28fe0 <usart_init+0x240>)
   28dc8:	4798      	blx	r3
   28dca:	0003      	movs	r3, r0
   28dcc:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28dd0:	3302      	adds	r3, #2
   28dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28dd6:	3314      	adds	r3, #20
   28dd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   28dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28ddc:	681b      	ldr	r3, [r3, #0]
   28dde:	2201      	movs	r2, #1
   28de0:	4013      	ands	r3, r2
   28de2:	d001      	beq.n	28de8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   28de4:	2305      	movs	r3, #5
   28de6:	e0f6      	b.n	28fd6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   28de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28dea:	681b      	ldr	r3, [r3, #0]
   28dec:	2202      	movs	r2, #2
   28dee:	4013      	ands	r3, r2
   28df0:	d001      	beq.n	28df6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   28df2:	231c      	movs	r3, #28
   28df4:	e0ef      	b.n	28fd6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28df6:	2201      	movs	r2, #1
   28df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28dfa:	409a      	lsls	r2, r3
   28dfc:	0013      	movs	r3, r2
   28dfe:	0019      	movs	r1, r3
   28e00:	2002      	movs	r0, #2
   28e02:	4b78      	ldr	r3, [pc, #480]	; (28fe4 <usart_init+0x244>)
   28e04:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28e06:	2324      	movs	r3, #36	; 0x24
   28e08:	18fb      	adds	r3, r7, r3
   28e0a:	0018      	movs	r0, r3
   28e0c:	4b76      	ldr	r3, [pc, #472]	; (28fe8 <usart_init+0x248>)
   28e0e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28e10:	687b      	ldr	r3, [r7, #4]
   28e12:	222d      	movs	r2, #45	; 0x2d
   28e14:	5c9a      	ldrb	r2, [r3, r2]
   28e16:	2324      	movs	r3, #36	; 0x24
   28e18:	18fb      	adds	r3, r7, r3
   28e1a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28e1e:	b2db      	uxtb	r3, r3
   28e20:	2224      	movs	r2, #36	; 0x24
   28e22:	18ba      	adds	r2, r7, r2
   28e24:	0011      	movs	r1, r2
   28e26:	0018      	movs	r0, r3
   28e28:	4b70      	ldr	r3, [pc, #448]	; (28fec <usart_init+0x24c>)
   28e2a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28e2e:	b2db      	uxtb	r3, r3
   28e30:	0018      	movs	r0, r3
   28e32:	4b6f      	ldr	r3, [pc, #444]	; (28ff0 <usart_init+0x250>)
   28e34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28e36:	687b      	ldr	r3, [r7, #4]
   28e38:	222d      	movs	r2, #45	; 0x2d
   28e3a:	5c9b      	ldrb	r3, [r3, r2]
   28e3c:	2100      	movs	r1, #0
   28e3e:	0018      	movs	r0, r3
   28e40:	4b6c      	ldr	r3, [pc, #432]	; (28ff4 <usart_init+0x254>)
   28e42:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   28e44:	687b      	ldr	r3, [r7, #4]
   28e46:	7ada      	ldrb	r2, [r3, #11]
   28e48:	68fb      	ldr	r3, [r7, #12]
   28e4a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   28e4c:	687b      	ldr	r3, [r7, #4]
   28e4e:	2224      	movs	r2, #36	; 0x24
   28e50:	5c9a      	ldrb	r2, [r3, r2]
   28e52:	68fb      	ldr	r3, [r7, #12]
   28e54:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   28e56:	687b      	ldr	r3, [r7, #4]
   28e58:	2225      	movs	r2, #37	; 0x25
   28e5a:	5c9a      	ldrb	r2, [r3, r2]
   28e5c:	68fb      	ldr	r3, [r7, #12]
   28e5e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   28e60:	687b      	ldr	r3, [r7, #4]
   28e62:	7eda      	ldrb	r2, [r3, #27]
   28e64:	68fb      	ldr	r3, [r7, #12]
   28e66:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   28e68:	687b      	ldr	r3, [r7, #4]
   28e6a:	7f1a      	ldrb	r2, [r3, #28]
   28e6c:	68fb      	ldr	r3, [r7, #12]
   28e6e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   28e70:	233b      	movs	r3, #59	; 0x3b
   28e72:	18fc      	adds	r4, r7, r3
   28e74:	687a      	ldr	r2, [r7, #4]
   28e76:	68fb      	ldr	r3, [r7, #12]
   28e78:	0011      	movs	r1, r2
   28e7a:	0018      	movs	r0, r3
   28e7c:	4b5e      	ldr	r3, [pc, #376]	; (28ff8 <usart_init+0x258>)
   28e7e:	4798      	blx	r3
   28e80:	0003      	movs	r3, r0
   28e82:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   28e84:	233b      	movs	r3, #59	; 0x3b
   28e86:	18fb      	adds	r3, r7, r3
   28e88:	781b      	ldrb	r3, [r3, #0]
   28e8a:	2b00      	cmp	r3, #0
   28e8c:	d003      	beq.n	28e96 <usart_init+0xf6>
		return status_code;
   28e8e:	233b      	movs	r3, #59	; 0x3b
   28e90:	18fb      	adds	r3, r7, r3
   28e92:	781b      	ldrb	r3, [r3, #0]
   28e94:	e09f      	b.n	28fd6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28e96:	2320      	movs	r3, #32
   28e98:	18fb      	adds	r3, r7, r3
   28e9a:	0018      	movs	r0, r3
   28e9c:	4b57      	ldr	r3, [pc, #348]	; (28ffc <usart_init+0x25c>)
   28e9e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28ea0:	2320      	movs	r3, #32
   28ea2:	18fb      	adds	r3, r7, r3
   28ea4:	2200      	movs	r2, #0
   28ea6:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28ea8:	2320      	movs	r3, #32
   28eaa:	18fb      	adds	r3, r7, r3
   28eac:	2200      	movs	r2, #0
   28eae:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28eb0:	687b      	ldr	r3, [r7, #4]
   28eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28eb4:	2310      	movs	r3, #16
   28eb6:	18fb      	adds	r3, r7, r3
   28eb8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28eba:	687b      	ldr	r3, [r7, #4]
   28ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   28ebe:	2310      	movs	r3, #16
   28ec0:	18fb      	adds	r3, r7, r3
   28ec2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28ec4:	687b      	ldr	r3, [r7, #4]
   28ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   28ec8:	2310      	movs	r3, #16
   28eca:	18fb      	adds	r3, r7, r3
   28ecc:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28ece:	687b      	ldr	r3, [r7, #4]
   28ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   28ed2:	2310      	movs	r3, #16
   28ed4:	18fb      	adds	r3, r7, r3
   28ed6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28ed8:	2347      	movs	r3, #71	; 0x47
   28eda:	18fb      	adds	r3, r7, r3
   28edc:	2200      	movs	r2, #0
   28ede:	701a      	strb	r2, [r3, #0]
   28ee0:	e02c      	b.n	28f3c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28ee2:	2347      	movs	r3, #71	; 0x47
   28ee4:	18fb      	adds	r3, r7, r3
   28ee6:	781a      	ldrb	r2, [r3, #0]
   28ee8:	2310      	movs	r3, #16
   28eea:	18fb      	adds	r3, r7, r3
   28eec:	0092      	lsls	r2, r2, #2
   28eee:	58d3      	ldr	r3, [r2, r3]
   28ef0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28ef4:	2b00      	cmp	r3, #0
   28ef6:	d109      	bne.n	28f0c <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28ef8:	2347      	movs	r3, #71	; 0x47
   28efa:	18fb      	adds	r3, r7, r3
   28efc:	781a      	ldrb	r2, [r3, #0]
   28efe:	68bb      	ldr	r3, [r7, #8]
   28f00:	0011      	movs	r1, r2
   28f02:	0018      	movs	r0, r3
   28f04:	4b3e      	ldr	r3, [pc, #248]	; (29000 <usart_init+0x260>)
   28f06:	4798      	blx	r3
   28f08:	0003      	movs	r3, r0
   28f0a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28f0e:	3301      	adds	r3, #1
   28f10:	d00d      	beq.n	28f2e <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28f14:	b2da      	uxtb	r2, r3
   28f16:	2320      	movs	r3, #32
   28f18:	18fb      	adds	r3, r7, r3
   28f1a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28f1e:	0c1b      	lsrs	r3, r3, #16
   28f20:	b2db      	uxtb	r3, r3
   28f22:	2220      	movs	r2, #32
   28f24:	18ba      	adds	r2, r7, r2
   28f26:	0011      	movs	r1, r2
   28f28:	0018      	movs	r0, r3
   28f2a:	4b36      	ldr	r3, [pc, #216]	; (29004 <usart_init+0x264>)
   28f2c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28f2e:	2347      	movs	r3, #71	; 0x47
   28f30:	18fb      	adds	r3, r7, r3
   28f32:	781a      	ldrb	r2, [r3, #0]
   28f34:	2347      	movs	r3, #71	; 0x47
   28f36:	18fb      	adds	r3, r7, r3
   28f38:	3201      	adds	r2, #1
   28f3a:	701a      	strb	r2, [r3, #0]
   28f3c:	2347      	movs	r3, #71	; 0x47
   28f3e:	18fb      	adds	r3, r7, r3
   28f40:	781b      	ldrb	r3, [r3, #0]
   28f42:	2b03      	cmp	r3, #3
   28f44:	d9cd      	bls.n	28ee2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28f46:	2300      	movs	r3, #0
   28f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   28f4a:	e00a      	b.n	28f62 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   28f4c:	68fa      	ldr	r2, [r7, #12]
   28f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28f50:	3302      	adds	r3, #2
   28f52:	009b      	lsls	r3, r3, #2
   28f54:	18d3      	adds	r3, r2, r3
   28f56:	3304      	adds	r3, #4
   28f58:	2200      	movs	r2, #0
   28f5a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   28f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28f5e:	3301      	adds	r3, #1
   28f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   28f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28f64:	2b05      	cmp	r3, #5
   28f66:	d9f1      	bls.n	28f4c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   28f68:	68fb      	ldr	r3, [r7, #12]
   28f6a:	2200      	movs	r2, #0
   28f6c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   28f6e:	68fb      	ldr	r3, [r7, #12]
   28f70:	2200      	movs	r2, #0
   28f72:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   28f74:	68fb      	ldr	r3, [r7, #12]
   28f76:	2200      	movs	r2, #0
   28f78:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   28f7a:	68fb      	ldr	r3, [r7, #12]
   28f7c:	2200      	movs	r2, #0
   28f7e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   28f80:	68fb      	ldr	r3, [r7, #12]
   28f82:	2230      	movs	r2, #48	; 0x30
   28f84:	2100      	movs	r1, #0
   28f86:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   28f88:	68fb      	ldr	r3, [r7, #12]
   28f8a:	2231      	movs	r2, #49	; 0x31
   28f8c:	2100      	movs	r1, #0
   28f8e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   28f90:	68fb      	ldr	r3, [r7, #12]
   28f92:	2232      	movs	r2, #50	; 0x32
   28f94:	2100      	movs	r1, #0
   28f96:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   28f98:	68fb      	ldr	r3, [r7, #12]
   28f9a:	2233      	movs	r2, #51	; 0x33
   28f9c:	2100      	movs	r1, #0
   28f9e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   28fa0:	68fb      	ldr	r3, [r7, #12]
   28fa2:	681b      	ldr	r3, [r3, #0]
   28fa4:	2227      	movs	r2, #39	; 0x27
   28fa6:	18bc      	adds	r4, r7, r2
   28fa8:	0018      	movs	r0, r3
   28faa:	4b0d      	ldr	r3, [pc, #52]	; (28fe0 <usart_init+0x240>)
   28fac:	4798      	blx	r3
   28fae:	0003      	movs	r3, r0
   28fb0:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   28fb2:	4a15      	ldr	r2, [pc, #84]	; (29008 <usart_init+0x268>)
   28fb4:	2327      	movs	r3, #39	; 0x27
   28fb6:	18fb      	adds	r3, r7, r3
   28fb8:	781b      	ldrb	r3, [r3, #0]
   28fba:	0011      	movs	r1, r2
   28fbc:	0018      	movs	r0, r3
   28fbe:	4b13      	ldr	r3, [pc, #76]	; (2900c <usart_init+0x26c>)
   28fc0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28fc2:	2327      	movs	r3, #39	; 0x27
   28fc4:	18fb      	adds	r3, r7, r3
   28fc6:	781a      	ldrb	r2, [r3, #0]
   28fc8:	4b11      	ldr	r3, [pc, #68]	; (29010 <usart_init+0x270>)
   28fca:	0092      	lsls	r2, r2, #2
   28fcc:	68f9      	ldr	r1, [r7, #12]
   28fce:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   28fd0:	233b      	movs	r3, #59	; 0x3b
   28fd2:	18fb      	adds	r3, r7, r3
   28fd4:	781b      	ldrb	r3, [r3, #0]
}
   28fd6:	0018      	movs	r0, r3
   28fd8:	46bd      	mov	sp, r7
   28fda:	b013      	add	sp, #76	; 0x4c
   28fdc:	bd90      	pop	{r4, r7, pc}
   28fde:	46c0      	nop			; (mov r8, r8)
   28fe0:	0002786d 	.word	0x0002786d
   28fe4:	000289dd 	.word	0x000289dd
   28fe8:	000289c5 	.word	0x000289c5
   28fec:	0002a0fd 	.word	0x0002a0fd
   28ff0:	0002a141 	.word	0x0002a141
   28ff4:	00027625 	.word	0x00027625
   28ff8:	00028ac5 	.word	0x00028ac5
   28ffc:	00028a39 	.word	0x00028a39
   29000:	000276b1 	.word	0x000276b1
   29004:	0002a45d 	.word	0x0002a45d
   29008:	0002927d 	.word	0x0002927d
   2900c:	000278d1 	.word	0x000278d1
   29010:	20005794 	.word	0x20005794

00029014 <system_interrupt_enter_critical_section>:
{
   29014:	b580      	push	{r7, lr}
   29016:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29018:	4b02      	ldr	r3, [pc, #8]	; (29024 <system_interrupt_enter_critical_section+0x10>)
   2901a:	4798      	blx	r3
}
   2901c:	46c0      	nop			; (mov r8, r8)
   2901e:	46bd      	mov	sp, r7
   29020:	bd80      	pop	{r7, pc}
   29022:	46c0      	nop			; (mov r8, r8)
   29024:	00026469 	.word	0x00026469

00029028 <system_interrupt_leave_critical_section>:
{
   29028:	b580      	push	{r7, lr}
   2902a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2902c:	4b02      	ldr	r3, [pc, #8]	; (29038 <system_interrupt_leave_critical_section+0x10>)
   2902e:	4798      	blx	r3
}
   29030:	46c0      	nop			; (mov r8, r8)
   29032:	46bd      	mov	sp, r7
   29034:	bd80      	pop	{r7, pc}
   29036:	46c0      	nop			; (mov r8, r8)
   29038:	000264bd 	.word	0x000264bd

0002903c <usart_is_syncing>:
{
   2903c:	b580      	push	{r7, lr}
   2903e:	b084      	sub	sp, #16
   29040:	af00      	add	r7, sp, #0
   29042:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29044:	687b      	ldr	r3, [r7, #4]
   29046:	681b      	ldr	r3, [r3, #0]
   29048:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2904a:	68fb      	ldr	r3, [r7, #12]
   2904c:	69db      	ldr	r3, [r3, #28]
   2904e:	1e5a      	subs	r2, r3, #1
   29050:	4193      	sbcs	r3, r2
   29052:	b2db      	uxtb	r3, r3
}
   29054:	0018      	movs	r0, r3
   29056:	46bd      	mov	sp, r7
   29058:	b004      	add	sp, #16
   2905a:	bd80      	pop	{r7, pc}

0002905c <_usart_wait_for_sync>:
{
   2905c:	b580      	push	{r7, lr}
   2905e:	b082      	sub	sp, #8
   29060:	af00      	add	r7, sp, #0
   29062:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   29064:	46c0      	nop			; (mov r8, r8)
   29066:	687b      	ldr	r3, [r7, #4]
   29068:	0018      	movs	r0, r3
   2906a:	4b04      	ldr	r3, [pc, #16]	; (2907c <_usart_wait_for_sync+0x20>)
   2906c:	4798      	blx	r3
   2906e:	1e03      	subs	r3, r0, #0
   29070:	d1f9      	bne.n	29066 <_usart_wait_for_sync+0xa>
}
   29072:	46c0      	nop			; (mov r8, r8)
   29074:	46bd      	mov	sp, r7
   29076:	b002      	add	sp, #8
   29078:	bd80      	pop	{r7, pc}
   2907a:	46c0      	nop			; (mov r8, r8)
   2907c:	0002903d 	.word	0x0002903d

00029080 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29080:	b580      	push	{r7, lr}
   29082:	b086      	sub	sp, #24
   29084:	af00      	add	r7, sp, #0
   29086:	60f8      	str	r0, [r7, #12]
   29088:	60b9      	str	r1, [r7, #8]
   2908a:	1dbb      	adds	r3, r7, #6
   2908c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2908e:	68fb      	ldr	r3, [r7, #12]
   29090:	681b      	ldr	r3, [r3, #0]
   29092:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29094:	4b0f      	ldr	r3, [pc, #60]	; (290d4 <_usart_write_buffer+0x54>)
   29096:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   29098:	68fb      	ldr	r3, [r7, #12]
   2909a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2909c:	b29b      	uxth	r3, r3
   2909e:	2b00      	cmp	r3, #0
   290a0:	d003      	beq.n	290aa <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   290a2:	4b0d      	ldr	r3, [pc, #52]	; (290d8 <_usart_write_buffer+0x58>)
   290a4:	4798      	blx	r3
		return STATUS_BUSY;
   290a6:	2305      	movs	r3, #5
   290a8:	e010      	b.n	290cc <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   290aa:	68fb      	ldr	r3, [r7, #12]
   290ac:	1dba      	adds	r2, r7, #6
   290ae:	8812      	ldrh	r2, [r2, #0]
   290b0:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   290b2:	4b09      	ldr	r3, [pc, #36]	; (290d8 <_usart_write_buffer+0x58>)
   290b4:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   290b6:	68fb      	ldr	r3, [r7, #12]
   290b8:	68ba      	ldr	r2, [r7, #8]
   290ba:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   290bc:	68fb      	ldr	r3, [r7, #12]
   290be:	2233      	movs	r2, #51	; 0x33
   290c0:	2105      	movs	r1, #5
   290c2:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   290c4:	697b      	ldr	r3, [r7, #20]
   290c6:	2201      	movs	r2, #1
   290c8:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   290ca:	2300      	movs	r3, #0
}
   290cc:	0018      	movs	r0, r3
   290ce:	46bd      	mov	sp, r7
   290d0:	b006      	add	sp, #24
   290d2:	bd80      	pop	{r7, pc}
   290d4:	00029015 	.word	0x00029015
   290d8:	00029029 	.word	0x00029029

000290dc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   290dc:	b580      	push	{r7, lr}
   290de:	b086      	sub	sp, #24
   290e0:	af00      	add	r7, sp, #0
   290e2:	60f8      	str	r0, [r7, #12]
   290e4:	60b9      	str	r1, [r7, #8]
   290e6:	1dbb      	adds	r3, r7, #6
   290e8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   290ea:	68fb      	ldr	r3, [r7, #12]
   290ec:	681b      	ldr	r3, [r3, #0]
   290ee:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   290f0:	4b16      	ldr	r3, [pc, #88]	; (2914c <_usart_read_buffer+0x70>)
   290f2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   290f4:	68fb      	ldr	r3, [r7, #12]
   290f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   290f8:	b29b      	uxth	r3, r3
   290fa:	2b00      	cmp	r3, #0
   290fc:	d003      	beq.n	29106 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   290fe:	4b14      	ldr	r3, [pc, #80]	; (29150 <_usart_read_buffer+0x74>)
   29100:	4798      	blx	r3
		return STATUS_BUSY;
   29102:	2305      	movs	r3, #5
   29104:	e01e      	b.n	29144 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   29106:	68fb      	ldr	r3, [r7, #12]
   29108:	1dba      	adds	r2, r7, #6
   2910a:	8812      	ldrh	r2, [r2, #0]
   2910c:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   2910e:	4b10      	ldr	r3, [pc, #64]	; (29150 <_usart_read_buffer+0x74>)
   29110:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   29112:	68fb      	ldr	r3, [r7, #12]
   29114:	68ba      	ldr	r2, [r7, #8]
   29116:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   29118:	68fb      	ldr	r3, [r7, #12]
   2911a:	2232      	movs	r2, #50	; 0x32
   2911c:	2105      	movs	r1, #5
   2911e:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29120:	697b      	ldr	r3, [r7, #20]
   29122:	2204      	movs	r2, #4
   29124:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   29126:	68fb      	ldr	r3, [r7, #12]
   29128:	7a1b      	ldrb	r3, [r3, #8]
   2912a:	2b00      	cmp	r3, #0
   2912c:	d002      	beq.n	29134 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   2912e:	697b      	ldr	r3, [r7, #20]
   29130:	2220      	movs	r2, #32
   29132:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   29134:	68fb      	ldr	r3, [r7, #12]
   29136:	7a5b      	ldrb	r3, [r3, #9]
   29138:	2b00      	cmp	r3, #0
   2913a:	d002      	beq.n	29142 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   2913c:	697b      	ldr	r3, [r7, #20]
   2913e:	2208      	movs	r2, #8
   29140:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   29142:	2300      	movs	r3, #0
}
   29144:	0018      	movs	r0, r3
   29146:	46bd      	mov	sp, r7
   29148:	b006      	add	sp, #24
   2914a:	bd80      	pop	{r7, pc}
   2914c:	00029015 	.word	0x00029015
   29150:	00029029 	.word	0x00029029

00029154 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   29154:	b580      	push	{r7, lr}
   29156:	b084      	sub	sp, #16
   29158:	af00      	add	r7, sp, #0
   2915a:	60f8      	str	r0, [r7, #12]
   2915c:	60b9      	str	r1, [r7, #8]
   2915e:	1dfb      	adds	r3, r7, #7
   29160:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29162:	1dfb      	adds	r3, r7, #7
   29164:	781b      	ldrb	r3, [r3, #0]
   29166:	68fa      	ldr	r2, [r7, #12]
   29168:	3302      	adds	r3, #2
   2916a:	009b      	lsls	r3, r3, #2
   2916c:	18d3      	adds	r3, r2, r3
   2916e:	3304      	adds	r3, #4
   29170:	68ba      	ldr	r2, [r7, #8]
   29172:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   29174:	68fb      	ldr	r3, [r7, #12]
   29176:	2230      	movs	r2, #48	; 0x30
   29178:	5c9b      	ldrb	r3, [r3, r2]
   2917a:	b25a      	sxtb	r2, r3
   2917c:	1dfb      	adds	r3, r7, #7
   2917e:	781b      	ldrb	r3, [r3, #0]
   29180:	2101      	movs	r1, #1
   29182:	4099      	lsls	r1, r3
   29184:	000b      	movs	r3, r1
   29186:	b25b      	sxtb	r3, r3
   29188:	4313      	orrs	r3, r2
   2918a:	b25b      	sxtb	r3, r3
   2918c:	b2d9      	uxtb	r1, r3
   2918e:	68fb      	ldr	r3, [r7, #12]
   29190:	2230      	movs	r2, #48	; 0x30
   29192:	5499      	strb	r1, [r3, r2]
}
   29194:	46c0      	nop			; (mov r8, r8)
   29196:	46bd      	mov	sp, r7
   29198:	b004      	add	sp, #16
   2919a:	bd80      	pop	{r7, pc}

0002919c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2919c:	b580      	push	{r7, lr}
   2919e:	b084      	sub	sp, #16
   291a0:	af00      	add	r7, sp, #0
   291a2:	60f8      	str	r0, [r7, #12]
   291a4:	60b9      	str	r1, [r7, #8]
   291a6:	1dbb      	adds	r3, r7, #6
   291a8:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   291aa:	1dbb      	adds	r3, r7, #6
   291ac:	881b      	ldrh	r3, [r3, #0]
   291ae:	2b00      	cmp	r3, #0
   291b0:	d101      	bne.n	291b6 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   291b2:	2317      	movs	r3, #23
   291b4:	e010      	b.n	291d8 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   291b6:	68fb      	ldr	r3, [r7, #12]
   291b8:	79db      	ldrb	r3, [r3, #7]
   291ba:	2201      	movs	r2, #1
   291bc:	4053      	eors	r3, r2
   291be:	b2db      	uxtb	r3, r3
   291c0:	2b00      	cmp	r3, #0
   291c2:	d001      	beq.n	291c8 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   291c4:	231c      	movs	r3, #28
   291c6:	e007      	b.n	291d8 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   291c8:	1dbb      	adds	r3, r7, #6
   291ca:	881a      	ldrh	r2, [r3, #0]
   291cc:	68b9      	ldr	r1, [r7, #8]
   291ce:	68fb      	ldr	r3, [r7, #12]
   291d0:	0018      	movs	r0, r3
   291d2:	4b03      	ldr	r3, [pc, #12]	; (291e0 <usart_write_buffer_job+0x44>)
   291d4:	4798      	blx	r3
   291d6:	0003      	movs	r3, r0
}
   291d8:	0018      	movs	r0, r3
   291da:	46bd      	mov	sp, r7
   291dc:	b004      	add	sp, #16
   291de:	bd80      	pop	{r7, pc}
   291e0:	00029081 	.word	0x00029081

000291e4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   291e4:	b580      	push	{r7, lr}
   291e6:	b084      	sub	sp, #16
   291e8:	af00      	add	r7, sp, #0
   291ea:	60f8      	str	r0, [r7, #12]
   291ec:	60b9      	str	r1, [r7, #8]
   291ee:	1dbb      	adds	r3, r7, #6
   291f0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   291f2:	1dbb      	adds	r3, r7, #6
   291f4:	881b      	ldrh	r3, [r3, #0]
   291f6:	2b00      	cmp	r3, #0
   291f8:	d101      	bne.n	291fe <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   291fa:	2317      	movs	r3, #23
   291fc:	e010      	b.n	29220 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   291fe:	68fb      	ldr	r3, [r7, #12]
   29200:	799b      	ldrb	r3, [r3, #6]
   29202:	2201      	movs	r2, #1
   29204:	4053      	eors	r3, r2
   29206:	b2db      	uxtb	r3, r3
   29208:	2b00      	cmp	r3, #0
   2920a:	d001      	beq.n	29210 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   2920c:	231c      	movs	r3, #28
   2920e:	e007      	b.n	29220 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29210:	1dbb      	adds	r3, r7, #6
   29212:	881a      	ldrh	r2, [r3, #0]
   29214:	68b9      	ldr	r1, [r7, #8]
   29216:	68fb      	ldr	r3, [r7, #12]
   29218:	0018      	movs	r0, r3
   2921a:	4b03      	ldr	r3, [pc, #12]	; (29228 <usart_read_buffer_job+0x44>)
   2921c:	4798      	blx	r3
   2921e:	0003      	movs	r3, r0
}
   29220:	0018      	movs	r0, r3
   29222:	46bd      	mov	sp, r7
   29224:	b004      	add	sp, #16
   29226:	bd80      	pop	{r7, pc}
   29228:	000290dd 	.word	0x000290dd

0002922c <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   2922c:	b580      	push	{r7, lr}
   2922e:	b084      	sub	sp, #16
   29230:	af00      	add	r7, sp, #0
   29232:	6078      	str	r0, [r7, #4]
   29234:	000a      	movs	r2, r1
   29236:	1cfb      	adds	r3, r7, #3
   29238:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2923a:	1cfb      	adds	r3, r7, #3
   2923c:	781b      	ldrb	r3, [r3, #0]
   2923e:	2b00      	cmp	r3, #0
   29240:	d002      	beq.n	29248 <usart_get_job_status+0x1c>
   29242:	2b01      	cmp	r3, #1
   29244:	d007      	beq.n	29256 <usart_get_job_status+0x2a>
   29246:	e00d      	b.n	29264 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29248:	230f      	movs	r3, #15
   2924a:	18fb      	adds	r3, r7, r3
   2924c:	687a      	ldr	r2, [r7, #4]
   2924e:	2132      	movs	r1, #50	; 0x32
   29250:	5c52      	ldrb	r2, [r2, r1]
   29252:	701a      	strb	r2, [r3, #0]
			break;
   29254:	e00b      	b.n	2926e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29256:	230f      	movs	r3, #15
   29258:	18fb      	adds	r3, r7, r3
   2925a:	687a      	ldr	r2, [r7, #4]
   2925c:	2133      	movs	r1, #51	; 0x33
   2925e:	5c52      	ldrb	r2, [r2, r1]
   29260:	701a      	strb	r2, [r3, #0]
			break;
   29262:	e004      	b.n	2926e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29264:	230f      	movs	r3, #15
   29266:	18fb      	adds	r3, r7, r3
   29268:	2217      	movs	r2, #23
   2926a:	701a      	strb	r2, [r3, #0]
			break;
   2926c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2926e:	230f      	movs	r3, #15
   29270:	18fb      	adds	r3, r7, r3
   29272:	781b      	ldrb	r3, [r3, #0]
}
   29274:	0018      	movs	r0, r3
   29276:	46bd      	mov	sp, r7
   29278:	b004      	add	sp, #16
   2927a:	bd80      	pop	{r7, pc}

0002927c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2927c:	b580      	push	{r7, lr}
   2927e:	b088      	sub	sp, #32
   29280:	af00      	add	r7, sp, #0
   29282:	0002      	movs	r2, r0
   29284:	1dfb      	adds	r3, r7, #7
   29286:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29288:	1dfb      	adds	r3, r7, #7
   2928a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2928c:	4ba3      	ldr	r3, [pc, #652]	; (2951c <_usart_interrupt_handler+0x2a0>)
   2928e:	0092      	lsls	r2, r2, #2
   29290:	58d3      	ldr	r3, [r2, r3]
   29292:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29294:	69bb      	ldr	r3, [r7, #24]
   29296:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29298:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2929a:	69bb      	ldr	r3, [r7, #24]
   2929c:	0018      	movs	r0, r3
   2929e:	4ba0      	ldr	r3, [pc, #640]	; (29520 <_usart_interrupt_handler+0x2a4>)
   292a0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   292a2:	697b      	ldr	r3, [r7, #20]
   292a4:	7e1b      	ldrb	r3, [r3, #24]
   292a6:	b2da      	uxtb	r2, r3
   292a8:	2312      	movs	r3, #18
   292aa:	18fb      	adds	r3, r7, r3
   292ac:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   292ae:	697b      	ldr	r3, [r7, #20]
   292b0:	7d9b      	ldrb	r3, [r3, #22]
   292b2:	b2db      	uxtb	r3, r3
   292b4:	b29a      	uxth	r2, r3
   292b6:	2312      	movs	r3, #18
   292b8:	18fb      	adds	r3, r7, r3
   292ba:	2112      	movs	r1, #18
   292bc:	1879      	adds	r1, r7, r1
   292be:	8809      	ldrh	r1, [r1, #0]
   292c0:	400a      	ands	r2, r1
   292c2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   292c4:	69bb      	ldr	r3, [r7, #24]
   292c6:	2230      	movs	r2, #48	; 0x30
   292c8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   292ca:	69ba      	ldr	r2, [r7, #24]
   292cc:	2131      	movs	r1, #49	; 0x31
   292ce:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   292d0:	4013      	ands	r3, r2
   292d2:	b2da      	uxtb	r2, r3
   292d4:	2310      	movs	r3, #16
   292d6:	18fb      	adds	r3, r7, r3
   292d8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   292da:	2312      	movs	r3, #18
   292dc:	18fb      	adds	r3, r7, r3
   292de:	881b      	ldrh	r3, [r3, #0]
   292e0:	2201      	movs	r2, #1
   292e2:	4013      	ands	r3, r2
   292e4:	d044      	beq.n	29370 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   292e6:	69bb      	ldr	r3, [r7, #24]
   292e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   292ea:	b29b      	uxth	r3, r3
   292ec:	2b00      	cmp	r3, #0
   292ee:	d03c      	beq.n	2936a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   292f0:	69bb      	ldr	r3, [r7, #24]
   292f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   292f4:	781b      	ldrb	r3, [r3, #0]
   292f6:	b2da      	uxtb	r2, r3
   292f8:	231c      	movs	r3, #28
   292fa:	18fb      	adds	r3, r7, r3
   292fc:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   292fe:	69bb      	ldr	r3, [r7, #24]
   29300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29302:	1c5a      	adds	r2, r3, #1
   29304:	69bb      	ldr	r3, [r7, #24]
   29306:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29308:	69bb      	ldr	r3, [r7, #24]
   2930a:	795b      	ldrb	r3, [r3, #5]
   2930c:	2b01      	cmp	r3, #1
   2930e:	d113      	bne.n	29338 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29310:	69bb      	ldr	r3, [r7, #24]
   29312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29314:	781b      	ldrb	r3, [r3, #0]
   29316:	b2db      	uxtb	r3, r3
   29318:	021b      	lsls	r3, r3, #8
   2931a:	b21a      	sxth	r2, r3
   2931c:	231c      	movs	r3, #28
   2931e:	18fb      	adds	r3, r7, r3
   29320:	2100      	movs	r1, #0
   29322:	5e5b      	ldrsh	r3, [r3, r1]
   29324:	4313      	orrs	r3, r2
   29326:	b21a      	sxth	r2, r3
   29328:	231c      	movs	r3, #28
   2932a:	18fb      	adds	r3, r7, r3
   2932c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   2932e:	69bb      	ldr	r3, [r7, #24]
   29330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29332:	1c5a      	adds	r2, r3, #1
   29334:	69bb      	ldr	r3, [r7, #24]
   29336:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   29338:	231c      	movs	r3, #28
   2933a:	18fb      	adds	r3, r7, r3
   2933c:	881b      	ldrh	r3, [r3, #0]
   2933e:	05db      	lsls	r3, r3, #23
   29340:	0ddb      	lsrs	r3, r3, #23
   29342:	b29a      	uxth	r2, r3
   29344:	697b      	ldr	r3, [r7, #20]
   29346:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   29348:	69bb      	ldr	r3, [r7, #24]
   2934a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2934c:	b29b      	uxth	r3, r3
   2934e:	3b01      	subs	r3, #1
   29350:	b29b      	uxth	r3, r3
   29352:	69ba      	ldr	r2, [r7, #24]
   29354:	1c19      	adds	r1, r3, #0
   29356:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29358:	2b00      	cmp	r3, #0
   2935a:	d109      	bne.n	29370 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2935c:	697b      	ldr	r3, [r7, #20]
   2935e:	2201      	movs	r2, #1
   29360:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   29362:	697b      	ldr	r3, [r7, #20]
   29364:	2202      	movs	r2, #2
   29366:	759a      	strb	r2, [r3, #22]
   29368:	e002      	b.n	29370 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   2936a:	697b      	ldr	r3, [r7, #20]
   2936c:	2201      	movs	r2, #1
   2936e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   29370:	2312      	movs	r3, #18
   29372:	18fb      	adds	r3, r7, r3
   29374:	881b      	ldrh	r3, [r3, #0]
   29376:	2202      	movs	r2, #2
   29378:	4013      	ands	r3, r2
   2937a:	d011      	beq.n	293a0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   2937c:	697b      	ldr	r3, [r7, #20]
   2937e:	2202      	movs	r2, #2
   29380:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   29382:	69bb      	ldr	r3, [r7, #24]
   29384:	2233      	movs	r2, #51	; 0x33
   29386:	2100      	movs	r1, #0
   29388:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   2938a:	2310      	movs	r3, #16
   2938c:	18fb      	adds	r3, r7, r3
   2938e:	881b      	ldrh	r3, [r3, #0]
   29390:	2201      	movs	r2, #1
   29392:	4013      	ands	r3, r2
   29394:	d004      	beq.n	293a0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   29396:	69bb      	ldr	r3, [r7, #24]
   29398:	68db      	ldr	r3, [r3, #12]
   2939a:	69ba      	ldr	r2, [r7, #24]
   2939c:	0010      	movs	r0, r2
   2939e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   293a0:	2312      	movs	r3, #18
   293a2:	18fb      	adds	r3, r7, r3
   293a4:	881b      	ldrh	r3, [r3, #0]
   293a6:	2204      	movs	r2, #4
   293a8:	4013      	ands	r3, r2
   293aa:	d100      	bne.n	293ae <_usart_interrupt_handler+0x132>
   293ac:	e0bd      	b.n	2952a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   293ae:	69bb      	ldr	r3, [r7, #24]
   293b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   293b2:	b29b      	uxth	r3, r3
   293b4:	2b00      	cmp	r3, #0
   293b6:	d100      	bne.n	293ba <_usart_interrupt_handler+0x13e>
   293b8:	e0b4      	b.n	29524 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   293ba:	697b      	ldr	r3, [r7, #20]
   293bc:	8b5b      	ldrh	r3, [r3, #26]
   293be:	b29b      	uxth	r3, r3
   293c0:	b2da      	uxtb	r2, r3
   293c2:	231f      	movs	r3, #31
   293c4:	18fb      	adds	r3, r7, r3
   293c6:	213f      	movs	r1, #63	; 0x3f
   293c8:	400a      	ands	r2, r1
   293ca:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   293cc:	231f      	movs	r3, #31
   293ce:	18fb      	adds	r3, r7, r3
   293d0:	781b      	ldrb	r3, [r3, #0]
   293d2:	2208      	movs	r2, #8
   293d4:	4013      	ands	r3, r2
   293d6:	d007      	beq.n	293e8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   293d8:	231f      	movs	r3, #31
   293da:	18fb      	adds	r3, r7, r3
   293dc:	221f      	movs	r2, #31
   293de:	18ba      	adds	r2, r7, r2
   293e0:	7812      	ldrb	r2, [r2, #0]
   293e2:	2108      	movs	r1, #8
   293e4:	438a      	bics	r2, r1
   293e6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   293e8:	231f      	movs	r3, #31
   293ea:	18fb      	adds	r3, r7, r3
   293ec:	781b      	ldrb	r3, [r3, #0]
   293ee:	2b00      	cmp	r3, #0
   293f0:	d050      	beq.n	29494 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   293f2:	231f      	movs	r3, #31
   293f4:	18fb      	adds	r3, r7, r3
   293f6:	781b      	ldrb	r3, [r3, #0]
   293f8:	2202      	movs	r2, #2
   293fa:	4013      	ands	r3, r2
   293fc:	d007      	beq.n	2940e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   293fe:	69bb      	ldr	r3, [r7, #24]
   29400:	2232      	movs	r2, #50	; 0x32
   29402:	211a      	movs	r1, #26
   29404:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   29406:	697b      	ldr	r3, [r7, #20]
   29408:	2202      	movs	r2, #2
   2940a:	835a      	strh	r2, [r3, #26]
   2940c:	e036      	b.n	2947c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   2940e:	231f      	movs	r3, #31
   29410:	18fb      	adds	r3, r7, r3
   29412:	781b      	ldrb	r3, [r3, #0]
   29414:	2204      	movs	r2, #4
   29416:	4013      	ands	r3, r2
   29418:	d007      	beq.n	2942a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   2941a:	69bb      	ldr	r3, [r7, #24]
   2941c:	2232      	movs	r2, #50	; 0x32
   2941e:	211e      	movs	r1, #30
   29420:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29422:	697b      	ldr	r3, [r7, #20]
   29424:	2204      	movs	r2, #4
   29426:	835a      	strh	r2, [r3, #26]
   29428:	e028      	b.n	2947c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   2942a:	231f      	movs	r3, #31
   2942c:	18fb      	adds	r3, r7, r3
   2942e:	781b      	ldrb	r3, [r3, #0]
   29430:	2201      	movs	r2, #1
   29432:	4013      	ands	r3, r2
   29434:	d007      	beq.n	29446 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29436:	69bb      	ldr	r3, [r7, #24]
   29438:	2232      	movs	r2, #50	; 0x32
   2943a:	2113      	movs	r1, #19
   2943c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   2943e:	697b      	ldr	r3, [r7, #20]
   29440:	2201      	movs	r2, #1
   29442:	835a      	strh	r2, [r3, #26]
   29444:	e01a      	b.n	2947c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   29446:	231f      	movs	r3, #31
   29448:	18fb      	adds	r3, r7, r3
   2944a:	781b      	ldrb	r3, [r3, #0]
   2944c:	2210      	movs	r2, #16
   2944e:	4013      	ands	r3, r2
   29450:	d007      	beq.n	29462 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   29452:	69bb      	ldr	r3, [r7, #24]
   29454:	2232      	movs	r2, #50	; 0x32
   29456:	2142      	movs	r1, #66	; 0x42
   29458:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2945a:	697b      	ldr	r3, [r7, #20]
   2945c:	2210      	movs	r2, #16
   2945e:	835a      	strh	r2, [r3, #26]
   29460:	e00c      	b.n	2947c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   29462:	231f      	movs	r3, #31
   29464:	18fb      	adds	r3, r7, r3
   29466:	781b      	ldrb	r3, [r3, #0]
   29468:	2220      	movs	r2, #32
   2946a:	4013      	ands	r3, r2
   2946c:	d006      	beq.n	2947c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2946e:	69bb      	ldr	r3, [r7, #24]
   29470:	2232      	movs	r2, #50	; 0x32
   29472:	2141      	movs	r1, #65	; 0x41
   29474:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   29476:	697b      	ldr	r3, [r7, #20]
   29478:	2220      	movs	r2, #32
   2947a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2947c:	2310      	movs	r3, #16
   2947e:	18fb      	adds	r3, r7, r3
   29480:	881b      	ldrh	r3, [r3, #0]
   29482:	2204      	movs	r2, #4
   29484:	4013      	ands	r3, r2
				if (callback_status
   29486:	d050      	beq.n	2952a <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   29488:	69bb      	ldr	r3, [r7, #24]
   2948a:	695b      	ldr	r3, [r3, #20]
   2948c:	69ba      	ldr	r2, [r7, #24]
   2948e:	0010      	movs	r0, r2
   29490:	4798      	blx	r3
   29492:	e04a      	b.n	2952a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29494:	697b      	ldr	r3, [r7, #20]
   29496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   29498:	b29a      	uxth	r2, r3
   2949a:	230e      	movs	r3, #14
   2949c:	18fb      	adds	r3, r7, r3
   2949e:	05d2      	lsls	r2, r2, #23
   294a0:	0dd2      	lsrs	r2, r2, #23
   294a2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   294a4:	69bb      	ldr	r3, [r7, #24]
   294a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   294a8:	220e      	movs	r2, #14
   294aa:	18ba      	adds	r2, r7, r2
   294ac:	8812      	ldrh	r2, [r2, #0]
   294ae:	b2d2      	uxtb	r2, r2
   294b0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   294b2:	69bb      	ldr	r3, [r7, #24]
   294b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   294b6:	1c5a      	adds	r2, r3, #1
   294b8:	69bb      	ldr	r3, [r7, #24]
   294ba:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   294bc:	69bb      	ldr	r3, [r7, #24]
   294be:	795b      	ldrb	r3, [r3, #5]
   294c0:	2b01      	cmp	r3, #1
   294c2:	d10d      	bne.n	294e0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   294c4:	69bb      	ldr	r3, [r7, #24]
   294c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   294c8:	220e      	movs	r2, #14
   294ca:	18ba      	adds	r2, r7, r2
   294cc:	8812      	ldrh	r2, [r2, #0]
   294ce:	0a12      	lsrs	r2, r2, #8
   294d0:	b292      	uxth	r2, r2
   294d2:	b2d2      	uxtb	r2, r2
   294d4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   294d6:	69bb      	ldr	r3, [r7, #24]
   294d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   294da:	1c5a      	adds	r2, r3, #1
   294dc:	69bb      	ldr	r3, [r7, #24]
   294de:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   294e0:	69bb      	ldr	r3, [r7, #24]
   294e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   294e4:	b29b      	uxth	r3, r3
   294e6:	3b01      	subs	r3, #1
   294e8:	b29b      	uxth	r3, r3
   294ea:	69ba      	ldr	r2, [r7, #24]
   294ec:	1c19      	adds	r1, r3, #0
   294ee:	8591      	strh	r1, [r2, #44]	; 0x2c
   294f0:	2b00      	cmp	r3, #0
   294f2:	d11a      	bne.n	2952a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   294f4:	697b      	ldr	r3, [r7, #20]
   294f6:	2204      	movs	r2, #4
   294f8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   294fa:	69bb      	ldr	r3, [r7, #24]
   294fc:	2232      	movs	r2, #50	; 0x32
   294fe:	2100      	movs	r1, #0
   29500:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   29502:	2310      	movs	r3, #16
   29504:	18fb      	adds	r3, r7, r3
   29506:	881b      	ldrh	r3, [r3, #0]
   29508:	2202      	movs	r2, #2
   2950a:	4013      	ands	r3, r2
					if (callback_status
   2950c:	d00d      	beq.n	2952a <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2950e:	69bb      	ldr	r3, [r7, #24]
   29510:	691b      	ldr	r3, [r3, #16]
   29512:	69ba      	ldr	r2, [r7, #24]
   29514:	0010      	movs	r0, r2
   29516:	4798      	blx	r3
   29518:	e007      	b.n	2952a <_usart_interrupt_handler+0x2ae>
   2951a:	46c0      	nop			; (mov r8, r8)
   2951c:	20005794 	.word	0x20005794
   29520:	0002905d 	.word	0x0002905d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29524:	697b      	ldr	r3, [r7, #20]
   29526:	2204      	movs	r2, #4
   29528:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2952a:	2312      	movs	r3, #18
   2952c:	18fb      	adds	r3, r7, r3
   2952e:	881b      	ldrh	r3, [r3, #0]
   29530:	2210      	movs	r2, #16
   29532:	4013      	ands	r3, r2
   29534:	d010      	beq.n	29558 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   29536:	697b      	ldr	r3, [r7, #20]
   29538:	2210      	movs	r2, #16
   2953a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2953c:	697b      	ldr	r3, [r7, #20]
   2953e:	2210      	movs	r2, #16
   29540:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   29542:	2310      	movs	r3, #16
   29544:	18fb      	adds	r3, r7, r3
   29546:	881b      	ldrh	r3, [r3, #0]
   29548:	2210      	movs	r2, #16
   2954a:	4013      	ands	r3, r2
   2954c:	d004      	beq.n	29558 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2954e:	69bb      	ldr	r3, [r7, #24]
   29550:	69db      	ldr	r3, [r3, #28]
   29552:	69ba      	ldr	r2, [r7, #24]
   29554:	0010      	movs	r0, r2
   29556:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   29558:	2312      	movs	r3, #18
   2955a:	18fb      	adds	r3, r7, r3
   2955c:	881b      	ldrh	r3, [r3, #0]
   2955e:	2220      	movs	r2, #32
   29560:	4013      	ands	r3, r2
   29562:	d010      	beq.n	29586 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   29564:	697b      	ldr	r3, [r7, #20]
   29566:	2220      	movs	r2, #32
   29568:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2956a:	697b      	ldr	r3, [r7, #20]
   2956c:	2220      	movs	r2, #32
   2956e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   29570:	2310      	movs	r3, #16
   29572:	18fb      	adds	r3, r7, r3
   29574:	881b      	ldrh	r3, [r3, #0]
   29576:	2208      	movs	r2, #8
   29578:	4013      	ands	r3, r2
   2957a:	d004      	beq.n	29586 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2957c:	69bb      	ldr	r3, [r7, #24]
   2957e:	699b      	ldr	r3, [r3, #24]
   29580:	69ba      	ldr	r2, [r7, #24]
   29582:	0010      	movs	r0, r2
   29584:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   29586:	2312      	movs	r3, #18
   29588:	18fb      	adds	r3, r7, r3
   2958a:	881b      	ldrh	r3, [r3, #0]
   2958c:	2208      	movs	r2, #8
   2958e:	4013      	ands	r3, r2
   29590:	d010      	beq.n	295b4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   29592:	697b      	ldr	r3, [r7, #20]
   29594:	2208      	movs	r2, #8
   29596:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   29598:	697b      	ldr	r3, [r7, #20]
   2959a:	2208      	movs	r2, #8
   2959c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2959e:	2310      	movs	r3, #16
   295a0:	18fb      	adds	r3, r7, r3
   295a2:	881b      	ldrh	r3, [r3, #0]
   295a4:	2220      	movs	r2, #32
   295a6:	4013      	ands	r3, r2
   295a8:	d004      	beq.n	295b4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   295aa:	69bb      	ldr	r3, [r7, #24]
   295ac:	6a1b      	ldr	r3, [r3, #32]
   295ae:	69ba      	ldr	r2, [r7, #24]
   295b0:	0010      	movs	r0, r2
   295b2:	4798      	blx	r3
		}
	}
#endif
}
   295b4:	46c0      	nop			; (mov r8, r8)
   295b6:	46bd      	mov	sp, r7
   295b8:	b008      	add	sp, #32
   295ba:	bd80      	pop	{r7, pc}

000295bc <system_gclk_gen_get_config_defaults>:
{
   295bc:	b580      	push	{r7, lr}
   295be:	b082      	sub	sp, #8
   295c0:	af00      	add	r7, sp, #0
   295c2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   295c4:	687b      	ldr	r3, [r7, #4]
   295c6:	2201      	movs	r2, #1
   295c8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   295ca:	687b      	ldr	r3, [r7, #4]
   295cc:	2200      	movs	r2, #0
   295ce:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   295d0:	687b      	ldr	r3, [r7, #4]
   295d2:	2206      	movs	r2, #6
   295d4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   295d6:	687b      	ldr	r3, [r7, #4]
   295d8:	2200      	movs	r2, #0
   295da:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   295dc:	687b      	ldr	r3, [r7, #4]
   295de:	2200      	movs	r2, #0
   295e0:	725a      	strb	r2, [r3, #9]
}
   295e2:	46c0      	nop			; (mov r8, r8)
   295e4:	46bd      	mov	sp, r7
   295e6:	b002      	add	sp, #8
   295e8:	bd80      	pop	{r7, pc}

000295ea <system_gclk_chan_get_config_defaults>:
{
   295ea:	b580      	push	{r7, lr}
   295ec:	b082      	sub	sp, #8
   295ee:	af00      	add	r7, sp, #0
   295f0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   295f2:	687b      	ldr	r3, [r7, #4]
   295f4:	2200      	movs	r2, #0
   295f6:	701a      	strb	r2, [r3, #0]
}
   295f8:	46c0      	nop			; (mov r8, r8)
   295fa:	46bd      	mov	sp, r7
   295fc:	b002      	add	sp, #8
   295fe:	bd80      	pop	{r7, pc}

00029600 <system_clock_source_osc8m_get_config_defaults>:
{
   29600:	b580      	push	{r7, lr}
   29602:	b082      	sub	sp, #8
   29604:	af00      	add	r7, sp, #0
   29606:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   29608:	687b      	ldr	r3, [r7, #4]
   2960a:	2203      	movs	r2, #3
   2960c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2960e:	687b      	ldr	r3, [r7, #4]
   29610:	2200      	movs	r2, #0
   29612:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29614:	687b      	ldr	r3, [r7, #4]
   29616:	2201      	movs	r2, #1
   29618:	709a      	strb	r2, [r3, #2]
}
   2961a:	46c0      	nop			; (mov r8, r8)
   2961c:	46bd      	mov	sp, r7
   2961e:	b002      	add	sp, #8
   29620:	bd80      	pop	{r7, pc}
	...

00029624 <system_cpu_clock_set_divider>:
{
   29624:	b580      	push	{r7, lr}
   29626:	b082      	sub	sp, #8
   29628:	af00      	add	r7, sp, #0
   2962a:	0002      	movs	r2, r0
   2962c:	1dfb      	adds	r3, r7, #7
   2962e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29630:	4a03      	ldr	r2, [pc, #12]	; (29640 <system_cpu_clock_set_divider+0x1c>)
   29632:	1dfb      	adds	r3, r7, #7
   29634:	781b      	ldrb	r3, [r3, #0]
   29636:	7213      	strb	r3, [r2, #8]
}
   29638:	46c0      	nop			; (mov r8, r8)
   2963a:	46bd      	mov	sp, r7
   2963c:	b002      	add	sp, #8
   2963e:	bd80      	pop	{r7, pc}
   29640:	40000400 	.word	0x40000400

00029644 <system_apb_clock_set_divider>:
{
   29644:	b580      	push	{r7, lr}
   29646:	b082      	sub	sp, #8
   29648:	af00      	add	r7, sp, #0
   2964a:	0002      	movs	r2, r0
   2964c:	1dfb      	adds	r3, r7, #7
   2964e:	701a      	strb	r2, [r3, #0]
   29650:	1dbb      	adds	r3, r7, #6
   29652:	1c0a      	adds	r2, r1, #0
   29654:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29656:	1dfb      	adds	r3, r7, #7
   29658:	781b      	ldrb	r3, [r3, #0]
   2965a:	2b01      	cmp	r3, #1
   2965c:	d008      	beq.n	29670 <system_apb_clock_set_divider+0x2c>
   2965e:	2b02      	cmp	r3, #2
   29660:	d00b      	beq.n	2967a <system_apb_clock_set_divider+0x36>
   29662:	2b00      	cmp	r3, #0
   29664:	d10e      	bne.n	29684 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   29666:	4a0b      	ldr	r2, [pc, #44]	; (29694 <system_apb_clock_set_divider+0x50>)
   29668:	1dbb      	adds	r3, r7, #6
   2966a:	781b      	ldrb	r3, [r3, #0]
   2966c:	7253      	strb	r3, [r2, #9]
			break;
   2966e:	e00b      	b.n	29688 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   29670:	4a08      	ldr	r2, [pc, #32]	; (29694 <system_apb_clock_set_divider+0x50>)
   29672:	1dbb      	adds	r3, r7, #6
   29674:	781b      	ldrb	r3, [r3, #0]
   29676:	7293      	strb	r3, [r2, #10]
			break;
   29678:	e006      	b.n	29688 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2967a:	4a06      	ldr	r2, [pc, #24]	; (29694 <system_apb_clock_set_divider+0x50>)
   2967c:	1dbb      	adds	r3, r7, #6
   2967e:	781b      	ldrb	r3, [r3, #0]
   29680:	72d3      	strb	r3, [r2, #11]
			break;
   29682:	e001      	b.n	29688 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   29684:	2317      	movs	r3, #23
   29686:	e000      	b.n	2968a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   29688:	2300      	movs	r3, #0
}
   2968a:	0018      	movs	r0, r3
   2968c:	46bd      	mov	sp, r7
   2968e:	b002      	add	sp, #8
   29690:	bd80      	pop	{r7, pc}
   29692:	46c0      	nop			; (mov r8, r8)
   29694:	40000400 	.word	0x40000400

00029698 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   29698:	b580      	push	{r7, lr}
   2969a:	b082      	sub	sp, #8
   2969c:	af00      	add	r7, sp, #0
   2969e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   296a0:	687b      	ldr	r3, [r7, #4]
   296a2:	2201      	movs	r2, #1
   296a4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   296a6:	687b      	ldr	r3, [r7, #4]
   296a8:	2200      	movs	r2, #0
   296aa:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   296ac:	687b      	ldr	r3, [r7, #4]
   296ae:	2200      	movs	r2, #0
   296b0:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   296b2:	687b      	ldr	r3, [r7, #4]
   296b4:	2200      	movs	r2, #0
   296b6:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   296b8:	687b      	ldr	r3, [r7, #4]
   296ba:	2200      	movs	r2, #0
   296bc:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   296be:	687b      	ldr	r3, [r7, #4]
   296c0:	4a0a      	ldr	r2, [pc, #40]	; (296ec <system_clock_source_dpll_get_config_defaults+0x54>)
   296c2:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   296c4:	687b      	ldr	r3, [r7, #4]
   296c6:	2280      	movs	r2, #128	; 0x80
   296c8:	0212      	lsls	r2, r2, #8
   296ca:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   296cc:	687b      	ldr	r3, [r7, #4]
   296ce:	2201      	movs	r2, #1
   296d0:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   296d2:	687b      	ldr	r3, [r7, #4]
   296d4:	2200      	movs	r2, #0
   296d6:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   296d8:	687b      	ldr	r3, [r7, #4]
   296da:	2200      	movs	r2, #0
   296dc:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   296de:	687b      	ldr	r3, [r7, #4]
   296e0:	2200      	movs	r2, #0
   296e2:	749a      	strb	r2, [r3, #18]
};
   296e4:	46c0      	nop			; (mov r8, r8)
   296e6:	46bd      	mov	sp, r7
   296e8:	b002      	add	sp, #8
   296ea:	bd80      	pop	{r7, pc}
   296ec:	02dc6c00 	.word	0x02dc6c00

000296f0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   296f0:	b580      	push	{r7, lr}
   296f2:	b082      	sub	sp, #8
   296f4:	af00      	add	r7, sp, #0
   296f6:	0002      	movs	r2, r0
   296f8:	1dfb      	adds	r3, r7, #7
   296fa:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   296fc:	4a08      	ldr	r2, [pc, #32]	; (29720 <system_flash_set_waitstates+0x30>)
   296fe:	1dfb      	adds	r3, r7, #7
   29700:	781b      	ldrb	r3, [r3, #0]
   29702:	210f      	movs	r1, #15
   29704:	400b      	ands	r3, r1
   29706:	b2d9      	uxtb	r1, r3
   29708:	6853      	ldr	r3, [r2, #4]
   2970a:	200f      	movs	r0, #15
   2970c:	4001      	ands	r1, r0
   2970e:	0049      	lsls	r1, r1, #1
   29710:	201e      	movs	r0, #30
   29712:	4383      	bics	r3, r0
   29714:	430b      	orrs	r3, r1
   29716:	6053      	str	r3, [r2, #4]
}
   29718:	46c0      	nop			; (mov r8, r8)
   2971a:	46bd      	mov	sp, r7
   2971c:	b002      	add	sp, #8
   2971e:	bd80      	pop	{r7, pc}
   29720:	41004000 	.word	0x41004000

00029724 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   29724:	b580      	push	{r7, lr}
   29726:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   29728:	46c0      	nop			; (mov r8, r8)
   2972a:	4b04      	ldr	r3, [pc, #16]	; (2973c <_system_dfll_wait_for_sync+0x18>)
   2972c:	68db      	ldr	r3, [r3, #12]
   2972e:	2210      	movs	r2, #16
   29730:	4013      	ands	r3, r2
   29732:	d0fa      	beq.n	2972a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   29734:	46c0      	nop			; (mov r8, r8)
   29736:	46bd      	mov	sp, r7
   29738:	bd80      	pop	{r7, pc}
   2973a:	46c0      	nop			; (mov r8, r8)
   2973c:	40000800 	.word	0x40000800

00029740 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   29740:	b580      	push	{r7, lr}
   29742:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   29744:	4b0c      	ldr	r3, [pc, #48]	; (29778 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29746:	2202      	movs	r2, #2
   29748:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2974a:	4b0c      	ldr	r3, [pc, #48]	; (2977c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2974c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2974e:	4a0a      	ldr	r2, [pc, #40]	; (29778 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29750:	4b0b      	ldr	r3, [pc, #44]	; (29780 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   29752:	689b      	ldr	r3, [r3, #8]
   29754:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   29756:	4a08      	ldr	r2, [pc, #32]	; (29778 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29758:	4b09      	ldr	r3, [pc, #36]	; (29780 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2975a:	685b      	ldr	r3, [r3, #4]
   2975c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2975e:	4b06      	ldr	r3, [pc, #24]	; (29778 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   29760:	2200      	movs	r2, #0
   29762:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   29764:	4b05      	ldr	r3, [pc, #20]	; (2977c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   29766:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   29768:	4a03      	ldr	r2, [pc, #12]	; (29778 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2976a:	4b05      	ldr	r3, [pc, #20]	; (29780 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2976c:	681b      	ldr	r3, [r3, #0]
   2976e:	b29b      	uxth	r3, r3
   29770:	8493      	strh	r3, [r2, #36]	; 0x24
}
   29772:	46c0      	nop			; (mov r8, r8)
   29774:	46bd      	mov	sp, r7
   29776:	bd80      	pop	{r7, pc}
   29778:	40000800 	.word	0x40000800
   2977c:	00029725 	.word	0x00029725
   29780:	20003ecc 	.word	0x20003ecc

00029784 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   29784:	b580      	push	{r7, lr}
   29786:	b082      	sub	sp, #8
   29788:	af00      	add	r7, sp, #0
   2978a:	0002      	movs	r2, r0
   2978c:	1dfb      	adds	r3, r7, #7
   2978e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   29790:	1dfb      	adds	r3, r7, #7
   29792:	781b      	ldrb	r3, [r3, #0]
   29794:	2b08      	cmp	r3, #8
   29796:	d841      	bhi.n	2981c <system_clock_source_get_hz+0x98>
   29798:	009a      	lsls	r2, r3, #2
   2979a:	4b23      	ldr	r3, [pc, #140]	; (29828 <system_clock_source_get_hz+0xa4>)
   2979c:	18d3      	adds	r3, r2, r3
   2979e:	681b      	ldr	r3, [r3, #0]
   297a0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   297a2:	4b22      	ldr	r3, [pc, #136]	; (2982c <system_clock_source_get_hz+0xa8>)
   297a4:	691b      	ldr	r3, [r3, #16]
   297a6:	e03a      	b.n	2981e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   297a8:	4b21      	ldr	r3, [pc, #132]	; (29830 <system_clock_source_get_hz+0xac>)
   297aa:	6a1b      	ldr	r3, [r3, #32]
   297ac:	059b      	lsls	r3, r3, #22
   297ae:	0f9b      	lsrs	r3, r3, #30
   297b0:	b2db      	uxtb	r3, r3
   297b2:	001a      	movs	r2, r3
   297b4:	4b1f      	ldr	r3, [pc, #124]	; (29834 <system_clock_source_get_hz+0xb0>)
   297b6:	40d3      	lsrs	r3, r2
   297b8:	e031      	b.n	2981e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   297ba:	2380      	movs	r3, #128	; 0x80
   297bc:	021b      	lsls	r3, r3, #8
   297be:	e02e      	b.n	2981e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   297c0:	2380      	movs	r3, #128	; 0x80
   297c2:	021b      	lsls	r3, r3, #8
   297c4:	e02b      	b.n	2981e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   297c6:	4b19      	ldr	r3, [pc, #100]	; (2982c <system_clock_source_get_hz+0xa8>)
   297c8:	695b      	ldr	r3, [r3, #20]
   297ca:	e028      	b.n	2981e <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   297cc:	4b17      	ldr	r3, [pc, #92]	; (2982c <system_clock_source_get_hz+0xa8>)
   297ce:	681b      	ldr	r3, [r3, #0]
   297d0:	2202      	movs	r2, #2
   297d2:	4013      	ands	r3, r2
   297d4:	d101      	bne.n	297da <system_clock_source_get_hz+0x56>
			return 0;
   297d6:	2300      	movs	r3, #0
   297d8:	e021      	b.n	2981e <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   297da:	4b17      	ldr	r3, [pc, #92]	; (29838 <system_clock_source_get_hz+0xb4>)
   297dc:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   297de:	4b13      	ldr	r3, [pc, #76]	; (2982c <system_clock_source_get_hz+0xa8>)
   297e0:	681b      	ldr	r3, [r3, #0]
   297e2:	2224      	movs	r2, #36	; 0x24
   297e4:	4013      	ands	r3, r2
   297e6:	2b04      	cmp	r3, #4
   297e8:	d109      	bne.n	297fe <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   297ea:	2000      	movs	r0, #0
   297ec:	4b13      	ldr	r3, [pc, #76]	; (2983c <system_clock_source_get_hz+0xb8>)
   297ee:	4798      	blx	r3
   297f0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   297f2:	4b0e      	ldr	r3, [pc, #56]	; (2982c <system_clock_source_get_hz+0xa8>)
   297f4:	689b      	ldr	r3, [r3, #8]
   297f6:	041b      	lsls	r3, r3, #16
   297f8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   297fa:	4353      	muls	r3, r2
   297fc:	e00f      	b.n	2981e <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   297fe:	4b10      	ldr	r3, [pc, #64]	; (29840 <system_clock_source_get_hz+0xbc>)
   29800:	e00d      	b.n	2981e <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   29802:	4a0b      	ldr	r2, [pc, #44]	; (29830 <system_clock_source_get_hz+0xac>)
   29804:	2350      	movs	r3, #80	; 0x50
   29806:	5cd3      	ldrb	r3, [r2, r3]
   29808:	b2db      	uxtb	r3, r3
   2980a:	001a      	movs	r2, r3
   2980c:	2304      	movs	r3, #4
   2980e:	4013      	ands	r3, r2
   29810:	d101      	bne.n	29816 <system_clock_source_get_hz+0x92>
			return 0;
   29812:	2300      	movs	r3, #0
   29814:	e003      	b.n	2981e <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   29816:	4b05      	ldr	r3, [pc, #20]	; (2982c <system_clock_source_get_hz+0xa8>)
   29818:	68db      	ldr	r3, [r3, #12]
   2981a:	e000      	b.n	2981e <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2981c:	2300      	movs	r3, #0
	}
}
   2981e:	0018      	movs	r0, r3
   29820:	46bd      	mov	sp, r7
   29822:	b002      	add	sp, #8
   29824:	bd80      	pop	{r7, pc}
   29826:	46c0      	nop			; (mov r8, r8)
   29828:	00039630 	.word	0x00039630
   2982c:	20003ecc 	.word	0x20003ecc
   29830:	40000800 	.word	0x40000800
   29834:	007a1200 	.word	0x007a1200
   29838:	00029725 	.word	0x00029725
   2983c:	0002a221 	.word	0x0002a221
   29840:	02dc6c00 	.word	0x02dc6c00

00029844 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   29844:	b580      	push	{r7, lr}
   29846:	b084      	sub	sp, #16
   29848:	af00      	add	r7, sp, #0
   2984a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2984c:	4b1a      	ldr	r3, [pc, #104]	; (298b8 <system_clock_source_osc8m_set_config+0x74>)
   2984e:	6a1b      	ldr	r3, [r3, #32]
   29850:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   29852:	687b      	ldr	r3, [r7, #4]
   29854:	781b      	ldrb	r3, [r3, #0]
   29856:	1c1a      	adds	r2, r3, #0
   29858:	2303      	movs	r3, #3
   2985a:	4013      	ands	r3, r2
   2985c:	b2da      	uxtb	r2, r3
   2985e:	230d      	movs	r3, #13
   29860:	18fb      	adds	r3, r7, r3
   29862:	2103      	movs	r1, #3
   29864:	400a      	ands	r2, r1
   29866:	0010      	movs	r0, r2
   29868:	781a      	ldrb	r2, [r3, #0]
   2986a:	2103      	movs	r1, #3
   2986c:	438a      	bics	r2, r1
   2986e:	1c11      	adds	r1, r2, #0
   29870:	1c02      	adds	r2, r0, #0
   29872:	430a      	orrs	r2, r1
   29874:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   29876:	687b      	ldr	r3, [r7, #4]
   29878:	789a      	ldrb	r2, [r3, #2]
   2987a:	230c      	movs	r3, #12
   2987c:	18fb      	adds	r3, r7, r3
   2987e:	01d0      	lsls	r0, r2, #7
   29880:	781a      	ldrb	r2, [r3, #0]
   29882:	217f      	movs	r1, #127	; 0x7f
   29884:	400a      	ands	r2, r1
   29886:	1c11      	adds	r1, r2, #0
   29888:	1c02      	adds	r2, r0, #0
   2988a:	430a      	orrs	r2, r1
   2988c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2988e:	687b      	ldr	r3, [r7, #4]
   29890:	785a      	ldrb	r2, [r3, #1]
   29892:	230c      	movs	r3, #12
   29894:	18fb      	adds	r3, r7, r3
   29896:	2101      	movs	r1, #1
   29898:	400a      	ands	r2, r1
   2989a:	0190      	lsls	r0, r2, #6
   2989c:	781a      	ldrb	r2, [r3, #0]
   2989e:	2140      	movs	r1, #64	; 0x40
   298a0:	438a      	bics	r2, r1
   298a2:	1c11      	adds	r1, r2, #0
   298a4:	1c02      	adds	r2, r0, #0
   298a6:	430a      	orrs	r2, r1
   298a8:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   298aa:	4b03      	ldr	r3, [pc, #12]	; (298b8 <system_clock_source_osc8m_set_config+0x74>)
   298ac:	68fa      	ldr	r2, [r7, #12]
   298ae:	621a      	str	r2, [r3, #32]
}
   298b0:	46c0      	nop			; (mov r8, r8)
   298b2:	46bd      	mov	sp, r7
   298b4:	b004      	add	sp, #16
   298b6:	bd80      	pop	{r7, pc}
   298b8:	40000800 	.word	0x40000800

000298bc <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   298bc:	b580      	push	{r7, lr}
   298be:	b086      	sub	sp, #24
   298c0:	af00      	add	r7, sp, #0
   298c2:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   298c4:	687b      	ldr	r3, [r7, #4]
   298c6:	68db      	ldr	r3, [r3, #12]
   298c8:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   298ca:	687b      	ldr	r3, [r7, #4]
   298cc:	7d1b      	ldrb	r3, [r3, #20]
   298ce:	2b01      	cmp	r3, #1
   298d0:	d10a      	bne.n	298e8 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   298d2:	687b      	ldr	r3, [r7, #4]
   298d4:	8a1b      	ldrh	r3, [r3, #16]
   298d6:	3301      	adds	r3, #1
   298d8:	005b      	lsls	r3, r3, #1
   298da:	001a      	movs	r2, r3
   298dc:	4b36      	ldr	r3, [pc, #216]	; (299b8 <system_clock_source_dpll_set_config+0xfc>)
   298de:	0011      	movs	r1, r2
   298e0:	6978      	ldr	r0, [r7, #20]
   298e2:	4798      	blx	r3
   298e4:	0003      	movs	r3, r0
   298e6:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   298e8:	687b      	ldr	r3, [r7, #4]
   298ea:	689b      	ldr	r3, [r3, #8]
   298ec:	011a      	lsls	r2, r3, #4
   298ee:	4b32      	ldr	r3, [pc, #200]	; (299b8 <system_clock_source_dpll_set_config+0xfc>)
   298f0:	6979      	ldr	r1, [r7, #20]
   298f2:	0010      	movs	r0, r2
   298f4:	4798      	blx	r3
   298f6:	0003      	movs	r3, r0
   298f8:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   298fa:	693b      	ldr	r3, [r7, #16]
   298fc:	b2da      	uxtb	r2, r3
   298fe:	230f      	movs	r3, #15
   29900:	18fb      	adds	r3, r7, r3
   29902:	210f      	movs	r1, #15
   29904:	400a      	ands	r2, r1
   29906:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   29908:	693b      	ldr	r3, [r7, #16]
   2990a:	091b      	lsrs	r3, r3, #4
   2990c:	3b01      	subs	r3, #1
   2990e:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   29910:	492a      	ldr	r1, [pc, #168]	; (299bc <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29912:	687b      	ldr	r3, [r7, #4]
   29914:	781b      	ldrb	r3, [r3, #0]
   29916:	01db      	lsls	r3, r3, #7
   29918:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2991a:	687b      	ldr	r3, [r7, #4]
   2991c:	785b      	ldrb	r3, [r3, #1]
   2991e:	019b      	lsls	r3, r3, #6
   29920:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   29922:	4313      	orrs	r3, r2
   29924:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   29926:	2344      	movs	r3, #68	; 0x44
   29928:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2992a:	4b24      	ldr	r3, [pc, #144]	; (299bc <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2992c:	220f      	movs	r2, #15
   2992e:	18ba      	adds	r2, r7, r2
   29930:	7812      	ldrb	r2, [r2, #0]
   29932:	0412      	lsls	r2, r2, #16
   29934:	0011      	movs	r1, r2
   29936:	22f0      	movs	r2, #240	; 0xf0
   29938:	0312      	lsls	r2, r2, #12
   2993a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2993c:	693a      	ldr	r2, [r7, #16]
   2993e:	0512      	lsls	r2, r2, #20
   29940:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   29942:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   29944:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   29946:	4b1d      	ldr	r3, [pc, #116]	; (299bc <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   29948:	687a      	ldr	r2, [r7, #4]
   2994a:	8a12      	ldrh	r2, [r2, #16]
   2994c:	0412      	lsls	r2, r2, #16
   2994e:	0011      	movs	r1, r2
   29950:	4a1b      	ldr	r2, [pc, #108]	; (299c0 <system_clock_source_dpll_set_config+0x104>)
   29952:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   29954:	687a      	ldr	r2, [r7, #4]
   29956:	7892      	ldrb	r2, [r2, #2]
   29958:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2995a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2995c:	687a      	ldr	r2, [r7, #4]
   2995e:	7cd2      	ldrb	r2, [r2, #19]
   29960:	0212      	lsls	r2, r2, #8
   29962:	0010      	movs	r0, r2
   29964:	22e0      	movs	r2, #224	; 0xe0
   29966:	00d2      	lsls	r2, r2, #3
   29968:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2996a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2996c:	687a      	ldr	r2, [r7, #4]
   2996e:	7d12      	ldrb	r2, [r2, #20]
   29970:	0112      	lsls	r2, r2, #4
   29972:	0010      	movs	r0, r2
   29974:	2230      	movs	r2, #48	; 0x30
   29976:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   29978:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2997a:	687a      	ldr	r2, [r7, #4]
   2997c:	78d2      	ldrb	r2, [r2, #3]
   2997e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   29980:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29982:	687a      	ldr	r2, [r7, #4]
   29984:	7912      	ldrb	r2, [r2, #4]
   29986:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   29988:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2998a:	687a      	ldr	r2, [r7, #4]
   2998c:	7c92      	ldrb	r2, [r2, #18]
   2998e:	0010      	movs	r0, r2
   29990:	2203      	movs	r2, #3
   29992:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   29994:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   29996:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   29998:	693b      	ldr	r3, [r7, #16]
   2999a:	3301      	adds	r3, #1
   2999c:	011a      	lsls	r2, r3, #4
   2999e:	230f      	movs	r3, #15
   299a0:	18fb      	adds	r3, r7, r3
   299a2:	781b      	ldrb	r3, [r3, #0]
   299a4:	18d3      	adds	r3, r2, r3
   299a6:	697a      	ldr	r2, [r7, #20]
   299a8:	4353      	muls	r3, r2
   299aa:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   299ac:	4b05      	ldr	r3, [pc, #20]	; (299c4 <system_clock_source_dpll_set_config+0x108>)
   299ae:	60da      	str	r2, [r3, #12]
}
   299b0:	46c0      	nop			; (mov r8, r8)
   299b2:	46bd      	mov	sp, r7
   299b4:	b006      	add	sp, #24
   299b6:	bd80      	pop	{r7, pc}
   299b8:	00032c65 	.word	0x00032c65
   299bc:	40000800 	.word	0x40000800
   299c0:	07ff0000 	.word	0x07ff0000
   299c4:	20003ecc 	.word	0x20003ecc

000299c8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   299c8:	b580      	push	{r7, lr}
   299ca:	b082      	sub	sp, #8
   299cc:	af00      	add	r7, sp, #0
   299ce:	0002      	movs	r2, r0
   299d0:	1dfb      	adds	r3, r7, #7
   299d2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   299d4:	1dfb      	adds	r3, r7, #7
   299d6:	781b      	ldrb	r3, [r3, #0]
   299d8:	2b08      	cmp	r3, #8
   299da:	d83b      	bhi.n	29a54 <system_clock_source_enable+0x8c>
   299dc:	009a      	lsls	r2, r3, #2
   299de:	4b21      	ldr	r3, [pc, #132]	; (29a64 <system_clock_source_enable+0x9c>)
   299e0:	18d3      	adds	r3, r2, r3
   299e2:	681b      	ldr	r3, [r3, #0]
   299e4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   299e6:	4b20      	ldr	r3, [pc, #128]	; (29a68 <system_clock_source_enable+0xa0>)
   299e8:	4a1f      	ldr	r2, [pc, #124]	; (29a68 <system_clock_source_enable+0xa0>)
   299ea:	6a12      	ldr	r2, [r2, #32]
   299ec:	2102      	movs	r1, #2
   299ee:	430a      	orrs	r2, r1
   299f0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   299f2:	2300      	movs	r3, #0
   299f4:	e031      	b.n	29a5a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   299f6:	4b1c      	ldr	r3, [pc, #112]	; (29a68 <system_clock_source_enable+0xa0>)
   299f8:	4a1b      	ldr	r2, [pc, #108]	; (29a68 <system_clock_source_enable+0xa0>)
   299fa:	6992      	ldr	r2, [r2, #24]
   299fc:	2102      	movs	r1, #2
   299fe:	430a      	orrs	r2, r1
   29a00:	619a      	str	r2, [r3, #24]
		break;
   29a02:	e029      	b.n	29a58 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   29a04:	4a18      	ldr	r2, [pc, #96]	; (29a68 <system_clock_source_enable+0xa0>)
   29a06:	4b18      	ldr	r3, [pc, #96]	; (29a68 <system_clock_source_enable+0xa0>)
   29a08:	8a1b      	ldrh	r3, [r3, #16]
   29a0a:	b29b      	uxth	r3, r3
   29a0c:	2102      	movs	r1, #2
   29a0e:	430b      	orrs	r3, r1
   29a10:	b29b      	uxth	r3, r3
   29a12:	8213      	strh	r3, [r2, #16]
		break;
   29a14:	e020      	b.n	29a58 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   29a16:	4a14      	ldr	r2, [pc, #80]	; (29a68 <system_clock_source_enable+0xa0>)
   29a18:	4b13      	ldr	r3, [pc, #76]	; (29a68 <system_clock_source_enable+0xa0>)
   29a1a:	8a9b      	ldrh	r3, [r3, #20]
   29a1c:	b29b      	uxth	r3, r3
   29a1e:	2102      	movs	r1, #2
   29a20:	430b      	orrs	r3, r1
   29a22:	b29b      	uxth	r3, r3
   29a24:	8293      	strh	r3, [r2, #20]
		break;
   29a26:	e017      	b.n	29a58 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   29a28:	4b10      	ldr	r3, [pc, #64]	; (29a6c <system_clock_source_enable+0xa4>)
   29a2a:	681b      	ldr	r3, [r3, #0]
   29a2c:	2202      	movs	r2, #2
   29a2e:	431a      	orrs	r2, r3
   29a30:	4b0e      	ldr	r3, [pc, #56]	; (29a6c <system_clock_source_enable+0xa4>)
   29a32:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   29a34:	4b0e      	ldr	r3, [pc, #56]	; (29a70 <system_clock_source_enable+0xa8>)
   29a36:	4798      	blx	r3
		break;
   29a38:	e00e      	b.n	29a58 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   29a3a:	4a0b      	ldr	r2, [pc, #44]	; (29a68 <system_clock_source_enable+0xa0>)
   29a3c:	490a      	ldr	r1, [pc, #40]	; (29a68 <system_clock_source_enable+0xa0>)
   29a3e:	2344      	movs	r3, #68	; 0x44
   29a40:	5ccb      	ldrb	r3, [r1, r3]
   29a42:	b2db      	uxtb	r3, r3
   29a44:	2102      	movs	r1, #2
   29a46:	430b      	orrs	r3, r1
   29a48:	b2d9      	uxtb	r1, r3
   29a4a:	2344      	movs	r3, #68	; 0x44
   29a4c:	54d1      	strb	r1, [r2, r3]
		break;
   29a4e:	e003      	b.n	29a58 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   29a50:	2300      	movs	r3, #0
   29a52:	e002      	b.n	29a5a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   29a54:	2317      	movs	r3, #23
   29a56:	e000      	b.n	29a5a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   29a58:	2300      	movs	r3, #0
}
   29a5a:	0018      	movs	r0, r3
   29a5c:	46bd      	mov	sp, r7
   29a5e:	b002      	add	sp, #8
   29a60:	bd80      	pop	{r7, pc}
   29a62:	46c0      	nop			; (mov r8, r8)
   29a64:	00039654 	.word	0x00039654
   29a68:	40000800 	.word	0x40000800
   29a6c:	20003ecc 	.word	0x20003ecc
   29a70:	00029741 	.word	0x00029741

00029a74 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   29a74:	b580      	push	{r7, lr}
   29a76:	b084      	sub	sp, #16
   29a78:	af00      	add	r7, sp, #0
   29a7a:	0002      	movs	r2, r0
   29a7c:	1dfb      	adds	r3, r7, #7
   29a7e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   29a80:	2300      	movs	r3, #0
   29a82:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   29a84:	1dfb      	adds	r3, r7, #7
   29a86:	781b      	ldrb	r3, [r3, #0]
   29a88:	2b08      	cmp	r3, #8
   29a8a:	d821      	bhi.n	29ad0 <system_clock_source_is_ready+0x5c>
   29a8c:	009a      	lsls	r2, r3, #2
   29a8e:	4b18      	ldr	r3, [pc, #96]	; (29af0 <system_clock_source_is_ready+0x7c>)
   29a90:	18d3      	adds	r3, r2, r3
   29a92:	681b      	ldr	r3, [r3, #0]
   29a94:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   29a96:	2308      	movs	r3, #8
   29a98:	60fb      	str	r3, [r7, #12]
		break;
   29a9a:	e01b      	b.n	29ad4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   29a9c:	2304      	movs	r3, #4
   29a9e:	60fb      	str	r3, [r7, #12]
		break;
   29aa0:	e018      	b.n	29ad4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   29aa2:	2301      	movs	r3, #1
   29aa4:	60fb      	str	r3, [r7, #12]
		break;
   29aa6:	e015      	b.n	29ad4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   29aa8:	2302      	movs	r3, #2
   29aaa:	60fb      	str	r3, [r7, #12]
		break;
   29aac:	e012      	b.n	29ad4 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   29aae:	2310      	movs	r3, #16
   29ab0:	60fb      	str	r3, [r7, #12]
		}
		break;
   29ab2:	e00f      	b.n	29ad4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   29ab4:	4a0f      	ldr	r2, [pc, #60]	; (29af4 <system_clock_source_is_ready+0x80>)
   29ab6:	2350      	movs	r3, #80	; 0x50
   29ab8:	5cd3      	ldrb	r3, [r2, r3]
   29aba:	b2db      	uxtb	r3, r3
   29abc:	001a      	movs	r2, r3
   29abe:	2303      	movs	r3, #3
   29ac0:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   29ac2:	3b03      	subs	r3, #3
   29ac4:	425a      	negs	r2, r3
   29ac6:	4153      	adcs	r3, r2
   29ac8:	b2db      	uxtb	r3, r3
   29aca:	e00c      	b.n	29ae6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   29acc:	2301      	movs	r3, #1
   29ace:	e00a      	b.n	29ae6 <system_clock_source_is_ready+0x72>

	default:
		return false;
   29ad0:	2300      	movs	r3, #0
   29ad2:	e008      	b.n	29ae6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   29ad4:	4b07      	ldr	r3, [pc, #28]	; (29af4 <system_clock_source_is_ready+0x80>)
   29ad6:	68db      	ldr	r3, [r3, #12]
   29ad8:	68fa      	ldr	r2, [r7, #12]
   29ada:	401a      	ands	r2, r3
   29adc:	68fb      	ldr	r3, [r7, #12]
   29ade:	1ad3      	subs	r3, r2, r3
   29ae0:	425a      	negs	r2, r3
   29ae2:	4153      	adcs	r3, r2
   29ae4:	b2db      	uxtb	r3, r3
}
   29ae6:	0018      	movs	r0, r3
   29ae8:	46bd      	mov	sp, r7
   29aea:	b004      	add	sp, #16
   29aec:	bd80      	pop	{r7, pc}
   29aee:	46c0      	nop			; (mov r8, r8)
   29af0:	00039678 	.word	0x00039678
   29af4:	40000800 	.word	0x40000800

00029af8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   29af8:	b580      	push	{r7, lr}
   29afa:	b082      	sub	sp, #8
   29afc:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   29afe:	003b      	movs	r3, r7
   29b00:	2203      	movs	r2, #3
   29b02:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29b04:	2300      	movs	r3, #0
   29b06:	607b      	str	r3, [r7, #4]
   29b08:	e009      	b.n	29b1e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   29b0a:	687b      	ldr	r3, [r7, #4]
   29b0c:	b2db      	uxtb	r3, r3
   29b0e:	003a      	movs	r2, r7
   29b10:	0011      	movs	r1, r2
   29b12:	0018      	movs	r0, r3
   29b14:	4b05      	ldr	r3, [pc, #20]	; (29b2c <_switch_peripheral_gclk+0x34>)
   29b16:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   29b18:	687b      	ldr	r3, [r7, #4]
   29b1a:	3301      	adds	r3, #1
   29b1c:	607b      	str	r3, [r7, #4]
   29b1e:	687b      	ldr	r3, [r7, #4]
   29b20:	2b24      	cmp	r3, #36	; 0x24
   29b22:	d9f2      	bls.n	29b0a <_switch_peripheral_gclk+0x12>
	}
}
   29b24:	46c0      	nop			; (mov r8, r8)
   29b26:	46bd      	mov	sp, r7
   29b28:	b002      	add	sp, #8
   29b2a:	bd80      	pop	{r7, pc}
   29b2c:	0002a0fd 	.word	0x0002a0fd

00029b30 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   29b30:	b580      	push	{r7, lr}
   29b32:	b0a6      	sub	sp, #152	; 0x98
   29b34:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   29b36:	4b92      	ldr	r3, [pc, #584]	; (29d80 <system_clock_init+0x250>)
   29b38:	22c2      	movs	r2, #194	; 0xc2
   29b3a:	00d2      	lsls	r2, r2, #3
   29b3c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   29b3e:	2003      	movs	r0, #3
   29b40:	4b90      	ldr	r3, [pc, #576]	; (29d84 <system_clock_init+0x254>)
   29b42:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   29b44:	4b90      	ldr	r3, [pc, #576]	; (29d88 <system_clock_init+0x258>)
   29b46:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   29b48:	2394      	movs	r3, #148	; 0x94
   29b4a:	18fb      	adds	r3, r7, r3
   29b4c:	0018      	movs	r0, r3
   29b4e:	4b8f      	ldr	r3, [pc, #572]	; (29d8c <system_clock_init+0x25c>)
   29b50:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   29b52:	2394      	movs	r3, #148	; 0x94
   29b54:	18fb      	adds	r3, r7, r3
   29b56:	2200      	movs	r2, #0
   29b58:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   29b5a:	2394      	movs	r3, #148	; 0x94
   29b5c:	18fb      	adds	r3, r7, r3
   29b5e:	2201      	movs	r2, #1
   29b60:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   29b62:	2394      	movs	r3, #148	; 0x94
   29b64:	18fb      	adds	r3, r7, r3
   29b66:	2200      	movs	r2, #0
   29b68:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   29b6a:	2394      	movs	r3, #148	; 0x94
   29b6c:	18fb      	adds	r3, r7, r3
   29b6e:	0018      	movs	r0, r3
   29b70:	4b87      	ldr	r3, [pc, #540]	; (29d90 <system_clock_init+0x260>)
   29b72:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   29b74:	2006      	movs	r0, #6
   29b76:	4b87      	ldr	r3, [pc, #540]	; (29d94 <system_clock_init+0x264>)
   29b78:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   29b7a:	4b87      	ldr	r3, [pc, #540]	; (29d98 <system_clock_init+0x268>)
   29b7c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   29b7e:	2360      	movs	r3, #96	; 0x60
   29b80:	18fb      	adds	r3, r7, r3
   29b82:	0018      	movs	r0, r3
   29b84:	4b85      	ldr	r3, [pc, #532]	; (29d9c <system_clock_init+0x26c>)
   29b86:	4798      	blx	r3
   29b88:	2360      	movs	r3, #96	; 0x60
   29b8a:	18fb      	adds	r3, r7, r3
   29b8c:	2206      	movs	r2, #6
   29b8e:	701a      	strb	r2, [r3, #0]
   29b90:	2360      	movs	r3, #96	; 0x60
   29b92:	18fb      	adds	r3, r7, r3
   29b94:	2208      	movs	r2, #8
   29b96:	605a      	str	r2, [r3, #4]
   29b98:	2360      	movs	r3, #96	; 0x60
   29b9a:	18fb      	adds	r3, r7, r3
   29b9c:	2200      	movs	r2, #0
   29b9e:	721a      	strb	r2, [r3, #8]
   29ba0:	2360      	movs	r3, #96	; 0x60
   29ba2:	18fb      	adds	r3, r7, r3
   29ba4:	2200      	movs	r2, #0
   29ba6:	725a      	strb	r2, [r3, #9]
   29ba8:	2360      	movs	r3, #96	; 0x60
   29baa:	18fb      	adds	r3, r7, r3
   29bac:	0019      	movs	r1, r3
   29bae:	2001      	movs	r0, #1
   29bb0:	4b7b      	ldr	r3, [pc, #492]	; (29da0 <system_clock_init+0x270>)
   29bb2:	4798      	blx	r3
   29bb4:	2001      	movs	r0, #1
   29bb6:	4b7b      	ldr	r3, [pc, #492]	; (29da4 <system_clock_init+0x274>)
   29bb8:	4798      	blx	r3
   29bba:	2354      	movs	r3, #84	; 0x54
   29bbc:	18fb      	adds	r3, r7, r3
   29bbe:	0018      	movs	r0, r3
   29bc0:	4b76      	ldr	r3, [pc, #472]	; (29d9c <system_clock_init+0x26c>)
   29bc2:	4798      	blx	r3
   29bc4:	2354      	movs	r3, #84	; 0x54
   29bc6:	18fb      	adds	r3, r7, r3
   29bc8:	2203      	movs	r2, #3
   29bca:	701a      	strb	r2, [r3, #0]
   29bcc:	2354      	movs	r3, #84	; 0x54
   29bce:	18fb      	adds	r3, r7, r3
   29bd0:	2201      	movs	r2, #1
   29bd2:	605a      	str	r2, [r3, #4]
   29bd4:	2354      	movs	r3, #84	; 0x54
   29bd6:	18fb      	adds	r3, r7, r3
   29bd8:	2201      	movs	r2, #1
   29bda:	721a      	strb	r2, [r3, #8]
   29bdc:	2354      	movs	r3, #84	; 0x54
   29bde:	18fb      	adds	r3, r7, r3
   29be0:	2200      	movs	r2, #0
   29be2:	725a      	strb	r2, [r3, #9]
   29be4:	2354      	movs	r3, #84	; 0x54
   29be6:	18fb      	adds	r3, r7, r3
   29be8:	0019      	movs	r1, r3
   29bea:	2002      	movs	r0, #2
   29bec:	4b6c      	ldr	r3, [pc, #432]	; (29da0 <system_clock_init+0x270>)
   29bee:	4798      	blx	r3
   29bf0:	2002      	movs	r0, #2
   29bf2:	4b6c      	ldr	r3, [pc, #432]	; (29da4 <system_clock_init+0x274>)
   29bf4:	4798      	blx	r3
   29bf6:	233c      	movs	r3, #60	; 0x3c
   29bf8:	18fb      	adds	r3, r7, r3
   29bfa:	0018      	movs	r0, r3
   29bfc:	4b67      	ldr	r3, [pc, #412]	; (29d9c <system_clock_init+0x26c>)
   29bfe:	4798      	blx	r3
   29c00:	233c      	movs	r3, #60	; 0x3c
   29c02:	18fb      	adds	r3, r7, r3
   29c04:	2203      	movs	r2, #3
   29c06:	701a      	strb	r2, [r3, #0]
   29c08:	233c      	movs	r3, #60	; 0x3c
   29c0a:	18fb      	adds	r3, r7, r3
   29c0c:	2220      	movs	r2, #32
   29c0e:	605a      	str	r2, [r3, #4]
   29c10:	233c      	movs	r3, #60	; 0x3c
   29c12:	18fb      	adds	r3, r7, r3
   29c14:	2200      	movs	r2, #0
   29c16:	721a      	strb	r2, [r3, #8]
   29c18:	233c      	movs	r3, #60	; 0x3c
   29c1a:	18fb      	adds	r3, r7, r3
   29c1c:	2200      	movs	r2, #0
   29c1e:	725a      	strb	r2, [r3, #9]
   29c20:	233c      	movs	r3, #60	; 0x3c
   29c22:	18fb      	adds	r3, r7, r3
   29c24:	0019      	movs	r1, r3
   29c26:	2004      	movs	r0, #4
   29c28:	4b5d      	ldr	r3, [pc, #372]	; (29da0 <system_clock_init+0x270>)
   29c2a:	4798      	blx	r3
   29c2c:	2004      	movs	r0, #4
   29c2e:	4b5d      	ldr	r3, [pc, #372]	; (29da4 <system_clock_init+0x274>)
   29c30:	4798      	blx	r3
   29c32:	2330      	movs	r3, #48	; 0x30
   29c34:	18fb      	adds	r3, r7, r3
   29c36:	0018      	movs	r0, r3
   29c38:	4b58      	ldr	r3, [pc, #352]	; (29d9c <system_clock_init+0x26c>)
   29c3a:	4798      	blx	r3
   29c3c:	2330      	movs	r3, #48	; 0x30
   29c3e:	18fb      	adds	r3, r7, r3
   29c40:	2206      	movs	r2, #6
   29c42:	701a      	strb	r2, [r3, #0]
   29c44:	2330      	movs	r3, #48	; 0x30
   29c46:	18fb      	adds	r3, r7, r3
   29c48:	2201      	movs	r2, #1
   29c4a:	605a      	str	r2, [r3, #4]
   29c4c:	2330      	movs	r3, #48	; 0x30
   29c4e:	18fb      	adds	r3, r7, r3
   29c50:	2200      	movs	r2, #0
   29c52:	721a      	strb	r2, [r3, #8]
   29c54:	2330      	movs	r3, #48	; 0x30
   29c56:	18fb      	adds	r3, r7, r3
   29c58:	2200      	movs	r2, #0
   29c5a:	725a      	strb	r2, [r3, #9]
   29c5c:	2330      	movs	r3, #48	; 0x30
   29c5e:	18fb      	adds	r3, r7, r3
   29c60:	0019      	movs	r1, r3
   29c62:	2005      	movs	r0, #5
   29c64:	4b4e      	ldr	r3, [pc, #312]	; (29da0 <system_clock_init+0x270>)
   29c66:	4798      	blx	r3
   29c68:	2005      	movs	r0, #5
   29c6a:	4b4e      	ldr	r3, [pc, #312]	; (29da4 <system_clock_init+0x274>)
   29c6c:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   29c6e:	2390      	movs	r3, #144	; 0x90
   29c70:	18fb      	adds	r3, r7, r3
   29c72:	0018      	movs	r0, r3
   29c74:	4b4c      	ldr	r3, [pc, #304]	; (29da8 <system_clock_init+0x278>)
   29c76:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   29c78:	2390      	movs	r3, #144	; 0x90
   29c7a:	18fb      	adds	r3, r7, r3
   29c7c:	2201      	movs	r2, #1
   29c7e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   29c80:	2390      	movs	r3, #144	; 0x90
   29c82:	18fb      	adds	r3, r7, r3
   29c84:	0019      	movs	r1, r3
   29c86:	2001      	movs	r0, #1
   29c88:	4b48      	ldr	r3, [pc, #288]	; (29dac <system_clock_init+0x27c>)
   29c8a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   29c8c:	2001      	movs	r0, #1
   29c8e:	4b48      	ldr	r3, [pc, #288]	; (29db0 <system_clock_init+0x280>)
   29c90:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   29c92:	2378      	movs	r3, #120	; 0x78
   29c94:	18fb      	adds	r3, r7, r3
   29c96:	0018      	movs	r0, r3
   29c98:	4b46      	ldr	r3, [pc, #280]	; (29db4 <system_clock_init+0x284>)
   29c9a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   29c9c:	2378      	movs	r3, #120	; 0x78
   29c9e:	18fb      	adds	r3, r7, r3
   29ca0:	2200      	movs	r2, #0
   29ca2:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   29ca4:	2378      	movs	r3, #120	; 0x78
   29ca6:	18fb      	adds	r3, r7, r3
   29ca8:	2200      	movs	r2, #0
   29caa:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   29cac:	2378      	movs	r3, #120	; 0x78
   29cae:	18fb      	adds	r3, r7, r3
   29cb0:	2200      	movs	r2, #0
   29cb2:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   29cb4:	2378      	movs	r3, #120	; 0x78
   29cb6:	18fb      	adds	r3, r7, r3
   29cb8:	2200      	movs	r2, #0
   29cba:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   29cbc:	2378      	movs	r3, #120	; 0x78
   29cbe:	18fb      	adds	r3, r7, r3
   29cc0:	2200      	movs	r2, #0
   29cc2:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   29cc4:	2378      	movs	r3, #120	; 0x78
   29cc6:	18fb      	adds	r3, r7, r3
   29cc8:	2200      	movs	r2, #0
   29cca:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   29ccc:	2378      	movs	r3, #120	; 0x78
   29cce:	18fb      	adds	r3, r7, r3
   29cd0:	2200      	movs	r2, #0
   29cd2:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   29cd4:	2378      	movs	r3, #120	; 0x78
   29cd6:	18fb      	adds	r3, r7, r3
   29cd8:	2202      	movs	r2, #2
   29cda:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   29cdc:	2378      	movs	r3, #120	; 0x78
   29cde:	18fb      	adds	r3, r7, r3
   29ce0:	4a35      	ldr	r2, [pc, #212]	; (29db8 <system_clock_init+0x288>)
   29ce2:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   29ce4:	2378      	movs	r3, #120	; 0x78
   29ce6:	18fb      	adds	r3, r7, r3
   29ce8:	2201      	movs	r2, #1
   29cea:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   29cec:	2378      	movs	r3, #120	; 0x78
   29cee:	18fb      	adds	r3, r7, r3
   29cf0:	4a32      	ldr	r2, [pc, #200]	; (29dbc <system_clock_init+0x28c>)
   29cf2:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   29cf4:	2378      	movs	r3, #120	; 0x78
   29cf6:	18fb      	adds	r3, r7, r3
   29cf8:	0018      	movs	r0, r3
   29cfa:	4b31      	ldr	r3, [pc, #196]	; (29dc0 <system_clock_init+0x290>)
   29cfc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   29cfe:	2008      	movs	r0, #8
   29d00:	4b24      	ldr	r3, [pc, #144]	; (29d94 <system_clock_init+0x264>)
   29d02:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   29d04:	46c0      	nop			; (mov r8, r8)
   29d06:	2008      	movs	r0, #8
   29d08:	4b2e      	ldr	r3, [pc, #184]	; (29dc4 <system_clock_init+0x294>)
   29d0a:	4798      	blx	r3
   29d0c:	0003      	movs	r3, r0
   29d0e:	001a      	movs	r2, r3
   29d10:	2301      	movs	r3, #1
   29d12:	4053      	eors	r3, r2
   29d14:	b2db      	uxtb	r3, r3
   29d16:	2b00      	cmp	r3, #0
   29d18:	d1f5      	bne.n	29d06 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   29d1a:	4919      	ldr	r1, [pc, #100]	; (29d80 <system_clock_init+0x250>)
   29d1c:	2244      	movs	r2, #68	; 0x44
   29d1e:	5c8b      	ldrb	r3, [r1, r2]
   29d20:	2080      	movs	r0, #128	; 0x80
   29d22:	4240      	negs	r0, r0
   29d24:	4303      	orrs	r3, r0
   29d26:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   29d28:	2000      	movs	r0, #0
   29d2a:	4b27      	ldr	r3, [pc, #156]	; (29dc8 <system_clock_init+0x298>)
   29d2c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   29d2e:	2100      	movs	r1, #0
   29d30:	2000      	movs	r0, #0
   29d32:	4b26      	ldr	r3, [pc, #152]	; (29dcc <system_clock_init+0x29c>)
   29d34:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   29d36:	2100      	movs	r1, #0
   29d38:	2001      	movs	r0, #1
   29d3a:	4b24      	ldr	r3, [pc, #144]	; (29dcc <system_clock_init+0x29c>)
   29d3c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   29d3e:	2100      	movs	r1, #0
   29d40:	2002      	movs	r0, #2
   29d42:	4b22      	ldr	r3, [pc, #136]	; (29dcc <system_clock_init+0x29c>)
   29d44:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   29d46:	003b      	movs	r3, r7
   29d48:	0018      	movs	r0, r3
   29d4a:	4b14      	ldr	r3, [pc, #80]	; (29d9c <system_clock_init+0x26c>)
   29d4c:	4798      	blx	r3
   29d4e:	003b      	movs	r3, r7
   29d50:	2208      	movs	r2, #8
   29d52:	701a      	strb	r2, [r3, #0]
   29d54:	003b      	movs	r3, r7
   29d56:	2201      	movs	r2, #1
   29d58:	605a      	str	r2, [r3, #4]
   29d5a:	003b      	movs	r3, r7
   29d5c:	2200      	movs	r2, #0
   29d5e:	721a      	strb	r2, [r3, #8]
   29d60:	003b      	movs	r3, r7
   29d62:	2201      	movs	r2, #1
   29d64:	725a      	strb	r2, [r3, #9]
   29d66:	003b      	movs	r3, r7
   29d68:	0019      	movs	r1, r3
   29d6a:	2000      	movs	r0, #0
   29d6c:	4b0c      	ldr	r3, [pc, #48]	; (29da0 <system_clock_init+0x270>)
   29d6e:	4798      	blx	r3
   29d70:	2000      	movs	r0, #0
   29d72:	4b0c      	ldr	r3, [pc, #48]	; (29da4 <system_clock_init+0x274>)
   29d74:	4798      	blx	r3
#endif
}
   29d76:	46c0      	nop			; (mov r8, r8)
   29d78:	46bd      	mov	sp, r7
   29d7a:	b026      	add	sp, #152	; 0x98
   29d7c:	bd80      	pop	{r7, pc}
   29d7e:	46c0      	nop			; (mov r8, r8)
   29d80:	40000800 	.word	0x40000800
   29d84:	000296f1 	.word	0x000296f1
   29d88:	00029af9 	.word	0x00029af9
   29d8c:	00029601 	.word	0x00029601
   29d90:	00029845 	.word	0x00029845
   29d94:	000299c9 	.word	0x000299c9
   29d98:	00029e75 	.word	0x00029e75
   29d9c:	000295bd 	.word	0x000295bd
   29da0:	00029ea5 	.word	0x00029ea5
   29da4:	00029fc9 	.word	0x00029fc9
   29da8:	000295eb 	.word	0x000295eb
   29dac:	0002a0fd 	.word	0x0002a0fd
   29db0:	0002a141 	.word	0x0002a141
   29db4:	00029699 	.word	0x00029699
   29db8:	000f4240 	.word	0x000f4240
   29dbc:	02dc6c00 	.word	0x02dc6c00
   29dc0:	000298bd 	.word	0x000298bd
   29dc4:	00029a75 	.word	0x00029a75
   29dc8:	00029625 	.word	0x00029625
   29dcc:	00029645 	.word	0x00029645

00029dd0 <system_apb_clock_set_mask>:
{
   29dd0:	b580      	push	{r7, lr}
   29dd2:	b082      	sub	sp, #8
   29dd4:	af00      	add	r7, sp, #0
   29dd6:	0002      	movs	r2, r0
   29dd8:	6039      	str	r1, [r7, #0]
   29dda:	1dfb      	adds	r3, r7, #7
   29ddc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29dde:	1dfb      	adds	r3, r7, #7
   29de0:	781b      	ldrb	r3, [r3, #0]
   29de2:	2b01      	cmp	r3, #1
   29de4:	d00a      	beq.n	29dfc <system_apb_clock_set_mask+0x2c>
   29de6:	2b02      	cmp	r3, #2
   29de8:	d00f      	beq.n	29e0a <system_apb_clock_set_mask+0x3a>
   29dea:	2b00      	cmp	r3, #0
   29dec:	d114      	bne.n	29e18 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   29dee:	4b0e      	ldr	r3, [pc, #56]	; (29e28 <system_apb_clock_set_mask+0x58>)
   29df0:	4a0d      	ldr	r2, [pc, #52]	; (29e28 <system_apb_clock_set_mask+0x58>)
   29df2:	6991      	ldr	r1, [r2, #24]
   29df4:	683a      	ldr	r2, [r7, #0]
   29df6:	430a      	orrs	r2, r1
   29df8:	619a      	str	r2, [r3, #24]
			break;
   29dfa:	e00f      	b.n	29e1c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   29dfc:	4b0a      	ldr	r3, [pc, #40]	; (29e28 <system_apb_clock_set_mask+0x58>)
   29dfe:	4a0a      	ldr	r2, [pc, #40]	; (29e28 <system_apb_clock_set_mask+0x58>)
   29e00:	69d1      	ldr	r1, [r2, #28]
   29e02:	683a      	ldr	r2, [r7, #0]
   29e04:	430a      	orrs	r2, r1
   29e06:	61da      	str	r2, [r3, #28]
			break;
   29e08:	e008      	b.n	29e1c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   29e0a:	4b07      	ldr	r3, [pc, #28]	; (29e28 <system_apb_clock_set_mask+0x58>)
   29e0c:	4a06      	ldr	r2, [pc, #24]	; (29e28 <system_apb_clock_set_mask+0x58>)
   29e0e:	6a11      	ldr	r1, [r2, #32]
   29e10:	683a      	ldr	r2, [r7, #0]
   29e12:	430a      	orrs	r2, r1
   29e14:	621a      	str	r2, [r3, #32]
			break;
   29e16:	e001      	b.n	29e1c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   29e18:	2317      	movs	r3, #23
   29e1a:	e000      	b.n	29e1e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   29e1c:	2300      	movs	r3, #0
}
   29e1e:	0018      	movs	r0, r3
   29e20:	46bd      	mov	sp, r7
   29e22:	b002      	add	sp, #8
   29e24:	bd80      	pop	{r7, pc}
   29e26:	46c0      	nop			; (mov r8, r8)
   29e28:	40000400 	.word	0x40000400

00029e2c <system_interrupt_enter_critical_section>:
{
   29e2c:	b580      	push	{r7, lr}
   29e2e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29e30:	4b02      	ldr	r3, [pc, #8]	; (29e3c <system_interrupt_enter_critical_section+0x10>)
   29e32:	4798      	blx	r3
}
   29e34:	46c0      	nop			; (mov r8, r8)
   29e36:	46bd      	mov	sp, r7
   29e38:	bd80      	pop	{r7, pc}
   29e3a:	46c0      	nop			; (mov r8, r8)
   29e3c:	00026469 	.word	0x00026469

00029e40 <system_interrupt_leave_critical_section>:
{
   29e40:	b580      	push	{r7, lr}
   29e42:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29e44:	4b02      	ldr	r3, [pc, #8]	; (29e50 <system_interrupt_leave_critical_section+0x10>)
   29e46:	4798      	blx	r3
}
   29e48:	46c0      	nop			; (mov r8, r8)
   29e4a:	46bd      	mov	sp, r7
   29e4c:	bd80      	pop	{r7, pc}
   29e4e:	46c0      	nop			; (mov r8, r8)
   29e50:	000264bd 	.word	0x000264bd

00029e54 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   29e54:	b580      	push	{r7, lr}
   29e56:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   29e58:	4b05      	ldr	r3, [pc, #20]	; (29e70 <system_gclk_is_syncing+0x1c>)
   29e5a:	785b      	ldrb	r3, [r3, #1]
   29e5c:	b2db      	uxtb	r3, r3
   29e5e:	b25b      	sxtb	r3, r3
   29e60:	2b00      	cmp	r3, #0
   29e62:	da01      	bge.n	29e68 <system_gclk_is_syncing+0x14>
		return true;
   29e64:	2301      	movs	r3, #1
   29e66:	e000      	b.n	29e6a <system_gclk_is_syncing+0x16>
	}

	return false;
   29e68:	2300      	movs	r3, #0
}
   29e6a:	0018      	movs	r0, r3
   29e6c:	46bd      	mov	sp, r7
   29e6e:	bd80      	pop	{r7, pc}
   29e70:	40000c00 	.word	0x40000c00

00029e74 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   29e74:	b580      	push	{r7, lr}
   29e76:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   29e78:	2108      	movs	r1, #8
   29e7a:	2000      	movs	r0, #0
   29e7c:	4b07      	ldr	r3, [pc, #28]	; (29e9c <system_gclk_init+0x28>)
   29e7e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   29e80:	4b07      	ldr	r3, [pc, #28]	; (29ea0 <system_gclk_init+0x2c>)
   29e82:	2201      	movs	r2, #1
   29e84:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   29e86:	46c0      	nop			; (mov r8, r8)
   29e88:	4b05      	ldr	r3, [pc, #20]	; (29ea0 <system_gclk_init+0x2c>)
   29e8a:	781b      	ldrb	r3, [r3, #0]
   29e8c:	b2db      	uxtb	r3, r3
   29e8e:	001a      	movs	r2, r3
   29e90:	2301      	movs	r3, #1
   29e92:	4013      	ands	r3, r2
   29e94:	d1f8      	bne.n	29e88 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   29e96:	46c0      	nop			; (mov r8, r8)
   29e98:	46bd      	mov	sp, r7
   29e9a:	bd80      	pop	{r7, pc}
   29e9c:	00029dd1 	.word	0x00029dd1
   29ea0:	40000c00 	.word	0x40000c00

00029ea4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   29ea4:	b580      	push	{r7, lr}
   29ea6:	b086      	sub	sp, #24
   29ea8:	af00      	add	r7, sp, #0
   29eaa:	0002      	movs	r2, r0
   29eac:	6039      	str	r1, [r7, #0]
   29eae:	1dfb      	adds	r3, r7, #7
   29eb0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   29eb2:	1dfb      	adds	r3, r7, #7
   29eb4:	781b      	ldrb	r3, [r3, #0]
   29eb6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   29eb8:	1dfb      	adds	r3, r7, #7
   29eba:	781b      	ldrb	r3, [r3, #0]
   29ebc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   29ebe:	683b      	ldr	r3, [r7, #0]
   29ec0:	781b      	ldrb	r3, [r3, #0]
   29ec2:	021b      	lsls	r3, r3, #8
   29ec4:	001a      	movs	r2, r3
   29ec6:	697b      	ldr	r3, [r7, #20]
   29ec8:	4313      	orrs	r3, r2
   29eca:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   29ecc:	683b      	ldr	r3, [r7, #0]
   29ece:	785b      	ldrb	r3, [r3, #1]
   29ed0:	2b00      	cmp	r3, #0
   29ed2:	d004      	beq.n	29ede <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   29ed4:	697b      	ldr	r3, [r7, #20]
   29ed6:	2280      	movs	r2, #128	; 0x80
   29ed8:	02d2      	lsls	r2, r2, #11
   29eda:	4313      	orrs	r3, r2
   29edc:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   29ede:	683b      	ldr	r3, [r7, #0]
   29ee0:	7a5b      	ldrb	r3, [r3, #9]
   29ee2:	2b00      	cmp	r3, #0
   29ee4:	d004      	beq.n	29ef0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   29ee6:	697b      	ldr	r3, [r7, #20]
   29ee8:	2280      	movs	r2, #128	; 0x80
   29eea:	0312      	lsls	r2, r2, #12
   29eec:	4313      	orrs	r3, r2
   29eee:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   29ef0:	683b      	ldr	r3, [r7, #0]
   29ef2:	685b      	ldr	r3, [r3, #4]
   29ef4:	2b01      	cmp	r3, #1
   29ef6:	d92c      	bls.n	29f52 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   29ef8:	683b      	ldr	r3, [r7, #0]
   29efa:	685a      	ldr	r2, [r3, #4]
   29efc:	683b      	ldr	r3, [r7, #0]
   29efe:	685b      	ldr	r3, [r3, #4]
   29f00:	3b01      	subs	r3, #1
   29f02:	4013      	ands	r3, r2
   29f04:	d11a      	bne.n	29f3c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   29f06:	2300      	movs	r3, #0
   29f08:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   29f0a:	2302      	movs	r3, #2
   29f0c:	60bb      	str	r3, [r7, #8]
   29f0e:	e005      	b.n	29f1c <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   29f10:	68fb      	ldr	r3, [r7, #12]
   29f12:	3301      	adds	r3, #1
   29f14:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   29f16:	68bb      	ldr	r3, [r7, #8]
   29f18:	005b      	lsls	r3, r3, #1
   29f1a:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   29f1c:	683b      	ldr	r3, [r7, #0]
   29f1e:	685a      	ldr	r2, [r3, #4]
   29f20:	68bb      	ldr	r3, [r7, #8]
   29f22:	429a      	cmp	r2, r3
   29f24:	d8f4      	bhi.n	29f10 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   29f26:	68fb      	ldr	r3, [r7, #12]
   29f28:	021b      	lsls	r3, r3, #8
   29f2a:	693a      	ldr	r2, [r7, #16]
   29f2c:	4313      	orrs	r3, r2
   29f2e:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   29f30:	697b      	ldr	r3, [r7, #20]
   29f32:	2280      	movs	r2, #128	; 0x80
   29f34:	0352      	lsls	r2, r2, #13
   29f36:	4313      	orrs	r3, r2
   29f38:	617b      	str	r3, [r7, #20]
   29f3a:	e00a      	b.n	29f52 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   29f3c:	683b      	ldr	r3, [r7, #0]
   29f3e:	685b      	ldr	r3, [r3, #4]
   29f40:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   29f42:	693a      	ldr	r2, [r7, #16]
   29f44:	4313      	orrs	r3, r2
   29f46:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   29f48:	697b      	ldr	r3, [r7, #20]
   29f4a:	2280      	movs	r2, #128	; 0x80
   29f4c:	0292      	lsls	r2, r2, #10
   29f4e:	4313      	orrs	r3, r2
   29f50:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   29f52:	683b      	ldr	r3, [r7, #0]
   29f54:	7a1b      	ldrb	r3, [r3, #8]
   29f56:	2b00      	cmp	r3, #0
   29f58:	d004      	beq.n	29f64 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   29f5a:	697b      	ldr	r3, [r7, #20]
   29f5c:	2280      	movs	r2, #128	; 0x80
   29f5e:	0392      	lsls	r2, r2, #14
   29f60:	4313      	orrs	r3, r2
   29f62:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   29f64:	46c0      	nop			; (mov r8, r8)
   29f66:	4b13      	ldr	r3, [pc, #76]	; (29fb4 <system_gclk_gen_set_config+0x110>)
   29f68:	4798      	blx	r3
   29f6a:	1e03      	subs	r3, r0, #0
   29f6c:	d1fb      	bne.n	29f66 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29f6e:	4b12      	ldr	r3, [pc, #72]	; (29fb8 <system_gclk_gen_set_config+0x114>)
   29f70:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   29f72:	4a12      	ldr	r2, [pc, #72]	; (29fbc <system_gclk_gen_set_config+0x118>)
   29f74:	1dfb      	adds	r3, r7, #7
   29f76:	781b      	ldrb	r3, [r3, #0]
   29f78:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   29f7a:	46c0      	nop			; (mov r8, r8)
   29f7c:	4b0d      	ldr	r3, [pc, #52]	; (29fb4 <system_gclk_gen_set_config+0x110>)
   29f7e:	4798      	blx	r3
   29f80:	1e03      	subs	r3, r0, #0
   29f82:	d1fb      	bne.n	29f7c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   29f84:	4b0e      	ldr	r3, [pc, #56]	; (29fc0 <system_gclk_gen_set_config+0x11c>)
   29f86:	693a      	ldr	r2, [r7, #16]
   29f88:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   29f8a:	46c0      	nop			; (mov r8, r8)
   29f8c:	4b09      	ldr	r3, [pc, #36]	; (29fb4 <system_gclk_gen_set_config+0x110>)
   29f8e:	4798      	blx	r3
   29f90:	1e03      	subs	r3, r0, #0
   29f92:	d1fb      	bne.n	29f8c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   29f94:	4b0a      	ldr	r3, [pc, #40]	; (29fc0 <system_gclk_gen_set_config+0x11c>)
   29f96:	4a0a      	ldr	r2, [pc, #40]	; (29fc0 <system_gclk_gen_set_config+0x11c>)
   29f98:	6851      	ldr	r1, [r2, #4]
   29f9a:	2280      	movs	r2, #128	; 0x80
   29f9c:	0252      	lsls	r2, r2, #9
   29f9e:	4011      	ands	r1, r2
   29fa0:	697a      	ldr	r2, [r7, #20]
   29fa2:	430a      	orrs	r2, r1
   29fa4:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   29fa6:	4b07      	ldr	r3, [pc, #28]	; (29fc4 <system_gclk_gen_set_config+0x120>)
   29fa8:	4798      	blx	r3
}
   29faa:	46c0      	nop			; (mov r8, r8)
   29fac:	46bd      	mov	sp, r7
   29fae:	b006      	add	sp, #24
   29fb0:	bd80      	pop	{r7, pc}
   29fb2:	46c0      	nop			; (mov r8, r8)
   29fb4:	00029e55 	.word	0x00029e55
   29fb8:	00029e2d 	.word	0x00029e2d
   29fbc:	40000c08 	.word	0x40000c08
   29fc0:	40000c00 	.word	0x40000c00
   29fc4:	00029e41 	.word	0x00029e41

00029fc8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   29fc8:	b580      	push	{r7, lr}
   29fca:	b082      	sub	sp, #8
   29fcc:	af00      	add	r7, sp, #0
   29fce:	0002      	movs	r2, r0
   29fd0:	1dfb      	adds	r3, r7, #7
   29fd2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   29fd4:	46c0      	nop			; (mov r8, r8)
   29fd6:	4b0e      	ldr	r3, [pc, #56]	; (2a010 <system_gclk_gen_enable+0x48>)
   29fd8:	4798      	blx	r3
   29fda:	1e03      	subs	r3, r0, #0
   29fdc:	d1fb      	bne.n	29fd6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   29fde:	4b0d      	ldr	r3, [pc, #52]	; (2a014 <system_gclk_gen_enable+0x4c>)
   29fe0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   29fe2:	4a0d      	ldr	r2, [pc, #52]	; (2a018 <system_gclk_gen_enable+0x50>)
   29fe4:	1dfb      	adds	r3, r7, #7
   29fe6:	781b      	ldrb	r3, [r3, #0]
   29fe8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   29fea:	46c0      	nop			; (mov r8, r8)
   29fec:	4b08      	ldr	r3, [pc, #32]	; (2a010 <system_gclk_gen_enable+0x48>)
   29fee:	4798      	blx	r3
   29ff0:	1e03      	subs	r3, r0, #0
   29ff2:	d1fb      	bne.n	29fec <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   29ff4:	4b09      	ldr	r3, [pc, #36]	; (2a01c <system_gclk_gen_enable+0x54>)
   29ff6:	4a09      	ldr	r2, [pc, #36]	; (2a01c <system_gclk_gen_enable+0x54>)
   29ff8:	6852      	ldr	r2, [r2, #4]
   29ffa:	2180      	movs	r1, #128	; 0x80
   29ffc:	0249      	lsls	r1, r1, #9
   29ffe:	430a      	orrs	r2, r1
   2a000:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a002:	4b07      	ldr	r3, [pc, #28]	; (2a020 <system_gclk_gen_enable+0x58>)
   2a004:	4798      	blx	r3
}
   2a006:	46c0      	nop			; (mov r8, r8)
   2a008:	46bd      	mov	sp, r7
   2a00a:	b002      	add	sp, #8
   2a00c:	bd80      	pop	{r7, pc}
   2a00e:	46c0      	nop			; (mov r8, r8)
   2a010:	00029e55 	.word	0x00029e55
   2a014:	00029e2d 	.word	0x00029e2d
   2a018:	40000c04 	.word	0x40000c04
   2a01c:	40000c00 	.word	0x40000c00
   2a020:	00029e41 	.word	0x00029e41

0002a024 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2a024:	b580      	push	{r7, lr}
   2a026:	b086      	sub	sp, #24
   2a028:	af00      	add	r7, sp, #0
   2a02a:	0002      	movs	r2, r0
   2a02c:	1dfb      	adds	r3, r7, #7
   2a02e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a030:	46c0      	nop			; (mov r8, r8)
   2a032:	4b2a      	ldr	r3, [pc, #168]	; (2a0dc <system_gclk_gen_get_hz+0xb8>)
   2a034:	4798      	blx	r3
   2a036:	1e03      	subs	r3, r0, #0
   2a038:	d1fb      	bne.n	2a032 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a03a:	4b29      	ldr	r3, [pc, #164]	; (2a0e0 <system_gclk_gen_get_hz+0xbc>)
   2a03c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a03e:	4a29      	ldr	r2, [pc, #164]	; (2a0e4 <system_gclk_gen_get_hz+0xc0>)
   2a040:	1dfb      	adds	r3, r7, #7
   2a042:	781b      	ldrb	r3, [r3, #0]
   2a044:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a046:	46c0      	nop			; (mov r8, r8)
   2a048:	4b24      	ldr	r3, [pc, #144]	; (2a0dc <system_gclk_gen_get_hz+0xb8>)
   2a04a:	4798      	blx	r3
   2a04c:	1e03      	subs	r3, r0, #0
   2a04e:	d1fb      	bne.n	2a048 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2a050:	4b25      	ldr	r3, [pc, #148]	; (2a0e8 <system_gclk_gen_get_hz+0xc4>)
   2a052:	685b      	ldr	r3, [r3, #4]
   2a054:	04db      	lsls	r3, r3, #19
   2a056:	0edb      	lsrs	r3, r3, #27
   2a058:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2a05a:	0018      	movs	r0, r3
   2a05c:	4b23      	ldr	r3, [pc, #140]	; (2a0ec <system_gclk_gen_get_hz+0xc8>)
   2a05e:	4798      	blx	r3
   2a060:	0003      	movs	r3, r0
   2a062:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a064:	4a1f      	ldr	r2, [pc, #124]	; (2a0e4 <system_gclk_gen_get_hz+0xc0>)
   2a066:	1dfb      	adds	r3, r7, #7
   2a068:	781b      	ldrb	r3, [r3, #0]
   2a06a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2a06c:	4b1e      	ldr	r3, [pc, #120]	; (2a0e8 <system_gclk_gen_get_hz+0xc4>)
   2a06e:	685b      	ldr	r3, [r3, #4]
   2a070:	02db      	lsls	r3, r3, #11
   2a072:	0fdb      	lsrs	r3, r3, #31
   2a074:	b2da      	uxtb	r2, r3
   2a076:	2313      	movs	r3, #19
   2a078:	18fb      	adds	r3, r7, r3
   2a07a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a07c:	4a1c      	ldr	r2, [pc, #112]	; (2a0f0 <system_gclk_gen_get_hz+0xcc>)
   2a07e:	1dfb      	adds	r3, r7, #7
   2a080:	781b      	ldrb	r3, [r3, #0]
   2a082:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a084:	46c0      	nop			; (mov r8, r8)
   2a086:	4b15      	ldr	r3, [pc, #84]	; (2a0dc <system_gclk_gen_get_hz+0xb8>)
   2a088:	4798      	blx	r3
   2a08a:	1e03      	subs	r3, r0, #0
   2a08c:	d1fb      	bne.n	2a086 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2a08e:	4b16      	ldr	r3, [pc, #88]	; (2a0e8 <system_gclk_gen_get_hz+0xc4>)
   2a090:	689b      	ldr	r3, [r3, #8]
   2a092:	021b      	lsls	r3, r3, #8
   2a094:	0c1b      	lsrs	r3, r3, #16
   2a096:	b29b      	uxth	r3, r3
   2a098:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2a09a:	4b16      	ldr	r3, [pc, #88]	; (2a0f4 <system_gclk_gen_get_hz+0xd0>)
   2a09c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2a09e:	2313      	movs	r3, #19
   2a0a0:	18fb      	adds	r3, r7, r3
   2a0a2:	781b      	ldrb	r3, [r3, #0]
   2a0a4:	2b00      	cmp	r3, #0
   2a0a6:	d109      	bne.n	2a0bc <system_gclk_gen_get_hz+0x98>
   2a0a8:	68fb      	ldr	r3, [r7, #12]
   2a0aa:	2b01      	cmp	r3, #1
   2a0ac:	d906      	bls.n	2a0bc <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2a0ae:	4b12      	ldr	r3, [pc, #72]	; (2a0f8 <system_gclk_gen_get_hz+0xd4>)
   2a0b0:	68f9      	ldr	r1, [r7, #12]
   2a0b2:	6978      	ldr	r0, [r7, #20]
   2a0b4:	4798      	blx	r3
   2a0b6:	0003      	movs	r3, r0
   2a0b8:	617b      	str	r3, [r7, #20]
   2a0ba:	e00a      	b.n	2a0d2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2a0bc:	2313      	movs	r3, #19
   2a0be:	18fb      	adds	r3, r7, r3
   2a0c0:	781b      	ldrb	r3, [r3, #0]
   2a0c2:	2b00      	cmp	r3, #0
   2a0c4:	d005      	beq.n	2a0d2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2a0c6:	68fb      	ldr	r3, [r7, #12]
   2a0c8:	3301      	adds	r3, #1
   2a0ca:	697a      	ldr	r2, [r7, #20]
   2a0cc:	40da      	lsrs	r2, r3
   2a0ce:	0013      	movs	r3, r2
   2a0d0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2a0d2:	697b      	ldr	r3, [r7, #20]
}
   2a0d4:	0018      	movs	r0, r3
   2a0d6:	46bd      	mov	sp, r7
   2a0d8:	b006      	add	sp, #24
   2a0da:	bd80      	pop	{r7, pc}
   2a0dc:	00029e55 	.word	0x00029e55
   2a0e0:	00029e2d 	.word	0x00029e2d
   2a0e4:	40000c04 	.word	0x40000c04
   2a0e8:	40000c00 	.word	0x40000c00
   2a0ec:	00029785 	.word	0x00029785
   2a0f0:	40000c08 	.word	0x40000c08
   2a0f4:	00029e41 	.word	0x00029e41
   2a0f8:	00032c65 	.word	0x00032c65

0002a0fc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2a0fc:	b580      	push	{r7, lr}
   2a0fe:	b084      	sub	sp, #16
   2a100:	af00      	add	r7, sp, #0
   2a102:	0002      	movs	r2, r0
   2a104:	6039      	str	r1, [r7, #0]
   2a106:	1dfb      	adds	r3, r7, #7
   2a108:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2a10a:	1dfb      	adds	r3, r7, #7
   2a10c:	781b      	ldrb	r3, [r3, #0]
   2a10e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2a110:	683b      	ldr	r3, [r7, #0]
   2a112:	781b      	ldrb	r3, [r3, #0]
   2a114:	021b      	lsls	r3, r3, #8
   2a116:	001a      	movs	r2, r3
   2a118:	68fb      	ldr	r3, [r7, #12]
   2a11a:	4313      	orrs	r3, r2
   2a11c:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2a11e:	1dfb      	adds	r3, r7, #7
   2a120:	781b      	ldrb	r3, [r3, #0]
   2a122:	0018      	movs	r0, r3
   2a124:	4b04      	ldr	r3, [pc, #16]	; (2a138 <system_gclk_chan_set_config+0x3c>)
   2a126:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2a128:	4b04      	ldr	r3, [pc, #16]	; (2a13c <system_gclk_chan_set_config+0x40>)
   2a12a:	68fa      	ldr	r2, [r7, #12]
   2a12c:	b292      	uxth	r2, r2
   2a12e:	805a      	strh	r2, [r3, #2]
}
   2a130:	46c0      	nop			; (mov r8, r8)
   2a132:	46bd      	mov	sp, r7
   2a134:	b004      	add	sp, #16
   2a136:	bd80      	pop	{r7, pc}
   2a138:	0002a189 	.word	0x0002a189
   2a13c:	40000c00 	.word	0x40000c00

0002a140 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2a140:	b580      	push	{r7, lr}
   2a142:	b082      	sub	sp, #8
   2a144:	af00      	add	r7, sp, #0
   2a146:	0002      	movs	r2, r0
   2a148:	1dfb      	adds	r3, r7, #7
   2a14a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2a14c:	4b0a      	ldr	r3, [pc, #40]	; (2a178 <system_gclk_chan_enable+0x38>)
   2a14e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a150:	4a0a      	ldr	r2, [pc, #40]	; (2a17c <system_gclk_chan_enable+0x3c>)
   2a152:	1dfb      	adds	r3, r7, #7
   2a154:	781b      	ldrb	r3, [r3, #0]
   2a156:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2a158:	4909      	ldr	r1, [pc, #36]	; (2a180 <system_gclk_chan_enable+0x40>)
   2a15a:	4b09      	ldr	r3, [pc, #36]	; (2a180 <system_gclk_chan_enable+0x40>)
   2a15c:	885b      	ldrh	r3, [r3, #2]
   2a15e:	b29b      	uxth	r3, r3
   2a160:	2280      	movs	r2, #128	; 0x80
   2a162:	01d2      	lsls	r2, r2, #7
   2a164:	4313      	orrs	r3, r2
   2a166:	b29b      	uxth	r3, r3
   2a168:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2a16a:	4b06      	ldr	r3, [pc, #24]	; (2a184 <system_gclk_chan_enable+0x44>)
   2a16c:	4798      	blx	r3
}
   2a16e:	46c0      	nop			; (mov r8, r8)
   2a170:	46bd      	mov	sp, r7
   2a172:	b002      	add	sp, #8
   2a174:	bd80      	pop	{r7, pc}
   2a176:	46c0      	nop			; (mov r8, r8)
   2a178:	00029e2d 	.word	0x00029e2d
   2a17c:	40000c02 	.word	0x40000c02
   2a180:	40000c00 	.word	0x40000c00
   2a184:	00029e41 	.word	0x00029e41

0002a188 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2a188:	b580      	push	{r7, lr}
   2a18a:	b084      	sub	sp, #16
   2a18c:	af00      	add	r7, sp, #0
   2a18e:	0002      	movs	r2, r0
   2a190:	1dfb      	adds	r3, r7, #7
   2a192:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2a194:	4b1c      	ldr	r3, [pc, #112]	; (2a208 <system_gclk_chan_disable+0x80>)
   2a196:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a198:	4a1c      	ldr	r2, [pc, #112]	; (2a20c <system_gclk_chan_disable+0x84>)
   2a19a:	1dfb      	adds	r3, r7, #7
   2a19c:	781b      	ldrb	r3, [r3, #0]
   2a19e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2a1a0:	4b1b      	ldr	r3, [pc, #108]	; (2a210 <system_gclk_chan_disable+0x88>)
   2a1a2:	885b      	ldrh	r3, [r3, #2]
   2a1a4:	051b      	lsls	r3, r3, #20
   2a1a6:	0f1b      	lsrs	r3, r3, #28
   2a1a8:	b2db      	uxtb	r3, r3
   2a1aa:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2a1ac:	4a18      	ldr	r2, [pc, #96]	; (2a210 <system_gclk_chan_disable+0x88>)
   2a1ae:	8853      	ldrh	r3, [r2, #2]
   2a1b0:	4918      	ldr	r1, [pc, #96]	; (2a214 <system_gclk_chan_disable+0x8c>)
   2a1b2:	400b      	ands	r3, r1
   2a1b4:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2a1b6:	4a16      	ldr	r2, [pc, #88]	; (2a210 <system_gclk_chan_disable+0x88>)
   2a1b8:	4b15      	ldr	r3, [pc, #84]	; (2a210 <system_gclk_chan_disable+0x88>)
   2a1ba:	885b      	ldrh	r3, [r3, #2]
   2a1bc:	b29b      	uxth	r3, r3
   2a1be:	4916      	ldr	r1, [pc, #88]	; (2a218 <system_gclk_chan_disable+0x90>)
   2a1c0:	400b      	ands	r3, r1
   2a1c2:	b29b      	uxth	r3, r3
   2a1c4:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2a1c6:	46c0      	nop			; (mov r8, r8)
   2a1c8:	4b11      	ldr	r3, [pc, #68]	; (2a210 <system_gclk_chan_disable+0x88>)
   2a1ca:	885b      	ldrh	r3, [r3, #2]
   2a1cc:	b29b      	uxth	r3, r3
   2a1ce:	001a      	movs	r2, r3
   2a1d0:	2380      	movs	r3, #128	; 0x80
   2a1d2:	01db      	lsls	r3, r3, #7
   2a1d4:	4013      	ands	r3, r2
   2a1d6:	d1f7      	bne.n	2a1c8 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2a1d8:	4a0d      	ldr	r2, [pc, #52]	; (2a210 <system_gclk_chan_disable+0x88>)
   2a1da:	68fb      	ldr	r3, [r7, #12]
   2a1dc:	b2db      	uxtb	r3, r3
   2a1de:	1c19      	adds	r1, r3, #0
   2a1e0:	230f      	movs	r3, #15
   2a1e2:	400b      	ands	r3, r1
   2a1e4:	b2d9      	uxtb	r1, r3
   2a1e6:	8853      	ldrh	r3, [r2, #2]
   2a1e8:	1c08      	adds	r0, r1, #0
   2a1ea:	210f      	movs	r1, #15
   2a1ec:	4001      	ands	r1, r0
   2a1ee:	0208      	lsls	r0, r1, #8
   2a1f0:	4908      	ldr	r1, [pc, #32]	; (2a214 <system_gclk_chan_disable+0x8c>)
   2a1f2:	400b      	ands	r3, r1
   2a1f4:	1c19      	adds	r1, r3, #0
   2a1f6:	1c03      	adds	r3, r0, #0
   2a1f8:	430b      	orrs	r3, r1
   2a1fa:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2a1fc:	4b07      	ldr	r3, [pc, #28]	; (2a21c <system_gclk_chan_disable+0x94>)
   2a1fe:	4798      	blx	r3
}
   2a200:	46c0      	nop			; (mov r8, r8)
   2a202:	46bd      	mov	sp, r7
   2a204:	b004      	add	sp, #16
   2a206:	bd80      	pop	{r7, pc}
   2a208:	00029e2d 	.word	0x00029e2d
   2a20c:	40000c02 	.word	0x40000c02
   2a210:	40000c00 	.word	0x40000c00
   2a214:	fffff0ff 	.word	0xfffff0ff
   2a218:	ffffbfff 	.word	0xffffbfff
   2a21c:	00029e41 	.word	0x00029e41

0002a220 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2a220:	b580      	push	{r7, lr}
   2a222:	b084      	sub	sp, #16
   2a224:	af00      	add	r7, sp, #0
   2a226:	0002      	movs	r2, r0
   2a228:	1dfb      	adds	r3, r7, #7
   2a22a:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2a22c:	4b0d      	ldr	r3, [pc, #52]	; (2a264 <system_gclk_chan_get_hz+0x44>)
   2a22e:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2a230:	4a0d      	ldr	r2, [pc, #52]	; (2a268 <system_gclk_chan_get_hz+0x48>)
   2a232:	1dfb      	adds	r3, r7, #7
   2a234:	781b      	ldrb	r3, [r3, #0]
   2a236:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2a238:	4b0c      	ldr	r3, [pc, #48]	; (2a26c <system_gclk_chan_get_hz+0x4c>)
   2a23a:	885b      	ldrh	r3, [r3, #2]
   2a23c:	051b      	lsls	r3, r3, #20
   2a23e:	0f1b      	lsrs	r3, r3, #28
   2a240:	b2da      	uxtb	r2, r3
   2a242:	230f      	movs	r3, #15
   2a244:	18fb      	adds	r3, r7, r3
   2a246:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2a248:	4b09      	ldr	r3, [pc, #36]	; (2a270 <system_gclk_chan_get_hz+0x50>)
   2a24a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2a24c:	230f      	movs	r3, #15
   2a24e:	18fb      	adds	r3, r7, r3
   2a250:	781b      	ldrb	r3, [r3, #0]
   2a252:	0018      	movs	r0, r3
   2a254:	4b07      	ldr	r3, [pc, #28]	; (2a274 <system_gclk_chan_get_hz+0x54>)
   2a256:	4798      	blx	r3
   2a258:	0003      	movs	r3, r0
}
   2a25a:	0018      	movs	r0, r3
   2a25c:	46bd      	mov	sp, r7
   2a25e:	b004      	add	sp, #16
   2a260:	bd80      	pop	{r7, pc}
   2a262:	46c0      	nop			; (mov r8, r8)
   2a264:	00029e2d 	.word	0x00029e2d
   2a268:	40000c02 	.word	0x40000c02
   2a26c:	40000c00 	.word	0x40000c00
   2a270:	00029e41 	.word	0x00029e41
   2a274:	0002a025 	.word	0x0002a025

0002a278 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2a278:	b580      	push	{r7, lr}
   2a27a:	b084      	sub	sp, #16
   2a27c:	af00      	add	r7, sp, #0
   2a27e:	0002      	movs	r2, r0
   2a280:	1dfb      	adds	r3, r7, #7
   2a282:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2a284:	230f      	movs	r3, #15
   2a286:	18fb      	adds	r3, r7, r3
   2a288:	2200      	movs	r2, #0
   2a28a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2a28c:	1dfb      	adds	r3, r7, #7
   2a28e:	781b      	ldrb	r3, [r3, #0]
   2a290:	2b7f      	cmp	r3, #127	; 0x7f
   2a292:	d80b      	bhi.n	2a2ac <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2a294:	4a13      	ldr	r2, [pc, #76]	; (2a2e4 <system_interrupt_clear_pending+0x6c>)
   2a296:	1dfb      	adds	r3, r7, #7
   2a298:	781b      	ldrb	r3, [r3, #0]
   2a29a:	b25b      	sxtb	r3, r3
   2a29c:	2101      	movs	r1, #1
   2a29e:	4099      	lsls	r1, r3
   2a2a0:	000b      	movs	r3, r1
   2a2a2:	0019      	movs	r1, r3
   2a2a4:	23c0      	movs	r3, #192	; 0xc0
   2a2a6:	005b      	lsls	r3, r3, #1
   2a2a8:	50d1      	str	r1, [r2, r3]
   2a2aa:	e014      	b.n	2a2d6 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2a2ac:	1dfb      	adds	r3, r7, #7
   2a2ae:	781b      	ldrb	r3, [r3, #0]
   2a2b0:	b25b      	sxtb	r3, r3
   2a2b2:	330e      	adds	r3, #14
   2a2b4:	d101      	bne.n	2a2ba <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2a2b6:	2317      	movs	r3, #23
   2a2b8:	e010      	b.n	2a2dc <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2a2ba:	1dfb      	adds	r3, r7, #7
   2a2bc:	781b      	ldrb	r3, [r3, #0]
   2a2be:	b25b      	sxtb	r3, r3
   2a2c0:	3301      	adds	r3, #1
   2a2c2:	d104      	bne.n	2a2ce <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2a2c4:	4b08      	ldr	r3, [pc, #32]	; (2a2e8 <system_interrupt_clear_pending+0x70>)
   2a2c6:	2280      	movs	r2, #128	; 0x80
   2a2c8:	0492      	lsls	r2, r2, #18
   2a2ca:	605a      	str	r2, [r3, #4]
   2a2cc:	e003      	b.n	2a2d6 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2a2ce:	230f      	movs	r3, #15
   2a2d0:	18fb      	adds	r3, r7, r3
   2a2d2:	2217      	movs	r2, #23
   2a2d4:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2a2d6:	230f      	movs	r3, #15
   2a2d8:	18fb      	adds	r3, r7, r3
   2a2da:	781b      	ldrb	r3, [r3, #0]
}
   2a2dc:	0018      	movs	r0, r3
   2a2de:	46bd      	mov	sp, r7
   2a2e0:	b004      	add	sp, #16
   2a2e2:	bd80      	pop	{r7, pc}
   2a2e4:	e000e100 	.word	0xe000e100
   2a2e8:	e000ed00 	.word	0xe000ed00

0002a2ec <system_pinmux_get_group_from_gpio_pin>:
{
   2a2ec:	b580      	push	{r7, lr}
   2a2ee:	b084      	sub	sp, #16
   2a2f0:	af00      	add	r7, sp, #0
   2a2f2:	0002      	movs	r2, r0
   2a2f4:	1dfb      	adds	r3, r7, #7
   2a2f6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2a2f8:	230f      	movs	r3, #15
   2a2fa:	18fb      	adds	r3, r7, r3
   2a2fc:	1dfa      	adds	r2, r7, #7
   2a2fe:	7812      	ldrb	r2, [r2, #0]
   2a300:	09d2      	lsrs	r2, r2, #7
   2a302:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2a304:	230e      	movs	r3, #14
   2a306:	18fb      	adds	r3, r7, r3
   2a308:	1dfa      	adds	r2, r7, #7
   2a30a:	7812      	ldrb	r2, [r2, #0]
   2a30c:	0952      	lsrs	r2, r2, #5
   2a30e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2a310:	4b0d      	ldr	r3, [pc, #52]	; (2a348 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2a312:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2a314:	230f      	movs	r3, #15
   2a316:	18fb      	adds	r3, r7, r3
   2a318:	781b      	ldrb	r3, [r3, #0]
   2a31a:	2b00      	cmp	r3, #0
   2a31c:	d10f      	bne.n	2a33e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2a31e:	230f      	movs	r3, #15
   2a320:	18fb      	adds	r3, r7, r3
   2a322:	781b      	ldrb	r3, [r3, #0]
   2a324:	009b      	lsls	r3, r3, #2
   2a326:	2210      	movs	r2, #16
   2a328:	4694      	mov	ip, r2
   2a32a:	44bc      	add	ip, r7
   2a32c:	4463      	add	r3, ip
   2a32e:	3b08      	subs	r3, #8
   2a330:	681a      	ldr	r2, [r3, #0]
   2a332:	230e      	movs	r3, #14
   2a334:	18fb      	adds	r3, r7, r3
   2a336:	781b      	ldrb	r3, [r3, #0]
   2a338:	01db      	lsls	r3, r3, #7
   2a33a:	18d3      	adds	r3, r2, r3
   2a33c:	e000      	b.n	2a340 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2a33e:	2300      	movs	r3, #0
}
   2a340:	0018      	movs	r0, r3
   2a342:	46bd      	mov	sp, r7
   2a344:	b004      	add	sp, #16
   2a346:	bd80      	pop	{r7, pc}
   2a348:	41004400 	.word	0x41004400

0002a34c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2a34c:	b580      	push	{r7, lr}
   2a34e:	b088      	sub	sp, #32
   2a350:	af00      	add	r7, sp, #0
   2a352:	60f8      	str	r0, [r7, #12]
   2a354:	60b9      	str	r1, [r7, #8]
   2a356:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2a358:	2300      	movs	r3, #0
   2a35a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2a35c:	687b      	ldr	r3, [r7, #4]
   2a35e:	78db      	ldrb	r3, [r3, #3]
   2a360:	2201      	movs	r2, #1
   2a362:	4053      	eors	r3, r2
   2a364:	b2db      	uxtb	r3, r3
   2a366:	2b00      	cmp	r3, #0
   2a368:	d035      	beq.n	2a3d6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2a36a:	687b      	ldr	r3, [r7, #4]
   2a36c:	781b      	ldrb	r3, [r3, #0]
   2a36e:	2b80      	cmp	r3, #128	; 0x80
   2a370:	d00b      	beq.n	2a38a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2a372:	69fb      	ldr	r3, [r7, #28]
   2a374:	2280      	movs	r2, #128	; 0x80
   2a376:	0252      	lsls	r2, r2, #9
   2a378:	4313      	orrs	r3, r2
   2a37a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2a37c:	687b      	ldr	r3, [r7, #4]
   2a37e:	781b      	ldrb	r3, [r3, #0]
   2a380:	061b      	lsls	r3, r3, #24
   2a382:	001a      	movs	r2, r3
   2a384:	69fb      	ldr	r3, [r7, #28]
   2a386:	4313      	orrs	r3, r2
   2a388:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2a38a:	687b      	ldr	r3, [r7, #4]
   2a38c:	785b      	ldrb	r3, [r3, #1]
   2a38e:	2b00      	cmp	r3, #0
   2a390:	d003      	beq.n	2a39a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a392:	687b      	ldr	r3, [r7, #4]
   2a394:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2a396:	2b02      	cmp	r3, #2
   2a398:	d110      	bne.n	2a3bc <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2a39a:	69fb      	ldr	r3, [r7, #28]
   2a39c:	2280      	movs	r2, #128	; 0x80
   2a39e:	0292      	lsls	r2, r2, #10
   2a3a0:	4313      	orrs	r3, r2
   2a3a2:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2a3a4:	687b      	ldr	r3, [r7, #4]
   2a3a6:	789b      	ldrb	r3, [r3, #2]
   2a3a8:	2b00      	cmp	r3, #0
   2a3aa:	d004      	beq.n	2a3b6 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2a3ac:	69fb      	ldr	r3, [r7, #28]
   2a3ae:	2280      	movs	r2, #128	; 0x80
   2a3b0:	02d2      	lsls	r2, r2, #11
   2a3b2:	4313      	orrs	r3, r2
   2a3b4:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2a3b6:	68fb      	ldr	r3, [r7, #12]
   2a3b8:	68ba      	ldr	r2, [r7, #8]
   2a3ba:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a3bc:	687b      	ldr	r3, [r7, #4]
   2a3be:	785b      	ldrb	r3, [r3, #1]
   2a3c0:	2b01      	cmp	r3, #1
   2a3c2:	d003      	beq.n	2a3cc <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a3c4:	687b      	ldr	r3, [r7, #4]
   2a3c6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a3c8:	2b02      	cmp	r3, #2
   2a3ca:	d107      	bne.n	2a3dc <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2a3cc:	69fb      	ldr	r3, [r7, #28]
   2a3ce:	4a22      	ldr	r2, [pc, #136]	; (2a458 <_system_pinmux_config+0x10c>)
   2a3d0:	4013      	ands	r3, r2
   2a3d2:	61fb      	str	r3, [r7, #28]
   2a3d4:	e002      	b.n	2a3dc <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2a3d6:	68fb      	ldr	r3, [r7, #12]
   2a3d8:	68ba      	ldr	r2, [r7, #8]
   2a3da:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2a3dc:	68bb      	ldr	r3, [r7, #8]
   2a3de:	041b      	lsls	r3, r3, #16
   2a3e0:	0c1b      	lsrs	r3, r3, #16
   2a3e2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2a3e4:	68bb      	ldr	r3, [r7, #8]
   2a3e6:	0c1b      	lsrs	r3, r3, #16
   2a3e8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a3ea:	69ba      	ldr	r2, [r7, #24]
   2a3ec:	69fb      	ldr	r3, [r7, #28]
   2a3ee:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2a3f0:	22a0      	movs	r2, #160	; 0xa0
   2a3f2:	05d2      	lsls	r2, r2, #23
   2a3f4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a3f6:	68fb      	ldr	r3, [r7, #12]
   2a3f8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a3fa:	697a      	ldr	r2, [r7, #20]
   2a3fc:	69fb      	ldr	r3, [r7, #28]
   2a3fe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2a400:	22d0      	movs	r2, #208	; 0xd0
   2a402:	0612      	lsls	r2, r2, #24
   2a404:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2a406:	68fb      	ldr	r3, [r7, #12]
   2a408:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2a40a:	687b      	ldr	r3, [r7, #4]
   2a40c:	78db      	ldrb	r3, [r3, #3]
   2a40e:	2201      	movs	r2, #1
   2a410:	4053      	eors	r3, r2
   2a412:	b2db      	uxtb	r3, r3
   2a414:	2b00      	cmp	r3, #0
   2a416:	d01a      	beq.n	2a44e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2a418:	69fa      	ldr	r2, [r7, #28]
   2a41a:	2380      	movs	r3, #128	; 0x80
   2a41c:	02db      	lsls	r3, r3, #11
   2a41e:	4013      	ands	r3, r2
   2a420:	d00a      	beq.n	2a438 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2a422:	687b      	ldr	r3, [r7, #4]
   2a424:	789b      	ldrb	r3, [r3, #2]
   2a426:	2b01      	cmp	r3, #1
   2a428:	d103      	bne.n	2a432 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2a42a:	68fb      	ldr	r3, [r7, #12]
   2a42c:	68ba      	ldr	r2, [r7, #8]
   2a42e:	619a      	str	r2, [r3, #24]
   2a430:	e002      	b.n	2a438 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2a432:	68fb      	ldr	r3, [r7, #12]
   2a434:	68ba      	ldr	r2, [r7, #8]
   2a436:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a438:	687b      	ldr	r3, [r7, #4]
   2a43a:	785b      	ldrb	r3, [r3, #1]
   2a43c:	2b01      	cmp	r3, #1
   2a43e:	d003      	beq.n	2a448 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2a440:	687b      	ldr	r3, [r7, #4]
   2a442:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2a444:	2b02      	cmp	r3, #2
   2a446:	d102      	bne.n	2a44e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2a448:	68fb      	ldr	r3, [r7, #12]
   2a44a:	68ba      	ldr	r2, [r7, #8]
   2a44c:	609a      	str	r2, [r3, #8]
		}
	}
}
   2a44e:	46c0      	nop			; (mov r8, r8)
   2a450:	46bd      	mov	sp, r7
   2a452:	b008      	add	sp, #32
   2a454:	bd80      	pop	{r7, pc}
   2a456:	46c0      	nop			; (mov r8, r8)
   2a458:	fffbffff 	.word	0xfffbffff

0002a45c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2a45c:	b580      	push	{r7, lr}
   2a45e:	b084      	sub	sp, #16
   2a460:	af00      	add	r7, sp, #0
   2a462:	0002      	movs	r2, r0
   2a464:	6039      	str	r1, [r7, #0]
   2a466:	1dfb      	adds	r3, r7, #7
   2a468:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2a46a:	1dfb      	adds	r3, r7, #7
   2a46c:	781b      	ldrb	r3, [r3, #0]
   2a46e:	0018      	movs	r0, r3
   2a470:	4b0a      	ldr	r3, [pc, #40]	; (2a49c <system_pinmux_pin_set_config+0x40>)
   2a472:	4798      	blx	r3
   2a474:	0003      	movs	r3, r0
   2a476:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2a478:	1dfb      	adds	r3, r7, #7
   2a47a:	781b      	ldrb	r3, [r3, #0]
   2a47c:	221f      	movs	r2, #31
   2a47e:	4013      	ands	r3, r2
   2a480:	2201      	movs	r2, #1
   2a482:	409a      	lsls	r2, r3
   2a484:	0013      	movs	r3, r2
   2a486:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2a488:	683a      	ldr	r2, [r7, #0]
   2a48a:	68b9      	ldr	r1, [r7, #8]
   2a48c:	68fb      	ldr	r3, [r7, #12]
   2a48e:	0018      	movs	r0, r3
   2a490:	4b03      	ldr	r3, [pc, #12]	; (2a4a0 <system_pinmux_pin_set_config+0x44>)
   2a492:	4798      	blx	r3
}
   2a494:	46c0      	nop			; (mov r8, r8)
   2a496:	46bd      	mov	sp, r7
   2a498:	b004      	add	sp, #16
   2a49a:	bd80      	pop	{r7, pc}
   2a49c:	0002a2ed 	.word	0x0002a2ed
   2a4a0:	0002a34d 	.word	0x0002a34d

0002a4a4 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2a4a4:	b580      	push	{r7, lr}
   2a4a6:	af00      	add	r7, sp, #0
	return;
   2a4a8:	46c0      	nop			; (mov r8, r8)
}
   2a4aa:	46bd      	mov	sp, r7
   2a4ac:	bd80      	pop	{r7, pc}
	...

0002a4b0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2a4b0:	b580      	push	{r7, lr}
   2a4b2:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2a4b4:	4b06      	ldr	r3, [pc, #24]	; (2a4d0 <system_init+0x20>)
   2a4b6:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2a4b8:	4b06      	ldr	r3, [pc, #24]	; (2a4d4 <system_init+0x24>)
   2a4ba:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2a4bc:	4b06      	ldr	r3, [pc, #24]	; (2a4d8 <system_init+0x28>)
   2a4be:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2a4c0:	4b06      	ldr	r3, [pc, #24]	; (2a4dc <system_init+0x2c>)
   2a4c2:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2a4c4:	4b06      	ldr	r3, [pc, #24]	; (2a4e0 <system_init+0x30>)
   2a4c6:	4798      	blx	r3
}
   2a4c8:	46c0      	nop			; (mov r8, r8)
   2a4ca:	46bd      	mov	sp, r7
   2a4cc:	bd80      	pop	{r7, pc}
   2a4ce:	46c0      	nop			; (mov r8, r8)
   2a4d0:	00029b31 	.word	0x00029b31
   2a4d4:	000265f9 	.word	0x000265f9
   2a4d8:	00012669 	.word	0x00012669
   2a4dc:	000269d1 	.word	0x000269d1
   2a4e0:	0002a4a5 	.word	0x0002a4a5

0002a4e4 <system_gclk_chan_get_config_defaults>:
{
   2a4e4:	b580      	push	{r7, lr}
   2a4e6:	b082      	sub	sp, #8
   2a4e8:	af00      	add	r7, sp, #0
   2a4ea:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a4ec:	687b      	ldr	r3, [r7, #4]
   2a4ee:	2200      	movs	r2, #0
   2a4f0:	701a      	strb	r2, [r3, #0]
}
   2a4f2:	46c0      	nop			; (mov r8, r8)
   2a4f4:	46bd      	mov	sp, r7
   2a4f6:	b002      	add	sp, #8
   2a4f8:	bd80      	pop	{r7, pc}
	...

0002a4fc <system_apb_clock_set_mask>:
{
   2a4fc:	b580      	push	{r7, lr}
   2a4fe:	b082      	sub	sp, #8
   2a500:	af00      	add	r7, sp, #0
   2a502:	0002      	movs	r2, r0
   2a504:	6039      	str	r1, [r7, #0]
   2a506:	1dfb      	adds	r3, r7, #7
   2a508:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a50a:	1dfb      	adds	r3, r7, #7
   2a50c:	781b      	ldrb	r3, [r3, #0]
   2a50e:	2b01      	cmp	r3, #1
   2a510:	d00a      	beq.n	2a528 <system_apb_clock_set_mask+0x2c>
   2a512:	2b02      	cmp	r3, #2
   2a514:	d00f      	beq.n	2a536 <system_apb_clock_set_mask+0x3a>
   2a516:	2b00      	cmp	r3, #0
   2a518:	d114      	bne.n	2a544 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a51a:	4b0e      	ldr	r3, [pc, #56]	; (2a554 <system_apb_clock_set_mask+0x58>)
   2a51c:	4a0d      	ldr	r2, [pc, #52]	; (2a554 <system_apb_clock_set_mask+0x58>)
   2a51e:	6991      	ldr	r1, [r2, #24]
   2a520:	683a      	ldr	r2, [r7, #0]
   2a522:	430a      	orrs	r2, r1
   2a524:	619a      	str	r2, [r3, #24]
			break;
   2a526:	e00f      	b.n	2a548 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a528:	4b0a      	ldr	r3, [pc, #40]	; (2a554 <system_apb_clock_set_mask+0x58>)
   2a52a:	4a0a      	ldr	r2, [pc, #40]	; (2a554 <system_apb_clock_set_mask+0x58>)
   2a52c:	69d1      	ldr	r1, [r2, #28]
   2a52e:	683a      	ldr	r2, [r7, #0]
   2a530:	430a      	orrs	r2, r1
   2a532:	61da      	str	r2, [r3, #28]
			break;
   2a534:	e008      	b.n	2a548 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a536:	4b07      	ldr	r3, [pc, #28]	; (2a554 <system_apb_clock_set_mask+0x58>)
   2a538:	4a06      	ldr	r2, [pc, #24]	; (2a554 <system_apb_clock_set_mask+0x58>)
   2a53a:	6a11      	ldr	r1, [r2, #32]
   2a53c:	683a      	ldr	r2, [r7, #0]
   2a53e:	430a      	orrs	r2, r1
   2a540:	621a      	str	r2, [r3, #32]
			break;
   2a542:	e001      	b.n	2a548 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a544:	2317      	movs	r3, #23
   2a546:	e000      	b.n	2a54a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a548:	2300      	movs	r3, #0
}
   2a54a:	0018      	movs	r0, r3
   2a54c:	46bd      	mov	sp, r7
   2a54e:	b002      	add	sp, #8
   2a550:	bd80      	pop	{r7, pc}
   2a552:	46c0      	nop			; (mov r8, r8)
   2a554:	40000400 	.word	0x40000400

0002a558 <system_pinmux_get_config_defaults>:
{
   2a558:	b580      	push	{r7, lr}
   2a55a:	b082      	sub	sp, #8
   2a55c:	af00      	add	r7, sp, #0
   2a55e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2a560:	687b      	ldr	r3, [r7, #4]
   2a562:	2280      	movs	r2, #128	; 0x80
   2a564:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2a566:	687b      	ldr	r3, [r7, #4]
   2a568:	2200      	movs	r2, #0
   2a56a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2a56c:	687b      	ldr	r3, [r7, #4]
   2a56e:	2201      	movs	r2, #1
   2a570:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2a572:	687b      	ldr	r3, [r7, #4]
   2a574:	2200      	movs	r2, #0
   2a576:	70da      	strb	r2, [r3, #3]
}
   2a578:	46c0      	nop			; (mov r8, r8)
   2a57a:	46bd      	mov	sp, r7
   2a57c:	b002      	add	sp, #8
   2a57e:	bd80      	pop	{r7, pc}

0002a580 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2a580:	b580      	push	{r7, lr}
   2a582:	b084      	sub	sp, #16
   2a584:	af00      	add	r7, sp, #0
   2a586:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a588:	2300      	movs	r3, #0
   2a58a:	60fb      	str	r3, [r7, #12]
   2a58c:	e00c      	b.n	2a5a8 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2a58e:	4b0a      	ldr	r3, [pc, #40]	; (2a5b8 <_tcc_get_inst_index+0x38>)
   2a590:	68fa      	ldr	r2, [r7, #12]
   2a592:	0092      	lsls	r2, r2, #2
   2a594:	58d2      	ldr	r2, [r2, r3]
   2a596:	687b      	ldr	r3, [r7, #4]
   2a598:	429a      	cmp	r2, r3
   2a59a:	d102      	bne.n	2a5a2 <_tcc_get_inst_index+0x22>
			return i;
   2a59c:	68fb      	ldr	r3, [r7, #12]
   2a59e:	b2db      	uxtb	r3, r3
   2a5a0:	e006      	b.n	2a5b0 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2a5a2:	68fb      	ldr	r3, [r7, #12]
   2a5a4:	3301      	adds	r3, #1
   2a5a6:	60fb      	str	r3, [r7, #12]
   2a5a8:	68fb      	ldr	r3, [r7, #12]
   2a5aa:	2b02      	cmp	r3, #2
   2a5ac:	d9ef      	bls.n	2a58e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2a5ae:	2300      	movs	r3, #0
}
   2a5b0:	0018      	movs	r0, r3
   2a5b2:	46bd      	mov	sp, r7
   2a5b4:	b004      	add	sp, #16
   2a5b6:	bd80      	pop	{r7, pc}
   2a5b8:	0003969c 	.word	0x0003969c

0002a5bc <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2a5bc:	b590      	push	{r4, r7, lr}
   2a5be:	b085      	sub	sp, #20
   2a5c0:	af00      	add	r7, sp, #0
   2a5c2:	6078      	str	r0, [r7, #4]
   2a5c4:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2a5c6:	230f      	movs	r3, #15
   2a5c8:	18fc      	adds	r4, r7, r3
   2a5ca:	683b      	ldr	r3, [r7, #0]
   2a5cc:	0018      	movs	r0, r3
   2a5ce:	4bad      	ldr	r3, [pc, #692]	; (2a884 <tcc_get_config_defaults+0x2c8>)
   2a5d0:	4798      	blx	r3
   2a5d2:	0003      	movs	r3, r0
   2a5d4:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2a5d6:	687b      	ldr	r3, [r7, #4]
   2a5d8:	2200      	movs	r2, #0
   2a5da:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2a5dc:	230f      	movs	r3, #15
   2a5de:	18fb      	adds	r3, r7, r3
   2a5e0:	781a      	ldrb	r2, [r3, #0]
   2a5e2:	4ba9      	ldr	r3, [pc, #676]	; (2a888 <tcc_get_config_defaults+0x2cc>)
   2a5e4:	0092      	lsls	r2, r2, #2
   2a5e6:	58d2      	ldr	r2, [r2, r3]
   2a5e8:	687b      	ldr	r3, [r7, #4]
   2a5ea:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2a5ec:	687b      	ldr	r3, [r7, #4]
   2a5ee:	2200      	movs	r2, #0
   2a5f0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2a5f2:	687b      	ldr	r3, [r7, #4]
   2a5f4:	2200      	movs	r2, #0
   2a5f6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2a5f8:	687b      	ldr	r3, [r7, #4]
   2a5fa:	2200      	movs	r2, #0
   2a5fc:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2a5fe:	687b      	ldr	r3, [r7, #4]
   2a600:	2200      	movs	r2, #0
   2a602:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2a604:	687b      	ldr	r3, [r7, #4]
   2a606:	2200      	movs	r2, #0
   2a608:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a60a:	687b      	ldr	r3, [r7, #4]
   2a60c:	2200      	movs	r2, #0
   2a60e:	61da      	str	r2, [r3, #28]
   2a610:	687b      	ldr	r3, [r7, #4]
   2a612:	2200      	movs	r2, #0
   2a614:	621a      	str	r2, [r3, #32]
   2a616:	687b      	ldr	r3, [r7, #4]
   2a618:	2200      	movs	r2, #0
   2a61a:	625a      	str	r2, [r3, #36]	; 0x24
   2a61c:	687b      	ldr	r3, [r7, #4]
   2a61e:	2200      	movs	r2, #0
   2a620:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a622:	687b      	ldr	r3, [r7, #4]
   2a624:	2200      	movs	r2, #0
   2a626:	751a      	strb	r2, [r3, #20]
   2a628:	687b      	ldr	r3, [r7, #4]
   2a62a:	2200      	movs	r2, #0
   2a62c:	755a      	strb	r2, [r3, #21]
   2a62e:	687b      	ldr	r3, [r7, #4]
   2a630:	2200      	movs	r2, #0
   2a632:	759a      	strb	r2, [r3, #22]
   2a634:	687b      	ldr	r3, [r7, #4]
   2a636:	2200      	movs	r2, #0
   2a638:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2a63a:	687b      	ldr	r3, [r7, #4]
   2a63c:	2200      	movs	r2, #0
   2a63e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2a640:	687b      	ldr	r3, [r7, #4]
   2a642:	2200      	movs	r2, #0
   2a644:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2a646:	687b      	ldr	r3, [r7, #4]
   2a648:	2200      	movs	r2, #0
   2a64a:	741a      	strb	r2, [r3, #16]
   2a64c:	687b      	ldr	r3, [r7, #4]
   2a64e:	2200      	movs	r2, #0
   2a650:	745a      	strb	r2, [r3, #17]
   2a652:	687b      	ldr	r3, [r7, #4]
   2a654:	2200      	movs	r2, #0
   2a656:	749a      	strb	r2, [r3, #18]
   2a658:	687b      	ldr	r3, [r7, #4]
   2a65a:	2200      	movs	r2, #0
   2a65c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2a65e:	687b      	ldr	r3, [r7, #4]
   2a660:	222c      	movs	r2, #44	; 0x2c
   2a662:	2100      	movs	r1, #0
   2a664:	5499      	strb	r1, [r3, r2]
   2a666:	687b      	ldr	r3, [r7, #4]
   2a668:	222d      	movs	r2, #45	; 0x2d
   2a66a:	2100      	movs	r1, #0
   2a66c:	5499      	strb	r1, [r3, r2]
   2a66e:	687b      	ldr	r3, [r7, #4]
   2a670:	222e      	movs	r2, #46	; 0x2e
   2a672:	2100      	movs	r1, #0
   2a674:	5499      	strb	r1, [r3, r2]
   2a676:	687b      	ldr	r3, [r7, #4]
   2a678:	222f      	movs	r2, #47	; 0x2f
   2a67a:	2100      	movs	r1, #0
   2a67c:	5499      	strb	r1, [r3, r2]
   2a67e:	687b      	ldr	r3, [r7, #4]
   2a680:	2230      	movs	r2, #48	; 0x30
   2a682:	2100      	movs	r1, #0
   2a684:	5499      	strb	r1, [r3, r2]
   2a686:	687b      	ldr	r3, [r7, #4]
   2a688:	2231      	movs	r2, #49	; 0x31
   2a68a:	2100      	movs	r1, #0
   2a68c:	5499      	strb	r1, [r3, r2]
   2a68e:	687b      	ldr	r3, [r7, #4]
   2a690:	2232      	movs	r2, #50	; 0x32
   2a692:	2100      	movs	r1, #0
   2a694:	5499      	strb	r1, [r3, r2]
   2a696:	687b      	ldr	r3, [r7, #4]
   2a698:	2233      	movs	r2, #51	; 0x33
   2a69a:	2100      	movs	r1, #0
   2a69c:	5499      	strb	r1, [r3, r2]
   2a69e:	687b      	ldr	r3, [r7, #4]
   2a6a0:	2234      	movs	r2, #52	; 0x34
   2a6a2:	2100      	movs	r1, #0
   2a6a4:	5499      	strb	r1, [r3, r2]
   2a6a6:	687b      	ldr	r3, [r7, #4]
   2a6a8:	2235      	movs	r2, #53	; 0x35
   2a6aa:	2100      	movs	r1, #0
   2a6ac:	5499      	strb	r1, [r3, r2]
   2a6ae:	687b      	ldr	r3, [r7, #4]
   2a6b0:	2236      	movs	r2, #54	; 0x36
   2a6b2:	2100      	movs	r1, #0
   2a6b4:	5499      	strb	r1, [r3, r2]
   2a6b6:	687b      	ldr	r3, [r7, #4]
   2a6b8:	2237      	movs	r2, #55	; 0x37
   2a6ba:	2100      	movs	r1, #0
   2a6bc:	5499      	strb	r1, [r3, r2]
   2a6be:	687b      	ldr	r3, [r7, #4]
   2a6c0:	2238      	movs	r2, #56	; 0x38
   2a6c2:	2100      	movs	r1, #0
   2a6c4:	5499      	strb	r1, [r3, r2]
   2a6c6:	687b      	ldr	r3, [r7, #4]
   2a6c8:	2239      	movs	r2, #57	; 0x39
   2a6ca:	2100      	movs	r1, #0
   2a6cc:	5499      	strb	r1, [r3, r2]
   2a6ce:	687b      	ldr	r3, [r7, #4]
   2a6d0:	223a      	movs	r2, #58	; 0x3a
   2a6d2:	2100      	movs	r1, #0
   2a6d4:	5499      	strb	r1, [r3, r2]
   2a6d6:	687b      	ldr	r3, [r7, #4]
   2a6d8:	223b      	movs	r2, #59	; 0x3b
   2a6da:	2100      	movs	r1, #0
   2a6dc:	5499      	strb	r1, [r3, r2]
   2a6de:	687b      	ldr	r3, [r7, #4]
   2a6e0:	223c      	movs	r2, #60	; 0x3c
   2a6e2:	2100      	movs	r1, #0
   2a6e4:	5499      	strb	r1, [r3, r2]
   2a6e6:	687b      	ldr	r3, [r7, #4]
   2a6e8:	223d      	movs	r2, #61	; 0x3d
   2a6ea:	2100      	movs	r1, #0
   2a6ec:	5499      	strb	r1, [r3, r2]
   2a6ee:	687b      	ldr	r3, [r7, #4]
   2a6f0:	223e      	movs	r2, #62	; 0x3e
   2a6f2:	2100      	movs	r1, #0
   2a6f4:	5499      	strb	r1, [r3, r2]
   2a6f6:	687b      	ldr	r3, [r7, #4]
   2a6f8:	223f      	movs	r2, #63	; 0x3f
   2a6fa:	2100      	movs	r1, #0
   2a6fc:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2a6fe:	687b      	ldr	r3, [r7, #4]
   2a700:	2240      	movs	r2, #64	; 0x40
   2a702:	2100      	movs	r1, #0
   2a704:	5499      	strb	r1, [r3, r2]
   2a706:	687b      	ldr	r3, [r7, #4]
   2a708:	2241      	movs	r2, #65	; 0x41
   2a70a:	2100      	movs	r1, #0
   2a70c:	5499      	strb	r1, [r3, r2]
   2a70e:	687b      	ldr	r3, [r7, #4]
   2a710:	2242      	movs	r2, #66	; 0x42
   2a712:	2100      	movs	r1, #0
   2a714:	5499      	strb	r1, [r3, r2]
   2a716:	687b      	ldr	r3, [r7, #4]
   2a718:	2243      	movs	r2, #67	; 0x43
   2a71a:	2100      	movs	r1, #0
   2a71c:	5499      	strb	r1, [r3, r2]
   2a71e:	687b      	ldr	r3, [r7, #4]
   2a720:	2244      	movs	r2, #68	; 0x44
   2a722:	2100      	movs	r1, #0
   2a724:	5499      	strb	r1, [r3, r2]
   2a726:	687b      	ldr	r3, [r7, #4]
   2a728:	2245      	movs	r2, #69	; 0x45
   2a72a:	2100      	movs	r1, #0
   2a72c:	5499      	strb	r1, [r3, r2]
   2a72e:	687b      	ldr	r3, [r7, #4]
   2a730:	2246      	movs	r2, #70	; 0x46
   2a732:	2100      	movs	r1, #0
   2a734:	5499      	strb	r1, [r3, r2]
   2a736:	687b      	ldr	r3, [r7, #4]
   2a738:	2247      	movs	r2, #71	; 0x47
   2a73a:	2100      	movs	r1, #0
   2a73c:	5499      	strb	r1, [r3, r2]
   2a73e:	687b      	ldr	r3, [r7, #4]
   2a740:	2248      	movs	r2, #72	; 0x48
   2a742:	2100      	movs	r1, #0
   2a744:	5499      	strb	r1, [r3, r2]
   2a746:	687b      	ldr	r3, [r7, #4]
   2a748:	2249      	movs	r2, #73	; 0x49
   2a74a:	2100      	movs	r1, #0
   2a74c:	5499      	strb	r1, [r3, r2]
   2a74e:	687b      	ldr	r3, [r7, #4]
   2a750:	224a      	movs	r2, #74	; 0x4a
   2a752:	2100      	movs	r1, #0
   2a754:	5499      	strb	r1, [r3, r2]
   2a756:	687b      	ldr	r3, [r7, #4]
   2a758:	224b      	movs	r2, #75	; 0x4b
   2a75a:	2100      	movs	r1, #0
   2a75c:	5499      	strb	r1, [r3, r2]
   2a75e:	687b      	ldr	r3, [r7, #4]
   2a760:	224c      	movs	r2, #76	; 0x4c
   2a762:	2100      	movs	r1, #0
   2a764:	5499      	strb	r1, [r3, r2]
   2a766:	687b      	ldr	r3, [r7, #4]
   2a768:	224d      	movs	r2, #77	; 0x4d
   2a76a:	2100      	movs	r1, #0
   2a76c:	5499      	strb	r1, [r3, r2]
   2a76e:	687b      	ldr	r3, [r7, #4]
   2a770:	224e      	movs	r2, #78	; 0x4e
   2a772:	2100      	movs	r1, #0
   2a774:	5499      	strb	r1, [r3, r2]
   2a776:	687b      	ldr	r3, [r7, #4]
   2a778:	224f      	movs	r2, #79	; 0x4f
   2a77a:	2100      	movs	r1, #0
   2a77c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2a77e:	687b      	ldr	r3, [r7, #4]
   2a780:	2250      	movs	r2, #80	; 0x50
   2a782:	2100      	movs	r1, #0
   2a784:	5499      	strb	r1, [r3, r2]
   2a786:	687b      	ldr	r3, [r7, #4]
   2a788:	2251      	movs	r2, #81	; 0x51
   2a78a:	2100      	movs	r1, #0
   2a78c:	5499      	strb	r1, [r3, r2]
   2a78e:	687b      	ldr	r3, [r7, #4]
   2a790:	2252      	movs	r2, #82	; 0x52
   2a792:	2100      	movs	r1, #0
   2a794:	5499      	strb	r1, [r3, r2]
   2a796:	687b      	ldr	r3, [r7, #4]
   2a798:	2253      	movs	r2, #83	; 0x53
   2a79a:	2100      	movs	r1, #0
   2a79c:	5499      	strb	r1, [r3, r2]
   2a79e:	687b      	ldr	r3, [r7, #4]
   2a7a0:	2254      	movs	r2, #84	; 0x54
   2a7a2:	2100      	movs	r1, #0
   2a7a4:	5499      	strb	r1, [r3, r2]
   2a7a6:	687b      	ldr	r3, [r7, #4]
   2a7a8:	2255      	movs	r2, #85	; 0x55
   2a7aa:	2100      	movs	r1, #0
   2a7ac:	5499      	strb	r1, [r3, r2]
   2a7ae:	687b      	ldr	r3, [r7, #4]
   2a7b0:	2256      	movs	r2, #86	; 0x56
   2a7b2:	2100      	movs	r1, #0
   2a7b4:	5499      	strb	r1, [r3, r2]
   2a7b6:	687b      	ldr	r3, [r7, #4]
   2a7b8:	2257      	movs	r2, #87	; 0x57
   2a7ba:	2100      	movs	r1, #0
   2a7bc:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2a7be:	687b      	ldr	r3, [r7, #4]
   2a7c0:	2298      	movs	r2, #152	; 0x98
   2a7c2:	2100      	movs	r1, #0
   2a7c4:	5499      	strb	r1, [r3, r2]
   2a7c6:	687b      	ldr	r3, [r7, #4]
   2a7c8:	2200      	movs	r2, #0
   2a7ca:	659a      	str	r2, [r3, #88]	; 0x58
   2a7cc:	687b      	ldr	r3, [r7, #4]
   2a7ce:	2200      	movs	r2, #0
   2a7d0:	679a      	str	r2, [r3, #120]	; 0x78
   2a7d2:	687b      	ldr	r3, [r7, #4]
   2a7d4:	2299      	movs	r2, #153	; 0x99
   2a7d6:	2100      	movs	r1, #0
   2a7d8:	5499      	strb	r1, [r3, r2]
   2a7da:	687b      	ldr	r3, [r7, #4]
   2a7dc:	2200      	movs	r2, #0
   2a7de:	65da      	str	r2, [r3, #92]	; 0x5c
   2a7e0:	687b      	ldr	r3, [r7, #4]
   2a7e2:	2200      	movs	r2, #0
   2a7e4:	67da      	str	r2, [r3, #124]	; 0x7c
   2a7e6:	687b      	ldr	r3, [r7, #4]
   2a7e8:	229a      	movs	r2, #154	; 0x9a
   2a7ea:	2100      	movs	r1, #0
   2a7ec:	5499      	strb	r1, [r3, r2]
   2a7ee:	687b      	ldr	r3, [r7, #4]
   2a7f0:	2200      	movs	r2, #0
   2a7f2:	661a      	str	r2, [r3, #96]	; 0x60
   2a7f4:	687b      	ldr	r3, [r7, #4]
   2a7f6:	2280      	movs	r2, #128	; 0x80
   2a7f8:	2100      	movs	r1, #0
   2a7fa:	5099      	str	r1, [r3, r2]
   2a7fc:	687b      	ldr	r3, [r7, #4]
   2a7fe:	229b      	movs	r2, #155	; 0x9b
   2a800:	2100      	movs	r1, #0
   2a802:	5499      	strb	r1, [r3, r2]
   2a804:	687b      	ldr	r3, [r7, #4]
   2a806:	2200      	movs	r2, #0
   2a808:	665a      	str	r2, [r3, #100]	; 0x64
   2a80a:	687b      	ldr	r3, [r7, #4]
   2a80c:	2284      	movs	r2, #132	; 0x84
   2a80e:	2100      	movs	r1, #0
   2a810:	5099      	str	r1, [r3, r2]
   2a812:	687b      	ldr	r3, [r7, #4]
   2a814:	229c      	movs	r2, #156	; 0x9c
   2a816:	2100      	movs	r1, #0
   2a818:	5499      	strb	r1, [r3, r2]
   2a81a:	687b      	ldr	r3, [r7, #4]
   2a81c:	2200      	movs	r2, #0
   2a81e:	669a      	str	r2, [r3, #104]	; 0x68
   2a820:	687b      	ldr	r3, [r7, #4]
   2a822:	2288      	movs	r2, #136	; 0x88
   2a824:	2100      	movs	r1, #0
   2a826:	5099      	str	r1, [r3, r2]
   2a828:	687b      	ldr	r3, [r7, #4]
   2a82a:	229d      	movs	r2, #157	; 0x9d
   2a82c:	2100      	movs	r1, #0
   2a82e:	5499      	strb	r1, [r3, r2]
   2a830:	687b      	ldr	r3, [r7, #4]
   2a832:	2200      	movs	r2, #0
   2a834:	66da      	str	r2, [r3, #108]	; 0x6c
   2a836:	687b      	ldr	r3, [r7, #4]
   2a838:	228c      	movs	r2, #140	; 0x8c
   2a83a:	2100      	movs	r1, #0
   2a83c:	5099      	str	r1, [r3, r2]
   2a83e:	687b      	ldr	r3, [r7, #4]
   2a840:	229e      	movs	r2, #158	; 0x9e
   2a842:	2100      	movs	r1, #0
   2a844:	5499      	strb	r1, [r3, r2]
   2a846:	687b      	ldr	r3, [r7, #4]
   2a848:	2200      	movs	r2, #0
   2a84a:	671a      	str	r2, [r3, #112]	; 0x70
   2a84c:	687b      	ldr	r3, [r7, #4]
   2a84e:	2290      	movs	r2, #144	; 0x90
   2a850:	2100      	movs	r1, #0
   2a852:	5099      	str	r1, [r3, r2]
   2a854:	687b      	ldr	r3, [r7, #4]
   2a856:	229f      	movs	r2, #159	; 0x9f
   2a858:	2100      	movs	r1, #0
   2a85a:	5499      	strb	r1, [r3, r2]
   2a85c:	687b      	ldr	r3, [r7, #4]
   2a85e:	2200      	movs	r2, #0
   2a860:	675a      	str	r2, [r3, #116]	; 0x74
   2a862:	687b      	ldr	r3, [r7, #4]
   2a864:	2294      	movs	r2, #148	; 0x94
   2a866:	2100      	movs	r1, #0
   2a868:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2a86a:	687b      	ldr	r3, [r7, #4]
   2a86c:	22a0      	movs	r2, #160	; 0xa0
   2a86e:	2101      	movs	r1, #1
   2a870:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2a872:	687b      	ldr	r3, [r7, #4]
   2a874:	22a1      	movs	r2, #161	; 0xa1
   2a876:	2100      	movs	r1, #0
   2a878:	5499      	strb	r1, [r3, r2]
}
   2a87a:	46c0      	nop			; (mov r8, r8)
   2a87c:	46bd      	mov	sp, r7
   2a87e:	b005      	add	sp, #20
   2a880:	bd90      	pop	{r4, r7, pc}
   2a882:	46c0      	nop			; (mov r8, r8)
   2a884:	0002a581 	.word	0x0002a581
   2a888:	000396b8 	.word	0x000396b8

0002a88c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a88c:	b580      	push	{r7, lr}
   2a88e:	b086      	sub	sp, #24
   2a890:	af00      	add	r7, sp, #0
   2a892:	60b9      	str	r1, [r7, #8]
   2a894:	607a      	str	r2, [r7, #4]
   2a896:	230f      	movs	r3, #15
   2a898:	18fb      	adds	r3, r7, r3
   2a89a:	1c02      	adds	r2, r0, #0
   2a89c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2a89e:	2300      	movs	r3, #0
   2a8a0:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a8a2:	2300      	movs	r3, #0
   2a8a4:	613b      	str	r3, [r7, #16]
   2a8a6:	e01d      	b.n	2a8e4 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2a8a8:	68ba      	ldr	r2, [r7, #8]
   2a8aa:	693b      	ldr	r3, [r7, #16]
   2a8ac:	18d3      	adds	r3, r2, r3
   2a8ae:	3310      	adds	r3, #16
   2a8b0:	781b      	ldrb	r3, [r3, #0]
   2a8b2:	2b01      	cmp	r3, #1
   2a8b4:	d113      	bne.n	2a8de <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2a8b6:	230f      	movs	r3, #15
   2a8b8:	18fb      	adds	r3, r7, r3
   2a8ba:	781b      	ldrb	r3, [r3, #0]
   2a8bc:	4a1b      	ldr	r2, [pc, #108]	; (2a92c <_tcc_build_ctrla+0xa0>)
   2a8be:	5cd3      	ldrb	r3, [r2, r3]
   2a8c0:	001a      	movs	r2, r3
   2a8c2:	693b      	ldr	r3, [r7, #16]
   2a8c4:	429a      	cmp	r2, r3
   2a8c6:	da01      	bge.n	2a8cc <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2a8c8:	2317      	movs	r3, #23
   2a8ca:	e02a      	b.n	2a922 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2a8cc:	2380      	movs	r3, #128	; 0x80
   2a8ce:	045a      	lsls	r2, r3, #17
   2a8d0:	693b      	ldr	r3, [r7, #16]
   2a8d2:	409a      	lsls	r2, r3
   2a8d4:	0013      	movs	r3, r2
   2a8d6:	001a      	movs	r2, r3
   2a8d8:	697b      	ldr	r3, [r7, #20]
   2a8da:	4313      	orrs	r3, r2
   2a8dc:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2a8de:	693b      	ldr	r3, [r7, #16]
   2a8e0:	3301      	adds	r3, #1
   2a8e2:	613b      	str	r3, [r7, #16]
   2a8e4:	693b      	ldr	r3, [r7, #16]
   2a8e6:	2b03      	cmp	r3, #3
   2a8e8:	ddde      	ble.n	2a8a8 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2a8ea:	68bb      	ldr	r3, [r7, #8]
   2a8ec:	22a1      	movs	r2, #161	; 0xa1
   2a8ee:	5c9b      	ldrb	r3, [r3, r2]
   2a8f0:	2b00      	cmp	r3, #0
   2a8f2:	d004      	beq.n	2a8fe <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2a8f4:	697b      	ldr	r3, [r7, #20]
   2a8f6:	2280      	movs	r2, #128	; 0x80
   2a8f8:	0112      	lsls	r2, r2, #4
   2a8fa:	4313      	orrs	r3, r2
   2a8fc:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2a8fe:	68bb      	ldr	r3, [r7, #8]
   2a900:	7b1b      	ldrb	r3, [r3, #12]
   2a902:	031b      	lsls	r3, r3, #12
   2a904:	001a      	movs	r2, r3
   2a906:	697b      	ldr	r3, [r7, #20]
   2a908:	4313      	orrs	r3, r2
   2a90a:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2a90c:	68bb      	ldr	r3, [r7, #8]
   2a90e:	7adb      	ldrb	r3, [r3, #11]
   2a910:	021b      	lsls	r3, r3, #8
   2a912:	001a      	movs	r2, r3
   2a914:	697b      	ldr	r3, [r7, #20]
   2a916:	4313      	orrs	r3, r2
   2a918:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2a91a:	687b      	ldr	r3, [r7, #4]
   2a91c:	697a      	ldr	r2, [r7, #20]
   2a91e:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2a920:	2300      	movs	r3, #0
}
   2a922:	0018      	movs	r0, r3
   2a924:	46bd      	mov	sp, r7
   2a926:	b006      	add	sp, #24
   2a928:	bd80      	pop	{r7, pc}
   2a92a:	46c0      	nop			; (mov r8, r8)
   2a92c:	000396c4 	.word	0x000396c4

0002a930 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2a930:	b580      	push	{r7, lr}
   2a932:	b086      	sub	sp, #24
   2a934:	af00      	add	r7, sp, #0
   2a936:	60b9      	str	r1, [r7, #8]
   2a938:	607a      	str	r2, [r7, #4]
   2a93a:	230f      	movs	r3, #15
   2a93c:	18fb      	adds	r3, r7, r3
   2a93e:	1c02      	adds	r2, r0, #0
   2a940:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2a942:	2317      	movs	r3, #23
   2a944:	18fb      	adds	r3, r7, r3
   2a946:	2200      	movs	r2, #0
   2a948:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2a94a:	68bb      	ldr	r3, [r7, #8]
   2a94c:	7a1b      	ldrb	r3, [r3, #8]
   2a94e:	2b00      	cmp	r3, #0
   2a950:	d007      	beq.n	2a962 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2a952:	2317      	movs	r3, #23
   2a954:	18fb      	adds	r3, r7, r3
   2a956:	2217      	movs	r2, #23
   2a958:	18ba      	adds	r2, r7, r2
   2a95a:	7812      	ldrb	r2, [r2, #0]
   2a95c:	2104      	movs	r1, #4
   2a95e:	430a      	orrs	r2, r1
   2a960:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2a962:	68bb      	ldr	r3, [r7, #8]
   2a964:	7a5b      	ldrb	r3, [r3, #9]
   2a966:	2b01      	cmp	r3, #1
   2a968:	d107      	bne.n	2a97a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2a96a:	2317      	movs	r3, #23
   2a96c:	18fb      	adds	r3, r7, r3
   2a96e:	2217      	movs	r2, #23
   2a970:	18ba      	adds	r2, r7, r2
   2a972:	7812      	ldrb	r2, [r2, #0]
   2a974:	2101      	movs	r1, #1
   2a976:	430a      	orrs	r2, r1
   2a978:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2a97a:	687b      	ldr	r3, [r7, #4]
   2a97c:	2217      	movs	r2, #23
   2a97e:	18ba      	adds	r2, r7, r2
   2a980:	7812      	ldrb	r2, [r2, #0]
   2a982:	701a      	strb	r2, [r3, #0]
}
   2a984:	46c0      	nop			; (mov r8, r8)
   2a986:	46bd      	mov	sp, r7
   2a988:	b006      	add	sp, #24
   2a98a:	bd80      	pop	{r7, pc}

0002a98c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2a98c:	b580      	push	{r7, lr}
   2a98e:	b088      	sub	sp, #32
   2a990:	af00      	add	r7, sp, #0
   2a992:	60b9      	str	r1, [r7, #8]
   2a994:	607a      	str	r2, [r7, #4]
   2a996:	230f      	movs	r3, #15
   2a998:	18fb      	adds	r3, r7, r3
   2a99a:	1c02      	adds	r2, r0, #0
   2a99c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2a99e:	230f      	movs	r3, #15
   2a9a0:	18fb      	adds	r3, r7, r3
   2a9a2:	781a      	ldrb	r2, [r3, #0]
   2a9a4:	231b      	movs	r3, #27
   2a9a6:	18fb      	adds	r3, r7, r3
   2a9a8:	493e      	ldr	r1, [pc, #248]	; (2aaa4 <_tcc_build_faults+0x118>)
   2a9aa:	5c8a      	ldrb	r2, [r1, r2]
   2a9ac:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2a9ae:	2300      	movs	r3, #0
   2a9b0:	61fb      	str	r3, [r7, #28]
   2a9b2:	e06e      	b.n	2aa92 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2a9b4:	69fa      	ldr	r2, [r7, #28]
   2a9b6:	0013      	movs	r3, r2
   2a9b8:	009b      	lsls	r3, r3, #2
   2a9ba:	189b      	adds	r3, r3, r2
   2a9bc:	005b      	lsls	r3, r3, #1
   2a9be:	3328      	adds	r3, #40	; 0x28
   2a9c0:	68ba      	ldr	r2, [r7, #8]
   2a9c2:	18d3      	adds	r3, r2, r3
   2a9c4:	3304      	adds	r3, #4
   2a9c6:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2a9c8:	697b      	ldr	r3, [r7, #20]
   2a9ca:	7a5b      	ldrb	r3, [r3, #9]
   2a9cc:	221b      	movs	r2, #27
   2a9ce:	18ba      	adds	r2, r7, r2
   2a9d0:	7812      	ldrb	r2, [r2, #0]
   2a9d2:	429a      	cmp	r2, r3
   2a9d4:	d801      	bhi.n	2a9da <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2a9d6:	2317      	movs	r3, #23
   2a9d8:	e05f      	b.n	2aa9a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2a9da:	697b      	ldr	r3, [r7, #20]
   2a9dc:	781b      	ldrb	r3, [r3, #0]
   2a9de:	2b0f      	cmp	r3, #15
   2a9e0:	d901      	bls.n	2a9e6 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2a9e2:	2317      	movs	r3, #23
   2a9e4:	e059      	b.n	2aa9a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2a9e6:	697b      	ldr	r3, [r7, #20]
   2a9e8:	781b      	ldrb	r3, [r3, #0]
   2a9ea:	061b      	lsls	r3, r3, #24
   2a9ec:	001a      	movs	r2, r3
   2a9ee:	23f0      	movs	r3, #240	; 0xf0
   2a9f0:	051b      	lsls	r3, r3, #20
   2a9f2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2a9f4:	697b      	ldr	r3, [r7, #20]
   2a9f6:	785b      	ldrb	r3, [r3, #1]
   2a9f8:	041b      	lsls	r3, r3, #16
   2a9fa:	0019      	movs	r1, r3
   2a9fc:	23ff      	movs	r3, #255	; 0xff
   2a9fe:	041b      	lsls	r3, r3, #16
   2aa00:	400b      	ands	r3, r1
   2aa02:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2aa04:	697b      	ldr	r3, [r7, #20]
   2aa06:	789b      	ldrb	r3, [r3, #2]
   2aa08:	2b00      	cmp	r3, #0
   2aa0a:	d001      	beq.n	2aa10 <_tcc_build_faults+0x84>
   2aa0c:	2380      	movs	r3, #128	; 0x80
   2aa0e:	e000      	b.n	2aa12 <_tcc_build_faults+0x86>
   2aa10:	2300      	movs	r3, #0
   2aa12:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2aa14:	697b      	ldr	r3, [r7, #20]
   2aa16:	78db      	ldrb	r3, [r3, #3]
   2aa18:	2b00      	cmp	r3, #0
   2aa1a:	d001      	beq.n	2aa20 <_tcc_build_faults+0x94>
   2aa1c:	2308      	movs	r3, #8
   2aa1e:	e000      	b.n	2aa22 <_tcc_build_faults+0x96>
   2aa20:	2300      	movs	r3, #0
   2aa22:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2aa24:	697b      	ldr	r3, [r7, #20]
   2aa26:	791b      	ldrb	r3, [r3, #4]
   2aa28:	2b00      	cmp	r3, #0
   2aa2a:	d001      	beq.n	2aa30 <_tcc_build_faults+0xa4>
   2aa2c:	2310      	movs	r3, #16
   2aa2e:	e000      	b.n	2aa32 <_tcc_build_faults+0xa6>
   2aa30:	2300      	movs	r3, #0
   2aa32:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2aa34:	697b      	ldr	r3, [r7, #20]
   2aa36:	795b      	ldrb	r3, [r3, #5]
   2aa38:	0019      	movs	r1, r3
   2aa3a:	2303      	movs	r3, #3
   2aa3c:	400b      	ands	r3, r1
   2aa3e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2aa40:	697b      	ldr	r3, [r7, #20]
   2aa42:	799b      	ldrb	r3, [r3, #6]
   2aa44:	015b      	lsls	r3, r3, #5
   2aa46:	0019      	movs	r1, r3
   2aa48:	2360      	movs	r3, #96	; 0x60
   2aa4a:	400b      	ands	r3, r1
   2aa4c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2aa4e:	697b      	ldr	r3, [r7, #20]
   2aa50:	79db      	ldrb	r3, [r3, #7]
   2aa52:	021b      	lsls	r3, r3, #8
   2aa54:	0019      	movs	r1, r3
   2aa56:	23c0      	movs	r3, #192	; 0xc0
   2aa58:	009b      	lsls	r3, r3, #2
   2aa5a:	400b      	ands	r3, r1
   2aa5c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2aa5e:	697b      	ldr	r3, [r7, #20]
   2aa60:	7a1b      	ldrb	r3, [r3, #8]
   2aa62:	031b      	lsls	r3, r3, #12
   2aa64:	0019      	movs	r1, r3
   2aa66:	23e0      	movs	r3, #224	; 0xe0
   2aa68:	01db      	lsls	r3, r3, #7
   2aa6a:	400b      	ands	r3, r1
   2aa6c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2aa6e:	697b      	ldr	r3, [r7, #20]
   2aa70:	7a5b      	ldrb	r3, [r3, #9]
   2aa72:	029b      	lsls	r3, r3, #10
   2aa74:	0019      	movs	r1, r3
   2aa76:	23c0      	movs	r3, #192	; 0xc0
   2aa78:	011b      	lsls	r3, r3, #4
   2aa7a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2aa7c:	4313      	orrs	r3, r2
   2aa7e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2aa80:	69fb      	ldr	r3, [r7, #28]
   2aa82:	009b      	lsls	r3, r3, #2
   2aa84:	687a      	ldr	r2, [r7, #4]
   2aa86:	18d3      	adds	r3, r2, r3
   2aa88:	693a      	ldr	r2, [r7, #16]
   2aa8a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2aa8c:	69fb      	ldr	r3, [r7, #28]
   2aa8e:	3301      	adds	r3, #1
   2aa90:	61fb      	str	r3, [r7, #28]
   2aa92:	69fb      	ldr	r3, [r7, #28]
   2aa94:	2b01      	cmp	r3, #1
   2aa96:	dd8d      	ble.n	2a9b4 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2aa98:	2300      	movs	r3, #0
}
   2aa9a:	0018      	movs	r0, r3
   2aa9c:	46bd      	mov	sp, r7
   2aa9e:	b008      	add	sp, #32
   2aaa0:	bd80      	pop	{r7, pc}
   2aaa2:	46c0      	nop			; (mov r8, r8)
   2aaa4:	000396c4 	.word	0x000396c4

0002aaa8 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2aaa8:	b580      	push	{r7, lr}
   2aaaa:	b088      	sub	sp, #32
   2aaac:	af00      	add	r7, sp, #0
   2aaae:	60b9      	str	r1, [r7, #8]
   2aab0:	607a      	str	r2, [r7, #4]
   2aab2:	230f      	movs	r3, #15
   2aab4:	18fb      	adds	r3, r7, r3
   2aab6:	1c02      	adds	r2, r0, #0
   2aab8:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2aaba:	230f      	movs	r3, #15
   2aabc:	18fb      	adds	r3, r7, r3
   2aabe:	781a      	ldrb	r2, [r3, #0]
   2aac0:	2317      	movs	r3, #23
   2aac2:	18fb      	adds	r3, r7, r3
   2aac4:	492d      	ldr	r1, [pc, #180]	; (2ab7c <_tcc_build_drvctrl+0xd4>)
   2aac6:	5c8a      	ldrb	r2, [r1, r2]
   2aac8:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2aaca:	2300      	movs	r3, #0
   2aacc:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2aace:	2300      	movs	r3, #0
   2aad0:	61fb      	str	r3, [r7, #28]
   2aad2:	e048      	b.n	2ab66 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2aad4:	68ba      	ldr	r2, [r7, #8]
   2aad6:	2150      	movs	r1, #80	; 0x50
   2aad8:	69fb      	ldr	r3, [r7, #28]
   2aada:	18d3      	adds	r3, r2, r3
   2aadc:	185b      	adds	r3, r3, r1
   2aade:	781b      	ldrb	r3, [r3, #0]
   2aae0:	2b00      	cmp	r3, #0
   2aae2:	d010      	beq.n	2ab06 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2aae4:	2317      	movs	r3, #23
   2aae6:	18fb      	adds	r3, r7, r3
   2aae8:	781a      	ldrb	r2, [r3, #0]
   2aaea:	69fb      	ldr	r3, [r7, #28]
   2aaec:	429a      	cmp	r2, r3
   2aaee:	d801      	bhi.n	2aaf4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2aaf0:	2317      	movs	r3, #23
   2aaf2:	e03f      	b.n	2ab74 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2aaf4:	2380      	movs	r3, #128	; 0x80
   2aaf6:	025a      	lsls	r2, r3, #9
   2aaf8:	69fb      	ldr	r3, [r7, #28]
   2aafa:	409a      	lsls	r2, r3
   2aafc:	0013      	movs	r3, r2
   2aafe:	001a      	movs	r2, r3
   2ab00:	69bb      	ldr	r3, [r7, #24]
   2ab02:	4313      	orrs	r3, r2
   2ab04:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2ab06:	68ba      	ldr	r2, [r7, #8]
   2ab08:	69fb      	ldr	r3, [r7, #28]
   2ab0a:	331c      	adds	r3, #28
   2ab0c:	005b      	lsls	r3, r3, #1
   2ab0e:	18d3      	adds	r3, r2, r3
   2ab10:	3309      	adds	r3, #9
   2ab12:	781b      	ldrb	r3, [r3, #0]
   2ab14:	2b00      	cmp	r3, #0
   2ab16:	d023      	beq.n	2ab60 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2ab18:	2317      	movs	r3, #23
   2ab1a:	18fb      	adds	r3, r7, r3
   2ab1c:	781a      	ldrb	r2, [r3, #0]
   2ab1e:	69fb      	ldr	r3, [r7, #28]
   2ab20:	429a      	cmp	r2, r3
   2ab22:	d801      	bhi.n	2ab28 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2ab24:	2317      	movs	r3, #23
   2ab26:	e025      	b.n	2ab74 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2ab28:	68ba      	ldr	r2, [r7, #8]
   2ab2a:	69fb      	ldr	r3, [r7, #28]
   2ab2c:	331c      	adds	r3, #28
   2ab2e:	005b      	lsls	r3, r3, #1
   2ab30:	18d3      	adds	r3, r2, r3
   2ab32:	3309      	adds	r3, #9
   2ab34:	781b      	ldrb	r3, [r3, #0]
   2ab36:	2b02      	cmp	r3, #2
   2ab38:	d10a      	bne.n	2ab50 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2ab3a:	2302      	movs	r3, #2
   2ab3c:	33ff      	adds	r3, #255	; 0xff
   2ab3e:	001a      	movs	r2, r3
   2ab40:	69fb      	ldr	r3, [r7, #28]
   2ab42:	409a      	lsls	r2, r3
   2ab44:	0013      	movs	r3, r2
   2ab46:	001a      	movs	r2, r3
   2ab48:	69bb      	ldr	r3, [r7, #24]
   2ab4a:	4313      	orrs	r3, r2
   2ab4c:	61bb      	str	r3, [r7, #24]
   2ab4e:	e007      	b.n	2ab60 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2ab50:	2201      	movs	r2, #1
   2ab52:	69fb      	ldr	r3, [r7, #28]
   2ab54:	409a      	lsls	r2, r3
   2ab56:	0013      	movs	r3, r2
   2ab58:	001a      	movs	r2, r3
   2ab5a:	69bb      	ldr	r3, [r7, #24]
   2ab5c:	4313      	orrs	r3, r2
   2ab5e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ab60:	69fb      	ldr	r3, [r7, #28]
   2ab62:	3301      	adds	r3, #1
   2ab64:	61fb      	str	r3, [r7, #28]
   2ab66:	69fb      	ldr	r3, [r7, #28]
   2ab68:	2b07      	cmp	r3, #7
   2ab6a:	d9b3      	bls.n	2aad4 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2ab6c:	687b      	ldr	r3, [r7, #4]
   2ab6e:	69ba      	ldr	r2, [r7, #24]
   2ab70:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2ab72:	2300      	movs	r3, #0
}
   2ab74:	0018      	movs	r0, r3
   2ab76:	46bd      	mov	sp, r7
   2ab78:	b008      	add	sp, #32
   2ab7a:	bd80      	pop	{r7, pc}
   2ab7c:	000396c8 	.word	0x000396c8

0002ab80 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2ab80:	b580      	push	{r7, lr}
   2ab82:	b088      	sub	sp, #32
   2ab84:	af00      	add	r7, sp, #0
   2ab86:	60b9      	str	r1, [r7, #8]
   2ab88:	607a      	str	r2, [r7, #4]
   2ab8a:	230f      	movs	r3, #15
   2ab8c:	18fb      	adds	r3, r7, r3
   2ab8e:	1c02      	adds	r2, r0, #0
   2ab90:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2ab92:	230f      	movs	r3, #15
   2ab94:	18fb      	adds	r3, r7, r3
   2ab96:	781a      	ldrb	r2, [r3, #0]
   2ab98:	2317      	movs	r3, #23
   2ab9a:	18fb      	adds	r3, r7, r3
   2ab9c:	491d      	ldr	r1, [pc, #116]	; (2ac14 <_tcc_build_waves+0x94>)
   2ab9e:	5c8a      	ldrb	r2, [r1, r2]
   2aba0:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2aba2:	68bb      	ldr	r3, [r7, #8]
   2aba4:	3310      	adds	r3, #16
   2aba6:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2aba8:	693b      	ldr	r3, [r7, #16]
   2abaa:	7a5b      	ldrb	r3, [r3, #9]
   2abac:	011b      	lsls	r3, r3, #4
   2abae:	001a      	movs	r2, r3
   2abb0:	2330      	movs	r3, #48	; 0x30
   2abb2:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2abb4:	693b      	ldr	r3, [r7, #16]
   2abb6:	7a1b      	ldrb	r3, [r3, #8]
   2abb8:	0019      	movs	r1, r3
   2abba:	2307      	movs	r3, #7
   2abbc:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2abbe:	4313      	orrs	r3, r2
   2abc0:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2abc2:	2300      	movs	r3, #0
   2abc4:	61fb      	str	r3, [r7, #28]
   2abc6:	e01a      	b.n	2abfe <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2abc8:	693a      	ldr	r2, [r7, #16]
   2abca:	69fb      	ldr	r3, [r7, #28]
   2abcc:	18d3      	adds	r3, r2, r3
   2abce:	3304      	adds	r3, #4
   2abd0:	781b      	ldrb	r3, [r3, #0]
   2abd2:	2b00      	cmp	r3, #0
   2abd4:	d010      	beq.n	2abf8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2abd6:	2317      	movs	r3, #23
   2abd8:	18fb      	adds	r3, r7, r3
   2abda:	781a      	ldrb	r2, [r3, #0]
   2abdc:	69fb      	ldr	r3, [r7, #28]
   2abde:	429a      	cmp	r2, r3
   2abe0:	dc01      	bgt.n	2abe6 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2abe2:	2317      	movs	r3, #23
   2abe4:	e012      	b.n	2ac0c <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2abe6:	2380      	movs	r3, #128	; 0x80
   2abe8:	025a      	lsls	r2, r3, #9
   2abea:	69fb      	ldr	r3, [r7, #28]
   2abec:	409a      	lsls	r2, r3
   2abee:	0013      	movs	r3, r2
   2abf0:	001a      	movs	r2, r3
   2abf2:	69bb      	ldr	r3, [r7, #24]
   2abf4:	4313      	orrs	r3, r2
   2abf6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2abf8:	69fb      	ldr	r3, [r7, #28]
   2abfa:	3301      	adds	r3, #1
   2abfc:	61fb      	str	r3, [r7, #28]
   2abfe:	69fb      	ldr	r3, [r7, #28]
   2ac00:	2b03      	cmp	r3, #3
   2ac02:	dde1      	ble.n	2abc8 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2ac04:	687b      	ldr	r3, [r7, #4]
   2ac06:	69ba      	ldr	r2, [r7, #24]
   2ac08:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2ac0a:	2300      	movs	r3, #0
}
   2ac0c:	0018      	movs	r0, r3
   2ac0e:	46bd      	mov	sp, r7
   2ac10:	b008      	add	sp, #32
   2ac12:	bd80      	pop	{r7, pc}
   2ac14:	000396c4 	.word	0x000396c4

0002ac18 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2ac18:	b590      	push	{r4, r7, lr}
   2ac1a:	b091      	sub	sp, #68	; 0x44
   2ac1c:	af00      	add	r7, sp, #0
   2ac1e:	60f8      	str	r0, [r7, #12]
   2ac20:	60b9      	str	r1, [r7, #8]
   2ac22:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2ac24:	233b      	movs	r3, #59	; 0x3b
   2ac26:	18fc      	adds	r4, r7, r3
   2ac28:	68bb      	ldr	r3, [r7, #8]
   2ac2a:	0018      	movs	r0, r3
   2ac2c:	4bc4      	ldr	r3, [pc, #784]	; (2af40 <tcc_init+0x328>)
   2ac2e:	4798      	blx	r3
   2ac30:	0003      	movs	r3, r0
   2ac32:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2ac34:	233b      	movs	r3, #59	; 0x3b
   2ac36:	18fb      	adds	r3, r7, r3
   2ac38:	781a      	ldrb	r2, [r3, #0]
   2ac3a:	4bc2      	ldr	r3, [pc, #776]	; (2af44 <tcc_init+0x32c>)
   2ac3c:	0092      	lsls	r2, r2, #2
   2ac3e:	58d3      	ldr	r3, [r2, r3]
   2ac40:	0019      	movs	r1, r3
   2ac42:	2002      	movs	r0, #2
   2ac44:	4bc0      	ldr	r3, [pc, #768]	; (2af48 <tcc_init+0x330>)
   2ac46:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2ac48:	68bb      	ldr	r3, [r7, #8]
   2ac4a:	681b      	ldr	r3, [r3, #0]
   2ac4c:	2202      	movs	r2, #2
   2ac4e:	4013      	ands	r3, r2
   2ac50:	d001      	beq.n	2ac56 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2ac52:	231c      	movs	r3, #28
   2ac54:	e1be      	b.n	2afd4 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2ac56:	68bb      	ldr	r3, [r7, #8]
   2ac58:	681b      	ldr	r3, [r3, #0]
   2ac5a:	2201      	movs	r2, #1
   2ac5c:	4013      	ands	r3, r2
   2ac5e:	d001      	beq.n	2ac64 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2ac60:	231c      	movs	r3, #28
   2ac62:	e1b7      	b.n	2afd4 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2ac64:	233b      	movs	r3, #59	; 0x3b
   2ac66:	18fb      	adds	r3, r7, r3
   2ac68:	781a      	ldrb	r2, [r3, #0]
   2ac6a:	4bb8      	ldr	r3, [pc, #736]	; (2af4c <tcc_init+0x334>)
   2ac6c:	0092      	lsls	r2, r2, #2
   2ac6e:	58d3      	ldr	r3, [r2, r3]
   2ac70:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2ac72:	687b      	ldr	r3, [r7, #4]
   2ac74:	681a      	ldr	r2, [r3, #0]
   2ac76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ac78:	429a      	cmp	r2, r3
   2ac7a:	d804      	bhi.n	2ac86 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2ac7c:	687b      	ldr	r3, [r7, #4]
   2ac7e:	685a      	ldr	r2, [r3, #4]
   2ac80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ac82:	429a      	cmp	r2, r3
   2ac84:	d901      	bls.n	2ac8a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2ac86:	2317      	movs	r3, #23
   2ac88:	e1a4      	b.n	2afd4 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2ac8a:	2300      	movs	r3, #0
   2ac8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ac8e:	e00e      	b.n	2acae <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2ac90:	687a      	ldr	r2, [r7, #4]
   2ac92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ac94:	3306      	adds	r3, #6
   2ac96:	009b      	lsls	r3, r3, #2
   2ac98:	18d3      	adds	r3, r2, r3
   2ac9a:	3304      	adds	r3, #4
   2ac9c:	681a      	ldr	r2, [r3, #0]
   2ac9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2aca0:	429a      	cmp	r2, r3
   2aca2:	d901      	bls.n	2aca8 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2aca4:	2317      	movs	r3, #23
   2aca6:	e195      	b.n	2afd4 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2aca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2acaa:	3301      	adds	r3, #1
   2acac:	63fb      	str	r3, [r7, #60]	; 0x3c
   2acae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2acb0:	2b03      	cmp	r3, #3
   2acb2:	dded      	ble.n	2ac90 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2acb4:	2300      	movs	r3, #0
   2acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2acb8:	e019      	b.n	2acee <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2acba:	687a      	ldr	r2, [r7, #4]
   2acbc:	2198      	movs	r1, #152	; 0x98
   2acbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2acc0:	18d3      	adds	r3, r2, r3
   2acc2:	185b      	adds	r3, r3, r1
   2acc4:	781b      	ldrb	r3, [r3, #0]
   2acc6:	2201      	movs	r2, #1
   2acc8:	4053      	eors	r3, r2
   2acca:	b2db      	uxtb	r3, r3
   2accc:	2b00      	cmp	r3, #0
   2acce:	d10a      	bne.n	2ace6 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2acd0:	233b      	movs	r3, #59	; 0x3b
   2acd2:	18fb      	adds	r3, r7, r3
   2acd4:	781b      	ldrb	r3, [r3, #0]
   2acd6:	4a9e      	ldr	r2, [pc, #632]	; (2af50 <tcc_init+0x338>)
   2acd8:	5cd3      	ldrb	r3, [r2, r3]
   2acda:	001a      	movs	r2, r3
   2acdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2acde:	429a      	cmp	r2, r3
   2ace0:	dc02      	bgt.n	2ace8 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2ace2:	2317      	movs	r3, #23
   2ace4:	e176      	b.n	2afd4 <tcc_init+0x3bc>
			continue;
   2ace6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2ace8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2acea:	3301      	adds	r3, #1
   2acec:	63fb      	str	r3, [r7, #60]	; 0x3c
   2acee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2acf0:	2b07      	cmp	r3, #7
   2acf2:	dde2      	ble.n	2acba <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2acf4:	2300      	movs	r3, #0
   2acf6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2acf8:	2333      	movs	r3, #51	; 0x33
   2acfa:	18fc      	adds	r4, r7, r3
   2acfc:	232c      	movs	r3, #44	; 0x2c
   2acfe:	18fa      	adds	r2, r7, r3
   2ad00:	6879      	ldr	r1, [r7, #4]
   2ad02:	233b      	movs	r3, #59	; 0x3b
   2ad04:	18fb      	adds	r3, r7, r3
   2ad06:	781b      	ldrb	r3, [r3, #0]
   2ad08:	0018      	movs	r0, r3
   2ad0a:	4b92      	ldr	r3, [pc, #584]	; (2af54 <tcc_init+0x33c>)
   2ad0c:	4798      	blx	r3
   2ad0e:	0003      	movs	r3, r0
   2ad10:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ad12:	2333      	movs	r3, #51	; 0x33
   2ad14:	18fb      	adds	r3, r7, r3
   2ad16:	781b      	ldrb	r3, [r3, #0]
   2ad18:	2b00      	cmp	r3, #0
   2ad1a:	d003      	beq.n	2ad24 <tcc_init+0x10c>
		return status;
   2ad1c:	2333      	movs	r3, #51	; 0x33
   2ad1e:	18fb      	adds	r3, r7, r3
   2ad20:	781b      	ldrb	r3, [r3, #0]
   2ad22:	e157      	b.n	2afd4 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2ad24:	232b      	movs	r3, #43	; 0x2b
   2ad26:	18fa      	adds	r2, r7, r3
   2ad28:	6879      	ldr	r1, [r7, #4]
   2ad2a:	233b      	movs	r3, #59	; 0x3b
   2ad2c:	18fb      	adds	r3, r7, r3
   2ad2e:	781b      	ldrb	r3, [r3, #0]
   2ad30:	0018      	movs	r0, r3
   2ad32:	4b89      	ldr	r3, [pc, #548]	; (2af58 <tcc_init+0x340>)
   2ad34:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2ad36:	2333      	movs	r3, #51	; 0x33
   2ad38:	18fc      	adds	r4, r7, r3
   2ad3a:	2320      	movs	r3, #32
   2ad3c:	18fa      	adds	r2, r7, r3
   2ad3e:	6879      	ldr	r1, [r7, #4]
   2ad40:	233b      	movs	r3, #59	; 0x3b
   2ad42:	18fb      	adds	r3, r7, r3
   2ad44:	781b      	ldrb	r3, [r3, #0]
   2ad46:	0018      	movs	r0, r3
   2ad48:	4b84      	ldr	r3, [pc, #528]	; (2af5c <tcc_init+0x344>)
   2ad4a:	4798      	blx	r3
   2ad4c:	0003      	movs	r3, r0
   2ad4e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ad50:	2333      	movs	r3, #51	; 0x33
   2ad52:	18fb      	adds	r3, r7, r3
   2ad54:	781b      	ldrb	r3, [r3, #0]
   2ad56:	2b00      	cmp	r3, #0
   2ad58:	d003      	beq.n	2ad62 <tcc_init+0x14a>
		return status;
   2ad5a:	2333      	movs	r3, #51	; 0x33
   2ad5c:	18fb      	adds	r3, r7, r3
   2ad5e:	781b      	ldrb	r3, [r3, #0]
   2ad60:	e138      	b.n	2afd4 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2ad62:	2300      	movs	r3, #0
   2ad64:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2ad66:	2333      	movs	r3, #51	; 0x33
   2ad68:	18fc      	adds	r4, r7, r3
   2ad6a:	231c      	movs	r3, #28
   2ad6c:	18fa      	adds	r2, r7, r3
   2ad6e:	6879      	ldr	r1, [r7, #4]
   2ad70:	233b      	movs	r3, #59	; 0x3b
   2ad72:	18fb      	adds	r3, r7, r3
   2ad74:	781b      	ldrb	r3, [r3, #0]
   2ad76:	0018      	movs	r0, r3
   2ad78:	4b79      	ldr	r3, [pc, #484]	; (2af60 <tcc_init+0x348>)
   2ad7a:	4798      	blx	r3
   2ad7c:	0003      	movs	r3, r0
   2ad7e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2ad80:	2333      	movs	r3, #51	; 0x33
   2ad82:	18fb      	adds	r3, r7, r3
   2ad84:	781b      	ldrb	r3, [r3, #0]
   2ad86:	2b00      	cmp	r3, #0
   2ad88:	d003      	beq.n	2ad92 <tcc_init+0x17a>
		return status;
   2ad8a:	2333      	movs	r3, #51	; 0x33
   2ad8c:	18fb      	adds	r3, r7, r3
   2ad8e:	781b      	ldrb	r3, [r3, #0]
   2ad90:	e120      	b.n	2afd4 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2ad92:	2333      	movs	r3, #51	; 0x33
   2ad94:	18fc      	adds	r4, r7, r3
   2ad96:	2318      	movs	r3, #24
   2ad98:	18fa      	adds	r2, r7, r3
   2ad9a:	6879      	ldr	r1, [r7, #4]
   2ad9c:	233b      	movs	r3, #59	; 0x3b
   2ad9e:	18fb      	adds	r3, r7, r3
   2ada0:	781b      	ldrb	r3, [r3, #0]
   2ada2:	0018      	movs	r0, r3
   2ada4:	4b6f      	ldr	r3, [pc, #444]	; (2af64 <tcc_init+0x34c>)
   2ada6:	4798      	blx	r3
   2ada8:	0003      	movs	r3, r0
   2adaa:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2adac:	2333      	movs	r3, #51	; 0x33
   2adae:	18fb      	adds	r3, r7, r3
   2adb0:	781b      	ldrb	r3, [r3, #0]
   2adb2:	2b00      	cmp	r3, #0
   2adb4:	d003      	beq.n	2adbe <tcc_init+0x1a6>
		return status;
   2adb6:	2333      	movs	r3, #51	; 0x33
   2adb8:	18fb      	adds	r3, r7, r3
   2adba:	781b      	ldrb	r3, [r3, #0]
   2adbc:	e10a      	b.n	2afd4 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2adbe:	2300      	movs	r3, #0
   2adc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2adc2:	e009      	b.n	2add8 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2adc4:	68fa      	ldr	r2, [r7, #12]
   2adc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2adc8:	009b      	lsls	r3, r3, #2
   2adca:	18d3      	adds	r3, r2, r3
   2adcc:	3304      	adds	r3, #4
   2adce:	2200      	movs	r2, #0
   2add0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2add2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2add4:	3301      	adds	r3, #1
   2add6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2add8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2adda:	2b0b      	cmp	r3, #11
   2addc:	ddf2      	ble.n	2adc4 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2adde:	68fb      	ldr	r3, [r7, #12]
   2ade0:	2200      	movs	r2, #0
   2ade2:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2ade4:	68fb      	ldr	r3, [r7, #12]
   2ade6:	2200      	movs	r2, #0
   2ade8:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2adea:	233b      	movs	r3, #59	; 0x3b
   2adec:	18fb      	adds	r3, r7, r3
   2adee:	781a      	ldrb	r2, [r3, #0]
   2adf0:	4b5d      	ldr	r3, [pc, #372]	; (2af68 <tcc_init+0x350>)
   2adf2:	0092      	lsls	r2, r2, #2
   2adf4:	68f9      	ldr	r1, [r7, #12]
   2adf6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2adf8:	68fb      	ldr	r3, [r7, #12]
   2adfa:	68ba      	ldr	r2, [r7, #8]
   2adfc:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2adfe:	687b      	ldr	r3, [r7, #4]
   2ae00:	22a0      	movs	r2, #160	; 0xa0
   2ae02:	5c99      	ldrb	r1, [r3, r2]
   2ae04:	68fb      	ldr	r3, [r7, #12]
   2ae06:	223c      	movs	r2, #60	; 0x3c
   2ae08:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2ae0a:	2314      	movs	r3, #20
   2ae0c:	18fb      	adds	r3, r7, r3
   2ae0e:	0018      	movs	r0, r3
   2ae10:	4b56      	ldr	r3, [pc, #344]	; (2af6c <tcc_init+0x354>)
   2ae12:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2ae14:	687b      	ldr	r3, [r7, #4]
   2ae16:	7a9a      	ldrb	r2, [r3, #10]
   2ae18:	2314      	movs	r3, #20
   2ae1a:	18fb      	adds	r3, r7, r3
   2ae1c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2ae1e:	233b      	movs	r3, #59	; 0x3b
   2ae20:	18fb      	adds	r3, r7, r3
   2ae22:	781b      	ldrb	r3, [r3, #0]
   2ae24:	4a52      	ldr	r2, [pc, #328]	; (2af70 <tcc_init+0x358>)
   2ae26:	5cd3      	ldrb	r3, [r2, r3]
   2ae28:	2214      	movs	r2, #20
   2ae2a:	18ba      	adds	r2, r7, r2
   2ae2c:	0011      	movs	r1, r2
   2ae2e:	0018      	movs	r0, r3
   2ae30:	4b50      	ldr	r3, [pc, #320]	; (2af74 <tcc_init+0x35c>)
   2ae32:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2ae34:	233b      	movs	r3, #59	; 0x3b
   2ae36:	18fb      	adds	r3, r7, r3
   2ae38:	781b      	ldrb	r3, [r3, #0]
   2ae3a:	4a4d      	ldr	r2, [pc, #308]	; (2af70 <tcc_init+0x358>)
   2ae3c:	5cd3      	ldrb	r3, [r2, r3]
   2ae3e:	0018      	movs	r0, r3
   2ae40:	4b4d      	ldr	r3, [pc, #308]	; (2af78 <tcc_init+0x360>)
   2ae42:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2ae44:	2300      	movs	r3, #0
   2ae46:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ae48:	e02d      	b.n	2aea6 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2ae4a:	687a      	ldr	r2, [r7, #4]
   2ae4c:	2198      	movs	r1, #152	; 0x98
   2ae4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ae50:	18d3      	adds	r3, r2, r3
   2ae52:	185b      	adds	r3, r3, r1
   2ae54:	781b      	ldrb	r3, [r3, #0]
   2ae56:	2201      	movs	r2, #1
   2ae58:	4053      	eors	r3, r2
   2ae5a:	b2db      	uxtb	r3, r3
   2ae5c:	2b00      	cmp	r3, #0
   2ae5e:	d11e      	bne.n	2ae9e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2ae60:	2310      	movs	r3, #16
   2ae62:	18fb      	adds	r3, r7, r3
   2ae64:	0018      	movs	r0, r3
   2ae66:	4b45      	ldr	r3, [pc, #276]	; (2af7c <tcc_init+0x364>)
   2ae68:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2ae6a:	687b      	ldr	r3, [r7, #4]
   2ae6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ae6e:	321e      	adds	r2, #30
   2ae70:	0092      	lsls	r2, r2, #2
   2ae72:	58d3      	ldr	r3, [r2, r3]
   2ae74:	b2da      	uxtb	r2, r3
   2ae76:	2310      	movs	r3, #16
   2ae78:	18fb      	adds	r3, r7, r3
   2ae7a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2ae7c:	2310      	movs	r3, #16
   2ae7e:	18fb      	adds	r3, r7, r3
   2ae80:	2201      	movs	r2, #1
   2ae82:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2ae84:	687b      	ldr	r3, [r7, #4]
   2ae86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ae88:	3216      	adds	r2, #22
   2ae8a:	0092      	lsls	r2, r2, #2
   2ae8c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2ae8e:	b2db      	uxtb	r3, r3
   2ae90:	2210      	movs	r2, #16
   2ae92:	18ba      	adds	r2, r7, r2
   2ae94:	0011      	movs	r1, r2
   2ae96:	0018      	movs	r0, r3
   2ae98:	4b39      	ldr	r3, [pc, #228]	; (2af80 <tcc_init+0x368>)
   2ae9a:	4798      	blx	r3
   2ae9c:	e000      	b.n	2aea0 <tcc_init+0x288>
			continue;
   2ae9e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2aea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aea2:	3301      	adds	r3, #1
   2aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   2aea6:	233b      	movs	r3, #59	; 0x3b
   2aea8:	18fb      	adds	r3, r7, r3
   2aeaa:	781b      	ldrb	r3, [r3, #0]
   2aeac:	4a28      	ldr	r2, [pc, #160]	; (2af50 <tcc_init+0x338>)
   2aeae:	5cd3      	ldrb	r3, [r2, r3]
   2aeb0:	001a      	movs	r2, r3
   2aeb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2aeb4:	429a      	cmp	r2, r3
   2aeb6:	dcc8      	bgt.n	2ae4a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2aeb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2aeba:	68bb      	ldr	r3, [r7, #8]
   2aebc:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2aebe:	46c0      	nop			; (mov r8, r8)
   2aec0:	68bb      	ldr	r3, [r7, #8]
   2aec2:	689b      	ldr	r3, [r3, #8]
   2aec4:	2204      	movs	r2, #4
   2aec6:	4013      	ands	r3, r2
   2aec8:	d1fa      	bne.n	2aec0 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2aeca:	68bb      	ldr	r3, [r7, #8]
   2aecc:	22ff      	movs	r2, #255	; 0xff
   2aece:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2aed0:	46c0      	nop			; (mov r8, r8)
   2aed2:	68bb      	ldr	r3, [r7, #8]
   2aed4:	689b      	ldr	r3, [r3, #8]
   2aed6:	2204      	movs	r2, #4
   2aed8:	4013      	ands	r3, r2
   2aeda:	d1fa      	bne.n	2aed2 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2aedc:	232b      	movs	r3, #43	; 0x2b
   2aede:	18fb      	adds	r3, r7, r3
   2aee0:	781a      	ldrb	r2, [r3, #0]
   2aee2:	68bb      	ldr	r3, [r7, #8]
   2aee4:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2aee6:	2320      	movs	r3, #32
   2aee8:	18fb      	adds	r3, r7, r3
   2aeea:	681a      	ldr	r2, [r3, #0]
   2aeec:	68bb      	ldr	r3, [r7, #8]
   2aeee:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2aef0:	2320      	movs	r3, #32
   2aef2:	18fb      	adds	r3, r7, r3
   2aef4:	685a      	ldr	r2, [r3, #4]
   2aef6:	68bb      	ldr	r3, [r7, #8]
   2aef8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2aefa:	69fa      	ldr	r2, [r7, #28]
   2aefc:	68bb      	ldr	r3, [r7, #8]
   2aefe:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2af00:	46c0      	nop			; (mov r8, r8)
   2af02:	68bb      	ldr	r3, [r7, #8]
   2af04:	689b      	ldr	r3, [r3, #8]
   2af06:	4a1f      	ldr	r2, [pc, #124]	; (2af84 <tcc_init+0x36c>)
   2af08:	4013      	ands	r3, r2
   2af0a:	d1fa      	bne.n	2af02 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2af0c:	69ba      	ldr	r2, [r7, #24]
   2af0e:	68bb      	ldr	r3, [r7, #8]
   2af10:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2af12:	46c0      	nop			; (mov r8, r8)
   2af14:	68bb      	ldr	r3, [r7, #8]
   2af16:	689b      	ldr	r3, [r3, #8]
   2af18:	2210      	movs	r2, #16
   2af1a:	4013      	ands	r3, r2
   2af1c:	d1fa      	bne.n	2af14 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2af1e:	687b      	ldr	r3, [r7, #4]
   2af20:	681a      	ldr	r2, [r3, #0]
   2af22:	68bb      	ldr	r3, [r7, #8]
   2af24:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2af26:	46c0      	nop			; (mov r8, r8)
   2af28:	68bb      	ldr	r3, [r7, #8]
   2af2a:	689b      	ldr	r3, [r3, #8]
   2af2c:	4a16      	ldr	r2, [pc, #88]	; (2af88 <tcc_init+0x370>)
   2af2e:	4013      	ands	r3, r2
   2af30:	d1fa      	bne.n	2af28 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2af32:	687b      	ldr	r3, [r7, #4]
   2af34:	685a      	ldr	r2, [r3, #4]
   2af36:	68bb      	ldr	r3, [r7, #8]
   2af38:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2af3a:	2300      	movs	r3, #0
   2af3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2af3e:	e03f      	b.n	2afc0 <tcc_init+0x3a8>
   2af40:	0002a581 	.word	0x0002a581
   2af44:	000396ac 	.word	0x000396ac
   2af48:	0002a4fd 	.word	0x0002a4fd
   2af4c:	000396b8 	.word	0x000396b8
   2af50:	000396c8 	.word	0x000396c8
   2af54:	0002a88d 	.word	0x0002a88d
   2af58:	0002a931 	.word	0x0002a931
   2af5c:	0002a98d 	.word	0x0002a98d
   2af60:	0002aaa9 	.word	0x0002aaa9
   2af64:	0002ab81 	.word	0x0002ab81
   2af68:	200057b0 	.word	0x200057b0
   2af6c:	0002a4e5 	.word	0x0002a4e5
   2af70:	000396a8 	.word	0x000396a8
   2af74:	0002a0fd 	.word	0x0002a0fd
   2af78:	0002a141 	.word	0x0002a141
   2af7c:	0002a559 	.word	0x0002a559
   2af80:	0002a45d 	.word	0x0002a45d
   2af84:	00020040 	.word	0x00020040
   2af88:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2af8c:	46c0      	nop			; (mov r8, r8)
   2af8e:	68bb      	ldr	r3, [r7, #8]
   2af90:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2af92:	4912      	ldr	r1, [pc, #72]	; (2afdc <tcc_init+0x3c4>)
   2af94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2af96:	4091      	lsls	r1, r2
   2af98:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2af9a:	4013      	ands	r3, r2
   2af9c:	d1f7      	bne.n	2af8e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2af9e:	687a      	ldr	r2, [r7, #4]
   2afa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2afa2:	3306      	adds	r3, #6
   2afa4:	009b      	lsls	r3, r3, #2
   2afa6:	18d3      	adds	r3, r2, r3
   2afa8:	3304      	adds	r3, #4
   2afaa:	681a      	ldr	r2, [r3, #0]
   2afac:	68b9      	ldr	r1, [r7, #8]
   2afae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2afb0:	3310      	adds	r3, #16
   2afb2:	009b      	lsls	r3, r3, #2
   2afb4:	18cb      	adds	r3, r1, r3
   2afb6:	3304      	adds	r3, #4
   2afb8:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2afba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2afbc:	3301      	adds	r3, #1
   2afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   2afc0:	233b      	movs	r3, #59	; 0x3b
   2afc2:	18fb      	adds	r3, r7, r3
   2afc4:	781b      	ldrb	r3, [r3, #0]
   2afc6:	4a06      	ldr	r2, [pc, #24]	; (2afe0 <tcc_init+0x3c8>)
   2afc8:	5cd3      	ldrb	r3, [r2, r3]
   2afca:	001a      	movs	r2, r3
   2afcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2afce:	429a      	cmp	r2, r3
   2afd0:	dcdc      	bgt.n	2af8c <tcc_init+0x374>
	}

	return STATUS_OK;
   2afd2:	2300      	movs	r3, #0
}
   2afd4:	0018      	movs	r0, r3
   2afd6:	46bd      	mov	sp, r7
   2afd8:	b011      	add	sp, #68	; 0x44
   2afda:	bd90      	pop	{r4, r7, pc}
   2afdc:	00080100 	.word	0x00080100
   2afe0:	000396c4 	.word	0x000396c4

0002afe4 <system_interrupt_enable>:
{
   2afe4:	b580      	push	{r7, lr}
   2afe6:	b082      	sub	sp, #8
   2afe8:	af00      	add	r7, sp, #0
   2afea:	0002      	movs	r2, r0
   2afec:	1dfb      	adds	r3, r7, #7
   2afee:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2aff0:	4b06      	ldr	r3, [pc, #24]	; (2b00c <system_interrupt_enable+0x28>)
   2aff2:	1dfa      	adds	r2, r7, #7
   2aff4:	7812      	ldrb	r2, [r2, #0]
   2aff6:	0011      	movs	r1, r2
   2aff8:	221f      	movs	r2, #31
   2affa:	400a      	ands	r2, r1
   2affc:	2101      	movs	r1, #1
   2affe:	4091      	lsls	r1, r2
   2b000:	000a      	movs	r2, r1
   2b002:	601a      	str	r2, [r3, #0]
}
   2b004:	46c0      	nop			; (mov r8, r8)
   2b006:	46bd      	mov	sp, r7
   2b008:	b002      	add	sp, #8
   2b00a:	bd80      	pop	{r7, pc}
   2b00c:	e000e100 	.word	0xe000e100

0002b010 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2b010:	b580      	push	{r7, lr}
   2b012:	b082      	sub	sp, #8
   2b014:	af00      	add	r7, sp, #0
   2b016:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2b018:	4a04      	ldr	r2, [pc, #16]	; (2b02c <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2b01a:	687b      	ldr	r3, [r7, #4]
   2b01c:	18d3      	adds	r3, r2, r3
   2b01e:	781b      	ldrb	r3, [r3, #0]
   2b020:	b25b      	sxtb	r3, r3
}
   2b022:	0018      	movs	r0, r3
   2b024:	46bd      	mov	sp, r7
   2b026:	b002      	add	sp, #8
   2b028:	bd80      	pop	{r7, pc}
   2b02a:	46c0      	nop			; (mov r8, r8)
   2b02c:	200000cc 	.word	0x200000cc

0002b030 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2b030:	b580      	push	{r7, lr}
   2b032:	b084      	sub	sp, #16
   2b034:	af00      	add	r7, sp, #0
   2b036:	60f8      	str	r0, [r7, #12]
   2b038:	60b9      	str	r1, [r7, #8]
   2b03a:	1dfb      	adds	r3, r7, #7
   2b03c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b03e:	1dfb      	adds	r3, r7, #7
   2b040:	781b      	ldrb	r3, [r3, #0]
   2b042:	68fa      	ldr	r2, [r7, #12]
   2b044:	009b      	lsls	r3, r3, #2
   2b046:	18d3      	adds	r3, r2, r3
   2b048:	3304      	adds	r3, #4
   2b04a:	68ba      	ldr	r2, [r7, #8]
   2b04c:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2b04e:	68fb      	ldr	r3, [r7, #12]
   2b050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2b052:	1dfb      	adds	r3, r7, #7
   2b054:	7819      	ldrb	r1, [r3, #0]
   2b056:	4b05      	ldr	r3, [pc, #20]	; (2b06c <tcc_register_callback+0x3c>)
   2b058:	0089      	lsls	r1, r1, #2
   2b05a:	58cb      	ldr	r3, [r1, r3]
   2b05c:	431a      	orrs	r2, r3
   2b05e:	68fb      	ldr	r3, [r7, #12]
   2b060:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2b062:	2300      	movs	r3, #0
}
   2b064:	0018      	movs	r0, r3
   2b066:	46bd      	mov	sp, r7
   2b068:	b004      	add	sp, #16
   2b06a:	bd80      	pop	{r7, pc}
   2b06c:	000396cc 	.word	0x000396cc

0002b070 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2b070:	b580      	push	{r7, lr}
   2b072:	b082      	sub	sp, #8
   2b074:	af00      	add	r7, sp, #0
   2b076:	6078      	str	r0, [r7, #4]
   2b078:	000a      	movs	r2, r1
   2b07a:	1cfb      	adds	r3, r7, #3
   2b07c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2b07e:	687b      	ldr	r3, [r7, #4]
   2b080:	681b      	ldr	r3, [r3, #0]
   2b082:	0018      	movs	r0, r3
   2b084:	4b0f      	ldr	r3, [pc, #60]	; (2b0c4 <tcc_enable_callback+0x54>)
   2b086:	4798      	blx	r3
   2b088:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2b08a:	0018      	movs	r0, r3
   2b08c:	4b0e      	ldr	r3, [pc, #56]	; (2b0c8 <tcc_enable_callback+0x58>)
   2b08e:	4798      	blx	r3
   2b090:	0003      	movs	r3, r0
   2b092:	0018      	movs	r0, r3
   2b094:	4b0d      	ldr	r3, [pc, #52]	; (2b0cc <tcc_enable_callback+0x5c>)
   2b096:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2b098:	687b      	ldr	r3, [r7, #4]
   2b09a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2b09c:	1cfb      	adds	r3, r7, #3
   2b09e:	7819      	ldrb	r1, [r3, #0]
   2b0a0:	4b0b      	ldr	r3, [pc, #44]	; (2b0d0 <tcc_enable_callback+0x60>)
   2b0a2:	0089      	lsls	r1, r1, #2
   2b0a4:	58cb      	ldr	r3, [r1, r3]
   2b0a6:	431a      	orrs	r2, r3
   2b0a8:	687b      	ldr	r3, [r7, #4]
   2b0aa:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2b0ac:	687b      	ldr	r3, [r7, #4]
   2b0ae:	681b      	ldr	r3, [r3, #0]
   2b0b0:	1cfa      	adds	r2, r7, #3
   2b0b2:	7811      	ldrb	r1, [r2, #0]
   2b0b4:	4a06      	ldr	r2, [pc, #24]	; (2b0d0 <tcc_enable_callback+0x60>)
   2b0b6:	0089      	lsls	r1, r1, #2
   2b0b8:	588a      	ldr	r2, [r1, r2]
   2b0ba:	629a      	str	r2, [r3, #40]	; 0x28
}
   2b0bc:	46c0      	nop			; (mov r8, r8)
   2b0be:	46bd      	mov	sp, r7
   2b0c0:	b002      	add	sp, #8
   2b0c2:	bd80      	pop	{r7, pc}
   2b0c4:	0002a581 	.word	0x0002a581
   2b0c8:	0002b011 	.word	0x0002b011
   2b0cc:	0002afe5 	.word	0x0002afe5
   2b0d0:	000396cc 	.word	0x000396cc

0002b0d4 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2b0d4:	b580      	push	{r7, lr}
   2b0d6:	af00      	add	r7, sp, #0
   2b0d8:	2000      	movs	r0, #0
   2b0da:	4b02      	ldr	r3, [pc, #8]	; (2b0e4 <TCC0_Handler+0x10>)
   2b0dc:	4798      	blx	r3
   2b0de:	46c0      	nop			; (mov r8, r8)
   2b0e0:	46bd      	mov	sp, r7
   2b0e2:	bd80      	pop	{r7, pc}
   2b0e4:	0002b111 	.word	0x0002b111

0002b0e8 <TCC1_Handler>:
   2b0e8:	b580      	push	{r7, lr}
   2b0ea:	af00      	add	r7, sp, #0
   2b0ec:	2001      	movs	r0, #1
   2b0ee:	4b02      	ldr	r3, [pc, #8]	; (2b0f8 <TCC1_Handler+0x10>)
   2b0f0:	4798      	blx	r3
   2b0f2:	46c0      	nop			; (mov r8, r8)
   2b0f4:	46bd      	mov	sp, r7
   2b0f6:	bd80      	pop	{r7, pc}
   2b0f8:	0002b111 	.word	0x0002b111

0002b0fc <TCC2_Handler>:
   2b0fc:	b580      	push	{r7, lr}
   2b0fe:	af00      	add	r7, sp, #0
   2b100:	2002      	movs	r0, #2
   2b102:	4b02      	ldr	r3, [pc, #8]	; (2b10c <TCC2_Handler+0x10>)
   2b104:	4798      	blx	r3
   2b106:	46c0      	nop			; (mov r8, r8)
   2b108:	46bd      	mov	sp, r7
   2b10a:	bd80      	pop	{r7, pc}
   2b10c:	0002b111 	.word	0x0002b111

0002b110 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2b110:	b580      	push	{r7, lr}
   2b112:	b086      	sub	sp, #24
   2b114:	af00      	add	r7, sp, #0
   2b116:	0002      	movs	r2, r0
   2b118:	1dfb      	adds	r3, r7, #7
   2b11a:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2b11c:	1dfb      	adds	r3, r7, #7
   2b11e:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2b120:	4b18      	ldr	r3, [pc, #96]	; (2b184 <_tcc_interrupt_handler+0x74>)
   2b122:	0092      	lsls	r2, r2, #2
   2b124:	58d3      	ldr	r3, [r2, r3]
   2b126:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b128:	693b      	ldr	r3, [r7, #16]
   2b12a:	681b      	ldr	r3, [r3, #0]
   2b12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2b12e:	693b      	ldr	r3, [r7, #16]
   2b130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b132:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2b134:	693b      	ldr	r3, [r7, #16]
   2b136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2b138:	4013      	ands	r3, r2
   2b13a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b13c:	2300      	movs	r3, #0
   2b13e:	617b      	str	r3, [r7, #20]
   2b140:	e019      	b.n	2b176 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2b142:	4b11      	ldr	r3, [pc, #68]	; (2b188 <_tcc_interrupt_handler+0x78>)
   2b144:	697a      	ldr	r2, [r7, #20]
   2b146:	0092      	lsls	r2, r2, #2
   2b148:	58d3      	ldr	r3, [r2, r3]
   2b14a:	68fa      	ldr	r2, [r7, #12]
   2b14c:	4013      	ands	r3, r2
   2b14e:	d00f      	beq.n	2b170 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2b150:	693a      	ldr	r2, [r7, #16]
   2b152:	697b      	ldr	r3, [r7, #20]
   2b154:	009b      	lsls	r3, r3, #2
   2b156:	18d3      	adds	r3, r2, r3
   2b158:	3304      	adds	r3, #4
   2b15a:	681b      	ldr	r3, [r3, #0]
   2b15c:	693a      	ldr	r2, [r7, #16]
   2b15e:	0010      	movs	r0, r2
   2b160:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2b162:	693b      	ldr	r3, [r7, #16]
   2b164:	681b      	ldr	r3, [r3, #0]
   2b166:	4a08      	ldr	r2, [pc, #32]	; (2b188 <_tcc_interrupt_handler+0x78>)
   2b168:	6979      	ldr	r1, [r7, #20]
   2b16a:	0089      	lsls	r1, r1, #2
   2b16c:	588a      	ldr	r2, [r1, r2]
   2b16e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b170:	697b      	ldr	r3, [r7, #20]
   2b172:	3301      	adds	r3, #1
   2b174:	617b      	str	r3, [r7, #20]
   2b176:	697b      	ldr	r3, [r7, #20]
   2b178:	2b0b      	cmp	r3, #11
   2b17a:	dde2      	ble.n	2b142 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2b17c:	46c0      	nop			; (mov r8, r8)
   2b17e:	46bd      	mov	sp, r7
   2b180:	b006      	add	sp, #24
   2b182:	bd80      	pop	{r7, pc}
   2b184:	200057b0 	.word	0x200057b0
   2b188:	000396cc 	.word	0x000396cc

0002b18c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2b18c:	b580      	push	{r7, lr}
   2b18e:	b082      	sub	sp, #8
   2b190:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2b192:	4b2f      	ldr	r3, [pc, #188]	; (2b250 <Reset_Handler+0xc4>)
   2b194:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2b196:	4b2f      	ldr	r3, [pc, #188]	; (2b254 <Reset_Handler+0xc8>)
   2b198:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2b19a:	687a      	ldr	r2, [r7, #4]
   2b19c:	683b      	ldr	r3, [r7, #0]
   2b19e:	429a      	cmp	r2, r3
   2b1a0:	d00c      	beq.n	2b1bc <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2b1a2:	e007      	b.n	2b1b4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2b1a4:	683b      	ldr	r3, [r7, #0]
   2b1a6:	1d1a      	adds	r2, r3, #4
   2b1a8:	603a      	str	r2, [r7, #0]
   2b1aa:	687a      	ldr	r2, [r7, #4]
   2b1ac:	1d11      	adds	r1, r2, #4
   2b1ae:	6079      	str	r1, [r7, #4]
   2b1b0:	6812      	ldr	r2, [r2, #0]
   2b1b2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2b1b4:	683a      	ldr	r2, [r7, #0]
   2b1b6:	4b28      	ldr	r3, [pc, #160]	; (2b258 <Reset_Handler+0xcc>)
   2b1b8:	429a      	cmp	r2, r3
   2b1ba:	d3f3      	bcc.n	2b1a4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2b1bc:	4b27      	ldr	r3, [pc, #156]	; (2b25c <Reset_Handler+0xd0>)
   2b1be:	603b      	str	r3, [r7, #0]
   2b1c0:	e004      	b.n	2b1cc <Reset_Handler+0x40>
                *pDest++ = 0;
   2b1c2:	683b      	ldr	r3, [r7, #0]
   2b1c4:	1d1a      	adds	r2, r3, #4
   2b1c6:	603a      	str	r2, [r7, #0]
   2b1c8:	2200      	movs	r2, #0
   2b1ca:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2b1cc:	683a      	ldr	r2, [r7, #0]
   2b1ce:	4b24      	ldr	r3, [pc, #144]	; (2b260 <Reset_Handler+0xd4>)
   2b1d0:	429a      	cmp	r2, r3
   2b1d2:	d3f6      	bcc.n	2b1c2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2b1d4:	4b23      	ldr	r3, [pc, #140]	; (2b264 <Reset_Handler+0xd8>)
   2b1d6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2b1d8:	4b23      	ldr	r3, [pc, #140]	; (2b268 <Reset_Handler+0xdc>)
   2b1da:	687a      	ldr	r2, [r7, #4]
   2b1dc:	21ff      	movs	r1, #255	; 0xff
   2b1de:	438a      	bics	r2, r1
   2b1e0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2b1e2:	4a22      	ldr	r2, [pc, #136]	; (2b26c <Reset_Handler+0xe0>)
   2b1e4:	2390      	movs	r3, #144	; 0x90
   2b1e6:	005b      	lsls	r3, r3, #1
   2b1e8:	2102      	movs	r1, #2
   2b1ea:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2b1ec:	4a20      	ldr	r2, [pc, #128]	; (2b270 <Reset_Handler+0xe4>)
   2b1ee:	78d3      	ldrb	r3, [r2, #3]
   2b1f0:	2103      	movs	r1, #3
   2b1f2:	438b      	bics	r3, r1
   2b1f4:	1c19      	adds	r1, r3, #0
   2b1f6:	2302      	movs	r3, #2
   2b1f8:	430b      	orrs	r3, r1
   2b1fa:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2b1fc:	4a1c      	ldr	r2, [pc, #112]	; (2b270 <Reset_Handler+0xe4>)
   2b1fe:	78d3      	ldrb	r3, [r2, #3]
   2b200:	210c      	movs	r1, #12
   2b202:	438b      	bics	r3, r1
   2b204:	1c19      	adds	r1, r3, #0
   2b206:	2308      	movs	r3, #8
   2b208:	430b      	orrs	r3, r1
   2b20a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2b20c:	4a19      	ldr	r2, [pc, #100]	; (2b274 <Reset_Handler+0xe8>)
   2b20e:	7b93      	ldrb	r3, [r2, #14]
   2b210:	2130      	movs	r1, #48	; 0x30
   2b212:	438b      	bics	r3, r1
   2b214:	1c19      	adds	r1, r3, #0
   2b216:	2320      	movs	r3, #32
   2b218:	430b      	orrs	r3, r1
   2b21a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2b21c:	4a15      	ldr	r2, [pc, #84]	; (2b274 <Reset_Handler+0xe8>)
   2b21e:	7b93      	ldrb	r3, [r2, #14]
   2b220:	210c      	movs	r1, #12
   2b222:	438b      	bics	r3, r1
   2b224:	1c19      	adds	r1, r3, #0
   2b226:	2308      	movs	r3, #8
   2b228:	430b      	orrs	r3, r1
   2b22a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2b22c:	4a11      	ldr	r2, [pc, #68]	; (2b274 <Reset_Handler+0xe8>)
   2b22e:	7b93      	ldrb	r3, [r2, #14]
   2b230:	2103      	movs	r1, #3
   2b232:	438b      	bics	r3, r1
   2b234:	1c19      	adds	r1, r3, #0
   2b236:	2302      	movs	r3, #2
   2b238:	430b      	orrs	r3, r1
   2b23a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2b23c:	4a0e      	ldr	r2, [pc, #56]	; (2b278 <Reset_Handler+0xec>)
   2b23e:	6853      	ldr	r3, [r2, #4]
   2b240:	2180      	movs	r1, #128	; 0x80
   2b242:	430b      	orrs	r3, r1
   2b244:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2b246:	4b0d      	ldr	r3, [pc, #52]	; (2b27c <Reset_Handler+0xf0>)
   2b248:	4798      	blx	r3

        /* Branch to main function */
        main();
   2b24a:	4b0d      	ldr	r3, [pc, #52]	; (2b280 <Reset_Handler+0xf4>)
   2b24c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2b24e:	e7fe      	b.n	2b24e <Reset_Handler+0xc2>
   2b250:	0003a4cc 	.word	0x0003a4cc
   2b254:	20000000 	.word	0x20000000
   2b258:	200002a4 	.word	0x200002a4
   2b25c:	200002b0 	.word	0x200002b0
   2b260:	20005820 	.word	0x20005820
   2b264:	00012000 	.word	0x00012000
   2b268:	e000ed00 	.word	0xe000ed00
   2b26c:	41007000 	.word	0x41007000
   2b270:	41005000 	.word	0x41005000
   2b274:	41004800 	.word	0x41004800
   2b278:	41004000 	.word	0x41004000
   2b27c:	00034b99 	.word	0x00034b99
   2b280:	00032969 	.word	0x00032969

0002b284 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2b284:	b580      	push	{r7, lr}
   2b286:	af00      	add	r7, sp, #0
  __asm volatile (
   2b288:	2004      	movs	r0, #4
   2b28a:	4671      	mov	r1, lr
   2b28c:	4208      	tst	r0, r1
   2b28e:	d002      	beq.n	2b296 <_MSP>
   2b290:	f3ef 8009 	mrs	r0, PSP
   2b294:	e001      	b.n	2b29a <_HALT>

0002b296 <_MSP>:
   2b296:	f3ef 8008 	mrs	r0, MSP

0002b29a <_HALT>:
   2b29a:	6941      	ldr	r1, [r0, #20]
   2b29c:	e004      	b.n	2b2a8 <HardFault_HandlerC>
   2b29e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2b2a0:	46c0      	nop			; (mov r8, r8)
   2b2a2:	46bd      	mov	sp, r7
   2b2a4:	bd80      	pop	{r7, pc}
	...

0002b2a8 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2b2a8:	b580      	push	{r7, lr}
   2b2aa:	b090      	sub	sp, #64	; 0x40
   2b2ac:	af00      	add	r7, sp, #0
   2b2ae:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2b2b0:	687b      	ldr	r3, [r7, #4]
   2b2b2:	681b      	ldr	r3, [r3, #0]
   2b2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2b2b6:	687b      	ldr	r3, [r7, #4]
   2b2b8:	685b      	ldr	r3, [r3, #4]
   2b2ba:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2b2bc:	687b      	ldr	r3, [r7, #4]
   2b2be:	689b      	ldr	r3, [r3, #8]
   2b2c0:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2b2c2:	687b      	ldr	r3, [r7, #4]
   2b2c4:	68db      	ldr	r3, [r3, #12]
   2b2c6:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2b2c8:	687b      	ldr	r3, [r7, #4]
   2b2ca:	691b      	ldr	r3, [r3, #16]
   2b2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2b2ce:	687b      	ldr	r3, [r7, #4]
   2b2d0:	695b      	ldr	r3, [r3, #20]
   2b2d2:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2b2d4:	687b      	ldr	r3, [r7, #4]
   2b2d6:	699b      	ldr	r3, [r3, #24]
   2b2d8:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2b2da:	687b      	ldr	r3, [r7, #4]
   2b2dc:	69db      	ldr	r3, [r3, #28]
   2b2de:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2b2e0:	4b0b      	ldr	r3, [pc, #44]	; (2b310 <HardFault_HandlerC+0x68>)
   2b2e2:	681b      	ldr	r3, [r3, #0]
   2b2e4:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2b2e6:	4b0b      	ldr	r3, [pc, #44]	; (2b314 <HardFault_HandlerC+0x6c>)
   2b2e8:	681b      	ldr	r3, [r3, #0]
   2b2ea:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2b2ec:	4b0a      	ldr	r3, [pc, #40]	; (2b318 <HardFault_HandlerC+0x70>)
   2b2ee:	681b      	ldr	r3, [r3, #0]
   2b2f0:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2b2f2:	4b0a      	ldr	r3, [pc, #40]	; (2b31c <HardFault_HandlerC+0x74>)
   2b2f4:	681b      	ldr	r3, [r3, #0]
   2b2f6:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2b2f8:	4b09      	ldr	r3, [pc, #36]	; (2b320 <HardFault_HandlerC+0x78>)
   2b2fa:	681b      	ldr	r3, [r3, #0]
   2b2fc:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2b2fe:	4b09      	ldr	r3, [pc, #36]	; (2b324 <HardFault_HandlerC+0x7c>)
   2b300:	681b      	ldr	r3, [r3, #0]
   2b302:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2b304:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2b306:	46c0      	nop			; (mov r8, r8)
   2b308:	46bd      	mov	sp, r7
   2b30a:	b010      	add	sp, #64	; 0x40
   2b30c:	bd80      	pop	{r7, pc}
   2b30e:	46c0      	nop			; (mov r8, r8)
   2b310:	e000ed28 	.word	0xe000ed28
   2b314:	e000ed2c 	.word	0xe000ed2c
   2b318:	e000ed30 	.word	0xe000ed30
   2b31c:	e000ed3c 	.word	0xe000ed3c
   2b320:	e000ed34 	.word	0xe000ed34
   2b324:	e000ed38 	.word	0xe000ed38

0002b328 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2b328:	b580      	push	{r7, lr}
   2b32a:	b086      	sub	sp, #24
   2b32c:	af00      	add	r7, sp, #0
   2b32e:	60f8      	str	r0, [r7, #12]
   2b330:	60b9      	str	r1, [r7, #8]
   2b332:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2b334:	2300      	movs	r3, #0
   2b336:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2b338:	68fb      	ldr	r3, [r7, #12]
   2b33a:	2b00      	cmp	r3, #0
   2b33c:	d012      	beq.n	2b364 <_read+0x3c>
		return -1;
   2b33e:	2301      	movs	r3, #1
   2b340:	425b      	negs	r3, r3
   2b342:	e013      	b.n	2b36c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2b344:	4b0b      	ldr	r3, [pc, #44]	; (2b374 <_read+0x4c>)
   2b346:	681a      	ldr	r2, [r3, #0]
   2b348:	4b0b      	ldr	r3, [pc, #44]	; (2b378 <_read+0x50>)
   2b34a:	681b      	ldr	r3, [r3, #0]
   2b34c:	68b9      	ldr	r1, [r7, #8]
   2b34e:	0018      	movs	r0, r3
   2b350:	4790      	blx	r2
		ptr++;
   2b352:	68bb      	ldr	r3, [r7, #8]
   2b354:	3301      	adds	r3, #1
   2b356:	60bb      	str	r3, [r7, #8]
		nChars++;
   2b358:	697b      	ldr	r3, [r7, #20]
   2b35a:	3301      	adds	r3, #1
   2b35c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2b35e:	687b      	ldr	r3, [r7, #4]
   2b360:	3b01      	subs	r3, #1
   2b362:	607b      	str	r3, [r7, #4]
   2b364:	687b      	ldr	r3, [r7, #4]
   2b366:	2b00      	cmp	r3, #0
   2b368:	dcec      	bgt.n	2b344 <_read+0x1c>
	}
	return nChars;
   2b36a:	697b      	ldr	r3, [r7, #20]
}
   2b36c:	0018      	movs	r0, r3
   2b36e:	46bd      	mov	sp, r7
   2b370:	b006      	add	sp, #24
   2b372:	bd80      	pop	{r7, pc}
   2b374:	200057bc 	.word	0x200057bc
   2b378:	200057c4 	.word	0x200057c4

0002b37c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2b37c:	b580      	push	{r7, lr}
   2b37e:	b086      	sub	sp, #24
   2b380:	af00      	add	r7, sp, #0
   2b382:	60f8      	str	r0, [r7, #12]
   2b384:	60b9      	str	r1, [r7, #8]
   2b386:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2b388:	2300      	movs	r3, #0
   2b38a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2b38c:	68fb      	ldr	r3, [r7, #12]
   2b38e:	2b01      	cmp	r3, #1
   2b390:	d01d      	beq.n	2b3ce <_write+0x52>
   2b392:	68fb      	ldr	r3, [r7, #12]
   2b394:	2b02      	cmp	r3, #2
   2b396:	d01a      	beq.n	2b3ce <_write+0x52>
   2b398:	68fb      	ldr	r3, [r7, #12]
   2b39a:	2b03      	cmp	r3, #3
   2b39c:	d017      	beq.n	2b3ce <_write+0x52>
		return -1;
   2b39e:	2301      	movs	r3, #1
   2b3a0:	425b      	negs	r3, r3
   2b3a2:	e018      	b.n	2b3d6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2b3a4:	4b0e      	ldr	r3, [pc, #56]	; (2b3e0 <_write+0x64>)
   2b3a6:	681a      	ldr	r2, [r3, #0]
   2b3a8:	4b0e      	ldr	r3, [pc, #56]	; (2b3e4 <_write+0x68>)
   2b3aa:	6818      	ldr	r0, [r3, #0]
   2b3ac:	68bb      	ldr	r3, [r7, #8]
   2b3ae:	1c59      	adds	r1, r3, #1
   2b3b0:	60b9      	str	r1, [r7, #8]
   2b3b2:	781b      	ldrb	r3, [r3, #0]
   2b3b4:	0019      	movs	r1, r3
   2b3b6:	4790      	blx	r2
   2b3b8:	1e03      	subs	r3, r0, #0
   2b3ba:	da02      	bge.n	2b3c2 <_write+0x46>
			return -1;
   2b3bc:	2301      	movs	r3, #1
   2b3be:	425b      	negs	r3, r3
   2b3c0:	e009      	b.n	2b3d6 <_write+0x5a>
		}
		++nChars;
   2b3c2:	697b      	ldr	r3, [r7, #20]
   2b3c4:	3301      	adds	r3, #1
   2b3c6:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2b3c8:	687b      	ldr	r3, [r7, #4]
   2b3ca:	3b01      	subs	r3, #1
   2b3cc:	607b      	str	r3, [r7, #4]
   2b3ce:	687b      	ldr	r3, [r7, #4]
   2b3d0:	2b00      	cmp	r3, #0
   2b3d2:	d1e7      	bne.n	2b3a4 <_write+0x28>
	}
	return nChars;
   2b3d4:	697b      	ldr	r3, [r7, #20]
}
   2b3d6:	0018      	movs	r0, r3
   2b3d8:	46bd      	mov	sp, r7
   2b3da:	b006      	add	sp, #24
   2b3dc:	bd80      	pop	{r7, pc}
   2b3de:	46c0      	nop			; (mov r8, r8)
   2b3e0:	200057c0 	.word	0x200057c0
   2b3e4:	200057c4 	.word	0x200057c4

0002b3e8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2b3e8:	b580      	push	{r7, lr}
   2b3ea:	b084      	sub	sp, #16
   2b3ec:	af00      	add	r7, sp, #0
   2b3ee:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2b3f0:	4b0a      	ldr	r3, [pc, #40]	; (2b41c <_sbrk+0x34>)
   2b3f2:	681b      	ldr	r3, [r3, #0]
   2b3f4:	2b00      	cmp	r3, #0
   2b3f6:	d102      	bne.n	2b3fe <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2b3f8:	4b08      	ldr	r3, [pc, #32]	; (2b41c <_sbrk+0x34>)
   2b3fa:	4a09      	ldr	r2, [pc, #36]	; (2b420 <_sbrk+0x38>)
   2b3fc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2b3fe:	4b07      	ldr	r3, [pc, #28]	; (2b41c <_sbrk+0x34>)
   2b400:	681b      	ldr	r3, [r3, #0]
   2b402:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2b404:	4b05      	ldr	r3, [pc, #20]	; (2b41c <_sbrk+0x34>)
   2b406:	681a      	ldr	r2, [r3, #0]
   2b408:	687b      	ldr	r3, [r7, #4]
   2b40a:	18d2      	adds	r2, r2, r3
   2b40c:	4b03      	ldr	r3, [pc, #12]	; (2b41c <_sbrk+0x34>)
   2b40e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2b410:	68fb      	ldr	r3, [r7, #12]
}
   2b412:	0018      	movs	r0, r3
   2b414:	46bd      	mov	sp, r7
   2b416:	b004      	add	sp, #16
   2b418:	bd80      	pop	{r7, pc}
   2b41a:	46c0      	nop			; (mov r8, r8)
   2b41c:	20003ee4 	.word	0x20003ee4
   2b420:	20007820 	.word	0x20007820

0002b424 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2b424:	b580      	push	{r7, lr}
   2b426:	b082      	sub	sp, #8
   2b428:	af00      	add	r7, sp, #0
   2b42a:	6078      	str	r0, [r7, #4]
	return -1;
   2b42c:	2301      	movs	r3, #1
   2b42e:	425b      	negs	r3, r3
}
   2b430:	0018      	movs	r0, r3
   2b432:	46bd      	mov	sp, r7
   2b434:	b002      	add	sp, #8
   2b436:	bd80      	pop	{r7, pc}

0002b438 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2b438:	b580      	push	{r7, lr}
   2b43a:	b082      	sub	sp, #8
   2b43c:	af00      	add	r7, sp, #0
   2b43e:	6078      	str	r0, [r7, #4]
   2b440:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2b442:	683b      	ldr	r3, [r7, #0]
   2b444:	2280      	movs	r2, #128	; 0x80
   2b446:	0192      	lsls	r2, r2, #6
   2b448:	605a      	str	r2, [r3, #4]

	return 0;
   2b44a:	2300      	movs	r3, #0
}
   2b44c:	0018      	movs	r0, r3
   2b44e:	46bd      	mov	sp, r7
   2b450:	b002      	add	sp, #8
   2b452:	bd80      	pop	{r7, pc}

0002b454 <_isatty>:

extern int _isatty(int file)
{
   2b454:	b580      	push	{r7, lr}
   2b456:	b082      	sub	sp, #8
   2b458:	af00      	add	r7, sp, #0
   2b45a:	6078      	str	r0, [r7, #4]
	return 1;
   2b45c:	2301      	movs	r3, #1
}
   2b45e:	0018      	movs	r0, r3
   2b460:	46bd      	mov	sp, r7
   2b462:	b002      	add	sp, #8
   2b464:	bd80      	pop	{r7, pc}

0002b466 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2b466:	b580      	push	{r7, lr}
   2b468:	b084      	sub	sp, #16
   2b46a:	af00      	add	r7, sp, #0
   2b46c:	60f8      	str	r0, [r7, #12]
   2b46e:	60b9      	str	r1, [r7, #8]
   2b470:	607a      	str	r2, [r7, #4]
	return 0;
   2b472:	2300      	movs	r3, #0
}
   2b474:	0018      	movs	r0, r3
   2b476:	46bd      	mov	sp, r7
   2b478:	b004      	add	sp, #16
   2b47a:	bd80      	pop	{r7, pc}

0002b47c <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2b47c:	b580      	push	{r7, lr}
   2b47e:	b082      	sub	sp, #8
   2b480:	af00      	add	r7, sp, #0
   2b482:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2b484:	687b      	ldr	r3, [r7, #4]
   2b486:	2200      	movs	r2, #0
   2b488:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2b48a:	687b      	ldr	r3, [r7, #4]
   2b48c:	2200      	movs	r2, #0
   2b48e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2b490:	687b      	ldr	r3, [r7, #4]
   2b492:	2200      	movs	r2, #0
   2b494:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2b496:	687b      	ldr	r3, [r7, #4]
   2b498:	2200      	movs	r2, #0
   2b49a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2b49c:	687b      	ldr	r3, [r7, #4]
   2b49e:	2201      	movs	r2, #1
   2b4a0:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2b4a2:	687b      	ldr	r3, [r7, #4]
   2b4a4:	2201      	movs	r2, #1
   2b4a6:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2b4a8:	687b      	ldr	r3, [r7, #4]
   2b4aa:	22fa      	movs	r2, #250	; 0xfa
   2b4ac:	00d2      	lsls	r2, r2, #3
   2b4ae:	80da      	strh	r2, [r3, #6]
}
   2b4b0:	46c0      	nop			; (mov r8, r8)
   2b4b2:	46bd      	mov	sp, r7
   2b4b4:	b002      	add	sp, #8
   2b4b6:	bd80      	pop	{r7, pc}

0002b4b8 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2b4b8:	b580      	push	{r7, lr}
   2b4ba:	b086      	sub	sp, #24
   2b4bc:	af00      	add	r7, sp, #0
   2b4be:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2b4c0:	230c      	movs	r3, #12
   2b4c2:	18fb      	adds	r3, r7, r3
   2b4c4:	0018      	movs	r0, r3
   2b4c6:	4b23      	ldr	r3, [pc, #140]	; (2b554 <rtc_calendar_get_config_defaults+0x9c>)
   2b4c8:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2b4ca:	687b      	ldr	r3, [r7, #4]
   2b4cc:	22a0      	movs	r2, #160	; 0xa0
   2b4ce:	0112      	lsls	r2, r2, #4
   2b4d0:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2b4d2:	687b      	ldr	r3, [r7, #4]
   2b4d4:	2200      	movs	r2, #0
   2b4d6:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2b4d8:	687b      	ldr	r3, [r7, #4]
   2b4da:	2200      	movs	r2, #0
   2b4dc:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2b4de:	687b      	ldr	r3, [r7, #4]
   2b4e0:	2200      	movs	r2, #0
   2b4e2:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2b4e4:	687b      	ldr	r3, [r7, #4]
   2b4e6:	22fa      	movs	r2, #250	; 0xfa
   2b4e8:	00d2      	lsls	r2, r2, #3
   2b4ea:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b4ec:	2317      	movs	r3, #23
   2b4ee:	18fb      	adds	r3, r7, r3
   2b4f0:	2200      	movs	r2, #0
   2b4f2:	701a      	strb	r2, [r3, #0]
   2b4f4:	e025      	b.n	2b542 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2b4f6:	2317      	movs	r3, #23
   2b4f8:	18fb      	adds	r3, r7, r3
   2b4fa:	781a      	ldrb	r2, [r3, #0]
   2b4fc:	6879      	ldr	r1, [r7, #4]
   2b4fe:	2008      	movs	r0, #8
   2b500:	0013      	movs	r3, r2
   2b502:	009b      	lsls	r3, r3, #2
   2b504:	189b      	adds	r3, r3, r2
   2b506:	005b      	lsls	r3, r3, #1
   2b508:	18cb      	adds	r3, r1, r3
   2b50a:	181a      	adds	r2, r3, r0
   2b50c:	230c      	movs	r3, #12
   2b50e:	18fb      	adds	r3, r7, r3
   2b510:	0010      	movs	r0, r2
   2b512:	0019      	movs	r1, r3
   2b514:	2308      	movs	r3, #8
   2b516:	001a      	movs	r2, r3
   2b518:	4b0f      	ldr	r3, [pc, #60]	; (2b558 <rtc_calendar_get_config_defaults+0xa0>)
   2b51a:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b51c:	2317      	movs	r3, #23
   2b51e:	18fb      	adds	r3, r7, r3
   2b520:	781a      	ldrb	r2, [r3, #0]
   2b522:	6879      	ldr	r1, [r7, #4]
   2b524:	0013      	movs	r3, r2
   2b526:	009b      	lsls	r3, r3, #2
   2b528:	189b      	adds	r3, r3, r2
   2b52a:	005b      	lsls	r3, r3, #1
   2b52c:	18cb      	adds	r3, r1, r3
   2b52e:	3310      	adds	r3, #16
   2b530:	2206      	movs	r2, #6
   2b532:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2b534:	2317      	movs	r3, #23
   2b536:	18fb      	adds	r3, r7, r3
   2b538:	781a      	ldrb	r2, [r3, #0]
   2b53a:	2317      	movs	r3, #23
   2b53c:	18fb      	adds	r3, r7, r3
   2b53e:	3201      	adds	r2, #1
   2b540:	701a      	strb	r2, [r3, #0]
   2b542:	2317      	movs	r3, #23
   2b544:	18fb      	adds	r3, r7, r3
   2b546:	781b      	ldrb	r3, [r3, #0]
   2b548:	2b00      	cmp	r3, #0
   2b54a:	d0d4      	beq.n	2b4f6 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2b54c:	46c0      	nop			; (mov r8, r8)
   2b54e:	46bd      	mov	sp, r7
   2b550:	b006      	add	sp, #24
   2b552:	bd80      	pop	{r7, pc}
   2b554:	0002b47d 	.word	0x0002b47d
   2b558:	00034c09 	.word	0x00034c09

0002b55c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2b55c:	b580      	push	{r7, lr}
   2b55e:	b088      	sub	sp, #32
   2b560:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2b562:	230c      	movs	r3, #12
   2b564:	18fb      	adds	r3, r7, r3
   2b566:	0018      	movs	r0, r3
   2b568:	4b1a      	ldr	r3, [pc, #104]	; (2b5d4 <configure_rtc_calendar+0x78>)
   2b56a:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2b56c:	1d3b      	adds	r3, r7, #4
   2b56e:	0018      	movs	r0, r3
   2b570:	4b19      	ldr	r3, [pc, #100]	; (2b5d8 <configure_rtc_calendar+0x7c>)
   2b572:	4798      	blx	r3
	init_time.year   = 2014;
   2b574:	1d3b      	adds	r3, r7, #4
   2b576:	4a19      	ldr	r2, [pc, #100]	; (2b5dc <configure_rtc_calendar+0x80>)
   2b578:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2b57a:	1d3b      	adds	r3, r7, #4
   2b57c:	2201      	movs	r2, #1
   2b57e:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2b580:	1d3b      	adds	r3, r7, #4
   2b582:	2201      	movs	r2, #1
   2b584:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2b586:	1d3b      	adds	r3, r7, #4
   2b588:	2200      	movs	r2, #0
   2b58a:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2b58c:	1d3b      	adds	r3, r7, #4
   2b58e:	2200      	movs	r2, #0
   2b590:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2b592:	1d3b      	adds	r3, r7, #4
   2b594:	2204      	movs	r2, #4
   2b596:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2b598:	230c      	movs	r3, #12
   2b59a:	18fb      	adds	r3, r7, r3
   2b59c:	2201      	movs	r2, #1
   2b59e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2b5a0:	230c      	movs	r3, #12
   2b5a2:	18fb      	adds	r3, r7, r3
   2b5a4:	1d3a      	adds	r2, r7, #4
   2b5a6:	3308      	adds	r3, #8
   2b5a8:	ca03      	ldmia	r2!, {r0, r1}
   2b5aa:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2b5ac:	230c      	movs	r3, #12
   2b5ae:	18fb      	adds	r3, r7, r3
   2b5b0:	2206      	movs	r2, #6
   2b5b2:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2b5b4:	230c      	movs	r3, #12
   2b5b6:	18fa      	adds	r2, r7, r3
   2b5b8:	4909      	ldr	r1, [pc, #36]	; (2b5e0 <configure_rtc_calendar+0x84>)
   2b5ba:	4b0a      	ldr	r3, [pc, #40]	; (2b5e4 <configure_rtc_calendar+0x88>)
   2b5bc:	0018      	movs	r0, r3
   2b5be:	4b0a      	ldr	r3, [pc, #40]	; (2b5e8 <configure_rtc_calendar+0x8c>)
   2b5c0:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2b5c2:	4b08      	ldr	r3, [pc, #32]	; (2b5e4 <configure_rtc_calendar+0x88>)
   2b5c4:	0018      	movs	r0, r3
   2b5c6:	4b09      	ldr	r3, [pc, #36]	; (2b5ec <configure_rtc_calendar+0x90>)
   2b5c8:	4798      	blx	r3
}
   2b5ca:	46c0      	nop			; (mov r8, r8)
   2b5cc:	46bd      	mov	sp, r7
   2b5ce:	b008      	add	sp, #32
   2b5d0:	bd80      	pop	{r7, pc}
   2b5d2:	46c0      	nop			; (mov r8, r8)
   2b5d4:	0002b4b9 	.word	0x0002b4b9
   2b5d8:	0002b47d 	.word	0x0002b47d
   2b5dc:	000007de 	.word	0x000007de
   2b5e0:	40001400 	.word	0x40001400
   2b5e4:	200057c8 	.word	0x200057c8
   2b5e8:	00027099 	.word	0x00027099
   2b5ec:	00026dc5 	.word	0x00026dc5

0002b5f0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2b5f0:	b590      	push	{r4, r7, lr}
   2b5f2:	b085      	sub	sp, #20
   2b5f4:	af00      	add	r7, sp, #0
   2b5f6:	0002      	movs	r2, r0
   2b5f8:	1dfb      	adds	r3, r7, #7
   2b5fa:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2b5fc:	4b1a      	ldr	r3, [pc, #104]	; (2b668 <disk_initialize+0x78>)
   2b5fe:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2b600:	1dfb      	adds	r3, r7, #7
   2b602:	781b      	ldrb	r3, [r3, #0]
   2b604:	2b01      	cmp	r3, #1
   2b606:	d901      	bls.n	2b60c <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2b608:	2301      	movs	r3, #1
   2b60a:	e029      	b.n	2b660 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2b60c:	2300      	movs	r3, #0
   2b60e:	60fb      	str	r3, [r7, #12]
   2b610:	e010      	b.n	2b634 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2b612:	230b      	movs	r3, #11
   2b614:	18fc      	adds	r4, r7, r3
   2b616:	1dfb      	adds	r3, r7, #7
   2b618:	781b      	ldrb	r3, [r3, #0]
   2b61a:	0018      	movs	r0, r3
   2b61c:	4b13      	ldr	r3, [pc, #76]	; (2b66c <disk_initialize+0x7c>)
   2b61e:	4798      	blx	r3
   2b620:	0003      	movs	r3, r0
   2b622:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2b624:	230b      	movs	r3, #11
   2b626:	18fb      	adds	r3, r7, r3
   2b628:	781b      	ldrb	r3, [r3, #0]
   2b62a:	2b03      	cmp	r3, #3
   2b62c:	d106      	bne.n	2b63c <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2b62e:	68fb      	ldr	r3, [r7, #12]
   2b630:	3301      	adds	r3, #1
   2b632:	60fb      	str	r3, [r7, #12]
   2b634:	68fb      	ldr	r3, [r7, #12]
   2b636:	2b01      	cmp	r3, #1
   2b638:	ddeb      	ble.n	2b612 <disk_initialize+0x22>
   2b63a:	e000      	b.n	2b63e <disk_initialize+0x4e>
			break;
   2b63c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2b63e:	230b      	movs	r3, #11
   2b640:	18fb      	adds	r3, r7, r3
   2b642:	781b      	ldrb	r3, [r3, #0]
   2b644:	2b00      	cmp	r3, #0
   2b646:	d001      	beq.n	2b64c <disk_initialize+0x5c>
		return STA_NOINIT;
   2b648:	2301      	movs	r3, #1
   2b64a:	e009      	b.n	2b660 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2b64c:	1dfb      	adds	r3, r7, #7
   2b64e:	781b      	ldrb	r3, [r3, #0]
   2b650:	0018      	movs	r0, r3
   2b652:	4b07      	ldr	r3, [pc, #28]	; (2b670 <disk_initialize+0x80>)
   2b654:	4798      	blx	r3
   2b656:	1e03      	subs	r3, r0, #0
   2b658:	d001      	beq.n	2b65e <disk_initialize+0x6e>
		return STA_PROTECT;
   2b65a:	2304      	movs	r3, #4
   2b65c:	e000      	b.n	2b660 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2b65e:	2300      	movs	r3, #0
}
   2b660:	0018      	movs	r0, r3
   2b662:	46bd      	mov	sp, r7
   2b664:	b005      	add	sp, #20
   2b666:	bd90      	pop	{r4, r7, pc}
   2b668:	0002b55d 	.word	0x0002b55d
   2b66c:	000262c1 	.word	0x000262c1
   2b670:	00026379 	.word	0x00026379

0002b674 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2b674:	b580      	push	{r7, lr}
   2b676:	b082      	sub	sp, #8
   2b678:	af00      	add	r7, sp, #0
   2b67a:	0002      	movs	r2, r0
   2b67c:	1dfb      	adds	r3, r7, #7
   2b67e:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2b680:	1dfb      	adds	r3, r7, #7
   2b682:	781b      	ldrb	r3, [r3, #0]
   2b684:	0018      	movs	r0, r3
   2b686:	4b08      	ldr	r3, [pc, #32]	; (2b6a8 <disk_status+0x34>)
   2b688:	4798      	blx	r3
   2b68a:	1e03      	subs	r3, r0, #0
   2b68c:	d002      	beq.n	2b694 <disk_status+0x20>
   2b68e:	2b02      	cmp	r3, #2
   2b690:	d002      	beq.n	2b698 <disk_status+0x24>
   2b692:	e003      	b.n	2b69c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2b694:	2300      	movs	r3, #0
   2b696:	e002      	b.n	2b69e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2b698:	2303      	movs	r3, #3
   2b69a:	e000      	b.n	2b69e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2b69c:	2301      	movs	r3, #1
	}
}
   2b69e:	0018      	movs	r0, r3
   2b6a0:	46bd      	mov	sp, r7
   2b6a2:	b002      	add	sp, #8
   2b6a4:	bd80      	pop	{r7, pc}
   2b6a6:	46c0      	nop			; (mov r8, r8)
   2b6a8:	000262c1 	.word	0x000262c1

0002b6ac <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2b6ac:	b590      	push	{r4, r7, lr}
   2b6ae:	b089      	sub	sp, #36	; 0x24
   2b6b0:	af00      	add	r7, sp, #0
   2b6b2:	60b9      	str	r1, [r7, #8]
   2b6b4:	607a      	str	r2, [r7, #4]
   2b6b6:	0019      	movs	r1, r3
   2b6b8:	230f      	movs	r3, #15
   2b6ba:	18fb      	adds	r3, r7, r3
   2b6bc:	1c02      	adds	r2, r0, #0
   2b6be:	701a      	strb	r2, [r3, #0]
   2b6c0:	230e      	movs	r3, #14
   2b6c2:	18fb      	adds	r3, r7, r3
   2b6c4:	1c0a      	adds	r2, r1, #0
   2b6c6:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b6c8:	231b      	movs	r3, #27
   2b6ca:	18fc      	adds	r4, r7, r3
   2b6cc:	230f      	movs	r3, #15
   2b6ce:	18fb      	adds	r3, r7, r3
   2b6d0:	781b      	ldrb	r3, [r3, #0]
   2b6d2:	0018      	movs	r0, r3
   2b6d4:	4b28      	ldr	r3, [pc, #160]	; (2b778 <disk_read+0xcc>)
   2b6d6:	4798      	blx	r3
   2b6d8:	0003      	movs	r3, r0
   2b6da:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b6dc:	231b      	movs	r3, #27
   2b6de:	18fb      	adds	r3, r7, r3
   2b6e0:	781b      	ldrb	r3, [r3, #0]
   2b6e2:	2b00      	cmp	r3, #0
   2b6e4:	d101      	bne.n	2b6ea <disk_read+0x3e>
		return RES_ERROR;
   2b6e6:	2301      	movs	r3, #1
   2b6e8:	e042      	b.n	2b770 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b6ea:	2314      	movs	r3, #20
   2b6ec:	18fa      	adds	r2, r7, r3
   2b6ee:	230f      	movs	r3, #15
   2b6f0:	18fb      	adds	r3, r7, r3
   2b6f2:	781b      	ldrb	r3, [r3, #0]
   2b6f4:	0011      	movs	r1, r2
   2b6f6:	0018      	movs	r0, r3
   2b6f8:	4b20      	ldr	r3, [pc, #128]	; (2b77c <disk_read+0xd0>)
   2b6fa:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b6fc:	230e      	movs	r3, #14
   2b6fe:	18fb      	adds	r3, r7, r3
   2b700:	781b      	ldrb	r3, [r3, #0]
   2b702:	221b      	movs	r2, #27
   2b704:	18ba      	adds	r2, r7, r2
   2b706:	7812      	ldrb	r2, [r2, #0]
   2b708:	4353      	muls	r3, r2
   2b70a:	001a      	movs	r2, r3
   2b70c:	687b      	ldr	r3, [r7, #4]
   2b70e:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b710:	697b      	ldr	r3, [r7, #20]
   2b712:	3301      	adds	r3, #1
   2b714:	211b      	movs	r1, #27
   2b716:	1879      	adds	r1, r7, r1
   2b718:	7809      	ldrb	r1, [r1, #0]
   2b71a:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b71c:	429a      	cmp	r2, r3
   2b71e:	d901      	bls.n	2b724 <disk_read+0x78>
		return RES_PARERR;
   2b720:	2304      	movs	r3, #4
   2b722:	e025      	b.n	2b770 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2b724:	2300      	movs	r3, #0
   2b726:	61fb      	str	r3, [r7, #28]
   2b728:	e01b      	b.n	2b762 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b72a:	231b      	movs	r3, #27
   2b72c:	18fb      	adds	r3, r7, r3
   2b72e:	781b      	ldrb	r3, [r3, #0]
   2b730:	69fa      	ldr	r2, [r7, #28]
   2b732:	435a      	muls	r2, r3
   2b734:	687b      	ldr	r3, [r7, #4]
   2b736:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b738:	231b      	movs	r3, #27
   2b73a:	18fb      	adds	r3, r7, r3
   2b73c:	781b      	ldrb	r3, [r3, #0]
   2b73e:	69fa      	ldr	r2, [r7, #28]
   2b740:	4353      	muls	r3, r2
   2b742:	025b      	lsls	r3, r3, #9
   2b744:	68ba      	ldr	r2, [r7, #8]
   2b746:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2b748:	230f      	movs	r3, #15
   2b74a:	18fb      	adds	r3, r7, r3
   2b74c:	781b      	ldrb	r3, [r3, #0]
   2b74e:	0018      	movs	r0, r3
   2b750:	4b0b      	ldr	r3, [pc, #44]	; (2b780 <disk_read+0xd4>)
   2b752:	4798      	blx	r3
   2b754:	1e03      	subs	r3, r0, #0
   2b756:	d001      	beq.n	2b75c <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b758:	2301      	movs	r3, #1
   2b75a:	e009      	b.n	2b770 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2b75c:	69fb      	ldr	r3, [r7, #28]
   2b75e:	3301      	adds	r3, #1
   2b760:	61fb      	str	r3, [r7, #28]
   2b762:	230e      	movs	r3, #14
   2b764:	18fb      	adds	r3, r7, r3
   2b766:	781a      	ldrb	r2, [r3, #0]
   2b768:	69fb      	ldr	r3, [r7, #28]
   2b76a:	429a      	cmp	r2, r3
   2b76c:	d8dd      	bhi.n	2b72a <disk_read+0x7e>
		}
	}

	return RES_OK;
   2b76e:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b770:	0018      	movs	r0, r3
   2b772:	46bd      	mov	sp, r7
   2b774:	b009      	add	sp, #36	; 0x24
   2b776:	bd90      	pop	{r4, r7, pc}
   2b778:	0002634d 	.word	0x0002634d
   2b77c:	00026301 	.word	0x00026301
   2b780:	000263c1 	.word	0x000263c1

0002b784 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2b784:	b590      	push	{r4, r7, lr}
   2b786:	b089      	sub	sp, #36	; 0x24
   2b788:	af00      	add	r7, sp, #0
   2b78a:	60b9      	str	r1, [r7, #8]
   2b78c:	607a      	str	r2, [r7, #4]
   2b78e:	0019      	movs	r1, r3
   2b790:	230f      	movs	r3, #15
   2b792:	18fb      	adds	r3, r7, r3
   2b794:	1c02      	adds	r2, r0, #0
   2b796:	701a      	strb	r2, [r3, #0]
   2b798:	230e      	movs	r3, #14
   2b79a:	18fb      	adds	r3, r7, r3
   2b79c:	1c0a      	adds	r2, r1, #0
   2b79e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2b7a0:	231b      	movs	r3, #27
   2b7a2:	18fc      	adds	r4, r7, r3
   2b7a4:	230f      	movs	r3, #15
   2b7a6:	18fb      	adds	r3, r7, r3
   2b7a8:	781b      	ldrb	r3, [r3, #0]
   2b7aa:	0018      	movs	r0, r3
   2b7ac:	4b28      	ldr	r3, [pc, #160]	; (2b850 <disk_write+0xcc>)
   2b7ae:	4798      	blx	r3
   2b7b0:	0003      	movs	r3, r0
   2b7b2:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2b7b4:	231b      	movs	r3, #27
   2b7b6:	18fb      	adds	r3, r7, r3
   2b7b8:	781b      	ldrb	r3, [r3, #0]
   2b7ba:	2b00      	cmp	r3, #0
   2b7bc:	d101      	bne.n	2b7c2 <disk_write+0x3e>
		return RES_ERROR;
   2b7be:	2301      	movs	r3, #1
   2b7c0:	e042      	b.n	2b848 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2b7c2:	2314      	movs	r3, #20
   2b7c4:	18fa      	adds	r2, r7, r3
   2b7c6:	230f      	movs	r3, #15
   2b7c8:	18fb      	adds	r3, r7, r3
   2b7ca:	781b      	ldrb	r3, [r3, #0]
   2b7cc:	0011      	movs	r1, r2
   2b7ce:	0018      	movs	r0, r3
   2b7d0:	4b20      	ldr	r3, [pc, #128]	; (2b854 <disk_write+0xd0>)
   2b7d2:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2b7d4:	230e      	movs	r3, #14
   2b7d6:	18fb      	adds	r3, r7, r3
   2b7d8:	781b      	ldrb	r3, [r3, #0]
   2b7da:	221b      	movs	r2, #27
   2b7dc:	18ba      	adds	r2, r7, r2
   2b7de:	7812      	ldrb	r2, [r2, #0]
   2b7e0:	4353      	muls	r3, r2
   2b7e2:	001a      	movs	r2, r3
   2b7e4:	687b      	ldr	r3, [r7, #4]
   2b7e6:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2b7e8:	697b      	ldr	r3, [r7, #20]
   2b7ea:	3301      	adds	r3, #1
   2b7ec:	211b      	movs	r1, #27
   2b7ee:	1879      	adds	r1, r7, r1
   2b7f0:	7809      	ldrb	r1, [r1, #0]
   2b7f2:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2b7f4:	429a      	cmp	r2, r3
   2b7f6:	d901      	bls.n	2b7fc <disk_write+0x78>
		return RES_PARERR;
   2b7f8:	2304      	movs	r3, #4
   2b7fa:	e025      	b.n	2b848 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2b7fc:	2300      	movs	r3, #0
   2b7fe:	61fb      	str	r3, [r7, #28]
   2b800:	e01b      	b.n	2b83a <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b802:	231b      	movs	r3, #27
   2b804:	18fb      	adds	r3, r7, r3
   2b806:	781b      	ldrb	r3, [r3, #0]
   2b808:	69fa      	ldr	r2, [r7, #28]
   2b80a:	435a      	muls	r2, r3
   2b80c:	687b      	ldr	r3, [r7, #4]
   2b80e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2b810:	231b      	movs	r3, #27
   2b812:	18fb      	adds	r3, r7, r3
   2b814:	781b      	ldrb	r3, [r3, #0]
   2b816:	69fa      	ldr	r2, [r7, #28]
   2b818:	4353      	muls	r3, r2
   2b81a:	025b      	lsls	r3, r3, #9
   2b81c:	68ba      	ldr	r2, [r7, #8]
   2b81e:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2b820:	230f      	movs	r3, #15
   2b822:	18fb      	adds	r3, r7, r3
   2b824:	781b      	ldrb	r3, [r3, #0]
   2b826:	0018      	movs	r0, r3
   2b828:	4b0b      	ldr	r3, [pc, #44]	; (2b858 <disk_write+0xd4>)
   2b82a:	4798      	blx	r3
   2b82c:	1e03      	subs	r3, r0, #0
   2b82e:	d001      	beq.n	2b834 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2b830:	2301      	movs	r3, #1
   2b832:	e009      	b.n	2b848 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2b834:	69fb      	ldr	r3, [r7, #28]
   2b836:	3301      	adds	r3, #1
   2b838:	61fb      	str	r3, [r7, #28]
   2b83a:	230e      	movs	r3, #14
   2b83c:	18fb      	adds	r3, r7, r3
   2b83e:	781a      	ldrb	r2, [r3, #0]
   2b840:	69fb      	ldr	r3, [r7, #28]
   2b842:	429a      	cmp	r2, r3
   2b844:	d8dd      	bhi.n	2b802 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2b846:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2b848:	0018      	movs	r0, r3
   2b84a:	46bd      	mov	sp, r7
   2b84c:	b009      	add	sp, #36	; 0x24
   2b84e:	bd90      	pop	{r4, r7, pc}
   2b850:	0002634d 	.word	0x0002634d
   2b854:	00026301 	.word	0x00026301
   2b858:	00026415 	.word	0x00026415

0002b85c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2b85c:	b590      	push	{r4, r7, lr}
   2b85e:	b085      	sub	sp, #20
   2b860:	af00      	add	r7, sp, #0
   2b862:	603a      	str	r2, [r7, #0]
   2b864:	1dfb      	adds	r3, r7, #7
   2b866:	1c02      	adds	r2, r0, #0
   2b868:	701a      	strb	r2, [r3, #0]
   2b86a:	1dbb      	adds	r3, r7, #6
   2b86c:	1c0a      	adds	r2, r1, #0
   2b86e:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2b870:	230f      	movs	r3, #15
   2b872:	18fb      	adds	r3, r7, r3
   2b874:	2204      	movs	r2, #4
   2b876:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2b878:	1dbb      	adds	r3, r7, #6
   2b87a:	781b      	ldrb	r3, [r3, #0]
   2b87c:	2b01      	cmp	r3, #1
   2b87e:	d00f      	beq.n	2b8a0 <disk_ioctl+0x44>
   2b880:	dc02      	bgt.n	2b888 <disk_ioctl+0x2c>
   2b882:	2b00      	cmp	r3, #0
   2b884:	d044      	beq.n	2b910 <disk_ioctl+0xb4>
   2b886:	e054      	b.n	2b932 <disk_ioctl+0xd6>
   2b888:	2b02      	cmp	r3, #2
   2b88a:	d01a      	beq.n	2b8c2 <disk_ioctl+0x66>
   2b88c:	2b03      	cmp	r3, #3
   2b88e:	d150      	bne.n	2b932 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2b890:	683b      	ldr	r3, [r7, #0]
   2b892:	2201      	movs	r2, #1
   2b894:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2b896:	230f      	movs	r3, #15
   2b898:	18fb      	adds	r3, r7, r3
   2b89a:	2200      	movs	r2, #0
   2b89c:	701a      	strb	r2, [r3, #0]
		break;
   2b89e:	e04c      	b.n	2b93a <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2b8a0:	2308      	movs	r3, #8
   2b8a2:	18fa      	adds	r2, r7, r3
   2b8a4:	1dfb      	adds	r3, r7, #7
   2b8a6:	781b      	ldrb	r3, [r3, #0]
   2b8a8:	0011      	movs	r1, r2
   2b8aa:	0018      	movs	r0, r3
   2b8ac:	4b26      	ldr	r3, [pc, #152]	; (2b948 <disk_ioctl+0xec>)
   2b8ae:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2b8b0:	68bb      	ldr	r3, [r7, #8]
   2b8b2:	1c5a      	adds	r2, r3, #1
   2b8b4:	683b      	ldr	r3, [r7, #0]
   2b8b6:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2b8b8:	230f      	movs	r3, #15
   2b8ba:	18fb      	adds	r3, r7, r3
   2b8bc:	2200      	movs	r2, #0
   2b8be:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b8c0:	e03b      	b.n	2b93a <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2b8c2:	230e      	movs	r3, #14
   2b8c4:	18fc      	adds	r4, r7, r3
   2b8c6:	1dfb      	adds	r3, r7, #7
   2b8c8:	781b      	ldrb	r3, [r3, #0]
   2b8ca:	0018      	movs	r0, r3
   2b8cc:	4b1f      	ldr	r3, [pc, #124]	; (2b94c <disk_ioctl+0xf0>)
   2b8ce:	4798      	blx	r3
   2b8d0:	0003      	movs	r3, r0
   2b8d2:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2b8d4:	230e      	movs	r3, #14
   2b8d6:	18fb      	adds	r3, r7, r3
   2b8d8:	781b      	ldrb	r3, [r3, #0]
   2b8da:	2b01      	cmp	r3, #1
   2b8dc:	d010      	beq.n	2b900 <disk_ioctl+0xa4>
   2b8de:	230e      	movs	r3, #14
   2b8e0:	18fb      	adds	r3, r7, r3
   2b8e2:	781b      	ldrb	r3, [r3, #0]
   2b8e4:	2b02      	cmp	r3, #2
   2b8e6:	d00b      	beq.n	2b900 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2b8e8:	230e      	movs	r3, #14
   2b8ea:	18fb      	adds	r3, r7, r3
   2b8ec:	781b      	ldrb	r3, [r3, #0]
   2b8ee:	2b04      	cmp	r3, #4
   2b8f0:	d006      	beq.n	2b900 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2b8f2:	230e      	movs	r3, #14
   2b8f4:	18fb      	adds	r3, r7, r3
   2b8f6:	781b      	ldrb	r3, [r3, #0]
   2b8f8:	2b08      	cmp	r3, #8
   2b8fa:	d001      	beq.n	2b900 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2b8fc:	2301      	movs	r3, #1
   2b8fe:	e01f      	b.n	2b940 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2b900:	683b      	ldr	r3, [r7, #0]
   2b902:	2200      	movs	r2, #0
   2b904:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2b906:	230f      	movs	r3, #15
   2b908:	18fb      	adds	r3, r7, r3
   2b90a:	2200      	movs	r2, #0
   2b90c:	701a      	strb	r2, [r3, #0]
	}
	break;
   2b90e:	e014      	b.n	2b93a <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2b910:	1dfb      	adds	r3, r7, #7
   2b912:	781b      	ldrb	r3, [r3, #0]
   2b914:	0018      	movs	r0, r3
   2b916:	4b0e      	ldr	r3, [pc, #56]	; (2b950 <disk_ioctl+0xf4>)
   2b918:	4798      	blx	r3
   2b91a:	1e03      	subs	r3, r0, #0
   2b91c:	d104      	bne.n	2b928 <disk_ioctl+0xcc>
			res = RES_OK;
   2b91e:	230f      	movs	r3, #15
   2b920:	18fb      	adds	r3, r7, r3
   2b922:	2200      	movs	r2, #0
   2b924:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2b926:	e008      	b.n	2b93a <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2b928:	230f      	movs	r3, #15
   2b92a:	18fb      	adds	r3, r7, r3
   2b92c:	2203      	movs	r2, #3
   2b92e:	701a      	strb	r2, [r3, #0]
		break;
   2b930:	e003      	b.n	2b93a <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2b932:	230f      	movs	r3, #15
   2b934:	18fb      	adds	r3, r7, r3
   2b936:	2204      	movs	r2, #4
   2b938:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2b93a:	230f      	movs	r3, #15
   2b93c:	18fb      	adds	r3, r7, r3
   2b93e:	781b      	ldrb	r3, [r3, #0]
}
   2b940:	0018      	movs	r0, r3
   2b942:	46bd      	mov	sp, r7
   2b944:	b005      	add	sp, #20
   2b946:	bd90      	pop	{r4, r7, pc}
   2b948:	00026301 	.word	0x00026301
   2b94c:	0002634d 	.word	0x0002634d
   2b950:	000262c1 	.word	0x000262c1

0002b954 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2b954:	b580      	push	{r7, lr}
   2b956:	b084      	sub	sp, #16
   2b958:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2b95a:	1d3a      	adds	r2, r7, #4
   2b95c:	4b12      	ldr	r3, [pc, #72]	; (2b9a8 <get_fattime+0x54>)
   2b95e:	0011      	movs	r1, r2
   2b960:	0018      	movs	r0, r3
   2b962:	4b12      	ldr	r3, [pc, #72]	; (2b9ac <get_fattime+0x58>)
   2b964:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2b966:	1d3b      	adds	r3, r7, #4
   2b968:	88db      	ldrh	r3, [r3, #6]
   2b96a:	4a11      	ldr	r2, [pc, #68]	; (2b9b0 <get_fattime+0x5c>)
   2b96c:	4694      	mov	ip, r2
   2b96e:	4463      	add	r3, ip
   2b970:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2b972:	1d3b      	adds	r3, r7, #4
   2b974:	795b      	ldrb	r3, [r3, #5]
   2b976:	055b      	lsls	r3, r3, #21
   2b978:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2b97a:	1d3b      	adds	r3, r7, #4
   2b97c:	791b      	ldrb	r3, [r3, #4]
   2b97e:	041b      	lsls	r3, r3, #16
   2b980:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2b982:	1d3b      	adds	r3, r7, #4
   2b984:	789b      	ldrb	r3, [r3, #2]
   2b986:	02db      	lsls	r3, r3, #11
   2b988:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2b98a:	1d3b      	adds	r3, r7, #4
   2b98c:	785b      	ldrb	r3, [r3, #1]
   2b98e:	015b      	lsls	r3, r3, #5
   2b990:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2b992:	1d3a      	adds	r2, r7, #4
   2b994:	7812      	ldrb	r2, [r2, #0]
   2b996:	0852      	lsrs	r2, r2, #1
   2b998:	b2d2      	uxtb	r2, r2
   2b99a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2b99c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2b99e:	68fb      	ldr	r3, [r7, #12]
}
   2b9a0:	0018      	movs	r0, r3
   2b9a2:	46bd      	mov	sp, r7
   2b9a4:	b004      	add	sp, #16
   2b9a6:	bd80      	pop	{r7, pc}
   2b9a8:	200057c8 	.word	0x200057c8
   2b9ac:	0002712d 	.word	0x0002712d
   2b9b0:	fffff844 	.word	0xfffff844

0002b9b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2b9b4:	b580      	push	{r7, lr}
   2b9b6:	b086      	sub	sp, #24
   2b9b8:	af00      	add	r7, sp, #0
   2b9ba:	60f8      	str	r0, [r7, #12]
   2b9bc:	60b9      	str	r1, [r7, #8]
   2b9be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b9c0:	68fb      	ldr	r3, [r7, #12]
   2b9c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2b9c4:	68bb      	ldr	r3, [r7, #8]
   2b9c6:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2b9c8:	e007      	b.n	2b9da <mem_cpy+0x26>
		*d++ = *s++;
   2b9ca:	697b      	ldr	r3, [r7, #20]
   2b9cc:	1c5a      	adds	r2, r3, #1
   2b9ce:	617a      	str	r2, [r7, #20]
   2b9d0:	693a      	ldr	r2, [r7, #16]
   2b9d2:	1c51      	adds	r1, r2, #1
   2b9d4:	6139      	str	r1, [r7, #16]
   2b9d6:	7812      	ldrb	r2, [r2, #0]
   2b9d8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2b9da:	687b      	ldr	r3, [r7, #4]
   2b9dc:	1e5a      	subs	r2, r3, #1
   2b9de:	607a      	str	r2, [r7, #4]
   2b9e0:	2b00      	cmp	r3, #0
   2b9e2:	d1f2      	bne.n	2b9ca <mem_cpy+0x16>
}
   2b9e4:	46c0      	nop			; (mov r8, r8)
   2b9e6:	46bd      	mov	sp, r7
   2b9e8:	b006      	add	sp, #24
   2b9ea:	bd80      	pop	{r7, pc}

0002b9ec <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2b9ec:	b580      	push	{r7, lr}
   2b9ee:	b086      	sub	sp, #24
   2b9f0:	af00      	add	r7, sp, #0
   2b9f2:	60f8      	str	r0, [r7, #12]
   2b9f4:	60b9      	str	r1, [r7, #8]
   2b9f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2b9f8:	68fb      	ldr	r3, [r7, #12]
   2b9fa:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2b9fc:	e005      	b.n	2ba0a <mem_set+0x1e>
		*d++ = (BYTE)val;
   2b9fe:	697b      	ldr	r3, [r7, #20]
   2ba00:	1c5a      	adds	r2, r3, #1
   2ba02:	617a      	str	r2, [r7, #20]
   2ba04:	68ba      	ldr	r2, [r7, #8]
   2ba06:	b2d2      	uxtb	r2, r2
   2ba08:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2ba0a:	687b      	ldr	r3, [r7, #4]
   2ba0c:	1e5a      	subs	r2, r3, #1
   2ba0e:	607a      	str	r2, [r7, #4]
   2ba10:	2b00      	cmp	r3, #0
   2ba12:	d1f4      	bne.n	2b9fe <mem_set+0x12>
}
   2ba14:	46c0      	nop			; (mov r8, r8)
   2ba16:	46bd      	mov	sp, r7
   2ba18:	b006      	add	sp, #24
   2ba1a:	bd80      	pop	{r7, pc}

0002ba1c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2ba1c:	b580      	push	{r7, lr}
   2ba1e:	b088      	sub	sp, #32
   2ba20:	af00      	add	r7, sp, #0
   2ba22:	60f8      	str	r0, [r7, #12]
   2ba24:	60b9      	str	r1, [r7, #8]
   2ba26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2ba28:	68fb      	ldr	r3, [r7, #12]
   2ba2a:	61fb      	str	r3, [r7, #28]
   2ba2c:	68bb      	ldr	r3, [r7, #8]
   2ba2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2ba30:	2300      	movs	r3, #0
   2ba32:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2ba34:	46c0      	nop			; (mov r8, r8)
   2ba36:	687b      	ldr	r3, [r7, #4]
   2ba38:	1e5a      	subs	r2, r3, #1
   2ba3a:	607a      	str	r2, [r7, #4]
   2ba3c:	2b00      	cmp	r3, #0
   2ba3e:	d00d      	beq.n	2ba5c <mem_cmp+0x40>
   2ba40:	69fb      	ldr	r3, [r7, #28]
   2ba42:	1c5a      	adds	r2, r3, #1
   2ba44:	61fa      	str	r2, [r7, #28]
   2ba46:	781b      	ldrb	r3, [r3, #0]
   2ba48:	0019      	movs	r1, r3
   2ba4a:	69bb      	ldr	r3, [r7, #24]
   2ba4c:	1c5a      	adds	r2, r3, #1
   2ba4e:	61ba      	str	r2, [r7, #24]
   2ba50:	781b      	ldrb	r3, [r3, #0]
   2ba52:	1acb      	subs	r3, r1, r3
   2ba54:	617b      	str	r3, [r7, #20]
   2ba56:	697b      	ldr	r3, [r7, #20]
   2ba58:	2b00      	cmp	r3, #0
   2ba5a:	d0ec      	beq.n	2ba36 <mem_cmp+0x1a>
	return r;
   2ba5c:	697b      	ldr	r3, [r7, #20]
}
   2ba5e:	0018      	movs	r0, r3
   2ba60:	46bd      	mov	sp, r7
   2ba62:	b008      	add	sp, #32
   2ba64:	bd80      	pop	{r7, pc}

0002ba66 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2ba66:	b580      	push	{r7, lr}
   2ba68:	b082      	sub	sp, #8
   2ba6a:	af00      	add	r7, sp, #0
   2ba6c:	6078      	str	r0, [r7, #4]
   2ba6e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2ba70:	e002      	b.n	2ba78 <chk_chr+0x12>
   2ba72:	687b      	ldr	r3, [r7, #4]
   2ba74:	3301      	adds	r3, #1
   2ba76:	607b      	str	r3, [r7, #4]
   2ba78:	687b      	ldr	r3, [r7, #4]
   2ba7a:	781b      	ldrb	r3, [r3, #0]
   2ba7c:	2b00      	cmp	r3, #0
   2ba7e:	d005      	beq.n	2ba8c <chk_chr+0x26>
   2ba80:	687b      	ldr	r3, [r7, #4]
   2ba82:	781b      	ldrb	r3, [r3, #0]
   2ba84:	001a      	movs	r2, r3
   2ba86:	683b      	ldr	r3, [r7, #0]
   2ba88:	429a      	cmp	r2, r3
   2ba8a:	d1f2      	bne.n	2ba72 <chk_chr+0xc>
	return *str;
   2ba8c:	687b      	ldr	r3, [r7, #4]
   2ba8e:	781b      	ldrb	r3, [r3, #0]
}
   2ba90:	0018      	movs	r0, r3
   2ba92:	46bd      	mov	sp, r7
   2ba94:	b002      	add	sp, #8
   2ba96:	bd80      	pop	{r7, pc}

0002ba98 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2ba98:	b590      	push	{r4, r7, lr}
   2ba9a:	b085      	sub	sp, #20
   2ba9c:	af00      	add	r7, sp, #0
   2ba9e:	6078      	str	r0, [r7, #4]
   2baa0:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2baa2:	687b      	ldr	r3, [r7, #4]
   2baa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2baa6:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2baa8:	68fa      	ldr	r2, [r7, #12]
   2baaa:	683b      	ldr	r3, [r7, #0]
   2baac:	429a      	cmp	r2, r3
   2baae:	d04e      	beq.n	2bb4e <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2bab0:	687b      	ldr	r3, [r7, #4]
   2bab2:	791b      	ldrb	r3, [r3, #4]
   2bab4:	2b00      	cmp	r3, #0
   2bab6:	d037      	beq.n	2bb28 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2bab8:	687b      	ldr	r3, [r7, #4]
   2baba:	7858      	ldrb	r0, [r3, #1]
   2babc:	687b      	ldr	r3, [r7, #4]
   2babe:	3330      	adds	r3, #48	; 0x30
   2bac0:	0019      	movs	r1, r3
   2bac2:	68fa      	ldr	r2, [r7, #12]
   2bac4:	2301      	movs	r3, #1
   2bac6:	4c24      	ldr	r4, [pc, #144]	; (2bb58 <move_window+0xc0>)
   2bac8:	47a0      	blx	r4
   2baca:	1e03      	subs	r3, r0, #0
   2bacc:	d001      	beq.n	2bad2 <move_window+0x3a>
				return FR_DISK_ERR;
   2bace:	2301      	movs	r3, #1
   2bad0:	e03e      	b.n	2bb50 <move_window+0xb8>
			fs->wflag = 0;
   2bad2:	687b      	ldr	r3, [r7, #4]
   2bad4:	2200      	movs	r2, #0
   2bad6:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2bad8:	687b      	ldr	r3, [r7, #4]
   2bada:	6a1a      	ldr	r2, [r3, #32]
   2badc:	687b      	ldr	r3, [r7, #4]
   2bade:	69db      	ldr	r3, [r3, #28]
   2bae0:	18d2      	adds	r2, r2, r3
   2bae2:	68fb      	ldr	r3, [r7, #12]
   2bae4:	429a      	cmp	r2, r3
   2bae6:	d91f      	bls.n	2bb28 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2bae8:	230b      	movs	r3, #11
   2baea:	18fb      	adds	r3, r7, r3
   2baec:	687a      	ldr	r2, [r7, #4]
   2baee:	78d2      	ldrb	r2, [r2, #3]
   2baf0:	701a      	strb	r2, [r3, #0]
   2baf2:	e014      	b.n	2bb1e <move_window+0x86>
					wsect += fs->fsize;
   2baf4:	687b      	ldr	r3, [r7, #4]
   2baf6:	69db      	ldr	r3, [r3, #28]
   2baf8:	68fa      	ldr	r2, [r7, #12]
   2bafa:	18d3      	adds	r3, r2, r3
   2bafc:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2bafe:	687b      	ldr	r3, [r7, #4]
   2bb00:	7858      	ldrb	r0, [r3, #1]
   2bb02:	687b      	ldr	r3, [r7, #4]
   2bb04:	3330      	adds	r3, #48	; 0x30
   2bb06:	0019      	movs	r1, r3
   2bb08:	68fa      	ldr	r2, [r7, #12]
   2bb0a:	2301      	movs	r3, #1
   2bb0c:	4c12      	ldr	r4, [pc, #72]	; (2bb58 <move_window+0xc0>)
   2bb0e:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2bb10:	230b      	movs	r3, #11
   2bb12:	18fb      	adds	r3, r7, r3
   2bb14:	781a      	ldrb	r2, [r3, #0]
   2bb16:	230b      	movs	r3, #11
   2bb18:	18fb      	adds	r3, r7, r3
   2bb1a:	3a01      	subs	r2, #1
   2bb1c:	701a      	strb	r2, [r3, #0]
   2bb1e:	230b      	movs	r3, #11
   2bb20:	18fb      	adds	r3, r7, r3
   2bb22:	781b      	ldrb	r3, [r3, #0]
   2bb24:	2b01      	cmp	r3, #1
   2bb26:	d8e5      	bhi.n	2baf4 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2bb28:	683b      	ldr	r3, [r7, #0]
   2bb2a:	2b00      	cmp	r3, #0
   2bb2c:	d00f      	beq.n	2bb4e <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2bb2e:	687b      	ldr	r3, [r7, #4]
   2bb30:	7858      	ldrb	r0, [r3, #1]
   2bb32:	687b      	ldr	r3, [r7, #4]
   2bb34:	3330      	adds	r3, #48	; 0x30
   2bb36:	0019      	movs	r1, r3
   2bb38:	683a      	ldr	r2, [r7, #0]
   2bb3a:	2301      	movs	r3, #1
   2bb3c:	4c07      	ldr	r4, [pc, #28]	; (2bb5c <move_window+0xc4>)
   2bb3e:	47a0      	blx	r4
   2bb40:	1e03      	subs	r3, r0, #0
   2bb42:	d001      	beq.n	2bb48 <move_window+0xb0>
				return FR_DISK_ERR;
   2bb44:	2301      	movs	r3, #1
   2bb46:	e003      	b.n	2bb50 <move_window+0xb8>
			fs->winsect = sector;
   2bb48:	687b      	ldr	r3, [r7, #4]
   2bb4a:	683a      	ldr	r2, [r7, #0]
   2bb4c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2bb4e:	2300      	movs	r3, #0
}
   2bb50:	0018      	movs	r0, r3
   2bb52:	46bd      	mov	sp, r7
   2bb54:	b005      	add	sp, #20
   2bb56:	bd90      	pop	{r4, r7, pc}
   2bb58:	0002b785 	.word	0x0002b785
   2bb5c:	0002b6ad 	.word	0x0002b6ad

0002bb60 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2bb60:	b590      	push	{r4, r7, lr}
   2bb62:	b085      	sub	sp, #20
   2bb64:	af00      	add	r7, sp, #0
   2bb66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2bb68:	230f      	movs	r3, #15
   2bb6a:	18fc      	adds	r4, r7, r3
   2bb6c:	687b      	ldr	r3, [r7, #4]
   2bb6e:	2100      	movs	r1, #0
   2bb70:	0018      	movs	r0, r3
   2bb72:	4b52      	ldr	r3, [pc, #328]	; (2bcbc <sync+0x15c>)
   2bb74:	4798      	blx	r3
   2bb76:	0003      	movs	r3, r0
   2bb78:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2bb7a:	230f      	movs	r3, #15
   2bb7c:	18fb      	adds	r3, r7, r3
   2bb7e:	781b      	ldrb	r3, [r3, #0]
   2bb80:	2b00      	cmp	r3, #0
   2bb82:	d000      	beq.n	2bb86 <sync+0x26>
   2bb84:	e093      	b.n	2bcae <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2bb86:	687b      	ldr	r3, [r7, #4]
   2bb88:	781b      	ldrb	r3, [r3, #0]
   2bb8a:	2b03      	cmp	r3, #3
   2bb8c:	d000      	beq.n	2bb90 <sync+0x30>
   2bb8e:	e081      	b.n	2bc94 <sync+0x134>
   2bb90:	687b      	ldr	r3, [r7, #4]
   2bb92:	795b      	ldrb	r3, [r3, #5]
   2bb94:	2b00      	cmp	r3, #0
   2bb96:	d07d      	beq.n	2bc94 <sync+0x134>
			fs->winsect = 0;
   2bb98:	687b      	ldr	r3, [r7, #4]
   2bb9a:	2200      	movs	r2, #0
   2bb9c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2bb9e:	687b      	ldr	r3, [r7, #4]
   2bba0:	3330      	adds	r3, #48	; 0x30
   2bba2:	0018      	movs	r0, r3
   2bba4:	2380      	movs	r3, #128	; 0x80
   2bba6:	009b      	lsls	r3, r3, #2
   2bba8:	001a      	movs	r2, r3
   2bbaa:	2100      	movs	r1, #0
   2bbac:	4b44      	ldr	r3, [pc, #272]	; (2bcc0 <sync+0x160>)
   2bbae:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2bbb0:	687b      	ldr	r3, [r7, #4]
   2bbb2:	4a44      	ldr	r2, [pc, #272]	; (2bcc4 <sync+0x164>)
   2bbb4:	2155      	movs	r1, #85	; 0x55
   2bbb6:	5499      	strb	r1, [r3, r2]
   2bbb8:	687b      	ldr	r3, [r7, #4]
   2bbba:	4a43      	ldr	r2, [pc, #268]	; (2bcc8 <sync+0x168>)
   2bbbc:	21aa      	movs	r1, #170	; 0xaa
   2bbbe:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2bbc0:	687b      	ldr	r3, [r7, #4]
   2bbc2:	2230      	movs	r2, #48	; 0x30
   2bbc4:	2152      	movs	r1, #82	; 0x52
   2bbc6:	5499      	strb	r1, [r3, r2]
   2bbc8:	687b      	ldr	r3, [r7, #4]
   2bbca:	2231      	movs	r2, #49	; 0x31
   2bbcc:	2152      	movs	r1, #82	; 0x52
   2bbce:	5499      	strb	r1, [r3, r2]
   2bbd0:	687b      	ldr	r3, [r7, #4]
   2bbd2:	2232      	movs	r2, #50	; 0x32
   2bbd4:	2161      	movs	r1, #97	; 0x61
   2bbd6:	5499      	strb	r1, [r3, r2]
   2bbd8:	687b      	ldr	r3, [r7, #4]
   2bbda:	2233      	movs	r2, #51	; 0x33
   2bbdc:	2141      	movs	r1, #65	; 0x41
   2bbde:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2bbe0:	687a      	ldr	r2, [r7, #4]
   2bbe2:	2385      	movs	r3, #133	; 0x85
   2bbe4:	009b      	lsls	r3, r3, #2
   2bbe6:	2172      	movs	r1, #114	; 0x72
   2bbe8:	54d1      	strb	r1, [r2, r3]
   2bbea:	687b      	ldr	r3, [r7, #4]
   2bbec:	4a37      	ldr	r2, [pc, #220]	; (2bccc <sync+0x16c>)
   2bbee:	2172      	movs	r1, #114	; 0x72
   2bbf0:	5499      	strb	r1, [r3, r2]
   2bbf2:	687b      	ldr	r3, [r7, #4]
   2bbf4:	4a36      	ldr	r2, [pc, #216]	; (2bcd0 <sync+0x170>)
   2bbf6:	2141      	movs	r1, #65	; 0x41
   2bbf8:	5499      	strb	r1, [r3, r2]
   2bbfa:	687b      	ldr	r3, [r7, #4]
   2bbfc:	4a35      	ldr	r2, [pc, #212]	; (2bcd4 <sync+0x174>)
   2bbfe:	2161      	movs	r1, #97	; 0x61
   2bc00:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2bc02:	687b      	ldr	r3, [r7, #4]
   2bc04:	691b      	ldr	r3, [r3, #16]
   2bc06:	b2d9      	uxtb	r1, r3
   2bc08:	687a      	ldr	r2, [r7, #4]
   2bc0a:	2386      	movs	r3, #134	; 0x86
   2bc0c:	009b      	lsls	r3, r3, #2
   2bc0e:	54d1      	strb	r1, [r2, r3]
   2bc10:	687b      	ldr	r3, [r7, #4]
   2bc12:	691b      	ldr	r3, [r3, #16]
   2bc14:	b29b      	uxth	r3, r3
   2bc16:	0a1b      	lsrs	r3, r3, #8
   2bc18:	b29b      	uxth	r3, r3
   2bc1a:	b2d9      	uxtb	r1, r3
   2bc1c:	687b      	ldr	r3, [r7, #4]
   2bc1e:	4a2e      	ldr	r2, [pc, #184]	; (2bcd8 <sync+0x178>)
   2bc20:	5499      	strb	r1, [r3, r2]
   2bc22:	687b      	ldr	r3, [r7, #4]
   2bc24:	691b      	ldr	r3, [r3, #16]
   2bc26:	0c1b      	lsrs	r3, r3, #16
   2bc28:	b2d9      	uxtb	r1, r3
   2bc2a:	687b      	ldr	r3, [r7, #4]
   2bc2c:	4a2b      	ldr	r2, [pc, #172]	; (2bcdc <sync+0x17c>)
   2bc2e:	5499      	strb	r1, [r3, r2]
   2bc30:	687b      	ldr	r3, [r7, #4]
   2bc32:	691b      	ldr	r3, [r3, #16]
   2bc34:	0e1b      	lsrs	r3, r3, #24
   2bc36:	b2d9      	uxtb	r1, r3
   2bc38:	687b      	ldr	r3, [r7, #4]
   2bc3a:	4a29      	ldr	r2, [pc, #164]	; (2bce0 <sync+0x180>)
   2bc3c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2bc3e:	687b      	ldr	r3, [r7, #4]
   2bc40:	68db      	ldr	r3, [r3, #12]
   2bc42:	b2d9      	uxtb	r1, r3
   2bc44:	687a      	ldr	r2, [r7, #4]
   2bc46:	2387      	movs	r3, #135	; 0x87
   2bc48:	009b      	lsls	r3, r3, #2
   2bc4a:	54d1      	strb	r1, [r2, r3]
   2bc4c:	687b      	ldr	r3, [r7, #4]
   2bc4e:	68db      	ldr	r3, [r3, #12]
   2bc50:	b29b      	uxth	r3, r3
   2bc52:	0a1b      	lsrs	r3, r3, #8
   2bc54:	b29b      	uxth	r3, r3
   2bc56:	b2d9      	uxtb	r1, r3
   2bc58:	687b      	ldr	r3, [r7, #4]
   2bc5a:	4a22      	ldr	r2, [pc, #136]	; (2bce4 <sync+0x184>)
   2bc5c:	5499      	strb	r1, [r3, r2]
   2bc5e:	687b      	ldr	r3, [r7, #4]
   2bc60:	68db      	ldr	r3, [r3, #12]
   2bc62:	0c1b      	lsrs	r3, r3, #16
   2bc64:	b2d9      	uxtb	r1, r3
   2bc66:	687b      	ldr	r3, [r7, #4]
   2bc68:	4a1f      	ldr	r2, [pc, #124]	; (2bce8 <sync+0x188>)
   2bc6a:	5499      	strb	r1, [r3, r2]
   2bc6c:	687b      	ldr	r3, [r7, #4]
   2bc6e:	68db      	ldr	r3, [r3, #12]
   2bc70:	0e1b      	lsrs	r3, r3, #24
   2bc72:	b2d9      	uxtb	r1, r3
   2bc74:	687b      	ldr	r3, [r7, #4]
   2bc76:	4a1d      	ldr	r2, [pc, #116]	; (2bcec <sync+0x18c>)
   2bc78:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2bc7a:	687b      	ldr	r3, [r7, #4]
   2bc7c:	7858      	ldrb	r0, [r3, #1]
   2bc7e:	687b      	ldr	r3, [r7, #4]
   2bc80:	3330      	adds	r3, #48	; 0x30
   2bc82:	0019      	movs	r1, r3
   2bc84:	687b      	ldr	r3, [r7, #4]
   2bc86:	695a      	ldr	r2, [r3, #20]
   2bc88:	2301      	movs	r3, #1
   2bc8a:	4c19      	ldr	r4, [pc, #100]	; (2bcf0 <sync+0x190>)
   2bc8c:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2bc8e:	687b      	ldr	r3, [r7, #4]
   2bc90:	2200      	movs	r2, #0
   2bc92:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2bc94:	687b      	ldr	r3, [r7, #4]
   2bc96:	785b      	ldrb	r3, [r3, #1]
   2bc98:	2200      	movs	r2, #0
   2bc9a:	2100      	movs	r1, #0
   2bc9c:	0018      	movs	r0, r3
   2bc9e:	4b15      	ldr	r3, [pc, #84]	; (2bcf4 <sync+0x194>)
   2bca0:	4798      	blx	r3
   2bca2:	1e03      	subs	r3, r0, #0
   2bca4:	d003      	beq.n	2bcae <sync+0x14e>
			res = FR_DISK_ERR;
   2bca6:	230f      	movs	r3, #15
   2bca8:	18fb      	adds	r3, r7, r3
   2bcaa:	2201      	movs	r2, #1
   2bcac:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2bcae:	230f      	movs	r3, #15
   2bcb0:	18fb      	adds	r3, r7, r3
   2bcb2:	781b      	ldrb	r3, [r3, #0]
}
   2bcb4:	0018      	movs	r0, r3
   2bcb6:	46bd      	mov	sp, r7
   2bcb8:	b005      	add	sp, #20
   2bcba:	bd90      	pop	{r4, r7, pc}
   2bcbc:	0002ba99 	.word	0x0002ba99
   2bcc0:	0002b9ed 	.word	0x0002b9ed
   2bcc4:	0000022e 	.word	0x0000022e
   2bcc8:	0000022f 	.word	0x0000022f
   2bccc:	00000215 	.word	0x00000215
   2bcd0:	00000216 	.word	0x00000216
   2bcd4:	00000217 	.word	0x00000217
   2bcd8:	00000219 	.word	0x00000219
   2bcdc:	0000021a 	.word	0x0000021a
   2bce0:	0000021b 	.word	0x0000021b
   2bce4:	0000021d 	.word	0x0000021d
   2bce8:	0000021e 	.word	0x0000021e
   2bcec:	0000021f 	.word	0x0000021f
   2bcf0:	0002b785 	.word	0x0002b785
   2bcf4:	0002b85d 	.word	0x0002b85d

0002bcf8 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2bcf8:	b580      	push	{r7, lr}
   2bcfa:	b082      	sub	sp, #8
   2bcfc:	af00      	add	r7, sp, #0
   2bcfe:	6078      	str	r0, [r7, #4]
   2bd00:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2bd02:	683b      	ldr	r3, [r7, #0]
   2bd04:	3b02      	subs	r3, #2
   2bd06:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2bd08:	687b      	ldr	r3, [r7, #4]
   2bd0a:	699b      	ldr	r3, [r3, #24]
   2bd0c:	1e9a      	subs	r2, r3, #2
   2bd0e:	683b      	ldr	r3, [r7, #0]
   2bd10:	429a      	cmp	r2, r3
   2bd12:	d801      	bhi.n	2bd18 <clust2sect+0x20>
   2bd14:	2300      	movs	r3, #0
   2bd16:	e007      	b.n	2bd28 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2bd18:	687b      	ldr	r3, [r7, #4]
   2bd1a:	789b      	ldrb	r3, [r3, #2]
   2bd1c:	001a      	movs	r2, r3
   2bd1e:	683b      	ldr	r3, [r7, #0]
   2bd20:	435a      	muls	r2, r3
   2bd22:	687b      	ldr	r3, [r7, #4]
   2bd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2bd26:	18d3      	adds	r3, r2, r3
}
   2bd28:	0018      	movs	r0, r3
   2bd2a:	46bd      	mov	sp, r7
   2bd2c:	b002      	add	sp, #8
   2bd2e:	bd80      	pop	{r7, pc}

0002bd30 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2bd30:	b580      	push	{r7, lr}
   2bd32:	b086      	sub	sp, #24
   2bd34:	af00      	add	r7, sp, #0
   2bd36:	6078      	str	r0, [r7, #4]
   2bd38:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2bd3a:	683b      	ldr	r3, [r7, #0]
   2bd3c:	2b01      	cmp	r3, #1
   2bd3e:	d904      	bls.n	2bd4a <get_fat+0x1a>
   2bd40:	687b      	ldr	r3, [r7, #4]
   2bd42:	699a      	ldr	r2, [r3, #24]
   2bd44:	683b      	ldr	r3, [r7, #0]
   2bd46:	429a      	cmp	r2, r3
   2bd48:	d801      	bhi.n	2bd4e <get_fat+0x1e>
		return 1;
   2bd4a:	2301      	movs	r3, #1
   2bd4c:	e09f      	b.n	2be8e <get_fat+0x15e>

	switch (fs->fs_type) {
   2bd4e:	687b      	ldr	r3, [r7, #4]
   2bd50:	781b      	ldrb	r3, [r3, #0]
   2bd52:	2b02      	cmp	r3, #2
   2bd54:	d048      	beq.n	2bde8 <get_fat+0xb8>
   2bd56:	2b03      	cmp	r3, #3
   2bd58:	d067      	beq.n	2be2a <get_fat+0xfa>
   2bd5a:	2b01      	cmp	r3, #1
   2bd5c:	d000      	beq.n	2bd60 <get_fat+0x30>
   2bd5e:	e094      	b.n	2be8a <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2bd60:	683b      	ldr	r3, [r7, #0]
   2bd62:	617b      	str	r3, [r7, #20]
   2bd64:	697b      	ldr	r3, [r7, #20]
   2bd66:	085b      	lsrs	r3, r3, #1
   2bd68:	697a      	ldr	r2, [r7, #20]
   2bd6a:	18d3      	adds	r3, r2, r3
   2bd6c:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bd6e:	687b      	ldr	r3, [r7, #4]
   2bd70:	6a1a      	ldr	r2, [r3, #32]
   2bd72:	697b      	ldr	r3, [r7, #20]
   2bd74:	0a5b      	lsrs	r3, r3, #9
   2bd76:	18d2      	adds	r2, r2, r3
   2bd78:	687b      	ldr	r3, [r7, #4]
   2bd7a:	0011      	movs	r1, r2
   2bd7c:	0018      	movs	r0, r3
   2bd7e:	4b46      	ldr	r3, [pc, #280]	; (2be98 <get_fat+0x168>)
   2bd80:	4798      	blx	r3
   2bd82:	1e03      	subs	r3, r0, #0
   2bd84:	d000      	beq.n	2bd88 <get_fat+0x58>
   2bd86:	e079      	b.n	2be7c <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2bd88:	697b      	ldr	r3, [r7, #20]
   2bd8a:	05db      	lsls	r3, r3, #23
   2bd8c:	0ddb      	lsrs	r3, r3, #23
   2bd8e:	687a      	ldr	r2, [r7, #4]
   2bd90:	2130      	movs	r1, #48	; 0x30
   2bd92:	18d3      	adds	r3, r2, r3
   2bd94:	185b      	adds	r3, r3, r1
   2bd96:	781b      	ldrb	r3, [r3, #0]
   2bd98:	613b      	str	r3, [r7, #16]
   2bd9a:	697b      	ldr	r3, [r7, #20]
   2bd9c:	3301      	adds	r3, #1
   2bd9e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2bda0:	687b      	ldr	r3, [r7, #4]
   2bda2:	6a1a      	ldr	r2, [r3, #32]
   2bda4:	697b      	ldr	r3, [r7, #20]
   2bda6:	0a5b      	lsrs	r3, r3, #9
   2bda8:	18d2      	adds	r2, r2, r3
   2bdaa:	687b      	ldr	r3, [r7, #4]
   2bdac:	0011      	movs	r1, r2
   2bdae:	0018      	movs	r0, r3
   2bdb0:	4b39      	ldr	r3, [pc, #228]	; (2be98 <get_fat+0x168>)
   2bdb2:	4798      	blx	r3
   2bdb4:	1e03      	subs	r3, r0, #0
   2bdb6:	d163      	bne.n	2be80 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2bdb8:	697b      	ldr	r3, [r7, #20]
   2bdba:	05db      	lsls	r3, r3, #23
   2bdbc:	0ddb      	lsrs	r3, r3, #23
   2bdbe:	687a      	ldr	r2, [r7, #4]
   2bdc0:	2130      	movs	r1, #48	; 0x30
   2bdc2:	18d3      	adds	r3, r2, r3
   2bdc4:	185b      	adds	r3, r3, r1
   2bdc6:	781b      	ldrb	r3, [r3, #0]
   2bdc8:	021b      	lsls	r3, r3, #8
   2bdca:	001a      	movs	r2, r3
   2bdcc:	693b      	ldr	r3, [r7, #16]
   2bdce:	4313      	orrs	r3, r2
   2bdd0:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2bdd2:	683b      	ldr	r3, [r7, #0]
   2bdd4:	2201      	movs	r2, #1
   2bdd6:	4013      	ands	r3, r2
   2bdd8:	d002      	beq.n	2bde0 <get_fat+0xb0>
   2bdda:	693b      	ldr	r3, [r7, #16]
   2bddc:	091b      	lsrs	r3, r3, #4
   2bdde:	e056      	b.n	2be8e <get_fat+0x15e>
   2bde0:	693b      	ldr	r3, [r7, #16]
   2bde2:	051b      	lsls	r3, r3, #20
   2bde4:	0d1b      	lsrs	r3, r3, #20
   2bde6:	e052      	b.n	2be8e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2bde8:	687b      	ldr	r3, [r7, #4]
   2bdea:	6a1a      	ldr	r2, [r3, #32]
   2bdec:	683b      	ldr	r3, [r7, #0]
   2bdee:	0a1b      	lsrs	r3, r3, #8
   2bdf0:	18d2      	adds	r2, r2, r3
   2bdf2:	687b      	ldr	r3, [r7, #4]
   2bdf4:	0011      	movs	r1, r2
   2bdf6:	0018      	movs	r0, r3
   2bdf8:	4b27      	ldr	r3, [pc, #156]	; (2be98 <get_fat+0x168>)
   2bdfa:	4798      	blx	r3
   2bdfc:	1e03      	subs	r3, r0, #0
   2bdfe:	d141      	bne.n	2be84 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2be00:	683b      	ldr	r3, [r7, #0]
   2be02:	005a      	lsls	r2, r3, #1
   2be04:	23ff      	movs	r3, #255	; 0xff
   2be06:	005b      	lsls	r3, r3, #1
   2be08:	4013      	ands	r3, r2
   2be0a:	3330      	adds	r3, #48	; 0x30
   2be0c:	687a      	ldr	r2, [r7, #4]
   2be0e:	18d3      	adds	r3, r2, r3
   2be10:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2be12:	68fb      	ldr	r3, [r7, #12]
   2be14:	3301      	adds	r3, #1
   2be16:	781b      	ldrb	r3, [r3, #0]
   2be18:	021b      	lsls	r3, r3, #8
   2be1a:	b21a      	sxth	r2, r3
   2be1c:	68fb      	ldr	r3, [r7, #12]
   2be1e:	781b      	ldrb	r3, [r3, #0]
   2be20:	b21b      	sxth	r3, r3
   2be22:	4313      	orrs	r3, r2
   2be24:	b21b      	sxth	r3, r3
   2be26:	b29b      	uxth	r3, r3
   2be28:	e031      	b.n	2be8e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2be2a:	687b      	ldr	r3, [r7, #4]
   2be2c:	6a1a      	ldr	r2, [r3, #32]
   2be2e:	683b      	ldr	r3, [r7, #0]
   2be30:	09db      	lsrs	r3, r3, #7
   2be32:	18d2      	adds	r2, r2, r3
   2be34:	687b      	ldr	r3, [r7, #4]
   2be36:	0011      	movs	r1, r2
   2be38:	0018      	movs	r0, r3
   2be3a:	4b17      	ldr	r3, [pc, #92]	; (2be98 <get_fat+0x168>)
   2be3c:	4798      	blx	r3
   2be3e:	1e03      	subs	r3, r0, #0
   2be40:	d122      	bne.n	2be88 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2be42:	683b      	ldr	r3, [r7, #0]
   2be44:	009a      	lsls	r2, r3, #2
   2be46:	23fe      	movs	r3, #254	; 0xfe
   2be48:	005b      	lsls	r3, r3, #1
   2be4a:	4013      	ands	r3, r2
   2be4c:	3330      	adds	r3, #48	; 0x30
   2be4e:	687a      	ldr	r2, [r7, #4]
   2be50:	18d3      	adds	r3, r2, r3
   2be52:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2be54:	68fb      	ldr	r3, [r7, #12]
   2be56:	3303      	adds	r3, #3
   2be58:	781b      	ldrb	r3, [r3, #0]
   2be5a:	061a      	lsls	r2, r3, #24
   2be5c:	68fb      	ldr	r3, [r7, #12]
   2be5e:	3302      	adds	r3, #2
   2be60:	781b      	ldrb	r3, [r3, #0]
   2be62:	041b      	lsls	r3, r3, #16
   2be64:	4313      	orrs	r3, r2
   2be66:	68fa      	ldr	r2, [r7, #12]
   2be68:	3201      	adds	r2, #1
   2be6a:	7812      	ldrb	r2, [r2, #0]
   2be6c:	0212      	lsls	r2, r2, #8
   2be6e:	4313      	orrs	r3, r2
   2be70:	68fa      	ldr	r2, [r7, #12]
   2be72:	7812      	ldrb	r2, [r2, #0]
   2be74:	4313      	orrs	r3, r2
   2be76:	011b      	lsls	r3, r3, #4
   2be78:	091b      	lsrs	r3, r3, #4
   2be7a:	e008      	b.n	2be8e <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2be7c:	46c0      	nop			; (mov r8, r8)
   2be7e:	e004      	b.n	2be8a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2be80:	46c0      	nop			; (mov r8, r8)
   2be82:	e002      	b.n	2be8a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2be84:	46c0      	nop			; (mov r8, r8)
   2be86:	e000      	b.n	2be8a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2be88:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2be8a:	2301      	movs	r3, #1
   2be8c:	425b      	negs	r3, r3
}
   2be8e:	0018      	movs	r0, r3
   2be90:	46bd      	mov	sp, r7
   2be92:	b006      	add	sp, #24
   2be94:	bd80      	pop	{r7, pc}
   2be96:	46c0      	nop			; (mov r8, r8)
   2be98:	0002ba99 	.word	0x0002ba99

0002be9c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2be9c:	b590      	push	{r4, r7, lr}
   2be9e:	b089      	sub	sp, #36	; 0x24
   2bea0:	af00      	add	r7, sp, #0
   2bea2:	60f8      	str	r0, [r7, #12]
   2bea4:	60b9      	str	r1, [r7, #8]
   2bea6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2bea8:	68bb      	ldr	r3, [r7, #8]
   2beaa:	2b01      	cmp	r3, #1
   2beac:	d904      	bls.n	2beb8 <put_fat+0x1c>
   2beae:	68fb      	ldr	r3, [r7, #12]
   2beb0:	699a      	ldr	r2, [r3, #24]
   2beb2:	68bb      	ldr	r3, [r7, #8]
   2beb4:	429a      	cmp	r2, r3
   2beb6:	d804      	bhi.n	2bec2 <put_fat+0x26>
		res = FR_INT_ERR;
   2beb8:	231f      	movs	r3, #31
   2beba:	18fb      	adds	r3, r7, r3
   2bebc:	2202      	movs	r2, #2
   2bebe:	701a      	strb	r2, [r3, #0]
   2bec0:	e100      	b.n	2c0c4 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2bec2:	68fb      	ldr	r3, [r7, #12]
   2bec4:	781b      	ldrb	r3, [r3, #0]
   2bec6:	2b02      	cmp	r3, #2
   2bec8:	d100      	bne.n	2becc <put_fat+0x30>
   2beca:	e078      	b.n	2bfbe <put_fat+0x122>
   2becc:	2b03      	cmp	r3, #3
   2bece:	d100      	bne.n	2bed2 <put_fat+0x36>
   2bed0:	e09e      	b.n	2c010 <put_fat+0x174>
   2bed2:	2b01      	cmp	r3, #1
   2bed4:	d000      	beq.n	2bed8 <put_fat+0x3c>
   2bed6:	e0e6      	b.n	2c0a6 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2bed8:	68bb      	ldr	r3, [r7, #8]
   2beda:	61bb      	str	r3, [r7, #24]
   2bedc:	69bb      	ldr	r3, [r7, #24]
   2bede:	085b      	lsrs	r3, r3, #1
   2bee0:	69ba      	ldr	r2, [r7, #24]
   2bee2:	18d3      	adds	r3, r2, r3
   2bee4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2bee6:	68fb      	ldr	r3, [r7, #12]
   2bee8:	6a1a      	ldr	r2, [r3, #32]
   2beea:	69bb      	ldr	r3, [r7, #24]
   2beec:	0a5b      	lsrs	r3, r3, #9
   2beee:	18d2      	adds	r2, r2, r3
   2bef0:	231f      	movs	r3, #31
   2bef2:	18fc      	adds	r4, r7, r3
   2bef4:	68fb      	ldr	r3, [r7, #12]
   2bef6:	0011      	movs	r1, r2
   2bef8:	0018      	movs	r0, r3
   2befa:	4b76      	ldr	r3, [pc, #472]	; (2c0d4 <put_fat+0x238>)
   2befc:	4798      	blx	r3
   2befe:	0003      	movs	r3, r0
   2bf00:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bf02:	231f      	movs	r3, #31
   2bf04:	18fb      	adds	r3, r7, r3
   2bf06:	781b      	ldrb	r3, [r3, #0]
   2bf08:	2b00      	cmp	r3, #0
   2bf0a:	d000      	beq.n	2bf0e <put_fat+0x72>
   2bf0c:	e0d0      	b.n	2c0b0 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2bf0e:	69bb      	ldr	r3, [r7, #24]
   2bf10:	05db      	lsls	r3, r3, #23
   2bf12:	0ddb      	lsrs	r3, r3, #23
   2bf14:	3330      	adds	r3, #48	; 0x30
   2bf16:	68fa      	ldr	r2, [r7, #12]
   2bf18:	18d3      	adds	r3, r2, r3
   2bf1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2bf1c:	68bb      	ldr	r3, [r7, #8]
   2bf1e:	2201      	movs	r2, #1
   2bf20:	4013      	ands	r3, r2
   2bf22:	d00d      	beq.n	2bf40 <put_fat+0xa4>
   2bf24:	697b      	ldr	r3, [r7, #20]
   2bf26:	781b      	ldrb	r3, [r3, #0]
   2bf28:	b25b      	sxtb	r3, r3
   2bf2a:	220f      	movs	r2, #15
   2bf2c:	4013      	ands	r3, r2
   2bf2e:	b25a      	sxtb	r2, r3
   2bf30:	687b      	ldr	r3, [r7, #4]
   2bf32:	b2db      	uxtb	r3, r3
   2bf34:	011b      	lsls	r3, r3, #4
   2bf36:	b25b      	sxtb	r3, r3
   2bf38:	4313      	orrs	r3, r2
   2bf3a:	b25b      	sxtb	r3, r3
   2bf3c:	b2db      	uxtb	r3, r3
   2bf3e:	e001      	b.n	2bf44 <put_fat+0xa8>
   2bf40:	687b      	ldr	r3, [r7, #4]
   2bf42:	b2db      	uxtb	r3, r3
   2bf44:	697a      	ldr	r2, [r7, #20]
   2bf46:	7013      	strb	r3, [r2, #0]
			bc++;
   2bf48:	69bb      	ldr	r3, [r7, #24]
   2bf4a:	3301      	adds	r3, #1
   2bf4c:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2bf4e:	68fb      	ldr	r3, [r7, #12]
   2bf50:	2201      	movs	r2, #1
   2bf52:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2bf54:	68fb      	ldr	r3, [r7, #12]
   2bf56:	6a1a      	ldr	r2, [r3, #32]
   2bf58:	69bb      	ldr	r3, [r7, #24]
   2bf5a:	0a5b      	lsrs	r3, r3, #9
   2bf5c:	18d2      	adds	r2, r2, r3
   2bf5e:	231f      	movs	r3, #31
   2bf60:	18fc      	adds	r4, r7, r3
   2bf62:	68fb      	ldr	r3, [r7, #12]
   2bf64:	0011      	movs	r1, r2
   2bf66:	0018      	movs	r0, r3
   2bf68:	4b5a      	ldr	r3, [pc, #360]	; (2c0d4 <put_fat+0x238>)
   2bf6a:	4798      	blx	r3
   2bf6c:	0003      	movs	r3, r0
   2bf6e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bf70:	231f      	movs	r3, #31
   2bf72:	18fb      	adds	r3, r7, r3
   2bf74:	781b      	ldrb	r3, [r3, #0]
   2bf76:	2b00      	cmp	r3, #0
   2bf78:	d000      	beq.n	2bf7c <put_fat+0xe0>
   2bf7a:	e09b      	b.n	2c0b4 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2bf7c:	69bb      	ldr	r3, [r7, #24]
   2bf7e:	05db      	lsls	r3, r3, #23
   2bf80:	0ddb      	lsrs	r3, r3, #23
   2bf82:	3330      	adds	r3, #48	; 0x30
   2bf84:	68fa      	ldr	r2, [r7, #12]
   2bf86:	18d3      	adds	r3, r2, r3
   2bf88:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2bf8a:	68bb      	ldr	r3, [r7, #8]
   2bf8c:	2201      	movs	r2, #1
   2bf8e:	4013      	ands	r3, r2
   2bf90:	d003      	beq.n	2bf9a <put_fat+0xfe>
   2bf92:	687b      	ldr	r3, [r7, #4]
   2bf94:	091b      	lsrs	r3, r3, #4
   2bf96:	b2db      	uxtb	r3, r3
   2bf98:	e00e      	b.n	2bfb8 <put_fat+0x11c>
   2bf9a:	697b      	ldr	r3, [r7, #20]
   2bf9c:	781b      	ldrb	r3, [r3, #0]
   2bf9e:	b25b      	sxtb	r3, r3
   2bfa0:	220f      	movs	r2, #15
   2bfa2:	4393      	bics	r3, r2
   2bfa4:	b25a      	sxtb	r2, r3
   2bfa6:	687b      	ldr	r3, [r7, #4]
   2bfa8:	0a1b      	lsrs	r3, r3, #8
   2bfaa:	b25b      	sxtb	r3, r3
   2bfac:	210f      	movs	r1, #15
   2bfae:	400b      	ands	r3, r1
   2bfb0:	b25b      	sxtb	r3, r3
   2bfb2:	4313      	orrs	r3, r2
   2bfb4:	b25b      	sxtb	r3, r3
   2bfb6:	b2db      	uxtb	r3, r3
   2bfb8:	697a      	ldr	r2, [r7, #20]
   2bfba:	7013      	strb	r3, [r2, #0]
			break;
   2bfbc:	e07f      	b.n	2c0be <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2bfbe:	68fb      	ldr	r3, [r7, #12]
   2bfc0:	6a1a      	ldr	r2, [r3, #32]
   2bfc2:	68bb      	ldr	r3, [r7, #8]
   2bfc4:	0a1b      	lsrs	r3, r3, #8
   2bfc6:	18d2      	adds	r2, r2, r3
   2bfc8:	231f      	movs	r3, #31
   2bfca:	18fc      	adds	r4, r7, r3
   2bfcc:	68fb      	ldr	r3, [r7, #12]
   2bfce:	0011      	movs	r1, r2
   2bfd0:	0018      	movs	r0, r3
   2bfd2:	4b40      	ldr	r3, [pc, #256]	; (2c0d4 <put_fat+0x238>)
   2bfd4:	4798      	blx	r3
   2bfd6:	0003      	movs	r3, r0
   2bfd8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2bfda:	231f      	movs	r3, #31
   2bfdc:	18fb      	adds	r3, r7, r3
   2bfde:	781b      	ldrb	r3, [r3, #0]
   2bfe0:	2b00      	cmp	r3, #0
   2bfe2:	d169      	bne.n	2c0b8 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2bfe4:	68bb      	ldr	r3, [r7, #8]
   2bfe6:	005a      	lsls	r2, r3, #1
   2bfe8:	23ff      	movs	r3, #255	; 0xff
   2bfea:	005b      	lsls	r3, r3, #1
   2bfec:	4013      	ands	r3, r2
   2bfee:	3330      	adds	r3, #48	; 0x30
   2bff0:	68fa      	ldr	r2, [r7, #12]
   2bff2:	18d3      	adds	r3, r2, r3
   2bff4:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2bff6:	687b      	ldr	r3, [r7, #4]
   2bff8:	b2da      	uxtb	r2, r3
   2bffa:	697b      	ldr	r3, [r7, #20]
   2bffc:	701a      	strb	r2, [r3, #0]
   2bffe:	697b      	ldr	r3, [r7, #20]
   2c000:	3301      	adds	r3, #1
   2c002:	687a      	ldr	r2, [r7, #4]
   2c004:	b292      	uxth	r2, r2
   2c006:	0a12      	lsrs	r2, r2, #8
   2c008:	b292      	uxth	r2, r2
   2c00a:	b2d2      	uxtb	r2, r2
   2c00c:	701a      	strb	r2, [r3, #0]
			break;
   2c00e:	e056      	b.n	2c0be <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2c010:	68fb      	ldr	r3, [r7, #12]
   2c012:	6a1a      	ldr	r2, [r3, #32]
   2c014:	68bb      	ldr	r3, [r7, #8]
   2c016:	09db      	lsrs	r3, r3, #7
   2c018:	18d2      	adds	r2, r2, r3
   2c01a:	231f      	movs	r3, #31
   2c01c:	18fc      	adds	r4, r7, r3
   2c01e:	68fb      	ldr	r3, [r7, #12]
   2c020:	0011      	movs	r1, r2
   2c022:	0018      	movs	r0, r3
   2c024:	4b2b      	ldr	r3, [pc, #172]	; (2c0d4 <put_fat+0x238>)
   2c026:	4798      	blx	r3
   2c028:	0003      	movs	r3, r0
   2c02a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c02c:	231f      	movs	r3, #31
   2c02e:	18fb      	adds	r3, r7, r3
   2c030:	781b      	ldrb	r3, [r3, #0]
   2c032:	2b00      	cmp	r3, #0
   2c034:	d142      	bne.n	2c0bc <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2c036:	68bb      	ldr	r3, [r7, #8]
   2c038:	009a      	lsls	r2, r3, #2
   2c03a:	23fe      	movs	r3, #254	; 0xfe
   2c03c:	005b      	lsls	r3, r3, #1
   2c03e:	4013      	ands	r3, r2
   2c040:	3330      	adds	r3, #48	; 0x30
   2c042:	68fa      	ldr	r2, [r7, #12]
   2c044:	18d3      	adds	r3, r2, r3
   2c046:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2c048:	697b      	ldr	r3, [r7, #20]
   2c04a:	3303      	adds	r3, #3
   2c04c:	781b      	ldrb	r3, [r3, #0]
   2c04e:	061a      	lsls	r2, r3, #24
   2c050:	697b      	ldr	r3, [r7, #20]
   2c052:	3302      	adds	r3, #2
   2c054:	781b      	ldrb	r3, [r3, #0]
   2c056:	041b      	lsls	r3, r3, #16
   2c058:	4313      	orrs	r3, r2
   2c05a:	697a      	ldr	r2, [r7, #20]
   2c05c:	3201      	adds	r2, #1
   2c05e:	7812      	ldrb	r2, [r2, #0]
   2c060:	0212      	lsls	r2, r2, #8
   2c062:	4313      	orrs	r3, r2
   2c064:	697a      	ldr	r2, [r7, #20]
   2c066:	7812      	ldrb	r2, [r2, #0]
   2c068:	4313      	orrs	r3, r2
   2c06a:	0f1b      	lsrs	r3, r3, #28
   2c06c:	071b      	lsls	r3, r3, #28
   2c06e:	687a      	ldr	r2, [r7, #4]
   2c070:	4313      	orrs	r3, r2
   2c072:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2c074:	687b      	ldr	r3, [r7, #4]
   2c076:	b2da      	uxtb	r2, r3
   2c078:	697b      	ldr	r3, [r7, #20]
   2c07a:	701a      	strb	r2, [r3, #0]
   2c07c:	697b      	ldr	r3, [r7, #20]
   2c07e:	3301      	adds	r3, #1
   2c080:	687a      	ldr	r2, [r7, #4]
   2c082:	b292      	uxth	r2, r2
   2c084:	0a12      	lsrs	r2, r2, #8
   2c086:	b292      	uxth	r2, r2
   2c088:	b2d2      	uxtb	r2, r2
   2c08a:	701a      	strb	r2, [r3, #0]
   2c08c:	697b      	ldr	r3, [r7, #20]
   2c08e:	3302      	adds	r3, #2
   2c090:	687a      	ldr	r2, [r7, #4]
   2c092:	0c12      	lsrs	r2, r2, #16
   2c094:	b2d2      	uxtb	r2, r2
   2c096:	701a      	strb	r2, [r3, #0]
   2c098:	697b      	ldr	r3, [r7, #20]
   2c09a:	3303      	adds	r3, #3
   2c09c:	687a      	ldr	r2, [r7, #4]
   2c09e:	0e12      	lsrs	r2, r2, #24
   2c0a0:	b2d2      	uxtb	r2, r2
   2c0a2:	701a      	strb	r2, [r3, #0]
			break;
   2c0a4:	e00b      	b.n	2c0be <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2c0a6:	231f      	movs	r3, #31
   2c0a8:	18fb      	adds	r3, r7, r3
   2c0aa:	2202      	movs	r2, #2
   2c0ac:	701a      	strb	r2, [r3, #0]
   2c0ae:	e006      	b.n	2c0be <put_fat+0x222>
			if (res != FR_OK) break;
   2c0b0:	46c0      	nop			; (mov r8, r8)
   2c0b2:	e004      	b.n	2c0be <put_fat+0x222>
			if (res != FR_OK) break;
   2c0b4:	46c0      	nop			; (mov r8, r8)
   2c0b6:	e002      	b.n	2c0be <put_fat+0x222>
			if (res != FR_OK) break;
   2c0b8:	46c0      	nop			; (mov r8, r8)
   2c0ba:	e000      	b.n	2c0be <put_fat+0x222>
			if (res != FR_OK) break;
   2c0bc:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2c0be:	68fb      	ldr	r3, [r7, #12]
   2c0c0:	2201      	movs	r2, #1
   2c0c2:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2c0c4:	231f      	movs	r3, #31
   2c0c6:	18fb      	adds	r3, r7, r3
   2c0c8:	781b      	ldrb	r3, [r3, #0]
}
   2c0ca:	0018      	movs	r0, r3
   2c0cc:	46bd      	mov	sp, r7
   2c0ce:	b009      	add	sp, #36	; 0x24
   2c0d0:	bd90      	pop	{r4, r7, pc}
   2c0d2:	46c0      	nop			; (mov r8, r8)
   2c0d4:	0002ba99 	.word	0x0002ba99

0002c0d8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2c0d8:	b590      	push	{r4, r7, lr}
   2c0da:	b085      	sub	sp, #20
   2c0dc:	af00      	add	r7, sp, #0
   2c0de:	6078      	str	r0, [r7, #4]
   2c0e0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c0e2:	683b      	ldr	r3, [r7, #0]
   2c0e4:	2b01      	cmp	r3, #1
   2c0e6:	d904      	bls.n	2c0f2 <remove_chain+0x1a>
   2c0e8:	687b      	ldr	r3, [r7, #4]
   2c0ea:	699a      	ldr	r2, [r3, #24]
   2c0ec:	683b      	ldr	r3, [r7, #0]
   2c0ee:	429a      	cmp	r2, r3
   2c0f0:	d804      	bhi.n	2c0fc <remove_chain+0x24>
		res = FR_INT_ERR;
   2c0f2:	230f      	movs	r3, #15
   2c0f4:	18fb      	adds	r3, r7, r3
   2c0f6:	2202      	movs	r2, #2
   2c0f8:	701a      	strb	r2, [r3, #0]
   2c0fa:	e045      	b.n	2c188 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2c0fc:	230f      	movs	r3, #15
   2c0fe:	18fb      	adds	r3, r7, r3
   2c100:	2200      	movs	r2, #0
   2c102:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2c104:	e037      	b.n	2c176 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2c106:	683a      	ldr	r2, [r7, #0]
   2c108:	687b      	ldr	r3, [r7, #4]
   2c10a:	0011      	movs	r1, r2
   2c10c:	0018      	movs	r0, r3
   2c10e:	4b22      	ldr	r3, [pc, #136]	; (2c198 <remove_chain+0xc0>)
   2c110:	4798      	blx	r3
   2c112:	0003      	movs	r3, r0
   2c114:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2c116:	68bb      	ldr	r3, [r7, #8]
   2c118:	2b00      	cmp	r3, #0
   2c11a:	d032      	beq.n	2c182 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2c11c:	68bb      	ldr	r3, [r7, #8]
   2c11e:	2b01      	cmp	r3, #1
   2c120:	d104      	bne.n	2c12c <remove_chain+0x54>
   2c122:	230f      	movs	r3, #15
   2c124:	18fb      	adds	r3, r7, r3
   2c126:	2202      	movs	r2, #2
   2c128:	701a      	strb	r2, [r3, #0]
   2c12a:	e02d      	b.n	2c188 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2c12c:	68bb      	ldr	r3, [r7, #8]
   2c12e:	3301      	adds	r3, #1
   2c130:	d104      	bne.n	2c13c <remove_chain+0x64>
   2c132:	230f      	movs	r3, #15
   2c134:	18fb      	adds	r3, r7, r3
   2c136:	2201      	movs	r2, #1
   2c138:	701a      	strb	r2, [r3, #0]
   2c13a:	e025      	b.n	2c188 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2c13c:	230f      	movs	r3, #15
   2c13e:	18fc      	adds	r4, r7, r3
   2c140:	6839      	ldr	r1, [r7, #0]
   2c142:	687b      	ldr	r3, [r7, #4]
   2c144:	2200      	movs	r2, #0
   2c146:	0018      	movs	r0, r3
   2c148:	4b14      	ldr	r3, [pc, #80]	; (2c19c <remove_chain+0xc4>)
   2c14a:	4798      	blx	r3
   2c14c:	0003      	movs	r3, r0
   2c14e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c150:	230f      	movs	r3, #15
   2c152:	18fb      	adds	r3, r7, r3
   2c154:	781b      	ldrb	r3, [r3, #0]
   2c156:	2b00      	cmp	r3, #0
   2c158:	d115      	bne.n	2c186 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2c15a:	687b      	ldr	r3, [r7, #4]
   2c15c:	691b      	ldr	r3, [r3, #16]
   2c15e:	3301      	adds	r3, #1
   2c160:	d007      	beq.n	2c172 <remove_chain+0x9a>
				fs->free_clust++;
   2c162:	687b      	ldr	r3, [r7, #4]
   2c164:	691b      	ldr	r3, [r3, #16]
   2c166:	1c5a      	adds	r2, r3, #1
   2c168:	687b      	ldr	r3, [r7, #4]
   2c16a:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2c16c:	687b      	ldr	r3, [r7, #4]
   2c16e:	2201      	movs	r2, #1
   2c170:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2c172:	68bb      	ldr	r3, [r7, #8]
   2c174:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2c176:	687b      	ldr	r3, [r7, #4]
   2c178:	699a      	ldr	r2, [r3, #24]
   2c17a:	683b      	ldr	r3, [r7, #0]
   2c17c:	429a      	cmp	r2, r3
   2c17e:	d8c2      	bhi.n	2c106 <remove_chain+0x2e>
   2c180:	e002      	b.n	2c188 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2c182:	46c0      	nop			; (mov r8, r8)
   2c184:	e000      	b.n	2c188 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2c186:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2c188:	230f      	movs	r3, #15
   2c18a:	18fb      	adds	r3, r7, r3
   2c18c:	781b      	ldrb	r3, [r3, #0]
}
   2c18e:	0018      	movs	r0, r3
   2c190:	46bd      	mov	sp, r7
   2c192:	b005      	add	sp, #20
   2c194:	bd90      	pop	{r4, r7, pc}
   2c196:	46c0      	nop			; (mov r8, r8)
   2c198:	0002bd31 	.word	0x0002bd31
   2c19c:	0002be9d 	.word	0x0002be9d

0002c1a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2c1a0:	b590      	push	{r4, r7, lr}
   2c1a2:	b087      	sub	sp, #28
   2c1a4:	af00      	add	r7, sp, #0
   2c1a6:	6078      	str	r0, [r7, #4]
   2c1a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2c1aa:	683b      	ldr	r3, [r7, #0]
   2c1ac:	2b00      	cmp	r3, #0
   2c1ae:	d10d      	bne.n	2c1cc <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2c1b0:	687b      	ldr	r3, [r7, #4]
   2c1b2:	68db      	ldr	r3, [r3, #12]
   2c1b4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2c1b6:	693b      	ldr	r3, [r7, #16]
   2c1b8:	2b00      	cmp	r3, #0
   2c1ba:	d004      	beq.n	2c1c6 <create_chain+0x26>
   2c1bc:	687b      	ldr	r3, [r7, #4]
   2c1be:	699a      	ldr	r2, [r3, #24]
   2c1c0:	693b      	ldr	r3, [r7, #16]
   2c1c2:	429a      	cmp	r2, r3
   2c1c4:	d818      	bhi.n	2c1f8 <create_chain+0x58>
   2c1c6:	2301      	movs	r3, #1
   2c1c8:	613b      	str	r3, [r7, #16]
   2c1ca:	e015      	b.n	2c1f8 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2c1cc:	683a      	ldr	r2, [r7, #0]
   2c1ce:	687b      	ldr	r3, [r7, #4]
   2c1d0:	0011      	movs	r1, r2
   2c1d2:	0018      	movs	r0, r3
   2c1d4:	4b3e      	ldr	r3, [pc, #248]	; (2c2d0 <create_chain+0x130>)
   2c1d6:	4798      	blx	r3
   2c1d8:	0003      	movs	r3, r0
   2c1da:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2c1dc:	68bb      	ldr	r3, [r7, #8]
   2c1de:	2b01      	cmp	r3, #1
   2c1e0:	d801      	bhi.n	2c1e6 <create_chain+0x46>
   2c1e2:	2301      	movs	r3, #1
   2c1e4:	e070      	b.n	2c2c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2c1e6:	687b      	ldr	r3, [r7, #4]
   2c1e8:	699a      	ldr	r2, [r3, #24]
   2c1ea:	68bb      	ldr	r3, [r7, #8]
   2c1ec:	429a      	cmp	r2, r3
   2c1ee:	d901      	bls.n	2c1f4 <create_chain+0x54>
   2c1f0:	68bb      	ldr	r3, [r7, #8]
   2c1f2:	e069      	b.n	2c2c8 <create_chain+0x128>
		scl = clst;
   2c1f4:	683b      	ldr	r3, [r7, #0]
   2c1f6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2c1f8:	693b      	ldr	r3, [r7, #16]
   2c1fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2c1fc:	697b      	ldr	r3, [r7, #20]
   2c1fe:	3301      	adds	r3, #1
   2c200:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2c202:	687b      	ldr	r3, [r7, #4]
   2c204:	699a      	ldr	r2, [r3, #24]
   2c206:	697b      	ldr	r3, [r7, #20]
   2c208:	429a      	cmp	r2, r3
   2c20a:	d807      	bhi.n	2c21c <create_chain+0x7c>
			ncl = 2;
   2c20c:	2302      	movs	r3, #2
   2c20e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2c210:	697a      	ldr	r2, [r7, #20]
   2c212:	693b      	ldr	r3, [r7, #16]
   2c214:	429a      	cmp	r2, r3
   2c216:	d901      	bls.n	2c21c <create_chain+0x7c>
   2c218:	2300      	movs	r3, #0
   2c21a:	e055      	b.n	2c2c8 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2c21c:	697a      	ldr	r2, [r7, #20]
   2c21e:	687b      	ldr	r3, [r7, #4]
   2c220:	0011      	movs	r1, r2
   2c222:	0018      	movs	r0, r3
   2c224:	4b2a      	ldr	r3, [pc, #168]	; (2c2d0 <create_chain+0x130>)
   2c226:	4798      	blx	r3
   2c228:	0003      	movs	r3, r0
   2c22a:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2c22c:	68bb      	ldr	r3, [r7, #8]
   2c22e:	2b00      	cmp	r3, #0
   2c230:	d00d      	beq.n	2c24e <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2c232:	68bb      	ldr	r3, [r7, #8]
   2c234:	3301      	adds	r3, #1
   2c236:	d002      	beq.n	2c23e <create_chain+0x9e>
   2c238:	68bb      	ldr	r3, [r7, #8]
   2c23a:	2b01      	cmp	r3, #1
   2c23c:	d101      	bne.n	2c242 <create_chain+0xa2>
			return cs;
   2c23e:	68bb      	ldr	r3, [r7, #8]
   2c240:	e042      	b.n	2c2c8 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2c242:	697a      	ldr	r2, [r7, #20]
   2c244:	693b      	ldr	r3, [r7, #16]
   2c246:	429a      	cmp	r2, r3
   2c248:	d1d8      	bne.n	2c1fc <create_chain+0x5c>
   2c24a:	2300      	movs	r3, #0
   2c24c:	e03c      	b.n	2c2c8 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2c24e:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2c250:	230f      	movs	r3, #15
   2c252:	18fc      	adds	r4, r7, r3
   2c254:	4a1f      	ldr	r2, [pc, #124]	; (2c2d4 <create_chain+0x134>)
   2c256:	6979      	ldr	r1, [r7, #20]
   2c258:	687b      	ldr	r3, [r7, #4]
   2c25a:	0018      	movs	r0, r3
   2c25c:	4b1e      	ldr	r3, [pc, #120]	; (2c2d8 <create_chain+0x138>)
   2c25e:	4798      	blx	r3
   2c260:	0003      	movs	r3, r0
   2c262:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2c264:	230f      	movs	r3, #15
   2c266:	18fb      	adds	r3, r7, r3
   2c268:	781b      	ldrb	r3, [r3, #0]
   2c26a:	2b00      	cmp	r3, #0
   2c26c:	d10c      	bne.n	2c288 <create_chain+0xe8>
   2c26e:	683b      	ldr	r3, [r7, #0]
   2c270:	2b00      	cmp	r3, #0
   2c272:	d009      	beq.n	2c288 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2c274:	230f      	movs	r3, #15
   2c276:	18fc      	adds	r4, r7, r3
   2c278:	697a      	ldr	r2, [r7, #20]
   2c27a:	6839      	ldr	r1, [r7, #0]
   2c27c:	687b      	ldr	r3, [r7, #4]
   2c27e:	0018      	movs	r0, r3
   2c280:	4b15      	ldr	r3, [pc, #84]	; (2c2d8 <create_chain+0x138>)
   2c282:	4798      	blx	r3
   2c284:	0003      	movs	r3, r0
   2c286:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2c288:	230f      	movs	r3, #15
   2c28a:	18fb      	adds	r3, r7, r3
   2c28c:	781b      	ldrb	r3, [r3, #0]
   2c28e:	2b00      	cmp	r3, #0
   2c290:	d10f      	bne.n	2c2b2 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2c292:	687b      	ldr	r3, [r7, #4]
   2c294:	697a      	ldr	r2, [r7, #20]
   2c296:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2c298:	687b      	ldr	r3, [r7, #4]
   2c29a:	691b      	ldr	r3, [r3, #16]
   2c29c:	3301      	adds	r3, #1
   2c29e:	d012      	beq.n	2c2c6 <create_chain+0x126>
			fs->free_clust--;
   2c2a0:	687b      	ldr	r3, [r7, #4]
   2c2a2:	691b      	ldr	r3, [r3, #16]
   2c2a4:	1e5a      	subs	r2, r3, #1
   2c2a6:	687b      	ldr	r3, [r7, #4]
   2c2a8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2c2aa:	687b      	ldr	r3, [r7, #4]
   2c2ac:	2201      	movs	r2, #1
   2c2ae:	715a      	strb	r2, [r3, #5]
   2c2b0:	e009      	b.n	2c2c6 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2c2b2:	230f      	movs	r3, #15
   2c2b4:	18fb      	adds	r3, r7, r3
   2c2b6:	781b      	ldrb	r3, [r3, #0]
   2c2b8:	2b01      	cmp	r3, #1
   2c2ba:	d102      	bne.n	2c2c2 <create_chain+0x122>
   2c2bc:	2301      	movs	r3, #1
   2c2be:	425b      	negs	r3, r3
   2c2c0:	e000      	b.n	2c2c4 <create_chain+0x124>
   2c2c2:	2301      	movs	r3, #1
   2c2c4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2c2c6:	697b      	ldr	r3, [r7, #20]
}
   2c2c8:	0018      	movs	r0, r3
   2c2ca:	46bd      	mov	sp, r7
   2c2cc:	b007      	add	sp, #28
   2c2ce:	bd90      	pop	{r4, r7, pc}
   2c2d0:	0002bd31 	.word	0x0002bd31
   2c2d4:	0fffffff 	.word	0x0fffffff
   2c2d8:	0002be9d 	.word	0x0002be9d

0002c2dc <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2c2dc:	b580      	push	{r7, lr}
   2c2de:	b084      	sub	sp, #16
   2c2e0:	af00      	add	r7, sp, #0
   2c2e2:	6078      	str	r0, [r7, #4]
   2c2e4:	000a      	movs	r2, r1
   2c2e6:	1cbb      	adds	r3, r7, #2
   2c2e8:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2c2ea:	687b      	ldr	r3, [r7, #4]
   2c2ec:	1cba      	adds	r2, r7, #2
   2c2ee:	8812      	ldrh	r2, [r2, #0]
   2c2f0:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2c2f2:	687b      	ldr	r3, [r7, #4]
   2c2f4:	689b      	ldr	r3, [r3, #8]
   2c2f6:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2c2f8:	68fb      	ldr	r3, [r7, #12]
   2c2fa:	2b01      	cmp	r3, #1
   2c2fc:	d005      	beq.n	2c30a <dir_sdi+0x2e>
   2c2fe:	687b      	ldr	r3, [r7, #4]
   2c300:	681b      	ldr	r3, [r3, #0]
   2c302:	699a      	ldr	r2, [r3, #24]
   2c304:	68fb      	ldr	r3, [r7, #12]
   2c306:	429a      	cmp	r2, r3
   2c308:	d801      	bhi.n	2c30e <dir_sdi+0x32>
		return FR_INT_ERR;
   2c30a:	2302      	movs	r3, #2
   2c30c:	e075      	b.n	2c3fa <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2c30e:	68fb      	ldr	r3, [r7, #12]
   2c310:	2b00      	cmp	r3, #0
   2c312:	d108      	bne.n	2c326 <dir_sdi+0x4a>
   2c314:	687b      	ldr	r3, [r7, #4]
   2c316:	681b      	ldr	r3, [r3, #0]
   2c318:	781b      	ldrb	r3, [r3, #0]
   2c31a:	2b03      	cmp	r3, #3
   2c31c:	d103      	bne.n	2c326 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2c31e:	687b      	ldr	r3, [r7, #4]
   2c320:	681b      	ldr	r3, [r3, #0]
   2c322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c324:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2c326:	68fb      	ldr	r3, [r7, #12]
   2c328:	2b00      	cmp	r3, #0
   2c32a:	d116      	bne.n	2c35a <dir_sdi+0x7e>
		dj->clust = clst;
   2c32c:	687b      	ldr	r3, [r7, #4]
   2c32e:	68fa      	ldr	r2, [r7, #12]
   2c330:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2c332:	687b      	ldr	r3, [r7, #4]
   2c334:	681b      	ldr	r3, [r3, #0]
   2c336:	891b      	ldrh	r3, [r3, #8]
   2c338:	1cba      	adds	r2, r7, #2
   2c33a:	8812      	ldrh	r2, [r2, #0]
   2c33c:	429a      	cmp	r2, r3
   2c33e:	d301      	bcc.n	2c344 <dir_sdi+0x68>
			return FR_INT_ERR;
   2c340:	2302      	movs	r3, #2
   2c342:	e05a      	b.n	2c3fa <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c344:	687b      	ldr	r3, [r7, #4]
   2c346:	681b      	ldr	r3, [r3, #0]
   2c348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2c34a:	1cba      	adds	r2, r7, #2
   2c34c:	8812      	ldrh	r2, [r2, #0]
   2c34e:	0912      	lsrs	r2, r2, #4
   2c350:	b292      	uxth	r2, r2
   2c352:	189a      	adds	r2, r3, r2
   2c354:	687b      	ldr	r3, [r7, #4]
   2c356:	611a      	str	r2, [r3, #16]
   2c358:	e042      	b.n	2c3e0 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2c35a:	687b      	ldr	r3, [r7, #4]
   2c35c:	681b      	ldr	r3, [r3, #0]
   2c35e:	789b      	ldrb	r3, [r3, #2]
   2c360:	b29a      	uxth	r2, r3
   2c362:	230a      	movs	r3, #10
   2c364:	18fb      	adds	r3, r7, r3
   2c366:	0112      	lsls	r2, r2, #4
   2c368:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c36a:	e020      	b.n	2c3ae <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2c36c:	687b      	ldr	r3, [r7, #4]
   2c36e:	681b      	ldr	r3, [r3, #0]
   2c370:	68fa      	ldr	r2, [r7, #12]
   2c372:	0011      	movs	r1, r2
   2c374:	0018      	movs	r0, r3
   2c376:	4b23      	ldr	r3, [pc, #140]	; (2c404 <dir_sdi+0x128>)
   2c378:	4798      	blx	r3
   2c37a:	0003      	movs	r3, r0
   2c37c:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2c37e:	68fb      	ldr	r3, [r7, #12]
   2c380:	3301      	adds	r3, #1
   2c382:	d101      	bne.n	2c388 <dir_sdi+0xac>
   2c384:	2301      	movs	r3, #1
   2c386:	e038      	b.n	2c3fa <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2c388:	68fb      	ldr	r3, [r7, #12]
   2c38a:	2b01      	cmp	r3, #1
   2c38c:	d905      	bls.n	2c39a <dir_sdi+0xbe>
   2c38e:	687b      	ldr	r3, [r7, #4]
   2c390:	681b      	ldr	r3, [r3, #0]
   2c392:	699a      	ldr	r2, [r3, #24]
   2c394:	68fb      	ldr	r3, [r7, #12]
   2c396:	429a      	cmp	r2, r3
   2c398:	d801      	bhi.n	2c39e <dir_sdi+0xc2>
				return FR_INT_ERR;
   2c39a:	2302      	movs	r3, #2
   2c39c:	e02d      	b.n	2c3fa <dir_sdi+0x11e>
			idx -= ic;
   2c39e:	1cbb      	adds	r3, r7, #2
   2c3a0:	1cb9      	adds	r1, r7, #2
   2c3a2:	220a      	movs	r2, #10
   2c3a4:	18ba      	adds	r2, r7, r2
   2c3a6:	8809      	ldrh	r1, [r1, #0]
   2c3a8:	8812      	ldrh	r2, [r2, #0]
   2c3aa:	1a8a      	subs	r2, r1, r2
   2c3ac:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2c3ae:	1cba      	adds	r2, r7, #2
   2c3b0:	230a      	movs	r3, #10
   2c3b2:	18fb      	adds	r3, r7, r3
   2c3b4:	8812      	ldrh	r2, [r2, #0]
   2c3b6:	881b      	ldrh	r3, [r3, #0]
   2c3b8:	429a      	cmp	r2, r3
   2c3ba:	d2d7      	bcs.n	2c36c <dir_sdi+0x90>
		}
		dj->clust = clst;
   2c3bc:	687b      	ldr	r3, [r7, #4]
   2c3be:	68fa      	ldr	r2, [r7, #12]
   2c3c0:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2c3c2:	687b      	ldr	r3, [r7, #4]
   2c3c4:	681b      	ldr	r3, [r3, #0]
   2c3c6:	68fa      	ldr	r2, [r7, #12]
   2c3c8:	0011      	movs	r1, r2
   2c3ca:	0018      	movs	r0, r3
   2c3cc:	4b0e      	ldr	r3, [pc, #56]	; (2c408 <dir_sdi+0x12c>)
   2c3ce:	4798      	blx	r3
   2c3d0:	0002      	movs	r2, r0
   2c3d2:	1cbb      	adds	r3, r7, #2
   2c3d4:	881b      	ldrh	r3, [r3, #0]
   2c3d6:	091b      	lsrs	r3, r3, #4
   2c3d8:	b29b      	uxth	r3, r3
   2c3da:	18d2      	adds	r2, r2, r3
   2c3dc:	687b      	ldr	r3, [r7, #4]
   2c3de:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2c3e0:	687b      	ldr	r3, [r7, #4]
   2c3e2:	681b      	ldr	r3, [r3, #0]
   2c3e4:	3330      	adds	r3, #48	; 0x30
   2c3e6:	001a      	movs	r2, r3
   2c3e8:	1cbb      	adds	r3, r7, #2
   2c3ea:	881b      	ldrh	r3, [r3, #0]
   2c3ec:	210f      	movs	r1, #15
   2c3ee:	400b      	ands	r3, r1
   2c3f0:	015b      	lsls	r3, r3, #5
   2c3f2:	18d2      	adds	r2, r2, r3
   2c3f4:	687b      	ldr	r3, [r7, #4]
   2c3f6:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2c3f8:	2300      	movs	r3, #0
}
   2c3fa:	0018      	movs	r0, r3
   2c3fc:	46bd      	mov	sp, r7
   2c3fe:	b004      	add	sp, #16
   2c400:	bd80      	pop	{r7, pc}
   2c402:	46c0      	nop			; (mov r8, r8)
   2c404:	0002bd31 	.word	0x0002bd31
   2c408:	0002bcf9 	.word	0x0002bcf9

0002c40c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2c40c:	b590      	push	{r4, r7, lr}
   2c40e:	b085      	sub	sp, #20
   2c410:	af00      	add	r7, sp, #0
   2c412:	6078      	str	r0, [r7, #4]
   2c414:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2c416:	687b      	ldr	r3, [r7, #4]
   2c418:	88da      	ldrh	r2, [r3, #6]
   2c41a:	2308      	movs	r3, #8
   2c41c:	18fb      	adds	r3, r7, r3
   2c41e:	3201      	adds	r2, #1
   2c420:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2c422:	2308      	movs	r3, #8
   2c424:	18fb      	adds	r3, r7, r3
   2c426:	881b      	ldrh	r3, [r3, #0]
   2c428:	2b00      	cmp	r3, #0
   2c42a:	d003      	beq.n	2c434 <dir_next+0x28>
   2c42c:	687b      	ldr	r3, [r7, #4]
   2c42e:	691b      	ldr	r3, [r3, #16]
   2c430:	2b00      	cmp	r3, #0
   2c432:	d101      	bne.n	2c438 <dir_next+0x2c>
		return FR_NO_FILE;
   2c434:	2304      	movs	r3, #4
   2c436:	e0d2      	b.n	2c5de <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2c438:	2308      	movs	r3, #8
   2c43a:	18fb      	adds	r3, r7, r3
   2c43c:	881b      	ldrh	r3, [r3, #0]
   2c43e:	220f      	movs	r2, #15
   2c440:	4013      	ands	r3, r2
   2c442:	b29b      	uxth	r3, r3
   2c444:	2b00      	cmp	r3, #0
   2c446:	d000      	beq.n	2c44a <dir_next+0x3e>
   2c448:	e0b6      	b.n	2c5b8 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2c44a:	687b      	ldr	r3, [r7, #4]
   2c44c:	691b      	ldr	r3, [r3, #16]
   2c44e:	1c5a      	adds	r2, r3, #1
   2c450:	687b      	ldr	r3, [r7, #4]
   2c452:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2c454:	687b      	ldr	r3, [r7, #4]
   2c456:	68db      	ldr	r3, [r3, #12]
   2c458:	2b00      	cmp	r3, #0
   2c45a:	d10a      	bne.n	2c472 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2c45c:	687b      	ldr	r3, [r7, #4]
   2c45e:	681b      	ldr	r3, [r3, #0]
   2c460:	891b      	ldrh	r3, [r3, #8]
   2c462:	2208      	movs	r2, #8
   2c464:	18ba      	adds	r2, r7, r2
   2c466:	8812      	ldrh	r2, [r2, #0]
   2c468:	429a      	cmp	r2, r3
   2c46a:	d200      	bcs.n	2c46e <dir_next+0x62>
   2c46c:	e0a4      	b.n	2c5b8 <dir_next+0x1ac>
				return FR_NO_FILE;
   2c46e:	2304      	movs	r3, #4
   2c470:	e0b5      	b.n	2c5de <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2c472:	2308      	movs	r3, #8
   2c474:	18fb      	adds	r3, r7, r3
   2c476:	881b      	ldrh	r3, [r3, #0]
   2c478:	091b      	lsrs	r3, r3, #4
   2c47a:	b29b      	uxth	r3, r3
   2c47c:	001a      	movs	r2, r3
   2c47e:	687b      	ldr	r3, [r7, #4]
   2c480:	681b      	ldr	r3, [r3, #0]
   2c482:	789b      	ldrb	r3, [r3, #2]
   2c484:	3b01      	subs	r3, #1
   2c486:	4013      	ands	r3, r2
   2c488:	d000      	beq.n	2c48c <dir_next+0x80>
   2c48a:	e095      	b.n	2c5b8 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2c48c:	687b      	ldr	r3, [r7, #4]
   2c48e:	681a      	ldr	r2, [r3, #0]
   2c490:	687b      	ldr	r3, [r7, #4]
   2c492:	68db      	ldr	r3, [r3, #12]
   2c494:	0019      	movs	r1, r3
   2c496:	0010      	movs	r0, r2
   2c498:	4b53      	ldr	r3, [pc, #332]	; (2c5e8 <dir_next+0x1dc>)
   2c49a:	4798      	blx	r3
   2c49c:	0003      	movs	r3, r0
   2c49e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2c4a0:	68fb      	ldr	r3, [r7, #12]
   2c4a2:	2b01      	cmp	r3, #1
   2c4a4:	d801      	bhi.n	2c4aa <dir_next+0x9e>
   2c4a6:	2302      	movs	r3, #2
   2c4a8:	e099      	b.n	2c5de <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c4aa:	68fb      	ldr	r3, [r7, #12]
   2c4ac:	3301      	adds	r3, #1
   2c4ae:	d101      	bne.n	2c4b4 <dir_next+0xa8>
   2c4b0:	2301      	movs	r3, #1
   2c4b2:	e094      	b.n	2c5de <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2c4b4:	687b      	ldr	r3, [r7, #4]
   2c4b6:	681b      	ldr	r3, [r3, #0]
   2c4b8:	699a      	ldr	r2, [r3, #24]
   2c4ba:	68fb      	ldr	r3, [r7, #12]
   2c4bc:	429a      	cmp	r2, r3
   2c4be:	d900      	bls.n	2c4c2 <dir_next+0xb6>
   2c4c0:	e06d      	b.n	2c59e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2c4c2:	683b      	ldr	r3, [r7, #0]
   2c4c4:	2b00      	cmp	r3, #0
   2c4c6:	d101      	bne.n	2c4cc <dir_next+0xc0>
   2c4c8:	2304      	movs	r3, #4
   2c4ca:	e088      	b.n	2c5de <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2c4cc:	687b      	ldr	r3, [r7, #4]
   2c4ce:	681a      	ldr	r2, [r3, #0]
   2c4d0:	687b      	ldr	r3, [r7, #4]
   2c4d2:	68db      	ldr	r3, [r3, #12]
   2c4d4:	0019      	movs	r1, r3
   2c4d6:	0010      	movs	r0, r2
   2c4d8:	4b44      	ldr	r3, [pc, #272]	; (2c5ec <dir_next+0x1e0>)
   2c4da:	4798      	blx	r3
   2c4dc:	0003      	movs	r3, r0
   2c4de:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2c4e0:	68fb      	ldr	r3, [r7, #12]
   2c4e2:	2b00      	cmp	r3, #0
   2c4e4:	d101      	bne.n	2c4ea <dir_next+0xde>
   2c4e6:	2307      	movs	r3, #7
   2c4e8:	e079      	b.n	2c5de <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2c4ea:	68fb      	ldr	r3, [r7, #12]
   2c4ec:	2b01      	cmp	r3, #1
   2c4ee:	d101      	bne.n	2c4f4 <dir_next+0xe8>
   2c4f0:	2302      	movs	r3, #2
   2c4f2:	e074      	b.n	2c5de <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2c4f4:	68fb      	ldr	r3, [r7, #12]
   2c4f6:	3301      	adds	r3, #1
   2c4f8:	d101      	bne.n	2c4fe <dir_next+0xf2>
   2c4fa:	2301      	movs	r3, #1
   2c4fc:	e06f      	b.n	2c5de <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2c4fe:	687b      	ldr	r3, [r7, #4]
   2c500:	681b      	ldr	r3, [r3, #0]
   2c502:	2100      	movs	r1, #0
   2c504:	0018      	movs	r0, r3
   2c506:	4b3a      	ldr	r3, [pc, #232]	; (2c5f0 <dir_next+0x1e4>)
   2c508:	4798      	blx	r3
   2c50a:	1e03      	subs	r3, r0, #0
   2c50c:	d001      	beq.n	2c512 <dir_next+0x106>
   2c50e:	2301      	movs	r3, #1
   2c510:	e065      	b.n	2c5de <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2c512:	687b      	ldr	r3, [r7, #4]
   2c514:	681b      	ldr	r3, [r3, #0]
   2c516:	3330      	adds	r3, #48	; 0x30
   2c518:	0018      	movs	r0, r3
   2c51a:	2380      	movs	r3, #128	; 0x80
   2c51c:	009b      	lsls	r3, r3, #2
   2c51e:	001a      	movs	r2, r3
   2c520:	2100      	movs	r1, #0
   2c522:	4b34      	ldr	r3, [pc, #208]	; (2c5f4 <dir_next+0x1e8>)
   2c524:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2c526:	687b      	ldr	r3, [r7, #4]
   2c528:	681c      	ldr	r4, [r3, #0]
   2c52a:	687b      	ldr	r3, [r7, #4]
   2c52c:	681b      	ldr	r3, [r3, #0]
   2c52e:	68fa      	ldr	r2, [r7, #12]
   2c530:	0011      	movs	r1, r2
   2c532:	0018      	movs	r0, r3
   2c534:	4b30      	ldr	r3, [pc, #192]	; (2c5f8 <dir_next+0x1ec>)
   2c536:	4798      	blx	r3
   2c538:	0003      	movs	r3, r0
   2c53a:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c53c:	230b      	movs	r3, #11
   2c53e:	18fb      	adds	r3, r7, r3
   2c540:	2200      	movs	r2, #0
   2c542:	701a      	strb	r2, [r3, #0]
   2c544:	e019      	b.n	2c57a <dir_next+0x16e>
						dj->fs->wflag = 1;
   2c546:	687b      	ldr	r3, [r7, #4]
   2c548:	681b      	ldr	r3, [r3, #0]
   2c54a:	2201      	movs	r2, #1
   2c54c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2c54e:	687b      	ldr	r3, [r7, #4]
   2c550:	681b      	ldr	r3, [r3, #0]
   2c552:	2100      	movs	r1, #0
   2c554:	0018      	movs	r0, r3
   2c556:	4b26      	ldr	r3, [pc, #152]	; (2c5f0 <dir_next+0x1e4>)
   2c558:	4798      	blx	r3
   2c55a:	1e03      	subs	r3, r0, #0
   2c55c:	d001      	beq.n	2c562 <dir_next+0x156>
   2c55e:	2301      	movs	r3, #1
   2c560:	e03d      	b.n	2c5de <dir_next+0x1d2>
						dj->fs->winsect++;
   2c562:	687b      	ldr	r3, [r7, #4]
   2c564:	681b      	ldr	r3, [r3, #0]
   2c566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c568:	3201      	adds	r2, #1
   2c56a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2c56c:	230b      	movs	r3, #11
   2c56e:	18fb      	adds	r3, r7, r3
   2c570:	781a      	ldrb	r2, [r3, #0]
   2c572:	230b      	movs	r3, #11
   2c574:	18fb      	adds	r3, r7, r3
   2c576:	3201      	adds	r2, #1
   2c578:	701a      	strb	r2, [r3, #0]
   2c57a:	687b      	ldr	r3, [r7, #4]
   2c57c:	681b      	ldr	r3, [r3, #0]
   2c57e:	789b      	ldrb	r3, [r3, #2]
   2c580:	220b      	movs	r2, #11
   2c582:	18ba      	adds	r2, r7, r2
   2c584:	7812      	ldrb	r2, [r2, #0]
   2c586:	429a      	cmp	r2, r3
   2c588:	d3dd      	bcc.n	2c546 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2c58a:	687b      	ldr	r3, [r7, #4]
   2c58c:	681b      	ldr	r3, [r3, #0]
   2c58e:	687a      	ldr	r2, [r7, #4]
   2c590:	6812      	ldr	r2, [r2, #0]
   2c592:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2c594:	220b      	movs	r2, #11
   2c596:	18ba      	adds	r2, r7, r2
   2c598:	7812      	ldrb	r2, [r2, #0]
   2c59a:	1a8a      	subs	r2, r1, r2
   2c59c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2c59e:	687b      	ldr	r3, [r7, #4]
   2c5a0:	68fa      	ldr	r2, [r7, #12]
   2c5a2:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2c5a4:	687b      	ldr	r3, [r7, #4]
   2c5a6:	681b      	ldr	r3, [r3, #0]
   2c5a8:	68fa      	ldr	r2, [r7, #12]
   2c5aa:	0011      	movs	r1, r2
   2c5ac:	0018      	movs	r0, r3
   2c5ae:	4b12      	ldr	r3, [pc, #72]	; (2c5f8 <dir_next+0x1ec>)
   2c5b0:	4798      	blx	r3
   2c5b2:	0002      	movs	r2, r0
   2c5b4:	687b      	ldr	r3, [r7, #4]
   2c5b6:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2c5b8:	687b      	ldr	r3, [r7, #4]
   2c5ba:	2208      	movs	r2, #8
   2c5bc:	18ba      	adds	r2, r7, r2
   2c5be:	8812      	ldrh	r2, [r2, #0]
   2c5c0:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2c5c2:	687b      	ldr	r3, [r7, #4]
   2c5c4:	681b      	ldr	r3, [r3, #0]
   2c5c6:	3330      	adds	r3, #48	; 0x30
   2c5c8:	001a      	movs	r2, r3
   2c5ca:	2308      	movs	r3, #8
   2c5cc:	18fb      	adds	r3, r7, r3
   2c5ce:	881b      	ldrh	r3, [r3, #0]
   2c5d0:	210f      	movs	r1, #15
   2c5d2:	400b      	ands	r3, r1
   2c5d4:	015b      	lsls	r3, r3, #5
   2c5d6:	18d2      	adds	r2, r2, r3
   2c5d8:	687b      	ldr	r3, [r7, #4]
   2c5da:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2c5dc:	2300      	movs	r3, #0
}
   2c5de:	0018      	movs	r0, r3
   2c5e0:	46bd      	mov	sp, r7
   2c5e2:	b005      	add	sp, #20
   2c5e4:	bd90      	pop	{r4, r7, pc}
   2c5e6:	46c0      	nop			; (mov r8, r8)
   2c5e8:	0002bd31 	.word	0x0002bd31
   2c5ec:	0002c1a1 	.word	0x0002c1a1
   2c5f0:	0002ba99 	.word	0x0002ba99
   2c5f4:	0002b9ed 	.word	0x0002b9ed
   2c5f8:	0002bcf9 	.word	0x0002bcf9

0002c5fc <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2c5fc:	b590      	push	{r4, r7, lr}
   2c5fe:	b087      	sub	sp, #28
   2c600:	af00      	add	r7, sp, #0
   2c602:	6078      	str	r0, [r7, #4]
   2c604:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2c606:	683b      	ldr	r3, [r7, #0]
   2c608:	781b      	ldrb	r3, [r3, #0]
   2c60a:	001a      	movs	r2, r3
   2c60c:	2340      	movs	r3, #64	; 0x40
   2c60e:	439a      	bics	r2, r3
   2c610:	0013      	movs	r3, r2
   2c612:	1e5a      	subs	r2, r3, #1
   2c614:	0013      	movs	r3, r2
   2c616:	005b      	lsls	r3, r3, #1
   2c618:	189b      	adds	r3, r3, r2
   2c61a:	009b      	lsls	r3, r3, #2
   2c61c:	189b      	adds	r3, r3, r2
   2c61e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2c620:	2300      	movs	r3, #0
   2c622:	613b      	str	r3, [r7, #16]
   2c624:	230e      	movs	r3, #14
   2c626:	18fb      	adds	r3, r7, r3
   2c628:	2201      	movs	r2, #1
   2c62a:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2c62c:	4a31      	ldr	r2, [pc, #196]	; (2c6f4 <cmp_lfn+0xf8>)
   2c62e:	693b      	ldr	r3, [r7, #16]
   2c630:	18d3      	adds	r3, r2, r3
   2c632:	781b      	ldrb	r3, [r3, #0]
   2c634:	3301      	adds	r3, #1
   2c636:	683a      	ldr	r2, [r7, #0]
   2c638:	18d3      	adds	r3, r2, r3
   2c63a:	781b      	ldrb	r3, [r3, #0]
   2c63c:	021b      	lsls	r3, r3, #8
   2c63e:	b21a      	sxth	r2, r3
   2c640:	492c      	ldr	r1, [pc, #176]	; (2c6f4 <cmp_lfn+0xf8>)
   2c642:	693b      	ldr	r3, [r7, #16]
   2c644:	18cb      	adds	r3, r1, r3
   2c646:	781b      	ldrb	r3, [r3, #0]
   2c648:	0019      	movs	r1, r3
   2c64a:	683b      	ldr	r3, [r7, #0]
   2c64c:	185b      	adds	r3, r3, r1
   2c64e:	781b      	ldrb	r3, [r3, #0]
   2c650:	b21b      	sxth	r3, r3
   2c652:	4313      	orrs	r3, r2
   2c654:	b21a      	sxth	r2, r3
   2c656:	230c      	movs	r3, #12
   2c658:	18fb      	adds	r3, r7, r3
   2c65a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2c65c:	230e      	movs	r3, #14
   2c65e:	18fb      	adds	r3, r7, r3
   2c660:	881b      	ldrh	r3, [r3, #0]
   2c662:	2b00      	cmp	r3, #0
   2c664:	d01f      	beq.n	2c6a6 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2c666:	230e      	movs	r3, #14
   2c668:	18fc      	adds	r4, r7, r3
   2c66a:	230c      	movs	r3, #12
   2c66c:	18fb      	adds	r3, r7, r3
   2c66e:	881b      	ldrh	r3, [r3, #0]
   2c670:	0018      	movs	r0, r3
   2c672:	4b21      	ldr	r3, [pc, #132]	; (2c6f8 <cmp_lfn+0xfc>)
   2c674:	4798      	blx	r3
   2c676:	0003      	movs	r3, r0
   2c678:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2c67a:	697b      	ldr	r3, [r7, #20]
   2c67c:	2bfe      	cmp	r3, #254	; 0xfe
   2c67e:	d810      	bhi.n	2c6a2 <cmp_lfn+0xa6>
   2c680:	697b      	ldr	r3, [r7, #20]
   2c682:	1c5a      	adds	r2, r3, #1
   2c684:	617a      	str	r2, [r7, #20]
   2c686:	005b      	lsls	r3, r3, #1
   2c688:	687a      	ldr	r2, [r7, #4]
   2c68a:	18d3      	adds	r3, r2, r3
   2c68c:	881b      	ldrh	r3, [r3, #0]
   2c68e:	0018      	movs	r0, r3
   2c690:	4b19      	ldr	r3, [pc, #100]	; (2c6f8 <cmp_lfn+0xfc>)
   2c692:	4798      	blx	r3
   2c694:	0003      	movs	r3, r0
   2c696:	001a      	movs	r2, r3
   2c698:	230e      	movs	r3, #14
   2c69a:	18fb      	adds	r3, r7, r3
   2c69c:	881b      	ldrh	r3, [r3, #0]
   2c69e:	4293      	cmp	r3, r2
   2c6a0:	d009      	beq.n	2c6b6 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2c6a2:	2300      	movs	r3, #0
   2c6a4:	e022      	b.n	2c6ec <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2c6a6:	230c      	movs	r3, #12
   2c6a8:	18fb      	adds	r3, r7, r3
   2c6aa:	881b      	ldrh	r3, [r3, #0]
   2c6ac:	4a13      	ldr	r2, [pc, #76]	; (2c6fc <cmp_lfn+0x100>)
   2c6ae:	4293      	cmp	r3, r2
   2c6b0:	d001      	beq.n	2c6b6 <cmp_lfn+0xba>
   2c6b2:	2300      	movs	r3, #0
   2c6b4:	e01a      	b.n	2c6ec <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2c6b6:	693b      	ldr	r3, [r7, #16]
   2c6b8:	3301      	adds	r3, #1
   2c6ba:	613b      	str	r3, [r7, #16]
   2c6bc:	693b      	ldr	r3, [r7, #16]
   2c6be:	2b0c      	cmp	r3, #12
   2c6c0:	d9b4      	bls.n	2c62c <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2c6c2:	683b      	ldr	r3, [r7, #0]
   2c6c4:	781b      	ldrb	r3, [r3, #0]
   2c6c6:	001a      	movs	r2, r3
   2c6c8:	2340      	movs	r3, #64	; 0x40
   2c6ca:	4013      	ands	r3, r2
   2c6cc:	d00d      	beq.n	2c6ea <cmp_lfn+0xee>
   2c6ce:	230e      	movs	r3, #14
   2c6d0:	18fb      	adds	r3, r7, r3
   2c6d2:	881b      	ldrh	r3, [r3, #0]
   2c6d4:	2b00      	cmp	r3, #0
   2c6d6:	d008      	beq.n	2c6ea <cmp_lfn+0xee>
   2c6d8:	697b      	ldr	r3, [r7, #20]
   2c6da:	005b      	lsls	r3, r3, #1
   2c6dc:	687a      	ldr	r2, [r7, #4]
   2c6de:	18d3      	adds	r3, r2, r3
   2c6e0:	881b      	ldrh	r3, [r3, #0]
   2c6e2:	2b00      	cmp	r3, #0
   2c6e4:	d001      	beq.n	2c6ea <cmp_lfn+0xee>
		return 0;
   2c6e6:	2300      	movs	r3, #0
   2c6e8:	e000      	b.n	2c6ec <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2c6ea:	2301      	movs	r3, #1
}
   2c6ec:	0018      	movs	r0, r3
   2c6ee:	46bd      	mov	sp, r7
   2c6f0:	b007      	add	sp, #28
   2c6f2:	bd90      	pop	{r4, r7, pc}
   2c6f4:	000396fc 	.word	0x000396fc
   2c6f8:	0002e651 	.word	0x0002e651
   2c6fc:	0000ffff 	.word	0x0000ffff

0002c700 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2c700:	b580      	push	{r7, lr}
   2c702:	b088      	sub	sp, #32
   2c704:	af00      	add	r7, sp, #0
   2c706:	60f8      	str	r0, [r7, #12]
   2c708:	60b9      	str	r1, [r7, #8]
   2c70a:	0019      	movs	r1, r3
   2c70c:	1dfb      	adds	r3, r7, #7
   2c70e:	701a      	strb	r2, [r3, #0]
   2c710:	1dbb      	adds	r3, r7, #6
   2c712:	1c0a      	adds	r2, r1, #0
   2c714:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2c716:	68bb      	ldr	r3, [r7, #8]
   2c718:	330d      	adds	r3, #13
   2c71a:	1dba      	adds	r2, r7, #6
   2c71c:	7812      	ldrb	r2, [r2, #0]
   2c71e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2c720:	68bb      	ldr	r3, [r7, #8]
   2c722:	330b      	adds	r3, #11
   2c724:	220f      	movs	r2, #15
   2c726:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2c728:	68bb      	ldr	r3, [r7, #8]
   2c72a:	330c      	adds	r3, #12
   2c72c:	2200      	movs	r2, #0
   2c72e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2c730:	68bb      	ldr	r3, [r7, #8]
   2c732:	331a      	adds	r3, #26
   2c734:	2200      	movs	r2, #0
   2c736:	701a      	strb	r2, [r3, #0]
   2c738:	68bb      	ldr	r3, [r7, #8]
   2c73a:	331b      	adds	r3, #27
   2c73c:	2200      	movs	r2, #0
   2c73e:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2c740:	1dfb      	adds	r3, r7, #7
   2c742:	781b      	ldrb	r3, [r3, #0]
   2c744:	1e5a      	subs	r2, r3, #1
   2c746:	0013      	movs	r3, r2
   2c748:	005b      	lsls	r3, r3, #1
   2c74a:	189b      	adds	r3, r3, r2
   2c74c:	009b      	lsls	r3, r3, #2
   2c74e:	189b      	adds	r3, r3, r2
   2c750:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2c752:	2316      	movs	r3, #22
   2c754:	18fb      	adds	r3, r7, r3
   2c756:	2200      	movs	r2, #0
   2c758:	801a      	strh	r2, [r3, #0]
   2c75a:	2300      	movs	r3, #0
   2c75c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2c75e:	2316      	movs	r3, #22
   2c760:	18fb      	adds	r3, r7, r3
   2c762:	881b      	ldrh	r3, [r3, #0]
   2c764:	4a28      	ldr	r2, [pc, #160]	; (2c808 <fit_lfn+0x108>)
   2c766:	4293      	cmp	r3, r2
   2c768:	d009      	beq.n	2c77e <fit_lfn+0x7e>
   2c76a:	69fb      	ldr	r3, [r7, #28]
   2c76c:	1c5a      	adds	r2, r3, #1
   2c76e:	61fa      	str	r2, [r7, #28]
   2c770:	005b      	lsls	r3, r3, #1
   2c772:	68fa      	ldr	r2, [r7, #12]
   2c774:	18d2      	adds	r2, r2, r3
   2c776:	2316      	movs	r3, #22
   2c778:	18fb      	adds	r3, r7, r3
   2c77a:	8812      	ldrh	r2, [r2, #0]
   2c77c:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2c77e:	4a23      	ldr	r2, [pc, #140]	; (2c80c <fit_lfn+0x10c>)
   2c780:	69bb      	ldr	r3, [r7, #24]
   2c782:	18d3      	adds	r3, r2, r3
   2c784:	781b      	ldrb	r3, [r3, #0]
   2c786:	001a      	movs	r2, r3
   2c788:	68bb      	ldr	r3, [r7, #8]
   2c78a:	189b      	adds	r3, r3, r2
   2c78c:	2216      	movs	r2, #22
   2c78e:	18ba      	adds	r2, r7, r2
   2c790:	8812      	ldrh	r2, [r2, #0]
   2c792:	b2d2      	uxtb	r2, r2
   2c794:	701a      	strb	r2, [r3, #0]
   2c796:	4a1d      	ldr	r2, [pc, #116]	; (2c80c <fit_lfn+0x10c>)
   2c798:	69bb      	ldr	r3, [r7, #24]
   2c79a:	18d3      	adds	r3, r2, r3
   2c79c:	781b      	ldrb	r3, [r3, #0]
   2c79e:	3301      	adds	r3, #1
   2c7a0:	68ba      	ldr	r2, [r7, #8]
   2c7a2:	18d3      	adds	r3, r2, r3
   2c7a4:	2216      	movs	r2, #22
   2c7a6:	18ba      	adds	r2, r7, r2
   2c7a8:	8812      	ldrh	r2, [r2, #0]
   2c7aa:	0a12      	lsrs	r2, r2, #8
   2c7ac:	b292      	uxth	r2, r2
   2c7ae:	b2d2      	uxtb	r2, r2
   2c7b0:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2c7b2:	2316      	movs	r3, #22
   2c7b4:	18fb      	adds	r3, r7, r3
   2c7b6:	881b      	ldrh	r3, [r3, #0]
   2c7b8:	2b00      	cmp	r3, #0
   2c7ba:	d104      	bne.n	2c7c6 <fit_lfn+0xc6>
   2c7bc:	2316      	movs	r3, #22
   2c7be:	18fb      	adds	r3, r7, r3
   2c7c0:	2201      	movs	r2, #1
   2c7c2:	4252      	negs	r2, r2
   2c7c4:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2c7c6:	69bb      	ldr	r3, [r7, #24]
   2c7c8:	3301      	adds	r3, #1
   2c7ca:	61bb      	str	r3, [r7, #24]
   2c7cc:	69bb      	ldr	r3, [r7, #24]
   2c7ce:	2b0c      	cmp	r3, #12
   2c7d0:	d9c5      	bls.n	2c75e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2c7d2:	2316      	movs	r3, #22
   2c7d4:	18fb      	adds	r3, r7, r3
   2c7d6:	881b      	ldrh	r3, [r3, #0]
   2c7d8:	4a0b      	ldr	r2, [pc, #44]	; (2c808 <fit_lfn+0x108>)
   2c7da:	4293      	cmp	r3, r2
   2c7dc:	d006      	beq.n	2c7ec <fit_lfn+0xec>
   2c7de:	69fb      	ldr	r3, [r7, #28]
   2c7e0:	005b      	lsls	r3, r3, #1
   2c7e2:	68fa      	ldr	r2, [r7, #12]
   2c7e4:	18d3      	adds	r3, r2, r3
   2c7e6:	881b      	ldrh	r3, [r3, #0]
   2c7e8:	2b00      	cmp	r3, #0
   2c7ea:	d105      	bne.n	2c7f8 <fit_lfn+0xf8>
   2c7ec:	1dfb      	adds	r3, r7, #7
   2c7ee:	1dfa      	adds	r2, r7, #7
   2c7f0:	7812      	ldrb	r2, [r2, #0]
   2c7f2:	2140      	movs	r1, #64	; 0x40
   2c7f4:	430a      	orrs	r2, r1
   2c7f6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2c7f8:	68bb      	ldr	r3, [r7, #8]
   2c7fa:	1dfa      	adds	r2, r7, #7
   2c7fc:	7812      	ldrb	r2, [r2, #0]
   2c7fe:	701a      	strb	r2, [r3, #0]
}
   2c800:	46c0      	nop			; (mov r8, r8)
   2c802:	46bd      	mov	sp, r7
   2c804:	b008      	add	sp, #32
   2c806:	bd80      	pop	{r7, pc}
   2c808:	0000ffff 	.word	0x0000ffff
   2c80c:	000396fc 	.word	0x000396fc

0002c810 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2c810:	b580      	push	{r7, lr}
   2c812:	b08a      	sub	sp, #40	; 0x28
   2c814:	af00      	add	r7, sp, #0
   2c816:	60f8      	str	r0, [r7, #12]
   2c818:	60b9      	str	r1, [r7, #8]
   2c81a:	607a      	str	r2, [r7, #4]
   2c81c:	001a      	movs	r2, r3
   2c81e:	1cbb      	adds	r3, r7, #2
   2c820:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2c822:	68b9      	ldr	r1, [r7, #8]
   2c824:	68fb      	ldr	r3, [r7, #12]
   2c826:	220b      	movs	r2, #11
   2c828:	0018      	movs	r0, r3
   2c82a:	4b38      	ldr	r3, [pc, #224]	; (2c90c <gen_numname+0xfc>)
   2c82c:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2c82e:	1cbb      	adds	r3, r7, #2
   2c830:	881b      	ldrh	r3, [r3, #0]
   2c832:	2b05      	cmp	r3, #5
   2c834:	d911      	bls.n	2c85a <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2c836:	1cbb      	adds	r3, r7, #2
   2c838:	881b      	ldrh	r3, [r3, #0]
   2c83a:	b29a      	uxth	r2, r3
   2c83c:	0852      	lsrs	r2, r2, #1
   2c83e:	03db      	lsls	r3, r3, #15
   2c840:	4313      	orrs	r3, r2
   2c842:	b299      	uxth	r1, r3
   2c844:	687b      	ldr	r3, [r7, #4]
   2c846:	1c9a      	adds	r2, r3, #2
   2c848:	607a      	str	r2, [r7, #4]
   2c84a:	881a      	ldrh	r2, [r3, #0]
   2c84c:	1cbb      	adds	r3, r7, #2
   2c84e:	188a      	adds	r2, r1, r2
   2c850:	801a      	strh	r2, [r3, #0]
   2c852:	687b      	ldr	r3, [r7, #4]
   2c854:	881b      	ldrh	r3, [r3, #0]
   2c856:	2b00      	cmp	r3, #0
   2c858:	d1ed      	bne.n	2c836 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2c85a:	2307      	movs	r3, #7
   2c85c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2c85e:	1cbb      	adds	r3, r7, #2
   2c860:	881b      	ldrh	r3, [r3, #0]
   2c862:	b2db      	uxtb	r3, r3
   2c864:	220f      	movs	r2, #15
   2c866:	4013      	ands	r3, r2
   2c868:	b2da      	uxtb	r2, r3
   2c86a:	2327      	movs	r3, #39	; 0x27
   2c86c:	18fb      	adds	r3, r7, r3
   2c86e:	3230      	adds	r2, #48	; 0x30
   2c870:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2c872:	2327      	movs	r3, #39	; 0x27
   2c874:	18fb      	adds	r3, r7, r3
   2c876:	781b      	ldrb	r3, [r3, #0]
   2c878:	2b39      	cmp	r3, #57	; 0x39
   2c87a:	d906      	bls.n	2c88a <gen_numname+0x7a>
   2c87c:	2327      	movs	r3, #39	; 0x27
   2c87e:	18fb      	adds	r3, r7, r3
   2c880:	2227      	movs	r2, #39	; 0x27
   2c882:	18ba      	adds	r2, r7, r2
   2c884:	7812      	ldrb	r2, [r2, #0]
   2c886:	3207      	adds	r2, #7
   2c888:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2c88a:	6a3b      	ldr	r3, [r7, #32]
   2c88c:	1e5a      	subs	r2, r3, #1
   2c88e:	623a      	str	r2, [r7, #32]
   2c890:	2214      	movs	r2, #20
   2c892:	18ba      	adds	r2, r7, r2
   2c894:	2127      	movs	r1, #39	; 0x27
   2c896:	1879      	adds	r1, r7, r1
   2c898:	7809      	ldrb	r1, [r1, #0]
   2c89a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2c89c:	1cbb      	adds	r3, r7, #2
   2c89e:	1cba      	adds	r2, r7, #2
   2c8a0:	8812      	ldrh	r2, [r2, #0]
   2c8a2:	0912      	lsrs	r2, r2, #4
   2c8a4:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2c8a6:	1cbb      	adds	r3, r7, #2
   2c8a8:	881b      	ldrh	r3, [r3, #0]
   2c8aa:	2b00      	cmp	r3, #0
   2c8ac:	d1d7      	bne.n	2c85e <gen_numname+0x4e>
	ns[i] = '~';
   2c8ae:	2314      	movs	r3, #20
   2c8b0:	18fa      	adds	r2, r7, r3
   2c8b2:	6a3b      	ldr	r3, [r7, #32]
   2c8b4:	18d3      	adds	r3, r2, r3
   2c8b6:	227e      	movs	r2, #126	; 0x7e
   2c8b8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2c8ba:	2300      	movs	r3, #0
   2c8bc:	61fb      	str	r3, [r7, #28]
   2c8be:	e002      	b.n	2c8c6 <gen_numname+0xb6>
   2c8c0:	69fb      	ldr	r3, [r7, #28]
   2c8c2:	3301      	adds	r3, #1
   2c8c4:	61fb      	str	r3, [r7, #28]
   2c8c6:	69fa      	ldr	r2, [r7, #28]
   2c8c8:	6a3b      	ldr	r3, [r7, #32]
   2c8ca:	429a      	cmp	r2, r3
   2c8cc:	d205      	bcs.n	2c8da <gen_numname+0xca>
   2c8ce:	68fa      	ldr	r2, [r7, #12]
   2c8d0:	69fb      	ldr	r3, [r7, #28]
   2c8d2:	18d3      	adds	r3, r2, r3
   2c8d4:	781b      	ldrb	r3, [r3, #0]
   2c8d6:	2b20      	cmp	r3, #32
   2c8d8:	d1f2      	bne.n	2c8c0 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2c8da:	69fb      	ldr	r3, [r7, #28]
   2c8dc:	1c5a      	adds	r2, r3, #1
   2c8de:	61fa      	str	r2, [r7, #28]
   2c8e0:	68fa      	ldr	r2, [r7, #12]
   2c8e2:	18d2      	adds	r2, r2, r3
   2c8e4:	6a3b      	ldr	r3, [r7, #32]
   2c8e6:	2b07      	cmp	r3, #7
   2c8e8:	d806      	bhi.n	2c8f8 <gen_numname+0xe8>
   2c8ea:	6a3b      	ldr	r3, [r7, #32]
   2c8ec:	1c59      	adds	r1, r3, #1
   2c8ee:	6239      	str	r1, [r7, #32]
   2c8f0:	2114      	movs	r1, #20
   2c8f2:	1879      	adds	r1, r7, r1
   2c8f4:	5ccb      	ldrb	r3, [r1, r3]
   2c8f6:	e000      	b.n	2c8fa <gen_numname+0xea>
   2c8f8:	2320      	movs	r3, #32
   2c8fa:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2c8fc:	69fb      	ldr	r3, [r7, #28]
   2c8fe:	2b07      	cmp	r3, #7
   2c900:	d9eb      	bls.n	2c8da <gen_numname+0xca>
}
   2c902:	46c0      	nop			; (mov r8, r8)
   2c904:	46bd      	mov	sp, r7
   2c906:	b00a      	add	sp, #40	; 0x28
   2c908:	bd80      	pop	{r7, pc}
   2c90a:	46c0      	nop			; (mov r8, r8)
   2c90c:	0002b9b5 	.word	0x0002b9b5

0002c910 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2c910:	b580      	push	{r7, lr}
   2c912:	b084      	sub	sp, #16
   2c914:	af00      	add	r7, sp, #0
   2c916:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2c918:	230f      	movs	r3, #15
   2c91a:	18fb      	adds	r3, r7, r3
   2c91c:	2200      	movs	r2, #0
   2c91e:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2c920:	230b      	movs	r3, #11
   2c922:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2c924:	230f      	movs	r3, #15
   2c926:	18fb      	adds	r3, r7, r3
   2c928:	781b      	ldrb	r3, [r3, #0]
   2c92a:	b2da      	uxtb	r2, r3
   2c92c:	0852      	lsrs	r2, r2, #1
   2c92e:	01db      	lsls	r3, r3, #7
   2c930:	4313      	orrs	r3, r2
   2c932:	b2d9      	uxtb	r1, r3
   2c934:	687b      	ldr	r3, [r7, #4]
   2c936:	1c5a      	adds	r2, r3, #1
   2c938:	607a      	str	r2, [r7, #4]
   2c93a:	781a      	ldrb	r2, [r3, #0]
   2c93c:	230f      	movs	r3, #15
   2c93e:	18fb      	adds	r3, r7, r3
   2c940:	188a      	adds	r2, r1, r2
   2c942:	701a      	strb	r2, [r3, #0]
   2c944:	68bb      	ldr	r3, [r7, #8]
   2c946:	3b01      	subs	r3, #1
   2c948:	60bb      	str	r3, [r7, #8]
   2c94a:	68bb      	ldr	r3, [r7, #8]
   2c94c:	2b00      	cmp	r3, #0
   2c94e:	d1e9      	bne.n	2c924 <sum_sfn+0x14>
	return sum;
   2c950:	230f      	movs	r3, #15
   2c952:	18fb      	adds	r3, r7, r3
   2c954:	781b      	ldrb	r3, [r3, #0]
}
   2c956:	0018      	movs	r0, r3
   2c958:	46bd      	mov	sp, r7
   2c95a:	b004      	add	sp, #16
   2c95c:	bd80      	pop	{r7, pc}
	...

0002c960 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2c960:	b590      	push	{r4, r7, lr}
   2c962:	b087      	sub	sp, #28
   2c964:	af00      	add	r7, sp, #0
   2c966:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2c968:	2317      	movs	r3, #23
   2c96a:	18fc      	adds	r4, r7, r3
   2c96c:	687b      	ldr	r3, [r7, #4]
   2c96e:	2100      	movs	r1, #0
   2c970:	0018      	movs	r0, r3
   2c972:	4b74      	ldr	r3, [pc, #464]	; (2cb44 <dir_find+0x1e4>)
   2c974:	4798      	blx	r3
   2c976:	0003      	movs	r3, r0
   2c978:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2c97a:	2317      	movs	r3, #23
   2c97c:	18fb      	adds	r3, r7, r3
   2c97e:	781b      	ldrb	r3, [r3, #0]
   2c980:	2b00      	cmp	r3, #0
   2c982:	d003      	beq.n	2c98c <dir_find+0x2c>
   2c984:	2317      	movs	r3, #23
   2c986:	18fb      	adds	r3, r7, r3
   2c988:	781b      	ldrb	r3, [r3, #0]
   2c98a:	e0d6      	b.n	2cb3a <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2c98c:	2314      	movs	r3, #20
   2c98e:	18fb      	adds	r3, r7, r3
   2c990:	22ff      	movs	r2, #255	; 0xff
   2c992:	701a      	strb	r2, [r3, #0]
   2c994:	2315      	movs	r3, #21
   2c996:	18fb      	adds	r3, r7, r3
   2c998:	2214      	movs	r2, #20
   2c99a:	18ba      	adds	r2, r7, r2
   2c99c:	7812      	ldrb	r2, [r2, #0]
   2c99e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2c9a0:	687b      	ldr	r3, [r7, #4]
   2c9a2:	681a      	ldr	r2, [r3, #0]
   2c9a4:	687b      	ldr	r3, [r7, #4]
   2c9a6:	691b      	ldr	r3, [r3, #16]
   2c9a8:	2117      	movs	r1, #23
   2c9aa:	187c      	adds	r4, r7, r1
   2c9ac:	0019      	movs	r1, r3
   2c9ae:	0010      	movs	r0, r2
   2c9b0:	4b65      	ldr	r3, [pc, #404]	; (2cb48 <dir_find+0x1e8>)
   2c9b2:	4798      	blx	r3
   2c9b4:	0003      	movs	r3, r0
   2c9b6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2c9b8:	2317      	movs	r3, #23
   2c9ba:	18fb      	adds	r3, r7, r3
   2c9bc:	781b      	ldrb	r3, [r3, #0]
   2c9be:	2b00      	cmp	r3, #0
   2c9c0:	d000      	beq.n	2c9c4 <dir_find+0x64>
   2c9c2:	e0b2      	b.n	2cb2a <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2c9c4:	687b      	ldr	r3, [r7, #4]
   2c9c6:	695b      	ldr	r3, [r3, #20]
   2c9c8:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2c9ca:	2316      	movs	r3, #22
   2c9cc:	18fb      	adds	r3, r7, r3
   2c9ce:	693a      	ldr	r2, [r7, #16]
   2c9d0:	7812      	ldrb	r2, [r2, #0]
   2c9d2:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2c9d4:	2316      	movs	r3, #22
   2c9d6:	18fb      	adds	r3, r7, r3
   2c9d8:	781b      	ldrb	r3, [r3, #0]
   2c9da:	2b00      	cmp	r3, #0
   2c9dc:	d104      	bne.n	2c9e8 <dir_find+0x88>
   2c9de:	2317      	movs	r3, #23
   2c9e0:	18fb      	adds	r3, r7, r3
   2c9e2:	2204      	movs	r2, #4
   2c9e4:	701a      	strb	r2, [r3, #0]
   2c9e6:	e0a5      	b.n	2cb34 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2c9e8:	693b      	ldr	r3, [r7, #16]
   2c9ea:	330b      	adds	r3, #11
   2c9ec:	781a      	ldrb	r2, [r3, #0]
   2c9ee:	230f      	movs	r3, #15
   2c9f0:	18fb      	adds	r3, r7, r3
   2c9f2:	213f      	movs	r1, #63	; 0x3f
   2c9f4:	400a      	ands	r2, r1
   2c9f6:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2c9f8:	2316      	movs	r3, #22
   2c9fa:	18fb      	adds	r3, r7, r3
   2c9fc:	781b      	ldrb	r3, [r3, #0]
   2c9fe:	2be5      	cmp	r3, #229	; 0xe5
   2ca00:	d00a      	beq.n	2ca18 <dir_find+0xb8>
   2ca02:	230f      	movs	r3, #15
   2ca04:	18fb      	adds	r3, r7, r3
   2ca06:	781b      	ldrb	r3, [r3, #0]
   2ca08:	2208      	movs	r2, #8
   2ca0a:	4013      	ands	r3, r2
   2ca0c:	d009      	beq.n	2ca22 <dir_find+0xc2>
   2ca0e:	230f      	movs	r3, #15
   2ca10:	18fb      	adds	r3, r7, r3
   2ca12:	781b      	ldrb	r3, [r3, #0]
   2ca14:	2b0f      	cmp	r3, #15
   2ca16:	d004      	beq.n	2ca22 <dir_find+0xc2>
			ord = 0xFF;
   2ca18:	2315      	movs	r3, #21
   2ca1a:	18fb      	adds	r3, r7, r3
   2ca1c:	22ff      	movs	r2, #255	; 0xff
   2ca1e:	701a      	strb	r2, [r3, #0]
   2ca20:	e073      	b.n	2cb0a <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2ca22:	230f      	movs	r3, #15
   2ca24:	18fb      	adds	r3, r7, r3
   2ca26:	781b      	ldrb	r3, [r3, #0]
   2ca28:	2b0f      	cmp	r3, #15
   2ca2a:	d145      	bne.n	2cab8 <dir_find+0x158>
				if (dj->lfn) {
   2ca2c:	687b      	ldr	r3, [r7, #4]
   2ca2e:	69db      	ldr	r3, [r3, #28]
   2ca30:	2b00      	cmp	r3, #0
   2ca32:	d100      	bne.n	2ca36 <dir_find+0xd6>
   2ca34:	e069      	b.n	2cb0a <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2ca36:	2316      	movs	r3, #22
   2ca38:	18fb      	adds	r3, r7, r3
   2ca3a:	781b      	ldrb	r3, [r3, #0]
   2ca3c:	2240      	movs	r2, #64	; 0x40
   2ca3e:	4013      	ands	r3, r2
   2ca40:	d016      	beq.n	2ca70 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2ca42:	2314      	movs	r3, #20
   2ca44:	18fb      	adds	r3, r7, r3
   2ca46:	693a      	ldr	r2, [r7, #16]
   2ca48:	7b52      	ldrb	r2, [r2, #13]
   2ca4a:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2ca4c:	2316      	movs	r3, #22
   2ca4e:	18fb      	adds	r3, r7, r3
   2ca50:	2216      	movs	r2, #22
   2ca52:	18ba      	adds	r2, r7, r2
   2ca54:	7812      	ldrb	r2, [r2, #0]
   2ca56:	2140      	movs	r1, #64	; 0x40
   2ca58:	438a      	bics	r2, r1
   2ca5a:	701a      	strb	r2, [r3, #0]
   2ca5c:	2315      	movs	r3, #21
   2ca5e:	18fb      	adds	r3, r7, r3
   2ca60:	2216      	movs	r2, #22
   2ca62:	18ba      	adds	r2, r7, r2
   2ca64:	7812      	ldrb	r2, [r2, #0]
   2ca66:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2ca68:	687b      	ldr	r3, [r7, #4]
   2ca6a:	88da      	ldrh	r2, [r3, #6]
   2ca6c:	687b      	ldr	r3, [r7, #4]
   2ca6e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2ca70:	2316      	movs	r3, #22
   2ca72:	18fa      	adds	r2, r7, r3
   2ca74:	2315      	movs	r3, #21
   2ca76:	18fb      	adds	r3, r7, r3
   2ca78:	7812      	ldrb	r2, [r2, #0]
   2ca7a:	781b      	ldrb	r3, [r3, #0]
   2ca7c:	429a      	cmp	r2, r3
   2ca7e:	d116      	bne.n	2caae <dir_find+0x14e>
   2ca80:	693b      	ldr	r3, [r7, #16]
   2ca82:	330d      	adds	r3, #13
   2ca84:	781b      	ldrb	r3, [r3, #0]
   2ca86:	2214      	movs	r2, #20
   2ca88:	18ba      	adds	r2, r7, r2
   2ca8a:	7812      	ldrb	r2, [r2, #0]
   2ca8c:	429a      	cmp	r2, r3
   2ca8e:	d10e      	bne.n	2caae <dir_find+0x14e>
   2ca90:	687b      	ldr	r3, [r7, #4]
   2ca92:	69db      	ldr	r3, [r3, #28]
   2ca94:	693a      	ldr	r2, [r7, #16]
   2ca96:	0011      	movs	r1, r2
   2ca98:	0018      	movs	r0, r3
   2ca9a:	4b2c      	ldr	r3, [pc, #176]	; (2cb4c <dir_find+0x1ec>)
   2ca9c:	4798      	blx	r3
   2ca9e:	1e03      	subs	r3, r0, #0
   2caa0:	d005      	beq.n	2caae <dir_find+0x14e>
   2caa2:	2315      	movs	r3, #21
   2caa4:	18fb      	adds	r3, r7, r3
   2caa6:	781b      	ldrb	r3, [r3, #0]
   2caa8:	3b01      	subs	r3, #1
   2caaa:	b2da      	uxtb	r2, r3
   2caac:	e000      	b.n	2cab0 <dir_find+0x150>
   2caae:	22ff      	movs	r2, #255	; 0xff
   2cab0:	2315      	movs	r3, #21
   2cab2:	18fb      	adds	r3, r7, r3
   2cab4:	701a      	strb	r2, [r3, #0]
   2cab6:	e028      	b.n	2cb0a <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2cab8:	2315      	movs	r3, #21
   2caba:	18fb      	adds	r3, r7, r3
   2cabc:	781b      	ldrb	r3, [r3, #0]
   2cabe:	2b00      	cmp	r3, #0
   2cac0:	d10a      	bne.n	2cad8 <dir_find+0x178>
   2cac2:	693b      	ldr	r3, [r7, #16]
   2cac4:	0018      	movs	r0, r3
   2cac6:	4b22      	ldr	r3, [pc, #136]	; (2cb50 <dir_find+0x1f0>)
   2cac8:	4798      	blx	r3
   2caca:	0003      	movs	r3, r0
   2cacc:	001a      	movs	r2, r3
   2cace:	2314      	movs	r3, #20
   2cad0:	18fb      	adds	r3, r7, r3
   2cad2:	781b      	ldrb	r3, [r3, #0]
   2cad4:	4293      	cmp	r3, r2
   2cad6:	d02a      	beq.n	2cb2e <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2cad8:	2315      	movs	r3, #21
   2cada:	18fb      	adds	r3, r7, r3
   2cadc:	22ff      	movs	r2, #255	; 0xff
   2cade:	701a      	strb	r2, [r3, #0]
   2cae0:	687b      	ldr	r3, [r7, #4]
   2cae2:	2201      	movs	r2, #1
   2cae4:	4252      	negs	r2, r2
   2cae6:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2cae8:	687b      	ldr	r3, [r7, #4]
   2caea:	699b      	ldr	r3, [r3, #24]
   2caec:	330b      	adds	r3, #11
   2caee:	781b      	ldrb	r3, [r3, #0]
   2caf0:	001a      	movs	r2, r3
   2caf2:	2301      	movs	r3, #1
   2caf4:	4013      	ands	r3, r2
   2caf6:	d108      	bne.n	2cb0a <dir_find+0x1aa>
   2caf8:	687b      	ldr	r3, [r7, #4]
   2cafa:	6999      	ldr	r1, [r3, #24]
   2cafc:	693b      	ldr	r3, [r7, #16]
   2cafe:	220b      	movs	r2, #11
   2cb00:	0018      	movs	r0, r3
   2cb02:	4b14      	ldr	r3, [pc, #80]	; (2cb54 <dir_find+0x1f4>)
   2cb04:	4798      	blx	r3
   2cb06:	1e03      	subs	r3, r0, #0
   2cb08:	d013      	beq.n	2cb32 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2cb0a:	2317      	movs	r3, #23
   2cb0c:	18fc      	adds	r4, r7, r3
   2cb0e:	687b      	ldr	r3, [r7, #4]
   2cb10:	2100      	movs	r1, #0
   2cb12:	0018      	movs	r0, r3
   2cb14:	4b10      	ldr	r3, [pc, #64]	; (2cb58 <dir_find+0x1f8>)
   2cb16:	4798      	blx	r3
   2cb18:	0003      	movs	r3, r0
   2cb1a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2cb1c:	2317      	movs	r3, #23
   2cb1e:	18fb      	adds	r3, r7, r3
   2cb20:	781b      	ldrb	r3, [r3, #0]
   2cb22:	2b00      	cmp	r3, #0
   2cb24:	d100      	bne.n	2cb28 <dir_find+0x1c8>
   2cb26:	e73b      	b.n	2c9a0 <dir_find+0x40>
   2cb28:	e004      	b.n	2cb34 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2cb2a:	46c0      	nop			; (mov r8, r8)
   2cb2c:	e002      	b.n	2cb34 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2cb2e:	46c0      	nop			; (mov r8, r8)
   2cb30:	e000      	b.n	2cb34 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2cb32:	46c0      	nop			; (mov r8, r8)

	return res;
   2cb34:	2317      	movs	r3, #23
   2cb36:	18fb      	adds	r3, r7, r3
   2cb38:	781b      	ldrb	r3, [r3, #0]
}
   2cb3a:	0018      	movs	r0, r3
   2cb3c:	46bd      	mov	sp, r7
   2cb3e:	b007      	add	sp, #28
   2cb40:	bd90      	pop	{r4, r7, pc}
   2cb42:	46c0      	nop			; (mov r8, r8)
   2cb44:	0002c2dd 	.word	0x0002c2dd
   2cb48:	0002ba99 	.word	0x0002ba99
   2cb4c:	0002c5fd 	.word	0x0002c5fd
   2cb50:	0002c911 	.word	0x0002c911
   2cb54:	0002ba1d 	.word	0x0002ba1d
   2cb58:	0002c40d 	.word	0x0002c40d

0002cb5c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2cb5c:	b590      	push	{r4, r7, lr}
   2cb5e:	b08d      	sub	sp, #52	; 0x34
   2cb60:	af00      	add	r7, sp, #0
   2cb62:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2cb64:	687b      	ldr	r3, [r7, #4]
   2cb66:	699b      	ldr	r3, [r3, #24]
   2cb68:	627b      	str	r3, [r7, #36]	; 0x24
   2cb6a:	687b      	ldr	r3, [r7, #4]
   2cb6c:	69db      	ldr	r3, [r3, #28]
   2cb6e:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2cb70:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2cb72:	230c      	movs	r3, #12
   2cb74:	18fb      	adds	r3, r7, r3
   2cb76:	220c      	movs	r2, #12
   2cb78:	0018      	movs	r0, r3
   2cb7a:	4bc8      	ldr	r3, [pc, #800]	; (2ce9c <dir_register+0x340>)
   2cb7c:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2cb7e:	230c      	movs	r3, #12
   2cb80:	18fb      	adds	r3, r7, r3
   2cb82:	7adb      	ldrb	r3, [r3, #11]
   2cb84:	001a      	movs	r2, r3
   2cb86:	2301      	movs	r3, #1
   2cb88:	4013      	ands	r3, r2
   2cb8a:	d048      	beq.n	2cc1e <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2cb8e:	330b      	adds	r3, #11
   2cb90:	2200      	movs	r2, #0
   2cb92:	701a      	strb	r2, [r3, #0]
   2cb94:	687b      	ldr	r3, [r7, #4]
   2cb96:	2200      	movs	r2, #0
   2cb98:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2cb9a:	232c      	movs	r3, #44	; 0x2c
   2cb9c:	18fb      	adds	r3, r7, r3
   2cb9e:	2201      	movs	r2, #1
   2cba0:	801a      	strh	r2, [r3, #0]
   2cba2:	e01c      	b.n	2cbde <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2cba4:	232c      	movs	r3, #44	; 0x2c
   2cba6:	18fb      	adds	r3, r7, r3
   2cba8:	881b      	ldrh	r3, [r3, #0]
   2cbaa:	6a3a      	ldr	r2, [r7, #32]
   2cbac:	210c      	movs	r1, #12
   2cbae:	1879      	adds	r1, r7, r1
   2cbb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2cbb2:	4cbb      	ldr	r4, [pc, #748]	; (2cea0 <dir_register+0x344>)
   2cbb4:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2cbb6:	232f      	movs	r3, #47	; 0x2f
   2cbb8:	18fc      	adds	r4, r7, r3
   2cbba:	687b      	ldr	r3, [r7, #4]
   2cbbc:	0018      	movs	r0, r3
   2cbbe:	4bb9      	ldr	r3, [pc, #740]	; (2cea4 <dir_register+0x348>)
   2cbc0:	4798      	blx	r3
   2cbc2:	0003      	movs	r3, r0
   2cbc4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cbc6:	232f      	movs	r3, #47	; 0x2f
   2cbc8:	18fb      	adds	r3, r7, r3
   2cbca:	781b      	ldrb	r3, [r3, #0]
   2cbcc:	2b00      	cmp	r3, #0
   2cbce:	d10c      	bne.n	2cbea <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2cbd0:	232c      	movs	r3, #44	; 0x2c
   2cbd2:	18fb      	adds	r3, r7, r3
   2cbd4:	881a      	ldrh	r2, [r3, #0]
   2cbd6:	232c      	movs	r3, #44	; 0x2c
   2cbd8:	18fb      	adds	r3, r7, r3
   2cbda:	3201      	adds	r2, #1
   2cbdc:	801a      	strh	r2, [r3, #0]
   2cbde:	232c      	movs	r3, #44	; 0x2c
   2cbe0:	18fb      	adds	r3, r7, r3
   2cbe2:	881b      	ldrh	r3, [r3, #0]
   2cbe4:	2b63      	cmp	r3, #99	; 0x63
   2cbe6:	d9dd      	bls.n	2cba4 <dir_register+0x48>
   2cbe8:	e000      	b.n	2cbec <dir_register+0x90>
			if (res != FR_OK) break;
   2cbea:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2cbec:	232c      	movs	r3, #44	; 0x2c
   2cbee:	18fb      	adds	r3, r7, r3
   2cbf0:	881b      	ldrh	r3, [r3, #0]
   2cbf2:	2b64      	cmp	r3, #100	; 0x64
   2cbf4:	d101      	bne.n	2cbfa <dir_register+0x9e>
   2cbf6:	2307      	movs	r3, #7
   2cbf8:	e14c      	b.n	2ce94 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2cbfa:	232f      	movs	r3, #47	; 0x2f
   2cbfc:	18fb      	adds	r3, r7, r3
   2cbfe:	781b      	ldrb	r3, [r3, #0]
   2cc00:	2b04      	cmp	r3, #4
   2cc02:	d003      	beq.n	2cc0c <dir_register+0xb0>
   2cc04:	232f      	movs	r3, #47	; 0x2f
   2cc06:	18fb      	adds	r3, r7, r3
   2cc08:	781b      	ldrb	r3, [r3, #0]
   2cc0a:	e143      	b.n	2ce94 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2cc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2cc0e:	330b      	adds	r3, #11
   2cc10:	220c      	movs	r2, #12
   2cc12:	18ba      	adds	r2, r7, r2
   2cc14:	7ad2      	ldrb	r2, [r2, #11]
   2cc16:	701a      	strb	r2, [r3, #0]
   2cc18:	687b      	ldr	r3, [r7, #4]
   2cc1a:	6a3a      	ldr	r2, [r7, #32]
   2cc1c:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2cc1e:	230c      	movs	r3, #12
   2cc20:	18fb      	adds	r3, r7, r3
   2cc22:	7adb      	ldrb	r3, [r3, #11]
   2cc24:	001a      	movs	r2, r3
   2cc26:	2302      	movs	r3, #2
   2cc28:	4013      	ands	r3, r2
   2cc2a:	d023      	beq.n	2cc74 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2cc2c:	232a      	movs	r3, #42	; 0x2a
   2cc2e:	18fb      	adds	r3, r7, r3
   2cc30:	2200      	movs	r2, #0
   2cc32:	801a      	strh	r2, [r3, #0]
   2cc34:	e006      	b.n	2cc44 <dir_register+0xe8>
   2cc36:	232a      	movs	r3, #42	; 0x2a
   2cc38:	18fb      	adds	r3, r7, r3
   2cc3a:	881a      	ldrh	r2, [r3, #0]
   2cc3c:	232a      	movs	r3, #42	; 0x2a
   2cc3e:	18fb      	adds	r3, r7, r3
   2cc40:	3201      	adds	r2, #1
   2cc42:	801a      	strh	r2, [r3, #0]
   2cc44:	232a      	movs	r3, #42	; 0x2a
   2cc46:	18fb      	adds	r3, r7, r3
   2cc48:	881b      	ldrh	r3, [r3, #0]
   2cc4a:	005b      	lsls	r3, r3, #1
   2cc4c:	6a3a      	ldr	r2, [r7, #32]
   2cc4e:	18d3      	adds	r3, r2, r3
   2cc50:	881b      	ldrh	r3, [r3, #0]
   2cc52:	2b00      	cmp	r3, #0
   2cc54:	d1ef      	bne.n	2cc36 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2cc56:	232a      	movs	r3, #42	; 0x2a
   2cc58:	18fb      	adds	r3, r7, r3
   2cc5a:	881b      	ldrh	r3, [r3, #0]
   2cc5c:	3319      	adds	r3, #25
   2cc5e:	001a      	movs	r2, r3
   2cc60:	4b91      	ldr	r3, [pc, #580]	; (2cea8 <dir_register+0x34c>)
   2cc62:	210d      	movs	r1, #13
   2cc64:	0010      	movs	r0, r2
   2cc66:	4798      	blx	r3
   2cc68:	0003      	movs	r3, r0
   2cc6a:	001a      	movs	r2, r3
   2cc6c:	232a      	movs	r3, #42	; 0x2a
   2cc6e:	18fb      	adds	r3, r7, r3
   2cc70:	801a      	strh	r2, [r3, #0]
   2cc72:	e003      	b.n	2cc7c <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2cc74:	232a      	movs	r3, #42	; 0x2a
   2cc76:	18fb      	adds	r3, r7, r3
   2cc78:	2201      	movs	r2, #1
   2cc7a:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2cc7c:	232f      	movs	r3, #47	; 0x2f
   2cc7e:	18fc      	adds	r4, r7, r3
   2cc80:	687b      	ldr	r3, [r7, #4]
   2cc82:	2100      	movs	r1, #0
   2cc84:	0018      	movs	r0, r3
   2cc86:	4b89      	ldr	r3, [pc, #548]	; (2ceac <dir_register+0x350>)
   2cc88:	4798      	blx	r3
   2cc8a:	0003      	movs	r3, r0
   2cc8c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2cc8e:	232f      	movs	r3, #47	; 0x2f
   2cc90:	18fb      	adds	r3, r7, r3
   2cc92:	781b      	ldrb	r3, [r3, #0]
   2cc94:	2b00      	cmp	r3, #0
   2cc96:	d003      	beq.n	2cca0 <dir_register+0x144>
   2cc98:	232f      	movs	r3, #47	; 0x2f
   2cc9a:	18fb      	adds	r3, r7, r3
   2cc9c:	781b      	ldrb	r3, [r3, #0]
   2cc9e:	e0f9      	b.n	2ce94 <dir_register+0x338>
	n = is = 0;
   2cca0:	2328      	movs	r3, #40	; 0x28
   2cca2:	18fb      	adds	r3, r7, r3
   2cca4:	2200      	movs	r2, #0
   2cca6:	801a      	strh	r2, [r3, #0]
   2cca8:	232c      	movs	r3, #44	; 0x2c
   2ccaa:	18fb      	adds	r3, r7, r3
   2ccac:	2228      	movs	r2, #40	; 0x28
   2ccae:	18ba      	adds	r2, r7, r2
   2ccb0:	8812      	ldrh	r2, [r2, #0]
   2ccb2:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2ccb4:	687b      	ldr	r3, [r7, #4]
   2ccb6:	681a      	ldr	r2, [r3, #0]
   2ccb8:	687b      	ldr	r3, [r7, #4]
   2ccba:	691b      	ldr	r3, [r3, #16]
   2ccbc:	212f      	movs	r1, #47	; 0x2f
   2ccbe:	187c      	adds	r4, r7, r1
   2ccc0:	0019      	movs	r1, r3
   2ccc2:	0010      	movs	r0, r2
   2ccc4:	4b7a      	ldr	r3, [pc, #488]	; (2ceb0 <dir_register+0x354>)
   2ccc6:	4798      	blx	r3
   2ccc8:	0003      	movs	r3, r0
   2ccca:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2cccc:	232f      	movs	r3, #47	; 0x2f
   2ccce:	18fb      	adds	r3, r7, r3
   2ccd0:	781b      	ldrb	r3, [r3, #0]
   2ccd2:	2b00      	cmp	r3, #0
   2ccd4:	d13c      	bne.n	2cd50 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2ccd6:	687b      	ldr	r3, [r7, #4]
   2ccd8:	695a      	ldr	r2, [r3, #20]
   2ccda:	231f      	movs	r3, #31
   2ccdc:	18fb      	adds	r3, r7, r3
   2ccde:	7812      	ldrb	r2, [r2, #0]
   2cce0:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2cce2:	231f      	movs	r3, #31
   2cce4:	18fb      	adds	r3, r7, r3
   2cce6:	781b      	ldrb	r3, [r3, #0]
   2cce8:	2be5      	cmp	r3, #229	; 0xe5
   2ccea:	d004      	beq.n	2ccf6 <dir_register+0x19a>
   2ccec:	231f      	movs	r3, #31
   2ccee:	18fb      	adds	r3, r7, r3
   2ccf0:	781b      	ldrb	r3, [r3, #0]
   2ccf2:	2b00      	cmp	r3, #0
   2ccf4:	d119      	bne.n	2cd2a <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2ccf6:	232c      	movs	r3, #44	; 0x2c
   2ccf8:	18fb      	adds	r3, r7, r3
   2ccfa:	881b      	ldrh	r3, [r3, #0]
   2ccfc:	2b00      	cmp	r3, #0
   2ccfe:	d104      	bne.n	2cd0a <dir_register+0x1ae>
   2cd00:	2328      	movs	r3, #40	; 0x28
   2cd02:	18fb      	adds	r3, r7, r3
   2cd04:	687a      	ldr	r2, [r7, #4]
   2cd06:	88d2      	ldrh	r2, [r2, #6]
   2cd08:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2cd0a:	232c      	movs	r3, #44	; 0x2c
   2cd0c:	18fb      	adds	r3, r7, r3
   2cd0e:	222c      	movs	r2, #44	; 0x2c
   2cd10:	18ba      	adds	r2, r7, r2
   2cd12:	8812      	ldrh	r2, [r2, #0]
   2cd14:	3201      	adds	r2, #1
   2cd16:	801a      	strh	r2, [r3, #0]
   2cd18:	232c      	movs	r3, #44	; 0x2c
   2cd1a:	18fa      	adds	r2, r7, r3
   2cd1c:	232a      	movs	r3, #42	; 0x2a
   2cd1e:	18fb      	adds	r3, r7, r3
   2cd20:	8812      	ldrh	r2, [r2, #0]
   2cd22:	881b      	ldrh	r3, [r3, #0]
   2cd24:	429a      	cmp	r2, r3
   2cd26:	d104      	bne.n	2cd32 <dir_register+0x1d6>
   2cd28:	e013      	b.n	2cd52 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2cd2a:	232c      	movs	r3, #44	; 0x2c
   2cd2c:	18fb      	adds	r3, r7, r3
   2cd2e:	2200      	movs	r2, #0
   2cd30:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2cd32:	232f      	movs	r3, #47	; 0x2f
   2cd34:	18fc      	adds	r4, r7, r3
   2cd36:	687b      	ldr	r3, [r7, #4]
   2cd38:	2101      	movs	r1, #1
   2cd3a:	0018      	movs	r0, r3
   2cd3c:	4b5d      	ldr	r3, [pc, #372]	; (2ceb4 <dir_register+0x358>)
   2cd3e:	4798      	blx	r3
   2cd40:	0003      	movs	r3, r0
   2cd42:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2cd44:	232f      	movs	r3, #47	; 0x2f
   2cd46:	18fb      	adds	r3, r7, r3
   2cd48:	781b      	ldrb	r3, [r3, #0]
   2cd4a:	2b00      	cmp	r3, #0
   2cd4c:	d0b2      	beq.n	2ccb4 <dir_register+0x158>
   2cd4e:	e000      	b.n	2cd52 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2cd50:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2cd52:	232f      	movs	r3, #47	; 0x2f
   2cd54:	18fb      	adds	r3, r7, r3
   2cd56:	781b      	ldrb	r3, [r3, #0]
   2cd58:	2b00      	cmp	r3, #0
   2cd5a:	d163      	bne.n	2ce24 <dir_register+0x2c8>
   2cd5c:	232a      	movs	r3, #42	; 0x2a
   2cd5e:	18fb      	adds	r3, r7, r3
   2cd60:	881b      	ldrh	r3, [r3, #0]
   2cd62:	2b01      	cmp	r3, #1
   2cd64:	d95e      	bls.n	2ce24 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2cd66:	232f      	movs	r3, #47	; 0x2f
   2cd68:	18fc      	adds	r4, r7, r3
   2cd6a:	2328      	movs	r3, #40	; 0x28
   2cd6c:	18fb      	adds	r3, r7, r3
   2cd6e:	881a      	ldrh	r2, [r3, #0]
   2cd70:	687b      	ldr	r3, [r7, #4]
   2cd72:	0011      	movs	r1, r2
   2cd74:	0018      	movs	r0, r3
   2cd76:	4b4d      	ldr	r3, [pc, #308]	; (2ceac <dir_register+0x350>)
   2cd78:	4798      	blx	r3
   2cd7a:	0003      	movs	r3, r0
   2cd7c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2cd7e:	232f      	movs	r3, #47	; 0x2f
   2cd80:	18fb      	adds	r3, r7, r3
   2cd82:	781b      	ldrb	r3, [r3, #0]
   2cd84:	2b00      	cmp	r3, #0
   2cd86:	d14d      	bne.n	2ce24 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2cd88:	687b      	ldr	r3, [r7, #4]
   2cd8a:	699b      	ldr	r3, [r3, #24]
   2cd8c:	221e      	movs	r2, #30
   2cd8e:	18bc      	adds	r4, r7, r2
   2cd90:	0018      	movs	r0, r3
   2cd92:	4b49      	ldr	r3, [pc, #292]	; (2ceb8 <dir_register+0x35c>)
   2cd94:	4798      	blx	r3
   2cd96:	0003      	movs	r3, r0
   2cd98:	7023      	strb	r3, [r4, #0]
			ne--;
   2cd9a:	232a      	movs	r3, #42	; 0x2a
   2cd9c:	18fb      	adds	r3, r7, r3
   2cd9e:	881a      	ldrh	r2, [r3, #0]
   2cda0:	232a      	movs	r3, #42	; 0x2a
   2cda2:	18fb      	adds	r3, r7, r3
   2cda4:	3a01      	subs	r2, #1
   2cda6:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2cda8:	687b      	ldr	r3, [r7, #4]
   2cdaa:	681a      	ldr	r2, [r3, #0]
   2cdac:	687b      	ldr	r3, [r7, #4]
   2cdae:	691b      	ldr	r3, [r3, #16]
   2cdb0:	212f      	movs	r1, #47	; 0x2f
   2cdb2:	187c      	adds	r4, r7, r1
   2cdb4:	0019      	movs	r1, r3
   2cdb6:	0010      	movs	r0, r2
   2cdb8:	4b3d      	ldr	r3, [pc, #244]	; (2ceb0 <dir_register+0x354>)
   2cdba:	4798      	blx	r3
   2cdbc:	0003      	movs	r3, r0
   2cdbe:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2cdc0:	232f      	movs	r3, #47	; 0x2f
   2cdc2:	18fb      	adds	r3, r7, r3
   2cdc4:	781b      	ldrb	r3, [r3, #0]
   2cdc6:	2b00      	cmp	r3, #0
   2cdc8:	d12b      	bne.n	2ce22 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2cdca:	687b      	ldr	r3, [r7, #4]
   2cdcc:	69d8      	ldr	r0, [r3, #28]
   2cdce:	687b      	ldr	r3, [r7, #4]
   2cdd0:	6959      	ldr	r1, [r3, #20]
   2cdd2:	232a      	movs	r3, #42	; 0x2a
   2cdd4:	18fb      	adds	r3, r7, r3
   2cdd6:	881b      	ldrh	r3, [r3, #0]
   2cdd8:	b2da      	uxtb	r2, r3
   2cdda:	231e      	movs	r3, #30
   2cddc:	18fb      	adds	r3, r7, r3
   2cdde:	781b      	ldrb	r3, [r3, #0]
   2cde0:	4c36      	ldr	r4, [pc, #216]	; (2cebc <dir_register+0x360>)
   2cde2:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2cde4:	687b      	ldr	r3, [r7, #4]
   2cde6:	681b      	ldr	r3, [r3, #0]
   2cde8:	2201      	movs	r2, #1
   2cdea:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2cdec:	232f      	movs	r3, #47	; 0x2f
   2cdee:	18fc      	adds	r4, r7, r3
   2cdf0:	687b      	ldr	r3, [r7, #4]
   2cdf2:	2100      	movs	r1, #0
   2cdf4:	0018      	movs	r0, r3
   2cdf6:	4b2f      	ldr	r3, [pc, #188]	; (2ceb4 <dir_register+0x358>)
   2cdf8:	4798      	blx	r3
   2cdfa:	0003      	movs	r3, r0
   2cdfc:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2cdfe:	232f      	movs	r3, #47	; 0x2f
   2ce00:	18fb      	adds	r3, r7, r3
   2ce02:	781b      	ldrb	r3, [r3, #0]
   2ce04:	2b00      	cmp	r3, #0
   2ce06:	d10d      	bne.n	2ce24 <dir_register+0x2c8>
   2ce08:	232a      	movs	r3, #42	; 0x2a
   2ce0a:	18fb      	adds	r3, r7, r3
   2ce0c:	222a      	movs	r2, #42	; 0x2a
   2ce0e:	18ba      	adds	r2, r7, r2
   2ce10:	8812      	ldrh	r2, [r2, #0]
   2ce12:	3a01      	subs	r2, #1
   2ce14:	801a      	strh	r2, [r3, #0]
   2ce16:	232a      	movs	r3, #42	; 0x2a
   2ce18:	18fb      	adds	r3, r7, r3
   2ce1a:	881b      	ldrh	r3, [r3, #0]
   2ce1c:	2b00      	cmp	r3, #0
   2ce1e:	d1c3      	bne.n	2cda8 <dir_register+0x24c>
   2ce20:	e000      	b.n	2ce24 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2ce22:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2ce24:	232f      	movs	r3, #47	; 0x2f
   2ce26:	18fb      	adds	r3, r7, r3
   2ce28:	781b      	ldrb	r3, [r3, #0]
   2ce2a:	2b00      	cmp	r3, #0
   2ce2c:	d12f      	bne.n	2ce8e <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2ce2e:	687b      	ldr	r3, [r7, #4]
   2ce30:	681a      	ldr	r2, [r3, #0]
   2ce32:	687b      	ldr	r3, [r7, #4]
   2ce34:	691b      	ldr	r3, [r3, #16]
   2ce36:	212f      	movs	r1, #47	; 0x2f
   2ce38:	187c      	adds	r4, r7, r1
   2ce3a:	0019      	movs	r1, r3
   2ce3c:	0010      	movs	r0, r2
   2ce3e:	4b1c      	ldr	r3, [pc, #112]	; (2ceb0 <dir_register+0x354>)
   2ce40:	4798      	blx	r3
   2ce42:	0003      	movs	r3, r0
   2ce44:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2ce46:	232f      	movs	r3, #47	; 0x2f
   2ce48:	18fb      	adds	r3, r7, r3
   2ce4a:	781b      	ldrb	r3, [r3, #0]
   2ce4c:	2b00      	cmp	r3, #0
   2ce4e:	d11e      	bne.n	2ce8e <dir_register+0x332>
			dir = dj->dir;
   2ce50:	687b      	ldr	r3, [r7, #4]
   2ce52:	695b      	ldr	r3, [r3, #20]
   2ce54:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2ce56:	69bb      	ldr	r3, [r7, #24]
   2ce58:	2220      	movs	r2, #32
   2ce5a:	2100      	movs	r1, #0
   2ce5c:	0018      	movs	r0, r3
   2ce5e:	4b18      	ldr	r3, [pc, #96]	; (2cec0 <dir_register+0x364>)
   2ce60:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2ce62:	687b      	ldr	r3, [r7, #4]
   2ce64:	6999      	ldr	r1, [r3, #24]
   2ce66:	69bb      	ldr	r3, [r7, #24]
   2ce68:	220b      	movs	r2, #11
   2ce6a:	0018      	movs	r0, r3
   2ce6c:	4b0b      	ldr	r3, [pc, #44]	; (2ce9c <dir_register+0x340>)
   2ce6e:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2ce70:	69bb      	ldr	r3, [r7, #24]
   2ce72:	330c      	adds	r3, #12
   2ce74:	001a      	movs	r2, r3
   2ce76:	687b      	ldr	r3, [r7, #4]
   2ce78:	699b      	ldr	r3, [r3, #24]
   2ce7a:	330b      	adds	r3, #11
   2ce7c:	781b      	ldrb	r3, [r3, #0]
   2ce7e:	2118      	movs	r1, #24
   2ce80:	400b      	ands	r3, r1
   2ce82:	b2db      	uxtb	r3, r3
   2ce84:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2ce86:	687b      	ldr	r3, [r7, #4]
   2ce88:	681b      	ldr	r3, [r3, #0]
   2ce8a:	2201      	movs	r2, #1
   2ce8c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2ce8e:	232f      	movs	r3, #47	; 0x2f
   2ce90:	18fb      	adds	r3, r7, r3
   2ce92:	781b      	ldrb	r3, [r3, #0]
}
   2ce94:	0018      	movs	r0, r3
   2ce96:	46bd      	mov	sp, r7
   2ce98:	b00d      	add	sp, #52	; 0x34
   2ce9a:	bd90      	pop	{r4, r7, pc}
   2ce9c:	0002b9b5 	.word	0x0002b9b5
   2cea0:	0002c811 	.word	0x0002c811
   2cea4:	0002c961 	.word	0x0002c961
   2cea8:	00032d79 	.word	0x00032d79
   2ceac:	0002c2dd 	.word	0x0002c2dd
   2ceb0:	0002ba99 	.word	0x0002ba99
   2ceb4:	0002c40d 	.word	0x0002c40d
   2ceb8:	0002c911 	.word	0x0002c911
   2cebc:	0002c701 	.word	0x0002c701
   2cec0:	0002b9ed 	.word	0x0002b9ed

0002cec4 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2cec4:	b590      	push	{r4, r7, lr}
   2cec6:	b08b      	sub	sp, #44	; 0x2c
   2cec8:	af00      	add	r7, sp, #0
   2ceca:	6078      	str	r0, [r7, #4]
   2cecc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2cece:	683b      	ldr	r3, [r7, #0]
   2ced0:	681b      	ldr	r3, [r3, #0]
   2ced2:	613b      	str	r3, [r7, #16]
   2ced4:	e002      	b.n	2cedc <create_name+0x18>
   2ced6:	693b      	ldr	r3, [r7, #16]
   2ced8:	3301      	adds	r3, #1
   2ceda:	613b      	str	r3, [r7, #16]
   2cedc:	693b      	ldr	r3, [r7, #16]
   2cede:	781b      	ldrb	r3, [r3, #0]
   2cee0:	2b2f      	cmp	r3, #47	; 0x2f
   2cee2:	d0f8      	beq.n	2ced6 <create_name+0x12>
   2cee4:	693b      	ldr	r3, [r7, #16]
   2cee6:	781b      	ldrb	r3, [r3, #0]
   2cee8:	2b5c      	cmp	r3, #92	; 0x5c
   2ceea:	d0f4      	beq.n	2ced6 <create_name+0x12>
	lfn = dj->lfn;
   2ceec:	687b      	ldr	r3, [r7, #4]
   2ceee:	69db      	ldr	r3, [r3, #28]
   2cef0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2cef2:	2300      	movs	r3, #0
   2cef4:	617b      	str	r3, [r7, #20]
   2cef6:	697b      	ldr	r3, [r7, #20]
   2cef8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2cefa:	69bb      	ldr	r3, [r7, #24]
   2cefc:	1c5a      	adds	r2, r3, #1
   2cefe:	61ba      	str	r2, [r7, #24]
   2cf00:	693a      	ldr	r2, [r7, #16]
   2cf02:	18d3      	adds	r3, r2, r3
   2cf04:	781a      	ldrb	r2, [r3, #0]
   2cf06:	2324      	movs	r3, #36	; 0x24
   2cf08:	18fb      	adds	r3, r7, r3
   2cf0a:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2cf0c:	2324      	movs	r3, #36	; 0x24
   2cf0e:	18fb      	adds	r3, r7, r3
   2cf10:	881b      	ldrh	r3, [r3, #0]
   2cf12:	2b1f      	cmp	r3, #31
   2cf14:	d944      	bls.n	2cfa0 <create_name+0xdc>
   2cf16:	2324      	movs	r3, #36	; 0x24
   2cf18:	18fb      	adds	r3, r7, r3
   2cf1a:	881b      	ldrh	r3, [r3, #0]
   2cf1c:	2b2f      	cmp	r3, #47	; 0x2f
   2cf1e:	d03f      	beq.n	2cfa0 <create_name+0xdc>
   2cf20:	2324      	movs	r3, #36	; 0x24
   2cf22:	18fb      	adds	r3, r7, r3
   2cf24:	881b      	ldrh	r3, [r3, #0]
   2cf26:	2b5c      	cmp	r3, #92	; 0x5c
   2cf28:	d03a      	beq.n	2cfa0 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2cf2a:	697b      	ldr	r3, [r7, #20]
   2cf2c:	2bfe      	cmp	r3, #254	; 0xfe
   2cf2e:	d901      	bls.n	2cf34 <create_name+0x70>
			return FR_INVALID_NAME;
   2cf30:	2306      	movs	r3, #6
   2cf32:	e1e7      	b.n	2d304 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2cf34:	2324      	movs	r3, #36	; 0x24
   2cf36:	18fb      	adds	r3, r7, r3
   2cf38:	2224      	movs	r2, #36	; 0x24
   2cf3a:	18ba      	adds	r2, r7, r2
   2cf3c:	8812      	ldrh	r2, [r2, #0]
   2cf3e:	21ff      	movs	r1, #255	; 0xff
   2cf40:	400a      	ands	r2, r1
   2cf42:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2cf44:	2324      	movs	r3, #36	; 0x24
   2cf46:	18fc      	adds	r4, r7, r3
   2cf48:	2324      	movs	r3, #36	; 0x24
   2cf4a:	18fb      	adds	r3, r7, r3
   2cf4c:	881b      	ldrh	r3, [r3, #0]
   2cf4e:	2101      	movs	r1, #1
   2cf50:	0018      	movs	r0, r3
   2cf52:	4bba      	ldr	r3, [pc, #744]	; (2d23c <create_name+0x378>)
   2cf54:	4798      	blx	r3
   2cf56:	0003      	movs	r3, r0
   2cf58:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2cf5a:	2324      	movs	r3, #36	; 0x24
   2cf5c:	18fb      	adds	r3, r7, r3
   2cf5e:	881b      	ldrh	r3, [r3, #0]
   2cf60:	2b00      	cmp	r3, #0
   2cf62:	d101      	bne.n	2cf68 <create_name+0xa4>
   2cf64:	2306      	movs	r3, #6
   2cf66:	e1cd      	b.n	2d304 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2cf68:	2324      	movs	r3, #36	; 0x24
   2cf6a:	18fb      	adds	r3, r7, r3
   2cf6c:	881b      	ldrh	r3, [r3, #0]
   2cf6e:	2b7f      	cmp	r3, #127	; 0x7f
   2cf70:	d80b      	bhi.n	2cf8a <create_name+0xc6>
   2cf72:	2324      	movs	r3, #36	; 0x24
   2cf74:	18fb      	adds	r3, r7, r3
   2cf76:	881a      	ldrh	r2, [r3, #0]
   2cf78:	4bb1      	ldr	r3, [pc, #708]	; (2d240 <create_name+0x37c>)
   2cf7a:	0011      	movs	r1, r2
   2cf7c:	0018      	movs	r0, r3
   2cf7e:	4bb1      	ldr	r3, [pc, #708]	; (2d244 <create_name+0x380>)
   2cf80:	4798      	blx	r3
   2cf82:	1e03      	subs	r3, r0, #0
   2cf84:	d001      	beq.n	2cf8a <create_name+0xc6>
			return FR_INVALID_NAME;
   2cf86:	2306      	movs	r3, #6
   2cf88:	e1bc      	b.n	2d304 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2cf8a:	697b      	ldr	r3, [r7, #20]
   2cf8c:	1c5a      	adds	r2, r3, #1
   2cf8e:	617a      	str	r2, [r7, #20]
   2cf90:	005b      	lsls	r3, r3, #1
   2cf92:	68fa      	ldr	r2, [r7, #12]
   2cf94:	18d3      	adds	r3, r2, r3
   2cf96:	2224      	movs	r2, #36	; 0x24
   2cf98:	18ba      	adds	r2, r7, r2
   2cf9a:	8812      	ldrh	r2, [r2, #0]
   2cf9c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2cf9e:	e7ac      	b.n	2cefa <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2cfa0:	693a      	ldr	r2, [r7, #16]
   2cfa2:	69bb      	ldr	r3, [r7, #24]
   2cfa4:	18d2      	adds	r2, r2, r3
   2cfa6:	683b      	ldr	r3, [r7, #0]
   2cfa8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2cfaa:	2324      	movs	r3, #36	; 0x24
   2cfac:	18fb      	adds	r3, r7, r3
   2cfae:	881b      	ldrh	r3, [r3, #0]
   2cfb0:	2b1f      	cmp	r3, #31
   2cfb2:	d801      	bhi.n	2cfb8 <create_name+0xf4>
   2cfb4:	2204      	movs	r2, #4
   2cfb6:	e000      	b.n	2cfba <create_name+0xf6>
   2cfb8:	2200      	movs	r2, #0
   2cfba:	2326      	movs	r3, #38	; 0x26
   2cfbc:	18fb      	adds	r3, r7, r3
   2cfbe:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2cfc0:	e017      	b.n	2cff2 <create_name+0x12e>
		w = lfn[di-1];
   2cfc2:	697b      	ldr	r3, [r7, #20]
   2cfc4:	4aa0      	ldr	r2, [pc, #640]	; (2d248 <create_name+0x384>)
   2cfc6:	4694      	mov	ip, r2
   2cfc8:	4463      	add	r3, ip
   2cfca:	005b      	lsls	r3, r3, #1
   2cfcc:	68fa      	ldr	r2, [r7, #12]
   2cfce:	18d2      	adds	r2, r2, r3
   2cfd0:	2324      	movs	r3, #36	; 0x24
   2cfd2:	18fb      	adds	r3, r7, r3
   2cfd4:	8812      	ldrh	r2, [r2, #0]
   2cfd6:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2cfd8:	2324      	movs	r3, #36	; 0x24
   2cfda:	18fb      	adds	r3, r7, r3
   2cfdc:	881b      	ldrh	r3, [r3, #0]
   2cfde:	2b20      	cmp	r3, #32
   2cfe0:	d004      	beq.n	2cfec <create_name+0x128>
   2cfe2:	2324      	movs	r3, #36	; 0x24
   2cfe4:	18fb      	adds	r3, r7, r3
   2cfe6:	881b      	ldrh	r3, [r3, #0]
   2cfe8:	2b2e      	cmp	r3, #46	; 0x2e
   2cfea:	d106      	bne.n	2cffa <create_name+0x136>
		di--;
   2cfec:	697b      	ldr	r3, [r7, #20]
   2cfee:	3b01      	subs	r3, #1
   2cff0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2cff2:	697b      	ldr	r3, [r7, #20]
   2cff4:	2b00      	cmp	r3, #0
   2cff6:	d1e4      	bne.n	2cfc2 <create_name+0xfe>
   2cff8:	e000      	b.n	2cffc <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2cffa:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2cffc:	697b      	ldr	r3, [r7, #20]
   2cffe:	2b00      	cmp	r3, #0
   2d000:	d101      	bne.n	2d006 <create_name+0x142>
   2d002:	2306      	movs	r3, #6
   2d004:	e17e      	b.n	2d304 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2d006:	697b      	ldr	r3, [r7, #20]
   2d008:	005b      	lsls	r3, r3, #1
   2d00a:	68fa      	ldr	r2, [r7, #12]
   2d00c:	18d3      	adds	r3, r2, r3
   2d00e:	2200      	movs	r2, #0
   2d010:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2d012:	687b      	ldr	r3, [r7, #4]
   2d014:	699b      	ldr	r3, [r3, #24]
   2d016:	220b      	movs	r2, #11
   2d018:	2120      	movs	r1, #32
   2d01a:	0018      	movs	r0, r3
   2d01c:	4b8b      	ldr	r3, [pc, #556]	; (2d24c <create_name+0x388>)
   2d01e:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2d020:	2300      	movs	r3, #0
   2d022:	61bb      	str	r3, [r7, #24]
   2d024:	e002      	b.n	2d02c <create_name+0x168>
   2d026:	69bb      	ldr	r3, [r7, #24]
   2d028:	3301      	adds	r3, #1
   2d02a:	61bb      	str	r3, [r7, #24]
   2d02c:	69bb      	ldr	r3, [r7, #24]
   2d02e:	005b      	lsls	r3, r3, #1
   2d030:	68fa      	ldr	r2, [r7, #12]
   2d032:	18d3      	adds	r3, r2, r3
   2d034:	881b      	ldrh	r3, [r3, #0]
   2d036:	2b20      	cmp	r3, #32
   2d038:	d0f5      	beq.n	2d026 <create_name+0x162>
   2d03a:	69bb      	ldr	r3, [r7, #24]
   2d03c:	005b      	lsls	r3, r3, #1
   2d03e:	68fa      	ldr	r2, [r7, #12]
   2d040:	18d3      	adds	r3, r2, r3
   2d042:	881b      	ldrh	r3, [r3, #0]
   2d044:	2b2e      	cmp	r3, #46	; 0x2e
   2d046:	d0ee      	beq.n	2d026 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2d048:	69bb      	ldr	r3, [r7, #24]
   2d04a:	2b00      	cmp	r3, #0
   2d04c:	d00b      	beq.n	2d066 <create_name+0x1a2>
   2d04e:	2326      	movs	r3, #38	; 0x26
   2d050:	18fb      	adds	r3, r7, r3
   2d052:	2226      	movs	r2, #38	; 0x26
   2d054:	18ba      	adds	r2, r7, r2
   2d056:	7812      	ldrb	r2, [r2, #0]
   2d058:	2103      	movs	r1, #3
   2d05a:	430a      	orrs	r2, r1
   2d05c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2d05e:	e002      	b.n	2d066 <create_name+0x1a2>
   2d060:	697b      	ldr	r3, [r7, #20]
   2d062:	3b01      	subs	r3, #1
   2d064:	617b      	str	r3, [r7, #20]
   2d066:	697b      	ldr	r3, [r7, #20]
   2d068:	2b00      	cmp	r3, #0
   2d06a:	d009      	beq.n	2d080 <create_name+0x1bc>
   2d06c:	697b      	ldr	r3, [r7, #20]
   2d06e:	4a76      	ldr	r2, [pc, #472]	; (2d248 <create_name+0x384>)
   2d070:	4694      	mov	ip, r2
   2d072:	4463      	add	r3, ip
   2d074:	005b      	lsls	r3, r3, #1
   2d076:	68fa      	ldr	r2, [r7, #12]
   2d078:	18d3      	adds	r3, r2, r3
   2d07a:	881b      	ldrh	r3, [r3, #0]
   2d07c:	2b2e      	cmp	r3, #46	; 0x2e
   2d07e:	d1ef      	bne.n	2d060 <create_name+0x19c>

	b = i = 0; ni = 8;
   2d080:	2300      	movs	r3, #0
   2d082:	623b      	str	r3, [r7, #32]
   2d084:	2327      	movs	r3, #39	; 0x27
   2d086:	18fb      	adds	r3, r7, r3
   2d088:	2200      	movs	r2, #0
   2d08a:	701a      	strb	r2, [r3, #0]
   2d08c:	2308      	movs	r3, #8
   2d08e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2d090:	69bb      	ldr	r3, [r7, #24]
   2d092:	1c5a      	adds	r2, r3, #1
   2d094:	61ba      	str	r2, [r7, #24]
   2d096:	005b      	lsls	r3, r3, #1
   2d098:	68fa      	ldr	r2, [r7, #12]
   2d09a:	18d2      	adds	r2, r2, r3
   2d09c:	2324      	movs	r3, #36	; 0x24
   2d09e:	18fb      	adds	r3, r7, r3
   2d0a0:	8812      	ldrh	r2, [r2, #0]
   2d0a2:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2d0a4:	2324      	movs	r3, #36	; 0x24
   2d0a6:	18fb      	adds	r3, r7, r3
   2d0a8:	881b      	ldrh	r3, [r3, #0]
   2d0aa:	2b00      	cmp	r3, #0
   2d0ac:	d100      	bne.n	2d0b0 <create_name+0x1ec>
   2d0ae:	e0c3      	b.n	2d238 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2d0b0:	2324      	movs	r3, #36	; 0x24
   2d0b2:	18fb      	adds	r3, r7, r3
   2d0b4:	881b      	ldrh	r3, [r3, #0]
   2d0b6:	2b20      	cmp	r3, #32
   2d0b8:	d008      	beq.n	2d0cc <create_name+0x208>
   2d0ba:	2324      	movs	r3, #36	; 0x24
   2d0bc:	18fb      	adds	r3, r7, r3
   2d0be:	881b      	ldrh	r3, [r3, #0]
   2d0c0:	2b2e      	cmp	r3, #46	; 0x2e
   2d0c2:	d10c      	bne.n	2d0de <create_name+0x21a>
   2d0c4:	69ba      	ldr	r2, [r7, #24]
   2d0c6:	697b      	ldr	r3, [r7, #20]
   2d0c8:	429a      	cmp	r2, r3
   2d0ca:	d008      	beq.n	2d0de <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2d0cc:	2326      	movs	r3, #38	; 0x26
   2d0ce:	18fb      	adds	r3, r7, r3
   2d0d0:	2226      	movs	r2, #38	; 0x26
   2d0d2:	18ba      	adds	r2, r7, r2
   2d0d4:	7812      	ldrb	r2, [r2, #0]
   2d0d6:	2103      	movs	r1, #3
   2d0d8:	430a      	orrs	r2, r1
   2d0da:	701a      	strb	r2, [r3, #0]
   2d0dc:	e0ab      	b.n	2d236 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2d0de:	6a3a      	ldr	r2, [r7, #32]
   2d0e0:	69fb      	ldr	r3, [r7, #28]
   2d0e2:	429a      	cmp	r2, r3
   2d0e4:	d203      	bcs.n	2d0ee <create_name+0x22a>
   2d0e6:	69ba      	ldr	r2, [r7, #24]
   2d0e8:	697b      	ldr	r3, [r7, #20]
   2d0ea:	429a      	cmp	r2, r3
   2d0ec:	d12a      	bne.n	2d144 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2d0ee:	69fb      	ldr	r3, [r7, #28]
   2d0f0:	2b0b      	cmp	r3, #11
   2d0f2:	d108      	bne.n	2d106 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2d0f4:	2326      	movs	r3, #38	; 0x26
   2d0f6:	18fb      	adds	r3, r7, r3
   2d0f8:	2226      	movs	r2, #38	; 0x26
   2d0fa:	18ba      	adds	r2, r7, r2
   2d0fc:	7812      	ldrb	r2, [r2, #0]
   2d0fe:	2103      	movs	r1, #3
   2d100:	430a      	orrs	r2, r1
   2d102:	701a      	strb	r2, [r3, #0]
   2d104:	e0a9      	b.n	2d25a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2d106:	69ba      	ldr	r2, [r7, #24]
   2d108:	697b      	ldr	r3, [r7, #20]
   2d10a:	429a      	cmp	r2, r3
   2d10c:	d007      	beq.n	2d11e <create_name+0x25a>
   2d10e:	2326      	movs	r3, #38	; 0x26
   2d110:	18fb      	adds	r3, r7, r3
   2d112:	2226      	movs	r2, #38	; 0x26
   2d114:	18ba      	adds	r2, r7, r2
   2d116:	7812      	ldrb	r2, [r2, #0]
   2d118:	2103      	movs	r1, #3
   2d11a:	430a      	orrs	r2, r1
   2d11c:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2d11e:	69ba      	ldr	r2, [r7, #24]
   2d120:	697b      	ldr	r3, [r7, #20]
   2d122:	429a      	cmp	r2, r3
   2d124:	d900      	bls.n	2d128 <create_name+0x264>
   2d126:	e097      	b.n	2d258 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2d128:	697b      	ldr	r3, [r7, #20]
   2d12a:	61bb      	str	r3, [r7, #24]
   2d12c:	2308      	movs	r3, #8
   2d12e:	623b      	str	r3, [r7, #32]
   2d130:	230b      	movs	r3, #11
   2d132:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2d134:	2327      	movs	r3, #39	; 0x27
   2d136:	18fb      	adds	r3, r7, r3
   2d138:	2227      	movs	r2, #39	; 0x27
   2d13a:	18ba      	adds	r2, r7, r2
   2d13c:	7812      	ldrb	r2, [r2, #0]
   2d13e:	0092      	lsls	r2, r2, #2
   2d140:	701a      	strb	r2, [r3, #0]
   2d142:	e078      	b.n	2d236 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2d144:	2324      	movs	r3, #36	; 0x24
   2d146:	18fb      	adds	r3, r7, r3
   2d148:	881b      	ldrh	r3, [r3, #0]
   2d14a:	2b7f      	cmp	r3, #127	; 0x7f
   2d14c:	d920      	bls.n	2d190 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2d14e:	2324      	movs	r3, #36	; 0x24
   2d150:	18fc      	adds	r4, r7, r3
   2d152:	2324      	movs	r3, #36	; 0x24
   2d154:	18fb      	adds	r3, r7, r3
   2d156:	881b      	ldrh	r3, [r3, #0]
   2d158:	2100      	movs	r1, #0
   2d15a:	0018      	movs	r0, r3
   2d15c:	4b37      	ldr	r3, [pc, #220]	; (2d23c <create_name+0x378>)
   2d15e:	4798      	blx	r3
   2d160:	0003      	movs	r3, r0
   2d162:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2d164:	2324      	movs	r3, #36	; 0x24
   2d166:	18fb      	adds	r3, r7, r3
   2d168:	881b      	ldrh	r3, [r3, #0]
   2d16a:	2b00      	cmp	r3, #0
   2d16c:	d008      	beq.n	2d180 <create_name+0x2bc>
   2d16e:	2324      	movs	r3, #36	; 0x24
   2d170:	18fb      	adds	r3, r7, r3
   2d172:	881b      	ldrh	r3, [r3, #0]
   2d174:	3b80      	subs	r3, #128	; 0x80
   2d176:	4a36      	ldr	r2, [pc, #216]	; (2d250 <create_name+0x38c>)
   2d178:	5cd2      	ldrb	r2, [r2, r3]
   2d17a:	2324      	movs	r3, #36	; 0x24
   2d17c:	18fb      	adds	r3, r7, r3
   2d17e:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2d180:	2326      	movs	r3, #38	; 0x26
   2d182:	18fb      	adds	r3, r7, r3
   2d184:	2226      	movs	r2, #38	; 0x26
   2d186:	18ba      	adds	r2, r7, r2
   2d188:	7812      	ldrb	r2, [r2, #0]
   2d18a:	2102      	movs	r1, #2
   2d18c:	430a      	orrs	r2, r1
   2d18e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2d190:	2324      	movs	r3, #36	; 0x24
   2d192:	18fb      	adds	r3, r7, r3
   2d194:	881b      	ldrh	r3, [r3, #0]
   2d196:	2b00      	cmp	r3, #0
   2d198:	d009      	beq.n	2d1ae <create_name+0x2ea>
   2d19a:	2324      	movs	r3, #36	; 0x24
   2d19c:	18fb      	adds	r3, r7, r3
   2d19e:	881a      	ldrh	r2, [r3, #0]
   2d1a0:	4b2c      	ldr	r3, [pc, #176]	; (2d254 <create_name+0x390>)
   2d1a2:	0011      	movs	r1, r2
   2d1a4:	0018      	movs	r0, r3
   2d1a6:	4b27      	ldr	r3, [pc, #156]	; (2d244 <create_name+0x380>)
   2d1a8:	4798      	blx	r3
   2d1aa:	1e03      	subs	r3, r0, #0
   2d1ac:	d00c      	beq.n	2d1c8 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2d1ae:	2324      	movs	r3, #36	; 0x24
   2d1b0:	18fb      	adds	r3, r7, r3
   2d1b2:	225f      	movs	r2, #95	; 0x5f
   2d1b4:	801a      	strh	r2, [r3, #0]
   2d1b6:	2326      	movs	r3, #38	; 0x26
   2d1b8:	18fb      	adds	r3, r7, r3
   2d1ba:	2226      	movs	r2, #38	; 0x26
   2d1bc:	18ba      	adds	r2, r7, r2
   2d1be:	7812      	ldrb	r2, [r2, #0]
   2d1c0:	2103      	movs	r1, #3
   2d1c2:	430a      	orrs	r2, r1
   2d1c4:	701a      	strb	r2, [r3, #0]
   2d1c6:	e02b      	b.n	2d220 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2d1c8:	2324      	movs	r3, #36	; 0x24
   2d1ca:	18fb      	adds	r3, r7, r3
   2d1cc:	881b      	ldrh	r3, [r3, #0]
   2d1ce:	2b40      	cmp	r3, #64	; 0x40
   2d1d0:	d90d      	bls.n	2d1ee <create_name+0x32a>
   2d1d2:	2324      	movs	r3, #36	; 0x24
   2d1d4:	18fb      	adds	r3, r7, r3
   2d1d6:	881b      	ldrh	r3, [r3, #0]
   2d1d8:	2b5a      	cmp	r3, #90	; 0x5a
   2d1da:	d808      	bhi.n	2d1ee <create_name+0x32a>
					b |= 2;
   2d1dc:	2327      	movs	r3, #39	; 0x27
   2d1de:	18fb      	adds	r3, r7, r3
   2d1e0:	2227      	movs	r2, #39	; 0x27
   2d1e2:	18ba      	adds	r2, r7, r2
   2d1e4:	7812      	ldrb	r2, [r2, #0]
   2d1e6:	2102      	movs	r1, #2
   2d1e8:	430a      	orrs	r2, r1
   2d1ea:	701a      	strb	r2, [r3, #0]
   2d1ec:	e018      	b.n	2d220 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2d1ee:	2324      	movs	r3, #36	; 0x24
   2d1f0:	18fb      	adds	r3, r7, r3
   2d1f2:	881b      	ldrh	r3, [r3, #0]
   2d1f4:	2b60      	cmp	r3, #96	; 0x60
   2d1f6:	d913      	bls.n	2d220 <create_name+0x35c>
   2d1f8:	2324      	movs	r3, #36	; 0x24
   2d1fa:	18fb      	adds	r3, r7, r3
   2d1fc:	881b      	ldrh	r3, [r3, #0]
   2d1fe:	2b7a      	cmp	r3, #122	; 0x7a
   2d200:	d80e      	bhi.n	2d220 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2d202:	2327      	movs	r3, #39	; 0x27
   2d204:	18fb      	adds	r3, r7, r3
   2d206:	2227      	movs	r2, #39	; 0x27
   2d208:	18ba      	adds	r2, r7, r2
   2d20a:	7812      	ldrb	r2, [r2, #0]
   2d20c:	2101      	movs	r1, #1
   2d20e:	430a      	orrs	r2, r1
   2d210:	701a      	strb	r2, [r3, #0]
   2d212:	2324      	movs	r3, #36	; 0x24
   2d214:	18fb      	adds	r3, r7, r3
   2d216:	2224      	movs	r2, #36	; 0x24
   2d218:	18ba      	adds	r2, r7, r2
   2d21a:	8812      	ldrh	r2, [r2, #0]
   2d21c:	3a20      	subs	r2, #32
   2d21e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2d220:	687b      	ldr	r3, [r7, #4]
   2d222:	699a      	ldr	r2, [r3, #24]
   2d224:	6a3b      	ldr	r3, [r7, #32]
   2d226:	1c59      	adds	r1, r3, #1
   2d228:	6239      	str	r1, [r7, #32]
   2d22a:	18d3      	adds	r3, r2, r3
   2d22c:	2224      	movs	r2, #36	; 0x24
   2d22e:	18ba      	adds	r2, r7, r2
   2d230:	8812      	ldrh	r2, [r2, #0]
   2d232:	b2d2      	uxtb	r2, r2
   2d234:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2d236:	e72b      	b.n	2d090 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2d238:	46c0      	nop			; (mov r8, r8)
   2d23a:	e00e      	b.n	2d25a <create_name+0x396>
   2d23c:	0002e5a5 	.word	0x0002e5a5
   2d240:	0003970c 	.word	0x0003970c
   2d244:	0002ba67 	.word	0x0002ba67
   2d248:	7fffffff 	.word	0x7fffffff
   2d24c:	0002b9ed 	.word	0x0002b9ed
   2d250:	00039754 	.word	0x00039754
   2d254:	00039718 	.word	0x00039718
			if (si > di) break;			/* No extension */
   2d258:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2d25a:	687b      	ldr	r3, [r7, #4]
   2d25c:	699b      	ldr	r3, [r3, #24]
   2d25e:	781b      	ldrb	r3, [r3, #0]
   2d260:	2be5      	cmp	r3, #229	; 0xe5
   2d262:	d103      	bne.n	2d26c <create_name+0x3a8>
   2d264:	687b      	ldr	r3, [r7, #4]
   2d266:	699b      	ldr	r3, [r3, #24]
   2d268:	2205      	movs	r2, #5
   2d26a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2d26c:	69fb      	ldr	r3, [r7, #28]
   2d26e:	2b08      	cmp	r3, #8
   2d270:	d106      	bne.n	2d280 <create_name+0x3bc>
   2d272:	2327      	movs	r3, #39	; 0x27
   2d274:	18fb      	adds	r3, r7, r3
   2d276:	2227      	movs	r2, #39	; 0x27
   2d278:	18ba      	adds	r2, r7, r2
   2d27a:	7812      	ldrb	r2, [r2, #0]
   2d27c:	0092      	lsls	r2, r2, #2
   2d27e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2d280:	2327      	movs	r3, #39	; 0x27
   2d282:	18fb      	adds	r3, r7, r3
   2d284:	781b      	ldrb	r3, [r3, #0]
   2d286:	220c      	movs	r2, #12
   2d288:	4013      	ands	r3, r2
   2d28a:	2b0c      	cmp	r3, #12
   2d28c:	d006      	beq.n	2d29c <create_name+0x3d8>
   2d28e:	2327      	movs	r3, #39	; 0x27
   2d290:	18fb      	adds	r3, r7, r3
   2d292:	781b      	ldrb	r3, [r3, #0]
   2d294:	2203      	movs	r2, #3
   2d296:	4013      	ands	r3, r2
   2d298:	2b03      	cmp	r3, #3
   2d29a:	d107      	bne.n	2d2ac <create_name+0x3e8>
		cf |= NS_LFN;
   2d29c:	2326      	movs	r3, #38	; 0x26
   2d29e:	18fb      	adds	r3, r7, r3
   2d2a0:	2226      	movs	r2, #38	; 0x26
   2d2a2:	18ba      	adds	r2, r7, r2
   2d2a4:	7812      	ldrb	r2, [r2, #0]
   2d2a6:	2102      	movs	r1, #2
   2d2a8:	430a      	orrs	r2, r1
   2d2aa:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2d2ac:	2326      	movs	r3, #38	; 0x26
   2d2ae:	18fb      	adds	r3, r7, r3
   2d2b0:	781b      	ldrb	r3, [r3, #0]
   2d2b2:	2202      	movs	r2, #2
   2d2b4:	4013      	ands	r3, r2
   2d2b6:	d11d      	bne.n	2d2f4 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2d2b8:	2327      	movs	r3, #39	; 0x27
   2d2ba:	18fb      	adds	r3, r7, r3
   2d2bc:	781b      	ldrb	r3, [r3, #0]
   2d2be:	2203      	movs	r2, #3
   2d2c0:	4013      	ands	r3, r2
   2d2c2:	2b01      	cmp	r3, #1
   2d2c4:	d107      	bne.n	2d2d6 <create_name+0x412>
   2d2c6:	2326      	movs	r3, #38	; 0x26
   2d2c8:	18fb      	adds	r3, r7, r3
   2d2ca:	2226      	movs	r2, #38	; 0x26
   2d2cc:	18ba      	adds	r2, r7, r2
   2d2ce:	7812      	ldrb	r2, [r2, #0]
   2d2d0:	2110      	movs	r1, #16
   2d2d2:	430a      	orrs	r2, r1
   2d2d4:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2d2d6:	2327      	movs	r3, #39	; 0x27
   2d2d8:	18fb      	adds	r3, r7, r3
   2d2da:	781b      	ldrb	r3, [r3, #0]
   2d2dc:	220c      	movs	r2, #12
   2d2de:	4013      	ands	r3, r2
   2d2e0:	2b04      	cmp	r3, #4
   2d2e2:	d107      	bne.n	2d2f4 <create_name+0x430>
   2d2e4:	2326      	movs	r3, #38	; 0x26
   2d2e6:	18fb      	adds	r3, r7, r3
   2d2e8:	2226      	movs	r2, #38	; 0x26
   2d2ea:	18ba      	adds	r2, r7, r2
   2d2ec:	7812      	ldrb	r2, [r2, #0]
   2d2ee:	2108      	movs	r1, #8
   2d2f0:	430a      	orrs	r2, r1
   2d2f2:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2d2f4:	687b      	ldr	r3, [r7, #4]
   2d2f6:	699b      	ldr	r3, [r3, #24]
   2d2f8:	330b      	adds	r3, #11
   2d2fa:	2226      	movs	r2, #38	; 0x26
   2d2fc:	18ba      	adds	r2, r7, r2
   2d2fe:	7812      	ldrb	r2, [r2, #0]
   2d300:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2d302:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2d304:	0018      	movs	r0, r3
   2d306:	46bd      	mov	sp, r7
   2d308:	b00b      	add	sp, #44	; 0x2c
   2d30a:	bd90      	pop	{r4, r7, pc}

0002d30c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2d30c:	b590      	push	{r4, r7, lr}
   2d30e:	b085      	sub	sp, #20
   2d310:	af00      	add	r7, sp, #0
   2d312:	6078      	str	r0, [r7, #4]
   2d314:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2d316:	683b      	ldr	r3, [r7, #0]
   2d318:	781b      	ldrb	r3, [r3, #0]
   2d31a:	2b2f      	cmp	r3, #47	; 0x2f
   2d31c:	d003      	beq.n	2d326 <follow_path+0x1a>
   2d31e:	683b      	ldr	r3, [r7, #0]
   2d320:	781b      	ldrb	r3, [r3, #0]
   2d322:	2b5c      	cmp	r3, #92	; 0x5c
   2d324:	d102      	bne.n	2d32c <follow_path+0x20>
		path++;
   2d326:	683b      	ldr	r3, [r7, #0]
   2d328:	3301      	adds	r3, #1
   2d32a:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2d32c:	687b      	ldr	r3, [r7, #4]
   2d32e:	2200      	movs	r2, #0
   2d330:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2d332:	683b      	ldr	r3, [r7, #0]
   2d334:	781b      	ldrb	r3, [r3, #0]
   2d336:	2b1f      	cmp	r3, #31
   2d338:	d80c      	bhi.n	2d354 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2d33a:	230f      	movs	r3, #15
   2d33c:	18fc      	adds	r4, r7, r3
   2d33e:	687b      	ldr	r3, [r7, #4]
   2d340:	2100      	movs	r1, #0
   2d342:	0018      	movs	r0, r3
   2d344:	4b3c      	ldr	r3, [pc, #240]	; (2d438 <follow_path+0x12c>)
   2d346:	4798      	blx	r3
   2d348:	0003      	movs	r3, r0
   2d34a:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2d34c:	687b      	ldr	r3, [r7, #4]
   2d34e:	2200      	movs	r2, #0
   2d350:	615a      	str	r2, [r3, #20]
   2d352:	e06a      	b.n	2d42a <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2d354:	230f      	movs	r3, #15
   2d356:	18fc      	adds	r4, r7, r3
   2d358:	003a      	movs	r2, r7
   2d35a:	687b      	ldr	r3, [r7, #4]
   2d35c:	0011      	movs	r1, r2
   2d35e:	0018      	movs	r0, r3
   2d360:	4b36      	ldr	r3, [pc, #216]	; (2d43c <follow_path+0x130>)
   2d362:	4798      	blx	r3
   2d364:	0003      	movs	r3, r0
   2d366:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d368:	230f      	movs	r3, #15
   2d36a:	18fb      	adds	r3, r7, r3
   2d36c:	781b      	ldrb	r3, [r3, #0]
   2d36e:	2b00      	cmp	r3, #0
   2d370:	d154      	bne.n	2d41c <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2d372:	230f      	movs	r3, #15
   2d374:	18fc      	adds	r4, r7, r3
   2d376:	687b      	ldr	r3, [r7, #4]
   2d378:	0018      	movs	r0, r3
   2d37a:	4b31      	ldr	r3, [pc, #196]	; (2d440 <follow_path+0x134>)
   2d37c:	4798      	blx	r3
   2d37e:	0003      	movs	r3, r0
   2d380:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2d382:	687b      	ldr	r3, [r7, #4]
   2d384:	699a      	ldr	r2, [r3, #24]
   2d386:	230e      	movs	r3, #14
   2d388:	18fb      	adds	r3, r7, r3
   2d38a:	7ad2      	ldrb	r2, [r2, #11]
   2d38c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2d38e:	230f      	movs	r3, #15
   2d390:	18fb      	adds	r3, r7, r3
   2d392:	781b      	ldrb	r3, [r3, #0]
   2d394:	2b00      	cmp	r3, #0
   2d396:	d00f      	beq.n	2d3b8 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d398:	230f      	movs	r3, #15
   2d39a:	18fb      	adds	r3, r7, r3
   2d39c:	781b      	ldrb	r3, [r3, #0]
   2d39e:	2b04      	cmp	r3, #4
   2d3a0:	d13e      	bne.n	2d420 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2d3a2:	230e      	movs	r3, #14
   2d3a4:	18fb      	adds	r3, r7, r3
   2d3a6:	781b      	ldrb	r3, [r3, #0]
   2d3a8:	2204      	movs	r2, #4
   2d3aa:	4013      	ands	r3, r2
   2d3ac:	d13a      	bne.n	2d424 <follow_path+0x118>
   2d3ae:	230f      	movs	r3, #15
   2d3b0:	18fb      	adds	r3, r7, r3
   2d3b2:	2205      	movs	r2, #5
   2d3b4:	701a      	strb	r2, [r3, #0]
				}
				break;
   2d3b6:	e035      	b.n	2d424 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d3b8:	230e      	movs	r3, #14
   2d3ba:	18fb      	adds	r3, r7, r3
   2d3bc:	781b      	ldrb	r3, [r3, #0]
   2d3be:	2204      	movs	r2, #4
   2d3c0:	4013      	ands	r3, r2
   2d3c2:	d131      	bne.n	2d428 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2d3c4:	687b      	ldr	r3, [r7, #4]
   2d3c6:	695b      	ldr	r3, [r3, #20]
   2d3c8:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2d3ca:	68bb      	ldr	r3, [r7, #8]
   2d3cc:	330b      	adds	r3, #11
   2d3ce:	781b      	ldrb	r3, [r3, #0]
   2d3d0:	001a      	movs	r2, r3
   2d3d2:	2310      	movs	r3, #16
   2d3d4:	4013      	ands	r3, r2
   2d3d6:	d104      	bne.n	2d3e2 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2d3d8:	230f      	movs	r3, #15
   2d3da:	18fb      	adds	r3, r7, r3
   2d3dc:	2205      	movs	r2, #5
   2d3de:	701a      	strb	r2, [r3, #0]
   2d3e0:	e023      	b.n	2d42a <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2d3e2:	68bb      	ldr	r3, [r7, #8]
   2d3e4:	3315      	adds	r3, #21
   2d3e6:	781b      	ldrb	r3, [r3, #0]
   2d3e8:	021b      	lsls	r3, r3, #8
   2d3ea:	b21a      	sxth	r2, r3
   2d3ec:	68bb      	ldr	r3, [r7, #8]
   2d3ee:	3314      	adds	r3, #20
   2d3f0:	781b      	ldrb	r3, [r3, #0]
   2d3f2:	b21b      	sxth	r3, r3
   2d3f4:	4313      	orrs	r3, r2
   2d3f6:	b21b      	sxth	r3, r3
   2d3f8:	b29b      	uxth	r3, r3
   2d3fa:	041b      	lsls	r3, r3, #16
   2d3fc:	68ba      	ldr	r2, [r7, #8]
   2d3fe:	321b      	adds	r2, #27
   2d400:	7812      	ldrb	r2, [r2, #0]
   2d402:	0212      	lsls	r2, r2, #8
   2d404:	b211      	sxth	r1, r2
   2d406:	68ba      	ldr	r2, [r7, #8]
   2d408:	321a      	adds	r2, #26
   2d40a:	7812      	ldrb	r2, [r2, #0]
   2d40c:	b212      	sxth	r2, r2
   2d40e:	430a      	orrs	r2, r1
   2d410:	b212      	sxth	r2, r2
   2d412:	b292      	uxth	r2, r2
   2d414:	431a      	orrs	r2, r3
   2d416:	687b      	ldr	r3, [r7, #4]
   2d418:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2d41a:	e79b      	b.n	2d354 <follow_path+0x48>
			if (res != FR_OK) break;
   2d41c:	46c0      	nop			; (mov r8, r8)
   2d41e:	e004      	b.n	2d42a <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2d420:	46c0      	nop			; (mov r8, r8)
   2d422:	e002      	b.n	2d42a <follow_path+0x11e>
				break;
   2d424:	46c0      	nop			; (mov r8, r8)
   2d426:	e000      	b.n	2d42a <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2d428:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2d42a:	230f      	movs	r3, #15
   2d42c:	18fb      	adds	r3, r7, r3
   2d42e:	781b      	ldrb	r3, [r3, #0]
}
   2d430:	0018      	movs	r0, r3
   2d432:	46bd      	mov	sp, r7
   2d434:	b005      	add	sp, #20
   2d436:	bd90      	pop	{r4, r7, pc}
   2d438:	0002c2dd 	.word	0x0002c2dd
   2d43c:	0002cec5 	.word	0x0002cec5
   2d440:	0002c961 	.word	0x0002c961

0002d444 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2d444:	b590      	push	{r4, r7, lr}
   2d446:	b083      	sub	sp, #12
   2d448:	af00      	add	r7, sp, #0
   2d44a:	6078      	str	r0, [r7, #4]
   2d44c:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2d44e:	687b      	ldr	r3, [r7, #4]
   2d450:	7858      	ldrb	r0, [r3, #1]
   2d452:	687b      	ldr	r3, [r7, #4]
   2d454:	3330      	adds	r3, #48	; 0x30
   2d456:	0019      	movs	r1, r3
   2d458:	683a      	ldr	r2, [r7, #0]
   2d45a:	2301      	movs	r3, #1
   2d45c:	4c2a      	ldr	r4, [pc, #168]	; (2d508 <check_fs+0xc4>)
   2d45e:	47a0      	blx	r4
   2d460:	1e03      	subs	r3, r0, #0
   2d462:	d001      	beq.n	2d468 <check_fs+0x24>
		return 3;
   2d464:	2303      	movs	r3, #3
   2d466:	e04b      	b.n	2d500 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2d468:	687b      	ldr	r3, [r7, #4]
   2d46a:	4a28      	ldr	r2, [pc, #160]	; (2d50c <check_fs+0xc8>)
   2d46c:	4694      	mov	ip, r2
   2d46e:	4463      	add	r3, ip
   2d470:	3301      	adds	r3, #1
   2d472:	781b      	ldrb	r3, [r3, #0]
   2d474:	021b      	lsls	r3, r3, #8
   2d476:	b21a      	sxth	r2, r3
   2d478:	687b      	ldr	r3, [r7, #4]
   2d47a:	4924      	ldr	r1, [pc, #144]	; (2d50c <check_fs+0xc8>)
   2d47c:	5c5b      	ldrb	r3, [r3, r1]
   2d47e:	b21b      	sxth	r3, r3
   2d480:	4313      	orrs	r3, r2
   2d482:	b21b      	sxth	r3, r3
   2d484:	4a22      	ldr	r2, [pc, #136]	; (2d510 <check_fs+0xcc>)
   2d486:	4293      	cmp	r3, r2
   2d488:	d001      	beq.n	2d48e <check_fs+0x4a>
		return 2;
   2d48a:	2302      	movs	r3, #2
   2d48c:	e038      	b.n	2d500 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2d48e:	687b      	ldr	r3, [r7, #4]
   2d490:	3366      	adds	r3, #102	; 0x66
   2d492:	3303      	adds	r3, #3
   2d494:	781b      	ldrb	r3, [r3, #0]
   2d496:	061a      	lsls	r2, r3, #24
   2d498:	687b      	ldr	r3, [r7, #4]
   2d49a:	3366      	adds	r3, #102	; 0x66
   2d49c:	3302      	adds	r3, #2
   2d49e:	781b      	ldrb	r3, [r3, #0]
   2d4a0:	041b      	lsls	r3, r3, #16
   2d4a2:	4313      	orrs	r3, r2
   2d4a4:	687a      	ldr	r2, [r7, #4]
   2d4a6:	3266      	adds	r2, #102	; 0x66
   2d4a8:	3201      	adds	r2, #1
   2d4aa:	7812      	ldrb	r2, [r2, #0]
   2d4ac:	0212      	lsls	r2, r2, #8
   2d4ae:	4313      	orrs	r3, r2
   2d4b0:	687a      	ldr	r2, [r7, #4]
   2d4b2:	2166      	movs	r1, #102	; 0x66
   2d4b4:	5c52      	ldrb	r2, [r2, r1]
   2d4b6:	4313      	orrs	r3, r2
   2d4b8:	021b      	lsls	r3, r3, #8
   2d4ba:	0a1b      	lsrs	r3, r3, #8
   2d4bc:	4a15      	ldr	r2, [pc, #84]	; (2d514 <check_fs+0xd0>)
   2d4be:	4293      	cmp	r3, r2
   2d4c0:	d101      	bne.n	2d4c6 <check_fs+0x82>
		return 0;
   2d4c2:	2300      	movs	r3, #0
   2d4c4:	e01c      	b.n	2d500 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2d4c6:	687b      	ldr	r3, [r7, #4]
   2d4c8:	3382      	adds	r3, #130	; 0x82
   2d4ca:	3303      	adds	r3, #3
   2d4cc:	781b      	ldrb	r3, [r3, #0]
   2d4ce:	061a      	lsls	r2, r3, #24
   2d4d0:	687b      	ldr	r3, [r7, #4]
   2d4d2:	3382      	adds	r3, #130	; 0x82
   2d4d4:	3302      	adds	r3, #2
   2d4d6:	781b      	ldrb	r3, [r3, #0]
   2d4d8:	041b      	lsls	r3, r3, #16
   2d4da:	4313      	orrs	r3, r2
   2d4dc:	687a      	ldr	r2, [r7, #4]
   2d4de:	3282      	adds	r2, #130	; 0x82
   2d4e0:	3201      	adds	r2, #1
   2d4e2:	7812      	ldrb	r2, [r2, #0]
   2d4e4:	0212      	lsls	r2, r2, #8
   2d4e6:	4313      	orrs	r3, r2
   2d4e8:	687a      	ldr	r2, [r7, #4]
   2d4ea:	2182      	movs	r1, #130	; 0x82
   2d4ec:	5c52      	ldrb	r2, [r2, r1]
   2d4ee:	4313      	orrs	r3, r2
   2d4f0:	021b      	lsls	r3, r3, #8
   2d4f2:	0a1b      	lsrs	r3, r3, #8
   2d4f4:	4a07      	ldr	r2, [pc, #28]	; (2d514 <check_fs+0xd0>)
   2d4f6:	4293      	cmp	r3, r2
   2d4f8:	d101      	bne.n	2d4fe <check_fs+0xba>
		return 0;
   2d4fa:	2300      	movs	r3, #0
   2d4fc:	e000      	b.n	2d500 <check_fs+0xbc>

	return 1;
   2d4fe:	2301      	movs	r3, #1
}
   2d500:	0018      	movs	r0, r3
   2d502:	46bd      	mov	sp, r7
   2d504:	b003      	add	sp, #12
   2d506:	bd90      	pop	{r4, r7, pc}
   2d508:	0002b6ad 	.word	0x0002b6ad
   2d50c:	0000022e 	.word	0x0000022e
   2d510:	ffffaa55 	.word	0xffffaa55
   2d514:	00544146 	.word	0x00544146

0002d518 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2d518:	b590      	push	{r4, r7, lr}
   2d51a:	b093      	sub	sp, #76	; 0x4c
   2d51c:	af00      	add	r7, sp, #0
   2d51e:	60f8      	str	r0, [r7, #12]
   2d520:	60b9      	str	r1, [r7, #8]
   2d522:	1dfb      	adds	r3, r7, #7
   2d524:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2d526:	68fb      	ldr	r3, [r7, #12]
   2d528:	681b      	ldr	r3, [r3, #0]
   2d52a:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2d52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d52e:	781b      	ldrb	r3, [r3, #0]
   2d530:	3b30      	subs	r3, #48	; 0x30
   2d532:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2d534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d536:	2b09      	cmp	r3, #9
   2d538:	d80b      	bhi.n	2d552 <chk_mounted+0x3a>
   2d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d53c:	3301      	adds	r3, #1
   2d53e:	781b      	ldrb	r3, [r3, #0]
   2d540:	2b3a      	cmp	r3, #58	; 0x3a
   2d542:	d106      	bne.n	2d552 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2d546:	3302      	adds	r3, #2
   2d548:	62fb      	str	r3, [r7, #44]	; 0x2c
   2d54a:	68fb      	ldr	r3, [r7, #12]
   2d54c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2d54e:	601a      	str	r2, [r3, #0]
   2d550:	e001      	b.n	2d556 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2d552:	2300      	movs	r3, #0
   2d554:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2d556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d558:	2b07      	cmp	r3, #7
   2d55a:	d901      	bls.n	2d560 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2d55c:	230b      	movs	r3, #11
   2d55e:	e2af      	b.n	2dac0 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2d560:	4bc5      	ldr	r3, [pc, #788]	; (2d878 <chk_mounted+0x360>)
   2d562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2d564:	0092      	lsls	r2, r2, #2
   2d566:	58d3      	ldr	r3, [r2, r3]
   2d568:	62bb      	str	r3, [r7, #40]	; 0x28
   2d56a:	68bb      	ldr	r3, [r7, #8]
   2d56c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d56e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2d570:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d572:	2b00      	cmp	r3, #0
   2d574:	d101      	bne.n	2d57a <chk_mounted+0x62>
   2d576:	230c      	movs	r3, #12
   2d578:	e2a2      	b.n	2dac0 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d57c:	781b      	ldrb	r3, [r3, #0]
   2d57e:	2b00      	cmp	r3, #0
   2d580:	d01c      	beq.n	2d5bc <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d584:	785b      	ldrb	r3, [r3, #1]
   2d586:	2227      	movs	r2, #39	; 0x27
   2d588:	18bc      	adds	r4, r7, r2
   2d58a:	0018      	movs	r0, r3
   2d58c:	4bbb      	ldr	r3, [pc, #748]	; (2d87c <chk_mounted+0x364>)
   2d58e:	4798      	blx	r3
   2d590:	0003      	movs	r3, r0
   2d592:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2d594:	2327      	movs	r3, #39	; 0x27
   2d596:	18fb      	adds	r3, r7, r3
   2d598:	781b      	ldrb	r3, [r3, #0]
   2d59a:	2201      	movs	r2, #1
   2d59c:	4013      	ands	r3, r2
   2d59e:	d10d      	bne.n	2d5bc <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2d5a0:	1dfb      	adds	r3, r7, #7
   2d5a2:	781b      	ldrb	r3, [r3, #0]
   2d5a4:	2b00      	cmp	r3, #0
   2d5a6:	d007      	beq.n	2d5b8 <chk_mounted+0xa0>
   2d5a8:	2327      	movs	r3, #39	; 0x27
   2d5aa:	18fb      	adds	r3, r7, r3
   2d5ac:	781b      	ldrb	r3, [r3, #0]
   2d5ae:	2204      	movs	r2, #4
   2d5b0:	4013      	ands	r3, r2
   2d5b2:	d001      	beq.n	2d5b8 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2d5b4:	230a      	movs	r3, #10
   2d5b6:	e283      	b.n	2dac0 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2d5b8:	2300      	movs	r3, #0
   2d5ba:	e281      	b.n	2dac0 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5be:	2200      	movs	r2, #0
   2d5c0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2d5c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d5c4:	b2da      	uxtb	r2, r3
   2d5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5c8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d5cc:	785b      	ldrb	r3, [r3, #1]
   2d5ce:	2227      	movs	r2, #39	; 0x27
   2d5d0:	18bc      	adds	r4, r7, r2
   2d5d2:	0018      	movs	r0, r3
   2d5d4:	4baa      	ldr	r3, [pc, #680]	; (2d880 <chk_mounted+0x368>)
   2d5d6:	4798      	blx	r3
   2d5d8:	0003      	movs	r3, r0
   2d5da:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2d5dc:	2327      	movs	r3, #39	; 0x27
   2d5de:	18fb      	adds	r3, r7, r3
   2d5e0:	781b      	ldrb	r3, [r3, #0]
   2d5e2:	2201      	movs	r2, #1
   2d5e4:	4013      	ands	r3, r2
   2d5e6:	d001      	beq.n	2d5ec <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2d5e8:	2303      	movs	r3, #3
   2d5ea:	e269      	b.n	2dac0 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2d5ec:	1dfb      	adds	r3, r7, #7
   2d5ee:	781b      	ldrb	r3, [r3, #0]
   2d5f0:	2b00      	cmp	r3, #0
   2d5f2:	d007      	beq.n	2d604 <chk_mounted+0xec>
   2d5f4:	2327      	movs	r3, #39	; 0x27
   2d5f6:	18fb      	adds	r3, r7, r3
   2d5f8:	781b      	ldrb	r3, [r3, #0]
   2d5fa:	2204      	movs	r2, #4
   2d5fc:	4013      	ands	r3, r2
   2d5fe:	d001      	beq.n	2d604 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2d600:	230a      	movs	r3, #10
   2d602:	e25d      	b.n	2dac0 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2d604:	2300      	movs	r3, #0
   2d606:	63fb      	str	r3, [r7, #60]	; 0x3c
   2d608:	2347      	movs	r3, #71	; 0x47
   2d60a:	18fc      	adds	r4, r7, r3
   2d60c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d610:	0011      	movs	r1, r2
   2d612:	0018      	movs	r0, r3
   2d614:	4b9b      	ldr	r3, [pc, #620]	; (2d884 <chk_mounted+0x36c>)
   2d616:	4798      	blx	r3
   2d618:	0003      	movs	r3, r0
   2d61a:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2d61c:	2347      	movs	r3, #71	; 0x47
   2d61e:	18fb      	adds	r3, r7, r3
   2d620:	781b      	ldrb	r3, [r3, #0]
   2d622:	2b01      	cmp	r3, #1
   2d624:	d13b      	bne.n	2d69e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2d626:	2346      	movs	r3, #70	; 0x46
   2d628:	18fb      	adds	r3, r7, r3
   2d62a:	2200      	movs	r2, #0
   2d62c:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2d62e:	2346      	movs	r3, #70	; 0x46
   2d630:	18fb      	adds	r3, r7, r3
   2d632:	781b      	ldrb	r3, [r3, #0]
   2d634:	2b00      	cmp	r3, #0
   2d636:	d006      	beq.n	2d646 <chk_mounted+0x12e>
   2d638:	2346      	movs	r3, #70	; 0x46
   2d63a:	18fb      	adds	r3, r7, r3
   2d63c:	781a      	ldrb	r2, [r3, #0]
   2d63e:	2346      	movs	r3, #70	; 0x46
   2d640:	18fb      	adds	r3, r7, r3
   2d642:	3a01      	subs	r2, #1
   2d644:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2d646:	2346      	movs	r3, #70	; 0x46
   2d648:	18fb      	adds	r3, r7, r3
   2d64a:	781b      	ldrb	r3, [r3, #0]
   2d64c:	011b      	lsls	r3, r3, #4
   2d64e:	33bf      	adds	r3, #191	; 0xbf
   2d650:	33ff      	adds	r3, #255	; 0xff
   2d652:	3330      	adds	r3, #48	; 0x30
   2d654:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d656:	18d3      	adds	r3, r2, r3
   2d658:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2d65a:	6a3b      	ldr	r3, [r7, #32]
   2d65c:	3304      	adds	r3, #4
   2d65e:	781b      	ldrb	r3, [r3, #0]
   2d660:	2b00      	cmp	r3, #0
   2d662:	d01c      	beq.n	2d69e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2d664:	6a3b      	ldr	r3, [r7, #32]
   2d666:	330b      	adds	r3, #11
   2d668:	781b      	ldrb	r3, [r3, #0]
   2d66a:	061a      	lsls	r2, r3, #24
   2d66c:	6a3b      	ldr	r3, [r7, #32]
   2d66e:	330a      	adds	r3, #10
   2d670:	781b      	ldrb	r3, [r3, #0]
   2d672:	041b      	lsls	r3, r3, #16
   2d674:	4313      	orrs	r3, r2
   2d676:	6a3a      	ldr	r2, [r7, #32]
   2d678:	3209      	adds	r2, #9
   2d67a:	7812      	ldrb	r2, [r2, #0]
   2d67c:	0212      	lsls	r2, r2, #8
   2d67e:	4313      	orrs	r3, r2
   2d680:	6a3a      	ldr	r2, [r7, #32]
   2d682:	3208      	adds	r2, #8
   2d684:	7812      	ldrb	r2, [r2, #0]
   2d686:	4313      	orrs	r3, r2
   2d688:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2d68a:	2347      	movs	r3, #71	; 0x47
   2d68c:	18fc      	adds	r4, r7, r3
   2d68e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d690:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d692:	0011      	movs	r1, r2
   2d694:	0018      	movs	r0, r3
   2d696:	4b7b      	ldr	r3, [pc, #492]	; (2d884 <chk_mounted+0x36c>)
   2d698:	4798      	blx	r3
   2d69a:	0003      	movs	r3, r0
   2d69c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2d69e:	2347      	movs	r3, #71	; 0x47
   2d6a0:	18fb      	adds	r3, r7, r3
   2d6a2:	781b      	ldrb	r3, [r3, #0]
   2d6a4:	2b03      	cmp	r3, #3
   2d6a6:	d101      	bne.n	2d6ac <chk_mounted+0x194>
   2d6a8:	2301      	movs	r3, #1
   2d6aa:	e209      	b.n	2dac0 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2d6ac:	2347      	movs	r3, #71	; 0x47
   2d6ae:	18fb      	adds	r3, r7, r3
   2d6b0:	781b      	ldrb	r3, [r3, #0]
   2d6b2:	2b00      	cmp	r3, #0
   2d6b4:	d001      	beq.n	2d6ba <chk_mounted+0x1a2>
   2d6b6:	230d      	movs	r3, #13
   2d6b8:	e202      	b.n	2dac0 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2d6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6bc:	223c      	movs	r2, #60	; 0x3c
   2d6be:	5c9b      	ldrb	r3, [r3, r2]
   2d6c0:	021b      	lsls	r3, r3, #8
   2d6c2:	b21a      	sxth	r2, r3
   2d6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6c6:	213b      	movs	r1, #59	; 0x3b
   2d6c8:	5c5b      	ldrb	r3, [r3, r1]
   2d6ca:	b21b      	sxth	r3, r3
   2d6cc:	4313      	orrs	r3, r2
   2d6ce:	b21a      	sxth	r2, r3
   2d6d0:	2380      	movs	r3, #128	; 0x80
   2d6d2:	009b      	lsls	r3, r3, #2
   2d6d4:	429a      	cmp	r2, r3
   2d6d6:	d001      	beq.n	2d6dc <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2d6d8:	230d      	movs	r3, #13
   2d6da:	e1f1      	b.n	2dac0 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2d6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6de:	2247      	movs	r2, #71	; 0x47
   2d6e0:	5c9b      	ldrb	r3, [r3, r2]
   2d6e2:	021b      	lsls	r3, r3, #8
   2d6e4:	b21a      	sxth	r2, r3
   2d6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6e8:	2146      	movs	r1, #70	; 0x46
   2d6ea:	5c5b      	ldrb	r3, [r3, r1]
   2d6ec:	b21b      	sxth	r3, r3
   2d6ee:	4313      	orrs	r3, r2
   2d6f0:	b21b      	sxth	r3, r3
   2d6f2:	b29b      	uxth	r3, r3
   2d6f4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2d6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d6f8:	2b00      	cmp	r3, #0
   2d6fa:	d112      	bne.n	2d722 <chk_mounted+0x20a>
   2d6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d6fe:	2257      	movs	r2, #87	; 0x57
   2d700:	5c9b      	ldrb	r3, [r3, r2]
   2d702:	061a      	lsls	r2, r3, #24
   2d704:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d706:	2156      	movs	r1, #86	; 0x56
   2d708:	5c5b      	ldrb	r3, [r3, r1]
   2d70a:	041b      	lsls	r3, r3, #16
   2d70c:	4313      	orrs	r3, r2
   2d70e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d710:	2155      	movs	r1, #85	; 0x55
   2d712:	5c52      	ldrb	r2, [r2, r1]
   2d714:	0212      	lsls	r2, r2, #8
   2d716:	4313      	orrs	r3, r2
   2d718:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d71a:	2154      	movs	r1, #84	; 0x54
   2d71c:	5c52      	ldrb	r2, [r2, r1]
   2d71e:	4313      	orrs	r3, r2
   2d720:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2d722:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d724:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2d726:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2d728:	231f      	movs	r3, #31
   2d72a:	18fb      	adds	r3, r7, r3
   2d72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d72e:	2140      	movs	r1, #64	; 0x40
   2d730:	5c52      	ldrb	r2, [r2, r1]
   2d732:	701a      	strb	r2, [r3, #0]
   2d734:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d736:	221f      	movs	r2, #31
   2d738:	18ba      	adds	r2, r7, r2
   2d73a:	7812      	ldrb	r2, [r2, #0]
   2d73c:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2d73e:	231f      	movs	r3, #31
   2d740:	18fb      	adds	r3, r7, r3
   2d742:	781b      	ldrb	r3, [r3, #0]
   2d744:	2b01      	cmp	r3, #1
   2d746:	d006      	beq.n	2d756 <chk_mounted+0x23e>
   2d748:	231f      	movs	r3, #31
   2d74a:	18fb      	adds	r3, r7, r3
   2d74c:	781b      	ldrb	r3, [r3, #0]
   2d74e:	2b02      	cmp	r3, #2
   2d750:	d001      	beq.n	2d756 <chk_mounted+0x23e>
   2d752:	230d      	movs	r3, #13
   2d754:	e1b4      	b.n	2dac0 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2d756:	231f      	movs	r3, #31
   2d758:	18fb      	adds	r3, r7, r3
   2d75a:	781a      	ldrb	r2, [r3, #0]
   2d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d75e:	4353      	muls	r3, r2
   2d760:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2d762:	231f      	movs	r3, #31
   2d764:	18fb      	adds	r3, r7, r3
   2d766:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d768:	213d      	movs	r1, #61	; 0x3d
   2d76a:	5c52      	ldrb	r2, [r2, r1]
   2d76c:	701a      	strb	r2, [r3, #0]
   2d76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d770:	221f      	movs	r2, #31
   2d772:	18ba      	adds	r2, r7, r2
   2d774:	7812      	ldrb	r2, [r2, #0]
   2d776:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2d778:	231f      	movs	r3, #31
   2d77a:	18fb      	adds	r3, r7, r3
   2d77c:	781b      	ldrb	r3, [r3, #0]
   2d77e:	2b00      	cmp	r3, #0
   2d780:	d008      	beq.n	2d794 <chk_mounted+0x27c>
   2d782:	231f      	movs	r3, #31
   2d784:	18fb      	adds	r3, r7, r3
   2d786:	781b      	ldrb	r3, [r3, #0]
   2d788:	221f      	movs	r2, #31
   2d78a:	18ba      	adds	r2, r7, r2
   2d78c:	7812      	ldrb	r2, [r2, #0]
   2d78e:	3a01      	subs	r2, #1
   2d790:	4013      	ands	r3, r2
   2d792:	d001      	beq.n	2d798 <chk_mounted+0x280>
   2d794:	230d      	movs	r3, #13
   2d796:	e193      	b.n	2dac0 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d79a:	2242      	movs	r2, #66	; 0x42
   2d79c:	5c9b      	ldrb	r3, [r3, r2]
   2d79e:	021b      	lsls	r3, r3, #8
   2d7a0:	b21a      	sxth	r2, r3
   2d7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7a4:	2141      	movs	r1, #65	; 0x41
   2d7a6:	5c5b      	ldrb	r3, [r3, r1]
   2d7a8:	b21b      	sxth	r3, r3
   2d7aa:	4313      	orrs	r3, r2
   2d7ac:	b21b      	sxth	r3, r3
   2d7ae:	b29a      	uxth	r2, r3
   2d7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7b2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7b6:	891b      	ldrh	r3, [r3, #8]
   2d7b8:	220f      	movs	r2, #15
   2d7ba:	4013      	ands	r3, r2
   2d7bc:	b29b      	uxth	r3, r3
   2d7be:	2b00      	cmp	r3, #0
   2d7c0:	d001      	beq.n	2d7c6 <chk_mounted+0x2ae>
   2d7c2:	230d      	movs	r3, #13
   2d7c4:	e17c      	b.n	2dac0 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2d7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7c8:	2244      	movs	r2, #68	; 0x44
   2d7ca:	5c9b      	ldrb	r3, [r3, r2]
   2d7cc:	021b      	lsls	r3, r3, #8
   2d7ce:	b21a      	sxth	r2, r3
   2d7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7d2:	2143      	movs	r1, #67	; 0x43
   2d7d4:	5c5b      	ldrb	r3, [r3, r1]
   2d7d6:	b21b      	sxth	r3, r3
   2d7d8:	4313      	orrs	r3, r2
   2d7da:	b21b      	sxth	r3, r3
   2d7dc:	b29b      	uxth	r3, r3
   2d7de:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2d7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d7e2:	2b00      	cmp	r3, #0
   2d7e4:	d112      	bne.n	2d80c <chk_mounted+0x2f4>
   2d7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7e8:	2253      	movs	r2, #83	; 0x53
   2d7ea:	5c9b      	ldrb	r3, [r3, r2]
   2d7ec:	061a      	lsls	r2, r3, #24
   2d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d7f0:	2152      	movs	r1, #82	; 0x52
   2d7f2:	5c5b      	ldrb	r3, [r3, r1]
   2d7f4:	041b      	lsls	r3, r3, #16
   2d7f6:	4313      	orrs	r3, r2
   2d7f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d7fa:	2151      	movs	r1, #81	; 0x51
   2d7fc:	5c52      	ldrb	r2, [r2, r1]
   2d7fe:	0212      	lsls	r2, r2, #8
   2d800:	4313      	orrs	r3, r2
   2d802:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d804:	2150      	movs	r1, #80	; 0x50
   2d806:	5c52      	ldrb	r2, [r2, r1]
   2d808:	4313      	orrs	r3, r2
   2d80a:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d80e:	223f      	movs	r2, #63	; 0x3f
   2d810:	5c9b      	ldrb	r3, [r3, r2]
   2d812:	021b      	lsls	r3, r3, #8
   2d814:	b21a      	sxth	r2, r3
   2d816:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d818:	213e      	movs	r1, #62	; 0x3e
   2d81a:	5c5b      	ldrb	r3, [r3, r1]
   2d81c:	b21b      	sxth	r3, r3
   2d81e:	4313      	orrs	r3, r2
   2d820:	b21a      	sxth	r2, r3
   2d822:	231c      	movs	r3, #28
   2d824:	18fb      	adds	r3, r7, r3
   2d826:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2d828:	231c      	movs	r3, #28
   2d82a:	18fb      	adds	r3, r7, r3
   2d82c:	881b      	ldrh	r3, [r3, #0]
   2d82e:	2b00      	cmp	r3, #0
   2d830:	d101      	bne.n	2d836 <chk_mounted+0x31e>
   2d832:	230d      	movs	r3, #13
   2d834:	e144      	b.n	2dac0 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2d836:	231c      	movs	r3, #28
   2d838:	18fb      	adds	r3, r7, r3
   2d83a:	881a      	ldrh	r2, [r3, #0]
   2d83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d83e:	18d3      	adds	r3, r2, r3
   2d840:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d842:	8912      	ldrh	r2, [r2, #8]
   2d844:	0912      	lsrs	r2, r2, #4
   2d846:	b292      	uxth	r2, r2
   2d848:	189b      	adds	r3, r3, r2
   2d84a:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2d84c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d84e:	69bb      	ldr	r3, [r7, #24]
   2d850:	429a      	cmp	r2, r3
   2d852:	d201      	bcs.n	2d858 <chk_mounted+0x340>
   2d854:	230d      	movs	r3, #13
   2d856:	e133      	b.n	2dac0 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2d858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2d85a:	69bb      	ldr	r3, [r7, #24]
   2d85c:	1ad2      	subs	r2, r2, r3
   2d85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d860:	789b      	ldrb	r3, [r3, #2]
   2d862:	0019      	movs	r1, r3
   2d864:	4b08      	ldr	r3, [pc, #32]	; (2d888 <chk_mounted+0x370>)
   2d866:	0010      	movs	r0, r2
   2d868:	4798      	blx	r3
   2d86a:	0003      	movs	r3, r0
   2d86c:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2d86e:	697b      	ldr	r3, [r7, #20]
   2d870:	2b00      	cmp	r3, #0
   2d872:	d10b      	bne.n	2d88c <chk_mounted+0x374>
   2d874:	230d      	movs	r3, #13
   2d876:	e123      	b.n	2dac0 <chk_mounted+0x5a8>
   2d878:	20003ee8 	.word	0x20003ee8
   2d87c:	0002b675 	.word	0x0002b675
   2d880:	0002b5f1 	.word	0x0002b5f1
   2d884:	0002d445 	.word	0x0002d445
   2d888:	00032c65 	.word	0x00032c65
	fmt = FS_FAT12;
   2d88c:	2347      	movs	r3, #71	; 0x47
   2d88e:	18fb      	adds	r3, r7, r3
   2d890:	2201      	movs	r2, #1
   2d892:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2d894:	697b      	ldr	r3, [r7, #20]
   2d896:	4a8c      	ldr	r2, [pc, #560]	; (2dac8 <chk_mounted+0x5b0>)
   2d898:	4293      	cmp	r3, r2
   2d89a:	d903      	bls.n	2d8a4 <chk_mounted+0x38c>
   2d89c:	2347      	movs	r3, #71	; 0x47
   2d89e:	18fb      	adds	r3, r7, r3
   2d8a0:	2202      	movs	r2, #2
   2d8a2:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2d8a4:	697b      	ldr	r3, [r7, #20]
   2d8a6:	4a89      	ldr	r2, [pc, #548]	; (2dacc <chk_mounted+0x5b4>)
   2d8a8:	4293      	cmp	r3, r2
   2d8aa:	d903      	bls.n	2d8b4 <chk_mounted+0x39c>
   2d8ac:	2347      	movs	r3, #71	; 0x47
   2d8ae:	18fb      	adds	r3, r7, r3
   2d8b0:	2203      	movs	r2, #3
   2d8b2:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2d8b4:	697b      	ldr	r3, [r7, #20]
   2d8b6:	1c9a      	adds	r2, r3, #2
   2d8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8ba:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2d8bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2d8be:	69bb      	ldr	r3, [r7, #24]
   2d8c0:	18d2      	adds	r2, r2, r3
   2d8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8c4:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2d8c6:	231c      	movs	r3, #28
   2d8c8:	18fb      	adds	r3, r7, r3
   2d8ca:	881a      	ldrh	r2, [r3, #0]
   2d8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d8ce:	18d2      	adds	r2, r2, r3
   2d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8d2:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2d8d4:	2347      	movs	r3, #71	; 0x47
   2d8d6:	18fb      	adds	r3, r7, r3
   2d8d8:	781b      	ldrb	r3, [r3, #0]
   2d8da:	2b03      	cmp	r3, #3
   2d8dc:	d11e      	bne.n	2d91c <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8e0:	891b      	ldrh	r3, [r3, #8]
   2d8e2:	2b00      	cmp	r3, #0
   2d8e4:	d001      	beq.n	2d8ea <chk_mounted+0x3d2>
   2d8e6:	230d      	movs	r3, #13
   2d8e8:	e0ea      	b.n	2dac0 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8ec:	225f      	movs	r2, #95	; 0x5f
   2d8ee:	5c9b      	ldrb	r3, [r3, r2]
   2d8f0:	061a      	lsls	r2, r3, #24
   2d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d8f4:	215e      	movs	r1, #94	; 0x5e
   2d8f6:	5c5b      	ldrb	r3, [r3, r1]
   2d8f8:	041b      	lsls	r3, r3, #16
   2d8fa:	4313      	orrs	r3, r2
   2d8fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d8fe:	215d      	movs	r1, #93	; 0x5d
   2d900:	5c52      	ldrb	r2, [r2, r1]
   2d902:	0212      	lsls	r2, r2, #8
   2d904:	4313      	orrs	r3, r2
   2d906:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d908:	215c      	movs	r1, #92	; 0x5c
   2d90a:	5c52      	ldrb	r2, [r2, r1]
   2d90c:	431a      	orrs	r2, r3
   2d90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d910:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2d912:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d914:	699b      	ldr	r3, [r3, #24]
   2d916:	009b      	lsls	r3, r3, #2
   2d918:	633b      	str	r3, [r7, #48]	; 0x30
   2d91a:	e020      	b.n	2d95e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2d91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d91e:	891b      	ldrh	r3, [r3, #8]
   2d920:	2b00      	cmp	r3, #0
   2d922:	d101      	bne.n	2d928 <chk_mounted+0x410>
   2d924:	230d      	movs	r3, #13
   2d926:	e0cb      	b.n	2dac0 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2d928:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d92a:	6a1a      	ldr	r2, [r3, #32]
   2d92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2d92e:	18d2      	adds	r2, r2, r3
   2d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d932:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2d934:	2347      	movs	r3, #71	; 0x47
   2d936:	18fb      	adds	r3, r7, r3
   2d938:	781b      	ldrb	r3, [r3, #0]
   2d93a:	2b02      	cmp	r3, #2
   2d93c:	d103      	bne.n	2d946 <chk_mounted+0x42e>
   2d93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d940:	699b      	ldr	r3, [r3, #24]
   2d942:	005b      	lsls	r3, r3, #1
   2d944:	e00a      	b.n	2d95c <chk_mounted+0x444>
   2d946:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d948:	699a      	ldr	r2, [r3, #24]
   2d94a:	0013      	movs	r3, r2
   2d94c:	005b      	lsls	r3, r3, #1
   2d94e:	189b      	adds	r3, r3, r2
   2d950:	085a      	lsrs	r2, r3, #1
   2d952:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d954:	699b      	ldr	r3, [r3, #24]
   2d956:	2101      	movs	r1, #1
   2d958:	400b      	ands	r3, r1
   2d95a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2d95c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2d95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d960:	69da      	ldr	r2, [r3, #28]
   2d962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d964:	495a      	ldr	r1, [pc, #360]	; (2dad0 <chk_mounted+0x5b8>)
   2d966:	468c      	mov	ip, r1
   2d968:	4463      	add	r3, ip
   2d96a:	0a5b      	lsrs	r3, r3, #9
   2d96c:	429a      	cmp	r2, r3
   2d96e:	d201      	bcs.n	2d974 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2d970:	230d      	movs	r3, #13
   2d972:	e0a5      	b.n	2dac0 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2d974:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d976:	2201      	movs	r2, #1
   2d978:	4252      	negs	r2, r2
   2d97a:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2d97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d97e:	2200      	movs	r2, #0
   2d980:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2d982:	2347      	movs	r3, #71	; 0x47
   2d984:	18fb      	adds	r3, r7, r3
   2d986:	781b      	ldrb	r3, [r3, #0]
   2d988:	2b03      	cmp	r3, #3
   2d98a:	d000      	beq.n	2d98e <chk_mounted+0x476>
   2d98c:	e082      	b.n	2da94 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2d98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d990:	2200      	movs	r2, #0
   2d992:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d996:	2261      	movs	r2, #97	; 0x61
   2d998:	5c9b      	ldrb	r3, [r3, r2]
   2d99a:	021b      	lsls	r3, r3, #8
   2d99c:	b21a      	sxth	r2, r3
   2d99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9a0:	2160      	movs	r1, #96	; 0x60
   2d9a2:	5c5b      	ldrb	r3, [r3, r1]
   2d9a4:	b21b      	sxth	r3, r3
   2d9a6:	4313      	orrs	r3, r2
   2d9a8:	b21b      	sxth	r3, r3
   2d9aa:	b29b      	uxth	r3, r3
   2d9ac:	001a      	movs	r2, r3
   2d9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d9b0:	18d2      	adds	r2, r2, r3
   2d9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9b4:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9b8:	7858      	ldrb	r0, [r3, #1]
   2d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9bc:	3330      	adds	r3, #48	; 0x30
   2d9be:	0019      	movs	r1, r3
   2d9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9c2:	695a      	ldr	r2, [r3, #20]
   2d9c4:	2301      	movs	r3, #1
   2d9c6:	4c43      	ldr	r4, [pc, #268]	; (2dad4 <chk_mounted+0x5bc>)
   2d9c8:	47a0      	blx	r4
   2d9ca:	1e03      	subs	r3, r0, #0
   2d9cc:	d162      	bne.n	2da94 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2d9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9d0:	4a41      	ldr	r2, [pc, #260]	; (2dad8 <chk_mounted+0x5c0>)
   2d9d2:	5c9b      	ldrb	r3, [r3, r2]
   2d9d4:	021b      	lsls	r3, r3, #8
   2d9d6:	b21a      	sxth	r2, r3
   2d9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9da:	4940      	ldr	r1, [pc, #256]	; (2dadc <chk_mounted+0x5c4>)
   2d9dc:	5c5b      	ldrb	r3, [r3, r1]
   2d9de:	b21b      	sxth	r3, r3
   2d9e0:	4313      	orrs	r3, r2
   2d9e2:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2d9e4:	4a3e      	ldr	r2, [pc, #248]	; (2dae0 <chk_mounted+0x5c8>)
   2d9e6:	4293      	cmp	r3, r2
   2d9e8:	d154      	bne.n	2da94 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2d9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9ec:	2233      	movs	r2, #51	; 0x33
   2d9ee:	5c9b      	ldrb	r3, [r3, r2]
   2d9f0:	061a      	lsls	r2, r3, #24
   2d9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2d9f4:	2132      	movs	r1, #50	; 0x32
   2d9f6:	5c5b      	ldrb	r3, [r3, r1]
   2d9f8:	041b      	lsls	r3, r3, #16
   2d9fa:	4313      	orrs	r3, r2
   2d9fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2d9fe:	2131      	movs	r1, #49	; 0x31
   2da00:	5c52      	ldrb	r2, [r2, r1]
   2da02:	0212      	lsls	r2, r2, #8
   2da04:	4313      	orrs	r3, r2
   2da06:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da08:	2130      	movs	r1, #48	; 0x30
   2da0a:	5c52      	ldrb	r2, [r2, r1]
   2da0c:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2da0e:	4a35      	ldr	r2, [pc, #212]	; (2dae4 <chk_mounted+0x5cc>)
   2da10:	4293      	cmp	r3, r2
   2da12:	d13f      	bne.n	2da94 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2da14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da16:	4a34      	ldr	r2, [pc, #208]	; (2dae8 <chk_mounted+0x5d0>)
   2da18:	5c9b      	ldrb	r3, [r3, r2]
   2da1a:	061a      	lsls	r2, r3, #24
   2da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da1e:	4933      	ldr	r1, [pc, #204]	; (2daec <chk_mounted+0x5d4>)
   2da20:	5c5b      	ldrb	r3, [r3, r1]
   2da22:	041b      	lsls	r3, r3, #16
   2da24:	4313      	orrs	r3, r2
   2da26:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da28:	4931      	ldr	r1, [pc, #196]	; (2daf0 <chk_mounted+0x5d8>)
   2da2a:	5c52      	ldrb	r2, [r2, r1]
   2da2c:	0212      	lsls	r2, r2, #8
   2da2e:	4313      	orrs	r3, r2
   2da30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2da32:	2285      	movs	r2, #133	; 0x85
   2da34:	0092      	lsls	r2, r2, #2
   2da36:	5c8a      	ldrb	r2, [r1, r2]
   2da38:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2da3a:	4a2e      	ldr	r2, [pc, #184]	; (2daf4 <chk_mounted+0x5dc>)
   2da3c:	4293      	cmp	r3, r2
   2da3e:	d129      	bne.n	2da94 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da42:	4a2d      	ldr	r2, [pc, #180]	; (2daf8 <chk_mounted+0x5e0>)
   2da44:	5c9b      	ldrb	r3, [r3, r2]
   2da46:	061a      	lsls	r2, r3, #24
   2da48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da4a:	492c      	ldr	r1, [pc, #176]	; (2dafc <chk_mounted+0x5e4>)
   2da4c:	5c5b      	ldrb	r3, [r3, r1]
   2da4e:	041b      	lsls	r3, r3, #16
   2da50:	4313      	orrs	r3, r2
   2da52:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da54:	492a      	ldr	r1, [pc, #168]	; (2db00 <chk_mounted+0x5e8>)
   2da56:	5c52      	ldrb	r2, [r2, r1]
   2da58:	0212      	lsls	r2, r2, #8
   2da5a:	4313      	orrs	r3, r2
   2da5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2da5e:	2287      	movs	r2, #135	; 0x87
   2da60:	0092      	lsls	r2, r2, #2
   2da62:	5c8a      	ldrb	r2, [r1, r2]
   2da64:	431a      	orrs	r2, r3
   2da66:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da68:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2da6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da6c:	4a25      	ldr	r2, [pc, #148]	; (2db04 <chk_mounted+0x5ec>)
   2da6e:	5c9b      	ldrb	r3, [r3, r2]
   2da70:	061a      	lsls	r2, r3, #24
   2da72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da74:	4924      	ldr	r1, [pc, #144]	; (2db08 <chk_mounted+0x5f0>)
   2da76:	5c5b      	ldrb	r3, [r3, r1]
   2da78:	041b      	lsls	r3, r3, #16
   2da7a:	4313      	orrs	r3, r2
   2da7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2da7e:	4923      	ldr	r1, [pc, #140]	; (2db0c <chk_mounted+0x5f4>)
   2da80:	5c52      	ldrb	r2, [r2, r1]
   2da82:	0212      	lsls	r2, r2, #8
   2da84:	4313      	orrs	r3, r2
   2da86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2da88:	2286      	movs	r2, #134	; 0x86
   2da8a:	0092      	lsls	r2, r2, #2
   2da8c:	5c8a      	ldrb	r2, [r1, r2]
   2da8e:	431a      	orrs	r2, r3
   2da90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da92:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2da94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2da96:	2247      	movs	r2, #71	; 0x47
   2da98:	18ba      	adds	r2, r7, r2
   2da9a:	7812      	ldrb	r2, [r2, #0]
   2da9c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2da9e:	4b1c      	ldr	r3, [pc, #112]	; (2db10 <chk_mounted+0x5f8>)
   2daa0:	881b      	ldrh	r3, [r3, #0]
   2daa2:	3301      	adds	r3, #1
   2daa4:	b29a      	uxth	r2, r3
   2daa6:	4b1a      	ldr	r3, [pc, #104]	; (2db10 <chk_mounted+0x5f8>)
   2daa8:	801a      	strh	r2, [r3, #0]
   2daaa:	4b19      	ldr	r3, [pc, #100]	; (2db10 <chk_mounted+0x5f8>)
   2daac:	881a      	ldrh	r2, [r3, #0]
   2daae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dab0:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2dab4:	2200      	movs	r2, #0
   2dab6:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2daba:	2200      	movs	r2, #0
   2dabc:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2dabe:	2300      	movs	r3, #0
}
   2dac0:	0018      	movs	r0, r3
   2dac2:	46bd      	mov	sp, r7
   2dac4:	b013      	add	sp, #76	; 0x4c
   2dac6:	bd90      	pop	{r4, r7, pc}
   2dac8:	00000ff5 	.word	0x00000ff5
   2dacc:	0000fff5 	.word	0x0000fff5
   2dad0:	000001ff 	.word	0x000001ff
   2dad4:	0002b6ad 	.word	0x0002b6ad
   2dad8:	0000022f 	.word	0x0000022f
   2dadc:	0000022e 	.word	0x0000022e
   2dae0:	ffffaa55 	.word	0xffffaa55
   2dae4:	41615252 	.word	0x41615252
   2dae8:	00000217 	.word	0x00000217
   2daec:	00000216 	.word	0x00000216
   2daf0:	00000215 	.word	0x00000215
   2daf4:	61417272 	.word	0x61417272
   2daf8:	0000021f 	.word	0x0000021f
   2dafc:	0000021e 	.word	0x0000021e
   2db00:	0000021d 	.word	0x0000021d
   2db04:	0000021b 	.word	0x0000021b
   2db08:	0000021a 	.word	0x0000021a
   2db0c:	00000219 	.word	0x00000219
   2db10:	20003f08 	.word	0x20003f08

0002db14 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2db14:	b580      	push	{r7, lr}
   2db16:	b082      	sub	sp, #8
   2db18:	af00      	add	r7, sp, #0
   2db1a:	6078      	str	r0, [r7, #4]
   2db1c:	000a      	movs	r2, r1
   2db1e:	1cbb      	adds	r3, r7, #2
   2db20:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2db22:	687b      	ldr	r3, [r7, #4]
   2db24:	2b00      	cmp	r3, #0
   2db26:	d009      	beq.n	2db3c <validate+0x28>
   2db28:	687b      	ldr	r3, [r7, #4]
   2db2a:	781b      	ldrb	r3, [r3, #0]
   2db2c:	2b00      	cmp	r3, #0
   2db2e:	d005      	beq.n	2db3c <validate+0x28>
   2db30:	687b      	ldr	r3, [r7, #4]
   2db32:	88db      	ldrh	r3, [r3, #6]
   2db34:	1cba      	adds	r2, r7, #2
   2db36:	8812      	ldrh	r2, [r2, #0]
   2db38:	429a      	cmp	r2, r3
   2db3a:	d001      	beq.n	2db40 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2db3c:	2309      	movs	r3, #9
   2db3e:	e00c      	b.n	2db5a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2db40:	687b      	ldr	r3, [r7, #4]
   2db42:	785b      	ldrb	r3, [r3, #1]
   2db44:	0018      	movs	r0, r3
   2db46:	4b07      	ldr	r3, [pc, #28]	; (2db64 <validate+0x50>)
   2db48:	4798      	blx	r3
   2db4a:	0003      	movs	r3, r0
   2db4c:	001a      	movs	r2, r3
   2db4e:	2301      	movs	r3, #1
   2db50:	4013      	ands	r3, r2
   2db52:	d001      	beq.n	2db58 <validate+0x44>
		return FR_NOT_READY;
   2db54:	2303      	movs	r3, #3
   2db56:	e000      	b.n	2db5a <validate+0x46>

	return FR_OK;
   2db58:	2300      	movs	r3, #0
}
   2db5a:	0018      	movs	r0, r3
   2db5c:	46bd      	mov	sp, r7
   2db5e:	b002      	add	sp, #8
   2db60:	bd80      	pop	{r7, pc}
   2db62:	46c0      	nop			; (mov r8, r8)
   2db64:	0002b675 	.word	0x0002b675

0002db68 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2db68:	b590      	push	{r4, r7, lr}
   2db6a:	4ce5      	ldr	r4, [pc, #916]	; (2df00 <f_open+0x398>)
   2db6c:	44a5      	add	sp, r4
   2db6e:	af00      	add	r7, sp, #0
   2db70:	60f8      	str	r0, [r7, #12]
   2db72:	60b9      	str	r1, [r7, #8]
   2db74:	4be3      	ldr	r3, [pc, #908]	; (2df04 <f_open+0x39c>)
   2db76:	2194      	movs	r1, #148	; 0x94
   2db78:	0089      	lsls	r1, r1, #2
   2db7a:	468c      	mov	ip, r1
   2db7c:	44bc      	add	ip, r7
   2db7e:	4463      	add	r3, ip
   2db80:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2db82:	68fb      	ldr	r3, [r7, #12]
   2db84:	2200      	movs	r2, #0
   2db86:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2db88:	4bde      	ldr	r3, [pc, #888]	; (2df04 <f_open+0x39c>)
   2db8a:	2294      	movs	r2, #148	; 0x94
   2db8c:	0092      	lsls	r2, r2, #2
   2db8e:	4694      	mov	ip, r2
   2db90:	44bc      	add	ip, r7
   2db92:	4463      	add	r3, ip
   2db94:	4adb      	ldr	r2, [pc, #876]	; (2df04 <f_open+0x39c>)
   2db96:	2194      	movs	r1, #148	; 0x94
   2db98:	0089      	lsls	r1, r1, #2
   2db9a:	468c      	mov	ip, r1
   2db9c:	44bc      	add	ip, r7
   2db9e:	4462      	add	r2, ip
   2dba0:	7812      	ldrb	r2, [r2, #0]
   2dba2:	211f      	movs	r1, #31
   2dba4:	400a      	ands	r2, r1
   2dba6:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2dba8:	4bd6      	ldr	r3, [pc, #856]	; (2df04 <f_open+0x39c>)
   2dbaa:	2294      	movs	r2, #148	; 0x94
   2dbac:	0092      	lsls	r2, r2, #2
   2dbae:	4694      	mov	ip, r2
   2dbb0:	44bc      	add	ip, r7
   2dbb2:	4463      	add	r3, ip
   2dbb4:	781b      	ldrb	r3, [r3, #0]
   2dbb6:	2201      	movs	r2, #1
   2dbb8:	4393      	bics	r3, r2
   2dbba:	b2da      	uxtb	r2, r3
   2dbbc:	4bd2      	ldr	r3, [pc, #840]	; (2df08 <f_open+0x3a0>)
   2dbbe:	18fc      	adds	r4, r7, r3
   2dbc0:	2387      	movs	r3, #135	; 0x87
   2dbc2:	009b      	lsls	r3, r3, #2
   2dbc4:	18f9      	adds	r1, r7, r3
   2dbc6:	2308      	movs	r3, #8
   2dbc8:	18fb      	adds	r3, r7, r3
   2dbca:	0018      	movs	r0, r3
   2dbcc:	4bcf      	ldr	r3, [pc, #828]	; (2df0c <f_open+0x3a4>)
   2dbce:	4798      	blx	r3
   2dbd0:	0003      	movs	r3, r0
   2dbd2:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2dbd4:	2387      	movs	r3, #135	; 0x87
   2dbd6:	009b      	lsls	r3, r3, #2
   2dbd8:	18fb      	adds	r3, r7, r3
   2dbda:	2284      	movs	r2, #132	; 0x84
   2dbdc:	0092      	lsls	r2, r2, #2
   2dbde:	18ba      	adds	r2, r7, r2
   2dbe0:	619a      	str	r2, [r3, #24]
   2dbe2:	2387      	movs	r3, #135	; 0x87
   2dbe4:	009b      	lsls	r3, r3, #2
   2dbe6:	18fb      	adds	r3, r7, r3
   2dbe8:	2210      	movs	r2, #16
   2dbea:	18ba      	adds	r2, r7, r2
   2dbec:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2dbee:	4bc6      	ldr	r3, [pc, #792]	; (2df08 <f_open+0x3a0>)
   2dbf0:	18fb      	adds	r3, r7, r3
   2dbf2:	781b      	ldrb	r3, [r3, #0]
   2dbf4:	2b00      	cmp	r3, #0
   2dbf6:	d10b      	bne.n	2dc10 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2dbf8:	68ba      	ldr	r2, [r7, #8]
   2dbfa:	4bc3      	ldr	r3, [pc, #780]	; (2df08 <f_open+0x3a0>)
   2dbfc:	18fc      	adds	r4, r7, r3
   2dbfe:	2387      	movs	r3, #135	; 0x87
   2dc00:	009b      	lsls	r3, r3, #2
   2dc02:	18fb      	adds	r3, r7, r3
   2dc04:	0011      	movs	r1, r2
   2dc06:	0018      	movs	r0, r3
   2dc08:	4bc1      	ldr	r3, [pc, #772]	; (2df10 <f_open+0x3a8>)
   2dc0a:	4798      	blx	r3
   2dc0c:	0003      	movs	r3, r0
   2dc0e:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2dc10:	2387      	movs	r3, #135	; 0x87
   2dc12:	009b      	lsls	r3, r3, #2
   2dc14:	18fb      	adds	r3, r7, r3
   2dc16:	695b      	ldr	r3, [r3, #20]
   2dc18:	2292      	movs	r2, #146	; 0x92
   2dc1a:	0092      	lsls	r2, r2, #2
   2dc1c:	18ba      	adds	r2, r7, r2
   2dc1e:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2dc20:	4bb9      	ldr	r3, [pc, #740]	; (2df08 <f_open+0x3a0>)
   2dc22:	18fb      	adds	r3, r7, r3
   2dc24:	781b      	ldrb	r3, [r3, #0]
   2dc26:	2b00      	cmp	r3, #0
   2dc28:	d109      	bne.n	2dc3e <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2dc2a:	2392      	movs	r3, #146	; 0x92
   2dc2c:	009b      	lsls	r3, r3, #2
   2dc2e:	18fb      	adds	r3, r7, r3
   2dc30:	681b      	ldr	r3, [r3, #0]
   2dc32:	2b00      	cmp	r3, #0
   2dc34:	d103      	bne.n	2dc3e <f_open+0xd6>
			res = FR_INVALID_NAME;
   2dc36:	4bb4      	ldr	r3, [pc, #720]	; (2df08 <f_open+0x3a0>)
   2dc38:	18fb      	adds	r3, r7, r3
   2dc3a:	2206      	movs	r2, #6
   2dc3c:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2dc3e:	4bb1      	ldr	r3, [pc, #708]	; (2df04 <f_open+0x39c>)
   2dc40:	2294      	movs	r2, #148	; 0x94
   2dc42:	0092      	lsls	r2, r2, #2
   2dc44:	4694      	mov	ip, r2
   2dc46:	44bc      	add	ip, r7
   2dc48:	4463      	add	r3, ip
   2dc4a:	781b      	ldrb	r3, [r3, #0]
   2dc4c:	221c      	movs	r2, #28
   2dc4e:	4013      	ands	r3, r2
   2dc50:	d100      	bne.n	2dc54 <f_open+0xec>
   2dc52:	e141      	b.n	2ded8 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2dc54:	4bac      	ldr	r3, [pc, #688]	; (2df08 <f_open+0x3a0>)
   2dc56:	18fb      	adds	r3, r7, r3
   2dc58:	781b      	ldrb	r3, [r3, #0]
   2dc5a:	2b00      	cmp	r3, #0
   2dc5c:	d027      	beq.n	2dcae <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2dc5e:	4baa      	ldr	r3, [pc, #680]	; (2df08 <f_open+0x3a0>)
   2dc60:	18fb      	adds	r3, r7, r3
   2dc62:	781b      	ldrb	r3, [r3, #0]
   2dc64:	2b04      	cmp	r3, #4
   2dc66:	d109      	bne.n	2dc7c <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2dc68:	4ba7      	ldr	r3, [pc, #668]	; (2df08 <f_open+0x3a0>)
   2dc6a:	18fc      	adds	r4, r7, r3
   2dc6c:	2387      	movs	r3, #135	; 0x87
   2dc6e:	009b      	lsls	r3, r3, #2
   2dc70:	18fb      	adds	r3, r7, r3
   2dc72:	0018      	movs	r0, r3
   2dc74:	4ba7      	ldr	r3, [pc, #668]	; (2df14 <f_open+0x3ac>)
   2dc76:	4798      	blx	r3
   2dc78:	0003      	movs	r3, r0
   2dc7a:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2dc7c:	4ba1      	ldr	r3, [pc, #644]	; (2df04 <f_open+0x39c>)
   2dc7e:	2294      	movs	r2, #148	; 0x94
   2dc80:	0092      	lsls	r2, r2, #2
   2dc82:	4694      	mov	ip, r2
   2dc84:	44bc      	add	ip, r7
   2dc86:	4463      	add	r3, ip
   2dc88:	4a9e      	ldr	r2, [pc, #632]	; (2df04 <f_open+0x39c>)
   2dc8a:	2194      	movs	r1, #148	; 0x94
   2dc8c:	0089      	lsls	r1, r1, #2
   2dc8e:	468c      	mov	ip, r1
   2dc90:	44bc      	add	ip, r7
   2dc92:	4462      	add	r2, ip
   2dc94:	7812      	ldrb	r2, [r2, #0]
   2dc96:	2108      	movs	r1, #8
   2dc98:	430a      	orrs	r2, r1
   2dc9a:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2dc9c:	2387      	movs	r3, #135	; 0x87
   2dc9e:	009b      	lsls	r3, r3, #2
   2dca0:	18fb      	adds	r3, r7, r3
   2dca2:	695b      	ldr	r3, [r3, #20]
   2dca4:	2292      	movs	r2, #146	; 0x92
   2dca6:	0092      	lsls	r2, r2, #2
   2dca8:	18ba      	adds	r2, r7, r2
   2dcaa:	6013      	str	r3, [r2, #0]
   2dcac:	e01c      	b.n	2dce8 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2dcae:	2392      	movs	r3, #146	; 0x92
   2dcb0:	009b      	lsls	r3, r3, #2
   2dcb2:	18fb      	adds	r3, r7, r3
   2dcb4:	681b      	ldr	r3, [r3, #0]
   2dcb6:	330b      	adds	r3, #11
   2dcb8:	781b      	ldrb	r3, [r3, #0]
   2dcba:	001a      	movs	r2, r3
   2dcbc:	2311      	movs	r3, #17
   2dcbe:	4013      	ands	r3, r2
   2dcc0:	d004      	beq.n	2dccc <f_open+0x164>
				res = FR_DENIED;
   2dcc2:	4b91      	ldr	r3, [pc, #580]	; (2df08 <f_open+0x3a0>)
   2dcc4:	18fb      	adds	r3, r7, r3
   2dcc6:	2207      	movs	r2, #7
   2dcc8:	701a      	strb	r2, [r3, #0]
   2dcca:	e00d      	b.n	2dce8 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2dccc:	4b8d      	ldr	r3, [pc, #564]	; (2df04 <f_open+0x39c>)
   2dcce:	2294      	movs	r2, #148	; 0x94
   2dcd0:	0092      	lsls	r2, r2, #2
   2dcd2:	4694      	mov	ip, r2
   2dcd4:	44bc      	add	ip, r7
   2dcd6:	4463      	add	r3, ip
   2dcd8:	781b      	ldrb	r3, [r3, #0]
   2dcda:	2204      	movs	r2, #4
   2dcdc:	4013      	ands	r3, r2
   2dcde:	d003      	beq.n	2dce8 <f_open+0x180>
					res = FR_EXIST;
   2dce0:	4b89      	ldr	r3, [pc, #548]	; (2df08 <f_open+0x3a0>)
   2dce2:	18fb      	adds	r3, r7, r3
   2dce4:	2208      	movs	r2, #8
   2dce6:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2dce8:	4b87      	ldr	r3, [pc, #540]	; (2df08 <f_open+0x3a0>)
   2dcea:	18fb      	adds	r3, r7, r3
   2dcec:	781b      	ldrb	r3, [r3, #0]
   2dcee:	2b00      	cmp	r3, #0
   2dcf0:	d000      	beq.n	2dcf4 <f_open+0x18c>
   2dcf2:	e12f      	b.n	2df54 <f_open+0x3ec>
   2dcf4:	4b83      	ldr	r3, [pc, #524]	; (2df04 <f_open+0x39c>)
   2dcf6:	2294      	movs	r2, #148	; 0x94
   2dcf8:	0092      	lsls	r2, r2, #2
   2dcfa:	4694      	mov	ip, r2
   2dcfc:	44bc      	add	ip, r7
   2dcfe:	4463      	add	r3, ip
   2dd00:	781b      	ldrb	r3, [r3, #0]
   2dd02:	2208      	movs	r2, #8
   2dd04:	4013      	ands	r3, r2
   2dd06:	d100      	bne.n	2dd0a <f_open+0x1a2>
   2dd08:	e124      	b.n	2df54 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2dd0a:	4b83      	ldr	r3, [pc, #524]	; (2df18 <f_open+0x3b0>)
   2dd0c:	4798      	blx	r3
   2dd0e:	0003      	movs	r3, r0
   2dd10:	2291      	movs	r2, #145	; 0x91
   2dd12:	0092      	lsls	r2, r2, #2
   2dd14:	18ba      	adds	r2, r7, r2
   2dd16:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2dd18:	2392      	movs	r3, #146	; 0x92
   2dd1a:	009b      	lsls	r3, r3, #2
   2dd1c:	18fb      	adds	r3, r7, r3
   2dd1e:	681b      	ldr	r3, [r3, #0]
   2dd20:	330e      	adds	r3, #14
   2dd22:	2291      	movs	r2, #145	; 0x91
   2dd24:	0092      	lsls	r2, r2, #2
   2dd26:	18ba      	adds	r2, r7, r2
   2dd28:	6812      	ldr	r2, [r2, #0]
   2dd2a:	b2d2      	uxtb	r2, r2
   2dd2c:	701a      	strb	r2, [r3, #0]
   2dd2e:	2392      	movs	r3, #146	; 0x92
   2dd30:	009b      	lsls	r3, r3, #2
   2dd32:	18fb      	adds	r3, r7, r3
   2dd34:	681b      	ldr	r3, [r3, #0]
   2dd36:	330f      	adds	r3, #15
   2dd38:	2291      	movs	r2, #145	; 0x91
   2dd3a:	0092      	lsls	r2, r2, #2
   2dd3c:	18ba      	adds	r2, r7, r2
   2dd3e:	6812      	ldr	r2, [r2, #0]
   2dd40:	b292      	uxth	r2, r2
   2dd42:	0a12      	lsrs	r2, r2, #8
   2dd44:	b292      	uxth	r2, r2
   2dd46:	b2d2      	uxtb	r2, r2
   2dd48:	701a      	strb	r2, [r3, #0]
   2dd4a:	2392      	movs	r3, #146	; 0x92
   2dd4c:	009b      	lsls	r3, r3, #2
   2dd4e:	18fb      	adds	r3, r7, r3
   2dd50:	681b      	ldr	r3, [r3, #0]
   2dd52:	3310      	adds	r3, #16
   2dd54:	2291      	movs	r2, #145	; 0x91
   2dd56:	0092      	lsls	r2, r2, #2
   2dd58:	18ba      	adds	r2, r7, r2
   2dd5a:	6812      	ldr	r2, [r2, #0]
   2dd5c:	0c12      	lsrs	r2, r2, #16
   2dd5e:	b2d2      	uxtb	r2, r2
   2dd60:	701a      	strb	r2, [r3, #0]
   2dd62:	2392      	movs	r3, #146	; 0x92
   2dd64:	009b      	lsls	r3, r3, #2
   2dd66:	18fb      	adds	r3, r7, r3
   2dd68:	681b      	ldr	r3, [r3, #0]
   2dd6a:	3311      	adds	r3, #17
   2dd6c:	2291      	movs	r2, #145	; 0x91
   2dd6e:	0092      	lsls	r2, r2, #2
   2dd70:	18ba      	adds	r2, r7, r2
   2dd72:	6812      	ldr	r2, [r2, #0]
   2dd74:	0e12      	lsrs	r2, r2, #24
   2dd76:	b2d2      	uxtb	r2, r2
   2dd78:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2dd7a:	2392      	movs	r3, #146	; 0x92
   2dd7c:	009b      	lsls	r3, r3, #2
   2dd7e:	18fb      	adds	r3, r7, r3
   2dd80:	681b      	ldr	r3, [r3, #0]
   2dd82:	330b      	adds	r3, #11
   2dd84:	2200      	movs	r2, #0
   2dd86:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2dd88:	2392      	movs	r3, #146	; 0x92
   2dd8a:	009b      	lsls	r3, r3, #2
   2dd8c:	18fb      	adds	r3, r7, r3
   2dd8e:	681b      	ldr	r3, [r3, #0]
   2dd90:	331c      	adds	r3, #28
   2dd92:	2200      	movs	r2, #0
   2dd94:	701a      	strb	r2, [r3, #0]
   2dd96:	2392      	movs	r3, #146	; 0x92
   2dd98:	009b      	lsls	r3, r3, #2
   2dd9a:	18fb      	adds	r3, r7, r3
   2dd9c:	681b      	ldr	r3, [r3, #0]
   2dd9e:	331d      	adds	r3, #29
   2dda0:	2200      	movs	r2, #0
   2dda2:	701a      	strb	r2, [r3, #0]
   2dda4:	2392      	movs	r3, #146	; 0x92
   2dda6:	009b      	lsls	r3, r3, #2
   2dda8:	18fb      	adds	r3, r7, r3
   2ddaa:	681b      	ldr	r3, [r3, #0]
   2ddac:	331e      	adds	r3, #30
   2ddae:	2200      	movs	r2, #0
   2ddb0:	701a      	strb	r2, [r3, #0]
   2ddb2:	2392      	movs	r3, #146	; 0x92
   2ddb4:	009b      	lsls	r3, r3, #2
   2ddb6:	18fb      	adds	r3, r7, r3
   2ddb8:	681b      	ldr	r3, [r3, #0]
   2ddba:	331f      	adds	r3, #31
   2ddbc:	2200      	movs	r2, #0
   2ddbe:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2ddc0:	2392      	movs	r3, #146	; 0x92
   2ddc2:	009b      	lsls	r3, r3, #2
   2ddc4:	18fb      	adds	r3, r7, r3
   2ddc6:	681b      	ldr	r3, [r3, #0]
   2ddc8:	3315      	adds	r3, #21
   2ddca:	781b      	ldrb	r3, [r3, #0]
   2ddcc:	021b      	lsls	r3, r3, #8
   2ddce:	b21a      	sxth	r2, r3
   2ddd0:	2392      	movs	r3, #146	; 0x92
   2ddd2:	009b      	lsls	r3, r3, #2
   2ddd4:	18fb      	adds	r3, r7, r3
   2ddd6:	681b      	ldr	r3, [r3, #0]
   2ddd8:	3314      	adds	r3, #20
   2ddda:	781b      	ldrb	r3, [r3, #0]
   2dddc:	b21b      	sxth	r3, r3
   2ddde:	4313      	orrs	r3, r2
   2dde0:	b21b      	sxth	r3, r3
   2dde2:	b29b      	uxth	r3, r3
   2dde4:	041b      	lsls	r3, r3, #16
   2dde6:	2292      	movs	r2, #146	; 0x92
   2dde8:	0092      	lsls	r2, r2, #2
   2ddea:	18ba      	adds	r2, r7, r2
   2ddec:	6812      	ldr	r2, [r2, #0]
   2ddee:	321b      	adds	r2, #27
   2ddf0:	7812      	ldrb	r2, [r2, #0]
   2ddf2:	0212      	lsls	r2, r2, #8
   2ddf4:	b211      	sxth	r1, r2
   2ddf6:	2292      	movs	r2, #146	; 0x92
   2ddf8:	0092      	lsls	r2, r2, #2
   2ddfa:	18ba      	adds	r2, r7, r2
   2ddfc:	6812      	ldr	r2, [r2, #0]
   2ddfe:	321a      	adds	r2, #26
   2de00:	7812      	ldrb	r2, [r2, #0]
   2de02:	b212      	sxth	r2, r2
   2de04:	430a      	orrs	r2, r1
   2de06:	b212      	sxth	r2, r2
   2de08:	b292      	uxth	r2, r2
   2de0a:	4313      	orrs	r3, r2
   2de0c:	2290      	movs	r2, #144	; 0x90
   2de0e:	0092      	lsls	r2, r2, #2
   2de10:	18ba      	adds	r2, r7, r2
   2de12:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2de14:	2392      	movs	r3, #146	; 0x92
   2de16:	009b      	lsls	r3, r3, #2
   2de18:	18fb      	adds	r3, r7, r3
   2de1a:	681b      	ldr	r3, [r3, #0]
   2de1c:	331a      	adds	r3, #26
   2de1e:	2200      	movs	r2, #0
   2de20:	701a      	strb	r2, [r3, #0]
   2de22:	2392      	movs	r3, #146	; 0x92
   2de24:	009b      	lsls	r3, r3, #2
   2de26:	18fb      	adds	r3, r7, r3
   2de28:	681b      	ldr	r3, [r3, #0]
   2de2a:	331b      	adds	r3, #27
   2de2c:	2200      	movs	r2, #0
   2de2e:	701a      	strb	r2, [r3, #0]
   2de30:	2392      	movs	r3, #146	; 0x92
   2de32:	009b      	lsls	r3, r3, #2
   2de34:	18fb      	adds	r3, r7, r3
   2de36:	681b      	ldr	r3, [r3, #0]
   2de38:	3314      	adds	r3, #20
   2de3a:	2200      	movs	r2, #0
   2de3c:	701a      	strb	r2, [r3, #0]
   2de3e:	2392      	movs	r3, #146	; 0x92
   2de40:	009b      	lsls	r3, r3, #2
   2de42:	18fb      	adds	r3, r7, r3
   2de44:	681b      	ldr	r3, [r3, #0]
   2de46:	3315      	adds	r3, #21
   2de48:	2200      	movs	r2, #0
   2de4a:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2de4c:	2387      	movs	r3, #135	; 0x87
   2de4e:	009b      	lsls	r3, r3, #2
   2de50:	18fb      	adds	r3, r7, r3
   2de52:	681b      	ldr	r3, [r3, #0]
   2de54:	2201      	movs	r2, #1
   2de56:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2de58:	2390      	movs	r3, #144	; 0x90
   2de5a:	009b      	lsls	r3, r3, #2
   2de5c:	18fb      	adds	r3, r7, r3
   2de5e:	681b      	ldr	r3, [r3, #0]
   2de60:	2b00      	cmp	r3, #0
   2de62:	d100      	bne.n	2de66 <f_open+0x2fe>
   2de64:	e076      	b.n	2df54 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2de66:	2387      	movs	r3, #135	; 0x87
   2de68:	009b      	lsls	r3, r3, #2
   2de6a:	18fb      	adds	r3, r7, r3
   2de6c:	681b      	ldr	r3, [r3, #0]
   2de6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2de70:	2291      	movs	r2, #145	; 0x91
   2de72:	0092      	lsls	r2, r2, #2
   2de74:	18ba      	adds	r2, r7, r2
   2de76:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2de78:	2387      	movs	r3, #135	; 0x87
   2de7a:	009b      	lsls	r3, r3, #2
   2de7c:	18fb      	adds	r3, r7, r3
   2de7e:	681b      	ldr	r3, [r3, #0]
   2de80:	4a21      	ldr	r2, [pc, #132]	; (2df08 <f_open+0x3a0>)
   2de82:	18bc      	adds	r4, r7, r2
   2de84:	2290      	movs	r2, #144	; 0x90
   2de86:	0092      	lsls	r2, r2, #2
   2de88:	18ba      	adds	r2, r7, r2
   2de8a:	6812      	ldr	r2, [r2, #0]
   2de8c:	0011      	movs	r1, r2
   2de8e:	0018      	movs	r0, r3
   2de90:	4b22      	ldr	r3, [pc, #136]	; (2df1c <f_open+0x3b4>)
   2de92:	4798      	blx	r3
   2de94:	0003      	movs	r3, r0
   2de96:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2de98:	4b1b      	ldr	r3, [pc, #108]	; (2df08 <f_open+0x3a0>)
   2de9a:	18fb      	adds	r3, r7, r3
   2de9c:	781b      	ldrb	r3, [r3, #0]
   2de9e:	2b00      	cmp	r3, #0
   2dea0:	d158      	bne.n	2df54 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2dea2:	2387      	movs	r3, #135	; 0x87
   2dea4:	009b      	lsls	r3, r3, #2
   2dea6:	18fb      	adds	r3, r7, r3
   2dea8:	681b      	ldr	r3, [r3, #0]
   2deaa:	2290      	movs	r2, #144	; 0x90
   2deac:	0092      	lsls	r2, r2, #2
   2deae:	18ba      	adds	r2, r7, r2
   2deb0:	6812      	ldr	r2, [r2, #0]
   2deb2:	3a01      	subs	r2, #1
   2deb4:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2deb6:	2387      	movs	r3, #135	; 0x87
   2deb8:	009b      	lsls	r3, r3, #2
   2deba:	18fb      	adds	r3, r7, r3
   2debc:	681b      	ldr	r3, [r3, #0]
   2debe:	4a12      	ldr	r2, [pc, #72]	; (2df08 <f_open+0x3a0>)
   2dec0:	18bc      	adds	r4, r7, r2
   2dec2:	2291      	movs	r2, #145	; 0x91
   2dec4:	0092      	lsls	r2, r2, #2
   2dec6:	18ba      	adds	r2, r7, r2
   2dec8:	6812      	ldr	r2, [r2, #0]
   2deca:	0011      	movs	r1, r2
   2decc:	0018      	movs	r0, r3
   2dece:	4b14      	ldr	r3, [pc, #80]	; (2df20 <f_open+0x3b8>)
   2ded0:	4798      	blx	r3
   2ded2:	0003      	movs	r3, r0
   2ded4:	7023      	strb	r3, [r4, #0]
   2ded6:	e03d      	b.n	2df54 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2ded8:	4b0b      	ldr	r3, [pc, #44]	; (2df08 <f_open+0x3a0>)
   2deda:	18fb      	adds	r3, r7, r3
   2dedc:	781b      	ldrb	r3, [r3, #0]
   2dede:	2b00      	cmp	r3, #0
   2dee0:	d138      	bne.n	2df54 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2dee2:	2392      	movs	r3, #146	; 0x92
   2dee4:	009b      	lsls	r3, r3, #2
   2dee6:	18fb      	adds	r3, r7, r3
   2dee8:	681b      	ldr	r3, [r3, #0]
   2deea:	330b      	adds	r3, #11
   2deec:	781b      	ldrb	r3, [r3, #0]
   2deee:	001a      	movs	r2, r3
   2def0:	2310      	movs	r3, #16
   2def2:	4013      	ands	r3, r2
   2def4:	d016      	beq.n	2df24 <f_open+0x3bc>
				res = FR_NO_FILE;
   2def6:	4b04      	ldr	r3, [pc, #16]	; (2df08 <f_open+0x3a0>)
   2def8:	18fb      	adds	r3, r7, r3
   2defa:	2204      	movs	r2, #4
   2defc:	701a      	strb	r2, [r3, #0]
   2defe:	e029      	b.n	2df54 <f_open+0x3ec>
   2df00:	fffffdac 	.word	0xfffffdac
   2df04:	fffffdb7 	.word	0xfffffdb7
   2df08:	0000024f 	.word	0x0000024f
   2df0c:	0002d519 	.word	0x0002d519
   2df10:	0002d30d 	.word	0x0002d30d
   2df14:	0002cb5d 	.word	0x0002cb5d
   2df18:	0002b955 	.word	0x0002b955
   2df1c:	0002c0d9 	.word	0x0002c0d9
   2df20:	0002ba99 	.word	0x0002ba99
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2df24:	4b5a      	ldr	r3, [pc, #360]	; (2e090 <f_open+0x528>)
   2df26:	2294      	movs	r2, #148	; 0x94
   2df28:	0092      	lsls	r2, r2, #2
   2df2a:	4694      	mov	ip, r2
   2df2c:	44bc      	add	ip, r7
   2df2e:	4463      	add	r3, ip
   2df30:	781b      	ldrb	r3, [r3, #0]
   2df32:	2202      	movs	r2, #2
   2df34:	4013      	ands	r3, r2
   2df36:	d00d      	beq.n	2df54 <f_open+0x3ec>
   2df38:	2392      	movs	r3, #146	; 0x92
   2df3a:	009b      	lsls	r3, r3, #2
   2df3c:	18fb      	adds	r3, r7, r3
   2df3e:	681b      	ldr	r3, [r3, #0]
   2df40:	330b      	adds	r3, #11
   2df42:	781b      	ldrb	r3, [r3, #0]
   2df44:	001a      	movs	r2, r3
   2df46:	2301      	movs	r3, #1
   2df48:	4013      	ands	r3, r2
   2df4a:	d003      	beq.n	2df54 <f_open+0x3ec>
					res = FR_DENIED;
   2df4c:	4b51      	ldr	r3, [pc, #324]	; (2e094 <f_open+0x52c>)
   2df4e:	18fb      	adds	r3, r7, r3
   2df50:	2207      	movs	r2, #7
   2df52:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2df54:	4b4f      	ldr	r3, [pc, #316]	; (2e094 <f_open+0x52c>)
   2df56:	18fb      	adds	r3, r7, r3
   2df58:	781b      	ldrb	r3, [r3, #0]
   2df5a:	2b00      	cmp	r3, #0
   2df5c:	d126      	bne.n	2dfac <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2df5e:	4b4c      	ldr	r3, [pc, #304]	; (2e090 <f_open+0x528>)
   2df60:	2294      	movs	r2, #148	; 0x94
   2df62:	0092      	lsls	r2, r2, #2
   2df64:	4694      	mov	ip, r2
   2df66:	44bc      	add	ip, r7
   2df68:	4463      	add	r3, ip
   2df6a:	781b      	ldrb	r3, [r3, #0]
   2df6c:	2208      	movs	r2, #8
   2df6e:	4013      	ands	r3, r2
   2df70:	d00f      	beq.n	2df92 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2df72:	4b47      	ldr	r3, [pc, #284]	; (2e090 <f_open+0x528>)
   2df74:	2294      	movs	r2, #148	; 0x94
   2df76:	0092      	lsls	r2, r2, #2
   2df78:	4694      	mov	ip, r2
   2df7a:	44bc      	add	ip, r7
   2df7c:	4463      	add	r3, ip
   2df7e:	4a44      	ldr	r2, [pc, #272]	; (2e090 <f_open+0x528>)
   2df80:	2194      	movs	r1, #148	; 0x94
   2df82:	0089      	lsls	r1, r1, #2
   2df84:	468c      	mov	ip, r1
   2df86:	44bc      	add	ip, r7
   2df88:	4462      	add	r2, ip
   2df8a:	7812      	ldrb	r2, [r2, #0]
   2df8c:	2120      	movs	r1, #32
   2df8e:	430a      	orrs	r2, r1
   2df90:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2df92:	2387      	movs	r3, #135	; 0x87
   2df94:	009b      	lsls	r3, r3, #2
   2df96:	18fb      	adds	r3, r7, r3
   2df98:	681b      	ldr	r3, [r3, #0]
   2df9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2df9c:	68fb      	ldr	r3, [r7, #12]
   2df9e:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2dfa0:	68fb      	ldr	r3, [r7, #12]
   2dfa2:	2292      	movs	r2, #146	; 0x92
   2dfa4:	0092      	lsls	r2, r2, #2
   2dfa6:	18ba      	adds	r2, r7, r2
   2dfa8:	6812      	ldr	r2, [r2, #0]
   2dfaa:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2dfac:	4b39      	ldr	r3, [pc, #228]	; (2e094 <f_open+0x52c>)
   2dfae:	18fb      	adds	r3, r7, r3
   2dfb0:	781b      	ldrb	r3, [r3, #0]
   2dfb2:	2b00      	cmp	r3, #0
   2dfb4:	d163      	bne.n	2e07e <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2dfb6:	68fb      	ldr	r3, [r7, #12]
   2dfb8:	4a35      	ldr	r2, [pc, #212]	; (2e090 <f_open+0x528>)
   2dfba:	2194      	movs	r1, #148	; 0x94
   2dfbc:	0089      	lsls	r1, r1, #2
   2dfbe:	468c      	mov	ip, r1
   2dfc0:	44bc      	add	ip, r7
   2dfc2:	4462      	add	r2, ip
   2dfc4:	7812      	ldrb	r2, [r2, #0]
   2dfc6:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2dfc8:	2392      	movs	r3, #146	; 0x92
   2dfca:	009b      	lsls	r3, r3, #2
   2dfcc:	18fb      	adds	r3, r7, r3
   2dfce:	681b      	ldr	r3, [r3, #0]
   2dfd0:	3315      	adds	r3, #21
   2dfd2:	781b      	ldrb	r3, [r3, #0]
   2dfd4:	021b      	lsls	r3, r3, #8
   2dfd6:	b21a      	sxth	r2, r3
   2dfd8:	2392      	movs	r3, #146	; 0x92
   2dfda:	009b      	lsls	r3, r3, #2
   2dfdc:	18fb      	adds	r3, r7, r3
   2dfde:	681b      	ldr	r3, [r3, #0]
   2dfe0:	3314      	adds	r3, #20
   2dfe2:	781b      	ldrb	r3, [r3, #0]
   2dfe4:	b21b      	sxth	r3, r3
   2dfe6:	4313      	orrs	r3, r2
   2dfe8:	b21b      	sxth	r3, r3
   2dfea:	b29b      	uxth	r3, r3
   2dfec:	041b      	lsls	r3, r3, #16
   2dfee:	2292      	movs	r2, #146	; 0x92
   2dff0:	0092      	lsls	r2, r2, #2
   2dff2:	18ba      	adds	r2, r7, r2
   2dff4:	6812      	ldr	r2, [r2, #0]
   2dff6:	321b      	adds	r2, #27
   2dff8:	7812      	ldrb	r2, [r2, #0]
   2dffa:	0212      	lsls	r2, r2, #8
   2dffc:	b211      	sxth	r1, r2
   2dffe:	2292      	movs	r2, #146	; 0x92
   2e000:	0092      	lsls	r2, r2, #2
   2e002:	18ba      	adds	r2, r7, r2
   2e004:	6812      	ldr	r2, [r2, #0]
   2e006:	321a      	adds	r2, #26
   2e008:	7812      	ldrb	r2, [r2, #0]
   2e00a:	b212      	sxth	r2, r2
   2e00c:	430a      	orrs	r2, r1
   2e00e:	b212      	sxth	r2, r2
   2e010:	b292      	uxth	r2, r2
   2e012:	431a      	orrs	r2, r3
   2e014:	68fb      	ldr	r3, [r7, #12]
   2e016:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2e018:	2392      	movs	r3, #146	; 0x92
   2e01a:	009b      	lsls	r3, r3, #2
   2e01c:	18fb      	adds	r3, r7, r3
   2e01e:	681b      	ldr	r3, [r3, #0]
   2e020:	331f      	adds	r3, #31
   2e022:	781b      	ldrb	r3, [r3, #0]
   2e024:	061a      	lsls	r2, r3, #24
   2e026:	2392      	movs	r3, #146	; 0x92
   2e028:	009b      	lsls	r3, r3, #2
   2e02a:	18fb      	adds	r3, r7, r3
   2e02c:	681b      	ldr	r3, [r3, #0]
   2e02e:	331e      	adds	r3, #30
   2e030:	781b      	ldrb	r3, [r3, #0]
   2e032:	041b      	lsls	r3, r3, #16
   2e034:	4313      	orrs	r3, r2
   2e036:	2292      	movs	r2, #146	; 0x92
   2e038:	0092      	lsls	r2, r2, #2
   2e03a:	18ba      	adds	r2, r7, r2
   2e03c:	6812      	ldr	r2, [r2, #0]
   2e03e:	321d      	adds	r2, #29
   2e040:	7812      	ldrb	r2, [r2, #0]
   2e042:	0212      	lsls	r2, r2, #8
   2e044:	4313      	orrs	r3, r2
   2e046:	2292      	movs	r2, #146	; 0x92
   2e048:	0092      	lsls	r2, r2, #2
   2e04a:	18ba      	adds	r2, r7, r2
   2e04c:	6812      	ldr	r2, [r2, #0]
   2e04e:	321c      	adds	r2, #28
   2e050:	7812      	ldrb	r2, [r2, #0]
   2e052:	431a      	orrs	r2, r3
   2e054:	68fb      	ldr	r3, [r7, #12]
   2e056:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2e058:	68fb      	ldr	r3, [r7, #12]
   2e05a:	2200      	movs	r2, #0
   2e05c:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2e05e:	68fb      	ldr	r3, [r7, #12]
   2e060:	2200      	movs	r2, #0
   2e062:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2e064:	2387      	movs	r3, #135	; 0x87
   2e066:	009b      	lsls	r3, r3, #2
   2e068:	18fb      	adds	r3, r7, r3
   2e06a:	681a      	ldr	r2, [r3, #0]
   2e06c:	68fb      	ldr	r3, [r7, #12]
   2e06e:	601a      	str	r2, [r3, #0]
   2e070:	2387      	movs	r3, #135	; 0x87
   2e072:	009b      	lsls	r3, r3, #2
   2e074:	18fb      	adds	r3, r7, r3
   2e076:	681b      	ldr	r3, [r3, #0]
   2e078:	88da      	ldrh	r2, [r3, #6]
   2e07a:	68fb      	ldr	r3, [r7, #12]
   2e07c:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2e07e:	4b05      	ldr	r3, [pc, #20]	; (2e094 <f_open+0x52c>)
   2e080:	18fb      	adds	r3, r7, r3
   2e082:	781b      	ldrb	r3, [r3, #0]
}
   2e084:	0018      	movs	r0, r3
   2e086:	46bd      	mov	sp, r7
   2e088:	2395      	movs	r3, #149	; 0x95
   2e08a:	009b      	lsls	r3, r3, #2
   2e08c:	449d      	add	sp, r3
   2e08e:	bd90      	pop	{r4, r7, pc}
   2e090:	fffffdb7 	.word	0xfffffdb7
   2e094:	0000024f 	.word	0x0000024f

0002e098 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2e098:	b590      	push	{r4, r7, lr}
   2e09a:	b08b      	sub	sp, #44	; 0x2c
   2e09c:	af00      	add	r7, sp, #0
   2e09e:	60f8      	str	r0, [r7, #12]
   2e0a0:	60b9      	str	r1, [r7, #8]
   2e0a2:	607a      	str	r2, [r7, #4]
   2e0a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2e0a6:	68bb      	ldr	r3, [r7, #8]
   2e0a8:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2e0aa:	683b      	ldr	r3, [r7, #0]
   2e0ac:	2200      	movs	r2, #0
   2e0ae:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2e0b0:	68fb      	ldr	r3, [r7, #12]
   2e0b2:	681a      	ldr	r2, [r3, #0]
   2e0b4:	68fb      	ldr	r3, [r7, #12]
   2e0b6:	889b      	ldrh	r3, [r3, #4]
   2e0b8:	2117      	movs	r1, #23
   2e0ba:	187c      	adds	r4, r7, r1
   2e0bc:	0019      	movs	r1, r3
   2e0be:	0010      	movs	r0, r2
   2e0c0:	4bc3      	ldr	r3, [pc, #780]	; (2e3d0 <f_write+0x338>)
   2e0c2:	4798      	blx	r3
   2e0c4:	0003      	movs	r3, r0
   2e0c6:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2e0c8:	2317      	movs	r3, #23
   2e0ca:	18fb      	adds	r3, r7, r3
   2e0cc:	781b      	ldrb	r3, [r3, #0]
   2e0ce:	2b00      	cmp	r3, #0
   2e0d0:	d003      	beq.n	2e0da <f_write+0x42>
   2e0d2:	2317      	movs	r3, #23
   2e0d4:	18fb      	adds	r3, r7, r3
   2e0d6:	781b      	ldrb	r3, [r3, #0]
   2e0d8:	e176      	b.n	2e3c8 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2e0da:	68fb      	ldr	r3, [r7, #12]
   2e0dc:	799b      	ldrb	r3, [r3, #6]
   2e0de:	b25b      	sxtb	r3, r3
   2e0e0:	2b00      	cmp	r3, #0
   2e0e2:	da01      	bge.n	2e0e8 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2e0e4:	2302      	movs	r3, #2
   2e0e6:	e16f      	b.n	2e3c8 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2e0e8:	68fb      	ldr	r3, [r7, #12]
   2e0ea:	799b      	ldrb	r3, [r3, #6]
   2e0ec:	001a      	movs	r2, r3
   2e0ee:	2302      	movs	r3, #2
   2e0f0:	4013      	ands	r3, r2
   2e0f2:	d101      	bne.n	2e0f8 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2e0f4:	2307      	movs	r3, #7
   2e0f6:	e167      	b.n	2e3c8 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2e0f8:	68fb      	ldr	r3, [r7, #12]
   2e0fa:	68da      	ldr	r2, [r3, #12]
   2e0fc:	687b      	ldr	r3, [r7, #4]
   2e0fe:	18d2      	adds	r2, r2, r3
   2e100:	68fb      	ldr	r3, [r7, #12]
   2e102:	68db      	ldr	r3, [r3, #12]
   2e104:	429a      	cmp	r2, r3
   2e106:	d300      	bcc.n	2e10a <f_write+0x72>
   2e108:	e146      	b.n	2e398 <f_write+0x300>
   2e10a:	2300      	movs	r3, #0
   2e10c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2e10e:	e143      	b.n	2e398 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2e110:	68fb      	ldr	r3, [r7, #12]
   2e112:	689b      	ldr	r3, [r3, #8]
   2e114:	05db      	lsls	r3, r3, #23
   2e116:	0ddb      	lsrs	r3, r3, #23
   2e118:	d000      	beq.n	2e11c <f_write+0x84>
   2e11a:	e0f6      	b.n	2e30a <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2e11c:	68fb      	ldr	r3, [r7, #12]
   2e11e:	689b      	ldr	r3, [r3, #8]
   2e120:	0a5b      	lsrs	r3, r3, #9
   2e122:	b2da      	uxtb	r2, r3
   2e124:	68fb      	ldr	r3, [r7, #12]
   2e126:	681b      	ldr	r3, [r3, #0]
   2e128:	789b      	ldrb	r3, [r3, #2]
   2e12a:	3b01      	subs	r3, #1
   2e12c:	b2d9      	uxtb	r1, r3
   2e12e:	2316      	movs	r3, #22
   2e130:	18fb      	adds	r3, r7, r3
   2e132:	400a      	ands	r2, r1
   2e134:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2e136:	2316      	movs	r3, #22
   2e138:	18fb      	adds	r3, r7, r3
   2e13a:	781b      	ldrb	r3, [r3, #0]
   2e13c:	2b00      	cmp	r3, #0
   2e13e:	d140      	bne.n	2e1c2 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2e140:	68fb      	ldr	r3, [r7, #12]
   2e142:	689b      	ldr	r3, [r3, #8]
   2e144:	2b00      	cmp	r3, #0
   2e146:	d111      	bne.n	2e16c <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2e148:	68fb      	ldr	r3, [r7, #12]
   2e14a:	691b      	ldr	r3, [r3, #16]
   2e14c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e150:	2b00      	cmp	r3, #0
   2e152:	d115      	bne.n	2e180 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2e154:	68fb      	ldr	r3, [r7, #12]
   2e156:	681b      	ldr	r3, [r3, #0]
   2e158:	2100      	movs	r1, #0
   2e15a:	0018      	movs	r0, r3
   2e15c:	4b9d      	ldr	r3, [pc, #628]	; (2e3d4 <f_write+0x33c>)
   2e15e:	4798      	blx	r3
   2e160:	0003      	movs	r3, r0
   2e162:	627b      	str	r3, [r7, #36]	; 0x24
   2e164:	68fb      	ldr	r3, [r7, #12]
   2e166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e168:	611a      	str	r2, [r3, #16]
   2e16a:	e009      	b.n	2e180 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2e16c:	68fb      	ldr	r3, [r7, #12]
   2e16e:	681a      	ldr	r2, [r3, #0]
   2e170:	68fb      	ldr	r3, [r7, #12]
   2e172:	695b      	ldr	r3, [r3, #20]
   2e174:	0019      	movs	r1, r3
   2e176:	0010      	movs	r0, r2
   2e178:	4b96      	ldr	r3, [pc, #600]	; (2e3d4 <f_write+0x33c>)
   2e17a:	4798      	blx	r3
   2e17c:	0003      	movs	r3, r0
   2e17e:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2e180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e182:	2b00      	cmp	r3, #0
   2e184:	d100      	bne.n	2e188 <f_write+0xf0>
   2e186:	e10c      	b.n	2e3a2 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e18a:	2b01      	cmp	r3, #1
   2e18c:	d109      	bne.n	2e1a2 <f_write+0x10a>
   2e18e:	68fb      	ldr	r3, [r7, #12]
   2e190:	799b      	ldrb	r3, [r3, #6]
   2e192:	2280      	movs	r2, #128	; 0x80
   2e194:	4252      	negs	r2, r2
   2e196:	4313      	orrs	r3, r2
   2e198:	b2da      	uxtb	r2, r3
   2e19a:	68fb      	ldr	r3, [r7, #12]
   2e19c:	719a      	strb	r2, [r3, #6]
   2e19e:	2302      	movs	r3, #2
   2e1a0:	e112      	b.n	2e3c8 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2e1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e1a4:	3301      	adds	r3, #1
   2e1a6:	d109      	bne.n	2e1bc <f_write+0x124>
   2e1a8:	68fb      	ldr	r3, [r7, #12]
   2e1aa:	799b      	ldrb	r3, [r3, #6]
   2e1ac:	2280      	movs	r2, #128	; 0x80
   2e1ae:	4252      	negs	r2, r2
   2e1b0:	4313      	orrs	r3, r2
   2e1b2:	b2da      	uxtb	r2, r3
   2e1b4:	68fb      	ldr	r3, [r7, #12]
   2e1b6:	719a      	strb	r2, [r3, #6]
   2e1b8:	2301      	movs	r3, #1
   2e1ba:	e105      	b.n	2e3c8 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2e1bc:	68fb      	ldr	r3, [r7, #12]
   2e1be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e1c0:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2e1c2:	68fb      	ldr	r3, [r7, #12]
   2e1c4:	681b      	ldr	r3, [r3, #0]
   2e1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e1c8:	68fb      	ldr	r3, [r7, #12]
   2e1ca:	699b      	ldr	r3, [r3, #24]
   2e1cc:	429a      	cmp	r2, r3
   2e1ce:	d111      	bne.n	2e1f4 <f_write+0x15c>
   2e1d0:	68fb      	ldr	r3, [r7, #12]
   2e1d2:	681b      	ldr	r3, [r3, #0]
   2e1d4:	2100      	movs	r1, #0
   2e1d6:	0018      	movs	r0, r3
   2e1d8:	4b7f      	ldr	r3, [pc, #508]	; (2e3d8 <f_write+0x340>)
   2e1da:	4798      	blx	r3
   2e1dc:	1e03      	subs	r3, r0, #0
   2e1de:	d009      	beq.n	2e1f4 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2e1e0:	68fb      	ldr	r3, [r7, #12]
   2e1e2:	799b      	ldrb	r3, [r3, #6]
   2e1e4:	2280      	movs	r2, #128	; 0x80
   2e1e6:	4252      	negs	r2, r2
   2e1e8:	4313      	orrs	r3, r2
   2e1ea:	b2da      	uxtb	r2, r3
   2e1ec:	68fb      	ldr	r3, [r7, #12]
   2e1ee:	719a      	strb	r2, [r3, #6]
   2e1f0:	2301      	movs	r3, #1
   2e1f2:	e0e9      	b.n	2e3c8 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2e1f4:	68fb      	ldr	r3, [r7, #12]
   2e1f6:	681a      	ldr	r2, [r3, #0]
   2e1f8:	68fb      	ldr	r3, [r7, #12]
   2e1fa:	695b      	ldr	r3, [r3, #20]
   2e1fc:	0019      	movs	r1, r3
   2e1fe:	0010      	movs	r0, r2
   2e200:	4b76      	ldr	r3, [pc, #472]	; (2e3dc <f_write+0x344>)
   2e202:	4798      	blx	r3
   2e204:	0003      	movs	r3, r0
   2e206:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2e208:	693b      	ldr	r3, [r7, #16]
   2e20a:	2b00      	cmp	r3, #0
   2e20c:	d109      	bne.n	2e222 <f_write+0x18a>
   2e20e:	68fb      	ldr	r3, [r7, #12]
   2e210:	799b      	ldrb	r3, [r3, #6]
   2e212:	2280      	movs	r2, #128	; 0x80
   2e214:	4252      	negs	r2, r2
   2e216:	4313      	orrs	r3, r2
   2e218:	b2da      	uxtb	r2, r3
   2e21a:	68fb      	ldr	r3, [r7, #12]
   2e21c:	719a      	strb	r2, [r3, #6]
   2e21e:	2302      	movs	r3, #2
   2e220:	e0d2      	b.n	2e3c8 <f_write+0x330>
			sect += csect;
   2e222:	2316      	movs	r3, #22
   2e224:	18fb      	adds	r3, r7, r3
   2e226:	781b      	ldrb	r3, [r3, #0]
   2e228:	693a      	ldr	r2, [r7, #16]
   2e22a:	18d3      	adds	r3, r2, r3
   2e22c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2e22e:	687b      	ldr	r3, [r7, #4]
   2e230:	0a5b      	lsrs	r3, r3, #9
   2e232:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2e234:	69fb      	ldr	r3, [r7, #28]
   2e236:	2b00      	cmp	r3, #0
   2e238:	d048      	beq.n	2e2cc <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2e23a:	2316      	movs	r3, #22
   2e23c:	18fb      	adds	r3, r7, r3
   2e23e:	781a      	ldrb	r2, [r3, #0]
   2e240:	69fb      	ldr	r3, [r7, #28]
   2e242:	18d2      	adds	r2, r2, r3
   2e244:	68fb      	ldr	r3, [r7, #12]
   2e246:	681b      	ldr	r3, [r3, #0]
   2e248:	789b      	ldrb	r3, [r3, #2]
   2e24a:	429a      	cmp	r2, r3
   2e24c:	d908      	bls.n	2e260 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2e24e:	68fb      	ldr	r3, [r7, #12]
   2e250:	681b      	ldr	r3, [r3, #0]
   2e252:	789b      	ldrb	r3, [r3, #2]
   2e254:	001a      	movs	r2, r3
   2e256:	2316      	movs	r3, #22
   2e258:	18fb      	adds	r3, r7, r3
   2e25a:	781b      	ldrb	r3, [r3, #0]
   2e25c:	1ad3      	subs	r3, r2, r3
   2e25e:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2e260:	68fb      	ldr	r3, [r7, #12]
   2e262:	681b      	ldr	r3, [r3, #0]
   2e264:	7858      	ldrb	r0, [r3, #1]
   2e266:	69fb      	ldr	r3, [r7, #28]
   2e268:	b2db      	uxtb	r3, r3
   2e26a:	693a      	ldr	r2, [r7, #16]
   2e26c:	69b9      	ldr	r1, [r7, #24]
   2e26e:	4c5c      	ldr	r4, [pc, #368]	; (2e3e0 <f_write+0x348>)
   2e270:	47a0      	blx	r4
   2e272:	1e03      	subs	r3, r0, #0
   2e274:	d009      	beq.n	2e28a <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2e276:	68fb      	ldr	r3, [r7, #12]
   2e278:	799b      	ldrb	r3, [r3, #6]
   2e27a:	2280      	movs	r2, #128	; 0x80
   2e27c:	4252      	negs	r2, r2
   2e27e:	4313      	orrs	r3, r2
   2e280:	b2da      	uxtb	r2, r3
   2e282:	68fb      	ldr	r3, [r7, #12]
   2e284:	719a      	strb	r2, [r3, #6]
   2e286:	2301      	movs	r3, #1
   2e288:	e09e      	b.n	2e3c8 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2e28a:	68fb      	ldr	r3, [r7, #12]
   2e28c:	681b      	ldr	r3, [r3, #0]
   2e28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e290:	693b      	ldr	r3, [r7, #16]
   2e292:	1ad2      	subs	r2, r2, r3
   2e294:	69fb      	ldr	r3, [r7, #28]
   2e296:	429a      	cmp	r2, r3
   2e298:	d214      	bcs.n	2e2c4 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2e29a:	68fb      	ldr	r3, [r7, #12]
   2e29c:	681b      	ldr	r3, [r3, #0]
   2e29e:	3330      	adds	r3, #48	; 0x30
   2e2a0:	0018      	movs	r0, r3
   2e2a2:	68fb      	ldr	r3, [r7, #12]
   2e2a4:	681b      	ldr	r3, [r3, #0]
   2e2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e2a8:	693b      	ldr	r3, [r7, #16]
   2e2aa:	1ad3      	subs	r3, r2, r3
   2e2ac:	025b      	lsls	r3, r3, #9
   2e2ae:	69ba      	ldr	r2, [r7, #24]
   2e2b0:	18d1      	adds	r1, r2, r3
   2e2b2:	2380      	movs	r3, #128	; 0x80
   2e2b4:	009b      	lsls	r3, r3, #2
   2e2b6:	001a      	movs	r2, r3
   2e2b8:	4b4a      	ldr	r3, [pc, #296]	; (2e3e4 <f_write+0x34c>)
   2e2ba:	4798      	blx	r3
					fp->fs->wflag = 0;
   2e2bc:	68fb      	ldr	r3, [r7, #12]
   2e2be:	681b      	ldr	r3, [r3, #0]
   2e2c0:	2200      	movs	r2, #0
   2e2c2:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2e2c4:	69fb      	ldr	r3, [r7, #28]
   2e2c6:	025b      	lsls	r3, r3, #9
   2e2c8:	623b      	str	r3, [r7, #32]
				continue;
   2e2ca:	e051      	b.n	2e370 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2e2cc:	68fb      	ldr	r3, [r7, #12]
   2e2ce:	689a      	ldr	r2, [r3, #8]
   2e2d0:	68fb      	ldr	r3, [r7, #12]
   2e2d2:	68db      	ldr	r3, [r3, #12]
   2e2d4:	429a      	cmp	r2, r3
   2e2d6:	d315      	bcc.n	2e304 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2e2d8:	68fb      	ldr	r3, [r7, #12]
   2e2da:	681b      	ldr	r3, [r3, #0]
   2e2dc:	2100      	movs	r1, #0
   2e2de:	0018      	movs	r0, r3
   2e2e0:	4b3d      	ldr	r3, [pc, #244]	; (2e3d8 <f_write+0x340>)
   2e2e2:	4798      	blx	r3
   2e2e4:	1e03      	subs	r3, r0, #0
   2e2e6:	d009      	beq.n	2e2fc <f_write+0x264>
   2e2e8:	68fb      	ldr	r3, [r7, #12]
   2e2ea:	799b      	ldrb	r3, [r3, #6]
   2e2ec:	2280      	movs	r2, #128	; 0x80
   2e2ee:	4252      	negs	r2, r2
   2e2f0:	4313      	orrs	r3, r2
   2e2f2:	b2da      	uxtb	r2, r3
   2e2f4:	68fb      	ldr	r3, [r7, #12]
   2e2f6:	719a      	strb	r2, [r3, #6]
   2e2f8:	2301      	movs	r3, #1
   2e2fa:	e065      	b.n	2e3c8 <f_write+0x330>
				fp->fs->winsect = sect;
   2e2fc:	68fb      	ldr	r3, [r7, #12]
   2e2fe:	681b      	ldr	r3, [r3, #0]
   2e300:	693a      	ldr	r2, [r7, #16]
   2e302:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2e304:	68fb      	ldr	r3, [r7, #12]
   2e306:	693a      	ldr	r2, [r7, #16]
   2e308:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2e30a:	68fb      	ldr	r3, [r7, #12]
   2e30c:	689b      	ldr	r3, [r3, #8]
   2e30e:	05db      	lsls	r3, r3, #23
   2e310:	0ddb      	lsrs	r3, r3, #23
   2e312:	2280      	movs	r2, #128	; 0x80
   2e314:	0092      	lsls	r2, r2, #2
   2e316:	1ad3      	subs	r3, r2, r3
   2e318:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2e31a:	6a3a      	ldr	r2, [r7, #32]
   2e31c:	687b      	ldr	r3, [r7, #4]
   2e31e:	429a      	cmp	r2, r3
   2e320:	d901      	bls.n	2e326 <f_write+0x28e>
   2e322:	687b      	ldr	r3, [r7, #4]
   2e324:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2e326:	68fb      	ldr	r3, [r7, #12]
   2e328:	681a      	ldr	r2, [r3, #0]
   2e32a:	68fb      	ldr	r3, [r7, #12]
   2e32c:	699b      	ldr	r3, [r3, #24]
   2e32e:	0019      	movs	r1, r3
   2e330:	0010      	movs	r0, r2
   2e332:	4b29      	ldr	r3, [pc, #164]	; (2e3d8 <f_write+0x340>)
   2e334:	4798      	blx	r3
   2e336:	1e03      	subs	r3, r0, #0
   2e338:	d009      	beq.n	2e34e <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2e33a:	68fb      	ldr	r3, [r7, #12]
   2e33c:	799b      	ldrb	r3, [r3, #6]
   2e33e:	2280      	movs	r2, #128	; 0x80
   2e340:	4252      	negs	r2, r2
   2e342:	4313      	orrs	r3, r2
   2e344:	b2da      	uxtb	r2, r3
   2e346:	68fb      	ldr	r3, [r7, #12]
   2e348:	719a      	strb	r2, [r3, #6]
   2e34a:	2301      	movs	r3, #1
   2e34c:	e03c      	b.n	2e3c8 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2e34e:	68fb      	ldr	r3, [r7, #12]
   2e350:	681a      	ldr	r2, [r3, #0]
   2e352:	68fb      	ldr	r3, [r7, #12]
   2e354:	689b      	ldr	r3, [r3, #8]
   2e356:	05db      	lsls	r3, r3, #23
   2e358:	0ddb      	lsrs	r3, r3, #23
   2e35a:	3330      	adds	r3, #48	; 0x30
   2e35c:	18d3      	adds	r3, r2, r3
   2e35e:	6a3a      	ldr	r2, [r7, #32]
   2e360:	69b9      	ldr	r1, [r7, #24]
   2e362:	0018      	movs	r0, r3
   2e364:	4b1f      	ldr	r3, [pc, #124]	; (2e3e4 <f_write+0x34c>)
   2e366:	4798      	blx	r3
		fp->fs->wflag = 1;
   2e368:	68fb      	ldr	r3, [r7, #12]
   2e36a:	681b      	ldr	r3, [r3, #0]
   2e36c:	2201      	movs	r2, #1
   2e36e:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2e370:	69ba      	ldr	r2, [r7, #24]
   2e372:	6a3b      	ldr	r3, [r7, #32]
   2e374:	18d3      	adds	r3, r2, r3
   2e376:	61bb      	str	r3, [r7, #24]
   2e378:	68fb      	ldr	r3, [r7, #12]
   2e37a:	689a      	ldr	r2, [r3, #8]
   2e37c:	6a3b      	ldr	r3, [r7, #32]
   2e37e:	18d2      	adds	r2, r2, r3
   2e380:	68fb      	ldr	r3, [r7, #12]
   2e382:	609a      	str	r2, [r3, #8]
   2e384:	683b      	ldr	r3, [r7, #0]
   2e386:	681a      	ldr	r2, [r3, #0]
   2e388:	6a3b      	ldr	r3, [r7, #32]
   2e38a:	18d2      	adds	r2, r2, r3
   2e38c:	683b      	ldr	r3, [r7, #0]
   2e38e:	601a      	str	r2, [r3, #0]
   2e390:	687a      	ldr	r2, [r7, #4]
   2e392:	6a3b      	ldr	r3, [r7, #32]
   2e394:	1ad3      	subs	r3, r2, r3
   2e396:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2e398:	687b      	ldr	r3, [r7, #4]
   2e39a:	2b00      	cmp	r3, #0
   2e39c:	d000      	beq.n	2e3a0 <f_write+0x308>
   2e39e:	e6b7      	b.n	2e110 <f_write+0x78>
   2e3a0:	e000      	b.n	2e3a4 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2e3a2:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2e3a4:	68fb      	ldr	r3, [r7, #12]
   2e3a6:	689a      	ldr	r2, [r3, #8]
   2e3a8:	68fb      	ldr	r3, [r7, #12]
   2e3aa:	68db      	ldr	r3, [r3, #12]
   2e3ac:	429a      	cmp	r2, r3
   2e3ae:	d903      	bls.n	2e3b8 <f_write+0x320>
   2e3b0:	68fb      	ldr	r3, [r7, #12]
   2e3b2:	689a      	ldr	r2, [r3, #8]
   2e3b4:	68fb      	ldr	r3, [r7, #12]
   2e3b6:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2e3b8:	68fb      	ldr	r3, [r7, #12]
   2e3ba:	799b      	ldrb	r3, [r3, #6]
   2e3bc:	2220      	movs	r2, #32
   2e3be:	4313      	orrs	r3, r2
   2e3c0:	b2da      	uxtb	r2, r3
   2e3c2:	68fb      	ldr	r3, [r7, #12]
   2e3c4:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2e3c6:	2300      	movs	r3, #0
}
   2e3c8:	0018      	movs	r0, r3
   2e3ca:	46bd      	mov	sp, r7
   2e3cc:	b00b      	add	sp, #44	; 0x2c
   2e3ce:	bd90      	pop	{r4, r7, pc}
   2e3d0:	0002db15 	.word	0x0002db15
   2e3d4:	0002c1a1 	.word	0x0002c1a1
   2e3d8:	0002ba99 	.word	0x0002ba99
   2e3dc:	0002bcf9 	.word	0x0002bcf9
   2e3e0:	0002b785 	.word	0x0002b785
   2e3e4:	0002b9b5 	.word	0x0002b9b5

0002e3e8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2e3e8:	b590      	push	{r4, r7, lr}
   2e3ea:	b087      	sub	sp, #28
   2e3ec:	af00      	add	r7, sp, #0
   2e3ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2e3f0:	687b      	ldr	r3, [r7, #4]
   2e3f2:	681a      	ldr	r2, [r3, #0]
   2e3f4:	687b      	ldr	r3, [r7, #4]
   2e3f6:	889b      	ldrh	r3, [r3, #4]
   2e3f8:	2117      	movs	r1, #23
   2e3fa:	187c      	adds	r4, r7, r1
   2e3fc:	0019      	movs	r1, r3
   2e3fe:	0010      	movs	r0, r2
   2e400:	4b55      	ldr	r3, [pc, #340]	; (2e558 <f_sync+0x170>)
   2e402:	4798      	blx	r3
   2e404:	0003      	movs	r3, r0
   2e406:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2e408:	2317      	movs	r3, #23
   2e40a:	18fb      	adds	r3, r7, r3
   2e40c:	781b      	ldrb	r3, [r3, #0]
   2e40e:	2b00      	cmp	r3, #0
   2e410:	d000      	beq.n	2e414 <f_sync+0x2c>
   2e412:	e09a      	b.n	2e54a <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2e414:	687b      	ldr	r3, [r7, #4]
   2e416:	799b      	ldrb	r3, [r3, #6]
   2e418:	001a      	movs	r2, r3
   2e41a:	2320      	movs	r3, #32
   2e41c:	4013      	ands	r3, r2
   2e41e:	d100      	bne.n	2e422 <f_sync+0x3a>
   2e420:	e093      	b.n	2e54a <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2e422:	687b      	ldr	r3, [r7, #4]
   2e424:	681a      	ldr	r2, [r3, #0]
   2e426:	687b      	ldr	r3, [r7, #4]
   2e428:	69db      	ldr	r3, [r3, #28]
   2e42a:	2117      	movs	r1, #23
   2e42c:	187c      	adds	r4, r7, r1
   2e42e:	0019      	movs	r1, r3
   2e430:	0010      	movs	r0, r2
   2e432:	4b4a      	ldr	r3, [pc, #296]	; (2e55c <f_sync+0x174>)
   2e434:	4798      	blx	r3
   2e436:	0003      	movs	r3, r0
   2e438:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2e43a:	2317      	movs	r3, #23
   2e43c:	18fb      	adds	r3, r7, r3
   2e43e:	781b      	ldrb	r3, [r3, #0]
   2e440:	2b00      	cmp	r3, #0
   2e442:	d000      	beq.n	2e446 <f_sync+0x5e>
   2e444:	e081      	b.n	2e54a <f_sync+0x162>
				dir = fp->dir_ptr;
   2e446:	687b      	ldr	r3, [r7, #4]
   2e448:	6a1b      	ldr	r3, [r3, #32]
   2e44a:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2e44c:	693b      	ldr	r3, [r7, #16]
   2e44e:	330b      	adds	r3, #11
   2e450:	693a      	ldr	r2, [r7, #16]
   2e452:	320b      	adds	r2, #11
   2e454:	7812      	ldrb	r2, [r2, #0]
   2e456:	2120      	movs	r1, #32
   2e458:	430a      	orrs	r2, r1
   2e45a:	b2d2      	uxtb	r2, r2
   2e45c:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2e45e:	693b      	ldr	r3, [r7, #16]
   2e460:	331c      	adds	r3, #28
   2e462:	001a      	movs	r2, r3
   2e464:	687b      	ldr	r3, [r7, #4]
   2e466:	68db      	ldr	r3, [r3, #12]
   2e468:	b2db      	uxtb	r3, r3
   2e46a:	7013      	strb	r3, [r2, #0]
   2e46c:	693b      	ldr	r3, [r7, #16]
   2e46e:	331d      	adds	r3, #29
   2e470:	001a      	movs	r2, r3
   2e472:	687b      	ldr	r3, [r7, #4]
   2e474:	68db      	ldr	r3, [r3, #12]
   2e476:	b29b      	uxth	r3, r3
   2e478:	0a1b      	lsrs	r3, r3, #8
   2e47a:	b29b      	uxth	r3, r3
   2e47c:	b2db      	uxtb	r3, r3
   2e47e:	7013      	strb	r3, [r2, #0]
   2e480:	693b      	ldr	r3, [r7, #16]
   2e482:	331e      	adds	r3, #30
   2e484:	001a      	movs	r2, r3
   2e486:	687b      	ldr	r3, [r7, #4]
   2e488:	68db      	ldr	r3, [r3, #12]
   2e48a:	0c1b      	lsrs	r3, r3, #16
   2e48c:	b2db      	uxtb	r3, r3
   2e48e:	7013      	strb	r3, [r2, #0]
   2e490:	693b      	ldr	r3, [r7, #16]
   2e492:	331f      	adds	r3, #31
   2e494:	001a      	movs	r2, r3
   2e496:	687b      	ldr	r3, [r7, #4]
   2e498:	68db      	ldr	r3, [r3, #12]
   2e49a:	0e1b      	lsrs	r3, r3, #24
   2e49c:	b2db      	uxtb	r3, r3
   2e49e:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2e4a0:	693b      	ldr	r3, [r7, #16]
   2e4a2:	331a      	adds	r3, #26
   2e4a4:	001a      	movs	r2, r3
   2e4a6:	687b      	ldr	r3, [r7, #4]
   2e4a8:	691b      	ldr	r3, [r3, #16]
   2e4aa:	b2db      	uxtb	r3, r3
   2e4ac:	7013      	strb	r3, [r2, #0]
   2e4ae:	693b      	ldr	r3, [r7, #16]
   2e4b0:	331b      	adds	r3, #27
   2e4b2:	001a      	movs	r2, r3
   2e4b4:	687b      	ldr	r3, [r7, #4]
   2e4b6:	691b      	ldr	r3, [r3, #16]
   2e4b8:	b29b      	uxth	r3, r3
   2e4ba:	0a1b      	lsrs	r3, r3, #8
   2e4bc:	b29b      	uxth	r3, r3
   2e4be:	b2db      	uxtb	r3, r3
   2e4c0:	7013      	strb	r3, [r2, #0]
   2e4c2:	693b      	ldr	r3, [r7, #16]
   2e4c4:	3314      	adds	r3, #20
   2e4c6:	001a      	movs	r2, r3
   2e4c8:	687b      	ldr	r3, [r7, #4]
   2e4ca:	691b      	ldr	r3, [r3, #16]
   2e4cc:	0c1b      	lsrs	r3, r3, #16
   2e4ce:	b2db      	uxtb	r3, r3
   2e4d0:	7013      	strb	r3, [r2, #0]
   2e4d2:	693b      	ldr	r3, [r7, #16]
   2e4d4:	3315      	adds	r3, #21
   2e4d6:	001a      	movs	r2, r3
   2e4d8:	687b      	ldr	r3, [r7, #4]
   2e4da:	691b      	ldr	r3, [r3, #16]
   2e4dc:	0c1b      	lsrs	r3, r3, #16
   2e4de:	b29b      	uxth	r3, r3
   2e4e0:	0a1b      	lsrs	r3, r3, #8
   2e4e2:	b29b      	uxth	r3, r3
   2e4e4:	b2db      	uxtb	r3, r3
   2e4e6:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2e4e8:	4b1d      	ldr	r3, [pc, #116]	; (2e560 <f_sync+0x178>)
   2e4ea:	4798      	blx	r3
   2e4ec:	0003      	movs	r3, r0
   2e4ee:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2e4f0:	693b      	ldr	r3, [r7, #16]
   2e4f2:	3316      	adds	r3, #22
   2e4f4:	68fa      	ldr	r2, [r7, #12]
   2e4f6:	b2d2      	uxtb	r2, r2
   2e4f8:	701a      	strb	r2, [r3, #0]
   2e4fa:	693b      	ldr	r3, [r7, #16]
   2e4fc:	3317      	adds	r3, #23
   2e4fe:	68fa      	ldr	r2, [r7, #12]
   2e500:	b292      	uxth	r2, r2
   2e502:	0a12      	lsrs	r2, r2, #8
   2e504:	b292      	uxth	r2, r2
   2e506:	b2d2      	uxtb	r2, r2
   2e508:	701a      	strb	r2, [r3, #0]
   2e50a:	693b      	ldr	r3, [r7, #16]
   2e50c:	3318      	adds	r3, #24
   2e50e:	68fa      	ldr	r2, [r7, #12]
   2e510:	0c12      	lsrs	r2, r2, #16
   2e512:	b2d2      	uxtb	r2, r2
   2e514:	701a      	strb	r2, [r3, #0]
   2e516:	693b      	ldr	r3, [r7, #16]
   2e518:	3319      	adds	r3, #25
   2e51a:	68fa      	ldr	r2, [r7, #12]
   2e51c:	0e12      	lsrs	r2, r2, #24
   2e51e:	b2d2      	uxtb	r2, r2
   2e520:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2e522:	687b      	ldr	r3, [r7, #4]
   2e524:	799b      	ldrb	r3, [r3, #6]
   2e526:	2220      	movs	r2, #32
   2e528:	4393      	bics	r3, r2
   2e52a:	b2da      	uxtb	r2, r3
   2e52c:	687b      	ldr	r3, [r7, #4]
   2e52e:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2e530:	687b      	ldr	r3, [r7, #4]
   2e532:	681b      	ldr	r3, [r3, #0]
   2e534:	2201      	movs	r2, #1
   2e536:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2e538:	687b      	ldr	r3, [r7, #4]
   2e53a:	681b      	ldr	r3, [r3, #0]
   2e53c:	2217      	movs	r2, #23
   2e53e:	18bc      	adds	r4, r7, r2
   2e540:	0018      	movs	r0, r3
   2e542:	4b08      	ldr	r3, [pc, #32]	; (2e564 <f_sync+0x17c>)
   2e544:	4798      	blx	r3
   2e546:	0003      	movs	r3, r0
   2e548:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2e54a:	2317      	movs	r3, #23
   2e54c:	18fb      	adds	r3, r7, r3
   2e54e:	781b      	ldrb	r3, [r3, #0]
}
   2e550:	0018      	movs	r0, r3
   2e552:	46bd      	mov	sp, r7
   2e554:	b007      	add	sp, #28
   2e556:	bd90      	pop	{r4, r7, pc}
   2e558:	0002db15 	.word	0x0002db15
   2e55c:	0002ba99 	.word	0x0002ba99
   2e560:	0002b955 	.word	0x0002b955
   2e564:	0002bb61 	.word	0x0002bb61

0002e568 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2e568:	b590      	push	{r4, r7, lr}
   2e56a:	b085      	sub	sp, #20
   2e56c:	af00      	add	r7, sp, #0
   2e56e:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2e570:	230f      	movs	r3, #15
   2e572:	18fc      	adds	r4, r7, r3
   2e574:	687b      	ldr	r3, [r7, #4]
   2e576:	0018      	movs	r0, r3
   2e578:	4b09      	ldr	r3, [pc, #36]	; (2e5a0 <f_close+0x38>)
   2e57a:	4798      	blx	r3
   2e57c:	0003      	movs	r3, r0
   2e57e:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2e580:	230f      	movs	r3, #15
   2e582:	18fb      	adds	r3, r7, r3
   2e584:	781b      	ldrb	r3, [r3, #0]
   2e586:	2b00      	cmp	r3, #0
   2e588:	d102      	bne.n	2e590 <f_close+0x28>
   2e58a:	687b      	ldr	r3, [r7, #4]
   2e58c:	2200      	movs	r2, #0
   2e58e:	601a      	str	r2, [r3, #0]
	return res;
   2e590:	230f      	movs	r3, #15
   2e592:	18fb      	adds	r3, r7, r3
   2e594:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2e596:	0018      	movs	r0, r3
   2e598:	46bd      	mov	sp, r7
   2e59a:	b005      	add	sp, #20
   2e59c:	bd90      	pop	{r4, r7, pc}
   2e59e:	46c0      	nop			; (mov r8, r8)
   2e5a0:	0002e3e9 	.word	0x0002e3e9

0002e5a4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2e5a4:	b580      	push	{r7, lr}
   2e5a6:	b084      	sub	sp, #16
   2e5a8:	af00      	add	r7, sp, #0
   2e5aa:	0002      	movs	r2, r0
   2e5ac:	6039      	str	r1, [r7, #0]
   2e5ae:	1dbb      	adds	r3, r7, #6
   2e5b0:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2e5b2:	1dbb      	adds	r3, r7, #6
   2e5b4:	881b      	ldrh	r3, [r3, #0]
   2e5b6:	2b7f      	cmp	r3, #127	; 0x7f
   2e5b8:	d805      	bhi.n	2e5c6 <ff_convert+0x22>
		c = src;
   2e5ba:	230e      	movs	r3, #14
   2e5bc:	18fb      	adds	r3, r7, r3
   2e5be:	1dba      	adds	r2, r7, #6
   2e5c0:	8812      	ldrh	r2, [r2, #0]
   2e5c2:	801a      	strh	r2, [r3, #0]
   2e5c4:	e03a      	b.n	2e63c <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2e5c6:	683b      	ldr	r3, [r7, #0]
   2e5c8:	2b00      	cmp	r3, #0
   2e5ca:	d010      	beq.n	2e5ee <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2e5cc:	1dbb      	adds	r3, r7, #6
   2e5ce:	881b      	ldrh	r3, [r3, #0]
   2e5d0:	2bff      	cmp	r3, #255	; 0xff
   2e5d2:	d807      	bhi.n	2e5e4 <ff_convert+0x40>
   2e5d4:	1dbb      	adds	r3, r7, #6
   2e5d6:	881b      	ldrh	r3, [r3, #0]
   2e5d8:	3b80      	subs	r3, #128	; 0x80
   2e5da:	001a      	movs	r2, r3
   2e5dc:	4b1b      	ldr	r3, [pc, #108]	; (2e64c <ff_convert+0xa8>)
   2e5de:	0052      	lsls	r2, r2, #1
   2e5e0:	5ad2      	ldrh	r2, [r2, r3]
   2e5e2:	e000      	b.n	2e5e6 <ff_convert+0x42>
   2e5e4:	2200      	movs	r2, #0
   2e5e6:	230e      	movs	r3, #14
   2e5e8:	18fb      	adds	r3, r7, r3
   2e5ea:	801a      	strh	r2, [r3, #0]
   2e5ec:	e026      	b.n	2e63c <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2e5ee:	230e      	movs	r3, #14
   2e5f0:	18fb      	adds	r3, r7, r3
   2e5f2:	2200      	movs	r2, #0
   2e5f4:	801a      	strh	r2, [r3, #0]
   2e5f6:	e010      	b.n	2e61a <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2e5f8:	230e      	movs	r3, #14
   2e5fa:	18fb      	adds	r3, r7, r3
   2e5fc:	881a      	ldrh	r2, [r3, #0]
   2e5fe:	4b13      	ldr	r3, [pc, #76]	; (2e64c <ff_convert+0xa8>)
   2e600:	0052      	lsls	r2, r2, #1
   2e602:	5ad3      	ldrh	r3, [r2, r3]
   2e604:	1dba      	adds	r2, r7, #6
   2e606:	8812      	ldrh	r2, [r2, #0]
   2e608:	429a      	cmp	r2, r3
   2e60a:	d00c      	beq.n	2e626 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2e60c:	230e      	movs	r3, #14
   2e60e:	18fb      	adds	r3, r7, r3
   2e610:	881a      	ldrh	r2, [r3, #0]
   2e612:	230e      	movs	r3, #14
   2e614:	18fb      	adds	r3, r7, r3
   2e616:	3201      	adds	r2, #1
   2e618:	801a      	strh	r2, [r3, #0]
   2e61a:	230e      	movs	r3, #14
   2e61c:	18fb      	adds	r3, r7, r3
   2e61e:	881b      	ldrh	r3, [r3, #0]
   2e620:	2b7f      	cmp	r3, #127	; 0x7f
   2e622:	d9e9      	bls.n	2e5f8 <ff_convert+0x54>
   2e624:	e000      	b.n	2e628 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2e626:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2e628:	230e      	movs	r3, #14
   2e62a:	18fb      	adds	r3, r7, r3
   2e62c:	881b      	ldrh	r3, [r3, #0]
   2e62e:	3380      	adds	r3, #128	; 0x80
   2e630:	b29a      	uxth	r2, r3
   2e632:	230e      	movs	r3, #14
   2e634:	18fb      	adds	r3, r7, r3
   2e636:	21ff      	movs	r1, #255	; 0xff
   2e638:	400a      	ands	r2, r1
   2e63a:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2e63c:	230e      	movs	r3, #14
   2e63e:	18fb      	adds	r3, r7, r3
   2e640:	881b      	ldrh	r3, [r3, #0]
}
   2e642:	0018      	movs	r0, r3
   2e644:	46bd      	mov	sp, r7
   2e646:	b004      	add	sp, #16
   2e648:	bd80      	pop	{r7, pc}
   2e64a:	46c0      	nop			; (mov r8, r8)
   2e64c:	000397d4 	.word	0x000397d4

0002e650 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2e650:	b580      	push	{r7, lr}
   2e652:	b084      	sub	sp, #16
   2e654:	af00      	add	r7, sp, #0
   2e656:	0002      	movs	r2, r0
   2e658:	1dbb      	adds	r3, r7, #6
   2e65a:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2e65c:	2300      	movs	r3, #0
   2e65e:	60fb      	str	r3, [r7, #12]
   2e660:	e002      	b.n	2e668 <ff_wtoupper+0x18>
   2e662:	68fb      	ldr	r3, [r7, #12]
   2e664:	3301      	adds	r3, #1
   2e666:	60fb      	str	r3, [r7, #12]
   2e668:	4b0f      	ldr	r3, [pc, #60]	; (2e6a8 <ff_wtoupper+0x58>)
   2e66a:	68fa      	ldr	r2, [r7, #12]
   2e66c:	0052      	lsls	r2, r2, #1
   2e66e:	5ad3      	ldrh	r3, [r2, r3]
   2e670:	2b00      	cmp	r3, #0
   2e672:	d007      	beq.n	2e684 <ff_wtoupper+0x34>
   2e674:	4b0c      	ldr	r3, [pc, #48]	; (2e6a8 <ff_wtoupper+0x58>)
   2e676:	68fa      	ldr	r2, [r7, #12]
   2e678:	0052      	lsls	r2, r2, #1
   2e67a:	5ad3      	ldrh	r3, [r2, r3]
   2e67c:	1dba      	adds	r2, r7, #6
   2e67e:	8812      	ldrh	r2, [r2, #0]
   2e680:	429a      	cmp	r2, r3
   2e682:	d1ee      	bne.n	2e662 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2e684:	4b08      	ldr	r3, [pc, #32]	; (2e6a8 <ff_wtoupper+0x58>)
   2e686:	68fa      	ldr	r2, [r7, #12]
   2e688:	0052      	lsls	r2, r2, #1
   2e68a:	5ad3      	ldrh	r3, [r2, r3]
   2e68c:	2b00      	cmp	r3, #0
   2e68e:	d004      	beq.n	2e69a <ff_wtoupper+0x4a>
   2e690:	4b06      	ldr	r3, [pc, #24]	; (2e6ac <ff_wtoupper+0x5c>)
   2e692:	68fa      	ldr	r2, [r7, #12]
   2e694:	0052      	lsls	r2, r2, #1
   2e696:	5ad3      	ldrh	r3, [r2, r3]
   2e698:	e001      	b.n	2e69e <ff_wtoupper+0x4e>
   2e69a:	1dbb      	adds	r3, r7, #6
   2e69c:	881b      	ldrh	r3, [r3, #0]
}
   2e69e:	0018      	movs	r0, r3
   2e6a0:	46bd      	mov	sp, r7
   2e6a2:	b004      	add	sp, #16
   2e6a4:	bd80      	pop	{r7, pc}
   2e6a6:	46c0      	nop			; (mov r8, r8)
   2e6a8:	000398d4 	.word	0x000398d4
   2e6ac:	00039ab4 	.word	0x00039ab4

0002e6b0 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2e6b0:	b580      	push	{r7, lr}
   2e6b2:	b084      	sub	sp, #16
   2e6b4:	af00      	add	r7, sp, #0
   2e6b6:	60f8      	str	r0, [r7, #12]
   2e6b8:	60b9      	str	r1, [r7, #8]
   2e6ba:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2e6bc:	68fb      	ldr	r3, [r7, #12]
   2e6be:	68ba      	ldr	r2, [r7, #8]
   2e6c0:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2e6c2:	68fb      	ldr	r3, [r7, #12]
   2e6c4:	687a      	ldr	r2, [r7, #4]
   2e6c6:	601a      	str	r2, [r3, #0]
}
   2e6c8:	46c0      	nop			; (mov r8, r8)
   2e6ca:	46bd      	mov	sp, r7
   2e6cc:	b004      	add	sp, #16
   2e6ce:	bd80      	pop	{r7, pc}

0002e6d0 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2e6d0:	b580      	push	{r7, lr}
   2e6d2:	b082      	sub	sp, #8
   2e6d4:	af00      	add	r7, sp, #0
   2e6d6:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2e6d8:	687b      	ldr	r3, [r7, #4]
   2e6da:	681b      	ldr	r3, [r3, #0]
   2e6dc:	4a07      	ldr	r2, [pc, #28]	; (2e6fc <getNextPacketId+0x2c>)
   2e6de:	4293      	cmp	r3, r2
   2e6e0:	d003      	beq.n	2e6ea <getNextPacketId+0x1a>
   2e6e2:	687b      	ldr	r3, [r7, #4]
   2e6e4:	681b      	ldr	r3, [r3, #0]
   2e6e6:	1c5a      	adds	r2, r3, #1
   2e6e8:	e000      	b.n	2e6ec <getNextPacketId+0x1c>
   2e6ea:	2201      	movs	r2, #1
   2e6ec:	687b      	ldr	r3, [r7, #4]
   2e6ee:	601a      	str	r2, [r3, #0]
   2e6f0:	687b      	ldr	r3, [r7, #4]
   2e6f2:	681b      	ldr	r3, [r3, #0]
}
   2e6f4:	0018      	movs	r0, r3
   2e6f6:	46bd      	mov	sp, r7
   2e6f8:	b002      	add	sp, #8
   2e6fa:	bd80      	pop	{r7, pc}
   2e6fc:	0000ffff 	.word	0x0000ffff

0002e700 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2e700:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e702:	b087      	sub	sp, #28
   2e704:	af00      	add	r7, sp, #0
   2e706:	60f8      	str	r0, [r7, #12]
   2e708:	60b9      	str	r1, [r7, #8]
   2e70a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2e70c:	2301      	movs	r3, #1
   2e70e:	425b      	negs	r3, r3
   2e710:	617b      	str	r3, [r7, #20]
        sent = 0;
   2e712:	2300      	movs	r3, #0
   2e714:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2e716:	e01a      	b.n	2e74e <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2e718:	68fb      	ldr	r3, [r7, #12]
   2e71a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e71c:	68dc      	ldr	r4, [r3, #12]
   2e71e:	68fb      	ldr	r3, [r7, #12]
   2e720:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e722:	68fb      	ldr	r3, [r7, #12]
   2e724:	691a      	ldr	r2, [r3, #16]
   2e726:	693b      	ldr	r3, [r7, #16]
   2e728:	18d6      	adds	r6, r2, r3
   2e72a:	687b      	ldr	r3, [r7, #4]
   2e72c:	0018      	movs	r0, r3
   2e72e:	4b1a      	ldr	r3, [pc, #104]	; (2e798 <sendPacket+0x98>)
   2e730:	4798      	blx	r3
   2e732:	0003      	movs	r3, r0
   2e734:	68ba      	ldr	r2, [r7, #8]
   2e736:	0031      	movs	r1, r6
   2e738:	0028      	movs	r0, r5
   2e73a:	47a0      	blx	r4
   2e73c:	0003      	movs	r3, r0
   2e73e:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2e740:	697b      	ldr	r3, [r7, #20]
   2e742:	2b00      	cmp	r3, #0
   2e744:	db0e      	blt.n	2e764 <sendPacket+0x64>
            break;
        sent += rc;
   2e746:	693a      	ldr	r2, [r7, #16]
   2e748:	697b      	ldr	r3, [r7, #20]
   2e74a:	18d3      	adds	r3, r2, r3
   2e74c:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2e74e:	693a      	ldr	r2, [r7, #16]
   2e750:	68bb      	ldr	r3, [r7, #8]
   2e752:	429a      	cmp	r2, r3
   2e754:	da07      	bge.n	2e766 <sendPacket+0x66>
   2e756:	687b      	ldr	r3, [r7, #4]
   2e758:	0018      	movs	r0, r3
   2e75a:	4b10      	ldr	r3, [pc, #64]	; (2e79c <sendPacket+0x9c>)
   2e75c:	4798      	blx	r3
   2e75e:	1e03      	subs	r3, r0, #0
   2e760:	d0da      	beq.n	2e718 <sendPacket+0x18>
   2e762:	e000      	b.n	2e766 <sendPacket+0x66>
            break;
   2e764:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2e766:	693a      	ldr	r2, [r7, #16]
   2e768:	68bb      	ldr	r3, [r7, #8]
   2e76a:	429a      	cmp	r2, r3
   2e76c:	d10b      	bne.n	2e786 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2e76e:	68fb      	ldr	r3, [r7, #12]
   2e770:	3354      	adds	r3, #84	; 0x54
   2e772:	001a      	movs	r2, r3
   2e774:	68fb      	ldr	r3, [r7, #12]
   2e776:	699b      	ldr	r3, [r3, #24]
   2e778:	0019      	movs	r1, r3
   2e77a:	0010      	movs	r0, r2
   2e77c:	4b08      	ldr	r3, [pc, #32]	; (2e7a0 <sendPacket+0xa0>)
   2e77e:	4798      	blx	r3
        rc = SUCCESS;
   2e780:	2300      	movs	r3, #0
   2e782:	617b      	str	r3, [r7, #20]
   2e784:	e002      	b.n	2e78c <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2e786:	2301      	movs	r3, #1
   2e788:	425b      	negs	r3, r3
   2e78a:	617b      	str	r3, [r7, #20]
    return rc;
   2e78c:	697b      	ldr	r3, [r7, #20]
}
   2e78e:	0018      	movs	r0, r3
   2e790:	46bd      	mov	sp, r7
   2e792:	b007      	add	sp, #28
   2e794:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e796:	46c0      	nop			; (mov r8, r8)
   2e798:	0002f561 	.word	0x0002f561
   2e79c:	0002f4e5 	.word	0x0002f4e5
   2e7a0:	0002f539 	.word	0x0002f539

0002e7a4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2e7a4:	b580      	push	{r7, lr}
   2e7a6:	b086      	sub	sp, #24
   2e7a8:	af00      	add	r7, sp, #0
   2e7aa:	60f8      	str	r0, [r7, #12]
   2e7ac:	60b9      	str	r1, [r7, #8]
   2e7ae:	607a      	str	r2, [r7, #4]
   2e7b0:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2e7b2:	68fb      	ldr	r3, [r7, #12]
   2e7b4:	68ba      	ldr	r2, [r7, #8]
   2e7b6:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e7b8:	2300      	movs	r3, #0
   2e7ba:	617b      	str	r3, [r7, #20]
   2e7bc:	e00a      	b.n	2e7d4 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2e7be:	68fa      	ldr	r2, [r7, #12]
   2e7c0:	697b      	ldr	r3, [r7, #20]
   2e7c2:	3304      	adds	r3, #4
   2e7c4:	00db      	lsls	r3, r3, #3
   2e7c6:	18d3      	adds	r3, r2, r3
   2e7c8:	3304      	adds	r3, #4
   2e7ca:	2200      	movs	r2, #0
   2e7cc:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2e7ce:	697b      	ldr	r3, [r7, #20]
   2e7d0:	3301      	adds	r3, #1
   2e7d2:	617b      	str	r3, [r7, #20]
   2e7d4:	697b      	ldr	r3, [r7, #20]
   2e7d6:	2b04      	cmp	r3, #4
   2e7d8:	ddf1      	ble.n	2e7be <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2e7da:	68fb      	ldr	r3, [r7, #12]
   2e7dc:	687a      	ldr	r2, [r7, #4]
   2e7de:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2e7e0:	68fb      	ldr	r3, [r7, #12]
   2e7e2:	683a      	ldr	r2, [r7, #0]
   2e7e4:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2e7e6:	68fb      	ldr	r3, [r7, #12]
   2e7e8:	6a3a      	ldr	r2, [r7, #32]
   2e7ea:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2e7ec:	68fb      	ldr	r3, [r7, #12]
   2e7ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e7f0:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2e7f2:	68fb      	ldr	r3, [r7, #12]
   2e7f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e7f6:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2e7f8:	68fb      	ldr	r3, [r7, #12]
   2e7fa:	2200      	movs	r2, #0
   2e7fc:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2e7fe:	68fb      	ldr	r3, [r7, #12]
   2e800:	2200      	movs	r2, #0
   2e802:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2e804:	68fb      	ldr	r3, [r7, #12]
   2e806:	2200      	movs	r2, #0
   2e808:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2e80a:	68fb      	ldr	r3, [r7, #12]
   2e80c:	2201      	movs	r2, #1
   2e80e:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2e810:	68fb      	ldr	r3, [r7, #12]
   2e812:	3354      	adds	r3, #84	; 0x54
   2e814:	0018      	movs	r0, r3
   2e816:	4b03      	ldr	r3, [pc, #12]	; (2e824 <MQTTClientInit+0x80>)
   2e818:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2e81a:	46c0      	nop			; (mov r8, r8)
   2e81c:	46bd      	mov	sp, r7
   2e81e:	b006      	add	sp, #24
   2e820:	bd80      	pop	{r7, pc}
   2e822:	46c0      	nop			; (mov r8, r8)
   2e824:	0002f589 	.word	0x0002f589

0002e828 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2e828:	b590      	push	{r4, r7, lr}
   2e82a:	b08b      	sub	sp, #44	; 0x2c
   2e82c:	af00      	add	r7, sp, #0
   2e82e:	60f8      	str	r0, [r7, #12]
   2e830:	60b9      	str	r1, [r7, #8]
   2e832:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2e834:	2301      	movs	r3, #1
   2e836:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2e838:	2300      	movs	r3, #0
   2e83a:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2e83c:	2304      	movs	r3, #4
   2e83e:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2e840:	68bb      	ldr	r3, [r7, #8]
   2e842:	2200      	movs	r2, #0
   2e844:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2e846:	2301      	movs	r3, #1
   2e848:	425b      	negs	r3, r3
   2e84a:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2e84c:	6a3b      	ldr	r3, [r7, #32]
   2e84e:	3301      	adds	r3, #1
   2e850:	623b      	str	r3, [r7, #32]
   2e852:	6a3a      	ldr	r2, [r7, #32]
   2e854:	69fb      	ldr	r3, [r7, #28]
   2e856:	429a      	cmp	r2, r3
   2e858:	dd03      	ble.n	2e862 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2e85a:	2301      	movs	r3, #1
   2e85c:	425b      	negs	r3, r3
   2e85e:	61bb      	str	r3, [r7, #24]
            goto exit;
   2e860:	e026      	b.n	2e8b0 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2e862:	68fb      	ldr	r3, [r7, #12]
   2e864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e866:	689c      	ldr	r4, [r3, #8]
   2e868:	68fb      	ldr	r3, [r7, #12]
   2e86a:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2e86c:	687b      	ldr	r3, [r7, #4]
   2e86e:	2217      	movs	r2, #23
   2e870:	18b9      	adds	r1, r7, r2
   2e872:	2201      	movs	r2, #1
   2e874:	47a0      	blx	r4
   2e876:	0003      	movs	r3, r0
   2e878:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2e87a:	69bb      	ldr	r3, [r7, #24]
   2e87c:	2b01      	cmp	r3, #1
   2e87e:	d116      	bne.n	2e8ae <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2e880:	68bb      	ldr	r3, [r7, #8]
   2e882:	681a      	ldr	r2, [r3, #0]
   2e884:	2317      	movs	r3, #23
   2e886:	18fb      	adds	r3, r7, r3
   2e888:	781b      	ldrb	r3, [r3, #0]
   2e88a:	0019      	movs	r1, r3
   2e88c:	237f      	movs	r3, #127	; 0x7f
   2e88e:	400b      	ands	r3, r1
   2e890:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2e892:	434b      	muls	r3, r1
   2e894:	18d2      	adds	r2, r2, r3
   2e896:	68bb      	ldr	r3, [r7, #8]
   2e898:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2e89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2e89c:	01db      	lsls	r3, r3, #7
   2e89e:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2e8a0:	2317      	movs	r3, #23
   2e8a2:	18fb      	adds	r3, r7, r3
   2e8a4:	781b      	ldrb	r3, [r3, #0]
   2e8a6:	b25b      	sxtb	r3, r3
   2e8a8:	2b00      	cmp	r3, #0
   2e8aa:	dbcc      	blt.n	2e846 <decodePacket+0x1e>
   2e8ac:	e000      	b.n	2e8b0 <decodePacket+0x88>
            goto exit;
   2e8ae:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2e8b0:	6a3b      	ldr	r3, [r7, #32]
}
   2e8b2:	0018      	movs	r0, r3
   2e8b4:	46bd      	mov	sp, r7
   2e8b6:	b00b      	add	sp, #44	; 0x2c
   2e8b8:	bd90      	pop	{r4, r7, pc}
	...

0002e8bc <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2e8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e8be:	46c6      	mov	lr, r8
   2e8c0:	b500      	push	{lr}
   2e8c2:	b086      	sub	sp, #24
   2e8c4:	af00      	add	r7, sp, #0
   2e8c6:	6078      	str	r0, [r7, #4]
   2e8c8:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2e8ca:	2301      	movs	r3, #1
   2e8cc:	425b      	negs	r3, r3
   2e8ce:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2e8d0:	2300      	movs	r3, #0
   2e8d2:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2e8d4:	2300      	movs	r3, #0
   2e8d6:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2e8d8:	2300      	movs	r3, #0
   2e8da:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2e8dc:	687b      	ldr	r3, [r7, #4]
   2e8de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e8e0:	689c      	ldr	r4, [r3, #8]
   2e8e2:	687b      	ldr	r3, [r7, #4]
   2e8e4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e8e6:	687b      	ldr	r3, [r7, #4]
   2e8e8:	695e      	ldr	r6, [r3, #20]
   2e8ea:	683b      	ldr	r3, [r7, #0]
   2e8ec:	0018      	movs	r0, r3
   2e8ee:	4b2b      	ldr	r3, [pc, #172]	; (2e99c <readPacket+0xe0>)
   2e8f0:	4798      	blx	r3
   2e8f2:	0003      	movs	r3, r0
   2e8f4:	2201      	movs	r2, #1
   2e8f6:	0031      	movs	r1, r6
   2e8f8:	0028      	movs	r0, r5
   2e8fa:	47a0      	blx	r4
   2e8fc:	0003      	movs	r3, r0
   2e8fe:	2b01      	cmp	r3, #1
   2e900:	d141      	bne.n	2e986 <readPacket+0xca>
        goto exit;

    len = 1;
   2e902:	2301      	movs	r3, #1
   2e904:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2e906:	683b      	ldr	r3, [r7, #0]
   2e908:	0018      	movs	r0, r3
   2e90a:	4b24      	ldr	r3, [pc, #144]	; (2e99c <readPacket+0xe0>)
   2e90c:	4798      	blx	r3
   2e90e:	0002      	movs	r2, r0
   2e910:	2308      	movs	r3, #8
   2e912:	18f9      	adds	r1, r7, r3
   2e914:	687b      	ldr	r3, [r7, #4]
   2e916:	0018      	movs	r0, r3
   2e918:	4b21      	ldr	r3, [pc, #132]	; (2e9a0 <readPacket+0xe4>)
   2e91a:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2e91c:	687b      	ldr	r3, [r7, #4]
   2e91e:	695b      	ldr	r3, [r3, #20]
   2e920:	3301      	adds	r3, #1
   2e922:	68ba      	ldr	r2, [r7, #8]
   2e924:	0011      	movs	r1, r2
   2e926:	0018      	movs	r0, r3
   2e928:	4b1e      	ldr	r3, [pc, #120]	; (2e9a4 <readPacket+0xe8>)
   2e92a:	4798      	blx	r3
   2e92c:	0002      	movs	r2, r0
   2e92e:	693b      	ldr	r3, [r7, #16]
   2e930:	189b      	adds	r3, r3, r2
   2e932:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2e934:	68bb      	ldr	r3, [r7, #8]
   2e936:	2b00      	cmp	r3, #0
   2e938:	dd17      	ble.n	2e96a <readPacket+0xae>
   2e93a:	687b      	ldr	r3, [r7, #4]
   2e93c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2e93e:	689c      	ldr	r4, [r3, #8]
   2e940:	687b      	ldr	r3, [r7, #4]
   2e942:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2e944:	687b      	ldr	r3, [r7, #4]
   2e946:	695a      	ldr	r2, [r3, #20]
   2e948:	693b      	ldr	r3, [r7, #16]
   2e94a:	18d6      	adds	r6, r2, r3
   2e94c:	68bb      	ldr	r3, [r7, #8]
   2e94e:	4698      	mov	r8, r3
   2e950:	683b      	ldr	r3, [r7, #0]
   2e952:	0018      	movs	r0, r3
   2e954:	4b11      	ldr	r3, [pc, #68]	; (2e99c <readPacket+0xe0>)
   2e956:	4798      	blx	r3
   2e958:	0003      	movs	r3, r0
   2e95a:	4642      	mov	r2, r8
   2e95c:	0031      	movs	r1, r6
   2e95e:	0028      	movs	r0, r5
   2e960:	47a0      	blx	r4
   2e962:	0002      	movs	r2, r0
   2e964:	68bb      	ldr	r3, [r7, #8]
   2e966:	429a      	cmp	r2, r3
   2e968:	d10f      	bne.n	2e98a <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2e96a:	687b      	ldr	r3, [r7, #4]
   2e96c:	695b      	ldr	r3, [r3, #20]
   2e96e:	781a      	ldrb	r2, [r3, #0]
   2e970:	230c      	movs	r3, #12
   2e972:	18fb      	adds	r3, r7, r3
   2e974:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2e976:	230c      	movs	r3, #12
   2e978:	18fb      	adds	r3, r7, r3
   2e97a:	781b      	ldrb	r3, [r3, #0]
   2e97c:	061b      	lsls	r3, r3, #24
   2e97e:	0f1b      	lsrs	r3, r3, #28
   2e980:	b2db      	uxtb	r3, r3
   2e982:	617b      	str	r3, [r7, #20]
   2e984:	e002      	b.n	2e98c <readPacket+0xd0>
        goto exit;
   2e986:	46c0      	nop			; (mov r8, r8)
   2e988:	e000      	b.n	2e98c <readPacket+0xd0>
        goto exit;
   2e98a:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2e98c:	697b      	ldr	r3, [r7, #20]
}
   2e98e:	0018      	movs	r0, r3
   2e990:	46bd      	mov	sp, r7
   2e992:	b006      	add	sp, #24
   2e994:	bc04      	pop	{r2}
   2e996:	4690      	mov	r8, r2
   2e998:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e99a:	46c0      	nop			; (mov r8, r8)
   2e99c:	0002f561 	.word	0x0002f561
   2e9a0:	0002e829 	.word	0x0002e829
   2e9a4:	00030339 	.word	0x00030339

0002e9a8 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2e9a8:	b580      	push	{r7, lr}
   2e9aa:	b086      	sub	sp, #24
   2e9ac:	af00      	add	r7, sp, #0
   2e9ae:	6078      	str	r0, [r7, #4]
   2e9b0:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2e9b2:	687b      	ldr	r3, [r7, #4]
   2e9b4:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2e9b6:	683b      	ldr	r3, [r7, #0]
   2e9b8:	689b      	ldr	r3, [r3, #8]
   2e9ba:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2e9bc:	683b      	ldr	r3, [r7, #0]
   2e9be:	685b      	ldr	r3, [r3, #4]
   2e9c0:	001a      	movs	r2, r3
   2e9c2:	693b      	ldr	r3, [r7, #16]
   2e9c4:	189b      	adds	r3, r3, r2
   2e9c6:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2e9c8:	e039      	b.n	2ea3e <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2e9ca:	693b      	ldr	r3, [r7, #16]
   2e9cc:	781b      	ldrb	r3, [r3, #0]
   2e9ce:	2b2f      	cmp	r3, #47	; 0x2f
   2e9d0:	d103      	bne.n	2e9da <isTopicMatched+0x32>
   2e9d2:	697b      	ldr	r3, [r7, #20]
   2e9d4:	781b      	ldrb	r3, [r3, #0]
   2e9d6:	2b2f      	cmp	r3, #47	; 0x2f
   2e9d8:	d13a      	bne.n	2ea50 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2e9da:	697b      	ldr	r3, [r7, #20]
   2e9dc:	781b      	ldrb	r3, [r3, #0]
   2e9de:	2b2b      	cmp	r3, #43	; 0x2b
   2e9e0:	d009      	beq.n	2e9f6 <isTopicMatched+0x4e>
   2e9e2:	697b      	ldr	r3, [r7, #20]
   2e9e4:	781b      	ldrb	r3, [r3, #0]
   2e9e6:	2b23      	cmp	r3, #35	; 0x23
   2e9e8:	d005      	beq.n	2e9f6 <isTopicMatched+0x4e>
   2e9ea:	697b      	ldr	r3, [r7, #20]
   2e9ec:	781a      	ldrb	r2, [r3, #0]
   2e9ee:	693b      	ldr	r3, [r7, #16]
   2e9f0:	781b      	ldrb	r3, [r3, #0]
   2e9f2:	429a      	cmp	r2, r3
   2e9f4:	d12e      	bne.n	2ea54 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2e9f6:	697b      	ldr	r3, [r7, #20]
   2e9f8:	781b      	ldrb	r3, [r3, #0]
   2e9fa:	2b2b      	cmp	r3, #43	; 0x2b
   2e9fc:	d112      	bne.n	2ea24 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2e9fe:	693b      	ldr	r3, [r7, #16]
   2ea00:	3301      	adds	r3, #1
   2ea02:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2ea04:	e005      	b.n	2ea12 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2ea06:	693b      	ldr	r3, [r7, #16]
   2ea08:	3301      	adds	r3, #1
   2ea0a:	613b      	str	r3, [r7, #16]
   2ea0c:	693b      	ldr	r3, [r7, #16]
   2ea0e:	3301      	adds	r3, #1
   2ea10:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2ea12:	68fa      	ldr	r2, [r7, #12]
   2ea14:	68bb      	ldr	r3, [r7, #8]
   2ea16:	429a      	cmp	r2, r3
   2ea18:	d20b      	bcs.n	2ea32 <isTopicMatched+0x8a>
   2ea1a:	68fb      	ldr	r3, [r7, #12]
   2ea1c:	781b      	ldrb	r3, [r3, #0]
   2ea1e:	2b2f      	cmp	r3, #47	; 0x2f
   2ea20:	d1f1      	bne.n	2ea06 <isTopicMatched+0x5e>
   2ea22:	e006      	b.n	2ea32 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2ea24:	697b      	ldr	r3, [r7, #20]
   2ea26:	781b      	ldrb	r3, [r3, #0]
   2ea28:	2b23      	cmp	r3, #35	; 0x23
   2ea2a:	d102      	bne.n	2ea32 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2ea2c:	68bb      	ldr	r3, [r7, #8]
   2ea2e:	3b01      	subs	r3, #1
   2ea30:	613b      	str	r3, [r7, #16]
        curf++;
   2ea32:	697b      	ldr	r3, [r7, #20]
   2ea34:	3301      	adds	r3, #1
   2ea36:	617b      	str	r3, [r7, #20]
        curn++;
   2ea38:	693b      	ldr	r3, [r7, #16]
   2ea3a:	3301      	adds	r3, #1
   2ea3c:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2ea3e:	697b      	ldr	r3, [r7, #20]
   2ea40:	781b      	ldrb	r3, [r3, #0]
   2ea42:	2b00      	cmp	r3, #0
   2ea44:	d007      	beq.n	2ea56 <isTopicMatched+0xae>
   2ea46:	693a      	ldr	r2, [r7, #16]
   2ea48:	68bb      	ldr	r3, [r7, #8]
   2ea4a:	429a      	cmp	r2, r3
   2ea4c:	d3bd      	bcc.n	2e9ca <isTopicMatched+0x22>
   2ea4e:	e002      	b.n	2ea56 <isTopicMatched+0xae>
            break;
   2ea50:	46c0      	nop			; (mov r8, r8)
   2ea52:	e000      	b.n	2ea56 <isTopicMatched+0xae>
            break;
   2ea54:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2ea56:	693a      	ldr	r2, [r7, #16]
   2ea58:	68bb      	ldr	r3, [r7, #8]
   2ea5a:	429a      	cmp	r2, r3
   2ea5c:	d105      	bne.n	2ea6a <isTopicMatched+0xc2>
   2ea5e:	697b      	ldr	r3, [r7, #20]
   2ea60:	781b      	ldrb	r3, [r3, #0]
   2ea62:	2b00      	cmp	r3, #0
   2ea64:	d101      	bne.n	2ea6a <isTopicMatched+0xc2>
   2ea66:	2301      	movs	r3, #1
   2ea68:	e000      	b.n	2ea6c <isTopicMatched+0xc4>
   2ea6a:	2300      	movs	r3, #0
   2ea6c:	b2db      	uxtb	r3, r3
}
   2ea6e:	0018      	movs	r0, r3
   2ea70:	46bd      	mov	sp, r7
   2ea72:	b006      	add	sp, #24
   2ea74:	bd80      	pop	{r7, pc}
	...

0002ea78 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2ea78:	b580      	push	{r7, lr}
   2ea7a:	b08a      	sub	sp, #40	; 0x28
   2ea7c:	af00      	add	r7, sp, #0
   2ea7e:	60f8      	str	r0, [r7, #12]
   2ea80:	60b9      	str	r1, [r7, #8]
   2ea82:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2ea84:	2301      	movs	r3, #1
   2ea86:	425b      	negs	r3, r3
   2ea88:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2ea8a:	2300      	movs	r3, #0
   2ea8c:	627b      	str	r3, [r7, #36]	; 0x24
   2ea8e:	e044      	b.n	2eb1a <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2ea90:	68fa      	ldr	r2, [r7, #12]
   2ea92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ea94:	3304      	adds	r3, #4
   2ea96:	00db      	lsls	r3, r3, #3
   2ea98:	18d3      	adds	r3, r2, r3
   2ea9a:	3304      	adds	r3, #4
   2ea9c:	681b      	ldr	r3, [r3, #0]
   2ea9e:	2b00      	cmp	r3, #0
   2eaa0:	d038      	beq.n	2eb14 <deliverMessage+0x9c>
   2eaa2:	68fa      	ldr	r2, [r7, #12]
   2eaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eaa6:	3304      	adds	r3, #4
   2eaa8:	00db      	lsls	r3, r3, #3
   2eaaa:	18d3      	adds	r3, r2, r3
   2eaac:	3304      	adds	r3, #4
   2eaae:	681a      	ldr	r2, [r3, #0]
   2eab0:	68bb      	ldr	r3, [r7, #8]
   2eab2:	0011      	movs	r1, r2
   2eab4:	0018      	movs	r0, r3
   2eab6:	4b28      	ldr	r3, [pc, #160]	; (2eb58 <deliverMessage+0xe0>)
   2eab8:	4798      	blx	r3
   2eaba:	1e03      	subs	r3, r0, #0
   2eabc:	d10d      	bne.n	2eada <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2eabe:	68fa      	ldr	r2, [r7, #12]
   2eac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eac2:	3304      	adds	r3, #4
   2eac4:	00db      	lsls	r3, r3, #3
   2eac6:	18d3      	adds	r3, r2, r3
   2eac8:	3304      	adds	r3, #4
   2eaca:	681b      	ldr	r3, [r3, #0]
   2eacc:	68ba      	ldr	r2, [r7, #8]
   2eace:	0011      	movs	r1, r2
   2ead0:	0018      	movs	r0, r3
   2ead2:	4b22      	ldr	r3, [pc, #136]	; (2eb5c <deliverMessage+0xe4>)
   2ead4:	4798      	blx	r3
   2ead6:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2ead8:	d01c      	beq.n	2eb14 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2eada:	68fa      	ldr	r2, [r7, #12]
   2eadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eade:	3304      	adds	r3, #4
   2eae0:	00db      	lsls	r3, r3, #3
   2eae2:	18d3      	adds	r3, r2, r3
   2eae4:	3308      	adds	r3, #8
   2eae6:	681b      	ldr	r3, [r3, #0]
   2eae8:	2b00      	cmp	r3, #0
   2eaea:	d013      	beq.n	2eb14 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2eaec:	687a      	ldr	r2, [r7, #4]
   2eaee:	68b9      	ldr	r1, [r7, #8]
   2eaf0:	2318      	movs	r3, #24
   2eaf2:	18fb      	adds	r3, r7, r3
   2eaf4:	0018      	movs	r0, r3
   2eaf6:	4b1a      	ldr	r3, [pc, #104]	; (2eb60 <deliverMessage+0xe8>)
   2eaf8:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2eafa:	68fa      	ldr	r2, [r7, #12]
   2eafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eafe:	3304      	adds	r3, #4
   2eb00:	00db      	lsls	r3, r3, #3
   2eb02:	18d3      	adds	r3, r2, r3
   2eb04:	3308      	adds	r3, #8
   2eb06:	681b      	ldr	r3, [r3, #0]
   2eb08:	2218      	movs	r2, #24
   2eb0a:	18ba      	adds	r2, r7, r2
   2eb0c:	0010      	movs	r0, r2
   2eb0e:	4798      	blx	r3
                rc = SUCCESS;
   2eb10:	2300      	movs	r3, #0
   2eb12:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2eb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb16:	3301      	adds	r3, #1
   2eb18:	627b      	str	r3, [r7, #36]	; 0x24
   2eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb1c:	2b04      	cmp	r3, #4
   2eb1e:	ddb7      	ble.n	2ea90 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2eb20:	6a3b      	ldr	r3, [r7, #32]
   2eb22:	3301      	adds	r3, #1
   2eb24:	d112      	bne.n	2eb4c <deliverMessage+0xd4>
   2eb26:	68fb      	ldr	r3, [r7, #12]
   2eb28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2eb2a:	2b00      	cmp	r3, #0
   2eb2c:	d00e      	beq.n	2eb4c <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2eb2e:	687a      	ldr	r2, [r7, #4]
   2eb30:	68b9      	ldr	r1, [r7, #8]
   2eb32:	2310      	movs	r3, #16
   2eb34:	18fb      	adds	r3, r7, r3
   2eb36:	0018      	movs	r0, r3
   2eb38:	4b09      	ldr	r3, [pc, #36]	; (2eb60 <deliverMessage+0xe8>)
   2eb3a:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2eb3c:	68fb      	ldr	r3, [r7, #12]
   2eb3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2eb40:	2210      	movs	r2, #16
   2eb42:	18ba      	adds	r2, r7, r2
   2eb44:	0010      	movs	r0, r2
   2eb46:	4798      	blx	r3
        rc = SUCCESS;
   2eb48:	2300      	movs	r3, #0
   2eb4a:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2eb4c:	6a3b      	ldr	r3, [r7, #32]
}
   2eb4e:	0018      	movs	r0, r3
   2eb50:	46bd      	mov	sp, r7
   2eb52:	b00a      	add	sp, #40	; 0x28
   2eb54:	bd80      	pop	{r7, pc}
   2eb56:	46c0      	nop			; (mov r8, r8)
   2eb58:	0003074d 	.word	0x0003074d
   2eb5c:	0002e9a9 	.word	0x0002e9a9
   2eb60:	0002e6b1 	.word	0x0002e6b1

0002eb64 <keepalive>:


int keepalive(MQTTClient* c)
{
   2eb64:	b580      	push	{r7, lr}
   2eb66:	b088      	sub	sp, #32
   2eb68:	af00      	add	r7, sp, #0
   2eb6a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2eb6c:	2301      	movs	r3, #1
   2eb6e:	425b      	negs	r3, r3
   2eb70:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2eb72:	687b      	ldr	r3, [r7, #4]
   2eb74:	699b      	ldr	r3, [r3, #24]
   2eb76:	2b00      	cmp	r3, #0
   2eb78:	d102      	bne.n	2eb80 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2eb7a:	2300      	movs	r3, #0
   2eb7c:	61fb      	str	r3, [r7, #28]
        goto exit;
   2eb7e:	e033      	b.n	2ebe8 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2eb80:	687b      	ldr	r3, [r7, #4]
   2eb82:	3354      	adds	r3, #84	; 0x54
   2eb84:	0018      	movs	r0, r3
   2eb86:	4b1b      	ldr	r3, [pc, #108]	; (2ebf4 <keepalive+0x90>)
   2eb88:	4798      	blx	r3
   2eb8a:	1e03      	subs	r3, r0, #0
   2eb8c:	d02c      	beq.n	2ebe8 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2eb8e:	687b      	ldr	r3, [r7, #4]
   2eb90:	7f1b      	ldrb	r3, [r3, #28]
   2eb92:	2b00      	cmp	r3, #0
   2eb94:	d128      	bne.n	2ebe8 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2eb96:	230c      	movs	r3, #12
   2eb98:	18fb      	adds	r3, r7, r3
   2eb9a:	0018      	movs	r0, r3
   2eb9c:	4b16      	ldr	r3, [pc, #88]	; (2ebf8 <keepalive+0x94>)
   2eb9e:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2eba0:	23fa      	movs	r3, #250	; 0xfa
   2eba2:	009a      	lsls	r2, r3, #2
   2eba4:	230c      	movs	r3, #12
   2eba6:	18fb      	adds	r3, r7, r3
   2eba8:	0011      	movs	r1, r2
   2ebaa:	0018      	movs	r0, r3
   2ebac:	4b13      	ldr	r3, [pc, #76]	; (2ebfc <keepalive+0x98>)
   2ebae:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2ebb0:	687b      	ldr	r3, [r7, #4]
   2ebb2:	691a      	ldr	r2, [r3, #16]
   2ebb4:	687b      	ldr	r3, [r7, #4]
   2ebb6:	689b      	ldr	r3, [r3, #8]
   2ebb8:	0019      	movs	r1, r3
   2ebba:	0010      	movs	r0, r2
   2ebbc:	4b10      	ldr	r3, [pc, #64]	; (2ec00 <keepalive+0x9c>)
   2ebbe:	4798      	blx	r3
   2ebc0:	0003      	movs	r3, r0
   2ebc2:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2ebc4:	69bb      	ldr	r3, [r7, #24]
   2ebc6:	2b00      	cmp	r3, #0
   2ebc8:	dd0e      	ble.n	2ebe8 <keepalive+0x84>
   2ebca:	230c      	movs	r3, #12
   2ebcc:	18fa      	adds	r2, r7, r3
   2ebce:	69b9      	ldr	r1, [r7, #24]
   2ebd0:	687b      	ldr	r3, [r7, #4]
   2ebd2:	0018      	movs	r0, r3
   2ebd4:	4b0b      	ldr	r3, [pc, #44]	; (2ec04 <keepalive+0xa0>)
   2ebd6:	4798      	blx	r3
   2ebd8:	0003      	movs	r3, r0
   2ebda:	61fb      	str	r3, [r7, #28]
   2ebdc:	69fb      	ldr	r3, [r7, #28]
   2ebde:	2b00      	cmp	r3, #0
   2ebe0:	d102      	bne.n	2ebe8 <keepalive+0x84>
                c->ping_outstanding = 1;
   2ebe2:	687b      	ldr	r3, [r7, #4]
   2ebe4:	2201      	movs	r2, #1
   2ebe6:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2ebe8:	69fb      	ldr	r3, [r7, #28]
}
   2ebea:	0018      	movs	r0, r3
   2ebec:	46bd      	mov	sp, r7
   2ebee:	b008      	add	sp, #32
   2ebf0:	bd80      	pop	{r7, pc}
   2ebf2:	46c0      	nop			; (mov r8, r8)
   2ebf4:	0002f4e5 	.word	0x0002f4e5
   2ebf8:	0002f589 	.word	0x0002f589
   2ebfc:	0002f511 	.word	0x0002f511
   2ec00:	0003015d 	.word	0x0003015d
   2ec04:	0002e701 	.word	0x0002e701

0002ec08 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2ec08:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ec0a:	b095      	sub	sp, #84	; 0x54
   2ec0c:	af06      	add	r7, sp, #24
   2ec0e:	6078      	str	r0, [r7, #4]
   2ec10:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2ec12:	683a      	ldr	r2, [r7, #0]
   2ec14:	687b      	ldr	r3, [r7, #4]
   2ec16:	0011      	movs	r1, r2
   2ec18:	0018      	movs	r0, r3
   2ec1a:	4b70      	ldr	r3, [pc, #448]	; (2eddc <cycle+0x1d4>)
   2ec1c:	4798      	blx	r3
   2ec1e:	0002      	movs	r2, r0
   2ec20:	232e      	movs	r3, #46	; 0x2e
   2ec22:	18fb      	adds	r3, r7, r3
   2ec24:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2ec26:	2300      	movs	r3, #0
   2ec28:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2ec2a:	2300      	movs	r3, #0
   2ec2c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2ec2e:	232e      	movs	r3, #46	; 0x2e
   2ec30:	18fb      	adds	r3, r7, r3
   2ec32:	881b      	ldrh	r3, [r3, #0]
   2ec34:	2b0d      	cmp	r3, #13
   2ec36:	d900      	bls.n	2ec3a <cycle+0x32>
   2ec38:	e0bd      	b.n	2edb6 <cycle+0x1ae>
   2ec3a:	009a      	lsls	r2, r3, #2
   2ec3c:	4b68      	ldr	r3, [pc, #416]	; (2ede0 <cycle+0x1d8>)
   2ec3e:	18d3      	adds	r3, r2, r3
   2ec40:	681b      	ldr	r3, [r3, #0]
   2ec42:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2ec44:	687b      	ldr	r3, [r7, #4]
   2ec46:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2ec48:	687b      	ldr	r3, [r7, #4]
   2ec4a:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2ec4c:	001e      	movs	r6, r3
   2ec4e:	2310      	movs	r3, #16
   2ec50:	18fb      	adds	r3, r7, r3
   2ec52:	1d1d      	adds	r5, r3, #4
   2ec54:	2310      	movs	r3, #16
   2ec56:	18fb      	adds	r3, r7, r3
   2ec58:	1c5c      	adds	r4, r3, #1
   2ec5a:	230c      	movs	r3, #12
   2ec5c:	18f9      	adds	r1, r7, r3
   2ec5e:	2310      	movs	r3, #16
   2ec60:	18fb      	adds	r3, r7, r3
   2ec62:	1c98      	adds	r0, r3, #2
   2ec64:	9604      	str	r6, [sp, #16]
   2ec66:	9203      	str	r2, [sp, #12]
   2ec68:	2310      	movs	r3, #16
   2ec6a:	18fb      	adds	r3, r7, r3
   2ec6c:	330c      	adds	r3, #12
   2ec6e:	9302      	str	r3, [sp, #8]
   2ec70:	2310      	movs	r3, #16
   2ec72:	18fb      	adds	r3, r7, r3
   2ec74:	3308      	adds	r3, #8
   2ec76:	9301      	str	r3, [sp, #4]
   2ec78:	2320      	movs	r3, #32
   2ec7a:	18fb      	adds	r3, r7, r3
   2ec7c:	9300      	str	r3, [sp, #0]
   2ec7e:	002b      	movs	r3, r5
   2ec80:	0022      	movs	r2, r4
   2ec82:	4c58      	ldr	r4, [pc, #352]	; (2ede4 <cycle+0x1dc>)
   2ec84:	47a0      	blx	r4
   2ec86:	0003      	movs	r3, r0
   2ec88:	2b01      	cmp	r3, #1
   2ec8a:	d000      	beq.n	2ec8e <cycle+0x86>
   2ec8c:	e098      	b.n	2edc0 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2ec8e:	68fb      	ldr	r3, [r7, #12]
   2ec90:	b2da      	uxtb	r2, r3
   2ec92:	2310      	movs	r3, #16
   2ec94:	18fb      	adds	r3, r7, r3
   2ec96:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2ec98:	2310      	movs	r3, #16
   2ec9a:	18fa      	adds	r2, r7, r3
   2ec9c:	2320      	movs	r3, #32
   2ec9e:	18f9      	adds	r1, r7, r3
   2eca0:	687b      	ldr	r3, [r7, #4]
   2eca2:	0018      	movs	r0, r3
   2eca4:	4b50      	ldr	r3, [pc, #320]	; (2ede8 <cycle+0x1e0>)
   2eca6:	4798      	blx	r3
            if (msg.qos != QOS0)
   2eca8:	2310      	movs	r3, #16
   2ecaa:	18fb      	adds	r3, r7, r3
   2ecac:	781b      	ldrb	r3, [r3, #0]
   2ecae:	2b00      	cmp	r3, #0
   2ecb0:	d100      	bne.n	2ecb4 <cycle+0xac>
   2ecb2:	e07d      	b.n	2edb0 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2ecb4:	2310      	movs	r3, #16
   2ecb6:	18fb      	adds	r3, r7, r3
   2ecb8:	781b      	ldrb	r3, [r3, #0]
   2ecba:	2b01      	cmp	r3, #1
   2ecbc:	d10f      	bne.n	2ecde <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2ecbe:	687b      	ldr	r3, [r7, #4]
   2ecc0:	6918      	ldr	r0, [r3, #16]
   2ecc2:	687b      	ldr	r3, [r7, #4]
   2ecc4:	689b      	ldr	r3, [r3, #8]
   2ecc6:	0019      	movs	r1, r3
   2ecc8:	2310      	movs	r3, #16
   2ecca:	18fb      	adds	r3, r7, r3
   2eccc:	889b      	ldrh	r3, [r3, #4]
   2ecce:	9300      	str	r3, [sp, #0]
   2ecd0:	2300      	movs	r3, #0
   2ecd2:	2204      	movs	r2, #4
   2ecd4:	4c45      	ldr	r4, [pc, #276]	; (2edec <cycle+0x1e4>)
   2ecd6:	47a0      	blx	r4
   2ecd8:	0003      	movs	r3, r0
   2ecda:	637b      	str	r3, [r7, #52]	; 0x34
   2ecdc:	e013      	b.n	2ed06 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2ecde:	2310      	movs	r3, #16
   2ece0:	18fb      	adds	r3, r7, r3
   2ece2:	781b      	ldrb	r3, [r3, #0]
   2ece4:	2b02      	cmp	r3, #2
   2ece6:	d10e      	bne.n	2ed06 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2ece8:	687b      	ldr	r3, [r7, #4]
   2ecea:	6918      	ldr	r0, [r3, #16]
   2ecec:	687b      	ldr	r3, [r7, #4]
   2ecee:	689b      	ldr	r3, [r3, #8]
   2ecf0:	0019      	movs	r1, r3
   2ecf2:	2310      	movs	r3, #16
   2ecf4:	18fb      	adds	r3, r7, r3
   2ecf6:	889b      	ldrh	r3, [r3, #4]
   2ecf8:	9300      	str	r3, [sp, #0]
   2ecfa:	2300      	movs	r3, #0
   2ecfc:	2205      	movs	r2, #5
   2ecfe:	4c3b      	ldr	r4, [pc, #236]	; (2edec <cycle+0x1e4>)
   2ed00:	47a0      	blx	r4
   2ed02:	0003      	movs	r3, r0
   2ed04:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2ed06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ed08:	2b00      	cmp	r3, #0
   2ed0a:	dc03      	bgt.n	2ed14 <cycle+0x10c>
                    rc = FAILURE;
   2ed0c:	2301      	movs	r3, #1
   2ed0e:	425b      	negs	r3, r3
   2ed10:	633b      	str	r3, [r7, #48]	; 0x30
   2ed12:	e007      	b.n	2ed24 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2ed14:	683a      	ldr	r2, [r7, #0]
   2ed16:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2ed18:	687b      	ldr	r3, [r7, #4]
   2ed1a:	0018      	movs	r0, r3
   2ed1c:	4b34      	ldr	r3, [pc, #208]	; (2edf0 <cycle+0x1e8>)
   2ed1e:	4798      	blx	r3
   2ed20:	0003      	movs	r3, r0
   2ed22:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2ed24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ed26:	3301      	adds	r3, #1
   2ed28:	d142      	bne.n	2edb0 <cycle+0x1a8>
                    goto exit; // there was a problem
   2ed2a:	46c0      	nop			; (mov r8, r8)
   2ed2c:	e049      	b.n	2edc2 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2ed2e:	687b      	ldr	r3, [r7, #4]
   2ed30:	695c      	ldr	r4, [r3, #20]
   2ed32:	687b      	ldr	r3, [r7, #4]
   2ed34:	68db      	ldr	r3, [r3, #12]
   2ed36:	220a      	movs	r2, #10
   2ed38:	18ba      	adds	r2, r7, r2
   2ed3a:	2109      	movs	r1, #9
   2ed3c:	1879      	adds	r1, r7, r1
   2ed3e:	2008      	movs	r0, #8
   2ed40:	1838      	adds	r0, r7, r0
   2ed42:	9300      	str	r3, [sp, #0]
   2ed44:	0023      	movs	r3, r4
   2ed46:	4c2b      	ldr	r4, [pc, #172]	; (2edf4 <cycle+0x1ec>)
   2ed48:	47a0      	blx	r4
   2ed4a:	0003      	movs	r3, r0
   2ed4c:	2b01      	cmp	r3, #1
   2ed4e:	d003      	beq.n	2ed58 <cycle+0x150>
                rc = FAILURE;
   2ed50:	2301      	movs	r3, #1
   2ed52:	425b      	negs	r3, r3
   2ed54:	633b      	str	r3, [r7, #48]	; 0x30
   2ed56:	e023      	b.n	2eda0 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2ed58:	687b      	ldr	r3, [r7, #4]
   2ed5a:	6918      	ldr	r0, [r3, #16]
   2ed5c:	687b      	ldr	r3, [r7, #4]
   2ed5e:	689b      	ldr	r3, [r3, #8]
   2ed60:	0019      	movs	r1, r3
   2ed62:	230a      	movs	r3, #10
   2ed64:	18fb      	adds	r3, r7, r3
   2ed66:	881b      	ldrh	r3, [r3, #0]
   2ed68:	9300      	str	r3, [sp, #0]
   2ed6a:	2300      	movs	r3, #0
   2ed6c:	2206      	movs	r2, #6
   2ed6e:	4c1f      	ldr	r4, [pc, #124]	; (2edec <cycle+0x1e4>)
   2ed70:	47a0      	blx	r4
   2ed72:	0003      	movs	r3, r0
   2ed74:	637b      	str	r3, [r7, #52]	; 0x34
   2ed76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2ed78:	2b00      	cmp	r3, #0
   2ed7a:	dc03      	bgt.n	2ed84 <cycle+0x17c>
                rc = FAILURE;
   2ed7c:	2301      	movs	r3, #1
   2ed7e:	425b      	negs	r3, r3
   2ed80:	633b      	str	r3, [r7, #48]	; 0x30
   2ed82:	e00d      	b.n	2eda0 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2ed84:	683a      	ldr	r2, [r7, #0]
   2ed86:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2ed88:	687b      	ldr	r3, [r7, #4]
   2ed8a:	0018      	movs	r0, r3
   2ed8c:	4b18      	ldr	r3, [pc, #96]	; (2edf0 <cycle+0x1e8>)
   2ed8e:	4798      	blx	r3
   2ed90:	0003      	movs	r3, r0
   2ed92:	633b      	str	r3, [r7, #48]	; 0x30
   2ed94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2ed96:	2b00      	cmp	r3, #0
   2ed98:	d002      	beq.n	2eda0 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2ed9a:	2301      	movs	r3, #1
   2ed9c:	425b      	negs	r3, r3
   2ed9e:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2eda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2eda2:	3301      	adds	r3, #1
   2eda4:	d106      	bne.n	2edb4 <cycle+0x1ac>
                goto exit; // there was a problem
   2eda6:	e00c      	b.n	2edc2 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2eda8:	687b      	ldr	r3, [r7, #4]
   2edaa:	2200      	movs	r2, #0
   2edac:	771a      	strb	r2, [r3, #28]
            break;
   2edae:	e002      	b.n	2edb6 <cycle+0x1ae>
            break;
   2edb0:	46c0      	nop			; (mov r8, r8)
   2edb2:	e000      	b.n	2edb6 <cycle+0x1ae>
            break;
   2edb4:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2edb6:	687b      	ldr	r3, [r7, #4]
   2edb8:	0018      	movs	r0, r3
   2edba:	4b0f      	ldr	r3, [pc, #60]	; (2edf8 <cycle+0x1f0>)
   2edbc:	4798      	blx	r3
   2edbe:	e000      	b.n	2edc2 <cycle+0x1ba>
                goto exit;
   2edc0:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2edc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2edc4:	2b00      	cmp	r3, #0
   2edc6:	d103      	bne.n	2edd0 <cycle+0x1c8>
        rc = packet_type;
   2edc8:	232e      	movs	r3, #46	; 0x2e
   2edca:	18fb      	adds	r3, r7, r3
   2edcc:	881b      	ldrh	r3, [r3, #0]
   2edce:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2edd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2edd2:	0018      	movs	r0, r3
   2edd4:	46bd      	mov	sp, r7
   2edd6:	b00f      	add	sp, #60	; 0x3c
   2edd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2edda:	46c0      	nop			; (mov r8, r8)
   2eddc:	0002e8bd 	.word	0x0002e8bd
   2ede0:	00039c94 	.word	0x00039c94
   2ede4:	00030181 	.word	0x00030181
   2ede8:	0002ea79 	.word	0x0002ea79
   2edec:	00030979 	.word	0x00030979
   2edf0:	0002e701 	.word	0x0002e701
   2edf4:	00030285 	.word	0x00030285
   2edf8:	0002eb65 	.word	0x0002eb65

0002edfc <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2edfc:	b580      	push	{r7, lr}
   2edfe:	b086      	sub	sp, #24
   2ee00:	af00      	add	r7, sp, #0
   2ee02:	6078      	str	r0, [r7, #4]
   2ee04:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2ee06:	2300      	movs	r3, #0
   2ee08:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2ee0a:	2308      	movs	r3, #8
   2ee0c:	18fb      	adds	r3, r7, r3
   2ee0e:	0018      	movs	r0, r3
   2ee10:	4b11      	ldr	r3, [pc, #68]	; (2ee58 <MQTTYield+0x5c>)
   2ee12:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2ee14:	683a      	ldr	r2, [r7, #0]
   2ee16:	2308      	movs	r3, #8
   2ee18:	18fb      	adds	r3, r7, r3
   2ee1a:	0011      	movs	r1, r2
   2ee1c:	0018      	movs	r0, r3
   2ee1e:	4b0f      	ldr	r3, [pc, #60]	; (2ee5c <MQTTYield+0x60>)
   2ee20:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2ee22:	2308      	movs	r3, #8
   2ee24:	18fa      	adds	r2, r7, r3
   2ee26:	687b      	ldr	r3, [r7, #4]
   2ee28:	0011      	movs	r1, r2
   2ee2a:	0018      	movs	r0, r3
   2ee2c:	4b0c      	ldr	r3, [pc, #48]	; (2ee60 <MQTTYield+0x64>)
   2ee2e:	4798      	blx	r3
   2ee30:	0003      	movs	r3, r0
   2ee32:	3301      	adds	r3, #1
   2ee34:	d103      	bne.n	2ee3e <MQTTYield+0x42>
        {
            rc = FAILURE;
   2ee36:	2301      	movs	r3, #1
   2ee38:	425b      	negs	r3, r3
   2ee3a:	617b      	str	r3, [r7, #20]
            break;
   2ee3c:	e006      	b.n	2ee4c <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2ee3e:	2308      	movs	r3, #8
   2ee40:	18fb      	adds	r3, r7, r3
   2ee42:	0018      	movs	r0, r3
   2ee44:	4b07      	ldr	r3, [pc, #28]	; (2ee64 <MQTTYield+0x68>)
   2ee46:	4798      	blx	r3
   2ee48:	1e03      	subs	r3, r0, #0
   2ee4a:	d0ea      	beq.n	2ee22 <MQTTYield+0x26>
        
    return rc;
   2ee4c:	697b      	ldr	r3, [r7, #20]
}
   2ee4e:	0018      	movs	r0, r3
   2ee50:	46bd      	mov	sp, r7
   2ee52:	b006      	add	sp, #24
   2ee54:	bd80      	pop	{r7, pc}
   2ee56:	46c0      	nop			; (mov r8, r8)
   2ee58:	0002f589 	.word	0x0002f589
   2ee5c:	0002f511 	.word	0x0002f511
   2ee60:	0002ec09 	.word	0x0002ec09
   2ee64:	0002f4e5 	.word	0x0002f4e5

0002ee68 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2ee68:	b580      	push	{r7, lr}
   2ee6a:	b086      	sub	sp, #24
   2ee6c:	af00      	add	r7, sp, #0
   2ee6e:	60f8      	str	r0, [r7, #12]
   2ee70:	60b9      	str	r1, [r7, #8]
   2ee72:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2ee74:	2301      	movs	r3, #1
   2ee76:	425b      	negs	r3, r3
   2ee78:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2ee7a:	687b      	ldr	r3, [r7, #4]
   2ee7c:	0018      	movs	r0, r3
   2ee7e:	4b0b      	ldr	r3, [pc, #44]	; (2eeac <waitfor+0x44>)
   2ee80:	4798      	blx	r3
   2ee82:	1e03      	subs	r3, r0, #0
   2ee84:	d10c      	bne.n	2eea0 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2ee86:	687a      	ldr	r2, [r7, #4]
   2ee88:	68fb      	ldr	r3, [r7, #12]
   2ee8a:	0011      	movs	r1, r2
   2ee8c:	0018      	movs	r0, r3
   2ee8e:	4b08      	ldr	r3, [pc, #32]	; (2eeb0 <waitfor+0x48>)
   2ee90:	4798      	blx	r3
   2ee92:	0003      	movs	r3, r0
   2ee94:	617b      	str	r3, [r7, #20]
   2ee96:	697a      	ldr	r2, [r7, #20]
   2ee98:	68bb      	ldr	r3, [r7, #8]
   2ee9a:	429a      	cmp	r2, r3
   2ee9c:	d1ed      	bne.n	2ee7a <waitfor+0x12>
   2ee9e:	e000      	b.n	2eea2 <waitfor+0x3a>
            break; // we timed out
   2eea0:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2eea2:	697b      	ldr	r3, [r7, #20]
}
   2eea4:	0018      	movs	r0, r3
   2eea6:	46bd      	mov	sp, r7
   2eea8:	b006      	add	sp, #24
   2eeaa:	bd80      	pop	{r7, pc}
   2eeac:	0002f4e5 	.word	0x0002f4e5
   2eeb0:	0002ec09 	.word	0x0002ec09

0002eeb4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2eeb4:	b590      	push	{r4, r7, lr}
   2eeb6:	b09f      	sub	sp, #124	; 0x7c
   2eeb8:	af00      	add	r7, sp, #0
   2eeba:	6078      	str	r0, [r7, #4]
   2eebc:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2eebe:	2301      	movs	r3, #1
   2eec0:	425b      	negs	r3, r3
   2eec2:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2eec4:	230c      	movs	r3, #12
   2eec6:	18fa      	adds	r2, r7, r3
   2eec8:	4b41      	ldr	r3, [pc, #260]	; (2efd0 <MQTTConnect+0x11c>)
   2eeca:	0010      	movs	r0, r2
   2eecc:	0019      	movs	r1, r3
   2eece:	2358      	movs	r3, #88	; 0x58
   2eed0:	001a      	movs	r2, r3
   2eed2:	4b40      	ldr	r3, [pc, #256]	; (2efd4 <MQTTConnect+0x120>)
   2eed4:	4798      	blx	r3
    int len = 0;
   2eed6:	2300      	movs	r3, #0
   2eed8:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2eeda:	687b      	ldr	r3, [r7, #4]
   2eedc:	6a1b      	ldr	r3, [r3, #32]
   2eede:	2b00      	cmp	r3, #0
   2eee0:	d166      	bne.n	2efb0 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2eee2:	2364      	movs	r3, #100	; 0x64
   2eee4:	18fb      	adds	r3, r7, r3
   2eee6:	0018      	movs	r0, r3
   2eee8:	4b3b      	ldr	r3, [pc, #236]	; (2efd8 <MQTTConnect+0x124>)
   2eeea:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2eeec:	687b      	ldr	r3, [r7, #4]
   2eeee:	685a      	ldr	r2, [r3, #4]
   2eef0:	2364      	movs	r3, #100	; 0x64
   2eef2:	18fb      	adds	r3, r7, r3
   2eef4:	0011      	movs	r1, r2
   2eef6:	0018      	movs	r0, r3
   2eef8:	4b38      	ldr	r3, [pc, #224]	; (2efdc <MQTTConnect+0x128>)
   2eefa:	4798      	blx	r3

    if (options == 0)
   2eefc:	683b      	ldr	r3, [r7, #0]
   2eefe:	2b00      	cmp	r3, #0
   2ef00:	d102      	bne.n	2ef08 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2ef02:	230c      	movs	r3, #12
   2ef04:	18fb      	adds	r3, r7, r3
   2ef06:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2ef08:	683b      	ldr	r3, [r7, #0]
   2ef0a:	8b1b      	ldrh	r3, [r3, #24]
   2ef0c:	001a      	movs	r2, r3
   2ef0e:	687b      	ldr	r3, [r7, #4]
   2ef10:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2ef12:	687b      	ldr	r3, [r7, #4]
   2ef14:	3354      	adds	r3, #84	; 0x54
   2ef16:	001a      	movs	r2, r3
   2ef18:	687b      	ldr	r3, [r7, #4]
   2ef1a:	699b      	ldr	r3, [r3, #24]
   2ef1c:	0019      	movs	r1, r3
   2ef1e:	0010      	movs	r0, r2
   2ef20:	4b2f      	ldr	r3, [pc, #188]	; (2efe0 <MQTTConnect+0x12c>)
   2ef22:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2ef24:	687b      	ldr	r3, [r7, #4]
   2ef26:	6918      	ldr	r0, [r3, #16]
   2ef28:	687b      	ldr	r3, [r7, #4]
   2ef2a:	689b      	ldr	r3, [r3, #8]
   2ef2c:	0019      	movs	r1, r3
   2ef2e:	683b      	ldr	r3, [r7, #0]
   2ef30:	001a      	movs	r2, r3
   2ef32:	4b2c      	ldr	r3, [pc, #176]	; (2efe4 <MQTTConnect+0x130>)
   2ef34:	4798      	blx	r3
   2ef36:	0003      	movs	r3, r0
   2ef38:	673b      	str	r3, [r7, #112]	; 0x70
   2ef3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2ef3c:	2b00      	cmp	r3, #0
   2ef3e:	dd39      	ble.n	2efb4 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2ef40:	2364      	movs	r3, #100	; 0x64
   2ef42:	18fa      	adds	r2, r7, r3
   2ef44:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2ef46:	687b      	ldr	r3, [r7, #4]
   2ef48:	0018      	movs	r0, r3
   2ef4a:	4b27      	ldr	r3, [pc, #156]	; (2efe8 <MQTTConnect+0x134>)
   2ef4c:	4798      	blx	r3
   2ef4e:	0003      	movs	r3, r0
   2ef50:	677b      	str	r3, [r7, #116]	; 0x74
   2ef52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2ef54:	2b00      	cmp	r3, #0
   2ef56:	d12f      	bne.n	2efb8 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2ef58:	2364      	movs	r3, #100	; 0x64
   2ef5a:	18fa      	adds	r2, r7, r3
   2ef5c:	687b      	ldr	r3, [r7, #4]
   2ef5e:	2102      	movs	r1, #2
   2ef60:	0018      	movs	r0, r3
   2ef62:	4b22      	ldr	r3, [pc, #136]	; (2efec <MQTTConnect+0x138>)
   2ef64:	4798      	blx	r3
   2ef66:	0003      	movs	r3, r0
   2ef68:	2b02      	cmp	r3, #2
   2ef6a:	d11d      	bne.n	2efa8 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2ef6c:	230b      	movs	r3, #11
   2ef6e:	18fb      	adds	r3, r7, r3
   2ef70:	22ff      	movs	r2, #255	; 0xff
   2ef72:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2ef74:	230a      	movs	r3, #10
   2ef76:	18fb      	adds	r3, r7, r3
   2ef78:	2200      	movs	r2, #0
   2ef7a:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2ef7c:	687b      	ldr	r3, [r7, #4]
   2ef7e:	695a      	ldr	r2, [r3, #20]
   2ef80:	687b      	ldr	r3, [r7, #4]
   2ef82:	68db      	ldr	r3, [r3, #12]
   2ef84:	210b      	movs	r1, #11
   2ef86:	1879      	adds	r1, r7, r1
   2ef88:	200a      	movs	r0, #10
   2ef8a:	1838      	adds	r0, r7, r0
   2ef8c:	4c18      	ldr	r4, [pc, #96]	; (2eff0 <MQTTConnect+0x13c>)
   2ef8e:	47a0      	blx	r4
   2ef90:	0003      	movs	r3, r0
   2ef92:	2b01      	cmp	r3, #1
   2ef94:	d104      	bne.n	2efa0 <MQTTConnect+0xec>
            rc = connack_rc;
   2ef96:	230b      	movs	r3, #11
   2ef98:	18fb      	adds	r3, r7, r3
   2ef9a:	781b      	ldrb	r3, [r3, #0]
   2ef9c:	677b      	str	r3, [r7, #116]	; 0x74
   2ef9e:	e00c      	b.n	2efba <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2efa0:	2301      	movs	r3, #1
   2efa2:	425b      	negs	r3, r3
   2efa4:	677b      	str	r3, [r7, #116]	; 0x74
   2efa6:	e008      	b.n	2efba <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2efa8:	2301      	movs	r3, #1
   2efaa:	425b      	negs	r3, r3
   2efac:	677b      	str	r3, [r7, #116]	; 0x74
   2efae:	e004      	b.n	2efba <MQTTConnect+0x106>
		goto exit;
   2efb0:	46c0      	nop			; (mov r8, r8)
   2efb2:	e002      	b.n	2efba <MQTTConnect+0x106>
        goto exit;
   2efb4:	46c0      	nop			; (mov r8, r8)
   2efb6:	e000      	b.n	2efba <MQTTConnect+0x106>
        goto exit; // there was a problem
   2efb8:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2efba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2efbc:	2b00      	cmp	r3, #0
   2efbe:	d102      	bne.n	2efc6 <MQTTConnect+0x112>
        c->isconnected = 1;
   2efc0:	687b      	ldr	r3, [r7, #4]
   2efc2:	2201      	movs	r2, #1
   2efc4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2efc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2efc8:	0018      	movs	r0, r3
   2efca:	46bd      	mov	sp, r7
   2efcc:	b01f      	add	sp, #124	; 0x7c
   2efce:	bd90      	pop	{r4, r7, pc}
   2efd0:	00039ccc 	.word	0x00039ccc
   2efd4:	00034c09 	.word	0x00034c09
   2efd8:	0002f589 	.word	0x0002f589
   2efdc:	0002f511 	.word	0x0002f511
   2efe0:	0002f539 	.word	0x0002f539
   2efe4:	0002fd65 	.word	0x0002fd65
   2efe8:	0002e701 	.word	0x0002e701
   2efec:	0002ee69 	.word	0x0002ee69
   2eff0:	0002ffe1 	.word	0x0002ffe1

0002eff4 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2eff4:	b5b0      	push	{r4, r5, r7, lr}
   2eff6:	b096      	sub	sp, #88	; 0x58
   2eff8:	af04      	add	r7, sp, #16
   2effa:	60f8      	str	r0, [r7, #12]
   2effc:	60b9      	str	r1, [r7, #8]
   2effe:	603b      	str	r3, [r7, #0]
   2f000:	1dfb      	adds	r3, r7, #7
   2f002:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2f004:	2301      	movs	r3, #1
   2f006:	425b      	negs	r3, r3
   2f008:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2f00a:	2300      	movs	r3, #0
   2f00c:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2f00e:	2324      	movs	r3, #36	; 0x24
   2f010:	18fb      	adds	r3, r7, r3
   2f012:	2200      	movs	r2, #0
   2f014:	601a      	str	r2, [r3, #0]
   2f016:	2324      	movs	r3, #36	; 0x24
   2f018:	18fb      	adds	r3, r7, r3
   2f01a:	2200      	movs	r2, #0
   2f01c:	605a      	str	r2, [r3, #4]
   2f01e:	2324      	movs	r3, #36	; 0x24
   2f020:	18fb      	adds	r3, r7, r3
   2f022:	2200      	movs	r2, #0
   2f024:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2f026:	1dfb      	adds	r3, r7, #7
   2f028:	781b      	ldrb	r3, [r3, #0]
   2f02a:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2f02c:	2324      	movs	r3, #36	; 0x24
   2f02e:	18fb      	adds	r3, r7, r3
   2f030:	68ba      	ldr	r2, [r7, #8]
   2f032:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2f034:	68fb      	ldr	r3, [r7, #12]
   2f036:	6a1b      	ldr	r3, [r3, #32]
   2f038:	2b00      	cmp	r3, #0
   2f03a:	d100      	bne.n	2f03e <MQTTSubscribe+0x4a>
   2f03c:	e088      	b.n	2f150 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2f03e:	2330      	movs	r3, #48	; 0x30
   2f040:	18fb      	adds	r3, r7, r3
   2f042:	0018      	movs	r0, r3
   2f044:	4b47      	ldr	r3, [pc, #284]	; (2f164 <MQTTSubscribe+0x170>)
   2f046:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f048:	68fb      	ldr	r3, [r7, #12]
   2f04a:	685a      	ldr	r2, [r3, #4]
   2f04c:	2330      	movs	r3, #48	; 0x30
   2f04e:	18fb      	adds	r3, r7, r3
   2f050:	0011      	movs	r1, r2
   2f052:	0018      	movs	r0, r3
   2f054:	4b44      	ldr	r3, [pc, #272]	; (2f168 <MQTTSubscribe+0x174>)
   2f056:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2f058:	68fb      	ldr	r3, [r7, #12]
   2f05a:	691c      	ldr	r4, [r3, #16]
   2f05c:	68fb      	ldr	r3, [r7, #12]
   2f05e:	689b      	ldr	r3, [r3, #8]
   2f060:	001d      	movs	r5, r3
   2f062:	68fb      	ldr	r3, [r7, #12]
   2f064:	0018      	movs	r0, r3
   2f066:	4b41      	ldr	r3, [pc, #260]	; (2f16c <MQTTSubscribe+0x178>)
   2f068:	4798      	blx	r3
   2f06a:	0003      	movs	r3, r0
   2f06c:	b29a      	uxth	r2, r3
   2f06e:	2320      	movs	r3, #32
   2f070:	18fb      	adds	r3, r7, r3
   2f072:	9302      	str	r3, [sp, #8]
   2f074:	2324      	movs	r3, #36	; 0x24
   2f076:	18fb      	adds	r3, r7, r3
   2f078:	9301      	str	r3, [sp, #4]
   2f07a:	2301      	movs	r3, #1
   2f07c:	9300      	str	r3, [sp, #0]
   2f07e:	0013      	movs	r3, r2
   2f080:	2200      	movs	r2, #0
   2f082:	0029      	movs	r1, r5
   2f084:	0020      	movs	r0, r4
   2f086:	4c3a      	ldr	r4, [pc, #232]	; (2f170 <MQTTSubscribe+0x17c>)
   2f088:	47a0      	blx	r4
   2f08a:	0003      	movs	r3, r0
   2f08c:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2f08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f090:	2b00      	cmp	r3, #0
   2f092:	dd5f      	ble.n	2f154 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2f094:	2330      	movs	r3, #48	; 0x30
   2f096:	18fa      	adds	r2, r7, r3
   2f098:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2f09a:	68fb      	ldr	r3, [r7, #12]
   2f09c:	0018      	movs	r0, r3
   2f09e:	4b35      	ldr	r3, [pc, #212]	; (2f174 <MQTTSubscribe+0x180>)
   2f0a0:	4798      	blx	r3
   2f0a2:	0003      	movs	r3, r0
   2f0a4:	647b      	str	r3, [r7, #68]	; 0x44
   2f0a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2f0a8:	2b00      	cmp	r3, #0
   2f0aa:	d155      	bne.n	2f158 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2f0ac:	2330      	movs	r3, #48	; 0x30
   2f0ae:	18fa      	adds	r2, r7, r3
   2f0b0:	68fb      	ldr	r3, [r7, #12]
   2f0b2:	2109      	movs	r1, #9
   2f0b4:	0018      	movs	r0, r3
   2f0b6:	4b30      	ldr	r3, [pc, #192]	; (2f178 <MQTTSubscribe+0x184>)
   2f0b8:	4798      	blx	r3
   2f0ba:	0003      	movs	r3, r0
   2f0bc:	2b09      	cmp	r3, #9
   2f0be:	d143      	bne.n	2f148 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2f0c0:	2300      	movs	r3, #0
   2f0c2:	61fb      	str	r3, [r7, #28]
   2f0c4:	2301      	movs	r3, #1
   2f0c6:	425b      	negs	r3, r3
   2f0c8:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2f0ca:	68fb      	ldr	r3, [r7, #12]
   2f0cc:	695a      	ldr	r2, [r3, #20]
   2f0ce:	68fb      	ldr	r3, [r7, #12]
   2f0d0:	68db      	ldr	r3, [r3, #12]
   2f0d2:	001c      	movs	r4, r3
   2f0d4:	2318      	movs	r3, #24
   2f0d6:	18fb      	adds	r3, r7, r3
   2f0d8:	211c      	movs	r1, #28
   2f0da:	1879      	adds	r1, r7, r1
   2f0dc:	2016      	movs	r0, #22
   2f0de:	1838      	adds	r0, r7, r0
   2f0e0:	9401      	str	r4, [sp, #4]
   2f0e2:	9200      	str	r2, [sp, #0]
   2f0e4:	000a      	movs	r2, r1
   2f0e6:	2101      	movs	r1, #1
   2f0e8:	4c24      	ldr	r4, [pc, #144]	; (2f17c <MQTTSubscribe+0x188>)
   2f0ea:	47a0      	blx	r4
   2f0ec:	0003      	movs	r3, r0
   2f0ee:	2b01      	cmp	r3, #1
   2f0f0:	d101      	bne.n	2f0f6 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2f0f2:	69bb      	ldr	r3, [r7, #24]
   2f0f4:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2f0f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2f0f8:	2b80      	cmp	r3, #128	; 0x80
   2f0fa:	d02e      	beq.n	2f15a <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f0fc:	2300      	movs	r3, #0
   2f0fe:	643b      	str	r3, [r7, #64]	; 0x40
   2f100:	e01e      	b.n	2f140 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2f102:	68fa      	ldr	r2, [r7, #12]
   2f104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f106:	3304      	adds	r3, #4
   2f108:	00db      	lsls	r3, r3, #3
   2f10a:	18d3      	adds	r3, r2, r3
   2f10c:	3304      	adds	r3, #4
   2f10e:	681b      	ldr	r3, [r3, #0]
   2f110:	2b00      	cmp	r3, #0
   2f112:	d112      	bne.n	2f13a <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2f114:	68fa      	ldr	r2, [r7, #12]
   2f116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f118:	3304      	adds	r3, #4
   2f11a:	00db      	lsls	r3, r3, #3
   2f11c:	18d3      	adds	r3, r2, r3
   2f11e:	3304      	adds	r3, #4
   2f120:	68ba      	ldr	r2, [r7, #8]
   2f122:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2f124:	68fa      	ldr	r2, [r7, #12]
   2f126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f128:	3304      	adds	r3, #4
   2f12a:	00db      	lsls	r3, r3, #3
   2f12c:	18d3      	adds	r3, r2, r3
   2f12e:	3308      	adds	r3, #8
   2f130:	683a      	ldr	r2, [r7, #0]
   2f132:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2f134:	2300      	movs	r3, #0
   2f136:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2f138:	e00f      	b.n	2f15a <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f13a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f13c:	3301      	adds	r3, #1
   2f13e:	643b      	str	r3, [r7, #64]	; 0x40
   2f140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2f142:	2b04      	cmp	r3, #4
   2f144:	dddd      	ble.n	2f102 <MQTTSubscribe+0x10e>
   2f146:	e008      	b.n	2f15a <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2f148:	2301      	movs	r3, #1
   2f14a:	425b      	negs	r3, r3
   2f14c:	647b      	str	r3, [r7, #68]	; 0x44
   2f14e:	e004      	b.n	2f15a <MQTTSubscribe+0x166>
		goto exit;
   2f150:	46c0      	nop			; (mov r8, r8)
   2f152:	e002      	b.n	2f15a <MQTTSubscribe+0x166>
        goto exit;
   2f154:	46c0      	nop			; (mov r8, r8)
   2f156:	e000      	b.n	2f15a <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2f158:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2f15c:	0018      	movs	r0, r3
   2f15e:	46bd      	mov	sp, r7
   2f160:	b012      	add	sp, #72	; 0x48
   2f162:	bdb0      	pop	{r4, r5, r7, pc}
   2f164:	0002f589 	.word	0x0002f589
   2f168:	0002f511 	.word	0x0002f511
   2f16c:	0002e6d1 	.word	0x0002e6d1
   2f170:	00030ac1 	.word	0x00030ac1
   2f174:	0002e701 	.word	0x0002e701
   2f178:	0002ee69 	.word	0x0002ee69
   2f17c:	00030c11 	.word	0x00030c11

0002f180 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2f180:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f182:	46ce      	mov	lr, r9
   2f184:	4647      	mov	r7, r8
   2f186:	b580      	push	{r7, lr}
   2f188:	b097      	sub	sp, #92	; 0x5c
   2f18a:	af08      	add	r7, sp, #32
   2f18c:	60f8      	str	r0, [r7, #12]
   2f18e:	60b9      	str	r1, [r7, #8]
   2f190:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f192:	2301      	movs	r3, #1
   2f194:	425b      	negs	r3, r3
   2f196:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2f198:	2318      	movs	r3, #24
   2f19a:	18fb      	adds	r3, r7, r3
   2f19c:	2200      	movs	r2, #0
   2f19e:	601a      	str	r2, [r3, #0]
   2f1a0:	2318      	movs	r3, #24
   2f1a2:	18fb      	adds	r3, r7, r3
   2f1a4:	2200      	movs	r2, #0
   2f1a6:	605a      	str	r2, [r3, #4]
   2f1a8:	2318      	movs	r3, #24
   2f1aa:	18fb      	adds	r3, r7, r3
   2f1ac:	2200      	movs	r2, #0
   2f1ae:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2f1b0:	2318      	movs	r3, #24
   2f1b2:	18fb      	adds	r3, r7, r3
   2f1b4:	68ba      	ldr	r2, [r7, #8]
   2f1b6:	601a      	str	r2, [r3, #0]
    int len = 0;
   2f1b8:	2300      	movs	r3, #0
   2f1ba:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2f1bc:	68fb      	ldr	r3, [r7, #12]
   2f1be:	6a1b      	ldr	r3, [r3, #32]
   2f1c0:	2b00      	cmp	r3, #0
   2f1c2:	d100      	bne.n	2f1c6 <MQTTPublish+0x46>
   2f1c4:	e0a0      	b.n	2f308 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2f1c6:	2324      	movs	r3, #36	; 0x24
   2f1c8:	18fb      	adds	r3, r7, r3
   2f1ca:	0018      	movs	r0, r3
   2f1cc:	4b55      	ldr	r3, [pc, #340]	; (2f324 <MQTTPublish+0x1a4>)
   2f1ce:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f1d0:	68fb      	ldr	r3, [r7, #12]
   2f1d2:	685a      	ldr	r2, [r3, #4]
   2f1d4:	2324      	movs	r3, #36	; 0x24
   2f1d6:	18fb      	adds	r3, r7, r3
   2f1d8:	0011      	movs	r1, r2
   2f1da:	0018      	movs	r0, r3
   2f1dc:	4b52      	ldr	r3, [pc, #328]	; (2f328 <MQTTPublish+0x1a8>)
   2f1de:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2f1e0:	687b      	ldr	r3, [r7, #4]
   2f1e2:	781b      	ldrb	r3, [r3, #0]
   2f1e4:	2b01      	cmp	r3, #1
   2f1e6:	d003      	beq.n	2f1f0 <MQTTPublish+0x70>
   2f1e8:	687b      	ldr	r3, [r7, #4]
   2f1ea:	781b      	ldrb	r3, [r3, #0]
   2f1ec:	2b02      	cmp	r3, #2
   2f1ee:	d107      	bne.n	2f200 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2f1f0:	68fb      	ldr	r3, [r7, #12]
   2f1f2:	0018      	movs	r0, r3
   2f1f4:	4b4d      	ldr	r3, [pc, #308]	; (2f32c <MQTTPublish+0x1ac>)
   2f1f6:	4798      	blx	r3
   2f1f8:	0003      	movs	r3, r0
   2f1fa:	b29a      	uxth	r2, r3
   2f1fc:	687b      	ldr	r3, [r7, #4]
   2f1fe:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2f200:	68fb      	ldr	r3, [r7, #12]
   2f202:	691b      	ldr	r3, [r3, #16]
   2f204:	469c      	mov	ip, r3
   2f206:	68fb      	ldr	r3, [r7, #12]
   2f208:	689b      	ldr	r3, [r3, #8]
   2f20a:	001d      	movs	r5, r3
   2f20c:	687b      	ldr	r3, [r7, #4]
   2f20e:	781b      	ldrb	r3, [r3, #0]
   2f210:	001e      	movs	r6, r3
   2f212:	687b      	ldr	r3, [r7, #4]
   2f214:	785b      	ldrb	r3, [r3, #1]
   2f216:	4698      	mov	r8, r3
   2f218:	687b      	ldr	r3, [r7, #4]
   2f21a:	889b      	ldrh	r3, [r3, #4]
   2f21c:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2f21e:	687b      	ldr	r3, [r7, #4]
   2f220:	689a      	ldr	r2, [r3, #8]
   2f222:	687b      	ldr	r3, [r7, #4]
   2f224:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2f226:	9306      	str	r3, [sp, #24]
   2f228:	9205      	str	r2, [sp, #20]
   2f22a:	2318      	movs	r3, #24
   2f22c:	18fa      	adds	r2, r7, r3
   2f22e:	2308      	movs	r3, #8
   2f230:	446b      	add	r3, sp
   2f232:	ca13      	ldmia	r2!, {r0, r1, r4}
   2f234:	c313      	stmia	r3!, {r0, r1, r4}
   2f236:	464b      	mov	r3, r9
   2f238:	9301      	str	r3, [sp, #4]
   2f23a:	4643      	mov	r3, r8
   2f23c:	9300      	str	r3, [sp, #0]
   2f23e:	0033      	movs	r3, r6
   2f240:	2200      	movs	r2, #0
   2f242:	0029      	movs	r1, r5
   2f244:	4660      	mov	r0, ip
   2f246:	4c3a      	ldr	r4, [pc, #232]	; (2f330 <MQTTPublish+0x1b0>)
   2f248:	47a0      	blx	r4
   2f24a:	0003      	movs	r3, r0
   2f24c:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2f24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f250:	2b00      	cmp	r3, #0
   2f252:	dd5b      	ble.n	2f30c <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2f254:	2324      	movs	r3, #36	; 0x24
   2f256:	18fa      	adds	r2, r7, r3
   2f258:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2f25a:	68fb      	ldr	r3, [r7, #12]
   2f25c:	0018      	movs	r0, r3
   2f25e:	4b35      	ldr	r3, [pc, #212]	; (2f334 <MQTTPublish+0x1b4>)
   2f260:	4798      	blx	r3
   2f262:	0003      	movs	r3, r0
   2f264:	637b      	str	r3, [r7, #52]	; 0x34
   2f266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f268:	2b00      	cmp	r3, #0
   2f26a:	d151      	bne.n	2f310 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2f26c:	687b      	ldr	r3, [r7, #4]
   2f26e:	781b      	ldrb	r3, [r3, #0]
   2f270:	2b01      	cmp	r3, #1
   2f272:	d122      	bne.n	2f2ba <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2f274:	2324      	movs	r3, #36	; 0x24
   2f276:	18fa      	adds	r2, r7, r3
   2f278:	68fb      	ldr	r3, [r7, #12]
   2f27a:	2104      	movs	r1, #4
   2f27c:	0018      	movs	r0, r3
   2f27e:	4b2e      	ldr	r3, [pc, #184]	; (2f338 <MQTTPublish+0x1b8>)
   2f280:	4798      	blx	r3
   2f282:	0003      	movs	r3, r0
   2f284:	2b04      	cmp	r3, #4
   2f286:	d114      	bne.n	2f2b2 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f288:	68fb      	ldr	r3, [r7, #12]
   2f28a:	695c      	ldr	r4, [r3, #20]
   2f28c:	68fb      	ldr	r3, [r7, #12]
   2f28e:	68db      	ldr	r3, [r3, #12]
   2f290:	2216      	movs	r2, #22
   2f292:	18ba      	adds	r2, r7, r2
   2f294:	2115      	movs	r1, #21
   2f296:	1879      	adds	r1, r7, r1
   2f298:	2014      	movs	r0, #20
   2f29a:	1838      	adds	r0, r7, r0
   2f29c:	9300      	str	r3, [sp, #0]
   2f29e:	0023      	movs	r3, r4
   2f2a0:	4c26      	ldr	r4, [pc, #152]	; (2f33c <MQTTPublish+0x1bc>)
   2f2a2:	47a0      	blx	r4
   2f2a4:	0003      	movs	r3, r0
   2f2a6:	2b01      	cmp	r3, #1
   2f2a8:	d033      	beq.n	2f312 <MQTTPublish+0x192>
                rc = FAILURE;
   2f2aa:	2301      	movs	r3, #1
   2f2ac:	425b      	negs	r3, r3
   2f2ae:	637b      	str	r3, [r7, #52]	; 0x34
   2f2b0:	e02f      	b.n	2f312 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2f2b2:	2301      	movs	r3, #1
   2f2b4:	425b      	negs	r3, r3
   2f2b6:	637b      	str	r3, [r7, #52]	; 0x34
   2f2b8:	e02b      	b.n	2f312 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2f2ba:	687b      	ldr	r3, [r7, #4]
   2f2bc:	781b      	ldrb	r3, [r3, #0]
   2f2be:	2b02      	cmp	r3, #2
   2f2c0:	d127      	bne.n	2f312 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2f2c2:	2324      	movs	r3, #36	; 0x24
   2f2c4:	18fa      	adds	r2, r7, r3
   2f2c6:	68fb      	ldr	r3, [r7, #12]
   2f2c8:	2107      	movs	r1, #7
   2f2ca:	0018      	movs	r0, r3
   2f2cc:	4b1a      	ldr	r3, [pc, #104]	; (2f338 <MQTTPublish+0x1b8>)
   2f2ce:	4798      	blx	r3
   2f2d0:	0003      	movs	r3, r0
   2f2d2:	2b07      	cmp	r3, #7
   2f2d4:	d114      	bne.n	2f300 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f2d6:	68fb      	ldr	r3, [r7, #12]
   2f2d8:	695c      	ldr	r4, [r3, #20]
   2f2da:	68fb      	ldr	r3, [r7, #12]
   2f2dc:	68db      	ldr	r3, [r3, #12]
   2f2de:	2212      	movs	r2, #18
   2f2e0:	18ba      	adds	r2, r7, r2
   2f2e2:	2111      	movs	r1, #17
   2f2e4:	1879      	adds	r1, r7, r1
   2f2e6:	2010      	movs	r0, #16
   2f2e8:	1838      	adds	r0, r7, r0
   2f2ea:	9300      	str	r3, [sp, #0]
   2f2ec:	0023      	movs	r3, r4
   2f2ee:	4c13      	ldr	r4, [pc, #76]	; (2f33c <MQTTPublish+0x1bc>)
   2f2f0:	47a0      	blx	r4
   2f2f2:	0003      	movs	r3, r0
   2f2f4:	2b01      	cmp	r3, #1
   2f2f6:	d00c      	beq.n	2f312 <MQTTPublish+0x192>
                rc = FAILURE;
   2f2f8:	2301      	movs	r3, #1
   2f2fa:	425b      	negs	r3, r3
   2f2fc:	637b      	str	r3, [r7, #52]	; 0x34
   2f2fe:	e008      	b.n	2f312 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2f300:	2301      	movs	r3, #1
   2f302:	425b      	negs	r3, r3
   2f304:	637b      	str	r3, [r7, #52]	; 0x34
   2f306:	e004      	b.n	2f312 <MQTTPublish+0x192>
		goto exit;
   2f308:	46c0      	nop			; (mov r8, r8)
   2f30a:	e002      	b.n	2f312 <MQTTPublish+0x192>
        goto exit;
   2f30c:	46c0      	nop			; (mov r8, r8)
   2f30e:	e000      	b.n	2f312 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2f310:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2f314:	0018      	movs	r0, r3
   2f316:	46bd      	mov	sp, r7
   2f318:	b00f      	add	sp, #60	; 0x3c
   2f31a:	bc0c      	pop	{r2, r3}
   2f31c:	4690      	mov	r8, r2
   2f31e:	4699      	mov	r9, r3
   2f320:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f322:	46c0      	nop			; (mov r8, r8)
   2f324:	0002f589 	.word	0x0002f589
   2f328:	0002f511 	.word	0x0002f511
   2f32c:	0002e6d1 	.word	0x0002e6d1
   2f330:	0003080d 	.word	0x0003080d
   2f334:	0002e701 	.word	0x0002e701
   2f338:	0002ee69 	.word	0x0002ee69
   2f33c:	00030285 	.word	0x00030285

0002f340 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2f340:	b580      	push	{r7, lr}
   2f342:	b088      	sub	sp, #32
   2f344:	af00      	add	r7, sp, #0
   2f346:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f348:	2301      	movs	r3, #1
   2f34a:	425b      	negs	r3, r3
   2f34c:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2f34e:	2300      	movs	r3, #0
   2f350:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2f352:	230c      	movs	r3, #12
   2f354:	18fb      	adds	r3, r7, r3
   2f356:	0018      	movs	r0, r3
   2f358:	4b13      	ldr	r3, [pc, #76]	; (2f3a8 <MQTTDisconnect+0x68>)
   2f35a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2f35c:	687b      	ldr	r3, [r7, #4]
   2f35e:	685a      	ldr	r2, [r3, #4]
   2f360:	230c      	movs	r3, #12
   2f362:	18fb      	adds	r3, r7, r3
   2f364:	0011      	movs	r1, r2
   2f366:	0018      	movs	r0, r3
   2f368:	4b10      	ldr	r3, [pc, #64]	; (2f3ac <MQTTDisconnect+0x6c>)
   2f36a:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2f36c:	687b      	ldr	r3, [r7, #4]
   2f36e:	691a      	ldr	r2, [r3, #16]
   2f370:	687b      	ldr	r3, [r7, #4]
   2f372:	689b      	ldr	r3, [r3, #8]
   2f374:	0019      	movs	r1, r3
   2f376:	0010      	movs	r0, r2
   2f378:	4b0d      	ldr	r3, [pc, #52]	; (2f3b0 <MQTTDisconnect+0x70>)
   2f37a:	4798      	blx	r3
   2f37c:	0003      	movs	r3, r0
   2f37e:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2f380:	69bb      	ldr	r3, [r7, #24]
   2f382:	2b00      	cmp	r3, #0
   2f384:	dd08      	ble.n	2f398 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2f386:	230c      	movs	r3, #12
   2f388:	18fa      	adds	r2, r7, r3
   2f38a:	69b9      	ldr	r1, [r7, #24]
   2f38c:	687b      	ldr	r3, [r7, #4]
   2f38e:	0018      	movs	r0, r3
   2f390:	4b08      	ldr	r3, [pc, #32]	; (2f3b4 <MQTTDisconnect+0x74>)
   2f392:	4798      	blx	r3
   2f394:	0003      	movs	r3, r0
   2f396:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2f398:	687b      	ldr	r3, [r7, #4]
   2f39a:	2200      	movs	r2, #0
   2f39c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2f39e:	69fb      	ldr	r3, [r7, #28]
}
   2f3a0:	0018      	movs	r0, r3
   2f3a2:	46bd      	mov	sp, r7
   2f3a4:	b008      	add	sp, #32
   2f3a6:	bd80      	pop	{r7, pc}
   2f3a8:	0002f589 	.word	0x0002f589
   2f3ac:	0002f511 	.word	0x0002f511
   2f3b0:	00030139 	.word	0x00030139
   2f3b4:	0002e701 	.word	0x0002e701

0002f3b8 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2f3b8:	b580      	push	{r7, lr}
   2f3ba:	b084      	sub	sp, #16
   2f3bc:	af00      	add	r7, sp, #0
   2f3be:	0002      	movs	r2, r0
   2f3c0:	1dfb      	adds	r3, r7, #7
   2f3c2:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f3c4:	2300      	movs	r3, #0
   2f3c6:	60fb      	str	r3, [r7, #12]
   2f3c8:	e01c      	b.n	2f404 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2f3ca:	4a12      	ldr	r2, [pc, #72]	; (2f414 <isMQTTSocket+0x5c>)
   2f3cc:	68fb      	ldr	r3, [r7, #12]
   2f3ce:	2164      	movs	r1, #100	; 0x64
   2f3d0:	434b      	muls	r3, r1
   2f3d2:	18d3      	adds	r3, r2, r3
   2f3d4:	3360      	adds	r3, #96	; 0x60
   2f3d6:	681b      	ldr	r3, [r3, #0]
   2f3d8:	2b00      	cmp	r3, #0
   2f3da:	d010      	beq.n	2f3fe <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2f3dc:	4a0d      	ldr	r2, [pc, #52]	; (2f414 <isMQTTSocket+0x5c>)
   2f3de:	68fb      	ldr	r3, [r7, #12]
   2f3e0:	2164      	movs	r1, #100	; 0x64
   2f3e2:	434b      	muls	r3, r1
   2f3e4:	18d3      	adds	r3, r2, r3
   2f3e6:	3360      	adds	r3, #96	; 0x60
   2f3e8:	681b      	ldr	r3, [r3, #0]
   2f3ea:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2f3ec:	68bb      	ldr	r3, [r7, #8]
   2f3ee:	6a1a      	ldr	r2, [r3, #32]
   2f3f0:	1dfb      	adds	r3, r7, #7
   2f3f2:	781b      	ldrb	r3, [r3, #0]
   2f3f4:	b25b      	sxtb	r3, r3
   2f3f6:	429a      	cmp	r2, r3
   2f3f8:	d101      	bne.n	2f3fe <isMQTTSocket+0x46>
				return true;
   2f3fa:	2301      	movs	r3, #1
   2f3fc:	e006      	b.n	2f40c <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f3fe:	68fb      	ldr	r3, [r7, #12]
   2f400:	3301      	adds	r3, #1
   2f402:	60fb      	str	r3, [r7, #12]
   2f404:	68fb      	ldr	r3, [r7, #12]
   2f406:	2b06      	cmp	r3, #6
   2f408:	d9df      	bls.n	2f3ca <isMQTTSocket+0x12>
		}
	}
	return false;
   2f40a:	2300      	movs	r3, #0
}
   2f40c:	0018      	movs	r0, r3
   2f40e:	46bd      	mov	sp, r7
   2f410:	b004      	add	sp, #16
   2f412:	bd80      	pop	{r7, pc}
   2f414:	20004024 	.word	0x20004024

0002f418 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2f418:	b580      	push	{r7, lr}
   2f41a:	b082      	sub	sp, #8
   2f41c:	af00      	add	r7, sp, #0
   2f41e:	6078      	str	r0, [r7, #4]
   2f420:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2f422:	4b0d      	ldr	r3, [pc, #52]	; (2f458 <dnsResolveCallback+0x40>)
   2f424:	781b      	ldrb	r3, [r3, #0]
   2f426:	2201      	movs	r2, #1
   2f428:	4053      	eors	r3, r2
   2f42a:	b2db      	uxtb	r3, r3
   2f42c:	2b00      	cmp	r3, #0
   2f42e:	d00e      	beq.n	2f44e <dnsResolveCallback+0x36>
   2f430:	4b0a      	ldr	r3, [pc, #40]	; (2f45c <dnsResolveCallback+0x44>)
   2f432:	681b      	ldr	r3, [r3, #0]
   2f434:	687a      	ldr	r2, [r7, #4]
   2f436:	0011      	movs	r1, r2
   2f438:	0018      	movs	r0, r3
   2f43a:	4b09      	ldr	r3, [pc, #36]	; (2f460 <dnsResolveCallback+0x48>)
   2f43c:	4798      	blx	r3
   2f43e:	1e03      	subs	r3, r0, #0
   2f440:	d105      	bne.n	2f44e <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2f442:	683a      	ldr	r2, [r7, #0]
   2f444:	4b07      	ldr	r3, [pc, #28]	; (2f464 <dnsResolveCallback+0x4c>)
   2f446:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2f448:	4b03      	ldr	r3, [pc, #12]	; (2f458 <dnsResolveCallback+0x40>)
   2f44a:	2201      	movs	r2, #1
   2f44c:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2f44e:	46c0      	nop			; (mov r8, r8)
   2f450:	46bd      	mov	sp, r7
   2f452:	b002      	add	sp, #8
   2f454:	bd80      	pop	{r7, pc}
   2f456:	46c0      	nop			; (mov r8, r8)
   2f458:	20003f14 	.word	0x20003f14
   2f45c:	20004020 	.word	0x20004020
   2f460:	00034f97 	.word	0x00034f97
   2f464:	20003f0c 	.word	0x20003f0c

0002f468 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2f468:	b580      	push	{r7, lr}
   2f46a:	b084      	sub	sp, #16
   2f46c:	af00      	add	r7, sp, #0
   2f46e:	603a      	str	r2, [r7, #0]
   2f470:	1dfb      	adds	r3, r7, #7
   2f472:	1c02      	adds	r2, r0, #0
   2f474:	701a      	strb	r2, [r3, #0]
   2f476:	1dbb      	adds	r3, r7, #6
   2f478:	1c0a      	adds	r2, r1, #0
   2f47a:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2f47c:	1dfb      	adds	r3, r7, #7
   2f47e:	781b      	ldrb	r3, [r3, #0]
   2f480:	b25b      	sxtb	r3, r3
   2f482:	0018      	movs	r0, r3
   2f484:	4b12      	ldr	r3, [pc, #72]	; (2f4d0 <tcpClientSocketEventHandler+0x68>)
   2f486:	4798      	blx	r3
   2f488:	1e03      	subs	r3, r0, #0
   2f48a:	d01c      	beq.n	2f4c6 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2f48c:	1dbb      	adds	r3, r7, #6
   2f48e:	781b      	ldrb	r3, [r3, #0]
   2f490:	2b06      	cmp	r3, #6
   2f492:	d00c      	beq.n	2f4ae <tcpClientSocketEventHandler+0x46>
   2f494:	2b07      	cmp	r3, #7
   2f496:	d006      	beq.n	2f4a6 <tcpClientSocketEventHandler+0x3e>
   2f498:	2b05      	cmp	r3, #5
   2f49a:	d000      	beq.n	2f49e <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2f49c:	e013      	b.n	2f4c6 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2f49e:	4b0d      	ldr	r3, [pc, #52]	; (2f4d4 <tcpClientSocketEventHandler+0x6c>)
   2f4a0:	2201      	movs	r2, #1
   2f4a2:	701a      	strb	r2, [r3, #0]
			break;
   2f4a4:	e00f      	b.n	2f4c6 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2f4a6:	4b0c      	ldr	r3, [pc, #48]	; (2f4d8 <tcpClientSocketEventHandler+0x70>)
   2f4a8:	2201      	movs	r2, #1
   2f4aa:	701a      	strb	r2, [r3, #0]
			break;
   2f4ac:	e00b      	b.n	2f4c6 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2f4ae:	683b      	ldr	r3, [r7, #0]
   2f4b0:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2f4b2:	68fb      	ldr	r3, [r7, #12]
   2f4b4:	2204      	movs	r2, #4
   2f4b6:	5e9b      	ldrsh	r3, [r3, r2]
   2f4b8:	001a      	movs	r2, r3
   2f4ba:	4b08      	ldr	r3, [pc, #32]	; (2f4dc <tcpClientSocketEventHandler+0x74>)
   2f4bc:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2f4be:	4b08      	ldr	r3, [pc, #32]	; (2f4e0 <tcpClientSocketEventHandler+0x78>)
   2f4c0:	2201      	movs	r2, #1
   2f4c2:	701a      	strb	r2, [r3, #0]
			break;
   2f4c4:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2f4c6:	46c0      	nop			; (mov r8, r8)
   2f4c8:	46bd      	mov	sp, r7
   2f4ca:	b004      	add	sp, #16
   2f4cc:	bd80      	pop	{r7, pc}
   2f4ce:	46c0      	nop			; (mov r8, r8)
   2f4d0:	0002f3b9 	.word	0x0002f3b9
   2f4d4:	20003f15 	.word	0x20003f15
   2f4d8:	20003f16 	.word	0x20003f16
   2f4dc:	20003f10 	.word	0x20003f10
   2f4e0:	20003f17 	.word	0x20003f17

0002f4e4 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2f4e4:	b580      	push	{r7, lr}
   2f4e6:	b082      	sub	sp, #8
   2f4e8:	af00      	add	r7, sp, #0
   2f4ea:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2f4ec:	687b      	ldr	r3, [r7, #4]
   2f4ee:	3304      	adds	r3, #4
   2f4f0:	687a      	ldr	r2, [r7, #4]
   2f4f2:	0011      	movs	r1, r2
   2f4f4:	0018      	movs	r0, r3
   2f4f6:	4b05      	ldr	r3, [pc, #20]	; (2f50c <TimerIsExpired+0x28>)
   2f4f8:	4798      	blx	r3
   2f4fa:	0003      	movs	r3, r0
   2f4fc:	3b01      	subs	r3, #1
   2f4fe:	425a      	negs	r2, r3
   2f500:	4153      	adcs	r3, r2
   2f502:	b2db      	uxtb	r3, r3
}
   2f504:	0018      	movs	r0, r3
   2f506:	46bd      	mov	sp, r7
   2f508:	b002      	add	sp, #8
   2f50a:	bd80      	pop	{r7, pc}
   2f50c:	0001d191 	.word	0x0001d191

0002f510 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2f510:	b580      	push	{r7, lr}
   2f512:	b082      	sub	sp, #8
   2f514:	af00      	add	r7, sp, #0
   2f516:	6078      	str	r0, [r7, #4]
   2f518:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2f51a:	687b      	ldr	r3, [r7, #4]
   2f51c:	683a      	ldr	r2, [r7, #0]
   2f51e:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2f520:	687b      	ldr	r3, [r7, #4]
   2f522:	3304      	adds	r3, #4
   2f524:	0018      	movs	r0, r3
   2f526:	4b03      	ldr	r3, [pc, #12]	; (2f534 <TimerCountdownMS+0x24>)
   2f528:	4798      	blx	r3
}
   2f52a:	46c0      	nop			; (mov r8, r8)
   2f52c:	46bd      	mov	sp, r7
   2f52e:	b002      	add	sp, #8
   2f530:	bd80      	pop	{r7, pc}
   2f532:	46c0      	nop			; (mov r8, r8)
   2f534:	0001d125 	.word	0x0001d125

0002f538 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2f538:	b580      	push	{r7, lr}
   2f53a:	b082      	sub	sp, #8
   2f53c:	af00      	add	r7, sp, #0
   2f53e:	6078      	str	r0, [r7, #4]
   2f540:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2f542:	683b      	ldr	r3, [r7, #0]
   2f544:	22fa      	movs	r2, #250	; 0xfa
   2f546:	0092      	lsls	r2, r2, #2
   2f548:	435a      	muls	r2, r3
   2f54a:	687b      	ldr	r3, [r7, #4]
   2f54c:	0011      	movs	r1, r2
   2f54e:	0018      	movs	r0, r3
   2f550:	4b02      	ldr	r3, [pc, #8]	; (2f55c <TimerCountdown+0x24>)
   2f552:	4798      	blx	r3
}
   2f554:	46c0      	nop			; (mov r8, r8)
   2f556:	46bd      	mov	sp, r7
   2f558:	b002      	add	sp, #8
   2f55a:	bd80      	pop	{r7, pc}
   2f55c:	0002f511 	.word	0x0002f511

0002f560 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2f560:	b580      	push	{r7, lr}
   2f562:	b082      	sub	sp, #8
   2f564:	af00      	add	r7, sp, #0
   2f566:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2f568:	687b      	ldr	r3, [r7, #4]
   2f56a:	3304      	adds	r3, #4
   2f56c:	687a      	ldr	r2, [r7, #4]
   2f56e:	0011      	movs	r1, r2
   2f570:	0018      	movs	r0, r3
   2f572:	4b04      	ldr	r3, [pc, #16]	; (2f584 <TimerLeftMS+0x24>)
   2f574:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2f576:	687b      	ldr	r3, [r7, #4]
   2f578:	681b      	ldr	r3, [r3, #0]
}
   2f57a:	0018      	movs	r0, r3
   2f57c:	46bd      	mov	sp, r7
   2f57e:	b002      	add	sp, #8
   2f580:	bd80      	pop	{r7, pc}
   2f582:	46c0      	nop			; (mov r8, r8)
   2f584:	0001d191 	.word	0x0001d191

0002f588 <TimerInit>:


void TimerInit(Timer* timer) {
   2f588:	b580      	push	{r7, lr}
   2f58a:	b082      	sub	sp, #8
   2f58c:	af00      	add	r7, sp, #0
   2f58e:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2f590:	687b      	ldr	r3, [r7, #4]
   2f592:	2200      	movs	r2, #0
   2f594:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2f596:	687b      	ldr	r3, [r7, #4]
   2f598:	3304      	adds	r3, #4
   2f59a:	2208      	movs	r2, #8
   2f59c:	2100      	movs	r1, #0
   2f59e:	0018      	movs	r0, r3
   2f5a0:	4b02      	ldr	r3, [pc, #8]	; (2f5ac <TimerInit+0x24>)
   2f5a2:	4798      	blx	r3
}
   2f5a4:	46c0      	nop			; (mov r8, r8)
   2f5a6:	46bd      	mov	sp, r7
   2f5a8:	b002      	add	sp, #8
   2f5aa:	bd80      	pop	{r7, pc}
   2f5ac:	00034c3f 	.word	0x00034c3f

0002f5b0 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2f5b0:	b590      	push	{r4, r7, lr}
   2f5b2:	b085      	sub	sp, #20
   2f5b4:	af00      	add	r7, sp, #0
   2f5b6:	60f8      	str	r0, [r7, #12]
   2f5b8:	60b9      	str	r1, [r7, #8]
   2f5ba:	607a      	str	r2, [r7, #4]
   2f5bc:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2f5be:	683b      	ldr	r3, [r7, #0]
   2f5c0:	2b00      	cmp	r3, #0
   2f5c2:	d101      	bne.n	2f5c8 <WINC1500_read+0x18>
   2f5c4:	230a      	movs	r3, #10
   2f5c6:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2f5c8:	4b2c      	ldr	r3, [pc, #176]	; (2f67c <WINC1500_read+0xcc>)
   2f5ca:	681b      	ldr	r3, [r3, #0]
   2f5cc:	2b00      	cmp	r3, #0
   2f5ce:	d131      	bne.n	2f634 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2f5d0:	4b2b      	ldr	r3, [pc, #172]	; (2f680 <WINC1500_read+0xd0>)
   2f5d2:	2200      	movs	r2, #0
   2f5d4:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2f5d6:	68fb      	ldr	r3, [r7, #12]
   2f5d8:	681b      	ldr	r3, [r3, #0]
   2f5da:	b258      	sxtb	r0, r3
   2f5dc:	683c      	ldr	r4, [r7, #0]
   2f5de:	2380      	movs	r3, #128	; 0x80
   2f5e0:	005a      	lsls	r2, r3, #1
   2f5e2:	4928      	ldr	r1, [pc, #160]	; (2f684 <WINC1500_read+0xd4>)
   2f5e4:	0023      	movs	r3, r4
   2f5e6:	4c28      	ldr	r4, [pc, #160]	; (2f688 <WINC1500_read+0xd8>)
   2f5e8:	47a0      	blx	r4
   2f5ea:	1e03      	subs	r3, r0, #0
   2f5ec:	d005      	beq.n	2f5fa <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2f5ee:	2301      	movs	r3, #1
   2f5f0:	425b      	negs	r3, r3
   2f5f2:	e03e      	b.n	2f672 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2f5f4:	2000      	movs	r0, #0
   2f5f6:	4b25      	ldr	r3, [pc, #148]	; (2f68c <WINC1500_read+0xdc>)
   2f5f8:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2f5fa:	4b21      	ldr	r3, [pc, #132]	; (2f680 <WINC1500_read+0xd0>)
   2f5fc:	781b      	ldrb	r3, [r3, #0]
   2f5fe:	2201      	movs	r2, #1
   2f600:	4053      	eors	r3, r2
   2f602:	b2db      	uxtb	r3, r3
   2f604:	2b00      	cmp	r3, #0
   2f606:	d1f5      	bne.n	2f5f4 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2f608:	4b21      	ldr	r3, [pc, #132]	; (2f690 <WINC1500_read+0xe0>)
   2f60a:	681b      	ldr	r3, [r3, #0]
   2f60c:	2b00      	cmp	r3, #0
   2f60e:	dd08      	ble.n	2f622 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2f610:	4b1f      	ldr	r3, [pc, #124]	; (2f690 <WINC1500_read+0xe0>)
   2f612:	681b      	ldr	r3, [r3, #0]
   2f614:	001a      	movs	r2, r3
   2f616:	4b19      	ldr	r3, [pc, #100]	; (2f67c <WINC1500_read+0xcc>)
   2f618:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2f61a:	4b1e      	ldr	r3, [pc, #120]	; (2f694 <WINC1500_read+0xe4>)
   2f61c:	2200      	movs	r2, #0
   2f61e:	601a      	str	r2, [r3, #0]
   2f620:	e008      	b.n	2f634 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2f622:	4b16      	ldr	r3, [pc, #88]	; (2f67c <WINC1500_read+0xcc>)
   2f624:	2200      	movs	r2, #0
   2f626:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2f628:	4b1a      	ldr	r3, [pc, #104]	; (2f694 <WINC1500_read+0xe4>)
   2f62a:	2200      	movs	r2, #0
   2f62c:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2f62e:	4b18      	ldr	r3, [pc, #96]	; (2f690 <WINC1500_read+0xe0>)
   2f630:	681b      	ldr	r3, [r3, #0]
   2f632:	e01e      	b.n	2f672 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2f634:	4b11      	ldr	r3, [pc, #68]	; (2f67c <WINC1500_read+0xcc>)
   2f636:	681b      	ldr	r3, [r3, #0]
   2f638:	001a      	movs	r2, r3
   2f63a:	687b      	ldr	r3, [r7, #4]
   2f63c:	4293      	cmp	r3, r2
   2f63e:	dd02      	ble.n	2f646 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2f640:	2301      	movs	r3, #1
   2f642:	425b      	negs	r3, r3
   2f644:	e015      	b.n	2f672 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2f646:	4b13      	ldr	r3, [pc, #76]	; (2f694 <WINC1500_read+0xe4>)
   2f648:	681a      	ldr	r2, [r3, #0]
   2f64a:	4b0e      	ldr	r3, [pc, #56]	; (2f684 <WINC1500_read+0xd4>)
   2f64c:	18d1      	adds	r1, r2, r3
   2f64e:	687a      	ldr	r2, [r7, #4]
   2f650:	68bb      	ldr	r3, [r7, #8]
   2f652:	0018      	movs	r0, r3
   2f654:	4b10      	ldr	r3, [pc, #64]	; (2f698 <WINC1500_read+0xe8>)
   2f656:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2f658:	4b08      	ldr	r3, [pc, #32]	; (2f67c <WINC1500_read+0xcc>)
   2f65a:	681a      	ldr	r2, [r3, #0]
   2f65c:	687b      	ldr	r3, [r7, #4]
   2f65e:	1ad2      	subs	r2, r2, r3
   2f660:	4b06      	ldr	r3, [pc, #24]	; (2f67c <WINC1500_read+0xcc>)
   2f662:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2f664:	4b0b      	ldr	r3, [pc, #44]	; (2f694 <WINC1500_read+0xe4>)
   2f666:	681a      	ldr	r2, [r3, #0]
   2f668:	687b      	ldr	r3, [r7, #4]
   2f66a:	18d2      	adds	r2, r2, r3
   2f66c:	4b09      	ldr	r3, [pc, #36]	; (2f694 <WINC1500_read+0xe4>)
   2f66e:	601a      	str	r2, [r3, #0]
  
  return len;
   2f670:	687b      	ldr	r3, [r7, #4]
}
   2f672:	0018      	movs	r0, r3
   2f674:	46bd      	mov	sp, r7
   2f676:	b005      	add	sp, #20
   2f678:	bd90      	pop	{r4, r7, pc}
   2f67a:	46c0      	nop			; (mov r8, r8)
   2f67c:	2000401c 	.word	0x2000401c
   2f680:	20003f17 	.word	0x20003f17
   2f684:	20003f18 	.word	0x20003f18
   2f688:	00025cbd 	.word	0x00025cbd
   2f68c:	00022205 	.word	0x00022205
   2f690:	20003f10 	.word	0x20003f10
   2f694:	20004018 	.word	0x20004018
   2f698:	00034c09 	.word	0x00034c09

0002f69c <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2f69c:	b590      	push	{r4, r7, lr}
   2f69e:	b085      	sub	sp, #20
   2f6a0:	af00      	add	r7, sp, #0
   2f6a2:	60f8      	str	r0, [r7, #12]
   2f6a4:	60b9      	str	r1, [r7, #8]
   2f6a6:	607a      	str	r2, [r7, #4]
   2f6a8:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2f6aa:	4b10      	ldr	r3, [pc, #64]	; (2f6ec <WINC1500_write+0x50>)
   2f6ac:	2200      	movs	r2, #0
   2f6ae:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2f6b0:	68fb      	ldr	r3, [r7, #12]
   2f6b2:	681b      	ldr	r3, [r3, #0]
   2f6b4:	b258      	sxtb	r0, r3
   2f6b6:	687b      	ldr	r3, [r7, #4]
   2f6b8:	b29a      	uxth	r2, r3
   2f6ba:	68b9      	ldr	r1, [r7, #8]
   2f6bc:	2300      	movs	r3, #0
   2f6be:	4c0c      	ldr	r4, [pc, #48]	; (2f6f0 <WINC1500_write+0x54>)
   2f6c0:	47a0      	blx	r4
   2f6c2:	1e03      	subs	r3, r0, #0
   2f6c4:	d005      	beq.n	2f6d2 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2f6c6:	2301      	movs	r3, #1
   2f6c8:	425b      	negs	r3, r3
   2f6ca:	e00a      	b.n	2f6e2 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2f6cc:	2000      	movs	r0, #0
   2f6ce:	4b09      	ldr	r3, [pc, #36]	; (2f6f4 <WINC1500_write+0x58>)
   2f6d0:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2f6d2:	4b06      	ldr	r3, [pc, #24]	; (2f6ec <WINC1500_write+0x50>)
   2f6d4:	781b      	ldrb	r3, [r3, #0]
   2f6d6:	2201      	movs	r2, #1
   2f6d8:	4053      	eors	r3, r2
   2f6da:	b2db      	uxtb	r3, r3
   2f6dc:	2b00      	cmp	r3, #0
   2f6de:	d1f5      	bne.n	2f6cc <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2f6e0:	687b      	ldr	r3, [r7, #4]
}
   2f6e2:	0018      	movs	r0, r3
   2f6e4:	46bd      	mov	sp, r7
   2f6e6:	b005      	add	sp, #20
   2f6e8:	bd90      	pop	{r4, r7, pc}
   2f6ea:	46c0      	nop			; (mov r8, r8)
   2f6ec:	20003f16 	.word	0x20003f16
   2f6f0:	00025b59 	.word	0x00025b59
   2f6f4:	00022205 	.word	0x00022205

0002f6f8 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2f6f8:	b580      	push	{r7, lr}
   2f6fa:	b082      	sub	sp, #8
   2f6fc:	af00      	add	r7, sp, #0
   2f6fe:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2f700:	687b      	ldr	r3, [r7, #4]
   2f702:	681b      	ldr	r3, [r3, #0]
   2f704:	b25b      	sxtb	r3, r3
   2f706:	0018      	movs	r0, r3
   2f708:	4b06      	ldr	r3, [pc, #24]	; (2f724 <WINC1500_disconnect+0x2c>)
   2f70a:	4798      	blx	r3
	n->socket=-1;
   2f70c:	687b      	ldr	r3, [r7, #4]
   2f70e:	2201      	movs	r2, #1
   2f710:	4252      	negs	r2, r2
   2f712:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2f714:	4b04      	ldr	r3, [pc, #16]	; (2f728 <WINC1500_disconnect+0x30>)
   2f716:	2200      	movs	r2, #0
   2f718:	701a      	strb	r2, [r3, #0]
}
   2f71a:	46c0      	nop			; (mov r8, r8)
   2f71c:	46bd      	mov	sp, r7
   2f71e:	b002      	add	sp, #8
   2f720:	bd80      	pop	{r7, pc}
   2f722:	46c0      	nop			; (mov r8, r8)
   2f724:	00025e3d 	.word	0x00025e3d
   2f728:	20003f15 	.word	0x20003f15

0002f72c <NetworkInit>:


void NetworkInit(Network* n) {
   2f72c:	b580      	push	{r7, lr}
   2f72e:	b082      	sub	sp, #8
   2f730:	af00      	add	r7, sp, #0
   2f732:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2f734:	687b      	ldr	r3, [r7, #4]
   2f736:	2201      	movs	r2, #1
   2f738:	4252      	negs	r2, r2
   2f73a:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2f73c:	687b      	ldr	r3, [r7, #4]
   2f73e:	4a06      	ldr	r2, [pc, #24]	; (2f758 <NetworkInit+0x2c>)
   2f740:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2f742:	687b      	ldr	r3, [r7, #4]
   2f744:	4a05      	ldr	r2, [pc, #20]	; (2f75c <NetworkInit+0x30>)
   2f746:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2f748:	687b      	ldr	r3, [r7, #4]
   2f74a:	4a05      	ldr	r2, [pc, #20]	; (2f760 <NetworkInit+0x34>)
   2f74c:	611a      	str	r2, [r3, #16]
}
   2f74e:	46c0      	nop			; (mov r8, r8)
   2f750:	46bd      	mov	sp, r7
   2f752:	b002      	add	sp, #8
   2f754:	bd80      	pop	{r7, pc}
   2f756:	46c0      	nop			; (mov r8, r8)
   2f758:	0002f5b1 	.word	0x0002f5b1
   2f75c:	0002f69d 	.word	0x0002f69d
   2f760:	0002f6f9 	.word	0x0002f6f9

0002f764 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2f764:	b580      	push	{r7, lr}
   2f766:	b088      	sub	sp, #32
   2f768:	af00      	add	r7, sp, #0
   2f76a:	60f8      	str	r0, [r7, #12]
   2f76c:	60b9      	str	r1, [r7, #8]
   2f76e:	607a      	str	r2, [r7, #4]
   2f770:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2f772:	4b37      	ldr	r3, [pc, #220]	; (2f850 <ConnectNetwork+0xec>)
   2f774:	2200      	movs	r2, #0
   2f776:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2f778:	4b36      	ldr	r3, [pc, #216]	; (2f854 <ConnectNetwork+0xf0>)
   2f77a:	68ba      	ldr	r2, [r7, #8]
   2f77c:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2f77e:	68bb      	ldr	r3, [r7, #8]
   2f780:	0018      	movs	r0, r3
   2f782:	4b35      	ldr	r3, [pc, #212]	; (2f858 <ConnectNetwork+0xf4>)
   2f784:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2f786:	e002      	b.n	2f78e <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2f788:	2000      	movs	r0, #0
   2f78a:	4b34      	ldr	r3, [pc, #208]	; (2f85c <ConnectNetwork+0xf8>)
   2f78c:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2f78e:	4b30      	ldr	r3, [pc, #192]	; (2f850 <ConnectNetwork+0xec>)
   2f790:	781b      	ldrb	r3, [r3, #0]
   2f792:	2201      	movs	r2, #1
   2f794:	4053      	eors	r3, r2
   2f796:	b2db      	uxtb	r3, r3
   2f798:	2b00      	cmp	r3, #0
   2f79a:	d1f5      	bne.n	2f788 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2f79c:	4b30      	ldr	r3, [pc, #192]	; (2f860 <ConnectNetwork+0xfc>)
   2f79e:	681a      	ldr	r2, [r3, #0]
   2f7a0:	68fb      	ldr	r3, [r7, #12]
   2f7a2:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2f7a4:	2310      	movs	r3, #16
   2f7a6:	18fb      	adds	r3, r7, r3
   2f7a8:	2202      	movs	r2, #2
   2f7aa:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2f7ac:	687b      	ldr	r3, [r7, #4]
   2f7ae:	b29b      	uxth	r3, r3
   2f7b0:	021b      	lsls	r3, r3, #8
   2f7b2:	b21a      	sxth	r2, r3
   2f7b4:	687b      	ldr	r3, [r7, #4]
   2f7b6:	b29b      	uxth	r3, r3
   2f7b8:	0a1b      	lsrs	r3, r3, #8
   2f7ba:	b29b      	uxth	r3, r3
   2f7bc:	b21b      	sxth	r3, r3
   2f7be:	4313      	orrs	r3, r2
   2f7c0:	b21b      	sxth	r3, r3
   2f7c2:	b29a      	uxth	r2, r3
   2f7c4:	2310      	movs	r3, #16
   2f7c6:	18fb      	adds	r3, r7, r3
   2f7c8:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2f7ca:	4b25      	ldr	r3, [pc, #148]	; (2f860 <ConnectNetwork+0xfc>)
   2f7cc:	681b      	ldr	r3, [r3, #0]
   2f7ce:	001a      	movs	r2, r3
   2f7d0:	2310      	movs	r3, #16
   2f7d2:	18fb      	adds	r3, r7, r3
   2f7d4:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2f7d6:	68fb      	ldr	r3, [r7, #12]
   2f7d8:	681b      	ldr	r3, [r3, #0]
   2f7da:	2b00      	cmp	r3, #0
   2f7dc:	da0a      	bge.n	2f7f4 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2f7de:	683b      	ldr	r3, [r7, #0]
   2f7e0:	b2db      	uxtb	r3, r3
   2f7e2:	001a      	movs	r2, r3
   2f7e4:	2101      	movs	r1, #1
   2f7e6:	2002      	movs	r0, #2
   2f7e8:	4b1e      	ldr	r3, [pc, #120]	; (2f864 <ConnectNetwork+0x100>)
   2f7ea:	4798      	blx	r3
   2f7ec:	0003      	movs	r3, r0
   2f7ee:	001a      	movs	r2, r3
   2f7f0:	68fb      	ldr	r3, [r7, #12]
   2f7f2:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2f7f4:	68fb      	ldr	r3, [r7, #12]
   2f7f6:	681b      	ldr	r3, [r3, #0]
   2f7f8:	3301      	adds	r3, #1
   2f7fa:	d108      	bne.n	2f80e <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2f7fc:	68fb      	ldr	r3, [r7, #12]
   2f7fe:	681b      	ldr	r3, [r3, #0]
   2f800:	b25b      	sxtb	r3, r3
   2f802:	0018      	movs	r0, r3
   2f804:	4b18      	ldr	r3, [pc, #96]	; (2f868 <ConnectNetwork+0x104>)
   2f806:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2f808:	2309      	movs	r3, #9
   2f80a:	425b      	negs	r3, r3
   2f80c:	e01c      	b.n	2f848 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2f80e:	68fb      	ldr	r3, [r7, #12]
   2f810:	681b      	ldr	r3, [r3, #0]
   2f812:	b25b      	sxtb	r3, r3
   2f814:	2210      	movs	r2, #16
   2f816:	18b9      	adds	r1, r7, r2
   2f818:	2210      	movs	r2, #16
   2f81a:	0018      	movs	r0, r3
   2f81c:	4b13      	ldr	r3, [pc, #76]	; (2f86c <ConnectNetwork+0x108>)
   2f81e:	4798      	blx	r3
   2f820:	1e03      	subs	r3, r0, #0
   2f822:	d002      	beq.n	2f82a <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2f824:	2309      	movs	r3, #9
   2f826:	425b      	negs	r3, r3
   2f828:	e00e      	b.n	2f848 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2f82a:	4b11      	ldr	r3, [pc, #68]	; (2f870 <ConnectNetwork+0x10c>)
   2f82c:	2200      	movs	r2, #0
   2f82e:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2f830:	e002      	b.n	2f838 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2f832:	2000      	movs	r0, #0
   2f834:	4b09      	ldr	r3, [pc, #36]	; (2f85c <ConnectNetwork+0xf8>)
   2f836:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2f838:	4b0d      	ldr	r3, [pc, #52]	; (2f870 <ConnectNetwork+0x10c>)
   2f83a:	781b      	ldrb	r3, [r3, #0]
   2f83c:	2201      	movs	r2, #1
   2f83e:	4053      	eors	r3, r2
   2f840:	b2db      	uxtb	r3, r3
   2f842:	2b00      	cmp	r3, #0
   2f844:	d1f5      	bne.n	2f832 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2f846:	2300      	movs	r3, #0
   2f848:	0018      	movs	r0, r3
   2f84a:	46bd      	mov	sp, r7
   2f84c:	b008      	add	sp, #32
   2f84e:	bd80      	pop	{r7, pc}
   2f850:	20003f14 	.word	0x20003f14
   2f854:	20004020 	.word	0x20004020
   2f858:	00026085 	.word	0x00026085
   2f85c:	00022205 	.word	0x00022205
   2f860:	20003f0c 	.word	0x20003f0c
   2f864:	00025831 	.word	0x00025831
   2f868:	00025e3d 	.word	0x00025e3d
   2f86c:	00025a45 	.word	0x00025a45
   2f870:	20003f15 	.word	0x20003f15

0002f874 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2f874:	b580      	push	{r7, lr}
   2f876:	b084      	sub	sp, #16
   2f878:	af00      	add	r7, sp, #0
   2f87a:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2f87c:	687b      	ldr	r3, [r7, #4]
   2f87e:	2b00      	cmp	r3, #0
   2f880:	d022      	beq.n	2f8c8 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f882:	2300      	movs	r3, #0
   2f884:	60fb      	str	r3, [r7, #12]
   2f886:	e01b      	b.n	2f8c0 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2f888:	4a11      	ldr	r2, [pc, #68]	; (2f8d0 <allocateClient+0x5c>)
   2f88a:	68fb      	ldr	r3, [r7, #12]
   2f88c:	2164      	movs	r1, #100	; 0x64
   2f88e:	434b      	muls	r3, r1
   2f890:	18d3      	adds	r3, r2, r3
   2f892:	3360      	adds	r3, #96	; 0x60
   2f894:	681b      	ldr	r3, [r3, #0]
   2f896:	2b00      	cmp	r3, #0
   2f898:	d10f      	bne.n	2f8ba <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2f89a:	4a0d      	ldr	r2, [pc, #52]	; (2f8d0 <allocateClient+0x5c>)
   2f89c:	68fb      	ldr	r3, [r7, #12]
   2f89e:	2164      	movs	r1, #100	; 0x64
   2f8a0:	434b      	muls	r3, r1
   2f8a2:	18d3      	adds	r3, r2, r3
   2f8a4:	3360      	adds	r3, #96	; 0x60
   2f8a6:	687a      	ldr	r2, [r7, #4]
   2f8a8:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2f8aa:	68fb      	ldr	r3, [r7, #12]
   2f8ac:	2264      	movs	r2, #100	; 0x64
   2f8ae:	435a      	muls	r2, r3
   2f8b0:	4b07      	ldr	r3, [pc, #28]	; (2f8d0 <allocateClient+0x5c>)
   2f8b2:	18d2      	adds	r2, r2, r3
   2f8b4:	687b      	ldr	r3, [r7, #4]
   2f8b6:	61da      	str	r2, [r3, #28]
			return;
   2f8b8:	e007      	b.n	2f8ca <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2f8ba:	68fb      	ldr	r3, [r7, #12]
   2f8bc:	3301      	adds	r3, #1
   2f8be:	60fb      	str	r3, [r7, #12]
   2f8c0:	68fb      	ldr	r3, [r7, #12]
   2f8c2:	2b06      	cmp	r3, #6
   2f8c4:	d9e0      	bls.n	2f888 <allocateClient+0x14>
   2f8c6:	e000      	b.n	2f8ca <allocateClient+0x56>
		return;
   2f8c8:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2f8ca:	46bd      	mov	sp, r7
   2f8cc:	b004      	add	sp, #16
   2f8ce:	bd80      	pop	{r7, pc}
   2f8d0:	20004024 	.word	0x20004024

0002f8d4 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2f8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f8d6:	b089      	sub	sp, #36	; 0x24
   2f8d8:	af04      	add	r7, sp, #16
   2f8da:	6078      	str	r0, [r7, #4]
   2f8dc:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2f8de:	687b      	ldr	r3, [r7, #4]
   2f8e0:	2b00      	cmp	r3, #0
   2f8e2:	d00a      	beq.n	2f8fa <mqtt_init+0x26>
   2f8e4:	683b      	ldr	r3, [r7, #0]
   2f8e6:	2b00      	cmp	r3, #0
   2f8e8:	d007      	beq.n	2f8fa <mqtt_init+0x26>
   2f8ea:	683b      	ldr	r3, [r7, #0]
   2f8ec:	691b      	ldr	r3, [r3, #16]
   2f8ee:	2b00      	cmp	r3, #0
   2f8f0:	d003      	beq.n	2f8fa <mqtt_init+0x26>
   2f8f2:	683b      	ldr	r3, [r7, #0]
   2f8f4:	689b      	ldr	r3, [r3, #8]
   2f8f6:	2b00      	cmp	r3, #0
   2f8f8:	d102      	bne.n	2f900 <mqtt_init+0x2c>
		return FAILURE;
   2f8fa:	2301      	movs	r3, #1
   2f8fc:	425b      	negs	r3, r3
   2f8fe:	e034      	b.n	2f96a <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2f900:	683b      	ldr	r3, [r7, #0]
   2f902:	889b      	ldrh	r3, [r3, #4]
   2f904:	001a      	movs	r2, r3
   2f906:	23fa      	movs	r3, #250	; 0xfa
   2f908:	009b      	lsls	r3, r3, #2
   2f90a:	4353      	muls	r3, r2
   2f90c:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2f90e:	687b      	ldr	r3, [r7, #4]
   2f910:	3320      	adds	r3, #32
   2f912:	0018      	movs	r0, r3
   2f914:	4b17      	ldr	r3, [pc, #92]	; (2f974 <mqtt_init+0xa0>)
   2f916:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2f918:	687b      	ldr	r3, [r7, #4]
   2f91a:	3304      	adds	r3, #4
   2f91c:	6839      	ldr	r1, [r7, #0]
   2f91e:	2218      	movs	r2, #24
   2f920:	0018      	movs	r0, r3
   2f922:	4b15      	ldr	r3, [pc, #84]	; (2f978 <mqtt_init+0xa4>)
   2f924:	4798      	blx	r3
	allocateClient(module);
   2f926:	687b      	ldr	r3, [r7, #4]
   2f928:	0018      	movs	r0, r3
   2f92a:	4b14      	ldr	r3, [pc, #80]	; (2f97c <mqtt_init+0xa8>)
   2f92c:	4798      	blx	r3
	
	if(module->client)
   2f92e:	687b      	ldr	r3, [r7, #4]
   2f930:	69db      	ldr	r3, [r3, #28]
   2f932:	2b00      	cmp	r3, #0
   2f934:	d017      	beq.n	2f966 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2f936:	687b      	ldr	r3, [r7, #4]
   2f938:	69d8      	ldr	r0, [r3, #28]
   2f93a:	687b      	ldr	r3, [r7, #4]
   2f93c:	3320      	adds	r3, #32
   2f93e:	001c      	movs	r4, r3
   2f940:	683b      	ldr	r3, [r7, #0]
   2f942:	691e      	ldr	r6, [r3, #16]
   2f944:	683b      	ldr	r3, [r7, #0]
   2f946:	695a      	ldr	r2, [r3, #20]
   2f948:	683b      	ldr	r3, [r7, #0]
   2f94a:	6899      	ldr	r1, [r3, #8]
   2f94c:	683b      	ldr	r3, [r7, #0]
   2f94e:	68db      	ldr	r3, [r3, #12]
   2f950:	68fd      	ldr	r5, [r7, #12]
   2f952:	9302      	str	r3, [sp, #8]
   2f954:	9101      	str	r1, [sp, #4]
   2f956:	9200      	str	r2, [sp, #0]
   2f958:	0033      	movs	r3, r6
   2f95a:	002a      	movs	r2, r5
   2f95c:	0021      	movs	r1, r4
   2f95e:	4c08      	ldr	r4, [pc, #32]	; (2f980 <mqtt_init+0xac>)
   2f960:	47a0      	blx	r4
		return SUCCESS;
   2f962:	2300      	movs	r3, #0
   2f964:	e001      	b.n	2f96a <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2f966:	2301      	movs	r3, #1
   2f968:	425b      	negs	r3, r3
}
   2f96a:	0018      	movs	r0, r3
   2f96c:	46bd      	mov	sp, r7
   2f96e:	b005      	add	sp, #20
   2f970:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f972:	46c0      	nop			; (mov r8, r8)
   2f974:	0002f72d 	.word	0x0002f72d
   2f978:	00034c09 	.word	0x00034c09
   2f97c:	0002f875 	.word	0x0002f875
   2f980:	0002e7a5 	.word	0x0002e7a5

0002f984 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2f984:	b580      	push	{r7, lr}
   2f986:	b082      	sub	sp, #8
   2f988:	af00      	add	r7, sp, #0
   2f98a:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2f98c:	687b      	ldr	r3, [r7, #4]
   2f98e:	4a0c      	ldr	r2, [pc, #48]	; (2f9c0 <mqtt_get_config_defaults+0x3c>)
   2f990:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f992:	687b      	ldr	r3, [r7, #4]
   2f994:	2200      	movs	r2, #0
   2f996:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2f998:	687b      	ldr	r3, [r7, #4]
   2f99a:	223c      	movs	r2, #60	; 0x3c
   2f99c:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2f99e:	687b      	ldr	r3, [r7, #4]
   2f9a0:	2200      	movs	r2, #0
   2f9a2:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2f9a4:	687b      	ldr	r3, [r7, #4]
   2f9a6:	2200      	movs	r2, #0
   2f9a8:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2f9aa:	687b      	ldr	r3, [r7, #4]
   2f9ac:	2200      	movs	r2, #0
   2f9ae:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2f9b0:	687b      	ldr	r3, [r7, #4]
   2f9b2:	2200      	movs	r2, #0
   2f9b4:	615a      	str	r2, [r3, #20]
}
   2f9b6:	46c0      	nop			; (mov r8, r8)
   2f9b8:	46bd      	mov	sp, r7
   2f9ba:	b002      	add	sp, #8
   2f9bc:	bd80      	pop	{r7, pc}
   2f9be:	46c0      	nop			; (mov r8, r8)
   2f9c0:	0000075b 	.word	0x0000075b

0002f9c4 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2f9c4:	b580      	push	{r7, lr}
   2f9c6:	b082      	sub	sp, #8
   2f9c8:	af00      	add	r7, sp, #0
   2f9ca:	6078      	str	r0, [r7, #4]
   2f9cc:	6039      	str	r1, [r7, #0]
	if(module)
   2f9ce:	687b      	ldr	r3, [r7, #4]
   2f9d0:	2b00      	cmp	r3, #0
   2f9d2:	d004      	beq.n	2f9de <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2f9d4:	687b      	ldr	r3, [r7, #4]
   2f9d6:	683a      	ldr	r2, [r7, #0]
   2f9d8:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2f9da:	2300      	movs	r3, #0
   2f9dc:	e001      	b.n	2f9e2 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2f9de:	2301      	movs	r3, #1
   2f9e0:	425b      	negs	r3, r3
}
   2f9e2:	0018      	movs	r0, r3
   2f9e4:	46bd      	mov	sp, r7
   2f9e6:	b002      	add	sp, #8
   2f9e8:	bd80      	pop	{r7, pc}
	...

0002f9ec <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f9ec:	b580      	push	{r7, lr}
   2f9ee:	b082      	sub	sp, #8
   2f9f0:	af00      	add	r7, sp, #0
   2f9f2:	603a      	str	r2, [r7, #0]
   2f9f4:	1dfb      	adds	r3, r7, #7
   2f9f6:	1c02      	adds	r2, r0, #0
   2f9f8:	701a      	strb	r2, [r3, #0]
   2f9fa:	1dbb      	adds	r3, r7, #6
   2f9fc:	1c0a      	adds	r2, r1, #0
   2f9fe:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2fa00:	683a      	ldr	r2, [r7, #0]
   2fa02:	1dbb      	adds	r3, r7, #6
   2fa04:	7819      	ldrb	r1, [r3, #0]
   2fa06:	1dfb      	adds	r3, r7, #7
   2fa08:	781b      	ldrb	r3, [r3, #0]
   2fa0a:	b25b      	sxtb	r3, r3
   2fa0c:	0018      	movs	r0, r3
   2fa0e:	4b03      	ldr	r3, [pc, #12]	; (2fa1c <mqtt_socket_event_handler+0x30>)
   2fa10:	4798      	blx	r3
}
   2fa12:	46c0      	nop			; (mov r8, r8)
   2fa14:	46bd      	mov	sp, r7
   2fa16:	b002      	add	sp, #8
   2fa18:	bd80      	pop	{r7, pc}
   2fa1a:	46c0      	nop			; (mov r8, r8)
   2fa1c:	0002f469 	.word	0x0002f469

0002fa20 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2fa20:	b580      	push	{r7, lr}
   2fa22:	b082      	sub	sp, #8
   2fa24:	af00      	add	r7, sp, #0
   2fa26:	6078      	str	r0, [r7, #4]
   2fa28:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2fa2a:	683a      	ldr	r2, [r7, #0]
   2fa2c:	687b      	ldr	r3, [r7, #4]
   2fa2e:	0011      	movs	r1, r2
   2fa30:	0018      	movs	r0, r3
   2fa32:	4b03      	ldr	r3, [pc, #12]	; (2fa40 <mqtt_socket_resolve_handler+0x20>)
   2fa34:	4798      	blx	r3
}
   2fa36:	46c0      	nop			; (mov r8, r8)
   2fa38:	46bd      	mov	sp, r7
   2fa3a:	b002      	add	sp, #8
   2fa3c:	bd80      	pop	{r7, pc}
   2fa3e:	46c0      	nop			; (mov r8, r8)
   2fa40:	0002f419 	.word	0x0002f419

0002fa44 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2fa44:	b590      	push	{r4, r7, lr}
   2fa46:	b085      	sub	sp, #20
   2fa48:	af00      	add	r7, sp, #0
   2fa4a:	6078      	str	r0, [r7, #4]
   2fa4c:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2fa4e:	687b      	ldr	r3, [r7, #4]
   2fa50:	3320      	adds	r3, #32
   2fa52:	0018      	movs	r0, r3
   2fa54:	687b      	ldr	r3, [r7, #4]
   2fa56:	889b      	ldrh	r3, [r3, #4]
   2fa58:	001a      	movs	r2, r3
   2fa5a:	687b      	ldr	r3, [r7, #4]
   2fa5c:	799b      	ldrb	r3, [r3, #6]
   2fa5e:	6839      	ldr	r1, [r7, #0]
   2fa60:	4c09      	ldr	r4, [pc, #36]	; (2fa88 <mqtt_connect+0x44>)
   2fa62:	47a0      	blx	r4
   2fa64:	0003      	movs	r3, r0
   2fa66:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2fa68:	687b      	ldr	r3, [r7, #4]
   2fa6a:	681b      	ldr	r3, [r3, #0]
   2fa6c:	2b00      	cmp	r3, #0
   2fa6e:	d006      	beq.n	2fa7e <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2fa70:	687b      	ldr	r3, [r7, #4]
   2fa72:	681b      	ldr	r3, [r3, #0]
   2fa74:	220c      	movs	r2, #12
   2fa76:	18ba      	adds	r2, r7, r2
   2fa78:	6878      	ldr	r0, [r7, #4]
   2fa7a:	2100      	movs	r1, #0
   2fa7c:	4798      	blx	r3
	return connResult.sock_connected.result;
   2fa7e:	68fb      	ldr	r3, [r7, #12]
}
   2fa80:	0018      	movs	r0, r3
   2fa82:	46bd      	mov	sp, r7
   2fa84:	b005      	add	sp, #20
   2fa86:	bd90      	pop	{r4, r7, pc}
   2fa88:	0002f765 	.word	0x0002f765

0002fa8c <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2fa8c:	b580      	push	{r7, lr}
   2fa8e:	b09c      	sub	sp, #112	; 0x70
   2fa90:	af00      	add	r7, sp, #0
   2fa92:	60f8      	str	r0, [r7, #12]
   2fa94:	607a      	str	r2, [r7, #4]
   2fa96:	603b      	str	r3, [r7, #0]
   2fa98:	230b      	movs	r3, #11
   2fa9a:	18fb      	adds	r3, r7, r3
   2fa9c:	1c0a      	adds	r2, r1, #0
   2fa9e:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2faa0:	2310      	movs	r3, #16
   2faa2:	18fa      	adds	r2, r7, r3
   2faa4:	4b31      	ldr	r3, [pc, #196]	; (2fb6c <mqtt_connect_broker+0xe0>)
   2faa6:	0010      	movs	r0, r2
   2faa8:	0019      	movs	r1, r3
   2faaa:	2358      	movs	r3, #88	; 0x58
   2faac:	001a      	movs	r2, r3
   2faae:	4b30      	ldr	r3, [pc, #192]	; (2fb70 <mqtt_connect_broker+0xe4>)
   2fab0:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2fab2:	2310      	movs	r3, #16
   2fab4:	18fb      	adds	r3, r7, r3
   2fab6:	2204      	movs	r2, #4
   2fab8:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2faba:	2310      	movs	r3, #16
   2fabc:	18fb      	adds	r3, r7, r3
   2fabe:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2fac0:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2fac2:	2310      	movs	r3, #16
   2fac4:	18fb      	adds	r3, r7, r3
   2fac6:	687a      	ldr	r2, [r7, #4]
   2fac8:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2faca:	2310      	movs	r3, #16
   2facc:	18fb      	adds	r3, r7, r3
   2face:	683a      	ldr	r2, [r7, #0]
   2fad0:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2fad2:	2310      	movs	r3, #16
   2fad4:	18fb      	adds	r3, r7, r3
   2fad6:	220b      	movs	r2, #11
   2fad8:	18ba      	adds	r2, r7, r2
   2fada:	7812      	ldrb	r2, [r2, #0]
   2fadc:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2fade:	2310      	movs	r3, #16
   2fae0:	18fb      	adds	r3, r7, r3
   2fae2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2fae4:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2fae6:	2310      	movs	r3, #16
   2fae8:	18fb      	adds	r3, r7, r3
   2faea:	2280      	movs	r2, #128	; 0x80
   2faec:	18ba      	adds	r2, r7, r2
   2faee:	6812      	ldr	r2, [r2, #0]
   2faf0:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2faf2:	2310      	movs	r3, #16
   2faf4:	18fb      	adds	r3, r7, r3
   2faf6:	228c      	movs	r2, #140	; 0x8c
   2faf8:	18ba      	adds	r2, r7, r2
   2fafa:	213c      	movs	r1, #60	; 0x3c
   2fafc:	7812      	ldrb	r2, [r2, #0]
   2fafe:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2fb00:	2310      	movs	r3, #16
   2fb02:	18fb      	adds	r3, r7, r3
   2fb04:	2288      	movs	r2, #136	; 0x88
   2fb06:	18ba      	adds	r2, r7, r2
   2fb08:	213d      	movs	r1, #61	; 0x3d
   2fb0a:	7812      	ldrb	r2, [r2, #0]
   2fb0c:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2fb0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2fb10:	2b00      	cmp	r3, #0
   2fb12:	d008      	beq.n	2fb26 <mqtt_connect_broker+0x9a>
   2fb14:	2380      	movs	r3, #128	; 0x80
   2fb16:	18fb      	adds	r3, r7, r3
   2fb18:	681b      	ldr	r3, [r3, #0]
   2fb1a:	2b00      	cmp	r3, #0
   2fb1c:	d003      	beq.n	2fb26 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2fb1e:	2310      	movs	r3, #16
   2fb20:	18fb      	adds	r3, r7, r3
   2fb22:	2201      	movs	r2, #1
   2fb24:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2fb26:	68fb      	ldr	r3, [r7, #12]
   2fb28:	69db      	ldr	r3, [r3, #28]
   2fb2a:	2210      	movs	r2, #16
   2fb2c:	18ba      	adds	r2, r7, r2
   2fb2e:	0011      	movs	r1, r2
   2fb30:	0018      	movs	r0, r3
   2fb32:	4b10      	ldr	r3, [pc, #64]	; (2fb74 <mqtt_connect_broker+0xe8>)
   2fb34:	4798      	blx	r3
   2fb36:	0003      	movs	r3, r0
   2fb38:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2fb3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2fb3c:	b2da      	uxtb	r2, r3
   2fb3e:	2368      	movs	r3, #104	; 0x68
   2fb40:	18fb      	adds	r3, r7, r3
   2fb42:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2fb44:	68fb      	ldr	r3, [r7, #12]
   2fb46:	681b      	ldr	r3, [r3, #0]
   2fb48:	2b00      	cmp	r3, #0
   2fb4a:	d006      	beq.n	2fb5a <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2fb4c:	68fb      	ldr	r3, [r7, #12]
   2fb4e:	681b      	ldr	r3, [r3, #0]
   2fb50:	2268      	movs	r2, #104	; 0x68
   2fb52:	18ba      	adds	r2, r7, r2
   2fb54:	68f8      	ldr	r0, [r7, #12]
   2fb56:	2101      	movs	r1, #1
   2fb58:	4798      	blx	r3
	
	module->isConnected = true;
   2fb5a:	68fb      	ldr	r3, [r7, #12]
   2fb5c:	2234      	movs	r2, #52	; 0x34
   2fb5e:	2101      	movs	r1, #1
   2fb60:	5499      	strb	r1, [r3, r2]
	return rc;
   2fb62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2fb64:	0018      	movs	r0, r3
   2fb66:	46bd      	mov	sp, r7
   2fb68:	b01c      	add	sp, #112	; 0x70
   2fb6a:	bd80      	pop	{r7, pc}
   2fb6c:	00039d24 	.word	0x00039d24
   2fb70:	00034c09 	.word	0x00034c09
   2fb74:	0002eeb5 	.word	0x0002eeb5

0002fb78 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2fb78:	b580      	push	{r7, lr}
   2fb7a:	b084      	sub	sp, #16
   2fb7c:	af00      	add	r7, sp, #0
   2fb7e:	6078      	str	r0, [r7, #4]
   2fb80:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2fb82:	687b      	ldr	r3, [r7, #4]
   2fb84:	69db      	ldr	r3, [r3, #28]
   2fb86:	0018      	movs	r0, r3
   2fb88:	4b0c      	ldr	r3, [pc, #48]	; (2fbbc <mqtt_disconnect+0x44>)
   2fb8a:	4798      	blx	r3
   2fb8c:	0003      	movs	r3, r0
   2fb8e:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2fb90:	68fb      	ldr	r3, [r7, #12]
   2fb92:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2fb94:	687b      	ldr	r3, [r7, #4]
   2fb96:	681b      	ldr	r3, [r3, #0]
   2fb98:	2b00      	cmp	r3, #0
   2fb9a:	d006      	beq.n	2fbaa <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2fb9c:	687b      	ldr	r3, [r7, #4]
   2fb9e:	681b      	ldr	r3, [r3, #0]
   2fba0:	2208      	movs	r2, #8
   2fba2:	18ba      	adds	r2, r7, r2
   2fba4:	6878      	ldr	r0, [r7, #4]
   2fba6:	2105      	movs	r1, #5
   2fba8:	4798      	blx	r3
	
	module->isConnected = false;
   2fbaa:	687b      	ldr	r3, [r7, #4]
   2fbac:	2234      	movs	r2, #52	; 0x34
   2fbae:	2100      	movs	r1, #0
   2fbb0:	5499      	strb	r1, [r3, r2]
	return rc;
   2fbb2:	68fb      	ldr	r3, [r7, #12]
}
   2fbb4:	0018      	movs	r0, r3
   2fbb6:	46bd      	mov	sp, r7
   2fbb8:	b004      	add	sp, #16
   2fbba:	bd80      	pop	{r7, pc}
   2fbbc:	0002f341 	.word	0x0002f341

0002fbc0 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2fbc0:	b580      	push	{r7, lr}
   2fbc2:	b08a      	sub	sp, #40	; 0x28
   2fbc4:	af00      	add	r7, sp, #0
   2fbc6:	60f8      	str	r0, [r7, #12]
   2fbc8:	60b9      	str	r1, [r7, #8]
   2fbca:	607a      	str	r2, [r7, #4]
   2fbcc:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2fbce:	2314      	movs	r3, #20
   2fbd0:	18fb      	adds	r3, r7, r3
   2fbd2:	2230      	movs	r2, #48	; 0x30
   2fbd4:	18ba      	adds	r2, r7, r2
   2fbd6:	7812      	ldrb	r2, [r2, #0]
   2fbd8:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2fbda:	2314      	movs	r3, #20
   2fbdc:	18fb      	adds	r3, r7, r3
   2fbde:	687a      	ldr	r2, [r7, #4]
   2fbe0:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2fbe2:	2314      	movs	r3, #20
   2fbe4:	18fb      	adds	r3, r7, r3
   2fbe6:	683a      	ldr	r2, [r7, #0]
   2fbe8:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2fbea:	2314      	movs	r3, #20
   2fbec:	18fb      	adds	r3, r7, r3
   2fbee:	2234      	movs	r2, #52	; 0x34
   2fbf0:	18ba      	adds	r2, r7, r2
   2fbf2:	7812      	ldrb	r2, [r2, #0]
   2fbf4:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2fbf6:	68fb      	ldr	r3, [r7, #12]
   2fbf8:	69db      	ldr	r3, [r3, #28]
   2fbfa:	2214      	movs	r2, #20
   2fbfc:	18ba      	adds	r2, r7, r2
   2fbfe:	68b9      	ldr	r1, [r7, #8]
   2fc00:	0018      	movs	r0, r3
   2fc02:	4b09      	ldr	r3, [pc, #36]	; (2fc28 <mqtt_publish+0x68>)
   2fc04:	4798      	blx	r3
   2fc06:	0003      	movs	r3, r0
   2fc08:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2fc0a:	68fb      	ldr	r3, [r7, #12]
   2fc0c:	681b      	ldr	r3, [r3, #0]
   2fc0e:	2b00      	cmp	r3, #0
   2fc10:	d005      	beq.n	2fc1e <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2fc12:	68fb      	ldr	r3, [r7, #12]
   2fc14:	681b      	ldr	r3, [r3, #0]
   2fc16:	68f8      	ldr	r0, [r7, #12]
   2fc18:	2200      	movs	r2, #0
   2fc1a:	2102      	movs	r1, #2
   2fc1c:	4798      	blx	r3
	
	return rc;
   2fc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2fc20:	0018      	movs	r0, r3
   2fc22:	46bd      	mov	sp, r7
   2fc24:	b00a      	add	sp, #40	; 0x28
   2fc26:	bd80      	pop	{r7, pc}
   2fc28:	0002f181 	.word	0x0002f181

0002fc2c <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2fc2c:	b590      	push	{r4, r7, lr}
   2fc2e:	b087      	sub	sp, #28
   2fc30:	af00      	add	r7, sp, #0
   2fc32:	60f8      	str	r0, [r7, #12]
   2fc34:	60b9      	str	r1, [r7, #8]
   2fc36:	603b      	str	r3, [r7, #0]
   2fc38:	1dfb      	adds	r3, r7, #7
   2fc3a:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2fc3c:	68fb      	ldr	r3, [r7, #12]
   2fc3e:	69d8      	ldr	r0, [r3, #28]
   2fc40:	683c      	ldr	r4, [r7, #0]
   2fc42:	1dfb      	adds	r3, r7, #7
   2fc44:	781a      	ldrb	r2, [r3, #0]
   2fc46:	68b9      	ldr	r1, [r7, #8]
   2fc48:	0023      	movs	r3, r4
   2fc4a:	4c09      	ldr	r4, [pc, #36]	; (2fc70 <mqtt_subscribe+0x44>)
   2fc4c:	47a0      	blx	r4
   2fc4e:	0003      	movs	r3, r0
   2fc50:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2fc52:	68fb      	ldr	r3, [r7, #12]
   2fc54:	681b      	ldr	r3, [r3, #0]
   2fc56:	2b00      	cmp	r3, #0
   2fc58:	d005      	beq.n	2fc66 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2fc5a:	68fb      	ldr	r3, [r7, #12]
   2fc5c:	681b      	ldr	r3, [r3, #0]
   2fc5e:	68f8      	ldr	r0, [r7, #12]
   2fc60:	2200      	movs	r2, #0
   2fc62:	2103      	movs	r1, #3
   2fc64:	4798      	blx	r3
	
	return rc;
   2fc66:	697b      	ldr	r3, [r7, #20]
}
   2fc68:	0018      	movs	r0, r3
   2fc6a:	46bd      	mov	sp, r7
   2fc6c:	b007      	add	sp, #28
   2fc6e:	bd90      	pop	{r4, r7, pc}
   2fc70:	0002eff5 	.word	0x0002eff5

0002fc74 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2fc74:	b580      	push	{r7, lr}
   2fc76:	b082      	sub	sp, #8
   2fc78:	af00      	add	r7, sp, #0
   2fc7a:	6078      	str	r0, [r7, #4]
   2fc7c:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2fc7e:	687b      	ldr	r3, [r7, #4]
   2fc80:	69db      	ldr	r3, [r3, #28]
   2fc82:	683a      	ldr	r2, [r7, #0]
   2fc84:	0011      	movs	r1, r2
   2fc86:	0018      	movs	r0, r3
   2fc88:	4b03      	ldr	r3, [pc, #12]	; (2fc98 <mqtt_yield+0x24>)
   2fc8a:	4798      	blx	r3
   2fc8c:	0003      	movs	r3, r0
   2fc8e:	0018      	movs	r0, r3
   2fc90:	46bd      	mov	sp, r7
   2fc92:	b002      	add	sp, #8
   2fc94:	bd80      	pop	{r7, pc}
   2fc96:	46c0      	nop			; (mov r8, r8)
   2fc98:	0002edfd 	.word	0x0002edfd

0002fc9c <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2fc9c:	b590      	push	{r4, r7, lr}
   2fc9e:	b085      	sub	sp, #20
   2fca0:	af00      	add	r7, sp, #0
   2fca2:	6078      	str	r0, [r7, #4]
	int len = 0;
   2fca4:	2300      	movs	r3, #0
   2fca6:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2fca8:	687b      	ldr	r3, [r7, #4]
   2fcaa:	7a1b      	ldrb	r3, [r3, #8]
   2fcac:	2b03      	cmp	r3, #3
   2fcae:	d102      	bne.n	2fcb6 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2fcb0:	230c      	movs	r3, #12
   2fcb2:	60fb      	str	r3, [r7, #12]
   2fcb4:	e005      	b.n	2fcc2 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2fcb6:	687b      	ldr	r3, [r7, #4]
   2fcb8:	7a1b      	ldrb	r3, [r3, #8]
   2fcba:	2b04      	cmp	r3, #4
   2fcbc:	d101      	bne.n	2fcc2 <MQTTSerialize_connectLength+0x26>
		len = 10;
   2fcbe:	230a      	movs	r3, #10
   2fcc0:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2fcc2:	687b      	ldr	r3, [r7, #4]
   2fcc4:	68d8      	ldr	r0, [r3, #12]
   2fcc6:	6919      	ldr	r1, [r3, #16]
   2fcc8:	695a      	ldr	r2, [r3, #20]
   2fcca:	4b25      	ldr	r3, [pc, #148]	; (2fd60 <MQTTSerialize_connectLength+0xc4>)
   2fccc:	4798      	blx	r3
   2fcce:	0003      	movs	r3, r0
   2fcd0:	3302      	adds	r3, #2
   2fcd2:	68fa      	ldr	r2, [r7, #12]
   2fcd4:	18d3      	adds	r3, r2, r3
   2fcd6:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2fcd8:	687b      	ldr	r3, [r7, #4]
   2fcda:	7edb      	ldrb	r3, [r3, #27]
   2fcdc:	2b00      	cmp	r3, #0
   2fcde:	d013      	beq.n	2fd08 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2fce0:	687b      	ldr	r3, [r7, #4]
   2fce2:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2fce4:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2fce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2fce8:	4b1d      	ldr	r3, [pc, #116]	; (2fd60 <MQTTSerialize_connectLength+0xc4>)
   2fcea:	4798      	blx	r3
   2fcec:	0003      	movs	r3, r0
   2fcee:	1c9c      	adds	r4, r3, #2
   2fcf0:	687b      	ldr	r3, [r7, #4]
   2fcf2:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2fcf4:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2fcf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2fcf8:	4b19      	ldr	r3, [pc, #100]	; (2fd60 <MQTTSerialize_connectLength+0xc4>)
   2fcfa:	4798      	blx	r3
   2fcfc:	0003      	movs	r3, r0
   2fcfe:	18e3      	adds	r3, r4, r3
   2fd00:	3302      	adds	r3, #2
   2fd02:	68fa      	ldr	r2, [r7, #12]
   2fd04:	18d3      	adds	r3, r2, r3
   2fd06:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2fd08:	687b      	ldr	r3, [r7, #4]
   2fd0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2fd0c:	2b00      	cmp	r3, #0
   2fd0e:	d103      	bne.n	2fd18 <MQTTSerialize_connectLength+0x7c>
   2fd10:	687b      	ldr	r3, [r7, #4]
   2fd12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fd14:	2b00      	cmp	r3, #0
   2fd16:	d00a      	beq.n	2fd2e <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2fd18:	687b      	ldr	r3, [r7, #4]
   2fd1a:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2fd1c:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2fd1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2fd20:	4b0f      	ldr	r3, [pc, #60]	; (2fd60 <MQTTSerialize_connectLength+0xc4>)
   2fd22:	4798      	blx	r3
   2fd24:	0003      	movs	r3, r0
   2fd26:	3302      	adds	r3, #2
   2fd28:	68fa      	ldr	r2, [r7, #12]
   2fd2a:	18d3      	adds	r3, r2, r3
   2fd2c:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2fd2e:	687b      	ldr	r3, [r7, #4]
   2fd30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fd32:	2b00      	cmp	r3, #0
   2fd34:	d103      	bne.n	2fd3e <MQTTSerialize_connectLength+0xa2>
   2fd36:	687b      	ldr	r3, [r7, #4]
   2fd38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fd3a:	2b00      	cmp	r3, #0
   2fd3c:	d00a      	beq.n	2fd54 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2fd3e:	687b      	ldr	r3, [r7, #4]
   2fd40:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2fd42:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2fd44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2fd46:	4b06      	ldr	r3, [pc, #24]	; (2fd60 <MQTTSerialize_connectLength+0xc4>)
   2fd48:	4798      	blx	r3
   2fd4a:	0003      	movs	r3, r0
   2fd4c:	3302      	adds	r3, #2
   2fd4e:	68fa      	ldr	r2, [r7, #12]
   2fd50:	18d3      	adds	r3, r2, r3
   2fd52:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2fd54:	68fb      	ldr	r3, [r7, #12]
}
   2fd56:	0018      	movs	r0, r3
   2fd58:	46bd      	mov	sp, r7
   2fd5a:	b005      	add	sp, #20
   2fd5c:	bd90      	pop	{r4, r7, pc}
   2fd5e:	46c0      	nop			; (mov r8, r8)
   2fd60:	0003070d 	.word	0x0003070d

0002fd64 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2fd64:	b590      	push	{r4, r7, lr}
   2fd66:	b08b      	sub	sp, #44	; 0x2c
   2fd68:	af00      	add	r7, sp, #0
   2fd6a:	60f8      	str	r0, [r7, #12]
   2fd6c:	60b9      	str	r1, [r7, #8]
   2fd6e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2fd70:	68fb      	ldr	r3, [r7, #12]
   2fd72:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2fd74:	2300      	movs	r3, #0
   2fd76:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2fd78:	2300      	movs	r3, #0
   2fd7a:	617b      	str	r3, [r7, #20]
	int len = 0;
   2fd7c:	2300      	movs	r3, #0
   2fd7e:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2fd80:	2301      	movs	r3, #1
   2fd82:	425b      	negs	r3, r3
   2fd84:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2fd86:	687b      	ldr	r3, [r7, #4]
   2fd88:	0018      	movs	r0, r3
   2fd8a:	4b8c      	ldr	r3, [pc, #560]	; (2ffbc <MQTTSerialize_connect+0x258>)
   2fd8c:	4798      	blx	r3
   2fd8e:	0003      	movs	r3, r0
   2fd90:	623b      	str	r3, [r7, #32]
   2fd92:	6a3b      	ldr	r3, [r7, #32]
   2fd94:	0018      	movs	r0, r3
   2fd96:	4b8a      	ldr	r3, [pc, #552]	; (2ffc0 <MQTTSerialize_connect+0x25c>)
   2fd98:	4798      	blx	r3
   2fd9a:	0002      	movs	r2, r0
   2fd9c:	68bb      	ldr	r3, [r7, #8]
   2fd9e:	429a      	cmp	r2, r3
   2fda0:	dd03      	ble.n	2fdaa <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2fda2:	2302      	movs	r3, #2
   2fda4:	425b      	negs	r3, r3
   2fda6:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2fda8:	e103      	b.n	2ffb2 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2fdaa:	2318      	movs	r3, #24
   2fdac:	18fb      	adds	r3, r7, r3
   2fdae:	2200      	movs	r2, #0
   2fdb0:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2fdb2:	2318      	movs	r3, #24
   2fdb4:	18fb      	adds	r3, r7, r3
   2fdb6:	781a      	ldrb	r2, [r3, #0]
   2fdb8:	210f      	movs	r1, #15
   2fdba:	400a      	ands	r2, r1
   2fdbc:	1c11      	adds	r1, r2, #0
   2fdbe:	2210      	movs	r2, #16
   2fdc0:	430a      	orrs	r2, r1
   2fdc2:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2fdc4:	2318      	movs	r3, #24
   2fdc6:	18fb      	adds	r3, r7, r3
   2fdc8:	781a      	ldrb	r2, [r3, #0]
   2fdca:	231c      	movs	r3, #28
   2fdcc:	18fb      	adds	r3, r7, r3
   2fdce:	0011      	movs	r1, r2
   2fdd0:	0018      	movs	r0, r3
   2fdd2:	4b7c      	ldr	r3, [pc, #496]	; (2ffc4 <MQTTSerialize_connect+0x260>)
   2fdd4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2fdd6:	69fb      	ldr	r3, [r7, #28]
   2fdd8:	6a3a      	ldr	r2, [r7, #32]
   2fdda:	0011      	movs	r1, r2
   2fddc:	0018      	movs	r0, r3
   2fdde:	4b7a      	ldr	r3, [pc, #488]	; (2ffc8 <MQTTSerialize_connect+0x264>)
   2fde0:	4798      	blx	r3
   2fde2:	0002      	movs	r2, r0
   2fde4:	69fb      	ldr	r3, [r7, #28]
   2fde6:	189b      	adds	r3, r3, r2
   2fde8:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2fdea:	687b      	ldr	r3, [r7, #4]
   2fdec:	7a1b      	ldrb	r3, [r3, #8]
   2fdee:	2b04      	cmp	r3, #4
   2fdf0:	d10d      	bne.n	2fe0e <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2fdf2:	4a76      	ldr	r2, [pc, #472]	; (2ffcc <MQTTSerialize_connect+0x268>)
   2fdf4:	231c      	movs	r3, #28
   2fdf6:	18fb      	adds	r3, r7, r3
   2fdf8:	0011      	movs	r1, r2
   2fdfa:	0018      	movs	r0, r3
   2fdfc:	4b74      	ldr	r3, [pc, #464]	; (2ffd0 <MQTTSerialize_connect+0x26c>)
   2fdfe:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2fe00:	231c      	movs	r3, #28
   2fe02:	18fb      	adds	r3, r7, r3
   2fe04:	2104      	movs	r1, #4
   2fe06:	0018      	movs	r0, r3
   2fe08:	4b6e      	ldr	r3, [pc, #440]	; (2ffc4 <MQTTSerialize_connect+0x260>)
   2fe0a:	4798      	blx	r3
   2fe0c:	e00c      	b.n	2fe28 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2fe0e:	4a71      	ldr	r2, [pc, #452]	; (2ffd4 <MQTTSerialize_connect+0x270>)
   2fe10:	231c      	movs	r3, #28
   2fe12:	18fb      	adds	r3, r7, r3
   2fe14:	0011      	movs	r1, r2
   2fe16:	0018      	movs	r0, r3
   2fe18:	4b6d      	ldr	r3, [pc, #436]	; (2ffd0 <MQTTSerialize_connect+0x26c>)
   2fe1a:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2fe1c:	231c      	movs	r3, #28
   2fe1e:	18fb      	adds	r3, r7, r3
   2fe20:	2103      	movs	r1, #3
   2fe22:	0018      	movs	r0, r3
   2fe24:	4b67      	ldr	r3, [pc, #412]	; (2ffc4 <MQTTSerialize_connect+0x260>)
   2fe26:	4798      	blx	r3
	}

	flags.all = 0;
   2fe28:	2314      	movs	r3, #20
   2fe2a:	18fb      	adds	r3, r7, r3
   2fe2c:	2200      	movs	r2, #0
   2fe2e:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2fe30:	687b      	ldr	r3, [r7, #4]
   2fe32:	7e9b      	ldrb	r3, [r3, #26]
   2fe34:	1c1a      	adds	r2, r3, #0
   2fe36:	2301      	movs	r3, #1
   2fe38:	4013      	ands	r3, r2
   2fe3a:	b2da      	uxtb	r2, r3
   2fe3c:	2314      	movs	r3, #20
   2fe3e:	18fb      	adds	r3, r7, r3
   2fe40:	2101      	movs	r1, #1
   2fe42:	400a      	ands	r2, r1
   2fe44:	1890      	adds	r0, r2, r2
   2fe46:	781a      	ldrb	r2, [r3, #0]
   2fe48:	2102      	movs	r1, #2
   2fe4a:	438a      	bics	r2, r1
   2fe4c:	1c11      	adds	r1, r2, #0
   2fe4e:	1c02      	adds	r2, r0, #0
   2fe50:	430a      	orrs	r2, r1
   2fe52:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2fe54:	687b      	ldr	r3, [r7, #4]
   2fe56:	7edb      	ldrb	r3, [r3, #27]
   2fe58:	1e5a      	subs	r2, r3, #1
   2fe5a:	4193      	sbcs	r3, r2
   2fe5c:	b2da      	uxtb	r2, r3
   2fe5e:	2314      	movs	r3, #20
   2fe60:	18fb      	adds	r3, r7, r3
   2fe62:	2101      	movs	r1, #1
   2fe64:	400a      	ands	r2, r1
   2fe66:	0090      	lsls	r0, r2, #2
   2fe68:	781a      	ldrb	r2, [r3, #0]
   2fe6a:	2104      	movs	r1, #4
   2fe6c:	438a      	bics	r2, r1
   2fe6e:	1c11      	adds	r1, r2, #0
   2fe70:	1c02      	adds	r2, r0, #0
   2fe72:	430a      	orrs	r2, r1
   2fe74:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2fe76:	2314      	movs	r3, #20
   2fe78:	18fb      	adds	r3, r7, r3
   2fe7a:	781b      	ldrb	r3, [r3, #0]
   2fe7c:	2204      	movs	r2, #4
   2fe7e:	4013      	ands	r3, r2
   2fe80:	b2db      	uxtb	r3, r3
   2fe82:	2b00      	cmp	r3, #0
   2fe84:	d025      	beq.n	2fed2 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2fe86:	687b      	ldr	r3, [r7, #4]
   2fe88:	223d      	movs	r2, #61	; 0x3d
   2fe8a:	5c9b      	ldrb	r3, [r3, r2]
   2fe8c:	1c1a      	adds	r2, r3, #0
   2fe8e:	2303      	movs	r3, #3
   2fe90:	4013      	ands	r3, r2
   2fe92:	b2da      	uxtb	r2, r3
   2fe94:	2314      	movs	r3, #20
   2fe96:	18fb      	adds	r3, r7, r3
   2fe98:	2103      	movs	r1, #3
   2fe9a:	400a      	ands	r2, r1
   2fe9c:	00d0      	lsls	r0, r2, #3
   2fe9e:	781a      	ldrb	r2, [r3, #0]
   2fea0:	2118      	movs	r1, #24
   2fea2:	438a      	bics	r2, r1
   2fea4:	1c11      	adds	r1, r2, #0
   2fea6:	1c02      	adds	r2, r0, #0
   2fea8:	430a      	orrs	r2, r1
   2feaa:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2feac:	687b      	ldr	r3, [r7, #4]
   2feae:	223c      	movs	r2, #60	; 0x3c
   2feb0:	5c9b      	ldrb	r3, [r3, r2]
   2feb2:	1c1a      	adds	r2, r3, #0
   2feb4:	2301      	movs	r3, #1
   2feb6:	4013      	ands	r3, r2
   2feb8:	b2da      	uxtb	r2, r3
   2feba:	2314      	movs	r3, #20
   2febc:	18fb      	adds	r3, r7, r3
   2febe:	2101      	movs	r1, #1
   2fec0:	400a      	ands	r2, r1
   2fec2:	0150      	lsls	r0, r2, #5
   2fec4:	781a      	ldrb	r2, [r3, #0]
   2fec6:	2120      	movs	r1, #32
   2fec8:	438a      	bics	r2, r1
   2feca:	1c11      	adds	r1, r2, #0
   2fecc:	1c02      	adds	r2, r0, #0
   2fece:	430a      	orrs	r2, r1
   2fed0:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2fed2:	687b      	ldr	r3, [r7, #4]
   2fed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2fed6:	2b00      	cmp	r3, #0
   2fed8:	d103      	bne.n	2fee2 <MQTTSerialize_connect+0x17e>
   2feda:	687b      	ldr	r3, [r7, #4]
   2fedc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2fede:	2b00      	cmp	r3, #0
   2fee0:	d006      	beq.n	2fef0 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2fee2:	2314      	movs	r3, #20
   2fee4:	18fb      	adds	r3, r7, r3
   2fee6:	781a      	ldrb	r2, [r3, #0]
   2fee8:	2180      	movs	r1, #128	; 0x80
   2feea:	4249      	negs	r1, r1
   2feec:	430a      	orrs	r2, r1
   2feee:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2fef0:	687b      	ldr	r3, [r7, #4]
   2fef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fef4:	2b00      	cmp	r3, #0
   2fef6:	d103      	bne.n	2ff00 <MQTTSerialize_connect+0x19c>
   2fef8:	687b      	ldr	r3, [r7, #4]
   2fefa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fefc:	2b00      	cmp	r3, #0
   2fefe:	d005      	beq.n	2ff0c <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2ff00:	2314      	movs	r3, #20
   2ff02:	18fb      	adds	r3, r7, r3
   2ff04:	781a      	ldrb	r2, [r3, #0]
   2ff06:	2140      	movs	r1, #64	; 0x40
   2ff08:	430a      	orrs	r2, r1
   2ff0a:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2ff0c:	2314      	movs	r3, #20
   2ff0e:	18fb      	adds	r3, r7, r3
   2ff10:	781a      	ldrb	r2, [r3, #0]
   2ff12:	231c      	movs	r3, #28
   2ff14:	18fb      	adds	r3, r7, r3
   2ff16:	0011      	movs	r1, r2
   2ff18:	0018      	movs	r0, r3
   2ff1a:	4b2a      	ldr	r3, [pc, #168]	; (2ffc4 <MQTTSerialize_connect+0x260>)
   2ff1c:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2ff1e:	687b      	ldr	r3, [r7, #4]
   2ff20:	8b1b      	ldrh	r3, [r3, #24]
   2ff22:	001a      	movs	r2, r3
   2ff24:	231c      	movs	r3, #28
   2ff26:	18fb      	adds	r3, r7, r3
   2ff28:	0011      	movs	r1, r2
   2ff2a:	0018      	movs	r0, r3
   2ff2c:	4b2a      	ldr	r3, [pc, #168]	; (2ffd8 <MQTTSerialize_connect+0x274>)
   2ff2e:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2ff30:	687b      	ldr	r3, [r7, #4]
   2ff32:	221c      	movs	r2, #28
   2ff34:	18b8      	adds	r0, r7, r2
   2ff36:	68d9      	ldr	r1, [r3, #12]
   2ff38:	691a      	ldr	r2, [r3, #16]
   2ff3a:	695b      	ldr	r3, [r3, #20]
   2ff3c:	4c27      	ldr	r4, [pc, #156]	; (2ffdc <MQTTSerialize_connect+0x278>)
   2ff3e:	47a0      	blx	r4
	if (options->willFlag)
   2ff40:	687b      	ldr	r3, [r7, #4]
   2ff42:	7edb      	ldrb	r3, [r3, #27]
   2ff44:	2b00      	cmp	r3, #0
   2ff46:	d00f      	beq.n	2ff68 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2ff48:	687b      	ldr	r3, [r7, #4]
   2ff4a:	221c      	movs	r2, #28
   2ff4c:	18b8      	adds	r0, r7, r2
   2ff4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2ff50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ff52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2ff54:	4c21      	ldr	r4, [pc, #132]	; (2ffdc <MQTTSerialize_connect+0x278>)
   2ff56:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2ff58:	687b      	ldr	r3, [r7, #4]
   2ff5a:	221c      	movs	r2, #28
   2ff5c:	18b8      	adds	r0, r7, r2
   2ff5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2ff60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2ff62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2ff64:	4c1d      	ldr	r4, [pc, #116]	; (2ffdc <MQTTSerialize_connect+0x278>)
   2ff66:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2ff68:	2314      	movs	r3, #20
   2ff6a:	18fb      	adds	r3, r7, r3
   2ff6c:	781b      	ldrb	r3, [r3, #0]
   2ff6e:	227f      	movs	r2, #127	; 0x7f
   2ff70:	4393      	bics	r3, r2
   2ff72:	b2db      	uxtb	r3, r3
   2ff74:	2b00      	cmp	r3, #0
   2ff76:	d007      	beq.n	2ff88 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2ff78:	687b      	ldr	r3, [r7, #4]
   2ff7a:	221c      	movs	r2, #28
   2ff7c:	18b8      	adds	r0, r7, r2
   2ff7e:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2ff80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2ff82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2ff84:	4c15      	ldr	r4, [pc, #84]	; (2ffdc <MQTTSerialize_connect+0x278>)
   2ff86:	47a0      	blx	r4
	if (flags.bits.password)
   2ff88:	2314      	movs	r3, #20
   2ff8a:	18fb      	adds	r3, r7, r3
   2ff8c:	781b      	ldrb	r3, [r3, #0]
   2ff8e:	2240      	movs	r2, #64	; 0x40
   2ff90:	4013      	ands	r3, r2
   2ff92:	b2db      	uxtb	r3, r3
   2ff94:	2b00      	cmp	r3, #0
   2ff96:	d007      	beq.n	2ffa8 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2ff98:	687b      	ldr	r3, [r7, #4]
   2ff9a:	221c      	movs	r2, #28
   2ff9c:	18b8      	adds	r0, r7, r2
   2ff9e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2ffa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2ffa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2ffa4:	4c0d      	ldr	r4, [pc, #52]	; (2ffdc <MQTTSerialize_connect+0x278>)
   2ffa6:	47a0      	blx	r4

	rc = ptr - buf;
   2ffa8:	69fb      	ldr	r3, [r7, #28]
   2ffaa:	001a      	movs	r2, r3
   2ffac:	68fb      	ldr	r3, [r7, #12]
   2ffae:	1ad3      	subs	r3, r2, r3
   2ffb0:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2ffb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2ffb4:	0018      	movs	r0, r3
   2ffb6:	46bd      	mov	sp, r7
   2ffb8:	b00b      	add	sp, #44	; 0x2c
   2ffba:	bd90      	pop	{r4, r7, pc}
   2ffbc:	0002fc9d 	.word	0x0002fc9d
   2ffc0:	00030431 	.word	0x00030431
   2ffc4:	00030553 	.word	0x00030553
   2ffc8:	00030339 	.word	0x00030339
   2ffcc:	00039d7c 	.word	0x00039d7c
   2ffd0:	000305d5 	.word	0x000305d5
   2ffd4:	00039d84 	.word	0x00039d84
   2ffd8:	0003057d 	.word	0x0003057d
   2ffdc:	00030625 	.word	0x00030625

0002ffe0 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2ffe0:	b580      	push	{r7, lr}
   2ffe2:	b08a      	sub	sp, #40	; 0x28
   2ffe4:	af00      	add	r7, sp, #0
   2ffe6:	60f8      	str	r0, [r7, #12]
   2ffe8:	60b9      	str	r1, [r7, #8]
   2ffea:	607a      	str	r2, [r7, #4]
   2ffec:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2ffee:	2300      	movs	r3, #0
   2fff0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2fff2:	687b      	ldr	r3, [r7, #4]
   2fff4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2fff6:	2300      	movs	r3, #0
   2fff8:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2fffa:	2300      	movs	r3, #0
   2fffc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2fffe:	2300      	movs	r3, #0
   30000:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30002:	2318      	movs	r3, #24
   30004:	18fb      	adds	r3, r7, r3
   30006:	0018      	movs	r0, r3
   30008:	4b25      	ldr	r3, [pc, #148]	; (300a0 <MQTTDeserialize_connack+0xc0>)
   3000a:	4798      	blx	r3
   3000c:	0003      	movs	r3, r0
   3000e:	001a      	movs	r2, r3
   30010:	231c      	movs	r3, #28
   30012:	18fb      	adds	r3, r7, r3
   30014:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   30016:	231c      	movs	r3, #28
   30018:	18fb      	adds	r3, r7, r3
   3001a:	781b      	ldrb	r3, [r3, #0]
   3001c:	220f      	movs	r2, #15
   3001e:	4393      	bics	r3, r2
   30020:	b2db      	uxtb	r3, r3
   30022:	2b20      	cmp	r3, #32
   30024:	d134      	bne.n	30090 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30026:	69bb      	ldr	r3, [r7, #24]
   30028:	2214      	movs	r2, #20
   3002a:	18ba      	adds	r2, r7, r2
   3002c:	0011      	movs	r1, r2
   3002e:	0018      	movs	r0, r3
   30030:	4b1c      	ldr	r3, [pc, #112]	; (300a4 <MQTTDeserialize_connack+0xc4>)
   30032:	4798      	blx	r3
   30034:	0003      	movs	r3, r0
   30036:	627b      	str	r3, [r7, #36]	; 0x24
   30038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3003a:	69bb      	ldr	r3, [r7, #24]
   3003c:	189b      	adds	r3, r3, r2
   3003e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30040:	69bb      	ldr	r3, [r7, #24]
   30042:	697a      	ldr	r2, [r7, #20]
   30044:	189b      	adds	r3, r3, r2
   30046:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30048:	6a3b      	ldr	r3, [r7, #32]
   3004a:	69ba      	ldr	r2, [r7, #24]
   3004c:	1a9b      	subs	r3, r3, r2
   3004e:	2b01      	cmp	r3, #1
   30050:	dd20      	ble.n	30094 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   30052:	2318      	movs	r3, #24
   30054:	18fb      	adds	r3, r7, r3
   30056:	0018      	movs	r0, r3
   30058:	4b11      	ldr	r3, [pc, #68]	; (300a0 <MQTTDeserialize_connack+0xc0>)
   3005a:	4798      	blx	r3
   3005c:	0003      	movs	r3, r0
   3005e:	001a      	movs	r2, r3
   30060:	2310      	movs	r3, #16
   30062:	18fb      	adds	r3, r7, r3
   30064:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   30066:	2310      	movs	r3, #16
   30068:	18fb      	adds	r3, r7, r3
   3006a:	781b      	ldrb	r3, [r3, #0]
   3006c:	061b      	lsls	r3, r3, #24
   3006e:	0fdb      	lsrs	r3, r3, #31
   30070:	b2db      	uxtb	r3, r3
   30072:	001a      	movs	r2, r3
   30074:	68fb      	ldr	r3, [r7, #12]
   30076:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   30078:	2318      	movs	r3, #24
   3007a:	18fb      	adds	r3, r7, r3
   3007c:	0018      	movs	r0, r3
   3007e:	4b08      	ldr	r3, [pc, #32]	; (300a0 <MQTTDeserialize_connack+0xc0>)
   30080:	4798      	blx	r3
   30082:	0003      	movs	r3, r0
   30084:	001a      	movs	r2, r3
   30086:	68bb      	ldr	r3, [r7, #8]
   30088:	701a      	strb	r2, [r3, #0]

	rc = 1;
   3008a:	2301      	movs	r3, #1
   3008c:	627b      	str	r3, [r7, #36]	; 0x24
   3008e:	e002      	b.n	30096 <MQTTDeserialize_connack+0xb6>
		goto exit;
   30090:	46c0      	nop			; (mov r8, r8)
   30092:	e000      	b.n	30096 <MQTTDeserialize_connack+0xb6>
		goto exit;
   30094:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30098:	0018      	movs	r0, r3
   3009a:	46bd      	mov	sp, r7
   3009c:	b00a      	add	sp, #40	; 0x28
   3009e:	bd80      	pop	{r7, pc}
   300a0:	00030527 	.word	0x00030527
   300a4:	000304c1 	.word	0x000304c1

000300a8 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   300a8:	b580      	push	{r7, lr}
   300aa:	b088      	sub	sp, #32
   300ac:	af00      	add	r7, sp, #0
   300ae:	60f8      	str	r0, [r7, #12]
   300b0:	60b9      	str	r1, [r7, #8]
   300b2:	1dfb      	adds	r3, r7, #7
   300b4:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   300b6:	2300      	movs	r3, #0
   300b8:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   300ba:	2301      	movs	r3, #1
   300bc:	425b      	negs	r3, r3
   300be:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   300c0:	68fb      	ldr	r3, [r7, #12]
   300c2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   300c4:	68bb      	ldr	r3, [r7, #8]
   300c6:	2b01      	cmp	r3, #1
   300c8:	dc03      	bgt.n	300d2 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   300ca:	2302      	movs	r3, #2
   300cc:	425b      	negs	r3, r3
   300ce:	61fb      	str	r3, [r7, #28]
		goto exit;
   300d0:	e029      	b.n	30126 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   300d2:	2318      	movs	r3, #24
   300d4:	18fb      	adds	r3, r7, r3
   300d6:	2200      	movs	r2, #0
   300d8:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   300da:	1dfb      	adds	r3, r7, #7
   300dc:	781b      	ldrb	r3, [r3, #0]
   300de:	220f      	movs	r2, #15
   300e0:	4013      	ands	r3, r2
   300e2:	b2da      	uxtb	r2, r3
   300e4:	2318      	movs	r3, #24
   300e6:	18fb      	adds	r3, r7, r3
   300e8:	0110      	lsls	r0, r2, #4
   300ea:	781a      	ldrb	r2, [r3, #0]
   300ec:	210f      	movs	r1, #15
   300ee:	400a      	ands	r2, r1
   300f0:	1c11      	adds	r1, r2, #0
   300f2:	1c02      	adds	r2, r0, #0
   300f4:	430a      	orrs	r2, r1
   300f6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   300f8:	2318      	movs	r3, #24
   300fa:	18fb      	adds	r3, r7, r3
   300fc:	781a      	ldrb	r2, [r3, #0]
   300fe:	2314      	movs	r3, #20
   30100:	18fb      	adds	r3, r7, r3
   30102:	0011      	movs	r1, r2
   30104:	0018      	movs	r0, r3
   30106:	4b0a      	ldr	r3, [pc, #40]	; (30130 <MQTTSerialize_zero+0x88>)
   30108:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   3010a:	697b      	ldr	r3, [r7, #20]
   3010c:	2100      	movs	r1, #0
   3010e:	0018      	movs	r0, r3
   30110:	4b08      	ldr	r3, [pc, #32]	; (30134 <MQTTSerialize_zero+0x8c>)
   30112:	4798      	blx	r3
   30114:	0002      	movs	r2, r0
   30116:	697b      	ldr	r3, [r7, #20]
   30118:	189b      	adds	r3, r3, r2
   3011a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   3011c:	697b      	ldr	r3, [r7, #20]
   3011e:	001a      	movs	r2, r3
   30120:	68fb      	ldr	r3, [r7, #12]
   30122:	1ad3      	subs	r3, r2, r3
   30124:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30126:	69fb      	ldr	r3, [r7, #28]
}
   30128:	0018      	movs	r0, r3
   3012a:	46bd      	mov	sp, r7
   3012c:	b008      	add	sp, #32
   3012e:	bd80      	pop	{r7, pc}
   30130:	00030553 	.word	0x00030553
   30134:	00030339 	.word	0x00030339

00030138 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30138:	b580      	push	{r7, lr}
   3013a:	b082      	sub	sp, #8
   3013c:	af00      	add	r7, sp, #0
   3013e:	6078      	str	r0, [r7, #4]
   30140:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   30142:	6839      	ldr	r1, [r7, #0]
   30144:	687b      	ldr	r3, [r7, #4]
   30146:	220e      	movs	r2, #14
   30148:	0018      	movs	r0, r3
   3014a:	4b03      	ldr	r3, [pc, #12]	; (30158 <MQTTSerialize_disconnect+0x20>)
   3014c:	4798      	blx	r3
   3014e:	0003      	movs	r3, r0
}
   30150:	0018      	movs	r0, r3
   30152:	46bd      	mov	sp, r7
   30154:	b002      	add	sp, #8
   30156:	bd80      	pop	{r7, pc}
   30158:	000300a9 	.word	0x000300a9

0003015c <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   3015c:	b580      	push	{r7, lr}
   3015e:	b082      	sub	sp, #8
   30160:	af00      	add	r7, sp, #0
   30162:	6078      	str	r0, [r7, #4]
   30164:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   30166:	6839      	ldr	r1, [r7, #0]
   30168:	687b      	ldr	r3, [r7, #4]
   3016a:	220c      	movs	r2, #12
   3016c:	0018      	movs	r0, r3
   3016e:	4b03      	ldr	r3, [pc, #12]	; (3017c <MQTTSerialize_pingreq+0x20>)
   30170:	4798      	blx	r3
   30172:	0003      	movs	r3, r0
}
   30174:	0018      	movs	r0, r3
   30176:	46bd      	mov	sp, r7
   30178:	b002      	add	sp, #8
   3017a:	bd80      	pop	{r7, pc}
   3017c:	000300a9 	.word	0x000300a9

00030180 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   30180:	b580      	push	{r7, lr}
   30182:	b08a      	sub	sp, #40	; 0x28
   30184:	af00      	add	r7, sp, #0
   30186:	60f8      	str	r0, [r7, #12]
   30188:	60b9      	str	r1, [r7, #8]
   3018a:	607a      	str	r2, [r7, #4]
   3018c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   3018e:	2300      	movs	r3, #0
   30190:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30194:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30196:	2300      	movs	r3, #0
   30198:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3019a:	2300      	movs	r3, #0
   3019c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   3019e:	2300      	movs	r3, #0
   301a0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   301a2:	2318      	movs	r3, #24
   301a4:	18fb      	adds	r3, r7, r3
   301a6:	0018      	movs	r0, r3
   301a8:	4b32      	ldr	r3, [pc, #200]	; (30274 <MQTTDeserialize_publish+0xf4>)
   301aa:	4798      	blx	r3
   301ac:	0003      	movs	r3, r0
   301ae:	001a      	movs	r2, r3
   301b0:	231c      	movs	r3, #28
   301b2:	18fb      	adds	r3, r7, r3
   301b4:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   301b6:	231c      	movs	r3, #28
   301b8:	18fb      	adds	r3, r7, r3
   301ba:	781b      	ldrb	r3, [r3, #0]
   301bc:	220f      	movs	r2, #15
   301be:	4393      	bics	r3, r2
   301c0:	b2db      	uxtb	r3, r3
   301c2:	2b30      	cmp	r3, #48	; 0x30
   301c4:	d150      	bne.n	30268 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   301c6:	231c      	movs	r3, #28
   301c8:	18fb      	adds	r3, r7, r3
   301ca:	781b      	ldrb	r3, [r3, #0]
   301cc:	071b      	lsls	r3, r3, #28
   301ce:	0fdb      	lsrs	r3, r3, #31
   301d0:	b2db      	uxtb	r3, r3
   301d2:	001a      	movs	r2, r3
   301d4:	68fb      	ldr	r3, [r7, #12]
   301d6:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   301d8:	231c      	movs	r3, #28
   301da:	18fb      	adds	r3, r7, r3
   301dc:	781b      	ldrb	r3, [r3, #0]
   301de:	075b      	lsls	r3, r3, #29
   301e0:	0f9b      	lsrs	r3, r3, #30
   301e2:	b2db      	uxtb	r3, r3
   301e4:	001a      	movs	r2, r3
   301e6:	68bb      	ldr	r3, [r7, #8]
   301e8:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   301ea:	231c      	movs	r3, #28
   301ec:	18fb      	adds	r3, r7, r3
   301ee:	781b      	ldrb	r3, [r3, #0]
   301f0:	07db      	lsls	r3, r3, #31
   301f2:	0fdb      	lsrs	r3, r3, #31
   301f4:	b2db      	uxtb	r3, r3
   301f6:	001a      	movs	r2, r3
   301f8:	687b      	ldr	r3, [r7, #4]
   301fa:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   301fc:	69bb      	ldr	r3, [r7, #24]
   301fe:	2214      	movs	r2, #20
   30200:	18ba      	adds	r2, r7, r2
   30202:	0011      	movs	r1, r2
   30204:	0018      	movs	r0, r3
   30206:	4b1c      	ldr	r3, [pc, #112]	; (30278 <MQTTDeserialize_publish+0xf8>)
   30208:	4798      	blx	r3
   3020a:	0003      	movs	r3, r0
   3020c:	627b      	str	r3, [r7, #36]	; 0x24
   3020e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30210:	69bb      	ldr	r3, [r7, #24]
   30212:	189b      	adds	r3, r3, r2
   30214:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30216:	69bb      	ldr	r3, [r7, #24]
   30218:	697a      	ldr	r2, [r7, #20]
   3021a:	189b      	adds	r3, r3, r2
   3021c:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   3021e:	6a3a      	ldr	r2, [r7, #32]
   30220:	2318      	movs	r3, #24
   30222:	18f9      	adds	r1, r7, r3
   30224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30226:	0018      	movs	r0, r3
   30228:	4b14      	ldr	r3, [pc, #80]	; (3027c <MQTTDeserialize_publish+0xfc>)
   3022a:	4798      	blx	r3
   3022c:	1e03      	subs	r3, r0, #0
   3022e:	d01c      	beq.n	3026a <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   30230:	6a3b      	ldr	r3, [r7, #32]
   30232:	69ba      	ldr	r2, [r7, #24]
   30234:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30236:	d418      	bmi.n	3026a <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   30238:	68bb      	ldr	r3, [r7, #8]
   3023a:	681b      	ldr	r3, [r3, #0]
   3023c:	2b00      	cmp	r3, #0
   3023e:	dd08      	ble.n	30252 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   30240:	2318      	movs	r3, #24
   30242:	18fb      	adds	r3, r7, r3
   30244:	0018      	movs	r0, r3
   30246:	4b0e      	ldr	r3, [pc, #56]	; (30280 <MQTTDeserialize_publish+0x100>)
   30248:	4798      	blx	r3
   3024a:	0003      	movs	r3, r0
   3024c:	b29a      	uxth	r2, r3
   3024e:	683b      	ldr	r3, [r7, #0]
   30250:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   30252:	6a3b      	ldr	r3, [r7, #32]
   30254:	69ba      	ldr	r2, [r7, #24]
   30256:	1a9a      	subs	r2, r3, r2
   30258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   3025a:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   3025c:	69ba      	ldr	r2, [r7, #24]
   3025e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30260:	601a      	str	r2, [r3, #0]
	rc = 1;
   30262:	2301      	movs	r3, #1
   30264:	627b      	str	r3, [r7, #36]	; 0x24
   30266:	e000      	b.n	3026a <MQTTDeserialize_publish+0xea>
		goto exit;
   30268:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   3026c:	0018      	movs	r0, r3
   3026e:	46bd      	mov	sp, r7
   30270:	b00a      	add	sp, #40	; 0x28
   30272:	bd80      	pop	{r7, pc}
   30274:	00030527 	.word	0x00030527
   30278:	000304c1 	.word	0x000304c1
   3027c:	000306a5 	.word	0x000306a5
   30280:	000304f5 	.word	0x000304f5

00030284 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   30284:	b580      	push	{r7, lr}
   30286:	b08a      	sub	sp, #40	; 0x28
   30288:	af00      	add	r7, sp, #0
   3028a:	60f8      	str	r0, [r7, #12]
   3028c:	60b9      	str	r1, [r7, #8]
   3028e:	607a      	str	r2, [r7, #4]
   30290:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30292:	2300      	movs	r3, #0
   30294:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30296:	683b      	ldr	r3, [r7, #0]
   30298:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3029a:	2300      	movs	r3, #0
   3029c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3029e:	2300      	movs	r3, #0
   302a0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   302a2:	2318      	movs	r3, #24
   302a4:	18fb      	adds	r3, r7, r3
   302a6:	0018      	movs	r0, r3
   302a8:	4b20      	ldr	r3, [pc, #128]	; (3032c <MQTTDeserialize_ack+0xa8>)
   302aa:	4798      	blx	r3
   302ac:	0003      	movs	r3, r0
   302ae:	001a      	movs	r2, r3
   302b0:	231c      	movs	r3, #28
   302b2:	18fb      	adds	r3, r7, r3
   302b4:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   302b6:	231c      	movs	r3, #28
   302b8:	18fb      	adds	r3, r7, r3
   302ba:	781b      	ldrb	r3, [r3, #0]
   302bc:	071b      	lsls	r3, r3, #28
   302be:	0fdb      	lsrs	r3, r3, #31
   302c0:	b2db      	uxtb	r3, r3
   302c2:	001a      	movs	r2, r3
   302c4:	68bb      	ldr	r3, [r7, #8]
   302c6:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   302c8:	231c      	movs	r3, #28
   302ca:	18fb      	adds	r3, r7, r3
   302cc:	781b      	ldrb	r3, [r3, #0]
   302ce:	061b      	lsls	r3, r3, #24
   302d0:	0f1b      	lsrs	r3, r3, #28
   302d2:	b2db      	uxtb	r3, r3
   302d4:	001a      	movs	r2, r3
   302d6:	68fb      	ldr	r3, [r7, #12]
   302d8:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   302da:	69bb      	ldr	r3, [r7, #24]
   302dc:	2214      	movs	r2, #20
   302de:	18ba      	adds	r2, r7, r2
   302e0:	0011      	movs	r1, r2
   302e2:	0018      	movs	r0, r3
   302e4:	4b12      	ldr	r3, [pc, #72]	; (30330 <MQTTDeserialize_ack+0xac>)
   302e6:	4798      	blx	r3
   302e8:	0003      	movs	r3, r0
   302ea:	627b      	str	r3, [r7, #36]	; 0x24
   302ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   302ee:	69bb      	ldr	r3, [r7, #24]
   302f0:	189b      	adds	r3, r3, r2
   302f2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   302f4:	69bb      	ldr	r3, [r7, #24]
   302f6:	697a      	ldr	r2, [r7, #20]
   302f8:	189b      	adds	r3, r3, r2
   302fa:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   302fc:	6a3b      	ldr	r3, [r7, #32]
   302fe:	69ba      	ldr	r2, [r7, #24]
   30300:	1a9b      	subs	r3, r3, r2
   30302:	2b01      	cmp	r3, #1
   30304:	dd0b      	ble.n	3031e <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   30306:	2318      	movs	r3, #24
   30308:	18fb      	adds	r3, r7, r3
   3030a:	0018      	movs	r0, r3
   3030c:	4b09      	ldr	r3, [pc, #36]	; (30334 <MQTTDeserialize_ack+0xb0>)
   3030e:	4798      	blx	r3
   30310:	0003      	movs	r3, r0
   30312:	b29a      	uxth	r2, r3
   30314:	687b      	ldr	r3, [r7, #4]
   30316:	801a      	strh	r2, [r3, #0]

	rc = 1;
   30318:	2301      	movs	r3, #1
   3031a:	627b      	str	r3, [r7, #36]	; 0x24
   3031c:	e000      	b.n	30320 <MQTTDeserialize_ack+0x9c>
		goto exit;
   3031e:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30322:	0018      	movs	r0, r3
   30324:	46bd      	mov	sp, r7
   30326:	b00a      	add	sp, #40	; 0x28
   30328:	bd80      	pop	{r7, pc}
   3032a:	46c0      	nop			; (mov r8, r8)
   3032c:	00030527 	.word	0x00030527
   30330:	000304c1 	.word	0x000304c1
   30334:	000304f5 	.word	0x000304f5

00030338 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   30338:	b580      	push	{r7, lr}
   3033a:	b084      	sub	sp, #16
   3033c:	af00      	add	r7, sp, #0
   3033e:	6078      	str	r0, [r7, #4]
   30340:	6039      	str	r1, [r7, #0]
	int rc = 0;
   30342:	2300      	movs	r3, #0
   30344:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   30346:	683b      	ldr	r3, [r7, #0]
   30348:	4a17      	ldr	r2, [pc, #92]	; (303a8 <MQTTPacket_encode+0x70>)
   3034a:	4013      	ands	r3, r2
   3034c:	d504      	bpl.n	30358 <MQTTPacket_encode+0x20>
   3034e:	3b01      	subs	r3, #1
   30350:	2280      	movs	r2, #128	; 0x80
   30352:	4252      	negs	r2, r2
   30354:	4313      	orrs	r3, r2
   30356:	3301      	adds	r3, #1
   30358:	001a      	movs	r2, r3
   3035a:	230b      	movs	r3, #11
   3035c:	18fb      	adds	r3, r7, r3
   3035e:	701a      	strb	r2, [r3, #0]
		length /= 128;
   30360:	683b      	ldr	r3, [r7, #0]
   30362:	2b00      	cmp	r3, #0
   30364:	da00      	bge.n	30368 <MQTTPacket_encode+0x30>
   30366:	337f      	adds	r3, #127	; 0x7f
   30368:	11db      	asrs	r3, r3, #7
   3036a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   3036c:	683b      	ldr	r3, [r7, #0]
   3036e:	2b00      	cmp	r3, #0
   30370:	dd08      	ble.n	30384 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   30372:	230b      	movs	r3, #11
   30374:	18fb      	adds	r3, r7, r3
   30376:	220b      	movs	r2, #11
   30378:	18ba      	adds	r2, r7, r2
   3037a:	7812      	ldrb	r2, [r2, #0]
   3037c:	2180      	movs	r1, #128	; 0x80
   3037e:	4249      	negs	r1, r1
   30380:	430a      	orrs	r2, r1
   30382:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   30384:	68fb      	ldr	r3, [r7, #12]
   30386:	1c5a      	adds	r2, r3, #1
   30388:	60fa      	str	r2, [r7, #12]
   3038a:	001a      	movs	r2, r3
   3038c:	687b      	ldr	r3, [r7, #4]
   3038e:	189b      	adds	r3, r3, r2
   30390:	220b      	movs	r2, #11
   30392:	18ba      	adds	r2, r7, r2
   30394:	7812      	ldrb	r2, [r2, #0]
   30396:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   30398:	683b      	ldr	r3, [r7, #0]
   3039a:	2b00      	cmp	r3, #0
   3039c:	dcd3      	bgt.n	30346 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   3039e:	68fb      	ldr	r3, [r7, #12]
}
   303a0:	0018      	movs	r0, r3
   303a2:	46bd      	mov	sp, r7
   303a4:	b004      	add	sp, #16
   303a6:	bd80      	pop	{r7, pc}
   303a8:	8000007f 	.word	0x8000007f

000303ac <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   303ac:	b580      	push	{r7, lr}
   303ae:	b086      	sub	sp, #24
   303b0:	af00      	add	r7, sp, #0
   303b2:	6078      	str	r0, [r7, #4]
   303b4:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   303b6:	2301      	movs	r3, #1
   303b8:	617b      	str	r3, [r7, #20]
	int len = 0;
   303ba:	2300      	movs	r3, #0
   303bc:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   303be:	683b      	ldr	r3, [r7, #0]
   303c0:	2200      	movs	r2, #0
   303c2:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   303c4:	2301      	movs	r3, #1
   303c6:	425b      	negs	r3, r3
   303c8:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   303ca:	693b      	ldr	r3, [r7, #16]
   303cc:	3301      	adds	r3, #1
   303ce:	613b      	str	r3, [r7, #16]
   303d0:	693b      	ldr	r3, [r7, #16]
   303d2:	2b04      	cmp	r3, #4
   303d4:	dd03      	ble.n	303de <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   303d6:	2301      	movs	r3, #1
   303d8:	425b      	negs	r3, r3
   303da:	60fb      	str	r3, [r7, #12]
			goto exit;
   303dc:	e022      	b.n	30424 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   303de:	230b      	movs	r3, #11
   303e0:	18fa      	adds	r2, r7, r3
   303e2:	687b      	ldr	r3, [r7, #4]
   303e4:	2101      	movs	r1, #1
   303e6:	0010      	movs	r0, r2
   303e8:	4798      	blx	r3
   303ea:	0003      	movs	r3, r0
   303ec:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   303ee:	68fb      	ldr	r3, [r7, #12]
   303f0:	2b01      	cmp	r3, #1
   303f2:	d116      	bne.n	30422 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   303f4:	683b      	ldr	r3, [r7, #0]
   303f6:	681a      	ldr	r2, [r3, #0]
   303f8:	230b      	movs	r3, #11
   303fa:	18fb      	adds	r3, r7, r3
   303fc:	781b      	ldrb	r3, [r3, #0]
   303fe:	0019      	movs	r1, r3
   30400:	237f      	movs	r3, #127	; 0x7f
   30402:	400b      	ands	r3, r1
   30404:	6979      	ldr	r1, [r7, #20]
   30406:	434b      	muls	r3, r1
   30408:	18d2      	adds	r2, r2, r3
   3040a:	683b      	ldr	r3, [r7, #0]
   3040c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   3040e:	697b      	ldr	r3, [r7, #20]
   30410:	01db      	lsls	r3, r3, #7
   30412:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30414:	230b      	movs	r3, #11
   30416:	18fb      	adds	r3, r7, r3
   30418:	781b      	ldrb	r3, [r3, #0]
   3041a:	b25b      	sxtb	r3, r3
   3041c:	2b00      	cmp	r3, #0
   3041e:	dbd1      	blt.n	303c4 <MQTTPacket_decode+0x18>
   30420:	e000      	b.n	30424 <MQTTPacket_decode+0x78>
			goto exit;
   30422:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30424:	693b      	ldr	r3, [r7, #16]
}
   30426:	0018      	movs	r0, r3
   30428:	46bd      	mov	sp, r7
   3042a:	b006      	add	sp, #24
   3042c:	bd80      	pop	{r7, pc}
	...

00030430 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   30430:	b580      	push	{r7, lr}
   30432:	b082      	sub	sp, #8
   30434:	af00      	add	r7, sp, #0
   30436:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30438:	687b      	ldr	r3, [r7, #4]
   3043a:	3301      	adds	r3, #1
   3043c:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   3043e:	687b      	ldr	r3, [r7, #4]
   30440:	2b7f      	cmp	r3, #127	; 0x7f
   30442:	dc03      	bgt.n	3044c <MQTTPacket_len+0x1c>
		rem_len += 1;
   30444:	687b      	ldr	r3, [r7, #4]
   30446:	3301      	adds	r3, #1
   30448:	607b      	str	r3, [r7, #4]
   3044a:	e012      	b.n	30472 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   3044c:	687b      	ldr	r3, [r7, #4]
   3044e:	4a0b      	ldr	r2, [pc, #44]	; (3047c <MQTTPacket_len+0x4c>)
   30450:	4293      	cmp	r3, r2
   30452:	dc03      	bgt.n	3045c <MQTTPacket_len+0x2c>
		rem_len += 2;
   30454:	687b      	ldr	r3, [r7, #4]
   30456:	3302      	adds	r3, #2
   30458:	607b      	str	r3, [r7, #4]
   3045a:	e00a      	b.n	30472 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   3045c:	687b      	ldr	r3, [r7, #4]
   3045e:	4a08      	ldr	r2, [pc, #32]	; (30480 <MQTTPacket_len+0x50>)
   30460:	4293      	cmp	r3, r2
   30462:	dc03      	bgt.n	3046c <MQTTPacket_len+0x3c>
		rem_len += 3;
   30464:	687b      	ldr	r3, [r7, #4]
   30466:	3303      	adds	r3, #3
   30468:	607b      	str	r3, [r7, #4]
   3046a:	e002      	b.n	30472 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   3046c:	687b      	ldr	r3, [r7, #4]
   3046e:	3304      	adds	r3, #4
   30470:	607b      	str	r3, [r7, #4]
	return rem_len;
   30472:	687b      	ldr	r3, [r7, #4]
}
   30474:	0018      	movs	r0, r3
   30476:	46bd      	mov	sp, r7
   30478:	b002      	add	sp, #8
   3047a:	bd80      	pop	{r7, pc}
   3047c:	00003fff 	.word	0x00003fff
   30480:	001ffffe 	.word	0x001ffffe

00030484 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   30484:	b580      	push	{r7, lr}
   30486:	b084      	sub	sp, #16
   30488:	af00      	add	r7, sp, #0
   3048a:	6078      	str	r0, [r7, #4]
   3048c:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   3048e:	2300      	movs	r3, #0
   30490:	60fb      	str	r3, [r7, #12]
   30492:	e00a      	b.n	304aa <bufchar+0x26>
		*c = *bufptr++;
   30494:	4b09      	ldr	r3, [pc, #36]	; (304bc <bufchar+0x38>)
   30496:	681b      	ldr	r3, [r3, #0]
   30498:	1c59      	adds	r1, r3, #1
   3049a:	4a08      	ldr	r2, [pc, #32]	; (304bc <bufchar+0x38>)
   3049c:	6011      	str	r1, [r2, #0]
   3049e:	781a      	ldrb	r2, [r3, #0]
   304a0:	687b      	ldr	r3, [r7, #4]
   304a2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   304a4:	68fb      	ldr	r3, [r7, #12]
   304a6:	3301      	adds	r3, #1
   304a8:	60fb      	str	r3, [r7, #12]
   304aa:	68fa      	ldr	r2, [r7, #12]
   304ac:	683b      	ldr	r3, [r7, #0]
   304ae:	429a      	cmp	r2, r3
   304b0:	dbf0      	blt.n	30494 <bufchar+0x10>
	return count;
   304b2:	683b      	ldr	r3, [r7, #0]
}
   304b4:	0018      	movs	r0, r3
   304b6:	46bd      	mov	sp, r7
   304b8:	b004      	add	sp, #16
   304ba:	bd80      	pop	{r7, pc}
   304bc:	200042e0 	.word	0x200042e0

000304c0 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   304c0:	b580      	push	{r7, lr}
   304c2:	b082      	sub	sp, #8
   304c4:	af00      	add	r7, sp, #0
   304c6:	6078      	str	r0, [r7, #4]
   304c8:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   304ca:	4b07      	ldr	r3, [pc, #28]	; (304e8 <MQTTPacket_decodeBuf+0x28>)
   304cc:	687a      	ldr	r2, [r7, #4]
   304ce:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   304d0:	683a      	ldr	r2, [r7, #0]
   304d2:	4b06      	ldr	r3, [pc, #24]	; (304ec <MQTTPacket_decodeBuf+0x2c>)
   304d4:	0011      	movs	r1, r2
   304d6:	0018      	movs	r0, r3
   304d8:	4b05      	ldr	r3, [pc, #20]	; (304f0 <MQTTPacket_decodeBuf+0x30>)
   304da:	4798      	blx	r3
   304dc:	0003      	movs	r3, r0
}
   304de:	0018      	movs	r0, r3
   304e0:	46bd      	mov	sp, r7
   304e2:	b002      	add	sp, #8
   304e4:	bd80      	pop	{r7, pc}
   304e6:	46c0      	nop			; (mov r8, r8)
   304e8:	200042e0 	.word	0x200042e0
   304ec:	00030485 	.word	0x00030485
   304f0:	000303ad 	.word	0x000303ad

000304f4 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   304f4:	b580      	push	{r7, lr}
   304f6:	b084      	sub	sp, #16
   304f8:	af00      	add	r7, sp, #0
   304fa:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   304fc:	687b      	ldr	r3, [r7, #4]
   304fe:	681b      	ldr	r3, [r3, #0]
   30500:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   30502:	68fb      	ldr	r3, [r7, #12]
   30504:	781b      	ldrb	r3, [r3, #0]
   30506:	021b      	lsls	r3, r3, #8
   30508:	68fa      	ldr	r2, [r7, #12]
   3050a:	3201      	adds	r2, #1
   3050c:	7812      	ldrb	r2, [r2, #0]
   3050e:	189b      	adds	r3, r3, r2
   30510:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   30512:	687b      	ldr	r3, [r7, #4]
   30514:	681b      	ldr	r3, [r3, #0]
   30516:	1c9a      	adds	r2, r3, #2
   30518:	687b      	ldr	r3, [r7, #4]
   3051a:	601a      	str	r2, [r3, #0]
	return len;
   3051c:	68bb      	ldr	r3, [r7, #8]
}
   3051e:	0018      	movs	r0, r3
   30520:	46bd      	mov	sp, r7
   30522:	b004      	add	sp, #16
   30524:	bd80      	pop	{r7, pc}

00030526 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   30526:	b580      	push	{r7, lr}
   30528:	b084      	sub	sp, #16
   3052a:	af00      	add	r7, sp, #0
   3052c:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   3052e:	687b      	ldr	r3, [r7, #4]
   30530:	681a      	ldr	r2, [r3, #0]
   30532:	230f      	movs	r3, #15
   30534:	18fb      	adds	r3, r7, r3
   30536:	7812      	ldrb	r2, [r2, #0]
   30538:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   3053a:	687b      	ldr	r3, [r7, #4]
   3053c:	681b      	ldr	r3, [r3, #0]
   3053e:	1c5a      	adds	r2, r3, #1
   30540:	687b      	ldr	r3, [r7, #4]
   30542:	601a      	str	r2, [r3, #0]
	return c;
   30544:	230f      	movs	r3, #15
   30546:	18fb      	adds	r3, r7, r3
   30548:	781b      	ldrb	r3, [r3, #0]
}
   3054a:	0018      	movs	r0, r3
   3054c:	46bd      	mov	sp, r7
   3054e:	b004      	add	sp, #16
   30550:	bd80      	pop	{r7, pc}

00030552 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   30552:	b580      	push	{r7, lr}
   30554:	b082      	sub	sp, #8
   30556:	af00      	add	r7, sp, #0
   30558:	6078      	str	r0, [r7, #4]
   3055a:	000a      	movs	r2, r1
   3055c:	1cfb      	adds	r3, r7, #3
   3055e:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   30560:	687b      	ldr	r3, [r7, #4]
   30562:	681b      	ldr	r3, [r3, #0]
   30564:	1cfa      	adds	r2, r7, #3
   30566:	7812      	ldrb	r2, [r2, #0]
   30568:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   3056a:	687b      	ldr	r3, [r7, #4]
   3056c:	681b      	ldr	r3, [r3, #0]
   3056e:	1c5a      	adds	r2, r3, #1
   30570:	687b      	ldr	r3, [r7, #4]
   30572:	601a      	str	r2, [r3, #0]
}
   30574:	46c0      	nop			; (mov r8, r8)
   30576:	46bd      	mov	sp, r7
   30578:	b002      	add	sp, #8
   3057a:	bd80      	pop	{r7, pc}

0003057c <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   3057c:	b580      	push	{r7, lr}
   3057e:	b082      	sub	sp, #8
   30580:	af00      	add	r7, sp, #0
   30582:	6078      	str	r0, [r7, #4]
   30584:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   30586:	687b      	ldr	r3, [r7, #4]
   30588:	681a      	ldr	r2, [r3, #0]
   3058a:	683b      	ldr	r3, [r7, #0]
   3058c:	2b00      	cmp	r3, #0
   3058e:	da00      	bge.n	30592 <writeInt+0x16>
   30590:	33ff      	adds	r3, #255	; 0xff
   30592:	121b      	asrs	r3, r3, #8
   30594:	b2db      	uxtb	r3, r3
   30596:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30598:	687b      	ldr	r3, [r7, #4]
   3059a:	681b      	ldr	r3, [r3, #0]
   3059c:	1c5a      	adds	r2, r3, #1
   3059e:	687b      	ldr	r3, [r7, #4]
   305a0:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   305a2:	687b      	ldr	r3, [r7, #4]
   305a4:	681a      	ldr	r2, [r3, #0]
   305a6:	683b      	ldr	r3, [r7, #0]
   305a8:	4908      	ldr	r1, [pc, #32]	; (305cc <writeInt+0x50>)
   305aa:	400b      	ands	r3, r1
   305ac:	d503      	bpl.n	305b6 <writeInt+0x3a>
   305ae:	3b01      	subs	r3, #1
   305b0:	4907      	ldr	r1, [pc, #28]	; (305d0 <writeInt+0x54>)
   305b2:	430b      	orrs	r3, r1
   305b4:	3301      	adds	r3, #1
   305b6:	b2db      	uxtb	r3, r3
   305b8:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   305ba:	687b      	ldr	r3, [r7, #4]
   305bc:	681b      	ldr	r3, [r3, #0]
   305be:	1c5a      	adds	r2, r3, #1
   305c0:	687b      	ldr	r3, [r7, #4]
   305c2:	601a      	str	r2, [r3, #0]
}
   305c4:	46c0      	nop			; (mov r8, r8)
   305c6:	46bd      	mov	sp, r7
   305c8:	b002      	add	sp, #8
   305ca:	bd80      	pop	{r7, pc}
   305cc:	800000ff 	.word	0x800000ff
   305d0:	ffffff00 	.word	0xffffff00

000305d4 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   305d4:	b580      	push	{r7, lr}
   305d6:	b084      	sub	sp, #16
   305d8:	af00      	add	r7, sp, #0
   305da:	6078      	str	r0, [r7, #4]
   305dc:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   305de:	683b      	ldr	r3, [r7, #0]
   305e0:	0018      	movs	r0, r3
   305e2:	4b0d      	ldr	r3, [pc, #52]	; (30618 <writeCString+0x44>)
   305e4:	4798      	blx	r3
   305e6:	0003      	movs	r3, r0
   305e8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   305ea:	68fa      	ldr	r2, [r7, #12]
   305ec:	687b      	ldr	r3, [r7, #4]
   305ee:	0011      	movs	r1, r2
   305f0:	0018      	movs	r0, r3
   305f2:	4b0a      	ldr	r3, [pc, #40]	; (3061c <writeCString+0x48>)
   305f4:	4798      	blx	r3
	memcpy(*pptr, string, len);
   305f6:	687b      	ldr	r3, [r7, #4]
   305f8:	681b      	ldr	r3, [r3, #0]
   305fa:	68fa      	ldr	r2, [r7, #12]
   305fc:	6839      	ldr	r1, [r7, #0]
   305fe:	0018      	movs	r0, r3
   30600:	4b07      	ldr	r3, [pc, #28]	; (30620 <writeCString+0x4c>)
   30602:	4798      	blx	r3
	*pptr += len;
   30604:	687b      	ldr	r3, [r7, #4]
   30606:	681a      	ldr	r2, [r3, #0]
   30608:	68fb      	ldr	r3, [r7, #12]
   3060a:	18d2      	adds	r2, r2, r3
   3060c:	687b      	ldr	r3, [r7, #4]
   3060e:	601a      	str	r2, [r3, #0]
}
   30610:	46c0      	nop			; (mov r8, r8)
   30612:	46bd      	mov	sp, r7
   30614:	b004      	add	sp, #16
   30616:	bd80      	pop	{r7, pc}
   30618:	00034ff7 	.word	0x00034ff7
   3061c:	0003057d 	.word	0x0003057d
   30620:	00034c09 	.word	0x00034c09

00030624 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   30624:	b580      	push	{r7, lr}
   30626:	b084      	sub	sp, #16
   30628:	af00      	add	r7, sp, #0
   3062a:	60f8      	str	r0, [r7, #12]
   3062c:	0038      	movs	r0, r7
   3062e:	6001      	str	r1, [r0, #0]
   30630:	6042      	str	r2, [r0, #4]
   30632:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   30634:	003b      	movs	r3, r7
   30636:	685b      	ldr	r3, [r3, #4]
   30638:	2b00      	cmp	r3, #0
   3063a:	dd17      	ble.n	3066c <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   3063c:	003b      	movs	r3, r7
   3063e:	685a      	ldr	r2, [r3, #4]
   30640:	68fb      	ldr	r3, [r7, #12]
   30642:	0011      	movs	r1, r2
   30644:	0018      	movs	r0, r3
   30646:	4b14      	ldr	r3, [pc, #80]	; (30698 <writeMQTTString+0x74>)
   30648:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   3064a:	68fb      	ldr	r3, [r7, #12]
   3064c:	6818      	ldr	r0, [r3, #0]
   3064e:	003b      	movs	r3, r7
   30650:	6899      	ldr	r1, [r3, #8]
   30652:	003b      	movs	r3, r7
   30654:	685b      	ldr	r3, [r3, #4]
   30656:	001a      	movs	r2, r3
   30658:	4b10      	ldr	r3, [pc, #64]	; (3069c <writeMQTTString+0x78>)
   3065a:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   3065c:	68fb      	ldr	r3, [r7, #12]
   3065e:	681a      	ldr	r2, [r3, #0]
   30660:	003b      	movs	r3, r7
   30662:	685b      	ldr	r3, [r3, #4]
   30664:	18d2      	adds	r2, r2, r3
   30666:	68fb      	ldr	r3, [r7, #12]
   30668:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   3066a:	e010      	b.n	3068e <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   3066c:	003b      	movs	r3, r7
   3066e:	681b      	ldr	r3, [r3, #0]
   30670:	2b00      	cmp	r3, #0
   30672:	d007      	beq.n	30684 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   30674:	003b      	movs	r3, r7
   30676:	681a      	ldr	r2, [r3, #0]
   30678:	68fb      	ldr	r3, [r7, #12]
   3067a:	0011      	movs	r1, r2
   3067c:	0018      	movs	r0, r3
   3067e:	4b08      	ldr	r3, [pc, #32]	; (306a0 <writeMQTTString+0x7c>)
   30680:	4798      	blx	r3
}
   30682:	e004      	b.n	3068e <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   30684:	68fb      	ldr	r3, [r7, #12]
   30686:	2100      	movs	r1, #0
   30688:	0018      	movs	r0, r3
   3068a:	4b03      	ldr	r3, [pc, #12]	; (30698 <writeMQTTString+0x74>)
   3068c:	4798      	blx	r3
}
   3068e:	46c0      	nop			; (mov r8, r8)
   30690:	46bd      	mov	sp, r7
   30692:	b004      	add	sp, #16
   30694:	bd80      	pop	{r7, pc}
   30696:	46c0      	nop			; (mov r8, r8)
   30698:	0003057d 	.word	0x0003057d
   3069c:	00034c09 	.word	0x00034c09
   306a0:	000305d5 	.word	0x000305d5

000306a4 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   306a4:	b580      	push	{r7, lr}
   306a6:	b086      	sub	sp, #24
   306a8:	af00      	add	r7, sp, #0
   306aa:	60f8      	str	r0, [r7, #12]
   306ac:	60b9      	str	r1, [r7, #8]
   306ae:	607a      	str	r2, [r7, #4]
	int rc = 0;
   306b0:	2300      	movs	r3, #0
   306b2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   306b4:	687a      	ldr	r2, [r7, #4]
   306b6:	68bb      	ldr	r3, [r7, #8]
   306b8:	681b      	ldr	r3, [r3, #0]
   306ba:	1ad3      	subs	r3, r2, r3
   306bc:	2b01      	cmp	r3, #1
   306be:	dd1b      	ble.n	306f8 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   306c0:	68bb      	ldr	r3, [r7, #8]
   306c2:	0018      	movs	r0, r3
   306c4:	4b10      	ldr	r3, [pc, #64]	; (30708 <readMQTTLenString+0x64>)
   306c6:	4798      	blx	r3
   306c8:	0002      	movs	r2, r0
   306ca:	68fb      	ldr	r3, [r7, #12]
   306cc:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   306ce:	68bb      	ldr	r3, [r7, #8]
   306d0:	681a      	ldr	r2, [r3, #0]
   306d2:	68fb      	ldr	r3, [r7, #12]
   306d4:	685b      	ldr	r3, [r3, #4]
   306d6:	18d2      	adds	r2, r2, r3
   306d8:	687b      	ldr	r3, [r7, #4]
   306da:	429a      	cmp	r2, r3
   306dc:	d80c      	bhi.n	306f8 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   306de:	68bb      	ldr	r3, [r7, #8]
   306e0:	681a      	ldr	r2, [r3, #0]
   306e2:	68fb      	ldr	r3, [r7, #12]
   306e4:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   306e6:	68bb      	ldr	r3, [r7, #8]
   306e8:	681a      	ldr	r2, [r3, #0]
   306ea:	68fb      	ldr	r3, [r7, #12]
   306ec:	685b      	ldr	r3, [r3, #4]
   306ee:	18d2      	adds	r2, r2, r3
   306f0:	68bb      	ldr	r3, [r7, #8]
   306f2:	601a      	str	r2, [r3, #0]
			rc = 1;
   306f4:	2301      	movs	r3, #1
   306f6:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   306f8:	68fb      	ldr	r3, [r7, #12]
   306fa:	2200      	movs	r2, #0
   306fc:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   306fe:	697b      	ldr	r3, [r7, #20]
}
   30700:	0018      	movs	r0, r3
   30702:	46bd      	mov	sp, r7
   30704:	b006      	add	sp, #24
   30706:	bd80      	pop	{r7, pc}
   30708:	000304f5 	.word	0x000304f5

0003070c <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   3070c:	b580      	push	{r7, lr}
   3070e:	b086      	sub	sp, #24
   30710:	af00      	add	r7, sp, #0
   30712:	1d3b      	adds	r3, r7, #4
   30714:	6018      	str	r0, [r3, #0]
   30716:	6059      	str	r1, [r3, #4]
   30718:	609a      	str	r2, [r3, #8]
	int rc = 0;
   3071a:	2300      	movs	r3, #0
   3071c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   3071e:	1d3b      	adds	r3, r7, #4
   30720:	681b      	ldr	r3, [r3, #0]
   30722:	2b00      	cmp	r3, #0
   30724:	d007      	beq.n	30736 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   30726:	1d3b      	adds	r3, r7, #4
   30728:	681b      	ldr	r3, [r3, #0]
   3072a:	0018      	movs	r0, r3
   3072c:	4b06      	ldr	r3, [pc, #24]	; (30748 <MQTTstrlen+0x3c>)
   3072e:	4798      	blx	r3
   30730:	0003      	movs	r3, r0
   30732:	617b      	str	r3, [r7, #20]
   30734:	e002      	b.n	3073c <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   30736:	1d3b      	adds	r3, r7, #4
   30738:	685b      	ldr	r3, [r3, #4]
   3073a:	617b      	str	r3, [r7, #20]
	return rc;
   3073c:	697b      	ldr	r3, [r7, #20]
}
   3073e:	0018      	movs	r0, r3
   30740:	46bd      	mov	sp, r7
   30742:	b006      	add	sp, #24
   30744:	bd80      	pop	{r7, pc}
   30746:	46c0      	nop			; (mov r8, r8)
   30748:	00034ff7 	.word	0x00034ff7

0003074c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   3074c:	b580      	push	{r7, lr}
   3074e:	b086      	sub	sp, #24
   30750:	af00      	add	r7, sp, #0
   30752:	6078      	str	r0, [r7, #4]
   30754:	6039      	str	r1, [r7, #0]
	int alen = 0,
   30756:	2300      	movs	r3, #0
   30758:	617b      	str	r3, [r7, #20]
		blen = 0;
   3075a:	2300      	movs	r3, #0
   3075c:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   3075e:	687b      	ldr	r3, [r7, #4]
   30760:	681b      	ldr	r3, [r3, #0]
   30762:	2b00      	cmp	r3, #0
   30764:	d00a      	beq.n	3077c <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   30766:	687b      	ldr	r3, [r7, #4]
   30768:	681b      	ldr	r3, [r3, #0]
   3076a:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   3076c:	687b      	ldr	r3, [r7, #4]
   3076e:	681b      	ldr	r3, [r3, #0]
   30770:	0018      	movs	r0, r3
   30772:	4b12      	ldr	r3, [pc, #72]	; (307bc <MQTTPacket_equals+0x70>)
   30774:	4798      	blx	r3
   30776:	0003      	movs	r3, r0
   30778:	617b      	str	r3, [r7, #20]
   3077a:	e005      	b.n	30788 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   3077c:	687b      	ldr	r3, [r7, #4]
   3077e:	689b      	ldr	r3, [r3, #8]
   30780:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   30782:	687b      	ldr	r3, [r7, #4]
   30784:	685b      	ldr	r3, [r3, #4]
   30786:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   30788:	683b      	ldr	r3, [r7, #0]
   3078a:	0018      	movs	r0, r3
   3078c:	4b0b      	ldr	r3, [pc, #44]	; (307bc <MQTTPacket_equals+0x70>)
   3078e:	4798      	blx	r3
   30790:	0003      	movs	r3, r0
   30792:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   30794:	697a      	ldr	r2, [r7, #20]
   30796:	68fb      	ldr	r3, [r7, #12]
   30798:	429a      	cmp	r2, r3
   3079a:	d109      	bne.n	307b0 <MQTTPacket_equals+0x64>
   3079c:	697a      	ldr	r2, [r7, #20]
   3079e:	6839      	ldr	r1, [r7, #0]
   307a0:	693b      	ldr	r3, [r7, #16]
   307a2:	0018      	movs	r0, r3
   307a4:	4b06      	ldr	r3, [pc, #24]	; (307c0 <MQTTPacket_equals+0x74>)
   307a6:	4798      	blx	r3
   307a8:	1e03      	subs	r3, r0, #0
   307aa:	d101      	bne.n	307b0 <MQTTPacket_equals+0x64>
   307ac:	2301      	movs	r3, #1
   307ae:	e000      	b.n	307b2 <MQTTPacket_equals+0x66>
   307b0:	2300      	movs	r3, #0
}
   307b2:	0018      	movs	r0, r3
   307b4:	46bd      	mov	sp, r7
   307b6:	b006      	add	sp, #24
   307b8:	bd80      	pop	{r7, pc}
   307ba:	46c0      	nop			; (mov r8, r8)
   307bc:	00034ff7 	.word	0x00034ff7
   307c0:	00035005 	.word	0x00035005

000307c4 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   307c4:	b580      	push	{r7, lr}
   307c6:	b086      	sub	sp, #24
   307c8:	af00      	add	r7, sp, #0
   307ca:	60f8      	str	r0, [r7, #12]
   307cc:	0038      	movs	r0, r7
   307ce:	6001      	str	r1, [r0, #0]
   307d0:	6042      	str	r2, [r0, #4]
   307d2:	6083      	str	r3, [r0, #8]
	int len = 0;
   307d4:	2300      	movs	r3, #0
   307d6:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   307d8:	003b      	movs	r3, r7
   307da:	6818      	ldr	r0, [r3, #0]
   307dc:	6859      	ldr	r1, [r3, #4]
   307de:	689a      	ldr	r2, [r3, #8]
   307e0:	4b09      	ldr	r3, [pc, #36]	; (30808 <MQTTSerialize_publishLength+0x44>)
   307e2:	4798      	blx	r3
   307e4:	0003      	movs	r3, r0
   307e6:	1c9a      	adds	r2, r3, #2
   307e8:	6a3b      	ldr	r3, [r7, #32]
   307ea:	18d3      	adds	r3, r2, r3
   307ec:	697a      	ldr	r2, [r7, #20]
   307ee:	18d3      	adds	r3, r2, r3
   307f0:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   307f2:	68fb      	ldr	r3, [r7, #12]
   307f4:	2b00      	cmp	r3, #0
   307f6:	dd02      	ble.n	307fe <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   307f8:	697b      	ldr	r3, [r7, #20]
   307fa:	3302      	adds	r3, #2
   307fc:	617b      	str	r3, [r7, #20]
	return len;
   307fe:	697b      	ldr	r3, [r7, #20]
}
   30800:	0018      	movs	r0, r3
   30802:	46bd      	mov	sp, r7
   30804:	b006      	add	sp, #24
   30806:	bd80      	pop	{r7, pc}
   30808:	0003070d 	.word	0x0003070d

0003080c <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   3080c:	b590      	push	{r4, r7, lr}
   3080e:	b08b      	sub	sp, #44	; 0x2c
   30810:	af02      	add	r7, sp, #8
   30812:	60f8      	str	r0, [r7, #12]
   30814:	60b9      	str	r1, [r7, #8]
   30816:	603b      	str	r3, [r7, #0]
   30818:	1dfb      	adds	r3, r7, #7
   3081a:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   3081c:	68fb      	ldr	r3, [r7, #12]
   3081e:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   30820:	2300      	movs	r3, #0
   30822:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   30824:	2300      	movs	r3, #0
   30826:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30828:	2300      	movs	r3, #0
   3082a:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   3082c:	2308      	movs	r3, #8
   3082e:	2230      	movs	r2, #48	; 0x30
   30830:	4694      	mov	ip, r2
   30832:	44bc      	add	ip, r7
   30834:	4463      	add	r3, ip
   30836:	6838      	ldr	r0, [r7, #0]
   30838:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3083a:	9200      	str	r2, [sp, #0]
   3083c:	6819      	ldr	r1, [r3, #0]
   3083e:	685a      	ldr	r2, [r3, #4]
   30840:	689b      	ldr	r3, [r3, #8]
   30842:	4c46      	ldr	r4, [pc, #280]	; (3095c <MQTTSerialize_publish+0x150>)
   30844:	47a0      	blx	r4
   30846:	0003      	movs	r3, r0
   30848:	61bb      	str	r3, [r7, #24]
   3084a:	69bb      	ldr	r3, [r7, #24]
   3084c:	0018      	movs	r0, r3
   3084e:	4b44      	ldr	r3, [pc, #272]	; (30960 <MQTTSerialize_publish+0x154>)
   30850:	4798      	blx	r3
   30852:	0002      	movs	r2, r0
   30854:	68bb      	ldr	r3, [r7, #8]
   30856:	429a      	cmp	r2, r3
   30858:	dd03      	ble.n	30862 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3085a:	2302      	movs	r3, #2
   3085c:	425b      	negs	r3, r3
   3085e:	61fb      	str	r3, [r7, #28]
		goto exit;
   30860:	e077      	b.n	30952 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   30862:	2310      	movs	r3, #16
   30864:	18fb      	adds	r3, r7, r3
   30866:	781a      	ldrb	r2, [r3, #0]
   30868:	210f      	movs	r1, #15
   3086a:	400a      	ands	r2, r1
   3086c:	1c11      	adds	r1, r2, #0
   3086e:	2230      	movs	r2, #48	; 0x30
   30870:	430a      	orrs	r2, r1
   30872:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30874:	1dfb      	adds	r3, r7, #7
   30876:	781b      	ldrb	r3, [r3, #0]
   30878:	2201      	movs	r2, #1
   3087a:	4013      	ands	r3, r2
   3087c:	b2da      	uxtb	r2, r3
   3087e:	2310      	movs	r3, #16
   30880:	18fb      	adds	r3, r7, r3
   30882:	2101      	movs	r1, #1
   30884:	400a      	ands	r2, r1
   30886:	00d0      	lsls	r0, r2, #3
   30888:	781a      	ldrb	r2, [r3, #0]
   3088a:	2108      	movs	r1, #8
   3088c:	438a      	bics	r2, r1
   3088e:	1c11      	adds	r1, r2, #0
   30890:	1c02      	adds	r2, r0, #0
   30892:	430a      	orrs	r2, r1
   30894:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   30896:	683b      	ldr	r3, [r7, #0]
   30898:	b2db      	uxtb	r3, r3
   3089a:	1c1a      	adds	r2, r3, #0
   3089c:	2303      	movs	r3, #3
   3089e:	4013      	ands	r3, r2
   308a0:	b2da      	uxtb	r2, r3
   308a2:	2310      	movs	r3, #16
   308a4:	18fb      	adds	r3, r7, r3
   308a6:	2103      	movs	r1, #3
   308a8:	400a      	ands	r2, r1
   308aa:	1890      	adds	r0, r2, r2
   308ac:	781a      	ldrb	r2, [r3, #0]
   308ae:	2106      	movs	r1, #6
   308b0:	438a      	bics	r2, r1
   308b2:	1c11      	adds	r1, r2, #0
   308b4:	1c02      	adds	r2, r0, #0
   308b6:	430a      	orrs	r2, r1
   308b8:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   308ba:	2330      	movs	r3, #48	; 0x30
   308bc:	18fb      	adds	r3, r7, r3
   308be:	781b      	ldrb	r3, [r3, #0]
   308c0:	2201      	movs	r2, #1
   308c2:	4013      	ands	r3, r2
   308c4:	b2da      	uxtb	r2, r3
   308c6:	2310      	movs	r3, #16
   308c8:	18fb      	adds	r3, r7, r3
   308ca:	2101      	movs	r1, #1
   308cc:	400a      	ands	r2, r1
   308ce:	0010      	movs	r0, r2
   308d0:	781a      	ldrb	r2, [r3, #0]
   308d2:	2101      	movs	r1, #1
   308d4:	438a      	bics	r2, r1
   308d6:	1c11      	adds	r1, r2, #0
   308d8:	1c02      	adds	r2, r0, #0
   308da:	430a      	orrs	r2, r1
   308dc:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   308de:	2310      	movs	r3, #16
   308e0:	18fb      	adds	r3, r7, r3
   308e2:	781a      	ldrb	r2, [r3, #0]
   308e4:	2314      	movs	r3, #20
   308e6:	18fb      	adds	r3, r7, r3
   308e8:	0011      	movs	r1, r2
   308ea:	0018      	movs	r0, r3
   308ec:	4b1d      	ldr	r3, [pc, #116]	; (30964 <MQTTSerialize_publish+0x158>)
   308ee:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   308f0:	697b      	ldr	r3, [r7, #20]
   308f2:	69ba      	ldr	r2, [r7, #24]
   308f4:	0011      	movs	r1, r2
   308f6:	0018      	movs	r0, r3
   308f8:	4b1b      	ldr	r3, [pc, #108]	; (30968 <MQTTSerialize_publish+0x15c>)
   308fa:	4798      	blx	r3
   308fc:	0002      	movs	r2, r0
   308fe:	697b      	ldr	r3, [r7, #20]
   30900:	189b      	adds	r3, r3, r2
   30902:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   30904:	2308      	movs	r3, #8
   30906:	2230      	movs	r2, #48	; 0x30
   30908:	4694      	mov	ip, r2
   3090a:	44bc      	add	ip, r7
   3090c:	4463      	add	r3, ip
   3090e:	2214      	movs	r2, #20
   30910:	18b8      	adds	r0, r7, r2
   30912:	6819      	ldr	r1, [r3, #0]
   30914:	685a      	ldr	r2, [r3, #4]
   30916:	689b      	ldr	r3, [r3, #8]
   30918:	4c14      	ldr	r4, [pc, #80]	; (3096c <MQTTSerialize_publish+0x160>)
   3091a:	47a0      	blx	r4

	if (qos > 0)
   3091c:	683b      	ldr	r3, [r7, #0]
   3091e:	2b00      	cmp	r3, #0
   30920:	dd08      	ble.n	30934 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   30922:	2334      	movs	r3, #52	; 0x34
   30924:	18fb      	adds	r3, r7, r3
   30926:	881a      	ldrh	r2, [r3, #0]
   30928:	2314      	movs	r3, #20
   3092a:	18fb      	adds	r3, r7, r3
   3092c:	0011      	movs	r1, r2
   3092e:	0018      	movs	r0, r3
   30930:	4b0f      	ldr	r3, [pc, #60]	; (30970 <MQTTSerialize_publish+0x164>)
   30932:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   30934:	697b      	ldr	r3, [r7, #20]
   30936:	6cba      	ldr	r2, [r7, #72]	; 0x48
   30938:	6c79      	ldr	r1, [r7, #68]	; 0x44
   3093a:	0018      	movs	r0, r3
   3093c:	4b0d      	ldr	r3, [pc, #52]	; (30974 <MQTTSerialize_publish+0x168>)
   3093e:	4798      	blx	r3
	ptr += payloadlen;
   30940:	697a      	ldr	r2, [r7, #20]
   30942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   30944:	18d3      	adds	r3, r2, r3
   30946:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   30948:	697b      	ldr	r3, [r7, #20]
   3094a:	001a      	movs	r2, r3
   3094c:	68fb      	ldr	r3, [r7, #12]
   3094e:	1ad3      	subs	r3, r2, r3
   30950:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30952:	69fb      	ldr	r3, [r7, #28]
}
   30954:	0018      	movs	r0, r3
   30956:	46bd      	mov	sp, r7
   30958:	b009      	add	sp, #36	; 0x24
   3095a:	bd90      	pop	{r4, r7, pc}
   3095c:	000307c5 	.word	0x000307c5
   30960:	00030431 	.word	0x00030431
   30964:	00030553 	.word	0x00030553
   30968:	00030339 	.word	0x00030339
   3096c:	00030625 	.word	0x00030625
   30970:	0003057d 	.word	0x0003057d
   30974:	00034c09 	.word	0x00034c09

00030978 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   30978:	b580      	push	{r7, lr}
   3097a:	b088      	sub	sp, #32
   3097c:	af00      	add	r7, sp, #0
   3097e:	60f8      	str	r0, [r7, #12]
   30980:	60b9      	str	r1, [r7, #8]
   30982:	0019      	movs	r1, r3
   30984:	1dfb      	adds	r3, r7, #7
   30986:	701a      	strb	r2, [r3, #0]
   30988:	1dbb      	adds	r3, r7, #6
   3098a:	1c0a      	adds	r2, r1, #0
   3098c:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   3098e:	2300      	movs	r3, #0
   30990:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   30992:	2300      	movs	r3, #0
   30994:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30996:	68fb      	ldr	r3, [r7, #12]
   30998:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   3099a:	68bb      	ldr	r3, [r7, #8]
   3099c:	2b03      	cmp	r3, #3
   3099e:	dc03      	bgt.n	309a8 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   309a0:	2302      	movs	r3, #2
   309a2:	425b      	negs	r3, r3
   309a4:	61fb      	str	r3, [r7, #28]
		goto exit;
   309a6:	e055      	b.n	30a54 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   309a8:	1dfb      	adds	r3, r7, #7
   309aa:	781b      	ldrb	r3, [r3, #0]
   309ac:	220f      	movs	r2, #15
   309ae:	4013      	ands	r3, r2
   309b0:	b2da      	uxtb	r2, r3
   309b2:	2318      	movs	r3, #24
   309b4:	18fb      	adds	r3, r7, r3
   309b6:	0110      	lsls	r0, r2, #4
   309b8:	781a      	ldrb	r2, [r3, #0]
   309ba:	210f      	movs	r1, #15
   309bc:	400a      	ands	r2, r1
   309be:	1c11      	adds	r1, r2, #0
   309c0:	1c02      	adds	r2, r0, #0
   309c2:	430a      	orrs	r2, r1
   309c4:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   309c6:	1dbb      	adds	r3, r7, #6
   309c8:	781b      	ldrb	r3, [r3, #0]
   309ca:	2201      	movs	r2, #1
   309cc:	4013      	ands	r3, r2
   309ce:	b2da      	uxtb	r2, r3
   309d0:	2318      	movs	r3, #24
   309d2:	18fb      	adds	r3, r7, r3
   309d4:	2101      	movs	r1, #1
   309d6:	400a      	ands	r2, r1
   309d8:	00d0      	lsls	r0, r2, #3
   309da:	781a      	ldrb	r2, [r3, #0]
   309dc:	2108      	movs	r1, #8
   309de:	438a      	bics	r2, r1
   309e0:	1c11      	adds	r1, r2, #0
   309e2:	1c02      	adds	r2, r0, #0
   309e4:	430a      	orrs	r2, r1
   309e6:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   309e8:	1dfb      	adds	r3, r7, #7
   309ea:	781b      	ldrb	r3, [r3, #0]
   309ec:	3b06      	subs	r3, #6
   309ee:	425a      	negs	r2, r3
   309f0:	4153      	adcs	r3, r2
   309f2:	b2db      	uxtb	r3, r3
   309f4:	1c1a      	adds	r2, r3, #0
   309f6:	2303      	movs	r3, #3
   309f8:	4013      	ands	r3, r2
   309fa:	b2da      	uxtb	r2, r3
   309fc:	2318      	movs	r3, #24
   309fe:	18fb      	adds	r3, r7, r3
   30a00:	2103      	movs	r1, #3
   30a02:	400a      	ands	r2, r1
   30a04:	1890      	adds	r0, r2, r2
   30a06:	781a      	ldrb	r2, [r3, #0]
   30a08:	2106      	movs	r1, #6
   30a0a:	438a      	bics	r2, r1
   30a0c:	1c11      	adds	r1, r2, #0
   30a0e:	1c02      	adds	r2, r0, #0
   30a10:	430a      	orrs	r2, r1
   30a12:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30a14:	2318      	movs	r3, #24
   30a16:	18fb      	adds	r3, r7, r3
   30a18:	781a      	ldrb	r2, [r3, #0]
   30a1a:	2314      	movs	r3, #20
   30a1c:	18fb      	adds	r3, r7, r3
   30a1e:	0011      	movs	r1, r2
   30a20:	0018      	movs	r0, r3
   30a22:	4b0f      	ldr	r3, [pc, #60]	; (30a60 <MQTTSerialize_ack+0xe8>)
   30a24:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   30a26:	697b      	ldr	r3, [r7, #20]
   30a28:	2102      	movs	r1, #2
   30a2a:	0018      	movs	r0, r3
   30a2c:	4b0d      	ldr	r3, [pc, #52]	; (30a64 <MQTTSerialize_ack+0xec>)
   30a2e:	4798      	blx	r3
   30a30:	0002      	movs	r2, r0
   30a32:	697b      	ldr	r3, [r7, #20]
   30a34:	189b      	adds	r3, r3, r2
   30a36:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   30a38:	2328      	movs	r3, #40	; 0x28
   30a3a:	18fb      	adds	r3, r7, r3
   30a3c:	881a      	ldrh	r2, [r3, #0]
   30a3e:	2314      	movs	r3, #20
   30a40:	18fb      	adds	r3, r7, r3
   30a42:	0011      	movs	r1, r2
   30a44:	0018      	movs	r0, r3
   30a46:	4b08      	ldr	r3, [pc, #32]	; (30a68 <MQTTSerialize_ack+0xf0>)
   30a48:	4798      	blx	r3
	rc = ptr - buf;
   30a4a:	697b      	ldr	r3, [r7, #20]
   30a4c:	001a      	movs	r2, r3
   30a4e:	68fb      	ldr	r3, [r7, #12]
   30a50:	1ad3      	subs	r3, r2, r3
   30a52:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30a54:	69fb      	ldr	r3, [r7, #28]
}
   30a56:	0018      	movs	r0, r3
   30a58:	46bd      	mov	sp, r7
   30a5a:	b008      	add	sp, #32
   30a5c:	bd80      	pop	{r7, pc}
   30a5e:	46c0      	nop			; (mov r8, r8)
   30a60:	00030553 	.word	0x00030553
   30a64:	00030339 	.word	0x00030339
   30a68:	0003057d 	.word	0x0003057d

00030a6c <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   30a6c:	b580      	push	{r7, lr}
   30a6e:	b084      	sub	sp, #16
   30a70:	af00      	add	r7, sp, #0
   30a72:	6078      	str	r0, [r7, #4]
   30a74:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   30a76:	2302      	movs	r3, #2
   30a78:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   30a7a:	2300      	movs	r3, #0
   30a7c:	60fb      	str	r3, [r7, #12]
   30a7e:	e014      	b.n	30aaa <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   30a80:	68fa      	ldr	r2, [r7, #12]
   30a82:	0013      	movs	r3, r2
   30a84:	005b      	lsls	r3, r3, #1
   30a86:	189b      	adds	r3, r3, r2
   30a88:	009b      	lsls	r3, r3, #2
   30a8a:	001a      	movs	r2, r3
   30a8c:	683b      	ldr	r3, [r7, #0]
   30a8e:	189b      	adds	r3, r3, r2
   30a90:	6818      	ldr	r0, [r3, #0]
   30a92:	6859      	ldr	r1, [r3, #4]
   30a94:	689a      	ldr	r2, [r3, #8]
   30a96:	4b09      	ldr	r3, [pc, #36]	; (30abc <MQTTSerialize_subscribeLength+0x50>)
   30a98:	4798      	blx	r3
   30a9a:	0003      	movs	r3, r0
   30a9c:	3303      	adds	r3, #3
   30a9e:	68ba      	ldr	r2, [r7, #8]
   30aa0:	18d3      	adds	r3, r2, r3
   30aa2:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   30aa4:	68fb      	ldr	r3, [r7, #12]
   30aa6:	3301      	adds	r3, #1
   30aa8:	60fb      	str	r3, [r7, #12]
   30aaa:	68fa      	ldr	r2, [r7, #12]
   30aac:	687b      	ldr	r3, [r7, #4]
   30aae:	429a      	cmp	r2, r3
   30ab0:	dbe6      	blt.n	30a80 <MQTTSerialize_subscribeLength+0x14>
	return len;
   30ab2:	68bb      	ldr	r3, [r7, #8]
}
   30ab4:	0018      	movs	r0, r3
   30ab6:	46bd      	mov	sp, r7
   30ab8:	b004      	add	sp, #16
   30aba:	bd80      	pop	{r7, pc}
   30abc:	0003070d 	.word	0x0003070d

00030ac0 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   30ac0:	b590      	push	{r4, r7, lr}
   30ac2:	b08b      	sub	sp, #44	; 0x2c
   30ac4:	af00      	add	r7, sp, #0
   30ac6:	60f8      	str	r0, [r7, #12]
   30ac8:	60b9      	str	r1, [r7, #8]
   30aca:	0019      	movs	r1, r3
   30acc:	1dfb      	adds	r3, r7, #7
   30ace:	701a      	strb	r2, [r3, #0]
   30ad0:	1d3b      	adds	r3, r7, #4
   30ad2:	1c0a      	adds	r2, r1, #0
   30ad4:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   30ad6:	68fb      	ldr	r3, [r7, #12]
   30ad8:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   30ada:	2300      	movs	r3, #0
   30adc:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   30ade:	2300      	movs	r3, #0
   30ae0:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   30ae2:	2300      	movs	r3, #0
   30ae4:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   30ae6:	2300      	movs	r3, #0
   30ae8:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   30aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   30aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30aee:	0011      	movs	r1, r2
   30af0:	0018      	movs	r0, r3
   30af2:	4b41      	ldr	r3, [pc, #260]	; (30bf8 <MQTTSerialize_subscribe+0x138>)
   30af4:	4798      	blx	r3
   30af6:	0003      	movs	r3, r0
   30af8:	61fb      	str	r3, [r7, #28]
   30afa:	69fb      	ldr	r3, [r7, #28]
   30afc:	0018      	movs	r0, r3
   30afe:	4b3f      	ldr	r3, [pc, #252]	; (30bfc <MQTTSerialize_subscribe+0x13c>)
   30b00:	4798      	blx	r3
   30b02:	0002      	movs	r2, r0
   30b04:	68bb      	ldr	r3, [r7, #8]
   30b06:	429a      	cmp	r2, r3
   30b08:	dd03      	ble.n	30b12 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30b0a:	2302      	movs	r3, #2
   30b0c:	425b      	negs	r3, r3
   30b0e:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30b10:	e06c      	b.n	30bec <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   30b12:	2314      	movs	r3, #20
   30b14:	18fb      	adds	r3, r7, r3
   30b16:	2200      	movs	r2, #0
   30b18:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   30b1a:	2314      	movs	r3, #20
   30b1c:	18fb      	adds	r3, r7, r3
   30b1e:	781a      	ldrb	r2, [r3, #0]
   30b20:	210f      	movs	r1, #15
   30b22:	400a      	ands	r2, r1
   30b24:	1c11      	adds	r1, r2, #0
   30b26:	2280      	movs	r2, #128	; 0x80
   30b28:	4252      	negs	r2, r2
   30b2a:	430a      	orrs	r2, r1
   30b2c:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   30b2e:	1dfb      	adds	r3, r7, #7
   30b30:	781b      	ldrb	r3, [r3, #0]
   30b32:	2201      	movs	r2, #1
   30b34:	4013      	ands	r3, r2
   30b36:	b2da      	uxtb	r2, r3
   30b38:	2314      	movs	r3, #20
   30b3a:	18fb      	adds	r3, r7, r3
   30b3c:	2101      	movs	r1, #1
   30b3e:	400a      	ands	r2, r1
   30b40:	00d0      	lsls	r0, r2, #3
   30b42:	781a      	ldrb	r2, [r3, #0]
   30b44:	2108      	movs	r1, #8
   30b46:	438a      	bics	r2, r1
   30b48:	1c11      	adds	r1, r2, #0
   30b4a:	1c02      	adds	r2, r0, #0
   30b4c:	430a      	orrs	r2, r1
   30b4e:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   30b50:	2314      	movs	r3, #20
   30b52:	18fb      	adds	r3, r7, r3
   30b54:	781a      	ldrb	r2, [r3, #0]
   30b56:	2106      	movs	r1, #6
   30b58:	438a      	bics	r2, r1
   30b5a:	1c11      	adds	r1, r2, #0
   30b5c:	2202      	movs	r2, #2
   30b5e:	430a      	orrs	r2, r1
   30b60:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30b62:	2314      	movs	r3, #20
   30b64:	18fb      	adds	r3, r7, r3
   30b66:	781a      	ldrb	r2, [r3, #0]
   30b68:	2318      	movs	r3, #24
   30b6a:	18fb      	adds	r3, r7, r3
   30b6c:	0011      	movs	r1, r2
   30b6e:	0018      	movs	r0, r3
   30b70:	4b23      	ldr	r3, [pc, #140]	; (30c00 <MQTTSerialize_subscribe+0x140>)
   30b72:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   30b74:	69bb      	ldr	r3, [r7, #24]
   30b76:	69fa      	ldr	r2, [r7, #28]
   30b78:	0011      	movs	r1, r2
   30b7a:	0018      	movs	r0, r3
   30b7c:	4b21      	ldr	r3, [pc, #132]	; (30c04 <MQTTSerialize_subscribe+0x144>)
   30b7e:	4798      	blx	r3
   30b80:	0002      	movs	r2, r0
   30b82:	69bb      	ldr	r3, [r7, #24]
   30b84:	189b      	adds	r3, r3, r2
   30b86:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   30b88:	1d3b      	adds	r3, r7, #4
   30b8a:	881a      	ldrh	r2, [r3, #0]
   30b8c:	2318      	movs	r3, #24
   30b8e:	18fb      	adds	r3, r7, r3
   30b90:	0011      	movs	r1, r2
   30b92:	0018      	movs	r0, r3
   30b94:	4b1c      	ldr	r3, [pc, #112]	; (30c08 <MQTTSerialize_subscribe+0x148>)
   30b96:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   30b98:	2300      	movs	r3, #0
   30b9a:	623b      	str	r3, [r7, #32]
   30b9c:	e01d      	b.n	30bda <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   30b9e:	6a3a      	ldr	r2, [r7, #32]
   30ba0:	0013      	movs	r3, r2
   30ba2:	005b      	lsls	r3, r3, #1
   30ba4:	189b      	adds	r3, r3, r2
   30ba6:	009b      	lsls	r3, r3, #2
   30ba8:	001a      	movs	r2, r3
   30baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30bac:	189b      	adds	r3, r3, r2
   30bae:	2218      	movs	r2, #24
   30bb0:	18b8      	adds	r0, r7, r2
   30bb2:	6819      	ldr	r1, [r3, #0]
   30bb4:	685a      	ldr	r2, [r3, #4]
   30bb6:	689b      	ldr	r3, [r3, #8]
   30bb8:	4c14      	ldr	r4, [pc, #80]	; (30c0c <MQTTSerialize_subscribe+0x14c>)
   30bba:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   30bbc:	6a3b      	ldr	r3, [r7, #32]
   30bbe:	009b      	lsls	r3, r3, #2
   30bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   30bc2:	18d3      	adds	r3, r2, r3
   30bc4:	681b      	ldr	r3, [r3, #0]
   30bc6:	b2da      	uxtb	r2, r3
   30bc8:	2318      	movs	r3, #24
   30bca:	18fb      	adds	r3, r7, r3
   30bcc:	0011      	movs	r1, r2
   30bce:	0018      	movs	r0, r3
   30bd0:	4b0b      	ldr	r3, [pc, #44]	; (30c00 <MQTTSerialize_subscribe+0x140>)
   30bd2:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   30bd4:	6a3b      	ldr	r3, [r7, #32]
   30bd6:	3301      	adds	r3, #1
   30bd8:	623b      	str	r3, [r7, #32]
   30bda:	6a3a      	ldr	r2, [r7, #32]
   30bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30bde:	429a      	cmp	r2, r3
   30be0:	dbdd      	blt.n	30b9e <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   30be2:	69bb      	ldr	r3, [r7, #24]
   30be4:	001a      	movs	r2, r3
   30be6:	68fb      	ldr	r3, [r7, #12]
   30be8:	1ad3      	subs	r3, r2, r3
   30bea:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30bee:	0018      	movs	r0, r3
   30bf0:	46bd      	mov	sp, r7
   30bf2:	b00b      	add	sp, #44	; 0x2c
   30bf4:	bd90      	pop	{r4, r7, pc}
   30bf6:	46c0      	nop			; (mov r8, r8)
   30bf8:	00030a6d 	.word	0x00030a6d
   30bfc:	00030431 	.word	0x00030431
   30c00:	00030553 	.word	0x00030553
   30c04:	00030339 	.word	0x00030339
   30c08:	0003057d 	.word	0x0003057d
   30c0c:	00030625 	.word	0x00030625

00030c10 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   30c10:	b590      	push	{r4, r7, lr}
   30c12:	b08b      	sub	sp, #44	; 0x2c
   30c14:	af00      	add	r7, sp, #0
   30c16:	60f8      	str	r0, [r7, #12]
   30c18:	60b9      	str	r1, [r7, #8]
   30c1a:	607a      	str	r2, [r7, #4]
   30c1c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30c1e:	2300      	movs	r3, #0
   30c20:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30c24:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30c26:	2300      	movs	r3, #0
   30c28:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30c2a:	2300      	movs	r3, #0
   30c2c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30c2e:	2318      	movs	r3, #24
   30c30:	18fb      	adds	r3, r7, r3
   30c32:	0018      	movs	r0, r3
   30c34:	4b2c      	ldr	r3, [pc, #176]	; (30ce8 <MQTTDeserialize_suback+0xd8>)
   30c36:	4798      	blx	r3
   30c38:	0003      	movs	r3, r0
   30c3a:	001a      	movs	r2, r3
   30c3c:	231c      	movs	r3, #28
   30c3e:	18fb      	adds	r3, r7, r3
   30c40:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   30c42:	231c      	movs	r3, #28
   30c44:	18fb      	adds	r3, r7, r3
   30c46:	781b      	ldrb	r3, [r3, #0]
   30c48:	220f      	movs	r2, #15
   30c4a:	4393      	bics	r3, r2
   30c4c:	b2db      	uxtb	r3, r3
   30c4e:	2b90      	cmp	r3, #144	; 0x90
   30c50:	d142      	bne.n	30cd8 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30c52:	69bb      	ldr	r3, [r7, #24]
   30c54:	2214      	movs	r2, #20
   30c56:	18ba      	adds	r2, r7, r2
   30c58:	0011      	movs	r1, r2
   30c5a:	0018      	movs	r0, r3
   30c5c:	4b23      	ldr	r3, [pc, #140]	; (30cec <MQTTDeserialize_suback+0xdc>)
   30c5e:	4798      	blx	r3
   30c60:	0003      	movs	r3, r0
   30c62:	627b      	str	r3, [r7, #36]	; 0x24
   30c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30c66:	69bb      	ldr	r3, [r7, #24]
   30c68:	189b      	adds	r3, r3, r2
   30c6a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30c6c:	69bb      	ldr	r3, [r7, #24]
   30c6e:	697a      	ldr	r2, [r7, #20]
   30c70:	189b      	adds	r3, r3, r2
   30c72:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30c74:	6a3b      	ldr	r3, [r7, #32]
   30c76:	69ba      	ldr	r2, [r7, #24]
   30c78:	1a9b      	subs	r3, r3, r2
   30c7a:	2b01      	cmp	r3, #1
   30c7c:	dd2e      	ble.n	30cdc <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   30c7e:	2318      	movs	r3, #24
   30c80:	18fb      	adds	r3, r7, r3
   30c82:	0018      	movs	r0, r3
   30c84:	4b1a      	ldr	r3, [pc, #104]	; (30cf0 <MQTTDeserialize_suback+0xe0>)
   30c86:	4798      	blx	r3
   30c88:	0003      	movs	r3, r0
   30c8a:	b29a      	uxth	r2, r3
   30c8c:	68fb      	ldr	r3, [r7, #12]
   30c8e:	801a      	strh	r2, [r3, #0]

	*count = 0;
   30c90:	687b      	ldr	r3, [r7, #4]
   30c92:	2200      	movs	r2, #0
   30c94:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   30c96:	e018      	b.n	30cca <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   30c98:	687b      	ldr	r3, [r7, #4]
   30c9a:	681a      	ldr	r2, [r3, #0]
   30c9c:	68bb      	ldr	r3, [r7, #8]
   30c9e:	429a      	cmp	r2, r3
   30ca0:	dd03      	ble.n	30caa <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   30ca2:	2301      	movs	r3, #1
   30ca4:	425b      	negs	r3, r3
   30ca6:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   30ca8:	e019      	b.n	30cde <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   30caa:	687b      	ldr	r3, [r7, #4]
   30cac:	681a      	ldr	r2, [r3, #0]
   30cae:	1c51      	adds	r1, r2, #1
   30cb0:	687b      	ldr	r3, [r7, #4]
   30cb2:	6019      	str	r1, [r3, #0]
   30cb4:	0013      	movs	r3, r2
   30cb6:	009b      	lsls	r3, r3, #2
   30cb8:	683a      	ldr	r2, [r7, #0]
   30cba:	18d4      	adds	r4, r2, r3
   30cbc:	2318      	movs	r3, #24
   30cbe:	18fb      	adds	r3, r7, r3
   30cc0:	0018      	movs	r0, r3
   30cc2:	4b09      	ldr	r3, [pc, #36]	; (30ce8 <MQTTDeserialize_suback+0xd8>)
   30cc4:	4798      	blx	r3
   30cc6:	0003      	movs	r3, r0
   30cc8:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   30cca:	69ba      	ldr	r2, [r7, #24]
   30ccc:	6a3b      	ldr	r3, [r7, #32]
   30cce:	429a      	cmp	r2, r3
   30cd0:	d3e2      	bcc.n	30c98 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   30cd2:	2301      	movs	r3, #1
   30cd4:	627b      	str	r3, [r7, #36]	; 0x24
   30cd6:	e002      	b.n	30cde <MQTTDeserialize_suback+0xce>
		goto exit;
   30cd8:	46c0      	nop			; (mov r8, r8)
   30cda:	e000      	b.n	30cde <MQTTDeserialize_suback+0xce>
		goto exit;
   30cdc:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30ce0:	0018      	movs	r0, r3
   30ce2:	46bd      	mov	sp, r7
   30ce4:	b00b      	add	sp, #44	; 0x2c
   30ce6:	bd90      	pop	{r4, r7, pc}
   30ce8:	00030527 	.word	0x00030527
   30cec:	000304c1 	.word	0x000304c1
   30cf0:	000304f5 	.word	0x000304f5

00030cf4 <http_client_get_config_defaults>:
   30cf4:	b580      	push	{r7, lr}
   30cf6:	b082      	sub	sp, #8
   30cf8:	af00      	add	r7, sp, #0
   30cfa:	6078      	str	r0, [r7, #4]
   30cfc:	687b      	ldr	r3, [r7, #4]
   30cfe:	2250      	movs	r2, #80	; 0x50
   30d00:	801a      	strh	r2, [r3, #0]
   30d02:	687b      	ldr	r3, [r7, #4]
   30d04:	2200      	movs	r2, #0
   30d06:	709a      	strb	r2, [r3, #2]
   30d08:	687b      	ldr	r3, [r7, #4]
   30d0a:	4a0b      	ldr	r2, [pc, #44]	; (30d38 <http_client_get_config_defaults+0x44>)
   30d0c:	811a      	strh	r2, [r3, #8]
   30d0e:	687b      	ldr	r3, [r7, #4]
   30d10:	2200      	movs	r2, #0
   30d12:	605a      	str	r2, [r3, #4]
   30d14:	687b      	ldr	r3, [r7, #4]
   30d16:	2200      	movs	r2, #0
   30d18:	60da      	str	r2, [r3, #12]
   30d1a:	687b      	ldr	r3, [r7, #4]
   30d1c:	2280      	movs	r2, #128	; 0x80
   30d1e:	0052      	lsls	r2, r2, #1
   30d20:	611a      	str	r2, [r3, #16]
   30d22:	687b      	ldr	r3, [r7, #4]
   30d24:	2252      	movs	r2, #82	; 0x52
   30d26:	615a      	str	r2, [r3, #20]
   30d28:	687b      	ldr	r3, [r7, #4]
   30d2a:	4a04      	ldr	r2, [pc, #16]	; (30d3c <http_client_get_config_defaults+0x48>)
   30d2c:	619a      	str	r2, [r3, #24]
   30d2e:	46c0      	nop			; (mov r8, r8)
   30d30:	46bd      	mov	sp, r7
   30d32:	b002      	add	sp, #8
   30d34:	bd80      	pop	{r7, pc}
   30d36:	46c0      	nop			; (mov r8, r8)
   30d38:	00004e20 	.word	0x00004e20
   30d3c:	00039d8c 	.word	0x00039d8c

00030d40 <http_client_init>:
   30d40:	b590      	push	{r4, r7, lr}
   30d42:	b083      	sub	sp, #12
   30d44:	af00      	add	r7, sp, #0
   30d46:	6078      	str	r0, [r7, #4]
   30d48:	6039      	str	r1, [r7, #0]
   30d4a:	687b      	ldr	r3, [r7, #4]
   30d4c:	2b00      	cmp	r3, #0
   30d4e:	d002      	beq.n	30d56 <http_client_init+0x16>
   30d50:	683b      	ldr	r3, [r7, #0]
   30d52:	2b00      	cmp	r3, #0
   30d54:	d102      	bne.n	30d5c <http_client_init+0x1c>
   30d56:	2316      	movs	r3, #22
   30d58:	425b      	negs	r3, r3
   30d5a:	e058      	b.n	30e0e <http_client_init+0xce>
   30d5c:	683b      	ldr	r3, [r7, #0]
   30d5e:	691b      	ldr	r3, [r3, #16]
   30d60:	2b00      	cmp	r3, #0
   30d62:	d102      	bne.n	30d6a <http_client_init+0x2a>
   30d64:	2316      	movs	r3, #22
   30d66:	425b      	negs	r3, r3
   30d68:	e051      	b.n	30e0e <http_client_init+0xce>
   30d6a:	683b      	ldr	r3, [r7, #0]
   30d6c:	685b      	ldr	r3, [r3, #4]
   30d6e:	2b00      	cmp	r3, #0
   30d70:	d102      	bne.n	30d78 <http_client_init+0x38>
   30d72:	2316      	movs	r3, #22
   30d74:	425b      	negs	r3, r3
   30d76:	e04a      	b.n	30e0e <http_client_init+0xce>
   30d78:	683b      	ldr	r3, [r7, #0]
   30d7a:	695b      	ldr	r3, [r3, #20]
   30d7c:	2b51      	cmp	r3, #81	; 0x51
   30d7e:	d802      	bhi.n	30d86 <http_client_init+0x46>
   30d80:	2316      	movs	r3, #22
   30d82:	425b      	negs	r3, r3
   30d84:	e043      	b.n	30e0e <http_client_init+0xce>
   30d86:	687b      	ldr	r3, [r7, #4]
   30d88:	22e8      	movs	r2, #232	; 0xe8
   30d8a:	2100      	movs	r1, #0
   30d8c:	0018      	movs	r0, r3
   30d8e:	4b22      	ldr	r3, [pc, #136]	; (30e18 <http_client_init+0xd8>)
   30d90:	4798      	blx	r3
   30d92:	687b      	ldr	r3, [r7, #4]
   30d94:	3350      	adds	r3, #80	; 0x50
   30d96:	6839      	ldr	r1, [r7, #0]
   30d98:	221c      	movs	r2, #28
   30d9a:	0018      	movs	r0, r3
   30d9c:	4b1f      	ldr	r3, [pc, #124]	; (30e1c <http_client_init+0xdc>)
   30d9e:	4798      	blx	r3
   30da0:	687b      	ldr	r3, [r7, #4]
   30da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30da4:	2b00      	cmp	r3, #0
   30da6:	d115      	bne.n	30dd4 <http_client_init+0x94>
   30da8:	683b      	ldr	r3, [r7, #0]
   30daa:	691b      	ldr	r3, [r3, #16]
   30dac:	0018      	movs	r0, r3
   30dae:	4b1c      	ldr	r3, [pc, #112]	; (30e20 <http_client_init+0xe0>)
   30db0:	4798      	blx	r3
   30db2:	0003      	movs	r3, r0
   30db4:	001a      	movs	r2, r3
   30db6:	687b      	ldr	r3, [r7, #4]
   30db8:	65da      	str	r2, [r3, #92]	; 0x5c
   30dba:	687b      	ldr	r3, [r7, #4]
   30dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30dbe:	2b00      	cmp	r3, #0
   30dc0:	d102      	bne.n	30dc8 <http_client_init+0x88>
   30dc2:	230c      	movs	r3, #12
   30dc4:	425b      	negs	r3, r3
   30dc6:	e022      	b.n	30e0e <http_client_init+0xce>
   30dc8:	687b      	ldr	r3, [r7, #4]
   30dca:	2241      	movs	r2, #65	; 0x41
   30dcc:	5c99      	ldrb	r1, [r3, r2]
   30dce:	2004      	movs	r0, #4
   30dd0:	4301      	orrs	r1, r0
   30dd2:	5499      	strb	r1, [r3, r2]
   30dd4:	683b      	ldr	r3, [r7, #0]
   30dd6:	891b      	ldrh	r3, [r3, #8]
   30dd8:	2b00      	cmp	r3, #0
   30dda:	d010      	beq.n	30dfe <http_client_init+0xbe>
   30ddc:	683b      	ldr	r3, [r7, #0]
   30dde:	6858      	ldr	r0, [r3, #4]
   30de0:	687a      	ldr	r2, [r7, #4]
   30de2:	4910      	ldr	r1, [pc, #64]	; (30e24 <http_client_init+0xe4>)
   30de4:	2300      	movs	r3, #0
   30de6:	4c10      	ldr	r4, [pc, #64]	; (30e28 <http_client_init+0xe8>)
   30de8:	47a0      	blx	r4
   30dea:	0002      	movs	r2, r0
   30dec:	687b      	ldr	r3, [r7, #4]
   30dee:	649a      	str	r2, [r3, #72]	; 0x48
   30df0:	687b      	ldr	r3, [r7, #4]
   30df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30df4:	2b00      	cmp	r3, #0
   30df6:	da02      	bge.n	30dfe <http_client_init+0xbe>
   30df8:	231c      	movs	r3, #28
   30dfa:	425b      	negs	r3, r3
   30dfc:	e007      	b.n	30e0e <http_client_init+0xce>
   30dfe:	687b      	ldr	r3, [r7, #4]
   30e00:	2200      	movs	r2, #0
   30e02:	66da      	str	r2, [r3, #108]	; 0x6c
   30e04:	687b      	ldr	r3, [r7, #4]
   30e06:	22d8      	movs	r2, #216	; 0xd8
   30e08:	2100      	movs	r1, #0
   30e0a:	5099      	str	r1, [r3, r2]
   30e0c:	2300      	movs	r3, #0
   30e0e:	0018      	movs	r0, r3
   30e10:	46bd      	mov	sp, r7
   30e12:	b003      	add	sp, #12
   30e14:	bd90      	pop	{r4, r7, pc}
   30e16:	46c0      	nop			; (mov r8, r8)
   30e18:	00034c3f 	.word	0x00034c3f
   30e1c:	00034c09 	.word	0x00034c09
   30e20:	00034be1 	.word	0x00034be1
   30e24:	000310f1 	.word	0x000310f1
   30e28:	00032795 	.word	0x00032795

00030e2c <http_client_register_callback>:
   30e2c:	b580      	push	{r7, lr}
   30e2e:	b082      	sub	sp, #8
   30e30:	af00      	add	r7, sp, #0
   30e32:	6078      	str	r0, [r7, #4]
   30e34:	6039      	str	r1, [r7, #0]
   30e36:	687b      	ldr	r3, [r7, #4]
   30e38:	2b00      	cmp	r3, #0
   30e3a:	d102      	bne.n	30e42 <http_client_register_callback+0x16>
   30e3c:	2316      	movs	r3, #22
   30e3e:	425b      	negs	r3, r3
   30e40:	e003      	b.n	30e4a <http_client_register_callback+0x1e>
   30e42:	687b      	ldr	r3, [r7, #4]
   30e44:	683a      	ldr	r2, [r7, #0]
   30e46:	64da      	str	r2, [r3, #76]	; 0x4c
   30e48:	2300      	movs	r3, #0
   30e4a:	0018      	movs	r0, r3
   30e4c:	46bd      	mov	sp, r7
   30e4e:	b002      	add	sp, #8
   30e50:	bd80      	pop	{r7, pc}
	...

00030e54 <_hwerr_to_stderr>:
   30e54:	b580      	push	{r7, lr}
   30e56:	b082      	sub	sp, #8
   30e58:	af00      	add	r7, sp, #0
   30e5a:	6078      	str	r0, [r7, #4]
   30e5c:	687b      	ldr	r3, [r7, #4]
   30e5e:	330e      	adds	r3, #14
   30e60:	2b0e      	cmp	r3, #14
   30e62:	d825      	bhi.n	30eb0 <_hwerr_to_stderr+0x5c>
   30e64:	009a      	lsls	r2, r3, #2
   30e66:	4b18      	ldr	r3, [pc, #96]	; (30ec8 <_hwerr_to_stderr+0x74>)
   30e68:	18d3      	adds	r3, r2, r3
   30e6a:	681b      	ldr	r3, [r3, #0]
   30e6c:	469f      	mov	pc, r3
   30e6e:	2305      	movs	r3, #5
   30e70:	425b      	negs	r3, r3
   30e72:	e024      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30e74:	2302      	movs	r3, #2
   30e76:	425b      	negs	r3, r3
   30e78:	e021      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30e7a:	2370      	movs	r3, #112	; 0x70
   30e7c:	425b      	negs	r3, r3
   30e7e:	e01e      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30e80:	230c      	movs	r3, #12
   30e82:	425b      	negs	r3, r3
   30e84:	e01b      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30e86:	2316      	movs	r3, #22
   30e88:	425b      	negs	r3, r3
   30e8a:	e018      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30e8c:	230c      	movs	r3, #12
   30e8e:	425b      	negs	r3, r3
   30e90:	e015      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30e92:	2305      	movs	r3, #5
   30e94:	425b      	negs	r3, r3
   30e96:	e012      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30e98:	2379      	movs	r3, #121	; 0x79
   30e9a:	425b      	negs	r3, r3
   30e9c:	e00f      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30e9e:	2368      	movs	r3, #104	; 0x68
   30ea0:	425b      	negs	r3, r3
   30ea2:	e00c      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30ea4:	230b      	movs	r3, #11
   30ea6:	425b      	negs	r3, r3
   30ea8:	e009      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30eaa:	2310      	movs	r3, #16
   30eac:	425b      	negs	r3, r3
   30eae:	e006      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30eb0:	687b      	ldr	r3, [r7, #4]
   30eb2:	2b00      	cmp	r3, #0
   30eb4:	da02      	bge.n	30ebc <_hwerr_to_stderr+0x68>
   30eb6:	2305      	movs	r3, #5
   30eb8:	425b      	negs	r3, r3
   30eba:	e000      	b.n	30ebe <_hwerr_to_stderr+0x6a>
   30ebc:	2300      	movs	r3, #0
   30ebe:	0018      	movs	r0, r3
   30ec0:	46bd      	mov	sp, r7
   30ec2:	b002      	add	sp, #8
   30ec4:	bd80      	pop	{r7, pc}
   30ec6:	46c0      	nop			; (mov r8, r8)
   30ec8:	00039ec8 	.word	0x00039ec8

00030ecc <http_client_socket_event_handler>:
   30ecc:	b580      	push	{r7, lr}
   30ece:	b08a      	sub	sp, #40	; 0x28
   30ed0:	af00      	add	r7, sp, #0
   30ed2:	603a      	str	r2, [r7, #0]
   30ed4:	1dfb      	adds	r3, r7, #7
   30ed6:	1c02      	adds	r2, r0, #0
   30ed8:	701a      	strb	r2, [r3, #0]
   30eda:	1dbb      	adds	r3, r7, #6
   30edc:	1c0a      	adds	r2, r1, #0
   30ede:	701a      	strb	r2, [r3, #0]
   30ee0:	1dfb      	adds	r3, r7, #7
   30ee2:	2200      	movs	r2, #0
   30ee4:	569a      	ldrsb	r2, [r3, r2]
   30ee6:	4b4b      	ldr	r3, [pc, #300]	; (31014 <http_client_socket_event_handler+0x148>)
   30ee8:	0092      	lsls	r2, r2, #2
   30eea:	58d3      	ldr	r3, [r2, r3]
   30eec:	627b      	str	r3, [r7, #36]	; 0x24
   30eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ef0:	2b00      	cmp	r3, #0
   30ef2:	d100      	bne.n	30ef6 <http_client_socket_event_handler+0x2a>
   30ef4:	e08a      	b.n	3100c <http_client_socket_event_handler+0x140>
   30ef6:	1dbb      	adds	r3, r7, #6
   30ef8:	781b      	ldrb	r3, [r3, #0]
   30efa:	2b06      	cmp	r3, #6
   30efc:	d040      	beq.n	30f80 <http_client_socket_event_handler+0xb4>
   30efe:	2b07      	cmp	r3, #7
   30f00:	d060      	beq.n	30fc4 <http_client_socket_event_handler+0xf8>
   30f02:	2b05      	cmp	r3, #5
   30f04:	d000      	beq.n	30f08 <http_client_socket_event_handler+0x3c>
   30f06:	e082      	b.n	3100e <http_client_socket_event_handler+0x142>
   30f08:	683b      	ldr	r3, [r7, #0]
   30f0a:	623b      	str	r3, [r7, #32]
   30f0c:	6a3b      	ldr	r3, [r7, #32]
   30f0e:	785b      	ldrb	r3, [r3, #1]
   30f10:	b25b      	sxtb	r3, r3
   30f12:	001a      	movs	r2, r3
   30f14:	230c      	movs	r3, #12
   30f16:	18fb      	adds	r3, r7, r3
   30f18:	601a      	str	r2, [r3, #0]
   30f1a:	6a3b      	ldr	r3, [r7, #32]
   30f1c:	785b      	ldrb	r3, [r3, #1]
   30f1e:	b25b      	sxtb	r3, r3
   30f20:	2b00      	cmp	r3, #0
   30f22:	da0c      	bge.n	30f3e <http_client_socket_event_handler+0x72>
   30f24:	6a3b      	ldr	r3, [r7, #32]
   30f26:	785b      	ldrb	r3, [r3, #1]
   30f28:	b25b      	sxtb	r3, r3
   30f2a:	0018      	movs	r0, r3
   30f2c:	4b3a      	ldr	r3, [pc, #232]	; (31018 <http_client_socket_event_handler+0x14c>)
   30f2e:	4798      	blx	r3
   30f30:	0002      	movs	r2, r0
   30f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f34:	0011      	movs	r1, r2
   30f36:	0018      	movs	r0, r3
   30f38:	4b38      	ldr	r3, [pc, #224]	; (3101c <http_client_socket_event_handler+0x150>)
   30f3a:	4798      	blx	r3
   30f3c:	e067      	b.n	3100e <http_client_socket_event_handler+0x142>
   30f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30f42:	2b00      	cmp	r3, #0
   30f44:	d006      	beq.n	30f54 <http_client_socket_event_handler+0x88>
   30f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30f4a:	220c      	movs	r2, #12
   30f4c:	18ba      	adds	r2, r7, r2
   30f4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   30f50:	2100      	movs	r1, #0
   30f52:	4798      	blx	r3
   30f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f56:	2203      	movs	r2, #3
   30f58:	66da      	str	r2, [r3, #108]	; 0x6c
   30f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f5c:	6d58      	ldr	r0, [r3, #84]	; 0x54
   30f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f60:	6c99      	ldr	r1, [r3, #72]	; 0x48
   30f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f64:	2258      	movs	r2, #88	; 0x58
   30f66:	5a9b      	ldrh	r3, [r3, r2]
   30f68:	001a      	movs	r2, r3
   30f6a:	4b2d      	ldr	r3, [pc, #180]	; (31020 <http_client_socket_event_handler+0x154>)
   30f6c:	4798      	blx	r3
   30f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f70:	0018      	movs	r0, r3
   30f72:	4b2c      	ldr	r3, [pc, #176]	; (31024 <http_client_socket_event_handler+0x158>)
   30f74:	4798      	blx	r3
   30f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f78:	0018      	movs	r0, r3
   30f7a:	4b2b      	ldr	r3, [pc, #172]	; (31028 <http_client_socket_event_handler+0x15c>)
   30f7c:	4798      	blx	r3
   30f7e:	e046      	b.n	3100e <http_client_socket_event_handler+0x142>
   30f80:	683b      	ldr	r3, [r7, #0]
   30f82:	61fb      	str	r3, [r7, #28]
   30f84:	69fb      	ldr	r3, [r7, #28]
   30f86:	2204      	movs	r2, #4
   30f88:	5e9b      	ldrsh	r3, [r3, r2]
   30f8a:	2b00      	cmp	r3, #0
   30f8c:	dd09      	ble.n	30fa2 <http_client_socket_event_handler+0xd6>
   30f8e:	69fb      	ldr	r3, [r7, #28]
   30f90:	2204      	movs	r2, #4
   30f92:	5e9b      	ldrsh	r3, [r3, r2]
   30f94:	001a      	movs	r2, r3
   30f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30f98:	0011      	movs	r1, r2
   30f9a:	0018      	movs	r0, r3
   30f9c:	4b23      	ldr	r3, [pc, #140]	; (3102c <http_client_socket_event_handler+0x160>)
   30f9e:	4798      	blx	r3
   30fa0:	e00b      	b.n	30fba <http_client_socket_event_handler+0xee>
   30fa2:	69fb      	ldr	r3, [r7, #28]
   30fa4:	2204      	movs	r2, #4
   30fa6:	5e9b      	ldrsh	r3, [r3, r2]
   30fa8:	0018      	movs	r0, r3
   30faa:	4b1b      	ldr	r3, [pc, #108]	; (31018 <http_client_socket_event_handler+0x14c>)
   30fac:	4798      	blx	r3
   30fae:	0002      	movs	r2, r0
   30fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fb2:	0011      	movs	r1, r2
   30fb4:	0018      	movs	r0, r3
   30fb6:	4b19      	ldr	r3, [pc, #100]	; (3101c <http_client_socket_event_handler+0x150>)
   30fb8:	4798      	blx	r3
   30fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fbc:	0018      	movs	r0, r3
   30fbe:	4b19      	ldr	r3, [pc, #100]	; (31024 <http_client_socket_event_handler+0x158>)
   30fc0:	4798      	blx	r3
   30fc2:	e024      	b.n	3100e <http_client_socket_event_handler+0x142>
   30fc4:	231a      	movs	r3, #26
   30fc6:	18fb      	adds	r3, r7, r3
   30fc8:	683a      	ldr	r2, [r7, #0]
   30fca:	8812      	ldrh	r2, [r2, #0]
   30fcc:	801a      	strh	r2, [r3, #0]
   30fce:	231a      	movs	r3, #26
   30fd0:	18fb      	adds	r3, r7, r3
   30fd2:	2200      	movs	r2, #0
   30fd4:	5e9b      	ldrsh	r3, [r3, r2]
   30fd6:	2b00      	cmp	r3, #0
   30fd8:	da0d      	bge.n	30ff6 <http_client_socket_event_handler+0x12a>
   30fda:	231a      	movs	r3, #26
   30fdc:	18fb      	adds	r3, r7, r3
   30fde:	2200      	movs	r2, #0
   30fe0:	5e9b      	ldrsh	r3, [r3, r2]
   30fe2:	0018      	movs	r0, r3
   30fe4:	4b0c      	ldr	r3, [pc, #48]	; (31018 <http_client_socket_event_handler+0x14c>)
   30fe6:	4798      	blx	r3
   30fe8:	0002      	movs	r2, r0
   30fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30fec:	0011      	movs	r1, r2
   30fee:	0018      	movs	r0, r3
   30ff0:	4b0a      	ldr	r3, [pc, #40]	; (3101c <http_client_socket_event_handler+0x150>)
   30ff2:	4798      	blx	r3
   30ff4:	e003      	b.n	30ffe <http_client_socket_event_handler+0x132>
   30ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30ff8:	0018      	movs	r0, r3
   30ffa:	4b0b      	ldr	r3, [pc, #44]	; (31028 <http_client_socket_event_handler+0x15c>)
   30ffc:	4798      	blx	r3
   30ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31000:	2241      	movs	r2, #65	; 0x41
   31002:	5c99      	ldrb	r1, [r3, r2]
   31004:	2001      	movs	r0, #1
   31006:	4381      	bics	r1, r0
   31008:	5499      	strb	r1, [r3, r2]
   3100a:	e000      	b.n	3100e <http_client_socket_event_handler+0x142>
   3100c:	46c0      	nop			; (mov r8, r8)
   3100e:	46bd      	mov	sp, r7
   31010:	b00a      	add	sp, #40	; 0x28
   31012:	bd80      	pop	{r7, pc}
   31014:	200042e4 	.word	0x200042e4
   31018:	00030e55 	.word	0x00030e55
   3101c:	000314c9 	.word	0x000314c9
   31020:	00032825 	.word	0x00032825
   31024:	00031d55 	.word	0x00031d55
   31028:	0003161d 	.word	0x0003161d
   3102c:	00031db9 	.word	0x00031db9

00031030 <http_client_socket_resolve_handler>:
   31030:	b580      	push	{r7, lr}
   31032:	b088      	sub	sp, #32
   31034:	af00      	add	r7, sp, #0
   31036:	6078      	str	r0, [r7, #4]
   31038:	6039      	str	r1, [r7, #0]
   3103a:	2300      	movs	r3, #0
   3103c:	61fb      	str	r3, [r7, #28]
   3103e:	e048      	b.n	310d2 <http_client_socket_resolve_handler+0xa2>
   31040:	4b27      	ldr	r3, [pc, #156]	; (310e0 <http_client_socket_resolve_handler+0xb0>)
   31042:	69fa      	ldr	r2, [r7, #28]
   31044:	0092      	lsls	r2, r2, #2
   31046:	58d3      	ldr	r3, [r2, r3]
   31048:	2b00      	cmp	r3, #0
   3104a:	d03f      	beq.n	310cc <http_client_socket_resolve_handler+0x9c>
   3104c:	4b24      	ldr	r3, [pc, #144]	; (310e0 <http_client_socket_resolve_handler+0xb0>)
   3104e:	69fa      	ldr	r2, [r7, #28]
   31050:	0092      	lsls	r2, r2, #2
   31052:	58d3      	ldr	r3, [r2, r3]
   31054:	61bb      	str	r3, [r7, #24]
   31056:	69bb      	ldr	r3, [r7, #24]
   31058:	1c5a      	adds	r2, r3, #1
   3105a:	687b      	ldr	r3, [r7, #4]
   3105c:	0011      	movs	r1, r2
   3105e:	0018      	movs	r0, r3
   31060:	4b20      	ldr	r3, [pc, #128]	; (310e4 <http_client_socket_resolve_handler+0xb4>)
   31062:	4798      	blx	r3
   31064:	1e03      	subs	r3, r0, #0
   31066:	d131      	bne.n	310cc <http_client_socket_resolve_handler+0x9c>
   31068:	69bb      	ldr	r3, [r7, #24]
   3106a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3106c:	2b01      	cmp	r3, #1
   3106e:	d12d      	bne.n	310cc <http_client_socket_resolve_handler+0x9c>
   31070:	683b      	ldr	r3, [r7, #0]
   31072:	2b00      	cmp	r3, #0
   31074:	d107      	bne.n	31086 <http_client_socket_resolve_handler+0x56>
   31076:	2376      	movs	r3, #118	; 0x76
   31078:	425a      	negs	r2, r3
   3107a:	69bb      	ldr	r3, [r7, #24]
   3107c:	0011      	movs	r1, r2
   3107e:	0018      	movs	r0, r3
   31080:	4b19      	ldr	r3, [pc, #100]	; (310e8 <http_client_socket_resolve_handler+0xb8>)
   31082:	4798      	blx	r3
   31084:	e028      	b.n	310d8 <http_client_socket_resolve_handler+0xa8>
   31086:	2308      	movs	r3, #8
   31088:	18fb      	adds	r3, r7, r3
   3108a:	2202      	movs	r2, #2
   3108c:	801a      	strh	r2, [r3, #0]
   3108e:	69bb      	ldr	r3, [r7, #24]
   31090:	2250      	movs	r2, #80	; 0x50
   31092:	5a9b      	ldrh	r3, [r3, r2]
   31094:	021b      	lsls	r3, r3, #8
   31096:	b21a      	sxth	r2, r3
   31098:	69bb      	ldr	r3, [r7, #24]
   3109a:	2150      	movs	r1, #80	; 0x50
   3109c:	5a5b      	ldrh	r3, [r3, r1]
   3109e:	0a1b      	lsrs	r3, r3, #8
   310a0:	b29b      	uxth	r3, r3
   310a2:	b21b      	sxth	r3, r3
   310a4:	4313      	orrs	r3, r2
   310a6:	b21b      	sxth	r3, r3
   310a8:	b29a      	uxth	r2, r3
   310aa:	2308      	movs	r3, #8
   310ac:	18fb      	adds	r3, r7, r3
   310ae:	805a      	strh	r2, [r3, #2]
   310b0:	2308      	movs	r3, #8
   310b2:	18fb      	adds	r3, r7, r3
   310b4:	683a      	ldr	r2, [r7, #0]
   310b6:	605a      	str	r2, [r3, #4]
   310b8:	69bb      	ldr	r3, [r7, #24]
   310ba:	781b      	ldrb	r3, [r3, #0]
   310bc:	b25b      	sxtb	r3, r3
   310be:	2208      	movs	r2, #8
   310c0:	18b9      	adds	r1, r7, r2
   310c2:	2210      	movs	r2, #16
   310c4:	0018      	movs	r0, r3
   310c6:	4b09      	ldr	r3, [pc, #36]	; (310ec <http_client_socket_resolve_handler+0xbc>)
   310c8:	4798      	blx	r3
   310ca:	e005      	b.n	310d8 <http_client_socket_resolve_handler+0xa8>
   310cc:	69fb      	ldr	r3, [r7, #28]
   310ce:	3301      	adds	r3, #1
   310d0:	61fb      	str	r3, [r7, #28]
   310d2:	69fb      	ldr	r3, [r7, #28]
   310d4:	2b06      	cmp	r3, #6
   310d6:	ddb3      	ble.n	31040 <http_client_socket_resolve_handler+0x10>
   310d8:	46bd      	mov	sp, r7
   310da:	b008      	add	sp, #32
   310dc:	bd80      	pop	{r7, pc}
   310de:	46c0      	nop			; (mov r8, r8)
   310e0:	200042e4 	.word	0x200042e4
   310e4:	00034f97 	.word	0x00034f97
   310e8:	000314c9 	.word	0x000314c9
   310ec:	00025a45 	.word	0x00025a45

000310f0 <http_client_timer_callback>:
   310f0:	b580      	push	{r7, lr}
   310f2:	b086      	sub	sp, #24
   310f4:	af00      	add	r7, sp, #0
   310f6:	60f8      	str	r0, [r7, #12]
   310f8:	60b9      	str	r1, [r7, #8]
   310fa:	607a      	str	r2, [r7, #4]
   310fc:	603b      	str	r3, [r7, #0]
   310fe:	687b      	ldr	r3, [r7, #4]
   31100:	617b      	str	r3, [r7, #20]
   31102:	697b      	ldr	r3, [r7, #20]
   31104:	2b00      	cmp	r3, #0
   31106:	d007      	beq.n	31118 <http_client_timer_callback+0x28>
   31108:	233e      	movs	r3, #62	; 0x3e
   3110a:	425a      	negs	r2, r3
   3110c:	697b      	ldr	r3, [r7, #20]
   3110e:	0011      	movs	r1, r2
   31110:	0018      	movs	r0, r3
   31112:	4b03      	ldr	r3, [pc, #12]	; (31120 <http_client_timer_callback+0x30>)
   31114:	4798      	blx	r3
   31116:	e000      	b.n	3111a <http_client_timer_callback+0x2a>
   31118:	46c0      	nop			; (mov r8, r8)
   3111a:	46bd      	mov	sp, r7
   3111c:	b006      	add	sp, #24
   3111e:	bd80      	pop	{r7, pc}
   31120:	000314c9 	.word	0x000314c9

00031124 <_is_ip>:
   31124:	b580      	push	{r7, lr}
   31126:	b084      	sub	sp, #16
   31128:	af00      	add	r7, sp, #0
   3112a:	6078      	str	r0, [r7, #4]
   3112c:	2300      	movs	r3, #0
   3112e:	60fb      	str	r3, [r7, #12]
   31130:	e03a      	b.n	311a8 <_is_ip+0x84>
   31132:	687b      	ldr	r3, [r7, #4]
   31134:	1c5a      	adds	r2, r3, #1
   31136:	607a      	str	r2, [r7, #4]
   31138:	220b      	movs	r2, #11
   3113a:	18ba      	adds	r2, r7, r2
   3113c:	781b      	ldrb	r3, [r3, #0]
   3113e:	7013      	strb	r3, [r2, #0]
   31140:	230b      	movs	r3, #11
   31142:	18fb      	adds	r3, r7, r3
   31144:	781b      	ldrb	r3, [r3, #0]
   31146:	2b60      	cmp	r3, #96	; 0x60
   31148:	d904      	bls.n	31154 <_is_ip+0x30>
   3114a:	230b      	movs	r3, #11
   3114c:	18fb      	adds	r3, r7, r3
   3114e:	781b      	ldrb	r3, [r3, #0]
   31150:	2b66      	cmp	r3, #102	; 0x66
   31152:	d913      	bls.n	3117c <_is_ip+0x58>
   31154:	230b      	movs	r3, #11
   31156:	18fb      	adds	r3, r7, r3
   31158:	781b      	ldrb	r3, [r3, #0]
   3115a:	2b40      	cmp	r3, #64	; 0x40
   3115c:	d904      	bls.n	31168 <_is_ip+0x44>
   3115e:	230b      	movs	r3, #11
   31160:	18fb      	adds	r3, r7, r3
   31162:	781b      	ldrb	r3, [r3, #0]
   31164:	2b46      	cmp	r3, #70	; 0x46
   31166:	d909      	bls.n	3117c <_is_ip+0x58>
   31168:	230b      	movs	r3, #11
   3116a:	18fb      	adds	r3, r7, r3
   3116c:	781b      	ldrb	r3, [r3, #0]
   3116e:	2b3a      	cmp	r3, #58	; 0x3a
   31170:	d004      	beq.n	3117c <_is_ip+0x58>
   31172:	230b      	movs	r3, #11
   31174:	18fb      	adds	r3, r7, r3
   31176:	781b      	ldrb	r3, [r3, #0]
   31178:	2b2f      	cmp	r3, #47	; 0x2f
   3117a:	d102      	bne.n	31182 <_is_ip+0x5e>
   3117c:	2301      	movs	r3, #1
   3117e:	60fb      	str	r3, [r7, #12]
   31180:	e012      	b.n	311a8 <_is_ip+0x84>
   31182:	230b      	movs	r3, #11
   31184:	18fb      	adds	r3, r7, r3
   31186:	781b      	ldrb	r3, [r3, #0]
   31188:	2b2e      	cmp	r3, #46	; 0x2e
   3118a:	d104      	bne.n	31196 <_is_ip+0x72>
   3118c:	68fb      	ldr	r3, [r7, #12]
   3118e:	2b00      	cmp	r3, #0
   31190:	d00a      	beq.n	311a8 <_is_ip+0x84>
   31192:	2300      	movs	r3, #0
   31194:	e00d      	b.n	311b2 <_is_ip+0x8e>
   31196:	230b      	movs	r3, #11
   31198:	18fb      	adds	r3, r7, r3
   3119a:	781b      	ldrb	r3, [r3, #0]
   3119c:	2230      	movs	r2, #48	; 0x30
   3119e:	4013      	ands	r3, r2
   311a0:	2b30      	cmp	r3, #48	; 0x30
   311a2:	d001      	beq.n	311a8 <_is_ip+0x84>
   311a4:	2300      	movs	r3, #0
   311a6:	e004      	b.n	311b2 <_is_ip+0x8e>
   311a8:	687b      	ldr	r3, [r7, #4]
   311aa:	781b      	ldrb	r3, [r3, #0]
   311ac:	2b00      	cmp	r3, #0
   311ae:	d1c0      	bne.n	31132 <_is_ip+0xe>
   311b0:	2301      	movs	r3, #1
   311b2:	0018      	movs	r0, r3
   311b4:	46bd      	mov	sp, r7
   311b6:	b004      	add	sp, #16
   311b8:	bd80      	pop	{r7, pc}
	...

000311bc <http_client_send_request>:
   311bc:	b5b0      	push	{r4, r5, r7, lr}
   311be:	b08e      	sub	sp, #56	; 0x38
   311c0:	af00      	add	r7, sp, #0
   311c2:	60f8      	str	r0, [r7, #12]
   311c4:	60b9      	str	r1, [r7, #8]
   311c6:	603b      	str	r3, [r7, #0]
   311c8:	1dfb      	adds	r3, r7, #7
   311ca:	701a      	strb	r2, [r3, #0]
   311cc:	2337      	movs	r3, #55	; 0x37
   311ce:	18fb      	adds	r3, r7, r3
   311d0:	2200      	movs	r2, #0
   311d2:	701a      	strb	r2, [r3, #0]
   311d4:	2300      	movs	r3, #0
   311d6:	62bb      	str	r3, [r7, #40]	; 0x28
   311d8:	2300      	movs	r3, #0
   311da:	633b      	str	r3, [r7, #48]	; 0x30
   311dc:	2300      	movs	r3, #0
   311de:	62fb      	str	r3, [r7, #44]	; 0x2c
   311e0:	2300      	movs	r3, #0
   311e2:	627b      	str	r3, [r7, #36]	; 0x24
   311e4:	68fb      	ldr	r3, [r7, #12]
   311e6:	2b00      	cmp	r3, #0
   311e8:	d102      	bne.n	311f0 <http_client_send_request+0x34>
   311ea:	2316      	movs	r3, #22
   311ec:	425b      	negs	r3, r3
   311ee:	e145      	b.n	3147c <http_client_send_request+0x2c0>
   311f0:	68fb      	ldr	r3, [r7, #12]
   311f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   311f4:	2b02      	cmp	r3, #2
   311f6:	d902      	bls.n	311fe <http_client_send_request+0x42>
   311f8:	2310      	movs	r3, #16
   311fa:	425b      	negs	r3, r3
   311fc:	e13e      	b.n	3147c <http_client_send_request+0x2c0>
   311fe:	49a1      	ldr	r1, [pc, #644]	; (31484 <http_client_send_request+0x2c8>)
   31200:	68bb      	ldr	r3, [r7, #8]
   31202:	2207      	movs	r2, #7
   31204:	0018      	movs	r0, r3
   31206:	4ba0      	ldr	r3, [pc, #640]	; (31488 <http_client_send_request+0x2cc>)
   31208:	4798      	blx	r3
   3120a:	1e03      	subs	r3, r0, #0
   3120c:	d102      	bne.n	31214 <http_client_send_request+0x58>
   3120e:	2307      	movs	r3, #7
   31210:	633b      	str	r3, [r7, #48]	; 0x30
   31212:	e009      	b.n	31228 <http_client_send_request+0x6c>
   31214:	499d      	ldr	r1, [pc, #628]	; (3148c <http_client_send_request+0x2d0>)
   31216:	68bb      	ldr	r3, [r7, #8]
   31218:	2208      	movs	r2, #8
   3121a:	0018      	movs	r0, r3
   3121c:	4b9a      	ldr	r3, [pc, #616]	; (31488 <http_client_send_request+0x2cc>)
   3121e:	4798      	blx	r3
   31220:	1e03      	subs	r3, r0, #0
   31222:	d101      	bne.n	31228 <http_client_send_request+0x6c>
   31224:	2308      	movs	r3, #8
   31226:	633b      	str	r3, [r7, #48]	; 0x30
   31228:	68fb      	ldr	r3, [r7, #12]
   3122a:	1c5c      	adds	r4, r3, #1
   3122c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3122e:	68ba      	ldr	r2, [r7, #8]
   31230:	18d5      	adds	r5, r2, r3
   31232:	68fb      	ldr	r3, [r7, #12]
   31234:	3301      	adds	r3, #1
   31236:	0018      	movs	r0, r3
   31238:	4b95      	ldr	r3, [pc, #596]	; (31490 <http_client_send_request+0x2d4>)
   3123a:	4798      	blx	r3
   3123c:	0003      	movs	r3, r0
   3123e:	001a      	movs	r2, r3
   31240:	0029      	movs	r1, r5
   31242:	0020      	movs	r0, r4
   31244:	4b90      	ldr	r3, [pc, #576]	; (31488 <http_client_send_request+0x2cc>)
   31246:	4798      	blx	r3
   31248:	0003      	movs	r3, r0
   3124a:	627b      	str	r3, [r7, #36]	; 0x24
   3124c:	e00d      	b.n	3126a <http_client_send_request+0xae>
   3124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31250:	1c5a      	adds	r2, r3, #1
   31252:	62fa      	str	r2, [r7, #44]	; 0x2c
   31254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   31256:	68b9      	ldr	r1, [r7, #8]
   31258:	188a      	adds	r2, r1, r2
   3125a:	7811      	ldrb	r1, [r2, #0]
   3125c:	68fa      	ldr	r2, [r7, #12]
   3125e:	18d3      	adds	r3, r2, r3
   31260:	1c0a      	adds	r2, r1, #0
   31262:	705a      	strb	r2, [r3, #1]
   31264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31266:	3301      	adds	r3, #1
   31268:	633b      	str	r3, [r7, #48]	; 0x30
   3126a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   3126c:	68ba      	ldr	r2, [r7, #8]
   3126e:	18d3      	adds	r3, r2, r3
   31270:	781b      	ldrb	r3, [r3, #0]
   31272:	2b00      	cmp	r3, #0
   31274:	d005      	beq.n	31282 <http_client_send_request+0xc6>
   31276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31278:	68ba      	ldr	r2, [r7, #8]
   3127a:	18d3      	adds	r3, r2, r3
   3127c:	781b      	ldrb	r3, [r3, #0]
   3127e:	2b2f      	cmp	r3, #47	; 0x2f
   31280:	d1e5      	bne.n	3124e <http_client_send_request+0x92>
   31282:	68fa      	ldr	r2, [r7, #12]
   31284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31286:	18d3      	adds	r3, r2, r3
   31288:	3301      	adds	r3, #1
   3128a:	2200      	movs	r2, #0
   3128c:	701a      	strb	r2, [r3, #0]
   3128e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31290:	68ba      	ldr	r2, [r7, #8]
   31292:	18d3      	adds	r3, r2, r3
   31294:	62bb      	str	r3, [r7, #40]	; 0x28
   31296:	68fb      	ldr	r3, [r7, #12]
   31298:	3301      	adds	r3, #1
   3129a:	781b      	ldrb	r3, [r3, #0]
   3129c:	2b00      	cmp	r3, #0
   3129e:	d102      	bne.n	312a6 <http_client_send_request+0xea>
   312a0:	2316      	movs	r3, #22
   312a2:	425b      	negs	r3, r3
   312a4:	e0ea      	b.n	3147c <http_client_send_request+0x2c0>
   312a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   312a8:	0018      	movs	r0, r3
   312aa:	4b79      	ldr	r3, [pc, #484]	; (31490 <http_client_send_request+0x2d4>)
   312ac:	4798      	blx	r3
   312ae:	0003      	movs	r3, r0
   312b0:	2b3f      	cmp	r3, #63	; 0x3f
   312b2:	d902      	bls.n	312ba <http_client_send_request+0xfe>
   312b4:	235b      	movs	r3, #91	; 0x5b
   312b6:	425b      	negs	r3, r3
   312b8:	e0e0      	b.n	3147c <http_client_send_request+0x2c0>
   312ba:	68fb      	ldr	r3, [r7, #12]
   312bc:	22d4      	movs	r2, #212	; 0xd4
   312be:	589b      	ldr	r3, [r3, r2]
   312c0:	2b00      	cmp	r3, #0
   312c2:	d005      	beq.n	312d0 <http_client_send_request+0x114>
   312c4:	68fb      	ldr	r3, [r7, #12]
   312c6:	22d4      	movs	r2, #212	; 0xd4
   312c8:	589b      	ldr	r3, [r3, r2]
   312ca:	0018      	movs	r0, r3
   312cc:	4b71      	ldr	r3, [pc, #452]	; (31494 <http_client_send_request+0x2d8>)
   312ce:	4798      	blx	r3
   312d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   312d2:	2b00      	cmp	r3, #0
   312d4:	d010      	beq.n	312f8 <http_client_send_request+0x13c>
   312d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   312d8:	0018      	movs	r0, r3
   312da:	4b6f      	ldr	r3, [pc, #444]	; (31498 <http_client_send_request+0x2dc>)
   312dc:	4798      	blx	r3
   312de:	0003      	movs	r3, r0
   312e0:	0019      	movs	r1, r3
   312e2:	68fb      	ldr	r3, [r7, #12]
   312e4:	22d4      	movs	r2, #212	; 0xd4
   312e6:	5099      	str	r1, [r3, r2]
   312e8:	68fb      	ldr	r3, [r7, #12]
   312ea:	22d4      	movs	r2, #212	; 0xd4
   312ec:	589b      	ldr	r3, [r3, r2]
   312ee:	2b00      	cmp	r3, #0
   312f0:	d106      	bne.n	31300 <http_client_send_request+0x144>
   312f2:	230c      	movs	r3, #12
   312f4:	425b      	negs	r3, r3
   312f6:	e0c1      	b.n	3147c <http_client_send_request+0x2c0>
   312f8:	68fb      	ldr	r3, [r7, #12]
   312fa:	22d4      	movs	r2, #212	; 0xd4
   312fc:	2100      	movs	r1, #0
   312fe:	5099      	str	r1, [r3, r2]
   31300:	68fb      	ldr	r3, [r7, #12]
   31302:	2241      	movs	r2, #65	; 0x41
   31304:	5c99      	ldrb	r1, [r3, r2]
   31306:	2001      	movs	r0, #1
   31308:	4381      	bics	r1, r0
   3130a:	5499      	strb	r1, [r3, r2]
   3130c:	68fb      	ldr	r3, [r7, #12]
   3130e:	2200      	movs	r2, #0
   31310:	645a      	str	r2, [r3, #68]	; 0x44
   31312:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31314:	781b      	ldrb	r3, [r3, #0]
   31316:	2b2f      	cmp	r3, #47	; 0x2f
   31318:	d107      	bne.n	3132a <http_client_send_request+0x16e>
   3131a:	68fb      	ldr	r3, [r7, #12]
   3131c:	3370      	adds	r3, #112	; 0x70
   3131e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31320:	0011      	movs	r1, r2
   31322:	0018      	movs	r0, r3
   31324:	4b5d      	ldr	r3, [pc, #372]	; (3149c <http_client_send_request+0x2e0>)
   31326:	4798      	blx	r3
   31328:	e00f      	b.n	3134a <http_client_send_request+0x18e>
   3132a:	68fb      	ldr	r3, [r7, #12]
   3132c:	2270      	movs	r2, #112	; 0x70
   3132e:	212f      	movs	r1, #47	; 0x2f
   31330:	5499      	strb	r1, [r3, r2]
   31332:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31334:	781b      	ldrb	r3, [r3, #0]
   31336:	2b00      	cmp	r3, #0
   31338:	d007      	beq.n	3134a <http_client_send_request+0x18e>
   3133a:	68fb      	ldr	r3, [r7, #12]
   3133c:	3370      	adds	r3, #112	; 0x70
   3133e:	3301      	adds	r3, #1
   31340:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31342:	0011      	movs	r1, r2
   31344:	0018      	movs	r0, r3
   31346:	4b55      	ldr	r3, [pc, #340]	; (3149c <http_client_send_request+0x2e0>)
   31348:	4798      	blx	r3
   3134a:	683b      	ldr	r3, [r7, #0]
   3134c:	2b00      	cmp	r3, #0
   3134e:	d007      	beq.n	31360 <http_client_send_request+0x1a4>
   31350:	68fb      	ldr	r3, [r7, #12]
   31352:	33b0      	adds	r3, #176	; 0xb0
   31354:	6839      	ldr	r1, [r7, #0]
   31356:	2218      	movs	r2, #24
   31358:	0018      	movs	r0, r3
   3135a:	4b51      	ldr	r3, [pc, #324]	; (314a0 <http_client_send_request+0x2e4>)
   3135c:	4798      	blx	r3
   3135e:	e006      	b.n	3136e <http_client_send_request+0x1b2>
   31360:	68fb      	ldr	r3, [r7, #12]
   31362:	33b0      	adds	r3, #176	; 0xb0
   31364:	2218      	movs	r2, #24
   31366:	2100      	movs	r1, #0
   31368:	0018      	movs	r0, r3
   3136a:	4b4e      	ldr	r3, [pc, #312]	; (314a4 <http_client_send_request+0x2e8>)
   3136c:	4798      	blx	r3
   3136e:	68fb      	ldr	r3, [r7, #12]
   31370:	1dfa      	adds	r2, r7, #7
   31372:	21c8      	movs	r1, #200	; 0xc8
   31374:	7812      	ldrb	r2, [r2, #0]
   31376:	545a      	strb	r2, [r3, r1]
   31378:	68fb      	ldr	r3, [r7, #12]
   3137a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3137c:	2b01      	cmp	r3, #1
   3137e:	d003      	beq.n	31388 <http_client_send_request+0x1cc>
   31380:	d316      	bcc.n	313b0 <http_client_send_request+0x1f4>
   31382:	2b02      	cmp	r3, #2
   31384:	d004      	beq.n	31390 <http_client_send_request+0x1d4>
   31386:	e074      	b.n	31472 <http_client_send_request+0x2b6>
   31388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3138a:	2b00      	cmp	r3, #0
   3138c:	d100      	bne.n	31390 <http_client_send_request+0x1d4>
   3138e:	e073      	b.n	31478 <http_client_send_request+0x2bc>
   31390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31392:	2b00      	cmp	r3, #0
   31394:	d107      	bne.n	313a6 <http_client_send_request+0x1ea>
   31396:	68fb      	ldr	r3, [r7, #12]
   31398:	2203      	movs	r2, #3
   3139a:	66da      	str	r2, [r3, #108]	; 0x6c
   3139c:	68fb      	ldr	r3, [r7, #12]
   3139e:	0018      	movs	r0, r3
   313a0:	4b41      	ldr	r3, [pc, #260]	; (314a8 <http_client_send_request+0x2ec>)
   313a2:	4798      	blx	r3
   313a4:	e069      	b.n	3147a <http_client_send_request+0x2be>
   313a6:	68fb      	ldr	r3, [r7, #12]
   313a8:	2100      	movs	r1, #0
   313aa:	0018      	movs	r0, r3
   313ac:	4b3f      	ldr	r3, [pc, #252]	; (314ac <http_client_send_request+0x2f0>)
   313ae:	4798      	blx	r3
   313b0:	68fb      	ldr	r3, [r7, #12]
   313b2:	2252      	movs	r2, #82	; 0x52
   313b4:	5c9b      	ldrb	r3, [r3, r2]
   313b6:	2b00      	cmp	r3, #0
   313b8:	d007      	beq.n	313ca <http_client_send_request+0x20e>
   313ba:	2337      	movs	r3, #55	; 0x37
   313bc:	18fb      	adds	r3, r7, r3
   313be:	2237      	movs	r2, #55	; 0x37
   313c0:	18ba      	adds	r2, r7, r2
   313c2:	7812      	ldrb	r2, [r2, #0]
   313c4:	2101      	movs	r1, #1
   313c6:	430a      	orrs	r2, r1
   313c8:	701a      	strb	r2, [r3, #0]
   313ca:	2337      	movs	r3, #55	; 0x37
   313cc:	18fb      	adds	r3, r7, r3
   313ce:	781b      	ldrb	r3, [r3, #0]
   313d0:	001a      	movs	r2, r3
   313d2:	2101      	movs	r1, #1
   313d4:	2002      	movs	r0, #2
   313d6:	4b36      	ldr	r3, [pc, #216]	; (314b0 <http_client_send_request+0x2f4>)
   313d8:	4798      	blx	r3
   313da:	0003      	movs	r3, r0
   313dc:	001a      	movs	r2, r3
   313de:	68fb      	ldr	r3, [r7, #12]
   313e0:	701a      	strb	r2, [r3, #0]
   313e2:	68fb      	ldr	r3, [r7, #12]
   313e4:	781b      	ldrb	r3, [r3, #0]
   313e6:	b25b      	sxtb	r3, r3
   313e8:	2b00      	cmp	r3, #0
   313ea:	db3f      	blt.n	3146c <http_client_send_request+0x2b0>
   313ec:	68fb      	ldr	r3, [r7, #12]
   313ee:	781b      	ldrb	r3, [r3, #0]
   313f0:	b25b      	sxtb	r3, r3
   313f2:	001a      	movs	r2, r3
   313f4:	4b2f      	ldr	r3, [pc, #188]	; (314b4 <http_client_send_request+0x2f8>)
   313f6:	0092      	lsls	r2, r2, #2
   313f8:	68f9      	ldr	r1, [r7, #12]
   313fa:	50d1      	str	r1, [r2, r3]
   313fc:	68fb      	ldr	r3, [r7, #12]
   313fe:	3301      	adds	r3, #1
   31400:	0018      	movs	r0, r3
   31402:	4b2d      	ldr	r3, [pc, #180]	; (314b8 <http_client_send_request+0x2fc>)
   31404:	4798      	blx	r3
   31406:	1e03      	subs	r3, r0, #0
   31408:	d027      	beq.n	3145a <http_client_send_request+0x29e>
   3140a:	2314      	movs	r3, #20
   3140c:	18fb      	adds	r3, r7, r3
   3140e:	2202      	movs	r2, #2
   31410:	801a      	strh	r2, [r3, #0]
   31412:	68fb      	ldr	r3, [r7, #12]
   31414:	2250      	movs	r2, #80	; 0x50
   31416:	5a9b      	ldrh	r3, [r3, r2]
   31418:	021b      	lsls	r3, r3, #8
   3141a:	b21a      	sxth	r2, r3
   3141c:	68fb      	ldr	r3, [r7, #12]
   3141e:	2150      	movs	r1, #80	; 0x50
   31420:	5a5b      	ldrh	r3, [r3, r1]
   31422:	0a1b      	lsrs	r3, r3, #8
   31424:	b29b      	uxth	r3, r3
   31426:	b21b      	sxth	r3, r3
   31428:	4313      	orrs	r3, r2
   3142a:	b21b      	sxth	r3, r3
   3142c:	b29a      	uxth	r2, r3
   3142e:	2314      	movs	r3, #20
   31430:	18fb      	adds	r3, r7, r3
   31432:	805a      	strh	r2, [r3, #2]
   31434:	68fb      	ldr	r3, [r7, #12]
   31436:	3301      	adds	r3, #1
   31438:	0018      	movs	r0, r3
   3143a:	4b20      	ldr	r3, [pc, #128]	; (314bc <http_client_send_request+0x300>)
   3143c:	4798      	blx	r3
   3143e:	0002      	movs	r2, r0
   31440:	2314      	movs	r3, #20
   31442:	18fb      	adds	r3, r7, r3
   31444:	605a      	str	r2, [r3, #4]
   31446:	68fb      	ldr	r3, [r7, #12]
   31448:	781b      	ldrb	r3, [r3, #0]
   3144a:	b25b      	sxtb	r3, r3
   3144c:	2214      	movs	r2, #20
   3144e:	18b9      	adds	r1, r7, r2
   31450:	2210      	movs	r2, #16
   31452:	0018      	movs	r0, r3
   31454:	4b1a      	ldr	r3, [pc, #104]	; (314c0 <http_client_send_request+0x304>)
   31456:	4798      	blx	r3
   31458:	e004      	b.n	31464 <http_client_send_request+0x2a8>
   3145a:	68fb      	ldr	r3, [r7, #12]
   3145c:	3301      	adds	r3, #1
   3145e:	0018      	movs	r0, r3
   31460:	4b18      	ldr	r3, [pc, #96]	; (314c4 <http_client_send_request+0x308>)
   31462:	4798      	blx	r3
   31464:	68fb      	ldr	r3, [r7, #12]
   31466:	2201      	movs	r2, #1
   31468:	66da      	str	r2, [r3, #108]	; 0x6c
   3146a:	e006      	b.n	3147a <http_client_send_request+0x2be>
   3146c:	231c      	movs	r3, #28
   3146e:	425b      	negs	r3, r3
   31470:	e004      	b.n	3147c <http_client_send_request+0x2c0>
   31472:	230b      	movs	r3, #11
   31474:	425b      	negs	r3, r3
   31476:	e001      	b.n	3147c <http_client_send_request+0x2c0>
   31478:	46c0      	nop			; (mov r8, r8)
   3147a:	2300      	movs	r3, #0
   3147c:	0018      	movs	r0, r3
   3147e:	46bd      	mov	sp, r7
   31480:	b00e      	add	sp, #56	; 0x38
   31482:	bdb0      	pop	{r4, r5, r7, pc}
   31484:	00039d98 	.word	0x00039d98
   31488:	00035005 	.word	0x00035005
   3148c:	00039da0 	.word	0x00039da0
   31490:	00034ff7 	.word	0x00034ff7
   31494:	00034bf5 	.word	0x00034bf5
   31498:	00034fbd 	.word	0x00034fbd
   3149c:	00034fab 	.word	0x00034fab
   314a0:	00034c09 	.word	0x00034c09
   314a4:	00034c3f 	.word	0x00034c3f
   314a8:	0003161d 	.word	0x0003161d
   314ac:	000314c9 	.word	0x000314c9
   314b0:	00025831 	.word	0x00025831
   314b4:	200042e4 	.word	0x200042e4
   314b8:	00031125 	.word	0x00031125
   314bc:	00025f7d 	.word	0x00025f7d
   314c0:	00025a45 	.word	0x00025a45
   314c4:	00026085 	.word	0x00026085

000314c8 <_http_client_clear_conn>:
   314c8:	b580      	push	{r7, lr}
   314ca:	b086      	sub	sp, #24
   314cc:	af00      	add	r7, sp, #0
   314ce:	6078      	str	r0, [r7, #4]
   314d0:	6039      	str	r1, [r7, #0]
   314d2:	687b      	ldr	r3, [r7, #4]
   314d4:	22c0      	movs	r2, #192	; 0xc0
   314d6:	589b      	ldr	r3, [r3, r2]
   314d8:	2b00      	cmp	r3, #0
   314da:	d007      	beq.n	314ec <_http_client_clear_conn+0x24>
   314dc:	687b      	ldr	r3, [r7, #4]
   314de:	22c0      	movs	r2, #192	; 0xc0
   314e0:	589b      	ldr	r3, [r3, r2]
   314e2:	687a      	ldr	r2, [r7, #4]
   314e4:	21c4      	movs	r1, #196	; 0xc4
   314e6:	5852      	ldr	r2, [r2, r1]
   314e8:	0010      	movs	r0, r2
   314ea:	4798      	blx	r3
   314ec:	687b      	ldr	r3, [r7, #4]
   314ee:	33b0      	adds	r3, #176	; 0xb0
   314f0:	2218      	movs	r2, #24
   314f2:	2100      	movs	r1, #0
   314f4:	0018      	movs	r0, r3
   314f6:	4b24      	ldr	r3, [pc, #144]	; (31588 <_http_client_clear_conn+0xc0>)
   314f8:	4798      	blx	r3
   314fa:	687b      	ldr	r3, [r7, #4]
   314fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   314fe:	2b00      	cmp	r3, #0
   31500:	d005      	beq.n	3150e <_http_client_clear_conn+0x46>
   31502:	687b      	ldr	r3, [r7, #4]
   31504:	781b      	ldrb	r3, [r3, #0]
   31506:	b25b      	sxtb	r3, r3
   31508:	0018      	movs	r0, r3
   3150a:	4b20      	ldr	r3, [pc, #128]	; (3158c <_http_client_clear_conn+0xc4>)
   3150c:	4798      	blx	r3
   3150e:	687b      	ldr	r3, [r7, #4]
   31510:	781b      	ldrb	r3, [r3, #0]
   31512:	b25b      	sxtb	r3, r3
   31514:	001a      	movs	r2, r3
   31516:	4b1e      	ldr	r3, [pc, #120]	; (31590 <_http_client_clear_conn+0xc8>)
   31518:	0092      	lsls	r2, r2, #2
   3151a:	2100      	movs	r1, #0
   3151c:	50d1      	str	r1, [r2, r3]
   3151e:	687b      	ldr	r3, [r7, #4]
   31520:	336c      	adds	r3, #108	; 0x6c
   31522:	226c      	movs	r2, #108	; 0x6c
   31524:	2100      	movs	r1, #0
   31526:	0018      	movs	r0, r3
   31528:	4b17      	ldr	r3, [pc, #92]	; (31588 <_http_client_clear_conn+0xc0>)
   3152a:	4798      	blx	r3
   3152c:	687b      	ldr	r3, [r7, #4]
   3152e:	33d8      	adds	r3, #216	; 0xd8
   31530:	2210      	movs	r2, #16
   31532:	2100      	movs	r1, #0
   31534:	0018      	movs	r0, r3
   31536:	4b14      	ldr	r3, [pc, #80]	; (31588 <_http_client_clear_conn+0xc0>)
   31538:	4798      	blx	r3
   3153a:	687b      	ldr	r3, [r7, #4]
   3153c:	2200      	movs	r2, #0
   3153e:	66da      	str	r2, [r3, #108]	; 0x6c
   31540:	687b      	ldr	r3, [r7, #4]
   31542:	22d8      	movs	r2, #216	; 0xd8
   31544:	2100      	movs	r1, #0
   31546:	5099      	str	r1, [r3, r2]
   31548:	687b      	ldr	r3, [r7, #4]
   3154a:	2241      	movs	r2, #65	; 0x41
   3154c:	5c99      	ldrb	r1, [r3, r2]
   3154e:	2001      	movs	r0, #1
   31550:	4381      	bics	r1, r0
   31552:	5499      	strb	r1, [r3, r2]
   31554:	687b      	ldr	r3, [r7, #4]
   31556:	2241      	movs	r2, #65	; 0x41
   31558:	5c99      	ldrb	r1, [r3, r2]
   3155a:	2002      	movs	r0, #2
   3155c:	4381      	bics	r1, r0
   3155e:	5499      	strb	r1, [r3, r2]
   31560:	230c      	movs	r3, #12
   31562:	18fb      	adds	r3, r7, r3
   31564:	683a      	ldr	r2, [r7, #0]
   31566:	601a      	str	r2, [r3, #0]
   31568:	687b      	ldr	r3, [r7, #4]
   3156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3156c:	2b00      	cmp	r3, #0
   3156e:	d006      	beq.n	3157e <_http_client_clear_conn+0xb6>
   31570:	687b      	ldr	r3, [r7, #4]
   31572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31574:	220c      	movs	r2, #12
   31576:	18ba      	adds	r2, r7, r2
   31578:	6878      	ldr	r0, [r7, #4]
   3157a:	2104      	movs	r1, #4
   3157c:	4798      	blx	r3
   3157e:	46c0      	nop			; (mov r8, r8)
   31580:	46bd      	mov	sp, r7
   31582:	b006      	add	sp, #24
   31584:	bd80      	pop	{r7, pc}
   31586:	46c0      	nop			; (mov r8, r8)
   31588:	00034c3f 	.word	0x00034c3f
   3158c:	00025e3d 	.word	0x00025e3d
   31590:	200042e4 	.word	0x200042e4

00031594 <_http_client_send_wait>:
   31594:	b590      	push	{r4, r7, lr}
   31596:	b087      	sub	sp, #28
   31598:	af00      	add	r7, sp, #0
   3159a:	60f8      	str	r0, [r7, #12]
   3159c:	60b9      	str	r1, [r7, #8]
   3159e:	607a      	str	r2, [r7, #4]
   315a0:	68fb      	ldr	r3, [r7, #12]
   315a2:	617b      	str	r3, [r7, #20]
   315a4:	697b      	ldr	r3, [r7, #20]
   315a6:	2241      	movs	r2, #65	; 0x41
   315a8:	5c99      	ldrb	r1, [r3, r2]
   315aa:	2001      	movs	r0, #1
   315ac:	4301      	orrs	r1, r0
   315ae:	5499      	strb	r1, [r3, r2]
   315b0:	697b      	ldr	r3, [r7, #20]
   315b2:	2000      	movs	r0, #0
   315b4:	5618      	ldrsb	r0, [r3, r0]
   315b6:	687b      	ldr	r3, [r7, #4]
   315b8:	b29a      	uxth	r2, r3
   315ba:	68b9      	ldr	r1, [r7, #8]
   315bc:	2300      	movs	r3, #0
   315be:	4c14      	ldr	r4, [pc, #80]	; (31610 <_http_client_send_wait+0x7c>)
   315c0:	47a0      	blx	r4
   315c2:	0003      	movs	r3, r0
   315c4:	613b      	str	r3, [r7, #16]
   315c6:	693b      	ldr	r3, [r7, #16]
   315c8:	2b00      	cmp	r3, #0
   315ca:	da0f      	bge.n	315ec <_http_client_send_wait+0x58>
   315cc:	697b      	ldr	r3, [r7, #20]
   315ce:	2241      	movs	r2, #65	; 0x41
   315d0:	5c99      	ldrb	r1, [r3, r2]
   315d2:	2001      	movs	r0, #1
   315d4:	4381      	bics	r1, r0
   315d6:	5499      	strb	r1, [r3, r2]
   315d8:	693b      	ldr	r3, [r7, #16]
   315da:	e014      	b.n	31606 <_http_client_send_wait+0x72>
   315dc:	2000      	movs	r0, #0
   315de:	4b0d      	ldr	r3, [pc, #52]	; (31614 <_http_client_send_wait+0x80>)
   315e0:	4798      	blx	r3
   315e2:	697b      	ldr	r3, [r7, #20]
   315e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   315e6:	0018      	movs	r0, r3
   315e8:	4b0b      	ldr	r3, [pc, #44]	; (31618 <_http_client_send_wait+0x84>)
   315ea:	4798      	blx	r3
   315ec:	697b      	ldr	r3, [r7, #20]
   315ee:	2241      	movs	r2, #65	; 0x41
   315f0:	5c9b      	ldrb	r3, [r3, r2]
   315f2:	2201      	movs	r2, #1
   315f4:	4013      	ands	r3, r2
   315f6:	b2db      	uxtb	r3, r3
   315f8:	2b00      	cmp	r3, #0
   315fa:	d003      	beq.n	31604 <_http_client_send_wait+0x70>
   315fc:	697b      	ldr	r3, [r7, #20]
   315fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31600:	2b02      	cmp	r3, #2
   31602:	d8eb      	bhi.n	315dc <_http_client_send_wait+0x48>
   31604:	2300      	movs	r3, #0
   31606:	0018      	movs	r0, r3
   31608:	46bd      	mov	sp, r7
   3160a:	b007      	add	sp, #28
   3160c:	bd90      	pop	{r4, r7, pc}
   3160e:	46c0      	nop			; (mov r8, r8)
   31610:	00025b59 	.word	0x00025b59
   31614:	00022205 	.word	0x00022205
   31618:	000328a1 	.word	0x000328a1

0003161c <_http_client_request>:
   3161c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3161e:	46c6      	mov	lr, r8
   31620:	b500      	push	{lr}
   31622:	b0a0      	sub	sp, #128	; 0x80
   31624:	af02      	add	r7, sp, #8
   31626:	61f8      	str	r0, [r7, #28]
   31628:	4668      	mov	r0, sp
   3162a:	61b8      	str	r0, [r7, #24]
   3162c:	2318      	movs	r3, #24
   3162e:	2218      	movs	r2, #24
   31630:	18ba      	adds	r2, r7, r2
   31632:	18d0      	adds	r0, r2, r3
   31634:	4bbd      	ldr	r3, [pc, #756]	; (3192c <_http_client_request+0x310>)
   31636:	469c      	mov	ip, r3
   31638:	4663      	mov	r3, ip
   3163a:	cb16      	ldmia	r3!, {r1, r2, r4}
   3163c:	c016      	stmia	r0!, {r1, r2, r4}
   3163e:	469c      	mov	ip, r3
   31640:	4663      	mov	r3, ip
   31642:	681b      	ldr	r3, [r3, #0]
   31644:	469c      	mov	ip, r3
   31646:	4663      	mov	r3, ip
   31648:	6003      	str	r3, [r0, #0]
   3164a:	69f8      	ldr	r0, [r7, #28]
   3164c:	6e40      	ldr	r0, [r0, #100]	; 0x64
   3164e:	4684      	mov	ip, r0
   31650:	2301      	movs	r3, #1
   31652:	425b      	negs	r3, r3
   31654:	4698      	mov	r8, r3
   31656:	44c4      	add	ip, r8
   31658:	4663      	mov	r3, ip
   3165a:	66fb      	str	r3, [r7, #108]	; 0x6c
   3165c:	6038      	str	r0, [r7, #0]
   3165e:	2300      	movs	r3, #0
   31660:	607b      	str	r3, [r7, #4]
   31662:	6839      	ldr	r1, [r7, #0]
   31664:	687a      	ldr	r2, [r7, #4]
   31666:	000b      	movs	r3, r1
   31668:	0f5b      	lsrs	r3, r3, #29
   3166a:	469c      	mov	ip, r3
   3166c:	0013      	movs	r3, r2
   3166e:	00db      	lsls	r3, r3, #3
   31670:	617b      	str	r3, [r7, #20]
   31672:	4663      	mov	r3, ip
   31674:	697c      	ldr	r4, [r7, #20]
   31676:	431c      	orrs	r4, r3
   31678:	617c      	str	r4, [r7, #20]
   3167a:	000b      	movs	r3, r1
   3167c:	00db      	lsls	r3, r3, #3
   3167e:	613b      	str	r3, [r7, #16]
   31680:	0005      	movs	r5, r0
   31682:	2200      	movs	r2, #0
   31684:	0016      	movs	r6, r2
   31686:	0f6a      	lsrs	r2, r5, #29
   31688:	00f3      	lsls	r3, r6, #3
   3168a:	60fb      	str	r3, [r7, #12]
   3168c:	68fb      	ldr	r3, [r7, #12]
   3168e:	4313      	orrs	r3, r2
   31690:	60fb      	str	r3, [r7, #12]
   31692:	00eb      	lsls	r3, r5, #3
   31694:	60bb      	str	r3, [r7, #8]
   31696:	1dc3      	adds	r3, r0, #7
   31698:	08db      	lsrs	r3, r3, #3
   3169a:	00db      	lsls	r3, r3, #3
   3169c:	466a      	mov	r2, sp
   3169e:	1ad3      	subs	r3, r2, r3
   316a0:	469d      	mov	sp, r3
   316a2:	ab02      	add	r3, sp, #8
   316a4:	3300      	adds	r3, #0
   316a6:	66bb      	str	r3, [r7, #104]	; 0x68
   316a8:	69fb      	ldr	r3, [r7, #28]
   316aa:	2b00      	cmp	r3, #0
   316ac:	d100      	bne.n	316b0 <_http_client_request+0x94>
   316ae:	e346      	b.n	31d3e <_http_client_request+0x722>
   316b0:	69fb      	ldr	r3, [r7, #28]
   316b2:	2241      	movs	r2, #65	; 0x41
   316b4:	5c9b      	ldrb	r3, [r3, r2]
   316b6:	2201      	movs	r2, #1
   316b8:	4013      	ands	r3, r2
   316ba:	b2db      	uxtb	r3, r3
   316bc:	2b00      	cmp	r3, #0
   316be:	d000      	beq.n	316c2 <_http_client_request+0xa6>
   316c0:	e33f      	b.n	31d42 <_http_client_request+0x726>
   316c2:	69fb      	ldr	r3, [r7, #28]
   316c4:	33b0      	adds	r3, #176	; 0xb0
   316c6:	667b      	str	r3, [r7, #100]	; 0x64
   316c8:	69fb      	ldr	r3, [r7, #28]
   316ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   316cc:	2b03      	cmp	r3, #3
   316ce:	d003      	beq.n	316d8 <_http_client_request+0xbc>
   316d0:	2b04      	cmp	r3, #4
   316d2:	d100      	bne.n	316d6 <_http_client_request+0xba>
   316d4:	e1b3      	b.n	31a3e <_http_client_request+0x422>
   316d6:	e32f      	b.n	31d38 <_http_client_request+0x71c>
   316d8:	69fb      	ldr	r3, [r7, #28]
   316da:	22cc      	movs	r2, #204	; 0xcc
   316dc:	2100      	movs	r1, #0
   316de:	5099      	str	r1, [r3, r2]
   316e0:	69fb      	ldr	r3, [r7, #28]
   316e2:	22d0      	movs	r2, #208	; 0xd0
   316e4:	2100      	movs	r1, #0
   316e6:	5099      	str	r1, [r3, r2]
   316e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   316ea:	69fb      	ldr	r3, [r7, #28]
   316ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   316ee:	4c90      	ldr	r4, [pc, #576]	; (31930 <_http_client_request+0x314>)
   316f0:	2334      	movs	r3, #52	; 0x34
   316f2:	2018      	movs	r0, #24
   316f4:	1838      	adds	r0, r7, r0
   316f6:	18c0      	adds	r0, r0, r3
   316f8:	69fb      	ldr	r3, [r7, #28]
   316fa:	9300      	str	r3, [sp, #0]
   316fc:	0023      	movs	r3, r4
   316fe:	4c8d      	ldr	r4, [pc, #564]	; (31934 <_http_client_request+0x318>)
   31700:	47a0      	blx	r4
   31702:	69fb      	ldr	r3, [r7, #28]
   31704:	22c8      	movs	r2, #200	; 0xc8
   31706:	5c9b      	ldrb	r3, [r3, r2]
   31708:	2b01      	cmp	r3, #1
   3170a:	d10a      	bne.n	31722 <_http_client_request+0x106>
   3170c:	498a      	ldr	r1, [pc, #552]	; (31938 <_http_client_request+0x31c>)
   3170e:	2334      	movs	r3, #52	; 0x34
   31710:	2218      	movs	r2, #24
   31712:	4694      	mov	ip, r2
   31714:	44bc      	add	ip, r7
   31716:	4463      	add	r3, ip
   31718:	2204      	movs	r2, #4
   3171a:	0018      	movs	r0, r3
   3171c:	4b87      	ldr	r3, [pc, #540]	; (3193c <_http_client_request+0x320>)
   3171e:	4798      	blx	r3
   31720:	e04e      	b.n	317c0 <_http_client_request+0x1a4>
   31722:	69fb      	ldr	r3, [r7, #28]
   31724:	22c8      	movs	r2, #200	; 0xc8
   31726:	5c9b      	ldrb	r3, [r3, r2]
   31728:	2b02      	cmp	r3, #2
   3172a:	d10a      	bne.n	31742 <_http_client_request+0x126>
   3172c:	4984      	ldr	r1, [pc, #528]	; (31940 <_http_client_request+0x324>)
   3172e:	2334      	movs	r3, #52	; 0x34
   31730:	2218      	movs	r2, #24
   31732:	4694      	mov	ip, r2
   31734:	44bc      	add	ip, r7
   31736:	4463      	add	r3, ip
   31738:	2205      	movs	r2, #5
   3173a:	0018      	movs	r0, r3
   3173c:	4b7f      	ldr	r3, [pc, #508]	; (3193c <_http_client_request+0x320>)
   3173e:	4798      	blx	r3
   31740:	e03e      	b.n	317c0 <_http_client_request+0x1a4>
   31742:	69fb      	ldr	r3, [r7, #28]
   31744:	22c8      	movs	r2, #200	; 0xc8
   31746:	5c9b      	ldrb	r3, [r3, r2]
   31748:	2b03      	cmp	r3, #3
   3174a:	d10a      	bne.n	31762 <_http_client_request+0x146>
   3174c:	497d      	ldr	r1, [pc, #500]	; (31944 <_http_client_request+0x328>)
   3174e:	2334      	movs	r3, #52	; 0x34
   31750:	2218      	movs	r2, #24
   31752:	4694      	mov	ip, r2
   31754:	44bc      	add	ip, r7
   31756:	4463      	add	r3, ip
   31758:	2207      	movs	r2, #7
   3175a:	0018      	movs	r0, r3
   3175c:	4b77      	ldr	r3, [pc, #476]	; (3193c <_http_client_request+0x320>)
   3175e:	4798      	blx	r3
   31760:	e02e      	b.n	317c0 <_http_client_request+0x1a4>
   31762:	69fb      	ldr	r3, [r7, #28]
   31764:	22c8      	movs	r2, #200	; 0xc8
   31766:	5c9b      	ldrb	r3, [r3, r2]
   31768:	2b04      	cmp	r3, #4
   3176a:	d10a      	bne.n	31782 <_http_client_request+0x166>
   3176c:	4976      	ldr	r1, [pc, #472]	; (31948 <_http_client_request+0x32c>)
   3176e:	2334      	movs	r3, #52	; 0x34
   31770:	2218      	movs	r2, #24
   31772:	4694      	mov	ip, r2
   31774:	44bc      	add	ip, r7
   31776:	4463      	add	r3, ip
   31778:	2204      	movs	r2, #4
   3177a:	0018      	movs	r0, r3
   3177c:	4b6f      	ldr	r3, [pc, #444]	; (3193c <_http_client_request+0x320>)
   3177e:	4798      	blx	r3
   31780:	e01e      	b.n	317c0 <_http_client_request+0x1a4>
   31782:	69fb      	ldr	r3, [r7, #28]
   31784:	22c8      	movs	r2, #200	; 0xc8
   31786:	5c9b      	ldrb	r3, [r3, r2]
   31788:	2b05      	cmp	r3, #5
   3178a:	d10a      	bne.n	317a2 <_http_client_request+0x186>
   3178c:	496f      	ldr	r1, [pc, #444]	; (3194c <_http_client_request+0x330>)
   3178e:	2334      	movs	r3, #52	; 0x34
   31790:	2218      	movs	r2, #24
   31792:	4694      	mov	ip, r2
   31794:	44bc      	add	ip, r7
   31796:	4463      	add	r3, ip
   31798:	2208      	movs	r2, #8
   3179a:	0018      	movs	r0, r3
   3179c:	4b67      	ldr	r3, [pc, #412]	; (3193c <_http_client_request+0x320>)
   3179e:	4798      	blx	r3
   317a0:	e00e      	b.n	317c0 <_http_client_request+0x1a4>
   317a2:	69fb      	ldr	r3, [r7, #28]
   317a4:	22c8      	movs	r2, #200	; 0xc8
   317a6:	5c9b      	ldrb	r3, [r3, r2]
   317a8:	2b06      	cmp	r3, #6
   317aa:	d109      	bne.n	317c0 <_http_client_request+0x1a4>
   317ac:	4968      	ldr	r1, [pc, #416]	; (31950 <_http_client_request+0x334>)
   317ae:	2334      	movs	r3, #52	; 0x34
   317b0:	2218      	movs	r2, #24
   317b2:	4694      	mov	ip, r2
   317b4:	44bc      	add	ip, r7
   317b6:	4463      	add	r3, ip
   317b8:	2205      	movs	r2, #5
   317ba:	0018      	movs	r0, r3
   317bc:	4b5f      	ldr	r3, [pc, #380]	; (3193c <_http_client_request+0x320>)
   317be:	4798      	blx	r3
   317c0:	69fb      	ldr	r3, [r7, #28]
   317c2:	3370      	adds	r3, #112	; 0x70
   317c4:	001c      	movs	r4, r3
   317c6:	69fb      	ldr	r3, [r7, #28]
   317c8:	3370      	adds	r3, #112	; 0x70
   317ca:	0018      	movs	r0, r3
   317cc:	4b61      	ldr	r3, [pc, #388]	; (31954 <_http_client_request+0x338>)
   317ce:	4798      	blx	r3
   317d0:	0002      	movs	r2, r0
   317d2:	2334      	movs	r3, #52	; 0x34
   317d4:	2118      	movs	r1, #24
   317d6:	468c      	mov	ip, r1
   317d8:	44bc      	add	ip, r7
   317da:	4463      	add	r3, ip
   317dc:	0021      	movs	r1, r4
   317de:	0018      	movs	r0, r3
   317e0:	4b56      	ldr	r3, [pc, #344]	; (3193c <_http_client_request+0x320>)
   317e2:	4798      	blx	r3
   317e4:	495c      	ldr	r1, [pc, #368]	; (31958 <_http_client_request+0x33c>)
   317e6:	2334      	movs	r3, #52	; 0x34
   317e8:	2218      	movs	r2, #24
   317ea:	4694      	mov	ip, r2
   317ec:	44bc      	add	ip, r7
   317ee:	4463      	add	r3, ip
   317f0:	220b      	movs	r2, #11
   317f2:	0018      	movs	r0, r3
   317f4:	4b51      	ldr	r3, [pc, #324]	; (3193c <_http_client_request+0x320>)
   317f6:	4798      	blx	r3
   317f8:	4958      	ldr	r1, [pc, #352]	; (3195c <_http_client_request+0x340>)
   317fa:	2334      	movs	r3, #52	; 0x34
   317fc:	2218      	movs	r2, #24
   317fe:	4694      	mov	ip, r2
   31800:	44bc      	add	ip, r7
   31802:	4463      	add	r3, ip
   31804:	220c      	movs	r2, #12
   31806:	0018      	movs	r0, r3
   31808:	4b4c      	ldr	r3, [pc, #304]	; (3193c <_http_client_request+0x320>)
   3180a:	4798      	blx	r3
   3180c:	69fb      	ldr	r3, [r7, #28]
   3180e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   31810:	69fb      	ldr	r3, [r7, #28]
   31812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   31814:	0018      	movs	r0, r3
   31816:	4b4f      	ldr	r3, [pc, #316]	; (31954 <_http_client_request+0x338>)
   31818:	4798      	blx	r3
   3181a:	0002      	movs	r2, r0
   3181c:	2334      	movs	r3, #52	; 0x34
   3181e:	2118      	movs	r1, #24
   31820:	468c      	mov	ip, r1
   31822:	44bc      	add	ip, r7
   31824:	4463      	add	r3, ip
   31826:	0021      	movs	r1, r4
   31828:	0018      	movs	r0, r3
   3182a:	4b44      	ldr	r3, [pc, #272]	; (3193c <_http_client_request+0x320>)
   3182c:	4798      	blx	r3
   3182e:	494c      	ldr	r1, [pc, #304]	; (31960 <_http_client_request+0x344>)
   31830:	2334      	movs	r3, #52	; 0x34
   31832:	2218      	movs	r2, #24
   31834:	4694      	mov	ip, r2
   31836:	44bc      	add	ip, r7
   31838:	4463      	add	r3, ip
   3183a:	2202      	movs	r2, #2
   3183c:	0018      	movs	r0, r3
   3183e:	4b3f      	ldr	r3, [pc, #252]	; (3193c <_http_client_request+0x320>)
   31840:	4798      	blx	r3
   31842:	4948      	ldr	r1, [pc, #288]	; (31964 <_http_client_request+0x348>)
   31844:	2334      	movs	r3, #52	; 0x34
   31846:	2218      	movs	r2, #24
   31848:	4694      	mov	ip, r2
   3184a:	44bc      	add	ip, r7
   3184c:	4463      	add	r3, ip
   3184e:	2206      	movs	r2, #6
   31850:	0018      	movs	r0, r3
   31852:	4b3a      	ldr	r3, [pc, #232]	; (3193c <_http_client_request+0x320>)
   31854:	4798      	blx	r3
   31856:	69fb      	ldr	r3, [r7, #28]
   31858:	1c5c      	adds	r4, r3, #1
   3185a:	69fb      	ldr	r3, [r7, #28]
   3185c:	3301      	adds	r3, #1
   3185e:	0018      	movs	r0, r3
   31860:	4b3c      	ldr	r3, [pc, #240]	; (31954 <_http_client_request+0x338>)
   31862:	4798      	blx	r3
   31864:	0002      	movs	r2, r0
   31866:	2334      	movs	r3, #52	; 0x34
   31868:	2118      	movs	r1, #24
   3186a:	468c      	mov	ip, r1
   3186c:	44bc      	add	ip, r7
   3186e:	4463      	add	r3, ip
   31870:	0021      	movs	r1, r4
   31872:	0018      	movs	r0, r3
   31874:	4b31      	ldr	r3, [pc, #196]	; (3193c <_http_client_request+0x320>)
   31876:	4798      	blx	r3
   31878:	4939      	ldr	r1, [pc, #228]	; (31960 <_http_client_request+0x344>)
   3187a:	2334      	movs	r3, #52	; 0x34
   3187c:	2218      	movs	r2, #24
   3187e:	4694      	mov	ip, r2
   31880:	44bc      	add	ip, r7
   31882:	4463      	add	r3, ip
   31884:	2202      	movs	r2, #2
   31886:	0018      	movs	r0, r3
   31888:	4b2c      	ldr	r3, [pc, #176]	; (3193c <_http_client_request+0x320>)
   3188a:	4798      	blx	r3
   3188c:	4936      	ldr	r1, [pc, #216]	; (31968 <_http_client_request+0x34c>)
   3188e:	2334      	movs	r3, #52	; 0x34
   31890:	2218      	movs	r2, #24
   31892:	4694      	mov	ip, r2
   31894:	44bc      	add	ip, r7
   31896:	4463      	add	r3, ip
   31898:	2218      	movs	r2, #24
   3189a:	0018      	movs	r0, r3
   3189c:	4b27      	ldr	r3, [pc, #156]	; (3193c <_http_client_request+0x320>)
   3189e:	4798      	blx	r3
   318a0:	4932      	ldr	r1, [pc, #200]	; (3196c <_http_client_request+0x350>)
   318a2:	2334      	movs	r3, #52	; 0x34
   318a4:	2218      	movs	r2, #24
   318a6:	4694      	mov	ip, r2
   318a8:	44bc      	add	ip, r7
   318aa:	4463      	add	r3, ip
   318ac:	2213      	movs	r2, #19
   318ae:	0018      	movs	r0, r3
   318b0:	4b22      	ldr	r3, [pc, #136]	; (3193c <_http_client_request+0x320>)
   318b2:	4798      	blx	r3
   318b4:	492e      	ldr	r1, [pc, #184]	; (31970 <_http_client_request+0x354>)
   318b6:	2334      	movs	r3, #52	; 0x34
   318b8:	2218      	movs	r2, #24
   318ba:	4694      	mov	ip, r2
   318bc:	44bc      	add	ip, r7
   318be:	4463      	add	r3, ip
   318c0:	2217      	movs	r2, #23
   318c2:	0018      	movs	r0, r3
   318c4:	4b1d      	ldr	r3, [pc, #116]	; (3193c <_http_client_request+0x320>)
   318c6:	4798      	blx	r3
   318c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   318ca:	68db      	ldr	r3, [r3, #12]
   318cc:	2b00      	cmp	r3, #0
   318ce:	d100      	bne.n	318d2 <_http_client_request+0x2b6>
   318d0:	e088      	b.n	319e4 <_http_client_request+0x3c8>
   318d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   318d4:	781b      	ldrb	r3, [r3, #0]
   318d6:	2b00      	cmp	r3, #0
   318d8:	d00f      	beq.n	318fa <_http_client_request+0x2de>
   318da:	69fb      	ldr	r3, [r7, #28]
   318dc:	21cc      	movs	r1, #204	; 0xcc
   318de:	2201      	movs	r2, #1
   318e0:	4252      	negs	r2, r2
   318e2:	505a      	str	r2, [r3, r1]
   318e4:	4923      	ldr	r1, [pc, #140]	; (31974 <_http_client_request+0x358>)
   318e6:	2334      	movs	r3, #52	; 0x34
   318e8:	2218      	movs	r2, #24
   318ea:	4694      	mov	ip, r2
   318ec:	44bc      	add	ip, r7
   318ee:	4463      	add	r3, ip
   318f0:	221c      	movs	r2, #28
   318f2:	0018      	movs	r0, r3
   318f4:	4b11      	ldr	r3, [pc, #68]	; (3193c <_http_client_request+0x320>)
   318f6:	4798      	blx	r3
   318f8:	e074      	b.n	319e4 <_http_client_request+0x3c8>
   318fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   318fc:	689b      	ldr	r3, [r3, #8]
   318fe:	2b00      	cmp	r3, #0
   31900:	d070      	beq.n	319e4 <_http_client_request+0x3c8>
   31902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31904:	689a      	ldr	r2, [r3, #8]
   31906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31908:	695b      	ldr	r3, [r3, #20]
   3190a:	0018      	movs	r0, r3
   3190c:	4790      	blx	r2
   3190e:	0001      	movs	r1, r0
   31910:	69fb      	ldr	r3, [r7, #28]
   31912:	22cc      	movs	r2, #204	; 0xcc
   31914:	5099      	str	r1, [r3, r2]
   31916:	69fb      	ldr	r3, [r7, #28]
   31918:	22cc      	movs	r2, #204	; 0xcc
   3191a:	589b      	ldr	r3, [r3, r2]
   3191c:	2b00      	cmp	r3, #0
   3191e:	da2b      	bge.n	31978 <_http_client_request+0x35c>
   31920:	69fb      	ldr	r3, [r7, #28]
   31922:	22cc      	movs	r2, #204	; 0xcc
   31924:	2100      	movs	r1, #0
   31926:	5099      	str	r1, [r3, r2]
   31928:	e05c      	b.n	319e4 <_http_client_request+0x3c8>
   3192a:	46c0      	nop			; (mov r8, r8)
   3192c:	00039e88 	.word	0x00039e88
   31930:	00031595 	.word	0x00031595
   31934:	000324fd 	.word	0x000324fd
   31938:	00039dac 	.word	0x00039dac
   3193c:	0003257d 	.word	0x0003257d
   31940:	00039db4 	.word	0x00039db4
   31944:	00039dbc 	.word	0x00039dbc
   31948:	00039dc4 	.word	0x00039dc4
   3194c:	00039dcc 	.word	0x00039dcc
   31950:	00039dd8 	.word	0x00039dd8
   31954:	00034ff7 	.word	0x00034ff7
   31958:	00039de0 	.word	0x00039de0
   3195c:	00039dec 	.word	0x00039dec
   31960:	00039dfc 	.word	0x00039dfc
   31964:	00039e00 	.word	0x00039e00
   31968:	00039e08 	.word	0x00039e08
   3196c:	00039e24 	.word	0x00039e24
   31970:	00039e38 	.word	0x00039e38
   31974:	00039e50 	.word	0x00039e50
   31978:	69fb      	ldr	r3, [r7, #28]
   3197a:	22cc      	movs	r2, #204	; 0xcc
   3197c:	589b      	ldr	r3, [r3, r2]
   3197e:	001a      	movs	r2, r3
   31980:	49e0      	ldr	r1, [pc, #896]	; (31d04 <_http_client_request+0x6e8>)
   31982:	2328      	movs	r3, #40	; 0x28
   31984:	2018      	movs	r0, #24
   31986:	4684      	mov	ip, r0
   31988:	44bc      	add	ip, r7
   3198a:	4463      	add	r3, ip
   3198c:	0018      	movs	r0, r3
   3198e:	4bde      	ldr	r3, [pc, #888]	; (31d08 <_http_client_request+0x6ec>)
   31990:	4798      	blx	r3
   31992:	49de      	ldr	r1, [pc, #888]	; (31d0c <_http_client_request+0x6f0>)
   31994:	2334      	movs	r3, #52	; 0x34
   31996:	2218      	movs	r2, #24
   31998:	4694      	mov	ip, r2
   3199a:	44bc      	add	ip, r7
   3199c:	4463      	add	r3, ip
   3199e:	2210      	movs	r2, #16
   319a0:	0018      	movs	r0, r3
   319a2:	4bdb      	ldr	r3, [pc, #876]	; (31d10 <_http_client_request+0x6f4>)
   319a4:	4798      	blx	r3
   319a6:	2328      	movs	r3, #40	; 0x28
   319a8:	2218      	movs	r2, #24
   319aa:	4694      	mov	ip, r2
   319ac:	44bc      	add	ip, r7
   319ae:	4463      	add	r3, ip
   319b0:	0018      	movs	r0, r3
   319b2:	4bd8      	ldr	r3, [pc, #864]	; (31d14 <_http_client_request+0x6f8>)
   319b4:	4798      	blx	r3
   319b6:	0002      	movs	r2, r0
   319b8:	2328      	movs	r3, #40	; 0x28
   319ba:	2118      	movs	r1, #24
   319bc:	1879      	adds	r1, r7, r1
   319be:	18c9      	adds	r1, r1, r3
   319c0:	2334      	movs	r3, #52	; 0x34
   319c2:	2018      	movs	r0, #24
   319c4:	4684      	mov	ip, r0
   319c6:	44bc      	add	ip, r7
   319c8:	4463      	add	r3, ip
   319ca:	0018      	movs	r0, r3
   319cc:	4bd0      	ldr	r3, [pc, #832]	; (31d10 <_http_client_request+0x6f4>)
   319ce:	4798      	blx	r3
   319d0:	49d1      	ldr	r1, [pc, #836]	; (31d18 <_http_client_request+0x6fc>)
   319d2:	2334      	movs	r3, #52	; 0x34
   319d4:	2218      	movs	r2, #24
   319d6:	4694      	mov	ip, r2
   319d8:	44bc      	add	ip, r7
   319da:	4463      	add	r3, ip
   319dc:	2202      	movs	r2, #2
   319de:	0018      	movs	r0, r3
   319e0:	4bcb      	ldr	r3, [pc, #812]	; (31d10 <_http_client_request+0x6f4>)
   319e2:	4798      	blx	r3
   319e4:	69fb      	ldr	r3, [r7, #28]
   319e6:	22d4      	movs	r2, #212	; 0xd4
   319e8:	589b      	ldr	r3, [r3, r2]
   319ea:	2b00      	cmp	r3, #0
   319ec:	d012      	beq.n	31a14 <_http_client_request+0x3f8>
   319ee:	69fb      	ldr	r3, [r7, #28]
   319f0:	22d4      	movs	r2, #212	; 0xd4
   319f2:	589c      	ldr	r4, [r3, r2]
   319f4:	69fb      	ldr	r3, [r7, #28]
   319f6:	22d4      	movs	r2, #212	; 0xd4
   319f8:	589b      	ldr	r3, [r3, r2]
   319fa:	0018      	movs	r0, r3
   319fc:	4bc5      	ldr	r3, [pc, #788]	; (31d14 <_http_client_request+0x6f8>)
   319fe:	4798      	blx	r3
   31a00:	0002      	movs	r2, r0
   31a02:	2334      	movs	r3, #52	; 0x34
   31a04:	2118      	movs	r1, #24
   31a06:	468c      	mov	ip, r1
   31a08:	44bc      	add	ip, r7
   31a0a:	4463      	add	r3, ip
   31a0c:	0021      	movs	r1, r4
   31a0e:	0018      	movs	r0, r3
   31a10:	4bbf      	ldr	r3, [pc, #764]	; (31d10 <_http_client_request+0x6f4>)
   31a12:	4798      	blx	r3
   31a14:	49c0      	ldr	r1, [pc, #768]	; (31d18 <_http_client_request+0x6fc>)
   31a16:	2334      	movs	r3, #52	; 0x34
   31a18:	2218      	movs	r2, #24
   31a1a:	4694      	mov	ip, r2
   31a1c:	44bc      	add	ip, r7
   31a1e:	4463      	add	r3, ip
   31a20:	2202      	movs	r2, #2
   31a22:	0018      	movs	r0, r3
   31a24:	4bba      	ldr	r3, [pc, #744]	; (31d10 <_http_client_request+0x6f4>)
   31a26:	4798      	blx	r3
   31a28:	2334      	movs	r3, #52	; 0x34
   31a2a:	2218      	movs	r2, #24
   31a2c:	4694      	mov	ip, r2
   31a2e:	44bc      	add	ip, r7
   31a30:	4463      	add	r3, ip
   31a32:	0018      	movs	r0, r3
   31a34:	4bb9      	ldr	r3, [pc, #740]	; (31d1c <_http_client_request+0x700>)
   31a36:	4798      	blx	r3
   31a38:	69fb      	ldr	r3, [r7, #28]
   31a3a:	2204      	movs	r2, #4
   31a3c:	66da      	str	r2, [r3, #108]	; 0x6c
   31a3e:	69fb      	ldr	r3, [r7, #28]
   31a40:	22cc      	movs	r2, #204	; 0xcc
   31a42:	589b      	ldr	r3, [r3, r2]
   31a44:	2b00      	cmp	r3, #0
   31a46:	db00      	blt.n	31a4a <_http_client_request+0x42e>
   31a48:	e0c6      	b.n	31bd8 <_http_client_request+0x5bc>
   31a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31a4c:	68db      	ldr	r3, [r3, #12]
   31a4e:	2b00      	cmp	r3, #0
   31a50:	d100      	bne.n	31a54 <_http_client_request+0x438>
   31a52:	e0c1      	b.n	31bd8 <_http_client_request+0x5bc>
   31a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31a56:	68dc      	ldr	r4, [r3, #12]
   31a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31a5a:	6958      	ldr	r0, [r3, #20]
   31a5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31a5e:	1d59      	adds	r1, r3, #5
   31a60:	69fb      	ldr	r3, [r7, #28]
   31a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   31a64:	1fdd      	subs	r5, r3, #7
   31a66:	69fb      	ldr	r3, [r7, #28]
   31a68:	22d0      	movs	r2, #208	; 0xd0
   31a6a:	589b      	ldr	r3, [r3, r2]
   31a6c:	002a      	movs	r2, r5
   31a6e:	47a0      	blx	r4
   31a70:	0003      	movs	r3, r0
   31a72:	677b      	str	r3, [r7, #116]	; 0x74
   31a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31a76:	2b00      	cmp	r3, #0
   31a78:	da01      	bge.n	31a7e <_http_client_request+0x462>
   31a7a:	2300      	movs	r3, #0
   31a7c:	677b      	str	r3, [r7, #116]	; 0x74
   31a7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31a80:	220a      	movs	r2, #10
   31a82:	711a      	strb	r2, [r3, #4]
   31a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31a86:	220d      	movs	r2, #13
   31a88:	70da      	strb	r2, [r3, #3]
   31a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31a8c:	3305      	adds	r3, #5
   31a8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31a90:	210d      	movs	r1, #13
   31a92:	54d1      	strb	r1, [r2, r3]
   31a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31a96:	3306      	adds	r3, #6
   31a98:	6eba      	ldr	r2, [r7, #104]	; 0x68
   31a9a:	210a      	movs	r1, #10
   31a9c:	54d1      	strb	r1, [r2, r3]
   31a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31aa0:	2b00      	cmp	r3, #0
   31aa2:	db14      	blt.n	31ace <_http_client_request+0x4b2>
   31aa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31aa6:	3302      	adds	r3, #2
   31aa8:	673b      	str	r3, [r7, #112]	; 0x70
   31aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31aac:	4a9c      	ldr	r2, [pc, #624]	; (31d20 <_http_client_request+0x704>)
   31aae:	4013      	ands	r3, r2
   31ab0:	d504      	bpl.n	31abc <_http_client_request+0x4a0>
   31ab2:	3b01      	subs	r3, #1
   31ab4:	2210      	movs	r2, #16
   31ab6:	4252      	negs	r2, r2
   31ab8:	4313      	orrs	r3, r2
   31aba:	3301      	adds	r3, #1
   31abc:	001a      	movs	r2, r3
   31abe:	2318      	movs	r3, #24
   31ac0:	2118      	movs	r1, #24
   31ac2:	468c      	mov	ip, r1
   31ac4:	44bc      	add	ip, r7
   31ac6:	4463      	add	r3, ip
   31ac8:	5c9a      	ldrb	r2, [r3, r2]
   31aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31acc:	701a      	strb	r2, [r3, #0]
   31ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31ad0:	2b0f      	cmp	r3, #15
   31ad2:	dd19      	ble.n	31b08 <_http_client_request+0x4ec>
   31ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31ad6:	3301      	adds	r3, #1
   31ad8:	673b      	str	r3, [r7, #112]	; 0x70
   31ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31adc:	2b00      	cmp	r3, #0
   31ade:	da00      	bge.n	31ae2 <_http_client_request+0x4c6>
   31ae0:	330f      	adds	r3, #15
   31ae2:	111b      	asrs	r3, r3, #4
   31ae4:	001a      	movs	r2, r3
   31ae6:	4b8e      	ldr	r3, [pc, #568]	; (31d20 <_http_client_request+0x704>)
   31ae8:	4013      	ands	r3, r2
   31aea:	d504      	bpl.n	31af6 <_http_client_request+0x4da>
   31aec:	3b01      	subs	r3, #1
   31aee:	2210      	movs	r2, #16
   31af0:	4252      	negs	r2, r2
   31af2:	4313      	orrs	r3, r2
   31af4:	3301      	adds	r3, #1
   31af6:	001a      	movs	r2, r3
   31af8:	2318      	movs	r3, #24
   31afa:	2118      	movs	r1, #24
   31afc:	468c      	mov	ip, r1
   31afe:	44bc      	add	ip, r7
   31b00:	4463      	add	r3, ip
   31b02:	5c9a      	ldrb	r2, [r3, r2]
   31b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31b06:	701a      	strb	r2, [r3, #0]
   31b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31b0a:	2bff      	cmp	r3, #255	; 0xff
   31b0c:	dd18      	ble.n	31b40 <_http_client_request+0x524>
   31b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31b10:	673b      	str	r3, [r7, #112]	; 0x70
   31b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31b14:	2b00      	cmp	r3, #0
   31b16:	da00      	bge.n	31b1a <_http_client_request+0x4fe>
   31b18:	33ff      	adds	r3, #255	; 0xff
   31b1a:	121b      	asrs	r3, r3, #8
   31b1c:	001a      	movs	r2, r3
   31b1e:	4b80      	ldr	r3, [pc, #512]	; (31d20 <_http_client_request+0x704>)
   31b20:	4013      	ands	r3, r2
   31b22:	d504      	bpl.n	31b2e <_http_client_request+0x512>
   31b24:	3b01      	subs	r3, #1
   31b26:	2210      	movs	r2, #16
   31b28:	4252      	negs	r2, r2
   31b2a:	4313      	orrs	r3, r2
   31b2c:	3301      	adds	r3, #1
   31b2e:	001a      	movs	r2, r3
   31b30:	2318      	movs	r3, #24
   31b32:	2118      	movs	r1, #24
   31b34:	468c      	mov	ip, r1
   31b36:	44bc      	add	ip, r7
   31b38:	4463      	add	r3, ip
   31b3a:	5c9a      	ldrb	r2, [r3, r2]
   31b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31b3e:	701a      	strb	r2, [r3, #0]
   31b40:	69fb      	ldr	r3, [r7, #28]
   31b42:	2000      	movs	r0, #0
   31b44:	5618      	ldrsb	r0, [r3, r0]
   31b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   31b48:	3303      	adds	r3, #3
   31b4a:	001a      	movs	r2, r3
   31b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   31b4e:	1ad3      	subs	r3, r2, r3
   31b50:	b29a      	uxth	r2, r3
   31b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31b54:	b29b      	uxth	r3, r3
   31b56:	18d3      	adds	r3, r2, r3
   31b58:	b29b      	uxth	r3, r3
   31b5a:	3304      	adds	r3, #4
   31b5c:	b29a      	uxth	r2, r3
   31b5e:	6f39      	ldr	r1, [r7, #112]	; 0x70
   31b60:	2300      	movs	r3, #0
   31b62:	4c70      	ldr	r4, [pc, #448]	; (31d24 <_http_client_request+0x708>)
   31b64:	47a0      	blx	r4
   31b66:	0003      	movs	r3, r0
   31b68:	663b      	str	r3, [r7, #96]	; 0x60
   31b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31b6c:	2b00      	cmp	r3, #0
   31b6e:	da07      	bge.n	31b80 <_http_client_request+0x564>
   31b70:	2305      	movs	r3, #5
   31b72:	425a      	negs	r2, r3
   31b74:	69fb      	ldr	r3, [r7, #28]
   31b76:	0011      	movs	r1, r2
   31b78:	0018      	movs	r0, r3
   31b7a:	4b6b      	ldr	r3, [pc, #428]	; (31d28 <_http_client_request+0x70c>)
   31b7c:	4798      	blx	r3
   31b7e:	e0e1      	b.n	31d44 <_http_client_request+0x728>
   31b80:	69fb      	ldr	r3, [r7, #28]
   31b82:	22d0      	movs	r2, #208	; 0xd0
   31b84:	589a      	ldr	r2, [r3, r2]
   31b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31b88:	18d2      	adds	r2, r2, r3
   31b8a:	69fb      	ldr	r3, [r7, #28]
   31b8c:	21d0      	movs	r1, #208	; 0xd0
   31b8e:	505a      	str	r2, [r3, r1]
   31b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31b92:	2b00      	cmp	r3, #0
   31b94:	d000      	beq.n	31b98 <_http_client_request+0x57c>
   31b96:	e0c9      	b.n	31d2c <_http_client_request+0x710>
   31b98:	69fb      	ldr	r3, [r7, #28]
   31b9a:	22c0      	movs	r2, #192	; 0xc0
   31b9c:	589b      	ldr	r3, [r3, r2]
   31b9e:	2b00      	cmp	r3, #0
   31ba0:	d007      	beq.n	31bb2 <_http_client_request+0x596>
   31ba2:	69fb      	ldr	r3, [r7, #28]
   31ba4:	22c0      	movs	r2, #192	; 0xc0
   31ba6:	589b      	ldr	r3, [r3, r2]
   31ba8:	69fa      	ldr	r2, [r7, #28]
   31baa:	21c4      	movs	r1, #196	; 0xc4
   31bac:	5852      	ldr	r2, [r2, r1]
   31bae:	0010      	movs	r0, r2
   31bb0:	4798      	blx	r3
   31bb2:	69fb      	ldr	r3, [r7, #28]
   31bb4:	2202      	movs	r2, #2
   31bb6:	66da      	str	r2, [r3, #108]	; 0x6c
   31bb8:	69fb      	ldr	r3, [r7, #28]
   31bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31bbc:	2b00      	cmp	r3, #0
   31bbe:	d100      	bne.n	31bc2 <_http_client_request+0x5a6>
   31bc0:	e0b5      	b.n	31d2e <_http_client_request+0x712>
   31bc2:	69fb      	ldr	r3, [r7, #28]
   31bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31bc6:	220c      	movs	r2, #12
   31bc8:	2118      	movs	r1, #24
   31bca:	468c      	mov	ip, r1
   31bcc:	44bc      	add	ip, r7
   31bce:	4462      	add	r2, ip
   31bd0:	69f8      	ldr	r0, [r7, #28]
   31bd2:	2101      	movs	r1, #1
   31bd4:	4798      	blx	r3
   31bd6:	e0aa      	b.n	31d2e <_http_client_request+0x712>
   31bd8:	69fb      	ldr	r3, [r7, #28]
   31bda:	22cc      	movs	r2, #204	; 0xcc
   31bdc:	589b      	ldr	r3, [r3, r2]
   31bde:	2b00      	cmp	r3, #0
   31be0:	dc00      	bgt.n	31be4 <_http_client_request+0x5c8>
   31be2:	e07c      	b.n	31cde <_http_client_request+0x6c2>
   31be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31be6:	68db      	ldr	r3, [r3, #12]
   31be8:	2b00      	cmp	r3, #0
   31bea:	d100      	bne.n	31bee <_http_client_request+0x5d2>
   31bec:	e077      	b.n	31cde <_http_client_request+0x6c2>
   31bee:	69fb      	ldr	r3, [r7, #28]
   31bf0:	22d0      	movs	r2, #208	; 0xd0
   31bf2:	589a      	ldr	r2, [r3, r2]
   31bf4:	69fb      	ldr	r3, [r7, #28]
   31bf6:	21cc      	movs	r1, #204	; 0xcc
   31bf8:	585b      	ldr	r3, [r3, r1]
   31bfa:	429a      	cmp	r2, r3
   31bfc:	db1f      	blt.n	31c3e <_http_client_request+0x622>
   31bfe:	69fb      	ldr	r3, [r7, #28]
   31c00:	22c0      	movs	r2, #192	; 0xc0
   31c02:	589b      	ldr	r3, [r3, r2]
   31c04:	2b00      	cmp	r3, #0
   31c06:	d007      	beq.n	31c18 <_http_client_request+0x5fc>
   31c08:	69fb      	ldr	r3, [r7, #28]
   31c0a:	22c0      	movs	r2, #192	; 0xc0
   31c0c:	589b      	ldr	r3, [r3, r2]
   31c0e:	69fa      	ldr	r2, [r7, #28]
   31c10:	21c4      	movs	r1, #196	; 0xc4
   31c12:	5852      	ldr	r2, [r2, r1]
   31c14:	0010      	movs	r0, r2
   31c16:	4798      	blx	r3
   31c18:	69fb      	ldr	r3, [r7, #28]
   31c1a:	2202      	movs	r2, #2
   31c1c:	66da      	str	r2, [r3, #108]	; 0x6c
   31c1e:	69fb      	ldr	r3, [r7, #28]
   31c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31c22:	2b00      	cmp	r3, #0
   31c24:	d100      	bne.n	31c28 <_http_client_request+0x60c>
   31c26:	e084      	b.n	31d32 <_http_client_request+0x716>
   31c28:	69fb      	ldr	r3, [r7, #28]
   31c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31c2c:	220c      	movs	r2, #12
   31c2e:	2118      	movs	r1, #24
   31c30:	468c      	mov	ip, r1
   31c32:	44bc      	add	ip, r7
   31c34:	4462      	add	r2, ip
   31c36:	69f8      	ldr	r0, [r7, #28]
   31c38:	2101      	movs	r1, #1
   31c3a:	4798      	blx	r3
   31c3c:	e079      	b.n	31d32 <_http_client_request+0x716>
   31c3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31c40:	68dc      	ldr	r4, [r3, #12]
   31c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   31c44:	6958      	ldr	r0, [r3, #20]
   31c46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31c48:	69fb      	ldr	r3, [r7, #28]
   31c4a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   31c4c:	69fb      	ldr	r3, [r7, #28]
   31c4e:	22d0      	movs	r2, #208	; 0xd0
   31c50:	589b      	ldr	r3, [r3, r2]
   31c52:	002a      	movs	r2, r5
   31c54:	47a0      	blx	r4
   31c56:	0003      	movs	r3, r0
   31c58:	677b      	str	r3, [r7, #116]	; 0x74
   31c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31c5c:	2b00      	cmp	r3, #0
   31c5e:	da0d      	bge.n	31c7c <_http_client_request+0x660>
   31c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31c62:	2b00      	cmp	r3, #0
   31c64:	d102      	bne.n	31c6c <_http_client_request+0x650>
   31c66:	234d      	movs	r3, #77	; 0x4d
   31c68:	425b      	negs	r3, r3
   31c6a:	e001      	b.n	31c70 <_http_client_request+0x654>
   31c6c:	2305      	movs	r3, #5
   31c6e:	425b      	negs	r3, r3
   31c70:	69fa      	ldr	r2, [r7, #28]
   31c72:	0019      	movs	r1, r3
   31c74:	0010      	movs	r0, r2
   31c76:	4b2c      	ldr	r3, [pc, #176]	; (31d28 <_http_client_request+0x70c>)
   31c78:	4798      	blx	r3
   31c7a:	e057      	b.n	31d2c <_http_client_request+0x710>
   31c7c:	69fb      	ldr	r3, [r7, #28]
   31c7e:	22cc      	movs	r2, #204	; 0xcc
   31c80:	589a      	ldr	r2, [r3, r2]
   31c82:	69fb      	ldr	r3, [r7, #28]
   31c84:	21d0      	movs	r1, #208	; 0xd0
   31c86:	585b      	ldr	r3, [r3, r1]
   31c88:	1ad2      	subs	r2, r2, r3
   31c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31c8c:	429a      	cmp	r2, r3
   31c8e:	da07      	bge.n	31ca0 <_http_client_request+0x684>
   31c90:	69fb      	ldr	r3, [r7, #28]
   31c92:	22cc      	movs	r2, #204	; 0xcc
   31c94:	589a      	ldr	r2, [r3, r2]
   31c96:	69fb      	ldr	r3, [r7, #28]
   31c98:	21d0      	movs	r1, #208	; 0xd0
   31c9a:	585b      	ldr	r3, [r3, r1]
   31c9c:	1ad3      	subs	r3, r2, r3
   31c9e:	677b      	str	r3, [r7, #116]	; 0x74
   31ca0:	69fb      	ldr	r3, [r7, #28]
   31ca2:	2000      	movs	r0, #0
   31ca4:	5618      	ldrsb	r0, [r3, r0]
   31ca6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   31ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31caa:	b29a      	uxth	r2, r3
   31cac:	2300      	movs	r3, #0
   31cae:	4c1d      	ldr	r4, [pc, #116]	; (31d24 <_http_client_request+0x708>)
   31cb0:	47a0      	blx	r4
   31cb2:	0003      	movs	r3, r0
   31cb4:	663b      	str	r3, [r7, #96]	; 0x60
   31cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   31cb8:	2b00      	cmp	r3, #0
   31cba:	da07      	bge.n	31ccc <_http_client_request+0x6b0>
   31cbc:	2305      	movs	r3, #5
   31cbe:	425a      	negs	r2, r3
   31cc0:	69fb      	ldr	r3, [r7, #28]
   31cc2:	0011      	movs	r1, r2
   31cc4:	0018      	movs	r0, r3
   31cc6:	4b18      	ldr	r3, [pc, #96]	; (31d28 <_http_client_request+0x70c>)
   31cc8:	4798      	blx	r3
   31cca:	e03b      	b.n	31d44 <_http_client_request+0x728>
   31ccc:	69fb      	ldr	r3, [r7, #28]
   31cce:	22d0      	movs	r2, #208	; 0xd0
   31cd0:	589a      	ldr	r2, [r3, r2]
   31cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   31cd4:	18d2      	adds	r2, r2, r3
   31cd6:	69fb      	ldr	r3, [r7, #28]
   31cd8:	21d0      	movs	r1, #208	; 0xd0
   31cda:	505a      	str	r2, [r3, r1]
   31cdc:	e026      	b.n	31d2c <_http_client_request+0x710>
   31cde:	69fb      	ldr	r3, [r7, #28]
   31ce0:	2202      	movs	r2, #2
   31ce2:	66da      	str	r2, [r3, #108]	; 0x6c
   31ce4:	69fb      	ldr	r3, [r7, #28]
   31ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ce8:	2b00      	cmp	r3, #0
   31cea:	d024      	beq.n	31d36 <_http_client_request+0x71a>
   31cec:	69fb      	ldr	r3, [r7, #28]
   31cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31cf0:	220c      	movs	r2, #12
   31cf2:	2118      	movs	r1, #24
   31cf4:	468c      	mov	ip, r1
   31cf6:	44bc      	add	ip, r7
   31cf8:	4462      	add	r2, ip
   31cfa:	69f8      	ldr	r0, [r7, #28]
   31cfc:	2101      	movs	r1, #1
   31cfe:	4798      	blx	r3
   31d00:	e019      	b.n	31d36 <_http_client_request+0x71a>
   31d02:	46c0      	nop			; (mov r8, r8)
   31d04:	00039e70 	.word	0x00039e70
   31d08:	00034efd 	.word	0x00034efd
   31d0c:	00039e74 	.word	0x00039e74
   31d10:	0003257d 	.word	0x0003257d
   31d14:	00034ff7 	.word	0x00034ff7
   31d18:	00039dfc 	.word	0x00039dfc
   31d1c:	000325b9 	.word	0x000325b9
   31d20:	8000000f 	.word	0x8000000f
   31d24:	00025b59 	.word	0x00025b59
   31d28:	000314c9 	.word	0x000314c9
   31d2c:	e004      	b.n	31d38 <_http_client_request+0x71c>
   31d2e:	46c0      	nop			; (mov r8, r8)
   31d30:	e002      	b.n	31d38 <_http_client_request+0x71c>
   31d32:	46c0      	nop			; (mov r8, r8)
   31d34:	e000      	b.n	31d38 <_http_client_request+0x71c>
   31d36:	46c0      	nop			; (mov r8, r8)
   31d38:	69bb      	ldr	r3, [r7, #24]
   31d3a:	469d      	mov	sp, r3
   31d3c:	e004      	b.n	31d48 <_http_client_request+0x72c>
   31d3e:	46c0      	nop			; (mov r8, r8)
   31d40:	e000      	b.n	31d44 <_http_client_request+0x728>
   31d42:	46c0      	nop			; (mov r8, r8)
   31d44:	69bb      	ldr	r3, [r7, #24]
   31d46:	469d      	mov	sp, r3
   31d48:	46bd      	mov	sp, r7
   31d4a:	b01e      	add	sp, #120	; 0x78
   31d4c:	bc04      	pop	{r2}
   31d4e:	4690      	mov	r8, r2
   31d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31d52:	46c0      	nop			; (mov r8, r8)

00031d54 <_http_client_recv_packet>:
   31d54:	b590      	push	{r4, r7, lr}
   31d56:	b083      	sub	sp, #12
   31d58:	af00      	add	r7, sp, #0
   31d5a:	6078      	str	r0, [r7, #4]
   31d5c:	687b      	ldr	r3, [r7, #4]
   31d5e:	2b00      	cmp	r3, #0
   31d60:	d021      	beq.n	31da6 <_http_client_recv_packet+0x52>
   31d62:	687b      	ldr	r3, [r7, #4]
   31d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31d66:	687b      	ldr	r3, [r7, #4]
   31d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31d6a:	429a      	cmp	r2, r3
   31d6c:	d307      	bcc.n	31d7e <_http_client_recv_packet+0x2a>
   31d6e:	238b      	movs	r3, #139	; 0x8b
   31d70:	425a      	negs	r2, r3
   31d72:	687b      	ldr	r3, [r7, #4]
   31d74:	0011      	movs	r1, r2
   31d76:	0018      	movs	r0, r3
   31d78:	4b0d      	ldr	r3, [pc, #52]	; (31db0 <_http_client_recv_packet+0x5c>)
   31d7a:	4798      	blx	r3
   31d7c:	e014      	b.n	31da8 <_http_client_recv_packet+0x54>
   31d7e:	687b      	ldr	r3, [r7, #4]
   31d80:	2000      	movs	r0, #0
   31d82:	5618      	ldrsb	r0, [r3, r0]
   31d84:	687b      	ldr	r3, [r7, #4]
   31d86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   31d88:	687b      	ldr	r3, [r7, #4]
   31d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31d8c:	18d1      	adds	r1, r2, r3
   31d8e:	687b      	ldr	r3, [r7, #4]
   31d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31d92:	b29a      	uxth	r2, r3
   31d94:	687b      	ldr	r3, [r7, #4]
   31d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31d98:	b29b      	uxth	r3, r3
   31d9a:	1ad3      	subs	r3, r2, r3
   31d9c:	b29a      	uxth	r2, r3
   31d9e:	2300      	movs	r3, #0
   31da0:	4c04      	ldr	r4, [pc, #16]	; (31db4 <_http_client_recv_packet+0x60>)
   31da2:	47a0      	blx	r4
   31da4:	e000      	b.n	31da8 <_http_client_recv_packet+0x54>
   31da6:	46c0      	nop			; (mov r8, r8)
   31da8:	46bd      	mov	sp, r7
   31daa:	b003      	add	sp, #12
   31dac:	bd90      	pop	{r4, r7, pc}
   31dae:	46c0      	nop			; (mov r8, r8)
   31db0:	000314c9 	.word	0x000314c9
   31db4:	00025cbd 	.word	0x00025cbd

00031db8 <_http_client_recved_packet>:
   31db8:	b580      	push	{r7, lr}
   31dba:	b082      	sub	sp, #8
   31dbc:	af00      	add	r7, sp, #0
   31dbe:	6078      	str	r0, [r7, #4]
   31dc0:	6039      	str	r1, [r7, #0]
   31dc2:	687b      	ldr	r3, [r7, #4]
   31dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   31dc6:	683b      	ldr	r3, [r7, #0]
   31dc8:	18d2      	adds	r2, r2, r3
   31dca:	687b      	ldr	r3, [r7, #4]
   31dcc:	645a      	str	r2, [r3, #68]	; 0x44
   31dce:	687b      	ldr	r3, [r7, #4]
   31dd0:	2258      	movs	r2, #88	; 0x58
   31dd2:	5a9b      	ldrh	r3, [r3, r2]
   31dd4:	2b00      	cmp	r3, #0
   31dd6:	d007      	beq.n	31de8 <_http_client_recved_packet+0x30>
   31dd8:	687b      	ldr	r3, [r7, #4]
   31dda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   31ddc:	687b      	ldr	r3, [r7, #4]
   31dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31de0:	0019      	movs	r1, r3
   31de2:	0010      	movs	r0, r2
   31de4:	4b06      	ldr	r3, [pc, #24]	; (31e00 <_http_client_recved_packet+0x48>)
   31de6:	4798      	blx	r3
   31de8:	46c0      	nop			; (mov r8, r8)
   31dea:	687b      	ldr	r3, [r7, #4]
   31dec:	0018      	movs	r0, r3
   31dee:	4b05      	ldr	r3, [pc, #20]	; (31e04 <_http_client_recved_packet+0x4c>)
   31df0:	4798      	blx	r3
   31df2:	1e03      	subs	r3, r0, #0
   31df4:	d1f9      	bne.n	31dea <_http_client_recved_packet+0x32>
   31df6:	46c0      	nop			; (mov r8, r8)
   31df8:	46bd      	mov	sp, r7
   31dfa:	b002      	add	sp, #8
   31dfc:	bd80      	pop	{r7, pc}
   31dfe:	46c0      	nop			; (mov r8, r8)
   31e00:	00032875 	.word	0x00032875
   31e04:	00031e09 	.word	0x00031e09

00031e08 <_http_client_handle_response>:
   31e08:	b580      	push	{r7, lr}
   31e0a:	b082      	sub	sp, #8
   31e0c:	af00      	add	r7, sp, #0
   31e0e:	6078      	str	r0, [r7, #4]
   31e10:	687b      	ldr	r3, [r7, #4]
   31e12:	22d8      	movs	r2, #216	; 0xd8
   31e14:	589b      	ldr	r3, [r3, r2]
   31e16:	2b00      	cmp	r3, #0
   31e18:	d002      	beq.n	31e20 <_http_client_handle_response+0x18>
   31e1a:	2b01      	cmp	r3, #1
   31e1c:	d006      	beq.n	31e2c <_http_client_handle_response+0x24>
   31e1e:	e00b      	b.n	31e38 <_http_client_handle_response+0x30>
   31e20:	687b      	ldr	r3, [r7, #4]
   31e22:	0018      	movs	r0, r3
   31e24:	4b07      	ldr	r3, [pc, #28]	; (31e44 <_http_client_handle_response+0x3c>)
   31e26:	4798      	blx	r3
   31e28:	0003      	movs	r3, r0
   31e2a:	e006      	b.n	31e3a <_http_client_handle_response+0x32>
   31e2c:	687b      	ldr	r3, [r7, #4]
   31e2e:	0018      	movs	r0, r3
   31e30:	4b05      	ldr	r3, [pc, #20]	; (31e48 <_http_client_handle_response+0x40>)
   31e32:	4798      	blx	r3
   31e34:	0003      	movs	r3, r0
   31e36:	e000      	b.n	31e3a <_http_client_handle_response+0x32>
   31e38:	2300      	movs	r3, #0
   31e3a:	0018      	movs	r0, r3
   31e3c:	46bd      	mov	sp, r7
   31e3e:	b002      	add	sp, #8
   31e40:	bd80      	pop	{r7, pc}
   31e42:	46c0      	nop			; (mov r8, r8)
   31e44:	00031e4d 	.word	0x00031e4d
   31e48:	00032305 	.word	0x00032305

00031e4c <_http_client_handle_header>:
   31e4c:	b590      	push	{r4, r7, lr}
   31e4e:	b08b      	sub	sp, #44	; 0x2c
   31e50:	af00      	add	r7, sp, #0
   31e52:	6078      	str	r0, [r7, #4]
   31e54:	687b      	ldr	r3, [r7, #4]
   31e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31e58:	627b      	str	r3, [r7, #36]	; 0x24
   31e5a:	4b9a      	ldr	r3, [pc, #616]	; (320c4 <_http_client_handle_header+0x278>)
   31e5c:	681a      	ldr	r2, [r3, #0]
   31e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31e60:	0011      	movs	r1, r2
   31e62:	0018      	movs	r0, r3
   31e64:	4b98      	ldr	r3, [pc, #608]	; (320c8 <_http_client_handle_header+0x27c>)
   31e66:	4798      	blx	r3
   31e68:	0003      	movs	r3, r0
   31e6a:	61bb      	str	r3, [r7, #24]
   31e6c:	69bb      	ldr	r3, [r7, #24]
   31e6e:	2b00      	cmp	r3, #0
   31e70:	d007      	beq.n	31e82 <_http_client_handle_header+0x36>
   31e72:	687b      	ldr	r3, [r7, #4]
   31e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   31e76:	687b      	ldr	r3, [r7, #4]
   31e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   31e7a:	18d2      	adds	r2, r2, r3
   31e7c:	69bb      	ldr	r3, [r7, #24]
   31e7e:	429a      	cmp	r2, r3
   31e80:	d807      	bhi.n	31e92 <_http_client_handle_header+0x46>
   31e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31e84:	687b      	ldr	r3, [r7, #4]
   31e86:	0011      	movs	r1, r2
   31e88:	0018      	movs	r0, r3
   31e8a:	4b90      	ldr	r3, [pc, #576]	; (320cc <_http_client_handle_header+0x280>)
   31e8c:	4798      	blx	r3
   31e8e:	2300      	movs	r3, #0
   31e90:	e114      	b.n	320bc <_http_client_handle_header+0x270>
   31e92:	4b8c      	ldr	r3, [pc, #560]	; (320c4 <_http_client_handle_header+0x278>)
   31e94:	681c      	ldr	r4, [r3, #0]
   31e96:	4b8b      	ldr	r3, [pc, #556]	; (320c4 <_http_client_handle_header+0x278>)
   31e98:	681b      	ldr	r3, [r3, #0]
   31e9a:	0018      	movs	r0, r3
   31e9c:	4b8c      	ldr	r3, [pc, #560]	; (320d0 <_http_client_handle_header+0x284>)
   31e9e:	4798      	blx	r3
   31ea0:	0002      	movs	r2, r0
   31ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ea4:	0021      	movs	r1, r4
   31ea6:	0018      	movs	r0, r3
   31ea8:	4b8a      	ldr	r3, [pc, #552]	; (320d4 <_http_client_handle_header+0x288>)
   31eaa:	4798      	blx	r3
   31eac:	1e03      	subs	r3, r0, #0
   31eae:	d15d      	bne.n	31f6c <_http_client_handle_header+0x120>
   31eb0:	4b84      	ldr	r3, [pc, #528]	; (320c4 <_http_client_handle_header+0x278>)
   31eb2:	681b      	ldr	r3, [r3, #0]
   31eb4:	0018      	movs	r0, r3
   31eb6:	4b86      	ldr	r3, [pc, #536]	; (320d0 <_http_client_handle_header+0x284>)
   31eb8:	4798      	blx	r3
   31eba:	0002      	movs	r2, r0
   31ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ebe:	189a      	adds	r2, r3, r2
   31ec0:	687b      	ldr	r3, [r7, #4]
   31ec2:	0011      	movs	r1, r2
   31ec4:	0018      	movs	r0, r3
   31ec6:	4b81      	ldr	r3, [pc, #516]	; (320cc <_http_client_handle_header+0x280>)
   31ec8:	4798      	blx	r3
   31eca:	687b      	ldr	r3, [r7, #4]
   31ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31ece:	2b00      	cmp	r3, #0
   31ed0:	d046      	beq.n	31f60 <_http_client_handle_header+0x114>
   31ed2:	687b      	ldr	r3, [r7, #4]
   31ed4:	22e4      	movs	r2, #228	; 0xe4
   31ed6:	5a9b      	ldrh	r3, [r3, r2]
   31ed8:	2b00      	cmp	r3, #0
   31eda:	d041      	beq.n	31f60 <_http_client_handle_header+0x114>
   31edc:	687b      	ldr	r3, [r7, #4]
   31ede:	22dc      	movs	r2, #220	; 0xdc
   31ee0:	589b      	ldr	r3, [r3, r2]
   31ee2:	2b00      	cmp	r3, #0
   31ee4:	da19      	bge.n	31f1a <_http_client_handle_header+0xce>
   31ee6:	687b      	ldr	r3, [r7, #4]
   31ee8:	22e4      	movs	r2, #228	; 0xe4
   31eea:	5a9a      	ldrh	r2, [r3, r2]
   31eec:	230c      	movs	r3, #12
   31eee:	18fb      	adds	r3, r7, r3
   31ef0:	801a      	strh	r2, [r3, #0]
   31ef2:	230c      	movs	r3, #12
   31ef4:	18fb      	adds	r3, r7, r3
   31ef6:	2201      	movs	r2, #1
   31ef8:	709a      	strb	r2, [r3, #2]
   31efa:	687b      	ldr	r3, [r7, #4]
   31efc:	22e0      	movs	r2, #224	; 0xe0
   31efe:	2100      	movs	r1, #0
   31f00:	5099      	str	r1, [r3, r2]
   31f02:	230c      	movs	r3, #12
   31f04:	18fb      	adds	r3, r7, r3
   31f06:	2200      	movs	r2, #0
   31f08:	609a      	str	r2, [r3, #8]
   31f0a:	687b      	ldr	r3, [r7, #4]
   31f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f0e:	220c      	movs	r2, #12
   31f10:	18ba      	adds	r2, r7, r2
   31f12:	6878      	ldr	r0, [r7, #4]
   31f14:	2102      	movs	r1, #2
   31f16:	4798      	blx	r3
   31f18:	e022      	b.n	31f60 <_http_client_handle_header+0x114>
   31f1a:	687b      	ldr	r3, [r7, #4]
   31f1c:	22dc      	movs	r2, #220	; 0xdc
   31f1e:	589a      	ldr	r2, [r3, r2]
   31f20:	687b      	ldr	r3, [r7, #4]
   31f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   31f24:	429a      	cmp	r2, r3
   31f26:	dd1b      	ble.n	31f60 <_http_client_handle_header+0x114>
   31f28:	687b      	ldr	r3, [r7, #4]
   31f2a:	22e4      	movs	r2, #228	; 0xe4
   31f2c:	5a9a      	ldrh	r2, [r3, r2]
   31f2e:	230c      	movs	r3, #12
   31f30:	18fb      	adds	r3, r7, r3
   31f32:	801a      	strh	r2, [r3, #0]
   31f34:	687b      	ldr	r3, [r7, #4]
   31f36:	22dc      	movs	r2, #220	; 0xdc
   31f38:	589b      	ldr	r3, [r3, r2]
   31f3a:	001a      	movs	r2, r3
   31f3c:	230c      	movs	r3, #12
   31f3e:	18fb      	adds	r3, r7, r3
   31f40:	605a      	str	r2, [r3, #4]
   31f42:	230c      	movs	r3, #12
   31f44:	18fb      	adds	r3, r7, r3
   31f46:	2200      	movs	r2, #0
   31f48:	609a      	str	r2, [r3, #8]
   31f4a:	687b      	ldr	r3, [r7, #4]
   31f4c:	22e0      	movs	r2, #224	; 0xe0
   31f4e:	2100      	movs	r1, #0
   31f50:	5099      	str	r1, [r3, r2]
   31f52:	687b      	ldr	r3, [r7, #4]
   31f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f56:	220c      	movs	r2, #12
   31f58:	18ba      	adds	r2, r7, r2
   31f5a:	6878      	ldr	r0, [r7, #4]
   31f5c:	2102      	movs	r1, #2
   31f5e:	4798      	blx	r3
   31f60:	687b      	ldr	r3, [r7, #4]
   31f62:	22d8      	movs	r2, #216	; 0xd8
   31f64:	2101      	movs	r1, #1
   31f66:	5099      	str	r1, [r3, r2]
   31f68:	2301      	movs	r3, #1
   31f6a:	e0a7      	b.n	320bc <_http_client_handle_header+0x270>
   31f6c:	495a      	ldr	r1, [pc, #360]	; (320d8 <_http_client_handle_header+0x28c>)
   31f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31f70:	2210      	movs	r2, #16
   31f72:	0018      	movs	r0, r3
   31f74:	4b57      	ldr	r3, [pc, #348]	; (320d4 <_http_client_handle_header+0x288>)
   31f76:	4798      	blx	r3
   31f78:	1e03      	subs	r3, r0, #0
   31f7a:	d109      	bne.n	31f90 <_http_client_handle_header+0x144>
   31f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31f7e:	3310      	adds	r3, #16
   31f80:	0018      	movs	r0, r3
   31f82:	4b56      	ldr	r3, [pc, #344]	; (320dc <_http_client_handle_header+0x290>)
   31f84:	4798      	blx	r3
   31f86:	0001      	movs	r1, r0
   31f88:	687b      	ldr	r3, [r7, #4]
   31f8a:	22dc      	movs	r2, #220	; 0xdc
   31f8c:	5099      	str	r1, [r3, r2]
   31f8e:	e08b      	b.n	320a8 <_http_client_handle_header+0x25c>
   31f90:	4953      	ldr	r1, [pc, #332]	; (320e0 <_http_client_handle_header+0x294>)
   31f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31f94:	2213      	movs	r2, #19
   31f96:	0018      	movs	r0, r3
   31f98:	4b4e      	ldr	r3, [pc, #312]	; (320d4 <_http_client_handle_header+0x288>)
   31f9a:	4798      	blx	r3
   31f9c:	1e03      	subs	r3, r0, #0
   31f9e:	d127      	bne.n	31ff0 <_http_client_handle_header+0x1a4>
   31fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31fa2:	3313      	adds	r3, #19
   31fa4:	623b      	str	r3, [r7, #32]
   31fa6:	e01e      	b.n	31fe6 <_http_client_handle_header+0x19a>
   31fa8:	6a3b      	ldr	r3, [r7, #32]
   31faa:	781b      	ldrb	r3, [r3, #0]
   31fac:	2b20      	cmp	r3, #32
   31fae:	d103      	bne.n	31fb8 <_http_client_handle_header+0x16c>
   31fb0:	6a3b      	ldr	r3, [r7, #32]
   31fb2:	3301      	adds	r3, #1
   31fb4:	623b      	str	r3, [r7, #32]
   31fb6:	e016      	b.n	31fe6 <_http_client_handle_header+0x19a>
   31fb8:	6a3b      	ldr	r3, [r7, #32]
   31fba:	781b      	ldrb	r3, [r3, #0]
   31fbc:	2b43      	cmp	r3, #67	; 0x43
   31fbe:	d003      	beq.n	31fc8 <_http_client_handle_header+0x17c>
   31fc0:	6a3b      	ldr	r3, [r7, #32]
   31fc2:	781b      	ldrb	r3, [r3, #0]
   31fc4:	2b63      	cmp	r3, #99	; 0x63
   31fc6:	d105      	bne.n	31fd4 <_http_client_handle_header+0x188>
   31fc8:	687b      	ldr	r3, [r7, #4]
   31fca:	21cc      	movs	r1, #204	; 0xcc
   31fcc:	2201      	movs	r2, #1
   31fce:	4252      	negs	r2, r2
   31fd0:	505a      	str	r2, [r3, r1]
   31fd2:	e069      	b.n	320a8 <_http_client_handle_header+0x25c>
   31fd4:	2386      	movs	r3, #134	; 0x86
   31fd6:	425a      	negs	r2, r3
   31fd8:	687b      	ldr	r3, [r7, #4]
   31fda:	0011      	movs	r1, r2
   31fdc:	0018      	movs	r0, r3
   31fde:	4b41      	ldr	r3, [pc, #260]	; (320e4 <_http_client_handle_header+0x298>)
   31fe0:	4798      	blx	r3
   31fe2:	2300      	movs	r3, #0
   31fe4:	e06a      	b.n	320bc <_http_client_handle_header+0x270>
   31fe6:	69ba      	ldr	r2, [r7, #24]
   31fe8:	6a3b      	ldr	r3, [r7, #32]
   31fea:	429a      	cmp	r2, r3
   31fec:	d8dc      	bhi.n	31fa8 <_http_client_handle_header+0x15c>
   31fee:	e05b      	b.n	320a8 <_http_client_handle_header+0x25c>
   31ff0:	493d      	ldr	r1, [pc, #244]	; (320e8 <_http_client_handle_header+0x29c>)
   31ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31ff4:	220c      	movs	r2, #12
   31ff6:	0018      	movs	r0, r3
   31ff8:	4b36      	ldr	r3, [pc, #216]	; (320d4 <_http_client_handle_header+0x288>)
   31ffa:	4798      	blx	r3
   31ffc:	1e03      	subs	r3, r0, #0
   31ffe:	d126      	bne.n	3204e <_http_client_handle_header+0x202>
   32000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32002:	330c      	adds	r3, #12
   32004:	61fb      	str	r3, [r7, #28]
   32006:	e01d      	b.n	32044 <_http_client_handle_header+0x1f8>
   32008:	69fb      	ldr	r3, [r7, #28]
   3200a:	781b      	ldrb	r3, [r3, #0]
   3200c:	2b20      	cmp	r3, #32
   3200e:	d103      	bne.n	32018 <_http_client_handle_header+0x1cc>
   32010:	69fb      	ldr	r3, [r7, #28]
   32012:	3301      	adds	r3, #1
   32014:	61fb      	str	r3, [r7, #28]
   32016:	e015      	b.n	32044 <_http_client_handle_header+0x1f8>
   32018:	69fb      	ldr	r3, [r7, #28]
   3201a:	781b      	ldrb	r3, [r3, #0]
   3201c:	2b4b      	cmp	r3, #75	; 0x4b
   3201e:	d003      	beq.n	32028 <_http_client_handle_header+0x1dc>
   32020:	69fb      	ldr	r3, [r7, #28]
   32022:	781b      	ldrb	r3, [r3, #0]
   32024:	2b6b      	cmp	r3, #107	; 0x6b
   32026:	d106      	bne.n	32036 <_http_client_handle_header+0x1ea>
   32028:	687b      	ldr	r3, [r7, #4]
   3202a:	2241      	movs	r2, #65	; 0x41
   3202c:	5c99      	ldrb	r1, [r3, r2]
   3202e:	2002      	movs	r0, #2
   32030:	4301      	orrs	r1, r0
   32032:	5499      	strb	r1, [r3, r2]
   32034:	e038      	b.n	320a8 <_http_client_handle_header+0x25c>
   32036:	687b      	ldr	r3, [r7, #4]
   32038:	2241      	movs	r2, #65	; 0x41
   3203a:	5c99      	ldrb	r1, [r3, r2]
   3203c:	2002      	movs	r0, #2
   3203e:	4381      	bics	r1, r0
   32040:	5499      	strb	r1, [r3, r2]
   32042:	e031      	b.n	320a8 <_http_client_handle_header+0x25c>
   32044:	69ba      	ldr	r2, [r7, #24]
   32046:	69fb      	ldr	r3, [r7, #28]
   32048:	429a      	cmp	r2, r3
   3204a:	d8dd      	bhi.n	32008 <_http_client_handle_header+0x1bc>
   3204c:	e02c      	b.n	320a8 <_http_client_handle_header+0x25c>
   3204e:	4927      	ldr	r1, [pc, #156]	; (320ec <_http_client_handle_header+0x2a0>)
   32050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32052:	2205      	movs	r2, #5
   32054:	0018      	movs	r0, r3
   32056:	4b1f      	ldr	r3, [pc, #124]	; (320d4 <_http_client_handle_header+0x288>)
   32058:	4798      	blx	r3
   3205a:	1e03      	subs	r3, r0, #0
   3205c:	d124      	bne.n	320a8 <_http_client_handle_header+0x25c>
   3205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32060:	3309      	adds	r3, #9
   32062:	0018      	movs	r0, r3
   32064:	4b1d      	ldr	r3, [pc, #116]	; (320dc <_http_client_handle_header+0x290>)
   32066:	4798      	blx	r3
   32068:	0003      	movs	r3, r0
   3206a:	b299      	uxth	r1, r3
   3206c:	687b      	ldr	r3, [r7, #4]
   3206e:	22e4      	movs	r2, #228	; 0xe4
   32070:	5299      	strh	r1, [r3, r2]
   32072:	687b      	ldr	r3, [r7, #4]
   32074:	22dc      	movs	r2, #220	; 0xdc
   32076:	2100      	movs	r1, #0
   32078:	5099      	str	r1, [r3, r2]
   3207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3207c:	3305      	adds	r3, #5
   3207e:	781b      	ldrb	r3, [r3, #0]
   32080:	2b31      	cmp	r3, #49	; 0x31
   32082:	d804      	bhi.n	3208e <_http_client_handle_header+0x242>
   32084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32086:	3307      	adds	r3, #7
   32088:	781b      	ldrb	r3, [r3, #0]
   3208a:	2b30      	cmp	r3, #48	; 0x30
   3208c:	d906      	bls.n	3209c <_http_client_handle_header+0x250>
   3208e:	687b      	ldr	r3, [r7, #4]
   32090:	2241      	movs	r2, #65	; 0x41
   32092:	5c99      	ldrb	r1, [r3, r2]
   32094:	2002      	movs	r0, #2
   32096:	4301      	orrs	r1, r0
   32098:	5499      	strb	r1, [r3, r2]
   3209a:	e005      	b.n	320a8 <_http_client_handle_header+0x25c>
   3209c:	687b      	ldr	r3, [r7, #4]
   3209e:	2241      	movs	r2, #65	; 0x41
   320a0:	5c99      	ldrb	r1, [r3, r2]
   320a2:	2002      	movs	r0, #2
   320a4:	4381      	bics	r1, r0
   320a6:	5499      	strb	r1, [r3, r2]
   320a8:	4b06      	ldr	r3, [pc, #24]	; (320c4 <_http_client_handle_header+0x278>)
   320aa:	681b      	ldr	r3, [r3, #0]
   320ac:	0018      	movs	r0, r3
   320ae:	4b08      	ldr	r3, [pc, #32]	; (320d0 <_http_client_handle_header+0x284>)
   320b0:	4798      	blx	r3
   320b2:	0002      	movs	r2, r0
   320b4:	69bb      	ldr	r3, [r7, #24]
   320b6:	189b      	adds	r3, r3, r2
   320b8:	627b      	str	r3, [r7, #36]	; 0x24
   320ba:	e6ce      	b.n	31e5a <_http_client_handle_header+0xe>
   320bc:	0018      	movs	r0, r3
   320be:	46bd      	mov	sp, r7
   320c0:	b00b      	add	sp, #44	; 0x2c
   320c2:	bd90      	pop	{r4, r7, pc}
   320c4:	200000d0 	.word	0x200000d0
   320c8:	00035075 	.word	0x00035075
   320cc:	000324b1 	.word	0x000324b1
   320d0:	00034ff7 	.word	0x00034ff7
   320d4:	00035005 	.word	0x00035005
   320d8:	00039e74 	.word	0x00039e74
   320dc:	00034b8d 	.word	0x00034b8d
   320e0:	00039e98 	.word	0x00039e98
   320e4:	000314c9 	.word	0x000314c9
   320e8:	00039eac 	.word	0x00039eac
   320ec:	00039ebc 	.word	0x00039ebc

000320f0 <_http_client_read_chuked_entity>:
   320f0:	b580      	push	{r7, lr}
   320f2:	b088      	sub	sp, #32
   320f4:	af00      	add	r7, sp, #0
   320f6:	6078      	str	r0, [r7, #4]
   320f8:	687b      	ldr	r3, [r7, #4]
   320fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   320fc:	61fb      	str	r3, [r7, #28]
   320fe:	2300      	movs	r3, #0
   32100:	61bb      	str	r3, [r7, #24]
   32102:	687b      	ldr	r3, [r7, #4]
   32104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32106:	617b      	str	r3, [r7, #20]
   32108:	687b      	ldr	r3, [r7, #4]
   3210a:	22e0      	movs	r2, #224	; 0xe0
   3210c:	589b      	ldr	r3, [r3, r2]
   3210e:	2b00      	cmp	r3, #0
   32110:	db71      	blt.n	321f6 <_http_client_read_chuked_entity+0x106>
   32112:	687b      	ldr	r3, [r7, #4]
   32114:	22e0      	movs	r2, #224	; 0xe0
   32116:	589b      	ldr	r3, [r3, r2]
   32118:	2b00      	cmp	r3, #0
   3211a:	d134      	bne.n	32186 <_http_client_read_chuked_entity+0x96>
   3211c:	687b      	ldr	r3, [r7, #4]
   3211e:	22d8      	movs	r2, #216	; 0xd8
   32120:	2100      	movs	r1, #0
   32122:	5099      	str	r1, [r3, r2]
   32124:	687b      	ldr	r3, [r7, #4]
   32126:	22e4      	movs	r2, #228	; 0xe4
   32128:	2100      	movs	r1, #0
   3212a:	5299      	strh	r1, [r3, r2]
   3212c:	2308      	movs	r3, #8
   3212e:	18fb      	adds	r3, r7, r3
   32130:	2201      	movs	r2, #1
   32132:	721a      	strb	r2, [r3, #8]
   32134:	2308      	movs	r3, #8
   32136:	18fb      	adds	r3, r7, r3
   32138:	2200      	movs	r2, #0
   3213a:	601a      	str	r2, [r3, #0]
   3213c:	2308      	movs	r3, #8
   3213e:	18fb      	adds	r3, r7, r3
   32140:	2200      	movs	r2, #0
   32142:	605a      	str	r2, [r3, #4]
   32144:	687b      	ldr	r3, [r7, #4]
   32146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32148:	2b00      	cmp	r3, #0
   3214a:	d006      	beq.n	3215a <_http_client_read_chuked_entity+0x6a>
   3214c:	687b      	ldr	r3, [r7, #4]
   3214e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32150:	2208      	movs	r2, #8
   32152:	18ba      	adds	r2, r7, r2
   32154:	6878      	ldr	r0, [r7, #4]
   32156:	2103      	movs	r1, #3
   32158:	4798      	blx	r3
   3215a:	687b      	ldr	r3, [r7, #4]
   3215c:	2241      	movs	r2, #65	; 0x41
   3215e:	5c9b      	ldrb	r3, [r3, r2]
   32160:	2202      	movs	r2, #2
   32162:	4013      	ands	r3, r2
   32164:	b2db      	uxtb	r3, r3
   32166:	2b00      	cmp	r3, #0
   32168:	d105      	bne.n	32176 <_http_client_read_chuked_entity+0x86>
   3216a:	687b      	ldr	r3, [r7, #4]
   3216c:	2100      	movs	r1, #0
   3216e:	0018      	movs	r0, r3
   32170:	4b62      	ldr	r3, [pc, #392]	; (322fc <_http_client_read_chuked_entity+0x20c>)
   32172:	4798      	blx	r3
   32174:	e0bf      	b.n	322f6 <_http_client_read_chuked_entity+0x206>
   32176:	697b      	ldr	r3, [r7, #20]
   32178:	1c9a      	adds	r2, r3, #2
   3217a:	687b      	ldr	r3, [r7, #4]
   3217c:	0011      	movs	r1, r2
   3217e:	0018      	movs	r0, r3
   32180:	4b5f      	ldr	r3, [pc, #380]	; (32300 <_http_client_read_chuked_entity+0x210>)
   32182:	4798      	blx	r3
   32184:	e0b2      	b.n	322ec <_http_client_read_chuked_entity+0x1fc>
   32186:	687b      	ldr	r3, [r7, #4]
   32188:	22e0      	movs	r2, #224	; 0xe0
   3218a:	589a      	ldr	r2, [r3, r2]
   3218c:	69fb      	ldr	r3, [r7, #28]
   3218e:	429a      	cmp	r2, r3
   32190:	dd00      	ble.n	32194 <_http_client_read_chuked_entity+0xa4>
   32192:	e0ab      	b.n	322ec <_http_client_read_chuked_entity+0x1fc>
   32194:	687b      	ldr	r3, [r7, #4]
   32196:	22e0      	movs	r2, #224	; 0xe0
   32198:	589b      	ldr	r3, [r3, r2]
   3219a:	001a      	movs	r2, r3
   3219c:	2308      	movs	r3, #8
   3219e:	18fb      	adds	r3, r7, r3
   321a0:	601a      	str	r2, [r3, #0]
   321a2:	2308      	movs	r3, #8
   321a4:	18fb      	adds	r3, r7, r3
   321a6:	697a      	ldr	r2, [r7, #20]
   321a8:	605a      	str	r2, [r3, #4]
   321aa:	2308      	movs	r3, #8
   321ac:	18fb      	adds	r3, r7, r3
   321ae:	2200      	movs	r2, #0
   321b0:	721a      	strb	r2, [r3, #8]
   321b2:	687b      	ldr	r3, [r7, #4]
   321b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   321b6:	2b00      	cmp	r3, #0
   321b8:	d006      	beq.n	321c8 <_http_client_read_chuked_entity+0xd8>
   321ba:	687b      	ldr	r3, [r7, #4]
   321bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   321be:	2208      	movs	r2, #8
   321c0:	18ba      	adds	r2, r7, r2
   321c2:	6878      	ldr	r0, [r7, #4]
   321c4:	2103      	movs	r1, #3
   321c6:	4798      	blx	r3
   321c8:	687b      	ldr	r3, [r7, #4]
   321ca:	22e0      	movs	r2, #224	; 0xe0
   321cc:	589b      	ldr	r3, [r3, r2]
   321ce:	3302      	adds	r3, #2
   321d0:	697a      	ldr	r2, [r7, #20]
   321d2:	18d2      	adds	r2, r2, r3
   321d4:	687b      	ldr	r3, [r7, #4]
   321d6:	0011      	movs	r1, r2
   321d8:	0018      	movs	r0, r3
   321da:	4b49      	ldr	r3, [pc, #292]	; (32300 <_http_client_read_chuked_entity+0x210>)
   321dc:	4798      	blx	r3
   321de:	687b      	ldr	r3, [r7, #4]
   321e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   321e2:	61fb      	str	r3, [r7, #28]
   321e4:	687b      	ldr	r3, [r7, #4]
   321e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   321e8:	617b      	str	r3, [r7, #20]
   321ea:	687b      	ldr	r3, [r7, #4]
   321ec:	21e0      	movs	r1, #224	; 0xe0
   321ee:	2201      	movs	r2, #1
   321f0:	4252      	negs	r2, r2
   321f2:	505a      	str	r2, [r3, r1]
   321f4:	e07a      	b.n	322ec <_http_client_read_chuked_entity+0x1fc>
   321f6:	687b      	ldr	r3, [r7, #4]
   321f8:	22e0      	movs	r2, #224	; 0xe0
   321fa:	2100      	movs	r1, #0
   321fc:	5099      	str	r1, [r3, r2]
   321fe:	e05a      	b.n	322b6 <_http_client_read_chuked_entity+0x1c6>
   32200:	697b      	ldr	r3, [r7, #20]
   32202:	781b      	ldrb	r3, [r3, #0]
   32204:	2b0a      	cmp	r3, #10
   32206:	d106      	bne.n	32216 <_http_client_read_chuked_entity+0x126>
   32208:	697b      	ldr	r3, [r7, #20]
   3220a:	3301      	adds	r3, #1
   3220c:	617b      	str	r3, [r7, #20]
   3220e:	69fb      	ldr	r3, [r7, #28]
   32210:	3b01      	subs	r3, #1
   32212:	61fb      	str	r3, [r7, #28]
   32214:	e052      	b.n	322bc <_http_client_read_chuked_entity+0x1cc>
   32216:	69bb      	ldr	r3, [r7, #24]
   32218:	2b00      	cmp	r3, #0
   3221a:	d145      	bne.n	322a8 <_http_client_read_chuked_entity+0x1b8>
   3221c:	697b      	ldr	r3, [r7, #20]
   3221e:	781b      	ldrb	r3, [r3, #0]
   32220:	2b2f      	cmp	r3, #47	; 0x2f
   32222:	d910      	bls.n	32246 <_http_client_read_chuked_entity+0x156>
   32224:	697b      	ldr	r3, [r7, #20]
   32226:	781b      	ldrb	r3, [r3, #0]
   32228:	2b39      	cmp	r3, #57	; 0x39
   3222a:	d80c      	bhi.n	32246 <_http_client_read_chuked_entity+0x156>
   3222c:	687b      	ldr	r3, [r7, #4]
   3222e:	22e0      	movs	r2, #224	; 0xe0
   32230:	589b      	ldr	r3, [r3, r2]
   32232:	011b      	lsls	r3, r3, #4
   32234:	697a      	ldr	r2, [r7, #20]
   32236:	7812      	ldrb	r2, [r2, #0]
   32238:	189b      	adds	r3, r3, r2
   3223a:	3b30      	subs	r3, #48	; 0x30
   3223c:	001a      	movs	r2, r3
   3223e:	687b      	ldr	r3, [r7, #4]
   32240:	21e0      	movs	r1, #224	; 0xe0
   32242:	505a      	str	r2, [r3, r1]
   32244:	e031      	b.n	322aa <_http_client_read_chuked_entity+0x1ba>
   32246:	697b      	ldr	r3, [r7, #20]
   32248:	781b      	ldrb	r3, [r3, #0]
   3224a:	2b60      	cmp	r3, #96	; 0x60
   3224c:	d910      	bls.n	32270 <_http_client_read_chuked_entity+0x180>
   3224e:	697b      	ldr	r3, [r7, #20]
   32250:	781b      	ldrb	r3, [r3, #0]
   32252:	2b66      	cmp	r3, #102	; 0x66
   32254:	d80c      	bhi.n	32270 <_http_client_read_chuked_entity+0x180>
   32256:	687b      	ldr	r3, [r7, #4]
   32258:	22e0      	movs	r2, #224	; 0xe0
   3225a:	589b      	ldr	r3, [r3, r2]
   3225c:	011b      	lsls	r3, r3, #4
   3225e:	697a      	ldr	r2, [r7, #20]
   32260:	7812      	ldrb	r2, [r2, #0]
   32262:	189b      	adds	r3, r3, r2
   32264:	3b61      	subs	r3, #97	; 0x61
   32266:	001a      	movs	r2, r3
   32268:	687b      	ldr	r3, [r7, #4]
   3226a:	21e0      	movs	r1, #224	; 0xe0
   3226c:	505a      	str	r2, [r3, r1]
   3226e:	e01c      	b.n	322aa <_http_client_read_chuked_entity+0x1ba>
   32270:	697b      	ldr	r3, [r7, #20]
   32272:	781b      	ldrb	r3, [r3, #0]
   32274:	2b40      	cmp	r3, #64	; 0x40
   32276:	d910      	bls.n	3229a <_http_client_read_chuked_entity+0x1aa>
   32278:	697b      	ldr	r3, [r7, #20]
   3227a:	781b      	ldrb	r3, [r3, #0]
   3227c:	2b46      	cmp	r3, #70	; 0x46
   3227e:	d80c      	bhi.n	3229a <_http_client_read_chuked_entity+0x1aa>
   32280:	687b      	ldr	r3, [r7, #4]
   32282:	22e0      	movs	r2, #224	; 0xe0
   32284:	589b      	ldr	r3, [r3, r2]
   32286:	011b      	lsls	r3, r3, #4
   32288:	697a      	ldr	r2, [r7, #20]
   3228a:	7812      	ldrb	r2, [r2, #0]
   3228c:	189b      	adds	r3, r3, r2
   3228e:	3b41      	subs	r3, #65	; 0x41
   32290:	001a      	movs	r2, r3
   32292:	687b      	ldr	r3, [r7, #4]
   32294:	21e0      	movs	r1, #224	; 0xe0
   32296:	505a      	str	r2, [r3, r1]
   32298:	e007      	b.n	322aa <_http_client_read_chuked_entity+0x1ba>
   3229a:	697b      	ldr	r3, [r7, #20]
   3229c:	781b      	ldrb	r3, [r3, #0]
   3229e:	2b3b      	cmp	r3, #59	; 0x3b
   322a0:	d103      	bne.n	322aa <_http_client_read_chuked_entity+0x1ba>
   322a2:	2301      	movs	r3, #1
   322a4:	61bb      	str	r3, [r7, #24]
   322a6:	e000      	b.n	322aa <_http_client_read_chuked_entity+0x1ba>
   322a8:	46c0      	nop			; (mov r8, r8)
   322aa:	697b      	ldr	r3, [r7, #20]
   322ac:	3301      	adds	r3, #1
   322ae:	617b      	str	r3, [r7, #20]
   322b0:	69fb      	ldr	r3, [r7, #28]
   322b2:	3b01      	subs	r3, #1
   322b4:	61fb      	str	r3, [r7, #28]
   322b6:	69fb      	ldr	r3, [r7, #28]
   322b8:	2b00      	cmp	r3, #0
   322ba:	dca1      	bgt.n	32200 <_http_client_read_chuked_entity+0x110>
   322bc:	687b      	ldr	r3, [r7, #4]
   322be:	22e0      	movs	r2, #224	; 0xe0
   322c0:	589a      	ldr	r2, [r3, r2]
   322c2:	687b      	ldr	r3, [r7, #4]
   322c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   322c6:	429a      	cmp	r2, r3
   322c8:	dd07      	ble.n	322da <_http_client_read_chuked_entity+0x1ea>
   322ca:	238b      	movs	r3, #139	; 0x8b
   322cc:	425a      	negs	r2, r3
   322ce:	687b      	ldr	r3, [r7, #4]
   322d0:	0011      	movs	r1, r2
   322d2:	0018      	movs	r0, r3
   322d4:	4b09      	ldr	r3, [pc, #36]	; (322fc <_http_client_read_chuked_entity+0x20c>)
   322d6:	4798      	blx	r3
   322d8:	e00d      	b.n	322f6 <_http_client_read_chuked_entity+0x206>
   322da:	69fb      	ldr	r3, [r7, #28]
   322dc:	2b00      	cmp	r3, #0
   322de:	d105      	bne.n	322ec <_http_client_read_chuked_entity+0x1fc>
   322e0:	687b      	ldr	r3, [r7, #4]
   322e2:	21e0      	movs	r1, #224	; 0xe0
   322e4:	2201      	movs	r2, #1
   322e6:	4252      	negs	r2, r2
   322e8:	505a      	str	r2, [r3, r1]
   322ea:	e004      	b.n	322f6 <_http_client_read_chuked_entity+0x206>
   322ec:	687b      	ldr	r3, [r7, #4]
   322ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   322f0:	2b00      	cmp	r3, #0
   322f2:	d000      	beq.n	322f6 <_http_client_read_chuked_entity+0x206>
   322f4:	e708      	b.n	32108 <_http_client_read_chuked_entity+0x18>
   322f6:	46bd      	mov	sp, r7
   322f8:	b008      	add	sp, #32
   322fa:	bd80      	pop	{r7, pc}
   322fc:	000314c9 	.word	0x000314c9
   32300:	000324b1 	.word	0x000324b1

00032304 <_http_client_handle_entity>:
   32304:	b580      	push	{r7, lr}
   32306:	b086      	sub	sp, #24
   32308:	af00      	add	r7, sp, #0
   3230a:	6078      	str	r0, [r7, #4]
   3230c:	687b      	ldr	r3, [r7, #4]
   3230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32310:	617b      	str	r3, [r7, #20]
   32312:	687b      	ldr	r3, [r7, #4]
   32314:	22dc      	movs	r2, #220	; 0xdc
   32316:	589b      	ldr	r3, [r3, r2]
   32318:	2b00      	cmp	r3, #0
   3231a:	db58      	blt.n	323ce <_http_client_handle_entity+0xca>
   3231c:	687b      	ldr	r3, [r7, #4]
   3231e:	22dc      	movs	r2, #220	; 0xdc
   32320:	589a      	ldr	r2, [r3, r2]
   32322:	687b      	ldr	r3, [r7, #4]
   32324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32326:	429a      	cmp	r2, r3
   32328:	dc51      	bgt.n	323ce <_http_client_handle_entity+0xca>
   3232a:	687b      	ldr	r3, [r7, #4]
   3232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3232e:	0019      	movs	r1, r3
   32330:	687b      	ldr	r3, [r7, #4]
   32332:	22dc      	movs	r2, #220	; 0xdc
   32334:	589b      	ldr	r3, [r3, r2]
   32336:	4299      	cmp	r1, r3
   32338:	da00      	bge.n	3233c <_http_client_handle_entity+0x38>
   3233a:	e0a9      	b.n	32490 <_http_client_handle_entity+0x18c>
   3233c:	687b      	ldr	r3, [r7, #4]
   3233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32340:	2b00      	cmp	r3, #0
   32342:	d020      	beq.n	32386 <_http_client_handle_entity+0x82>
   32344:	687b      	ldr	r3, [r7, #4]
   32346:	22e4      	movs	r2, #228	; 0xe4
   32348:	5a9b      	ldrh	r3, [r3, r2]
   3234a:	2b00      	cmp	r3, #0
   3234c:	d01b      	beq.n	32386 <_http_client_handle_entity+0x82>
   3234e:	687b      	ldr	r3, [r7, #4]
   32350:	22e4      	movs	r2, #228	; 0xe4
   32352:	5a9a      	ldrh	r2, [r3, r2]
   32354:	2308      	movs	r3, #8
   32356:	18fb      	adds	r3, r7, r3
   32358:	801a      	strh	r2, [r3, #0]
   3235a:	2308      	movs	r3, #8
   3235c:	18fb      	adds	r3, r7, r3
   3235e:	2200      	movs	r2, #0
   32360:	709a      	strb	r2, [r3, #2]
   32362:	687b      	ldr	r3, [r7, #4]
   32364:	22dc      	movs	r2, #220	; 0xdc
   32366:	589b      	ldr	r3, [r3, r2]
   32368:	001a      	movs	r2, r3
   3236a:	2308      	movs	r3, #8
   3236c:	18fb      	adds	r3, r7, r3
   3236e:	605a      	str	r2, [r3, #4]
   32370:	2308      	movs	r3, #8
   32372:	18fb      	adds	r3, r7, r3
   32374:	697a      	ldr	r2, [r7, #20]
   32376:	609a      	str	r2, [r3, #8]
   32378:	687b      	ldr	r3, [r7, #4]
   3237a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3237c:	2208      	movs	r2, #8
   3237e:	18ba      	adds	r2, r7, r2
   32380:	6878      	ldr	r0, [r7, #4]
   32382:	2102      	movs	r1, #2
   32384:	4798      	blx	r3
   32386:	687b      	ldr	r3, [r7, #4]
   32388:	22d8      	movs	r2, #216	; 0xd8
   3238a:	2100      	movs	r1, #0
   3238c:	5099      	str	r1, [r3, r2]
   3238e:	687b      	ldr	r3, [r7, #4]
   32390:	22e4      	movs	r2, #228	; 0xe4
   32392:	2100      	movs	r1, #0
   32394:	5299      	strh	r1, [r3, r2]
   32396:	687b      	ldr	r3, [r7, #4]
   32398:	2241      	movs	r2, #65	; 0x41
   3239a:	5c9b      	ldrb	r3, [r3, r2]
   3239c:	2202      	movs	r2, #2
   3239e:	4013      	ands	r3, r2
   323a0:	b2db      	uxtb	r3, r3
   323a2:	2b00      	cmp	r3, #0
   323a4:	d105      	bne.n	323b2 <_http_client_handle_entity+0xae>
   323a6:	687b      	ldr	r3, [r7, #4]
   323a8:	2100      	movs	r1, #0
   323aa:	0018      	movs	r0, r3
   323ac:	4b3b      	ldr	r3, [pc, #236]	; (3249c <_http_client_handle_entity+0x198>)
   323ae:	4798      	blx	r3
   323b0:	e06e      	b.n	32490 <_http_client_handle_entity+0x18c>
   323b2:	687b      	ldr	r3, [r7, #4]
   323b4:	22dc      	movs	r2, #220	; 0xdc
   323b6:	589b      	ldr	r3, [r3, r2]
   323b8:	001a      	movs	r2, r3
   323ba:	697b      	ldr	r3, [r7, #20]
   323bc:	189a      	adds	r2, r3, r2
   323be:	687b      	ldr	r3, [r7, #4]
   323c0:	0011      	movs	r1, r2
   323c2:	0018      	movs	r0, r3
   323c4:	4b36      	ldr	r3, [pc, #216]	; (324a0 <_http_client_handle_entity+0x19c>)
   323c6:	4798      	blx	r3
   323c8:	687b      	ldr	r3, [r7, #4]
   323ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   323cc:	e061      	b.n	32492 <_http_client_handle_entity+0x18e>
   323ce:	687b      	ldr	r3, [r7, #4]
   323d0:	22dc      	movs	r2, #220	; 0xdc
   323d2:	589b      	ldr	r3, [r3, r2]
   323d4:	2b00      	cmp	r3, #0
   323d6:	db57      	blt.n	32488 <_http_client_handle_entity+0x184>
   323d8:	687b      	ldr	r3, [r7, #4]
   323da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   323dc:	2308      	movs	r3, #8
   323de:	18fb      	adds	r3, r7, r3
   323e0:	601a      	str	r2, [r3, #0]
   323e2:	2308      	movs	r3, #8
   323e4:	18fb      	adds	r3, r7, r3
   323e6:	697a      	ldr	r2, [r7, #20]
   323e8:	605a      	str	r2, [r3, #4]
   323ea:	687b      	ldr	r3, [r7, #4]
   323ec:	22e0      	movs	r2, #224	; 0xe0
   323ee:	589a      	ldr	r2, [r3, r2]
   323f0:	687b      	ldr	r3, [r7, #4]
   323f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   323f4:	18d2      	adds	r2, r2, r3
   323f6:	687b      	ldr	r3, [r7, #4]
   323f8:	21e0      	movs	r1, #224	; 0xe0
   323fa:	505a      	str	r2, [r3, r1]
   323fc:	687b      	ldr	r3, [r7, #4]
   323fe:	22dc      	movs	r2, #220	; 0xdc
   32400:	589a      	ldr	r2, [r3, r2]
   32402:	687b      	ldr	r3, [r7, #4]
   32404:	21e0      	movs	r1, #224	; 0xe0
   32406:	585b      	ldr	r3, [r3, r1]
   32408:	429a      	cmp	r2, r3
   3240a:	dc0c      	bgt.n	32426 <_http_client_handle_entity+0x122>
   3240c:	687b      	ldr	r3, [r7, #4]
   3240e:	22d8      	movs	r2, #216	; 0xd8
   32410:	2100      	movs	r1, #0
   32412:	5099      	str	r1, [r3, r2]
   32414:	687b      	ldr	r3, [r7, #4]
   32416:	22e4      	movs	r2, #228	; 0xe4
   32418:	2100      	movs	r1, #0
   3241a:	5299      	strh	r1, [r3, r2]
   3241c:	2308      	movs	r3, #8
   3241e:	18fb      	adds	r3, r7, r3
   32420:	2201      	movs	r2, #1
   32422:	721a      	strb	r2, [r3, #8]
   32424:	e003      	b.n	3242e <_http_client_handle_entity+0x12a>
   32426:	2308      	movs	r3, #8
   32428:	18fb      	adds	r3, r7, r3
   3242a:	2200      	movs	r2, #0
   3242c:	721a      	strb	r2, [r3, #8]
   3242e:	687b      	ldr	r3, [r7, #4]
   32430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32432:	2b00      	cmp	r3, #0
   32434:	d006      	beq.n	32444 <_http_client_handle_entity+0x140>
   32436:	687b      	ldr	r3, [r7, #4]
   32438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3243a:	2208      	movs	r2, #8
   3243c:	18ba      	adds	r2, r7, r2
   3243e:	6878      	ldr	r0, [r7, #4]
   32440:	2103      	movs	r1, #3
   32442:	4798      	blx	r3
   32444:	2308      	movs	r3, #8
   32446:	18fb      	adds	r3, r7, r3
   32448:	7a1b      	ldrb	r3, [r3, #8]
   3244a:	2b01      	cmp	r3, #1
   3244c:	d112      	bne.n	32474 <_http_client_handle_entity+0x170>
   3244e:	687b      	ldr	r3, [r7, #4]
   32450:	2241      	movs	r2, #65	; 0x41
   32452:	5c9b      	ldrb	r3, [r3, r2]
   32454:	2202      	movs	r2, #2
   32456:	4013      	ands	r3, r2
   32458:	b2db      	uxtb	r3, r3
   3245a:	2b00      	cmp	r3, #0
   3245c:	d10a      	bne.n	32474 <_http_client_handle_entity+0x170>
   3245e:	4b11      	ldr	r3, [pc, #68]	; (324a4 <_http_client_handle_entity+0x1a0>)
   32460:	0018      	movs	r0, r3
   32462:	4b11      	ldr	r3, [pc, #68]	; (324a8 <_http_client_handle_entity+0x1a4>)
   32464:	4798      	blx	r3
   32466:	687b      	ldr	r3, [r7, #4]
   32468:	2100      	movs	r1, #0
   3246a:	0018      	movs	r0, r3
   3246c:	4b0b      	ldr	r3, [pc, #44]	; (3249c <_http_client_handle_entity+0x198>)
   3246e:	4798      	blx	r3
   32470:	2300      	movs	r3, #0
   32472:	e00e      	b.n	32492 <_http_client_handle_entity+0x18e>
   32474:	687b      	ldr	r3, [r7, #4]
   32476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32478:	697a      	ldr	r2, [r7, #20]
   3247a:	18d2      	adds	r2, r2, r3
   3247c:	687b      	ldr	r3, [r7, #4]
   3247e:	0011      	movs	r1, r2
   32480:	0018      	movs	r0, r3
   32482:	4b07      	ldr	r3, [pc, #28]	; (324a0 <_http_client_handle_entity+0x19c>)
   32484:	4798      	blx	r3
   32486:	e003      	b.n	32490 <_http_client_handle_entity+0x18c>
   32488:	687b      	ldr	r3, [r7, #4]
   3248a:	0018      	movs	r0, r3
   3248c:	4b07      	ldr	r3, [pc, #28]	; (324ac <_http_client_handle_entity+0x1a8>)
   3248e:	4798      	blx	r3
   32490:	2300      	movs	r3, #0
   32492:	0018      	movs	r0, r3
   32494:	46bd      	mov	sp, r7
   32496:	b006      	add	sp, #24
   32498:	bd80      	pop	{r7, pc}
   3249a:	46c0      	nop			; (mov r8, r8)
   3249c:	000314c9 	.word	0x000314c9
   324a0:	000324b1 	.word	0x000324b1
   324a4:	00039ec4 	.word	0x00039ec4
   324a8:	00034e61 	.word	0x00034e61
   324ac:	000320f1 	.word	0x000320f1

000324b0 <_http_client_move_buffer>:
   324b0:	b580      	push	{r7, lr}
   324b2:	b084      	sub	sp, #16
   324b4:	af00      	add	r7, sp, #0
   324b6:	6078      	str	r0, [r7, #4]
   324b8:	6039      	str	r1, [r7, #0]
   324ba:	687b      	ldr	r3, [r7, #4]
   324bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   324be:	60fb      	str	r3, [r7, #12]
   324c0:	687b      	ldr	r3, [r7, #4]
   324c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   324c4:	001a      	movs	r2, r3
   324c6:	683b      	ldr	r3, [r7, #0]
   324c8:	1ad2      	subs	r2, r2, r3
   324ca:	68fb      	ldr	r3, [r7, #12]
   324cc:	18d3      	adds	r3, r2, r3
   324ce:	60bb      	str	r3, [r7, #8]
   324d0:	68bb      	ldr	r3, [r7, #8]
   324d2:	2b00      	cmp	r3, #0
   324d4:	dd09      	ble.n	324ea <_http_client_move_buffer+0x3a>
   324d6:	68ba      	ldr	r2, [r7, #8]
   324d8:	6839      	ldr	r1, [r7, #0]
   324da:	68fb      	ldr	r3, [r7, #12]
   324dc:	0018      	movs	r0, r3
   324de:	4b06      	ldr	r3, [pc, #24]	; (324f8 <_http_client_move_buffer+0x48>)
   324e0:	4798      	blx	r3
   324e2:	68ba      	ldr	r2, [r7, #8]
   324e4:	687b      	ldr	r3, [r7, #4]
   324e6:	645a      	str	r2, [r3, #68]	; 0x44
   324e8:	e002      	b.n	324f0 <_http_client_move_buffer+0x40>
   324ea:	687b      	ldr	r3, [r7, #4]
   324ec:	2200      	movs	r2, #0
   324ee:	645a      	str	r2, [r3, #68]	; 0x44
   324f0:	46c0      	nop			; (mov r8, r8)
   324f2:	46bd      	mov	sp, r7
   324f4:	b004      	add	sp, #16
   324f6:	bd80      	pop	{r7, pc}
   324f8:	00034c1b 	.word	0x00034c1b

000324fc <stream_writer_init>:
   324fc:	b580      	push	{r7, lr}
   324fe:	b084      	sub	sp, #16
   32500:	af00      	add	r7, sp, #0
   32502:	60f8      	str	r0, [r7, #12]
   32504:	60b9      	str	r1, [r7, #8]
   32506:	607a      	str	r2, [r7, #4]
   32508:	603b      	str	r3, [r7, #0]
   3250a:	68fb      	ldr	r3, [r7, #12]
   3250c:	687a      	ldr	r2, [r7, #4]
   3250e:	601a      	str	r2, [r3, #0]
   32510:	68fb      	ldr	r3, [r7, #12]
   32512:	68ba      	ldr	r2, [r7, #8]
   32514:	611a      	str	r2, [r3, #16]
   32516:	68fb      	ldr	r3, [r7, #12]
   32518:	2200      	movs	r2, #0
   3251a:	605a      	str	r2, [r3, #4]
   3251c:	68fb      	ldr	r3, [r7, #12]
   3251e:	683a      	ldr	r2, [r7, #0]
   32520:	609a      	str	r2, [r3, #8]
   32522:	68fb      	ldr	r3, [r7, #12]
   32524:	69ba      	ldr	r2, [r7, #24]
   32526:	60da      	str	r2, [r3, #12]
   32528:	46c0      	nop			; (mov r8, r8)
   3252a:	46bd      	mov	sp, r7
   3252c:	b004      	add	sp, #16
   3252e:	bd80      	pop	{r7, pc}

00032530 <stream_writer_send_8>:
   32530:	b580      	push	{r7, lr}
   32532:	b084      	sub	sp, #16
   32534:	af00      	add	r7, sp, #0
   32536:	6078      	str	r0, [r7, #4]
   32538:	000a      	movs	r2, r1
   3253a:	1cfb      	adds	r3, r7, #3
   3253c:	701a      	strb	r2, [r3, #0]
   3253e:	687b      	ldr	r3, [r7, #4]
   32540:	681a      	ldr	r2, [r3, #0]
   32542:	687b      	ldr	r3, [r7, #4]
   32544:	685b      	ldr	r3, [r3, #4]
   32546:	1ad3      	subs	r3, r2, r3
   32548:	60fb      	str	r3, [r7, #12]
   3254a:	68fb      	ldr	r3, [r7, #12]
   3254c:	2b00      	cmp	r3, #0
   3254e:	dc03      	bgt.n	32558 <stream_writer_send_8+0x28>
   32550:	687b      	ldr	r3, [r7, #4]
   32552:	0018      	movs	r0, r3
   32554:	4b08      	ldr	r3, [pc, #32]	; (32578 <stream_writer_send_8+0x48>)
   32556:	4798      	blx	r3
   32558:	687b      	ldr	r3, [r7, #4]
   3255a:	6919      	ldr	r1, [r3, #16]
   3255c:	687b      	ldr	r3, [r7, #4]
   3255e:	685b      	ldr	r3, [r3, #4]
   32560:	1c58      	adds	r0, r3, #1
   32562:	687a      	ldr	r2, [r7, #4]
   32564:	6050      	str	r0, [r2, #4]
   32566:	18cb      	adds	r3, r1, r3
   32568:	1cfa      	adds	r2, r7, #3
   3256a:	7812      	ldrb	r2, [r2, #0]
   3256c:	701a      	strb	r2, [r3, #0]
   3256e:	46c0      	nop			; (mov r8, r8)
   32570:	46bd      	mov	sp, r7
   32572:	b004      	add	sp, #16
   32574:	bd80      	pop	{r7, pc}
   32576:	46c0      	nop			; (mov r8, r8)
   32578:	000325b9 	.word	0x000325b9

0003257c <stream_writer_send_buffer>:
   3257c:	b580      	push	{r7, lr}
   3257e:	b084      	sub	sp, #16
   32580:	af00      	add	r7, sp, #0
   32582:	60f8      	str	r0, [r7, #12]
   32584:	60b9      	str	r1, [r7, #8]
   32586:	607a      	str	r2, [r7, #4]
   32588:	e00d      	b.n	325a6 <stream_writer_send_buffer+0x2a>
   3258a:	68bb      	ldr	r3, [r7, #8]
   3258c:	781b      	ldrb	r3, [r3, #0]
   3258e:	b25a      	sxtb	r2, r3
   32590:	68fb      	ldr	r3, [r7, #12]
   32592:	0011      	movs	r1, r2
   32594:	0018      	movs	r0, r3
   32596:	4b07      	ldr	r3, [pc, #28]	; (325b4 <stream_writer_send_buffer+0x38>)
   32598:	4798      	blx	r3
   3259a:	687b      	ldr	r3, [r7, #4]
   3259c:	3b01      	subs	r3, #1
   3259e:	607b      	str	r3, [r7, #4]
   325a0:	68bb      	ldr	r3, [r7, #8]
   325a2:	3301      	adds	r3, #1
   325a4:	60bb      	str	r3, [r7, #8]
   325a6:	687b      	ldr	r3, [r7, #4]
   325a8:	2b00      	cmp	r3, #0
   325aa:	d1ee      	bne.n	3258a <stream_writer_send_buffer+0xe>
   325ac:	46c0      	nop			; (mov r8, r8)
   325ae:	46bd      	mov	sp, r7
   325b0:	b004      	add	sp, #16
   325b2:	bd80      	pop	{r7, pc}
   325b4:	00032531 	.word	0x00032531

000325b8 <stream_writer_send_remain>:
   325b8:	b590      	push	{r4, r7, lr}
   325ba:	b083      	sub	sp, #12
   325bc:	af00      	add	r7, sp, #0
   325be:	6078      	str	r0, [r7, #4]
   325c0:	687b      	ldr	r3, [r7, #4]
   325c2:	685b      	ldr	r3, [r3, #4]
   325c4:	2b00      	cmp	r3, #0
   325c6:	d00c      	beq.n	325e2 <stream_writer_send_remain+0x2a>
   325c8:	687b      	ldr	r3, [r7, #4]
   325ca:	689c      	ldr	r4, [r3, #8]
   325cc:	687b      	ldr	r3, [r7, #4]
   325ce:	68d8      	ldr	r0, [r3, #12]
   325d0:	687b      	ldr	r3, [r7, #4]
   325d2:	6919      	ldr	r1, [r3, #16]
   325d4:	687b      	ldr	r3, [r7, #4]
   325d6:	685b      	ldr	r3, [r3, #4]
   325d8:	001a      	movs	r2, r3
   325da:	47a0      	blx	r4
   325dc:	687b      	ldr	r3, [r7, #4]
   325de:	2200      	movs	r2, #0
   325e0:	605a      	str	r2, [r3, #4]
   325e2:	46c0      	nop			; (mov r8, r8)
   325e4:	46bd      	mov	sp, r7
   325e6:	b003      	add	sp, #12
   325e8:	bd90      	pop	{r4, r7, pc}
	...

000325ec <system_cpu_clock_get_hz>:
   325ec:	b580      	push	{r7, lr}
   325ee:	af00      	add	r7, sp, #0
   325f0:	2000      	movs	r0, #0
   325f2:	4b05      	ldr	r3, [pc, #20]	; (32608 <system_cpu_clock_get_hz+0x1c>)
   325f4:	4798      	blx	r3
   325f6:	0002      	movs	r2, r0
   325f8:	4b04      	ldr	r3, [pc, #16]	; (3260c <system_cpu_clock_get_hz+0x20>)
   325fa:	7a1b      	ldrb	r3, [r3, #8]
   325fc:	b2db      	uxtb	r3, r3
   325fe:	40da      	lsrs	r2, r3
   32600:	0013      	movs	r3, r2
   32602:	0018      	movs	r0, r3
   32604:	46bd      	mov	sp, r7
   32606:	bd80      	pop	{r7, pc}
   32608:	0002a025 	.word	0x0002a025
   3260c:	40000400 	.word	0x40000400

00032610 <tcc_enable>:
   32610:	b580      	push	{r7, lr}
   32612:	b084      	sub	sp, #16
   32614:	af00      	add	r7, sp, #0
   32616:	6078      	str	r0, [r7, #4]
   32618:	687b      	ldr	r3, [r7, #4]
   3261a:	681b      	ldr	r3, [r3, #0]
   3261c:	60fb      	str	r3, [r7, #12]
   3261e:	46c0      	nop			; (mov r8, r8)
   32620:	68fb      	ldr	r3, [r7, #12]
   32622:	689b      	ldr	r3, [r3, #8]
   32624:	2202      	movs	r2, #2
   32626:	4013      	ands	r3, r2
   32628:	d1fa      	bne.n	32620 <tcc_enable+0x10>
   3262a:	68fb      	ldr	r3, [r7, #12]
   3262c:	681b      	ldr	r3, [r3, #0]
   3262e:	2202      	movs	r2, #2
   32630:	431a      	orrs	r2, r3
   32632:	68fb      	ldr	r3, [r7, #12]
   32634:	601a      	str	r2, [r3, #0]
   32636:	46c0      	nop			; (mov r8, r8)
   32638:	46bd      	mov	sp, r7
   3263a:	b004      	add	sp, #16
   3263c:	bd80      	pop	{r7, pc}
	...

00032640 <sw_timer_tcc_callback>:
   32640:	b580      	push	{r7, lr}
   32642:	b082      	sub	sp, #8
   32644:	af00      	add	r7, sp, #0
   32646:	6078      	str	r0, [r7, #4]
   32648:	4b04      	ldr	r3, [pc, #16]	; (3265c <sw_timer_tcc_callback+0x1c>)
   3264a:	681b      	ldr	r3, [r3, #0]
   3264c:	1c5a      	adds	r2, r3, #1
   3264e:	4b03      	ldr	r3, [pc, #12]	; (3265c <sw_timer_tcc_callback+0x1c>)
   32650:	601a      	str	r2, [r3, #0]
   32652:	46c0      	nop			; (mov r8, r8)
   32654:	46bd      	mov	sp, r7
   32656:	b002      	add	sp, #8
   32658:	bd80      	pop	{r7, pc}
   3265a:	46c0      	nop			; (mov r8, r8)
   3265c:	20004300 	.word	0x20004300

00032660 <sw_timer_get_config_defaults>:
   32660:	b580      	push	{r7, lr}
   32662:	b082      	sub	sp, #8
   32664:	af00      	add	r7, sp, #0
   32666:	6078      	str	r0, [r7, #4]
   32668:	687b      	ldr	r3, [r7, #4]
   3266a:	2264      	movs	r2, #100	; 0x64
   3266c:	805a      	strh	r2, [r3, #2]
   3266e:	687b      	ldr	r3, [r7, #4]
   32670:	2200      	movs	r2, #0
   32672:	701a      	strb	r2, [r3, #0]
   32674:	687b      	ldr	r3, [r7, #4]
   32676:	2200      	movs	r2, #0
   32678:	705a      	strb	r2, [r3, #1]
   3267a:	46c0      	nop			; (mov r8, r8)
   3267c:	46bd      	mov	sp, r7
   3267e:	b002      	add	sp, #8
   32680:	bd80      	pop	{r7, pc}
	...

00032684 <sw_timer_init>:
   32684:	b590      	push	{r4, r7, lr}
   32686:	b0b1      	sub	sp, #196	; 0xc4
   32688:	af00      	add	r7, sp, #0
   3268a:	6078      	str	r0, [r7, #4]
   3268c:	6039      	str	r1, [r7, #0]
   3268e:	230c      	movs	r3, #12
   32690:	18fb      	adds	r3, r7, r3
   32692:	4a2e      	ldr	r2, [pc, #184]	; (3274c <sw_timer_init+0xc8>)
   32694:	ca13      	ldmia	r2!, {r0, r1, r4}
   32696:	c313      	stmia	r3!, {r0, r1, r4}
   32698:	683b      	ldr	r3, [r7, #0]
   3269a:	885b      	ldrh	r3, [r3, #2]
   3269c:	001a      	movs	r2, r3
   3269e:	687b      	ldr	r3, [r7, #4]
   326a0:	655a      	str	r2, [r3, #84]	; 0x54
   326a2:	687b      	ldr	r3, [r7, #4]
   326a4:	3314      	adds	r3, #20
   326a6:	22bc      	movs	r2, #188	; 0xbc
   326a8:	18ba      	adds	r2, r7, r2
   326aa:	6013      	str	r3, [r2, #0]
   326ac:	683b      	ldr	r3, [r7, #0]
   326ae:	781b      	ldrb	r3, [r3, #0]
   326b0:	001a      	movs	r2, r3
   326b2:	230c      	movs	r3, #12
   326b4:	18fb      	adds	r3, r7, r3
   326b6:	0092      	lsls	r2, r2, #2
   326b8:	58d2      	ldr	r2, [r2, r3]
   326ba:	2318      	movs	r3, #24
   326bc:	18fb      	adds	r3, r7, r3
   326be:	0011      	movs	r1, r2
   326c0:	0018      	movs	r0, r3
   326c2:	4b23      	ldr	r3, [pc, #140]	; (32750 <sw_timer_init+0xcc>)
   326c4:	4798      	blx	r3
   326c6:	4b23      	ldr	r3, [pc, #140]	; (32754 <sw_timer_init+0xd0>)
   326c8:	4798      	blx	r3
   326ca:	0004      	movs	r4, r0
   326cc:	683b      	ldr	r3, [r7, #0]
   326ce:	885b      	ldrh	r3, [r3, #2]
   326d0:	001a      	movs	r2, r3
   326d2:	4b21      	ldr	r3, [pc, #132]	; (32758 <sw_timer_init+0xd4>)
   326d4:	0011      	movs	r1, r2
   326d6:	22fa      	movs	r2, #250	; 0xfa
   326d8:	0210      	lsls	r0, r2, #8
   326da:	4798      	blx	r3
   326dc:	0003      	movs	r3, r0
   326de:	001a      	movs	r2, r3
   326e0:	4b1e      	ldr	r3, [pc, #120]	; (3275c <sw_timer_init+0xd8>)
   326e2:	0011      	movs	r1, r2
   326e4:	0020      	movs	r0, r4
   326e6:	4798      	blx	r3
   326e8:	0003      	movs	r3, r0
   326ea:	001a      	movs	r2, r3
   326ec:	2318      	movs	r3, #24
   326ee:	18fb      	adds	r3, r7, r3
   326f0:	605a      	str	r2, [r3, #4]
   326f2:	2318      	movs	r3, #24
   326f4:	18fb      	adds	r3, r7, r3
   326f6:	2205      	movs	r2, #5
   326f8:	72da      	strb	r2, [r3, #11]
   326fa:	683b      	ldr	r3, [r7, #0]
   326fc:	781b      	ldrb	r3, [r3, #0]
   326fe:	001a      	movs	r2, r3
   32700:	230c      	movs	r3, #12
   32702:	18fb      	adds	r3, r7, r3
   32704:	0092      	lsls	r2, r2, #2
   32706:	58d1      	ldr	r1, [r2, r3]
   32708:	2318      	movs	r3, #24
   3270a:	18fa      	adds	r2, r7, r3
   3270c:	23bc      	movs	r3, #188	; 0xbc
   3270e:	18fb      	adds	r3, r7, r3
   32710:	681b      	ldr	r3, [r3, #0]
   32712:	0018      	movs	r0, r3
   32714:	4b12      	ldr	r3, [pc, #72]	; (32760 <sw_timer_init+0xdc>)
   32716:	4798      	blx	r3
   32718:	683b      	ldr	r3, [r7, #0]
   3271a:	785b      	ldrb	r3, [r3, #1]
   3271c:	3308      	adds	r3, #8
   3271e:	b2da      	uxtb	r2, r3
   32720:	4910      	ldr	r1, [pc, #64]	; (32764 <sw_timer_init+0xe0>)
   32722:	23bc      	movs	r3, #188	; 0xbc
   32724:	18fb      	adds	r3, r7, r3
   32726:	681b      	ldr	r3, [r3, #0]
   32728:	0018      	movs	r0, r3
   3272a:	4b0f      	ldr	r3, [pc, #60]	; (32768 <sw_timer_init+0xe4>)
   3272c:	4798      	blx	r3
   3272e:	683b      	ldr	r3, [r7, #0]
   32730:	785b      	ldrb	r3, [r3, #1]
   32732:	3308      	adds	r3, #8
   32734:	b2da      	uxtb	r2, r3
   32736:	23bc      	movs	r3, #188	; 0xbc
   32738:	18fb      	adds	r3, r7, r3
   3273a:	681b      	ldr	r3, [r3, #0]
   3273c:	0011      	movs	r1, r2
   3273e:	0018      	movs	r0, r3
   32740:	4b0a      	ldr	r3, [pc, #40]	; (3276c <sw_timer_init+0xe8>)
   32742:	4798      	blx	r3
   32744:	46c0      	nop			; (mov r8, r8)
   32746:	46bd      	mov	sp, r7
   32748:	b031      	add	sp, #196	; 0xc4
   3274a:	bd90      	pop	{r4, r7, pc}
   3274c:	00039f04 	.word	0x00039f04
   32750:	0002a5bd 	.word	0x0002a5bd
   32754:	000325ed 	.word	0x000325ed
   32758:	00032d79 	.word	0x00032d79
   3275c:	00032c65 	.word	0x00032c65
   32760:	0002ac19 	.word	0x0002ac19
   32764:	00032641 	.word	0x00032641
   32768:	0002b031 	.word	0x0002b031
   3276c:	0002b071 	.word	0x0002b071

00032770 <sw_timer_enable>:
   32770:	b580      	push	{r7, lr}
   32772:	b084      	sub	sp, #16
   32774:	af00      	add	r7, sp, #0
   32776:	6078      	str	r0, [r7, #4]
   32778:	687b      	ldr	r3, [r7, #4]
   3277a:	3314      	adds	r3, #20
   3277c:	60fb      	str	r3, [r7, #12]
   3277e:	68fb      	ldr	r3, [r7, #12]
   32780:	0018      	movs	r0, r3
   32782:	4b03      	ldr	r3, [pc, #12]	; (32790 <sw_timer_enable+0x20>)
   32784:	4798      	blx	r3
   32786:	46c0      	nop			; (mov r8, r8)
   32788:	46bd      	mov	sp, r7
   3278a:	b004      	add	sp, #16
   3278c:	bd80      	pop	{r7, pc}
   3278e:	46c0      	nop			; (mov r8, r8)
   32790:	00032611 	.word	0x00032611

00032794 <sw_timer_register_callback>:
   32794:	b580      	push	{r7, lr}
   32796:	b086      	sub	sp, #24
   32798:	af00      	add	r7, sp, #0
   3279a:	60f8      	str	r0, [r7, #12]
   3279c:	60b9      	str	r1, [r7, #8]
   3279e:	607a      	str	r2, [r7, #4]
   327a0:	603b      	str	r3, [r7, #0]
   327a2:	2300      	movs	r3, #0
   327a4:	617b      	str	r3, [r7, #20]
   327a6:	e032      	b.n	3280e <sw_timer_register_callback+0x7a>
   327a8:	68f9      	ldr	r1, [r7, #12]
   327aa:	697a      	ldr	r2, [r7, #20]
   327ac:	0013      	movs	r3, r2
   327ae:	009b      	lsls	r3, r3, #2
   327b0:	189b      	adds	r3, r3, r2
   327b2:	009b      	lsls	r3, r3, #2
   327b4:	5c5b      	ldrb	r3, [r3, r1]
   327b6:	07db      	lsls	r3, r3, #31
   327b8:	0fdb      	lsrs	r3, r3, #31
   327ba:	b2db      	uxtb	r3, r3
   327bc:	2b00      	cmp	r3, #0
   327be:	d123      	bne.n	32808 <sw_timer_register_callback+0x74>
   327c0:	697a      	ldr	r2, [r7, #20]
   327c2:	0013      	movs	r3, r2
   327c4:	009b      	lsls	r3, r3, #2
   327c6:	189b      	adds	r3, r3, r2
   327c8:	009b      	lsls	r3, r3, #2
   327ca:	68fa      	ldr	r2, [r7, #12]
   327cc:	18d3      	adds	r3, r2, r3
   327ce:	613b      	str	r3, [r7, #16]
   327d0:	693b      	ldr	r3, [r7, #16]
   327d2:	68ba      	ldr	r2, [r7, #8]
   327d4:	605a      	str	r2, [r3, #4]
   327d6:	693b      	ldr	r3, [r7, #16]
   327d8:	781a      	ldrb	r2, [r3, #0]
   327da:	2102      	movs	r1, #2
   327dc:	438a      	bics	r2, r1
   327de:	701a      	strb	r2, [r3, #0]
   327e0:	693b      	ldr	r3, [r7, #16]
   327e2:	687a      	ldr	r2, [r7, #4]
   327e4:	609a      	str	r2, [r3, #8]
   327e6:	68fb      	ldr	r3, [r7, #12]
   327e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   327ea:	4b0d      	ldr	r3, [pc, #52]	; (32820 <sw_timer_register_callback+0x8c>)
   327ec:	0011      	movs	r1, r2
   327ee:	6838      	ldr	r0, [r7, #0]
   327f0:	4798      	blx	r3
   327f2:	0003      	movs	r3, r0
   327f4:	001a      	movs	r2, r3
   327f6:	693b      	ldr	r3, [r7, #16]
   327f8:	60da      	str	r2, [r3, #12]
   327fa:	693b      	ldr	r3, [r7, #16]
   327fc:	781a      	ldrb	r2, [r3, #0]
   327fe:	2101      	movs	r1, #1
   32800:	430a      	orrs	r2, r1
   32802:	701a      	strb	r2, [r3, #0]
   32804:	697b      	ldr	r3, [r7, #20]
   32806:	e007      	b.n	32818 <sw_timer_register_callback+0x84>
   32808:	697b      	ldr	r3, [r7, #20]
   3280a:	3301      	adds	r3, #1
   3280c:	617b      	str	r3, [r7, #20]
   3280e:	697b      	ldr	r3, [r7, #20]
   32810:	2b00      	cmp	r3, #0
   32812:	ddc9      	ble.n	327a8 <sw_timer_register_callback+0x14>
   32814:	2301      	movs	r3, #1
   32816:	425b      	negs	r3, r3
   32818:	0018      	movs	r0, r3
   3281a:	46bd      	mov	sp, r7
   3281c:	b006      	add	sp, #24
   3281e:	bd80      	pop	{r7, pc}
   32820:	00032c65 	.word	0x00032c65

00032824 <sw_timer_enable_callback>:
   32824:	b580      	push	{r7, lr}
   32826:	b086      	sub	sp, #24
   32828:	af00      	add	r7, sp, #0
   3282a:	60f8      	str	r0, [r7, #12]
   3282c:	60b9      	str	r1, [r7, #8]
   3282e:	607a      	str	r2, [r7, #4]
   32830:	68ba      	ldr	r2, [r7, #8]
   32832:	0013      	movs	r3, r2
   32834:	009b      	lsls	r3, r3, #2
   32836:	189b      	adds	r3, r3, r2
   32838:	009b      	lsls	r3, r3, #2
   3283a:	68fa      	ldr	r2, [r7, #12]
   3283c:	18d3      	adds	r3, r2, r3
   3283e:	617b      	str	r3, [r7, #20]
   32840:	697b      	ldr	r3, [r7, #20]
   32842:	781a      	ldrb	r2, [r3, #0]
   32844:	2102      	movs	r1, #2
   32846:	430a      	orrs	r2, r1
   32848:	701a      	strb	r2, [r3, #0]
   3284a:	68fb      	ldr	r3, [r7, #12]
   3284c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3284e:	4b07      	ldr	r3, [pc, #28]	; (3286c <sw_timer_enable_callback+0x48>)
   32850:	0011      	movs	r1, r2
   32852:	6878      	ldr	r0, [r7, #4]
   32854:	4798      	blx	r3
   32856:	0003      	movs	r3, r0
   32858:	001a      	movs	r2, r3
   3285a:	4b05      	ldr	r3, [pc, #20]	; (32870 <sw_timer_enable_callback+0x4c>)
   3285c:	681b      	ldr	r3, [r3, #0]
   3285e:	18d2      	adds	r2, r2, r3
   32860:	697b      	ldr	r3, [r7, #20]
   32862:	611a      	str	r2, [r3, #16]
   32864:	46c0      	nop			; (mov r8, r8)
   32866:	46bd      	mov	sp, r7
   32868:	b006      	add	sp, #24
   3286a:	bd80      	pop	{r7, pc}
   3286c:	00032c65 	.word	0x00032c65
   32870:	20004300 	.word	0x20004300

00032874 <sw_timer_disable_callback>:
   32874:	b580      	push	{r7, lr}
   32876:	b084      	sub	sp, #16
   32878:	af00      	add	r7, sp, #0
   3287a:	6078      	str	r0, [r7, #4]
   3287c:	6039      	str	r1, [r7, #0]
   3287e:	683a      	ldr	r2, [r7, #0]
   32880:	0013      	movs	r3, r2
   32882:	009b      	lsls	r3, r3, #2
   32884:	189b      	adds	r3, r3, r2
   32886:	009b      	lsls	r3, r3, #2
   32888:	687a      	ldr	r2, [r7, #4]
   3288a:	18d3      	adds	r3, r2, r3
   3288c:	60fb      	str	r3, [r7, #12]
   3288e:	68fb      	ldr	r3, [r7, #12]
   32890:	781a      	ldrb	r2, [r3, #0]
   32892:	2102      	movs	r1, #2
   32894:	438a      	bics	r2, r1
   32896:	701a      	strb	r2, [r3, #0]
   32898:	46c0      	nop			; (mov r8, r8)
   3289a:	46bd      	mov	sp, r7
   3289c:	b004      	add	sp, #16
   3289e:	bd80      	pop	{r7, pc}

000328a0 <sw_timer_task>:
   328a0:	b590      	push	{r4, r7, lr}
   328a2:	b085      	sub	sp, #20
   328a4:	af00      	add	r7, sp, #0
   328a6:	6078      	str	r0, [r7, #4]
   328a8:	2300      	movs	r3, #0
   328aa:	60fb      	str	r3, [r7, #12]
   328ac:	e053      	b.n	32956 <sw_timer_task+0xb6>
   328ae:	6879      	ldr	r1, [r7, #4]
   328b0:	68fa      	ldr	r2, [r7, #12]
   328b2:	0013      	movs	r3, r2
   328b4:	009b      	lsls	r3, r3, #2
   328b6:	189b      	adds	r3, r3, r2
   328b8:	009b      	lsls	r3, r3, #2
   328ba:	5c5b      	ldrb	r3, [r3, r1]
   328bc:	07db      	lsls	r3, r3, #31
   328be:	0fdb      	lsrs	r3, r3, #31
   328c0:	b2db      	uxtb	r3, r3
   328c2:	2b00      	cmp	r3, #0
   328c4:	d044      	beq.n	32950 <sw_timer_task+0xb0>
   328c6:	6879      	ldr	r1, [r7, #4]
   328c8:	68fa      	ldr	r2, [r7, #12]
   328ca:	0013      	movs	r3, r2
   328cc:	009b      	lsls	r3, r3, #2
   328ce:	189b      	adds	r3, r3, r2
   328d0:	009b      	lsls	r3, r3, #2
   328d2:	5c5b      	ldrb	r3, [r3, r1]
   328d4:	079b      	lsls	r3, r3, #30
   328d6:	0fdb      	lsrs	r3, r3, #31
   328d8:	b2db      	uxtb	r3, r3
   328da:	2b00      	cmp	r3, #0
   328dc:	d038      	beq.n	32950 <sw_timer_task+0xb0>
   328de:	68fa      	ldr	r2, [r7, #12]
   328e0:	0013      	movs	r3, r2
   328e2:	009b      	lsls	r3, r3, #2
   328e4:	189b      	adds	r3, r3, r2
   328e6:	009b      	lsls	r3, r3, #2
   328e8:	687a      	ldr	r2, [r7, #4]
   328ea:	18d3      	adds	r3, r2, r3
   328ec:	60bb      	str	r3, [r7, #8]
   328ee:	68bb      	ldr	r3, [r7, #8]
   328f0:	691a      	ldr	r2, [r3, #16]
   328f2:	4b1c      	ldr	r3, [pc, #112]	; (32964 <sw_timer_task+0xc4>)
   328f4:	681b      	ldr	r3, [r3, #0]
   328f6:	1ad3      	subs	r3, r2, r3
   328f8:	d52a      	bpl.n	32950 <sw_timer_task+0xb0>
   328fa:	68bb      	ldr	r3, [r7, #8]
   328fc:	781b      	ldrb	r3, [r3, #0]
   328fe:	2204      	movs	r2, #4
   32900:	4013      	ands	r3, r2
   32902:	b2db      	uxtb	r3, r3
   32904:	2b00      	cmp	r3, #0
   32906:	d123      	bne.n	32950 <sw_timer_task+0xb0>
   32908:	68bb      	ldr	r3, [r7, #8]
   3290a:	781a      	ldrb	r2, [r3, #0]
   3290c:	2104      	movs	r1, #4
   3290e:	430a      	orrs	r2, r1
   32910:	701a      	strb	r2, [r3, #0]
   32912:	68bb      	ldr	r3, [r7, #8]
   32914:	68db      	ldr	r3, [r3, #12]
   32916:	2b00      	cmp	r3, #0
   32918:	d007      	beq.n	3292a <sw_timer_task+0x8a>
   3291a:	68bb      	ldr	r3, [r7, #8]
   3291c:	68da      	ldr	r2, [r3, #12]
   3291e:	4b11      	ldr	r3, [pc, #68]	; (32964 <sw_timer_task+0xc4>)
   32920:	681b      	ldr	r3, [r3, #0]
   32922:	18d2      	adds	r2, r2, r3
   32924:	68bb      	ldr	r3, [r7, #8]
   32926:	611a      	str	r2, [r3, #16]
   32928:	e004      	b.n	32934 <sw_timer_task+0x94>
   3292a:	68bb      	ldr	r3, [r7, #8]
   3292c:	781a      	ldrb	r2, [r3, #0]
   3292e:	2102      	movs	r1, #2
   32930:	438a      	bics	r2, r1
   32932:	701a      	strb	r2, [r3, #0]
   32934:	68bb      	ldr	r3, [r7, #8]
   32936:	685c      	ldr	r4, [r3, #4]
   32938:	68bb      	ldr	r3, [r7, #8]
   3293a:	689a      	ldr	r2, [r3, #8]
   3293c:	68bb      	ldr	r3, [r7, #8]
   3293e:	68db      	ldr	r3, [r3, #12]
   32940:	68f9      	ldr	r1, [r7, #12]
   32942:	6878      	ldr	r0, [r7, #4]
   32944:	47a0      	blx	r4
   32946:	68bb      	ldr	r3, [r7, #8]
   32948:	781a      	ldrb	r2, [r3, #0]
   3294a:	2104      	movs	r1, #4
   3294c:	438a      	bics	r2, r1
   3294e:	701a      	strb	r2, [r3, #0]
   32950:	68fb      	ldr	r3, [r7, #12]
   32952:	3301      	adds	r3, #1
   32954:	60fb      	str	r3, [r7, #12]
   32956:	68fb      	ldr	r3, [r7, #12]
   32958:	2b00      	cmp	r3, #0
   3295a:	dda8      	ble.n	328ae <sw_timer_task+0xe>
   3295c:	46c0      	nop			; (mov r8, r8)
   3295e:	46bd      	mov	sp, r7
   32960:	b005      	add	sp, #20
   32962:	bd90      	pop	{r4, r7, pc}
   32964:	20004300 	.word	0x20004300

00032968 <main>:
 * Application entry point.
 * @return int
 */
int main(void)

{
   32968:	b580      	push	{r7, lr}
   3296a:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   3296c:	4b06      	ldr	r3, [pc, #24]	; (32988 <main+0x20>)
   3296e:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   32970:	4b06      	ldr	r3, [pc, #24]	; (3298c <main+0x24>)
   32972:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   32974:	2001      	movs	r0, #1
   32976:	4b06      	ldr	r3, [pc, #24]	; (32990 <main+0x28>)
   32978:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3297a:	4b06      	ldr	r3, [pc, #24]	; (32994 <main+0x2c>)
   3297c:	4798      	blx	r3

    return 0;  // Will not get here
   3297e:	2300      	movs	r3, #0
}
   32980:	0018      	movs	r0, r3
   32982:	46bd      	mov	sp, r7
   32984:	bd80      	pop	{r7, pc}
   32986:	46c0      	nop			; (mov r8, r8)
   32988:	0002a4b1 	.word	0x0002a4b1
   3298c:	0001e375 	.word	0x0001e375
   32990:	00018a45 	.word	0x00018a45
   32994:	0001c9cd 	.word	0x0001c9cd

00032998 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   32998:	b580      	push	{r7, lr}
   3299a:	b082      	sub	sp, #8
   3299c:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   3299e:	4b30      	ldr	r3, [pc, #192]	; (32a60 <vApplicationDaemonTaskStartupHook+0xc8>)
   329a0:	0018      	movs	r0, r3
   329a2:	4b30      	ldr	r3, [pc, #192]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   329a4:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   329a6:	4b30      	ldr	r3, [pc, #192]	; (32a68 <vApplicationDaemonTaskStartupHook+0xd0>)
   329a8:	0018      	movs	r0, r3
   329aa:	4b2e      	ldr	r3, [pc, #184]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   329ac:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   329ae:	4b2f      	ldr	r3, [pc, #188]	; (32a6c <vApplicationDaemonTaskStartupHook+0xd4>)
   329b0:	4798      	blx	r3
   329b2:	1e03      	subs	r3, r0, #0
   329b4:	d004      	beq.n	329c0 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   329b6:	4b2e      	ldr	r3, [pc, #184]	; (32a70 <vApplicationDaemonTaskStartupHook+0xd8>)
   329b8:	0018      	movs	r0, r3
   329ba:	4b2a      	ldr	r3, [pc, #168]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   329bc:	4798      	blx	r3
   329be:	e003      	b.n	329c8 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   329c0:	4b2c      	ldr	r3, [pc, #176]	; (32a74 <vApplicationDaemonTaskStartupHook+0xdc>)
   329c2:	0018      	movs	r0, r3
   329c4:	4b27      	ldr	r3, [pc, #156]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   329c6:	4798      	blx	r3
    }
	
	
    if (0 != InitializeSeesaw(NEO_TRELLIS_ADDR_1)) {
   329c8:	202e      	movs	r0, #46	; 0x2e
   329ca:	4b2b      	ldr	r3, [pc, #172]	; (32a78 <vApplicationDaemonTaskStartupHook+0xe0>)
   329cc:	4798      	blx	r3
   329ce:	1e03      	subs	r3, r0, #0
   329d0:	d004      	beq.n	329dc <vApplicationDaemonTaskStartupHook+0x44>
        SerialConsoleWriteString("Error initializing 1st Seesaw!\r\n");
   329d2:	4b2a      	ldr	r3, [pc, #168]	; (32a7c <vApplicationDaemonTaskStartupHook+0xe4>)
   329d4:	0018      	movs	r0, r3
   329d6:	4b23      	ldr	r3, [pc, #140]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   329d8:	4798      	blx	r3
   329da:	e003      	b.n	329e4 <vApplicationDaemonTaskStartupHook+0x4c>
    } else {
        SerialConsoleWriteString("Initialized 1st Seesaw!\r\n");
   329dc:	4b28      	ldr	r3, [pc, #160]	; (32a80 <vApplicationDaemonTaskStartupHook+0xe8>)
   329de:	0018      	movs	r0, r3
   329e0:	4b20      	ldr	r3, [pc, #128]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   329e2:	4798      	blx	r3
    }
	
	
	if (0 != InitializeSeesaw(NEO_TRELLIS_ADDR_2)) {
   329e4:	202f      	movs	r0, #47	; 0x2f
   329e6:	4b24      	ldr	r3, [pc, #144]	; (32a78 <vApplicationDaemonTaskStartupHook+0xe0>)
   329e8:	4798      	blx	r3
   329ea:	1e03      	subs	r3, r0, #0
   329ec:	d004      	beq.n	329f8 <vApplicationDaemonTaskStartupHook+0x60>
		SerialConsoleWriteString("Error initializing 2nd Seesaw!\r\n");
   329ee:	4b25      	ldr	r3, [pc, #148]	; (32a84 <vApplicationDaemonTaskStartupHook+0xec>)
   329f0:	0018      	movs	r0, r3
   329f2:	4b1c      	ldr	r3, [pc, #112]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   329f4:	4798      	blx	r3
   329f6:	e003      	b.n	32a00 <vApplicationDaemonTaskStartupHook+0x68>
		} else {
		SerialConsoleWriteString("Initialized 2nd Seesaw!\r\n");
   329f8:	4b23      	ldr	r3, [pc, #140]	; (32a88 <vApplicationDaemonTaskStartupHook+0xf0>)
   329fa:	0018      	movs	r0, r3
   329fc:	4b19      	ldr	r3, [pc, #100]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   329fe:	4798      	blx	r3
	}
	

    uint8_t whoamI = 0;
   32a00:	1dfb      	adds	r3, r7, #7
   32a02:	2200      	movs	r2, #0
   32a04:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   32a06:	4b21      	ldr	r3, [pc, #132]	; (32a8c <vApplicationDaemonTaskStartupHook+0xf4>)
   32a08:	4798      	blx	r3
   32a0a:	0002      	movs	r2, r0
   32a0c:	1dfb      	adds	r3, r7, #7
   32a0e:	0019      	movs	r1, r3
   32a10:	0010      	movs	r0, r2
   32a12:	4b1f      	ldr	r3, [pc, #124]	; (32a90 <vApplicationDaemonTaskStartupHook+0xf8>)
   32a14:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   32a16:	1dfb      	adds	r3, r7, #7
   32a18:	781b      	ldrb	r3, [r3, #0]
   32a1a:	2b6c      	cmp	r3, #108	; 0x6c
   32a1c:	d004      	beq.n	32a28 <vApplicationDaemonTaskStartupHook+0x90>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   32a1e:	4b1d      	ldr	r3, [pc, #116]	; (32a94 <vApplicationDaemonTaskStartupHook+0xfc>)
   32a20:	0018      	movs	r0, r3
   32a22:	4b10      	ldr	r3, [pc, #64]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   32a24:	4798      	blx	r3
   32a26:	e010      	b.n	32a4a <vApplicationDaemonTaskStartupHook+0xb2>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   32a28:	4b1b      	ldr	r3, [pc, #108]	; (32a98 <vApplicationDaemonTaskStartupHook+0x100>)
   32a2a:	0018      	movs	r0, r3
   32a2c:	4b0d      	ldr	r3, [pc, #52]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   32a2e:	4798      	blx	r3
        if (InitImu() == 0) {
   32a30:	4b1a      	ldr	r3, [pc, #104]	; (32a9c <vApplicationDaemonTaskStartupHook+0x104>)
   32a32:	4798      	blx	r3
   32a34:	1e03      	subs	r3, r0, #0
   32a36:	d104      	bne.n	32a42 <vApplicationDaemonTaskStartupHook+0xaa>
            SerialConsoleWriteString("IMU initialized!\r\n");
   32a38:	4b19      	ldr	r3, [pc, #100]	; (32aa0 <vApplicationDaemonTaskStartupHook+0x108>)
   32a3a:	0018      	movs	r0, r3
   32a3c:	4b09      	ldr	r3, [pc, #36]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   32a3e:	4798      	blx	r3
   32a40:	e003      	b.n	32a4a <vApplicationDaemonTaskStartupHook+0xb2>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   32a42:	4b18      	ldr	r3, [pc, #96]	; (32aa4 <vApplicationDaemonTaskStartupHook+0x10c>)
   32a44:	0018      	movs	r0, r3
   32a46:	4b07      	ldr	r3, [pc, #28]	; (32a64 <vApplicationDaemonTaskStartupHook+0xcc>)
   32a48:	4798      	blx	r3
        }
    }

    StartTasks();
   32a4a:	4b17      	ldr	r3, [pc, #92]	; (32aa8 <vApplicationDaemonTaskStartupHook+0x110>)
   32a4c:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   32a4e:	4b17      	ldr	r3, [pc, #92]	; (32aac <vApplicationDaemonTaskStartupHook+0x114>)
   32a50:	681b      	ldr	r3, [r3, #0]
   32a52:	0018      	movs	r0, r3
   32a54:	4b16      	ldr	r3, [pc, #88]	; (32ab0 <vApplicationDaemonTaskStartupHook+0x118>)
   32a56:	4798      	blx	r3
}
   32a58:	46c0      	nop			; (mov r8, r8)
   32a5a:	46bd      	mov	sp, r7
   32a5c:	b002      	add	sp, #8
   32a5e:	bd80      	pop	{r7, pc}
   32a60:	00039f10 	.word	0x00039f10
   32a64:	0001e3e5 	.word	0x0001e3e5
   32a68:	00039f34 	.word	0x00039f34
   32a6c:	00013ced 	.word	0x00013ced
   32a70:	00039f4c 	.word	0x00039f4c
   32a74:	00039f70 	.word	0x00039f70
   32a78:	000150b9 	.word	0x000150b9
   32a7c:	00039f8c 	.word	0x00039f8c
   32a80:	00039fb0 	.word	0x00039fb0
   32a84:	00039fcc 	.word	0x00039fcc
   32a88:	00039ff0 	.word	0x00039ff0
   32a8c:	00014fe1 	.word	0x00014fe1
   32a90:	00014b35 	.word	0x00014b35
   32a94:	0003a00c 	.word	0x0003a00c
   32a98:	0003a020 	.word	0x0003a020
   32a9c:	00014ff1 	.word	0x00014ff1
   32aa0:	0003a030 	.word	0x0003a030
   32aa4:	0003a044 	.word	0x0003a044
   32aa8:	00032ab5 	.word	0x00032ab5
   32aac:	20004308 	.word	0x20004308
   32ab0:	0001c871 	.word	0x0001c871

00032ab4 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   32ab4:	b590      	push	{r4, r7, lr}
   32ab6:	b083      	sub	sp, #12
   32ab8:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   32aba:	4b44      	ldr	r3, [pc, #272]	; (32bcc <StartTasks+0x118>)
   32abc:	4798      	blx	r3
   32abe:	0003      	movs	r3, r0
   32ac0:	4a43      	ldr	r2, [pc, #268]	; (32bd0 <StartTasks+0x11c>)
   32ac2:	4844      	ldr	r0, [pc, #272]	; (32bd4 <StartTasks+0x120>)
   32ac4:	2140      	movs	r1, #64	; 0x40
   32ac6:	4c44      	ldr	r4, [pc, #272]	; (32bd8 <StartTasks+0x124>)
   32ac8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32aca:	4b42      	ldr	r3, [pc, #264]	; (32bd4 <StartTasks+0x120>)
   32acc:	0018      	movs	r0, r3
   32ace:	4b43      	ldr	r3, [pc, #268]	; (32bdc <StartTasks+0x128>)
   32ad0:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   32ad2:	23c8      	movs	r3, #200	; 0xc8
   32ad4:	005a      	lsls	r2, r3, #1
   32ad6:	4942      	ldr	r1, [pc, #264]	; (32be0 <StartTasks+0x12c>)
   32ad8:	4842      	ldr	r0, [pc, #264]	; (32be4 <StartTasks+0x130>)
   32ada:	4b43      	ldr	r3, [pc, #268]	; (32be8 <StartTasks+0x134>)
   32adc:	9301      	str	r3, [sp, #4]
   32ade:	2304      	movs	r3, #4
   32ae0:	9300      	str	r3, [sp, #0]
   32ae2:	2300      	movs	r3, #0
   32ae4:	4c41      	ldr	r4, [pc, #260]	; (32bec <StartTasks+0x138>)
   32ae6:	47a0      	blx	r4
   32ae8:	0003      	movs	r3, r0
   32aea:	2b01      	cmp	r3, #1
   32aec:	d003      	beq.n	32af6 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   32aee:	4b40      	ldr	r3, [pc, #256]	; (32bf0 <StartTasks+0x13c>)
   32af0:	0018      	movs	r0, r3
   32af2:	4b3a      	ldr	r3, [pc, #232]	; (32bdc <StartTasks+0x128>)
   32af4:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   32af6:	4b35      	ldr	r3, [pc, #212]	; (32bcc <StartTasks+0x118>)
   32af8:	4798      	blx	r3
   32afa:	0003      	movs	r3, r0
   32afc:	4a3d      	ldr	r2, [pc, #244]	; (32bf4 <StartTasks+0x140>)
   32afe:	4835      	ldr	r0, [pc, #212]	; (32bd4 <StartTasks+0x120>)
   32b00:	2140      	movs	r1, #64	; 0x40
   32b02:	4c35      	ldr	r4, [pc, #212]	; (32bd8 <StartTasks+0x124>)
   32b04:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32b06:	4b33      	ldr	r3, [pc, #204]	; (32bd4 <StartTasks+0x120>)
   32b08:	0018      	movs	r0, r3
   32b0a:	4b34      	ldr	r3, [pc, #208]	; (32bdc <StartTasks+0x128>)
   32b0c:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   32b0e:	23fa      	movs	r3, #250	; 0xfa
   32b10:	009a      	lsls	r2, r3, #2
   32b12:	4939      	ldr	r1, [pc, #228]	; (32bf8 <StartTasks+0x144>)
   32b14:	4839      	ldr	r0, [pc, #228]	; (32bfc <StartTasks+0x148>)
   32b16:	4b3a      	ldr	r3, [pc, #232]	; (32c00 <StartTasks+0x14c>)
   32b18:	9301      	str	r3, [sp, #4]
   32b1a:	2303      	movs	r3, #3
   32b1c:	9300      	str	r3, [sp, #0]
   32b1e:	2300      	movs	r3, #0
   32b20:	4c32      	ldr	r4, [pc, #200]	; (32bec <StartTasks+0x138>)
   32b22:	47a0      	blx	r4
   32b24:	0003      	movs	r3, r0
   32b26:	2b01      	cmp	r3, #1
   32b28:	d003      	beq.n	32b32 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   32b2a:	4b36      	ldr	r3, [pc, #216]	; (32c04 <StartTasks+0x150>)
   32b2c:	0018      	movs	r0, r3
   32b2e:	4b2b      	ldr	r3, [pc, #172]	; (32bdc <StartTasks+0x128>)
   32b30:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   32b32:	4b26      	ldr	r3, [pc, #152]	; (32bcc <StartTasks+0x118>)
   32b34:	4798      	blx	r3
   32b36:	0003      	movs	r3, r0
   32b38:	4a33      	ldr	r2, [pc, #204]	; (32c08 <StartTasks+0x154>)
   32b3a:	4826      	ldr	r0, [pc, #152]	; (32bd4 <StartTasks+0x120>)
   32b3c:	2140      	movs	r1, #64	; 0x40
   32b3e:	4c26      	ldr	r4, [pc, #152]	; (32bd8 <StartTasks+0x124>)
   32b40:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32b42:	4b24      	ldr	r3, [pc, #144]	; (32bd4 <StartTasks+0x120>)
   32b44:	0018      	movs	r0, r3
   32b46:	4b25      	ldr	r3, [pc, #148]	; (32bdc <StartTasks+0x128>)
   32b48:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   32b4a:	23c8      	movs	r3, #200	; 0xc8
   32b4c:	005a      	lsls	r2, r3, #1
   32b4e:	492f      	ldr	r1, [pc, #188]	; (32c0c <StartTasks+0x158>)
   32b50:	482f      	ldr	r0, [pc, #188]	; (32c10 <StartTasks+0x15c>)
   32b52:	4b30      	ldr	r3, [pc, #192]	; (32c14 <StartTasks+0x160>)
   32b54:	9301      	str	r3, [sp, #4]
   32b56:	2304      	movs	r3, #4
   32b58:	9300      	str	r3, [sp, #0]
   32b5a:	2300      	movs	r3, #0
   32b5c:	4c23      	ldr	r4, [pc, #140]	; (32bec <StartTasks+0x138>)
   32b5e:	47a0      	blx	r4
   32b60:	0003      	movs	r3, r0
   32b62:	2b01      	cmp	r3, #1
   32b64:	d003      	beq.n	32b6e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   32b66:	4b2c      	ldr	r3, [pc, #176]	; (32c18 <StartTasks+0x164>)
   32b68:	0018      	movs	r0, r3
   32b6a:	4b1c      	ldr	r3, [pc, #112]	; (32bdc <StartTasks+0x128>)
   32b6c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   32b6e:	4b17      	ldr	r3, [pc, #92]	; (32bcc <StartTasks+0x118>)
   32b70:	4798      	blx	r3
   32b72:	0003      	movs	r3, r0
   32b74:	4a29      	ldr	r2, [pc, #164]	; (32c1c <StartTasks+0x168>)
   32b76:	4817      	ldr	r0, [pc, #92]	; (32bd4 <StartTasks+0x120>)
   32b78:	2140      	movs	r1, #64	; 0x40
   32b7a:	4c17      	ldr	r4, [pc, #92]	; (32bd8 <StartTasks+0x124>)
   32b7c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32b7e:	4b15      	ldr	r3, [pc, #84]	; (32bd4 <StartTasks+0x120>)
   32b80:	0018      	movs	r0, r3
   32b82:	4b16      	ldr	r3, [pc, #88]	; (32bdc <StartTasks+0x128>)
   32b84:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   32b86:	2380      	movs	r3, #128	; 0x80
   32b88:	005a      	lsls	r2, r3, #1
   32b8a:	4925      	ldr	r1, [pc, #148]	; (32c20 <StartTasks+0x16c>)
   32b8c:	4825      	ldr	r0, [pc, #148]	; (32c24 <StartTasks+0x170>)
   32b8e:	4b26      	ldr	r3, [pc, #152]	; (32c28 <StartTasks+0x174>)
   32b90:	9301      	str	r3, [sp, #4]
   32b92:	2304      	movs	r3, #4
   32b94:	9300      	str	r3, [sp, #0]
   32b96:	2300      	movs	r3, #0
   32b98:	4c14      	ldr	r4, [pc, #80]	; (32bec <StartTasks+0x138>)
   32b9a:	47a0      	blx	r4
   32b9c:	0003      	movs	r3, r0
   32b9e:	2b01      	cmp	r3, #1
   32ba0:	d003      	beq.n	32baa <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   32ba2:	4b22      	ldr	r3, [pc, #136]	; (32c2c <StartTasks+0x178>)
   32ba4:	0018      	movs	r0, r3
   32ba6:	4b0d      	ldr	r3, [pc, #52]	; (32bdc <StartTasks+0x128>)
   32ba8:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   32baa:	4b08      	ldr	r3, [pc, #32]	; (32bcc <StartTasks+0x118>)
   32bac:	4798      	blx	r3
   32bae:	0003      	movs	r3, r0
   32bb0:	4a1f      	ldr	r2, [pc, #124]	; (32c30 <StartTasks+0x17c>)
   32bb2:	4808      	ldr	r0, [pc, #32]	; (32bd4 <StartTasks+0x120>)
   32bb4:	2140      	movs	r1, #64	; 0x40
   32bb6:	4c08      	ldr	r4, [pc, #32]	; (32bd8 <StartTasks+0x124>)
   32bb8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   32bba:	4b06      	ldr	r3, [pc, #24]	; (32bd4 <StartTasks+0x120>)
   32bbc:	0018      	movs	r0, r3
   32bbe:	4b07      	ldr	r3, [pc, #28]	; (32bdc <StartTasks+0x128>)
   32bc0:	4798      	blx	r3
}
   32bc2:	46c0      	nop			; (mov r8, r8)
   32bc4:	46bd      	mov	sp, r7
   32bc6:	b001      	add	sp, #4
   32bc8:	bd90      	pop	{r4, r7, pc}
   32bca:	46c0      	nop			; (mov r8, r8)
   32bcc:	0001a9b1 	.word	0x0001a9b1
   32bd0:	0003a060 	.word	0x0003a060
   32bd4:	200057dc 	.word	0x200057dc
   32bd8:	00034e99 	.word	0x00034e99
   32bdc:	0001e3e5 	.word	0x0001e3e5
   32be0:	0003a084 	.word	0x0003a084
   32be4:	00012e71 	.word	0x00012e71
   32be8:	20004304 	.word	0x20004304
   32bec:	0001c3f5 	.word	0x0001c3f5
   32bf0:	0003a090 	.word	0x0003a090
   32bf4:	0003a0bc 	.word	0x0003a0bc
   32bf8:	0003a0dc 	.word	0x0003a0dc
   32bfc:	000174a9 	.word	0x000174a9
   32c00:	2000430c 	.word	0x2000430c
   32c04:	0003a0e8 	.word	0x0003a0e8
   32c08:	0003a114 	.word	0x0003a114
   32c0c:	0003a134 	.word	0x0003a134
   32c10:	000157cd 	.word	0x000157cd
   32c14:	20004310 	.word	0x20004310
   32c18:	0003a13c 	.word	0x0003a13c
   32c1c:	0003a168 	.word	0x0003a168
   32c20:	0003a18c 	.word	0x0003a18c
   32c24:	00013741 	.word	0x00013741
   32c28:	20004314 	.word	0x20004314
   32c2c:	0003a19c 	.word	0x0003a19c
   32c30:	0003a1cc 	.word	0x0003a1cc

00032c34 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   32c34:	b580      	push	{r7, lr}
   32c36:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   32c38:	4b02      	ldr	r3, [pc, #8]	; (32c44 <vApplicationMallocFailedHook+0x10>)
   32c3a:	0018      	movs	r0, r3
   32c3c:	4b02      	ldr	r3, [pc, #8]	; (32c48 <vApplicationMallocFailedHook+0x14>)
   32c3e:	4798      	blx	r3
    while (1)
   32c40:	e7fe      	b.n	32c40 <vApplicationMallocFailedHook+0xc>
   32c42:	46c0      	nop			; (mov r8, r8)
   32c44:	0003a1f4 	.word	0x0003a1f4
   32c48:	0001e3e5 	.word	0x0001e3e5

00032c4c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   32c4c:	b580      	push	{r7, lr}
   32c4e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   32c50:	4b02      	ldr	r3, [pc, #8]	; (32c5c <vApplicationStackOverflowHook+0x10>)
   32c52:	0018      	movs	r0, r3
   32c54:	4b02      	ldr	r3, [pc, #8]	; (32c60 <vApplicationStackOverflowHook+0x14>)
   32c56:	4798      	blx	r3
    while (1)
   32c58:	e7fe      	b.n	32c58 <vApplicationStackOverflowHook+0xc>
   32c5a:	46c0      	nop			; (mov r8, r8)
   32c5c:	0003a220 	.word	0x0003a220
   32c60:	0001e3e5 	.word	0x0001e3e5

00032c64 <__udivsi3>:
   32c64:	2200      	movs	r2, #0
   32c66:	0843      	lsrs	r3, r0, #1
   32c68:	428b      	cmp	r3, r1
   32c6a:	d374      	bcc.n	32d56 <__udivsi3+0xf2>
   32c6c:	0903      	lsrs	r3, r0, #4
   32c6e:	428b      	cmp	r3, r1
   32c70:	d35f      	bcc.n	32d32 <__udivsi3+0xce>
   32c72:	0a03      	lsrs	r3, r0, #8
   32c74:	428b      	cmp	r3, r1
   32c76:	d344      	bcc.n	32d02 <__udivsi3+0x9e>
   32c78:	0b03      	lsrs	r3, r0, #12
   32c7a:	428b      	cmp	r3, r1
   32c7c:	d328      	bcc.n	32cd0 <__udivsi3+0x6c>
   32c7e:	0c03      	lsrs	r3, r0, #16
   32c80:	428b      	cmp	r3, r1
   32c82:	d30d      	bcc.n	32ca0 <__udivsi3+0x3c>
   32c84:	22ff      	movs	r2, #255	; 0xff
   32c86:	0209      	lsls	r1, r1, #8
   32c88:	ba12      	rev	r2, r2
   32c8a:	0c03      	lsrs	r3, r0, #16
   32c8c:	428b      	cmp	r3, r1
   32c8e:	d302      	bcc.n	32c96 <__udivsi3+0x32>
   32c90:	1212      	asrs	r2, r2, #8
   32c92:	0209      	lsls	r1, r1, #8
   32c94:	d065      	beq.n	32d62 <__udivsi3+0xfe>
   32c96:	0b03      	lsrs	r3, r0, #12
   32c98:	428b      	cmp	r3, r1
   32c9a:	d319      	bcc.n	32cd0 <__udivsi3+0x6c>
   32c9c:	e000      	b.n	32ca0 <__udivsi3+0x3c>
   32c9e:	0a09      	lsrs	r1, r1, #8
   32ca0:	0bc3      	lsrs	r3, r0, #15
   32ca2:	428b      	cmp	r3, r1
   32ca4:	d301      	bcc.n	32caa <__udivsi3+0x46>
   32ca6:	03cb      	lsls	r3, r1, #15
   32ca8:	1ac0      	subs	r0, r0, r3
   32caa:	4152      	adcs	r2, r2
   32cac:	0b83      	lsrs	r3, r0, #14
   32cae:	428b      	cmp	r3, r1
   32cb0:	d301      	bcc.n	32cb6 <__udivsi3+0x52>
   32cb2:	038b      	lsls	r3, r1, #14
   32cb4:	1ac0      	subs	r0, r0, r3
   32cb6:	4152      	adcs	r2, r2
   32cb8:	0b43      	lsrs	r3, r0, #13
   32cba:	428b      	cmp	r3, r1
   32cbc:	d301      	bcc.n	32cc2 <__udivsi3+0x5e>
   32cbe:	034b      	lsls	r3, r1, #13
   32cc0:	1ac0      	subs	r0, r0, r3
   32cc2:	4152      	adcs	r2, r2
   32cc4:	0b03      	lsrs	r3, r0, #12
   32cc6:	428b      	cmp	r3, r1
   32cc8:	d301      	bcc.n	32cce <__udivsi3+0x6a>
   32cca:	030b      	lsls	r3, r1, #12
   32ccc:	1ac0      	subs	r0, r0, r3
   32cce:	4152      	adcs	r2, r2
   32cd0:	0ac3      	lsrs	r3, r0, #11
   32cd2:	428b      	cmp	r3, r1
   32cd4:	d301      	bcc.n	32cda <__udivsi3+0x76>
   32cd6:	02cb      	lsls	r3, r1, #11
   32cd8:	1ac0      	subs	r0, r0, r3
   32cda:	4152      	adcs	r2, r2
   32cdc:	0a83      	lsrs	r3, r0, #10
   32cde:	428b      	cmp	r3, r1
   32ce0:	d301      	bcc.n	32ce6 <__udivsi3+0x82>
   32ce2:	028b      	lsls	r3, r1, #10
   32ce4:	1ac0      	subs	r0, r0, r3
   32ce6:	4152      	adcs	r2, r2
   32ce8:	0a43      	lsrs	r3, r0, #9
   32cea:	428b      	cmp	r3, r1
   32cec:	d301      	bcc.n	32cf2 <__udivsi3+0x8e>
   32cee:	024b      	lsls	r3, r1, #9
   32cf0:	1ac0      	subs	r0, r0, r3
   32cf2:	4152      	adcs	r2, r2
   32cf4:	0a03      	lsrs	r3, r0, #8
   32cf6:	428b      	cmp	r3, r1
   32cf8:	d301      	bcc.n	32cfe <__udivsi3+0x9a>
   32cfa:	020b      	lsls	r3, r1, #8
   32cfc:	1ac0      	subs	r0, r0, r3
   32cfe:	4152      	adcs	r2, r2
   32d00:	d2cd      	bcs.n	32c9e <__udivsi3+0x3a>
   32d02:	09c3      	lsrs	r3, r0, #7
   32d04:	428b      	cmp	r3, r1
   32d06:	d301      	bcc.n	32d0c <__udivsi3+0xa8>
   32d08:	01cb      	lsls	r3, r1, #7
   32d0a:	1ac0      	subs	r0, r0, r3
   32d0c:	4152      	adcs	r2, r2
   32d0e:	0983      	lsrs	r3, r0, #6
   32d10:	428b      	cmp	r3, r1
   32d12:	d301      	bcc.n	32d18 <__udivsi3+0xb4>
   32d14:	018b      	lsls	r3, r1, #6
   32d16:	1ac0      	subs	r0, r0, r3
   32d18:	4152      	adcs	r2, r2
   32d1a:	0943      	lsrs	r3, r0, #5
   32d1c:	428b      	cmp	r3, r1
   32d1e:	d301      	bcc.n	32d24 <__udivsi3+0xc0>
   32d20:	014b      	lsls	r3, r1, #5
   32d22:	1ac0      	subs	r0, r0, r3
   32d24:	4152      	adcs	r2, r2
   32d26:	0903      	lsrs	r3, r0, #4
   32d28:	428b      	cmp	r3, r1
   32d2a:	d301      	bcc.n	32d30 <__udivsi3+0xcc>
   32d2c:	010b      	lsls	r3, r1, #4
   32d2e:	1ac0      	subs	r0, r0, r3
   32d30:	4152      	adcs	r2, r2
   32d32:	08c3      	lsrs	r3, r0, #3
   32d34:	428b      	cmp	r3, r1
   32d36:	d301      	bcc.n	32d3c <__udivsi3+0xd8>
   32d38:	00cb      	lsls	r3, r1, #3
   32d3a:	1ac0      	subs	r0, r0, r3
   32d3c:	4152      	adcs	r2, r2
   32d3e:	0883      	lsrs	r3, r0, #2
   32d40:	428b      	cmp	r3, r1
   32d42:	d301      	bcc.n	32d48 <__udivsi3+0xe4>
   32d44:	008b      	lsls	r3, r1, #2
   32d46:	1ac0      	subs	r0, r0, r3
   32d48:	4152      	adcs	r2, r2
   32d4a:	0843      	lsrs	r3, r0, #1
   32d4c:	428b      	cmp	r3, r1
   32d4e:	d301      	bcc.n	32d54 <__udivsi3+0xf0>
   32d50:	004b      	lsls	r3, r1, #1
   32d52:	1ac0      	subs	r0, r0, r3
   32d54:	4152      	adcs	r2, r2
   32d56:	1a41      	subs	r1, r0, r1
   32d58:	d200      	bcs.n	32d5c <__udivsi3+0xf8>
   32d5a:	4601      	mov	r1, r0
   32d5c:	4152      	adcs	r2, r2
   32d5e:	4610      	mov	r0, r2
   32d60:	4770      	bx	lr
   32d62:	e7ff      	b.n	32d64 <__udivsi3+0x100>
   32d64:	b501      	push	{r0, lr}
   32d66:	2000      	movs	r0, #0
   32d68:	f000 f8f0 	bl	32f4c <__aeabi_idiv0>
   32d6c:	bd02      	pop	{r1, pc}
   32d6e:	46c0      	nop			; (mov r8, r8)

00032d70 <__aeabi_uidivmod>:
   32d70:	2900      	cmp	r1, #0
   32d72:	d0f7      	beq.n	32d64 <__udivsi3+0x100>
   32d74:	e776      	b.n	32c64 <__udivsi3>
   32d76:	4770      	bx	lr

00032d78 <__divsi3>:
   32d78:	4603      	mov	r3, r0
   32d7a:	430b      	orrs	r3, r1
   32d7c:	d47f      	bmi.n	32e7e <__divsi3+0x106>
   32d7e:	2200      	movs	r2, #0
   32d80:	0843      	lsrs	r3, r0, #1
   32d82:	428b      	cmp	r3, r1
   32d84:	d374      	bcc.n	32e70 <__divsi3+0xf8>
   32d86:	0903      	lsrs	r3, r0, #4
   32d88:	428b      	cmp	r3, r1
   32d8a:	d35f      	bcc.n	32e4c <__divsi3+0xd4>
   32d8c:	0a03      	lsrs	r3, r0, #8
   32d8e:	428b      	cmp	r3, r1
   32d90:	d344      	bcc.n	32e1c <__divsi3+0xa4>
   32d92:	0b03      	lsrs	r3, r0, #12
   32d94:	428b      	cmp	r3, r1
   32d96:	d328      	bcc.n	32dea <__divsi3+0x72>
   32d98:	0c03      	lsrs	r3, r0, #16
   32d9a:	428b      	cmp	r3, r1
   32d9c:	d30d      	bcc.n	32dba <__divsi3+0x42>
   32d9e:	22ff      	movs	r2, #255	; 0xff
   32da0:	0209      	lsls	r1, r1, #8
   32da2:	ba12      	rev	r2, r2
   32da4:	0c03      	lsrs	r3, r0, #16
   32da6:	428b      	cmp	r3, r1
   32da8:	d302      	bcc.n	32db0 <__divsi3+0x38>
   32daa:	1212      	asrs	r2, r2, #8
   32dac:	0209      	lsls	r1, r1, #8
   32dae:	d065      	beq.n	32e7c <__divsi3+0x104>
   32db0:	0b03      	lsrs	r3, r0, #12
   32db2:	428b      	cmp	r3, r1
   32db4:	d319      	bcc.n	32dea <__divsi3+0x72>
   32db6:	e000      	b.n	32dba <__divsi3+0x42>
   32db8:	0a09      	lsrs	r1, r1, #8
   32dba:	0bc3      	lsrs	r3, r0, #15
   32dbc:	428b      	cmp	r3, r1
   32dbe:	d301      	bcc.n	32dc4 <__divsi3+0x4c>
   32dc0:	03cb      	lsls	r3, r1, #15
   32dc2:	1ac0      	subs	r0, r0, r3
   32dc4:	4152      	adcs	r2, r2
   32dc6:	0b83      	lsrs	r3, r0, #14
   32dc8:	428b      	cmp	r3, r1
   32dca:	d301      	bcc.n	32dd0 <__divsi3+0x58>
   32dcc:	038b      	lsls	r3, r1, #14
   32dce:	1ac0      	subs	r0, r0, r3
   32dd0:	4152      	adcs	r2, r2
   32dd2:	0b43      	lsrs	r3, r0, #13
   32dd4:	428b      	cmp	r3, r1
   32dd6:	d301      	bcc.n	32ddc <__divsi3+0x64>
   32dd8:	034b      	lsls	r3, r1, #13
   32dda:	1ac0      	subs	r0, r0, r3
   32ddc:	4152      	adcs	r2, r2
   32dde:	0b03      	lsrs	r3, r0, #12
   32de0:	428b      	cmp	r3, r1
   32de2:	d301      	bcc.n	32de8 <__divsi3+0x70>
   32de4:	030b      	lsls	r3, r1, #12
   32de6:	1ac0      	subs	r0, r0, r3
   32de8:	4152      	adcs	r2, r2
   32dea:	0ac3      	lsrs	r3, r0, #11
   32dec:	428b      	cmp	r3, r1
   32dee:	d301      	bcc.n	32df4 <__divsi3+0x7c>
   32df0:	02cb      	lsls	r3, r1, #11
   32df2:	1ac0      	subs	r0, r0, r3
   32df4:	4152      	adcs	r2, r2
   32df6:	0a83      	lsrs	r3, r0, #10
   32df8:	428b      	cmp	r3, r1
   32dfa:	d301      	bcc.n	32e00 <__divsi3+0x88>
   32dfc:	028b      	lsls	r3, r1, #10
   32dfe:	1ac0      	subs	r0, r0, r3
   32e00:	4152      	adcs	r2, r2
   32e02:	0a43      	lsrs	r3, r0, #9
   32e04:	428b      	cmp	r3, r1
   32e06:	d301      	bcc.n	32e0c <__divsi3+0x94>
   32e08:	024b      	lsls	r3, r1, #9
   32e0a:	1ac0      	subs	r0, r0, r3
   32e0c:	4152      	adcs	r2, r2
   32e0e:	0a03      	lsrs	r3, r0, #8
   32e10:	428b      	cmp	r3, r1
   32e12:	d301      	bcc.n	32e18 <__divsi3+0xa0>
   32e14:	020b      	lsls	r3, r1, #8
   32e16:	1ac0      	subs	r0, r0, r3
   32e18:	4152      	adcs	r2, r2
   32e1a:	d2cd      	bcs.n	32db8 <__divsi3+0x40>
   32e1c:	09c3      	lsrs	r3, r0, #7
   32e1e:	428b      	cmp	r3, r1
   32e20:	d301      	bcc.n	32e26 <__divsi3+0xae>
   32e22:	01cb      	lsls	r3, r1, #7
   32e24:	1ac0      	subs	r0, r0, r3
   32e26:	4152      	adcs	r2, r2
   32e28:	0983      	lsrs	r3, r0, #6
   32e2a:	428b      	cmp	r3, r1
   32e2c:	d301      	bcc.n	32e32 <__divsi3+0xba>
   32e2e:	018b      	lsls	r3, r1, #6
   32e30:	1ac0      	subs	r0, r0, r3
   32e32:	4152      	adcs	r2, r2
   32e34:	0943      	lsrs	r3, r0, #5
   32e36:	428b      	cmp	r3, r1
   32e38:	d301      	bcc.n	32e3e <__divsi3+0xc6>
   32e3a:	014b      	lsls	r3, r1, #5
   32e3c:	1ac0      	subs	r0, r0, r3
   32e3e:	4152      	adcs	r2, r2
   32e40:	0903      	lsrs	r3, r0, #4
   32e42:	428b      	cmp	r3, r1
   32e44:	d301      	bcc.n	32e4a <__divsi3+0xd2>
   32e46:	010b      	lsls	r3, r1, #4
   32e48:	1ac0      	subs	r0, r0, r3
   32e4a:	4152      	adcs	r2, r2
   32e4c:	08c3      	lsrs	r3, r0, #3
   32e4e:	428b      	cmp	r3, r1
   32e50:	d301      	bcc.n	32e56 <__divsi3+0xde>
   32e52:	00cb      	lsls	r3, r1, #3
   32e54:	1ac0      	subs	r0, r0, r3
   32e56:	4152      	adcs	r2, r2
   32e58:	0883      	lsrs	r3, r0, #2
   32e5a:	428b      	cmp	r3, r1
   32e5c:	d301      	bcc.n	32e62 <__divsi3+0xea>
   32e5e:	008b      	lsls	r3, r1, #2
   32e60:	1ac0      	subs	r0, r0, r3
   32e62:	4152      	adcs	r2, r2
   32e64:	0843      	lsrs	r3, r0, #1
   32e66:	428b      	cmp	r3, r1
   32e68:	d301      	bcc.n	32e6e <__divsi3+0xf6>
   32e6a:	004b      	lsls	r3, r1, #1
   32e6c:	1ac0      	subs	r0, r0, r3
   32e6e:	4152      	adcs	r2, r2
   32e70:	1a41      	subs	r1, r0, r1
   32e72:	d200      	bcs.n	32e76 <__divsi3+0xfe>
   32e74:	4601      	mov	r1, r0
   32e76:	4152      	adcs	r2, r2
   32e78:	4610      	mov	r0, r2
   32e7a:	4770      	bx	lr
   32e7c:	e05d      	b.n	32f3a <__divsi3+0x1c2>
   32e7e:	0fca      	lsrs	r2, r1, #31
   32e80:	d000      	beq.n	32e84 <__divsi3+0x10c>
   32e82:	4249      	negs	r1, r1
   32e84:	1003      	asrs	r3, r0, #32
   32e86:	d300      	bcc.n	32e8a <__divsi3+0x112>
   32e88:	4240      	negs	r0, r0
   32e8a:	4053      	eors	r3, r2
   32e8c:	2200      	movs	r2, #0
   32e8e:	469c      	mov	ip, r3
   32e90:	0903      	lsrs	r3, r0, #4
   32e92:	428b      	cmp	r3, r1
   32e94:	d32d      	bcc.n	32ef2 <__divsi3+0x17a>
   32e96:	0a03      	lsrs	r3, r0, #8
   32e98:	428b      	cmp	r3, r1
   32e9a:	d312      	bcc.n	32ec2 <__divsi3+0x14a>
   32e9c:	22fc      	movs	r2, #252	; 0xfc
   32e9e:	0189      	lsls	r1, r1, #6
   32ea0:	ba12      	rev	r2, r2
   32ea2:	0a03      	lsrs	r3, r0, #8
   32ea4:	428b      	cmp	r3, r1
   32ea6:	d30c      	bcc.n	32ec2 <__divsi3+0x14a>
   32ea8:	0189      	lsls	r1, r1, #6
   32eaa:	1192      	asrs	r2, r2, #6
   32eac:	428b      	cmp	r3, r1
   32eae:	d308      	bcc.n	32ec2 <__divsi3+0x14a>
   32eb0:	0189      	lsls	r1, r1, #6
   32eb2:	1192      	asrs	r2, r2, #6
   32eb4:	428b      	cmp	r3, r1
   32eb6:	d304      	bcc.n	32ec2 <__divsi3+0x14a>
   32eb8:	0189      	lsls	r1, r1, #6
   32eba:	d03a      	beq.n	32f32 <__divsi3+0x1ba>
   32ebc:	1192      	asrs	r2, r2, #6
   32ebe:	e000      	b.n	32ec2 <__divsi3+0x14a>
   32ec0:	0989      	lsrs	r1, r1, #6
   32ec2:	09c3      	lsrs	r3, r0, #7
   32ec4:	428b      	cmp	r3, r1
   32ec6:	d301      	bcc.n	32ecc <__divsi3+0x154>
   32ec8:	01cb      	lsls	r3, r1, #7
   32eca:	1ac0      	subs	r0, r0, r3
   32ecc:	4152      	adcs	r2, r2
   32ece:	0983      	lsrs	r3, r0, #6
   32ed0:	428b      	cmp	r3, r1
   32ed2:	d301      	bcc.n	32ed8 <__divsi3+0x160>
   32ed4:	018b      	lsls	r3, r1, #6
   32ed6:	1ac0      	subs	r0, r0, r3
   32ed8:	4152      	adcs	r2, r2
   32eda:	0943      	lsrs	r3, r0, #5
   32edc:	428b      	cmp	r3, r1
   32ede:	d301      	bcc.n	32ee4 <__divsi3+0x16c>
   32ee0:	014b      	lsls	r3, r1, #5
   32ee2:	1ac0      	subs	r0, r0, r3
   32ee4:	4152      	adcs	r2, r2
   32ee6:	0903      	lsrs	r3, r0, #4
   32ee8:	428b      	cmp	r3, r1
   32eea:	d301      	bcc.n	32ef0 <__divsi3+0x178>
   32eec:	010b      	lsls	r3, r1, #4
   32eee:	1ac0      	subs	r0, r0, r3
   32ef0:	4152      	adcs	r2, r2
   32ef2:	08c3      	lsrs	r3, r0, #3
   32ef4:	428b      	cmp	r3, r1
   32ef6:	d301      	bcc.n	32efc <__divsi3+0x184>
   32ef8:	00cb      	lsls	r3, r1, #3
   32efa:	1ac0      	subs	r0, r0, r3
   32efc:	4152      	adcs	r2, r2
   32efe:	0883      	lsrs	r3, r0, #2
   32f00:	428b      	cmp	r3, r1
   32f02:	d301      	bcc.n	32f08 <__divsi3+0x190>
   32f04:	008b      	lsls	r3, r1, #2
   32f06:	1ac0      	subs	r0, r0, r3
   32f08:	4152      	adcs	r2, r2
   32f0a:	d2d9      	bcs.n	32ec0 <__divsi3+0x148>
   32f0c:	0843      	lsrs	r3, r0, #1
   32f0e:	428b      	cmp	r3, r1
   32f10:	d301      	bcc.n	32f16 <__divsi3+0x19e>
   32f12:	004b      	lsls	r3, r1, #1
   32f14:	1ac0      	subs	r0, r0, r3
   32f16:	4152      	adcs	r2, r2
   32f18:	1a41      	subs	r1, r0, r1
   32f1a:	d200      	bcs.n	32f1e <__divsi3+0x1a6>
   32f1c:	4601      	mov	r1, r0
   32f1e:	4663      	mov	r3, ip
   32f20:	4152      	adcs	r2, r2
   32f22:	105b      	asrs	r3, r3, #1
   32f24:	4610      	mov	r0, r2
   32f26:	d301      	bcc.n	32f2c <__divsi3+0x1b4>
   32f28:	4240      	negs	r0, r0
   32f2a:	2b00      	cmp	r3, #0
   32f2c:	d500      	bpl.n	32f30 <__divsi3+0x1b8>
   32f2e:	4249      	negs	r1, r1
   32f30:	4770      	bx	lr
   32f32:	4663      	mov	r3, ip
   32f34:	105b      	asrs	r3, r3, #1
   32f36:	d300      	bcc.n	32f3a <__divsi3+0x1c2>
   32f38:	4240      	negs	r0, r0
   32f3a:	b501      	push	{r0, lr}
   32f3c:	2000      	movs	r0, #0
   32f3e:	f000 f805 	bl	32f4c <__aeabi_idiv0>
   32f42:	bd02      	pop	{r1, pc}

00032f44 <__aeabi_idivmod>:
   32f44:	2900      	cmp	r1, #0
   32f46:	d0f8      	beq.n	32f3a <__divsi3+0x1c2>
   32f48:	e716      	b.n	32d78 <__divsi3>
   32f4a:	4770      	bx	lr

00032f4c <__aeabi_idiv0>:
   32f4c:	4770      	bx	lr
   32f4e:	46c0      	nop			; (mov r8, r8)

00032f50 <__aeabi_lmul>:
   32f50:	b5f0      	push	{r4, r5, r6, r7, lr}
   32f52:	46ce      	mov	lr, r9
   32f54:	4647      	mov	r7, r8
   32f56:	0415      	lsls	r5, r2, #16
   32f58:	0c2d      	lsrs	r5, r5, #16
   32f5a:	002e      	movs	r6, r5
   32f5c:	b580      	push	{r7, lr}
   32f5e:	0407      	lsls	r7, r0, #16
   32f60:	0c14      	lsrs	r4, r2, #16
   32f62:	0c3f      	lsrs	r7, r7, #16
   32f64:	4699      	mov	r9, r3
   32f66:	0c03      	lsrs	r3, r0, #16
   32f68:	437e      	muls	r6, r7
   32f6a:	435d      	muls	r5, r3
   32f6c:	4367      	muls	r7, r4
   32f6e:	4363      	muls	r3, r4
   32f70:	197f      	adds	r7, r7, r5
   32f72:	0c34      	lsrs	r4, r6, #16
   32f74:	19e4      	adds	r4, r4, r7
   32f76:	469c      	mov	ip, r3
   32f78:	42a5      	cmp	r5, r4
   32f7a:	d903      	bls.n	32f84 <__aeabi_lmul+0x34>
   32f7c:	2380      	movs	r3, #128	; 0x80
   32f7e:	025b      	lsls	r3, r3, #9
   32f80:	4698      	mov	r8, r3
   32f82:	44c4      	add	ip, r8
   32f84:	464b      	mov	r3, r9
   32f86:	4351      	muls	r1, r2
   32f88:	4343      	muls	r3, r0
   32f8a:	0436      	lsls	r6, r6, #16
   32f8c:	0c36      	lsrs	r6, r6, #16
   32f8e:	0c25      	lsrs	r5, r4, #16
   32f90:	0424      	lsls	r4, r4, #16
   32f92:	4465      	add	r5, ip
   32f94:	19a4      	adds	r4, r4, r6
   32f96:	1859      	adds	r1, r3, r1
   32f98:	1949      	adds	r1, r1, r5
   32f9a:	0020      	movs	r0, r4
   32f9c:	bc0c      	pop	{r2, r3}
   32f9e:	4690      	mov	r8, r2
   32fa0:	4699      	mov	r9, r3
   32fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00032fa4 <__aeabi_fmul>:
   32fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32fa6:	4657      	mov	r7, sl
   32fa8:	464e      	mov	r6, r9
   32faa:	4645      	mov	r5, r8
   32fac:	46de      	mov	lr, fp
   32fae:	b5e0      	push	{r5, r6, r7, lr}
   32fb0:	0247      	lsls	r7, r0, #9
   32fb2:	0046      	lsls	r6, r0, #1
   32fb4:	4688      	mov	r8, r1
   32fb6:	0a7f      	lsrs	r7, r7, #9
   32fb8:	0e36      	lsrs	r6, r6, #24
   32fba:	0fc4      	lsrs	r4, r0, #31
   32fbc:	2e00      	cmp	r6, #0
   32fbe:	d047      	beq.n	33050 <__aeabi_fmul+0xac>
   32fc0:	2eff      	cmp	r6, #255	; 0xff
   32fc2:	d024      	beq.n	3300e <__aeabi_fmul+0x6a>
   32fc4:	00fb      	lsls	r3, r7, #3
   32fc6:	2780      	movs	r7, #128	; 0x80
   32fc8:	04ff      	lsls	r7, r7, #19
   32fca:	431f      	orrs	r7, r3
   32fcc:	2300      	movs	r3, #0
   32fce:	4699      	mov	r9, r3
   32fd0:	469a      	mov	sl, r3
   32fd2:	3e7f      	subs	r6, #127	; 0x7f
   32fd4:	4643      	mov	r3, r8
   32fd6:	025d      	lsls	r5, r3, #9
   32fd8:	0058      	lsls	r0, r3, #1
   32fda:	0fdb      	lsrs	r3, r3, #31
   32fdc:	0a6d      	lsrs	r5, r5, #9
   32fde:	0e00      	lsrs	r0, r0, #24
   32fe0:	4698      	mov	r8, r3
   32fe2:	d043      	beq.n	3306c <__aeabi_fmul+0xc8>
   32fe4:	28ff      	cmp	r0, #255	; 0xff
   32fe6:	d03b      	beq.n	33060 <__aeabi_fmul+0xbc>
   32fe8:	00eb      	lsls	r3, r5, #3
   32fea:	2580      	movs	r5, #128	; 0x80
   32fec:	2200      	movs	r2, #0
   32fee:	04ed      	lsls	r5, r5, #19
   32ff0:	431d      	orrs	r5, r3
   32ff2:	387f      	subs	r0, #127	; 0x7f
   32ff4:	1836      	adds	r6, r6, r0
   32ff6:	1c73      	adds	r3, r6, #1
   32ff8:	4641      	mov	r1, r8
   32ffa:	469b      	mov	fp, r3
   32ffc:	464b      	mov	r3, r9
   32ffe:	4061      	eors	r1, r4
   33000:	4313      	orrs	r3, r2
   33002:	2b0f      	cmp	r3, #15
   33004:	d864      	bhi.n	330d0 <__aeabi_fmul+0x12c>
   33006:	4875      	ldr	r0, [pc, #468]	; (331dc <__aeabi_fmul+0x238>)
   33008:	009b      	lsls	r3, r3, #2
   3300a:	58c3      	ldr	r3, [r0, r3]
   3300c:	469f      	mov	pc, r3
   3300e:	2f00      	cmp	r7, #0
   33010:	d142      	bne.n	33098 <__aeabi_fmul+0xf4>
   33012:	2308      	movs	r3, #8
   33014:	4699      	mov	r9, r3
   33016:	3b06      	subs	r3, #6
   33018:	26ff      	movs	r6, #255	; 0xff
   3301a:	469a      	mov	sl, r3
   3301c:	e7da      	b.n	32fd4 <__aeabi_fmul+0x30>
   3301e:	4641      	mov	r1, r8
   33020:	2a02      	cmp	r2, #2
   33022:	d028      	beq.n	33076 <__aeabi_fmul+0xd2>
   33024:	2a03      	cmp	r2, #3
   33026:	d100      	bne.n	3302a <__aeabi_fmul+0x86>
   33028:	e0ce      	b.n	331c8 <__aeabi_fmul+0x224>
   3302a:	2a01      	cmp	r2, #1
   3302c:	d000      	beq.n	33030 <__aeabi_fmul+0x8c>
   3302e:	e0ac      	b.n	3318a <__aeabi_fmul+0x1e6>
   33030:	4011      	ands	r1, r2
   33032:	2000      	movs	r0, #0
   33034:	2200      	movs	r2, #0
   33036:	b2cc      	uxtb	r4, r1
   33038:	0240      	lsls	r0, r0, #9
   3303a:	05d2      	lsls	r2, r2, #23
   3303c:	0a40      	lsrs	r0, r0, #9
   3303e:	07e4      	lsls	r4, r4, #31
   33040:	4310      	orrs	r0, r2
   33042:	4320      	orrs	r0, r4
   33044:	bc3c      	pop	{r2, r3, r4, r5}
   33046:	4690      	mov	r8, r2
   33048:	4699      	mov	r9, r3
   3304a:	46a2      	mov	sl, r4
   3304c:	46ab      	mov	fp, r5
   3304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33050:	2f00      	cmp	r7, #0
   33052:	d115      	bne.n	33080 <__aeabi_fmul+0xdc>
   33054:	2304      	movs	r3, #4
   33056:	4699      	mov	r9, r3
   33058:	3b03      	subs	r3, #3
   3305a:	2600      	movs	r6, #0
   3305c:	469a      	mov	sl, r3
   3305e:	e7b9      	b.n	32fd4 <__aeabi_fmul+0x30>
   33060:	20ff      	movs	r0, #255	; 0xff
   33062:	2202      	movs	r2, #2
   33064:	2d00      	cmp	r5, #0
   33066:	d0c5      	beq.n	32ff4 <__aeabi_fmul+0x50>
   33068:	2203      	movs	r2, #3
   3306a:	e7c3      	b.n	32ff4 <__aeabi_fmul+0x50>
   3306c:	2d00      	cmp	r5, #0
   3306e:	d119      	bne.n	330a4 <__aeabi_fmul+0x100>
   33070:	2000      	movs	r0, #0
   33072:	2201      	movs	r2, #1
   33074:	e7be      	b.n	32ff4 <__aeabi_fmul+0x50>
   33076:	2401      	movs	r4, #1
   33078:	22ff      	movs	r2, #255	; 0xff
   3307a:	400c      	ands	r4, r1
   3307c:	2000      	movs	r0, #0
   3307e:	e7db      	b.n	33038 <__aeabi_fmul+0x94>
   33080:	0038      	movs	r0, r7
   33082:	f001 fd65 	bl	34b50 <__clzsi2>
   33086:	2676      	movs	r6, #118	; 0x76
   33088:	1f43      	subs	r3, r0, #5
   3308a:	409f      	lsls	r7, r3
   3308c:	2300      	movs	r3, #0
   3308e:	4276      	negs	r6, r6
   33090:	1a36      	subs	r6, r6, r0
   33092:	4699      	mov	r9, r3
   33094:	469a      	mov	sl, r3
   33096:	e79d      	b.n	32fd4 <__aeabi_fmul+0x30>
   33098:	230c      	movs	r3, #12
   3309a:	4699      	mov	r9, r3
   3309c:	3b09      	subs	r3, #9
   3309e:	26ff      	movs	r6, #255	; 0xff
   330a0:	469a      	mov	sl, r3
   330a2:	e797      	b.n	32fd4 <__aeabi_fmul+0x30>
   330a4:	0028      	movs	r0, r5
   330a6:	f001 fd53 	bl	34b50 <__clzsi2>
   330aa:	1f43      	subs	r3, r0, #5
   330ac:	409d      	lsls	r5, r3
   330ae:	2376      	movs	r3, #118	; 0x76
   330b0:	425b      	negs	r3, r3
   330b2:	1a18      	subs	r0, r3, r0
   330b4:	2200      	movs	r2, #0
   330b6:	e79d      	b.n	32ff4 <__aeabi_fmul+0x50>
   330b8:	2080      	movs	r0, #128	; 0x80
   330ba:	2400      	movs	r4, #0
   330bc:	03c0      	lsls	r0, r0, #15
   330be:	22ff      	movs	r2, #255	; 0xff
   330c0:	e7ba      	b.n	33038 <__aeabi_fmul+0x94>
   330c2:	003d      	movs	r5, r7
   330c4:	4652      	mov	r2, sl
   330c6:	e7ab      	b.n	33020 <__aeabi_fmul+0x7c>
   330c8:	003d      	movs	r5, r7
   330ca:	0021      	movs	r1, r4
   330cc:	4652      	mov	r2, sl
   330ce:	e7a7      	b.n	33020 <__aeabi_fmul+0x7c>
   330d0:	0c3b      	lsrs	r3, r7, #16
   330d2:	469c      	mov	ip, r3
   330d4:	042a      	lsls	r2, r5, #16
   330d6:	0c12      	lsrs	r2, r2, #16
   330d8:	0c2b      	lsrs	r3, r5, #16
   330da:	0014      	movs	r4, r2
   330dc:	4660      	mov	r0, ip
   330de:	4665      	mov	r5, ip
   330e0:	043f      	lsls	r7, r7, #16
   330e2:	0c3f      	lsrs	r7, r7, #16
   330e4:	437c      	muls	r4, r7
   330e6:	4342      	muls	r2, r0
   330e8:	435d      	muls	r5, r3
   330ea:	437b      	muls	r3, r7
   330ec:	0c27      	lsrs	r7, r4, #16
   330ee:	189b      	adds	r3, r3, r2
   330f0:	18ff      	adds	r7, r7, r3
   330f2:	42ba      	cmp	r2, r7
   330f4:	d903      	bls.n	330fe <__aeabi_fmul+0x15a>
   330f6:	2380      	movs	r3, #128	; 0x80
   330f8:	025b      	lsls	r3, r3, #9
   330fa:	469c      	mov	ip, r3
   330fc:	4465      	add	r5, ip
   330fe:	0424      	lsls	r4, r4, #16
   33100:	043a      	lsls	r2, r7, #16
   33102:	0c24      	lsrs	r4, r4, #16
   33104:	1912      	adds	r2, r2, r4
   33106:	0193      	lsls	r3, r2, #6
   33108:	1e5c      	subs	r4, r3, #1
   3310a:	41a3      	sbcs	r3, r4
   3310c:	0c3f      	lsrs	r7, r7, #16
   3310e:	0e92      	lsrs	r2, r2, #26
   33110:	197d      	adds	r5, r7, r5
   33112:	431a      	orrs	r2, r3
   33114:	01ad      	lsls	r5, r5, #6
   33116:	4315      	orrs	r5, r2
   33118:	012b      	lsls	r3, r5, #4
   3311a:	d504      	bpl.n	33126 <__aeabi_fmul+0x182>
   3311c:	2301      	movs	r3, #1
   3311e:	465e      	mov	r6, fp
   33120:	086a      	lsrs	r2, r5, #1
   33122:	401d      	ands	r5, r3
   33124:	4315      	orrs	r5, r2
   33126:	0032      	movs	r2, r6
   33128:	327f      	adds	r2, #127	; 0x7f
   3312a:	2a00      	cmp	r2, #0
   3312c:	dd25      	ble.n	3317a <__aeabi_fmul+0x1d6>
   3312e:	076b      	lsls	r3, r5, #29
   33130:	d004      	beq.n	3313c <__aeabi_fmul+0x198>
   33132:	230f      	movs	r3, #15
   33134:	402b      	ands	r3, r5
   33136:	2b04      	cmp	r3, #4
   33138:	d000      	beq.n	3313c <__aeabi_fmul+0x198>
   3313a:	3504      	adds	r5, #4
   3313c:	012b      	lsls	r3, r5, #4
   3313e:	d503      	bpl.n	33148 <__aeabi_fmul+0x1a4>
   33140:	0032      	movs	r2, r6
   33142:	4b27      	ldr	r3, [pc, #156]	; (331e0 <__aeabi_fmul+0x23c>)
   33144:	3280      	adds	r2, #128	; 0x80
   33146:	401d      	ands	r5, r3
   33148:	2afe      	cmp	r2, #254	; 0xfe
   3314a:	dc94      	bgt.n	33076 <__aeabi_fmul+0xd2>
   3314c:	2401      	movs	r4, #1
   3314e:	01a8      	lsls	r0, r5, #6
   33150:	0a40      	lsrs	r0, r0, #9
   33152:	b2d2      	uxtb	r2, r2
   33154:	400c      	ands	r4, r1
   33156:	e76f      	b.n	33038 <__aeabi_fmul+0x94>
   33158:	2080      	movs	r0, #128	; 0x80
   3315a:	03c0      	lsls	r0, r0, #15
   3315c:	4207      	tst	r7, r0
   3315e:	d007      	beq.n	33170 <__aeabi_fmul+0x1cc>
   33160:	4205      	tst	r5, r0
   33162:	d105      	bne.n	33170 <__aeabi_fmul+0x1cc>
   33164:	4328      	orrs	r0, r5
   33166:	0240      	lsls	r0, r0, #9
   33168:	0a40      	lsrs	r0, r0, #9
   3316a:	4644      	mov	r4, r8
   3316c:	22ff      	movs	r2, #255	; 0xff
   3316e:	e763      	b.n	33038 <__aeabi_fmul+0x94>
   33170:	4338      	orrs	r0, r7
   33172:	0240      	lsls	r0, r0, #9
   33174:	0a40      	lsrs	r0, r0, #9
   33176:	22ff      	movs	r2, #255	; 0xff
   33178:	e75e      	b.n	33038 <__aeabi_fmul+0x94>
   3317a:	2401      	movs	r4, #1
   3317c:	1aa3      	subs	r3, r4, r2
   3317e:	2b1b      	cmp	r3, #27
   33180:	dd05      	ble.n	3318e <__aeabi_fmul+0x1ea>
   33182:	400c      	ands	r4, r1
   33184:	2200      	movs	r2, #0
   33186:	2000      	movs	r0, #0
   33188:	e756      	b.n	33038 <__aeabi_fmul+0x94>
   3318a:	465e      	mov	r6, fp
   3318c:	e7cb      	b.n	33126 <__aeabi_fmul+0x182>
   3318e:	002a      	movs	r2, r5
   33190:	2020      	movs	r0, #32
   33192:	40da      	lsrs	r2, r3
   33194:	1ac3      	subs	r3, r0, r3
   33196:	409d      	lsls	r5, r3
   33198:	002b      	movs	r3, r5
   3319a:	1e5d      	subs	r5, r3, #1
   3319c:	41ab      	sbcs	r3, r5
   3319e:	4313      	orrs	r3, r2
   331a0:	075a      	lsls	r2, r3, #29
   331a2:	d004      	beq.n	331ae <__aeabi_fmul+0x20a>
   331a4:	220f      	movs	r2, #15
   331a6:	401a      	ands	r2, r3
   331a8:	2a04      	cmp	r2, #4
   331aa:	d000      	beq.n	331ae <__aeabi_fmul+0x20a>
   331ac:	3304      	adds	r3, #4
   331ae:	015a      	lsls	r2, r3, #5
   331b0:	d504      	bpl.n	331bc <__aeabi_fmul+0x218>
   331b2:	2401      	movs	r4, #1
   331b4:	2201      	movs	r2, #1
   331b6:	400c      	ands	r4, r1
   331b8:	2000      	movs	r0, #0
   331ba:	e73d      	b.n	33038 <__aeabi_fmul+0x94>
   331bc:	2401      	movs	r4, #1
   331be:	019b      	lsls	r3, r3, #6
   331c0:	0a58      	lsrs	r0, r3, #9
   331c2:	400c      	ands	r4, r1
   331c4:	2200      	movs	r2, #0
   331c6:	e737      	b.n	33038 <__aeabi_fmul+0x94>
   331c8:	2080      	movs	r0, #128	; 0x80
   331ca:	2401      	movs	r4, #1
   331cc:	03c0      	lsls	r0, r0, #15
   331ce:	4328      	orrs	r0, r5
   331d0:	0240      	lsls	r0, r0, #9
   331d2:	0a40      	lsrs	r0, r0, #9
   331d4:	400c      	ands	r4, r1
   331d6:	22ff      	movs	r2, #255	; 0xff
   331d8:	e72e      	b.n	33038 <__aeabi_fmul+0x94>
   331da:	46c0      	nop			; (mov r8, r8)
   331dc:	0003a248 	.word	0x0003a248
   331e0:	f7ffffff 	.word	0xf7ffffff

000331e4 <__aeabi_f2iz>:
   331e4:	0241      	lsls	r1, r0, #9
   331e6:	0043      	lsls	r3, r0, #1
   331e8:	0fc2      	lsrs	r2, r0, #31
   331ea:	0a49      	lsrs	r1, r1, #9
   331ec:	0e1b      	lsrs	r3, r3, #24
   331ee:	2000      	movs	r0, #0
   331f0:	2b7e      	cmp	r3, #126	; 0x7e
   331f2:	dd0d      	ble.n	33210 <__aeabi_f2iz+0x2c>
   331f4:	2b9d      	cmp	r3, #157	; 0x9d
   331f6:	dc0c      	bgt.n	33212 <__aeabi_f2iz+0x2e>
   331f8:	2080      	movs	r0, #128	; 0x80
   331fa:	0400      	lsls	r0, r0, #16
   331fc:	4301      	orrs	r1, r0
   331fe:	2b95      	cmp	r3, #149	; 0x95
   33200:	dc0a      	bgt.n	33218 <__aeabi_f2iz+0x34>
   33202:	2096      	movs	r0, #150	; 0x96
   33204:	1ac3      	subs	r3, r0, r3
   33206:	40d9      	lsrs	r1, r3
   33208:	4248      	negs	r0, r1
   3320a:	2a00      	cmp	r2, #0
   3320c:	d100      	bne.n	33210 <__aeabi_f2iz+0x2c>
   3320e:	0008      	movs	r0, r1
   33210:	4770      	bx	lr
   33212:	4b03      	ldr	r3, [pc, #12]	; (33220 <__aeabi_f2iz+0x3c>)
   33214:	18d0      	adds	r0, r2, r3
   33216:	e7fb      	b.n	33210 <__aeabi_f2iz+0x2c>
   33218:	3b96      	subs	r3, #150	; 0x96
   3321a:	4099      	lsls	r1, r3
   3321c:	e7f4      	b.n	33208 <__aeabi_f2iz+0x24>
   3321e:	46c0      	nop			; (mov r8, r8)
   33220:	7fffffff 	.word	0x7fffffff

00033224 <__aeabi_i2f>:
   33224:	b570      	push	{r4, r5, r6, lr}
   33226:	2800      	cmp	r0, #0
   33228:	d030      	beq.n	3328c <__aeabi_i2f+0x68>
   3322a:	17c3      	asrs	r3, r0, #31
   3322c:	18c4      	adds	r4, r0, r3
   3322e:	405c      	eors	r4, r3
   33230:	0fc5      	lsrs	r5, r0, #31
   33232:	0020      	movs	r0, r4
   33234:	f001 fc8c 	bl	34b50 <__clzsi2>
   33238:	239e      	movs	r3, #158	; 0x9e
   3323a:	1a1b      	subs	r3, r3, r0
   3323c:	2b96      	cmp	r3, #150	; 0x96
   3323e:	dc0d      	bgt.n	3325c <__aeabi_i2f+0x38>
   33240:	2296      	movs	r2, #150	; 0x96
   33242:	1ad2      	subs	r2, r2, r3
   33244:	4094      	lsls	r4, r2
   33246:	002a      	movs	r2, r5
   33248:	0264      	lsls	r4, r4, #9
   3324a:	0a64      	lsrs	r4, r4, #9
   3324c:	b2db      	uxtb	r3, r3
   3324e:	0264      	lsls	r4, r4, #9
   33250:	05db      	lsls	r3, r3, #23
   33252:	0a60      	lsrs	r0, r4, #9
   33254:	07d2      	lsls	r2, r2, #31
   33256:	4318      	orrs	r0, r3
   33258:	4310      	orrs	r0, r2
   3325a:	bd70      	pop	{r4, r5, r6, pc}
   3325c:	2b99      	cmp	r3, #153	; 0x99
   3325e:	dc19      	bgt.n	33294 <__aeabi_i2f+0x70>
   33260:	2299      	movs	r2, #153	; 0x99
   33262:	1ad2      	subs	r2, r2, r3
   33264:	2a00      	cmp	r2, #0
   33266:	dd29      	ble.n	332bc <__aeabi_i2f+0x98>
   33268:	4094      	lsls	r4, r2
   3326a:	0022      	movs	r2, r4
   3326c:	4c14      	ldr	r4, [pc, #80]	; (332c0 <__aeabi_i2f+0x9c>)
   3326e:	4014      	ands	r4, r2
   33270:	0751      	lsls	r1, r2, #29
   33272:	d004      	beq.n	3327e <__aeabi_i2f+0x5a>
   33274:	210f      	movs	r1, #15
   33276:	400a      	ands	r2, r1
   33278:	2a04      	cmp	r2, #4
   3327a:	d000      	beq.n	3327e <__aeabi_i2f+0x5a>
   3327c:	3404      	adds	r4, #4
   3327e:	0162      	lsls	r2, r4, #5
   33280:	d413      	bmi.n	332aa <__aeabi_i2f+0x86>
   33282:	01a4      	lsls	r4, r4, #6
   33284:	0a64      	lsrs	r4, r4, #9
   33286:	b2db      	uxtb	r3, r3
   33288:	002a      	movs	r2, r5
   3328a:	e7e0      	b.n	3324e <__aeabi_i2f+0x2a>
   3328c:	2200      	movs	r2, #0
   3328e:	2300      	movs	r3, #0
   33290:	2400      	movs	r4, #0
   33292:	e7dc      	b.n	3324e <__aeabi_i2f+0x2a>
   33294:	2205      	movs	r2, #5
   33296:	0021      	movs	r1, r4
   33298:	1a12      	subs	r2, r2, r0
   3329a:	40d1      	lsrs	r1, r2
   3329c:	22b9      	movs	r2, #185	; 0xb9
   3329e:	1ad2      	subs	r2, r2, r3
   332a0:	4094      	lsls	r4, r2
   332a2:	1e62      	subs	r2, r4, #1
   332a4:	4194      	sbcs	r4, r2
   332a6:	430c      	orrs	r4, r1
   332a8:	e7da      	b.n	33260 <__aeabi_i2f+0x3c>
   332aa:	4b05      	ldr	r3, [pc, #20]	; (332c0 <__aeabi_i2f+0x9c>)
   332ac:	002a      	movs	r2, r5
   332ae:	401c      	ands	r4, r3
   332b0:	239f      	movs	r3, #159	; 0x9f
   332b2:	01a4      	lsls	r4, r4, #6
   332b4:	1a1b      	subs	r3, r3, r0
   332b6:	0a64      	lsrs	r4, r4, #9
   332b8:	b2db      	uxtb	r3, r3
   332ba:	e7c8      	b.n	3324e <__aeabi_i2f+0x2a>
   332bc:	0022      	movs	r2, r4
   332be:	e7d5      	b.n	3326c <__aeabi_i2f+0x48>
   332c0:	fbffffff 	.word	0xfbffffff

000332c4 <__aeabi_dadd>:
   332c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   332c6:	4645      	mov	r5, r8
   332c8:	46de      	mov	lr, fp
   332ca:	4657      	mov	r7, sl
   332cc:	464e      	mov	r6, r9
   332ce:	030c      	lsls	r4, r1, #12
   332d0:	b5e0      	push	{r5, r6, r7, lr}
   332d2:	004e      	lsls	r6, r1, #1
   332d4:	0fc9      	lsrs	r1, r1, #31
   332d6:	4688      	mov	r8, r1
   332d8:	000d      	movs	r5, r1
   332da:	0a61      	lsrs	r1, r4, #9
   332dc:	0f44      	lsrs	r4, r0, #29
   332de:	430c      	orrs	r4, r1
   332e0:	00c7      	lsls	r7, r0, #3
   332e2:	0319      	lsls	r1, r3, #12
   332e4:	0058      	lsls	r0, r3, #1
   332e6:	0fdb      	lsrs	r3, r3, #31
   332e8:	469b      	mov	fp, r3
   332ea:	0a4b      	lsrs	r3, r1, #9
   332ec:	0f51      	lsrs	r1, r2, #29
   332ee:	430b      	orrs	r3, r1
   332f0:	0d76      	lsrs	r6, r6, #21
   332f2:	0d40      	lsrs	r0, r0, #21
   332f4:	0019      	movs	r1, r3
   332f6:	00d2      	lsls	r2, r2, #3
   332f8:	45d8      	cmp	r8, fp
   332fa:	d100      	bne.n	332fe <__aeabi_dadd+0x3a>
   332fc:	e0ae      	b.n	3345c <__aeabi_dadd+0x198>
   332fe:	1a35      	subs	r5, r6, r0
   33300:	2d00      	cmp	r5, #0
   33302:	dc00      	bgt.n	33306 <__aeabi_dadd+0x42>
   33304:	e0f6      	b.n	334f4 <__aeabi_dadd+0x230>
   33306:	2800      	cmp	r0, #0
   33308:	d10f      	bne.n	3332a <__aeabi_dadd+0x66>
   3330a:	4313      	orrs	r3, r2
   3330c:	d100      	bne.n	33310 <__aeabi_dadd+0x4c>
   3330e:	e0db      	b.n	334c8 <__aeabi_dadd+0x204>
   33310:	1e6b      	subs	r3, r5, #1
   33312:	2b00      	cmp	r3, #0
   33314:	d000      	beq.n	33318 <__aeabi_dadd+0x54>
   33316:	e137      	b.n	33588 <__aeabi_dadd+0x2c4>
   33318:	1aba      	subs	r2, r7, r2
   3331a:	4297      	cmp	r7, r2
   3331c:	41bf      	sbcs	r7, r7
   3331e:	1a64      	subs	r4, r4, r1
   33320:	427f      	negs	r7, r7
   33322:	1be4      	subs	r4, r4, r7
   33324:	2601      	movs	r6, #1
   33326:	0017      	movs	r7, r2
   33328:	e024      	b.n	33374 <__aeabi_dadd+0xb0>
   3332a:	4bc6      	ldr	r3, [pc, #792]	; (33644 <__aeabi_dadd+0x380>)
   3332c:	429e      	cmp	r6, r3
   3332e:	d04d      	beq.n	333cc <__aeabi_dadd+0x108>
   33330:	2380      	movs	r3, #128	; 0x80
   33332:	041b      	lsls	r3, r3, #16
   33334:	4319      	orrs	r1, r3
   33336:	2d38      	cmp	r5, #56	; 0x38
   33338:	dd00      	ble.n	3333c <__aeabi_dadd+0x78>
   3333a:	e107      	b.n	3354c <__aeabi_dadd+0x288>
   3333c:	2d1f      	cmp	r5, #31
   3333e:	dd00      	ble.n	33342 <__aeabi_dadd+0x7e>
   33340:	e138      	b.n	335b4 <__aeabi_dadd+0x2f0>
   33342:	2020      	movs	r0, #32
   33344:	1b43      	subs	r3, r0, r5
   33346:	469a      	mov	sl, r3
   33348:	000b      	movs	r3, r1
   3334a:	4650      	mov	r0, sl
   3334c:	4083      	lsls	r3, r0
   3334e:	4699      	mov	r9, r3
   33350:	0013      	movs	r3, r2
   33352:	4648      	mov	r0, r9
   33354:	40eb      	lsrs	r3, r5
   33356:	4318      	orrs	r0, r3
   33358:	0003      	movs	r3, r0
   3335a:	4650      	mov	r0, sl
   3335c:	4082      	lsls	r2, r0
   3335e:	1e50      	subs	r0, r2, #1
   33360:	4182      	sbcs	r2, r0
   33362:	40e9      	lsrs	r1, r5
   33364:	431a      	orrs	r2, r3
   33366:	1aba      	subs	r2, r7, r2
   33368:	1a61      	subs	r1, r4, r1
   3336a:	4297      	cmp	r7, r2
   3336c:	41a4      	sbcs	r4, r4
   3336e:	0017      	movs	r7, r2
   33370:	4264      	negs	r4, r4
   33372:	1b0c      	subs	r4, r1, r4
   33374:	0223      	lsls	r3, r4, #8
   33376:	d562      	bpl.n	3343e <__aeabi_dadd+0x17a>
   33378:	0264      	lsls	r4, r4, #9
   3337a:	0a65      	lsrs	r5, r4, #9
   3337c:	2d00      	cmp	r5, #0
   3337e:	d100      	bne.n	33382 <__aeabi_dadd+0xbe>
   33380:	e0df      	b.n	33542 <__aeabi_dadd+0x27e>
   33382:	0028      	movs	r0, r5
   33384:	f001 fbe4 	bl	34b50 <__clzsi2>
   33388:	0003      	movs	r3, r0
   3338a:	3b08      	subs	r3, #8
   3338c:	2b1f      	cmp	r3, #31
   3338e:	dd00      	ble.n	33392 <__aeabi_dadd+0xce>
   33390:	e0d2      	b.n	33538 <__aeabi_dadd+0x274>
   33392:	2220      	movs	r2, #32
   33394:	003c      	movs	r4, r7
   33396:	1ad2      	subs	r2, r2, r3
   33398:	409d      	lsls	r5, r3
   3339a:	40d4      	lsrs	r4, r2
   3339c:	409f      	lsls	r7, r3
   3339e:	4325      	orrs	r5, r4
   333a0:	429e      	cmp	r6, r3
   333a2:	dd00      	ble.n	333a6 <__aeabi_dadd+0xe2>
   333a4:	e0c4      	b.n	33530 <__aeabi_dadd+0x26c>
   333a6:	1b9e      	subs	r6, r3, r6
   333a8:	1c73      	adds	r3, r6, #1
   333aa:	2b1f      	cmp	r3, #31
   333ac:	dd00      	ble.n	333b0 <__aeabi_dadd+0xec>
   333ae:	e0f1      	b.n	33594 <__aeabi_dadd+0x2d0>
   333b0:	2220      	movs	r2, #32
   333b2:	0038      	movs	r0, r7
   333b4:	0029      	movs	r1, r5
   333b6:	1ad2      	subs	r2, r2, r3
   333b8:	40d8      	lsrs	r0, r3
   333ba:	4091      	lsls	r1, r2
   333bc:	4097      	lsls	r7, r2
   333be:	002c      	movs	r4, r5
   333c0:	4301      	orrs	r1, r0
   333c2:	1e78      	subs	r0, r7, #1
   333c4:	4187      	sbcs	r7, r0
   333c6:	40dc      	lsrs	r4, r3
   333c8:	2600      	movs	r6, #0
   333ca:	430f      	orrs	r7, r1
   333cc:	077b      	lsls	r3, r7, #29
   333ce:	d009      	beq.n	333e4 <__aeabi_dadd+0x120>
   333d0:	230f      	movs	r3, #15
   333d2:	403b      	ands	r3, r7
   333d4:	2b04      	cmp	r3, #4
   333d6:	d005      	beq.n	333e4 <__aeabi_dadd+0x120>
   333d8:	1d3b      	adds	r3, r7, #4
   333da:	42bb      	cmp	r3, r7
   333dc:	41bf      	sbcs	r7, r7
   333de:	427f      	negs	r7, r7
   333e0:	19e4      	adds	r4, r4, r7
   333e2:	001f      	movs	r7, r3
   333e4:	0223      	lsls	r3, r4, #8
   333e6:	d52c      	bpl.n	33442 <__aeabi_dadd+0x17e>
   333e8:	4b96      	ldr	r3, [pc, #600]	; (33644 <__aeabi_dadd+0x380>)
   333ea:	3601      	adds	r6, #1
   333ec:	429e      	cmp	r6, r3
   333ee:	d100      	bne.n	333f2 <__aeabi_dadd+0x12e>
   333f0:	e09a      	b.n	33528 <__aeabi_dadd+0x264>
   333f2:	4645      	mov	r5, r8
   333f4:	4b94      	ldr	r3, [pc, #592]	; (33648 <__aeabi_dadd+0x384>)
   333f6:	08ff      	lsrs	r7, r7, #3
   333f8:	401c      	ands	r4, r3
   333fa:	0760      	lsls	r0, r4, #29
   333fc:	0576      	lsls	r6, r6, #21
   333fe:	0264      	lsls	r4, r4, #9
   33400:	4307      	orrs	r7, r0
   33402:	0b24      	lsrs	r4, r4, #12
   33404:	0d76      	lsrs	r6, r6, #21
   33406:	2100      	movs	r1, #0
   33408:	0324      	lsls	r4, r4, #12
   3340a:	0b23      	lsrs	r3, r4, #12
   3340c:	0d0c      	lsrs	r4, r1, #20
   3340e:	4a8f      	ldr	r2, [pc, #572]	; (3364c <__aeabi_dadd+0x388>)
   33410:	0524      	lsls	r4, r4, #20
   33412:	431c      	orrs	r4, r3
   33414:	4014      	ands	r4, r2
   33416:	0533      	lsls	r3, r6, #20
   33418:	4323      	orrs	r3, r4
   3341a:	005b      	lsls	r3, r3, #1
   3341c:	07ed      	lsls	r5, r5, #31
   3341e:	085b      	lsrs	r3, r3, #1
   33420:	432b      	orrs	r3, r5
   33422:	0038      	movs	r0, r7
   33424:	0019      	movs	r1, r3
   33426:	bc3c      	pop	{r2, r3, r4, r5}
   33428:	4690      	mov	r8, r2
   3342a:	4699      	mov	r9, r3
   3342c:	46a2      	mov	sl, r4
   3342e:	46ab      	mov	fp, r5
   33430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33432:	4664      	mov	r4, ip
   33434:	4304      	orrs	r4, r0
   33436:	d100      	bne.n	3343a <__aeabi_dadd+0x176>
   33438:	e211      	b.n	3385e <__aeabi_dadd+0x59a>
   3343a:	0004      	movs	r4, r0
   3343c:	4667      	mov	r7, ip
   3343e:	077b      	lsls	r3, r7, #29
   33440:	d1c6      	bne.n	333d0 <__aeabi_dadd+0x10c>
   33442:	4645      	mov	r5, r8
   33444:	0760      	lsls	r0, r4, #29
   33446:	08ff      	lsrs	r7, r7, #3
   33448:	4307      	orrs	r7, r0
   3344a:	08e4      	lsrs	r4, r4, #3
   3344c:	4b7d      	ldr	r3, [pc, #500]	; (33644 <__aeabi_dadd+0x380>)
   3344e:	429e      	cmp	r6, r3
   33450:	d030      	beq.n	334b4 <__aeabi_dadd+0x1f0>
   33452:	0324      	lsls	r4, r4, #12
   33454:	0576      	lsls	r6, r6, #21
   33456:	0b24      	lsrs	r4, r4, #12
   33458:	0d76      	lsrs	r6, r6, #21
   3345a:	e7d4      	b.n	33406 <__aeabi_dadd+0x142>
   3345c:	1a33      	subs	r3, r6, r0
   3345e:	469a      	mov	sl, r3
   33460:	2b00      	cmp	r3, #0
   33462:	dd78      	ble.n	33556 <__aeabi_dadd+0x292>
   33464:	2800      	cmp	r0, #0
   33466:	d031      	beq.n	334cc <__aeabi_dadd+0x208>
   33468:	4876      	ldr	r0, [pc, #472]	; (33644 <__aeabi_dadd+0x380>)
   3346a:	4286      	cmp	r6, r0
   3346c:	d0ae      	beq.n	333cc <__aeabi_dadd+0x108>
   3346e:	2080      	movs	r0, #128	; 0x80
   33470:	0400      	lsls	r0, r0, #16
   33472:	4301      	orrs	r1, r0
   33474:	4653      	mov	r3, sl
   33476:	2b38      	cmp	r3, #56	; 0x38
   33478:	dc00      	bgt.n	3347c <__aeabi_dadd+0x1b8>
   3347a:	e0e9      	b.n	33650 <__aeabi_dadd+0x38c>
   3347c:	430a      	orrs	r2, r1
   3347e:	1e51      	subs	r1, r2, #1
   33480:	418a      	sbcs	r2, r1
   33482:	2100      	movs	r1, #0
   33484:	19d2      	adds	r2, r2, r7
   33486:	42ba      	cmp	r2, r7
   33488:	41bf      	sbcs	r7, r7
   3348a:	1909      	adds	r1, r1, r4
   3348c:	427c      	negs	r4, r7
   3348e:	0017      	movs	r7, r2
   33490:	190c      	adds	r4, r1, r4
   33492:	0223      	lsls	r3, r4, #8
   33494:	d5d3      	bpl.n	3343e <__aeabi_dadd+0x17a>
   33496:	4b6b      	ldr	r3, [pc, #428]	; (33644 <__aeabi_dadd+0x380>)
   33498:	3601      	adds	r6, #1
   3349a:	429e      	cmp	r6, r3
   3349c:	d100      	bne.n	334a0 <__aeabi_dadd+0x1dc>
   3349e:	e13a      	b.n	33716 <__aeabi_dadd+0x452>
   334a0:	2001      	movs	r0, #1
   334a2:	4b69      	ldr	r3, [pc, #420]	; (33648 <__aeabi_dadd+0x384>)
   334a4:	401c      	ands	r4, r3
   334a6:	087b      	lsrs	r3, r7, #1
   334a8:	4007      	ands	r7, r0
   334aa:	431f      	orrs	r7, r3
   334ac:	07e0      	lsls	r0, r4, #31
   334ae:	4307      	orrs	r7, r0
   334b0:	0864      	lsrs	r4, r4, #1
   334b2:	e78b      	b.n	333cc <__aeabi_dadd+0x108>
   334b4:	0023      	movs	r3, r4
   334b6:	433b      	orrs	r3, r7
   334b8:	d100      	bne.n	334bc <__aeabi_dadd+0x1f8>
   334ba:	e1cb      	b.n	33854 <__aeabi_dadd+0x590>
   334bc:	2280      	movs	r2, #128	; 0x80
   334be:	0312      	lsls	r2, r2, #12
   334c0:	4314      	orrs	r4, r2
   334c2:	0324      	lsls	r4, r4, #12
   334c4:	0b24      	lsrs	r4, r4, #12
   334c6:	e79e      	b.n	33406 <__aeabi_dadd+0x142>
   334c8:	002e      	movs	r6, r5
   334ca:	e77f      	b.n	333cc <__aeabi_dadd+0x108>
   334cc:	0008      	movs	r0, r1
   334ce:	4310      	orrs	r0, r2
   334d0:	d100      	bne.n	334d4 <__aeabi_dadd+0x210>
   334d2:	e0b4      	b.n	3363e <__aeabi_dadd+0x37a>
   334d4:	1e58      	subs	r0, r3, #1
   334d6:	2800      	cmp	r0, #0
   334d8:	d000      	beq.n	334dc <__aeabi_dadd+0x218>
   334da:	e0de      	b.n	3369a <__aeabi_dadd+0x3d6>
   334dc:	18ba      	adds	r2, r7, r2
   334de:	42ba      	cmp	r2, r7
   334e0:	419b      	sbcs	r3, r3
   334e2:	1864      	adds	r4, r4, r1
   334e4:	425b      	negs	r3, r3
   334e6:	18e4      	adds	r4, r4, r3
   334e8:	0017      	movs	r7, r2
   334ea:	2601      	movs	r6, #1
   334ec:	0223      	lsls	r3, r4, #8
   334ee:	d5a6      	bpl.n	3343e <__aeabi_dadd+0x17a>
   334f0:	2602      	movs	r6, #2
   334f2:	e7d5      	b.n	334a0 <__aeabi_dadd+0x1dc>
   334f4:	2d00      	cmp	r5, #0
   334f6:	d16e      	bne.n	335d6 <__aeabi_dadd+0x312>
   334f8:	1c70      	adds	r0, r6, #1
   334fa:	0540      	lsls	r0, r0, #21
   334fc:	0d40      	lsrs	r0, r0, #21
   334fe:	2801      	cmp	r0, #1
   33500:	dc00      	bgt.n	33504 <__aeabi_dadd+0x240>
   33502:	e0f9      	b.n	336f8 <__aeabi_dadd+0x434>
   33504:	1ab8      	subs	r0, r7, r2
   33506:	4684      	mov	ip, r0
   33508:	4287      	cmp	r7, r0
   3350a:	4180      	sbcs	r0, r0
   3350c:	1ae5      	subs	r5, r4, r3
   3350e:	4240      	negs	r0, r0
   33510:	1a2d      	subs	r5, r5, r0
   33512:	0228      	lsls	r0, r5, #8
   33514:	d400      	bmi.n	33518 <__aeabi_dadd+0x254>
   33516:	e089      	b.n	3362c <__aeabi_dadd+0x368>
   33518:	1bd7      	subs	r7, r2, r7
   3351a:	42ba      	cmp	r2, r7
   3351c:	4192      	sbcs	r2, r2
   3351e:	1b1c      	subs	r4, r3, r4
   33520:	4252      	negs	r2, r2
   33522:	1aa5      	subs	r5, r4, r2
   33524:	46d8      	mov	r8, fp
   33526:	e729      	b.n	3337c <__aeabi_dadd+0xb8>
   33528:	4645      	mov	r5, r8
   3352a:	2400      	movs	r4, #0
   3352c:	2700      	movs	r7, #0
   3352e:	e76a      	b.n	33406 <__aeabi_dadd+0x142>
   33530:	4c45      	ldr	r4, [pc, #276]	; (33648 <__aeabi_dadd+0x384>)
   33532:	1af6      	subs	r6, r6, r3
   33534:	402c      	ands	r4, r5
   33536:	e749      	b.n	333cc <__aeabi_dadd+0x108>
   33538:	003d      	movs	r5, r7
   3353a:	3828      	subs	r0, #40	; 0x28
   3353c:	4085      	lsls	r5, r0
   3353e:	2700      	movs	r7, #0
   33540:	e72e      	b.n	333a0 <__aeabi_dadd+0xdc>
   33542:	0038      	movs	r0, r7
   33544:	f001 fb04 	bl	34b50 <__clzsi2>
   33548:	3020      	adds	r0, #32
   3354a:	e71d      	b.n	33388 <__aeabi_dadd+0xc4>
   3354c:	430a      	orrs	r2, r1
   3354e:	1e51      	subs	r1, r2, #1
   33550:	418a      	sbcs	r2, r1
   33552:	2100      	movs	r1, #0
   33554:	e707      	b.n	33366 <__aeabi_dadd+0xa2>
   33556:	2b00      	cmp	r3, #0
   33558:	d000      	beq.n	3355c <__aeabi_dadd+0x298>
   3355a:	e0f3      	b.n	33744 <__aeabi_dadd+0x480>
   3355c:	1c70      	adds	r0, r6, #1
   3355e:	0543      	lsls	r3, r0, #21
   33560:	0d5b      	lsrs	r3, r3, #21
   33562:	2b01      	cmp	r3, #1
   33564:	dc00      	bgt.n	33568 <__aeabi_dadd+0x2a4>
   33566:	e0ad      	b.n	336c4 <__aeabi_dadd+0x400>
   33568:	4b36      	ldr	r3, [pc, #216]	; (33644 <__aeabi_dadd+0x380>)
   3356a:	4298      	cmp	r0, r3
   3356c:	d100      	bne.n	33570 <__aeabi_dadd+0x2ac>
   3356e:	e0d1      	b.n	33714 <__aeabi_dadd+0x450>
   33570:	18ba      	adds	r2, r7, r2
   33572:	42ba      	cmp	r2, r7
   33574:	41bf      	sbcs	r7, r7
   33576:	1864      	adds	r4, r4, r1
   33578:	427f      	negs	r7, r7
   3357a:	19e4      	adds	r4, r4, r7
   3357c:	07e7      	lsls	r7, r4, #31
   3357e:	0852      	lsrs	r2, r2, #1
   33580:	4317      	orrs	r7, r2
   33582:	0864      	lsrs	r4, r4, #1
   33584:	0006      	movs	r6, r0
   33586:	e721      	b.n	333cc <__aeabi_dadd+0x108>
   33588:	482e      	ldr	r0, [pc, #184]	; (33644 <__aeabi_dadd+0x380>)
   3358a:	4285      	cmp	r5, r0
   3358c:	d100      	bne.n	33590 <__aeabi_dadd+0x2cc>
   3358e:	e093      	b.n	336b8 <__aeabi_dadd+0x3f4>
   33590:	001d      	movs	r5, r3
   33592:	e6d0      	b.n	33336 <__aeabi_dadd+0x72>
   33594:	0029      	movs	r1, r5
   33596:	3e1f      	subs	r6, #31
   33598:	40f1      	lsrs	r1, r6
   3359a:	2b20      	cmp	r3, #32
   3359c:	d100      	bne.n	335a0 <__aeabi_dadd+0x2dc>
   3359e:	e08d      	b.n	336bc <__aeabi_dadd+0x3f8>
   335a0:	2240      	movs	r2, #64	; 0x40
   335a2:	1ad3      	subs	r3, r2, r3
   335a4:	409d      	lsls	r5, r3
   335a6:	432f      	orrs	r7, r5
   335a8:	1e7d      	subs	r5, r7, #1
   335aa:	41af      	sbcs	r7, r5
   335ac:	2400      	movs	r4, #0
   335ae:	430f      	orrs	r7, r1
   335b0:	2600      	movs	r6, #0
   335b2:	e744      	b.n	3343e <__aeabi_dadd+0x17a>
   335b4:	002b      	movs	r3, r5
   335b6:	0008      	movs	r0, r1
   335b8:	3b20      	subs	r3, #32
   335ba:	40d8      	lsrs	r0, r3
   335bc:	0003      	movs	r3, r0
   335be:	2d20      	cmp	r5, #32
   335c0:	d100      	bne.n	335c4 <__aeabi_dadd+0x300>
   335c2:	e07d      	b.n	336c0 <__aeabi_dadd+0x3fc>
   335c4:	2040      	movs	r0, #64	; 0x40
   335c6:	1b45      	subs	r5, r0, r5
   335c8:	40a9      	lsls	r1, r5
   335ca:	430a      	orrs	r2, r1
   335cc:	1e51      	subs	r1, r2, #1
   335ce:	418a      	sbcs	r2, r1
   335d0:	2100      	movs	r1, #0
   335d2:	431a      	orrs	r2, r3
   335d4:	e6c7      	b.n	33366 <__aeabi_dadd+0xa2>
   335d6:	2e00      	cmp	r6, #0
   335d8:	d050      	beq.n	3367c <__aeabi_dadd+0x3b8>
   335da:	4e1a      	ldr	r6, [pc, #104]	; (33644 <__aeabi_dadd+0x380>)
   335dc:	42b0      	cmp	r0, r6
   335de:	d057      	beq.n	33690 <__aeabi_dadd+0x3cc>
   335e0:	2680      	movs	r6, #128	; 0x80
   335e2:	426b      	negs	r3, r5
   335e4:	4699      	mov	r9, r3
   335e6:	0436      	lsls	r6, r6, #16
   335e8:	4334      	orrs	r4, r6
   335ea:	464b      	mov	r3, r9
   335ec:	2b38      	cmp	r3, #56	; 0x38
   335ee:	dd00      	ble.n	335f2 <__aeabi_dadd+0x32e>
   335f0:	e0d6      	b.n	337a0 <__aeabi_dadd+0x4dc>
   335f2:	2b1f      	cmp	r3, #31
   335f4:	dd00      	ble.n	335f8 <__aeabi_dadd+0x334>
   335f6:	e135      	b.n	33864 <__aeabi_dadd+0x5a0>
   335f8:	2620      	movs	r6, #32
   335fa:	1af5      	subs	r5, r6, r3
   335fc:	0026      	movs	r6, r4
   335fe:	40ae      	lsls	r6, r5
   33600:	46b2      	mov	sl, r6
   33602:	003e      	movs	r6, r7
   33604:	40de      	lsrs	r6, r3
   33606:	46ac      	mov	ip, r5
   33608:	0035      	movs	r5, r6
   3360a:	4656      	mov	r6, sl
   3360c:	432e      	orrs	r6, r5
   3360e:	4665      	mov	r5, ip
   33610:	40af      	lsls	r7, r5
   33612:	1e7d      	subs	r5, r7, #1
   33614:	41af      	sbcs	r7, r5
   33616:	40dc      	lsrs	r4, r3
   33618:	4337      	orrs	r7, r6
   3361a:	1bd7      	subs	r7, r2, r7
   3361c:	42ba      	cmp	r2, r7
   3361e:	4192      	sbcs	r2, r2
   33620:	1b0c      	subs	r4, r1, r4
   33622:	4252      	negs	r2, r2
   33624:	1aa4      	subs	r4, r4, r2
   33626:	0006      	movs	r6, r0
   33628:	46d8      	mov	r8, fp
   3362a:	e6a3      	b.n	33374 <__aeabi_dadd+0xb0>
   3362c:	4664      	mov	r4, ip
   3362e:	4667      	mov	r7, ip
   33630:	432c      	orrs	r4, r5
   33632:	d000      	beq.n	33636 <__aeabi_dadd+0x372>
   33634:	e6a2      	b.n	3337c <__aeabi_dadd+0xb8>
   33636:	2500      	movs	r5, #0
   33638:	2600      	movs	r6, #0
   3363a:	2700      	movs	r7, #0
   3363c:	e706      	b.n	3344c <__aeabi_dadd+0x188>
   3363e:	001e      	movs	r6, r3
   33640:	e6c4      	b.n	333cc <__aeabi_dadd+0x108>
   33642:	46c0      	nop			; (mov r8, r8)
   33644:	000007ff 	.word	0x000007ff
   33648:	ff7fffff 	.word	0xff7fffff
   3364c:	800fffff 	.word	0x800fffff
   33650:	2b1f      	cmp	r3, #31
   33652:	dc63      	bgt.n	3371c <__aeabi_dadd+0x458>
   33654:	2020      	movs	r0, #32
   33656:	1ac3      	subs	r3, r0, r3
   33658:	0008      	movs	r0, r1
   3365a:	4098      	lsls	r0, r3
   3365c:	469c      	mov	ip, r3
   3365e:	4683      	mov	fp, r0
   33660:	4653      	mov	r3, sl
   33662:	0010      	movs	r0, r2
   33664:	40d8      	lsrs	r0, r3
   33666:	0003      	movs	r3, r0
   33668:	4658      	mov	r0, fp
   3366a:	4318      	orrs	r0, r3
   3366c:	4663      	mov	r3, ip
   3366e:	409a      	lsls	r2, r3
   33670:	1e53      	subs	r3, r2, #1
   33672:	419a      	sbcs	r2, r3
   33674:	4653      	mov	r3, sl
   33676:	4302      	orrs	r2, r0
   33678:	40d9      	lsrs	r1, r3
   3367a:	e703      	b.n	33484 <__aeabi_dadd+0x1c0>
   3367c:	0026      	movs	r6, r4
   3367e:	433e      	orrs	r6, r7
   33680:	d006      	beq.n	33690 <__aeabi_dadd+0x3cc>
   33682:	43eb      	mvns	r3, r5
   33684:	4699      	mov	r9, r3
   33686:	2b00      	cmp	r3, #0
   33688:	d0c7      	beq.n	3361a <__aeabi_dadd+0x356>
   3368a:	4e94      	ldr	r6, [pc, #592]	; (338dc <__aeabi_dadd+0x618>)
   3368c:	42b0      	cmp	r0, r6
   3368e:	d1ac      	bne.n	335ea <__aeabi_dadd+0x326>
   33690:	000c      	movs	r4, r1
   33692:	0017      	movs	r7, r2
   33694:	0006      	movs	r6, r0
   33696:	46d8      	mov	r8, fp
   33698:	e698      	b.n	333cc <__aeabi_dadd+0x108>
   3369a:	4b90      	ldr	r3, [pc, #576]	; (338dc <__aeabi_dadd+0x618>)
   3369c:	459a      	cmp	sl, r3
   3369e:	d00b      	beq.n	336b8 <__aeabi_dadd+0x3f4>
   336a0:	4682      	mov	sl, r0
   336a2:	e6e7      	b.n	33474 <__aeabi_dadd+0x1b0>
   336a4:	2800      	cmp	r0, #0
   336a6:	d000      	beq.n	336aa <__aeabi_dadd+0x3e6>
   336a8:	e09e      	b.n	337e8 <__aeabi_dadd+0x524>
   336aa:	0018      	movs	r0, r3
   336ac:	4310      	orrs	r0, r2
   336ae:	d100      	bne.n	336b2 <__aeabi_dadd+0x3ee>
   336b0:	e0e9      	b.n	33886 <__aeabi_dadd+0x5c2>
   336b2:	001c      	movs	r4, r3
   336b4:	0017      	movs	r7, r2
   336b6:	46d8      	mov	r8, fp
   336b8:	4e88      	ldr	r6, [pc, #544]	; (338dc <__aeabi_dadd+0x618>)
   336ba:	e687      	b.n	333cc <__aeabi_dadd+0x108>
   336bc:	2500      	movs	r5, #0
   336be:	e772      	b.n	335a6 <__aeabi_dadd+0x2e2>
   336c0:	2100      	movs	r1, #0
   336c2:	e782      	b.n	335ca <__aeabi_dadd+0x306>
   336c4:	0023      	movs	r3, r4
   336c6:	433b      	orrs	r3, r7
   336c8:	2e00      	cmp	r6, #0
   336ca:	d000      	beq.n	336ce <__aeabi_dadd+0x40a>
   336cc:	e0ab      	b.n	33826 <__aeabi_dadd+0x562>
   336ce:	2b00      	cmp	r3, #0
   336d0:	d100      	bne.n	336d4 <__aeabi_dadd+0x410>
   336d2:	e0e7      	b.n	338a4 <__aeabi_dadd+0x5e0>
   336d4:	000b      	movs	r3, r1
   336d6:	4313      	orrs	r3, r2
   336d8:	d100      	bne.n	336dc <__aeabi_dadd+0x418>
   336da:	e677      	b.n	333cc <__aeabi_dadd+0x108>
   336dc:	18ba      	adds	r2, r7, r2
   336de:	42ba      	cmp	r2, r7
   336e0:	41bf      	sbcs	r7, r7
   336e2:	1864      	adds	r4, r4, r1
   336e4:	427f      	negs	r7, r7
   336e6:	19e4      	adds	r4, r4, r7
   336e8:	0223      	lsls	r3, r4, #8
   336ea:	d400      	bmi.n	336ee <__aeabi_dadd+0x42a>
   336ec:	e0f2      	b.n	338d4 <__aeabi_dadd+0x610>
   336ee:	4b7c      	ldr	r3, [pc, #496]	; (338e0 <__aeabi_dadd+0x61c>)
   336f0:	0017      	movs	r7, r2
   336f2:	401c      	ands	r4, r3
   336f4:	0006      	movs	r6, r0
   336f6:	e669      	b.n	333cc <__aeabi_dadd+0x108>
   336f8:	0020      	movs	r0, r4
   336fa:	4338      	orrs	r0, r7
   336fc:	2e00      	cmp	r6, #0
   336fe:	d1d1      	bne.n	336a4 <__aeabi_dadd+0x3e0>
   33700:	2800      	cmp	r0, #0
   33702:	d15b      	bne.n	337bc <__aeabi_dadd+0x4f8>
   33704:	001c      	movs	r4, r3
   33706:	4314      	orrs	r4, r2
   33708:	d100      	bne.n	3370c <__aeabi_dadd+0x448>
   3370a:	e0a8      	b.n	3385e <__aeabi_dadd+0x59a>
   3370c:	001c      	movs	r4, r3
   3370e:	0017      	movs	r7, r2
   33710:	46d8      	mov	r8, fp
   33712:	e65b      	b.n	333cc <__aeabi_dadd+0x108>
   33714:	0006      	movs	r6, r0
   33716:	2400      	movs	r4, #0
   33718:	2700      	movs	r7, #0
   3371a:	e697      	b.n	3344c <__aeabi_dadd+0x188>
   3371c:	4650      	mov	r0, sl
   3371e:	000b      	movs	r3, r1
   33720:	3820      	subs	r0, #32
   33722:	40c3      	lsrs	r3, r0
   33724:	4699      	mov	r9, r3
   33726:	4653      	mov	r3, sl
   33728:	2b20      	cmp	r3, #32
   3372a:	d100      	bne.n	3372e <__aeabi_dadd+0x46a>
   3372c:	e095      	b.n	3385a <__aeabi_dadd+0x596>
   3372e:	2340      	movs	r3, #64	; 0x40
   33730:	4650      	mov	r0, sl
   33732:	1a1b      	subs	r3, r3, r0
   33734:	4099      	lsls	r1, r3
   33736:	430a      	orrs	r2, r1
   33738:	1e51      	subs	r1, r2, #1
   3373a:	418a      	sbcs	r2, r1
   3373c:	464b      	mov	r3, r9
   3373e:	2100      	movs	r1, #0
   33740:	431a      	orrs	r2, r3
   33742:	e69f      	b.n	33484 <__aeabi_dadd+0x1c0>
   33744:	2e00      	cmp	r6, #0
   33746:	d130      	bne.n	337aa <__aeabi_dadd+0x4e6>
   33748:	0026      	movs	r6, r4
   3374a:	433e      	orrs	r6, r7
   3374c:	d067      	beq.n	3381e <__aeabi_dadd+0x55a>
   3374e:	43db      	mvns	r3, r3
   33750:	469a      	mov	sl, r3
   33752:	2b00      	cmp	r3, #0
   33754:	d01c      	beq.n	33790 <__aeabi_dadd+0x4cc>
   33756:	4e61      	ldr	r6, [pc, #388]	; (338dc <__aeabi_dadd+0x618>)
   33758:	42b0      	cmp	r0, r6
   3375a:	d060      	beq.n	3381e <__aeabi_dadd+0x55a>
   3375c:	4653      	mov	r3, sl
   3375e:	2b38      	cmp	r3, #56	; 0x38
   33760:	dd00      	ble.n	33764 <__aeabi_dadd+0x4a0>
   33762:	e096      	b.n	33892 <__aeabi_dadd+0x5ce>
   33764:	2b1f      	cmp	r3, #31
   33766:	dd00      	ble.n	3376a <__aeabi_dadd+0x4a6>
   33768:	e09f      	b.n	338aa <__aeabi_dadd+0x5e6>
   3376a:	2620      	movs	r6, #32
   3376c:	1af3      	subs	r3, r6, r3
   3376e:	0026      	movs	r6, r4
   33770:	409e      	lsls	r6, r3
   33772:	469c      	mov	ip, r3
   33774:	46b3      	mov	fp, r6
   33776:	4653      	mov	r3, sl
   33778:	003e      	movs	r6, r7
   3377a:	40de      	lsrs	r6, r3
   3377c:	0033      	movs	r3, r6
   3377e:	465e      	mov	r6, fp
   33780:	431e      	orrs	r6, r3
   33782:	4663      	mov	r3, ip
   33784:	409f      	lsls	r7, r3
   33786:	1e7b      	subs	r3, r7, #1
   33788:	419f      	sbcs	r7, r3
   3378a:	4653      	mov	r3, sl
   3378c:	40dc      	lsrs	r4, r3
   3378e:	4337      	orrs	r7, r6
   33790:	18bf      	adds	r7, r7, r2
   33792:	4297      	cmp	r7, r2
   33794:	4192      	sbcs	r2, r2
   33796:	1864      	adds	r4, r4, r1
   33798:	4252      	negs	r2, r2
   3379a:	18a4      	adds	r4, r4, r2
   3379c:	0006      	movs	r6, r0
   3379e:	e678      	b.n	33492 <__aeabi_dadd+0x1ce>
   337a0:	4327      	orrs	r7, r4
   337a2:	1e7c      	subs	r4, r7, #1
   337a4:	41a7      	sbcs	r7, r4
   337a6:	2400      	movs	r4, #0
   337a8:	e737      	b.n	3361a <__aeabi_dadd+0x356>
   337aa:	4e4c      	ldr	r6, [pc, #304]	; (338dc <__aeabi_dadd+0x618>)
   337ac:	42b0      	cmp	r0, r6
   337ae:	d036      	beq.n	3381e <__aeabi_dadd+0x55a>
   337b0:	2680      	movs	r6, #128	; 0x80
   337b2:	425b      	negs	r3, r3
   337b4:	0436      	lsls	r6, r6, #16
   337b6:	469a      	mov	sl, r3
   337b8:	4334      	orrs	r4, r6
   337ba:	e7cf      	b.n	3375c <__aeabi_dadd+0x498>
   337bc:	0018      	movs	r0, r3
   337be:	4310      	orrs	r0, r2
   337c0:	d100      	bne.n	337c4 <__aeabi_dadd+0x500>
   337c2:	e603      	b.n	333cc <__aeabi_dadd+0x108>
   337c4:	1ab8      	subs	r0, r7, r2
   337c6:	4684      	mov	ip, r0
   337c8:	4567      	cmp	r7, ip
   337ca:	41ad      	sbcs	r5, r5
   337cc:	1ae0      	subs	r0, r4, r3
   337ce:	426d      	negs	r5, r5
   337d0:	1b40      	subs	r0, r0, r5
   337d2:	0205      	lsls	r5, r0, #8
   337d4:	d400      	bmi.n	337d8 <__aeabi_dadd+0x514>
   337d6:	e62c      	b.n	33432 <__aeabi_dadd+0x16e>
   337d8:	1bd7      	subs	r7, r2, r7
   337da:	42ba      	cmp	r2, r7
   337dc:	4192      	sbcs	r2, r2
   337de:	1b1c      	subs	r4, r3, r4
   337e0:	4252      	negs	r2, r2
   337e2:	1aa4      	subs	r4, r4, r2
   337e4:	46d8      	mov	r8, fp
   337e6:	e5f1      	b.n	333cc <__aeabi_dadd+0x108>
   337e8:	0018      	movs	r0, r3
   337ea:	4310      	orrs	r0, r2
   337ec:	d100      	bne.n	337f0 <__aeabi_dadd+0x52c>
   337ee:	e763      	b.n	336b8 <__aeabi_dadd+0x3f4>
   337f0:	08f8      	lsrs	r0, r7, #3
   337f2:	0767      	lsls	r7, r4, #29
   337f4:	4307      	orrs	r7, r0
   337f6:	2080      	movs	r0, #128	; 0x80
   337f8:	08e4      	lsrs	r4, r4, #3
   337fa:	0300      	lsls	r0, r0, #12
   337fc:	4204      	tst	r4, r0
   337fe:	d008      	beq.n	33812 <__aeabi_dadd+0x54e>
   33800:	08dd      	lsrs	r5, r3, #3
   33802:	4205      	tst	r5, r0
   33804:	d105      	bne.n	33812 <__aeabi_dadd+0x54e>
   33806:	08d2      	lsrs	r2, r2, #3
   33808:	0759      	lsls	r1, r3, #29
   3380a:	4311      	orrs	r1, r2
   3380c:	000f      	movs	r7, r1
   3380e:	002c      	movs	r4, r5
   33810:	46d8      	mov	r8, fp
   33812:	0f7b      	lsrs	r3, r7, #29
   33814:	00e4      	lsls	r4, r4, #3
   33816:	431c      	orrs	r4, r3
   33818:	00ff      	lsls	r7, r7, #3
   3381a:	4e30      	ldr	r6, [pc, #192]	; (338dc <__aeabi_dadd+0x618>)
   3381c:	e5d6      	b.n	333cc <__aeabi_dadd+0x108>
   3381e:	000c      	movs	r4, r1
   33820:	0017      	movs	r7, r2
   33822:	0006      	movs	r6, r0
   33824:	e5d2      	b.n	333cc <__aeabi_dadd+0x108>
   33826:	2b00      	cmp	r3, #0
   33828:	d038      	beq.n	3389c <__aeabi_dadd+0x5d8>
   3382a:	000b      	movs	r3, r1
   3382c:	4313      	orrs	r3, r2
   3382e:	d100      	bne.n	33832 <__aeabi_dadd+0x56e>
   33830:	e742      	b.n	336b8 <__aeabi_dadd+0x3f4>
   33832:	08f8      	lsrs	r0, r7, #3
   33834:	0767      	lsls	r7, r4, #29
   33836:	4307      	orrs	r7, r0
   33838:	2080      	movs	r0, #128	; 0x80
   3383a:	08e4      	lsrs	r4, r4, #3
   3383c:	0300      	lsls	r0, r0, #12
   3383e:	4204      	tst	r4, r0
   33840:	d0e7      	beq.n	33812 <__aeabi_dadd+0x54e>
   33842:	08cb      	lsrs	r3, r1, #3
   33844:	4203      	tst	r3, r0
   33846:	d1e4      	bne.n	33812 <__aeabi_dadd+0x54e>
   33848:	08d2      	lsrs	r2, r2, #3
   3384a:	0749      	lsls	r1, r1, #29
   3384c:	4311      	orrs	r1, r2
   3384e:	000f      	movs	r7, r1
   33850:	001c      	movs	r4, r3
   33852:	e7de      	b.n	33812 <__aeabi_dadd+0x54e>
   33854:	2700      	movs	r7, #0
   33856:	2400      	movs	r4, #0
   33858:	e5d5      	b.n	33406 <__aeabi_dadd+0x142>
   3385a:	2100      	movs	r1, #0
   3385c:	e76b      	b.n	33736 <__aeabi_dadd+0x472>
   3385e:	2500      	movs	r5, #0
   33860:	2700      	movs	r7, #0
   33862:	e5f3      	b.n	3344c <__aeabi_dadd+0x188>
   33864:	464e      	mov	r6, r9
   33866:	0025      	movs	r5, r4
   33868:	3e20      	subs	r6, #32
   3386a:	40f5      	lsrs	r5, r6
   3386c:	464b      	mov	r3, r9
   3386e:	002e      	movs	r6, r5
   33870:	2b20      	cmp	r3, #32
   33872:	d02d      	beq.n	338d0 <__aeabi_dadd+0x60c>
   33874:	2540      	movs	r5, #64	; 0x40
   33876:	1aed      	subs	r5, r5, r3
   33878:	40ac      	lsls	r4, r5
   3387a:	4327      	orrs	r7, r4
   3387c:	1e7c      	subs	r4, r7, #1
   3387e:	41a7      	sbcs	r7, r4
   33880:	2400      	movs	r4, #0
   33882:	4337      	orrs	r7, r6
   33884:	e6c9      	b.n	3361a <__aeabi_dadd+0x356>
   33886:	2480      	movs	r4, #128	; 0x80
   33888:	2500      	movs	r5, #0
   3388a:	0324      	lsls	r4, r4, #12
   3388c:	4e13      	ldr	r6, [pc, #76]	; (338dc <__aeabi_dadd+0x618>)
   3388e:	2700      	movs	r7, #0
   33890:	e5dc      	b.n	3344c <__aeabi_dadd+0x188>
   33892:	4327      	orrs	r7, r4
   33894:	1e7c      	subs	r4, r7, #1
   33896:	41a7      	sbcs	r7, r4
   33898:	2400      	movs	r4, #0
   3389a:	e779      	b.n	33790 <__aeabi_dadd+0x4cc>
   3389c:	000c      	movs	r4, r1
   3389e:	0017      	movs	r7, r2
   338a0:	4e0e      	ldr	r6, [pc, #56]	; (338dc <__aeabi_dadd+0x618>)
   338a2:	e593      	b.n	333cc <__aeabi_dadd+0x108>
   338a4:	000c      	movs	r4, r1
   338a6:	0017      	movs	r7, r2
   338a8:	e590      	b.n	333cc <__aeabi_dadd+0x108>
   338aa:	4656      	mov	r6, sl
   338ac:	0023      	movs	r3, r4
   338ae:	3e20      	subs	r6, #32
   338b0:	40f3      	lsrs	r3, r6
   338b2:	4699      	mov	r9, r3
   338b4:	4653      	mov	r3, sl
   338b6:	2b20      	cmp	r3, #32
   338b8:	d00e      	beq.n	338d8 <__aeabi_dadd+0x614>
   338ba:	2340      	movs	r3, #64	; 0x40
   338bc:	4656      	mov	r6, sl
   338be:	1b9b      	subs	r3, r3, r6
   338c0:	409c      	lsls	r4, r3
   338c2:	4327      	orrs	r7, r4
   338c4:	1e7c      	subs	r4, r7, #1
   338c6:	41a7      	sbcs	r7, r4
   338c8:	464b      	mov	r3, r9
   338ca:	2400      	movs	r4, #0
   338cc:	431f      	orrs	r7, r3
   338ce:	e75f      	b.n	33790 <__aeabi_dadd+0x4cc>
   338d0:	2400      	movs	r4, #0
   338d2:	e7d2      	b.n	3387a <__aeabi_dadd+0x5b6>
   338d4:	0017      	movs	r7, r2
   338d6:	e5b2      	b.n	3343e <__aeabi_dadd+0x17a>
   338d8:	2400      	movs	r4, #0
   338da:	e7f2      	b.n	338c2 <__aeabi_dadd+0x5fe>
   338dc:	000007ff 	.word	0x000007ff
   338e0:	ff7fffff 	.word	0xff7fffff

000338e4 <__aeabi_ddiv>:
   338e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   338e6:	4657      	mov	r7, sl
   338e8:	4645      	mov	r5, r8
   338ea:	46de      	mov	lr, fp
   338ec:	464e      	mov	r6, r9
   338ee:	b5e0      	push	{r5, r6, r7, lr}
   338f0:	004c      	lsls	r4, r1, #1
   338f2:	030e      	lsls	r6, r1, #12
   338f4:	b087      	sub	sp, #28
   338f6:	4683      	mov	fp, r0
   338f8:	4692      	mov	sl, r2
   338fa:	001d      	movs	r5, r3
   338fc:	4680      	mov	r8, r0
   338fe:	0b36      	lsrs	r6, r6, #12
   33900:	0d64      	lsrs	r4, r4, #21
   33902:	0fcf      	lsrs	r7, r1, #31
   33904:	2c00      	cmp	r4, #0
   33906:	d04f      	beq.n	339a8 <__aeabi_ddiv+0xc4>
   33908:	4b6f      	ldr	r3, [pc, #444]	; (33ac8 <__aeabi_ddiv+0x1e4>)
   3390a:	429c      	cmp	r4, r3
   3390c:	d035      	beq.n	3397a <__aeabi_ddiv+0x96>
   3390e:	2380      	movs	r3, #128	; 0x80
   33910:	0f42      	lsrs	r2, r0, #29
   33912:	041b      	lsls	r3, r3, #16
   33914:	00f6      	lsls	r6, r6, #3
   33916:	4313      	orrs	r3, r2
   33918:	4333      	orrs	r3, r6
   3391a:	4699      	mov	r9, r3
   3391c:	00c3      	lsls	r3, r0, #3
   3391e:	4698      	mov	r8, r3
   33920:	4b6a      	ldr	r3, [pc, #424]	; (33acc <__aeabi_ddiv+0x1e8>)
   33922:	2600      	movs	r6, #0
   33924:	469c      	mov	ip, r3
   33926:	2300      	movs	r3, #0
   33928:	4464      	add	r4, ip
   3392a:	9303      	str	r3, [sp, #12]
   3392c:	032b      	lsls	r3, r5, #12
   3392e:	0b1b      	lsrs	r3, r3, #12
   33930:	469b      	mov	fp, r3
   33932:	006b      	lsls	r3, r5, #1
   33934:	0fed      	lsrs	r5, r5, #31
   33936:	4650      	mov	r0, sl
   33938:	0d5b      	lsrs	r3, r3, #21
   3393a:	9501      	str	r5, [sp, #4]
   3393c:	d05e      	beq.n	339fc <__aeabi_ddiv+0x118>
   3393e:	4a62      	ldr	r2, [pc, #392]	; (33ac8 <__aeabi_ddiv+0x1e4>)
   33940:	4293      	cmp	r3, r2
   33942:	d053      	beq.n	339ec <__aeabi_ddiv+0x108>
   33944:	465a      	mov	r2, fp
   33946:	00d1      	lsls	r1, r2, #3
   33948:	2280      	movs	r2, #128	; 0x80
   3394a:	0f40      	lsrs	r0, r0, #29
   3394c:	0412      	lsls	r2, r2, #16
   3394e:	4302      	orrs	r2, r0
   33950:	430a      	orrs	r2, r1
   33952:	4693      	mov	fp, r2
   33954:	4652      	mov	r2, sl
   33956:	00d1      	lsls	r1, r2, #3
   33958:	4a5c      	ldr	r2, [pc, #368]	; (33acc <__aeabi_ddiv+0x1e8>)
   3395a:	4694      	mov	ip, r2
   3395c:	2200      	movs	r2, #0
   3395e:	4463      	add	r3, ip
   33960:	0038      	movs	r0, r7
   33962:	4068      	eors	r0, r5
   33964:	4684      	mov	ip, r0
   33966:	9002      	str	r0, [sp, #8]
   33968:	1ae4      	subs	r4, r4, r3
   3396a:	4316      	orrs	r6, r2
   3396c:	2e0f      	cmp	r6, #15
   3396e:	d900      	bls.n	33972 <__aeabi_ddiv+0x8e>
   33970:	e0b4      	b.n	33adc <__aeabi_ddiv+0x1f8>
   33972:	4b57      	ldr	r3, [pc, #348]	; (33ad0 <__aeabi_ddiv+0x1ec>)
   33974:	00b6      	lsls	r6, r6, #2
   33976:	599b      	ldr	r3, [r3, r6]
   33978:	469f      	mov	pc, r3
   3397a:	0003      	movs	r3, r0
   3397c:	4333      	orrs	r3, r6
   3397e:	4699      	mov	r9, r3
   33980:	d16c      	bne.n	33a5c <__aeabi_ddiv+0x178>
   33982:	2300      	movs	r3, #0
   33984:	4698      	mov	r8, r3
   33986:	3302      	adds	r3, #2
   33988:	2608      	movs	r6, #8
   3398a:	9303      	str	r3, [sp, #12]
   3398c:	e7ce      	b.n	3392c <__aeabi_ddiv+0x48>
   3398e:	46cb      	mov	fp, r9
   33990:	4641      	mov	r1, r8
   33992:	9a03      	ldr	r2, [sp, #12]
   33994:	9701      	str	r7, [sp, #4]
   33996:	2a02      	cmp	r2, #2
   33998:	d165      	bne.n	33a66 <__aeabi_ddiv+0x182>
   3399a:	9b01      	ldr	r3, [sp, #4]
   3399c:	4c4a      	ldr	r4, [pc, #296]	; (33ac8 <__aeabi_ddiv+0x1e4>)
   3399e:	469c      	mov	ip, r3
   339a0:	2300      	movs	r3, #0
   339a2:	2200      	movs	r2, #0
   339a4:	4698      	mov	r8, r3
   339a6:	e06b      	b.n	33a80 <__aeabi_ddiv+0x19c>
   339a8:	0003      	movs	r3, r0
   339aa:	4333      	orrs	r3, r6
   339ac:	4699      	mov	r9, r3
   339ae:	d04e      	beq.n	33a4e <__aeabi_ddiv+0x16a>
   339b0:	2e00      	cmp	r6, #0
   339b2:	d100      	bne.n	339b6 <__aeabi_ddiv+0xd2>
   339b4:	e1bc      	b.n	33d30 <__aeabi_ddiv+0x44c>
   339b6:	0030      	movs	r0, r6
   339b8:	f001 f8ca 	bl	34b50 <__clzsi2>
   339bc:	0003      	movs	r3, r0
   339be:	3b0b      	subs	r3, #11
   339c0:	2b1c      	cmp	r3, #28
   339c2:	dd00      	ble.n	339c6 <__aeabi_ddiv+0xe2>
   339c4:	e1ac      	b.n	33d20 <__aeabi_ddiv+0x43c>
   339c6:	221d      	movs	r2, #29
   339c8:	1ad3      	subs	r3, r2, r3
   339ca:	465a      	mov	r2, fp
   339cc:	0001      	movs	r1, r0
   339ce:	40da      	lsrs	r2, r3
   339d0:	3908      	subs	r1, #8
   339d2:	408e      	lsls	r6, r1
   339d4:	0013      	movs	r3, r2
   339d6:	4333      	orrs	r3, r6
   339d8:	4699      	mov	r9, r3
   339da:	465b      	mov	r3, fp
   339dc:	408b      	lsls	r3, r1
   339de:	4698      	mov	r8, r3
   339e0:	2300      	movs	r3, #0
   339e2:	4c3c      	ldr	r4, [pc, #240]	; (33ad4 <__aeabi_ddiv+0x1f0>)
   339e4:	2600      	movs	r6, #0
   339e6:	1a24      	subs	r4, r4, r0
   339e8:	9303      	str	r3, [sp, #12]
   339ea:	e79f      	b.n	3392c <__aeabi_ddiv+0x48>
   339ec:	4651      	mov	r1, sl
   339ee:	465a      	mov	r2, fp
   339f0:	4311      	orrs	r1, r2
   339f2:	d129      	bne.n	33a48 <__aeabi_ddiv+0x164>
   339f4:	2200      	movs	r2, #0
   339f6:	4693      	mov	fp, r2
   339f8:	3202      	adds	r2, #2
   339fa:	e7b1      	b.n	33960 <__aeabi_ddiv+0x7c>
   339fc:	4659      	mov	r1, fp
   339fe:	4301      	orrs	r1, r0
   33a00:	d01e      	beq.n	33a40 <__aeabi_ddiv+0x15c>
   33a02:	465b      	mov	r3, fp
   33a04:	2b00      	cmp	r3, #0
   33a06:	d100      	bne.n	33a0a <__aeabi_ddiv+0x126>
   33a08:	e19e      	b.n	33d48 <__aeabi_ddiv+0x464>
   33a0a:	4658      	mov	r0, fp
   33a0c:	f001 f8a0 	bl	34b50 <__clzsi2>
   33a10:	0003      	movs	r3, r0
   33a12:	3b0b      	subs	r3, #11
   33a14:	2b1c      	cmp	r3, #28
   33a16:	dd00      	ble.n	33a1a <__aeabi_ddiv+0x136>
   33a18:	e18f      	b.n	33d3a <__aeabi_ddiv+0x456>
   33a1a:	0002      	movs	r2, r0
   33a1c:	4659      	mov	r1, fp
   33a1e:	3a08      	subs	r2, #8
   33a20:	4091      	lsls	r1, r2
   33a22:	468b      	mov	fp, r1
   33a24:	211d      	movs	r1, #29
   33a26:	1acb      	subs	r3, r1, r3
   33a28:	4651      	mov	r1, sl
   33a2a:	40d9      	lsrs	r1, r3
   33a2c:	000b      	movs	r3, r1
   33a2e:	4659      	mov	r1, fp
   33a30:	430b      	orrs	r3, r1
   33a32:	4651      	mov	r1, sl
   33a34:	469b      	mov	fp, r3
   33a36:	4091      	lsls	r1, r2
   33a38:	4b26      	ldr	r3, [pc, #152]	; (33ad4 <__aeabi_ddiv+0x1f0>)
   33a3a:	2200      	movs	r2, #0
   33a3c:	1a1b      	subs	r3, r3, r0
   33a3e:	e78f      	b.n	33960 <__aeabi_ddiv+0x7c>
   33a40:	2300      	movs	r3, #0
   33a42:	2201      	movs	r2, #1
   33a44:	469b      	mov	fp, r3
   33a46:	e78b      	b.n	33960 <__aeabi_ddiv+0x7c>
   33a48:	4651      	mov	r1, sl
   33a4a:	2203      	movs	r2, #3
   33a4c:	e788      	b.n	33960 <__aeabi_ddiv+0x7c>
   33a4e:	2300      	movs	r3, #0
   33a50:	4698      	mov	r8, r3
   33a52:	3301      	adds	r3, #1
   33a54:	2604      	movs	r6, #4
   33a56:	2400      	movs	r4, #0
   33a58:	9303      	str	r3, [sp, #12]
   33a5a:	e767      	b.n	3392c <__aeabi_ddiv+0x48>
   33a5c:	2303      	movs	r3, #3
   33a5e:	46b1      	mov	r9, r6
   33a60:	9303      	str	r3, [sp, #12]
   33a62:	260c      	movs	r6, #12
   33a64:	e762      	b.n	3392c <__aeabi_ddiv+0x48>
   33a66:	2a03      	cmp	r2, #3
   33a68:	d100      	bne.n	33a6c <__aeabi_ddiv+0x188>
   33a6a:	e25c      	b.n	33f26 <__aeabi_ddiv+0x642>
   33a6c:	9b01      	ldr	r3, [sp, #4]
   33a6e:	2a01      	cmp	r2, #1
   33a70:	d000      	beq.n	33a74 <__aeabi_ddiv+0x190>
   33a72:	e1e4      	b.n	33e3e <__aeabi_ddiv+0x55a>
   33a74:	4013      	ands	r3, r2
   33a76:	469c      	mov	ip, r3
   33a78:	2300      	movs	r3, #0
   33a7a:	2400      	movs	r4, #0
   33a7c:	2200      	movs	r2, #0
   33a7e:	4698      	mov	r8, r3
   33a80:	2100      	movs	r1, #0
   33a82:	0312      	lsls	r2, r2, #12
   33a84:	0b13      	lsrs	r3, r2, #12
   33a86:	0d0a      	lsrs	r2, r1, #20
   33a88:	0512      	lsls	r2, r2, #20
   33a8a:	431a      	orrs	r2, r3
   33a8c:	0523      	lsls	r3, r4, #20
   33a8e:	4c12      	ldr	r4, [pc, #72]	; (33ad8 <__aeabi_ddiv+0x1f4>)
   33a90:	4640      	mov	r0, r8
   33a92:	4022      	ands	r2, r4
   33a94:	4313      	orrs	r3, r2
   33a96:	4662      	mov	r2, ip
   33a98:	005b      	lsls	r3, r3, #1
   33a9a:	07d2      	lsls	r2, r2, #31
   33a9c:	085b      	lsrs	r3, r3, #1
   33a9e:	4313      	orrs	r3, r2
   33aa0:	0019      	movs	r1, r3
   33aa2:	b007      	add	sp, #28
   33aa4:	bc3c      	pop	{r2, r3, r4, r5}
   33aa6:	4690      	mov	r8, r2
   33aa8:	4699      	mov	r9, r3
   33aaa:	46a2      	mov	sl, r4
   33aac:	46ab      	mov	fp, r5
   33aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33ab0:	2300      	movs	r3, #0
   33ab2:	2280      	movs	r2, #128	; 0x80
   33ab4:	469c      	mov	ip, r3
   33ab6:	0312      	lsls	r2, r2, #12
   33ab8:	4698      	mov	r8, r3
   33aba:	4c03      	ldr	r4, [pc, #12]	; (33ac8 <__aeabi_ddiv+0x1e4>)
   33abc:	e7e0      	b.n	33a80 <__aeabi_ddiv+0x19c>
   33abe:	2300      	movs	r3, #0
   33ac0:	4c01      	ldr	r4, [pc, #4]	; (33ac8 <__aeabi_ddiv+0x1e4>)
   33ac2:	2200      	movs	r2, #0
   33ac4:	4698      	mov	r8, r3
   33ac6:	e7db      	b.n	33a80 <__aeabi_ddiv+0x19c>
   33ac8:	000007ff 	.word	0x000007ff
   33acc:	fffffc01 	.word	0xfffffc01
   33ad0:	0003a288 	.word	0x0003a288
   33ad4:	fffffc0d 	.word	0xfffffc0d
   33ad8:	800fffff 	.word	0x800fffff
   33adc:	45d9      	cmp	r9, fp
   33ade:	d900      	bls.n	33ae2 <__aeabi_ddiv+0x1fe>
   33ae0:	e139      	b.n	33d56 <__aeabi_ddiv+0x472>
   33ae2:	d100      	bne.n	33ae6 <__aeabi_ddiv+0x202>
   33ae4:	e134      	b.n	33d50 <__aeabi_ddiv+0x46c>
   33ae6:	2300      	movs	r3, #0
   33ae8:	4646      	mov	r6, r8
   33aea:	464d      	mov	r5, r9
   33aec:	469a      	mov	sl, r3
   33aee:	3c01      	subs	r4, #1
   33af0:	465b      	mov	r3, fp
   33af2:	0e0a      	lsrs	r2, r1, #24
   33af4:	021b      	lsls	r3, r3, #8
   33af6:	431a      	orrs	r2, r3
   33af8:	020b      	lsls	r3, r1, #8
   33afa:	0c17      	lsrs	r7, r2, #16
   33afc:	9303      	str	r3, [sp, #12]
   33afe:	0413      	lsls	r3, r2, #16
   33b00:	0c1b      	lsrs	r3, r3, #16
   33b02:	0039      	movs	r1, r7
   33b04:	0028      	movs	r0, r5
   33b06:	4690      	mov	r8, r2
   33b08:	9301      	str	r3, [sp, #4]
   33b0a:	f7ff f8ab 	bl	32c64 <__udivsi3>
   33b0e:	0002      	movs	r2, r0
   33b10:	9b01      	ldr	r3, [sp, #4]
   33b12:	4683      	mov	fp, r0
   33b14:	435a      	muls	r2, r3
   33b16:	0028      	movs	r0, r5
   33b18:	0039      	movs	r1, r7
   33b1a:	4691      	mov	r9, r2
   33b1c:	f7ff f928 	bl	32d70 <__aeabi_uidivmod>
   33b20:	0c35      	lsrs	r5, r6, #16
   33b22:	0409      	lsls	r1, r1, #16
   33b24:	430d      	orrs	r5, r1
   33b26:	45a9      	cmp	r9, r5
   33b28:	d90d      	bls.n	33b46 <__aeabi_ddiv+0x262>
   33b2a:	465b      	mov	r3, fp
   33b2c:	4445      	add	r5, r8
   33b2e:	3b01      	subs	r3, #1
   33b30:	45a8      	cmp	r8, r5
   33b32:	d900      	bls.n	33b36 <__aeabi_ddiv+0x252>
   33b34:	e13a      	b.n	33dac <__aeabi_ddiv+0x4c8>
   33b36:	45a9      	cmp	r9, r5
   33b38:	d800      	bhi.n	33b3c <__aeabi_ddiv+0x258>
   33b3a:	e137      	b.n	33dac <__aeabi_ddiv+0x4c8>
   33b3c:	2302      	movs	r3, #2
   33b3e:	425b      	negs	r3, r3
   33b40:	469c      	mov	ip, r3
   33b42:	4445      	add	r5, r8
   33b44:	44e3      	add	fp, ip
   33b46:	464b      	mov	r3, r9
   33b48:	1aeb      	subs	r3, r5, r3
   33b4a:	0039      	movs	r1, r7
   33b4c:	0018      	movs	r0, r3
   33b4e:	9304      	str	r3, [sp, #16]
   33b50:	f7ff f888 	bl	32c64 <__udivsi3>
   33b54:	9b01      	ldr	r3, [sp, #4]
   33b56:	0005      	movs	r5, r0
   33b58:	4343      	muls	r3, r0
   33b5a:	0039      	movs	r1, r7
   33b5c:	9804      	ldr	r0, [sp, #16]
   33b5e:	4699      	mov	r9, r3
   33b60:	f7ff f906 	bl	32d70 <__aeabi_uidivmod>
   33b64:	0433      	lsls	r3, r6, #16
   33b66:	0409      	lsls	r1, r1, #16
   33b68:	0c1b      	lsrs	r3, r3, #16
   33b6a:	430b      	orrs	r3, r1
   33b6c:	4599      	cmp	r9, r3
   33b6e:	d909      	bls.n	33b84 <__aeabi_ddiv+0x2a0>
   33b70:	4443      	add	r3, r8
   33b72:	1e6a      	subs	r2, r5, #1
   33b74:	4598      	cmp	r8, r3
   33b76:	d900      	bls.n	33b7a <__aeabi_ddiv+0x296>
   33b78:	e11a      	b.n	33db0 <__aeabi_ddiv+0x4cc>
   33b7a:	4599      	cmp	r9, r3
   33b7c:	d800      	bhi.n	33b80 <__aeabi_ddiv+0x29c>
   33b7e:	e117      	b.n	33db0 <__aeabi_ddiv+0x4cc>
   33b80:	3d02      	subs	r5, #2
   33b82:	4443      	add	r3, r8
   33b84:	464a      	mov	r2, r9
   33b86:	1a9b      	subs	r3, r3, r2
   33b88:	465a      	mov	r2, fp
   33b8a:	0412      	lsls	r2, r2, #16
   33b8c:	432a      	orrs	r2, r5
   33b8e:	9903      	ldr	r1, [sp, #12]
   33b90:	4693      	mov	fp, r2
   33b92:	0c10      	lsrs	r0, r2, #16
   33b94:	0c0a      	lsrs	r2, r1, #16
   33b96:	4691      	mov	r9, r2
   33b98:	0409      	lsls	r1, r1, #16
   33b9a:	465a      	mov	r2, fp
   33b9c:	0c09      	lsrs	r1, r1, #16
   33b9e:	464e      	mov	r6, r9
   33ba0:	000d      	movs	r5, r1
   33ba2:	0412      	lsls	r2, r2, #16
   33ba4:	0c12      	lsrs	r2, r2, #16
   33ba6:	4345      	muls	r5, r0
   33ba8:	9105      	str	r1, [sp, #20]
   33baa:	4351      	muls	r1, r2
   33bac:	4372      	muls	r2, r6
   33bae:	4370      	muls	r0, r6
   33bb0:	1952      	adds	r2, r2, r5
   33bb2:	0c0e      	lsrs	r6, r1, #16
   33bb4:	18b2      	adds	r2, r6, r2
   33bb6:	4295      	cmp	r5, r2
   33bb8:	d903      	bls.n	33bc2 <__aeabi_ddiv+0x2de>
   33bba:	2580      	movs	r5, #128	; 0x80
   33bbc:	026d      	lsls	r5, r5, #9
   33bbe:	46ac      	mov	ip, r5
   33bc0:	4460      	add	r0, ip
   33bc2:	0c15      	lsrs	r5, r2, #16
   33bc4:	0409      	lsls	r1, r1, #16
   33bc6:	0412      	lsls	r2, r2, #16
   33bc8:	0c09      	lsrs	r1, r1, #16
   33bca:	1828      	adds	r0, r5, r0
   33bcc:	1852      	adds	r2, r2, r1
   33bce:	4283      	cmp	r3, r0
   33bd0:	d200      	bcs.n	33bd4 <__aeabi_ddiv+0x2f0>
   33bd2:	e0ce      	b.n	33d72 <__aeabi_ddiv+0x48e>
   33bd4:	d100      	bne.n	33bd8 <__aeabi_ddiv+0x2f4>
   33bd6:	e0c8      	b.n	33d6a <__aeabi_ddiv+0x486>
   33bd8:	1a1d      	subs	r5, r3, r0
   33bda:	4653      	mov	r3, sl
   33bdc:	1a9e      	subs	r6, r3, r2
   33bde:	45b2      	cmp	sl, r6
   33be0:	4192      	sbcs	r2, r2
   33be2:	4252      	negs	r2, r2
   33be4:	1aab      	subs	r3, r5, r2
   33be6:	469a      	mov	sl, r3
   33be8:	4598      	cmp	r8, r3
   33bea:	d100      	bne.n	33bee <__aeabi_ddiv+0x30a>
   33bec:	e117      	b.n	33e1e <__aeabi_ddiv+0x53a>
   33bee:	0039      	movs	r1, r7
   33bf0:	0018      	movs	r0, r3
   33bf2:	f7ff f837 	bl	32c64 <__udivsi3>
   33bf6:	9b01      	ldr	r3, [sp, #4]
   33bf8:	0005      	movs	r5, r0
   33bfa:	4343      	muls	r3, r0
   33bfc:	0039      	movs	r1, r7
   33bfe:	4650      	mov	r0, sl
   33c00:	9304      	str	r3, [sp, #16]
   33c02:	f7ff f8b5 	bl	32d70 <__aeabi_uidivmod>
   33c06:	9804      	ldr	r0, [sp, #16]
   33c08:	040b      	lsls	r3, r1, #16
   33c0a:	0c31      	lsrs	r1, r6, #16
   33c0c:	4319      	orrs	r1, r3
   33c0e:	4288      	cmp	r0, r1
   33c10:	d909      	bls.n	33c26 <__aeabi_ddiv+0x342>
   33c12:	4441      	add	r1, r8
   33c14:	1e6b      	subs	r3, r5, #1
   33c16:	4588      	cmp	r8, r1
   33c18:	d900      	bls.n	33c1c <__aeabi_ddiv+0x338>
   33c1a:	e107      	b.n	33e2c <__aeabi_ddiv+0x548>
   33c1c:	4288      	cmp	r0, r1
   33c1e:	d800      	bhi.n	33c22 <__aeabi_ddiv+0x33e>
   33c20:	e104      	b.n	33e2c <__aeabi_ddiv+0x548>
   33c22:	3d02      	subs	r5, #2
   33c24:	4441      	add	r1, r8
   33c26:	9b04      	ldr	r3, [sp, #16]
   33c28:	1acb      	subs	r3, r1, r3
   33c2a:	0018      	movs	r0, r3
   33c2c:	0039      	movs	r1, r7
   33c2e:	9304      	str	r3, [sp, #16]
   33c30:	f7ff f818 	bl	32c64 <__udivsi3>
   33c34:	9b01      	ldr	r3, [sp, #4]
   33c36:	4682      	mov	sl, r0
   33c38:	4343      	muls	r3, r0
   33c3a:	0039      	movs	r1, r7
   33c3c:	9804      	ldr	r0, [sp, #16]
   33c3e:	9301      	str	r3, [sp, #4]
   33c40:	f7ff f896 	bl	32d70 <__aeabi_uidivmod>
   33c44:	9801      	ldr	r0, [sp, #4]
   33c46:	040b      	lsls	r3, r1, #16
   33c48:	0431      	lsls	r1, r6, #16
   33c4a:	0c09      	lsrs	r1, r1, #16
   33c4c:	4319      	orrs	r1, r3
   33c4e:	4288      	cmp	r0, r1
   33c50:	d90d      	bls.n	33c6e <__aeabi_ddiv+0x38a>
   33c52:	4653      	mov	r3, sl
   33c54:	4441      	add	r1, r8
   33c56:	3b01      	subs	r3, #1
   33c58:	4588      	cmp	r8, r1
   33c5a:	d900      	bls.n	33c5e <__aeabi_ddiv+0x37a>
   33c5c:	e0e8      	b.n	33e30 <__aeabi_ddiv+0x54c>
   33c5e:	4288      	cmp	r0, r1
   33c60:	d800      	bhi.n	33c64 <__aeabi_ddiv+0x380>
   33c62:	e0e5      	b.n	33e30 <__aeabi_ddiv+0x54c>
   33c64:	2302      	movs	r3, #2
   33c66:	425b      	negs	r3, r3
   33c68:	469c      	mov	ip, r3
   33c6a:	4441      	add	r1, r8
   33c6c:	44e2      	add	sl, ip
   33c6e:	9b01      	ldr	r3, [sp, #4]
   33c70:	042d      	lsls	r5, r5, #16
   33c72:	1ace      	subs	r6, r1, r3
   33c74:	4651      	mov	r1, sl
   33c76:	4329      	orrs	r1, r5
   33c78:	9d05      	ldr	r5, [sp, #20]
   33c7a:	464f      	mov	r7, r9
   33c7c:	002a      	movs	r2, r5
   33c7e:	040b      	lsls	r3, r1, #16
   33c80:	0c08      	lsrs	r0, r1, #16
   33c82:	0c1b      	lsrs	r3, r3, #16
   33c84:	435a      	muls	r2, r3
   33c86:	4345      	muls	r5, r0
   33c88:	437b      	muls	r3, r7
   33c8a:	4378      	muls	r0, r7
   33c8c:	195b      	adds	r3, r3, r5
   33c8e:	0c17      	lsrs	r7, r2, #16
   33c90:	18fb      	adds	r3, r7, r3
   33c92:	429d      	cmp	r5, r3
   33c94:	d903      	bls.n	33c9e <__aeabi_ddiv+0x3ba>
   33c96:	2580      	movs	r5, #128	; 0x80
   33c98:	026d      	lsls	r5, r5, #9
   33c9a:	46ac      	mov	ip, r5
   33c9c:	4460      	add	r0, ip
   33c9e:	0c1d      	lsrs	r5, r3, #16
   33ca0:	0412      	lsls	r2, r2, #16
   33ca2:	041b      	lsls	r3, r3, #16
   33ca4:	0c12      	lsrs	r2, r2, #16
   33ca6:	1828      	adds	r0, r5, r0
   33ca8:	189b      	adds	r3, r3, r2
   33caa:	4286      	cmp	r6, r0
   33cac:	d200      	bcs.n	33cb0 <__aeabi_ddiv+0x3cc>
   33cae:	e093      	b.n	33dd8 <__aeabi_ddiv+0x4f4>
   33cb0:	d100      	bne.n	33cb4 <__aeabi_ddiv+0x3d0>
   33cb2:	e08e      	b.n	33dd2 <__aeabi_ddiv+0x4ee>
   33cb4:	2301      	movs	r3, #1
   33cb6:	4319      	orrs	r1, r3
   33cb8:	4ba0      	ldr	r3, [pc, #640]	; (33f3c <__aeabi_ddiv+0x658>)
   33cba:	18e3      	adds	r3, r4, r3
   33cbc:	2b00      	cmp	r3, #0
   33cbe:	dc00      	bgt.n	33cc2 <__aeabi_ddiv+0x3de>
   33cc0:	e099      	b.n	33df6 <__aeabi_ddiv+0x512>
   33cc2:	074a      	lsls	r2, r1, #29
   33cc4:	d000      	beq.n	33cc8 <__aeabi_ddiv+0x3e4>
   33cc6:	e09e      	b.n	33e06 <__aeabi_ddiv+0x522>
   33cc8:	465a      	mov	r2, fp
   33cca:	01d2      	lsls	r2, r2, #7
   33ccc:	d506      	bpl.n	33cdc <__aeabi_ddiv+0x3f8>
   33cce:	465a      	mov	r2, fp
   33cd0:	4b9b      	ldr	r3, [pc, #620]	; (33f40 <__aeabi_ddiv+0x65c>)
   33cd2:	401a      	ands	r2, r3
   33cd4:	2380      	movs	r3, #128	; 0x80
   33cd6:	4693      	mov	fp, r2
   33cd8:	00db      	lsls	r3, r3, #3
   33cda:	18e3      	adds	r3, r4, r3
   33cdc:	4a99      	ldr	r2, [pc, #612]	; (33f44 <__aeabi_ddiv+0x660>)
   33cde:	4293      	cmp	r3, r2
   33ce0:	dd68      	ble.n	33db4 <__aeabi_ddiv+0x4d0>
   33ce2:	2301      	movs	r3, #1
   33ce4:	9a02      	ldr	r2, [sp, #8]
   33ce6:	4c98      	ldr	r4, [pc, #608]	; (33f48 <__aeabi_ddiv+0x664>)
   33ce8:	401a      	ands	r2, r3
   33cea:	2300      	movs	r3, #0
   33cec:	4694      	mov	ip, r2
   33cee:	4698      	mov	r8, r3
   33cf0:	2200      	movs	r2, #0
   33cf2:	e6c5      	b.n	33a80 <__aeabi_ddiv+0x19c>
   33cf4:	2280      	movs	r2, #128	; 0x80
   33cf6:	464b      	mov	r3, r9
   33cf8:	0312      	lsls	r2, r2, #12
   33cfa:	4213      	tst	r3, r2
   33cfc:	d00a      	beq.n	33d14 <__aeabi_ddiv+0x430>
   33cfe:	465b      	mov	r3, fp
   33d00:	4213      	tst	r3, r2
   33d02:	d106      	bne.n	33d12 <__aeabi_ddiv+0x42e>
   33d04:	431a      	orrs	r2, r3
   33d06:	0312      	lsls	r2, r2, #12
   33d08:	0b12      	lsrs	r2, r2, #12
   33d0a:	46ac      	mov	ip, r5
   33d0c:	4688      	mov	r8, r1
   33d0e:	4c8e      	ldr	r4, [pc, #568]	; (33f48 <__aeabi_ddiv+0x664>)
   33d10:	e6b6      	b.n	33a80 <__aeabi_ddiv+0x19c>
   33d12:	464b      	mov	r3, r9
   33d14:	431a      	orrs	r2, r3
   33d16:	0312      	lsls	r2, r2, #12
   33d18:	0b12      	lsrs	r2, r2, #12
   33d1a:	46bc      	mov	ip, r7
   33d1c:	4c8a      	ldr	r4, [pc, #552]	; (33f48 <__aeabi_ddiv+0x664>)
   33d1e:	e6af      	b.n	33a80 <__aeabi_ddiv+0x19c>
   33d20:	0003      	movs	r3, r0
   33d22:	465a      	mov	r2, fp
   33d24:	3b28      	subs	r3, #40	; 0x28
   33d26:	409a      	lsls	r2, r3
   33d28:	2300      	movs	r3, #0
   33d2a:	4691      	mov	r9, r2
   33d2c:	4698      	mov	r8, r3
   33d2e:	e657      	b.n	339e0 <__aeabi_ddiv+0xfc>
   33d30:	4658      	mov	r0, fp
   33d32:	f000 ff0d 	bl	34b50 <__clzsi2>
   33d36:	3020      	adds	r0, #32
   33d38:	e640      	b.n	339bc <__aeabi_ddiv+0xd8>
   33d3a:	0003      	movs	r3, r0
   33d3c:	4652      	mov	r2, sl
   33d3e:	3b28      	subs	r3, #40	; 0x28
   33d40:	409a      	lsls	r2, r3
   33d42:	2100      	movs	r1, #0
   33d44:	4693      	mov	fp, r2
   33d46:	e677      	b.n	33a38 <__aeabi_ddiv+0x154>
   33d48:	f000 ff02 	bl	34b50 <__clzsi2>
   33d4c:	3020      	adds	r0, #32
   33d4e:	e65f      	b.n	33a10 <__aeabi_ddiv+0x12c>
   33d50:	4588      	cmp	r8, r1
   33d52:	d200      	bcs.n	33d56 <__aeabi_ddiv+0x472>
   33d54:	e6c7      	b.n	33ae6 <__aeabi_ddiv+0x202>
   33d56:	464b      	mov	r3, r9
   33d58:	07de      	lsls	r6, r3, #31
   33d5a:	085d      	lsrs	r5, r3, #1
   33d5c:	4643      	mov	r3, r8
   33d5e:	085b      	lsrs	r3, r3, #1
   33d60:	431e      	orrs	r6, r3
   33d62:	4643      	mov	r3, r8
   33d64:	07db      	lsls	r3, r3, #31
   33d66:	469a      	mov	sl, r3
   33d68:	e6c2      	b.n	33af0 <__aeabi_ddiv+0x20c>
   33d6a:	2500      	movs	r5, #0
   33d6c:	4592      	cmp	sl, r2
   33d6e:	d300      	bcc.n	33d72 <__aeabi_ddiv+0x48e>
   33d70:	e733      	b.n	33bda <__aeabi_ddiv+0x2f6>
   33d72:	9e03      	ldr	r6, [sp, #12]
   33d74:	4659      	mov	r1, fp
   33d76:	46b4      	mov	ip, r6
   33d78:	44e2      	add	sl, ip
   33d7a:	45b2      	cmp	sl, r6
   33d7c:	41ad      	sbcs	r5, r5
   33d7e:	426d      	negs	r5, r5
   33d80:	4445      	add	r5, r8
   33d82:	18eb      	adds	r3, r5, r3
   33d84:	3901      	subs	r1, #1
   33d86:	4598      	cmp	r8, r3
   33d88:	d207      	bcs.n	33d9a <__aeabi_ddiv+0x4b6>
   33d8a:	4298      	cmp	r0, r3
   33d8c:	d900      	bls.n	33d90 <__aeabi_ddiv+0x4ac>
   33d8e:	e07f      	b.n	33e90 <__aeabi_ddiv+0x5ac>
   33d90:	d100      	bne.n	33d94 <__aeabi_ddiv+0x4b0>
   33d92:	e0bc      	b.n	33f0e <__aeabi_ddiv+0x62a>
   33d94:	1a1d      	subs	r5, r3, r0
   33d96:	468b      	mov	fp, r1
   33d98:	e71f      	b.n	33bda <__aeabi_ddiv+0x2f6>
   33d9a:	4598      	cmp	r8, r3
   33d9c:	d1fa      	bne.n	33d94 <__aeabi_ddiv+0x4b0>
   33d9e:	9d03      	ldr	r5, [sp, #12]
   33da0:	4555      	cmp	r5, sl
   33da2:	d9f2      	bls.n	33d8a <__aeabi_ddiv+0x4a6>
   33da4:	4643      	mov	r3, r8
   33da6:	468b      	mov	fp, r1
   33da8:	1a1d      	subs	r5, r3, r0
   33daa:	e716      	b.n	33bda <__aeabi_ddiv+0x2f6>
   33dac:	469b      	mov	fp, r3
   33dae:	e6ca      	b.n	33b46 <__aeabi_ddiv+0x262>
   33db0:	0015      	movs	r5, r2
   33db2:	e6e7      	b.n	33b84 <__aeabi_ddiv+0x2a0>
   33db4:	465a      	mov	r2, fp
   33db6:	08c9      	lsrs	r1, r1, #3
   33db8:	0752      	lsls	r2, r2, #29
   33dba:	430a      	orrs	r2, r1
   33dbc:	055b      	lsls	r3, r3, #21
   33dbe:	4690      	mov	r8, r2
   33dc0:	0d5c      	lsrs	r4, r3, #21
   33dc2:	465a      	mov	r2, fp
   33dc4:	2301      	movs	r3, #1
   33dc6:	9902      	ldr	r1, [sp, #8]
   33dc8:	0252      	lsls	r2, r2, #9
   33dca:	4019      	ands	r1, r3
   33dcc:	0b12      	lsrs	r2, r2, #12
   33dce:	468c      	mov	ip, r1
   33dd0:	e656      	b.n	33a80 <__aeabi_ddiv+0x19c>
   33dd2:	2b00      	cmp	r3, #0
   33dd4:	d100      	bne.n	33dd8 <__aeabi_ddiv+0x4f4>
   33dd6:	e76f      	b.n	33cb8 <__aeabi_ddiv+0x3d4>
   33dd8:	4446      	add	r6, r8
   33dda:	1e4a      	subs	r2, r1, #1
   33ddc:	45b0      	cmp	r8, r6
   33dde:	d929      	bls.n	33e34 <__aeabi_ddiv+0x550>
   33de0:	0011      	movs	r1, r2
   33de2:	4286      	cmp	r6, r0
   33de4:	d000      	beq.n	33de8 <__aeabi_ddiv+0x504>
   33de6:	e765      	b.n	33cb4 <__aeabi_ddiv+0x3d0>
   33de8:	9a03      	ldr	r2, [sp, #12]
   33dea:	4293      	cmp	r3, r2
   33dec:	d000      	beq.n	33df0 <__aeabi_ddiv+0x50c>
   33dee:	e761      	b.n	33cb4 <__aeabi_ddiv+0x3d0>
   33df0:	e762      	b.n	33cb8 <__aeabi_ddiv+0x3d4>
   33df2:	2101      	movs	r1, #1
   33df4:	4249      	negs	r1, r1
   33df6:	2001      	movs	r0, #1
   33df8:	1ac2      	subs	r2, r0, r3
   33dfa:	2a38      	cmp	r2, #56	; 0x38
   33dfc:	dd21      	ble.n	33e42 <__aeabi_ddiv+0x55e>
   33dfe:	9b02      	ldr	r3, [sp, #8]
   33e00:	4003      	ands	r3, r0
   33e02:	469c      	mov	ip, r3
   33e04:	e638      	b.n	33a78 <__aeabi_ddiv+0x194>
   33e06:	220f      	movs	r2, #15
   33e08:	400a      	ands	r2, r1
   33e0a:	2a04      	cmp	r2, #4
   33e0c:	d100      	bne.n	33e10 <__aeabi_ddiv+0x52c>
   33e0e:	e75b      	b.n	33cc8 <__aeabi_ddiv+0x3e4>
   33e10:	000a      	movs	r2, r1
   33e12:	1d11      	adds	r1, r2, #4
   33e14:	4291      	cmp	r1, r2
   33e16:	4192      	sbcs	r2, r2
   33e18:	4252      	negs	r2, r2
   33e1a:	4493      	add	fp, r2
   33e1c:	e754      	b.n	33cc8 <__aeabi_ddiv+0x3e4>
   33e1e:	4b47      	ldr	r3, [pc, #284]	; (33f3c <__aeabi_ddiv+0x658>)
   33e20:	18e3      	adds	r3, r4, r3
   33e22:	2b00      	cmp	r3, #0
   33e24:	dde5      	ble.n	33df2 <__aeabi_ddiv+0x50e>
   33e26:	2201      	movs	r2, #1
   33e28:	4252      	negs	r2, r2
   33e2a:	e7f2      	b.n	33e12 <__aeabi_ddiv+0x52e>
   33e2c:	001d      	movs	r5, r3
   33e2e:	e6fa      	b.n	33c26 <__aeabi_ddiv+0x342>
   33e30:	469a      	mov	sl, r3
   33e32:	e71c      	b.n	33c6e <__aeabi_ddiv+0x38a>
   33e34:	42b0      	cmp	r0, r6
   33e36:	d839      	bhi.n	33eac <__aeabi_ddiv+0x5c8>
   33e38:	d06e      	beq.n	33f18 <__aeabi_ddiv+0x634>
   33e3a:	0011      	movs	r1, r2
   33e3c:	e73a      	b.n	33cb4 <__aeabi_ddiv+0x3d0>
   33e3e:	9302      	str	r3, [sp, #8]
   33e40:	e73a      	b.n	33cb8 <__aeabi_ddiv+0x3d4>
   33e42:	2a1f      	cmp	r2, #31
   33e44:	dc3c      	bgt.n	33ec0 <__aeabi_ddiv+0x5dc>
   33e46:	2320      	movs	r3, #32
   33e48:	1a9b      	subs	r3, r3, r2
   33e4a:	000c      	movs	r4, r1
   33e4c:	4658      	mov	r0, fp
   33e4e:	4099      	lsls	r1, r3
   33e50:	4098      	lsls	r0, r3
   33e52:	1e4b      	subs	r3, r1, #1
   33e54:	4199      	sbcs	r1, r3
   33e56:	465b      	mov	r3, fp
   33e58:	40d4      	lsrs	r4, r2
   33e5a:	40d3      	lsrs	r3, r2
   33e5c:	4320      	orrs	r0, r4
   33e5e:	4308      	orrs	r0, r1
   33e60:	001a      	movs	r2, r3
   33e62:	0743      	lsls	r3, r0, #29
   33e64:	d009      	beq.n	33e7a <__aeabi_ddiv+0x596>
   33e66:	230f      	movs	r3, #15
   33e68:	4003      	ands	r3, r0
   33e6a:	2b04      	cmp	r3, #4
   33e6c:	d005      	beq.n	33e7a <__aeabi_ddiv+0x596>
   33e6e:	0001      	movs	r1, r0
   33e70:	1d08      	adds	r0, r1, #4
   33e72:	4288      	cmp	r0, r1
   33e74:	419b      	sbcs	r3, r3
   33e76:	425b      	negs	r3, r3
   33e78:	18d2      	adds	r2, r2, r3
   33e7a:	0213      	lsls	r3, r2, #8
   33e7c:	d53a      	bpl.n	33ef4 <__aeabi_ddiv+0x610>
   33e7e:	2301      	movs	r3, #1
   33e80:	9a02      	ldr	r2, [sp, #8]
   33e82:	2401      	movs	r4, #1
   33e84:	401a      	ands	r2, r3
   33e86:	2300      	movs	r3, #0
   33e88:	4694      	mov	ip, r2
   33e8a:	4698      	mov	r8, r3
   33e8c:	2200      	movs	r2, #0
   33e8e:	e5f7      	b.n	33a80 <__aeabi_ddiv+0x19c>
   33e90:	2102      	movs	r1, #2
   33e92:	4249      	negs	r1, r1
   33e94:	468c      	mov	ip, r1
   33e96:	9d03      	ldr	r5, [sp, #12]
   33e98:	44e3      	add	fp, ip
   33e9a:	46ac      	mov	ip, r5
   33e9c:	44e2      	add	sl, ip
   33e9e:	45aa      	cmp	sl, r5
   33ea0:	41ad      	sbcs	r5, r5
   33ea2:	426d      	negs	r5, r5
   33ea4:	4445      	add	r5, r8
   33ea6:	18ed      	adds	r5, r5, r3
   33ea8:	1a2d      	subs	r5, r5, r0
   33eaa:	e696      	b.n	33bda <__aeabi_ddiv+0x2f6>
   33eac:	1e8a      	subs	r2, r1, #2
   33eae:	9903      	ldr	r1, [sp, #12]
   33eb0:	004d      	lsls	r5, r1, #1
   33eb2:	428d      	cmp	r5, r1
   33eb4:	4189      	sbcs	r1, r1
   33eb6:	4249      	negs	r1, r1
   33eb8:	4441      	add	r1, r8
   33eba:	1876      	adds	r6, r6, r1
   33ebc:	9503      	str	r5, [sp, #12]
   33ebe:	e78f      	b.n	33de0 <__aeabi_ddiv+0x4fc>
   33ec0:	201f      	movs	r0, #31
   33ec2:	4240      	negs	r0, r0
   33ec4:	1ac3      	subs	r3, r0, r3
   33ec6:	4658      	mov	r0, fp
   33ec8:	40d8      	lsrs	r0, r3
   33eca:	0003      	movs	r3, r0
   33ecc:	2a20      	cmp	r2, #32
   33ece:	d028      	beq.n	33f22 <__aeabi_ddiv+0x63e>
   33ed0:	2040      	movs	r0, #64	; 0x40
   33ed2:	465d      	mov	r5, fp
   33ed4:	1a82      	subs	r2, r0, r2
   33ed6:	4095      	lsls	r5, r2
   33ed8:	4329      	orrs	r1, r5
   33eda:	1e4a      	subs	r2, r1, #1
   33edc:	4191      	sbcs	r1, r2
   33ede:	4319      	orrs	r1, r3
   33ee0:	2307      	movs	r3, #7
   33ee2:	2200      	movs	r2, #0
   33ee4:	400b      	ands	r3, r1
   33ee6:	d009      	beq.n	33efc <__aeabi_ddiv+0x618>
   33ee8:	230f      	movs	r3, #15
   33eea:	2200      	movs	r2, #0
   33eec:	400b      	ands	r3, r1
   33eee:	0008      	movs	r0, r1
   33ef0:	2b04      	cmp	r3, #4
   33ef2:	d1bd      	bne.n	33e70 <__aeabi_ddiv+0x58c>
   33ef4:	0001      	movs	r1, r0
   33ef6:	0753      	lsls	r3, r2, #29
   33ef8:	0252      	lsls	r2, r2, #9
   33efa:	0b12      	lsrs	r2, r2, #12
   33efc:	08c9      	lsrs	r1, r1, #3
   33efe:	4319      	orrs	r1, r3
   33f00:	2301      	movs	r3, #1
   33f02:	4688      	mov	r8, r1
   33f04:	9902      	ldr	r1, [sp, #8]
   33f06:	2400      	movs	r4, #0
   33f08:	4019      	ands	r1, r3
   33f0a:	468c      	mov	ip, r1
   33f0c:	e5b8      	b.n	33a80 <__aeabi_ddiv+0x19c>
   33f0e:	4552      	cmp	r2, sl
   33f10:	d8be      	bhi.n	33e90 <__aeabi_ddiv+0x5ac>
   33f12:	468b      	mov	fp, r1
   33f14:	2500      	movs	r5, #0
   33f16:	e660      	b.n	33bda <__aeabi_ddiv+0x2f6>
   33f18:	9d03      	ldr	r5, [sp, #12]
   33f1a:	429d      	cmp	r5, r3
   33f1c:	d3c6      	bcc.n	33eac <__aeabi_ddiv+0x5c8>
   33f1e:	0011      	movs	r1, r2
   33f20:	e762      	b.n	33de8 <__aeabi_ddiv+0x504>
   33f22:	2500      	movs	r5, #0
   33f24:	e7d8      	b.n	33ed8 <__aeabi_ddiv+0x5f4>
   33f26:	2280      	movs	r2, #128	; 0x80
   33f28:	465b      	mov	r3, fp
   33f2a:	0312      	lsls	r2, r2, #12
   33f2c:	431a      	orrs	r2, r3
   33f2e:	9b01      	ldr	r3, [sp, #4]
   33f30:	0312      	lsls	r2, r2, #12
   33f32:	0b12      	lsrs	r2, r2, #12
   33f34:	469c      	mov	ip, r3
   33f36:	4688      	mov	r8, r1
   33f38:	4c03      	ldr	r4, [pc, #12]	; (33f48 <__aeabi_ddiv+0x664>)
   33f3a:	e5a1      	b.n	33a80 <__aeabi_ddiv+0x19c>
   33f3c:	000003ff 	.word	0x000003ff
   33f40:	feffffff 	.word	0xfeffffff
   33f44:	000007fe 	.word	0x000007fe
   33f48:	000007ff 	.word	0x000007ff

00033f4c <__aeabi_dmul>:
   33f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   33f4e:	4657      	mov	r7, sl
   33f50:	4645      	mov	r5, r8
   33f52:	46de      	mov	lr, fp
   33f54:	464e      	mov	r6, r9
   33f56:	b5e0      	push	{r5, r6, r7, lr}
   33f58:	030c      	lsls	r4, r1, #12
   33f5a:	4698      	mov	r8, r3
   33f5c:	004e      	lsls	r6, r1, #1
   33f5e:	0b23      	lsrs	r3, r4, #12
   33f60:	b087      	sub	sp, #28
   33f62:	0007      	movs	r7, r0
   33f64:	4692      	mov	sl, r2
   33f66:	469b      	mov	fp, r3
   33f68:	0d76      	lsrs	r6, r6, #21
   33f6a:	0fcd      	lsrs	r5, r1, #31
   33f6c:	2e00      	cmp	r6, #0
   33f6e:	d06b      	beq.n	34048 <__aeabi_dmul+0xfc>
   33f70:	4b6d      	ldr	r3, [pc, #436]	; (34128 <__aeabi_dmul+0x1dc>)
   33f72:	429e      	cmp	r6, r3
   33f74:	d035      	beq.n	33fe2 <__aeabi_dmul+0x96>
   33f76:	2480      	movs	r4, #128	; 0x80
   33f78:	465b      	mov	r3, fp
   33f7a:	0f42      	lsrs	r2, r0, #29
   33f7c:	0424      	lsls	r4, r4, #16
   33f7e:	00db      	lsls	r3, r3, #3
   33f80:	4314      	orrs	r4, r2
   33f82:	431c      	orrs	r4, r3
   33f84:	00c3      	lsls	r3, r0, #3
   33f86:	4699      	mov	r9, r3
   33f88:	4b68      	ldr	r3, [pc, #416]	; (3412c <__aeabi_dmul+0x1e0>)
   33f8a:	46a3      	mov	fp, r4
   33f8c:	469c      	mov	ip, r3
   33f8e:	2300      	movs	r3, #0
   33f90:	2700      	movs	r7, #0
   33f92:	4466      	add	r6, ip
   33f94:	9302      	str	r3, [sp, #8]
   33f96:	4643      	mov	r3, r8
   33f98:	031c      	lsls	r4, r3, #12
   33f9a:	005a      	lsls	r2, r3, #1
   33f9c:	0fdb      	lsrs	r3, r3, #31
   33f9e:	4650      	mov	r0, sl
   33fa0:	0b24      	lsrs	r4, r4, #12
   33fa2:	0d52      	lsrs	r2, r2, #21
   33fa4:	4698      	mov	r8, r3
   33fa6:	d100      	bne.n	33faa <__aeabi_dmul+0x5e>
   33fa8:	e076      	b.n	34098 <__aeabi_dmul+0x14c>
   33faa:	4b5f      	ldr	r3, [pc, #380]	; (34128 <__aeabi_dmul+0x1dc>)
   33fac:	429a      	cmp	r2, r3
   33fae:	d06d      	beq.n	3408c <__aeabi_dmul+0x140>
   33fb0:	2380      	movs	r3, #128	; 0x80
   33fb2:	0f41      	lsrs	r1, r0, #29
   33fb4:	041b      	lsls	r3, r3, #16
   33fb6:	430b      	orrs	r3, r1
   33fb8:	495c      	ldr	r1, [pc, #368]	; (3412c <__aeabi_dmul+0x1e0>)
   33fba:	00e4      	lsls	r4, r4, #3
   33fbc:	468c      	mov	ip, r1
   33fbe:	431c      	orrs	r4, r3
   33fc0:	00c3      	lsls	r3, r0, #3
   33fc2:	2000      	movs	r0, #0
   33fc4:	4462      	add	r2, ip
   33fc6:	4641      	mov	r1, r8
   33fc8:	18b6      	adds	r6, r6, r2
   33fca:	4069      	eors	r1, r5
   33fcc:	1c72      	adds	r2, r6, #1
   33fce:	9101      	str	r1, [sp, #4]
   33fd0:	4694      	mov	ip, r2
   33fd2:	4307      	orrs	r7, r0
   33fd4:	2f0f      	cmp	r7, #15
   33fd6:	d900      	bls.n	33fda <__aeabi_dmul+0x8e>
   33fd8:	e0b0      	b.n	3413c <__aeabi_dmul+0x1f0>
   33fda:	4a55      	ldr	r2, [pc, #340]	; (34130 <__aeabi_dmul+0x1e4>)
   33fdc:	00bf      	lsls	r7, r7, #2
   33fde:	59d2      	ldr	r2, [r2, r7]
   33fe0:	4697      	mov	pc, r2
   33fe2:	465b      	mov	r3, fp
   33fe4:	4303      	orrs	r3, r0
   33fe6:	4699      	mov	r9, r3
   33fe8:	d000      	beq.n	33fec <__aeabi_dmul+0xa0>
   33fea:	e087      	b.n	340fc <__aeabi_dmul+0x1b0>
   33fec:	2300      	movs	r3, #0
   33fee:	469b      	mov	fp, r3
   33ff0:	3302      	adds	r3, #2
   33ff2:	2708      	movs	r7, #8
   33ff4:	9302      	str	r3, [sp, #8]
   33ff6:	e7ce      	b.n	33f96 <__aeabi_dmul+0x4a>
   33ff8:	4642      	mov	r2, r8
   33ffa:	9201      	str	r2, [sp, #4]
   33ffc:	2802      	cmp	r0, #2
   33ffe:	d067      	beq.n	340d0 <__aeabi_dmul+0x184>
   34000:	2803      	cmp	r0, #3
   34002:	d100      	bne.n	34006 <__aeabi_dmul+0xba>
   34004:	e20e      	b.n	34424 <__aeabi_dmul+0x4d8>
   34006:	2801      	cmp	r0, #1
   34008:	d000      	beq.n	3400c <__aeabi_dmul+0xc0>
   3400a:	e162      	b.n	342d2 <__aeabi_dmul+0x386>
   3400c:	2300      	movs	r3, #0
   3400e:	2400      	movs	r4, #0
   34010:	2200      	movs	r2, #0
   34012:	4699      	mov	r9, r3
   34014:	9901      	ldr	r1, [sp, #4]
   34016:	4001      	ands	r1, r0
   34018:	b2cd      	uxtb	r5, r1
   3401a:	2100      	movs	r1, #0
   3401c:	0312      	lsls	r2, r2, #12
   3401e:	0d0b      	lsrs	r3, r1, #20
   34020:	0b12      	lsrs	r2, r2, #12
   34022:	051b      	lsls	r3, r3, #20
   34024:	4313      	orrs	r3, r2
   34026:	4a43      	ldr	r2, [pc, #268]	; (34134 <__aeabi_dmul+0x1e8>)
   34028:	0524      	lsls	r4, r4, #20
   3402a:	4013      	ands	r3, r2
   3402c:	431c      	orrs	r4, r3
   3402e:	0064      	lsls	r4, r4, #1
   34030:	07ed      	lsls	r5, r5, #31
   34032:	0864      	lsrs	r4, r4, #1
   34034:	432c      	orrs	r4, r5
   34036:	4648      	mov	r0, r9
   34038:	0021      	movs	r1, r4
   3403a:	b007      	add	sp, #28
   3403c:	bc3c      	pop	{r2, r3, r4, r5}
   3403e:	4690      	mov	r8, r2
   34040:	4699      	mov	r9, r3
   34042:	46a2      	mov	sl, r4
   34044:	46ab      	mov	fp, r5
   34046:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34048:	4303      	orrs	r3, r0
   3404a:	4699      	mov	r9, r3
   3404c:	d04f      	beq.n	340ee <__aeabi_dmul+0x1a2>
   3404e:	465b      	mov	r3, fp
   34050:	2b00      	cmp	r3, #0
   34052:	d100      	bne.n	34056 <__aeabi_dmul+0x10a>
   34054:	e189      	b.n	3436a <__aeabi_dmul+0x41e>
   34056:	4658      	mov	r0, fp
   34058:	f000 fd7a 	bl	34b50 <__clzsi2>
   3405c:	0003      	movs	r3, r0
   3405e:	3b0b      	subs	r3, #11
   34060:	2b1c      	cmp	r3, #28
   34062:	dd00      	ble.n	34066 <__aeabi_dmul+0x11a>
   34064:	e17a      	b.n	3435c <__aeabi_dmul+0x410>
   34066:	221d      	movs	r2, #29
   34068:	1ad3      	subs	r3, r2, r3
   3406a:	003a      	movs	r2, r7
   3406c:	0001      	movs	r1, r0
   3406e:	465c      	mov	r4, fp
   34070:	40da      	lsrs	r2, r3
   34072:	3908      	subs	r1, #8
   34074:	408c      	lsls	r4, r1
   34076:	0013      	movs	r3, r2
   34078:	408f      	lsls	r7, r1
   3407a:	4323      	orrs	r3, r4
   3407c:	469b      	mov	fp, r3
   3407e:	46b9      	mov	r9, r7
   34080:	2300      	movs	r3, #0
   34082:	4e2d      	ldr	r6, [pc, #180]	; (34138 <__aeabi_dmul+0x1ec>)
   34084:	2700      	movs	r7, #0
   34086:	1a36      	subs	r6, r6, r0
   34088:	9302      	str	r3, [sp, #8]
   3408a:	e784      	b.n	33f96 <__aeabi_dmul+0x4a>
   3408c:	4653      	mov	r3, sl
   3408e:	4323      	orrs	r3, r4
   34090:	d12a      	bne.n	340e8 <__aeabi_dmul+0x19c>
   34092:	2400      	movs	r4, #0
   34094:	2002      	movs	r0, #2
   34096:	e796      	b.n	33fc6 <__aeabi_dmul+0x7a>
   34098:	4653      	mov	r3, sl
   3409a:	4323      	orrs	r3, r4
   3409c:	d020      	beq.n	340e0 <__aeabi_dmul+0x194>
   3409e:	2c00      	cmp	r4, #0
   340a0:	d100      	bne.n	340a4 <__aeabi_dmul+0x158>
   340a2:	e157      	b.n	34354 <__aeabi_dmul+0x408>
   340a4:	0020      	movs	r0, r4
   340a6:	f000 fd53 	bl	34b50 <__clzsi2>
   340aa:	0003      	movs	r3, r0
   340ac:	3b0b      	subs	r3, #11
   340ae:	2b1c      	cmp	r3, #28
   340b0:	dd00      	ble.n	340b4 <__aeabi_dmul+0x168>
   340b2:	e149      	b.n	34348 <__aeabi_dmul+0x3fc>
   340b4:	211d      	movs	r1, #29
   340b6:	1acb      	subs	r3, r1, r3
   340b8:	4651      	mov	r1, sl
   340ba:	0002      	movs	r2, r0
   340bc:	40d9      	lsrs	r1, r3
   340be:	4653      	mov	r3, sl
   340c0:	3a08      	subs	r2, #8
   340c2:	4094      	lsls	r4, r2
   340c4:	4093      	lsls	r3, r2
   340c6:	430c      	orrs	r4, r1
   340c8:	4a1b      	ldr	r2, [pc, #108]	; (34138 <__aeabi_dmul+0x1ec>)
   340ca:	1a12      	subs	r2, r2, r0
   340cc:	2000      	movs	r0, #0
   340ce:	e77a      	b.n	33fc6 <__aeabi_dmul+0x7a>
   340d0:	2501      	movs	r5, #1
   340d2:	9b01      	ldr	r3, [sp, #4]
   340d4:	4c14      	ldr	r4, [pc, #80]	; (34128 <__aeabi_dmul+0x1dc>)
   340d6:	401d      	ands	r5, r3
   340d8:	2300      	movs	r3, #0
   340da:	2200      	movs	r2, #0
   340dc:	4699      	mov	r9, r3
   340de:	e79c      	b.n	3401a <__aeabi_dmul+0xce>
   340e0:	2400      	movs	r4, #0
   340e2:	2200      	movs	r2, #0
   340e4:	2001      	movs	r0, #1
   340e6:	e76e      	b.n	33fc6 <__aeabi_dmul+0x7a>
   340e8:	4653      	mov	r3, sl
   340ea:	2003      	movs	r0, #3
   340ec:	e76b      	b.n	33fc6 <__aeabi_dmul+0x7a>
   340ee:	2300      	movs	r3, #0
   340f0:	469b      	mov	fp, r3
   340f2:	3301      	adds	r3, #1
   340f4:	2704      	movs	r7, #4
   340f6:	2600      	movs	r6, #0
   340f8:	9302      	str	r3, [sp, #8]
   340fa:	e74c      	b.n	33f96 <__aeabi_dmul+0x4a>
   340fc:	2303      	movs	r3, #3
   340fe:	4681      	mov	r9, r0
   34100:	270c      	movs	r7, #12
   34102:	9302      	str	r3, [sp, #8]
   34104:	e747      	b.n	33f96 <__aeabi_dmul+0x4a>
   34106:	2280      	movs	r2, #128	; 0x80
   34108:	2300      	movs	r3, #0
   3410a:	2500      	movs	r5, #0
   3410c:	0312      	lsls	r2, r2, #12
   3410e:	4699      	mov	r9, r3
   34110:	4c05      	ldr	r4, [pc, #20]	; (34128 <__aeabi_dmul+0x1dc>)
   34112:	e782      	b.n	3401a <__aeabi_dmul+0xce>
   34114:	465c      	mov	r4, fp
   34116:	464b      	mov	r3, r9
   34118:	9802      	ldr	r0, [sp, #8]
   3411a:	e76f      	b.n	33ffc <__aeabi_dmul+0xb0>
   3411c:	465c      	mov	r4, fp
   3411e:	464b      	mov	r3, r9
   34120:	9501      	str	r5, [sp, #4]
   34122:	9802      	ldr	r0, [sp, #8]
   34124:	e76a      	b.n	33ffc <__aeabi_dmul+0xb0>
   34126:	46c0      	nop			; (mov r8, r8)
   34128:	000007ff 	.word	0x000007ff
   3412c:	fffffc01 	.word	0xfffffc01
   34130:	0003a2c8 	.word	0x0003a2c8
   34134:	800fffff 	.word	0x800fffff
   34138:	fffffc0d 	.word	0xfffffc0d
   3413c:	464a      	mov	r2, r9
   3413e:	4649      	mov	r1, r9
   34140:	0c17      	lsrs	r7, r2, #16
   34142:	0c1a      	lsrs	r2, r3, #16
   34144:	041b      	lsls	r3, r3, #16
   34146:	0c1b      	lsrs	r3, r3, #16
   34148:	0408      	lsls	r0, r1, #16
   3414a:	0019      	movs	r1, r3
   3414c:	0c00      	lsrs	r0, r0, #16
   3414e:	4341      	muls	r1, r0
   34150:	0015      	movs	r5, r2
   34152:	4688      	mov	r8, r1
   34154:	0019      	movs	r1, r3
   34156:	437d      	muls	r5, r7
   34158:	4379      	muls	r1, r7
   3415a:	9503      	str	r5, [sp, #12]
   3415c:	4689      	mov	r9, r1
   3415e:	0029      	movs	r1, r5
   34160:	0015      	movs	r5, r2
   34162:	4345      	muls	r5, r0
   34164:	444d      	add	r5, r9
   34166:	9502      	str	r5, [sp, #8]
   34168:	4645      	mov	r5, r8
   3416a:	0c2d      	lsrs	r5, r5, #16
   3416c:	46aa      	mov	sl, r5
   3416e:	9d02      	ldr	r5, [sp, #8]
   34170:	4455      	add	r5, sl
   34172:	45a9      	cmp	r9, r5
   34174:	d906      	bls.n	34184 <__aeabi_dmul+0x238>
   34176:	468a      	mov	sl, r1
   34178:	2180      	movs	r1, #128	; 0x80
   3417a:	0249      	lsls	r1, r1, #9
   3417c:	4689      	mov	r9, r1
   3417e:	44ca      	add	sl, r9
   34180:	4651      	mov	r1, sl
   34182:	9103      	str	r1, [sp, #12]
   34184:	0c29      	lsrs	r1, r5, #16
   34186:	9104      	str	r1, [sp, #16]
   34188:	4641      	mov	r1, r8
   3418a:	0409      	lsls	r1, r1, #16
   3418c:	042d      	lsls	r5, r5, #16
   3418e:	0c09      	lsrs	r1, r1, #16
   34190:	4688      	mov	r8, r1
   34192:	0029      	movs	r1, r5
   34194:	0c25      	lsrs	r5, r4, #16
   34196:	0424      	lsls	r4, r4, #16
   34198:	4441      	add	r1, r8
   3419a:	0c24      	lsrs	r4, r4, #16
   3419c:	9105      	str	r1, [sp, #20]
   3419e:	0021      	movs	r1, r4
   341a0:	4341      	muls	r1, r0
   341a2:	4688      	mov	r8, r1
   341a4:	0021      	movs	r1, r4
   341a6:	4379      	muls	r1, r7
   341a8:	468a      	mov	sl, r1
   341aa:	4368      	muls	r0, r5
   341ac:	4641      	mov	r1, r8
   341ae:	4450      	add	r0, sl
   341b0:	4681      	mov	r9, r0
   341b2:	0c08      	lsrs	r0, r1, #16
   341b4:	4448      	add	r0, r9
   341b6:	436f      	muls	r7, r5
   341b8:	4582      	cmp	sl, r0
   341ba:	d903      	bls.n	341c4 <__aeabi_dmul+0x278>
   341bc:	2180      	movs	r1, #128	; 0x80
   341be:	0249      	lsls	r1, r1, #9
   341c0:	4689      	mov	r9, r1
   341c2:	444f      	add	r7, r9
   341c4:	0c01      	lsrs	r1, r0, #16
   341c6:	4689      	mov	r9, r1
   341c8:	0039      	movs	r1, r7
   341ca:	4449      	add	r1, r9
   341cc:	9102      	str	r1, [sp, #8]
   341ce:	4641      	mov	r1, r8
   341d0:	040f      	lsls	r7, r1, #16
   341d2:	9904      	ldr	r1, [sp, #16]
   341d4:	0c3f      	lsrs	r7, r7, #16
   341d6:	4688      	mov	r8, r1
   341d8:	0400      	lsls	r0, r0, #16
   341da:	19c0      	adds	r0, r0, r7
   341dc:	4480      	add	r8, r0
   341de:	4641      	mov	r1, r8
   341e0:	9104      	str	r1, [sp, #16]
   341e2:	4659      	mov	r1, fp
   341e4:	0c0f      	lsrs	r7, r1, #16
   341e6:	0409      	lsls	r1, r1, #16
   341e8:	0c09      	lsrs	r1, r1, #16
   341ea:	4688      	mov	r8, r1
   341ec:	4359      	muls	r1, r3
   341ee:	468a      	mov	sl, r1
   341f0:	0039      	movs	r1, r7
   341f2:	4351      	muls	r1, r2
   341f4:	4689      	mov	r9, r1
   341f6:	4641      	mov	r1, r8
   341f8:	434a      	muls	r2, r1
   341fa:	4651      	mov	r1, sl
   341fc:	0c09      	lsrs	r1, r1, #16
   341fe:	468b      	mov	fp, r1
   34200:	437b      	muls	r3, r7
   34202:	18d2      	adds	r2, r2, r3
   34204:	445a      	add	r2, fp
   34206:	4293      	cmp	r3, r2
   34208:	d903      	bls.n	34212 <__aeabi_dmul+0x2c6>
   3420a:	2380      	movs	r3, #128	; 0x80
   3420c:	025b      	lsls	r3, r3, #9
   3420e:	469b      	mov	fp, r3
   34210:	44d9      	add	r9, fp
   34212:	4651      	mov	r1, sl
   34214:	0409      	lsls	r1, r1, #16
   34216:	0c09      	lsrs	r1, r1, #16
   34218:	468a      	mov	sl, r1
   3421a:	4641      	mov	r1, r8
   3421c:	4361      	muls	r1, r4
   3421e:	437c      	muls	r4, r7
   34220:	0c13      	lsrs	r3, r2, #16
   34222:	0412      	lsls	r2, r2, #16
   34224:	444b      	add	r3, r9
   34226:	4452      	add	r2, sl
   34228:	46a1      	mov	r9, r4
   3422a:	468a      	mov	sl, r1
   3422c:	003c      	movs	r4, r7
   3422e:	4641      	mov	r1, r8
   34230:	436c      	muls	r4, r5
   34232:	434d      	muls	r5, r1
   34234:	4651      	mov	r1, sl
   34236:	444d      	add	r5, r9
   34238:	0c0f      	lsrs	r7, r1, #16
   3423a:	197d      	adds	r5, r7, r5
   3423c:	45a9      	cmp	r9, r5
   3423e:	d903      	bls.n	34248 <__aeabi_dmul+0x2fc>
   34240:	2180      	movs	r1, #128	; 0x80
   34242:	0249      	lsls	r1, r1, #9
   34244:	4688      	mov	r8, r1
   34246:	4444      	add	r4, r8
   34248:	9f04      	ldr	r7, [sp, #16]
   3424a:	9903      	ldr	r1, [sp, #12]
   3424c:	46b8      	mov	r8, r7
   3424e:	4441      	add	r1, r8
   34250:	468b      	mov	fp, r1
   34252:	4583      	cmp	fp, r0
   34254:	4180      	sbcs	r0, r0
   34256:	4241      	negs	r1, r0
   34258:	4688      	mov	r8, r1
   3425a:	4651      	mov	r1, sl
   3425c:	0408      	lsls	r0, r1, #16
   3425e:	042f      	lsls	r7, r5, #16
   34260:	0c00      	lsrs	r0, r0, #16
   34262:	183f      	adds	r7, r7, r0
   34264:	4658      	mov	r0, fp
   34266:	9902      	ldr	r1, [sp, #8]
   34268:	1810      	adds	r0, r2, r0
   3426a:	4689      	mov	r9, r1
   3426c:	4290      	cmp	r0, r2
   3426e:	4192      	sbcs	r2, r2
   34270:	444f      	add	r7, r9
   34272:	46ba      	mov	sl, r7
   34274:	4252      	negs	r2, r2
   34276:	4699      	mov	r9, r3
   34278:	4693      	mov	fp, r2
   3427a:	44c2      	add	sl, r8
   3427c:	44d1      	add	r9, sl
   3427e:	44cb      	add	fp, r9
   34280:	428f      	cmp	r7, r1
   34282:	41bf      	sbcs	r7, r7
   34284:	45c2      	cmp	sl, r8
   34286:	4189      	sbcs	r1, r1
   34288:	4599      	cmp	r9, r3
   3428a:	419b      	sbcs	r3, r3
   3428c:	4593      	cmp	fp, r2
   3428e:	4192      	sbcs	r2, r2
   34290:	427f      	negs	r7, r7
   34292:	4249      	negs	r1, r1
   34294:	0c2d      	lsrs	r5, r5, #16
   34296:	4252      	negs	r2, r2
   34298:	430f      	orrs	r7, r1
   3429a:	425b      	negs	r3, r3
   3429c:	4313      	orrs	r3, r2
   3429e:	197f      	adds	r7, r7, r5
   342a0:	18ff      	adds	r7, r7, r3
   342a2:	465b      	mov	r3, fp
   342a4:	193c      	adds	r4, r7, r4
   342a6:	0ddb      	lsrs	r3, r3, #23
   342a8:	9a05      	ldr	r2, [sp, #20]
   342aa:	0264      	lsls	r4, r4, #9
   342ac:	431c      	orrs	r4, r3
   342ae:	0243      	lsls	r3, r0, #9
   342b0:	4313      	orrs	r3, r2
   342b2:	1e5d      	subs	r5, r3, #1
   342b4:	41ab      	sbcs	r3, r5
   342b6:	465a      	mov	r2, fp
   342b8:	0dc0      	lsrs	r0, r0, #23
   342ba:	4303      	orrs	r3, r0
   342bc:	0252      	lsls	r2, r2, #9
   342be:	4313      	orrs	r3, r2
   342c0:	01e2      	lsls	r2, r4, #7
   342c2:	d556      	bpl.n	34372 <__aeabi_dmul+0x426>
   342c4:	2001      	movs	r0, #1
   342c6:	085a      	lsrs	r2, r3, #1
   342c8:	4003      	ands	r3, r0
   342ca:	4313      	orrs	r3, r2
   342cc:	07e2      	lsls	r2, r4, #31
   342ce:	4313      	orrs	r3, r2
   342d0:	0864      	lsrs	r4, r4, #1
   342d2:	485a      	ldr	r0, [pc, #360]	; (3443c <__aeabi_dmul+0x4f0>)
   342d4:	4460      	add	r0, ip
   342d6:	2800      	cmp	r0, #0
   342d8:	dd4d      	ble.n	34376 <__aeabi_dmul+0x42a>
   342da:	075a      	lsls	r2, r3, #29
   342dc:	d009      	beq.n	342f2 <__aeabi_dmul+0x3a6>
   342de:	220f      	movs	r2, #15
   342e0:	401a      	ands	r2, r3
   342e2:	2a04      	cmp	r2, #4
   342e4:	d005      	beq.n	342f2 <__aeabi_dmul+0x3a6>
   342e6:	1d1a      	adds	r2, r3, #4
   342e8:	429a      	cmp	r2, r3
   342ea:	419b      	sbcs	r3, r3
   342ec:	425b      	negs	r3, r3
   342ee:	18e4      	adds	r4, r4, r3
   342f0:	0013      	movs	r3, r2
   342f2:	01e2      	lsls	r2, r4, #7
   342f4:	d504      	bpl.n	34300 <__aeabi_dmul+0x3b4>
   342f6:	2080      	movs	r0, #128	; 0x80
   342f8:	4a51      	ldr	r2, [pc, #324]	; (34440 <__aeabi_dmul+0x4f4>)
   342fa:	00c0      	lsls	r0, r0, #3
   342fc:	4014      	ands	r4, r2
   342fe:	4460      	add	r0, ip
   34300:	4a50      	ldr	r2, [pc, #320]	; (34444 <__aeabi_dmul+0x4f8>)
   34302:	4290      	cmp	r0, r2
   34304:	dd00      	ble.n	34308 <__aeabi_dmul+0x3bc>
   34306:	e6e3      	b.n	340d0 <__aeabi_dmul+0x184>
   34308:	2501      	movs	r5, #1
   3430a:	08db      	lsrs	r3, r3, #3
   3430c:	0762      	lsls	r2, r4, #29
   3430e:	431a      	orrs	r2, r3
   34310:	0264      	lsls	r4, r4, #9
   34312:	9b01      	ldr	r3, [sp, #4]
   34314:	4691      	mov	r9, r2
   34316:	0b22      	lsrs	r2, r4, #12
   34318:	0544      	lsls	r4, r0, #21
   3431a:	0d64      	lsrs	r4, r4, #21
   3431c:	401d      	ands	r5, r3
   3431e:	e67c      	b.n	3401a <__aeabi_dmul+0xce>
   34320:	2280      	movs	r2, #128	; 0x80
   34322:	4659      	mov	r1, fp
   34324:	0312      	lsls	r2, r2, #12
   34326:	4211      	tst	r1, r2
   34328:	d008      	beq.n	3433c <__aeabi_dmul+0x3f0>
   3432a:	4214      	tst	r4, r2
   3432c:	d106      	bne.n	3433c <__aeabi_dmul+0x3f0>
   3432e:	4322      	orrs	r2, r4
   34330:	0312      	lsls	r2, r2, #12
   34332:	0b12      	lsrs	r2, r2, #12
   34334:	4645      	mov	r5, r8
   34336:	4699      	mov	r9, r3
   34338:	4c43      	ldr	r4, [pc, #268]	; (34448 <__aeabi_dmul+0x4fc>)
   3433a:	e66e      	b.n	3401a <__aeabi_dmul+0xce>
   3433c:	465b      	mov	r3, fp
   3433e:	431a      	orrs	r2, r3
   34340:	0312      	lsls	r2, r2, #12
   34342:	0b12      	lsrs	r2, r2, #12
   34344:	4c40      	ldr	r4, [pc, #256]	; (34448 <__aeabi_dmul+0x4fc>)
   34346:	e668      	b.n	3401a <__aeabi_dmul+0xce>
   34348:	0003      	movs	r3, r0
   3434a:	4654      	mov	r4, sl
   3434c:	3b28      	subs	r3, #40	; 0x28
   3434e:	409c      	lsls	r4, r3
   34350:	2300      	movs	r3, #0
   34352:	e6b9      	b.n	340c8 <__aeabi_dmul+0x17c>
   34354:	f000 fbfc 	bl	34b50 <__clzsi2>
   34358:	3020      	adds	r0, #32
   3435a:	e6a6      	b.n	340aa <__aeabi_dmul+0x15e>
   3435c:	0003      	movs	r3, r0
   3435e:	3b28      	subs	r3, #40	; 0x28
   34360:	409f      	lsls	r7, r3
   34362:	2300      	movs	r3, #0
   34364:	46bb      	mov	fp, r7
   34366:	4699      	mov	r9, r3
   34368:	e68a      	b.n	34080 <__aeabi_dmul+0x134>
   3436a:	f000 fbf1 	bl	34b50 <__clzsi2>
   3436e:	3020      	adds	r0, #32
   34370:	e674      	b.n	3405c <__aeabi_dmul+0x110>
   34372:	46b4      	mov	ip, r6
   34374:	e7ad      	b.n	342d2 <__aeabi_dmul+0x386>
   34376:	2501      	movs	r5, #1
   34378:	1a2a      	subs	r2, r5, r0
   3437a:	2a38      	cmp	r2, #56	; 0x38
   3437c:	dd06      	ble.n	3438c <__aeabi_dmul+0x440>
   3437e:	9b01      	ldr	r3, [sp, #4]
   34380:	2400      	movs	r4, #0
   34382:	401d      	ands	r5, r3
   34384:	2300      	movs	r3, #0
   34386:	2200      	movs	r2, #0
   34388:	4699      	mov	r9, r3
   3438a:	e646      	b.n	3401a <__aeabi_dmul+0xce>
   3438c:	2a1f      	cmp	r2, #31
   3438e:	dc21      	bgt.n	343d4 <__aeabi_dmul+0x488>
   34390:	2520      	movs	r5, #32
   34392:	0020      	movs	r0, r4
   34394:	1aad      	subs	r5, r5, r2
   34396:	001e      	movs	r6, r3
   34398:	40ab      	lsls	r3, r5
   3439a:	40a8      	lsls	r0, r5
   3439c:	40d6      	lsrs	r6, r2
   3439e:	1e5d      	subs	r5, r3, #1
   343a0:	41ab      	sbcs	r3, r5
   343a2:	4330      	orrs	r0, r6
   343a4:	4318      	orrs	r0, r3
   343a6:	40d4      	lsrs	r4, r2
   343a8:	0743      	lsls	r3, r0, #29
   343aa:	d009      	beq.n	343c0 <__aeabi_dmul+0x474>
   343ac:	230f      	movs	r3, #15
   343ae:	4003      	ands	r3, r0
   343b0:	2b04      	cmp	r3, #4
   343b2:	d005      	beq.n	343c0 <__aeabi_dmul+0x474>
   343b4:	0003      	movs	r3, r0
   343b6:	1d18      	adds	r0, r3, #4
   343b8:	4298      	cmp	r0, r3
   343ba:	419b      	sbcs	r3, r3
   343bc:	425b      	negs	r3, r3
   343be:	18e4      	adds	r4, r4, r3
   343c0:	0223      	lsls	r3, r4, #8
   343c2:	d521      	bpl.n	34408 <__aeabi_dmul+0x4bc>
   343c4:	2501      	movs	r5, #1
   343c6:	9b01      	ldr	r3, [sp, #4]
   343c8:	2401      	movs	r4, #1
   343ca:	401d      	ands	r5, r3
   343cc:	2300      	movs	r3, #0
   343ce:	2200      	movs	r2, #0
   343d0:	4699      	mov	r9, r3
   343d2:	e622      	b.n	3401a <__aeabi_dmul+0xce>
   343d4:	251f      	movs	r5, #31
   343d6:	0021      	movs	r1, r4
   343d8:	426d      	negs	r5, r5
   343da:	1a28      	subs	r0, r5, r0
   343dc:	40c1      	lsrs	r1, r0
   343de:	0008      	movs	r0, r1
   343e0:	2a20      	cmp	r2, #32
   343e2:	d01d      	beq.n	34420 <__aeabi_dmul+0x4d4>
   343e4:	355f      	adds	r5, #95	; 0x5f
   343e6:	1aaa      	subs	r2, r5, r2
   343e8:	4094      	lsls	r4, r2
   343ea:	4323      	orrs	r3, r4
   343ec:	1e5c      	subs	r4, r3, #1
   343ee:	41a3      	sbcs	r3, r4
   343f0:	2507      	movs	r5, #7
   343f2:	4303      	orrs	r3, r0
   343f4:	401d      	ands	r5, r3
   343f6:	2200      	movs	r2, #0
   343f8:	2d00      	cmp	r5, #0
   343fa:	d009      	beq.n	34410 <__aeabi_dmul+0x4c4>
   343fc:	220f      	movs	r2, #15
   343fe:	2400      	movs	r4, #0
   34400:	401a      	ands	r2, r3
   34402:	0018      	movs	r0, r3
   34404:	2a04      	cmp	r2, #4
   34406:	d1d6      	bne.n	343b6 <__aeabi_dmul+0x46a>
   34408:	0003      	movs	r3, r0
   3440a:	0765      	lsls	r5, r4, #29
   3440c:	0264      	lsls	r4, r4, #9
   3440e:	0b22      	lsrs	r2, r4, #12
   34410:	08db      	lsrs	r3, r3, #3
   34412:	432b      	orrs	r3, r5
   34414:	2501      	movs	r5, #1
   34416:	4699      	mov	r9, r3
   34418:	9b01      	ldr	r3, [sp, #4]
   3441a:	2400      	movs	r4, #0
   3441c:	401d      	ands	r5, r3
   3441e:	e5fc      	b.n	3401a <__aeabi_dmul+0xce>
   34420:	2400      	movs	r4, #0
   34422:	e7e2      	b.n	343ea <__aeabi_dmul+0x49e>
   34424:	2280      	movs	r2, #128	; 0x80
   34426:	2501      	movs	r5, #1
   34428:	0312      	lsls	r2, r2, #12
   3442a:	4322      	orrs	r2, r4
   3442c:	9901      	ldr	r1, [sp, #4]
   3442e:	0312      	lsls	r2, r2, #12
   34430:	0b12      	lsrs	r2, r2, #12
   34432:	400d      	ands	r5, r1
   34434:	4699      	mov	r9, r3
   34436:	4c04      	ldr	r4, [pc, #16]	; (34448 <__aeabi_dmul+0x4fc>)
   34438:	e5ef      	b.n	3401a <__aeabi_dmul+0xce>
   3443a:	46c0      	nop			; (mov r8, r8)
   3443c:	000003ff 	.word	0x000003ff
   34440:	feffffff 	.word	0xfeffffff
   34444:	000007fe 	.word	0x000007fe
   34448:	000007ff 	.word	0x000007ff

0003444c <__aeabi_dsub>:
   3444c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3444e:	4646      	mov	r6, r8
   34450:	46d6      	mov	lr, sl
   34452:	464f      	mov	r7, r9
   34454:	030c      	lsls	r4, r1, #12
   34456:	b5c0      	push	{r6, r7, lr}
   34458:	0fcd      	lsrs	r5, r1, #31
   3445a:	004e      	lsls	r6, r1, #1
   3445c:	0a61      	lsrs	r1, r4, #9
   3445e:	0f44      	lsrs	r4, r0, #29
   34460:	430c      	orrs	r4, r1
   34462:	00c1      	lsls	r1, r0, #3
   34464:	0058      	lsls	r0, r3, #1
   34466:	0d40      	lsrs	r0, r0, #21
   34468:	4684      	mov	ip, r0
   3446a:	468a      	mov	sl, r1
   3446c:	000f      	movs	r7, r1
   3446e:	0319      	lsls	r1, r3, #12
   34470:	0f50      	lsrs	r0, r2, #29
   34472:	0a49      	lsrs	r1, r1, #9
   34474:	4301      	orrs	r1, r0
   34476:	48c6      	ldr	r0, [pc, #792]	; (34790 <__aeabi_dsub+0x344>)
   34478:	0d76      	lsrs	r6, r6, #21
   3447a:	46a8      	mov	r8, r5
   3447c:	0fdb      	lsrs	r3, r3, #31
   3447e:	00d2      	lsls	r2, r2, #3
   34480:	4584      	cmp	ip, r0
   34482:	d100      	bne.n	34486 <__aeabi_dsub+0x3a>
   34484:	e0d8      	b.n	34638 <__aeabi_dsub+0x1ec>
   34486:	2001      	movs	r0, #1
   34488:	4043      	eors	r3, r0
   3448a:	42ab      	cmp	r3, r5
   3448c:	d100      	bne.n	34490 <__aeabi_dsub+0x44>
   3448e:	e0a6      	b.n	345de <__aeabi_dsub+0x192>
   34490:	4660      	mov	r0, ip
   34492:	1a35      	subs	r5, r6, r0
   34494:	2d00      	cmp	r5, #0
   34496:	dc00      	bgt.n	3449a <__aeabi_dsub+0x4e>
   34498:	e105      	b.n	346a6 <__aeabi_dsub+0x25a>
   3449a:	2800      	cmp	r0, #0
   3449c:	d110      	bne.n	344c0 <__aeabi_dsub+0x74>
   3449e:	000b      	movs	r3, r1
   344a0:	4313      	orrs	r3, r2
   344a2:	d100      	bne.n	344a6 <__aeabi_dsub+0x5a>
   344a4:	e0d7      	b.n	34656 <__aeabi_dsub+0x20a>
   344a6:	1e6b      	subs	r3, r5, #1
   344a8:	2b00      	cmp	r3, #0
   344aa:	d000      	beq.n	344ae <__aeabi_dsub+0x62>
   344ac:	e14b      	b.n	34746 <__aeabi_dsub+0x2fa>
   344ae:	4653      	mov	r3, sl
   344b0:	1a9f      	subs	r7, r3, r2
   344b2:	45ba      	cmp	sl, r7
   344b4:	4180      	sbcs	r0, r0
   344b6:	1a64      	subs	r4, r4, r1
   344b8:	4240      	negs	r0, r0
   344ba:	1a24      	subs	r4, r4, r0
   344bc:	2601      	movs	r6, #1
   344be:	e01e      	b.n	344fe <__aeabi_dsub+0xb2>
   344c0:	4bb3      	ldr	r3, [pc, #716]	; (34790 <__aeabi_dsub+0x344>)
   344c2:	429e      	cmp	r6, r3
   344c4:	d048      	beq.n	34558 <__aeabi_dsub+0x10c>
   344c6:	2380      	movs	r3, #128	; 0x80
   344c8:	041b      	lsls	r3, r3, #16
   344ca:	4319      	orrs	r1, r3
   344cc:	2d38      	cmp	r5, #56	; 0x38
   344ce:	dd00      	ble.n	344d2 <__aeabi_dsub+0x86>
   344d0:	e119      	b.n	34706 <__aeabi_dsub+0x2ba>
   344d2:	2d1f      	cmp	r5, #31
   344d4:	dd00      	ble.n	344d8 <__aeabi_dsub+0x8c>
   344d6:	e14c      	b.n	34772 <__aeabi_dsub+0x326>
   344d8:	2320      	movs	r3, #32
   344da:	000f      	movs	r7, r1
   344dc:	1b5b      	subs	r3, r3, r5
   344de:	0010      	movs	r0, r2
   344e0:	409a      	lsls	r2, r3
   344e2:	409f      	lsls	r7, r3
   344e4:	40e8      	lsrs	r0, r5
   344e6:	1e53      	subs	r3, r2, #1
   344e8:	419a      	sbcs	r2, r3
   344ea:	40e9      	lsrs	r1, r5
   344ec:	4307      	orrs	r7, r0
   344ee:	4317      	orrs	r7, r2
   344f0:	4653      	mov	r3, sl
   344f2:	1bdf      	subs	r7, r3, r7
   344f4:	1a61      	subs	r1, r4, r1
   344f6:	45ba      	cmp	sl, r7
   344f8:	41a4      	sbcs	r4, r4
   344fa:	4264      	negs	r4, r4
   344fc:	1b0c      	subs	r4, r1, r4
   344fe:	0223      	lsls	r3, r4, #8
   34500:	d400      	bmi.n	34504 <__aeabi_dsub+0xb8>
   34502:	e0c5      	b.n	34690 <__aeabi_dsub+0x244>
   34504:	0264      	lsls	r4, r4, #9
   34506:	0a65      	lsrs	r5, r4, #9
   34508:	2d00      	cmp	r5, #0
   3450a:	d100      	bne.n	3450e <__aeabi_dsub+0xc2>
   3450c:	e0f6      	b.n	346fc <__aeabi_dsub+0x2b0>
   3450e:	0028      	movs	r0, r5
   34510:	f000 fb1e 	bl	34b50 <__clzsi2>
   34514:	0003      	movs	r3, r0
   34516:	3b08      	subs	r3, #8
   34518:	2b1f      	cmp	r3, #31
   3451a:	dd00      	ble.n	3451e <__aeabi_dsub+0xd2>
   3451c:	e0e9      	b.n	346f2 <__aeabi_dsub+0x2a6>
   3451e:	2220      	movs	r2, #32
   34520:	003c      	movs	r4, r7
   34522:	1ad2      	subs	r2, r2, r3
   34524:	409d      	lsls	r5, r3
   34526:	40d4      	lsrs	r4, r2
   34528:	409f      	lsls	r7, r3
   3452a:	4325      	orrs	r5, r4
   3452c:	429e      	cmp	r6, r3
   3452e:	dd00      	ble.n	34532 <__aeabi_dsub+0xe6>
   34530:	e0db      	b.n	346ea <__aeabi_dsub+0x29e>
   34532:	1b9e      	subs	r6, r3, r6
   34534:	1c73      	adds	r3, r6, #1
   34536:	2b1f      	cmp	r3, #31
   34538:	dd00      	ble.n	3453c <__aeabi_dsub+0xf0>
   3453a:	e10a      	b.n	34752 <__aeabi_dsub+0x306>
   3453c:	2220      	movs	r2, #32
   3453e:	0038      	movs	r0, r7
   34540:	1ad2      	subs	r2, r2, r3
   34542:	0029      	movs	r1, r5
   34544:	4097      	lsls	r7, r2
   34546:	002c      	movs	r4, r5
   34548:	4091      	lsls	r1, r2
   3454a:	40d8      	lsrs	r0, r3
   3454c:	1e7a      	subs	r2, r7, #1
   3454e:	4197      	sbcs	r7, r2
   34550:	40dc      	lsrs	r4, r3
   34552:	2600      	movs	r6, #0
   34554:	4301      	orrs	r1, r0
   34556:	430f      	orrs	r7, r1
   34558:	077b      	lsls	r3, r7, #29
   3455a:	d009      	beq.n	34570 <__aeabi_dsub+0x124>
   3455c:	230f      	movs	r3, #15
   3455e:	403b      	ands	r3, r7
   34560:	2b04      	cmp	r3, #4
   34562:	d005      	beq.n	34570 <__aeabi_dsub+0x124>
   34564:	1d3b      	adds	r3, r7, #4
   34566:	42bb      	cmp	r3, r7
   34568:	41bf      	sbcs	r7, r7
   3456a:	427f      	negs	r7, r7
   3456c:	19e4      	adds	r4, r4, r7
   3456e:	001f      	movs	r7, r3
   34570:	0223      	lsls	r3, r4, #8
   34572:	d525      	bpl.n	345c0 <__aeabi_dsub+0x174>
   34574:	4b86      	ldr	r3, [pc, #536]	; (34790 <__aeabi_dsub+0x344>)
   34576:	3601      	adds	r6, #1
   34578:	429e      	cmp	r6, r3
   3457a:	d100      	bne.n	3457e <__aeabi_dsub+0x132>
   3457c:	e0af      	b.n	346de <__aeabi_dsub+0x292>
   3457e:	4b85      	ldr	r3, [pc, #532]	; (34794 <__aeabi_dsub+0x348>)
   34580:	2501      	movs	r5, #1
   34582:	401c      	ands	r4, r3
   34584:	4643      	mov	r3, r8
   34586:	0762      	lsls	r2, r4, #29
   34588:	08ff      	lsrs	r7, r7, #3
   3458a:	0264      	lsls	r4, r4, #9
   3458c:	0576      	lsls	r6, r6, #21
   3458e:	4317      	orrs	r7, r2
   34590:	0b24      	lsrs	r4, r4, #12
   34592:	0d76      	lsrs	r6, r6, #21
   34594:	401d      	ands	r5, r3
   34596:	2100      	movs	r1, #0
   34598:	0324      	lsls	r4, r4, #12
   3459a:	0b23      	lsrs	r3, r4, #12
   3459c:	0d0c      	lsrs	r4, r1, #20
   3459e:	4a7e      	ldr	r2, [pc, #504]	; (34798 <__aeabi_dsub+0x34c>)
   345a0:	0524      	lsls	r4, r4, #20
   345a2:	431c      	orrs	r4, r3
   345a4:	4014      	ands	r4, r2
   345a6:	0533      	lsls	r3, r6, #20
   345a8:	4323      	orrs	r3, r4
   345aa:	005b      	lsls	r3, r3, #1
   345ac:	07ed      	lsls	r5, r5, #31
   345ae:	085b      	lsrs	r3, r3, #1
   345b0:	432b      	orrs	r3, r5
   345b2:	0038      	movs	r0, r7
   345b4:	0019      	movs	r1, r3
   345b6:	bc1c      	pop	{r2, r3, r4}
   345b8:	4690      	mov	r8, r2
   345ba:	4699      	mov	r9, r3
   345bc:	46a2      	mov	sl, r4
   345be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   345c0:	2501      	movs	r5, #1
   345c2:	4643      	mov	r3, r8
   345c4:	0762      	lsls	r2, r4, #29
   345c6:	08ff      	lsrs	r7, r7, #3
   345c8:	4317      	orrs	r7, r2
   345ca:	08e4      	lsrs	r4, r4, #3
   345cc:	401d      	ands	r5, r3
   345ce:	4b70      	ldr	r3, [pc, #448]	; (34790 <__aeabi_dsub+0x344>)
   345d0:	429e      	cmp	r6, r3
   345d2:	d036      	beq.n	34642 <__aeabi_dsub+0x1f6>
   345d4:	0324      	lsls	r4, r4, #12
   345d6:	0576      	lsls	r6, r6, #21
   345d8:	0b24      	lsrs	r4, r4, #12
   345da:	0d76      	lsrs	r6, r6, #21
   345dc:	e7db      	b.n	34596 <__aeabi_dsub+0x14a>
   345de:	4663      	mov	r3, ip
   345e0:	1af3      	subs	r3, r6, r3
   345e2:	2b00      	cmp	r3, #0
   345e4:	dc00      	bgt.n	345e8 <__aeabi_dsub+0x19c>
   345e6:	e094      	b.n	34712 <__aeabi_dsub+0x2c6>
   345e8:	4660      	mov	r0, ip
   345ea:	2800      	cmp	r0, #0
   345ec:	d035      	beq.n	3465a <__aeabi_dsub+0x20e>
   345ee:	4868      	ldr	r0, [pc, #416]	; (34790 <__aeabi_dsub+0x344>)
   345f0:	4286      	cmp	r6, r0
   345f2:	d0b1      	beq.n	34558 <__aeabi_dsub+0x10c>
   345f4:	2780      	movs	r7, #128	; 0x80
   345f6:	043f      	lsls	r7, r7, #16
   345f8:	4339      	orrs	r1, r7
   345fa:	2b38      	cmp	r3, #56	; 0x38
   345fc:	dc00      	bgt.n	34600 <__aeabi_dsub+0x1b4>
   345fe:	e0fd      	b.n	347fc <__aeabi_dsub+0x3b0>
   34600:	430a      	orrs	r2, r1
   34602:	0017      	movs	r7, r2
   34604:	2100      	movs	r1, #0
   34606:	1e7a      	subs	r2, r7, #1
   34608:	4197      	sbcs	r7, r2
   3460a:	4457      	add	r7, sl
   3460c:	4557      	cmp	r7, sl
   3460e:	4180      	sbcs	r0, r0
   34610:	1909      	adds	r1, r1, r4
   34612:	4244      	negs	r4, r0
   34614:	190c      	adds	r4, r1, r4
   34616:	0223      	lsls	r3, r4, #8
   34618:	d53a      	bpl.n	34690 <__aeabi_dsub+0x244>
   3461a:	4b5d      	ldr	r3, [pc, #372]	; (34790 <__aeabi_dsub+0x344>)
   3461c:	3601      	adds	r6, #1
   3461e:	429e      	cmp	r6, r3
   34620:	d100      	bne.n	34624 <__aeabi_dsub+0x1d8>
   34622:	e14b      	b.n	348bc <__aeabi_dsub+0x470>
   34624:	2201      	movs	r2, #1
   34626:	4b5b      	ldr	r3, [pc, #364]	; (34794 <__aeabi_dsub+0x348>)
   34628:	401c      	ands	r4, r3
   3462a:	087b      	lsrs	r3, r7, #1
   3462c:	4017      	ands	r7, r2
   3462e:	431f      	orrs	r7, r3
   34630:	07e2      	lsls	r2, r4, #31
   34632:	4317      	orrs	r7, r2
   34634:	0864      	lsrs	r4, r4, #1
   34636:	e78f      	b.n	34558 <__aeabi_dsub+0x10c>
   34638:	0008      	movs	r0, r1
   3463a:	4310      	orrs	r0, r2
   3463c:	d000      	beq.n	34640 <__aeabi_dsub+0x1f4>
   3463e:	e724      	b.n	3448a <__aeabi_dsub+0x3e>
   34640:	e721      	b.n	34486 <__aeabi_dsub+0x3a>
   34642:	0023      	movs	r3, r4
   34644:	433b      	orrs	r3, r7
   34646:	d100      	bne.n	3464a <__aeabi_dsub+0x1fe>
   34648:	e1b9      	b.n	349be <__aeabi_dsub+0x572>
   3464a:	2280      	movs	r2, #128	; 0x80
   3464c:	0312      	lsls	r2, r2, #12
   3464e:	4314      	orrs	r4, r2
   34650:	0324      	lsls	r4, r4, #12
   34652:	0b24      	lsrs	r4, r4, #12
   34654:	e79f      	b.n	34596 <__aeabi_dsub+0x14a>
   34656:	002e      	movs	r6, r5
   34658:	e77e      	b.n	34558 <__aeabi_dsub+0x10c>
   3465a:	0008      	movs	r0, r1
   3465c:	4310      	orrs	r0, r2
   3465e:	d100      	bne.n	34662 <__aeabi_dsub+0x216>
   34660:	e0ca      	b.n	347f8 <__aeabi_dsub+0x3ac>
   34662:	1e58      	subs	r0, r3, #1
   34664:	4684      	mov	ip, r0
   34666:	2800      	cmp	r0, #0
   34668:	d000      	beq.n	3466c <__aeabi_dsub+0x220>
   3466a:	e0e7      	b.n	3483c <__aeabi_dsub+0x3f0>
   3466c:	4452      	add	r2, sl
   3466e:	4552      	cmp	r2, sl
   34670:	4180      	sbcs	r0, r0
   34672:	1864      	adds	r4, r4, r1
   34674:	4240      	negs	r0, r0
   34676:	1824      	adds	r4, r4, r0
   34678:	0017      	movs	r7, r2
   3467a:	2601      	movs	r6, #1
   3467c:	0223      	lsls	r3, r4, #8
   3467e:	d507      	bpl.n	34690 <__aeabi_dsub+0x244>
   34680:	2602      	movs	r6, #2
   34682:	e7cf      	b.n	34624 <__aeabi_dsub+0x1d8>
   34684:	4664      	mov	r4, ip
   34686:	432c      	orrs	r4, r5
   34688:	d100      	bne.n	3468c <__aeabi_dsub+0x240>
   3468a:	e1b3      	b.n	349f4 <__aeabi_dsub+0x5a8>
   3468c:	002c      	movs	r4, r5
   3468e:	4667      	mov	r7, ip
   34690:	077b      	lsls	r3, r7, #29
   34692:	d000      	beq.n	34696 <__aeabi_dsub+0x24a>
   34694:	e762      	b.n	3455c <__aeabi_dsub+0x110>
   34696:	0763      	lsls	r3, r4, #29
   34698:	08ff      	lsrs	r7, r7, #3
   3469a:	431f      	orrs	r7, r3
   3469c:	2501      	movs	r5, #1
   3469e:	4643      	mov	r3, r8
   346a0:	08e4      	lsrs	r4, r4, #3
   346a2:	401d      	ands	r5, r3
   346a4:	e793      	b.n	345ce <__aeabi_dsub+0x182>
   346a6:	2d00      	cmp	r5, #0
   346a8:	d178      	bne.n	3479c <__aeabi_dsub+0x350>
   346aa:	1c75      	adds	r5, r6, #1
   346ac:	056d      	lsls	r5, r5, #21
   346ae:	0d6d      	lsrs	r5, r5, #21
   346b0:	2d01      	cmp	r5, #1
   346b2:	dc00      	bgt.n	346b6 <__aeabi_dsub+0x26a>
   346b4:	e0f2      	b.n	3489c <__aeabi_dsub+0x450>
   346b6:	4650      	mov	r0, sl
   346b8:	1a80      	subs	r0, r0, r2
   346ba:	4582      	cmp	sl, r0
   346bc:	41bf      	sbcs	r7, r7
   346be:	1a65      	subs	r5, r4, r1
   346c0:	427f      	negs	r7, r7
   346c2:	1bed      	subs	r5, r5, r7
   346c4:	4684      	mov	ip, r0
   346c6:	0228      	lsls	r0, r5, #8
   346c8:	d400      	bmi.n	346cc <__aeabi_dsub+0x280>
   346ca:	e08c      	b.n	347e6 <__aeabi_dsub+0x39a>
   346cc:	4650      	mov	r0, sl
   346ce:	1a17      	subs	r7, r2, r0
   346d0:	42ba      	cmp	r2, r7
   346d2:	4192      	sbcs	r2, r2
   346d4:	1b0c      	subs	r4, r1, r4
   346d6:	4255      	negs	r5, r2
   346d8:	1b65      	subs	r5, r4, r5
   346da:	4698      	mov	r8, r3
   346dc:	e714      	b.n	34508 <__aeabi_dsub+0xbc>
   346de:	2501      	movs	r5, #1
   346e0:	4643      	mov	r3, r8
   346e2:	2400      	movs	r4, #0
   346e4:	401d      	ands	r5, r3
   346e6:	2700      	movs	r7, #0
   346e8:	e755      	b.n	34596 <__aeabi_dsub+0x14a>
   346ea:	4c2a      	ldr	r4, [pc, #168]	; (34794 <__aeabi_dsub+0x348>)
   346ec:	1af6      	subs	r6, r6, r3
   346ee:	402c      	ands	r4, r5
   346f0:	e732      	b.n	34558 <__aeabi_dsub+0x10c>
   346f2:	003d      	movs	r5, r7
   346f4:	3828      	subs	r0, #40	; 0x28
   346f6:	4085      	lsls	r5, r0
   346f8:	2700      	movs	r7, #0
   346fa:	e717      	b.n	3452c <__aeabi_dsub+0xe0>
   346fc:	0038      	movs	r0, r7
   346fe:	f000 fa27 	bl	34b50 <__clzsi2>
   34702:	3020      	adds	r0, #32
   34704:	e706      	b.n	34514 <__aeabi_dsub+0xc8>
   34706:	430a      	orrs	r2, r1
   34708:	0017      	movs	r7, r2
   3470a:	2100      	movs	r1, #0
   3470c:	1e7a      	subs	r2, r7, #1
   3470e:	4197      	sbcs	r7, r2
   34710:	e6ee      	b.n	344f0 <__aeabi_dsub+0xa4>
   34712:	2b00      	cmp	r3, #0
   34714:	d000      	beq.n	34718 <__aeabi_dsub+0x2cc>
   34716:	e0e5      	b.n	348e4 <__aeabi_dsub+0x498>
   34718:	1c73      	adds	r3, r6, #1
   3471a:	469c      	mov	ip, r3
   3471c:	055b      	lsls	r3, r3, #21
   3471e:	0d5b      	lsrs	r3, r3, #21
   34720:	2b01      	cmp	r3, #1
   34722:	dc00      	bgt.n	34726 <__aeabi_dsub+0x2da>
   34724:	e09f      	b.n	34866 <__aeabi_dsub+0x41a>
   34726:	4b1a      	ldr	r3, [pc, #104]	; (34790 <__aeabi_dsub+0x344>)
   34728:	459c      	cmp	ip, r3
   3472a:	d100      	bne.n	3472e <__aeabi_dsub+0x2e2>
   3472c:	e0c5      	b.n	348ba <__aeabi_dsub+0x46e>
   3472e:	4452      	add	r2, sl
   34730:	4552      	cmp	r2, sl
   34732:	4180      	sbcs	r0, r0
   34734:	1864      	adds	r4, r4, r1
   34736:	4240      	negs	r0, r0
   34738:	1824      	adds	r4, r4, r0
   3473a:	07e7      	lsls	r7, r4, #31
   3473c:	0852      	lsrs	r2, r2, #1
   3473e:	4317      	orrs	r7, r2
   34740:	0864      	lsrs	r4, r4, #1
   34742:	4666      	mov	r6, ip
   34744:	e708      	b.n	34558 <__aeabi_dsub+0x10c>
   34746:	4812      	ldr	r0, [pc, #72]	; (34790 <__aeabi_dsub+0x344>)
   34748:	4285      	cmp	r5, r0
   3474a:	d100      	bne.n	3474e <__aeabi_dsub+0x302>
   3474c:	e085      	b.n	3485a <__aeabi_dsub+0x40e>
   3474e:	001d      	movs	r5, r3
   34750:	e6bc      	b.n	344cc <__aeabi_dsub+0x80>
   34752:	0029      	movs	r1, r5
   34754:	3e1f      	subs	r6, #31
   34756:	40f1      	lsrs	r1, r6
   34758:	2b20      	cmp	r3, #32
   3475a:	d100      	bne.n	3475e <__aeabi_dsub+0x312>
   3475c:	e07f      	b.n	3485e <__aeabi_dsub+0x412>
   3475e:	2240      	movs	r2, #64	; 0x40
   34760:	1ad3      	subs	r3, r2, r3
   34762:	409d      	lsls	r5, r3
   34764:	432f      	orrs	r7, r5
   34766:	1e7d      	subs	r5, r7, #1
   34768:	41af      	sbcs	r7, r5
   3476a:	2400      	movs	r4, #0
   3476c:	430f      	orrs	r7, r1
   3476e:	2600      	movs	r6, #0
   34770:	e78e      	b.n	34690 <__aeabi_dsub+0x244>
   34772:	002b      	movs	r3, r5
   34774:	000f      	movs	r7, r1
   34776:	3b20      	subs	r3, #32
   34778:	40df      	lsrs	r7, r3
   3477a:	2d20      	cmp	r5, #32
   3477c:	d071      	beq.n	34862 <__aeabi_dsub+0x416>
   3477e:	2340      	movs	r3, #64	; 0x40
   34780:	1b5d      	subs	r5, r3, r5
   34782:	40a9      	lsls	r1, r5
   34784:	430a      	orrs	r2, r1
   34786:	1e51      	subs	r1, r2, #1
   34788:	418a      	sbcs	r2, r1
   3478a:	2100      	movs	r1, #0
   3478c:	4317      	orrs	r7, r2
   3478e:	e6af      	b.n	344f0 <__aeabi_dsub+0xa4>
   34790:	000007ff 	.word	0x000007ff
   34794:	ff7fffff 	.word	0xff7fffff
   34798:	800fffff 	.word	0x800fffff
   3479c:	2e00      	cmp	r6, #0
   3479e:	d03e      	beq.n	3481e <__aeabi_dsub+0x3d2>
   347a0:	4eb3      	ldr	r6, [pc, #716]	; (34a70 <__aeabi_dsub+0x624>)
   347a2:	45b4      	cmp	ip, r6
   347a4:	d045      	beq.n	34832 <__aeabi_dsub+0x3e6>
   347a6:	2680      	movs	r6, #128	; 0x80
   347a8:	0436      	lsls	r6, r6, #16
   347aa:	426d      	negs	r5, r5
   347ac:	4334      	orrs	r4, r6
   347ae:	2d38      	cmp	r5, #56	; 0x38
   347b0:	dd00      	ble.n	347b4 <__aeabi_dsub+0x368>
   347b2:	e0a8      	b.n	34906 <__aeabi_dsub+0x4ba>
   347b4:	2d1f      	cmp	r5, #31
   347b6:	dd00      	ble.n	347ba <__aeabi_dsub+0x36e>
   347b8:	e11f      	b.n	349fa <__aeabi_dsub+0x5ae>
   347ba:	2620      	movs	r6, #32
   347bc:	0027      	movs	r7, r4
   347be:	4650      	mov	r0, sl
   347c0:	1b76      	subs	r6, r6, r5
   347c2:	40b7      	lsls	r7, r6
   347c4:	40e8      	lsrs	r0, r5
   347c6:	4307      	orrs	r7, r0
   347c8:	4650      	mov	r0, sl
   347ca:	40b0      	lsls	r0, r6
   347cc:	1e46      	subs	r6, r0, #1
   347ce:	41b0      	sbcs	r0, r6
   347d0:	40ec      	lsrs	r4, r5
   347d2:	4338      	orrs	r0, r7
   347d4:	1a17      	subs	r7, r2, r0
   347d6:	42ba      	cmp	r2, r7
   347d8:	4192      	sbcs	r2, r2
   347da:	1b0c      	subs	r4, r1, r4
   347dc:	4252      	negs	r2, r2
   347de:	1aa4      	subs	r4, r4, r2
   347e0:	4666      	mov	r6, ip
   347e2:	4698      	mov	r8, r3
   347e4:	e68b      	b.n	344fe <__aeabi_dsub+0xb2>
   347e6:	4664      	mov	r4, ip
   347e8:	4667      	mov	r7, ip
   347ea:	432c      	orrs	r4, r5
   347ec:	d000      	beq.n	347f0 <__aeabi_dsub+0x3a4>
   347ee:	e68b      	b.n	34508 <__aeabi_dsub+0xbc>
   347f0:	2500      	movs	r5, #0
   347f2:	2600      	movs	r6, #0
   347f4:	2700      	movs	r7, #0
   347f6:	e6ea      	b.n	345ce <__aeabi_dsub+0x182>
   347f8:	001e      	movs	r6, r3
   347fa:	e6ad      	b.n	34558 <__aeabi_dsub+0x10c>
   347fc:	2b1f      	cmp	r3, #31
   347fe:	dc60      	bgt.n	348c2 <__aeabi_dsub+0x476>
   34800:	2720      	movs	r7, #32
   34802:	1af8      	subs	r0, r7, r3
   34804:	000f      	movs	r7, r1
   34806:	4684      	mov	ip, r0
   34808:	4087      	lsls	r7, r0
   3480a:	0010      	movs	r0, r2
   3480c:	40d8      	lsrs	r0, r3
   3480e:	4307      	orrs	r7, r0
   34810:	4660      	mov	r0, ip
   34812:	4082      	lsls	r2, r0
   34814:	1e50      	subs	r0, r2, #1
   34816:	4182      	sbcs	r2, r0
   34818:	40d9      	lsrs	r1, r3
   3481a:	4317      	orrs	r7, r2
   3481c:	e6f5      	b.n	3460a <__aeabi_dsub+0x1be>
   3481e:	0026      	movs	r6, r4
   34820:	4650      	mov	r0, sl
   34822:	4306      	orrs	r6, r0
   34824:	d005      	beq.n	34832 <__aeabi_dsub+0x3e6>
   34826:	43ed      	mvns	r5, r5
   34828:	2d00      	cmp	r5, #0
   3482a:	d0d3      	beq.n	347d4 <__aeabi_dsub+0x388>
   3482c:	4e90      	ldr	r6, [pc, #576]	; (34a70 <__aeabi_dsub+0x624>)
   3482e:	45b4      	cmp	ip, r6
   34830:	d1bd      	bne.n	347ae <__aeabi_dsub+0x362>
   34832:	000c      	movs	r4, r1
   34834:	0017      	movs	r7, r2
   34836:	4666      	mov	r6, ip
   34838:	4698      	mov	r8, r3
   3483a:	e68d      	b.n	34558 <__aeabi_dsub+0x10c>
   3483c:	488c      	ldr	r0, [pc, #560]	; (34a70 <__aeabi_dsub+0x624>)
   3483e:	4283      	cmp	r3, r0
   34840:	d00b      	beq.n	3485a <__aeabi_dsub+0x40e>
   34842:	4663      	mov	r3, ip
   34844:	e6d9      	b.n	345fa <__aeabi_dsub+0x1ae>
   34846:	2d00      	cmp	r5, #0
   34848:	d000      	beq.n	3484c <__aeabi_dsub+0x400>
   3484a:	e096      	b.n	3497a <__aeabi_dsub+0x52e>
   3484c:	0008      	movs	r0, r1
   3484e:	4310      	orrs	r0, r2
   34850:	d100      	bne.n	34854 <__aeabi_dsub+0x408>
   34852:	e0e2      	b.n	34a1a <__aeabi_dsub+0x5ce>
   34854:	000c      	movs	r4, r1
   34856:	0017      	movs	r7, r2
   34858:	4698      	mov	r8, r3
   3485a:	4e85      	ldr	r6, [pc, #532]	; (34a70 <__aeabi_dsub+0x624>)
   3485c:	e67c      	b.n	34558 <__aeabi_dsub+0x10c>
   3485e:	2500      	movs	r5, #0
   34860:	e780      	b.n	34764 <__aeabi_dsub+0x318>
   34862:	2100      	movs	r1, #0
   34864:	e78e      	b.n	34784 <__aeabi_dsub+0x338>
   34866:	0023      	movs	r3, r4
   34868:	4650      	mov	r0, sl
   3486a:	4303      	orrs	r3, r0
   3486c:	2e00      	cmp	r6, #0
   3486e:	d000      	beq.n	34872 <__aeabi_dsub+0x426>
   34870:	e0a8      	b.n	349c4 <__aeabi_dsub+0x578>
   34872:	2b00      	cmp	r3, #0
   34874:	d100      	bne.n	34878 <__aeabi_dsub+0x42c>
   34876:	e0de      	b.n	34a36 <__aeabi_dsub+0x5ea>
   34878:	000b      	movs	r3, r1
   3487a:	4313      	orrs	r3, r2
   3487c:	d100      	bne.n	34880 <__aeabi_dsub+0x434>
   3487e:	e66b      	b.n	34558 <__aeabi_dsub+0x10c>
   34880:	4452      	add	r2, sl
   34882:	4552      	cmp	r2, sl
   34884:	4180      	sbcs	r0, r0
   34886:	1864      	adds	r4, r4, r1
   34888:	4240      	negs	r0, r0
   3488a:	1824      	adds	r4, r4, r0
   3488c:	0017      	movs	r7, r2
   3488e:	0223      	lsls	r3, r4, #8
   34890:	d400      	bmi.n	34894 <__aeabi_dsub+0x448>
   34892:	e6fd      	b.n	34690 <__aeabi_dsub+0x244>
   34894:	4b77      	ldr	r3, [pc, #476]	; (34a74 <__aeabi_dsub+0x628>)
   34896:	4666      	mov	r6, ip
   34898:	401c      	ands	r4, r3
   3489a:	e65d      	b.n	34558 <__aeabi_dsub+0x10c>
   3489c:	0025      	movs	r5, r4
   3489e:	4650      	mov	r0, sl
   348a0:	4305      	orrs	r5, r0
   348a2:	2e00      	cmp	r6, #0
   348a4:	d1cf      	bne.n	34846 <__aeabi_dsub+0x3fa>
   348a6:	2d00      	cmp	r5, #0
   348a8:	d14f      	bne.n	3494a <__aeabi_dsub+0x4fe>
   348aa:	000c      	movs	r4, r1
   348ac:	4314      	orrs	r4, r2
   348ae:	d100      	bne.n	348b2 <__aeabi_dsub+0x466>
   348b0:	e0a0      	b.n	349f4 <__aeabi_dsub+0x5a8>
   348b2:	000c      	movs	r4, r1
   348b4:	0017      	movs	r7, r2
   348b6:	4698      	mov	r8, r3
   348b8:	e64e      	b.n	34558 <__aeabi_dsub+0x10c>
   348ba:	4666      	mov	r6, ip
   348bc:	2400      	movs	r4, #0
   348be:	2700      	movs	r7, #0
   348c0:	e685      	b.n	345ce <__aeabi_dsub+0x182>
   348c2:	001f      	movs	r7, r3
   348c4:	0008      	movs	r0, r1
   348c6:	3f20      	subs	r7, #32
   348c8:	40f8      	lsrs	r0, r7
   348ca:	0007      	movs	r7, r0
   348cc:	2b20      	cmp	r3, #32
   348ce:	d100      	bne.n	348d2 <__aeabi_dsub+0x486>
   348d0:	e08e      	b.n	349f0 <__aeabi_dsub+0x5a4>
   348d2:	2040      	movs	r0, #64	; 0x40
   348d4:	1ac3      	subs	r3, r0, r3
   348d6:	4099      	lsls	r1, r3
   348d8:	430a      	orrs	r2, r1
   348da:	1e51      	subs	r1, r2, #1
   348dc:	418a      	sbcs	r2, r1
   348de:	2100      	movs	r1, #0
   348e0:	4317      	orrs	r7, r2
   348e2:	e692      	b.n	3460a <__aeabi_dsub+0x1be>
   348e4:	2e00      	cmp	r6, #0
   348e6:	d114      	bne.n	34912 <__aeabi_dsub+0x4c6>
   348e8:	0026      	movs	r6, r4
   348ea:	4650      	mov	r0, sl
   348ec:	4306      	orrs	r6, r0
   348ee:	d062      	beq.n	349b6 <__aeabi_dsub+0x56a>
   348f0:	43db      	mvns	r3, r3
   348f2:	2b00      	cmp	r3, #0
   348f4:	d15c      	bne.n	349b0 <__aeabi_dsub+0x564>
   348f6:	1887      	adds	r7, r0, r2
   348f8:	4297      	cmp	r7, r2
   348fa:	4192      	sbcs	r2, r2
   348fc:	1864      	adds	r4, r4, r1
   348fe:	4252      	negs	r2, r2
   34900:	18a4      	adds	r4, r4, r2
   34902:	4666      	mov	r6, ip
   34904:	e687      	b.n	34616 <__aeabi_dsub+0x1ca>
   34906:	4650      	mov	r0, sl
   34908:	4320      	orrs	r0, r4
   3490a:	1e44      	subs	r4, r0, #1
   3490c:	41a0      	sbcs	r0, r4
   3490e:	2400      	movs	r4, #0
   34910:	e760      	b.n	347d4 <__aeabi_dsub+0x388>
   34912:	4e57      	ldr	r6, [pc, #348]	; (34a70 <__aeabi_dsub+0x624>)
   34914:	45b4      	cmp	ip, r6
   34916:	d04e      	beq.n	349b6 <__aeabi_dsub+0x56a>
   34918:	2680      	movs	r6, #128	; 0x80
   3491a:	0436      	lsls	r6, r6, #16
   3491c:	425b      	negs	r3, r3
   3491e:	4334      	orrs	r4, r6
   34920:	2b38      	cmp	r3, #56	; 0x38
   34922:	dd00      	ble.n	34926 <__aeabi_dsub+0x4da>
   34924:	e07f      	b.n	34a26 <__aeabi_dsub+0x5da>
   34926:	2b1f      	cmp	r3, #31
   34928:	dd00      	ble.n	3492c <__aeabi_dsub+0x4e0>
   3492a:	e08b      	b.n	34a44 <__aeabi_dsub+0x5f8>
   3492c:	2620      	movs	r6, #32
   3492e:	0027      	movs	r7, r4
   34930:	4650      	mov	r0, sl
   34932:	1af6      	subs	r6, r6, r3
   34934:	40b7      	lsls	r7, r6
   34936:	40d8      	lsrs	r0, r3
   34938:	4307      	orrs	r7, r0
   3493a:	4650      	mov	r0, sl
   3493c:	40b0      	lsls	r0, r6
   3493e:	1e46      	subs	r6, r0, #1
   34940:	41b0      	sbcs	r0, r6
   34942:	4307      	orrs	r7, r0
   34944:	40dc      	lsrs	r4, r3
   34946:	18bf      	adds	r7, r7, r2
   34948:	e7d6      	b.n	348f8 <__aeabi_dsub+0x4ac>
   3494a:	000d      	movs	r5, r1
   3494c:	4315      	orrs	r5, r2
   3494e:	d100      	bne.n	34952 <__aeabi_dsub+0x506>
   34950:	e602      	b.n	34558 <__aeabi_dsub+0x10c>
   34952:	4650      	mov	r0, sl
   34954:	1a80      	subs	r0, r0, r2
   34956:	4582      	cmp	sl, r0
   34958:	41bf      	sbcs	r7, r7
   3495a:	1a65      	subs	r5, r4, r1
   3495c:	427f      	negs	r7, r7
   3495e:	1bed      	subs	r5, r5, r7
   34960:	4684      	mov	ip, r0
   34962:	0228      	lsls	r0, r5, #8
   34964:	d400      	bmi.n	34968 <__aeabi_dsub+0x51c>
   34966:	e68d      	b.n	34684 <__aeabi_dsub+0x238>
   34968:	4650      	mov	r0, sl
   3496a:	1a17      	subs	r7, r2, r0
   3496c:	42ba      	cmp	r2, r7
   3496e:	4192      	sbcs	r2, r2
   34970:	1b0c      	subs	r4, r1, r4
   34972:	4252      	negs	r2, r2
   34974:	1aa4      	subs	r4, r4, r2
   34976:	4698      	mov	r8, r3
   34978:	e5ee      	b.n	34558 <__aeabi_dsub+0x10c>
   3497a:	000d      	movs	r5, r1
   3497c:	4315      	orrs	r5, r2
   3497e:	d100      	bne.n	34982 <__aeabi_dsub+0x536>
   34980:	e76b      	b.n	3485a <__aeabi_dsub+0x40e>
   34982:	4650      	mov	r0, sl
   34984:	0767      	lsls	r7, r4, #29
   34986:	08c0      	lsrs	r0, r0, #3
   34988:	4307      	orrs	r7, r0
   3498a:	2080      	movs	r0, #128	; 0x80
   3498c:	08e4      	lsrs	r4, r4, #3
   3498e:	0300      	lsls	r0, r0, #12
   34990:	4204      	tst	r4, r0
   34992:	d007      	beq.n	349a4 <__aeabi_dsub+0x558>
   34994:	08cd      	lsrs	r5, r1, #3
   34996:	4205      	tst	r5, r0
   34998:	d104      	bne.n	349a4 <__aeabi_dsub+0x558>
   3499a:	002c      	movs	r4, r5
   3499c:	4698      	mov	r8, r3
   3499e:	08d7      	lsrs	r7, r2, #3
   349a0:	0749      	lsls	r1, r1, #29
   349a2:	430f      	orrs	r7, r1
   349a4:	0f7b      	lsrs	r3, r7, #29
   349a6:	00e4      	lsls	r4, r4, #3
   349a8:	431c      	orrs	r4, r3
   349aa:	00ff      	lsls	r7, r7, #3
   349ac:	4e30      	ldr	r6, [pc, #192]	; (34a70 <__aeabi_dsub+0x624>)
   349ae:	e5d3      	b.n	34558 <__aeabi_dsub+0x10c>
   349b0:	4e2f      	ldr	r6, [pc, #188]	; (34a70 <__aeabi_dsub+0x624>)
   349b2:	45b4      	cmp	ip, r6
   349b4:	d1b4      	bne.n	34920 <__aeabi_dsub+0x4d4>
   349b6:	000c      	movs	r4, r1
   349b8:	0017      	movs	r7, r2
   349ba:	4666      	mov	r6, ip
   349bc:	e5cc      	b.n	34558 <__aeabi_dsub+0x10c>
   349be:	2700      	movs	r7, #0
   349c0:	2400      	movs	r4, #0
   349c2:	e5e8      	b.n	34596 <__aeabi_dsub+0x14a>
   349c4:	2b00      	cmp	r3, #0
   349c6:	d039      	beq.n	34a3c <__aeabi_dsub+0x5f0>
   349c8:	000b      	movs	r3, r1
   349ca:	4313      	orrs	r3, r2
   349cc:	d100      	bne.n	349d0 <__aeabi_dsub+0x584>
   349ce:	e744      	b.n	3485a <__aeabi_dsub+0x40e>
   349d0:	08c0      	lsrs	r0, r0, #3
   349d2:	0767      	lsls	r7, r4, #29
   349d4:	4307      	orrs	r7, r0
   349d6:	2080      	movs	r0, #128	; 0x80
   349d8:	08e4      	lsrs	r4, r4, #3
   349da:	0300      	lsls	r0, r0, #12
   349dc:	4204      	tst	r4, r0
   349de:	d0e1      	beq.n	349a4 <__aeabi_dsub+0x558>
   349e0:	08cb      	lsrs	r3, r1, #3
   349e2:	4203      	tst	r3, r0
   349e4:	d1de      	bne.n	349a4 <__aeabi_dsub+0x558>
   349e6:	08d7      	lsrs	r7, r2, #3
   349e8:	0749      	lsls	r1, r1, #29
   349ea:	430f      	orrs	r7, r1
   349ec:	001c      	movs	r4, r3
   349ee:	e7d9      	b.n	349a4 <__aeabi_dsub+0x558>
   349f0:	2100      	movs	r1, #0
   349f2:	e771      	b.n	348d8 <__aeabi_dsub+0x48c>
   349f4:	2500      	movs	r5, #0
   349f6:	2700      	movs	r7, #0
   349f8:	e5e9      	b.n	345ce <__aeabi_dsub+0x182>
   349fa:	002e      	movs	r6, r5
   349fc:	0027      	movs	r7, r4
   349fe:	3e20      	subs	r6, #32
   34a00:	40f7      	lsrs	r7, r6
   34a02:	2d20      	cmp	r5, #32
   34a04:	d02f      	beq.n	34a66 <__aeabi_dsub+0x61a>
   34a06:	2640      	movs	r6, #64	; 0x40
   34a08:	1b75      	subs	r5, r6, r5
   34a0a:	40ac      	lsls	r4, r5
   34a0c:	4650      	mov	r0, sl
   34a0e:	4320      	orrs	r0, r4
   34a10:	1e44      	subs	r4, r0, #1
   34a12:	41a0      	sbcs	r0, r4
   34a14:	2400      	movs	r4, #0
   34a16:	4338      	orrs	r0, r7
   34a18:	e6dc      	b.n	347d4 <__aeabi_dsub+0x388>
   34a1a:	2480      	movs	r4, #128	; 0x80
   34a1c:	2500      	movs	r5, #0
   34a1e:	0324      	lsls	r4, r4, #12
   34a20:	4e13      	ldr	r6, [pc, #76]	; (34a70 <__aeabi_dsub+0x624>)
   34a22:	2700      	movs	r7, #0
   34a24:	e5d3      	b.n	345ce <__aeabi_dsub+0x182>
   34a26:	4650      	mov	r0, sl
   34a28:	4320      	orrs	r0, r4
   34a2a:	0007      	movs	r7, r0
   34a2c:	1e78      	subs	r0, r7, #1
   34a2e:	4187      	sbcs	r7, r0
   34a30:	2400      	movs	r4, #0
   34a32:	18bf      	adds	r7, r7, r2
   34a34:	e760      	b.n	348f8 <__aeabi_dsub+0x4ac>
   34a36:	000c      	movs	r4, r1
   34a38:	0017      	movs	r7, r2
   34a3a:	e58d      	b.n	34558 <__aeabi_dsub+0x10c>
   34a3c:	000c      	movs	r4, r1
   34a3e:	0017      	movs	r7, r2
   34a40:	4e0b      	ldr	r6, [pc, #44]	; (34a70 <__aeabi_dsub+0x624>)
   34a42:	e589      	b.n	34558 <__aeabi_dsub+0x10c>
   34a44:	001e      	movs	r6, r3
   34a46:	0027      	movs	r7, r4
   34a48:	3e20      	subs	r6, #32
   34a4a:	40f7      	lsrs	r7, r6
   34a4c:	2b20      	cmp	r3, #32
   34a4e:	d00c      	beq.n	34a6a <__aeabi_dsub+0x61e>
   34a50:	2640      	movs	r6, #64	; 0x40
   34a52:	1af3      	subs	r3, r6, r3
   34a54:	409c      	lsls	r4, r3
   34a56:	4650      	mov	r0, sl
   34a58:	4320      	orrs	r0, r4
   34a5a:	1e44      	subs	r4, r0, #1
   34a5c:	41a0      	sbcs	r0, r4
   34a5e:	4307      	orrs	r7, r0
   34a60:	2400      	movs	r4, #0
   34a62:	18bf      	adds	r7, r7, r2
   34a64:	e748      	b.n	348f8 <__aeabi_dsub+0x4ac>
   34a66:	2400      	movs	r4, #0
   34a68:	e7d0      	b.n	34a0c <__aeabi_dsub+0x5c0>
   34a6a:	2400      	movs	r4, #0
   34a6c:	e7f3      	b.n	34a56 <__aeabi_dsub+0x60a>
   34a6e:	46c0      	nop			; (mov r8, r8)
   34a70:	000007ff 	.word	0x000007ff
   34a74:	ff7fffff 	.word	0xff7fffff

00034a78 <__aeabi_d2iz>:
   34a78:	b530      	push	{r4, r5, lr}
   34a7a:	4d13      	ldr	r5, [pc, #76]	; (34ac8 <__aeabi_d2iz+0x50>)
   34a7c:	030a      	lsls	r2, r1, #12
   34a7e:	004b      	lsls	r3, r1, #1
   34a80:	0b12      	lsrs	r2, r2, #12
   34a82:	0d5b      	lsrs	r3, r3, #21
   34a84:	0fc9      	lsrs	r1, r1, #31
   34a86:	2400      	movs	r4, #0
   34a88:	42ab      	cmp	r3, r5
   34a8a:	dd10      	ble.n	34aae <__aeabi_d2iz+0x36>
   34a8c:	4c0f      	ldr	r4, [pc, #60]	; (34acc <__aeabi_d2iz+0x54>)
   34a8e:	42a3      	cmp	r3, r4
   34a90:	dc0f      	bgt.n	34ab2 <__aeabi_d2iz+0x3a>
   34a92:	2480      	movs	r4, #128	; 0x80
   34a94:	4d0e      	ldr	r5, [pc, #56]	; (34ad0 <__aeabi_d2iz+0x58>)
   34a96:	0364      	lsls	r4, r4, #13
   34a98:	4322      	orrs	r2, r4
   34a9a:	1aed      	subs	r5, r5, r3
   34a9c:	2d1f      	cmp	r5, #31
   34a9e:	dd0b      	ble.n	34ab8 <__aeabi_d2iz+0x40>
   34aa0:	480c      	ldr	r0, [pc, #48]	; (34ad4 <__aeabi_d2iz+0x5c>)
   34aa2:	1ac3      	subs	r3, r0, r3
   34aa4:	40da      	lsrs	r2, r3
   34aa6:	4254      	negs	r4, r2
   34aa8:	2900      	cmp	r1, #0
   34aaa:	d100      	bne.n	34aae <__aeabi_d2iz+0x36>
   34aac:	0014      	movs	r4, r2
   34aae:	0020      	movs	r0, r4
   34ab0:	bd30      	pop	{r4, r5, pc}
   34ab2:	4b09      	ldr	r3, [pc, #36]	; (34ad8 <__aeabi_d2iz+0x60>)
   34ab4:	18cc      	adds	r4, r1, r3
   34ab6:	e7fa      	b.n	34aae <__aeabi_d2iz+0x36>
   34ab8:	4c08      	ldr	r4, [pc, #32]	; (34adc <__aeabi_d2iz+0x64>)
   34aba:	40e8      	lsrs	r0, r5
   34abc:	46a4      	mov	ip, r4
   34abe:	4463      	add	r3, ip
   34ac0:	409a      	lsls	r2, r3
   34ac2:	4302      	orrs	r2, r0
   34ac4:	e7ef      	b.n	34aa6 <__aeabi_d2iz+0x2e>
   34ac6:	46c0      	nop			; (mov r8, r8)
   34ac8:	000003fe 	.word	0x000003fe
   34acc:	0000041d 	.word	0x0000041d
   34ad0:	00000433 	.word	0x00000433
   34ad4:	00000413 	.word	0x00000413
   34ad8:	7fffffff 	.word	0x7fffffff
   34adc:	fffffbed 	.word	0xfffffbed

00034ae0 <__aeabi_ui2d>:
   34ae0:	b510      	push	{r4, lr}
   34ae2:	1e04      	subs	r4, r0, #0
   34ae4:	d028      	beq.n	34b38 <__aeabi_ui2d+0x58>
   34ae6:	f000 f833 	bl	34b50 <__clzsi2>
   34aea:	4b15      	ldr	r3, [pc, #84]	; (34b40 <__aeabi_ui2d+0x60>)
   34aec:	4a15      	ldr	r2, [pc, #84]	; (34b44 <__aeabi_ui2d+0x64>)
   34aee:	1a1b      	subs	r3, r3, r0
   34af0:	1ad2      	subs	r2, r2, r3
   34af2:	2a1f      	cmp	r2, #31
   34af4:	dd15      	ble.n	34b22 <__aeabi_ui2d+0x42>
   34af6:	4a14      	ldr	r2, [pc, #80]	; (34b48 <__aeabi_ui2d+0x68>)
   34af8:	1ad2      	subs	r2, r2, r3
   34afa:	4094      	lsls	r4, r2
   34afc:	2200      	movs	r2, #0
   34afe:	0324      	lsls	r4, r4, #12
   34b00:	055b      	lsls	r3, r3, #21
   34b02:	0b24      	lsrs	r4, r4, #12
   34b04:	0d5b      	lsrs	r3, r3, #21
   34b06:	2100      	movs	r1, #0
   34b08:	0010      	movs	r0, r2
   34b0a:	0324      	lsls	r4, r4, #12
   34b0c:	0d0a      	lsrs	r2, r1, #20
   34b0e:	0b24      	lsrs	r4, r4, #12
   34b10:	0512      	lsls	r2, r2, #20
   34b12:	4322      	orrs	r2, r4
   34b14:	4c0d      	ldr	r4, [pc, #52]	; (34b4c <__aeabi_ui2d+0x6c>)
   34b16:	051b      	lsls	r3, r3, #20
   34b18:	4022      	ands	r2, r4
   34b1a:	4313      	orrs	r3, r2
   34b1c:	005b      	lsls	r3, r3, #1
   34b1e:	0859      	lsrs	r1, r3, #1
   34b20:	bd10      	pop	{r4, pc}
   34b22:	0021      	movs	r1, r4
   34b24:	4091      	lsls	r1, r2
   34b26:	000a      	movs	r2, r1
   34b28:	210b      	movs	r1, #11
   34b2a:	1a08      	subs	r0, r1, r0
   34b2c:	40c4      	lsrs	r4, r0
   34b2e:	055b      	lsls	r3, r3, #21
   34b30:	0324      	lsls	r4, r4, #12
   34b32:	0b24      	lsrs	r4, r4, #12
   34b34:	0d5b      	lsrs	r3, r3, #21
   34b36:	e7e6      	b.n	34b06 <__aeabi_ui2d+0x26>
   34b38:	2300      	movs	r3, #0
   34b3a:	2400      	movs	r4, #0
   34b3c:	2200      	movs	r2, #0
   34b3e:	e7e2      	b.n	34b06 <__aeabi_ui2d+0x26>
   34b40:	0000041e 	.word	0x0000041e
   34b44:	00000433 	.word	0x00000433
   34b48:	00000413 	.word	0x00000413
   34b4c:	800fffff 	.word	0x800fffff

00034b50 <__clzsi2>:
   34b50:	211c      	movs	r1, #28
   34b52:	2301      	movs	r3, #1
   34b54:	041b      	lsls	r3, r3, #16
   34b56:	4298      	cmp	r0, r3
   34b58:	d301      	bcc.n	34b5e <__clzsi2+0xe>
   34b5a:	0c00      	lsrs	r0, r0, #16
   34b5c:	3910      	subs	r1, #16
   34b5e:	0a1b      	lsrs	r3, r3, #8
   34b60:	4298      	cmp	r0, r3
   34b62:	d301      	bcc.n	34b68 <__clzsi2+0x18>
   34b64:	0a00      	lsrs	r0, r0, #8
   34b66:	3908      	subs	r1, #8
   34b68:	091b      	lsrs	r3, r3, #4
   34b6a:	4298      	cmp	r0, r3
   34b6c:	d301      	bcc.n	34b72 <__clzsi2+0x22>
   34b6e:	0900      	lsrs	r0, r0, #4
   34b70:	3904      	subs	r1, #4
   34b72:	a202      	add	r2, pc, #8	; (adr r2, 34b7c <__clzsi2+0x2c>)
   34b74:	5c10      	ldrb	r0, [r2, r0]
   34b76:	1840      	adds	r0, r0, r1
   34b78:	4770      	bx	lr
   34b7a:	46c0      	nop			; (mov r8, r8)
   34b7c:	02020304 	.word	0x02020304
   34b80:	01010101 	.word	0x01010101
	...

00034b8c <atoi>:
   34b8c:	b510      	push	{r4, lr}
   34b8e:	220a      	movs	r2, #10
   34b90:	2100      	movs	r1, #0
   34b92:	f000 fb0d 	bl	351b0 <strtol>
   34b96:	bd10      	pop	{r4, pc}

00034b98 <__libc_init_array>:
   34b98:	b570      	push	{r4, r5, r6, lr}
   34b9a:	2600      	movs	r6, #0
   34b9c:	4d0c      	ldr	r5, [pc, #48]	; (34bd0 <__libc_init_array+0x38>)
   34b9e:	4c0d      	ldr	r4, [pc, #52]	; (34bd4 <__libc_init_array+0x3c>)
   34ba0:	1b64      	subs	r4, r4, r5
   34ba2:	10a4      	asrs	r4, r4, #2
   34ba4:	42a6      	cmp	r6, r4
   34ba6:	d109      	bne.n	34bbc <__libc_init_array+0x24>
   34ba8:	2600      	movs	r6, #0
   34baa:	f005 fc7f 	bl	3a4ac <_init>
   34bae:	4d0a      	ldr	r5, [pc, #40]	; (34bd8 <__libc_init_array+0x40>)
   34bb0:	4c0a      	ldr	r4, [pc, #40]	; (34bdc <__libc_init_array+0x44>)
   34bb2:	1b64      	subs	r4, r4, r5
   34bb4:	10a4      	asrs	r4, r4, #2
   34bb6:	42a6      	cmp	r6, r4
   34bb8:	d105      	bne.n	34bc6 <__libc_init_array+0x2e>
   34bba:	bd70      	pop	{r4, r5, r6, pc}
   34bbc:	00b3      	lsls	r3, r6, #2
   34bbe:	58eb      	ldr	r3, [r5, r3]
   34bc0:	4798      	blx	r3
   34bc2:	3601      	adds	r6, #1
   34bc4:	e7ee      	b.n	34ba4 <__libc_init_array+0xc>
   34bc6:	00b3      	lsls	r3, r6, #2
   34bc8:	58eb      	ldr	r3, [r5, r3]
   34bca:	4798      	blx	r3
   34bcc:	3601      	adds	r6, #1
   34bce:	e7f2      	b.n	34bb6 <__libc_init_array+0x1e>
   34bd0:	0003a4b8 	.word	0x0003a4b8
   34bd4:	0003a4b8 	.word	0x0003a4b8
   34bd8:	0003a4b8 	.word	0x0003a4b8
   34bdc:	0003a4bc 	.word	0x0003a4bc

00034be0 <malloc>:
   34be0:	b510      	push	{r4, lr}
   34be2:	4b03      	ldr	r3, [pc, #12]	; (34bf0 <malloc+0x10>)
   34be4:	0001      	movs	r1, r0
   34be6:	6818      	ldr	r0, [r3, #0]
   34be8:	f000 f87c 	bl	34ce4 <_malloc_r>
   34bec:	bd10      	pop	{r4, pc}
   34bee:	46c0      	nop			; (mov r8, r8)
   34bf0:	200000d4 	.word	0x200000d4

00034bf4 <free>:
   34bf4:	b510      	push	{r4, lr}
   34bf6:	4b03      	ldr	r3, [pc, #12]	; (34c04 <free+0x10>)
   34bf8:	0001      	movs	r1, r0
   34bfa:	6818      	ldr	r0, [r3, #0]
   34bfc:	f000 f828 	bl	34c50 <_free_r>
   34c00:	bd10      	pop	{r4, pc}
   34c02:	46c0      	nop			; (mov r8, r8)
   34c04:	200000d4 	.word	0x200000d4

00034c08 <memcpy>:
   34c08:	2300      	movs	r3, #0
   34c0a:	b510      	push	{r4, lr}
   34c0c:	429a      	cmp	r2, r3
   34c0e:	d100      	bne.n	34c12 <memcpy+0xa>
   34c10:	bd10      	pop	{r4, pc}
   34c12:	5ccc      	ldrb	r4, [r1, r3]
   34c14:	54c4      	strb	r4, [r0, r3]
   34c16:	3301      	adds	r3, #1
   34c18:	e7f8      	b.n	34c0c <memcpy+0x4>

00034c1a <memmove>:
   34c1a:	b510      	push	{r4, lr}
   34c1c:	4288      	cmp	r0, r1
   34c1e:	d902      	bls.n	34c26 <memmove+0xc>
   34c20:	188b      	adds	r3, r1, r2
   34c22:	4298      	cmp	r0, r3
   34c24:	d308      	bcc.n	34c38 <memmove+0x1e>
   34c26:	2300      	movs	r3, #0
   34c28:	429a      	cmp	r2, r3
   34c2a:	d007      	beq.n	34c3c <memmove+0x22>
   34c2c:	5ccc      	ldrb	r4, [r1, r3]
   34c2e:	54c4      	strb	r4, [r0, r3]
   34c30:	3301      	adds	r3, #1
   34c32:	e7f9      	b.n	34c28 <memmove+0xe>
   34c34:	5c8b      	ldrb	r3, [r1, r2]
   34c36:	5483      	strb	r3, [r0, r2]
   34c38:	3a01      	subs	r2, #1
   34c3a:	d2fb      	bcs.n	34c34 <memmove+0x1a>
   34c3c:	bd10      	pop	{r4, pc}

00034c3e <memset>:
   34c3e:	0003      	movs	r3, r0
   34c40:	1882      	adds	r2, r0, r2
   34c42:	4293      	cmp	r3, r2
   34c44:	d100      	bne.n	34c48 <memset+0xa>
   34c46:	4770      	bx	lr
   34c48:	7019      	strb	r1, [r3, #0]
   34c4a:	3301      	adds	r3, #1
   34c4c:	e7f9      	b.n	34c42 <memset+0x4>
	...

00034c50 <_free_r>:
   34c50:	b570      	push	{r4, r5, r6, lr}
   34c52:	0005      	movs	r5, r0
   34c54:	2900      	cmp	r1, #0
   34c56:	d010      	beq.n	34c7a <_free_r+0x2a>
   34c58:	1f0c      	subs	r4, r1, #4
   34c5a:	6823      	ldr	r3, [r4, #0]
   34c5c:	2b00      	cmp	r3, #0
   34c5e:	da00      	bge.n	34c62 <_free_r+0x12>
   34c60:	18e4      	adds	r4, r4, r3
   34c62:	0028      	movs	r0, r5
   34c64:	f000 fdd8 	bl	35818 <__malloc_lock>
   34c68:	4a1d      	ldr	r2, [pc, #116]	; (34ce0 <_free_r+0x90>)
   34c6a:	6813      	ldr	r3, [r2, #0]
   34c6c:	2b00      	cmp	r3, #0
   34c6e:	d105      	bne.n	34c7c <_free_r+0x2c>
   34c70:	6063      	str	r3, [r4, #4]
   34c72:	6014      	str	r4, [r2, #0]
   34c74:	0028      	movs	r0, r5
   34c76:	f000 fdd0 	bl	3581a <__malloc_unlock>
   34c7a:	bd70      	pop	{r4, r5, r6, pc}
   34c7c:	42a3      	cmp	r3, r4
   34c7e:	d909      	bls.n	34c94 <_free_r+0x44>
   34c80:	6821      	ldr	r1, [r4, #0]
   34c82:	1860      	adds	r0, r4, r1
   34c84:	4283      	cmp	r3, r0
   34c86:	d1f3      	bne.n	34c70 <_free_r+0x20>
   34c88:	6818      	ldr	r0, [r3, #0]
   34c8a:	685b      	ldr	r3, [r3, #4]
   34c8c:	1841      	adds	r1, r0, r1
   34c8e:	6021      	str	r1, [r4, #0]
   34c90:	e7ee      	b.n	34c70 <_free_r+0x20>
   34c92:	0013      	movs	r3, r2
   34c94:	685a      	ldr	r2, [r3, #4]
   34c96:	2a00      	cmp	r2, #0
   34c98:	d001      	beq.n	34c9e <_free_r+0x4e>
   34c9a:	42a2      	cmp	r2, r4
   34c9c:	d9f9      	bls.n	34c92 <_free_r+0x42>
   34c9e:	6819      	ldr	r1, [r3, #0]
   34ca0:	1858      	adds	r0, r3, r1
   34ca2:	42a0      	cmp	r0, r4
   34ca4:	d10b      	bne.n	34cbe <_free_r+0x6e>
   34ca6:	6820      	ldr	r0, [r4, #0]
   34ca8:	1809      	adds	r1, r1, r0
   34caa:	1858      	adds	r0, r3, r1
   34cac:	6019      	str	r1, [r3, #0]
   34cae:	4282      	cmp	r2, r0
   34cb0:	d1e0      	bne.n	34c74 <_free_r+0x24>
   34cb2:	6810      	ldr	r0, [r2, #0]
   34cb4:	6852      	ldr	r2, [r2, #4]
   34cb6:	1841      	adds	r1, r0, r1
   34cb8:	6019      	str	r1, [r3, #0]
   34cba:	605a      	str	r2, [r3, #4]
   34cbc:	e7da      	b.n	34c74 <_free_r+0x24>
   34cbe:	42a0      	cmp	r0, r4
   34cc0:	d902      	bls.n	34cc8 <_free_r+0x78>
   34cc2:	230c      	movs	r3, #12
   34cc4:	602b      	str	r3, [r5, #0]
   34cc6:	e7d5      	b.n	34c74 <_free_r+0x24>
   34cc8:	6821      	ldr	r1, [r4, #0]
   34cca:	1860      	adds	r0, r4, r1
   34ccc:	4282      	cmp	r2, r0
   34cce:	d103      	bne.n	34cd8 <_free_r+0x88>
   34cd0:	6810      	ldr	r0, [r2, #0]
   34cd2:	6852      	ldr	r2, [r2, #4]
   34cd4:	1841      	adds	r1, r0, r1
   34cd6:	6021      	str	r1, [r4, #0]
   34cd8:	6062      	str	r2, [r4, #4]
   34cda:	605c      	str	r4, [r3, #4]
   34cdc:	e7ca      	b.n	34c74 <_free_r+0x24>
   34cde:	46c0      	nop			; (mov r8, r8)
   34ce0:	20004318 	.word	0x20004318

00034ce4 <_malloc_r>:
   34ce4:	2303      	movs	r3, #3
   34ce6:	b570      	push	{r4, r5, r6, lr}
   34ce8:	1ccd      	adds	r5, r1, #3
   34cea:	439d      	bics	r5, r3
   34cec:	3508      	adds	r5, #8
   34cee:	0006      	movs	r6, r0
   34cf0:	2d0c      	cmp	r5, #12
   34cf2:	d21e      	bcs.n	34d32 <_malloc_r+0x4e>
   34cf4:	250c      	movs	r5, #12
   34cf6:	42a9      	cmp	r1, r5
   34cf8:	d81d      	bhi.n	34d36 <_malloc_r+0x52>
   34cfa:	0030      	movs	r0, r6
   34cfc:	f000 fd8c 	bl	35818 <__malloc_lock>
   34d00:	4a25      	ldr	r2, [pc, #148]	; (34d98 <_malloc_r+0xb4>)
   34d02:	6814      	ldr	r4, [r2, #0]
   34d04:	0021      	movs	r1, r4
   34d06:	2900      	cmp	r1, #0
   34d08:	d119      	bne.n	34d3e <_malloc_r+0x5a>
   34d0a:	4c24      	ldr	r4, [pc, #144]	; (34d9c <_malloc_r+0xb8>)
   34d0c:	6823      	ldr	r3, [r4, #0]
   34d0e:	2b00      	cmp	r3, #0
   34d10:	d103      	bne.n	34d1a <_malloc_r+0x36>
   34d12:	0030      	movs	r0, r6
   34d14:	f000 f8ae 	bl	34e74 <_sbrk_r>
   34d18:	6020      	str	r0, [r4, #0]
   34d1a:	0029      	movs	r1, r5
   34d1c:	0030      	movs	r0, r6
   34d1e:	f000 f8a9 	bl	34e74 <_sbrk_r>
   34d22:	1c43      	adds	r3, r0, #1
   34d24:	d12c      	bne.n	34d80 <_malloc_r+0x9c>
   34d26:	230c      	movs	r3, #12
   34d28:	0030      	movs	r0, r6
   34d2a:	6033      	str	r3, [r6, #0]
   34d2c:	f000 fd75 	bl	3581a <__malloc_unlock>
   34d30:	e003      	b.n	34d3a <_malloc_r+0x56>
   34d32:	2d00      	cmp	r5, #0
   34d34:	dadf      	bge.n	34cf6 <_malloc_r+0x12>
   34d36:	230c      	movs	r3, #12
   34d38:	6033      	str	r3, [r6, #0]
   34d3a:	2000      	movs	r0, #0
   34d3c:	bd70      	pop	{r4, r5, r6, pc}
   34d3e:	680b      	ldr	r3, [r1, #0]
   34d40:	1b5b      	subs	r3, r3, r5
   34d42:	d41a      	bmi.n	34d7a <_malloc_r+0x96>
   34d44:	2b0b      	cmp	r3, #11
   34d46:	d903      	bls.n	34d50 <_malloc_r+0x6c>
   34d48:	600b      	str	r3, [r1, #0]
   34d4a:	18cc      	adds	r4, r1, r3
   34d4c:	6025      	str	r5, [r4, #0]
   34d4e:	e003      	b.n	34d58 <_malloc_r+0x74>
   34d50:	428c      	cmp	r4, r1
   34d52:	d10e      	bne.n	34d72 <_malloc_r+0x8e>
   34d54:	6863      	ldr	r3, [r4, #4]
   34d56:	6013      	str	r3, [r2, #0]
   34d58:	0030      	movs	r0, r6
   34d5a:	f000 fd5e 	bl	3581a <__malloc_unlock>
   34d5e:	0020      	movs	r0, r4
   34d60:	2207      	movs	r2, #7
   34d62:	300b      	adds	r0, #11
   34d64:	1d23      	adds	r3, r4, #4
   34d66:	4390      	bics	r0, r2
   34d68:	1ac3      	subs	r3, r0, r3
   34d6a:	d0e7      	beq.n	34d3c <_malloc_r+0x58>
   34d6c:	425a      	negs	r2, r3
   34d6e:	50e2      	str	r2, [r4, r3]
   34d70:	e7e4      	b.n	34d3c <_malloc_r+0x58>
   34d72:	684b      	ldr	r3, [r1, #4]
   34d74:	6063      	str	r3, [r4, #4]
   34d76:	000c      	movs	r4, r1
   34d78:	e7ee      	b.n	34d58 <_malloc_r+0x74>
   34d7a:	000c      	movs	r4, r1
   34d7c:	6849      	ldr	r1, [r1, #4]
   34d7e:	e7c2      	b.n	34d06 <_malloc_r+0x22>
   34d80:	2303      	movs	r3, #3
   34d82:	1cc4      	adds	r4, r0, #3
   34d84:	439c      	bics	r4, r3
   34d86:	42a0      	cmp	r0, r4
   34d88:	d0e0      	beq.n	34d4c <_malloc_r+0x68>
   34d8a:	1a21      	subs	r1, r4, r0
   34d8c:	0030      	movs	r0, r6
   34d8e:	f000 f871 	bl	34e74 <_sbrk_r>
   34d92:	1c43      	adds	r3, r0, #1
   34d94:	d1da      	bne.n	34d4c <_malloc_r+0x68>
   34d96:	e7c6      	b.n	34d26 <_malloc_r+0x42>
   34d98:	20004318 	.word	0x20004318
   34d9c:	2000431c 	.word	0x2000431c

00034da0 <_puts_r>:
   34da0:	b570      	push	{r4, r5, r6, lr}
   34da2:	0005      	movs	r5, r0
   34da4:	000e      	movs	r6, r1
   34da6:	2800      	cmp	r0, #0
   34da8:	d004      	beq.n	34db4 <_puts_r+0x14>
   34daa:	6983      	ldr	r3, [r0, #24]
   34dac:	2b00      	cmp	r3, #0
   34dae:	d101      	bne.n	34db4 <_puts_r+0x14>
   34db0:	f000 fc0e 	bl	355d0 <__sinit>
   34db4:	69ab      	ldr	r3, [r5, #24]
   34db6:	68ac      	ldr	r4, [r5, #8]
   34db8:	2b00      	cmp	r3, #0
   34dba:	d102      	bne.n	34dc2 <_puts_r+0x22>
   34dbc:	0028      	movs	r0, r5
   34dbe:	f000 fc07 	bl	355d0 <__sinit>
   34dc2:	4b24      	ldr	r3, [pc, #144]	; (34e54 <_puts_r+0xb4>)
   34dc4:	429c      	cmp	r4, r3
   34dc6:	d10f      	bne.n	34de8 <_puts_r+0x48>
   34dc8:	686c      	ldr	r4, [r5, #4]
   34dca:	89a3      	ldrh	r3, [r4, #12]
   34dcc:	071b      	lsls	r3, r3, #28
   34dce:	d502      	bpl.n	34dd6 <_puts_r+0x36>
   34dd0:	6923      	ldr	r3, [r4, #16]
   34dd2:	2b00      	cmp	r3, #0
   34dd4:	d120      	bne.n	34e18 <_puts_r+0x78>
   34dd6:	0021      	movs	r1, r4
   34dd8:	0028      	movs	r0, r5
   34dda:	f000 fa8b 	bl	352f4 <__swsetup_r>
   34dde:	2800      	cmp	r0, #0
   34de0:	d01a      	beq.n	34e18 <_puts_r+0x78>
   34de2:	2001      	movs	r0, #1
   34de4:	4240      	negs	r0, r0
   34de6:	bd70      	pop	{r4, r5, r6, pc}
   34de8:	4b1b      	ldr	r3, [pc, #108]	; (34e58 <_puts_r+0xb8>)
   34dea:	429c      	cmp	r4, r3
   34dec:	d101      	bne.n	34df2 <_puts_r+0x52>
   34dee:	68ac      	ldr	r4, [r5, #8]
   34df0:	e7eb      	b.n	34dca <_puts_r+0x2a>
   34df2:	4b1a      	ldr	r3, [pc, #104]	; (34e5c <_puts_r+0xbc>)
   34df4:	429c      	cmp	r4, r3
   34df6:	d1e8      	bne.n	34dca <_puts_r+0x2a>
   34df8:	68ec      	ldr	r4, [r5, #12]
   34dfa:	e7e6      	b.n	34dca <_puts_r+0x2a>
   34dfc:	3b01      	subs	r3, #1
   34dfe:	3601      	adds	r6, #1
   34e00:	60a3      	str	r3, [r4, #8]
   34e02:	2b00      	cmp	r3, #0
   34e04:	da04      	bge.n	34e10 <_puts_r+0x70>
   34e06:	69a2      	ldr	r2, [r4, #24]
   34e08:	4293      	cmp	r3, r2
   34e0a:	db16      	blt.n	34e3a <_puts_r+0x9a>
   34e0c:	290a      	cmp	r1, #10
   34e0e:	d014      	beq.n	34e3a <_puts_r+0x9a>
   34e10:	6823      	ldr	r3, [r4, #0]
   34e12:	1c5a      	adds	r2, r3, #1
   34e14:	6022      	str	r2, [r4, #0]
   34e16:	7019      	strb	r1, [r3, #0]
   34e18:	7831      	ldrb	r1, [r6, #0]
   34e1a:	68a3      	ldr	r3, [r4, #8]
   34e1c:	2900      	cmp	r1, #0
   34e1e:	d1ed      	bne.n	34dfc <_puts_r+0x5c>
   34e20:	3b01      	subs	r3, #1
   34e22:	60a3      	str	r3, [r4, #8]
   34e24:	2b00      	cmp	r3, #0
   34e26:	da0f      	bge.n	34e48 <_puts_r+0xa8>
   34e28:	0022      	movs	r2, r4
   34e2a:	310a      	adds	r1, #10
   34e2c:	0028      	movs	r0, r5
   34e2e:	f000 fa0b 	bl	35248 <__swbuf_r>
   34e32:	1c43      	adds	r3, r0, #1
   34e34:	d0d5      	beq.n	34de2 <_puts_r+0x42>
   34e36:	200a      	movs	r0, #10
   34e38:	e7d5      	b.n	34de6 <_puts_r+0x46>
   34e3a:	0022      	movs	r2, r4
   34e3c:	0028      	movs	r0, r5
   34e3e:	f000 fa03 	bl	35248 <__swbuf_r>
   34e42:	1c43      	adds	r3, r0, #1
   34e44:	d1e8      	bne.n	34e18 <_puts_r+0x78>
   34e46:	e7cc      	b.n	34de2 <_puts_r+0x42>
   34e48:	200a      	movs	r0, #10
   34e4a:	6823      	ldr	r3, [r4, #0]
   34e4c:	1c5a      	adds	r2, r3, #1
   34e4e:	6022      	str	r2, [r4, #0]
   34e50:	7018      	strb	r0, [r3, #0]
   34e52:	e7c8      	b.n	34de6 <_puts_r+0x46>
   34e54:	0003a32c 	.word	0x0003a32c
   34e58:	0003a34c 	.word	0x0003a34c
   34e5c:	0003a30c 	.word	0x0003a30c

00034e60 <puts>:
   34e60:	b510      	push	{r4, lr}
   34e62:	4b03      	ldr	r3, [pc, #12]	; (34e70 <puts+0x10>)
   34e64:	0001      	movs	r1, r0
   34e66:	6818      	ldr	r0, [r3, #0]
   34e68:	f7ff ff9a 	bl	34da0 <_puts_r>
   34e6c:	bd10      	pop	{r4, pc}
   34e6e:	46c0      	nop			; (mov r8, r8)
   34e70:	200000d4 	.word	0x200000d4

00034e74 <_sbrk_r>:
   34e74:	2300      	movs	r3, #0
   34e76:	b570      	push	{r4, r5, r6, lr}
   34e78:	4c06      	ldr	r4, [pc, #24]	; (34e94 <_sbrk_r+0x20>)
   34e7a:	0005      	movs	r5, r0
   34e7c:	0008      	movs	r0, r1
   34e7e:	6023      	str	r3, [r4, #0]
   34e80:	f7f6 fab2 	bl	2b3e8 <_sbrk>
   34e84:	1c43      	adds	r3, r0, #1
   34e86:	d103      	bne.n	34e90 <_sbrk_r+0x1c>
   34e88:	6823      	ldr	r3, [r4, #0]
   34e8a:	2b00      	cmp	r3, #0
   34e8c:	d000      	beq.n	34e90 <_sbrk_r+0x1c>
   34e8e:	602b      	str	r3, [r5, #0]
   34e90:	bd70      	pop	{r4, r5, r6, pc}
   34e92:	46c0      	nop			; (mov r8, r8)
   34e94:	2000581c 	.word	0x2000581c

00034e98 <sniprintf>:
   34e98:	b40c      	push	{r2, r3}
   34e9a:	b530      	push	{r4, r5, lr}
   34e9c:	4b16      	ldr	r3, [pc, #88]	; (34ef8 <sniprintf+0x60>)
   34e9e:	b09d      	sub	sp, #116	; 0x74
   34ea0:	1e0c      	subs	r4, r1, #0
   34ea2:	681d      	ldr	r5, [r3, #0]
   34ea4:	da08      	bge.n	34eb8 <sniprintf+0x20>
   34ea6:	238b      	movs	r3, #139	; 0x8b
   34ea8:	2001      	movs	r0, #1
   34eaa:	602b      	str	r3, [r5, #0]
   34eac:	4240      	negs	r0, r0
   34eae:	b01d      	add	sp, #116	; 0x74
   34eb0:	bc30      	pop	{r4, r5}
   34eb2:	bc08      	pop	{r3}
   34eb4:	b002      	add	sp, #8
   34eb6:	4718      	bx	r3
   34eb8:	2382      	movs	r3, #130	; 0x82
   34eba:	a902      	add	r1, sp, #8
   34ebc:	009b      	lsls	r3, r3, #2
   34ebe:	818b      	strh	r3, [r1, #12]
   34ec0:	2300      	movs	r3, #0
   34ec2:	9002      	str	r0, [sp, #8]
   34ec4:	6108      	str	r0, [r1, #16]
   34ec6:	429c      	cmp	r4, r3
   34ec8:	d000      	beq.n	34ecc <sniprintf+0x34>
   34eca:	1e63      	subs	r3, r4, #1
   34ecc:	608b      	str	r3, [r1, #8]
   34ece:	614b      	str	r3, [r1, #20]
   34ed0:	2301      	movs	r3, #1
   34ed2:	425b      	negs	r3, r3
   34ed4:	81cb      	strh	r3, [r1, #14]
   34ed6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   34ed8:	ab21      	add	r3, sp, #132	; 0x84
   34eda:	0028      	movs	r0, r5
   34edc:	9301      	str	r3, [sp, #4]
   34ede:	f000 fcff 	bl	358e0 <_svfiprintf_r>
   34ee2:	1c43      	adds	r3, r0, #1
   34ee4:	da01      	bge.n	34eea <sniprintf+0x52>
   34ee6:	238b      	movs	r3, #139	; 0x8b
   34ee8:	602b      	str	r3, [r5, #0]
   34eea:	2c00      	cmp	r4, #0
   34eec:	d0df      	beq.n	34eae <sniprintf+0x16>
   34eee:	2300      	movs	r3, #0
   34ef0:	9a02      	ldr	r2, [sp, #8]
   34ef2:	7013      	strb	r3, [r2, #0]
   34ef4:	e7db      	b.n	34eae <sniprintf+0x16>
   34ef6:	46c0      	nop			; (mov r8, r8)
   34ef8:	200000d4 	.word	0x200000d4

00034efc <siprintf>:
   34efc:	b40e      	push	{r1, r2, r3}
   34efe:	b510      	push	{r4, lr}
   34f00:	b09d      	sub	sp, #116	; 0x74
   34f02:	a902      	add	r1, sp, #8
   34f04:	9002      	str	r0, [sp, #8]
   34f06:	6108      	str	r0, [r1, #16]
   34f08:	480b      	ldr	r0, [pc, #44]	; (34f38 <siprintf+0x3c>)
   34f0a:	2482      	movs	r4, #130	; 0x82
   34f0c:	6088      	str	r0, [r1, #8]
   34f0e:	6148      	str	r0, [r1, #20]
   34f10:	2001      	movs	r0, #1
   34f12:	4240      	negs	r0, r0
   34f14:	ab1f      	add	r3, sp, #124	; 0x7c
   34f16:	81c8      	strh	r0, [r1, #14]
   34f18:	4808      	ldr	r0, [pc, #32]	; (34f3c <siprintf+0x40>)
   34f1a:	cb04      	ldmia	r3!, {r2}
   34f1c:	00a4      	lsls	r4, r4, #2
   34f1e:	6800      	ldr	r0, [r0, #0]
   34f20:	9301      	str	r3, [sp, #4]
   34f22:	818c      	strh	r4, [r1, #12]
   34f24:	f000 fcdc 	bl	358e0 <_svfiprintf_r>
   34f28:	2300      	movs	r3, #0
   34f2a:	9a02      	ldr	r2, [sp, #8]
   34f2c:	7013      	strb	r3, [r2, #0]
   34f2e:	b01d      	add	sp, #116	; 0x74
   34f30:	bc10      	pop	{r4}
   34f32:	bc08      	pop	{r3}
   34f34:	b003      	add	sp, #12
   34f36:	4718      	bx	r3
   34f38:	7fffffff 	.word	0x7fffffff
   34f3c:	200000d4 	.word	0x200000d4

00034f40 <strcasecmp>:
   34f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34f42:	0007      	movs	r7, r0
   34f44:	000e      	movs	r6, r1
   34f46:	783c      	ldrb	r4, [r7, #0]
   34f48:	f000 fbda 	bl	35700 <__locale_ctype_ptr>
   34f4c:	2203      	movs	r2, #3
   34f4e:	1900      	adds	r0, r0, r4
   34f50:	7843      	ldrb	r3, [r0, #1]
   34f52:	4013      	ands	r3, r2
   34f54:	2b01      	cmp	r3, #1
   34f56:	d100      	bne.n	34f5a <strcasecmp+0x1a>
   34f58:	3420      	adds	r4, #32
   34f5a:	7835      	ldrb	r5, [r6, #0]
   34f5c:	f000 fbd0 	bl	35700 <__locale_ctype_ptr>
   34f60:	2203      	movs	r2, #3
   34f62:	1940      	adds	r0, r0, r5
   34f64:	7843      	ldrb	r3, [r0, #1]
   34f66:	4013      	ands	r3, r2
   34f68:	2b01      	cmp	r3, #1
   34f6a:	d100      	bne.n	34f6e <strcasecmp+0x2e>
   34f6c:	3520      	adds	r5, #32
   34f6e:	1b60      	subs	r0, r4, r5
   34f70:	d103      	bne.n	34f7a <strcasecmp+0x3a>
   34f72:	3701      	adds	r7, #1
   34f74:	3601      	adds	r6, #1
   34f76:	2d00      	cmp	r5, #0
   34f78:	d1e5      	bne.n	34f46 <strcasecmp+0x6>
   34f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00034f7c <strcat>:
   34f7c:	0002      	movs	r2, r0
   34f7e:	b510      	push	{r4, lr}
   34f80:	7813      	ldrb	r3, [r2, #0]
   34f82:	2b00      	cmp	r3, #0
   34f84:	d105      	bne.n	34f92 <strcat+0x16>
   34f86:	5ccc      	ldrb	r4, [r1, r3]
   34f88:	54d4      	strb	r4, [r2, r3]
   34f8a:	3301      	adds	r3, #1
   34f8c:	2c00      	cmp	r4, #0
   34f8e:	d1fa      	bne.n	34f86 <strcat+0xa>
   34f90:	bd10      	pop	{r4, pc}
   34f92:	3201      	adds	r2, #1
   34f94:	e7f4      	b.n	34f80 <strcat+0x4>

00034f96 <strcmp>:
   34f96:	7802      	ldrb	r2, [r0, #0]
   34f98:	780b      	ldrb	r3, [r1, #0]
   34f9a:	2a00      	cmp	r2, #0
   34f9c:	d003      	beq.n	34fa6 <strcmp+0x10>
   34f9e:	3001      	adds	r0, #1
   34fa0:	3101      	adds	r1, #1
   34fa2:	429a      	cmp	r2, r3
   34fa4:	d0f7      	beq.n	34f96 <strcmp>
   34fa6:	1ad0      	subs	r0, r2, r3
   34fa8:	4770      	bx	lr

00034faa <strcpy>:
   34faa:	1c03      	adds	r3, r0, #0
   34fac:	780a      	ldrb	r2, [r1, #0]
   34fae:	3101      	adds	r1, #1
   34fb0:	701a      	strb	r2, [r3, #0]
   34fb2:	3301      	adds	r3, #1
   34fb4:	2a00      	cmp	r2, #0
   34fb6:	d1f9      	bne.n	34fac <strcpy+0x2>
   34fb8:	4770      	bx	lr
	...

00034fbc <strdup>:
   34fbc:	b510      	push	{r4, lr}
   34fbe:	4b03      	ldr	r3, [pc, #12]	; (34fcc <strdup+0x10>)
   34fc0:	0001      	movs	r1, r0
   34fc2:	6818      	ldr	r0, [r3, #0]
   34fc4:	f000 f804 	bl	34fd0 <_strdup_r>
   34fc8:	bd10      	pop	{r4, pc}
   34fca:	46c0      	nop			; (mov r8, r8)
   34fcc:	200000d4 	.word	0x200000d4

00034fd0 <_strdup_r>:
   34fd0:	b570      	push	{r4, r5, r6, lr}
   34fd2:	0005      	movs	r5, r0
   34fd4:	0008      	movs	r0, r1
   34fd6:	000e      	movs	r6, r1
   34fd8:	f000 f80d 	bl	34ff6 <strlen>
   34fdc:	1c44      	adds	r4, r0, #1
   34fde:	0021      	movs	r1, r4
   34fe0:	0028      	movs	r0, r5
   34fe2:	f7ff fe7f 	bl	34ce4 <_malloc_r>
   34fe6:	1e05      	subs	r5, r0, #0
   34fe8:	d003      	beq.n	34ff2 <_strdup_r+0x22>
   34fea:	0022      	movs	r2, r4
   34fec:	0031      	movs	r1, r6
   34fee:	f7ff fe0b 	bl	34c08 <memcpy>
   34ff2:	0028      	movs	r0, r5
   34ff4:	bd70      	pop	{r4, r5, r6, pc}

00034ff6 <strlen>:
   34ff6:	2300      	movs	r3, #0
   34ff8:	5cc2      	ldrb	r2, [r0, r3]
   34ffa:	3301      	adds	r3, #1
   34ffc:	2a00      	cmp	r2, #0
   34ffe:	d1fb      	bne.n	34ff8 <strlen+0x2>
   35000:	1e58      	subs	r0, r3, #1
   35002:	4770      	bx	lr

00035004 <strncmp>:
   35004:	2300      	movs	r3, #0
   35006:	b530      	push	{r4, r5, lr}
   35008:	429a      	cmp	r2, r3
   3500a:	d00a      	beq.n	35022 <strncmp+0x1e>
   3500c:	3a01      	subs	r2, #1
   3500e:	5cc4      	ldrb	r4, [r0, r3]
   35010:	5ccd      	ldrb	r5, [r1, r3]
   35012:	42ac      	cmp	r4, r5
   35014:	d104      	bne.n	35020 <strncmp+0x1c>
   35016:	429a      	cmp	r2, r3
   35018:	d002      	beq.n	35020 <strncmp+0x1c>
   3501a:	3301      	adds	r3, #1
   3501c:	2c00      	cmp	r4, #0
   3501e:	d1f6      	bne.n	3500e <strncmp+0xa>
   35020:	1b63      	subs	r3, r4, r5
   35022:	0018      	movs	r0, r3
   35024:	bd30      	pop	{r4, r5, pc}

00035026 <strncpy>:
   35026:	b570      	push	{r4, r5, r6, lr}
   35028:	0004      	movs	r4, r0
   3502a:	2a00      	cmp	r2, #0
   3502c:	d100      	bne.n	35030 <strncpy+0xa>
   3502e:	bd70      	pop	{r4, r5, r6, pc}
   35030:	780d      	ldrb	r5, [r1, #0]
   35032:	1e56      	subs	r6, r2, #1
   35034:	1c63      	adds	r3, r4, #1
   35036:	7025      	strb	r5, [r4, #0]
   35038:	3101      	adds	r1, #1
   3503a:	2d00      	cmp	r5, #0
   3503c:	d105      	bne.n	3504a <strncpy+0x24>
   3503e:	18a4      	adds	r4, r4, r2
   35040:	429c      	cmp	r4, r3
   35042:	d0f4      	beq.n	3502e <strncpy+0x8>
   35044:	701d      	strb	r5, [r3, #0]
   35046:	3301      	adds	r3, #1
   35048:	e7fa      	b.n	35040 <strncpy+0x1a>
   3504a:	001c      	movs	r4, r3
   3504c:	0032      	movs	r2, r6
   3504e:	e7ec      	b.n	3502a <strncpy+0x4>

00035050 <strrchr>:
   35050:	b570      	push	{r4, r5, r6, lr}
   35052:	000d      	movs	r5, r1
   35054:	2400      	movs	r4, #0
   35056:	2900      	cmp	r1, #0
   35058:	d105      	bne.n	35066 <strrchr+0x16>
   3505a:	f000 ff19 	bl	35e90 <strchr>
   3505e:	0004      	movs	r4, r0
   35060:	e006      	b.n	35070 <strrchr+0x20>
   35062:	001c      	movs	r4, r3
   35064:	1c58      	adds	r0, r3, #1
   35066:	0029      	movs	r1, r5
   35068:	f000 ff12 	bl	35e90 <strchr>
   3506c:	1e03      	subs	r3, r0, #0
   3506e:	d1f8      	bne.n	35062 <strrchr+0x12>
   35070:	0020      	movs	r0, r4
   35072:	bd70      	pop	{r4, r5, r6, pc}

00035074 <strstr>:
   35074:	b510      	push	{r4, lr}
   35076:	0002      	movs	r2, r0
   35078:	7800      	ldrb	r0, [r0, #0]
   3507a:	2800      	cmp	r0, #0
   3507c:	d104      	bne.n	35088 <strstr+0x14>
   3507e:	7809      	ldrb	r1, [r1, #0]
   35080:	2900      	cmp	r1, #0
   35082:	d00d      	beq.n	350a0 <strstr+0x2c>
   35084:	bd10      	pop	{r4, pc}
   35086:	3201      	adds	r2, #1
   35088:	7810      	ldrb	r0, [r2, #0]
   3508a:	2800      	cmp	r0, #0
   3508c:	d0fa      	beq.n	35084 <strstr+0x10>
   3508e:	2300      	movs	r3, #0
   35090:	5cc8      	ldrb	r0, [r1, r3]
   35092:	2800      	cmp	r0, #0
   35094:	d004      	beq.n	350a0 <strstr+0x2c>
   35096:	5cd4      	ldrb	r4, [r2, r3]
   35098:	4284      	cmp	r4, r0
   3509a:	d1f4      	bne.n	35086 <strstr+0x12>
   3509c:	3301      	adds	r3, #1
   3509e:	e7f7      	b.n	35090 <strstr+0x1c>
   350a0:	0010      	movs	r0, r2
   350a2:	e7ef      	b.n	35084 <strstr+0x10>

000350a4 <_strtol_l.isra.0>:
   350a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   350a6:	001f      	movs	r7, r3
   350a8:	000e      	movs	r6, r1
   350aa:	b087      	sub	sp, #28
   350ac:	9005      	str	r0, [sp, #20]
   350ae:	9103      	str	r1, [sp, #12]
   350b0:	9202      	str	r2, [sp, #8]
   350b2:	980c      	ldr	r0, [sp, #48]	; 0x30
   350b4:	7834      	ldrb	r4, [r6, #0]
   350b6:	f000 fb20 	bl	356fa <__locale_ctype_ptr_l>
   350ba:	2208      	movs	r2, #8
   350bc:	1900      	adds	r0, r0, r4
   350be:	7843      	ldrb	r3, [r0, #1]
   350c0:	1c75      	adds	r5, r6, #1
   350c2:	4013      	ands	r3, r2
   350c4:	d10c      	bne.n	350e0 <_strtol_l.isra.0+0x3c>
   350c6:	2c2d      	cmp	r4, #45	; 0x2d
   350c8:	d10c      	bne.n	350e4 <_strtol_l.isra.0+0x40>
   350ca:	3301      	adds	r3, #1
   350cc:	782c      	ldrb	r4, [r5, #0]
   350ce:	9301      	str	r3, [sp, #4]
   350d0:	1cb5      	adds	r5, r6, #2
   350d2:	2f00      	cmp	r7, #0
   350d4:	d00c      	beq.n	350f0 <_strtol_l.isra.0+0x4c>
   350d6:	2f10      	cmp	r7, #16
   350d8:	d114      	bne.n	35104 <_strtol_l.isra.0+0x60>
   350da:	2c30      	cmp	r4, #48	; 0x30
   350dc:	d00a      	beq.n	350f4 <_strtol_l.isra.0+0x50>
   350de:	e011      	b.n	35104 <_strtol_l.isra.0+0x60>
   350e0:	002e      	movs	r6, r5
   350e2:	e7e6      	b.n	350b2 <_strtol_l.isra.0+0xe>
   350e4:	9301      	str	r3, [sp, #4]
   350e6:	2c2b      	cmp	r4, #43	; 0x2b
   350e8:	d1f3      	bne.n	350d2 <_strtol_l.isra.0+0x2e>
   350ea:	782c      	ldrb	r4, [r5, #0]
   350ec:	1cb5      	adds	r5, r6, #2
   350ee:	e7f0      	b.n	350d2 <_strtol_l.isra.0+0x2e>
   350f0:	2c30      	cmp	r4, #48	; 0x30
   350f2:	d12f      	bne.n	35154 <_strtol_l.isra.0+0xb0>
   350f4:	2220      	movs	r2, #32
   350f6:	782b      	ldrb	r3, [r5, #0]
   350f8:	4393      	bics	r3, r2
   350fa:	2b58      	cmp	r3, #88	; 0x58
   350fc:	d151      	bne.n	351a2 <_strtol_l.isra.0+0xfe>
   350fe:	2710      	movs	r7, #16
   35100:	786c      	ldrb	r4, [r5, #1]
   35102:	3502      	adds	r5, #2
   35104:	9b01      	ldr	r3, [sp, #4]
   35106:	4a29      	ldr	r2, [pc, #164]	; (351ac <_strtol_l.isra.0+0x108>)
   35108:	0039      	movs	r1, r7
   3510a:	189e      	adds	r6, r3, r2
   3510c:	0030      	movs	r0, r6
   3510e:	f7fd fe2f 	bl	32d70 <__aeabi_uidivmod>
   35112:	0030      	movs	r0, r6
   35114:	9104      	str	r1, [sp, #16]
   35116:	0039      	movs	r1, r7
   35118:	f7fd fda4 	bl	32c64 <__udivsi3>
   3511c:	2101      	movs	r1, #1
   3511e:	2300      	movs	r3, #0
   35120:	4249      	negs	r1, r1
   35122:	0002      	movs	r2, r0
   35124:	468c      	mov	ip, r1
   35126:	0018      	movs	r0, r3
   35128:	0021      	movs	r1, r4
   3512a:	3930      	subs	r1, #48	; 0x30
   3512c:	2909      	cmp	r1, #9
   3512e:	d813      	bhi.n	35158 <_strtol_l.isra.0+0xb4>
   35130:	000c      	movs	r4, r1
   35132:	42a7      	cmp	r7, r4
   35134:	dd1c      	ble.n	35170 <_strtol_l.isra.0+0xcc>
   35136:	1c59      	adds	r1, r3, #1
   35138:	d009      	beq.n	3514e <_strtol_l.isra.0+0xaa>
   3513a:	4663      	mov	r3, ip
   3513c:	4282      	cmp	r2, r0
   3513e:	d306      	bcc.n	3514e <_strtol_l.isra.0+0xaa>
   35140:	d102      	bne.n	35148 <_strtol_l.isra.0+0xa4>
   35142:	9904      	ldr	r1, [sp, #16]
   35144:	42a1      	cmp	r1, r4
   35146:	db02      	blt.n	3514e <_strtol_l.isra.0+0xaa>
   35148:	2301      	movs	r3, #1
   3514a:	4378      	muls	r0, r7
   3514c:	1820      	adds	r0, r4, r0
   3514e:	782c      	ldrb	r4, [r5, #0]
   35150:	3501      	adds	r5, #1
   35152:	e7e9      	b.n	35128 <_strtol_l.isra.0+0x84>
   35154:	270a      	movs	r7, #10
   35156:	e7d5      	b.n	35104 <_strtol_l.isra.0+0x60>
   35158:	0021      	movs	r1, r4
   3515a:	3941      	subs	r1, #65	; 0x41
   3515c:	2919      	cmp	r1, #25
   3515e:	d801      	bhi.n	35164 <_strtol_l.isra.0+0xc0>
   35160:	3c37      	subs	r4, #55	; 0x37
   35162:	e7e6      	b.n	35132 <_strtol_l.isra.0+0x8e>
   35164:	0021      	movs	r1, r4
   35166:	3961      	subs	r1, #97	; 0x61
   35168:	2919      	cmp	r1, #25
   3516a:	d801      	bhi.n	35170 <_strtol_l.isra.0+0xcc>
   3516c:	3c57      	subs	r4, #87	; 0x57
   3516e:	e7e0      	b.n	35132 <_strtol_l.isra.0+0x8e>
   35170:	1c5a      	adds	r2, r3, #1
   35172:	d108      	bne.n	35186 <_strtol_l.isra.0+0xe2>
   35174:	9a05      	ldr	r2, [sp, #20]
   35176:	3323      	adds	r3, #35	; 0x23
   35178:	6013      	str	r3, [r2, #0]
   3517a:	9b02      	ldr	r3, [sp, #8]
   3517c:	0030      	movs	r0, r6
   3517e:	2b00      	cmp	r3, #0
   35180:	d10b      	bne.n	3519a <_strtol_l.isra.0+0xf6>
   35182:	b007      	add	sp, #28
   35184:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35186:	9a01      	ldr	r2, [sp, #4]
   35188:	2a00      	cmp	r2, #0
   3518a:	d000      	beq.n	3518e <_strtol_l.isra.0+0xea>
   3518c:	4240      	negs	r0, r0
   3518e:	9a02      	ldr	r2, [sp, #8]
   35190:	2a00      	cmp	r2, #0
   35192:	d0f6      	beq.n	35182 <_strtol_l.isra.0+0xde>
   35194:	9a03      	ldr	r2, [sp, #12]
   35196:	2b00      	cmp	r3, #0
   35198:	d000      	beq.n	3519c <_strtol_l.isra.0+0xf8>
   3519a:	1e6a      	subs	r2, r5, #1
   3519c:	9b02      	ldr	r3, [sp, #8]
   3519e:	601a      	str	r2, [r3, #0]
   351a0:	e7ef      	b.n	35182 <_strtol_l.isra.0+0xde>
   351a2:	2430      	movs	r4, #48	; 0x30
   351a4:	2f00      	cmp	r7, #0
   351a6:	d1ad      	bne.n	35104 <_strtol_l.isra.0+0x60>
   351a8:	3708      	adds	r7, #8
   351aa:	e7ab      	b.n	35104 <_strtol_l.isra.0+0x60>
   351ac:	7fffffff 	.word	0x7fffffff

000351b0 <strtol>:
   351b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   351b2:	0013      	movs	r3, r2
   351b4:	4a06      	ldr	r2, [pc, #24]	; (351d0 <strtol+0x20>)
   351b6:	0005      	movs	r5, r0
   351b8:	6810      	ldr	r0, [r2, #0]
   351ba:	6a04      	ldr	r4, [r0, #32]
   351bc:	2c00      	cmp	r4, #0
   351be:	d100      	bne.n	351c2 <strtol+0x12>
   351c0:	4c04      	ldr	r4, [pc, #16]	; (351d4 <strtol+0x24>)
   351c2:	000a      	movs	r2, r1
   351c4:	9400      	str	r4, [sp, #0]
   351c6:	0029      	movs	r1, r5
   351c8:	f7ff ff6c 	bl	350a4 <_strtol_l.isra.0>
   351cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   351ce:	46c0      	nop			; (mov r8, r8)
   351d0:	200000d4 	.word	0x200000d4
   351d4:	20000138 	.word	0x20000138

000351d8 <_vsniprintf_r>:
   351d8:	b530      	push	{r4, r5, lr}
   351da:	0014      	movs	r4, r2
   351dc:	b09b      	sub	sp, #108	; 0x6c
   351de:	0005      	movs	r5, r0
   351e0:	001a      	movs	r2, r3
   351e2:	2c00      	cmp	r4, #0
   351e4:	da05      	bge.n	351f2 <_vsniprintf_r+0x1a>
   351e6:	238b      	movs	r3, #139	; 0x8b
   351e8:	6003      	str	r3, [r0, #0]
   351ea:	2001      	movs	r0, #1
   351ec:	4240      	negs	r0, r0
   351ee:	b01b      	add	sp, #108	; 0x6c
   351f0:	bd30      	pop	{r4, r5, pc}
   351f2:	2382      	movs	r3, #130	; 0x82
   351f4:	4668      	mov	r0, sp
   351f6:	009b      	lsls	r3, r3, #2
   351f8:	8183      	strh	r3, [r0, #12]
   351fa:	2300      	movs	r3, #0
   351fc:	9100      	str	r1, [sp, #0]
   351fe:	9104      	str	r1, [sp, #16]
   35200:	429c      	cmp	r4, r3
   35202:	d000      	beq.n	35206 <_vsniprintf_r+0x2e>
   35204:	1e63      	subs	r3, r4, #1
   35206:	9302      	str	r3, [sp, #8]
   35208:	9305      	str	r3, [sp, #20]
   3520a:	2301      	movs	r3, #1
   3520c:	4669      	mov	r1, sp
   3520e:	425b      	negs	r3, r3
   35210:	81cb      	strh	r3, [r1, #14]
   35212:	0028      	movs	r0, r5
   35214:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35216:	f000 fb63 	bl	358e0 <_svfiprintf_r>
   3521a:	1c43      	adds	r3, r0, #1
   3521c:	da01      	bge.n	35222 <_vsniprintf_r+0x4a>
   3521e:	238b      	movs	r3, #139	; 0x8b
   35220:	602b      	str	r3, [r5, #0]
   35222:	2c00      	cmp	r4, #0
   35224:	d0e3      	beq.n	351ee <_vsniprintf_r+0x16>
   35226:	2300      	movs	r3, #0
   35228:	9a00      	ldr	r2, [sp, #0]
   3522a:	7013      	strb	r3, [r2, #0]
   3522c:	e7df      	b.n	351ee <_vsniprintf_r+0x16>
	...

00035230 <vsniprintf>:
   35230:	b507      	push	{r0, r1, r2, lr}
   35232:	9300      	str	r3, [sp, #0]
   35234:	0013      	movs	r3, r2
   35236:	000a      	movs	r2, r1
   35238:	0001      	movs	r1, r0
   3523a:	4802      	ldr	r0, [pc, #8]	; (35244 <vsniprintf+0x14>)
   3523c:	6800      	ldr	r0, [r0, #0]
   3523e:	f7ff ffcb 	bl	351d8 <_vsniprintf_r>
   35242:	bd0e      	pop	{r1, r2, r3, pc}
   35244:	200000d4 	.word	0x200000d4

00035248 <__swbuf_r>:
   35248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3524a:	0005      	movs	r5, r0
   3524c:	000e      	movs	r6, r1
   3524e:	0014      	movs	r4, r2
   35250:	2800      	cmp	r0, #0
   35252:	d004      	beq.n	3525e <__swbuf_r+0x16>
   35254:	6983      	ldr	r3, [r0, #24]
   35256:	2b00      	cmp	r3, #0
   35258:	d101      	bne.n	3525e <__swbuf_r+0x16>
   3525a:	f000 f9b9 	bl	355d0 <__sinit>
   3525e:	4b22      	ldr	r3, [pc, #136]	; (352e8 <__swbuf_r+0xa0>)
   35260:	429c      	cmp	r4, r3
   35262:	d12d      	bne.n	352c0 <__swbuf_r+0x78>
   35264:	686c      	ldr	r4, [r5, #4]
   35266:	69a3      	ldr	r3, [r4, #24]
   35268:	60a3      	str	r3, [r4, #8]
   3526a:	89a3      	ldrh	r3, [r4, #12]
   3526c:	071b      	lsls	r3, r3, #28
   3526e:	d531      	bpl.n	352d4 <__swbuf_r+0x8c>
   35270:	6923      	ldr	r3, [r4, #16]
   35272:	2b00      	cmp	r3, #0
   35274:	d02e      	beq.n	352d4 <__swbuf_r+0x8c>
   35276:	6823      	ldr	r3, [r4, #0]
   35278:	6922      	ldr	r2, [r4, #16]
   3527a:	b2f7      	uxtb	r7, r6
   3527c:	1a98      	subs	r0, r3, r2
   3527e:	6963      	ldr	r3, [r4, #20]
   35280:	b2f6      	uxtb	r6, r6
   35282:	4298      	cmp	r0, r3
   35284:	db05      	blt.n	35292 <__swbuf_r+0x4a>
   35286:	0021      	movs	r1, r4
   35288:	0028      	movs	r0, r5
   3528a:	f000 f933 	bl	354f4 <_fflush_r>
   3528e:	2800      	cmp	r0, #0
   35290:	d126      	bne.n	352e0 <__swbuf_r+0x98>
   35292:	68a3      	ldr	r3, [r4, #8]
   35294:	3001      	adds	r0, #1
   35296:	3b01      	subs	r3, #1
   35298:	60a3      	str	r3, [r4, #8]
   3529a:	6823      	ldr	r3, [r4, #0]
   3529c:	1c5a      	adds	r2, r3, #1
   3529e:	6022      	str	r2, [r4, #0]
   352a0:	701f      	strb	r7, [r3, #0]
   352a2:	6963      	ldr	r3, [r4, #20]
   352a4:	4298      	cmp	r0, r3
   352a6:	d004      	beq.n	352b2 <__swbuf_r+0x6a>
   352a8:	89a3      	ldrh	r3, [r4, #12]
   352aa:	07db      	lsls	r3, r3, #31
   352ac:	d51a      	bpl.n	352e4 <__swbuf_r+0x9c>
   352ae:	2e0a      	cmp	r6, #10
   352b0:	d118      	bne.n	352e4 <__swbuf_r+0x9c>
   352b2:	0021      	movs	r1, r4
   352b4:	0028      	movs	r0, r5
   352b6:	f000 f91d 	bl	354f4 <_fflush_r>
   352ba:	2800      	cmp	r0, #0
   352bc:	d012      	beq.n	352e4 <__swbuf_r+0x9c>
   352be:	e00f      	b.n	352e0 <__swbuf_r+0x98>
   352c0:	4b0a      	ldr	r3, [pc, #40]	; (352ec <__swbuf_r+0xa4>)
   352c2:	429c      	cmp	r4, r3
   352c4:	d101      	bne.n	352ca <__swbuf_r+0x82>
   352c6:	68ac      	ldr	r4, [r5, #8]
   352c8:	e7cd      	b.n	35266 <__swbuf_r+0x1e>
   352ca:	4b09      	ldr	r3, [pc, #36]	; (352f0 <__swbuf_r+0xa8>)
   352cc:	429c      	cmp	r4, r3
   352ce:	d1ca      	bne.n	35266 <__swbuf_r+0x1e>
   352d0:	68ec      	ldr	r4, [r5, #12]
   352d2:	e7c8      	b.n	35266 <__swbuf_r+0x1e>
   352d4:	0021      	movs	r1, r4
   352d6:	0028      	movs	r0, r5
   352d8:	f000 f80c 	bl	352f4 <__swsetup_r>
   352dc:	2800      	cmp	r0, #0
   352de:	d0ca      	beq.n	35276 <__swbuf_r+0x2e>
   352e0:	2601      	movs	r6, #1
   352e2:	4276      	negs	r6, r6
   352e4:	0030      	movs	r0, r6
   352e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   352e8:	0003a32c 	.word	0x0003a32c
   352ec:	0003a34c 	.word	0x0003a34c
   352f0:	0003a30c 	.word	0x0003a30c

000352f4 <__swsetup_r>:
   352f4:	4b36      	ldr	r3, [pc, #216]	; (353d0 <__swsetup_r+0xdc>)
   352f6:	b570      	push	{r4, r5, r6, lr}
   352f8:	681d      	ldr	r5, [r3, #0]
   352fa:	0006      	movs	r6, r0
   352fc:	000c      	movs	r4, r1
   352fe:	2d00      	cmp	r5, #0
   35300:	d005      	beq.n	3530e <__swsetup_r+0x1a>
   35302:	69ab      	ldr	r3, [r5, #24]
   35304:	2b00      	cmp	r3, #0
   35306:	d102      	bne.n	3530e <__swsetup_r+0x1a>
   35308:	0028      	movs	r0, r5
   3530a:	f000 f961 	bl	355d0 <__sinit>
   3530e:	4b31      	ldr	r3, [pc, #196]	; (353d4 <__swsetup_r+0xe0>)
   35310:	429c      	cmp	r4, r3
   35312:	d10f      	bne.n	35334 <__swsetup_r+0x40>
   35314:	686c      	ldr	r4, [r5, #4]
   35316:	230c      	movs	r3, #12
   35318:	5ee2      	ldrsh	r2, [r4, r3]
   3531a:	b293      	uxth	r3, r2
   3531c:	0719      	lsls	r1, r3, #28
   3531e:	d42d      	bmi.n	3537c <__swsetup_r+0x88>
   35320:	06d9      	lsls	r1, r3, #27
   35322:	d411      	bmi.n	35348 <__swsetup_r+0x54>
   35324:	2309      	movs	r3, #9
   35326:	2001      	movs	r0, #1
   35328:	6033      	str	r3, [r6, #0]
   3532a:	3337      	adds	r3, #55	; 0x37
   3532c:	4313      	orrs	r3, r2
   3532e:	81a3      	strh	r3, [r4, #12]
   35330:	4240      	negs	r0, r0
   35332:	bd70      	pop	{r4, r5, r6, pc}
   35334:	4b28      	ldr	r3, [pc, #160]	; (353d8 <__swsetup_r+0xe4>)
   35336:	429c      	cmp	r4, r3
   35338:	d101      	bne.n	3533e <__swsetup_r+0x4a>
   3533a:	68ac      	ldr	r4, [r5, #8]
   3533c:	e7eb      	b.n	35316 <__swsetup_r+0x22>
   3533e:	4b27      	ldr	r3, [pc, #156]	; (353dc <__swsetup_r+0xe8>)
   35340:	429c      	cmp	r4, r3
   35342:	d1e8      	bne.n	35316 <__swsetup_r+0x22>
   35344:	68ec      	ldr	r4, [r5, #12]
   35346:	e7e6      	b.n	35316 <__swsetup_r+0x22>
   35348:	075b      	lsls	r3, r3, #29
   3534a:	d513      	bpl.n	35374 <__swsetup_r+0x80>
   3534c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3534e:	2900      	cmp	r1, #0
   35350:	d008      	beq.n	35364 <__swsetup_r+0x70>
   35352:	0023      	movs	r3, r4
   35354:	3344      	adds	r3, #68	; 0x44
   35356:	4299      	cmp	r1, r3
   35358:	d002      	beq.n	35360 <__swsetup_r+0x6c>
   3535a:	0030      	movs	r0, r6
   3535c:	f7ff fc78 	bl	34c50 <_free_r>
   35360:	2300      	movs	r3, #0
   35362:	6363      	str	r3, [r4, #52]	; 0x34
   35364:	2224      	movs	r2, #36	; 0x24
   35366:	89a3      	ldrh	r3, [r4, #12]
   35368:	4393      	bics	r3, r2
   3536a:	81a3      	strh	r3, [r4, #12]
   3536c:	2300      	movs	r3, #0
   3536e:	6063      	str	r3, [r4, #4]
   35370:	6923      	ldr	r3, [r4, #16]
   35372:	6023      	str	r3, [r4, #0]
   35374:	2308      	movs	r3, #8
   35376:	89a2      	ldrh	r2, [r4, #12]
   35378:	4313      	orrs	r3, r2
   3537a:	81a3      	strh	r3, [r4, #12]
   3537c:	6923      	ldr	r3, [r4, #16]
   3537e:	2b00      	cmp	r3, #0
   35380:	d10b      	bne.n	3539a <__swsetup_r+0xa6>
   35382:	21a0      	movs	r1, #160	; 0xa0
   35384:	2280      	movs	r2, #128	; 0x80
   35386:	89a3      	ldrh	r3, [r4, #12]
   35388:	0089      	lsls	r1, r1, #2
   3538a:	0092      	lsls	r2, r2, #2
   3538c:	400b      	ands	r3, r1
   3538e:	4293      	cmp	r3, r2
   35390:	d003      	beq.n	3539a <__swsetup_r+0xa6>
   35392:	0021      	movs	r1, r4
   35394:	0030      	movs	r0, r6
   35396:	f000 f9e9 	bl	3576c <__smakebuf_r>
   3539a:	2301      	movs	r3, #1
   3539c:	89a2      	ldrh	r2, [r4, #12]
   3539e:	4013      	ands	r3, r2
   353a0:	d011      	beq.n	353c6 <__swsetup_r+0xd2>
   353a2:	2300      	movs	r3, #0
   353a4:	60a3      	str	r3, [r4, #8]
   353a6:	6963      	ldr	r3, [r4, #20]
   353a8:	425b      	negs	r3, r3
   353aa:	61a3      	str	r3, [r4, #24]
   353ac:	2000      	movs	r0, #0
   353ae:	6923      	ldr	r3, [r4, #16]
   353b0:	4283      	cmp	r3, r0
   353b2:	d1be      	bne.n	35332 <__swsetup_r+0x3e>
   353b4:	230c      	movs	r3, #12
   353b6:	5ee2      	ldrsh	r2, [r4, r3]
   353b8:	0613      	lsls	r3, r2, #24
   353ba:	d5ba      	bpl.n	35332 <__swsetup_r+0x3e>
   353bc:	2340      	movs	r3, #64	; 0x40
   353be:	4313      	orrs	r3, r2
   353c0:	81a3      	strh	r3, [r4, #12]
   353c2:	3801      	subs	r0, #1
   353c4:	e7b5      	b.n	35332 <__swsetup_r+0x3e>
   353c6:	0792      	lsls	r2, r2, #30
   353c8:	d400      	bmi.n	353cc <__swsetup_r+0xd8>
   353ca:	6963      	ldr	r3, [r4, #20]
   353cc:	60a3      	str	r3, [r4, #8]
   353ce:	e7ed      	b.n	353ac <__swsetup_r+0xb8>
   353d0:	200000d4 	.word	0x200000d4
   353d4:	0003a32c 	.word	0x0003a32c
   353d8:	0003a34c 	.word	0x0003a34c
   353dc:	0003a30c 	.word	0x0003a30c

000353e0 <__sflush_r>:
   353e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   353e2:	898a      	ldrh	r2, [r1, #12]
   353e4:	0005      	movs	r5, r0
   353e6:	000c      	movs	r4, r1
   353e8:	0713      	lsls	r3, r2, #28
   353ea:	d460      	bmi.n	354ae <__sflush_r+0xce>
   353ec:	684b      	ldr	r3, [r1, #4]
   353ee:	2b00      	cmp	r3, #0
   353f0:	dc04      	bgt.n	353fc <__sflush_r+0x1c>
   353f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   353f4:	2b00      	cmp	r3, #0
   353f6:	dc01      	bgt.n	353fc <__sflush_r+0x1c>
   353f8:	2000      	movs	r0, #0
   353fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   353fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   353fe:	2f00      	cmp	r7, #0
   35400:	d0fa      	beq.n	353f8 <__sflush_r+0x18>
   35402:	2300      	movs	r3, #0
   35404:	682e      	ldr	r6, [r5, #0]
   35406:	602b      	str	r3, [r5, #0]
   35408:	2380      	movs	r3, #128	; 0x80
   3540a:	015b      	lsls	r3, r3, #5
   3540c:	401a      	ands	r2, r3
   3540e:	d034      	beq.n	3547a <__sflush_r+0x9a>
   35410:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35412:	89a3      	ldrh	r3, [r4, #12]
   35414:	075b      	lsls	r3, r3, #29
   35416:	d506      	bpl.n	35426 <__sflush_r+0x46>
   35418:	6863      	ldr	r3, [r4, #4]
   3541a:	1ac0      	subs	r0, r0, r3
   3541c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3541e:	2b00      	cmp	r3, #0
   35420:	d001      	beq.n	35426 <__sflush_r+0x46>
   35422:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35424:	1ac0      	subs	r0, r0, r3
   35426:	0002      	movs	r2, r0
   35428:	6a21      	ldr	r1, [r4, #32]
   3542a:	2300      	movs	r3, #0
   3542c:	0028      	movs	r0, r5
   3542e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35430:	47b8      	blx	r7
   35432:	89a1      	ldrh	r1, [r4, #12]
   35434:	1c43      	adds	r3, r0, #1
   35436:	d106      	bne.n	35446 <__sflush_r+0x66>
   35438:	682b      	ldr	r3, [r5, #0]
   3543a:	2b1d      	cmp	r3, #29
   3543c:	d831      	bhi.n	354a2 <__sflush_r+0xc2>
   3543e:	4a2c      	ldr	r2, [pc, #176]	; (354f0 <__sflush_r+0x110>)
   35440:	40da      	lsrs	r2, r3
   35442:	07d3      	lsls	r3, r2, #31
   35444:	d52d      	bpl.n	354a2 <__sflush_r+0xc2>
   35446:	2300      	movs	r3, #0
   35448:	6063      	str	r3, [r4, #4]
   3544a:	6923      	ldr	r3, [r4, #16]
   3544c:	6023      	str	r3, [r4, #0]
   3544e:	04cb      	lsls	r3, r1, #19
   35450:	d505      	bpl.n	3545e <__sflush_r+0x7e>
   35452:	1c43      	adds	r3, r0, #1
   35454:	d102      	bne.n	3545c <__sflush_r+0x7c>
   35456:	682b      	ldr	r3, [r5, #0]
   35458:	2b00      	cmp	r3, #0
   3545a:	d100      	bne.n	3545e <__sflush_r+0x7e>
   3545c:	6560      	str	r0, [r4, #84]	; 0x54
   3545e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35460:	602e      	str	r6, [r5, #0]
   35462:	2900      	cmp	r1, #0
   35464:	d0c8      	beq.n	353f8 <__sflush_r+0x18>
   35466:	0023      	movs	r3, r4
   35468:	3344      	adds	r3, #68	; 0x44
   3546a:	4299      	cmp	r1, r3
   3546c:	d002      	beq.n	35474 <__sflush_r+0x94>
   3546e:	0028      	movs	r0, r5
   35470:	f7ff fbee 	bl	34c50 <_free_r>
   35474:	2000      	movs	r0, #0
   35476:	6360      	str	r0, [r4, #52]	; 0x34
   35478:	e7bf      	b.n	353fa <__sflush_r+0x1a>
   3547a:	2301      	movs	r3, #1
   3547c:	6a21      	ldr	r1, [r4, #32]
   3547e:	0028      	movs	r0, r5
   35480:	47b8      	blx	r7
   35482:	1c43      	adds	r3, r0, #1
   35484:	d1c5      	bne.n	35412 <__sflush_r+0x32>
   35486:	682b      	ldr	r3, [r5, #0]
   35488:	2b00      	cmp	r3, #0
   3548a:	d0c2      	beq.n	35412 <__sflush_r+0x32>
   3548c:	2b1d      	cmp	r3, #29
   3548e:	d001      	beq.n	35494 <__sflush_r+0xb4>
   35490:	2b16      	cmp	r3, #22
   35492:	d101      	bne.n	35498 <__sflush_r+0xb8>
   35494:	602e      	str	r6, [r5, #0]
   35496:	e7af      	b.n	353f8 <__sflush_r+0x18>
   35498:	2340      	movs	r3, #64	; 0x40
   3549a:	89a2      	ldrh	r2, [r4, #12]
   3549c:	4313      	orrs	r3, r2
   3549e:	81a3      	strh	r3, [r4, #12]
   354a0:	e7ab      	b.n	353fa <__sflush_r+0x1a>
   354a2:	2340      	movs	r3, #64	; 0x40
   354a4:	430b      	orrs	r3, r1
   354a6:	2001      	movs	r0, #1
   354a8:	81a3      	strh	r3, [r4, #12]
   354aa:	4240      	negs	r0, r0
   354ac:	e7a5      	b.n	353fa <__sflush_r+0x1a>
   354ae:	690f      	ldr	r7, [r1, #16]
   354b0:	2f00      	cmp	r7, #0
   354b2:	d0a1      	beq.n	353f8 <__sflush_r+0x18>
   354b4:	680b      	ldr	r3, [r1, #0]
   354b6:	600f      	str	r7, [r1, #0]
   354b8:	1bdb      	subs	r3, r3, r7
   354ba:	9301      	str	r3, [sp, #4]
   354bc:	2300      	movs	r3, #0
   354be:	0792      	lsls	r2, r2, #30
   354c0:	d100      	bne.n	354c4 <__sflush_r+0xe4>
   354c2:	694b      	ldr	r3, [r1, #20]
   354c4:	60a3      	str	r3, [r4, #8]
   354c6:	9b01      	ldr	r3, [sp, #4]
   354c8:	2b00      	cmp	r3, #0
   354ca:	dc00      	bgt.n	354ce <__sflush_r+0xee>
   354cc:	e794      	b.n	353f8 <__sflush_r+0x18>
   354ce:	9b01      	ldr	r3, [sp, #4]
   354d0:	003a      	movs	r2, r7
   354d2:	6a21      	ldr	r1, [r4, #32]
   354d4:	0028      	movs	r0, r5
   354d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   354d8:	47b0      	blx	r6
   354da:	2800      	cmp	r0, #0
   354dc:	dc03      	bgt.n	354e6 <__sflush_r+0x106>
   354de:	2340      	movs	r3, #64	; 0x40
   354e0:	89a2      	ldrh	r2, [r4, #12]
   354e2:	4313      	orrs	r3, r2
   354e4:	e7df      	b.n	354a6 <__sflush_r+0xc6>
   354e6:	9b01      	ldr	r3, [sp, #4]
   354e8:	183f      	adds	r7, r7, r0
   354ea:	1a1b      	subs	r3, r3, r0
   354ec:	9301      	str	r3, [sp, #4]
   354ee:	e7ea      	b.n	354c6 <__sflush_r+0xe6>
   354f0:	20400001 	.word	0x20400001

000354f4 <_fflush_r>:
   354f4:	690b      	ldr	r3, [r1, #16]
   354f6:	b570      	push	{r4, r5, r6, lr}
   354f8:	0005      	movs	r5, r0
   354fa:	000c      	movs	r4, r1
   354fc:	2b00      	cmp	r3, #0
   354fe:	d101      	bne.n	35504 <_fflush_r+0x10>
   35500:	2000      	movs	r0, #0
   35502:	bd70      	pop	{r4, r5, r6, pc}
   35504:	2800      	cmp	r0, #0
   35506:	d004      	beq.n	35512 <_fflush_r+0x1e>
   35508:	6983      	ldr	r3, [r0, #24]
   3550a:	2b00      	cmp	r3, #0
   3550c:	d101      	bne.n	35512 <_fflush_r+0x1e>
   3550e:	f000 f85f 	bl	355d0 <__sinit>
   35512:	4b0b      	ldr	r3, [pc, #44]	; (35540 <_fflush_r+0x4c>)
   35514:	429c      	cmp	r4, r3
   35516:	d109      	bne.n	3552c <_fflush_r+0x38>
   35518:	686c      	ldr	r4, [r5, #4]
   3551a:	220c      	movs	r2, #12
   3551c:	5ea3      	ldrsh	r3, [r4, r2]
   3551e:	2b00      	cmp	r3, #0
   35520:	d0ee      	beq.n	35500 <_fflush_r+0xc>
   35522:	0021      	movs	r1, r4
   35524:	0028      	movs	r0, r5
   35526:	f7ff ff5b 	bl	353e0 <__sflush_r>
   3552a:	e7ea      	b.n	35502 <_fflush_r+0xe>
   3552c:	4b05      	ldr	r3, [pc, #20]	; (35544 <_fflush_r+0x50>)
   3552e:	429c      	cmp	r4, r3
   35530:	d101      	bne.n	35536 <_fflush_r+0x42>
   35532:	68ac      	ldr	r4, [r5, #8]
   35534:	e7f1      	b.n	3551a <_fflush_r+0x26>
   35536:	4b04      	ldr	r3, [pc, #16]	; (35548 <_fflush_r+0x54>)
   35538:	429c      	cmp	r4, r3
   3553a:	d1ee      	bne.n	3551a <_fflush_r+0x26>
   3553c:	68ec      	ldr	r4, [r5, #12]
   3553e:	e7ec      	b.n	3551a <_fflush_r+0x26>
   35540:	0003a32c 	.word	0x0003a32c
   35544:	0003a34c 	.word	0x0003a34c
   35548:	0003a30c 	.word	0x0003a30c

0003554c <_cleanup_r>:
   3554c:	b510      	push	{r4, lr}
   3554e:	4902      	ldr	r1, [pc, #8]	; (35558 <_cleanup_r+0xc>)
   35550:	f000 f8b2 	bl	356b8 <_fwalk_reent>
   35554:	bd10      	pop	{r4, pc}
   35556:	46c0      	nop			; (mov r8, r8)
   35558:	000354f5 	.word	0x000354f5

0003555c <std.isra.0>:
   3555c:	2300      	movs	r3, #0
   3555e:	b510      	push	{r4, lr}
   35560:	0004      	movs	r4, r0
   35562:	6003      	str	r3, [r0, #0]
   35564:	6043      	str	r3, [r0, #4]
   35566:	6083      	str	r3, [r0, #8]
   35568:	8181      	strh	r1, [r0, #12]
   3556a:	6643      	str	r3, [r0, #100]	; 0x64
   3556c:	81c2      	strh	r2, [r0, #14]
   3556e:	6103      	str	r3, [r0, #16]
   35570:	6143      	str	r3, [r0, #20]
   35572:	6183      	str	r3, [r0, #24]
   35574:	0019      	movs	r1, r3
   35576:	2208      	movs	r2, #8
   35578:	305c      	adds	r0, #92	; 0x5c
   3557a:	f7ff fb60 	bl	34c3e <memset>
   3557e:	4b05      	ldr	r3, [pc, #20]	; (35594 <std.isra.0+0x38>)
   35580:	6224      	str	r4, [r4, #32]
   35582:	6263      	str	r3, [r4, #36]	; 0x24
   35584:	4b04      	ldr	r3, [pc, #16]	; (35598 <std.isra.0+0x3c>)
   35586:	62a3      	str	r3, [r4, #40]	; 0x28
   35588:	4b04      	ldr	r3, [pc, #16]	; (3559c <std.isra.0+0x40>)
   3558a:	62e3      	str	r3, [r4, #44]	; 0x2c
   3558c:	4b04      	ldr	r3, [pc, #16]	; (355a0 <std.isra.0+0x44>)
   3558e:	6323      	str	r3, [r4, #48]	; 0x30
   35590:	bd10      	pop	{r4, pc}
   35592:	46c0      	nop			; (mov r8, r8)
   35594:	00035df9 	.word	0x00035df9
   35598:	00035e21 	.word	0x00035e21
   3559c:	00035e59 	.word	0x00035e59
   355a0:	00035e85 	.word	0x00035e85

000355a4 <__sfmoreglue>:
   355a4:	b570      	push	{r4, r5, r6, lr}
   355a6:	2568      	movs	r5, #104	; 0x68
   355a8:	1e4a      	subs	r2, r1, #1
   355aa:	4355      	muls	r5, r2
   355ac:	000e      	movs	r6, r1
   355ae:	0029      	movs	r1, r5
   355b0:	3174      	adds	r1, #116	; 0x74
   355b2:	f7ff fb97 	bl	34ce4 <_malloc_r>
   355b6:	1e04      	subs	r4, r0, #0
   355b8:	d008      	beq.n	355cc <__sfmoreglue+0x28>
   355ba:	2100      	movs	r1, #0
   355bc:	002a      	movs	r2, r5
   355be:	6001      	str	r1, [r0, #0]
   355c0:	6046      	str	r6, [r0, #4]
   355c2:	300c      	adds	r0, #12
   355c4:	60a0      	str	r0, [r4, #8]
   355c6:	3268      	adds	r2, #104	; 0x68
   355c8:	f7ff fb39 	bl	34c3e <memset>
   355cc:	0020      	movs	r0, r4
   355ce:	bd70      	pop	{r4, r5, r6, pc}

000355d0 <__sinit>:
   355d0:	6983      	ldr	r3, [r0, #24]
   355d2:	b513      	push	{r0, r1, r4, lr}
   355d4:	0004      	movs	r4, r0
   355d6:	2b00      	cmp	r3, #0
   355d8:	d128      	bne.n	3562c <__sinit+0x5c>
   355da:	6483      	str	r3, [r0, #72]	; 0x48
   355dc:	64c3      	str	r3, [r0, #76]	; 0x4c
   355de:	6503      	str	r3, [r0, #80]	; 0x50
   355e0:	4b13      	ldr	r3, [pc, #76]	; (35630 <__sinit+0x60>)
   355e2:	4a14      	ldr	r2, [pc, #80]	; (35634 <__sinit+0x64>)
   355e4:	681b      	ldr	r3, [r3, #0]
   355e6:	6282      	str	r2, [r0, #40]	; 0x28
   355e8:	9301      	str	r3, [sp, #4]
   355ea:	4298      	cmp	r0, r3
   355ec:	d101      	bne.n	355f2 <__sinit+0x22>
   355ee:	2301      	movs	r3, #1
   355f0:	6183      	str	r3, [r0, #24]
   355f2:	0020      	movs	r0, r4
   355f4:	f000 f820 	bl	35638 <__sfp>
   355f8:	6060      	str	r0, [r4, #4]
   355fa:	0020      	movs	r0, r4
   355fc:	f000 f81c 	bl	35638 <__sfp>
   35600:	60a0      	str	r0, [r4, #8]
   35602:	0020      	movs	r0, r4
   35604:	f000 f818 	bl	35638 <__sfp>
   35608:	2200      	movs	r2, #0
   3560a:	60e0      	str	r0, [r4, #12]
   3560c:	2104      	movs	r1, #4
   3560e:	6860      	ldr	r0, [r4, #4]
   35610:	f7ff ffa4 	bl	3555c <std.isra.0>
   35614:	2201      	movs	r2, #1
   35616:	2109      	movs	r1, #9
   35618:	68a0      	ldr	r0, [r4, #8]
   3561a:	f7ff ff9f 	bl	3555c <std.isra.0>
   3561e:	2202      	movs	r2, #2
   35620:	2112      	movs	r1, #18
   35622:	68e0      	ldr	r0, [r4, #12]
   35624:	f7ff ff9a 	bl	3555c <std.isra.0>
   35628:	2301      	movs	r3, #1
   3562a:	61a3      	str	r3, [r4, #24]
   3562c:	bd13      	pop	{r0, r1, r4, pc}
   3562e:	46c0      	nop			; (mov r8, r8)
   35630:	0003a308 	.word	0x0003a308
   35634:	0003554d 	.word	0x0003554d

00035638 <__sfp>:
   35638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3563a:	4b1e      	ldr	r3, [pc, #120]	; (356b4 <__sfp+0x7c>)
   3563c:	0007      	movs	r7, r0
   3563e:	681e      	ldr	r6, [r3, #0]
   35640:	69b3      	ldr	r3, [r6, #24]
   35642:	2b00      	cmp	r3, #0
   35644:	d102      	bne.n	3564c <__sfp+0x14>
   35646:	0030      	movs	r0, r6
   35648:	f7ff ffc2 	bl	355d0 <__sinit>
   3564c:	3648      	adds	r6, #72	; 0x48
   3564e:	68b4      	ldr	r4, [r6, #8]
   35650:	6873      	ldr	r3, [r6, #4]
   35652:	3b01      	subs	r3, #1
   35654:	d504      	bpl.n	35660 <__sfp+0x28>
   35656:	6833      	ldr	r3, [r6, #0]
   35658:	2b00      	cmp	r3, #0
   3565a:	d007      	beq.n	3566c <__sfp+0x34>
   3565c:	6836      	ldr	r6, [r6, #0]
   3565e:	e7f6      	b.n	3564e <__sfp+0x16>
   35660:	220c      	movs	r2, #12
   35662:	5ea5      	ldrsh	r5, [r4, r2]
   35664:	2d00      	cmp	r5, #0
   35666:	d00d      	beq.n	35684 <__sfp+0x4c>
   35668:	3468      	adds	r4, #104	; 0x68
   3566a:	e7f2      	b.n	35652 <__sfp+0x1a>
   3566c:	2104      	movs	r1, #4
   3566e:	0038      	movs	r0, r7
   35670:	f7ff ff98 	bl	355a4 <__sfmoreglue>
   35674:	6030      	str	r0, [r6, #0]
   35676:	2800      	cmp	r0, #0
   35678:	d1f0      	bne.n	3565c <__sfp+0x24>
   3567a:	230c      	movs	r3, #12
   3567c:	0004      	movs	r4, r0
   3567e:	603b      	str	r3, [r7, #0]
   35680:	0020      	movs	r0, r4
   35682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35684:	2301      	movs	r3, #1
   35686:	0020      	movs	r0, r4
   35688:	425b      	negs	r3, r3
   3568a:	81e3      	strh	r3, [r4, #14]
   3568c:	3302      	adds	r3, #2
   3568e:	81a3      	strh	r3, [r4, #12]
   35690:	6665      	str	r5, [r4, #100]	; 0x64
   35692:	6025      	str	r5, [r4, #0]
   35694:	60a5      	str	r5, [r4, #8]
   35696:	6065      	str	r5, [r4, #4]
   35698:	6125      	str	r5, [r4, #16]
   3569a:	6165      	str	r5, [r4, #20]
   3569c:	61a5      	str	r5, [r4, #24]
   3569e:	2208      	movs	r2, #8
   356a0:	0029      	movs	r1, r5
   356a2:	305c      	adds	r0, #92	; 0x5c
   356a4:	f7ff facb 	bl	34c3e <memset>
   356a8:	6365      	str	r5, [r4, #52]	; 0x34
   356aa:	63a5      	str	r5, [r4, #56]	; 0x38
   356ac:	64a5      	str	r5, [r4, #72]	; 0x48
   356ae:	64e5      	str	r5, [r4, #76]	; 0x4c
   356b0:	e7e6      	b.n	35680 <__sfp+0x48>
   356b2:	46c0      	nop			; (mov r8, r8)
   356b4:	0003a308 	.word	0x0003a308

000356b8 <_fwalk_reent>:
   356b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   356ba:	0004      	movs	r4, r0
   356bc:	0007      	movs	r7, r0
   356be:	2600      	movs	r6, #0
   356c0:	9101      	str	r1, [sp, #4]
   356c2:	3448      	adds	r4, #72	; 0x48
   356c4:	2c00      	cmp	r4, #0
   356c6:	d101      	bne.n	356cc <_fwalk_reent+0x14>
   356c8:	0030      	movs	r0, r6
   356ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   356cc:	6863      	ldr	r3, [r4, #4]
   356ce:	68a5      	ldr	r5, [r4, #8]
   356d0:	9300      	str	r3, [sp, #0]
   356d2:	9b00      	ldr	r3, [sp, #0]
   356d4:	3b01      	subs	r3, #1
   356d6:	9300      	str	r3, [sp, #0]
   356d8:	d501      	bpl.n	356de <_fwalk_reent+0x26>
   356da:	6824      	ldr	r4, [r4, #0]
   356dc:	e7f2      	b.n	356c4 <_fwalk_reent+0xc>
   356de:	89ab      	ldrh	r3, [r5, #12]
   356e0:	2b01      	cmp	r3, #1
   356e2:	d908      	bls.n	356f6 <_fwalk_reent+0x3e>
   356e4:	220e      	movs	r2, #14
   356e6:	5eab      	ldrsh	r3, [r5, r2]
   356e8:	3301      	adds	r3, #1
   356ea:	d004      	beq.n	356f6 <_fwalk_reent+0x3e>
   356ec:	0029      	movs	r1, r5
   356ee:	0038      	movs	r0, r7
   356f0:	9b01      	ldr	r3, [sp, #4]
   356f2:	4798      	blx	r3
   356f4:	4306      	orrs	r6, r0
   356f6:	3568      	adds	r5, #104	; 0x68
   356f8:	e7eb      	b.n	356d2 <_fwalk_reent+0x1a>

000356fa <__locale_ctype_ptr_l>:
   356fa:	30ec      	adds	r0, #236	; 0xec
   356fc:	6800      	ldr	r0, [r0, #0]
   356fe:	4770      	bx	lr

00035700 <__locale_ctype_ptr>:
   35700:	4b04      	ldr	r3, [pc, #16]	; (35714 <__locale_ctype_ptr+0x14>)
   35702:	681b      	ldr	r3, [r3, #0]
   35704:	6a1b      	ldr	r3, [r3, #32]
   35706:	2b00      	cmp	r3, #0
   35708:	d100      	bne.n	3570c <__locale_ctype_ptr+0xc>
   3570a:	4b03      	ldr	r3, [pc, #12]	; (35718 <__locale_ctype_ptr+0x18>)
   3570c:	33ec      	adds	r3, #236	; 0xec
   3570e:	6818      	ldr	r0, [r3, #0]
   35710:	4770      	bx	lr
   35712:	46c0      	nop			; (mov r8, r8)
   35714:	200000d4 	.word	0x200000d4
   35718:	20000138 	.word	0x20000138

0003571c <__swhatbuf_r>:
   3571c:	b570      	push	{r4, r5, r6, lr}
   3571e:	000e      	movs	r6, r1
   35720:	001d      	movs	r5, r3
   35722:	230e      	movs	r3, #14
   35724:	5ec9      	ldrsh	r1, [r1, r3]
   35726:	b090      	sub	sp, #64	; 0x40
   35728:	0014      	movs	r4, r2
   3572a:	2900      	cmp	r1, #0
   3572c:	da07      	bge.n	3573e <__swhatbuf_r+0x22>
   3572e:	2300      	movs	r3, #0
   35730:	602b      	str	r3, [r5, #0]
   35732:	89b3      	ldrh	r3, [r6, #12]
   35734:	061b      	lsls	r3, r3, #24
   35736:	d411      	bmi.n	3575c <__swhatbuf_r+0x40>
   35738:	2380      	movs	r3, #128	; 0x80
   3573a:	00db      	lsls	r3, r3, #3
   3573c:	e00f      	b.n	3575e <__swhatbuf_r+0x42>
   3573e:	aa01      	add	r2, sp, #4
   35740:	f000 fbe6 	bl	35f10 <_fstat_r>
   35744:	2800      	cmp	r0, #0
   35746:	dbf2      	blt.n	3572e <__swhatbuf_r+0x12>
   35748:	22f0      	movs	r2, #240	; 0xf0
   3574a:	9b02      	ldr	r3, [sp, #8]
   3574c:	0212      	lsls	r2, r2, #8
   3574e:	4013      	ands	r3, r2
   35750:	4a05      	ldr	r2, [pc, #20]	; (35768 <__swhatbuf_r+0x4c>)
   35752:	189b      	adds	r3, r3, r2
   35754:	425a      	negs	r2, r3
   35756:	4153      	adcs	r3, r2
   35758:	602b      	str	r3, [r5, #0]
   3575a:	e7ed      	b.n	35738 <__swhatbuf_r+0x1c>
   3575c:	2340      	movs	r3, #64	; 0x40
   3575e:	2000      	movs	r0, #0
   35760:	6023      	str	r3, [r4, #0]
   35762:	b010      	add	sp, #64	; 0x40
   35764:	bd70      	pop	{r4, r5, r6, pc}
   35766:	46c0      	nop			; (mov r8, r8)
   35768:	ffffe000 	.word	0xffffe000

0003576c <__smakebuf_r>:
   3576c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3576e:	2602      	movs	r6, #2
   35770:	898b      	ldrh	r3, [r1, #12]
   35772:	0005      	movs	r5, r0
   35774:	000c      	movs	r4, r1
   35776:	4233      	tst	r3, r6
   35778:	d006      	beq.n	35788 <__smakebuf_r+0x1c>
   3577a:	0023      	movs	r3, r4
   3577c:	3347      	adds	r3, #71	; 0x47
   3577e:	6023      	str	r3, [r4, #0]
   35780:	6123      	str	r3, [r4, #16]
   35782:	2301      	movs	r3, #1
   35784:	6163      	str	r3, [r4, #20]
   35786:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   35788:	ab01      	add	r3, sp, #4
   3578a:	466a      	mov	r2, sp
   3578c:	f7ff ffc6 	bl	3571c <__swhatbuf_r>
   35790:	9900      	ldr	r1, [sp, #0]
   35792:	0007      	movs	r7, r0
   35794:	0028      	movs	r0, r5
   35796:	f7ff faa5 	bl	34ce4 <_malloc_r>
   3579a:	2800      	cmp	r0, #0
   3579c:	d108      	bne.n	357b0 <__smakebuf_r+0x44>
   3579e:	220c      	movs	r2, #12
   357a0:	5ea3      	ldrsh	r3, [r4, r2]
   357a2:	059a      	lsls	r2, r3, #22
   357a4:	d4ef      	bmi.n	35786 <__smakebuf_r+0x1a>
   357a6:	2203      	movs	r2, #3
   357a8:	4393      	bics	r3, r2
   357aa:	431e      	orrs	r6, r3
   357ac:	81a6      	strh	r6, [r4, #12]
   357ae:	e7e4      	b.n	3577a <__smakebuf_r+0xe>
   357b0:	4b0f      	ldr	r3, [pc, #60]	; (357f0 <__smakebuf_r+0x84>)
   357b2:	62ab      	str	r3, [r5, #40]	; 0x28
   357b4:	2380      	movs	r3, #128	; 0x80
   357b6:	89a2      	ldrh	r2, [r4, #12]
   357b8:	6020      	str	r0, [r4, #0]
   357ba:	4313      	orrs	r3, r2
   357bc:	81a3      	strh	r3, [r4, #12]
   357be:	9b00      	ldr	r3, [sp, #0]
   357c0:	6120      	str	r0, [r4, #16]
   357c2:	6163      	str	r3, [r4, #20]
   357c4:	9b01      	ldr	r3, [sp, #4]
   357c6:	2b00      	cmp	r3, #0
   357c8:	d00d      	beq.n	357e6 <__smakebuf_r+0x7a>
   357ca:	230e      	movs	r3, #14
   357cc:	5ee1      	ldrsh	r1, [r4, r3]
   357ce:	0028      	movs	r0, r5
   357d0:	f000 fbb0 	bl	35f34 <_isatty_r>
   357d4:	2800      	cmp	r0, #0
   357d6:	d006      	beq.n	357e6 <__smakebuf_r+0x7a>
   357d8:	2203      	movs	r2, #3
   357da:	89a3      	ldrh	r3, [r4, #12]
   357dc:	4393      	bics	r3, r2
   357de:	001a      	movs	r2, r3
   357e0:	2301      	movs	r3, #1
   357e2:	4313      	orrs	r3, r2
   357e4:	81a3      	strh	r3, [r4, #12]
   357e6:	89a0      	ldrh	r0, [r4, #12]
   357e8:	4338      	orrs	r0, r7
   357ea:	81a0      	strh	r0, [r4, #12]
   357ec:	e7cb      	b.n	35786 <__smakebuf_r+0x1a>
   357ee:	46c0      	nop			; (mov r8, r8)
   357f0:	0003554d 	.word	0x0003554d

000357f4 <__ascii_mbtowc>:
   357f4:	b082      	sub	sp, #8
   357f6:	2900      	cmp	r1, #0
   357f8:	d100      	bne.n	357fc <__ascii_mbtowc+0x8>
   357fa:	a901      	add	r1, sp, #4
   357fc:	1e10      	subs	r0, r2, #0
   357fe:	d006      	beq.n	3580e <__ascii_mbtowc+0x1a>
   35800:	2b00      	cmp	r3, #0
   35802:	d006      	beq.n	35812 <__ascii_mbtowc+0x1e>
   35804:	7813      	ldrb	r3, [r2, #0]
   35806:	600b      	str	r3, [r1, #0]
   35808:	7810      	ldrb	r0, [r2, #0]
   3580a:	1e43      	subs	r3, r0, #1
   3580c:	4198      	sbcs	r0, r3
   3580e:	b002      	add	sp, #8
   35810:	4770      	bx	lr
   35812:	2002      	movs	r0, #2
   35814:	4240      	negs	r0, r0
   35816:	e7fa      	b.n	3580e <__ascii_mbtowc+0x1a>

00035818 <__malloc_lock>:
   35818:	4770      	bx	lr

0003581a <__malloc_unlock>:
   3581a:	4770      	bx	lr

0003581c <__ssputs_r>:
   3581c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3581e:	688e      	ldr	r6, [r1, #8]
   35820:	b085      	sub	sp, #20
   35822:	0007      	movs	r7, r0
   35824:	000c      	movs	r4, r1
   35826:	9203      	str	r2, [sp, #12]
   35828:	9301      	str	r3, [sp, #4]
   3582a:	429e      	cmp	r6, r3
   3582c:	d839      	bhi.n	358a2 <__ssputs_r+0x86>
   3582e:	2390      	movs	r3, #144	; 0x90
   35830:	898a      	ldrh	r2, [r1, #12]
   35832:	00db      	lsls	r3, r3, #3
   35834:	421a      	tst	r2, r3
   35836:	d034      	beq.n	358a2 <__ssputs_r+0x86>
   35838:	2503      	movs	r5, #3
   3583a:	6909      	ldr	r1, [r1, #16]
   3583c:	6823      	ldr	r3, [r4, #0]
   3583e:	1a5b      	subs	r3, r3, r1
   35840:	9302      	str	r3, [sp, #8]
   35842:	6963      	ldr	r3, [r4, #20]
   35844:	9802      	ldr	r0, [sp, #8]
   35846:	435d      	muls	r5, r3
   35848:	0feb      	lsrs	r3, r5, #31
   3584a:	195d      	adds	r5, r3, r5
   3584c:	9b01      	ldr	r3, [sp, #4]
   3584e:	106d      	asrs	r5, r5, #1
   35850:	3301      	adds	r3, #1
   35852:	181b      	adds	r3, r3, r0
   35854:	42ab      	cmp	r3, r5
   35856:	d900      	bls.n	3585a <__ssputs_r+0x3e>
   35858:	001d      	movs	r5, r3
   3585a:	0553      	lsls	r3, r2, #21
   3585c:	d532      	bpl.n	358c4 <__ssputs_r+0xa8>
   3585e:	0029      	movs	r1, r5
   35860:	0038      	movs	r0, r7
   35862:	f7ff fa3f 	bl	34ce4 <_malloc_r>
   35866:	1e06      	subs	r6, r0, #0
   35868:	d109      	bne.n	3587e <__ssputs_r+0x62>
   3586a:	230c      	movs	r3, #12
   3586c:	603b      	str	r3, [r7, #0]
   3586e:	2340      	movs	r3, #64	; 0x40
   35870:	2001      	movs	r0, #1
   35872:	89a2      	ldrh	r2, [r4, #12]
   35874:	4240      	negs	r0, r0
   35876:	4313      	orrs	r3, r2
   35878:	81a3      	strh	r3, [r4, #12]
   3587a:	b005      	add	sp, #20
   3587c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3587e:	9a02      	ldr	r2, [sp, #8]
   35880:	6921      	ldr	r1, [r4, #16]
   35882:	f7ff f9c1 	bl	34c08 <memcpy>
   35886:	89a3      	ldrh	r3, [r4, #12]
   35888:	4a14      	ldr	r2, [pc, #80]	; (358dc <__ssputs_r+0xc0>)
   3588a:	401a      	ands	r2, r3
   3588c:	2380      	movs	r3, #128	; 0x80
   3588e:	4313      	orrs	r3, r2
   35890:	81a3      	strh	r3, [r4, #12]
   35892:	9b02      	ldr	r3, [sp, #8]
   35894:	6126      	str	r6, [r4, #16]
   35896:	18f6      	adds	r6, r6, r3
   35898:	6026      	str	r6, [r4, #0]
   3589a:	6165      	str	r5, [r4, #20]
   3589c:	9e01      	ldr	r6, [sp, #4]
   3589e:	1aed      	subs	r5, r5, r3
   358a0:	60a5      	str	r5, [r4, #8]
   358a2:	9b01      	ldr	r3, [sp, #4]
   358a4:	42b3      	cmp	r3, r6
   358a6:	d200      	bcs.n	358aa <__ssputs_r+0x8e>
   358a8:	001e      	movs	r6, r3
   358aa:	0032      	movs	r2, r6
   358ac:	9903      	ldr	r1, [sp, #12]
   358ae:	6820      	ldr	r0, [r4, #0]
   358b0:	f7ff f9b3 	bl	34c1a <memmove>
   358b4:	68a3      	ldr	r3, [r4, #8]
   358b6:	2000      	movs	r0, #0
   358b8:	1b9b      	subs	r3, r3, r6
   358ba:	60a3      	str	r3, [r4, #8]
   358bc:	6823      	ldr	r3, [r4, #0]
   358be:	199e      	adds	r6, r3, r6
   358c0:	6026      	str	r6, [r4, #0]
   358c2:	e7da      	b.n	3587a <__ssputs_r+0x5e>
   358c4:	002a      	movs	r2, r5
   358c6:	0038      	movs	r0, r7
   358c8:	f000 fb65 	bl	35f96 <_realloc_r>
   358cc:	1e06      	subs	r6, r0, #0
   358ce:	d1e0      	bne.n	35892 <__ssputs_r+0x76>
   358d0:	6921      	ldr	r1, [r4, #16]
   358d2:	0038      	movs	r0, r7
   358d4:	f7ff f9bc 	bl	34c50 <_free_r>
   358d8:	e7c7      	b.n	3586a <__ssputs_r+0x4e>
   358da:	46c0      	nop			; (mov r8, r8)
   358dc:	fffffb7f 	.word	0xfffffb7f

000358e0 <_svfiprintf_r>:
   358e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   358e2:	b09f      	sub	sp, #124	; 0x7c
   358e4:	9002      	str	r0, [sp, #8]
   358e6:	9305      	str	r3, [sp, #20]
   358e8:	898b      	ldrh	r3, [r1, #12]
   358ea:	000f      	movs	r7, r1
   358ec:	0016      	movs	r6, r2
   358ee:	061b      	lsls	r3, r3, #24
   358f0:	d511      	bpl.n	35916 <_svfiprintf_r+0x36>
   358f2:	690b      	ldr	r3, [r1, #16]
   358f4:	2b00      	cmp	r3, #0
   358f6:	d10e      	bne.n	35916 <_svfiprintf_r+0x36>
   358f8:	2140      	movs	r1, #64	; 0x40
   358fa:	f7ff f9f3 	bl	34ce4 <_malloc_r>
   358fe:	6038      	str	r0, [r7, #0]
   35900:	6138      	str	r0, [r7, #16]
   35902:	2800      	cmp	r0, #0
   35904:	d105      	bne.n	35912 <_svfiprintf_r+0x32>
   35906:	230c      	movs	r3, #12
   35908:	9a02      	ldr	r2, [sp, #8]
   3590a:	3801      	subs	r0, #1
   3590c:	6013      	str	r3, [r2, #0]
   3590e:	b01f      	add	sp, #124	; 0x7c
   35910:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35912:	2340      	movs	r3, #64	; 0x40
   35914:	617b      	str	r3, [r7, #20]
   35916:	2300      	movs	r3, #0
   35918:	ad06      	add	r5, sp, #24
   3591a:	616b      	str	r3, [r5, #20]
   3591c:	3320      	adds	r3, #32
   3591e:	766b      	strb	r3, [r5, #25]
   35920:	3310      	adds	r3, #16
   35922:	76ab      	strb	r3, [r5, #26]
   35924:	0034      	movs	r4, r6
   35926:	7823      	ldrb	r3, [r4, #0]
   35928:	2b00      	cmp	r3, #0
   3592a:	d147      	bne.n	359bc <_svfiprintf_r+0xdc>
   3592c:	1ba3      	subs	r3, r4, r6
   3592e:	9304      	str	r3, [sp, #16]
   35930:	d00d      	beq.n	3594e <_svfiprintf_r+0x6e>
   35932:	1ba3      	subs	r3, r4, r6
   35934:	0032      	movs	r2, r6
   35936:	0039      	movs	r1, r7
   35938:	9802      	ldr	r0, [sp, #8]
   3593a:	f7ff ff6f 	bl	3581c <__ssputs_r>
   3593e:	1c43      	adds	r3, r0, #1
   35940:	d100      	bne.n	35944 <_svfiprintf_r+0x64>
   35942:	e0b5      	b.n	35ab0 <_svfiprintf_r+0x1d0>
   35944:	696a      	ldr	r2, [r5, #20]
   35946:	9b04      	ldr	r3, [sp, #16]
   35948:	4694      	mov	ip, r2
   3594a:	4463      	add	r3, ip
   3594c:	616b      	str	r3, [r5, #20]
   3594e:	7823      	ldrb	r3, [r4, #0]
   35950:	2b00      	cmp	r3, #0
   35952:	d100      	bne.n	35956 <_svfiprintf_r+0x76>
   35954:	e0ac      	b.n	35ab0 <_svfiprintf_r+0x1d0>
   35956:	2201      	movs	r2, #1
   35958:	2300      	movs	r3, #0
   3595a:	4252      	negs	r2, r2
   3595c:	606a      	str	r2, [r5, #4]
   3595e:	a902      	add	r1, sp, #8
   35960:	3254      	adds	r2, #84	; 0x54
   35962:	1852      	adds	r2, r2, r1
   35964:	3401      	adds	r4, #1
   35966:	602b      	str	r3, [r5, #0]
   35968:	60eb      	str	r3, [r5, #12]
   3596a:	60ab      	str	r3, [r5, #8]
   3596c:	7013      	strb	r3, [r2, #0]
   3596e:	65ab      	str	r3, [r5, #88]	; 0x58
   35970:	4e58      	ldr	r6, [pc, #352]	; (35ad4 <_svfiprintf_r+0x1f4>)
   35972:	2205      	movs	r2, #5
   35974:	7821      	ldrb	r1, [r4, #0]
   35976:	0030      	movs	r0, r6
   35978:	f000 fb02 	bl	35f80 <memchr>
   3597c:	1c62      	adds	r2, r4, #1
   3597e:	2800      	cmp	r0, #0
   35980:	d120      	bne.n	359c4 <_svfiprintf_r+0xe4>
   35982:	6829      	ldr	r1, [r5, #0]
   35984:	06cb      	lsls	r3, r1, #27
   35986:	d504      	bpl.n	35992 <_svfiprintf_r+0xb2>
   35988:	2353      	movs	r3, #83	; 0x53
   3598a:	ae02      	add	r6, sp, #8
   3598c:	3020      	adds	r0, #32
   3598e:	199b      	adds	r3, r3, r6
   35990:	7018      	strb	r0, [r3, #0]
   35992:	070b      	lsls	r3, r1, #28
   35994:	d504      	bpl.n	359a0 <_svfiprintf_r+0xc0>
   35996:	2353      	movs	r3, #83	; 0x53
   35998:	202b      	movs	r0, #43	; 0x2b
   3599a:	ae02      	add	r6, sp, #8
   3599c:	199b      	adds	r3, r3, r6
   3599e:	7018      	strb	r0, [r3, #0]
   359a0:	7823      	ldrb	r3, [r4, #0]
   359a2:	2b2a      	cmp	r3, #42	; 0x2a
   359a4:	d016      	beq.n	359d4 <_svfiprintf_r+0xf4>
   359a6:	2000      	movs	r0, #0
   359a8:	210a      	movs	r1, #10
   359aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   359ac:	7822      	ldrb	r2, [r4, #0]
   359ae:	3a30      	subs	r2, #48	; 0x30
   359b0:	2a09      	cmp	r2, #9
   359b2:	d955      	bls.n	35a60 <_svfiprintf_r+0x180>
   359b4:	2800      	cmp	r0, #0
   359b6:	d015      	beq.n	359e4 <_svfiprintf_r+0x104>
   359b8:	9309      	str	r3, [sp, #36]	; 0x24
   359ba:	e013      	b.n	359e4 <_svfiprintf_r+0x104>
   359bc:	2b25      	cmp	r3, #37	; 0x25
   359be:	d0b5      	beq.n	3592c <_svfiprintf_r+0x4c>
   359c0:	3401      	adds	r4, #1
   359c2:	e7b0      	b.n	35926 <_svfiprintf_r+0x46>
   359c4:	2301      	movs	r3, #1
   359c6:	1b80      	subs	r0, r0, r6
   359c8:	4083      	lsls	r3, r0
   359ca:	6829      	ldr	r1, [r5, #0]
   359cc:	0014      	movs	r4, r2
   359ce:	430b      	orrs	r3, r1
   359d0:	602b      	str	r3, [r5, #0]
   359d2:	e7cd      	b.n	35970 <_svfiprintf_r+0x90>
   359d4:	9b05      	ldr	r3, [sp, #20]
   359d6:	1d18      	adds	r0, r3, #4
   359d8:	681b      	ldr	r3, [r3, #0]
   359da:	9005      	str	r0, [sp, #20]
   359dc:	2b00      	cmp	r3, #0
   359de:	db39      	blt.n	35a54 <_svfiprintf_r+0x174>
   359e0:	9309      	str	r3, [sp, #36]	; 0x24
   359e2:	0014      	movs	r4, r2
   359e4:	7823      	ldrb	r3, [r4, #0]
   359e6:	2b2e      	cmp	r3, #46	; 0x2e
   359e8:	d10b      	bne.n	35a02 <_svfiprintf_r+0x122>
   359ea:	7863      	ldrb	r3, [r4, #1]
   359ec:	1c62      	adds	r2, r4, #1
   359ee:	2b2a      	cmp	r3, #42	; 0x2a
   359f0:	d13e      	bne.n	35a70 <_svfiprintf_r+0x190>
   359f2:	9b05      	ldr	r3, [sp, #20]
   359f4:	3402      	adds	r4, #2
   359f6:	1d1a      	adds	r2, r3, #4
   359f8:	681b      	ldr	r3, [r3, #0]
   359fa:	9205      	str	r2, [sp, #20]
   359fc:	2b00      	cmp	r3, #0
   359fe:	db34      	blt.n	35a6a <_svfiprintf_r+0x18a>
   35a00:	9307      	str	r3, [sp, #28]
   35a02:	4e35      	ldr	r6, [pc, #212]	; (35ad8 <_svfiprintf_r+0x1f8>)
   35a04:	7821      	ldrb	r1, [r4, #0]
   35a06:	2203      	movs	r2, #3
   35a08:	0030      	movs	r0, r6
   35a0a:	f000 fab9 	bl	35f80 <memchr>
   35a0e:	2800      	cmp	r0, #0
   35a10:	d006      	beq.n	35a20 <_svfiprintf_r+0x140>
   35a12:	2340      	movs	r3, #64	; 0x40
   35a14:	1b80      	subs	r0, r0, r6
   35a16:	4083      	lsls	r3, r0
   35a18:	682a      	ldr	r2, [r5, #0]
   35a1a:	3401      	adds	r4, #1
   35a1c:	4313      	orrs	r3, r2
   35a1e:	602b      	str	r3, [r5, #0]
   35a20:	7821      	ldrb	r1, [r4, #0]
   35a22:	2206      	movs	r2, #6
   35a24:	482d      	ldr	r0, [pc, #180]	; (35adc <_svfiprintf_r+0x1fc>)
   35a26:	1c66      	adds	r6, r4, #1
   35a28:	7629      	strb	r1, [r5, #24]
   35a2a:	f000 faa9 	bl	35f80 <memchr>
   35a2e:	2800      	cmp	r0, #0
   35a30:	d046      	beq.n	35ac0 <_svfiprintf_r+0x1e0>
   35a32:	4b2b      	ldr	r3, [pc, #172]	; (35ae0 <_svfiprintf_r+0x200>)
   35a34:	2b00      	cmp	r3, #0
   35a36:	d12f      	bne.n	35a98 <_svfiprintf_r+0x1b8>
   35a38:	6829      	ldr	r1, [r5, #0]
   35a3a:	9b05      	ldr	r3, [sp, #20]
   35a3c:	2207      	movs	r2, #7
   35a3e:	05c9      	lsls	r1, r1, #23
   35a40:	d528      	bpl.n	35a94 <_svfiprintf_r+0x1b4>
   35a42:	189b      	adds	r3, r3, r2
   35a44:	4393      	bics	r3, r2
   35a46:	3308      	adds	r3, #8
   35a48:	9305      	str	r3, [sp, #20]
   35a4a:	696b      	ldr	r3, [r5, #20]
   35a4c:	9a03      	ldr	r2, [sp, #12]
   35a4e:	189b      	adds	r3, r3, r2
   35a50:	616b      	str	r3, [r5, #20]
   35a52:	e767      	b.n	35924 <_svfiprintf_r+0x44>
   35a54:	425b      	negs	r3, r3
   35a56:	60eb      	str	r3, [r5, #12]
   35a58:	2302      	movs	r3, #2
   35a5a:	430b      	orrs	r3, r1
   35a5c:	602b      	str	r3, [r5, #0]
   35a5e:	e7c0      	b.n	359e2 <_svfiprintf_r+0x102>
   35a60:	434b      	muls	r3, r1
   35a62:	3401      	adds	r4, #1
   35a64:	189b      	adds	r3, r3, r2
   35a66:	2001      	movs	r0, #1
   35a68:	e7a0      	b.n	359ac <_svfiprintf_r+0xcc>
   35a6a:	2301      	movs	r3, #1
   35a6c:	425b      	negs	r3, r3
   35a6e:	e7c7      	b.n	35a00 <_svfiprintf_r+0x120>
   35a70:	2300      	movs	r3, #0
   35a72:	0014      	movs	r4, r2
   35a74:	200a      	movs	r0, #10
   35a76:	001a      	movs	r2, r3
   35a78:	606b      	str	r3, [r5, #4]
   35a7a:	7821      	ldrb	r1, [r4, #0]
   35a7c:	3930      	subs	r1, #48	; 0x30
   35a7e:	2909      	cmp	r1, #9
   35a80:	d903      	bls.n	35a8a <_svfiprintf_r+0x1aa>
   35a82:	2b00      	cmp	r3, #0
   35a84:	d0bd      	beq.n	35a02 <_svfiprintf_r+0x122>
   35a86:	9207      	str	r2, [sp, #28]
   35a88:	e7bb      	b.n	35a02 <_svfiprintf_r+0x122>
   35a8a:	4342      	muls	r2, r0
   35a8c:	3401      	adds	r4, #1
   35a8e:	1852      	adds	r2, r2, r1
   35a90:	2301      	movs	r3, #1
   35a92:	e7f2      	b.n	35a7a <_svfiprintf_r+0x19a>
   35a94:	3307      	adds	r3, #7
   35a96:	e7d5      	b.n	35a44 <_svfiprintf_r+0x164>
   35a98:	ab05      	add	r3, sp, #20
   35a9a:	9300      	str	r3, [sp, #0]
   35a9c:	003a      	movs	r2, r7
   35a9e:	4b11      	ldr	r3, [pc, #68]	; (35ae4 <_svfiprintf_r+0x204>)
   35aa0:	0029      	movs	r1, r5
   35aa2:	9802      	ldr	r0, [sp, #8]
   35aa4:	e000      	b.n	35aa8 <_svfiprintf_r+0x1c8>
   35aa6:	bf00      	nop
   35aa8:	9003      	str	r0, [sp, #12]
   35aaa:	9b03      	ldr	r3, [sp, #12]
   35aac:	3301      	adds	r3, #1
   35aae:	d1cc      	bne.n	35a4a <_svfiprintf_r+0x16a>
   35ab0:	89bb      	ldrh	r3, [r7, #12]
   35ab2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   35ab4:	065b      	lsls	r3, r3, #25
   35ab6:	d400      	bmi.n	35aba <_svfiprintf_r+0x1da>
   35ab8:	e729      	b.n	3590e <_svfiprintf_r+0x2e>
   35aba:	2001      	movs	r0, #1
   35abc:	4240      	negs	r0, r0
   35abe:	e726      	b.n	3590e <_svfiprintf_r+0x2e>
   35ac0:	ab05      	add	r3, sp, #20
   35ac2:	9300      	str	r3, [sp, #0]
   35ac4:	003a      	movs	r2, r7
   35ac6:	4b07      	ldr	r3, [pc, #28]	; (35ae4 <_svfiprintf_r+0x204>)
   35ac8:	0029      	movs	r1, r5
   35aca:	9802      	ldr	r0, [sp, #8]
   35acc:	f000 f87a 	bl	35bc4 <_printf_i>
   35ad0:	e7ea      	b.n	35aa8 <_svfiprintf_r+0x1c8>
   35ad2:	46c0      	nop			; (mov r8, r8)
   35ad4:	0003a376 	.word	0x0003a376
   35ad8:	0003a37c 	.word	0x0003a37c
   35adc:	0003a380 	.word	0x0003a380
   35ae0:	00000000 	.word	0x00000000
   35ae4:	0003581d 	.word	0x0003581d

00035ae8 <_printf_common>:
   35ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35aea:	0015      	movs	r5, r2
   35aec:	9301      	str	r3, [sp, #4]
   35aee:	688a      	ldr	r2, [r1, #8]
   35af0:	690b      	ldr	r3, [r1, #16]
   35af2:	9000      	str	r0, [sp, #0]
   35af4:	000c      	movs	r4, r1
   35af6:	4293      	cmp	r3, r2
   35af8:	da00      	bge.n	35afc <_printf_common+0x14>
   35afa:	0013      	movs	r3, r2
   35afc:	0022      	movs	r2, r4
   35afe:	602b      	str	r3, [r5, #0]
   35b00:	3243      	adds	r2, #67	; 0x43
   35b02:	7812      	ldrb	r2, [r2, #0]
   35b04:	2a00      	cmp	r2, #0
   35b06:	d001      	beq.n	35b0c <_printf_common+0x24>
   35b08:	3301      	adds	r3, #1
   35b0a:	602b      	str	r3, [r5, #0]
   35b0c:	6823      	ldr	r3, [r4, #0]
   35b0e:	069b      	lsls	r3, r3, #26
   35b10:	d502      	bpl.n	35b18 <_printf_common+0x30>
   35b12:	682b      	ldr	r3, [r5, #0]
   35b14:	3302      	adds	r3, #2
   35b16:	602b      	str	r3, [r5, #0]
   35b18:	2706      	movs	r7, #6
   35b1a:	6823      	ldr	r3, [r4, #0]
   35b1c:	401f      	ands	r7, r3
   35b1e:	d027      	beq.n	35b70 <_printf_common+0x88>
   35b20:	0023      	movs	r3, r4
   35b22:	3343      	adds	r3, #67	; 0x43
   35b24:	781b      	ldrb	r3, [r3, #0]
   35b26:	1e5a      	subs	r2, r3, #1
   35b28:	4193      	sbcs	r3, r2
   35b2a:	6822      	ldr	r2, [r4, #0]
   35b2c:	0692      	lsls	r2, r2, #26
   35b2e:	d430      	bmi.n	35b92 <_printf_common+0xaa>
   35b30:	0022      	movs	r2, r4
   35b32:	9901      	ldr	r1, [sp, #4]
   35b34:	3243      	adds	r2, #67	; 0x43
   35b36:	9800      	ldr	r0, [sp, #0]
   35b38:	9e08      	ldr	r6, [sp, #32]
   35b3a:	47b0      	blx	r6
   35b3c:	1c43      	adds	r3, r0, #1
   35b3e:	d025      	beq.n	35b8c <_printf_common+0xa4>
   35b40:	2306      	movs	r3, #6
   35b42:	6820      	ldr	r0, [r4, #0]
   35b44:	682a      	ldr	r2, [r5, #0]
   35b46:	68e1      	ldr	r1, [r4, #12]
   35b48:	4003      	ands	r3, r0
   35b4a:	2500      	movs	r5, #0
   35b4c:	2b04      	cmp	r3, #4
   35b4e:	d103      	bne.n	35b58 <_printf_common+0x70>
   35b50:	1a8d      	subs	r5, r1, r2
   35b52:	43eb      	mvns	r3, r5
   35b54:	17db      	asrs	r3, r3, #31
   35b56:	401d      	ands	r5, r3
   35b58:	68a3      	ldr	r3, [r4, #8]
   35b5a:	6922      	ldr	r2, [r4, #16]
   35b5c:	4293      	cmp	r3, r2
   35b5e:	dd01      	ble.n	35b64 <_printf_common+0x7c>
   35b60:	1a9b      	subs	r3, r3, r2
   35b62:	18ed      	adds	r5, r5, r3
   35b64:	2700      	movs	r7, #0
   35b66:	42bd      	cmp	r5, r7
   35b68:	d120      	bne.n	35bac <_printf_common+0xc4>
   35b6a:	2000      	movs	r0, #0
   35b6c:	e010      	b.n	35b90 <_printf_common+0xa8>
   35b6e:	3701      	adds	r7, #1
   35b70:	68e3      	ldr	r3, [r4, #12]
   35b72:	682a      	ldr	r2, [r5, #0]
   35b74:	1a9b      	subs	r3, r3, r2
   35b76:	429f      	cmp	r7, r3
   35b78:	dad2      	bge.n	35b20 <_printf_common+0x38>
   35b7a:	0022      	movs	r2, r4
   35b7c:	2301      	movs	r3, #1
   35b7e:	3219      	adds	r2, #25
   35b80:	9901      	ldr	r1, [sp, #4]
   35b82:	9800      	ldr	r0, [sp, #0]
   35b84:	9e08      	ldr	r6, [sp, #32]
   35b86:	47b0      	blx	r6
   35b88:	1c43      	adds	r3, r0, #1
   35b8a:	d1f0      	bne.n	35b6e <_printf_common+0x86>
   35b8c:	2001      	movs	r0, #1
   35b8e:	4240      	negs	r0, r0
   35b90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35b92:	2030      	movs	r0, #48	; 0x30
   35b94:	18e1      	adds	r1, r4, r3
   35b96:	3143      	adds	r1, #67	; 0x43
   35b98:	7008      	strb	r0, [r1, #0]
   35b9a:	0021      	movs	r1, r4
   35b9c:	1c5a      	adds	r2, r3, #1
   35b9e:	3145      	adds	r1, #69	; 0x45
   35ba0:	7809      	ldrb	r1, [r1, #0]
   35ba2:	18a2      	adds	r2, r4, r2
   35ba4:	3243      	adds	r2, #67	; 0x43
   35ba6:	3302      	adds	r3, #2
   35ba8:	7011      	strb	r1, [r2, #0]
   35baa:	e7c1      	b.n	35b30 <_printf_common+0x48>
   35bac:	0022      	movs	r2, r4
   35bae:	2301      	movs	r3, #1
   35bb0:	321a      	adds	r2, #26
   35bb2:	9901      	ldr	r1, [sp, #4]
   35bb4:	9800      	ldr	r0, [sp, #0]
   35bb6:	9e08      	ldr	r6, [sp, #32]
   35bb8:	47b0      	blx	r6
   35bba:	1c43      	adds	r3, r0, #1
   35bbc:	d0e6      	beq.n	35b8c <_printf_common+0xa4>
   35bbe:	3701      	adds	r7, #1
   35bc0:	e7d1      	b.n	35b66 <_printf_common+0x7e>
	...

00035bc4 <_printf_i>:
   35bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   35bc6:	b08b      	sub	sp, #44	; 0x2c
   35bc8:	9206      	str	r2, [sp, #24]
   35bca:	000a      	movs	r2, r1
   35bcc:	3243      	adds	r2, #67	; 0x43
   35bce:	9307      	str	r3, [sp, #28]
   35bd0:	9005      	str	r0, [sp, #20]
   35bd2:	9204      	str	r2, [sp, #16]
   35bd4:	7e0a      	ldrb	r2, [r1, #24]
   35bd6:	000c      	movs	r4, r1
   35bd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   35bda:	2a6e      	cmp	r2, #110	; 0x6e
   35bdc:	d100      	bne.n	35be0 <_printf_i+0x1c>
   35bde:	e08f      	b.n	35d00 <_printf_i+0x13c>
   35be0:	d817      	bhi.n	35c12 <_printf_i+0x4e>
   35be2:	2a63      	cmp	r2, #99	; 0x63
   35be4:	d02c      	beq.n	35c40 <_printf_i+0x7c>
   35be6:	d808      	bhi.n	35bfa <_printf_i+0x36>
   35be8:	2a00      	cmp	r2, #0
   35bea:	d100      	bne.n	35bee <_printf_i+0x2a>
   35bec:	e099      	b.n	35d22 <_printf_i+0x15e>
   35bee:	2a58      	cmp	r2, #88	; 0x58
   35bf0:	d054      	beq.n	35c9c <_printf_i+0xd8>
   35bf2:	0026      	movs	r6, r4
   35bf4:	3642      	adds	r6, #66	; 0x42
   35bf6:	7032      	strb	r2, [r6, #0]
   35bf8:	e029      	b.n	35c4e <_printf_i+0x8a>
   35bfa:	2a64      	cmp	r2, #100	; 0x64
   35bfc:	d001      	beq.n	35c02 <_printf_i+0x3e>
   35bfe:	2a69      	cmp	r2, #105	; 0x69
   35c00:	d1f7      	bne.n	35bf2 <_printf_i+0x2e>
   35c02:	6821      	ldr	r1, [r4, #0]
   35c04:	681a      	ldr	r2, [r3, #0]
   35c06:	0608      	lsls	r0, r1, #24
   35c08:	d523      	bpl.n	35c52 <_printf_i+0x8e>
   35c0a:	1d11      	adds	r1, r2, #4
   35c0c:	6019      	str	r1, [r3, #0]
   35c0e:	6815      	ldr	r5, [r2, #0]
   35c10:	e025      	b.n	35c5e <_printf_i+0x9a>
   35c12:	2a73      	cmp	r2, #115	; 0x73
   35c14:	d100      	bne.n	35c18 <_printf_i+0x54>
   35c16:	e088      	b.n	35d2a <_printf_i+0x166>
   35c18:	d808      	bhi.n	35c2c <_printf_i+0x68>
   35c1a:	2a6f      	cmp	r2, #111	; 0x6f
   35c1c:	d029      	beq.n	35c72 <_printf_i+0xae>
   35c1e:	2a70      	cmp	r2, #112	; 0x70
   35c20:	d1e7      	bne.n	35bf2 <_printf_i+0x2e>
   35c22:	2220      	movs	r2, #32
   35c24:	6809      	ldr	r1, [r1, #0]
   35c26:	430a      	orrs	r2, r1
   35c28:	6022      	str	r2, [r4, #0]
   35c2a:	e003      	b.n	35c34 <_printf_i+0x70>
   35c2c:	2a75      	cmp	r2, #117	; 0x75
   35c2e:	d020      	beq.n	35c72 <_printf_i+0xae>
   35c30:	2a78      	cmp	r2, #120	; 0x78
   35c32:	d1de      	bne.n	35bf2 <_printf_i+0x2e>
   35c34:	0022      	movs	r2, r4
   35c36:	2178      	movs	r1, #120	; 0x78
   35c38:	3245      	adds	r2, #69	; 0x45
   35c3a:	7011      	strb	r1, [r2, #0]
   35c3c:	4a6c      	ldr	r2, [pc, #432]	; (35df0 <_printf_i+0x22c>)
   35c3e:	e030      	b.n	35ca2 <_printf_i+0xde>
   35c40:	000e      	movs	r6, r1
   35c42:	681a      	ldr	r2, [r3, #0]
   35c44:	3642      	adds	r6, #66	; 0x42
   35c46:	1d11      	adds	r1, r2, #4
   35c48:	6019      	str	r1, [r3, #0]
   35c4a:	6813      	ldr	r3, [r2, #0]
   35c4c:	7033      	strb	r3, [r6, #0]
   35c4e:	2301      	movs	r3, #1
   35c50:	e079      	b.n	35d46 <_printf_i+0x182>
   35c52:	0649      	lsls	r1, r1, #25
   35c54:	d5d9      	bpl.n	35c0a <_printf_i+0x46>
   35c56:	1d11      	adds	r1, r2, #4
   35c58:	6019      	str	r1, [r3, #0]
   35c5a:	2300      	movs	r3, #0
   35c5c:	5ed5      	ldrsh	r5, [r2, r3]
   35c5e:	2d00      	cmp	r5, #0
   35c60:	da03      	bge.n	35c6a <_printf_i+0xa6>
   35c62:	232d      	movs	r3, #45	; 0x2d
   35c64:	9a04      	ldr	r2, [sp, #16]
   35c66:	426d      	negs	r5, r5
   35c68:	7013      	strb	r3, [r2, #0]
   35c6a:	4b62      	ldr	r3, [pc, #392]	; (35df4 <_printf_i+0x230>)
   35c6c:	270a      	movs	r7, #10
   35c6e:	9303      	str	r3, [sp, #12]
   35c70:	e02f      	b.n	35cd2 <_printf_i+0x10e>
   35c72:	6820      	ldr	r0, [r4, #0]
   35c74:	6819      	ldr	r1, [r3, #0]
   35c76:	0605      	lsls	r5, r0, #24
   35c78:	d503      	bpl.n	35c82 <_printf_i+0xbe>
   35c7a:	1d08      	adds	r0, r1, #4
   35c7c:	6018      	str	r0, [r3, #0]
   35c7e:	680d      	ldr	r5, [r1, #0]
   35c80:	e005      	b.n	35c8e <_printf_i+0xca>
   35c82:	0640      	lsls	r0, r0, #25
   35c84:	d5f9      	bpl.n	35c7a <_printf_i+0xb6>
   35c86:	680d      	ldr	r5, [r1, #0]
   35c88:	1d08      	adds	r0, r1, #4
   35c8a:	6018      	str	r0, [r3, #0]
   35c8c:	b2ad      	uxth	r5, r5
   35c8e:	4b59      	ldr	r3, [pc, #356]	; (35df4 <_printf_i+0x230>)
   35c90:	2708      	movs	r7, #8
   35c92:	9303      	str	r3, [sp, #12]
   35c94:	2a6f      	cmp	r2, #111	; 0x6f
   35c96:	d018      	beq.n	35cca <_printf_i+0x106>
   35c98:	270a      	movs	r7, #10
   35c9a:	e016      	b.n	35cca <_printf_i+0x106>
   35c9c:	3145      	adds	r1, #69	; 0x45
   35c9e:	700a      	strb	r2, [r1, #0]
   35ca0:	4a54      	ldr	r2, [pc, #336]	; (35df4 <_printf_i+0x230>)
   35ca2:	9203      	str	r2, [sp, #12]
   35ca4:	681a      	ldr	r2, [r3, #0]
   35ca6:	6821      	ldr	r1, [r4, #0]
   35ca8:	1d10      	adds	r0, r2, #4
   35caa:	6018      	str	r0, [r3, #0]
   35cac:	6815      	ldr	r5, [r2, #0]
   35cae:	0608      	lsls	r0, r1, #24
   35cb0:	d522      	bpl.n	35cf8 <_printf_i+0x134>
   35cb2:	07cb      	lsls	r3, r1, #31
   35cb4:	d502      	bpl.n	35cbc <_printf_i+0xf8>
   35cb6:	2320      	movs	r3, #32
   35cb8:	4319      	orrs	r1, r3
   35cba:	6021      	str	r1, [r4, #0]
   35cbc:	2710      	movs	r7, #16
   35cbe:	2d00      	cmp	r5, #0
   35cc0:	d103      	bne.n	35cca <_printf_i+0x106>
   35cc2:	2320      	movs	r3, #32
   35cc4:	6822      	ldr	r2, [r4, #0]
   35cc6:	439a      	bics	r2, r3
   35cc8:	6022      	str	r2, [r4, #0]
   35cca:	0023      	movs	r3, r4
   35ccc:	2200      	movs	r2, #0
   35cce:	3343      	adds	r3, #67	; 0x43
   35cd0:	701a      	strb	r2, [r3, #0]
   35cd2:	6863      	ldr	r3, [r4, #4]
   35cd4:	60a3      	str	r3, [r4, #8]
   35cd6:	2b00      	cmp	r3, #0
   35cd8:	db5c      	blt.n	35d94 <_printf_i+0x1d0>
   35cda:	2204      	movs	r2, #4
   35cdc:	6821      	ldr	r1, [r4, #0]
   35cde:	4391      	bics	r1, r2
   35ce0:	6021      	str	r1, [r4, #0]
   35ce2:	2d00      	cmp	r5, #0
   35ce4:	d158      	bne.n	35d98 <_printf_i+0x1d4>
   35ce6:	9e04      	ldr	r6, [sp, #16]
   35ce8:	2b00      	cmp	r3, #0
   35cea:	d064      	beq.n	35db6 <_printf_i+0x1f2>
   35cec:	0026      	movs	r6, r4
   35cee:	9b03      	ldr	r3, [sp, #12]
   35cf0:	3642      	adds	r6, #66	; 0x42
   35cf2:	781b      	ldrb	r3, [r3, #0]
   35cf4:	7033      	strb	r3, [r6, #0]
   35cf6:	e05e      	b.n	35db6 <_printf_i+0x1f2>
   35cf8:	0648      	lsls	r0, r1, #25
   35cfa:	d5da      	bpl.n	35cb2 <_printf_i+0xee>
   35cfc:	b2ad      	uxth	r5, r5
   35cfe:	e7d8      	b.n	35cb2 <_printf_i+0xee>
   35d00:	6809      	ldr	r1, [r1, #0]
   35d02:	681a      	ldr	r2, [r3, #0]
   35d04:	0608      	lsls	r0, r1, #24
   35d06:	d505      	bpl.n	35d14 <_printf_i+0x150>
   35d08:	1d11      	adds	r1, r2, #4
   35d0a:	6019      	str	r1, [r3, #0]
   35d0c:	6813      	ldr	r3, [r2, #0]
   35d0e:	6962      	ldr	r2, [r4, #20]
   35d10:	601a      	str	r2, [r3, #0]
   35d12:	e006      	b.n	35d22 <_printf_i+0x15e>
   35d14:	0649      	lsls	r1, r1, #25
   35d16:	d5f7      	bpl.n	35d08 <_printf_i+0x144>
   35d18:	1d11      	adds	r1, r2, #4
   35d1a:	6019      	str	r1, [r3, #0]
   35d1c:	6813      	ldr	r3, [r2, #0]
   35d1e:	8aa2      	ldrh	r2, [r4, #20]
   35d20:	801a      	strh	r2, [r3, #0]
   35d22:	2300      	movs	r3, #0
   35d24:	9e04      	ldr	r6, [sp, #16]
   35d26:	6123      	str	r3, [r4, #16]
   35d28:	e054      	b.n	35dd4 <_printf_i+0x210>
   35d2a:	681a      	ldr	r2, [r3, #0]
   35d2c:	1d11      	adds	r1, r2, #4
   35d2e:	6019      	str	r1, [r3, #0]
   35d30:	6816      	ldr	r6, [r2, #0]
   35d32:	2100      	movs	r1, #0
   35d34:	6862      	ldr	r2, [r4, #4]
   35d36:	0030      	movs	r0, r6
   35d38:	f000 f922 	bl	35f80 <memchr>
   35d3c:	2800      	cmp	r0, #0
   35d3e:	d001      	beq.n	35d44 <_printf_i+0x180>
   35d40:	1b80      	subs	r0, r0, r6
   35d42:	6060      	str	r0, [r4, #4]
   35d44:	6863      	ldr	r3, [r4, #4]
   35d46:	6123      	str	r3, [r4, #16]
   35d48:	2300      	movs	r3, #0
   35d4a:	9a04      	ldr	r2, [sp, #16]
   35d4c:	7013      	strb	r3, [r2, #0]
   35d4e:	e041      	b.n	35dd4 <_printf_i+0x210>
   35d50:	6923      	ldr	r3, [r4, #16]
   35d52:	0032      	movs	r2, r6
   35d54:	9906      	ldr	r1, [sp, #24]
   35d56:	9805      	ldr	r0, [sp, #20]
   35d58:	9d07      	ldr	r5, [sp, #28]
   35d5a:	47a8      	blx	r5
   35d5c:	1c43      	adds	r3, r0, #1
   35d5e:	d043      	beq.n	35de8 <_printf_i+0x224>
   35d60:	6823      	ldr	r3, [r4, #0]
   35d62:	2500      	movs	r5, #0
   35d64:	079b      	lsls	r3, r3, #30
   35d66:	d40f      	bmi.n	35d88 <_printf_i+0x1c4>
   35d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   35d6a:	68e0      	ldr	r0, [r4, #12]
   35d6c:	4298      	cmp	r0, r3
   35d6e:	da3d      	bge.n	35dec <_printf_i+0x228>
   35d70:	0018      	movs	r0, r3
   35d72:	e03b      	b.n	35dec <_printf_i+0x228>
   35d74:	0022      	movs	r2, r4
   35d76:	2301      	movs	r3, #1
   35d78:	3219      	adds	r2, #25
   35d7a:	9906      	ldr	r1, [sp, #24]
   35d7c:	9805      	ldr	r0, [sp, #20]
   35d7e:	9e07      	ldr	r6, [sp, #28]
   35d80:	47b0      	blx	r6
   35d82:	1c43      	adds	r3, r0, #1
   35d84:	d030      	beq.n	35de8 <_printf_i+0x224>
   35d86:	3501      	adds	r5, #1
   35d88:	68e3      	ldr	r3, [r4, #12]
   35d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   35d8c:	1a9b      	subs	r3, r3, r2
   35d8e:	429d      	cmp	r5, r3
   35d90:	dbf0      	blt.n	35d74 <_printf_i+0x1b0>
   35d92:	e7e9      	b.n	35d68 <_printf_i+0x1a4>
   35d94:	2d00      	cmp	r5, #0
   35d96:	d0a9      	beq.n	35cec <_printf_i+0x128>
   35d98:	9e04      	ldr	r6, [sp, #16]
   35d9a:	0028      	movs	r0, r5
   35d9c:	0039      	movs	r1, r7
   35d9e:	f7fc ffe7 	bl	32d70 <__aeabi_uidivmod>
   35da2:	9b03      	ldr	r3, [sp, #12]
   35da4:	3e01      	subs	r6, #1
   35da6:	5c5b      	ldrb	r3, [r3, r1]
   35da8:	0028      	movs	r0, r5
   35daa:	7033      	strb	r3, [r6, #0]
   35dac:	0039      	movs	r1, r7
   35dae:	f7fc ff59 	bl	32c64 <__udivsi3>
   35db2:	1e05      	subs	r5, r0, #0
   35db4:	d1f1      	bne.n	35d9a <_printf_i+0x1d6>
   35db6:	2f08      	cmp	r7, #8
   35db8:	d109      	bne.n	35dce <_printf_i+0x20a>
   35dba:	6823      	ldr	r3, [r4, #0]
   35dbc:	07db      	lsls	r3, r3, #31
   35dbe:	d506      	bpl.n	35dce <_printf_i+0x20a>
   35dc0:	6863      	ldr	r3, [r4, #4]
   35dc2:	6922      	ldr	r2, [r4, #16]
   35dc4:	4293      	cmp	r3, r2
   35dc6:	dc02      	bgt.n	35dce <_printf_i+0x20a>
   35dc8:	2330      	movs	r3, #48	; 0x30
   35dca:	3e01      	subs	r6, #1
   35dcc:	7033      	strb	r3, [r6, #0]
   35dce:	9b04      	ldr	r3, [sp, #16]
   35dd0:	1b9b      	subs	r3, r3, r6
   35dd2:	6123      	str	r3, [r4, #16]
   35dd4:	9b07      	ldr	r3, [sp, #28]
   35dd6:	aa09      	add	r2, sp, #36	; 0x24
   35dd8:	9300      	str	r3, [sp, #0]
   35dda:	0021      	movs	r1, r4
   35ddc:	9b06      	ldr	r3, [sp, #24]
   35dde:	9805      	ldr	r0, [sp, #20]
   35de0:	f7ff fe82 	bl	35ae8 <_printf_common>
   35de4:	1c43      	adds	r3, r0, #1
   35de6:	d1b3      	bne.n	35d50 <_printf_i+0x18c>
   35de8:	2001      	movs	r0, #1
   35dea:	4240      	negs	r0, r0
   35dec:	b00b      	add	sp, #44	; 0x2c
   35dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35df0:	0003a398 	.word	0x0003a398
   35df4:	0003a387 	.word	0x0003a387

00035df8 <__sread>:
   35df8:	b570      	push	{r4, r5, r6, lr}
   35dfa:	000c      	movs	r4, r1
   35dfc:	250e      	movs	r5, #14
   35dfe:	5f49      	ldrsh	r1, [r1, r5]
   35e00:	f000 f8f0 	bl	35fe4 <_read_r>
   35e04:	2800      	cmp	r0, #0
   35e06:	db03      	blt.n	35e10 <__sread+0x18>
   35e08:	6d63      	ldr	r3, [r4, #84]	; 0x54
   35e0a:	181b      	adds	r3, r3, r0
   35e0c:	6563      	str	r3, [r4, #84]	; 0x54
   35e0e:	bd70      	pop	{r4, r5, r6, pc}
   35e10:	89a3      	ldrh	r3, [r4, #12]
   35e12:	4a02      	ldr	r2, [pc, #8]	; (35e1c <__sread+0x24>)
   35e14:	4013      	ands	r3, r2
   35e16:	81a3      	strh	r3, [r4, #12]
   35e18:	e7f9      	b.n	35e0e <__sread+0x16>
   35e1a:	46c0      	nop			; (mov r8, r8)
   35e1c:	ffffefff 	.word	0xffffefff

00035e20 <__swrite>:
   35e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35e22:	001f      	movs	r7, r3
   35e24:	898b      	ldrh	r3, [r1, #12]
   35e26:	0005      	movs	r5, r0
   35e28:	000c      	movs	r4, r1
   35e2a:	0016      	movs	r6, r2
   35e2c:	05db      	lsls	r3, r3, #23
   35e2e:	d505      	bpl.n	35e3c <__swrite+0x1c>
   35e30:	230e      	movs	r3, #14
   35e32:	5ec9      	ldrsh	r1, [r1, r3]
   35e34:	2200      	movs	r2, #0
   35e36:	2302      	movs	r3, #2
   35e38:	f000 f88e 	bl	35f58 <_lseek_r>
   35e3c:	89a3      	ldrh	r3, [r4, #12]
   35e3e:	4a05      	ldr	r2, [pc, #20]	; (35e54 <__swrite+0x34>)
   35e40:	0028      	movs	r0, r5
   35e42:	4013      	ands	r3, r2
   35e44:	81a3      	strh	r3, [r4, #12]
   35e46:	0032      	movs	r2, r6
   35e48:	230e      	movs	r3, #14
   35e4a:	5ee1      	ldrsh	r1, [r4, r3]
   35e4c:	003b      	movs	r3, r7
   35e4e:	f000 f839 	bl	35ec4 <_write_r>
   35e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35e54:	ffffefff 	.word	0xffffefff

00035e58 <__sseek>:
   35e58:	b570      	push	{r4, r5, r6, lr}
   35e5a:	000c      	movs	r4, r1
   35e5c:	250e      	movs	r5, #14
   35e5e:	5f49      	ldrsh	r1, [r1, r5]
   35e60:	f000 f87a 	bl	35f58 <_lseek_r>
   35e64:	89a3      	ldrh	r3, [r4, #12]
   35e66:	1c42      	adds	r2, r0, #1
   35e68:	d103      	bne.n	35e72 <__sseek+0x1a>
   35e6a:	4a05      	ldr	r2, [pc, #20]	; (35e80 <__sseek+0x28>)
   35e6c:	4013      	ands	r3, r2
   35e6e:	81a3      	strh	r3, [r4, #12]
   35e70:	bd70      	pop	{r4, r5, r6, pc}
   35e72:	2280      	movs	r2, #128	; 0x80
   35e74:	0152      	lsls	r2, r2, #5
   35e76:	4313      	orrs	r3, r2
   35e78:	81a3      	strh	r3, [r4, #12]
   35e7a:	6560      	str	r0, [r4, #84]	; 0x54
   35e7c:	e7f8      	b.n	35e70 <__sseek+0x18>
   35e7e:	46c0      	nop			; (mov r8, r8)
   35e80:	ffffefff 	.word	0xffffefff

00035e84 <__sclose>:
   35e84:	b510      	push	{r4, lr}
   35e86:	230e      	movs	r3, #14
   35e88:	5ec9      	ldrsh	r1, [r1, r3]
   35e8a:	f000 f82f 	bl	35eec <_close_r>
   35e8e:	bd10      	pop	{r4, pc}

00035e90 <strchr>:
   35e90:	b2c9      	uxtb	r1, r1
   35e92:	7803      	ldrb	r3, [r0, #0]
   35e94:	2b00      	cmp	r3, #0
   35e96:	d004      	beq.n	35ea2 <strchr+0x12>
   35e98:	4299      	cmp	r1, r3
   35e9a:	d100      	bne.n	35e9e <strchr+0xe>
   35e9c:	4770      	bx	lr
   35e9e:	3001      	adds	r0, #1
   35ea0:	e7f7      	b.n	35e92 <strchr+0x2>
   35ea2:	424b      	negs	r3, r1
   35ea4:	4159      	adcs	r1, r3
   35ea6:	4249      	negs	r1, r1
   35ea8:	4008      	ands	r0, r1
   35eaa:	e7f7      	b.n	35e9c <strchr+0xc>

00035eac <__ascii_wctomb>:
   35eac:	1e0b      	subs	r3, r1, #0
   35eae:	d004      	beq.n	35eba <__ascii_wctomb+0xe>
   35eb0:	2aff      	cmp	r2, #255	; 0xff
   35eb2:	d904      	bls.n	35ebe <__ascii_wctomb+0x12>
   35eb4:	238a      	movs	r3, #138	; 0x8a
   35eb6:	6003      	str	r3, [r0, #0]
   35eb8:	3b8b      	subs	r3, #139	; 0x8b
   35eba:	0018      	movs	r0, r3
   35ebc:	4770      	bx	lr
   35ebe:	700a      	strb	r2, [r1, #0]
   35ec0:	2301      	movs	r3, #1
   35ec2:	e7fa      	b.n	35eba <__ascii_wctomb+0xe>

00035ec4 <_write_r>:
   35ec4:	b570      	push	{r4, r5, r6, lr}
   35ec6:	0005      	movs	r5, r0
   35ec8:	0008      	movs	r0, r1
   35eca:	0011      	movs	r1, r2
   35ecc:	2200      	movs	r2, #0
   35ece:	4c06      	ldr	r4, [pc, #24]	; (35ee8 <_write_r+0x24>)
   35ed0:	6022      	str	r2, [r4, #0]
   35ed2:	001a      	movs	r2, r3
   35ed4:	f7f5 fa52 	bl	2b37c <_write>
   35ed8:	1c43      	adds	r3, r0, #1
   35eda:	d103      	bne.n	35ee4 <_write_r+0x20>
   35edc:	6823      	ldr	r3, [r4, #0]
   35ede:	2b00      	cmp	r3, #0
   35ee0:	d000      	beq.n	35ee4 <_write_r+0x20>
   35ee2:	602b      	str	r3, [r5, #0]
   35ee4:	bd70      	pop	{r4, r5, r6, pc}
   35ee6:	46c0      	nop			; (mov r8, r8)
   35ee8:	2000581c 	.word	0x2000581c

00035eec <_close_r>:
   35eec:	2300      	movs	r3, #0
   35eee:	b570      	push	{r4, r5, r6, lr}
   35ef0:	4c06      	ldr	r4, [pc, #24]	; (35f0c <_close_r+0x20>)
   35ef2:	0005      	movs	r5, r0
   35ef4:	0008      	movs	r0, r1
   35ef6:	6023      	str	r3, [r4, #0]
   35ef8:	f7f5 fa94 	bl	2b424 <_close>
   35efc:	1c43      	adds	r3, r0, #1
   35efe:	d103      	bne.n	35f08 <_close_r+0x1c>
   35f00:	6823      	ldr	r3, [r4, #0]
   35f02:	2b00      	cmp	r3, #0
   35f04:	d000      	beq.n	35f08 <_close_r+0x1c>
   35f06:	602b      	str	r3, [r5, #0]
   35f08:	bd70      	pop	{r4, r5, r6, pc}
   35f0a:	46c0      	nop			; (mov r8, r8)
   35f0c:	2000581c 	.word	0x2000581c

00035f10 <_fstat_r>:
   35f10:	2300      	movs	r3, #0
   35f12:	b570      	push	{r4, r5, r6, lr}
   35f14:	4c06      	ldr	r4, [pc, #24]	; (35f30 <_fstat_r+0x20>)
   35f16:	0005      	movs	r5, r0
   35f18:	0008      	movs	r0, r1
   35f1a:	0011      	movs	r1, r2
   35f1c:	6023      	str	r3, [r4, #0]
   35f1e:	f7f5 fa8b 	bl	2b438 <_fstat>
   35f22:	1c43      	adds	r3, r0, #1
   35f24:	d103      	bne.n	35f2e <_fstat_r+0x1e>
   35f26:	6823      	ldr	r3, [r4, #0]
   35f28:	2b00      	cmp	r3, #0
   35f2a:	d000      	beq.n	35f2e <_fstat_r+0x1e>
   35f2c:	602b      	str	r3, [r5, #0]
   35f2e:	bd70      	pop	{r4, r5, r6, pc}
   35f30:	2000581c 	.word	0x2000581c

00035f34 <_isatty_r>:
   35f34:	2300      	movs	r3, #0
   35f36:	b570      	push	{r4, r5, r6, lr}
   35f38:	4c06      	ldr	r4, [pc, #24]	; (35f54 <_isatty_r+0x20>)
   35f3a:	0005      	movs	r5, r0
   35f3c:	0008      	movs	r0, r1
   35f3e:	6023      	str	r3, [r4, #0]
   35f40:	f7f5 fa88 	bl	2b454 <_isatty>
   35f44:	1c43      	adds	r3, r0, #1
   35f46:	d103      	bne.n	35f50 <_isatty_r+0x1c>
   35f48:	6823      	ldr	r3, [r4, #0]
   35f4a:	2b00      	cmp	r3, #0
   35f4c:	d000      	beq.n	35f50 <_isatty_r+0x1c>
   35f4e:	602b      	str	r3, [r5, #0]
   35f50:	bd70      	pop	{r4, r5, r6, pc}
   35f52:	46c0      	nop			; (mov r8, r8)
   35f54:	2000581c 	.word	0x2000581c

00035f58 <_lseek_r>:
   35f58:	b570      	push	{r4, r5, r6, lr}
   35f5a:	0005      	movs	r5, r0
   35f5c:	0008      	movs	r0, r1
   35f5e:	0011      	movs	r1, r2
   35f60:	2200      	movs	r2, #0
   35f62:	4c06      	ldr	r4, [pc, #24]	; (35f7c <_lseek_r+0x24>)
   35f64:	6022      	str	r2, [r4, #0]
   35f66:	001a      	movs	r2, r3
   35f68:	f7f5 fa7d 	bl	2b466 <_lseek>
   35f6c:	1c43      	adds	r3, r0, #1
   35f6e:	d103      	bne.n	35f78 <_lseek_r+0x20>
   35f70:	6823      	ldr	r3, [r4, #0]
   35f72:	2b00      	cmp	r3, #0
   35f74:	d000      	beq.n	35f78 <_lseek_r+0x20>
   35f76:	602b      	str	r3, [r5, #0]
   35f78:	bd70      	pop	{r4, r5, r6, pc}
   35f7a:	46c0      	nop			; (mov r8, r8)
   35f7c:	2000581c 	.word	0x2000581c

00035f80 <memchr>:
   35f80:	b2c9      	uxtb	r1, r1
   35f82:	1882      	adds	r2, r0, r2
   35f84:	4290      	cmp	r0, r2
   35f86:	d101      	bne.n	35f8c <memchr+0xc>
   35f88:	2000      	movs	r0, #0
   35f8a:	4770      	bx	lr
   35f8c:	7803      	ldrb	r3, [r0, #0]
   35f8e:	428b      	cmp	r3, r1
   35f90:	d0fb      	beq.n	35f8a <memchr+0xa>
   35f92:	3001      	adds	r0, #1
   35f94:	e7f6      	b.n	35f84 <memchr+0x4>

00035f96 <_realloc_r>:
   35f96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35f98:	0007      	movs	r7, r0
   35f9a:	000d      	movs	r5, r1
   35f9c:	0016      	movs	r6, r2
   35f9e:	2900      	cmp	r1, #0
   35fa0:	d105      	bne.n	35fae <_realloc_r+0x18>
   35fa2:	0011      	movs	r1, r2
   35fa4:	f7fe fe9e 	bl	34ce4 <_malloc_r>
   35fa8:	0004      	movs	r4, r0
   35faa:	0020      	movs	r0, r4
   35fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35fae:	2a00      	cmp	r2, #0
   35fb0:	d103      	bne.n	35fba <_realloc_r+0x24>
   35fb2:	f7fe fe4d 	bl	34c50 <_free_r>
   35fb6:	0034      	movs	r4, r6
   35fb8:	e7f7      	b.n	35faa <_realloc_r+0x14>
   35fba:	f000 f827 	bl	3600c <_malloc_usable_size_r>
   35fbe:	002c      	movs	r4, r5
   35fc0:	4286      	cmp	r6, r0
   35fc2:	d9f2      	bls.n	35faa <_realloc_r+0x14>
   35fc4:	0031      	movs	r1, r6
   35fc6:	0038      	movs	r0, r7
   35fc8:	f7fe fe8c 	bl	34ce4 <_malloc_r>
   35fcc:	1e04      	subs	r4, r0, #0
   35fce:	d0ec      	beq.n	35faa <_realloc_r+0x14>
   35fd0:	0029      	movs	r1, r5
   35fd2:	0032      	movs	r2, r6
   35fd4:	f7fe fe18 	bl	34c08 <memcpy>
   35fd8:	0029      	movs	r1, r5
   35fda:	0038      	movs	r0, r7
   35fdc:	f7fe fe38 	bl	34c50 <_free_r>
   35fe0:	e7e3      	b.n	35faa <_realloc_r+0x14>
	...

00035fe4 <_read_r>:
   35fe4:	b570      	push	{r4, r5, r6, lr}
   35fe6:	0005      	movs	r5, r0
   35fe8:	0008      	movs	r0, r1
   35fea:	0011      	movs	r1, r2
   35fec:	2200      	movs	r2, #0
   35fee:	4c06      	ldr	r4, [pc, #24]	; (36008 <_read_r+0x24>)
   35ff0:	6022      	str	r2, [r4, #0]
   35ff2:	001a      	movs	r2, r3
   35ff4:	f7f5 f998 	bl	2b328 <_read>
   35ff8:	1c43      	adds	r3, r0, #1
   35ffa:	d103      	bne.n	36004 <_read_r+0x20>
   35ffc:	6823      	ldr	r3, [r4, #0]
   35ffe:	2b00      	cmp	r3, #0
   36000:	d000      	beq.n	36004 <_read_r+0x20>
   36002:	602b      	str	r3, [r5, #0]
   36004:	bd70      	pop	{r4, r5, r6, pc}
   36006:	46c0      	nop			; (mov r8, r8)
   36008:	2000581c 	.word	0x2000581c

0003600c <_malloc_usable_size_r>:
   3600c:	1f0b      	subs	r3, r1, #4
   3600e:	681b      	ldr	r3, [r3, #0]
   36010:	1f18      	subs	r0, r3, #4
   36012:	2b00      	cmp	r3, #0
   36014:	da01      	bge.n	3601a <_malloc_usable_size_r+0xe>
   36016:	580b      	ldr	r3, [r1, r0]
   36018:	18c0      	adds	r0, r0, r3
   3601a:	4770      	bx	lr

0003601c <pcWelcomeMessage>:
   3601c:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   3602c:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   3603c:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   3604c:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   3605c:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   3606c:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   3607c:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   3608c:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   3609c:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   360ac:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   360bc:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   360cc:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   360dc:	0a0d 0000 656c 0064 656c 2064 4e5b 6f65     ....led.led [Neo
   360ec:	754e 5d6d 5b20 656b 6e79 6d75 5b5d 5d52     Num] [keynum][R]
   360fc:	475b 5b5d 5d42 203a 6553 7374 7420 6568     [G][B]: Sets the
   3610c:	6720 7669 6e65 4c20 4445 7420 206f 6874      given LED to th
   3611c:	2065 6967 6576 206e 2c52 2c47 2042 6176     e given R,G,B va
   3612c:	756c 7365 0d2e 000a 6873 6374 0000 0000     lues....shtc....
   3613c:	6873 6374 203a 6567 2074 6574 706d 6120     shtc: get temp a
   3614c:	646e 6820 6d75 6469 7469 0d79 000a 0000     nd humidity.....
   3615c:	3269 0063 3269 3a63 5320 6163 736e 4920     i2c.i2c: Scans I
   3616c:	4332 6220 7375 0a0d 0000 0000 6c63 0073     2C bus......cls.
   3617c:	6c63 3a73 4320 656c 7261 2073 6874 2065     cls: Clears the 
   3618c:	6574 6d72 6e69 6c61 7320 7263 6565 0d6e     terminal screen.
   3619c:	000a 0000 6f43 6c75 2064 6f6e 2074 6c61     ....Could not al
   361ac:	6f6c 6163 6574 7320 6d65 7061 6f68 6572     locate semaphore
   361bc:	0a0d 0000 0a0d 0000 616f 0000 6325 325b     ........oa..%c[2
   361cc:	0d4b 003e 2008 0008 6341 6563 656c 6172     K.>.. ..Accelera
   361dc:	6974 6e6f 5b20 676d 3a5d 2058 6425 5909     tion [mg]:X %d.Y
   361ec:	2520 0964 205a 6425 0a0d 0000 6f4e 6420      %d.Z %d....No d
   361fc:	7461 2061 6572 6461 2179 5320 6e65 6964     ata ready! Sendi
   3620c:	676e 6420 6d75 796d 6420 7461 2061 0a0d     ng dummy data ..
   3621c:	0000 0000 4853 4354 6520 7272 726f 0d21     ....SHTC error!.
   3622c:	000a 0000 7568 696d 6964 7974 3d20 2520     ....humidity = %
   3623c:	2064 202c 6574 706d 3d20 2520 2064 0a0d     d , temp = %d ..
   3624c:	0000 0000 6325 325b 004a 0000 654b 6e79     ....%c[2J...Keyn
   3625c:	6d75 6d20 7375 2074 6562 6220 7465 6577     um must be betwe
   3626c:	6e65 3020 7420 206f 3531 0a0d 0000 0000     en 0 to 15......
   3627c:	6552 2064 756d 7473 6220 2065 6562 7774     Red must be betw
   3628c:	6565 206e 2030 6e61 2064 3532 0d35 000a     een 0 and 255...
   3629c:	7247 6565 206e 756d 7473 6220 2065 6562     Green must be be
   362ac:	7774 6565 206e 2030 6e61 2064 3532 0d35     tween 0 and 255.
   362bc:	000a 0000 6c42 6575 6d20 7375 2074 6562     ....Blue must be
   362cc:	6220 7465 6577 6e65 3020 6120 646e 3220      between 0 and 2
   362dc:	3535 0a0d 0000 0000 6e75 7865 6570 7463     55......unexpect
   362ec:	6465 4920 4332 6520 7272 726f 0a0d 0000     ed I2C error....
   362fc:	2030 3120 2020 2032 3320 2020 2034 3520     0  1  2  3  4  5
   3630c:	2020 2036 3720 2020 2038 3920 2020 2061       6  7  8  9  a 
   3631c:	6220 2020 2063 6420 2020 2065 6620 0a0d      b  c  d  e  f..
   3632c:	0000 0000 3025 7832 203a 0000 3025 7832     ....%02x: ..%02x
   3633c:	0020 0000                                    ...

00036340 <xImuGetCommand>:
   36340:	6060 0003 6064 0003 31f1 0001 0000 0000     ``..d`...1......

00036350 <xOTAUCommand>:
   36350:	6088 0003 608c 0003 33f1 0001 0000 0000     .`...`...3......

00036360 <xResetCommand>:
   36360:	60bc 0003 60c4 0003 3411 0001 0000 0000     .`...`...4......

00036370 <xNeotrellisTurnLEDCommand>:
   36370:	60e0 0003 60e4 0003 3431 0001 0005 0000     .`...`..14......

00036380 <xSHTCGetCommand>:
   36380:	6134 0003 613c 0003 333d 0001 0000 0000     4a..<a..=3......

00036390 <xI2cScan>:
   36390:	615c 0003 6160 0003 3619 0001 0000 0000     \a..`a...6......

000363a0 <xClearScreen>:
   363a0:	6178 0003 617c 0003 33a9 0001 0000 0000     xa..|a...3......
   363b0:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   363c0:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   363d0:	0a0d 6873 7069 615f 7272 2520 2064 6425     ..ship_arr %d %d
   363e0:	2520 0d64 000a 0000 6c50 7961 7265 3120      %d.....Player 1
   363f0:	5720 6e69 2173 0d20 000a 0000 6c50 7961      Wins! .....Play
   36400:	7265 3220 5720 6e69 2173 0d20 000a 0000     er 2 Wins! .....

00036410 <msgBaseGetHWID>:
   36410:	0100 0000                                   ....

00036414 <msgNeopixelPin>:
   36414:	010e 0003                                   ....

00036418 <msgNeopixelSpeed>:
   36418:	020e 0001                                   ....

0003641c <msgNeopixelBufLength>:
   3641c:	030e 3000                                   ...0

00036420 <msgKeypadEnableInt>:
   36420:	0210 0001                                   ....

00036424 <msgKeypadGetCount>:
   36424:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   36434:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   36444:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   36454:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   36464:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   36474:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   36484:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   36494:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   364a4:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   364b4:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   364c4:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   364d4:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   364e4:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   364f4:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   36504:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   36514:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   36524:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   36534:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   36544:	6574 2164 0000 0000 6c50 6361 6d65 6e65     ted!....Placemen
   36554:	2074 6966 696e 6873 6465 2021 0a0d 0000     t finished! ....
   36564:	6c50 6361 6d65 6e65 2074 7473 7261 6574     Placement starte
   36574:	2164 0d20 000a 0000 6552 6461 2079 6f74     d! .....Ready to
   36584:	6620 7269 2165 0d20 000a 0000                fire! .....

00036590 <main_mqtt_broker>:
   36590:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   365a0:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   365b0:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   365c0:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   365d0:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   365e0:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   365f0:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   36600:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   36610:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   36620:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   36630:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   36640:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   36650:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   36660:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   36670:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   36680:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   36690:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   366a0:	7564 7e2f 6170 7474 6e61 2f61 7766 622e     du/~pattana/fw.b
   366b0:	6e69 0000 7473 726f 5f65 6966 656c 705f     in..store_file_p
   366c0:	6361 656b 3a74 6520 706d 7974 6420 7461     acket: empty dat
   366d0:	2e61 0a0d 0000 0000 7473 726f 5f65 6966     a.......store_fi
   366e0:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   366f0:	616e 656d 6920 2073 6e69 6176 696c 2e64     name is invalid.
   36700:	4420 776f 6c6e 616f 2064 6163 636e 6c65      Download cancel
   36710:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   36720:	656c 705f 6361 656b 3a74 6320 6572 7461     le_packet: creat
   36730:	6e69 2067 6966 656c 5b20 7325 0d5d 000a     ing file [%s]...
   36740:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   36750:	3a74 6620 6c69 2065 7263 6165 6974 6e6f     t: file creation
   36760:	6520 7272 726f 2021 6572 3a74 6425 0a0d      error! ret:%d..
   36770:	0000 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   36780:	6361 656b 3a74 6620 6c69 2065 7277 7469     acket: file writ
   36790:	2065 7265 6f72 2c72 6420 776f 6c6e 616f     e error, downloa
   367a0:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   367b0:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   367c0:	3a74 7220 6365 6965 6576 5b64 6c25 5d75     t: received[%lu]
   367d0:	202c 6966 656c 7320 7a69 5b65 6c25 5d75     , file size[%lu]
   367e0:	0a0d 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   367f0:	6361 656b 3a74 6620 6c69 2065 6f64 6e77     acket: file down
   36800:	6f6c 6461 6465 7320 6375 6563 7373 7566     loaded successfu
   36810:	6c6c 2e79 0a0d 0000 7468 7074 635f 696c     lly.....http_cli
   36820:	6e65 5f74 6163 6c6c 6162 6b63 203a 5448     ent_callback: HT
   36830:	5054 6320 696c 6e65 2074 6f73 6b63 7465     TP client socket
   36840:	6320 6e6f 656e 7463 6465 0d2e 000a 0000      connected......
   36850:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   36860:	6162 6b63 203a 6572 7571 7365 2074 6f63     back: request co
   36870:	706d 656c 6574 2e64 0a0d 0000 7468 7074     mpleted.....http
   36880:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   36890:	203a 6572 6563 7669 6465 7220 7365 6f70     : received respo
   368a0:	736e 2065 7525 6420 7461 2061 6973 657a     nse %u data size
   368b0:	2520 0d75 000a 0000 7468 7074 635f 696c      %u.....http_cli
   368c0:	6e65 5f74 6163 6c6c 6162 6b63 203a 6964     ent_callback: di
   368d0:	6373 6e6f 656e 7463 6f69 206e 6572 7361     sconnection reas
   368e0:	6e6f 253a 0d64 000a 6572 6f73 766c 5f65     on:%d...resolve_
   368f0:	6263 203a 7325 4920 2050 6461 7264 7365     cb: %s IP addres
   36900:	2073 7369 2520 2e64 6425 252e 2e64 6425     s is %d.%d.%d.%d
   36910:	0a0d 0a0d 0000 0000 6977 6966 635f 3a62     ........wifi_cb:
   36920:	4d20 4d32 575f 4649 5f49 4f43 4e4e 4345      M2M_WIFI_CONNEC
   36930:	4554 0d44 000a 0000 6977 6966 635f 3a62     TED.....wifi_cb:
   36940:	4d20 4d32 575f 4649 5f49 4944 4353 4e4f      M2M_WIFI_DISCON
   36950:	454e 5443 4445 0a0d 0000 0000 3738 3536     NECTED......8765
   36960:	3334 3132 0000 0000 694d 3120 0031 0000     4321....Mi 11...
   36970:	6977 6966 635f 3a62 4920 2050 6461 7264     wifi_cb: IP addr
   36980:	7365 2073 7369 2520 2e75 7525 252e 2e75     ess is %u.%u.%u.
   36990:	7525 0a0d 0000 0000 7245 6f72 2072 6f63     %u......Error co
   369a0:	6e6e 6365 6974 676e 7420 206f 514d 5454     nnecting to MQTT
   369b0:	4220 6f72 656b 2172 0a0d 0000 6e69 7469      Broker!....init
   369c0:	735f 6f74 6172 6567 203a 6c70 6165 6573     _storage: please
   369d0:	7020 756c 2067 6e61 5320 2f44 4d4d 2043      plug an SD/MMC 
   369e0:	6163 6472 6920 206e 6c73 746f 2e2e 0d2e     card in slot....
   369f0:	000a 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36a00:	203a 4453 4320 7261 2064 6e69 7473 6c61     : SD Card instal
   36a10:	206c 6166 6c69 6465 0d2e 000a 6e69 7469     l failed....init
   36a20:	735f 6f74 6172 6567 203a 7274 2079 6e75     _storage: try un
   36a30:	6c70 6775 6120 646e 7220 2d65 6c70 6775     plug and re-plug
   36a40:	7420 6568 6320 7261 2e64 0a0d 0000 0000      the card.......
   36a50:	6e69 7469 735f 6f74 6172 6567 203a 6f6d     init_storage: mo
   36a60:	6e75 6974 676e 5320 2044 6163 6472 2e2e     unting SD card..
   36a70:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36a80:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   36a90:	6166 6c69 6465 2021 7228 7365 2520 2964     failed! (res %d)
   36aa0:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   36ab0:	203a 4453 6320 7261 2064 6f6d 6e75 2074     : SD card mount 
   36ac0:	4b4f 0d2e 000a 0000 6f63 666e 6769 7275     OK......configur
   36ad0:	5f65 7468 7074 635f 696c 6e65 3a74 4820     e_http_client: H
   36ae0:	5454 2050 6c63 6569 746e 6920 696e 6974     TTP client initi
   36af0:	6c61 7a69 7461 6f69 206e 6166 6c69 6465     alization failed
   36b00:	2021 7228 7365 2520 2964 0a0d 0000 0000     ! (res %d)......
   36b10:	005b 0000 0a0d 6873 7069 7320 7a69 2065     [.....ship size 
   36b20:	656d 7373 6761 2065 6572 6563 7669 6465     message received
   36b30:	0d21 000a 0a0d 2520 2a2e 0073 0a0d 2e25     !..... %.*s...%.
   36b40:	732a 0000 0a0d 7420 6f6f 6d20 6e61 2079     *s.... too many 
   36b50:	6873 7069 2121 0a0d 0000 0000 0a0d 7574     ship!!........tu
   36b60:	6e72 6d20 7365 6173 6567 7220 6365 6965     rn message recei
   36b70:	6576 2164 0a0d 0000 0a0d 6f43 6e6e 6365     ved!......Connec
   36b80:	6974 676e 7420 206f 7242 6b6f 7265 2e2e     ting to Broker..
   36b90:	002e 0000 7242 4a73 4e42 6f56 4251 376c     ....BrsJBNVoQBl7
   36ba0:	0000 0000 7472 7974 626f 6a65 0000 0000     ....rttyobej....
   36bb0:	514d 5454 2020 7245 6f72 2072 202d 4f4e     MQTT  Error - NO
   36bc0:	2054 6f43 6e6e 6365 6574 2064 6f74 6220     T Connected to b
   36bd0:	6f72 656b 0d72 000a 514d 5454 4320 6e6f     roker...MQTT Con
   36be0:	656e 7463 6465 7420 206f 7262 6b6f 7265     nected to broker
   36bf0:	0a0d 0000 6f43 6e6e 6365 2074 6166 6c69     ....Connect fail
   36c00:	7420 206f 6573 7672 7265 2528 2973 2021      to server(%s)! 
   36c10:	6572 7274 2079 7469 6120 7475 6d6f 7461     retry it automat
   36c20:	6369 6c61 796c 0d2e 000a 0000 5345 3545     ically......ESE5
   36c30:	3631 545f 3331 735f 6968 7370 7a69 0065     16_T13_shipsize.
   36c40:	5345 3545 3631 545f 3331 745f 7275 006e     ESE516_T13_turn.
   36c50:	514d 5454 4320 6e6f 656e 7463 6465 0a0d     MQTT Connected..
   36c60:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
   36c70:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   36c80:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   36c90:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   36ca0:	6f63 6e6e 6365 6574 0d64 000a 514d 5454     connected...MQTT
   36cb0:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   36cc0:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   36cd0:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   36ce0:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   36cf0:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   36d00:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   36d10:	0d29 000a 6f43 6e6e 6365 6574 2064 6f74     )...Connected to
   36d20:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   36d30:	0a0d 0000 5345 3545 3631 545f 3331 6c5f     ....ESE516_T13_l
   36d40:	636f 0000 5345 3545 3631 545f 3331 665f     oc..ESE516_T13_f
   36d50:	7269 0065 5245 4f52 2052 6e49 7469 6169     ire.ERROR Initia
   36d60:	696c 697a 676e 5720 6669 2069 6144 6174     lizing Wifi Data
   36d70:	7120 6575 6575 2173 0a0d 0000 5345 3545      queues!....ESE5
   36d80:	3631 2d20 5720 6669 2069 6e49 7469 4320     16 - Wifi Init C
   36d90:	646f 0d65 000a 0000 616d 6e69 203a 326d     ode.....main: m2
   36da0:	5f6d 6977 6966 695f 696e 2074 6163 6c6c     m_wifi_init call
   36db0:	6520 7272 726f 2021 7228 7365 2520 2964      error! (res %d)
   36dc0:	0a0d 0000 616d 6e69 203a 6f63 6e6e 6365     ....main: connec
   36dd0:	6974 676e 7420 206f 6957 6946 4120 2050     ting to WiFi AP 
   36de0:	7325 2e2e 0d2e 000a 0031 0000 5345 3545     %s......1...ESE5
   36df0:	3631 545f 3331 705f 0031 0000 514d 5454     16_T13_p1...MQTT
   36e00:	7320 6174 7472 7320 6769 616e 206c 6573      start signal se
   36e10:	746e 0000 465b 4941 5d4c 7220 7365 2520     nt..[FAIL] res %
   36e20:	0d64 000a 7075 6164 6574 742e 7478 6120     d...update.txt a
   36e30:	6464 6465 0d21 000a 3a30 7075 6164 6574     dded!...0:update
   36e40:	742e 7478 0000 0000 207b 7022 2022 203a     .txt....{ "p" : 
   36e50:	6425 202c 6c22 636f 3a22 0000 007d 0000     %d, "loc":..}...
   36e60:	207b 7022 2022 203a 6425 202c 6622 7269     { "p" : %d, "fir
   36e70:	2265 003a 6425 002c 6425 005d 2520 0064     e":.%d,.%d]. %d.
   36e80:	6964 0001 6970 0001 6982 0001 69d8 0001     di..pi...i...i..
   36e90:	69f8 0001 6568 706c 0000 0000 0a0d 6568     .i..help......he
   36ea0:	706c 0d3a 200a 694c 7473 2073 6c61 206c     lp:.. Lists all 
   36eb0:	6874 2065 6572 6967 7473 7265 6465 6320     the registered c
   36ec0:	6d6f 616d 646e 0d73 0d0a 000a 6e49 6f63     ommands.....Inco
   36ed0:	7272 6365 2074 6f63 6d6d 6e61 2064 6170     rrect command pa
   36ee0:	6172 656d 6574 2872 2973 202e 4520 746e     rameter(s).  Ent
   36ef0:	7265 2220 6568 706c 2022 6f74 7620 6569     er "help" to vie
   36f00:	2077 2061 696c 7473 6f20 2066 7661 6961     w a list of avai
   36f10:	616c 6c62 2065 6f63 6d6d 6e61 7364 0d2e     lable commands..
   36f20:	0d0a 000a 6f43 6d6d 6e61 2064 6f6e 2074     ....Command not 
   36f30:	6572 6f63 6e67 7369 6465 202e 4520 746e     recognised.  Ent
   36f40:	7265 2720 6568 706c 2027 6f74 7620 6569     er 'help' to vie
   36f50:	2077 2061 696c 7473 6f20 2066 7661 6961     w a list of avai
   36f60:	616c 6c62 2065 6f63 6d6d 6e61 7364 0d2e     lable commands..
   36f70:	0d0a 000a                                   ....

00036f74 <xHelpCommand>:
   36f74:	6e94 0003 6e9c 0003 8659 0001 0000 0000     .n...n..Y.......
   36f84:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   36f94:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   36fa4:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   36fb4:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   36fc4:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   36fd4:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   36fe4:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   36ff4:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   37004:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   37014:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37024:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   37034:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   37044:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   37054:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   37064:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   37074:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   37084:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37094:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   370a4:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   370b4:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   370c4:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   370d4:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   370e4:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   370f4:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37104:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   37114:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   37124:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37134:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   37144:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   37154:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   37164:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   37174:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   37184:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   37194:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   371a4:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   371b4:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   371c4:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   371d4:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   371e4:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   371f4:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   37204:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   37214:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   37224:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   37234:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   37244:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   37254:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   37264:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   37274:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   37284:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   37294:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   372a4:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   372b4:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   372c4:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   372d4:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   372e4:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   372f4:	6365 6374 616c 7373 0021 0000 8d7e 0001     ectclass!...~...
   37304:	8d76 0001 8d7a 0001 8d6e 0001 8d72 0001     v...z...n...r...
   37314:	8d82 0001 8d86 0001 8d8a 0001 8d8e 0001     ................
   37324:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37334:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37344:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   37354:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   37364:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   37374:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   37384:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   37394:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   373a4:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   373b4:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   373c4:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   373d4:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   373e4:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   373f4:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   37404:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   37414:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   37424:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   37434:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   37444:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   37454:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   37464:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   37474:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   37484:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   37494:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   374a4:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   374b4:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   374c4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   374d4:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   374e4:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   374f4:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   37504:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   37514:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   37524:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   37534:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   37544:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   37554:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   37564:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   37574:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   37584:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   37594:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   375a4:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   375b4:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   375c4:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   375d4:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   375e4:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   375f4:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   37604:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   37614:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   37624:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   37634:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   37644:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   37654:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   37664:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   37674:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   37684:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   37694:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   376a4:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   376b4:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   376c4:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   376d4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   376e4:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   376f4:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   37704:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   37714:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37724:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37734:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   37744:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   37754:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   37764:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   37774:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   37784:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37794:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   377a4:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   377b4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   377c4:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   377d4:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   377e4:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   377f4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37804:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37814:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37824:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   37834:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   37844:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   37854:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   37864:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   37874:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   37884:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37894:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   378a4:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   378b4:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   378c4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   378d4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   378e4:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   378f4:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   37904:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   37914:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37924:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   37934:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   37944:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   37954:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   37964:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   37974:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   37984:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   37994:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   379a4:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   379b4:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   379c4:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   379d4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   379e4:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   379f4:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   37a04:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   37a14:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   37a24:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   37a34:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   37a44:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   37a54:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   37a64:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37a74:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   37a84:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   37a94:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   37aa4:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   37ab4:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37ac4:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   37ad4:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   37ae4:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37af4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37b04:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37b14:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   37b24:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   37b34:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37b44:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   37b54:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   37b64:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   37b74:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   37b84:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   37b94:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   37ba4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37bb4:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   37bc4:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   37bd4:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   37be4:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   37bf4:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   37c04:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   37c14:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   37c24:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   37c34:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   37c44:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37c54:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   37c64:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   37c74:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   37c84:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37c94:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   37ca4:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   37cb4:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   37cc4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   37cd4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37ce4:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   37cf4:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   37d04:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   37d14:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37d24:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   37d34:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37d44:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37d54:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37d64:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   37d74:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37d84:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37d94:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37da4:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   37db4:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   37dc4:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   37dd4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37de4:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   37df4:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   37e04:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   37e14:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   37e24:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   37e34:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   37e44:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   37e54:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   37e64:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   37e74:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   37e84:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   37e94:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37ea4:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37eb4:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37ec4:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   37ed4:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   37ee4:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   37ef4:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   37f04:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   37f14:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   37f24:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   37f34:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   37f44:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   37f54:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37f64:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   37f74:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   37f84:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   37f94:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   37fa4:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   37fb4:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   37fc4:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   37fd4:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   37fe4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   37ff4:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   38004:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   38014:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38024:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   38034:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   38044:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   38054:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38064:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   38074:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   38084:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   38094:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   380a4:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   380b4:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   380c4:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   380d4:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   380e4:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   380f4:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   38104:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   38114:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38124:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   38134:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   38144:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   38154:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   38164:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   38174:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38184:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   38194:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   381a4:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   381b4:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   381c4:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   381d4:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   381e4:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   381f4:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38204:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   38214:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38224:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   38234:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   38244:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   38254:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   38264:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   38274:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   38284:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   38294:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   382a4:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   382b4:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   382c4:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   382d4:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   382e4:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   382f4:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   38304:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38314:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   38324:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   38334:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   38344:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38354:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   38364:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   38374:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   38384:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   38394:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   383a4:	0000 0000 6d54 2072 7653 0063 de18 0001     ....Tmr Svc.....
   383b4:	de18 0001 de18 0001 dea6 0001 de70 0001     ............p...
   383c4:	de9a 0001 de18 0001 de18 0001 dea6 0001     ................
   383d4:	de70 0001                                   p...

000383d8 <sd_mmc_trans_units>:
   383d8:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

000383f4 <sd_trans_multipliers>:
   383f4:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38404:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   38414:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   38424:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00038434 <mmc_trans_multipliers>:
   38434:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   38444:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   38454:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   38464:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   38474:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38484:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   38494:	746c 6320 646d 000a 000d 0000               lt cmd......

000384a0 <__FUNCTION__.17099>:
   384a0:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   384b0:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   384c0:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   384d0:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   384e0:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   384f0:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   38500:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   38510:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   38520:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   38530:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   38540:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   38550:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   38560:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   38570:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   38580:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   38590:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   385a0:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   385b0:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   385c0:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   385d0:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   385e0:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   385f0:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   38600:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   38610:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   38620:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   38630:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   38640:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   38650:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   38660:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   38670:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   38680:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   38690:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   386a0:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   386b0:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   386c0:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   386d0:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   386e0:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   386f0:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   38700:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   38710:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   38720:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   38730:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   38740:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   38750:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   38760:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   38770:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   38780:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   38790:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   387a0:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   387b0:	203f 6425 000a 0000 1bfc 0002 1bcc 0002     ? %d............
   387c0:	1bc4 0002 1bdc 0002 1bd4 0002 1bf4 0002     ................
   387d0:	1be4 0002 1bec 0002                         ........

000387d8 <__FUNCTION__.17967>:
   387d8:	6968 5f66 6573 646e 0000 0000               hif_send....

000387e4 <__FUNCTION__.17977>:
   387e4:	6968 5f66 7369 0072                         hif_isr.

000387ec <__FUNCTION__.17986>:
   387ec:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

000387fc <__FUNCTION__.17998>:
   387fc:	6968 5f66 6572 6563 7669 0065               hif_receive.

00038808 <__FUNCTION__.18014>:
   38808:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   38818:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   38828:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   38838:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   38848:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38858:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   38868:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   38878:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   38888:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   38898:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   388a8:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   388b8:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   388c8:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   388d8:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   388e8:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   388f8:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   38908:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   38918:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   38928:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   38938:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   38948:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   38958:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   38968:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   38978:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   38988:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   38998:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   389a8:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   389b8:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   389c8:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   389d8:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   389e8:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   389f8:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   38a08:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   38a18:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   38a28:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   38a38:	000a 0000 3731 343a 3a31 3734 0000 0000     ....17:41:47....
   38a48:	614d 2079 3220 3220 3230 0032 7244 7669     May  2 2022.Driv
   38a58:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   38a68:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   38a78:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   38a88:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   38a98:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   38aa8:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   38ab8:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   38ac8:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   38ad8:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   38ae8:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   38af8:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   38b08:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   38b18:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   38b28:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   38b38:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   38b48:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   38b58:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   38b68:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   38b78:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   38b88:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   38b98:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   38ba8:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   38bb8:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   38bc8:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   38bd8:	4220 6675 6566 0a72 0000 0000                Buffer.....

00038be4 <__FUNCTION__.17949>:
   38be4:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00038bf0 <__FUNCTION__.17978>:
   38bf0:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00038c00 <__FUNCTION__.18009>:
   38c00:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   38c10:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   38c20:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   38c30:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   38c40:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   38c50:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   38c60:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   38c70:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   38c80:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   38c90:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00038ca0 <__FUNCTION__.17806>:
   38ca0:	6863 7069 775f 6b61 0065 0000               chip_wake...

00038cac <__FUNCTION__.17855>:
   38cac:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   38cbc:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   38ccc:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   38cdc:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   38cec:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   38cfc:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   38d0c:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   38d1c:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   38d2c:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   38d3c:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   38d4c:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   38d5c:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   38d6c:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   38d7c:	6920 696e 2074 7562 0a73 0000                init bus...

00038d88 <__FUNCTION__.17853>:
   38d88:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00038d94 <__FUNCTION__.17860>:
   38d94:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00038da4 <crc7_syndrome_table>:
   38da4:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   38db4:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   38dc4:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   38dd4:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   38de4:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   38df4:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   38e04:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   38e14:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   38e24:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   38e34:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   38e44:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   38e54:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   38e64:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   38e74:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   38e84:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   38e94:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   38ea4:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   38eb4:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   38ec4:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   38ed4:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   38ee4:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38ef4:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   38f04:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38f14:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   38f24:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   38f34:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   38f44:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   38f54:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   38f64:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   38f74:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   38f84:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   38f94:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   38fa4:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   38fb4:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   38fc4:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   38fd4:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   38fe4:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   38ff4:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   39004:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39014:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   39024:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   39034:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   39044:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39054:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   39064:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   39074:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39084:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   39094:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   390a4:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   390b4:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   390c4:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   390d4:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   390e4:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   390f4:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   39104:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39114:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39124:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   39134:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   39144:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   39154:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   39164:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39174:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39184:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   39194:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   391a4:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   391b4:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   391c4:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   391d4:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   391e4:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   391f4:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   39204:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   39214:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39224:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   39234:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   39244:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   39254:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   39264:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   39274:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   39284:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39294:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   392a4:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   392b4:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   392c4:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   392d4:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   392e4:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   392f4:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   39304:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   39314:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39324:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   39334:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   39344:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39354:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   39364:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   39374:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   39384:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   39394:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   393a4:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   393b4:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   393c4:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   393d4:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   393e4:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   393f4:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   39404:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   39414:	2e2e 0a2e 0000 0000 3824 0002 3824 0002     ........$8..$8..
   39424:	38b4 0002 3778 0002 37be 0002 37e0 0002     .8..x7...7...7..
   39434:	3866 0002 3866 0002 3920 0002 374c 0002     f8..f8.. 9..L7..
   39444:	397a 0002 397a 0002 397a 0002 397a 0002     z9..z9..z9..z9..
   39454:	3802 0002 3d84 0002 3d84 0002 3e0c 0002     .8...=...=...>..
   39464:	3ce8 0002 3d2a 0002 3d48 0002 3dc2 0002     .<..*=..H=...=..
   39474:	3dc2 0002 3e6e 0002 3cc0 0002 3ebe 0002     .=..n>...<...>..
   39484:	3ebe 0002 3ebe 0002 3ebe 0002 3d66 0002     .>...>...>..f=..

00039494 <__FUNCTION__.17128>:
   39494:	7073 5f69 6d63 0064                         spi_cmd.

0003949c <__FUNCTION__.17135>:
   3949c:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

000394ac <__FUNCTION__.17144>:
   394ac:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

000394b8 <__FUNCTION__.17177>:
   394b8:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   394c8:	0000 0000                                   ....

000394cc <__FUNCTION__.17223>:
   394cc:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

000394dc <__FUNCTION__.17235>:
   394dc:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

000394ec <__FUNCTION__.17246>:
   394ec:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

000394fc <__FUNCTION__.17258>:
   394fc:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003950c <__FUNCTION__.17269>:
   3950c:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

00039518 <__FUNCTION__.17290>:
   39518:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   39528:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   39538:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   39548:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   39558:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   39568:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   39578:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39588:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   39598:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   395a8:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   395b8:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   395c8:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   395d8:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   395e8:	2074 2230 0000 0000                         t 0"....

000395f0 <lun_desc>:
   395f0:	f7ed 0001 f845 0001 f891 0001 f8dd 0001     ....E...........
   39600:	f90d 0001 f991 0001 fa21 0001 95d8 0003     ........!.......
   39610:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   39620:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   39630:	97a2 0002 981c 0002 981c 0002 97c0 0002     ................
   39640:	97ba 0002 97c6 0002 97a8 0002 97cc 0002     ................
   39650:	9802 0002 9a04 0002 9a54 0002 9a54 0002     ........T...T...
   39660:	9a50 0002 99f6 0002 9a16 0002 99e6 0002     P...............
   39670:	9a28 0002 9a3a 0002 9aa2 0002 9ad0 0002     (...:...........
   39680:	9ad0 0002 9acc 0002 9a9c 0002 9aa8 0002     ................
   39690:	9a96 0002 9aae 0002 9ab4 0002               ............

0003969c <tcc_modules>:
   3969c:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

000396a8 <_tcc_gclk_ids>:
   396a8:	1a1a 001b                                   ....

000396ac <_tcc_apbcmasks>:
   396ac:	0100 0000 0200 0000 0400 0000               ............

000396b8 <_tcc_maxs>:
   396b8:	ffff 00ff ffff 00ff ffff 0000               ............

000396c4 <_tcc_cc_nums>:
   396c4:	0204 0002                                   ....

000396c8 <_tcc_ow_nums>:
   396c8:	0408 0002                                   ....

000396cc <_tcc_intflag>:
   396cc:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   396dc:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   396ec:	0000 0001 0000 0002 0000 0004 0000 0008     ................

000396fc <LfnOfs>:
   396fc:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3970c:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3971c:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3972c:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3973c:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3974c:	5441 2020 2020 0020                         AT     .

00039754 <excvt.4558>:
   39754:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   39764:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   39774:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   39784:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   39794:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   397a4:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   397b4:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   397c4:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

000397d4 <Tbl>:
   397d4:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   397e4:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   397f4:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   39804:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   39814:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   39824:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   39834:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   39844:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   39854:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   39864:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   39874:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   39884:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   39894:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   398a4:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   398b4:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   398c4:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

000398d4 <tbl_lower.4308>:
   398d4:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   398e4:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   398f4:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   39904:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   39914:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   39924:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   39934:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   39944:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   39954:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   39964:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   39974:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   39984:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   39994:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   399a4:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   399b4:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   399c4:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   399d4:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   399e4:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   399f4:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   39a04:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   39a14:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   39a24:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   39a34:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   39a44:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   39a54:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   39a64:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   39a74:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   39a84:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   39a94:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   39aa4:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00039ab4 <tbl_upper.4309>:
   39ab4:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   39ac4:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   39ad4:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   39ae4:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   39af4:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   39b04:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   39b14:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   39b24:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   39b34:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   39b44:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   39b54:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   39b64:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   39b74:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   39b84:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   39b94:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   39ba4:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   39bb4:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   39bc4:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   39bd4:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   39be4:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   39bf4:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   39c04:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   39c14:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   39c24:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   39c34:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   39c44:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   39c54:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   39c64:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   39c74:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   39c84:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   39c94:	edb6 0002 edb6 0002 edb6 0002 ec44 0002     ............D...
   39ca4:	edb6 0002 ed2e 0002 edb6 0002 edb6 0002     ................
   39cb4:	edb6 0002 edb6 0002 edb6 0002 edb6 0002     ................
   39cc4:	edb6 0002 eda8 0002 514d 4354 0000 0000     ........MQTC....
   39cd4:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   39ce4:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39d24:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   39d3c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   39d7c:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   39d8c:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   39d9c:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   39dac:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   39dbc:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   39dcc:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   39ddc:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   39dec:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   39dfc:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   39e0c:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   39e1c:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   39e2c:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   39e3c:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   39e4c:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   39e5c:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   39e6c:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   39e7c:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   39e8c:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   39e9c:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   39eac:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   39ebc:	5448 5054 002f 0000 0d31 0000 0eaa 0003     HTTP/...1.......
   39ecc:	0ea4 0003 0e9e 0003 0e98 0003 0eb0 0003     ................
   39edc:	0e92 0003 0eb0 0003 0e8c 0003 0e86 0003     ................
   39eec:	0eb0 0003 0e80 0003 0e80 0003 0e7a 0003     ............z...
   39efc:	0e74 0003 0e6e 0003 2000 4200 2400 4200     t...n.... .B.$.B
   39f0c:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   39f1c:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   39f2c:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   39f3c:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   39f4c:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39f5c:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   39f6c:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39f7c:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   39f8c:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39f9c:	676e 3120 7473 5320 6565 6173 2177 0a0d     ng 1st Seesaw!..
   39fac:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39fbc:	7331 2074 6553 7365 7761 0d21 000a 0000     1st Seesaw!.....
   39fcc:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   39fdc:	676e 3220 646e 5320 6565 6173 2177 0a0d     ng 2nd Seesaw!..
   39fec:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   39ffc:	6e32 2064 6553 7365 7761 0d21 000a 0000     2nd Seesaw!.....
   3a00c:	6143 6e6e 746f 6620 6e69 2064 4d49 2155     Cannot find IMU!
   3a01c:	0a0d 0000 4d49 2055 6f66 6e75 2164 0a0d     ....IMU found!..
   3a02c:	0000 0000 4d49 2055 6e69 7469 6169 696c     ....IMU initiali
   3a03c:	657a 2164 0a0d 0000 6f43 6c75 2064 6f6e     zed!....Could no
   3a04c:	2074 6e69 7469 6169 696c 657a 4920 554d     t initialize IMU
   3a05c:	0a0d 0000 6548 7061 6220 6665 726f 2065     ....Heap before 
   3a06c:	7473 7261 6974 676e 7420 7361 736b 203a     starting tasks: 
   3a07c:	6425 0a0d 0000 0000 4c43 5f49 4154 4b53     %d......CLI_TASK
   3a08c:	0000 0000 5245 3a52 4320 494c 7420 7361     ....ERR: CLI tas
   3a09c:	206b 6f63 6c75 2064 6f6e 2074 6562 6920     k could not be i
   3a0ac:	696e 6974 6c61 7a69 6465 0d21 000a 0000     nitialized!.....
   3a0bc:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3a0cc:	6e69 2067 4c43 3a49 2520 0d64 000a 0000     ing CLI: %d.....
   3a0dc:	4957 4946 545f 5341 004b 0000 5245 3a52     WIFI_TASK...ERR:
   3a0ec:	5720 4649 2049 6174 6b73 6320 756f 646c      WIFI task could
   3a0fc:	6e20 746f 6220 2065 6e69 7469 6169 696c      not be initiali
   3a10c:	657a 2164 0a0d 0000 6548 7061 6120 7466     zed!....Heap aft
   3a11c:	7265 7320 6174 7472 6e69 2067 4957 4946     er starting WIFI
   3a12c:	203a 6425 0a0d 0000 4955 5420 7361 006b     : %d....UI Task.
   3a13c:	5245 3a52 5520 2049 6174 6b73 6320 756f     ERR: UI task cou
   3a14c:	646c 6e20 746f 6220 2065 6e69 7469 6169     ld not be initia
   3a15c:	696c 657a 2164 0a0d 0000 0000 6548 7061     lized!......Heap
   3a16c:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   3a17c:	4955 5420 7361 3a6b 2520 0d64 000a 0000     UI Task: %d.....
   3a18c:	6f43 746e 6f72 206c 6154 6b73 0000 0000     Control Task....
   3a19c:	5245 3a52 4320 6e6f 7274 6c6f 7420 7361     ERR: Control tas
   3a1ac:	206b 6f63 6c75 2064 6f6e 2074 6562 6920     k could not be i
   3a1bc:	696e 6974 6c61 7a69 6465 0d21 000a 0000     nitialized!.....
   3a1cc:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3a1dc:	6e69 2067 6f43 746e 6f72 206c 6154 6b73     ing Control Task
   3a1ec:	203a 6425 0a0d 0000 7245 6f72 2072 6e6f     : %d....Error on
   3a1fc:	6d20 6d65 726f 2079 6c61 6f6c 6163 6974      memory allocati
   3a20c:	6e6f 6f20 206e 5246 4545 5452 534f 0d21     on on FREERTOS!.
   3a21c:	000a 0000 7245 6f72 2072 6e6f 7320 6174     ....Error on sta
   3a22c:	6b63 6f20 6576 6672 6f6c 2077 6e6f 4620     ck overflow on F
   3a23c:	4552 5245 4f54 2153 0a0d 0000 30d0 0003     REERTOS!.....0..
   3a24c:	3020 0003 3020 0003 301e 0003 30c2 0003      0.. 0...0...0..
   3a25c:	30c2 0003 30b8 0003 301e 0003 30c2 0003     .0...0...0...0..
   3a26c:	30b8 0003 30c2 0003 301e 0003 30c8 0003     .0...0...0...0..
   3a27c:	30c8 0003 30c8 0003 3158 0003 3adc 0003     .0...0..X1...:..
   3a28c:	3abe 0003 3a78 0003 3996 0003 3a78 0003     .:..x:...9..x:..
   3a29c:	3ab0 0003 3a78 0003 3996 0003 3abe 0003     .:..x:...9...:..
   3a2ac:	3abe 0003 3ab0 0003 3996 0003 398e 0003     .:...:...9...9..
   3a2bc:	398e 0003 398e 0003 3cf4 0003 413c 0003     .9...9...<..<A..
   3a2cc:	3ffc 0003 3ffc 0003 3ff8 0003 4114 0003     .?...?...?...A..
   3a2dc:	4114 0003 4106 0003 3ff8 0003 4114 0003     .A...A...?...A..
   3a2ec:	4106 0003 4114 0003 3ff8 0003 411c 0003     .A...A...?...A..
   3a2fc:	411c 0003 411c 0003 4320 0003               .A...A.. C..

0003a308 <_global_impure_ptr>:
   3a308:	00d8 2000                                   ... 

0003a30c <__sf_fake_stderr>:
	...

0003a32c <__sf_fake_stdin>:
	...

0003a34c <__sf_fake_stdout>:
	...
   3a36c:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3a37c:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3a38c:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3a39c:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003a3a9 <_ctype_>:
   3a3a9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3a3b9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3a3c9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3a3d9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3a3e9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3a3f9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3a409:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3a419:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3a429:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003a4ac <_init>:
   3a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a4ae:	46c0      	nop			; (mov r8, r8)
   3a4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a4b2:	bc08      	pop	{r3}
   3a4b4:	469e      	mov	lr, r3
   3a4b6:	4770      	bx	lr

0003a4b8 <__init_array_start>:
   3a4b8:	000120dd 	.word	0x000120dd

0003a4bc <_fini>:
   3a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a4be:	46c0      	nop			; (mov r8, r8)
   3a4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3a4c2:	bc08      	pop	{r3}
   3a4c4:	469e      	mov	lr, r3
   3a4c6:	4770      	bx	lr

0003a4c8 <__fini_array_start>:
   3a4c8:	000120b5 	.word	0x000120b5
